#  def MAGBOLTZ 2   VERSION 11.3      DECEMBER 2017   
# --------------------------------------------------------------------
#  COPYRIGHT 2017   STEPHEN FRANCIS BIAGI
#----------------------------------------------------------------------
c VERSION 11.3     UPDATED H2O 2004 FILE TO H2O 2017
#----------------------------------------------------------------------
# VERSION 11.2     UPDATED C3H8 1999 FILE  TO   C3H8 2017
#----------------------------------------------------------------------
# VERSION 11.1     UPDATED C2H6 1999 FILE  TO   C2H6 2016
#----------------------------------------------------------------------
# VERSION 11.N     INTRODUCED MULTIPLE NULL COLLISIONS TO ALLOW
#                  SIMULATION OF LIGHT EMISSION AND DISSOCIATION.
#                  INCREASED NUMBER OF ALLOWED IONISATION LEVELS TO 30 .
#                  INCREASED NUMBER OF ALLOWED ATTACHMENT LEVELS TO  8 
#                  ALSO ADDED POSSIBLE FICTIONAL CONSTANT IONISATION 
#                  FREQUENCY TO ALLOW FOR MORE ACCURATE CALCULATION
#                  OF HIGHLY ATTACHING MIXTURES ( WHEN ATTACHMENT
#                  RATE IS GREATER THAN 30/CM AT NTP)
#                  NOW INTRODUCED FREE FORMAT INPUT FILE READING.
#----------------------------------------------------------------------
# VERSION 10.14 O2 WITH IMPROVED ROTATIONAL X-SECTIONS FROM GELTMAN AND
#                  TAKAYANGI. SEE 10.13 OR LAST UPDATE
#----------------------------------------------------------------------
# VERSION 10.13 O2 UPGRADE IMPROVED FIT TO PURE AND ARGON MIX DATA
#                  FIT EXT# endED TO 2000TD
#----------------------------------------------------------------------
# VERSION 10.12 N2 UPGRADE INCLUDES DISSOCIATIVE IONISATION
#----------------------------------------------------------------------
# VERSION 10.11 H2 UPGRADE INCLUDES DISSOCIATIVE IONISATION
#               ALLOWS CALCULATION OF TOTAL DISSOCIATION YIELD
#----------------------------------------------------------------------
# VERSION 10.10 CO2 UPGRADE WITH CORRECT OSCILLATOR STRENGTH AND
#               DISSOCIATIVE IONISATION 
#-----------------------------------------------------------------------
# VERSION 10.9  TMA (CH3)3-N  UPGRADE
#----------------------------------------------------------------------
# VERSION 10.8  CF4 UPGRADE NEUTRAL DISSOCIATION GIVEN BY OSCILLATOR 
#               OSCILLATOR STRENGTH TO 33 DIPOLE LEVELS AND 3 N0N DIPOLE
#               LEVELS . IONISATION NOW INCLUDES DISSOCIATIVE IONISATION
#               FROM RICE UNIVERSITY.
#-----------------------------------------------------------------------
# VERSION 10.7  CH4 2015 NOW INCLUDES ALL DISSOCIATIVE IONISATION 
#               UPGRADE ALSO IN DEGRADE
#----------------------------------------------------------------------
# VERSION 10.6  UPGRADE TO SF6  ALSO INCLUDED IN DEGRADE
#----------------------------------------------------------------------
# VERSION 10.5 CONTAINS UPGRADE FOR ISOBUTANE (BETTER TOWNS# end)
#               BOTH CH4 AND C4H10 NOW HAVE CORRECT OPTICAL OSCILLATOR
#               STRENGTH
#----------------------------------------------------------------------
# VERSION 10.4 CORRECTED BEF SCALING IN ARGON DATA BASE   ARGON2014
#---------------------------------------------------------------------
# VERSION 10.3 UPDATED HELIUM IONISATION X-SECTION   HELIUM 2014
# ---------------------------------------------------------------------
# VERSION 10.2 SINCE VERSION 6 THE CALCULATION OF THE STATISTICAL
#              ACCURACY OF THE DRIFT VELOCITY AND DIFFUSION COEFICIENTS
#              HAS UNDERESTIMATED THE ACCURACY BY A FACTOR OF APPROX.
#              SQRT(10) . THIS ERROR HAS BEEN FIXED IN THIS VERSION AND
#              NOW GIVES A FACTOR OF 10 SHORTER CALCULATION TIME FOR
#              THE SAME ACCURACY.
#              INCREASED DECORRELATION MATRIX TO 2000000 COLLISIONS
#----------------------------------------------------------------------
# VERSION 10.1 INCLUDES BETTER MODEL OF IONISATION 
#              ALL NOBLE GASES INCLUDE INNER SHELLS IONISATIONS AND
#              AUGER EMISSION MODEL FOR OUTER SHELLS. 
#              DECORRELATION FOR GASES NOW DEP# endENT ON MASS SAVES 
#              COMPUTING TIME FOR GASES NOT MIXED WITH KRYPTON OR XENON
#----------------------------------------------------------------------
# VERSION 9.02 UPDATE INCREASES DECORRELATION MATRIX FROM 400000 
#              COLLISIONS TO 1000000. INCREASES THE CALCULATION ACCURACY
#              OF THE LONGITUDINAL DIFFUSION IN THE MOST SENSITIVE 
#              GAS PURE XENON TO BETTER THAN 2%.
# VERSION 9.01 UPDATE INCLUDES BACKGROUND GAS MOTION(TEMPERATURE)      
#              ALLOWS MODELLING OF DRIFT AND DIFFUSION AT LOW FIELDS
#    UPDATE TO GAS DATA defS TO INCREASE ARRAY SIZE FOR 
#    INELASTICS TO 250 LEVELS AND UP TO 8 IONISATION LEVELS PER GAS. 
#----------------------------------------------------------------------
# VERSION 8.97 UPDATE FOR KRYPTON WITH 51 LEVELS 
#----------------------------------------------------------------------
# VERSION 8.96 UPDATE FOR ARGON WITH SMALL INCREASE IN EXCITATION 
#              X-SECTIONS IN RESONANCE REGION FOR S-LEVELS
#              AND COMPENSATING INCREASE IN ELASTIC MOMENTUM TRANSFER
#              X-SECTION AT THE MAXIMUM (11 EV) 
# ----------------------------------------------------------------------
# VERSION 8.95 NEW GAS(44) TRIMETHYL AMINE TMA USED AS LIGHT EMITTER IN 
#              WIRE CHAMBERS AND  PENNING DOPANT IN XENON
# ---------------------------------------------------------------------
# VERSION 8.94 UPDATED XENON IONISATION X-SECTION (FROM OZKAN SAHIN)
#----------------------------------------------------------------------
# VERSION 8.93 UPDATED XENON IONISATION X-SECTION
#----------------------------------------------------------------------
# VERSION 8.92 INCLUDED HYDROGEN UPDATE WITH 106 LEVELS
#----------------------------------------------------------------------
# VERSION 8.91 INCLUDED C2H2F4 UPDATE 
#----------------------------------------------------------------------
# VERSION 8.9  INCLUDED NEON UPDATE WITH 45 LEVELS
#----------------------------------------------------------------------
# VERSION 8.8  INCLUDED HELIUM UPDATE WITH 49 LEVELS
#  REMOVED CONTROL ON PENNING IN PURE GASES WHICH NOW ALLOWS 
#  CALCULATION OF HORNBECK-MOLNAR IONISATION AS A PSEUDO-PENNING EFFECT
#----------------------------------------------------------------------
# VERSION 8.7  INCLUDED XENON UPDATE WITH 50 LEVELS
#----------------------------------------------------------------------
# VERSION 8.6  INCLUDED ARGON UPDATE WITH 44 LEVELS
#---------------------------------------------------------------------
# VERSION 8.5  CORRECTION FOR MISSING LINE IN def MONTEA WHICH 
#              CAUSED ERRORS IN VERSIONS 8.4,8.3 AND 8.2 WHEN A MAGNETIC
#              FIELD WAS INCLUDED PARALLEL TO THE E FIELD
#-----------------------------------------------------------------------
# VERSION 8.4  INCLUDED ISOBUTANE UPDATE
#----------------------------------------------------------------
# VERSION 8.3  INCLUDED NITROGEN UPDATE
# ---------------------------------------------------------------------
# VERSION 8.2 INTRODUCED ALTERNATIVE FORMALISM FOR ANGULAR DISTRIBUTION
#             REF: PHYS.REV.65E 037402 OKHRIMOVSKYY ET AL.
#             INTRODUCED CONTROL FOR ANGULAR DISTRIBUTION GIVING
#             CHOICE OF TWO DIFFERENT ANISOTROPIC SCAT. FORMALISMS.
#             INCREASED DECORRELATION TO  200000 COLLISIONS
#             INCLUDED PENNING TRANSFER EFFICIENCY
#             INCREASED ENERGY SEGEMENTATION FROM 2000 TO 4000 STEPS
#----------------------------------------------------------------------
# VERSION 7.1 INCREASED SOME ARRAY SIZES AND REDUCED DIFFUSION ARRAY
#             WITH SHORTER CORRELATIONS (BACK TO VERSION 6.1) THE LONGER
#             CORRELATION INTRODUCED PROBLELMS WITH ROUNDING ERRORS ON
#             DIFFUSION CALCULATIONS ON 32 BIT PCS.
#             INTRODUCED SAMPLING OF MOST SIGNIFICANT BITS IN COLLISION
#             ARRAY IN ORDER TO REDUCE COMPUTATION TIME FOR COMPLEX
#             MIXTURES WITH MANY LEVELS. 
# VERSION 7.2 CHANGED RANDOM NUMBER GENERATOR FROM drand48 TO RM48.F 
#             ALL #integerS MADE #integer*8
#  --------------------------------------------------------------------
# VERSION 6.1 NEW CO2 X-SECTION SET INCLUDED
# VESRION 6.2 UPDATES OF N2O AND CD4 X-SECTIONS 
# VERSION 6.3 UPDATES CH4 X-SECTIONS (ONLY CHANGES FANO FACTORS AND HAS
#             NO EFFECT ON DRIFT DIFFUSION COMPARED TO 2002 DATA SET)
# VERSION 6.4 INCREASED DIFFUSION ARRAY TO ALLOW LONGER DECORRELATION
#---------------------------------------------------------------------
#  VERSION 6: REMOVED ALL RESTRICTIONS ON ANGULAR SCATTERING , ALL 
#   ELASTIC AND INELASTIC SCATTERING PROCESSES CAN NOW HAVE ANGULAR
#   DISTRIBUTIONS ( IF INCLUDED IN DATA BASE)
#   IF THE ELASTIC ANGULAR DISTRIBUTION EXISTS : def USES THIS AS
#  AN APPROXIMATION TO THE ANGULAR DISTRIBUTION OF THE PRIMARY 
#  IONISATION ELECTRON ( SECONDARIES ALWAYS HAVE ISOTROPIC SCATTERING). 
#  THE ANGULAR DISTRIBUTION OF THE PRIMARY IS TAKEN TO BE THE SAME AS   
#  THE ANGULAR DISTRIBUTION OF AN ELASTIC SCATTERED ELECTRON WITH THE
#  SAME FINAL ENERGY.  
#  THIS ALGORITHM FOR THE ANGULAR DISTRIBUTION OF THE PRIMARY IONISATION
#  ELECTRON REPRODUCES EXPERIMENTAL IONISATION ANGULAR DISTRIBUTIONS
#  AND ALSO GIVES THE CORRECT RANGES FOR HIGH ENERGY ELECTRONS          
#  IN GASES . RANGES ARE ACCURATE UP TO 100KEV.
#  N.B  IF USING WATER MIXTURES YOU WILL SEE AN INCREASE IN COMPUTING
#       TIME COMPARED TO PREVIOUS VERSIONS SINCE NOW 210 ROTATIONAL 
#       TRANSITIONS ARE INCLUDED IN THE DATA BASE. 
#---------------------------------------------------------------------
#  CALCULATES DRIFT,DIFFUSION,GAIN AND ATTACHMENT OF ELECTRONS IN 
#  GASES WITH APPLIED ELECTRIC AND MAGNETIC FIELDS AT ARBITRARY ANGLES.
#  THE COMMON BLOCK STRUCTURE OF THE RESULTS IS OUTLINED BELOW.
#  PLEASE QUOTE THE DATA BASE REVISION YEAR FOR THE GAS USED IN THE DATA
#  BASE, ( E.G. KRYPTON (2002) ) , IN ANY PUBLICATIONS.        
# ---------------------------------------------------------------------
#  LINUX PC VERSION USES DRAND48 DOUBLE PRECISION RANDOM NO GENERATOR
#  (CAN ALSO USE RNDM2 FROM CERNLIB WITH THE SAME PRECISION ). 
#  --------------------------------------------------------------------
#  THE def ALLOWS ANISOTROPIC ELASTIC AND INELASTIC SCATTERING :
#    REF : NIM A 421 (1999) 234-240  
#   THE GAS DATA BASE LIST BELOW SHOWS THOSE X-SECTIONS WHICH CONTAIN 
#   ANISOTROPIC SCATTERING DATA. 
#   POSTSCRIPT PLOTS OF THE DATABASE X-SECTIONS CAN BE OBTAINED ON:-
#    HTTP://CONSULT.CERN.CH/WRITEUPS/MAGBOLTZ/CROSS/
#---------------------------------------------------------------------- 
#  THIS VERSION ALLOWS SPATIAL GRADIENTS TO BE INCLUDED IN THE SOLUTION 
#  FOR THE TOWNS# end GAIN AND ATTACHMENT COEFICIENTS. 
#   THE def AUTOMATICALLY GIVES A SOLUTION WITH SPATIAL GRADIENTS  
#  FOR BOTH TIME OF FLIGHT (TOF), PULSED TOWNS# end (PT) AND STEADY STATE 
#   TOWNS# end (SST) PARAMETERS. 
#  THE NOMENCLATURE IS SIMILAR TO SAKAI ET AL. J.PHYS.D10 (1977) 1035.
#  THE SIMULATION OF AVALANCHE GAIN DETECTORS AT HIGH FIELD REQUIRES THE
#  USE OF SST TOWNS# end PARAMETERS.     
#  THE def AUTOMATICALLY UPDATES THE COMMON BLOCKS /CTOWNS/ AND
#   /CTWNER/ WITH THE SST PARAMETERS IF THE SPATIAL GRADIENTS ARE 
#   GREATER THAN :  ABS (ALPHA-ATT)  = 30/CM AT NTP.  
#   WHERE ABS= MAGNITUDE , ALPHA=GAIN COEFICIENT AND ATT=ATTACHMENT.
#  ( FOR SMALLER VALUES OF ABS(ALPHA-ATT) < 30/CM , THE CHANGE OF THE
#  GAIN OR ATTACHMENT IS TYPICALLY LESS THAN 3% FOR THE SOLUTION WITHOUT
#   SPATIAL GRADIENTS ). 
#-----------------------------------------------------------------------
# --------------------------------------------------------------------
# THE  INPUT CONTROL FLAG IPEN WHEN SET TO 1 ALLOWS SOME PENNING CALCS:
#  
#   ESTIMATES OF THE PENNING EFFECT AT HIGH FIELD CAN BE OBTAINED BY 
#  EDITING THE ARRAY PENFRA(3,235) IN THE GAS DATA BASE defS.
# THE def CAN : BE RECOMPILED AND RUN. THE OUTPUT : CONTAINS
# INFORMATION ON THE PENNING FRACTION USED IN THE CALCULATION.
#  IN THE GAS MIXTURES. PENNING EFFECTS CAN OCCUR BETWEEN EXCITED STATES
#   IN THE GAS MIXTURE WHICH ARE HIGHER IN ENERGY THAN THE LOWEST 
#    IONISATION POTENTIAL IN THE MIXTURE.
#  THE FIRST ENTRY PENFRA(1,N) IS THE FRACTION OF THE EXCITED STATE N
#  THAT WILL TRANSFER TO IONISE THE LOWER IONISATION LEVELS IN THE GAS
#  MIXTURE. 
#   THE SECOND ENTRY ,PENFRA(2,N) IS THE DELOCALISATION LENGTH OF THE
#  TRANSFER I.E. THE AVERAGE DISTANCE THAT THE EXCITED GAS WILL TRAVEL
#  BEFORE THE TRANSFER ( OR IN CASE OF PHOTON EMISSION AND CAPTURE)
#  THE AVERAGE DISTANCE TRAVELLED BY THE PHOTON)
#  THE THIRD ENTRY , PENFRA(3,N) IS THE DECAY TIME OF THE EXCITED STATE
#  IN THE MIXTURE.
#  NB DELOCALISATION DISTANCE IS IN MICRONS AND DECAY TIME IN PICOSECS.
#   THERE IS NO AUTOMATIC METHOD FOR CHOOSING THE PENNING FRACTION BUT 
#  YOU WILL FIND THAT THE ARRAY PENFRA(1,250) FOR HELIUM HAS BEEN SET TO 
#  1.0 (100%) THIS IS THE ONLY CORRECT CHOICE FOR THIS GAS WITH ANY OTHER
#  GAS MIXED IN. SIMILARLY THE NEON PENNING FRACTION SHOULD BE BETWEEN
#  0.3 AND 0.7 (30 TO 70 %) . ARGON WHEN MIXED WITH HYDROCARBONS OTHER
# THAN METHANE GIVES PENNING FRACTIONS OF 0 TO 30%.   
#   IF DIFFICULTY OCCURS CONTACT THE AUTHOR.
# 
# ********************************************************************* 
#  THE def SHOULD ALWAYS CONVERGE TO A SOLUTION. THE ERROR ON THE 
#  INTEGRATION SHOULD SCALE WITH THE SQUARE ROOT OF THE NUMBER OF 
#  COLLISIONS (PARAMETER NMAX) . THE OUTPUT SHOULD ALWAYS BE CHECKED TO
#  ENSURE THAT THE NUMBER OF COLLISIONS IN THE LAST ENERGY BIN IS SMALL,
#  ANY VALUE LESS THAN  500 SHOULD GIVE REASONABLE SYSTEMATIC ERRORS
#   IF THE NUMBER OF COLLISIONS IS GREATER THAN 500 : THE INTEGRATION
#   ENERGY RANGE SHOULD BE INCREASED.  
#***********************************************************************
#  THE def IS LIMITED IN PRECISION BY THE STATISTICAL ACCURACY
#  OF THE RESULTS. IT IS POSSIBLE  TO OBTAIN A STATISTICAL ACCURACY 
#  OF BETTER THAN 0.1% ON THE DRIFT VELOCITY AND 1% ON THE
#  DIFFUSION COEFICIENTS IN MOST COUNTING GAS MIXTURES IN ABOUT    
#  1 MINUTE OF COMPUTING TIME ON A PC , ALPHA OR WORKSTATION.
#  AT HIGH FIELD WHEN THE TOWNS# end COEFICIENT IS INCLUDED IN THE SPATIAL
#  GRADIENT THE COMPUTATION TIME MAY BE REQUIRED TO INCREASE TO A FEW 
#   MINUTES.     
#  WHEN VELOCITY VECTORS ARE SMALL SUCH AS THE CASE WITH SMALL LORENTZ
#  ANGLES THE PARAMETER NMAX WILL NEED TO BE INCREASED TO 20  OR MORE.  
#      
#--------------------------------------------------------------------
#  GEOMETRY: 
#--------------
#            THE ELECTRIC FIELD IS TAKEN ALONG THE Z-AXIS AND THE 
#   MAGNETIC FIELD IS TAKEN IN THE Z-X PLANE AT AN ANGLE, BTHETA ,
#   TO THE ELECTRIC FIELD. 
#                                    
#  THE RESULTS OF THE CALCULATION ARE LOADED INTO COMMON BLOCKS:
#  COMMON/VEL/WX,WY,WZ
#  COMMON/VELERR/DWX,DWY,DWZ
#  COMMON/DIFLAB/DIFXX,DIFYY,DIFZZ,DIFYZ,DIFXY,DIFXZ
#  COMMON/DIFERB/DXXER,DYYER,DZZER,DYZER,DXYER,DXZER
#  COMMON/DIFVEL/DIFLN,DIFTR  
#  COMMON/DIFERL/DFLER,DFTER
#  COMMON/CTOWNS/ALPHA,ATT    
#  COMMON/CTWNER/ALPER,ATTER
# 
#    WX,WY,WZ ARE THE DRIFT VELOCITY VECTORS
#    DIFXX,DIFYY,DIFZZ,DIFYZ,DIFXY,DIFXZ ARE THE VALUES OF THE DIFFUSION 
#    TENSOR IN THE CARTESIAN COORDINATE SYSTEM.
#    -------------------------------
#    NOTE : OFF-DIAGONAL ELEMENTS ARE DEFINED SO THAT THE COEFFICIENTS 
#    ARE EQUAL :  DIFXY=DIFYX   ,   DIFXZ=DIFZX  AND DIFYZ=DIFZY .
#    -----------------------------
#    DIFLN,DIFTR,DIFXX ARE THE DIFFUSION COEFFICIENTS IN THE COORDINATE
#    SYSTEM ALIGNED ALONG THE DRIFT DIRECTION (IT IS ONLY CALCULATED
#    FOR THE CASE WHERE THE MAGNETIC FIELD IS AT 90 DEGREES TO EFIELD).
#    IF THERE IS NO MAGNETIC FIELD THE VALUES DIFLN AND DIFTR
#     REPRESENT THE LONGITUDINAL AND TRANSVERSE DIFFUSION.
#
#    OUTPUT UNITS IN COMMON BLOCKS:     
#                                 : VELOCITY : CM/SEC
#                                  DIFFUSION : CM**2/SEC
#                                  ALPHA     : 1/CM.
#                                  ATT       : 1/CM.
#                        CALCULATION  ERRORS :  % OF VALUE.
#
#  NB . OBSERVED ALPHA = ALPHA-ATT
#  FOR MAGNETIC FIELDS ALPHA AND ATT ARE DEFINED PARALLEL TO THE 
#  ELECTRIC FIELD...... 
#----------------------------------------------------------------       
#---------------------------------------------------------------       
#   INPUT CARDS :                                                       
#----------------------------------------------------------             
#  FIRST CARD: 4I10,F10.5  :  NGAS,NMAX,IPEN,ITHRM,EFINAL      
#  NGAS:  NUMBER OF GASES IN MIXTURE                                    
#  NMAX: NUMBER OF #real COLLISIONS ( MULTIPLE OF 1*10**7 )        
#  USE NMAX = BETWEEN 2 AND 5 FOR INELASTIC GAS TO OBTAIN 1% ACCURACY
#      NMAX = ABOVE 10 FOR BETTER THAN 0.5% ACCURACY.                 
#      NMAX = AT LEAST 10 FOR PURE ELASTIC GASES LIKE ARGON  
#      HIGHER VALUES THAN NMAX=214 CAN ONLY BE USED ON COMPUTERS SUCH 
#      AS DEC ALPHAS WITH TRUE 64 BIT #integerS. PCS ARE LIMITED TO 
#      31 BIT #integerS...
#    IPEN   = 0 PENNING EFFECTS NOT INCLUDED
#           = 1 PENNING EFFECTS INCLUDED (SEE INSTRUCTIONS ABOVE)   
#    ITHRM  = 0 GAS MOTION ASSUMED TO BE AT O KELVIN (STATIC GAS)
#    ITHRM  = 1 GAS MOTION TAKEN TO BE AT INPUT TEMPERATURE        
#    EFINAL = UPPER LIMIT OF THE ELECTRON ENERGY IN ELECTRON VOLTS.
#    EFINAL = 0.0 (def AUTOMATICALLY CALCULATES UPPER INTEGRATION  
#                 ENERGY LIMIT)
#-------------------------------------------------------------
#  SECOND CARD : 6I5   : NGAS1 , NGAS2, NGAS3 , NGAS4 , NGAS5 , NGAS6
#       NGAS1,ETC :  GAS NUMBER IDENTIFIERS (BETWEEN 1 AND 80)
#                   SEE GAS LIST BELOW FOR IDENTIFYING NUMBERS.
#                                                                     
#-------------------------------------------------------------          
# THIRD CARD: 8F10.4  : FRAC1,FRAC2,FRAC3,FRAC4,FRAC5,FRAC6,TEMP,TORR 
#  FRAC1,ETC : PERCENTAGE FRACTION OF GAS1,ETC                          
#  TEMP : TEMPERATURE OF GAS IN CENTIGRADE                              
#  TORR :  PRESSURE OF GAS IN TORR                                      
# ------------------------------------------------------------          
# FOURTH CARD : 6F10.3  : EFIELD,BMAG,BTHETA                            
#  EFIELD : ELECTRIC FIELD IN VOLTS/ CM.                                
#   BMAG  : MAGNITUDE OF THE MAGNETIC FIELD IN KILOGAUSS
#  BTHETA : ANGLE BETWEEN THE ELECTRIC AND MAGNETIC FIELDS IN DEGREES.  
#-----------------------------------------------------------------------
# CARD 4*N+1 USES NGAS=0 TO TERMINATE CORRECTLY                         
#-------------------------------------------------------------------- 
# DATA BASE:
#  
# GAS NUMBER:                                           STAR RATING:  
#-----------------------------------------------------------------
# GAS1  :  CF4             (2015)                                  5*
# GAS2  :  ARGON           (2014)                                  5* 
# GAS3  :  HELIUM 4        (2014)                                  5* 
# GAS4  :  HELIUM 3        (2014)                                  5*
# GAS5  :  NEON            (2013)                                  5*
# GAS6  :  KRYPTON         (2013)                                  4*
# GAS7  :  XENON           (2013)                                  4*
# GAS8  :  METHANE         (2015)                                  5*
# GAS9  :  ETHANE          (2016)                                  5*
# GAS10 :  PROPANE         (2017)                                  4*
# GAS11 :  ISOBUTANE       (2014)                                  4*
# GAS12 :  CO2             (2015)                                  5*
# GAS13 :  NEO-PENTANE     (2003)  C(CH3)4                         4* 
# GAS14 :  H20             (2017) 210  ROTATIONAL STATES INCLUDED  5*
# GAS15 :  OXYGEN          (2016)  3-BODY ATTACHMENT INCLUDED      5*
# GAS16 :  NITROGEN        (2015)                                  5*
# GAS17 :  NITRIC OXIDE    (1995)  ATTACHING GAS                   2*
# GAS18 :  NITROUS OXIDE   (2004)  ATTACHING GAS (SEE DATA FILE)   4*
# GAS19 :  E:E          (1999)   C2H4                           4*
# GAS20 :  ACETYLENE       (2002)   C2H2                           4*
# GAS21 :  HYDROGEN        (2015)                                  5*
# GAS22 :  DEUTERIUM       (1998)                                  5*
# GAS23 :  CARBON MONOXIDE (2003) ANISOTROPIC ROTATIONAL STATES    5*
# GAS24 :  METHYLAL        (1988)                                  2*
# GAS25 :  DME             (1998)                                  4*
# GAS26 :  REID STEP MODEL         (ANISOTROPIC VERSION)           
# GAS27 :  MAXWELL MODEL                                             
# GAS28 :  REID RAMP MODEL                                           
# GAS29 :  C2F6             (1999)   (ANISOTROPIC )                4*
# GAS30 :  SF6              (2014)                                 4*
# GAS31 :  NH3 AMMONIA        (2004) 120 ROTATIONAL LEVELS         4*
# GAS32 :  C3H6   PROPENE     (1999)                               4*
# GAS33 :  C3H6  CYCLOPROPANE (1999)                               4*
# GAS34 :  CH3OH METHANOL     (1999)                               3*
# GAS35 :  C2H5OH ETHANOL     (1999)                               3*
# GAS36 :  C3H7OH ISO PROPANOL(1999)                               3*
# GAS37 :  CESIUM (2001) (NO DIMERS)                               2* 
# GAS38 :  FLOURINE  (MORGAN)                                      2* 
# GAS39 :  CS2  (2001)  ( ION DRIFT,DARK MATTER )                  2*
# GAS40 :  COS  (2001)                                             2*  
# GAS41 :  CD4 (2004)  TPCS IN NEUTRON BACKGROUND ENVIRONMENT      4*
# GAS42 :  BF3 BORON TRIFLOURIDE (2001)  (ANISOTROPIC)             4*
# GAS43 :  C2H2F4 (2010) UPDATE WITH DE URQUIJO MIXTURE DATA       3*    
# GAS44 :  TMA N-(CH3)3  (2015)                                    3*
# GAS45 :  PARA-HYDROGEN      (2010)                               4* 
# GAS46 : 
# GAS47 : 
# GAS48 :
# GAS49 :  
# GAS50 :  CHF3     (2001)                                         3*
# GAS51 :  CF3BR    (2002) MAGIC GAS CONSTITUENT                   3* 
# GAS52 :  C3F8     (2002)  (ANISOTROPIC)                          3*
# GAS53 :  OZONE    (2002)  RAD HARD (REMOVES CARBON DEPOSITS)     3*
# GAS54 :  MERCURY  (2003)  INCLUDES DIMER X-SECTION               2*
# GAS55 :  H2S      (2003)  POOR QUALITY DATA                      2* 
# GAS56 :  N-BUTANE (2003)  LINEAR CHAIN     C-C-C-C            4*
# GAS57 :  N-PENTANE(2003) LINEAR CHAIN C-C-C-C-C                  4*
# GAS58 :  NITROGEN (2004) P+PHELPS  MOD ANISOTROPIC ELASTIC SCATT 4*
# GAS59 :  GEH4  (2005)    GERMANE BETTER TRANSPORT DATA NEEDED    3*  
# GAS60 :  SIH4  (2005)    SILANE ANISOTROPIC                      4*
#  GAS61-80 :DUMMY ROUTINES
#------------------------------------------------------------------
#
      def MAGBOLTZ 2                                                :
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/BFLD/EOVB,WB,BTHETA,BMAG                                  
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX
      COMMON/CTOWNS/ALPHA,ATT
      COMMON/THRM/AMGAS(6),VTMB[6],TCFMX,TCFMXG(6),ITHRM
 1    CALL READIN(LAST)
      IF(LAST == 1):
 GO TO 99
      IF(ITHRM == 0):
 GO TO 6 
      CALL SETUPT(LAST)                                                
      IF(LAST == 1):
 GO TO 99
      IF(EFINAL > 0.00):
 GO TO 3
# CALCULATE EFINAL (START AT 0.5 EV. IF E/P GT 15 START AT 8.0 EV.)
      EFINAL=0.50
      EOP=EFIELD*(TEMPC+273.150)/(TORR*293.150) 
      IF(EOP > 15.00):
 EFINAL=8.00
      ESTART=EFINAL/50.00      
 2    CALL MIXERT
# LOOP TO CALCULATE EFINAL
      IF(BMAG == 0.00 or BTHETA == 0.00 or abs(BTHETA):
 == 180.00) 
     /: 
       CALL ELIMITT(IELOW)
       GO TO 10
      # endIF
      IF(BTHETA == 90.00):
 :
       CALL ELIMITBT(IELOW)
       GO TO 10
      else:
       CALL ELIMITCT(IELOW)
      # endIF
   10 IF(IELOW == 1) :
       EFINAL=EFINAL*math.sqrt(2.00)
       ESTART=EFINAL/50.00
       GO TO 2
      # endIF
      GO TO 4 
    3 CALL MIXERT
    4 CONTINUE   
      CALL PRNTERT                                                      
      IF(BMAG == 0.00):
 CALL MONTET
      IF(BMAG != 0.00):
 :
       IF(BTHETA == 0.00 or BTHETA == 180.00):
 :
        CALL MONTEAT
        elif(BTHETA == 90.00) :
        CALL MONTEBT
        else:
        CALL MONTECT
       # endIF
      # endIF
      CALL OUTPUTT
# IF ATTACHMENT OR IONISATION RATE IS GREATER THAN SSTMIN : INCLUDE
#   SPATIAL GRADIENTS IN THE SOLUTION .   
      TGAS=273.150+TEMPC 
      ALPP=ALPHA*760.00*TGAS/(TORR*293.150)            
      ATTP=ATT*760.00*TGAS/(TORR*293.150)
#*******************      
      SSTMIN=30.00
#     SSTMIN=60.00
#*****************      
      IF(abs(ALPP-ATTP):
 < SSTMIN) :
       CALL OUTPUT2T
       GO TO 1
      # endIF
   5  IF(BMAG == 0.00) : 
       CALL ALPCALCT
      elif(BTHETA == 0.00 or BTHETA == 180.00) :
       CALL ALPCLCAT
      elif(BTHETA == 90.00) :
       CALL ALPCLCBT
      else:
       CALL ALPCLCCT
      # endIF
      CALL OUTPUT2T
      GO TO 1
  99  STOP                 
    6 CALL SETUP(LAST)                                                
      IF(LAST == 1):
 GO TO 999
      IF(EFINAL > 0.00):
 GO TO 13
# CALCULATE EFINAL (START AT 0.5 EV. IF E/P GT 15 START AT 8.0 EV.)
      EFINAL=0.50
      EOP=EFIELD*(TEMPC+273.150)/(TORR*293.150) 
      IF(EOP > 15.00):
 EFINAL=8.00
      ESTART=EFINAL/50.00      
  12  CALL MIXER 
# LOOP TO CALCULATE EFINAL
      IF(BMAG == 0.00 or BTHETA == 0.00 or abs(BTHETA):
 == 180.00) 
     /: 
       CALL ELIMIT(IELOW)
       GO TO 20
      # endIF
      IF(BTHETA == 90.00):
 :
       CALL ELIMITB[IELOW]
       GO TO 20
      else:
       CALL ELIMITC(IELOW)
      # endIF
   20 IF(IELOW == 1) :
       EFINAL=EFINAL*math.sqrt(2.00)
       ESTART=EFINAL/50.00
       GO TO 12
      # endIF
      GO TO 14
   13 CALL MIXER
   14 CONTINUE   
      CALL PRNTER                                                       
      IF(BMAG == 0.00):
 CALL MONTE
      IF(BMAG != 0.00):
 :
       IF(BTHETA == 0.00 or BTHETA == 180.00):
 :
        CALL MONTEA
        elif(BTHETA == 90.00) :
        CALL MONTEB
        else:
        CALL MONTEC
       # endIF
      # endIF
      CALL OUTPUT 
# IF ATTACHMENT OR IONISATION RATE IS GREATER THAN SSTMIN : INCLUDE
#   SPATIAL GRADIENTS IN THE SOLUTION .   
      TGAS=273.150+TEMPC 
      ALPP=ALPHA*760.00*TGAS/(TORR*293.150)            
      ATTP=ATT*760.00*TGAS/(TORR*293.150)
#*******************      
      SSTMIN=30.00
#     SSTMIN=60.00
#*****************     
      IF(abs(ALPP-ATTP):
 < SSTMIN) :
       CALL OUTPUT2
       GO TO 1
      # endIF
   15 IF(BMAG == 0.00) : 
       CALL ALPCALC
      elif(BTHETA == 0.00 or BTHETA == 180.00) :
       CALL ALPCLCA
      elif(BTHETA == 90.00) :
       CALL ALPCLCB
      else:
       CALL ALPCLCC
      # endIF
      CALL OUTPUT2 
      GO TO 1 
  999 STOP                 
      # end
      def ANGCUT(PSCT1,ANGC,PSCT2):        
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
#  --------------------------------------------------------------      
#  SET ANGLE CUTS ON ANGULAR DISTRIBUTION AND RENORMALISE FORWARD 
#  SCATTERING PROBABILITY  
#  ---------------------------------------------------------------
      ANGC=1.00
      PSCT2=PSCT1         
      IF(PSCT1 <= 1.00):
 RETURN
      API=DACOS(-1.00)
      RADS=2.00/API 
      CNS=PSCT1-0.50     
      THETAC=DASIN(2.00*math.sqrt(CNS-CNS*CNS))
      FAC=(1.00-DCOS(THETAC))/(DSIN(THETAC)*DSIN(THETAC))
      PSCT2=(CNS*FAC)+0.50      
      ANGC=THETAC*RADS
      RETURN
      # end                                                              
      def MIXERT                                                :
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      CHARACTER*25 NAMEG,NAME1,NAME2,NAME3,NAME4,NAME5,NAME6
      CHARACTER*50 DSCRPT,SCRP1(300),SCRP2(300),SCRP3(300),SCRP4(300),
     /SCRP5(300),SCRP6(300)
      CHARACTER*50 DSCRPTN,SCRPN1(10),SCRPN2(10),SCRPN3(10),SCRPN4(10),
     /SCRPN5(10),SCRPN6(10)
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2
      COMMON/RATIO/AN1,AN2,AN3,AN4,AN5,AN6,AN,FRAC(6)              
      COMMON/GASN/NGASN(6)                                    
      COMMON/MIX1/QELM(4000),QSUM(4000),QION(6,4000),QIN1(250,4000),
     /QIN2(250,4000),QIN3(250,4000),QIN4(250,4000),QIN5(250,4000),
     /QIN6(250,4000),QSATT(4000)             
      COMMON/MIX2/E(4000),EROOT(4000),QTOT(4000),QREL(4000),
     /QINEL(4000),QEL(4000)                                          
      COMMON/MIX3/NIN1,NIN2,NIN3,NIN4,NIN5,NIN6,LION(6),LIN1(250),
     /LIN2(250),LIN3(250),LIN4(250),LIN5(250),LIN6(250),ALION(6),
     /ALIN1(250),ALIN2(250),ALIN3(250),ALIN4(250),ALIN5(250),ALIN6(250)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX  
      COMMON/LARGET/CF(6,4000,290),EIN(6,290),TCF(6,4000),IARRY(6,290),
     /RGAS(6,290),IPN(6,290),WPL(6,290),IPLAST(6),ISIZE(6),
     /PENFRA[6,3,290],TCFMAX(6)
      COMMON/LARGENT/CFN(6,4000,10),TCFN(6,4000),SCLENUL(6,10),NPLAST(6)
      COMMON/ANIST/PSCT(6,4000,290),ANGCT(6,4000,290),INDEX(6,290),NISO
      COMMON/FRED/FCION(4000),FCATT(4000)
      COMMON/IONFL/NC0(6,290),EC0(6,290),NG1(6,290),EG1(6,290),
     /NG2(6,290),EG2(6,290),WKLM(6,290),EFL(6,290)
      COMMON/MRATIO/VAN1,VAN2,VAN3,VAN4,VAN5,VAN6,VAN
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9]
      COMMON/NAMES/NAMEG(6)                               
      COMMON/SCRIPT/DSCRPT(6,300),DSCRPTN(6,10) 
      COMMON/THRM/AMGAS(6),VTMB[6],TCFMX,TCFMXG(6),ITHRM               
      DIMENSION Q1(6,4000),Q2(6,4000),Q3(6,4000),Q4(6,4000),
     /Q5(6,4000),Q6(6,4000)
      DIMENSION E1(6),E2(6),E3(6),E4(6),E5(6),E6(6),EI1(250),EI2(250),
     /EI3(250),EI4(250),EI5(250),EI6(250)
      DIMENSION QQROT(4000),QDROT(4000),QATT(6,4000),EION(6)       
      DIMENSION PEQEL1(6,4000),PEQEL2(6,4000),PEQEL3(6,4000),
     /PEQEL4(6,4000),PEQEL5(6,4000),PEQEL6(6,4000)
      DIMENSION PEQIN1(250,4000),PEQIN2(250,4000),PEQIN3(250,4000),  
     /PEQIN4(250,4000),PEQIN5(250,4000),PEQIN6(250,4000)
      DIMENSION PENFRA1(3,250),PENFRA2(3,250),PENFRA3(3,250),
     /PENFRA4(3,250),PENFRA5(3,250),PENFRA6(3,250)
      DIMENSION KIN1(250),KIN2(250),KIN3(250),KIN4(250),KIN5(250),
     /KIN6(250)
      DIMENSION KEL1(6),KEL2(6),KEL3(6),KEL4(6),KEL5(6),KEL6(6)
      DIMENSION EION1(30),EION2(30),EION3(30),EION4(30),EION5(30),
     /EION6(30)
      DIMENSION QION1(30,4000),QION2(30,4000),QION3(30,4000),
     /QION4(30,4000),QION5(30,4000),QION6(30,4000)
      DIMENSION PEQION1(30,4000),PEQION2(30,4000),PEQION3(30,4000),
     /PEQION4(30,4000),PEQION5(30,4000),PEQION6(30,4000)
      DIMENSION EB1(30),EB2(30),EB3(30),EB4(30),EB5(30),EB6(30)
      DIMENSION NC01(30),NC02(30),NC03(30),NC04(30),NC05(30),NC06(30)
      DIMENSION EC01(30),EC02(30),EC03(30),EC04(30),EC05(30),EC06(30)
      DIMENSION NG11(30),NG12(30),NG13(30),NG14(30),NG15(30),NG16(30)
      DIMENSION EG11(30),EG12(30),EG13(30),EG14(30),EG15(30),EG16(30)
      DIMENSION NG21(30),NG22(30),NG23(30),NG24(30),NG25(30),NG26(30)
      DIMENSION EG21(30),EG22(30),EG23(30),EG24(30),EG25(30),EG26(30)
      DIMENSION WK1(30),WK2(30),WK3(30),WK4(30),WK5(30),WK6(30)
      DIMENSION EFL1(30),EFL2(30),EFL3(30),EFL4(30),EFL5(30),EFL6(30)
      DIMENSION QATT1(8,4000),QATT2(8,4000),QATT3(8,4000),QATT4(8,4000),
     /QATT5(8,4000),QATT6(8,4000)
      DIMENSION QNUL1(10,4000),QNUL2(10,4000),QNUL3(10,4000),
     /QNUL4(10,4000),QNUL5(10,4000),QNUL6(10,4000),SCLN1(10),
     /SCLN2(10),SCLN3(10),SCLN4(10),SCLN5(10),SCLN6(10)
#                                                                       
#  ---------------------------------------------------------------------
#                                                                       
#     def FILLS ARRAYS OF COLLISION FREQUENCY              
#     CAN HAVE A MIXTURE OF UP TO 6 GASES                               
#                                                                       
#                                                                       
#  ---------------------------------------------------------------------
#                                                             
      NISO=0
      NIN1=0                                                            
      NIN2=0                                                            
      NIN3=0                                                            
      NIN4=0
      NIN5=0
      NIN6=0
      NION1=0
      NION2=0
      NION3=0
      NION4=0
      NION5=0
      NION6=0
      NATT1=0
      NATT2=0
      NATT3=0
      NATT4=0
      NATT5=0
      NATT6=0
      NUL1=0
      NUL2=0
      NUL3=0
      NUL4=0
      NUL5=0
      NUL6=0
      N4000=4000
      NONE=1                                                     
      DO 2 J=1,6  
      NAMEG(J)='---------------'                              
      KEL1(J)=0
      KEL2(J)=0
      KEL3(J)=0
      KEL4(J)=0
      KEL5(J)=0
      KEL6(J)=0 
      AMGAS(J)=0.0                      
      DO 1 I=1,N4000                                                    
      Q1(J,I)=0.00                                                     
      Q2(J,I)=0.00                                                     
      Q3(J,I)=0.00                                                     
      Q4(J,I)=0.00
      Q5(J,I)=0.00
      Q6(J,I)=0.00
    1 CONTINUE                                                          
      E1(J)=0.00                                                       
      E2(J)=0.00                                                       
      E3(J)=0.00                                                       
      E4(J)=0.00 
      E5(J)=0.00
    2 E6(J)=0.00
      DO 222 J=1,30
      EION1(J)=0.00
      EION2(J)=0.00
      EION3(J)=0.00
      EION4(J)=0.00
      EION5(J)=0.00
      EION6(J)=0.00
      EB1(J)=0.00
      EB2(J)=0.00
      EB3(J)=0.00
      EB4(J)=0.00
      EB5(J)=0.00
      EB6(J)=0.00
      EC01(J)=0.00
      EC02(J)=0.00
      EC03(J)=0.00
      EC04(J)=0.00
      EC05(J)=0.00
      EC06(J)=0.00
      EG11(J)=0.00
      EG12(J)=0.00
      EG13(J)=0.00
      EG14(J)=0.00
      EG15(J)=0.00
      EG16(J)=0.00
      EG21(J)=0.00
      EG22(J)=0.00
      EG23(J)=0.00
      EG24(J)=0.00
      EG25(J)=0.00
      EG26(J)=0.00
      WK1(J)=0.00
      WK2(J)=0.00
      WK3(J)=0.00
      WK4(J)=0.00
      WK5(J)=0.00
      WK6(J)=0.00
      EFL1(J)=0.00
      EFL2(J)=0.00
      EFL3(J)=0.00
      EFL4(J)=0.00
      EFL5(J)=0.00
      EFL6(J)=0.00
      NC01(J)=0
      NC02(J)=0
      NC03(J)=0
      NC04(J)=0
      NC05(J)=0
      NC06(J)=0
      NG11(J)=0
      NG12(J)=0
      NG13(J)=0
      NG14(J)=0
      NG15(J)=0
      NG16(J)=0
      NG21(J)=0
      NG22(J)=0
      NG23(J)=0
      NG24(J)=0
      NG25(J)=0
      NG26(J)=0
      DO 222 I=1,N4000
      QION1(J,I)=0.00
      QION2(J,I)=0.00
      QION3(J,I)=0.00
      QION4(J,I)=0.00
      QION5(J,I)=0.00
      QION6(J,I)=0.00
  222 CONTINUE
      DO 223 K=1,8
      DO 223 I=1,N4000
      QATT1(K,I)=0.00
      QATT2(K,I)=0.00
      QATT3(K,I)=0.00
      QATT4(K,I)=0.00
      QATT5(K,I)=0.00
      QATT6(K,I)=0.00
  223 CONTINUE
      DO 224 K=1,10
      DO 224 I=1,N4000
      QNUL1(K,I)=0.0
      QNUL2(K,I)=0.0
      QNUL3(K,I)=0.0
      QNUL4(K,I)=0.0
      QNUL5(K,I)=0.0
      QNUL6(K,I)=0.0
  224 CONTINUE
      ESTEP=EFINAL/DFLOAT(NSTEP)
      EHALF=ESTEP/2.00
      E(1)=EHALF
      DO 3 I=2,N4000
      AJ=DFLOAT(I-1)
      E(I)=EHALF+ESTEP*AJ
    3 EROOT(I)=math.sqrt(E(I))
      EROOT(1)=math.sqrt(EHALF)                   
      DO 4 I=1,250
      KIN1(I)=0
      KIN2(I)=0
      KIN3(I)=0
      KIN4(I)=0
      KIN5(I)=0
    4 KIN6(I)=0
      DO 6 I=1,290 
      DO 6 MGAS=1,6
    6 INDEX(MGAS,I)=0    
      DO 225 I=1,6
      TCFMAX(I)=0.00
      NPLAST(I)=0
      DO 225 J=1,10
      SCLENUL(I,J)=0.00
      DO 225 K=1,N4000
      TCFN(I,K)=0.00
      CFN(I,K,J)=0.00
  225 CONTINUE
#                                                                       
#   CALL GAS CROSS-SECTIONS 
      CALL GASMIX(NGASN(1),Q1,QIN1,NIN1,E1,EI1,NAME1,VIRIAL1,EB1,
     /PEQEL1,PEQIN1,PENFRA1,KEL1,KIN1,QION1,PEQION1,EION1,NION1,QATT1,
     /NATT1,QNUL1,NUL1,SCLN1,NC01,EC01,WK1,EFL1,NG11,EG11,NG21,EG21,
     /SCRP1,SCRPN1)
      IF(NGAS == 1):
 GO TO 10 
      CALL GASMIX(NGASN(2),Q2,QIN2,NIN2,E2,EI2,NAME2,VIRIAL2,EB2,
     /PEQEL2,PEQIN2,PENFRA2,KEL2,KIN2,QION2,PEQION2,EION2,NION2,QATT2,
     /NATT2,QNUL2,NUL2,SCLN2,NC02,EC02,WK2,EFL2,NG12,EG12,NG22,EG22,
     /SCRP2,SCRPN2)
      IF(NGAS == 2):
 GO TO 10 
      CALL GASMIX(NGASN(3),Q3,QIN3,NIN3,E3,EI3,NAME3,VIRIAL3,EB3,
     /PEQEL3,PEQIN3,PENFRA3,KEL3,KIN3,QION3,PEQION3,EION3,NION3,QATT3,
     /NATT3,QNUL3,NUL3,SCLN3,NC03,EC03,WK3,EFL3,NG13,EG13,NG23,EG23,
     /SCRP3,SCRPN3)
      IF(NGAS == 3):
 GO TO 10 
      CALL GASMIX(NGASN(4),Q4,QIN4,NIN4,E4,EI4,NAME4,VIRIAL4,EB4,
     /PEQEL4,PEQIN4,PENFRA4,KEL4,KIN4,QION4,PEQION4,EION4,NION4,QATT4,
     /NATT4,QNUL4,NUL4,SCLN4,NC04,EC04,WK4,EFL4,NG14,EG14,NG24,EG24,
     /SCRP4,SCRPN4)
      IF(NGAS == 4):
 GO TO 10 
      CALL GASMIX(NGASN(5),Q5,QIN5,NIN5,E5,EI5,NAME5,VIRIAL5,EB5,
     /PEQEL5,PEQIN5,PENFRA5,KEL5,KIN5,QION5,PEQION5,EION5,NION5,QATT5,
     /NATT5,QNUL5,NUL5,SCLN5,NC05,EC05,WK5,EFL5,NG15,EG15,NG25,EG25,
     /SCRP5,SCRPN5)
      IF(NGAS == 5):
 GO TO 10 
      CALL GASMIX(NGASN(6),Q6,QIN6,NIN6,E6,EI6,NAME6,VIRIAL6,EB6,
     /PEQEL6,PEQIN6,PENFRA6,KEL6,KIN6,QION6,PEQION6,EION6,NION6,QATT6,
     /NATT6,QNUL6,NUL6,SCLN6,NC06,EC06,WK6,EFL6,NG16,EG16,NG26,EG26,
     /SCRP6,SCRPN6)
   10 CONTINUE                                                          
# ---------------------------------------------------------------       
#  CORRECTION OF NUMBER DENSITY DUE TO VIRIAL COEFFICIENT               
#  CAN BE defMED HERE NOT YET IMPLEMENTED.                          
#-----------------------------------------------------------------
#-----------------------------------------------------------------      
#     CALCULATION OF COLLISION FREQUENCIES FOR AN ARRAY OF              
#     ELECTRON ENERGIES IN THE RANGE ZERO TO EFINAL                     
#                                                                       
#     L=1      ELASTIC NTH GAS                                      
#     L=2      IONISATION NTH GAS                                     
#     L=3      ATTACHMENT NTH GAS                                     
#     L=4      INELASTIC NTH GAS    
#     L=5      SUPERELASTIC NTH GAS                                   
#---------------------------------------------------------------   
      DO 700 IE=1,N4000 
      DO 700 KGAS=1,NGAS 
      FCION(IE)=0.00
      FCATT(IE)=0.00
# ELASTIC
      NP=1
      IF(KGAS == 1):
 :                                              
       CF(KGAS,IE,NP)=Q1(2,IE)*VAN1
      elif(KGAS == 2) :
       CF(KGAS,IE,NP)=Q2(2,IE)*VAN2
      elif(KGAS == 3) :
       CF(KGAS,IE,NP)=Q3(2,IE)*VAN3
      elif(KGAS == 4) : 
       CF(KGAS,IE,NP)=Q4(2,IE)*VAN4
      elif(KGAS == 5) :
       CF(KGAS,IE,NP)=Q5(2,IE)*VAN5
      else:
       CF(KGAS,IE,NP)=Q6(2,IE)*VAN6
      # endIF
      PSCT(KGAS,IE,NP)=0.50
      ANGCT(KGAS,IE,NP)=1.00
      INDEX(KGAS,NP)=0
#     
      IF(KGAS == 1):
 :
       IF(KEL1(2):
 == 1) :
        PSCT1=PEQEL1(2,IE)
        CALL ANGCUT(PSCT1,ANGC,PSCT2)
        ANGCT(KGAS,IE,NP)=ANGC
        PSCT(KGAS,IE,NP)=PSCT2  
        INDEX(KGAS,NP)=1   
       # endIF
       IF(KEL1(2):
 == 2) :
        PSCT(KGAS,IE,NP)=PEQEL1(2,IE)
        INDEX(KGAS,NP)=2
       # endIF
      elif(KGAS == 2) :
       IF(KEL2(2):
 == 1) :
        PSCT1=PEQEL2(2,IE)
        CALL ANGCUT(PSCT1,ANGC,PSCT2)
        ANGCT(KGAS,IE,NP)=ANGC
        PSCT(KGAS,IE,NP)=PSCT2  
        INDEX(KGAS,NP)=1   
       # endIF
       IF(KEL2(2):
 == 2) :
        PSCT(KGAS,IE,NP)=PEQEL2(2,IE)
        INDEX(KGAS,NP)=2
       # endIF
      elif(KGAS == 3) :
       IF(KEL3(2):
 == 1) :
        PSCT1=PEQEL3(2,IE)
        CALL ANGCUT(PSCT1,ANGC,PSCT2)
        ANGCT(KGAS,IE,NP)=ANGC
        PSCT(KGAS,IE,NP)=PSCT2  
        INDEX(KGAS,NP)=1   
       # endIF
       IF(KEL3(2):
 == 2) :
        PSCT(KGAS,IE,NP)=PEQEL3(2,IE)
        INDEX(KGAS,NP)=2
       # endIF
      elif(KGAS == 4) :
       IF(KEL4(2):
 == 1) :
        PSCT1=PEQEL4(2,IE)
        CALL ANGCUT(PSCT1,ANGC,PSCT2)
        ANGCT(KGAS,IE,NP)=ANGC
        PSCT(KGAS,IE,NP)=PSCT2  
        INDEX(KGAS,NP)=1   
       # endIF
       IF(KEL4(2):
 == 2) :
        PSCT(KGAS,IE,NP)=PEQEL4(2,IE)
        INDEX(KGAS,NP)=2
       # endIF
      elif(KGAS == 5) :
       IF(KEL5(2):
 == 1) :
        PSCT1=PEQEL5(2,IE)
        CALL ANGCUT(PSCT1,ANGC,PSCT2)
        ANGCT(KGAS,IE,NP)=ANGC
        PSCT(KGAS,IE,NP)=PSCT2  
        INDEX(KGAS,NP)=1   
       # endIF
       IF(KEL5(2):
 == 2) :
        PSCT(KGAS,IE,NP)=PEQEL5(2,IE)
        INDEX(KGAS,NP)=2
       # endIF
      else: 
       IF(KEL6(2):
 == 1) :
        PSCT1=PEQEL6(2,IE)
        CALL ANGCUT(PSCT1,ANGC,PSCT2)
        ANGCT(KGAS,IE,NP)=ANGC
        PSCT(KGAS,IE,NP)=PSCT2  
        INDEX(KGAS,NP)=1   
       # endIF
       IF(KEL6(2):
 == 2) :
        PSCT(KGAS,IE,NP)=PEQEL6(2,IE)
        INDEX(KGAS,NP)=2
       # endIF
      # endIF                   
# 
      IF(IE > 1):
 GO TO 12  
      IF(KGAS == 1):
 :                                 
       RGAS1=1.00+E1(2)/2.00 
       AMGAS(KGAS)=2.00*EMASS/E1(2)
       RGAS(KGAS,NP)=RGAS1                                           
       DSCRPT(KGAS,NP)=SCRP1(2)  
       NAMEG(KGAS)=NAME1  
      elif(KGAS == 2) :
       RGAS2=1.00+E2(2)/2.00 
       AMGAS(KGAS)=2.00*EMASS/E2(2) 
       RGAS(KGAS,NP)=RGAS2                                           
       DSCRPT(KGAS,NP)=SCRP2(2)  
       NAMEG(KGAS)=NAME2  
      elif(KGAS == 3) :
       RGAS3=1.00+E3(2)/2.00 
       AMGAS(KGAS)=2.00*EMASS/E3(2) 
       RGAS(KGAS,NP)=RGAS3                                           
       DSCRPT(KGAS,NP)=SCRP3(2)  
       NAMEG(KGAS)=NAME3  
      elif(KGAS == 4) :
       RGAS4=1.00+E4(2)/2.00 
       AMGAS(KGAS)=2.00*EMASS/E4(2) 
       RGAS(KGAS,NP)=RGAS4                                           
       DSCRPT(KGAS,NP)=SCRP4(2)  
       NAMEG(KGAS)=NAME4  
      elif(KGAS == 5) :
       RGAS5=1.00+E5(2)/2.00 
       AMGAS(KGAS)=2.00*EMASS/E5(2) 
       RGAS(KGAS,NP)=RGAS5                                           
       DSCRPT(KGAS,NP)=SCRP5(2)  
       NAMEG(KGAS)=NAME5  
      else: 
       RGAS6=1.00+E6(2)/2.00 
       AMGAS(KGAS)=2.00*EMASS/E6(2) 
       RGAS(KGAS,NP)=RGAS6                                           
       DSCRPT(KGAS,NP)=SCRP6(2)  
       NAMEG(KGAS)=NAME6  
      # endIF    
      L=1
      IARRY(KGAS,NP)=L
      EIN(KGAS,NP)=0.00
      IPN(KGAS,NP)=0    
      PENFRA[KGAS,1,NP]=0.0
      PENFRA[KGAS,2,NP]=0.0
      PENFRA[KGAS,3,NP]=0.0      
#  IONISATION
   12 IF(KGAS == 1) :     
       IF(EFINAL < E1(3):
) GO TO 50 
       IF(NION1 > 1):
 GO TO 14                                   
       NP=NP+1   
       CF(KGAS,IE,NP)=Q1(3,IE)*VAN1
       FCION(IE)=FCION(IE)+CF(KGAS,IE,NP) 
       PSCT(KGAS,IE,NP)=0.50
       ANGCT(KGAS,IE,NP)=1.00
       INDEX(KGAS,NP)=0
       IF(KEL1(3):
 == 1) :
        PSCT1=PEQEL1(3,IE) 
        CALL ANGCUT(PSCT1,ANGC,PSCT2)
        ANGCT(KGAS,IE,NP)=ANGC
        PSCT(KGAS,IE,NP)=PSCT2
        INDEX(KGAS,NP)=1
       # endIF
       IF(KEL1(3):
 == 2) :
        PSCT(KGAS,IE,NP)=PEQEL1(3,IE)
        INDEX(KGAS,NP)=2
       # endIF
       GO TO 16
   14  DO 15 KION=1,NION1
       NP=NP+1
       CF(KGAS,IE,NP)=QION1(KION,IE)*VAN1
       FCION(IE)=FCION(IE)+CF(KGAS,IE,NP)
       PSCT(KGAS,IE,NP)=0.50
       ANGCT(KGAS,IE,NP)=1.00
       INDEX(KGAS,NP)=0
       IF(KEL1(3):
 == 1) :
        PSCT1=PEQION1(KION,IE)
        CALL ANGCUT(PSCT1,ANGC,PSCT2)
        ANGCT(KGAS,IE,NP)=ANGC
        PSCT(KGAS,IE,NP)=PSCT2
        INDEX(KGAS,NP)=1
       # endIF
       IF(KEL1(3):
 == 2) :
        PSCT(KGAS,IE,NP)=PEQION1(KION,IE)
        INDEX(KGAS,NP)=2
       # endIF
   15 CONTINUE
   16 CONTINUE   
      elif(KGAS == 2) :
       IF(EFINAL < E2(3):
) GO TO 50     
       IF(NION2 > 1):
 GO TO 17                                
       NP=NP+1   
       CF(KGAS,IE,NP)=Q2(3,IE)*VAN2
       FCION(IE)=FCION(IE)+CF(KGAS,IE,NP) 
       PSCT(KGAS,IE,NP)=0.50
       ANGCT(KGAS,IE,NP)=1.00
       INDEX(KGAS,NP)=0
       IF(KEL2(3):
 == 1) :
        PSCT1=PEQEL2(3,IE) 
        CALL ANGCUT(PSCT1,ANGC,PSCT2)
        ANGCT(KGAS,IE,NP)=ANGC
        PSCT(KGAS,IE,NP)=PSCT2
        INDEX(KGAS,NP)=1
       # endIF
       IF(KEL2(3):
 == 2) :
        PSCT(KGAS,IE,NP)=PEQEL2(3,IE)
        INDEX(KGAS,NP)=2
       # endIF
       GO TO 19
   17  DO 18 KION=1,NION2
       NP=NP+1
       CF(KGAS,IE,NP)=QION2(KION,IE)*VAN2
       FCION(IE)=FCION(IE)+CF(KGAS,IE,NP)
       PSCT(KGAS,IE,NP)=0.50
       ANGCT(KGAS,IE,NP)=1.00
       INDEX(KGAS,NP)=0
       IF(KEL1(3):
 == 1) :
        PSCT1=PEQION2(KION,IE)
        CALL ANGCUT(PSCT1,ANGC,PSCT2)
        ANGCT(KGAS,IE,NP)=ANGC
        PSCT(KGAS,IE,NP)=PSCT2
        INDEX(KGAS,NP)=1
       # endIF
       IF(KEL1(3):
 == 2) :
        PSCT(KGAS,IE,NP)=PEQION2(KION,IE)
        INDEX(KGAS,NP)=2
       # endIF
   18  CONTINUE
   19  CONTINUE
      elif(KGAS == 3) :
       IF(EFINAL < E3(3):
) GO TO 50  
       IF(NION3 > 1):
 GO TO 20                                  
       NP=NP+1   
       CF(KGAS,IE,NP)=Q3(3,IE)*VAN3
       FCION(IE)=FCION(IE)+CF(KGAS,IE,NP) 
       PSCT(KGAS,IE,NP)=0.50
       ANGCT(KGAS,IE,NP)=1.00
       INDEX(KGAS,NP)=0
       IF(KEL3(3):
 == 1) :
        PSCT1=PEQEL3(3,IE) 
        CALL ANGCUT(PSCT1,ANGC,PSCT2)
        ANGCT(KGAS,IE,NP)=ANGC
        PSCT(KGAS,IE,NP)=PSCT2
        INDEX(KGAS,NP)=1
       # endIF
       IF(KEL3(3):
 == 2) :
        PSCT(KGAS,IE,NP)=PEQEL3(3,IE)
        INDEX(KGAS,NP)=2
       # endIF
       GO TO 22
   20  DO 21 KION=1,NION3
       NP=NP+1
       CF(KGAS,IE,NP)=QION3(KION,IE)*VAN3
       FCION(IE)=FCION(IE)+CF(KGAS,IE,NP)
       PSCT(KGAS,IE,NP)=0.50
       ANGCT(KGAS,IE,NP)=1.00
       INDEX(KGAS,NP)=0
       IF(KEL1(3):
 == 1) :
        PSCT1=PEQION3(KION,IE)
        CALL ANGCUT(PSCT1,ANGC,PSCT2)
        ANGCT(KGAS,IE,NP)=ANGC
        PSCT(KGAS,IE,NP)=PSCT2
        INDEX(KGAS,NP)=1
       # endIF
       IF(KEL1(3):
 == 2) :
        PSCT(KGAS,IE,NP)=PEQION3(KION,IE)
        INDEX(KGAS,NP)=2
       # endIF
   21  CONTINUE
   22  CONTINUE
      elif(KGAS == 4) :
       IF(EFINAL < E4(3):
) GO TO 50   
       IF(NION4 > 1):
 GO TO 23                                 
       NP=NP+1   
       CF(KGAS,IE,NP)=Q4(3,IE)*VAN4
       FCION(IE)=FCION(IE)+CF(KGAS,IE,NP) 
       PSCT(KGAS,IE,NP)=0.50
       ANGCT(KGAS,IE,NP)=1.00
       INDEX(KGAS,NP)=0
       IF(KEL4(3):
 == 1) :
        PSCT1=PEQEL4(3,IE) 
        CALL ANGCUT(PSCT1,ANGC,PSCT2)
        ANGCT(KGAS,IE,NP)=ANGC
        PSCT(KGAS,IE,NP)=PSCT2
        INDEX(KGAS,NP)=1
       # endIF
       IF(KEL4(3):
 == 2) :
        PSCT(KGAS,IE,NP)=PEQEL4(3,IE)
        INDEX(KGAS,NP)=2
       # endIF
       GO TO 25
   23  DO 24 KION=1,NION4
       NP=NP+1
       CF(KGAS,IE,NP)=QION4(KION,IE)*VAN4
       FCION(IE)=FCION(IE)+CF(KGAS,IE,NP)
       PSCT(KGAS,IE,NP)=0.50
       ANGCT(KGAS,IE,NP)=1.00
       INDEX(KGAS,NP)=0
       IF(KEL1(3):
 == 1) :
        PSCT1=PEQION4(KION,IE)
        CALL ANGCUT(PSCT1,ANGC,PSCT2)
        ANGCT(KGAS,IE,NP)=ANGC
        PSCT(KGAS,IE,NP)=PSCT2
        INDEX(KGAS,NP)=1
       # endIF
       IF(KEL1(3):
 == 2) :
        PSCT(KGAS,IE,NP)=PEQION4(KION,IE)
        INDEX(KGAS,NP)=2
       # endIF
  24   CONTINUE
  25   CONTINUE
      elif(KGAS == 5) :
       IF(EFINAL < E5(3):
) GO TO 50 
       IF(NION5 > 1):
 GO TO 26                                   
       NP=NP+1   
       CF(KGAS,IE,NP)=Q5(3,IE)*VAN5
       FCION(IE)=FCION(IE)+CF(KGAS,IE,NP) 
       PSCT(KGAS,IE,NP)=0.50
       ANGCT(KGAS,IE,NP)=1.00
       INDEX(KGAS,NP)=0
       IF(KEL5(3):
 == 1) :
        PSCT1=PEQEL5(3,IE) 
        CALL ANGCUT(PSCT1,ANGC,PSCT2)
        ANGCT(KGAS,IE,NP)=ANGC
        PSCT(KGAS,IE,NP)=PSCT2
        INDEX(KGAS,NP)=1
       # endIF
       IF(KEL5(3):
 == 2) :
        PSCT(KGAS,IE,NP)=PEQEL5(3,IE)
        INDEX(KGAS,NP)=2
       # endIF
       GO TO 28
   26  DO 27 KION=1,NION5
       NP=NP+1
       CF(KGAS,IE,NP)=QION5(KION,IE)*VAN5
       FCION(IE)=FCION(IE)+CF(KGAS,IE,NP)
       PSCT(KGAS,IE,NP)=0.50
       ANGCT(KGAS,IE,NP)=1.00
       INDEX(KGAS,NP)=0
       IF(KEL1(3):
 == 1) :
        PSCT1=PEQION5(KION,IE)
        CALL ANGCUT(PSCT1,ANGC,PSCT2)
        ANGCT(KGAS,IE,NP)=ANGC
        PSCT(KGAS,IE,NP)=PSCT2
        INDEX(KGAS,NP)=1
       # endIF
       IF(KEL1(3):
 == 2) :
        PSCT(KGAS,IE,NP)=PEQION5(KION,IE)
        INDEX(KGAS,NP)=2
       # endIF
   27  CONTINUE
   28  CONTINUE
      else: 
       IF(EFINAL < E6(3):
) GO TO 50  
       IF(NION6 > 1):
 GO TO 29                                  
       NP=NP+1   
       CF(KGAS,IE,NP)=Q6(3,IE)*VAN6
       FCION(IE)=FCION(IE)+CF(KGAS,IE,NP) 
       PSCT(KGAS,IE,NP)=0.50
       ANGCT(KGAS,IE,NP)=1.00
       INDEX(KGAS,NP)=0
       IF(KEL6(3):
 == 1) :
        PSCT1=PEQEL6(3,IE) 
        CALL ANGCUT(PSCT1,ANGC,PSCT2)
        ANGCT(KGAS,IE,NP)=ANGC
        PSCT(KGAS,IE,NP)=PSCT2
        INDEX(KGAS,NP)=1
       # endIF
       IF(KEL6(3):
 == 2) :
        PSCT(KGAS,IE,NP)=PEQEL6(3,IE)
        INDEX(KGAS,NP)=2
       # endIF
   29  DO 31 KION=1,NION6
       NP=NP+1
       CF(KGAS,IE,NP)=QION6(KION,IE)*VAN6
       FCION(IE)=FCION(IE)+CF(KGAS,IE,NP)
       PSCT(KGAS,IE,NP)=0.50
       ANGCT(KGAS,IE,NP)=1.00
       INDEX(KGAS,NP)=0
       IF(KEL1(3):
 == 1) :
        PSCT1=PEQION6(KION,IE)
        CALL ANGCUT(PSCT1,ANGC,PSCT2)
        ANGCT(KGAS,IE,NP)=ANGC
        PSCT(KGAS,IE,NP)=PSCT2
        INDEX(KGAS,NP)=1
       # endIF
       IF(KEL1(3):
 == 2) :
        PSCT(KGAS,IE,NP)=PEQION6(KION,IE)
        INDEX(KGAS,NP)=2
       # endIF
   31  CONTINUE
      # endIF
#
      IF(IE > 1):
 GO TO 50
      IF(KGAS == 1):
 : 
       IF(NION1 > 1):
 GO TO 32                                    
       RGAS(KGAS,NP)=RGAS1                                              
       EIN(KGAS,NP)=E1(3)/RGAS1
       WPL(KGAS,NP)=EB1(1)
       NC0(KGAS,NP)=NC01(1)
       EC0(KGAS,NP)=EC01(1)
       NG1(KGAS,NP)=NG11(1)
       EG1(KGAS,NP)=EG11(1)
       NG2(KGAS,NP)=NG21(1)
       EG2(KGAS,NP)=EG21(1)
       WKLM(KGAS,NP)=WK1(1)
       EFL(KGAS,NP)=EFL1(1)
       DSCRPT(KGAS,NP)=SCRP1(3)
       IPN(KGAS,NP)=1
       L=2
       IARRY(KGAS,NP)=L
       PENFRA[KGAS,1,NP]=0.0
       PENFRA[KGAS,2,NP]=0.0
       PENFRA[KGAS,3,NP]=0.0
       GO TO 34
   32  NP=NP-NION1
       DO 33 KION=1,NION1
       NP=NP+1
       RGAS(KGAS,NP)=RGAS1
       EIN(KGAS,NP)=EION1(KION)/RGAS1
       WPL(KGAS,NP)=EB1(KION)
       NC0(KGAS,NP)=NC01(KION)
       EC0(KGAS,NP)=EC01(KION)
       NG1(KGAS,NP)=NG11(KION)
       EG1(KGAS,NP)=EG11(KION)
       NG2(KGAS,NP)=NG21(KION)
       EG2(KGAS,NP)=EG21(KION)
       WKLM(KGAS,NP)=WK1(KION)
       EFL(KGAS,NP)=EFL1(KION)
       DSCRPT(KGAS,NP)=SCRP1(2+KION)
       IPN(KGAS,NP)=1
       L=2
       IARRY(KGAS,NP)=L
       PENFRA[KGAS,1,NP]=0.0
       PENFRA[KGAS,2,NP]=0.0
       PENFRA[KGAS,3,NP]=0.0
   33  CONTINUE
   34  CONTINUE
      elif(KGAS == 2) :
       IF(NION2 > 1):
 GO TO 35
       RGAS(KGAS,NP)=RGAS2                                              
       EIN(KGAS,NP)=E2(3)/RGAS2
       WPL(KGAS,NP)=EB2(1)
       NC0(KGAS,NP)=NC02(1)
       EC0(KGAS,NP)=EC02(1)
       NG1(KGAS,NP)=NG12(1)
       EG1(KGAS,NP)=EG12(1)
       NG2(KGAS,NP)=NG22(1)
       EG2(KGAS,NP)=EG22(1)
       WKLM(KGAS,NP)=WK2(1)
       EFL(KGAS,NP)=EFL2(1)
       DSCRPT(KGAS,NP)=SCRP2(3)
       IPN(KGAS,NP)=1
       L=2
       IARRY(KGAS,NP)=L
       PENFRA[KGAS,1,NP]=0.0
       PENFRA[KGAS,2,NP]=0.0
       PENFRA[KGAS,3,NP]=0.0
       GO TO 37
   35  NP=NP-NION2
       DO 36 KION=1,NION2
       NP=NP+1
       RGAS(KGAS,NP)=RGAS2
       EIN(KGAS,NP)=EION2(KION)/RGAS2
       WPL(KGAS,NP)=EB2(KION)
       NC0(KGAS,NP)=NC02(KION)
       EC0(KGAS,NP)=EC02(KION)
       NG1(KGAS,NP)=NG12(KION)
       EG1(KGAS,NP)=EG12(KION)
       NG2(KGAS,NP)=NG22(KION)
       EG2(KGAS,NP)=EG22(KION)
       WKLM(KGAS,NP)=WK2(KION)
       EFL(KGAS,NP)=EFL2(KION)
       DSCRPT(KGAS,NP)=SCRP2(2+KION)
       IPN(KGAS,NP)=1
       L=2
       IARRY(KGAS,NP)=L
       PENFRA[KGAS,1,NP]=0.0
       PENFRA[KGAS,2,NP]=0.0
       PENFRA[KGAS,3,NP]=0.0
   36  CONTINUE
   37  CONTINUE
      elif(KGAS == 3) :
       IF(NION3 > 1):
 GO TO 38
       RGAS(KGAS,NP)=RGAS3                                              
       EIN(KGAS,NP)=E3(3)/RGAS3
       WPL(KGAS,NP)=EB3(1)
       NC0(KGAS,NP)=NC03(1)
       EC0(KGAS,NP)=EC03(1)
       NG1(KGAS,NP)=NG13(1)
       EG1(KGAS,NP)=EG13(1)
       NG2(KGAS,NP)=NG23(1)
       EG2(KGAS,NP)=EG23(1)
       WKLM(KGAS,NP)=WK3(1)
       EFL(KGAS,NP)=EFL3(1)
       DSCRPT(KGAS,NP)=SCRP3(3)
       IPN(KGAS,NP)=1
       L=2
       IARRY(KGAS,NP)=L
       PENFRA[KGAS,1,NP]=0.0
       PENFRA[KGAS,2,NP]=0.0
       PENFRA[KGAS,3,NP]=0.0
       GO TO 40
   38  NP=NP-NION3
       DO 39 KION=1,NION3
       NP=NP+1
       RGAS(KGAS,NP)=RGAS3
       EIN(KGAS,NP)=EION3(KION)/RGAS3
       WPL(KGAS,NP)=EB3(KION)
       NC0(KGAS,NP)=NC03(KION)
       EC0(KGAS,NP)=EC03(KION)
       NG1(KGAS,NP)=NG13(KION)
       EG1(KGAS,NP)=EG13(KION)
       NG2(KGAS,NP)=NG23(KION)
       EG2(KGAS,NP)=EG23(KION)
       WKLM(KGAS,NP)=WK3(KION)
       EFL(KGAS,NP)=EFL3(KION)
       DSCRPT(KGAS,NP)=SCRP3(2+KION)
       IPN(KGAS,NP)=1
       L=2
       IARRY(KGAS,NP)=L
       PENFRA[KGAS,1,NP]=0.0
       PENFRA[KGAS,2,NP]=0.0
       PENFRA[KGAS,3,NP]=0.0
   39  CONTINUE
   40  CONTINUE
      elif(KGAS == 4) :
       IF(NION4 > 1):
 GO TO 41
       RGAS(KGAS,NP)=RGAS4                                              
       EIN(KGAS,NP)=E4(3)/RGAS4
       WPL(KGAS,NP)=EB4(1)
       NC0(KGAS,NP)=NC04(1)
       EC0(KGAS,NP)=EC04(1)
       NG1(KGAS,NP)=NG14(1)
       EG1(KGAS,NP)=EG14(1)
       NG2(KGAS,NP)=NG24(1)
       EG2(KGAS,NP)=EG24(1)
       WKLM(KGAS,NP)=WK4(1)
       EFL(KGAS,NP)=EFL4(1)
       DSCRPT(KGAS,NP)=SCRP4(3)
       IPN(KGAS,NP)=1
       L=2
       IARRY(KGAS,NP)=L
       PENFRA[KGAS,1,NP]=0.0
       PENFRA[KGAS,2,NP]=0.0
       PENFRA[KGAS,3,NP]=0.0
       GO TO 43
   41  NP=NP-NION4
       DO 42 KION=1,NION4
       NP=NP+1
       RGAS(KGAS,NP)=RGAS4
       EIN(KGAS,NP)=EION4(KION)/RGAS4
       WPL(KGAS,NP)=EB4(KION)
       NC0(KGAS,NP)=NC04(KION)
       EC0(KGAS,NP)=EC04(KION)
       NG1(KGAS,NP)=NG14(KION)
       EG1(KGAS,NP)=EG14(KION)
       NG2(KGAS,NP)=NG24(KION)
       EG2(KGAS,NP)=EG24(KION)
       WKLM(KGAS,NP)=WK4(KION)
       EFL(KGAS,NP)=EFL4(KION)
       DSCRPT(KGAS,NP)=SCRP4(2+KION)
       IPN(KGAS,NP)=1
       L=2
       IARRY(KGAS,NP)=L
       PENFRA[KGAS,1,NP]=0.0
       PENFRA[KGAS,2,NP]=0.0
       PENFRA[KGAS,3,NP]=0.0
   42  CONTINUE
   43  CONTINUE
      elif(KGAS == 5) :
       IF(NION5 > 1):
 GO TO 44
       RGAS(KGAS,NP)=RGAS5                                              
       EIN(KGAS,NP)=E5(3)/RGAS5
       WPL(KGAS,NP)=EB5(1)
       NC0(KGAS,NP)=NC05(1)
       EC0(KGAS,NP)=EC05(1)
       NG1(KGAS,NP)=NG15(1)
       EG1(KGAS,NP)=EG15(1)
       NG2(KGAS,NP)=NG25(1)
       EG2(KGAS,NP)=EG25(1)
       WKLM(KGAS,NP)=WK5(1)
       EFL(KGAS,NP)=EFL5(1)
       DSCRPT(KGAS,NP)=SCRP5(3)
       IPN(KGAS,NP)=1
       L=2
       IARRY(KGAS,NP)=L
       PENFRA[KGAS,1,NP]=0.0
       PENFRA[KGAS,2,NP]=0.0
       PENFRA[KGAS,3,NP]=0.0
       GO TO 46
   44  NP=NP-NION5
       DO 45 KION=1,NION5
       NP=NP+1
       RGAS(KGAS,NP)=RGAS5
       EIN(KGAS,NP)=EION5(KION)/RGAS5
       WPL(KGAS,NP)=EB5(KION)
       NC0(KGAS,NP)=NC05(KION)
       EC0(KGAS,NP)=EC05(KION)
       NG1(KGAS,NP)=NG15(KION)
       EG1(KGAS,NP)=EG15(KION)
       NG2(KGAS,NP)=NG25(KION)
       EG2(KGAS,NP)=EG25(KION)
       WKLM(KGAS,NP)=WK5(KION)
       EFL(KGAS,NP)=EFL5(KION)
       DSCRPT(KGAS,NP)=SCRP5(2+KION)
       IPN(KGAS,NP)=1
       L=2
       IARRY(KGAS,NP)=L
       PENFRA[KGAS,1,NP]=0.0
       PENFRA[KGAS,2,NP]=0.0
       PENFRA[KGAS,3,NP]=0.0
   45  CONTINUE
   46  CONTINUE
      else: 
       IF(NION6 > 1):
 GO TO 47
       RGAS(KGAS,NP)=RGAS6                                              
       EIN(KGAS,NP)=E6(3)/RGAS6
       WPL(KGAS,NP)=EB6(1)
       NC0(KGAS,NP)=NC06(1)
       EC0(KGAS,NP)=EC06(1)
       NG1(KGAS,NP)=NG16(1)
       EG1(KGAS,NP)=EG16(1)
       NG2(KGAS,NP)=NG26(1)
       EG2(KGAS,NP)=EG26(1)
       WKLM(KGAS,NP)=WK6(1)
       EFL(KGAS,NP)=EFL6(1)
       DSCRPT(KGAS,NP)=SCRP6(3)
       IPN(KGAS,NP)=1
       L=2
       IARRY(KGAS,NP)=L
       PENFRA[KGAS,1,NP]=0.0
       PENFRA[KGAS,2,NP]=0.0
       PENFRA[KGAS,3,NP]=0.0
       GO TO 49
   47  NP=NP-NION6
       DO 48 KION=1,NION6
       NP=NP+1
       RGAS(KGAS,NP)=RGAS6
       EIN(KGAS,NP)=EION6(KION)/RGAS6
       WPL(KGAS,NP)=EB6(KION)
       NC0(KGAS,NP)=NC06(KION)
       EC0(KGAS,NP)=EC06(KION)
       NG1(KGAS,NP)=NG16(KION)
       EG1(KGAS,NP)=EG16(KION)
       NG2(KGAS,NP)=NG26(KION)
       EG2(KGAS,NP)=EG26(KION)
       WKLM(KGAS,NP)=WK6(KION)
       EFL(KGAS,NP)=EFL6(KION)
       DSCRPT(KGAS,NP)=SCRP6(2+KION)
       IPN(KGAS,NP)=1
       L=2
       IARRY(KGAS,NP)=L
       PENFRA[KGAS,1,NP]=0.0
       PENFRA[KGAS,2,NP]=0.0
       PENFRA[KGAS,3,NP]=0.0
   48  CONTINUE
   49  CONTINUE
      # endIF                                             
# ATTACHMENT
   50 IF(KGAS == 1) :
       IF(EFINAL < E1(4):
) GO TO 51 
       IF(NATT1 > 1):
 GO TO 551                                  
       NP=NP+1                                                         
       CF(KGAS,IE,NP)=Q1(4,IE)*VAN1
       FCATT(IE)=FCATT(IE)+CF(KGAS,IE,NP)
       PSCT(KGAS,IE,NP)=0.50
       ANGCT(KGAS,IE,NP)=1.00
       IF(IE > 1):
 GO TO 5521
       DSCRPT(KGAS,NP)=SCRP1(3+NION1)
       RGAS(KGAS,NP)=RGAS1
       EIN(KGAS,NP)=0.00
       INDEX(KGAS,NP)=0
       IPN(KGAS,NP)=-1
       L=3
       IARRY(KGAS,NP)=L
       PENFRA[KGAS,1,NP]=0.0
       PENFRA[KGAS,2,NP]=0.0
       PENFRA[KGAS,3,NP]=0.0
       GO TO 5521
  551  DO 552 JJ=1,NATT1
       NP=NP+1
       CF(KGAS,IE,NP)=QATT1(JJ,IE)*VAN1
       FCATT(IE)=FCATT(IE)+CF(KGAS,IE,NP)
       PSCT(KGAS,IE,NP)=0.50
       ANGCT(KGAS,IE,NP)=1.00
       IF(IE > 1):
 GO TO 552
       DSCRPT(KGAS,NP)=SCRP1(2+NION1+JJ)
       RGAS(KGAS,NP)=RGAS1
       EIN(KGAS,NP)=0.00
       INDEX(KGAS,NP)=0
       IPN(KGAS,NP)=-1
       L=3
       IARRY(KGAS,NP)=L
       PENFRA[KGAS,1,NP]=0.0
       PENFRA[KGAS,2,NP]=0.0
       PENFRA[KGAS,3,NP]=0.0
  552  CONTINUE
 5521  CONTINUE
      elif(KGAS == 2) :
       IF(EFINAL < E2(4):
) GO TO 51 
       IF(NATT2 > 1):
 GO TO 553                                  
       NP=NP+1                                                       
       CF(KGAS,IE,NP)=Q2(4,IE)*VAN2
       FCATT(IE)=FCATT(IE)+CF(KGAS,IE,NP) 
       PSCT(KGAS,IE,NP)=0.50
       ANGCT(KGAS,IE,NP)=1.00
       IF(IE > 1):
 GO TO 5541
       DSCRPT(KGAS,NP)=SCRP2(3+NION2)
       RGAS(KGAS,NP)=RGAS2
       EIN(KGAS,NP)=0.00
       INDEX(KGAS,NP)=0
       IPN(KGAS,NP)=-1
       L=3
       IARRY(KGAS,NP)=L
       PENFRA[KGAS,1,NP]=0.0
       PENFRA[KGAS,2,NP]=0.0
       PENFRA[KGAS,3,NP]=0.0
       GO TO 5541
  553  DO 554 JJ=1,NATT2
       NP=NP+1
       CF(KGAS,IE,NP)=QATT2(JJ,IE)*VAN2
       FCATT(IE)=FCATT(IE)+CF(KGAS,IE,NP)
       PSCT(KGAS,IE,NP)=0.50
       ANGCT(KGAS,IE,NP)=1.00
       IF(IE > 1):
 GO TO 554
       DSCRPT(KGAS,NP)=SCRP2(2+NION2+JJ)
       RGAS(KGAS,NP)=RGAS2
       EIN(KGAS,NP)=0.00
       INDEX(KGAS,NP)=0
       IPN(KGAS,NP)=-1
       L=3
       IARRY(KGAS,NP)=L
       PENFRA[KGAS,1,NP]=0.0
       PENFRA[KGAS,2,NP]=0.0
       PENFRA[KGAS,3,NP]=0.0
  554  CONTINUE
 5541  CONTINUE
      elif(KGAS == 3) :
       IF(EFINAL < E3(4):
) GO TO 51      
       IF(NATT3 > 1):
 GO TO 555                             
       NP=NP+1                                                         
       CF(KGAS,IE,NP)=Q3(4,IE)*VAN3
       FCATT(IE)=FCATT(IE)+CF(KGAS,IE,NP) 
       PSCT(KGAS,IE,NP)=0.50
       ANGCT(KGAS,IE,NP)=1.00
       IF(IE > 1):
 GO TO 5561
       DSCRPT(KGAS,NP)=SCRP3(3+NION3)
       RGAS(KGAS,NP)=RGAS3
       EIN(KGAS,NP)=0.00
       INDEX(KGAS,NP)=0
       IPN(KGAS,NP)=-1
       L=3
       IARRY(KGAS,NP)=L
       PENFRA[KGAS,1,NP]=0.0
       PENFRA[KGAS,2,NP]=0.0
       PENFRA[KGAS,3,NP]=0.0
       GO TO 5561
  555  DO 556 JJ=1,NATT3
       NP=NP+1                                                         
       CF(KGAS,IE,NP)=QATT3(JJ,IE)*VAN3
       FCATT(IE)=FCATT(IE)+CF(KGAS,IE,NP) 
       PSCT(KGAS,IE,NP)=0.50
       ANGCT(KGAS,IE,NP)=1.00
       IF(IE > 1):
 GO TO 556
       DSCRPT(KGAS,NP)=SCRP3(2+NION3+JJ)
       RGAS(KGAS,NP)=RGAS3 
       EIN(KGAS,NP)=0.00
       INDEX(KGAS,NP)=0
       IPN(KGAS,NP)=-1
       L=3
       IARRY(KGAS,NP)=L
       PENFRA[KGAS,1,NP]=0.0
       PENFRA[KGAS,2,NP]=0.0
       PENFRA[KGAS,3,NP]=0.0
  556  CONTINUE
 5561  CONTINUE
      elif(KGAS == 4) :
       IF(EFINAL < E4(4):
) GO TO 51      
       IF(NATT4 > 1):
 GO TO 557                             
       NP=NP+1                                                         
       CF(KGAS,IE,NP)=Q4(4,IE)*VAN4
       FCATT(IE)=FCATT(IE)+CF(KGAS,IE,NP) 
       PSCT(KGAS,IE,NP)=0.50
       ANGCT(KGAS,IE,NP)=1.00
       IF(IE > 1):
 GO TO 5581
       DSCRPT(KGAS,NP)=SCRP4(3+NION4)
       RGAS(KGAS,NP)=RGAS4
       EIN(KGAS,NP)=0.00
       INDEX(KGAS,NP)=0
       IPN(KGAS,NP)=-1
       L=3
       IARRY(KGAS,NP)=L
       PENFRA[KGAS,1,NP]=0.0
       PENFRA[KGAS,2,NP]=0.0
       PENFRA[KGAS,3,NP]=0.0
       GO TO 5581
  557  DO 558 JJ=1,NATT4
       NP=NP+1                                                         
       CF(KGAS,IE,NP)=QATT4(JJ,IE)*VAN4
       FCATT(IE)=FCATT(IE)+CF(KGAS,IE,NP) 
       PSCT(KGAS,IE,NP)=0.50
       ANGCT(KGAS,IE,NP)=1.00
       IF(IE > 1):
 GO TO 558
       DSCRPT(KGAS,NP)=SCRP4(2+NION4+JJ)
       RGAS(KGAS,NP)=RGAS4
       EIN(KGAS,NP)=0.00
       INDEX(KGAS,NP)=0
       IPN(KGAS,NP)=-1
       L=3
       IARRY(KGAS,NP)=L
       PENFRA[KGAS,1,NP]=0.0
       PENFRA[KGAS,2,NP]=0.0
       PENFRA[KGAS,3,NP]=0.0
  558  CONTINUE
 5581  CONTINUE
      elif(KGAS == 5) :
       IF(EFINAL < E5(4):
) GO TO 51  
       IF(NATT5 > 1):
 GO TO 559                                 
       NP=NP+1                                                         
       CF(KGAS,IE,NP)=Q5(4,IE)*VAN5
       FCATT(IE)=FCATT(IE)+CF(KGAS,IE,NP) 
       PSCT(KGAS,IE,NP)=0.50
       ANGCT(KGAS,IE,NP)=1.00
       IF(IE > 1):
 GO TO 5601
       DSCRPT(KGAS,NP)=SCRP5(3+NION5)
       RGAS(KGAS,NP)=RGAS5
       EIN(KGAS,NP)=0.00
       INDEX(KGAS,NP)=0
       IPN(KGAS,NP)=-1
       L=3
       IARRY(KGAS,NP)=L
       PENFRA[KGAS,1,NP]=0.0
       PENFRA[KGAS,2,NP]=0.0
       PENFRA[KGAS,3,NP]=0.0
       GO TO 5601
  559  DO 560 JJ=1,NATT5
       NP=NP+1                                                         
       CF(KGAS,IE,NP)=QATT5(JJ,IE)*VAN5
       FCATT(IE)=FCATT(IE)+CF(KGAS,IE,NP) 
       PSCT(KGAS,IE,NP)=0.50
       ANGCT(KGAS,IE,NP)=1.00
       IF(IE > 1):
 GO TO 560
       DSCRPT(KGAS,NP)=SCRP5(2+NION5+JJ)
       RGAS(KGAS,NP)=RGAS5
       EIN(KGAS,NP)=0.00
       INDEX(KGAS,NP)=0
       IPN(KGAS,NP)=-1
       L=3
       IARRY(KGAS,NP)=L
       PENFRA[KGAS,1,NP]=0.0
       PENFRA[KGAS,2,NP]=0.0
       PENFRA[KGAS,3,NP]=0.0
  560  CONTINUE
 5601  CONTINUE
      else:
       IF(EFINAL < E6(4):
) GO TO 51  
       IF(NATT6 > 1):
 GO TO 561                                 
       NP=NP+1                                                         
       CF(KGAS,IE,NP)=Q6(4,IE)*VAN6
       FCATT(IE)=FCATT(IE)+CF(KGAS,IE,NP) 
       PSCT(KGAS,IE,NP)=0.50
       ANGCT(KGAS,IE,NP)=1.00
       IF(IE > 1):
 GO TO 5621
       DSCRPT(KGAS,NP)=SCRP6(3+NION6)
       RGAS(KGAS,NP)=RGAS6
       EIN(KGAS,NP)=0.00
       INDEX(KGAS,NP)=0
       IPN(KGAS,NP)=-1
       L=3
       IARRY(KGAS,NP)=L
       PENFRA[KGAS,1,NP]=0.0
       PENFRA[KGAS,2,NP]=0.0
       PENFRA[KGAS,3,NP]=0.0
       GO TO 5621
  561  DO 562 JJ=1,NATT6
       NP=NP+1                                                         
       CF(KGAS,IE,NP)=QATT6(JJ,IE)*VAN6
       FCATT(IE)=FCATT(IE)+CF(KGAS,IE,NP) 
       PSCT(KGAS,IE,NP)=0.50
       ANGCT(KGAS,IE,NP)=1.00
       IF(IE > 1):
 GO TO 562
       DSCRPT(KGAS,NP)=SCRP6(2+NION6+JJ)
       RGAS(KGAS,NP)=RGAS6
       EIN(KGAS,NP)=0.00
       INDEX(KGAS,NP)=0
       IPN(KGAS,NP)=-1
       L=3
       IARRY(KGAS,NP)=L
       PENFRA[KGAS,1,NP]=0.0
       PENFRA[KGAS,2,NP]=0.0
       PENFRA[KGAS,3,NP]=0.0
  562  CONTINUE
 5621  CONTINUE
      # endIF
# INELASTIC AND SUPERELASTIC
   51 IF(KGAS == 1) :
       IF(NIN1 == 0):
 GO TO 70                                           
       DO 52 J=1,NIN1
       NP=NP+1                                                          
       CF(KGAS,IE,NP)=QIN1(J,IE)*VAN1
       PSCT(KGAS,IE,NP)=0.50
       ANGCT(KGAS,IE,NP)=1.00
       INDEX(KGAS,NP)=0
#
       IF(KIN1(J):
 == 1) :   
        PSCT1=PEQIN1(J,IE)
        CALL ANGCUT(PSCT1,ANGC,PSCT2)
        ANGCT(KGAS,IE,NP)=ANGC
        PSCT(KGAS,IE,NP)=PSCT2
        INDEX(KGAS,NP)=1   
       # endIF
       IF(KIN1(J):
 == 2) :
        PSCT(KGAS,IE,NP)=PEQIN1(J,IE)
        INDEX(KGAS,NP)=2
       # endIF
       IF(IE > 1):
 GO TO 52                                     
       RGAS(KGAS,NP)=RGAS1                                           
       EIN(KGAS,NP)=EI1(J)/RGAS1
       L=4
       IF(EI1(J):
 < 0.00) L=5                                          
       IPN(KGAS,NP)=0  
       IARRY(KGAS,NP)=L
       DSCRPT(KGAS,NP)=SCRP1(4+NION1+NATT1+J)
       PENFRA[KGAS,1,NP]=PENFRA1(1,J)
       PENFRA[KGAS,2,NP]=PENFRA1(2,J)*1.D-16/math.sqrt(3.00)
       PENFRA[KGAS,3,NP]=PENFRA1(3,J)
   52  CONTINUE                 
      elif(KGAS == 2) :
       IF(NIN2 == 0):
 GO TO 70                                           
       DO 53 J=1,NIN2
       NP=NP+1                                                          
       CF(KGAS,IE,NP)=QIN2(J,IE)*VAN2
       PSCT(KGAS,IE,NP)=0.50
       ANGCT(KGAS,IE,NP)=1.00
       INDEX(KGAS,NP)=0
#
       IF(KIN2(J):
 == 1) :   
        PSCT1=PEQIN2(J,IE)
        CALL ANGCUT(PSCT1,ANGC,PSCT2)
        ANGCT(KGAS,IE,NP)=ANGC
        PSCT(KGAS,IE,NP)=PSCT2
        INDEX(KGAS,NP)=1   
       # endIF
       IF(KIN2(J):
 == 2) :
        PSCT(KGAS,IE,NP)=PEQIN2(J,IE)
        INDEX(KGAS,NP)=2
       # endIF
       IF(IE > 1):
 GO TO 53                                     
       RGAS(KGAS,NP)=RGAS2                                           
       EIN(KGAS,NP)=EI2(J)/RGAS2
       L=4
       IF(EI2(J):
 < 0.00) L=5                                          
       IPN(KGAS,NP)=0  
       IARRY(KGAS,NP)=L
       DSCRPT(KGAS,NP)=SCRP2(4+NION2+NATT2+J)
       PENFRA[KGAS,1,NP]=PENFRA2(1,J)
       PENFRA[KGAS,2,NP]=PENFRA2(2,J)*1.D-16/math.sqrt(3.00)
       PENFRA[KGAS,3,NP]=PENFRA2(3,J)
   53  CONTINUE                 
      elif(KGAS == 3) :
       IF(NIN3 == 0):
 GO TO 70                                           
       DO 54 J=1,NIN3
       NP=NP+1                                                          
       CF(KGAS,IE,NP)=QIN3(J,IE)*VAN3
       PSCT(KGAS,IE,NP)=0.50
       ANGCT(KGAS,IE,NP)=1.00
       INDEX(KGAS,NP)=0
#
       IF(KIN3(J):
 == 1) :   
        PSCT1=PEQIN3(J,IE)
        CALL ANGCUT(PSCT1,ANGC,PSCT2)
        ANGCT(KGAS,IE,NP)=ANGC
        PSCT(KGAS,IE,NP)=PSCT2
        INDEX(KGAS,NP)=1   
       # endIF
       IF(KIN3(J):
 == 2) :
        PSCT(KGAS,IE,NP)=PEQIN3(J,IE)
        INDEX(KGAS,NP)=2
       # endIF
       IF(IE > 1):
 GO TO 54                                     
       RGAS(KGAS,NP)=RGAS3                                           
       EIN(KGAS,NP)=EI3(J)/RGAS3
       L=4
       IF(EI3(J):
 < 0.00) L=5                                          
       IPN(KGAS,NP)=0  
       IARRY(KGAS,NP)=L
       DSCRPT(KGAS,NP)=SCRP3(4+NION3+NATT3+J)
       PENFRA[KGAS,1,NP]=PENFRA3(1,J)
       PENFRA[KGAS,2,NP]=PENFRA3(2,J)*1.D-16/math.sqrt(3.00)
       PENFRA[KGAS,3,NP]=PENFRA3(3,J)
   54  CONTINUE                 
      elif(KGAS == 4) :
       IF(NIN4 == 0):
 GO TO 70                                           
       DO 55 J=1,NIN4
       NP=NP+1                                                          
       CF(KGAS,IE,NP)=QIN4(J,IE)*VAN4
       PSCT(KGAS,IE,NP)=0.50
       ANGCT(KGAS,IE,NP)=1.00
       INDEX(KGAS,NP)=0
#
       IF(KIN4(J):
 == 1) :   
        PSCT1=PEQIN4(J,IE)
        CALL ANGCUT(PSCT1,ANGC,PSCT2)
        ANGCT(KGAS,IE,NP)=ANGC
        PSCT(KGAS,IE,NP)=PSCT2
        INDEX(KGAS,NP)=1   
       # endIF
       IF(KIN4(J):
 == 2) :
        PSCT(KGAS,IE,NP)=PEQIN4(J,IE)
        INDEX(KGAS,NP)=2
       # endIF
       IF(IE > 1):
 GO TO 55                                     
       RGAS(KGAS,NP)=RGAS4                                           
       EIN(KGAS,NP)=EI4(J)/RGAS4
       L=4
       IF(EI4(J):
 < 0.00) L=5                                          
       IPN(KGAS,NP)=0  
       IARRY(KGAS,NP)=L
       DSCRPT(KGAS,NP)=SCRP4(4+NION4+NATT4+J)
       PENFRA[KGAS,1,NP]=PENFRA4(1,J)
       PENFRA[KGAS,2,NP]=PENFRA4(2,J)*1.D-16/math.sqrt(3.00)
       PENFRA[KGAS,3,NP]=PENFRA4(3,J)
   55  CONTINUE                 
      elif(KGAS == 5) :
       IF(NIN5 == 0):
 GO TO 70                                           
       DO 56 J=1,NIN5
       NP=NP+1                                                          
       CF(KGAS,IE,NP)=QIN5(J,IE)*VAN5
       PSCT(KGAS,IE,NP)=0.50
       ANGCT(KGAS,IE,NP)=1.00
       INDEX(KGAS,NP)=0
#
       IF(KIN5(J):
 == 1) :   
        PSCT1=PEQIN5(J,IE)
        CALL ANGCUT(PSCT1,ANGC,PSCT2)
        ANGCT(KGAS,IE,NP)=ANGC
        PSCT(KGAS,IE,NP)=PSCT2
        INDEX(KGAS,NP)=1   
       # endIF
       IF(KIN5(J):
 == 2) :
        PSCT(KGAS,IE,NP)=PEQIN5(J,IE)
        INDEX(KGAS,NP)=2
       # endIF
       IF(IE > 1):
 GO TO 56                                     
       RGAS(KGAS,NP)=RGAS5                                           
       EIN(KGAS,NP)=EI5(J)/RGAS5
       L=4
       IF(EI5(J):
 < 0.00) L=5                                          
       IPN(KGAS,NP)=0  
       IARRY(KGAS,NP)=L
       DSCRPT(KGAS,NP)=SCRP5(4+NION5+NATT5+J)
       PENFRA[KGAS,1,NP]=PENFRA5(1,J)
       PENFRA[KGAS,2,NP]=PENFRA5(2,J)*1.D-16/math.sqrt(3.00)
       PENFRA[KGAS,3,NP]=PENFRA5(3,J)
   56  CONTINUE                 
      else: 
       IF(NIN6 == 0):
 GO TO 70                                           
       DO 57 J=1,NIN6
       NP=NP+1                                                          
       CF(KGAS,IE,NP)=QIN6(J,IE)*VAN6
       PSCT(KGAS,IE,NP)=0.50
       ANGCT(KGAS,IE,NP)=1.00
       INDEX(KGAS,NP)=0
#
       IF(KIN6(J):
 == 1) :   
        PSCT1=PEQIN6(J,IE)
        CALL ANGCUT(PSCT1,ANGC,PSCT2)
        ANGCT(KGAS,IE,NP)=ANGC
        PSCT(KGAS,IE,NP)=PSCT2
        INDEX(KGAS,NP)=1   
       # endIF
       IF(KIN6(J):
 == 2) :
        PSCT(KGAS,IE,NP)=PEQIN6(J,IE)
        INDEX(KGAS,NP)=2
       # endIF
       IF(IE > 1):
 GO TO 57                                     
       RGAS(KGAS,NP)=RGAS6                                           
       EIN(KGAS,NP)=EI6(J)/RGAS6
       L=4
       IF(EI6(J):
 < 0.00) L=5                                          
       IPN(KGAS,NP)=0  
       IARRY(KGAS,NP)=L
       DSCRPT(KGAS,NP)=SCRP6(4+NION6+NATT6+J)
       PENFRA[KGAS,1,NP]=PENFRA6(1,J)
       PENFRA[KGAS,2,NP]=PENFRA6(2,J)*1.D-16/math.sqrt(3.00)
       PENFRA[KGAS,3,NP]=PENFRA6(3,J)
   57  CONTINUE
      # endIF      
#                                       
   70 CONTINUE 
      IPLAST(KGAS)=NP 
      ISIZE(KGAS)=1
      IF(IPLAST(KGAS):
 >= 2)   ISIZE(KGAS)=2   
      IF(IPLAST(KGAS):
 >= 4)   ISIZE(KGAS)=4
      IF(IPLAST(KGAS):
 >= 8)   ISIZE(KGAS)=8
      IF(IPLAST(KGAS):
 >= 16)  ISIZE(KGAS)=16  
      IF(IPLAST(KGAS):
 >= 32)  ISIZE(KGAS)=32
      IF(IPLAST(KGAS):
 >= 64)  ISIZE(KGAS)=64
      IF(IPLAST(KGAS):
 >= 128) ISIZE(KGAS)=128
      IF(IPLAST(KGAS):
 >= 256) ISIZE(KGAS)=256
# ----------------------------------------------------------------      
#     CALCULATION OF TOTAL COLLISION FREQUENCY FOR EACH GAS COMPONENT  
# --------------------------------------------------------------------- 
      TCF(KGAS,IE)=0.00                                              
      DO 610 IF=1,IPLAST(KGAS)                                         
      TCF(KGAS,IE)=TCF(KGAS,IE)+CF(KGAS,IE,IF)
      IF(CF(KGAS,IE,IF):
 < 0.00) WRITE(6,776) CF(KGAS,IE,IF),KGAS,IE,IF
     /,IARRY(KGAS,IF),EIN(KGAS,IF) 
  776 FORMAT('  WARNING NEGATIVE COLLISION FEQUENCY =',D12.3,' KGAS =',
     /I2,' IE =',I6,' IF =',I3,' IARRY=',I5,' EIN=',F7.4)              
 610  CONTINUE                                                          
      DO 620 IF=1,IPLAST(KGAS)                                         
      IF(TCF(KGAS,IE):
 == 0.00) GO TO 615                              
      CF(KGAS,IE,IF)=CF(KGAS,IE,IF)/TCF(KGAS,IE)                       
      GO TO 620                                                         
 615  CF(KGAS,IE,IF)=0.00                                             
 620  CONTINUE                                                          
      DO 630 IF=2,IPLAST(KGAS)                                          
      CF(KGAS,IE,IF)=CF(KGAS,IE,IF)+CF(KGAS,IE,IF-1)                    
 630  CONTINUE                   
      FCATT(IE)=FCATT(IE)*EROOT(IE)
      FCION(IE)=FCION(IE)*EROOT(IE)                                     
      TCF(KGAS,IE)=TCF(KGAS,IE)*EROOT(IE)   
 700  CONTINUE 
#
      DO 637 IE=1,N4000
# CALCULATION OF NULL COLLISION FREQUENCIES
      NPLAST(1)=NUL1
      NPLAST(2)=NUL2
      NPLAST(3)=NUL3
      NPLAST(4)=NUL4
      NPLAST(5)=NUL5
      NPLAST(6)=NUL6
      IF((NUL1+NUL2+NUL3+NUL4+NUL5+NUL6):
 == 0) GO TO 638      
      IF(NUL1 > 0):
 :
       DO 631 J=1,NPLAST(1)
       SCLENUL(1,J)=SCLN1(J)
       DSCRPTN(1,J)=SCRPN1(J)
  631  CFN(1,IE,J)=QNUL1(J,IE)*VAN1*SCLENUL(1,J)
      # endIF
      IF(NUL2 > 0):
 :
       DO 632 J=1,NPLAST(2)
       SCLENUL(2,J)=SCLN2(J)
       DSCRPTN(2,J)=SCRPN2(J)
  632  CFN(2,IE,J)=QNUL2(J,IE)*VAN2*SCLENUL(2,J)
      # endIF
      IF(NUL3 > 0):
 :
       DO 633 J=1,NPLAST(3)
       SCLENUL(3,J)=SCLN3(3)
       DSCRPTN(3,J)=SCRPN3(3)
  633  CFN(3,IE,J)=QNUL3(J,IE)*VAN3*SCLENUL(3,J)
      # endIF
      IF(NUL4 > 0):
 :
       DO 634 J=1,NPLAST(4)
       SCLENUL(4,J)=SCLN4(J)
       DSCRPTN(4,J)=SCRPN4(J)
  634  CFN(4,IE,J)=QNUL4(J,IE)*VAN4*SCLENUL(4,J)
      # endIF
      IF(NUL5 > 0):
 :
       DO 635 J=1,NPLAST(5)
       SCLENUL(5,J)=SCLN5(J)
       DSCRPTN(5,J)=SCRPN5(J)
  635  CFN(5,IE,J)=QNUL5(J,IE)*VAN5*SCLENUL(5,J)
      # endIF
      IF(NUL6 > 0):
 :
       DO 636 J=1,NPLAST(6)
       SCLENUL(6,J)=SCLN6(J)
       DSCRPTN(6,J)=SCRPN6(J)
  636  CFN(6,IE,J)=QNUL6(J,IE)*VAN6*SCLENUL(6,J)
      # endIF
# CALCULATE NULL COLLISION FREQUENCY FOR EACH GAS COMPONENT
      DO 637 KGAS=1,NGAS
      TCFN(KGAS,IE)=0.00
      DO 6361 IL=1,NPLAST(KGAS)
      TCFN(KGAS,IE)=TCFN(KGAS,IE)+CFN(KGAS,IE,IL)
      IF(CFN(KGAS,IE,IL):
 < 0.00) WRITE(6,777) CFN(KGAS,IE,IL),KGAS,IL
  777 FORMAT(' WARNING  NEGATIVE NULL COLLISION FREQUENCY=',D12.3,' KGAS
     / =',I2,' IL =',I2)
 6361 CONTINUE
      DO 6363 IL=1,NPLAST(KGAS)
      IF(TCFN(KGAS,IE):
 == 0.00) GO TO 6362
      CFN(KGAS,IE,IL)=CFN(KGAS,IE,IL)/TCFN(KGAS,IE)
      GO TO 6363
 6362 CFN(KGAS,IE,IL)=0.00
 6363 CONTINUE
      DO 6364 IL=2,NPLAST(KGAS)
      CFN(KGAS,IE,IL)=CFN(KGAS,IE,IL)+CFN(KGAS,IE,IL-1)
 6364 CONTINUE
      TCFN(KGAS,IE)=TCFN(KGAS,IE)*EROOT(IE)
  637 CONTINUE
  638 CONTINUE
#     WRITE(6,841) (INDEX(KGAS,J),J,KGAS, J=1,IPLAST(KGAS))
# 841 FORMAT(2X,' INDEX=',I3,' J=',I3,' KGAS=',I2)                                  
#  SET ANISOTROPIC FLAG IF ANISOTROPIC SCATTERING DATA IS DETECTED
      KELSUM=0
      DO 701 J=1,6
 701  KELSUM=KELSUM+KEL1(J)+KEL2(J)+KEL3(J)+KEL4(J)+KEL5(J)+KEL6(J)
      DO 702 J=1,250
 702  KELSUM=KELSUM+KIN1(J)+KIN2(J)+KIN3(J)+KIN4(J)+KIN5(J)+KIN6(J)
      IF(KELSUM > 0):
 NISO=1  
#     IF(NISO == 1) WRITE(6,7765) NISO
#7765 FORMAT(3X,' ANISOTROPIC SCATTERING DETECTED NISO=',I5)            
# -------------------------------------------------------------------   
#   CALCULATE NULL COLLISION FREQUENCIES FOR EACH GAS COMPONENT                                  
# ------------------------------------------------------------------- 
      FAKEIN=abs(FAKEI)/DFLOAT(NGAS) 
      DO 800 KGAS=1,NGAS
      TCFMAX(KGAS)=0.00
      DO 800 IE=1,4000
      IF((TCF(KGAS,IE):
+TCFN(KGAS,IE)+FAKEIN) >= TCFMAX(KGAS)) 
     /TCFMAX(KGAS)=TCF(KGAS,IE)+TCFN(KGAS,IE)+FAKEIN       
  800 CONTINUE                                        
# CALCULATE EACH GAS CUMULATIVE FRACTIONAL NULL COLLISION FREQUENCIES
      TCFMX=0.00
      DO 810 KGAS=1,NGAS
  810 TCFMX=TCFMX+TCFMAX(KGAS) 
      DO 811 KGAS=1,NGAS
  811 TCFMXG(KGAS)=TCFMAX(KGAS)/TCFMX
      DO 812 KGAS=2,NGAS
  812 TCFMXG(KGAS)=TCFMXG(KGAS)+TCFMXG(KGAS-1)
# CALCULATE MAXWELL BOLTZMAN VELOCITY FACTOR FOR EACH GAS COMPONENT
      DO 813 KGAS=1,NGAS
  813 VTMB[KGAS]=math.sqrt(2.00*ECHARG*AKT/AMGAS(KGAS))*1.D-12            
# -------------------------------------------------------------------   
#   CROSS SECTION DATA FOR INTEGRALS IN  OUTPUT               
# --------------------------------------------------------------------- 
      DO 900 I=1,NSTEP                                               
      QTOT(I)=AN1*Q1(1,I)+AN2*Q2(1,I)+AN3*Q3(1,I)+AN4*Q4(1,I)+
     /AN5*Q5(1,I)+AN6*Q6(1,I)            
      QEL(I)=AN1*Q1(2,I)+AN2*Q2(2,I)+AN3*Q3(2,I)+AN4*Q4(2,I)+
     /AN5*Q5(2,I)+AN6*Q6(2,I)                          
      QION(1,I)=Q1(3,I)*AN1                                             
      QION(2,I)=Q2(3,I)*AN2                                             
      QION(3,I)=Q3(3,I)*AN3                                             
      QION(4,I)=Q4(3,I)*AN4
      QION(5,I)=Q5(3,I)*AN5
      QION(6,I)=Q6(3,I)*AN6                                             
      QATT(1,I)=Q1(4,I)*AN1                                             
      QATT(2,I)=Q2(4,I)*AN2                                             
      QATT(3,I)=Q3(4,I)*AN3                                             
      QATT(4,I)=Q4(4,I)*AN4
      QATT(5,I)=Q5(4,I)*AN5
      QATT(6,I)=Q6(4,I)*AN6                                             
#                                                                       
  850 QREL(I)=0.00                                                     
      QSATT(I)=0.00                                                    
      QSUM(I)=0.00                                                     
      DO 855 J=1,NGAS                                                   
      QSUM(I)=QSUM(I)+QION(J,I)+QATT(J,I)                               
      QSATT(I)=QSATT(I)+QATT(J,I)                                       
  855 QREL(I)=QREL(I)+QION(J,I)-QATT(J,I)                               
#                                                                       
      IF(NIN1 == 0):
 GO TO 865                                           
      DO 860 J=1,NIN1                                                   
  860 QSUM(I)=QSUM(I)+QIN1(J,I)*AN1                                     
  865 IF(NIN2 == 0) GO TO 875                                           
      DO 870 J=1,NIN2                                                   
  870 QSUM(I)=QSUM(I)+QIN2(J,I)*AN2                                     
  875 IF(NIN3 == 0) GO TO 885                                           
      DO 880 J=1,NIN3                                                   
  880 QSUM(I)=QSUM(I)+QIN3(J,I)*AN3                                     
  885 IF(NIN4 == 0) GO TO 895                                           
      DO 890 J=1,NIN4                                                   
  890 QSUM(I)=QSUM(I)+QIN4(J,I)*AN4                                     
  895 IF(NIN5 == 0) GO TO 898 
      DO 896 J=1,NIN5
  896 QSUM(I)=QSUM(I)+QIN5(J,I)*AN5
  898 IF(NIN6 == 0) GO TO 900
      DO 899 J=1,NIN6
  899 QSUM(I)=QSUM(I)+QIN6(J,I)*AN6                                     
#                                                                       
 900  CONTINUE                                                          
#                                                                       
      RETURN                                                            
      # end 
      def GASMIX(NGS,Q,QIN,NIN,E,EI,NAME,VIRL,EB,
     /PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      IMPLICIT #real*8 (A-H,O-Z) 
      IMPLICIT #integer*8 (I-N)
      CHARACTER*25 NAME       
      CHARACTER*50 SCRPT(300),SCRPTN(10)                       
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EI(250),KIN(250) 
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EB[30]          
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KEL(6),PENFRA[3,250]
      DIMENSION NC0(30),EC0(30),WK(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
# 
      GO TO (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
     /21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,
     /41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,    
     /61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80) NGS
    1 CALL GAS1(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN   
    2 CALL GAS2(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
    3 CALL GAS3(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
    4 CALL GAS4(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
    5 CALL GAS5(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
    6 CALL GAS6(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
    7 CALL GAS7(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
    8 CALL GAS8(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
    9 CALL GAS9(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   10 CALL GAS10(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   11 CALL GAS11(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   12 CALL GAS12(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   13 CALL GAS13(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   14 CALL GAS14(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   15 CALL GAS15(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   16 CALL GAS16(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   17 CALL GAS17(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   18 CALL GAS18(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   19 CALL GAS19(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   20 CALL GAS20(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   21 CALL GAS21(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   22 CALL GAS22(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   23 CALL GAS23(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   24 CALL GAS24(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   25 CALL GAS25(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   26 CALL GAS26(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   27 CALL GAS27(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   28 CALL GAS28(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   29 CALL GAS29(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   30 CALL GAS30(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   31 CALL GAS31(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   32 CALL GAS32(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   33 CALL GAS33(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   34 CALL GAS34(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   35 CALL GAS35(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   36 CALL GAS36(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   37 CALL GAS37(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   38 CALL GAS38(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   39 CALL GAS39(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   40 CALL GAS40(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   41 CALL GAS41(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   42 CALL GAS42(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   43 CALL GAS43(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   44 CALL GAS44(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   45 CALL GAS45(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   46 CALL GAS46(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   47 CALL GAS47(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   48 CALL GAS48(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   49 CALL GAS49(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   50 CALL GAS50(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   51 CALL GAS51(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   52 CALL GAS52(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   53 CALL GAS53(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   54 CALL GAS54(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   55 CALL GAS55(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   56 CALL GAS56(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   57 CALL GAS57(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   58 CALL GAS58(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   59 CALL GAS59(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   60 CALL GAS60(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   61 CALL GAS61(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   62 CALL GAS62(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   63 CALL GAS63(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   64 CALL GAS64(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   65 CALL GAS65(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   66 CALL GAS66(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   67 CALL GAS67(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   68 CALL GAS68(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   69 CALL GAS69(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   70 CALL GAS70(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   71 CALL GAS71(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   72 CALL GAS72(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   73 CALL GAS73(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   74 CALL GAS74(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   75 CALL GAS75(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   76 CALL GAS76(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   77 CALL GAS77(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   78 CALL GAS78(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   79 CALL GAS79(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
   80 CALL GAS80(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,
     /QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,
     /NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      RETURN  
      # end 
      def READIN(LAST):
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/GASN/NGASN(6)                                         
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX
      COMMON/BFLD/EOVB,WB,BTHETA,BMAG 
      COMMON/RATIO/AN1,AN2,AN3,AN4,AN5,AN6,AN,FRAC(6)   
      COMMON/THRM/AMGAS(6),VTMB[6],TCFMX,TCFMXG(6),ITHRM
#            
#      READ IN OUTPUT CONTROL AND INTEGRATION DATA                      
#      CONVERTED TO FREE FORMAT READIN                                                                  
      READ[5,*] NGAS,NMAX,IPEN,ITHRM,EFINAL                        
#     READ[5,2] NGAS,NMAX,IPEN,ITHRM,EFINAL                        
#   2 FORMAT(4I10,F10.5)                                           
      IF(NGAS == 0):
 GO TO 99
# 
#   GAS IDENTIFIERS 
#
      READ[5,*] NGASN(1),NGASN(2),NGASN(3),NGASN(4),NGASN(5),NGASN(6)
#     READ[5,3] NGASN(1),NGASN(2),NGASN(3),NGASN(4),NGASN(5),NGASN(6)
#   3 FORMAT(6I5)        
#      
#      GAS PARAMETERS
#
      READ[5,*] FRAC(1),FRAC(2),FRAC(3),FRAC(4),FRAC(5),FRAC(6),TEMPC,
     /TORR                       
#     READ[5,4] FRAC(1),FRAC(2),FRAC(3),FRAC(4),FRAC(5),FRAC(6),TEMPC,
#    /TORR                       
#   4 FORMAT(8F10.4)      
#                                                  
#      FIELD VALUES                                           
#                                                                       
      READ[5,*] EFIELD,BMAG,BTHETA                                      
#     READ[5,5] EFIELD,BMAG,BTHETA                                      
#   5 FORMAT(3F10.3)
#   CHECK INPUT
#     IF(NGAS == 1 and IPEN == 1) :
#     WRITE(6,992) 
# 992 FORMAT(' def STOPPED IT IS NOT POSSIBLE TO HAVE PENNING TRANSF
#    /ERS IN PURE GASES.',/,' ONLY MIXTURES ALLOWED WITH IPEN=1')
#     STOP
      LAST=0
      RETURN
  99  LAST=1
      RETURN
      # end     
      def SETUPT(LAST):                                          
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
      COMMON/RATIO/AN1,AN2,AN3,AN4,AN5,AN6,AN,FRAC(6)               
      COMMON/GASN/NGASN(6)                                 
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX
      COMMON/VEL/WX,WY,WZ
      COMMON/VELERR/DWX,DWY,DWZ
      COMMON/CTOWNS/ALPHA,ATT
      COMMON/CTWNER/ALPER,ATTER
      COMMON/DIFVEL/DIFLN,DIFTR
      COMMON/DIFERL/DFLER,DFTER
      COMMON/DIFLAB/DIFXX,DIFYY,DIFZZ,DIFYZ,DIFXY,DIFXZ
      COMMON/DIFERB/DXXER,DYYER,DZZER,DYZER,DXYER,DXZER
      COMMON/THRM/AMGAS(6),VTMB[6],TCFMX,TCFMXG(6),ITHRM
      COMMON/BFLD/EOVB,WB,BTHETA,BMAG 
      COMMON/GER/TWOPI
      COMMON/MRATIO/VAN1,VAN2,VAN3,VAN4,VAN5,VAN6,VAN
      COMMON/TTRM/ZTOT,TTOT,ZTOTS,TTOTS                             
      COMMON/OUTPTT/TIME(300),ICOLL(6,5),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(6,290),ICOLNN(6,10)
      COMMON/DECOR/NCOLM,NCORLN,NCORST
      COMMON/FAKE/FAKEI,IFAKE,FAKET(8),FAKED[9] 
      COMMON/DENS/DENSY(4000)
#                                                                       
#   NEW UPDATE OF CONSTANTS 2010
#
      API=DACOS(-1.00)  
      TWOPI=2.00*API                                               
      ARY=13.60569253                                                  
      PIR2=8.7973554297D-17                                             
      ECHARG=1.602176565D-19                                            
      EMASS=9.10938291D-31                                              
      AMU=1.660538921D-27                                               
      BOLTZ=8.6173324D-5       
      BOLTZJ=1.3806488D-23                                              
      AWB=1.758820088D10                                                
      ALOSCH=2.6867805D19                                               
      EOVM=math.sqrt(2.00*ECHARG/EMASS)*100.00                            
      ABZERO=273.150                                                   
      ATMOS=760.00                                                     
      CONST1=AWB/2.00*1.0D-19                                          
      CONST2=CONST1*1.0D-02                                             
      CONST3=math.sqrt(0.20*AWB)*1.0D-09                                   
      CONST4=CONST3*ALOSCH*1.0D-15                                      
      CONST5=CONST3/2.00
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# FIX ELASTIC ANGULAR DISTRIBUTIONS TO OKHRIMVOSKKY TYPE
      NANISO=2
# FIX ELASTIC ANGULAR DISTRIBUTIONS TO CAPITELLI LONGO TYPE
#     NANISO=1
# FIX ELASTIC ANGULAR DISTRIBUTIONS TO ISOTROPIC SCATTERING
#     NANISO=0
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#  --------------------------------------------                
#                                                                       
#     IF(NGAS == 1 and IPEN == 1) :
#     WRITE(6,992) 
# 992 FORMAT(' def STOPPED IT IS NOT POSSIBLE TO HAVE PENNING TRANSF
#    /ERS IN PURE GASES.',/,' ONLY MIXTURES ALLOWED WITH IPEN=1')
#     STOP
#     # endIF
      CORR=ABZERO*TORR/(ATMOS*(ABZERO+TEMPC)*100.00)                   
#   
#   SET DECORRELATION LENGTH AND STEP 
      NCOLM=400000
      NCORLN=50000
      NCORST=4
#
# SET LARGE DECORRELATION LENGTH AND STEP FOR PURE OR ALMOST PURE
# ARGON KRYPTON AND XENON
      MXEKR=0
      DO 55 IH=1,NGAS
      IF(NGASN(IH):
 == 2 or NGASN(IH) == 6 or NGASN(IH) == 7) MXEKR=IH
# USE REDUCED DECORRELATION IF HIGH EFIELD
      IF(EFIELD > (10./CORR):
) MXEKR=0
   55 CONTINUE
      IF(MXEKR != 0):
 :
       IF(NGAS == 1):
 :
        NCOLM=2000000
        NCORLN=500000
        NCORST=2 
       else:
        IF(FRAC(MXEKR):
 > 90.0) :
         NCOLM=2000000
         NCORLN=500000
         NCORST=2
        # endIF
       # endIF     
      # endIF
      TOTFRAC=0.00
      IF(NGAS == 0 or NGAS > 6):
 GO TO 999
      DO 10 J=1,NGAS
      IF(NGASN(J):
 == 0 or FRAC(J) == 0.00) GO TO 999
   10 TOTFRAC=TOTFRAC+FRAC(J)
      IF(abs(TOTFRAC-100.00):
 > 1.D-6) GO TO 999
      LAST=0
      TMAX=100.00                                                      
      NSCALE=40000000
      NMAX=NMAX*NSCALE 
      IF(NMAX < 0):
 :
       WRITE(6,91) 
   91  FORMAT(2(/),' ERROR IN INPUT : NMAX TOO LARGE OVERFLOWED THE ALLO
     /WED #integer RANGE OF THE COMPUTER OR COMPILER')     
       LAST=1
       RETURN
      # endIF                                                         
      NSTEP=4000                                                        
      THETA=0.7850                                                     
      PHI=0.10  
# ZERO COMMON BLOCKS OF OUTPUT RESULTS
      WX=0.00
      WY=0.00
      WZ=0.00
      DWX=0.00
      DWY=0.00
      DWZ=0.00
      TTOTS=0.00
      ALPHA=0.00
      ATT=0.00
      ALPER=0.00
      ATTER=0.00 
      DIFLN=0.00 
      DIFTR=0.00 
      DFLER=0.00 
      DFTER=0.00 
      DIFXX=0.00 
      DIFYY=0.00 
      DIFZZ=0.00 
      DIFYZ=0.00 
      DIFXY=0.00 
      DIFXZ=0.00 
      DXXER=0.00 
      DYYER=0.00 
      DZZER=0.00 
      DYZER=0.00 
      DXYER=0.00 
      DXZER=0.00 
      IFAKE=0:
      FAKEI=0.00
      DO 65 J=1,300                                                     
   65 TIME(J)=0.00                                                     
      DO 70 KGAS=1,6                              
      DO 70 K=1,5                        
   70 ICOLL(KGAS,K)=0 
      DO 71 KGAS=1,6
      DO 71 IL=1,10
   71 ICOLNN(KGAS,IL)=0
      DO 80 KGAS=1,6  
      DO 80 K=1,290 
   80 ICOLN(KGAS,K)=0                                                 
      DO 100 K=1,4000      
      DENSY(K)=0.00                                             
  100 SPEC(K)=0.00                                                     
      DO 101 K=1,6 
      VTMB[K]=0.00          
  101 AMGAS(K)=0.00   
# ---------------------------------------------  
# CAN SET RANDOM NUMBER SEED TO SEED VALUE HERE
#                                                               
      RSTART=0.6660 
#    RANDOM NUMBER SEED def (RSTART)      
#-----------------------------------------------      
      ESTART=EFINAL/50.00
#     ITHRM=0                                            
      CORR=ABZERO*TORR/(ATMOS*(ABZERO+TEMPC)*100.00)                   
      AKT=(ABZERO+TEMPC)*BOLTZ
      AN1=FRAC(1)*CORR*ALOSCH                                           
      AN2=FRAC(2)*CORR*ALOSCH                                           
      AN3=FRAC(3)*CORR*ALOSCH                                           
      AN4=FRAC(4)*CORR*ALOSCH
      AN5=FRAC(5)*CORR*ALOSCH
      AN6=FRAC(6)*CORR*ALOSCH                                           
      AN=100.00*CORR*ALOSCH                                            
      VAN1=FRAC(1)*CORR*CONST4*1.0D15                                   
      VAN2=FRAC(2)*CORR*CONST4*1.0D15                                   
      VAN3=FRAC(3)*CORR*CONST4*1.0D15                                   
      VAN4=FRAC(4)*CORR*CONST4*1.0D15
      VAN5=FRAC(5)*CORR*CONST4*1.0D15
      VAN6=FRAC(6)*CORR*CONST4*1.0D15                                   
      VAN=100.00*CORR*CONST4*1.0D15
#  RADIANS PER PICOSECOND                                                        
      WB=AWB*BMAG*1.0D-12 
#   METRES PER PICOSECOND
      IF(BMAG == 0.00):
 RETURN
      EOVB=EFIELD*1.D-9/BMAG
      RETURN
  999 WRITE(6,87) NGAS,(J,NGASN(J),FRAC(J),J=1,6) 
   87 FORMAT(3(/),4X,' ERROR IN GAS INPUT : NGAS=',I5,6(/,2X,' N=',I3,' 
     /NGAS=',I5,' FRAC=',F8.3))                                         
      RETURN                                                            
      # end                                                               
      def PRNTERT                                                :
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/RATIO/AN1,AN2,AN3,AN4,AN5,AN6,AN,FRAC(6)              
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX  
      COMMON/THRM/AMGAS(6),VTMB[6],TCFMX,TCFMXG(6),ITHRM
      COMMON/BFLD/EOVB,WB,BTHETA,BMAG  
      COMMON/LARGET/CF(6,4000,290),EIN(6,290),TCF(6,4000),IARRY(6,290),
     /RGAS(6,290),IPN(6,290),WPL(6,290),IPLAST(6),ISIZE(6),
     /PENFRA[6,3,290],TCFMAX(6)            
      COMMON/NAMES/NAMEG(6)  
      COMMON/DECOR/NCOLM,NCORLN,NCORST    
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9]             
      CHARACTER*25 NAMEG                                  
      WRITE(6,1)
    1 FORMAT(2(/),10X,'def MAGBOLTZ 2 VERSION 11.3 ',/)          
      WRITE(6,10) NGAS                                                  
   10 FORMAT(10X,'MONTE CARLO SOLUTION FOR MIXTURE OF ',I2,' GASES.',/,
     /5X,'------------------------------------------------------')  
      WRITE(6,30) (NAMEG(J),FRAC(J), J=1,NGAS)                          
  30  FORMAT(/,5X,'  GASES  USED ',16X,'PERCENTAGE USED ',2(/),6(6X,A25,
     /5X,F9.4,/))                    
      WRITE(6,50) TEMPC,TORR                                            
   50 FORMAT(/,2X,'GAS TEMPERATURE =',F6.1,' DEGREES CENTIGRADE.',/,2X,'
     /GAS PRESSURE = ',F7.1,' TORR.')                               
      WRITE(6,51) EFINAL,NSTEP                                          
  51  FORMAT(1(/),2X,'INTEGRATION FROM 0.0 TO ',F8.2,' EV.  IN ',I4,' ST
     /EPS. ')
      IF(IPEN == 0):
 WRITE(6,52)
      IF(IPEN == 1):
 WRITE(6,53)
   52 FORMAT(/,' PENNING EFFECTS NOT INCLUDED')
   53 FORMAT(/,' PENNING EFFECTS INCLUDED')
      IF(NANISO == 0):
 WRITE(6,61)
      IF(NANISO == 1):
 WRITE(6,62)
      IF(NANISO == 2):
 WRITE(6,63)
      IF(NANISO < 0 or NANISO > 2):
 :
       WRITE(6,64)
       STOP
      # endIF
  61  FORMAT(/,' ISOTROPIC SCATTERING X-SECTIONS USED')
  62  FORMAT(/,' ANISOTROPIC SCATTERING TYPE 1 (CAPITELLI/LONGO) USED IF
     / AVAILABLE')
  63  FORMAT(/,' ANISOTROPIC SCATTERING TYPE 2 (OKHRIMOVSKYY) USED IF AV
     /AILABLE') 
  64  FORMAT(/,' INPUT ERROR FOR ISOTROPY CONTROL,def STOPPED')
      IF(NCOLM > 1000000):
 :
       WRITE(6,166) NCOLM
      else:
       WRITE(6,167) NCOLM
      # endIF
 166  FORMAT(/,' LONG DECORRELATION LENGTH =',I7,' COLLISIONS.')
 167  FORMAT(/,' SHORT DECORRELATION LENGTH =',I7,' COLLISIONS.')
      WRITE(6,66)
  66  FORMAT(2(/),' THERMAL MOTION OF GAS INCLUDED')                   
  74  WRITE(6,90) EFIELD,BMAG,BTHETA,WB                                 
  90  FORMAT(1(/),'  ELECTRIC FIELD =',F12.4,' VOLTS/CM.',/'  MAGNETIC F
     /IELD =',F11.4,' KILOGAUSS.',/,'  ANGLE BETWEEN ELECTRIC AND MAGNET
     /IC FIELD =',F10.3,' DEGREES.',/,'  CYCLOTRON FREQ. =',D12.3,' RADI
     /ANS/PICOSECOND')
      WRITE(6,95) ESTART 
  95  FORMAT(1(/),'  INITIAL ELECTRON ENERGY =',F8.3,' EV.') 
#     WRITE(6,96) RSTART
# 96  FORMAT(/,'  RANDOM NUMBER STARTER (SEED)=',F7.4)     
      WRITE(6,100) NMAX                                                 
 100  FORMAT(1(/),'  TOTAL NUMBER OF #real COLLISIONS =',I11)    
      WRITE(6,110)  (TCFMAX(L),L=1,6)                                  
  110 FORMAT(1(/),'  NULL COLLISION FREQUENCY FOR EACH GAS COMPONENT IN 
     /UNITS OF  (*10**12/SEC)',/,2(3(8X,D10.3)/))   
      RETURN                                                            
      # end
      def SORTT(KGAS,I,R2,IE):        
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/LARGET/CF(6,4000,290),EIN(6,290),TCF(6,4000),IARRY(6,290),
     /RGAS(6,290),IPN(6,290),WPL(6,290),LAST(6),ISIZE(6),PENFRA[6,3,290]
     /,TCFMAX(6)
#         
#    SELECTS COLLISION TYPE FROM COLLISION ARRAY BY BINARY STEP SAMPLING
#      REDUCES SAMPLING RANGE TO WITHIN 4 POSITIONS IN ARRAY 
#      OUTPUT =  I   ( POSITION WITHIN 4 OF CORRECT VALUE)  
#  
      ISTEP=ISIZE(KGAS)    
      INCR=0
      DO 1 K=1,12
      I=INCR      
      IF(ISTEP == 2):
 RETURN
      I=INCR+ISTEP
      IF(I > LAST(KGAS):
) GO TO 2
      IF(CF(KGAS,IE,I):
 < R2) :    
       INCR=INCR+ISTEP         
      # endIF
    2 ISTEP=ISTEP/2
    1 CONTINUE 
      RETURN
      # end                                                              
      def GERJAN:
      IMPLICIT #real*8 (A-H,O-Z)
      COMMON/GER/TWOPI
      COMMON/RANM/RNMX(6)
#     GENERATES 6 RANDOM NUMBERS ACCORDING TO MAXWELLIAN DISTRIBUTION 
#     CF GERJAN HAGELLAR
      DO 1 J=1,5,2
      RAN1=drand48(RDUM)
      RAN2=drand48(RDUM)
      RNMX(J)=math.sqrt(-math.log(RAN1))*DCOS(RAN2*TWOPI)
      RNMX(J+1)=math.sqrt(-math.log(RAN1))*DSIN(RAN2*TWOPI)
    1 CONTINUE
      RETURN
      # end
      def MONTET                                                 :
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2             
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX
      COMMON/LARGET/CF(6,4000,290),EIN(6,290),TCF(6,4000),IARRY(6,290),
     /RGAS(6,290),IPN(6,290),WPL(6,290),LAST(6),ISIZE(6),PENFRA[6,3,290]
     /,TCFMAX(6)
      COMMON/LARGENT/CFN(6,4000,10),TCFN(6,4000),SCLENUL(6,10),NPLAST(6)
      COMMON/DECOR/NCOLM,NCORLN,NCORST
      COMMON/ANIST/PSCT(6,4000,290),ANGCT(6,4000,290),INDEX(6,290),NISO
      COMMON/IONFL/NC0(6,290),EC0(6,290),NG1(6,290),EG1(6,290),
     /NG2(6,290),EG2(6,290),WKLM(6,290),EFL(6,290)
      COMMON/VEL/WX,WY,WZ
      COMMON/VELERR/DWX,DWY,DWZ
      COMMON/CTOWNS/ALPHA,ATT
      COMMON/CTWNER/ALPER,ATTER
      COMMON/DIFVEL/DIFLN,DIFTR
      COMMON/DIFERL/DFLER,DFTER
      COMMON/DIFLAB/DIFXX,DIFYY,DIFZZ,DIFYZ,DIFXY,DIFXZ
      COMMON/DIFERB/DXXER,DYYER,DZZER,DYZER,DXYER,DXZER
      COMMON/THRM/AMGAS(6),VTMB[6],TCFMX,TCFMXG(6),ITHRM               
      COMMON/OUTPTT/TIME(300),ICOLL(6,5),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(6,290),ICOLNN(6,10)
      COMMON/RANM/RNMX(6)
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9]
      DIMENSION XST(2000000),YST(2000000),ZST(2000000),STO(2000000)
      DIMENSION WZST(10),AVEST(10)
      DIMENSION DFZZST(10),DFYYST(10),DFXXST(10),TEMP(6,4000)
# -------------------------------------------------------------------   
#   CALCULATES COLLISION EVENTS AND UPDATES DIFFUSION AND VELOCITY.  
#   USED WITH MAGNETIC FIELD B =0.0   ELECTRIC FIELD IN Z DIRECTION.
#   BACKGROUND GAS MOTION INCLUDED AT TEMP =  TEMPC 
# -------------------------------------------------------------------
      WX=0.00
      WY=0.00   
      DWX=0.00
      DWY=0.00
      DIFYZ=0.00
      DIFXY=0.00
      DIFXZ=0.00
      DYZER=0.00
      DXYER=0.00
      DXZER=0.00
      X=0.00
      Y=0.00
      Z=0.00
      ST=0.00 
      ST1=0.00
      ST2=0.00 
      SUME2=0.00                                                       
      SUMXX=0.00
      SUMYY=0.00
      SUMZZ=0.00 
      SUMVX=0.00 
      SUMVY=0.00
      ZOLD=0.00
      STOLD=0.00 
      ST1OLD=0.00
      ST2OLD=0.00
      SZZOLD=0.00
      SXXOLD=0.00
      SYYOLD=0.00
      SVXOLD=0.00
      SVYOLD=0.00
      SME2OLD=0.00                                                     
      SMALL=1.0D-20                                                     
      TMAX1=0.00                                                       
      RDUM=RSTART                                                       
      E1=ESTART                                                         
      CONST9=CONST3*0.010 
      CONST10=CONST9*CONST9
      N4000=4000
      N300=300                                              
      ITMAX=10                                                          
      ID=0                                                              
      NCOL=0                                                            
      NNULL=0
      IEXTRA=0
# GENERATE INITIAL RANDOM MAXWELL BOLTZMAN NUMBERS 
      CALL GERJAN
      IMBPT=0
      TDASH=0.00                                       
#
      DO 111 K=1,6
      DO 111 J=1,N4000
  111 TEMP(K,J)=TCF(K,J)+TCFN(K,J) 
      ABSFAKEI=0.0 
      IFAKE=0            :
#                                                                       
#     INITIAL DIRECTION COSINES                                         
#                                                                       
      DCZ1=DCOS(THETA)                                                  
      DCX1=DSIN(THETA)*DCOS(PHI)                                        
      DCY1=DSIN(THETA)*DSIN(PHI)                                        
#                                                                       
      BP=EFIELD*EFIELD*CONST1                                           
      F1=EFIELD*CONST2                                                  
      F2=EFIELD*CONST3                                                  
      F4=2.00*DACOS(-1.00)                                            
      J2M=NMAX/ITMAX 
# MAIN LOOP                                                             
      DO 210 J1=1,ITMAX                                                 
      DO 133 J2=1,J2M
    1 R1=drand48(RDUM) 
      T=-math.log(R1)/TCFMX+TDASH                         
      TDASH=T                                                           
      AP=DCZ1*F2*math.sqrt(E1)                                              
      E=E1+(AP+BP*T)*T  
# CALCULATE DIRECTION COSINES BEFORE COLLISION                     
      CONST6=math.sqrt(E1/E)
      DCX2=DCX1*CONST6
      DCY2=DCY1*CONST6
      DCZ2=DCZ1*CONST6+EFIELD*T*CONST5/math.sqrt(E)
# FIND IDENTITY OF GAS FOR COLLISION 
      KGAS=0
      IF(NGAS == 1):
 :
       R2=drand48(RDUM)
       KGAS=1
       GO TO 4
      # endIF
      R2=drand48(RDUM)
    3 KGAS=KGAS+1  
      IF(TCFMXG(KGAS):
 < R2) GO TO 3
#   CALCULATE GAS VELOCITY VECTORS VGX,VGY,VGZ
    4 IMBPT=IMBPT+1
      IF(IMBPT > 6):
 :
       CALL GERJAN
       IMBPT=1
      # endIF
      VGX=VTMB[KGAS]*RNMX(IMBPT)               
      IMBPT=IMBPT+1
      VGY=VTMB[KGAS]*RNMX(IMBPT)              
      IMBPT=IMBPT+1
      VGZ=VTMB[KGAS]*RNMX(IMBPT)  
#  CALCULATE ELECTRON VELOCITY VECTORS VEX,VEY,VEZ
      VEX=DCX2*CONST9*math.sqrt(E)
      VEY=DCY2*CONST9*math.sqrt(E)
      VEZ=DCZ2*CONST9*math.sqrt(E)
# CALCULATE ENERGY WITH STATIONARY GAS TARGET, EOK
      EOK=((VEX-VGX)**2+(VEY-VGY)**2+(VEZ-VGZ)**2)/CONST10
      IE=DINT(EOK/ESTEP)+1                                        
      IE=DMIN0(IE,N4000)
#
#     TEST FOR #real OR NULL COLLISION 
#                                  
      R5=drand48(RDUM)                               
      TEST1=TCF(KGAS,IE)/TCFMAX(KGAS)
      IF(R5 <= TEST1):
 GO TO 137                                         
      NNULL=NNULL+1
      TEST2=TEMP(KGAS,IE)/TCFMAX(KGAS)
      IF(R5 < TEST2):
 :
# TEST FOR NULL LEVELS
       IF(NPLAST(KGAS):
 == 0) GO TO 1
       R2=drand48(RDUM)
       I=0
  888  I=I+1
       IF(CFN(KGAS,IE,I):
 < R2) GO TO 888
# INCREMENT NULL SCATTER SUM
       ICOLNN(KGAS,I)=ICOLNN(KGAS,I)+1
       GO TO 1
      # endIF                
      TEST3=(TEMP(KGAS,IE)+ABSFAKEI)/TCFMAX(KGAS)   
      IF(R5 < TEST3):
 :
# FAKE IONISATION INCREMENT COUNTER
       IFAKE=IFAKE+1:
       GO TO 1
      # endIF
      GO TO 1
  137 NCOL=NCOL+1
# CALCULATE DIRECTION COSINES OF ELECTRON IN O KELVIN FRAME 
      CONST11=1.00/(CONST9*math.sqrt(EOK))
      DXCOM=(VEX-VGX)*CONST11
      DYCOM=(VEY-VGY)*CONST11
      DZCOM=(VEZ-VGZ)*CONST11                                  
#                                                                       
#  CALCULATE  POSITIONS AT INSTANT BEFORE COLLISION
#    ALSO UPDATE DIFFUSION  AND ENERGY CALCULATIONS.                    
      T2=T*T                                                            
      IF(T >= TMAX1):
 TMAX1=T                                            
      TDASH=0.00                                                       
      A=AP*T                                                            
      B=BP*T2                                                           
      SUME2=SUME2+T*(E1+A/2.00+B/3.00)                                
      CONST7=CONST9*math.sqrt(E1)                                           
      A=T*CONST7                                                        
      CX1=DCX1*CONST7
      CY1=DCY1*CONST7                                                   
      X=X+DCX1*A                                                        
      Y=Y+DCY1*A                                                        
      Z=Z+DCZ1*A+T2*F1                                                  
      ST=ST+T                                                           
      IT=DINT(T+1.00)                                                 
      IT=DMIN0(IT,N300)                                               
      TIME(IT)=TIME(IT)+1.00 
# ENERGY SPECTRUM FOR O KELVIN FRAME
      SPEC(IE)=SPEC(IE)+1.00                                           
      WZ=Z/ST
      SUMVX=SUMVX+CX1*CX1*T2
      SUMVY=SUMVY+CY1*CY1*T2
      IF(ID == 0):
 GO TO 121
      KDUM=0
      DO 120 JDUM=1,NCORST
      ST2=ST2+T
      NCOLDM=NCOL+KDUM
      IF(NCOLDM > NCOLM):
 NCOLDM=NCOLDM-NCOLM 
      SDIF=ST-STO(NCOLDM)
      SUMXX=SUMXX+((X-XST(NCOLDM))**2)*T/SDIF
      SUMYY=SUMYY+((Y-YST(NCOLDM))**2)*T/SDIF  
      IF(J1 < 3):
 GO TO 120
      ST1=ST1+T 
      SUMZZ=SUMZZ+((Z-ZST(NCOLDM)-WZ*SDIF)**2)*T/SDIF 
  120 KDUM=KDUM+NCORLN                       
  121 XST(NCOL)=X
      YST(NCOL)=Y
      ZST(NCOL)=Z
      STO(NCOL)=ST  
      IF(NCOL >= NCOLM):
 :                                            
       ID=ID+1                                                          
       XID=DFLOAT(ID)                                                   
       NCOL=0  
      # endIF                                                           
# --------------------------------------------------------------------- 
#     DETERMINATION OF #real COLLISION TYPE                              
# --------------------------------------------------------------------- 
      R3=drand48(RDUM)
# FIND LOCATION WITHIN 4 UNITS IN COLLISION ARRAY      
      CALL SORTT(KGAS,I,R3,IE)
  140 I=I+1 
      IF(CF(KGAS,IE,I):
 < R3) GO TO 140         
      S1=RGAS(KGAS,I)                                                   
      EI=EIN(KGAS,I)                                                    
      IF(IPN(KGAS,I):
 <= 0) GO TO 666                                    
#  USE FLAT DISTRIBUTION OF  ELECTRON ENERGY BETWEEN E-EION AND 0.0 EV  
#  SAME AS IN BOLTZMANN                                                 
      R9=drand48(RDUM)
      EXTRA=R9*(EOK-EI)                                              
      EI=EXTRA+EI    
# IF AUGER OR FLUORESCENCE ADD EXTRA IONISATION COLLISIONS
      IEXTRA=IEXTRA+NC0(KGAS,I)                                      
#                                                                       
#  GENERATE SCATTERING ANGLES AND UPDATE  LABORATORY COSINES AFTER      
#   COLLISION ALSO UPDATE ENERGY OF ELECTRON.                           
#                                                                       
  666 IPT=IARRY(KGAS,I)                                                 
      ICOLL(KGAS,IPT)=ICOLL(KGAS,IPT)+1 
      ICOLN(KGAS,I)=ICOLN(KGAS,I)+1
      IF(EOK < EI):
 :
       EI=EOK-0.00010
      # endIF
# IF EXCITATION : ADD PROBABILITY ,PENFRA(1,I), OF TRANSFER TO 
# IONISATION OF THE OTHER GASES IN MIXTURE
      IF(IPEN == 0):
 GO TO 5 
      IF(PENFRA[KGAS,1,I] != 0.0):
 :
       RAN=drand48(RDUM)
       IF(RAN > PENFRA[KGAS,1,I]):
 GO TO 5
# ADD EXTRA IONISATION COLLISION
       IEXTRA=IEXTRA+1
      # endIF
    5 S2=(S1*S1)/(S1-1.00)  
#  ANISOTROPIC SCATTERING
      R3=drand48(RDUM)
      IF(INDEX(KGAS,I):
 == 1) :
       R31=drand48(RDUM)
       F3=1.00-R3*ANGCT(KGAS,IE,I) 
       IF(R31 > PSCT(KGAS,IE,I):
) F3=-F3
      elif(INDEX(KGAS,I) == 2) :
       EPSI=PSCT(KGAS,IE,I)
       F3=1.00-(2.00*R3*(1.00-EPSI)/(1.00+EPSI*(1.00-2.00*R3)))
      else:
# ISOTROPIC  SCATTERING                                        
       F3=1.00-2.00*R3 
      # endIF  
      THETA0=DACOS(F3)                                                  
      R4=drand48(RDUM)
      PHI0=F4*R4                                                        
      F8=DSIN(PHI0)                                                     
      F9=DCOS(PHI0)                                                     
      ARG1=1.00-S1*EI/EOK                                            
      ARG1=DMAX1(ARG1,SMALL)                                            
      D=1.00-F3*math.sqrt(ARG1)                                            
      E1=EOK*(1.00-EI/(S1*EOK)-2.00*D/S2)                         
      E1=DMAX1(E1,SMALL)                                                
      Q=math.sqrt((EOK/E1)*ARG1)/S1                                       
      Q=DMIN1(Q,1.00)                                                  
      THETA=DASIN(Q*DSIN(THETA0))                                       
      F6=DCOS(THETA)                                                    
      U=(S1-1.00)*(S1-1.00)/ARG1                                      
      CSQD=F3*F3                                                        
      IF(F3 < 0.00 and CSQD > U):
 F6=-1.00*F6                        
      F5=DSIN(THETA) 
      DZCOM=DMIN1(DZCOM,1.00)                                       
      ARGZ=math.sqrt(DXCOM*DXCOM+DYCOM*DYCOM) 
      IF(ARGZ == 0.00):
 :
       DCZ1=F6
       DCX1=F9*F5
       DCY1=F8*F5
       GO TO 130
      # endIF                                          
      DCZ1=DZCOM*F6+ARGZ*F5*F8                                         
      DCY1=DYCOM*F6+(F5/ARGZ)*(DXCOM*F9-DYCOM*DZCOM*F8)            
      DCX1=DXCOM*F6-(F5/ARGZ)*(DYCOM*F9+DXCOM*DZCOM*F8)
  130 CONTINUE 
# TRANSFORM VELOCITY VECTORS TO LAB FRAME
      CONST12=CONST9*math.sqrt(E1)
      VXLAB=DCX1*CONST12+VGX
      VYLAB=DCY1*CONST12+VGY
      VZLAB=DCZ1*CONST12+VGZ
# CALCULATE ENERGY AND DIRECTION COSINES IN LAB FRAME   
      E1=(VXLAB*VXLAB+VYLAB*VYLAB+VZLAB*VZLAB)/CONST10
      CONST11=1.00/(CONST9*math.sqrt(E1))
      DCX1=VXLAB*CONST11
      DCY1=VYLAB*CONST11
      DCZ1=VZLAB*CONST11  
  133 CONTINUE
#   ------------------------------------------  
      IF(J1 == 1):
 WRITE(6,201)                                         
  201 FORMAT(/,'    VEL      POS        TIME      ENERGY   COUNT   DIFXX
     /     DIFYY     DIFZZ',/)                  
      WZ=WZ*1.0D+09
      AVE=SUME2/ST
      DIFLN=0.00
      IF(NISO == 0):
 :
       DIFXX=5.0D+15*SUMVX/ST
       DIFYY=5.0D+15*SUMVY/ST 
       DFXXST(J1)=5.0D+15*(SUMVX-SVXOLD)/(ST-STOLD)
       DFYYST(J1)=5.0D+15*(SUMVY-SVYOLD)/(ST-STOLD)
      else:
       IF(ST2 != 0.00):
 :
        DIFYY=5.0D+15*SUMYY/ST2
        DIFXX=5.0D+15*SUMXX/ST2
        DFXXST(J1)=5.0D+15*(SUMXX-SXXOLD)/(ST2-ST2OLD)
        DFYYST(J1)=5.0D+15*(SUMYY-SYYOLD)/(ST2-ST2OLD) 
       else:
        DFXXST(J1)=0.00
        DFYYST(J1)=0.00
       # endIF
      # endIF   
      IF(ST1 != 0.00):
 :
       DIFZZ=5.0D+15*SUMZZ/ST1
       DFZZST(J1)=5.0D+15*(SUMZZ-SZZOLD)/(ST1-ST1OLD)
      else:
       DFZZST(J1)=0.00
      # endIF 
      WZST(J1)=(Z-ZOLD)/(ST-STOLD)*1.0D+09
      AVEST(J1)=(SUME2-SME2OLD)/(ST-STOLD)
      ZOLD=Z  
      STOLD=ST  
      ST1OLD=ST1
      ST2OLD=ST2
      SVXOLD=SUMVX
      SVYOLD=SUMVY
      SZZOLD=SUMZZ
      SXXOLD=SUMXX
      SYYOLD=SUMYY
      SME2OLD=SUME2 
      WRITE(6,202) WZ,Z,ST,AVE,ID,DIFXX,DIFYY,DIFZZ                     
  202 FORMAT(1X,F8.2,2(1X,D10.3),F9.4,1X,I5,1X,3(2X,F8.1)) 
# IF LAST ENERGY BIN IS HIGH INCREASE INTEGRATION ENERGY RANGE
      IF(SPEC(4000):
 > (1000.00*DFLOAT(J1))) :
       WRITE(6,50)
   50  FORMAT(' WARNING ENERGY OUT OF RANGE,INCREASE ELECTRON ENERGY INT
     /EGRATION RANGE ')
       STOP      
      # endIF
# LOOP                                                                 
  210 CONTINUE
# CALCULATE ERRORS AND CHECK AVERAGES
      TWZST=0.00  
      TAVE=0.00   
      T2WZST=0.00             
      T2AVE=0.00      
      TZZST=0.00    
      TYYST=0.00    
      TXXST=0.00   
      T2ZZST=0.00
      T2YYST=0.00
      T2XXST=0.00
      DO 790 K=1,10
      TWZST=TWZST+WZST(K)
      TAVE=TAVE+AVEST(K)
      T2WZST=T2WZST+WZST(K)*WZST(K)
      T2AVE=T2AVE+AVEST(K)*AVEST(K)
      TXXST=TXXST+DFXXST(K)
      TYYST=TYYST+DFYYST(K)  
      T2YYST=T2YYST+DFYYST(K)*DFYYST(K)
      T2XXST=T2XXST+DFXXST(K)*DFXXST(K)
      IF(K < 3):
 GO TO 790
      TZZST=TZZST+DFZZST(K)
      T2ZZST=T2ZZST+DFZZST(K)*DFZZST(K)         
  790 CONTINUE 
      DWZ=100.00*math.sqrt((T2WZST-TWZST*TWZST/10.00)/9.00)/WZ
      DEN=100.00*math.sqrt((T2AVE-TAVE*TAVE/10.00)/9.00)/AVE
      DXXER=100.00*math.sqrt((T2XXST-TXXST*TXXST/10.00)/9.00)/DIFXX
      DYYER=100.00*math.sqrt((T2YYST-TYYST*TYYST/10.00)/9.00)/DIFYY 
      DZZER=100.00*math.sqrt((T2ZZST-TZZST*TZZST/8.00)/7.00)/DIFZZ
      DWZ=DWZ/math.sqrt(10.00)
      DEN=DEN/math.sqrt(10.00)
      DXXER=DXXER/math.sqrt(10.00)
      DYYER=DYYER/math.sqrt(10.00)
      DZZER=DZZER/math.sqrt(8.00)
      DIFLN=DIFZZ
      DIFTR=(DIFXX+DIFYY)/2.00
#  CONVERT CM/SEC
      WZ=WZ*1.005
      DFLER=DZZER
      DFTER=(DXXER+DYYER)/2.00
# CALCULATE TOWNS# end COEFICIENTS AND ERRORS
      ANCATT=0.00
      ANCION=0.00
      DO 800 I=1,NGAS
      ANCATT=ANCATT+ICOLL(I,3)   
  800 ANCION=ANCION+ICOLL(I,2) 
      ANCION=ANCION+IEXTRA  
      ATTER=0.00
      IF(ANCATT == 0.00):
 GO TO 810
      ATTER=100.00*math.sqrt(ANCATT)/ANCATT 
  810 ATT=ANCATT/(ST*WZ)*1.0D12
      ALPER=0.00 
      IF(ANCION == 0.00):
 GO TO 820
      ALPER=100.00*math.sqrt(ANCION)/ANCION
  820 ALPHA=ANCION/(ST*WZ)*1.0D12  
      RETURN                                                            
      # end                                                               
      def OUTPUTT                                                :
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/E(4000),EROOT(4000),QTOT(4000),QREL(4000),QINEL(4000),
     /QEL(4000)                                                         
      COMMON/MIX1/QELM(4000),QSUM(4000),QION(6,4000),QIN1(250,4000),    
     /QIN2(250,4000),QIN3(250,4000),QIN4(250,4000),QIN5(250,4000),
     /QIN6(250,4000),QSATT(4000)             
      COMMON/RATIO/AN1,AN2,AN3,AN4,AN5,AN6,AN,FRAC(6)                 
      COMMON/DIFVEL/DIFLN,DIFTR
      COMMON/DIFERL/DFLER,DFTER
      COMMON/DIFLAB/DIFXX,DIFYY,DIFZZ,DIFYZ,DIFXY,DIFXZ
      COMMON/DIFERB/DXXER,DYYER,DZZER,DYZER,DXYER,DXZER
      COMMON/VEL/WX,WY,WZ
      COMMON/VELERR/DWX,DWY,DWZ
      COMMON/CTOWNS/ALPHA,ATT
      COMMON/CTWNER/ALPER,ATTER
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX  
      COMMON/BFLD/EOVB,WB,BTHETA,BMAG    
      COMMON/LARGET/CF(6,4000,290),EIN(6,290),TCF(6,4000),IARRY(6,290),
     /RGAS(6,290),IPN(6,290),WPL(6,290),LAST(6),ISIZE(6),PENFRA[6,3,290]
     /,TCFMAX(6)
      COMMON/OUTPTT/TIME(300),ICOLL(6,5),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(6,290),ICOLNN(6,10)              
      COMMON/SINT/SIMF(4000)                               
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9]           
      COMMON/NAMES/NAMEG(6)
      COMMON/SCRIPT/DSCRPT(6,300),DSCRPTN(6,10)
      CHARACTER*50 DSCRPT,DSCRPTN                                   
      CHARACTER*25 NAMEG
      WRITE(6,15)                                                       
      WRITE(6,15)                                                       
   15 FORMAT('----------------------------------------------------------
     /-------------------')
      N#real=NMAX                                                  
      WRITE(6,109) TMAX1,NNULL,N#real                                    
  109 FORMAT(/,2X,'CALCULATED MAX. COLLISION TIME =',F7.2,' PICOSECONDS.
     /',2(/),2X,'NUMBER OF NULL COLLISIONS =',I11,/,2X,'NUMBER OF #real C
     /OLLISIONS =',I11)
      WMNZ=WZ*1.0D-05 
      WMNY=WY*1.0D-05
      WMNX=WX*1.0D-05                                      
      WRITE(6,940) WMNZ,DWZ,WMNY,DWY,WMNX,DWX                           
  940 FORMAT(/,2X,'Z DRIFT VELOCITY =',E11.4,' MICRONS/NANOSECOND  +-',F
     /8.2,'% ',/,2X,'Y DRIFT VELOCITY =',E11.4,' MICRONS/NANOSECOND  +-'
     /,F8.2,'%',/,2X,'X DRIFT VELOCITY =',E11.4,' MICRONS/NANOSECOND  +-
     /',F8.2,'%',/) 
      IF(BMAG > 0.00 and (BTHETA > 0.00 and BTHETA < 180.00):
)
     /GO TO 800 
      DTOVMB=DIFTR*EFIELD/WZ                                            
      DTMN=math.sqrt(2.00*DIFTR/WZ)*10000.00 
      DFTER1=math.sqrt(DFTER**2+DWZ**2)
      DFTER2=DFTER1/2.0
      WRITE(6,954)                                  
      WRITE(6,950) DIFTR,DFTER,DTOVMB,DFTER1,DTMN,DFTER2                
  950 FORMAT(/,2X,'TRANSVERSE DIFFUSION   =',D11.4,' +-',F8.2,'%',/,10X,
     /'=',F9.4,' EV. +-',F8.2,'%',/,10X,'=',F9.3,' MICRONS/CENTIMETER**0
     /.5  +-',F8.2,'%',/)                     
      DLOVMB=DIFLN*EFIELD/WZ                                            
      DLMN=math.sqrt(2.00*DIFLN/WZ)*10000.00 
      DFLER1=math.sqrt(DFLER**2+DWZ**2)     
      DFLER2=DFLER1/2.0                               
      WRITE(6,992) DIFLN,DFLER,DLOVMB,DFLER1,DLMN,DFLER2                
  992 FORMAT(1/,2X,'LONGITUDINAL DIFFUSION =',D11.4,' +-',F8.1,'%',/,10X
     /,'=',F9.4,' EV. +-',F8.2,'%',/,10X,'=',F9.3,' MICRONS/CENTIMETER**
     /0.5  +-',F8.2,'%',/)                     
      GO TO 900
  800 WRITE(6,954) 
  954 FORMAT(/,10X,' DIFFUSION IN CM**2/SEC.',/)     
      WRITE(6,955) DIFXX,DIFYY,DIFZZ,DIFYZ,DIFXY,DIFXZ
  955 FORMAT(/,2X,'DIFFUSION TENSOR :',/,6X,' DIFXX =',D11.4,' DIFYY =',
     /D11.4,' DIFZZ =',D11.4,/,6X,' DIFYZ =',D11.4,' DIFXY =',D11.4,' DI
     /FXZ =',D11.4,/)
      WRITE(6,956) DXXER,DYYER,DZZER,DYZER,DXYER,DXZER
  956 FORMAT(/,2X,'ERROR ON DIFFUSION TENSOR :',/,6X,' DIFXX =',F8.2,'% 
     / DIFYY =',F8.2,'%  DIFZZ =',F8.2,'%',/,6X,' DIFYZ =',F8.2,'%  DIFX
     /Y =',F8.2,'%  DIFXZ =',F8.2,'%',/)
      IF(BTHETA == 90.):
 WRITE(6,957) DIFLN,DFLER,DIFTR,DFTER,DIFXX,DXXER
  957 FORMAT(/,8X,' LONGITUDINAL DIFFUSION =',D11.4,' +-',F8.2,'%',/,10X
     /,' TRANSVERSE DIFFUSION =',D11.4,' +-',F8.2,'%',/,2X,'TRANSVERSE D
     /IFFUSION (PARALLEL TO B-FIELD) DIFXX=',D11.4,' +-',F8.2,'%',/)
  900 WRITE(6,333) ALPHA,ALPER,ATT,ATTER                             
  333 FORMAT(2(/),'  IONISATION RATE /CM.=',E11.4,' +/-',F6.2,' PERCENT.
     /',/,'  ATTACHMENT RATE /CM.=',E11.4,' +/-',F6.2,' PERCENT.',2(/)) 
      WRITE(6,960) AVE,DEN             
  960 FORMAT(/,2X,'MEAN ELECTRON ENERGY =',F9.4,' EV. ERROR =  +-',F8.2,
     /'%',/)              
      RETURN                                                            
      # end
      def MONTEAT                                                :
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX
      COMMON/BFLD/EOVB,WB,BTHETA,BMAG                                   
      COMMON/LARGET/CF(6,4000,290),EIN(6,290),TCF(6,4000),IARRY(6,290),
     /RGAS(6,290),IPN(6,290),WPL(6,290),LAST(6),ISIZE(6),PENFRA[6,3,290]
     /,TCFMAX(6)
      COMMON/LARGENT/CFN(6,4000,10),TCFN(6,4000),SCLENUL(6,10),NPLAST(6)
      COMMON/DECOR/NCOLM,NCORLN,NCORST
      COMMON/ANIST/PSCT(6,4000,290),ANGCT(6,4000,290),INDEX(6,290),NISO 
      COMMON/IONFL/NC0(6,290),EC0(6,290),NG1(6,290),EG1(6,290),
     /NG2(6,290),EG2(6,290),WKLM(6,290),EFL(6,290)
      COMMON/DIFVEL/DIFLN,DIFTR
      COMMON/DIFERL/DFLER,DFTER
      COMMON/DIFLAB/DIFXX,DIFYY,DIFZZ,DIFYZ,DIFXY,DIFXZ
      COMMON/DIFERB/DXXER,DYYER,DZZER,DYZER,DXYER,DXZER
      COMMON/VEL/WX,WY,WZ                    
      COMMON/VELERR/DWX,DWY,DWZ
      COMMON/CTOWNS/ALPHA,ATT
      COMMON/CTWNER/ALPER,ATTER
      COMMON/THRM/AMGAS(6),VTMB[6],TCFMX,TCFMXG(6),ITHRM
      COMMON/OUTPTT/TIME(300),ICOLL(6,5),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(6,290),ICOLNN(6,10)     
      COMMON/RANM/RNMX(6)                   
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9]  
      DIMENSION XST(2000000),YST(2000000),ZST(2000000),STO(2000000) 
      DIMENSION WZST(10),AVEST(10)                          
      DIMENSION DFZZST(10),DFYYST(10),DFXXST(10),TEMP(6,4000)
# -------------------------------------------------------------------   
#   CALCULATES COLLISION EVENTS AND UPDATES DIFFUSION AND VELOCITY.  
#   USED WITH MAGNETIC FIELD , B , PARALLEL TO ELECTRIC FIELD IN THE
#   Z DIRECTION.
#   BACKGROUND GAS MOTION INCLUDED AT TEMP = AKT
# -------------------------------------------------------------------
      WX=0.00
      WY=0.00
      DWX=0.00
      DWY=0.00
      DIFYZ=0.00
      DIFXY=0.00
      DIFXZ=0.00
      DYZER=0.00
      DXYER=0.00
      DXZER=0.00
      X=0.00
      Y=0.00
      Z=0.00
      ST=0.00 
      ST1=0.00
      ST2=0.00
      SUME2=0.00
      SUMXX=0.00
      SUMYY=0.00
      SUMZZ=0.00
      SUMVX=0.00
      SUMVY=0.00
      ZOLD=0.00
      STOLD=0.00
      ST1OLD=0.00
      ST2OLD=0.00
      SZZOLD=0.00
      SXXOLD=0.00
      SYYOLD=0.00
      SVXOLD=0.00
      SVYOLD=0.00
      SME2OLD=0.00
      SMALL=1.0D-20                                                     
      TMAX1=0.00                                                       
      RDUM=RSTART                                                       
      E1=ESTART                                                         
      CONST9=CONST3*0.010 
      CONST10=CONST9*CONST9
      N4000=4000
      N300=300                                             
      ITMAX=10                                                          
      ID=0                                                              
      NCOL=0                                                            
      NNULL=0
      IEXTRA=0
# GENERATE INITIAL RANDOM NUMBERS FOR MAXWELL BOLTZMAN 
      CALL GERJAN
      IMBPT=0
      TDASH=0.00 
# 
      DO 111 K=1,6
      DO 111 J=1,N4000
  111 TEMP(K,J)=TCF(K,J)+TCFN(K,J)  
      ABSFAKEI=FAKEI
      IFAKE=0                                  :
#                                                                       
#     INITIAL DIRECTION COSINES                                         
#                                                                       
      DCZ1=DCOS(THETA)                                                  
      DCX1=DSIN(THETA)*DCOS(PHI)                                        
      DCY1=DSIN(THETA)*DSIN(PHI) 
# INITIAL VELOCITY
      VTOT=CONST9*math.sqrt(E1)
      CX1=DCX1*VTOT
      CY1=DCY1*VTOT
      CZ1=DCZ1*VTOT                                             
      BP=EFIELD*EFIELD*CONST1                                           
      F1=EFIELD*CONST2                                                  
      F2=EFIELD*CONST3
      F4=2.00*DACOS(-1.00)                                           
      J2M=NMAX/ITMAX                                                    
# MAIN LOOP                                                             
      DO 210 J1=1,ITMAX                                                 
      DO 133 J2=1,J2M                                                   
    1 R1=drand48(RDUM)  
      T=-math.log(R1)/TCFMX+TDASH                                          
      TDASH=T  
      AP=DCZ1*F2*math.sqrt(E1)                                              
      E=E1+(AP+BP*T)*T 
      WBT=WB*T
      COSWT=DCOS(WBT) 
      SINWT=DSIN(WBT)
      CONST6=math.sqrt(E1/E)
#  FIND IDENTITY OF GAS FOR COLLISION
      KGAS=0
      IF(NGAS == 1):
 :
       R2=drand48(RDUM)
       KGAS=1
       GO TO 4
      # endIF
      R2=drand48(RDUM)
    3 KGAS=KGAS+1
      IF(TCFMXG(KGAS):
 < R2) GO TO 3
# CALCULATE ELECTRON VELOCITY VECTORS BEFORE COLLISION
    4 CX2=CX1*COSWT-CY1*SINWT
      CY2=CY1*COSWT+CX1*SINWT
      VTOT=CONST9*math.sqrt(E) 
      CZ2=VTOT*(DCZ1*CONST6+EFIELD*T*CONST5/math.sqrt(E))  
# CALCULATE GAS VELOCITY VECTORS VGX,VGY,VGZ
      IMBPT=IMBPT+1
      IF(IMBPT > 6):
 :
       CALL GERJAN
       IMBPT=1
      # endIF   
      VGX=VTMB[KGAS]*RNMX(IMBPT)
      IMBPT=IMBPT+1
      VGY=VTMB[KGAS]*RNMX(IMBPT)
      IMBPT=IMBPT+1
      VGZ=VTMB[KGAS]*RNMX(IMBPT)
# CALCULATE ENERGY WITH STATIONARY GAS TARGET
      EOK=((CX2-VGX)**2+(CY2-VGY)**2+(CZ2-VGZ)**2)/CONST10              
      IE=DINT(EOK/ESTEP)+1                                            
      IE=DMIN0(IE,N4000)   
#                                           
#     TEST FOR #real OR NULL COLLISION
#                                   
      R5=drand48(RDUM)                                                
      TEST1=TCF(KGAS,IE)/TCFMAX(KGAS)                            
      IF(R5 <= TEST1):
 GO TO 137                                   
      NNULL=NNULL+1 
      TEST2=TEMP(KGAS,IE)/TCFMAX(KGAS)
      IF(R5 < TEST2):
 :
# TEST FOR NULL LEVELS
       IF(NPLAST(KGAS):
 == 0) GO TO 1
       R2=drand48(RDUM)
       I=0
  888  I=I+1
       IF(CFN(KGAS,IE,I):
 < R2) GO TO 888
# INCREMENT NULL SCATTER SUM
       ICOLNN(KGAS,I)=ICOLNN(KGAS,I)+1
       GO TO 1
      # endIF                                
      TEST3=(TEMP(KGAS,IE)+ABSFAKEI)/TCFMAX(KGAS)
      IF(R5 < TEST3):
 :
# FAKE IONISATION INCREMENT COUNTER
       IFAKE=IFAKE+1:
       GO TO 1
      # endIF 
      GO TO 1
  137 NCOL=NCOL+1                                                      
#  CALCULATE DIRECTION COSINES OF ELECTRON IN O KELVIN FRAME
      CONST11=1.00/(CONST9*math.sqrt(EOK))
      DXCOM=(CX2-VGX)*CONST11
      DYCOM=(CY2-VGY)*CONST11
      DZCOM=(CZ2-VGZ)*CONST11
#  CALCULATE POSITIONS AT INSTANT BEFORE COLLISION IN LAB FRAME
#    ALSO UPDATE DIFFUSION  AND ENERGY CALCULATIONS.                    
      T2=T*T                                                            
      IF(T >= TMAX1):
 TMAX1=T                                            
      TDASH=0.00
      A=AP*T                                                            
      B=BP*T2                                                           
      SUME2=SUME2+T*(E1+A/2.00+B/3.00)                                
      CONST7=CONST9*math.sqrt(E1)                                           
      A=T*CONST7                                                        
      DX=(CX1*SINWT-CY1*(1.00-COSWT))/WB
      X=X+DX                             
      DY=(CY1*SINWT+CX1*(1.00-COSWT))/WB                               
      Y=Y+DY 
#     IF(DCZ1 > 1.00) WRITE(6,9999) DCZ1
#9999 FORMAT(' DCZ1=',D12.3)                                          
      Z=Z+DCZ1*A+T2*F1                                                  
      ST=ST+T                                                           
      IT=DINT(T+1.00)                                              
      IT=DMIN0(IT,N300)                                                
      TIME(IT)=TIME(IT)+1.00
# ENERGY SPECTRUM IN O KELVIN FRAME
      SPEC(IE)=SPEC(IE)+1.00                                           
      WZ=Z/ST 
      SUMVX=SUMVX+DX*DX
      SUMVY=SUMVY+DY*DY  
      IF(ID == 0):
 GO TO 121                                             
      KDUM=0
      DO 120 JDUM=1,NCORST
      ST2=ST2+T
      NCOLDM=NCOL+KDUM
      IF(NCOLDM > NCOLM):
 NCOLDM=NCOLDM-NCOLM
      SDIF=ST-STO(NCOLDM)
      SUMXX=SUMXX+((X-XST(NCOLDM))**2)*T/SDIF
      SUMYY=SUMYY+((Y-YST(NCOLDM))**2)*T/SDIF
      IF(J1 < 3):
 GO TO 120                                             
      ST1=ST1+T                                                       
      SUMZZ=SUMZZ+((Z-ZST(NCOLDM)-WZ*SDIF)**2)*T/SDIF
  120 KDUM=KDUM+NCORLN                      
  121 XST(NCOL)=X
      YST(NCOL)=Y
      ZST(NCOL)=Z
      STO(NCOL)=ST  
      IF(NCOL >= NCOLM):
 :                                            
       ID=ID+1                                                          
       XID=DFLOAT(ID)                                                   
       NCOL=0
      # endIF                                                             
# --------------------------------------------------------------------- 
#     DETERMINATION OF #real COLLISION TYPE                              
# --------------------------------------------------------------------- 
      R2=drand48(RDUM) 
# FIND LOCATION WITHIN 4 UNITS IN COLLISION ARRAY                       
      CALL SORTT(KGAS,I,R2,IE)                                         
  140 I=I+1                                                             
      IF(CF(KGAS,IE,I):
 < R2) GO TO 140                                
      S1=RGAS(KGAS,I)                                                   
      EI=EIN(KGAS,I)                                                    
      IF(IPN(KGAS,I):
 <= 0) GO TO 666                                    
#  USE FLAT DISTRIBUTION OF  ELECTRON ENERGY BETWEEN E-EION AND 0.0 EV  
#  SAME AS IN BOLTZMANN                                                 
      R9=drand48(RDUM)
      EXTRA=R9*(EOK-EI)                                              
      EI=EXTRA+EI    
# IF FLUORESCENCE OR AUGER ADD EXTRA ELECTRONS
      IEXTRA=IEXTRA+NC0(KGAS,I)                                      
#                                                                       
#  GENERATE SCATTERING ANGLES AND UPDATE  LABORATORY COSINES AFTER      
#   COLLISION ALSO UPDATE ENERGY OF ELECTRON.                           
#                                                                       
  666 IPT=IARRY(KGAS,I)                                                 
      ICOLL(KGAS,IPT)=ICOLL(KGAS,IPT)+1 
      ICOLN(KGAS,I)=ICOLN(KGAS,I)+1
      IF(EOK < EI):
 :
       EI=EOK-0.00010
      # endIF
# IF EXCITATION : ADD PROBABLITY,PENFRAC(1,I),OF TRANSFER TO GIVE
# IONISATION OF THE OTHER GASES IN THE MIXTURE.
      IF(IPEN == 0):
 GO TO 5
      IF(PENFRA[KGAS,1,I] != 0.0):
 :
       RAN=drand48(RDUM)
       IF(RAN > PENFRA[KGAS,1,I]):
 GO TO 5
# ADD EXTRA IONISATION COLLISION
       IEXTRA=IEXTRA+1
      # endIF
    5 S2=(S1*S1)/(S1-1.00) 
# ANISOTROPIC SCATTERING 
      R3=drand48(RDUM)
      IF(INDEX(KGAS,I):
 == 1) :
       R31=drand48(RDUM)
       F3=1.00-R3*ANGCT(KGAS,IE,I)
       IF(R31 > PSCT(KGAS,IE,I):
) F3=-F3
      elif(INDEX(KGAS,I) == 2) :
       EPSI=PSCT(KGAS,IE,I)
       F3=1.00-(2.00*R3*(1.00-EPSI)/(1.00+EPSI*(1.00-2.00*R3)))
      else:
# ISOTROPIC SCATTERING 
       F3=1.00-2.00*R3
      # endIF
      THETA0=DACOS(F3)                                                  
      R4=drand48(RDUM) 
      PHI0=F4*R4
      F8=DSIN(PHI0)                                                    
      F9=DCOS(PHI0)                                                     
      ARG1=1.00-S1*EI/EOK                                            
      ARG1=DMAX1(ARG1,SMALL)                                            
      D=1.00-F3*math.sqrt(ARG1)                                            
      E1=EOK*(1.00-EI/(S1*EOK)-2.00*D/S2)                            
      E1=DMAX1(E1,SMALL)                                                
      Q=math.sqrt((EOK/E1)*ARG1)/S1                                        
      Q=DMIN1(Q,1.00)                                                  
      THETA=DASIN(Q*DSIN(THETA0))                                       
      F6=DCOS(THETA)                                                    
      U=(S1-1.00)*(S1-1.00)/ARG1                                      
      CSQD=F3*F3                                                        
      IF(F3 < 0.00 and CSQD > U):
 F6=-1.00*F6                        
      F5=DSIN(THETA)                                                    
      DZCOM=DMIN1(DZCOM,1.00)
      ARGZ=math.sqrt(DXCOM*DXCOM+DYCOM*DYCOM) 
      IF(ARGZ == 0.00):
 :
       DCZ1=F6
       DCX1=F9*F5
       DCY1=F8*F5
       GO TO 130
      # endIF                                          
      DCZ1=DZCOM*F6+ARGZ*F5*F8                                         
      DCY1=DYCOM*F6+(F5/ARGZ)*(DXCOM*F9-DYCOM*DZCOM*F8)               
      DCX1=DXCOM*F6-(F5/ARGZ)*(DYCOM*F9+DXCOM*DZCOM*F8)  
  130 CONTINUE            
# TRANSFORM VELOCITY VECTORS TO LAB FRAME
      VTOT=CONST9*math.sqrt(E1)
      CX1=DCX1*VTOT+VGX
      CY1=DCY1*VTOT+VGY
      CZ1=DCZ1*VTOT+VGZ
# CALCULATE ENERGY AND DIRECTION IN LAB FRAME
      E1=(CX1*CX1+CY1*CY1+CZ1*CZ1)/CONST10
      CONST11=1.00/(CONST9*math.sqrt(E1))
      DCX1=CX1*CONST11
      DCY1=CY1*CONST11
      DCZ1=CZ1*CONST11 
  133 CONTINUE                                                          
#   ------------------------------------------  
      IF(J1 == 1):
 WRITE(6,201)                                         
  201 FORMAT(/,'    VEL      POS        TIME      ENERGY   COUNT   DIFXX
     /     DIFYY     DIFZZ  ',/)
      WZ=WZ*1.0D+09
      AVE=SUME2/ST
      IF(NISO == 0):
 :
       DIFXX=5.0D+15*SUMVX/ST
       DIFYY=5.0D+15*SUMVY/ST
       DFXXST(J1)=5.0D+15*(SUMVX-SVXOLD)/(ST-STOLD)
       DFYYST(J1)=5.0D+15*(SUMVY-SVYOLD)/(ST-STOLD)
      else: 
       IF(ST2 != 0.00):
 :
        DIFYY=5.0D+15*SUMYY/ST2
        DIFXX=5.0D+15*SUMXX/ST2  
        DFXXST(J1)=5.0D+15*(SUMXX-SXXOLD)/(ST2-ST2OLD)
        DFYYST(J1)=5.0D+15*(SUMYY-SYYOLD)/(ST2-ST2OLD)
       else:
        DFXXST(J1)=0.00
        DFYYST(J1)=0.00 
       # endIF                                                  
      # endIF 
      IF(ST1 != 0.00):
 :
       DIFZZ=5.0D+15*SUMZZ/ST1
       DFZZST(J1)=5.0D+15*(SUMZZ-SZZOLD)/(ST1-ST1OLD)
      else:
       DFZZST(J1)=0.00
      # endIF
      WZST(J1)=(Z-ZOLD)/(ST-STOLD)*1.0D+09
      AVEST(J1)=(SUME2-SME2OLD)/(ST-STOLD)
      ZOLD=Z
      STOLD=ST
      ST1OLD=ST1
      ST2OLD=ST2
      SVXOLD=SUMVX
      SVYOLD=SUMVY
      SZZOLD=SUMZZ
      SXXOLD=SUMXX
      SYYOLD=SUMYY
      SME2OLD=SUME2                                              
      WRITE(6,202) WZ,Z,ST,AVE,ID,DIFXX,DIFYY,DIFZZ                
  202 FORMAT(1X,F8.2,2(1X,D10.3),F9.4,1X,I5,1X,3(2X,F8.1))              
# LOOP                                                                      
  210 CONTINUE  
# CALCULATE ERRORS AND CHECK AVERAGES   
      TWZST=0.00 
      TAVE=0.00   
      T2WZST=0.00    
      T2AVE=0.00     
      TZZST=0.00     
      TYYST=0.00     
      TXXST=0.00    
      T2ZZST=0.00
      T2YYST=0.00
      T2XXST=0.00
      DO 790 K=1,10
      TWZST=TWZST+WZST(K)
      TAVE=TAVE+AVEST(K)
      T2WZST=T2WZST+WZST(K)*WZST(K)
      T2AVE=T2AVE+AVEST(K)*AVEST(K)
      TXXST=TXXST+DFXXST(K)  
      TYYST=TYYST+DFYYST(K)  
      T2XXST=T2XXST+DFXXST(K)*DFXXST(K)
      T2YYST=T2YYST+DFYYST(K)*DFYYST(K)
      IF(K < 3):
 GO TO 790
      TZZST=TZZST+DFZZST(K)
      T2ZZST=T2ZZST+DFZZST(K)*DFZZST(K)    
  790 CONTINUE 
      DWZ=100.00*math.sqrt((T2WZST-TWZST*TWZST/10.00)/9.00)/WZ
      DEN=100.00*math.sqrt((T2AVE-TAVE*TAVE/10.00)/9.00)/AVE
      DXXER=100.00*math.sqrt((T2XXST-TXXST*TXXST/10.00)/9.00)/DIFXX
      DYYER=100.00*math.sqrt((T2YYST-TYYST*TYYST/10.00)/9.00)/DIFYY
      DZZER=100.00*math.sqrt((T2ZZST-TZZST*TZZST/8.00)/7.00)/DIFZZ 
      DWZ=DWZ/math.sqrt(10.00)
      DEN=DEN/math.sqrt(10.00)
      DXXER=DXXER/math.sqrt(10.00)
      DYYER=DYYER/math.sqrt(10.00)
      DZZER=DZZER/math.sqrt(8.00)
      DIFLN=DIFZZ
      DIFTR=(DIFXX+DIFYY)/2.00   
# CONVERT TO CM/SEC
      WZ=WZ*1.005
      DFLER=DZZER 
      DFTER=(DXXER+DYYER)/2.00 
# CALCULATE TOWNS# end COEFICIENTS AND ERRORS
      ANCATT=0.00
      ANCION=0.00
      DO 800 I=1,NGAS
      ANCATT=ANCATT+ICOLL(I,3)
  800 ANCION=ANCION+ICOLL(I,2)
      ANCION=ANCION+IEXTRA
      ATTER=0.0
      IF(ANCATT == 0.00):
 GO TO 810
      ATTER=100.0*math.sqrt(ANCATT)/ANCATT
  810 ATT=ANCATT/(ST*WZ)*1.0D12
      ALPER=0.0
      IF(ANCION == 0.00):
 GO TO 820
      ALPER=100.0*math.sqrt(ANCION)/ANCION
  820 ALPHA=ANCION/(ST*WZ)*1.0D12 
      RETURN                                                            
      # end                                                               
      def MONTEBT                                                :
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX
      COMMON/BFLD/EOVB,WB,BTHETA,BMAG                                   
      COMMON/LARGET/CF(6,4000,290),EIN(6,290),TCF(6,4000),IARRY(6,290),
     /RGAS(6,290),IPN(6,290),WPL(6,290),LAST(6),ISIZE(6),PENFRA[6,3,290]
     /,TCFMAX(6)
      COMMON/LARGENT/CFN(6,4000,10),TCFN(6,4000),SCLENUL(6,10),NPLAST(6)
      COMMON/ANIST/PSCT(6,4000,290),ANGCT(6,4000,290),INDEX(6,290),NISO
      COMMON/IONFL/NC0(6,290),EC0(6,290),NG1(6,290),EG1(6,290),
     /NG2(6,290),EG2(6,290),WKLM(6,290),EFL(6,290)
      COMMON/MIX2/ES(4000),EROOT(4000),QTOT(4000),QREL(4000),QINEL(4000)
     /,QEL(4000)      
      COMMON/DECOR/NCOLM,NCORLN,NCORST            
      COMMON/DIFLAB/DIFXX,DIFYY,DIFZZ,DIFYZ,DIFXY,DIFXZ
      COMMON/DIFERB/DXXER,DYYER,DZZER,DYZER,DXYER,DXZER 
      COMMON/DIFVEL/DIFLN,DIFTR
      COMMON/DIFERL/DFLER,DFTER
      COMMON/VEL/WX,WY,WZ
      COMMON/VELERR/DWX,DWY,DWZ
      COMMON/CTOWNS/ALPHA,ATT
      COMMON/CTWNER/ALPER,ATTER
      COMMON/THRM/AMGAS(6),VTMB[6],TCFMX,TCFMXG(6),ITHRM
      COMMON/OUTPTT/TIME(300),ICOLL(6,5),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(6,290),ICOLNN(6,10)
      COMMON/RANM/RNMX(6)
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9]            
      DIMENSION XST(1000000),YST(1000000),ZST(1000000),STO(1000000)
      DIMENSION WZST(10),WYST(10),AVEST(10)
      DIMENSION DFZZST(10),DFYYST(10),DFXXST(10)
      DIMENSION DFYZST(10),DFLNST(10),DFTRST(10),TEMP(6,4000)           
# -------------------------------------------------------------------   
#   CALCULATES COLLISION EVENTS AND UPDATES DIFFUSION AND VELOCITY. 
#   def HANDLES MAGNETIC FIELD AND ELECTRIC FIELD
#   BFIELD ALONG X-AXIS EFIELD ALONG Z-AXIS (90 DEGREES). 
#   BACKGROUND GAS MOTION INCLUDED AT TEMP = TEMPC  
# ------------------------------------------------------------------- 
      WX=0.00
      DWX=0.00
      DIFXZ=0.00
      DIFXY=0.00
      DXZER=0.00
      DXYER=0.00
      X=0.00
      Y=0.00
      Z=0.00 
      ST=0.00
      ST1=0.00
      ST2=0.00                                                         
      SUMXX=0.00 
      SUMYY=0.00                                                       
      SUMZZ=0.00
      SUMYZ=0.00
      SUMLS=0.00                                                       
      SUMTS=0.00
      SUMVX=0.00
      ZOLD=0.00
      YOLD=0.00
      STOLD=0.00
      ST1OLD=0.00
      ST2OLD=0.00
      SZZOLD=0.00
      SXXOLD=0.00
      SYYOLD=0.00
      SYZOLD=0.00
      SVXOLD=0.00
      SLNOLD=0.00
      STROLD=0.00
      EBAROLD=0.00
      SMALL=1.0D-20                                                     
      TMAX1=0.00  
      EF100=EFIELD*100.00
      RDUM=RSTART                                                       
      E1=ESTART    
      N4000=4000
      N300=300                                                     
      ITMAX=10 
      ID=0                                                              
      NCOL=0                                                            
      NNULL=0  
      IEXTRA=0
#
      DO 111 K=1,6
      DO 111 J=1,N4000
  111 TEMP(K,J)=TCF(K,J)+TCFN(K,J)
      ABSFAKEI=FAKEI
      IFAKE=0:
#
# GENERATE INITIAL RANDOM NUMBER FOR MAXWELL BOLTZMAN
      CALL GERJAN
      IMBTP=0
      TDASH=0.00 
      F4=2.00*DACOS(-1.00)
      CONST9=CONST3*0.010     
      CONST10=CONST9*CONST9                                         
#     INITIAL DIRECTION COSINES                                         
      DCZ1=DCOS(THETA)                                                  
      DCX1=DSIN(THETA)*DCOS(PHI)                                        
      DCY1=DSIN(THETA)*DSIN(PHI)                                        
#     INITIAL VELOCITY
      VTOT=CONST9*math.sqrt(E1)
      CX1=DCX1*VTOT                               
      CY1=DCY1*VTOT             
      CZ1=DCZ1*VTOT                                           
      J2M=NMAX/ITMAX                                                    
# MAIN LOOP 
      DO 210 J1=1,ITMAX                                                 
      DO 133 J2=1,J2M
    1 R1=drand48(RDUM) 
      T=-math.log(R1)/TCFMX+TDASH
      TDASH=T
      WBT=WB*T
      COSWT=DCOS(WBT)
      SINWT=DSIN(WBT)
      DZ=(CZ1*SINWT+(EOVB-CY1)*(1.00-COSWT))/WB
      E=E1+DZ*EF100 
# CALCULATE ELECTRON VELOCITY IN LAB FRAME
      CX2=CX1
      CY2=(CY1-EOVB)*COSWT+CZ1*SINWT+EOVB
      CZ2=CZ1*COSWT-(CY1-EOVB)*SINWT  
# FIND IDENTITY OF GAS FOR COLLISION
      KGAS=0
      IF(NGAS == 1):
 :
       R2=drand48(RDUM)
       KGAS=1
       GO TO 4
      # endIF
      R2=drand48(RDUM)
    3 KGAS=KGAS+1
      IF(TCFMXG(KGAS):
 < R2) GO TO 3 
# CALCULATE GAS VELOCITY VECTORS VGX,VGY,VGZ
    4 IMBPT=IMBPT+1
      IF(IMBPT > 6):
 :
       CALL GERJAN
       IMBPT=1
      # endIF
      VGX=VTMB[KGAS]*RNMX(IMBPT)
      IMBPT=IMBPT+1
      VGY=VTMB[KGAS]*RNMX(IMBPT)
      IMBPT=IMBPT+1
      VGZ=VTMB[KGAS]*RNMX(IMBPT)
# CALCULATE ENERGY WITH STATIONARY GAS TARGET,EOK
      EOK=((CX2-VGX)**2+(CY2-VGY)**2+(CZ2-VGZ)**2)/CONST10
      IE=DINT(EOK/ESTEP)+1                                             
      IE=DMIN0(IE,N4000)   
#                                                                       
#     TEST FOR #real OR NULL COLLISION  
#                                  
      R5=drand48(RDUM)                                                
      TEST1=TCF(KGAS,IE)/TCFMAX(KGAS)
      IF(R5 <= TEST1):
 GO TO 137                                         
      NNULL=NNULL+1   
      TEST2=TEMP(KGAS,IE)/TCFMAX(KGAS)
      IF(R5 < TEST2):
 :
# TEST FOR NULL LEVELS
       IF(NPLAST(KGAS):
 == 0) GO TO 1  
       R2=drand48(RDUM)
       I=0
  888  I=I+1
       IF(CFN(KGAS,IE,I):
 < R2) GO TO 888
# INCREMENT NULL SCATTER SUM
       ICOLNN(KGAS,I)=ICOLNN(KGAS,I)+1
       GO TO 1
      # endIF                                 
      TEST3=(TEMP(KGAS,IE)+ABSFAKEI)/TCFMAX(KGAS)
      IF(R5 < TEST3):
 :
# FAKE IONISATION INCREMENT COUNTER
       IFAKE=IFAKE+1:
       GO TO 1
      # endIF   
      GO TO 1     
  137 NCOL=NCOL+1
# CALCULATE DIRECTION COSINES OF ELECTRON IN 0 KELVIN FRAME
      CONST11=1.00/(CONST9*math.sqrt(EOK))
      DXCOM=(CX2-VGX)*CONST11
      DYCOM=(CY2-VGY)*CONST11
      DZCOM=(CZ2-VGZ)*CONST11                                           
#                                                                       
#  CALCULATE POSITIONS AT INSTANT BEFORE COLLISION
#    ALSO UPDATE DIFFUSION  AND ENERGY CALCULATIONS.                    
      T2=T*T
      IF(T >= TMAX1):
 TMAX1=T  
      TDASH=0.00                                          
# CALC NEW POSITION
      X=X+CX1*T
      Y=Y+EOVB*T+((CY1-EOVB)*SINWT+CZ1*(1.00-COSWT))/WB
      Z=Z+DZ                                   
      ST=ST+T                                                           
      IT=DINT(T+1.00)           
      IT=DMIN0(IT,N300)                                               
      TIME(IT)=TIME(IT)+1.00
# ENERGY SPECTRUM FOR O KELVIN FRAME  
      SPEC(IE)=SPEC(IE)+1.00                                           
      WZ=Z/ST
      WY=Y/ST
      SUMVX=SUMVX+CX1*CX1*T2                                  
      IF(ID == 0):
 GO TO 121
      KDUM=0
      DO 120 J=1,NCORST
      ST2=ST2+T
      NCOLDM=NCOL+KDUM
      IF(NCOLDM > NCOLM):
 NCOLDM=NCOLDM-NCOLM
      SDIF=ST-STO(NCOLDM)
      SUMXX=SUMXX+((X-XST(NCOLDM))**2)*T/SDIF 
      IF(J1 < 3):
 GO TO 120  
      ST1=ST1+T     
      SUMZZ=SUMZZ+((Z-ZST(NCOLDM)-WZ*SDIF)**2)*T/SDIF
      SUMYY=SUMYY+((Y-YST(NCOLDM)-WY*SDIF)**2)*T/SDIF               
      SUMYZ=SUMYZ+(Z-ZST(NCOLDM)-WZ*SDIF)*(Y-YST(NCOLDM)-WY*SDIF)*T/SDIF
      A2=(WZ*SDIF)**2+(WY*SDIF)**2
      B2=(Z-WZ*SDIF-ZST(NCOLDM))**2+(Y-WY*SDIF-YST(NCOLDM))**2 
      C2=(Z-ZST(NCOLDM))**2+(Y-YST(NCOLDM))**2
      DL2=(A2+B2-C2)**2/(4.00*A2)
      DT2=B2-DL2
      SUMLS=SUMLS+DL2*T/SDIF
      SUMTS=SUMTS+DT2*T/SDIF
 120  KDUM=KDUM+NCORLN   
 121  XST(NCOL)=X                                                       
      YST(NCOL)=Y                                                       
      ZST(NCOL)=Z                                                       
      STO(NCOL)=ST                                                      
      IF(NCOL >= NCOLM):
 :     
       ID=ID+1                                                          
       XID=DFLOAT(ID)                                                   
       NCOL=0 
      # endIF                                                            
# --------------------------------------------------------------------- 
#     DETERMINATION OF #real COLLISION TYPE                              
# --------------------------------------------------------------------- 
      R2=drand48(RDUM)
# FIND LOCATION WITHIN 4 UNITS IN COLLISION ARRAY                       
      CALL SORTT(KGAS,I,R2,IE)                                          
  140 I=I+1                                                             
      IF(CF(KGAS,IE,I):
 < R2) GO TO 140                                
      S1=RGAS(KGAS,I)                                                  
      EI=EIN(KGAS,I)
      IF(IPN(KGAS,I):
 <= 0) GO TO 666                                   
#  USE FLAT DISTRIBUTION OF  ELECTRON ENERGY BETWEEN E-EION AND 0.0 EV  
#  SAME AS IN BOLTZMANN                                                 
      R9=drand48(RDUM)
      EXTRA=R9*(EOK-EI)                                                 
      EI=EXTRA+EI   
# IF FLOUORESCENCE OR AUGER ADD EXTRA ELECTRONS
      IEXTRA=IEXTRA+NC0(KGAS,I)                                      
#                                                                       
#  GENERATE SCATTERING ANGLES AND UPDATE  LABORATORY COSINES AFTER      
#   COLLISION ALSO UPDATE ENERGY OF ELECTRON.                           
#                                                                       
  666 IPT=IARRY(KGAS,I)
      ICOLL(KGAS,IPT)=ICOLL(KGAS,IPT)+1
      ICOLN(KGAS,I)=ICOLN(KGAS,I)+1
      IF(EOK < EI):
 :
#  FIX ENERGY LOSS SMALLER THAN INCIDENT ENERGY IF ERROR OCCURS
       EI=EOK-0.00010
      # endIF
# IF EXCITATION : ADD PROBABILITY,PENFRAC(1,I), OF TRANSFER TO GIVE
# IONISATION OF THE OTHER GASES IN THE MIXTURE
      IF(IPEN == 0):
 GO TO 5
      IF(PENFRA[KGAS,1,I] != 0.0):
 :
       RAN=drand48(RDUM)
       IF(RAN > PENFRA[KGAS,1,I]):
 GO TO 5
# ADD EXTRA IONISATION COLLISION
       IEXTRA=IEXTRA+1
      # endIF
    5 S2=(S1*S1)/(S1-1.00) 
#  ANISOTROPIC SCATTERING
      R3=drand48(RDUM)
      IF(INDEX(KGAS,I):
 == 1) :
        R31=drand48(RDUM)
        F3=1.00-R3*ANGCT(KGAS,IE,I)
        IF(R31 > PSCT(KGAS,IE,I):
) F3=-F3
      elif(INDEX(KGAS,I) == 2) :
       EPSI=PSCT(KGAS,IE,I)
       F3=1.00-(2.00*R3*(1.00-EPSI)/(1.00+EPSI*(1.00-2.00*R3)))
      else:
# ISOTROPIC SCATTERING
        F3=1.00-2.00*R3
      # endIF
      THETA0=DACOS(F3)                                                  
      R4=drand48(RDUM)
      PHI0=F4*R4                                                        
      F8=DSIN(PHI0)                                                     
      F9=DCOS(PHI0)                                                     
      ARG1=1.00-S1*EI/EOK                                             
      ARG1=DMAX1(ARG1,SMALL)                                            
      D=1.00-F3*math.sqrt(ARG1)                                            
      E1=EOK*(1.00-EI/(S1*EOK)-2.00*D/S2)                             
      E1=DMAX1(E1,SMALL)                                                
      Q=math.sqrt((EOK/E1)*ARG1)/S1                                        
      Q=DMIN1(Q,1.00)                                                  
      THETA=DASIN(Q*DSIN(THETA0))                                       
      F6=DCOS(THETA)                                                    
      U=(S1-1.00)*(S1-1.00)/ARG1
      CSQD=F3*F3                                                        
      IF(F3 < 0.00 and CSQD > U):
 F6=-1.00*F6                        
      F5=DSIN(THETA)                                                    
      DZCOM=DMIN1(DZCOM,1.00)
      ARGZ=math.sqrt(DXCOM*DXCOM+DYCOM*DYCOM)
      IF(ARGZ == 0.00):
 :
       DCZ1=F6
       DCX1=F9*F5
       DCY1=F8*F5
       GO TO 130
      # endIF                                          
      DCZ1=DZCOM*F6+ARGZ*F5*F8                                         
      DCY1=DYCOM*F6+(F5/ARGZ)*(DXCOM*F9-DYCOM*DZCOM*F8)             
      DCX1=DXCOM*F6-(F5/ARGZ)*(DYCOM*F9+DXCOM*DZCOM*F8)
  130 CONTINUE
# TRANSFORM VELOCITY VECTORS TO LAB FRAME
      VTOT=CONST9*math.sqrt(E1)
      CX1=DCX1*VTOT+VGX
      CY1=DCY1*VTOT+VGY
      CZ1=DCZ1*VTOT+VGZ                     
# CALCULATE ENERGY AND DIRECTION COSINES IN LAB FRAME
      E1=(CX1*CX1+CY1*CY1+CZ1*CZ1)/CONST10
      CONST11=1.00/(CONST9*math.sqrt(E1))
      DCX1=CX1*CONST11
      DCY1=CY1*CONST11
      DCZ1=CZ1*CONST11                                                
  133 CONTINUE                                                          
#   ------------------------------------------  
      IF(J1 == 1):
 WRITE(6,201)                                         
  201 FORMAT(/,'   VELZ    VELY  ENERGY   ID  DIFXX   DIFYY   DIFZZ   DI
     /FYZ  DIFLNG  DIFTRN',/)       
      WZ=WZ*1.0D+09
      WY=WY*1.0D+09
      IF(ST2 != 0.00):
 DIFXX=5.0D+15*SUMXX/ST2
      IF(ST1 != 0.00):
 DIFYY=5.0D+15*SUMYY/ST1
      IF(ST1 != 0.00):
 DIFZZ=5.0D+15*SUMZZ/ST1
      IF(ST1 != 0.00):
 DIFYZ=-5.0D+15*SUMYZ/ST1
      IF(ST1 != 0.00):
 DIFLN=5.0D+15*SUMLS/ST1
      IF(ST1 != 0.00):
 DIFTR=5.0D+15*SUMTS/ST1
      IF(NISO == 0):
 DIFXX=5.0D+15*SUMVX/ST
      EBAR=0.00
      DO 300 IK=1,4000
      TCFSUM=0.00
      DO 299 KI=1,NGAS
  299 TCFSUM=TCFSUM+TCF(KI,IK)
  300 EBAR=EBAR+ES(IK)*SPEC(IK)/TCFSUM       
      AVE=EBAR/ST
      WZST(J1)=(Z-ZOLD)/(ST-STOLD)*1.0D+09
      WYST(J1)=(Y-YOLD)/(ST-STOLD)*1.0D+09
      AVEST(J1)=(EBAR-EBAROLD)/(ST-STOLD)
      EBAROLD=EBAR
      DFZZST(J1)=0.00
      DFYYST(J1)=0.00
      DFYZST(J1)=0.00
      DFLNST(J1)=0.00
      DFTRST(J1)=0.00
      IF(J1 > 2):
 : 
       DFZZST(J1)=5.0D+15*(SUMZZ-SZZOLD)/(ST1-ST1OLD)
       DFYYST(J1)=5.0D+15*(SUMYY-SYYOLD)/(ST1-ST1OLD)
       DFYZST(J1)=5.0D+15*(SUMYZ-SYZOLD)/(ST1-ST1OLD)
       DFLNST(J1)=5.0D+15*(SUMLS-SLNOLD)/(ST1-ST1OLD)
       DFTRST(J1)=5.0D+15*(SUMTS-STROLD)/(ST1-ST1OLD)
      # endIF
      DFXXST(J1)=5.0D+15*(SUMXX-SXXOLD)/(ST2-ST2OLD)
      IF(NISO == 0):
 DFXXST(J1)=5.0D+15*(SUMVX-SVXOLD)/(ST-STOLD)
      ZOLD=Z
      YOLD=Y
      STOLD=ST
      ST1OLD=ST1
      ST2OLD=ST2
      SVXOLD=SUMVX
      SZZOLD=SUMZZ
      SXXOLD=SUMXX
      SYYOLD=SUMYY
      SYZOLD=SUMYZ
      SLNOLD=SUMLS
      STROLD=SUMTS
      WRITE(6,202) WZ,WY,AVE,ID,DIFXX,DIFYY,DIFZZ,
     /DIFYZ,DIFLN,DIFTR                                                 
  202 FORMAT(2(F7.2,1X),F7.4,1X,I4,6(F7.1,1X))   
#  LOOP                                                                       
  210 CONTINUE
# CALCULATE ERRORS AND CHECK AVERAGES
      TWZST=0.00
      TWYST=0.00
      TAVE=0.00
      T2WZST=0.00
      T2WYST=0.00
      T2AVE=0.00
      TZZST=0.00
      TYYST=0.00
      TXXST=0.00
      TYZST=0.00
      TLNST=0.00
      TTRST=0.00
      T2ZZST=0.00
      T2YYST=0.00
      T2XXST=0.00
      T2YZST=0.00
      T2LNST=0.00
      T2TRST=0.00
      DO 790 K=1,10
      TWZST=TWZST+WZST(K)
      TWYST=TWYST+WYST(K)
      TAVE=TAVE+AVEST(K)
      T2WZST=T2WZST+WZST(K)*WZST(K)
      T2WYST=T2WYST+WYST(K)*WYST(K)
      T2AVE=T2AVE+AVEST(K)*AVEST(K)
      TXXST=TXXST+DFXXST(K)
      T2XXST=T2XXST+DFXXST(K)*DFXXST(K)
      IF(K < 3):
 GO TO 790
      TZZST=TZZST+DFZZST(K)
      TYYST=TYYST+DFYYST(K)
      TYZST=TYZST+DFYZST(K)
      TLNST=TLNST+DFLNST(K)
      TTRST=TTRST+DFTRST(K)
      T2ZZST=T2ZZST+DFZZST(K)*DFZZST(K)    
      T2YYST=T2YYST+DFYYST(K)*DFYYST(K)     
      T2YZST=T2YZST+DFYZST(K)*DFYZST(K)     
      T2LNST=T2LNST+DFLNST(K)*DFLNST(K)    
      T2TRST=T2TRST+DFTRST(K)*DFTRST(K)       
  790 CONTINUE 
      DWZ=100.00*math.sqrt((T2WZST-TWZST*TWZST/10.00)/9.00)/WZ
      DWY=100.00*math.sqrt((T2WYST-TWYST*TWYST/10.00)/9.00)/abs(WY)
      DEN=100.00*math.sqrt((T2AVE-TAVE*TAVE/10.00)/9.00)/AVE
      DXXER=100.00*math.sqrt((T2XXST-TXXST*TXXST/10.00)/9.00)/DIFXX  
      DYYER=100.00*math.sqrt((T2YYST-TYYST*TYYST/8.00)/7.00)/DIFYY       
      DZZER=100.00*math.sqrt((T2ZZST-TZZST*TZZST/8.00)/7.00)/DIFZZ    
      DYZER=100.00*math.sqrt((T2YZST-TYZST*TYZST/8.00)/7.00)/abs(DIFYZ)
      DFLER=100.00*math.sqrt((T2LNST-TLNST*TLNST/8.00)/7.00)/DIFLN
      DFTER=100.00*math.sqrt((T2TRST-TTRST*TTRST/8.00)/7.00)/DIFTR 
      DWZ=DWZ/math.sqrt(10.00)
      DWY=DWY/math.sqrt(10.00)
      DEN=DEN/math.sqrt(10.00)
      DXXER=DXXER/math.sqrt(10.00)
      DYYER=DYYER/math.sqrt(8.00)
      DZZER=DZZER/math.sqrt(8.00)
      DYZER=DYZER/math.sqrt(8.00)
      DFLER=DFLER/math.sqrt(8.00)
      DFTER=DFTER/math.sqrt(8.00)
# CONVERT TO CM/SEC      
      WZ=WZ*1.005
      WY=WY*1.005
# CALCULATE TOWNS# end COEFICIENTS AND ERRORS
      ANCATT=0.00
      ANCION=0.00
      DO 800 I=1,NGAS
      ANCATT=ANCATT+ICOLL(I,3)
  800 ANCION=ANCION+ICOLL(I,2)
      ANCION=ANCION+IEXTRA
      ATTER=0.00
      IF(ANCATT == 0.00):
 GO TO 810
      ATTER=100.00*math.sqrt(ANCATT)/ANCATT
  810 ATT=ANCATT/(ST*WZ)*1.0D12
      ALPER=0.00
      IF(ANCION == 0.00):
 GO TO 820
      ALPER=100.00*math.sqrt(ANCION)/ANCION
  820 ALPHA=ANCION/(ST*WZ)*1.0D12 
      RETURN                                                            
      # end 
      def MONTECT                                                :
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX
      COMMON/BFLD/EOVB,WB,BTHETA,BMAG                                   
      COMMON/LARGET/CF(6,4000,290),EIN(6,290),TCF(6,4000),IARRY(6,290),
     /RGAS(6,290),IPN(6,290),WPL(6,290),LAST(6),ISIZE(6),PENFRA[6,3,290]
     /,TCFMAX(6)
      COMMON/LARGENT/CFN(6,4000,10),TCFN(6,4000),SCLENUL(6,10),NPLAST(6)
      COMMON/ANIST/PSCT(6,4000,290),ANGCT(6,4000,290),INDEX(6,290),NISO
      COMMON/IONFL/NC0(6,290),EC0(6,290),NG1(6,290),EG1(6,290),
     /NG2(6,290),EG2(6,290),WKLM(6,290),EFL(6,290)
      COMMON/MIX2/ES(4000),EROOT(4000),QTOT(4000),QREL(4000),QINEL(4000)
     /,QEL(4000)
      COMMON/DECOR/NCOLM,NCORLN,NCORST                        
      COMMON/DIFLAB/DIFXX,DIFYY,DIFZZ,DIFYZ,DIFXY,DIFXZ 
      COMMON/DIFERB/DXXER,DYYER,DZZER,DYZER,DXYER,DXZER
      COMMON/DIFVEL/DIFLN,DIFTR
      COMMON/DIFERL/DFLER,DFTER
      COMMON/VEL/WX,WY,WZ            
      COMMON/VELERR/DWX,DWY,DWZ
      COMMON/CTOWNS/ALPHA,ATT 
      COMMON/CTWNER/ALPER,ATTER   
      COMMON/THRM/AMGAS(6),VTMB[6],TCFMX,TCFMXG(6),ITHRM
      COMMON/OUTPTT/TIME(300),ICOLL(6,5),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(6,290),ICOLNN(6,10)
      COMMON/RANM/RNMX(6)  
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9]             
      DIMENSION XST(2000000),YST(2000000),ZST(2000000),STO(2000000)
      DIMENSION WZST(10),WYST(10),WXST(10),AVEST(10)
      DIMENSION DFZZST(10),DFYYST(10),DFXXST(10) 
      DIMENSION DFYZST(10),DFXYST(10),DFXZST(10),TEMP(6,4000)
# -------------------------------------------------------------------   
#   CALCULATES COLLISION EVENTS AND UPDATES DIFFUSION AND VELOCITY. 
#   def SOLVES MOTION IN COORDINATE SYSTEM WITH BFIELD
#   ALIGNED ALONG X AXIS AND ELECTRIC FIELD AT AN ANGLE BTHETA IN
#   THE X-Z PLANE.  THE VELOCITY VECTORS AND DIFFUSION ARE :
#   ROTATED INTO THE STANDARD COORDINATE FRAME WITH THE ELECTRIC-
#   FIELD ALONG Z-AXIS AND THE  BFIELD AT AN ANGLE BTHETA TO THE 
#   ELECTRIC FIELD IN THE X-Z PLANE.
#   BACKGROUND GAS MOTION INCLUDED AT TEMP = TEMPC
# -------------------------------------------------------------------
      X=0.00
      Y=0.00
      Z=0.00 
# CALC LONG AND TRANS ONLY FOR 90 DEGREES BETWEEN E AND B      
      DIFLN=0.00
      DIFTR=0.00
      DFLER=0.00
      DFTER=0.00
      DIFXXR=0.00
      DIFYYR=0.00
      DIFZZR=0.00
      DIFYZR=0.00
      DIFXZR=0.00
      DIFXYR=0.00
      ST=0.00
      ST1=0.00
      SUMXX=0.00 
      SUMYY=0.00                                                       
      SUMZZ=0.00
      SUMYZ=0.00
      SUMXY=0.00
      SUMXZ=0.00
      ZROLD=0.00
      YROLD=0.00
      XROLD=0.00
      SZZR=0.00
      SYYR=0.00
      SXXR=0.00
      SXYR=0.00
      SYZR=0.00
      SXZR=0.00
      STOLD=0.00
      ST1OLD=0.00
      ST2OLD=0.00
      SZZOLD=0.00
      SYYOLD=0.00
      SXXOLD=0.00
      SYZOLD=0.00
      SXYOLD=0.00
      SXZOLD=0.00
      EBAROLD=0.00
      SMALL=1.0D-20                                                     
      TMAX1=0.00
      API=DACOS(-1.00)
# CALC ROTATION MATRIX ANGLES
      RCS=DCOS((BTHETA-90.00)*API/180.00)  
      RSN=DSIN((BTHETA-90.00)*API/180.00)
#            
      RTHETA=BTHETA*API/180.00  
      EFZ100=EFIELD*100.00*DSIN(RTHETA)
      EFX100=EFIELD*100.00*DCOS(RTHETA)
      F1=EFIELD*CONST2*DCOS(RTHETA)
      F4=2.00*API
      CONST9=CONST3*0.010                        
      CONST10=CONST9*CONST9                      
      EOVBR=EOVB*DSIN(RTHETA)
      RDUM=RSTART                                                       
      E1=ESTART    
      N4000=4000
      N300=300                                                     
      ITMAX=10 
      ID=0                                                              
      NCOL=0                                                            
      NNULL=0    
      IEXTRA=0             
# GENERATE INITIAL RANDOM NUMBER FOR MAXWELL BOLTZMAN 
      CALL GERJAN
      IMBPT=0
      TDASH=0.00 
#
      DO 111 K=1,6
      DO 111 J=1,N4000
  111 TEMP(K,J)=TCF(K,J)+TCFN(K,J)
      ABSFAKEI=FAKEI
      IFAKE=0:
#
#                                                                       
#     INITIAL DIRECTION COSINES                                         
#                                                                       
      DCZ1=DCOS(THETA)                                                  
      DCX1=DSIN(THETA)*DCOS(PHI)                                        
      DCY1=DSIN(THETA)*DSIN(PHI)                                        
#     INITIAL VELOCITY
      VTOT=CONST9*math.sqrt(E1)
      CX1=DCX1*VTOT                               
      CY1=DCY1*VTOT             
      CZ1=DCZ1*VTOT                                           
      J2M=NMAX/ITMAX                                                    
# MAIN LOOP 
      DO 210 J1=1,ITMAX                                                 
      DO 133 J2=1,J2M
    1 R1=drand48(RDUM) 
      T=-math.log(R1)/TCFMX+TDASH                                           
      TDASH=T                                                           
      WBT=WB*T
      COSWT=DCOS(WBT)
      SINWT=DSIN(WBT)
      DZ=(CZ1*SINWT+(EOVBR-CY1)*(1.00-COSWT))/WB
      DX=CX1*T+F1*T*T
      E=E1+DZ*EFZ100+DX*EFX100 
# CALCULATE ELECTRON VELOCITY IN LAB FRAME
      CX2=CX1+2.00*F1*T
      CY2=(CY1-EOVBR)*COSWT+CZ1*SINWT+EOVBR
      CZ2=CZ1*COSWT-(CY1-EOVBR)*SINWT
# FIND IDENTITY OF GAS FOR COLLISION
      KGAS=0
      IF(NGAS == 1):
 :
       R2=drand48(RDUM)
       KGAS=1
       GO TO 4
      # endIF
      R2=drand48(RDUM)
    3 KGAS=KGAS+1
      IF(TCFMXG(KGAS):
 < R2) GO TO 3
#  CALCULATE GAS VELOCITY VECTORS VGX,VGY,VGZ
    4 IMBPT=IMBPT+1
      IF(IMBPT > 6):
 :
       CALL GERJAN
       IMBPT=1
      # endIF  
      VGX=VTMB[KGAS]*RNMX(IMBPT)
      IMBPT=IMBPT+1
      VGY=VTMB[KGAS]*RNMX(IMBPT)
      IMBPT=IMBPT+1
      VGZ=VTMB[KGAS]*RNMX(IMBPT)
# CALCULATE ENERGY WITH STATIONARY GAS TARGET,EOK
      EOK=((CX2-VGX)**2+(CY2-VGY)**2+(CZ2-VGZ)**2)/CONST10
      IE=DINT(EOK/ESTEP)+1                                             
      IE=DMIN0(IE,N4000)                                               
#                                                                       
#     TEST FOR #real OR NULL COLLISION     
#      
      R5=drand48(RDUM)                                                  
      TEST1=TCF(KGAS,IE)/TCFMAX(KGAS)            
      IF(R5 <= TEST1):
 GO TO 137                                        
      NNULL=NNULL+1 
      TEST2=TEMP(KGAS,IE)/TCFMAX(KGAS)
      IF(R5 < TEST2):
 :
# TEST FOR NULL LEVELS
       IF(NPLAST(KGAS):
 == 0) GO TO 1
       R2=drand48(RDUM)
       I=0
  888  I=I+1
       IF(CFN(KGAS,IE,I):
 < R2) GO TO 888
# INCREMENT NULL SCATTER SUM
       ICOLNN(KGAS,I)=ICOLNN(KGAS,I)+1
       GO TO 1
      # endIF                              
      TEST3=(TEMP(KGAS,IE)+ABSFAKEI)/TCFMAX(KGAS)
      IF(R5 < TEST3):
 :
# FAKE IONISATION INCREMENT COUNTER
       IFAKE=IFAKE+1:
       GO TO 1
      # endIF
      GO TO 1                      
  137 NCOL=NCOL+1                                                     
# CALCULATE DIRECTION COSINES OF ELECTRON IN 0 KELVIN FRAME
      CONST11=1.00/(CONST9*math.sqrt(EOK))
#     VTOT=1.00/CONST11
      DXCOM=(CX2-VGX)*CONST11
      DYCOM=(CY2-VGY)*CONST11
      DZCOM=(CZ2-VGZ)*CONST11                                         
#  CALCULATE POSITIONS AT INSTANT BEFORE COLLISION
#    ALSO UPDATE DIFFUSION  AND ENERGY CALCULATIONS.                    
      T2=T*T
      IF(T >= TMAX1):
 TMAX1=T                                            
      TDASH=0.00                                                       
# CALC NEW POSITION
      X=X+DX    
      Y=Y+EOVBR*T+((CY1-EOVBR)*SINWT+CZ1*(1.00-COSWT))/WB
      Z=Z+DZ                                   
      ST=ST+T                                                           
      IT=DINT(T+1.00)                                               
      IT=DMIN0(IT,N300)                                               
      TIME(IT)=TIME(IT)+1.00  
# ENERGY SPECTRUM FOR  0 KELVIN FRAME
      SPEC(IE)=SPEC(IE)+1.00                                           
      WZ=Z/ST
      WY=Y/ST
      WX=X/ST
      IF(J1 < 3):
 GO TO 121
      KDUM=0
      DO 120 J=1,NCORST
      NCOLDM=NCOL+KDUM
      IF(NCOLDM > NCOLM):
 NCOLDM=NCOLDM-NCOLM
      ST1=ST1+T     
      SDIF=ST-STO(NCOLDM)                                               
      SUMZZ=SUMZZ+((Z-ZST(NCOLDM)-WZ*SDIF)**2)*T/SDIF
      SUMYY=SUMYY+((Y-YST(NCOLDM)-WY*SDIF)**2)*T/SDIF
      SUMXX=SUMXX+((X-XST(NCOLDM)-WX*SDIF)**2)*T/SDIF               
      SUMYZ=SUMYZ+(Z-ZST(NCOLDM)-WZ*SDIF)*(Y-YST(NCOLDM)-WY*SDIF)*T/SDIF
      SUMXY=SUMXY+(X-XST(NCOLDM)-WX*SDIF)*(Y-YST(NCOLDM)-WY*SDIF)*T/SDIF
      SUMXZ=SUMXZ+(X-XST(NCOLDM)-WX*SDIF)*(Z-ZST(NCOLDM)-WZ*SDIF)*T/SDIF
 120  KDUM=KDUM+NCORLN   
 121  XST(NCOL)=X                                                       
      YST(NCOL)=Y                                                       
      ZST(NCOL)=Z                                                       
      STO(NCOL)=ST                                                      
      IF(NCOL >= NCOLM):
 :      
       ID=ID+1                                                          
       XID=DFLOAT(ID)                                                   
       NCOL=0  
      # endIF                                                           
# --------------------------------------------------------------------- 
#     DETERMINATION OF #real COLLISION TYPE                              
# --------------------------------------------------------------------- 
      R2=drand48(RDUM) 
# FIND LOCATION WITHIN 4 UNITS IN COLLISION ARRAY       
      CALL SORTT(KGAS,I,R2,IE)                                          
  140 I=I+1                                                             
      IF(CF(KGAS,IE,I):
 < R2) GO TO 140                               
      S1=RGAS(KGAS,I)                                                  
      EI=EIN(KGAS,I)
      IF(IPN(KGAS,I):
 <= 0) GO TO 666                                    
#  USE FLAT DISTRIBUTION OF  ELECTRON ENERGY BETWEEN E-EION AND 0.0 EV  
#  SAME AS IN BOLTZMANN                                                 
      R9=drand48(RDUM)  
      EXTRA=R9*(EOK-EI)                                               
      EI=EXTRA+EI                                 
# IF FLUORESCENCE OR AUGER ADD EXTRA ELECTRONS
      IEXTRA=IEXTRA+NC0(KGAS,I)
#                                                                       
#  GENERATE SCATTERING ANGLES AND UPDATE  LABORATORY COSINES AFTER      
#   COLLISION ALSO UPDATE ENERGY OF ELECTRON.                           
#                                                                       
  666 IPT=IARRY(KGAS,I)
      ICOLL(KGAS,IPT)=ICOLL(KGAS,IPT)+1
      ICOLN(KGAS,I)=ICOLN(KGAS,I)+1
      IF(EOK < EI):
 :
       EI=EOK-0.00010
      # endIF
# IF EXCITATION : ADD PROBABILITY, PENFRA(1,I), OF TRANSFER TO GIVE
# IONISATION OF THE OTHER GASES IN THE MIXTURE
      IF(IPEN == 0):
 GO TO 5
      IF(PENFRA[KGAS,1,I] != 0.0):
 :
       RAN=drand48(RDUM)
       IF(RAN > PENFRA[KGAS,1,I]):
 GO TO 5
# ADD EXTRA IONISATION COLLISION
       IEXTRA=IEXTRA+1
      # endIF
    5 S2=(S1*S1)/(S1-1.00)  
# ANISOTROPIC SCATTERING 
      R3=drand48(RDUM)
      IF(INDEX(KGAS,I):
 == 1) :
        R31=drand48(RDUM)
        F3=1.00-R3*ANGCT(KGAS,IE,I)
        IF(R31 > PSCT(KGAS,IE,I):
) F3=-F3
      elif(INDEX(KGAS,I) == 2) :
       EPSI=PSCT(KGAS,IE,I)
       F3=1.00-(2.00*R3*(1.00-EPSI)/(1.00+EPSI*(1.00-2.00*R3)))
      else:
# ISOTROPIC SCATTERING
        F3=1.00-2.00*R3
      # endIF
      THETA0=DACOS(F3)                                                  
      R4=drand48(RDUM)
      PHI0=F4*R4                                                        
      F8=DSIN(PHI0)                                                     
      F9=DCOS(PHI0)                                                     
      ARG1=1.00-S1*EI/EOK                                              
      ARG1=DMAX1(ARG1,SMALL)                                            
      D=1.00-F3*math.sqrt(ARG1)                                            
      E1=EOK*(1.00-EI/(S1*EOK)-2.00*D/S2)                            
      E1=DMAX1(E1,SMALL)                                                
      Q=math.sqrt((EOK/E1)*ARG1)/S1                                       
      Q=DMIN1(Q,1.00)                                                  
      THETA=DASIN(Q*DSIN(THETA0))                                       
      F6=DCOS(THETA)                                                    
      U=(S1-1.00)*(S1-1.00)/ARG1
      CSQD=F3*F3                                                        
      IF(F3 < 0.00 and CSQD > U):
 F6=-1.00*F6
      F5=DSIN(THETA)
      DZCOM=DMIN1(DZCOM,1.00)
      ARGZ=math.sqrt(DXCOM*DXCOM+DYCOM*DYCOM)
      IF(ARGZ == 0.00):
 :
       DCZ1=F6
       DCX1=F9*F5
       DCY1=F8*F5
       GO TO 130
      # endIF                                          
      DCZ1=DZCOM*F6+ARGZ*F5*F8                                          
      DCY1=DYCOM*F6+(F5/ARGZ)*(DXCOM*F9-DYCOM*DZCOM*F8)                 
      DCX1=DXCOM*F6-(F5/ARGZ)*(DYCOM*F9+DXCOM*DZCOM*F8)    
  130 CONTINUE            
# TRANSFORM VELOCITY VECTORS TO LAB FRAME  
      VTOT=CONST9*math.sqrt(E1)          
      CX1=DCX1*VTOT+VGX
      CY1=DCY1*VTOT+VGY
      CZ1=DCZ1*VTOT+VGZ
# CALCULATE ENERGY AND DIRECTION COSINES IN LAB FRAME
      E1=(CX1*CX1+CY1*CY1+CZ1*CZ1)/CONST10
      CONST11=1.00/(CONST9*math.sqrt(E1))
      DCX1=CX1*CONST11
      DCY1=CY1*CONST11
      DCZ1=CZ1*CONST11
  133 CONTINUE                                                          
#   ------------------------------------------  
      IF(J1 == 1):
 WRITE(6,201)                                         
  201 FORMAT(/,'   VELZ    VELY    VELX   ENERGY  ID  DIFXX  DIFYY  DIFZ
     /Z  DIFYZ  DIFXZ  DIFXY',/)
      WZ=WZ*1.0D+09
      WY=WY*1.0D+09
      WX=WX*1.0D+09
# CALCULATE ROTATED VECTORS AND POSITIONS
      WZR=WZ*RCS-WX*RSN
      WYR=WY
      WXR=WZ*RSN+WX*RCS
      ZR=Z*RCS-X*RSN
      YR=Y
      XR=Z*RSN+X*RCS
      EBAR=0.00
      DO 300 IK=1,4000
      TCFSUM=0.0
      DO 299 KI=1,NGAS
  299 TCFSUM=TCFSUM+TCF(KI,IK)
 300  EBAR=EBAR+ES(IK)*SPEC(IK)/TCFSUM      
      AVE=EBAR/ST
      WZST(J1)=(ZR-ZROLD)/(ST-STOLD)*1.0D+09
      WYST(J1)=(YR-YROLD)/(ST-STOLD)*1.0D+09
      WXST(J1)=(XR-XROLD)/(ST-STOLD)*1.0D+09
      AVEST(J1)=(EBAR-EBAROLD)/(ST-STOLD)
      EBAROLD=EBAR
      IF(J1 < 3):
 GO TO 100 
      DIFXX=5.0D+15*SUMXX/ST1
      DIFYY=5.0D+15*SUMYY/ST1
      DIFZZ=5.0D+15*SUMZZ/ST1
      DIFYZ=5.0D+15*SUMYZ/ST1
      DIFXZ=5.0D+15*SUMXZ/ST1
      DIFXY=5.0D+15*SUMXY/ST1
# CALCULATE  ROTATED TENSOR .
      DIFXXR=DIFXX*RCS*RCS+DIFZZ*RSN*RSN+2.00*RCS*RSN*DIFXZ
      DIFYYR=DIFYY
      DIFZZR=DIFXX*RSN*RSN+DIFZZ*RCS*RCS-2.00*RCS*RSN*DIFXZ
      DIFXYR=RCS*DIFXY+RSN*DIFYZ   
      DIFYZR=RSN*DIFXY-RCS*DIFYZ
      DIFXZR=(RCS*RCS-RSN*RSN)*DIFXZ-RSN*RCS*(DIFXX-DIFZZ)
      SXXR=SUMXX*RCS*RCS+SUMZZ*RSN*RSN+2.00*RCS*RSN*SUMXZ
      SYYR=SUMYY
      SZZR=SUMXX*RSN*RSN+SUMZZ*RCS*RCS-2.00*RCS*RSN*SUMXZ
      SXYR=RCS*SUMXY+RSN*SUMYZ
      SYZR=RSN*SUMXY-RCS*SUMYZ
      SXZR=(RCS*RCS-RSN*RSN)*SUMXZ-RSN*RCS*(SUMXX-SUMZZ)
# 
  100 DFZZST(J1)=0.00   
      DFYYST(J1)=0.00
      DFXXST(J1)=0.00
      DFXYST(J1)=0.00
      DFYZST(J1)=0.00
      DFXZST(J1)=0.00
      IF(J1 > 2):
 : 
       DFZZST(J1)=5.0D+15*(SZZR-SZZOLD)/(ST1-ST1OLD)
       DFYYST(J1)=5.0D+15*(SYYR-SYYOLD)/(ST1-ST1OLD)
       DFXXST(J1)=5.0D+15*(SXXR-SXXOLD)/(ST1-ST1OLD)
       DFXYST(J1)=5.0D+15*(SXYR-SXYOLD)/(ST1-ST1OLD)
       DFYZST(J1)=5.0D+15*(SYZR-SYZOLD)/(ST1-ST1OLD)
       DFXZST(J1)=5.0D+15*(SXZR-SXZOLD)/(ST1-ST1OLD)
      # endIF               
      ZROLD=ZR
      YROLD=YR
      XROLD=XR
      STOLD=ST
      ST1OLD=ST1
      SZZOLD=SZZR
      SYYOLD=SYYR
      SXXOLD=SXXR
      SXYOLD=SXYR
      SYZOLD=SYZR
      SXZOLD=SXZR
# OUTPUT ROTATED VECTORS AND TENSOR       
      WRITE(6,202) WZR,WYR,WXR,AVE,ID,DIFXXR,DIFYYR,DIFZZR,
     /DIFYZR,DIFXZR,DIFXYR                                             
  202 FORMAT(3(F7.2,1X),1X,F7.4,I4,6(F7.1))   
# LOOP                                                                      
  210 CONTINUE
# CALCULATE ERRORS AND CHECK AVERAGES
      TWZST=0.00
      TWYST=0.00
      TWXST=0.00
      TAVE=0.00
      T2WZST=0.00
      T2WYST=0.00
      T2WXST=0.00
      T2AVE=0.00
      TZZST=0.00
      TYYST=0.00
      TXXST=0.00
      TXYST=0.00
      TYZST=0.00
      TXZST=0.00
      T2ZZST=0.00
      T2YYST=0.00
      T2XXST=0.00
      T2XYST=0.00
      T2YZST=0.00
      T2XZST=0.00
      DO 790 K=1,10
      TWZST=TWZST+WZST(K)
      TWYST=TWYST+WYST(K)
      TWXST=TWXST+WXST(K)
      TAVE=TAVE+AVEST(K)
      T2WZST=T2WZST+WZST(K)*WZST(K)
      T2WYST=T2WYST+WYST(K)*WYST(K)
      T2WXST=T2WXST+WXST(K)*WXST(K)
      T2AVE=T2AVE+AVEST(K)*AVEST(K)
      IF(K < 3):
 GO TO 790
      TZZST=TZZST+DFZZST(K)
      TYYST=TYYST+DFYYST(K)
      TXXST=TXXST+DFXXST(K)
      TXYST=TXYST+DFXYST(K)
      TYZST=TYZST+DFYZST(K)
      TXZST=TXZST+DFXZST(K)  
      T2ZZST=T2ZZST+DFZZST(K)*DFZZST(K)
      T2YYST=T2YYST+DFYYST(K)*DFYYST(K)
      T2XXST=T2XXST+DFXXST(K)*DFXXST(K)    
      T2XYST=T2XYST+DFXYST(K)*DFXYST(K)
      T2YZST=T2YZST+DFYZST(K)*DFYZST(K)
      T2XZST=T2XZST+DFXZST(K)*DFXZST(K)
  790 CONTINUE
      DWZ=100.00*math.sqrt((T2WZST-TWZST*TWZST/10.00)/9.00)/WZR
      DWY=100.00*math.sqrt((T2WYST-TWYST*TWYST/10.00)/9.00)/abs(WYR)
      DWX=100.00*math.sqrt((T2WXST-TWXST*TWXST/10.00)/9.00)/abs(WXR) 
      DEN=100.00*math.sqrt((T2AVE-TAVE*TAVE/10.00)/9.00)/AVE
      DZZER=100.00*math.sqrt((T2ZZST-TZZST*TZZST/8.00)/7.00)/DIFZZR
      DYYER=100.00*math.sqrt((T2YYST-TYYST*TYYST/8.00)/7.00)/DIFYYR
      DXXER=100.00*math.sqrt((T2XXST-TXXST*TXXST/8.00)/7.00)/DIFXXR
      DXYER=100.00*math.sqrt((T2XYST-TXYST*TXYST/8.00)/7.00)/abs(DIFXYR)
      DYZER=100.00*math.sqrt((T2YZST-TYZST*TYZST/8.00)/7.00)/abs(DIFYZR)
      DXZER=100.00*math.sqrt((T2XZST-TXZST*TXZST/8.00)/7.00)/abs(DIFXZR)
      DWZ=DWZ/math.sqrt(10.00)
      DWY=DWY/math.sqrt(10.00)
      DWX=DWX/math.sqrt(10.00)
      DEN=DEN/math.sqrt(10.00)
      DZZER=DZZER/math.sqrt(8.00)
      DYYER=DYYER/math.sqrt(8.00)
      DXXER=DXXER/math.sqrt(8.00)
      DXYER=DXYER/math.sqrt(8.00)
      DYZER=DYZER/math.sqrt(8.00)
      DXZER=DXZER/math.sqrt(8.00)
# LOAD ROTATED VALUES INTO ARRAYS
      WZ=WZR
      WX=WXR
      WY=WYR
      DIFXX=DIFXXR
      DIFYY=DIFYYR
      DIFZZ=DIFZZR
      DIFYZ=DIFYZR
      DIFXZ=DIFXZR
      DIFXY=DIFXYR          
# CONVERT TO CM/SEC.
      WZ=WZ*1.005
      WY=WY*1.005
      WX=WX*1.005
# CALCULATE TOWNS# end COEFICIENTS AND ERRORS
      ANCATT=0.00
      ANCION=0.00
      DO 800 I=1,NGAS
      ANCATT=ANCATT+ICOLL(I,3)
  800 ANCION=ANCION+ICOLL(I,2)
      ANCION=ANCION+IEXTRA
      ATTER=0.00
      IF(ANCATT == 0.00):
 GO TO 810
      ATTER=100.00*math.sqrt(ANCATT)/ANCATT
  810 ATT=ANCATT/(ST*WZ)*1.0D12
      ALPER=0.00
      IF(ANCION == 0.00):
 GO TO 820
      ALPER=100.00*math.sqrt(ANCION)/ANCION
  820 ALPHA=ANCION/(ST*WZ)*1.0D12                
      RETURN                                                            
      # end 
      def ELIMITT(IELOW):                                         
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2             
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX  
      COMMON/THRM/AMGAS(6),VTMB[6],TCFMX,TCFMXG(6),ITHRM            
      COMMON/RANM/RNMX(6)                 
      COMMON/LARGET/CF(6,4000,290),EIN(6,290),TCF(6,4000),IARRY(6,290),
     /RGAS(6,290),IPN(6,290),WPL(6,290),LAST(6),ISIZE(6),PENFRA[6,3,290]
     /,TCFMAX(6)
      COMMON/ANIST/PSCT(6,4000,290),ANGCT(6,4000,290),INDEX(6,290),NISO 
# -------------------------------------------------------------------   
#   CALCULATES COLLISION EVENTS AND TESTS TO FIND IF THE UPPER ENERGY  
#   LIMIT FOR THE ELECTRON ENERGY IS EXCEEDED. 
#    IF ENERGY LIMIT IS OK       IELOW = 0
#    IF ENERGY LIMIT IS EXCEEDED IELOW = 1          
#   THE TEST IS CARRIED OUT FOR A SAMPLE OF COLLISIONS THAT ARE
#   SMALLER THAN THE FULL SAMPLE BY A FACTOR OF 1/ISAMP
#   
#   USED WITH MAGNETIC FIELD B =0.0   ELECTRIC FIELD IN Z DIRECTION.
# -------------------------------------------------------------------
      ISAMP=10
      SMALL=1.0D-20                                                     
      RDUM=RSTART                                                       
      E1=ESTART    
      N4000=4000                                                     
      TDASH=0.00    
      CONST9=CONST3*0.010
      CONST10=CONST9*CONST9    
# GENERATE RANDOM NUMBER FOR MAXWELL BOLTZMAN 
      CALL GERJAN
      IMBPT=0
#                                                                       
#     INITIAL DIRECTION COSINES                                         
#                                                                       
      DCZ1=DCOS(THETA)                                                  
      DCX1=DSIN(THETA)*DCOS(PHI)                                        
      DCY1=DSIN(THETA)*DSIN(PHI)                                        
#                                                                       
      BP=EFIELD*EFIELD*CONST1                                           
      F1=EFIELD*CONST2                                                  
      F2=EFIELD*CONST3                                                  
      F4=2.00*DACOS(-1.00)                                            
      J2M=NMAX/ISAMP 
# MAIN LOOP                                                             
      DO 210 J1=1,J2M  
    1 R1=drand48(RDUM)
      T=-math.log(R1)/TCFMX+TDASH                                          
      TDASH=T                                                           
      AP=DCZ1*F2*math.sqrt(E1)
      E=E1+(AP+BP*T)*T              
# CALCULATE DIRECTION COSINES BEFORE COLLISION
      CONST6=math.sqrt(E1/E)
      DCX2=DCX1*CONST6
      DCY2=DCY1*CONST6
      DCZ2=DCZ1*CONST6+EFIELD*T*CONST5/math.sqrt(E)       
# FIND IDENTITY OF GAS FOR COLLISION
      KGAS=0
      R2=drand48(RDUM)
    3 KGAS=KGAS+1
      IF(TCFMXG(KGAS):
 < R2) GO TO 3
# CALCULATE GAS VELOCITY VECTORS VGX,VGY,VGZ
      IMBPT=IMBPT+1
      IF(IMBPT > 6):
 :
       CALL GERJAN
       IMBPT=1
      # endIF
      VGX=VTMB[KGAS]*RNMX(IMBPT)
      IMBPT=IMBPT+1
      VGY=VTMB[KGAS]*RNMX(IMBPT)
      IMBPT=IMBPT+1
      VGZ=VTMB[KGAS]*RNMX(IMBPT)
# CALCULATE ELECTRON VELOCITY VECTORS VEX,VEY,VEZ
      VEX=DCX2*CONST9*math.sqrt(E)
      VEY=DCY2*CONST9*math.sqrt(E)
      VEZ=DCZ2*CONST9*math.sqrt(E)
# CALCULATE ENERGY WITH STATIONARY GAS TARGET ,EOK
      EOK=((VEX-VGX)**2+(VEY-VGY)**2+(VEZ-VGZ)**2)/CONST10
      IE=DINT(EOK/ESTEP)+1
      IE=DMIN0(IE,N4000) 
#                                                                       
#     TEST FOR #real OR NULL COLLISION                                   
#                                                                       
      R5=drand48(RDUM)
      TEST1=TCF(KGAS,IE)/TCFMAX(KGAS)                           
      IF(R5 > TEST1):
 GO TO 1                                           
#                                                                       
      IF(IE == 4000):
 :
# ELECTRON ENERGY OUT OF RANGE
       IELOW=1
       RETURN
      # endIF
      TDASH=0.00
#                                                                       
#  CALCULATE DIRECTION COSINES OF ELECTRON IN 0 KELVIN FRAME
#                       
      CONST11=1.00/(CONST9*math.sqrt(EOK))                                 
      DXCOM=(VEX-VGX)*CONST11                                           
      DYCOM=(VEY-VGY)*CONST11
      DZCOM=(VEZ-VGZ)*CONST11              
# --------------------------------------------------------------------- 
#     DETERMINATION OF #real COLLISION TYPE                              
# --------------------------------------------------------------------- 
      R2=drand48(RDUM)
# FIND LOCATION WITHIN 4 UNITS IN COLLISION ARRAY       
      CALL SORTT(KGAS,I,R2,IE)                                          
  140 I=I+1                                                             
      IF(CF(KGAS,IE,I):
 < R2) GO TO 140                               
      S1=RGAS(KGAS,I)                                                   
      EI=EIN(KGAS,I)                                                    
      IF(IPN(KGAS,I):
 <= 0) GO TO 666                                    
      R9=drand48(RDUM)
      EXTRA=R9*(EOK-EI)                                                
      EI=EXTRA+EI                                                       
#                                                                       
#  GENERATE SCATTERING ANGLES AND UPDATE  LABORATORY COSINES AFTER      
#   COLLISION ALSO UPDATE ENERGY OF ELECTRON.                           
#                        
  666 IPT=IARRY(KGAS,I)                                               
      IF(EOK < EI):
 :
       EI=EOK-0.00010
      # endIF
      S2=(S1*S1)/(S1-1.00)
      R3=drand48(RDUM)
      IF(INDEX(KGAS,I):
 == 1) :
       R31=drand48(RDUM)
       F3=1.00-R3*ANGCT(KGAS,IE,I)
       IF(R31 > PSCT(KGAS,IE,I):
)  F3=-F3
      elif(INDEX(KGAS,I) == 2) :
       EPSI=PSCT(KGAS,IE,I)
       F3=1.00-(2.00*R3*(1.00-EPSI)/(1.00+EPSI*(1.00-2.00*R3)))
      else:
       F3=1.00-2.00*R3
      # endIF
      THETA0=DACOS(F3)                                                  
      R4=drand48(RDUM) 
      PHI0=F4*R4                                                        
      F8=DSIN(PHI0)                                                     
      F9=DCOS(PHI0)                                                     
      ARG1=1.00-S1*EI/EOK                                              
      ARG1=DMAX1(ARG1,SMALL)                                            
      D=1.00-F3*math.sqrt(ARG1)                                            
      E1=EOK*(1.00-EI/(S1*EOK)-2.00*D/S2)                             
      E1=DMAX1(E1,SMALL)                                                
      Q=math.sqrt((EOK/E1)*ARG1)/S1                                         
      Q=DMIN1(Q,1.00)                                                  
      THETA=DASIN(Q*DSIN(THETA0))                                       
      F6=DCOS(THETA)                                                    
      U=(S1-1.00)*(S1-1.00)/ARG1                                      
      CSQD=F3*F3                                                        
      IF(F3 < 0.00 and CSQD > U):
 F6=-1.00*F6                        
      F5=DSIN(THETA) 
      DZCOM=DMIN1(DZCOM,1.00)                                         
      ARGZ=math.sqrt(DXCOM*DXCOM+DYCOM*DYCOM) 
      IF(ARGZ == 0.00):
 :
       DCZ1=F6
       DCX1=F9*F5
       DCY1=F8*F5
       GO TO 130
      # endIF                                          
      DCZ1=DZCOM*F6+ARGZ*F5*F8                                         
      DCY1=DYCOM*F6+(F5/ARGZ)*(DXCOM*F9-DYCOM*DZCOM*F8)                 
      DCX1=DXCOM*F6-(F5/ARGZ)*(DYCOM*F9+DXCOM*DZCOM*F8)
  130 CONTINUE
# TRANSFORM VELOCITY VECTORS TO LAB FRAME
      CONST12=CONST9*math.sqrt(E1)
      VXLAB=DCX1*CONST12+VGX
      VYLAB=DCY1*CONST12+VGY
      VZLAB=DCZ1*CONST12+VGZ
# CALCULATE ENERGY AND DIRECTION COSINES IN LAB FRAME
      E1=(VXLAB*VXLAB+VYLAB*VYLAB+VZLAB*VZLAB)/CONST10
      CONST11=1.00/(CONST9*math.sqrt(E1))
      DCX1=VXLAB*CONST11
      DCY1=VYLAB*CONST11
      DCZ1=VZLAB*CONST11
# LOOP                                                                 
  210 CONTINUE
      IELOW=0
      RETURN                                                            
      # end 
      def ELIMITBT(IELOW):                                        
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2             
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX 
      COMMON/THRM/AMGAS(6),VTMB[6],TCFMX,TCFMXG(6),ITHRM
      COMMON/RANM/RNMX(6) 
      COMMON/BFLD/EOVB,WB,BTHETA,BMAG                                   
      COMMON/LARGET/CF(6,4000,290),EIN(6,290),TCF(6,4000),IARRY(6,290),
     /RGAS(6,290),IPN(6,290),WPL(6,290),LAST(6),ISIZE(6),PENFRA[6,3,290]
     /,TCFMAX(6)
      COMMON/ANIST/PSCT(6,4000,290),ANGCT(6,4000,290),INDEX(6,290),NISO 
# -------------------------------------------------------------------   
#   CALCULATES COLLISION EVENTS AND TESTS TO FIND IF THE UPPER ENERGY  
#   LIMIT FOR THE ELECTRON ENERGY IS EXCEEDED. 
#    IF ENERGY LIMIT IS OK       IELOW = 0
#    IF ENERGY LIMIT IS EXCEEDED IELOW = 1          
#   THE TEST IS CARRIED OUT FOR A SAMPLE OF COLLISIONS THAT ARE
#   SMALLER THAN THE FULL SAMPLE BY A FACTOR OF 1/ISAMP
#   
#   USED WITH MAGNETIC FIELD B AT 90 DEGREES TO ELECTRIC FIELD  
# -------------------------------------------------------------------
      ISAMP=20      
      SMALL=1.0D-20 
      EF100=EFIELD*100.00                                              
      RDUM=RSTART                                                       
      E1=ESTART    
      N4000=4000                                                     
      TDASH=0.00 
# GENERATE RANDOM NUMBER FOR MAXWELL BOLTZMAN 
      CALL GERJAN
      IMBPT=0
#
      CONST9=CONST3*0.010 
      CONST10=CONST9*CONST9                                             
#                                                                       
#     INITIAL DIRECTION COSINES                                         
#                                                                       
      DCZ1=DCOS(THETA)                                                  
      DCX1=DSIN(THETA)*DCOS(PHI)                                        
      DCY1=DSIN(THETA)*DSIN(PHI)                                        
#                                                                       
      VTOT=CONST9*math.sqrt(E1)                                             
      CX1=DCX1*VTOT                                                     
      CY1=DCY1*VTOT
      CZ1=DCZ1*VTOT                                                     
      F4=2.00*DACOS(-1.00)                                            
      J2M=NMAX/ISAMP 
# MAIN LOOP                                                             
      DO 210 J1=1,J2M  
    1 R1=drand48(RDUM) 
      T=-math.log(R1)/TCFMX+TDASH                                          
      TDASH=T                                                           
      WBT=WB*T
      COSWT=DCOS(WBT)
      SINWT=DSIN(WBT)
      DZ=(CZ1*SINWT+(EOVB-CY1)*(1.00-COSWT))/WB                        
      E=E1+DZ*EF100              
# CALC ELECTRON VELOCITY IN LAB FRAME
      CX2=CX1
      CY2=(CY1-EOVB)*COSWT+CZ1*SINWT+EOVB      
      CZ2=CZ1*COSWT-(CY1-EOVB)*SINWT
# FIND IDENTITY OF GAS FOR COLLISION
      KGAS=0
      R2=drand48(RDUM)
    3 KGAS=KGAS+1
      IF(TCFMXG(KGAS):
 < R2) GO TO 3
# CALCULATE GAS VELOCITY VECTORS VGX,VGY,VGZ
      IMBPT=IMBPT+1
      IF(IMBPT > 6):
 :
       CALL GERJAN
       IMBPT=1
      # endIF
      VGX=VTMB[KGAS]*RNMX(IMBPT)
      IMBPT=IMBPT+1
      VGY=VTMB[KGAS]*RNMX(IMBPT)
      IMBPT=IMBPT+1
      VGZ=VTMB[KGAS]*RNMX(IMBPT)
# CALCULATE ENERGY WITH STATIONARY GAS TARGET , EOK
      EOK=((CX2-VGX)**2+(CY2-VGY)**2+(CZ2-VGZ)**2)/CONST10         
      IE=DINT(EOK/ESTEP)+1 
      IE=DMIN0(IE,N4000) 
#                                                                       
#     TEST FOR #real OR NULL COLLISION                                   
#                                                                       
      R5=drand48(RDUM) 
      TLIM=TCF(KGAS,IE)/TCFMAX(KGAS)                               
      IF(R5 > TLIM):
 GO TO 1                                          
#                       
      IF(IE == 4000):
 : 
# ELECTRON ENERGY OUT OF RANGE
       IELOW=1
       RETURN
      # endIF                                                           
      TDASH=0.00                       
# CALCULATE DIRECTION COSINES OF ELECTRON IN 0 KELVIN FRAME           
      CONST11=1.00/(CONST9*math.sqrt(EOK))
      DXCOM=(CX2-VGX)*CONST11
      DYCOM=(CY2-VGY)*CONST11
      DZCOM=(CZ2-VGZ)*CONST11                     
# --------------------------------------------------------------------- 
#     DETERMINATION OF #real COLLISION TYPE                              
# --------------------------------------------------------------------- 
      R2=drand48(RDUM)
# FIND LOCATION WITHIN 4 UNITS IN COLLISION ARRAY         
      CALL SORTT(KGAS,I,R2,IE)                                          
  140 I=I+1                                                             
      IF(CF(KGAS,IE,I):
 < R2) GO TO 140                                 
      S1=RGAS(KGAS,I)                                                  
      EI=EIN(KGAS,I)                                                   
      IF(IPN(KGAS,I):
 <= 0) GO TO 666                                   
      R9=drand48(RDUM)
      EXTRA=R9*(EOK-EI)                                                
      EI=EXTRA+EI                                                       
#                                                                       
#  GENERATE SCATTERING ANGLES AND UPDATE  LABORATORY COSINES AFTER      
#   COLLISION ALSO UPDATE ENERGY OF ELECTRON.                           
#                        
  666 IPT=IARRY(KGAS,I)                                               
      IF(EOK < EI):
 :
       EI=EOK-0.00010
      # endIF
      S2=(S1*S1)/(S1-1.00)
      R3=drand48(RDUM)
      IF(INDEX(KGAS,I):
 == 1) :
       R31=drand48(RDUM)
       F3=1.00-R3*ANGCT(KGAS,IE,I)
       IF(R31 > PSCT(KGAS,IE,I):
) F3=-F3
      elif(INDEX(KGAS,I) == 2) :
       EPSI=PSCT(KGAS,IE,I)
       F3=1.00-(2.00*R3*(1.00-EPSI)/(1.00+EPSI*(1.00-2.00*R3)))
      else:
       F3=1.00-2.00*R3
      # endIF
      THETA0=DACOS(F3)                                                  
      R4=drand48(RDUM)
      PHI0=F4*R4                                                        
      F8=DSIN(PHI0)                                                     
      F9=DCOS(PHI0)                                                     
      ARG1=1.00-S1*EI/EOK                                              
      ARG1=DMAX1(ARG1,SMALL)                                            
      D=1.00-F3*math.sqrt(ARG1)                                            
      E1=EOK*(1.00-EI/(S1*EOK)-2.00*D/S2)                             
      E1=DMAX1(E1,SMALL)                                                
      Q=math.sqrt((EOK/E1)*ARG1)/S1                                         
      Q=DMIN1(Q,1.00)                                                  
      THETA=DASIN(Q*DSIN(THETA0))                                       
      F6=DCOS(THETA)                                                    
      U=(S1-1.00)*(S1-1.00)/ARG1                                      
      CSQD=F3*F3                                                        
      IF(F3 < 0.00 and CSQD > U):
 F6=-1.00*F6                        
      F5=DSIN(THETA) 
      DCZ2=DMIN1(DZCOM,1.00)
      ARGZ=math.sqrt(DXCOM*DXCOM+DYCOM*DYCOM) 
      IF(ARGZ == 0.00):
 :
       DCZ1=F6
       DCX1=F9*F5
       DCY1=F8*F5
       GO TO 130
      # endIF                                          
      DCZ1=DZCOM*F6+ARGZ*F5*F8                                         
      DCY1=DYCOM*F6+(F5/ARGZ)*(DXCOM*F9-DYCOM*DZCOM*F8)                 
      DCX1=DXCOM*F6-(F5/ARGZ)*(DYCOM*F9+DXCOM*DZCOM*F8)
  130 CONTINUE
#  TRANSFORM VELOCITY VECTORS TO LAB FRAME
      VTOT=CONST9*math.sqrt(E1)
      CX1=DCX1*VTOT+VGX
      CY1=DCY1*VTOT+VGY
      CZ1=DCZ1*VTOT+VGZ
# CALCULATE ENERGY AND DIRECTION COSINES IN LAB FRAME
      E1=(CX1*CX1+CY1*CY1+CZ1*CZ1)/CONST10
      CONST11=1.00/(CONST9*math.sqrt(E1))
      DCX1=CX1*CONST11
      DCY1=CY1*CONST11
      DCZ1=CZ1*CONST11    
# LOOP                                                                 
  210 CONTINUE
      IELOW=0
      RETURN                                                            
      # end 
      def ELIMITCT(IELOW):                                       
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2             
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX
      COMMON/THRM/AMGAS(6),VTMB[6],TCFMX,TCFMXG(6),ITHRM
      COMMON/RANM/RNMX(6)  
      COMMON/BFLD/EOVB,WB,BTHETA,BMAG                                   
      COMMON/LARGET/CF(6,4000,290),EIN(6,290),TCF(6,4000),IARRY(6,290),
     /RGAS(6,290),IPN(6,290),WPL(6,290),LAST(6),ISIZE(6),PENFRA[6,3,290]
     /,TCFMAX(6)
      COMMON/ANIST/PSCT(6,4000,290),ANGCT(6,4000,290),INDEX(6,290),NISO
# -------------------------------------------------------------------   
#   CALCULATES COLLISION EVENTS AND TESTS TO FIND IF THE UPPER ENERGY  
#   LIMIT FOR THE ELECTRON ENERGY IS EXCEEDED. 
#    IF ENERGY LIMIT IS OK       IELOW = 0
#    IF ENERGY LIMIT IS EXCEEDED IELOW = 1          
#   THE TEST IS CARRIED OUT FOR A SAMPLE OF COLLISIONS THAT ARE
#   SMALLER THAN THE FULL SAMPLE BY A FACTOR OF 1/ISAMP
#   
#   USED WITH MAGNETIC FIELD B AT ANGLES BETWEEN 0 AND 90 DEGREES TO
#   THE ELECTRIC FIELD.
# -------------------------------------------------------------------
      ISAMP=20
      SMALL=1.0D-20
      API=DACOS(-1.00) 
      RTHETA=BTHETA*API/180.00
      EFZ100=EFIELD*100.00*DSIN(RTHETA)
      EFX100=EFIELD*100.00*DCOS(RTHETA)
      F1=EFIELD*CONST2*DCOS(RTHETA)
      F4=2.00*API
      EOVBR=EOVB*DSIN(RTHETA)
      RDUM=RSTART                                                       
      E1=ESTART    
      N4000=4000                                                     
      TDASH=0.00 
      CONST9=CONST3*0.010
      CONST10=CONST9*CONST9            
# GENERATE RANDOM NUMBER FOR MAXWELL BOLTZMAN
      CALL GERJAN
      IMBPT=0
#                                                                       
#     INITIAL DIRECTION COSINES                                         
#                                                                       
      DCZ1=DCOS(THETA)                                                  
      DCX1=DSIN(THETA)*DCOS(PHI)                                        
      DCY1=DSIN(THETA)*DSIN(PHI)                                        
#                                                                       
      VTOT=CONST9*math.sqrt(E1)                                             
      CX1=DCX1*VTOT                                                     
      CY1=DCY1*VTOT
      CZ1=DCZ1*VTOT                                                     
      J2M=NMAX/ISAMP 
# MAIN LOOP                                                             
      DO 210 J1=1,J2M  
    1 R1=drand48(RDUM)
      T=-math.log(R1)/TCFMX+TDASH                                         
      TDASH=T                                                           
      WBT=WB*T
      COSWT=DCOS(WBT)
      SINWT=DSIN(WBT)
      DZ=(CZ1*SINWT+(EOVBR-CY1)*(1.00-COSWT))/WB 
      DX=CX1*T+F1*T*T                                                   
      E=E1+DZ*EFZ100+DX*EFX100           
      CX2=CX1+2.00*F1*T
      CY2=(CY1-EOVBR)*COSWT+CZ1*SINWT+EOVBR
      CZ2=CZ1*COSWT-(CY1-EOVBR)*SINWT
# FIND IDENTITY OF GAS FOR COLLISION
      KGAS=0
      R2=drand48(RDUM)
    3 KGAS=KGAS+1
      IF(TCFMXG(KGAS):
 < R2) GO TO 3
# CALCULATE GAS VELOCITY VECTORS VGX,VGY,VGZ
      IMBPT=IMBPT+1
      IF(IMBPT > 6):
 :
       CALL GERJAN
       IMBPT=1
      # endIF
      VGX=VTMB[KGAS]*RNMX(IMBPT)
      IMBPT=IMBPT+1
      VGY=VTMB[KGAS]*RNMX(IMBPT)
      IMBPT=IMBPT+1
      VGZ=VTMB[KGAS]*RNMX(IMBPT)
# CALCULATE ENERGY WITH STATIONARY GAS TARGET
      EOK=((CX2-VGX)**2+(CY2-VGY)**2+(CZ2-VGZ)**2)/CONST10
      IE=DINT(EOK/ESTEP)+1 
      IE=DMIN0(IE,N4000) 
#                                                                       
#     TEST FOR #real OR NULL COLLISION                                   
#                                                                       
      R5=drand48(RDUM)
      TLIM=TCF(KGAS,IE)/TCFMAX(KGAS)                                   
      IF(R5 > TLIM):
 GO TO 1 
#                                                                       
#  CALCULATE DIRECTION COSINES AT INSTANT BEFORE COLLISION
#                       
      IF(IE == 4000):
 : 
# ELECTRON ENERGY OUT OF RANGE
       IELOW=1
       RETURN
      # endIF 
      TDASH=0.00 
# CALCULATE DIRECTION COSINES OF ELECTRON IN 0 KELVIN FRAME
      CONST11=1.00/(CONST9*math.sqrt(EOK))
      DXCOM=(CX2-VGX)*CONST11
      DYCOM=(CY2-VGY)*CONST11
      DZCOM=(CZ2-VGZ)*CONST11                                          
# --------------------------------------------------------------------- 
#     DETERMINATION OF #real COLLISION TYPE                              
# --------------------------------------------------------------------- 
      R2=drand48(RDUM)  
# FIND LOCATION WITHIN 4 UNITS IN COLLISION ARRAY       
      CALL SORTT(KGAS,I,R2,IE)                                          
  140 I=I+1                                                             
      IF(CF(KGAS,IE,I):
 < R2) GO TO 140                                 
      S1=RGAS(KGAS,I)                                                   
      EI=EIN(KGAS,I)                                                    
      IF(IPN(KGAS,I):
 <= 0) GO TO 666                                   
      R9=drand48(RDUM) 
      EXTRA=R9*(EOK-EI)                                               
      EI=EXTRA+EI                                                       
#                                                                       
#  GENERATE SCATTERING ANGLES AND UPDATE  LABORATORY COSINES AFTER      
#   COLLISION ALSO UPDATE ENERGY OF ELECTRON.                           
#                        
  666 IPT=IARRY(KGAS,I)                                               
      IF(EOK < EI):
 :
       EI=EOK-0.00010
      # endIF
      S2=(S1*S1)/(S1-1.00)
      R3=drand48(RDUM)
      IF(INDEX(KGAS,I):
 == 1) :
       R31=drand48(RDUM)
       F3=1.00-R3*ANGCT(KGAS,IE,I)
       IF(R31 > PSCT(KGAS,IE,I):
) F3=-F3
      elif(INDEX(KGAS,I) == 2) :
       EPSI=PSCT(KGAS,IE,I)
       F3=1.00-(2.00*R3*(1.00-EPSI)/(1.00+EPSI*(1.00-2.00*R3)))
      else:
       F3=1.00-2.00*R3
      # endIF
      THETA0=DACOS(F3)                                                  
      R4=drand48(RDUM)
      PHI0=F4*R4                                                        
      F8=DSIN(PHI0)                                                     
      F9=DCOS(PHI0)                                                     
      ARG1=1.00-S1*EI/EOK                                              
      ARG1=DMAX1(ARG1,SMALL)                                            
      D=1.00-F3*math.sqrt(ARG1)                                            
      E1=EOK*(1.00-EI/(S1*EOK)-2.00*D/S2)                            
      E1=DMAX1(E1,SMALL)                                                
      Q=math.sqrt((EOK/E1)*ARG1)/S1                                        
      Q=DMIN1(Q,1.00)                                                  
      THETA=DASIN(Q*DSIN(THETA0))                                       
      F6=DCOS(THETA)                                                    
      U=(S1-1.00)*(S1-1.00)/ARG1                                      
      CSQD=F3*F3                                                        
      IF(F3 < 0.00 and CSQD > U):
 F6=-1.00*F6                        
      F5=DSIN(THETA) 
      DZCOM=DMIN1(DZCOM,1.00)
      ARGZ=math.sqrt(DXCOM*DXCOM+DYCOM*DYCOM) 
      IF(ARGZ == 0.00):
 :
       DCZ1=F6
       DCX1=F9*F5
       DCY1=F8*F5
       GO TO 130
      # endIF                                          
      DCZ1=DZCOM*F6+ARGZ*F5*F8                                         
      DCY1=DYCOM*F6+(F5/ARGZ)*(DXCOM*F9-DYCOM*DZCOM*F8)                 
      DCX1=DXCOM*F6-(F5/ARGZ)*(DYCOM*F9+DXCOM*DZCOM*F8)
  130 CONTINUE
# TRANSFORM VELOCITY VECTORS TO LAB FRAME
      VTOT=CONST9*math.sqrt(E1)
      CX1=DCX1*VTOT+VGX
      CY1=DCY1*VTOT+VGY
      CZ1=DCZ1*VTOT+VGZ
# CALCULATE ENERGY AND DIRECTION COSINES IN LAB FRAME
      E1=(CX1*CX1+CY1*CY1+CZ1*CZ1)/CONST10
      CONST11=1.00/(CONST9*math.sqrt(E1))
      DCX1=CX1*CONST11
      DCY1=CY1*CONST11
      DCZ1=CZ1*CONST11    
# LOOP                                                                 
  210 CONTINUE
      IELOW=0
      RETURN                                                            
      # end 
      def ALPCALCT :
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX 
      COMMON/SSTOUT/VDOUT,VDERR,WSOUT,WSERR,DLOUT,DLERR,DTOUT,DTERR,
     /ALPHSST,ALPHERR,ATTSST,ATTERR         
      COMMON/TOFOUT/RALPHA,RALPER,TOFENE,TOFENER,TOFWV,TOFWVER,
     /TOFDL,TOFDLER,TOFDT,TOFDTER,TOFWR,TOFWRER,RATTOF,RATOFER 
      COMMON/VEL/WX,WY,WZ
      COMMON/CTOWNS/ALPHA,ATT
      COMMON/CTWNER/ALPER,ATTER
      COMMON/CTCALC/ZPLANE1,ZPLANE2,ZPLANE3,ZPLANE4,ZPLANE5,ZPLANE6,
     /ZPLANE7,ZPLANE8,IZFINAL
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9] 
      COMMON/LARGET/CF(6,4000,290),EIN(6,290),TCF(6,4000),IARRY(6,290),
     /RGAS(6,290),IPN(6,290),WPL(6,290),LAST(6),ISIZE(6),PENFRA[6,3,290]
     /,TCFMAX(6)
# ---------------------------------------------------------------------      
#  ESTIMATE TIME STEP AND SPACE STEPS FOR AVALANCHE SIMULATION IN 
#  TIME OF FLIGHT AND STEADY STATE TOWNS# end SIMULATIONS.
#  USES ESTIMATED GAIN OF 3.0 BETWEEN PLANES. 
#  CALLS SST AND TOF defS AND UPDATES ALPHA AND ATT
# ------------------------------------------------------------------
      IMAX=NMAX/10000000 
      IF(IMAX < 5):
 IMAX=5 
      NMAX=IMAX*10000000
      CORR=760.0*(273.15+TEMPC)/(293.15*TORR)  
      ALPP=ALPHA/CORR
      ATTP=ATT/CORR
      ANETP=ALPP-ATTP
      ANET=ALPHA-ATT
      TCUTH=1.2D-10*CORR
      TCUTL=1.D-13*CORR
      ZCUTH=1.2D-2*CORR
      ZCUTL=1.D-5*CORR
#
      IF(ANETP > 30.0):
 :
       ALPHAD=0.0
       ALP1=ALPHA
       ATT1=ATT
# WEAK ATTACHMENT
       GO TO 6
      # endIF
# SOME ATTACHMENT
      IF(abs(ANETP):
 < 100.) :
# SMALL NET ATTACHMENT
       ALPHAD=abs(ATT)*0.8
      elif(abs(ANETP) >= 100. and abs(ANETP) < 1000.) :
# LARGER NET ATTACHMENT
       ALPHAD=abs(ANET)*0.65
      elif(abs(ANETP) >= 1000. and abs(ANETP) < 10000.) :
       ALPHAD=abs(ANET)*0.6
      elif(abs(ANETP) >= 10000. and abs(ANETP) < 100000.) :
       ALPHAD=abs(ANET)*0.5
      elif(abs(ANETP) > 100000. and abs(ANETP) < 2000000.) :
       ALPHAD=abs(ANET)*0.2
      else:
       WRITE(6,91)
   91  FORMAT(' ATTACHMENT TOO LARGE def STOPPED')
      # endIF
    3 VDST=WZ*1.D-5
      FAKEI=ALPHAD*WZ*1.D-12
      ALPHAST=0.85*abs(ALPHAD+ANET)
      TSTEP=math.log(3.00)/(ALPHAST*VDST*1.D5)
      IF(TSTEP > TCUTH):
 TSTEP=TCUTH
      IF(TSTEP < TCUTL):
 TSTEP=TCUTL
# UPDATE NULL COLLISION FREQUENCY LIMIT
      DO 4 J=1,NGAS
    4 TCFMAX(J)=TCFMAX(J)+abs(FAKEI)/DFLOAT(NGAS) 
      WRITE(6,871) ALPHAST,ANET,ALPHAD,TSTEP
  871 FORMAT(' ALPHAST1=',D10.3,' ANET1=',D10.3,' ALPHAD1=',D10.3,/,
     /' TSTEP1=',D10.3) 
# CONVERT TO PICOSECONDS 
      TSTEP=TSTEP*1.0D12
      TFINAL=7.00*TSTEP
      ITFINAL=7
# CALCULATE GOOD STARTING VALUES FOR ALPHA AND NETA
      JPRT=0
      CALL MONTEFTT(JPRT)
      CALL PT(JPRT)
      CALL TOF(JPRT)
      ALP1=RALPHA/TOFWR*1.D7
      ALP1ER=RALPER*ALP1/100.
      ATT1=RATTOF/TOFWR*1.D7
      ATT1ER=RATOFER*ATT1/100.     
      WRITE(6,944) ALP1,ALP1ER,ATT1,ATT1ER
  944 FORMAT(' GOOD STARTING VALUES FOR CALC:',/,' ALPHA=',D12.3,' ERR='
     /,D12.3,/,' NETA =',D12.3,' ERR=',D12.3)
# 
# CALCULATE USING GO0D STARTING VALUES
# RESET TCFMAX
      DO 44 J=1,NGAS
   44 TCFMAX(J)=TCFMAX(J)-abs(FAKEI)/DFLOAT(NGAS) 
# CALCULATE FAKE IONISATION RATE SCALING BY 1.2
      ALPHAD=ATT1*1.2
      IF((ALP1-ATT1):
 > 30.*CORR) ALPHAD=abs(ATT1)*0.4
      IF(abs(ALP1-ATT1):
 < (ALP1/10.0) or abs(ALP1-ATT1) < 
     /(ATT1/10.0)) ALPHAD=abs(ATT1)*0.3
      IF((ALP1-ATT1):
 > 100.*CORR) ALPHAD=0.0
      WZ=TOFWR*1.D5
# 
    6 VDST=WZ*1.D-5
      FAKEI=ALPHAD*WZ*1.D-12
      ALPHAST=0.85*abs(ALPHAD+ALP1-ATT1)    
      IF((ALP1+ALPHAD):
 > (10.0*ALPHAST) or ATT1 > (10.0*ALPHAST)) :
# LARGE CANCELLATION BETWEEN ALPHA AND NETA  REDUCE STEP SIZE BY 15.0
       IF((ALP1+ALPHAD):
 > 100.*CORR) :
        ALPHAST=ALPHAST*15.0
       elif((ALP1+ALPHAD) > 50.0*CORR) :
        ALPHAST=ALPHAST*12.0
       else: 
        ALPHAST=ALPHAST*8.0
       # endIF
      # endIF
      TSTEP=math.log(3.00)/(ALPHAST*VDST*1.0D5)
      ZSTEP=math.log(3.00)/ALPHAST
      IF(TSTEP > TCUTH and ALPHAD != 0.0):
 TSTEP=TCUTH
#     IF(TSTEP < TCUTL) TSTEP=TCUTL
      IF(ZSTEP > ZCUTH and ALPHAD != 0.0):
 ZSTEP=ZCUTH
#     IF(ZSTEP < ZCUTL) ZSTEP=ZCUTL
# UPDATE NULL CLLISION FREQUENCY LIMIT
      DO 10 J=1,NGAS
   10 TCFMAX(J)=TCFMAX(J)+abs(FAKEI)/DFLOAT(NGAS)
      ANET2=ALP1-ATT1
      WRITE(6,878) ALPHAST,ANET2,ALPHAD,TSTEP,ZSTEP
  878 FORMAT(' ALPHAST=',D10.3,' ANET=',D10.3,' ALPHAD=',D10.3,/,
     /' TSTEP=',D10.3,' ZSTEP=',D10.3)
#  CONVERT TO METRES AND PICOSECONDS     
      TSTEP=TSTEP*1.0D12
      ZSTEP=ZSTEP*0.010
      TFINAL=7.00*TSTEP
      ITFINAL=7
      ZFINAL=8.00*ZSTEP
      IZFINAL=8    
      ZPLANE1=ZSTEP
      ZPLANE2=2.00*ZSTEP
      ZPLANE3=3.00*ZSTEP
      ZPLANE4=4.00*ZSTEP
      ZPLANE5=5.00*ZSTEP
      ZPLANE6=6.00*ZSTEP
      ZPLANE7=7.00*ZSTEP
      ZPLANE8=8.00*ZSTEP
# CALC SST
      WRITE(6,11)
   11 FORMAT(/,2X,'SOLUTION FOR STEADY STATE TOWNS# end PARAMETERS',/,'  -
     /------------------------------------------------')        
      ZSTEPM=ZSTEP*1.0D6
      WRITE(6,12) ZSTEPM
   12 FORMAT(1(/),' SPACE STEP BETWEEN SAMPLING PLANES =',D12.5,' MICRON
     /S.',/)   
      JPRT=1
      CALL MONTEFDT
      CALL SST
#--------------------------------------------------------      
# LOAD NEW ALPHA AND ATTACHMENT INTO COMMON BLOCKS
#-----------------------------------------------
      ALPHA=ALPHSST
      ALPER=ALPHERR
      ATT=ATTSST 
      ATTER=ATTERR        
#-----------------------------------------------      
      WRITE(6,18) 
   18 FORMAT(/,' SST DRIFT VELOCITIES')   
      WRITE(6,19) VDOUT,VDERR,WSOUT,WSERR
   19 FORMAT(/,' VD=',F9.1,' +- ',F6.2,' %   WS=',F9.1,' +- ',F6.2,' %')
      WRITE(6,20)      
   20 FORMAT(/,' SST DIFFUSION')  
      WRITE(6,21) DLOUT,DLERR,DTOUT,DTERR   
   21 FORMAT(/,' DL=',F9.1,' +- ',F6.1,' %   DT=',F9.1,' +- ',F6.2,' %')
      WRITE(6,22) 
   22 FORMAT(/,' SST TOWNS# end COEFICIENTS') 
      WRITE(6,23) ALPHSST,ALPHERR,ATTSST,ATTERR 
   23 FORMAT(/,' ALPHA =',F9.1,' +- ',F6.2,' %    ATT=',F9.1,' +- ',F6.2
     /,' %')   
      CALL OUTPUT1T                                        
# CALC TIME OF FLIGHT AND PT 

  777 WRITE(6,25) 
   25 FORMAT(/,2X,'SOLUTION FOR PULSED TOWNS# end AND TIME OF FLIGHT PARAM
     /ETERS',/,'  ------------------------------------------------------
     /--------') 
      WRITE(6,26) TSTEP 
   26 FORMAT(1(/),'  TIME STEP BETWEEN SAMPLING PLANES =',D12.5,' PICOSE
     /CS.',/)     
      JPRT=1
      CALL MONTEFTT(JPRT)                             
      CALL FRIEDLANDT 
      CALL PT(JPRT) 
      CALL TOF(JPRT) 
      WRITE(6,27) RALPHA,RALPER,RATTOF,RATOFER 
   27 FORMAT(/,' PT IONISATION AND ATTACHMENT RATES *10**12/SEC',/,' ALP
     /HA=',D10.3,' +- ',F6.2,' %      ATT=',D10.3,' +- ',F6.2,' %')    
      WRITE(6,28) 
   28 FORMAT(/,' TOF DIFFUSION') 
      WRITE(6,29) TOFDL,TOFDLER,TOFDT,TOFDTER 
   29 FORMAT(/,'  DL=',F8.1,' +- ',F6.1,' %       DT=',F8.1,' +- ',F6.1,
     /' %')     
      WRITE(6,30) 
   30 FORMAT(/,' TOF DRIFT VELOCITY') 
      WRITE(6,31) TOFWR,TOFWRER   
   31 FORMAT(/,'    WR=',F8.2,' +-',F6.1,' %') 
# CALCULATE TOWNS# end SST COEFICIENTS DIRECTLY FROM TOF RESULTS
      WRZN=TOFWR*1.005 
      FC1=WRZN/(2.00*TOFDL) 
      FC2=((RALPHA-RATTOF)*1.0D12)/TOFDL 
      ALPTEST=FC1-math.sqrt(FC1**2-FC2) 
      WRITE(6,888) ALPTEST 
  888 FORMAT(/,'TOWNS# end COEFICIENT (ALPHA-ATT) CALCULATED FROM TOF RESU
     /LTS:',/,' ALPHA-ATT /CM.=',D11.4,' N.B. APPROXIMATE FORMULA NOT AC
     /CURATE',/)                             
#
# CALCULATE DIRECTLY FROM TOF FREQUENCY
#     ALP1=RALPHA/TOFWR*1.D7
#     ALP1ER=RALPER*ALP1/100.
#     ATT1=RATTOF/TOFWR*1.D7
#     ATT1ER=RATOFER*ATT1/100.
#
#     WRITE(6,33) ALP1,ALP1ER,ATT1,ATT1ER
#  33 FORMAT(' TOF TOWNS# end IN UNITS OF 1/CM:',/,'   GAIN =',D12.4,' +-'
#    /,D12.4,/,' ATTACH =',D12.4,' +-',D12.4,/)  
      RETURN                                                     
      # end                                                               
      def MONTEFTT(JPRT):                                        
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAXOLD
      COMMON/LARGET/CF(6,4000,290),EIN(6,290),TCF(6,4000),IARRY(6,290),
     /RGAS(6,290),IPN(6,290),WPL(6,290),IPLAST(6),ISIZE(6),
     /PENFRA[6,3,290],TCFMAX(6)
      COMMON/LARGENT/CFN(6,4000,10),TCFN(6,4000),SCLENUL(6,10),NPLAST(6)
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/OUTPTT/TIME(300),ICOLL(6,5),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(6,290),ICOLNN(6,10)
      COMMON/THRM/AMGAS(6),VTMB[6],TCFMX,TCFMXG(6),ITHRM
      COMMON/RANM/RNMX(6)
      COMMON/TTRM/ZTOT,TTOT,ZTOTS,TTOTS
      COMMON/ISPT/XS(2000),YS(2000),ZS(2000),TS(2000),ES(2000),   
     /DCX(2000),DCY(2000),DCZ[2000],IPL(2000)
      COMMON/TPLOUT/ETPL(8),XTPL(8),YTPL(8),ZTPL(8),TTPL(8),XXTPL(8),
     /YYTPL(8),ZZTPL(8),VZTPL(8),NETPL(8),ATTOINT,ATTERT,AIOERT 
      COMMON/ANIST/PSCT(6,4000,290),ANGCT(6,4000,290),INDEX(6,290),NISO 
      COMMON/IONFL/NC0(6,290),EC0(6,290),NG1(6,290),EG1(6,290),
     /NG2(6,290),EG2(6,290),WKLM(6,290),EFL(6,290)
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9] 
      DIMENSION EPRM(10000000),IESPECP(100),TEMP(6,4000)            
# -------------------------------------------------------------------   
#   CALCULATES COLLISION EVENTS AND UPDATES DIFFUSION AND VELOCITY.
#   THIS ROUTINE HANDLES TERMINATIONS AT FIXED DRIFT TIMES.   
# ------------------------------------------------------------------- 
      IF(JPRT == 0):
 :
# CALCULATION OF APPROXIMATE STARTING PARAMETERS
       NMAX=NMAXOLD
       IF(NMAXOLD > 80000000):
 NMAX=80000000
      else:
# ENTRY FOR NORMAL CALCULATION
       NMAX=NMAXOLD
      # endIF 
      S=0.00 
      ST=0.00 
      X=0.00
      Y=0.00
      Z=0.00 
      ZTOT=0.00
      ZTOTS=0.00
      TTOT=0.00
      TTOTS=0.00
      SMALL=1.0D-20                                                     
      TMAX1=0.00                                                       
      RDUM=RSTART                                                       
      E1=ESTART                                                         
      CONST9=CONST3*0.010
      CONST10=CONST9*CONST9
      API=DACOS(-1.00)
      DO 25 I=1,300
   25 TIME(I)=0.00
      DO 26 I=1,5
      DO 26 K=1,6
   26 ICOLL(K,I)=0
      DO 27 I=1,290
      DO 27 K=1,6
   27 ICOLN(K,I)=0
      DO 271 I=1,10
      DO 271 K=1,6
  271 ICOLNN(K,I)=0
      DO 28 I=1,4000
   28 SPEC(I)=0.00            
      DO 33 I=1,100
   33 IESPECP(I)=0 
      DO 34 I=1,8
      ETPL(I)=0.00
      XTPL(I)=0.00
      YTPL(I)=0.00
      ZTPL(I)=0.00
      TTPL(I)=0.00
      XXTPL(I)=0.00
      YYTPL(I)=0.00
      ZZTPL(I)=0.00
      VZTPL(I)=0.00
   34 NETPL(I)=0                                   
      ID=0
      N4000=4000
      N300=300
      N100=100
      I100=0                                                            
      NCOL=0                                                            
      NNULL=0
      NELEC=0
      NEION=0
      NMXADD=0
      NTMPFLG=0
      NPONT=0 
      NCLUS=0
      J1=1 
      ZSTRT=0.00
      TSSTRT=0.00 
# 
      DO 111 K=1,6
      DO 111 J=1,N4000
  111 TEMP(K,J)=TCF(K,J)+TCFN(K,J)
      ABSFAKEI=abs(FAKEI) 
      IFAKE=0:
      DO 112 J=1,8
  112 IFAKET(J)=0
#                                  
#     INITIAL DIRECTION COSINES                                         
      DCZ1=DCOS(THETA)                                                  
      DCX1=DSIN(THETA)*DCOS(PHI)                                        
      DCY1=DSIN(THETA)*DSIN(PHI) 
      E100=E1
      DCZ100=DCZ1
      DCX100=DCX1
      DCY100=DCY1                                       
      BP=EFIELD*EFIELD*CONST1                                           
      F1=EFIELD*CONST2                                                  
      F2=EFIELD*CONST3                                                  
      F4=2.00*API
# GENERATE INITIAL RANDOM NUMBERS FOR MAXWELL BOLTZMAN 
      CALL GERJAN
      IMBPT=0
#
      JPRINT=NMAX/10
      IPRINT=0
      ITER=0
      IPLANE=0
      IPRIM=0
#  LOOP FOR NEW STARTING ELECTRONS 
  544 IPRIM=IPRIM+1 
      IF(IPRIM > 1):
 :
# CHECK IF def WILL EXCEED MAXIMUM NUMBER OF ITERATIONS 
# IN THIS CYCLE IF SO OUTPUT CURRENT RESULTS. 
       IF(ITER > NMAX):
 :
        IPRIM=IPRIM-1
        GO TO 700      
       # endIF 
       X=0.00
       Y=0.00
       Z=0.00
       DCZ1=DCZ100
       DCX1=DCX100
       DCY1=DCY100
       E1=E100
       NCLUS=NCLUS+1
       ST=0.00
       TSSTRT=0.00
       ZSTRT=0.00
       IPLANE=0
      # endIF
      IF(IPRIM > 10000000):
 :
      WRITE(6,944) IPRIM
 944  FORMAT(/,2X,'def STOPPED TOO MANY PRIMARIES IPRIM =',I7)
      GO TO 700
      # endIF
      EPRM(IPRIM)=E1
      IDUM=DINT(E1)+1
      IDUM=DMIN0(IDUM,N100)
      IESPECP(IDUM)=IESPECP(IDUM)+1      
# START OF LOOP FOR NEWLY CREATED ELECTRONS
  555 TDASH=0.00
      NELEC=NELEC+1
      TSTOP=TSTEP+IPLANE*TSTEP       
# MAIN LOOP                                                             
    1 CONTINUE                                                          
#     IF(ITER > NMAX)  GO TO 315
      R1=drand48(RDUM)
      T=-math.log(R1)/TCFMX+TDASH
      TDASH=T
      AP=DCZ1*F2*math.sqrt(E1)
  15  IF((T+ST) >= TSTOP) :                     
       IPLANE=IPLANE+1
       TSTOP=TSTOP+TSTEP
# STORE POSITION AND ENERGY AT TIME PLANE =IPLANE. 
       CALL TPLANET(T,E1,DCX1,DCY1,DCZ1,AP,BP,EFIELD,IPLANE)
# CHECK IF PASSED THROUGH MORE THAN ONE PLANE IN THIS STEP       
       IF((T+ST):
 >= TSTOP and TSTOP <= TFINAL) GO TO 15
       IF((T+ST):
 >= TFINAL) :
        ZTOT=ZTOT+Z     
        TTOT=TTOT+ST
        ZTOTS=ZTOTS+Z-ZSTRT      
        TTOTS=TTOTS+ST-TSSTRT    
        TSTOP=TSTEP
# NO MORE ELECTRONS IN CASCADE TRY NEW PRIMARY ELECTRON
        IF(NELEC == (NCLUS+1):
) GO TO 544  
# TAKE ELECTRONS FROM STORE 
   20   X=XS(NPONT) 
        Y=YS(NPONT) 
        Z=ZS(NPONT) 
        ST=TS(NPONT) 
        E1=ES(NPONT) 
        DCX1=DCX(NPONT) 
        DCY1=DCY(NPONT) 
        DCZ1=DCZ[NPONT] 
        IPLANE=IPL(NPONT)   
        NPONT=NPONT-1 
        ZSTRT=Z 
        TSSTRT=ST
        GO TO 555
       # endIF              
      # endIF
 913  FORMAT(3X,' AFTER STORE ITER=',I10,' E1=',D12.3,' T=',D12.3,' AP='
     /,D12.3,' BP=',D12.3,' DCZ1=',D12.3)       
      E=E1+(AP+BP*T)*T
      IF(E < 0.00):
 :
       WRITE(6,913)ITER,E,E1,AP,BP,DCZ1 
       E=0.0010
      # endIF  
# FIND IDENTITY OF GAS FOR COLLISION
      KGAS=0
      IF(NGAS == 1):
 :
       R2=drand48(RDUM)
       KGAS=1
       GO TO 4
      # endIF
      R2=drand48(RDUM)
   21 KGAS=KGAS+1
      IF(TCFMXG(KGAS):
 < R2) GO TO 21 
# CALC GAS VELOCITY VECTORS VGX,VGY,VGZ
    4 IMBPT=IMBPT+1
      IF(IMBPT > 6):
 :
       CALL GERJAN
       IMBPT=1
      # endIF
      VGX=VTMB[KGAS]*RNMX(IMBPT)
      IMBPT=IMBPT+1
      VGY=VTMB[KGAS]*RNMX(IMBPT)
      IMBPT=IMBPT+1
      VGZ=VTMB[KGAS]*RNMX(IMBPT)
# CALCULATE ELECTRON VELOCITY VECTORS VEX,VEY,VEZ BEFORE COLLISION
      CONST6=math.sqrt(E1/E)
      DCX2=DCX1*CONST6
      DCY2=DCY1*CONST6
      DCZ2=DCZ1*CONST6+EFIELD*T*CONST5/math.sqrt(E)
      VEX=DCX2*CONST9*math.sqrt(E)
      VEY=DCY2*CONST9*math.sqrt(E)
      VEZ=DCZ2*CONST9*math.sqrt(E)
# CALCULATE ENERGY WITH STATIONARY GAS TARGET
      EOK=((VEX-VGX)**2+(VEY-VGY)**2+(VEZ-VGZ)**2)/CONST10
      IE=DINT(EOK/ESTEP)+1                                             
      IE=DMIN0(IE,N4000)                                              
#                                                    I                   
#     TEST FOR #real OR NULL COLLISION  
#                                 
      R5=drand48(RDUM)                                                  
      TEST1=TCF(KGAS,IE)/TCFMAX(KGAS)                                  
      IF(R5 <= TEST1):
 GO TO 137                                         
      NNULL=NNULL+1
      TEST2=TEMP(KGAS,IE)/TCFMAX(KGAS)
      IF(R5 < TEST2):
 :
# TEST FOR NULL LEVELS
       IF(NPLAST(KGAS):
 == 0) GO TO 1
       R2=drand48(RDUM)
       I=0
  888  I=I+1
       IF(CFN(KGAS,IE,I):
 < R2) GO TO 888
# INCREMENT NULL SCATTER SUM
       ICOLNN(KGAS,I)=ICOLNN(KGAS,I)+1
       GO TO 1
      # endIF                               
      TEST3=(TEMP(KGAS,IE)+ABSFAKEI)/TCFMAX(KGAS)
      IF(R5 < TEST3):
 :
# FAKE COLLISION INCREMENT COUNTERS
       IFAKE=IFAKE+1:
       IFAKET(IPLANE+1):
=IFAKET(IPLANE+1)+1 
       IF(FAKEI < 0.0):
 :
        NEION=NEION+1
# FAKE ATTACHMENT START NEW ELECTRON
        IF(NELEC == (NCLUS+1):
) GO TO 544
# ELECTRON CAPTURED TAKE NEXT ELECTRON FROM STORE
        GO TO 20
       # endIF
# FAKE IONISATION ADD ELECTRON TO STORE
       NCLUS=NCLUS+1
       NPONT=NPONT+1
       NMXADD=MAX(NPONT,NMXADD)
       IF(NPONT > 2000):
 : 
        WRITE(6,546) NPONT,ITER
        STOP
       # endIF     
       A=T*CONST9*math.sqrt(E1)
       XS(NPONT)=X+DCX1*A       
       YS(NPONT)=Y+DCY1*A
       ZS(NPONT)=Z+DCZ1*A+T*T*F1
       TS(NPONT)=ST+T
       ES(NPONT)=E
       IPL(NPONT)=IPLANE
       DCX(NPONT)=DCX2
       DCY(NPONT)=DCY2
       DCZ[NPONT]=DCZ2
       GO TO 1
      # endIF                      
      GO TO 1 
  137 NCOL=NCOL+1 
# CALCULATE DIRECTION COSINES OF ELECTRON IN 0 KELVIN FRAME
      CONST11=1.00/(CONST9*math.sqrt(EOK)) 
      DXCOM=(VEX-VGX)*CONST11
      DYCOM=(VEY-VGY)*CONST11
      DZCOM=(VEZ-VGZ)*CONST11       
#                                                                       
#  CALCULATE POSITIONS AT INSTANT BEFORE COLLISION
#    ALSO UPDATE DIFFUSION  AND ENERGY CALCULATIONS.                    
      T2=T*T
      IF(T >= TMAX1):
 TMAX1=T
      TDASH=0.00                                                       
      CONST7=CONST9*math.sqrt(E1)                                           
      A=T*CONST7                                                        
      X=X+DCX1*A                                                        
      Y=Y+DCY1*A
      Z=Z+DCZ1*A+T2*F1
      ST=ST+T
      IT=DINT(T+1.00)                                               
      IT=DMIN0(IT,N300)                                                
      TIME(IT)=TIME(IT)+1.00
# ENERGY SPECTRUM FOR 0 KELVIN FRAME                                       
      SPEC(IE)=SPEC(IE)+1.00
# --------------------------------------------------------------------- 
#     DETERMINATION OF #real COLLISION TYPE                              
# --------------------------------------------------------------------- 
      R2=drand48(RDUM)
# FIND LOCATION WITHIN 4 UNITS IN COLLISION ARRAY       
      CALL SORTT(KGAS,I,R2,IE)                                          
  140 I=I+1                                                             
      IF(CF(KGAS,IE,I):
 < R2) GO TO 140                                
      S1=RGAS(KGAS,I)                                                 
      EI=EIN(KGAS,I)
      IF(EOK < EI):
 :
       EI=EOK-0.00010
      # endIF                                                          
      IF(IPN(KGAS,I):
 == 0) GO TO 666
# ATTACHMENT       
      IF(IPN(KGAS,I):
 == -1) :
       NEION=NEION+1
       IPT=IARRY(KGAS,I)
       ID=ID+1
       ITER=ITER+1
       IPRINT=IPRINT+1
       ICOLL(KGAS,IPT)=ICOLL(KGAS,IPT)+1
       ICOLN(KGAS,I)=ICOLN(KGAS,I)+1 
       IT=DINT(T+1.00)
       IT=DMIN0(IT,N300)
       TIME(IT)=TIME(IT)+1.00
       ZTOT=ZTOT+Z
       TTOT=TTOT+ST
       ZTOTS=ZTOTS+Z-ZSTRT
       TTOTS=TTOTS+ST-TSSTRT
#  ELECTRON CAPTURED START NEW PRIMARY          
       IF(NELEC == (NCLUS+1):
) GO TO 544
# ELECTRON CAPTURED TAKE NEXT ELECTRON FROM STORE       
       GO TO 20
      # endIF    
      EISTR=EI                                             
      R9=drand48(RDUM)
#     ESEC=R9*(E-EI)      
#    USE OPAL PETERSON AND BEATY SPLITTING FACTOR.
      ESEC=WPL(KGAS,I)*TAN(R9*ATAN((EOK-EI)/(2.00*WPL(KGAS,I)))) 
      ESEC=WPL(KGAS,I)*(ESEC/WPL(KGAS,I))**0.9524     
      EI=ESEC+EI 
# STORE POSITION ,ENERGY, DIRECTION COSINES AND TIME OF GENERATION
# OF IONISATION ELECTRON      
      NCLUS=NCLUS+1
      NPONT=NPONT+1
      NMXADD=MAX(NPONT,NMXADD)
      IF(NPONT > 2000):
 : 
      WRITE(6,546) NPONT,ITER
 546  FORMAT(2X,' def STOPPED . NPONT=',I5,' ITER=',I10)
      STOP
      # endIF     
      XS(NPONT)=X       
      YS(NPONT)=Y
      ZS(NPONT)=Z
      TS(NPONT)=ST
      ES(NPONT)=ESEC
      NTMPFLG=1
      NCLTMP=NPONT
      IPL(NPONT)=IPLANE
# RANDOMISE SECONDARY ELECTRON DIRECTION
#      R3=drand48(RDUM)
#      F3=1.00-2.00*R3
#      THETA0=DACOS(F3)
#      F6=DCOS(THETA0)
#      F5=DSIN(THETA0)
#      R4=drand48(rdum)
#      PHI0=F4*R4
#      F8=DSIN(PHI0)
#      F9=DCOS(PHI0)               
#      DCX(NPONT)=F9*F5
#      DCY(NPONT)=F8*F5
#      DCZ[NPONT]=F6     
#      IPL(NPONT)=IPLANE 
#                                                                       
#  GENERATE SCATTERING ANGLES AND UPDATE  LABORATORY COSINES AFTER      
#   COLLISION ALSO UPDATE ENERGY OF ELECTRON.                           
#
# STORE POSIBLE SHELL EMISSIONS AUGER OR FLUORESCENCE
      IF(EISTR > 30.0):
 :
# AUGER EMISSION WITHOUT FLUORESCENCE
       NAUG=NC0(KGAS,I)
       EAVAUG=EC0(KGAS,I)/DFLOAT(NAUG)
       DO 701 JFL=1,NAUG
       NCLUS=NCLUS+1
       NPONT=NPONT+1
       XS(NPONT)=X
       YS(NPONT)=Y
       ZS(NPONT)=Z
       TS(NPONT)=ST
       ES(NPONT)=EAVAUG
       R3=drand48(RDUM)
       F3=1.00-2.00*R3
       THETA0=DACOS(F3)
       F6=DCOS(THETA0)
       F5=DSIN(THETA0)
       R4=drand48(RDUM)
       PHI0=F4*R4
       F8=DSIN(PHI0)
       F9=DCOS(PHI0)
       DCX(NPONT)=F9*F5
       DCY(NPONT)=F8*F5
       DCZ[NPONT]=F6
       IPL(NPONT)=IPLANE
 701   CONTINUE
      # endIF
  666 IPT=IARRY(KGAS,I)
      ID=ID+1    
      ITER=ITER+1
      IPRINT=IPRINT+1                                                   
      ICOLL(KGAS,IPT)=ICOLL(KGAS,IPT)+1 
      ICOLN(KGAS,I)=ICOLN(KGAS,I)+1 
# IF EXCITATION : ADD PROBABILITY ,PENFRA(KGAS,1,I), OF TRANSFER TO
#  GIVE IONISATION OF THE OTHER GASES IN THE MIXTURE.
      IF(IPEN == 0):
 GO TO 5
      IF(PENFRA[KGAS,1,I] != 0.0):
 :
       RAN=drand48(RDUM)
       IF(RAN > PENFRA[KGAS,1,I]):
 GO TO 5
       NCLUS=NCLUS+1
       NPONT=NPONT+1
       IF(NPONT > 2000):
 : 
        WRITE(6,546) NPONT,ITER
        STOP
       # endIF
# ENTER HERE POSSIBLE DELOCALISATION LENGTH FOR PENNING TRANSFER
       IF(PENFRA[KGAS,2,I] == 0.0):
 :
        XS(NPONT)=X
        YS(NPONT)=Y
        ZS(NPONT)=Z
        GO TO 667
       # endIF
       ASIGN=1.0
       RAN=drand48(RDUM)
       RAN1=drand48(RDUM)
       IF(RAN1 < 0.5):
 ASIGN=-ASIGN
       XS(NPONT)=X-math.log(RAN)*PENFRA[KGAS,2,I]*ASIGN
       RAN=drand48(RDUM)
       RAN1=drand48(RDUM)
       IF(RAN1 < 0.5):
 ASIGN=-ASIGN
       YS(NPONT)=Y-math.log(RAN)*PENFRA[KGAS,2,I]*ASIGN
       RAN=drand48(RDUM)
       RAN1=drand48(RDUM)
       IF(RAN1 < 0.5):
 ASIGN=-ASIGN
       ZS(NPONT)=Z-math.log(RAN)*PENFRA[KGAS,2,I]*ASIGN
# POSSIBLE PENNING TRANSFER TIME
  667  TPEN=ST
       IF(PENFRA[KGAS,3,I] == 0.0):
 GO TO 668
       RAN=drand48(RDUM)
       TPEN=ST-math.log(RAN)*PENFRA[KGAS,3,I]
  668  TS(NPONT)=TPEN                 
       ES(NPONT)=1.0
       DCX(NPONT)=DCX1
       DCY(NPONT)=DCY1
       DCZ[NPONT]=DCZ1
# FIND LAST TIME PLANE BEFORE TPEN 
       TSTOP1=0.0
       IPLANE1=0  
       DO 669 KDUM=1,ITFINAL
       TSTOP1=TSTEP+TSTOP1
       IF(TPEN < TSTOP1):
 GO TO 670
       IPLANE1=IPLANE1+1  
  669  CONTINUE
# PENNING TRANSFER OCCURS AFTER FINAL TIME PLANE CLEAR ENTRY
       NPONT=NPONT-1
       NCLUS=NCLUS-1
       GO TO 5
  670  IPL(NPONT)=IPLANE1
      # endIF                                            
    5 S2=(S1*S1)/(S1-1.00) 
# ANISOTROPIC SCATTERING
      R3=drand48(RDUM)
      IF(INDEX(KGAS,I):
 == 1) :
       R31=drand48(RDUM)
       F3=1.00-R3*ANGCT(KGAS,IE,I)
       IF(R31 > PSCT(KGAS,IE,I):
) F3=-F3
      elif(INDEX(KGAS,I) == 2) :
       EPSI=PSCT(KGAS,IE,I)
       F3=1.00-(2.00*R3*(1.00-EPSI)/(1.00+EPSI*(1.00-2.00*R3)))
      else:
# ISOTROPIC SCATTERING                                              
       F3=1.00-2.00*R3  
      # endIF
      THETA0=DACOS(F3)                                                  
      R4=drand48(RDUM)
      PHI0=F4*R4                                                        
      F8=DSIN(PHI0)                                                     
      F9=DCOS(PHI0)                                                     
      IF(EOK < EI):
 EI=EOK-0.00010                              
#C    IF(EOK < EI) EI=0.00                                     
      ARG1=1.00-S1*EI/EOK                                            
      ARG1=DMAX1(ARG1,SMALL)                                            
      D=1.00-F3*math.sqrt(ARG1)                                            
      E1=EOK*(1.00-EI/(S1*EOK)-2.00*D/S2) 
      E1=DMAX1(E1,SMALL)                                                
      Q=math.sqrt((EOK/E1)*ARG1)/S1                                        
      Q=DMIN1(Q,1.00)                                                  
      THETA=DASIN(Q*DSIN(THETA0))                                       
      F6=DCOS(THETA)                                                    
      U=(S1-1.00)*(S1-1.00)/ARG1                                      
      CSQD=F3*F3                                                        
      IF(F3 < 0.00 and CSQD > U):
 F6=-1.00*F6                        
      F5=DSIN(THETA)                                                    
      DZCOM=DMIN1(DZCOM,1.00)                                         
      ARGZ=math.sqrt(DXCOM*DXCOM+DYCOM*DYCOM)
      IF(ARGZ == 0.00):
 :
       DCZ1=F6         
       DCX1=F9*F5                             
       DCY1=F8*F5 
# USE FREE KINEMATICS FOR IONISATION SECONDARY ANGLE 
       IF(NTMPFLG == 1):
 :
        F5S=F5*math.sqrt(E1/ES(NCLTMP))
        IF(F5S > 1.0):
 F5S=1.0
        THSEC=DASIN(F5S)
        F5S=DSIN(THSEC)
        F6S=DCOS(THSEC)
        IF(F6 < 0.0):
 F6S=-F6S
        PHIS=PHI0+API
        IF(PHIS > F4):
 PHIS=PHI0-F4
        F8S=DSIN(PHIS)
        F9S=DCOS(PHIS)
        DCZ[NCLTMP]=F6S
        DCX(NCLTMP)=F9S*F5S
        DCY(NCLTMP)=F8S*F5S
        NTMPFLG=0
       # endIF
       GO TO 190
      # endIF                                            
      DCZ1=DZCOM*F6+ARGZ*F5*F8                                         
      DCY1=DYCOM*F6+(F5/ARGZ)*(DXCOM*F9-DYCOM*DZCOM*F8)                 
      DCX1=DXCOM*F6-(F5/ARGZ)*(DYCOM*F9+DXCOM*DZCOM*F8) 
      IF(NTMPFLG == 1):
 :
# USE FREE KINEMATICS FOR IONISATION SECONDARY ANGLE
       F5S=F5*math.sqrt(E1/ES(NCLTMP))
       IF(F5S > 1.0):
 F5S=1.0
       THSEC=DASIN(F5S)
       F5S=DSIN(THSEC)
       F6S=DCOS(THSEC)
       IF(F6 < 0.0):
 F6S=-F6S
       PHIS=PHI0+API
       IF(PHIS > F4):
 PHIS=PHI0-F4
       F8S=DSIN(PHIS)
       F9S=DCOS(PHIS)
       DCZ[NCLTMP]=DZCOM*F6S+ARGZ*F5S*F8S
       DCY(NCLTMP)=DYCOM*F6S+(F5S/ARGZ)*(DXCOM*F9S-DYCOM*DZCOM*F8S)
       DCX(NCLTMP)=DXCOM*F6S-(F5S/ARGZ)*(DYCOM*F9S+DXCOM*DZCOM*F8S)
       NTMPFLG=0
      # endIF 
  190 CONTINUE  
# TRANSFORM VELOCITY VECTORS TO LAB FRAME
      CONST12=CONST9*math.sqrt(E1)
      VXLAB=DCX1*CONST12+VGX
      VYLAB=DCY1*CONST12+VGY
      VZLAB=DCZ1*CONST12+VGZ
# CALCULATE ENERGY AND DIRECTION COSINES IN LAB FRAME
      E1=(VXLAB*VXLAB+VYLAB*VYLAB+VZLAB*VZLAB)/CONST10
      CONST11=1.00/(CONST9*math.sqrt(E1))
      DCX1=VXLAB*CONST11
      DCY1=VYLAB*CONST11
      DCZ1=VZLAB*CONST11 
# STORE DIRECTION COSINES AND ENERGY AFTER N COLLISIONS
# FOR LATER REUSE IN PRIMARY GENERATION
      I100=I100+1
      IF(I100 == 200):
 :
       DCZ100=DCZ1
       DCX100=DCX1        
       DCY100=DCY1 
       E100=E1
       I100=0
      # endIF  
      IF(IPRINT > JPRINT):
 GO TO 200
      GO TO 1                                    
#    INTERMEDIATE PRINTOUT                       
 200  IPRINT=0 
      W=ZTOTS/TTOTS                          
      W=W*1.0D+09                                                       
      JCT=ID/100000
#     IF(J1 == 1) WRITE(6,201)                                         
# 201 FORMAT(/,7X,'INTERMEDIATE OUTPUT',/,'    VEL      POS        TIME 
#    /       COUNT    ')                  
#     WRITE(6,202) W,ZTOTS,TTOTS,JCT   
# 202 FORMAT(1X,F8.3,2(1X,D10.3),4X,I6)                 
      J1=J1+1            
      GO TO 1
#  MAIN LOOP # end                                                  
  700 XID=DFLOAT(ID)
      IF(NELEC > IPRIM):
 :
       ANEION=DFLOAT(NEION)
       ANBT=DFLOAT(NELEC-IPRIM)
       ATTOINT=ANEION/ANBT
       ATTERT=math.sqrt(ANEION)/ANEION
       AIOERT=math.sqrt(ANBT)/ANBT
      else:
       ANEION=DFLOAT(NEION) 
       ATTOINT=-1.0
       ATTERT=math.sqrt(ANEION)/ANEION
      # endIF
      JCT=ID/100000  
      IF(J1 == 1):
 :
      WRITE(6,940) NCLUS,ITER
  940 FORMAT(2(/),' def STOPPED  (TOO FEW COLLISIONS), DECREASE THE 
     /ESTIMATED ALPHA.  NCLUS = ',I7,'  ITER =',I9)      
      STOP
      # endIF
      IF(JPRT == 1):
 WRITE(6,878) NELEC,NEION,IPRIM
 878  FORMAT(/,' TOTAL NO OF ELECTRONS=',I10,/,' TOTAL NO OF NEG. IONS='
     /,I10,/,' TOTAL NO OF PRIMARIES=',I10)  
      EPRMBAR=0.00
      E2PRM=0.00
      IF(IPRIM == 1):
 RETURN      
      DO 310 I=1,IPRIM
      E2PRM=E2PRM+EPRM(I)*EPRM(I)
 310  EPRMBAR=EPRMBAR+EPRM(I)
      EBAR=EPRMBAR/IPRIM
      EERR=math.sqrt(E2PRM/IPRIM-EBAR**2)
      IF(JPRT == 1):
 WRITE(6,836) EBAR,EERR
 836  FORMAT(/,2X,'AVERAGE ENERGY OF PRIMARY ELECTRON =',F10.3,' EV.',/,
     /'   ENERGY SPREAD OF PRIMARY ELECTRON =',F10.3,' EV.')
#     WRITE(6,835) (IESPECP(J),J=1,100)
#835  FORMAT(/,2X,'ENERGY SPECTRUM OF PRIMARY ELECTRONS IN 1 EV. BINS',/
#    /,10(2X,10I5,/))
      RETURN               
  315 IF(ITER > NMAX) :
       WRITE(6,991) ITER,NMAX,NPONT,NELEC,IPRIM,NMXADD
 991   FORMAT(2(/),' def STOPPED.  ITER =',I10,'    NMAX =',I10,/,
     /' NPONT=',I4,' NELEC=',I8,' IPRIM=',I4,' NMXADD=',I3)
       STOP
      # endIF                                                             
      RETURN                                                            
      # end
      def TPLANET(T,E1,DCX1,DCY1,DCZ1,AP,BP,EFLD,IPLANE):
      IMPLICIT #real*8 (A-H,O-Z)  
      IMPLICIT #integer*8 (I-N)
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/OUTPTT/TIME(300),ICOLL(6,5),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(6,290),ICOLNN(6,10)
      COMMON/TPLOUT/ETPL(8),XTPL(8),YTPL(8),ZTPL(8),TTPL(8),XXTPL(8),
     /YYTPL(8),ZZTPL(8),VZTPL(8),NETPL(8),ATTOINT,ATTERT,AIOERT 
#-----------------------------------------------------------------------
# STORES POSITION, TIME AND ENERGY AND SUMS REQUIRED
# TO CALCULATE DEVIATIONS AND MEANS AT PLANE =IPLANE 
#-----------------------------------------------------------------------
      TIMESP=IPLANE*TSTEP
# CALC TIME LEFT TO ARRIVE AT PLANE
      TIMLFT=TIMESP-ST
      T2LFT=TIMLFT*TIMLFT
      A=AP*TIMLFT
      B=BP*T2LFT 
      EPLANE=E1+A+B                      
      CONST6=math.sqrt(E1/EPLANE)         
#     DCX2=DCX1*CONST6
#     DCY2=DCY1*CONST6
      DCZ2=DCZ1*CONST6+EFLD*TIMLFT*CONST5/math.sqrt(EPLANE)
      XPLANE=X+DCX1*TIMLFT*math.sqrt(E1)*CONST3*0.010
      YPLANE=Y+DCY1*TIMLFT*math.sqrt(E1)*CONST3*0.010
      ZPLANE=Z+DCZ1*TIMLFT*math.sqrt(E1)*CONST3*0.010+T2LFT*EFLD*CONST2
      VZPLANE=DCZ2*math.sqrt(EPLANE)*CONST3*0.010
      XTPL(IPLANE)=XTPL(IPLANE)+XPLANE
      YTPL(IPLANE)=YTPL(IPLANE)+YPLANE
      ZTPL(IPLANE)=ZTPL(IPLANE)+ZPLANE
      XXTPL(IPLANE)=XXTPL(IPLANE)+XPLANE*XPLANE
      YYTPL(IPLANE)=YYTPL(IPLANE)+YPLANE*YPLANE
      ZZTPL(IPLANE)=ZZTPL(IPLANE)+ZPLANE*ZPLANE
      ETPL(IPLANE)=ETPL(IPLANE)+EPLANE
      TTPL(IPLANE)=TTPL(IPLANE)+ST+TIMLFT
      VZTPL(IPLANE)=VZTPL(IPLANE)+VZPLANE
      NETPL(IPLANE)=NETPL(IPLANE)+1 
      RETURN
      # end
      def FRIEDLANDT:
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/FRED/FCION(4000),FCATT(4000)                               
      COMMON/OUTPTT/TIME(300),ICOLL(6,5),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(6,290),ICOLNN(6,10)
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5
      COMMON/TTRM/ZTOT,TTOT,ZTOTS,TTOTS 
      COMMON/LARGET/CF(6,4000,290),EIN(6,290),TCF(6,4000),IARRY(6,290),
     /RGAS(6,290),IPN(6,290),WPL(6,290),LAST(6),ISIZE(6),PENFRA[6,3,290]
     /,TCFMAX(6)
      COMMON/MIX2/E(4000),EROOT(4000),QTOT(4000),QREL(4000),QINEL(4000),
     /QEL(4000) 
      DIMENSION FR(4000)                                              
# -------------------------------------------------------
# CALCULATE DISTRIBUTION def USING FRIEDLAND TECHNIQUE
# CF: J.FRIEDLAND  PHYSICS OF FLUIDS 20(1461)1977
#  USE DITRIBUTION def TO CALCULATE AVERAGE ENERGY
#  IONISATION RATE AND ATTACHMENT RATE.  
#-----------------------------------------------------  
      ALFBAR=0.00
      ATTBAR=0.00
      EBAR=0.00
      FSUM=0.00
      DO 100 I=1,4000
      TCFSUM=0.00
      DO 10 KGAS=1,NGAS
   10 TCFSUM=TCFSUM+TCF(KGAS,I)
      FR(I)=SPEC(I)/TCFSUM
      EBAR=EBAR+E(I)*SPEC(I)/TCFSUM
      ALFBAR=ALFBAR+FCION(I)*SPEC(I)/TCFSUM
      ATTBAR=ATTBAR+FCATT(I)*SPEC(I)/TCFSUM
  100 FSUM=FSUM+FR(I)
      DO 200 I=1,4000
 200  FR(I)=FR(I)/FSUM
      EBAR=EBAR/TTOTS
      ALFBAR=ALFBAR/TTOTS           
      ATTBAR=ATTBAR/TTOTS
      WRITE(6,900) EBAR,ALFBAR,ATTBAR    
 900  FORMAT(2(/),' ESTIMATE USING FRIEDLAND :',/,' AVERAGE ENERGY =',F8
     /.3,'EV.',/,' AVERAGE IONISATION =',E11.4,' *10**12/SEC',/,' AVERAG
     /E ATTACHMENT =',E11.4,' *10**12/SEC') 
      RETURN   
      # end
      def PT(JPRT):
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/TPLOUT/ETPL(8),XTPL(8),YTPL(8),ZTPL(8),TTPL(8),XXTPL(8),
     /YYTPL(8),ZZTPL(8),VZTPL(8),NETPL(8),ATTOINT,ATTERT,AIOERT
      COMMON/PTTOF/RI(8),EPT(8),VZPT(8),TTEST(8)
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9] 
      DIMENSION ANTPL(8)
# ------------------------------------------------
# CALCULATES PULSED TOWNS# end COEFFICIENTS
#-------------------------------------------------
      ANTPL(1)=DFLOAT(NETPL(1))
      RI(1)=(math.log(ANTPL(1))-math.log(DFLOAT(IPRIM)))/TSTEP
      RI(1)=RI(1)-FAKEI
      EPT(1)=ETPL(1)/ANTPL(1)
      TTEST(1)=TTPL(1)/ANTPL(1)
      VZPT(1)=1.0D+09*VZTPL(1)/ANTPL(1)
      DO 10 I=2,ITFINAL
      IF(NETPL(I):
 == 0) :
       ITFINAL=I-1
       GO TO 11
      # endIF      
      ANTPL(I)=DFLOAT(NETPL(I))
      RI(I)=(math.log(ANTPL(I))-math.log(ANTPL(I-1)))/TSTEP
      RI(I)=RI(I)-FAKEI
      EPT(I)=ETPL(I)/ANTPL(I)
      TTEST(I)=TTPL(I)/ANTPL(I)
      VZPT(I)=1.0D+09*VZTPL(I)/ANTPL(I)
  10  CONTINUE
  11  IF(JPRT == 1) WRITE(6,900) ITFINAL
 900  FORMAT(2(/),' PULSED TOWNS# end RESULTS AT',I2,' SEQUENTIAL TIME PLA
     /NES',/,' PLANE NO.   (ION-ATT) FREQ.   ENERGY      WV      NO.OF E
     /LECTRONS',/)   
      DO 20 IPL=1,ITFINAL
      IF(JPRT == 1):
 WRITE(6,910) IPL,RI(IPL),EPT(IPL),VZPT(IPL),
     /NETPL(IPL)
 910  FORMAT(2X,I2,4X,E15.4,7X,F7.2,4X,F7.2,3X,I8)
  20  CONTINUE 
      RETURN
      # end
      def TOF(JPRT):
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/TPLOUT/ETPL(8),XTPL(8),YTPL(8),ZTPL(8),TTPL(8),XXTPL(8),
     /YYTPL(8),ZZTPL(8),VZTPL(8),NETPL(8),ATTOINT,ATTERT,AIOERT
      COMMON/TOFOUT/RALPHA,RALPER,TOFENE,TOFENER,TOFWV,TOFWVER,
     /TOFDL,TOFDLER,TOFDT,TOFDTER,TOFWR,TOFWRER,RATTOF,RATOFER 
      COMMON/PTTOF/RI(8),EPT(8),VZPT(8),TTEST(8)
      COMMON/THRM/AMGAS(6),VTMB[6],TCFMX,TCFMXG(6),ITHRM
      DIMENSION DLTF(8),DXTF(8),DYTF(8),WR(8),ANTPL(8)
#----------------------------------------------------------
# CALCULATES TIME OF FLIGHT COEFFICIENTS
#---------------------------------------------
      IF(ITHRM == 1):
 CALL COLFT(DUM1,DUM2,FRION,FRATT,DUM3,IDUM4)
      IF(ITHRM == 0):
 CALL COLF(DUM1,DUM2,FRION,FRATT,DUM3,IDUM4)
      ATTOINT=FRATT/FRION
      CORERR=abs((FAKEI+FRION-FRATT)/(FRION-FRATT))
      ANTPL(1)=DFLOAT(NETPL(1))
      WR(1)=ZTPL(1)/(ANTPL(1)*TSTEP)
      DLTF(1)=((ZZTPL(1)/ANTPL(1))-(ZTPL(1)/ANTPL(1))**2)/(2.00*TSTEP)
      DXTF(1)=((XXTPL(1)/ANTPL(1))-(XTPL(1)/ANTPL(1))**2)/(2.00*TSTEP)
      DYTF(1)=((YYTPL(1)/ANTPL(1))-(YTPL(1)/ANTPL(1))**2)/(2.00*TSTEP)
      DO 10 I=2,ITFINAL
      ANTPL(I)=DFLOAT(NETPL(I))
      WR(I)=((ZTPL(I)/ANTPL(I))-(ZTPL(I-1)/ANTPL(I-1)))/TSTEP
      DLTF(I)=((ZZTPL(I)/ANTPL(I))-(ZTPL(I)/ANTPL(I))**2-(ZZTPL(I-1)/ANT
     /PL(I-1))+(ZTPL(I-1)/ANTPL(I-1))**2)/(2.00*TSTEP)
      DXTF(I)=((XXTPL(I)/ANTPL(I))-(XTPL(I)/ANTPL(I))**2-(XXTPL(I-1)/ANT
     /PL(I-1))+(XTPL(I-1)/ANTPL(I-1))**2)/(2.00*TSTEP)
      DYTF(I)=((YYTPL(I)/ANTPL(I))-(YTPL(I)/ANTPL(I))**2-(YYTPL(I-1)/ANT
     /PL(I-1))+(YTPL(I-1)/ANTPL(I-1))**2)/(2.00*TSTEP)
  10  CONTINUE  
      DO 15 I=1,ITFINAL
      WR(I)=WR(I)*1.0D+09
      DLTF(I)=DLTF(I)*1.0D+16
      DXTF(I)=DXTF(I)*1.0D+16
      DYTF(I)=DYTF(I)*1.0D+16
  15  CONTINUE
      IF(JPRT == 1):
 WRITE(6,900) ITFINAL
 900  FORMAT(2(/),' TIME OF FLIGHT RESULTS AT',I2,' SEQUENTIAL TIME PLAN
     /ES',/,' PLANE NO.        DL         DX          DY            WR',
     //)
      DO 20 IPL=1,ITFINAL   
      IF(JPRT == 1):
 WRITE(6,910) IPL,DLTF(IPL),DXTF(IPL),DYTF(IPL),
     /WR(IPL)
 910  FORMAT(3X,I3,4X,3F12.1,4X,F8.2)
  20  CONTINUE    
      IF(NETPL(1):
 > NETPL(ITFINAL)) :
#        NET ATTACHMENT TAKE RESULTS FROM PLANE 2
       TOFENE=EPT(2)
       TOFENER=100.00*abs((EPT(2)-EPT(3))/(2.00*EPT(2)))
       TOFWV=VZPT(2)
       TOFWVER=100.00*abs((VZPT(2)-VZPT(3))/(2.00*VZPT(2))) 
       TOFDL=DLTF(2)
       TOFDLER=100.00*abs((DLTF(2)-DLTF(3))/(2.00*DLTF(2)))
       TDT2=(DXTF(2)+DYTF(2))/2.00
       TDT3=(DXTF(3)+DYTF(3))/2.00
       TOFDT=TDT2
       TOFDTER=100.00*abs((TDT2-TDT3)/(2.00*TDT2))
       TOFWR=WR(2)
       TOFWRER=100.00*abs((WR(2)-WR(3))/(2.00*WR(2))) 
        ANST2=DFLOAT(NETPL(2))
        ANST3=DFLOAT(NETPL(3))
        ANST4=ANST3-math.sqrt(ANST3)
        ANST5=math.log(ANST2/ANST3)
        ANST6=math.log(ANST2/ANST4)
        ANST7=ANST6/ANST5
        ANST8=ANST7-1.00
       IF(ATTOINT == -1.0):
 :
#        NO IONISATION
        RALPHA=0.00
        RALPER=0.00
        RATTOF=-RI(2)
        RATOFER=100.00*math.sqrt(ANST8**2+ATTERT**2)
       else:
        RALPHA=RI(2)/(1.00-ATTOINT)
        RALPER=100.00*math.sqrt(ANST8**2+AIOERT**2)
        RATTOF=ATTOINT*RI(2)/(1.00-ATTOINT)
        RATOFER=100.00*math.sqrt(ANST8**2+ATTERT**2)
       # endIF 
      else:
# NET IONISATION TAKE RESULTS FROM PLANE ITFINAL
       I1=ITFINAL
       I2=ITFINAL-1  
       TOFENE=EPT(I1)
       TOFENER=100.00*abs((EPT(I1)-EPT(I2))/EPT(I1))
       TOFWV=VZPT(I1)
       TOFWVER=100.00*abs((VZPT(I1)-VZPT(I2))/VZPT(I1))
       TOFDL=DLTF(I1)
       TOFDLER=100.00*abs((DLTF(I1)-DLTF(I2))/DLTF(I1))
       TDT1=(DXTF(I1)+DYTF(I1))/2.00
       TDT2=(DXTF(I2)+DYTF(I2))/2.00
       TOFDT=TDT1
       TOFDTER=100.00*abs((TDT1-TDT2)/TDT1)
       TOFWR=WR(I1)
       TOFWRER=100.00*abs((WR(I1)-WR(I2))/WR(I1))
       ATER=abs((RI(I1)-RI(I2))/RI(I1))
       RALPHA=RI(I1)/(1.00-ATTOINT)
       RALPER=100.00*math.sqrt(ATER**2+AIOERT**2)
       RATTOF=ATTOINT*RI(I1)/(1.00-ATTOINT)
       IF(ATTOINT != 0.00):
 :
        RATOFER=100.00*math.sqrt(ATER**2+ATTERT**2)
       else:
        RATOFER=0.00
       # endIF  
      # endIF
      RETURN
      # end               
      def MONTEFDT                                      :
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX   
      COMMON/LARGET/CF(6,4000,290),EIN(6,290),TCF(6,4000),IARRY(6,290), 
     /RGAS(6,290),IPN(6,290),WPL(6,290),LAST(6),ISIZE(6),PENFRA[6,3,290]
     /,TCFMAX(6)
      COMMON/LARGENT/CFN(6,4000,10),TCFN(6,4000),SCLENUL(6,10),NPLAST(6)
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/OUTPTT/TIME(300),ICOLL(6,5),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(6,290),ICOLNN(6,10)
      COMMON/TTRM/ZTOT,TTOT,ZTOTS,TTOTS 
      COMMON/THRM/AMGAS(6),VTMB[6],TCFMX,TCFMXG(6),ITHRM
      COMMON/RANM/RNMX(6)
      COMMON/IPS/XSS(2000),YSS(2000),ZSS(2000),TSS(2000),ESS(2000),
     /DCXS(2000),DCYS(2000),DCZS(2000),IPLS(2000)  
      COMMON/SPLOUT/ESPL(8),XSPL(8),YSPL(8),ZSPL(8),TSPL(8),XXSPL(8),
     /YYSPL(8),ZZSPL(8),VZSPL(8),TSSUM(8),TSSUM2(8),ATTOION,ATTIOER,
     /ATTATER,NESST(9)
      COMMON/SPL1/TMSPL(8),TTMSPL(8),RSPL(8),RRSPL(8),RRSPM(8)
      COMMON/CTCALC/ZPLANE1,ZPLANE2,ZPLANE3,ZPLANE4,ZPLANE5,ZPLANE6,
     /ZPLANE7,ZPLANE8,IZFINAL
      COMMON/ANIST/PSCT(6,4000,290),ANGCT(6,4000,290),INDEX(6,290),NISO 
      COMMON/IONFL/NC0(6,290),EC0(6,290),NG1(6,290),EG1(6,290),
     /NG2(6,290),EG2(6,290),WKLM(6,290),EFL(6,290)
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9] 
      DIMENSION EPRM(10000000),IESPECP(100),TEMP(6,4000)
#----------------------------------------------------------------------
#   CALCULATES COLLISION EVENTS AND UPDATES DIFFUSION AND VELOCITY.
#   THIS ROUTINE HANDLES TERMINATIONS AT FIXED DRIFT DISTANCES.   
# -------------------------------------------------------------------  
      S=0.00  
      ST=0.00
      X=0.00
      Y=0.00
      Z=0.00
      ZTOT=0.00
      ZTOTS=0.00
      TTOT=0.00
      TTOTS=0.00
      SMALL=1.0D-20                                                     
      TMAX1=0.00                                                       
      RDUM=RSTART                                                       
      E1=ESTART                                                         
      CONST9=CONST3*0.010
      CONST10=CONST9*CONST9
      API=DACOS(-1.00)
      DO 25 I=1,300
   25 TIME(I)=0.00
      DO 26 I=1,5
      DO 26 K=1,6
   26 ICOLL(K,I)=0
      DO 27 I=1,290
      DO 27 K=1,6
   27 ICOLN(K,I)=0
      DO 271 I=1,10
      DO 271 K=1,6
  271 ICOLNN(K,I)=0
      DO 28 I=1,4000
   28 SPEC(I)=0.00            
      DO 33 I=1,100
   33 IESPECP(I)=0  
      DO 34 I=1,8   
      ESPL(I)=0.00
      XSPL(I)=0.00
      YSPL(I)=0.00
      ZSPL(I)=0.00
      TSPL(I)=0.00
      XXSPL(I)=0.00
      YYSPL(I)=0.00
      ZZSPL(I)=0.00
      VZSPL(I)=0.00
      TSSUM(I)=0.00
      TSSUM2(I)=0.00
      TMSPL(I)=0.00
      TTMSPL(I)=0.00
      RSPL(I)=0.00
      RRSPL(I)=0.00
      RRSPM(I)=0.00
   34 NESST(I)=0 
      NESST(9)=0                     
      ID=0
      N4000=4000
      N300=300
      N100=100
      I100=0                                                            
      NCOL=0                                                            
      NNULL=0
      NELEC=0        
      NEION=0
      NMXADD=0
      NTMPFLG=0
      NPONT=0
      NCLUS=0
      J1=1                                                       
      ZSTRT=0.00
      TSSTRT=0.00 
# 
      DO 111 K=1,6
      DO 111 J=1,4000
  111 TEMP(K,J)=TCF(K,J)+TCFN(K,J)
      ABSFAKEI=abs(FAKEI)
      IFAKE=0:
      DO 112 J=1,9
  112 IFAKED[J]=0
#
# GENERATE INITIAL RANDOM NUMBERS FOR MAXWELL BOLTZMAN 
      CALL GERJAN
      IMBPT=0
#     INITIAL DIRECTION COSINES                                         
      DCZ1=DCOS(THETA)                                                  
      DCX1=DSIN(THETA)*DCOS(PHI)                                        
      DCY1=DSIN(THETA)*DSIN(PHI) 
      DCX100=DCX1
      DCY100=DCY1
      DCZ100=DCZ1
      E100=E1                                      
      BP=EFIELD*EFIELD*CONST1                                           
      F1=EFIELD*CONST2                                                  
      F2=EFIELD*CONST3                                                  
      F4=2.00*API
      JPRINT=NMAX/10
      IPRINT=0
      ITER=0
      IPRIM=0  
# LOOP FOR NEW STARTING ELECTRONS
 544  IPRIM=IPRIM+1
      IZPLANE=0
      TZSTOP=1000.00
      IF(IPRIM > 1):
 :
# CHECK IF def WILL EXCEED MAXIMUM NUMBER OF ITERATIONS IN THIS
# CYCLE , IF SO OUTPUT CURRENT RESULTS.
       IF(ITER > NMAX):
 :
        IPRIM=IPRIM-1
        GO TO 700
       # endIF 
       X=0.00
       Y=0.00
       Z=0.00
       DCZ1=DCZ100
       DCX1=DCX100
       DCY1=DCY100
       NCLUS=NCLUS+1
       E1=E100
       ST=0.00
       ZSTRT=0.00
       TSSTRT=0.00
      # endIF
      IF(IPRIM > 10000000):
 :
      WRITE(6,944) IPRIM
  944 FORMAT(2X,' def STOPPED TOO MANY PRIMARIES IPRIM=',I7)
      STOP
      # endIF
      EPRM(IPRIM)=E1
      IDUM=DINT(E1)+1
      IDUM=DMIN0(IDUM,N100)
      IESPECP(IDUM)=IESPECP(IDUM)+1    
# START OF LOOP FOR NEWLY CREATED ELECTRONS .      
 555  TDASH=0.00
      NELEC=NELEC+1
# MAIN LOOP                                                             
    1 CONTINUE                                                          
#     IF(ITER > NMAX)  GO TO 315
      R1=drand48(RDUM)
      T=-math.log(R1)/TCFMX+TDASH
      TOLD=TDASH
      TDASH=T
      AP=DCZ1*F2*math.sqrt(E1)
   15 IF(T >= TZSTOP and TOLD < TZSTOP) : 
      TLFT=TZSTOP                    
# STORE POSITION AND ENERGY AT Z PLANE = IZPLANE.
#      IF(IZPLANE == 0) WRITE(6,8876) IZPLANE
#8876  FORMAT(' IZPLANE=',I5)
       CALL SPLANET(T,E1,DCX1,DCY1,DCZ1,AP,BP,EFIELD,TLFT,IZPLANE)
#********************************************************************
#
# CHANGE  IF STATEMENT FROM (IZFINAL+1) TO (IZFINAL-1) 
# FOR ANODE TERMINATION .
#*********************************************************************
       IF(IZPLANE >= (IZFINAL+1):
) :  
  18    ZTOT=ZTOT+Z     
        TTOT=TTOT+ST
        ZTOTS=ZTOTS+Z-ZSTRT     
        TTOTS=TTOTS+ST-TSSTRT
# NO MORE ELECTRONS IN CASCADE RETURN TO MAIN.
        IF(NELEC == (NCLUS+1):
) GO TO 544  
# TAKE ELECTRONS FROM STORE 
   20   X=XSS(NPONT)
        Y=YSS(NPONT)
        Z=ZSS(NPONT)
        ST=TSS(NPONT)
        E1=ESS(NPONT)
        DCX1=DCXS(NPONT)
        DCY1=DCYS(NPONT)
        DCZ1=DCZS(NPONT)
        IZPLANE=IPLS(NPONT)
        NPONT=NPONT-1
        ZSTRT=Z
        TSSTRT=ST
        IF(Z > ZFINAL):
 :
# CHECK IF ELECTRON HAS ENOUGH ENERGY TO GO BACK TO FINAL PLANE         
         EPOT=EFIELD*(Z-ZFINAL)*100.00
         IF(E1 < EPOT):
 :
          NELEC=NELEC+1
          ISOL=1
          GO TO 18
         # endIF 
        # endIF  
        CALL TCALCT(Z,DCZ1,E1,EFIELD,TZSTOP,TZSTOP1,ISOL,IZPLANE) 
        IF(TZSTOP == -99.00):
 :
# CATCH RUNAWAY ELECTRONS AT HIGH FIELD        
          NELEC=NELEC+1
          ISOL=1 
          GO TO 18
        # endIF   
        GO TO 555
       # endIF
# IF TWO SOLUTIONS REPEAT ENTRY FOR SECOND SOLUTION.         
      IF(ISOL == 2):
 :
       TZSTOP=TZSTOP1
       ISOL=1
       GO TO 15
      # endIF                 
      # endIF
      E=E1+(AP+BP*T)*T
      IF(E < 0.00):
 :
       WRITE(6,999) E,E1,AP,BP,T,DCZ1,ITER
 999   FORMAT(2X,' WARNING ENERGY LT.0. E=',D12.3,' E1=',D12.3,' AP=',D1
     /2.3,' BP=',D12.3,' T=',D12.3,/,' DCZ1=',D12.3,' ITER=',I10)     
       E=0.0010   
      # endIF     
# FIND IDENTITY OF GAS FOR COLLISION
      KGAS=0
      IF(NGAS == 1):
 :
       R2=drand48(RDUM)
       KGAS=1
       GO TO 4
      # endIF
      R2=drand48(RDUM)
    3 KGAS=KGAS+1
      IF(TCFMXG(KGAS):
 < R2) GO TO 3
# CALCULATE GAS VELOCITY VECTORS VGX,VGY,VGZ
    4 IMBPT=IMBPT+1
      IF(IMBPT > 6):
 :
       CALL GERJAN
       IMBPT=1
      # endIF
      VGX=VTMB[KGAS]*RNMX(IMBPT)
      IMBPT=IMBPT+1
      VGY=VTMB[KGAS]*RNMX(IMBPT)
      IMBPT=IMBPT+1
      VGZ=VTMB[KGAS]*RNMX(IMBPT)
# CALCULATE DIRECTION COSINES BEFORE COLLISION
      CONST6=math.sqrt(E1/E)
      DCX2=DCX1*CONST6
      DCY2=DCY1*CONST6
      DCZ2=DCZ1*CONST6+EFIELD*T*CONST5/math.sqrt(E)
      AIS=1.00
      IF(DCZ2 < 0.0):
 AIS=-1.00
      DCZ2=AIS*math.sqrt(1.00-DCX2*DCX2-DCY2*DCY2)
# CALCULATE ELECTRON VELOCITY VECTORS VEX,VEY,VEZ
      VTOT=CONST9*math.sqrt(E)
      VEX=DCX2*VTOT
      VEY=DCY2*VTOT
      VEZ=DCZ2*VTOT 
# CALCULATE ENERGY WITH STATIONARY GAS TARGET
      EOK=((VEX-VGX)**2+(VEY-VGY)**2+(VEZ-VGZ)**2)/CONST10  
      IE=DINT(EOK/ESTEP)+1                                             
      IE=DMIN0(IE,N4000)                                              
#                                                                       
#     TEST FOR #real OR NULL COLLISION 
#                                  
      R5=drand48(RDUM)                                        
      TEST1=TCF(KGAS,IE)/TCFMAX(KGAS)                                 
      IF(R5 <= TEST1):
 GO TO 137                                        
      NNULL=NNULL+1            
      TEST2=TEMP(KGAS,IE)/TCFMAX(KGAS)
      IF(R5 < TEST2):
 :
# TEST FOR NULL LEVELS
       IF(NPLAST(KGAS):
 == 0) GO TO 1
       R2=drand48(RDUM)
       I=0
  888  I=1+1
       IF(CFN(KGAS,IE,I):
 < R2) GO TO 888
# INCREMENT NULL SCATTER SUM
       ICOLNN(KGAS,I)=ICOLNN(KGAS,I)+1
       GO TO 1
      # endIF                       
      TEST3=(TEMP(KGAS,IE)+ABSFAKEI)/TCFMAX(KGAS)
      IF(R5 < TEST3):
 :
# FAKE IONISATION INCREMENT COUNTER AND ADD ELECTRON TO STORE
       IFAKE=IFAKE+1:
       IFAKED[IZPLANE]=IFAKED[IZPLANE]+1:
       IF(FAKEI < 0.0):
 :
        NEION=NEION+1
# FAKE ATTACHMENT START NEW ELECTRON
        IF(NELEC == (NCLUS+1):
) GO TO 544
# ELECTRON CAPTURED TAKE NEXT ELECTRON FROM STORE
        GO TO 20
       # endIF
# FAKE IONISATION ADD ELECTRON TO STORE
       NCLUS=NCLUS+1
       NPONT=NPONT+1
       NMXADD=MAX(NPONT,NMXADD) 
       IF(NPONT > 2000):
 :
        WRITE(6,546) NPONT,ITER
        STOP
       # endIF     
       A=T*CONST9*math.sqrt(E1)
       XSS(NPONT)=X+DCX1*A        
       YSS(NPONT)=Y+DCY1*A
       ZSS(NPONT)=Z+DCZ1*A+T*T*F1
       TSS(NPONT)=ST+T
       ESS(NPONT)=E
       DCXS(NPONT)=DCX2
       DCYS(NPONT)=DCY2
       AIS=1.00
       IF(DCZ2 < 0.0):
 AIS=-1.00
#      DCZS(NPONT)=DCZ2
       DCZS(NPONT)=AIS*math.sqrt(1.00-DCX2*DCX2-DCY2*DCY2)
       IDM1=1+DINT(ZSS(NPONT)/ZSTEP)
#       IF(ZSS(NPONT) > ZFINAL or ZSS(NPONT) < 0.0) :
#       NCLUS=NCLUS-1
#       NPONT=NPONT-1
#       IFAKE=IFAKE-1
#       IFAKED[IZPLANE]=IFAKED[IZPLANE]-1
#       GO TO 1
#      # endIF 
       IF(IDM1 < 1):
 IDM1=1
       IF(IDM1 > 9):
 IDM1=9     
       IPLS(NPONT)=IDM1
       NESST(IPLS(NPONT))=NESST(IPLS(NPONT))+1
       GO TO 1
      # endIF                  
      GO TO 1
  137 NCOL=NCOL+1
# CALCULATE DIRECTION COSINES OF ELECTRON IN 0 KELVIN FRAME
      CONST11=1.00/(CONST9*math.sqrt(EOK))   
      DXCOM=(VEX-VGX)*CONST11
      DYCOM=(VEY-VGY)*CONST11
      DZCOM=(VEZ-VGZ)*CONST11                             
#                                                                       
#  CALCULATE POSITIONS AT INSTANT BEFORE COLLISION
#    ALSO UPDATE DIFFUSION  AND ENERGY CALCULATIONS.                    
      T2=T*T
      IF(T >= TMAX1):
 TMAX1=T                                            
      TDASH=0.00                                                       
      CONST7=CONST9*math.sqrt(E1)                                           
      A=T*CONST7                                                        
      NCOL=NCOL+1                                                       
      CZ1=DCZ1*CONST7                                                   
      X=X+DCX1*A                                                        
      Y=Y+DCY1*A
      Z=Z+DCZ1*A+T2*F1
      ST=ST+T
      IT=DINT(T+1.00)                                              
      IT=DMIN0(IT,N300)                                               
      TIME(IT)=TIME(IT)+1.00                                           
      CX1=DCX1*CONST7                                                   
      CY1=DCY1*CONST7  
# ENERGY SPECTRUM FOR 0 KELVIN FRAME                                
      SPEC(IE)=SPEC(IE)+1.00                                         
# --------------------------------------------------------------------- 
#     DETERMINATION OF #real COLLISION TYPE                              
# --------------------------------------------------------------------- 
      R2=drand48(RDUM)
# FIND LOCATION WITHIN 4 UNITS IN COLLISION ARRAY
      CALL SORTT(KGAS,I,R2,IE)                                         
  140 I=I+1
      IF(CF(KGAS,IE,I):
 < R2) GO TO 140
      S1=RGAS(KGAS,I)                                                  
      EI=EIN(KGAS,I)
      IF(EOK < EI):
 :
# ENERGY LOSS SMALLER THAN INCIDENT ENERGY IF A ROUNDING ERROR OCCURS.
      EI=EOK-0.00010
      # endIF                                                         
      IF(IPN(KGAS,I):
 == 0) GO TO 666
# ATTACHMENT      
      IF(IPN(KGAS,I):
 == -1) :
       NEION=NEION+1
       IPT=IARRY(KGAS,I)
       ID=ID+1
       ITER=ITER+1
       IPRINT=IPRINT+1
       ICOLL(KGAS,IPT)=ICOLL(KGAS,IPT)+1
       ICOLN(KGAS,I)=ICOLN(KGAS,I)+1
       IT=DINT(T+1.00)
       IT=DMIN0(IT,N300)
       TIME(IT)=TIME(IT)+1.00
       ZTOT=ZTOT+Z
       TTOT=TTOT+ST
       ZTOTS=ZTOTS+Z-ZSTRT
       TTOTS=TTOTS+ST-TSSTRT
       IDM1=1+DINT(Z/ZSTEP)
       IF(IDM1 < 1):
 IDM1=1
       IF(IDM1 > 9):
 IDM1=9
       NESST(IDM1)=NESST(IDM1)-1
# ELECTRON CAPTURED START NEW PRIMARY 
       IF(NELEC == (NCLUS+1):
) GO TO 544      
# ELECTRON CAPTURED TAKE NEXT ELECTRON FROM STORE       
       GO TO 20
      # endIF    
      EISTR=EI                                             
      R9=drand48(RDUM)
#     ESEC=R9*(EOK-EI) 
#  USE OPAL PETERSON AND BEATY SPLITTING FACTOR.
      ESEC=WPL(KGAS,I)*TAN(R9*ATAN((EOK-EI)/(2.00*WPL(KGAS,I)))) 
      ESEC=WPL(KGAS,I)*(ESEC/WPL(KGAS,I))**0.9524 
      EI=ESEC+EI 
# STORE POSITION ,ENERGY, DIRECTION COSINES AND TIME OF GENERATION
# OF IONISATION ELECTRON      
      NCLUS=NCLUS+1
      NPONT=NPONT+1
      NMXADD=MAX(NPONT,NMXADD) 
      IF(NPONT > 2000):
 :
      WRITE(6,546) NPONT,ITER
 546  FORMAT(2X,' def STOPPED NPONT=',I5,' ITER=',I10)
      STOP
      # endIF     
      XSS(NPONT)=X        
      YSS(NPONT)=Y
      ZSS(NPONT)=Z
      TSS(NPONT)=ST
      ESS(NPONT)=ESEC
      NTMPFLG=1
      NCLTMP=NPONT
# RANDOMISE SECONDARY ELECTRON DIRECTION
#      R3=drand48(RDUM)
#      F3=1.00-2.00*R3
#      THETA0=DACOS(F3)
#      F6=DCOS(THETA0)
#      F5=DSIN(THETA0)
#      R4=drand48(RDUM)
#      PHI0=F4*R4
#      F8=DSIN(PHI0)
#      F9=DCOS(PHI0)               
#      DCXS(NPONT)=F9*F5
#      DCYS(NPONT)=F8*F5
#      DCZS(NPONT)=F6
      IDM1=1+DINT(Z/ZSTEP)
      IF(IDM1 < 1):
 IDM1=1
      IF(IDM1 > 9):
 IDM1=9     
      IPLS(NPONT)=IDM1 
      NESST(IPLS(NPONT))=NESST(IPLS(NPONT))+1
# STORE POSSIBLE SHELL EMISSIONS AUGER OR FLUORESCENCE
      IF(EISTR > 30.0):
 :
# AUGER EMISSION WITHOUT FLUORESCENCE
       NAUG=NC0(KGAS,I)
       EAVAUG=EC0(KGAS,I)/DFLOAT(NAUG)
       DO 701 JFL=1,NAUG
       NCLUS=NCLUS+1 
       NPONT=NPONT+1
       XSS(NPONT)=X
       YSS(NPONT)=Y
       ZSS(NPONT)=Z
       TSS(NPONT)=ST
       ESS(NPONT)=EAVAUG
       R3=drand48(RDUM)
       F3=1.00-2.00*R3
       THETA0=DACOS(F3)
       F6=DCOS(THETA0)
       F5=DSIN(THETA0)
       R4=drand48(RDUM)
       PHI0=F4*R4
       F8=DSIN(PHI0)
       F9=DCOS(PHI0)
       DCXS(NPONT)=F9*F5
       DCYS(NPONT)=F8*F5
       DCZS(NPONT)=F6
       IDM1=1+DINT(Z/ZSTEP)
       IF(IDM1 < 1):
 IDM1=1
       IF(IDM1 > 9):
 IDM1=9
       IPLS(NPONT)=IDM1
       NESST(IDM1)=NESST(IDM1)+1
  701  CONTINUE
      # endIF
#                                                                       
#  GENERATE SCATTERING ANGLES AND UPDATE  LABORATORY COSINES AFTER      
#   COLLISION ALSO UPDATE ENERGY OF ELECTRON.                           
#                                                                       
  666 IPT=IARRY(KGAS,I)
      ID=ID+1
      ITER=ITER+1
      IPRINT=IPRINT+1
      ICOLL(KGAS,IPT)=ICOLL(KGAS,IPT)+1
      ICOLN(KGAS,I)=ICOLN(KGAS,I)+1
# IF EXCITATION : ADD PROBABILITY,PENFRA(1,I), OF TRANSFER TO GIVE
# IONISATION OF THE OTHER GASES IN THE MIXTURE.
      IF(IPEN == 0):
 GO TO 5 
      IF(PENFRA[KGAS,1,I] != 0.0):
 :
       RAN=drand48(RDUM)
       IF(RAN > PENFRA[KGAS,1,I]):
 GO TO 5
       NCLUS=NCLUS+1
       NPONT=NPONT+1
       IF(NPONT > 2000):
 :
        WRITE(6,546) NPONT,ITER
        STOP
       # endIF 
# ENTER HERE POSSIBLE DELOCALISATION LENGTH FOR PENNING TRANSFER
       IF(PENFRA[KGAS,2,I] == 0.0):
 :
        XSS(NPONT)=X
        YSS(NPONT)=Y
        ZSS(NPONT)=Z
        IF(ZSS(NPONT):
 > ZFINAL or ZSS(NPONT) < 0.0) GO TO 669
        GO TO 667
       # endIF
       ASIGN=1.0
       RAN=drand48(RDUM)
       RAN1=drand48(RDUM)
       IF(RAN1 < 0.5):
 ASIGN=-ASIGN
       XSS(NPONT)=X-math.log(RAN)*PENFRA[KGAS,2,I]*ASIGN
       RAN=drand48(RDUM)
       RAN1=drand48(RDUM)
       IF(RAN1 < 0.5):
 ASIGN=-ASIGN
       YSS(NPONT)=Y-math.log(RAN)*PENFRA[KGAS,2,I]*ASIGN
       RAN=drand48(RDUM)
       RAN1=drand48(RDUM)
       IF(RAN1 < 0.5):
 ASIGN=-ASIGN
       ZSS(NPONT)=Z-math.log(RAN)*PENFRA[KGAS,2,I]*ASIGN
       IF(ZSS(NPONT):
 < 0.0) GO TO 669
       IF(ZSS(NPONT):
 > ZFINAL or ZSS(NPONT) < 0.0) GO TO 669
  667  TPEN=ST
       IF(PENFRA[KGAS,3,I] == 0.):
 GO TO 668 
       RAN=drand48(RDUM)
       TPEN=ST-math.log(RAN)*PENFRA[KGAS,3,I]
  668  TSS(NPONT)=TPEN
       ESS(NPONT)=1.0
       DCXS(NPONT)=DCX1 
       DCYS(NPONT)=DCY1 
       DCZS(NPONT)=DCZ1
# FIND LAST PLANE BEFORE ZSS(NPONT)
       IDM1=1+DINT(ZSS(NPONT)/ZSTEP)
       IF(IDM1 < 1):
 IDM1=1
       IF(IDM1 > 9):
 IDM1=9
       IPLS(NPONT)=IDM1
       NESST(IPLS(NPONT))=NESST(IPLS(NPONT))+1
       GO TO 5  
#     PENNING TRANSFER OCCURS BEFORE FIRST SPACE PLANE CLEAR ENTRY
  669  NPONT=NPONT-1
       NCLUS=NCLUS-1
      # endIF
    5 S2=(S1*S1)/(S1-1.00) 
# ANISOTROPIC SCATTERING
      R3=drand48(RDUM)
      IF(INDEX(KGAS,I):
 == 1) :
       R31=drand48(RDUM)
       F3=1.00-R3*ANGCT(KGAS,IE,I)
       IF(R31 > PSCT(KGAS,IE,I):
) F3=-F3
      elif(INDEX(KGAS,I) == 2) :
       EPSI=PSCT(KGAS,IE,I)
       F3=1.00-(2.00*R3*(1.00-EPSI)/(1.00+EPSI*(1.00-2.00*R3)))
      else:
# ISOTROPIC SCATTERING
       F3=1.00-2.00*R3 
      # endIF
      THETA0=DACOS(F3)                                                  
      R4=drand48(RDUM)
      PHI0=F4*R4                                                        
      F8=DSIN(PHI0)                                                     
      F9=DCOS(PHI0)                                                     
      IF(EOK < EI):
 EI=0.00                                           
      ARG1=1.00-S1*EI/EOK                                             
      ARG1=DMAX1(ARG1,SMALL)                                            
      D=1.00-F3*math.sqrt(ARG1)                                            
      E1=EOK*(1.00-EI/(S1*EOK)-2.00*D/S2)                            
      E1=DMAX1(E1,SMALL)                                                
      Q=math.sqrt((EOK/E1)*ARG1)/S1                                        
      Q=DMIN1(Q,1.00)                                                  
      THETA=DASIN(Q*DSIN(THETA0))                                       
      F6=DCOS(THETA)                                                    
      U=(S1-1.00)*(S1-1.00)/ARG1                                      
      CSQD=F3*F3                                                        
      IF(F3 < 0.00 and CSQD > U):
 F6=-1.00*F6                        
      F5=DSIN(THETA)                                                    
      DZCOM=DMIN1(DZCOM,1.00)                                        
      ARGZ=math.sqrt(DXCOM*DXCOM+DYCOM*DYCOM)  
      IF(ARGZ == 0.00):
 :
       DCZ1=F6        
       DCX1=F9*F5                       
       DCY1=F8*F5 
       IF(NTMPFLG == 1):
 :
# USE FREE KINEMATICS FOR IONISATION SECONDARY ANGLE
        F5S=F5*math.sqrt(E1/ESS(NCLTMP))
        IF(F5S > 1.0):
 F5S=1.0
        THSEC=DASIN(F5S)
        F5S=DSIN(THSEC)
        F6S=DCOS(THSEC)
        IF(F6 < 0.0):
 F6S=-F6S
        PHIS=PHI0+API
        IF(PHIS > F4):
 PHIS=PHI0-F4
        F8S=DSIN(PHIS)
        F9S=DCOS(PHIS)
        DCZS(NCLTMP)=F6S
        DCYS(NCLTMP)=F8S*F5S
        DCXS(NCLTMP)=F9S*F5S
        NTMPFLG=0 
       # endIF 
       GO TO 190
      # endIF                                                   
      DCZ1=DZCOM*F6+ARGZ*F5*F8                                         
      DCY1=DYCOM*F6+(F5/ARGZ)*(DXCOM*F9-DYCOM*DZCOM*F8)                 
      DCX1=DXCOM*F6-(F5/ARGZ)*(DYCOM*F9+DXCOM*DZCOM*F8)
      IF(NTMPFLG == 1):
 :
# USE FREE KINEMATICS FOR IONISATION SECONDARY ANGLE
       F5S=F5*math.sqrt(E1/ESS(NCLTMP))
       IF(F5S > 1.0):
 F5S=1.0
       THSEC=DASIN(F5S)
       F5S=DSIN(THSEC)
       F6S=DCOS(THSEC)
       IF(F6 < 0.0):
 F6S=-F6S
       PHIS=PHI0+API
       IF(PHIS > F4):
 PHIS=PHI0-F4
       F8S=DSIN(PHIS)
       F9S=DCOS(PHIS)
       DCZS(NCLTMP)=DZCOM*F6S+ARGZ*F5S*F8S
       DCYS(NCLTMP)=DYCOM*F6S+(F5S/ARGZ)*(DXCOM*F9S-DYCOM*DZCOM*F8S)
       DCXS(NCLTMP)=DXCOM*F6S-(F5S/ARGZ)*(DYCOM*F9S+DXCOM*DZCOM*F8S)
       NTMPFLG=0
      # endIF
 190  CONTINUE
# TRANSFORM VELOCITY VECTORS TO LAB FRAME
      CONST12=CONST9*math.sqrt(E1)
      VXLAB=DCX1*CONST12+VGX
      VYLAB=DCY1*CONST12+VGY
      VZLAB=DCZ1*CONST12+VGZ
# CALCULATE ENERGY AND DIRECTION COSINES IN LAB FRAME
      E1=(VXLAB*VXLAB+VYLAB*VYLAB+VZLAB*VZLAB)/CONST10
      CONST11=1.00/(CONST9*math.sqrt(E1))
      DCX1=VXLAB*CONST11
      DCY1=VYLAB*CONST11
      DCZ1=VZLAB*CONST11
# STORE DIRECTION COSINES AND ENERGY AFTER N COLLISIONS
# FOR LATER REUSE IN PRIMARY GENERATION.
      I100=I100+1
      IF(I100 == 200):
 :
       DCZ100=DCZ1
       DCX100=DCX1                            
       DCY100=DCY1 
       E100=E1
       I100=0
      # endIF 
      IF(Z > ZFINAL):
 :
# CHECK IF ELECTRON HAS ENOUGH ENERGY TO GO BACK TO FINAL PLANE.
       EPOT=EFIELD*(Z-ZFINAL)*100.00
       IF(E1 < EPOT):
 GO TO 18
      # endIF    
# CALCULATE TIME TZSTOP TO ARRIVE AT NEXT Z PLANE IZPLANE.
      CALL TCALCT(Z,DCZ1,E1,EFIELD,TZSTOP,TZSTOP1,ISOL,IZPLANE)
# CATCH RUNAWAY ELECTRONS AT HIGH FIELD       
      IF(TZSTOP == -99.00):
 GO TO 18
      IF(IPRINT > JPRINT):
 GO TO 200
      GO TO 1                                    
#    INTERMEDIATE PRINTOUT                       
 200  IPRINT=0
      W=ZTOTS/TTOTS                          
      W=W*1.0D+09                                                       
      XID=DFLOAT(ID)
      JCT=ID/100000
#     IF(J1 <= 10) WRITE(6,201)                                         
# 201 FORMAT(/,7X,'INTERMEDIATE OUTPUT',/,'    VEL       POS       TIME 
#    /     COUNT')                  
#     WRITE(6,202) W,ZTOTS,TTOTS,JCT     
# 202 FORMAT(1X,F8.3,2(1X,D10.3),1X,I6)  
#     write(6,7672) IFAKE 
#7672 FORMAT(' IFAKE=',I10)
      J1=J1+1            
      GO TO 1
#  MAIN LOOP # end          
  700 XID=DFLOAT(ID)
      IF(NELEC > IPRIM):
 : 
       ANEION=DFLOAT(NEION)
       ANBT=DFLOAT(NELEC-IPRIM)
       ATTOION=ANEION/ANBT 
       ATTATER=math.sqrt(ANEION)/ANEION 
       ATTIOER=math.sqrt(ANBT)/ANBT                  
      else:
       ATTOION=-1.00
       ANEION=DFLOAT(NEION)
       ATTATER=math.sqrt(ANEION)/ANEION
      # endIF 
      JCT=ID/10000
      IF(J1 == 1):
 :
      WRITE(6,940) NCLUS,ITER,NELEC,NEION
  940 FORMAT(2(/),' def STOPPED (TOO FEW COLLISIONS), DECREASE THE
     /ESTIMATED ALPHA.  NCLUS=',I7,'  ITER =',I9,' NELEC=',I9,' NEION ='
     /,I6)   
      # endIF
      WRITE(6,878) NELEC,NEION,IPRIM
 878  FORMAT(/,' TOTAL NO OF ELECTRONS=',I10,/,' TOTAL NO OF NEG. IONS='
     /,I10,/,' TOTAL NO OF PRIMARIES=',I10)  
      EPRMBAR=0.00
      E2PRM=0.00
      IF(IPRIM == 1):
 RETURN     
      DO 310 I=1,IPRIM
      E2PRM=E2PRM+EPRM(I)*EPRM(I)
  310 EPRMBAR=EPRMBAR+EPRM(I) 
      EBAR=EPRMBAR/IPRIM 
      EERR=math.sqrt(E2PRM/IPRIM-EBAR**2)
      WRITE(6,836) EBAR,EERR
  836 FORMAT(/,2X,'AVERAGE ENERGY OF PRIMARY ELECTRON =',F10.3,' EV.',/,
     /'   ENERGY SPREAD OF PRIMARY ELECTRON =',F10.3,' EV.')
#     WRITE(6,837) (IESPECP(J),J=1,100)
# 837 FORMAT(/,2X,'ENERGY SPECTRUM OF PRIMARIES IN 1EV BINS',/,10(2X,10I
#    /5,/))
      RETURN    
  315 IF(ITER > NMAX) :
       WRITE(6,991) ITER,NMAX,NPONT,NELEC,IPRIM,NMXADD
 991   FORMAT(2(/),' def STOPPED.  ITER =',I10,'    NMAX =',I10,/,
     /' NPONT=',I4,' NELEC=',I8,' IPRIM=',I6,' NMXADD=',I3) 
       STOP
      # endIF                                                             
      RETURN                                                            
      # end
      def SPLANET(T,E1,DCX1,DCY1,DCZ1,AP,BP,EFLD,TIMLFT,IZPLANE):
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5
      COMMON/OUTPTT/TIME(300),ICOLL(6,5),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(6,290),ICOLNN(6,10) 
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/SPLOUT/ESPL(8),XSPL(8),YSPL(8),ZSPL(8),TSPL(8),XXSPL(8),
     /YYSPL(8),ZZSPL(8),VZSPL(8),TSSUM(8),TSSUM2(8),ATTOION,ATTIOER,
     /ATTATER,NESST(9)
      COMMON/SPL1/TMSPL(8),TTMSPL(8),RSPL(8),RRSPL(8),RRSPM(8)
#--------------------------------------------------------
# STORES POSITION, TIME AND ENERGY AND SUMS REQUIRED
# TO CALCULATE DEVIATIONS AND MEANS AT PLANE =IZPLANE   
#---------------------------------------------------- 
      IF(IZPLANE > 8):
 RETURN
      T2LFT=TIMLFT*TIMLFT
      A=AP*TIMLFT
      B=BP*T2LFT 
      EPLANE=E1+A+B                      
      CONST6=math.sqrt(E1/EPLANE)         
#     DCX2=DCX1*CONST6
#     DCY2=DCY1*CONST6
      DCZ2=DCZ1*CONST6+EFLD*TIMLFT*CONST5/math.sqrt(EPLANE)
      XPLANE=X+DCX1*TIMLFT*math.sqrt(E1)*CONST3*0.010
      YPLANE=Y+DCY1*TIMLFT*math.sqrt(E1)*CONST3*0.010
      ZPLANE=Z+DCZ1*TIMLFT*math.sqrt(E1)*CONST3*0.010+T2LFT*EFLD*CONST2
      VZPLANE=DCZ2*math.sqrt(EPLANE)*CONST3*0.010
      WGHT=abs(1.00/VZPLANE)
      RPLANE=math.sqrt(XPLANE**2+YPLANE**2)
      XSPL(IZPLANE)=XSPL(IZPLANE)+XPLANE*WGHT
      YSPL(IZPLANE)=YSPL(IZPLANE)+YPLANE*WGHT
      RSPL(IZPLANE)=RSPL(IZPLANE)+RPLANE*WGHT
      ZSPL(IZPLANE)=ZSPL(IZPLANE)+ZPLANE*WGHT
      TMSPL(IZPLANE)=TMSPL(IZPLANE)+(ST+TIMLFT)*WGHT
      TTMSPL(IZPLANE)=TTMSPL(IZPLANE)+(ST+TIMLFT)*(ST+TIMLFT)*WGHT
      XXSPL(IZPLANE)=XXSPL(IZPLANE)+XPLANE*XPLANE*WGHT 
      YYSPL(IZPLANE)=YYSPL(IZPLANE)+YPLANE*YPLANE*WGHT
      RRSPM(IZPLANE)=RRSPM(IZPLANE)+RPLANE*RPLANE*WGHT
      ZZSPL(IZPLANE)=ZZSPL(IZPLANE)+ZPLANE*ZPLANE*WGHT 
      ESPL(IZPLANE)=ESPL(IZPLANE)+EPLANE*WGHT
      TSPL(IZPLANE)=TSPL(IZPLANE)+WGHT/(ST+TIMLFT)
      VZSPL(IZPLANE)=VZSPL(IZPLANE)+VZPLANE*WGHT
      TSSUM(IZPLANE)=TSSUM(IZPLANE)+WGHT
      TSSUM2(IZPLANE)=TSSUM2(IZPLANE)+WGHT*WGHT
      RETURN
      # end
      def TCALCT(Z,DCZ1,E1,EFIELD,TZSTOP1,TZSTOP2,ISOL,IZPLANE): 
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/CTCALC/ZPLANE1,ZPLANE2,ZPLANE3,ZPLANE4,ZPLANE5,ZPLANE6,
     /ZPLANE7,ZPLANE8,IZFINAL 
#----------------------------------------------------------------------
# CALCULATE ELAPSED TIME ,TZSTOP1, UNTIL ARRIVAL AT NEXT PLANE ,IZPLANE.
# IF TWO POSITIVE SOLUTIONS SET ISOL=2 AND CALCULATE SECOND SOLUTION 
#  TZSTOP2.
#-----------------------------------------------------------------------
      ISOL=1
      A=EFIELD*CONST2
      B=math.sqrt(E1)*CONST3*0.010*DCZ1
      B2=B*B
      IF(Z < ZPLANE1):
 :
       IZPLANE=1
       C1=Z-ZPLANE1
       elif(Z < ZPLANE2) :
       IZPLANE=2
       C1=Z-ZPLANE2
       C2=Z-ZPLANE1
       elif(Z < ZPLANE3) :
       IZPLANE=3
       C1=Z-ZPLANE3
       C2=Z-ZPLANE2
       elif(Z < ZPLANE4) :
       IZPLANE=4
       C1=Z-ZPLANE4
       C2=Z-ZPLANE3
       elif(Z < ZPLANE5) :
       IZPLANE=5
       C1=Z-ZPLANE5
       C2=Z-ZPLANE4
       elif(Z < ZPLANE6) :
       IZPLANE=6
       C1=Z-ZPLANE6
       C2=Z-ZPLANE5
       elif(Z < ZPLANE7) :
       IZPLANE=7
       C1=Z-ZPLANE7
       C2=Z-ZPLANE6
       elif(Z < ZPLANE8) : 
       IZPLANE=8
       C1=Z-ZPLANE8
       C2=Z-ZPLANE7
       else:                                 
       IZPLANE=9
       C1=Z-ZPLANE8-10.00*ZSTEP
       C2=Z-ZPLANE8
       # endIF   
# CHECK PLANE IN DRIFT DIRECTION ( ONLY ONE TIME SOLUTION POSITIVE) 
      FAC=B2-4.00*A*C1
      IF(FAC < 0.00):
 :
# PASSED FINAL PLANE  (RUNAWAY ELECTRONS)      
       TZSTOP1=-99.00
       RETURN
      # endIF      
      TSTOP1=(-B+math.sqrt(B2-4.00*A*C1))/(2.00*A)
      TSTOP2=(-B-math.sqrt(B2-4.00*A*C1))/(2.00*A)
      IF(TSTOP1 < TSTOP2):
 :
       IF(TSTOP1 >= 0.00):
        TZSTOP1=TSTOP1
       else:
        TZSTOP1=TSTOP2
       # endIF
       IF(IZPLANE == 1):
 RETURN 
      else:     
       IF(TSTOP2 >= 0.00):
 :   
        TZSTOP1=TSTOP2
       else:
        TZSTOP1=TSTOP1
       # endIF               
       IF(IZPLANE == 1):
 RETURN
      # endIF
# CHECK PLANE IN BACKWARD DIRECTION (ONLY IF #real SOLUTION)
      FAC=B2-4.00*A*C2
      IF(FAC < 0.00):
 RETURN
      TSTOP1=(-B+math.sqrt(FAC))/(2.00*A)                         
      TSTOP2=(-B-math.sqrt(FAC))/(2.00*A)
# SOLUTIONS CAN BE EITHER BOTH POSITIVE OR BOTH NEGATIVE
# PICK POSITIVE SOLUTIONS AND ORDER IN TIME SEQUENCE OR
#  RETURN IF NEGATIVE
      IF(TSTOP1 < 0.00):
 RETURN
#  FOUND BACKWARD SOLUTIONS
      ISOL=2 
      IZPLANE=IZPLANE-1          
      IF(TSTOP1 < TSTOP2):
 :
       TZSTOP1=TSTOP1
       TZSTOP2=TSTOP2          
      else:            
       TZSTOP1=TSTOP2
       TZSTOP2=TSTOP1 
      # endIF   
      RETURN
      # end
      def SST :
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/SPLOUT/ESPL(8),XSPL(8),YSPL(8),ZSPL(8),TSPL(8),XXSPL(8),
     /YYSPL(8),ZZSPL(8),VZSPL(8),TSSUM(8),TSSUM2(8),ATTOION,ATTIOER,
     /ATTATER,NESST(9)
      COMMON/SPL1/TMSPL(8),TTMSPL(8),RSPL(8),RRSPL(8),RRSPM(8)
      COMMON/CTCALC/ZPLANE1,ZPLANE2,ZPLANE3,ZPLANE4,ZPLANE5,ZPLANE6,
     /ZPLANE7,ZPLANE8,IZFINAL
      COMMON/SSTOUT/VDOUT,VDERR,WSOUT,WSERR,DLOUT,DLERR,DTOUT,DTERR,
     /ALPHSST,ALPHERR,ATTSST,ATTERR  
      COMMON/THRM/AMGAS(6),VTMB[6],TCFMX,TCFMXG(6),ITHRM      
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9] 
      DIMENSION ESST(8),VDSST(8),WSSST(8),DXSST(8),DYSST(8),WTEMP(8)
      DIMENSION DRSST(8)
      DIMENSION ALFNE(8),ALFNJ(8),ALFN(8),ZSST(8),DLSST(8)          
      DIMENSION DRSS1(8),DRSS2(8),DRSS3(8),ALFEX1(8),NEPL(8)
#----------------------------------------------------------------------
# CALCULATES STEADY STATE TOWNS# end COEFFICIENTS.
# LOADS REULTS AND ERRORS INTO COMMON BLOCKS /SSTOUT/
# -------------------------------------------------------------------
      VDOUT=0.00
      VDERR=0.00
      WSOUT=0.00
      WSERR=0.00
      DLOUT=0.00
      DLERR=0.00
      DTOUT=0.00
      DTERR=0.00
      ALPHSST=0.00
      ALPHERR=0.00
      ATTSST=0.00
      ATTERR=0.00
# CALC TOTAL ATTACHMENT RATE AND IONISATION RATE
      JPRINT=IZFINAL
# CALCULATE NUMBER OF ELECTRONS AT EACH PLANE
      NEPL(1)=IPRIM+NESST(1)
      DO 21 K=2,JPRINT
      NEPL(K)=NEPL(K-1)+NESST(K)
  21  CONTINUE   
#  SUBSTITUTE NEPL FOR NEEST
      DO 22 K=1,JPRINT
  22  NESST(K)=NEPL(K)
      DO 23 I=1,JPRINT
      IF(NESST(I):
 == 0) :
       JPRINT=I-1
       GO TO 24
      # endIF 
  23  CONTINUE
  24  ESST(1)=ESPL(1)/TSSUM(1)
      ZSST(1)=ZSPL(1)/TSSUM(1)
      VDSST(1)=VZSPL(1)/TSSUM(1)
      WTEMP(1)=ZSTEP*TSSUM(1)/TMSPL(1)
      WSSST(1)=WTEMP(1)
      DXSST(1)=((XXSPL(1)/TSSUM(1))-(XSPL(1)/TSSUM(1))**2)*WSSST(1)/
     /(2.00*ZSTEP)
      DYSST(1)=((YYSPL(1)/TSSUM(1))-(YSPL(1)/TSSUM(1))**2)*WSSST(1)/
     /(2.00*ZSTEP)    
      DLSST(1)=((TTMSPL(1)/TSSUM(1))-(TMSPL(1)/TSSUM(1))**2)*WSSST(1)**3
     //(2.00*ZSTEP)
      IF(ITHRM == 1):
 CALL COLFT(DUM1,DUM2,FRION,FRATT,DUM3,IDUM4) 
      IF(ITHRM == 0):
 CALL COLF(DUM1,DUM2,FRION,FRATT,DUM3,IDUM4)
# CORRECT FOR FAKE IONISATION
      CORF=(FRION-FRATT)/(FAKEI+FRION-FRATT) 
      ATTOION=FRATT/FRION
      CORERR=abs((FAKEI+FRION-FRATT)/(FRION-FRATT))
#     WRITE(6,8765) FAKEI,FRION,FRATT,CORF
#8765 FORMAT(' FAKEI=',D12.4,' FRION=',D12.4,' FRATT=',D12.4,' CORF=',
#    /D12.4)
      IF(NESST(1):
 == 0) GO TO 1 
      ALFNE(1)=CORF*(math.log(DFLOAT(NESST(1)))-math.log(DFLOAT(IPRIM)))/ZSTEP
    1 ALFNJ(1)=0.00
      ALFN(1)=0.00 
      DO 10 I=2,JPRINT 
      ESST(I)=ESPL(I)/TSSUM(I)
      ZSST(I)=ZSPL(I)/TSSUM(I)
      VDSST(I)=VZSPL(I)/TSSUM(I)
      WTEMP(I)=ZSTEP*DFLOAT(I)*TSSUM(I)/TMSPL(I)
      WSSST(I)=(WTEMP(I)*WTEMP(I-1))/(I*WTEMP(I-1)-(I-1)*WTEMP(I))
      DXSST(I)=((XXSPL(I)/TSSUM(I))-(XSPL(I)/TSSUM(I))**2-(XXSPL(I-1)/
     /TSSUM(I-1))+(XSPL(I-1)/TSSUM(I-1))**2)*WSSST(I)/(2.00*ZSTEP)
      DYSST(I)=((YYSPL(I)/TSSUM(I))-(YSPL(I)/TSSUM(I))**2-(YYSPL(I-1)/
     /TSSUM(I-1))+(YSPL(I-1)/TSSUM(I-1))**2)*WSSST(I)/(2.00*ZSTEP)
      DLSST(I)=((TTMSPL(I)/TSSUM(I))-(TMSPL(I)/TSSUM(I))**2-(TTMSPL(I-1)
     //TSSUM(I-1))+(TMSPL(I-1)/TSSUM(I-1))**2)*WSSST(I)**3/(2.00*ZSTEP)
      ALFN(I)=(math.log(TSSUM(I))-math.log(TSSUM(I-1)))/ZSTEP
      ALFNJ(I)=(math.log(TSSUM(I)*VDSST(I))-math.log(TSSUM(I-1)*VDSST(I-1)))/ZST
     /EP
      ALFNE(I)=0.00
      IF(NESST(I):
 == 0 or NESST(I-1) == 0) GO TO 9
    9 ALFNE(I)=(math.log(DFLOAT(NESST(I)))-math.log(DFLOAT(NESST(I-1))))/ZSTEP
      ALFN(I)=CORF*ALFN(I)
      ALFNE(I)=CORF*ALFNE(I)
      ALFNJ(I)=CORF*ALFNJ(I)
   10 CONTINUE
      DXFIN=((XXSPL(JPRINT)/TSSUM(JPRINT))-(XSPL(JPRINT)/TSSUM(JPRINT))
     /**2)*WSSST(JPRINT)/(JPRINT*2.00*ZSTEP)
      DXFIN=DXFIN*1.0D+16 
      DYFIN=((YYSPL(JPRINT)/TSSUM(JPRINT))-(YSPL(JPRINT)/TSSUM(JPRINT))
     /**2)*WSSST(JPRINT)/(JPRINT*2.00*ZSTEP)
      DYFIN=DYFIN*1.0D+16
      DLFIN=((TTMSPL(JPRINT)/TSSUM(JPRINT))-(TMSPL(JPRINT)/TSSUM(JPRINT)
     /)**2)*WSSST(JPRINT)**3/(JPRINT*2.00*ZSTEP)
      DLFIN=DLFIN*1.0D+16
      ALNGTH=ZSTEP*DFLOAT(JPRINT)
      ALFIN=math.log(DFLOAT(NESST(JPRINT))/DFLOAT(IPRIM))/ALNGTH
      ALFIN=ALFIN*0.010
      DO 15 J=1,JPRINT       
      VDSST(J)=VDSST(J)*1.0D+09
      WSSST(J)=WSSST(J)*1.0D+09
      DXSST(J)=DXSST(J)*1.0D+16  
      DYSST(J)=DYSST(J)*1.0D+16
      DLSST(J)=DLSST(J)*1.0D+16
      ALFN(J)=ALFN(J)*0.010 
      ALFNJ(J)=ALFNJ(J)*0.010 
      ALFNE(J)=ALFNE(J)*0.010
  15  CONTINUE
      WRITE(6,800) JPRINT     
 800  FORMAT(2(/),' STEADY STATE TOWNS# end RESULTS FOR',I2,' SEQUENTIAL S
     /PACE PLANES',2(/),'PLANE   NEL     VD      WS     DL       DT    
     /EBAR   ALFN    ALFNJ   ALFNE',/)  
      DO 20 IPL=1,JPRINT  
      DRSST(IPL)=(DXSST(IPL)+DYSST(IPL))/2.0    
  20  WRITE(6,810)IPL,NESST(IPL),VDSST(IPL),WSSST(IPL),DLSST(IPL),DRSST(
     /IPL),ESST(IPL),ALFN(IPL),ALFNJ(IPL),ALFNE(IPL)
 810  FORMAT(1X,I2,2X,I7,2(1X,F6.1),2F9.1,F7.2,3F8.1)
      IF(NESST(1):
 > NESST(5)) :
# NET ATTACHMENT THEREFORE TAKE RESULTS FROM PLANE 2
       VDOUT=VDSST(2)
       VDERR=100.00*abs((VDSST(2)-VDSST(3))/(2.00*VDSST(2)))
       WSOUT=WSSST(2)
       WSERR=100.00*abs((WSSST(2)-WSSST(3))/(2.00*WSSST(2)))
       DLOUT=DLSST(2)
       DLERR=100.00*abs((DLSST(2)-DLSST(3))/(2.00*DLSST(2)))
       DTOUT=DRSST(2)
       DTERR=100.00*abs((DRSST(2)-DRSST(3))/(2.00*DRSST(2)))
       IF(ATTOION == -1.00):
 :
# NO IONISATION       
        ALPHSST=0.0
        ALPHERR=0.0
        ANST2=DFLOAT(NESST(2))
        ANST3=DFLOAT(NESST(3))
        ANST4=ANST3-math.sqrt(ANST3)
        ANST5=math.log(ANST2/ANST3)
        ANST6=math.log(ANST2/ANST4)
        ANST7=ANST6/ANST5
        ANST8=ANST7-1.00
        ATTSST=-(ALFN(2)+ALFNJ(2)+ALFNE(2))/3.00
        ATTERR=100.00*math.sqrt(ANST8**2+ATTATER**2)         
       else:
        ANST2=DFLOAT(NESST(2))
        ANST3=DFLOAT(NESST(3))
        ANST4=ANST3-math.sqrt(ANST3)
        ANST5=math.log(ANST2/ANST3)
        ANST6=math.log(ANST2/ANST4)
        ANST7=ANST6/ANST5
        ANST8=ANST7-1.00
        ATMP=(ALFN(2)+ALFNJ(2)+ALFNE(2))/3.00
        ALPHSST=ATMP/(1.00-ATTOION)
        ALPHERR=100.00*math.sqrt(ANST8**2+ATTIOER**2)
        ATTSST=ATTOION*ATMP/(1.00-ATTOION)
        ATTERR=100.00*math.sqrt(ANST8**2+ATTATER**2)
       # endIF
      else: 
# NET IONISATION THEREFORE TAKE RESULTS FROM PLANE 8
       VDOUT=VDSST(8)
       VDERR=100.00*abs((VDSST(8)-VDSST(7))/VDSST(8))
       WSOUT=WSSST(8)
       WSERR=100.00*abs((WSSST(8)-WSSST(7))/WSSST(8))
       DLOUT=DLFIN   
       DLERR=100.00*abs((DLOUT-DLSST(8))/DLOUT)
       DTOUT=(DXFIN+DYFIN)/2.00
       DTERR=100.00*abs((DTOUT-DRSST(8))/DTOUT)
       ATMP=(ALFN(8)+ALFNJ(8)+ALFNE(8))/3.00
       ATMP2=(ALFN(7)+ALFNJ(7)+ALFNE(7))/3.00
       ATER=abs((ATMP-ATMP2)/ATMP) 
       ALPHSST=ATMP/(1.00-ATTOION)
#      WRITE(6,885) ATMP,ATTOION
# 885  FORMAT(' ATMP=',D12.4,' ATTOION=',D12.4)
       ALPHERR=100.00*math.sqrt(ATER**2+ATTIOER**2)
       ATTSST=ATTOION*ATMP/(1.00-ATTOION)
       IF(ATTOION != 0.00):
 :
        ATTERR=100.00*math.sqrt(ATER**2+ATTATER**2)
       else:
        ATTERR=0.00
       # endIF 
      # endIF 
      RETURN
      # end
      def OUTPUT2T:
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/E(4000),EROOT(4000),QTOT(4000),QREL(4000),QINEL(4000),
     /QEL(4000)                                                         
      COMMON/MIX1/QELM(4000),QSUM(4000),QION(6,4000),QIN1(250,4000),    
     /QIN2(250,4000),QIN3(250,4000),QIN4(250,4000),QIN5(250,4000),
     /QIN6(250,4000),QSATT(4000)             
      COMMON/RATIO/AN1,AN2,AN3,AN4,AN5,AN6,AN,FRAC(6)                   
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX
      COMMON/LARGET/CF(6,4000,290),EIN(6,290),TCF(6,4000),IARRY(6,290),
     /RGAS(6,290),IPN(6,290),WPL(6,290),LAST(6),ISIZE(6),PENFRA[6,3,290]
     /,TCFMAX(6)
      COMMON/LARGENT/CFN(6,4000,10),TCFN(6,4000),SCLENUL(6,10),NPLAST(6)
      COMMON/OUTPTT/TIME(300),ICOLL(6,5),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(6,290),ICOLNN(6,10)
      COMMON/TTRM/ZTOT,TTOT,ZTOTS,TTOTS 
      COMMON/SINT/SIMF(4000)                                            
      COMMON/NAMES/NAMEG(6)
      COMMON/SCRIPT/DSCRPT(6,300),DSCRPTN(6,10)
      CHARACTER*50 DSCRPT,DSCRPTN               
      CHARACTER*25 NAMEG  
      DIMENSION FREQEL(6),FREQSP(6),FREINE(6),FREATT(6),FREION(6)       
      DIMENSION SPECS(40)  
      WRITE(6,15)                                                       
      WRITE(6,15)                                                       
   15 FORMAT('----------------------------------------------------------
     /-------------------')
      WRITE(6,110) SPEC(4000)
 110  FORMAT(2(/),' NUMBER OF COLLISIONS IN FINAL ENERGY BIN =',F8.1)
      CALL COLFT(FREQ,FREEL,FREION1,FREATT1,FREIN,N#real)
      IF(TTOTS == 0.0):
 TTOTS=ST
      WRITE(6,220) FREQ,FREEL,FREIN,FREION1,FREATT1                   
  220 FORMAT(/,6X,'TOTAL COLL. FREQ. =',D11.4,' (*10**12)/SEC.',/,2X,'
     /ELASTIC COLL. FREQ. =',D11.4,' (*10**12)/SEC.',/,2X,'INELASTIC COL
     /L. FREQ. =',D11.4,' (*10**12)/SEC.',/,1X,'IONISATION COLL. FREQ. =
     /',D11.4,' (*10**12)/SEC.',/,1X,'ATTACHMENT COLL. FREQ. =',D11.4,' 
     /(*10**12)/SEC.',/)                    
      WRITE(6,15)                                                       
#     ILAST=DINT(TMAX1)+1                                                
#     IF(ILAST > 120) ILAST=120                                        
#     WRITE(6,1010) (TIME(I),I=1,ILAST)                                 
#1010 FORMAT(/,6X,'DISTRIBUTION OF COLLISION TIMES IN 1 PECOSECOND BINS'
#    /,2(/),20(1X,6(F10.1,2X)/))                                          
#     WRITE(6,15) 
      DO 1020 I=1,NGAS         
      FREQEL(I)=ICOLL(I,1)/TTOTS                                    
      FREQSP(I)=ICOLL(I,5)/TTOTS                                        
      FREINE(I)=ICOLL(I,4)/TTOTS                                    
      FREATT(I)=ICOLL(I,3)/TTOTS  
      FREION(I)=ICOLL(I,2)/TTOTS
 1020 CONTINUE
      WRITE(6,1060)
 1060 FORMAT(/,2X,'DETAILED COLLISION FREQUENCIES FOR EACH GAS IN UNITS 
     /OF 10**12/SEC. :',2(/))
      DO 1100 J=1,NGAS
      WRITE(6,1065) NAMEG(J)
 1065 FORMAT(/,3X,A25,/,'----------------------------',2(/))
      DO 1090 K=1,LAST(J) 
       FRELV=FREQ*ICOLN(J,K)/DFLOAT(N#real)
       IF(ICOLN(J,K):
 == 0) :
        ERRFRE=0.0
       else:
        ERRFRE=100.00*math.sqrt(DFLOAT(ICOLN(J,K)))/DFLOAT(ICOLN(J,K))
       # endIF  
       WRITE(6,1070) DSCRPT(J,K),FRELV,ERRFRE
 1070 FORMAT(3X,A50,3X,D11.4,' +-',F8.4,' %')
 1090 CONTINUE
 1100 CONTINUE
      WRITE(6,15)  
      K=0
      DO 1101 J=1,NGAS
 1101 K=K+NPLAST(J) 
      IF(K == 0):
 GO TO 1092 
      WRITE(6,335)
  335 FORMAT(/,2X,'NULL COLLISION FREQUENCIES FOR GAS MIXTURE',/,'  NB. 
     /OUTPUT CORRECTED FOR SCALING OF X-SECTIONS.',/,'------------------
     /------------------------------')
      DO 1091 JK=1,NGAS
      IF(NPLAST(JK):
 == 0) GO TO 1091
      WRITE(6,1065) NAMEG(JK)
      DO 1080 JJ=1,NPLAST(JK) 
      FRELV=FREQ*ICOLNN(JK,JJ)/DFLOAT(N#real)
      IF(ICOLNN(JK,JJ):
 == 0) :
       ERRFE=0.0
      else:
       ERRFE=100.00*math.sqrt(DFLOAT(ICOLNN(JK,JJ)))/DFLOAT(ICOLNN(JK,JJ))
      # endIF
# RESCALE NULL COLLISIONS
      FRELV=FRELV/(SCLENUL(JK,JJ)**2)
      WRITE(6,1070) DSCRPTN(JK,JJ),FRELV,ERRFE
 1080 CONTINUE
 1091 CONTINUE
 1092 CONTINUE
      WRITE(6,15)
      WRITE(6,301)                                                      
  301 FORMAT(2(/),10X,' NORMALISED ENERGY DISTRIBUTION')                
      J1=0                                                              
      J2=0    
      SPECN=DFLOAT(N#real)
      SMSPEC=0.00                                                      
      DO 350 K=1,4000                                                   
      SPEC(K)=SPEC(K)/SPECN                                             
      J1=J1+1                                                           
      SMSPEC=SMSPEC+SPEC(K)                                             
      IF(J1 < 100):
 GO TO 350                                           
      J2=J2+1                                                           
      SPECS(J2)=SMSPEC                                                  
      SMSPEC=0.00                                                      
      J1=0                                                              
  350 CONTINUE                                                          
      EPLT=EFINAL/40.00                                               
      DO 420 I=1,40                                                     
      ENER=EPLT*(DFLOAT(I)-0.50)                                       
      WRITE(6,302) ENER,SPECS(I)                                        
  302 FORMAT(6X,'E=',F11.3,6X,'SPEC=',D11.4)                           
  420 CONTINUE                                                          
      RETURN                                                            
      # end 
      def OUTPUT1T:
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/E(4000),EROOT(4000),QTOT(4000),QREL(4000),QINEL(4000),
     /QEL(4000)                                                         
      COMMON/MIX1/QELM(4000),QSUM(4000),QION(6,4000),QIN1(250,4000),    
     /QIN2(250,4000),QIN3(250,4000),QIN4(250,4000),QIN5(250,4000),
     /QIN6(250,4000),QSATT(4000)             
      COMMON/RATIO/AN1,AN2,AN3,AN4,AN5,AN6,AN,FRAC(6)                   
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX
      COMMON/LARGET/CF(6,4000,290),EIN(6,290),TCF(6,4000),IARRY(6,290),
     /RGAS(6,290),IPN(6,290),WPL(6,290),LAST(6),ISIZE(6),PENFRA[6,3,290]
     /,TCFMAX(6)
      COMMON/LARGENT/CFN(6,4000,10),TCFN(6,4000),SCLENUL(6,10),NPLAST(6)
      COMMON/OUTPTT/TIME(300),ICOLL(6,5),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(6,290),ICOLNN(6,10)
      COMMON/TTRM/ZTOT,TTOT,ZTOTS,TTOTS 
      COMMON/SINT/SIMF(4000)                                            
      COMMON/NAMES/NAMEG(6)
      COMMON/SCRIPT/DSCRPT(6,300),DSCRPTN(6,10)
      CHARACTER*50 DSCRPT,DSCRPTN               
      CHARACTER*25 NAMEG  
      DIMENSION FREQEL(6),FREQSP(6),FREINE(6),FREATT(6),FREION(6)       
      DIMENSION SPECS(40)  
      WRITE(6,15)                                                       
      WRITE(6,15)                                                       
   15 FORMAT('----------------------------------------------------------
     /-------------------')
      WRITE(6,110) SPEC(4000)
 110  FORMAT(2(/),' NUMBER OF COLLISIONS IN FINAL ENERGY BIN =',F8.1)
      CALL COLFT(FREQ1,FREEL1,FREION1,FREATT1,FREIN1,N#real)  
      IF(TTOTS == 0.00):
 TTOTS=ST
      DO 1020 I=1,NGAS         
      FREQEL(I)=ICOLL(I,1)/TTOTS                                    
      FREQSP(I)=ICOLL(I,5)/TTOTS                                        
      FREINE(I)=ICOLL(I,4)/TTOTS                                    
      FREATT(I)=ICOLL(I,3)/TTOTS  
      FREION(I)=ICOLL(I,2)/TTOTS
 1020 CONTINUE
      WRITE(6,220) FREQ1,FREIN1,FREEL1,FREION1,FREATT1                 
  220 FORMAT(/,6X,'TOTAL COLL. FREQ. =',D11.4,' (*10**12)/SEC.',/,2X,'IN
     /ELASTIC COLL. FREQ. =',D11.4,' (*10**12)/SEC.',/,4X,'ELASTIC COLL.
     / FREQ. =',D11.4,' (*10**12)/SEC.',/,1X,'IONISATION COLL. FREQ. =',
     /D11.4,' (*10**12)/SEC.',/,1X,'ATTACHMENT COLL. FREQ. =',D11.4,' (*
     /10**12)/SEC.',/)                    
      WRITE(6,15)                                                       
      WRITE(6,1060)
 1060 FORMAT(/,2X,'DETAILED COLLISION FREQUENCIES FOR EACH GAS IN UNITS 
     /OF 10**12/SEC. :',2(/))
      DO 1100 J=1,NGAS
      WRITE(6,1065) NAMEG(J)
 1065 FORMAT(/,3X,A25,/,'----------------------------',2(/))
      DO 1090 K=1,LAST(J) 
       FRELV=FREQ*ICOLN(J,K)/DFLOAT(N#real)
       IF(ICOLN(J,K):
 == 0) :
        ERRFRE=0.0
       else:
        ERRFRE=100.00*math.sqrt(DFLOAT(ICOLN(J,K)))/DFLOAT(ICOLN(J,K))
       # endIF  
       WRITE(6,1070) DSCRPT(J,K),FRELV,ERRFRE
 1070 FORMAT(3X,A50,3X,D11.4,' +-',F8.4,' %')
 1090 CONTINUE
 1100 CONTINUE
      WRITE(6,15) 
      K=0
      DO 1101 J=1,NGAS 
 1101 K=K+NPLAST(J)
      IF(K == 0):
 GO TO 1092
      WRITE(6,335)
  335 FORMAT(/,2X,'NULL COLLISION FREQUENCIES FOR GAS MIXTURE',/,'  NB. 
     /OUTPUT CORRECTED FOR SCALING OF X-SECTIONS.',/,'------------------
     /------------------------------')
      DO 1091 JK=1,NGAS
      IF(NPLAST(JK):
 == 0) GO TO 1091
      WRITE(6,1065) NAMEG(JK)
      DO 1080 JJ=1,NPLAST(JK) 
      FRELV=FREQ*ICOLNN(JK,JJ)/DFLOAT(N#real)
      IF(ICOLNN(JK,JJ):
 == 0) :
       ERRFE=0.0
      else:
       ERRFE=100.00*math.sqrt(DFLOAT(ICOLNN(JK,JJ)))/DFLOAT(ICOLNN(JK,JJ))
      # endIF
# RESCALE NULL COLLISIONS
      FRELV=FRELV/(SCLENUL(JK,JJ)**2)
      WRITE(6,1070) DSCRPTN(JK,JJ),FRELV,ERRFE
 1080 CONTINUE
 1091 CONTINUE
 1092 CONTINUE
      WRITE(6,15)
#     WRITE(6,301)                                                      
# 301 FORMAT(2(/),10X,' NORMALISED ENERGY DISTRIBUTION')                
#     J1=0                                                              
#     J2=0    
#     SPECN=DFLOAT(N#real)
#     SMSPEC=0.00                                                      
#     DO 350 K=1,4000                                                   
#     SPEC(K)=SPEC(K)/SPECN                                             
#     J1=J1+1                                                           
#     SMSPEC=SMSPEC+SPEC(K)                                             
#     IF(J1 < 100) GO TO 350                                           
#     J2=J2+1                                                           
#     SPECS(J2)=SMSPEC                                                  
#     SMSPEC=0.00                                                      
#     J1=0                                                              
# 350 CONTINUE                                                          
#     EPLT=EFINAL/40.00                                               
#     DO 420 I=1,40                                                     
#     ENER=EPLT*(DFLOAT(I)-0.50)                                       
#     WRITE(6,302) ENER,SPECS(I)                                        
# 302 FORMAT(6X,'E=',F11.3,6X,'SPEC=',D11.4)                           
# 420 CONTINUE                                                          
      RETURN                                                            
      # end 
      def ALPCLCBT  :
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX 
      COMMON/TOFGOUT/RALPHA,RALPER,TOFENE,TOFENER,TOFWVZ,TOFWVZER,
     /TOFWVY,TOFWVYER,TOFDZZ,TOFDZZER,TOFDXX,TOFDXXER,TOFDYY,TOFDYYER,
     /TOFDYZ,TOFDYZER,TOFWRZ,TOFWRZER,TOFWRY,TOFWRYER,RATTOF,RATOFER 
      COMMON/VEL/WX,WY,WZ
      COMMON/CTOWNS/ALPHA,ATT
      COMMON/CTWNER/ALPER,ATTER
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9] 
      COMMON/LARGET/CF(6,4000,290),EIN(6,290),TCF(6,4000),IARRY(6,290),
     /RGAS(6,290),IPN(6,290),WPL(6,290),LAST(6),ISIZE(6),PENFRA[6,3,290]
     /,TCFMAX(6)
# ----------------------------------------------------------------------     
#  ESTIMATE TIME STEP  FOR AVALANCHE SIMULATION IN TIME OF FLIGHT SIM. 
#  USES ESTIMATED GAIN OF 3.0 BETWEEN PLANES. 
#  CALLS TOF AND PT defS AND UPDATES ALPHA AND ATT
#  VERSION WITH BFIELD ALONG X-AXIS AND EFIELD ALONG Z-AXIS (90 DEGREES)
# ----------------------------------------------------------------------
      IMAX=NMAX/10000000 
      IF(IMAX < 5):
 IMAX=5 
      NMAX=IMAX*10000000
      CORR=760.0*(273.15+TEMPC)/(TORR*293.15)
      ALPP=ALPHA/CORR
      ATTP=ATT/CORR
      ANETP=ALPP-ATTP
      ANET=ALPHA-ATT
      TCUTH=1.2D-10*CORR
      TCUTL=1.D-13*CORR
#   
      IF (ANETP > 30.0):
 :
       ALPHAD=0.0
       ALP1=ALPHA
       ATT1=ATT
# WEAK ATTACHMENT
       GO TO 6
      # endIF 
#  SOME ATTACHMENT
      IF(abs(ANETP):
 < 100.) :
# SMALL NET ATTACHMENT
       ALPHAD=abs(ATT)*0.8
      elif(abs(ANETP) >= 100. and abs(ANETP) < 1000.) :
# LARGER NET ATTACHMENT
       ALPHAD=abs(ANET)*0.65
      elif(abs(ANETP) > 1000. and abs(ANETP) < 10000.) :
       ALPHAD=abs(ANET)*0.6
      elif(abs(ANETP) > 10000. and abs(ANETP) < 100000.) :
       ALPHAD=abs(ANET)*0.5
      elif(abs(ANETP) > 100000. and abs(ANETP) < 2000000.) :
       ALPHAD=abs(ANET)*0.4
      else: 
       WRITE(6,91) 
   91 FORMAT(' ATTACHMENT TOO LARGE def STOPPED')
       STOP
      # endIF
   3  VDST=math.sqrt(WZ*WZ+WY*WY)*1.D-5
      FAKEI=ALPHAD*WZ*1.D-12
      ALPHAST=0.85*abs(ALPHAD+ANET)                        
      TSTEP=math.log(3.00)/(ALPHAST*VDST*1.0D5)
      IF(TSTEP > TCUTH):
 TSTEP=TCUTH
      IF(TSTEP < TCUTL):
 TSTEP=TCUTL
# UPDATE NULL COLLISION FREQUENCY LIMIT
      DO 4 J=1,NGAS 
    4 TCFMAX(J)=TCFMAX(J)+abs(FAKEI)/DFLOAT(NGAS)
      WRITE(6,871) ALPHAST,ANET,ALPHAD,TSTEP
  871 FORMAT(' ALPHAST1=',D10.3,' ANET1=',D10.3,' ALPHAD1=',D10.3,/,
     /' TSTEP1=',D10.3)
#  CONVERT TO  PICOSECONDS     
      TSTEP=TSTEP*1.0D12
      TFINAL=7.00*TSTEP
      ITFINAL=7
# CALCULATE GOOD STARTING VALUES FOR ALPHA AND NETA
      JPRT=0
      CALL MONTEFTGT(JPRT)
      CALL PTG(JPRT)
      CALL TOFG(JPRT)
      TOFWR=math.sqrt(TOFWRZ*TOFWRZ+TOFWRY*TOFWRY)
      ALP1=RALPHA/TOFWR*1.D7
      ALP1ER=RALPER*ALP1/100. 
      ATT1=RATTOF/TOFWR*1.D7
      ATT1ER=RATOFER*ATT1/100.
      WRITE(6,944) ALP1,ALP1ER,ATT1,ATT1ER
  944 FORMAT(' GOOD STARTING VALUES FOR CALC:',/,' ALPHA=',D12.3,' ERR='
     /,D12.3,/,' NETA =',D12.3,' ERR=',D12.3)
#
# CALCULATE USING GOOD STARTING VALUES
#  RESET TCFMAX
      DO 44 J=1,NGAS
   44 TCFMAX(J)=TCFMAX(J)-abs(FAKEI)/DFLOAT(NGAS)
# CALCULATE FAKE IONISATION RATE SCALING BY 1.2 
      ALPHAD=abs(ATT1)*1.2
      IF((ALP1-ATT1):
 > 30.*CORR) ALPHAD=abs(ATT1)*0.4
      IF(abs(ALP1-ATT1):
 < (ALP1/10.0) or abs(ALP1-ATT1) < 
     /(ATT1/10.0)) ALPHAD=abs(ATT1)*0.3
      IF((ALP1-ATT1):
 > 100.*CORR) ALPHAD=0.0
      WZ=TOFWRZ*1.D5 
      WY=TOFWRY*1.D5 
#
#
# NET IONISATION
#   5 IF(ANET > (11000./CORR)) :
# LARGE IONISATION
#      ALPHAD=7000.-(ALPHA-ATT)
#     elif (abs(ALPP) > (5.0*abs(ANET)) or abs(ATTP) > 
#    /(5.0*abs(ANET))) :
# LARGE CANCELLATION BETWEEN ATTACHMENT AND IONISATION
#      ALPHAD=-6.0*(ALPHA-ATT)
#     else:
#      ALPHAD=0.0
#     # endIF
    6 VTOT=math.sqrt(WZ*WZ+WY*WY)
      VDST=VTOT*1.D-5
      FAKEI=ALPHAD*VTOT*1.D-12
      ALPHAST=0.850*abs(ALPHAD+ALP1-ATT1)
      IF((ALP1+ALPHAD):
 > (10.0*ALPHAST) or ATT1 > (10.0*ALPHAST)) :
# LARGE CANCELLATION BETWEEN ALPHA AND NETA. REDUCE STEP SIZE BY 15.0
       IF((ALP1+ALPHAD):
 > 100.*CORR) :
        ALPHAST=ALPHAST*15.0
       elif((ALP1+ALPHAD) > 50.0*CORR) :
        ALPHAST=ALPHAST*12.0
       else:
        ALPHAST=ALPHAST*8.0
       # endIF
      # endIF
      TSTEP=math.log(3.00)/(ALPHAST*VDST*1.0D5)
      IF(TSTEP > TCUTH and ALPHAD != 0.0):
 TSTEP=TCUTH
# UPDATE NULL COLLISION FREQUENCY
      DO 10 J=1,NGAS
   10 TCFMAX(J)=TCFMAX(J)+abs(FAKEI)/DFLOAT(NGAS)
      ANET1=ALP1-ATT1
      WRITE(6,878) ALPHAST,ANET1,ALPHAD,TSTEP
  878 FORMAT(' ALPHAST=',D10.3,' ANET=',D10.3,' ALPHAD=',D10.3,/,
     /' TSTEP=',D10.3)
      TSTEP=TSTEP*1.0D12
      TFINAL=7.00*TSTEP
      ITFINAL=7
# CALC TIME OF FLIGHT AND PT 
      WRITE(6,25)
   25 FORMAT(/,2X,'SOLUTION FOR PULSED TOWNS# end AND TIME OF FLIGHT PARAM
     /ETERS',/,'  ------------------------------------------------------
     /--------')
      WRITE(6,26) TSTEP
   26 FORMAT(1(/),'  TIME STEP BETWEEN SAMPLING PLANES =',D12.5,' PICOSE
     /CS.',/)        
      JPRT=1             
      CALL MONTEFTGT(JPRT)                            
      CALL FRIEDLANDT
      CALL PTG(JPRT)
      CALL TOFG(JPRT)
      WRITE(6,27) RALPHA,RALPER,RATTOF,RATOFER
   27 FORMAT(/,'PT IONISATION AND ATTACHMENT RATES *10**12/SEC',/,'ALPHA
      != ',D10.3,' +- ',F6.2,' %      ATT=',D10.3,' +- ',F6.2,' %')    
      WRITE(6,28) 
   28 FORMAT(/,'TOF DIFFUSION')
      WRITE(6,29) TOFDZZ,TOFDZZER,TOFDXX,TOFDXXER,TOFDYY,TOFDYYER,  
     /TOFDYZ,TOFDYZER  
   29 FORMAT(/,'DZZ=',F8.1,' +- ',F5.1,' %',/,'DXX=',F8.1,' +- ',F5.1,' 
     /%',/,'DYY=',F8.1,' +- ',F5.1,' %',/,'DYZ=',F8.1,' +- ',F5.1,' %')
      WRITE(6,30)
   30 FORMAT(/,'TOF DRIFT VELOCITY')
      WRITE(6,31) TOFWRZ,TOFWRZER,TOFWRY,TOFWRYER   
   31 FORMAT(/,'WRZ=',F8.2,' +-',F6.1,' %    WRY=',F8.2,' +-',F6.1,' %')
# CALCULATE TOWNS# end SST COEFICIENTS FROM TOF RESULTS      
      TOFWR=math.sqrt(TOFWRZ*TOFWRZ+TOFWRY*TOFWRY)
      WRZN=TOFWR*1.005
      FC1=WRZN/(2.00*TOFDZZ)
      FC2=((RALPHA-RATTOF)*1.0D12)/TOFDZZ
      ALPZZ=FC1-math.sqrt(FC1**2-FC2)
      WRITE(6,888) ALPZZ
  888 FORMAT(/,'TOWNS# end COEFICIENT (ALPHA-ATT) CALCULATED FROM TOF RESU
     /LTS:',/,' ALPHA-ATT /CM.=',D11.4,' N.B. APPROXIMATE FORMULA NOT AC
     /CURATE',/) 
#---- -------------------------------------------------    
#      LOAD NEW ALPHA AND ATTACHMENT INTO COMMON BLOCKS
#---- -------------------------------------------
      ALPHA=RALPHA/TOFWR*1.D7
      ALPER=RALPER*ALPHA/100.
      ATT=RATTOF/TOFWR*1.D7
      ATTER=RATOFER*ATT/100.
#     WRITE(6,32) ALPHA,ALPER,ATT,ATTER
#  32 FORMAT(/,'TOWNS# end COEFICIENTS CALCULATED FROM TOF RESULTS:',2(/),
#    /'IONISATION RATE /CM.=',D11.4,' +-',F6.2,/,'ATTACHMENT RATE /CM.='
#    /,D11.4,' +-',F6.2,/)        
# --- -------------------------------------------      
      RETURN                                                     
      # end                                                               
      def MONTEFTGT(JPRT):                                     
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAXOLD
      COMMON/BFLD/EOVB,WB,BTHETA,BMAG                                   
      COMMON/LARGET/CF(6,4000,290),EIN(6,290),TCF(6,4000),IARRY(6,290),
     /RGAS(6,290),IPN(6,290),WPL(6,290),IPLAST(6),ISIZE(6),
     /PENFRA[6,3,290],TCFMAX(6)
      COMMON/LARGENT/CFN(6,4000,10),TCFN(6,4000),SCLENUL(6,10),NPLAST(6)
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/OUTPTT/TIME(300),ICOLL(6,5),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(6,290),ICOLNN(6,10)
      COMMON/TTRM/ZTOT,TTOT,ZTOTS,TTOTS
      COMMON/THRM/AMGAS(6),VTMB[6],TCFMX,TCFMXG(6),ITHRM
      COMMON/RANM/RNMX(6)
      COMMON/ISPT/XS(2000),YS(2000),ZS(2000),TS(2000),ES(2000),
     /DCX(2000),DCY(2000),DCZ[2000],IPL(2000)
      COMMON/TPLOUTG/ETPL(8),XTPL(8),YTPL(8),ZTPL(8),TTPL(8),XXTPL(8),
     /YYTPL(8),ZZTPL(8),YZTPL(8),VZTPL(8),VYTPL(8),NETPL(8),ATTOINT,
     /ATTERT,AIOERT 
      COMMON/ANIST/PSCT(6,4000,290),ANGCT(6,4000,290),INDEX(6,290),NISO 
      COMMON/IONFL/NC0(6,290),EC0(6,290),NG1(6,290),EG1(6,290),
     /NG2(6,290),EG2(6,290),WKLM(6,290),EFL(6,290)
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9] 
      DIMENSION EPRM(10000000),IESPECP(100),TEMP(6,4000)           
# -------------------------------------------------------------------   
#   CALCULATES COLLISION EVENTS AND UPDATES DIFFUSION AND VELOCITY.
#   THIS ROUTINE HANDLES TERMINATIONS AT FIXED DRIFT TIMES. 
#   B FIELD AT 90 DEGREES TO EFIELD  
# ------------------------------------------------------------------- 
      IF(JPRT == 0):
 :
# CALCULATION OF APPROXIMATE STARTING PARAMETERS
       NMAX=NMAXOLD
       IF(NMAXOLD > 80000000):
 NMAX=80000000
      else:
# ENTRY FOR NORMAL CALCULATION
       NMAX=NMAXOLD 
      # endIF 
      S=0.00 
      ST=0.00 
      X=0.00
      Y=0.00
      Z=0.00 
      ZTOT=0.00
      ZTOTS=0.00
      YTOT=0.00
      YTOTS=0.00
      TTOT=0.00
      TTOTS=0.00
      SMALL=1.0D-20                                                     
      TMAX1=0.00                                                       
      RDUM=RSTART                                                       
      E1=ESTART                                                         
      CONST9=CONST3*0.010
      CONST10=CONST9*CONST9
      API=DACOS(-1.00)
      F4=2.00*API
      DO 25 I=1,300
   25 TIME(I)=0.00
      DO 26 K=1,6
      DO 26 I=1,5
   26 ICOLL(K,I)=0
      DO 27 K=1,6
      DO 27 I=1,290
   27 ICOLN(K,I)=0
      DO 271 K=1,6
      DO 271 I=1,10
  271 ICOLNN(K,I)=0
      DO 28 I=1,4000
   28 SPEC(I)=0.00            
      DO 33 I=1,100
   33 IESPECP(I)=0 
      DO 34 I=1,8
      ETPL(I)=0.00
      XTPL(I)=0.00
      YTPL(I)=0.00
      ZTPL(I)=0.00
      TTPL(I)=0.00
      XXTPL(I)=0.00
      YYTPL(I)=0.00
      ZZTPL(I)=0.00
      YZTPL(I)=0.00
      VZTPL(I)=0.00
      VYTPL(I)=0.00
   34 NETPL(I)=0                                   
      ID=0
      N4000=4000
      N300=300
      N100=100
      I100=0                                                            
      NCOL=0                                                            
      NNULL=0
      NELEC=0
      NEION=0
      NMXADD=0
      NTMPFLG=0
      NPONT=0 
      NCLUS=0
      J1=1 
#
      DO 111 K=1,6
      DO 111 J=1,N4000
  111 TEMP(K,J)=TCF(K,J)+TCFN(K,J)
      IFAKE=0:
      ABSFAKEI=abs(FAKEI)
      DO 112 J=1,8
  112 IFAKET(J)=0
#
# GENERATE INITIAL RANDOM NUMBERS FOR MAXWELL BOLTZMAN 
      CALL GERJAN
      IMBPT=0
#
      ZSTRT=0.00
      YSTRT=0.00
      TSSTRT=0.00                                                    
#     INITIAL DIRECTION COSINES                                         
      DCZ1=DCOS(THETA)                                                  
      DCX1=DSIN(THETA)*DCOS(PHI)                                        
      DCY1=DSIN(THETA)*DSIN(PHI) 
# INITIAL VELOCITY
      VTOT=CONST9*math.sqrt(E1)
      CX1=DCX1*VTOT
      CY1=DCY1*VTOT
      CZ1=DCZ1*VTOT      
      E100=E1
      DCZ100=DCZ1
      DCX100=DCX1
      DCY100=DCY1                                       
      JPRINT=NMAX/10
      IPRINT=0
      ITER=0
      IPLANE=0
      IPRIM=0
#  LOOP FOR NEW STARTING ELECTRONS 
  544 IPRIM=IPRIM+1 
      IF(IPRIM > 1):
 :
# CHECK IF def WILL EXCEED MAXIMUM NUMBER OF ITERATIONS 
# IN THIS CYCLE IF SO OUTPUT CURRENT RESULTS. 
       IF(ITER > NMAX):
 :
        IPRIM=IPRIM-1
        GO TO 700      
       # endIF 
       X=0.00
       Y=0.00
       Z=0.00
       DCZ1=DCZ100
       DCX1=DCX100
       DCY1=DCY100
       E1=E100
       VTOT=CONST9*math.sqrt(E1)
       CX1=DCX1*VTOT
       CY1=DCY1*VTOT
       CZ1=DCZ1*VTOT
       NCLUS=NCLUS+1
       ST=0.00
       TSSTRT=0.00
       ZSTRT=0.00
       YSTRT=0.00
       IPLANE=0
      # endIF
      IF(IPRIM > 10000000):
 :
      WRITE(6,944) IPRIM
 944  FORMAT(/,2X,'def STOPPED TOO MANY PRIMARIES IPRIM =',I7)
      GO TO 700
      # endIF
      EPRM(IPRIM)=E1
      IDUM=DINT(E1)+1
      IDUM=DMIN0(IDUM,N100)
      IESPECP(IDUM)=IESPECP(IDUM)+1      
# START OF LOOP FOR NEWLY CREATED ELECTRONS
  555 TDASH=0.00
      NELEC=NELEC+1
      TSTOP=TSTEP+IPLANE*TSTEP       
# MAIN LOOP                                                             
    1 CONTINUE                                                          
#     IF(ITER > NMAX)  GO TO 315
      R1=drand48(RDUM)
      T=-math.log(R1)/TCFMX+TDASH
      TDASH=T
      WBT=WB*T
      COSWT=DCOS(WBT)
      SINWT=DSIN(WBT)
  15  IF((T+ST) >= TSTOP) :                     
       IPLANE=IPLANE+1
       TSTOP=TSTOP+TSTEP
# STORE POSITION AND ENERGY AT TIME PLANE =IPLANE. 
       CALL TPLANEGT(T,E1,CX1,CY1,CZ1,EFIELD,IPLANE)
# CHECK IF PASSED THROUGH MORE THAN ONE PLANE IN THIS STEP       
       IF((T+ST):
 >= TSTOP and TSTOP <= TFINAL) GO TO 15
       IF((T+ST):
 >= TFINAL) :
        ZTOT=ZTOT+Z
        YTOT=YTOT+Y     
        TTOT=TTOT+ST
        ZTOTS=ZTOTS+Z-ZSTRT 
        YTOTS=YTOTS+Y-YSTRT     
        TTOTS=TTOTS+ST-TSSTRT    
        TSTOP=TSTEP
# NO MORE ELECTRONS IN CASCADE TRY NEW PRIMARY ELECTRON
        IF(NELEC == (NCLUS+1):
) GO TO 544  
# TAKE ELECTRONS FROM STORE 
   20   X=XS(NPONT) 
        Y=YS(NPONT) 
        Z=ZS(NPONT) 
        ST=TS(NPONT) 
        E1=ES(NPONT) 
        DCX1=DCX(NPONT) 
        DCY1=DCY(NPONT) 
        DCZ1=DCZ[NPONT]
        VTOT=CONST9*math.sqrt(E1)
        CX1=DCX1*VTOT
        CY1=DCY1*VTOT
        CZ1=DCZ1*VTOT 
        IPLANE=IPL(NPONT)   
        NPONT=NPONT-1 
        ZSTRT=Z 
        YSTRT=Y
        TSSTRT=ST
        GO TO 555
       # endIF              
      # endIF
      DZ=(CZ1*SINWT+(EOVB-CY1)*(1.00-COSWT))/WB
      E=E1+DZ*EFIELD*100.00
 913  FORMAT(3X,' AFTER STORE ITER=',I10,' DZ=',D12.3,'E1=',D12.3,' COSW
     /T=',D12.3,' SINWT=',D12.3,' WBT=',D12.3,' CY1=',D12.3)   
      IF(E < 0.00):
 :
       WRITE(6,913)ITER,DZ,E,COSWT,SINWT,WBT,CY1  
       E=0.0010
      # endIF     
# CALCULATE ELECTRON VELOCITY IN LAB FRAME
      CX2=CX1
      CY2=(CY1-EOVB)*COSWT+CZ1*SINWT+EOVB
      CZ2=CZ1*COSWT-(CY1-EOVB)*SINWT
# FIND IDENTITY OF GAS FOR COLLISION
      KGAS=0
      IF(NGAS == 1):
 :
       R2=drand48(RDUM)
       KGAS=1
       GO TO 4
      # endIF
      R2=drand48(RDUM)
    3 KGAS=KGAS+1
      IF(TCFMXG(KGAS):
 < R2) GO TO 3
# CALCULATE GAS VELOCITY VECTORS VGX,VGY,VGZ
    4 IMBPT=IMBPT+1
      IF(IMBPT > 6):
 :
       CALL GERJAN
       IMBPT=1
      # endIF
      VGX=VTMB[KGAS]*RNMX(IMBPT)
      IMBPT=IMBPT+1
      VGY=VTMB[KGAS]*RNMX(IMBPT)
      IMBPT=IMBPT+1
      VGZ=VTMB[KGAS]*RNMX(IMBPT)
# CALCULATE ENERGY WITH STATIONARY GAS TARGET EOK
      EOK=((CX2-VGX)**2+(CY2-VGY)**2+(CZ2-VGZ)**2)/CONST10
      IE=DINT(EOK/ESTEP)+1                                            
      IE=DMIN0(IE,N4000)                                               
#                                                                       
#     TEST FOR #real OR NULL COLLISION   
#                                
      R5=drand48(RDUM)                                         
      TEST1=TCF(KGAS,IE)/TCFMAX(KGAS)                                  
      IF(R5 <= TEST1):
 GO TO 137                                         
      NNULL=NNULL+1 
      TEST2=TEMP(KGAS,IE)/TCFMAX(KGAS)    
      IF(R5 < TEST2):
 :
# TEST FOR NULL LEVELS
       IF(NPLAST(KGAS):
 == 0) GO TO 1
       R2=drand48(RDUM)
       I=0
  888  I=I+1
       IF(CFN(KGAS,IE,I):
 < R2) GO TO 888
# INCREMENT NULL SCATTER SUM
       ICOLNN(KGAS,I)=ICOLNN(KGAS,I)+1
       GO TO 1
      # endIF                      
      TEST3=(TEMP(KGAS,IE)+ABSFAKEI)/TCFMAX(KGAS)
      IF(R5 < TEST3):
 :
# FAKE COLLISION INCREMENT COUNTER
       IFAKE=IFAKE+1:
       IFAKET(IPLANE+1):
=IFAKET(IPLANE+1)+1
       IF(FAKEI < 0.0):
 :
        NION=NION+1
# FAKE ATTACHMENT START NEW ELECTRON
        IF(NELEC > (NCLUS+1):
) GO TO 544
# ELECTRON CAPTURED TAKE ELECTRON FROM STORE
        GO TO 20
       # endIF
#
       NCLUS=NCLUS+1
       NPONT=NPONT+1
       NMXADD=MAX(NPONT,NMXADD)
       IF(NPONT > 2000):
 : 
        WRITE(6,546) NPONT,ITER
        STOP
       # endIF     
       XS(NPONT)=X+CX1*T       
       YS(NPONT)=Y+EOVB*T+((CY1-EOVB)*SINWT+CZ1*(1.00-COSWT))/WB
       ZS(NPONT)=Z+DZ
       TS(NPONT)=ST+T
       ES(NPONT)=E
       IPL(NPONT)=IPLANE
       BOT=1.00/math.sqrt(CX2*CX2+CY2*CY2+CZ2*CZ2)
       DCX(NPONT)=CX2*BOT
       DCY(NPONT)=CY2*BOT
       DCZ[NPONT]=CZ2*BOT
       GO TO 1
      # endIF                  
      GO TO 1                             
  137 NCOL=NCOL+1
# CALCULATE DIRECTION COSINES OF ELECTRON IN 0 KELVIN FRAME
      CONST11=1.00/(CONST9*math.sqrt(EOK))
      DXCOM=(CX2-VGX)*CONST11
      DYCOM=(CY2-VGY)*CONST11
      DZCOM=(CZ2-VGZ)*CONST11                              
#                                                                       
#  CALCULATE DIRECTION COSINES AND POSITIONS AT INSTANT BEFORE COLLISION
#    ALSO UPDATE DIFFUSION  AND ENERGY CALCULATIONS.                    
      T2=T*T
      IF(T >= TMAX1):
 TMAX1=T
      TDASH=0.00  
# CALC NEW POSITION                                                
      X=X+CX1*T                                                         
      Y=Y+EOVB*T+((CY1-EOVB)*SINWT+CZ1*(1.00-COSWT))/WB
      Z=Z+DZ          
      ST=ST+T
      IT=DINT(T+1.00)                                              
      IT=DMIN0(IT,N300)                                               
      TIME(IT)=TIME(IT)+1.00
# ENERGY SPECTRUM IN 0 KELVIN FRAME                               
      SPEC(IE)=SPEC(IE)+1.00
# --------------------------------------------------------------------- 
#     DETERMINATION OF #real COLLISION TYPE                              
# --------------------------------------------------------------------- 
      R2=drand48(RDUM)
# FIND LOCATION WITHIN 4 UNITS IN COLLISION ARRAY
      CALL SORTT(KGAS,I,R2,IE)                                          
  140 I=I+1                                                             
      IF(CF(KGAS,IE,I):
 < R2) GO TO 140                              
      S1=RGAS(KGAS,I)                                                   
      EI=EIN(KGAS,I)
      IF(EOK < EI):
 :
# FIX ENERGY LOSS SMALLER THAN INCIDENT ENERGY IF A BINING ERROR OCCURS.
      EI=EOK-0.00010
      # endIF                                                          
      IF(IPN(KGAS,I):
 == 0) GO TO 666
# ATTACHMENT       
      IF(IPN(KGAS,I):
 == -1) :
       NEION=NEION+1
       IPT=IARRY(KGAS,I)
       ID=ID+1
       ITER=ITER+1
       IPRINT=IPRINT+1
       ICOLL(KGAS,IPT)=ICOLL(KGAS,IPT)+1
       ICOLN(KGAS,I)=ICOLN(KGAS,I)+1 
       IT=DINT(T+1.00)
       IT=DMIN0(IT,N300)
       TIME(IT)=TIME(IT)+1.00
       ZTOT=ZTOT+Z
       YTOT=YTOT+Y
       TTOT=TTOT+ST
       ZTOTS=ZTOTS+Z-ZSTRT
       YTOTS=YTOTS+Y-YSTRT
       TTOTS=TTOTS+ST-TSSTRT
#  ELECTRON CAPTURED START NEW PRIMARY          
       IF(NELEC == (NCLUS+1):
) GO TO 544
# ELECTRON CAPTURED TAKE NEXT ELECTRON FROM STORE       
       GO TO 20
      # endIF    
      EISTR=EI                               
      R9=drand48(RDUM)
#     ESEC=R9*(EOK-EI)      
#    USE OPAL PETERSON AND BEATY SPLITTING FACTOR.
      ESEC=WPL(KGAS,I)*TAN(R9*ATAN((EOK-EI)/(2.00*WPL(KGAS,I))))  
      ESEC=WPL(KGAS,I)*(ESEC/WPL(KGAS,I))**0.9524     
      EI=ESEC+EI 
# STORE POSITION ,ENERGY, DIRECTION COSINES AND TIME OF GENERATION
# OF IONISATION ELECTRON      
      NCLUS=NCLUS+1
      NPONT=NPONT+1
      NMXADD=MAX(NPONT,NMXADD)
      IF(NPONT > 2000):
 : 
      WRITE(6,546) NPONT,ITER
 546  FORMAT(2X,' def STOPPED . NPONT=',I5,' ITER=',I10)
      STOP
      # endIF     
      XS(NPONT)=X       
      YS(NPONT)=Y
      ZS(NPONT)=Z
      TS(NPONT)=ST
      ES(NPONT)=ESEC
      IPL(NPONT)=IPLANE
      NCLTMP=NPONT
      NTMPFLG=1
# RANDOMISE SECONDARY ELECTRON DIRECTION
#     R3=drand48(RDUM)
#     F3=1.00-2.00*R3
#     THETA0=DACOS(F3)
#     F6=DCOS(THETA0)
#     F5=DSIN(THETA0)
#     R4=drand48(rdum)
#     PHI0=F4*R4
#     F8=DSIN(PHI0)
#     F9=DCOS(PHI0)               
#     DCX(NPONT)=F9*F5
#     DCY(NPONT)=F8*F5
#     DCZ[NPONT]=F6     
# STORE POSSIBLE SHELL EMISSIONS AUGER OR FLUORESCENCE
      IF(EISTR > 30.0):
 :
# AUGER EMISSION WITHOUT FLUORESCENCE
       NAUG=NC0(KGAS,I)
       EAVAUG=EC0(KGAS,I)/DFLOAT(NAUG)
       DO 701 JFL=1,NAUG
       NCLUS=NCLUS+1
       NPONT=NPONT+1
       XS(NPONT)=X
       YS(NPONT)=Y
       ZS(NPONT)=Z
       TS(NPONT)=ST
       ES(NPONT)=EAVAUG
       IPL(NPONT)=IPLANE
       R3=drand48(RDUM)
       F3=1.00-2.00*R3
       THETA0=DACOS(F3)
       F6=DCOS(THETA0)
       F5=DSIN(THETA0)
       R4=drand48(RDUM)
       PHI0=F4*R4
       F8=DSIN(PHI0)
       F9=DCOS(PHI0)
       DCX(NPONT)=F9*F5
       DCY(NPONT)=F8*F5
       DCZ[NPONT]=F6
  701  CONTINUE  
      # endIF
#                                                                       
#  GENERATE SCATTERING ANGLES AND UPDATE  LABORATORY COSINES AFTER      
#   COLLISION ALSO UPDATE ENERGY OF ELECTRON.                           
#
  666 IPT=IARRY(KGAS,I)
      ID=ID+1    
      ITER=ITER+1
      IPRINT=IPRINT+1                                                   
      ICOLL(KGAS,IPT)=ICOLL(KGAS,IPT)+1 
      ICOLN(KGAS,I)=ICOLN(KGAS,I)+1  
# IF EXCITATION : ADD PROBABILITY ,PENFRA(KGAS,1,I),OF TRANSFER TO 
# GIVE IONISATION OF THE OTHER GASES IN THE MIXTURE
      IF(IPEN == 0):
 GO TO 5  
      IF(PENFRA[KGAS,1,I] == 0.0):
 :
       RAN=drand48(RDUM)
       IF(RAN > PENFRA[KGAS,1,I]):
 GO TO 5
       NCLUS=NCLUS+1
       NPONT=NPONT+1
       IF(NPONT > 2000):
 :
        WRITE(6,546) NPONT,ITER
        STOP
       # endIF
# ENTER HERE POSSIBLE DELOCALISATION LENGTH FOR PENNING TRANSFER
       IF(PENFRA[KGAS,2,I] == 0.0):
 :
        XS(NPONT)=X
        YS(NPONT)=Y
        ZS(NPONT)=Z
        GO TO 667
       # endIF
       ASIGN=1.0
       RAN=drand48(RDUM)
       RAN1=drand48(RDUM)
       IF(RAN1 < 0.5):
 ASIGN=-ASIGN
       XS(NPONT)=X-math.log(RAN)*PENFRA[KGAS,2,I]*ASIGN
       RAN=drand48(RDUM)
       RAN1=drand48(RDUM)
       IF(RAN1 < 0.5):
 ASIGN=-ASIGN
       YS(NPONT)=Y-math.log(RAN)*PENFRA[KGAS,2,I]*ASIGN
       RAN=drand48(RDUM)
       RAN1=drand48(RDUM)
       IF(RAN1 < 0.5):
 ASIGN=-ASIGN
       ZS(NPONT)=Z-math.log(RAN)*PENFRA[KGAS,2,I]*ASIGN
# POSSIBLE PENNING TRANSFER TIME
  667  TPEN=ST
       IF(PENFRA[KGAS,3,I] == 0.0):
 GO TO 668
       RAN=drand48(RDUM)
       TPEN=ST-math.log(RAN)*PENFRA[KGAS,3,I]
  668  TS(NPONT)=TPEN
       ES(NPONT)=1.0
       DCX(NPONT)=DCX1
       DCY(NPONT)=DCY1
       DCZ[NPONT]=DCZ1
# FIND LAST TIME PLANE BEFORE TPEN
       TSTOP1=0.0
       IPLANE1=0
       DO 669 KDUM=1,ITFINAL
       TSTOP1=TSTEP+TSTOP1
       IF(TPEN < TSTOP1):
 GO TO 670
       IPLANE1=IPLANE1+1
  669  CONTINUE
# PENNING TRANSFER OCCURS AFTER FINAL TIME PLANE CLEAR ENTRY
       NPONT=NPONT-1
       NCLUS=NCLUS-1
       GO TO 5
  670  IPL(NPONT)=IPLANE1                
      # endIF
    5 S2=(S1*S1)/(S1-1.00) 
# ANISOTROPIC SCATTERING 
      R3=drand48(RDUM)
      IF(INDEX(KGAS,I):
 == 1) :
       R31=drand48(RDUM)
       F3=1.00-R3*ANGCT(KGAS,IE,I)
       IF(R31 > PSCT(KGAS,IE,I):
) F3=-F3
      elif(INDEX(KGAS,I) == 2) :
       EPSI=PSCT(KGAS,IE,I)
       F3=1.00-(2.00*R3*(1.00-EPSI)/(1.00+EPSI*(1.00-2.00*R3)))
      else:
# ISOTROPIC SCATTERING                                             
       F3=1.00-2.00*R3  
      # endIF
      THETA0=DACOS(F3)                                                  
      R4=drand48(RDUM)
      PHI0=F4*R4                                                        
      F8=DSIN(PHI0)                                                     
      F9=DCOS(PHI0)                                                     
#     IF(EOK < EI) EI=0.00                                           
      ARG1=1.00-S1*EI/EOK                                              
      ARG1=DMAX1(ARG1,SMALL)                                            
      D=1.00-F3*math.sqrt(ARG1)                                            
      E1=EOK*(1.00-EI/(S1*EOK)-2.00*D/S2) 
      E1=DMAX1(E1,SMALL)                                                
      Q=math.sqrt((EOK/E1)*ARG1)/S1                                        
      Q=DMIN1(Q,1.00)                                                  
      THETA=DASIN(Q*DSIN(THETA0))                                       
      F6=DCOS(THETA)                                                    
      U=(S1-1.00)*(S1-1.00)/ARG1                                      
      CSQD=F3*F3                                                        
      IF(F3 < 0.00 and CSQD > U):
 F6=-1.00*F6                        
      F5=DSIN(THETA)                                                    
      DZCOM=DMIN1(DZCOM,1.00)                                         
      ARGZ=math.sqrt(DXCOM*DXCOM+DYCOM*DYCOM)
      IF(ARGZ == 0.00):
 :
       DCZ1=F6         
       DCX1=F9*F5                             
       DCY1=F8*F5 
       IF(NTMPFLG == 1):
 :
# USE FREE KINEMATICS FOR IONISATION SECONDARY ANGLE
        F5S=F5*math.sqrt(E1/ES(NCLTMP))
        IF(F5S > 1.0):
 F5S=1.0
        THSEC=DASIN(F5S)
        F5S=DSIN(THSEC)
        F6S=DCOS(THSEC)
        IF(F6 < 0.0):
 F6S=-F6S
        PHIS=PHI0+API
        IF(PHIS > F4):
 PHIS=PHI0-F4
        F8S=DSIN(PHIS)
        F9S=DCOS(PHIS)
        DCZ[NCLTMP]=F6S
        DCY(NCLTMP)=F8S*F5S
        DCX(NCLTMP)=F9S*F5S
        NTMPFLG=0
       # endIF
       GO TO 190
      # endIF                                            
      DCZ1=DZCOM*F6+ARGZ*F5*F8                                         
      DCY1=DYCOM*F6+(F5/ARGZ)*(DXCOM*F9-DYCOM*DZCOM*F8)                 
      DCX1=DXCOM*F6-(F5/ARGZ)*(DYCOM*F9+DXCOM*DZCOM*F8)
      IF(NTMPFLG == 1):
 :
# USE FREE KINEMATICS FOR IONISATION SECONDARY ANGLE
       F5S=F5*math.sqrt(E1/ES(NCLTMP))
       IF(F5S > 1.0):
 F5S=1.0
       THSEC=DASIN(F5S)
       F5S=DSIN(THSEC)
       F6S=DCOS(THSEC)
       IF(F6 < 0.0):
 F6S=-F6S
       PHIS=PHI0+API
       IF(PHIS > F4):
 PHIS=PHI0-F4
       F8S=DSIN(PHIS)
       F9S=DCOS(PHIS)
       DCZ[NCLTMP]=DZCOM*F6S+ARGZ*F5S*F8S
       DCY(NCLTMP)=DYCOM*F6S+(F5S/ARGZ)*(DXCOM*F9S-DYCOM*DZCOM*F8S)
       DCX(NCLTMP)=DXCOM*F6S-(F5S/ARGZ)*(DYCOM*F9S+DXCOM*DZCOM*F8S)
       NTMPFLG=0
      # endIF 
  190 CONTINUE  
# TRANSFORM VELOCITY VECTORS TO LAB FRAME
      VTOT=CONST9*math.sqrt(E1)
      CX1=DCX1*VTOT+VGX
      CY1=DCY1*VTOT+VGY
      CZ1=DCZ1*VTOT+VGZ
# CALCULATE ENERGY AND DIRECTION COSINES IN LAB FRAME
      E1=(CX1*CX1+CY1*CY1+CZ1*CZ1)/CONST10
      CONST11=1.00/(CONST9*math.sqrt(E1))
      DCX1=CX1*CONST11
      DCY1=CY1*CONST11
      DCZ1=CZ1*CONST11
# STORE DIRECTION COSINES AND ENERGY AFTER N COLLISIONS
# FOR LATER REUSE IN PRIMARY GENERATION
      I100=I100+1
      IF(I100 == 200):
 :
       DCZ100=DCZ1
       DCX100=DCX1        
       DCY100=DCY1 
       E100=E1
       I100=0
      # endIF  
      IF(IPRINT > JPRINT):
 GO TO 200
      GO TO 1                                    
#    INTERMEDIATE PRINTOUT                       
 200  IPRINT=0 
      W=ZTOTS/TTOTS                          
      W=W*1.0D+09  
      WY=YTOTS/TTOTS   
      WY=WY*1.0D+09
      JCT=ID/100000
#     IF(J1 == 1) WRITE(6,201)                                         
# 201 FORMAT(/,7X,'INTERMEDIATE OUTPUT',/,'    VELZ     POSZ       TIME 
#    /      VELY        COUNT    ')                  
#     WRITE(6,202) W,ZTOTS,TTOTS,WY,JCT   
# 202 FORMAT(1X,F8.3,3(1X,D10.3),4X,I6)                 
      J1=J1+1            
      GO TO 1
#  MAIN LOOP # end                                                  
  700 XID=DFLOAT(ID)
      IF(NELEC > IPRIM):
 :
       ANEION=DFLOAT(NEION)
       ANBT=DFLOAT(NELEC-IPRIM)
       ATTOINT=ANEION/ANBT
       ATTERT=math.sqrt(ANEION)/ANEION
       AIOERT=math.sqrt(ANBT)/ANBT
      else:
       ANEION=DFLOAT(NEION) 
       ATTOINT=-1.00
       ATTERT=math.sqrt(ANEION)/ANEION
      # endIF
      JCT=ID/100000  
      IF(J1 == 1):
 :
      WRITE(6,940) NCLUS,ITER
  940 FORMAT(2(/),' def STOPPED  (TOO FEW COLLISIONS), DECREASE THE 
     /ESTIMATED ALPHA.  NCLUS = ',I7,'  ITER =',I9)      
      STOP
      # endIF
      IF(JPRT == 1):
 WRITE(6,878) NELEC,NEION,IPRIM
 878  FORMAT(/,' TOTAL NO OF ELECTRONS=',I8,/,' TOTAL NO OF NEG. IONS=',
     /I8,/,' TOTAL NO OF PRIMARIES=',I8)  
      EPRMBAR=0.00
      E2PRM=0.00
      IF(IPRIM == 1):
 RETURN      
      DO 310 I=1,IPRIM
      E2PRM=E2PRM+EPRM(I)*EPRM(I)
 310  EPRMBAR=EPRMBAR+EPRM(I)
      EBAR=EPRMBAR/IPRIM
      EERR=math.sqrt(E2PRM/IPRIM-EBAR**2)
      IF(JPRT == 1):
 WRITE(6,836) EBAR,EERR
 836  FORMAT(/,2X,'AVERAGE ENERGY OF PRIMARY ELECTRON =',F10.3,' EV.',/,
     /'   ENERGY SPREAD OF PRIMARY ELECTRON =',F10.3,' EV.')
#     WRITE(6,835) (IESPECP(J),J=1,100)
#835  FORMAT(/,2X,'ENERGY SPECTRUM OF PRIMARY ELECTRONS IN 1 EV. BINS',/
#    /,10(2X,10I5,/))
      RETURN               
  315 IF(ITER > NMAX) :
       WRITE(6,991) ITER,NMAX,NPONT,NELEC,IPRIM,NMXADD
 991   FORMAT(2(/),' def STOPPED.  ITER =',I10,'    NMAX =',I10,/,
     /' NPONT=',I4,' NELEC=',I8,' IPRIM=',I4,' NMXADD=',I3)
       STOP
      # endIF                                                             
      RETURN                                                            
      # end
      def TPLANEGT(T,E1,CX1,CY1,CZ1,EFLD,IPLANE):
      IMPLICIT #real*8 (A-H,O-Z)  
      IMPLICIT #integer*8 (I-N)
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5
      COMMON/BFLD/EOVB,WB,BTHETA,BMAG
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/OUTPTT/TIME(300),ICOLL(6,5),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(6,290),ICOLNN(6,10)
      COMMON/TPLOUTG/ETPL(8),XTPL(8),YTPL(8),ZTPL(8),TTPL(8),XXTPL(8),
     /YYTPL(8),ZZTPL(8),YZTPL(8),VZTPL(8),VYTPL(8),NETPL(8),ATTOINT,
     /ATTERT,AIOERT 
#-----------------------------------------------------------------------
# STORES POSITION, TIME AND ENERGY AND SUMS REQUIRED
# TO CALCULATE DEVIATIONS AND MEANS AT PLANE =IPLANE 
# BFIELD AT 90 DEGREES TO EFIELD
#-----------------------------------------------------------------------
      TIMESP=IPLANE*TSTEP
# CALC TIME LEFT TO ARRIVE AT PLANE
      TIMLFT=TIMESP-ST
      T2LFT=TIMLFT*TIMLFT
      WBT=WB*TIMLFT
      COSWT=DCOS(WBT)
      SINWT=DSIN(WBT)
      DZ=(CZ1*SINWT+(EOVB-CY1)*(1.00-COSWT))/WB
      CX2=CX1
      CY2=(CY1-EOVB)*COSWT+CZ1*SINWT+EOVB
      CZ2=CZ1*COSWT-(CY1-EOVB)*SINWT
      VTOT=math.sqrt(CX2*CX2+CY2*CY2+CZ2*CZ2)
      DCZ2=CZ2/VTOT
      DCY2=CY2/VTOT
      XPLANE=X+CX1*TIMLFT
      YPLANE=Y+EOVB*TIMLFT+((CY1-EOVB)*SINWT+CZ1*(1.00-COSWT))/WB
      DZ=(CZ1*SINWT+(EOVB-CY1)*(1.00-COSWT))/WB
      ZPLANE=Z+DZ         
      EPLANE=E1+DZ*EFLD*100.00
      VZPLANE=DCZ2*math.sqrt(EPLANE)*CONST3*0.010
      VYPLANE=DCY2*math.sqrt(EPLANE)*CONST3*0.010
      XTPL(IPLANE)=XTPL(IPLANE)+XPLANE
      YTPL(IPLANE)=YTPL(IPLANE)+YPLANE
      ZTPL(IPLANE)=ZTPL(IPLANE)+ZPLANE
      XXTPL(IPLANE)=XXTPL(IPLANE)+XPLANE*XPLANE
      YYTPL(IPLANE)=YYTPL(IPLANE)+YPLANE*YPLANE
      ZZTPL(IPLANE)=ZZTPL(IPLANE)+ZPLANE*ZPLANE
      YZTPL(IPLANE)=YZTPL(IPLANE)+YPLANE*ZPLANE
      ETPL(IPLANE)=ETPL(IPLANE)+EPLANE
      TTPL(IPLANE)=TTPL(IPLANE)+ST+TIMLFT
      VZTPL(IPLANE)=VZTPL(IPLANE)+VZPLANE
      VYTPL(IPLANE)=VYTPL(IPLANE)+VYPLANE
      NETPL(IPLANE)=NETPL(IPLANE)+1 
      RETURN
      # end
      def PTG(JPRT):
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/TPLOUTG/ETPL(8),XTPL(8),YTPL(8),ZTPL(8),TTPL(8),XXTPL(8),
     /YYTPL(8),ZZTPL(8),YZTPL(8),VZTPL(8),VYTPL(8),NETPL(8),ATTOINT,
     /ATTERT,AIOERT
      COMMON/PTTOFG/RI(8),EPT(8),VZPT(8),VYPT(8),TTEST(8)
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9] 
      DIMENSION ANTPL(8)
# ------------------------------------------------
# CALCULATES PULSED TOWNS# end COEFFICIENTS
#-------------------------------------------------
      ANTPL(1)=DFLOAT(NETPL(1))
      RI(1)=(math.log(ANTPL(1))-math.log(DFLOAT(IPRIM)))/TSTEP
      RI(1)=RI(1)-FAKEI
      EPT(1)=ETPL(1)/ANTPL(1)
      TTEST(1)=TTPL(1)/ANTPL(1)
      VZPT(1)=1.0D+09*VZTPL(1)/ANTPL(1)
      VYPT(1)=1.0D+09*VYTPL(1)/ANTPL(1)
      DO 10 I=2,ITFINAL
      IF(NETPL(I):
 == 0) :
       ITFINAL=I-1
       GO TO 11
      # endIF
      ANTPL(I)=DFLOAT(NETPL(I))      
      RI(I)=(math.log(ANTPL(I))-math.log(ANTPL(I-1)))/TSTEP
      RI(I)=RI(I)-FAKEI
      EPT(I)=ETPL(I)/ANTPL(I)
      TTEST(I)=TTPL(I)/ANTPL(I)
      VZPT(I)=1.0D+09*VZTPL(I)/ANTPL(I)
      VYPT(I)=1.0D+09*VYTPL(I)/ANTPL(I)
  10  CONTINUE
  11  IF(JPRT == 1) WRITE(6,900) ITFINAL
 900  FORMAT(2(/),' PULSED TOWNS# end RESULTS AT',I2,' SEQUENTIAL TIME PLA
     /NES',/,'PLANE   (ION-ATT)FRQ.    ENERGY      WVZ       WVY   NO.OF
     / ELECTRONS',/)   
      DO 20 IPL=1,ITFINAL
      IF(JPRT == 1):
 WRITE(6,910) IPL,RI(IPL),EPT(IPL),VZPT(IPL),
     /VYPT(IPL),NETPL(IPL)
 910  FORMAT(1X,I2,4X,D12.4,4X,F7.2,4X,F6.1,4X,F6.1,4X,I8)
  20  CONTINUE 
      RETURN
      # end
      def TOFG(JPRT):
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/TPLOUTG/ETPL(8),XTPL(8),YTPL(8),ZTPL(8),TTPL(8),XXTPL(8),
     /YYTPL(8),ZZTPL(8),YZTPL(8),VZTPL(8),VYTPL(8),NETPL(8),ATTOINT,
     /ATTERT,AIOERT
      COMMON/TOFGOUT/RALPHA,RALPER,TOFENE,TOFENER,TOFWVZ,TOFWVZER,
     /TOFWVY,TOFWVYER,TOFDZZ,TOFDZZER,TOFDXX,TOFDXXER,TOFDYY,TOFDYYER,
     /TOFDYZ,TOFDYZER,TOFWRZ,TOFWRZER,TOFWRY,TOFWRYER,RATTOF,RATOFER 
      COMMON/PTTOFG/RI(8),EPT(8),VZPT(8),VYPT(8),TTEST(8)
      COMMON/THRM/AMGAS(6),VTMB[6],TCFMX,TCFMXG(6),ITHRM
      DIMENSION DZTF(8),DXTF(8),DYTF(8),DYZTF(8),WRZ[8],WRY(8),ANTPL(8)
#----------------------------------------------------------
# CALCULATES TIME OF FLIGHT COEFFICIENTS
#---------------------------------------------
      IF(ITHRM == 1):
 CALL COLFT(DUM1,DUM2,FRION,FRATT,DUM3,IDUM4)
      IF(ITHRM == 0):
 CALL COLF(DUM1,DUM2,FRION,FRATT,DUM3,IDUM4)
      CORERR=abs((FAKEI+FRION-FRATT)/(FRION-FRATT))
      ATTOINT=FRATT/FRION
      ANTPL(1)=DFLOAT(NETPL(1))
      WRZ[1]=ZTPL(1)/(ANTPL(1)*TSTEP)
      WRY(1)=YTPL(1)/(ANTPL(1)*TSTEP)
      DZTF(1)=((ZZTPL(1)/ANTPL(1))-(ZTPL(1)/ANTPL(1))**2)/(2.00*TSTEP)
      DXTF(1)=((XXTPL(1)/ANTPL(1))-(XTPL(1)/ANTPL(1))**2)/(2.00*TSTEP)
      DYTF(1)=((YYTPL(1)/ANTPL(1))-(YTPL(1)/ANTPL(1))**2)/(2.00*TSTEP)
      DYZTF(1)=((YZTPL(1)/ANTPL(1))-(YTPL(1)*ZTPL(1)/(ANTPL(1)**2)))/(2
     /.00*TSTEP) 
      DO 10 I=2,ITFINAL
      ANTPL(I)=DFLOAT(NETPL(I)) 
      WRZ[I]=((ZTPL(I)/ANTPL(I))-(ZTPL(I-1)/ANTPL(I-1)))/TSTEP
      WRY(I)=((YTPL(I)/ANTPL(I))-(YTPL(I-1)/ANTPL(I-1)))/TSTEP
      DZTF(I)=((ZZTPL(I)/ANTPL(I))-(ZTPL(I)/ANTPL(I))**2-(ZZTPL(I-1)/ANT
     /PL(I-1))+(ZTPL(I-1)/ANTPL(I-1))**2)/(2.00*TSTEP)
      DXTF(I)=((XXTPL(I)/ANTPL(I))-(XTPL(I)/ANTPL(I))**2-(XXTPL(I-1)/ANT
     /PL(I-1))+(XTPL(I-1)/ANTPL(I-1))**2)/(2.00*TSTEP)
      DYTF(I)=((YYTPL(I)/ANTPL(I))-(YTPL(I)/ANTPL(I))**2-(YYTPL(I-1)/ANT
     /PL(I-1))+(YTPL(I-1)/ANTPL(I-1))**2)/(2.00*TSTEP)
      DYZTF(I)=((YZTPL(I)/ANTPL(I))-(YTPL(I)*ZTPL(I)/(ANTPL(I)**2))-(YZT
     /PL(I-1)/ANTPL(I-1))+(YTPL(I-1)*ZTPL(I-1)/(ANTPL(I-1)**2)))/(2.00*
     /TSTEP)
  10  CONTINUE  
      DO 15 I=1,ITFINAL
      WRZ[I]=WRZ[I]*1.0D+09
      WRY(I)=WRY(I)*1.0D+09
      DZTF(I)=DZTF(I)*1.0D+16
      DXTF(I)=DXTF(I)*1.0D+16
      DYTF(I)=DYTF(I)*1.0D+16
      DYZTF(I)=DYZTF(I)*1.0D+16
  15  CONTINUE
      IF(JPRT == 1):
 WRITE(6,900) ITFINAL
 900  FORMAT(2(/),' TIME OF FLIGHT RESULTS AT',I2,' SEQUENTIAL TIME PLAN
     /ES',/,'PLANE    DZZ      DXX      DYY      DYZ        WRZ         
     /WRY',/)
      DO 20 IPL=1,ITFINAL   
      IF(JPRT == 1):
 WRITE(6,910) IPL,DZTF(IPL),DXTF(IPL),DYTF(IPL),
     /DYZTF(IPL),WRZ[IPL],WRY(IPL)  
 910  FORMAT(1X,I2,2X,4F9.1,4X,F8.2,4X,F8.2)
  20  CONTINUE    
      IF(NETPL(1):
 > NETPL(ITFINAL)) :
#        NET ATTACHMENT TAKE RESULTS FROM PLANE 2
       TOFENE=EPT(2)
       TOFENER=100.00*abs((EPT(2)-EPT(3))/(2.00*EPT(2)))
       TOFWVZ=VZPT(2)
       TOFWVZER=100.00*abs((VZPT(2)-VZPT(3))/(2.00*VZPT(2))) 
       TOFWVY=VYPT(2)
       TOFWVYER=100.00*abs((VYPT(2)-VYPT(3))/(2.00*VYPT(2))) 
       TOFDZZ=DZTF(2)
       TOFDZZER=100.00*abs((DZTF(2)-DZTF(3))/(2.00*DZTF(2)))
       TOFDXX=DXTF(2)
       TOFDXXER=100.00*abs((DXTF(2)-DXTF(3))/(2.00*DXTF(2)))
       TOFDYY=DYTF(2)
       TOFDYYER=100.00*abs((DYTF(2)-DYTF(3))/(2.00*DYTF(2)))
       TOFDYZ=DYZTF(2)
       TOFDYZER=100.00*abs((DYZTF(2)-DYZTF(3))/(2.00*DYZTF(2)))
       TOFWRZ=WRZ[2]
       TOFWRY=WRY(2)
       TOFWRZER=100.00*abs((WRZ[2]-WRZ[3])/(2.00*WRZ[2]))
       TOFWRYER=100.00*abs((WRY(2)-WRY(3))/(2.00*WRY(2))) 
        ANST2=DFLOAT(NETPL(2))
        ANST3=DFLOAT(NETPL(3))
        ANST4=ANST3-math.sqrt(ANST3)
        ANST5=math.log(ANST2/ANST3)
        ANST6=math.log(ANST2/ANST4)
        ANST7=ANST6/ANST5
        ANST8=ANST7-1.00
       IF(ATTOINT == -1.00):
 :
#        NO IONISATION
        RALPHA=0.00
        RALPER=0.00
        RATTOF=-RI(2)
        RATOFER=100.00*math.sqrt(ANST8**2+ATTERT**2)
       else:
        RALPHA=RI(2)/(1.00-ATTOINT)
        RALPER=100.00*math.sqrt(ANST8**2+AIOERT**2)
        RATTOF=ATTOINT*RI(2)/(1.00-ATTOINT)
        RATOFER=100.00*math.sqrt(ANST8**2+ATTERT**2)
       # endIF 
      else:
# NET IONISATION TAKE RESULTS FROM PLANE ITFINAL
       I1=ITFINAL
       I2=ITFINAL-1  
       TOFENE=EPT(I1)
       TOFENER=100.00*abs((EPT(I1)-EPT(I2))/EPT(I1))
       TOFWVZ=VZPT(I1)
       TOFWVZER=100.00*abs((VZPT(I1)-VZPT(I2))/VZPT(I1))
       TOFWVY=VYPT(I1)
       TOFWVYER=100.00*abs((VYPT(I1)-VYPT(I2))/VYPT(I1))
       TOFDZZ=DZTF(I1)
       TOFDZZER=100.00*abs((DZTF(I1)-DZTF(I2))/DZTF(I1))
       TOFDXX=DXTF(I1)
       TOFDXXER=100.00*abs((DXTF(I1)-DXTF(I2))/DXTF(I1))
       TOFDYY=DYTF(I1)
       TOFDYYER=100.00*abs((DYTF(I1)-DYTF(I2))/DYTF(I1))
       TOFDYZ=DYZTF(I1)
       TOFDYZER=100.00*abs((DYZTF(I1)-DYZTF(I2))/DYZTF(I1))
       TOFWRZ=WRZ[I1]
       TOFWRY=WRY(I1)
       TOFWRZER=100.00*abs((WRZ[I1]-WRZ[I2])/WRZ[I1])
       TOFWRYER=100.00*abs((WRY(I1)-WRY(I2))/WRY(I1))
       ATER=abs((RI(I1)-RI(I2))/RI(I1))
       RALPHA=RI(I1)/(1.00-ATTOINT)
       RALPER=100.00*math.sqrt(ATER**2+AIOERT**2)
       RATTOF=ATTOINT*RI(I1)/(1.00-ATTOINT)
       IF(ATTOINT != 0.00):
 :
        RATOFER=100.00*math.sqrt(ATER**2+ATTERT**2)
       else:
        RATOFER=0.00
       # endIF  
      # endIF
      RETURN
      # end                
      def ALPCLCCT   :
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX 
      COMMON/TOFHOUT/RALPHA,RALPER,TOFENE,TOFENER,TOFWVZ,TOFWVZER,
     /TOFWVY,TOFWVYER,TOFWVX,TOFWVXER,TOFDZZ,TOFDZZER,TOFDXX,TOFDXXER,
     /TOFDYY,TOFDYYER,TOFDYZ,TOFDYZER,TOFDXY,TOFDXYER,TOFDXZ,TOFDXZER,
     /TOFWRZ,TOFWRZER,TOFWRY,TOFWRYER,TOFWRX,TOFWRXER,RATTOF,RATOFER 
      COMMON/VEL/WX,WY,WZ
      COMMON/CTOWNS/ALPHA,ATT
      COMMON/CTWNER/ALPER,ATTER
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9] 
      COMMON/LARGET/CF(6,4000,290),EIN(6,290),TCF(6,4000),IARRY(6,290),
     /RGAS(6,290),IPN(6,290),WPL(6,290),IPLAST(6),ISIZE(6),
     /PENFRA[6,3,290],TCFMAX(6)
# ----------------------------------------------------------------------     
#  ESTIMATE TIME STEP  FOR AVALANCHE SIMULATION IN TIME OF FLIGHT SIM. 
#  USES ESTIMATED GAIN OF 3.0 BETWEEN PLANES. 
#  CALLS TOF AND PT defS AND UPDATES ALPHA AND ATT
#  BFIELD AT ANY ANGLE BTHETA TO EFIELD
# ----------------------------------------------------------------------
      IMAX=NMAX/10000000 
      IF(IMAX < 5):
 IMAX=5 
      NMAX=IMAX*10000000
      CORR=760.0*(TEMPC+273.15)/(TORR*293.15)
      ALPP=ALPHA/CORR
      ATTP=ATT/CORR
      ANETP=ALPP-ATTP
      ANET=ALPHA-ATT
      TCUTH=1.2D-10*CORR
      TCUTL=1.D-13*CORR
#   
      IF (ANETP > 30.0):
 :
       ALPHAD=0.0
       ALP1=ALPHA
       ATT1=ATT
# WEAK ATTACHMENT
       GO TO 6
      # endIF 
#  SOME ATTACHMENT
      IF(abs(ANETP):
 < 100.) :
# SMALL NET ATTACHMENT
       ALPHAD=abs(ATT)*0.8
      elif(abs(ANETP) >= 100. and abs(ANETP) < 1000.) :
# LARGER NET ATTACHMENT
       ALPHAD=abs(ANET)*0.65
      elif(abs(ANETP) > 1000. and abs(ANETP) < 10000.) :
       ALPHAD=abs(ANET)*0.6
      elif(abs(ANETP) > 10000. and abs(ANETP) < 100000.) :
       ALPHAD=abs(ANET)*0.5
      elif(abs(ANETP) > 100000. and abs(ANETP) < 2000000.) :
       ALPHAD=abs(ANET)*0.4
      else: 
       WRITE(6,91) 
   91 FORMAT(' ATTACHMENT TOO LARGE def STOPPED')
       STOP
      # endIF
   3  VDST=math.sqrt(WZ*WZ+WY*WY+WX*WX)*1.D-5
      FAKEI=ALPHAD*math.sqrt(WZ*WZ+WY*WY+WZ*WZ)*1.D-12
      ALPHAST=0.85*abs(ALPHAD+ANET)                        
      TSTEP=math.log(3.00)/(ALPHAST*VDST*1.0D5)
      IF(TSTEP > TCUTH):
 TSTEP=TCUTH
      IF(TSTEP < TCUTL):
 TSTEP=TCUTL
# UPDATE NULL COLLISION FREQUENCY LIMIT
      DO 4 J=1,NGAS 
    4 TCFMAX(J)=TCFMAX(J)+abs(FAKEI)/DFLOAT(NGAS)
      WRITE(6,871) ALPHAST,ANET,ALPHAD,TSTEP
  871 FORMAT(' ALPHAST1=',D10.3,' ANET1=',D10.3,' ALPHAD1=',D10.3,/,
     /' TSTEP1=',D10.3)
#  CONVERT TO  PICOSECONDS     
      TSTEP=TSTEP*1.0D12
      TFINAL=7.00*TSTEP
      ITFINAL=7
# CALCULATE GOOD STARTING VALUES FOR ALPHA AND NETA
      JPRT=0
      CALL MONTEFTHT(JPRT)
      CALL PTH(JPRT)
      CALL TOFH(JPRT)
      TOFWR=math.sqrt(TOFWRZ*TOFWRZ+TOFWRY*TOFWRY+TOFWRX*TOFWRX)
      ALP1=RALPHA/TOFWR*1.D7
      ALP1ER=RALPER*ALP1/100. 
      ATT1=RATTOF/TOFWR*1.D7
      ATT1ER=RATOFER*ATT1/100.
      WRITE(6,944) ALP1,ALP1ER,ATT1,ATT1ER
  944 FORMAT(' GOOD STARTING VALUES FOR CALC:',/,' ALPHA=',D12.3,' ERR='
     /,D12.3,/,' NETA =',D12.3,' ERR=',D12.3)
#
# CALCULATE USING GOOD STARTING VALUES
#  RESET TCFMAX
      DO 44 J=1,NGAS
   44 TCFMAX(J)=TCFMAX(J)-abs(FAKEI)/DFLOAT(NGAS)
# CALCULATE FAKE IONISATION RATE SCALING BY 1.2 
      ALPHAD=abs(ATT1)*1.2
      IF((ALP1-ATT1):
 > 30.*CORR) ALPHAD=abs(ATT1)*0.4
      IF(abs(ALP1-ATT1):
 < (ALP1/10.0) or abs(ALP1-ATT1) < 
     /(ATT1/10.0)) ALPHAD=abs(ATT1)*0.3
      IF((ALP1-ATT1):
 > 100.*CORR) ALPHAD=0.0
      WZ=TOFWRZ*1.D5
      WY=TOFWRY*1.D5
      WX=TOFWRX*1.D5
#
#
# NET IONISATION
#   5 IF(ANET > (11000./CORR)) :
# HIGH IONISATION
#      ALPHAD=7000.-(ALPHA-ATT)
#     elif (abs(ALPP) > (5.0*abs(ANET)) or abs(ATTP) > 
#    /(5.0*abs(ANET))) :
# LARGE CANCELLATION BETWEEN ATTACHMENT AND IONISATION
#      ALPHAD=-6.0*abs(ALPHA-ATT)
#     else:
#      ALPHAD=0.0
#     # endIF
    6 VTTT=math.sqrt(WZ*WZ+WY*WY+WX*WX) 
      VDST=VTTT*1.D-5
      FAKEI=ALPHAD*VTTT*1.D-12
      ALPHAST=0.850*abs(ALPHAD+ALP1-ATT1)
      IF((ALP1+ALPHAD):
 > (10.0*ALPHAST) or ATT1 > (10.0*ALPHAST)) :
# LARGE CANCELLATION BETWEEN ALPHA AND NETA. REDUCE STEP SIZE BY 15.0
       IF((ALP1+ALPHAD):
 > 100.*CORR) :
        ALPHAST=ALPHAST*15.0
       elif((ALP1+ALPHAD) > 50.0*CORR) :
        ALPHAST=ALPHAST*12.0
       else:
        ALPHAST=ALPHAST*8.0
       # endIF
      # endIF
      TSTEP=math.log(3.00)/(ALPHAST*VDST*1.0D5)
      IF(TSTEP > TCUTH and ALPHAD != 0.0):
 TSTEP=TCUTH
# UPDATE NULL COLLISION FREQUENCY
      DO 10 J=1,NGAS
   10 TCFMAX(J)=TCFMAX(J)+abs(FAKEI)/NGAS
      ANET1=ALP1-ATT1
      WRITE(6,878) ALPHAST,ANET1,ALPHAD,TSTEP
  878 FORMAT(' ALPHAST=',D10.3,' ANET=',D10.3,' ALPHAD=',D10.3,/,
     /' TSTEP=',D10.3)
      TSTEP=TSTEP*1.0D12
      TFINAL=7.00*TSTEP
      ITFINAL=7
# CALC TIME OF FLIGHT AND PT 
      WRITE(6,25)
   25 FORMAT(/,2X,'SOLUTION FOR PULSED TOWNS# end AND TIME OF FLIGHT PARAM
     /ETERS',/,'  ------------------------------------------------------
     /--------') 
      WRITE(6,26) TSTEP
   26 FORMAT(1(/),'  TIME STEP BETWEEN SAMPLING PLANES =',D12.5,' PICOSE
     /CS.',/)       
      JPRT=1              
      CALL MONTEFTHT(JPRT)                             
      CALL FRIEDLANDT 
      CALL PTH(JPRT)
      CALL TOFH(JPRT)
      WRITE(6,27) RALPHA,RALPER,RATTOF,RATOFER
   27 FORMAT(/,'PT IONISATION AND ATTACHMENT RATES *10**12/SEC',/,'ALPHA
      != ',D10.3,' +- ',F6.2,' %      ATT=',D10.3,' +- ',F6.2,' %')    
      WRITE(6,28) 
   28 FORMAT(/,'TOF DIFFUSION')
      WRITE(6,29) TOFDZZ,TOFDZZER,TOFDXX,TOFDXXER,TOFDYY,TOFDYYER,  
     /TOFDYZ,TOFDYZER,TOFDXZ,TOFDXZER,TOFDXY,TOFDXYER  
   29 FORMAT(/,'DZZ=',F8.1,' +- ',F5.1,' %',/,'DXX=',F8.1,' +- ',F5.1,' 
     /%',/,'DYY=',F8.1,' +- ',F5.1,' %',/,'DYZ=',F8.1,' +- ',F5.1,' %',/
     /,'DXZ=',F8.1,' +- ',F5.1,' %',/,'DXY=',F8.1,' +- ',F5.1,' %')
      WRITE(6,30)
   30 FORMAT(/,'TOF DRIFT VELOCITY')
      WRITE(6,31) TOFWRZ,TOFWRZER,TOFWRY,TOFWRYER,TOFWRX,TOFWRXER   
   31 FORMAT(/,'WRZ=',F8.2,' +-',F6.1,' %    WRY=',F8.2,' +-',F6.1,' %  
     / WRX=',F8.2,' +-',F6.1,' %')  
# CALCULATE TOWNS# end SST COEFICIENTS FROM TOF RESULTS   
      TOFWR=math.sqrt(TOFWRZ*TOFWRZ+TOFWRY*TOFWRY+TOFWRX*TOFWRX)   
      WRZN=TOFWR*1.005
      FC1=WRZN/(2.00*TOFDZZ)
      FC2=((RALPHA-RATTOF)*1.0D12)/TOFDZZ
      ALPZZ=FC1-math.sqrt(FC1**2-FC2)
      WRITE(6,888) ALPZZ
  888 FORMAT(/,'TOWNS# end COEFICIENT (ALPHA-ATT) CALCULATED FROM TOF RESU
     /LTS:',/,' ALPHA-ATT /CM.=',D11.4,' N.B. APPROXIMATE FORMULA NOT AC
     /CURATE',/)  
#      -----------------------------------------------------    
# LOAD NEW ALPHA AND ATTACHMENT INTO COMMON BLOCKS
#      -----------------------------------------------
      ALPHA=RALPHA/TOFWR*1.D7
      ALPER=RALPER*ALPHA/100.
      ATT=RATTOF/TOFWR*1.D7
      ATTER=RATOFER*ATT/100.
#     WRITE(6,32) ALPHA,ALPER,ATT,ATTER 
#  32 FORMAT(/,'TOWNS# end COEFICIENTS CALCULATED FROM TOF RESULTS:',2(/),
#    /'IONISATION RATE /CM.=',D11.4,' +-',F6.2,/,'ATTACHMENT RATE /CM.='
#    /,D11.4,' +-',F6.2,/)           
#      ------------------------------------------      
      RETURN                                                     
      # end                                                               
      def MONTEFTHT(JPRT):                                       
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAXOLD
      COMMON/BFLD/EOVB,WB,BTHETA,BMAG
      COMMON/ROTS/RCS,RSN,EFZ100,EFX100,F1,EOVBR                        
      COMMON/LARGET/CF(6,4000,290),EIN(6,290),TCF(6,4000),IARRY(6,290),
     /RGAS(6,290),IPN(6,290),WPL(6,290),IPLAST(6),ISIZE(6),
     /PENFRA[6,3,290],TCFMAX(6)
      COMMON/LARGENT/CFN(6,4000,10),TCFN(6,4000),SCLENUL(6,10),NPLAST(6)
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/OUTPTT/TIME(300),ICOLL(6,5),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(6,290),ICOLNN(6,10)
      COMMON/TTRM/ZTOT,TTOT,ZTOTS,TTOTS
      COMMON/THRM/AMGAS(6),VTMB[6],TCFMX,TCFMXG(6),ITHRM
      COMMON/RANM/RNMX(6)
      COMMON/ISPT/XS(2000),YS(2000),ZS(2000),TS(2000),ES(2000),
     /DCX(2000),DCY(2000),DCZ[2000],IPL(2000)
      COMMON/TPLOUTH/ETPL(8),XTPL(8),YTPL(8),ZTPL(8),TTPL(8),XXTPL(8),
     /YYTPL(8),ZZTPL(8),YZTPL(8),XZTPL(8),XYTPL(8),VZTPL(8),VYTPL(8),
     /VXTPL(8),NETPL(8),ATTOINT,ATTERT,AIOERT
      COMMON/ANIST/PSCT(6,4000,290),ANGCT(6,4000,290),INDEX(6,290),NISO 
      COMMON/IONFL/NC0(6,290),EC0(6,290),NG1(6,290),EG1(6,290),
     /NG2(6,290),EG2(6,290),WKLM(6,290),EFL(6,290)
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9] 
      DIMENSION EPRM(10000000),IESPECP(100),TEMP(6,4000)
# -------------------------------------------------------------------   
#   CALCULATES COLLISION EVENTS AND UPDATES DIFFUSION AND VELOCITY.
#   THIS ROUTINE HANDLES TERMINATIONS AT FIXED DRIFT TIMES. 
#   SOLVES MOTION IN COORDINATE SYSTEM WITH BFIELD ALIGNED TO X-AXIS
#   ELECTRIC FIELD AT AN ANGLE BTHETA IN THE X-Z PLANE.
#   THE RESULTS FOR THE VELOCITY VECTORS  ARE : 
#   ROTATED INTO THE STANDARD COORDINATE FRAME WITH THE ELECTRIC FIELD 
#   ALONG THE Z-AXIS AND THE BFIELD AT AN ANGLE BTHETA TO THE ELECTRIC
#   FIELD IN THE X-Z PLANE  
# ------------------------------------------------------------------- 
      IF(JPRT == 0):
 :
# CALCULATION OF APPROXIMATE STARTING PARAMETERS
       NMAX=NMAXOLD
       IF(NMAXOLD > 80000000):
 NMAX=80000000
      else:
# ENTRY FOR NORMAL CALCULATION
       NMAX=NMAXOLD
      # endIF 
      S=0.00 
      ST=0.00 
      X=0.00
      Y=0.00
      Z=0.00 
      ZTOT=0.00
      ZTOTS=0.00
      YTOT=0.00
      YTOTS=0.00
      XTOT=0.00
      XTOTS=0.00
      TTOT=0.00
      TTOTS=0.00
      SMALL=1.0D-20                                                     
      TMAX1=0.00                                                       
      RDUM=RSTART                                                       
      E1=ESTART                                                         
      DO 25 I=1,300
   25 TIME(I)=0.00
      DO 26 I=1,5
      DO 26 K=1,6
   26 ICOLL(K,I)=0
      DO 27 I=1,290
      DO 27 K=1,6
   27 ICOLN(K,I)=0
      DO 271 I=1,10
      DO 271 K=1,6
  271 ICOLNN(K,I)=0
      DO 28 I=1,4000
   28 SPEC(I)=0.00            
      DO 33 I=1,100
   33 IESPECP(I)=0 
      DO 34 I=1,8
      ETPL(I)=0.00
      XTPL(I)=0.00
      YTPL(I)=0.00
      ZTPL(I)=0.00
      TTPL(I)=0.00
      XXTPL(I)=0.00
      YYTPL(I)=0.00
      ZZTPL(I)=0.00
      YZTPL(I)=0.00
      XZTPL(I)=0.00
      XYTPL(I)=0.00
      VZTPL(I)=0.00
      VYTPL(I)=0.00
      VXTPL(I)=0.00
   34 NETPL(I)=0                                   
      ID=0
      N4000=4000
      N300=300
      N100=100
      I100=0                                                            
      NCOL=0                                                            
      NNULL=0
      NELEC=0
      NEION=0
      NMXADD=0
      NTMPFLG=0
      NPONT=0 
      NCLUS=0
      J1=1 
      ZSTRT=0.00
      YSTRT=0.00
      XSTRT=0.00
      TSSTRT=0.00 
      API=DACOS(-1.00)  
#
      DO 111 K=1,6
      DO 111 J=1,N4000
  111 TEMP(K,J)=TCF(K,J)+TCFN(K,J)
      ABSFAKEI=abs(FAKEI)
      IFAKE=0:
      DO 112 J=1,8
  112 IFAKET(J)=0
#
# CALC ROTATION MATRIX ANGLES
      RCS=DCOS((BTHETA-90.00)*API/180.00)
      RSN=DSIN((BTHETA-90.00)*API/180.00)
# 
      RTHETA=BTHETA*API/180.00
      EFZ100=EFIELD*100.00*DSIN(RTHETA)
      EFX100=EFIELD*100.00*DCOS(RTHETA)
      F1=EFIELD*CONST2*DCOS(RTHETA)
      F4=2.00*API
      CONST9=CONST3*0.010
      CONST10=CONST9*CONST9
      EOVBR=EOVB*DSIN(RTHETA)
# GENERATE INITIAL RANDOM NUMBERS FOR MAXWELL BOLTZMAN 
      CALL GERJAN
      IMBPT=0
#     INITIAL DIRECTION COSINES                                         
      DCZ1=DCOS(THETA)                                                  
      DCX1=DSIN(THETA)*DCOS(PHI)                                        
      DCY1=DSIN(THETA)*DSIN(PHI) 
# INITIAL VELOCITY
      VTOT=CONST9*math.sqrt(E1)
      CX1=DCX1*VTOT
      CY1=DCY1*VTOT
      CZ1=DCZ1*VTOT      
      E100=E1
      DCZ100=DCZ1
      DCX100=DCX1
      DCY100=DCY1                                       
      JPRINT=NMAX/10
      IPRINT=0
      ITER=0
      IPLANE=0
      IPRIM=0
#  LOOP FOR NEW STARTING ELECTRONS 
  544 IPRIM=IPRIM+1 
      IF(IPRIM > 1):
 :
# CHECK IF def WILL EXCEED MAXIMUM NUMBER OF ITERATIONS 
# IN THIS CYCLE IF SO OUTPUT CURRENT RESULTS. 
       IF(ITER > NMAX):
 :
        IPRIM=IPRIM-1
        GO TO 700      
       # endIF 
       X=0.00
       Y=0.00
       Z=0.00
       DCZ1=DCZ100
       DCX1=DCX100
       DCY1=DCY100
       E1=E100
       VTOT=CONST9*math.sqrt(E1)
       CX1=DCX1*VTOT
       CY1=DCY1*VTOT
       CZ1=DCZ1*VTOT
       NCLUS=NCLUS+1
       ST=0.00
       TSSTRT=0.00
       ZSTRT=0.00
       YSTRT=0.00
       XSTRT=0.00
       IPLANE=0
      # endIF
      IF(IPRIM > 10000000):
 :
      WRITE(6,944) IPRIM
 944  FORMAT(/,2X,'def STOPPED TOO MANY PRIMARIES IPRIM =',I7)
      GO TO 700
      # endIF
      EPRM(IPRIM)=E1
      IDUM=DINT(E1)+1
      IDUM=DMIN0(IDUM,N100)
      IESPECP(IDUM)=IESPECP(IDUM)+1      
# START OF LOOP FOR NEWLY CREATED ELECTRONS
  555 TDASH=0.00
      NELEC=NELEC+1
      TSTOP=TSTEP+IPLANE*TSTEP       
# MAIN LOOP                                                             
    1 CONTINUE                                                          
#     IF(ITER > NMAX)  GO TO 315
      R1=drand48(RDUM)
      T=-math.log(R1)/TCFMX+TDASH
      TDASH=T
      WBT=WB*T
      COSWT=DCOS(WBT)
      SINWT=DSIN(WBT)
  15  IF((T+ST) >= TSTOP) :                     
       IPLANE=IPLANE+1
       TSTOP=TSTOP+TSTEP
# STORE POSITION AND ENERGY AT TIME PLANE =IPLANE. 
       CALL TPLANEHT(T,E1,CX1,CY1,CZ1,EFIELD,IPLANE)
# CHECK IF PASSED THROUGH MORE THAN ONE PLANE IN THIS STEP       
       IF((T+ST):
 >= TSTOP and TSTOP <= TFINAL) GO TO 15
       IF((T+ST):
 >= TFINAL) :
        ZTOT=ZTOT+Z
        YTOT=YTOT+Y
        XTOT=XTOT+X     
        TTOT=TTOT+ST
        ZTOTS=ZTOTS+Z-ZSTRT 
        YTOTS=YTOTS+Y-YSTRT
        XTOTS=XTOTS+X-XSTRT     
        TTOTS=TTOTS+ST-TSSTRT    
        TSTOP=TSTEP
# NO MORE ELECTRONS IN CASCADE TRY NEW PRIMARY ELECTRON
        IF(NELEC == (NCLUS+1):
) GO TO 544  
# TAKE ELECTRONS FROM STORE 
   20   X=XS(NPONT) 
        Y=YS(NPONT) 
        Z=ZS(NPONT) 
        ST=TS(NPONT) 
        E1=ES(NPONT) 
        DCX1=DCX(NPONT) 
        DCY1=DCY(NPONT) 
        DCZ1=DCZ[NPONT]
        VTOT=CONST9*math.sqrt(E1)
        CX1=DCX1*VTOT
        CY1=DCY1*VTOT
        CZ1=DCZ1*VTOT 
        IPLANE=IPL(NPONT)   
        NPONT=NPONT-1 
        ZSTRT=Z 
        YSTRT=Y
        XSTRT=X
        TSSTRT=ST
        GO TO 555
       # endIF              
      # endIF
      DZ=(CZ1*SINWT+(EOVBR-CY1)*(1.00-COSWT))/WB
      DX=CX1*T+F1*T*T
      E=E1+DZ*EFZ100+DX*EFX100
 913  FORMAT(3X,' AFTER STORE ITER=',I10,' DZ=',D12.3,'E1=',D12.3,/,' CO
     /SWT=',D12.6,' SINWT=',D12.6,' WBT=',D12.3,' CY1=',D12.3)   
      IF(E < 0.00):
 :
#      WRITE(6,913)ITER,DZ,E,COSWT,SINWT,WBT,CY1  
       E=0.0010
      # endIF            
# CALCULATE ELECTRON VELOCITY IN LAB FRAME
      CX2=CX1+2.00*F1*T
      CY2=(CY1-EOVBR)*COSWT+CZ1*SINWT+EOVBR
      CZ2=CZ1*COSWT-(CY1-EOVBR)*SINWT
# FIND IDENTITY OF GAS FOR COLLISION
      KGAS=0
      IF(NGAS == 1):
 :
      R2=drand48(RDUM)
       KGAS=1
       GO TO 4
      # endIF
      R2=drand48(RDUM)
    3 KGAS=KGAS+1
      IF(TCFMXG(KGAS):
 < R2) GO TO 3
# CALCULATE GAS VELOCITY VECTORS VGX,VGY,VGZ
    4 IMBPT=IMBPT+1
      IF(IMBPT > 6):
 :
       CALL GERJAN
       IMBPT=1
      # endIF
      VGX=VTMB[KGAS]*RNMX(IMBPT)
      IMBPT=IMBPT+1
      VGY=VTMB[KGAS]*RNMX(IMBPT)
      IMBPT=IMBPT+1
      VGZ=VTMB[KGAS]*RNMX(IMBPT)
# CALCULATE ENERGY WITH STATIONARY GAS TARGET, EOK.
      EOK=((CX2-VGX)**2+(CY2-VGY)**2+(CZ2-VGZ)**2)/CONST10
      IE=DINT(EOK/ESTEP)+1                                             
      IE=DMIN0(IE,N4000)                                               
#                                                                       
#     TEST FOR #real OR NULL COLLISION   
#                                
      R5=drand48(RDUM)                                           
      TEST1=TCF(KGAS,IE)/TCFMAX(KGAS)                                   
      IF(R5 <= TEST1):
 GO TO 137
      NNULL=NNULL+1
      TEST2=TEMP(KGAS,IE)/TCFMAX(KGAS)
      IF(R5 < TEST2):
 :
# TEST FOR NULL LEVELS
       IF(NPLAST(KGAS):
 == 0) GO TO 1 
       R2=drand48(RDUM)
       I=0
  888  I=I+1
       IF(CFN(KGAS,IE,I):
 < R2) GO TO 888
# INCREMENT NULL SCATTER SUM
       ICOLNN(KGAS,I)=ICOLNN(KGAS,I)+1
       GO TO 1
      # endIF  
      TEST3=(TEMP(KGAS,IE)+ABSFAKEI)/TCFMAX(KGAS) 
      IF(R5 < TEST3):
 :                                             
# FAKE IONISATION INCREMENT COUNTER AND ADD ELECTRON TO STORE
       IFAKE=IFAKE+1:
       IFAKET(IPLANE+1):
=IFAKET(IPLANE+1)+1
       IF(FAKEI < 0.0):
 :
        NEION=NEION+1
# FAKE ATTACHMENT START NEW ELECTRON
        IF(NELEC == (NCLUS+1):
) GO TO 544
# ELECTRON CAPTURED TAKE NEW ELECTRON FROM STORE
        GO TO 20
       # endIF
# FAKE IONISATION ADD ELECTRON TO STORE
       NCLUS=NCLUS+1
       NPONT=NPONT+1
       NMXADD=MAX(NPONT,NMXADD)
       IF(NPONT > 2000):
 : 
        WRITE(6,546) NPONT,ITER
        STOP
       # endIF     
       XS(NPONT)=X+DX       
       YS(NPONT)=Y+EOVBR*T+((CY1-EOVBR)*SINWT+CZ1*(1.00-COSWT))/WB
       ZS(NPONT)=Z+DZ
       TS(NPONT)=ST+T
       ES(NPONT)=E   
       IPL(NPONT)=IPLANE
       BOT=1.00/math.sqrt(CX2*CX2+CY2*CY2+CZ2*CZ2)
       DCX(NPONT)=CX2*BOT      
       DCY(NPONT)=CY2*BOT    
       DCZ[NPONT]=CZ2*BOT       
       GO TO 1
      # endIF
      GO TO 1 
  137 NCOL=NCOL+1   
# CALCULATE DIRECTION COSINES OF ELECTRON IN 0 KELVIN FRAME
      CONST11=1.00/(CONST9*math.sqrt(EOK))
      DXCOM=(CX2-VGX)*CONST11
      DYCOM=(CY2-VGY)*CONST11
      DZCOM=(CZ2-VGZ)*CONST11
#  CALCULATE  POSITIONS AT INSTANT BEFORE COLLISION
#    ALSO UPDATE DIFFUSION  AND ENERGY CALCULATIONS.                    
      T2=T*T
      IF(T >= TMAX1):
 TMAX1=T
      TDASH=0.00  
# CALC NEW POSITION                                                
      X=X+DX                                                            
      Y=Y+EOVBR*T+((CY1-EOVBR)*SINWT+CZ1*(1.00-COSWT))/WB
      Z=Z+DZ          
      ST=ST+T
      IT=DINT(T+1.00)                                                
      IT=DMIN0(IT,N300)                                                
      TIME(IT)=TIME(IT)+1.00    
# ENERGY SPECTRUM IN 0 KELVIN FRAME                                    
      SPEC(IE)=SPEC(IE)+1.00
# --------------------------------------------------------------------- 
#     DETERMINATION OF #real COLLISION TYPE                              
# --------------------------------------------------------------------- 
      R2=drand48(RDUM)
# FIND LOCATION WITHIN 4 UNITS IN COLLISION ARRAY
      CALL SORTT(KGAS,I,R2,IE)                                         
  140 I=I+1                                                             
      IF(CF(KGAS,IE,I):
 < R2) GO TO 140                                 
      S1=RGAS(KGAS,I)                                                   
      EI=EIN(KGAS,I)
      IF(EOK < EI):
 :
# FIX ENERGY LOSS SMALLER THAN INCIDENT ENERGY IF A BINING ERROR OCCURS.
      EI=EOK-0.00010
      # endIF                                                          
      IF(IPN(KGAS,I):
 == 0) GO TO 666
# ATTACHMENT       
      IF(IPN(KGAS,I):
 == -1) :
       NEION=NEION+1
       IPT=IARRY(KGAS,I)
       ID=ID+1
       ITER=ITER+1
       IPRINT=IPRINT+1
       ICOLL(KGAS,IPT)=ICOLL(KGAS,IPT)+1
       ICOLN(KGAS,I)=ICOLN(KGAS,I)+1 
       IT=DINT(T+1.00)
       IT=DMIN0(IT,N300)
       TIME(IT)=TIME(IT)+1.00
       ZTOT=ZTOT+Z
       YTOT=YTOT+Y
       XTOT=XTOT+X
       TTOT=TTOT+ST
       ZTOTS=ZTOTS+Z-ZSTRT
       YTOTS=YTOTS+Y-YSTRT
       XTOTS=XTOTS+X-XSTRT
       TTOTS=TTOTS+ST-TSSTRT
#  ELECTRON CAPTURED START NEW PRIMARY          
       IF(NELEC == (NCLUS+1):
) GO TO 544
# ELECTRON CAPTURED TAKE NEXT ELECTRON FROM STORE       
       GO TO 20
      # endIF    
      EISTR=EI                               
      R9=drand48(RDUM)
#     ESEC=R9*(EOK-EI)      
#    USE OPAL PETERSON AND BEATY SPLITTING FACTOR.
      ESEC=WPL(KGAS,I)*TAN(R9*ATAN((EOK-EI)/(2.00*WPL(KGAS,I))))
      ESEC=WPL(KGAS,I)*(ESEC/WPL(KGAS,I))**0.9524    
      EI=ESEC+EI 
# STORE POSITION ,ENERGY, DIRECTION COSINES AND TIME OF GENERATION
# OF IONISATION ELECTRON      
      NCLUS=NCLUS+1
      NPONT=NPONT+1
      NMXADD=MAX(NPONT,NMXADD)
      IF(NPONT > 2000):
 : 
      WRITE(6,546) NPONT,ITER
 546  FORMAT(2X,' def STOPPED . NPONT=',I5,' ITER=',I10)
      STOP
      # endIF     
      XS(NPONT)=X       
      YS(NPONT)=Y
      ZS(NPONT)=Z
      TS(NPONT)=ST
      ES(NPONT)=ESEC
      IPL(NPONT)=IPLANE
      NCLTMP=NPONT
      NTMPFLG=1
# RANDOMISE SECONDARY ELECTRON DIRECTION
#      R3=drand48(RDUM)
#      F3=1.00-2.00*R3
#      THETA0=DACOS(F3)
#      F6=DCOS(THETA0)
#      F5=DSIN(THETA0)
#      R4=drand48(rdum)
#      PHI0=F4*R4
#      F8=DSIN(PHI0)
#      F9=DCOS(PHI0)               
#      DCX(NPONT)=F9*F5
#      DCY(NPONT)=F8*F5
#      DCZ[NPONT]=F6  
# STORE POSSIBLE SHELL EMISSIONS AUGER OR FLUORESCENCE
      IF(EISTR > 30.0):
 :
# AUGER EMISSIONS WITHOUT FLUORESCENCE
       NAUG=NC0(KGAS,I)
       EAVAUG=EC0(KGAS,I)/DFLOAT(NAUG)
       DO 701 JFL=1,NAUG
       NCLUS=NCLUS+1
       NPONT=NPONT+1
       XS(NPONT)=X
       YS(NPONT)=Y
       ZS(NPONT)=Z
       TS(NPONT)=ST
       ES(NPONT)=EAVAUG
       IPL(NPONT)=IPLANE
       R3=drand48(RDUM)
       F3=1.00-2.00*R3
       THETA0=DACOS(F3)
       F6=DCOS(THETA0)
       F5=DSIN(THETA0)
       R4=drand48(RDUM)
       PHI0=F4*R4
       F8=DSIN(PHI0)
       F9=DCOS(PHI0)
       DCX(NPONT)=F9*F5
       DCY(NPONT)=F8*F5
       DCZ[NPONT]=F6
  701  CONTINUE
      # endIF   
#                                                                       
#  GENERATE SCATTERING ANGLES AND UPDATE  LABORATORY COSINES AFTER      
#   COLLISION ALSO UPDATE ENERGY OF ELECTRON.                           
#
  666 IPT=IARRY(KGAS,I)
      ID=ID+1    
      ITER=ITER+1
      IPRINT=IPRINT+1                                                   
      ICOLL(KGAS,IPT)=ICOLL(KGAS,IPT)+1 
      ICOLN(KGAS,I)=ICOLN(KGAS,I)+1   
# IF EXCITATION : ADD PROBABILITY ,PENFRA(KGAS,1,I),OF TRANSFER TO 
# GIVE IONISATION OF THE OTHER GASES IN THE MIXTURE
      IF(IPEN == 0):
 GO TO 5
      IF(PENFRA[KGAS,1,I] != 0.0):
 :
       RAN=drand48(RDUM)
       IF(RAN > PENFRA[KGAS,1,I]):
 GO TO 5
       NCLUS=NCLUS+1
       NPONT=NPONT+1
       IF(NPONT > 2000):
 :
        WRITE(6,546) NPONT,ITER
        STOP
       # endIF
# ENTER HERE POSSIBLE DELOCALISATION LENGTH FOR PENNING TRANSFER
       IF(PENFRA[KGAS,2,I] == 0.0):
 :
        XS(NPONT)=X
        YS(NPONT)=Y
        ZS(NPONT)=Z
        GO TO 667
       # endIF    
       ASIGN=1.0
       RAN=drand48(RDUM)
       RAN1=drand48(RDUM)
       IF(RAN1 < 0.5):
 ASIGN=-ASIGN
       XS(NPONT)=X-math.log(RAN)*PENFRA[KGAS,2,I]*ASIGN
       RAN=drand48(RDUM)
       RAN1=drand48(RDUM)
       IF(RAN1 < 0.5):
 ASIGN=-ASIGN
       YS(NPONT)=Y-math.log(RAN)*PENFRA[KGAS,2,I]*ASIGN
       RAN=drand48(RDUM)
       RAN1=drand48(RDUM)
       IF(RAN1 < 0.5):
 ASIGN=-ASIGN
       ZS(NPONT)=Z-math.log(RAN)*PENFRA[KGAS,2,I]*ASIGN
# ENTER POSSIBLE PENNING TRANSFER TIME
  667  TPEN=ST
       IF(PENFRA[KGAS,3,I] == 0.0):
 GO TO 668
       RAN=drand48(RDUM)
       TPEN=ST-math.log(RAN)*PENFRA[KGAS,3,I]
  668  TS(NPONT)=TPEN
       ES(NPONT)=1.0
       DCX(NPONT)=DCX1
       DCY(NPONT)=DCY1
       DCZ[NPONT]=DCZ1
# FIND LAST TIME PLANE BEFORE TPEN
       TSTOP1=0.0
       IPLANE1=0
       DO 669 KDUM=1,ITFINAL
       TSTOP1=TSTEP+TSTOP1
       IF(TPEN < TSTOP1):
 GO TO 670
       IPLANE1=IPLANE1+1
  669  CONTINUE
# PENNING TRANSFER OCCURS AFTER FINAL TIME PLANE. CLEAR ENTRY
       NPONT=NPONT-1
       NCLUS=NCLUS-1
       GO TO 5
  670  IPL(NPONT)=IPLANE1         
      # endIF                                   
    5 S2=(S1*S1)/(S1-1.00) 
# ANISOTROPIC SCATTERING
      R3=drand48(RDUM)
      IF(INDEX(KGAS,I):
 == 1) :
       R31=drand48(RDUM)
       F3=1.00-R3*ANGCT(KGAS,IE,I)        
       IF(R31 > PSCT(KGAS,IE,I):
) F3=-F3
      elif(INDEX(KGAS,I) == 2) :
       EPSI=PSCT(KGAS,IE,I)
       F3=1.00-(2.00*R3*(1.00-EPSI)/(1.00+EPSI*(1.00-2.00*R3)))
      else:
# ISOTROPIC SCATTERING                                            
       F3=1.00-2.00*R3  
      # endIF
      THETA0=DACOS(F3)                                                  
      R4=drand48(RDUM)
      PHI0=F4*R4                                                        
      F8=DSIN(PHI0)                                                     
      F9=DCOS(PHI0)                                                     
#     IF(EOK < EI) EI=0.00                                           
      ARG1=1.00-S1*EI/EOK                                              
      ARG1=DMAX1(ARG1,SMALL)                                            
      D=1.00-F3*math.sqrt(ARG1)                                            
      E1=EOK*(1.00-EI/(S1*EOK)-2.00*D/S2) 
      E1=DMAX1(E1,SMALL)                                                
      Q=math.sqrt((EOK/E1)*ARG1)/S1                                        
      Q=DMIN1(Q,1.00)                                                  
      THETA=DASIN(Q*DSIN(THETA0))                                       
      F6=DCOS(THETA)                                                    
      U=(S1-1.00)*(S1-1.00)/ARG1                                      
      CSQD=F3*F3                                                        
      IF(F3 < 0.00 and CSQD > U):
 F6=-1.00*F6                        
      F5=DSIN(THETA)                                                    
      DZCOM=DMIN1(DZCOM,1.00)                                          
      ARGZ=math.sqrt(DXCOM*DXCOM+DYCOM*DYCOM)
      IF(ARGZ == 0.00):
 :
       DCZ1=F6         
       DCX1=F9*F5                             
       DCY1=F8*F5 
       IF(NTMPFLG == 1):
 :
# USE FREE KINEMATICS FOR IONISATION SECONDARY ANGLE
        F5S=F5*math.sqrt(E1/ES(NCLTMP))
        IF(F5S > 1.0):
 F5S=1.0
        THSEC=DASIN(F5S)
        F5S=DSIN(THSEC)
        F6S=DCOS(THSEC)
        IF(F6 < 0.0):
 F6S=-F6S
        PHIS=PHI0+API
        IF(PHIS > F4):
 PHIS=PHI0-F4
        F8S=DSIN(PHIS)
        F9S=DCOS(PHIS)
        DCZ[NCLTMP]=F6S
        DCY(NCLTMP)=F8S*F5S
        DCX(NCLTMP)=F9S*F5S
        NTMPFLG=0
       # endIF
       GO TO 190
      # endIF                                            
      DCZ1=DZCOM*F6+ARGZ*F5*F8                                         
      DCY1=DYCOM*F6+(F5/ARGZ)*(DXCOM*F9-DYCOM*DZCOM*F8)                
      DCX1=DXCOM*F6-(F5/ARGZ)*(DYCOM*F9+DXCOM*DZCOM*F8) 
      IF(NTMPFLG == 1):
 :
# USE FREE KINEMATICS FOR IONISATION SECONDARY ANGLE
       F5S=F5*math.sqrt(E1/ES(NCLTMP))
       IF(F5S > 1.0):
 F5S=1.0
       THSEC=DASIN(F5S)
       F5S=DSIN(THSEC)
       F6S=DCOS(THSEC)
       IF(F6 < 0.0):
 F6S=-F6S
       PHIS=PHI0+API
       IF(PHIS > F4):
 PHIS=PHI0-F4
       F8S=DSIN(PHIS)
       F9S=DCOS(PHIS)
       DCZ[NCLTMP]=DZCOM*F6S+ARGZ*F5S*F8S
       DCY(NCLTMP)=DYCOM*F6S+(F5S/ARGZ)*(DXCOM*F9S-DYCOM*DZCOM*F8S)
       DCX(NCLTMP)=DXCOM*F6S-(F5S/ARGZ)*(DYCOM*F9S+DXCOM*DZCOM*F8S)
       NTMPFLG=0
      # endIF
  190 CONTINUE
# TRANSFORM VELOCITY VECTORS TO LAB FRAME
      VTOT=CONST9*math.sqrt(E1)
      CX1=DCX1*VTOT+VGX
      CY1=DCY1*VTOT+VGY
      CZ1=DCZ1*VTOT+VGZ
# CALCULATE ENERGY AND DIRECTION COSINES IN LAB FRAME
      E1=(CX1*CX1+CY1*CY1+CZ1*CZ1)/CONST10
      CONST11=1.00/(CONST9*math.sqrt(E1))
      DCX1=CX1*CONST11
      DCY1=CY1*CONST11
      DCZ1=CZ1*CONST11
# STORE DIRECTION COSINES AND ENERGY AFTER N COLLISIONS
# FOR LATER REUSE IN PRIMARY GENERATION
      I100=I100+1
      IF(I100 == 200):
 :
       DCZ100=DCZ1
       DCX100=DCX1        
       DCY100=DCY1 
       E100=E1
       I100=0
      # endIF  
      IF(IPRINT > JPRINT):
 GO TO 200
      GO TO 1                                    
#    INTERMEDIATE PRINTOUT                       
 200  IPRINT=0 
      WZ=ZTOTS/TTOTS                          
      WZ=WZ*1.0D+09  
      WY=YTOTS/TTOTS   
      WY=WY*1.0D+09
      WX=XTOTS/TTOTS
      WX=WX*1.0D+09
      JCT=ID/100000
#      IF(J1 == 1) WRITE(6,201)                                         
# 201 FORMAT(/,7X,'INTERMEDIATE OUTPUT',/,'    VELZ     VELY     VELX    
#    /   TIME       COUNT    ')      
# ROTATE INTERMEDIATE OUTPUT INTO LAB FRAME 
      WZR=WZ*RCS-WX*RSN
      WYR=WY
      WXR=WZ*RSN+WX*RCS
#     WRITE(6,202) WZR,WYR,WXR,TTOTS,JCT   
# 202 FORMAT(3(1X,F8.3),1X,D10.3,4X,I6)                 
      J1=J1+1            
      GO TO 1
#  MAIN LOOP # end                                                  
  700 XID=DFLOAT(ID)
      IF(NELEC > IPRIM):
 :
       ANEION=DFLOAT(NEION)
       ANBT=DFLOAT(NELEC-IPRIM)
       ATTOINT=ANEION/ANBT
       ATTERT=math.sqrt(ANEION)/ANEION
       AIOERT=math.sqrt(ANBT)/ANBT
      else:
       ANEION=DFLOAT(NEION) 
       ATTOINT=-1.00
       ATTERT=math.sqrt(ANEION)/ANEION
      # endIF
      JCT=ID/100000  
      IF(J1 == 1):
 :
      WRITE(6,940) NCLUS,ITER
  940 FORMAT(2(/),' def STOPPED  (TOO FEW COLLISIONS), DECREASE THE 
     /ESTIMATED ALPHA.  NCLUS = ',I7,'  ITER =',I9)      
      STOP
      # endIF
      IF(JPRT == 1):
 WRITE(6,878) NELEC,NEION,IPRIM
 878  FORMAT(/,' TOTAL NO OF ELECTRONS=',I8,/,' TOTAL NO OF NEG. IONS=',
     /I8,/,' TOTAL NO OF PRIMARIES=',I8)  
      EPRMBAR=0.00
      E2PRM=0.00
      IF(IPRIM == 1):
 RETURN      
      DO 310 I=1,IPRIM
      E2PRM=E2PRM+EPRM(I)*EPRM(I)
 310  EPRMBAR=EPRMBAR+EPRM(I)
      EBAR=EPRMBAR/IPRIM
      EERR=math.sqrt(E2PRM/IPRIM-EBAR**2)
      IF(JPRT == 1):
 WRITE(6,836) EBAR,EERR
 836  FORMAT(/,2X,'AVERAGE ENERGY OF PRIMARY ELECTRON =',F10.3,' EV.',/,
     /'   ENERGY SPREAD OF PRIMARY ELECTRON =',F10.3,' EV.')
#     WRITE(6,835) (IESPECP(J),J=1,100)
#835  FORMAT(/,2X,'ENERGY SPECTRUM OF PRIMARY ELECTRONS IN 1 EV. BINS',/
#    /,10(2X,10I5,/))
      RETURN               
  315 IF(ITER > NMAX) :
       WRITE(6,991) ITER,NMAX,NPONT,NELEC,IPRIM,NMXADD
 991   FORMAT(2(/),' def STOPPED.  ITER =',I10,'    NMAX =',I10,/,
     /' NPONT=',I4,' NELEC=',I8,' IPRIM=',I4,' NMXADD=',I3)
       STOP
      # endIF                                                             
      RETURN                                                            
      # end
      def TPLANEHT(T,E1,CX1,CY1,CZ1,EFLD,IPLANE):
      IMPLICIT #real*8 (A-H,O-Z)  
      IMPLICIT #integer*8 (I-N)
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5
      COMMON/BFLD/EOVB,WB,BTHETA,BMAG
      COMMON/ROTS/RCS,RSN,EFZ100,EFX100,F1,EOVBR
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/OUTPTT/TIME(300),ICOLL(6,5),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(6,290),ICOLNN(6,10)
      COMMON/TPLOUTH/ETPL(8),XTPL(8),YTPL(8),ZTPL(8),TTPL(8),XXTPL(8),
     /YYTPL(8),ZZTPL(8),YZTPL(8),XZTPL(8),XYTPL(8),VZTPL(8),VYTPL(8),
     /VXTPL(8),NETPL(8),ATTOINT,ATTERT,AIOERT
#-----------------------------------------------------------------------
# STORES POSITION, TIME AND ENERGY AND SUMS REQUIRED
# TO CALCULATE DEVIATIONS AND MEANS AT PLANE =IPLANE 
# USED WITH BFIELD AT ANGLE BTHETA TO EFIELD      
# ROTATES STORED POSITIONS INTO LAB FRAME.
#-----------------------------------------------------------------------
      TIMESP=IPLANE*TSTEP
# CALC TIME LEFT TO ARRIVE AT PLANE
      TIMLFT=TIMESP-ST
      T2LFT=TIMLFT*TIMLFT
      WBT=WB*TIMLFT
      COSWT=DCOS(WBT)
      SINWT=DSIN(WBT)
      CX2=CX1+2.00*F1*TIMLFT
      CY2=(CY1-EOVBR)*COSWT+CZ1*SINWT+EOVBR
      CZ2=CZ1*COSWT-(CY1-EOVBR)*SINWT
      VTOT=math.sqrt(CX2*CX2+CY2*CY2+CZ2*CZ2)
      DCZ2=CZ2/VTOT
      DCY2=CY2/VTOT
      DCX2=CX2/VTOT
      DX=CX1*TIMLFT+F1*TIMLFT*TIMLFT
      XPLANE=X+DX                          
      YPLANE=Y+EOVBR*TIMLFT+((CY1-EOVBR)*SINWT+CZ1*(1.00-COSWT))/WB
      DZ=(CZ1*SINWT+(EOVBR-CY1)*(1.00-COSWT))/WB
      ZPLANE=Z+DZ
# ROTATE POSITIONS     
      ZPLANER=ZPLANE*RCS-XPLANE*RSN
      YPLANER=YPLANE
      XPLANER=ZPLANE*RSN+XPLANE*RCS         
      EPLANE=E1+DZ*EFZ100+DX*EFX100
      VZPLANE=DCZ2*math.sqrt(EPLANE)*CONST3*0.010
      VYPLANE=DCY2*math.sqrt(EPLANE)*CONST3*0.010
      VXPLANE=DCX2*math.sqrt(EPLANE)*CONST3*0.010
      XTPL(IPLANE)=XTPL(IPLANE)+XPLANER
      YTPL(IPLANE)=YTPL(IPLANE)+YPLANER
      ZTPL(IPLANE)=ZTPL(IPLANE)+ZPLANER
      XXTPL(IPLANE)=XXTPL(IPLANE)+XPLANER*XPLANER
      YYTPL(IPLANE)=YYTPL(IPLANE)+YPLANER*YPLANER
      ZZTPL(IPLANE)=ZZTPL(IPLANE)+ZPLANER*ZPLANER
      YZTPL(IPLANE)=YZTPL(IPLANE)+YPLANER*ZPLANER
      XZTPL(IPLANE)=XZTPL(IPLANE)+XPLANER*ZPLANER
      XYTPL(IPLANE)=XYTPL(IPLANE)+XPLANER*YPLANER
      ETPL(IPLANE)=ETPL(IPLANE)+EPLANE
      TTPL(IPLANE)=TTPL(IPLANE)+ST+TIMLFT
# ROTATE VELOCITIES 
      VZPLNER=VZPLANE*RCS-VXPLANE*RSN
      VYPLNER=VYPLANE
      VXPLNER=VZPLANE*RSN+VXPLANE*RCS     
      VZTPL(IPLANE)=VZTPL(IPLANE)+VZPLNER
      VYTPL(IPLANE)=VYTPL(IPLANE)+VYPLNER
      VXTPL(IPLANE)=VXTPL(IPLANE)+VXPLNER
      NETPL(IPLANE)=NETPL(IPLANE)+1 
      RETURN
      # end 
      def PTH(JPRT):
      IMPLICIT #real*8 (A-H,O-Z) 
      IMPLICIT #integer*8 (I-N)
      COMMON/ROTS/RCS,RSN,EFZ100,EFX100,F1,EOVBR                 
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/TPLOUTH/ETPL(8),XTPL(8),YTPL(8),ZTPL(8),TTPL(8),XXTPL(8),
     /YYTPL(8),ZZTPL(8),YZTPL(8),XZTPL(8),XYTPL(8),VZTPL(8),VYTPL(8),
     /VXTPL(8),NETPL(8),ATTOINT,ATTERT,AIOERT
      COMMON/PTTOFH/RI(8),EPT(8),VZPT(8),VYPT(8),VXPT(8),TTEST(8)
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9] 
      DIMENSION ANTPL(8)
# ------------------------------------------------
# CALCULATES PULSED TOWNS# end COEFFICIENTS
#-------------------------------------------------
      ANTPL(1)=DFLOAT(NETPL(1))
      RI(1)=(math.log(ANTPL(1))-math.log(DFLOAT(IPRIM)))/TSTEP
      RI(1)=RI(1)-FAKEI
      EPT(1)=ETPL(1)/ANTPL(1)
      TTEST(1)=TTPL(1)/ANTPL(1)
      VZPT(1)=1.0D+09*VZTPL(1)/ANTPL(1)
      VYPT(1)=1.0D+09*VYTPL(1)/ANTPL(1)
      VXPT(1)=1.0D+09*VXTPL(1)/ANTPL(1)
      DO 10 I=2,ITFINAL
      IF(NETPL(I):
 == 0) :
       ITFINAL=I-1
       GO TO 11
      # endIF
      ANTPL(I)=DFLOAT(NETPL(I))      
      RI(I)=(math.log(ANTPL(I))-math.log(ANTPL(I-1)))/TSTEP
      RI(I)=RI(I)-FAKEI
      EPT(I)=ETPL(I)/ANTPL(I)
      TTEST(I)=TTPL(I)/ANTPL(I)
      VZPT(I)=1.0D+09*VZTPL(I)/ANTPL(I)
      VYPT(I)=1.0D+09*VYTPL(I)/ANTPL(I)
      VXPT(I)=1.0D+09*VXTPL(I)/ANTPL(I)
  10  CONTINUE
  11  IF(JPRT == 1) WRITE(6,900) ITFINAL
 900  FORMAT(2(/),' PULSED TOWNS# end RESULTS AT',I2,' SEQUENTIAL TIME PLA
     /NES',/,'PLANE   (ION-ATT)FRQ.    ENERGY      WVZ       WVY       W
     /VX  NO.OF ELECTRNS',/)   
      DO 20 IPL=1,ITFINAL
      IF(JPRT == 1):
 WRITE(6,910) IPL,RI(IPL),EPT(IPL),VZPT(IPL),
     /VYPT(IPL),VXPT(IPL),NETPL(IPL)
 910  FORMAT(1X,I2,4X,D12.4,4X,F7.2,4X,F6.1,4X,F6.1,4X,F6.1,4X,I8)
  20  CONTINUE 
      RETURN
      # end
      def TOFH(JPRT):
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/TPLOUTH/ETPL(8),XTPL(8),YTPL(8),ZTPL(8),TTPL(8),XXTPL(8),
     /YYTPL(8),ZZTPL(8),YZTPL(8),XZTPL(8),XYTPL(8),VZTPL(8),VYTPL(8),
     /VXTPL(8),NETPL(8),ATTOINT,ATTERT,AIOERT 
      COMMON/TOFHOUT/RALPHA,RALPER,TOFENE,TOFENER,TOFWVZ,TOFWVZER,
     /TOFWVY,TOFWVYER,TOFWVX,TOFWVXER,TOFDZZ,TOFDZZER,TOFDXX,TOFDXXER,
     /TOFDYY,TOFDYYER,TOFDYZ,TOFDYZER,TOFDXY,TOFDXYER,TOFDXZ,TOFDXZER,
     /TOFWRZ,TOFWRZER,TOFWRY,TOFWRYER,TOFWRX,TOFWRXER,RATTOF,RATOFER 
      COMMON/PTTOFH/RI(8),EPT(8),VZPT(8),VYPT(8),VXPT(8),TTEST(8)
      COMMON/THRM/AMGAS(6),VTMB[6],TCFMX,TCFMXG(6),ITHRM
      DIMENSION DZTF(8),DXTF(8),DYTF(8),DYZTF(8),DXYTF(8),DXZTF(8)
      DIMENSION WRZ[8],WRY(8),WRX(8),ANTPL(8) 
#----------------------------------------------------------
# CALCULATES TIME OF FLIGHT COEFFICIENTS
#---------------------------------------------
      IF(ITHRM == 1):
 CALL COLFT(DUM1,DUM2,FRION,FRATT,DUM3,IDUM4)
      IF(ITHRM == 0):
 CALL COLF(DUM1,DUM2,FRION,FRATT,DUM3,IDUM4)
      ATTOINT=FRATT/FRION
      CORERR=abs((FAKEI+FRION-FRATT)/(FRION-FRATT))
      ANTPL(1)=DFLOAT(NETPL(1))
      WRZ[1]=ZTPL(1)/(ANTPL(1)*TSTEP)
      WRY(1)=YTPL(1)/(ANTPL(1)*TSTEP)
      WRX(1)=XTPL(1)/(ANTPL(1)*TSTEP)
      DZTF(1)=((ZZTPL(1)/ANTPL(1))-(ZTPL(1)/ANTPL(1))**2)/(2.00*TSTEP)
      DXTF(1)=((XXTPL(1)/ANTPL(1))-(XTPL(1)/ANTPL(1))**2)/(2.00*TSTEP)
      DYTF(1)=((YYTPL(1)/ANTPL(1))-(YTPL(1)/ANTPL(1))**2)/(2.00*TSTEP)
      DYZTF(1)=((YZTPL(1)/ANTPL(1))-(YTPL(1)*ZTPL(1)/(ANTPL(1)**2)))/(2
     /.00*TSTEP) 
      DXZTF(1)=((XZTPL(1)/ANTPL(1))-(XTPL(1)*ZTPL(1)/(ANTPL(1)**2)))/(2
     /.00*TSTEP) 
      DXYTF(1)=((XYTPL(1)/ANTPL(1))-(XTPL(1)*YTPL(1)/(ANTPL(1)**2)))/(2
     /.00*TSTEP) 
      DO 10 I=2,ITFINAL
      ANTPL(I)=DFLOAT(NETPL(I)) 
      WRZ[I]=((ZTPL(I)/ANTPL(I))-(ZTPL(I-1)/ANTPL(I-1)))/TSTEP
      WRY(I)=((YTPL(I)/ANTPL(I))-(YTPL(I-1)/ANTPL(I-1)))/TSTEP
      WRX(I)=((XTPL(I)/ANTPL(I))-(XTPL(I-1)/ANTPL(I-1)))/TSTEP
      DZTF(I)=((ZZTPL(I)/ANTPL(I))-(ZTPL(I)/ANTPL(I))**2-(ZZTPL(I-1)/ANT
     /PL(I-1))+(ZTPL(I-1)/ANTPL(I-1))**2)/(2.00*TSTEP)
      DXTF(I)=((XXTPL(I)/ANTPL(I))-(XTPL(I)/ANTPL(I))**2-(XXTPL(I-1)/ANT
     /PL(I-1))+(XTPL(I-1)/ANTPL(I-1))**2)/(2.00*TSTEP)
      DYTF(I)=((YYTPL(I)/ANTPL(I))-(YTPL(I)/ANTPL(I))**2-(YYTPL(I-1)/ANT
     /PL(I-1))+(YTPL(I-1)/ANTPL(I-1))**2)/(2.00*TSTEP)
      DYZTF(I)=((YZTPL(I)/ANTPL(I))-(YTPL(I)*ZTPL(I)/(ANTPL(I)**2))-(YZT
     /PL(I-1)/ANTPL(I-1))+(YTPL(I-1)*ZTPL(I-1)/(ANTPL(I-1)**2)))/(2.00*
     /TSTEP)
      DXZTF(I)=((XZTPL(I)/ANTPL(I))-(XTPL(I)*ZTPL(I)/(ANTPL(I)**2))-(XZT
     /PL(I-1)/ANTPL(I-1))+(XTPL(I-1)*ZTPL(I-1)/(ANTPL(I-1)**2)))/(2.00*
     /TSTEP)
      DXYTF(I)=((XYTPL(I)/ANTPL(I))-(XTPL(I)*YTPL(I)/(ANTPL(I)**2))-(XYT
     /PL(I-1)/ANTPL(I-1))+(XTPL(I-1)*YTPL(I-1)/(ANTPL(I-1)**2)))/(2.00*
     /TSTEP)
  10  CONTINUE  
      DO 15 I=1,ITFINAL
      WRZ[I]=WRZ[I]*1.0D+09
      WRY(I)=WRY(I)*1.0D+09
      WRX(I)=WRX(I)*1.0D+09
      DZTF(I)=DZTF(I)*1.0D+16
      DXTF(I)=DXTF(I)*1.0D+16
      DYTF(I)=DYTF(I)*1.0D+16
      DYZTF(I)=DYZTF(I)*1.0D+16
      DXZTF(I)=DXZTF(I)*1.0D+16
      DXYTF(I)=DXYTF(I)*1.0D+16
  15  CONTINUE
      IF(JPRT == 1):
 WRITE(6,900) ITFINAL
 900  FORMAT(2(/),' TIME OF FLIGHT RESULTS AT',I2,' SEQUENTIAL TIME PLAN
     /ES',/,'PLANE    DZZ     DXX     DYY     DYZ     DXZ     DXY      W
     /RZ     WRY     WRX',/)
      DO 20 IPL=1,ITFINAL   
      IF(JPRT == 1):
 WRITE(6,910) IPL,DZTF(IPL),DXTF(IPL),DYTF(IPL),
     /DYZTF(IPL),DXZTF(IPL),DXYTF(IPL),WRZ[IPL],WRY(IPL),WRX(IPL)  
 910  FORMAT(1X,I2,2X,6F8.1,3F8.2)              
  20  CONTINUE    
      IF(NETPL(1):
 > NETPL(ITFINAL)) :
#        NET ATTACHMENT TAKE RESULTS FROM PLANE 2
       TOFENE=EPT(2)
       TOFENER=100.00*abs((EPT(2)-EPT(3))/(2.00*EPT(2)))
       TOFWVZ=VZPT(2)
       TOFWVZER=100.00*abs((VZPT(2)-VZPT(3))/(2.00*VZPT(2))) 
       TOFWVY=VYPT(2)
       TOFWVYER=100.00*abs((VYPT(2)-VYPT(3))/(2.00*VYPT(2))) 
       TOFWVX=VXPT(2)
       TOFWVXER=100.00*abs((VXPT(2)-VXPT(3))/(2.00*VXPT(2)))
       TOFDZZ=DZTF(2)
       TOFDZZER=100.00*abs((DZTF(2)-DZTF(3))/(2.00*DZTF(2)))
       TOFDXX=DXTF(2)
       TOFDXXER=100.00*abs((DXTF(2)-DXTF(3))/(2.00*DXTF(2)))
       TOFDYY=DYTF(2)
       TOFDYYER=100.00*abs((DYTF(2)-DYTF(3))/(2.00*DYTF(2)))
       TOFDYZ=DYZTF(2)
       TOFDYZER=100.00*abs((DYZTF(2)-DYZTF(3))/(2.00*DYZTF(2)))
       TOFDXZ=DXZTF(2)
       TOFDXZER=100.00*abs((DXZTF(2)-DXZTF(3))/(2.00*DXZTF(2)))
       TOFDXY=DXYTF(2)
       TOFDXYER=100.00*abs((DXYTF(2)-DXYTF(3))/(2.00*DXYTF(2)))
       TOFWRZ=WRZ[2]
       TOFWRY=WRY(2)
       TOFWRX=WRX(2)
       TOFWRZER=100.00*abs((WRZ[2]-WRZ[3])/(2.00*WRZ[2]))
       TOFWRYER=100.00*abs((WRY(2)-WRY(3))/(2.00*WRY(2))) 
       TOFWRXER=100.00*abs((WRX(2)-WRX(3))/(2.00*WRX(2)))
        ANST2=DFLOAT(NETPL(2))
        ANST3=DFLOAT(NETPL(3))
        ANST4=ANST3-math.sqrt(ANST3)
        ANST5=math.log(ANST2/ANST3)
        ANST6=math.log(ANST2/ANST4)
        ANST7=ANST6/ANST5
        ANST8=ANST7-1.00
       IF(ATTOINT == -1.00):
 :
#        NO IONISATION
        RALPHA=0.00
        RALPER=0.00
        RATTOF=-RI(2)
        RATOFER=100.00*math.sqrt(ANST8**2+ATTERT**2)
       else:
        RALPHA=RI(2)/(1.00-ATTOINT)
        RALPER=100.00*math.sqrt(ANST8**2+AIOERT**2)
        RATTOF=ATTOINT*RI(2)/(1.00-ATTOINT)
        RATOFER=100.00*math.sqrt(ANST8**2+ATTERT**2)
       # endIF 
      else:
# NET IONISATION TAKE RESULTS FROM PLANE ITFINAL
       I1=ITFINAL
       I2=ITFINAL-1  
       TOFENE=EPT(I1)
       TOFENER=100.00*abs((EPT(I1)-EPT(I2))/EPT(I1))
       TOFWVZ=VZPT(I1)
       TOFWVZER=100.00*abs((VZPT(I1)-VZPT(I2))/VZPT(I1))
       TOFWVY=VYPT(I1)
       TOFWVYER=100.00*abs((VYPT(I1)-VYPT(I2))/VYPT(I1))
       TOFWVX=VXPT(I1)
       TOFWVXER=100.00*abs((VXPT(I1)-VXPT(I2))/VXPT(I1))
       TOFDZZ=DZTF(I1)
       TOFDZZER=100.00*abs((DZTF(I1)-DZTF(I2))/DZTF(I1))
       TOFDXX=DXTF(I1)
       TOFDXXER=100.00*abs((DXTF(I1)-DXTF(I2))/DXTF(I1))
       TOFDYY=DYTF(I1)
       TOFDYYER=100.00*abs((DYTF(I1)-DYTF(I2))/DYTF(I1))
       TOFDYZ=DYZTF(I1)
       TOFDYZER=100.00*abs((DYZTF(I1)-DYZTF(I2))/DYZTF(I1))
       TOFDXZ=DXZTF(I1)
       TOFDXZER=100.00*abs((DXZTF(I1)-DXZTF(I2))/DXZTF(I1))
       TOFDXY=DXYTF(I1)
       TOFDXYER=100.00*abs((DXYTF(I1)-DXYTF(I2))/DXYTF(I1))
       TOFWRZ=WRZ[I1]
       TOFWRY=WRY(I1)
       TOFWRX=WRX(I1)
       TOFWRZER=100.00*abs((WRZ[I1]-WRZ[I2])/WRZ[I1])
       TOFWRYER=100.00*abs((WRY(I1)-WRY(I2))/WRY(I1))
       TOFWRXER=100.00*abs((WRX(I1)-WRX(I2))/WRX(I1))
       ATER=abs((RI(I1)-RI(I2))/RI(I1))
       RALPHA=RI(I1)/(1.00-ATTOINT)
       RALPER=100.00*math.sqrt(ATER**2+AIOERT**2)
       RATTOF=ATTOINT*RI(I1)/(1.00-ATTOINT)
       IF(ATTOINT != 0.00):
 :
        RATOFER=100.00*math.sqrt(ATER**2+ATTERT**2)
       else:
        RATOFER=0.00
       # endIF  
      # endIF
      RETURN
      # end                
      def ALPCLCAT :
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX 
      COMMON/TOFOUT/RALPHA,RALPER,TOFENE,TOFENER,TOFWV,TOFWVER,
     /TOFDL,TOFDLER,TOFDT,TOFDTER,TOFWR,TOFWRER,RATTOF,RATOFER 
      COMMON/VEL/WX,WY,WZ
      COMMON/CTOWNS/ALPHA,ATT
      COMMON/CTWNER/ALPER,ATTER
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9] 
      COMMON/LARGET/CF(6,4000,290),EIN(6,290),TCF(6,4000),IARRY(6,290),
     /RGAS(6,290),IPN(6,290),WPL(6,290),IPLAST(6),ISIZE(6),
     /PENFRA[6,3,290],TCFMAX(6)
# ---------------------------------------------------------------------      
#  ESTIMATE TIME STEP FOR AVALANCHE SIMULATION IN TIME OF FLIGHT SIM.
#  USES ESTIMATED GAIN OF 3.0 BETWEEN PLANES. 
#  CALLS TOF AND PT defS AND UPDATES ALPHA AND ATT
#  VERSION WITH BFIELD PARALLEL TO EFIELD 
# ------------------------------------------------------------------
      IMAX=NMAX/10000000 
      IF(IMAX < 5):
 IMAX=5 
      NMAX=IMAX*10000000
      CORR=760.0*(TEMPC+273.15)/(TORR*293.15)
      ALPP=ALPHA/CORR
      ATTP=ATT/CORR
      ANETP=ALPP-ATTP
      ANET=ALPHA-ATT
      TCUTH=1.2D-10*CORR
      TCUTL=1.D-13*CORR
#   
      IF (ANETP > 30.0):
 :
       ALPHAD=0.0
       ALP1=ALPHA
       ATT1=ATT
# WEAK ATTACHMENT
       GO TO 6
      # endIF 
#  SOME ATTACHMENT
      IF(abs(ANETP):
 < 100.) :
# SMALL NET ATTACHMENT
       ALPHAD=abs(ATT)*0.8
      elif(abs(ANETP) >= 100. and abs(ANETP) < 1000.) :
# LARGER NET ATTACHMENT
       ALPHAD=abs(ANET)*0.65
      elif(abs(ANETP) > 1000. and abs(ANETP) < 10000.) :
       ALPHAD=abs(ANET)*0.6
      elif(abs(ANETP) > 10000. and abs(ANETP) < 100000.) :
       ALPHAD=abs(ANET)*0.5
      elif(abs(ANETP) > 100000. and abs(ANETP) < 2000000.) :
       ALPHAD=abs(ANET)*0.4
      else: 
       WRITE(6,91) 
   91 FORMAT(' ATTACHMENT TOO LARGE def STOPPED')
       STOP
      # endIF
   3  VDST=WZ*1.D-5
      FAKEI=ALPHAD*WZ*1.D-12
      ALPHAST=0.85*abs(ALPHAD+ANET)                        
      TSTEP=math.log(3.00)/(ALPHAST*VDST*1.0D5)
      IF(TSTEP > TCUTH):
 TSTEP=TCUTH
      IF(TSTEP < TCUTL):
 TSTEP=TCUTL
# UPDATE NULL COLLISION FREQUENCY LIMIT
      DO 4 J=1,NGAS
    4 TCFMAX(J)=TCFMAX(J)+abs(FAKEI)/DFLOAT(NGAS)
      WRITE(6,871) ALPHAST,ANET,ALPHAD,TSTEP
  871 FORMAT(' ALPHAST1=',D10.3,' ANET1=',D10.3,' ALPHAD1=',D10.3,/,
     /' TSTEP1=',D10.3)
#  CONVERT TO  PICOSECONDS     
      TSTEP=TSTEP*1.0D12
      TFINAL=7.00*TSTEP
      ITFINAL=7
# CALCULATE GOOD STARTING VALUES FOR ALPHA AND NETA
      JPRT=0
      CALL MONTEFTAT(JPRT)
      CALL PT(JPRT)
      CALL TOF(JPRT)
      ALP1=RALPHA/TOFWR*1.D7
      ALP1ER=RALPER*ALP1/100. 
      ATT1=RATTOF/TOFWR*1.D7
      ATT1ER=RATOFER*ATT1/100.
      WRITE(6,944) ALP1,ALP1ER,ATT1,ATT1ER
  944 FORMAT(' GOOD STARTING VALUES FOR CALC:',/,' ALPHA=',D12.3,' ERR='
     /,D12.3,/,' NETA =',D12.3,' ERR=',D12.3)
#
# CALCULATE USING GOOD STARTING VALUES
#  RESET TCFMAX
      DO 44 J=1,NGAS
   44 TCFMAX(J)=TCFMAX(J)-abs(FAKEI)/DFLOAT(NGAS)
# CALCULATE FAKE IONISATION RATE SCALING BY 1.2 
      ALPHAD=ATT1*1.2
      IF((ALP1-ATT1):
 > 30.*CORR) ALPHAD=abs(ATT1)*0.4
      IF(abs(ALP1-ATT1):
 < (ALP1/10.0) or abs(ALP1-ATT1) < 
     /(ATT1/10.0)) ALPHAD=abs(ATT1)*0.3
      IF((ALP1-ATT1):
 > 100.*CORR) ALPHAD=0.0
      WZ=TOFWR*1.D5
#
#
# NET IONISATION
#   5 IF(ANET > (11000./CORR)) :
# LARGE IONISATION
#      ALPHAD=7000.-(ALPHA-ATT)
#     elif(abs(ALPP) > (5.0*abs(ANET)) or abs(ATTP) > 
#    /(5.0*abs(ANET))) :
# LARGE CANCELLATION BETWEEN ATTACHMENT AND IONISATION
#      ALPHAD=-6.0*(ALPHA-ATT)
#     else:
#      ALPHAD=0.0
#     # endIF 
    6 VDST=WZ*1.D-5 
      FAKEI=ALPHAD*WZ*1.D-12        
      ALPHAST=0.85*abs(ALPHAD+ALP1-ATT1) 
      IF((ALP1+ALPHAD):
 > (10.0*ALPHAST) or ATT1 > (10.0*ALPHAST)) :
# LARGE CANCELLATION BETWEEN ALPHA AND NETA. REDUCE STEP SIZE BY 15.0
       IF((ALP1+ALPHAD):
 > 100.*CORR) :
        ALPHAST=ALPHAST*15.0
       elif((ALP1+ALPHAD) > 50.0*CORR) :
        ALPHAST=ALPHAST*12.0
       else:
        ALPHAST=ALPHAST*8.0
       # endIF
      # endIF                              
      TSTEP=math.log(3.00)/(ALPHAST*VDST*1.0D5)
      IF(TSTEP > TCUTH and ALPHAD != 0.0):
 TSTEP=TCUTH
#     IF(TSTEP < TCUTL) TSTEP=TCUTL
# UPDATE NULL COLLISION FREQUENCY
      DO 10 J=1,NGAS
   10 TCFMAX(J)=TCFMAX(J)+abs(FAKEI)/DFLOAT(NGAS)
      ANET1=ALP1-ATT1
      WRITE(6,878) ALPHAST,ANET1,ALPHAD,TSTEP
  878 FORMAT(' ALPHAST=',D10.3,' ANET=',D10.3,' ALPHAD=',D10.3,/,
     /' TSTEP=',D10.3)
      TSTEP=TSTEP*1.0D12
      TFINAL=7.00*TSTEP
      ITFINAL=7
# CALC TIME OF FLIGHT AND PT 
      WRITE(6,25)
   25 FORMAT(/,2X,'SOLUTION FOR PULSED TOWNS# end AND TIME OF FLIGHT PARAM
     /ETERS',/,'  ------------------------------------------------------
     /--------') 
      WRITE(6,26) TSTEP
   26 FORMAT(1(/),'  TIME STEP BETWEEN SAMPLING PLANES =',D12.5,' PICOSE
     /CS.',/)       
      JPRT=1              
      CALL MONTEFTAT(JPRT)                            
      CALL FRIEDLANDT 
      CALL PT(JPRT) 
      CALL TOF(JPRT) 
      WRITE(6,27) RALPHA,RALPER,RATTOF,RATOFER
   27 FORMAT(/,'PT IONISATION AND ATTACHMENT RATES *10**12/SEC',/,'ALPHA
      != ',D10.3,' +- ',F6.2,' %      ATT=',D10.3,' +- ',F6.2,' %')    
      WRITE(6,28) 
   28 FORMAT(/,' TOF DIFFUSION')
      WRITE(6,29) TOFDL,TOFDLER,TOFDT,TOFDTER 
   29 FORMAT(/,'  DL=',F8.1,' +- ',F6.1,' %       DT=',F8.1,' +- ',F6.1,
     /' %')     
      WRITE(6,30) 
   30 FORMAT(/,' TOF DRIFT VELOCITY') 
      WRITE(6,31) TOFWR,TOFWRER   
   31 FORMAT(/,'    WR=',F8.2,' +- ',F6.2,' %') 
#      CALCULATE TOWNS# end SST COEFICIENTS FROM TOF RESULTS  
      WRN=TOFWR*1.005 
      FC1=WRN/(2.00*TOFDL) 
      FC2=((RALPHA-RATTOF)*1.0D12)/TOFDL   
      ALPZZ=FC1-math.sqrt(FC1**2-FC2)     
      WRITE(6,32) ALPZZ
   32 FORMAT(/,'TOWNS# end COEFICIENT (ALPHA-ATT) CALCULATED FROM TOF RESU
     /LTS:',/,' ALPHA-ATT /CM.=',D11.4,' N.B. APPROXIMATE FORMULA NOT AC
     /CURATE',/)       
#---------------------------------------------------           
# LOAD NEW ALPHA AND ATTACHMENT INTO COMMON BLOCKS
#-----------------------------------------------
      ALPHA=RALPHA/TOFWR*1.D7
      ALPER=RALPER*ALPHA/100.
      ATT=RATTOF/TOFWR*1.D7
      ATTER=RATOFER*ATT/100.
#     WRITE(6,33) ALPHA,ALPER,ATT,ATTER 
# 33  FORMAT(' TOF TOWNS# end IN UNITS OF 1/CM:',/,'   GAIN =',D12.4,' +-'
#    /,D12.4,/,' ATTACH =',D12.4,' +-',D12.4,/)  
#-----------------------------------------------      
      RETURN                                                     
      # end                                                               
      def MONTEFTAT(JPRT):                                   
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAXOLD 
      COMMON/BFLD/EOVB,WB,BTHETA,BMAG                                   
      COMMON/LARGET/CF(6,4000,290),EIN(6,290),TCF(6,4000),IARRY(6,290),
     /RGAS(6,290),IPN(6,290),WPL(6,290),IPLAST(6),ISIZE(6),
     /PENFRA[6,3,290],TCFMAX(6)
      COMMON/LARGENT/CFN(6,4000,10),TCFN(6,4000),SCLENUL(6,10),NPLAST(6)
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/OUTPTT/TIME(300),ICOLL(6,5),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(6,290),ICOLNN(6,10)
      COMMON/TTRM/ZTOT,TTOT,ZTOTS,TTOTS
      COMMON/THRM/AMGAS(6),VTMB[6],TCFMX,TCFMXG(6),ITHRM
      COMMON/RANM/RNMX(6)
      COMMON/ISPT/XS(2000),YS(2000),ZS(2000),TS(2000),ES(2000),
     /DCX(2000),DCY(2000),DCZ[2000],IPL(2000)
      COMMON/TPLOUT/ETPL(8),XTPL(8),YTPL(8),ZTPL(8),TTPL(8),XXTPL(8),
     /YYTPL(8),ZZTPL(8),VZTPL(8),NETPL(8),ATTOINT,ATTERT,AIOERT 
      COMMON/ANIST/PSCT(6,4000,290),ANGCT(6,4000,290),INDEX(6,290),NISO
      COMMON/IONFL/NC0(6,290),EC0(6,290),NG1(6,290),EG1(6,290),
     /NG2(6,290),EG2(6,290),WKLM(6,290),EFL(6,290)
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9] 
      DIMENSION EPRM(10000000),IESPECP(100),TEMP(6,4000)            
# -------------------------------------------------------------------   
#   CALCULATES COLLISION EVENTS AND UPDATES DIFFUSION AND VELOCITY.
#   THIS ROUTINE HANDLES TERMINATIONS AT FIXED DRIFT TIMES.
#   BFIELD PARALLEL TO EFIELD    
# ------------------------------------------------------------------- 
      IF(JPRT == 0):
 :
# CALCULATION OF APPROXIMATE STARTING PARAMETERS
       NMAX=NMAXOLD
       IF(NMAXOLD > 80000000):
 NMAX=80000000
      else:
# ENTRY FOR NORMAL CALCULATION
       NMAX=NMAXOLD
      # endIF
      S=0.00 
      ST=0.00 
      X=0.00
      Y=0.00
      Z=0.00 
      ZTOT=0.00
      ZTOTS=0.00
      TTOT=0.00
      TTOTS=0.00
      SMALL=1.0D-20                                                     
      TMAX1=0.00                                                       
      RDUM=RSTART                                                       
      E1=ESTART                                                         
      CONST9=CONST3*0.010
      CONST10=CONST9*CONST9
      DO 25 I=1,300
   25 TIME(I)=0.00
      DO 26 I=1,5
      DO 26 K=1,6
   26 ICOLL(K,I)=0
      DO 27 I=1,290
      DO 27 K=1,6
   27 ICOLN(K,I)=0
      DO 271 I=1,10
      DO 271 K=1,6
  271 ICOLNN(K,I)=0
      DO 28 I=1,4000
   28 SPEC(I)=0.00            
      DO 33 I=1,100
   33 IESPECP(I)=0 
      DO 34 I=1,8
      ETPL(I)=0.00
      XTPL(I)=0.00
      YTPL(I)=0.00
      ZTPL(I)=0.00
      TTPL(I)=0.00
      XXTPL(I)=0.00
      YYTPL(I)=0.00
      ZZTPL(I)=0.00
      VZTPL(I)=0.00
   34 NETPL(I)=0                                   
      ID=0
      N4000=4000
      N300=300
      N100=100
      I100=0                                                            
      NCOL=0                                                            
      NNULL=0
      NELEC=0
      NEION=0
      NMXADD=0
      NTMPFLG=0
      NPONT=0 
      NCLUS=0
      J1=1 
      ZSTRT=0.00
      TSSTRT=0.00 
#
      DO 111 K=1,6
      DO 111 J=1,N4000
  111 TEMP(K,J)=TCF(K,J)+TCFN(K,J)
      ABSFAKEI=abs(FAKEI)
      IFAKE=0:
      DO 112 J=1,8
  112 IFAKET(J)=0
#
# GENERATE INITIAL RANDOM NUMBERS FOR MAXWELL BOLTZMAN
      CALL GERJAN
      IMBPT=0
#
#     INITIAL DIRECTION COSINES                                         
      DCZ1=DCOS(THETA)                                                  
      DCX1=DSIN(THETA)*DCOS(PHI)                                        
      DCY1=DSIN(THETA)*DSIN(PHI) 
# INITIAL VELOCITY
      VTOT=CONST9*math.sqrt(E1)
      CX1=DCX1*VTOT
      CY1=DCY1*VTOT
      CZ1=DCZ1*VTOT      
      E100=E1
      DCZ100=DCZ1
      DCX100=DCX1
      DCY100=DCY1                                       
      BP=EFIELD*EFIELD*CONST1                                           
      F1=EFIELD*CONST2                                                  
      F2=EFIELD*CONST3
      API=DACOS(-1.00)                                                 
      F4=2.00*API
      JPRINT=NMAX/10
      IPRINT=0
      ITER=0
      IPLANE=0
      IPRIM=0
#  LOOP FOR NEW STARTING ELECTRONS 
  544 IPRIM=IPRIM+1 
      IF(IPRIM > 1):
 :
# CHECK IF def WILL EXCEED MAXIMUM NUMBER OF ITERATIONS 
# IN THIS CYCLE IF SO OUTPUT CURRENT RESULTS. 
       IF(ITER > NMAX):
 :
        IPRIM=IPRIM-1
        GO TO 700      
       # endIF 
       X=0.00
       Y=0.00
       Z=0.00
       DCZ1=DCZ100
       DCX1=DCX100
       DCY1=DCY100
       E1=E100
       VTOT=CONST9*math.sqrt(E1)
       CX1=DCX1*VTOT
       CY1=DCY1*VTOT
       CZ1=DCZ1*VTOT
       NCLUS=NCLUS+1
       ST=0.00
       TSSTRT=0.00
       ZSTRT=0.00
       IPLANE=0
      # endIF
      IF(IPRIM > 10000000):
 :
      WRITE(6,944) IPRIM
 944  FORMAT(/,2X,'def STOPPED TOO MANY PRIMARIES IPRIM =',I7)
      GO TO 700
      # endIF
      EPRM(IPRIM)=E1
      IDUM=DINT(E1)+1
      IDUM=DMIN0(IDUM,N100)
      IESPECP(IDUM)=IESPECP(IDUM)+1      
# START OF LOOP FOR NEWLY CREATED ELECTRONS
  555 TDASH=0.00
      NELEC=NELEC+1
      TSTOP=TSTEP+IPLANE*TSTEP       
# MAIN LOOP                                                             
    1 CONTINUE                                                          
#     IF(ITER > NMAX)  GO TO 315
      R1=drand48(RDUM)
      T=-math.log(R1)/TCFMX+TDASH
      TDASH=T
      AP=DCZ1*F2*math.sqrt(E1)
  15  IF((T+ST) >= TSTOP) :                     
       IPLANE=IPLANE+1
       TSTOP=TSTOP+TSTEP
# STORE POSITION AND ENERGY AT TIME PLANE =IPLANE. 
       CALL TPLANEAT(T,E1,CX1,CY1,DCZ1,AP,BP,EFIELD,IPLANE)
# CHECK IF PASSED THROUGH MORE THAN ONE PLANE IN THIS STEP       
       IF((T+ST):
 >= TSTOP and TSTOP <= TFINAL) GO TO 15
       IF((T+ST):
 >= TFINAL) :
        ZTOT=ZTOT+Z     
        TTOT=TTOT+ST
        ZTOTS=ZTOTS+Z-ZSTRT      
        TTOTS=TTOTS+ST-TSSTRT    
        TSTOP=TSTEP
# NO MORE ELECTRONS IN CASCADE TRY NEW PRIMARY ELECTRON
        IF(NELEC == (NCLUS+1):
) GO TO 544  
# TAKE ELECTRONS FROM STORE 
   20   X=XS(NPONT) 
        Y=YS(NPONT) 
        Z=ZS(NPONT) 
        ST=TS(NPONT) 
        E1=ES(NPONT) 
        DCX1=DCX(NPONT) 
        DCY1=DCY(NPONT) 
        DCZ1=DCZ[NPONT]
        VTOT=CONST9*math.sqrt(E1)
        CX1=DCX1*VTOT
        CY1=DCY1*VTOT
        CZ1=DCZ1*VTOT 
        IPLANE=IPL(NPONT)   
        NPONT=NPONT-1 
        ZSTRT=Z 
        TSSTRT=ST
        GO TO 555
       # endIF              
      # endIF
      E=E1+(AP+BP*T)*T
      IF(E < 0.00):
 :
       WRITE(6,913)ITER,E,E1,AP,BP,DCZ1 
 913  FORMAT(3X,' AFTER STORE ITER=',I10,' E=',D12.3,' E1=',D12.3,' AP='
     /,D12.3,' BP=',D12.3,' DCZ1=',D12.3)       
       E=0.0010
      # endIF  
      WBT=WB*T
      COSWT=DCOS(WBT)
      SINWT=DSIN(WBT)
      CONST6=math.sqrt(E1/E)
# FIND IDENTITY OF GAS FOR COLLISION
      KGAS=0
      IF(NGAS == 1):
 :
       R2=drand48(RDUM)
       KGAS=1
       GO TO 4
      # endIF
      R2=drand48(RDUM)
    3 KGAS=KGAS+1
      IF(TCFMXG(KGAS):
 < R2) GO TO 3
# CALCULATE ELECTRON VELOCITY VECTORS BEFORE COLLISION
    4 CX2=CX1*COSWT-CY1*SINWT
      CY2=CY1*COSWT+CX1*SINWT
      VTOT=CONST9*math.sqrt(E)
      CZ2=VTOT*(DCZ1*CONST6+EFIELD*T*CONST5/math.sqrt(E))
# CALCULATE GAS VELOCITY VECTORS VGX,VGY,VGZ
      IMBPT=IMBPT+1
      IF(IMBPT > 6):
 :
       CALL GERJAN
        IMBPT=1
      # endIF
      VGX=VTMB[KGAS]*RNMX(IMBPT)
      IMBPT=IMBPT+1
      VGY=VTMB[KGAS]*RNMX(IMBPT)
      IMBPT=IMBPT+1
      VGZ=VTMB[KGAS]*RNMX(IMBPT)
# CALCULATE ENERGY WITH STATIONARY GAS TARGET, EOK.
      EOK=((CX2-VGX)**2+(CY2-VGY)**2+(CZ2-VGZ)**2)/CONST10
      IE=DINT(EOK/ESTEP)+1                                             
      IE=DMIN0(IE,N4000)                                               
#                                                                       
#     TEST FOR #real OR NULL COLLISION 
#                                  
      R5=drand48(RDUM)                                         
      TEST1=TCF(KGAS,IE)/TCFMAX(KGAS)                                   
      IF(R5 <= TEST1):
 GO TO 137
      NNULL=NNULL+1          
      TEST2=TEMP(KGAS,IE)/TCFMAX(KGAS)
      IF(R5 < TEST2):
 :
# TEST FOR NULL LEVELS
       IF(NPLAST(KGAS):
 == 0) GO TO 1  
       R2=drand48(RDUM)
       I=0
  888  I=I+1
       IF(CFN(KGAS,IE,I):
 < R2) GO TO 888
# INCREMENT NULL SCATTER SUM
       ICOLNN(KGAS,I)=ICOLNN(KGAS,I)+1
       GO TO 1
      # endIF   
      TEST3=(TEMP(KGAS,IE)+ABSFAKEI)/TCFMAX(KGAS)
      IF(R5 < TEST3):
 :
# FAKE COLLISION INCREMENT COUNTERS
       IFAKE=IFAKE+1:
       IFAKET(IPLANE+1):
=IFAKET(IPLANE+1)+1
       IF(FAKEI < 0.0):
 :
        NEION=NEION+1
# FAKE ATTACHMENT START NEW ELECTRON
        IF(NELEC == (NCLUS+1):
) GO TO 544
# ELECTRON CAPTURED TAKE ELECTRON FROM STORE
        GO TO 20
       # endIF
# FAKE IONISATION ADD ELECTRON TO STORE
       NCLUS=NCLUS+1
       NPONT=NPONT+1
       NMXADD=MAX(NPONT,NMXADD)
       IF(NPONT > 2000):
 : 
        WRITE(6,546) NPONT,ITER
        STOP
       # endIF     
       XS(NPONT)=X+(CX1*SINWT-CY1*(1.00-COSWT))/WB       
       YS(NPONT)=Y+(CY1*SINWT+CX1*(1.00-COSWT))/WB
       ZS(NPONT)=Z+DCZ1*T*CONST9*math.sqrt(E1)+T*T*F1
       TS(NPONT)=ST+T
       ES(NPONT)=E
       IPL(NPONT)=IPLANE
       BOT=1.00/math.sqrt(CX2*CX2+CY2*CY2+CZ2*CZ2)
       DCX(NPONT)=CX2*BOT
       DCY(NPONT)=CY2*BOT
       DCZ[NPONT]=CZ2*BOT
       GO TO 1
      # endIF
      GO TO 1           
  137 NCOL=NCOL+1
# CALCULATE DIRECTION COSINES OF ELECTRON IN 0 KELVIN FRAME
      CONST11=1.00/(CONST9*math.sqrt(EOK))
      DXCOM=(CX2-VGX)*CONST11
      DYCOM=(CY2-VGY)*CONST11
      DZCOM=(CZ2-VGZ)*CONST11                                       
#                                                                       
#  CALCULATE POSITIONS AT INSTANT BEFORE COLLISION
#    ALSO UPDATE DIFFUSION  AND ENERGY CALCULATIONS.                    
      T2=T*T
      IF(T >= TMAX1):
 TMAX1=T
      TDASH=0.00  
      CONST7=CONST9*math.sqrt(E1)                                           
      A=T*CONST7                                                        
      DX=(CX1*SINWT-CY1*(1.00-COSWT))/WB                               
      X=X+DX           
      DY=(CY1*SINWT+CX1*(1.00-COSWT))/WB                               
      Y=Y+DY    
      Z=Z+DCZ1*A+T2*F1
      ST=ST+T
      IT=DINT(T+1.00)                                              
      IT=DMIN0(IT,N300)                                                
      TIME(IT)=TIME(IT)+1.00  
# ENERGY SPECTRUM IN 0 KELVIN FRAME                                 
      SPEC(IE)=SPEC(IE)+1.00
# --------------------------------------------------------------------- 
#     DETERMINATION OF #real COLLISION TYPE                              
# --------------------------------------------------------------------- 
      R2=drand48(RDUM)
# FIND LOCATION WITHIN 4 UNITS IN COLLISION ARRAY
      CALL SORTT(KGAS,I,R2,IE)                                          
  140 I=I+1                                                             
      IF(CF(KGAS,IE,I):
 < R2) GO TO 140                                 
      S1=RGAS(KGAS,I)                                                   
      EI=EIN(KGAS,I)
      IF(EOK < EI):
 :
# FIX ENERGY LOSS SMALLER THAN INCIDENT ENERGY IF A BINING ERROR OCCURS.
      EI=EOK-0.00010
      # endIF                                                          
      IF(IPN(KGAS,I):
 == 0) GO TO 666
# ATTACHMENT       
      IF(IPN(KGAS,I):
 == -1) :
       NEION=NEION+1
       IPT=IARRY(KGAS,I)
       ID=ID+1
       ITER=ITER+1
       IPRINT=IPRINT+1
       ICOLL(KGAS,IPT)=ICOLL(KGAS,IPT)+1
       ICOLN(KGAS,I)=ICOLN(KGAS,I)+1 
       IT=DINT(T+1.00)
       IT=DMIN0(IT,N300)
       TIME(IT)=TIME(IT)+1.00
       ZTOT=ZTOT+Z
       TTOT=TTOT+ST
       ZTOTS=ZTOTS+Z-ZSTRT
       TTOTS=TTOTS+ST-TSSTRT
#  ELECTRON CAPTURED START NEW PRIMARY          
       IF(NELEC == (NCLUS+1):
) GO TO 544
# ELECTRON CAPTURED TAKE NEXT ELECTRON FROM STORE       
       GO TO 20
      # endIF    
      EISTR=EI                               
      R9=drand48(RDUM)
#     ESEC=R9*(EOK-EI)      
#    USE OPAL PETERSON AND BEATY SPLITTING FACTOR.
      ESEC=WPL(KGAS,I)*TAN(R9*ATAN((EOK-EI)/(2.00*WPL(KGAS,I))))    
      ESEC=WPL(KGAS,I)*(ESEC/WPL(KGAS,I))**0.9524 
      EI=ESEC+EI 
# STORE POSITION ,ENERGY, DIRECTION COSINES AND TIME OF GENERATION
# OF IONISATION ELECTRON      
      NCLUS=NCLUS+1
      NPONT=NPONT+1
      NMXADD=MAX(NPONT,NMXADD)
      IF(NPONT > 2000):
 : 
      WRITE(6,546) NPONT,ITER
 546  FORMAT(2X,' def STOPPED . NPONT=',I5,' ITER=',I10)
      STOP
      # endIF     
      XS(NPONT)=X       
      YS(NPONT)=Y
      ZS(NPONT)=Z
      TS(NPONT)=ST
      ES(NPONT)=ESEC
      IPL(NPONT)=IPLANE
      NTMPFLG=1
      NCLTMP=NPONT
# RANDOMISE SECONDARY ELECTRON DIRECTION
#     R3=drand48(RDUM)
#     F3=1.00-2.00*R3
#     THETA0=DACOS(F3)
#     F6=DCOS(THETA0)
#     F5=DSIN(THETA0)
#     R4=drand48(rdum)
#     PHI0=F4*R4
#     F8=DSIN(PHI0)
#     F9=DCOS(PHI0)               
#     DCX(NPONT)=F9*F5
#     DCY(NPONT)=F8*F5
#     DCZ[NPONT]=F6
# STORE POSSIBLE SHELL EMISSIONS AUGER OR FLUORESCENCE
      IF(EISTR > 30.0):
 :
# AUGER EMISSION WITHOUT FLUORESCENCE
       NAUG=NC0(KGAS,I)
       EAVAUG=EC0(KGAS,I)/DFLOAT(NAUG)
       DO 701 JKL=1,NAUG
       NCLUS=NCLUS+1
       NPONT=NPONT+1
       XS(NPONT)=X
       YS(NPONT)=Y
       ZS(NPONT)=Z
       TS(NPONT)=ST
       ES(NPONT)=EAVAUG
       R3=drand48(RDUM)
       F3=1.00-2.00*R3
       THETA0=DACOS(F3)
       F6=DCOS(THETA0)
       F5=DSIN(THETA0)
       R4=drand48(RDUM)
       PHI0=F4*R4
       F8=DSIN(PHI0)
       F9=DCOS(PHI0)
       DCX(NPONT)=F9*F5
       DCY(NPONT)=F8*F5
       DCZ[NPONT]=F6
       IPL(NPONT)=IPLANE
  701  CONTINUE     
      # endIF
#                                                                       
#  GENERATE SCATTERING ANGLES AND UPDATE  LABORATORY COSINES AFTER      
#   COLLISION ALSO UPDATE ENERGY OF ELECTRON.                           
#
  666 IPT=IARRY(KGAS,I)
      ID=ID+1    
      ITER=ITER+1
      IPRINT=IPRINT+1                                                   
      ICOLL(KGAS,IPT)=ICOLL(KGAS,IPT)+1 
      ICOLN(KGAS,I)=ICOLN(KGAS,I)+1   
# IF EXCITATION : ADD PROBABILITY ,PENFRA(KGAS,1,I),OF TRANSFER TO 
# GIVE IONISATION OF THE OTHER GASES IN THE MIXTURE
      IF(IPEN == 0):
 GO TO 5
      IF(PENFRA[KGAS,1,I] != 0.0):
 :
       RAN=drand48(RDUM)
       IF(RAN > PENFRA[KGAS,1,I]):
 GO TO 5
       NCLUS=NCLUS+1
       NPONT=NPONT+1
       IF(NPONT > 2000):
 :
        WRITE(6,546) NPONT,ITER
        STOP
       # endIF
# ENTER HERE POSSIBLE DELOCALISATION LENGTH FOR PENNING TRANSFER
       IF(PENFRA[KGAS,2,I] == 0.0):
 :
        XS(NPONT)=X
        YS(NPONT)=Y
        ZS(NPONT)=Z
        GO TO 667
       # endIF    
       ASIGN=1.0
       RAN=drand48(RDUM)
       RAN1=drand48(RDUM)
       IF(RAN1 < 0.5):
 ASIGN=-ASIGN
       XS(NPONT)=X-math.log(RAN)*PENFRA[KGAS,2,I]*ASIGN
       RAN=drand48(RDUM)
       RAN1=drand48(RDUM)
       IF(RAN1 < 0.5):
 ASIGN=-ASIGN
       YS(NPONT)=Y-math.log(RAN)*PENFRA[KGAS,2,I]*ASIGN
       RAN=drand48(RDUM)
       RAN1=drand48(RDUM)
       IF(RAN1 < 0.5):
 ASIGN=-ASIGN
       ZS(NPONT)=Z-math.log(RAN)*PENFRA[KGAS,2,I]*ASIGN
# ENTER POSSIBLE PENNING TRANSFER TIME
  667  TPEN=ST
       IF(PENFRA[KGAS,3,I] == 0.0):
 GO TO 668
       RAN=drand48(RDUM)
       TPEN=ST-math.log(RAN)*PENFRA[KGAS,3,I]
  668  TS(NPONT)=TPEN
       ES(NPONT)=1.0
       DCX(NPONT)=DCX1
       DCY(NPONT)=DCY1
       DCZ[NPONT]=DCZ1
# FIND LAST TIME PLANE BEFORE TPEN
       TSTOP1=0.0
       IPLANE1=0
       DO 669 KDUM=1,ITFINAL
       TSTOP1=TSTEP+TSTOP1
       IF(TPEN < TSTOP1):
 GO TO 670
       IPLANE1=IPLANE1+1
  669  CONTINUE
# PENNING TRANSFER OCCURS AFTER FINAL TIME PLANE. CLEAR ENTRY
       NPONT=NPONT-1
       NCLUS=NCLUS-1
       GO TO 5
  670  IPL(NPONT)=IPLANE1         
      # endIF                                   
    5 S2=(S1*S1)/(S1-1.00) 
# ANISOTROPIC SCATTERING
      R3=drand48(RDUM) 
      IF(INDEX(KGAS,I):
 == 1) :
       R31=drand48(RDUM)
       F3=1.00-R3*ANGCT(KGAS,IE,I)       
       IF(R31 > PSCT(KGAS,IE,I):
) F3=-F3
      elif(INDEX(KGAS,I) == 2) :
       EPSI=PSCT(KGAS,IE,I)
       F3=1.00-(2.00*R3*(1.00-EPSI)/(1.00+EPSI*(1.00-2.00*R3)))
      else:
# ISOTROPIC SCATTERING                                                
       F3=1.00-2.00*R3  
      # endIF
      THETA0=DACOS(F3)                                                  
      R4=drand48(RDUM)
      PHI0=F4*R4                                                        
      F8=DSIN(PHI0)                                                     
      F9=DCOS(PHI0)
      ARG1=1.00-S1*EI/EOK                                              
      ARG1=DMAX1(ARG1,SMALL)                                            
      D=1.00-F3*math.sqrt(ARG1)                                            
      E1=EOK*(1.00-EI/(S1*EOK)-2.00*D/S2) 
      E1=DMAX1(E1,SMALL)                                                
      Q=math.sqrt((EOK/E1)*ARG1)/S1                                         
      Q=DMIN1(Q,1.00)                                                  
      THETA=DASIN(Q*DSIN(THETA0))                                       
      F6=DCOS(THETA)                                                    
      U=(S1-1.00)*(S1-1.00)/ARG1                                      
      CSQD=F3*F3                                                        
      IF(F3 < 0.00 and CSQD > U):
 F6=-1.00*F6                        
      F5=DSIN(THETA)                                                    
      DZCOM=DMIN1(DZCOM,1.00)                                          
      ARGZ=math.sqrt(DXCOM*DXCOM+DYCOM*DYCOM)
      IF(ARGZ == 0.00):
 :
       DCZ1=F6         
       DCX1=F9*F5                             
       DCY1=F8*F5 
       IF(NTMPFLG == 1):
 :
# USE FREE KINEMATICS FOR IONISATION SECONDARY ANGLE
        F5S=F5*math.sqrt(E1/ES(NCLTMP))
        IF(F5S > 1.0):
 F5S=1.0
        THSEC=DASIN(F5S)
        F5S=DSIN(THSEC)
        F6S=DCOS(THSEC)
        IF(F6 < 0.0):
 F6S=-F6S
        PHIS=PHI0+API
        IF(PHIS > F4):
 PHIS=PHI0-F4
        F8S=DSIN(PHIS)
        F9S=DCOS(PHIS)
        DCZ[NCLTMP]=F6S
        DCY(NCLTMP)=F8S*F5S
        DCX(NCLTMP)=F9S*F5S
        NTMPFLG=0
       # endIF
       GO TO 190
      # endIF                                            
      DCZ1=DZCOM*F6+ARGZ*F5*F8                                         
      DCY1=DYCOM*F6+(F5/ARGZ)*(DXCOM*F9-DYCOM*DZCOM*F8)                 
      DCX1=DXCOM*F6-(F5/ARGZ)*(DYCOM*F9+DXCOM*DZCOM*F8) 
      IF(NTMPFLG == 1):
 :
# USE FREE KINEMATICS FOR IONISATION SECONDARY ANGLE
       F5S=F5*math.sqrt(E1/ES(NCLTMP))
       IF(F5S > 1.0):
 F5S=1.0
       THSEC=DASIN(F5S)
       F5S=DSIN(THSEC)
       F6S=DCOS(THSEC)
       IF(F6 < 0.0):
 F6S=-F6S
       PHIS=PHI0+API
       IF(PHIS > F4):
 PHIS=PHI0-F4
       F8S=DSIN(PHIS)
       F9S=DCOS(PHIS)
       DCZ[NCLTMP]=DZCOM*F6S+ARGZ*F5S*F8S
       DCY(NCLTMP)=DYCOM*F6S+(F5S/ARGZ)*(DXCOM*F9S-DYCOM*DZCOM*F8S)
       DCX(NCLTMP)=DXCOM*F6S-(F5S/ARGZ)*(DYCOM*F9S+DXCOM*DZCOM*F8S)
       NTMPFLG=0
      # endIF
  190 CONTINUE  
# TRANSFORM VELOCITY VECTORS TO LAB FRAME
      VTOT=CONST9*math.sqrt(E1)
      CX1=DCX1*VTOT+VGX
      CY1=DCY1*VTOT+VGY
      CZ1=DCZ1*VTOT+VGZ
# CALCULATE ENERGY AND DIRECTION IN LAB FRAME
      E1=(CX1*CX1+CY1*CY1+CZ1*CZ1)/CONST10
      CONST11=1.00/(CONST9*math.sqrt(E1))
      DCX1=CX1*CONST11
      DCY1=CY1*CONST11
      DCZ1=CZ1*CONST11
# STORE DIRECTION COSINES AND ENERGY AFTER N COLLISIONS
# FOR LATER REUSE IN PRIMARY GENERATION
      I100=I100+1
      IF(I100 == 200):
 :
       DCZ100=DCZ1
       DCX100=DCX1        
       DCY100=DCY1 
       E100=E1
       I100=0
      # endIF  
      IF(IPRINT > JPRINT):
 GO TO 200
      GO TO 1                                    
#    INTERMEDIATE PRINTOUT                       
 200  IPRINT=0 
      W=ZTOTS/TTOTS                          
      W=W*1.0D+09                                                       
      JCT=ID/100000
#     IF(J1 == 1) WRITE(6,201)                                         
# 201 FORMAT(/,7X,'INTERMEDIATE OUTPUT',/,'    VEL      POS        TIME 
#    /       COUNT    ')                  
#     WRITE(6,202) W,ZTOTS,TTOTS,JCT   
# 202 FORMAT(1X,F8.3,2(1X,D10.3),4X,I6)                 
      J1=J1+1            
      GO TO 1
#  MAIN LOOP # end                                                  
  700 XID=DFLOAT(ID)
      IF(NELEC > IPRIM):
 :
       ANEION=DFLOAT(NEION)
       ANBT=DFLOAT(NELEC-IPRIM)
       ATTOINT=ANEION/ANBT
       ATTERT=math.sqrt(ANEION)/ANEION
       AIOERT=math.sqrt(ANBT)/ANBT
      else:
       ANEION=DFLOAT(NEION) 
       ATTOINT=-1.00
       ATTERT=math.sqrt(ANEION)/ANEION
      # endIF
      JCT=ID/100000  
      IF(J1 == 1):
 :
      WRITE(6,940) NCLUS,ITER
  940 FORMAT(2(/),' def STOPPED  (TOO FEW COLLISIONS), DECREASE THE 
     /ESTIMATED ALPHA.  NCLUS = ',I7,'  ITER =',I9)      
      STOP
      # endIF
      IF(JPRT == 1):
 WRITE(6,878) NELEC,NEION,IPRIM
 878  FORMAT(/,' TOTAL NO OF ELECTRONS=',I8,/,' TOTAL NO OF NEG. IONS=',
     /I8,/,' TOTAL NO OF PRIMARIES=',I8)  
      EPRMBAR=0.00
      E2PRM=0.00
      IF(IPRIM == 1):
 RETURN      
      DO 310 I=1,IPRIM
      E2PRM=E2PRM+EPRM(I)*EPRM(I)
 310  EPRMBAR=EPRMBAR+EPRM(I)
      EBAR=EPRMBAR/IPRIM
      EERR=math.sqrt(E2PRM/IPRIM-EBAR**2)
      IF(JPRT == 1):
 WRITE(6,836) EBAR,EERR
 836  FORMAT(/,2X,'AVERAGE ENERGY OF PRIMARY ELECTRON =',F10.3,' EV.',/,
     /'   ENERGY SPREAD OF PRIMARY ELECTRON =',F10.3,' EV.')
#     WRITE(6,835) (IESPECP(J),J=1,100)
#835  FORMAT(/,2X,'ENERGY SPECTRUM OF PRIMARY ELECTRONS IN 1 EV. BINS',/
#    /,10(2X,10I5,/))
      RETURN               
  315 IF(ITER > NMAX) :
       WRITE(6,991) ITER,NMAX,NPONT,NELEC,IPRIM,NMXADD
 991   FORMAT(2(/),' def STOPPED.  ITER =',I10,'    NMAX =',I10,/,
     /' NPONT=',I4,' NELEC=',I8,' IPRIM=',I4,' NMXADD=',I3)
       STOP
      # endIF                                                             
      RETURN                                                            
      # end
      def TPLANEAT(T,E1,CX1,CY1,DCZ1,AP,BP,EFLD,IPLANE):
      IMPLICIT #real*8 (A-H,O-Z)  
      IMPLICIT #integer*8 (I-N)
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5
      COMMON/BFLD/EOVB,WB,BTHETA,BMAG
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/OUTPTT/TIME(300),ICOLL(6,5),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(6,290),ICOLNN(6,10)
      COMMON/TPLOUT/ETPL(8),XTPL(8),YTPL(8),ZTPL(8),TTPL(8),XXTPL(8),
     /YYTPL(8),ZZTPL(8),VZTPL(8),NETPL(8),ATTOINT,ATTERT,AIOERT 
#-----------------------------------------------------------------------
# STORES POSITION, TIME AND ENERGY AND SUMS REQUIRED
# TO CALCULATE DEVIATIONS AND MEANS AT PLANE =IPLANE 
#-----------------------------------------------------------------------
      TIMESP=IPLANE*TSTEP
# CALC TIME LEFT TO ARRIVE AT PLANE
      TIMLFT=TIMESP-ST
      T2LFT=TIMLFT*TIMLFT
      A=AP*TIMLFT
      B=BP*T2LFT 
      EPLANE=E1+A+B
      WBT=WB*TIMLFT
      COSWT=DCOS(WBT)
      SINWT=DSIN(WBT)                      
      CONST6=math.sqrt(E1/EPLANE)         
      DCZ2=DCZ1*CONST6+EFLD*TIMLFT*CONST5/math.sqrt(EPLANE)
      XPLANE=X+(CX1*SINWT-CY1*(1.00-COSWT))/WB   
      YPLANE=Y+(CY1*SINWT+CX1*(1.00-COSWT))/WB      
      ZPLANE=Z+DCZ1*TIMLFT*math.sqrt(E1)*CONST3*0.010+T2LFT*EFLD*CONST2
      VZPLANE=DCZ2*math.sqrt(EPLANE)*CONST3*0.010
      XTPL(IPLANE)=XTPL(IPLANE)+XPLANE
      YTPL(IPLANE)=YTPL(IPLANE)+YPLANE
      ZTPL(IPLANE)=ZTPL(IPLANE)+ZPLANE
      XXTPL(IPLANE)=XXTPL(IPLANE)+XPLANE*XPLANE
      YYTPL(IPLANE)=YYTPL(IPLANE)+YPLANE*YPLANE
      ZZTPL(IPLANE)=ZZTPL(IPLANE)+ZPLANE*ZPLANE
      ETPL(IPLANE)=ETPL(IPLANE)+EPLANE
      TTPL(IPLANE)=TTPL(IPLANE)+ST+TIMLFT
      VZTPL(IPLANE)=VZTPL(IPLANE)+VZPLANE
      NETPL(IPLANE)=NETPL(IPLANE)+1 
      RETURN
      # end

      def MIXER                                                  :
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/RATIO/AN1,AN2,AN3,AN4,AN5,AN6,AN,FRAC(6)              
      COMMON/GASN/NGASN(6)                                    
      COMMON/MIX1/QELM(4000),QSUM(4000),QION(6,4000),QIN1(250,4000),
     /QIN2(250,4000),QIN3(250,4000),QIN4(250,4000),QIN5(250,4000),
     /QIN6(250,4000),QSATT(4000)             
      COMMON/MIX2/E(4000),EROOT(4000),QTOT(4000),QREL(4000),
     /QINEL(4000),QEL(4000)                                          
      COMMON/MIX3/NIN1,NIN2,NIN3,NIN4,NIN5,NIN6,LION(6),LIN1(250),
     /LIN2(250),LIN3(250),LIN4(250),LIN5(250),LIN6(250),ALION(6),
     /ALIN1(250),ALIN2(250),ALIN3(250),ALIN4(250),ALIN5(250),ALIN6(250)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX
      COMMON/LARGE/CF(4000,960),EIN(960),TCF(4000),IARRY(960),RGAS(960),
     /IPN(960),WPL(960),IPLAST,ISIZE,PENFRA[3,960],TCFMAX(8)  
      COMMON/LARGEN/CFN(4000,60),TCFN(4000),SCLENUL(60),NPLAST       
      COMMON/ANIS/PSCT(4000,960),ANGCT(4000,960),INDEX(960),NISO
      COMMON/FRED/FCION(4000),FCATT(4000)
      COMMON/MRATIO/VAN1,VAN2,VAN3,VAN4,VAN5,VAN6,VAN
      COMMON/IONFL1/NC0(960),EC0(960),NG1(960),EG1(960),NG2(960),
     /EG2(960),WKLM(960),EFL(960)
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9] 
      COMMON/NAMES/NAMEG(6)                               
      COMMON/SCRIP/DSCRPT(960),DSCRPTN(60)                             
      CHARACTER*25 NAMEG,NAME1,NAME2,NAME3,NAME4,NAME5,NAME6
      CHARACTER*50 DSCRPT,SCRP1(300),SCRP2(300),SCRP3(300),
     /SCRP4(300),SCRP5(300),SCRP6(300) 
      CHARACTER*50 DSCRPTN,SCRPN1(10),SCRPN2(10),SCRPN3(10),
     /SCRPN4(10),SCRPN5(10),SCRPN6(10)                            
      DIMENSION Q1(6,4000),Q2(6,4000),Q3(6,4000),Q4(6,4000),
     /Q5(6,4000),Q6(6,4000)
      DIMENSION E1(6),E2(6),E3(6),E4(6),E5(6),E6(6),EI1(250),EI2(250),
     /EI3(250),EI4(250),EI5(250),EI6(250)
      DIMENSION QQROT(4000),QDROT(4000),QATT(6,4000),EION(6)       
      DIMENSION PEQEL1(6,4000),PEQEL2(6,4000),PEQEL3(6,4000),
     /PEQEL4(6,4000),PEQEL5(6,4000),PEQEL6(6,4000)
      DIMENSION PEQIN1(250,4000),PEQIN2(250,4000),PEQIN3(250,4000),  
     /PEQIN4(250,4000),PEQIN5(250,4000),PEQIN6(250,4000)
      DIMENSION PENFRA1(3,250),PENFRA2(3,250),PENFRA3(3,250),
     /PENFRA4(3,250),PENFRA5(3,250),PENFRA6(3,250)
      DIMENSION KIN1(250),KIN2(250),KIN3(250),KIN4(250),KIN5(250),
     /KIN6(250)
      DIMENSION KEL1(6),KEL2(6),KEL3(6),KEL4(6),KEL5(6),KEL6(6)
      DIMENSION EION1(30),EION2(30),EION3(30),EION4(30),EION5(30),
     /EION6(30)
      DIMENSION QION1(30,4000),QION2(30,4000),QION3(30,4000),
     /QION4(30,4000),QION5(30,4000),QION6(30,4000)
      DIMENSION PEQION1(30,4000),PEQION2(30,4000),PEQION3(30,4000),
     /PEQION4(30,4000),PEQION5(30,4000),PEQION6(30,4000)
      DIMENSION EB1(30),EB2(30),EB3(30),EB4(30),EB5(30),EB6(30)
      DIMENSION NC01(30),NC02(30),NC03(30),NC04(30),NC05(30),NC06(30)
      DIMENSION EC01(30),EC02(30),EC03(30),EC04(30),EC05(30),EC06(30)
      DIMENSION NG11(30),NG12(30),NG13(30),NG14(30),NG15(30),NG16(30)
      DIMENSION EG11(30),EG12(30),EG13(30),EG14(30),EG15(30),EG16(30)
      DIMENSION NG21(30),NG22(30),NG23(30),NG24(30),NG25(30),NG26(30)
      DIMENSION EG21(30),EG22(30),EG23(30),EG24(30),EG25(30),EG26(30)
      DIMENSION WK1(30),WK2(30),WK3(30),WK4(30),WK5(30),WK6(30)
      DIMENSION EFL1(30),EFL2(30),EFL3(30),EFL4(30),EFL5(30),EFL6(30)
      DIMENSION QATT1(8,4000),QATT2(8,4000),QATT3(8,4000),QATT4(8,4000),
     /QATT5(8,4000),QATT6(8,4000)
      DIMENSION QNUL1(10,4000),QNUL2(10,4000),QNUL3(10,4000),
     /QNUL4(10,4000),QNUL5(10,4000),QNUL6(10,4000),SCLN1(10),
     /SCLN2(10),SCLN3(10),SCLN4(10),SCLN5(10),SCLN6(10)
                                                                   
#  ---------------------------------------------------------------------
#                                                                       
#     def FILLS ARRAYS OF COLLISION FREQUENCY              
#     CAN HAVE A MIXTURE OF UP TO 6 GASES                               
#                                                                       
#                                                                       
#  ---------------------------------------------------------------------
#                                                             
      NISO=0
      NIN1=0                                                            
      NIN2=0                                                            
      NIN3=0                                                            
      NIN4=0
      NIN5=0
      NIN6=0
      NION1=0
      NION2=0
      NION3=0
      NION4=0
      NION5=0
      NION6=0
      NATT1=0
      NATT2=0
      NATT3=0
      NATT4=0
      NATT5=0
      NATT6=0
      NUL1=0
      NUL2=0
      NUL3=0
      NUL4=0
      NUL5=0
      NUL6=0
      N4000=4000
      NONE=1                                                     
      DO 2 J=1,6  
      NAMEG(J)='-------------------------'                              
      KEL1(J)=0
      KEL2(J)=0
      KEL3(J)=0
      KEL4(J)=0
      KEL5(J)=0
      KEL6(J)=0                       
      DO 1 I=1,N4000                                                   
      Q1(J,I)=0.00                                                     
      Q2(J,I)=0.00                                                     
      Q3(J,I)=0.00                                                     
      Q4(J,I)=0.00
      Q5(J,I)=0.00
      Q6(J,I)=0.00                     
    1 CONTINUE                                                          
      E1(J)=0.00                                                       
      E2(J)=0.00                                                       
      E3(J)=0.00                                                       
      E4(J)=0.00 
      E5(J)=0.00
    2 E6(J)=0.00
      DO 222 J=1,30
      EION1(J)=0.00
      EION2(J)=0.00
      EION3(J)=0.00
      EION4(J)=0.00
      EION5(J)=0.00
      EION6(J)=0.00
      EB1(J)=0.00
      EB2(J)=0.00
      EB3(J)=0.00
      EB4(J)=0.00
      EB5(J)=0.00
      EB6(J)=0.00
      EC01(J)=0.00
      EC02(J)=0.00
      EC03(J)=0.00
      EC04(J)=0.00
      EC05(J)=0.00
      EC06(J)=0.00
      EG11(J)=0.00
      EG12(J)=0.00
      EG13(J)=0.00
      EG14(J)=0.00
      EG15(J)=0.00
      EG16(J)=0.00
      EG21(J)=0.00
      EG22(J)=0.00
      EG23(J)=0.00
      EG24(J)=0.00
      EG25(J)=0.00
      EG26(J)=0.00
      WK1(J)=0.00
      WK2(J)=0.00
      WK3(J)=0.00
      WK4(J)=0.00
      WK5(J)=0.00
      WK6(J)=0.00
      EFL1(J)=0.00
      EFL2(J)=0.00
      EFL3(J)=0.00
      EFL4(J)=0.00
      EFL5(J)=0.00
      EFL6(J)=0.00
      NC01(J)=0
      NC02(J)=0
      NC03(J)=0
      NC04(J)=0
      NC05(J)=0
      NC06(J)=0
      NG11(J)=0
      NG12(J)=0
      NG13(J)=0
      NG14(J)=0
      NG15(J)=0
      NG16(J)=0
      NG21(J)=0
      NG22(J)=0
      NG23(J)=0
      NG24(J)=0
      NG25(J)=0
      NG26(J)=0
      DO 222 I=1,N4000
      QION1(J,I)=0.00
      QION2(J,I)=0.00
      QION3(J,I)=0.00
      QION4(J,I)=0.00
      QION5(J,I)=0.00
      QION6(J,I)=0.00
  222 CONTINUE
      DO 223 K=1,8
      DO 223 I=1,N4000
      QATT1(K,I)=0.00
      QATT2(K,I)=0.00
      QATT3(K,I)=0.00
      QATT4(K,I)=0.00
      QATT5(K,I)=0.00
      QATT6(K,I)=0.00
  223 CONTINUE
      DO 224 K=1,10
      DO 224 I=1,N4000
      QNUL1(K,I)=0.0
      QNUL2(K,I)=0.0
      QNUL3(K,I)=0.0
      QNUL4(K,I)=0.0
      QNUL5(K,I)=0.0
      QNUL6(K,I)=0.0
  224 CONTINUE
      ESTEP=EFINAL/DFLOAT(NSTEP)
      EHALF=ESTEP/2.00
      E(1)=EHALF
      DO 3 I=2,N4000
      AJ=DFLOAT(I-1)
      E(I)=EHALF+ESTEP*AJ
    3 EROOT(I)=math.sqrt(E(I))
      EROOT(1)=math.sqrt(EHALF)                   
      DO 4 I=1,250
      KIN1(I)=0
      KIN2(I)=0
      KIN3(I)=0
      KIN4(I)=0
      KIN5(I)=0
    4 KIN6(I)=0
      DO 6 I=1,960 
    6 INDEX(I)=0
      DO 7 I=1,8
    7 TCFMAX(I)=0.00      
      DO 225 J=1,60
      DO 225 K=1,N4000
      TCFN(K)=0.00
      CFN(K,J)=0.00
  225 CONTINUE                                         
#                                                                       
#   CALL GAS CROSS-SECTIONS 
      CALL GASMIX(NGASN(1),Q1,QIN1,NIN1,E1,EI1,NAME1,VIRIAL1,EB1,
     /PEQEL1,PEQIN1,PENFRA1,KEL1,KIN1,QION1,PEQION1,EION1,NION1,QATT1,
     /NATT1,QNUL1,NUL1,SCLN1,NC01,EC01,WK1,EFL1,NG11,EG11,NG21,EG21,
     /SCRP1,SCRPN1) 
      IF(NGAS == 1):
 GO TO 10 
      CALL GASMIX(NGASN(2),Q2,QIN2,NIN2,E2,EI2,NAME2,VIRIAL2,EB2,
     /PEQEL2,PEQIN2,PENFRA2,KEL2,KIN2,QION2,PEQION2,EION2,NION2,QATT2,
     /NATT2,QNUL2,NUL2,SCLN2,NC02,EC02,WK2,EFL2,NG12,EG12,NG22,EG22,
     /SCRP2,SCRPN2)
      IF(NGAS == 2):
 GO TO 10 
      CALL GASMIX(NGASN(3),Q3,QIN3,NIN3,E3,EI3,NAME3,VIRIAL3,EB3,
     /PEQEL3,PEQIN3,PENFRA3,KEL3,KIN3,QION3,PEQION3,EION3,NION3,QATT3,
     /NATT3,QNUL3,NUL3,SCLN3,NC03,EC03,WK3,EFL3,NG13,EG13,NG23,EG23,
     /SCRP3,SCRPN3)
      IF(NGAS == 3):
 GO TO 10 
      CALL GASMIX(NGASN(4),Q4,QIN4,NIN4,E4,EI4,NAME4,VIRIAL4,EB4,
     /PEQEL4,PEQIN4,PENFRA4,KEL4,KIN4,QION4,PEQION4,EION4,NION4,QATT4,
     /NATT4,QNUL4,NUL4,SCLN4,NC04,EC04,WK4,EFL4,NG14,EG14,NG24,EG24,
     /SCRP4,SCRPN4)
      IF(NGAS == 4):
 GO TO 10 
      CALL GASMIX(NGASN(5),Q5,QIN5,NIN5,E5,EI5,NAME5,VIRIAL5,EB5,
     /PEQEL5,PEQIN5,PENFRA5,KEL5,KIN5,QION5,PEQION5,EION5,NION5,QATT5,
     /NATT5,QNUL5,NUL5,SCLN5,NC05,EC05,WK5,EFL5,NG15,EG15,NG25,EG25,
     /SCRP5,SCRPN5)
      IF(NGAS == 5):
 GO TO 10 
      CALL GASMIX(NGASN(6),Q6,QIN6,NIN6,E6,EI6,NAME6,VIRIAL6,EB6,
     /PEQEL6,PEQIN6,PENFRA6,KEL6,KIN6,QION6,PEQION6,EION6,NION6,QATT6,
     /NATT6,QNUL6,NUL6,SCLN6,NC06,EC06,WK6,EFL6,NG16,EG16,NG26,EG26,
     /SCRP6,SCRPN6)
   10 CONTINUE                                                          
# ---------------------------------------------------------------       
#  CORRECTION OF NUMBER DENSITY DUE TO VIRIAL COEFFICIENT               
#  CAN BE defMED HERE NOT YET IMPLEMENTED.                          
#-----------------------------------------------------------------
#-----------------------------------------------------------------      
#     CALCULATION OF COLLISION FREQUENCIES FOR AN ARRAY OF              
#     ELECTRON ENERGIES IN THE RANGE ZERO TO EFINAL                     
#                                                                       
#     L=5*N-4    ELASTIC NTH GAS                                      
#     L=5*N-3    IONISATION NTH GAS                                     
#     L=5*N-2    ATTACHMENT NTH GAS                                     
#     L=5*N-1    INELASTIC NTH GAS    
#     L=5*N      SUPERELASTIC NTH GAS                                   
#---------------------------------------------------------------   
      DO 700 IE=1,N4000  
      FCION(IE)=0.00
      FCATT(IE)=0.00
# 
      NP=1                                                              
      CF(IE,NP)=Q1(2,IE)*VAN1
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00    
      INDEX(NP)=0 
#    ELASTIC ANG 
      IF(KEL1(2):
 == 1) :
       PSCT1=PEQEL1(2,IE)
       CALL ANGCUT(PSCT1,ANGC,PSCT2)
       ANGCT(IE,NP)=ANGC
       PSCT(IE,NP)=PSCT2  
       INDEX(NP)=1   
      # endIF
      IF(KEL1(2):
 == 2) :
       PSCT(IE,NP)=PEQEL1(2,IE)
       INDEX(NP)=2
      # endIF
# 
      IF(IE > 1):
 GO TO 12                                   
      RGAS1=1.00+E1(2)/2.00                                           
      RGAS(NP)=RGAS1                                                    
      EIN(NP)=0.00                                                     
      IPN(NP)=0 
      L=1                                                      
      IARRY(NP)=L 
      DSCRPT(NP)=SCRP1(2)  
      NAMEG(1)=NAME1  
      PENFRA[1,NP]=0.0
      PENFRA[2,NP]=0.0
      PENFRA[3,NP]=0.0 
#                                             
   12 IF(EFINAL < E1(3)) GO TO 30   
      IF(NION1 > 1):
 GO TO 20                                   
      NP=NP+1   
      CF(IE,NP)=Q1(3,IE)*VAN1
      FCION(IE)=FCION(IE)+CF(IE,NP) 
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      INDEX(NP)=0
#  
      IF(KEL1(3):
 == 1) :
       PSCT1=PEQEL1(3,IE) 
       CALL ANGCUT(PSCT1,ANGC,PSCT2)
       ANGCT(IE,NP)=ANGC
       PSCT(IE,NP)=PSCT2
       INDEX(NP)=1
      # endIF
      IF(KEL1(3):
 == 2) :
       PSCT(IE,NP)=PEQEL1(3,IE)
       INDEX(NP)=2
      # endIF
#
      IF(IE > 1):
 GO TO 30                                     
      RGAS(NP)=RGAS1                                                    
      EIN(NP)=E1(3)/RGAS1
      WPL(NP)=EB1(1)
      NC0(NP)=NC01(1)
      EC0(NP)=EC01(1)
      NG1(NP)=NG11(1)
      EG1(NP)=EG11(1)
      NG2(NP)=NG21(1)
      EG2(NP)=EG21(1)
      WKLM(NP)=WK1(1)
      EFL(NP)=EFL1(1)                                                
      IPN(NP)=1 
      L=2                                                      
      IARRY(NP)=L 
      DSCRPT(NP)=SCRP1(3)
      PENFRA[1,NP]=0.0
      PENFRA[2,NP]=0.0
      PENFRA[3,NP]=0.0 
      GO TO 30
   20 DO 25 KION=1,NION1
      NP=NP+1
      CF(IE,NP)=QION1(KION,IE)*VAN1
      FCION(IE)=FCION(IE)+CF(IE,NP)
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      INDEX(NP)=0
#
      IF(KEL1(3):
 == 1) :
       PSCT1=PEQION1(KION,IE)
       CALL ANGCUT(PSCT1,ANGC,PSCT2)
       ANGCT(IE,NP)=ANGC
       PSCT(IE,NP)=PSCT2
       INDEX(NP)=1
      # endIF
      IF(KEL1(3):
 == 2) :
       PSCT(IE,NP)=PEQION1(KION,IE)
       INDEX(NP)=2
      # endIF
#
      IF(IE > 1):
 GO TO 25
      RGAS(NP)=RGAS1
      EIN(NP)=EION1(KION)/RGAS1
      WPL(NP)=EB1(KION)
      NC0(NP)=NC01(KION)
      EC0(NP)=EC01(KION)
      NG1(NP)=NG11(KION)
      EG1(NP)=EG11(KION)
      NG2(NP)=NG21(KION)
      EG2(NP)=EG21(KION)
      WKLM(NP)=WK1(KION)
      EFL(NP)=EFL1(KION)
      IPN(NP)=1
      L=2
      IARRY(NP)=L
      DSCRPT(NP)=SCRP1(2+KION)
      PENFRA[1,NP]=0.00
      PENFRA[2,NP]=0.00
      PENFRA[3,NP]=0.00
   25 CONTINUE
   30 IF(EFINAL < E1(4)) GO TO 40   
      IF(NATT1 > 1):
 GO TO 551                                   
      NP=NP+1                                                           
      CF(IE,NP)=Q1(4,IE)*VAN1
      FCATT(IE)=FCATT(IE)+CF(IE,NP) 
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      IF(IE > 1):
 GO TO 40
      INDEX(NP)=0                                     
      RGAS(NP)=RGAS1                                                   
      EIN(NP)=0.00                                                     
      IPN(NP)=-1              
      L=3                                           
      IARRY(NP)=L
      DSCRPT(NP)=SCRP1(3+NION1)
      PENFRA[1,NP]=0.0
      PENFRA[2,NP]=0.0
      PENFRA[3,NP]=0.0
      GO TO 40
 551  DO 552 JJ=1,NATT1
      NP=NP+1
      CF(IE,NP)=QATT1(JJ,IE)*VAN1
      FCATT(IE)=FCATT(IE)+CF(IE,NP)
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      IF(IE > 1):
 GO TO 552
      DSCRPT(NP)=SCRP1(2+NION1+JJ)
      RGAS(NP)=RGAS1
      EIN(NP)=0.00
      IPN(NP)=-1
      INDEX(NP)=0
      L=3
      IARRY(NP)=L
      PENFRA[1,NP]=0.0
      PENFRA[2,NP]=0.0
      PENFRA[3,NP]=0.0
  552 CONTINUE
   40 IF(NIN1 == 0) GO TO 60                                           
      DO 50 J=1,NIN1
      NP=NP+1                                                           
      CF(IE,NP)=QIN1(J,IE)*VAN1
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      INDEX(NP)=0
#
      IF(KIN1(J):
 == 1) :   
       PSCT1=PEQIN1(J,IE)
       CALL ANGCUT(PSCT1,ANGC,PSCT2)
       ANGCT(IE,NP)=ANGC
       PSCT(IE,NP)=PSCT2
       INDEX(NP)=1   
      # endIF
      IF(KIN1(J):
 == 2) :
       PSCT(IE,NP)=PEQIN1(J,IE)
       INDEX(NP)=2
      # endIF
#
      IF(IE > 1):
 GO TO 50                                     
      RGAS(NP)=RGAS1                                                    
      EIN(NP)=EI1(J)/RGAS1
      L=4
      IF(EI1(J):
 < 0.00) L=5                                           
      IPN(NP)=0  
      IARRY(NP)=L
      DSCRPT(NP)=SCRP1(4+NION1+NATT1+J)
      PENFRA[1,NP]=PENFRA1(1,J)
      PENFRA[2,NP]=PENFRA1(2,J)*1.D-16/math.sqrt(3.00)
      PENFRA[3,NP]=PENFRA1(3,J)
   50 CONTINUE                 
#                                       
   60 IF(NGAS == 1) GO TO 600
      NP=NP+1                                                           
      CF(IE,NP)=Q2(2,IE)*VAN2
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      INDEX(NP)=0
#
      IF(KEL2(2):
 == 1) :
       PSCT1=PEQEL2(2,IE)
       CALL ANGCUT(PSCT1,ANGC,PSCT2)
       ANGCT(IE,NP)=ANGC
       PSCT(IE,NP)=PSCT2
       INDEX(NP)=1
      # endIF
      IF(KEL2(2):
 == 2) :
       PSCT(IE,NP)=PEQEL2(2,IE)
       INDEX(NP)=2
      # endIF 
#
      IF(IE > 1):
 GO TO 62                                     
      RGAS2=1.00+E2(2)/2.00                                           
      RGAS(NP)=RGAS2                                                    
      EIN(NP)=0.00                                                     
      IPN(NP)=0
      L=6                                                          
      IARRY(NP)=L      
      DSCRPT(NP)=SCRP2(2)  
      NAMEG(2)=NAME2 
      PENFRA[1,NP]=0.0
      PENFRA[2,NP]=0.0
      PENFRA[3,NP]=0.0        
#                                       
   62 IF(EFINAL < E2(3)) GO TO 130
      IF(NION2 > 1):
 GO TO 70                                     
      NP=NP+1                                                           
      CF(IE,NP)=Q2(3,IE)*VAN2
      FCION(IE)=FCION(IE)+CF(IE,NP)
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      INDEX(NP)=0
#
      IF(KEL2(3):
 == 1) :
       PSCT1=PEQEL2(3,IE)
       CALL ANGCUT(PSCT1,ANGC,PSCT2)
       ANGCT(IE,NP)=ANGC
       PSCT(IE,NP)=PSCT2
       INDEX(NP)=1
      # endIF
      IF(KEL2(3):
 == 2) :
       PSCT(IE,NP)=PEQEL2(3,IE)
       INDEX(NP)=2
      # endIF
#
      IF(IE > 1):
 GO TO 130                                      
      RGAS(NP)=RGAS2                                                    
      EIN(NP)=E2(3)/RGAS2 
      WPL(NP)=EB2(1)
      NC0(NP)=NC02(1)
      EC0(NP)=EC02(1)
      NG1(NP)=NG12(1)
      EG1(NP)=EG12(1)
      NG2(NP)=NG22(1)
      EG2(NP)=EG22(1)
      WKLM(NP)=WK2(1)
      EFL(NP)=EFL2(1)       
      IPN(NP)=1  
      L=7                                                        
      IARRY(NP)=L      
      DSCRPT(NP)=SCRP2(3)
      PENFRA[1,NP]=0.0
      PENFRA[2,NP]=0.0
      PENFRA[3,NP]=0.0       
      GO TO 130
   70 DO 80 KION=1,NION2
      NP=NP+1
      CF(IE,NP)=QION2(KION,IE)*VAN2
      FCION(IE)=FCION(IE)+CF(IE,NP)
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      INDEX(NP)=0
#
      IF(KEL2(3):
 == 1) :
       PSCT1=PEQION2(KION,IE)
       CALL ANGCUT(PSCT1,ANGC,PSCT2)
       ANGCT(IE,NP)=ANGC
       PSCT(IE,NP)=PSCT2
       INDEX(NP)=1
      # endIF
      IF(KEL2(3):
 == 2) :
       PSCT(IE,NP)=PEQION2(KION,IE)
       INDEX(NP)=2
      # endIF       
#
      IF(IE > 1):
 GO TO 80
      RGAS(NP)=RGAS2
      EIN(NP)=EION2(KION)/RGAS2
      WPL(NP)=EB2(KION)
      NC0(NP)=NC02(KION)
      EC0(NP)=EC02(KION)
      NG1(NP)=NG12(KION)
      EG1(NP)=EG12(KION)
      NG2(NP)=NG22(KION)
      EG2(NP)=EG22(KION)
      WKLM(NP)=WK2(KION)
      EFL(NP)=EFL1(KION)
      IPN(NP)=1
      L=7
      IARRY(NP)=L
      DSCRPT(NP)=SCRP2(2+KION)
      PENFRA[1,NP]=0.00
      PENFRA[2,NP]=0.00
      PENFRA[3,NP]=0.00
   80 CONTINUE                      
  130 IF(EFINAL < E2(4)) GO TO 140
      IF(NATT2 > 1):
 GO TO 561                                     
      NP=NP+1                                                           
      CF(IE,NP)=Q2(4,IE)*VAN2
      FCATT(IE)=FCATT(IE)+CF(IE,NP)  
      IF(IE > 1):
 GO TO 140 
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      INDEX(NP)=0                                  
      RGAS(NP)=RGAS2                                                    
      EIN(NP)=0.00                                                     
      IPN(NP)=-1            
      L=8                                              
      IARRY(NP)=L      
      DSCRPT(NP)=SCRP2(3+NION2)  
      PENFRA[1,NP]=0.0
      PENFRA[2,NP]=0.0
      PENFRA[3,NP]=0.0        
      GO TO 140
  561 DO 562 JJ=1,NATT2
      NP=NP+1
      CF(IE,NP)=QATT2(JJ,IE)*VAN2
      FCATT(IE)=FCATT(IE)+CF(IE,NP)
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      IF(IE > 1):
 GO TO 562
      DSCRPT(NP)=SCRP2(2+NION2+JJ)
      RGAS(NP)=RGAS2
      EIN(NP)=0.0
      IPN(NP)=-1
      INDEX(NP)=0
      L=8
      IARRY(NP)=L
      PENFRA[1,NP]=0.0
      PENFRA[2,NP]=0.0
      PENFRA[3,NP]=0.0
  562 CONTINUE                               
  140 IF(NIN2 == 0) GO TO 160                                           
      DO 150 J=1,NIN2
      NP=NP+1                                                           
      CF(IE,NP)=QIN2(J,IE)*VAN2
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      INDEX(NP)=0
#
      IF(KIN2(J):
 == 1) :
       PSCT1=PEQIN2(J,IE)
       CALL ANGCUT(PSCT1,ANGC,PSCT2)
       ANGCT(IE,NP)=ANGC
       PSCT(IE,NP)=PSCT2
       INDEX(NP)=1
      IF(KIN2(J):
 == 2) :
       PSCT(IE,NP)=PEQIN2(J,IE)
       INDEX(NP)=2
      # endIF
#
      # endIF
      IF(IE > 1):
 GO TO 150                                    
      RGAS(NP)=RGAS2                                                    
      EIN(NP)=EI2(J)/RGAS2
      L=9 
      IF(EI2(J):
 < 0.00) L=10                                          
      IPN(NP)=0         
      IARRY(NP)=L
      DSCRPT(NP)=SCRP2(4+NION2+NATT2+J)
      PENFRA[1,NP]=PENFRA2(1,J)
      PENFRA[2,NP]=PENFRA2(2,J)*1.D-6/math.sqrt(3.00)
      PENFRA[3,NP]=PENFRA2(3,J)
  150 CONTINUE                 
#                                       
  160 IF(NGAS == 2) GO TO 600
      NP=NP+1                                                           
      CF(IE,NP)=Q3(2,IE)*VAN3
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      INDEX(NP)=0
#       
      IF(KEL3(2):
 == 1) :
       PSCT1=PEQEL3(2,IE)
       CALL ANGCUT(PSCT1,ANGC,PSCT2)
       ANGCT(IE,NP)=ANGC
       PSCT(IE,NP)=PSCT2
       INDEX(NP)=1
      # endIF 
      IF(KEL3(2):
 == 2) :
       PSCT(IE,NP)=PEQEL3(2,IE)
       INDEX(NP)=2
      # endIF
#
      IF(IE > 1):
 GO TO 162                                     
      RGAS3=1.00+E3(2)/2.00                                           
      RGAS(NP)=RGAS3                                                    
      EIN(NP)=0.00                                                     
      IPN(NP)=0  
      L=11                                                        
      IARRY(NP)=L
      DSCRPT(NP)=SCRP3(2)
      NAMEG(3)=NAME3 
      PENFRA[1,NP]=0.0
      PENFRA[2,NP]=0.0
      PENFRA[3,NP]=0.0               
#                                  
  162 IF(EFINAL < E3(3)) GO TO 230
      IF(NION3 > 1):
 GO TO 170                                     
      NP=NP+1                                                           
      CF(IE,NP)=Q3(3,IE)*VAN3
      FCION(IE)=FCION(IE)+CF(IE,NP)
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      INDEX(NP)=0
#
      IF(KEL3(3):
 == 1) :
       PSCT1=PEQEL3(3,IE)
       CALL ANGCUT(PSCT1,ANGC,PSCT2)
       ANGCT(IE,NP)=ANGC
       PSCT(IE,NP)=PSCT2
       INDEX(NP)=1
      # endIF
      IF(KEL3(3):
 == 2) :
       PSCT(IE,NP)=PEQEL3(3,IE)
       INDEX(NP)=2
      # endIF 
# 
      IF(IE > 1):
 GO TO 230                                            
      RGAS(NP)=RGAS3                                                    
      EIN(NP)=E3(3)/RGAS3 
      WPL(NP)=EB3(1)
      NC0(NP)=NC03(1)
      EC0(NP)=EC03(1)
      NG1(NP)=NG13(1)
      EG1(NP)=EG13(1)
      NG2(NP)=NG23(1)
      EG2(NP)=EG23(1)
      WKLM(NP)=WK3(1)
      EFL(NP)=EFL3(1)       
      IPN(NP)=1
      L=12                                                           
      IARRY(NP)=L
      DSCRPT(NP)=SCRP3(3)
      PENFRA[1,NP]=0.0
      PENFRA[2,NP]=0.0
      PENFRA[3,NP]=0.0        
      GO TO 230
  170 DO 180 KION=1,NION3
      NP=NP+1
      CF(IE,NP)=QION3(KION,IE)*VAN3
      FCION(IE)=FCION(IE)+CF(IE,NP)
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      INDEX(NP)=0
#
      IF(KEL3(3):
 == 1) :
       PSCT1=PEQION3(KION,IE)
       CALL ANGCUT(PSCT1,ANGC,PSCT2)
       ANGCT(IE,NP)=ANGC
       PSCT(IE,NP)=PSCT2
       INDEX(NP)=1
      # endIF
      IF(KEL3(3):
 == 2) :
       PSCT(IE,NP)=PEQION3(KION,IE)
       INDEX(NP)=2
      # endIF       
#
      IF(IE > 1):
 GO TO 180
      RGAS(NP)=RGAS3
      EIN(NP)=EION3(KION)/RGAS3
      WPL(NP)=EB3(KION)
      NC0(NP)=NC03(KION)
      EC0(NP)=EC03(KION)
      NG1(NP)=NG13(KION)
      EG1(NP)=EG13(KION)
      NG2(NP)=NG23(KION)
      EG2(NP)=EG23(KION)
      WKLM(NP)=WK3(KION)
      EFL(NP)=EFL3(KION)
      IPN(NP)=1
      L=12
      IARRY(NP)=L
      DSCRPT(NP)=SCRP3(2+KION)
      PENFRA[1,NP]=0.00
      PENFRA[2,NP]=0.00
      PENFRA[3,NP]=0.00
  180 CONTINUE                                
  230 IF(EFINAL < E3(4)) GO TO 240 
      IF(NATT3 > 1):
 GO TO 571                                    
      NP=NP+1                                                           
      CF(IE,NP)=Q3(4,IE)*VAN3
      FCATT(IE)=FCATT(IE)+CF(IE,NP)
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      IF(IE > 1):
 GO TO 240
      INDEX(NP)=0                                            
      RGAS(NP)=RGAS3                                                    
      EIN(NP)=0.00                                                     
      IPN(NP)=-1 
      L=13                                                        
      IARRY(NP)=L
      DSCRPT(NP)=SCRP3(3+NION3)
      PENFRA[1,NP]=0.0
      PENFRA[2,NP]=0.0
      PENFRA[3,NP]=0.0
      GO TO 240
  571 DO 572 JJ=1,NATT3
      NP=NP+1
      CF(IE,NP)=QATT3(JJ,IE)*VAN3 
      FCATT(IE)=FCATT(IE)+CF(IE,NP)
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      IF(IE > 1):
 GO TO 572
      DSCRPT(NP)=SCRP3(2+NION3+JJ)
      RGAS(NP)=RGAS3
      EIN(NP)=0.00
      IPN(NP)=-1
      INDEX(NP)=0
      L=13
      IARRY(NP)=L
      PENFRA[1,NP]=0.0
      PENFRA[2,NP]=0.0
      PENFRA[3,NP]=0.0        
  572 CONTINUE                            
  240 IF(NIN3 == 0) GO TO 260                                           
      DO 250 J=1,NIN3 
      NP=NP+1                                                           
      CF(IE,NP)=QIN3(J,IE)*VAN3
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      INDEX(NP)=0
#
      IF(KIN3(J):
 == 1) :
       PSCT1=PEQIN3(J,IE)
       CALL ANGCUT(PSCT1,ANGC,PSCT2)
       ANGCT(IE,NP)=ANGC
       PSCT(IE,NP)=PSCT2
       INDEX(NP)=1
      # endIF
      IF(KIN3(J):
 == 2) :
       PSCT(IE,NP)=PEQIN3(J,IE)
       INDEX(NP)=2
      # endIF
#
      IF(IE > 1):
 GO TO 250                                     
      RGAS(NP)=RGAS3                                                    
      EIN(NP)=EI3(J)/RGAS3
      L=14
      IF(EI3(J):
 < 0.00) L=15                                          
      IPN(NP)=0
      IARRY(NP)=L
      DSCRPT(NP)=SCRP3(4+NION3+NATT3+J)  
      PENFRA[1,NP]=PENFRA3(1,J)
      PENFRA[2,NP]=PENFRA3(2,J)*1.D-6/math.sqrt(3.00)
      PENFRA[3,NP]=PENFRA3(3,J)                                   
  250 CONTINUE
#                              
  260 IF(NGAS == 3) GO TO 600  
      NP=NP+1                                                           
      CF(IE,NP)=Q4(2,IE)*VAN4 
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      INDEX(NP)=0
#
      IF(KEL4(2):
 == 1) :
       PSCT1=PEQEL4(2,IE)
       CALL ANGCUT(PSCT1,ANGC,PSCT2)
       ANGCT(IE,NP)=ANGC
       PSCT(IE,NP)=PSCT2
       INDEX(NP)=1  
      # endIF 
      IF(KEL4(2):
 == 2) :
       PSCT(IE,NP)=PEQEL4(2,IE)
       INDEX(NP)=2
      # endIF
#
      IF(IE > 1):
 GO TO 262                                    
      RGAS4=1.00+E4(2)/2.00                                           
      RGAS(NP)=RGAS4                                                    
      EIN(NP)=0.00                                                     
      IPN(NP)=0
      L=16                                                          
      IARRY(NP)=L
      DSCRPT(NP)=SCRP4(2)
      NAMEG(4)=NAME4 
      PENFRA[1,NP]=0.0
      PENFRA[2,NP]=0.0
      PENFRA[3,NP]=0.0        
#                                       
  262 IF(EFINAL < E4(3)) GO TO 330  
      IF(NION4 > 1):
 GO TO 270                                   
      NP=NP+1                                                           
      CF(IE,NP)=Q4(3,IE)*VAN4
      FCION(IE)=FCION(IE)+CF(IE,NP)
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      INDEX(NP)=0  
#
      IF(KEL4(3):
 == 1) :
       PSCT1=PEQEL4(3,IE)
       CALL ANGCUT(PSCT1,ANGC,PSCT2)
       ANGCT(IE,NP)=ANGC
       PSCT(IE,NP)=PSCT2
       INDEX(NP)=1
      # endIF
      IF(KEL4(3):
 == 2) :
       PSCT(IE,NP)=PEQEL4(3,IE)
       INDEX(NP)=2
      # endIF
#
      IF(IE > 1):
 GO TO 330                                     
      RGAS(NP)=RGAS4                                                    
      EIN(NP)=E4(3)/RGAS4 
      WPL(NP)=EB4(1)
      NC0(NP)=NC04(1)
      EC0(NP)=EC04(1)
      NG1(NP)=NG14(1)
      EG1(NP)=EG14(1)
      NG2(NP)=NG24(1)
      EG2(NP)=EG24(1)
      WKLM(NP)=WK4(1)
      EFL(NP)=EFL4(1)                                         
      IPN(NP)=1  
      L=17                                                        
      IARRY(NP)=L
      DSCRPT(NP)=SCRP4(3)
      PENFRA[1,NP]=0.0
      PENFRA[2,NP]=0.0
      PENFRA[3,NP]=0.0        
      GO TO 330
  270 DO 280 KION=1,NION4
      NP=NP+1
      CF(IE,NP)=QION4(KION,IE)*VAN4               
      FCION(IE)=FCION(IE)+CF(IE,NP)
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      INDEX(NP)=0
#
      IF(KEL4(3):
 == 1) :
       PSCT1=PEQION4(KION,IE)
       CALL ANGCUT(PSCT1,ANGC,PSCT2)
       ANGCT(IE,NP)=ANGC
       PSCT(IE,NP)=PSCT2
       INDEX(NP)=1
      # endIF       
      IF(KEL4(3):
 == 2) :
       PSCT(IE,NP)=PEQION4(KION,IE)
       INDEX(NP)=2
      # endIF       
#
      IF(IE > 1):
 GO TO 280
      RGAS(NP)=RGAS4
      EIN(NP)=EION4(KION)/RGAS4
      WPL(NP)=EB4(KION)
      NC0(NP)=NC04(KION)
      EC0(NP)=EC04(KION)
      NG1(NP)=NG14(KION)
      EG1(NP)=EG14(KION)
      NG2(NP)=NG24(KION)
      EG2(NP)=EG24(KION)
      WKLM(NP)=WK4(KION)
      EFL(NP)=EFL4(KION)
      IPN(NP)=1
      L=17
      IARRY(NP)=L
      DSCRPT(NP)=SCRP4(2+KION)
      PENFRA[1,NP]=0.00
      PENFRA[2,NP]=0.00
      PENFRA[3,NP]=0.00
  280 CONTINUE      
  330 IF(EFINAL < E4(4)) GO TO 340     
      IF(NATT4 > 1):
 GO TO 581                               
      NP=NP+1                                                           
      CF(IE,NP)=Q4(4,IE)*VAN4
      FCATT(IE)=FCATT(IE)+CF(IE,NP)
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      IF(IE > 1):
 GO TO 340        
      INDEX(NP)=0                             
      RGAS(NP)=RGAS4                                                    
      EIN(NP)=0.00                                                     
      IPN(NP)=-1 
      L=18                                                        
      IARRY(NP)=L
      DSCRPT(NP)=SCRP4(3+NION4)
      PENFRA[1,NP]=0.0
      PENFRA[2,NP]=0.0
      PENFRA[3,NP]=0.0        
      GO TO 340
  581 DO 582 JJ=1,NATT4
      NP=NP+1
      CF(IE,NP)=QATT4(JJ,IE)*VAN4
      FCATT(IE)=FCATT(IE)+CF(IE,NP)
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      IF(IE > 1):
 GO TO 582
      DSCRPT(NP)=SCRP4(2+NION4+JJ)
      RGAS(NP)=RGAS4
      EIN(NP)=0.00
      IPN(NP)=-1
      INDEX(NP)=0
      L=18
      IARRY(NP)=L
      PENFRA[1,NP]=0.0
      PENFRA[2,NP]=0.0
      PENFRA[3,NP]=0.0
  582 CONTINUE                                       
  340 IF(NIN4 == 0) GO TO 360                                           
      DO 350 J=1,NIN4 
      NP=NP+1
      CF(IE,NP)=QIN4(J,IE)*VAN4
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      INDEX(NP)=0
#
      IF(KIN4(J):
 == 1) :
       PSCT1=PEQIN4(J,IE)
       CALL ANGCUT(PSCT1,ANGC,PSCT2)
       ANGCT(IE,NP)=ANGC
       PSCT(IE,NP)=PSCT2
       INDEX(NP)=1
      # endIF
      IF(KIN4(J):
 == 2) :
       PSCT(IE,NP)=PEQIN4(J,IE)
       INDEX(NP)=2
      # endIF
#
      IF(IE > 1):
 GO TO 350        
      RGAS(NP)=RGAS4                                                    
      EIN(NP)=EI4(J)/RGAS4
      L=19
      IF(EI4(J):
 < 0.00) L=20                                          
      IPN(NP)=0         
      IARRY(NP)=L
      DSCRPT(NP)=SCRP4(4+NION4+NATT4+J)
      PENFRA[1,NP]=PENFRA4(1,J)
      PENFRA[2,NP]=PENFRA4(2,J)*1.D-6/math.sqrt(3.00)
      PENFRA[3,NP]=PENFRA4(3,J)
  350 CONTINUE   
#                                                     
  360 IF(NGAS == 4) GO TO 600  
      NP=NP+1                                                           
      CF(IE,NP)=Q5(2,IE)*VAN5 
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      INDEX(NP)=0
#
      IF(KEL5(2):
 == 1) : 
       PSCT1=PEQEL5(2,IE)
       CALL ANGCUT(PSCT1,ANGC,PSCT2)
       ANGCT(IE,NP)=ANGC
       PSCT(IE,NP)=PSCT2
       INDEX(NP)=1
      # endIF 
      IF(KEL5(2):
 == 2) :
       PSCT(IE,NP)=PEQEL5(2,IE)
       INDEX(NP)=2
      # endIF
#
      IF(IE > 1):
 GO TO 362                                    
      RGAS5=1.00+E5(2)/2.00                                           
      RGAS(NP)=RGAS5                                                    
      EIN(NP)=0.00                                                     
      IPN(NP)=0
      L=21                                                          
      IARRY(NP)=L
      DSCRPT(NP)=SCRP5(2) 
      NAMEG(5)=NAME5  
      PENFRA[1,NP]=0.0
      PENFRA[2,NP]=0.0
      PENFRA[3,NP]=0.0        
#                                          
  362 IF(EFINAL < E5(3)) GO TO 430   
      IF(NION5 > 1):
 GO TO 370                                  
      NP=NP+1                                                           
      CF(IE,NP)=Q5(3,IE)*VAN5
      FCION(IE)=FCION(IE)+CF(IE,NP)
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      INDEX(NP)=0 
#
      IF(KEL5(3):
 == 1) :
       PSCT1=PEQEL5(3,IE)
       CALL ANGCUT(PSCT1,ANGC,PSCT2)
       ANGCT(IE,NP)=ANGC
       PSCT(IE,NP)=PSCT2
       INDEX(NP)=1
      # endIF 
      IF(KEL5(3):
 == 2) :
       PSCT(IE,NP)=PEQEL5(3,IE)
       INDEX(NP)=2
      # endIF
#     
      IF(IE > 1):
 GO TO 430                                    
      RGAS(NP)=RGAS5                                                    
      EIN(NP)=E5(3)/RGAS5 
      WPL(NP)=EB5(1)
      NC0(NP)=NC05(1)
      EC0(NP)=EC05(1)
      NG1(NP)=NG15(1)
      EG1(NP)=EG15(1)
      NG2(NP)=NG25(1)
      EG2(NP)=EG25(1)
      WKLM(NP)=WK5(1)
      EFL(NP)=EFL5(1)       
      IPN(NP)=1
      L=22                                                          
      IARRY(NP)=L
      DSCRPT(NP)=SCRP5(3)  
      PENFRA[1,NP]=0.0
      PENFRA[2,NP]=0.0
      PENFRA[3,NP]=0.0           
      GO TO 430
  370 DO 380 KION=1,NION5
      NP=NP+1
      CF(IE,NP)=QION5(KION,IE)*VAN5
      FCION(IE)=FCION(IE)+CF(IE,NP)
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      INDEX(NP)=0
#
      IF(KEL5(3):
 == 1) :
       PSCT1=PEQION5(KION,IE)
       CALL ANGCUT(PSCT1,ANGC,PSCT2)
       ANGCT(IE,NP)=ANGC
       PSCT(IE,NP)=PSCT2
       INDEX(NP)=1
      # endIF   
      IF(KEL5(3):
 == 2) :
       PSCT(IE,NP)=PEQION5(KION,IE)
       INDEX(NP)=2
      # endIF       
#
      IF(IE > 1):
 GO TO 380
      RGAS(NP)=RGAS5
      EIN(NP)=EION5(KION)/RGAS5
      WPL(NP)=EB5(KION)
      NC0(NP)=NC05(KION)
      EC0(NP)=EC05(KION)
      NG1(NP)=NG15(KION)
      EG1(NP)=EG15(KION)
      NG2(NP)=NG25(KION)
      EG2(NP)=EG25(KION)
      WKLM(NP)=WK5(KION)
      EFL(NP)=EFL5(KION)
      IPN(NP)=1
      L=22
      IARRY(NP)=L
      DSCRPT(NP)=SCRP5(2+KION)
      PENFRA[1,NP]=0.00
      PENFRA[2,NP]=0.00
      PENFRA[3,NP]=0.00
  380 CONTINUE                        
  430 IF(EFINAL < E5(4)) GO TO 440
      IF(NATT5 > 1):
 GO TO 591                                     
      NP=NP+1                                                           
      CF(IE,NP)=Q5(4,IE)*VAN5
      FCATT(IE)=FCATT(IE)+CF(IE,NP)
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      IF(IE > 1):
 GO TO 440
      INDEX(NP)=0                                     
      RGAS(NP)=RGAS5                                                    
      EIN(NP)=0.00                                                     
      IPN(NP)=-1             
      L=23                                            
      IARRY(NP)=L
      DSCRPT(NP)=SCRP5(3+NION5)  
      PENFRA[1,NP]=0.0
      PENFRA[2,NP]=0.0
      PENFRA[3,NP]=0.0        
      GO TO 440
  591 DO 592 JJ=1,NATT5
      NP=NP+1
      CF(IE,NP)=QATT5(JJ,IE)*VAN5
      FCATT(IE)=FCATT(IE)+CF(IE,NP)
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      IF(IE > 1):
 GO TO 592
      DSCRPT(NP)=SCRP5(2+NION5+JJ)
      RGAS(NP)=RGAS5
      EIN(NP)=0.00
      IPN(NP)=-1
      INDEX(NP)=0
      L=23
      IARRY(NP)=L
      PENFRA[1,NP]=0.0
      PENFRA[2,NP]=0.0
      PENFRA[3,NP]=0.0
  592 CONTINUE                        
  440 IF(NIN5 == 0) GO TO 460                                           
      DO 450 J=1,NIN5 
      NP=NP+1                                                           
      CF(IE,NP)=QIN5(J,IE)*VAN5 
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      INDEX(NP)=0
#
      IF(KIN5(J):
 == 1) :
       PSCT1=PEQIN5(J,IE)
       CALL ANGCUT(PSCT1,ANGC,PSCT2)
       ANGCT(IE,NP)=ANGC
       PSCT(IE,NP)=PSCT2
       INDEX(NP)=1
      # endIF
      IF(KIN5(J):
 == 2) :
       PSCT(IE,NP)=PEQIN5(J,IE)
       INDEX(NP)=2
      # endIF   
#       
      IF(IE > 1):
 GO TO 450
      RGAS(NP)=RGAS5                                                    
      EIN(NP)=EI5(J)/RGAS5
      L=24
      IF(EI5(J):
 < 0.00) L=25                                          
      IPN(NP)=0         
      IARRY(NP)=L
      DSCRPT(NP)=SCRP5(4+NION5+NATT5+J)
      PENFRA[1,NP]=PENFRA5(1,J)
      PENFRA[2,NP]=PENFRA5(2,J)*1.D-6/math.sqrt(3.00)
      PENFRA[3,NP]=PENFRA5(3,J)
  450 CONTINUE                 
#                                       
  460 IF(NGAS == 5) GO TO 600  
      NP=NP+1                                                           
      CF(IE,NP)=Q6(2,IE)*VAN6
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      INDEX(NP)=0 
#
      IF(KEL6(2):
 == 1) :
       PSCT1=PEQEL6(2,IE)
       CALL ANGCUT(PSCT1,ANGC,PSCT2)
       ANGCT(IE,NP)=ANGC
       PSCT(IE,NP)=PSCT2
       INDEX(NP)=1
      # endIF
      IF(KEL6(2):
 == 2) :
       PSCT(IE,NP)=PEQEL6(2,IE)
       INDEX(NP)=2
      # endIF
#  
      IF(IE > 1):
 GO TO 462                                    
      RGAS6=1.00+E6(2)/2.00                                           
      RGAS(NP)=RGAS6                                                    
      EIN(NP)=0.00                                                     
      IPN(NP)=0
      L=26                                                          
      IARRY(NP)=L  
      DSCRPT(NP)=SCRP6(2) 
      NAMEG(6)=NAME6
      PENFRA[1,NP]=0.0
      PENFRA[2,NP]=0.0
      PENFRA[3,NP]=0.0        
#                                    
  462 IF(EFINAL < E6(3)) GO TO 530   
      IF(NION6 > 1):
 GO TO 470                                  
      NP=NP+1                                                           
      CF(IE,NP)=Q6(3,IE)*VAN6
      FCION(IE)=FCION(IE)+CF(IE,NP)
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      INDEX(NP)=0
#
      IF(KEL6(3):
 == 1) :
       PSCT1=PEQEL6(3,IE)
       CALL ANGCUT(PSCT1,ANGC,PSCT2)
       ANGCT(IE,NP)=ANGC
       PSCT(IE,NP)=PSCT2
       INDEX(NP)=1      
      # endIF
      IF(KEL6(3):
 == 2) : 
       PSCT(IE,NP)=PEQEL6(3,IE)
       INDEX(NP)=2
      # endIF
#
      IF(IE > 1):
 GO TO 530                                     
      RGAS(NP)=RGAS6                                                    
      EIN(NP)=E6(3)/RGAS6 
      WPL(NP)=EB6(1)
      NC0(NP)=NC06(1)
      EC0(NP)=EC06(1)
      NG1(NP)=NG16(1)
      EG1(NP)=EG16(1)
      NG2(NP)=NG26(1)
      EG2(NP)=EG26(1)
      WKLM(NP)=WK6(1)
      EFL(NP)=EFL6(1)                                        
      IPN(NP)=1             
      L=27                                             
      IARRY(NP)=L  
      DSCRPT(NP)=SCRP6(3)  
      PENFRA[1,NP]=0.0
      PENFRA[2,NP]=0.0
      PENFRA[3,NP]=0.0        
      GO TO 530
  470 DO 480 KION=1,NION6 
      NP=NP+1
      CF(IE,NP)=QION6(KION,IE)*VAN6
      FCION(IE)=FCION(IE)+CF(IE,NP)
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      INDEX(NP)=0
#
      IF(KEL6(3):
 == 1) :
       PSCT1=PEQION6(KION,IE)
       CALL ANGCUT(PSCT1,ANGC,PSCT2)
       ANGCT(IE,NP)=ANGC
       PSCT(IE,NP)=PSCT2
       INDEX(NP)=1
      # endIF       
      IF(KEL6(3):
 == 2) :
       PSCT(IE,NP)=PEQION6(KION,IE)
       INDEX(NP)=2
      # endIF       
#
      IF(IE > 1):
 GO TO 480
      RGAS(NP)=RGAS6
      EIN(NP)=EION6(KION)/RGAS6
      WPL(NP)=EB6(KION)
      NC0(NP)=NC06(KION)
      EC0(NP)=EC06(KION)
      NG1(NP)=NG16(KION)
      EG1(NP)=EG16(KION)
      NG2(NP)=NG26(KION)
      EG2(NP)=EG26(KION)
      WKLM(NP)=WK6(KION)
      EFL(NP)=EFL6(KION)
      IPN(NP)=1
      L=27
      IARRY(NP)=L
      DSCRPT(NP)=SCRP6(2+KION)
      PENFRA[1,NP]=0.00
      PENFRA[2,NP]=0.00
      PENFRA[3,NP]=0.00
  480 CONTINUE                      
  530 IF(EFINAL < E6(4)) GO TO 540  
      IF(NATT6 > 1):
 GO TO 601                                   
      NP=NP+1                                                           
      CF(IE,NP)=Q6(4,IE)*VAN6 
      FCATT(IE)=FCATT(IE)+CF(IE,NP)
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      IF(IE > 1):
 GO TO 540        
      INDEX(NP)=0                            
      RGAS(NP)=RGAS6                                                    
      EIN(NP)=0.00                                                     
      IPN(NP)=-1
      L=28                                                          
      IARRY(NP)=L  
      DSCRPT(NP)=SCRP6(3+NION6)
      PENFRA[1,NP]=0.0
      PENFRA[2,NP]=0.0
      PENFRA[3,NP]=0.0       
      GO TO 540
  601 DO 602 JJ=1,NATT6
      NP=NP+1
      CF(IE,NP)=QATT6(JJ,IE)*VAN6
      FCATT(IE)=FCATT(IE)+CF(IE,NP)
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      IF(IE > 1):
 GO TO 602
      DSCRPT(NP)=SCRP6(2+NION6+JJ)
      RGAS(NP)=RGAS6
      EIN(NP)=0.00
      IPN(NP)=-1
      INDEX(NP)=0
      L=28
      IARRY(NP)=L
      PENFRA[1,NP]=0.0
      PENFRA[2,NP]=0.0
      PENFRA[3,NP]=0.0
  602 CONTINUE                                        
  540 IF(NIN6 == 0) GO TO 560                                           
      DO 550 J=1,NIN6 
      NP=NP+1                                                           
      CF(IE,NP)=QIN6(J,IE)*VAN6
      PSCT(IE,NP)=0.50
      ANGCT(IE,NP)=1.00
      INDEX(NP)=0 
#
      IF(KIN6(J):
 == 1) :
       PSCT1=PEQIN6(J,IE)
       CALL ANGCUT(PSCT1,ANGC,PSCT2)
       ANGCT(IE,NP)=ANGC
       PSCT(IE,NP)=PSCT2
       INDEX(NP)=1
      # endIF
      IF(KIN6(J):
 == 2) :
       PSCT(IE,NP)=PEQIN6(J,IE)
       INDEX(NP)=2
      # endIF
#
      IF(IE > 1):
 GO TO 550          
      RGAS(NP)=RGAS6                                                    
      EIN(NP)=EI6(J)/RGAS6
      L=29
      IF(EI6(J):
 < 0.00) L=30                                          
      IPN(NP)=0         
      IARRY(NP)=L  
      DSCRPT(NP)=SCRP6(4+NION6+NATT6+J) 
      PENFRA[1,NP]=PENFRA6(1,J)
      PENFRA[2,NP]=PENFRA6(2,J)*1.D-6/math.sqrt(3.00)
      PENFRA[3,NP]=PENFRA6(3,J)
  550 CONTINUE                                                     
  560 CONTINUE     
#                                                                       
  600 CONTINUE   
      IPLAST=NP 
      ISIZE=1
      IF(IPLAST >= 2):
   ISIZE=2   
      IF(IPLAST >= 4):
   ISIZE=4
      IF(IPLAST >= 8):
   ISIZE=8
      IF(IPLAST >= 16):
  ISIZE=16  
      IF(IPLAST >= 32):
  ISIZE=32
      IF(IPLAST >= 64):
  ISIZE=64
      IF(IPLAST >= 128):
 ISIZE=128
      IF(IPLAST >= 256):
 ISIZE=256
      IF(IPLAST >= 512):
 ISIZE=512
      IF(IPLAST >= 1024):
ISIZE=1024          
# ----------------------------------------------------------------      
#   CAN INCREASE ARRAY SIZE UP TO 1740 IF MORE COMPLEX MIXTURES USED.
#   1740 = 6 * 290 ( 6 = MAX NO OF GASES. 290 = MAX NO OF LEVELS )    
# ------------------------------------------------------------------    
      IF(IPLAST > 960):
 WRITE(6,992)                                    
  992 FORMAT(/,/,6X,'WARNING TOO MANY LEVELS IN CALCULATION. CAN INCREAS
     /E THE ARRAY SIZES FROM 960 UP TO 1740 MAXIMUM',/)                 
      IF(IPLAST > 960):
 STOP                                            
# --------------------------------------------------------------------  
#     CALCULATION OF TOTAL COLLISION FREQUENCY                          
# --------------------------------------------------------------------- 
      TCF(IE)=0.00                                                     
      DO 610 IF=1,IPLAST                                                
      TCF(IE)=TCF(IE)+CF(IE,IF)
      IF(CF(IE,IF):
 < 0.00) WRITE(6,776) CF(IE,IF),IE,IF,IARRY(IF),EIN
     /(IF) 
  776 FORMAT(' WARNING NEGATIVE COLLISION FREQUENCY =',D12.3,' IE =',I6,
     /' IF =',I3,' IARRY=',I5,' EIN=',F7.4)                             
 610  CONTINUE                                                          
      DO 620 IF=1,IPLAST                                                
      IF(TCF(IE):
 == 0.00) GO TO 615                                    
      CF(IE,IF)=CF(IE,IF)/TCF(IE)                                       
      GO TO 620                                                         
 615  CF(IE,IF)=0.00                                                   
 620  CONTINUE                                                          
      DO 630 IF=2,IPLAST                                                
      CF(IE,IF)=CF(IE,IF)+CF(IE,IF-1)                                   
 630  CONTINUE                   
      FCATT(IE)=FCATT(IE)*EROOT(IE)
      FCION(IE)=FCION(IE)*EROOT(IE)                                     
      TCF(IE)=TCF(IE)*EROOT(IE)
# CALCULATION OF NULL COLLISION FREQUENCIES
      NP=0
      NPLAST=0
      IF((NUL1+NUL2+NUL3+NUL4+NUL5+NUL6):
 == 0) GO TO 699
      IF(NUL1 > 0):
 :
       DO 631 J=1,NUL1
       NP=NP+1
       SCLENUL(NP)=SCLN1(J)
       DSCRPTN(NP)=SCRPN1(J)
  631  CFN(IE,NP)=QNUL1(J,IE)*VAN1*SCLENUL(NP)
      # endIF      
      IF(NUL2 > 0):
 :
       DO 632 J=1,NUL2
       NP=NP+1
       SCLENUL(NP)=SCLN2(J)
       DSCRPTN(NP)=SCRPN2(J)
  632  CFN(IE,NP)=QNUL2(J,IE)*VAN2*SCLENUL(NP)
      # endIF      
      IF(NUL3 > 0):
 :
       DO 633 J=1,NUL3
       NP=NP+1
       SCLENUL(NP)=SCLN3(J)
       DSCRPTN(NP)=SCRPN3(J)
  633  CFN(IE,NP)=QNUL3(J,IE)*VAN3*SCLENUL(NP)
      # endIF      
      IF(NUL4 > 0):
 :
       DO 634 J=1,NUL4
       NP=NP+1
       SCLENUL(NP)=SCLN4(J)
       DSCRPTN(NP)=SCRPN4(J)
  634  CFN(IE,NP)=QNUL4(J,IE)*VAN4*SCLENUL(NP)
      # endIF 
      IF(NUL5 > 0):
 :
       DO 635 J=1,NUL5
       NP=NP+1
       SCLENUL(NP)=SCLN5(J)
       DSCRPTN(NP)=SCRPN5(J)
  635  CFN(IE,NP)=QNUL5(J,IE)*VAN5*SCLENUL(NP)
      # endIF 
      IF(NUL6 > 0):
 :
       DO 636 J=1,NUL6
       NP=NP+1
       SCLENUL(NP)=SCLN6(J)
       DSCRPTN(NP)=SCRPN6(J)
  636  CFN(IE,NP)=QNUL6(J,IE)*VAN6*SCLENUL(NP) 
      # endIF 
      NPLAST=NP
# SUM NULL COLLISIONS 
      TCFN(IE)=0.0
      DO 640 IF=1,NPLAST
      TCFN(IE)=TCFN(IE)+CFN(IE,IF) 
      IF(CFN(IE,IF):
 < 0.00) WRITE(6,779) CFN(IE,IF),IE,IF
  779 FORMAT(' WARNING NEGATIVE NULL COLLISION FREQUENCY =',D12.3,
     /' IE =',I6,' IF =',I3)                             
  640 CONTINUE
      DO 642 IF=1,NPLAST
      IF(TCFN(IE):
 == 0.00) GO TO 641 
      CFN(IE,IF)=CFN(IE,IF)/TCFN(IE)
      GO TO 642
  641 CFN(IE,IF)=0.00
  642 CONTINUE
      IF(NPLAST == 1):
 GO TO 699
      DO 643 IF=2,NPLAST
      CFN(IE,IF)=CFN(IE,IF)+CFN(IE,IF-1)
  643 CONTINUE
      TCFN(IE)=TCFN(IE)*EROOT(IE)
  699 CONTINUE
 700  CONTINUE 
#     WRITE(6,841) (INDEX(J),J, J=1,IPLAST)
# 841 FORMAT(2X,' INDEX=',I3,' J=',I3)                                  
#  SET ANISOTROPIC FLAG IF ANISOTROPIC SCATTERING DATA IS DETECTED
      KELSUM=0
      DO 701 J=1,6
 701  KELSUM=KELSUM+KEL1(J)+KEL2(J)+KEL3(J)+KEL4(J)+KEL5(J)+KEL6(J)
      DO 702 J=1,250
 702  KELSUM=KELSUM+KIN1(J)+KIN2(J)+KIN3(J)+KIN4(J)+KIN5(J)+KIN6(J)
      IF(KELSUM > 0):
 NISO=1  
#     IF(NISO == 1) WRITE(6,7765) NISO
#7765 FORMAT(3X,' ANISOTROPIC SCATTERING DETECTED NISO=',I5)            
# -------------------------------------------------------------------   
#   CALCULATE NULL COLLISION FREQUENCY                                  
# -------------------------------------------------------------------   
      BP=EFIELD*EFIELD*CONST1                                           
      F2=EFIELD*CONST3                                                  
      ELOW=TMAX*(TMAX*BP-F2*math.sqrt(0.50*EFINAL))/ESTEP-1.00            
      ELOW=DMIN1(ELOW,SMALL)                                            
      EHI=TMAX*(TMAX*BP+F2*math.sqrt(0.50*EFINAL))/ESTEP+1.00
      IF(EHI > 10000.0):
 EHI=10000.0 
      DO 810 I=1,8                                                      
      JLOW=4000-500*(9-I)+1+DINT(ELOW)                                  
      JHI=4000-500*(8-I)+DINT(EHI)
      JLOW=DMAX0(JLOW,NONE)                                           
      JHI=DMIN0(JHI,N4000)
      DO 800 J=JLOW,JHI
      IF((TCF(J):
+TCFN(J)+abs(FAKEI)) >= TCFMAX(I)) TCFMAX(I)=TCF(J)+
     /TCFN(J)+abs(FAKEI)        
  800 CONTINUE                                                          
  810 CONTINUE                                                          
# -------------------------------------------------------------------   
#   CROSS SECTION DATA FOR INTEGRALS IN  OUTPUT               
# --------------------------------------------------------------------- 
      DO 900 I=1,NSTEP                                               
      QTOT(I)=AN1*Q1(1,I)+AN2*Q2(1,I)+AN3*Q3(1,I)+AN4*Q4(1,I)+
     /AN5*Q5(1,I)+AN6*Q6(1,I)            
      QEL(I)=AN1*Q1(2,I)+AN2*Q2(2,I)+AN3*Q3(2,I)+AN4*Q4(2,I)+
     /AN5*Q5(2,I)+AN6*Q6(2,I)             
#                                                                       
      QION(1,I)=Q1(3,I)*AN1 
      IF(NION1 > 1):
 :
       QION(1,I)=0.00
       DO 811 KION=1,NION1
  811  QION(1,I)=QION(1,I)+QION1(KION,I)*AN1
      # endIF                                            
      QION(2,I)=Q2(3,I)*AN2                                             
      IF(NION2 > 1):
 :
       QION(2,I)=0.00
       DO 812 KION=1,NION2
  812  QION(2,I)=QION(2,I)+QION2(KION,I)*AN2
      # endIF                                            
      QION(3,I)=Q3(3,I)*AN3                                             
      IF(NION3 > 1):
 :
       QION(3,I)=0.00
       DO 813 KION=1,NION3
  813  QION(3,I)=QION(3,I)+QION3(KION,I)*AN3
      # endIF                                            
      QION(4,I)=Q4(3,I)*AN4
      IF(NION1 > 1):
 :
       QION(4,I)=0.00
       DO 814 KION=1,NION4
  814  QION(4,I)=QION(4,I)+QION4(KION,I)*AN4
      # endIF                                            
      QION(5,I)=Q5(3,I)*AN5
      IF(NION5 > 1):
 :
       QION(5,I)=0.00
       DO 815 KION=1,NION5
  815  QION(5,I)=QION(5,I)+QION5(KION,I)*AN5
      # endIF                                            
      QION(6,I)=Q6(3,I)*AN6                                             
      IF(NION6 > 1):
 :
       QION(6,I)=0.00
       DO 816 KION=1,NION6
  816  QION(6,I)=QION(6,I)+QION6(KION,I)*AN6
      # endIF                                            
      QATT(1,I)=Q1(4,I)*AN1                                             
      QATT(2,I)=Q2(4,I)*AN2                                             
      QATT(3,I)=Q3(4,I)*AN3                                             
      QATT(4,I)=Q4(4,I)*AN4
      QATT(5,I)=Q5(4,I)*AN5
      QATT(6,I)=Q6(4,I)*AN6                                             
#                                                                       
  850 QREL(I)=0.00                                                     
      QSATT(I)=0.00                                                    
      QSUM(I)=0.00                                                     
      DO 855 J=1,NGAS                                                   
      QSUM(I)=QSUM(I)+QION(J,I)+QATT(J,I)                               
      QSATT(I)=QSATT(I)+QATT(J,I)                                       
  855 QREL(I)=QREL(I)+QION(J,I)-QATT(J,I)                               
#                                                                       
      IF(NIN1 == 0):
 GO TO 865                                           
      DO 860 J=1,NIN1                                                   
  860 QSUM(I)=QSUM(I)+QIN1(J,I)*AN1                                     
  865 IF(NIN2 == 0) GO TO 875                                           
      DO 870 J=1,NIN2                                                   
  870 QSUM(I)=QSUM(I)+QIN2(J,I)*AN2                                     
  875 IF(NIN3 == 0) GO TO 885                                           
      DO 880 J=1,NIN3                                                   
  880 QSUM(I)=QSUM(I)+QIN3(J,I)*AN3                                     
  885 IF(NIN4 == 0) GO TO 895                                           
      DO 890 J=1,NIN4                                                   
  890 QSUM(I)=QSUM(I)+QIN4(J,I)*AN4                                     
  895 IF(NIN5 == 0) GO TO 898 
      DO 896 J=1,NIN5
  896 QSUM(I)=QSUM(I)+QIN5(J,I)*AN5
  898 IF(NIN6 == 0) GO TO 900
      DO 899 J=1,NIN6
  899 QSUM(I)=QSUM(I)+QIN6(J,I)*AN6                                     
#                                                                       
 900  CONTINUE                                                          
#                                                                       
      RETURN                                                            
      # end 
      def SETUP(LAST):                                            
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
      COMMON/RATIO/AN1,AN2,AN3,AN4,AN5,AN6,AN,FRAC(6)               
      COMMON/GASN/NGASN(6)                                 
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX
      COMMON/VEL/WX,WY,WZ
      COMMON/VELERR/DWX,DWY,DWZ
      COMMON/CTOWNS/ALPHA,ATT
      COMMON/CTWNER/ALPER,ATTER
      COMMON/DIFVEL/DIFLN,DIFTR
      COMMON/DIFERL/DFLER,DFTER
      COMMON/DIFLAB/DIFXX,DIFYY,DIFZZ,DIFYZ,DIFXY,DIFXZ
      COMMON/DIFERB/DXXER,DYYER,DZZER,DYZER,DXYER,DXZER
      COMMON/BFLD/EOVB,WB,BTHETA,BMAG 
      COMMON/MRATIO/VAN1,VAN2,VAN3,VAN4,VAN5,VAN6,VAN
      COMMON/TTRM/ZTOT,TTOT,ZTOTS,TTOTS                             
      COMMON/OUTPT/TIME(300),ICOLL(30),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(960),ICOLNN(60)
      COMMON/DECOR/NCOLM,NCORLN,NCORST
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9] 
      COMMON/DENS/DENSY(4000)
#                                                                       
#   NEW UPDATE OF CONSTANTS 2010
#
      API=DACOS(-1.00)                                                 
      ARY=13.60569253                                                  
      PIR2=8.7973554297D-17                                             
      ECHARG=1.602176565D-19                                            
      EMASS=9.10938291D-31                                              
      AMU=1.660538921D-27                                               
      BOLTZ=8.6173324D-5       
      BOLTZJ=1.3806488D-23                                              
      AWB=1.758820088D10                                                
      ALOSCH=2.6867805D19                                               
      EOVM=math.sqrt(2.00*ECHARG/EMASS)*100.00                            
      ABZERO=273.150                                                   
      ATMOS=760.00                                                     
      CONST1=AWB/2.00*1.0D-19                                          
      CONST2=CONST1*1.0D-02                                             
      CONST3=math.sqrt(0.20*AWB)*1.0D-09                                   
      CONST4=CONST3*ALOSCH*1.0D-15                                      
      CONST5=CONST3/2.00
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# FIX ELASTIC ANGULAR DISTRIBUTIONS TO OKHRIMVOSKKY TYPE
      NANISO=2
# FIX ELASTIC ANGULAR DISTRIBUTIONS TO CAPITELLI LONGO TYPE
#     NANISO=1
# FIX ELASTIC ANGULAR DISTRIBUTIONS TO ISOTROPIC SCATTERING
#     NANISO=0
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#  --------------------------------------------                
#                                                                       
#   CHECK INPUT
#     IF(NGAS == 1 and IPEN == 1) :
#     WRITE(6,992) 
# 992 FORMAT(' def STOPPED IT IS NOT POSSIBLE TO HAVE PENNING TRANSF
#    /ERS IN PURE GASES.',/,' ONLY MIXTURES ALLOWED WITH IPEN=1')
#     STOP
#     # endIF
#
      CORR=ABZERO*TORR/(ATMOS*(ABZERO+TEMPC)*100.00)                   
# SET DECORRELATION STEP AND LENGTH
      NCOLM=400000
      NCORLN=50000
      NCORST=4
#
# SET LARGE DECORRELATION LENGTH AND SETP FOR PURE OR ALMOST PURE
# ARGON KRYPTON AND XENON
      MXEKR=0
      DO 55 IH=1,NGAS
      IF(NGASN(IH):
 == 2 or NGASN(IH) == 6 or NGASN(IH) == 7) MXEKR=IH
# IF HIGH EFIELD REDUCE DECORRELATION LENGTH
      IF(EFIELD > (10./CORR):
) MXEKR=0
   55 CONTINUE
      IF(MXEKR != 0):
 :
       IF(NGAS == 1):
 :
        NCOLM=2000000
        NCORLN=500000
        NCORST=2 
       else:
        IF(FRAC(MXEKR):
 > 90.0) :
         NCOLM=2000000
         NCORLN=500000
         NCORST=2
        # endIF
       # endIF     
      # endIF
      TOTFRAC=0.00
      IF(NGAS == 0 or NGAS > 6):
 GO TO 999
      DO 10 J=1,NGAS
      IF(NGASN(J):
 == 0 or FRAC(J) == 0.00) GO TO 999
   10 TOTFRAC=TOTFRAC+FRAC(J)
      IF(abs(TOTFRAC-100.00):
 > 1.D-6) GO TO 999
      LAST=0
      TMAX=100.00                                                      
      NSCALE=40000000
      NMAX=NMAX*NSCALE 
      IF(NMAX < 0):
 :
       WRITE(6,91) 
   91  FORMAT(2(/),' ERROR IN INPUT : NMAX TOO LARGE OVERFLOWED THE ALLO
     /WED #integer RANGE OF THE COMPUTER OR COMPILER')     
       LAST=1
       RETURN
      # endIF                                                         
      NSTEP=4000                                                        
      THETA=0.7850                                                     
      PHI=0.10  
# ZERO COMMON BLOCKS OF OUTPUT RESULTS
      WX=0.00
      WY=0.00
      WZ=0.00
      DWX=0.00
      DWY=0.00
      DWZ=0.00
      TTOTS=0.00
      ALPHA=0.00
      ATT=0.00
      ALPER=0.00
      ATTER=0.00 
      DIFLN=0.00
      DIFTR=0.00
      DFLER=0.00
      DFTER=0.00
      DIFXX=0.00
      DIFYY=0.00
      DIFZZ=0.00
      DIFYZ=0.00
      DIFXY=0.00
      DIFXZ=0.00
      DXXER=0.00
      DYYER=0.00
      DZZER=0.00
      DYZER=0.00
      DXYER=0.00
      DXZER=0.00
      IFAKE=0:
      FAKEI=0.00
      DO 65 J=1,300                                                     
   65 TIME(J)=0.00                                                     
      DO 70 K=1,30                                                      
   70 ICOLL(K)=0  
      DO 80 K=1,960
   80 ICOLN(K)=0   
      DO 81 K=1,60
   81 ICOLNN(K)=0                                                     
      DO 100 K=1,4000      
      DENSY(K)=0.00                                             
  100 SPEC(K)=0.00                                                     
# ---------------------------------------------  
# CAN SET RANDOM NUMBER SEED TO SEED VALUE HERE
#                                                               
      RSTART=0.6660
#    RANDOM NUMBER SEED def (RSTART)      
#-----------------------------------------------      
      ESTART=EFINAL/50.00
      CORR=ABZERO*TORR/(ATMOS*(ABZERO+TEMPC)*100.00)                   
      AKT=(ABZERO+TEMPC)*BOLTZ
      AN1=FRAC(1)*CORR*ALOSCH                                           
      AN2=FRAC(2)*CORR*ALOSCH                                           
      AN3=FRAC(3)*CORR*ALOSCH                                           
      AN4=FRAC(4)*CORR*ALOSCH
      AN5=FRAC(5)*CORR*ALOSCH
      AN6=FRAC(6)*CORR*ALOSCH                                           
      AN=100.00*CORR*ALOSCH                                            
      VAN1=FRAC(1)*CORR*CONST4*1.0D15                                   
      VAN2=FRAC(2)*CORR*CONST4*1.0D15                                   
      VAN3=FRAC(3)*CORR*CONST4*1.0D15                                   
      VAN4=FRAC(4)*CORR*CONST4*1.0D15
      VAN5=FRAC(5)*CORR*CONST4*1.0D15
      VAN6=FRAC(6)*CORR*CONST4*1.0D15                                   
      VAN=100.00*CORR*CONST4*1.0D15
#                                                                       
#  RADIANS PER PICOSECOND                                                        
      WB=AWB*BMAG*1.0D-12 
#   METRES PER PICOSECOND
      IF(BMAG == 0.00):
 RETURN
      EOVB=EFIELD*1.D-9/BMAG
      RETURN
  999 WRITE(6,87) NGAS,(J,NGASN(J),FRAC(J),J=1,6) 
   87 FORMAT(3(/),4X,' ERROR IN GAS INPUT : NGAS=',I5,6(/,2X,' N=',I3,' 
     /NGAS=',I5,' FRAC=',F8.3))                                         
   99 LAST=1                                                            
      RETURN                                                            
      # end                                                               
      def PRNTER                                                 :
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/RATIO/AN1,AN2,AN3,AN4,AN5,AN6,AN,FRAC(6)              
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX  
      COMMON/BFLD/EOVB,WB,BTHETA,BMAG  
      COMMON/LARGE/RF(4000,960),EIN(960),TCF(4000),IARRY(960),RGAS(960),
     /IPN(960),WPL(960),IPLAST,ISIZE,PENFRA[3,960],TCFMAX(8)            
      COMMON/NAMES/NAMEG(6) 
      COMMON/DECOR/NCOLM,NCORLN,NCORST 
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9]          
      CHARACTER*25 NAMEG                                  
      WRITE(6,1)
    1 FORMAT(2(/),10X,'def MAGBOLTZ 2 VERSION 11.3 ',/)          
      WRITE(6,10) NGAS                                                  
   10 FORMAT(10X,'MONTE CARLO SOLUTION FOR MIXTURE OF ',I2,' GASES.',/,
     /5X,'------------------------------------------------------')  
      WRITE(6,30) (NAMEG(J),FRAC(J), J=1,NGAS)                          
  30  FORMAT(/,5X,'  GASES  USED ',15X,' PERCENTAGE USED ',2(/),6(6X,A25
     /,5X,F9.4,/))                    
      WRITE(6,50) TEMPC,TORR                                            
   50 FORMAT(/,2X,'GAS TEMPERATURE =',F6.1,' DEGREES CENTIGRADE.',/,2X,'
     /GAS PRESSURE = ',F7.1,' TORR.')                               
      WRITE(6,51) EFINAL,NSTEP                                          
  51  FORMAT(1(/),2X,'INTEGRATION FROM 0.0 TO ',F8.2,' EV.  IN ',I4,' ST
     /EPS. ')
      IF(IPEN == 0):
 WRITE(6,52)
      IF(IPEN == 1):
 WRITE(6,53)
   52 FORMAT(/,' PENNING EFFECTS NOT INCLUDED')
   53 FORMAT(/,' PENNING EFFECTS INCLUDED')
      IF(NANISO == 0):
 WRITE(6,61)
      IF(NANISO == 1):
 WRITE(6,62)
      IF(NANISO == 2):
 WRITE(6,63)
      IF(NANISO < 0 or NANISO > 2):
 :
       WRITE(6,64)
       STOP
      # endIF
  61  FORMAT(/,' ISOTROPIC SCATTERING X-SECTIONS USED')
  62  FORMAT(/,' ANISOTROPIC SCATTERING TYPE 1 (CAPITELLI/LONGO) USED IF
     / AVAILABLE')
  63  FORMAT(/,' ANISOTROPIC SCATTERING TYPE 2 (OKHRIMOVSKYY) USED IF AV
     /AILABLE') 
  64  FORMAT(/,' INPUT ERROR FOR ISOTROPY CONTROL,def STOPPED')
      IF(NCOLM > 1000000):
 :
       WRITE(6,166) NCOLM
      else:
       WRITE(6,167) NCOLM
      # endIF
 166  FORMAT(/,' LONG DECORRELATION LENGTH =',I7,' COLLISIONS.')
 167  FORMAT(/,' SHORT DECORRELATION LENGTH =',I7,' COLLISIONS.')
      WRITE(6,65)
  65  FORMAT(2(/),' THERMAL MOTION OF GAS NOT INCLUDED')
  74  WRITE(6,90) EFIELD,BMAG,BTHETA,WB                                 
  90  FORMAT(1(/),'  ELECTRIC FIELD =',F12.4,' VOLTS/CM.',/'  MAGNETIC F
     /IELD =',F11.4,' KILOGAUSS.',/,'  ANGLE BETWEEN ELECTRIC AND MAGNET
     /IC FIELD =',F10.3,' DEGREES.',/,'  CYCLOTRON FREQ. =',D12.3,' RADI
     /ANS/PICOSECOND')
      WRITE(6,95) ESTART 
  95  FORMAT(1(/),'  INITIAL ELECTRON ENERGY =',F8.3,' EV.') 
#     WRITE(6,96) RSTART
# 96  FORMAT(/,'  RANDOM NUMBER STARTER (SEED)=',F7.4)     
      WRITE(6,100) NMAX                                                 
 100  FORMAT(1(/),'  TOTAL NUMBER OF #real COLLISIONS =',I11)    
      WRITE(6,110)  (TCFMAX(L),L=1,8)                                  
  110 FORMAT(1(/),'  NULL COLLISION FREQUENCY AT  8 EQUALLY SPACED ENERG
     /Y INTERVALS (*10**12/SEC)',/,2(4(5X,D10.3)/))                    
      WRITE(6,111)  (TCF(L),L=250,3750,500)                             
  111 FORMAT('  #real COLLISION FREQUENCY AT  8 EQUALLY SPACED ENERGY INT
     /ERVALS (*10**12/SEC)',/,2(4(5X,D10.3)/))      
      RETURN                                                            
      # end
      def SORT(I,R2,IE):        
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/LARGE/CF(4000,960),EIN(960),TCF(4000),IARRY(960),RGAS(960),
     /IPN(960),WPL(960),LAST,ISIZE,PENFRA[3,960],TCFMAX(8)
#         
#    SELECTS COLLISION TYPE FROM COLLISION ARRAY BY BINARY STEP SAMPLING
#      REDUCES SAMPLING RANGE TO WITHIN 4 POSITIONS IN ARRAY 
#      OUTPUT =  I   ( POSITION WITHIN 4 OF CORRECT VALUE)  
#  
      ISTEP=ISIZE    
      INCR=0
      DO 1 K=1,12
      I=INCR      
      IF(ISTEP == 2):
 RETURN
      I=INCR+ISTEP
      IF(I > LAST):
 GO TO 2
      IF(CF(IE,I):
 < R2) :    
       INCR=INCR+ISTEP         
      # endIF
    2 ISTEP=ISTEP/2
    1 CONTINUE 
      RETURN
      # end                                                              
      def MONTE                                                  :
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2             
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX 
      COMMON/LARGE/CF(4000,960),EIN(960),TCF(4000),IARRY(960),RGAS(960),
     /IPN(960),WPL(960),LAST,ISIZE,PENFRA[3,960],TCFMAX(8)
      COMMON/LARGEN/CFN(4000,60),TCFN(4000),SCLENUL(60),NPLAST
      COMMON/ANIS/PSCT(4000,960),ANGCT(4000,960),INDEX(960),NISO
      COMMON/IONFL1/NC0(960),EC0(960),NG1(960),EG1(960),NG2(960),
     /EG2(960),WKLM(960),EFL(960)
      COMMON/DECOR/NCOLM,NCORLN,NCORST
      COMMON/VEL/WX,WY,WZ
      COMMON/VELERR/DWX,DWY,DWZ
      COMMON/CTOWNS/ALPHA,ATT
      COMMON/CTWNER/ALPER,ATTER
      COMMON/DIFVEL/DIFLN,DIFTR
      COMMON/DIFERL/DFLER,DFTER
      COMMON/DIFLAB/DIFXX,DIFYY,DIFZZ,DIFYZ,DIFXY,DIFXZ
      COMMON/DIFERB/DXXER,DYYER,DZZER,DYZER,DXYER,DXZER
      COMMON/OUTPT/TIME(300),ICOLL(30),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(960),ICOLNN(60)
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9] 
      DIMENSION XST(2000000),YST(2000000),ZST(2000000),STO(2000000)
      DIMENSION WZST(10),AVEST(10)
      DIMENSION DFZZST(10),DFYYST(10),DFXXST(10)
      DIMENSION TEMP(4000)
# -------------------------------------------------------------------   
#   CALCULATES COLLISION EVENTS AND UPDATES DIFFUSION AND VELOCITY.  
#   USED WITH MAGNETIC FIELD B =0.0   ELECTRIC FIELD IN Z DIRECTION.
# -------------------------------------------------------------------
      WX=0.00
      WY=0.00   
      DWX=0.00
      DWY=0.00
      DIFYZ=0.00
      DIFXY=0.00
      DIFXZ=0.00
      DYZER=0.00
      DXYER=0.00
      DXZER=0.00
      X=0.00
      Y=0.00
      Z=0.00
      ST=0.00 
      ST1=0.00
      ST2=0.00 
      SUME2=0.00                                                       
      SUMXX=0.00
      SUMYY=0.00
      SUMZZ=0.00 
      SUMVX=0.00 
      SUMVY=0.00
      ZOLD=0.00
      STOLD=0.00 
      ST1OLD=0.00
      ST2OLD=0.00
      SZZOLD=0.00
      SXXOLD=0.00
      SYYOLD=0.00
      SVXOLD=0.00
      SVYOLD=0.00
      SME2OLD=0.00                                                     
      SMALL=1.0D-20                                                     
      TMAX1=0.00                                                       
      RDUM=RSTART                                                       
      E1=ESTART                                                         
      CONST9=CONST3*0.010 
      ARAT=EMASS/AMU 
      N4000=4000
      N300=300                                              
      INTEM=8                                                           
      ITMAX=10                                                          
      ID=0                                                              
      NCOL=0                                                            
      NNULL=0
      NTMPFLG=0
      IEXTRA=0
      TDASH=0.00                  
# 
      DO 111 J=1,N4000
  111 TEMP(J)=TCFN(J)+TCF(J)     
      ABSFAKEI=abs(FAKEI)
      IFAKE=0:
#                                       
#     INITIAL DIRECTION COSINES                                         
#                                                                       
      DCZ1=DCOS(THETA)                                                  
      DCX1=DSIN(THETA)*DCOS(PHI)                                        
      DCY1=DSIN(THETA)*DSIN(PHI)                                        
#                                                                       
      BP=EFIELD*EFIELD*CONST1                                           
      F1=EFIELD*CONST2                                                  
      F2=EFIELD*CONST3                                                  
      F4=2.00*DACOS(-1.00)                                            
      DELTAE=EFINAL/DFLOAT(INTEM)                                       
      J2M=NMAX/ITMAX                                                    
# MAIN LOOP                                                             
      DO 210 J1=1,ITMAX                                                 
      DO 133 J2=1,J2M
    1 R1=drand48(RDUM) 
      I=DINT(E1/DELTAE)+1                                             
      I=DMIN0(I,INTEM)                                                
      TLIM=TCFMAX(I)                                                    
      T=-math.log(R1)/TLIM+TDASH                                            
      TDASH=T                                                           
      AP=DCZ1*F2*math.sqrt(E1)                                              
      E=E1+(AP+BP*T)*T                                                  
      IE=DINT(E/ESTEP)+1                                               
      IE=DMIN0(IE,N4000)                                               
      IF(TEMP(IE):
 > TLIM) :                             
       TDASH=TDASH+math.log(R1)/TLIM                                        
       TCFMAX(I)=1.050*TCFMAX(I)                                       
#      WRITE(6,996)                                                    
#996   FORMAT(/,5X,' WARNING NULL COLLISION TIME INCREASED',/)
       GO TO 1   
      # endIF                                                         
#                                                                       
#     TEST FOR #real OR NULL COLLISION                                   
#                                                                       
      R5=drand48(RDUM)
      TEST1=TCF(IE)/TLIM                                             
      IF(R5 <= TEST1):
 GO TO 137                                         
      NNULL=NNULL+1      
      TEST2=TEMP(IE)/TLIM
      IF(R5 < TEST2):
 :
# TEST FOR NULL LEVELS
       IF(NPLAST == 0):
 GO TO 1
       R2=drand48(RDUM)
       I=0
  888  I=I+1
       IF(CFN(IE,I):
 < R2) GO TO 888
# INCREMENT NULL SCATTER SUM
       ICOLNN(I)=ICOLNN(I)+1
       GO TO 1
      # endIF
      TEST3=(TEMP(IE)+ABSFAKEI)/TLIM
      IF(R5 < TEST3):
 :
# FAKE IONISATION INCREMENT COUNTER
       IFAKE=IFAKE+1:
       GO TO 1
      # endIF 
      GO TO 1          
#                                                                       
#  CALCULATE DIRECTION COSINES AND POSITIONS AT INSTANT BEFORE COLLISION
#    ALSO UPDATE DIFFUSION  AND ENERGY CALCULATIONS.                    
  137 T2=T*T                                                            
      IF(T >= TMAX1):
 TMAX1=T                                            
      TDASH=0.00                                                       
      CONST6=math.sqrt(E1/E)                                                
      DCX2=DCX1*CONST6                                                  
      DCY2=DCY1*CONST6                                                  
      DCZ2=DCZ1*CONST6+EFIELD*T*CONST5/math.sqrt(E)                         
      A=AP*T                                                            
      B=BP*T2                                                           
      SUME2=SUME2+T*(E1+A/2.00+B/3.00)                                
      CONST7=CONST9*math.sqrt(E1)                                           
      A=T*CONST7                                                        
      NCOL=NCOL+1
      CX1=DCX1*CONST7
      CY1=DCY1*CONST7                                                   
      CZ1=DCZ1*CONST7  
      X=X+DCX1*A                                                        
      Y=Y+DCY1*A                                                        
      Z=Z+DCZ1*A+T2*F1                                                  
      ST=ST+T                                                           
      IT=DINT(T+1.00)                                                 
      IT=DMIN0(IT,N300)                                               
      TIME(IT)=TIME(IT)+1.00  
      SPEC(IE)=SPEC(IE)+1.00                                           
      WZ=Z/ST
      SUMVX=SUMVX+CX1*CX1*T2
      SUMVY=SUMVY+CY1*CY1*T2
      IF(ID == 0):
 GO TO 121
      KDUM=0
      DO 120 JDUM=1,NCORST
      ST2=ST2+T
      NCOLDM=NCOL+KDUM
      IF(NCOLDM > NCOLM):
 NCOLDM=NCOLDM-NCOLM 
      SDIF=ST-STO(NCOLDM)
      SUMXX=SUMXX+((X-XST(NCOLDM))**2)*T/SDIF
      SUMYY=SUMYY+((Y-YST(NCOLDM))**2)*T/SDIF  
      IF(J1 < 3):
 GO TO 120
      ST1=ST1+T 
      SUMZZ=SUMZZ+((Z-ZST(NCOLDM)-WZ*SDIF)**2)*T/SDIF 
  120 KDUM=KDUM+NCORLN                      
  121 XST(NCOL)=X
      YST(NCOL)=Y
      ZST(NCOL)=Z
      STO(NCOL)=ST  
      IF(NCOL >= NCOLM):
 :                                            
       ID=ID+1                                                          
       XID=DFLOAT(ID)                                                   
       NCOL=0  
      # endIF                                                           
# --------------------------------------------------------------------- 
#     DETERMINATION OF #real COLLISION TYPE                              
# --------------------------------------------------------------------- 
      R2=drand48(RDUM)
# FIND LOCATION WITHIN 4 UNITS IN COLLISION ARRAY      
      CALL SORT(I,R2,IE)
  140 I=I+1 
      IF(CF(IE,I):
 < R2) GO TO 140                                      
      S1=RGAS(I)                                                        
      EI=EIN(I)                                                         
      IF(IPN(I):
 <= 0) GO TO 666                                         
#  USE FLAT DISTRIBUTION OF  ELECTRON ENERGY BETWEEN E-EION AND 0.0 EV  
#  SAME AS IN BOLTZMANN                                                 
      R9=drand48(RDUM)
      EXTRA=R9*(E-EI)                                                   
      EI=EXTRA+EI  
# IF AUGER OR FLUORESCENCE ADD EXTRA IONISATION COLLISIONS
      IEXTRA=IEXTRA+NC0(I)                                             
#                                                                       
#  GENERATE SCATTERING ANGLES AND UPDATE  LABORATORY COSINES AFTER      
#   COLLISION ALSO UPDATE ENERGY OF ELECTRON.                           
#                                                                       
  666 IPT=IARRY(I)                                                      
      ICOLL(IPT)=ICOLL(IPT)+1 
      ICOLN(I)=ICOLN(I)+1
      IF(E < EI):
 :
#      WRITE(6,994) E,EI,J2
#994  FORMAT(2X,' WARNING ENERGY =',F8.3,' LESS THAN ENERGY LOSS EI=',F8
#    /.3,' AT ITER=',I12,' DUE TO BINNING ERROR')
#  FIX ENERGY LOSS SMALLER THAN INCIDENT ENERGY IF ERROR OCCURS
       EI=E-0.00010
      # endIF
# IF EXCITATION : ADD PROBABILITY ,PENFRA(1,I), OF TRANSFER TO 
# IONISATION OF THE OTHER GASES IN MIXTURE
      IF(IPEN == 0):
 GO TO 5 
      IF(PENFRA[1,I] != 0.0):
 :
       RAN=drand48(RDUM)
       IF(RAN > PENFRA[1,I]):
 GO TO 5
# ADD EXTRA IONISATION COLLISION
       IEXTRA=IEXTRA+1
      # endIF
    5 S2=(S1*S1)/(S1-1.00)  
#  ANISOTROPIC SCATTERING
      IF(INDEX(I):
 == 1) :
       R31=drand48(RDUM)
       R3=drand48(RDUM)
       F3=1.00-R3*ANGCT(IE,I) 
       IF(R31 > PSCT(IE,I):
) F3=-F3
      elif(INDEX(I) == 2) :
       R3=drand48(RDUM)
       EPSI=PSCT(IE,I)
       F3=1.00-(2.00*R3*(1.00-EPSI)/(1.00+EPSI*(1.00-2.00*R3)))
      else:
# ISOTROPIC  SCATTERING                                        
       R3=drand48(RDUM)  
       F3=1.00-2.00*R3 
      # endIF  
      THETA0=DACOS(F3)                                                  
      R4=drand48(RDUM)
      PHI0=F4*R4                                                        
      F8=DSIN(PHI0)                                                     
      F9=DCOS(PHI0)                                                     
      ARG1=1.00-S1*EI/E                                                
      ARG1=DMAX1(ARG1,SMALL)                                            
      D=1.00-F3*math.sqrt(ARG1)                                            
      E1=E*(1.00-EI/(S1*E)-2.00*D/S2)                                 
      E1=DMAX1(E1,SMALL)                                                
      Q=math.sqrt((E/E1)*ARG1)/S1                                           
      Q=DMIN1(Q,1.00)                                                  
      THETA=DASIN(Q*DSIN(THETA0))                                       
      F6=DCOS(THETA)                                                    
      U=(S1-1.00)*(S1-1.00)/ARG1                                      
      CSQD=F3*F3                                                        
      IF(F3 < 0.00 and CSQD > U):
 F6=-1.00*F6                        
      F5=DSIN(THETA) 
      DCZ2=DMIN1(DCZ2,1.00)                                            
      ARGZ=math.sqrt(DCX2*DCX2+DCY2*DCY2) 
      IF(ARGZ == 0.00):
 :
#      WRITE(6,9232) ITER,ID,E1
#9232  FORMAT(3X,'WARNING ARGZ= 0.0 AT ITER =',I10,' ID =',I10,' E1=',E1
#    /2.3)
       DCZ1=F6
       DCX1=F9*F5
       DCY1=F8*F5
       GO TO 130
      # endIF                                          
      DCZ1=DCZ2*F6+ARGZ*F5*F8                                           
      DCY1=DCY2*F6+(F5/ARGZ)*(DCX2*F9-DCY2*DCZ2*F8)                     
      DCX1=DCX2*F6-(F5/ARGZ)*(DCY2*F9+DCX2*DCZ2*F8)
  130 CONTINUE 
  133 CONTINUE
#   ------------------------------------------  
      IF(J1 == 1):
 WRITE(6,201)                                         
  201 FORMAT(/,'    VEL      POS        TIME      ENERGY   COUNT   DIFXX
     /     DIFYY     DIFZZ',/)                  
      WZ=WZ*1.0D+09
      AVE=SUME2/ST
      DIFLN=0.00
      IF(NISO == 0):
 :
       DIFXX=5.0D+15*SUMVX/ST
       DIFYY=5.0D+15*SUMVY/ST 
       DFXXST(J1)=5.0D+15*(SUMVX-SVXOLD)/(ST-STOLD)
       DFYYST(J1)=5.0D+15*(SUMVY-SVYOLD)/(ST-STOLD)
      else:
       IF(ST2 != 0.00):
 :
        DIFYY=5.0D+15*SUMYY/ST2
        DIFXX=5.0D+15*SUMXX/ST2
        DFXXST(J1)=5.0D+15*(SUMXX-SXXOLD)/(ST2-ST2OLD)
        DFYYST(J1)=5.0D+15*(SUMYY-SYYOLD)/(ST2-ST2OLD) 
       else:
        DFXXST(J1)=0.00
        DFYYST(J1)=0.00
       # endIF
      # endIF   
      IF(ST1 != 0.00):
 :
       DIFZZ=5.0D+15*SUMZZ/ST1
       DFZZST(J1)=5.0D+15*(SUMZZ-SZZOLD)/(ST1-ST1OLD)
      else:
       DFZZST(J1)=0.00
      # endIF 
      WZST(J1)=(Z-ZOLD)/(ST-STOLD)*1.0D+09
      AVEST(J1)=(SUME2-SME2OLD)/(ST-STOLD)
      ZOLD=Z  
      STOLD=ST  
      ST1OLD=ST1
      ST2OLD=ST2
      SVXOLD=SUMVX
      SVYOLD=SUMVY
      SZZOLD=SUMZZ
      SXXOLD=SUMXX
      SYYOLD=SUMYY
      SME2OLD=SUME2 
      WRITE(6,202) WZ,Z,ST,AVE,ID,DIFXX,DIFYY,DIFZZ                     
  202 FORMAT(1X,F8.2,2(1X,D10.3),F9.4,1X,I5,1X,3(2X,F8.1)) 
# IF LAST ENERGY BIN IS HIGH INCREASE INTEGRATION ENERGY RANGE
      IF(SPEC(4000):
 > (1000.00*DFLOAT(J1))) :
       WRITE(6,50)
   50  FORMAT(' WARNING ENERGY OUT OF RANGE,INCREASE ELECTRON ENERGY INT
     /EGRATION RANGE ')
       STOP      
      # endIF
# LOOP                                                                 
  210 CONTINUE
# CALCULATE ERRORS AND CHECK AVERAGES
      TWZST=0.00  
      TAVE=0.00   
      T2WZST=0.00             
      T2AVE=0.00      
      TZZST=0.00    
      TYYST=0.00    
      TXXST=0.00   
      T2ZZST=0.00
      T2YYST=0.00
      T2XXST=0.00
      DO 768 K=1,10
      TWZST=TWZST+WZST(K)
      TAVE=TAVE+AVEST(K)
      T2WZST=T2WZST+WZST(K)*WZST(K)
      T2AVE=T2AVE+AVEST(K)*AVEST(K)
      TXXST=TXXST+DFXXST(K)
      TYYST=TYYST+DFYYST(K)  
      T2YYST=T2YYST+DFYYST(K)*DFYYST(K)
      T2XXST=T2XXST+DFXXST(K)*DFXXST(K)
      IF(K < 3):
 GO TO 768
      TZZST=TZZST+DFZZST(K)
      T2ZZST=T2ZZST+DFZZST(K)*DFZZST(K)         
  768 CONTINUE 
      DWZ=100.00*math.sqrt((T2WZST-TWZST*TWZST/10.00)/9.00)/WZ
      DEN=100.00*math.sqrt((T2AVE-TAVE*TAVE/10.00)/9.00)/AVE
      DXXER=100.00*math.sqrt((T2XXST-TXXST*TXXST/10.00)/9.00)/DIFXX
      DYYER=100.00*math.sqrt((T2YYST-TYYST*TYYST/10.00)/9.00)/DIFYY 
      DZZER=100.00*math.sqrt((T2ZZST-TZZST*TZZST/8.00)/7.00)/DIFZZ
      DWZ=DWZ/math.sqrt(10.00)
      DEN=DEN/math.sqrt(10.00)
      DXXER=DXXER/math.sqrt(10.00)
      DYYER=DYYER/math.sqrt(10.00)
      DZZER=DZZER/math.sqrt(8.00)
      DIFLN=DIFZZ
      DIFTR=(DIFXX+DIFYY)/2.00
#  CONVERT CM/SEC
      WZ=WZ*1.005
      DFLER=DZZER
      DFTER=(DXXER+DYYER)/2.00
# CALCULATE TOWNS# end COEFICIENTS AND ERRORS
      ANCATT=0.00
      ANCION=0.00
      DO 800 I=1,NGAS
      ANCATT=ANCATT+ICOLL((5*I)-2)   
  800 ANCION=ANCION+ICOLL((5*I)-3) 
      ANCION=ANCION+IEXTRA  
      ATTER=0.00
      IF(ANCATT == 0.00):
 GO TO 810
      ATTER=100.00*math.sqrt(ANCATT)/ANCATT 
  810 ATT=ANCATT/(ST*WZ)*1.0D12
      ALPER=0.00 
      IF(ANCION == 0.00):
 GO TO 820
      ALPER=100.00*math.sqrt(ANCION)/ANCION
  820 ALPHA=ANCION/(ST*WZ)*1.0D12 
      RETURN                                                            
      # end                                                               
      def OUTPUT                                                 :
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/E(4000),EROOT(4000),QTOT(4000),QREL(4000),QINEL(4000),
     /QEL(4000)                                                         
      COMMON/MIX1/QELM(4000),QSUM(4000),QION(6,4000),QIN1(250,4000),    
     /QIN2(250,4000),QIN3(250,4000),QIN4(250,4000),QIN5(250,4000),
     /QIN6(250,4000),QSATT(4000)             
      COMMON/RATIO/AN1,AN2,AN3,AN4,AN5,AN6,AN,FRAC(6)                 
      COMMON/DIFVEL/DIFLN,DIFTR
      COMMON/DIFERL/DFLER,DFTER
      COMMON/DIFLAB/DIFXX,DIFYY,DIFZZ,DIFYZ,DIFXY,DIFXZ
      COMMON/DIFERB/DXXER,DYYER,DZZER,DYZER,DXYER,DXZER
      COMMON/VEL/WX,WY,WZ
      COMMON/VELERR/DWX,DWY,DWZ
      COMMON/CTOWNS/ALPHA,ATT
      COMMON/CTWNER/ALPER,ATTER
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX   
      COMMON/BFLD/EOVB,WB,BTHETA,BMAG    
      COMMON/LARGE/CF(4000,960),EIN(960),TCF(4000),IARRY(960),RGAS(960),
     /IPN(960),WPL(960),LAST,ISIZE,PENFRA[3,960],TCFMAX(8)
      COMMON/OUTPT/TIME(300),ICOLL(30),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(960),ICOLNN(60)  
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9]             
      COMMON/SINT/SIMF(4000)                                            
      COMMON/NAMES/NAMEG(6)
      COMMON/SCRIP/DSCRPT(960),DSCRPTN(60)
      CHARACTER*50 DSCRPT,DSCRPTN                               
      CHARACTER*25 NAMEG
      WRITE(6,15)                                                       
      WRITE(6,15)                                                       
   15 FORMAT('----------------------------------------------------------
     /-------------------')
      N#real=NMAX                                                  
      WRITE(6,109) TMAX1,NNULL,N#real                                    
  109 FORMAT(/,2X,'CALCULATED MAX. COLLISION TIME =',F7.2,' PICOSECONDS.
     /',2(/),2X,'NUMBER OF NULL COLLISIONS =',I11,/,2X,'NUMBER OF #real C
     /OLLISIONS =',I11)
      WMNZ=WZ*1.0D-05 
      WMNY=WY*1.0D-05
      WMNX=WX*1.0D-05                                      
      WRITE(6,940) WMNZ,DWZ,WMNY,DWY,WMNX,DWX                           
  940 FORMAT(/,2X,'Z DRIFT VELOCITY =',E11.4,' MICRONS/NANOSECOND  +-',F
     /8.2,'% ',/,2X,'Y DRIFT VELOCITY =',E11.4,' MICRONS/NANOSECOND  +-'
     /,F8.2,'%',/,2X,'X DRIFT VELOCITY =',E11.4,' MICRONS/NANOSECOND  +-
     /',F8.2,'%',/) 
      IF(BMAG > 0.00 and (BTHETA > 0.00 and BTHETA < 180.00):
)
     /GO TO 800 
      DTOVMB=DIFTR*EFIELD/WZ                                            
      DTMN=math.sqrt(2.00*DIFTR/WZ)*10000.00 
      DFTER1=math.sqrt(DFTER**2+DWZ**2)
      DFTER2=DFTER1/2.0
      WRITE(6,954)                                  
      WRITE(6,950) DIFTR,DFTER,DTOVMB,DFTER1,DTMN,DFTER2                
  950 FORMAT(/,2X,'TRANSVERSE DIFFUSION   =',D11.4,' +-',F8.2,'%',/,10X,
     /'=',F9.4,' EV. +-',F8.2,'%',/,10X,'=',F9.3,' MICRONS/CENTIMETER**0
     /.5  +-',F8.2,'%',/)                     
      DLOVMB=DIFLN*EFIELD/WZ                                            
      DLMN=math.sqrt(2.00*DIFLN/WZ)*10000.00 
      DFLER1=math.sqrt(DFLER**2+DWZ**2)     
      DFLER2=DFLER1/2.0                               
      WRITE(6,992) DIFLN,DFLER,DLOVMB,DFLER1,DLMN,DFLER2                
  992 FORMAT(/,2X,'LONGITUDINAL DIFFUSION =',D11.4,' +-',F8.1,'%',/,10X,
     /'=',F9.4,' EV. +-',F8.2,'%',/,10X,'=',F9.3,' MICRONS/CENTIMETER**0
     /.5  +-',F8.2,'%',/)                     
      GO TO 900
  800 WRITE(6,954) 
  954 FORMAT(/,10X,' DIFFUSION IN CM**2/SEC.',/)     
      WRITE(6,955) DIFXX,DIFYY,DIFZZ,DIFYZ,DIFXY,DIFXZ
  955 FORMAT(/,2X,'DIFFUSION TENSOR :',/,6X,' DIFXX =',D11.4,' DIFYY =',
     /D11.4,' DIFZZ =',D11.4,/,6X,' DIFYZ =',D11.4,' DIFXY =',D11.4,' DI
     /FXZ =',D11.4,/)
      WRITE(6,956) DXXER,DYYER,DZZER,DYZER,DXYER,DXZER
  956 FORMAT(/,2X,'ERROR ON DIFFUSION TENSOR :',/,6X,' DIFXX =',F8.2,'% 
     / DIFYY =',F8.2,'%  DIFZZ =',F8.2,'%',/,6X,' DIFYZ =',F8.2,'%  DIFX
     /Y =',F8.2,'%  DIFXZ =',F8.2,'%',/)
      IF(BTHETA == 90.):
 WRITE(6,957) DIFLN,DFLER,DIFTR,DFTER,DIFXX,DXXER
  957 FORMAT(/,8X,' LONGITUDINAL DIFFUSION =',D11.4,' +-',F8.2,'%',/,10X
     /,' TRANSVERSE DIFFUSION =',D11.4,' +-',F8.2,'%',/,2X,'TRANSVERSE D
     /IFFUSION (PARALLEL TO B-FIELD) DIFXX=',D11.4,' +-',F8.2,'%',/)
  900 WRITE(6,333) ALPHA,ALPER,ATT,ATTER                             
  333 FORMAT(2(/),'  IONISATION RATE /CM.=',E11.4,' +/-',F6.2,' PERCENT.
     /',/,'  ATTACHMENT RATE /CM.=',E11.4,' +/-',F6.2,' PERCENT.',2(/)) 
      WRITE(6,960) AVE,DEN             
  960 FORMAT(/,2X,'MEAN ELECTRON ENERGY =',F9.4,' EV. ERROR =  +-',F8.2,
     /'%',/)           
      RETURN                                                            
      # end
      def MONTEA                                                 :
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX
      COMMON/BFLD/EOVB,WB,BTHETA,BMAG                                   
      COMMON/LARGE/CF(4000,960),EIN(960),TCF(4000),IARRY(960),RGAS(960),
     /IPN(960),WPL(960),LAST,ISIZE,PENFRA[3,960],TCFMAX(8)
      COMMON/LARGEN/CFN(4000,60),TCFN(4000),SCLENUL(60),NPLAST
      COMMON/ANIS/PSCT(4000,960),ANGCT(4000,960),INDEX(960),NISO
      COMMON/IONFL1/NC0(960),EC0(960),NG1(960),EG1(960),NG2(960),
     /EG2(960),WKLM(960),EFL(960)  
      COMMON/DECOR/NCOLM,NCORLN,NCORST
      COMMON/DIFVEL/DIFLN,DIFTR
      COMMON/DIFERL/DFLER,DFTER
      COMMON/DIFLAB/DIFXX,DIFYY,DIFZZ,DIFYZ,DIFXY,DIFXZ
      COMMON/DIFERB/DXXER,DYYER,DZZER,DYZER,DXYER,DXZER
      COMMON/VEL/WX,WY,WZ                    
      COMMON/VELERR/DWX,DWY,DWZ
      COMMON/CTOWNS/ALPHA,ATT
      COMMON/CTWNER/ALPER,ATTER
      COMMON/OUTPT/TIME(300),ICOLL(30),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(960),ICOLNN(60) 
      COMMON/FAKE/FAKEI,IFAKE,FAKET(8),FAKED[9]               
      DIMENSION XST(2000000),YST(2000000),ZST(2000000),STO(2000000) 
      DIMENSION WZST(10),AVEST(10)                                 
      DIMENSION DFZZST(10),DFYYST(10),DFXXST(10)
      DIMENSION TEMP(4000)
# -------------------------------------------------------------------   
#   CALCULATES COLLISION EVENTS AND UPDATES DIFFUSION AND VELOCITY.  
#   USED WITH MAGNETIC FIELD , B , PARALLEL TO ELECTRIC FIELD IN THE
#   Z DIRECTION.
# -------------------------------------------------------------------
      WX=0.00
      WY=0.00
      DWX=0.00
      DWY=0.00
      DIFYZ=0.00
      DIFXY=0.00
      DIFXZ=0.00
      DYZER=0.00
      DXYER=0.00
      DXZER=0.00
      X=0.00
      Y=0.00
      Z=0.00
      ST=0.00 
      ST1=0.00
      ST2=0.00
      SUME2=0.00
      SUMXX=0.00
      SUMYY=0.00
      SUMZZ=0.00
      SUMVX=0.00
      SUMVY=0.00
      ZOLD=0.00
      STOLD=0.00
      ST1OLD=0.00
      ST2OLD=0.00
      SZZOLD=0.00
      SXXOLD=0.00
      SYYOLD=0.00
      SVXOLD=0.00
      SVYOLD=0.00
      SME2OLD=0.00
      SMALL=1.0D-20                                                     
      TMAX1=0.00                                                       
      RDUM=RSTART                                                       
      E1=ESTART                                                         
      CONST9=CONST3*0.010 
      N4000=4000
      N300=300                                             
      INTEM=8                                                           
      ITMAX=10                                                          
      ID=0                                                              
      NCOL=0                                                            
      NNULL=0
      IEXTRA=0 
      TDASH=0.00 
#
      DO 111 J=1,N4000
  111 TEMP(J)=TCFN(J)+TCF(J)                   
      ABSFAKEI=FAKEI
      IFAKE=0                      :
#                                                                       
#     INITIAL DIRECTION COSINES                                         
#                                                                       
      DCZ1=DCOS(THETA)                                                  
      DCX1=DSIN(THETA)*DCOS(PHI)                                        
      DCY1=DSIN(THETA)*DSIN(PHI) 
# INITIAL VELOCITY
      VTOT=CONST9*math.sqrt(E1)
      CX1=DCX1*VTOT
      CY1=DCY1*VTOT
      CZ1=DCZ1*VTOT                                             
      BP=EFIELD*EFIELD*CONST1                                           
      F1=EFIELD*CONST2                                                  
      F2=EFIELD*CONST3                                                  
      F4=2.00*DACOS(-1.00)                                            
      DELTAE=EFINAL/DFLOAT(INTEM)                                       
      J2M=NMAX/ITMAX                                                    
# MAIN LOOP                                                             
      DO 210 J1=1,ITMAX                                                 
      DO 133 J2=1,J2M                                                   
    1 R1=drand48(RDUM)  
      I=DINT(E1/DELTAE)+1                                             
      I=DMIN0(I,INTEM)                                               
      TLIM=TCFMAX(I)                                                    
      T=-math.log(R1)/TLIM+TDASH                                            
      TDASH=T                                                           
      AP=DCZ1*F2*math.sqrt(E1)                                              
      E=E1+(AP+BP*T)*T                                                  
      IE=DINT(E/ESTEP)+1                                            
      IE=DMIN0(IE,N4000)                                              
      IF(TEMP(IE):
 > TLIM) :                                         
       TDASH=TDASH+math.log(R1)/TLIM                                        
       TCFMAX(I)=1.050*TCFMAX(I)                                       
#      WRITE(6,996)                                                      
#996   FORMAT(/,5X,' WARNING NULL COLLISION TIME INCREASED',/)           
       GO TO 1  
      # endIF                                                          
#                                                                       
#     TEST FOR #real OR NULL COLLISION                                   
#                                                                       
      R5=drand48(RDUM)
      TEST1=TCF(IE)/TLIM                                               
      IF(R5 <= TEST1):
 GO TO 137                                    
      NNULL=NNULL+1 
      TEST2=TEMP(IE)/TLIM
      IF(R5 < TEST2):
 :
# TEST FOR NULL LEVELS
       IF(NPLAST == 0):
 GO TO 1
       R2=drand48(RDUM)
       I=0
  888  I=I+1
       IF(CFN(IE,I):
 < R2) GO TO 888
# INCREMENT NULL SCATTER SUM
       ICOLNN(I)=ICOLNN(I)+1
       GO TO 1
      # endIF
      TEST3=(TEMP(IE)+ABSFAKEI)/TLIM
      IF(R5 < TEST3):
 :
# FAKE IONISATION INCREMENT COUNTER
       IFAKE=IFAKE+1:
       GO TO 1
      # endIF
      GO TO 1    
#                                                                       
#  CALCULATE DIRECTION COSINES AND POSITIONS AT INSTANT BEFORE COLLISION
#    ALSO UPDATE DIFFUSION  AND ENERGY CALCULATIONS.                    
  137 T2=T*T                                                            
      IF(T >= TMAX1):
 TMAX1=T                                            
      TDASH=0.00
      WBT=WB*T
      COSWT=DCOS(WBT)
      SINWT=DSIN(WBT)                                                   
      CONST6=math.sqrt(E1/E) 
      CX2=CX1*COSWT-CY1*SINWT
      CY2=CY1*COSWT+CX1*SINWT
      VTOT=CONST9*math.sqrt(E)
      DCX2=CX2/VTOT
      DCY2=CY2/VTOT                                               
      DCZ2=DCZ1*CONST6+EFIELD*T*CONST5/math.sqrt(E)                         
      A=AP*T                                                            
      B=BP*T2                                                           
      SUME2=SUME2+T*(E1+A/2.00+B/3.00)                                
      CONST7=CONST9*math.sqrt(E1)                                           
      A=T*CONST7                                                        
      NCOL=NCOL+1
      DX=(CX1*SINWT-CY1*(1.00-COSWT))/WB
      X=X+DX                             
      DY=(CY1*SINWT+CX1*(1.00-COSWT))/WB                               
      Y=Y+DY                                                            
      Z=Z+DCZ1*A+T2*F1                                                  
      ST=ST+T                                                           
      IT=DINT(T+1.00)                                              
      IT=DMIN0(IT,N300)                                                
      TIME(IT)=TIME(IT)+1.00
      SPEC(IE)=SPEC(IE)+1.00                                           
      WZ=Z/ST 
      SUMVX=SUMVX+DX*DX
      SUMVY=SUMVY+DY*DY  
      IF(ID == 0):
 GO TO 121                                             
      KDUM=0
      DO 120 JDUM=1,NCORST
      ST2=ST2+T
      NCOLDM=NCOL+KDUM
      IF(NCOLDM > NCOLM):
 NCOLDM=NCOLDM-NCOLM
      SDIF=ST-STO(NCOLDM)
      SUMXX=SUMXX+((X-XST(NCOLDM))**2)*T/SDIF
      SUMYY=SUMYY+((Y-YST(NCOLDM))**2)*T/SDIF
      IF(J1 < 3):
 GO TO 120                                             
      ST1=ST1+T                                                       
      SUMZZ=SUMZZ+((Z-ZST(NCOLDM)-WZ*SDIF)**2)*T/SDIF
  120 KDUM=KDUM+NCORLN                      
  121 XST(NCOL)=X
      YST(NCOL)=Y
      ZST(NCOL)=Z
      STO(NCOL)=ST  
      IF(NCOL >= NCOLM):
 :                                            
       ID=ID+1                                                          
       XID=DFLOAT(ID)                                                   
       NCOL=0
      # endIF                                                             
# --------------------------------------------------------------------- 
#     DETERMINATION OF #real COLLISION TYPE                              
# --------------------------------------------------------------------- 
      R2=drand48(RDUM) 
# FIND LOCATION WITHIN 4 UNITS IN COLLISION ARRAY                                                         
      CALL SORT(I,R2,IE)                                                
  140 I=I+1                                                             
      IF(CF(IE,I):
 < R2) GO TO 140                                      
      S1=RGAS(I)                                                        
      EI=EIN(I)                                                         
      IF(IPN(I):
 <= 0) GO TO 666                                         
#  USE FLAT DISTRIBUTION OF  ELECTRON ENERGY BETWEEN E-EION AND 0.0 EV  
#  SAME AS IN BOLTZMANN                                                 
      R9=drand48(RDUM)
      EXTRA=R9*(E-EI)                                                   
      EI=EXTRA+EI                
# IF AUGER OR FLUORESCENCE ADD EXTRA IONISATION ELECTRONS
      IEXTRA=IEXTRA+NC0(I)                                       
#                                                                       
#  GENERATE SCATTERING ANGLES AND UPDATE  LABORATORY COSINES AFTER      
#   COLLISION ALSO UPDATE ENERGY OF ELECTRON.                           
#                                                                       
  666 IPT=IARRY(I)                                                      
      ICOLL(IPT)=ICOLL(IPT)+1 
      ICOLN(I)=ICOLN(I)+1
      IF(E < EI):
 :
#      WRITE(6,994) E,EI,J2
#994  FORMAT(2X,' WARNING ENERGY =',F8.3,' LESS THAN ENERGY LOSS EI=',F8
#    /.3,' AT ITER=',I12,' DUE TO BINNING ERROR')
#  FIX ENERGY LOSS SMALLER THAN INCIDENT ENERGY IF ERROR OCCURS
       EI=E-0.00010
      # endIF
# IF EXCITATION : ADD PROBABLITY,PENFRAC(1,I),OF TRANSFER TO GIVE
# IONISATION OF THE OTHER GASES IN THE MIXTURE.
      IF(IPEN == 0):
 GO TO 5
      IF(PENFRA[1,I] != 0.0):
 :
       RAN=drand48(RDUM)
       IF(RAN > PENFRA[1,I]):
 GO TO 5
# ADD EXTRA IONISATION COLLISION
       IEXTRA=IEXTRA+1
      # endIF
    5 S2=(S1*S1)/(S1-1.00) 
# ANISOTROPIC SCATTERING 
      R3=drand48(RDUM)
      IF(INDEX(I):
 == 1) :
       R31=drand48(RDUM)
       F3=1.00-R3*ANGCT(IE,I)
       IF(R31 > PSCT(IE,I):
) F3=-F3
      elif(INDEX(I) == 2) :
       EPSI=PSCT(IE,I)
       F3=1.00-(2.00*R3*(1.00-EPSI)/(1.00+EPSI*(1.00-2.00*R3)))
      else:
# ISOTROPIC SCATTERING 
       F3=1.00-2.00*R3
      # endIF
      THETA0=DACOS(F3)                                                  
      R4=drand48(RDUM) 
      PHI0=F4*R4
      F8=DSIN(PHI0)                                                    
      F9=DCOS(PHI0)                                                     
      ARG1=1.00-S1*EI/E                                                
      ARG1=DMAX1(ARG1,SMALL)                                            
      D=1.00-F3*math.sqrt(ARG1)                                            
      E1=E*(1.00-EI/(S1*E)-2.00*D/S2)                                 
      E1=DMAX1(E1,SMALL)                                                
      Q=math.sqrt((E/E1)*ARG1)/S1                                           
      Q=DMIN1(Q,1.00)                                                  
      THETA=DASIN(Q*DSIN(THETA0))                                       
      F6=DCOS(THETA)                                                    
      U=(S1-1.00)*(S1-1.00)/ARG1                                      
      CSQD=F3*F3                                                        
      IF(F3 < 0.00 and CSQD > U):
 F6=-1.00*F6                        
      F5=DSIN(THETA)                                                    
      DCZ2=DMIN1(DCZ2,1.00)
      VTOT=CONST9*math.sqrt(E1)                                            
      ARGZ=math.sqrt(DCX2*DCX2+DCY2*DCY2) 
      IF(ARGZ == 0.00):
 :
#      WRITE(6,9232) ITER,ID,E1
#9232  FORMAT(3X,'WARNING ARGZ= 0.0 AT ITER =',I10,' ID =',I10,' E1=',E1
#    /2.3)
       DCZ1=F6
       DCX1=F9*F5
       DCY1=F8*F5
       GO TO 130
      # endIF                                          
      DCZ1=DCZ2*F6+ARGZ*F5*F8                                           
      DCY1=DCY2*F6+(F5/ARGZ)*(DCX2*F9-DCY2*DCZ2*F8)                     
      DCX1=DCX2*F6-(F5/ARGZ)*(DCY2*F9+DCX2*DCZ2*F8)                     
# CALCULATE VELOCITY VECTORS AFTER COLLISION
  130 CX1=DCX1*VTOT
      CY1=DCY1*VTOT
      CZ1=DCZ1*VTOT  
  133 CONTINUE                                                          
#   ------------------------------------------  
      IF(J1 == 1):
 WRITE(6,201)                                         
  201 FORMAT(/,'    VEL      POS        TIME      ENERGY   COUNT   DIFXX
     /     DIFYY     DIFZZ  ',/)
      WZ=WZ*1.0D+09
      AVE=SUME2/ST
      IF(NISO == 0):
 :
       DIFXX=5.0D+15*SUMVX/ST
       DIFYY=5.0D+15*SUMVY/ST
       DFXXST(J1)=5.0D+15*(SUMVX-SVXOLD)/(ST-STOLD)
       DFYYST(J1)=5.0D+15*(SUMVY-SVYOLD)/(ST-STOLD)
      else: 
       IF(ST2 != 0.00):
 :
        DIFYY=5.0D+15*SUMYY/ST2
        DIFXX=5.0D+15*SUMXX/ST2  
        DFXXST(J1)=5.0D+15*(SUMXX-SXXOLD)/(ST2-ST2OLD)
        DFYYST(J1)=5.0D+15*(SUMYY-SYYOLD)/(ST2-ST2OLD)
       else:
        DFXXST(J1)=0.00
        DFYYST(J1)=0.00 
       # endIF                                                  
      # endIF 
      IF(ST1 != 0.00):
 :
       DIFZZ=5.0D+15*SUMZZ/ST1
       DFZZST(J1)=5.0D+15*(SUMZZ-SZZOLD)/(ST1-ST1OLD)
      else:
       DFZZST(J1)=0.00
      # endIF
      WZST(J1)=(Z-ZOLD)/(ST-STOLD)*1.0D+09
      AVEST(J1)=(SUME2-SME2OLD)/(ST-STOLD)
      ZOLD=Z
      STOLD=ST
      ST1OLD=ST1
      ST2OLD=ST2
      SVXOLD=SUMVX
      SVYOLD=SUMVY
      SZZOLD=SUMZZ
      SXXOLD=SUMXX
      SYYOLD=SUMYY
      SME2OLD=SUME2                                              
      WRITE(6,202) WZ,Z,ST,AVE,ID,DIFXX,DIFYY,DIFZZ                
  202 FORMAT(1X,F8.2,2(1X,D10.3),F9.4,1X,I5,1X,3(2X,F8.1))              
# LOOP                                                                      
  210 CONTINUE  
# CALCULATE ERRORS AND CHECK AVERAGES   
      TWZST=0.00 
      TAVE=0.00   
      T2WZST=0.00    
      T2AVE=0.00     
      TZZST=0.00     
      TYYST=0.00     
      TXXST=0.00    
      T2ZZST=0.00
      T2YYST=0.00
      T2XXST=0.00
      DO 768 K=1,10
      TWZST=TWZST+WZST(K)
      TAVE=TAVE+AVEST(K)
      T2WZST=T2WZST+WZST(K)*WZST(K)
      T2AVE=T2AVE+AVEST(K)*AVEST(K)
      TXXST=TXXST+DFXXST(K)  
      TYYST=TYYST+DFYYST(K)  
      T2XXST=T2XXST+DFXXST(K)*DFXXST(K)
      T2YYST=T2YYST+DFYYST(K)*DFYYST(K)
      IF(K < 3):
 GO TO 768
      TZZST=TZZST+DFZZST(K)
      T2ZZST=T2ZZST+DFZZST(K)*DFZZST(K)    
  768 CONTINUE 
      DWZ=100.00*math.sqrt((T2WZST-TWZST*TWZST/10.00)/9.00)/WZ
      DEN=100.00*math.sqrt((T2AVE-TAVE*TAVE/10.00)/9.00)/AVE
      DXXER=100.00*math.sqrt((T2XXST-TXXST*TXXST/10.00)/9.00)/DIFXX
      DYYER=100.00*math.sqrt((T2YYST-TYYST*TYYST/10.00)/9.00)/DIFYY
      DZZER=100.00*math.sqrt((T2ZZST-TZZST*TZZST/8.00)/7.00)/DIFZZ 
      DWZ=DWZ/math.sqrt(10.00)
      DEN=DEN/math.sqrt(10.00)
      DXXER=DXXER/math.sqrt(10.00)
      DYYER=DYYER/math.sqrt(10.00)
      DZZER=DZZER/math.sqrt(8.00)
      DIFLN=DIFZZ
      DIFTR=(DIFXX+DIFYY)/2.00   
# CONVERT TO CM/SEC
      WZ=WZ*1.005
      DFLER=DZZER 
      DFTER=(DXXER+DYYER)/2.00 
# CALCULATE TOWNS# end COEFICIENTS AND ERRORS
      ANCATT=0.00
      ANCION=0.00
      DO 800 I=1,NGAS
      ANCATT=ANCATT+ICOLL((5*I)-2)
  800 ANCION=ANCION+ICOLL((5*I)-3)
      ANCION=ANCION+IEXTRA
      ATTER=0.0
      IF(ANCATT == 0.00):
 GO TO 810
      ATTER=100.0*math.sqrt(ANCATT)/ANCATT
  810 ATT=ANCATT/(ST*WZ)*1.0D12
      ALPER=0.0
      IF(ANCION == 0.00):
 GO TO 820
      ALPER=100.0*math.sqrt(ANCION)/ANCION
  820 ALPHA=ANCION/(ST*WZ)*1.0D12                                  
      RETURN                                                            
      # end                                                               
      def MONTEB                                                 :
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX
      COMMON/BFLD/EOVB,WB,BTHETA,BMAG                                   
      COMMON/LARGE/CF(4000,960),EIN(960),TCF(4000),IARRY(960),RGAS(960),
     /IPN(960),WPL(960),LAST,ISIZE,PENFRA[3,960],TCFMAX(8)
      COMMON/LARGEN/CFN(4000,60),TCFN(4000),SCLENUL(60),NPLAST
      COMMON/ANIS/PSCT(4000,960),ANGCT(4000,960),INDEX(960),NISO
      COMMON/IONFL1/NC0(960),EC0(960),NG1(960),EG1(960),NG2(960),
     /EG2(960),WKLM(960),EFL(960)
      COMMON/MIX2/ES(4000),EROOT(4000),QTOT(4000),QREL(4000),QINEL(4000)
     /,QEL(4000)      
      COMMON/DECOR/NCOLM,NCORLN,NCORST            
      COMMON/DIFLAB/DIFXX,DIFYY,DIFZZ,DIFYZ,DIFXY,DIFXZ
      COMMON/DIFERB/DXXER,DYYER,DZZER,DYZER,DXYER,DXZER 
      COMMON/DIFVEL/DIFLN,DIFTR
      COMMON/DIFERL/DFLER,DFTER
      COMMON/VEL/WX,WY,WZ
      COMMON/VELERR/DWX,DWY,DWZ
      COMMON/CTOWNS/ALPHA,ATT
      COMMON/CTWNER/ALPER,ATTER
      COMMON/OUTPT/TIME(300),ICOLL(30),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(960),ICOLNN(60)   
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9]      
      DIMENSION XST(2000000),YST(2000000),ZST(2000000),STO(2000000)
      DIMENSION WZST(10),WYST(10),AVEST(10)
      DIMENSION DFZZST(10),DFYYST(10),DFXXST(10)
      DIMENSION DFYZST(10),DFLNST(10),DFTRST(10)  
      DIMENSION TEMP(4000)                      
# -------------------------------------------------------------------   
#   CALCULATES COLLISION EVENTS AND UPDATES DIFFUSION AND VELOCITY. 
#   def HANDLES MAGNETIC FIELD AND ELECTRIC FIELD
#   BFIELD ALONG X-AXIS EFIELD ALONG Z-AXIS (90 DEGREES).   
# ------------------------------------------------------------------- 
      WX=0.00
      DWX=0.00
      DIFXZ=0.00
      DIFXY=0.00
      DXZER=0.00
      DXYER=0.00
      X=0.00
      Y=0.00
      Z=0.00 
      ST=0.00
      ST1=0.00
      ST2=0.00                                                         
      SUMXX=0.00 
      SUMYY=0.00                                                       
      SUMZZ=0.00
      SUMYZ=0.00
      SUMLS=0.00                                                       
      SUMTS=0.00
      SUMVX=0.00
      ZOLD=0.00
      YOLD=0.00
      STOLD=0.00
      ST1OLD=0.00
      ST2OLD=0.00
      SZZOLD=0.00
      SXXOLD=0.00
      SYYOLD=0.00
      SYZOLD=0.00
      SVXOLD=0.00
      SLNOLD=0.00
      STROLD=0.00
      EBAROLD=0.00
      SMALL=1.0D-20                                                     
      TMAX1=0.00  
      EF100=EFIELD*100.00
      RDUM=RSTART                                                       
      E1=ESTART    
      N4000=4000
      N300=300                                                     
      INTEM=8                                                           
      ITMAX=10 
      ID=0                                                              
      NCOL=0                                                            
      NNULL=0  
      IEXTRA=0
      TDASH=0.00 
      CONST9=CONST3*0.010
#
      DO 111 J=1,N4000
  111 TEMP(J)=TCFN(J)+TCF(J)                     
      ABSFAKEI=FAKEI
      IFAKE=0                      :
#                                                                       
#     INITIAL DIRECTION COSINES                                         
#                                                                       
      DCZ1=DCOS(THETA)                                                  
      DCX1=DSIN(THETA)*DCOS(PHI)                                        
      DCY1=DSIN(THETA)*DSIN(PHI)                                        
#     INITIAL VELOCITY
      VTOT=CONST9*math.sqrt(E1)
      CX1=DCX1*VTOT                               
      CY1=DCY1*VTOT             
      CZ1=DCZ1*VTOT                                           
      F4=2.00*DACOS(-1.00)                                            
      DELTAE=EFINAL/DFLOAT(INTEM)                                       
      J2M=NMAX/ITMAX                                                    
# MAIN LOOP 
      DO 210 J1=1,ITMAX                                                 
      DO 133 J2=1,J2M
    1 R1=drand48(RDUM) 
      I=DINT(E1/DELTAE)+1                                            
      I=DMIN0(I,INTEM)                                               
      TLIM=TCFMAX(I)                                                    
      T=-math.log(R1)/TLIM+TDASH                                            
      TDASH=T                                                           
      WBT=WB*T
      COSWT=DCOS(WBT)
      SINWT=DSIN(WBT)
      DZ=(CZ1*SINWT+(EOVB-CY1)*(1.00-COSWT))/WB
      E=E1+DZ*EF100 
#     IF(E < 0.0) WRITE(6,983) J2,DZ,E1,COSWT,SINWT,WBT,CY1
#983  FORMAT(2X,' J2=',I12,' DZ=',D12.3,' E1=',D12.3,' COSWT=',D12.3
#    /,' SINWT=',D12.3,' WBT=',D12.3,' CY1=',D12.3)                                                      
      IE=DINT(E/ESTEP)+1                                             
      IE=DMIN0(IE,N4000)                                              
      IF(TEMP(IE):
 > TLIM) :                                       
       TDASH=TDASH+math.log(R1)/TLIM                                        
       TCFMAX(I)=1.050*TCFMAX(I)                                       
#
#      WRITE(6,996)
#996   FORMAT(/,5X,' WARNING NULL COLLISION TIME INCREASED',/)           
       GO TO 1   
      # endIF                                                         
#                                                                       
#     TEST FOR #real OR NULL COLLISION                                   
#                                                                       
      R5=drand48(RDUM)
      TEST1=TCF(IE)/TLIM                                               
      IF(R5 <= TEST1):
 GO TO 137                                         
      NNULL=NNULL+1 
      TEST2=TEMP(IE)/TLIM
      IF(R5 < TEST2):
 :
# TEST FOR NULL LEVELS
       IF(NPLAST == 0):
 GO TO 1
       R2=drand48(RDUM)
       I=0
  888  I=I+1
       IF(CFN(IE,I):
 < R2) GO TO 888
# INCREMENT NULL SCATTER SUM
       ICOLNN(I)=ICOLNN(I)+1
       GO TO 1
      # endIF
      TEST3=(TEMP(IE)+ABSFAKEI)/TLIM
      IF(R5 < TEST3):
 :
# FAKE IONISATION INCREMENT COUNTER
       IFAKE=IFAKE+1:
       GO TO 1
      # endIF
      GO TO 1    
#                                                                       
#  CALCULATE DIRECTION COSINES AND POSITIONS AT INSTANT BEFORE COLLISION
#    ALSO UPDATE DIFFUSION  AND ENERGY CALCULATIONS.                    
  137 T2=T*T
      IF(T >= TMAX1):
 TMAX1=T                                            
      TDASH=0.00                                                       
#  CALC VELOCITY
      CX2=CX1
      CY2=(CY1-EOVB)*COSWT+CZ1*SINWT+EOVB
      CZ2=CZ1*COSWT-(CY1-EOVB)*SINWT
# CALC DIRECTION COSINE
      VTOT=math.sqrt(CX2*CX2+CY2*CY2+CZ2*CZ2)
      DCX2=CX2/VTOT
      DCY2=CY2/VTOT
      DCZ2=CZ2/VTOT
      NCOL=NCOL+1                                                       
# CALC NEW POSITION
      X=X+CX1*T
      Y=Y+EOVB*T+((CY1-EOVB)*SINWT+CZ1*(1.00-COSWT))/WB
      Z=Z+DZ                                   
      ST=ST+T                                                           
      IT=DINT(T+1.00)           
      IT=DMIN0(IT,N300)                                               
      TIME(IT)=TIME(IT)+1.00  
      SPEC(IE)=SPEC(IE)+1.00                                           
      WZ=Z/ST
      WY=Y/ST
      SUMVX=SUMVX+CX1*CX1*T2                                  
      IF(ID == 0):
 GO TO 121
      KDUM=0
      DO 120 J=1,NCORST
      ST2=ST2+T
      NCOLDM=NCOL+KDUM
      IF(NCOLDM > NCOLM):
 NCOLDM=NCOLDM-NCOLM
      SDIF=ST-STO(NCOLDM)
      SUMXX=SUMXX+((X-XST(NCOLDM))**2)*T/SDIF 
      IF(J1 < 3):
 GO TO 120  
      ST1=ST1+T     
      SUMZZ=SUMZZ+((Z-ZST(NCOLDM)-WZ*SDIF)**2)*T/SDIF
      SUMYY=SUMYY+((Y-YST(NCOLDM)-WY*SDIF)**2)*T/SDIF               
      SUMYZ=SUMYZ+(Z-ZST(NCOLDM)-WZ*SDIF)*(Y-YST(NCOLDM)-WY*SDIF)*T/SDIF
      A2=(WZ*SDIF)**2+(WY*SDIF)**2
      B2=(Z-WZ*SDIF-ZST(NCOLDM))**2+(Y-WY*SDIF-YST(NCOLDM))**2 
      C2=(Z-ZST(NCOLDM))**2+(Y-YST(NCOLDM))**2
      DL2=(A2+B2-C2)**2/(4.00*A2)
      DT2=B2-DL2
      SUMLS=SUMLS+DL2*T/SDIF
      SUMTS=SUMTS+DT2*T/SDIF
 120  KDUM=KDUM+NCORLN   
 121  XST(NCOL)=X                                                       
      YST(NCOL)=Y                                                       
      ZST(NCOL)=Z                                                       
      STO(NCOL)=ST                                                      
      IF(NCOL >= NCOLM):
 :     
       ID=ID+1                                                          
       XID=DFLOAT(ID)                                                   
       NCOL=0 
      # endIF                                                            
# --------------------------------------------------------------------- 
#     DETERMINATION OF #real COLLISION TYPE                              
# --------------------------------------------------------------------- 
      R2=drand48(RDUM)
# FIND LOCATION WITHIN 4 UNITS IN COLLISION ARRAY                                                        
      CALL SORT(I,R2,IE)                                                
  140 I=I+1                                                             
      IF(CF(IE,I):
 < R2) GO TO 140                                      
      S1=RGAS(I)                                                        
      EI=EIN(I)
      IF(IPN(I):
 <= 0) GO TO 666                                         
#  USE FLAT DISTRIBUTION OF  ELECTRON ENERGY BETWEEN E-EION AND 0.0 EV  
#  SAME AS IN BOLTZMANN                                                 
      R9=drand48(RDUM)
      EXTRA=R9*(E-EI)                                                   
      EI=EXTRA+EI                
# IF AUGER OR FLUORESCENCE ADD EXTRA IONISATION ELECTRONS
      IEXTRA=IEXTRA+NC0(I)                                       
#                                                                       
#  GENERATE SCATTERING ANGLES AND UPDATE  LABORATORY COSINES AFTER      
#   COLLISION ALSO UPDATE ENERGY OF ELECTRON.                           
#                                                                       
  666 IPT=IARRY(I)
      ICOLL(IPT)=ICOLL(IPT)+1
      ICOLN(I)=ICOLN(I)+1
      IF(E < EI):
 :
#      WRITE(6,994) E,EI,J2
#994  FORMAT(2X,' WARNING ENERGY =',F8.3,' LESS THAN ENERGY LOSS EI=',F8
#    /.3,' AT ITER=',I12,' DUE TO BINNING ERROR')
#  FIX ENERGY LOSS SMALLER THAN INCIDENT ENERGY IF ERROR OCCURS
       EI=E-0.00010
      # endIF
# IF EXCITATION : ADD PROBABILITY,PENFRAC(1,I), OF TRANSFER TO GIVE
# IONISATION OF THE OTHER GASES IN THE MIXTURE
      IF(IPEN == 0):
 GO TO 5
      IF(PENFRA[1,I] != 0.0):
 :
       RAN=drand48(RDUM)
       IF(RAN > PENFRA[1,I]):
 GO TO 5
# ADD EXTRA IONISATION COLLISION
       IEXTRA=IEXTRA+1
      # endIF
    5 S2=(S1*S1)/(S1-1.00) 
#  ANISOTROPIC SCATTERING
      R3=drand48(RDUM)
      IF(INDEX(I):
 == 1) :
        R31=drand48(RDUM)
        F3=1.00-R3*ANGCT(IE,I)
        IF(R31 > PSCT(IE,I):
) F3=-F3
      elif(INDEX(I) == 2) :
       EPSI=PSCT(IE,I)
       F3=1.00-(2.00*R3*(1.00-EPSI)/(1.00+EPSI*(1.00-2.00*R3)))
      else:
# ISOTROPIC SCATTERING
        F3=1.00-2.00*R3
      # endIF
      THETA0=DACOS(F3)                                                  
      R4=drand48(RDUM)
      PHI0=F4*R4                                                        
      F8=DSIN(PHI0)                                                     
      F9=DCOS(PHI0)                                                     
      ARG1=1.00-S1*EI/E                                                
      ARG1=DMAX1(ARG1,SMALL)                                            
      D=1.00-F3*math.sqrt(ARG1)                                            
      E1=E*(1.00-EI/(S1*E)-2.00*D/S2)                                 
      E1=DMAX1(E1,SMALL)                                                
      Q=math.sqrt((E/E1)*ARG1)/S1                                           
      Q=DMIN1(Q,1.00)                                                  
      THETA=DASIN(Q*DSIN(THETA0))                                       
      F6=DCOS(THETA)                                                    
      U=(S1-1.00)*(S1-1.00)/ARG1
      CSQD=F3*F3                                                        
      IF(F3 < 0.00 and CSQD > U):
 F6=-1.00*F6                        
      F5=DSIN(THETA)                                                    
      DCZ2=DMIN1(DCZ2,1.00)
      VTOT=CONST9*math.sqrt(E1)                                            
      ARGZ=math.sqrt(DCX2*DCX2+DCY2*DCY2)
      IF(ARGZ == 0.00):
 :
#      WRITE(6,9232) ITER,ID,E1
#9232  FORMAT(3X,'WARNING ARGZ= 0.0 AT ITER =',I10,' ID =',I10,' E1=',E1
#    /2.3)
       DCZ1=F6
       DCX1=F9*F5
       DCY1=F8*F5
       GO TO 130
      # endIF                                          
      DCZ1=DCZ2*F6+ARGZ*F5*F8                                           
      DCY1=DCY2*F6+(F5/ARGZ)*(DCX2*F9-DCY2*DCZ2*F8)                     
      DCX1=DCX2*F6-(F5/ARGZ)*(DCY2*F9+DCX2*DCZ2*F8)                     
# CALCULATE VELOCITY VECTORS AFTER COLLISION             
  130 CX1=DCX1*VTOT
      CY1=DCY1*VTOT
      CZ1=DCZ1*VTOT                                                     
  133 CONTINUE                                                          
#   ------------------------------------------  
      IF(J1 == 1):
 WRITE(6,201)                                         
  201 FORMAT(/,'   VELZ    VELY  ENERGY   ID  DIFXX   DIFYY   DIFZZ   DI
     /FYZ  DIFLNG  DIFTRN',/)       
      WZ=WZ*1.0D+09
      WY=WY*1.0D+09
      IF(ST2 != 0.00):
 DIFXX=5.0D+15*SUMXX/ST2
      IF(ST1 != 0.00):
 DIFYY=5.0D+15*SUMYY/ST1
      IF(ST1 != 0.00):
 DIFZZ=5.0D+15*SUMZZ/ST1
      IF(ST1 != 0.00):
 DIFYZ=-5.0D+15*SUMYZ/ST1
      IF(ST1 != 0.00):
 DIFLN=5.0D+15*SUMLS/ST1
      IF(ST1 != 0.00):
 DIFTR=5.0D+15*SUMTS/ST1
      IF(NISO == 0):
 DIFXX=5.0D+15*SUMVX/ST
      EBAR=0.00
      DO 300 IK=1,4000
  300 EBAR=EBAR+ES(IK)*SPEC(IK)/TCF(IK)       
      AVE=EBAR/ST
      WZST(J1)=(Z-ZOLD)/(ST-STOLD)*1.0D+09
      WYST(J1)=(Y-YOLD)/(ST-STOLD)*1.0D+09
      AVEST(J1)=(EBAR-EBAROLD)/(ST-STOLD)
      EBAROLD=EBAR
      DFZZST(J1)=0.00
      DFYYST(J1)=0.00
      DFYZST(J1)=0.00
      DFLNST(J1)=0.00
      DFTRST(J1)=0.00
      IF(J1 > 2):
 : 
       DFZZST(J1)=5.0D+15*(SUMZZ-SZZOLD)/(ST1-ST1OLD)
       DFYYST(J1)=5.0D+15*(SUMYY-SYYOLD)/(ST1-ST1OLD)
       DFYZST(J1)=5.0D+15*(SUMYZ-SYZOLD)/(ST1-ST1OLD)
       DFLNST(J1)=5.0D+15*(SUMLS-SLNOLD)/(ST1-ST1OLD)
       DFTRST(J1)=5.0D+15*(SUMTS-STROLD)/(ST1-ST1OLD)
      # endIF
      DFXXST(J1)=5.0D+15*(SUMXX-SXXOLD)/(ST2-ST2OLD)
      IF(NISO == 0):
 DFXXST(J1)=5.0D+15*(SUMVX-SVXOLD)/(ST-STOLD)
      ZOLD=Z
      YOLD=Y
      STOLD=ST
      ST1OLD=ST1
      ST2OLD=ST2
      SVXOLD=SUMVX
      SZZOLD=SUMZZ
      SXXOLD=SUMXX
      SYYOLD=SUMYY
      SYZOLD=SUMYZ
      SLNOLD=SUMLS
      STROLD=SUMTS
      WRITE(6,202) WZ,WY,AVE,ID,DIFXX,DIFYY,DIFZZ,
     /DIFYZ,DIFLN,DIFTR                                                 
  202 FORMAT(2(F7.2,1X),F7.4,1X,I4,6(F7.1,1X))   
#  LOOP                                                                       
  210 CONTINUE
# CALCULATE ERRORS AND CHECK AVERAGES
      TWZST=0.00
      TWYST=0.00
      TAVE=0.00
      T2WZST=0.00
      T2WYST=0.00
      T2AVE=0.00
      TZZST=0.00
      TYYST=0.00
      TXXST=0.00
      TYZST=0.00
      TLNST=0.00
      TTRST=0.00
      T2ZZST=0.00
      T2YYST=0.00
      T2XXST=0.00
      T2YZST=0.00
      T2LNST=0.00
      T2TRST=0.00
      DO 768 K=1,10
      TWZST=TWZST+WZST(K)
      TWYST=TWYST+WYST(K)
      TAVE=TAVE+AVEST(K)
      T2WZST=T2WZST+WZST(K)*WZST(K)
      T2WYST=T2WYST+WYST(K)*WYST(K)
      T2AVE=T2AVE+AVEST(K)*AVEST(K)
      TXXST=TXXST+DFXXST(K)
      T2XXST=T2XXST+DFXXST(K)*DFXXST(K)
      IF(K < 3):
 GO TO 768
      TZZST=TZZST+DFZZST(K)
      TYYST=TYYST+DFYYST(K)
      TYZST=TYZST+DFYZST(K)
      TLNST=TLNST+DFLNST(K)
      TTRST=TTRST+DFTRST(K)
      T2ZZST=T2ZZST+DFZZST(K)*DFZZST(K)    
      T2YYST=T2YYST+DFYYST(K)*DFYYST(K)     
      T2YZST=T2YZST+DFYZST(K)*DFYZST(K)     
      T2LNST=T2LNST+DFLNST(K)*DFLNST(K)    
      T2TRST=T2TRST+DFTRST(K)*DFTRST(K)       
  768 CONTINUE 
      DWZ=100.00*math.sqrt((T2WZST-TWZST*TWZST/10.00)/9.00)/WZ
      DWY=100.00*math.sqrt((T2WYST-TWYST*TWYST/10.00)/9.00)/abs(WY)
      DEN=100.00*math.sqrt((T2AVE-TAVE*TAVE/10.00)/9.00)/AVE
      DXXER=100.00*math.sqrt((T2XXST-TXXST*TXXST/10.00)/9.00)/DIFXX  
      DYYER=100.00*math.sqrt((T2YYST-TYYST*TYYST/8.00)/7.00)/DIFYY       
      DZZER=100.00*math.sqrt((T2ZZST-TZZST*TZZST/8.00)/7.00)/DIFZZ    
      DYZER=100.00*math.sqrt((T2YZST-TYZST*TYZST/8.00)/7.00)/abs(DIFYZ)
      DFLER=100.00*math.sqrt((T2LNST-TLNST*TLNST/8.00)/7.00)/DIFLN
      DFTER=100.00*math.sqrt((T2TRST-TTRST*TTRST/8.00)/7.00)/DIFTR
      DWZ=DWZ/math.sqrt(10.00)
      DWY=DWY/math.sqrt(10.00)
      DEN=DEN/math.sqrt(10.00)
      DXXER=DXXER/math.sqrt(10.00)
      DYYER=DYYER/math.sqrt(8.00)
      DZZER=DZZER/math.sqrt(8.00)
      DYZER=DYZER/math.sqrt(8.00)
      DFLER=DFLER/math.sqrt(8.00)
      DFTER=DFTER/math.sqrt(8.00) 
# CONVERT TO CM/SEC      
      WZ=WZ*1.005
      WY=WY*1.005
# CALCULATE TOWNS# end COEFICIENTS AND ERRORS
      ANCATT=0.00
      ANCION=0.00
      DO 800 I=1,NGAS
      ANCATT=ANCATT+ICOLL((5*I)-2)
  800 ANCION=ANCION+ICOLL((5*I)-3)
      ANCION=ANCION+IEXTRA
      ATTER=0.00
      IF(ANCATT == 0.00):
 GO TO 810
      ATTER=100.00*math.sqrt(ANCATT)/ANCATT
  810 ATT=ANCATT/(ST*WZ)*1.0D12
      ALPER=0.00
      IF(ANCION == 0.00):
 GO TO 820
      ALPER=100.00*math.sqrt(ANCION)/ANCION
  820 ALPHA=ANCION/(ST*WZ)*1.0D12    
      RETURN                                                            
      # end 
      def MONTEC                                                 :
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX
      COMMON/BFLD/EOVB,WB,BTHETA,BMAG                                   
      COMMON/LARGE/CF(4000,960),EIN(960),TCF(4000),IARRY(960),RGAS(960),
     /IPN(960),WPL(960),LAST,ISIZE,PENFRA[3,960],TCFMAX(8)
      COMMON/LARGEN/CFN(4000,60),TCFN(4000),SCLENUL(60),NPLAST
      COMMON/ANIS/PSCT(4000,960),ANGCT(4000,960),INDEX(960),NISO  
      COMMON/IONFL1/NC0(960),EC0(960),NG1(960),EG1(960),NG2(960),
     /EG2(960),WKLM(960),EFL(960)      
      COMMON/MIX2/ES(4000),EROOT(4000),QTOT(4000),QREL(4000),QINEL(4000)
     /,QEL(4000)      
      COMMON/DECOR/NCOLM,NCORLN,NCORST            
      COMMON/DIFLAB/DIFXX,DIFYY,DIFZZ,DIFYZ,DIFXY,DIFXZ 
      COMMON/DIFERB/DXXER,DYYER,DZZER,DYZER,DXYER,DXZER
      COMMON/DIFVEL/DIFLN,DIFTR
      COMMON/DIFERL/DFLER,DFTER
      COMMON/VEL/WX,WY,WZ            
      COMMON/VELERR/DWX,DWY,DWZ
      COMMON/CTOWNS/ALPHA,ATT 
      COMMON/CTWNER/ALPER,ATTER   
      COMMON/OUTPT/TIME(300),ICOLL(30),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(960),ICOLNN(60)    
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9]            
      DIMENSION XST(2000000),YST(2000000),ZST(2000000),STO(2000000)
      DIMENSION WZST(10),WYST(10),WXST(10),AVEST(10)
      DIMENSION DFZZST(10),DFYYST(10),DFXXST(10) 
      DIMENSION DFYZST(10),DFXYST(10),DFXZST(10)
      DIMENSION TEMP(4000)
# -------------------------------------------------------------------   
#   CALCULATES COLLISION EVENTS AND UPDATES DIFFUSION AND VELOCITY. 
#   def SOLVES MOTION IN COORDINATE SYSTEM WITH BFIELD
#   ALIGNED ALONG X AXIS AND ELECTRIC FIELD AT AN ANGLE BTHETA IN
#   THE X-Z PLANE.  THE VELOCITY VECTORS AND DIFFUSION ARE :
#   ROTATED INTO THE STANDARD COORDINATE FRAME WITH THE ELECTRIC-
#   FIELD ALONG Z-AXIS AND THE  BFIELD AT AN ANGLE BTHETA TO THE 
#   ELECTRIC FIELD IN THE X-Z PLANE.
# -------------------------------------------------------------------
      X=0.00
      Y=0.00
      Z=0.00 
# CALC LONG AND TRANS ONLY FOR 90 DEGREES BETWEEN E AND B      
      DIFLN=0.00
      DIFTR=0.00
      DFLER=0.00
      DFTER=0.00
      DIFXXR=0.00
      DIFYYR=0.00
      DIFZZR=0.00
      DIFYZR=0.00
      DIFXZR=0.00
      DIFXYR=0.00
      ST=0.00
      ST1=0.00
      SUMXX=0.00 
      SUMYY=0.00                                                       
      SUMZZ=0.00
      SUMYZ=0.00
      SUMXY=0.00
      SUMXZ=0.00
      ZROLD=0.00
      YROLD=0.00
      XROLD=0.00
      SZZR=0.00
      SYYR=0.00
      SXXR=0.00
      SXYR=0.00
      SYZR=0.00
      SXZR=0.00
      STOLD=0.00
      ST1OLD=0.00
      ST2OLD=0.00
      SZZOLD=0.00
      SYYOLD=0.00
      SXXOLD=0.00
      SYZOLD=0.00
      SXYOLD=0.00
      SXZOLD=0.00
      EBAROLD=0.00
      SMALL=1.0D-20                                                     
      TMAX1=0.00
      API=DACOS(-1.00)
# CALC ROTATION MATRIX ANGLES
      RCS=DCOS((BTHETA-90.00)*API/180.00)  
      RSN=DSIN((BTHETA-90.00)*API/180.00)
#            
      RTHETA=BTHETA*API/180.00  
      EFZ100=EFIELD*100.00*DSIN(RTHETA)
      EFX100=EFIELD*100.00*DCOS(RTHETA)
      F1=EFIELD*CONST2*DCOS(RTHETA)
      EOVBR=EOVB*DSIN(RTHETA)
      RDUM=RSTART                                                       
      E1=ESTART    
      N4000=4000
      N300=300                                                     
      INTEM=8                                                           
      ITMAX=10 
      ID=0                                                              
      NCOL=0                                                            
      NNULL=0    
      IEXTRA=0                                         
      TDASH=0.00 
      CONST9=CONST3*0.010
#
      DO 111 J=1,N4000
  111 TEMP(J)=TCFN(J)+TCF(J)                     
      ABSFAKEI=FAKEI
      IFAKE=0                    :
#                                                                       
#     INITIAL DIRECTION COSINES                                         
#                                                                       
      DCZ1=DCOS(THETA)                                                  
      DCX1=DSIN(THETA)*DCOS(PHI)                                        
      DCY1=DSIN(THETA)*DSIN(PHI)                                        
#     INITIAL VELOCITY
      VTOT=CONST9*math.sqrt(E1)
      CX1=DCX1*VTOT                               
      CY1=DCY1*VTOT             
      CZ1=DCZ1*VTOT                                           
      F4=2.00*API                                                      
      DELTAE=EFINAL/DFLOAT(INTEM)                                       
      J2M=NMAX/ITMAX                                                    
# MAIN LOOP 
      DO 210 J1=1,ITMAX                                                 
      DO 133 J2=1,J2M
    1 R1=drand48(RDUM) 
      I=DINT(E1/DELTAE)+1                                             
      I=DMIN0(I,INTEM)                                                
      TLIM=TCFMAX(I)                                                    
      T=-math.log(R1)/TLIM+TDASH                                            
      TDASH=T                                                           
      WBT=WB*T
      COSWT=DCOS(WBT)
      SINWT=DSIN(WBT)
      DZ=(CZ1*SINWT+(EOVBR-CY1)*(1.00-COSWT))/WB
      DX=CX1*T+F1*T*T
      E=E1+DZ*EFZ100+DX*EFX100 
#     IF(E < 0.0) WRITE(6,983) J2,DZ,E1,COSWT,SINWT,WBT,CY1
#983  FORMAT(2X,' J2=',I12,' DZ=',D12.3,' E1=',D12.3,' COSWT=',D12.3
#    /,' SINWT=',D12.3,' WBT=',D12.3,' CY1=',D12.3)  
      IE=DINT(E/ESTEP)+1                                             
      IE=DMIN0(IE,N4000)                                               
      IF(TEMP(IE):
 > TLIM) :                                        
       TDASH=TDASH+math.log(R1)/TLIM                                        
       TCFMAX(I)=1.050*TCFMAX(I)                                       
#      WRITE(6,996)                                                      
#996   FORMAT(/,5X,' WARNING NULL COLLISION TIME INCREASED',/)           
       GO TO 1    
      # endIF                                                        
#                                                                       
#     TEST FOR #real OR NULL COLLISION                                   
#                                                                       
      R5=drand48(RDUM)
      TEST1=TCF(IE)/TLIM                                               
      IF(R5 <= TEST1):
 GO TO 137                                         
      NNULL=NNULL+1 
      TEST2=TEMP(IE)/TLIM
      IF(R5 < TEST2):
 :
# TEST FOR NULL LEVELS
       IF(NPLAST == 0):
 GO TO 1
       R2=drand48(RDUM)
       I=0
  888  I=I+1
       IF(CFN(IE,I):
 < R2) GO TO 888
# INCREMENT NULL SCATTER SUM
       ICOLNN(I)=ICOLNN(I)+1
       GO TO 1
      # endIF
      TEST3=(TEMP(IE)+ABSFAKEI)/TLIM
      IF(R5 < TEST3):
 :
# FAKE IONISATION INCREMENT COUNTER
       IFAKE=IFAKE+1:
       GO TO 1
      # endIF
      GO TO 1    
#                                                                       
#  CALCULATE DIRECTION COSINES AND POSITIONS AT INSTANT BEFORE COLLISION
#    ALSO UPDATE DIFFUSION  AND ENERGY CALCULATIONS.                    
  137 T2=T*T
      IF(T >= TMAX1):
 TMAX1=T                                            
      TDASH=0.00                                                       
#  CALC VELOCITY
      CX2=CX1+2.00*F1*T
      CY2=(CY1-EOVBR)*COSWT+CZ1*SINWT+EOVBR
      CZ2=CZ1*COSWT-(CY1-EOVBR)*SINWT
# CALC DIRECTION COSINE
      VTOT=math.sqrt(CX2*CX2+CY2*CY2+CZ2*CZ2) 
      DCX2=CX2/VTOT
      DCY2=CY2/VTOT
      DCZ2=CZ2/VTOT
      NCOL=NCOL+1                                                       
# CALC NEW POSITION
      X=X+DX    
      Y=Y+EOVBR*T+((CY1-EOVBR)*SINWT+CZ1*(1.00-COSWT))/WB
      Z=Z+DZ                                   
      ST=ST+T                                                           
      IT=DINT(T+1.00)                                               
      IT=DMIN0(IT,N300)                                               
      TIME(IT)=TIME(IT)+1.00  
      SPEC(IE)=SPEC(IE)+1.00                                           
      WZ=Z/ST
      WY=Y/ST
      WX=X/ST
      IF(J1 < 3):
 GO TO 121
      KDUM=0
      DO 120 J=1,NCORST
      NCOLDM=NCOL+KDUM
      IF(NCOLDM > NCOLM):
 NCOLDM=NCOLDM-NCOLM
      ST1=ST1+T     
      SDIF=ST-STO(NCOLDM)                                               
      SUMZZ=SUMZZ+((Z-ZST(NCOLDM)-WZ*SDIF)**2)*T/SDIF
      SUMYY=SUMYY+((Y-YST(NCOLDM)-WY*SDIF)**2)*T/SDIF
      SUMXX=SUMXX+((X-XST(NCOLDM)-WX*SDIF)**2)*T/SDIF               
      SUMYZ=SUMYZ+(Z-ZST(NCOLDM)-WZ*SDIF)*(Y-YST(NCOLDM)-WY*SDIF)*T/SDIF
      SUMXY=SUMXY+(X-XST(NCOLDM)-WX*SDIF)*(Y-YST(NCOLDM)-WY*SDIF)*T/SDIF
      SUMXZ=SUMXZ+(X-XST(NCOLDM)-WX*SDIF)*(Z-ZST(NCOLDM)-WZ*SDIF)*T/SDIF
 120  KDUM=KDUM+NCORLN   
 121  XST(NCOL)=X                                                       
      YST(NCOL)=Y                                                       
      ZST(NCOL)=Z                                                       
      STO(NCOL)=ST                                                      
      IF(NCOL >= NCOLM):
 :      
       ID=ID+1                                                          
       XID=DFLOAT(ID)                                                   
       NCOL=0  
      # endIF                                                           
# --------------------------------------------------------------------- 
#     DETERMINATION OF #real COLLISION TYPE                              
# --------------------------------------------------------------------- 
      R2=drand48(RDUM) 
# FIND LOCATION WITHIN 4 UNITS IN COLLISION ARRAY       
      CALL SORT(I,R2,IE)                                                
  140 I=I+1                                                             
      IF(CF(IE,I):
 < R2) GO TO 140                                      
      S1=RGAS(I)                                                        
      EI=EIN(I)
      IF(IPN(I):
 <= 0) GO TO 666                                         
#  USE FLAT DISTRIBUTION OF  ELECTRON ENERGY BETWEEN E-EION AND 0.0 EV  
#  SAME AS IN BOLTZMANN                                                 
      R9=drand48(RDUM)  
      EXTRA=R9*(E-EI)                                                   
      EI=EXTRA+EI                
# IF AUGER OR FLUORESCENCE ADD EXTRA IONISATION ELECTRONS
      IEXTRA=IEXTRA+NC0(I)                                       
#                                                                       
#  GENERATE SCATTERING ANGLES AND UPDATE  LABORATORY COSINES AFTER      
#   COLLISION ALSO UPDATE ENERGY OF ELECTRON.                           
#                                                                       
  666 IPT=IARRY(I)
      ICOLL(IPT)=ICOLL(IPT)+1
      ICOLN(I)=ICOLN(I)+1
      IF(E < EI):
 :
#      WRITE(6,994) E,EI,J2
#994  FORMAT(2X,' WARNING ENERGY =',F8.3,' LESS THAN ENERGY LOSS EI=',F8
#    /.3,' AT ITER=',I12,' DUE TO BINNING ERROR')
#  FIX ENERGY LOSS SMALLER THAN INCIDENT ENERGY IF ERROR OCCURS
       EI=E-0.00010
      # endIF
# IF EXCITATION : ADD PROBABILITY, PENFRA(1,I), OF TRANSFER TO GIVE
# IONISATION OF THE OTHER GASES IN THE MIXTURE
      IF(IPEN == 0):
 GO TO 5
      IF(PENFRA[1,I] != 0.0):
 :
       RAN=drand48(RDUM)
       IF(RAN > PENFRA[1,I]):
 GO TO 5
# ADD EXTRA IONISATION COLLISION
       IEXTRA=IEXTRA+1
      # endIF
    5 S2=(S1*S1)/(S1-1.00)  
# ANISOTROPIC SCATTERING 
      R3=drand48(RDUM)
      IF(INDEX(I):
 == 1) :
        R31=drand48(RDUM)
        F3=1.00-R3*ANGCT(IE,I)
        IF(R31 > PSCT(IE,I):
) F3=-F3
      elif(INDEX(I) == 2) :
       EPSI=PSCT(IE,I)
       F3=1.00-(2.00*R3*(1.00-EPSI)/(1.00+EPSI*(1.00-2.00*R3)))
      else:
# ISOTROPIC SCATTERING
        F3=1.00-2.00*R3
      # endIF
      THETA0=DACOS(F3)                                                  
      R4=drand48(RDUM)
      PHI0=F4*R4                                                        
      F8=DSIN(PHI0)                                                     
      F9=DCOS(PHI0)                                                     
      ARG1=1.00-S1*EI/E                                                
      ARG1=DMAX1(ARG1,SMALL)                                            
      D=1.00-F3*math.sqrt(ARG1)                                            
      E1=E*(1.00-EI/(S1*E)-2.00*D/S2)                                 
      E1=DMAX1(E1,SMALL)                                                
      Q=math.sqrt((E/E1)*ARG1)/S1                                           
      Q=DMIN1(Q,1.00)                                                  
      THETA=DASIN(Q*DSIN(THETA0))                                       
      F6=DCOS(THETA)                                                    
      U=(S1-1.00)*(S1-1.00)/ARG1
      CSQD=F3*F3                                                        
      IF(F3 < 0.00 and CSQD > U):
 F6=-1.00*F6
      F5=DSIN(THETA)
      DCZ2=DMIN1(DCZ2,1.00)
      VTOT=CONST9*math.sqrt(E1)                                            
      ARGZ=math.sqrt(DCX2*DCX2+DCY2*DCY2)
      IF(ARGZ == 0.00):
 :
#      WRITE(6,9232) ITER,ID,E1
#9232  FORMAT(3X,'WARNING ARGZ= 0.0 AT ITER =',I10,' ID =',I10,' E1=',E1
#    /2.3)
       DCZ1=F6
       DCX1=F9*F5
       DCY1=F8*F5
       GO TO 130
      # endIF                                          
      DCZ1=DCZ2*F6+ARGZ*F5*F8                                           
      DCY1=DCY2*F6+(F5/ARGZ)*(DCX2*F9-DCY2*DCZ2*F8)                     
      DCX1=DCX2*F6-(F5/ARGZ)*(DCY2*F9+DCX2*DCZ2*F8)                     
# CALCULATE VELOCITY VECTORS AFTER COLLISION             
  130 CX1=DCX1*VTOT
      CY1=DCY1*VTOT
      CZ1=DCZ1*VTOT                                                     
  133 CONTINUE                                                          
#   ------------------------------------------  
      IF(J1 == 1):
 WRITE(6,201)                                         
  201 FORMAT(/,'   VELZ    VELY    VELX   ENERGY  ID  DIFXX  DIFYY  DIFZ
     /Z  DIFYZ  DIFXZ  DIFXY',/)
      WZ=WZ*1.0D+09
      WY=WY*1.0D+09
      WX=WX*1.0D+09
# CALCULATE ROTATED VECTORS AND POSITIONS
      WZR=WZ*RCS-WX*RSN
      WYR=WY
      WXR=WZ*RSN+WX*RCS
      ZR=Z*RCS-X*RSN
      YR=Y
      XR=Z*RSN+X*RCS
      EBAR=0.00
      DO 300 IK=1,4000
 300  EBAR=EBAR+ES(IK)*SPEC(IK)/TCF(IK)       
      AVE=EBAR/ST
      WZST(J1)=(ZR-ZROLD)/(ST-STOLD)*1.0D+09
      WYST(J1)=(YR-YROLD)/(ST-STOLD)*1.0D+09
      WXST(J1)=(XR-XROLD)/(ST-STOLD)*1.0D+09
      AVEST(J1)=(EBAR-EBAROLD)/(ST-STOLD)
      EBAROLD=EBAR
      IF(J1 < 3):
 GO TO 100 
      DIFXX=5.0D+15*SUMXX/ST1
      DIFYY=5.0D+15*SUMYY/ST1
      DIFZZ=5.0D+15*SUMZZ/ST1
      DIFYZ=5.0D+15*SUMYZ/ST1
      DIFXZ=5.0D+15*SUMXZ/ST1
      DIFXY=5.0D+15*SUMXY/ST1
# CALCULATE  ROTATED TENSOR .
      DIFXXR=DIFXX*RCS*RCS+DIFZZ*RSN*RSN+2.00*RCS*RSN*DIFXZ
      DIFYYR=DIFYY
      DIFZZR=DIFXX*RSN*RSN+DIFZZ*RCS*RCS-2.00*RCS*RSN*DIFXZ
      DIFXYR=RCS*DIFXY+RSN*DIFYZ   
      DIFYZR=RSN*DIFXY-RCS*DIFYZ
      DIFXZR=(RCS*RCS-RSN*RSN)*DIFXZ-RSN*RCS*(DIFXX-DIFZZ)
      SXXR=SUMXX*RCS*RCS+SUMZZ*RSN*RSN+2.00*RCS*RSN*SUMXZ
      SYYR=SUMYY
      SZZR=SUMXX*RSN*RSN+SUMZZ*RCS*RCS-2.00*RCS*RSN*SUMXZ
      SXYR=RCS*SUMXY+RSN*SUMYZ
      SYZR=RSN*SUMXY-RCS*SUMYZ
      SXZR=(RCS*RCS-RSN*RSN)*SUMXZ-RSN*RCS*(SUMXX-SUMZZ)
# 
  100 DFZZST(J1)=0.00   
      DFYYST(J1)=0.00
      DFXXST(J1)=0.00
      DFXYST(J1)=0.00
      DFYZST(J1)=0.00
      DFXZST(J1)=0.00
      IF(J1 > 2):
 : 
       DFZZST(J1)=5.0D+15*(SZZR-SZZOLD)/(ST1-ST1OLD)
       DFYYST(J1)=5.0D+15*(SYYR-SYYOLD)/(ST1-ST1OLD)
       DFXXST(J1)=5.0D+15*(SXXR-SXXOLD)/(ST1-ST1OLD)
       DFXYST(J1)=5.0D+15*(SXYR-SXYOLD)/(ST1-ST1OLD)
       DFYZST(J1)=5.0D+15*(SYZR-SYZOLD)/(ST1-ST1OLD)
       DFXZST(J1)=5.0D+15*(SXZR-SXZOLD)/(ST1-ST1OLD)
      # endIF               
      ZROLD=ZR
      YROLD=YR
      XROLD=XR
      STOLD=ST
      ST1OLD=ST1
      SZZOLD=SZZR
      SYYOLD=SYYR
      SXXOLD=SXXR
      SXYOLD=SXYR
      SYZOLD=SYZR
      SXZOLD=SXZR
# OUTPUT ROTATED VECTORS AND TENSOR       
      WRITE(6,202) WZR,WYR,WXR,AVE,ID,DIFXXR,DIFYYR,DIFZZR,
     /DIFYZR,DIFXZR,DIFXYR                                             
  202 FORMAT(3(F7.2,1X),1X,F7.4,I4,6(F7.1))   
# LOOP                                                                      
  210 CONTINUE
# CALCULATE ERRORS AND CHECK AVERAGES
      TWZST=0.00
      TWYST=0.00
      TWXST=0.00
      TAVE=0.00
      T2WZST=0.00
      T2WYST=0.00
      T2WXST=0.00
      T2AVE=0.00
      TZZST=0.00
      TYYST=0.00
      TXXST=0.00
      TXYST=0.00
      TYZST=0.00
      TXZST=0.00
      T2ZZST=0.00
      T2YYST=0.00
      T2XXST=0.00
      T2XYST=0.00
      T2YZST=0.00
      T2XZST=0.00
      DO 768 K=1,10
      TWZST=TWZST+WZST(K)
      TWYST=TWYST+WYST(K)
      TWXST=TWXST+WXST(K)
      TAVE=TAVE+AVEST(K)
      T2WZST=T2WZST+WZST(K)*WZST(K)
      T2WYST=T2WYST+WYST(K)*WYST(K)
      T2WXST=T2WXST+WXST(K)*WXST(K)
      T2AVE=T2AVE+AVEST(K)*AVEST(K)
      IF(K < 3):
 GO TO 768
      TZZST=TZZST+DFZZST(K)
      TYYST=TYYST+DFYYST(K)
      TXXST=TXXST+DFXXST(K)
      TXYST=TXYST+DFXYST(K)
      TYZST=TYZST+DFYZST(K)
      TXZST=TXZST+DFXZST(K)  
      T2ZZST=T2ZZST+DFZZST(K)*DFZZST(K)
      T2YYST=T2YYST+DFYYST(K)*DFYYST(K)
      T2XXST=T2XXST+DFXXST(K)*DFXXST(K)    
      T2XYST=T2XYST+DFXYST(K)*DFXYST(K)
      T2YZST=T2YZST+DFYZST(K)*DFYZST(K)
      T2XZST=T2XZST+DFXZST(K)*DFXZST(K)
  768 CONTINUE
      DWZ=100.00*math.sqrt((T2WZST-TWZST*TWZST/10.00)/9.00)/WZR
      DWY=100.00*math.sqrt((T2WYST-TWYST*TWYST/10.00)/9.00)/abs(WYR)
      DWX=100.00*math.sqrt((T2WXST-TWXST*TWXST/10.00)/9.00)/abs(WXR) 
      DEN=100.00*math.sqrt((T2AVE-TAVE*TAVE/10.00)/9.00)/AVE
      DZZER=100.00*math.sqrt((T2ZZST-TZZST*TZZST/8.00)/7.00)/DIFZZR
      DYYER=100.00*math.sqrt((T2YYST-TYYST*TYYST/8.00)/7.00)/DIFYYR
      DXXER=100.00*math.sqrt((T2XXST-TXXST*TXXST/8.00)/7.00)/DIFXXR
      DXYER=100.00*math.sqrt((T2XYST-TXYST*TXYST/8.00)/7.00)/abs(DIFXYR)
      DYZER=100.00*math.sqrt((T2YZST-TYZST*TYZST/8.00)/7.00)/abs(DIFYZR)
      DXZER=100.00*math.sqrt((T2XZST-TXZST*TXZST/8.00)/7.00)/abs(DIFXZR)
      DWZ=DWZ/math.sqrt(10.00)
      DWY=DWY/math.sqrt(10.00)
      DWX=DWX/math.sqrt(10.00)
      DEN=DEN/math.sqrt(10.00)
      DZZER=DZZER/math.sqrt(8.00)
      DYYER=DYYER/math.sqrt(8.00)
      DXXER=DXXER/math.sqrt(8.00)
      DXYER=DXYER/math.sqrt(8.00)
      DYZER=DYZER/math.sqrt(8.00)
      DXZER=DXZER/math.sqrt(8.00)
# LOAD ROTATED VALUES INTO ARRAYS
      WZ=WZR
      WX=WXR
      WY=WYR
      DIFXX=DIFXXR
      DIFYY=DIFYYR
      DIFZZ=DIFZZR
      DIFYZ=DIFYZR
      DIFXZ=DIFXZR
      DIFXY=DIFXYR          
# CONVERT TO CM/SEC.
      WZ=WZ*1.005
      WY=WY*1.005
      WX=WX*1.005
# CALCULATE TOWNS# end COEFICIENTS AND ERRORS
      ANCATT=0.00
      ANCION=0.00
      DO 800 I=1,NGAS
      ANCATT=ANCATT+ICOLL((5*I)-2)
  800 ANCION=ANCION+ICOLL((5*I)-3)
      ANCION=ANCION+IEXTRA
      ATTER=0.00
      IF(ANCATT == 0.00):
 GO TO 810
      ATTER=100.00*math.sqrt(ANCATT)/ANCATT
  810 ATT=ANCATT/(ST*WZ)*1.0D12
      ALPER=0.00
      IF(ANCION == 0.00):
 GO TO 820
      ALPER=100.00*math.sqrt(ANCION)/ANCION
  820 ALPHA=ANCION/(ST*WZ)*1.0D12                
      RETURN                                                            
      # end 
      def ELIMIT(IELOW):                                          
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2             
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX   
      COMMON/LARGE/CF(4000,960),EIN(960),TCF(4000),IARRY(960),RGAS(960),
     /IPN(960),WPL(960),LAST,ISIZE,PENFRA[3,960],TCFMAX(8)
      COMMON/LARGEN/CFN(4000,60),TCFN(4000),SCLENUL(60),NPLAST
      COMMON/ANIS/PSCT(4000,960),ANGCT(4000,960),INDEX(960),NISO  
      DIMENSION TEMP(4000)      
# -------------------------------------------------------------------   
#   CALCULATES COLLISION EVENTS AND TESTS TO FIND IF THE UPPER ENERGY  
#   LIMIT FOR THE ELECTRON ENERGY IS EXCEEDED. 
#    IF ENERGY LIMIT IS OK       IELOW = 0
#    IF ENERGY LIMIT IS EXCEEDED IELOW = 1          
#   THE TEST IS CARRIED OUT FOR A SAMPLE OF COLLISIONS THAT ARE
#   SMALLER THAN THE FULL SAMPLE BY A FACTOR OF 1/ISAMP
#   
#   USED WITH MAGNETIC FIELD B =0.0   ELECTRIC FIELD IN Z DIRECTION.
# -------------------------------------------------------------------
      ISAMP=10
      SMALL=1.0D-20                                                     
      RDUM=RSTART                                                       
      E1=ESTART    
      N4000=4000                                                     
      INTEM=8                                                           
      TDASH=0.00         
#
      DO 111 J=1,4000
  111 TEMP(J)=TCFN(J)+TCF(J)                                          
#                                                                       
#     INITIAL DIRECTION COSINES                                         
#                                                                       
      DCZ1=DCOS(THETA)                                                  
      DCX1=DSIN(THETA)*DCOS(PHI)                                        
      DCY1=DSIN(THETA)*DSIN(PHI)                                        
#                                                                       
      BP=EFIELD*EFIELD*CONST1                                           
      F1=EFIELD*CONST2                                                  
      F2=EFIELD*CONST3                                                  
      F4=2.00*DACOS(-1.00)                                            
      DELTAE=EFINAL/DFLOAT(INTEM)                                       
      J2M=NMAX/ISAMP 
# MAIN LOOP                                                             
      DO 210 J1=1,J2M  
    1 R1=drand48(RDUM)
      I=DINT(E1/DELTAE)+1                                           
      I=DMIN0(I,INTEM)                                                
      TLIM=TCFMAX(I)
      T=-math.log(R1)/TLIM+TDASH                                            
      TDASH=T                                                           
      AP=DCZ1*F2*math.sqrt(E1)
      E=E1+(AP+BP*T)*T                                                  
      IE=DINT(E/ESTEP)+1
      IE=DMIN0(IE,N4000) 
      IF(TEMP(IE):
 > TLIM) :                                       
       TDASH=TDASH+math.log(R1)/TLIM                                        
       TCFMAX(I)=1.050*TCFMAX(I)                                       
       GO TO 1   
      # endIF                                                         
#                                                                       
#     TEST FOR #real OR NULL COLLISION                                   
#                                                                       
      R5=drand48(RDUM)
      TEST1=TCF(IE)/TLIM                                               
      IF(R5 > TEST1):
 GO TO 1                                          
#                                                                       
#  CALCULATE DIRECTION COSINES AT INSTANT BEFORE COLLISION
#                       
      IF(IE == 4000):
 : 
# ELECTRON ENERGY OUT OF RANGE
       IELOW=1
       RETURN
      # endIF                                                           
      TDASH=0.00                                                       
      CONST6=math.sqrt(E1/E)                                                
      DCX2=DCX1*CONST6                                                  
      DCY2=DCY1*CONST6                                                  
      DCZ2=DCZ1*CONST6+EFIELD*T*CONST5/math.sqrt(E)                         
# --------------------------------------------------------------------- 
#     DETERMINATION OF #real COLLISION TYPE                              
# --------------------------------------------------------------------- 
      R2=drand48(RDUM)
# FIND LOCATION WITHIN 4 UNITS IN COLLISION ARRAY       
      CALL SORT(I,R2,IE)                                                
  140 I=I+1                                                             
      IF(CF(IE,I):
 < R2) GO TO 140                                      
      S1=RGAS(I)                                                        
      EI=EIN(I)                                                         
      IF(IPN(I):
 <= 0) GO TO 666                                         
      R9=drand48(RDUM)
      EXTRA=R9*(E-EI)                                                   
      EI=EXTRA+EI                                                       
#                                                                       
#  GENERATE SCATTERING ANGLES AND UPDATE  LABORATORY COSINES AFTER      
#   COLLISION ALSO UPDATE ENERGY OF ELECTRON.                           
#                        
  666 IPT=IARRY(I)                                               
      IF(E < EI):
 :
       EI=E-0.00010
      # endIF
      S2=(S1*S1)/(S1-1.00)
      R3=drand48(RDUM)
      IF(INDEX(I):
 == 1) :
       R31=drand48(RDUM)
       F3=1.00-R3*ANGCT(IE,I)
       IF(R31 > PSCT(IE,I):
)  F3=-F3
      elif(INDEX(I) == 2) :
       EPSI=PSCT(IE,I)
       F3=1.00-(2.00*R3*(1.00-EPSI)/(1.00+EPSI*(1.00-2.00*R3)))
      else:
       F3=1.00-2.00*R3
      # endIF
      THETA0=DACOS(F3)                                                  
      R4=drand48(RDUM) 
      PHI0=F4*R4                                                        
      F8=DSIN(PHI0)                                                     
      F9=DCOS(PHI0)                                                     
      ARG1=1.00-S1*EI/E                                                
      ARG1=DMAX1(ARG1,SMALL)                                            
      D=1.00-F3*math.sqrt(ARG1)                                            
      E1=E*(1.00-EI/(S1*E)-2.00*D/S2)                                 
      E1=DMAX1(E1,SMALL)                                                
      Q=math.sqrt((E/E1)*ARG1)/S1                                           
      Q=DMIN1(Q,1.00)                                                  
      THETA=DASIN(Q*DSIN(THETA0))                                       
      F6=DCOS(THETA)                                                    
      U=(S1-1.00)*(S1-1.00)/ARG1                                      
      CSQD=F3*F3                                                        
      IF(F3 < 0.00 and CSQD > U):
 F6=-1.00*F6                        
      F5=DSIN(THETA) 
      DCZ2=DMIN1(DCZ2,1.00)                                            
      ARGZ=math.sqrt(DCX2*DCX2+DCY2*DCY2) 
      IF(ARGZ == 0.00):
 :
       DCZ1=F6
       DCX1=F9*F5
       DCY1=F8*F5
       GO TO 210
      # endIF                                          
      DCZ1=DCZ2*F6+ARGZ*F5*F8                                           
      DCY1=DCY2*F6+(F5/ARGZ)*(DCX2*F9-DCY2*DCZ2*F8)                     
      DCX1=DCX2*F6-(F5/ARGZ)*(DCY2*F9+DCX2*DCZ2*F8)
# LOOP                                                                      
  210 CONTINUE
      IELOW=0
      RETURN                                                            
      # end 
      def ELIMITB[IELOW]                                         :
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2             
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX  
      COMMON/BFLD/EOVB,WB,BTHETA,BMAG                                   
      COMMON/LARGE/CF(4000,960),EIN(960),TCF(4000),IARRY(960),RGAS(960),
     /IPN(960),WPL(960),LAST,ISIZE,PENFRA[3,960],TCFMAX(8)
      COMMON/LARGEN/CFN(4000,60),TCFN(4000),SCLENUL(60),NPLAST
      COMMON/ANIS/PSCT(4000,960),ANGCT(4000,960),INDEX(960),NISO
      DIMENSION TEMP(4000)        
# -------------------------------------------------------------------   
#   CALCULATES COLLISION EVENTS AND TESTS TO FIND IF THE UPPER ENERGY  
#   LIMIT FOR THE ELECTRON ENERGY IS EXCEEDED. 
#    IF ENERGY LIMIT IS OK       IELOW = 0
#    IF ENERGY LIMIT IS EXCEEDED IELOW = 1          
#   THE TEST IS CARRIED OUT FOR A SAMPLE OF COLLISIONS THAT ARE
#   SMALLER THAN THE FULL SAMPLE BY A FACTOR OF 1/ISAMP
#   
#   USED WITH MAGNETIC FIELD B AT 90 DEGREES TO ELECTRIC FIELD  
# -------------------------------------------------------------------
      ISAMP=20      
      SMALL=1.0D-20 
      EF100=EFIELD*100.00                                              
      RDUM=RSTART                                                       
      E1=ESTART    
      N4000=4000                                                     
      INTEM=8                                                           
      TDASH=0.00 
      CONST9=CONST3*0.010
#
      DO 111 J=1,4000
  111 TEMP(J)=TCFN(J)+TCF(J)                                            
#                                                                       
#     INITIAL DIRECTION COSINES                                         
#                                                                       
      DCZ1=DCOS(THETA)                                                  
      DCX1=DSIN(THETA)*DCOS(PHI)                                        
      DCY1=DSIN(THETA)*DSIN(PHI)                                        
#                                                                       
      VTOT=CONST9*math.sqrt(E1)                                             
      CX1=DCX1*VTOT                                                     
      CY1=DCY1*VTOT
      CZ1=DCZ1*VTOT                                                     
      F4=2.00*DACOS(-1.00)                                            
      DELTAE=EFINAL/DFLOAT(INTEM)                                       
      J2M=NMAX/ISAMP 
# MAIN LOOP                                                             
      DO 210 J1=1,J2M  
    1 R1=drand48(RDUM) 
      I=DINT(E1/DELTAE)+1                                          
      I=DMIN0(I,INTEM)                                                
      TLIM=TCFMAX(I)                                                    
      T=-math.log(R1)/TLIM+TDASH                                            
      TDASH=T                                                           
      WBT=WB*T
      COSWT=DCOS(WBT)
      SINWT=DSIN(WBT)
      DZ=(CZ1*SINWT+(EOVB-CY1)*(1.00-COSWT))/WB                        
      E=E1+DZ*EF100                                                     
      IE=DINT(E/ESTEP)+1 
      IE=DMIN0(IE,N4000) 
      IF(TEMP(IE):
 > TLIM) :                                       
       TDASH=TDASH+math.log(R1)/TLIM                                        
       TCFMAX(I)=1.050*TCFMAX(I)                                       
       GO TO 1  
      # endIF                                                          
#                                                                       
#     TEST FOR #real OR NULL COLLISION                                   
#                                                                       
      R5=drand48(RDUM) 
      TEST1=TCF(IE)/TLIM                                              
      IF(R5 > TEST1):
 GO TO 1                                          
#                                                                       
#  CALCULATE DIRECTION COSINES AT INSTANT BEFORE COLLISION
#                       
      IF(IE == 4000):
 : 
# ELECTRON ENERGY OUT OF RANGE
       IELOW=1
       RETURN
      # endIF                                                           
      TDASH=0.00                                                       
      CX2=CX1 
      CY2=(CY1-EOVB)*COSWT+CZ1*SINWT+EOVB
      CZ2=CZ1*COSWT-(CY1-EOVB)*SINWT 
      VTOT=math.sqrt(CX2*CX2+CY2*CY2+CZ2*CZ2)                               
      DCX2=CX2/VTOT                                                     
      DCY2=CY2/VTOT                                                     
      DCZ2=CZ2/VTOT                                                     
# --------------------------------------------------------------------- 
#     DETERMINATION OF #real COLLISION TYPE                              
# --------------------------------------------------------------------- 
      R2=drand48(RDUM)
# FIND LOCATION WITHIN 4 UNITS IN COLLISION ARRAY         
      CALL SORT(I,R2,IE)                                                
  140 I=I+1                                                             
      IF(CF(IE,I):
 < R2) GO TO 140                                      
      S1=RGAS(I)                                                        
      EI=EIN(I)                                                         
      IF(IPN(I):
 <= 0) GO TO 666                                         
      R9=drand48(RDUM)
      EXTRA=R9*(E-EI)                                                   
      EI=EXTRA+EI                                                       
#                                                                       
#  GENERATE SCATTERING ANGLES AND UPDATE  LABORATORY COSINES AFTER      
#   COLLISION ALSO UPDATE ENERGY OF ELECTRON.                           
#                        
  666 IPT=IARRY(I)                                               
      IF(E < EI):
 :
       EI=E-0.00010
      # endIF
      S2=(S1*S1)/(S1-1.00)
      R3=drand48(RDUM)
      IF(INDEX(I):
 == 1) :
       R31=drand48(RDUM)
       F3=1.00-R3*ANGCT(IE,I)
       IF(R31 > PSCT(IE,I):
) F3=-F3
      elif(INDEX(I) == 2) :
       EPSI=PSCT(IE,I)
       F3=1.00-(2.00*R3*(1.00-EPSI)/(1.00+EPSI*(1.00-2.00*R3)))
      else:
       F3=1.00-2.00*R3
      # endIF
      THETA0=DACOS(F3)                                                  
      R4=drand48(RDUM)
      PHI0=F4*R4                                                        
      F8=DSIN(PHI0)                                                     
      F9=DCOS(PHI0)                                                     
      ARG1=1.00-S1*EI/E                                                
      ARG1=DMAX1(ARG1,SMALL)                                            
      D=1.00-F3*math.sqrt(ARG1)                                            
      E1=E*(1.00-EI/(S1*E)-2.00*D/S2)                                 
      E1=DMAX1(E1,SMALL)                                                
      Q=math.sqrt((E/E1)*ARG1)/S1                                           
      Q=DMIN1(Q,1.00)                                                  
      THETA=DASIN(Q*DSIN(THETA0))                                       
      F6=DCOS(THETA)                                                    
      U=(S1-1.00)*(S1-1.00)/ARG1                                      
      CSQD=F3*F3                                                        
      IF(F3 < 0.00 and CSQD > U):
 F6=-1.00*F6                        
      F5=DSIN(THETA) 
      DCZ2=DMIN1(DCZ2,1.00)
      VTOT=CONST9*math.sqrt(E1)                                            
      ARGZ=math.sqrt(DCX2*DCX2+DCY2*DCY2) 
      IF(ARGZ == 0.00):
 :
       DCZ1=F6
       DCX1=F9*F5
       DCY1=F8*F5
       GO TO 130
      # endIF                                          
      DCZ1=DCZ2*F6+ARGZ*F5*F8                                           
      DCY1=DCY2*F6+(F5/ARGZ)*(DCX2*F9-DCY2*DCZ2*F8)                     
      DCX1=DCX2*F6-(F5/ARGZ)*(DCY2*F9+DCX2*DCZ2*F8)
  130 CX1=DCX1*VTOT
      CY1=DCY1*VTOT
      CZ1=DCZ1*VTOT    
# LOOP                                                                      
  210 CONTINUE
      IELOW=0
      RETURN                                                            
      # end 
      def ELIMITC(IELOW):                                         
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2             
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX  
      COMMON/BFLD/EOVB,WB,BTHETA,BMAG                                   
      COMMON/LARGE/CF(4000,960),EIN(960),TCF(4000),IARRY(960),RGAS(960),
     /IPN(960),WPL(960),LAST,ISIZE,PENFRA[3,960],TCFMAX(8)
      COMMON/LARGEN/CFN(4000,60),TCFN(4000),SCLENUL(60),NPLAST
      COMMON/ANIS/PSCT(4000,960),ANGCT(4000,960),INDEX(960),NISO  
      DIMENSION TEMP(4000)     
# -------------------------------------------------------------------   
#   CALCULATES COLLISION EVENTS AND TESTS TO FIND IF THE UPPER ENERGY  
#   LIMIT FOR THE ELECTRON ENERGY IS EXCEEDED. 
#    IF ENERGY LIMIT IS OK       IELOW = 0
#    IF ENERGY LIMIT IS EXCEEDED IELOW = 1          
#   THE TEST IS CARRIED OUT FOR A SAMPLE OF COLLISIONS THAT ARE
#   SMALLER THAN THE FULL SAMPLE BY A FACTOR OF 1/ISAMP
#   
#   USED WITH MAGNETIC FIELD B AT ANGLES BETWEEN 0 AND 90 DEGREES TO
#   THE ELECTRIC FIELD.
# -------------------------------------------------------------------
      ISAMP=20
      SMALL=1.0D-20 
      RTHETA=BTHETA*DACOS(-1.00)/180.00
      EFZ100=EFIELD*100.00*DSIN(RTHETA)
      EFX100=EFIELD*100.00*DCOS(RTHETA)
      F1=EFIELD*CONST2*DCOS(RTHETA)
      EOVBR=EOVB*DSIN(RTHETA)
      RDUM=RSTART                                                       
      E1=ESTART    
      N4000=4000                                                     
      INTEM=8                                                           
      TDASH=0.00 
      CONST9=CONST3*0.010
# 
      DO 111 J=1,4000
  111 TEMP(J)=TCFN(J)+TCF(J)                                            
#                                                                       
#     INITIAL DIRECTION COSINES                                         
#                                                                       
      DCZ1=DCOS(THETA)                                                  
      DCX1=DSIN(THETA)*DCOS(PHI)                                        
      DCY1=DSIN(THETA)*DSIN(PHI)                                        
#                                                                       
      VTOT=CONST9*math.sqrt(E1)                                             
      CX1=DCX1*VTOT                                                     
      CY1=DCY1*VTOT
      CZ1=DCZ1*VTOT                                                     
      F4=2.00*DACOS(-1.00)                                            
      DELTAE=EFINAL/DFLOAT(INTEM)                                       
      J2M=NMAX/ISAMP 
# MAIN LOOP                                                             
      DO 210 J1=1,J2M  
    1 R1=drand48(RDUM)
      I=DINT(E1/DELTAE)+1                                            
      I=DMIN0(I,INTEM)                                                
      TLIM=TCFMAX(I)                                                    
      T=-math.log(R1)/TLIM+TDASH                                            
      TDASH=T                                                           
      WBT=WB*T
      COSWT=DCOS(WBT)
      SINWT=DSIN(WBT)
      DZ=(CZ1*SINWT+(EOVBR-CY1)*(1.00-COSWT))/WB 
      DX=CX1*T+F1*T*T                                                   
      E=E1+DZ*EFZ100+DX*EFX100                                          
      IE=DINT(E/ESTEP)+1 
      IE=DMIN0(IE,N4000) 
      IF(TEMP(IE):
 > TLIM) :                                        
       TDASH=TDASH+math.log(R1)/TLIM                                        
       TCFMAX(I)=1.050*TCFMAX(I)                                       
       GO TO 1   
      # endIF                                                         
#                                                                       
#     TEST FOR #real OR NULL COLLISION                                   
#                                                                       
      R5=drand48(RDUM)
      TEST1=TCF(IE)/TLIM                                               
      IF(R5 > TEST1):
 GO TO 1                                          
#                                                                       
#  CALCULATE DIRECTION COSINES AT INSTANT BEFORE COLLISION
#                       
      IF(IE == 4000):
 : 
# ELECTRON ENERGY OUT OF RANGE
       IELOW=1
       RETURN
      # endIF                                                           
      TDASH=0.00                                                       
      CX2=CX1+2.00*F1*T
      CY2=(CY1-EOVBR)*COSWT+CZ1*SINWT+EOVBR
      CZ2=CZ1*COSWT-(CY1-EOVBR)*SINWT 
      VTOT=math.sqrt(CX2*CX2+CY2*CY2+CZ2*CZ2)                               
      DCX2=CX2/VTOT                                                     
      DCY2=CY2/VTOT                                                     
      DCZ2=CZ2/VTOT                                                     
# --------------------------------------------------------------------- 
#     DETERMINATION OF #real COLLISION TYPE                              
# --------------------------------------------------------------------- 
      R2=drand48(RDUM)  
# FIND LOCATION WITHIN 4 UNITS IN COLLISION ARRAY       
      CALL SORT(I,R2,IE)                                                
  140 I=I+1                                                             
      IF(CF(IE,I):
 < R2) GO TO 140                                      
      S1=RGAS(I)                                                        
      EI=EIN(I)                                                         
      IF(IPN(I):
 <= 0) GO TO 666                                         
      R9=drand48(RDUM) 
      EXTRA=R9*(E-EI)                                                   
      EI=EXTRA+EI                                                       
#                                                                       
#  GENERATE SCATTERING ANGLES AND UPDATE  LABORATORY COSINES AFTER      
#   COLLISION ALSO UPDATE ENERGY OF ELECTRON.                           
#                        
  666 IPT=IARRY(I)                                               
      IF(E < EI):
 :
       EI=E-0.00010
      # endIF
      S2=(S1*S1)/(S1-1.00)
      R3=drand48(RDUM)
      IF(INDEX(I):
 == 1) :
       R31=drand48(RDUM)
       F3=1.00-R3*ANGCT(IE,I)
       IF(R31 > PSCT(IE,I):
) F3=-F3
      elif(INDEX(I) == 2) :
       EPSI=PSCT(IE,I)
       F3=1.00-(2.00*R3*(1.00-EPSI)/(1.00+EPSI*(1.00-2.00*R3)))
      else:
       F3=1.00-2.00*R3
      # endIF
      THETA0=DACOS(F3)                                                  
      R4=drand48(RDUM)
      PHI0=F4*R4                                                        
      F8=DSIN(PHI0)                                                     
      F9=DCOS(PHI0)                                                     
      ARG1=1.00-S1*EI/E                                                
      ARG1=DMAX1(ARG1,SMALL)                                            
      D=1.00-F3*math.sqrt(ARG1)                                            
      E1=E*(1.00-EI/(S1*E)-2.00*D/S2)                                 
      E1=DMAX1(E1,SMALL)                                                
      Q=math.sqrt((E/E1)*ARG1)/S1                                           
      Q=DMIN1(Q,1.00)                                                  
      THETA=DASIN(Q*DSIN(THETA0))                                       
      F6=DCOS(THETA)                                                    
      U=(S1-1.00)*(S1-1.00)/ARG1                                      
      CSQD=F3*F3                                                        
      IF(F3 < 0.00 and CSQD > U):
 F6=-1.00*F6                        
      F5=DSIN(THETA) 
      DCZ2=DMIN1(DCZ2,1.00)
      VTOT=CONST9*math.sqrt(E1)                                            
      ARGZ=math.sqrt(DCX2*DCX2+DCY2*DCY2) 
      IF(ARGZ == 0.00):
 :
       DCZ1=F6
       DCX1=F9*F5
       DCY1=F8*F5
       GO TO 130
      # endIF                                          
      DCZ1=DCZ2*F6+ARGZ*F5*F8                                           
      DCY1=DCY2*F6+(F5/ARGZ)*(DCX2*F9-DCY2*DCZ2*F8)                     
      DCX1=DCX2*F6-(F5/ARGZ)*(DCY2*F9+DCX2*DCZ2*F8)
  130 CX1=DCX1*VTOT
      CY1=DCY1*VTOT
      CZ1=DCZ1*VTOT    
# LOOP                                                                      
  210 CONTINUE
      IELOW=0
      RETURN                                                            
      # end 
      def ALPCALC :
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX 
      COMMON/SSTOUT/VDOUT,VDERR,WSOUT,WSERR,DLOUT,DLERR,DTOUT,DTERR,
     /ALPHSST,ALPHERR,ATTSST,ATTERR         
      COMMON/TOFOUT/RALPHA,RALPER,TOFENE,TOFENER,TOFWV,TOFWVER,
     /TOFDL,TOFDLER,TOFDT,TOFDTER,TOFWR,TOFWRER,RATTOF,RATOFER 
      COMMON/VEL/WX,WY,WZ
      COMMON/CTOWNS/ALPHA,ATT
      COMMON/CTWNER/ALPER,ATTER
      COMMON/CTCALC/ZPLANE1,ZPLANE2,ZPLANE3,ZPLANE4,ZPLANE5,ZPLANE6,
     /ZPLANE7,ZPLANE8,IZFINAL
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9] 
      COMMON/LARGE/CF(4000,960),EIN(960),TCF(4000),IARRY(960),RGAS(960),
     /IPN(960),WPL(960),LAST,ISIZE,PENFRA[3,960],TCFMAX(8)
# ---------------------------------------------------------------------      
#  ESTIMATE TIME STEP AND SPACE STEPS FOR AVALANCHE SIMULATION IN 
#  TIME OF FLIGHT AND STEADY STATE TOWNS# end SIMULATIONS.
#  USES ESTIMATED GAIN OF 3.0 BETWEEN PLANES. 
#  CALLS SST AND TOF defS AND UPDATES ALPHA AND ATT
# ------------------------------------------------------------------
      IMAX=NMAX/10000000 
      IF(IMAX < 5):
 IMAX=5 
      NMAX=IMAX*10000000
      CORR=760.0*(TEMPC+273.15)/(TORR*293.15)
      ALPP=ALPHA/CORR
      ATTP=ATT/CORR
      ANETP=ALPP-ATTP
      ANET=ALPHA-ATT
      TCUTH=1.2D-10*CORR
      TCUTL=1.D-13*CORR
      ZCUTH=1.2D-2*CORR
      ZCUTL=1.D-5*CORR
#   
      IF (ANETP > 30.0):
 :
       ALPHAD=0.0
       ALP1=ALPHA
       ATT1=ATT
# WEAK ATTACHMENT
       GO TO 6
      # endIF 
#  SOME ATTACHMENT
      IF(abs(ANETP):
 < 100.) :
# SMALL NET ATTACHMENT
       ALPHAD=abs(ATT)*0.8
      elif(abs(ANETP) >= 100. and abs(ANETP) < 1000.) :
# LARGER NET ATTACHMENT
       ALPHAD=abs(ANET)*0.65
      elif(abs(ANETP) > 1000. and abs(ANETP) < 10000.) :
       ALPHAD=abs(ANET)*0.6
      elif(abs(ANETP) > 10000. and abs(ANETP) < 100000.) :
       ALPHAD=abs(ANET)*0.5
      elif(abs(ANETP) > 100000. and abs(ANETP) < 2000000.) :
       ALPHAD=abs(ANET)*0.2
      else: 
       WRITE(6,91) 
   91 FORMAT(' ATTACHMENT TOO LARGE def STOPPED')
       STOP
      # endIF
   3  VDST=WZ*1.D-5
      FAKEI=ALPHAD*WZ*1.D-12
      ALPHAST=0.85*abs(ALPHAD+ANET)                      
      TSTEP=math.log(3.00)/(ALPHAST*VDST*1.0D5)
      IF(TSTEP > TCUTH):
 TSTEP=TCUTH
      IF(TSTEP < TCUTL):
 TSTEP=TCUTL
# UPDATE NULL COLLISION FREQUENCY LIMIT
      DO 4 J=1,8
    4 TCFMAX(J)=TCFMAX(J)+abs(FAKEI)
      WRITE(6,871) ALPHAST,ANET,ALPHAD,TSTEP
  871 FORMAT(' ALPHAST1=',D10.3,' ANET1=',D10.3,' ALPHAD1=',D10.3,/,
     /' TSTEP1=',D10.3)
#  CONVERT TO  PICOSECONDS     
      TSTEP=TSTEP*1.0D12
      TFINAL=7.00*TSTEP
      ITFINAL=7
# CALCULATE GOOD STARTING VALUES FOR ALPHA AND NETA
      JPRT=0
      CALL MONTEFT(JPRT)
      CALL PT(JPRT)
      CALL TOF(JPRT)
      ALP1=RALPHA/TOFWR*1.D7
      ALP1ER=RALPER*ALP1/100. 
      ATT1=RATTOF/TOFWR*1.D7
      ATT1ER=RATOFER*ATT1/100.
      WRITE(6,944) ALP1,ALP1ER,ATT1,ATT1ER
  944 FORMAT(' GOOD STARTING VALUES FOR CALC:',/,' ALPHA=',D12.3,' ERR='
     /,D12.3,/,' NETA =',D12.3,' ERR=',D12.3)
#
# CALCULATE USING GOOD STARTING VALUES
#  RESET TCFMAX
      DO 44 J=1,8
   44 TCFMAX(J)=TCFMAX(J)-abs(FAKEI)
# CALCULATE FAKE IONISATION RATE SCALING BY 1.2 
      ALPHAD=abs(ATT1)*1.2
      IF((ALP1-ATT1):
 > 30.*CORR) ALPHAD=abs(ATT1)*0.4
      IF(abs(ALP1-ATT1):
 < (ALP1/10.0) or abs(ALP1-ATT1) < 
     /(ATT1/10.0)) ALPHAD=abs(ATT1)*0.3
      IF((ALP1-ATT1):
 > 100.*CORR) ALPHAD=0.0
      WZ=TOFWR*1.D5
#
#
# NET IONISATION
#   5 IF(ANET > (11000./CORR)) :
# HIGH  IONISATON       
#      ALPHAD=7000.-(ALPHA-ATT)
#     elif(abs(ALPP) > (5.0*abs(ANET)) or abs(ATTP) > 
#    /(5.0*abs(ANET))):
# LARGE CANCELLATION BETWEEN ATTACHMENT AND IONISATION
#      ALPHAD=-6.0*(ALPHA-ATT) 
#     else:
#      ALPHAD=0.0
#     # endIF
    6 VDST=WZ*1.D-5
      FAKEI=ALPHAD*WZ*1.D-12
      ALPHAST=0.85*abs(ALPHAD+ALP1-ATT1)      
      IF((ALP1+ALPHAD):
 > (10.0*ALPHAST) or ATT1 > (10.0*ALPHAST)) :
# LARGE CANCELLATION BETWEEN ALPHA AND NETA. REDUCE STEP SIZE BY 20.0
       IF((ALP1+ALPHAD):
 > 100.*CORR) :
        ALPHAST=ALPHAST*15.0
       elif((ALP1+ALPHAD) > 50.0*CORR) :
        ALPHAST=ALPHAST*12.0
       else:
        ALPHAST=ALPHAST*8.0
       # endIF
      # endIF
      TSTEP=math.log(3.00)/(ALPHAST*VDST*1.0D5)
      ZSTEP=math.log(3.00)/ALPHAST
      IF(TSTEP > TCUTH and ALPHAD != 0.0):
  TSTEP=TCUTH
#      IF(TSTEP < TCUTL) TSTEP=TCUTL
      IF(ZSTEP > ZCUTH and ALPHAD != 0.0):
  ZSTEP=ZCUTH
#      IF(ZSTEP < ZCUTL) ZSTEP=ZCUTL
# UPDATE NULL COLLISION FREQUENCY LIMIT
      DO 10 J=1,8
   10 TCFMAX(J)=TCFMAX(J)+abs(FAKEI)
      ANET=ALP1-ATT1
      WRITE(6,878) ALPHAST,ANET,ALPHAD,TSTEP,ZSTEP
  878 FORMAT(' ALPHAST=',D10.3,' ANET=',D10.3,' ALPHAD=',D10.3,/,
     /' TSTEP=',D10.3,' ZSTEP=',D10.3)
#  CONVERT TO METRES AND PICOSECONDS     
      TSTEP=TSTEP*1.0D12
      ZSTEP=ZSTEP*0.010
      TFINAL=7.00*TSTEP
      ITFINAL=7
      ZFINAL=8.00*ZSTEP
      IZFINAL=8    
      ZPLANE1=ZSTEP
      ZPLANE2=2.00*ZSTEP
      ZPLANE3=3.00*ZSTEP
      ZPLANE4=4.00*ZSTEP
      ZPLANE5=5.00*ZSTEP
      ZPLANE6=6.00*ZSTEP
      ZPLANE7=7.00*ZSTEP
      ZPLANE8=8.00*ZSTEP
# CALC SST
      WRITE(6,11)
   11 FORMAT(/,2X,'SOLUTION FOR STEADY STATE TOWNS# end PARAMETERS',/,'  -
     /------------------------------------------------')        
      ZSTEPM=ZSTEP*1.0D6
      WRITE(6,12) ZSTEPM
   12 FORMAT(1(/),' SPACE STEP BETWEEN SAMPLING PLANES =',D12.5,' MICRON
     /S.',/)   
      CALL MONTEFD
      CALL SST
#--------------------------------------------------------      
# LOAD NEW ALPHA AND ATTACHMENT INTO COMMON BLOCKS
#-----------------------------------------------
      ALPHA=ALPHSST
      ALPER=ALPHERR
      ATT=ATTSST
      ATTER=ATTERR        
#-----------------------------------------------     
      WRITE(6,18) 
   18 FORMAT(/,' SST DRIFT VELOCITIES')   
      WRITE(6,19) VDOUT,VDERR,WSOUT,WSERR
   19 FORMAT(/,' VD=',F9.1,' +- ',F6.2,' %   WS=',F9.1,' +- ',F6.2,' %')
      WRITE(6,20)      
   20 FORMAT(/,' SST DIFFUSION')  
      WRITE(6,21) DLOUT,DLERR,DTOUT,DTERR   
   21 FORMAT(/,' DL=',F9.1,' +- ',F6.1,' %   DT=',F9.1,' +- ',F6.2,' %')
      WRITE(6,22) 
   22 FORMAT(/,' SST TOWNS# end COEFICIENTS')
      WRITE(6,23) ALPHSST,ALPHERR,ATTSST,ATTERR
   23 FORMAT(/,' ALPHA=',F9.1,' +- ',F6.2,' %    ATT=',F9.1,' +- ',F6.2,
     /' %')      
      CALL OUTPUT1  
  777 CONTINUE
# CALC TIME OF FLIGHT AND PT 
      WRITE(6,25)
   25 FORMAT(/,2X,'SOLUTION FOR PULSED TOWNS# end AND TIME OF FLIGHT PARAM
     /ETERS',/,'  ------------------------------------------------------
     /--------')  
      WRITE(6,26) TSTEP
   26 FORMAT(1(/),'  TIME STEP BETWEEN SAMPLING PLANES =',D12.5,' PICOSE
     /CS.',/)     
      JPRT=1                
      CALL MONTEFT(JPRT)                             
      CALL FRIEDLAND 
      CALL PT(JPRT)
      CALL TOF(JPRT)
      WRITE(6,27) RALPHA,RALPER,RATTOF,RATOFER
   27 FORMAT(/,' PT IONISATION AND ATTACHMENT RATES *10**12/SEC',/,' ALP
     /HA=',D10.3,' +- ',F6.2,' %      ATT=',D10.3,' +- ',F6.2,' %')    
      WRITE(6,28) 
   28 FORMAT(/,' TOF DIFFUSION')
      WRITE(6,29) TOFDL,TOFDLER,TOFDT,TOFDTER 
   29 FORMAT(/,'  DL=',F8.1,' +- ',F6.1,' %       DT=',F8.1,' +- ',F6.1,
     /' %')     
      WRITE(6,30)
   30 FORMAT(/,' TOF DRIFT VELOCITY')
      WRITE(6,31) TOFWR,TOFWRER   
   31 FORMAT(/,'    WR=',F8.2,' +-',F6.1,' %') 
# CALCULATE TOWNS# end SST COEFICIENTS DIRECTLY FROM TOF RESULTS
      WRZN=TOFWR*1.005
      FC1=WRZN/(2.00*TOFDL)
      FC2=((RALPHA-RATTOF)*1.0D12)/TOFDL
      ALPTEST=FC1-math.sqrt(FC1**2-FC2)    
      WRITE(6,888) ALPTEST
  888 FORMAT(/,'TOWNS# end COEFICIENT (ALPHA-ATT) CALCULATED FROM TOF RESU
     /LTS:',/,' ALPHA-ATT /CM.=',D11.4,' N.B. APPROXIMATE FORMULA NOT AC
     /CURATE',/)                             
#
# CALCULATE DIRECTLY FROM TOF FREQUENCY
#     ALP1=RALPHA/TOFWR*1.D7
#     ALP1ER=RALPER*ALP1/100. 
#     ATT1=RATTOF/TOFWR*1.D7
#     ATT1ER=RATOFER*ATT1/100.
#
#     WRITE(6,33) ALP1,ALP1ER,ATT1,ATT1ER
#  33 FORMAT(' TOF TOWNS# end IN UNITS OF 1/CM:',/,'   GAIN =',D12.4,' +-'
#    /,D12.4,/,' ATTACH =',D12.4,' +-',D12.4,/) 
      RETURN                                                     
      # end                                                               
      def MONTEFT(JPRT):                                       
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAXOLD
      COMMON/LARGE/CF(4000,960),EIN(960),TCF(4000),IARRY(960),RGAS(960),
     /IPN(960),WPL(960),IPLAST,ISIZE,PENFRA[3,960],TCFMAX(8)
      COMMON/LARGEN/CFN(4000,60),TCFN(4000),SCLENUL(60),NPLAST
      COMMON/IONFL1/NC0(960),EC0(960),NG1(960),EG1(960),NG2(960),
     /EG2(960),WKLM(960),EFL(960)
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/OUTPT/TIME(300),ICOLL(30),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(960),ICOLNN(60)
      COMMON/TTRM/ZTOT,TTOT,ZTOTS,TTOTS
      COMMON/ISPT/XS(2000),YS(2000),ZS(2000),TS(2000),ES(2000),
     /DCX(2000),DCY(2000),DCZ[2000],IPL(2000) 
      COMMON/TPLOUT/ETPL(8),XTPL(8),YTPL(8),ZTPL(8),TTPL(8),XXTPL(8),
     /YYTPL(8),ZZTPL(8),VZTPL(8),NETPL(8),ATTOINT,ATTERT,AIOERT 
      COMMON/ANIS/PSCT(4000,960),ANGCT(4000,960),INDEX(960),NISO      
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9]        
      DIMENSION EPRM(10000000),IESPECP(100),TEMP(4000)            
# --- ----------------------------------------------------------------  
#     CALCULATES COLLISION EVENTS AND UPDATES DIFFUSION AND VELOCITY.
#     THIS ROUTINE HANDLES TERMINATIONS AT FIXED DRIFT TIMES.   
# --- ----------------------------------------------------------------
      IF(JPRT == 0):
 :
# CALCULATION OF APPROXIMATE STARTING PARAMETERS 
       NMAX=NMAXOLD
       IF(NMAXOLD > 80000000):
 NMAX=80000000
      else:
# ENTRY FOR NORMAL CALCULATION
       NMAX=NMAXOLD
      # endIF
      S=0.00 
      ST=0.00 
      X=0.00
      Y=0.00
      Z=0.00 
      ZTOT=0.00
      ZTOTS=0.00
      TTOT=0.00
      TTOTS=0.00
      SMALL=1.0D-20                                                     
      TMAX1=0.00                                                       
      RDUM=RSTART                                                       
      E1=ESTART                                                         
      CONST9=CONST3*0.010
      API=DACOS(-1.00)
      DO 25 I=1,300
   25 TIME(I)=0.00
      DO 26 I=1,30
   26 ICOLL(I)=0
      DO 27 I=1,960
   27 ICOLN(I)=0
      DO 271 I=1,60
  271 ICOLNN(I)=0
      DO 28 I=1,4000
   28 SPEC(I)=0.00            
      DO 33 I=1,100
   33 IESPECP(I)=0 
      DO 34 I=1,8
      ETPL(I)=0.00
      XTPL(I)=0.00
      YTPL(I)=0.00
      ZTPL(I)=0.00
      TTPL(I)=0.00
      XXTPL(I)=0.00
      YYTPL(I)=0.00
      ZZTPL(I)=0.00
      VZTPL(I)=0.00
   34 NETPL(I)=0                                   
      ID=0
      N4000=4000
      N300=300
      N100=100
      INTEM=8
      I100=0                                                            
      NCOL=0                                                            
      NNULL=0
      NELEC=0
      NEION=0
      NMXADD=0
      NTMPFLG=0
      NPONT=0 
      NCLUS=0
      J1=1 
      ZSTRT=0.00
      TSSTRT=0.00                                    
#
      DO 111 J=1,4000
  111 TEMP(J)=TCFN(J)+TCF(J)
      ABSFAKEI=abs(FAKEI)
      IFAKE=0:
      DO 112 J=1,8
  112 IFAKET(J)=0
#                
#     INITIAL DIRECTION COSINES                                         
      DCZ1=DCOS(THETA)                                                  
      DCX1=DSIN(THETA)*DCOS(PHI)                                        
      DCY1=DSIN(THETA)*DSIN(PHI) 
      E100=E1
      DCZ100=DCZ1
      DCX100=DCX1
      DCY100=DCY1                                       
      BP=EFIELD*EFIELD*CONST1                                           
      F1=EFIELD*CONST2                                                  
      F2=EFIELD*CONST3                                                  
      F4=2.00*API
# SET TO MAXIMUM POSSIBLE COLLISION FREQ. 
      TLIM=TCFMAX(1) 
      DO 35 I=2,INTEM     
   35 IF(TLIM < TCFMAX(I)) TLIM=TCFMAX(I)
      JPRINT=NMAX/10
      IPRINT=0
      ITER=0
      IPLANE=0
      IPRIM=0
#  LOOP FOR NEW STARTING ELECTRONS 
  544 IPRIM=IPRIM+1 
      IF(IPRIM > 1):
 :
# CHECK IF def WILL EXCEED MAXIMUM NUMBER OF ITERATIONS 
# IN THIS CYCLE IF SO OUTPUT CURRENT RESULTS. 
       IF(ITER > NMAX):
 :
        IPRIM=IPRIM-1
        GO TO 700      
       # endIF 
       X=0.00
       Y=0.00
       Z=0.00
       DCZ1=DCZ100
       DCX1=DCX100
       DCY1=DCY100
       E1=E100
       NCLUS=NCLUS+1
       ST=0.00
       TSSTRT=0.00
       ZSTRT=0.00
       IPLANE=0
      # endIF
      IF(IPRIM > 10000000):
 :
      WRITE(6,944) IPRIM
 944  FORMAT(/,2X,'def STOPPED TOO MANY PRIMARIES IPRIM =',I7)
      GO TO 700
      # endIF
      EPRM(IPRIM)=E1
      IDUM=DINT(E1)+1
      IDUM=DMIN0(IDUM,N100)
      IESPECP(IDUM)=IESPECP(IDUM)+1      
# START OF LOOP FOR NEWLY CREATED ELECTRONS
  555 TDASH=0.00
      NELEC=NELEC+1
      TSTOP=TSTEP+IPLANE*TSTEP       
# MAIN LOOP                                                             
    1 CONTINUE                                                          
#     IF(ITER > NMAX)  GO TO 315
      R1=drand48(RDUM)
      T=-math.log(R1)/TLIM+TDASH
      TDASH=T
      AP=DCZ1*F2*math.sqrt(E1)
  15  IF((T+ST) >= TSTOP) :                     
       IPLANE=IPLANE+1
       TSTOP=TSTOP+TSTEP
# STORE POSITION AND ENERGY AT TIME PLANE =IPLANE. 
       CALL TPLANE(T,E1,DCX1,DCY1,DCZ1,AP,BP,EFIELD,IPLANE)
# CHECK IF PASSED THROUGH MORE THAN ONE PLANE IN THIS STEP       
       IF((T+ST):
 >= TSTOP and TSTOP <= TFINAL) GO TO 15
       IF((T+ST):
 >= TFINAL) :
        ZTOT=ZTOT+Z     
        TTOT=TTOT+ST
        ZTOTS=ZTOTS+Z-ZSTRT      
        TTOTS=TTOTS+ST-TSSTRT    
        TSTOP=TSTEP
# NO MORE ELECTRONS IN CASCADE TRY NEW PRIMARY ELECTRON
        IF(NELEC == (NCLUS+1):
) GO TO 544  
# TAKE ELECTRONS FROM STORE 
   20   X=XS(NPONT) 
        Y=YS(NPONT) 
        Z=ZS(NPONT) 
        ST=TS(NPONT) 
        E1=ES(NPONT) 
        DCX1=DCX(NPONT) 
        DCY1=DCY(NPONT) 
        DCZ1=DCZ[NPONT] 
        IPLANE=IPL(NPONT)   
        NPONT=NPONT-1 
        ZSTRT=Z 
        TSSTRT=ST
        GO TO 555
       # endIF              
      # endIF
 913  FORMAT(3X,' AFTER STORE ITER=',I10,' E1=',D12.3,' T=',D12.3,' AP='
     /,D12.3,' BP=',D12.3,' DCZ1=',D12.3)       
      E=E1+(AP+BP*T)*T
      IF(E < 0.00):
 :
       WRITE(6,913)ITER,E,E1,AP,BP,DCZ1 
       E=0.0010
      # endIF                                                   
      IE=DINT(E/ESTEP)+1                                             
      IE=DMIN0(IE,N4000)                                              
#                                                                       
#     TEST FOR #real OR NULL COLLISION                                   
#                                                                       
      R5=drand48(RDUM)
      TEST1=TCF(IE)/TLIM                                              
      IF(R5 <= TEST1):
 GO TO 137                                        
      NNULL=NNULL+1                     
      TEST2=TEMP(IE)/TLIM
      IF(R5 < TEST2):
 :
# TEST FOR NULL LEVELS
       IF(NPLAST == 0):
 GO TO 1
       R2=drand48(RDUM)
       I=0
  888  I=I+1
       IF(CFN(IE,I):
 < R2) GO TO 888
# INCREMENT NULL SCATTER SUM
       ICOLNN(I)=ICOLNN(I)+1
       GO TO 1
      # endIF
      TEST3=(TEMP(IE)+ABSFAKEI)/TLIM
      IF(R5 < TEST3):
 :
# FAKE COLLISION INCREMENT COUNTERS 
       IFAKE=IFAKE+1:
       IFAKET(IPLANE+1):
=IFAKET(IPLANE+1)+1
       IF(FAKEI < 0.0):
 :
       NEION=NEION+1
# FAKE ATTACHMENT START NEW ELECTRON         
        IF(NELEC == (NCLUS+1):
) GO TO 544
# ELECTRON CAPTURED TAKE NEXT ELECTRON FROM STORE       
        GO TO 20
       # endIF    
#  FAKE IONISATION ADD ELECTRON TO STORE
       NCLUS=NCLUS+1
       NPONT=NPONT+1
       NMXADD=MAX(NPONT,NMXADD)
       IF(NPONT > 2000):
 : 
        WRITE(6,546) NPONT,ITER
        STOP
       # endIF     
       A=T*CONST9*math.sqrt(E1)
       XS(NPONT)=X+DCX1*A       
       YS(NPONT)=Y+DCY1*A
       ZS(NPONT)=Z+DCZ1*A+T*T*F1
       TS(NPONT)=ST+T
       ES(NPONT)=E
       IPL(NPONT)=IPLANE
       CONST6=math.sqrt(E1/E)
       DCX(NPONT)=DCX1*CONST6
       DCY(NPONT)=DCY1*CONST6
       DCZ[NPONT]=DCZ1*CONST6+EFIELD*T*CONST5/math.sqrt(E)
       GO TO 1
      # endIF
      GO TO 1
#                                                                       
#  CALCULATE DIRECTION COSINES AND POSITIONS AT INSTANT BEFORE COLLISION
#    ALSO UPDATE DIFFUSION  AND ENERGY CALCULATIONS.                    
  137 T2=T*T
      IF(T >= TMAX1):
 TMAX1=T
      TDASH=0.00                                                       
      CONST6=math.sqrt(E1/E)                                                
      DCX2=DCX1*CONST6                                                  
      DCY2=DCY1*CONST6                                                  
      DCZ2=DCZ1*CONST6+EFIELD*T*CONST5/math.sqrt(E) 
      CONST7=CONST9*math.sqrt(E1)                                           
      A=T*CONST7                                                        
      NCOL=NCOL+1                                                       
      X=X+DCX1*A                                                        
      Y=Y+DCY1*A
      Z=Z+DCZ1*A+T2*F1
      ST=ST+T
      IT=DINT(T+1.00)                                               
      IT=DMIN0(IT,N300)                                                
      TIME(IT)=TIME(IT)+1.00                                           
      SPEC(IE)=SPEC(IE)+1.00
# --------------------------------------------------------------------- 
#     DETERMINATION OF #real COLLISION TYPE                              
# --------------------------------------------------------------------- 
#     R2=RNDM2(RDUM)
      R2=drand48(RDUM)
# FIND LOCATION WITHIN 4 UNITS IN COLLISION ARRAY       
      CALL SORT(I,R2,IE)                                                
  140 I=I+1                                                             
      IF(CF(IE,I):
 < R2) GO TO 140                                      
      S1=RGAS(I)                                                        
      EI=EIN(I)
      IF(E < EI):
 :
#     WRITE(6,994) E,EI,ITER
#994  FORMAT(2X,' WARNING ENERGY =',F8.3,' LESS THAN ENERGY LOSS EI=',F8
#    /.3,' AT ITER=',I12,' DUE TO BINNING ERROR')
# FIX ENERGY LOSS SMALLER THAN INCIDENT ENERGY IF A BINING ERROR OCCURS.
      EI=E-0.00010
      # endIF                                                          
      IF(IPN(I):
 == 0) GO TO 666
# ATTACHMENT       
      IF(IPN(I):
 == -1) :
       NEION=NEION+1
       IPT=IARRY(I)
       ID=ID+1
       ITER=ITER+1
       IPRINT=IPRINT+1
       ICOLL(IPT)=ICOLL(IPT)+1
       ICOLN(I)=ICOLN(I)+1 
       IT=DINT(T+1.00)
       IT=DMIN0(IT,N300)
       TIME(IT)=TIME(IT)+1.00
       ZTOT=ZTOT+Z
       TTOT=TTOT+ST
       ZTOTS=ZTOTS+Z-ZSTRT
       TTOTS=TTOTS+ST-TSSTRT
#  ELECTRON CAPTURED START NEW PRIMARY          
       IF(NELEC == (NCLUS+1):
) GO TO 544
# ELECTRON CAPTURED TAKE NEXT ELECTRON FROM STORE       
       GO TO 20
      # endIF    
      EISTR=EI                                             
      R9=drand48(RDUM)
#     ESEC=R9*(E-EI)      
#    USE OPAL PETERSON AND BEATY SPLITTING FACTOR.
      ESEC=WPL(I)*TAN(R9*ATAN((E-EI)/(2.00*WPL(I)))) 
      ESEC=WPL(I)*(ESEC/WPL(I))**0.9524                  
      EI=ESEC+EI 
# STORE POSITION ,ENERGY, DIRECTION COSINES AND TIME OF GENERATION
# OF IONISATION ELECTRON      
      NCLUS=NCLUS+1
      NPONT=NPONT+1
      NMXADD=MAX(NPONT,NMXADD)
      IF(NPONT > 2000):
 : 
      WRITE(6,546) NPONT,ITER
 546  FORMAT(2X,' def STOPPED . NPONT=',I5,' ITER=',I10)
      STOP
      # endIF     
      XS(NPONT)=X       
      YS(NPONT)=Y
      ZS(NPONT)=Z
      TS(NPONT)=ST
      ES(NPONT)=ESEC
      IPL(NPONT)=IPLANE
      NCLTMP=NPONT
      NTMPFLG=1
# RANDOMISE SECONDARY ELECTRON DIRECTION
#     R3=drand48(RDUM)
#     F3=1.00-2.00*R3
#     THETA0=DACOS(F3)
#     F6=DCOS(THETA0)
#     F5=DSIN(THETA0)
#     R4=drand48(rdum)
#     PHI0=F4*R4
#     F8=DSIN(PHI0)
#     F9=DCOS(PHI0)               
#     DCX(NPONT)=F9*F5
#     DCY(NPONT)=F8*F5
#     DCZ[NPONT]=F6     
#                                                                       
#  GENERATE SCATTERING ANGLES AND UPDATE  LABORATORY COSINES AFTER      
#   COLLISION ALSO UPDATE ENERGY OF ELECTRON.                           
#
# STORE POSSIBLE SHELL EMISSIONS AUGER OR FLUORESCENCE
      IF(EISTR > 30.0):
 :
# AUGER EMISSION WITHOUT FLUORESCENCE
       NAUG=NC0(I)
       EAVAUG=EC0(I)/DFLOAT(NAUG)
       DO 701 JFL=1,NAUG
       NCLUS=NCLUS+1
       NPONT=NPONT+1
       XS(NPONT)=X
       YS(NPONT)=Y
       ZS(NPONT)=Z
       TS(NPONT)=ST
       ES(NPONT)=EAVAUG
       R3=drand48(RDUM)
       F3=1.00-2.00*R3
       THETA0=DACOS(F3)
       F6=DCOS(THETA0)
       F5=DSIN(THETA0)
       R4=drand48(RDUM)
       PHI0=F4*R4
       F8=DSIN(PHI0)
       F9=DCOS(PHI0)
       DCX(NPONT)=F9*F5
       DCY(NPONT)=F8*F5
       DCZ[NPONT]=F6
       IPL(NPONT)=IPLANE
  701  CONTINUE     
      # endIF
  666 IPT=IARRY(I)
      ID=ID+1    
      ITER=ITER+1
      IPRINT=IPRINT+1                                                   
      ICOLL(IPT)=ICOLL(IPT)+1 
      ICOLN(I)=ICOLN(I)+1 
# IF EXCITATION : ADD PROBABILITY ,PENFRA(1,I), OF TRANSFER TO GIVE
# IONISATION OF THE OTHER GASES IN THE MIXTURE.
      IF(IPEN == 0):
 GO TO 5
      IF(PENFRA[1,I] != 0.0):
 :
       RAN=drand48(RDUM)
       IF(RAN > PENFRA[1,I]):
 GO TO 5
       NCLUS=NCLUS+1
       NPONT=NPONT+1
       IF(NPONT > 2000):
 : 
        WRITE(6,546) NPONT,ITER
        STOP
       # endIF
# ENTER HERE POSSIBLE DELOCALISATION LENGTH FOR PENNING TRANSFER
       IF(PENFRA[2,I] == 0.0):
 :
        XS(NPONT)=X
        YS(NPONT)=Y
        ZS(NPONT)=Z
        GO TO 667
       # endIF
       ASIGN=1.0
       RAN=drand48(RDUM)
       RAN1=drand48(RDUM)
       IF(RAN1 < 0.5):
 ASIGN=-ASIGN
       XS(NPONT)=X-math.log(RAN)*PENFRA[2,I]*ASIGN
       RAN=drand48(RDUM)
       RAN1=drand48(RDUM)
       IF(RAN1 < 0.5):
 ASIGN=-ASIGN
       YS(NPONT)=Y-math.log(RAN)*PENFRA[2,I]*ASIGN
       RAN=drand48(RDUM)
       RAN1=drand48(RDUM)
       IF(RAN1 < 0.5):
 ASIGN=-ASIGN
       ZS(NPONT)=Z-math.log(RAN)*PENFRA[2,I]*ASIGN
# POSSIBLE PENNING TRANSFER TIME
  667  TPEN=ST
       IF(PENFRA[3,I] == 0.0):
 GO TO 668
       RAN=drand48(RDUM)
       TPEN=ST-math.log(RAN)*PENFRA[3,I]
  668  TS(NPONT)=TPEN                 
       ES(NPONT)=1.0
       DCX(NPONT)=DCX1
       DCY(NPONT)=DCY1
       DCZ[NPONT]=DCZ1
# FIND LAST TIME PLANE BEFORE TPEN 
       TSTOP1=0.0
       IPLANE1=0  
       DO 669 KDUM=1,ITFINAL
       TSTOP1=TSTEP+TSTOP1
       IF(TPEN < TSTOP1):
 GO TO 670
       IPLANE1=IPLANE1+1  
  669  CONTINUE
# PENNING TRANSFER OCCURS AFTER FINAL TIME PLANE CLEAR ENTRY
       NPONT=NPONT-1
       NCLUS=NCLUS-1
       GO TO 5
  670  IPL(NPONT)=IPLANE1
      # endIF                                            
    5 S2=(S1*S1)/(S1-1.00) 
# ANISOTROPIC SCATTERING
      R3=drand48(RDUM)
      IF(INDEX(I):
 == 1) :
       R31=drand48(RDUM)
       F3=1.00-R3*ANGCT(IE,I)
       IF(R31 > PSCT(IE,I):
) F3=-F3
      elif(INDEX(I) == 2) :
       EPSI=PSCT(IE,I)
       F3=1.00-(2.00*R3*(1.00-EPSI)/(1.00+EPSI*(1.00-2.00*R3)))
      else:
# ISOTROPIC SCATTERING                                              
       F3=1.00-2.00*R3  
      # endIF
      THETA0=DACOS(F3)                                                  
      R4=drand48(RDUM)
      PHI0=F4*R4                                                        
      F8=DSIN(PHI0)                                                     
      F9=DCOS(PHI0)                                                     
      IF(E < EI):
 EI=0.00                                              
      ARG1=1.00-S1*EI/E                                                
      ARG1=DMAX1(ARG1,SMALL)                                            
      D=1.00-F3*math.sqrt(ARG1)                                            
      E1=E*(1.00-EI/(S1*E)-2.00*D/S2) 
      E1=DMAX1(E1,SMALL)                                                
      Q=math.sqrt((E/E1)*ARG1)/S1                                           
      Q=DMIN1(Q,1.00)                                                  
      THETA=DASIN(Q*DSIN(THETA0))                                       
      F6=DCOS(THETA)                                                    
      U=(S1-1.00)*(S1-1.00)/ARG1                                      
      CSQD=F3*F3                                                        
      IF(F3 < 0.00 and CSQD > U):
 F6=-1.00*F6                        
      F5=DSIN(THETA)                                                    
      DCZ2=DMIN1(DCZ2,1.00)                                            
      ARGZ=math.sqrt(DCX2*DCX2+DCY2*DCY2)
      IF(ARGZ == 0.00):
 :
       DCZ1=F6         
       DCX1=F9*F5                             
       DCY1=F8*F5
# USE FREE KINEMATICS FOR IONISATION SCEONDARY ANGLE
       IF(NTMPFLG == 1):
 :
        F5S=F5*math.sqrt(E1/ES(NCLTMP))
        IF(F5S > 1.0):
 F5S=1.0
        THSEC=DASIN(F5S)
        F5S=DSIN(THSEC)
        F6S=DCOS(THSEC)
        IF(F6 < 0.0):
 F6S=-F6S
        PHIS=PHI0+API
        IF(PHIS > F4):
 PHIS=PHI0-F4
        F8S=DSIN(PHIS)
        F9S=DCOS(PHIS)
        DCZ[NCLTMP]=F6S
        DCY(NCLTMP)=F8S*F5S
        DCX(NCLTMP)=F9S*F5S
        NTMPFLG=0
       # endIF
       GO TO 190
      # endIF                                            
      DCZ1=DCZ2*F6+ARGZ*F5*F8                                           
      DCY1=DCY2*F6+(F5/ARGZ)*(DCX2*F9-DCY2*DCZ2*F8)                     
      DCX1=DCX2*F6-(F5/ARGZ)*(DCY2*F9+DCX2*DCZ2*F8) 
      IF(NTMPFLG == 1):
 :
# USE FREE KINEMATICS FOR IONISATION SECONDARY ANGLE
       F5S=F5*math.sqrt(E1/ES(NCLTMP))
       IF(F5S > 1.0):
 F5S=1.0
       THSEC=DASIN(F5S)
       F5S=DSIN(THSEC)
       F6S=DCOS(THSEC)
       IF(F6 < 0.0):
 F6S=-F6S
       PHIS=PHI0+API
       IF(PHIS > F4):
 PHIS=PHI0-F4
       F8S=DSIN(PHIS)
       F9S=DCOS(PHIS)
       DCZ[NCLTMP]=DCZ2*F6S+ARGZ*F5S*F8S
       DCY(NCLTMP)=DCY2*F6S+(F5S/ARGZ)*(DCX2*F9S-DCY2*DCZ2*F8S)
       DCX(NCLTMP)=DCX2*F6S-(F5S/ARGZ)*(DCY2*F9S+DCX2*DCZ2*F8S)
       NTMPFLG=0
      # endIF
  190 CONTINUE  
# STORE DIRECTION COSINES AND ENERGY AFTER N COLLISIONS
# FOR LATER REUSE IN PRIMARY GENERATION
      I100=I100+1
      IF(I100 == 200):
 :
       DCZ100=DCZ1
       DCX100=DCX1        
       DCY100=DCY1 
       E100=E1
       I100=0
      # endIF  
      IF(IPRINT > JPRINT):
 GO TO 200
      GO TO 1                                    
#    INTERMEDIATE PRINTOUT                       
 200  IPRINT=0 
      W=ZTOTS/TTOTS                          
      W=W*1.0D+09                                                       
      JCT=ID/100000
#     IF(J1 == 1) WRITE(6,201)                                         
# 201 FORMAT(/,7X,'INTERMEDIATE OUTPUT',/,'    VEL      POS        TIME 
#    /       COUNT    ')                  
#     WRITE(6,202) W,ZTOTS,TTOTS,JCT   
# 202 FORMAT(1X,F8.3,2(1X,D10.3),4X,I6)                 
      J1=J1+1            
      GO TO 1
#  MAIN LOOP # end                                                  
  700 XID=DFLOAT(ID)
      IF(NELEC > IPRIM):
 :
       ANEION=DFLOAT(NEION)
       ANBT=DFLOAT(NELEC-IPRIM)
       ATTOINT=ANEION/ANBT
       ATTERT=math.sqrt(ANEION)/ANEION
       AIOERT=math.sqrt(ANBT)/ANBT
      else:
       ANEION=DFLOAT(NEION) 
       ATTOINT=-1.0
       ATTERT=math.sqrt(ANEION)/ANEION
      # endIF
      JCT=ID/100000  
      IF(J1 == 1):
 :
      WRITE(6,940) NCLUS,ITER
  940 FORMAT(2(/),' def STOPPED  (TOO FEW COLLISIONS), DECREASE THE 
     /ESTIMATED ALPHA.  NCLUS = ',I7,'  ITER =',I9)      
      STOP
      # endIF
      IF(JPRT == 1):
 WRITE(6,878) NELEC,NEION,IPRIM
 878  FORMAT(/,' TOTAL NO OF ELECTRONS=',I10,/,' TOTAL NO OF NEG. IONS='
     /,I10,/,' TOTAL NO OF PRIMARIES=',I10)  
      EPRMBAR=0.00
      E2PRM=0.00
      IF(IPRIM == 1):
 RETURN      
      DO 310 I=1,IPRIM
      E2PRM=E2PRM+EPRM(I)*EPRM(I)
 310  EPRMBAR=EPRMBAR+EPRM(I)
      EBAR=EPRMBAR/IPRIM
      EERR=math.sqrt(E2PRM/IPRIM-EBAR**2)
      IF(JPRT == 1):
 WRITE(6,836) EBAR,EERR
 836  FORMAT(/,2X,'AVERAGE ENERGY OF PRIMARY ELECTRON =',F10.3,' EV.',/,
     /'   ENERGY SPREAD OF PRIMARY ELECTRON =',F10.3,' EV.')
#     WRITE(6,835) (IESPECP(J),J=1,100)
#835  FORMAT(/,2X,'ENERGY SPECTRUM OF PRIMARY ELECTRONS IN 1 EV. BINS',/
#    /,10(2X,10I5,/))
      RETURN               
  315 IF(ITER > NMAX) :
       WRITE(6,991) ITER,NMAX,NPONT,NELEC,IPRIM,NMXADD,JPRT
 991   FORMAT(2(/),' def STOPPED.  ITER =',I10,'    NMAX =',I10,/,
     /' NPONT=',I4,' NELEC=',I8,' IPRIM=',I4,' NMXADD=',I3,' JPRT=',I3) 
       STOP
      # endIF                                                             
      RETURN                                                            
      # end
      def TPLANE(T,E1,DCX1,DCY1,DCZ1,AP,BP,EFLD,IPLANE):
      IMPLICIT #real*8 (A-H,O-Z)  
      IMPLICIT #integer*8 (I-N)
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/OUTPT/TIME(300),ICOLL(30),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(960),ICOLNN(60)
      COMMON/TPLOUT/ETPL(8),XTPL(8),YTPL(8),ZTPL(8),TTPL(8),XXTPL(8),
     /YYTPL(8),ZZTPL(8),VZTPL(8),NETPL(8),ATTOINT,ATTERT,AIOERT 
#-----------------------------------------------------------------------
# STORES POSITION, TIME AND ENERGY AND SUMS REQUIRED
# TO CALCULATE DEVIATIONS AND MEANS AT PLANE =IPLANE 
#-----------------------------------------------------------------------
      TIMESP=IPLANE*TSTEP
# CALC TIME LEFT TO ARRIVE AT PLANE
      TIMLFT=TIMESP-ST
      T2LFT=TIMLFT*TIMLFT
      A=AP*TIMLFT
      B=BP*T2LFT 
      EPLANE=E1+A+B                      
      CONST6=math.sqrt(E1/EPLANE)         
#     DCX2=DCX1*CONST6
#     DCY2=DCY1*CONST6
      DCZ2=DCZ1*CONST6+EFLD*TIMLFT*CONST5/math.sqrt(EPLANE)
      XPLANE=X+DCX1*TIMLFT*math.sqrt(E1)*CONST3*0.010
      YPLANE=Y+DCY1*TIMLFT*math.sqrt(E1)*CONST3*0.010
      ZPLANE=Z+DCZ1*TIMLFT*math.sqrt(E1)*CONST3*0.010+T2LFT*EFLD*CONST2
      VZPLANE=DCZ2*math.sqrt(EPLANE)*CONST3*0.010
      XTPL(IPLANE)=XTPL(IPLANE)+XPLANE
      YTPL(IPLANE)=YTPL(IPLANE)+YPLANE
      ZTPL(IPLANE)=ZTPL(IPLANE)+ZPLANE
      XXTPL(IPLANE)=XXTPL(IPLANE)+XPLANE*XPLANE
      YYTPL(IPLANE)=YYTPL(IPLANE)+YPLANE*YPLANE
      ZZTPL(IPLANE)=ZZTPL(IPLANE)+ZPLANE*ZPLANE
      ETPL(IPLANE)=ETPL(IPLANE)+EPLANE
      TTPL(IPLANE)=TTPL(IPLANE)+ST+TIMLFT
      VZTPL(IPLANE)=VZTPL(IPLANE)+VZPLANE
      NETPL(IPLANE)=NETPL(IPLANE)+1 
      RETURN
      # end
      def FRIEDLAND:
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/FRED/FCION(4000),FCATT(4000)                               
      COMMON/OUTPT/TIME(300),ICOLL(30),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(960),ICOLNN(60)
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5
      COMMON/TTRM/ZTOT,TTOT,ZTOTS,TTOTS 
      COMMON/LARGE/CF(4000,960),EIN(960),TCF(4000),IARRY(960),RGAS(960),
     /IPN(960),WPL(960),LAST,ISIZE,PENFRA[3,960],TCFMAX(8) 
      COMMON/MIX2/E(4000),EROOT(4000),QTOT(4000),QREL(4000),QINEL(4000),
     /QEL(4000) 
      DIMENSION FR(4000)                                                
# -------------------------------------------------------
# CALCULATE DISTRIBUTION def USING FRIEDLAND TECHNIQUE
# CF: J.FRIEDLAND  PHYSICS OF FLUIDS 20(1461)1977
#  USE DITRIBUTION def TO CALCULATE AVERAGE ENERGY
#  IONISATION RATE AND ATTACHMENT RATE.  
#-----------------------------------------------------  
      ALFBAR=0.00
      ATTBAR=0.00
      EBAR=0.00
      FSUM=0.00
      DO 100 I=1,4000
      FR(I)=SPEC(I)/TCF(I)
      EBAR=EBAR+E(I)*SPEC(I)/TCF(I)
      ALFBAR=ALFBAR+FCION(I)*SPEC(I)/TCF(I)
      ATTBAR=ATTBAR+FCATT(I)*SPEC(I)/TCF(I)
 100  FSUM=FSUM+FR(I)
      DO 200 I=1,4000
 200  FR(I)=FR(I)/FSUM
      EBAR=EBAR/TTOTS
      ALFBAR=ALFBAR/TTOTS           
      ATTBAR=ATTBAR/TTOTS
      WRITE(6,900) EBAR,ALFBAR,ATTBAR    
 900  FORMAT(2(/),' ESTIMATE USING FRIEDLAND :',/,' AVERAGE ENERGY =',F8
     /.3,'EV.',/,' AVERAGE IONISATION =',E11.4,' *10**12/SEC',/,' AVERAG
     /E ATTACHMENT =',E11.4,' *10**12/SEC') 
      RETURN   
      # end
      def MONTEFD                                                :
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX 
      COMMON/LARGE/CF(4000,960),EIN(960),TCF(4000),IARRY(960),RGAS(960),
     /IPN(960),WPL(960),LAST,ISIZE,PENFRA[3,960],TCFMAX(8)
      COMMON/LARGEN/CFN(4000,60),TCFN(4000),SCLENUL(60),NPLAST
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/OUTPT/TIME(300),ICOLL(30),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(960),ICOLNN(60)
      COMMON/TTRM/ZTOT,TTOT,ZTOTS,TTOTS 
      COMMON/IPS/XSS(2000),YSS(2000),ZSS(2000),TSS(2000),ESS(2000),
     /DCXS(2000),DCYS(2000),DCZS(2000),IPLS(2000)  
      COMMON/SPLOUT/ESPL(8),XSPL(8),YSPL(8),ZSPL(8),TSPL(8),XXSPL(8),
     /YYSPL(8),ZZSPL(8),VZSPL(8),TSSUM(8),TSSUM2(8),ATTOION,ATTIOER,
     /ATTATER,NESST(9)
      COMMON/SPL1/TMSPL(8),TTMSPL(8),RSPL(8),RRSPL(8),RRSPM(8)
      COMMON/CTCALC/ZPLANE1,ZPLANE2,ZPLANE3,ZPLANE4,ZPLANE5,ZPLANE6,
     /ZPLANE7,ZPLANE8,IZFINAL
      COMMON/ANIS/PSCT(4000,960),ANGCT(4000,960),INDEX(960),NISO
      COMMON/IONFL1/NC0(960),EC0(960),NG1(960),EG1(960),NG2(960),
     /EG2(960),WKLM(960),EFL(960)  
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9]      
      DIMENSION EPRM(10000000),IESPECP(100),TEMP(4000)
#----------------------------------------------------------------------
#   CALCULATES COLLISION EVENTS AND UPDATES DIFFUSION AND VELOCITY.
#   THIS ROUTINE HANDLES TERMINATIONS AT FIXED DRIFT DISTANCES.   
# -------------------------------------------------------------------  
      S=0.00  
      ST=0.00
      X=0.00
      Y=0.00
      Z=0.00
      ZTOT=0.00
      ZTOTS=0.00
      TTOT=0.00
      TTOTS=0.00
      SMALL=1.0D-20                                                     
      TMAX1=0.00                                                       
      RDUM=RSTART                                                       
      E1=ESTART                                                         
      CONST9=CONST3*0.010
      API=DACOS(-1.00)
      DO 25 I=1,300
   25 TIME(I)=0.00
      DO 26 I=1,30
   26 ICOLL(I)=0
      DO 27 I=1,960
   27 ICOLN(I)=0
      DO 271 I=1,60
  271 ICOLNN(I)=0
      DO 28 I=1,4000
   28 SPEC(I)=0.00            
      DO 33 I=1,100
   33 IESPECP(I)=0  
      DO 34 I=1,8   
      ESPL(I)=0.00
      XSPL(I)=0.00
      YSPL(I)=0.00
      ZSPL(I)=0.00
      TSPL(I)=0.00
      XXSPL(I)=0.00
      YYSPL(I)=0.00
      ZZSPL(I)=0.00
      VZSPL(I)=0.00
      TSSUM(I)=0.00
      TSSUM2(I)=0.00
      TMSPL(I)=0.00
      TTMSPL(I)=0.00
      RSPL(I)=0.00
      RRSPL(I)=0.00
      RRSPM(I)=0.00
   34 NESST(I)=0 
      NESST(9)=0                     
      ID=0
      N4000=4000
      N300=300
      N100=100
      INTEM=8
      I100=0                                                            
      NCOL=0                                                            
      NNULL=0
      NELEC=0        
      NEION=0
      NMXADD=0
      NTMPFLG=0
      NPONT=0
      NCLUS=0
      J1=1                                                       
      ZSTRT=0.00
      TSSTRT=0.00  
#
      DO 111 J=1,4000
  111 TEMP(J)=TCFN(J)+TCF(J)      
      ABSFAKEI=abs(FAKEI)
      IFAKE=0:
      DO 112 J=1,9
  112 IFAKED[J]=0
#                                         
#     INITIAL DIRECTION COSINES                                         
      DCZ1=DCOS(THETA)                                                  
      DCX1=DSIN(THETA)*DCOS(PHI)                                        
      DCY1=DSIN(THETA)*DSIN(PHI) 
      DCX100=DCX1
      DCY100=DCY1
      DCZ100=DCZ1
      E100=E1                                      
      BP=EFIELD*EFIELD*CONST1                                           
      F1=EFIELD*CONST2                                                  
      F2=EFIELD*CONST3                                                  
      F4=2.00*API
# SET TO MAXIMUM POSSIBLE COLLISION FREQ.      
      TLIM=TCFMAX(1)
      DO 35 I=2,INTEM
   35 IF(TLIM < TCFMAX(I)) TLIM=TCFMAX(I)
      JPRINT=NMAX/10
      IPRINT=0
      ITER=0
      IPRIM=0  
# LOOP FOR NEW STARTING ELECTRONS
 544  IPRIM=IPRIM+1
      IZPLANE=0
      TZSTOP=1000.00
      IF(IPRIM > 1):
 :
# CHECK IF def WILL EXCEED MAXIMUM NUMBER OF ITERATIONS IN THIS
# CYCLE , IF SO OUTPUT CURRENT RESULTS.
       IF(ITER > NMAX):
 :
        IPRIM=IPRIM-1
        GO TO 700
       # endIF 
       X=0.00
       Y=0.00
       Z=0.00
       DCZ1=DCZ100
       DCX1=DCX100
       DCY1=DCY100
       NCLUS=NCLUS+1
       E1=E100
       ST=0.00
       ZSTRT=0.00
       TSSTRT=0.00
      # endIF
      IF(IPRIM > 10000000):
 :
      WRITE(6,944) IPRIM
  944 FORMAT(2X,' def STOPPED TOO MANY PRIMARIES IPRIM=',I7)
      STOP
      # endIF
      EPRM(IPRIM)=E1
      IDUM=DINT(E1)+1
      IDUM=DMIN0(IDUM,N100)
      IESPECP(IDUM)=IESPECP(IDUM)+1    
# START OF LOOP FOR NEWLY CREATED ELECTRONS .      
 555  TDASH=0.00
      NELEC=NELEC+1
# MAIN LOOP                                                             
    1 CONTINUE                                                          
#     IF(ITER > NMAX)  GO TO 315
      R1=drand48(RDUM)
      T=-math.log(R1)/TLIM+TDASH
      TOLD=TDASH
      TDASH=T
      AP=DCZ1*F2*math.sqrt(E1)
   15 IF(T >= TZSTOP and TOLD < TZSTOP) : 
      TLFT=TZSTOP                    
# STORE POSITION AND ENERGY AT Z PLANE = IZPLANE.
#      IF(IZPLANE == 0) WRITE(6,8876) IZPLANE
#8876  FORMAT(' IZPLANE=',I5)
       CALL SPLANE(T,E1,DCX1,DCY1,DCZ1,AP,BP,EFIELD,TLFT,IZPLANE)
#********************************************************************
#
# CHANGE  IF STATEMENT FROM (IZFINAL+1) TO (IZFINAL-1) 
# FOR ANODE TERMINATION .
#*********************************************************************
       IF(IZPLANE >= (IZFINAL+1):
) :  
  18    ZTOT=ZTOT+Z     
        TTOT=TTOT+ST
        ZTOTS=ZTOTS+Z-ZSTRT     
        TTOTS=TTOTS+ST-TSSTRT
# NO MORE ELECTRONS IN CASCADE RETURN TO MAIN.
        IF(NELEC == (NCLUS+1):
) GO TO 544  
# TAKE ELECTRONS FROM STORE 
   20   X=XSS(NPONT)
        Y=YSS(NPONT)
        Z=ZSS(NPONT)
        ST=TSS(NPONT)
        E1=ESS(NPONT)
        DCX1=DCXS(NPONT)
        DCY1=DCYS(NPONT)
        DCZ1=DCZS(NPONT)
        IZPLANE=IPLS(NPONT)
        NPONT=NPONT-1
        ZSTRT=Z
        TSSTRT=ST
        IF(Z > ZFINAL):
 :
# CHECK IF ELECTRON HAS ENOUGH ENERGY TO GO BACK TO FINAL PLANE         
         EPOT=EFIELD*(Z-ZFINAL)*100.00
         IF(E1 < EPOT):
 :
          NELEC=NELEC+1
          ISOL=1
          GO TO 18
         # endIF 
        # endIF  
        CALL TCALC(Z,DCZ1,E1,EFIELD,TZSTOP,TZSTOP1,ISOL,IZPLANE) 
        IF(TZSTOP == -99.00):
 :
# CATCH RUNAWAY ELECTRONS AT HIGH FIELD        
          NELEC=NELEC+1
          ISOL=1 
          GO TO 18
        # endIF   
        GO TO 555
       # endIF
# IF TWO SOLUTIONS REPEAT ENTRY FOR SECOND SOLUTION.         
      IF(ISOL == 2):
 :
       TZSTOP=TZSTOP1
       ISOL=1
       GO TO 15
      # endIF                 
      # endIF
#
      E=E1+(AP+BP*T)*T
      IF(E < 0.00):
 :
       WRITE(6,999) E,E1,AP,BP,T,DCZ1,ITER
 999   FORMAT(2X,' WARNING ENERGY LT.0. E=',D12.3,' E1=',D12.3,' AP=',D1
     /2.3,' BP=',D12.3,' T=',D12.3,/,' DCZ1=',D12.3,' ITER=',I10)     
       E=0.0010   
      # endIF                                                
      IE=DINT(E/ESTEP)+1                                             
      IE=DMIN0(IE,N4000)                                              
#                                                                       
#     TEST FOR #real OR NULL COLLISION                                   
#                                                                       
      R5=drand48(RDUM) 
      TEST1=TCF(IE)/TLIM                                                
      IF(R5 <= TEST1):
 GO TO 137                                         
      NNULL=NNULL+1
      TEST2=TEMP(IE)/TLIM
      IF(R5 < TEST2):
 :
# DETERMINE NULL COLLISION LEVEL
       IF(NPLAST == 0):
 GO TO 1
       R2=drand48(RDUM)
       I=0
  888  I=I+1
       IF(CFN(IE,I):
 < R2) GO TO 888
# INCREMENT NULL SCATTER SUM
       ICOLNN(I)=ICOLNN(I)+1
       GO TO 1
      # endIF                   
      TEST3=(TEMP(IE)+ABSFAKEI)/TLIM
      IF(R5 < TEST3):
 :       
# FAKE COLLISION INCREMENT COUNTER 
       IFAKE=IFAKE+1:
       IFAKED[IZPLANE]=IFAKED[IZPLANE]+1:
       IF(FAKEI < 0.0):
 :
       NEION=NEION+1
# FAKE ATTACHMENT START NEW ELECTRON
        IF(NELEC == (NCLUS+1):
) GO TO 544      
# ELECTRON CAPTURED TAKE NEXT ELECTRON FROM STORE       
        GO TO 20
       # endIF
# FAKE IONISATION ADD ELECTRON TO STORE
       NCLUS=NCLUS+1
       NPONT=NPONT+1
       NMXADD=MAX(NPONT,NMXADD) 
       IF(NPONT > 2000):
 :
        WRITE(6,546) NPONT,ITER
        STOP
       # endIF     
       A=T*CONST9*math.sqrt(E1)
#      A=AP*T
       XSS(NPONT)=X+DCX1*A        
       YSS(NPONT)=Y+DCY1*A
       ZSS(NPONT)=Z+DCZ1*A+T*T*F1
       TSS(NPONT)=ST+T
       ESS(NPONT)=E
       CONST6=math.sqrt(E1/E)
       DCXS(NPONT)=DCX1*CONST6
       DCYS(NPONT)=DCY1*CONST6
       DCZS(NPONT)=DCZ1*CONST6+EFIELD*T*CONST5/math.sqrt(E)
       IDM1=1+DINT(ZSS(NPONT)/ZSTEP)
#      IF(ZSS(NPONT) > ZFINAL or ZSS(NPONT) < 0.0) :
#       NCLUS=NCLUS-1
#       NPONT=NPONT-1
#       IFAKE=IFAKE-1
#       IFAKED[IZPLANE]=IFAKED[IZPLANE]-1
#       GO TO 1
#      # endIF
       IF(IDM1 < 1):
 IDM1=1
       IF(IDM1 > 9):
 IDM1=9     
       IPLS(NPONT)=IDM1 
       NESST(IPLS(NPONT))=NESST(IPLS(NPONT))+1
       GO TO 1
      # endIF
      GO TO 1                                                           
#                                                                       
#  CALCULATE DIRECTION COSINES AND POSITIONS AT INSTANT BEFORE COLLISION
#    ALSO UPDATE DIFFUSION  AND ENERGY CALCULATIONS.                    
  137 T2=T*T
      IF(T >= TMAX1):
 TMAX1=T                                            
      TDASH=0.00                                                       
      CONST6=math.sqrt(E1/E)                                                
      DCX2=DCX1*CONST6                                                  
      DCY2=DCY1*CONST6                                                  
      DCZ2=DCZ1*CONST6+EFIELD*T*CONST5/math.sqrt(E)
      A=AP*T                                                            
      B=BP*T2                                                           
      CONST7=CONST9*math.sqrt(E1)                                           
      A=T*CONST7                                                        
      NCOL=NCOL+1                                                       
      CZ1=DCZ1*CONST7                                                   
      X=X+DCX1*A                                                        
      Y=Y+DCY1*A
      Z=Z+DCZ1*A+T2*F1
      ST=ST+T
      IT=DINT(T+1.00)                                              
      IT=DMIN0(IT,N300)                                               
      TIME(IT)=TIME(IT)+1.00                                           
      CX1=DCX1*CONST7                                                   
      CY1=DCY1*CONST7                                                   
      SPEC(IE)=SPEC(IE)+1.00                                         
# --------------------------------------------------------------------- 
#     DETERMINATION OF #real COLLISION TYPE                              
# --------------------------------------------------------------------- 
      R2=drand48(RDUM)
# FIND LOCATION WITHIN 4 UNITS IN COLLISION ARRAY
      CALL SORT(I,R2,IE)                                                
  140 I=I+1
      IF(CF(IE,I):
 < R2) GO TO 140
      S1=RGAS(I)                                                        
      EI=EIN(I)
      IF(E < EI):
 :
# FIX ENERGY LOSS SMALLER THAN INCIDENT ENERGY IF A BINING ERROR OCCURS.
#     WRITE(6,994) E,EI,ITER       
#994  FORMAT(3X,' WARNING BINNING ERROR ENERGY =',F8.3,' EI=',F8.3,' ITE
#    /R =',I12)
      EI=E-0.00010
      # endIF                                                         
      IF(IPN(I):
 == 0) GO TO 666
# ATTACHMENT      
      IF(IPN(I):
 == -1) :
       NEION=NEION+1
       IPT=IARRY(I)
       ID=ID+1
       ITER=ITER+1
       IPRINT=IPRINT+1
       ICOLL(IPT)=ICOLL(IPT)+1
       ICOLN(I)=ICOLN(I)+1
       IT=DINT(T+1.00)
       IT=DMIN0(IT,N300)
       TIME(IT)=TIME(IT)+1.00
       ZTOT=ZTOT+Z
       TTOT=TTOT+ST
       ZTOTS=ZTOTS+Z-ZSTRT
       TTOTS=TTOTS+ST-TSSTRT
       IDM1=1+DINT(Z/ZSTEP)
       IF(IDM1 < 1):
 IDM1=1
       IF(IDM1 > 9):
 IDM1=9
       NESST(IDM1)=NESST(IDM1)-1
# ELECTRON CAPTURED START NEW PRIMARY 
       IF(NELEC == (NCLUS+1):
) GO TO 544      
# ELECTRON CAPTURED TAKE NEXT ELECTRON FROM STORE       
       GO TO 20
      # endIF    
      EISTR=EI                                             
      R9=drand48(RDUM)
#     ESEC=R9*(E-EI) 
#  USE OPAL PETERSON AND BEATY SPLITTING FACTOR.
      ESEC=WPL(I)*TAN(R9*ATAN((E-EI)/(2.00*WPL(I))))
      ESEC=WPL(I)*(ESEC/WPL(I))**0.9524  
      EI=ESEC+EI 
# STORE POSITION ,ENERGY, DIRECTION COSINES AND TIME OF GENERATION
# OF IONISATION ELECTRON      
      NCLUS=NCLUS+1
      NPONT=NPONT+1
      NMXADD=MAX(NPONT,NMXADD) 
      IF(NPONT > 2000):
 :
      WRITE(6,546) NPONT,ITER
 546  FORMAT(2X,' def STOPPED NPONT=',I5,' ITER=',I10)
      STOP
      # endIF     
      XSS(NPONT)=X        
      YSS(NPONT)=Y
      ZSS(NPONT)=Z
      TSS(NPONT)=ST
      ESS(NPONT)=ESEC
      NTMPFLG=1
      NCLTMP=NPONT
# RANDOMISE SECONDARY ELECTRON DIRECTION
#     R3=drand48(RDUM)
#     F3=1.00-2.00*R3
#     THETA0=DACOS(F3)
#     F6=DCOS(THETA0)
#     F5=DSIN(THETA0)
#     R4=drand48(RDUM)
#     PHI0=F4*R4
#     F8=DSIN(PHI0)
#     F9=DCOS(PHI0)               
#     DCXS(NPONT)=F9*F5
#     DCYS(NPONT)=F8*F5
#     DCZS(NPONT)=F6
      IDM1=1+DINT(Z/ZSTEP)
      IF(IDM1 < 1):
 IDM1=1
      IF(IDM1 > 9):
 IDM1=9     
      IPLS(NPONT)=IDM1 
      NESST(IPLS(NPONT))=NESST(IPLS(NPONT))+1
# STORE POSSIBLE SHELL EMISSIONS AUGER OR FLUORESCENCE
      IF(EISTR > 30.0):
 :
# AUGER EMISSION WITHOUT FLUORESCENCE
       NAUG=NC0(I)
       EAVAUG=EC0(I)/DFLOAT(NAUG)
       DO 701 JFL=1,NAUG
       NCLUS=NCLUS+1
       NPONT=NPONT+1
       XSS(NPONT)=X
       YSS(NPONT)=Y
       ZSS(NPONT)=Z
       TSS(NPONT)=ST
       ESS(NPONT)=EAVAUG
       R3=drand48(RDUM)
       F3=1.00-2.00*R3
       THETA0=DACOS(F3)
       F6=DCOS(THETA0)
       F5=DSIN(THETA0)
       R4=drand48(RDUM)
       PHI0=F4*R4
       F8=DSIN(PHI0)
       F9=DCOS(PHI0)
       DCXS(NPONT)=F9*F5
       DCYS(NPONT)=F8*F5
       DCZS(NPONT)=F6
       IDM1=1+DINT(Z/ZSTEP)
       IF(IDM1 < 1):
 IDM1=1
       IF(IDM1 > 9):
 IDM1=9
       IPLS(NPONT)=IDM1
       NESST(IPLS(NPONT))=NESST(IPLS(NPONT))+1
  701  CONTINUE
      # endIF
#                                                                       
#  GENERATE SCATTERING ANGLES AND UPDATE  LABORATORY COSINES AFTER      
#   COLLISION ALSO UPDATE ENERGY OF ELECTRON.                           
#                                                                       
  666 IPT=IARRY(I)
      ID=ID+1
      ITER=ITER+1
      IPRINT=IPRINT+1
      ICOLL(IPT)=ICOLL(IPT)+1
      ICOLN(I)=ICOLN(I)+1
# IF EXCITATION : ADD PROBABILITY,PENFRA(1,I), OF TRANSFER TO GIVE
# IONISATION OF THE OTHER GASES IN THE MIXTURE.
      IF(IPEN == 0):
 GO TO 5 
      IF(PENFRA[1,I] != 0.0):
 :
       RAN=drand48(RDUM)
       IF(RAN > PENFRA[1,I]):
 GO TO 5
       NCLUS=NCLUS+1
       NPONT=NPONT+1
       IF(NPONT > 2000):
 :
        WRITE(6,546) NPONT,ITER
        STOP
       # endIF 
# ENTER HERE POSSIBLE DELOCALISATION LENGTH FOR PENNING TRANSFER
       IF(PENFRA[2,I] == 0.0):
 :
        XSS(NPONT)=X
        YSS(NPONT)=Y
        ZSS(NPONT)=Z
        IF(ZSS(NPONT):
 > ZFINAL or ZSS(NPONT) < 0.0) GO TO 669
        GO TO 667
       # endIF
       ASIGN=1.0
       RAN=drand48(RDUM)
       RAN1=drand48(RDUM)
       IF(RAN1 < 0.5):
 ASIGN=-ASIGN
       XSS(NPONT)=X-math.log(RAN)*PENFRA[2,I]*ASIGN
       RAN=drand48(RDUM)
       RAN1=drand48(RDUM)
       IF(RAN1 < 0.5):
 ASIGN=-ASIGN
       YSS(NPONT)=Y-math.log(RAN)*PENFRA[2,I]*ASIGN
       RAN=drand48(RDUM)
       RAN1=drand48(RDUM)
       IF(RAN1 < 0.5):
 ASIGN=-ASIGN
       ZSS(NPONT)=Z-math.log(RAN)*PENFRA[2,I]*ASIGN
       IF(ZSS(NPONT):
 < 0.0) GO TO 669
       IF(ZSS(NPONT):
 > ZFINAL or ZSS(NPONT) < 0.0) GO TO 669
  667  TPEN=ST
       IF(PENFRA[3,I] == 0.):
 GO TO 668 
       RAN=drand48(RDUM)
       TPEN=ST-math.log(RAN)*PENFRA[3,I]
  668  TSS(NPONT)=TPEN
       ESS(NPONT)=1.0
       DCXS(NPONT)=DCX1 
       DCYS(NPONT)=DCY1 
       DCZS(NPONT)=DCZ1
# FIND LAST PLANE BEFORE ZSS(NPONT)
       IDM1=1+DINT(ZSS(NPONT)/ZSTEP)
       IF(IDM1 < 1):
 IDM1=1
       IF(IDM1 > 9):
 IDM1=9
       IPLS(NPONT)=IDM1
       NESST(IPLS(NPONT))=NESST(IPLS(NPONT))+1
       GO TO 5  
#     PENNING TRANSFER OCCURS BEFORE FIRST SPACE PLANE CLEAR ENTRY
  669  NPONT=NPONT-1
       NCLUS=NCLUS-1
      # endIF
    5 S2=(S1*S1)/(S1-1.00) 
# ANISOTROPIC SCATTERING
      R3=drand48(RDUM)
      IF(INDEX(I):
 == 1) :
       R31=drand48(RDUM)
       F3=1.00-R3*ANGCT(IE,I)
       IF(R31 > PSCT(IE,I):
) F3=-F3
      elif(INDEX(I) == 2) :
       EPSI=PSCT(IE,I)
       F3=1.00-(2.00*R3*(1.00-EPSI)/(1.00+EPSI*(1.00-2.00*R3)))
      else:
# ISOTROPIC SCATTERING
       F3=1.00-2.00*R3 
      # endIF
      THETA0=DACOS(F3)                                                  
      R4=drand48(RDUM)
      PHI0=F4*R4                                                        
      F8=DSIN(PHI0)                                                     
      F9=DCOS(PHI0)                                                     
      IF(E < EI):
 EI=0.00                                              
      ARG1=1.00-S1*EI/E                                                
      ARG1=DMAX1(ARG1,SMALL)                                            
      D=1.00-F3*math.sqrt(ARG1)                                            
      E1=E*(1.00-EI/(S1*E)-2.00*D/S2)                                 
      E1=DMAX1(E1,SMALL)                                                
      Q=math.sqrt((E/E1)*ARG1)/S1                                           
      Q=DMIN1(Q,1.00)                                                  
      THETA=DASIN(Q*DSIN(THETA0))                                       
      F6=DCOS(THETA)                                                    
      U=(S1-1.00)*(S1-1.00)/ARG1                                      
      CSQD=F3*F3                                                        
      IF(F3 < 0.00 and CSQD > U):
 F6=-1.00*F6                        
      F5=DSIN(THETA)                                                    
      DCZ2=DMIN1(DCZ2,1.00)                                            
      ARGZ=math.sqrt(DCX2*DCX2+DCY2*DCY2)  
      IF(ARGZ == 0.00):
 :
       DCZ1=F6        
       DCX1=F9*F5                       
       DCY1=F8*F5  
       IF(NTMPFLG == 1):
 :
# USE FREE KINEMATICS FOR IONISATION SECONDARY ANGLE
        F5S=F5*math.sqrt(E1/ESS(NCLTMP))
        IF(F5S > 1.0):
 F5S=1.0
        THSEC=DASIN(F5S)
        F5S=DSIN(THSEC)
        F6S=DCOS(THSEC)
        IF(F6 < 0.0):
 F6S=-F6S
        PHIS=PHI0+API
        IF(PHIS > F4):
 PHIS=PHI0-F4
        F8S=DSIN(PHIS)
        F9S=DCOS(PHIS)
        DCZS(NCLTMP)=F6S
        DCYS(NCLTMP)=F8S*F5S
        DCXS(NCLTMP)=F9S*F5S
        NTMPFLG=0
       # endIF
       GO TO 190
      # endIF                                                   
      DCZ1=DCZ2*F6+ARGZ*F5*F8                                           
      DCY1=DCY2*F6+(F5/ARGZ)*(DCX2*F9-DCY2*DCZ2*F8)                     
      DCX1=DCX2*F6-(F5/ARGZ)*(DCY2*F9+DCX2*DCZ2*F8)
      IF(NTMPFLG == 1):
 :
# USE FREE KINEMATICS FOR IONISATION SECONDARY ANGLE
       F5S=F5*math.sqrt(E1/ESS(NCLTMP))
       IF(F5S > 1.0):
 F5S=1.0
       THSEC=DASIN(F5S)
       F5S=DSIN(THSEC)
       F6S=DCOS(THSEC)
       IF(F6 < 0.0):
 F6S=-F6S
       PHIS=PHI0+API
       IF(PHIS > F4):
 PHIS=PHI0-F4
       F8S=DSIN(PHIS)
       F9S=DCOS(PHIS)
       DCZS(NCLTMP)=DCZ2*F6S+ARGZ*F5S*F8S
       DCYS(NCLTMP)=DCY2*F6S+(F5S/ARGZ)*(DCX2*F9S-DCY2*DCZ2*F8S)
       DCXS(NCLTMP)=DCX2*F6S-(F5S/ARGZ)*(DCY2*F9S+DCX2*DCZ2*F8S)
       NTMPFLG=0
      # endIF
 190  CONTINUE
# STORE DIRECTION COSINES AND ENERGY AFTER N COLLISIONS
# FOR LATER REUSE IN PRIMARY GENERATION.
      I100=I100+1
      IF(I100 == 200):
 :
       DCZ100=DCZ1
       DCX100=DCX1                            
       DCY100=DCY1 
       E100=E1
       I100=0
      # endIF 
      IF(Z > ZFINAL):
 :
# CHECK IF ELECTRON HAS ENOUGH ENERGY TO GO BACK TO FINAL PLANE.
       EPOT=EFIELD*(Z-ZFINAL)*100.00
       IF(E1 < EPOT):
 GO TO 18
      # endIF    
# CALCULATE TIME TZSTOP TO ARRIVE AT NEXT Z PLANE IZPLANE.
      CALL TCALC(Z,DCZ1,E1,EFIELD,TZSTOP,TZSTOP1,ISOL,IZPLANE)
# CATCH RUNAWAY ELECTRONS AT HIGH FIELD       
      IF(TZSTOP == -99.00):
 GO TO 18
      IF(IPRINT > JPRINT):
 GO TO 200
      GO TO 1                                    
#    INTERMEDIATE PRINTOUT                       
 200  IPRINT=0
      W=ZTOTS/TTOTS                          
      W=W*1.0D+09                                                       
      XID=DFLOAT(ID)
      JCT=ID/100000
#     IF(J1 == 1) WRITE(6,201)                                         
# 201 FORMAT(/,7X,'INTERMEDIATE OUTPUT',/,'    VEL       POS       TIME 
#    /     COUNT')                  
#     WRITE(6,202) W,ZTOTS,TTOTS,JCT     
# 202 FORMAT(1X,F8.3,2(1X,D10.3),1X,I6)    
      J1=J1+1            
      GO TO 1
#  MAIN LOOP # end          
  700 XID=DFLOAT(ID)
      IF(NELEC > IPRIM):
 : 
       ANEION=DFLOAT(NEION)
       ANBT=DFLOAT(NELEC-IPRIM)
       ATTOION=ANEION/ANBT 
       ATTATER=math.sqrt(ANEION)/ANEION 
       ATTIOER=math.sqrt(ANBT)/ANBT                  
      else:
       ATTOION=-1.00
       ANEION=DFLOAT(NEION)
       ATTATER=math.sqrt(ANEION)/ANEION
      # endIF 
      JCT=ID/10000
      IF(J1 == 1):
 :
      WRITE(6,940) NCLUS,ITER,NELEC,NEION
  940 FORMAT(2(/),' def STOPPED (TOO FEW COLLISIONS), DECREASE THE
     /ESTIMATED ALPHA.  NCLUS=',I7,'  ITER =',I9,' NELEC=',I9,' NEION ='
     /,I6)   
      # endIF
      WRITE(6,878) NELEC,NEION,IPRIM
 878  FORMAT(/,' TOTAL NO OF ELECTRONS=',I10,/,' TOTAL NO OF NEG. IONS='
     /,I10,/,' TOTAL NO OF PRIMARIES=',I10)  
      EPRMBAR=0.00
      E2PRM=0.00
      IF(IPRIM == 1):
 RETURN     
      DO 310 I=1,IPRIM
      E2PRM=E2PRM+EPRM(I)*EPRM(I)
  310 EPRMBAR=EPRMBAR+EPRM(I) 
      EBAR=EPRMBAR/IPRIM 
      EERR=math.sqrt(E2PRM/IPRIM-EBAR**2)
      WRITE(6,836) EBAR,EERR
  836 FORMAT(/,2X,'AVERAGE ENERGY OF PRIMARY ELECTRON =',F10.3,' EV.',/,
     /'   ENERGY SPREAD OF PRIMARY ELECTRON =',F10.3,' EV.')
#     WRITE(6,837) (IESPECP(J),J=1,100)
# 837 FORMAT(/,2X,'ENERGY SPECTRUM OF PRIMARIES IN 1EV BINS',/,10(2X,10I
#    /5,/))
      RETURN    
  315 IF(ITER > NMAX) :
       WRITE(6,991) ITER,NMAX,NPONT,NELEC,IPRIM,NMXADD
 991   FORMAT(2(/),' def STOPPED.  ITER =',I10,'    NMAX =',I10,/,
     /' NPONT=',I4,' NELEC=',I8,' IPRIM=',I6,' NMXADD=',I3) 
       STOP
      # endIF   
      RETURN                                                            
      # end
      def SPLANE(T,E1,DCX1,DCY1,DCZ1,AP,BP,EFLD,TIMLFT,IZPLANE):
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5
      COMMON/OUTPT/TIME(300),ICOLL(30),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(960),ICOLNN(60) 
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/SPLOUT/ESPL(8),XSPL(8),YSPL(8),ZSPL(8),TSPL(8),XXSPL(8),
     /YYSPL(8),ZZSPL(8),VZSPL(8),TSSUM(8),TSSUM2(8),ATTOION,ATTIOER,
     /ATTATER,NESST(9)
      COMMON/SPL1/TMSPL(8),TTMSPL(8),RSPL(8),RRSPL(8),RRSPM(8)
#--------------------------------------------------------
# STORES POSITION, TIME AND ENERGY AND SUMS REQUIRED
# TO CALCULATE DEVIATIONS AND MEANS AT PLANE =IZPLANE   
#---------------------------------------------------- 
      IF(IZPLANE > 8):
 RETURN
      T2LFT=TIMLFT*TIMLFT
      A=AP*TIMLFT
      B=BP*T2LFT 
      EPLANE=E1+A+B                      
      CONST6=math.sqrt(E1/EPLANE)         
#     DCX2=DCX1*CONST6
#     DCY2=DCY1*CONST6
      DCZ2=DCZ1*CONST6+EFLD*TIMLFT*CONST5/math.sqrt(EPLANE)
      XPLANE=X+DCX1*TIMLFT*math.sqrt(E1)*CONST3*0.010
      YPLANE=Y+DCY1*TIMLFT*math.sqrt(E1)*CONST3*0.010
      ZPLANE=Z+DCZ1*TIMLFT*math.sqrt(E1)*CONST3*0.010+T2LFT*EFLD*CONST2
      VZPLANE=DCZ2*math.sqrt(EPLANE)*CONST3*0.010
      WGHT=abs(1.00/VZPLANE)
      RPLANE=math.sqrt(XPLANE**2+YPLANE**2)
      XSPL(IZPLANE)=XSPL(IZPLANE)+XPLANE*WGHT
      YSPL(IZPLANE)=YSPL(IZPLANE)+YPLANE*WGHT
      RSPL(IZPLANE)=RSPL(IZPLANE)+RPLANE*WGHT
      ZSPL(IZPLANE)=ZSPL(IZPLANE)+ZPLANE*WGHT
      TMSPL(IZPLANE)=TMSPL(IZPLANE)+(ST+TIMLFT)*WGHT
      TTMSPL(IZPLANE)=TTMSPL(IZPLANE)+(ST+TIMLFT)*(ST+TIMLFT)*WGHT
      XXSPL(IZPLANE)=XXSPL(IZPLANE)+XPLANE*XPLANE*WGHT 
      YYSPL(IZPLANE)=YYSPL(IZPLANE)+YPLANE*YPLANE*WGHT
      RRSPM(IZPLANE)=RRSPM(IZPLANE)+RPLANE*RPLANE*WGHT
      ZZSPL(IZPLANE)=ZZSPL(IZPLANE)+ZPLANE*ZPLANE*WGHT 
      ESPL(IZPLANE)=ESPL(IZPLANE)+EPLANE*WGHT
      TSPL(IZPLANE)=TSPL(IZPLANE)+WGHT/(ST+TIMLFT)
      VZSPL(IZPLANE)=VZSPL(IZPLANE)+VZPLANE*WGHT
      TSSUM(IZPLANE)=TSSUM(IZPLANE)+WGHT
      TSSUM2(IZPLANE)=TSSUM2(IZPLANE)+WGHT*WGHT
      RETURN
      # end
      def TCALC(Z,DCZ1,E1,EFIELD,TZSTOP1,TZSTOP2,ISOL,IZPLANE):   
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/CTCALC/ZPLANE1,ZPLANE2,ZPLANE3,ZPLANE4,ZPLANE5,ZPLANE6,
     /ZPLANE7,ZPLANE8,IZFINAL 
#----------------------------------------------------------------------
# CALCULATE ELAPSED TIME ,TZSTOP1, UNTIL ARRIVAL AT NEXT PLANE ,IZPLANE.
# IF TWO POSITIVE SOLUTIONS SET ISOL=2 AND CALCULATE SECOND SOLUTION 
#  TZSTOP2.
#-----------------------------------------------------------------------
      ISOL=1
      A=EFIELD*CONST2
      B=math.sqrt(E1)*CONST3*0.010*DCZ1
      B2=B*B
      IF(Z < ZPLANE1):
 :
       IZPLANE=1
       C1=Z-ZPLANE1
       elif(Z < ZPLANE2) :
       IZPLANE=2
       C1=Z-ZPLANE2
       C2=Z-ZPLANE1
       elif(Z < ZPLANE3) :
       IZPLANE=3
       C1=Z-ZPLANE3
       C2=Z-ZPLANE2
       elif(Z < ZPLANE4) :
       IZPLANE=4
       C1=Z-ZPLANE4
       C2=Z-ZPLANE3
       elif(Z < ZPLANE5) :
       IZPLANE=5
       C1=Z-ZPLANE5
       C2=Z-ZPLANE4
       elif(Z < ZPLANE6) :
       IZPLANE=6
       C1=Z-ZPLANE6
       C2=Z-ZPLANE5
       elif(Z < ZPLANE7) :
       IZPLANE=7
       C1=Z-ZPLANE7
       C2=Z-ZPLANE6
       elif(Z < ZPLANE8) : 
       IZPLANE=8
       C1=Z-ZPLANE8
       C2=Z-ZPLANE7
       else:                                 
       IZPLANE=9
       C1=Z-ZPLANE8-10.00*ZSTEP
       C2=Z-ZPLANE8
       # endIF   
# CHECK PLANE IN DRIFT DIRECTION ( ONLY ONE TIME SOLUTION POSITIVE) 
      FAC=B2-4.00*A*C1
      IF(FAC < 0.00):
 :
# PASSED FINAL PLANE  (RUNAWAY ELECTRONS)      
       TZSTOP1=-99.00
       RETURN
      # endIF      
      TSTOP1=(-B+math.sqrt(B2-4.00*A*C1))/(2.00*A)
      TSTOP2=(-B-math.sqrt(B2-4.00*A*C1))/(2.00*A)
      IF(TSTOP1 < TSTOP2):
 :
       IF(TSTOP1 >= 0.00):
        TZSTOP1=TSTOP1
       else:
        TZSTOP1=TSTOP2
       # endIF
       IF(IZPLANE == 1):
 RETURN 
      else:     
       IF(TSTOP2 >= 0.00):
 :   
        TZSTOP1=TSTOP2
       else:
        TZSTOP1=TSTOP1
       # endIF               
       IF(IZPLANE == 1):
 RETURN
      # endIF
# CHECK PLANE IN BACKWARD DIRECTION (ONLY IF #real SOLUTION)
      FAC=B2-4.00*A*C2
      IF(FAC < 0.00):
 RETURN
      TSTOP1=(-B+math.sqrt(FAC))/(2.00*A)                         
      TSTOP2=(-B-math.sqrt(FAC))/(2.00*A)
# SOLUTIONS CAN BE EITHER BOTH POSITIVE OR BOTH NEGATIVE
# PICK POSITIVE SOLUTIONS AND ORDER IN TIME SEQUENCE OR
#  RETURN IF NEGATIVE
      IF(TSTOP1 < 0.00):
 RETURN
#  FOUND BACKWARD SOLUTIONS
      ISOL=2 
      IZPLANE=IZPLANE-1          
      IF(TSTOP1 < TSTOP2):
 :
       TZSTOP1=TSTOP1
       TZSTOP2=TSTOP2          
      else:            
       TZSTOP1=TSTOP2
       TZSTOP2=TSTOP1 
      # endIF   
      RETURN
      # end
      def OUTPUT2  :
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/E(4000),EROOT(4000),QTOT(4000),QREL(4000),QINEL(4000),
     /QEL(4000)                                                         
      COMMON/MIX1/QELM(4000),QSUM(4000),QION(6,4000),QIN1(250,4000),    
     /QIN2(250,4000),QIN3(250,4000),QIN4(250,4000),QIN5(250,4000),
     /QIN6(250,4000),QSATT(4000)             
      COMMON/RATIO/AN1,AN2,AN3,AN4,AN5,AN6,AN,FRAC(6)                   
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX
      COMMON/LARGE/CF(4000,960),EIN(960),TCF(4000),IARRY(960),RGAS(960),
     /IPN(960),WPL(960),LAST,ISIZE,PENFRA[3,960],TCFMAX(8) 
      COMMON/LARGEN/CFN(4000,60),TCFN(4000),SCLENUL(60),NPLAST        
      COMMON/OUTPT/TIME(300),ICOLL(30),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(960),ICOLNN(60)
      COMMON/TTRM/ZTOT,TTOT,ZTOTS,TTOTS 
      COMMON/SINT/SIMF(4000)                                            
      COMMON/NAMES/NAMEG(6)
      COMMON/SCRIP/DSCRPT(960),DSCRPTN(60)
      CHARACTER*50 DSCRPT,DSCRPTN
      CHARACTER*25 NAMEG  
      DIMENSION FREQEL(6),FREQSP(6),FREINE(6),FREATT(6),FREION(6)       
      DIMENSION SPECS(40)                                               
      WRITE(6,15)                                                       
      WRITE(6,15)                                                       
   15 FORMAT('----------------------------------------------------------
     /-------------------')
      WRITE(6,110) SPEC(4000)
 110  FORMAT(2(/),' NUMBER OF COLLISIONS IN FINAL ENERGY BIN =',F8.1)   
      CALL COLF(FREQ,FREEL,FREION1,FREATT1,FREIN,N#real)  
      TTOTS=ST
      WRITE(6,220) FREQ,FREEL,FREIN,FREION1,FREATT1                   
  220 FORMAT(/,6X,'TOTAL COLL. FREQ. =',D11.4,' (*10**12)/SEC.',/,2X,'  
     /ELASTIC COLL. FREQ. =',D11.4,' (*10**12)/SEC.',/,2X,'INELASTIC COL
     /L. FREQ. =',D11.4,' (*10**12)/SEC.',/,1X,'IONISATION COLL. FREQ. =
     /',D11.4,' (*10**12)/SEC.',/,1X,'ATTACHMENT COLL. FREQ. =',D11.4,' 
     /(*10**12/SEC.',/)                    
      WRITE(6,15)                                                       
#     ILAST=DINT(TMAX1)+1                                                
#     IF(ILAST > 120) ILAST=120                                        
#     WRITE(6,1010) (TIME(I),I=1,ILAST)                                 
#1010 FORMAT(/,6X,'DISTRIBUTION OF COLLISION TIMES IN 1 PECOSECOND BINS'
#    /,2(/),20(1X,6(F10.1,2X)/))                                          
#     WRITE(6,15) 
      DO 1020 I=1,NGAS         
      FREQEL(I)=ICOLL((5*I)-4)/TTOTS                                    
      FREQSP(I)=ICOLL(5*I)/TTOTS                                        
      FREINE(I)=ICOLL((5*I)-1)/TTOTS                                    
      FREATT(I)=ICOLL((5*I)-2)/TTOTS  
      FREION(I)=ICOLL((5*I)-3)/TTOTS
 1020 CONTINUE
#     WRITE(6,1050) (NAMEG(I),FREQEL(I),FREQSP(I),FREINE(I),FREATT(I),
#    /FREION(I),I=1,NGAS)  
#1050 FORMAT(/,5X,'COLLISION FREQUENCIES SORTED ACCORDING TO GAS AND TYP
#    /E OF COLLISION',/,5X,' IN UNITS OF 10**12/SEC.',2(/),'  GASES USED
#    /     ELASTIC     SUPERELAS   INELASTIC  ATTACHMENT  IONISATION ',2
#    /(/),6(A15,1X,5(D10.3,2X),/))                                               
#     WRITE(6,15) 
      WRITE(6,1060)
 1060 FORMAT(/,2X,'DETAILED COLLISION FREQUENCIES FOR EACH GAS IN UNITS 
     /OF 10**12/SEC. :',2(/))
      DO 1100 J=1,NGAS
      WRITE(6,1065) NAMEG(J)
 1065 FORMAT(3X,A25,/,'-----------------------------',2(/))
      DO 1090 K=1,LAST
      IF(IARRY(K):
 <= (5*J) and IARRY(K) > (5*(J-1))) :
       FRELV=FREQ*ICOLN(K)/DFLOAT(N#real)
       IF(ICOLN(K):
 == 0) :
        ERRFRE=0.0
       else:
        ERRFRE=100.00*math.sqrt(DFLOAT(ICOLN(K)))/DFLOAT(ICOLN(K))
       # endIF  
       WRITE(6,1070) DSCRPT(K),FRELV,ERRFRE
 1070 FORMAT(3X,A50,3X,D11.4,' +-',F8.4,' %')
      # endIF
 1090 CONTINUE
 1100 CONTINUE
      WRITE(6,15)
      IF(NPLAST == 0):
 GO TO 1092
      WRITE(6,335) 
  335 FORMAT(/,2X,'NULL COLLISION FREQUENCIES FOR GAS MIXTURE',/,'  NB. 
     /OUPUT CORRECTED FOR SCALING OF X-SECTIONS.',/, '------------------
     /---------------------------')
      DO 1091 JJ=1,NPLAST
      FRELV=FREQ*ICOLNN(JJ)/DFLOAT(N#real)
      IF(ICOLNN(JJ):
 == 0) :
       ERRFRE=0.0
      else:
       ERRFRE=100.00*math.sqrt(DFLOAT(ICOLNN(JJ)))/DFLOAT(ICOLNN(JJ))
      # endIF  
# RESCALE NULL COLLISIONS
      FRELV=FRELV/(SCLENUL(JJ)**2)
#       WRITE(6,1966) SCLENUL(JJ)
#1966 FORMAT(' SCLENUL=',D12.4)
 1091 WRITE(6,1070) DSCRPTN(JJ),FRELV,ERRFRE   
 1092 WRITE(6,15)                  
      WRITE(6,301)                                                      
  301 FORMAT(2(/),10X,' NORMALISED ENERGY DISTRIBUTION')                
      J1=0                                                              
      J2=0    
      SPECN=DFLOAT(N#real)
      SMSPEC=0.00                                                      
      DO 350 K=1,4000                                                   
      SPEC(K)=SPEC(K)/SPECN                                             
      J1=J1+1                                                           
      SMSPEC=SMSPEC+SPEC(K)                                             
      IF(J1 < 100):
 GO TO 350                                           
      J2=J2+1                                                           
      SPECS(J2)=SMSPEC                                                  
      SMSPEC=0.00                                                      
      J1=0                                                              
  350 CONTINUE                                                          
      EPLT=EFINAL/40.00                                               
      DO 420 I=1,40                                                     
      ENER=EPLT*(DFLOAT(I)-0.50)                                       
      WRITE(6,302) ENER,SPECS(I)                                        
  302 FORMAT(6X,'E=',F11.3,6X,'SPEC=',D11.4)                            
  420 CONTINUE                                                          
      RETURN                                                            
      # end 
      def COLFT(FREQ,FREEL,FREION,FREATT,FREIN,NTOTAL):
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/OUTPTT/TIME(300),ICOLL(6,5),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(6,290),ICOLNN(6,10)
      COMMON/TTRM/ZTOT,TTOT,ZTOTS,TTOTS 
# CALCULATES #real COLLISION FREQUENCIES FOR EVENT TYPES
      NINEL=0
      NELA=0
      NATT=0
      NION=0
      DO 1 J=1,NGAS
      NINEL=NINEL+ICOLL(J,4)+ICOLL(J,5)  
      NELA=NELA+ICOLL(J,1)  
      NATT=NATT+ICOLL(J,3)
      NION=NION+ICOLL(J,2)
    1 CONTINUE
      NTOTAL=NELA+NINEL+NATT+NION
      IF(TTOTS == 0.00):
 :
       N#real=NTOTAL
       TTOTS=ST
      else:
       N#real=NTOTAL           
      # endIF                       
      FREQ=DFLOAT(N#real)/TTOTS
      FREIN=DFLOAT(NINEL)/TTOTS
      FREEL=DFLOAT(NELA)/TTOTS
      FREION=DFLOAT(NION)/TTOTS
      FREATT=DFLOAT(NATT)/TTOTS
      RETURN
      # end
      def COLF(FREQ,FREEL,FREION,FREATT,FREIN,NTOTAL):
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/OUTPT/TIME(300),ICOLL(30),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(960),ICOLNN(60)
      COMMON/TTRM/ZTOT,TTOT,ZTOTS,TTOTS 
# CALCULATES #real COLLISION FREQUENCIES FOR EVENT TYPES
      NINEL=ICOLL(4)+ICOLL(5)+ICOLL(9)+ICOLL(10)+ICOLL(14)+ICOLL(15)+
     /ICOLL(19)+ICOLL(20)+ICOLL(24)+ICOLL(25)+ICOLL(29)+ICOLL(30)
      NELA=ICOLL(1)+ICOLL(6)+ICOLL(11)+ICOLL(16)+ICOLL(21)+ICOLL(26)  
      NATT=ICOLL(3)+ICOLL(8)+ICOLL(13)+ICOLL(18)+ICOLL(23)+ICOLL(28)
      NION=ICOLL(2)+ICOLL(7)+ICOLL(12)+ICOLL(17)+ICOLL(22)+ICOLL(27)
      NTOTAL=NELA+NINEL+NATT+NION
      IF(TTOTS == 0.00):
 :
       N#real=NTOTAL
       TTOTS=ST
      else:
       N#real=NTOTAL           
      # endIF                       
      FREQ=DFLOAT(N#real)/TTOTS
      FREIN=DFLOAT(NINEL)/TTOTS
      FREEL=DFLOAT(NELA)/TTOTS
      FREION=DFLOAT(NION)/TTOTS
      FREATT=DFLOAT(NATT)/TTOTS
      RETURN
      # end
      def OUTPUT1  :
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/E(4000),EROOT(4000),QTOT(4000),QREL(4000),QINEL(4000),
     /QEL(4000)                                                         
      COMMON/MIX1/QELM(4000),QSUM(4000),QION(6,4000),QIN1(250,4000),    
     /QIN2(250,4000),QIN3(250,4000),QIN4(250,4000),QIN5(250,4000),
     /QIN6(250,4000),QSATT(4000)             
      COMMON/RATIO/AN1,AN2,AN3,AN4,AN5,AN6,AN,FRAC(6)                   
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX
      COMMON/LARGE/CF(4000,960),EIN(960),TCF(4000),IARRY(960),RGAS(960),
     /IPN(960),WPL(960),LAST,ISIZE,PENFRA[3,960],TCFMAX(8) 
      COMMON/LARGEN/CFN(4000,60),TCFN(4000),SCLENUL(60),NPLAST        
      COMMON/OUTPT/TIME(300),ICOLL(30),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(960),ICOLNN(60)
      COMMON/TTRM/ZTOT,TTOT,ZTOTS,TTOTS 
      COMMON/SINT/SIMF(4000)                                            
      COMMON/NAMES/NAMEG(6)
      COMMON/SCRIP/DSCRPT(960),DSCRPTN(60)
      CHARACTER*50 DSCRPT,DSCRPTN
      CHARACTER*25 NAMEG  
      DIMENSION FREEL(6),FRESP(6),FREINE(6),FREATT(6),FREION(6)       
      DIMENSION SPECS(40)                                               
      WRITE(6,15)                                                       
      WRITE(6,15)                                                       
   15 FORMAT('----------------------------------------------------------
     /-------------------')
      WRITE(6,110) SPEC(4000)
 110  FORMAT(2(/),' NUMBER OF COLLISIONS IN FINAL ENERGY BIN =',F8.1)   
      CALL COLF(FREQ,FREQEL,FREQION,FREQATT,FREQIN,N#real)
      IF(TTOTS == 0.0):
 TTOTS=ST
      WRITE(6,220) FREQ,FREQIN,FREQEL,FREQION,FREQATT                  
  220 FORMAT(/,6X,'TOTAL COLL. FREQ. =',D11.4,' (*10**12)/SEC.',/,2X,'IN
     /ELASTIC COLL. FREQ. =',D11.4,' (*10**12)/SEC.',/,4X,'ELASTIC COLL.
     / FREQ. =',D11.4,' (*10**12)/SEC.',/,1X,'IONISATION COLL. FREQ. =',
     /D11.4,' (*10**12)/SEC.',/,1X,'ATTACHMENT COLL. FREQ. =',D11.4,' (*
     /10**12)/SEC.',/)                  
      WRITE(6,15)                                                       
      DO 1020 I=1,NGAS         
      FREEL(I)=ICOLL((5*I)-4)/TTOTS                                    
      FRESP(I)=ICOLL(5*I)/TTOTS                                        
      FREINE(I)=ICOLL((5*I)-1)/TTOTS                                    
      FREATT(I)=ICOLL((5*I)-2)/TTOTS  
      FREION(I)=ICOLL((5*I)-3)/TTOTS
 1020 CONTINUE
#     WRITE(6,15) 
      WRITE(6,1060)
 1060 FORMAT(/,2X,'DETAILED COLLISION FREQUENCIES FOR EACH GAS IN UNITS 
     /OF 10**12/SEC. :',2(/))
      DO 1100 J=1,NGAS
      WRITE(6,1065) NAMEG(J)
 1065 FORMAT(3X,A25,/,'-----------------------------',2(/))
      DO 1090 K=1,LAST
      IF(IARRY(K):
 <= (5*J) and IARRY(K) > (5*(J-1))) :
       FRELV=FREQ*ICOLN(K)/DFLOAT(N#real)
       IF(ICOLN(K):
 == 0) :
        ERRFRE=0.0
       else:
        ERRFRE=100.00*math.sqrt(DFLOAT(ICOLN(K)))/DFLOAT(ICOLN(K))
       # endIF  
       WRITE(6,1070) DSCRPT(K),FRELV,ERRFRE
 1070 FORMAT(3X,A50,3X,D11.4,' +-',F8.4,' %')
      # endIF
 1090 CONTINUE
 1100 CONTINUE
      WRITE(6,15)
      IF(NPLAST == 0):
 GO TO 1092 
      WRITE(6,335) 
  335 FORMAT(/,2X,'NULL COLLISION FREQUENCIES FOR GAS MIXTURE',/,'  NB. 
     /OUPUT CORRECTED FOR SCALING OF X-SECTIONS.',/, '------------------
     /---------------------------')
      DO 1091 JJ=1,NPLAST
      FRELV=FREQ*ICOLNN(JJ)/DFLOAT(N#real)
      IF(ICOLNN(JJ):
 == 0) :
       ERRFRE=0.0
      else:
       ERRFRE=100.00*math.sqrt(DFLOAT(ICOLNN(JJ)))/DFLOAT(ICOLNN(JJ))
      # endIF  
# RESCALE NULL COLLISIONS
      FRELV=FRELV/(SCLENUL(JJ)**2)
#       WRITE(6,1966) SCLENUL(JJ)
#1966 FORMAT(' SCLENUL=',D12.4)
 1091 WRITE(6,1070) DSCRPTN(JJ),FRELV,ERRFRE   
 1092 WRITE(6,15)                  
#     WRITE(6,301)                                                      
# 301 FORMAT(2(/),10X,' NORMALISED ENERGY DISTRIBUTION')                
#     J1=0                                                              
#     J2=0    
#     SPECN=DFLOAT(N#real)
#     SMSPEC=0.00                                                      
#     DO 350 K=1,4000                                                   
#     SPEC(K)=SPEC(K)/SPECN                                             
#     J1=J1+1                                                           
#     SMSPEC=SMSPEC+SPEC(K)                                             
#     IF(J1 < 100) GO TO 350                                           
#     J2=J2+1                                                           
#     SPECS(J2)=SMSPEC                                                  
#     SMSPEC=0.00                                                      
#     J1=0                                                              
# 350 CONTINUE                                                          
#     EPLT=EFINAL/40.00                                               
#     DO 420 I=1,40                                                     
#     ENER=EPLT*(DFLOAT(I)-0.50)                                       
#     WRITE(6,302) ENER,SPECS(I)                                        
# 302 FORMAT(6X,'E=',F11.3,6X,'SPEC=',D11.4)                            
# 420 CONTINUE                                                          
      RETURN                                                            
      # end 
      def ALPCLCB   :
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX 
      COMMON/TOFGOUT/RALPHA,RALPER,TOFENE,TOFENER,TOFWVZ,TOFWVZER,
     /TOFWVY,TOFWVYER,TOFDZZ,TOFDZZER,TOFDXX,TOFDXXER,TOFDYY,TOFDYYER,
     /TOFDYZ,TOFDYZER,TOFWRZ,TOFWRZER,TOFWRY,TOFWRYER,RATTOF,RATOFER 
      COMMON/VEL/WX,WY,WZ
      COMMON/CTOWNS/ALPHA,ATT
      COMMON/CTWNER/ALPER,ATTER
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9] 
      COMMON/LARGE/CF(4000,960),EIN(960),TCF(4000),IARRY(960),RGAS(960),
     /IPN(960),WPL(960),LAST,ISIZE,PENFRA[3,960],TCFMAX(8)  
# ----------------------------------------------------------------------     
#  ESTIMATE TIME STEP  FOR AVALANCHE SIMULATION IN TIME OF FLIGHT SIM. 
#  USES ESTIMATED GAIN OF 3.0 BETWEEN PLANES. 
#  CALLS TOF AND PT defS AND UPDATES ALPHA AND ATT
#  VERSION WITH BFIELD ALONG X-AXIS AND EFIELD ALONG Z-AXIS (90 DEGREES)
# ----------------------------------------------------------------------
      IMAX=NMAX/10000000 
      IF(IMAX < 5):
 IMAX=5 
      NMAX=IMAX*10000000
      CORR=760.0*(TEMPC+273.15)/(TORR*293.15)
      ALPP=ALPHA/CORR
      ATTP=ATT/CORR
      ANETP=ALPP-ATTP
      ANET=ALPHA-ATT
      TCUTH=1.2D-10*CORR
      TCUTL=1.D-13*CORR
#   
      IF (ANETP > 30.0):
 :
       ALPHAD=0.0
       ALP1=ALPHA
       ATT1=ATT
# WEAK ATTACHMENT
       GO TO 6
      # endIF 
#  SOME ATTACHMENT
      IF(abs(ANETP):
 < 100.) :
# SMALL NET ATTACHMENT
       ALPHAD=abs(ATT)*0.8
      elif(abs(ANETP) >= 100. and abs(ANETP) < 1000.) :
# LARGER NET ATTACHMENT
       ALPHAD=abs(ANET)*0.65
      elif(abs(ANETP) > 1000. and abs(ANETP) < 10000.) :
       ALPHAD=abs(ANET)*0.6
      elif(abs(ANETP) > 10000. and abs(ANETP) < 100000.) :
       ALPHAD=abs(ANET)*0.5
      elif(abs(ANETP) > 100000. and abs(ANETP) < 2000000.) :
       ALPHAD=abs(ANET)*0.4
      else: 
       WRITE(6,91) 
   91 FORMAT(' ATTACHMENT TOO LARGE def STOPPED')
      # endIF
   3  VDST=math.sqrt(WZ*WZ+WY*WY)*1.D-5
      FAKEI=ALPHAD*math.sqrt(WZ*WZ+WY*WY)*1.D-12
      ALPHAST=0.85*abs(ALPHAD+ANET)                        
      TSTEP=math.log(3.00)/(ALPHAST*VDST*1.0D5)
      IF(TSTEP > TCUTH):
 TSTEP=TCUTH
      IF(TSTEP < TCUTL):
 TSTEP=TCUTL
# UPDATE NULL COLLISION FREQUENCY LIMIT
      DO 4 J=1,8
    4 TCFMAX(J)=TCFMAX(J)+abs(FAKEI)
      WRITE(6,871) ALPHAST,ANET,ALPHAD,TSTEP
  871 FORMAT(' ALPHAST1=',D10.3,' ANET1=',D10.3,' ALPHAD1=',D10.3,/,
     /' TSTEP1=',D10.3)
#  CONVERT TO  PICOSECONDS     
      TSTEP=TSTEP*1.0D12
      TFINAL=7.00*TSTEP
      ITFINAL=7
# CALCULATE GOOD STARTING VALUES FOR ALPHA AND NETA
      JPRT=0
      CALL MONTEFTG(JPRT)
      CALL PTG(JPRT)
      CALL TOFG(JPRT)
      TOFWR=math.sqrt(TOFWRZ*TOFWRZ+TOFWRY*TOFWRY)
      ALP1=RALPHA/TOFWR*1.D7
      ALP1ER=RALPER*ALP1/100. 
      ATT1=RATTOF/TOFWR*1.D7
      ATT1ER=RATOFER*ATT1/100.
      WRITE(6,944) ALP1,ALP1ER,ATT1,ATT1ER
  944 FORMAT(' GOOD STARTING VALUES FOR CALC:',/,' ALPHA=',D12.3,' ERR='
     /,D12.3,/,' NETA =',D12.3,' ERR=',D12.3)
#
# CALCULATE USING GOOD STARTING VALUES
#  RESET TCFMAX
      DO 44 J=1,8
   44 TCFMAX(J)=TCFMAX(J)-abs(FAKEI)
# CALCULATE FAKE IONISATION RATE SCALING BY 1.2 
      ALPHAD=abs(ATT1)*1.2
      IF((ALP1-ATT1):
 > 30.*CORR) ALPHAD=abs(ATT1)*0.4
      IF(abs(ALP1-ATT1):
 < (ALP1/10.0) or abs(ALP1-ATT1) < 
     /(ATT1/10.0)) ALPHAD=abs(ATT1)*0.3
      IF((ALP1-ATT1):
 > 100.*CORR) ALPHAD=0.0
      WZ=TOFWRZ*1.D5
      WY=TOFWRY*1.D5
#
#
# NET IONISATION
#   5 IF((ANET) > (11000./CORR)) :
# LARGE IONISATION
#      ALPHAD=7000.-(ALPHA-ATT)
#     elif (abs(ALPP) > (5.0*abs(ANET)) or abs(ATTP) > 
#    /(5.0*abs(ANET))) :
# LARGE CANCELLATION BETWEEN ATTACHMENT AND IONISATON
#      ALPHAD=-6.0*(ALPHA-ATT)
#     else:
#      ALPHAD=0.0
#     # endIF
    6 VTOT=math.sqrt(WZ*WZ+WY*WY) 
      VDST=VTOT*1.D-5
      FAKEI=ALPHAD*VTOT*1.D-12
      ALPHAST=0.850*abs(ALPHAD+ALP1-ATT1)
      IF((ALP1+ALPHAD):
 > (10.0*ALPHAST) or ATT1 > (10.0*ALPHAST)) :
# LARGE CANCELLATION BETWEEN ALPHA AND NETA. REDUCE STEP SIZE BY 15.0
       IF((ALP1+ALPHAD):
 > 100.*CORR) :
        ALPHAST=ALPHAST*15.0
       elif((ALP1+ALPHAD) > 50.0*CORR) :
        ALPHAST=ALPHAST*12.0
       else:
        ALPHAST=ALPHAST*8.0
       # endIF 
      # endIF                          
      TSTEP=math.log(3.00)/(ALPHAST*VDST*1.0D5)
      IF(TSTEP > TCUTH and ALPHAD != 0.0):
 TSTEP=TCUTH
#     IF(TSTEP < TCUTL) TSTEP=TCUTL 
# UPDATE NULL COLLISION FREQUENCY LIMITS
      DO 10 J=1,8
   10 TCFMAX(J)=TCFMAX(J)+abs(FAKEI)
      ANET1=ALP1-ATT1
      WRITE(6,878) ALPHAST,ANET1,ALPHAD,TSTEP
  878 FORMAT(' ALPHAST=',D10.3,' ANET=',D10.3,' ALPHAD=',D10.3,/,
     /' TSTEP=',D10.3) 
      TSTEP=TSTEP*1.0D12
      TFINAL=7.00*TSTEP
      ITFINAL=7
# CALC TIME OF FLIGHT AND PT 
      WRITE(6,25)
   25 FORMAT(/,2X,'SOLUTION FOR PULSED TOWNS# end AND TIME OF FLIGHT PARAM
     /ETERS',/,'  ------------------------------------------------------
     /--------') 
      WRITE(6,26) TSTEP
   26 FORMAT(1(/),'  TIME STEP BETWEEN SAMPLING PLANES =',D12.5,' PICOSE
     /CS.',/)                     
      JPRT=1
      CALL MONTEFTG(JPRT)                             
      CALL FRIEDLAND 
      CALL PTG(JPRT)
      CALL TOFG(JPRT)
      WRITE(6,27) RALPHA,RALPER,RATTOF,RATOFER
   27 FORMAT(/,'PT IONISATION AND ATTACHMENT RATES *10**12/SEC',/,'ALPHA
      != ',D10.3,' +- ',F6.2,' %      ATT=',D10.3,' +- ',F6.2,' %')    
      WRITE(6,28) 
   28 FORMAT(/,'TOF DIFFUSION')
      WRITE(6,29) TOFDZZ,TOFDZZER,TOFDXX,TOFDXXER,TOFDYY,TOFDYYER,  
     /TOFDYZ,TOFDYZER  
   29 FORMAT(/,'DZZ=',F8.1,' +- ',F5.1,' %',/,'DXX=',F8.1,' +- ',F5.1,' 
     /%',/,'DYY=',F8.1,' +- ',F5.1,' %',/,'DYZ=',F8.1,' +- ',F5.1,' %')
      WRITE(6,30)
   30 FORMAT(/,'TOF DRIFT VELOCITY')
      WRITE(6,31) TOFWRZ,TOFWRZER,TOFWRY,TOFWRYER   
   31 FORMAT(/,'WRZ=',F8.2,' +-',F6.1,' %    WRY=',F8.2,' +-',F6.1,' %')
# CALCULATE TOWNS# end SST COEFICIENTS FROM TOF RESULTS     
      TOFWR=math.sqrt(TOFWRZ*TOFWRZ+TOFWRY*TOFWRY) 
      WRZN=TOFWRZ*1.005
      FC1=WRZN/(2.00*TOFDZZ)
      FC2=((RALPHA-RATTOF)*1.0D12)/TOFDZZ
      ALPZZ=FC1-math.sqrt(FC1**2-FC2)
      WRITE(6,888) ALPZZ
  888 FORMAT(/,'TOWNS# end COEFICIENT (ALPHA-ATT) CALCULATED FROM TOF RESU
     /LTS:',/,' ALPHA-ATT /CM.=',D11.4,' N.B. APPROXIMATE FORMULA NOT AC
     /CURATE',/)
#---- -------------------------------------------------    
#      LOAD NEW ALPHA AND ATTACHMENT INTO COMMON BLOCKS
#---- -------------------------------------------
      ALP1=RALPHA/TOFWR*1.D7
      ALP1ER=RALPER*ALP1/100.
      ATT1=RATTOF/TOFWR*1.D7
      ATT1ET=RATOFER*ATT1/100. 
#     WRITE(6,32) ALP1,ALP1ER,ATT1,ATT1ET
#  32 FORMAT(/,'TOWNS# end COEFICIENTS CALCULATED FROM TOF RESULTS:',2(/),
#    /'IONISATION RATE /CM.=',D11.4,' +-',F6.2,/,'ATTACHMENT RATE /CM.='
#    /,D11.4,' +-',F6.2,/)
      ALPHA=ALP1
      ATT=ATT1
# --- -------------------------------------------      
      RETURN                                                     
      # end                                                               
      def MONTEFTG(JPRT):                                     
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAXOLD
      COMMON/BFLD/EOVB,WB,BTHETA,BMAG                                   
      COMMON/LARGE/CF(4000,960),EIN(960),TCF(4000),IARRY(960),RGAS(960),
     /IPN(960),WPL(960),IPLAST,ISIZE,PENFRA[3,960],TCFMAX(8)
      COMMON/LARGEN/CFN(4000,60),TCFN(4000),SCLENUL(60),NPLAST
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/OUTPT/TIME(300),ICOLL(30),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(960),ICOLNN(60)
      COMMON/TTRM/ZTOT,TTOT,ZTOTS,TTOTS
      COMMON/ISPT/XS(2000),YS(2000),ZS(2000),TS(2000),ES(2000),
     /DCX(2000),DCY(2000),DCZ[2000],IPL(2000)
      COMMON/TPLOUTG/ETPL(8),XTPL(8),YTPL(8),ZTPL(8),TTPL(8),XXTPL(8),
     /YYTPL(8),ZZTPL(8),YZTPL(8),VZTPL(8),VYTPL(8),NETPL(8),ATTOINT,
     /ATTERT,AIOERT 
      COMMON/ANIS/PSCT(4000,960),ANGCT(4000,960),INDEX(960),NISO   
      COMMON/IONFL1/NC0(960),EC0(960),NG1(960),EG1(960),NG2(960),
     /EG2(960),WKLM(960),EFL(960)  
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9]  
      DIMENSION EPRM(10000000),IESPECP(100),TEMP(4000)            
# -------------------------------------------------------------------   
#   CALCULATES COLLISION EVENTS AND UPDATES DIFFUSION AND VELOCITY.
#   THIS ROUTINE HANDLES TERMINATIONS AT FIXED DRIFT TIMES. 
#   B FIELD AT 90 DEGREES TO EFIELD  
# ------------------------------------------------------------------- 
      IF(JPRT == 0):
 :
# CALCULATION OF APPROXIMATE STARTING PARAMETERS
       NMAX=NMAXOLD
       IF(NMAXOLD > 80000000):
 NMAX=80000000
      else:
# ENTRY FOR NORMAL CALCULATION
       NMAX=NMAXOLD
      # endIF
      S=0.00 
      ST=0.00 
      X=0.00
      Y=0.00
      Z=0.00 
      ZTOT=0.00
      ZTOTS=0.00
      YTOT=0.00
      YTOTS=0.00
      TTOT=0.00
      TTOTS=0.00
      SMALL=1.0D-20                                                     
      TMAX1=0.00                                                       
      RDUM=RSTART                                                       
      E1=ESTART                                                         
      CONST9=CONST3*0.010
      API=DACOS(-1.00)
      DO 25 I=1,300
   25 TIME(I)=0.00
      DO 26 I=1,30
   26 ICOLL(I)=0
      DO 27 I=1,960
   27 ICOLN(I)=0
      DO 271 I=1,60
  271 ICOLNN(I)=0
      DO 28 I=1,4000
   28 SPEC(I)=0.00            
      DO 33 I=1,100
   33 IESPECP(I)=0 
      DO 34 I=1,8
      ETPL(I)=0.00
      XTPL(I)=0.00
      YTPL(I)=0.00
      ZTPL(I)=0.00
      TTPL(I)=0.00
      XXTPL(I)=0.00
      YYTPL(I)=0.00
      ZZTPL(I)=0.00
      YZTPL(I)=0.00
      VZTPL(I)=0.00
      VYTPL(I)=0.00
   34 NETPL(I)=0                                   
      ID=0
      N4000=4000
      N300=300
      N100=100
      INTEM=8
      I100=0                                                            
      NCOL=0                                                            
      NNULL=0
      NELEC=0
      NEION=0
      NMXADD=0
      NTMPFLG=0
      NPONT=0 
      NCLUS=0
      J1=1 
      ZSTRT=0.00
      YSTRT=0.00
      TSSTRT=0.00
#
      DO 111 J=1,4000
  111 TEMP(J)=TCFN(J)+TCF(J)           
      ABSFAKEI=abs(FAKEI)
      IFAKE=0:
      DO 112 J=1,8
  112 IFAKET(J)=0
#                               
#     INITIAL DIRECTION COSINES                                         
      DCZ1=DCOS(THETA)                                                  
      DCX1=DSIN(THETA)*DCOS(PHI)                                        
      DCY1=DSIN(THETA)*DSIN(PHI) 
# INITIAL VELOCITY
      VTOT=CONST9*math.sqrt(E1)
      CX1=DCX1*VTOT
      CY1=DCY1*VTOT
      CZ1=DCZ1*VTOT      
      E100=E1
      DCZ100=DCZ1
      DCX100=DCX1
      DCY100=DCY1                                       
      F4=2.00*API
# SET TO MAXIMUM POSSIBLE COLLISION FREQ. 
      TLIM=TCFMAX(1) 
      DO 35 I=2,INTEM
   35 IF(TLIM < TCFMAX(I)) TLIM=TCFMAX(I)
      JPRINT=NMAX/10
      IPRINT=0
      ITER=0
      IPLANE=0
      IPRIM=0
#  LOOP FOR NEW STARTING ELECTRONS 
  544 IPRIM=IPRIM+1 
      IF(IPRIM > 1):
 :
# CHECK IF def WILL EXCEED MAXIMUM NUMBER OF ITERATIONS 
# IN THIS CYCLE IF SO OUTPUT CURRENT RESULTS. 
       IF(ITER > NMAX):
 :
        IPRIM=IPRIM-1
        GO TO 700      
       # endIF 
       X=0.00
       Y=0.00
       Z=0.00
       DCZ1=DCZ100
       DCX1=DCX100
       DCY1=DCY100
       E1=E100
       VTOT=CONST9*math.sqrt(E1)
       CX1=DCX1*VTOT
       CY1=DCY1*VTOT
       CZ1=DCZ1*VTOT
       NCLUS=NCLUS+1
       ST=0.00
       TSSTRT=0.00
       ZSTRT=0.00
       YSTRT=0.00
       IPLANE=0
      # endIF
      IF(IPRIM > 10000000):
 :
      WRITE(6,944) IPRIM
 944  FORMAT(/,2X,'def STOPPED TOO MANY PRIMARIES IPRIM =',I7)
      GO TO 700
      # endIF
      EPRM(IPRIM)=E1
      IDUM=DINT(E1)+1
      IDUM=DMIN0(IDUM,N100)
      IESPECP(IDUM)=IESPECP(IDUM)+1      
# START OF LOOP FOR NEWLY CREATED ELECTRONS
  555 TDASH=0.00
      NELEC=NELEC+1
      TSTOP=TSTEP+IPLANE*TSTEP       
# MAIN LOOP                                                             
    1 CONTINUE                                                          
#     IF(ITER > NMAX)  GO TO 315
      R1=drand48(RDUM)
      T=-math.log(R1)/TLIM+TDASH
      TDASH=T
      WBT=WB*T
      COSWT=DCOS(WBT)
      SINWT=DSIN(WBT)
  15  IF((T+ST) >= TSTOP) :                     
       IPLANE=IPLANE+1
       TSTOP=TSTOP+TSTEP
# STORE POSITION AND ENERGY AT TIME PLANE =IPLANE. 
       CALL TPLANEG(T,E1,CX1,CY1,CZ1,EFIELD,IPLANE)
# CHECK IF PASSED THROUGH MORE THAN ONE PLANE IN THIS STEP       
       IF((T+ST):
 >= TSTOP and TSTOP <= TFINAL) GO TO 15
       IF((T+ST):
 >= TFINAL) :
        ZTOT=ZTOT+Z
        YTOT=YTOT+Y     
        TTOT=TTOT+ST
        ZTOTS=ZTOTS+Z-ZSTRT 
        YTOTS=YTOTS+Y-YSTRT     
        TTOTS=TTOTS+ST-TSSTRT    
        TSTOP=TSTEP
# NO MORE ELECTRONS IN CASCADE TRY NEW PRIMARY ELECTRON
        IF(NELEC == (NCLUS+1):
) GO TO 544  
# TAKE ELECTRONS FROM STORE 
   20   X=XS(NPONT) 
        Y=YS(NPONT) 
        Z=ZS(NPONT) 
        ST=TS(NPONT) 
        E1=ES(NPONT) 
        DCX1=DCX(NPONT) 
        DCY1=DCY(NPONT) 
        DCZ1=DCZ[NPONT]
        VTOT=CONST9*math.sqrt(E1)
        CX1=DCX1*VTOT
        CY1=DCY1*VTOT
        CZ1=DCZ1*VTOT 
        IPLANE=IPL(NPONT)   
        NPONT=NPONT-1 
        ZSTRT=Z 
        YSTRT=Y
        TSSTRT=ST
        GO TO 555
       # endIF              
      # endIF
      DZ=(CZ1*SINWT+(EOVB-CY1)*(1.00-COSWT))/WB
      E=E1+DZ*EFIELD*100.00
 913  FORMAT(3X,' AFTER STORE ITER=',I10,' DZ=',D12.3,'E1=',D12.3,' COSW
     /T=',D12.3,' SINWT=',D12.3,' WBT=',D12.3,' CY1=',D12.3)   
      IF(E < 0.00):
 :
       WRITE(6,913)ITER,DZ,E,COSWT,SINWT,WBT,CY1  
       E=0.0010
      # endIF                                                   
      IE=DINT(E/ESTEP)+1                                            
      IE=DMIN0(IE,N4000)                                               
#                                                                       
#     TEST FOR #real OR NULL COLLISION                                   
#                                                                       
      R5=drand48(RDUM)
      TEST1=TCF(IE)/TLIM                                                
      IF(R5 <= TEST1):
 GO TO 137                                         
      NNULL=NNULL+1
      TEST2=TEMP(IE)/TLIM
      IF(R5 < TEST2):
 :
# TEST FOR NULL LEVELS
      IF(NPLAST == 0):
 GO TO 1
       R2=drand48(RDUM)
       I=0
  888  I=I+1
       IF(CFN(IE,I):
 < R2) GO TO 888
# INCREMENT NULL SCATTER SUM
       ICOLNN(I)=ICOLNN(I)+1
       GO TO 1
      # endIF                           
      TEST3=(TEMP(IE)+ABSFAKEI)/TLIM
      IF(R5 < TEST3):
 :
# FAKE COLLISION INCREMENT COUNTER
       IFAKE=IFAKE+1:
       IFAKET(IPLANE+1):
=IFAKET(IPLANE+1)+1
       IF(FAKEI < 0.0):
 :
        NION=NION+1
# FAKE ATTACHMENT START NEW ELECTRON
        IF(NELEC > (NCLUS+1):
) GO TO 544
# ELECTRON CAPTURED TAKE ELECTRON FROM STORE
        GO TO 20
       # endIF
# FAKE IONISATION ADD ELECTRON TO STORE
       NCLUS=NCLUS+1
       NPONT=NPONT+1
       NMXADD=MAX(NPONT,NMXADD)
       IF(NPONT > 2000):
 : 
        WRITE(6,546) NPONT,ITER
        STOP
       # endIF     
       XS(NPONT)=X+CX1*T      
       YS(NPONT)=Y+EOVB*T+((CY1-EOVB)*SINWT+CZ1*(1.00-COSWT))/WB
       ZS(NPONT)=Z+DZ
       TS(NPONT)=ST+T
       ES(NPONT)=E   
       IPL(NPONT)=IPLANE
       CX2=CX1
       CY2=(CY1-EOVB)*COSWT+CZ1*SINWT+EOVB
       CZ2=CZ1*COSWT-(CY1-EOVB)*SINWT
       BOT=1.00/math.sqrt(CX2*CX2+CY2*CY2+CZ2*CZ2)
       DCX(NPONT)=CX2*BOT
       DCY(NPONT)=CY2*BOT
       DCZ[NPONT]=CZ2*BOT
       GO TO 1
      # endIF                          
      GO TO 1                                                           
#                                                                       
#  CALCULATE DIRECTION COSINES AND POSITIONS AT INSTANT BEFORE COLLISION
#    ALSO UPDATE DIFFUSION  AND ENERGY CALCULATIONS.                    
  137 T2=T*T
      IF(T >= TMAX1):
 TMAX1=T
      TDASH=0.00  
# CALC VELOCITY
      CX2=CX1
      CY2=(CY1-EOVB)*COSWT+CZ1*SINWT+EOVB
      CZ2=CZ1*COSWT-(CY1-EOVB)*SINWT
# CALC DIRECTION COSINES
      VTOT=math.sqrt(CX2*CX2+CY2*CY2+CZ2*CZ2)
      DCX2=CX2/VTOT
      DCY2=CY2/VTOT
      DCZ2=CZ2/VTOT                                                     
      NCOL=NCOL+1                                                       
# CALC NEW POSITION                                                
      X=X+CX1*T                                                         
      Y=Y+EOVB*T+((CY1-EOVB)*SINWT+CZ1*(1.00-COSWT))/WB
      Z=Z+DZ          
      ST=ST+T
      IT=DINT(T+1.00)                                              
      IT=DMIN0(IT,N300)                                               
      TIME(IT)=TIME(IT)+1.00                                           
      SPEC(IE)=SPEC(IE)+1.00
# --------------------------------------------------------------------- 
#     DETERMINATION OF #real COLLISION TYPE                              
# --------------------------------------------------------------------- 
      R2=drand48(RDUM)
# FIND LOCATION WITHIN 4 UNITS IN COLLISION ARRAY
      CALL SORT(I,R2,IE)                                                
  140 I=I+1                                                             
      IF(CF(IE,I):
 < R2) GO TO 140                                      
      S1=RGAS(I)                                                        
      EI=EIN(I)
      IF(E < EI):
 :
#     WRITE(6,994) E,EI,ITER
#994  FORMAT(2X,' WARNING ENERGY =',F8.3,' LESS THAN ENERGY LOSS EI=',F8
#    /.3,' AT ITER=',I12,' DUE TO BINNING ERROR')
# FIX ENERGY LOSS SMALLER THAN INCIDENT ENERGY IF A BINING ERROR OCCURS.
      EI=E-0.00010
      # endIF                                                          
      IF(IPN(I):
 == 0) GO TO 666
# ATTACHMENT       
      IF(IPN(I):
 == -1) :
       NEION=NEION+1
       IPT=IARRY(I)
       ID=ID+1
       ITER=ITER+1
       IPRINT=IPRINT+1
       ICOLL(IPT)=ICOLL(IPT)+1
       ICOLN(I)=ICOLN(I)+1 
       IT=DINT(T+1.00)
       IT=DMIN0(IT,N300)
       TIME(IT)=TIME(IT)+1.00
       ZTOT=ZTOT+Z
       YTOT=YTOT+Y
       TTOT=TTOT+ST
       ZTOTS=ZTOTS+Z-ZSTRT
       YTOTS=YTOTS+Y-YSTRT
       TTOTS=TTOTS+ST-TSSTRT
#  ELECTRON CAPTURED START NEW PRIMARY          
       IF(NELEC == (NCLUS+1):
) GO TO 544
# ELECTRON CAPTURED TAKE NEXT ELECTRON FROM STORE       
       GO TO 20
      # endIF    
      EISTR=EI                                             
      R9=drand48(RDUM)
#     ESEC=R9*(E-EI)      
#    USE OPAL PETERSON AND BEATY SPLITTING FACTOR.
      ESEC=WPL(I)*TAN(R9*ATAN((E-EI)/(2.00*WPL(I)))) 
      ESEC=WPL(I)*(ESEC/WPL(I))**0.9524                  
      EI=ESEC+EI 
# STORE POSITION ,ENERGY, DIRECTION COSINES AND TIME OF GENERATION
# OF IONISATION ELECTRON      
      NCLUS=NCLUS+1
      NPONT=NPONT+1
      NMXADD=MAX(NPONT,NMXADD)
      IF(NPONT > 2000):
 : 
      WRITE(6,546) NPONT,ITER
 546  FORMAT(2X,' def STOPPED . NPONT=',I5,' ITER=',I10)
      STOP
      # endIF     
      XS(NPONT)=X        
      YS(NPONT)=Y
      ZS(NPONT)=Z
      TS(NPONT)=ST
      ES(NPONT)=ESEC
      IPL(NPONT)=IPLANE
      NCLTMP=NPONT
      NTMPFLG=1
# RANDOMISE SECONDARY ELECTRON DIRECTION
#      R3=drand48(RDUM)
#      F3=1.00-2.00*R3
#      THETA0=DACOS(F3)
#      F6=DCOS(THETA0)
#      F5=DSIN(THETA0)
#      R4=drand48(rdum)
#      PHI0=F4*R4
#      F8=DSIN(PHI0)
#      F9=DCOS(PHI0)               
#      DCX(NPONT)=F9*F5
#      DCY(NPONT)=F8*F5
#      DCZ[NPONT]=F6     
# STORE POSSIBLE SHELL EMISSIONS AUGER OR FLUORESCENCE
      IF(EISTR > 30.0):
 :
# AUGER EMISSION WITHOUT FLUORESCENCE
       NAUG=NC0(I)
       EAVAUG=EC0(I)/DFLOAT(NAUG)
       DO 701 JFL=1,NAUG
       NCLUS=NCLUS+1
       NPONT=NPONT+1
       XS(NPONT)=X
       YS(NPONT)=Y
       ZS(NPONT)=Z
       TS(NPONT)=ST
       ES(NPONT)=EAVAUG
       IPL(NPONT)=IPLANE
       R3=drand48(RDUM)
       F3=1.00-2.00*R3
       THETA0=DACOS(F3)
       F6=DCOS(THETA0)
       F5=DSIN(THETA0)
       R4=drand48(RDUM)
       PHI0=F4*R4
       F8=DSIN(PHI0)
       F9=DCOS(PHI0)
       DCX(NPONT)=F9*F5
       DCY(NPONT)=F8*F5
       DCZ[NPONT]=F6
  701  CONTINUE
      # endIF
#                                                                       
#  GENERATE SCATTERING ANGLES AND UPDATE  LABORATORY COSINES AFTER      
#   COLLISION ALSO UPDATE ENERGY OF ELECTRON.                           
#
  666 IPT=IARRY(I)
      ID=ID+1    
      ITER=ITER+1
      IPRINT=IPRINT+1                                                   
      ICOLL(IPT)=ICOLL(IPT)+1 
      ICOLN(I)=ICOLN(I)+1  
# IF EXCITATION : ADD PROBABILITY ,PENFRA(1,I),OF TRANSFER TO GIVE
# IONISATION OF THE OTHER GASES IN THE MIXTURE
      IF(IPEN == 0):
 GO TO 5  
      IF(PENFRA[1,I] == 0.0):
 :
       RAN=drand48(RDUM)
       IF(RAN > PENFRA[1,I]):
 GO TO 5
       NCLUS=NCLUS+1
       NPONT=NPONT+1
       IF(NPONT > 2000):
 :
        WRITE(6,546) NPONT,ITER
        STOP
       # endIF
# ENTER HERE POSSIBLE DELOCALISATION LENGTH FOR PENNING TRANSFER
       IF(PENFRA[2,I] == 0.0):
 :
        XS(NPONT)=X
        YS(NPONT)=Y
        ZS(NPONT)=Z
        GO TO 667
       # endIF
       ASIGN=1.0
       RAN=drand48(RDUM)
       RAN1=drand48(RDUM)
       IF(RAN1 < 0.5):
 ASIGN=-ASIGN
       XS(NPONT)=X-math.log(RAN)*PENFRA[2,I]*ASIGN
       RAN=drand48(RDUM)
       RAN1=drand48(RDUM)
       IF(RAN1 < 0.5):
 ASIGN=-ASIGN
       YS(NPONT)=Y-math.log(RAN)*PENFRA[2,I]*ASIGN
       RAN=drand48(RDUM)
       RAN1=drand48(RDUM)
       IF(RAN1 < 0.5):
 ASIGN=-ASIGN
       ZS(NPONT)=Z-math.log(RAN)*PENFRA[2,I]*ASIGN
# POSSIBLE PENNING TRANSFER TIME
  667  TPEN=ST
       IF(PENFRA[3,I] == 0.0):
 GO TO 668
       RAN=drand48(RDUM)
       TPEN=ST-math.log(RAN)*PENFRA[3,I]
  668  TS(NPONT)=TPEN
       ES(NPONT)=1.0
       DCX(NPONT)=DCX1
       DCY(NPONT)=DCY1
       DCZ[NPONT]=DCZ1
# FIND LAST TIME PLANE BEFORE TPEN
       TSTOP1=0.0
       IPLANE1=0
       DO 669 KDUM=1,ITFINAL
       TSTOP1=TSTEP+TSTOP1
       IF(TPEN < TSTOP1):
 GO TO 670
       IPLANE1=IPLANE1+1
  669  CONTINUE
# PENNING TRANSFER OCCURS AFTER FINAL TIME PLANE CLEAR ENTRY
       NPONT=NPONT-1
       NCLUS=NCLUS-1
       GO TO 5
  670  IPL(NPONT)=IPLANE1                
      # endIF
    5 S2=(S1*S1)/(S1-1.00) 
# ANISOTROPIC SCATTERING 
      R3=drand48(RDUM)
      IF(INDEX(I):
 == 1) :
       R31=drand48(RDUM)
       F3=1.00-R3*ANGCT(IE,I)
       IF(R31 > PSCT(IE,I):
) F3=-F3
      elif(INDEX(I) == 2) :
       EPSI=PSCT(IE,I)
       F3=1.00-(2.00*R3*(1.00-EPSI)/(1.00+EPSI*(1.00-2.00*R3)))
      else:
# ISOTROPIC SCATTERING                                             
       F3=1.00-2.00*R3  
      # endIF
      THETA0=DACOS(F3)                                                  
      R4=drand48(RDUM)
      PHI0=F4*R4                                                        
      F8=DSIN(PHI0)                                                     
      F9=DCOS(PHI0)                                                     
      IF(E < EI):
 EI=0.00                                              
      ARG1=1.00-S1*EI/E                                                
      ARG1=DMAX1(ARG1,SMALL)                                            
      D=1.00-F3*math.sqrt(ARG1)                                            
      E1=E*(1.00-EI/(S1*E)-2.00*D/S2) 
      E1=DMAX1(E1,SMALL)                                                
      Q=math.sqrt((E/E1)*ARG1)/S1                                           
      Q=DMIN1(Q,1.00)                                                  
      THETA=DASIN(Q*DSIN(THETA0))                                       
      F6=DCOS(THETA)                                                    
      U=(S1-1.00)*(S1-1.00)/ARG1                                      
      CSQD=F3*F3                                                        
      IF(F3 < 0.00 and CSQD > U):
 F6=-1.00*F6                        
      F5=DSIN(THETA)                                                    
      DCZ2=DMIN1(DCZ2,1.00)                                            
      ARGZ=math.sqrt(DCX2*DCX2+DCY2*DCY2)
      IF(ARGZ == 0.00):
 :
       DCZ1=F6         
       DCX1=F9*F5                             
       DCY1=F8*F5 
       IF(NTMPFLG == 1):
 :
# USE FREE KINEMATICS FOR IONISATION SECONDARY ANGLE
        F5S=F5*math.sqrt(E1/ES(NCLTMP))
        IF(F5S > 1.0):
 F5S=1.0
        THSEC=DASIN(F5S)
        F5S=DSIN(THSEC)
        F6S=DCOS(THSEC)
        IF(F6 < 0.0):
 F6S=-F6S
        PHIS=PHI0+API
        IF(PHIS > F4):
 PHIS=PHI0-F4
        F8S=DSIN(PHIS)
        F9S=DCOS(PHIS)
        DCZ[NCLTMP]=F6S
        DCY(NCLTMP)=F8S*F5S
        DCX(NCLTMP)=F9S*F5S
        NTMPFLG=0
       # endIF
       GO TO 190
      # endIF                                            
      DCZ1=DCZ2*F6+ARGZ*F5*F8                                           
      DCY1=DCY2*F6+(F5/ARGZ)*(DCX2*F9-DCY2*DCZ2*F8)                     
      DCX1=DCX2*F6-(F5/ARGZ)*(DCY2*F9+DCX2*DCZ2*F8)
      IF(NTMPFLG == 1):
 :
# USE FREE KINEMATICS FOR IONISATION SECONDARY ANGLE
       F5S=F5*math.sqrt(E1/ES(NCLTMP))
       IF(F5S > 1.0):
 F5S=1.0
       THSEC=DASIN(F5S)
       F5S=DSIN(THSEC)
       F6S=DCOS(THSEC)
       IF(F6 < 0.0):
 F6S=-F6S
       PHIS=PHI0+API
       IF(PHIS > F4):
 PHIS=PHI0-F4
       F8S=DSIN(PHIS)
       F9S=DCOS(PHIS)
       DCZ[NCLTMP]=DCZ2*F6S+ARGZ*F5S*F8S
       DCY(NCLTMP)=DCY2*F6S+(F5S/ARGZ)*(DCX2*F9S-DCYS*DCZ2*F8S)
       DCX(NCLTMP)=DCX2*F6S-(F5S/ARGZ)*(DCY2*F9S+DCX2*DCZ2*F8S)
       NTMPFLG=0
      # endIF 
  190 CONTINUE  
      VTOT=CONST9*math.sqrt(E1)
      CX1=DCX1*VTOT
      CY1=DCY1*VTOT
      CZ1=DCZ1*VTOT
# STORE DIRECTION COSINES AND ENERGY AFTER N COLLISIONS
# FOR LATER REUSE IN PRIMARY GENERATION
      I100=I100+1
      IF(I100 == 200):
 :
       DCZ100=DCZ1
       DCX100=DCX1        
       DCY100=DCY1 
       E100=E1
       I100=0
      # endIF  
      IF(IPRINT > JPRINT):
 GO TO 200
      GO TO 1                                    
#    INTERMEDIATE PRINTOUT                       
 200  IPRINT=0 
      W=ZTOTS/TTOTS                          
      W=W*1.0D+09  
      WY=YTOTS/TTOTS   
      WY=WY*1.0D+09
      JCT=ID/100000
#     IF(J1 == 1) WRITE(6,201)                                         
# 201 FORMAT(/,7X,'INTERMEDIATE OUTPUT',/,'    VELZ     POSZ       TIME 
#    /      VELY        COUNT    ')                  
#     WRITE(6,202) W,ZTOTS,TTOTS,WY,JCT   
# 202 FORMAT(1X,F8.3,3(1X,D10.3),4X,I6)                 
      J1=J1+1            
      GO TO 1
#  MAIN LOOP # end                                                  
  700 XID=DFLOAT(ID)
      IF(NELEC > IPRIM):
 :
       ANEION=DFLOAT(NEION)
       ANBT=DFLOAT(NELEC-IPRIM)
       ATTOINT=ANEION/ANBT
       ATTERT=math.sqrt(ANEION)/ANEION
       AIOERT=math.sqrt(ANBT)/ANBT
      else:
       ANEION=DFLOAT(NEION) 
       ATTOINT=-1.00
       ATTERT=math.sqrt(ANEION)/ANEION
      # endIF
      JCT=ID/100000  
      IF(J1 == 1):
 :
      WRITE(6,940) NCLUS,ITER
  940 FORMAT(2(/),' def STOPPED  (TOO FEW COLLISIONS), DECREASE THE 
     /ESTIMATED ALPHA.  NCLUS = ',I7,'  ITER =',I9)      
      STOP
      # endIF
      IF(JPRT == 1):
 WRITE(6,878) NELEC,NEION,IPRIM
 878  FORMAT(/,' TOTAL NO OF ELECTRONS=',I8,/,' TOTAL NO OF NEG. IONS=',
     /I8,/,' TOTAL NO OF PRIMARIES=',I8)  
      EPRMBAR=0.00
      E2PRM=0.00
      IF(IPRIM == 1):
 RETURN      
      DO 310 I=1,IPRIM
      E2PRM=E2PRM+EPRM(I)*EPRM(I)
 310  EPRMBAR=EPRMBAR+EPRM(I)
      EBAR=EPRMBAR/IPRIM
      EERR=math.sqrt(E2PRM/IPRIM-EBAR**2)
      IF(JPRT == 1):
 WRITE(6,836) EBAR,EERR
 836  FORMAT(/,2X,'AVERAGE ENERGY OF PRIMARY ELECTRON =',F10.3,' EV.',/,
     /'   ENERGY SPREAD OF PRIMARY ELECTRON =',F10.3,' EV.')
#     WRITE(6,835) (IESPECP(J),J=1,100)
#835  FORMAT(/,2X,'ENERGY SPECTRUM OF PRIMARY ELECTRONS IN 1 EV. BINS',/
#    /,10(2X,10I5,/))
      RETURN               
  315 IF(ITER > NMAX) :
       WRITE(6,991) ITER,NMAX,NPONT,NELEC,IPRIM,NMXADD
 991   FORMAT(2(/),' def STOPPED.  ITER =',I10,'    NMAX =',I10,/,
     /' NPONT=',I4,' NELEC=',I8,' IPRIM=',I4,' NMXADD=',I3)
       STOP
      # endIF                                                             
      RETURN                                                            
      # end
      def TPLANEG(T,E1,CX1,CY1,CZ1,EFLD,IPLANE):
      IMPLICIT #real*8 (A-H,O-Z)  
      IMPLICIT #integer*8 (I-N)
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5
      COMMON/BFLD/EOVB,WB,BTHETA,BMAG
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/OUTPT/TIME(300),ICOLL(30),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(960),ICOLNN(60)
      COMMON/TPLOUTG/ETPL(8),XTPL(8),YTPL(8),ZTPL(8),TTPL(8),XXTPL(8),
     /YYTPL(8),ZZTPL(8),YZTPL(8),VZTPL(8),VYTPL(8),NETPL(8),ATTOINT,
     /ATTERT,AIOERT 
#-----------------------------------------------------------------------
# STORES POSITION, TIME AND ENERGY AND SUMS REQUIRED
# TO CALCULATE DEVIATIONS AND MEANS AT PLANE =IPLANE 
# BFIELD AT 90 DEGREES TO EFIELD
#-----------------------------------------------------------------------
      TIMESP=IPLANE*TSTEP
# CALC TIME LEFT TO ARRIVE AT PLANE
      TIMLFT=TIMESP-ST
      T2LFT=TIMLFT*TIMLFT
      WBT=WB*TIMLFT
      COSWT=DCOS(WBT)
      SINWT=DSIN(WBT)
      DZ=(CZ1*SINWT+(EOVB-CY1)*(1.00-COSWT))/WB
      CX2=CX1
      CY2=(CY1-EOVB)*COSWT+CZ1*SINWT+EOVB
      CZ2=CZ1*COSWT-(CY1-EOVB)*SINWT
      VTOT=math.sqrt(CX2*CX2+CY2*CY2+CZ2*CZ2)
      DCZ2=CZ2/VTOT
      DCY2=CY2/VTOT
      XPLANE=X+CX1*TIMLFT
      YPLANE=Y+EOVB*TIMLFT+((CY1-EOVB)*SINWT+CZ1*(1.00-COSWT))/WB
      DZ=(CZ1*SINWT+(EOVB-CY1)*(1.00-COSWT))/WB
      ZPLANE=Z+DZ         
      EPLANE=E1+DZ*EFLD*100.00
      VZPLANE=DCZ2*math.sqrt(EPLANE)*CONST3*0.010
      VYPLANE=DCY2*math.sqrt(EPLANE)*CONST3*0.010
      XTPL(IPLANE)=XTPL(IPLANE)+XPLANE
      YTPL(IPLANE)=YTPL(IPLANE)+YPLANE
      ZTPL(IPLANE)=ZTPL(IPLANE)+ZPLANE
      XXTPL(IPLANE)=XXTPL(IPLANE)+XPLANE*XPLANE
      YYTPL(IPLANE)=YYTPL(IPLANE)+YPLANE*YPLANE
      ZZTPL(IPLANE)=ZZTPL(IPLANE)+ZPLANE*ZPLANE
      YZTPL(IPLANE)=YZTPL(IPLANE)+YPLANE*ZPLANE
      ETPL(IPLANE)=ETPL(IPLANE)+EPLANE
      TTPL(IPLANE)=TTPL(IPLANE)+ST+TIMLFT
      VZTPL(IPLANE)=VZTPL(IPLANE)+VZPLANE
      VYTPL(IPLANE)=VYTPL(IPLANE)+VYPLANE
      NETPL(IPLANE)=NETPL(IPLANE)+1 
      RETURN
      # end
      def ALPCLCC   :
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX 
      COMMON/TOFHOUT/RALPHA,RALPER,TOFENE,TOFENER,TOFWVZ,TOFWVZER,
     /TOFWVY,TOFWVYER,TOFWVX,TOFWVXER,TOFDZZ,TOFDZZER,TOFDXX,TOFDXXER,
     /TOFDYY,TOFDYYER,TOFDYZ,TOFDYZER,TOFDXY,TOFDXYER,TOFDXZ,TOFDXZER,
     /TOFWRZ,TOFWRZER,TOFWRY,TOFWRYER,TOFWRX,TOFWRXER,RATTOF,RATOFER 
      COMMON/VEL/WX,WY,WZ
      COMMON/CTOWNS/ALPHA,ATT
      COMMON/CTWNER/ALPER,ATTER
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/FAKE/FAKEI,IFAKE,KAKET(8),FAKED[9] 
      COMMON/LARGE/CF(4000,960),EIN(960),TCF(4000),IARRY(960),RGAS(960),
     /IPN(960),WPL(960),LAST,ISIZE,PENFRA[3,960],TCFMAX(8)  
# ----------------------------------------------------------------------     
#  ESTIMATE TIME STEP  FOR AVALANCHE SIMULATION IN TIME OF FLIGHT SIM. 
#  USES ESTIMATED GAIN OF 3.0 BETWEEN PLANES. 
#  CALLS TOF AND PT defS AND UPDATES ALPHA AND ATT
#  BFIELD AT ANY ANGLE BTHETA TO EFIELD
# ----------------------------------------------------------------------
      IMAX=NMAX/10000000 
      IF(IMAX < 5):
 IMAX=5 
      NMAX=IMAX*10000000
      CORR=760.0*(TEMPC+273.15)/(TORR*293.15)
      ALPP=ALPHA/CORR
      ATTP=ATT/CORR
      ANETP=ALPP-ATTP
      ANET=ALPHA-ATT
      TCUTH=1.2D-10*CORR
      TCUTL=1.D-13*CORR
#   
      IF (ANETP > 30.0):
 :
       ALPHAD=0.0
       ALP1=ALPHA
       ATT1=ATT
# WEAK ATTACHMENT
       GO TO 6
      # endIF 
#  SOME ATTACHMENT
      IF(abs(ANETP):
 < 100.) :
# SMALL NET ATTACHMENT
       ALPHAD=abs(ATT)*0.8
      elif(abs(ANETP) >= 100. and abs(ANETP) < 1000.) :
# LARGER NET ATTACHMENT
       ALPHAD=abs(ANET)*0.65
      elif(abs(ANETP) > 1000. and abs(ANETP) < 10000.) :
       ALPHAD=abs(ANET)*0.6
      elif(abs(ANETP) > 10000. and abs(ANETP) < 100000.) :
       ALPHAD=abs(ANET)*0.5
      elif(abs(ANETP) > 100000. and abs(ANETP) < 2000000.) :
       ALPHAD=abs(ANET)*0.4
      else: 
       WRITE(6,91) 
   91 FORMAT(' ATTACHMENT TOO LARGE def STOPPED')
       STOP
      # endIF
   3  VDST=math.sqrt(WZ*WZ+WY*WY+WX*WX)*1.D-5
      FAKEI=ALPHAD*math.sqrt(WZ*WZ+WY*WY+WX*WX)*1.D-12
      ALPHAST=0.85*abs(ALPHAD+ANET)                        
      TSTEP=math.log(3.00)/(ALPHAST*VDST*1.0D5)
      IF(TSTEP > TCUTH):
 TSTEP=TCUTH
      IF(TSTEP < TCUTL):
 TSTEP=TCUTL
# UPDATE NULL COLLISION FREQUENCY LIMIT
      DO 4 J=1,8
    4 TCFMAX(J)=TCFMAX(J)+abs(FAKEI)
      WRITE(6,871) ALPHAST,ANET,ALPHAD,TSTEP
  871 FORMAT(' ALPHAST1=',D10.3,' ANET1=',D10.3,' ALPHAD1=',D10.3,/,
     /' TSTEP1=',D10.3)
#  CONVERT TO  PICOSECONDS     
      TSTEP=TSTEP*1.0D12
      TFINAL=7.00*TSTEP
      ITFINAL=7
# CALCULATE GOOD STARTING VALUES FOR ALPHA AND NETA
      JPRT=0
      CALL MONTEFTH(JPRT)
      CALL PTH(JPRT)
      CALL TOFH(JPRT)
      TOFWR=math.sqrt(TOFWRZ*TOFWRZ+TOFWRY*TOFWRY+TOFWRX*TOFWRX)
      ALP1=RALPHA/TOFWR*1.D7
      ALP1ER=RALPER*ALP1/100. 
      ATT1=RATTOF/TOFWR*1.D7
      ATT1ER=RATOFER*ATT1/100.
      WRITE(6,944) ALP1,ALP1ER,ATT1,ATT1ER
  944 FORMAT(' GOOD STARTING VALUES FOR CALC:',/,' ALPHA=',D12.3,' ERR='
     /,D12.3,/,' NETA =',D12.3,' ERR=',D12.3)
#
# CALCULATE USING GOOD STARTING VALUES
#  RESET TCFMAX
      DO 44 J=1,8
   44 TCFMAX(J)=TCFMAX(J)-abs(FAKEI)
# CALCULATE FAKE IONISATION RATE SCALING BY 1.2 
      ALPHAD=abs(ATT1)*1.2
      IF((ALP1-ATT1):
 > 30.*CORR) ALPHAD=abs(ATT1)*0.4
      IF(abs(ALP1-ATT1):
 < (ALP1/10.0) or abs(ALP1-ATT1) < 
     /(ATT1/10.0)) ALPHAD=abs(ATT1)*0.3
      IF((ALP1-ATT1):
 > 100.*CORR) ALPHAD=0.0
      WZ=TOFWRZ*1.D5
      WY=TOFWRY*1.D5
      WX=TOFWRX*1.D5
#
#
# NET IONISATION
#   5 IF(ANET > (11000./CORR)) :
# HIGH IONISATION
#      ALPHAD=7000.-(ALPHA-ATT)
#     elif(abs(ALPP) > (5.0*DANS(ANET)) or abs(ATTP) > 
#    /(5.0*abs(ANET))) :
# LARGE CANCELLATION BETWEEN ATTACHMENT AND IONISATION
#      ALPHAD=-6.0*(ALPHA-ATT)
#     else:
#      ALPHAD=0.0
#     # endIF
    6 VTTT=math.sqrt(WZ*WZ+WY*WY+WX*WX) 
      VDST=VTTT*1.D-5
      FAKEI=ALPHAD*VTTT*1.D-12  
      ALPHAST=0.85*abs(ALPHAD+ALP1-ATT1) 
      IF((ALP1+ALPHAD):
 > (10.0*ALPHAST) or ATT1 > (10.0*ALPHAST)) :
# LARGE CANCELLATION BETWEEN ALPHA AND NETA. REDUCE STEP SIZE BY 15.0
       IF((ALP1+ALPHAD):
 > 100.*CORR) :
        ALPHAST=ALPHAST*15.0
       elif((ALP1+ALPHAD) > 50.0*CORR) :
        ALPHAST=ALPHAST*12.0
       else:
        ALPHAST=ALPHAST*8.0
       # endIF
      # endIF
      TSTEP=math.log(3.00)/(ALPHAST*VDST*1.0D5)
      IF(TSTEP > TCUTH and ALPHAD != 0.0):
 TSTEP=TCUTH
#     IF(TSTEP < TCUTL) TSTEP=TCUTL
# UPDATE NULL COLLISION FREQUENCY LIMIT
      DO 10 J=1,8
   10 TCFMAX(J)=TCFMAX(J)+abs(FAKEI)
      ANET1=ALP1-ATT1  
       WRITE(6,878) ALPHAST,ANET1,ALPHAD,TSTEP
  878 FORMAT(' ALPHAST=',D10.3,' ANET=',D10.3,' ALPHAD=',D10.3,/,
     /' TSTEP=',D10.3)
      TSTEP=TSTEP*1.0D12
      TFINAL=7.00*TSTEP
      ITFINAL=7
# CALC TIME OF FLIGHT AND PT 
      WRITE(6,25)
   25 FORMAT(/,2X,'SOLUTION FOR PULSED TOWNS# end AND TIME OF FLIGHT PARAM
     /ETERS',/,'  ------------------------------------------------------
     /--------') 
      WRITE(6,26) TSTEP
   26 FORMAT(1(/),'  TIME STEP BETWEEN SAMPLING PLANES =',D12.5,' PICOSE
     /CS.',/)    
      JPRT=1                 
      CALL MONTEFTH(JPRT)                             
      CALL FRIEDLAND 
      CALL PTH(JPRT)
      CALL TOFH(JPRT)
      WRITE(6,27) RALPHA,RALPER,RATTOF,RATOFER
   27 FORMAT(/,'PT IONISATION AND ATTACHMENT RATES *10**12/SEC',/,'ALPHA
      != ',D10.3,' +- ',F6.2,' %      ATT=',D10.3,' +- ',F6.2,' %')    
      WRITE(6,28) 
   28 FORMAT(/,'TOF DIFFUSION')
      WRITE(6,29) TOFDZZ,TOFDZZER,TOFDXX,TOFDXXER,TOFDYY,TOFDYYER,  
     /TOFDYZ,TOFDYZER,TOFDXZ,TOFDXZER,TOFDXY,TOFDXYER  
   29 FORMAT(/,'DZZ=',F8.1,' +- ',F5.1,' %',/,'DXX=',F8.1,' +- ',F5.1,' 
     /%',/,'DYY=',F8.1,' +- ',F5.1,' %',/,'DYZ=',F8.1,' +- ',F5.1,' %',/
     /,'DXZ=',F8.1,' +- ',F5.1,' %',/,'DXY=',F8.1,' +- ',F5.1,' %')
      WRITE(6,30)
   30 FORMAT(/,'TOF DRIFT VELOCITY')
      WRITE(6,31) TOFWRZ,TOFWRZER,TOFWRY,TOFWRYER,TOFWRX,TOFWRXER   
   31 FORMAT(/,'WRZ=',F8.2,' +-',F6.1,' %    WRY=',F8.2,' +-',F6.1,' %  
     / WRX=',F8.2,' +-',F6.1,' %')  
# CALCULATE TOWNS# end SST COEFICIENTS FROM TOF RESULTS      
      TOFWR=math.sqrt(TOFWRZ*TOFWRZ+TOFWRY*TOFWRY+TOFWRX*TOFWRX)
      WRZN=TOFWR*1.005
      FC1=WRZN/(2.00*TOFDZZ)
      FC2=((RALPHA-RATTOF)*1.0D12)/TOFDZZ
      ALPZZ=FC1-math.sqrt(FC1**2-FC2)
      WRITE(6,888) ALPZZ
  888 FORMAT(/,'TOWNS# end COEFICIENT (ALPHA-ATT) CALCULATED FROM TOF RESU
     /LTS:',/,' ALPHA-ATT /CM.=',D11.4,' N.B. APPROXIMATE FORMULA NOT AC
     /CURATE',/)
#-----------------------------------------------------    
# LOAD NEW ALPHA AND ATTACHMENT INTO COMMON BLOCKS
#-----------------------------------------------
      ALP1=RALPHA/TOFWR*1.D7
      ALP1ER=RALPER*ALP1/100.
      ATT1=RATTOF/TOFWR*1.D7
      ATT1ER=RATOFER*ATT1/100.
#     WRITE(6,32) ALP1,ALP1ER,ATT1,ATT1ER
#  32 FORMAT(/,'TOWNS# end COEFICIENTS CALCULATED FROM TOF RESULTS:',2(/),
#    /'IONISATION RATE /CM.=',D11.4,' +-',F6.2,/,'ATTACHMENT RATE /CM.='
#    /,D11.4,' +-',F6.2,/)
      ALPHA=ALP1
      ATT=ATT1
#-----------------------------------------------      
      RETURN                                                     
      # end                                                               
      def MONTEFTH(JPRT):                                   
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAXOLD
      COMMON/BFLD/EOVB,WB,BTHETA,BMAG
      COMMON/ROTS/RCS,RSN,EFZ100,EFX100,F1,EOVBR                        
      COMMON/LARGE/CF(4000,960),EIN(960),TCF(4000),IARRY(960),RGAS(960),
     /IPN(960),WPL(960),IPLAST,ISIZE,PENFRA[3,960],TCFMAX(8)
      COMMON/LARGEN/CFN(4000,60),TCFN(4000),SCLENUL(60),NPLAST
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/OUTPT/TIME(300),ICOLL(30),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(960),ICOLNN(60)
      COMMON/TTRM/ZTOT,TTOT,ZTOTS,TTOTS
      COMMON/ISPT/XS(2000),YS(2000),ZS(2000),TS(2000),ES(2000),
     /DCX(2000),DCY(2000),DCZ[2000],IPL(2000)
      COMMON/TPLOUTH/ETPL(8),XTPL(8),YTPL(8),ZTPL(8),TTPL(8),XXTPL(8),
     /YYTPL(8),ZZTPL(8),YZTPL(8),XZTPL(8),XYTPL(8),VZTPL(8),VYTPL(8),
     /VXTPL(8),NETPL(8),ATTOINT,ATTERT,AIOERT
      COMMON/ANIS/PSCT(4000,960),ANGCT(4000,960),INDEX(960),NISO  
      COMMON/IONFL1/NC0(960),EC0(960),NG1(960),EG1(960),NG2(960),
     /EG2(960),WKLM(960),EFL(960) 
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9]    
      DIMENSION EPRM(10000000),IESPECP(100),TEMP(4000)            
# -------------------------------------------------------------------   
#   CALCULATES COLLISION EVENTS AND UPDATES DIFFUSION AND VELOCITY.
#   THIS ROUTINE HANDLES TERMINATIONS AT FIXED DRIFT TIMES. 
#   SOLVES MOTION IN COORDINATE SYSTEM WITH BFIELD ALIGNED TO X-AXIS
#   ELECTRIC FIELD AT AN ANGLE BTHETA IN THE X-Z PLANE.
#   THE RESULTS FOR THE VELOCITY VECTORS  ARE : 
#   ROTATED INTO THE STANDARD COORDINATE FRAME WITH THE ELECTRIC FIELD 
#   ALONG THE Z-AXIS AND THE BFIELD AT AN ANGLE BTHETA TO THE ELECTRIC
#   FIELD IN THE X-Z PLANE  
# ------------------------------------------------------------------- 
      IF(JPRT == 0):
 :
# CALCULATION OF APPROXIMATE STARTING PARAMETERS
       NMAX=NMAXOLD
       IF(NMAXOLD > 80000000):
 NMAX=80000000
      else:
# ENTRY FOR NORMAL CALCULATION
       NMAX=NMAXOLD
      # endIF
      S=0.00 
      ST=0.00 
      X=0.00
      Y=0.00
      Z=0.00 
      ZTOT=0.00
      ZTOTS=0.00
      YTOT=0.00
      YTOTS=0.00
      XTOT=0.00
      XTOTS=0.00
      TTOT=0.00
      TTOTS=0.00
      SMALL=1.0D-20                                                     
      TMAX1=0.00                                                       
      RDUM=RSTART                                                       
      E1=ESTART                                                         
      CONST9=CONST3*0.010
      DO 25 I=1,300
   25 TIME(I)=0.00
      DO 26 I=1,30
   26 ICOLL(I)=0
      DO 27 I=1,960
   27 ICOLN(I)=0
      DO 271 I=1,60
  271 ICOLNN(I)=0
      DO 28 I=1,4000
   28 SPEC(I)=0.00            
      DO 33 I=1,100
   33 IESPECP(I)=0 
      DO 34 I=1,8
      ETPL(I)=0.00
      XTPL(I)=0.00
      YTPL(I)=0.00
      ZTPL(I)=0.00
      TTPL(I)=0.00
      XXTPL(I)=0.00
      YYTPL(I)=0.00
      ZZTPL(I)=0.00
      YZTPL(I)=0.00
      XZTPL(I)=0.00
      XYTPL(I)=0.00
      VZTPL(I)=0.00
      VYTPL(I)=0.00
      VXTPL(I)=0.00
   34 NETPL(I)=0                                   
      ID=0
      N4000=4000
      N300=300
      N100=100
      INTEM=8
      I100=0                                                            
      NCOL=0                                                            
      NNULL=0
      NELEC=0
      NEION=0
      NMXADD=0
      NTMPFLG=0
      NPONT=0 
      NCLUS=0
      J1=1 
      ZSTRT=0.00
      YSTRT=0.00
      XSTRT=0.00
      TSSTRT=0.00 
      API=DACOS(-1.00)  
# CALC ROTATION MATRIX ANGLES
      RCS=DCOS((BTHETA-90.00)*API/180.00)
      RSN=DSIN((BTHETA-90.00)*API/180.00)
# 
      RTHETA=BTHETA*API/180.00
      EFZ100=EFIELD*100.00*DSIN(RTHETA)
      EFX100=EFIELD*100.00*DCOS(RTHETA)
      F1=EFIELD*CONST2*DCOS(RTHETA)
      EOVBR=EOVB*DSIN(RTHETA)
#
      DO 111 J=1,4000
  111 TEMP(J)=TCFN(J)+TCF(J)
      ABSFAKEI=abs(FAKEI)
      IFAKE=0:
      DO 112 J=1,8
  112 IFAKET(J)=0
#
#     INITIAL DIRECTION COSINES                                         
      DCZ1=DCOS(THETA)                                                  
      DCX1=DSIN(THETA)*DCOS(PHI)                                        
      DCY1=DSIN(THETA)*DSIN(PHI) 
# INITIAL VELOCITY
      VTOT=CONST9*math.sqrt(E1)
      CX1=DCX1*VTOT
      CY1=DCY1*VTOT
      CZ1=DCZ1*VTOT      
      E100=E1
      DCZ100=DCZ1
      DCX100=DCX1
      DCY100=DCY1                                       
      F4=2.00*API
# SET TO MAXIMUM POSSIBLE COLLISION FREQ. 
      TLIM=TCFMAX(1) 
      DO 35 I=2,INTEM
   35 IF(TLIM < TCFMAX(I)) TLIM=TCFMAX(I)
      JPRINT=NMAX/10
      IPRINT=0
      ITER=0
      IPLANE=0
      IPRIM=0
#  LOOP FOR NEW STARTING ELECTRONS 
  544 IPRIM=IPRIM+1 
      IF(IPRIM > 1):
 :
# CHECK IF def WILL EXCEED MAXIMUM NUMBER OF ITERATIONS 
# IN THIS CYCLE IF SO OUTPUT CURRENT RESULTS. 
       IF(ITER > NMAX):
 :
        IPRIM=IPRIM-1
        GO TO 700      
       # endIF 
       X=0.00
       Y=0.00
       Z=0.00
       DCZ1=DCZ100
       DCX1=DCX100
       DCY1=DCY100
       E1=E100
       VTOT=CONST9*math.sqrt(E1)
       CX1=DCX1*VTOT
       CY1=DCY1*VTOT
       CZ1=DCZ1*VTOT
       NCLUS=NCLUS+1
       ST=0.00
       TSSTRT=0.00
       ZSTRT=0.00
       YSTRT=0.00
       XSTRT=0.00
       IPLANE=0
      # endIF
      IF(IPRIM > 10000000):
 :
      WRITE(6,944) IPRIM
 944  FORMAT(/,2X,'def STOPPED TOO MANY PRIMARIES IPRIM =',I7)
      GO TO 700
      # endIF
      EPRM(IPRIM)=E1
      IDUM=DINT(E1)+1
      IDUM=DMIN0(IDUM,N100)
      IESPECP(IDUM)=IESPECP(IDUM)+1      
# START OF LOOP FOR NEWLY CREATED ELECTRONS
  555 TDASH=0.00
      NELEC=NELEC+1
      TSTOP=TSTEP+IPLANE*TSTEP       
# MAIN LOOP                                                             
    1 CONTINUE                                                          
#     IF(ITER > NMAX)  GO TO 315
      R1=drand48(RDUM)
      T=-math.log(R1)/TLIM+TDASH
      TDASH=T
      WBT=WB*T
      COSWT=DCOS(WBT)
      SINWT=DSIN(WBT)
  15  IF((T+ST) >= TSTOP) :                     
       IPLANE=IPLANE+1
       TSTOP=TSTOP+TSTEP
# STORE POSITION AND ENERGY AT TIME PLANE =IPLANE. 
       CALL TPLANEH(T,E1,CX1,CY1,CZ1,EFIELD,IPLANE)
# CHECK IF PASSED THROUGH MORE THAN ONE PLANE IN THIS STEP       
       IF((T+ST):
 >= TSTOP and TSTOP <= TFINAL) GO TO 15
       IF((T+ST):
 >= TFINAL) :
        ZTOT=ZTOT+Z
        YTOT=YTOT+Y
        XTOT=XTOT+X     
        TTOT=TTOT+ST
        ZTOTS=ZTOTS+Z-ZSTRT 
        YTOTS=YTOTS+Y-YSTRT
        XTOTS=XTOTS+X-XSTRT     
        TTOTS=TTOTS+ST-TSSTRT    
        TSTOP=TSTEP
# NO MORE ELECTRONS IN CASCADE TRY NEW PRIMARY ELECTRON
        IF(NELEC == (NCLUS+1):
) GO TO 544  
# TAKE ELECTRONS FROM STORE 
   20   X=XS(NPONT) 
        Y=YS(NPONT) 
        Z=ZS(NPONT) 
        ST=TS(NPONT) 
        E1=ES(NPONT) 
        DCX1=DCX(NPONT) 
        DCY1=DCY(NPONT) 
        DCZ1=DCZ[NPONT]
        VTOT=CONST9*math.sqrt(E1)
        CX1=DCX1*VTOT
        CY1=DCY1*VTOT
        CZ1=DCZ1*VTOT 
        IPLANE=IPL(NPONT)   
        NPONT=NPONT-1 
        ZSTRT=Z 
        YSTRT=Y
        XSTRT=X
        TSSTRT=ST
        GO TO 555
       # endIF              
      # endIF
      DZ=(CZ1*SINWT+(EOVBR-CY1)*(1.00-COSWT))/WB
      DX=CX1*T+F1*T*T
      E=E1+DZ*EFZ100+DX*EFX100
 913  FORMAT(3X,' AFTER STORE ITER=',I10,' DZ=',D12.3,'E1=',D12.3,/,' CO
     /SWT=',D12.6,' SINWT=',D12.6,' WBT=',D12.3,' CY1=',D12.3)   
      IF(E < 0.00):
 :
#      WRITE(6,913)ITER,DZ,E,COSWT,SINWT,WBT,CY1  
       E=0.0010
      # endIF                                                   
      IE=DINT(E/ESTEP)+1                                               
      IE=DMIN0(IE,N4000)                                               
#                                                                       
#     TEST FOR #real OR NULL COLLISION                                   
#                                                                       
      R5=drand48(RDUM)
      TEST1=TCF(IE)/TLIM                                                
      IF(R5 <= TEST1):
 GO TO 137                                         
      NNULL=NNULL+1                         
      TEST2=TEMP(IE)/TLIM
      IF(R5 < TEST2):
 :
# TEST FOR NULL LEVELS
      IF(NPLAST == 0):
 GO TO 1
       R2=drand48(RDUM)
       I=0
  888  I=I+1
       IF(CFN(IE,I):
 < R2) GO TO 888
# INCREMENT NULL SCATTER SUM
       ICOLNN(I)=ICOLNN(I)+1
       GO TO 1
      # endIF                         
      TEST3=(TEMP(IE)+ABSFAKEI)/TLIM
      IF(R5 < TEST3):
 :
# FAKE IONISATION INCREMENT COUNTER AND ADD ELECTRON TO STORE
       IFAKE=IFAKE+1:
       IFAKET(IPLANE+1):
=IFAKET(IPLANE+1)+1
       IF(FAKEI < 0.0):
 :
        NEION=NEION+1
# FAKE ATTACHMENT START NEW ELECTRON
        IF(NELEC == (NCLUS+1):
) GO TO 544
# ELECTRON CAPTURED TAKE NEXT ELECTRON FROM STORE
        GO TO 20
       # endIF
# FAKE IONISATION ADD ELECTRON TO STORE
       NCLUS=NCLUS+1
       NPONT=NPONT+1
       NMXADD=MAX(NPONT,NMXADD)
       IF(NPONT > 2000):
 : 
        WRITE(6,546) NPONT,ITER
        STOP
       # endIF     
       XS(NPONT)=X+DX       
       YS(NPONT)=Y+EOVBR*T+((CY1-EOVBR)*SINWT+CZ1*(1.00-COSWT))/WB
       ZS(NPONT)=Z+DZ
       TS(NPONT)=ST+T
       ES(NPONT)=E
       IPL(NPONT)=IPLANE
       CXT=CX1+2.00*T*F1
       CYT=(CY1-EOVBR)*COSWT+CZ1*SINWT+EOVBR
       CZT=CZ1*COSWT-(CY1-EOVBR)*SINWT 
       BOT=1.00/math.sqrt(CXT*CXT+CYT*CYT+CZT*CZT)
       DCX(NPONT)=CXT*BOT
       DCY(NPONT)=CYT*BOT
       DCZ[NPONT]=CZT*BOT
       GO TO 1
      # endIF   
      GO TO 1                                                           
#                                                                       
#  CALCULATE DIRECTION COSINES AND POSITIONS AT INSTANT BEFORE COLLISION
#    ALSO UPDATE DIFFUSION  AND ENERGY CALCULATIONS.                    
  137 T2=T*T
      IF(T >= TMAX1):
 TMAX1=T
      TDASH=0.00  
# CALC VELOCITY
      CX2=CX1+2.00*F1*T
      CY2=(CY1-EOVBR)*COSWT+CZ1*SINWT+EOVBR
      CZ2=CZ1*COSWT-(CY1-EOVBR)*SINWT
# CALC DIRECTION COSINES
      VTOT=math.sqrt(CX2*CX2+CY2*CY2+CZ2*CZ2)
      DCX2=CX2/VTOT
      DCY2=CY2/VTOT
      DCZ2=CZ2/VTOT                                                     
      NCOL=NCOL+1                                                       
# CALC NEW POSITION                                                
      X=X+DX                                                            
      Y=Y+EOVBR*T+((CY1-EOVBR)*SINWT+CZ1*(1.00-COSWT))/WB
      Z=Z+DZ          
      ST=ST+T
      IT=DINT(T+1.00)                                                
      IT=DMIN0(IT,N300)                                                
      TIME(IT)=TIME(IT)+1.00                                        
      SPEC(IE)=SPEC(IE)+1.00
# --------------------------------------------------------------------- 
#     DETERMINATION OF #real COLLISION TYPE                              
# --------------------------------------------------------------------- 
      R2=drand48(RDUM)
# FIND LOCATION WITHIN 4 UNITS IN COLLISION ARRAY
      CALL SORT(I,R2,IE)                                                
  140 I=I+1                                                             
      IF(CF(IE,I):
 < R2) GO TO 140                                      
      S1=RGAS(I)                                                        
      EI=EIN(I)
      IF(E < EI):
 :
#     WRITE(6,994) E,EI,ITER
#994  FORMAT(2X,' WARNING ENERGY =',F8.3,' LESS THAN ENERGY LOSS EI=',F8
#    /.3,' AT ITER=',I12,' DUE TO BINNING ERROR')
# FIX ENERGY LOSS SMALLER THAN INCIDENT ENERGY IF A BINING ERROR OCCURS.
      EI=E-0.00010
      # endIF                                                          
      IF(IPN(I):
 == 0) GO TO 666
# ATTACHMENT       
      IF(IPN(I):
 == -1) :
       NEION=NEION+1
       IPT=IARRY(I)
       ID=ID+1
       ITER=ITER+1
       IPRINT=IPRINT+1
       ICOLL(IPT)=ICOLL(IPT)+1
       ICOLN(I)=ICOLN(I)+1 
       IT=DINT(T+1.00)
       IT=DMIN0(IT,N300)
       TIME(IT)=TIME(IT)+1.00
       ZTOT=ZTOT+Z
       YTOT=YTOT+Y
       XTOT=XTOT+X
       TTOT=TTOT+ST
       ZTOTS=ZTOTS+Z-ZSTRT
       YTOTS=YTOTS+Y-YSTRT
       XTOTS=XTOTS+X-XSTRT
       TTOTS=TTOTS+ST-TSSTRT
#  ELECTRON CAPTURED START NEW PRIMARY          
       IF(NELEC == (NCLUS+1):
) GO TO 544
# ELECTRON CAPTURED TAKE NEXT ELECTRON FROM STORE       
       GO TO 20
      # endIF    
      EISTR=EI                                             
      R9=drand48(RDUM)
#     ESEC=R9*(E-EI)      
#    USE OPAL PETERSON AND BEATY SPLITTING FACTOR.
      ESEC=WPL(I)*TAN(R9*ATAN((E-EI)/(2.00*WPL(I))))   
      ESEC=WPL(I)*(ESEC/WPL(I))**0.9524                
      EI=ESEC+EI 
# STORE POSITION ,ENERGY, DIRECTION COSINES AND TIME OF GENERATION
# OF IONISATION ELECTRON      
      NCLUS=NCLUS+1
      NPONT=NPONT+1
      NMXADD=MAX(NPONT,NMXADD)
      IF(NPONT > 2000):
 : 
      WRITE(6,546) NPONT,ITER
 546  FORMAT(2X,' def STOPPED . NPONT=',I5,' ITER=',I10)
      STOP
      # endIF     
      XS(NPONT)=X       
      YS(NPONT)=Y
      ZS(NPONT)=Z
      TS(NPONT)=ST
      ES(NPONT)=ESEC
      IPL(NPONT)=IPLANE
      NCLTMP=NPONT
      NTMPFLG=1
# RANDOMISE SECONDARY ELECTRON DIRECTION
#     R3=drand48(RDUM)
#     F3=1.00-2.00*R3
#     THETA0=DACOS(F3)
#     F6=DCOS(THETA0)
#     F5=DSIN(THETA0)
#     R4=drand48(rdum)
#     PHI0=F4*R4
#     F8=DSIN(PHI0)
#     F9=DCOS(PHI0)               
#     DCX(NPONT)=F9*F5
#     DCY(NPONT)=F8*F5
#     DCZ[NPONT]=F6     
# STORE POSSIBLE SHELL EMISSIONS AUGER OR FLUORESCENCE
      IF(EISTR > 30.0):
 :
# AUGER EMISSIONS WITHOT FLUORESCENCE
       NAUG=NC0(I)
       EAVAUG=EC0(I)/DFLOAT(NAUG)
       DO 701 JFL=1,NAUG
       NCLUS=NCLUS+1
       NPONT=NPONT+1
       XS(NPONT)=X
       YS(NPONT)=Y
       ZS(NPONT)=Z
       TS(NPONT)=ST
       ES(NPONT)=EAVAUG
       IPL(NPONT)=IPLANE
       R3=drand48(RDUM)
       F3=1.00-2.00*R3
       THETA0=DACOS(F3)
       F6=DCOS(THETA0)
       F5=DSIN(THETA0)
       R4=drand48(RDUM)
       PHI0=F4*R4
       F8=DSIN(PHI0)
       F9=DCOS(PHI0)
       DCX(NPONT)=F9*F5
       DCY(NPONT)=F8*F5
       DCZ[NPONT]=F6
  701  CONTINUE
      # endIF
#                                                                       
#  GENERATE SCATTERING ANGLES AND UPDATE  LABORATORY COSINES AFTER      
#   COLLISION ALSO UPDATE ENERGY OF ELECTRON.                           
#
  666 IPT=IARRY(I)
      ID=ID+1    
      ITER=ITER+1
      IPRINT=IPRINT+1                                                   
      ICOLL(IPT)=ICOLL(IPT)+1 
      ICOLN(I)=ICOLN(I)+1   
# IF EXCITATION : ADD PROBABILITY ,PENFRA(1,I),OF TRANSFER TO GIVE
# IONISATION OF THE OTHER GASES IN THE MIXTURE
      IF(IPEN == 0):
 GO TO 5
      IF(PENFRA[1,I] != 0.0):
 :
       RAN=drand48(RDUM)
       IF(RAN > PENFRA[1,I]):
 GO TO 5
       NCLUS=NCLUS+1
       NPONT=NPONT+1
       IF(NPONT > 2000):
 :
        WRITE(6,546) NPONT,ITER
        STOP
       # endIF
# ENTER HERE POSSIBLE DELOCALISATION LENGTH FOR PENNING TRANSFER
       IF(PENFRA[2,I] == 0.0):
 :
        XS(NPONT)=X
        YS(NPONT)=Y
        ZS(NPONT)=Z
        GO TO 667
       # endIF    
       ASIGN=1.0
       RAN=drand48(RDUM)
       RAN1=drand48(RDUM)
       IF(RAN1 < 0.5):
 ASIGN=-ASIGN
       XS(NPONT)=X-math.log(RAN)*PENFRA[2,I]*ASIGN
       RAN=drand48(RDUM)
       RAN1=drand48(RDUM)
       IF(RAN1 < 0.5):
 ASIGN=-ASIGN
       YS(NPONT)=Y-math.log(RAN)*PENFRA[2,I]*ASIGN
       RAN=drand48(RDUM)
       RAN1=drand48(RDUM)
       IF(RAN1 < 0.5):
 ASIGN=-ASIGN
       ZS(NPONT)=Z-math.log(RAN)*PENFRA[2,I]*ASIGN
# ENTER POSSIBLE PENNING TRANSFER TIME
  667  TPEN=ST
       IF(PENFRA[3,I] == 0.0):
 GO TO 668
       RAN=drand48(RDUM)
       TPEN=ST-math.log(RAN)*PENFRA[3,I]
  668  TS(NPONT)=TPEN
       ES(NPONT)=1.0
       DCX(NPONT)=DCX1
       DCY(NPONT)=DCY1
       DCZ[NPONT]=DCZ1
# FIND LAST TIME PLANE BEFORE TPEN
       TSTOP1=0.0
       IPLANE1=0
       DO 669 KDUM=1,ITFINAL
       TSTOP1=TSTEP+TSTOP1
       IF(TPEN < TSTOP1):
 GO TO 670
       IPLANE1=IPLANE1+1
  669  CONTINUE
# PENNING TRANSFER OCCURS AFTER FINAL TIME PLANE. CLEAR ENTRY
       NPONT=NPONT-1
       NCLUS=NCLUS-1
       GO TO 5
  670  IPL(NPONT)=IPLANE1         
      # endIF                                   
    5 S2=(S1*S1)/(S1-1.00) 
# ANISOTROPIC SCATTERING
      R3=drand48(RDUM)
      IF(INDEX(I):
 == 1) :
       R31=drand48(RDUM)
       F3=1.00-R3*ANGCT(IE,I)        
       IF(R31 > PSCT(IE,I):
) F3=-F3
      elif(INDEX(I) == 2) :
       EPSI=PSCT(IE,I)
       F3=1.00-(2.00*R3*(1.00-EPSI)/(1.00+EPSI*(1.00-2.00*R3)))
      else:
# ISOTROPIC SCATTERING                                            
       F3=1.00-2.00*R3  
      # endIF
      THETA0=DACOS(F3)                                                  
      R4=drand48(RDUM)
      PHI0=F4*R4                                                        
      F8=DSIN(PHI0)                                                     
      F9=DCOS(PHI0)                                                     
      IF(E < EI):
 EI=0.00                                              
      ARG1=1.00-S1*EI/E                                                
      ARG1=DMAX1(ARG1,SMALL)                                            
      D=1.00-F3*math.sqrt(ARG1)                                            
      E1=E*(1.00-EI/(S1*E)-2.00*D/S2) 
      E1=DMAX1(E1,SMALL)                                                
      Q=math.sqrt((E/E1)*ARG1)/S1                                           
      Q=DMIN1(Q,1.00)                                                  
      THETA=DASIN(Q*DSIN(THETA0))                                       
      F6=DCOS(THETA)                                                    
      U=(S1-1.00)*(S1-1.00)/ARG1                                      
      CSQD=F3*F3                                                        
      IF(F3 < 0.00 and CSQD > U):
 F6=-1.00*F6                        
      F5=DSIN(THETA)                                                    
      DCZ2=DMIN1(DCZ2,1.00)                                            
      ARGZ=math.sqrt(DCX2*DCX2+DCY2*DCY2)
      IF(ARGZ == 0.00):
 :
       DCZ1=F6         
       DCX1=F9*F5                             
       DCY1=F8*F5 
       IF(NTMPFLG == 1):
 :
# USE FREE KINEMATICS FOR IONISATION SECONDARY ANGLE
        F5S=F5*math.sqrt(E1/ES(NCLTMP))
        IF(F5S > 1.0):
 F5S=1.0
        THSEC=DASIN(F5S)
        F5S=DSIN(THSEC)
        F6S=DCOS(THSEC)
        IF(F6 < 0.0):
 F6S=-F6S
        PHIS=PHI0+API
        IF(PHIS > F4):
 PHIS=PHI0-F4
        F8S=DSIN(PHIS)
        F9S=DCOS(PHIS)
        DCZ[NCLTMP]=F6S
        DCY(NCLTMP)=F8S*F5S
        DCX(NCLTMP)=F9S*F5S
        NTMPFLG=0
       # endIF
       GO TO 190
      # endIF                                            
      DCZ1=DCZ2*F6+ARGZ*F5*F8                                           
      DCY1=DCY2*F6+(F5/ARGZ)*(DCX2*F9-DCY2*DCZ2*F8)                     
      DCX1=DCX2*F6-(F5/ARGZ)*(DCY2*F9+DCX2*DCZ2*F8) 
      IF(NTMPFLG == 1):
 :
# USE FREE KINEMATICS FOR IONISATION SECONDARY ANGLE
       F5S=F5*math.sqrt(E1/ES(NCLTMP))
       IF(F5S > 1.0):
 F5S=1.0
       THSEC=DASIN(F5S)
       F5S=DSIN(THSEC)
       F6S=DCOS(THSEC)
       IF(F6 < 0.0):
 F6S=-F6S
       PHIS=PHI0+API
       IF(PHIS > F4):
 PHIS=PHI0-F4
       F8S=DSIN(PHIS)
       F9S=DCOS(PHIS)
       DCZ[NCLTMP]=DCZ2*F6S*ARGZ*F5S*F8S
       DCY(NCLTMP)=DCY2*F6S+(F5S/ARGZ)*(DCX2*F9S-DCY2*DCZ2*F8S)
       DCX(NCLTMP)=DCX2*F6S-(F5S/ARGZ)*(DCYS*F9S+DCX2*DCZ2*F8S)
       NTMPFLG=0
      # endIF
  190 CONTINUE  
      VTOT=CONST9*math.sqrt(E1)
      CX1=DCX1*VTOT
      CY1=DCY1*VTOT
      CZ1=DCZ1*VTOT
# STORE DIRECTION COSINES AND ENERGY AFTER N COLLISIONS
# FOR LATER REUSE IN PRIMARY GENERATION
      I100=I100+1
      IF(I100 == 200):
 :
       DCZ100=DCZ1
       DCX100=DCX1        
       DCY100=DCY1 
       E100=E1
       I100=0
      # endIF  
      IF(IPRINT > JPRINT):
 GO TO 200
      GO TO 1                                    
#    INTERMEDIATE PRINTOUT                       
 200  IPRINT=0 
      WZ=ZTOTS/TTOTS                          
      WZ=WZ*1.0D+09  
      WY=YTOTS/TTOTS   
      WY=WY*1.0D+09
      WX=XTOTS/TTOTS
      WX=WX*1.0D+09
      JCT=ID/100000
#      IF(J1 == 1) WRITE(6,201)                                         
# 201 FORMAT(/,7X,'INTERMEDIATE OUTPUT',/,'    VELZ     VELY     VELX    
#    /   TIME       COUNT    ')      
# ROTATE INTERMEDIATE OUTPUT INTO LAB FRAME 
      WZR=WZ*RCS-WX*RSN
      WYR=WY
      WXR=WZ*RSN+WX*RCS
#     WRITE(6,202) WZR,WYR,WXR,TTOTS,JCT   
# 202 FORMAT(3(1X,F8.3),1X,D10.3,4X,I6)                 
      J1=J1+1            
      GO TO 1
#  MAIN LOOP # end                                                  
  700 XID=DFLOAT(ID)
      IF(NELEC > IPRIM):
 :
       ANEION=DFLOAT(NEION)
       ANBT=DFLOAT(NELEC-IPRIM)
       ATTOINT=ANEION/ANBT
       ATTERT=math.sqrt(ANEION)/ANEION
       AIOERT=math.sqrt(ANBT)/ANBT
      else:
       ANEION=DFLOAT(NEION) 
       ATTOINT=-1.00
       ATTERT=math.sqrt(ANEION)/ANEION
      # endIF
      JCT=ID/100000  
      IF(J1 == 1):
 :
      WRITE(6,940) NCLUS,ITER
  940 FORMAT(2(/),' def STOPPED  (TOO FEW COLLISIONS), DECREASE THE 
     /ESTIMATED ALPHA.  NCLUS = ',I7,'  ITER =',I9)      
      STOP
      # endIF
      IF(JPRT == 1):
 WRITE(6,878) NELEC,NEION,IPRIM
 878  FORMAT(/,' TOTAL NO OF ELECTRONS=',I8,/,' TOTAL NO OF NEG. IONS=',
     /I8,/,' TOTAL NO OF PRIMARIES=',I8)  
      EPRMBAR=0.00
      E2PRM=0.00
      IF(IPRIM == 1):
 RETURN      
      DO 310 I=1,IPRIM
      E2PRM=E2PRM+EPRM(I)*EPRM(I)
 310  EPRMBAR=EPRMBAR+EPRM(I)
      EBAR=EPRMBAR/IPRIM
      EERR=math.sqrt(E2PRM/IPRIM-EBAR**2)
      IF(JPRT == 1):
 WRITE(6,836) EBAR,EERR
 836  FORMAT(/,2X,'AVERAGE ENERGY OF PRIMARY ELECTRON =',F10.3,' EV.',/,
     /'   ENERGY SPREAD OF PRIMARY ELECTRON =',F10.3,' EV.')
#     WRITE(6,835) (IESPECP(J),J=1,100)
#835  FORMAT(/,2X,'ENERGY SPECTRUM OF PRIMARY ELECTRONS IN 1 EV. BINS',/
#    /,10(2X,10I5,/))
      RETURN               
  315 IF(ITER > NMAX) :
       WRITE(6,991) ITER,NMAX,NPONT,NELEC,IPRIM,NMXADD
 991   FORMAT(2(/),' def STOPPED.  ITER =',I10,'    NMAX =',I10,/,
     /' NPONT=',I4,' NELEC=',I8,' IPRIM=',I4,' NMXADD=',I3)
       STOP
      # endIF                                                             
      RETURN                                                            
      # end
      def TPLANEH(T,E1,CX1,CY1,CZ1,EFLD,IPLANE):
      IMPLICIT #real*8 (A-H,O-Z)  
      IMPLICIT #integer*8 (I-N)
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5
      COMMON/BFLD/EOVB,WB,BTHETA,BMAG
      COMMON/ROTS/RCS,RSN,EFZ100,EFX100,F1,EOVBR
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/OUTPT/TIME(300),ICOLL(30),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(960),ICOLNN(60)
      COMMON/TPLOUTH/ETPL(8),XTPL(8),YTPL(8),ZTPL(8),TTPL(8),XXTPL(8),
     /YYTPL(8),ZZTPL(8),YZTPL(8),XZTPL(8),XYTPL(8),VZTPL(8),VYTPL(8),
     /VXTPL(8),NETPL(8),ATTOINT,ATTERT,AIOERT
#-----------------------------------------------------------------------
# STORES POSITION, TIME AND ENERGY AND SUMS REQUIRED
# TO CALCULATE DEVIATIONS AND MEANS AT PLANE =IPLANE 
# USED WITH BFIELD AT ANGLE BTHETA TO EFIELD      
# ROTATES STORED POSITIONS INTO LAB FRAME.
#-----------------------------------------------------------------------
      TIMESP=IPLANE*TSTEP
# CALC TIME LEFT TO ARRIVE AT PLANE
      TIMLFT=TIMESP-ST
      T2LFT=TIMLFT*TIMLFT
      WBT=WB*TIMLFT
      COSWT=DCOS(WBT)
      SINWT=DSIN(WBT)
      CX2=CX1+2.00*F1*TIMLFT
      CY2=(CY1-EOVBR)*COSWT+CZ1*SINWT+EOVBR
      CZ2=CZ1*COSWT-(CY1-EOVBR)*SINWT
      VTOT=math.sqrt(CX2*CX2+CY2*CY2+CZ2*CZ2)
      DCZ2=CZ2/VTOT
      DCY2=CY2/VTOT
      DCX2=CX2/VTOT
      DX=CX1*TIMLFT+F1*TIMLFT*TIMLFT
      XPLANE=X+DX                          
      YPLANE=Y+EOVBR*TIMLFT+((CY1-EOVBR)*SINWT+CZ1*(1.00-COSWT))/WB
      DZ=(CZ1*SINWT+(EOVBR-CY1)*(1.00-COSWT))/WB
      ZPLANE=Z+DZ
# ROTATE POSITIONS     
      ZPLANER=ZPLANE*RCS-XPLANE*RSN
      YPLANER=YPLANE
      XPLANER=ZPLANE*RSN+XPLANE*RCS         
      EPLANE=E1+DZ*EFZ100+DX*EFX100
      VZPLANE=DCZ2*math.sqrt(EPLANE)*CONST3*0.010
      VYPLANE=DCY2*math.sqrt(EPLANE)*CONST3*0.010
      VXPLANE=DCX2*math.sqrt(EPLANE)*CONST3*0.010
      XTPL(IPLANE)=XTPL(IPLANE)+XPLANER
      YTPL(IPLANE)=YTPL(IPLANE)+YPLANER
      ZTPL(IPLANE)=ZTPL(IPLANE)+ZPLANER
      XXTPL(IPLANE)=XXTPL(IPLANE)+XPLANER*XPLANER
      YYTPL(IPLANE)=YYTPL(IPLANE)+YPLANER*YPLANER
      ZZTPL(IPLANE)=ZZTPL(IPLANE)+ZPLANER*ZPLANER
      YZTPL(IPLANE)=YZTPL(IPLANE)+YPLANER*ZPLANER
      XZTPL(IPLANE)=XZTPL(IPLANE)+XPLANER*ZPLANER
      XYTPL(IPLANE)=XYTPL(IPLANE)+XPLANER*YPLANER
      ETPL(IPLANE)=ETPL(IPLANE)+EPLANE
      TTPL(IPLANE)=TTPL(IPLANE)+ST+TIMLFT
# ROTATE VELOCITIES 
      VZPLNER=VZPLANE*RCS-VXPLANE*RSN
      VYPLNER=VYPLANE
      VXPLNER=VZPLANE*RSN+VXPLANE*RCS     
      VZTPL(IPLANE)=VZTPL(IPLANE)+VZPLNER
      VYTPL(IPLANE)=VYTPL(IPLANE)+VYPLNER
      VXTPL(IPLANE)=VXTPL(IPLANE)+VXPLNER
      NETPL(IPLANE)=NETPL(IPLANE)+1 
      RETURN
      # end 
      def ALPCLCA   :
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAX 
      COMMON/TOFOUT/RALPHA,RALPER,TOFENE,TOFENER,TOFWV,TOFWVER,
     /TOFDL,TOFDLER,TOFDT,TOFDTER,TOFWR,TOFWRER,RATTOF,RATOFER 
      COMMON/VEL/WX,WY,WZ
      COMMON/CTOWNS/ALPHA,ATT
      COMMON/CTWNER/ALPER,ATTER
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9]
      COMMON/LARGE/CF(4000,960),EIN(960),TCF(4000),IARRY(960),RGAS(960),
     /IPN(960),WPL(960),LAST,ISIZE,PENFRA[3,960],TCFMAX(8) 
# ---------------------------------------------------------------------      
#  ESTIMATE TIME STEP FOR AVALANCHE SIMULATION IN TIME OF FLIGHT SIM.
#  USES ESTIMATED GAIN OF 3.0 BETWEEN PILANES. 
#  CALLS TOF AND PT defS AND UPDATES ALPHA AND ATT
#  VERSION WITH BFIELD PARALLEL TO EFIELD 
# ------------------------------------------------------------------
      IMAX=NMAX/10000000 
      IF(IMAX < 5):
 IMAX=5 
      NMAX=IMAX*10000000
      CORR=760.0*(TEMPC+273.15)/(TORR*293.15)
      ALPP=ALPHA/CORR
      ATTP=ATT/CORR
      ANETP=ALPP-ATTP
      ANET=ALPHA-ATT
      TCUTH=1.2D-10*CORR
      TCUTL=1.D-13*CORR
#   
      IF (ANETP > 30.0):
 :
       ALPHAD=0.0
       ALP1=ALPHA
       ATT1=ATT
# WEAK ATTACHMENT
       GO TO 6
      # endIF 
#  SOME ATTACHMENT
      IF(abs(ANETP):
 < 100.) :
# SMALL NET ATTACHMENT
       ALPHAD=abs(ATT)*0.8
      elif(abs(ANETP) >= 100. and abs(ANETP) < 1000.) :
# LARGER NET ATTACHMENT
       ALPHAD=abs(ANET)*0.65
      elif(abs(ANETP) > 1000. and abs(ANETP) < 10000.) :
       ALPHAD=abs(ANET)*0.6
      elif(abs(ANETP) > 10000. and abs(ANETP) < 100000.) :
       ALPHAD=abs(ANET)*0.5
      elif(abs(ANETP) > 100000. and abs(ANETP) < 2000000.) :
       ALPHAD=abs(ANET)*0.4
      else: 
       WRITE(6,91) 
   91 FORMAT(' ATTACHMENT TOO LARGE def STOPPED')
       STOP
      # endIF
   3  VDST=WZ*1.D-5
      FAKEI=ALPHAD*WZ*1.D-12
      ALPHAST=0.85*abs(ALPHAD+ANET)                        
      TSTEP=math.log(3.00)/(ALPHAST*VDST*1.0D5)
      IF(TSTEP > TCUTH):
 TSTEP=TCUTH
      IF(TSTEP < TCUTL):
 TSTEP=TCUTL
# UPDATE NULL COLLISION FREQUENCY LIMIT
      DO 4 J=1,8
    4 TCFMAX(J)=TCFMAX(J)+abs(FAKEI)
      WRITE(6,871) ALPHAST,ANET,ALPHAD,TSTEP
  871 FORMAT(' ALPHAST1=',D10.3,' ANET1=',D10.3,' ALPHAD1=',D10.3,/,
     /' TSTEP1=',D10.3)
#  CONVERT TO  PICOSECONDS     
      TSTEP=TSTEP*1.0D12
      TFINAL=7.00*TSTEP
      ITFINAL=7
# CALCULATE GOOD STARTING VALUES FOR ALPHA AND NETA
      JPRT=0
      CALL MONTEFTA[JPRT]
      CALL PT(JPRT)
      CALL TOF(JPRT)
      ALP1=RALPHA/TOFWR*1.D7
      ALP1ER=RALPER*ALP1/100. 
      ATT1=RATTOF/TOFWR*1.D7
      ATT1ER=RATOFER*ATT1/100.
      WRITE(6,944) ALP1,ALP1ER,ATT1,ATT1ER
  944 FORMAT(' GOOD STARTING VALUES FOR CALC:',/,' ALPHA=',D12.3,' ERR='
     /,D12.3,/,' NETA =',D12.3,' ERR=',D12.3)
#
# CALCULATE USING GOOD STARTING VALUES
#  RESET TCFMAX
      DO 44 J=1,8
   44 TCFMAX(J)=TCFMAX(J)-abs(FAKEI)
# CALCULATE FAKE IONISATION RATE SCALING BY 1.2 
      ALPHAD=abs(ATT1)*1.2
      IF((ALP1-ATT1):
 > 30.*CORR) ALPHAD=abs(ATT1)*0.4
      IF(abs(ALP1-ATT1):
 < (ALP1/10.0) or abs(ALP1-ATT1) < 
     /(ATT1/10.0)) ALPHAD=abs(ATT1)*0.3
      IF((ALP1-ATT1):
 > 100.*CORR) ALPHAD=0.0
      WZ=TOFWR*1.D5
#
#      
# NET IONISATION
#   5 IF((NET) > (11000./CORR)) :
#  LARGE IONISATION
#      ALPHAD=7000.-(ALPHA-ATT)
#     elif(abs(ALPP) > (5.0*abs(ANET)) or abs(ATTP) > 
#    /(5.0*abs(ANET))): 
# LARGE CANCELLATION BETWEEN ATTACHMENT AND IONISATION
#      ALPHAD=-6.0*(ALPHA-ATT)
#     else:
#      ALPHAD=0.0
#     # endIF
    6 VDST=WZ*1.D-5 
      FAKEI=ALPHAD*WZ*1.D-12          
      ALPHAST=0.85*abs(ALPHAD+ALP1-ATT1)
      IF((ALP1+ALPHAD):
 > (10.0*ALPHAST) or ATT1 > (10.0*ALPHAST)) :
# LARGE CANCELLATION BETWEEN ALPHA AND NETA. REDUCE STEP SIZE BY 15.0
       IF((ALP1+ALPHAD):
 > 100.*CORR) :
        ALPHAST=ALPHAST*15.0
       elif((ALP1+ALPHAD) > 50.0*CORR) :
        ALPHAST=ALPHAST*12.0
       else:
        ALPHAST=ALPHAST*8.0
       # endIF
      # endIF   
      TSTEP=math.log(3.00)/(ALPHAST*VDST*1.0D5)
      IF(TSTEP > TCUTH and ALPHAD != 0.0):
 TSTEP=TCUTH
#     IF(TSTEP < TCUTL) TSTEP=TCUTL
# UPDATE NULL COLLISION FREQUENCY LIMITS
      DO 10 J=1,8
   10 TCFMAX(J)=TCFMAX(J)+abs(FAKEI)
      ANET1=ALP1-ATT1  
      WRITE(6,878) ALPHAST,ANET1,ALPHAD,TSTEP
  878 FORMAT(' ALPHAST=',D10.3,' ANET=',D10.3,' ALPHAD=',D10.3,/,
     /' TSTEP=',D10.3) 
      TSTEP=TSTEP*1.0D12
      TFINAL=7.00*TSTEP
      ITFINAL=7
# CALC TIME OF FLIGHT AND PT 
      WRITE(6,25)
   25 FORMAT(/,2X,'SOLUTION FOR PULSED TOWNS# end AND TIME OF FLIGHT PARAM
     /ETERS',/,'  ------------------------------------------------------
     /--------') 
      WRITE(6,26) TSTEP
   26 FORMAT(1(/),'  TIME STEP BETWEEN SAMPLING PLANES =',D12.5,' PICOSE
     /CS.',/)            
      JPRT=1         
      CALL MONTEFTA[JPRT]                            
      CALL FRIEDLAND 
      CALL PT(JPRT) 
      CALL TOF(JPRT) 
      WRITE(6,27) RALPHA,RALPER,RATTOF,RATOFER
   27 FORMAT(/,'PT IONISATION AND ATTACHMENT RATES *10**12/SEC',/,'ALPHA
      != ',D10.3,' +- ',F6.2,' %      ATT=',D10.3,' +- ',F6.2,' %')    
      WRITE(6,28) 
   28 FORMAT(/,' TOF DIFFUSION')
      WRITE(6,29) TOFDL,TOFDLER,TOFDT,TOFDTER 
   29 FORMAT(/,'  DL=',F8.1,' +- ',F6.1,' %       DT=',F8.1,' +- ',F6.1,
     /' %')     
      WRITE(6,30)
   30 FORMAT(/,' TOF DRIFT VELOCITY')
      WRITE(6,31) TOFWR,TOFWRER   
   31 FORMAT(/,'    WR=',F8.2,' +- ',F6.2,' %') 
# CALCULATE TOWNS# end SST COEFICIENTS FROM TOF RESULTS
      WRN=TOFWR*1.005
      FC1=WRN/(2.00*TOFDL)
      FC2=((RALPHA-RATTOF)*1.0D12)/TOFDL   
      ALPZZ=FC1-math.sqrt(FC1**2-FC2)            
      WRITE(6,32) ALPZZ
  32  FORMAT(/,'TOWNS# end COEFICIENT (ALPHA-ATT) CALCULATED FROM TOF RESU
     /LTS:',/,' ALPHA-ATT /CM.=',D11.4,' N.B. APPROXIMATE FORMULA NOT AC
     /CURATE',/)          
#---------------------------------------------------           
# LOAD NEW ALPHA AND ATTACHMENT INTO COMMON BLOCKS
#-----------------------------------------------
#   
      ALPHA=RALPHA/TOFWR*1.D7
      ALPER=RALPER*ALPHA/100.
      ATT=RATTOF/TOFWR*1.D7
      ATTER=RATOFER*ATT/100.
#
#     WRITE(6,33) ALPHA,ALPER,ATT,ATTER  
#  33 FORMAT(' TOF TOWNS# end IN UNITS OF 1/CM:',/,'   GAIN =',D12.4,' +-'
#    /,D12.4,/,' ATTACH =',D12.4,' +-',D12.4,/)
#-----------------------------------------------      
      RETURN                                                     
      # end                                                               
      def MONTEFTA[JPRT]                                    :
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,RSTART,EFIELD,NMAXOLD 
      COMMON/BFLD/EOVB,WB,BTHETA,BMAG                                   
      COMMON/LARGE/CF(4000,960),EIN(960),TCF(4000),IARRY(960),RGAS(960),
     /IPN(960),WPL(960),IPLAST,ISIZE,PENFRA[3,960],TCFMAX(8)
      COMMON/LARGEN/CFN(4000,60),TCFN(4000),SCLENUL(60),NPLAST
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/OUTPT/TIME(300),ICOLL(30),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(960),ICOLNN(60)
      COMMON/TTRM/ZTOT,TTOT,ZTOTS,TTOTS
      COMMON/ISPT/XS(2000),YS(2000),ZS(2000),TS(2000),ES(2000),
     /DCX(2000),DCY(2000),DCZ[2000],IPL(2000)
      COMMON/TPLOUT/ETPL(8),XTPL(8),YTPL(8),ZTPL(8),TTPL(8),XXTPL(8),
     /YYTPL(8),ZZTPL(8),VZTPL(8),NETPL(8),ATTOINT,ATTERT,AIOERT 
      COMMON/ANIS/PSCT(4000,960),ANGCT(4000,960),INDEX(960),NISO 
      COMMON/IONFL1/NC0(960),EC0(960),NG1(960),EG1(960),NG2(960),
     /EG2(960),WKLM(960),EFL(960) 
      COMMON/FAKE/FAKEI,IFAKE,IFAKET(8),IFAKED[9]   
      DIMENSION EPRM(10000000),IESPECP(100),TEMP(4000)            
# -------------------------------------------------------------------   
#   CALCULATES COLLISION EVENTS AND UPDATES DIFFUSION AND VELOCITY.
#   THIS ROUTINE HANDLES TERMINATIONS AT FIXED DRIFT TIMES.
#   BFIELD PARALLEL TO EFIELD    
# ------------------------------------------------------------------- 
      IF(JPRT == 0):
 :
# CALCULATION OF APPROXIMATE STARTING PARAMETERS
       NMAX=NMAXOLD
       IF(NMAXOLD > 80000000):
 NMAX=80000000
      else:
# ENTRY FOR NORMAL CALCULATION
       NMAX=NMAXOLD
      # endIF
      S=0.00 
      ST=0.00 
      X=0.00
      Y=0.00
      Z=0.00 
      ZTOT=0.00
      ZTOTS=0.00
      TTOT=0.00
      TTOTS=0.00
      SMALL=1.0D-20                                                     
      TMAX1=0.00                                                       
      RDUM=RSTART                                                       
      E1=ESTART                                                         
      CONST9=CONST3*0.010
      DO 25 I=1,300
   25 TIME(I)=0.00
      DO 26 I=1,30
   26 ICOLL(I)=0
      DO 27 I=1,960
   27 ICOLN(I)=0
      DO 271 I=1,60
  271 ICOLNN(I)=0
      DO 28 I=1,4000
   28 SPEC(I)=0.00            
      DO 33 I=1,100
   33 IESPECP(I)=0 
      DO 34 I=1,8
      ETPL(I)=0.00
      XTPL(I)=0.00
      YTPL(I)=0.00
      ZTPL(I)=0.00
      TTPL(I)=0.00
      XXTPL(I)=0.00
      YYTPL(I)=0.00
      ZZTPL(I)=0.00
      VZTPL(I)=0.00
   34 NETPL(I)=0                                   
      ID=0
      N4000=4000
      N300=300
      N100=100
      INTEM=8
      I100=0                                                            
      NCOL=0                                                            
      NNULL=0
      NELEC=0
      NEION=0
      NMXADD=0
      NTMPFLG=0
      NPONT=0 
      NCLUS=0
      J1=1 
      ZSTRT=0.00
      TSSTRT=0.00
#
      DO 111 J=1,4000
  111 TEMP(J)=TCFN(J)+TCF(J)     
      ABSFAKEI=abs(FAKEI)
      IFAKE=0:
      DO 112 J=1,8
  112 IFAKET(J)=0
#                                          
#     INITIAL DIRECTION COSINES                                         
      DCZ1=DCOS(THETA)                                                  
      DCX1=DSIN(THETA)*DCOS(PHI)                                        
      DCY1=DSIN(THETA)*DSIN(PHI) 
# INITIAL VELOCITY
      VTOT=CONST9*math.sqrt(E1)
      CX1=DCX1*VTOT
      CY1=DCY1*VTOT
      CZ1=DCZ1*VTOT      
      E100=E1
      DCZ100=DCZ1
      DCX100=DCX1
      DCY100=DCY1                                       
      BP=EFIELD*EFIELD*CONST1                                           
      F1=EFIELD*CONST2                                                  
      F2=EFIELD*CONST3
      API=DACOS(-1.00)                                                 
      F4=2.00*API
# SET TO MAXIMUM POSSIBLE COLLISION FREQ. 
      TLIM=TCFMAX(1) 
      DO 35 I=2,INTEM
   35 IF(TLIM < TCFMAX(I)) TLIM=TCFMAX(I)
      JPRINT=NMAX/10
      IPRINT=0
      ITER=0
      IPLANE=0
      IPRIM=0
#  LOOP FOR NEW STARTING ELECTRONS 
  544 IPRIM=IPRIM+1 
      IF(IPRIM > 1):
 :
# CHECK IF def WILL EXCEED MAXIMUM NUMBER OF ITERATIONS 
# IN THIS CYCLE IF SO OUTPUT CURRENT RESULTS. 
       IF(ITER > NMAX):
 :
        IPRIM=IPRIM-1
        GO TO 700      
       # endIF 
       X=0.00
       Y=0.00
       Z=0.00
       DCZ1=DCZ100
       DCX1=DCX100
       DCY1=DCY100
       E1=E100
       VTOT=CONST9*math.sqrt(E1)
       CX1=DCX1*VTOT
       CY1=DCY1*VTOT
       CZ1=DCZ1*VTOT
       NCLUS=NCLUS+1
       ST=0.00
       TSSTRT=0.00
       ZSTRT=0.00
       IPLANE=0
      # endIF
      IF(IPRIM > 10000000):
 :
      WRITE(6,944) IPRIM
 944  FORMAT(/,2X,'def STOPPED TOO MANY PRIMARIES IPRIM =',I7)
      GO TO 700
      # endIF
      EPRM(IPRIM)=E1
      IDUM=DINT(E1)+1
      IDUM=DMIN0(IDUM,N100)
      IESPECP(IDUM)=IESPECP(IDUM)+1      
# START OF LOOP FOR NEWLY CREATED ELECTRONS
  555 TDASH=0.00
      NELEC=NELEC+1
      TSTOP=TSTEP+IPLANE*TSTEP       
# MAIN LOOP                                                             
    1 CONTINUE                                                          
#     IF(ITER > NMAX)  GO TO 315
      R1=drand48(RDUM)
      T=-math.log(R1)/TLIM+TDASH
      TDASH=T
      AP=DCZ1*F2*math.sqrt(E1)
  15  IF((T+ST) >= TSTOP) :                     
       IPLANE=IPLANE+1
       TSTOP=TSTOP+TSTEP
# STORE POSITION AND ENERGY AT TIME PLANE =IPLANE. 
       CALL TPLANEA[T,E1,CX1,CY1,DCZ1,AP,BP,EFIELD,IPLANE]
# CHECK IF PASSED THROUGH MORE THAN ONE PLANE IN THIS STEP       
       IF((T+ST):
 >= TSTOP and TSTOP <= TFINAL) GO TO 15
       IF((T+ST):
 >= TFINAL) :
        ZTOT=ZTOT+Z     
        TTOT=TTOT+ST
        ZTOTS=ZTOTS+Z-ZSTRT      
        TTOTS=TTOTS+ST-TSSTRT    
        TSTOP=TSTEP
# NO MORE ELECTRONS IN CASCADE TRY NEW PRIMARY ELECTRON
        IF(NELEC == (NCLUS+1):
) GO TO 544  
# TAKE ELECTRONS FROM STORE 
   20   X=XS(NPONT) 
        Y=YS(NPONT) 
        Z=ZS(NPONT) 
        ST=TS(NPONT) 
        E1=ES(NPONT) 
        DCX1=DCX(NPONT) 
        DCY1=DCY(NPONT) 
        DCZ1=DCZ[NPONT]
        VTOT=CONST9*math.sqrt(E1)
        CX1=DCX1*VTOT
        CY1=DCY1*VTOT
        CZ1=DCZ1*VTOT 
        IPLANE=IPL(NPONT)   
        NPONT=NPONT-1 
        ZSTRT=Z 
        TSSTRT=ST
        GO TO 555
       # endIF              
      # endIF
 913  FORMAT(3X,' AFTER STORE ITER=',I10,' E1=',D12.3,' T=',D12.3,' AP='
     /,D12.3,' BP=',D12.3,' DCZ1=',D12.3)       
      E=E1+(AP+BP*T)*T
      IF(E < 0.00):
 :
       WRITE(6,913)ITER,E,E1,AP,BP,DCZ1 
       E=0.0010
      # endIF                                                   
      IE=DINT(E/ESTEP)+1                                             
      IE=DMIN0(IE,N4000)                                               
#                                                                       
#     TEST FOR #real OR NULL COLLISION                                   
#                                                                       
      R5=drand48(RDUM)
      TEST1=TCF(IE)/TLIM                                               
      IF(R5 <= TEST1):
 GO TO 137                                       
      NNULL=NNULL+1               
      TEST2=TEMP(IE)/TLIM
      IF(R5 < TEST2):
 :
# TEST FOR NULL LEVELS
      IF(NPLAST == 0):
 GO TO 1
       R2=drand48(RDUM)
       I=0
  888  I=I+1
       IF(CFN(IE,I):
 < R2) GO TO 888
# INCREMENT NULL SCATTER SUM
       ICOLNN(I)=ICOLNN(I)+1
       GO TO 1
      # endIF                                      
      TEST3=(TEMP(IE)+ABSFAKEI)/TLIM
      IF(R5 < TEST3):
 :
# FAKE COLLISION INCREMENT COUNTERS
       IFAKE=IFAKE+1:
       IFAKET(IPLANE+1):
=IFAKET(IPLANE+1)+1
       IF(FAKEI < 0.0):
 :
        NEION=NEION+1
# FAKE ATTACHMENT START NEW ELECTRON
        IF(NELEC == (NCLUS+1):
) GO TO 544
# ELECTRON CAPTURED TAKE ELECTRON FROM STORE
        GO TO 20
       # endIF
# FAKE IONISATION ADD ELECTRON TO STORE
       NCLUS=NCLUS+1
       NPONT=NPONT+1
       NMXADD=MAX(NPONT,NMXADD)
       IF(NPONT > 2000):
 : 
        WRITE(6,546) NPONT,ITER
        STOP
       # endIF     
       WBT=WB*T
       COSWT=DCOS(WBT)
       SINWT=DSIN(WBT)
       A=T*CONST9*math.sqrt(E1)
       XS(NPONT)=X+(CX1*SINWT-CY1*(1.00-COSWT))/WB       
       YS(NPONT)=Y+(CY1*SINWT+CX1*(1.00-COSWT))/WB
       ZS(NPONT)=Z+DCZ1*A+T*T*F1
       TS(NPONT)=ST+T
       ES(NPONT)=E
       IPL(NPONT)=IPLANE
       CXT=CX1*COSWT-CY1*SINWT
       CYT=CY1*COSWT+CX1*SINWT
       CONST6=math.sqrt(E1/E)
       BOT=1.00/(CONST9*math.sqrt(E))
       DCX(NPONT)=CXT*BOT
       DCY(NPONT)=CYT*BOT
       DCZ[NPONT]=DCZ1*CONST6+EFIELD*T*CONST5/math.sqrt(E)     
       GO TO 1
      # endIF
      GO TO 1                                                           
#                                                                       
#  CALCULATE DIRECTION COSINES AND POSITIONS AT INSTANT BEFORE COLLISION
#    ALSO UPDATE DIFFUSION  AND ENERGY CALCULATIONS.                    
  137 T2=T*T
      IF(T >= TMAX1):
 TMAX1=T
      TDASH=0.00  
      WBT=WB*T
      COSWT=DCOS(WBT)
      SINWT=DSIN(WBT)                                                   
      CONST6=math.sqrt(E1/E)
      CX2=CX1*COSWT-CY1*SINWT
      CY2=CY1*COSWT+CX1*SINWT
      VTOT=CONST9*math.sqrt(E)                                              
      DCX2=CX2/VTOT                                                     
      DCY2=CY2/VTOT                                                     
      DCZ2=DCZ1*CONST6+EFIELD*T*CONST5/math.sqrt(E) 
      CONST7=CONST9*math.sqrt(E1)                                           
      A=T*CONST7                                                        
      NCOL=NCOL+1                                                       
      DX=(CX1*SINWT-CY1*(1.00-COSWT))/WB                               
      X=X+DX           
      DY=(CY1*SINWT+CX1*(1.00-COSWT))/WB                               
      Y=Y+DY    
      Z=Z+DCZ1*A+T2*F1
      ST=ST+T
      IT=DINT(T+1.00)                                              
      IT=DMIN0(IT,N300)                                                
      TIME(IT)=TIME(IT)+1.00                                           
      SPEC(IE)=SPEC(IE)+1.00
# --------------------------------------------------------------------- 
#     DETERMINATION OF #real COLLISION TYPE                              
# --------------------------------------------------------------------- 
#     R2=RNDM2(RDUM)
      R2=drand48(RDUM)
# FIND LOCATION WITHIN 4 UNITS IN COLLISION ARRAY
      CALL SORT(I,R2,IE)                                                
  140 I=I+1                                                             
      IF(CF(IE,I):
 < R2) GO TO 140                                      
      S1=RGAS(I)                                                        
      EI=EIN(I)
      IF(E < EI):
 :
#     WRITE(6,994) E,EI,ITER
#994  FORMAT(2X,' WARNING ENERGY =',F8.3,' LESS THAN ENERGY LOSS EI=',F8
#    /.3,' AT ITER=',I12,' DUE TO BINNING ERROR')
# FIX ENERGY LOSS SMALLER THAN INCIDENT ENERGY IF A BINING ERROR OCCURS.
      EI=E-0.00010
      # endIF                                                          
      IF(IPN(I):
 == 0) GO TO 666
# ATTACHMENT       
      IF(IPN(I):
 == -1) :
       NEION=NEION+1
       IPT=IARRY(I)
       ID=ID+1
       ITER=ITER+1
       IPRINT=IPRINT+1
       ICOLL(IPT)=ICOLL(IPT)+1
       ICOLN(I)=ICOLN(I)+1 
       IT=DINT(T+1.00)
       IT=DMIN0(IT,N300)
       TIME(IT)=TIME(IT)+1.00
       ZTOT=ZTOT+Z
       TTOT=TTOT+ST
       ZTOTS=ZTOTS+Z-ZSTRT
       TTOTS=TTOTS+ST-TSSTRT
#  ELECTRON CAPTURED START NEW PRIMARY          
       IF(NELEC == (NCLUS+1):
) GO TO 544
# ELECTRON CAPTURED TAKE NEXT ELECTRON FROM STORE       
       GO TO 20
      # endIF    
      EISTR=EI                                             
      R9=drand48(RDUM)
#     ESEC=R9*(E-EI)      
#    USE OPAL PETERSON AND BEATY SPLITTING FACTOR.
      ESEC=WPL(I)*TAN(R9*ATAN((E-EI)/(2.00*WPL(I))))   
      ESEC=WPL(I)*(ESEC/WPL(I))**0.9524                
      EI=ESEC+EI 
# STORE POSITION ,ENERGY, DIRECTION COSINES AND TIME OF GENERATION
# OF IONISATION ELECTRON      
      NCLUS=NCLUS+1
      NPONT=NPONT+1
      NMXADD=MAX(NPONT,NMXADD)
      IF(NPONT > 2000):
 : 
      WRITE(6,546) NPONT,ITER
 546  FORMAT(2X,' def STOPPED . NPONT=',I4,' ITER=',I10)
      STOP
      # endIF     
      XS(NPONT)=X       
      YS(NPONT)=Y
      ZS(NPONT)=Z
      TS(NPONT)=ST
      ES(NPONT)=ESEC
      IPL(NPONT)=IPLANE
      NTMPFLG=1
      NCLTMP=NPONT
# RANDOMISE SECONDARY ELECTRON DIRECTION
#     R3=drand48(RDUM)
#     F3=1.00-2.00*R3
#     THETA0=DACOS(F3)
#     F6=DCOS(THETA0)
#     F5=DSIN(THETA0)
#     R4=drand48(rdum)
#     PHI0=F4*R4
#     F8=DSIN(PHI0)
#     F9=DCOS(PHI0)               
#     DCX(NPONT)=F9*F5
#     DCY(NPONT)=F8*F5
#     DCZ[NPONT]=F6     
# STORE POSSIBLE SHELL EMISSIONS AUGER OR FLUORESCENCE
      IF(EISTR > 30.0):
 :
# AUGER EMISSIONS WITHOUT FLUORESCENCE
       NAUG=NC0(I)
       EAVAUG=EC0(I)/DFLOAT(NAUG)
       DO 701 JFL=1,NAUG
       NCLUS=NCLUS+1
       NPONT=NPONT+1
       XS(NPONT)=X
       YS(NPONT)=Y
       ZS(NPONT)=Z
       TS(NPONT)=ST
       ES(NPONT)=EAVAUG
       R3=drand48(RDUM)
       F3=1.00-2.00*R3
       THETA0=DACOS(F3)
       F6=DCOS(THETA0)
       F5=DSIN(THETA0)
       R4=drand48(RDUM)
       PHI0=F4*R4
       F8=DSIN(PHI0)
       F9=DCOS(PHI0)
       DCX(NPONT)=F9*F5
       DCY(NPONT)=F8*F5
       DCZ[NPONT]=F6
       IPL(NPONT)=IPLANE
  701  CONTINUE
      # endIF
#                                                                       
#  GENERATE SCATTERING ANGLES AND UPDATE  LABORATORY COSINES AFTER      
#   COLLISION ALSO UPDATE ENERGY OF ELECTRON.                           
#
  666 IPT=IARRY(I)
      ID=ID+1    
      ITER=ITER+1
      IPRINT=IPRINT+1                                                   
      ICOLL(IPT)=ICOLL(IPT)+1 
      ICOLN(I)=ICOLN(I)+1   
# IF EXCITATION : ADD PROBABILITY ,PENFRA(1,I),OF TRANSFER TO GIVE
# IONISATION OF THE OTHER GASES IN THE MIXTURE
      IF(IPEN == 0):
 GO TO 5
      IF(PENFRA[1,I] != 0.0):
 :
       RAN=drand48(RDUM)
       IF(RAN > PENFRA[1,I]):
 GO TO 5
       NCLUS=NCLUS+1
       NPONT=NPONT+1
       IF(NPONT > 2000):
 :
        WRITE(6,546) NPONT,ITER
        STOP
       # endIF
# ENTER HERE POSSIBLE DELOCALISATION LENGTH FOR PENNING TRANSFER
       IF(PENFRA[2,I] == 0.0):
 :
        XS(NPONT)=X
        YS(NPONT)=Y
        ZS(NPONT)=Z
        GO TO 667
       # endIF    
       ASIGN=1.0
       RAN=drand48(RDUM)
       RAN1=drand48(RDUM)
       IF(RAN1 < 0.5):
 ASIGN=-ASIGN
       XS(NPONT)=X-math.log(RAN)*PENFRA[2,I]*ASIGN
       RAN=drand48(RDUM)
       RAN1=drand48(RDUM)
       IF(RAN1 < 0.5):
 ASIGN=-ASIGN
       YS(NPONT)=Y-math.log(RAN)*PENFRA[2,I]*ASIGN
       RAN=drand48(RDUM)
       RAN1=drand48(RDUM)
       IF(RAN1 < 0.5):
 ASIGN=-ASIGN
       ZS(NPONT)=Z-math.log(RAN)*PENFRA[2,I]*ASIGN
# ENTER POSSIBLE PENNING TRANSFER TIME
  667  TPEN=ST
       IF(PENFRA[3,I] == 0.0):
 GO TO 668
       RAN=drand48(RDUM)
       TPEN=ST-math.log(RAN)*PENFRA[3,I]
  668  TS(NPONT)=TPEN
       ES(NPONT)=1.0
       DCX(NPONT)=DCX1
       DCY(NPONT)=DCY1
       DCZ[NPONT]=DCZ1
# FIND LAST TIME PLANE BEFORE TPEN
       TSTOP1=0.0
       IPLANE1=0
       DO 669 KDUM=1,ITFINAL
       TSTOP1=TSTEP+TSTOP1
       IF(TPEN < TSTOP1):
 GO TO 670
       IPLANE1=IPLANE1+1
  669  CONTINUE
# PENNING TRANSFER OCCURS AFTER FINAL TIME PLANE. CLEAR ENTRY
       NPONT=NPONT-1
       NCLUS=NCLUS-1
       GO TO 5
  670  IPL(NPONT)=IPLANE1         
      # endIF                                   
    5 S2=(S1*S1)/(S1-1.00) 
# ANISOTROPIC SCATTERING
      R3=drand48(RDUM) 
      IF(INDEX(I):
 == 1) :
       R31=drand48(RDUM)
       F3=1.00-R3*ANGCT(IE,I)       
       IF(R31 > PSCT(IE,I):
) F3=-F3
      elif(INDEX(I) == 2) :
       EPSI=PSCT(IE,I)
       F3=1.00-(2.00*R3*(1.00-EPSI)/(1.00+EPSI*(1.00-2.00*R3)))
      else:
# ISOTROPIC SCATTERING                                                
       F3=1.00-2.00*R3  
      # endIF
      THETA0=DACOS(F3)                                                  
      R4=drand48(RDUM)
      PHI0=F4*R4                                                        
      F8=DSIN(PHI0)                                                     
      F9=DCOS(PHI0)                                                     
#     IF(E < EI) EI=0.00   
      IF(E < EI):
 EI=E                                           
      ARG1=1.00-S1*EI/E                                                
      ARG1=DMAX1(ARG1,SMALL)                                            
      D=1.00-F3*math.sqrt(ARG1)                                            
      E1=E*(1.00-EI/(S1*E)-2.00*D/S2) 
      E1=DMAX1(E1,SMALL)                                                
      Q=math.sqrt((E/E1)*ARG1)/S1                                           
      Q=DMIN1(Q,1.00)                                                  
      THETA=DASIN(Q*DSIN(THETA0))                                       
      F6=DCOS(THETA)                                                    
      U=(S1-1.00)*(S1-1.00)/ARG1                                      
      CSQD=F3*F3                                                        
      IF(F3 < 0.00 and CSQD > U):
 F6=-1.00*F6                        
      F5=DSIN(THETA)                                                    
      DCZ2=DMIN1(DCZ2,1.00)                                            
      ARGZ=math.sqrt(DCX2*DCX2+DCY2*DCY2)
      IF(ARGZ == 0.00):
 :
       DCZ1=F6         
       DCX1=F9*F5                             
       DCY1=F8*F5 
       IF(NTMPFLG == 1):
 :
# USE FREE KINEMATICS FOR IONISATION SECONDARY ANGLE
        F5S=F5*math.sqrt(E1/ES(NCLTMP))
        IF(F5S > 1.0):
 F5S=1.0
        THSEC=DASIN(F5S)
        F5S=DSIN(THSEC)
        F6S=DCOS(THSEC)
        IF(F6 < 0.0):
 F6S=-F6S
        PHIS=PHI0+API
        IF(PHIS > F4):
 PHIS=PHI0-F4
        F8S=DSIN(PHIS)
        F9S=DCOS(PHIS)
        DCZ[NCLTMP]=F6S
        DCY(NCLTMP)=F8S*F5S
        DCX(NCLTMP)=F9S*F5S
        NTMPFLG=0
       # endIF
       GO TO 190
      # endIF                                            
      DCZ1=DCZ2*F6+ARGZ*F5*F8                                           
      DCY1=DCY2*F6+(F5/ARGZ)*(DCX2*F9-DCY2*DCZ2*F8)                     
      DCX1=DCX2*F6-(F5/ARGZ)*(DCY2*F9+DCX2*DCZ2*F8) 
      IF(NTMPFLG == 1):
 :
# USE FREE KINEMATICS FOR IONISATION SECONDARY ANGLE
       F5S=F5*math.sqrt(E1/ES(NCLTMP))
       IF(F5S > 1.0):
 F5S=1.0
       THSEC=DASIN(F5S)
       F5S=DSIN(THSEC)
       F6S=DCOS(THSEC)
       IF(F6 < 0.0):
 F6S=-F6S
       PHIS=PHI0+API
       IF(PHIS > F4):
 PHIS=PHI0-F4
       F8S=DSIN(PHIS)
       F9S=DCOS(PHIS)
       DCZ[NCLTMP]=DCZ2*F6S+ARGZ*F5S*F8S
       DCY(NCLTMP)=DCY2*F6S+(F5S/ARGZ)*(DCX2*F9S-DCY2*DCZ2*F8S)
       DCX(NCLTMP)=DCX2*F6S-(F5S/ARGZ)*(DCY2*F9S+DCX2*DCZ2*F8S)
       NTMPFLG=0
      # endIF
  190 CONTINUE  
      VTOT=CONST9*math.sqrt(E1)
      CX1=DCX1*VTOT
      CY1=DCY1*VTOT
      CZ1=DCZ1*VTOT
# STORE DIRECTION COSINES AND ENERGY AFTER N COLLISIONS
# FOR LATER REUSE IN PRIMARY GENERATION
      I100=I100+1
      IF(I100 == 200):
 :
       DCZ100=DCZ1
       DCX100=DCX1        
       DCY100=DCY1 
       E100=E1
       I100=0
      # endIF  
      IF(IPRINT > JPRINT):
 GO TO 200
      GO TO 1                                    
#    INTERMEDIATE PRINTOUT                       
 200  IPRINT=0 
      W=ZTOTS/TTOTS                          
      W=W*1.0D+09                                                       
      JCT=ID/100000
#     IF(J1 == 1) WRITE(6,201)                                         
# 201 FORMAT(/,7X,'INTERMEDIATE OUTPUT',/,'    VEL      POS        TIME 
#    /       COUNT    ')                  
#     WRITE(6,202) W,ZTOTS,TTOTS,JCT   
# 202 FORMAT(1X,F8.3,2(1X,D10.3),4X,I6)                 
      J1=J1+1            
      GO TO 1
#  MAIN LOOP # end                                                  
  700 XID=DFLOAT(ID)
      IF(NELEC > IPRIM):
 :
       ANEION=DFLOAT(NEION)
       ANBT=DFLOAT(NELEC-IPRIM)
       ATTOINT=ANEION/ANBT
       ATTERT=math.sqrt(ANEION)/ANEION
       AIOERT=math.sqrt(ANBT)/ANBT
      else:
       ANEION=DFLOAT(NEION) 
       ATTOINT=-1.00
       ATTERT=math.sqrt(ANEION)/ANEION
      # endIF
      JCT=ID/100000  
      IF(J1 == 1):
 :
      WRITE(6,940) NCLUS,ITER
  940 FORMAT(2(/),' def STOPPED  (TOO FEW COLLISIONS), DECREASE THE 
     /ESTIMATED ALPHA.  NCLUS = ',I7,'  ITER =',I9)      
      STOP
      # endIF
      IF(JPRT == 1):
 WRITE(6,878) NELEC,NEION,IPRIM
 878  FORMAT(/,' TOTAL NO OF ELECTRONS=',I8,/,' TOTAL NO OF NEG. IONS=',
     /I8,/,' TOTAL NO OF PRIMARIES=',I8)  
      EPRMBAR=0.00
      E2PRM=0.00
      IF(IPRIM == 1):
 RETURN      
      DO 310 I=1,IPRIM
      E2PRM=E2PRM+EPRM(I)*EPRM(I)
 310  EPRMBAR=EPRMBAR+EPRM(I)
      EBAR=EPRMBAR/IPRIM
      EERR=math.sqrt(E2PRM/IPRIM-EBAR**2)
      IF(JPRT == 1):
 WRITE(6,836) EBAR,EERR
 836  FORMAT(/,2X,'AVERAGE ENERGY OF PRIMARY ELECTRON =',F10.3,' EV.',/,
     /'   ENERGY SPREAD OF PRIMARY ELECTRON =',F10.3,' EV.')
#     WRITE(6,835) (IESPECP(J),J=1,100)
#835  FORMAT(/,2X,'ENERGY SPECTRUM OF PRIMARY ELECTRONS IN 1 EV. BINS',/
#    /,10(2X,10I5,/))
      RETURN               
  315 IF(ITER > NMAX) :
       WRITE(6,991) ITER,NMAX,NPONT,NELEC,IPRIM,NMXADD
 991   FORMAT(2(/),' def STOPPED.  ITER =',I10,'    NMAX =',I10,/,
     /' NPONT=',I4,' NELEC=',I8,' IPRIM=',I4,' NMXADD=',I3)
       STOP
      # endIF                                                             
      RETURN                                                            
      # end
      def TPLANEA[T,E1,CX1,CY1,DCZ1,AP,BP,EFLD,IPLANE]:
      IMPLICIT #real*8 (A-H,O-Z)  
      IMPLICIT #integer*8 (I-N)
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5
      COMMON/BFLD/EOVB,WB,BTHETA,BMAG
      COMMON/CION/ALPHAST,VDST,TSTEP,ZSTEP,TFINAL,ZFINAL,ITFINAL,IPRIM
      COMMON/OUTPT/TIME(300),ICOLL(30),SPEC(4000),TMAX1,
     /AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(960),ICOLNN(60)
      COMMON/TPLOUT/ETPL(8),XTPL(8),YTPL(8),ZTPL(8),TTPL(8),XXTPL(8),
     /YYTPL(8),ZZTPL(8),VZTPL(8),NETPL(8),ATTOINT,ATTERT,AIOERT 
#-----------------------------------------------------------------------
# STORES POSITION, TIME AND ENERGY AND SUMS REQUIRED
# TO CALCULATE DEVIATIONS AND MEANS AT PLANE =IPLANE 
#-----------------------------------------------------------------------
      TIMESP=IPLANE*TSTEP
# CALC TIME LEFT TO ARRIVE AT PLANE
      TIMLFT=TIMESP-ST
      T2LFT=TIMLFT*TIMLFT
      A=AP*TIMLFT
      B=BP*T2LFT 
      EPLANE=E1+A+B
      WBT=WB*TIMLFT
      COSWT=DCOS(WBT)
      SINWT=DSIN(WBT)                      
      CONST6=math.sqrt(E1/EPLANE)         
      DCZ2=DCZ1*CONST6+EFLD*TIMLFT*CONST5/math.sqrt(EPLANE)
      XPLANE=X+(CX1*SINWT-CY1*(1.00-COSWT))/WB   
      YPLANE=Y+(CY1*SINWT+CX1*(1.00-COSWT))/WB      
      ZPLANE=Z+DCZ1*TIMLFT*math.sqrt(E1)*CONST3*0.010+T2LFT*EFLD*CONST2
      VZPLANE=DCZ2*math.sqrt(EPLANE)*CONST3*0.010
      XTPL(IPLANE)=XTPL(IPLANE)+XPLANE
      YTPL(IPLANE)=YTPL(IPLANE)+YPLANE
      ZTPL(IPLANE)=ZTPL(IPLANE)+ZPLANE
      XXTPL(IPLANE)=XXTPL(IPLANE)+XPLANE*XPLANE
      YYTPL(IPLANE)=YYTPL(IPLANE)+YPLANE*YPLANE
      ZZTPL(IPLANE)=ZZTPL(IPLANE)+ZPLANE*ZPLANE
      ETPL(IPLANE)=ETPL(IPLANE)+EPLANE
      TTPL(IPLANE)=TTPL(IPLANE)+ST+TIMLFT
      VZTPL(IPLANE)=VZTPL(IPLANE)+VZPLANE
      NETPL(IPLANE)=NETPL(IPLANE)+1 
      RETURN
      # end


      DOUBLE PRECISION def DMAX0(IA,IB)
      #integer *8 IA,IB
      IF(IA < IB):
 :
       DMAX0=IB
      else:
       DMAX0=IA
      # endIF
      RETURN
      # end
      DOUBLE PRECISION def DMIN0(IA,IB)
      #integer*8 IA,IB,IONE
      IONE=1
      IF(IA > IB):
 :
       DMIN0=IB
      elif(IA < IONE) :
       DMIN0=IONE
      else: 
       DMIN0=IA
      # endIF
      RETURN
      # end 
      DOUBLE PRECISION def drand48(DUMMY)
*-----------------------------------------------------------------------
*   RNDM2  - Returns double precision random numbers by calling RM48.
*   (Last changed on  5/ 2/00.)
*-----------------------------------------------------------------------
       implicit none
       #integer NVEC
       PARAMETER(NVEC=1000)
       DOUBLE PRECISION RVEC(NVEC),DUMMY
       #integer IVEC
       DATA IVEC/0/
       SAVE RVEC,IVEC
*** Now generate random number between 0 and one.
       IF(IVEC == 0 or IVEC >= NVEC):
            CALL RM48(RVEC,NVEC)
            IVEC=1
       else:
            IVEC=IVEC+1
       # endIF
*** Assign result.
       drand48=RVEC(IVEC)
       # end
#CCCCCCC
*
* $Id: rm48.F,v 1.2 1996/12/12 16:32:06 cernlib Exp $
*
* $Log: rm48.F,v $
* Revision 1.2  1996/12/12 16:32:06  cernlib
* Variables ONE and ZERO added to SAVE statement, courtesy R.Veenhof
*
* Revision 1.1.1.1  1996/04/01 15:02:55  mclareni
* Mathlib gen
*
*
*#include "gen/pilot.h"
      def RM48(RVEC,LENV):
#     Double-precision version of
# Universal random number generator proposed by Marsaglia and Zaman
# in report FSU-SCRI-87-50
#        based on RANMAR, modified by F. James, to generate vectors
#        of pseudorandom numbers RVEC of length LENV, where the numbers
#        in RVEC are numbers with at least 48-bit mantissas.
#   Input and output entry points: RM48IN, RM48UT.
#### ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
####  Calling sequences for RM48:                                    ++
####      CALL RM48 (RVEC, LEN)     returns a vector RVEC of LEN     ++
####                   64-bit random floating point numbers between  ++
####                   zero and one.                                 ++
####      CALL RM48IN(I1,N1,N2)   initializes the generator from one ++
####                   64-bit #integer I1, and number counts N1,N2    ++
####                  (for initializing, set N1=N2=0, but to restart ++
####                    a previously generated sequence, use values  ++ 
####                    output by RM48UT)                            ++ 
####      CALL RM48UT(I1,N1,N2)   outputs the value of the original  ++
####                  seed and the two number counts, to be used     ++
####                  for restarting by initializing to I1 and       ++  
####                  skipping N2*100000000+N1 numbers.              ++
#### ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# for 32-bit machines, use IMPLICIT DOUBLE PRECISION
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION RVEC(*)
      COMMON/R48ST1/U(97),C,I97,J97
      PARAMETER (MODCNS=1000000000)
      SAVE CD, CM, TWOM24, NTOT, NTOT2, IJKL,TWOM49, ONE, ZERO
      DATA NTOT,NTOT2,IJKL/-1,0,0/
#
      IF (NTOT  >=  0):
  GO TO 50
#
#        Default initialization. User has called RM48 without RM48IN.
      IJKL = 54217137
      NTOT = 0
      NTOT2 = 0
      KALLED = 0
      GO TO 1
#
      ENTRY      RM48IN(IJKLIN, NTOTIN,NTOT2N)
#         Initializing routine for RM48, may be called before
#         generating pseudorandom numbers with RM48.   The input
#         values should be in the ranges:  0<=IJKLIN<=900 OOO OOO
#                                          0<=NTOTIN<=999 999 999
#                                          0<=NTOT2N<<999 999 999#
# To get the standard values in Marsaglia's paper, IJKLIN=54217137
#                                            NTOTIN,NTOT2N=0
      IJKL = IJKLIN
      NTOT = MAX(NTOTIN,0)
      NTOT2= MAX(NTOT2N,0)
      KALLED = 1
#          always come here to initialize
    1 CONTINUE
      IJ = IJKL/30082
      KL = IJKL - 30082*IJ
      I = MOD[IJ/177, 177] + 2
      J = MOD[IJ, 177]     + 2
      K = MOD[KL/169, 178] + 1
      L = MOD[KL, 169]
      WRITE(6,'(A,I10,2X,2I10)') ' RM48 INITIALIZED:',IJKL,NTOT,NTOT2
#CC      PRINT '(A,4I10)', '   I,J,K,L= ',I,J,K,L
      ONE = 1.
      HALF = 0.5
      ZERO = 0.
      DO 2 II= 1, 97
      S = 0.
      T = HALF
      DO 3 JJ= 1, 48
         M = MOD[MOD[I*J,179]*K, 179]
         I = J
         J = K
         K = M
         L = MOD[53*L+1, 169]
         IF (MOD[L*M,64]  >=  32):
  S = S+T
    3    T = HALF*T
    2 U(II) = S
      TWOM49 = T
      TWOM24 = ONE
      DO 4 I24= 1, 24
    4 TWOM24 = HALF*TWOM24
      C  =   362436.*TWOM24
      CD =  7654321.*TWOM24
      CM = 16777213.*TWOM24
      I97 = 97
      J97 = 33
#       Complete initialization by skipping
#            (NTOT2*MODCNS + NTOT) random numbers
      DO 45 LOOP2= 1, NTOT2+1
      NOW = MODCNS
      IF (LOOP2  ==  NTOT2+1):
  NOW=NTOT
      IF (NOW  >  0):
  :
      WRITE(6,'(A,I15)') ' RM48IN SKIPPING OVER ',NOW
          DO 40 IDUM = 1, NTOT
          UNI = U(I97)-U(J97)
          IF (UNI  <  ZERO):
  UNI=UNI+ONE
          U(I97) = UNI
          I97 = I97-1
          IF (I97  ==  0):
  I97=97
          J97 = J97-1
          IF (J97  ==  0):
  J97=97
          C = C - CD
          IF (C  <  ZERO):
  C=C+CM
   40     CONTINUE
      # endIF
   45 CONTINUE
      IF (KALLED  ==  1):
  RETURN
#
#          Normal entry to generate LENV random numbers
   50 CONTINUE
      DO 100 IVEC= 1, LENV
      UNI = U(I97)-U(J97)
      IF (UNI  <  ZERO):
  UNI=UNI+ONE
      U(I97) = UNI
      I97 = I97-1
      IF (I97  ==  0):
  I97=97
      J97 = J97-1
      IF (J97  ==  0):
  J97=97
      C = C - CD
      IF (C  <  ZERO):
  C=C+CM
      UNI = UNI-C
      IF (UNI  <  ZERO):
 UNI=UNI+ONE
      RVEC(IVEC) = UNI
#             Replace exact zeros by 2**-49
         IF (UNI  ==  ZERO):
  :
            RVEC(IVEC) = TWOM49
         # endIF
  100 CONTINUE
      NTOT = NTOT + LENV
         IF (NTOT  >=  MODCNS):
  :
         NTOT2 = NTOT2 + 1
         NTOT = NTOT - MODCNS
         # endIF
      RETURN
#           Entry to output current status
      ENTRY RM48UT(IJKLUT,NTOTUT,NTOT2T)
      IJKLUT = IJKL
      NTOTUT = NTOT
      NTOT2T = NTOT2
      RETURN
      # end
      def GAS1(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY   
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
#    /QNULL,NNULL,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,
#    /SCRPT)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(4000),EROOT(4000),QT1(4000),QT2(4000),
     /QT3(4000),QT4(4000)
      COMMON/DENS/DEN(4000)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30) 
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30)
     /,EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]  
      DIMENSION XEN(163),YELM(163),YELT(163),YEPS(163),
     /XVBV4(11),YVBV4(11),XVBV1(11),YVBV1(11),XVBV3(11),YVBV3(11),
     /XVIB5(12),YVIB5(12),XVIB6(12),YVIB6(12),
     /XTR1(12),YTR1(12),XTR2(11),YTR2(11),XTR3(11),YTR3(11),
     /XCF3(37),YCF3(37),XCF2(31),YCF2(31),XCF1(28),YCF1(28),XCF32(25),
     /YCF32(25),XCF0(27),YCF0(27),XC0F(27),YC0F(27),XCF22(25),YCF22(25),
     /XCF(22),YCF(22),XCFF(24),YCFF(24),XCF2F(25),YCF2F(25),
     /XCF3F(26),YCF3F(26),XATT(11),YATT(11),
     /XKSHC(81),YKSHC(81),XKSHF(79),YKSHF(79),IOFFN(46),IOFFION(12)
      DIMENSION Z6T(25),Z9T(25),EBRM(25)
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      DATA XEN/0.0,.001,.002,.003,.004,.005,.006,.007,.008,.009,        
     /0.01,.012,.014,.016,.018,0.02,.025,0.03,.035,0.04,                
     /.045,0.05,.055,0.06,.065,0.07,.075,0.08,.085,0.09,                
     /0.10,0.12,0.14,0.17,0.20,0.24,0.30,0.40,0.50,0.60,                
     /0.80,1.00,1.20,1.40,1.70,2.00,3.00,5.00,6.00,7.00,
     /8.00,9.00,10.0,12.0,15.0,20.0,25.0,30.0,40.0,50.0, 
     /60.0,80.0,100.,125.,150.,200.,250.,300.,400.,500.,
     /600.,700.,800.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,
     /3500.,4000.,5000.,6000.,7000.,8000.,9000.,10000.,1.25D4,1.50D4,
     /1.75D4,2.0D4,2.5D4,3.0D4,3.5D4,4.0D4,4.5D4,5.0D4,6.0D4,7.0D4,
     /8.0D4,9.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5D5,3.0D5,3.5D5,
     /4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,
     /1.75D6,2.0D6,2.5D6,3.0D6,3.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,
     /8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5D7,3.0D7,3.5D7,
     /4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,1.0D8,1.25D8,1.5D8,
     /1.75D8,2.0D8,2.5D8,3.0D8,3.5D8,4.0D8,4.5D8,5.0D8,6.0D8,7.0D8,
     /8.0D8,9.0D8,1.0D9/
# ELASTIC MOMENTUM TRANSFER X-SECTION
      DATA YELM/12.5,8.70,7.00,5.95,5.20,4.70,4.30,3.95,3.65,3.40,
     /3.20,2.85,2.58,2.37,2.19,2.04,1.77,1.57,1.41,1.30,    
     /1.20,1.12,1.05,0.99,0.93,0.88,0.84,0.80,0.76,0.72,
     /0.65,0.48,0.35,0.29,0.29,0.34,0.47,0.87,1.35,1.85,
     /2.95,4.00,4.75,5.15,5.45,5.65,5.80,6.00,6.10,6.30,
     /6.50,6.80,7.20,8.30,9.50,10.1,9.60,8.80,7.85,6.72,
     /5.90,5.06,4.16,3.57,2.99,1.92,1.53,1.20,0.88,0.66,
     /.525,0.43,0.37,0.30,.228,.169,.131,.104,.0711,.0519, 
     /.0397,.0314,.0212,.0153,.0117,.00918,.00743,.00615,.00412,.00297,
     /2.25D-3,1.77D-3,1.18D-3,8.51D-4,6.45D-4,5.08D-4,4.12D-4,3.41D-4,
     /2.47D-4,1.88D-4,
     /1.49D-4,1.21D-4,1.01D-4,6.88D-5,5.05D-5,3.90D-5,3.13D-5,2.17D-5,
     /1.62D-5,1.27D-5,
     /1.03D-5,8.56D-6,7.27D-6,5.49D-6,4.34D-6,3.54D-6,2.96D-6,2.52D-6,
     /1.81D-6,1.36D-6,
     /1.07D-6,8.68D-7,6.08D-7,4.53D-7,3.51D-7,2.82D-7,2.31D-7,1.93D-7,
     /1.42D-7,1.08D-7,
     /8.59D-8,6.98D-8,5.79D-8,3.89D-8,2.80D-8,2.12D-8,1.66D-8,1.10D-8,
     /7.86D-9,5.90D-9,
     /4.59D-9,3.68D-9,3.01D-9,2.13D-9,1.58D-9,1.22D-9,9.75D-10,7.92D-10,
     /5.10D-10,3.56D-10,
     /2.62D-10,2.01D-10,1.29D-10,8.95D-11,6.58D-11,5.04D-11,3.98D-11,
     /3.23D-11,2.24D-11,1.65D-11,
     /1.26D-11,9.96D-12,8.07D-12/
# ELASTIC X-SECTION ASSUMED ISOTROPIC BELOW 0.6 EV
      DATA YELT/12.5,8.70,7.00,5.95,5.20,4.70,4.30,3.95,3.65,3.40,
     /3.20,2.85,2.58,2.37,2.19,2.04,1.77,1.57,1.41,1.30,    
     /1.20,1.12,1.05,0.99,0.93,0.88,0.84,0.80,0.76,0.72,
     /0.65,0.48,0.35,0.29,0.29,0.34,0.47,0.87,1.35,1.85,
     /3.77,4.89,5.66,6.43,7.43,8.34,10.6,12.5,11.6,11.0,
     /11.0,11.7,12.9,14.5,16.8,17.6,18.1,17.2,15.9,14.9,
     /14.3,13.0,11.7,10.5,9.65,8.10,6.83,6.02,5.02,4.36,
     /3.83,3.40,3.08,2.65,2.17,1.89,1.55,1.40,1.19,1.11,
     /.921,.822,.696,.568,.492,.435,.390,.353,.286,.241,
     /.209,.185,.150,.127,.111,.0984,.0888,.0810,.0694,.0611,
     /.0522,.050,.0461,.0391,.0344,.0311,.0287,.0253,.0230,.0214,
     /.0202,.0193,.0186,.0176,.0169,.0164,.0160,.0157,.0152,.0148,
     /.0146,.0145,.0143,.0142,.0141,.0141,.0140,.0140,.0140,.0139,
     /.0139,.0139,.0139,.0139,.01389,.01389,.01389,26*.01388/
# EPSILON FOR ELASTIC ANGULAR DISTRIBUTION
# EPSILON =1-YEPS
      DATA YEPS/40*1.0,
     /.68056,.73101,.76161,.70664,.61270,.53797,.37888,.30604,.35505,
     /.40830,
     /.42979,.41826,.39140,.40794,.39986,.40963,.36006,.33951,.32037,
     /.27671,
     /.23985,.21859,.18948,.17666,.15292,.10180,.09358,.07880,.06538,
     /.05301,
     /.04608,.04117,.03833,.03532,.03188,.02561,.02374,.019986,.015005,
     /.010925,
     /.009845,.008442,.006348,.005446,.004667,.004028,.003554,.003186,
     /.002530,.002096,
     /.001783,.001549,.001228,.001016,.000859,.000749,.000661,.000590,
     /.000486,.000411,
     /3.53D-4,3.12D-4,2.78D-4,2.17D-4,1.76D-4,1.47D-4,1.26D-4,9.61D-5,
     /7.68D-5,6.32D-5,
     /5.32D-5,4.56D-5,3.97D-5,3.10D-5,2.30D-5,2.07D-5,1.74D-5,1.49D-5,
     /1.07D-5,8.04D-6,
     /6.28D-6,5.05D-6,3.47D-6,2.54D-6,1.94D-6,1.53D-6,1.24D-6,1.02D-6,
     /7.33D-7,5.51D-7,
     /4.30D-7,3.44D-7,2.82D-7,1.84D-7,1.30D-7,9.62D-8,7.42D-8,4.80D-8,
     /3.35D-8,2.47D-8,
     /1.89D-8,1.50D-8,1.21D-8,8.388D-9,6.133D-9,4.669D-9,3.666D-9,
     /2.950D-9,1.858D-9,1.271D-9,
     /9.21D-10,6.97D-10,4.37D-10,2.98D-10,2.16D-10,1.63D-10,1.28D-10,
     /1.02D-10,7.00D-11,5.10D-11,
     /3.80D-11,3.00D-11,2.40D-11/
#  VIBRATION V4 (RESONANCE ONLY) SCALED BY 1/E**3 ABOVE 50EV 
      DATA XVBV4/0.0783,4.00,5.00,6.00,7.00,8.00,9.00,10.0,15.0,20.0,
     /50.0/           
      DATA YVBV4/0.0,0.0,0.05,0.35,1.06,1.40,1.26,0.97,0.07,.022,      
     /1.D-3/        
#  VIBRATION V1 (RESONANCE ONLY) SCALED BY 1/E**3 ABOVE 50EV
      DATA XVBV1/0.1126,4.00,5.00,6.00,7.00,8.00,9.00,10.0,15.0,20.0,   
     /50.0/                 
      DATA YVBV1/0.0,0.0,.016,.118,0.36,0.47,0.42,0.33,.023,.007,     
     /3.D-4/    
#  VIBRATION V3 (RESONANCE ONLY) SCALED BY 1/E**3 ABOVE 50EV
      DATA XVBV3/0.1588,4.00,5.00,6.00,7.00,8.00,9.00,10.0,15.0,20.0,   
     /50.0/         
      DATA YVBV3/0.0,0.0,0.15,1.05,3.19,4.20,3.78,2.90,0.20,.067,     
     /3.D-3/         
#  VIBRATION HARMONIC 2(V3) SCALED BY 1/E ABOVE 50EV
      DATA XVIB5/0.3176,1.00,4.00,5.00,6.00,7.00,8.00,9.00,10.0,15.0,   
     /20.0,50.0/             
      DATA YVIB5/0.0,.001,0.01,.031,0.23,0.67,0.87,0.79,0.60,.042,      
     /.014,.0006/ 
# VIBRATION HARMONIC (3(V3) + ALL OTHER HARMONICS)
#  SCALED BY 1/E ABOVE 50 EV
      DATA XVIB6/0.4764,1.00,4.00,5.00,6.00,7.00,8.00,9.00,10.0,15.0,   
     /20.0,50.0/          
      DATA YVIB6/0.0,.0009,.045,.117,.774,2.32,3.06,2.75,2.12,.138,     
     /.037,.0018/ 
#
#  DISSOCATIVE IONISATION :
#  WEIGHTED AVERAGE OF SIEGLAFF AND NISHIMURA FOR SINGLE IONISATION AND
#  DOUBLE IONISATION.
#  FOR DOUBLE IONISATION WITH BREAKUP :  BRUCE ET AL CPL 190(1992)285 
#  NB.  (USED NISHIMURA ONLY BELOW 30EV)
#
# CF3 +
      DATA XCF3/15.7,16.0,17.0,18.0,19.0,20.0,22.0,24.0,26.0,28.0,
     /30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,                
     /120.,140.,160.,200.,250.,300.,400.,500.,600.,800.,         
     /1000.,1250.,1500.,1750.,2000.,2500.,3000./
      DATA YCF3/0.0,.032,.075,.128,.191,.276,.448,.610,.866,1.08,      
     /1.26,1.72,2.05,2.35,2.62,2.94,3.13,3.24,3.32,3.35,              
     /3.38,3.34,3.27,3.17,3.00,2.81,2.54,2.28,2.09,1.77,
     /1.56,1.32,1.15,1.05,.937,.804,.692/
# CF2+
      DATA XCF2/21.47,24.0,26.0,28.0,
     /30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,                
     /120.,140.,160.,200.,250.,300.,400.,500.,600.,800.,         
     /1000.,1250.,1500.,1750.,2000.,2500.,3000./
      DATA YCF2/0.00,.003,.010,.032,
     /.060,.131,.148,.162,.192,.221,.234,.243,.256,.263,
     /.266,.260,.257,.240,.233,.212,.186,.169,.152,.131,
     /.113,.0961,.0834,.0763,.0681,.0585,.0503/
# CF+ 
      DATA XCF1/29.14,                  
     /30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,                
     /120.,140.,160.,200.,250.,300.,400.,500.,600.,800.,         
     /1000.,1250.,1500.,1750.,2000.,2500.,3000./
      DATA YCF1/0.00,                  
     /.0024,.0145,.0583,.107,.156,.185,.226,.239,.238,.266,
     /.274,.259,.261,.234,.227,.186,.146,.122,.113,.0909,
     /.0820,.0695,.0603,.0552,.0493,.0423,.0364/
# DATA CF3 2+
      DATA XCF32/41.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,120.,140.,
     /160.,200.,250.,300.,400.,500.,600.,800.,1000.,1250.,
     /1500.,1750.,2000.,2500.,3000./
      DATA YCF32/0.00,.0053,.0083,.0104,.0135,.0154,.0164,.0187,.0208,
     /.0198,
     /.0208,.0198,.0187,.0167,.0135,.0114,.0101,.0079,.0065,.0055,
     /.0048,.0044,.0039,.0033,.0029/
# C+ 
      DATA XCF0/34.77,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,
     /120.,140.,160.,200.,250.,300.,400.,500.,600.,800.,         
     /1000.,1250.,1500.,1750.,2000.,2500.,3000./
      DATA YCF0/0.0,.0005,.0093,.0426,.0884,.134,.172,.193,.207,.228,
     /.245,.246,.249,.236,.222,.191,.166,.144,.134,.104,
     /.0895,.0759,.0658,.0602,.0538,.0462,.0397/ 
# F+ 
      DATA XC0F/34.5,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,
     /120.,140.,160.,200.,250.,300.,400.,500.,600.,800.,         
     /1000.,1250.,1500.,1750.,2000.,2500.,3000./
      DATA YC0F/0.0,.0019,.0085,.0271,.0561,.1051,.154,.1937,.212,.289,
     /.363,.408,.439,.461,.440,.378,.316,.264,.227,.174,
     /.170,.144,.125,.114,.102,.0874,.0753/   
# CF2 2+
      DATA XCF22/42.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,120.,140.,
     /160.,200.,250.,300.,400.,500.,600.,800.,1000.,1250.,
     /1500.,1750.,2000.,2500.,3000./
      DATA YCF22/0.0,.0002,.0033,.0095,.0194,.0287,.0348,.0409,.0483,
     /.0521,
     /.0522,.0517,.0467,.0458,.0367,.0303,.0280,.0218,.0164,.0139,
     /.0120,.0110,.0098,.0084,.0073/ 
# ION PAIRS:
#   (C+ , F+)
      DATA XCF/63.0,70.0,80.0,90.0,100.,120.,140.,160.,200.,250.,
     /300.,400.,500.,600.,800.,1000.,1250.,1500.,1750.,2000.,
     /2500.,3000./
      DATA YCF/0.0,.002,.009,.020,.025,.038,.048,.056,.062,.059,
     /.068,.049,.043,.036,.025,.019,.016,.014,.012,.011,
     /.0096,.0082/
#   (CF+ , F+)
      DATA XCFF/43.0,50.0,60.0,70.0,80.0,90.0,100.,120.,140.,160.,
     /200.,250.,300.,400.,500.,600.,800.,1000.,1250.,1500.,
     /1750.,2000.,2500.,3000./
      DATA YCFF/0.0,.001,.009,.028,.049,.077,.084,.111,.125,.136,
     /.139,.126,.133,.109,.095,.078,.059,.040,.034,.030,
     /.027,.024,.021,.018/
#   (CF2 + , F+)
      DATA XCF2F/40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,120.,140.,
     /160.,200.,250.,300.,400.,500.,600.,800.,1000.,1250.,
     /1500.,1750.,2000.,2500.,3000./
      DATA YCF2F/0.0,.001,.004,.013,.024,.034,.043,.046,.053,.054,
     /.057,.056,.049,.050,.042,.036,.030,.023,.015,.013,
     /.011,.0104,.0093,.0080,.0069/
#   (CF3 + , F+)
      DATA XCF3F/36.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,120.,
     /140.,160.,200.,250.,300.,400.,500.,600.,800.,1000.,
     /1250.,1500.,1750.,2000.,2500.,3000./
      DATA YCF3F/0.0,.001,.003,.006,.014,.023,.030,.037,.038,.042,
     /.041,.044,.045,.040,.038,.033,.028,.023,.018,.012,
     /.0105,.0091,.0083,.0074,.0064,.0055/    
# CARBON K-SHELL IONISATION X-SECTION
      DATA XKSHC/285.,298.,307.,316.,325.,335.,345.,365.,398.,422.,
     /447.,473.,501.,531.,613.,668.,708.,750.,817.,917.,
     /1000.,1122.,1296.,1496.,1679.,1884.,2054.,2238.,2512.,2985.,
     /3981.,5012.,7079.,1.0D4,1.50D4,2.05D4,2.51D4,3.07D4,4.10D4,5.01D4,
     /6.13D4,7.08D4,8.18D4,1.0D5,1.54D5,2.05D5,2.99D5,4.10D5,5.01D5,
     /6.13D5,
     /7.08D5,8.18D5,1.0D6,1.25D6,1.5D6,2.05D6,3.07D6,4.10D6,5.01D6,
     /6.13D6,
     /7.08D6,8.18D6,1.0D7,1.5D7,2.05D7,3.07D7,4.10D7,5.01D7,6.13D7,
     /7.08D7,
     /8.18D7,1.0D8,1.5D8,2.05D8,3.07D8,4.10D8,5.01D8,6.13D8,7.08D8,
     /8.18D8,
     /1.0D9/
      DATA YKSHC/0.00,1.66D-4,3.48D-4,5.25D-4,6.96D-4,8.63D-4,1.02D-3,
     /1.33D-3,1.75D-3,2.01D-3,
     /2.24D-3,2.46D-3,2.66D-3,2.84D-3,3.21D-3,3.38D-3,3.47D-3,3.55D-3,
     /3.65D-3,3.72D-3,
     /3.75D-3,3.74D-3,3.68D-3,3.57D-3,3.45D-3,3.31D-3,3.19D-3,3.07D-3,
     /2.91D-3,2.66D-3,
     /2.25D-3,1.95D-3,1.55D-3,1.21D-3,8.97D-4,7.07D-4,6.07D-4,5.21D-4,
     /4.21D-4,3.63D-4,
     /3.14D-4,2.84D-4,2.57D-4,2.25D-4,1.74D-4,1.50D-4,1.28D-4,1.15D-4,
     /1.09D-4,1.05D-4,
     /1.03D-4,1.02D-4,1.01D-4,1.005D-4,1.01D-4,1.03D-4,1.07D-4,1.11D-4,
     /1.14D-4,1.17D-4,
     /1.20D-4,1.22D-4,1.25D-4,1.32D-4,1.38D-4,1.45D-4,1.50D-4,1.54D-4,
     /1.58D-4,1.60D-4,
     /1.63D-4,1.67D-4,1.74D-4,1.80D-4,1.87D-4,1.92D-4,1.96D-4,2.00D-4,
     /2.02D-4,2.05D-4,
     /2.09D-4/
# FLUORINE K-SHELL IONISATION X-SECTION
      DATA XKSHF/685.4,705.,726.,747.,770.,792.,816.,840.,865.,890.,
     /916.,944.,1000.,1090.,1188.,1296.,1496.,1679.,1884.,2054.,
     /2238.,2512.,2985.,3758.,4467.,5158.,5957.,7079.,1.0D4,1.26D4,
     /1.50D4,2.05D4,2.51D4,3.07D4,4.10D4,5.01D4,6.13D4,7.08D4,8.18D4,
     /1.0D5,
     /1.50D5,2.05D5,2.99D5,4.10D5,5.01D5,6.13D5,7.08D5,8.18D5,1.00D6,
     /1.26D6,
     /1.50D6,2.05D6,3.07D6,4.10D6,5.01D6,6.13D6,7.08D6,8.18D6,1.00D7,
     /1.26D7,
     /1.50D7,2.05D7,3.07D7,4.10D7,5.01D7,6.13D7,7.08D7,8.18D7,1.00D8,
     /1.26D8,
     /1.50D8,2.05D8,3.07D8,4.10D8,5.01D8,6.13D8,7.08D8,8.18D8,1.00D9/
      DATA YKSHF/0.00,3.39D-5,6.77D-5,1.00D-4,1.32D-4,1.63D-4,1.92D-4,
     /2.21D-4,2.48D-4,2.75D-4,
     /3.00D-4,3.25D-4,3.71D-4,4.33D-4,4.87D-4,5.34D-4,5.96D-4,6.32D-4,
     /6.57D-4,6.69D-4,
     /6.77D-4,6.79D-4,6.68D-4,6.33D-4,5.97D-4,5.62D-4,5.25D-4,4.80D-4,
     /3.93D-4,3.41D-4,
     /3.04D-4,2.45D-4,2.13D-4,1.85D-4,1.51D-4,1.31D-4,1.14D-4,1.04D-4,
     /9.46D-5,8.32D-5,
     /6.58D-5,5.60D-5,4.80D-5,4.35D-5,4.15D-5,4.00D-5,3.93D-5,3.89D-5,
     /3.85D-5,3.86D-5,
     /3.89D-5,3.98D-5,4.17D-5,4.33D-5,4.45D-5,4.58D-5,4.68D-5,4.78D-5,
     /4.92D-5,5.09D-5,
     /5.21D-5,5.45D-5,5.75D-5,5.96D-5,6.12D-5,6.27D-5,6.38D-5,6.49D-5,
     /6.64D-5,6.82D-5,
     /6.95D-5,7.19D-5,7.50D-5,7.72D-5,7.88D-5,8.03D-5,8.14D-5,8.25D-5,
     /8.40D-5/
# ATTACHMENT              
      DATA XATT/4.00,4.10,5.00,6.00,7.00,8.00,9.00,10.0,11.0,           
     /12.0,100./                                                        
      DATA YATT/.0,.00001,.00087,.0062,.0125,.0134,.0047,.0009,.0004,   
     /.00001,.0000001/                                                  
#
#  NEUTRAL DISSOCIATION 
#      DIPOLE NEUTRAL DISSOCIATION GIVEN ANALYTICALLY
#      NON-DIPOLE  NEUTRAL DISSOCIATION :  
      DATA XTR1/11.5,12.5,14.0,15.0,16.0,17.0,19.0,21.0,24.0,27.0,
     /31.0,34.0/
      DATA YTR1/0.00,.005,.017,.026,.029,.031,.035,.035,.031,.026,
     /.019,.015/
      DATA XTR2/12.5,14.0,15.0,16.0,17.0,19.0,21.0,24.0,27.0,31.0,
     /34.0/
      DATA YTR2/0.00,.030,.056,.064,.068,.075,.077,.068,.057,.042,
     /.033/
      DATA XTR3/14.0,15.0,16.0,17.0,19.0,21.0,24.0,27.0,31.0,34.0,
     /39.0/
      DATA YTR3/0.00,.087,.180,.210,.237,.250,.250,.237,.187,.145,
     /.107/
# BREMSTRAHLUNG X-SECTION WITH CUT OFF      
      DATA Z6T/298.,178.,85.2,47.5,26.3,12.2,7.06,4.45,3.06,2.82,
     /2.89,2.99,3.08,3.13,3.18,3.25,3.31,3.39,3.44,3.49,
     /3.52,3.54,3.55,3.57,3.57/
      DATA Z9T/573.,358.,179.,101.6,57.3,26.5,15.4,9.63,6.52,5.92,
     /6.01,6.18,6.35,6.43,6.52,6.65,6.75,6.87,6.95,7.02,
     /7.07,7.10,7.12,7.13,7.14/
      DATA EBRM/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,
     /2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,
     /4.E7,5.E7,6.E7,8.E7,1.E8/
# ----------------------------------------------------------------------
# 2015: UPDATE INCLUDES NEW OSCILATOR STRENGTH TO EXCITATIONS WHICH
#       ARE ALL DISSOCIATIVE. INTRODUCED ALL DISSOCIATIVE IONISATION 
#       CHANNELS FROM THE 3 GROUPS:  LINDSAY , NISHIMURA AND BONHAM
#       USED WEIGHTED AVERAGE TO GET CONSISTENT COUNTING AND GROSS 
#       IONISATIONS.
# 
# 2012: UPDATE INCLUDES CARBON AND FLUORINE K-SHELL IONISATION X-SECS.     
#   NEW ANALYSIS UPDATED TO MARCH  2008
#   ALLOWS SUPERELASTIC SCATTERING TO V2,V4,V1 AND V3 VIBRATIONAL LEVELS
#   BORN ANGULAR DISTRIBUTION FOR  V4 AND V3 VIBRATIONAL LEVELS
#   INCLUDED NEW IONISATION X-SECTIONS BY NISHIMURA AND READJUSTED
#   DISSOCIATION X-SECTION TO FIT TOWNS# end MEASUREMENTS.
#   ELASTIC X-SECTION BELOW 0.6 EV ASSUMED ISOTROPIC SINCE NO ACCURATE 
#   DATA EXIST ON ELASTIC SCATTERING AT THE RAMSAUER MINIMUM.
#   THE ELASTIC X-SECTION BETWEEN 0.0 AND 0.6 EV IS NOT SENSITIVE
#   ENOUGH TO DRIFT AND DIFFUSION TO ACCURATELY PREDICT THE 
#   POSITION OF THE RAMSAUER MINIMUM. THE ABSOLUTE VALUE OF THE ELASTIC
#   X-SECTION BELOW THE RAMSAUER MINIMUM ( LESS THAN 0.18 EV) SEEMS TO 
#   BE LOWER THAN PREDICTIONS BY MANN AND LINDER OR FIELD ET AL.  
#    THE TEMPERATURE DEP# endENCE OF THE LOW FIELD MOBILITY CF GEE AND 
#   FREEMAN WHICH IS REPRODUCED BY THIS X-SECTION SET SEEMS ALSO TO 
#   EXCLUDE HIGHER ELASTIC X-SECTIONS IN THE REGION BETWEEN 0.02 AND 
#   0.1 EV.
#   THE DATA BASE NOW FITS NAKAMURAS DRIFT VELOCITY IN CF4 AND CF4 ARGON
#   MIXTURES TO WITHIN EXPERIMENTAL ERRORS . NAKAMURAS DATA IS MUCH MORE 
#   ACCURATE THAN HUNTERS DATA SO WE REJECT HUNTERS DATA IN THE NEW 
#   ANALYSIS.
#   THE TOWNS# end IONISATION AND ATTACHMENT RATES AGREE WELL WITH THE 
#   PUBLISHED DATA .
# ---------------------------------------------------------------
      IF(NANISO == 0):
 :
       NAME=' CF4 ISOTROPIC     2015  '
      else:
       NAME=' CF4 ANISOTROPIC   2015  '
      # endIF 
#--------------------------------------------------------------------
#      
      EMASS2=1021997.804
      API=DACOS(-1.00)
      A0=0.52917720859D-8
      RY=13.60569193
      BBCONST=16.0*API*A0*A0*RY*RY/EMASS2
#
# BORN BETHE VALUES FOR IONISATION
      CONST=1.873884D-20
      AM2=9.50
      C=100.9
#
      NCF3=37
      NCF2=31
      NCF1=28
      NCF32=25
      NCF0=27
      NC0F=27
      NCF22=25
      NCF=22
      NCFF=24
      NCF2F=25
      NCF3F=26
#
      NION=12
      NATT=1
      NIN=46
      NNULL=0  
#
# ARRAY SIZE
      NASIZE=4000
#
      NBREM=25
      DO 3 J=1,NIN  
      IZBR(J)=0
    3 CONTINUE     
      IZBR(47)=6
      IZBR(48)=9
c
      DO 1 J=1,6
    1 KEL(J)=NANISO
# ASSUME CAPITELLI LONGO TYPE OF ANGULAR DISTRIBUTION FOR 
#  ALL VIBRATIONAL LEVELS AND THE SUM OF HIGHER HARMONICS 
      DO 2 J=1,10
    2 KIN(J)=1
# ANGULAR DISTRIBUTION FOR DISS.EXCITATION IS GIVEN BY OKHRIMOVSKKY
      DO 4 J=11,NIN
    4 KIN(J)=NANISO  
# RATIO OF MOMENTUM TRANSFER TO TOTAL X-SEC FOR RESONANCE
# PART OF VIBRATIONAL X-SECTIONS
      RAT=0.75
#
      NDATA=163                                                       
      NVBV4=11                                
      NVBV1=11                                                          
      NVBV3=11                                                          
      NVIB5=12                                                          
      NVIB6=12
      NATT1=11                                                        
      NTR1=12
      NTR2=11
      NTR3=11
      NKSHC=81
      NKSHF=79
#                                                          
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(88.0043*AMU)                                      
      E(3)=15.90
      E(4)=0.0
      E(5)=0.0                    
      E(6)=0.0
#
      EION(1)=15.7
      EION(2)=21.47
      EION(3)=29.14
      EION(4)=34.5
      EION(5)=34.77
      EION(6)=36.0
      EION(7)=40.0
      EION(8)=41.0
      EION(9)=43.0
      EION(10)=63.0 
      EION(11)=285.0
      EION(12)=685.4
#  OPAL BEATY IONISATION ENERGY SPLITTING 
      DO 6 J=1,10
    6 EOBY(J)=0.58*EION(J) 
# OPAL BEATY SPLITTING FACTOR FOR SHELLS
      EOBY(11)=210.0    
      EOBY(12)=510.0    
      DO 28 J=1,10
      LEGAS(J)=0  
   28 ISHELL(J)=0   
      LEGAS(11)=1   
      LEGAS(12)=2  
      ISHELL(11)=1 
      ISHELL(12)=1 
# SINGLE IONISATION DATA
      DO 30 J=1,5
      NC0(J)=0
      EC0(J)=0.0
      WKLM(J)=0.0
      EFL(J)=0.0
      NG1(J)=0
      EG1(J)=0.0
      NG2(J)=0
   30 EG2(J)=0.0
# DOUBLE IONISATION DATA
      DO 31 J=6,10
      NC0(J)=1.0
      EC0(J)=1.0
      WKLM(J)=0.0
      EFL(J)=0.0
      NG1(J)=0
      EG1(J)=0.0
      NG2(J)=0
   31 EG2(J)=0.0
# K SHELL DATA INCLUDING FLUORESCENCE
      NC0(11)=2
      EC0(11)=253.0
      WKLM(11)=0.0026
      EFL(11)=273.0
      NG1(11)=1
      EG1(11)=253.0
      NG2(11)=1
      EG2(11)=5.0
      NC0(12)=3
      EC0(12)=625.2
      WKLM(12)=0.010
      EFL(12)=668.
      NG1(12)=2
      EG1(12)=625.2
      NG2(12)=1
      EG2(12)=5.0
#
      DO 776 J=1,NION
      DO 777 I=1,NASIZE
      IF(EG(I):
 > EION(J)) :
       IOFFION(J)=I-1
       GO TO 776
      # endIF
  777 CONTINUE
  776 CONTINUE
#
      EIN(1)=-0.0539
      EIN(2)=0.0539
      EIN(3)=-0.0783                                                    
      EIN(4)=0.0783 
      EIN(5)=-0.1126                                                    
      EIN(6)=0.1126
      EIN(7)=-0.1588
      EIN(8)=0.1588                                                     
      EIN(9)=0.3176                                                     
      EIN(10)=0.4764
      EIN(11)=11.5
      EIN(12)=11.63
      EIN(13)=11.88
      EIN(14)=12.13
      EIN(15)=12.38
      EIN(16)=12.50
      EIN(17)=12.63
      EIN(18)=12.88
      EIN(19)=13.13
      EIN(20)=13.38
      EIN(21)=13.63
      EIN(22)=13.88
      EIN(23)=14.00
      EIN(24)=14.13
      EIN(25)=14.38
      EIN(26)=14.63
      EIN(27)=14.88
      EIN(28)=15.13
      EIN(29)=15.38
      EIN(30)=15.63
      EIN(31)=15.88
      EIN(32)=16.13
      EIN(33)=16.38
      EIN(34)=16.63
      EIN(35)=16.88
      EIN(36)=17.13
      EIN(37)=17.38
      EIN(38)=17.63
      EIN(39)=17.88
      EIN(40)=18.13
      EIN(41)=18.38
      EIN(42)=18.63
      EIN(43)=18.88
      EIN(44)=19.13
      EIN(45)=19.38
      EIN(46)=19.63
      EIN(47)=0.0
      EIN(48)=0.0
# OFFSET ENERGY FOR DISSOCIATION ANGULAR DISTRIBUTION
      DO 5 NL=11,46
      DO 651 I=1,NASIZE
      IF(EG(I):
 > abs(EIN(NL))) :
       IOFFN(NL)=I-1
       GO TO 5
      # endIF
  651 CONTINUE
    5 CONTINUE
#***********************************************************************
# ENTER PENNING TRANSFER FRACTION FOR EACH LEVEL
# ONLY DISSOCIATION X-SECTION (LEVEL 11) HAS ENOUGH ENERGY TO GIVE 
#  POSSIBLE PENNING TRANSFER
      DO 7 K=1,46
      DO 7 L=1,3
    7 PENFRA[L,K]=0.0  
# PENNING TRANSFER FRACTION FOR LEVEL 11
      PENFRA[1,K]=0.0
# PENNING TRANSFER DISTANCE IN MICRONS
      PENFRA[2,K]=1.0
# PENNING TRANSFER TIME IN PICOSECONDS
      PENFRA[3,K]=1.0
      IF(IPEN == 0):
 GO TO 8 
      IF(PENFRA[1,11] == 0.0):
 GO TO 8
      WRITE(6,999) NAME,EIN(11),PENFRA[1,11],PENFRA[2,11],PENFRA[3,11]
  999 FORMAT(' GAS = ',A15,' ENERGY LEVEL = ',F7.4,' EV.',/,' PENNING PR
     /OBABILITY = ',F5.3,' ABS.LENGTH = ',F7.2,' DECAY TIME = ',F7.1,/)
    8 CONTINUE 
#*********************************************************************** 
      SCRPT(1)='                                                  '
      SCRPT(2)=' ELASTIC  ANISOTROPIC            CF4              '
      IF(NANISO == 0):
 :
       SCRPT(2)=' ELASTIC  ISOTROPIC             CF4              '
      # endIF
      SCRPT(3)=' ION  CF3 +                      ELOSS=   15.70   '
      SCRPT(4)=' ION  CF2 +                      ELOSS=   21.47   '
      SCRPT(5)=' ION  CF +                       ELOSS=   29.14   '
      SCRPT(6)=' ION  F +                        ELOSS=   34.5    '
      SCRPT(7)=' ION  C +                        ELOSS=   34.77   '
      SCRPT(8)=' DOUBLE ION    CF3 + , F +       ELOSS=   36.0    '
      SCRPT(9)=' DOUBLE ION    CF2 + , F +       ELOSS=   40.0    '
      SCRPT(10)=' IONS  CF3 ++ OR CF2 ++          ELOSS=   41.0    '
      SCRPT(11)=' DOUBLE ION    CF +  , F +       ELOSS=   43.0    '
      SCRPT(12)=' DOUBLE ION    C  +  , F +       ELOSS=   63.0    '
      SCRPT(13)=' IONISATION   CARBON K-SHELL     ELOSS=  285.0    '
      SCRPT(14)=' IONISATION FLUORINE K-SHELL     ELOSS=  685.4    '
      SCRPT(15)=' ATTACHMENT                                       '
      SCRPT(16)='                                                  '
      SCRPT(17)='                                                  '
      SCRPT(18)=' VIB  V2           ANISOTROPIC   ELOSS=   -0.0539 '
      SCRPT(19)=' VIB  V2           ANISOTROPIC   ELOSS=    0.0539 '
      SCRPT(20)=' VIB  V4           ANISOTROPIC   ELOSS=   -0.0783 '
      SCRPT(21)=' VIB  V4           ANISOTROPIC   ELOSS=    0.0783 '
      SCRPT(22)=' VIB  V1           ANISOTROPIC   ELOSS=   -0.1126 '
      SCRPT(23)=' VIB  V1           ANISOTROPIC   ELOSS=    0.1126 '
      SCRPT(24)=' VIB  V3           ANISOTROPIC   ELOSS=   -0.1588 '
      SCRPT(25)=' VIB  V3           ANISOTROPIC   ELOSS=    0.1588 '
      SCRPT(26)=' VIB 2V3           ANISOTROPIC   ELOSS=    0.3176 '
      SCRPT(27)=' VIB HARMONIC      ANISOTROPIC   ELOSS=    0.4764 '
      SCRPT(28)=' NEUTRAL DISS      NON-DIPOLE    ELOSS=   11.5    '
      SCRPT(29)=' NEUTRAL DISS DIPOLE F=0.000189  ELOSS=   11.63   '
      SCRPT(30)=' NEUTRAL DISS DIPOLE F=0.001085  ELOSS=   11.88   '
      SCRPT(31)=' NEUTRAL DISS DIPOLE F=0.004807  ELOSS=   12.13   '
      SCRPT(32)=' NEUTRAL DISS DIPOLE F=0.008819  ELOSS=   12.38   '
      SCRPT(33)=' NEUTRAL DISS      NON-DIPOLE    ELOSS=   12.50   '
      SCRPT(34)=' NEUTRAL DISS DIPOLE F=0.008918  ELOSS=   12.63   '
      SCRPT(35)=' NEUTRAL DISS DIPOLE F=0.008420  ELOSS=   12.88   '
      SCRPT(36)=' NEUTRAL DISS DIPOLE F=0.02531   ELOSS=   13.13   '
      SCRPT(37)=' NEUTRAL DISS DIPOLE F=0.09553   ELOSS=   13.38   '
      SCRPT(38)=' NEUTRAL DISS DIPOLE F=0.11193   ELOSS=   13.63   '
      SCRPT(39)=' NEUTRAL DISS DIPOLE F=0.10103   ELOSS=   13.88   '
      SCRPT(40)=' NEUTRAL DISS      NON-DIPOLE    ELOSS=   14.00   '
      SCRPT(41)=' NEUTRAL DISS DIPOLE F=0.06902   ELOSS=   14.13   '
      SCRPT(42)=' NEUTRAL DISS DIPOLE F=0.03968   ELOSS=   14.38   '
      SCRPT(43)=' NEUTRAL DISS DIPOLE F=0.02584   ELOSS=   14.63   '
      SCRPT(44)=' NEUTRAL DISS DIPOLE F=0.02071   ELOSS=   14.88   '
      SCRPT(45)=' NEUTRAL DISS DIPOLE F=0.03122   ELOSS=   15.13   '
      SCRPT(46)=' NEUTRAL DISS DIPOLE F=0.05580   ELOSS=   15.38   '
      SCRPT(47)=' NEUTRAL DISS DIPOLE F=0.10187   ELOSS=   15.63   '
      SCRPT(48)=' NEUTRAL DISS DIPOLE F=0.09427   ELOSS=   15.88   '
      SCRPT(49)=' NEUTRAL DISS DIPOLE F=0.05853   ELOSS=   16.13   '
      SCRPT(50)=' NEUTRAL DISS DIPOLE F=0.06002   ELOSS=   16.38   '
      SCRPT(51)=' NEUTRAL DISS DIPOLE F=0.05647   ELOSS=   16.63   '
      SCRPT(52)=' NEUTRAL DISS DIPOLE F=0.04885   ELOSS=   16.88   '
      SCRPT(53)=' NEUTRAL DISS DIPOLE F=0.04036   ELOSS=   17.13   '
      SCRPT(54)=' NEUTRAL DISS DIPOLE F=0.03298   ELOSS=   17.38   '
      SCRPT(55)=' NEUTRAL DISS DIPOLE F=0.02593   ELOSS=   17.63   '
      SCRPT(56)=' NEUTRAL DISS DIPOLE F=0.01802   ELOSS=   17.88   '
      SCRPT(57)=' NEUTRAL DISS DIPOLE F=0.01287   ELOSS=   18.13   '
      SCRPT(58)=' NEUTRAL DISS DIPOLE F=0.00830   ELOSS=   18.38   '
      SCRPT(59)=' NEUTRAL DISS DIPOLE F=0.00698   ELOSS=   18.63   '
      SCRPT(60)=' NEUTRAL DISS DIPOLE F=0.00581   ELOSS=   18.88   '
      SCRPT(61)=' NEUTRAL DISS DIPOLE F=0.00502   ELOSS=   19.13   '
      SCRPT(62)=' NEUTRAL DISS DIPOLE F=0.00398   ELOSS=   19.38   '
      SCRPT(63)=' NEUTRAL DISS DIPOLE F=0.00189   ELOSS=   19.63   '
      SCRPT(64)=' BREMSSTRAHLUNG FROM CARBON ATOM                  '
      SCRPT(65)=' BREMSSTRAHLUNG FROM FLUORINE ATOMS               '
#  VIBRATIONAL DEGENERACY
      DEGV4=3.0
      DEGV3=3.0
      DEGV2=2.0
      DEGV1=1.0  
# CALC VIB LEVEL POPULATIONS
      APOPV2=DEGV2*math.exp(EIN(1)/AKT)
      APOPV4=DEGV4*math.exp(EIN(3)/AKT)
      APOPV1=DEGV1*math.exp(EIN(5)/AKT)
      APOPV3=DEGV3*math.exp(EIN(7)/AKT)
      APOPGS=1.0
      APOPSUM=APOPGS+APOPV2+APOPV4+APOPV1+APOPV3
      APOPGS=1.0/APOPSUM
      APOPV2=APOPV2/APOPSUM
      APOPV4=APOPV4/APOPSUM
      APOPV1=APOPV1/APOPSUM
      APOPV3=APOPV3/APOPSUM
# RENORMALISE GROUND STATE TO ALLOW FOR EXCITATION X-SEC FROM
# EXCITED VIBRATIONAL STATES (EXACT APPROX IF THE HOT TRANSITIONS HAVE
# EQUAL X-SEC TO THE GROUND STATE TRANSITIONS)
# 
      APOPGS=1.0
#
#     EN=-ESTEP/2.0                                      
      DO 9000 I=1,NSTEP   
      EN=EG(I)                              
#     EN=EN+ESTEP                                
      GAMMA1=(EMASS2+2.00*EN)/EMASS2
      GAMMA2=GAMMA1*GAMMA1
      BETA=math.sqrt(1.00-1.00/GAMMA2)
      BETA2=BETA*BETA
#                       
      DO 10 J=2,NDATA                                                   
      IF(EN <= XEN(J):
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA                                                           
   20 A=(YELM(J)-YELM(J-1))/(XEN(J)-XEN(J-1))                         
      B=(XEN(J-1)*YELM(J)-XEN(J)*YELM(J-1))/(XEN(J-1)-XEN(J)) 
      QMOM=(A*EN+B)*1.D-16  
      A=(YELT(J)-YELT(J-1))/(XEN(J)-XEN(J-1))                         
      B=(XEN(J-1)*YELT(J)-XEN(J)*YELT(J-1))/(XEN(J-1)-XEN(J)) 
      QELA=(A*EN+B)*1.D-16
      A=(YEPS(J)-YEPS(J-1))/(XEN(J)-XEN(J-1))
      B=(XEN(J-1)*YEPS(J)-XEN(J)*YEPS(J-1))/(XEN(J-1)-XEN(J))
      PQ2=(A*EN+B)
# EPS CORRECTED FOR 1-EPS
      PQ2=1.0-PQ2
      PQ1=0.5+(QELA-QMOM)/QELA
      IF(NANISO == 0):
 PEQEL(2,I)=0.5
      IF(NANISO == 1):
 PEQEL(2,I)=PQ1
      IF(NANISO == 2):
 PEQEL(2,I)=PQ2
      Q(2,I)=QELA
      IF(NANISO == 0):
 Q(2,I)=QMOM
#  DISSOCIATIVE IONISATION
#  ION  =  CF3 +
      QION(1,I)=0.0
      PEQION(1,I)=0.5
      IF(NANISO == 2):
 PEQION(1,I)=0.0                             
      IF(EN <= EION(1):
) GO TO 45
      IF(EN > XCF3(NCF3):
) GO TO 43                                
      DO 41 J=2,NCF3                                                  
      IF(EN <= XCF3(J):
) GO TO 42                                       
   41 CONTINUE                                                          
      J=NCF3                                                           
   42 A=(YCF3(J)-YCF3(J-1))/(XCF3(J)-XCF3(J-1))                         
      B=(XCF3(J-1)*YCF3(J)-XCF3(J)*YCF3(J-1))/(XCF3(J-1)-XCF3(J))       
      QION(1,I)=(A*EN+B)*1.D-16
      GO TO 44
# USE BORN BETHE X-SECTION ABOVE XCF3(NCF3) EV
   43 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(1,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.7344
   44 CONTINUE
      IF(EN <= (2.0*EION(1):
)) GO TO 45
      PEQION(1,I)=PEQEL(2,(I-IOFFION(1)))     
#  ION = CF2 +
   45 QION(2,I)=0.0
      PEQION(2,I)=0.5
      IF(NANISO == 2):
 PEQION(2,I)=0.0                             
      IF(EN <= EION(2):
) GO TO 50
      IF(EN > XCF2(NCF2):
) GO TO 48                                
      DO 46 J=2,NCF2                                                  
      IF(EN <= XCF2(J):
) GO TO 47                                       
   46 CONTINUE                                                          
      J=NCF2                                                           
   47 A=(YCF2(J)-YCF2(J-1))/(XCF2(J)-XCF2(J-1))                         
      B=(XCF2(J-1)*YCF2(J)-XCF2(J)*YCF2(J-1))/(XCF2(J-1)-XCF2(J))       
      QION(2,I)=(A*EN+B)*1.D-16
      GO TO 49
# USE BORN BETHE X-SECTION ABOVE XCF2(NCF2) EV
   48 QION(2,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.0534
   49 CONTINUE
      IF(EN <= (2.0*EION(2):
)) GO TO 50
      PEQION(2,I)=PEQEL(2,(I-IOFFION(2)))     
#  ION = CF +
   50 QION(3,I)=0.0
      PEQION(3,I)=0.5
      IF(NANISO == 2):
 PEQION(3,I)=0.0                             
      IF(EN <= EION(3):
) GO TO 55
      IF(EN > XCF1(NCF1):
) GO TO 53                                
      DO 51 J=2,NCF1                                                  
      IF(EN <= XCF1(J):
) GO TO 52                                       
   51 CONTINUE                                                          
      J=NCF1                                                           
   52 A=(YCF1(J)-YCF1(J-1))/(XCF1(J)-XCF1(J-1))                         
      B=(XCF1(J-1)*YCF1(J)-XCF1(J)*YCF1(J-1))/(XCF1(J-1)-XCF1(J))       
      QION(3,I)=(A*EN+B)*1.D-16
      GO TO 54
# USE BORN BETHE X-SECTION ABOVE XCF1(NCF1) EV
   53 QION(3,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.0386
   54 CONTINUE
      IF(EN <= (2.0*EION(3):
)) GO TO 55
      PEQION(3,I)=PEQEL(2,(I-IOFFION(3)))     
#  ION = F +
   55 QION(4,I)=0.0
      PEQION(4,I)=0.5
      IF(NANISO == 2):
 PEQION(4,I)=0.0                             
      IF(EN <= EION(4):
) GO TO 60
      IF(EN > XC0F(NC0F):
) GO TO 58                                
      DO 56 J=2,NC0F                                                  
      IF(EN <= XC0F(J):
) GO TO 57                                       
   56 CONTINUE                                                          
      J=NC0F                                                           
   57 A=(YC0F(J)-YC0F(J-1))/(XC0F(J)-XC0F(J-1))                         
      B=(XC0F(J-1)*YC0F(J)-XC0F(J)*YC0F(J-1))/(XC0F(J-1)-XC0F(J))       
      QION(4,I)=(A*EN+B)*1.D-16
      GO TO 59
# USE BORN BETHE X-SECTION ABOVE XC0F(NC0F) EV
   58 QION(4,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.0799
   59 CONTINUE
      IF(EN <= (2.0*EION(4):
)) GO TO 60
      PEQION(4,I)=PEQEL(2,(I-IOFFION(4)))     
#  ION = C +
   60 QION(5,I)=0.0
      PEQION(5,I)=0.5
      IF(NANISO == 2):
 PEQION(5,I)=0.0                             
      IF(EN <= EION(5):
) GO TO 65
      IF(EN > XCF0(NCF0):
) GO TO 63                                
      DO 61 J=2,NCF0                                                  
      IF(EN <= XCF0(J):
) GO TO 62                                       
   61 CONTINUE                                                          
      J=NCF0                                                           
   62 A=(YCF0(J)-YCF0(J-1))/(XCF0(J)-XCF0(J-1))                         
      B=(XCF0(J-1)*YCF0(J)-XCF0(J)*YCF0(J-1))/(XCF0(J-1)-XCF0(J))       
      QION(5,I)=(A*EN+B)*1.D-16
      GO TO 64
# USE BORN BETHE X-SECTION ABOVE XCF0(NCF0) EV
   63 QION(5,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.0422
   64 CONTINUE
      IF(EN <= (2.0*EION(5):
)) GO TO 65
      PEQION(5,I)=PEQEL(2,(I-IOFFION(5)))     
#  DOUBLE IONS  CF3 +  AND F +
   65 QION(6,I)=0.0
      PEQION(6,I)=0.5
      IF(NANISO == 2):
 PEQION(6,I)=0.0                             
      IF(EN <= EION(6):
) GO TO 70 
      IF(EN > XCF3F(NCF3F):
) GO TO 68                               
      DO 66 J=2,NCF3F                                                
      IF(EN <= XCF3F(J):
) GO TO 67                                    
   66 CONTINUE                                                          
      J=NCF3F                                                        
   67 A=(YCF3F(J)-YCF3F(J-1))/(XCF3F(J)-XCF3F(J-1))                     
      B=(XCF3F(J-1)*YCF3F(J)-XCF3F(J)*YCF3F(J-1))/(XCF3F(J-1)-XCF3F(J))
      QION(6,I)=(A*EN+B)*1.D-16
      GO TO 69
# USE BORN BETHE X-SECTION ABOVE XCF3F(NCF3F) EV
   68 QION(6,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.0058
   69 CONTINUE
      IF(EN <= (2.0*EION(6):
)) GO TO 70
      PEQION(6,I)=PEQEL(2,(I-IOFFION(6)))     
#  DOUBLE IONS  CF2 +  AND F +
   70 QION(7,I)=0.0
      PEQION(7,I)=0.5
      IF(NANISO == 2):
 PEQION(7,I)=0.0                             
      IF(EN <= EION(7):
) GO TO 75 
      IF(EN > XCF2F(NCF2F):
) GO TO 73                               
      DO 71 J=2,NCF2F                                                
      IF(EN <= XCF2F(J):
) GO TO 72                                    
   71 CONTINUE                                                          
      J=NCF2F                                                        
   72 A=(YCF2F(J)-YCF2F(J-1))/(XCF2F(J)-XCF2F(J-1))                     
      B=(XCF2F(J-1)*YCF2F(J)-XCF2F(J)*YCF2F(J-1))/(XCF2F(J-1)-XCF2F(J))
      QION(7,I)=(A*EN+B)*1.D-16
      GO TO 74
# USE BORN BETHE X-SECTION ABOVE XCF2F(NCF2F) EV
   73 QION(7,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.0073
   74 CONTINUE
      IF(EN <= (2.0*EION(7):
)) GO TO 75
      PEQION(7,I)=PEQEL(2,(I-IOFFION(7)))     
#  DOUBLE CHARGED ION  CF3 ++
   75 QION(8,I)=0.0
      PEQION(8,I)=0.5
      IF(NANISO == 2):
 PEQION(8,I)=0.0                             
      IF(EN <= EION(8):
) GO TO 80 
      IF(EN > XCF32(NCF32):
) GO TO 78                               
      DO 76 J=2,NCF32                                                
      IF(EN <= XCF32(J):
) GO TO 77                                    
   76 CONTINUE                                                          
      J=NCF32                                                        
   77 A=(YCF32(J)-YCF32(J-1))/(XCF32(J)-XCF32(J-1))                     
      B=(XCF32(J-1)*YCF32(J)-XCF32(J)*YCF32(J-1))/(XCF32(J-1)-XCF32(J))
      QION(8,I)=(A*EN+B)*1.D-16
      GO TO 79
# USE BORN BETHE X-SECTION ABOVE XCF32(NCF32) EV
   78 QION(8,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.0031
   79 CONTINUE
      IF(EN <= (2.0*EION(8):
)) GO TO 80
      PEQION(8,I)=PEQEL(2,(I-IOFFION(8)))     
#  DOUBLE CHARGED ION  CF2 ++
#
#  ADD INTO CF3 ++
#                            
   80 IF(EN <= XCF22(1)) GO TO 85 
      IF(EN > XCF22(NCF22):
) GO TO 83                               
      DO 81 J=2,NCF22                                                
      IF(EN <= XCF22(J):
) GO TO 82                                    
   81 CONTINUE                                                          
      J=NCF22                                                        
   82 A=(YCF22(J)-YCF22(J-1))/(XCF22(J)-XCF22(J-1))                     
      B=(XCF22(J-1)*YCF22(J)-XCF22(J)*YCF22(J-1))/(XCF22(J-1)-XCF22(J))
      QION(8,I)=QION(8,I)+(A*EN+B)*1.D-16
      GO TO 85
# USE BORN BETHE X-SECTION ABOVE XCF22(NCF22) EV
   83 QION(8,I)=QION(8,I)+CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.0077  
#  DOUBLE IONS    CF +  AND F +
   85 QION(9,I)=0.0
      PEQION(9,I)=0.5
      IF(NANISO == 2):
 PEQION(9,I)=0.0                             
      IF(EN <= EION(9):
) GO TO 90 
      IF(EN > XCFF(NCFF):
) GO TO 88                               
      DO 86 J=2,NCFF                                                
      IF(EN <= XCFF(J):
) GO TO 87                                    
   86 CONTINUE                                                          
      J=NCFF                                                       
   87 A=(YCFF(J)-YCFF(J-1))/(XCFF(J)-XCFF(J-1))                     
      B=(XCFF(J-1)*YCFF(J)-XCFF(J)*YCFF(J-1))/(XCFF(J-1)-XCFF(J))
      QION(9,I)=(A*EN+B)*1.D-16
      GO TO 89
# USE BORN BETHE X-SECTION ABOVE XCFF(NCFF) EV
   88 QION(9,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.0189
   89 CONTINUE
      IF(EN <= (2.0*EION(9):
)) GO TO 90
      PEQION(9,I)=PEQEL(2,(I-IOFFION(9)))     
#  DOUBLE IONS    C +  AND F +
   90 QION(10,I)=0.0
      PEQION(10,I)=0.5
      IF(NANISO == 2):
 PEQION(10,I)=0.0                             
      IF(EN <= EION(10):
) GO TO 95 
      IF(EN > XCF(NCF):
) GO TO 93                               
      DO 91 J=2,NCF                                                
      IF(EN <= XCF(J):
) GO TO 92                                    
   91 CONTINUE                                                          
      J=NCF                                                       
   92 A=(YCF(J)-YCF(J-1))/(XCF(J)-XCF(J-1))                     
      B=(XCF(J-1)*YCF(J)-XCF(J)*YCF(J-1))/(XCF(J-1)-XCF(J))
      QION(10,I)=(A*EN+B)*1.D-16
      GO TO 94
# USE BORN BETHE X-SECTION ABOVE XCF(NCF) EV
   93 QION(10,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.0087
   94 CONTINUE
      IF(EN <= (2.0*EION(10):
)) GO TO 95
      PEQION(10,I)=PEQEL(2,(I-IOFFION(10)))     
# CARBON K-SHELL IONISATION
   95 QION(11,I)=0.0
      PEQION(11,I)=0.5
      IF(NANISO == 2):
 PEQION(11,I)=0.0                             
      IF(EN <= EION(11):
) GO TO 135
      DO 130 J=2,NKSHC                                                  
      IF(EN <= XKSHC(J):
) GO TO 131                                      
  130 CONTINUE                                                          
      J=NKSHC                                                           
  131 A=(YKSHC(J)-YKSHC(J-1))/(XKSHC(J)-XKSHC(J-1))                  
      B=(XKSHC(J-1)*YKSHC(J)-XKSHC(J)*YKSHC(J-1))/(XKSHC(J-1)-XKSHC(J))
      QION(11,I)=(A*EN+B)*1.D-16
      IF(EN <= (2.0*EION(11):
)) GO TO 135
      PEQION(11,I)=PEQEL(2,(I-IOFFION(11)))  
# FLUORINE K-SHELL IONISATION                          
  135 QION(12,I)=0.0
      PEQION(12,I)=0.5
      IF(NANISO == 2):
 PEQION(12,I)=0.0                             
      IF(EN <= EION(12):
) GO TO 145
      DO 140 J=2,NKSHF                                                  
      IF(EN <= XKSHF(J):
) GO TO 141                                      
  140 CONTINUE                                                          
      J=NKSHF                                                           
  141 A=(YKSHF(J)-YKSHF(J-1))/(XKSHF(J)-XKSHF(J-1))                  
      B=(XKSHF(J-1)*YKSHF(J)-XKSHF(J)*YKSHF(J-1))/(XKSHF(J-1)-XKSHF(J))
# FACTOR OF 4 FROM NUMBER OF FLUORINE ATOMS IN MOLECULE
      QION(12,I)=4.0*(A*EN+B)*1.D-16
      IF(EN <= (2.0*EION(12):
)) GO TO 145
      PEQION(12,I)=PEQEL(2,(I-IOFFION(12)))
#    
# ATTACHMENT                                   
  145 Q(4,I)=0.0                                                        
      IF(EN <= XATT(1):
) GO TO 250                                       
      IF(EN > XATT(NATT1):
) GO TO 250                                   
      DO 210 J=2,NATT1                                                 
      IF(EN <= XATT(J):
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NATT1                                                           
  220 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))                         
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))       
      Q(4,I)=(A*EN+B)*1.D-16  
      QATT(1,I)=Q(4,I)
#                                           
  250 Q(5,I)=0.0                                                        
      Q(6,I)=0.0
# SCALE FACTOR FOR VIBRATIONAL DIPOLE V3 ABOVE 0.4EV
      VDSC=1.0
      IF(EN > 0.4):
 :
       EPR=EN
       IF(EN > 5.0):
 EPR=5.0
       VDSC=(14.4-EPR)/14.0
      # endIF 
#           
# SUPERELASTIC OF VIBRATION V2 ISOTROPIC  BELOW 100EV                             
#
      QIN(1,I)=0.0 
      PEQIN(1,I)=0.5
      IF(EN <= 0.0):
 GO TO 350
      EFAC=math.sqrt(1.0-(EIN(1)/EN))
      QIN(1,I)=0.007*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      QIN(1,I)=QIN(1,I)*APOPV2*1.D-16/DEGV2
      IF(EN > 100.0):
 PEQIN(1,I)=PQ1
  350 CONTINUE
# VIBRATION V2 ISOTROPIC BELOW 100EV
      QIN(2,I)=0.0
      PEQIN(2,I)=0.5                                                   
      IF(EN <= EIN(2):
) GO TO 400                                        
      EFAC=math.sqrt(1.0-(EIN(2)/EN))
      QIN(2,I)=0.007*math.log((1.0+EFAC)/(1.0-EFAC))/EN    
      QIN(2,I)=QIN(2,I)*APOPGS*1.D-16
      IF(EN > 100.0):
 PEQIN(2,I)=PQ1
  400 CONTINUE                                                          
#           
# SUPERELASTIC OF VIBRATION V4 ISOTROPIC BELOW 100EV                              
#
      QIN(3,I)=0.0
      PEQIN(3,I)=0.5
      IF(EN <= 0.0):
 GO TO 450
      IF((EN-EIN(3):
) > XVBV4(NVBV4)) GO TO 424
      DO 410 J=2,NVBV4
      IF((EN-EIN(3):
) <= XVBV4(J)) GO TO 420
  410 CONTINUE
      J=NVBV4
  420 A=(YVBV4(J)-YVBV4(J-1))/(XVBV4(J)-XVBV4(J-1))
      B=(XVBV4(J-1)*YVBV4(J)-XVBV4(J)*YVBV4(J-1))/(XVBV4(J-1)-XVBV4(J))
      QIN(3,I)=(EN-EIN(3))*(A*(EN-EIN(3))+B)/EN
      GO TO 425
  424 QIN(3,I)=YVBV4(NVBV4)*(XVBV4(NVBV4)/(EN*(EN-EIN(3)))**2)
  425 CONTINUE
      EFAC=math.sqrt(1.0-(EIN(3)/EN))
      QIN(3,I)=QIN(3,I)+0.0500*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      QIN(3,I)=QIN(3,I)*APOPV4*1.D-16/DEGV4
      IF(EN > 100.0):
 PEQIN(3,I)=PQ1
  450 CONTINUE
# VIBRATION V4 ANISOTROPIC
      QIN(4,I)=0.0
      PEQIN(4,I)=0.5                                                   
      IF(EN <= EIN(4):
) GO TO 500
      IF(EN > XVBV4(NVBV4):
) GO TO 474                                
      DO 460 J=2,NVBV4                                                 
      IF(EN <= XVBV4(J):
) GO TO 470                                      
  460 CONTINUE                                                          
      J=NVBV4                                                          
  470 A=(YVBV4(J)-YVBV4(J-1))/(XVBV4(J)-XVBV4(J-1))                     
      B=(XVBV4(J-1)*YVBV4(J)-XVBV4(J)*YVBV4(J-1))/(XVBV4(J-1)-XVBV4(J))
      QIN(4,I)=A*EN+B
      GO TO 475
  474 QIN(4,I)=YVBV4(NVBV4)*(XVBV4(NVBV4)/EN)**3
  475 CONTINUE 
      EFAC=math.sqrt(1.0-(EIN(4)/EN))
      ADIP=0.0500*math.log((1.0+EFAC)/(1.0-EFAC))/EN    
      ELF=EN-EIN(4)
      FWD=math.log((EN+ELF)/(EN+ELF-2.0*math.sqrt(EN*ELF)))
      BCK=math.log((EN+ELF+2.0*math.sqrt(EN*ELF))/(EN+ELF))
# RATIO OF MT TO TOTAL X-SECT FOR RESONANCE PART = RAT
      XMT=((1.5-FWD/(FWD+BCK))*ADIP+RAT*QIN(4,I))*APOPGS*1.D-16
      QIN(4,I)=(QIN(4,I)+ADIP)*APOPGS*1.D-16
      IF(EN <= 100.0):
 PEQIN(4,I)=0.5+(QIN(4,I)-XMT)/QIN(4,I)
      IF(EN > 100.0):
 PEQIN(4,I)=PQ1
  500 CONTINUE                                                          
# SUPERELASTIC OF VIBRATION V1 ISOTROPIC BELOW 100EV
      QIN(5,I)=0.0
      PEQIN(5,I)=0.5                                                  
      IF(EN <= 0.0):
 GO TO 550
      IF((EN-EIN(5):
) > XVBV1(NVBV1)) GO TO 524                         
      DO 510 J=2,NVBV1                                                 
      IF((EN-EIN(5):
) <= XVBV1(J)) GO TO 520                             
  510 CONTINUE                                                          
      J=NVBV1                                                          
  520 A=(YVBV1(J)-YVBV1(J-1))/(XVBV1(J)-XVBV1(J-1))                     
      B=(XVBV1(J-1)*YVBV1(J)-XVBV1(J)*YVBV1(J-1))/(XVBV1(J-1)-XVBV1(J))
      QIN(5,I)=(EN-EIN(5))*(A*(EN-EIN(5))+B)/EN
      GO TO 525
  524 QIN(5,I)=YVBV1(NVBV1)*(XVBV1(NVBV1)/(EN*(EN-EIN(5)))**2)
  525 CONTINUE 
      EFAC=math.sqrt(1.0-(EIN(5)/EN))
      QIN(5,I)=QIN(5,I)+0.0224*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      QIN(5,I)=QIN(5,I)*APOPV1*1.D-16/DEGV1  
      IF(EN > 100.0):
 PEQIN(5,I)=PQ1
  550 CONTINUE                                                          
#  VIBRATION V1  ISOTROPIC BELOW 100EV
      QIN(6,I)=0.0        
      PEQIN(6,I)=0.5                          
      IF(EN <= EIN(6):
) GO TO 600   
      IF(EN > XVBV1(NVBV1):
) GO TO 574                                
      DO 560 J=2,NVBV1                                                 
      IF(EN <= XVBV1(J):
) GO TO 570                                      
  560 CONTINUE                                                          
      J=NVBV1                                                          
  570 A=(YVBV1(J)-YVBV1(J-1))/(XVBV1(J)-XVBV1(J-1))                     
      B=(XVBV1(J-1)*YVBV1(J)-XVBV1(J)*YVBV1(J-1))/(XVBV1(J-1)-XVBV1(J)) 
      QIN(6,I)=A*EN+B
      GO TO 575
  574 QIN(6,I)=YVBV1(NVBV1)*(XVBV1(NVBV1)/EN)**3
  575 CONTINUE
      EFAC=math.sqrt(1.0-(EIN(6)/EN))
      QIN(6,I)=QIN(6,I)+0.0224*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      QIN(6,I)=QIN(6,I)*APOPGS*1.D-16
      IF(EN > 100.0):
 PEQIN(6,I)=PQ1
  600 CONTINUE
# SUPERELASTIC OF VIBRATION V3 ISOTROPIC BELOW 100EV
      QIN(7,I)=0.0
      PEQIN(7,I)=0.5
      IF(EN <= 0.0):
 GO TO 650        
      IF((EN-EIN(7):
) > XVBV3(NVBV3)) GO TO 624                        
      DO 610 J=2,NVBV3                                                 
      IF((EN-EIN(7):
) <= XVBV3(J)) GO TO 620                             
  610 CONTINUE                                                          
      J=NVBV3                                                          
  620 A=(YVBV3(J)-YVBV3(J-1))/(XVBV3(J)-XVBV3(J-1))                     
      B=(XVBV3(J-1)*YVBV3(J)-XVBV3(J)*YVBV3(J-1))/(XVBV3(J-1)-XVBV3(J)) 
      QIN(7,I)=(EN-EIN(7))*(A*(EN-EIN(7))+B)/EN
      GO TO 625
  624 QIN(7,I)=YVBV3(NVBV3)*(XVBV3(NVBV3)/(EN*(EN-EIN(7)))**2)
  625 CONTINUE
      EFAC=math.sqrt(1.0-(EIN(7)/EN))
      QIN(7,I)=QIN(7,I)+VDSC*1.610*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      QIN(7,I)=QIN(7,I)*APOPV3*1.D-16/DEGV3
      IF(EN > 100.0):
 PEQIN(7,I)=PQ1
  650 CONTINUE                    
# VIBRATION V3 ANISOTROPIC
      QIN(8,I)=0.0
      PEQIN(8,I)=0.5
      IF(EN <= EIN(8):
) GO TO 700   
      IF(EN > XVBV3(NVBV3):
) GO TO 674                                 
      DO 660 J=2,NVBV3                                              
      IF(EN <= XVBV3(J):
) GO TO 670                                      
  660 CONTINUE                                                          
      J=NVBV3                                                          
  670 A=(YVBV3(J)-YVBV3(J-1))/(XVBV3(J)-XVBV3(J-1))                     
      B=(XVBV3(J-1)*YVBV3(J)-XVBV3(J)*YVBV3(J-1))/(XVBV3(J-1)-XVBV3(J)) 
      QIN(8,I)=A*EN+B
      GO TO 675
  674 QIN(8,I)=YVBV3(NVBV3)*(XVBV3(NVBV3)/EN)**3
  675 CONTINUE
      EFAC=math.sqrt(1.0-(EIN(8)/EN))
      ADIP=VDSC*1.610*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      ELF=EN-EIN(8)
      FWD=math.log((EN+ELF)/(EN+ELF-2.0*math.sqrt(EN*ELF)))
      BCK=math.log((EN+ELF+2.0*math.sqrt(EN*ELF))/(EN+ELF))
#   ASSUME RATIO MOM T./ TOT X-SECT FOR RESONANCE PART = RAT 
      XMT=((1.5-FWD/(FWD+BCK))*ADIP+RAT*QIN(8,I))*APOPGS*1.D-16
      QIN(8,I)=(QIN(8,I)+ADIP)*APOPGS*1.D-16
      IF(EN <= 100.0):
 PEQIN(8,I)=0.5+(QIN(8,I)-XMT)/QIN(8,I)
      IF(EN > 100.0):
 PEQIN(8,I)=PQ1
  700 CONTINUE                    
# VIBRATION HARMONIC 2V3
      QIN(9,I)=0.0
      PEQIN(9,I)=0.5
      IF(EN <= EIN(9):
) GO TO 800 
      IF(EN > XVIB5(NVIB5):
) GO TO 724                             
      DO 710 J=2,NVIB5                                                  
      IF(EN <= XVIB5(J):
) GO TO 720                                      
  710 CONTINUE                                                          
      J=NVIB5                                                           
  720 A=(YVIB5(J)-YVIB5(J-1))/(XVIB5(J)-XVIB5(J-1))                     
      B=(XVIB5(J-1)*YVIB5(J)-XVIB5(J)*YVIB5(J-1))/(XVIB5(J-1)-XVIB5(J)) 
      QIN(9,I)=(A*EN+B)
      GO TO 725
  724 QIN(9,I)=YVIB5(NVIB5)*(XVIB5(NVIB5)/EN)
  725 CONTINUE
      QIN(9,I)=QIN(9,I)*APOPGS*1.D-16
      IF(EN <= 100.0):
 PEQIN(9,I)=0.5+(1.0-RAT)
      IF(EN > 100.0):
 PEQIN(9,I)=PQ1                 
  800 CONTINUE                                                          
# VIBRATION HARMONIC 3V3 
      QIN(10,I)=0.0
      PEQIN(10,I)=0.5                                                 
      IF(EN <= EIN(10):
) GO TO 900            
      IF(EN > XVIB6(NVIB6):
) GO TO 824 
      DO 810 J=2,NVIB6                                                  
      IF(EN <= XVIB6(J):
) GO TO 820                                      
  810 CONTINUE                                                          
      J=NVIB6                                                           
  820 A=(YVIB6(J)-YVIB6(J-1))/(XVIB6(J)-XVIB6(J-1))                     
      B=(XVIB6(J-1)*YVIB6(J)-XVIB6(J)*YVIB6(J-1))/(XVIB6(J-1)-XVIB6(J)) 
      QIN(10,I)=(A*EN+B)
      GO TO 825
  824 QIN(10,I)=YVIB6(NVIB6)*(XVIB6(NVIB6)/EN)
  825 CONTINUE
      QIN(10,I)=QIN(10,I)*APOPGS*1.D-16
      IF(EN <= 100.0):
 PEQIN(10,I)=0.5+(1.0-RAT)
      IF(EN > 100.0):
 PEQIN(10,I)=PQ1                      
  900 CONTINUE                                                          
#                                                                       
# TRIPLET NEUTRAL DISSOCIATION ELOSS=11.5 EV
      QIN(11,I)=0.0  
      PEQIN(11,I)=0.0                       
      IF(EN <= EIN(11):
) GO TO 903                
      IF(EN > XTR1(NTR1):
) GO TO 9025                      
      DO 901 J=2,NTR1                                                 
      IF(EN <= XTR1(J):
) GO TO 902                                       
  901 CONTINUE                                                          
      J=NTR1                                                           
  902 A=(YTR1(J)-YTR1(J-1))/(XTR1(J)-XTR1(J-1))                         
      B=(XTR1(J-1)*YTR1(J)-XTR1(J)*YTR1(J-1))/(XTR1(J-1)-XTR1(J))       
      QIN(11,I)=(A*EN+B)*1.D-16
      GO TO 9026
 9025 QIN(11,I)=YTR1(NTR1)*(XTR1(NTR1)/EN)**2*1.D-16
 9026 IF(EN <= (3.0*EIN(11))) GO TO 903
      PEQIN(11,I)=PEQEL(2,(I-IOFFN(11)))                              
# SINGLET NEUTRAL DISSOCIATION  ELOSS=11.63 EV     F=0.0001893
  903 QIN(12,I)=0.0
      PEQIN(12,I)=0.0
      IF(EN <= EIN(12):
) GO TO 904
      QIN(12,I)=.0001893/(EIN(12)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(12)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(12)+E(3))*1.0107
      IF(QIN(12,I):
 < 0.0) QIN(12,I)=0.0       
      IF(EN <= (3.0*EIN(12):
)) GO TO 904
      PEQIN(12,I)=PEQEL(2,(I-IOFFN(12)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=11.88 EV     F=0.001085
  904 QIN(13,I)=0.0
      PEQIN(13,I)=0.0
      IF(EN <= EIN(13):
) GO TO 905
      QIN(13,I)=0.001085/(EIN(13)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(13)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(13)+E(3))*1.0105
      IF(QIN(13,I):
 < 0.0) QIN(13,I)=0.0       
      IF(EN <= (3.0*EIN(13):
)) GO TO 905
      PEQIN(13,I)=PEQEL(2,(I-IOFFN(13)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=12.13 EV     F=0.004807
  905 QIN(14,I)=0.0
      PEQIN(14,I)=0.0
      IF(EN <= EIN(14):
) GO TO 906
      QIN(14,I)=0.004807/(EIN(14)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(14)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(14)+E(3))*1.0103
      IF(QIN(14,I):
 < 0.0) QIN(14,I)=0.0       
      IF(EN <= (3.0*EIN(14):
)) GO TO 906
      PEQIN(14,I)=PEQEL(2,(I-IOFFN(14)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=12.38 EV     F=0.008819
  906 QIN(15,I)=0.0
      PEQIN(15,I)=0.0
      IF(EN <= EIN(15):
) GO TO 907
      QIN(15,I)=0.008819/(EIN(15)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(15)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(15)+E(3))*1.0101
      IF(QIN(15,I):
 < 0.0) QIN(15,I)=0.0       
      IF(EN <= (3.0*EIN(15):
)) GO TO 907
      PEQIN(15,I)=PEQEL(2,(I-IOFFN(15)))
# TRIPLET NEUTRAL DISSOCIATION ELOSS=12.5 EV
  907 QIN(16,I)=0.0  
      PEQIN(16,I)=0.0                       
      IF(EN <= EIN(16):
) GO TO 910                
      IF(EN > XTR2(NTR2):
) GO TO 9095                      
      DO 908 J=2,NTR2                                                   
      IF(EN <= XTR2(J):
) GO TO 909                                       
  908 CONTINUE                                                          
      J=NTR2                                                            
  909 A=(YTR2(J)-YTR2(J-1))/(XTR2(J)-XTR2(J-1))                         
      B=(XTR2(J-1)*YTR2(J)-XTR2(J)*YTR2(J-1))/(XTR2(J-1)-XTR2(J))       
      QIN(16,I)=(A*EN+B)*1.D-16
      GO TO 9096
 9095 QIN(16,I)=YTR2(NTR2)*(XTR2(NTR2)/EN)**2*1.D-16
 9096 IF(EN <= (3.0*EIN(16))) GO TO 910
      PEQIN(16,I)=PEQEL(2,(I-IOFFN(16)))                              
# SINGLET NEUTRAL DISSOCIATION   ELOSS=12.63 EV     F=0.008918
  910 QIN(17,I)=0.0
      PEQIN(17,I)=0.0
      IF(EN <= EIN(17):
) GO TO 911
      QIN(17,I)=0.008918/(EIN(17)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(17)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(17)+E(3))*1.0099
      IF(QIN(17,I):
 < 0.0) QIN(17,I)=0.0       
      IF(EN <= (3.0*EIN(17):
)) GO TO 911
      PEQIN(17,I)=PEQEL(2,(I-IOFFN(17)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=12.88 EV     F=0.008420
  911 QIN(18,I)=0.0
      PEQIN(18,I)=0.0
      IF(EN <= EIN(18):
) GO TO 912
      QIN(18,I)=0.008420/(EIN(18)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(18)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(18)+E(3))*1.0097
      IF(QIN(18,I):
 < 0.0) QIN(18,I)=0.0       
      IF(EN <= (3.0*EIN(18):
)) GO TO 912
      PEQIN(18,I)=PEQEL(2,(I-IOFFN(18)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=13.13 EV     F=0.02531 
  912 QIN(19,I)=0.0
      PEQIN(19,I)=0.0
      IF(EN <= EIN(19):
) GO TO 913
      QIN(19,I)=0.02531/(EIN(19)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(19)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(19)+E(3))*1.0095
      IF(QIN(19,I):
 < 0.0) QIN(19,I)=0.0       
      IF(EN <= (3.0*EIN(19):
)) GO TO 913
      PEQIN(19,I)=PEQEL(2,(I-IOFFN(19)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=13.38 EV     F=0.09553 
  913 QIN(20,I)=0.0
      PEQIN(20,I)=0.0
      IF(EN <= EIN(20):
) GO TO 914
      QIN(20,I)=0.09553/(EIN(20)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(20)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(20)+E(3))*1.0093
      IF(QIN(20,I):
 < 0.0) QIN(20,I)=0.0       
      IF(EN <= (3.0*EIN(20):
)) GO TO 914
      PEQIN(20,I)=PEQEL(2,(I-IOFFN(20)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=13.63 EV     F=0.11193 
  914 QIN(21,I)=0.0
      PEQIN(21,I)=0.0
      IF(EN <= EIN(21):
) GO TO 915
      QIN(21,I)=0.11193/(EIN(21)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(21)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(21)+E(3))*1.0092
      IF(QIN(21,I):
 < 0.0) QIN(21,I)=0.0       
      IF(EN <= (3.0*EIN(21):
)) GO TO 915
      PEQIN(21,I)=PEQEL(2,(I-IOFFN(21)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=13.88 EV     F=0.10103 
  915 QIN(22,I)=0.0
      PEQIN(22,I)=0.0
      IF(EN <= EIN(22):
) GO TO 916
      QIN(22,I)=0.10103/(EIN(22)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(22)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(22)+E(3))*1.0090
      IF(QIN(22,I):
 < 0.0) QIN(22,I)=0.0       
      IF(EN <= (3.0*EIN(22):
)) GO TO 916
      PEQIN(22,I)=PEQEL(2,(I-IOFFN(22)))
# TRIPLET NEUTRAL DISSOCIATION ELOSS=14.0 EV
  916 QIN(23,I)=0.0  
      PEQIN(23,I)=0.0                       
      IF(EN <= EIN(23):
) GO TO 919                
      IF(EN > XTR3(NTR3):
) GO TO 9185                      
      DO 917 J=2,NTR3                                                   
      IF(EN <= XTR3(J):
) GO TO 918                                       
  917 CONTINUE                                                          
      J=NTR3                                                            
  918 A=(YTR3(J)-YTR3(J-1))/(XTR3(J)-XTR3(J-1))                         
      B=(XTR3(J-1)*YTR3(J)-XTR3(J)*YTR3(J-1))/(XTR3(J-1)-XTR3(J))       
      QIN(23,I)=(A*EN+B)*1.D-16
      GO TO 9186
 9185 QIN(23,I)=YTR3(NTR3)*(XTR3(NTR3)/EN)**2*1.D-16
 9186 IF(EN <= (3.0*EIN(23))) GO TO 919
      PEQIN(23,I)=PEQEL(2,(I-IOFFN(23)))                              
# SINGLET NEUTRAL DISSOCIATION   ELOSS=14.13 EV     F=0.06902 
  919 QIN(24,I)=0.0
      PEQIN(24,I)=0.0
      IF(EN <= EIN(24):
) GO TO 920
      QIN(24,I)=0.06902/(EIN(24)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(24)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(24)+E(3))*1.0088
      IF(QIN(24,I):
 < 0.0) QIN(24,I)=0.0       
      IF(EN <= (3.0*EIN(24):
)) GO TO 920
      PEQIN(24,I)=PEQEL(2,(I-IOFFN(24)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=14.38 EV     F=0.03968 
  920 QIN(25,I)=0.0
      PEQIN(25,I)=0.0
      IF(EN <= EIN(25):
) GO TO 921
      QIN(25,I)=0.03968/(EIN(25)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(25)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(25)+E(3))*1.0087
      IF(QIN(25,I):
 < 0.0) QIN(25,I)=0.0       
      IF(EN <= (3.0*EIN(25):
)) GO TO 921
      PEQIN(25,I)=PEQEL(2,(I-IOFFN(25)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=14.63 EV     F=0.02584 
  921 QIN(26,I)=0.0
      PEQIN(26,I)=0.0
      IF(EN <= EIN(26):
) GO TO 922
      QIN(26,I)=0.02584/(EIN(26)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(26)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(26)+E(3))*1.0085
      IF(QIN(26,I):
 < 0.0) QIN(26,I)=0.0       
      IF(EN <= (3.0*EIN(26):
)) GO TO 922
      PEQIN(26,I)=PEQEL(2,(I-IOFFN(26)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=14.88 EV     F=0.02071 
  922 QIN(27,I)=0.0
      PEQIN(27,I)=0.0
      IF(EN <= EIN(27):
) GO TO 923
      QIN(27,I)=0.02071/(EIN(27)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(27)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(27)+E(3))*1.0084
      IF(QIN(27,I):
 < 0.0) QIN(27,I)=0.0       
      IF(EN <= (3.0*EIN(27):
)) GO TO 923
      PEQIN(27,I)=PEQEL(2,(I-IOFFN(27)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=15.13 EV     F=0.03122 
  923 QIN(28,I)=0.0
      PEQIN(28,I)=0.0
      IF(EN <= EIN(28):
) GO TO 924
      QIN(28,I)=0.03122/(EIN(28)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(28)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(28)+E(3))*1.0083
      IF(QIN(28,I):
 < 0.0) QIN(28,I)=0.0       
      IF(EN <= (3.0*EIN(28):
)) GO TO 924
      PEQIN(28,I)=PEQEL(2,(I-IOFFN(28)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=15.38 EV     F=0.05580 
  924 QIN(29,I)=0.0
      PEQIN(29,I)=0.0
      IF(EN <= EIN(29):
) GO TO 925
      QIN(29,I)=0.05580/(EIN(29)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(29)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(29)+E(3))*1.0081
      IF(QIN(29,I):
 < 0.0) QIN(29,I)=0.0       
      IF(EN <= (3.0*EIN(29):
)) GO TO 925
      PEQIN(29,I)=PEQEL(2,(I-IOFFN(29)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=15.63 EV     F=0.10187 
  925 QIN(30,I)=0.0
      PEQIN(30,I)=0.0
      IF(EN <= EIN(30):
) GO TO 926
      QIN(30,I)=0.10187/(EIN(30)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(30)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(30)+E(3))*1.0080
      IF(QIN(30,I):
 < 0.0) QIN(30,I)=0.0       
      IF(EN <= (3.0*EIN(30):
)) GO TO 926
      PEQIN(30,I)=PEQEL(2,(I-IOFFN(30)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=15.88 EV     F=0.09427 
  926 QIN(31,I)=0.0
      PEQIN(31,I)=0.0
      IF(EN <= EIN(31):
) GO TO 927
      QIN(31,I)=0.09427/(EIN(31)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(31)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(31)+E(3))*1.0079
      IF(QIN(31,I):
 < 0.0) QIN(31,I)=0.0       
      IF(EN <= (3.0*EIN(31):
)) GO TO 927
      PEQIN(31,I)=PEQEL(2,(I-IOFFN(31)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=16.13 EV     F=0.05853 
  927 QIN(32,I)=0.0
      PEQIN(32,I)=0.0
      IF(EN <= EIN(32):
) GO TO 928
      QIN(32,I)=0.05853/(EIN(32)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(32)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(32)+E(3))*1.0077
      IF(QIN(32,I):
 < 0.0) QIN(32,I)=0.0       
      IF(EN <= (3.0*EIN(32):
)) GO TO 928
      PEQIN(32,I)=PEQEL(2,(I-IOFFN(32)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=16.38 EV     F=0.06002 
  928 QIN(33,I)=0.0
      PEQIN(33,I)=0.0
      IF(EN <= EIN(33):
) GO TO 929
      QIN(33,I)=0.06002/(EIN(33)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(33)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(33)+E(3))*1.0076
      IF(QIN(33,I):
 < 0.0) QIN(33,I)=0.0       
      IF(EN <= (3.0*EIN(33):
)) GO TO 929
      PEQIN(33,I)=PEQEL(2,(I-IOFFN(33)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=16.63 EV     F=0.05647 
  929 QIN(34,I)=0.0
      PEQIN(34,I)=0.0
      IF(EN <= EIN(34):
) GO TO 930
      QIN(34,I)=0.05647/(EIN(34)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(34)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(34)+E(3))*1.0075
      IF(QIN(34,I):
 < 0.0) QIN(34,I)=0.0       
      IF(EN <= (3.0*EIN(34):
)) GO TO 930
      PEQIN(34,I)=PEQEL(2,(I-IOFFN(34)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=16.88 EV     F=0.04885 
  930 QIN(35,I)=0.0
      PEQIN(35,I)=0.0
      IF(EN <= EIN(35):
) GO TO 931
      QIN(35,I)=0.04885/(EIN(35)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(35)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(35)+E(3))*1.0074
      IF(QIN(35,I):
 < 0.0) QIN(35,I)=0.0       
      IF(EN <= (3.0*EIN(35):
)) GO TO 931
      PEQIN(35,I)=PEQEL(2,(I-IOFFN(35)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=17.13 EV     F=0.04036 
  931 QIN(36,I)=0.0
      PEQIN(36,I)=0.0
      IF(EN <= EIN(36):
) GO TO 932
      QIN(36,I)=0.04036/(EIN(36)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(36)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(36)+E(3))*1.0073
      IF(QIN(36,I):
 < 0.0) QIN(36,I)=0.0       
      IF(EN <= (3.0*EIN(36):
)) GO TO 932
      PEQIN(36,I)=PEQEL(2,(I-IOFFN(36)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=17.38 EV     F=0.03298 
  932 QIN(37,I)=0.0
      PEQIN(37,I)=0.0
      IF(EN <= EIN(37):
) GO TO 933
      QIN(37,I)=0.03298/(EIN(37)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(37)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(37)+E(3))*1.0072
      IF(QIN(37,I):
 < 0.0) QIN(37,I)=0.0       
      IF(EN <= (3.0*EIN(37):
)) GO TO 933
      PEQIN(37,I)=PEQEL(2,(I-IOFFN(37)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=17.63 EV     F=0.02593 
  933 QIN(38,I)=0.0
      PEQIN(38,I)=0.0
      IF(EN <= EIN(38):
) GO TO 934
      QIN(38,I)=0.02593/(EIN(38)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(38)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(38)+E(3))*1.0071
      IF(QIN(38,I):
 < 0.0) QIN(38,I)=0.0       
      IF(EN <= (3.0*EIN(38):
)) GO TO 934
      PEQIN(38,I)=PEQEL(2,(I-IOFFN(38)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=17.88 EV     F=0.01802 
  934 QIN(39,I)=0.0
      PEQIN(39,I)=0.0
      IF(EN <= EIN(39):
) GO TO 935
      QIN(39,I)=0.01802/(EIN(39)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(39)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(39)+E(3))*1.0070
      IF(QIN(39,I):
 < 0.0) QIN(39,I)=0.0       
      IF(EN <= (3.0*EIN(39):
)) GO TO 935
      PEQIN(39,I)=PEQEL(2,(I-IOFFN(39)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=18.13 EV     F=0.01287 
  935 QIN(40,I)=0.0
      PEQIN(40,I)=0.0
      IF(EN <= EIN(40):
) GO TO 936
      QIN(40,I)=0.01287/(EIN(40)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(40)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(40)+E(3))*1.0069
      IF(QIN(40,I):
 < 0.0) QIN(40,I)=0.0       
      IF(EN <= (3.0*EIN(40):
)) GO TO 936
      PEQIN(40,I)=PEQEL(2,(I-IOFFN(40)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=18.38 EV     F=0.00830 
  936 QIN(41,I)=0.0
      PEQIN(41,I)=0.0
      IF(EN <= EIN(41):
) GO TO 937
      QIN(41,I)=0.00830/(EIN(41)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(41)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(41)+E(3))*1.0068
      IF(QIN(41,I):
 < 0.0) QIN(41,I)=0.0       
      IF(EN <= (3.0*EIN(41):
)) GO TO 937
      PEQIN(41,I)=PEQEL(2,(I-IOFFN(41)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=18.63 EV     F=0.00698 
  937 QIN(42,I)=0.0
      PEQIN(42,I)=0.0
      IF(EN <= EIN(42):
) GO TO 938
      QIN(42,I)=0.00698/(EIN(42)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(42)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(42)+E(3))*1.0067
      IF(QIN(42,I):
 < 0.0) QIN(42,I)=0.0       
      IF(EN <= (3.0*EIN(42):
)) GO TO 938
      PEQIN(42,I)=PEQEL(2,(I-IOFFN(42)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=18.88 EV     F=0.00581 
  938 QIN(43,I)=0.0
      PEQIN(43,I)=0.0
      IF(EN <= EIN(43):
) GO TO 939
      QIN(43,I)=0.00581/(EIN(43)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(43)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(43)+E(3))*1.0066
      IF(QIN(43,I):
 < 0.0) QIN(43,I)=0.0       
      IF(EN <= (3.0*EIN(43):
)) GO TO 939
      PEQIN(43,I)=PEQEL(2,(I-IOFFN(43)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=19.13 EV     F=0.00502 
  939 QIN(44,I)=0.0
      PEQIN(44,I)=0.0
      IF(EN <= EIN(44):
) GO TO 940
      QIN(44,I)=0.00502/(EIN(44)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(44)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(44)+E(3))*1.0065
      IF(QIN(44,I):
 < 0.0) QIN(44,I)=0.0       
      IF(EN <= (3.0*EIN(44):
)) GO TO 940
      PEQIN(44,I)=PEQEL(2,(I-IOFFN(44)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=19.38 EV     F=0.00398 
  940 QIN(45,I)=0.0
      PEQIN(45,I)=0.0
      IF(EN <= EIN(45):
) GO TO 941
      QIN(45,I)=0.00398/(EIN(45)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(45)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(45)+E(3))*1.0064
      IF(QIN(45,I):
 < 0.0) QIN(45,I)=0.0       
      IF(EN <= (3.0*EIN(45):
)) GO TO 941
      PEQIN(45,I)=PEQEL(2,(I-IOFFN(45)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=19.63 EV     F=0.00189 
  941 QIN(46,I)=0.0
      PEQIN(46,I)=0.0
      IF(EN <= EIN(46):
) GO TO 942
      QIN(46,I)=0.00198/(EIN(46)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(46)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(46)+E(3))*1.0064
      IF(QIN(46,I):
 < 0.0) QIN(46,I)=0.0       
      IF(EN <= (3.0*EIN(46):
)) GO TO 942
      PEQIN(46,I)=PEQEL(2,(I-IOFFN(46)))
  942 CONTINUE
# LOAD BREMSSTRAHLUNG X-SECTIONS
#     QIN(47,I)=0.0
#     QIN(48,I)=0.0
#     IF(EN <= 1000.) GO TO 1000 
#     DO 952 J=2,NBREM 
#     IF(EN <= EBRM(J)) GO TO 953
# 952 CONTINUE
#     J=NBREM
# 953 A=(math.log(Z6T(J))-math.log(Z6T(J-1)))/(EBRM(J)-EBRM(J-1))
#     B=(math.log(Z6T(J))*EBRM(J-1)-math.log(Z6T(J-1))*EBRM(J))/
#    /(EBRM(J-1)-EBRM(J))
#     A1=(math.log(Z9T(J))-math.log(Z9T(J-1)))/(EBRM(J)-EBRM(J-1))
#     B1=(math.log(Z9T(J))*EBRM(J-1)-math.log(Z9T(J-1))*EBRM(J))/
#    /(EBRM(J-1)-EBRM(J))
#     QIN(47,I)=math.exp(A*EN+B)*1.D-24
#     QIN(48,I)=math.exp(A1*EN+B1)*4.D-24 
 1000 CONTINUE                                              
#  
# COUNTING IONISATION SUM
      QIONSUM=0.0                    
      DO 1001 J=1,12
 1001 QIONSUM=QIONSUM+QION(J,I) 
      QSNGLSUM=0.0
      DO 1002 J=11,46
# SKIP TRIPLETS
      IF(J == 11 or J == 16 or J == 23):
 GO TO 1002
      QSNGLSUM=QSNGLSUM+QIN(J,I)
 1002 CONTINUE
      QTRIPSUM=QIN(11,I)+QIN(16,I)+QIN(23,I) 
# VIBRATION SUM
      VSUM=0.0
      DO 1003 J=1,10 
 1003 VSUM=VSUM+QIN(J,I) 
# GROSS IONISATION SUM 
      QIONG=QIONSUM
      DO 1004 J=6,12
 1004 QIONG=QIONG+QION(J,I)
      
#      
      DISTOT=QSNGLSUM+QTRIPSUM+QIONSUM               
      Q(1,I)=Q(2,I)+Q(4,I)+VSUM+DISTOT
#     WRITE(6,444) EN,Q(1,I),Q(2,I),VSUM,QSNGLSUM,QTRIPSUM,QIONSUM,
#    /QIONG,DISTOT
# 444 FORMAT(' EN=',D12.6,' TOT=',D12.4,' ELAS=',D12.4,' VIB SUM=',
#    /D12.4,/,' NEUTRAL DIP. DISS=',D12.4,' TRIPLET DISS=',D12.4,/,
#    /' COUNT IONISATION=',D12.4,/' GROSS IONISATION=',D12.4,/,
#    /' DISTOT=',D12.4)
 9000 CONTINUE                                                          
#  SAVE COMPUTE TIME 
#     IF(EFINAL > 1000.) NIN=48
      DO 9001 J=11,46
      IF(EFINAL <= EIN(J):
) :
       NIN=J-1
       GO TO 9002
      # endIF
 9001 CONTINUE   
 9002 CONTINUE                                     
      RETURN                                                            
      # end 
      def GAS2(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
#    /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,
#    /ISHELL,SCRPT)
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(4000),EROOT(4000),QT1(4000),QT2(4000),
     /QT3(4000),QT4(4000)
      COMMON/DENS/DEN(4000)
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6) 
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30)
     /,EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]  
      DIMENSION XEN(117),YSEC(117),YEL(117),XEPS(217),YEPS(217),
     /XENI(75),YENI(75),YENC(75),YEN1(75),XEN2(47),YEN2(47),XEN3(36),
     /YEN3(36),XKSH(89),YKSH(89),XL1S(101),YL1S(101),
     /XL2S(104),YL2S(104),XL3S(104),YL3S(104),
     /X1S5(71),Y1S5(71),YEPS1(71),X1S4(79),Y1S4(79),YEPS2(79),
     /X1S3(70),Y1S3(70),YEPS3(70),X1S2(70),Y1S2(70),YEPS4(70),
     /X2P10(54),Y2P10(54),YEP2P10(54),X2P9(17),Y2P9(17),YEP2P9(17),
     /X2P8(15),Y2P8(15),YEP2P8(15),X2P7(17),Y2P7(17),YEP2P7(17),
     /X2P6(16),Y2P6(16),YEP2P6(16),X2P5(17),Y2P5(17),YEP2P5(17),
     /X2P4(17),Y2P4(17),YEP2P4(17),X2P3(17),Y2P3(17),YEP2P3(17),
     /X2P2(16),Y2P2(16),YEP2P2(16),X2P1(17),Y2P1(17),YEP2P1(17),
     /X3D6(19),Y3D6(19),YEP3D6(19),X3D5(26),Y3D5(26),YEP3D5(26),
     /X3D4P(20),Y3D4P(20),YEP3D4P(20),X3D4(23),Y3D4(23),YEP3D4(23),
     /X3D3(20),Y3D3(20),YEP3D3(20),X3D1PP(19),Y3D1PP(19),YEP3D1PP(19),
     /X3D1P(16),Y3D1P(16),YEP3D1P(16),
     /X3S1PPPP(21),Y3S1PPPP(21),YEP3S1PPPP(21),
     /X3S1PPP(16),Y3S1PPP(16),YEP3S1PPP(16),
     /X3S1PP(21),Y3S1PP(21),YEP3S1PP(21),X2S5(19),Y2S5(19),YEP2S5(19),
     /X2S3(19),Y2S3(19),YEP2S3(19),
     /IOFFN(44),IOFFION(10)
      DIMENSION Z18T(25),EBRM(25)
      CHARACTER*50 SCRPT(300),SCRPTN(10)                         
      CHARACTER*25 NAME                
#  ENERGY                                       
      DATA XEN/1.00,1.20,1.50,1.70,2.00,2.50,3.00,4.00,5.00,6.00,
     /7.00,8.00,9.00,10.0,11.0,12.0,13.0,14.0,15.0,16.0,
     /18.0,20.0,25.0,30.0,40.0,50.0,60.0,70.0,80.0,90.0,
     /100.,125.,150.,200.,250.,300.,350.,400.,500.,600.,
     /700.,800.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,
     /10000.,15000.,20000.,40000.,60000.,80000.,1.D5,1.25D5,1.5D5,
     /1.75D5,
     /2.D5,2.5D5,3.D5,3.5D5,4.D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,
     /9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,2.0D6,2.5D6,3.0D6,3.5D6,4.0D6,
     /4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,
     /2.0D7,2.5D7,3.0D7,3.5D7,4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,
     /9.0D7,1.0D8,1.25D8,1.5D8,1.75D8,2.0D8,2.5D8,3.0D8,3.5D8,4.0D8,
     /4.5D8,5.0D8,6.0D8,7.0D8,8.0D8,9.0D8,1.0D9/
# ELASTIC MOMENTUM TRANSFER
      DATA YSEC/1.3913,1.66,2.05,2.33,2.70,3.43,4.20,5.70,7.60,9.60,
     /11.5,13.1,14.7,16.2,16.8,16.6,15.9,15.1,14.2,13.3,
     /11.5,10.0,7.75,6.25,4.45,3.50,2.80,2.25,2.00,1.70,
     /1.50,1.22,1.00,0.78,0.64,0.55,0.48,0.43,.355,0.30,
     /0.26,0.22,0.16,.095,.063,.033,.021,.0146,.0108,.00708,
     /.00484,.00240,.00145,4.3D-4,2.1D-4,1.26D-4,8.64D-5,5.91D-5,
     /4.35D-5,3.36D-5,
     /2.70D-5,1.88D-5,1.41D-5,1.10D-5,8.94D-6,7.45D-6,6.34D-6,4.80D-6,
     /3.80D-6,3.10D-6,
     /2.59D-6,2.21D-6,1.56D-6,1.18D-6,9.32D-7,7.56D-7,5.30D-7,3.95D-7,
     /3.07D-7,2.46D-7,
     /2.02D-7,1.69D-7,1.24D-7,9.49D-8,7.52D-8,6.12D-8,5.08D-8,3.41D-8,
     /2.46D-8,1.86D-8,
     /1.46D-8,9.65D-9,6.88D-9,5.16D-9,4.01D-9,3.21D-9,2.62D-9,1.85D-9,
     /1.37D-9,1.06D-9,
     /8.37D-10,6.80D-10,4.37D-10,3.04D-10,2.23D-10,1.71D-10,1.10D-10,
     /7.61D-11,5.59D-11,4.28D-11,
     /3.38D-11,2.74D-11,1.90D-11,1.40D-11,1.07D-11,8.45D-12,6.84D-12/
# ELASTIC           
      DATA YEL/1.4945,1.80,2.25,2.63,3.20,4.15,5.10,7.05,8.90,11.1,
     /13.4,15.8,18.1,20.3,21.9,23.0,23.4,23.5,23.2,22.2,
     /19.4,17.0,13.3,11.0,8.44,7.16,6.28,5.78,5.25,4.89,
     /4.50,3.95,3.51,3.03,2.70,2.48,2.30,2.10,1.90,1.72,
     /1.58,1.47,1.27,0.98,.818,.620,.510,.434,.380,.313,
     /.250,.180,.138,.076,.056,.045,.0378,.0322,.0284,.0257,
     /.0237,.0209,.0190,.0177,.0168,.0160,.0155,.0146,.0140,.0136,
     /.0132,.0130,.0126,.0123,.0121,.0120,.0119,.0118,.0117,.0117,
     /.0116,.0116,.0116,.0116,.0116,.0116,.0115,.0115,.0115,.0115,
     /27*.0115/
# EPSILON FOR ELASTIC ANGULAR DISTRIBUTION
      DATA XEPS/.0,.0001,.0002,.0003,.0004,.0006,.0008,.001,.0012,.0014,
     /.0017,.002,.0025,.003,.004,.005,.006,.008,.010,.012,
     /.014,.017,.020,.025,.030,.035,.040,.045,.050,.055,
     /.060,.065,.070,.075,.080,.085,.090,.095,.100,.110,
     /0.12,0.13,0.14,0.15,0.16,0.17,0.18,0.19,0.20,0.21,
     /0.22,0.23,0.24,0.25,0.26,0.27,0.28,0.29,0.30,0.31,
     /0.32,0.33,0.34,0.35,0.36,0.37,0.38,0.39,0.40,0.41,
     /0.42,0.43,0.44,0.45,0.46,0.47,0.48,0.49,0.50,0.51,
     /0.52,0.53,0.54,0.55,0.56,0.57,0.58,0.59,0.60,0.61,
     /0.62,0.63,0.65,0.67,0.70,0.75,0.80,0.85,0.90,0.95,
     /1.00,1.20,1.50,1.70,2.00,2.50,3.00,4.00,5.00,6.00,
     /7.00,8.00,9.00,10.0,11.0,12.0,13.0,14.0,15.0,16.0,
     /18.0,20.0,25.0,30.0,40.0,50.0,60.0,70.0,80.0,90.0,
     /100.,125.,150.,200.,250.,300.,350.,400.,500.,600.,
     /700.,800.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,
     /10000.,15000.,20000.,40000.,60000.,80000.,1.D5,1.25D5,1.5D5,
     /1.75D5,
     /2.0D5,2.5D5,3.0D5,3.5D5,4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,
     /9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,2.0D6,2.5D6,3.0D6,3.5D6,4.0D6,
     /4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,
     /2.0D7,2.5D7,3.0D7,3.5D7,4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,
     /9.0D7,1.0D8,1.25D8,1.5D8,1.75D8,2.0D8,2.5D8,3.0D8,3.5D8,4.0D8,
     /4.5D8,5.0D8,6.0D8,7.0D8,8.0D8,9.0D8,1.0D9/
# EPSILON =1-YEPS
      DATA YEPS/1.0,.987,.9814,.977,.9734,.9673,.9619,.9572,.9530,.9492,
     /.9433,.9384,.9304,.9234,.9103,.8988,.8879,.8681,.8501,.8332,
     /.8173,.7947,.7727,.7395,.7071,.6770,.6469,.6187,.5909,.5642,
     /.5379,.5119,.4866,.4623,.4384,.4154,.3932,.3716,.3505,.3108,
     /.2745,.2414,.2118,.1859,.1637,.1452,.1304,.1195,.1123,.1089,
     /.1093,.1140,.1231,.1369,.1559,.1802,.2104,.2465,.2882,.3353,     
     /.3872,.4434,.5019,.5620,.6222,.6818,.7400,.7957,.8477,.8970,
     /.9414,.982,1.019,1.0521,1.0812,1.107,1.1293,1.1487,1.1654,1.1796,
     /1.191,1.2014,1.208,1.2137,1.2179,1.2205,1.222,1.222,1.2213,1.2194,
     /1.2165,1.213,1.2035,1.192,1.171,1.1296,1.0836,1.0358,.9876,.9411,
     /.8966,.8836,.8671,.8299,.7682,.7432,.7390,.7174,.7830,.7989,
     /.7892,.7470,.7226,.7025,.6590,.5967,.5406,.4932,.4554,.4396,
     /.4320,.4266,.4200,.4030,.3564,.3152,.3716,.2186,.2113,.1829,
     /.1713,.1522,.1344,.1152,.1018,.0922,.0843,.0820,.0717,.0649, 
     /.0597,.0522,.0409,.0286,.0210,.0129,.0093,.0072,.0058,.0044,
     /.0035,.0023,.00173,8.3D-4,5.1D-4,3.73D-4,2.919D-4,2.274D-4,
     /1.847D-4,1.546D-4,
     /1.322D-4,1.012D-4,8.095D-5,6.673D-5,5.621D-5,4.823D-5,4.197D-5,
     /3.279D-5,2.647D-5,2.191D-5,
     /1.848D-5,1.582D-5,1.123D-5,8.449D-6,7.602D-6,5.315D-6,3.660D-6,
     /2.682D-6,2.050D-6,1.617D-6,
     /1.310D-6,1.083D-6,7.762D-7,5.840D-7,4.551D-7,3.648D-7,2.990D-7,
     /2.254D-7,1.376D-7,1.021D-7,
     /7.88D-8,5.08D-8,3.55D-8,2.61D-8,2.00D-8,1.58D-8,1.28D-8,8.79D-9,
     /6.41D-9,4.86D-9,
     /3.81D-9,3.06D-9,1.92D-9,1.31D-9,9.50D-10,7.2D-10,4.5D-10,3.1D-10,
     /2.2D-10,1.7D-10,
     /1.31D-10,1.05D-10,7.2D-11,5.2D-11,3.9D-11,3.1D-11,2.5D-11/
# IONISATION ( VALUES ABOVE 20KEV GENERATED BY BORN BETHE IN SUB)
      DATA XENI/15.75961,16.0,16.5,17.0,17.5,18.0,18.5,19.0,19.5,20.0,
     /20.5,21.0,21.5,22.0,22.5,23.0,23.5,24.0,24.5,25.0,                
     /25.5,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,45.0,
     /50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,
     /100.,110.,120.,130.,140.,150.,160.,180.,200.,250.,                
     /300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,               
     /1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,5000.,
     /6000.,8000.,10000.,14000.,20000./  
# GROSS IONISATION      
      DATA YENI/0.00,.031,.094,.163,.235,.310,.386,.465,.546,.627,
     /.713,.787,.858,.933,.994,1.06,1.12,1.18,1.24,1.30,                
     /1.35,1.41,1.60,1.80,1.96,2.11,2.24,2.33,2.39,2.49,                
     /2.53,2.60,2.66,2.73,2.77,2.82,2.84,2.85,2.86,2.86,          
     /2.85,2.83,2.81,2.76,2.73,2.68,2.62,2.52,2.39,2.17,                
     /1.97,1.80,1.67,1.54,1.44,1.28,1.15,1.04,.971,.898,                
     /.768,.688,.638,.576,.526,.446,.384,.340,.302,.255,                
     /.220,.172,.144,.110,.0825/ 
# COUNTING IONISATION
      DATA YENC/0.00,.031,.094,.163,.235,.310,.386,.465,.546,.627,
     /.713,.787,.858,.933,.994,1.06,1.12,1.18,1.24,1.30,
     /1.35,1.41,1.60,1.80,1.96,2.11,2.24,2.33,2.39,2.49,
     /2.52,2.56,2.58,2.62,2.63,2.67,2.68,2.68,2.69,2.69,
     /2.68,2.66,2.64,2.59,2.56,2.52,2.46,2.37,2.24,2.04,
     /1.85,1.69,1.57,1.45,1.35,1.21,1.08,.981,.912,.843,
     /.721,.646,.599,.540,.494,.419,.361,.319,.283,.239,
     /.206,.162,.136,.104,.0775/ 
# IONISATION FOR CHARGE STATE = 1
      DATA YEN1/0.00,.031,.094,.163,.235,.310,.386,.465,.546,.627,
     /.713,.787,.858,.933,.994,1.06,1.12,1.18,1.24,1.30,
     /1.35,1.41,1.60,1.80,1.96,2.11,2.24,2.33,2.39,2.49,
     /2.51,2.52,2.50,2.50,2.50,2.52,2.52,2.52,2.52,2.50,
     /2.49,2.47,2.45,2.41,2.38,2.33,2.29,2.20,2.10,1.91,
     /1.74,1.59,1.48,1.37,1.28,1.14,1.02,.925,.863,.798,
     /.682,.612,.567,.511,.468,.397,.342,.302,.268,.226,
     /.195,.153,.129,.0984,.0734/
# IONISATION FOR CHARGE STATE = 2
      DATA XEN2/43.38928,45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,
     /90.0,95.0,100.,110.,120.,130.,140.,150.,160.,180.,
     /200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,
     /900.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,
     /4000.,5000.,6000.,8000.,10000.,14000.,20000./  
      DATA YEN2/0.00,.00045,.012,.0391,.0803,.114,.136,.148,.159,.165,
     /.172,.175,.179,.180,.180,.176,.172,.167,.161,.153,
     /.138,.121,.106,.093,.085,.076,.0667,.0568,.0518,.0453,
     /.0418,.0375,.0321,.0287,.0266,.0240,.0234,.0186,.0161,.0142,
     /.0126,.0106,.00916,.00681,.00574,.00438,.00326/
# IONISATION FOR CHARGE STATE =3
      DATA XEN3/84.124,100.,110.,120.,130.,140.,150.,160.,180.,200.,
     /250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,
     /1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,
     /5000.,6000.,8000.,10000.,14000.,20000./  
      DATA YEN3/0.0,.000972,.00209,.00311,.00400,.00481,.00520,.00541,
     /.00552,.00532,
     /.00504,.00489,.00607,.00673,.00751,.00823,.00903,.00890,.00887,
     /.00825,
     /.00832,.00711,.00636,.00590,.00532,.00486,.00413,.00355,.00314,
     /.00278,
     /.00236,.00203,.00160,.00134,.001024,.000764/
# K-SHELL IONISATION
      DATA XKSH/3205.9,3283.,3378.,3475.,3576.,3680.,3786.,3896.,4009.,
     /4125.,
     /4368.,4625.,4898.,5186.,5492.,5816.,6159.,6522.,6907.,7314.,
     /7971.,8688.,9468.,1.03D4,1.09D4,1.19D4,1.30D4,1.42D4,1.54D4,
     /1.68D4,
     /1.89D4,2.12D4,2.37D4,2.66D4,2.99D4,3.45D4,3.98D4,4.60D4,5.31D4,
     /6.13D4,
     /7.29D4,8.66D4,1.00D5,1.19D5,1.41D5,1.68D5,2.00D5,2.37D5,2.82D5,
     /3.35D5,
     /4.10D5,5.01D5,6.13D5,7.50D5,8.91D5,1.00D6,1.22D6,1.50D6,1.83D6,
     /2.30D6,
     /2.90D6,3.65D6,4.60D6,5.79D6,7.50D6,8.66D6,1.00D7,1.22D7,1.50D7,
     /1.83D7,
     /2.24D7,2.74D7,3.55D7,4.60D7,5.79D7,7.50D7,8.66D7,1.00D8,1.22D8,
     /1.50D8,
     /1.83D8,2.24D8,2.74D8,3.55D8,4.60D7,5.79D8,7.50D8,8.66D8,1.00D9/
      DATA YKSH/0.0,1.59D-6,3.44D-6,5.20D-6,6.89D-6,8.51D-6,1.01D-5,
     /1.15D-5,1.29D-5,1.43D-5,
     /1.68D-5,1.91D-5,2.11D-5,2.30D-5,2.46D-5,2.61D-5,2.74D-5,2.85D-5,
     /2.95D-5,3.04D-5,
     /3.14D-5,3.21D-5,3.25D-5,3.27D-5,3.27D-5,3.26D-5,3.23D-5,3.18D-5,
     /3.12D-5,3.04D-5,
     /2.93D-5,2.81D-5,2.68D-5,2.54D-5,2.40D-5,2.23D-5,2.07D-5,1.92D-5,
     /1.77D-5,1.63D-5,
     /1.48D-5,1.39D-5,1.24D-5,1.13D-5,1.04D-5,9.53D-6,8.82D-6,8.22D-6,
     /7.72D-6,7.32D-6,
     /6.94D-6,6.67D-6,6.48D-6,6.37D-6,6.33D-6,6.33D-6,6.36D-6,6.45D-6,
     /6.57D-6,6.75D-6,
     /6.97D-6,7.21D-6,7.47D-6,7.75D-6,8.08D-6,8.27D-6,8.46D-6,8.73D-6,
     /9.01D-6,9.28D-6,
     /9.56D-6,9.85D-6,1.02D-5,1.06D-5,1.09D-5,1.13D-5,1.15D-5,1.17D-5,
     /1.20D-5,1.23D-5,
     /1.25D-5,1.28D-5,1.31D-5,1.35D-5,1.39D-5,1.42D-5,1.46D-5,1.48D-5,
     /1.50D-5/
# L1 SHELL IONISATION
      DATA XL1S/326.3,329.0,338.3,347.8,357.5,367.6,378.0,388.6,399.6,
     /410.9,
     /422.5,447.,473.,500.,529.,559.,592.,626.,662.,701.,
     /742.,807.,879.,957.,1013.,1103.,1203.,1313.,1423.,1553.,
     /1693.,1893.,2123.,2383.,2673.,3003.,3463.,3993.,4613.,5323.,
     /6143.,7303.,8673.,1.00D4,1.19D4,1.41D4,1.68D4,2.00D4,2.37D4,
     /2.82D4,
     /3.35D4,4.10D4,5.01D4,6.13D4,7.50D4,8.91D4,1.00D5,1.22D5,1.50D5,
     /1.83D5,
     /2.30D5,2.90D5,3.65D5,4.60D5,5.79D5,7.50D5,8.66D5,1.00D6,1.22D6,
     /1.50D6,
     /1.83D6,2.30D6,2.90D6,3.65D6,4.60D6,5.79D6,7.50D6,8.66D6,1.00D7,
     /1.22D7,
     /1.50D7,1.83D7,2.30D7,2.90D7,3.65D7,4.60D7,5.79D7,7.50D7,8.66D7,
     /1.00D8,
     /1.22D8,1.50D8,1.83D8,2.30D8,2.90D8,3.65D8,4.60D8,5.79D8,7.50D8,
     /8.66D8,
     /1.00D9/
      DATA YL1S/0.0,5.83D-5,2.39D-4,4.07D-4,5.63D-4,7.08D-4,8.43D-4,
     /9.71D-4,1.09D-3,1.20D-3,
     /1.31D-3,1.50D-3,1.68D-3,1.84D-3,1.98D-3,2.11D-3,2.22D-3,2.32D-3,
     /2.41D-3,2.49D-3,
     /2.55D-3,2.63D-3,2.68D-3,2.72D-3,2.73D-3,2.72D-3,2.71D-3,2.67D-3,
     /2.62D-3,2.56D-3,
     /2.49D-3,2.38D-3,2.27D-3,2.14D-3,2.02D-3,1.89D-3,1.74D-3,1.59D-3,
     /1.44D-3,1.31D-3,
     /1.19D-3,1.05D-3,9.22D-4,8.28D-4,7.26D-4,6.36D-4,5.57D-4,4.87D-4,
     /4.26D-4,3.72D-4,
     /3.26D-4,2.79D-4,2.40D-4,2.07D-4,1.79D-4,1.59D-4,1.48D-4,1.30D-4,
     /1.15D-4,1.03D-4,
     /9.19D-5,8.32D-5,7.66D-5,7.16D-5,6.81D-5,6.55D-5,6.45D-5,6.40D-5,
     /6.36D-5,6.38D-5,
     /6.44D-5,6.54D-5,6.67D-5,6.84D-5,7.02D-5,7.22D-5,7.45D-5,7.59D-5,
     /7.72D-5,7.92D-5,
     /8.12D-5,8.32D-5,8.55D-5,8.79D-5,9.03D-5,9.26D-5,9.50D-5,9.77D-5,
     /9.92D-5,1.01D-4,
     /1.03D-4,1.05D-4,1.07D-4,1.09D-4,1.12D-4,1.14D-4,1.17D-4,1.19D-4,
     /1.22D-4,1.23D-4,
     /1.25D-4/
# L2 SHELL IONISATION
      DATA XL2S/250.6,252.3,260.3,267.3,275.3,283.3,291.3,300.3,308.3,
     /317.3,
     /326.3,346.3,366.3,388.3,411.3,435.3,461.3,488.3,517.3,547.3,
     /580.3,614.3,650.3,689.3,751.3,819.3,892.3,1001.,1121.,1261.,
     /1411.,1581.,1781.,1941.,2181.,2441.,2741.,3071.,3451.,3871.,
     /4471.,5161.,5961.,6881.,7941.,8911.,1.00D4,1.19D4,1.41D4,1.68D4,
     /2.05D4,2.44D4,2.90D4,3.45D4,4.10D4,4.87D4,5.79D4,6.88D4,8.18D4,
     /1.00D5,
     /1.22D5,1.50D5,1.83D5,2.24D5,2.74D5,3.35D5,4.10D5,5.01D5,6.13D5,
     /7.50D5,
     /1.00D6,1.22D6,1.50D6,1.83D6,2.30D6,2.90D6,3.65D6,4.60D6,5.79D6,
     /7.50D6,
     /8.66D6,1.00D7,1.22D7,1.50D7,1.83D7,2.30D7,2.90D7,3.65D7,4.60D7,
     /5.79D7,
     /7.50D7,8.66D7,1.00D8,1.22D8,1.50D8,1.83D8,2.30D8,2.90D8,3.65D8,
     /4.60D8,
     /5.79D8,7.50D8,8.66D8,1.00D9/
      DATA YL2S/0.00,9.77D-5,4.86D-4,8.50D-4,1.19D-3,1.51D-3,1.81D-3,
     /2.10D-3,2.36D-3,2.62D-3, 
     /2.85D-3,3.29D-3,3.67D-3,4.01D-3,4.32D-3,4.59D-3,4.83D-3,5.04D-3,
     /5.22D-3,5.38D-3,
     /5.52D-3,5.63D-3,5.72D-3,5.79D-3,5.86D-3,5.89D-3,5.88D-3,5.82D-3,
     /5.70D-3,5.55D-3,
     /5.36D-3,5.14D-3,4.90D-3,4.72D-3,4.46D-3,4.21D-3,3.95D-3,3.70D-3,
     /3.47D-3,3.24D-3,
     /2.96D-3,2.70D-3,2.46D-3,2.23D-3,2.01D-3,1.86D-3,1.71D-3,1.51D-3,
     /1.33D-3,1.17D-3,
     /1.01D-3,8.83D-4,7.77D-4,6.83D-4,6.02D-4,5.31D-4,4.69D-4,4.16D-4,
     /3.70D-4,3.25D-4,
     /2.87D-4,2.56D-4,2.30D-4,2.09D-4,1.92D-4,1.78D-4,1.68D-4,1.60D-4,
     /1.54D-4,1.50D-4,
     /1.48D-4,1.48D-4,1.49D-4,1.51D-4,1.54D-4,1.58D-4,1.63D-4,1.68D-4,
     /1.73D-4,1.80D-4,
     /1.83D-4,1.87D-4,1.93D-4,1.98D-4,2.04D-4,2.10D-4,2.16D-4,2.23D-4,
     /2.29D-4,2.36D-4,
     /2.43D-4,2.47D-4,2.52D-4,2.57D-4,2.63D-4,2.69D-4,2.75D-4,2.82D-4,
     /2.89D-4,2.95D-4,
     /3.02D-4,3.09D-4,3.13D-4,3.17D-4/
# L3 SHELL IONISATION
      DATA XL3S/248.4,252.5,260.5,267.5,275.5,283.5,291.5,300.5,308.5,
     /317.5,
     /326.5,346.5,366.5,388.5,411.5,435.5,461.5,488.5,517.5,547.5,
     /580.5,614.5,650.5,689.5,751.5,819.5,892.5,1001.,1121.,1261.,
     /1411.,1581.,1781.,1941.,2181.,2441.,2741.,3071.,3451.,3871.,
     /4471.,5161.,5961.,6881.,7941.,8911.,1.00D4,1.19D4,1.41D4,1.68D4,
     /2.05D4,2.44D4,2.90D4,3.45D4,4.10D4,4.87D4,5.79D4,6.88D4,8.18D4,
     /1.00D5,
     /1.22D5,1.50D5,1.83D5,2.24D5,2.74D5,3.35D5,4.10D5,5.01D5,6.13D5,
     /7.50D5,
     /1.00D6,1.22D6,1.50D6,1.83D6,2.30D6,2.90D6,3.65D6,4.60D6,5.79D6,
     /7.50D6,
     /8.66D6,1.00D7,1.22D7,1.50D7,1.83D7,2.30D7,2.90D7,3.65D7,4.60D7,
     /5.79D7,
     /7.50D7,8.66D7,1.00D8,1.22D8,1.50D8,1.83D8,2.30D8,2.90D8,3.65D8,
     /4.60D8,
     /5.79D8,7.50D8,8.66D8,1.00D9/
      DATA YL3S/0.0,4.71D-4,1.25D-3,1.98D-3,2.67D-3,3.31D-3,3.92D-3,
     /4.48D-3,5.02D-3,5.52D-3,
     /6.00D-3,6.86D-3,7.63D-3,8.32D-3,8.93D-3,9.47D-3,9.95D-3,1.04D-2,
     /1.07D-2,1.10D-2,
     /1.13D-2,1.15D-2,1.17D-2,1.18D-2,1.20D-2,1.20D-2,1.20D-2,1.19D-2,
     /1.16D-2,1.13D-2,
     /1.09D-2,1.05D-2,9.97D-3,9.59D-3,9.07D-3,8.55D-3,8.03D-3,7.53D-3,
     /7.04D-3,6.58D-3,
     /6.02D-3,5.49D-3,4.99D-3,4.52D-3,4.09D-3,3.77D-3,3.47D-3,3.06D-3,
     /2.69D-3,2.37D-3,
     /2.04D-3,1.79D-3,1.58D-3,1.39D-3,1.22D-3,1.08D-3,9.52D-4,8.44D-4,
     /7.51D-4,6.59D-4,
     /5.82D-4,5.19D-4,4.66D-4,4.23D-4,3.89D-4,3.61D-4,3.40D-4,3.24D-4,
     /3.12D-4,3.05D-4,
     /3.00D-4,3.00D-4,3.02D-4,3.06D-4,3.12D-4,3.20D-4,3.30D-4,3.40D-4,
     /3.51D-4,3.64D-4,
     /3.72D-4,3.79D-4,3.90D-4,4.01D-4,4.13D-4,4.25D-4,4.39D-4,4.52D-4,
     /4.65D-4,4.78D-4,
     /4.93D-4,5.01D-4,5.10D-4,5.21D-4,5.33D-4,5.45D-4,5.58D-4,5.71D-4,
     /5.85D-4,5.98D-4,
     /6.11D-4,6.26D-4,6.35D-4,6.43D-4/
# 1S5 METASTABLE SCALE BY 1/E**3 ABOVE 100 EV 
      DATA X1S5/11.548,11.60,11.63,11.64,11.66,11.70,11.75,11.80,11.82,
     /11.83,
     /11.84,11.86,11.88,11.90,11.93,12.00,12.10,12.20,12.30,12.40,
     /12.50,12.60,12.70,12.80,12.83,12.86,12.90,12.91,12.93,12.96,
     /13.00,13.03,13.05,13.08,13.10,13.12,13.15,13.18,13.20,13.26,
     /13.28,13.29,13.35,13.40,13.45,13.47,13.50,13.60,13.70,13.80,
     /14.0,14.5,15.0,16.0,17.0,18.0,20.0,22.0,24.0,26.0,
     /28.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,
     /100./                                               
# UNITS 10-18 CM**2
      DATA Y1S5/0.00,0.70,1.22,1.22,1.01,0.88,0.83,0.90,1.13,1.69,
     /2.27,1.64,1.13,1.04,0.99,1.10,1.31,1.64,2.05,2.47,
     /2.86,3.20,3.40,3.40,3.33,3.19,2.77,3.28,2.56,2.27,
     /2.27,3.89,5.20,3.89,2.72,2.14,1.75,1.96,1.69,1.53,
     /2.03,1.76,1.94,2.09,2.18,2.52,2.36,2.56,2.80,3.10,
     /3.85,4.40,4.94,5.58,6.16,6.44,6.20,4.90,3.80,3.20,
     /2.50,2.00,1.15,0.80,0.52,0.37,0.24,.135,.088,.060,
     /.042/                                                           
      DATA YEPS1/71*0.0/
# 1S4 RESONANCE RADIATION 106.66 NM WAVELENGTH
# USE BEF SCALING ABOVE 1000EV  F=0.058
      DATA X1S4/11.624,11.65,11.66,11.67,11.68,11.69,11.70,11.74,11.75,
     /11.77,
     /11.79,11.82,11.84,11.87,11.88,11.90,11.95,12.00,12.05,12.10,
     /12.20,12.30,12.40,12.50,12.60,12.70,12.80,12.85,12.90,12.905,
     /12.91,12.93,12.97,13.00,13.03,13.05,13.06,13.07,13.09,13.10,
     /13.15,13.18,13.20,13.21,13.23,13.26,13.30,13.35,13.40,13.45,
     /13.47,13.49,13.60,13.70,13.80,14.0,15.0,16.0,17.0,18.0,
     /19.0,20.0,24.0,27.0,30.0,40.0,50.0,60.0,80.0,100.,
     /140.,200.,250.,300.,400.,500.,600.,800.,1000./       
# UNITS 10**-18 CM**2
      DATA Y1S4/0.00,0.90,1.48,1.57,1.57,1.55,1.48,1.10,1.05,1.14,
     /1.22,1.30,1.42,0.90,0.81,.742,.761,.788,0.86,0.92,
     /1.12,1.55,1.64,1.91,2.16,2.32,2.38,2.34,2.12,2.02,
     /2.29,2.00,1.87,1.93,2.38,3.28,3.49,3.20,2.21,2.05,
     /1.76,2.27,2.11,2.36,2.11,1.98,1.89,1.82,1.87,1.94,
     /2.16,2.07,2.23,2.40,2.55,2.90,5.02,6.23,6.86,7.43,
     /8.00,8.05,8.05,8.00,7.80,7.30,6.80,6.30,5.60,5.00,
     /4.30,3.60,3.30,3.00,2.50,2.15,1.92,1.60,1.41/       
      DATA YEPS2/79*0.0/
# 1S3 METASTABLE SCALE BY 1/E**3 ABOVE 100 EV
      DATA X1S3/11.723,11.75,11.76,11.78,11.79,11.80,11.84,11.86,11.90,
     /11.95,
     /12.00,12.10,12.20,12.30,12.40,12.50,12.60,12.70,12.80,12.85,
     /12.90,12.91,12.92,12.94,12.98,12.99,13.00,13.01,13.04,13.05,
     /13.06,13.08,13.10,13.15,13.18,13.20,13.21,13.23,13.25,13.27,
     /13.30,13.35,13.40,13.45,13.47,13.49,13.60,13.70,13.80,14.0,
     /14.5,15.0,16.0,17.0,18.0,20.0,22.0,24.0,26.0,28.0,
     /30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100./
# UNITS 10**-18 CM**2
      DATA Y1S3/0.00,.176,0.38,0.45,0.45,0.43,0.23,0.23,.176,.155,
     /.155,.171,.211,.259,.317,.389,.454,.509,.542,.535,
     /.479,.373,.567,.486,.437,.639,.518,.461,.518,.752,
     /.979,.873,.706,.535,.535,.826,1.12,.891,.720,.616,
     /.461,.236,.243,.252,.445,.356,.405,.454,.486,0.56,
     /0.80,0.99,1.12,1.23,1.29,1.24,0.98,0.76,0.64,0.50,
     /0.40,0.23,0.16,.104,.074,.048,.027,.0176,.0120,.0084/
      DATA YEPS3/70*0.0/
# 1S2 RESONANCE RADIATION 104.82 NM WAVELENGTH
# USE BEF SCALING ABOVE 400 EV F=0.2214
      DATA X1S2/11.828,11.85,11.86,11.88,11.90,11.93,11.96,12.00,12.05,
     /12.10,
     /12.20,12.30,12.40,12.50,12.60,12.70,12.80,12.85,12.90,12.91,
     /12.93,12.95,13.00,13.02,13.06,13.10,13.13,13.15,13.17,13.20,
     /13.21,13.23,13.25,13.27,13.30,13.35,13.40,13.45,13.46,13.48,
     /13.50,13.60,13.70,13.80,14.0,15.0,16.0,17.0,18.0,19.0,
     /20.0,22.0,24.0,26.0,28.0,30.0,35.0,40.0,50.0,60.0,
     /80.0,100.,120.,140.,170.,200.,250.,300.,350.,400./
# UNITS 10**-18 CM**2
      DATA Y1S2/0.00,1.55,1.94,1.76,1.58,1.37,1.24,1.19,1.19,1.21,
     /1.30,1.44,1.64,1.91,2.25,2.52,2.75,2.83,2.86,3.46,
     /3.04,2.95,2.93,3.08,4.18,3.29,3.17,3.02,2.99,3.60,
     /4.21,3.78,3.53,3.17,3.02,2.74,2.92,3.29,3.40,3.24,
     /3.33,3.71,3.94,4.20,4.80,7.20,9.43,11.7,14.0,16.0,
     /17.2,18.8,19.8,20.6,21.3,22.0,23.6,24.7,25.5,25.3,
     /24.0,22.3,20.7,19.3,17.5,16.0,14.0,12.5,11.3,10.3/
      DATA YEPS4/70*0.0/
# 2P10 J=1  SCALED BY 1/E**2 ABOVE 100 EV
      DATA X2P10/12.907,12.912,12.922,12.934,12.949,12.966,13.00,13.012,
     /13.035,13.042,
     /13.053,13.064,13.068,13.075,13.089,13.107,13.141,13.154,13.162,
     /13.170,
     /13.180,13.190,13.202,13.214,13.220,13.234,13.239,13.265,13.271,
     /13.276,
     /13.300,13.400,13.445,13.458,13.467,13.480,13.50,13.60,14.0,15.0,
     /16.0,18.0,19.0,20.0,21.0,22.0,25.0,30.0,35.0,40.0,
     /50.0,60.0,80.0,100./                                
      DATA Y2P10/0.00,0.76,0.40,0.57,0.53,0.61,0.95,1.40,1.78,1.88,
     /1.74,1.18,0.70,0.34,0.13,0.21,0.39,0.70,1.01,1.07,
     /1.33,1.17,1.43,0.70,0.36,0.14,0.11,0.11,0.25,0.18,
     /0.19,0.21,0.22,0.34,0.51,0.34,0.32,0.31,0.39,0.77,
     /1.13,1.82,2.03,2.16,2.20,2.17,1.89,1.20,0.81,0.58,
     /0.33,0.21,0.11,.065/                                  
      DATA YEP2P10/54*0.0/
# 2P9 J=3  SCALED BY 1/E**2 ABOVE 100 EV
      DATA X2P9/13.076,14.0,15.0,16.0,18.0,19.0,20.0,21.0,22.0,25.0,
     /30.0,35.0,40.0,50.0,60.0,80.0,100./
      DATA Y2P9/0.00,0.55,1.23,1.90,2.75,2.94,3.00,2.98,2.92,2.55,
     /1.73,1.19,0.85,0.50,0.32,0.17,0.11/               
      DATA YEP2P9/17*0.0/
# 2P8 J=2  SCALED BY 1/E ABOVE 100 EV
      DATA X2P8/13.095,14.0,15.0,16.0,18.0,20.0,22.0,25.0,30.0,35.0,
     /40.0,50.0,60.0,80.0,100./
      DATA Y2P8/0.00,0.38,0.85,1.25,1.85,2.10,2.30,2.35,2.40,2.36,
     /2.20,1.80,1.50,1.13,0.90/
      DATA YEP2P8/15*0.0/
# 2P7 J=1  SCALED BY 1/E**2 ABOVE 100 EV
      DATA X2P7/13.153,14.0,15.0,16.0,18.0,19.0,20.0,21.0,22.0,25.0,
     /30.0,35.0,40.0,50.0,60.0,80.0,100./
      DATA Y2P7/0.00,0.20,0.56,0.92,1.56,1.74,1.81,1.81,1.76,1.60,
     /1.25,1.00,0.84,0.61,0.44,0.27,0.19/
      DATA YEP2P7/17*0.0/
# 2P6 J=2  SCALED BY 1/E ABOVE 100 EV
      DATA X2P6/13.172,14.0,15.0,16.0,18.0,19.0,20.0,22.0,25.0,30.0,
     /35.0,40.0,50.0,60.0,80.0,100./
      DATA Y2P6/0.00,0.36,0.81,1.24,1.84,2.04,2.10,2.20,2.18,1.95,
     /1.80,1.65,1.42,1.27,1.04,0.87/ 
      DATA YEP2P6/16*0.0/
# 2P5 J=0  SCALED BY 1/E ABOVE 100 EV
      DATA X2P5/13.273,14.0,15.0,16.0,18.0,19.0,20.0,21.0,22.0,25.0,
     /30.0,35.0,40.0,50.0,60.0,80.0,100./
      DATA Y2P5/0.00,0.09,0.28,0.47,0.83,0.97,1.08,1.16,1.20,1.26,
     /1.25,1.23,1.20,1.08,0.96,0.75,0.60/
      DATA YEP2P5/17*0.0/
# 2P4 J=1  SCALED BY 1/E**2 ABOVE 100 EV
      DATA X2P4/13.283,14.0,15.0,16.0,18.0,19.0,20.0,21.0,22.0,25.0,
     /30.0,35.0,40.0,50.0,60.0,80.0,100./
      DATA Y2P4/0.00,0.18,0.55,0.90,1.53,1.71,1.77,1.77,1.72,1.57,
     /1.23,0.98,0.82,0.60,0.43,0.26,0.18/
      DATA YEP2P4/17*0.0/
# 2P3 J=2  SCALED BY 1/E ABOVE 100 EV
      DATA X2P3/13.302,14.0,15.0,16.0,18.0,19.0,20.0,21.0,22.0,25.0,
     /30.0,35.0,40.0,50.0,60.0,80.0,100./
      DATA Y2P3/0.00,.155,0.39,0.62,1.11,1.34,1.51,1.62,1.70,1.82,
     /1.85,1.76,1.62,1.33,1.10,0.82,0.66/
      DATA YEP2P3/17*0.0/
# 2P2 J=1  SCALED BY 1/E**2 ABOVE 100 EV
      DATA X2P2/13.328,14.0,15.0,16.0,18.0,19.0,20.0,22.0,25.0,30.0,
     /35.0,40.0,50.0,60.0,80.0,100./
      DATA Y2P2/0.00,0.20,0.46,0.60,0.74,0.77,.785,0.78,0.73,0.62,
     /0.53,0.44,0.33,0.25,0.15,0.10/ 
      DATA YEP2P2/16*0.0/
# 2P1 J=0  SCALED BY 1/E ABOVE 100 EV
      DATA X2P1/13.480,14.0,15.0,16.0,18.0,19.0,20.0,21.0,22.0,25.0,
     /30.0,35.0,40.0,50.0,60.0,80.0,100./
      DATA Y2P1/0.00,0.29,0.94,1.58,2.75,3.22,3.60,3.85,4.00,4.20,
     /4.15,4.10,4.00,3.60,3.20,2.50,2.00/
      DATA YEP2P1/17*0.0/
# 3D6 J=0 SCALED BY 1/E**3 ABOVE 100 EV
      DATA X3D6/13.845,14.0,15.0,16.0,17.0,18.0,19.0,20.0,22.0,25.0,
     /30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,100./
      DATA Y3D6/0.00,0.11,0.64,0.92,1.05,1.10,1.10,1.07,0.97,0.79,
     /0.56,0.39,0.28,0.21,0.16,.099,.065,.045,.024/
      DATA YEP3D6/19*0.0/
# 3D5 J=1 DIPOLE ALLOWED BEF SCALING USE BEF ABOVE 400EV F=0.0010
      DATA X3D5/13.864,14.0,15.0,16.0,17.0,18.0,19.0,20.0,22.0,25.0,
     /30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,100.,120.,
     /140.,170.,200.,250.,300.,400./
#     DATA Y3D5/0.00,0.40,3.00,4.50,5.25,5.50,5.50,5.35,4.90,4.00,
#    /2.80,2.05,1.50,1.15,0.98,0.65,0.46,0.35,0.19,0.14,
#    /.115,.095,.077,.065,.054,.037/
      DATA Y3D5/0.00,0.32,2.40,3.60,4.20,4.40,4.40,4.28,3.92,3.20,
     /2.24,1.64,1.20,0.92,0.78,0.52,0.37,0.28,0.15,.112,
     /.092,.076,.062,.052,.045,.037/
      DATA YEP3D5/26*0.0/
# 3D4' J=4 SCALED BY 1/E**3 ABOVE 100 EV
      DATA X3D4P/13.979,15.0,16.0,17.0,18.0,19.0,20.0,22.0,25.0,30.0,
     /35.0,40.0,45.0,50.0,55.0,60.0,70.0,80.0,90.0,100./
      DATA Y3D4P/0.00,2.16,3.31,3.88,4.11,4.14,4.04,3.68,3.03,2.12,
     /1.50,1.09,.813,.619,.482,.381,.251,.173,.125,.092/
      DATA YEP3D4P/20*0.0/
# 3D4  J=3  SCALED BY 1/E**2 ABOVE 100 EV
      DATA X3D4/14.013,15.0,16.0,17.0,18.0,19.0,20.0,21.0,22.0,25.0,
     /30.0,35.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,75.0,
     /80.0,90.0,100./                                   
      DATA Y3D4/0.00,0.63,1.05,1.31,1.48,1.57,1.62,1.63,1.62,1.52,
     /1.28,1.06,0.88,0.73,0.62,0.53,0.46,0.40,0.35,0.31,
     /0.28,.225,.186/                                      
      DATA YEP3D4/23*0.0/
# 3D3 J=2 SCALE BY 1/E**3 ABOVE 100 EV
      DATA X3D3/13.903,14.0,15.0,16.0,17.0,18.0,19.0,20.0,22.0,25.0,
     /30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100./
      DATA Y3D3/0.00,0.15,1.60,3.00,3.70,4.30,4.50,4.40,4.20,3.60,
     /2.63,1.86,1.35,1.00,0.76,0.47,0.31,0.21,0.15,.114/
      DATA YEP3D3/20*0.0/
# 3D1'' J=2 (ALSO 2S5 J=1 ) SCALE BY 1/E**2 ABOVE 100 EV
      DATA X3D1PP/14.063,15.0,16.0,17.0,18.0,19.0,20.0,22.0,25.0,30.0,
     /35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100./     
      DATA Y3D1PP/0.00,0.60,1.10,1.50,1.70,1.80,1.85,1.85,1.65,1.35,
     /1.00,0.73,0.57,0.45,0.32,0.23,0.18,.145,.120/      
      DATA YEP3D1PP/19*0.0/
# 3D1'  J=3 SCALE BY 1/E ABOVE 100 EV
      DATA X3D1P/14.099,15.0,16.0,18.0,19.0,20.0,21.0,22.0,25.0,30.0,
     /35.0,40.0,50.0,60.0,80.0,100./                       
      DATA Y3D1P/0.00,0.08,0.18,0.33,0.40,0.45,0.48,0.50,0.54,0.55,
     /0.52,0.48,0.40,0.33,0.24,0.20/                       
      DATA YEP3D1P/16*0.0/
# 3S1''''  J=2  SCALE BY 1/E**3 ABOVE 100 EV
      DATA X3S1PPPP/14.214,15.0,16.0,17.0,18.0,19.0,20.0,22.0,24.0,27.0,
     /30.0,35.0,40.0,45.0,50.0,55.0,60.0,70.0,80.0,90.0,
     /100./                                                          
      DATA Y3S1PPPP/0.00,0.80,1.65,2.10,2.30,2.35,2.32,2.15,1.89,1.54,
     /1.25,0.89,0.65,0.48,0.37,0.29,0.23,0.15,.103,.074,
     /.055/                                                       
      DATA YEP3S1PPPP/21*0.0/
# 3S1'''  J=3  SCALE BY 1/E ABOVE 100 EV
      DATA X3S1PPP/14.236,15.0,16.0,18.0,19.0,20.0,21.0,22.0,25.0,30.0,
     /35.0,40.0,50.0,60.0,80.0,100./                       
      DATA Y3S1PPP/0.00,0.12,0.27,0.50,0.60,0.68,0.72,0.75,0.81,0.82,
     /0.78,0.72,0.60,0.52,0.36,0.30/                                  
      DATA YEP3S1PPP/16*0.0/
# 3S1''  J=2  SCALE BY 1/E**3 ABOVE 100 EV
      DATA X3S1PP/14.234,15.0,16.0,17.0,18.0,19.0,20.0,21.0,22.0,25.0,
     /30.0,35.0,40.0,45.0,50.0,55.0,60.0,70.0,80.0,90.0,
     /100./                                                
      DATA Y3S1PP/0.00,0.55,1.06,1.31,1.42,1.44,1.42,1.37,1.31,1.09,
     /0.77,0.55,0.40,0.30,0.23,0.18,0.14,.0918,.0635,.0456,
     /.0339/                                                          
      DATA YEP3S1PP/21*0.0/
# 2S5  J=2  SCALE BY 1/E**2  ABOVE 100 EV
      DATA X2S5/14.068,15.0,16.0,17.0,18.0,19.0,20.0,22.0,25.0,30.0,
     /35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100./      
      DATA Y2S5/0.00,0.60,1.10,1.50,1.70,1.80,1.85,1.85,1.65,1.35,
     /1.00,0.73,0.57,0.45,0.32,0.23,0.18,.145,.120/      
      DATA YEP2S5/19*0.0/
# 2S3  J=0  SCALE BY 1/E**2  ABOVE 100 EV
      DATA X2S3/14.241,15.0,16.0,17.0,18.0,19.0,20.0,22.0,25.0,30.0,
     /35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100./       
      DATA Y2S3/0.00,0.12,0.22,0.30,0.34,0.36,0.37,0.37,0.33,0.27,
     /0.20,.146,.114,.090,.064,.046,.036,.029,.024/     
      DATA YEP2S3/19*0.0/
# BREMSSTRAHLUNG X-SECTION WITH CUT OFF
# UNITS 10**-24 CM**2
      DATA Z18T/1518.,1035.,582.,355.,207.,99.5,58.9,37.1,24.7,21.9,
     /21.9,22.3,22.6,22.9,23.1,23.4,23.7,24.0,24.2,24.4,
     /24.6,24.7,24.7,24.8,24.9/
      DATA EBRM/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,
     /2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,
     /4.E7,5.E7,6.E7,8.E7,1.E8/
#----------------------------------------------------------------------
#     NANISO=0
      IF(NANISO == 0):
 :
       NAME='ARGON ISOTROPIC      2014'       
      else:
       NAME='ARGON ANISOTROPIC    2014'
      # endIF                                         
# ----------------------------------------------------------------      
#  MULTI-TERM CROSS-SECTION.                                            
#  FOR PURE ARGON:                                                      
#  ACCURACY OF DERIVED VELOCITY AND DIFFUSION COEFFICIENTS 0.5% BELOW   
#  3000VOLTS . BELOW 20000VOLTS ACCURACY 1.0%. IONISATION COEFFICIENT   
#  AND DRIFT VELOCITY ACCURACY BETTER THAN  5% BELOW 1,000,000 VOLTS
#  ANISOTROPIC ELASTIC SCATTERING VERSION  
#  2007:INCREASED DATA BASE UPPER ENERGY TO 2MEV
#  2007:INCLUDED NEW ANISTROPIC SCATTERING def
#  2007:INCLUDED POSSIBLE PENNING TRANSFER FRACTION 
#  2009:SPLIT EXCITATION X-SECTION INTO 44 LEVELS AND MODIFIED
#       ELASTIC X-SECTION.  
#  2011:INCREASED SCALING FACTOR FOR S LEVELS AT THRESHOLD FROM 
#       0.5 TO 0.81 x (BARTSCHAT AND ZATSARINNY BSR MODEL)
#       EXCITATION RATE STILL WITHIN 1 SIGMA OF TACHIBANAS MEASURED
#       RATES FOR THE 1S LEVELS 
#       AND SMALL INCREASE IN MOMENTUM TRANSFER X-SECTION AT THE
#       PEAK( 11 EV) TO FIT DRIFT VELOCITY. 
#  2013: INCLUDED K AND L SHELL IONISATIONS AND CHARGE STATES 1 2 AND 3    
#  2014: UPDATE TO CORRECT THE BEF SCALING FORMULA 
#-----------------------------------------------------------------------
#        TOTAL OSCILLATOR SUM FOR EXCITED STATES F=0.860           
#-----------------------------------------------------------------      
#                                                                       
#  PARAMETERS OF PHASE SHIFT ANALYSIS.                                  
#                                                                       
      APOL=11.08                                                        
      LMAX=100                                                          
      AA=-1.459                                                         
      DD=68.93                                                          
      FF=-97.0                                                          
      A1=8.69       
      API=DACOS(-1.00)
      A0=0.52917720859D-8
      RY=13.60569193 
      CONST=1.873884D-20
      EMASS2=1021997.804
      BBCONST=16.0*API*A0*A0*RY*RY/EMASS2
      CONST=1.873884D-20
#
      AM2=3.593
      C=39.70  
#
      PSCALE=0.90 
#     
#  AVERAGE AUGER EMISSIONS FROM EACH SHELL
      AUGL3=2.0
      AUGL2=1.0
      AUGL1=2.63
      AUGK=3.39
#
      NION=7
      NATT=1                
      NIN=44 
      NNULL=0
#
      NBREM=25
      DO 6 J=1,NIN
      IZBR(J)=0
    6 CONTINUE
      IZBR(45)=18
#
      DO 1 J=1,6
    1 KEL(J)=NANISO
      DO 2 J=1,NIN
    2 KIN(J)=NANISO
#      
      NDATA=117
      NEPSI=217               
      NIDATA=75
      NION2=47
      NION3=36
      NKSH=89
      NL1S=101
      NL2S=104
      NL3S=104
      N1S5=71
      N1S4=79
      N1S3=70 
      N1S2=70
      N2P10=54
      N2P9=17 
      N2P8=15            
      N2P7=17            
      N2P6=16
      N2P5=17
      N2P4=17
      N2P3=17
      N2P2=16            
      N2P1=17
      N3D6=19
      N3D5=26
      N3D3=20
      N3D4P=20  
      N3D4=23   
      N3D1PP=19
      N2S5=19   
      N3D1P=16 
      N3S1PPPP=21 
      N3S1PP=21
      N3S1PPP=16
      N2S3=19
#
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(39.948*AMU)                                       
      E(3)=15.75961
      E(4)=0.0          
      E(5)=0.0          
# OPAL BEATY FOR MINIMUM IONISING PARTICLE                              
      E(6)=15.0
# OPAL BEATY AT LOW ENERGY
      EOBY(1)=9.5  
      EOBY(2)=18.0    
      EOBY(3)=34.0    
# OPAL BEATY SPLITTING FOR SHELLS
      EOBY(4)=110.      
      EOBY(5)=110.0       
      EOBY(6)=150.0     
      EOBY(7)=1800.0        
#
      EION(1)=15.75961
      EION(2)=43.38928
      EION(3)=84.124
      EION(4)=248.4
      EION(5)=250.6
      EION(6)=326.3
      EION(7)=3205.9
      LEGAS(1)=0
      LEGAS(2)=0
      LEGAS(3)=0
      LEGAS(4)=1
      LEGAS(5)=1
      LEGAS(6)=1
      LEGAS(7)=1
      ISHELL(1)=0
      ISHELL(2)=0
      ISHELL(3)=0
      ISHELL(4)=4
      ISHELL(5)=3
      ISHELL(6)=2
      ISHELL(7)=1
# FLUORESCENCE AND AUGER DATA
      NC0(1)=0
      EC0(1)=0.0
      WKLM(1)=0.0
      EFL(1)=0.0
      NG1(1)=0
      EG1(1)=0.0
      NG2(1)=0
      EG2(1)=0.0
      NC0(2)=1
      EC0(2)=6.0 
      WKLM(2)=0.0
      EFL(2)=0.0
      NG1(2)=0
      EG1(2)=0.0
      NG2(2)=0
      EG2(2)=0.0
      NC0(3)=2
      EC0(3)=12.0
      WKLM(3)=0.0
      EFL(3)=0.0
      NG1(3)=0
      EG1(3)=0.0
      NG2(3)=0
      NG2(3)=0.0
      NC0(4)=2
      EC0(4)=210.5
      WKLM(4)=0.00147
      EFL(4)=232.
      NG1(4)=1
      EG1(4)=210.5
      NG2(4)=1
      EG2(4)=5.0
      NC0(5)=2
      EC0(5)=202.2
      WKLM(5)=0.00147
      EFL(5)=235.
      NG1(5)=1
      EG1(5)=202.2
      NG2(5)=1
      EG2(5)=5.0
      NC0(6)=3
      EC0(6)=240.8
      WKLM(6)=0.00147
      EFL(6)=310.
      NG1(6)=2
      EG1(6)=240.8
      NG2(6)=1
      EG2(6)=5.0
      NC0(7)=4
      EC0(7)=3071.
      WKLM(7)=0.12
      EFL(7)=2957.
      NG1(7)=3
      EG1(7)=2850.
      NG2(7)=2
      EG2(7)=220.
#
      DO 776 J=1,NION
      DO 777 I=1,4000
      IF(EG(I):
 > EION(J)) :
       IOFFION(J)=I-1
       GO TO 776
      # endIF
  777 CONTINUE
  776 CONTINUE
#
      EIN(1)=11.548
      EIN(2)=11.624
      EIN(3)=11.723
      EIN(4)=11.828
      EIN(5)=12.907
      EIN(6)=13.076
      EIN(7)=13.095
      EIN(8)=13.153
      EIN(9)=13.172
      EIN(10)=13.273
      EIN(11)=13.283
      EIN(12)=13.302
      EIN(13)=13.328
      EIN(14)=13.480
      EIN(15)=13.845
      EIN(16)=13.864
      EIN(17)=13.903
      EIN(18)=13.979
      EIN(19)=14.013
      EIN(20)=14.063
      EIN(21)=14.068
      EIN(22)=14.090
      EIN(23)=14.099
      EIN(24)=14.153
      EIN(25)=14.214
      EIN(26)=14.234
      EIN(27)=14.236
      EIN(28)=14.241
      EIN(29)=14.255
      EIN(30)=14.304
      EIN(31)=14.711
      EIN(32)=14.848
      EIN(33)=14.859
      EIN(34)=15.004
      EIN(35)=15.022
      EIN(36)=15.118
      EIN(37)=15.186
      EIN(38)=15.190
      EIN(39)=15.308
      EIN(40)=15.351
      EIN(41)=15.360
      EIN(42)=15.366
      EIN(43)=15.374
      EIN(44)=15.660
      EIN(45)=0.0
#**********************************************************************
# ENTER PENNING TRANSFER FRACTION FOR EACH LEVEL
# USE TRANSFER FRACTION IN RANGE BETWEEN 0.0 AND 0.2 FOR MOST MIXTURES
      DO 50 NL=1,NIN
      PENFRA[1,NL]=0.2
# PENNING TRANSFER DISTANCE MICRONS
      PENFRA[2,NL]=1.0
# PENNING TRANSFER TIME PICOSECONDS
   50 PENFRA[3,NL]=1.0
#**********************************************************************
      IF(IPEN == 0):
 GO TO 4 
      DO 3 KDUM=1,NIN
      IF(PENFRA[1,KDUM] == 0.0):
 GO TO 3
      WRITE(6,999) NAME,EIN(KDUM),PENFRA[1,KDUM],PENFRA[2,KDUM],
     /PENFRA[3,KDUM]
  999 FORMAT(' GAS = ',A15,' ENERGY LEVEL = ',F7.4,' EV.',/,' PENNING PR
     /OBABILITY =',F5.3,' ABS.LENGTH =',F7.2,' DECAY TIME =',F7.1,/)    
    3 CONTINUE
    4 DO 5 NL=1,NIN
      DO 651 I=1,4000
      IF(EG(I):
 > EIN(NL)) :
       IOFFN(NL)=I-1 
       GO TO 5
      # endIF
  651 CONTINUE
    5 CONTINUE
#
      SCRPT(1)='                                                  '
      SCRPT(2)=' ELASTIC ANISOTROPIC       ARGON                  '
      IF(NANISO == 0):
 :
      SCRPT(2)=' ELASTIC ISOTROPIC         ARGON                  '
      # endIF
      SCRPT(3)=' IONISATION CHARGE STATE =1      ELOSS=   15.75961'
      SCRPT(4)=' IONISATION CHARGE STATE =2      ELOSS=   43.38928'
      SCRPT(5)=' IONISATION CHARGE STATE =3      ELOSS=   84.124  '
      SCRPT(6)=' IONISATION L3 SHELL             ELOSS=  248.4    '
      SCRPT(7)=' IONISATION L2 SHELL             ELOSS=  250.6    '
      SCRPT(8)=' IONISATION L1 SHELL             ELOSS=  326.3    '
      SCRPT(9)=' IONISATION K  SHELL             ELOSS= 3205.9    '
      SCRPT(10)=' ATTACHMENT                                       '
      SCRPT(11)='                                                  ' 
      SCRPT(12)='                                                  '
      SCRPT(13)=' EXC 1S5    J=2 METASTABLE         ELEVEL= 11.548 '
      SCRPT(14)=' EXC 1S4    J=1 RESONANT           ELEVEL= 11.624 '
      SCRPT(15)=' EXC 1S3    J=0 METASTABLE         ELEVEL= 11.723 '
      SCRPT(16)=' EXC 1S2    J=1 RESONANT           ELEVEL= 11.828 '
      SCRPT(17)=' EXC 2P10   J=1                    ELEVEL= 12.907 '
      SCRPT(18)=' EXC 2P9    J=3                    ELEVEL= 13.076 ' 
      SCRPT(19)=' EXC 2P8    J=2                    ELEVEL= 13.095 '
      SCRPT(20)=' EXC 2P7    J=1                    ELEVEL= 13.153 ' 
      SCRPT(21)=' EXC 2P6    J=2                    ELEVEL= 13.172 '
      SCRPT(22)=' EXC 2P5    J=0                    ELEVEL= 13.273 ' 
      SCRPT(23)=' EXC 2P4    J=1                    ELEVEL= 13.283 '
      SCRPT(24)=' EXC 2P3    J=2                    ELEVEL= 13.302 ' 
      SCRPT(25)=' EXC 2P2    J=1                    ELEVEL= 13.328 '
      SCRPT(26)=' EXC 2P1    J=0                    ELEVEL= 13.480 ' 
      SCRPT(27)=' EXC 3D6    J=0                    ELEVEL= 13.845 '
      SCRPT(28)=' EXC 3D5    J=1 RESONANT           ELEVEL= 13.864 ' 
      SCRPT(29)=' EXC 3D3    J=2                    ELEVEL= 13.903 ' 
      SCRPT(30)=' EXC 3D4#   J=4                    ELEVEL= 13.979 '
      SCRPT(31)=' EXC 3D4    J=3                    ELEVEL= 14.013 ' 
      SCRPT(32)=' EXC 3D1##  J=2                    ELEVEL= 14.063 '
      SCRPT(33)=' EXC 2S5    J=2                    ELEVEL= 14.068 '
      SCRPT(34)=' EXC 2S4    J=1 RESONANT           ELEVEL= 14.090 '
      SCRPT(35)=' EXC 3D1#   J=3                    ELEVEL= 14.099 '
      SCRPT(36)=' EXC 3D2    J=1 RESONANT           ELEVEL= 14.153 '
      SCRPT(37)=' EXC 3S1####J=2                    ELEVEL= 14.214 '
      SCRPT(38)=' EXC 3S1##  J=2                    ELEVEL= 14.234 '
      SCRPT(39)=' EXC 3S1### J=3                    ELEVEL= 14.236 '
      SCRPT(40)=' EXC 2S3    J=0                    ELEVEL= 14.241 '
      SCRPT(41)=' EXC 2S2    J=1 RESONANT           ELEVEL= 14.255 '
      SCRPT(42)=' EXC 3S1#   J=1 RESONANT           ELEVEL= 14.304 '
      SCRPT(43)=' EXC 4D5    J=1 RESONANT           ELEVEL= 14.711 '
      SCRPT(44)=' EXC 3S4    J=1 RESONANT           ELEVEL= 14.848 ' 
      SCRPT(45)=' EXC 4D2    J=1 RESONANT           ELEVEL= 14.859 '
      SCRPT(46)=' EXC 4S1#   J=1 RESONANT           ELEVEL= 15.004 '
      SCRPT(47)=' EXC 3S2    J=1 RESONANT           ELEVEL= 15.022 '
      SCRPT(48)=' EXC 5D5    J=1 RESONANT           ELEVEL= 15.118 '
      SCRPT(49)=' EXC 4S4    J=1 RESONANT           ELEVEL= 15.186 ' 
      SCRPT(50)=' EXC 5D2    J=1 RESONANT           ELEVEL= 15.190 '
      SCRPT(51)=' EXC 6D5    J=1 RESONANT           ELEVEL= 15.308 '
      SCRPT(52)=' EXC 5S1#   J=1 RESONANT           ELEVEL= 15.351 '
      SCRPT(53)=' EXC 4S2    J=1 RESONANT           ELEVEL= 15.360 '
      SCRPT(54)=' EXC 5S4    J=1 RESONANT           ELEVEL= 15.366 ' 
      SCRPT(55)=' EXC 6D2    J=1 RESONANT           ELEVEL= 15.374 '
      SCRPT(56)=' EXC HIGH   J=1 RESONANT           ELEVEL= 15.660 '
      SCRPT(57)=' BREMSSTRAHLUNG FROM ARGON ATOM                   '
#
#     EN=-ESTEP/2.0   
      DO 900 I=1,NSTEP
      EN=EG(I)
#     EN=EN+ESTEP
      IF(EN > EIN(1):
) :
       GAMMA1=(EMASS2+2.00*EN)/EMASS2
       GAMMA2=GAMMA1*GAMMA1
       BETA=math.sqrt(1.00-1.00/GAMMA2)
       BETA2=BETA*BETA
      # endIF
      IF(EN > 1.0):
 GO TO 100                                           
      IF(EN == 0.0):
 QELA=7.491D-16
      IF(EN == 0.0):
 QMOM=7.491D-16
      IF(EN == 0.0):
 GO TO 200                                           
      AK=math.sqrt(EN/ARY)
      AK2=AK*AK
      AK3=AK2*AK  
      AK4=AK3*AK                                                
      AN0=-AA*AK*(1.0+(4.0*APOL/3.0)*AK2*math.log(AK))-(API*APOL/3.0)*AK2+ 
     /DD*AK3+FF*AK4                                                     
      AN1=(API/15.0)*APOL*AK2-A1*AK3                                    
      AN2=API*APOL*AK2/105.0                                            
      AN0=DATAN(AN0)                                                    
      AN1=DATAN(AN1)                                                    
      AN2=DATAN(AN2)
      ANHIGH=AN2                                                    
      SUM=(DSIN(AN0-AN1))**2                                            
      SUM=SUM+2.0*(DSIN(AN1-AN2))**2
      SIGEL=(DSIN(AN0))**2+3.0*(DSIN(AN1))**2                           
      DO 10 J=2,LMAX-1
      ANLOW=ANHIGH                                                  
      SUMI=6.0/((2.0*J+5.0)*(2.0*J+3.0)*(2.0*J+1.0)*(2.0*J-1.0))        
      SUM=SUM+(J+1.0)*(DSIN(DATAN(API*APOL*AK2*SUMI)))**2
      ANHIGH=DATAN(API*APOL*AK2/((2.0*J+5.0)*(2.0*J+3.0)*(2.0*J+1.0)))
      SIGEL=SIGEL+(2.0*J+1.0)*(DSIN(ANLOW))**2             
   10 CONTINUE 
      QELA=SIGEL*4.0*PIR2/AK2                                           
      QMOM=SUM*4.0*PIR2/AK2   
      GO TO 200                                                         
  100 CONTINUE             
      DO 110 J=2,NDATA
      IF(EN <= XEN(J):
) GO TO 120
  110 CONTINUE
      J=NDATA
  120 A=(YEL(J)-YEL(J-1))/(XEN(J)-XEN(J-1))
      B=(XEN(J-1)*YEL(J)-XEN(J)*YEL(J-1))/(XEN(J-1)-XEN(J))
      QELA=(A*EN+B)*1.0D-16                             
      A=(YSEC(J)-YSEC(J-1))/(XEN(J)-XEN(J-1))                         
      B=(XEN(J-1)*YSEC(J)-XEN(J)*YSEC(J-1))/(XEN(J-1)-XEN(J))         
      QMOM=(A*EN+B)*1.0D-16  
  200 CONTINUE                                         
      PQ1=0.5+(QELA-QMOM)/QELA
      DO 201 J=2,NEPSI
      IF(EN <= XEPS(J):
) GO TO 202
  201 CONTINUE
      J=NEPSI
  202 A=(YEPS(J)-YEPS(J-1))/(XEPS(J)-XEPS(J-1))
      B=(XEPS(J-1)*YEPS(J)-XEPS(J)*YEPS(J-1))/(XEPS(J-1)-XEPS(J))
      PQ2=A*EN+B
# EPSILON =1-PQ2
      PQ2=1.00-PQ2
      IF(NANISO == 0):
 PEQEL(2,I)=0.5
      IF(NANISO == 1):
 PEQEL(2,I)=PQ1
      IF(NANISO == 2):
 PEQEL(2,I)=PQ2
      Q(2,I)=QELA
      IF(NANISO == 0):
 Q(2,I)=QMOM
#   IONISATION FOR CHARGE =1                                               
      QION(1,I)=0.0
      PEQION(1,I)=0.50 
      IF(NANISO == 2):
 PEQION(1,I)=0.00                            
      IF(EN <= EION(1):
) GO TO 223  
      IF(EN > XENI(NIDATA):
) GO TO 221                                 
      DO 210 J=2,NIDATA                                                 
      IF(EN <= XENI(J):
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NIDATA                                                          
  220 A=(YEN1(J)-YEN1(J-1))/(XENI(J)-XENI(J-1))                       
      B=(XENI(J-1)*YEN1(J)-XENI(J)*YEN1(J-1))/(XENI(J-1)-XENI(J))     
      QION(1,I)=(A*EN+B)*1.0D-16
      GO TO 222
# USE BORN-BETHE X-SECTION ABOVE XENI(NIDATA) EV     
  221 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(1,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.9466
  222 CONTINUE                        
# USE ANISOTROPIC SCATTERING FOR PRIMARY IONISATION ELECTRON FOR
# ENERGIES ABOVE 2 * IONISATION ENERGY
# ANISOTROPIC ANGULAR DISTRIBUTION SAME AS ELASTIC AT ENERGY OFFSET BY
# IONISATION ENERGY
      IF(EN <= (2.0*EION(1):
)) GO TO 223
      PEQION(1,I)=PEQEL(2,(I-IOFFION(1)))
#
# IONISATION FOR CHARGE =2
  223 QION(2,I)=0.0
      PEQION(2,I)=0.50 
      IF(NANISO == 2):
 PEQION(2,I)=0.00                            
      IF(EN <= EION(2):
) GO TO 3223  
      IF(EN > XEN2(NION2):
) GO TO 3221                                 
      DO 3210 J=2,NION2                                               
      IF(EN <= XEN2(J):
) GO TO 3220                                      
 3210 CONTINUE                                                          
      J=NION2                                                          
 3220 A=(YEN2(J)-YEN2(J-1))/(XEN2(J)-XEN2(J-1))                       
      B=(XEN2(J-1)*YEN2(J)-XEN2(J)*YEN2(J-1))/(XEN2(J-1)-XEN2(J))     
      QION(2,I)=(A*EN+B)*1.0D-16
      IF(QION(2,I):
 < 0.0) QION(2,I)=0.0
      GO TO 3222
# USE BORN-BETHE X-SECTION ABOVE XEN2(NION2) EV     
 3221 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(2,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.04448
 3222 CONTINUE                        
# USE ANISOTROPIC SCATTERING FOR PRIMARY IONISATION ELECTRON FOR
# ENERGIES ABOVE 2 * IONISATION ENERGY
# ANISOTROPIC ANGULAR DISTRIBUTION SAME AS ELASTIC AT ENERGY OFFSET BY
# IONISATION ENERGY
      IF(EN <= (2.0*EION(2):
)) GO TO 3223
      PEQION(2,I)=PEQEL(2,(I-IOFFION(2)))
#
# IONISATION FOR CHARGE =3
 3223 QION(3,I)=0.0
      PEQION(3,I)=0.50 
      IF(NANISO == 2):
 PEQION(3,I)=0.00                            
      IF(EN <= EION(3):
) GO TO 4223  
      IF(EN > XEN3(NION3):
) GO TO 4221                                 
      DO 4210 J=2,NION3                                                
      IF(EN <= XEN3(J):
) GO TO 4220                                      
 4210 CONTINUE                                                          
      J=NION3                                                          
 4220 A=(YEN3(J)-YEN3(J-1))/(XEN3(J)-XEN3(J-1))                       
      B=(XEN3(J-1)*YEN3(J)-XEN3(J)*YEN3(J-1))/(XEN3(J-1)-XEN3(J))     
      QION(3,I)=(A*EN+B)*1.0D-16
      IF(QION(3,I):
 < 0.0) QION(3,I)=0.0
      GO TO 4222
# USE BORN-BETHE X-SECTION ABOVE XEN3(NION3) EV     
 4221 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(3,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.00987 
 4222 CONTINUE                        
# USE ANISOTROPIC SCATTERING FOR PRIMARY IONISATION ELECTRON FOR
# ENERGIES ABOVE 2 * IONISATION ENERGY
# ANISOTROPIC ANGULAR DISTRIBUTION SAME AS ELASTIC AT ENERGY OFFSET BY
# IONISATION ENERGY
      IF(EN <= (2.0*EION(3):
)) GO TO 4223
      PEQION(3,I)=PEQEL(2,(I-IOFFION(3)))
# CALCULATE L3 SHELL IONISATION
 4223 QION(4,I)=0.00
      PEQION(4,I)=0.5
      IF(NANISO == 2):
 PEQION(4,I)=0.0
      IF(EN <= EION(4):
) GO TO 224
      DO 2231 J=2,NL3S
      IF(EN <= XL3S(J):
) GO TO 2232
 2231 CONTINUE
      J=NL3S
 2232 A=(YL3S(J)-YL3S(J-1))/(XL3S(J)-XL3S(J-1))
      B=(XL3S(J-1)*YL3S(J)-XL3S(J)*YL3S(J-1))/(XL3S(J-1)-XL3S(J))
      QION(4,I)=(A*EN+B)*1.D-16
      PEQION(4,I)=PEQEL(2,(I-IOFFION(4)))
# CALCULATE L2 SHELL IONISATION
  224 QION(5,I)=0.00
      PEQION(5,I)=0.5
      IF(NANISO == 2):
 PEQION(5,I)=0.0
      IF(EN <= EION(5):
) GO TO 225
      DO 2241 J=2,NL2S
      IF(EN <= XL2S(J):
) GO TO 2242
 2241 CONTINUE
      J=NL2S
 2242 A=(YL2S(J)-YL2S(J-1))/(XL2S(J)-XL2S(J-1))
      B=(XL2S(J-1)*YL2S(J)-XL2S(J)*YL2S(J-1))/(XL2S(J-1)-XL2S(J))
      QION(5,I)=(A*EN+B)*1.D-16
      PEQION(5,I)=PEQEL(2,(I-IOFFION(5)))
# CALCULATE L1 SHELL IONISATION
  225 QION(6,I)=0.00
      PEQION(6,I)=0.5
      IF(NANISO == 2):
 PEQION(6,I)=0.0
      IF(EN <= EION(6):
) GO TO 226
      DO 2251 J=2,NL1S
      IF(EN <= XL1S(J):
) GO TO 2252
 2251 CONTINUE
      J=NL1S
 2252 A=(YL1S(J)-YL1S(J-1))/(XL1S(J)-XL1S(J-1))
      B=(XL1S(J-1)*YL1S(J)-XL1S(J)*YL1S(J-1))/(XL1S(J-1)-XL1S(J))
      QION(6,I)=(A*EN+B)*1.D-16
      PEQION(6,I)=PEQEL(2,(I-IOFFION(6)))
# CALCULATE K  SHELL IONISATION
  226 QION(7,I)=0.00
      PEQION(7,I)=0.5
      IF(NANISO == 2):
 PEQION(7,I)=0.0
      IF(EN <= EION(7):
) GO TO 227   
      DO 2261 J=2,NKSH
      IF(EN <= XKSH(J):
) GO TO 2262
 2261 CONTINUE
      J=NKSH
 2262 A=(YKSH(J)-YKSH(J-1))/(XKSH(J)-XKSH(J-1))
      B=(XKSH(J-1)*YKSH(J)-XKSH(J)*YKSH(J-1))/(XKSH(J-1)-XKSH(J))
      QION(7,I)=(A*EN+B)*1.D-16
      PEQION(7,I)=PEQEL(2,(I-IOFFION(7)))
# ATTACHMENT
  227 Q(4,I)=0.0
      QATT(1,I)=Q(4,I)    
# COUNTING IONISATION        
      Q(5,I)=0.0            
      PEQEL(5,I)=0.50
      IF(NANISO == 2):
 PEQEL(5,I)=0.00
      IF(EN <= E(3):
) GO TO 250
      IF(EN > XENI(NIDATA):
) GO TO 241
      DO 231 J=2,NIDATA
      IF(EN <= XENI(J):
) GO TO 240
  231 CONTINUE
      J=NIDATA
  240 A=(YENC(J)-YENC(J-1))/(XENI(J)-XENI(J-1))
      B=(XENI(J-1)*YENC(J)-XENI(J)*YENC(J-1))/(XENI(J-1)-XENI(J))
      Q(5,I)=(A*EN+B)*1.0D-16
      GO TO 250
# USE BORN-BETHE X-SECTION ABOVE XENI(NIDATA) EV
  241 Q(5,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)         
  250 CONTINUE
# CORRECTION TO CHARGE STATE 1 2 AND 3 X-SECTION FOR K AND L SHELLS
# GIVES TOTAL IONISATION EQUAL TO OSCILLATOR SUM
      QTEMP=QION(4,I)+QION(5,I)+QION(6,I)+QION(7,I)
      IF(Q(5,I):
 == 0.0) :
       QCORR=1.0
      else:
       QCORR=(Q(5,I)-QTEMP)/Q(5,I)
      # endIF
      QION(1,I)=QION(1,I)*QCORR
      QION(2,I)=QION(2,I)*QCORR
      QION(3,I)=QION(3,I)*QCORR 
#      
      Q(6,I)=0.0                                                        
#                                                                       
      DO 251 NL=1,NIN
      QIN(NL,I)=0.0
      PEQIN(NL,I)=0.50
      IF(NANISO == 2):
 :
       PEQIN(NL,I)=0.00
      # endIF
  251 CONTINUE
# 1S5
      IF(EN <= EIN(1):
) GO TO 413   
      IF(EN > X1S5(N1S5):
) GO TO 3111                                
      DO 310 J=2,N1S5                                                   
      IF(EN <= X1S5(J):
) GO TO 311                                      
  310 CONTINUE                                                          
      J=N1S5                                                            
  311 A=(Y1S5(J)-Y1S5(J-1))/(X1S5(J)-X1S5(J-1))                         
      B=(X1S5(J-1)*Y1S5(J)-X1S5(J)*Y1S5(J-1))/(X1S5(J-1)-X1S5(J))      
      QIN(1,I)=(A*EN+B)*1.0D-18
      GO TO 3112
# IF ENERGY GT X1S5(N1S5) EV SCALE BY 1/E**3
 3111 QIN(1,I)=Y1S5(N1S5)*(X1S5(N1S5)/EN)**3*1.0D-18     
 3112 IF(EN <= (2.0*EIN(1))) GO TO 312
      PEQIN(1,I)=PEQEL(2,(I-IOFFN(1)))
# 1S4 F=0.0580
  312 IF(EN <= EIN(2)) GO TO 413
      IF(EN > X1S4(N1S4):
) GO TO 3141
      DO 313 J=2,N1S4                                                   
      IF(EN <= X1S4(J):
) GO TO 314                                      
  313 CONTINUE                                                          
      J=N1S4                                                            
  314 A=(Y1S4(J)-Y1S4(J-1))/(X1S4(J)-X1S4(J-1))                         
      B=(X1S4(J-1)*Y1S4(J)-X1S4(J)*Y1S4(J-1))/(X1S4(J-1)-X1S4(J))      
      QIN(2,I)=(A*EN+B)*1.0D-18
      GO TO 3142
 3141 QIN(2,I)=0.0580/(EIN(2)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(2)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(2))
 3142 IF(EN <= (2.0*EIN(2))) GO TO 315
      PEQIN(2,I)=PEQEL(2,(I-IOFFN(2)))
# 1S3
  315 IF(EN <= EIN(3)) GO TO 413
      IF(EN > X1S3(N1S3):
) GO TO 3171
      DO 316 J=2,N1S3                                                   
      IF(EN <= X1S3(J):
) GO TO 317                                      
  316 CONTINUE                                                          
      J=N1S3                                                            
  317 A=(Y1S3(J)-Y1S3(J-1))/(X1S3(J)-X1S3(J-1))                         
      B=(X1S3(J-1)*Y1S3(J)-X1S3(J)*Y1S3(J-1))/(X1S3(J-1)-X1S3(J))      
      QIN(3,I)=(A*EN+B)*1.0D-18
      GO TO 3172
# IF ENERGY GT X1S3(N1S3) EV SCALE BY 1/E**3
 3171 QIN(3,I)=Y1S3(N1S3)*(X1S3(N1S3)/EN)**3*1.D-18
 3172 IF(EN <= (2.0*EIN(3))) GO TO 318
      PEQIN(3,I)=PEQEL(2,(I-IOFFN(3)))
# 1S2  F=0.2260
  318 IF(EN <= EIN(4)) GO TO 413
      IF(EN > X1S2(N1S2):
) GO TO 3201
      DO 319 J=2,N1S2                                                   
      IF(EN <= X1S2(J):
) GO TO 320                                      
  319 CONTINUE                                                          
      J=N1S2                                                            
  320 A=(Y1S2(J)-Y1S2(J-1))/(X1S2(J)-X1S2(J-1))                         
      B=(X1S2(J-1)*Y1S2(J)-X1S2(J)*Y1S2(J-1))/(X1S2(J-1)-X1S2(J))      
      QIN(4,I)=(A*EN+B)*1.0D-18
      GO TO 3202
 3201 QIN(4,I)=0.2260/(EIN(4)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(4)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(4))
 3202 IF(EN <= (2.0*EIN(4))) GO TO 321
      PEQIN(4,I)=PEQEL(2,(I-IOFFN(4)))
#         
# P STATES
#
# 2P10
  321 IF(EN <= EIN(5)) GO TO 413
      IF(EN > X2P10(N2P10):
) GO TO 3231
      DO 322 J=2,N2P10
      IF(EN <= X2P10(J):
) GO TO 323
  322 CONTINUE
      J=N2P10
  323 A=(Y2P10(J)-Y2P10(J-1))/(X2P10(J)-X2P10(J-1))                    
      B=(X2P10(J-1)*Y2P10(J)-X2P10(J)*Y2P10(J-1))/(X2P10(J-1)-X2P10(J))
      QIN(5,I)=(A*EN+B)*1.D-18*PSCALE
      GO TO 3232
# IF ENERGY GT X2P10(N2P10) EV SCALE BY 1/E**2
 3231 QIN(5,I)=Y2P10(N2P10)*(X2P10(N2P10)/EN)**2*1.0D-18*PSCALE
 3232 IF(EN <= (2.0*EIN(5))) GO TO 324
      PEQIN(5,I)=PEQEL(2,(I-IOFFN(5)))
# 2P9
  324 IF(EN <= EIN(6)) GO TO 413
      IF(EN > X2P9(N2P9):
) GO TO 3261
      DO 325 J=2,N2P9
      IF(EN <= X2P9(J):
) GO TO 326
  325 CONTINUE
      J=N2P9
  326 A=(Y2P9(J)-Y2P9(J-1))/(X2P9(J)-X2P9(J-1))                    
      B=(X2P9(J-1)*Y2P9(J)-X2P9(J)*Y2P9(J-1))/(X2P9(J-1)-X2P9(J))
      QIN(6,I)=(A*EN+B)*1.D-18*PSCALE
      GO TO 3262
# IF ENERGY GT X2P9(N2P9) EV SCALE BY 1/E**2
 3261 QIN(6,I)=Y2P9(N2P9)*(X2P9(N2P9)/EN)**2*1.0D-18*PSCALE
 3262 IF(EN <= (2.0*EIN(6))) GO TO 327
      PEQIN(6,I)=PEQEL(2,(I-IOFFN(6)))
# 2P8
  327 IF(EN <= EIN(7)) GO TO 413
      IF(EN > X2P8(N2P8):
) GO TO 3291
      DO 328 J=2,N2P8
      IF(EN <= X2P8(J):
) GO TO 329
  328 CONTINUE
      J=N2P8
  329 A=(Y2P8(J)-Y2P8(J-1))/(X2P8(J)-X2P8(J-1))                    
      B=(X2P8(J-1)*Y2P8(J)-X2P8(J)*Y2P8(J-1))/(X2P8(J-1)-X2P8(J))
      QIN(7,I)=(A*EN+B)*1.D-18*PSCALE
      GO TO 3292
# IF ENERGY GT X2P8(N2P8) EV SCALE BY 1/E
 3291 QIN(7,I)=Y2P8(N2P8)*(X2P8(N2P8)/EN)*1.0D-18*PSCALE
 3292 IF(EN <= (2.0*EIN(7))) GO TO 330
      PEQIN(7,I)=PEQEL(2,(I-IOFFN(7)))
# 2P7
  330 IF(EN <= EIN(8)) GO TO 413
      IF(EN > X2P7(N2P7):
) GO TO 3321
      DO 331 J=2,N2P7
      IF(EN <= X2P7(J):
) GO TO 332
  331 CONTINUE
      J=N2P7
  332 A=(Y2P7(J)-Y2P7(J-1))/(X2P7(J)-X2P7(J-1))                    
      B=(X2P7(J-1)*Y2P7(J)-X2P7(J)*Y2P7(J-1))/(X2P7(J-1)-X2P7(J))
      QIN(8,I)=(A*EN+B)*1.D-18*PSCALE
      GO TO 3322
# IF ENERGY GT X2P7(N2P7) EV SCALE BY 1/E**2
 3321 QIN(8,I)=Y2P7(N2P7)*(X2P7(N2P7)/EN)**2*1.0D-18*PSCALE
 3322 IF(EN <= (2.0*EIN(8))) GO TO 333
      PEQIN(8,I)=PEQEL(2,(I-IOFFN(8)))
# 2P6
  333 IF(EN <= EIN(9)) GO TO 413
      IF(EN > X2P6(N2P6):
) GO TO 3351
      DO 334 J=2,N2P6
      IF(EN <= X2P6(J):
) GO TO 335
  334 CONTINUE
      J=N2P6
  335 A=(Y2P6(J)-Y2P6(J-1))/(X2P6(J)-X2P6(J-1))                    
      B=(X2P6(J-1)*Y2P6(J)-X2P6(J)*Y2P6(J-1))/(X2P6(J-1)-X2P6(J))
      QIN(9,I)=(A*EN+B)*1.D-18*PSCALE
      GO TO 3352
# IF ENERGY GT X2P6(N2P6) EV SCALE BY 1/E
 3351 QIN(9,I)=Y2P6(N2P6)*(X2P6(N2P6)/EN)*1.0D-18*PSCALE
 3352 IF(EN <= (2.0*EIN(9))) GO TO 336
      PEQIN(9,I)=PEQEL(2,(I-IOFFN(9)))
# 2P5
  336 IF(EN <= EIN(10)) GO TO 413
      IF(EN > X2P5(N2P5):
) GO TO 3381
      DO 337 J=2,N2P5
      IF(EN <= X2P5(J):
) GO TO 338
  337 CONTINUE
      J=N2P5
  338 A=(Y2P5(J)-Y2P5(J-1))/(X2P5(J)-X2P5(J-1))                    
      B=(X2P5(J-1)*Y2P5(J)-X2P5(J)*Y2P5(J-1))/(X2P5(J-1)-X2P5(J))
      QIN(10,I)=(A*EN+B)*1.D-18*PSCALE
      GO TO 3382
# IF ENERGY GT X2P5(N2P5) EV SCALE BY 1/E
 3381 QIN(10,I)=Y2P5(N2P5)*(X2P5(N2P5)/EN)*1.0D-18*PSCALE
 3382 IF(EN <= (2.0*EIN(10))) GO TO 339
      PEQIN(10,I)=PEQEL(2,(I-IOFFN(10)))
# 2P4
  339 IF(EN <= EIN(11)) GO TO 413
      IF(EN > X2P4(N2P4):
) GO TO 3411
      DO 340 J=2,N2P4
      IF(EN <= X2P4(J):
) GO TO 341
  340 CONTINUE
      J=N2P4
  341 A=(Y2P4(J)-Y2P4(J-1))/(X2P4(J)-X2P4(J-1))                    
      B=(X2P4(J-1)*Y2P4(J)-X2P4(J)*Y2P4(J-1))/(X2P4(J-1)-X2P4(J))
      QIN(11,I)=(A*EN+B)*1.D-18*PSCALE
      GO TO 3412
# IF ENERGY GT X2P4(N2P4) EV SCALE BY 1/E**2
 3411 QIN(11,I)=Y2P4(N2P4)*(X2P4(N2P4)/EN)**2*1.0D-18*PSCALE
 3412 IF(EN <= (2.0*EIN(11))) GO TO 342
      PEQIN(11,I)=PEQEL(2,(I-IOFFN(11)))
# 2P3
  342 IF(EN <= EIN(12)) GO TO 413
      IF(EN > X2P3(N2P3):
) GO TO 3441
      DO 343 J=2,N2P3
      IF(EN <= X2P3(J):
) GO TO 344
  343 CONTINUE
      J=N2P3
  344 A=(Y2P3(J)-Y2P3(J-1))/(X2P3(J)-X2P3(J-1))                    
      B=(X2P3(J-1)*Y2P3(J)-X2P3(J)*Y2P3(J-1))/(X2P3(J-1)-X2P3(J))
      QIN(12,I)=(A*EN+B)*1.D-18*PSCALE
      GO TO 3442
# IF ENERGY GT X2P3(N2P3) EV SCALE BY 1/E
 3441 QIN(12,I)=Y2P3(N2P3)*(X2P3(N2P3)/EN)*1.0D-18*PSCALE
 3442 IF(EN <= (2.0*EIN(12))) GO TO 345
      PEQIN(12,I)=PEQEL(2,(I-IOFFN(12)))
# 2P2
  345 IF(EN <= EIN(13)) GO TO 413
      IF(EN > X2P2(N2P2):
) GO TO 3471
      DO 346 J=2,N2P2
      IF(EN <= X2P2(J):
) GO TO 347
  346 CONTINUE
      J=N2P2
  347 A=(Y2P2(J)-Y2P2(J-1))/(X2P2(J)-X2P2(J-1))                    
      B=(X2P2(J-1)*Y2P2(J)-X2P2(J)*Y2P2(J-1))/(X2P2(J-1)-X2P2(J))
      QIN(13,I)=(A*EN+B)*1.D-18*PSCALE
      GO TO 3472
# IF ENERGY GT X2P2(N2P2) EV SCALE BY 1/E**2
 3471 QIN(13,I)=Y2P2(N2P2)*(X2P2(N2P2)/EN)**2*1.0D-18*PSCALE
 3472 IF(EN <= (2.0*EIN(13))) GO TO 348
      PEQIN(13,I)=PEQEL(2,(I-IOFFN(13)))
# 2P1
  348 IF(EN <= EIN(14)) GO TO 413
      IF(EN > X2P1(N2P1):
) GO TO 3501
      DO 349 J=2,N2P1
      IF(EN <= X2P1(J):
) GO TO 350
  349 CONTINUE
      J=N2P1
  350 A=(Y2P1(J)-Y2P1(J-1))/(X2P1(J)-X2P1(J-1))                    
      B=(X2P1(J-1)*Y2P1(J)-X2P1(J)*Y2P1(J-1))/(X2P1(J-1)-X2P1(J))
      QIN(14,I)=(A*EN+B)*1.D-18*PSCALE
      GO TO 3502
# IF ENERGY GT X2P1(N2P1) EV SCALE BY 1/E
 3501 QIN(14,I)=Y2P1(N2P1)*(X2P1(N2P1)/EN)*1.0D-18*PSCALE
 3502 IF(EN <= (2.0*EIN(14))) GO TO 351
      PEQIN(14,I)=PEQEL(2,(I-IOFFN(14)))
# 3D6
  351 IF(EN <= EIN(15)) GO TO 413
      IF(EN > X3D6(N3D6):
) GO TO 3531
      DO 352 J=2,N3D6
      IF(EN <= X3D6(J):
) GO TO 353
  352 CONTINUE
      J=N3D6
  353 A=(Y3D6(J)-Y3D6(J-1))/(X3D6(J)-X3D6(J-1))                    
      B=(X3D6(J-1)*Y3D6(J)-X3D6(J)*Y3D6(J-1))/(X3D6(J-1)-X3D6(J))
      QIN(15,I)=(A*EN+B)*1.D-18
      GO TO 3532
# IF ENERGY GT X3D6(N3D6) EV SCALE BY 1/E**3
 3531 QIN(15,I)=Y3D6(N3D6)*(X3D6(N3D6)/EN)**3*1.0D-18
 3532 IF(EN <= (2.0*EIN(15))) GO TO 354
      PEQIN(15,I)=PEQEL(2,(I-IOFFN(15)))
# 3D5 F=0.0010 
  354 IF(EN <= EIN(16)) GO TO 413
      IF(EN > X3D5(N3D5):
) GO TO 3561
      DO 355 J=2,N3D5
      IF(EN <= X3D5(J):
) GO TO 356
  355 CONTINUE
      J=N3D5
  356 A=(Y3D5(J)-Y3D5(J-1))/(X3D5(J)-X3D5(J-1))                    
      B=(X3D5(J-1)*Y3D5(J)-X3D5(J)*Y3D5(J-1))/(X3D5(J-1)-X3D5(J))
      QIN(16,I)=(A*EN+B)*1.D-18
      GO TO 3562
 3561 QIN(16,I)=0.0010/(EIN(16)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(16)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(16))
      IF(QIN(16,I):
 < 0.0) QIN(16,I)=0.0
 3562 IF(EN <= (2.0*EIN(16))) GO TO 357
      PEQIN(16,I)=PEQEL(2,(I-IOFFN(16)))
# 3D3
  357 IF(EN <= EIN(17)) GO TO 413
      IF(EN > X3D3(N3D3):
) GO TO 3591
      DO 358 J=2,N3D3
      IF(EN <= X3D3(J):
) GO TO 359
  358 CONTINUE
      J=N3D3
  359 A=(Y3D3(J)-Y3D3(J-1))/(X3D3(J)-X3D3(J-1))                    
      B=(X3D3(J-1)*Y3D3(J)-X3D3(J)*Y3D3(J-1))/(X3D3(J-1)-X3D3(J))
      QIN(17,I)=(A*EN+B)*1.D-18
      GO TO 3592
# IF ENERGY GT X3D3(N3D3) EV SCALE BY 1/E**3
 3591 QIN(17,I)=Y3D3(N3D3)*(X3D3(N3D3)/EN)**3*1.0D-18
 3592 IF(EN <= (2.0*EIN(17))) GO TO 360
      PEQIN(17,I)=PEQEL(2,(I-IOFFN(17)))
# 3D4'
  360 IF(EN <= EIN(18)) GO TO 413
      IF(EN > X3D4P(N3D4P):
) GO TO 3621
      DO 361 J=2,N3D4P
      IF(EN <= X3D4P(J):
) GO TO 362
  361 CONTINUE
      J=N3D4P
  362 A=(Y3D4P(J)-Y3D4P(J-1))/(X3D4P(J)-X3D4P(J-1))                    
      B=(X3D4P(J-1)*Y3D4P(J)-X3D4P(J)*Y3D4P(J-1))/(X3D4P(J-1)-X3D4P(J))
      QIN(18,I)=(A*EN+B)*1.D-18
      GO TO 3622
# IF ENERGY GT X3D4P(N3D4P) EV SCALE BY 1/E**3
 3621 QIN(18,I)=Y3D4P(N3D4P)*(X3D4P(N3D4P)/EN)**3*1.0D-18
 3622 IF(EN <= (2.0*EIN(18))) GO TO 363
      PEQIN(18,I)=PEQEL(2,(I-IOFFN(18)))
# 3D4 
  363 IF(EN <= EIN(19)) GO TO 413
      IF(EN > X3D4(N3D4):
) GO TO 3651
      DO 364 J=2,N3D4
      IF(EN <= X3D4(J):
) GO TO 365
  364 CONTINUE
      J=N3D4
  365 A=(Y3D4(J)-Y3D4(J-1))/(X3D4(J)-X3D4(J-1))                    
      B=(X3D4(J-1)*Y3D4(J)-X3D4(J)*Y3D4(J-1))/(X3D4(J-1)-X3D4(J))
      QIN(19,I)=(A*EN+B)*1.D-18
      GO TO 3652
# IF ENERGY GT X3D4(N3D4) EV SCALE BY 1/E**2
 3651 QIN(19,I)=Y3D4(N3D4)*(X3D4(N3D4)/EN)**2*1.0D-18
 3652 IF(EN <= (2.0*EIN(19))) GO TO 366
      PEQIN(19,I)=PEQEL(2,(I-IOFFN(19)))
# 3D1''
  366 IF(EN <= EIN(20)) GO TO 413
      IF(EN > X3D1PP(N3D1PP):
) GO TO 3681
      DO 367 J=2,N3D1PP
      IF(EN <= X3D1PP(J):
) GO TO 368
  367 CONTINUE
      J=N3D1PP
  368 A=(Y3D1PP(J)-Y3D1PP(J-1))/(X3D1PP(J)-X3D1PP(J-1))               
      B=(X3D1PP(J-1)*Y3D1PP(J)-X3D1PP(J)*Y3D1PP(J-1))/(X3D1PP(J-1)-
     /X3D1PP(J))
      QIN(20,I)=(A*EN+B)*1.D-18
      GO TO 3682
# IF EN GT X3D1PP(N3D1PP) EV  SCALE BY 1/E**2
 3681 QIN(20,I)=Y3D1PP(N3D1PP)*(X3D1PP(N3D1PP)/EN)**2*1.0D-18
 3682 IF(EN <= (2.0*EIN(20))) GO TO 369
      PEQIN(20,I)=PEQEL(2,(I-IOFFN(20)))
# 2S5 
  369 IF(EN <= EIN(21)) GO TO 413
      IF(EN > X2S5(N2S5):
) GO TO 3711
      DO 370 J=2,N2S5
      IF(EN <= X2S5(J):
) GO TO 371
  370 CONTINUE
      J=N2S5
  371 A=(Y2S5(J)-Y2S5(J-1))/(X2S5(J)-X2S5(J-1))                    
      B=(X2S5(J-1)*Y2S5(J)-X2S5(J)*Y2S5(J-1))/(X2S5(J-1)-X2S5(J))
      QIN(21,I)=(A*EN+B)*1.D-18
      GO TO 3712
# IF EN GT X2S5(N2S5) EV   SCALE BY 1/E**2
 3711 QIN(21,I)=Y2S5(N2S5)*(X2S5(N2S5)/EN)**2*1.0D-18
 3712 IF(EN <= (2.0*EIN(21))) GO TO 372
      PEQIN(21,I)=PEQEL(2,(I-IOFFN(21)))
# 2S4 F=0.0257
  372 IF(EN <= EIN(22)) GO TO 413
      QIN(22,I)=0.0257/(EIN(22)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(22)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(22))
      IF(QIN(22,I):
 < 0.0) QIN(22,I)=0.0
      IF(EN <= (2.0*EIN(22):
)) GO TO 375
      PEQIN(22,I)=PEQEL(2,(I-IOFFN(22)))
# 3D1' 
  375 IF(EN <= EIN(23)) GO TO 413
      IF(EN > X3D1P(N3D1P):
) GO TO 3771
      DO 376 J=2,N3D1P
      IF(EN <= X3D1P(J):
) GO TO 377
  376 CONTINUE
      J=N3D1P
  377 A=(Y3D1P(J)-Y3D1P(J-1))/(X3D1P(J)-X3D1P(J-1))                    
      B=(X3D1P(J-1)*Y3D1P(J)-X3D1P(J)*Y3D1P(J-1))/(X3D1P(J-1)-X3D1P(J))
      QIN(23,I)=(A*EN+B)*1.D-18
      GO TO 3772
# IF EN GT X3D1P(N3D1P) EV  SCALE BY 1/E
 3771 QIN(23,I)=Y3D1P(N3D1P)*(X3D1P(N3D1P)/EN)*1.0D-18
 3772 IF(EN <= (2.0*EIN(23))) GO TO 378
      PEQIN(23,I)=PEQEL(2,(I-IOFFN(23)))
# 3D2  F=0.074
  378 IF(EN <= EIN(24)) GO TO 413
      QIN(24,I)=0.0740/(EIN(24)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(24)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(24))
      IF(QIN(24,I):
 < 0.0) QIN(24,I)=0.0
      IF(EN <= (2.0*EIN(24):
)) GO TO 381
      PEQIN(24,I)=PEQEL(2,(I-IOFFN(24)))
# 3S1''''
  381 IF(EN <= EIN(25)) GO TO 413
      IF(EN > X3S1PPPP(N3S1PPPP):
) GO TO 3831
      DO 382 J=2,N3S1PPPP 
      IF(EN <= X3S1PPPP(J):
) GO TO 383
  382 CONTINUE
      J=N3S1PPPP
  383 A=(Y3S1PPPP(J)-Y3S1PPPP(J-1))/(X3S1PPPP(J)-X3S1PPPP(J-1))         
      B=(X3S1PPPP(J-1)*Y3S1PPPP(J)-X3S1PPPP(J)*Y3S1PPPP(J-1))/
     /(X3S1PPPP(J-1)-X3S1PPPP(J))
      QIN(25,I)=(A*EN+B)*1.D-18
      GO TO 3832
# IF EN GT X3S1PPPP(N3S1PPPP) EV  SCALE BY 1/E**3
 3831 QIN(25,I)=Y3S1PPPP(N3S1PPPP)*(X3S1PPPP(N3S1PPPP)/EN)**3*1.0D-18
 3832 IF(EN <= (2.0*EIN(25))) GO TO 384
      PEQIN(25,I)=PEQEL(2,(I-IOFFN(25)))
# 3S1''  
  384 IF(EN <= EIN(26)) GO TO 413
      IF(EN > X3S1PP(N3S1PP):
) GO TO 3861
      DO 385 J=2,N3S1PP 
      IF(EN <= X3S1PP(J):
) GO TO 386
  385 CONTINUE
      J=N3S1PP
  386 A=(Y3S1PP(J)-Y3S1PP(J-1))/(X3S1PP(J)-X3S1PP(J-1))         
      B=(X3S1PP(J-1)*Y3S1PP(J)-X3S1PP(J)*Y3S1PP(J-1))/(X3S1PP(J-1)-
     /X3S1PP(J))
      QIN(26,I)=(A*EN+B)*1.D-18
      GO TO 3862
# IF EN GT X3S1PP(N3S1PP) EV  SCALE BY 1/E**3
 3861 QIN(26,I)=Y3S1PP(N3S1PP)*(X3S1PP(N3S1PP)/EN)**3*1.0D-18
 3862 IF(EN <= (2.0*EIN(26))) GO TO 387
      PEQIN(26,I)=PEQEL(2,(I-IOFFN(26)))
# 3S1'''
  387 IF(EN <= EIN(27)) GO TO 413
      IF(EN > X3S1PPP(N3S1PPP):
) GO TO 3891
      DO 388 J=2,N3S1PPP 
      IF(EN <= X3S1PPP(J):
) GO TO 389
  388 CONTINUE
      J=N3S1PPP
  389 A=(Y3S1PPP(J)-Y3S1PPP(J-1))/(X3S1PPP(J)-X3S1PPP(J-1))         
      B=(X3S1PPP(J-1)*Y3S1PPP(J)-X3S1PPP(J)*Y3S1PPP(J-1))/
     /(X3S1PPP(J-1)-X3S1PPP(J))
      QIN(27,I)=(A*EN+B)*1.D-18
      GO TO 3892
# IF EN GT X3S1PPP(N3S1PPP) EV  SCALE BY 1/E
 3891 QIN(27,I)=Y3S1PPP(N3S1PPP)*(X3S1PPP(N3S1PPP)/EN)*1.0D-18
 3892 IF(EN <= (2.0*EIN(27))) GO TO 390
      PEQIN(27,I)=PEQEL(2,(I-IOFFN(27)))
# 2S3 
  390 IF(EN <= EIN(28)) GO TO 413
      IF(EN > X2S3(N2S3):
) GO TO 3921
      DO 391 J=2,N2S3
      IF(EN <= X2S3(J):
) GO TO 392
  391 CONTINUE
      J=N2S3
  392 A=(Y2S3(J)-Y2S3(J-1))/(X2S3(J)-X2S3(J-1))                    
      B=(X2S3(J-1)*Y2S3(J)-X2S3(J)*Y2S3(J-1))/(X2S3(J-1)-X2S3(J))
      QIN(28,I)=(A*EN+B)*1.D-18
      GO TO 3922
# IF EN GT X2S3(N2S3) EV  SCALE BY 1/E**2
 3921 QIN(28,I)=Y2S3(N2S3)*(X2S3(N2S3)/EN)**2*1.0D-18
 3922 IF(EN <= (2.0*EIN(28))) GO TO 393
      PEQIN(28,I)=PEQEL(2,(I-IOFFN(28)))
# 2S2  F=0.011
  393 IF(EN <= EIN(29)) GO TO 413
      QIN(29,I)=0.0110/(EIN(29)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(29)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(29))
      IF(QIN(29,I):
 < 0.0) QIN(29,I)=0.0
      IF(EN <= (2.0*EIN(29):
)) GO TO 396
      PEQIN(29,I)=PEQEL(2,(I-IOFFN(29)))
# 3S1' F=0.092
  396 IF(EN <= EIN(30)) GO TO 413
      QIN(30,I)=0.0920/(EIN(30)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(30)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(30))
      IF(QIN(30,I):
 < 0.0) QIN(30,I)=0.0
      IF(EN <= (2.0*EIN(30):
)) GO TO 399
      PEQIN(30,I)=PEQEL(2,(I-IOFFN(30)))
# 4D5 F=0.0019
  399 IF(EN <= EIN(31)) GO TO 413
      QIN(31,I)=0.0019/(EIN(31)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(31)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(31))
      IF(QIN(31,I):
 < 0.0) QIN(31,I)=0.0
      IF(EN <= (2.0*EIN(31):
)) GO TO 400
      PEQIN(31,I)=PEQEL(2,(I-IOFFN(31)))
# 3S4 F=0.0144
  400 IF(EN <= EIN(32)) GO TO 413
      QIN(32,I)=0.0144/(EIN(32)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(32)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(32))
      IF(QIN(32,I):
 < 0.0) QIN(32,I)=0.0
      IF(EN <= (2.0*EIN(32):
)) GO TO 401
      PEQIN(32,I)=PEQEL(2,(I-IOFFN(32)))
# 4D2 F=0.0484
  401 IF(EN <= EIN(33)) GO TO 413
      QIN(33,I)=0.0484/(EIN(33)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(33)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(33))
      IF(QIN(33,I):
 < 0.0) QIN(33,I)=0.0
      IF(EN <= (2.0*EIN(33):
)) GO TO 402
      PEQIN(33,I)=PEQEL(2,(I-IOFFN(33)))
# 4S1' F=0.0209
  402 IF(EN <= EIN(34)) GO TO 413
      QIN(34,I)=0.0209/(EIN(34)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(34)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(34))
      IF(QIN(34,I):
 < 0.0) QIN(34,I)=0.0
      IF(EN <= (2.0*EIN(34):
)) GO TO 403
      PEQIN(34,I)=PEQEL(2,(I-IOFFN(34)))
# 3S2  F=0.0220
  403 IF(EN <= EIN(35)) GO TO 413
      QIN(35,I)=0.0220/(EIN(35)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(35)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(35))
      IF(QIN(35,I):
 < 0.0) QIN(35,I)=0.0
      IF(EN <= (2.0*EIN(35):
)) GO TO 404
      PEQIN(35,I)=PEQEL(2,(I-IOFFN(35)))
# 5D5  F=0.0041
  404 IF(EN <= EIN(36)) GO TO 413
      QIN(36,I)=0.0041/(EIN(36)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(36)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(36))
      IF(QIN(36,I):
 < 0.0) QIN(36,I)=0.0
      IF(EN <= (2.0*EIN(36):
)) GO TO 405
      PEQIN(36,I)=PEQEL(2,(I-IOFFN(36)))
# 4S4  F=0.0426
  405 IF(EN <= EIN(37)) GO TO 413
      QIN(37,I)=0.0426/(EIN(37)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(37)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(37))
      IF(QIN(37,I):
 < 0.0) QIN(37,I)=0.0
      IF(EN <= (2.0*EIN(37):
)) GO TO 406
      PEQIN(37,I)=PEQEL(2,(I-IOFFN(37)))
# 5D2  F=0.0426
  406 IF(EN <= EIN(38)) GO TO 413
      QIN(38,I)=0.0426/(EIN(38)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(38)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(38))
      IF(QIN(38,I):
 < 0.0) QIN(38,I)=0.0
      IF(EN <= (2.0*EIN(38):
)) GO TO 407
      PEQIN(38,I)=PEQEL(2,(I-IOFFN(38)))
# 6D5  F=0.00075
  407 IF(EN <= EIN(39)) GO TO 413
      QIN(39,I)=.00075/(EIN(39)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(39)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(39))
      IF(QIN(39,I):
 < 0.0) QIN(39,I)=0.0
      IF(EN <= (2.0*EIN(39):
)) GO TO 408
      PEQIN(39,I)=PEQEL(2,(I-IOFFN(39)))
# 5S1' F=0.00051
  408 IF(EN <= EIN(40)) GO TO 413
      QIN(40,I)=.00051/(EIN(40)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(40)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(40))
      IF(QIN(40,I):
 < 0.0) QIN(40,I)=0.0
      IF(EN <= (2.0*EIN(40):
)) GO TO 409
      PEQIN(40,I)=PEQEL(2,(I-IOFFN(40)))
# 4S2  F=0.00074
  409 IF(EN <= EIN(41)) GO TO 413
      QIN(41,I)=.00074/(EIN(41)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(41)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(41))
      IF(QIN(41,I):
 < 0.0) QIN(41,I)=0.0
      IF(EN <= (2.0*EIN(41):
)) GO TO 410
      PEQIN(41,I)=PEQEL(2,(I-IOFFN(41)))
# 5S4  F=0.0130 
  410 IF(EN <= EIN(42)) GO TO 413
      QIN(42,I)=0.0130/(EIN(42)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(42)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(42))
      IF(QIN(42,I):
 < 0.0) QIN(42,I)=0.0
      IF(EN <= (2.0*EIN(42):
)) GO TO 411
      PEQIN(42,I)=PEQEL(2,(I-IOFFN(42)))
# 6D2  F=0.0290 
  411 IF(EN <= EIN(43)) GO TO 413 
      QIN(43,I)=0.0290/(EIN(43)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(43)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(43))
      IF(QIN(43,I):
 < 0.0) QIN(43,I)=0.0
      IF(EN <= (2.0*EIN(43):
)) GO TO 412
      PEQIN(43,I)=PEQEL(2,(I-IOFFN(43)))
# SUM HIGHER J=1 STATES F=0.1315
  412 IF(EN <= EIN(44)) GO TO 413
      QIN(44,I)=0.1315/(EIN(44)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(44)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(44))
      IF(QIN(44,I):
 < 0.0) QIN(44,I)=0.0
      IF(EN <= (2.0*EIN(44):
)) GO TO 413
      PEQIN(44,I)=PEQEL(2,(I-IOFFN(44)))
  413 CONTINUE
# BREMSSTRAHLUNG X-SECTION
c      QIN(45,I)=0.0
c      IF(EN <= 1000.) GO TO 450
c      DO 414 J=2,NBREM
c      IF(EN <= EBRM(J)) GO TO 415
c  414 CONTINUE
c      J=NBREM
c  415 A=(math.log(Z18T(J))-math.log(Z18T(J-1)))/(EBRM(J)-EBRM(J-1))
c      B=(math.log(Z18T(J))*EBRM(J-1)-math.log(Z18T(J-1))*EBRM(J))/
c     /(EBRM(J-1)-EBRM(J))
c      QIN(45,I)=math.exp(A*EN+B)*1.D-24
c  450 CONTINUE     
      Q1SSUM=QIN(1,I)+QIN(2,I)+QIN(3,I)+QIN(4,I) 
      QPSSUM=QIN(5,I)+QIN(6,I)+QIN(7,I)+QIN(8,I)+QIN(9,I)+QIN(10,I)+
     /QIN(11,I)+QIN(12,I)+QIN(13,I)+QIN(14,I)   
      QDSSUM=QIN(17,I)+QIN(18,I)+QIN(19,I)+QIN(20,I)+QIN(21,I)+QIN(22,I)
     /+QIN(23,I)+QIN(24,I)+QIN(25,I)+QIN(26,I)+QIN(27,I)+QIN(28,I)+
     /QIN(29,I)+QIN(30,I)+QIN(31,I)+QIN(32,I)+QIN(33,I)+QIN(34,I)+
     /QIN(35,I)+QIN(36,I)+QIN(37,I)+QIN(38,I)+QIN(39,I)+QIN(40,I)+
     /QIN(41,I)+QIN(42,I)+QIN(43,I)+QIN(44,I)+QIN(15,I)+QIN(16,I)
      TOTSUM=Q1SSUM+QPSSUM+QDSSUM    
#     WRITE(6,997) EN,QIN(1,I),QIN(2,I),QIN(3,I),QIN(4,I),Q1SSUM,QPSSUM,
#    /QDSSUM,TOTSUM
# 997 FORMAT(' EN =',D12.5,' Q1S5 =',D12.3,' Q1S4 =',D12.3,' Q1S3 =',
#    /D12.3,' Q1S2 =',D12.3,/,'S1 =',D12.3,' P2=',D12.3,' D3 =',D12.3,
#    /' QTOT=',D12.3)  
#  TOTAL X-SECTION
      Q(1,I)=QELA+Q1SSUM+QPSSUM+QDSSUM+QION(1,I)+QION(2,I)+QION(3,I)+
     /QION(4,I)+QION(5,I)+QION(6,I)+QION(7,I)          
#    /QION(4,I)+QION(5,I)+QION(6,I)+QION(7,I)+QIN(45,I)
  900 CONTINUE                                                          
# SAVE COMPUTE TIME
      DO 910 K=1,NIN
      IF(EFINAL <= EIN(K):
) :
       NIN=K-1
       GO TO 911
      # endIF
  910 CONTINUE
  911 CONTINUE
c     IF(EFINAL > 1000.) NIN=45
#                                                                       
      RETURN                                                            
      # end 
      def GAS3(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY  
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
#    /QNULL,NNULL,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,
#    /SCRPT)
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(4000),EROOT(4000),QT1(4000),QT2(4000),
     /QT3(4000),QT4(4000)
      COMMON/DENS/DEN(4000)
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)    
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30)
     /,EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]  
      DIMENSION XEN(144),YEM(144),YEL(144),YEPS(144),
     /XION(90),YION(90),YINC(90),
     /X23S(139),Y23S(139),X21S(128),Y21S(128),X23P(128),Y23P(128),
     /X21P(125),Y21P(125),X33S(106),Y33S(106),X31S(87),Y31S(87),
     /X33P(91),Y33P(91),X33D[108],Y33D[108],X31D[94],Y31D[94],
     /X31P(114),Y31P(114),X43S(59),Y43S(59),X41S(55),Y41S(55),
     /X43P(76),Y43P(76),X43D[65],Y43D[65],X41D[53],Y41D[53],
     /X43F(40),Y43F(40),X41F(57),Y41F(57),X41P(96),Y41P(96),
     /IOFFN(49),IOFFION(2)  
      DIMENSION Z2T(25),EBRM(25) 
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME  
# ELASTIC                            
      DATA XEN/0.00,.008,.009,0.01,.013,.017,.020,.025,0.03,0.04, 
     /0.05,0.06,0.07,0.08,0.09,0.10,0.12,0.15,0.18,0.20,                
     /0.25,0.30,0.40,0.50,0.60,0.70,0.80,0.90,1.00,1.20,                
     /1.50,1.80,2.00,2.50,3.00,4.00,5.00,6.00,7.00,8.00,                
     /9.00,10.0,11.0,12.0,14.0,16.0,18.0,20.0,25.0,30.0,                
     /35.0,40.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,
     /200.,250.,300.,400.,500.,600.,800.,1000.,1500.,2000.,
     /3000.,4000.,6000.,8000.,10000.,1.25D4,1.5D4,2.0D4,2.5D4,3.0D4,
     /4.0D4,6.0D4,8.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5D5,3.0D5,
     /3.5D5,4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,
     /1.5D6,1.75D6,2.0D6,2.5D6,3.0D6,3.5D6,4.0D6,4.5D6,5.0D6,6.0D6,
     /7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5D7,3.0D7,
     /3.5D7,4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,1.0D8,1.25D8,
     /1.5D8,1.75D8,2.0D8,2.5D8,3.0D8,3.5D8,4.0D8,4.5D8,5.0D8,6.0D8,
     /7.0D8,8.0D8,9.0D8,1.0D9/
# ELASTIC MOMENTUM TRANSFER           
      DATA YEM/4.89,5.18,5.19,5.21,5.26,5.31,5.35,5.41,5.46,5.54,     
     /5.62,5.68,5.74,5.79,5.83,5.86,5.94,6.04,6.12,6.16,                
     /6.27,6.35,6.49,6.59,6.66,6.73,6.77,6.82,6.85,6.91,                
     /6.96,6.98,6.99,6.96,6.89,6.62,6.31,6.00,5.68,5.35,                
     /5.03,4.72,4.45,4.20,3.68,3.28,2.95,2.64,2.05,1.63,                
     /1.33,1.09,.785,.590,.465,.375,.309,.262,.179,.132,
     /.0807,.0549,.0400,.0242,.0164,.0119,.00716,.00482,.00234,.0014,
     /.000676,4.03D-4,1.93D-4,1.15D-4,7.65D-5,5.10D-5,3.66D-5,2.17D-5,
     /1.45D-5,1.04D-5,
     /6.18D-6,2.99D-6,1.71D-6,1.21D-6,8.26D-7,6.05D-7,4.66D-7,3.73D-7,
     /2.58D-7,1.92D-7,
     /1.50D-7,1.22D-7,1.01D-7,8.59D-8,6.48D-8,5.11D-8,4.17D-8,3.48D-8,
     /2.96D-8,2.10D-8,
     /1.58D-8,1.24D-8,1.01D-8,7.05D-9,5.24D-9,4.07D-9,3.25D-9,2.67D-9,
     /2.23D-9,1.63D-9,
     /1.25D-9,9.89D-10,8.04D-10,6.67D-10,4.47D-10,3.22D-10,2.43D-10,
     /1.91D-10,1.27D-10,9.04D-11,
     /6.79D-11,5.29D-11,4.24D-11,3.48D-11,2.46D-11,1.84D-11,1.42D-11,
     /1.13D-11,9.26D-12,6.00D-12,
     /4.20D-12,3.10D-12,2.38D-12,1.53D-12,1.06D-12,7.82D-13,5.99D-13,
     /4.74D-13,3.84D-13,2.67D-13,
     /1.96D-13,1.50D-13,1.19D-13,9.62D-14/  
# ELASTIC TOTAL                                 
      DATA YEL/4.89,5.19,5.20,5.21,5.26,5.29,5.33,5.37,5.41,5.47,
     /5.53,5.58,5.62,5.66,5.69,5.70,5.76,5.83,5.88,5.90,
     /5.96,6.01,6.08,6.12,6.14,6.16,6.16,6.17,6.16,6.16,
     /6.14,6.11,6.09,6.01,5.90,5.60,5.36,5.10,4.91,4.70,
     /4.51,4.32,4.21,4.10,3.75,3.49,3.27,3.03,2.54,2.14,
     /1.83,1.61,1.27,1.06,.884,.746,.652,.580,.460,.355,
     /.244,.194,.150,.117,.087,.071,.052,.041,.028,.022,
     /.014,.0108,.00722,.00544,.00437,.00352,.00295,.00224,.00182,
     /.00154,
     /.00118,.000830,.000654,.000550,.000466,.000411,.000371,.000342,
     /.000301,.000274,
     /.000255,.000241,.000230,.000222,.000209,.000201,.000195,.000190,
     /.000186,.000180,
     /.000177,.000174,.000172,.000170,.000169,.000168,.000167,.000167,
     /.000167,.000166,
     /.000166,.000166,.000166,.000166,30*.000165/
# ANGULAR DISTRIBUTION PARAMETER EPSILON
# EPSILON = 1.0-YEPS
      DATA YEPS/1.0,.99711,.99712,1.0,1.0,1.00562,1.00565,1.01118,
     /1.01386,1.01920,
     /1.02440,1.02688,1.03202,1.03445,1.03689,1.04209,1.04686,1.05400,
     /1.06119,1.06604,
     /1.07792,1.08474,1.10094,1.11490,1.12663,1.13826,1.14789,1.15724,
     /1.16707,1.18142,
     /1.19873,1.21165,1.21951,1.23447,1.24855,1.26918,1.26215,1.26104,
     /1.23265,1.20568,
     /1.17192,1.13835,1.08539,1.03657,.97200,.90989,.85384,.80836,
     /.71541,.65146,
     /.60355,.53739,.46277,.38963,.35522,.32989,.29979,.27742,
     /.21850,.20332,
     /.16921,.13304,.12155,.08318,.07263,.06130,.04637,.03720,
     /.02338,.016295,
     /.011386,.008195,.005394,.004037,.003205,.002548,.002113,.001572,
     /.001246,.001044,
     /7.61D-4,4.925D-4,3.404D-4,2.803D-4,2.179D-4,1.766D-4,1.475D-4,
     /1.258D-4,9.60D-5,7.65D-5,
     /6.29D-5,5.29D-5,4.53D-5,3.93D-5,3.07D-5,2.47D-5,2.04D-5,1.72D-5,
     /1.47D-5,1.05D-5,
     /7.84D-6,6.12D-6,4.91D-6,3.373D-6,2.463D-6,1.881D-6,1.483D-6,
     /1.200D-6,9.91D-7,7.09D-7,
     /5.322D-7,4.146D-7,3.319D-7,2.718D-7,1.775D-7,1.249D-7,9.27D-8,
     /7.15D-8,4.62D-8,3.23D-8,
     /2.382D-8,1.828D-8,1.447D-8,1.173D-8,8.14D-9,5.97D-9,4.56D-9,
     /3.59D-9,2.90D-9,1.83D-9,
     /1.26D-9,9.10D-10,6.90D-10,4.40D-10,3.00D-10,2.16D-10,1.63D-10,
     /1.27D-10,1.02D-10,7.0D-11,
     /5.1D-11,3.8D-11,3.0D-11,2.4D-11/
#  IONISATION (VALUES ABOVE 20KEV GENERATED BY BORN-BETHE IN SUB)
      DATA XION/24.58739,25.0,25.5,26.0,26.5,27.0,27.5,28.0,28.5,29.0,
     /29.5,30.0,30.5,31.0,31.5,32.0,32.5,33.0,33.5,34.0,    
     /36.0,38.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,75.0,
     /80.0,85.0,90.0,95.0,100.,105.,110.,115.,120.,125.,
     /130.,135.,140.,145.,150.,160.,170.,180.,190.,200., 
     /225.,250.,275.,300.,350.,400.,450.,500.,550.,600.,               
     /650.,700.,750.,800.,850.,900.,950.,1000.,1200.,1400.,
     /1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,
     /6000.,7000.,8000.,9000.,1.0D4,1.2D4,1.4D4,1.6D4,1.8D4,2.0D4/
# GROSS IONISATION 
      DATA YION/.0,.0038,.0094,.0155,.0218,.0279,.0336,.0392,.0446,
     /.0504,
     /.0561,.0612,.0667,.0722,.0773,.0826,.0878,.0929,.0981,.103,
     /.121,.138,.154,.188,.219,.242,.262,.276,.290,.301,
     /.311,.319,.326,.333,.336,.338,.340,.341,.342,.342,
     /.343,.342,.341,.340,.338,.335,.332,.326,.322,.316, 
     /.302,.290,.279,.268,.246,.231,.216,.203,.191,.180,              
     ..171,.163,.155,.148,.142,.136,.130,.125,.109,.097,
     /.0872,.0795,.0729,.0608,.0524,.0458,.0410,.0368,.0336,.0311,
     /.0293,.0255,.0229,.0206,.0192,.0164,.0147,.0130,.0119,.0108/
# COUNTING IONISATION      
      DATA YINC/.0,.0038,.0094,.0155,.0218,.0279,.0336,.0392,.0446,
     /.0504,
     /.0561,.0612,.0667,.0722,.0773,.0826,.0878,.0929,.0981,.103,
     /.121,.138,.154,.188,.219,.242,.262,.276,.290,.301,
     /.311,.319,.326,.333,.336,.338,.340,.341,.341,.341,
     /.342,.341,.340,.339,.337,.334,.331,.325,.321,.315,
     /.301,.289,.278,.267,.245,.230,.215,.202,.190,.179,           
     /.170,.162,.154,.147,.141,.135,.129,.124,.108,.096,
     /.0867,.0791,.0725,.0605,.0522,.0456,.0408,.0367,.0335,.0310,
     /.0292,.0254,.0228,.0205,.0191,.0163,.0146,.0129,.0118,.0107/
#  ALL EXCITATIONS IN UNITS OF 10**-18
#  2 3S J=1 METASTABLE
      DATA X23S/19.81961,19.83,19.85,19.88,19.9,19.95,20.0,20.05,20.1,
     /20.15,
     /20.2,20.25,20.3,20.35,20.4,20.45,20.50,20.55,20.6,20.63,
     /20.66,20.7,20.75,20.8,20.85,20.90,20.94,20.97,21.0,21.05,
     /21.1,21.15,21.2,21.25,21.3,21.4,21.5,22.0,22.2,22.25,
     /22.3,22.35,22.4,22.42,22.44,22.46,22.48,22.5,22.52,22.55,
     /22.6,22.62,22.64,22.66,22.68,22.7,22.71,22.72,22.75,22.8,
     /22.85,22.88,22.9,22.95,22.97,23.0,23.05,23.1,23.3,23.4,
     /23.5,23.6,23.8,24.0,24.5,25.0,26.0,27.0,28.0,29.0,
     /30.0,31.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,
     /48.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,
     /100.,110.,120.,130.,140.,150.,160.,180.,200.,220.,
     /240.,260.,280.,300.,340.,380.,420.,460.,500.,550.,
     /600.,650.,700.,750.,800.,850.,900.,950.,1000.,1100.,
     /1200.,1300.,1400.,1500.,1600.,1700.,1800.,1900.,2000./
      DATA Y23S/0.00,.780,1.16,1.64,1.98,2.81,3.53,4.13,4.61,4.96,
     /5.20,5.35,5.41,5.36,5.21,4.95,4.63,4.23,3.66,3.16,
     /3.04,3.13,3.41,3.77,4.14,4.44,4.54,4.43,4.27,3.96,
     /3.69,3.48,3.32,3.21,3.15,3.08,3.06,3.09,3.08,3.04,
     /2.97,2.84,2.25,1.58,1.83,4.91,4.45,4.13,3.95,3.79,
     /3.60,3.51,3.07,2.45,2.61,2.67,2.36,2.97,3.01,2.96,
     /2.87,2.61,3.04,2.75,3.16,3.06,2.90,2.79,2.81,2.86,
     /2.75,2.80,2.71,2.65,2.58,2.48,2.39,2.30,2.19,2.09,
     /1.98,1.84,1.73,1.53,1.36,1.22,1.09,.985,.892,.812,
     /.742,.680,.555,.461,.389,.332,.287,.250,.220,.194,
     /.154,.125,.103,.0861,.0726,.0617,.0529,.0397,.0305,.0239,
     /.0191,.0154,.0126,.0105,.00740,.00542,.00407,.00314,.00247,.00187,
     /.00145,.00115,9.23D-4,7.53D-4,6.22D-4,5.20D-4,4.39D-4,3.74D-4,
     /3.21D-4,2.42D-4,
     /1.86D-4,1.47D-4,1.18D-4,9.57D-5,7.89D-5,6.58D-5,5.54D-5,4.71D-5,
     /4.04D-5/
# 2 1S J=0 METASTABLE
      DATA X21S/20.61577,20.62,20.63,20.65,20.67,20.69,20.72,20.75,
     /20.80,20.85,
     /20.90,20.96,20.98,21.0,21.05,21.1,21.15,21.2,21.22,21.25,
     /21.3,21.4,21.5,21.6,21.7,21.8,21.9,22.0,22.1,22.2,
     /22.25,22.3,22.35,22.4,22.42,22.44,22.46,22.48,22.5,22.55,
     /22.59,22.6,22.61,22.62,22.63,22.64,22.65,22.68,22.7,22.71,
     /22.72,22.73,22.75,22.78,22.8,22.85,22.87,22.88,22.89,22.9,
     /22.91,22.92,22.93,22.94,22.95,22.96,22.97,22.98,22.99,23.0,
     /23.01,23.05,23.1,23.2,23.3,23.4,23.5,23.6,23.8,24.0,
     /24.2,24.4,24.7,25.0,26.0,28.0,30.0,32.0,35.0,40.0,
     /45.0,50.0,55.0,60.0,65.0,70.0,80.0,90.0,100.,110.,
     /120.,140.,170.,200.,240.,280.,320.,360.,400.,450.,
     /500.,550.,600.,650.,700.,800.,900.,1000.,1100.,1200.,
     /1400.,1600.,1800.,2000.,2200.,2400.,2700.,3000./
      DATA Y21S/0.00,.406,.477,.664,.820,.946,1.10,1.24,1.47,1.72,
     /2.03,2.52,2.40,2.39,2.39,2.42,2.46,2.53,2.55,2.53,
     /2.52,2.53,2.57,2.59,2.62,2.64,2.65,2.65,2.65,2.62,
     /2.59,2.53,2.42,2.14,1.86,2.17,3.35,3.01,2.79,2.34,
     /1.80,1.88,2.53,3.37,3.64,3.55,3.42,3.23,2.95,2.45,
     /1.84,2.32,2.49,2.60,2.62,2.57,2.40,2.57,2.59,2.32,
     /1.73,2.55,2.36,2.35,2.32,2.23,2.50,2.64,2.61,1.86,
     /2.28,2.53,2.35,2.39,2.44,2.51,2.48,2.45,2.44,2.49,
     /2.57,2.63,2.56,2.54,2.53,2.51,2.45,2.35,2.21,2.05,
     /1.88,1.75,1.65,1.56,1.48,1.41,1.30,1.21,1.14,1.08,
     /1.03,.948,.850,.771,.686,.617,.560,.512,.471,.428,
     /.392,.361,.335,.312,.292,.259,.233,.211,.193,.178,
     /.154,.136,.121,.109,.0997,.0916,.0817,.0737/
# 2 3P J=2,1,0 
      DATA X23P/20.96409,20.97,21.0,21.05,21.1,21.15,21.2,21.25,21.3,
     /21.35,
     /21.4,21.5,21.6,21.7,21.8,21.9,22.0,22.1,22.2,22.3,
     /22.4,22.45,22.5,22.55,22.6,22.61,22.62,22.63,22.64,22.65,
     /22.66,22.67,22.68,22.69,22.7,22.71,22.72,22.73,22.75,22.77,
     /22.8,22.85,22.88,22.9,22.91,22.92,22.93,22.96,22.97,22.99,
     /23.0,23.04,23.06,23.07,23.08,23.1,23.2,23.3,23.4,23.5,
     /23.6,23.7,23.8,23.9,24.0,24.2,24.4,24.6,25.0,26.0,
     /27.0,28.0,29.0,30.0,32.0,34.0,36.0,38.0,40.0,42.0,
     /44.0,46.0,48.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,
     /85.0,90.0,95.0,100.,110.,120.,130.,140.,150.,160.,
     /170.,180.,190.,200.,220.,240.,260.,280.,300.,340.,
     /380.,420.,460.,500.,550.,600.,700.,800.,900.,1000.,
     /1200.,1400.,1600.,1800.,2000.,2300.,2600.,3000./
      DATA Y23P/0.00,.0936,.241,.442,.611,.761,.912,1.03,1.10,1.17,
     /1.23,1.32,1.40,1.47,1.54,1.60,1.66,1.73,1.80,1.87,
     /1.94,2.05,2.07,2.09,2.22,2.48,2.68,2.60,2.27,1.78,
     /1.45,1.43,1.52,1.59,1.60,1.45,1.47,1.70,1.83,1.91,
     /1.95,1.93,2.32,1.98,1.72,2.23,2.09,2.12,2.07,2.17,
     /1.82,2.18,1.80,1.82,1.94,1.94,1.90,1.88,1.89,2.00,
     /2.16,2.21,2.14,2.08,2.09,2.03,2.16,2.26,2.29,2.41,
     /2.47,2.48,2.47,2.43,2.30,2.15,2.00,1.84,1.69,1.55,
     /1.43,1.31,1.21,1.11,.907,.748,.622,.522,.441,.375,
     /.322,.277,.241,.210,.162,.127,.101,.0812,.0663,.0547,
     /.0455,.0382,.0324,.0277,.0206,.0156,.0121,.00961,.00772,.00518,
     /.00363,.00264,.00197,.00151,.00118,8.48D-4,5.21D-4,3.42D-4,
     /2.37D-4,1.70D-4,
     /9.65D-5,5.99D-5,3.96D-5,2.76D-5,2.00D-5,1.30D-5,8.94D-6,5.78D-6/
# 2 1P RESONANCE RADIATION J=1   58.434 NM       OSC STRENGTH F=0.27608  
      DATA X21P/21.21802,21.23,21.25,21.3,21.4,21.5,21.6,21.7,21.8,21.9,
     /22.0,22.1,22.2,22.3,22.35,22.4,22.42,22.44,22.46,22.48,
     /22.5,22.55,22.57,22.59,22.6,22.61,22.62,22.63,22.64,22.65,
     /22.66,22.68,22.7,22.71,22.72,22.73,22.75,22.8,22.85,22.87,
     /22.88,22.9,22.91,22.94,22.96,22.97,22.98,22.99,23.0,23.01,
     /23.05,23.1,23.2,23.3,23.4,23.5,23.6,23.7,23.8,23.9,
     /24.0,24.2,24.4,24.6,24.8,25.0,26.0,27.0,28.0,29.0,
     /30.0,31.0,32.0,33.0,34.0,35.0,36.0,37.0,38.0,39.0,
     /40.0,42.0,44.0,46.0,48.0,50.0,52.0,54.0,56.0,58.0,
     /60.0,64.0,68.0,72.0,76.0,80.0,85.0,90.0,95.0,100.,
     /110.,120.,130.,140.,160.,180.,200.,240.,280.,320.,
     /360.,400.,450.,500.,550.,600.,650.,700.,800.,900.,
     /1000.,1100.,1200.,1300.,1400./
      DATA Y21P/0.00,.0519,.0884,.163,.290,.397,.493,.582,.666,.748,
     /.831,.914,.994,1.06,1.09,1.10,1.10,1.36,1.46,1.35,
     /1.32,1.30,1.28,1.19,1.07,.943,.922,.941,.872,.751,
     /.737,.959,1.13,1.17,.920,1.03,1.12,1.23,1.35,1.27,
     /1.18,1.22,1.03,1.14,1.12,1.38,1.29,1.25,1.38,1.24,
     /1.12,1.13,1.11,1.12,1.16,1.30,1.41,1.44,1.41,1.37,
     /1.39,1.42,1.52,1.70,1.80,1.89,2.16,2.42,2.69,2.96,
     /3.24,3.53,3.82,4.12,4.42,4.71,5.00,5.29,5.57,5.85,
     /6.12,6.63,7.10,7.53,7.93,8.28,8.61,8.90,9.16,9.39,
     /9.60,9.95,10.2,10.4,10.6,10.7,10.7,10.8,10.8,10.7,
     /10.6,10.4,10.2,10.0,9.57,9.13,8.71,7.96,7.33,6.79,
     /6.32,5.92,5.50,5.13,4.82,4.54,4.30,4.08,3.72,3.41,
     /3.16,2.95,2.76,2.60,2.46/
# 3 3S J=1 
      DATA X33S/22.71847,22.72,22.73,22.74,22.75,22.78,22.8,22.83,22.85,
     /22.86,
     /22.87,22.88,22.89,22.9,22.91,22.912,22.914,22.916,22.92,22.94,
     /22.96,22.98,23.0,23.02,23.05,23.1,23.2,23.25,23.3,23.35,
     /23.4,23.44,23.48,23.52,23.57,23.59,23.62,23.65,23.7,23.75,
     /23.82,23.89,23.93,24.0,24.4,25.0,26.0,27.0,28.0,29.0,
     /30.0,31.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,
     /48.0,50.0,54.0,58.0,62.0,66.0,70.0,75.0,80.0,85.0,
     /90.0,95.0,100.,110.,120.,130.,140.,150.,160.,170.,
     /180.,200.,220.,240.,260.,280.,300.,340.,380.,420.,
     /460.,500.,550.,600.,650.,700.,750.,800.,850.,900.,
     /950.,1000.,1100.,1200.,1300.,1400./
      DATA Y33S/0.00,.800,1.15,1.03,.985,.854,.812,.752,.644,.503,
     /.277,1.79,1.17,1.06,1.32,1.51,1.57,1.37,.896,.848,
     /.907,.816,.838,.656,.872,.859,.890,.900,.860,.750,
     /.620,.810,.770,.960,.870,.870,.730,.710,.710,.730,
     /.770,.690,.760,.742,.725,.694,.665,.635,.605,.577,
     /.550,.524,.499,.452,.409,.370,.336,.305,.278,.253,
     /.231,.212,.178,.151,.130,.112,.0968,.0817,.0696,.0597,
     /.0516,.0449,.0393,.0306,.0242,.0195,.0160,.0132,.0111,.00938,
     /.00800,.00596,.00456,.00356,.00284,.00230,.00188,.00131,9.53D-4,
     /7.13D-4,
     /5.47D-4,4.29D-4,3.25D-4,2.52D-4,1.99D-4,1.60D-4,1.31D-4,1.08D-4,
     /9.02D-5,7.62D-5,
     /6.49D-5,5.58D-5,4.20D-5,3.25D-5,2.56D-5,2.06D-5/
# 3 1S J=0
      DATA X31S/22.92032,22.96,22.985,23.02,23.05,23.07,23.1,23.15,23.2,
     /23.25,
     /23.3,23.33,23.36,23.39,23.41,23.45,23.48,23.51,23.54,23.56,
     /23.59,23.62,23.65,23.68,23.73,23.82,23.88,23.94,24.0,25.0,
     /26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,44.0,48.0,
     /52.0,56.0,60.0,65.0,70.0,75.0,80.0,90.0,100.,110.,
     /120.,130.,140.,160.,180.,200.,220.,240.,260.,280.,
     /300.,340.,380.,420.,460.,500.,550.,600.,650.,700.,
     /750.,800.,900.,1000.,1100.,1200.,1300.,1400.,1500.,1600.,
     /1800.,2000.,2400.,2800.,3200.,3600.,4000./
      DATA Y31S/0.00,.535,.457,.587,.490,.490,.478,.491,.506,.512,
     /.501,.470,.418,.374,.351,.371,.520,.681,.520,.467,
     /.496,.410,.442,.429,.416,.455,.377,.444,.422,.426,
     /.428,.429,.425,.419,.412,.402,.396,.387,.370,.354,
     /.338,.324,.311,.296,.283,.271,.260,.242,.226,.213,
     /.203,.193,.185,.172,.161,.152,.144,.137,.131,.125,
     /.120,.111,.103,.0957,.0894,.0839,.0778,.0725,.0678,.0636,
     /.0599,.0566,.0509,.0462,.0423,.0389,.0361,.0336,.0315,.0296,
     /.0264,.0238,.0199,.0171,.0150,.0133,.0120/
# 3 3P J=2,1,0
      DATA X33P/23.00707,23.02,23.03,23.04,23.05,23.06,23.07,23.08,23.1,
     /23.2,
     /23.3,23.4,23.5,23.55,23.6,23.65,23.7,23.8,23.9,24.0,
     /24.1,24.2,24.3,24.4,24.6,24.8,25.0,26.0,27.0,28.0,
     /30.0,32.0,34.0,36.0,38.0,40.0,44.0,48.0,52.0,56.0,
     /60.0,64.0,68.0,72.0,76.0,80.0,85.0,90.0,95.0,100.,
     /110.,120.,130.,140.,150.,160.,170.,180.,200.,220.,
     /240.,260.,280.,300.,340.,380.,420.,460.,500.,550.,
     /600.,650.,700.,750.,800.,850.,900.,950.,1000.,1100.,
     /1200.,1300.,1400.,1600.,1800.,2000.,2200.,2400.,2600.,2800.,
     /3000./
      DATA Y33P/0.00,.387,.410,.179,.148,.335,.381,.282,.280,.309,
     /.332,.359,.411,.416,.405,.448,.438,.467,.485,.493,
     /.500,.515,.517,.513,.503,.508,.512,.516,.515,.524,
     /.544,.539,.523,.500,.474,.446,.392,.342,.297,.259,
     /.226,.197,.173,.152,.134,.118,.102,.0878,.0762,.0665,
     /.0512,.0401,.0318,.0255,.0208,.0171,.0142,.0119,.00854,.00632,
     /.00479,.00371,.00292,.00234,.00157,.00109,7.93D-4,5.92D-4,4.53D-4,
     /3.34D-4,
     /2.53D-4,1.96D-4,1.55D-4,1.24D-4,1.01D-4,8.37D-5,6.99D-5,5.89D-5,
     /5.02D-5,3.72D-5,
     /2.83D-5,2.21D-5,1.75D-5,1.16D-5,8.05D-6,5.82D-6,4.34D-6,3.32D-6,
     /2.60D-6,2.07D-6,
     /1.68D-6/
# 3 3D J=3,2,1
      DATA X33D/23.07365,23.1,23.15,23.2,23.25,23.3,23.35,23.4,23.45,
     /23.5,
     /23.55,23.6,23.66,23.7,23.75,23.8,23.85,23.9,23.95,24.0,
     /24.05,24.1,24.15,24.2,24.25,24.3,24.35,24.4,24.45,24.5,
     /24.55,24.6,24.65,24.7,24.8,24.9,25.0,26.0,27.0,28.0,
     /29.0,30.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,
     /48.0,50.0,52.0,54.0,56.0,58.0,60.0,64.0,68.0,72.0,
     /76.0,80.0,85.0,90.0,95.0,100.,110.,120.,130.,140.,
     /150.,160.,180.,200.,220.,240.,260.,280.,300.,320.,
     /340.,360.,380.,400.,440.,480.,520.,560.,600.,650.,
     /700.,750.,800.,850.,900.,1000.,1100.,1200.,1300.,1400.,
     /1600.,1800.,2000.,2200.,2400.,2600.,2800.,3000./
      DATA Y33D/0.00,.00956,.0236,.0401,.0602,.0861,.120,.166,.222,.229,
     /.238,.197,.123,.118,.110,.112,.104,.110,.099,.0985,
     /.113,.107,.109,.114,.118,.119,.118,.116,.113,.105,
     /.112,.116,.118,.119,.120,.120,.119,.115,.118,.121,
     /.121,.120,.113,.105,.0958,.0867,.0780,.0701,.0628,.0563,
     /.0505,.0453,.0407,.0366,.0330,.0298,.0269,.0221,.0183,.0152,
     /.0127,.0107,.00868,.00712,.00588,.00490,.00347,.00252,.00188,
     /.00142,
     /.00110,8.64D-4,5.56D-4,3.76D-4,2.64D-4,1.92D-4,1.44D-4,1.10D-4,
     /8.60D-5,6.84D-5,
     /5.53D-5,4.53D-5,3.76D-5,3.15D-5,2.28D-5,1.70D-5,1.30D-5,1.02D-5,
     /8.12D-6,6.25D-6,
     /4.92D-6,3.94D-6,3.21D-6,2.64D-6,2.21D-6,1.58D-6,1.17D-6,8.95D-7,
     /6.98D-7,5.55D-7,
     /3.67D-7,2.56D-7,1.85D-7,1.38D-7,1.06D-7,8.32D-8,6.64D-8,5.38D-8/
# 3 1D J=2
      DATA X31D/23.07407,23.08,23.1,23.15,23.2,23.25,23.3,23.35,23.4,
     /23.45,
     /23.5,23.55,23.6,23.66,23.7,23.75,23.8,23.85,23.9,23.95,
     /24.0,24.05,24.1,24.15,24.2,24.25,24.3,24.35,24.4,24.45,
     /24.5,24.6,24.7,24.8,25.0,26.0,28.0,30.0,32.0,34.0,
     /36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,54.0,58.0,
     /62.0,66.0,70.0,75.0,80.0,90.0,100.,110.,120.,140.,
     /160.,180.,200.,220.,240.,260.,280.,300.,320.,340.,
     /370.,400.,440.,480.,520.,560.,600.,650.,700.,800.,
     /900.,1000.,1100.,1200.,1300.,1400.,1600.,1800.,2000.,2200.,
     /2400.,2600.,2800.,3000./
      DATA Y31D/0.00,.097,.0973,.110,.126,.148,.175,.200,.221,.237,
     /.235,.198,.185,.192,.168,.181,.189,.172,.193,.184,
     /.190,.209,.206,.211,.214,.215,.212,.206,.199,.191,
     /.174,.177,.179,.180,.181,.180,.180,.188,.198,.209,
     /.217,.224,.229,.232,.234,.235,.234,.233,.228,.222,
     /.215,.207,.199,.190,.180,.163,.148,.135,.124,.105,
     /.0913,.0803,.0715,.0643,.0584,.0534,.0492,.0456,.0424,.0397,
     /.0361,.0332,.0299,.0272,.0249,.0230,.0213,.0196,.0181,.0156,
     /.0138,.0124,.0112,.0102,.00938,.00868,.00756,.00669,.00600,.00544,
     /.00497,.00458,.00425,.00396/
# 3 1P  RESONANCE RADIATION J=1  53.703 NM     OSC STRENGTH F=0.07342
      DATA X31P/23.08702,23.1,23.15,23.2,23.25,23.3,23.35,23.4,23.45,
     /23.5,
     /23.54,23.56,23.60,23.64,23.68,23.7,23.75,23.80,23.88,23.9,
     /23.95,24.0,24.05,24.1,24.15,24.2,24.3,24.4,24.5,24.6,
     /24.7,24.8,25.0,25.2,25.4,25.6,26.0,27.0,28.0,29.0,
     /30.0,31.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,
     /48.0,50.0,52.0,54.0,56.0,58.0,60.0,65.0,70.0,75.0,
     /80.0,85.0,90.0,95.0,100.,110.,120.,130.,140.,160.,
     /180.,200.,220.,240.,260.,280.,300.,340.,380.,420.,
     /460.,500.,550.,600.,650.,700.,750.,800.,900.,1000.,
     /1100.,1200.,1300.,1400.,1600.,1800.,2000.,2200.,2400.,2600.,
     /2800.,3000.,3400.,3800.,4200.,4600.,5000.,5500.,6000.,6500.,
     /7000.,8000.,9000.,10000./
      DATA Y31P/0.00,.114,.129,.137,.137,.134,.131,.130,.128,.129,
     /.117,.127,.122,.163,.146,.150,.191,.180,.226,.224,
     /.218,.230,.245,.253,.265,.274,.294,.308,.330,.360,
     /.373,.382,.397,.409,.418,.423,.434,.469,.516,.577,
     /.648,.723,.808,.941,1.07,1.20,1.32,1.43,1.54,1.64,
     /1.74,1.82,1.90,1.97,2.04,2.10,2.15,2.27,2.35,2.42,
     /2.47,2.50,2.52,2.53,2.53,2.52,2.50,2.47,2.42,2.33,
     /2.24,2.14,2.06,1.97,1.90,1.82,1.76,1.64,1.53,1.44,
     /1.36,1.29,1.21,1.15,1.08,1.03,.982,.938,.862,.799,
     /.745,.699,.658,.623,.563,.514,.474,.440,.411,.386,
     /.364,.344,.312,.285,.263,.244,.228,.211,.197,.184,
     /.173,.155,.140,.128/
# 4 3S J=1
      DATA X43S/23.59396,23.62,23.65,23.7,23.8,23.9,24.0,25.0,26.0,27.0,
     /28.0,30.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,
     /48.0,50.0,52.0,54.0,56.0,58.0,60.0,64.0,68.0,72.0,
     /76.0,80.0,85.0,90.0,95.0,100.,110.,120.,130.,140.,
     /150.,160.,180.,200.,220.,240.,260.,280.,300.,320.,
     /340.,360.,380.,400.,440.,480.,520.,560.,600./
      DATA Y43S/0.0,.314,.304,.292,.276,.266,.260,.243,.238,.234,
     /.227,.212,.195,.178,.162,.147,.133,.121,.110,.100,
     /.0911,.0832,.0761,.0697,.0640,.0589,.0543,.0464,.0399,.0346,
     /.0301,.0264,.0225,.0194,.0168,.0147,.0113,.00894,.00718,.00585,
     /.00483,.00403,.00289,.00214,.00164,.00127,.00101,8.17D-4,6.69D-4,
     /5.55D-4,
     /4.66D-4,3.94D-4,3.37D-4,2.90D-4,2.19D-4,1.70D-4,1.34D-4,1.08D-4,
     /8.81D-5/
# 4 1S J=0
      DATA X41S/23.67357,23.7,23.8,23.9,24.0,25.0,26.0,27.0,28.0,29.0,
     /30.0,32.0,34.0,36.0,38.0,40.0,44.0,48.0,52.0,56.0,
     /60.0,65.0,70.0,75.0,80.0,90.0,100.,110.,120.,130.,
     /140.,160.,180.,200.,250.,300.,350.,400.,450.,500.,
     /600.,700.,800.,900.,1000.,1200.,1400.,1600.,1800.,2000.,
     /2200.,2400.,2600.,2800.,3000./
      DATA Y41S/0.0,.109,.110,.111,.112,.121,.128,.133,.138,.141,
     /.143,.146,.148,.147,.146,.144,.139,.134,.129,.123,
     /.118,.113,.108,.103,.0990,.0922,.0868,.0823,.0786,.0753,
     /.0725,.0677,.0636,.0601,.0527,.0469,.0422,.0382,.0349,.0322,
     /.0277,.0243,.0216,.0195,.0177,.0150,.0130,.0114,.0102,.00925,
     /.00845,.00777,.00719,.00669,.00626/
# 4 3P J=2,1,0
      DATA X43P/23.70789,23.75,23.8,24.0,25.0,26.0,27.0,28.0,29.0,30.0,
     /32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,
     /54.0,58.0,62.0,66.0,70.0,75.0,80.0,85.0,90.0,95.0,
     /100.,110.,120.,130.,140.,150.,160.,170.,180.,190.,
     /200.,220.,240.,260.,280.,300.,320.,340.,360.,380.,
     /400.,440.,480.,520.,560.,600.,650.,700.,750.,800.,
     /850.,900.,950.,1000.,1100.,1200.,1300.,1400.,1600.,1800.,
     /2000.,2200.,2400.,2600.,2800.,3000./
      DATA Y43P/0.0,.085,.110,.118,.152,.177,.194,.205,.211,.215,
     /.215,.209,.200,.189,.178,.167,.156,.146,.136,.127,
     /.110,.0962,.0840,.0736,.0647,.0553,.0475,.0410,.0356,.0310,
     /.0271,.0210,.0165,.0132,.0106,.00865,.00713,.00593,.00498,.00421,
     /.00359,.00266,.00202,.00156,.00123,9.88D-4,8.03D-4,6.60D-4,
     /5.49D-4,4.61D-4,
     /3.90D-4,2.87D-4,2.17D-4,1.67D-4,1.32D-4,1.06D-4,8.18D-5,6.46D-5,
     /5.18D-5,4.22D-5,
     /3.48D-5,2.90D-5,2.45D-5,2.08D-5,1.54D-5,1.17D-5,9.13D-6,7.25D-6,
     /4.78D-6,3.32D-6,
     /2.39D-6,1.78D-6,1.36D-6,1.07D-6,8.50D-7,6.88D-7/
# 4 3D J=3,2,1
      DATA X43D/23.73609,23.8,23.9,24.0,25.0,26.0,27.0,28.0,29.0,30.0,
     /32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,
     /54.0,58.0,62.0,66.0,70.0,75.0,80.0,85.0,90.0,95.0,
     /100.,110.,120.,130.,140.,150.,160.,180.,200.,220.,
     /240.,260.,280.,300.,340.,380.,420.,460.,500.,550.,
     /600.,650.,700.,750.,800.,850.,900.,950.,1000.,1100.,
     /1200.,1300.,1400.,1500.,1600./
      DATA Y43D/.0,.0288,.0363,.0407,.0575,.0646,.0681,.0692,.069,.0675,
     /.0629,.0573,.0516,.0461,.0411,.0365,.0325,.0290,.0258,.0231,
     /.0186,.0151,.0123,.0102,.00847,.00681,.00554,.00455,.00378,.00316,
     /.00267,.00194,.00145,.00111,8.61D-4,6.81D-4,5.47D-4,3.66D-4,
     /2.55D-4,1.84D-4,
     /1.37D-4,1.04D-4,8.08D-5,6.39D-5,4.18D-5,2.87D-5,2.05D-5,1.51D-5,
     /1.14D-5,8.32D-6,
     /6.24D-6,4.79D-6,3.75D-6,3.00D-6,2.43D-6,1.99D-6,1.65D-6,1.39D-6,
     /1.18D-6,8.66D-7,
     /6.55D-7,5.08D-7,4.01D-7,3.22D-7,2.63D-7/
# 4 1D J=2
      DATA X41D/23.73633,23.8,24.0,25.0,26.0,27.0,28.0,29.0,30.0,32.0,
     /34.0,36.0,38.0,40.0,44.0,48.0,52.0,56.0,60.0,64.0,
     /68.0,72.0,76.0,80.0,85.0,90.0,95.0,100.,110.,120.,
     /130.,140.,160.,180.,200.,220.,240.,260.,300.,340.,
     /380.,420.,460.,500.,550.,600.,650.,700.,800.,900.,
     /1000.,1100.,1200./
      DATA Y41D/0.0,.0791,.0799,.0846,.0902,.0959,.102,.107,.112,.120,
     /.127,.131,.134,.136,.136,.134,.131,.126,.121,.116,
     /.112,.107,.102,.0978,.0927,.0880,.0836,.0796,.0724,.0663,
     /.0610,.0564,.0489,.0430,.0384,.0346,.0314,.0288,.0246,.0215,
     /.0190,.0171,.0155,.0142,.0128,.0117,.0107,.00990,.00860,.00760,
     /.00681,.00616,.00563/
# 4 3F J=3,4,2
      DATA X43F/23.73701,23.8,23.9,24.0,25.0,26.0,27.0,28.0,29.0,30.0,
     /31.0,32.0,33.0,34.0,35.0,36.0,37.0,38.0,39.0,40.0,
     /42.0,44.0,46.0,48.0,50.0,54.0,58.0,62.0,66.0,70.0,
     /75.0,80.0,85.0,90.0,95.0,100.,110.,120.,130.,140./
      DATA Y43F/0.0,.0357,.0318,.0289,.0161,.0117,.00922,.00760,.00642,
     /.00550,
     /.00478,.00418,.00369,.00327,.00291,.00261,.00234,.00211,.00191,
     /.00173,
     /.00144,.00121,.00102,8.68D-4,7.44D-4,5.57D-4,4.25D-4,3.30D-4,
     /2.61D-4,2.09D-4,
     /1.61D-4,1.26D-4,9.98D-5,8.03D-5,6.53D-5,5.36D-5,3.72D-5,2.66D-5,
     /1.96D-5,1.47D-5/
# 4 1F J=3
      DATA X41F/23.73701,23.8,24.0,25.0,26.0,27.0,28.0,29.0,30.0,31.0,
     /32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,
     /54.0,58.0,62.0,66.0,70.0,75.0,80.0,85.0,90.0,95.0,
     /100.,110.,120.,130.,140.,150.,160.,180.,200.,220.,
     /240.,260.,280.,300.,340.,380.,420.,460.,500.,550.,
     /600.,650.,700.,750.,800.,900.,1000./
      DATA Y41F/0.0,.0175,.0172,.0160,.0149,.0139,.0130,.0122,.0114,
     /.0108,
     /.0102,.00909,.00819,.00742,.00677,.00619,.00569,.00525,.00487,
     /.00452,
     /.00393,.00346,.00307,.00274,.00246,.00217,.00193,.00173,.00156,
     /.00142,
     /.00129,.00108,9.24D-4,7.99D-4,6.99D-4,6.17D-4,5.50D-4,4.47D-4,
     /3.73D-4,3.19D-4,
     /2.77D-4,2.45D-4,2.19D-4,1.99D-4,1.67D-4,1.45D-4,1.28D-4,1.15D-4,
     /1.04D-4,9.39D-5,
     /8.55D-5,7.86D-5,7.27D-5,6.78D-5,6.35D-5,5.63D-5,5.07D-5/
# 4 1P RESONANCE RADIATION J=1   52.222 NM    OSC STRENGTH F=0.02986
      DATA X41P/23.74207,23.8,23.9,24.0,25.0,26.0,27.0,28.0,29.0,30.0,
     /31.0,32.0,33.0,34.0,35.0,36.0,37.0,38.0,39.0,40.0,
     /42.0,44.0,46.0,48.0,50.0,52.0,54.0,56.0,58.0,60.0,
     /64.0,68.0,72.0,76.0,80.0,85.0,90.0,95.0,100.,110.,
     /120.,130.,140.,150.,160.,180.,200.,220.,240.,260.,
     /280.,300.,320.,340.,360.,380.,400.,440.,480.,520.,
     /560.,600.,640.,680.,720.,760.,800.,850.,900.,950.,
     /1000.,1100.,1200.,1300.,1400.,1600.,1800.,2000.,2200.,2400.,
     /2600.,2800.,3000.,3400.,3800.,4200.,4600.,5000.,5500.,6000.,
     /6500.,7000.,7500.,8000.,9000.,10000./
      DATA Y41P/0.00,.0147,.0242,.0334,.107,.158,.196,.227,.255,.281,
     /.307,.333,.360,.387,.414,.442,.470,.498,.526,.553,
     /.606,.657,.704,.748,.789,.826,.860,.891,.919,.944,
     /.986,1.02,1.05,1.06,1.08,1.09,1.10,1.10,1.10,1.09,
     /1.07,1.05,1.03,1.01,.985,.939,.896,.855,.817,.783,
     /.751,.722,.695,.670,.646,.625,.605,.569,.537,.509,
     /.484,.461,.441,.423,.406,.390,.376,.360,.345,.332,
     /.320,.298,.279,.263,.248,.224,.205,.189,.175,.163,
     /.153,.145,.137,.124,.113,.104,.0969,.0905,.0837,.0779,
     /.0729,.0686,.0648,.0614,.0556,.0510/
# 5 1P RESONANCE  RADIATION J=1  51.562 NM      F=0.01504
# 6 1P RESONANCE  RADIATION J=1  51.210 NM      F=0.00863
# 7 1P RESONANCE  RADIATION J=1  51.000 NM      F=0.00540
# 8 1P RESONANCE  RADIATION J=1  50.865 NM      F=0.00362
# 9 1P RESONANCE  RADIATION J=1  50.772 NM      F=0.00253
# 10 1P RESONANCE RADIATION J=1  50.706 NM      F=0.00184
# 11 1P RESONANCE RADIATION J=1  50.657 NM      F=0.00138
# 12 1P RESONANCE RADIATION J=1  50.620 NM      F=0.00106
# SUM HIGHER 1P LEVELS RESONANCE RADIATION J=1  F=0.00440
# TOTAL SUM OSCILLATOR STRENGTH = 0.42326
#
# BREMSSTRAHLUNG X-SECTION WITH CUT OFF 
      DATA Z2T/42.1,23.5,10.7,5.88,3.25,1.50,.886,.582,.437,.429,
     /.460,.484,.502,.515,.525,.540,.550,.566,.575,.585,
     /.592,.596,.597,.598,.598/
# UNITS 10**-24
      DATA EBRM/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,
     /2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,
     /4.E7,5.E7,6.E7,8.E7,1.E8/

# --------------------------------------------------------------------
      IF(NANISO == 0):
 :
       NAME='HE4  ISOTROPIC   2014    '   
      else: 
       NAME='HE4 ANISOTROPIC  2014    '
      # endIF                                         
# --------------------------------------------------------------------  
#  HELIUM 4 BEST KNOWN GAS USED AS STANDARD ACCURACY BETTER THAN 0.2%   
#  AT ALL FIELDS.
#  2002: UPDATED 1997 DATA TO INCLUDE ANISOTROPIC ELASTIC SCATTTERING
#  2007: INCREASED DATA FILE UP TO 10 MEV 
#  2007: NEW ANISTROPIC SCATTERING def INTRODUCED
#  2007: PENNING FRACTION INTRODUCED
#  2010: SPLIT EXCITATION INTO 49 LEVELS.
#  2014: UPDATED IONISATION TO BE CONSISTENT WITH FURSA AND BRAY CCC
# USED MAINLY THE FOLLOWING THEORETICAL EXCITATION X-SECTIONS:
# AT RESONANCE ENERGIES USED RMPS CALCULATIONS OF 
#  BARTSCHAT   J.PHYS B31(1998)L469
# AT HIGHER ENERGIES USED RALCHENKO AT.DATA NUCL DATA TABLES 94(2008)603
# AT HIGHEST ENERGIES FOR RESONANCE DIPOLE TRANSITIONS USED BEF SCALING
# 2013: INTRODUCED IONISATION WITH CAHRGE STATE =2
# -------------------------------------------------------------------- 
#
# BORN-BETHE VALUES FOR IONISATION
      CONST=1.873884D-20
      EMASS2=1021997.804
      API=DACOS(-1.00)
      A0=0.52917720859D-8
      RY=13.60569193
      BBCONST=16.0*API*A0*A0*RY*RY/EMASS2
#
      AM2=0.489
      C=5.50 
#
      NION=2
      NATT=1
      NIN=49
      NNULL=0
#    
      NBREM=25
      DO 6 J=1,NIN
      IZBR(J)=0
    6 CONTINUE
      IZBR(50)=2
#
      DO 1 J=1,6
    1 KEL(J)=NANISO
      DO 2 J=1,NIN
    2 KIN(J)=NANISO
      NDATA=144
      NIOND=90                                                         
      N23S=139          
      N21S=128
      N23P=128          
      N21P=125                            
      N33S=106
      N31S=87
      N33P=91
      N33D=108
      N31D=94
      N31P=114
      N43S=59
      N41S=55
      N43P=76
      N43D=65
      N41D=53
      N43F=40
      N41F=57
      N41P=96
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(4.00260*AMU)                                      
      E(3)=24.58739
# ENTER EXCITATION X-SECTION AT 1.4MEV                                   
      E(4)=0.5841D-19
# ENTER IONISING X-SECTION AT 1.4MEV                            
      E(5)=0.1271D-18
# ENTER EOBY FOR MINIMUM IONISING PARTICLE         
      E(6)=10.5
# IONISATION ENERGIES
      EION(1)=24.58739
      EION(2)=79.00515
      LEGAS(1)=0
      LEGAS(2)=0
      ISHELL(1)=0
      ISHELL(2)=0
# EOBY AT LOW ENERGY
      EOBY(1)=12.0        
      EOBY(2)=65.0       
# FLUORESCENCE DATA
      NC0(1)=0
      EC0(1)=0.0
      WKLM(1)=0.0
      EFL(1)=0.0
      NG1(1)=0
      EG1(1)=0.0
      NG2(1)=0
      EG2(1)=0.0
      NC0(2)=1
      EC0(2)=10.0
      WKLM(2)=0.0
      EFL(2)=0.0
      NG1(2)=0
      EG1(2)=0.0
      NG2(2)=0
      EG2(2)=0.0
#
      DO 776 J=1,NION
      DO 777 I=1,4000
      IF(EG(I):
 > EION(J)) :
       IOFFION(J)=I-1
       GO TO 776
      # endIF
  777 CONTINUE
  776 CONTINUE
#
      EIN(1)=19.81961                                                   
      EIN(2)=20.61577
      EIN(3)=20.96409
      EIN(4)=21.21802
      EIN(5)=22.71847
      EIN(6)=22.92032
      EIN(7)=23.00707
      EIN(8)=23.07365
      EIN(9)=23.07407
      EIN(10)=23.08702
      EIN(11)=23.59396
      EIN(12)=23.67357
      EIN(13)=23.70789
      EIN(14)=23.73609
      EIN(15)=23.73633
      EIN(16)=23.73701
      EIN(17)=23.73701
      EIN(18)=23.74207
      EIN(19)=23.97197
      EIN(20)=24.01121
      EIN(21)=24.02822
      EIN(22)=24.04266
      EIN(23)=24.04280
      EIN(24)=24.04315
      EIN(25)=24.04315
      EIN(26)=24.04580
      EIN(27)=24.16900
      EIN(28)=24.19116
      EIN(29)=24.20081
      EIN(30)=24.20916
      EIN(31)=24.20925
      EIN(32)=24.21100
      EIN(33)=24.28456
      EIN(34)=24.29828
      EIN(35)=24.30429
      EIN(36)=24.30954
      EIN(37)=24.30960
      EIN(38)=24.31071
      EIN(39)=24.35810
      EIN(40)=24.36718
      EIN(41)=24.37116
      EIN(42)=24.37468
      EIN(43)=24.37472
      EIN(44)=24.37547
      EIN(45)=24.41989
      EIN(46)=24.45168
      EIN(47)=24.47518
      EIN(48)=24.49308
      EIN(49)=24.50708
      EIN(50)=0.0
#***********************************************************************
# ENTER PENNING FRACTION FOR EACH LEVEL
# PENNING FRACTION BETWEEN 0.9 AND 1.0 FOR ALL MIXTURES
      DO 50 NL=1,NIN
      PENFRA[1,NL]=1.00
#  PENNING TRANSFER DISTANCE MICRONS
      PENFRA[2,NL]=1.0  
# PENNING TRANSFER TIME PICOSECONDS
   50 PENFRA[3,NL]=1.0
# HORNBECK MOLNAR MOD 
# IF PURE GAS SET TO : 0 FOR FIRST 6 LEVELS 0.25 FOR OTHER LEVELS
#     PENFRA(1,1)=0.0
#     PENFRA(1,2)=0.0
#     PENFRA(1,3)=0.0
#     PENFRA(1,4)=0.0
#     PENFRA(1,5)=0.0
#     PENFRA(1,6)=0.0
#***********************************************************************
      IF(IPEN == 0):
 GO TO 4 
      DO 3 KDUM=1,NIN
      IF(PENFRA[1,KDUM] == 0.0):
 GO TO 3
      WRITE(6,999) NAME,EIN(KDUM),PENFRA[1,KDUM],PENFRA[2,KDUM],
     /PENFRA[3,KDUM]
  999 FORMAT(' GAS = ',A15,' ENERGY LEVEL = ',F7.4,' EV.',/,' PENNING PR
     /OBABILITY =',F5.3,' ABS.LENGTH =',F7.2,' DECAY TIME =',F7.1,/)    
    3 CONTINUE
    4 DO 5 NL=1,NIN
      DO 651 I=1,4000
      IF(EG(I):
 > EIN(NL)) :
       IOFFN(NL)=I-1 
       GO TO 5
      # endIF
  651 CONTINUE
    5 CONTINUE
      SCRPT(1)='                                                  '
      SCRPT(2)=' ELASTIC  ANISOTROPIC            HELIUM 4         '
      IF(NANISO == 0):
 :
       SCRPT(2)=' ELASTIC   ISOTROPIC            HELIUM 4         '
      # endIF
      SCRPT(3)=' IONISATION CHARGE STATE=1         ELOSS= 24.58739'
      SCRPT(4)=' IONISATION CHARGE STATE=2         ELOSS= 79.00515'
      SCRPT(5)=' ATTACHMENT                                       '
      SCRPT(6)='                                                  ' 
      SCRPT(7)='                                                  '
      SCRPT(8)=' EXC  23S J=1    METASTABLE        ELOSS= 19.81961'
      SCRPT(9)=' EXC  21S J=0    METASTABLE        ELOSS= 20.61577'
      SCRPT(10)=' EXC  23P J=2,1,0                  ELOSS= 20.96409'
      SCRPT(11)=' EXC  21P J=1    RESONANT          ELOSS= 21.21802'
      SCRPT(12)=' EXC  33S J=1                      ELOSS= 22.71847'
      SCRPT(13)=' EXC  31S J=0                      ELOSS= 22.92032'
      SCRPT(14)=' EXC  33P J=2,1,0                  ELOSS= 23.00707'
      SCRPT(15)=' EXC  33D J=3,2,1                  ELOSS= 23.07365'
      SCRPT(16)=' EXC  31D J=2                      ELOSS= 23.07407'
      SCRPT(17)=' EXC  31P J=1    RESONANT          ELOSS= 23.08702'
      SCRPT(18)=' EXC  43S J=1                      ELOSS= 23.59396'
      SCRPT(19)=' EXC  41S J=0                      ELOSS= 23.67357'
      SCRPT(20)=' EXC  43P J=2,1,0                  ELOSS= 23.70789'
      SCRPT(21)=' EXC  43D J=3,2,1                  ELOSS= 23.73609'
      SCRPT(22)=' EXC  41D J=2                      ELOSS= 23.73633'
      SCRPT(23)=' EXC  43F J=3,4,2                  ELOSS= 23.73701'
      SCRPT(24)=' EXC  41F J=3                      ELOSS= 23.73701'
      SCRPT(25)=' EXC  41P J=1    RESONANT          ELOSS= 23.74207'
      SCRPT(26)=' EXC  53S J=1                      ELOSS= 23.97197'
      SCRPT(27)=' EXC  51S J=0                      ELOSS= 24.01121'
      SCRPT(28)=' EXC  53P J=2,1,0                  ELOSS= 24.02822'
      SCRPT(29)=' EXC  53D J=3,2,1                  ELOSS= 24.04266'
      SCRPT(30)=' EXC  51D J=2                      ELOSS= 24.04280'
      SCRPT(31)=' EXC  53F J=3,4,2                  ELOSS= 24.04315'
      SCRPT(32)=' EXC  513 J=3                      ELOSS= 24.04315'
      SCRPT(33)=' EXC  51P J=1    RESONANT          ELOSS= 24.04580'
      SCRPT(34)=' EXC  63S J=1                      ELOSS= 24.16900'
      SCRPT(35)=' EXC  61S J=0                      ELOSS= 24.19116'
      SCRPT(36)=' EXC  63P J=2,1,0                  ELOSS= 24.20081'
      SCRPT(37)=' EXC  63D J=3,2,1                  ELOSS= 24.20916'
      SCRPT(38)=' EXC  61D J=2                      ELOSS= 24.20925'
      SCRPT(39)=' EXC  61P J=1    RESONANT          ELOSS= 24.21100'
      SCRPT(40)=' EXC  73S J=1                      ELOSS= 24.28456'
      SCRPT(41)=' EXC  71S J=0                      ELOSS= 24.29828'
      SCRPT(42)=' EXC  73P J=2,1,0                  ELOSS= 24.30429'
      SCRPT(43)=' EXC  73D J=3,2,1                  ELOSS= 24.30954'
      SCRPT(44)=' EXC  71D J=2                      ELOSS= 24.30960'
      SCRPT(45)=' EXC  71P J=1    RESONANT          ELOSS= 24.31071'
      SCRPT(46)=' EXC  N3S SUM HIGH                 ELOSS= 24.35810'
      SCRPT(47)=' EXC  N1S SUM HIGH                 ELOSS= 24.36718'
      SCRPT(48)=' EXC  N3P SUM HIGH                 ELOSS= 24.37116' 
      SCRPT(49)=' EXC  N3D SUM HIGH                 ELOSS= 24.37468'
      SCRPT(50)=' EXC  N1D SUM HIGH                 ELOSS= 24.37472'
      SCRPT(51)=' EXC  81P J=1    RESONANT          ELOSS= 24.37547'
      SCRPT(52)=' EXC  91P J=1    RESONANT          ELOSS= 24.41989'
      SCRPT(53)=' EXC 101P J=1    RESONANT          ELOSS= 24.45168'
      SCRPT(54)=' EXC 111P J=1    RESONANT          ELOSS= 24.47518'
      SCRPT(55)=' EXC 121P J=1    RESONANT          ELOSS= 24.49308'
      SCRPT(56)=' EXC  N1P SUM HI RESONANT          ELOSS= 24.50708'
      SCRPT(57)=' BREMSSTRAHLUNG FROM HELIUM ATOM                  '
#     EN=-ESTEP/2.00   
      DO 9000 I=1,NSTEP    
      EN=EG(I)                                            
#     EN=EN+ESTEP 
      IF(EN > EIN(1):
) :
       GAMMA1=(EMASS2+2.00*EN)/EMASS2
       GAMMA2=GAMMA1*GAMMA1
       BETA=math.sqrt(1.00-1.00/GAMMA2)
       BETA2=BETA*BETA
      # endIF
      DO 10 J=2,NDATA                                                   
      IF(EN <= XEN(J):
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA                                                           
   20 A=(YEL(J)-YEL(J-1))/(XEN(J)-XEN(J-1))                         
      B=(XEN(J-1)*YEL(J)-XEN(J)*YEL(J-1))/(XEN(J-1)-XEN(J))
      QELA=(A*EN+B)*1.0D-16
#
      A=(YEM(J)-YEM(J-1))/(XEN(J)-XEN(J-1))                         
      B=(XEN(J-1)*YEM(J)-XEN(J)*YEM(J-1))/(XEN(J-1)-XEN(J)) 
      QMOM=(A*EN+B)*1.0D-16
      PQ1=0.5+(QELA-QMOM)/QELA
#
      A=(YEPS(J)-YEPS(J-1))/(XEN(J)-XEN(J-1))
      B=(XEN(J-1)*YEPS(J)-XEN(J)*YEPS(J-1))/(XEN(J-1)-XEN(J))
      PQ2=A*EN+B
# EPSILON=1-PQ2
      PQ2=1.00-PQ2
#
      IF(NANISO == 1):
 PEQEL(2,I)=PQ1
      IF(NANISO == 2):
 PEQEL(2,I)=PQ2
      Q(2,I)=QELA
      IF(NANISO == 0):
 :
       Q(2,I)=QMOM
       PEQEL(2,I)=0.5
      # endIF
# GROSS IONISATION                                                      
      QION(1,I)=0.00
      PEQION(1,I)=0.50  
      IF(NANISO == 2):
 PEQION(1,I)=0.00                               
      IF(EN <= EION(1):
) GO TO 200 
      IF(EN > XION(NIOND):
) GO TO 121     
      DO 110 J=2,NIOND                                                  
      IF(EN <= XION(J):
) GO TO 120                                       
  110 CONTINUE                                                          
      J=NIOND                                                           
  120 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      QION(1,I)=(A*EN+B)*1.D-16 
      GO TO 122
# USE BORN-BETHE X-SECTION ABOVE XION(NIOND) EV
  121 AX2=1.00/BETA2
      AX1=AX2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(1,I)=CONST*(AM2*(AX1-DEN(I)/2.0)+C*AX2)/0.995
  122 CONTINUE
# USE ANISOTROPIC SCATTERING FOR PRIMARY IONISATION ELECTRON FOR
# ENERGIES ABOVE 2 * IONISATION ENERGY 
# ANISOTROPIC ANGULAR DISTRIBUTION SAME AS ELASTIC AT ENERGY OFFSET BY 
# IONISATION ENERGY
      IF(EN <= (2.0*EION(1):
)) GO TO 200
      PEQION(1,I)=PEQEL(2,(I-IOFFION(1)))                               
# ATTACHMENT                                                            
  200 Q(4,I)=0.00 
      QATT(1,I)=Q(4,I)
# COUNTING IONISATION
      Q(5,I)=0.00
      PEQION(2,I)=0.50
      IF(NANISO == 2):
 PEQION(2,I)=0.00
      IF(EN <= EION(1):
) GO TO 250
      IF(EN > XION(NIOND):
) GO TO 241
      DO 230 J=2,NIOND
      IF(EN <= XION(J):
) GO TO 240
  230 CONTINUE
      J=NIOND
  240 A=(YINC(J)-YINC(J-1))/(XION(J)-XION(J-1))
      B=(XION(J-1)*YINC(J)-XION(J)*YINC(J-1))/(XION(J-1)-XION(J))      
      Q(5,I)=(A*EN+B)*1.0D-16
      GO TO 242
# USE BORN-BETHE X-SECTION ABOVE XION(NIOND) EV
  241 Q(5,I)=CONST*(AM2*(AX1-DEN(I)/2.0)+C*AX2)
  242 CONTINUE  
      IF(EN <= (2.00*EION(2):
)) GO TO 250
      PEQION(2,I)=PEQEL(2,(I-IOFFION(2)))
  250 Q(6,I)=0.00
# CALCULATE CHARGE STATE 1 AND 2 FROM COUNT AND GROSS
      QTEMP1=2.00*Q(5,I)-QION(1,I)
      QTEMP2=QION(1,I)-Q(5,I)
      QION(1,I)=QTEMP1
      QION(2,I)=QTEMP2
      IF(QION(2,I):
 < 0.0) QION(2,I)=0.0
#
      DO 251 NL=1,NIN+1
      QIN(NL,I)=0.00
      PEQIN(NL,I)=0.50
      IF(NANISO == 2):
 :
       PEQIN(NL,I)=0.00
      # endIF
  251 CONTINUE
#
# 2 3S 
      IF(EN <= EIN(1):
) GO TO 2000  
      IF(EN > X23S(N23S):
) GO TO 311                                  
      DO 300 J=2,N23S                                                   
      IF(EN <= X23S(J):
) GO TO 310                                       
  300 CONTINUE                                                          
      J=N23S                                                            
  310 A=(Y23S(J)-Y23S(J-1))/(X23S(J)-X23S(J-1))                         
      B=(X23S(J-1)*Y23S(J)-X23S(J)*Y23S(J-1))/(X23S(J-1)-X23S(J))       
      QIN(1,I)=(A*EN+B)*1.D-18 
      GO TO 312
# IF ENERGY GT X23S(N23S) EV SCALE BY 1/E**3 
  311 QIN(1,I)=Y23S(N23S)*(X23S(N23S)/EN)**3*1.D-18
  312 IF(EN <= (2.0*EIN(1))) GO TO 320   
      PEQIN(1,I)=PEQEL(2,(I-IOFFN(1))) 
#
# 2 1S                                                                  
  320 IF(EN <= EIN(2)) GO TO 2000
      IF(EN > X21S(N21S):
) GO TO 341                         
      DO 330 J=2,N21S                                                   
      IF(EN <= X21S(J):
) GO TO 340                                       
  330 CONTINUE                                                          
      J=N21S                                                            
  340 A=(Y21S(J)-Y21S(J-1))/(X21S(J)-X21S(J-1))                         
      B=(X21S(J-1)*Y21S(J)-X21S(J)*Y21S(J-1))/(X21S(J-1)-X21S(J))       
      QIN(2,I)=(A*EN+B)*1.D-18
      GO TO 342
# IF ENERGY GT X21S(N21S) EV SCALE BY 1/E
  341 QIN(2,I)=Y21S(N21S)*(X21S(N21S)/EN)*1.D-18   
  342 IF(EN <= (2.0*EIN(2))) GO TO 350
      PEQIN(2,I)=PEQEL(2,(I-IOFFN(2)))
#
# 2 3P
  350 IF(EN <= EIN(3)) GO TO 2000
      IF(EN > X23P(N23P):
) GO TO 371
      DO 360 J=2,N23P
      IF(EN <= X23P(J):
) GO TO 370
  360 CONTINUE
      J=N23P
  370 A=(Y23P(J)-Y23P(J-1))/(X23P(J)-X23P(J-1))                         
      B=(X23P(J-1)*Y23P(J)-X23P(J)*Y23P(J-1))/(X23P(J-1)-X23P(J))       
      QIN(3,I)=(A*EN+B)*1.D-18
      GO TO 372
# IF ENERGY GT X23P(N23P) EV SCALE BY 1/E**3
  371 QIN(3,I)=Y23P(N23P)*(X23P(N23P)/EN)**3*1.D-18   
  372 IF(EN <= (2.0*EIN(3))) GO TO 380
      PEQIN(3,I)=PEQEL(2,(I-IOFFN(3)))
#
# 2 1P        OSC STRENGTH  F=0.27608
  380 IF(EN <= EIN(4)) GO TO 2000
      IF(EN > X21P(N21P):
) GO TO 401
      DO 390 J=2,N21P
      IF(EN <= X21P(J):
) GO TO 400
  390 CONTINUE
      J=N21P
  400 A=(Y21P(J)-Y21P(J-1))/(X21P(J)-X21P(J-1))                         
      B=(X21P(J-1)*Y21P(J)-X21P(J)*Y21P(J-1))/(X21P(J-1)-X21P(J))       
      QIN(4,I)=(A*EN+B)*1.D-18
      GO TO 402
# IF ENERGY GT X21P(N21P) EV : USE BEF SCALING
  401 QIN(4,I)=0.27608/(EIN(4)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(4)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(4)+E(3))
  402 IF(EN <= (2.0*EIN(4))) GO TO 410
      PEQIN(4,I)=PEQEL(2,(I-IOFFN(4)))
#
# 3 3S
  410 IF(EN <= EIN(5)) GO TO 2000
      IF(EN > X33S(N33S):
) GO TO 431
      DO 420 J=2,N33S
      IF(EN <= X33S(J):
) GO TO 430
  420 CONTINUE
      J=N33S
  430 A=(Y33S(J)-Y33S(J-1))/(X33S(J)-X33S(J-1))                         
      B=(X33S(J-1)*Y33S(J)-X33S(J)*Y33S(J-1))/(X33S(J-1)-X33S(J))       
      QIN(5,I)=(A*EN+B)*1.D-18
      GO TO 432
# IF ENERGY GT X33S(N33S) EV SCALE BY 1/E**3
  431 QIN(5,I)=Y33S(N33S)*(X33S(N33S)/EN)**3*1.D-18   
  432 IF(EN <= (2.0*EIN(5))) GO TO 440
      PEQIN(5,I)=PEQEL(2,(I-IOFFN(5)))
#
# 3 1S
  440 IF(EN <= EIN(6)) GO TO 2000
      IF(EN > X31S(N31S):
) GO TO 461
      DO 450 J=2,N31S
      IF(EN <= X31S(J):
) GO TO 460
  450 CONTINUE
      J=N31S
  460 A=(Y31S(J)-Y31S(J-1))/(X31S(J)-X31S(J-1))                         
      B=(X31S(J-1)*Y31S(J)-X31S(J)*Y31S(J-1))/(X31S(J-1)-X31S(J))       
      QIN(6,I)=(A*EN+B)*1.D-18
      GO TO 462
# IF ENERGY GT X31S(N31S) EV SCALE BY 1/E   
  461 QIN(6,I)=Y31S(N31S)*(X31S(N31S)/EN)*1.D-18   
  462 IF(EN <= (2.0*EIN(6))) GO TO 470
      PEQIN(6,I)=PEQEL(2,(I-IOFFN(6)))
#
# 3 3P
  470 IF(EN <= EIN(7)) GO TO 2000
      IF(EN > X33P(N33P):
) GO TO 491
      DO 480 J=2,N33P
      IF(EN <= X33P(J):
) GO TO 490
  480 CONTINUE
      J=N33P
  490 A=(Y33P(J)-Y33P(J-1))/(X33P(J)-X33P(J-1))                         
      B=(X33P(J-1)*Y33P(J)-X33P(J)*Y33P(J-1))/(X33P(J-1)-X33P(J))       
      QIN(7,I)=(A*EN+B)*1.D-18
      GO TO 492
# IF ENERGY GT X33P(N33P) EV SCALE BY 1/E**3
  491 QIN(7,I)=Y33P(N33P)*(X33P(N33P)/EN)*1.D-18   
  492 IF(EN <= (2.0*EIN(7))) GO TO 500
      PEQIN(7,I)=PEQEL(2,(I-IOFFN(7)))
#
# 3 3D
  500 IF(EN <= EIN(8)) GO TO 2000
      IF(EN > X33D[N33D]):
 GO TO 521
      DO 510 J=2,N33D
      IF(EN <= X33D[J]):
 GO TO 520
  510 CONTINUE
      J=N33D
  520 A=(Y33D[J]-Y33D[J-1])/(X33D[J]-X33D[J-1])                         
      B=(X33D[J-1]*Y33D[J]-X33D[J]*Y33D[J-1])/(X33D[J-1]-X33D[J])       
      QIN(8,I)=(A*EN+B)*1.D-18
      GO TO 522
# IF ENERGY GT X33D[N33D] EV SCALE BY 1/E**3
  521 QIN(8,I)=Y33D[N33D]*(X33D[N33D]/EN)*1.D-18   
  522 IF(EN <= (2.0*EIN(8))) GO TO 530
      PEQIN(8,I)=PEQEL(2,(I-IOFFN(8)))
#
# 3 1D
  530 IF(EN <= EIN(9)) GO TO 2000
      IF(EN > X31D[N31D]):
 GO TO 551
      DO 540 J=2,N31D
      IF(EN <= X31D[J]):
 GO TO 550
  540 CONTINUE
      J=N31D
  550 A=(Y31D[J]-Y31D[J-1])/(X31D[J]-X31D[J-1])                         
      B=(X31D[J-1]*Y31D[J]-X31D[J]*Y31D[J-1])/(X31D[J-1]-X31D[J])       
      QIN(9,I)=(A*EN+B)*1.D-18
      GO TO 552
# IF ENERGY GT X31D[N31D] EV SCALE BY 1/E   
  551 QIN(9,I)=Y31D[N31D]*(X31D[N31D]/EN)*1.D-18   
  552 IF(EN <= (2.0*EIN(9))) GO TO 560
      PEQIN(9,I)=PEQEL(2,(I-IOFFN(9)))
#
# 3 1P        OSC STRENGTH F=0.07342
  560 IF(EN <= EIN(10)) GO TO 2000
      IF(EN > X31P(N31P):
) GO TO 581
      DO 570 J=2,N31P
      IF(EN <= X31P(J):
) GO TO 580
  570 CONTINUE
      J=N31P
  580 A=(Y31P(J)-Y31P(J-1))/(X31P(J)-X31P(J-1))                         
      B=(X31P(J-1)*Y31P(J)-X31P(J)*Y31P(J-1))/(X31P(J-1)-X31P(J))       
      QIN(10,I)=(A*EN+B)*1.D-18
      GO TO 582
# IF ENERGY GT X31P(N31P) EV : USE BEF SCALING
  581 QIN(10,I)=0.07342/(EIN(10)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(10)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(10)+E(3))
  582 IF(EN <= (2.0*EIN(10))) GO TO 590
      PEQIN(10,I)=PEQEL(2,(I-IOFFN(10)))
#
# 4 3S
  590 IF(EN <= EIN(11)) GO TO 2000
      IF(EN > X43S(N43S):
) GO TO 611
      DO 600 J=2,N43S
      IF(EN <= X43S(J):
) GO TO 610
  600 CONTINUE
      J=N43S
  610 A=(Y43S(J)-Y43S(J-1))/(X43S(J)-X43S(J-1))                         
      B=(X43S(J-1)*Y43S(J)-X43S(J)*Y43S(J-1))/(X43S(J-1)-X43S(J))       
      QIN(11,I)=(A*EN+B)*1.D-18
      GO TO 612
# IF ENERGY GT X43S(N43S) EV SCALE BY 1/E**3
  611 QIN(11,I)=Y43S(N43S)*(X43S(N43S)/EN)**3*1.D-18
  612 IF(EN <= (2.0*EIN(11))) GO TO 620
      PEQIN(11,I)=PEQEL(2,(I-IOFFN(11)))
#
# 4 1S
  620 IF(EN <= EIN(12)) GO TO 2000
      IF(EN > X41S(N41S):
) GO TO 641
      DO 630 J=2,N41S
      IF(EN <= X41S(J):
) GO TO 640
  630 CONTINUE
      J=N41S
  640 A=(Y41S(J)-Y41S(J-1))/(X41S(J)-X41S(J-1))                         
      B=(X41S(J-1)*Y41S(J)-X41S(J)*Y41S(J-1))/(X41S(J-1)-X41S(J))       
      QIN(12,I)=(A*EN+B)*1.D-18
      GO TO 642
# IF ENERGY GT X41S(N41S) EV SCALE BY 1/E     
  641 QIN(12,I)=Y41S(N41S)*(X41S(N41S)/EN)*1.D-18
  642 IF(EN <= (2.0*EIN(12))) GO TO 650
      PEQIN(12,I)=PEQEL(2,(I-IOFFN(12)))
#
# 4 3P
  650 IF(EN <= EIN(13)) GO TO 2000
      IF(EN > X43P(N43P):
) GO TO 671
      DO 660 J=2,N43P
      IF(EN <= X43P(J):
) GO TO 670
  660 CONTINUE
      J=N43P
  670 A=(Y43P(J)-Y43P(J-1))/(X43P(J)-X43P(J-1))                         
      B=(X43P(J-1)*Y43P(J)-X43P(J)*Y43P(J-1))/(X43P(J-1)-X43P(J))       
      QIN(13,I)=(A*EN+B)*1.D-18
      GO TO 672
# IF ENERGY GT X43P(N43P) EV SCALE BY 1/E**3  
  671 QIN(13,I)=Y43P(N43P)*(X43P(N43P)/EN)**3*1.D-18
  672 IF(EN <= (2.0*EIN(13))) GO TO 680
      PEQIN(13,I)=PEQEL(2,(I-IOFFN(13)))
#
# 4 3D
  680 IF(EN <= EIN(14)) GO TO 2000
      IF(EN > X43D[N43D]):
 GO TO 701
      DO 690 J=2,N43D
      IF(EN <= X43D[J]):
 GO TO 700
  690 CONTINUE
      J=N43P
  700 A=(Y43D[J]-Y43D[J-1])/(X43D[J]-X43D[J-1])                         
      B=(X43D[J-1]*Y43D[J]-X43D[J]*Y43D[J-1])/(X43D[J-1]-X43D[J])       
      QIN(14,I)=(A*EN+B)*1.D-18
      GO TO 702
# IF ENERGY GT X43D[N43D] EV SCALE BY 1/E**3  
  701 QIN(14,I)=Y43D[N43D]*(X43D[N43D]/EN)**3*1.D-18
  702 IF(EN <= (2.0*EIN(14))) GO TO 710
      PEQIN(14,I)=PEQEL(2,(I-IOFFN(14)))
#
# 4 1D
  710 IF(EN <= EIN(15)) GO TO 2000
      IF(EN > X41D[N41D]):
 GO TO 731
      DO 720 J=2,N41D
      IF(EN <= X41D[J]):
 GO TO 730
  720 CONTINUE
      J=N41D
  730 A=(Y41D[J]-Y41D[J-1])/(X41D[J]-X41D[J-1])                         
      B=(X41D[J-1]*Y41D[J]-X41D[J]*Y41D[J-1])/(X41D[J-1]-X41D[J])       
      QIN(15,I)=(A*EN+B)*1.D-18
      GO TO 732
# IF ENERGY GT X41D[N41D] EV SCALE BY 1/E     
  731 QIN(15,I)=Y41D[N41D]*(X41D[N41D]/EN)*1.D-18
  732 IF(EN <= (2.0*EIN(15))) GO TO 740
      PEQIN(15,I)=PEQEL(2,(I-IOFFN(15)))
#
# 4 3F
  740 IF(EN <= EIN(16)) GO TO 2000
      IF(EN > X43F(N43F):
) GO TO 761
      DO 750 J=2,N43F
      IF(EN <= X43F(J):
) GO TO 760
  750 CONTINUE
      J=N43F
  760 A=(Y43F(J)-Y43F(J-1))/(X43F(J)-X43F(J-1))                         
      B=(X43F(J-1)*Y43F(J)-X43F(J)*Y43F(J-1))/(X43F(J-1)-X43F(J))       
      QIN(16,I)=(A*EN+B)*1.D-18
      GO TO 762
# IF ENERGY GT X43F(N43F) EV SCALE BY 1/E**4  
  761 QIN(16,I)=Y43F(N43F)*(X43F(N43F)/EN)**4*1.D-18
  762 IF(EN <= (2.0*EIN(16))) GO TO 770
      PEQIN(16,I)=PEQEL(2,(I-IOFFN(16)))
#
# 4 1F
  770 IF(EN <= EIN(17)) GO TO 2000
      IF(EN > X41F(N41F):
) GO TO 791
      DO 780 J=2,N41F
      IF(EN <= X41F(J):
) GO TO 790
  780 CONTINUE
      J=N41F
  790 A=(Y41F(J)-Y41F(J-1))/(X41F(J)-X41F(J-1))                         
      B=(X41F(J-1)*Y41F(J)-X41F(J)*Y41F(J-1))/(X41F(J-1)-X41F(J))       
      QIN(17,I)=(A*EN+B)*1.D-18
      GO TO 792
# IF ENERGY GT X41F(N41F) EV SCALE BY 1/E     
  791 QIN(17,I)=Y41F(N41F)*(X41F(N41F)/EN)*1.D-18
  792 IF(EN <= (2.0*EIN(17))) GO TO 800
      PEQIN(17,I)=PEQEL(2,(I-IOFFN(17)))
#
# 4 1P       OSC STRENGTH  F=0.02986
  800 IF(EN <= EIN(18)) GO TO 2000
      IF(EN > X41P(N41P):
) GO TO 821
      DO 810 J=2,N41P
      IF(EN <= X41P(J):
) GO TO 820
  810 CONTINUE
      J=N41P
  820 A=(Y41P(J)-Y41P(J-1))/(X41P(J)-X41P(J-1))                         
      B=(X41P(J-1)*Y41P(J)-X41P(J)*Y41P(J-1))/(X41P(J-1)-X41P(J))       
      QIN(18,I)=(A*EN+B)*1.D-18
      GO TO 822
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
  821 QIN(18,I)=0.02986/(EIN(18)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(18)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(18)+E(3))
  822 IF(EN <= (2.0*EIN(18))) GO TO 830
      PEQIN(18,I)=PEQEL(2,(I-IOFFN(18)))
#
# 5 3S SCALED FROM 4 3S
  830 IF(EN <= EIN(19)) GO TO 2000
      ER=EIN(19)/EIN(11)
      ENP=EN/ER
      IF(ENP > X43S(N43S):
) GO TO 851
      DO 840 J=2,N43S
      IF(ENP <= X43S(J):
) GO TO 850
  840 CONTINUE
      J=N43S
  850 A=(Y43S(J)-Y43S(J-1))/(X43S(J)-X43S(J-1))                         
      B=(X43S(J-1)*Y43S(J)-X43S(J)*Y43S(J-1))/(X43S(J-1)-X43S(J))       
      QIN(19,I)=0.512*(A*ENP+B)*1.D-18
      GO TO 852
# IF ENERGY GT X43S(N43S) EV SCALE BY 1/E**3
  851 QIN(19,I)=0.512*Y43S(N43S)*(X43S(N43S)/ENP)**3*1.D-18
  852 IF(EN <= (2.0*EIN(19))) GO TO 860
      PEQIN(19,I)=PEQEL(2,(I-IOFFN(19)))
#
# 5 1S SCALED FROM 4 1S
  860 IF(EN <= EIN(20)) GO TO 2000
      ER=EIN(20)/EIN(12)
      ENP=EN/ER
      IF(ENP > X41S(N41S):
) GO TO 881
      DO 870 J=2,N41S
      IF(ENP <= X41S(J):
) GO TO 880
  870 CONTINUE
      J=N41S
  880 A=(Y41S(J)-Y41S(J-1))/(X41S(J)-X41S(J-1))                         
      B=(X41S(J-1)*Y41S(J)-X41S(J)*Y41S(J-1))/(X41S(J-1)-X41S(J))       
      QIN(20,I)=0.512*(A*ENP+B)*1.D-18
      GO TO 882
# IF ENERGY GT X41S(N41S) EV SCALE BY 1/E     
  881 QIN(20,I)=0.512*Y41S(N41S)*(X41S(N41S)/ENP)*1.D-18
  882 IF(EN <= (2.0*EIN(20))) GO TO 890
      PEQIN(20,I)=PEQEL(2,(I-IOFFN(20)))
#
# 5 3P SCALED FROM 4 3P
  890 IF(EN <= EIN(21)) GO TO 2000
      ER=EIN(21)/EIN(13)
      ENP=EN/ER
      IF(ENP > X43P(N43P):
) GO TO 911
      DO 900 J=2,N43P
      IF(ENP <= X43P(J):
) GO TO 910
  900 CONTINUE
      J=N43P
  910 A=(Y43P(J)-Y43P(J-1))/(X43P(J)-X43P(J-1))                         
      B=(X43P(J-1)*Y43P(J)-X43P(J)*Y43P(J-1))/(X43P(J-1)-X43P(J))       
      QIN(21,I)=0.512*(A*ENP+B)*1.D-18
      GO TO 912
# IF ENERGY GT X43P(N43P) EV SCALE BY 1/E**3  
  911 QIN(21,I)=0.512*Y43P(N43P)*(X43P(N43P)/ENP)**3*1.D-18
  912 IF(EN <= (2.0*EIN(21))) GO TO 920
      PEQIN(21,I)=PEQEL(2,(I-IOFFN(21)))
#
# 5 3D SCALED FROM 4 3D
  920 IF(EN <= EIN(22)) GO TO 2000
      ER=EIN(22)/EIN(14)
      ENP=EN/ER
      IF(ENP > X43D[N43D]):
 GO TO 941
      DO 930 J=2,N43D
      IF(ENP <= X43D[J]):
 GO TO 940
  930 CONTINUE
      J=N43P
  940 A=(Y43D[J]-Y43D[J-1])/(X43D[J]-X43D[J-1])                         
      B=(X43D[J-1]*Y43D[J]-X43D[J]*Y43D[J-1])/(X43D[J-1]-X43D[J])       
      QIN(22,I)=0.512*(A*ENP+B)*1.D-18
      GO TO 942
# IF ENERGY GT X43D[N43D] EV SCALE BY 1/E**3  
  941 QIN(22,I)=0.512*Y43D[N43D]*(X43D[N43D]/ENP)**3*1.D-18
  942 IF(EN <= (2.0*EIN(22))) GO TO 950
      PEQIN(22,I)=PEQEL(2,(I-IOFFN(22)))
#
# 5 1D SCALED FROM 4 1D
  950 IF(EN <= EIN(23)) GO TO 2000
      ER=EIN(23)/EIN(15)
      ENP=EN/ER
      IF(ENP > X41D[N41D]):
 GO TO 971
      DO 960 J=2,N41D
      IF(ENP <= X41D[J]):
 GO TO 970
  960 CONTINUE
      J=N41D
  970 A=(Y41D[J]-Y41D[J-1])/(X41D[J]-X41D[J-1])                         
      B=(X41D[J-1]*Y41D[J]-X41D[J]*Y41D[J-1])/(X41D[J-1]-X41D[J])       
      QIN(23,I)=0.512*(A*ENP+B)*1.D-18
      GO TO 972
# IF ENERGY GT X41D[N41D] EV SCALE BY 1/E     
  971 QIN(23,I)=0.512*Y41D[N41D]*(X41D[N41D]/ENP)*1.D-18
  972 IF(EN <= (2.0*EIN(23))) GO TO 980
      PEQIN(23,I)=PEQEL(2,(I-IOFFN(23)))
#
# 5 3F SCALED FROM 4 3F
  980 IF(EN <= EIN(24)) GO TO 2000
      ER=EIN(24)/EIN(16)
      ENP=EN/ER
      IF(ENP > X43F(N43F):
) GO TO 1001
      DO 990 J=2,N43F
      IF(ENP <= X43F(J):
) GO TO 1000
  990 CONTINUE
      J=N43F
 1000 A=(Y43F(J)-Y43F(J-1))/(X43F(J)-X43F(J-1))                         
      B=(X43F(J-1)*Y43F(J)-X43F(J)*Y43F(J-1))/(X43F(J-1)-X43F(J))       
      QIN(24,I)=0.512*(A*ENP+B)*1.D-18
      GO TO 1002
# IF ENERGY GT X43F(N43F) EV SCALE BY 1/E**4  
 1001 QIN(24,I)=0.512*Y43F(N43F)*(X43F(N43F)/ENP)**4*1.D-18
 1002 IF(EN <= (2.0*EIN(24))) GO TO 1010
      PEQIN(24,I)=PEQEL(2,(I-IOFFN(24)))
#
# 5 1F SCALED FROM 4 1F
 1010 IF(EN <= EIN(25)) GO TO 2000
      ER=EIN(25)/EIN(17)
      ENP=EN/ER
      IF(ENP > X41F(N41F):
) GO TO 1031
      DO 1020 J=2,N41F
      IF(ENP <= X41F(J):
) GO TO 1030
 1020 CONTINUE
      J=N41F
 1030 A=(Y41F(J)-Y41F(J-1))/(X41F(J)-X41F(J-1))                         
      B=(X41F(J-1)*Y41F(J)-X41F(J)*Y41F(J-1))/(X41F(J-1)-X41F(J))       
      QIN(25,I)=0.512*(A*ENP+B)*1.D-18
      GO TO 1032
# IF ENERGY GT X41F(N41F) EV SCALE BY 1/E     
 1031 QIN(25,I)=0.512*Y41F(N41F)*(X41F(N41F)/ENP)*1.D-18
 1032 IF(EN <= (2.0*EIN(25))) GO TO 1040
      PEQIN(25,I)=PEQEL(2,(I-IOFFN(25)))
#
# 5 1P   SCALED FROM 4 1P   OSC STRENGTH  F=0.01504
 1040 IF(EN <= EIN(26)) GO TO 2000
      ER=EIN(26)/EIN(18)
      ENP=EN/ER
      IF(ENP > X41P(N41P):
) GO TO 1061
      DO 1050 J=2,N41P
      IF(ENP <= X41P(J):
) GO TO 1060
 1050 CONTINUE
      J=N41P
 1060 A=(Y41P(J)-Y41P(J-1))/(X41P(J)-X41P(J-1))                         
      B=(X41P(J-1)*Y41P(J)-X41P(J)*Y41P(J-1))/(X41P(J-1)-X41P(J))       
      QIN(26,I)=0.01504/0.02986*(A*ENP+B)*1.D-18
      GO TO 1062
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1061 QIN(26,I)=0.01504/(EIN(26)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(26)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(26)+E(3))
 1062 IF(EN <= (2.0*EIN(26))) GO TO 1070
      PEQIN(26,I)=PEQEL(2,(I-IOFFN(26)))
#
# 6 3S SCALED FROM 4 3S
 1070 IF(EN <= EIN(27)) GO TO 2000
      ER=EIN(27)/EIN(11)
      ENP=EN/ER
      IF(ENP > X43S(N43S):
) GO TO 1091
      DO 1080 J=2,N43S
      IF(ENP <= X43S(J):
) GO TO 1090
 1080 CONTINUE
      J=N43S
 1090 A=(Y43S(J)-Y43S(J-1))/(X43S(J)-X43S(J-1))                         
      B=(X43S(J-1)*Y43S(J)-X43S(J)*Y43S(J-1))/(X43S(J-1)-X43S(J))       
      QIN(27,I)=0.296*(A*ENP+B)*1.D-18
      GO TO 1092
# IF ENERGY GT X43S(N43S) EV SCALE BY 1/E**3
 1091 QIN(27,I)=0.296*Y43S(N43S)*(X43S(N43S)/ENP)**3*1.D-18
 1092 IF(EN <= (2.0*EIN(27))) GO TO 1100
      PEQIN(27,I)=PEQEL(2,(I-IOFFN(27)))
#
# 6 1S SCALED FROM 4 1S
 1100 IF(EN <= EIN(28)) GO TO 2000
      ER=EIN(28)/EIN(12)
      ENP=EN/ER
      IF(ENP > X41S(N41S):
) GO TO 1121
      DO 1110 J=2,N41S
      IF(ENP <= X41S(J):
) GO TO 1120
 1110 CONTINUE
      J=N41S
 1120 A=(Y41S(J)-Y41S(J-1))/(X41S(J)-X41S(J-1))                         
      B=(X41S(J-1)*Y41S(J)-X41S(J)*Y41S(J-1))/(X41S(J-1)-X41S(J))       
      QIN(28,I)=0.296*(A*ENP+B)*1.D-18
      GO TO 1122
# IF ENERGY GT X41S(N41S) EV SCALE BY 1/E     
 1121 QIN(28,I)=0.296*Y41S(N41S)*(X41S(N41S)/ENP)*1.D-18
 1122 IF(EN <= (2.0*EIN(28))) GO TO 1130
      PEQIN(28,I)=PEQEL(2,(I-IOFFN(28)))
#
# 6 3P SCALED FROM 4 3P
 1130 IF(EN <= EIN(29)) GO TO 2000
      ER=EIN(29)/EIN(13)
      ENP=EN/ER
      IF(ENP > X43P(N43P):
) GO TO 1151
      DO 1140 J=2,N43P
      IF(ENP <= X43P(J):
) GO TO 1150
 1140 CONTINUE
      J=N43P
 1150 A=(Y43P(J)-Y43P(J-1))/(X43P(J)-X43P(J-1))                         
      B=(X43P(J-1)*Y43P(J)-X43P(J)*Y43P(J-1))/(X43P(J-1)-X43P(J))       
      QIN(29,I)=0.296*(A*ENP+B)*1.D-18
      GO TO 1152
# IF ENERGY GT X43P(N43P) EV SCALE BY 1/E**3  
 1151 QIN(29,I)=0.296*Y43P(N43P)*(X43P(N43P)/ENP)**3*1.D-18
 1152 IF(EN <= (2.0*EIN(29))) GO TO 1160
      PEQIN(29,I)=PEQEL(2,(I-IOFFN(29)))
#
# 6 3D SCALED FROM 4 3D
 1160 IF(EN <= EIN(30)) GO TO 2000
      ER=EIN(30)/EIN(14)
      ENP=EN/ER
      IF(ENP > X43D[N43D]):
 GO TO 1181
      DO 1170 J=2,N43D
      IF(ENP <= X43D[J]):
 GO TO 1180
 1170 CONTINUE
      J=N43P
 1180 A=(Y43D[J]-Y43D[J-1])/(X43D[J]-X43D[J-1])                         
      B=(X43D[J-1]*Y43D[J]-X43D[J]*Y43D[J-1])/(X43D[J-1]-X43D[J])       
      QIN(30,I)=0.296*(A*ENP+B)*1.D-18
      GO TO 1182
# IF ENERGY GT X43D[N43D] EV SCALE BY 1/E**3  
 1181 QIN(30,I)=0.296*Y43D[N43D]*(X43D[N43D]/ENP)**3*1.D-18
 1182 IF(EN <= (2.0*EIN(30))) GO TO 1190
      PEQIN(30,I)=PEQEL(2,(I-IOFFN(30)))
#
# 6 1D SCALED FROM 4 1D
 1190 IF(EN <= EIN(31)) GO TO 2000
      ER=EIN(31)/EIN(15)
      ENP=EN/ER
      IF(ENP > X41D[N41D]):
 GO TO 1211
      DO 1200 J=2,N41D
      IF(ENP <= X41D[J]):
 GO TO 1210
 1200 CONTINUE
      J=N41D
 1210 A=(Y41D[J]-Y41D[J-1])/(X41D[J]-X41D[J-1])                         
      B=(X41D[J-1]*Y41D[J]-X41D[J]*Y41D[J-1])/(X41D[J-1]-X41D[J])       
      QIN(31,I)=0.296*(A*ENP+B)*1.D-18
      GO TO 1212
# IF ENERGY GT X41D[N41D] EV SCALE BY 1/E     
 1211 QIN(31,I)=0.296*Y41D[N41D]*(X41D[N41D]/ENP)*1.D-18
 1212 IF(EN <= (2.0*EIN(31))) GO TO 1220
      PEQIN(31,I)=PEQEL(2,(I-IOFFN(31)))
#
# 6 1P  SCALED FROM 4 1P    OSC STRENGTH  F=0.00863 
 1220 IF(EN <= EIN(32)) GO TO 2000
      ER=EIN(32)/EIN(18)
      ENP=EN/ER
      IF(ENP > X41P(N41P):
) GO TO 1241
      DO 1230 J=2,N41P
      IF(ENP <= X41P(J):
) GO TO 1240
 1230 CONTINUE
      J=N41P
 1240 A=(Y41P(J)-Y41P(J-1))/(X41P(J)-X41P(J-1))                         
      B=(X41P(J-1)*Y41P(J)-X41P(J)*Y41P(J-1))/(X41P(J-1)-X41P(J))       
      QIN(32,I)=0.00863/0.02986*(A*ENP+B)*1.D-18
      GO TO 1242
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1241 QIN(32,I)=0.00863/(EIN(32)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(32)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(32)+E(3))
 1242 IF(EN <= (2.0*EIN(32))) GO TO 1250 
      PEQIN(32,I)=PEQEL(2,(I-IOFFN(32)))
#
# 7 3S SCALED FROM 4 3S
 1250 IF(EN <= EIN(33)) GO TO 2000
      ER=EIN(33)/EIN(11)
      ENP=EN/ER
      IF(ENP > X43S(N43S):
) GO TO 1271
      DO 1260 J=2,N43S
      IF(ENP <= X43S(J):
) GO TO 1270
 1260 CONTINUE
      J=N43S
 1270 A=(Y43S(J)-Y43S(J-1))/(X43S(J)-X43S(J-1))                         
      B=(X43S(J-1)*Y43S(J)-X43S(J)*Y43S(J-1))/(X43S(J-1)-X43S(J))       
      QIN(33,I)=0.187*(A*ENP+B)*1.D-18
      GO TO 1272
# IF ENERGY GT X43S(N43S) EV SCALE BY 1/E**3
 1271 QIN(33,I)=0.187*Y43S(N43S)*(X43S(N43S)/ENP)**3*1.D-18
 1272 IF(EN <= (2.0*EIN(33))) GO TO 1280
      PEQIN(33,I)=PEQEL(2,(I-IOFFN(33)))
#
# 7 1S SCALED FROM 4 1S
 1280 IF(EN <= EIN(34)) GO TO 2000
      ER=EIN(34)/EIN(12)
      ENP=EN/ER
      IF(ENP > X41S(N41S):
) GO TO 1301
      DO 1290 J=2,N41S
      IF(ENP <= X41S(J):
) GO TO 1300
 1290 CONTINUE
      J=N41S
 1300 A=(Y41S(J)-Y41S(J-1))/(X41S(J)-X41S(J-1))                         
      B=(X41S(J-1)*Y41S(J)-X41S(J)*Y41S(J-1))/(X41S(J-1)-X41S(J))       
      QIN(34,I)=0.187*(A*ENP+B)*1.D-18
      GO TO 1302
# IF ENERGY GT X41S(N41S) EV SCALE BY 1/E     
 1301 QIN(34,I)=0.187*Y41S(N41S)*(X41S(N41S)/ENP)*1.D-18
 1302 IF(EN <= (2.0*EIN(34))) GO TO 1310
      PEQIN(34,I)=PEQEL(2,(I-IOFFN(34)))
#
# 7 3P SCALED FROM 4 3P
 1310 IF(EN <= EIN(35)) GO TO 2000
      ER=EIN(35)/EIN(13)
      ENP=EN/ER
      IF(ENP > X43P(N43P):
) GO TO 1331
      DO 1320 J=2,N43P
      IF(ENP <= X43P(J):
) GO TO 1330
 1320 CONTINUE
      J=N43P
 1330 A=(Y43P(J)-Y43P(J-1))/(X43P(J)-X43P(J-1))                         
      B=(X43P(J-1)*Y43P(J)-X43P(J)*Y43P(J-1))/(X43P(J-1)-X43P(J))       
      QIN(35,I)=0.187*(A*ENP+B)*1.D-18
      GO TO 1332
# IF ENERGY GT X43P(N43P) EV SCALE BY 1/E**3  
 1331 QIN(35,I)=0.187*Y43P(N43P)*(X43P(N43P)/ENP)**3*1.D-18
 1332 IF(EN <= (2.0*EIN(35))) GO TO 1340
      PEQIN(35,I)=PEQEL(2,(I-IOFFN(35)))
#
# 7 3D SCALED FROM 4 3D
 1340 IF(EN <= EIN(36)) GO TO 2000
      ER=EIN(36)/EIN(14)
      ENP=EN/ER
      IF(ENP > X43D[N43D]):
 GO TO 1361
      DO 1350 J=2,N43D
      IF(ENP <= X43D[J]):
 GO TO 1360
 1350 CONTINUE
      J=N43P
 1360 A=(Y43D[J]-Y43D[J-1])/(X43D[J]-X43D[J-1])                         
      B=(X43D[J-1]*Y43D[J]-X43D[J]*Y43D[J-1])/(X43D[J-1]-X43D[J])       
      QIN(36,I)=0.187*(A*ENP+B)*1.D-18
      GO TO 1362
# IF ENERGY GT X43D[N43D] EV SCALE BY 1/E**3  
 1361 QIN(36,I)=0.187*Y43D[N43D]*(X43D[N43D]/ENP)**3*1.D-18
 1362 IF(EN <= (2.0*EIN(36))) GO TO 1370
      PEQIN(36,I)=PEQEL(2,(I-IOFFN(36)))
#
# 7 1D SCALED FROM 4 1D
 1370 IF(EN <= EIN(37)) GO TO 2000
      ER=EIN(37)/EIN(15)
      ENP=EN/ER
      IF(ENP > X41D[N41D]):
 GO TO 1391
      DO 1380 J=2,N41D
      IF(ENP <= X41D[J]):
 GO TO 1390
 1380 CONTINUE
      J=N41D
 1390 A=(Y41D[J]-Y41D[J-1])/(X41D[J]-X41D[J-1])                         
      B=(X41D[J-1]*Y41D[J]-X41D[J]*Y41D[J-1])/(X41D[J-1]-X41D[J])       
      QIN(37,I)=0.187*(A*ENP+B)*1.D-18
      GO TO 1392
# IF ENERGY GT X41D[N41D] EV SCALE BY 1/E     
 1391 QIN(37,I)=0.187*Y41D[N41D]*(X41D[N41D]/ENP)*1.D-18
 1392 IF(EN <= (2.0*EIN(37))) GO TO 1400
      PEQIN(37,I)=PEQEL(2,(I-IOFFN(37)))
#
# 7 1P  SCALED FROM 4 1P   OSC STRENGTH  F=0.00540 
 1400 IF(EN <= EIN(38)) GO TO 2000
      ER=EIN(38)/EIN(18)
      ENP=EN/ER
      IF(ENP > X41P(N41P):
) GO TO 1421
      DO 1410 J=2,N41P
      IF(ENP <= X41P(J):
) GO TO 1420
 1410 CONTINUE
      J=N41P
 1420 A=(Y41P(J)-Y41P(J-1))/(X41P(J)-X41P(J-1))                         
      B=(X41P(J-1)*Y41P(J)-X41P(J)*Y41P(J-1))/(X41P(J-1)-X41P(J))       
      QIN(38,I)=0.00540/0.02986*(A*ENP+B)*1.D-18
      GO TO 1422
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1421 QIN(38,I)=0.00540/(EIN(38)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(38)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(38)+E(3))
 1422 IF(EN <= (2.0*EIN(38))) GO TO 1430 
      PEQIN(38,I)=PEQEL(2,(I-IOFFN(38)))
#
# SUM 3S LEVELS FROM 8 3S HIGHER AND SCALED FROM 4 3S
 1430 IF(EN <= EIN(39)) GO TO 2000
      ER=EIN(39)/EIN(11)
      ENP=EN/ER
      IF(ENP > X43S(N43S):
) GO TO 1451
      DO 1440 J=2,N43S
      IF(ENP <= X43S(J):
) GO TO 1450
 1440 CONTINUE
      J=N43S
 1450 A=(Y43S(J)-Y43S(J-1))/(X43S(J)-X43S(J-1))                         
      B=(X43S(J-1)*Y43S(J)-X43S(J)*Y43S(J-1))/(X43S(J-1)-X43S(J))       
      QIN(39,I)=0.553*(A*ENP+B)*1.D-18
      GO TO 1452
# IF ENERGY GT X43S(N43S) EV SCALE BY 1/E**3
 1451 QIN(39,I)=0.553*Y43S(N43S)*(X43S(N43S)/ENP)**3*1.D-18
 1452 IF(EN <= (2.0*EIN(39))) GO TO 1460
      PEQIN(39,I)=PEQEL(2,(I-IOFFN(39)))
#
# SUM 1S LEVELS FROM 8 1S HIGHER AND SCALED FROM 4 1S
 1460 IF(EN <= EIN(40)) GO TO 2000
      ER=EIN(40)/EIN(12)
      ENP=EN/ER
      IF(ENP > X41S(N41S):
) GO TO 1481
      DO 1470 J=2,N41S
      IF(ENP <= X41S(J):
) GO TO 1480
 1470 CONTINUE
      J=N41S
 1480 A=(Y41S(J)-Y41S(J-1))/(X41S(J)-X41S(J-1))                         
      B=(X41S(J-1)*Y41S(J)-X41S(J)*Y41S(J-1))/(X41S(J-1)-X41S(J))       
      QIN(40,I)=0.553*(A*ENP+B)*1.D-18
      GO TO 1482
# IF ENERGY GT X41S(N41S) EV SCALE BY 1/E     
 1481 QIN(40,I)=0.553*Y41S(N41S)*(X41S(N41S)/ENP)*1.D-18
 1482 IF(EN <= (2.0*EIN(40))) GO TO 1490
      PEQIN(40,I)=PEQEL(2,(I-IOFFN(40)))
#
# SUM 3P LEVELS FROM  8 3P HIGHER AND SCALED FROM 4 3P
 1490 IF(EN <= EIN(41)) GO TO 2000
      ER=EIN(41)/EIN(13)
      ENP=EN/ER
      IF(ENP > X43P(N43P):
) GO TO 1511
      DO 1500 J=2,N43P
      IF(ENP <= X43P(J):
) GO TO 1510
 1500 CONTINUE
      J=N43P
 1510 A=(Y43P(J)-Y43P(J-1))/(X43P(J)-X43P(J-1))                         
      B=(X43P(J-1)*Y43P(J)-X43P(J)*Y43P(J-1))/(X43P(J-1)-X43P(J))       
      QIN(41,I)=0.553*(A*ENP+B)*1.D-18
      GO TO 1512
# IF ENERGY GT X43P(N43P) EV SCALE BY 1/E**3  
 1511 QIN(41,I)=0.553*Y43P(N43P)*(X43P(N43P)/ENP)**3*1.D-18
 1512 IF(EN <= (2.0*EIN(41))) GO TO 1520
      PEQIN(41,I)=PEQEL(2,(I-IOFFN(41)))
#
# SUM 3D LEVELS FROM 8 3D HIGHER AND SCALED FROM 4 3D
 1520 IF(EN <= EIN(42)) GO TO 2000
      ER=EIN(42)/EIN(14)
      ENP=EN/ER
      IF(ENP > X43D[N43D]):
 GO TO 1541
      DO 1530 J=2,N43D
      IF(ENP <= X43D[J]):
 GO TO 1540
 1530 CONTINUE
      J=N43P
 1540 A=(Y43D[J]-Y43D[J-1])/(X43D[J]-X43D[J-1])                         
      B=(X43D[J-1]*Y43D[J]-X43D[J]*Y43D[J-1])/(X43D[J-1]-X43D[J])       
      QIN(42,I)=0.553*(A*ENP+B)*1.D-18
      GO TO 1542
# IF ENERGY GT X43D[N43D] EV SCALE BY 1/E**3  
 1541 QIN(42,I)=0.553*Y43D[N43D]*(X43D[N43D]/ENP)**3*1.D-18
 1542 IF(EN <= (2.0*EIN(42))) GO TO 1550
      PEQIN(42,I)=PEQEL(2,(I-IOFFN(42)))
#
# SUM 1D LEVELS FROM 8 1D HIGHER AND SCALED FROM 4 1D
 1550 IF(EN <= EIN(43)) GO TO 2000
      ER=EIN(43)/EIN(15)
      ENP=EN/ER
      IF(ENP > X41D[N41D]):
 GO TO 1571
      DO 1560 J=2,N41D
      IF(ENP <= X41D[J]):
 GO TO 1570
 1560 CONTINUE
      J=N41D
 1570 A=(Y41D[J]-Y41D[J-1])/(X41D[J]-X41D[J-1])                         
      B=(X41D[J-1]*Y41D[J]-X41D[J]*Y41D[J-1])/(X41D[J-1]-X41D[J])       
      QIN(43,I)=0.553*(A*ENP+B)*1.D-18
      GO TO 1572
# IF ENERGY GT X41D[N41D] EV SCALE BY 1/E     
 1571 QIN(43,I)=0.553*Y41D[N41D]*(X41D[N41D]/ENP)*1.D-18
 1572 IF(EN <= (2.0*EIN(43))) GO TO 1580
      PEQIN(43,I)=PEQEL(2,(I-IOFFN(43)))
#
# 8 1P SCALED FROM 4 1P   OSC STRENGTH  F=0.00362 
 1580 IF(EN <= EIN(44)) GO TO 2000
      ER=EIN(44)/EIN(18)
      ENP=EN/ER
      IF(ENP > X41P(N41P):
) GO TO 1601
      DO 1590 J=2,N41P
      IF(ENP <= X41P(J):
) GO TO 1600
 1590 CONTINUE
      J=N41P
 1600 A=(Y41P(J)-Y41P(J-1))/(X41P(J)-X41P(J-1))                         
      B=(X41P(J-1)*Y41P(J)-X41P(J)*Y41P(J-1))/(X41P(J-1)-X41P(J))       
      QIN(44,I)=0.00362/0.02986*(A*ENP+B)*1.D-18
      GO TO 1602
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1601 QIN(44,I)=0.00362/(EIN(44)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(44)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(44)+E(3))
 1602 IF(EN <= (2.0*EIN(44))) GO TO 1610 
      PEQIN(44,I)=PEQEL(2,(I-IOFFN(44)))
#
# 9 1P SCALED FROM 4 1P   OSC STRENGTH  F=0.00253 
 1610 IF(EN <= EIN(45)) GO TO 2000
      ER=EIN(45)/EIN(18)
      ENP=EN/ER
      IF(ENP > X41P(N41P):
) GO TO 1631
      DO 1620 J=2,N41P
      IF(ENP <= X41P(J):
) GO TO 1630
 1620 CONTINUE
      J=N41P
 1630 A=(Y41P(J)-Y41P(J-1))/(X41P(J)-X41P(J-1))                         
      B=(X41P(J-1)*Y41P(J)-X41P(J)*Y41P(J-1))/(X41P(J-1)-X41P(J))       
      QIN(45,I)=0.00253/0.02986*(A*ENP+B)*1.D-18
      GO TO 1632
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1631 QIN(45,I)=0.00253/(EIN(45)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(45)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(45)+E(3))
 1632 IF(EN <= (2.0*EIN(45))) GO TO 1640 
      PEQIN(45,I)=PEQEL(2,(I-IOFFN(45)))
#
# 10 1P SCALED FROM 4 1P    OSC STRENGTH F=0.00184
 1640 IF(EN <= EIN(46)) GO TO 2000
      ER=EIN(46)/EIN(18)
      ENP=EN/ER
      IF(ENP > X41P(N41P):
) GO TO 1661
      DO 1650 J=2,N41P
      IF(ENP <= X41P(J):
) GO TO 1660
 1650 CONTINUE
      J=N41P
 1660 A=(Y41P(J)-Y41P(J-1))/(X41P(J)-X41P(J-1))                         
      B=(X41P(J-1)*Y41P(J)-X41P(J)*Y41P(J-1))/(X41P(J-1)-X41P(J))       
      QIN(46,I)=0.00184/0.02986*(A*ENP+B)*1.D-18
      GO TO 1662
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1661 QIN(46,I)=0.00184/(EIN(46)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(46)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(46)+E(3))
 1662 IF(EN <= (2.0*EIN(46))) GO TO 1670 
      PEQIN(46,I)=PEQEL(2,(I-IOFFN(46)))
#
# 11 1P SCALED FROM 4 1P   OSC STRENGTH F=0.00138
 1670 IF(EN <= EIN(47)) GO TO 2000
      ER=EIN(47)/EIN(18)
      ENP=EN/ER
      IF(ENP > X41P(N41P):
) GO TO 1691
      DO 1680 J=2,N41P
      IF(ENP <= X41P(J):
) GO TO 1690
 1680 CONTINUE
      J=N41P
 1690 A=(Y41P(J)-Y41P(J-1))/(X41P(J)-X41P(J-1))                         
      B=(X41P(J-1)*Y41P(J)-X41P(J)*Y41P(J-1))/(X41P(J-1)-X41P(J))       
      QIN(47,I)=0.00138/0.02986*(A*ENP+B)*1.D-18
      GO TO 1692
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1691 QIN(47,I)=0.00138/(EIN(47)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(47)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(47)+E(3))
 1692 IF(EN <= (2.0*EIN(47))) GO TO 1700 
      PEQIN(47,I)=PEQEL(2,(I-IOFFN(47)))
#
# 12 1P SCALED FROM 4 1P   OSC STRENGTH F=0.00106
 1700 IF(EN <= EIN(48)) GO TO 2000
      ER=EIN(48)/EIN(18)
      ENP=EN/ER
      IF(ENP > X41P(N41P):
) GO TO 1721
      DO 1710 J=2,N41P
      IF(ENP <= X41P(J):
) GO TO 1720
 1710 CONTINUE
      J=N41P
 1720 A=(Y41P(J)-Y41P(J-1))/(X41P(J)-X41P(J-1))                         
      B=(X41P(J-1)*Y41P(J)-X41P(J)*Y41P(J-1))/(X41P(J-1)-X41P(J))       
      QIN(48,I)=0.00106/0.02986*(A*ENP+B)*1.D-18
      GO TO 1722
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1721 QIN(48,I)=0.00106/(EIN(48)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(48)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(48)+E(3))
 1722 IF(EN <= (2.0*EIN(48))) GO TO 1730 
      PEQIN(48,I)=PEQEL(2,(I-IOFFN(48)))
#
# SUM HIGHER 1P LEVELS     OSC STRENGTH F=0.00440
 1730 IF(EN <= EIN(49)) GO TO 2000
      ER=EIN(49)/EIN(18)
      ENP=EN/ER
      IF(ENP > X41P(N41P):
) GO TO 1751
      DO 1740 J=2,N41P
      IF(ENP <= X41P(J):
) GO TO 1750
 1740 CONTINUE
      J=N41P
 1750 A=(Y41P(J)-Y41P(J-1))/(X41P(J)-X41P(J-1))                         
      B=(X41P(J-1)*Y41P(J)-X41P(J)*Y41P(J-1))/(X41P(J-1)-X41P(J))       
      QIN(49,I)=0.00440/0.02986*(A*ENP+B)*1.D-18
      GO TO 1752
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1751 QIN(49,I)=0.00440/(EIN(49)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(49)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(49)+E(3))
 1752 IF(EN <= (2.0*EIN(49))) GO TO 1760 
      PEQIN(49,I)=PEQEL(2,(I-IOFFN(49)))
 1760 CONTINUE
#  LOAD BREMSSTRAHLUNG X-SECTIONS
c      IF(EN <= 1000.) GO TO 2000
c      DO 1780 J=2,NBREM
c      IF(EN <= EBRM(J)) GO TO 1790
c 1780 CONTINUE
c      J=NBREM
c 1790 A=(math.log(Z2T(J))-math.log(Z2T(J-1)))/(EBRM(J)-EBRM(J-1))
c      B=(math.log(Z2T(J))*EBRM(J-1)-math.log(Z2T(J-1))*EBRM(J))/
c     /(EBRM(J-1)-EBRM(J))
c      QIN(50,I)=math.exp(A*EN+B)*1.D-24
#
 2000 CONTINUE                                                          
#     
      QMET=QIN(1,I)+QIN(2,I)
      QDIP=QIN(4,I)+QIN(10,I)+QIN(18,I)+QIN(26,I)+QIN(32,I)+QIN(38,I)+
     /QIN(44,I)+QIN(45,I)+QIN(46,I)+QIN(47,I)+QIN(48,I)+QIN(49,I)
      QTRP=QIN(1,I)+QIN(3,I)+QIN(5,I)+QIN(7,I)+QIN(8,I)+QIN(11,I)+
     /QIN(13,I)+QIN(14,I)+QIN(16,I)+QIN(19,I)+QIN(21,I)+QIN(22,I)+
     /QIN(24,I)+QIN(27,I)+QIN(29,I)+QIN(30,I)+QIN(33,I)+QIN(35,I)+
     /QIN(36,I)+QIN(39,I)+QIN(41,I)+QIN(42,I) 
      QSNG=QIN(2,I)+QIN(4,I)+QIN(6,I)+QIN(9,I)+QIN(10,I)+QIN(12,I)+
     /QIN(15,I)+QIN(17,I)+QIN(18,I)+QIN(20,I)+QIN(23,I)+QIN(25,I)+
     /QIN(26,I)+QIN(28,I)+QIN(31,I)+QIN(32,I)+QIN(34,I)+QIN(37,I)+
     /QIN(38,I)+QIN(40,I)+QIN(43,I)+QIN(44,I)+QIN(45,I)+QIN(46,I)+
     /QIN(47,I)+QIN(48,I)+QIN(49,I)
      QINEL=QSNG+QTRP+QION(1,I)+QION(2,I)
#      Q(1,I)=QELA+QINEL+QIN(50,I)                            
      Q(1,I)=QELA+QINEL                          
# EXAMINE X-SECTION DATA 
#     WRITE(6,986) EN,QIN(4,I),QIN(10,I),QIN(18,I),QIN(26,I),QIN(32,I),
#    /QIN(38,I),QIN(44,I),QIN(45,I),QIN(46,I),QIN(47,I),QIN(48,I),
#    /QIN(49,I) 
# 986 FORMAT(' EN=',D11.5,' 21P=',D11.3,' 31P=',D11.3,' 41P=',D11.3,' 51
#    /P=',D11.3,' 61P=',D11.3,' 71P=',D11.3,/,8X,' 81P=',D11.3,' 91P=',D
#    /11.3,' 101P=',D11.3,' 111P=',D11.3,' 121P=',D11.3,' HIP=',D11.3)
#     WRITE(6,987) EN,QMET,QDIP,QSNG,QTRP,QINEL,Q(1,I)
# 987 FORMAT(' EN=',D12.5,' QMET=',D11.3,' QDIP=',D11.3,' QSNG=',D11.3,
#    /'QTRP=',D11.3,' QINL=',D11.4,' QTOT=',D11.4) 
 9000 CONTINUE                                                          
#  SAVE COMPUTE TIME                                                    
      DO 9001 K=1,NIN
      IF(EFINAL <= EIN(K):
) :                                        
       NIN=K-1
       GO TO 9011
      # endIF
 9001 CONTINUE
 9011 CONTINUE 
c      IF(EN > 1000.) NIN=50                                         
      RETURN                                                            
      # end
      def GAS4(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY  
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
#    /QNULL,NNULL,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,
#    /SCRPT)
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(4000),EROOT(4000),QT1(4000),QT2(4000),
     /QT3(4000),QT4(4000)
      COMMON/DENS/DEN(4000)
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)    
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30)
     /,EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]  
      DIMENSION XEN(144),YEM(144),YEL(144),YEPS(144),
     /XION(90),YION(90),YINC(90),
     /X23S(139),Y23S(139),X21S(128),Y21S(128),X23P(128),Y23P(128),
     /X21P(125),Y21P(125),X33S(106),Y33S(106),X31S(87),Y31S(87),
     /X33P(91),Y33P(91),X33D[108],Y33D[108],X31D[94],Y31D[94],
     /X31P(114),Y31P(114),X43S(59),Y43S(59),X41S(55),Y41S(55),
     /X43P(76),Y43P(76),X43D[65],Y43D[65],X41D[53],Y41D[53],
     /X43F(40),Y43F(40),X41F(57),Y41F(57),X41P(96),Y41P(96),
     /IOFFN(49),IOFFION(2)   
      DIMENSION Z2T(25),EBRM(25)
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME  
# ELASTIC                            
      DATA XEN/0.00,.008,.009,0.01,.013,.017,.020,.025,0.03,0.04, 
     /0.05,0.06,0.07,0.08,0.09,0.10,0.12,0.15,0.18,0.20,                
     /0.25,0.30,0.40,0.50,0.60,0.70,0.80,0.90,1.00,1.20,                
     /1.50,1.80,2.00,2.50,3.00,4.00,5.00,6.00,7.00,8.00,                
     /9.00,10.0,11.0,12.0,14.0,16.0,18.0,20.0,25.0,30.0,                
     /35.0,40.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,
     /200.,250.,300.,400.,500.,600.,800.,1000.,1500.,2000.,
     /3000.,4000.,6000.,8000.,10000.,1.25D4,1.5D4,2.0D4,2.5D4,3.0D4,
     /4.0D4,6.0D4,8.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5D5,3.0D5,
     /3.5D5,4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,
     /1.5D6,1.75D6,2.0D6,2.5D6,3.0D6,3.5D6,4.0D6,4.5D6,5.0D6,6.0D6,
     /7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5D7,3.0D7,
     /3.5D7,4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,1.0D8,1.25D8,
     /1.5D8,1.75D8,2.0D8,2.5D8,3.0D8,3.5D8,4.0D8,4.5D8,5.0D8,6.0D8,
     /7.0D8,8.0D8,9.0D8,1.0D9/
# ELASTIC MOMENTUM TRANSFER           
      DATA YEM/4.89,5.18,5.19,5.21,5.26,5.31,5.35,5.41,5.46,5.54,     
     /5.62,5.68,5.74,5.79,5.83,5.86,5.94,6.04,6.12,6.16,                
     /6.27,6.35,6.49,6.59,6.66,6.73,6.77,6.82,6.85,6.91,                
     /6.96,6.98,6.99,6.96,6.89,6.62,6.31,6.00,5.68,5.35,                
     /5.03,4.72,4.45,4.20,3.68,3.28,2.95,2.64,2.05,1.63,                
     /1.33,1.09,.785,.590,.465,.375,.309,.262,.179,.132,
     /.0807,.0549,.0400,.0242,.0164,.0119,.00716,.00482,.00234,.0014,
     /.000676,4.03D-4,1.93D-4,1.15D-4,7.65D-5,5.10D-5,3.66D-5,2.17D-5,
     /1.45D-5,1.04D-5,
     /6.18D-6,2.99D-6,1.71D-6,1.21D-6,8.26D-7,6.05D-7,4.66D-7,3.73D-7,
     /2.58D-7,1.92D-7,
     /1.50D-7,1.22D-7,1.01D-7,8.59D-8,6.48D-8,5.11D-8,4.17D-8,3.48D-8,
     /2.96D-8,2.10D-8,
     /1.58D-8,1.24D-8,1.01D-8,7.05D-9,5.24D-9,4.07D-9,3.25D-9,2.67D-9,
     /2.23D-9,1.63D-9,
     /1.25D-9,9.89D-10,8.04D-10,6.67D-10,4.47D-10,3.22D-10,2.43D-10,
     /1.91D-10,1.27D-10,9.04D-11,
     /6.79D-11,5.29D-11,4.24D-11,3.48D-11,2.46D-11,1.84D-11,1.42D-11,
     /1.13D-11,9.26D-12,6.00D-12,
     /4.20D-12,3.10D-12,2.38D-12,1.53D-12,1.06D-12,7.82D-13,5.99D-13,
     /4.74D-13,3.84D-13,2.67D-13,
     /1.96D-13,1.50D-13,1.19D-13,9.62D-14/  
# ELASTIC TOTAL                                 
      DATA YEL/4.89,5.19,5.20,5.21,5.26,5.29,5.33,5.37,5.41,5.47,
     /5.53,5.58,5.62,5.66,5.69,5.70,5.76,5.83,5.88,5.90,
     /5.96,6.01,6.08,6.12,6.14,6.16,6.16,6.17,6.16,6.16,
     /6.14,6.11,6.09,6.01,5.90,5.60,5.36,5.10,4.91,4.70,
     /4.51,4.32,4.21,4.10,3.75,3.49,3.27,3.03,2.54,2.14,
     /1.83,1.61,1.27,1.06,.884,.746,.652,.580,.460,.355,
     /.244,.194,.150,.117,.087,.071,.052,.041,.028,.022,
     /.014,.0108,.00722,.00544,.00437,.00352,.00295,.00224,.00182,
     /.00154,
     /.00118,.000830,.000654,.000550,.000466,.000411,.000371,.000342,
     /.000301,.000274,
     /.000255,.000241,.000230,.000222,.000209,.000201,.000195,.000190,
     /.000186,.000180,
     /.000177,.000174,.000172,.000170,.000169,.000168,.000167,.000167,
     /.000167,.000166,
     /.000166,.000166,.000166,.000166,30*.000165/
# ANGULAR DISTRIBUTION PARAMETER EPSILON
# EPSILON = 1.0-YEPS
      DATA YEPS/1.0,.99711,.99712,1.0,1.0,1.00562,1.00565,1.01118,
     /1.01386,1.01920,
     /1.02440,1.02688,1.03202,1.03445,1.03689,1.04209,1.04686,1.05400,
     /1.06119,1.06604,
     /1.07792,1.08474,1.10094,1.11490,1.12663,1.13826,1.14789,1.15724,
     /1.16707,1.18142,
     /1.19873,1.21165,1.21951,1.23447,1.24855,1.26918,1.26215,1.26104,
     /1.23265,1.20568,
     /1.17192,1.13835,1.08539,1.03657,.97200,.90989,.85384,.80836,
     /.71541,.65146,
     /.60355,.53739,.46277,.38963,.35522,.32989,.29979,.27742,
     /.21850,.20332,
     /.16921,.13304,.12155,.08318,.07263,.06130,.04637,.03720,
     /.02338,.016295,
     /.011386,.008195,.005394,.004037,.003205,.002548,.002113,.001572,
     /.001246,.001044,
     /7.61D-4,4.925D-4,3.404D-4,2.803D-4,2.179D-4,1.766D-4,1.475D-4,
     /1.258D-4,9.60D-5,7.65D-5,
     /6.29D-5,5.29D-5,4.53D-5,3.93D-5,3.07D-5,2.47D-5,2.04D-5,1.72D-5,
     /1.47D-5,1.05D-5,
     /7.84D-6,6.12D-6,4.91D-6,3.373D-6,2.463D-6,1.881D-6,1.483D-6,
     /1.200D-6,9.91D-7,7.09D-7,
     /5.322D-7,4.146D-7,3.319D-7,2.718D-7,1.775D-7,1.249D-7,9.27D-8,
     /7.15D-8,4.62D-8,3.23D-8,
     /2.382D-8,1.828D-8,1.447D-8,1.173D-8,8.14D-9,5.97D-9,4.56D-9,
     /3.59D-9,2.90D-9,1.83D-9,
     /1.26D-9,9.10D-10,6.90D-10,4.40D-10,3.00D-10,2.16D-10,1.63D-10,
     /1.27D-10,1.02D-10,7.0D-11,
     /5.1D-11,3.8D-11,3.0D-11,2.4D-11/
#  IONISATION (VALUES ABOVE 20KEV GENERATED BY BORN-BETHE IN SUB)
      DATA XION/24.58739,25.0,25.5,26.0,26.5,27.0,27.5,28.0,28.5,29.0,
     /29.5,30.0,30.5,31.0,31.5,32.0,32.5,33.0,33.5,34.0,    
     /36.0,38.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,75.0,
     /80.0,85.0,90.0,95.0,100.,105.,110.,115.,120.,125.,
     /130.,135.,140.,145.,150.,160.,170.,180.,190.,200., 
     /225.,250.,275.,300.,350.,400.,450.,500.,550.,600.,               
     /650.,700.,750.,800.,850.,900.,950.,1000.,1200.,1400.,
     /1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,
     /6000.,7000.,8000.,9000.,1.0D4,1.2D4,1.4D4,1.6D4,1.8D4,2.0D4/
# GROSS IONISATION 
      DATA YION/.0,.0038,.0094,.0155,.0218,.0279,.0336,.0392,.0446,
     /.0504,
     /.0561,.0612,.0667,.0722,.0773,.0826,.0878,.0929,.0981,.103,
     /.121,.138,.154,.188,.219,.242,.262,.276,.290,.301,
     /.311,.319,.326,.333,.336,.338,.340,.341,.342,.342,
     /.343,.342,.341,.340,.338,.335,.332,.326,.322,.316, 
     /.302,.290,.279,.268,.246,.231,.216,.203,.191,.180,              
     ..171,.163,.155,.148,.142,.136,.130,.125,.109,.097,
     /.0872,.0795,.0729,.0608,.0524,.0458,.0410,.0368,.0336,.0311,
     /.0293,.0255,.0229,.0206,.0192,.0164,.0147,.0130,.0119,.0108/
# COUNTING IONISATION      
      DATA YINC/.0,.0038,.0094,.0155,.0218,.0279,.0336,.0392,.0446,
     /.0504,
     /.0561,.0612,.0667,.0722,.0773,.0826,.0878,.0929,.0981,.103,
     /.121,.138,.154,.188,.219,.242,.262,.276,.290,.301,
     /.311,.319,.326,.333,.336,.338,.340,.341,.341,.341,
     /.342,.341,.340,.339,.337,.334,.331,.325,.321,.315,
     /.301,.289,.278,.267,.245,.230,.215,.202,.190,.179,           
     /.170,.162,.154,.147,.141,.135,.129,.124,.108,.096,
     /.0867,.0791,.0725,.0605,.0522,.0456,.0408,.0367,.0335,.0310,
     /.0292,.0254,.0228,.0205,.0191,.0163,.0146,.0129,.0118,.0107/
#  ALL EXCITATIONS IN UNITS OF 10**-18
#  2 3S J=1 METASTABLE
      DATA X23S/19.81961,19.83,19.85,19.88,19.9,19.95,20.0,20.05,20.1,
     /20.15,
     /20.2,20.25,20.3,20.35,20.4,20.45,20.50,20.55,20.6,20.63,
     /20.66,20.7,20.75,20.8,20.85,20.90,20.94,20.97,21.0,21.05,
     /21.1,21.15,21.2,21.25,21.3,21.4,21.5,22.0,22.2,22.25,
     /22.3,22.35,22.4,22.42,22.44,22.46,22.48,22.5,22.52,22.55,
     /22.6,22.62,22.64,22.66,22.68,22.7,22.71,22.72,22.75,22.8,
     /22.85,22.88,22.9,22.95,22.97,23.0,23.05,23.1,23.3,23.4,
     /23.5,23.6,23.8,24.0,24.5,25.0,26.0,27.0,28.0,29.0,
     /30.0,31.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,
     /48.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,
     /100.,110.,120.,130.,140.,150.,160.,180.,200.,220.,
     /240.,260.,280.,300.,340.,380.,420.,460.,500.,550.,
     /600.,650.,700.,750.,800.,850.,900.,950.,1000.,1100.,
     /1200.,1300.,1400.,1500.,1600.,1700.,1800.,1900.,2000./
      DATA Y23S/0.00,.780,1.16,1.64,1.98,2.81,3.53,4.13,4.61,4.96,
     /5.20,5.35,5.41,5.36,5.21,4.95,4.63,4.23,3.66,3.16,
     /3.04,3.13,3.41,3.77,4.14,4.44,4.54,4.43,4.27,3.96,
     /3.69,3.48,3.32,3.21,3.15,3.08,3.06,3.09,3.08,3.04,
     /2.97,2.84,2.25,1.58,1.83,4.91,4.45,4.13,3.95,3.79,
     /3.60,3.51,3.07,2.45,2.61,2.67,2.36,2.97,3.01,2.96,
     /2.87,2.61,3.04,2.75,3.16,3.06,2.90,2.79,2.81,2.86,
     /2.75,2.80,2.71,2.65,2.58,2.48,2.39,2.30,2.19,2.09,
     /1.98,1.84,1.73,1.53,1.36,1.22,1.09,.985,.892,.812,
     /.742,.680,.555,.461,.389,.332,.287,.250,.220,.194,
     /.154,.125,.103,.0861,.0726,.0617,.0529,.0397,.0305,.0239,
     /.0191,.0154,.0126,.0105,.00740,.00542,.00407,.00314,.00247,.00187,
     /.00145,.00115,9.23D-4,7.53D-4,6.22D-4,5.20D-4,4.39D-4,3.74D-4,
     /3.21D-4,2.42D-4,
     /1.86D-4,1.47D-4,1.18D-4,9.57D-5,7.89D-5,6.58D-5,5.54D-5,4.71D-5,
     /4.04D-5/
# 2 1S J=0 METASTABLE
      DATA X21S/20.61577,20.62,20.63,20.65,20.67,20.69,20.72,20.75,
     /20.80,20.85,
     /20.90,20.96,20.98,21.0,21.05,21.1,21.15,21.2,21.22,21.25,
     /21.3,21.4,21.5,21.6,21.7,21.8,21.9,22.0,22.1,22.2,
     /22.25,22.3,22.35,22.4,22.42,22.44,22.46,22.48,22.5,22.55,
     /22.59,22.6,22.61,22.62,22.63,22.64,22.65,22.68,22.7,22.71,
     /22.72,22.73,22.75,22.78,22.8,22.85,22.87,22.88,22.89,22.9,
     /22.91,22.92,22.93,22.94,22.95,22.96,22.97,22.98,22.99,23.0,
     /23.01,23.05,23.1,23.2,23.3,23.4,23.5,23.6,23.8,24.0,
     /24.2,24.4,24.7,25.0,26.0,28.0,30.0,32.0,35.0,40.0,
     /45.0,50.0,55.0,60.0,65.0,70.0,80.0,90.0,100.,110.,
     /120.,140.,170.,200.,240.,280.,320.,360.,400.,450.,
     /500.,550.,600.,650.,700.,800.,900.,1000.,1100.,1200.,
     /1400.,1600.,1800.,2000.,2200.,2400.,2700.,3000./
      DATA Y21S/0.00,.406,.477,.664,.820,.946,1.10,1.24,1.47,1.72,
     /2.03,2.52,2.40,2.39,2.39,2.42,2.46,2.53,2.55,2.53,
     /2.52,2.53,2.57,2.59,2.62,2.64,2.65,2.65,2.65,2.62,
     /2.59,2.53,2.42,2.14,1.86,2.17,3.35,3.01,2.79,2.34,
     /1.80,1.88,2.53,3.37,3.64,3.55,3.42,3.23,2.95,2.45,
     /1.84,2.32,2.49,2.60,2.62,2.57,2.40,2.57,2.59,2.32,
     /1.73,2.55,2.36,2.35,2.32,2.23,2.50,2.64,2.61,1.86,
     /2.28,2.53,2.35,2.39,2.44,2.51,2.48,2.45,2.44,2.49,
     /2.57,2.63,2.56,2.54,2.53,2.51,2.45,2.35,2.21,2.05,
     /1.88,1.75,1.65,1.56,1.48,1.41,1.30,1.21,1.14,1.08,
     /1.03,.948,.850,.771,.686,.617,.560,.512,.471,.428,
     /.392,.361,.335,.312,.292,.259,.233,.211,.193,.178,
     /.154,.136,.121,.109,.0997,.0916,.0817,.0737/
# 2 3P J=2,1,0 
      DATA X23P/20.96409,20.97,21.0,21.05,21.1,21.15,21.2,21.25,21.3,
     /21.35,
     /21.4,21.5,21.6,21.7,21.8,21.9,22.0,22.1,22.2,22.3,
     /22.4,22.45,22.5,22.55,22.6,22.61,22.62,22.63,22.64,22.65,
     /22.66,22.67,22.68,22.69,22.7,22.71,22.72,22.73,22.75,22.77,
     /22.8,22.85,22.88,22.9,22.91,22.92,22.93,22.96,22.97,22.99,
     /23.0,23.04,23.06,23.07,23.08,23.1,23.2,23.3,23.4,23.5,
     /23.6,23.7,23.8,23.9,24.0,24.2,24.4,24.6,25.0,26.0,
     /27.0,28.0,29.0,30.0,32.0,34.0,36.0,38.0,40.0,42.0,
     /44.0,46.0,48.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,
     /85.0,90.0,95.0,100.,110.,120.,130.,140.,150.,160.,
     /170.,180.,190.,200.,220.,240.,260.,280.,300.,340.,
     /380.,420.,460.,500.,550.,600.,700.,800.,900.,1000.,
     /1200.,1400.,1600.,1800.,2000.,2300.,2600.,3000./
      DATA Y23P/0.00,.0936,.241,.442,.611,.761,.912,1.03,1.10,1.17,
     /1.23,1.32,1.40,1.47,1.54,1.60,1.66,1.73,1.80,1.87,
     /1.94,2.05,2.07,2.09,2.22,2.48,2.68,2.60,2.27,1.78,
     /1.45,1.43,1.52,1.59,1.60,1.45,1.47,1.70,1.83,1.91,
     /1.95,1.93,2.32,1.98,1.72,2.23,2.09,2.12,2.07,2.17,
     /1.82,2.18,1.80,1.82,1.94,1.94,1.90,1.88,1.89,2.00,
     /2.16,2.21,2.14,2.08,2.09,2.03,2.16,2.26,2.29,2.41,
     /2.47,2.48,2.47,2.43,2.30,2.15,2.00,1.84,1.69,1.55,
     /1.43,1.31,1.21,1.11,.907,.748,.622,.522,.441,.375,
     /.322,.277,.241,.210,.162,.127,.101,.0812,.0663,.0547,
     /.0455,.0382,.0324,.0277,.0206,.0156,.0121,.00961,.00772,.00518,
     /.00363,.00264,.00197,.00151,.00118,8.48D-4,5.21D-4,3.42D-4,
     /2.37D-4,1.70D-4,
     /9.65D-5,5.99D-5,3.96D-5,2.76D-5,2.00D-5,1.30D-5,8.94D-6,5.78D-6/
# 2 1P RESONANCE RADIATION J=1   58.434 NM       OSC STRENGTH F=0.27608  
      DATA X21P/21.21802,21.23,21.25,21.3,21.4,21.5,21.6,21.7,21.8,21.9,
     /22.0,22.1,22.2,22.3,22.35,22.4,22.42,22.44,22.46,22.48,
     /22.5,22.55,22.57,22.59,22.6,22.61,22.62,22.63,22.64,22.65,
     /22.66,22.68,22.7,22.71,22.72,22.73,22.75,22.8,22.85,22.87,
     /22.88,22.9,22.91,22.94,22.96,22.97,22.98,22.99,23.0,23.01,
     /23.05,23.1,23.2,23.3,23.4,23.5,23.6,23.7,23.8,23.9,
     /24.0,24.2,24.4,24.6,24.8,25.0,26.0,27.0,28.0,29.0,
     /30.0,31.0,32.0,33.0,34.0,35.0,36.0,37.0,38.0,39.0,
     /40.0,42.0,44.0,46.0,48.0,50.0,52.0,54.0,56.0,58.0,
     /60.0,64.0,68.0,72.0,76.0,80.0,85.0,90.0,95.0,100.,
     /110.,120.,130.,140.,160.,180.,200.,240.,280.,320.,
     /360.,400.,450.,500.,550.,600.,650.,700.,800.,900.,
     /1000.,1100.,1200.,1300.,1400./
      DATA Y21P/0.00,.0519,.0884,.163,.290,.397,.493,.582,.666,.748,
     /.831,.914,.994,1.06,1.09,1.10,1.10,1.36,1.46,1.35,
     /1.32,1.30,1.28,1.19,1.07,.943,.922,.941,.872,.751,
     /.737,.959,1.13,1.17,.920,1.03,1.12,1.23,1.35,1.27,
     /1.18,1.22,1.03,1.14,1.12,1.38,1.29,1.25,1.38,1.24,
     /1.12,1.13,1.11,1.12,1.16,1.30,1.41,1.44,1.41,1.37,
     /1.39,1.42,1.52,1.70,1.80,1.89,2.16,2.42,2.69,2.96,
     /3.24,3.53,3.82,4.12,4.42,4.71,5.00,5.29,5.57,5.85,
     /6.12,6.63,7.10,7.53,7.93,8.28,8.61,8.90,9.16,9.39,
     /9.60,9.95,10.2,10.4,10.6,10.7,10.7,10.8,10.8,10.7,
     /10.6,10.4,10.2,10.0,9.57,9.13,8.71,7.96,7.33,6.79,
     /6.32,5.92,5.50,5.13,4.82,4.54,4.30,4.08,3.72,3.41,
     /3.16,2.95,2.76,2.60,2.46/
# 3 3S J=1 
      DATA X33S/22.71847,22.72,22.73,22.74,22.75,22.78,22.8,22.83,22.85,
     /22.86,
     /22.87,22.88,22.89,22.9,22.91,22.912,22.914,22.916,22.92,22.94,
     /22.96,22.98,23.0,23.02,23.05,23.1,23.2,23.25,23.3,23.35,
     /23.4,23.44,23.48,23.52,23.57,23.59,23.62,23.65,23.7,23.75,
     /23.82,23.89,23.93,24.0,24.4,25.0,26.0,27.0,28.0,29.0,
     /30.0,31.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,
     /48.0,50.0,54.0,58.0,62.0,66.0,70.0,75.0,80.0,85.0,
     /90.0,95.0,100.,110.,120.,130.,140.,150.,160.,170.,
     /180.,200.,220.,240.,260.,280.,300.,340.,380.,420.,
     /460.,500.,550.,600.,650.,700.,750.,800.,850.,900.,
     /950.,1000.,1100.,1200.,1300.,1400./
      DATA Y33S/0.00,.800,1.15,1.03,.985,.854,.812,.752,.644,.503,
     /.277,1.79,1.17,1.06,1.32,1.51,1.57,1.37,.896,.848,
     /.907,.816,.838,.656,.872,.859,.890,.900,.860,.750,
     /.620,.810,.770,.960,.870,.870,.730,.710,.710,.730,
     /.770,.690,.760,.742,.725,.694,.665,.635,.605,.577,
     /.550,.524,.499,.452,.409,.370,.336,.305,.278,.253,
     /.231,.212,.178,.151,.130,.112,.0968,.0817,.0696,.0597,
     /.0516,.0449,.0393,.0306,.0242,.0195,.0160,.0132,.0111,.00938,
     /.00800,.00596,.00456,.00356,.00284,.00230,.00188,.00131,9.53D-4,
     /7.13D-4,
     /5.47D-4,4.29D-4,3.25D-4,2.52D-4,1.99D-4,1.60D-4,1.31D-4,1.08D-4,
     /9.02D-5,7.62D-5,
     /6.49D-5,5.58D-5,4.20D-5,3.25D-5,2.56D-5,2.06D-5/
# 3 1S J=0
      DATA X31S/22.92032,22.96,22.985,23.02,23.05,23.07,23.1,23.15,23.2,
     /23.25,
     /23.3,23.33,23.36,23.39,23.41,23.45,23.48,23.51,23.54,23.56,
     /23.59,23.62,23.65,23.68,23.73,23.82,23.88,23.94,24.0,25.0,
     /26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,44.0,48.0,
     /52.0,56.0,60.0,65.0,70.0,75.0,80.0,90.0,100.,110.,
     /120.,130.,140.,160.,180.,200.,220.,240.,260.,280.,
     /300.,340.,380.,420.,460.,500.,550.,600.,650.,700.,
     /750.,800.,900.,1000.,1100.,1200.,1300.,1400.,1500.,1600.,
     /1800.,2000.,2400.,2800.,3200.,3600.,4000./
      DATA Y31S/0.00,.535,.457,.587,.490,.490,.478,.491,.506,.512,
     /.501,.470,.418,.374,.351,.371,.520,.681,.520,.467,
     /.496,.410,.442,.429,.416,.455,.377,.444,.422,.426,
     /.428,.429,.425,.419,.412,.402,.396,.387,.370,.354,
     /.338,.324,.311,.296,.283,.271,.260,.242,.226,.213,
     /.203,.193,.185,.172,.161,.152,.144,.137,.131,.125,
     /.120,.111,.103,.0957,.0894,.0839,.0778,.0725,.0678,.0636,
     /.0599,.0566,.0509,.0462,.0423,.0389,.0361,.0336,.0315,.0296,
     /.0264,.0238,.0199,.0171,.0150,.0133,.0120/
# 3 3P J=2,1,0
      DATA X33P/23.00707,23.02,23.03,23.04,23.05,23.06,23.07,23.08,23.1,
     /23.2,
     /23.3,23.4,23.5,23.55,23.6,23.65,23.7,23.8,23.9,24.0,
     /24.1,24.2,24.3,24.4,24.6,24.8,25.0,26.0,27.0,28.0,
     /30.0,32.0,34.0,36.0,38.0,40.0,44.0,48.0,52.0,56.0,
     /60.0,64.0,68.0,72.0,76.0,80.0,85.0,90.0,95.0,100.,
     /110.,120.,130.,140.,150.,160.,170.,180.,200.,220.,
     /240.,260.,280.,300.,340.,380.,420.,460.,500.,550.,
     /600.,650.,700.,750.,800.,850.,900.,950.,1000.,1100.,
     /1200.,1300.,1400.,1600.,1800.,2000.,2200.,2400.,2600.,2800.,
     /3000./
      DATA Y33P/0.00,.387,.410,.179,.148,.335,.381,.282,.280,.309,
     /.332,.359,.411,.416,.405,.448,.438,.467,.485,.493,
     /.500,.515,.517,.513,.503,.508,.512,.516,.515,.524,
     /.544,.539,.523,.500,.474,.446,.392,.342,.297,.259,
     /.226,.197,.173,.152,.134,.118,.102,.0878,.0762,.0665,
     /.0512,.0401,.0318,.0255,.0208,.0171,.0142,.0119,.00854,.00632,
     /.00479,.00371,.00292,.00234,.00157,.00109,7.93D-4,5.92D-4,4.53D-4,
     /3.34D-4,
     /2.53D-4,1.96D-4,1.55D-4,1.24D-4,1.01D-4,8.37D-5,6.99D-5,5.89D-5,
     /5.02D-5,3.72D-5,
     /2.83D-5,2.21D-5,1.75D-5,1.16D-5,8.05D-6,5.82D-6,4.34D-6,3.32D-6,
     /2.60D-6,2.07D-6,
     /1.68D-6/
# 3 3D J=3,2,1
      DATA X33D/23.07365,23.1,23.15,23.2,23.25,23.3,23.35,23.4,23.45,
     /23.5,
     /23.55,23.6,23.66,23.7,23.75,23.8,23.85,23.9,23.95,24.0,
     /24.05,24.1,24.15,24.2,24.25,24.3,24.35,24.4,24.45,24.5,
     /24.55,24.6,24.65,24.7,24.8,24.9,25.0,26.0,27.0,28.0,
     /29.0,30.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,
     /48.0,50.0,52.0,54.0,56.0,58.0,60.0,64.0,68.0,72.0,
     /76.0,80.0,85.0,90.0,95.0,100.,110.,120.,130.,140.,
     /150.,160.,180.,200.,220.,240.,260.,280.,300.,320.,
     /340.,360.,380.,400.,440.,480.,520.,560.,600.,650.,
     /700.,750.,800.,850.,900.,1000.,1100.,1200.,1300.,1400.,
     /1600.,1800.,2000.,2200.,2400.,2600.,2800.,3000./
      DATA Y33D/0.00,.00956,.0236,.0401,.0602,.0861,.120,.166,.222,.229,
     /.238,.197,.123,.118,.110,.112,.104,.110,.099,.0985,
     /.113,.107,.109,.114,.118,.119,.118,.116,.113,.105,
     /.112,.116,.118,.119,.120,.120,.119,.115,.118,.121,
     /.121,.120,.113,.105,.0958,.0867,.0780,.0701,.0628,.0563,
     /.0505,.0453,.0407,.0366,.0330,.0298,.0269,.0221,.0183,.0152,
     /.0127,.0107,.00868,.00712,.00588,.00490,.00347,.00252,.00188,
     /.00142,
     /.00110,8.64D-4,5.56D-4,3.76D-4,2.64D-4,1.92D-4,1.44D-4,1.10D-4,
     /8.60D-5,6.84D-5,
     /5.53D-5,4.53D-5,3.76D-5,3.15D-5,2.28D-5,1.70D-5,1.30D-5,1.02D-5,
     /8.12D-6,6.25D-6,
     /4.92D-6,3.94D-6,3.21D-6,2.64D-6,2.21D-6,1.58D-6,1.17D-6,8.95D-7,
     /6.98D-7,5.55D-7,
     /3.67D-7,2.56D-7,1.85D-7,1.38D-7,1.06D-7,8.32D-8,6.64D-8,5.38D-8/
# 3 1D J=2
      DATA X31D/23.07407,23.08,23.1,23.15,23.2,23.25,23.3,23.35,23.4,
     /23.45,
     /23.5,23.55,23.6,23.66,23.7,23.75,23.8,23.85,23.9,23.95,
     /24.0,24.05,24.1,24.15,24.2,24.25,24.3,24.35,24.4,24.45,
     /24.5,24.6,24.7,24.8,25.0,26.0,28.0,30.0,32.0,34.0,
     /36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,54.0,58.0,
     /62.0,66.0,70.0,75.0,80.0,90.0,100.,110.,120.,140.,
     /160.,180.,200.,220.,240.,260.,280.,300.,320.,340.,
     /370.,400.,440.,480.,520.,560.,600.,650.,700.,800.,
     /900.,1000.,1100.,1200.,1300.,1400.,1600.,1800.,2000.,2200.,
     /2400.,2600.,2800.,3000./
      DATA Y31D/0.00,.097,.0973,.110,.126,.148,.175,.200,.221,.237,
     /.235,.198,.185,.192,.168,.181,.189,.172,.193,.184,
     /.190,.209,.206,.211,.214,.215,.212,.206,.199,.191,
     /.174,.177,.179,.180,.181,.180,.180,.188,.198,.209,
     /.217,.224,.229,.232,.234,.235,.234,.233,.228,.222,
     /.215,.207,.199,.190,.180,.163,.148,.135,.124,.105,
     /.0913,.0803,.0715,.0643,.0584,.0534,.0492,.0456,.0424,.0397,
     /.0361,.0332,.0299,.0272,.0249,.0230,.0213,.0196,.0181,.0156,
     /.0138,.0124,.0112,.0102,.00938,.00868,.00756,.00669,.00600,.00544,
     /.00497,.00458,.00425,.00396/
# 3 1P  RESONANCE RADIATION J=1  53.703 NM     OSC STRENGTH F=0.07342
      DATA X31P/23.08702,23.1,23.15,23.2,23.25,23.3,23.35,23.4,23.45,
     /23.5,
     /23.54,23.56,23.60,23.64,23.68,23.7,23.75,23.80,23.88,23.9,
     /23.95,24.0,24.05,24.1,24.15,24.2,24.3,24.4,24.5,24.6,
     /24.7,24.8,25.0,25.2,25.4,25.6,26.0,27.0,28.0,29.0,
     /30.0,31.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,
     /48.0,50.0,52.0,54.0,56.0,58.0,60.0,65.0,70.0,75.0,
     /80.0,85.0,90.0,95.0,100.,110.,120.,130.,140.,160.,
     /180.,200.,220.,240.,260.,280.,300.,340.,380.,420.,
     /460.,500.,550.,600.,650.,700.,750.,800.,900.,1000.,
     /1100.,1200.,1300.,1400.,1600.,1800.,2000.,2200.,2400.,2600.,
     /2800.,3000.,3400.,3800.,4200.,4600.,5000.,5500.,6000.,6500.,
     /7000.,8000.,9000.,10000./
      DATA Y31P/0.00,.114,.129,.137,.137,.134,.131,.130,.128,.129,
     /.117,.127,.122,.163,.146,.150,.191,.180,.226,.224,
     /.218,.230,.245,.253,.265,.274,.294,.308,.330,.360,
     /.373,.382,.397,.409,.418,.423,.434,.469,.516,.577,
     /.648,.723,.808,.941,1.07,1.20,1.32,1.43,1.54,1.64,
     /1.74,1.82,1.90,1.97,2.04,2.10,2.15,2.27,2.35,2.42,
     /2.47,2.50,2.52,2.53,2.53,2.52,2.50,2.47,2.42,2.33,
     /2.24,2.14,2.06,1.97,1.90,1.82,1.76,1.64,1.53,1.44,
     /1.36,1.29,1.21,1.15,1.08,1.03,.982,.938,.862,.799,
     /.745,.699,.658,.623,.563,.514,.474,.440,.411,.386,
     /.364,.344,.312,.285,.263,.244,.228,.211,.197,.184,
     /.173,.155,.140,.128/
# 4 3S J=1
      DATA X43S/23.59396,23.62,23.65,23.7,23.8,23.9,24.0,25.0,26.0,27.0,
     /28.0,30.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,
     /48.0,50.0,52.0,54.0,56.0,58.0,60.0,64.0,68.0,72.0,
     /76.0,80.0,85.0,90.0,95.0,100.,110.,120.,130.,140.,
     /150.,160.,180.,200.,220.,240.,260.,280.,300.,320.,
     /340.,360.,380.,400.,440.,480.,520.,560.,600./
      DATA Y43S/0.0,.314,.304,.292,.276,.266,.260,.243,.238,.234,
     /.227,.212,.195,.178,.162,.147,.133,.121,.110,.100,
     /.0911,.0832,.0761,.0697,.0640,.0589,.0543,.0464,.0399,.0346,
     /.0301,.0264,.0225,.0194,.0168,.0147,.0113,.00894,.00718,.00585,
     /.00483,.00403,.00289,.00214,.00164,.00127,.00101,8.17D-4,6.69D-4,
     /5.55D-4,
     /4.66D-4,3.94D-4,3.37D-4,2.90D-4,2.19D-4,1.70D-4,1.34D-4,1.08D-4,
     /8.81D-5/
# 4 1S J=0
      DATA X41S/23.67357,23.7,23.8,23.9,24.0,25.0,26.0,27.0,28.0,29.0,
     /30.0,32.0,34.0,36.0,38.0,40.0,44.0,48.0,52.0,56.0,
     /60.0,65.0,70.0,75.0,80.0,90.0,100.,110.,120.,130.,
     /140.,160.,180.,200.,250.,300.,350.,400.,450.,500.,
     /600.,700.,800.,900.,1000.,1200.,1400.,1600.,1800.,2000.,
     /2200.,2400.,2600.,2800.,3000./
      DATA Y41S/0.0,.109,.110,.111,.112,.121,.128,.133,.138,.141,
     /.143,.146,.148,.147,.146,.144,.139,.134,.129,.123,
     /.118,.113,.108,.103,.0990,.0922,.0868,.0823,.0786,.0753,
     /.0725,.0677,.0636,.0601,.0527,.0469,.0422,.0382,.0349,.0322,
     /.0277,.0243,.0216,.0195,.0177,.0150,.0130,.0114,.0102,.00925,
     /.00845,.00777,.00719,.00669,.00626/
# 4 3P J=2,1,0
      DATA X43P/23.70789,23.75,23.8,24.0,25.0,26.0,27.0,28.0,29.0,30.0,
     /32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,
     /54.0,58.0,62.0,66.0,70.0,75.0,80.0,85.0,90.0,95.0,
     /100.,110.,120.,130.,140.,150.,160.,170.,180.,190.,
     /200.,220.,240.,260.,280.,300.,320.,340.,360.,380.,
     /400.,440.,480.,520.,560.,600.,650.,700.,750.,800.,
     /850.,900.,950.,1000.,1100.,1200.,1300.,1400.,1600.,1800.,
     /2000.,2200.,2400.,2600.,2800.,3000./
      DATA Y43P/0.0,.085,.110,.118,.152,.177,.194,.205,.211,.215,
     /.215,.209,.200,.189,.178,.167,.156,.146,.136,.127,
     /.110,.0962,.0840,.0736,.0647,.0553,.0475,.0410,.0356,.0310,
     /.0271,.0210,.0165,.0132,.0106,.00865,.00713,.00593,.00498,.00421,
     /.00359,.00266,.00202,.00156,.00123,9.88D-4,8.03D-4,6.60D-4,
     /5.49D-4,4.61D-4,
     /3.90D-4,2.87D-4,2.17D-4,1.67D-4,1.32D-4,1.06D-4,8.18D-5,6.46D-5,
     /5.18D-5,4.22D-5,
     /3.48D-5,2.90D-5,2.45D-5,2.08D-5,1.54D-5,1.17D-5,9.13D-6,7.25D-6,
     /4.78D-6,3.32D-6,
     /2.39D-6,1.78D-6,1.36D-6,1.07D-6,8.50D-7,6.88D-7/
# 4 3D J=3,2,1
      DATA X43D/23.73609,23.8,23.9,24.0,25.0,26.0,27.0,28.0,29.0,30.0,
     /32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,
     /54.0,58.0,62.0,66.0,70.0,75.0,80.0,85.0,90.0,95.0,
     /100.,110.,120.,130.,140.,150.,160.,180.,200.,220.,
     /240.,260.,280.,300.,340.,380.,420.,460.,500.,550.,
     /600.,650.,700.,750.,800.,850.,900.,950.,1000.,1100.,
     /1200.,1300.,1400.,1500.,1600./
      DATA Y43D/.0,.0288,.0363,.0407,.0575,.0646,.0681,.0692,.069,.0675,
     /.0629,.0573,.0516,.0461,.0411,.0365,.0325,.0290,.0258,.0231,
     /.0186,.0151,.0123,.0102,.00847,.00681,.00554,.00455,.00378,.00316,
     /.00267,.00194,.00145,.00111,8.61D-4,6.81D-4,5.47D-4,3.66D-4,
     /2.55D-4,1.84D-4,
     /1.37D-4,1.04D-4,8.08D-5,6.39D-5,4.18D-5,2.87D-5,2.05D-5,1.51D-5,
     /1.14D-5,8.32D-6,
     /6.24D-6,4.79D-6,3.75D-6,3.00D-6,2.43D-6,1.99D-6,1.65D-6,1.39D-6,
     /1.18D-6,8.66D-7,
     /6.55D-7,5.08D-7,4.01D-7,3.22D-7,2.63D-7/
# 4 1D J=2
      DATA X41D/23.73633,23.8,24.0,25.0,26.0,27.0,28.0,29.0,30.0,32.0,
     /34.0,36.0,38.0,40.0,44.0,48.0,52.0,56.0,60.0,64.0,
     /68.0,72.0,76.0,80.0,85.0,90.0,95.0,100.,110.,120.,
     /130.,140.,160.,180.,200.,220.,240.,260.,300.,340.,
     /380.,420.,460.,500.,550.,600.,650.,700.,800.,900.,
     /1000.,1100.,1200./
      DATA Y41D/0.0,.0791,.0799,.0846,.0902,.0959,.102,.107,.112,.120,
     /.127,.131,.134,.136,.136,.134,.131,.126,.121,.116,
     /.112,.107,.102,.0978,.0927,.0880,.0836,.0796,.0724,.0663,
     /.0610,.0564,.0489,.0430,.0384,.0346,.0314,.0288,.0246,.0215,
     /.0190,.0171,.0155,.0142,.0128,.0117,.0107,.00990,.00860,.00760,
     /.00681,.00616,.00563/
# 4 3F J=3,4,2
      DATA X43F/23.73701,23.8,23.9,24.0,25.0,26.0,27.0,28.0,29.0,30.0,
     /31.0,32.0,33.0,34.0,35.0,36.0,37.0,38.0,39.0,40.0,
     /42.0,44.0,46.0,48.0,50.0,54.0,58.0,62.0,66.0,70.0,
     /75.0,80.0,85.0,90.0,95.0,100.,110.,120.,130.,140./
      DATA Y43F/0.0,.0357,.0318,.0289,.0161,.0117,.00922,.00760,.00642,
     /.00550,
     /.00478,.00418,.00369,.00327,.00291,.00261,.00234,.00211,.00191,
     /.00173,
     /.00144,.00121,.00102,8.68D-4,7.44D-4,5.57D-4,4.25D-4,3.30D-4,
     /2.61D-4,2.09D-4,
     /1.61D-4,1.26D-4,9.98D-5,8.03D-5,6.53D-5,5.36D-5,3.72D-5,2.66D-5,
     /1.96D-5,1.47D-5/
# 4 1F J=3
      DATA X41F/23.73701,23.8,24.0,25.0,26.0,27.0,28.0,29.0,30.0,31.0,
     /32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,
     /54.0,58.0,62.0,66.0,70.0,75.0,80.0,85.0,90.0,95.0,
     /100.,110.,120.,130.,140.,150.,160.,180.,200.,220.,
     /240.,260.,280.,300.,340.,380.,420.,460.,500.,550.,
     /600.,650.,700.,750.,800.,900.,1000./
      DATA Y41F/0.0,.0175,.0172,.0160,.0149,.0139,.0130,.0122,.0114,
     /.0108,
     /.0102,.00909,.00819,.00742,.00677,.00619,.00569,.00525,.00487,
     /.00452,
     /.00393,.00346,.00307,.00274,.00246,.00217,.00193,.00173,.00156,
     /.00142,
     /.00129,.00108,9.24D-4,7.99D-4,6.99D-4,6.17D-4,5.50D-4,4.47D-4,
     /3.73D-4,3.19D-4,
     /2.77D-4,2.45D-4,2.19D-4,1.99D-4,1.67D-4,1.45D-4,1.28D-4,1.15D-4,
     /1.04D-4,9.39D-5,
     /8.55D-5,7.86D-5,78.27D-5,6.78D-5,6.35D-5,5.63D-5,5.07D-5/
# 4 1P RESONANCE RADIATION J=1   52.222 NM    OSC STRENGTH F=0.02986
      DATA X41P/23.74207,23.8,23.9,24.0,25.0,26.0,27.0,28.0,29.0,30.0,
     /31.0,32.0,33.0,34.0,35.0,36.0,37.0,38.0,39.0,40.0,
     /42.0,44.0,46.0,48.0,50.0,52.0,54.0,56.0,58.0,60.0,
     /64.0,68.0,72.0,76.0,80.0,85.0,90.0,95.0,100.,110.,
     /120.,130.,140.,150.,160.,180.,200.,220.,240.,260.,
     /280.,300.,320.,340.,360.,380.,400.,440.,480.,520.,
     /560.,600.,640.,680.,720.,760.,800.,850.,900.,950.,
     /1000.,1100.,1200.,1300.,1400.,1600.,1800.,2000.,2200.,2400.,
     /2600.,2800.,3000.,3400.,3800.,4200.,4600.,5000.,5500.,6000.,
     /6500.,7000.,7500.,8000.,9000.,10000./
      DATA Y41P/0.00,.0147,.0242,.0334,.107,.158,.196,.227,.255,.281,
     /.307,.333,.360,.387,.414,.442,.470,.498,.526,.553,
     /.606,.657,.704,.748,.789,.826,.860,.891,.919,.944,
     /.986,1.02,1.05,1.06,1.08,1.09,1.10,1.10,1.10,1.09,
     /1.07,1.05,1.03,1.01,.985,.939,.896,.855,.817,.783,
     /.751,.722,.695,.670,.646,.625,.605,.569,.537,.509,
     /.484,.461,.441,.423,.406,.390,.376,.360,.345,.332,
     /.320,.298,.279,.263,.248,.224,.205,.189,.175,.163,
     /.153,.145,.137,.124,.113,.104,.0969,.0905,.0837,.0779,
     /.0729,.0686,.0648,.0614,.0556,.0510/
# 5 1P RESONANCE  RADIATION J=1  51.562 NM      F=0.01504
# 6 1P RESONANCE  RADIATION J=1  51.210 NM      F=0.00863
# 7 1P RESONANCE  RADIATION J=1  51.000 NM      F=0.00540
# 8 1P RESONANCE  RADIATION J=1  50.865 NM      F=0.00362
# 9 1P RESONANCE  RADIATION J=1  50.772 NM      F=0.00253
# 10 1P RESONANCE RADIATION J=1  50.706 NM      F=0.00184
# 11 1P RESONANCE RADIATION J=1  50.657 NM      F=0.00138
# 12 1P RESONANCE RADIATION J=1  50.620 NM      F=0.00106
# SUM HIGHER 1P LEVELS RESONANCE RADIATION J=1  F=0.00440
# TOTAL SUM OSCILLATOR STRENGTH = 0.42326
#
# BREMSSTRAHLUNG X-SECTION WITH CUT OFF
      DATA Z2T/42.1,23.5,10.7,5.88,3.25,1.50,.886,.582,.437,.429,
     /.460,.484,.502,.515,.525,.540,.550,.566,.575,.585,
     /.592,.596,.597,.598,.598/
# UNITS 10**-24
      DATA EBRM/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,
     /2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,
     /4.E7,5.E7,6.E7,8.E7,1.E8/
# --------------------------------------------------------------------
      IF(NANISO == 0):
 :
       NAME='HE3    ISOTROPIC   2014  '   
      else: 
       NAME='HE3  ANISOTROPIC   2014  '
      # endIF                                         
# --------------------------------------------------------------------  
#  HELIUM 3 USES SAME X-SECTIONS AS HE 4 WITH CORRECT ATOMIC MASS
#  HELIUM 4 BEST KNOWN GAS USED AS STANDARD ACCURACY BETTER THAN 0.2%   
#  AT ALL FIELDS.
#  2002: UPDATED 1997 DATA TO INCLUDE ANISOTROPIC ELASTIC SCATTTERING
#  2007: INCREASED DATA FILE UP TO 10 MEV 
#  2007: NEW ANISTROPIC SCATTERING def INTRODUCED
#  2007: PENNING FRACTION INTRODUCED
#  2010: SPLIT EXCITATION INTO 49 LEVELS.
#  2014: UPDATED IONISATION TO BE CONSISTENT WITH FURSA AND BRAY CCC
# USED MAINLY THE FOLLOWING THEORETICAL EXCITATION X-SECTIONS:
# AT RESONANCE ENERGIES USED RMPS CALCULATIONS OF 
#  BARTSCHAT   J.PHYS B31(1998)L469
# AT HIGHER ENERGIES USED RALCHENKO AT.DATA NUCL DATA TABLES 94(2008)603
# AT HIGHEST ENERGIES FOR RESONANCE DIPOLE TRANSITIONS USED BEF SCALING
# 2013: INTRODUCED IONISATION WITH CHARGE STATE =2
# -------------------------------------------------------------------- 
#
# BORN-BETHE VALUES FOR IONISATION
      CONST=1.873884D-20
      EMASS2=1021997.804
      API=DACOS(-1.00)
      A0=0.52917720859D-8
      RY=13.60569193
      BBCONST=16.0*API*A0*A0*RY*RY/EMASS2
#
      AM2=0.489
      C=5.50 
#
      NION=2
      NATT=1
      NIN=49
      NNULL=0
#
      NBREM=25
      DO 6 J=1,NIN
      IZBR(J)=0
    6 CONTINUE
      IZBR(50)=2
#
      DO 1 J=1,6
    1 KEL(J)=NANISO
      DO 2 J=1,NIN
    2 KIN(J)=NANISO
      NDATA=144
      NIOND=90                                                          
      N23S=139          
      N21S=128
      N23P=128          
      N21P=125                            
      N33S=106
      N31S=87
      N33P=91
      N33D=108
      N31D=94
      N31P=114
      N43S=59
      N41S=55
      N43P=76
      N43D=65
      N41D=53
      N43F=40
      N41F=57
      N41P=96
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(3.01600*AMU)                                      
      E(3)=24.58739
      E(4)=0.0           
      E(5)=0.0               
      E(6)=0.0 
# IONISATION ENERGIES 
      EION(1)=24.58739
      EION(2)=79.00515
      LEGAS(1)=0
      LEGAS(2)=0
      ISHELL(1)=0
      ISHELL(2)=0
# EOBY AT LOW ENERGY
      EOBY(1)=12.0
      EOBY(2)=65.0
# AUGER AND FLUORESCENCE DATA
      NC0(1)=0
      EC0(1)=0.0
      WKLM(1)=0.0
      EFL(1)=0.0
      NG1(1)=0
      EG1(1)=0.0
      NG2(1)=0
      EG2(1)=0.0
      NC0(2)=1
      EC0(2)=10.0
      WKLM(2)=0.0
      EFL(2)=0.0
      NG1(2)=0
      EG1(2)=0.0
      NG2(2)=0
      EG2(2)=0.0
#
      DO 776 J=1,NION
      DO 777 I=1,4000
      IF(EG(I):
 > EION(J)) :
       IOFFION(J)=I-1
       GO TO 776
      # endIF
  777 CONTINUE
  776 CONTINUE
#
      EIN(1)=19.81961                                                   
      EIN(2)=20.61577
      EIN(3)=20.96409
      EIN(4)=21.21802
      EIN(5)=22.71847
      EIN(6)=22.92032
      EIN(7)=23.00707
      EIN(8)=23.07365
      EIN(9)=23.07407
      EIN(10)=23.08702
      EIN(11)=23.59396
      EIN(12)=23.67357
      EIN(13)=23.70789
      EIN(14)=23.73609
      EIN(15)=23.73633
      EIN(16)=23.73701
      EIN(17)=23.73701
      EIN(18)=23.74207
      EIN(19)=23.97197
      EIN(20)=24.01121
      EIN(21)=24.02822
      EIN(22)=24.04266
      EIN(23)=24.04280
      EIN(24)=24.04315
      EIN(25)=24.04315
      EIN(26)=24.04580
      EIN(27)=24.16900
      EIN(28)=24.19116
      EIN(29)=24.20081
      EIN(30)=24.20916
      EIN(31)=24.20925
      EIN(32)=24.21100
      EIN(33)=24.28456
      EIN(34)=24.29828
      EIN(35)=24.30429
      EIN(36)=24.30954
      EIN(37)=24.30960
      EIN(38)=24.31071
      EIN(39)=24.35810
      EIN(40)=24.36718
      EIN(41)=24.37116
      EIN(42)=24.37468
      EIN(43)=24.37472
      EIN(44)=24.37547
      EIN(45)=24.41989
      EIN(46)=24.45168
      EIN(47)=24.47518
      EIN(48)=24.49308
      EIN(49)=24.50708
      EIN(50)=0.0
#***********************************************************************
# ENTER PENNING FRACTION FOR EACH LEVEL
# PENNING FRACTION BETWEEN 0.9 AND 1.0 FOR ALL MIXTURES
      DO 50 NL=1,NIN
      PENFRA[1,NL]=1.00
#  PENNING TRANSFER DISTANCE MICRONS
      PENFRA[2,NL]=1.0  
# PENNING TRANSFER TIME PICOSECONDS
   50 PENFRA[3,NL]=1.0
# HORNBECK MOLNAR MOD 
# IF PURE GAS SET TO : 0 FOR FIRST 6 LEVELS 0.25 FOR OTHER LEVELS
#     PENFRA(1,1)=0.0
#     PENFRA(1,2)=0.0
#     PENFRA(1,3)=0.0
#     PENFRA(1,4)=0.0
#     PENFRA(1,5)=0.0
#     PENFRA(1,6)=0.0
#***********************************************************************
      IF(IPEN == 0):
 GO TO 4 
      DO 3 KDUM=1,NIN
      IF(PENFRA[1,KDUM] == 0.0):
 GO TO 3
      WRITE(6,999) NAME,EIN(KDUM),PENFRA[1,KDUM],PENFRA[2,KDUM],
     /PENFRA[3,KDUM]
  999 FORMAT(' GAS = ',A15,' ENERGY LEVEL = ',F7.4,' EV.',/,' PENNING PR
     /OBABILITY =',F5.3,' ABS.LENGTH =',F7.2,' DECAY TIME =',F7.1,/)    
    3 CONTINUE
    4 DO 5 NL=1,NIN
      DO 651 I=1,4000
      IF(EG(I):
 > EIN(NL)) :
       IOFFN(NL)=I-1
       GOTO 5
      # endIF
  651 CONTINUE
    5 CONTINUE
      SCRPT(1)='                                                  '
      SCRPT(2)=' ELASTIC  ANISOTROPIC        HELIUM 3             '
      IF(NANISO == 0):
 :
      SCRPT(2)=' ELASTIC   ISOTROPIC         HELIUM 3             '
      # endIF
      SCRPT(3)=' IONISATION CHARGE STATE=1         ELOSS= 24.58739'
      SCRPT(4)=' IONISATION CHARGE STATE=2         ELOSS= 79.00515'
      SCRPT(5)=' ATTACHMENT                                       '
      SCRPT(6)='                                                  ' 
      SCRPT(7)='                                                  '
      SCRPT(8)=' EXC  23S J=1    METASTABLE        ELOSS= 19.81961'
      SCRPT(9)=' EXC  21S J=0    METASTABLE        ELOSS= 20.61577'
      SCRPT(10)=' EXC  23P J=2,1,0                  ELOSS= 20.96409'
      SCRPT(11)=' EXC  21P J=1    RESONANT          ELOSS= 21.21802'
      SCRPT(12)=' EXC  33S J=1                      ELOSS= 22.71847'
      SCRPT(13)=' EXC  31S J=0                      ELOSS= 22.92032'
      SCRPT(14)=' EXC  33P J=2,1,0                  ELOSS= 23.00707'
      SCRPT(15)=' EXC  33D J=3,2,1                  ELOSS= 23.07365'
      SCRPT(16)=' EXC  31D J=2                      ELOSS= 23.07407'
      SCRPT(17)=' EXC  31P J=1    RESONANT          ELOSS= 23.08702'
      SCRPT(18)=' EXC  43S J=1                      ELOSS= 23.59396'
      SCRPT(19)=' EXC  41S J=0                      ELOSS= 23.67357'
      SCRPT(20)=' EXC  43P J=2,1,0                  ELOSS= 23.70789'
      SCRPT(21)=' EXC  43D J=3,2,1                  ELOSS= 23.73609'
      SCRPT(22)=' EXC  41D J=2                      ELOSS= 23.73633'
      SCRPT(23)=' EXC  43F J=3,4,2                  ELOSS= 23.73701'
      SCRPT(24)=' EXC  41F J=3                      ELOSS= 23.73701'
      SCRPT(25)=' EXC  41P J=1    RESONANT          ELOSS= 23.74207'
      SCRPT(26)=' EXC  53S J=1                      ELOSS= 23.97197'
      SCRPT(27)=' EXC  51S J=0                      ELOSS= 24.01121'
      SCRPT(28)=' EXC  53P J=2,1,0                  ELOSS= 24.02822'
      SCRPT(29)=' EXC  53D J=3,2,1                  ELOSS= 24.04266'
      SCRPT(30)=' EXC  51D J=2                      ELOSS= 24.04280'
      SCRPT(31)=' EXC  53F J=3,4,2                  ELOSS= 24.04315'
      SCRPT(32)=' EXC  513 J=3                      ELOSS= 24.04315'
      SCRPT(33)=' EXC  51P J=1    RESONANT          ELOSS= 24.04580'
      SCRPT(34)=' EXC  63S J=1                      ELOSS= 24.16900'
      SCRPT(35)=' EXC  61S J=0                      ELOSS= 24.19116'
      SCRPT(36)=' EXC  63P J=2,1,0                  ELOSS= 24.20081'
      SCRPT(37)=' EXC  63D J=3,2,1                  ELOSS= 24.20916'
      SCRPT(38)=' EXC  61D J=2                      ELOSS= 24.20925'
      SCRPT(39)=' EXC  61P J=1    RESONANT          ELOSS= 24.21100'
      SCRPT(40)=' EXC  73S J=1                      ELOSS= 24.28456'
      SCRPT(41)=' EXC  71S J=0                      ELOSS= 24.29828'
      SCRPT(42)=' EXC  73P J=2,1,0                  ELOSS= 24.30429'
      SCRPT(43)=' EXC  73D J=3,2,1                  ELOSS= 24.30954'
      SCRPT(44)=' EXC  71D J=2                      ELOSS= 24.30960'
      SCRPT(45)=' EXC  71P J=1    RESONANT          ELOSS= 24.31071'
      SCRPT(46)=' EXC  N3S SUM HIGH                 ELOSS= 24.35810'
      SCRPT(47)=' EXC  N1S SUM HIGH                 ELOSS= 24.36718'
      SCRPT(48)=' EXC  N3P SUM HIGH                 ELOSS= 24.37116' 
      SCRPT(49)=' EXC  N3D SUM HIGH                 ELOSS= 24.37468'
      SCRPT(50)=' EXC  N1D SUM HIGH                 ELOSS= 24.37472'
      SCRPT(51)=' EXC  81P J=1    RESONANT          ELOSS= 24.37547'
      SCRPT(52)=' EXC  91P J=1    RESONANT          ELOSS= 24.41989'
      SCRPT(53)=' EXC 101P J=1    RESONANT          ELOSS= 24.45168'
      SCRPT(54)=' EXC 111P J=1    RESONANT          ELOSS= 24.47518'
      SCRPT(55)=' EXC 121P J=1    RESONANT          ELOSS= 24.49308'
      SCRPT(56)=' EXC  N1P SUM HI RESONANT          ELOSS= 24.50708'
      SCRPT(57)=' BREMSSTRAHLUNG FROM HELIUM ATOM                  '
#      EN=-ESTEP/2.00    
      DO 9000 I=1,NSTEP   
      EN=EG(I)                                             
#      EN=EN+ESTEP 
      IF(EN > EIN(1):
) :
       GAMMA1=(EMASS2+2.00*EN)/EMASS2
       GAMMA2=GAMMA1*GAMMA1
       BETA=math.sqrt(1.00-1.00/GAMMA2)
       BETA2=BETA*BETA
      # endIF
      DO 10 J=2,NDATA                                                   
      IF(EN <= XEN(J):
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA                                                           
   20 A=(YEL(J)-YEL(J-1))/(XEN(J)-XEN(J-1))                         
      B=(XEN(J-1)*YEL(J)-XEN(J)*YEL(J-1))/(XEN(J-1)-XEN(J))
      QELA=(A*EN+B)*1.0D-16
#
      A=(YEM(J)-YEM(J-1))/(XEN(J)-XEN(J-1))                         
      B=(XEN(J-1)*YEM(J)-XEN(J)*YEM(J-1))/(XEN(J-1)-XEN(J)) 
      QMOM=(A*EN+B)*1.0D-16
      PQ1=0.5+(QELA-QMOM)/QELA
#
      A=(YEPS(J)-YEPS(J-1))/(XEN(J)-XEN(J-1))
      B=(XEN(J-1)*YEPS(J)-XEN(J)*YEPS(J-1))/(XEN(J-1)-XEN(J))
      PQ2=A*EN+B
# EPSILON = 1-YEPS
      PQ2=1.00-PQ2
#
      IF(NANISO == 1):
 PEQEL(2,I)=PQ1
      IF(NANISO == 2):
 PEQEL(2,I)=PQ2
      Q(2,I)=QELA
      IF(NANISO == 0):
 :
       Q(2,I)=QMOM
       PEQEL(2,I)=0.5
      # endIF
# GROSS IONISATION                                                      
      QION(1,I)=0.00
      PEQION(1,I)=0.50  
      IF(NANISO == 2):
 PEQION(1,I)=0.00                               
      IF(EN <= EION(1):
) GO TO 200 
      IF(EN > XION(NIOND):
) GO TO 121     
      DO 110 J=2,NIOND                                                  
      IF(EN <= XION(J):
) GO TO 120                                       
  110 CONTINUE                                                          
      J=NIOND                                                           
  120 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      QION(1,I)=(A*EN+B)*1.D-16 
      GO TO 122
# USE BORN-BETHE X-SECTION ABOVE XION(NIOND) EV
  121 AX2=1.00/BETA2
      AX1=AX2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(1,I)=CONST*(AM2*(AX1-DEN(I)/2.0)+C*AX2)/0.995
  122 CONTINUE
# USE ANISOTROPIC SCATTERING FOR PRIMARY IONISATION ELECTRON FOR
# ENERGIES ABOVE 2 * IONISATION ENERGY 
# ANISOTROPIC ANGULAR DISTRIBUTION SAME AS ELASTIC AT ENERGY OFFSET BY 
# IONISATION ENERGY
      IF(EN <= (2.0*EION(1):
)) GO TO 200
      PEQION(1,I)=PEQEL(2,(I-IOFFION(1)))                               
# ATTACHMENT                                                            
  200 Q(4,I)=0.00 
      QATT(1,I)=0.00
# COUNTING IONISATION
      Q(5,I)=0.00
      PEQION(2,I)=0.50
      IF(NANISO == 2):
 PEQION(2,I)=0.00
      IF(EN <= EION(1):
) GO TO 250
      IF(EN > XION(NIOND):
) GO TO 241
      DO 230 J=2,NIOND
      IF(EN <= XION(J):
) GO TO 240
  230 CONTINUE
      J=NIOND
  240 A=(YINC(J)-YINC(J-1))/(XION(J)-XION(J-1))
      B=(XION(J-1)*YINC(J)-XION(J)*YINC(J-1))/(XION(J-1)-XION(J))      
      Q(5,I)=(A*EN+B)*1.0D-16
      GO TO 242
# USE BORN-BETHE X-SECTION ABOVE XION(NIOND) EV
  241 Q(5,I)=CONST*(AM2*(AX1-DEN(I)/2.0)+C*AX2)
  242 CONTINUE  
      IF(EN <= (2.00*EION(2):
)) GO TO 250
      PEQION(2,I)=PEQEL(2,(I-IOFFION(2)))
  250 Q(6,I)=0.00                                                      
#
      QTEMP1=2.0*Q(5,I)-QION(1,I)
      QTEMP2=QION(1,I)-Q(5,I)
      QION(1,I)=QTEMP1
      QION(2,I)=QTEMP2
      IF(QION(2,I):
 < 0.0) QION(2,I)=0.0
#
      DO 251 NL=1,NIN+1
      QIN(NL,I)=0.00
      PEQIN(NL,I)=0.50
      IF(NANISO == 2):
 :
       PEQIN(NL,I)=0.00
      # endIF
  251 CONTINUE
#
# 2 3S 
      IF(EN <= EIN(1):
) GO TO 2000  
      IF(EN > X23S(N23S):
) GO TO 311                                  
      DO 300 J=2,N23S                                                   
      IF(EN <= X23S(J):
) GO TO 310                                       
  300 CONTINUE                                                          
      J=N23S                                                            
  310 A=(Y23S(J)-Y23S(J-1))/(X23S(J)-X23S(J-1))                         
      B=(X23S(J-1)*Y23S(J)-X23S(J)*Y23S(J-1))/(X23S(J-1)-X23S(J))       
      QIN(1,I)=(A*EN+B)*1.D-18 
      GO TO 312
# IF ENERGY GT X23S(N23S) EV SCALE BY 1/E**3 
  311 QIN(1,I)=Y23S(N23S)*(X23S(N23S)/EN)**3*1.D-18
  312 IF(EN <= (2.0*EIN(1))) GO TO 320   
      PEQIN(1,I)=PEQEL(2,(I-IOFFN(1))) 
#
# 2 1S                                                                  
  320 IF(EN <= EIN(2)) GO TO 2000
      IF(EN > X21S(N21S):
) GO TO 341                         
      DO 330 J=2,N21S                                                   
      IF(EN <= X21S(J):
) GO TO 340                                       
  330 CONTINUE                                                          
      J=N21S                                                            
  340 A=(Y21S(J)-Y21S(J-1))/(X21S(J)-X21S(J-1))                         
      B=(X21S(J-1)*Y21S(J)-X21S(J)*Y21S(J-1))/(X21S(J-1)-X21S(J))       
      QIN(2,I)=(A*EN+B)*1.D-18
      GO TO 342
# IF ENERGY GT X21S(N21S) EV SCALE BY 1/E
  341 QIN(2,I)=Y21S(N21S)*(X21S(N21S)/EN)*1.D-18   
  342 IF(EN <= (2.0*EIN(2))) GO TO 350
      PEQIN(2,I)=PEQEL(2,(I-IOFFN(2)))
#
# 2 3P
  350 IF(EN <= EIN(3)) GO TO 2000
      IF(EN > X23P(N23P):
) GO TO 371
      DO 360 J=2,N23P
      IF(EN <= X23P(J):
) GO TO 370
  360 CONTINUE
      J=N23P
  370 A=(Y23P(J)-Y23P(J-1))/(X23P(J)-X23P(J-1))                         
      B=(X23P(J-1)*Y23P(J)-X23P(J)*Y23P(J-1))/(X23P(J-1)-X23P(J))       
      QIN(3,I)=(A*EN+B)*1.D-18
      GO TO 372
# IF ENERGY GT X23P(N23P) EV SCALE BY 1/E**3
  371 QIN(3,I)=Y23P(N23P)*(X23P(N23P)/EN)**3*1.D-18   
  372 IF(EN <= (2.0*EIN(3))) GO TO 380
      PEQIN(3,I)=PEQEL(2,(I-IOFFN(3)))
#
# 2 1P        OSC STRENGTH  F=0.27608
  380 IF(EN <= EIN(4)) GO TO 2000
      IF(EN > X21P(N21P):
) GO TO 401
      DO 390 J=2,N21P
      IF(EN <= X21P(J):
) GO TO 400
  390 CONTINUE
      J=N21P
  400 A=(Y21P(J)-Y21P(J-1))/(X21P(J)-X21P(J-1))                         
      B=(X21P(J-1)*Y21P(J)-X21P(J)*Y21P(J-1))/(X21P(J-1)-X21P(J))       
      QIN(4,I)=(A*EN+B)*1.D-18
      GO TO 402
# IF ENERGY GT X21P(N21P) EV : USE BEF SCALING
  401 QIN(4,I)=0.27608/(EIN(4)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(4)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(4)+E(3))
  402 IF(EN <= (2.0*EIN(4))) GO TO 410
      PEQIN(4,I)=PEQEL(2,(I-IOFFN(4)))
#
# 3 3S
  410 IF(EN <= EIN(5)) GO TO 2000
      IF(EN > X33S(N33S):
) GO TO 431
      DO 420 J=2,N33S
      IF(EN <= X33S(J):
) GO TO 430
  420 CONTINUE
      J=N33S
  430 A=(Y33S(J)-Y33S(J-1))/(X33S(J)-X33S(J-1))                         
      B=(X33S(J-1)*Y33S(J)-X33S(J)*Y33S(J-1))/(X33S(J-1)-X33S(J))       
      QIN(5,I)=(A*EN+B)*1.D-18
      GO TO 432
# IF ENERGY GT X33S(N33S) EV SCALE BY 1/E**3
  431 QIN(5,I)=Y33S(N33S)*(X33S(N33S)/EN)**3*1.D-18   
  432 IF(EN <= (2.0*EIN(5))) GO TO 440
      PEQIN(5,I)=PEQEL(2,(I-IOFFN(5)))
#
# 3 1S
  440 IF(EN <= EIN(6)) GO TO 2000
      IF(EN > X31S(N31S):
) GO TO 461
      DO 450 J=2,N31S
      IF(EN <= X31S(J):
) GO TO 460
  450 CONTINUE
      J=N31S
  460 A=(Y31S(J)-Y31S(J-1))/(X31S(J)-X31S(J-1))                         
      B=(X31S(J-1)*Y31S(J)-X31S(J)*Y31S(J-1))/(X31S(J-1)-X31S(J))       
      QIN(6,I)=(A*EN+B)*1.D-18
      GO TO 462
# IF ENERGY GT X31S(N31S) EV SCALE BY 1/E   
  461 QIN(6,I)=Y31S(N31S)*(X31S(N31S)/EN)*1.D-18   
  462 IF(EN <= (2.0*EIN(6))) GO TO 470
      PEQIN(6,I)=PEQEL(2,(I-IOFFN(6)))
#
# 3 3P
  470 IF(EN <= EIN(7)) GO TO 2000
      IF(EN > X33P(N33P):
) GO TO 491
      DO 480 J=2,N33P
      IF(EN <= X33P(J):
) GO TO 490
  480 CONTINUE
      J=N33P
  490 A=(Y33P(J)-Y33P(J-1))/(X33P(J)-X33P(J-1))                         
      B=(X33P(J-1)*Y33P(J)-X33P(J)*Y33P(J-1))/(X33P(J-1)-X33P(J))       
      QIN(7,I)=(A*EN+B)*1.D-18
      GO TO 492
# IF ENERGY GT X33P(N33P) EV SCALE BY 1/E**3
  491 QIN(7,I)=Y33P(N33P)*(X33P(N33P)/EN)*1.D-18   
  492 IF(EN <= (2.0*EIN(7))) GO TO 500
      PEQIN(7,I)=PEQEL(2,(I-IOFFN(7)))
#
# 3 3D
  500 IF(EN <= EIN(8)) GO TO 2000
      IF(EN > X33D[N33D]):
 GO TO 521
      DO 510 J=2,N33D
      IF(EN <= X33D[J]):
 GO TO 520
  510 CONTINUE
      J=N33D
  520 A=(Y33D[J]-Y33D[J-1])/(X33D[J]-X33D[J-1])                         
      B=(X33D[J-1]*Y33D[J]-X33D[J]*Y33D[J-1])/(X33D[J-1]-X33D[J])       
      QIN(8,I)=(A*EN+B)*1.D-18
      GO TO 522
# IF ENERGY GT X33D[N33D] EV SCALE BY 1/E**3
  521 QIN(8,I)=Y33D[N33D]*(X33D[N33D]/EN)*1.D-18   
  522 IF(EN <= (2.0*EIN(8))) GO TO 530
      PEQIN(8,I)=PEQEL(2,(I-IOFFN(8)))
#
# 3 1D
  530 IF(EN <= EIN(9)) GO TO 2000
      IF(EN > X31D[N31D]):
 GO TO 551
      DO 540 J=2,N31D
      IF(EN <= X31D[J]):
 GO TO 550
  540 CONTINUE
      J=N31D
  550 A=(Y31D[J]-Y31D[J-1])/(X31D[J]-X31D[J-1])                         
      B=(X31D[J-1]*Y31D[J]-X31D[J]*Y31D[J-1])/(X31D[J-1]-X31D[J])       
      QIN(9,I)=(A*EN+B)*1.D-18
      GO TO 552
# IF ENERGY GT X31D[N31D] EV SCALE BY 1/E   
  551 QIN(9,I)=Y31D[N31D]*(X31D[N31D]/EN)*1.D-18   
  552 IF(EN <= (2.0*EIN(9))) GO TO 560
      PEQIN(9,I)=PEQEL(2,(I-IOFFN(9)))
#
# 3 1P        OSC STRENGTH F=0.07342
  560 IF(EN <= EIN(10)) GO TO 2000
      IF(EN > X31P(N31P):
) GO TO 581
      DO 570 J=2,N31P
      IF(EN <= X31P(J):
) GO TO 580
  570 CONTINUE
      J=N31P
  580 A=(Y31P(J)-Y31P(J-1))/(X31P(J)-X31P(J-1))                         
      B=(X31P(J-1)*Y31P(J)-X31P(J)*Y31P(J-1))/(X31P(J-1)-X31P(J))       
      QIN(10,I)=(A*EN+B)*1.D-18
      GO TO 582
# IF ENERGY GT X31P(N31P) EV : USE BEF SCALING
  581 QIN(10,I)=0.07342/(EIN(10)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(10)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(10)+E(3))
  582 IF(EN <= (2.0*EIN(10))) GO TO 590
      PEQIN(10,I)=PEQEL(2,(I-IOFFN(10)))
#
# 4 3S
  590 IF(EN <= EIN(11)) GO TO 2000
      IF(EN > X43S(N43S):
) GO TO 611
      DO 600 J=2,N43S
      IF(EN <= X43S(J):
) GO TO 610
  600 CONTINUE
      J=N43S
  610 A=(Y43S(J)-Y43S(J-1))/(X43S(J)-X43S(J-1))                         
      B=(X43S(J-1)*Y43S(J)-X43S(J)*Y43S(J-1))/(X43S(J-1)-X43S(J))       
      QIN(11,I)=(A*EN+B)*1.D-18
      GO TO 612
# IF ENERGY GT X43S(N43S) EV SCALE BY 1/E**3
  611 QIN(11,I)=Y43S(N43S)*(X43S(N43S)/EN)**3*1.D-18
  612 IF(EN <= (2.0*EIN(11))) GO TO 620
      PEQIN(11,I)=PEQEL(2,(I-IOFFN(11)))
#
# 4 1S
  620 IF(EN <= EIN(12)) GO TO 2000
      IF(EN > X41S(N41S):
) GO TO 641
      DO 630 J=2,N41S
      IF(EN <= X41S(J):
) GO TO 640
  630 CONTINUE
      J=N41S
  640 A=(Y41S(J)-Y41S(J-1))/(X41S(J)-X41S(J-1))                         
      B=(X41S(J-1)*Y41S(J)-X41S(J)*Y41S(J-1))/(X41S(J-1)-X41S(J))       
      QIN(12,I)=(A*EN+B)*1.D-18
      GO TO 642
# IF ENERGY GT X41S(N41S) EV SCALE BY 1/E     
  641 QIN(12,I)=Y41S(N41S)*(X41S(N41S)/EN)*1.D-18
  642 IF(EN <= (2.0*EIN(12))) GO TO 650
      PEQIN(12,I)=PEQEL(2,(I-IOFFN(12)))
#
# 4 3P
  650 IF(EN <= EIN(13)) GO TO 2000
      IF(EN > X43P(N43P):
) GO TO 671
      DO 660 J=2,N43P
      IF(EN <= X43P(J):
) GO TO 670
  660 CONTINUE
      J=N43P
  670 A=(Y43P(J)-Y43P(J-1))/(X43P(J)-X43P(J-1))                         
      B=(X43P(J-1)*Y43P(J)-X43P(J)*Y43P(J-1))/(X43P(J-1)-X43P(J))       
      QIN(13,I)=(A*EN+B)*1.D-18
      GO TO 672
# IF ENERGY GT X43P(N43P) EV SCALE BY 1/E**3  
  671 QIN(13,I)=Y43P(N43P)*(X43P(N43P)/EN)**3*1.D-18
  672 IF(EN <= (2.0*EIN(13))) GO TO 680
      PEQIN(13,I)=PEQEL(2,(I-IOFFN(13)))
#
# 4 3D
  680 IF(EN <= EIN(14)) GO TO 2000
      IF(EN > X43D[N43D]):
 GO TO 701
      DO 690 J=2,N43D
      IF(EN <= X43D[J]):
 GO TO 700
  690 CONTINUE
      J=N43P
  700 A=(Y43D[J]-Y43D[J-1])/(X43D[J]-X43D[J-1])                         
      B=(X43D[J-1]*Y43D[J]-X43D[J]*Y43D[J-1])/(X43D[J-1]-X43D[J])       
      QIN(14,I)=(A*EN+B)*1.D-18
      GO TO 702
# IF ENERGY GT X43D[N43D] EV SCALE BY 1/E**3  
  701 QIN(14,I)=Y43D[N43D]*(X43D[N43D]/EN)**3*1.D-18
  702 IF(EN <= (2.0*EIN(14))) GO TO 710
      PEQIN(14,I)=PEQEL(2,(I-IOFFN(14)))
#
# 4 1D
  710 IF(EN <= EIN(15)) GO TO 2000
      IF(EN > X41D[N41D]):
 GO TO 731
      DO 720 J=2,N41D
      IF(EN <= X41D[J]):
 GO TO 730
  720 CONTINUE
      J=N41D
  730 A=(Y41D[J]-Y41D[J-1])/(X41D[J]-X41D[J-1])                         
      B=(X41D[J-1]*Y41D[J]-X41D[J]*Y41D[J-1])/(X41D[J-1]-X41D[J])       
      QIN(15,I)=(A*EN+B)*1.D-18
      GO TO 732
# IF ENERGY GT X41D[N41D] EV SCALE BY 1/E     
  731 QIN(15,I)=Y41D[N41D]*(X41D[N41D]/EN)*1.D-18
  732 IF(EN <= (2.0*EIN(15))) GO TO 740
      PEQIN(15,I)=PEQEL(2,(I-IOFFN(15)))
#
# 4 3F
  740 IF(EN <= EIN(16)) GO TO 2000
      IF(EN > X43F(N43F):
) GO TO 761
      DO 750 J=2,N43F
      IF(EN <= X43F(J):
) GO TO 760
  750 CONTINUE
      J=N43F
  760 A=(Y43F(J)-Y43F(J-1))/(X43F(J)-X43F(J-1))                         
      B=(X43F(J-1)*Y43F(J)-X43F(J)*Y43F(J-1))/(X43F(J-1)-X43F(J))       
      QIN(16,I)=(A*EN+B)*1.D-18
      GO TO 762
# IF ENERGY GT X43F(N43F) EV SCALE BY 1/E**4  
  761 QIN(16,I)=Y43F(N43F)*(X43F(N43F)/EN)**4*1.D-18
  762 IF(EN <= (2.0*EIN(16))) GO TO 770
      PEQIN(16,I)=PEQEL(2,(I-IOFFN(16)))
#
# 4 1F
  770 IF(EN <= EIN(17)) GO TO 2000
      IF(EN > X41F(N41F):
) GO TO 791
      DO 780 J=2,N41F
      IF(EN <= X41F(J):
) GO TO 790
  780 CONTINUE
      J=N41F
  790 A=(Y41F(J)-Y41F(J-1))/(X41F(J)-X41F(J-1))                         
      B=(X41F(J-1)*Y41F(J)-X41F(J)*Y41F(J-1))/(X41F(J-1)-X41F(J))       
      QIN(17,I)=(A*EN+B)*1.D-18
      GO TO 792
# IF ENERGY GT X41F(N41F) EV SCALE BY 1/E     
  791 QIN(17,I)=Y41F(N41F)*(X41F(N41F)/EN)*1.D-18
  792 IF(EN <= (2.0*EIN(17))) GO TO 800
      PEQIN(17,I)=PEQEL(2,(I-IOFFN(17)))
#
# 4 1P       OSC STRENGTH  F=0.02986
  800 IF(EN <= EIN(18)) GO TO 2000
      IF(EN > X41P(N41P):
) GO TO 821
      DO 810 J=2,N41P
      IF(EN <= X41P(J):
) GO TO 820
  810 CONTINUE
      J=N41P
  820 A=(Y41P(J)-Y41P(J-1))/(X41P(J)-X41P(J-1))                         
      B=(X41P(J-1)*Y41P(J)-X41P(J)*Y41P(J-1))/(X41P(J-1)-X41P(J))       
      QIN(18,I)=(A*EN+B)*1.D-18
      GO TO 822
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
  821 QIN(18,I)=0.02986/(EIN(18)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(18)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(18)+E(3))
  822 IF(EN <= (2.0*EIN(18))) GO TO 830
      PEQIN(18,I)=PEQEL(2,(I-IOFFN(18)))
#
# 5 3S SCALED FROM 4 3S
  830 IF(EN <= EIN(19)) GO TO 2000
      ER=EIN(19)/EIN(11)
      ENP=EN/ER
      IF(ENP > X43S(N43S):
) GO TO 851
      DO 840 J=2,N43S
      IF(ENP <= X43S(J):
) GO TO 850
  840 CONTINUE
      J=N43S
  850 A=(Y43S(J)-Y43S(J-1))/(X43S(J)-X43S(J-1))                         
      B=(X43S(J-1)*Y43S(J)-X43S(J)*Y43S(J-1))/(X43S(J-1)-X43S(J))       
      QIN(19,I)=0.512*(A*ENP+B)*1.D-18
      GO TO 852
# IF ENERGY GT X43S(N43S) EV SCALE BY 1/E**3
  851 QIN(19,I)=0.512*Y43S(N43S)*(X43S(N43S)/ENP)**3*1.D-18
  852 IF(EN <= (2.0*EIN(19))) GO TO 860
      PEQIN(19,I)=PEQEL(2,(I-IOFFN(19)))
#
# 5 1S SCALED FROM 4 1S
  860 IF(EN <= EIN(20)) GO TO 2000
      ER=EIN(20)/EIN(12)
      ENP=EN/ER
      IF(ENP > X41S(N41S):
) GO TO 881
      DO 870 J=2,N41S
      IF(ENP <= X41S(J):
) GO TO 880
  870 CONTINUE
      J=N41S
  880 A=(Y41S(J)-Y41S(J-1))/(X41S(J)-X41S(J-1))                         
      B=(X41S(J-1)*Y41S(J)-X41S(J)*Y41S(J-1))/(X41S(J-1)-X41S(J))       
      QIN(20,I)=0.512*(A*ENP+B)*1.D-18
      GO TO 882
# IF ENERGY GT X41S(N41S) EV SCALE BY 1/E     
  881 QIN(20,I)=0.512*Y41S(N41S)*(X41S(N41S)/ENP)*1.D-18
  882 IF(EN <= (2.0*EIN(20))) GO TO 890
      PEQIN(20,I)=PEQEL(2,(I-IOFFN(20)))
#
# 5 3P SCALED FROM 4 3P
  890 IF(EN <= EIN(21)) GO TO 2000
      ER=EIN(21)/EIN(13)
      ENP=EN/ER
      IF(ENP > X43P(N43P):
) GO TO 911
      DO 900 J=2,N43P
      IF(ENP <= X43P(J):
) GO TO 910
  900 CONTINUE
      J=N43P
  910 A=(Y43P(J)-Y43P(J-1))/(X43P(J)-X43P(J-1))                         
      B=(X43P(J-1)*Y43P(J)-X43P(J)*Y43P(J-1))/(X43P(J-1)-X43P(J))       
      QIN(21,I)=0.512*(A*ENP+B)*1.D-18
      GO TO 912
# IF ENERGY GT X43P(N43P) EV SCALE BY 1/E**3  
  911 QIN(21,I)=0.512*Y43P(N43P)*(X43P(N43P)/ENP)**3*1.D-18
  912 IF(EN <= (2.0*EIN(21))) GO TO 920
      PEQIN(21,I)=PEQEL(2,(I-IOFFN(21)))
#
# 5 3D SCALED FROM 4 3D
  920 IF(EN <= EIN(22)) GO TO 2000
      ER=EIN(22)/EIN(14)
      ENP=EN/ER
      IF(ENP > X43D[N43D]):
 GO TO 941
      DO 930 J=2,N43D
      IF(ENP <= X43D[J]):
 GO TO 940
  930 CONTINUE
      J=N43P
  940 A=(Y43D[J]-Y43D[J-1])/(X43D[J]-X43D[J-1])                         
      B=(X43D[J-1]*Y43D[J]-X43D[J]*Y43D[J-1])/(X43D[J-1]-X43D[J])       
      QIN(22,I)=0.512*(A*ENP+B)*1.D-18
      GO TO 942
# IF ENERGY GT X43D[N43D] EV SCALE BY 1/E**3  
  941 QIN(22,I)=0.512*Y43D[N43D]*(X43D[N43D]/ENP)**3*1.D-18
  942 IF(EN <= (2.0*EIN(22))) GO TO 950
      PEQIN(22,I)=PEQEL(2,(I-IOFFN(22)))
#
# 5 1D SCALED FROM 4 1D
  950 IF(EN <= EIN(23)) GO TO 2000
      ER=EIN(23)/EIN(15)
      ENP=EN/ER
      IF(ENP > X41D[N41D]):
 GO TO 971
      DO 960 J=2,N41D
      IF(ENP <= X41D[J]):
 GO TO 970
  960 CONTINUE
      J=N41D
  970 A=(Y41D[J]-Y41D[J-1])/(X41D[J]-X41D[J-1])                         
      B=(X41D[J-1]*Y41D[J]-X41D[J]*Y41D[J-1])/(X41D[J-1]-X41D[J])       
      QIN(23,I)=0.512*(A*ENP+B)*1.D-18
      GO TO 972
# IF ENERGY GT X41D[N41D] EV SCALE BY 1/E     
  971 QIN(23,I)=0.512*Y41D[N41D]*(X41D[N41D]/ENP)*1.D-18
  972 IF(EN <= (2.0*EIN(23))) GO TO 980
      PEQIN(23,I)=PEQEL(2,(I-IOFFN(23)))
#
# 5 3F SCALED FROM 4 3F
  980 IF(EN <= EIN(24)) GO TO 2000
      ER=EIN(24)/EIN(16)
      ENP=EN/ER
      IF(ENP > X43F(N43F):
) GO TO 1001
      DO 990 J=2,N43F
      IF(ENP <= X43F(J):
) GO TO 1000
  990 CONTINUE
      J=N43F
 1000 A=(Y43F(J)-Y43F(J-1))/(X43F(J)-X43F(J-1))                         
      B=(X43F(J-1)*Y43F(J)-X43F(J)*Y43F(J-1))/(X43F(J-1)-X43F(J))       
      QIN(24,I)=0.512*(A*ENP+B)*1.D-18
      GO TO 1002
# IF ENERGY GT X43F(N43F) EV SCALE BY 1/E**4  
 1001 QIN(24,I)=0.512*Y43F(N43F)*(X43F(N43F)/ENP)**4*1.D-18
 1002 IF(EN <= (2.0*EIN(24))) GO TO 1010
      PEQIN(24,I)=PEQEL(2,(I-IOFFN(24)))
#
# 5 1F SCALED FROM 4 1F
 1010 IF(EN <= EIN(25)) GO TO 2000
      ER=EIN(25)/EIN(17)
      ENP=EN/ER
      IF(ENP > X41F(N41F):
) GO TO 1031
      DO 1020 J=2,N41F
      IF(ENP <= X41F(J):
) GO TO 1030
 1020 CONTINUE
      J=N41F
 1030 A=(Y41F(J)-Y41F(J-1))/(X41F(J)-X41F(J-1))                         
      B=(X41F(J-1)*Y41F(J)-X41F(J)*Y41F(J-1))/(X41F(J-1)-X41F(J))       
      QIN(25,I)=0.512*(A*ENP+B)*1.D-18
      GO TO 1032
# IF ENERGY GT X41F(N41F) EV SCALE BY 1/E     
 1031 QIN(25,I)=0.512*Y41F(N41F)*(X41F(N41F)/ENP)*1.D-18
 1032 IF(EN <= (2.0*EIN(25))) GO TO 1040
      PEQIN(25,I)=PEQEL(2,(I-IOFFN(25)))
#
# 5 1P   SCALED FROM 4 1P   OSC STRENGTH  F=0.01504
 1040 IF(EN <= EIN(26)) GO TO 2000
      ER=EIN(26)/EIN(18)
      ENP=EN/ER
      IF(ENP > X41P(N41P):
) GO TO 1061
      DO 1050 J=2,N41P
      IF(ENP <= X41P(J):
) GO TO 1060
 1050 CONTINUE
      J=N41P
 1060 A=(Y41P(J)-Y41P(J-1))/(X41P(J)-X41P(J-1))                         
      B=(X41P(J-1)*Y41P(J)-X41P(J)*Y41P(J-1))/(X41P(J-1)-X41P(J))       
      QIN(26,I)=0.01504/0.02986*(A*ENP+B)*1.D-18
      GO TO 1062
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1061 QIN(26,I)=0.01504/(EIN(26)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(26)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(26)+E(3))
 1062 IF(EN <= (2.0*EIN(26))) GO TO 1070
      PEQIN(26,I)=PEQEL(2,(I-IOFFN(26)))
#
# 6 3S SCALED FROM 4 3S
 1070 IF(EN <= EIN(27)) GO TO 2000
      ER=EIN(27)/EIN(11)
      ENP=EN/ER
      IF(ENP > X43S(N43S):
) GO TO 1091
      DO 1080 J=2,N43S
      IF(ENP <= X43S(J):
) GO TO 1090
 1080 CONTINUE
      J=N43S
 1090 A=(Y43S(J)-Y43S(J-1))/(X43S(J)-X43S(J-1))                         
      B=(X43S(J-1)*Y43S(J)-X43S(J)*Y43S(J-1))/(X43S(J-1)-X43S(J))       
      QIN(27,I)=0.296*(A*ENP+B)*1.D-18
      GO TO 1092
# IF ENERGY GT X43S(N43S) EV SCALE BY 1/E**3
 1091 QIN(27,I)=0.296*Y43S(N43S)*(X43S(N43S)/ENP)**3*1.D-18
 1092 IF(EN <= (2.0*EIN(27))) GO TO 1100
      PEQIN(27,I)=PEQEL(2,(I-IOFFN(27)))
#
# 6 1S SCALED FROM 4 1S
 1100 IF(EN <= EIN(28)) GO TO 2000
      ER=EIN(28)/EIN(12)
      ENP=EN/ER
      IF(ENP > X41S(N41S):
) GO TO 1121
      DO 1110 J=2,N41S
      IF(ENP <= X41S(J):
) GO TO 1120
 1110 CONTINUE
      J=N41S
 1120 A=(Y41S(J)-Y41S(J-1))/(X41S(J)-X41S(J-1))                         
      B=(X41S(J-1)*Y41S(J)-X41S(J)*Y41S(J-1))/(X41S(J-1)-X41S(J))       
      QIN(28,I)=0.296*(A*ENP+B)*1.D-18
      GO TO 1122
# IF ENERGY GT X41S(N41S) EV SCALE BY 1/E     
 1121 QIN(28,I)=0.296*Y41S(N41S)*(X41S(N41S)/ENP)*1.D-18
 1122 IF(EN <= (2.0*EIN(28))) GO TO 1130
      PEQIN(28,I)=PEQEL(2,(I-IOFFN(28)))
#
# 6 3P SCALED FROM 4 3P
 1130 IF(EN <= EIN(29)) GO TO 2000
      ER=EIN(29)/EIN(13)
      ENP=EN/ER
      IF(ENP > X43P(N43P):
) GO TO 1151
      DO 1140 J=2,N43P
      IF(ENP <= X43P(J):
) GO TO 1150
 1140 CONTINUE
      J=N43P
 1150 A=(Y43P(J)-Y43P(J-1))/(X43P(J)-X43P(J-1))                         
      B=(X43P(J-1)*Y43P(J)-X43P(J)*Y43P(J-1))/(X43P(J-1)-X43P(J))       
      QIN(29,I)=0.296*(A*ENP+B)*1.D-18
      GO TO 1152
# IF ENERGY GT X43P(N43P) EV SCALE BY 1/E**3  
 1151 QIN(29,I)=0.296*Y43P(N43P)*(X43P(N43P)/ENP)**3*1.D-18
 1152 IF(EN <= (2.0*EIN(29))) GO TO 1160
      PEQIN(29,I)=PEQEL(2,(I-IOFFN(29)))
#
# 6 3D SCALED FROM 4 3D
 1160 IF(EN <= EIN(30)) GO TO 2000
      ER=EIN(30)/EIN(14)
      ENP=EN/ER
      IF(ENP > X43D[N43D]):
 GO TO 1181
      DO 1170 J=2,N43D
      IF(ENP <= X43D[J]):
 GO TO 1180
 1170 CONTINUE
      J=N43P
 1180 A=(Y43D[J]-Y43D[J-1])/(X43D[J]-X43D[J-1])                         
      B=(X43D[J-1]*Y43D[J]-X43D[J]*Y43D[J-1])/(X43D[J-1]-X43D[J])       
      QIN(30,I)=0.296*(A*ENP+B)*1.D-18
      GO TO 1182
# IF ENERGY GT X43D[N43D] EV SCALE BY 1/E**3  
 1181 QIN(30,I)=0.296*Y43D[N43D]*(X43D[N43D]/ENP)**3*1.D-18
 1182 IF(EN <= (2.0*EIN(30))) GO TO 1190
      PEQIN(30,I)=PEQEL(2,(I-IOFFN(30)))
#
# 6 1D SCALED FROM 4 1D
 1190 IF(EN <= EIN(31)) GO TO 2000
      ER=EIN(31)/EIN(15)
      ENP=EN/ER
      IF(ENP > X41D[N41D]):
 GO TO 1211
      DO 1200 J=2,N41D
      IF(ENP <= X41D[J]):
 GO TO 1210
 1200 CONTINUE
      J=N41D
 1210 A=(Y41D[J]-Y41D[J-1])/(X41D[J]-X41D[J-1])                         
      B=(X41D[J-1]*Y41D[J]-X41D[J]*Y41D[J-1])/(X41D[J-1]-X41D[J])       
      QIN(31,I)=0.296*(A*ENP+B)*1.D-18
      GO TO 1212
# IF ENERGY GT X41D[N41D] EV SCALE BY 1/E     
 1211 QIN(31,I)=0.296*Y41D[N41D]*(X41D[N41D]/ENP)*1.D-18
 1212 IF(EN <= (2.0*EIN(31))) GO TO 1220
      PEQIN(31,I)=PEQEL(2,(I-IOFFN(31)))
#
# 6 1P  SCALED FROM 4 1P    OSC STRENGTH  F=0.00863 
 1220 IF(EN <= EIN(32)) GO TO 2000
      ER=EIN(32)/EIN(18)
      ENP=EN/ER
      IF(ENP > X41P(N41P):
) GO TO 1241
      DO 1230 J=2,N41P
      IF(ENP <= X41P(J):
) GO TO 1240
 1230 CONTINUE
      J=N41P
 1240 A=(Y41P(J)-Y41P(J-1))/(X41P(J)-X41P(J-1))                         
      B=(X41P(J-1)*Y41P(J)-X41P(J)*Y41P(J-1))/(X41P(J-1)-X41P(J))       
      QIN(32,I)=0.00863/0.02986*(A*ENP+B)*1.D-18
      GO TO 1242
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1241 QIN(32,I)=0.00863/(EIN(32)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(32)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(32)+E(3))
 1242 IF(EN <= (2.0*EIN(32))) GO TO 1250 
      PEQIN(32,I)=PEQEL(2,(I-IOFFN(32)))
#
# 7 3S SCALED FROM 4 3S
 1250 IF(EN <= EIN(33)) GO TO 2000
      ER=EIN(33)/EIN(11)
      ENP=EN/ER
      IF(ENP > X43S(N43S):
) GO TO 1271
      DO 1260 J=2,N43S
      IF(ENP <= X43S(J):
) GO TO 1270
 1260 CONTINUE
      J=N43S
 1270 A=(Y43S(J)-Y43S(J-1))/(X43S(J)-X43S(J-1))                         
      B=(X43S(J-1)*Y43S(J)-X43S(J)*Y43S(J-1))/(X43S(J-1)-X43S(J))       
      QIN(33,I)=0.187*(A*ENP+B)*1.D-18
      GO TO 1272
# IF ENERGY GT X43S(N43S) EV SCALE BY 1/E**3
 1271 QIN(33,I)=0.187*Y43S(N43S)*(X43S(N43S)/ENP)**3*1.D-18
 1272 IF(EN <= (2.0*EIN(33))) GO TO 1280
      PEQIN(33,I)=PEQEL(2,(I-IOFFN(33)))
#
# 7 1S SCALED FROM 4 1S
 1280 IF(EN <= EIN(34)) GO TO 2000
      ER=EIN(34)/EIN(12)
      ENP=EN/ER
      IF(ENP > X41S(N41S):
) GO TO 1301
      DO 1290 J=2,N41S
      IF(ENP <= X41S(J):
) GO TO 1300
 1290 CONTINUE
      J=N41S
 1300 A=(Y41S(J)-Y41S(J-1))/(X41S(J)-X41S(J-1))                         
      B=(X41S(J-1)*Y41S(J)-X41S(J)*Y41S(J-1))/(X41S(J-1)-X41S(J))       
      QIN(34,I)=0.187*(A*ENP+B)*1.D-18
      GO TO 1302
# IF ENERGY GT X41S(N41S) EV SCALE BY 1/E     
 1301 QIN(34,I)=0.187*Y41S(N41S)*(X41S(N41S)/ENP)*1.D-18
 1302 IF(EN <= (2.0*EIN(34))) GO TO 1310
      PEQIN(34,I)=PEQEL(2,(I-IOFFN(34)))
#
# 7 3P SCALED FROM 4 3P
 1310 IF(EN <= EIN(35)) GO TO 2000
      ER=EIN(35)/EIN(13)
      ENP=EN/ER
      IF(ENP > X43P(N43P):
) GO TO 1331
      DO 1320 J=2,N43P
      IF(ENP <= X43P(J):
) GO TO 1330
 1320 CONTINUE
      J=N43P
 1330 A=(Y43P(J)-Y43P(J-1))/(X43P(J)-X43P(J-1))                         
      B=(X43P(J-1)*Y43P(J)-X43P(J)*Y43P(J-1))/(X43P(J-1)-X43P(J))       
      QIN(35,I)=0.187*(A*ENP+B)*1.D-18
      GO TO 1332
# IF ENERGY GT X43P(N43P) EV SCALE BY 1/E**3  
 1331 QIN(35,I)=0.187*Y43P(N43P)*(X43P(N43P)/ENP)**3*1.D-18
 1332 IF(EN <= (2.0*EIN(35))) GO TO 1340
      PEQIN(35,I)=PEQEL(2,(I-IOFFN(35)))
#
# 7 3D SCALED FROM 4 3D
 1340 IF(EN <= EIN(36)) GO TO 2000
      ER=EIN(36)/EIN(14)
      ENP=EN/ER
      IF(ENP > X43D[N43D]):
 GO TO 1361
      DO 1350 J=2,N43D
      IF(ENP <= X43D[J]):
 GO TO 1360
 1350 CONTINUE
      J=N43P
 1360 A=(Y43D[J]-Y43D[J-1])/(X43D[J]-X43D[J-1])                         
      B=(X43D[J-1]*Y43D[J]-X43D[J]*Y43D[J-1])/(X43D[J-1]-X43D[J])       
      QIN(36,I)=0.187*(A*ENP+B)*1.D-18
      GO TO 1362
# IF ENERGY GT X43D[N43D] EV SCALE BY 1/E**3  
 1361 QIN(36,I)=0.187*Y43D[N43D]*(X43D[N43D]/ENP)**3*1.D-18
 1362 IF(EN <= (2.0*EIN(36))) GO TO 1370
      PEQIN(36,I)=PEQEL(2,(I-IOFFN(36)))
#
# 7 1D SCALED FROM 4 1D
 1370 IF(EN <= EIN(37)) GO TO 2000
      ER=EIN(37)/EIN(15)
      ENP=EN/ER
      IF(ENP > X41D[N41D]):
 GO TO 1391
      DO 1380 J=2,N41D
      IF(ENP <= X41D[J]):
 GO TO 1390
 1380 CONTINUE
      J=N41D
 1390 A=(Y41D[J]-Y41D[J-1])/(X41D[J]-X41D[J-1])                         
      B=(X41D[J-1]*Y41D[J]-X41D[J]*Y41D[J-1])/(X41D[J-1]-X41D[J])       
      QIN(37,I)=0.187*(A*ENP+B)*1.D-18
      GO TO 1392
# IF ENERGY GT X41D[N41D] EV SCALE BY 1/E     
 1391 QIN(37,I)=0.187*Y41D[N41D]*(X41D[N41D]/ENP)*1.D-18
 1392 IF(EN <= (2.0*EIN(37))) GO TO 1400
      PEQIN(37,I)=PEQEL(2,(I-IOFFN(37)))
#
# 7 1P  SCALED FROM 4 1P   OSC STRENGTH  F=0.00540 
 1400 IF(EN <= EIN(38)) GO TO 2000
      ER=EIN(38)/EIN(18)
      ENP=EN/ER
      IF(ENP > X41P(N41P):
) GO TO 1421
      DO 1410 J=2,N41P
      IF(ENP <= X41P(J):
) GO TO 1420
 1410 CONTINUE
      J=N41P
 1420 A=(Y41P(J)-Y41P(J-1))/(X41P(J)-X41P(J-1))                         
      B=(X41P(J-1)*Y41P(J)-X41P(J)*Y41P(J-1))/(X41P(J-1)-X41P(J))       
      QIN(38,I)=0.00540/0.02986*(A*ENP+B)*1.D-18
      GO TO 1422
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1421 QIN(38,I)=0.00540/(EIN(38)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(38)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(38)+E(3))
 1422 IF(EN <= (2.0*EIN(38))) GO TO 1430 
      PEQIN(38,I)=PEQEL(2,(I-IOFFN(38)))
#
# SUM 3S LEVELS FROM 8 3S HIGHER AND SCALED FROM 4 3S
 1430 IF(EN <= EIN(39)) GO TO 2000
      ER=EIN(39)/EIN(11)
      ENP=EN/ER
      IF(ENP > X43S(N43S):
) GO TO 1451
      DO 1440 J=2,N43S
      IF(ENP <= X43S(J):
) GO TO 1450
 1440 CONTINUE
      J=N43S
 1450 A=(Y43S(J)-Y43S(J-1))/(X43S(J)-X43S(J-1))                         
      B=(X43S(J-1)*Y43S(J)-X43S(J)*Y43S(J-1))/(X43S(J-1)-X43S(J))       
      QIN(39,I)=0.553*(A*ENP+B)*1.D-18
      GO TO 1452
# IF ENERGY GT X43S(N43S) EV SCALE BY 1/E**3
 1451 QIN(39,I)=0.553*Y43S(N43S)*(X43S(N43S)/ENP)**3*1.D-18
 1452 IF(EN <= (2.0*EIN(39))) GO TO 1460
      PEQIN(39,I)=PEQEL(2,(I-IOFFN(39)))
#
# SUM 1S LEVELS FROM 8 1S HIGHER AND SCALED FROM 4 1S
 1460 IF(EN <= EIN(40)) GO TO 2000
      ER=EIN(40)/EIN(12)
      ENP=EN/ER
      IF(ENP > X41S(N41S):
) GO TO 1481
      DO 1470 J=2,N41S
      IF(ENP <= X41S(J):
) GO TO 1480
 1470 CONTINUE
      J=N41S
 1480 A=(Y41S(J)-Y41S(J-1))/(X41S(J)-X41S(J-1))                         
      B=(X41S(J-1)*Y41S(J)-X41S(J)*Y41S(J-1))/(X41S(J-1)-X41S(J))       
      QIN(40,I)=0.553*(A*ENP+B)*1.D-18
      GO TO 1482
# IF ENERGY GT X41S(N41S) EV SCALE BY 1/E     
 1481 QIN(40,I)=0.553*Y41S(N41S)*(X41S(N41S)/ENP)*1.D-18
 1482 IF(EN <= (2.0*EIN(40))) GO TO 1490
      PEQIN(40,I)=PEQEL(2,(I-IOFFN(40)))
#
# SUM 3P LEVELS FROM  8 3P HIGHER AND SCALED FROM 4 3P
 1490 IF(EN <= EIN(41)) GO TO 2000
      ER=EIN(41)/EIN(13)
      ENP=EN/ER
      IF(ENP > X43P(N43P):
) GO TO 1511
      DO 1500 J=2,N43P
      IF(ENP <= X43P(J):
) GO TO 1510
 1500 CONTINUE
      J=N43P
 1510 A=(Y43P(J)-Y43P(J-1))/(X43P(J)-X43P(J-1))                         
      B=(X43P(J-1)*Y43P(J)-X43P(J)*Y43P(J-1))/(X43P(J-1)-X43P(J))       
      QIN(41,I)=0.553*(A*ENP+B)*1.D-18
      GO TO 1512
# IF ENERGY GT X43P(N43P) EV SCALE BY 1/E**3  
 1511 QIN(41,I)=0.553*Y43P(N43P)*(X43P(N43P)/ENP)**3*1.D-18
 1512 IF(EN <= (2.0*EIN(41))) GO TO 1520
      PEQIN(41,I)=PEQEL(2,(I-IOFFN(41)))
#
# SUM 3D LEVELS FROM 8 3D HIGHER AND SCALED FROM 4 3D
 1520 IF(EN <= EIN(42)) GO TO 2000
      ER=EIN(42)/EIN(14)
      ENP=EN/ER
      IF(ENP > X43D[N43D]):
 GO TO 1541
      DO 1530 J=2,N43D
      IF(ENP <= X43D[J]):
 GO TO 1540
 1530 CONTINUE
      J=N43P
 1540 A=(Y43D[J]-Y43D[J-1])/(X43D[J]-X43D[J-1])                         
      B=(X43D[J-1]*Y43D[J]-X43D[J]*Y43D[J-1])/(X43D[J-1]-X43D[J])       
      QIN(42,I)=0.553*(A*ENP+B)*1.D-18
      GO TO 1542
# IF ENERGY GT X43D[N43D] EV SCALE BY 1/E**3  
 1541 QIN(42,I)=0.553*Y43D[N43D]*(X43D[N43D]/ENP)**3*1.D-18
 1542 IF(EN <= (2.0*EIN(42))) GO TO 1550
      PEQIN(42,I)=PEQEL(2,(I-IOFFN(42)))
#
# SUM 1D LEVELS FROM 8 1D HIGHER AND SCALED FROM 4 1D
 1550 IF(EN <= EIN(43)) GO TO 2000
      ER=EIN(43)/EIN(15)
      ENP=EN/ER
      IF(ENP > X41D[N41D]):
 GO TO 1571
      DO 1560 J=2,N41D
      IF(ENP <= X41D[J]):
 GO TO 1570
 1560 CONTINUE
      J=N41D
 1570 A=(Y41D[J]-Y41D[J-1])/(X41D[J]-X41D[J-1])                         
      B=(X41D[J-1]*Y41D[J]-X41D[J]*Y41D[J-1])/(X41D[J-1]-X41D[J])       
      QIN(43,I)=0.553*(A*ENP+B)*1.D-18
      GO TO 1572
# IF ENERGY GT X41D[N41D] EV SCALE BY 1/E     
 1571 QIN(43,I)=0.553*Y41D[N41D]*(X41D[N41D]/ENP)*1.D-18
 1572 IF(EN <= (2.0*EIN(43))) GO TO 1580
      PEQIN(43,I)=PEQEL(2,(I-IOFFN(43)))
#
# 8 1P SCALED FROM 4 1P   OSC STRENGTH  F=0.00362 
 1580 IF(EN <= EIN(44)) GO TO 2000
      ER=EIN(44)/EIN(18)
      ENP=EN/ER
      IF(ENP > X41P(N41P):
) GO TO 1601
      DO 1590 J=2,N41P
      IF(ENP <= X41P(J):
) GO TO 1600
 1590 CONTINUE
      J=N41P
 1600 A=(Y41P(J)-Y41P(J-1))/(X41P(J)-X41P(J-1))                         
      B=(X41P(J-1)*Y41P(J)-X41P(J)*Y41P(J-1))/(X41P(J-1)-X41P(J))       
      QIN(44,I)=0.00362/0.02986*(A*ENP+B)*1.D-18
      GO TO 1602
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1601 QIN(44,I)=0.00362/(EIN(44)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(44)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(44)+E(3))
 1602 IF(EN <= (2.0*EIN(44))) GO TO 1610 
      PEQIN(44,I)=PEQEL(2,(I-IOFFN(44)))
#
# 9 1P SCALED FROM 4 1P   OSC STRENGTH  F=0.00253 
 1610 IF(EN <= EIN(45)) GO TO 2000
      ER=EIN(45)/EIN(18)
      ENP=EN/ER
      IF(ENP > X41P(N41P):
) GO TO 1631
      DO 1620 J=2,N41P
      IF(ENP <= X41P(J):
) GO TO 1630
 1620 CONTINUE
      J=N41P
 1630 A=(Y41P(J)-Y41P(J-1))/(X41P(J)-X41P(J-1))                         
      B=(X41P(J-1)*Y41P(J)-X41P(J)*Y41P(J-1))/(X41P(J-1)-X41P(J))       
      QIN(45,I)=0.00253/0.02986*(A*ENP+B)*1.D-18
      GO TO 1632
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1631 QIN(45,I)=0.00253/(EIN(45)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(45)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(45)+E(3))
 1632 IF(EN <= (2.0*EIN(45))) GO TO 1640 
      PEQIN(45,I)=PEQEL(2,(I-IOFFN(45)))
#
# 10 1P SCALED FROM 4 1P    OSC STRENGTH F=0.00184
 1640 IF(EN <= EIN(46)) GO TO 2000
      ER=EIN(46)/EIN(18)
      ENP=EN/ER
      IF(ENP > X41P(N41P):
) GO TO 1661
      DO 1650 J=2,N41P
      IF(ENP <= X41P(J):
) GO TO 1660
 1650 CONTINUE
      J=N41P
 1660 A=(Y41P(J)-Y41P(J-1))/(X41P(J)-X41P(J-1))                         
      B=(X41P(J-1)*Y41P(J)-X41P(J)*Y41P(J-1))/(X41P(J-1)-X41P(J))       
      QIN(46,I)=0.00184/0.02986*(A*ENP+B)*1.D-18
      GO TO 1662
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1661 QIN(46,I)=0.00184/(EIN(46)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(46)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(46)+E(3))
 1662 IF(EN <= (2.0*EIN(46))) GO TO 1670 
      PEQIN(46,I)=PEQEL(2,(I-IOFFN(46)))
#
# 11 1P SCALED FROM 4 1P   OSC STRENGTH F=0.00138
 1670 IF(EN <= EIN(47)) GO TO 2000
      ER=EIN(47)/EIN(18)
      ENP=EN/ER
      IF(ENP > X41P(N41P):
) GO TO 1691
      DO 1680 J=2,N41P
      IF(ENP <= X41P(J):
) GO TO 1690
 1680 CONTINUE
      J=N41P
 1690 A=(Y41P(J)-Y41P(J-1))/(X41P(J)-X41P(J-1))                         
      B=(X41P(J-1)*Y41P(J)-X41P(J)*Y41P(J-1))/(X41P(J-1)-X41P(J))       
      QIN(47,I)=0.00138/0.02986*(A*ENP+B)*1.D-18
      GO TO 1692
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1691 QIN(47,I)=0.00138/(EIN(47)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(47)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(47)+E(3))
 1692 IF(EN <= (2.0*EIN(47))) GO TO 1700 
      PEQIN(47,I)=PEQEL(2,(I-IOFFN(47)))
#
# 12 1P SCALED FROM 4 1P   OSC STRENGTH F=0.00106
 1700 IF(EN <= EIN(48)) GO TO 2000
      ER=EIN(48)/EIN(18)
      ENP=EN/ER
      IF(ENP > X41P(N41P):
) GO TO 1721
      DO 1710 J=2,N41P
      IF(ENP <= X41P(J):
) GO TO 1720
 1710 CONTINUE
      J=N41P
 1720 A=(Y41P(J)-Y41P(J-1))/(X41P(J)-X41P(J-1))                         
      B=(X41P(J-1)*Y41P(J)-X41P(J)*Y41P(J-1))/(X41P(J-1)-X41P(J))       
      QIN(48,I)=0.00106/0.02986*(A*ENP+B)*1.D-18
      GO TO 1722
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1721 QIN(48,I)=0.00106/(EIN(48)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(48)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(48)+E(3))
 1722 IF(EN <= (2.0*EIN(48))) GO TO 1730 
      PEQIN(48,I)=PEQEL(2,(I-IOFFN(48)))
#
# SUM HIGHER 1P LEVELS     OSC STRENGTH F=0.00440
 1730 IF(EN <= EIN(49)) GO TO 2000
      ER=EIN(49)/EIN(18)
      ENP=EN/ER
      IF(ENP > X41P(N41P):
) GO TO 1751
      DO 1740 J=2,N41P
      IF(ENP <= X41P(J):
) GO TO 1750
 1740 CONTINUE
      J=N41P
 1750 A=(Y41P(J)-Y41P(J-1))/(X41P(J)-X41P(J-1))                         
      B=(X41P(J-1)*Y41P(J)-X41P(J)*Y41P(J-1))/(X41P(J-1)-X41P(J))       
      QIN(49,I)=0.00440/0.02986*(A*ENP+B)*1.D-18
      GO TO 1752
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1751 QIN(49,I)=0.00440/(EIN(49)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(49)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(49)+E(3))
 1752 IF(EN <= (2.0*EIN(49))) GO TO 1760 
      PEQIN(49,I)=PEQEL(2,(I-IOFFN(49)))
 1760 CONTINUE
# LOAD BREMSSTRAHLUNG X-SECTION
#      IF(EN <= 1000.) GO TO 2000
#      DO 1780 J=2,NBREM
#      IF(EN <= EBRM(J)) GO TO 1790
# 1780 CONTINUE
#      J=NBREM
# 1790 A=(math.log(Z2T(J))-math.log(Z2T(J-1)))/(EBRM(J)-EBRM(J-1))
#      B=(math.log(Z2T(J))*EBRM(J-1)-math.log(Z2T(J-1))*EBRM(J))/
#     /(EBRM(J-1)-EBRM(J))  
#      QIN(50,I)=math.exp(A*EN+B)*1.D-24
#
 2000 CONTINUE                                                          
#     
      QMET=QIN(1,I)+QIN(2,I)
      QDIP=QIN(4,I)+QIN(10,I)+QIN(18,I)+QIN(26,I)+QIN(32,I)+QIN(38,I)+
     /QIN(44,I)+QIN(45,I)+QIN(46,I)+QIN(47,I)+QIN(48,I)+QIN(49,I)
      QTRP=QIN(1,I)+QIN(3,I)+QIN(5,I)+QIN(7,I)+QIN(8,I)+QIN(11,I)+
     /QIN(13,I)+QIN(14,I)+QIN(16,I)+QIN(19,I)+QIN(21,I)+QIN(22,I)+
     /QIN(24,I)+QIN(27,I)+QIN(29,I)+QIN(30,I)+QIN(33,I)+QIN(35,I)+
     /QIN(36,I)+QIN(39,I)+QIN(41,I)+QIN(42,I) 
      QSNG=QIN(2,I)+QIN(4,I)+QIN(6,I)+QIN(9,I)+QIN(10,I)+QIN(12,I)+
     /QIN(15,I)+QIN(17,I)+QIN(18,I)+QIN(20,I)+QIN(23,I)+QIN(25,I)+
     /QIN(26,I)+QIN(28,I)+QIN(31,I)+QIN(32,I)+QIN(34,I)+QIN(37,I)+
     /QIN(38,I)+QIN(40,I)+QIN(43,I)+QIN(44,I)+QIN(45,I)+QIN(46,I)+
     /QIN(47,I)+QIN(48,I)+QIN(49,I)
      QINEL=QSNG+QTRP+QION(1,I)+QION(2,I)
      Q(1,I)=QELA+QINEL                           
#     Q(1,I)=QELA+QINEL+QIN(50,I)                            
# EXAMINE X-SECTION DATA 
#     WRITE(6,986) EN,QIN(4,I),QIN(10,I),QIN(18,I),QIN(26,I),QIN(32,I),
#    /QIN(38,I),QIN(44,I),QIN(45,I),QIN(46,I),QIN(47,I),QIN(48,I),
#    /QIN(49,I) 
# 986 FORMAT(' EN=',D11.5,' 21P=',D11.3,' 31P=',D11.3,' 41P=',D11.3,' 51
#    /P=',D11.3,' 61P=',D11.3,' 71P=',D11.3,/,8X,' 81P=',D11.3,' 91P=',D
#    /11.3,' 101P=',D11.3,' 111P=',D11.3,' 121P=',D11.3,' HIP=',D11.3)
#     WRITE(6,987) EN,QMET,QDIP,QSNG,QTRP,QINEL,Q(1,I)
# 987 FORMAT(' EN=',D12.5,' QMET=',D11.3,' QDIP=',D11.3,' QSNG=',D11.3,
#    /'QTRP=',D11.3,' QINL=',D11.4,' QTOT=',D11.4) 
 9000 CONTINUE                                                          
#  SAVE COMPUTE TIME                                                    
      DO 9001 K=1,NIN
      IF(EFINAL <= EIN(K):
) :                                        
       NIN=K-1
       GO TO 9011
      # endIF
 9001 CONTINUE
 9011 CONTINUE  
#      IF(EFINAL > 1000.) NIN=50                                        
      RETURN                                                            
      # end
      def GAS5(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
c    /QNULL,NNULL,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,
#    /SCRPT)
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(4000),EROOT(4000),QT1(4000),QT2(4000),
     /QT3(4000),QT4(4000)
      COMMON/DENS/DEN(4000)
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6) 
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)     
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30)
     /,EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]  
      DIMENSION XEN(125),YXSEC(125),XEL(120),YEL(120),
     /XEPS(196),YEPS(196),XION(74),YION(74),YINC(74),YIN1(74),
     /XIN2(49),YIN2(49),XIN3(41),YIN3(41),XKSH(99),YKSH(99),
     /X1S5(111),Y1S5(111),X1S4(137),Y1S4(137),X1S3(117),Y1S3(117),
     /X1S2(119),Y1S2(119),X2P10(73),Y2P10(73),X2P9(70),Y2P9(70),
     /X2P8(72),Y2P8(72),X2P7(65),Y2P7(65),X2P6(59),Y2P6(59),
     /X2P5(63),Y2P5(63),X2P4(66),Y2P4(66),X2P3(62),Y2P3(62),
     /X2P2(62),Y2P2(62),X2P1(59),Y2P1(59),X2S5(19),Y2S5(19),
     /X2S3(19),Y2S3(19),X3D6(12),Y3D6(12),X3D4P(12),Y3D4P(12),
     /X3D4(12),Y3D4(12),X3D3(12),Y3D3(12),X3D1PP(12),Y3D1PP(12),
     /X3D1P(12),Y3D1P(12),X3S1PPPP(12),Y3S1PPPP(12),
     /X3S1PPP(12),Y3S1PPP(12),X3S1PP(12),Y3S1PP(12),
     /X3P106(16),Y3P106(16),X3P52(16),Y3P52(16),X3P1(16),Y3P1(16),
     /IOFFN(45),IOFFION(10)
      DIMENSION Z10T(25),EBRM(25)
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME  
# ELASTIC MOMENTUM TRANSFER                          
      DATA XEN/1.00,1.20,1.50,1.80,2.00,2.50,3.00,4.00,5.00,6.00,       
     /7.00,8.00,8.71,9.00,10.0,11.0,13.6,15.0,16.5,19.6,                
     /20.0,30.0,40.0,50.0,60.0,70.0,77.0,100.,130.,150.,                
     /170.,200.,250.,300.,350.,400.,500.,600.,700.,800.,
     /900.,1000.,1500.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,
     /7000.,8000.,9000.,1.0D4,1.5D4,2.0D4,2.5D4,3.0D4,4.0D4,5.0D4,  
     /6.0D4,7.0D4,8.0D4,9.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5D5,
     /3.0D5,3.5D5,4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,
     /1.25D6,1.5D6,1.75D6,2.0D6,2.5D6,3.0D6,3.5D6,4.0D6,4.5D6,5.0D6,
     /6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5D7,
     /3.0D7,3.5D7,4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,1.0D8,
     /1.25D8,1.5D8,1.75D8,2.0D8,2.5D8,3.0D8,3.5D8,4.0D8,4.5D8,5.0D8,
     /6.0D8,7.0D8,8.0D8,9.0D8,1.0D9/
      DATA YXSEC/1.6178,1.69,1.75,1.79,1.82,1.86,1.91,1.98,2.07,2.14,   
     /2.21,2.29,2.35,2.37,2.44,2.51,2.66,2.71,2.76,2.83,                
     /2.84,2.84,2.78,2.58,2.30,2.12,2.03,1.53,1.21,1.03,                
     /0.90,.756,.585,.474,.385,.321,.234,.180,.143,.117,
     /.0977,.0830,.0435,.0271,.0187,.0137,.0105,.00833,.00565,.00410, 
     /.00312,.00246,.0020,.00166,.0008,.000478,.00032,.000231,.000138,
     /9.28D-5,  
     /6.72D-5,5.12D-5,4.05D-5,3.30D-5,2.75D-5,1.88D-5,1.38D-5,1.06D-5,
     /8.54D-6,5.9D-6,
     /4.43D-6,3.46D-6,2.81D-6,2.34D-6,1.99D-6,1.50D-6,1.19D-6,9.71D-7,
     /8.12D-7,6.91D-7,
     /4.95D-7,3.74D-7,2.94D-7,2.38D-7,1.67D-7,1.24D-7,9.66D-8,7.74D-8,
     /6.35D-8,5.31D-8,
     /3.89D-8,2.98D-8,2.36D-8,1.92D-8,1.59D-8,1.07D-8,7.71D-9,5.83D-9,
     /4.57D-9,3.03D-9,
     /2.16D-9,1.62D-9,1.26D-9,1.01D-9,8.29D-10,5.86D-10,4.36D-10,
     /3.36D-10,2.67D-10,2.18D-10,
     /1.40D-10,9.78D-11,7.20D-11,5.52D-11,3.54D-11,2.46D-11,1.81D-11,
     /1.38D-11,1.09D-11,8.86D-12,
     /6.15D-12,4.52D-12,3.46D-12,2.73D-12,2.21D-12/
# ELASTIC TOTAL
      DATA XEL/1.00,1.20,1.50,1.80,2.00,2.50,3.00,4.00,5.00,6.00,       
     /8.00,10.0,12.0,14.0,16.0,18.0,20.0,25.0,30.0,40.0,
     /50.0,60.0,70.0,80.0,90.0,100.,125.,150.,200.,250.,                
     /300.,350.,400.,500.,600.,700.,800.,900.,1000.,1200.,              
     /1500.,2000.,2500.,3000.,4000.,5000.,6000.,7000.,8000.,9000.,
     /1.0D4,1.5D4,2.0D4,2.5D4,3.0D4,4.0D4,5.0D4,6.0D4,7.0D4,8.0D4,
     /9.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5D5,3.0D5,3.5D5,4.0D5,
     /4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,
     /2.0D6,2.5D6,3.0D6,3.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,
     /9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5D7,3.0D7,3.5D7,4.0D7,
     /5.0D7,6.0D7,8.0D7,9.0D7,1.0D8,1.25D8,1.5D8,1.75D8,2.0D8,2.5D8,
     /3.0D8,3.5D8,4.0D8,4.5D8,5.0D8,6.0D8,7.0D8,8.0D8,9.0D8,1.0D9/
      DATA YEL/1.5667,1.68,1.82,1.94,2.01,2.16,2.30,2.55,2.80,2.98,
     /3.23,3.39,3.54,3.63,3.67,3.68,3.69,3.61,3.50,3.27,
     /3.09,2.90,2.72,2.54,2.40,2.25,1.96,1.74,1.39,1.21,
     /1.06,.997,.893,.799,.693,.640,.565,.545,.483,.433,
     /.359,.284,.223,.191,.156,.125,.109,.096,.0850,.0770,
     /.0710,.0500,.0389,.0317,.0269,.0208,.0172,.0147,.0129,.0116,
     /.0106,.00977,.00829,.00731,.00661,.00608,.00536,.00488,.00455,
     /.00430,
     /.00411,.00396,.00374,.00358,.00347,.00339,.00333,.00322,.00315,
     /.00310,
     /.00307,.00303,.00301,.00299,.00298,.00298,.00297,.00296,.00296,
     /.00296,
     /.00295,.00295,28*.002945/
# ANGULAR DISTRIBUTION PARAMETER EPSILON
      DATA XEPS/0.0,.0001,.0002,.0003,.0004,.0005,.0006,.0008,.001,
     /.0012,
     /.0014,.0016,.0018,.0020,.0024,.0028,.0032,.0036,.0040,.0045,
     /.0050,.0055,.0060,.0070,.0080,.0090,.0100,.0120,.0140,.0160,
     /.0180,.0200,.0240,.0280,.0320,.0360,.0400,.0450,.0500,.0550,
     /0.060,0.070,0.080,0.090,0.100,0.120,0.140,0.160,0.180,0.200,
     /0.24,0.28,0.32,0.36,0.40,0.45,0.50,0.55,0.60,0.70,
     /0.80,0.90,1.00,1.20,1.50,1.80,2.00,2.50,3.00,4.00,
     /5.00,6.00,7.00,8.00,8.71,9.00,10.0,11.0,12.0,13.6,
     /14.0,15.0,16.0,16.5,18.0,19.6,20.0,25.0,30.0,40.0,
     /50.0,60.0,70.0,77.0,80.0,90.0,100.,125.,130.,150.,
     /170.,200.,250.,300.,350.,400.,500.,600.,700.,800.,
     /900.,1000.,1200.,1500.,2000.,2500.,3000.,3500.,4000.,5000.,
     /6000.,7000.,8000.,9000.,1.0D4,1.5D4,2.0D4,2.5D4,3.0D4,4.0D4,
     /5.0D4,6.0D4,7.0D4,8.0D4,9.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,
     /2.5D5,3.0D5,3.5D5,4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,
     /1.0D6,1.25D6,1.5D6,1.75D6,2.0D6,2.5D6,3.0D6,3.5D6,4.0D6,4.5D6,
     /5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,
     /2.5D7,3.0D7,3.5D7,4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,
     /1.0D8,1.25D8,1.5D8,1.75D8,2.0D8,2.5D8,3.0D8,3.5D8,4.0D8,4.5D8,
     /5.0D8,6.0D8,7.0D8,8.0D8,9.0D8,1.0D9/
# ELASTIC ANGULAR DISTRIBUTION PARAMETER EPSILON
# EPSILON =1.0-YEPS
      DATA YEPS/1.0,1.02100,1.02805,1.03494,1.03914,1.04259,1.04678,
     /1.05337,1.05831,1.06325,
     /1.06804,1.07208,1.07522,1.07761,1.08388,1.09015,1.09478,1.09866,
     /1.10254,1.10730,
     /1.11177,1.11579,1.11891,1.12531,1.13154,1.13659,1.14163,1.14918,
     /1.15613,1.16248,
     /1.16779,1.17310,1.18075,1.18722,1.19324,1.19778,1.20202,1.20656,
     /1.21006,1.21313,
     /1.21604,1.22041,1.22362,1.22580,1.22725,1.22929,1.22929,1.22856,
     /1.22711,1.22478,
     /1.21852,1.21196,1.20422,1.19734,1.18766,1.17649,1.16544,1.15332,
     /1.14133,1.11787,
     /1.09463,1.07058,1.04888,1.00900,0.94235,0.88434,0.85878,0.79346,
     /0.74891,0.67211,
     /.62059,.59185,.58330,.57958,.58757,.58901,.59407,.60031,.60172,
     /.61669,
     /.61697,.62494,.63173,.63741,.64807,.65936,.66256,.68649,.72161,
     /.77748,
     /.75543,.69554,.67623,.68068,.66811,.60509,.54128,.49618,.47938,
     /.43104,
     /.39642,.37516,.30964,.27292,.21586,.19276,.14022,.11680,.09323,
     /.08333,
     /.06753,.06353,.05492,.03879,.02796,.02349,.01908,.01656,.01297,
     /.01046,
     /.00828,.00689,.00595,.00520,.00457,.00287,.00209,.001374,.001360,
     /.000953,
     /7.88D-4,6.50D-4,5.51D-4,4.75D-4,4.16D-4,3.71D-4,2.89D-4,2.34D-4,
     /1.96D-4,1.67D-4,
     /1.278D-4,1.020D-4,8.40D-5,7.07D-5,6.06D-5,5.27D-5,4.11D-5,3.33D-5,
     /2.74D-5,2.31D-5,
     /1.975D-5,1.418D-5,1.065D-5,8.32D-6,6.69D-6,4.60D-6,3.36D-6,
     /2.57D-6,2.03D-6,1.64D-6,
     /1.355D-6,9.70D-7,7.29D-7,5.68D-7,4.55D-7,3.73D-7,2.43D-7,1.71D-7,
     /1.27D-7,9.80D-8,
     /6.33D-8,4.42D-8,3.26D-8,2.49D-8,1.97D-8,1.60D-8,1.10D-8,8.10D-9,
     /6.14D-9,4.82D-9,
     /3.88D-9,2.44D-9,1.67D-9,1.21D-9,9.1D-10,5.7D-10,3.9D-10,2.8D-10,
     /2.1D-10,1.7D-10,
     /1.3D-10,9.1D-11,6.6D-11,5.0D-11,3.9D-11,3.1D-11/
# IONISATION (VALUES ABOVE 20KEV GENERATED BY BORN-BETHE IN SUB)  
      DATA XION/21.56454,22.0,22.5,23.0,23.5,24.0,24.5,25.0,25.5,26.0, 
     /26.5,27.0,27.5,28.0,29.0,30.0,32.0,34.0,36.0,40.0,
     /45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,90.0,100.,
     /110.,120.,130.,140.,150.,160.,170.,180.,190.,200.,
     /225.,250.,275.,300.,350.,400.,500.,600.,700.,800.,
     /900.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,
     /4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,10000.,12000.,
     /14000.,16000.,18000.,20000./               
# GROSS IONISATION
      DATA YION/0.00,.0031,.0085,.0139,.0192,.0248,.0306,.0362,.0417,
     /.0474,  
     /.0540,.0602,.0664,.0726,.0847,.0971,.122,.147,.170,.217,
     /.269,.322,.372,.414,.454,.490,.521,.549,.598,.635,
     /.667,.690,.707,.721,.735,.746,.747,.748,.746,.745,
     /.737,.723,.703,.682,.648,.607,.549,.501,.457,.420,
     /.387,.363,.320,.287,.261,.239,.222,.186,.163,.143,
     /.130,.117,.108,.100,.0937,.0826,.0742,.0678,.0623,.0540, 
     /.0475,.0426,.0389,.0357/            
# COUNTING IONISATION
      DATA YINC/0.00,.0031,.0085,.0139,.0192,.0248,.0306,.0362,.0417,
     /.0474,  
     /.0540,.0602,.0664,.0726,.0847,.0971,.122,.147,.170,.217,
     /.269,.322,.372,.414,.454,.490,.521,.548,.595,.630,
     /.657,.678,.692,.703,.714,.721,.721,.720,.717,.715,
     /.705,.690,.670,.650,.616,.577,.522,.476,.435,.400,
     /.369,.345,.305,.273,.248,.228,.211,.177,.155,.136,
     /.124,.111,.103,.0951,.0891,.0786,.0706,.0645,.0592,.0513, 
     /.0451,.0406,.0370,.0340/   
# IONISATION FOR CHARGE STATE =1
      DATA YIN1/0.00,.0031,.0085,.0139,.0192,.0248,.0306,.0362,.0417,
     /.0474,  
     /.0540,.0602,.0664,.0726,.0847,.0971,.122,.147,.170,.217,
     /.269,.322,.372,.414,.454,.490,.521,.547,.592,.624,
     /.648,.666,.677,.684,.693,.698,.696,.693,.689,.685,
     /.673,.658,.637,.619,.586,.548,.496,.454,.416,.383,
     /.354,.331,.293,.262,.238,.219,.202,.170,.149,.130,
     /.119,.106,.0988,.0912,.0855,.0754,.0677,.0619,.0568,.0492, 
     /.0433,.0390,.0355,.0326/   
# IONISATION FOR CHARGE STATE =2
      DATA XIN2/62.5275,75.0,80.0,90.0,100.,110.,120.,130.,140.,150.,
     /160.,170.,180.,190.,200.,225.,250.,275.,300.,350.,
     /400.,500.,600.,700.,800.,900.,1000.,1200.,1400.,1600.,
     /1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,
     /7000.,8000.,9000.,10000.,12000.,14000.,16000.,18000.,20000./      
      DATA YIN2/0.0,.0005,.00127,.00319,.00586,.0094,.0121,.0155,.0187,
     /.0214,
     /.0240,.0254,.0272,.0280,.0294,.0316,.0315,.0315,.0301,.0291,
     /.0269,.0243,.0212,.0185,.0164,.0148,.0134,.0118,.0106,.00962,
     /.00885,.00819,.00687,.00601,.00528,.00481,.00431,.0040,.00369,
     /.00346,
     /.00305,.00274,.0025,.0023,.0020,.00175,.00158,.00144,.00132/   
# IONISATION FOR CHARGE STATE =3
      DATA XIN3/125.9508,150.,160.,170.,180.,190.,200.,225.,250.,275.,
     /300.,350.,400.,500.,600.,700.,800.,900.,1000.,1200.,
     /1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,
     /5500.,6000.,7000.,8000.,9000.,10000.,12000.,14000.,16000.,18000.,
     /20000./               
      DATA YIN3/0.00,.00005,.000118,.000173,.000263,.000377,.000476,
     /.00072,.00104,.00126,
     /.00138,.00156,.00158,.00143,.00132,.00121,.00103,.000852,.000741,
     /.000656,
     /.000587,.000533,.000490,.000454,.000381,.000333,.000292,.000267,
     /.000239,.000221,
     /.000204,.000192,.000169,.000146,.000139,.000127,.000110,.0000970,
     /.0000873,.0000796,.0000731/   
# K-SHELL IONISATION X-SECTION
      DATA XKSH/870.2,874.7,900.,926.,953.,981.,1009.,1038.,1068.,1099.,
     /1131.,1164.,1232.,1305.,1381.,1463.,1594.,1737.,1948.,2122.,
     /2313.,2521.,2747.,2994.,3264.,3557.,3877.,4226.,4606.,5021.,
     /5473.,5966.,6503.,7088.,7727.,8423.,9182.,1.0D4,1.12D4,1.26D4,
     /1.41D4,1.59D4,1.78D4,2.00D4,2.24D4,2.51D4,2.82D4,3.16D4,3.55D4,
     /3.98D4,
     /4.47D4,5.01D4,5.62D4,6.31D4,7.08D4,7.94D4,8.91D4,1.00D5,1.12D5,
     /1.30D5,
     /1.50D5,1.73D5,2.00D5,2.30D5,2.66D5,3.07D5,3.55D5,4.22D5,5.01D5,
     /6.13D5,
     /7.50D5,1.00D6,1.22D6,1.45D6,1.73D6,2.00D6,2.51D6,3.07D6,4.00D6,
     /5.01D6,
     /6.13D6,8.18D6,1.00D7,1.50D7,2.05D7,3.07D7,3.98D7,5.01D7,6.13D7,
     /8.18D7,
     /1.00D8,1.50D8,2.05D8,3.07D8,3.98D8,5.01D8,6.13D8,8.18D8,1.00D9/
      DATA YKSH/0.0,7.15D-6,2.96D-5,5.13D-5,7.23D-5,9.26D-5,1.12D-4,
     /1.31D-4,1.49D-4,1.67D-4,
     /1.84D-4,2.00D-4,2.31D-4,2.59D-4,2.84D-4,3.08D-4,3.39D-4,3.65D-4,
     /3.94D-4,4.10D-4,
     /4.22D-4,4.31D-4,4.36D-4,4.38D-4,4.37D-4,4.34D-4,4.28D-4,4.20D-4,
     /4.11D-4,4.00D-4,
     /3.88D-4,3.75D-4,3.61D-4,3.47D-4,3.33D-4,3.18D-4,3.04D-4,2.90D-4,
     /2.71D-4,2.53D-4,
     /2.36D-4,2.19D-4,2.04D-4,1.89D-4,1.75D-4,1.62D-4,1.50D-4,1.38D-4,
     /1.28D-4,1.18D-4,
     /1.09D-4,1.01D-4,9.32D-5,8.63D-5,8.00D-5,7.43D-5,6.90D-5,6.43D-5,
     /6.00D-5,5.51D-5,
     /5.09D-5,4.73D-5,4.41D-5,4.13D-5,3.89D-5,3.69D-5,3.52D-5,3.36D-5,
     /3.23D-5,3.12D-5,
     /3.05D-5,3.01D-5,3.01D-5,3.04D-5,3.07D-5,3.11D-5,3.19D-5,3.27D-5,
     /3.39D-5,3.50D-5,
     /3.60D-5,3.76D-5,3.87D-5,4.11D-5,4.30D-5,4.54D-5,4.69D-5,4.83D-5,
     /4.96D-5,5.13D-5,
     /5.25D-5,5.50D-5,5.69D-5,5.94D-5,6.10D-5,6.24D-5,6.36D-5,6.54D-5,
     /6.66D-5/
#            
# 1S5 METASTABLE J=2  UNITS 10**-18 SCALED BY 1/E**3 ABOVE 50 EV
      DATA X1S5/16.61907,16.625,16.63,16.64,16.65,16.66,16.67,16.68,
     /16.69,16.70,
     /16.71,16.73,16.75,16.79,16.80,16.81,16.82,16.84,16.85,16.86,
     /16.87,16.88,16.89,16.90,16.91,16.92,16.93,16.94,16.95,16.96,
     /16.97,16.98,16.99,17.00,17.02,17.04,17.06,17.08,17.10,17.20,
     /17.30,17.40,17.50,17.60,17.70,17.80,17.90,18.00,18.10,18.20,
     /18.30,18.40,18.41,18.43,18.45,18.47,18.50,18.53,18.55,18.56,
     /18.57,18.58,18.59,18.60,18.61,18.62,18.625,18.63,18.64,18.65,
     /18.66,18.67,18.68,18.69,18.70,18.71,18.72,18.73,18.75,18.78,
     /18.80,18.90,18.96,18.97,18.98,18.99,19.00,19.05,19.10,19.20,
     /19.50,19.58,19.60,19.61,19.63,19.65,19.70,19.80,19.90,20.00,
     /21.0,22.0,23.0,24.0,26.0,28.0,30.0,35.0,40.0,45.0,
     /50.0/
      DATA Y1S5/0.0,.114,.142,.190,.228,.256,.275,.304,.342,.399,
     /.446,.532,.598,.646,.665,.674,.693,.750,.788,.845,
     /.902,1.09,1.27,1.47,1.59,1.65,1.65,1.59,1.52,1.44,
     /1.35,1.28,1.20,1.16,1.03,.988,.931,.893,.864,.807,
     /.807,.826,.864,.912,.978,1.03,1.11,1.19,1.26,1.34,
     /1.40,1.42,1.30,1.21,1.15,1.12,1.07,1.02,1.24,1.55,
     /2.13,2.02,1.64,1.23,1.12,1.56,1.70,1.55,1.10,1.28,
     /1.58,1.72,1.65,1.42,1.25,1.10,.988,.959,.883,.827,
     /.817,.836,.779,.931,1.21,1.14,1.02,1.01,1.04,1.08,
     /1.15,1.07,1.01,1.33,1.27,1.23,1.21,1.17,1.14,1.03,
     /1.04,1.04,1.03,1.02,.998,.959,.902,.760,.608,.475,
     /.361/
# 1S4 RESONANCE LEVEL J=1 F=0.0118  UNITS 10**-18  74.3724 NM.
      DATA X1S4/16.67083,16.675,16.68,16.69,16.70,16.71,16.72,16.73,
     /16.74,16.75,
     /16.76,16.77,16.78,16.79,16.80,16.81,16.82,16.83,16.84,16.85,
     /16.86,16.87,16.88,16.89,16.90,16.91,16.92,16.93,16.94,16.95,
     /16.96,16.97,16.98,16.99,17.00,17.02,17.04,17.06,17.08,17.10,
     /17.20,17.30,17.40,17.50,17.60,17.70,17.80,17.90,18.00,18.10,
     /18.20,18.30,18.40,18.41,18.42,18.43,18.44,18.45,18.47,18.50,
     /18.52,18.525,18.53,18.54,18.55,18.56,18.57,18.58,18.59,18.60,
     /18.61,18.62,18.63,18.64,18.65,18.66,18.67,18.68,18.69,18.70,
     /18.71,18.72,18.73,18.74,18.75,18.76,18.78,18.80,18.90,18.94,
     /18.96,18.98,18.99,19.00,19.05,19.10,19.20,19.30,19.40,19.50,
     /19.7,19.9,20.0,21.0,22.0,23.0,24.0,25.0,26.0,27.0,
     /28.0,30.0,32.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,
     /90.0,100.,120.,140.,170.,200.,250.,300.,350.,400.,
     /450.,500.,600.,700.,800.,900.,1000./
      DATA Y1S4/0.,.082,.109,.149,.192,.239,.295,.364,.439,.510,
     /.572,.623,.665,.697,.728,.762,.798,.845,.900,.959,
     /1.04,1.13,1.21,1.23,1.23,1.18,1.11,1.04,.978,.918,
     /.852,.824,.784,.750,.722,.674,.646,.608,.598,.580,
     /.541,.541,.551,.570,.598,.627,.665,.712,.760,.807,
     /.855,.893,.893,.855,.836,.807,.798,.798,.779,.760,
     /.760,.874,.770,.788,.836,.978,1.26,1.29,.978,.760,
     /.788,1.08,.864,.770,.940,1.19,1.41,1.33,1.16,1.04,
     /.959,.931,.827,.779,.732,.693,.646,.617,.589,.560,
     /.570,.817,.712,.684,.693,.712,.741,.760,.779,.798,
     /.817,.808,.770,.810,.850,.890,.920,.940,.960,.990,
     /1.00,1.02,1.04,1.05,1.06,1.06,1.05,1.04,1.02,.990,
     /.950,.880,.800,.730,.670,.600,.530,.460,.410,.370,
     /.338,.310,.270,.239,.217,.198,.184/
# 1S3 METASTABLE LEVEL  J=0   UNITS 10**-18 SCALED BY 1/E**3 ABOVE 50 EV
      DATA X1S3/16.71538,16.72,16.73,16.74,16.75,16.76,16.77,16.78,
     /16.79,16.80,
     /16.81,16.82,16.83,16.84,16.85,16.86,16.87,16.88,16.89,16.90,
     /16.91,16.92,16.93,16.94,16.95,16.96,16.97,16.98,17.00,17.02,
     /17.04,17.06,17.08,17.10,17.12,17.14,17.16,17.18,17.20,17.22,
     /17.26,17.34,17.40,17.45,17.50,17.60,17.70,17.80,17.90,18.00,
     /18.10,18.20,18.30,18.40,18.41,18.43,18.45,18.47,18.50,18.52,
     /18.525,18.53,18.54,18.55,18.56,18.57,18.58,18.59,18.60,18.61,
     /18.62,18.63,18.64,18.65,18.66,18.67,18.68,18.69,18.70,18.71,
     /18.72,18.73,18.74,18.75,18.76,18.78,18.80,18.82,18.84,18.86,
     /18.88,18.90,18.92,18.94,18.95,18.96,18.97,18.98,18.99,19.00,
     /19.05,19.10,19.20,19.30,19.40,19.50,19.60,19.65,19.70,19.80,
     /19.9,20.0,25.0,30.0,35.0,40.0,50.0/
      DATA Y1S3/0.,.025,.038,.046,.054,.063,.078,.095,.117,.144,
     /.175,.205,.238,.274,.311,.350,.387,.415,.420,.408,
     /.387,.361,.341,.319,.298,.284,.268,.251,.229,.201,
     /.197,.186,.176,.170,.165,.161,.159,.157,.155,.153,
     /.152,.152,.154,.157,.161,.168,.178,.190,.203,.217,
     /.231,.243,.256,.255,.244,.229,.226,.225,.218,.210,
     /.335,.220,.218,.226,.253,.343,.427,.315,.230,.235,
     /.325,.260,.223,.247,.376,.537,.524,.457,.402,.365,
     /.328,.299,.274,.251,.229,.201,.179,.166,.158,.154,
     /.150,.146,.141,.130,.126,.134,.214,.249,.199,.189,
     /.188,.194,.204,.212,.218,.223,.226,.219,.213,.232,
     /.228,.221,.210,.175,.145,.125,.085/
# 1S2 RESONANCE LEVEL J=1 F=0.159   UNITS 10**-18  73.5901 NM.
      DATA X1S2/16.84805,16.86,16.87,16.88,16.89,16.90,16.91,16.92,
     /16.93,16.94,
     /16.95,16.96,16.98,17.00,17.05,17.10,17.20,17.30,17.40,17.50,
     /17.60,17.70,17.80,17.90,18.00,18.10,18.20,18.30,18.40,18.42,
     /18.44,18.46,18.49,18.51,18.53,18.54,18.55,18.56,18.57,18.58,
     /18.59,18.60,18.61,18.62,18.63,18.64,18.65,18.66,18.67,18.68,
     /18.69,18.70,18.71,18.72,18.73,18.74,18.76,18.78,18.80,18.85,
     /18.90,18.92,18.94,18.95,18.96,18.97,18.98,19.00,19.05,19.10,
     /19.20,19.30,19.40,19.50,19.60,19.70,19.80,19.90,20.00,20.50,
     /21.0,21.5,22.0,23.0,24.0,25.0,26.0,27.0,28.0,29.0,
     /30.0,31.0,32.0,33.0,34.0,35.0,36.0,37.0,38.0,39.0,
     /40.0,41.0,42.0,43.0,45.0,50.0,60.0,70.0,80.0,100.,
     /120.,150.,180.,200.,240.,280.,320.,360.,400./
      DATA Y1S2/0.,.230,.513,.864,1.23,1.59,1.83,2.00,2.10,2.16,
     /2.18,2.15,2.12,2.04,1.86,1.73,1.57,1.49,1.46,1.45,
     /1.46,1.50,1.54,1.60,1.67,1.75,1.82,1.89,1.99,2.01,
     /2.03,2.05,2.06,2.11,2.05,1.97,2.06,2.15,2.14,2.01,
     /1.96,2.02,2.00,1.98,1.94,2.03,2.25,2.37,2.30,2.21,
     /2.13,2.09,2.04,2.01,1.99,1.95,1.91,1.88,1.88,1.91,
     /2.01,2.11,2.27,2.29,1.96,1.86,1.93,1.96,1.99,2.01,
     /2.06,2.10,2.15,2.18,2.25,2.29,2.28,2.32,2.36,2.56,
     /2.66,2.80,3.07,3.63,4.22,4.88,5.45,6.00,6.57,7.07,
     /7.52,7.90,8.28,8.60,8.87,9.10,9.30,9.48,9.63,9.76,
     /9.87,9.96,10.0,10.1,10.2,10.3,10.4,10.3,10.0,9.45,
     /9.00,8.00,7.20,6.80,6.10,5.50,5.05,4.73,4.45/
# 2P10 J=1   UNITS 10**-18   SCALE 1/E**2 ABOVE 100 EV
      DATA X2P10/18.38162,18.39,18.40,18.42,18.43,18.44,18.46,18.47,
     /18.48,18.49,
     /18.50,18.509,18.51,18.52,18.53,18.54,18.55,18.56,18.57,18.58,
     /18.59,18.60,18.61,18.62,18.63,18.64,18.65,18.66,18.67,18.68,
     /18.69,18.70,18.71,18.72,18.74,18.80,18.90,18.92,18.95,18.96,
     /18.97,19.00,19.10,19.20,19.30,19.40,19.50,19.56,19.57,19.58,
     /19.59,19.60,19.70,19.80,19.90,20.0,21.0,22.0,23.0,24.0,
     /25.0,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,50.0,
     /60.0,75.0,100./
      DATA Y2P10/0.00,.060,.091,.201,.261,.287,.310,.328,.354,.389,
     /.440,.589,.394,.574,.716,.960,1.23,1.03,.440,.229,
     /.481,1.16,.777,.606,.863,1.03,1.08,.690,.346,.191,
     /.117,.085,.081,.074,.068,.062,.064,.095,.597,.580,
     /.278,.164,.143,.138,.136,.135,.136,.147,.163,.201,
     /.142,.135,.123,.120,.142,.153,.200,.237,.275,.294,
     /.309,.318,.328,.332,.328,.323,.313,.304,.285,.200,
     /.140,.090,.049/
# 2P9 J=3  UNITS 10**-18    SCALE 1/E**2 ABOVE 100 EV
      DATA X2P9/18.55511,18.56,18.57,18.58,18.59,18.60,18.61,18.62,
     /18.63,18.64,
     /18.65,18.66,18.67,18.68,18.69,18.70,18.71,18.72,18.73,18.74,
     /18.75,18.77,18.80,18.82,18.85,18.88,18.90,18.92,18.94,18.96,
     /18.97,18.98,18.99,19.00,19.10,19.20,19.30,19.40,19.50,19.55,
     /19.59,19.60,19.70,19.80,19.90,20.00,20.10,20.20,20.30,20.40,
     /20.6,20.8,21.0,22.0,24.0,26.0,28.0,30.0,32.0,34.0,
     /38.0,42.0,46.0,50.0,55.0,60.0,70.0,80.0,90.0,100./
      DATA Y2P9/0.0,.093,.157,.233,.183,.114,.092,.132,.102,.116,
     /.164,.322,.472,.392,.286,.218,.175,.148,.133,.123,
     /.119,.116,.120,.124,.131,.139,.147,.163,.193,.300,
     /.320,.180,.128,.131,.135,.142,.151,.159,.171,.179,
     /.213,.143,.178,.195,.215,.205,.222,.242,.257,.268,
     /.286,.307,.328,.418,.465,.503,.513,.503,.484,.456,
     /.404,.332,.285,.256,.204,.171,.128,.097,.078,.062/
# 2P8 J=2  UNITS 10**-18    SCALE BY 1/E ABOVE 60 EV
      DATA X2P8/18.57583,18.58,18.59,18.60,18.61,18.62,18.63,18.64,
     /18.65,18.66,
     /18.67,18.68,18.69,18.70,18.71,18.72,18.74,18.76,18.78,18.80,
     /18.82,18.84,18.86,18.88,18.90,18.92,18.94,18.96,18.98,19.00,
     /19.05,19.10,19.20,19.30,19.40,19.50,19.58,19.60,19.62,19.65,
     /19.68,19.70,19.80,19.90,20.00,20.10,20.20,20.40,20.60,20.80,
     /21.0,22.0,23.0,24.0,25.0,26.0,27.0,28.0,29.0,30.0,
     /32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,
     /55.0,60.0/
      DATA Y2P8/0.0,.142,.198,.206,.250,.193,.158,.172,.403,.506,
     /.467,.420,.381,.353,.326,.308,.275,.249,.229,.214,
     /.201,.195,.192,.192,.194,.200,.215,.271,.206,.177,
     /.177,.179,.185,.192,.200,.207,.205,.243,.228,.224,
     /.228,.192,.218,.239,.260,.272,.289,.315,.339,.364,
     /.385,.437,.475,.513,.537,.546,.551,.551,.546,.532,
     /.513,.494,.475,.456,.437,.423,.408,.394,.385,.370,
     /.337,.313/
# 2P7 J=1  UNITS 10**-18    SCALE BY 1/E**2 ABOVE 60 EV
      DATA X2P7/18.61270,18.62,18.63,18.64,18.65,18.66,18.67,18.68,
     /18.69,18.70,
     /18.71,18.72,18.74,18.76,18.80,18.85,18.90,18.92,18.93,18.94,
     /18.95,18.96,18.97,18.98,18.99,19.00,19.05,19.10,19.20,19.30,
     /19.50,19.60,19.68,18.70,19.80,19.90,20.00,20.10,20.20,20.30,
     /20.4,20.6,20.8,21.0,21.5,22.0,23.0,24.0,25.0,26.0,
     /27.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,
     /46.0,48.0,50.0,54.0,60.0/
      DATA Y2P7/0.0,.123,.127,.095,.145,.153,.126,.104,.091,.085,
     /.080,.077,.072,.067,.061,.060,.066,.071,.076,.082,
     /.096,.118,.112,.074,.066,.067,.070,.075,.084,.088,
     /.099,.101,.115,.101,.114,.122,.126,.117,.124,.134,
     /.141,.154,.164,.177,.198,.215,.232,.244,.252,.252,
     /.250,.248,.243,.233,.218,.201,.184,.169,.156,.144,
     /.134,.124,.117,.103,.081/
# 2P6 J=2  UNITS 10**-18   SCALE BY 1/E ABOVE 60 EV
      DATA X2P6/18.63679,18.64,18.65,18.66,18.67,18.68,18.69,18.70,
     /18.71,18.72,
     /18.74,18.76,18.78,18.80,18.82,18.84,18.86,18.90,18.94,18.96,
     /19.00,19.05,19.10,19.20,19.30,19.40,19.50,19.60,19.70,19.80,
     /19.90,20.00,20.10,20.20,20.30,20.40,20.60,20.80,21.00,21.50,
     /22.0,23.0,24.0,26.0,28.0,30.0,32.0,34.0,36.0,38.0,
     /40.0,42.0,44.0,46.0,48.0,50.0,52.0,54.0,60.0/
      DATA Y2P6/0.0,.113,.103,.135,.310,.442,.466,.449,.441,.436,
     /.434,.432,.427,.419,.410,.401,.391,.376,.368,.374,
     /.333,.319,.317,.321,.330,.339,.349,.388,.369,.362,
     /.388,.404,.423,.437,.447,.466,.489,.513,.532,.556,
     /.579,.603,.622,.646,.656,.656,.646,.632,.617,.603,
     /.589,.575,.561,.546,.532,.518,.503,.489,.475/
# 2P5 J=1  UNITS 10**-18   SCALE BY 1/E**2 ABOVE 60 EV
      DATA X2P5/18.69336,18.70,18.71,18.72,18.73,18.74,18.75,18.76,
     /18.78,18.80,
     /18.82,18.84,18.86,18.88,18.90,18.92,18.94,18.96,18.98,19.00,
     /19.05,19.10,19.20,19.30,19.40,19.50,19.60,19.67,19.70,19.80,
     /19.9,20.0,20.1,20.2,20.3,20.4,20.5,20.6,20.8,21.0,
     /21.5,22.0,23.0,24.0,25.0,26.0,27.0,28.0,29.0,30.0,
     /32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,
     /52.0,54.0,60.0/
      DATA Y2P5/0.0,.029,.045,.054,.061,.066,.067,.069,.068,.067,
     /.066,.066,.067,.068,.071,.074,.081,.095,.078,.079,
     /.087,.096,.112,.125,.134,.142,.156,.161,.146,.163,
     /.174,.175,.168,.168,.174,.182,.192,.201,.219,.233,
     /.237,.239,.242,.242,.239,.235,.229,.228,.228,.228,
     /.224,.211,.204,.196,.187,.181,.173,.166,.159,.151,
     /.144,.138,.117/
# 2P4 J=2  UNITS 10**-18   SCALE BY 1/E ABOVE 60 EV
      DATA X2P4/18.70407,18.71,18.72,18.73,18.74,18.75,18.76,18.77,
     /18.78,18.79,
     /18.80,18.82,18.84,18.86,18.88,18.90,18.92,18.94,18.96,18.98,
     /19.00,19.02,19.10,19.20,19.30,19.40,19.50,19.58,19.60,19.68,
     /19.70,19.80,19.90,20.00,20.10,20.20,20.30,20.40,20.60,20.80,
     /21.0,21.5,22.0,22.5,23.0,24.0,25.0,26.0,27.0,28.0,
     /29.0,30.0,31.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,
     /46.0,48.0,50.0,52.0,54.0,60.0/
      DATA Y2P4/0.0,.140,.180,.208,.229,.247,.263,.278,.291,.302,
     /.313,.318,.332,.333,.332,.330,.329,.336,.371,.313,
     /.287,.275,.263,.264,.270,.278,.289,.312,.291,.293,
     /.326,.310,.326,.343,.363,.380,.404,.419,.447,.476,
     /.504,.532,.551,.570,.580,.599,.608,.614,.612,.605,
     /.594,.580,.564,.546,.513,.485,.461,.440,.423,.408,
     /.395,.384,.374,.366,.358,.323/
# 2P3 J=0  UNITS 10**-18   SCALE BY 1/E ABOVE 60 EV
      DATA X2P3/18.71138,18.72,18.73,18.74,18.75,18.76,18.77,18.78,
     /18.79,18.80,
     /18.82,18.84,18.86,18.88,18.90,18.92,18.94,18.95,18.96,18.97,
     /18.98,19.00,19.10,19.20,19.30,19.40,19.50,19.60,19.70,19.80,
     /19.9,20.0,20.1,20.2,20.3,20.4,20.6,20.8,21.0,21.5,
     /22.0,23.0,24.0,25.0,26.0,27.0,28.0,29.0,30.0,32.0,
     /34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,52.0,
     /54.0,60.0/
      DATA Y2P3/0.0,.028,.037,.046,.054,.062,.068,.073,.078,.082,
     /.087,.090,.092,.095,.098,.104,.124,.139,.142,.083,
     /.064,.068,.065,.066,.069,.072,.076,.078,.086,.087,
     /.097,.095,.101,.110,.116,.119,.125,.133,.139,.143,
     /.149,.152,.153,.151,.150,.149,.146,.142,.137,.127,
     /.120,.112,.107,.104,.100,.097,.094,.091,.088,.085,
     /.081,.072/
# 2P2 J=1  UNITS 10**-18   SCALE BY 1/E**2 ABOVE 60 EV
      DATA X2P2/18.72638,18.73,18.74,18.75,18.76,18.77,18.78,18.79,
     /18.80,18.82,
     /18.84,18.86,18.88,18.90,18.92,18.94,18.95,18.96,18.97,18.98,
     /19.00,19.10,19.20,19.30,19.40,19.50,19.58,19.60,19.70,19.80,
     /19.9,20.0,20.1,20.2,20.3,20.4,20.6,20.8,21.0,21.5,
     /22.0,23.0,24.0,25.0,26.0,27.0,28.0,29.0,30.0,32.0,
     /34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,52.0,
     /54.0,60.0/
      DATA Y2P2/0.0,.006,.025,.046,.063,.078,.090,.099,.109,.122,
     /.128,.131,.133,.137,.134,.143,.154,.179,.163,.137,
     /.125,.128,.140,.150,.159,.166,.183,.163,.187,.187,
     /.198,.201,.204,.203,.204,.207,.209,.211,.215,.223,
     /.228,.233,.238,.238,.235,.226,.219,.214,.207,.192,
     /.178,.163,.150,.140,.129,.122,.115,.108,.103,.096,
     /.090,.078/
# 2P1 J=0 UNITS 10**-18   SCALE BY 1/E ABOVE 100 EV
      DATA X2P1/18.96595,18.97,18.98,18.99,19.00,19.01,19.02,19.03,
     /19.04,19.06,
     /19.08,19.10,19.15,19.20,19.30,19.40,19.50,19.57,19.58,19.60,
     /19.66,19.70,19.80,19.90,20.00,20.10,20.20,20.30,20.40,20.60,
     /20.8,21.0,21.5,22.0,23.0,24.0,25.0,26.0,27.0,28.0,
     /29.0,30.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,
     /48.0,50.0,52.0,54.0,60.0,70.0,80.0,90.0,100./
      DATA Y2P1/0.0,.134,.170,.194,.206,.216,.223,.230,.235,.243,
     /.250,.256,.269,.280,.303,.327,.345,.279,.437,.411,
     /.342,.352,.371,.394,.418,.442,.461,.480,.499,.541,         
     /.580,.618,.722,.826,.969,1.17,1.35,1.48,1.60,1.73,
     /1.81,1.90,1.97,1.98,1.99,1.99,1.98,1.97,1.97,1.96,
     /1.95,1.94,1.92,1.90,1.86,1.75,1.61,1.48,1.38/
#                                                      
# 2S5 J=2  UNITS 10**-18    SCALE BY 1/E**2 ABOVE 50 EV
      DATA X2S5/19.66403,19.8,19.9,20.0,20.5,21.0,22.0,23.0,24.0,25.0,
     /26.0,27.0,28.0,30.0,32.0,36.0,40.0,44.0,50.0/
      DATA Y2S5/0.0,.0217,.0374,.0526,.121,.178,.263,.319,.355,.376,
     /.387,.390,.388,.375,.355,.309,.266,.229,.184/
# 2S4 J=1  RESONANCE LEVEL  USE BEF SCALING     F=0.0128     62.9743 NM 
#
# 2S3 J=0  UNITS 10**-18    SCALE BY 1/E**2 ABOVE 50 EV 
      DATA X2S3/19.76060,19.8,19.9,20.0,20.5,21.0,22.0,23.0,24.0,25.0,
     /26.0,27.0,28.0,30.0,32.0,36.0,40.0,44.0,50.0/
      DATA Y2S3/0.0,.0088,.0245,.0376,.0870,.122,.168,.195,.209,.215,
     /.216,.214,.209,.196,.181,.151,.126,.105,.081/
# 2S2 J=1  RESONANCE LEVEL  USE BEF SCALING     F=0.0166     62.6827 NM
#
# 3D6 J=0  UNITS 10**-18   SCALE BY 1/E**2 ABOVE 50 EV 
      DATA X3D6/20.02464,22.0,24.0,26.0,28.0,30.0,32.0,34.0,36.0,40.0,
     /45.0,50.0/
      DATA Y3D6/0.0,.013,.022,.029,.032,.033,.032,.030,.025,.020,
     /.016,.011/
# 3D5 J=1 RESONANCE LEVEL  USE BEF SCALING      F=0.0048     61.9106 NM
#
# 3D4# J=4  UNITS 10**-18   SCALE BY 1/E**2 ABOVE 50 EV
      DATA X3D4P/20.03465,22.0,24.0,26.0,28.0,30.0,32.0,34.0,36.0,40.0,
     /45.0,50.0/
      DATA Y3D4P/0.0,.013,.022,.029,.032,.033,.032,.030,.025,.020,
     /.016,.011/
# 3D4  J=3  UNITS 10**-18   SCALE BY 1/E**2 ABOVE 50 EV
      DATA X3D4/20.03487,22.0,24.0,26.0,28.0,30.0,32.0,34.0,36.0,40.0,
     /45.0,50.0/
      DATA Y3D4/0.0,.013,.022,.029,.032,.033,.032,.030,.025,.020,
     /.016,.011/
# 3D3  J=2  UNITS 10**-18  SCALE BY 1/E**2 ABOVE  50 EV
      DATA X3D3/20.03675,22.0,24.0,26.0,28.0,30.0,32.0,34.0,36.0,40.0,
     /45.0,50.0/
      DATA Y3D3/0.0,.013,.022,.029,.032,.033,.032,.030,.025,.020,
     /.016,.011/
# 3D2 J=1 RESONANCE LEVEL   USE BEF SCALING      F=0.0146    61.8676 NM
#
# 3D1## J=2  UNITS 10**-18  SCALE BY 1/E**2 ABOVE 50 EV
      DATA X3D1PP/20.04820,22.0,24.0,26.0,28.0,30.0,32.0,34.0,36.0,40.0,
     /45.0,50.0/
      DATA Y3D1PP/0.0,.013,.022,.029,.032,.033,.032,.030,.025,.020,
     /.016,.011/
# 3D1# J=3  UNITS 10**-18  SCALE BY 1/E**2 ABOVE 50 EV
      DATA X3D1P/20.04842,22.0,24.0,26.0,28.0,30.0,32.0,34.0,36.0,40.0,
     /45.0,50.0/
      DATA Y3D1P/0.0,.013,.022,.029,.032,.033,.032,.030,.025,.020,
     /.016,.011/
# 3S1#### J=2  UNITS 10**-18 SCALE BY 1/E**2 ABOVE 50 EV
      DATA X3S1PPPP/20.13611,22.,24.,26.0,28.0,30.0,32.0,34.0,36.0,40.0,
     /45.0,50.0/
      DATA Y3S1PPPP/0.0,.013,.022,.029,.032,.033,.032,.030,.025,.020,
     /.016,.011/
# 3S1### J=3   UNITS 10**-18 SCALE BY 1/E**2 ABOVE 50 EV
      DATA X3S1PPP/20.13629,22.,24.,26.0,28.0,30.0,32.0,34.0,36.0,40.0,
     /45.0,50.0/
      DATA Y3S1PPP/0.0,.013,.022,.029,.032,.033,.032,.030,.025,.020,
     /.016,.011/
# 3S1## J=2    UNITS 10**-18 SCALE BY 1/E**2 ABOVE 50 EV
      DATA X3S1PP/20.13751,22.,24.,26.0,28.0,30.0,32.0,34.0,36.0,40.0,
     /45.0,50.0/
      DATA Y3S1PP/0.0,.013,.022,.029,.032,.033,.032,.030,.025,.020,
     /.016,.011/
# 3S1# J=1 RESONANCE LEVEL  USE BEF SCALING      F=0.00676   61.5632 NM
#
# 3P SUM 3P10-3P6  UNITS 10**-18  SCALE BY 1/E**1.5  ABOVE 50 EV
      DATA X3P106/20.14965,21.0,22.0,23.0,24.0,25.0,26.0,27.0,28.0,30.0,
     /32.0,34.0,36.0,38.0,40.0,50.0/
      DATA Y3P106/0.0,.110,.178,.242,.275,.320,.363,.418,.450,.500,
     /.500,.480,.460,.440,.410,.330/
# 3P SUM 3P5-3P2  UNITS 10**-18  SCALE BY 1/E**1.5  ABOVE 50 EV
      DATA X3P52/20.25918,21.0,22.0,23.0,24.0,25.0,26.0,27.0,28.0,30.0,
     /32.0,34.0,36.0,38.0,40.0,50.0/
      DATA Y3P52/0.0,.088,.142,.194,.220,.256,.290,.335,.360,.400,
     /.400,.380,.370,.350,.330,.270/
# 3P1 J=0  UNITS 10**-18   SCALE 1/E  BY ABOVE 50 EV
      DATA X3P1/20.36885,21.0,22.0,23.0,24.0,25.0,26.0,27.0,28.0,30.0,
     /32.0,34.0,36.0,38.0,40.0,50.0/
      DATA Y3P1/0.0,.050,.100,.125,.145,.165,.175,.185,.192,.200,
     /.205,.207,.207,.205,.205,.190/
#  HIGH RESONANCE LEVELS :
#
# 3S4  J=1  RESONANCE LEVEL  USE BEF SCALING     F=0.00635   60.2730 NM 
# 3S2  J=1  RESONANCE LEVEL  USE BEF SCALING     F=0.0044    60.0041 NM
# 4D5  J=1  RESONANCE LEVEL  USE BEF SCALING     F=0.00705   59.8895 NM
# 4D2  J=1  RESONANCE LEVEL  USE BEF SCALING     F=0.00235   59.8710 NM
# 4S1# J=1  RESONANCE LEVEL  USE BEF SCALING     F=0.00435   59.5924 NM
# 4S4  J=1  RESONANCE LEVEL  USE BEF SCALING     F=0.00325   59.1834 NM
# 5D5  J=1  RESONANCE LEVEL  USE BEF SCALING     F=0.00383   59.0015 NM
# 5D2  J=1  RESONANCE LEVEL  USE BEF SCALING     F=0.00127   58.9915 NM
# 4S2  J=1  RESONANCE LEVEL  USE BEF SCALING     F=0.00165   58.9183 NM
# 5S1# J=1  RESONANCE LEVEL  USE BEF SCALING     F=0.0025    58.7217 NM
# SUM S STATES 5-INFINITY USE BEF SCALING        F=0.00962
# SUM D STATES 6-INFINITY USE BEF SCALING        F=0.01695  
#  TOTAL OSCILLATOR SUM  F = 0.2926
#
# BREMSSTRAHLUNG X-SECTION WITH CUT OFF
      DATA Z10T/671.,424.,215.,123.,69.3,32.5,18.8,11.8,7.95,7.19,
     /7.27,7.42,7.59,7.71,7.80,7.94,8.05,8.19,8.29,8.40,
     /8.47,8.51,8.52,8.56,8.57/
# UNITS 10**-24
      DATA EBRM/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,
     /2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,
     /4.E7,5.E7,6.E7,8.E7,1.E8/
# ---------------------------------------------------------------------
      IF(NANISO == 0):
 :
       NAME='NEON ISOTROPIC     2013  '       
      else:     
       NAME='NEON ANISOTROPIC   2013  '      
      # endIF
# ---------------------------------------------------------------------
# UPDATE OF 2002 FILE USES MORE DETAILED EXCITATION X-SECTIONS FOR USE
# IN PENNING CALCULATIONS. 
# SHAPE 0F EXCITATION defS CLOSE TO THRESHOLD GUIDED BY 
# ZEMAN AND BARTSCHAT J.PHYS. B 30(1997)4609
# ALL X-SECTIONS CONSISTENT WITH PUBLISHED ELECTRON SCATTERING DATA UP 
# TO 2003
# FIT TO RATE COEFICIENTS OF :
#  TACHIBANA AN PHELPS : PHYS REV.A36(1987)999
#  TACHIBANA AND HARIMA J.PHYS.B 17(1984)879
# GOOD FIT TO DRIFT DIFFUSION DATA OF ROBERTSON AND ALSO DATA OF
#  LUCAS AND SAELEE . CLOSE FIT TO TOWNS# end DATA OF CHANIN AND RORK 
# 2007: INCREASED DATA BASE UP TO 10MEV ENERGY                       
# 2007: INTRODUCED NEW ANGULAR DISTRIBUTION def
# 2007: INTRODUCED PENNING TRANSFER FRACTION
# 2010: INTRODUCED MORE DETAILED RMPS CALCULATION OF ZATSARINNY AND
#       BARTSCHAT FROM THRESHOLD TO 20EV FOR THE FIRST S AND P STATES
#       WHICH ARE IN AGREEMENT WITH ALLANS PRECISE MEASUREMENTS
#       J.PHYS.B 42(2009)044009
#       SCALED ZATSARINNY AND BARTSCHAT BY 0.95 TO BRING INTO EXACT 
#       AGREEMENT WITH ALLANS MEASUREMENTS
#       NOW CLEAR EVIDENCE THAT THE TOWNS# end EXPERIMENTS ARE 
#       INACCURATE ESPECIALLY AT LOW FIELDS DUE TO PENNING TRANFERS
#       TO IMPURITIES AT THE LEVEL OF 30PPM . NEED MODERN EXPERIMENTS
#       WITH LESS THAN 1PPM IMPURITIES TO GIVE ACCURATE TOWNS# end COEF.
# 2013: INTRODUCED K-SHELL IONISATION AND CHARGE STATES 1 2 AND 3
#
# ---------------------------------------------------------------------
# 
# BORN BETHE VALUES FOR IONISATION
      CONST=1.873884D-20
      EMASS2=1021997.804
      API=DACOS(-1.00)
      A0=0.52917720859D-8
      RY=13.60569193
      BBCONST=16.0*API*A0*A0*RY*RY/EMASS2
#
      AM2=1.69 
      C=17.80  
# AVERAGE AUGER EMISSION FOR EACH SHELL
      AUGK=1.99
#
      NION=4           
      NATT=1                    
      NIN=45
      NNULL=0
#
      NBREM=25
      DO 55 J=1,NIN
      IZBR(J)=0
   55 CONTINUE
      IZBR(46)=10
#
      DO 1 J=1,6
    1 KEL(J)=NANISO 
      DO 2 J=1,NIN
    2 KIN(J)=NANISO
#       
      NEL=120                                                       
      NDATA=125 
      NEPSI=196                                                        
      NIOND=74 
      NION2=49
      NION3=41
      NKSH=99             
      N1S5=111
      N1S4=137
      N1S3=117
      N1S2=119
      N2P10=73
      N2P9=70
      N2P8=72
      N2P7=65
      N2P6=59
      N2P5=63
      N2P4=66
      N2P3=62
      N2P2=62
      N2P1=59
      N2S5=19
      N2S3=19
      N3D6=12
      N3D4P=12
      N3D4=12
      N3D3=12
      N3D1PP=12
      N3D1P=12
      N3S1PPPP=12
      N3S1PPP=12
      N3S1PP=12
      N3P106=16
      N3P52=16
      N3P1=16
#
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(20.1797*AMU)                                     
      E(3)=21.56454
      E(4)=0.0           
      E(5)=0.0            
# ENTER EOBY FOR MINIMUM IONISING PARTICLE          
      E(6)=19.5
# OPAL BEATY AT LOW ENERGY
      EOBY(1)=17.4      
      EOBY(2)=36.0     
      EOBY(3)=73.0     
# OPAL BEATY SPLITTING FOR K SHELL
      EOBY(4)=500.0       
#
      EION(1)=21.56454
      EION(2)=62.5275
      EION(3)=125.9508
      EION(4)=870.2
      LEGAS(1)=0
      LEGAS(2)=0
      LEGAS(3)=0
      LEGAS(4)=1
      ISHELL(1)=0
      ISHELL(2)=0
      ISHELL(3)=0
      ISHELL(4)=1
# AUGER AND FLUORESCENCE DATA
      NC0(1)=0
      EC0(1)=0.0
      WKLM(1)=0.0
      EFL(1)=0.0
      NG1(1)=0
      EG1(1)=0.0
      NG2(1)=0
      EG2(1)=0.0
      NC0(2)=1 
      EC0(2)=5.0
      WKLM(2)=0.0
      EFL(2)=0.0
      NG1(2)=0
      EG1(2)=0.0
      NG2(2)=0
      EG2(2)=0.0
      NC0(3)=2
      EC0(3)=10.0
      WKLM(3)=0.0
      EFL(3)=0.0
      NG1(3)=0
      EG1(3)=0.0
      NG2(3)=0
      EG2(3)=0.0
      NC0(4)=2
      EC0(4)=806.6
      WKLM(4)=0.015
      EFL(4)=849.
      NG1(4)=2
      EG1(4)=801.
      NG2(4)=1
      EG2(4)=5.0
#
      DO 776 J=1,NION
      DO 777 I=1,4000
      IF(EG(I):
 > EION(J)) :
       IOFFION(J)=I-1
       GO TO 776
      # endIF
  777 CONTINUE
  776 CONTINUE
#
      EIN(1)=16.61907
      EIN(2)=16.67083
      EIN(3)=16.71538
      EIN(4)=16.84805
      EIN(5)=18.38162
      EIN(6)=18.55511
      EIN(7)=18.57583
      EIN(8)=18.61270
      EIN(9)=18.63679
      EIN(10)=18.69336
      EIN(11)=18.70407
      EIN(12)=18.71138
      EIN(13)=18.72638
      EIN(14)=18.96595
      EIN(15)=19.66403
      EIN(16)=19.68819
      EIN(17)=19.76060
      EIN(18)=19.77977
      EIN(19)=20.02464
      EIN(20)=20.02644
      EIN(21)=20.03465
      EIN(22)=20.03487
      EIN(23)=20.03675
      EIN(24)=20.04039
      EIN(25)=20.04820
      EIN(26)=20.04842
      EIN(27)=20.13611
      EIN(28)=20.13629
      EIN(29)=20.13751
      EIN(30)=20.13946
      EIN(31)=20.14965
      EIN(32)=20.25918
      EIN(33)=20.36885
      EIN(34)=20.57056
      EIN(35)=20.66277
      EIN(36)=20.70230
      EIN(37)=20.70871
      EIN(38)=20.80551
      EIN(39)=20.94928
      EIN(40)=21.01388
      EIN(41)=21.01743
      EIN(42)=21.04354
      EIN(43)=21.11401
      EIN(44)=21.14638
      EIN(45)=21.18286
      EIN(46)=0.0
#*****************************************************************
# ENTER PENNING TRANSFER FRACTION FOR EACH LEVEL
# PENNING TRANSFER EFFICIENCY IN NEON MIXTURES BETWEEN 0.3 AND 0.6
      DO 50 NL=1,NIN
      PENFRA[1,NL]=0.5
# PENNING TRANSFER DISTANCE IN MICRONS
      PENFRA[2,NL]=1.0
# PENNING TRANSFER TIME IN PICOSECONDS
   50 PENFRA[3,NL]=1.0
#----------------------------------------------------------------
# HORNBECK MOLNAR MOD  (THRESHOLD 20.3 EV)
# IF PURE GAS SET TO 0.0 FOR FIRST 32 LEVELS 0.3 FOR OTHER LEVELS
#     DO 51 NL=1,32  
#  51 PENFRA(1,NL)=0.0
#*****************************************************************
      IF(IPEN == 0):
 GO TO 4 
      DO 3 KDUM=1,NIN
      IF(PENFRA[1,KDUM] == 0.0):
 GO TO 3
      WRITE(6,999) NAME,EIN(KDUM),PENFRA[1,KDUM],PENFRA[2,KDUM],
     /PENFRA[3,KDUM]
  999 FORMAT(' GAS = ',A15,' ENERGY LEVEL = ',F7.4,' EV.',/,' PENNING PR
     /OBABILITY =',F5.3,' ABS.LENGTH =',F7.2,' DECAY TIME =',F7.1,/)    
    3 CONTINUE
#*****************************************************************
    4 DO 5 NL=1,NIN
      DO 651 I=1,4000
      IF(EG(I):
 > EIN(NL)) :
       IOFFN(NL)=I-1
       GO TO 5
      # endIF
  651 CONTINUE
    5 CONTINUE
      SCRPT(1)='                                                  '
      SCRPT(2)=' ELASTIC    ANISOTROPIC         NEON              '     
      IF(NANISO == 0):
 :
       SCRPT(2)=' ELASTIC   ISOTROPIC           NEON              '     
      # endIF
      SCRPT(3)=' IONISATION CHARGE STATE=1         ELOSS= 21.56454'
      SCRPT(4)=' IONISATION CHARGE STATE=2         ELOSS= 62.5275 '
      SCRPT(5)=' IONISATION CHARGE STATE=3         ELOSS=125.9508 '
      SCRPT(6)=' IONISATION   NEON   K-SHELL       ELOSS=870.2    '
      SCRPT(7)=' ATTACHMENT                                       ' 
      SCRPT(8)='                                                  '
      SCRPT(9)='                                                  '
      SCRPT(10)='EX   1S5      J=2    METASTABLE     ELVL= 16.61907'
      SCRPT(11)='EX   1S4      J=1    RESONANT       ELVL= 16.67083'
      SCRPT(12)='EX   1S3      J=0    METASTABLE     ELVL= 16.71538'
      SCRPT(13)='EX   1S2      J=1    RESONANT       ELVL= 16.84805'
      SCRPT(14)='EX   2P10     J=1                   ELVL= 18.38162'
      SCRPT(15)='EX   2P9      J=3                   ELVL= 18.55511'
      SCRPT(16)='EX   2P8      J=2                   ELVL= 18.57583'
      SCRPT(17)='EX   2P7      J=1                   ELVL= 18.61270'
      SCRPT(18)='EX   2P6      J=2                   ELVL= 18.63679'
      SCRPT(19)='EX   2P5      J=1                   ELVL= 18.69336'
      SCRPT(20)='EX   2P4      J=2                   ELVL= 18.70407'
      SCRPT(21)='EX   2P3      J=0                   ELVL= 18.71138'
      SCRPT(22)='EX   2P2      J=1                   ELVL= 18.72638'
      SCRPT(23)='EX   2P1      J=0                   ELVL= 18.96595'
      SCRPT(24)='EX   2S5      J=2                   ELVL= 19.66403'
      SCRPT(25)='EX   2S4      J=1   RESONANT        ELVL= 19.68819'
      SCRPT(26)='EX   2S3      J=0                   ELVL= 19.76060'
      SCRPT(27)='EX   2S2      J=1   RESONANT        ELVL= 19.77977'
      SCRPT(28)='EX   3D6      J=0                   ELVL= 20.02464'
      SCRPT(29)='EX   3D5      J=1   RESONANT        ELVL= 20.02644'
      SCRPT(30)='EX   3D4#     J=4                   ELVL= 20.03465'
      SCRPT(31)='EX   3D4      J=3                   ELVL= 20.03487'
      SCRPT(32)='EX   3D3      J=2                   ELVL= 20.03675'
      SCRPT(33)='EX   3D2      J=1   RESONANT        ELVL= 20.04039'
      SCRPT(34)='EX   3D1##    J=2                   ELVL= 20.04820'
      SCRPT(35)='EX   3D1#     J=3                   ELVL= 20.04842'
      SCRPT(36)='EX   3S1####  J=2                   ELVL= 20.13611'
      SCRPT(37)='EX   3S1###   J=3                   ELVL= 20.13629'
      SCRPT(38)='EX   3S1##    J=2                   ELVL= 20.13751'
      SCRPT(39)='EX   3S1#     J=1   RESONANT        ELVL= 20.13946'
      SCRPT(40)='EX SUM OF  3P10-6                   ELVL= 20.14965'
      SCRPT(41)='EX SUM OF  3P5-2                    ELVL= 20.25918'
      SCRPT(42)='EX   3P1      J=0                   ELVL= 20.36885'
      SCRPT(43)='EX   3S4      J=1   RESONANT        ELVL= 20.57056'
      SCRPT(44)='EX   3S2      J=1   RESONANT        ELVL= 20.66277'
      SCRPT(45)='EX   4D5      J=1   RESONANT        ELVL= 20.70230'
      SCRPT(46)='EX   4D2      J=1   RESONANT        ELVL= 20.70871'
      SCRPT(47)='EX   4S1#     J=1   RESONANT        ELVL= 20.80551'
      SCRPT(48)='EX   4S4      J=1   RESONANT        ELVL= 20.94928'
      SCRPT(49)='EX   5D5      J=1   RESONANT        ELVL= 21.01388'
      SCRPT(50)='EX   5D2      J=1   RESONANT        ELVL= 21.01743'
      SCRPT(51)='EX   4S2      J=1   RESONANT        ELVL= 21.04354'
      SCRPT(52)='EX   5S1#     J=1   RESONANT        ELVL= 21.11401'
      SCRPT(53)='EX SUM HIGHER S     RESONANT        ELVL= 21.14638'
      SCRPT(54)='EX SUM HIGHER D     RESONANT        ELVL= 21.18286'
      SCRPT(55)=' BREMSSTRAHLUNG FROM NEON ATOM                    '
# PARAMETERS OF PHASE SHIFT ANALYSIS                         
      APOL=2.672                                                        
      LMAX=100                                                          
      AA=0.2135                                                         
      DD=3.86                                                           
      FF=-2.656                                                         
      A1=1.846                                                          
      B1=3.29                                                           
      A2=-0.037
#       
#     EN=-ESTEP/2.00                                    
      DO 9000 I=1,NSTEP 
      EN=EG(I)                                                
#     EN=EN+ESTEP
      IF(EN > EIN(1):
) :
       GAMMA1=(EMASS2+2.00*EN)/EMASS2
       GAMMA2=GAMMA1*GAMMA1
       BETA=math.sqrt(1.00-1.00/GAMMA2)
       BETA2=BETA*BETA
      # endIF                                                       
      IF(EN > 1.0):
 GO TO 7                                           
      IF(EN == 0.0):
 QELA=0.161D-16                                    
      IF(EN == 0.0):
 QMOM=0.161D-16                                    
      IF(EN == 0.0):
 GO TO 12                                            
      AK=math.sqrt(EN/ARY)
      AK2=AK*AK
      AK3=AK2*AK
      AK4=AK3*AK
      AK5=AK4*AK                                                   
      AN0=-AA*AK*(1.0+(4.0*APOL/3.0)*AK2*math.log(AK))-(API*APOL/3.0)*AK2+
     /DD*AK3+FF*AK4                                               
      AN1=((API/15.0)*APOL*AK2-A1*AK3)/(1.0+B1*AK2)
      AN2=API*APOL*AK2/105.0-A2*AK5                
      ANHIGH=AN2      
      SUM=(DSIN(AN0-AN1))**2                                            
      SUM=SUM+2.0*(DSIN(AN1-AN2))**2               
      SIGEL=(DSIN(AN0))**2+3.0*(DSIN(AN1))**2                      
      DO 6 J=2,LMAX-1                             
      ANLOW=ANHIGH
      ANHIGH=API*APOL*AK2/((2.*J+5.0)*(2.*J+3.0)*(2.*J+1.0))            
      SUMI=6.0/((2.0*J+5.0)*(2.0*J+3.0)*(2.0*J+1.0)*(2.0*J-1.0))        
      SUM=SUM+(J+1.0)*(DSIN(API*APOL*AK2*SUMI))**2 
      SIGEL=SIGEL+(2.0*J+1.0)*(DSIN(ANLOW))**2                    
    6 CONTINUE
      QELA=SIGEL*4.0*PIR2/AK2                                           
      QMOM=SUM*4.0*PIR2/AK2                                       
      GO TO 12   
    7 CONTINUE
      DO 8 J=2,NEL                                                    
      IF(EN <= XEL(J):
) GO TO 9                                        
    8 CONTINUE                                                          
      J=NEL                                                             
    9 A=(YEL(J)-YEL(J-1))/(XEL(J)-XEL(J-1))                         
      B=(XEL(J-1)*YEL(J)-XEL(J)*YEL(J-1))/(XEL(J-1)-XEL(J))         
      QELA=(A*EN+B)*1.0D-16                                           
      DO 10 J=2,NDATA                                                  
      IF(EN <= XEN(J):
) GO TO 11                                        
   10 CONTINUE                                                          
      J=NDATA                                                           
   11 A=(YXSEC(J)-YXSEC(J-1))/(XEN(J)-XEN(J-1))                         
      B=(XEN(J-1)*YXSEC(J)-XEN(J)*YXSEC(J-1))/(XEN(J-1)-XEN(J))         
      QMOM=(A*EN+B)*1.0D-16                                           
   12 CONTINUE         
      PQ1=0.5+(QELA-QMOM)/QELA
      DO 13 J=2,NEPSI
      IF(EN <= XEPS(J):
) GO TO 14
   13 CONTINUE
      J=NEPSI
   14 A=(YEPS(J)-YEPS(J-1))/(XEPS(J)-XEPS(J-1))
      B=(XEPS(J-1)*YEPS(J)-XEPS(J)*YEPS(J-1))/(XEPS(J-1)-XEPS(J))
      PQ2=A*EN+B
# EPSILON =1.0-YEPS
      PQ2=1.00-PQ2
      IF(NANISO == 1):
 PEQEL(2,I)=PQ1
      IF(NANISO == 2):
 PEQEL(2,I)=PQ2
      Q(2,I)=QELA                   
      IF(NANISO == 0):
 :
       Q(2,I)=QMOM
       PEQEL(2,I)=0.5
      # endIF   
#
# IONISATION FOR CHARGE STATE =1
      QION(1,I)=0.00    
      PEQION(1,I)=0.50   
      IF(NANISO == 2):
 PEQION(1,I)=0.00                                
      IF(EN <= EION(1):
) GO TO 129 
      IF(EN > XION(NIOND):
) GO TO 121 
      DO 110 J=2,NIOND                                                  
      IF(EN <= XION(J):
) GO TO 120                                       
  110 CONTINUE                                                          
      J=NIOND                                                           
  120 A=(YIN1(J)-YIN1(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YIN1(J)-XION(J)*YIN1(J-1))/(XION(J-1)-XION(J))       
      QION(1,I)=(A*EN+B)*1.0D-16               
      GO TO 122
# USE BORN BETHE X-SECTION ABOVE XION(NIOND) EV
  121 AX2=1.00/BETA2
      AX1=AX2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(1,I)=CONST*(AM2*(AX1-DEN(I)/2.0)+C*AX2)*0.9594
  122 CONTINUE                     
# USE ANISOTROPIC SCATTERING FOR PRIMARY IONISATION ELECTRON FOR
# ENERGIES ABOVE 2 * IONISATION ENERGY
# ANISOTROPIC ANGULAR DISTRIBUTION SAME AS ELASTIC AT ENERGY OFF SET BY
# THE IONISATION ENERGY
      IF(EN <= (2.0*EION(1):
)) GO TO 129
      PEQION(1,I)=PEQEL(2,(I-IOFFION(1)))
#
# IONISATION FOR CHARGE STATE =2
  129 QION(2,I)=0.00    
      PEQION(2,I)=0.50   
      IF(NANISO == 2):
 PEQION(2,I)=0.00                                
      IF(EN <= EION(2):
) GO TO 149 
      IF(EN > XIN2(NION2):
) GO TO 141 
      DO 130 J=2,NION2                                                  
      IF(EN <= XIN2(J):
) GO TO 140                                       
  130 CONTINUE                                                          
      J=NION2                                                           
  140 A=(YIN2(J)-YIN2(J-1))/(XIN2(J)-XIN2(J-1))                         
      B=(XIN2(J-1)*YIN2(J)-XIN2(J)*YIN2(J-1))/(XIN2(J-1)-XIN2(J))       
      QION(2,I)=(A*EN+B)*1.0D-16               
      GO TO 142
# USE BORN BETHE X-SECTION ABOVE XIN2(NION2) EV
  141 AX2=1.00/BETA2
      AX1=AX2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(2,I)=CONST*(AM2*(AX1-DEN(I)/2.0)+C*AX2)*0.0388
  142 CONTINUE                     
# USE ANISOTROPIC SCATTERING FOR PRIMARY IONISATION ELECTRON FOR
# ENERGIES ABOVE 2 * IONISATION ENERGY
# ANISOTROPIC ANGULAR DISTRIBUTION SAME AS ELASTIC AT ENERGY OFF SET BY
# THE IONISATION ENERGY
      IF(EN <= (2.0*EION(2):
)) GO TO 149
      PEQION(2,I)=PEQEL(2,(I-IOFFION(2)))
#
# IONISATION FOR CHARGE STATE =3
  149 QION(3,I)=0.00    
      PEQION(3,I)=0.50   
      IF(NANISO == 2):
 PEQION(3,I)=0.00                                
      IF(EN <= EION(3):
) GO TO 169 
      IF(EN > XIN3(NION3):
) GO TO 161 
      DO 150 J=2,NION3                                                  
      IF(EN <= XIN3(J):
) GO TO 160                                       
  150 CONTINUE                                                          
      J=NION3                                                           
  160 A=(YIN3(J)-YIN3(J-1))/(XIN3(J)-XIN3(J-1))                         
      B=(XIN3(J-1)*YIN3(J)-XIN3(J)*YIN3(J-1))/(XIN3(J-1)-XIN3(J))       
      QION(3,I)=(A*EN+B)*1.0D-16               
      GO TO 162
# USE BORN BETHE X-SECTION ABOVE XIN3(NION3) EV
  161 AX2=1.00/BETA2
      AX1=AX2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(3,I)=CONST*(AM2*(AX1-DEN(I)/2.0)+C*AX2)*0.00215
  162 CONTINUE                     
# USE ANISOTROPIC SCATTERING FOR PRIMARY IONISATION ELECTRON FOR
# ENERGIES ABOVE 2 * IONISATION ENERGY
# ANISOTROPIC ANGULAR DISTRIBUTION SAME AS ELASTIC AT ENERGY OFF SET BY
# THE IONISATION ENERGY
      IF(EN <= (2.0*EION(3):
)) GO TO 169
      PEQION(3,I)=PEQEL(2,(I-IOFFION(3)))
#
# CALCULATE K-SHELL IONISATION
  169 QION(4,I)=0.00
      PEQION(4,I)=0.50
      IF(NANISO == 2):
 PEQION(4,I)=0.0
      IF(EN <= EION(4):
) GO TO 198
      DO 192 J=2,NKSH
      IF(EN <= XKSH(J):
) GO TO 193
  192 CONTINUE
      J=NKSH
  193 A=(YKSH(J)-YKSH(J-1))/(XKSH(J)-XKSH(J-1))
      B=(XKSH(J-1)*YKSH(J)-XKSH(J)*YKSH(J-1))/(XKSH(J-1)-XKSH(J))
      QION(4,I)=(A*EN+B)*1.D-16
      PEQION(4,I)=PEQEL(2,(I-IOFFION(4)))
  198 CONTINUE
# ATTACHMENT             
      Q(4,I)=0.00 
      QATT(1,I)=Q(4,I)
# COUNTING IONISATION                                                     
      Q(5,I)=0.00   
      PEQEL(5,I)=0.50
      IF(NANISO == 2):
 PEQEL(5,I)=0.00
      IF(EN <= E(3):
) GO TO 242
      IF(EN > XION(NIOND):
) GO TO 241
      DO 230 J=2,NIOND
      IF(EN <= XION(J):
) GO TO 240
  230 CONTINUE
      J=NIOND
  240 A=(YINC(J)-YINC(J-1))/(XION(J)-XION(J-1))
      B=(XION(J-1)*YINC(J)-XION(J)*YINC(J-1))/(XION(J-1)-XION(J))
      Q(5,I)=(A*EN+B)*1.0D-16
      GO TO 242
# USE BORN BETHE X-SECTION ABOVE XION(NIOND) EV
  241 Q(5,I)=CONST*(AM2*(AX1-DEN(I)/2.0)+C*AX2)
  242 CONTINUE  
# CORRECTION TO CHARGE STATE 1 2 AND 3 X-SECTION FOR K SHELL 
# GIVES TOTAL IONISATION EQUAL TO OSCILLATOR SUM
      IF(Q(5,I):
 == 0.0) :
       QCORR=1.0
      else:
       QCORR=(Q(5,I)-QION(4,I))/Q(5,I)
      # endIF                           
      QION(1,I)=QION(1,I)*QCORR
      QION(2,I)=QION(2,I)*QCORR
      QION(3,I)=QION(3,I)*QCORR 
#                     
      Q(6,I)=0.00     
#
      DO 251 NL=1,NIN+1
      QIN(NL,I)=0.00
      PEQIN(NL,I)=0.50
      IF(NANISO == 2):
 :
       PEQIN(NL,I)=0.00
      # endIF
  251 CONTINUE
#                                                 
# 1S5 METASTABLE LEVEL                                                      
      IF(EN <= EIN(1):
) GO TO 2000  
      IF(EN > X1S5(N1S5):
) GO TO 311                                 
      DO 300 J=2,N1S5                                                  
      IF(EN <= X1S5(J):
) GO TO 310                                       
  300 CONTINUE                                                          
      J=N1S5                                                           
  310 A=(Y1S5(J)-Y1S5(J-1))/(X1S5(J)-X1S5(J-1))                         
      B=(X1S5(J-1)*Y1S5(J)-X1S5(J)*Y1S5(J-1))/(X1S5(J-1)-X1S5(J))       
      QIN(1,I)=(A*EN+B)*1.0D-18
      GO TO 312 
# IF ENERGY GT X1S5(N1S5) EV SCALE BY 1/E**3
  311 QIN(1,I)=Y1S5(N1S5)*(X1S5(N1S5)/EN)**3*1.0D-18  
  312 IF(EN <= (2.0*EIN(1))) GO TO 320
      PEQIN(1,I)=PEQEL(2,(I-IOFFN(1)))
#
# 1S4 RESONANCE LEVEL  F=0.0118
  320 IF(EN <= EIN(2)) GO TO 2000  
      IF(EN > X1S4(N1S4):
) GO TO 341                                   
      DO 330 J=2,N1S4                                                 
      IF(EN <= X1S4(J):
) GO TO 340                                       
  330 CONTINUE                                                          
      J=N1S4                                                           
  340 A=(Y1S4(J)-Y1S4(J-1))/(X1S4(J)-X1S4(J-1))                         
      B=(X1S4(J-1)*Y1S4(J)-X1S4(J)*Y1S4(J-1))/(X1S4(J-1)-X1S4(J))       
      QIN(2,I)=(A*EN+B)*1.0D-18
      GO TO 342
# IF ENERGY GT X1S4(N1S4) EV USE BEF SCALING
  341 QIN(2,I)=0.0118/(EIN(2)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(2)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(2)+E(3))   
      QIN(2,I)=abs(QIN(2,I))
  342 IF(EN <= (2.0*EIN(2))) GO TO 350 
      PEQIN(2,I)=PEQEL(2,(I-IOFFN(2)))                         
# 1S3 METASTABLE LEVEL
  350 IF(EN <= EIN(3)) GO TO 2000 
      IF(EN > X1S3(N1S3):
) GO TO 371  
      DO 360 J=2,N1S3                                                   
      IF(EN <= X1S3(J):
) GO TO 370                                       
  360 CONTINUE                                                          
      J=N1S3                                                           
  370 A=(Y1S3(J)-Y1S3(J-1))/(X1S3(J)-X1S3(J-1))                         
      B=(X1S3(J-1)*Y1S3(J)-X1S3(J)*Y1S3(J-1))/(X1S3(J-1)-X1S3(J))       
      QIN(3,I)=(A*EN+B)*1.0D-18
      GO TO 372
# IF ENERGY GT X1S3(N1S3) EV SCALE BY 1/E**3
  371 QIN(3,I)=Y1S3(N1S3)*(X1S3(N1S3)/EN)**3*1.D-18 
  372 IF(EN <= (2.0*EIN(3))) GO TO 380
      PEQIN(3,I)=PEQEL(2,(I-IOFFN(3)))    
# 1S2 RESONANCE LEVEL F=0.159
  380 IF(EN <= EIN(4)) GO TO 2000 
      IF(EN > X1S2(N1S2):
) GO TO 401
      DO 390 J=2,N1S2                                                   
      IF(EN <= X1S2(J):
) GO TO 400                                       
  390 CONTINUE                                                          
      J=N1S2                                                           
  400 A=(Y1S2(J)-Y1S2(J-1))/(X1S2(J)-X1S2(J-1))                         
      B=(X1S2(J-1)*Y1S2(J)-X1S2(J)*Y1S2(J-1))/(X1S2(J-1)-X1S2(J))       
      QIN(4,I)=(A*EN+B)*1.0D-18
      GO TO 402
# IF ENERGY GT X1S2(N1S2) EV USE BEF SCALING
  401 QIN(4,I)=0.1590/(EIN(4)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(4)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(4)+E(3))  
      QIN(4,I)=abs(QIN(4,I))
  402 IF(EN <= (2.0*EIN(4))) GO TO 410
      PEQIN(4,I)=PEQEL(2,(I-IOFFN(4)))                                
# 2P10 
  410 IF(EN <= EIN(5)) GO TO 2000   
      IF(EN > X2P10(N2P10):
) GO TO 431
      DO 420 J=2,N2P10                                                  
      IF(EN <= X2P10(J):
) GO TO 430                                 
  420 CONTINUE                                                          
      J=N2P10                                                           
  430 A=(Y2P10(J)-Y2P10(J-1))/(X2P10(J)-X2P10(J-1))                   
      B=(X2P10(J-1)*Y2P10(J)-X2P10(J)*Y2P10(J-1))/(X2P10(J-1)-X2P10(J))
      QIN(5,I)=(A*EN+B)*1.0D-18       
      GO TO 432
# IF ENERGY GT X2P10(N2P10) EV SCALE BY 1/E**2
  431 QIN(5,I)=Y2P10(N2P10)*(X2P10(N2P10)/EN)**2*1.D-18       
  432 IF(EN <= (2.0*EIN(5))) GO TO 440
      PEQIN(5,I)=PEQEL(2,(I-IOFFN(5)))                          
# 2P9
  440 IF(EN <= EIN(6)) GO TO 2000  
      IF(EN > X2P9(N2P9):
) GO TO 461                           
      DO 450 J=2,N2P9                                                  
      IF(EN <= X2P9(J):
) GO TO 460                                       
  450 CONTINUE                                                          
      J=N2P9                                                           
  460 A=(Y2P9(J)-Y2P9(J-1))/(X2P9(J)-X2P9(J-1))                         
      B=(X2P9(J-1)*Y2P9(J)-X2P9(J)*Y2P9(J-1))/(X2P9(J-1)-X2P9(J))       
      QIN(6,I)=(A*EN+B)*1.0D-18        
      GO TO 462
# IF ENERGY GT X2P9(N2P9) EV  SCALE BY 1/E**2
  461 QIN(6,I)=Y2P9(N2P9)*(X2P9(N2P9)/EN)**2*1.D-18       
  462 IF(EN <= (2.0*EIN(6))) GO TO 470
      PEQIN(6,I)=PEQEL(2,(I-IOFFN(6)))                               
# 2P8
  470 IF(EN <= EIN(7)) GO TO 2000 
      IF(EN > X2P8(N2P8):
) GO TO 491                                   
      DO 480 J=2,N2P8                                                  
      IF(EN <= X2P8(J):
) GO TO 490                                      
  480 CONTINUE                                                          
      J=N2P8                                                          
  490 A=(Y2P8(J)-Y2P8(J-1))/(X2P8(J)-X2P8(J-1))                         
      B=(X2P8(J-1)*Y2P8(J)-X2P8(J)*Y2P8(J-1))/(X2P8(J-1)-X2P8(J))       
      QIN(7,I)=(A*EN+B)*1.0D-18          
      GO TO 492
# IF ENERGY GT X2P8(N2P8) EV  SCALE BY 1/E
  491 QIN(7,I)=Y2P8(N2P8)*(X2P8(N2P8)/EN)*1.D-18       
  492 IF(EN <= (2.0*EIN(7))) GO TO 500 
      PEQIN(7,I)=PEQEL(2,(I-IOFFN(7)))                    
# 2P7
  500 IF(EN <= EIN(8)) GO TO 2000 
      IF(EN > X2P7(N2P7):
) GO TO 521                                  
      DO 510 J=2,N2P7                                                  
      IF(EN <= X2P7(J):
) GO TO 520                                       
  510 CONTINUE                                                          
      J=N2P7                                                           
  520 A=(Y2P7(J)-Y2P7(J-1))/(X2P7(J)-X2P7(J-1))                         
      B=(X2P7(J-1)*Y2P7(J)-X2P7(J)*Y2P7(J-1))/(X2P7(J-1)-X2P7(J))       
      QIN(8,I)=(A*EN+B)*1.0D-18           
      GO TO 522
# IF ENERGY GT X2P7(N2P7) EV SCALE BY 1/E**2
  521 QIN(8,I)=Y2P7(N2P7)*(X2P7(N2P7)/EN)**2*1.D-18          
  522 IF(EN <= (2.0*EIN(8))) GO TO 530
      PEQIN(8,I)=PEQEL(2,(I-IOFFN(8)))                                
# 2P6
  530 IF(EN <= EIN(9)) GO TO 2000   
      IF(EN > X2P6(N2P6):
) GO TO 551                                 
      DO 540 J=2,N2P6                                                  
      IF(EN <= X2P6(J):
) GO TO 550                                       
  540 CONTINUE                                                          
      J=N2P6                                                           
  550 A=(Y2P6(J)-Y2P6(J-1))/(X2P6(J)-X2P6(J-1))                         
      B=(X2P6(J-1)*Y2P6(J)-X2P6(J)*Y2P6(J-1))/(X2P6(J-1)-X2P6(J))       
      QIN(9,I)=(A*EN+B)*1.0D-18          
      GO TO 552
# IF ENERGY GT X2P6(N2P6) EV   SCALE BY 1/E
  551 QIN(9,I)=Y2P6(N2P6)*(X2P6(N2P6)/EN)*1.D-18         
  552 IF(EN <= (2.0*EIN(9))) GO TO 560
      PEQIN(9,I)=PEQEL(2,(I-IOFFN(9)))                                  
# 2P5
  560 IF(EN <= EIN(10)) GO TO 2000   
      IF(EN > X2P5(N2P5):
) GO TO 581                                 
      DO 570 J=2,N2P5                                                  
      IF(EN <= X2P5(J):
) GO TO 580                                       
  570 CONTINUE                                                          
      J=N2P5                                                           
  580 A=(Y2P5(J)-Y2P5(J-1))/(X2P5(J)-X2P5(J-1))                         
      B=(X2P5(J-1)*Y2P5(J)-X2P5(J)*Y2P5(J-1))/(X2P5(J-1)-X2P5(J))       
      QIN(10,I)=(A*EN+B)*1.0D-18         
      GO TO 582
# IF ENERGY GT X2P5(N2P5) EV   SCALE BY 1/E**2
  581 QIN(10,I)=Y2P5(N2P5)*(X2P5(N2P5)/EN)**2*1.D-18         
  582 IF(EN <= (2.0*EIN(10))) GO TO 590
      PEQIN(10,I)=PEQEL(2,(I-IOFFN(10)))                                
# 2P4 
  590 IF(EN <= EIN(11)) GO TO 2000   
      IF(EN > X2P4(N2P4):
) GO TO 611                                 
      DO 600 J=2,N2P4                                                  
      IF(EN <= X2P4(J):
) GO TO 610                                       
  600 CONTINUE                                                          
      J=N2P4                                                           
  610 A=(Y2P4(J)-Y2P4(J-1))/(X2P4(J)-X2P4(J-1))                         
      B=(X2P4(J-1)*Y2P4(J)-X2P4(J)*Y2P4(J-1))/(X2P4(J-1)-X2P4(J))       
      QIN(11,I)=(A*EN+B)*1.0D-18          
      GO TO 612
# IF ENERGY GT X2P4(N2P4) EV   SCALE BY 1/E   
  611 QIN(11,I)=Y2P4(N2P4)*(X2P4(N2P4)/EN)*1.D-18           
  612 IF(EN <= (2.0*EIN(11))) GO TO 620
      PEQIN(11,I)=PEQEL(2,(I-IOFFN(11)))                                
# 2P3 
  620 IF(EN <= EIN(12)) GO TO 2000   
      IF(EN > X2P3(N2P3):
) GO TO 641                                 
      DO 630 J=2,N2P3                                                  
      IF(EN <= X2P3(J):
) GO TO 640                                       
  630 CONTINUE                                                          
      J=N2P3                                                           
  640 A=(Y2P3(J)-Y2P3(J-1))/(X2P3(J)-X2P3(J-1))                         
      B=(X2P3(J-1)*Y2P3(J)-X2P3(J)*Y2P3(J-1))/(X2P3(J-1)-X2P3(J))       
      QIN(12,I)=(A*EN+B)*1.0D-18          
      GO TO 642
# IF ENERGY GT X2P3(N2P3) EV   SCALE BY 1/E   
  641 QIN(12,I)=Y2P3(N2P3)*(X2P3(N2P3)/EN)*1.D-18         
  642 IF(EN <= (2.0*EIN(12))) GO TO 650
      PEQIN(12,I)=PEQEL(2,(I-IOFFN(12)))                                
# 2P2 
  650 IF(EN <= EIN(13)) GO TO 2000   
      IF(EN > X2P2(N2P2):
) GO TO 671                                 
      DO 660 J=2,N2P2                                                  
      IF(EN <= X2P2(J):
) GO TO 670                                       
  660 CONTINUE                                                          
      J=N2P2                                                           
  670 A=(Y2P2(J)-Y2P2(J-1))/(X2P2(J)-X2P2(J-1))                         
      B=(X2P2(J-1)*Y2P2(J)-X2P2(J)*Y2P2(J-1))/(X2P2(J-1)-X2P2(J))       
      QIN(13,I)=(A*EN+B)*1.0D-18            
      GO TO 672
# IF ENERGY GT X2P2(N2P2) EV   SCALE BY 1/E**2
  671 QIN(13,I)=Y2P2(N2P2)*(X2P2(N2P2)/EN)**2*1.D-18         
  672 IF(EN <= (2.0*EIN(13))) GO TO 680
      PEQIN(13,I)=PEQEL(2,(I-IOFFN(13)))                                
# 2P1 
  680 IF(EN <= EIN(14)) GO TO 2000   
      IF(EN > X2P1(N2P1):
) GO TO 701                                 
      DO 690 J=2,N2P1                                                  
      IF(EN <= X2P1(J):
) GO TO 700                                       
  690 CONTINUE                                                          
      J=N2P1                                                           
  700 A=(Y2P1(J)-Y2P1(J-1))/(X2P1(J)-X2P1(J-1))                         
      B=(X2P1(J-1)*Y2P1(J)-X2P1(J)*Y2P1(J-1))/(X2P1(J-1)-X2P1(J))       
      QIN(14,I)=(A*EN+B)*1.0D-18           
      GO TO 702
# IF ENERGY GT X2P1(N2P1) EV   SCALE BY 1/E   
  701 QIN(14,I)=Y2P1(N2P1)*(X2P1(N2P1)/EN)*1.D-18          
  702 IF(EN <= (2.0*EIN(14))) GO TO 710
      PEQIN(14,I)=PEQEL(2,(I-IOFFN(14)))                                
# 2S5  
  710 IF(EN <= EIN(15)) GO TO 2000   
      IF(EN > X2S5(N2S5):
) GO TO 731                                 
      DO 720 J=2,N2S5                                                  
      IF(EN <= X2S5(J):
) GO TO 730                                       
  720 CONTINUE                                                          
      J=N2S5                                                           
  730 A=(Y2S5(J)-Y2S5(J-1))/(X2S5(J)-X2S5(J-1))                         
      B=(X2S5(J-1)*Y2S5(J)-X2S5(J)*Y2S5(J-1))/(X2S5(J-1)-X2S5(J))       
      QIN(15,I)=(A*EN+B)*1.0D-18
      GO TO 732
# IF ENERGY GT X2S5(N2S5) EV   SCALE BY 1/E**2
  731 QIN(15,I)=Y2S5(N2S5)*(X2S5(N2S5)/EN)**2*1.D-18
  732 IF(EN <= (2.0*EIN(15))) GO TO 740
      PEQIN(15,I)=PEQEL(2,(I-IOFFN(15)))                                
# 2S4   BEF SCALING
  740 IF(EN <= EIN(16)) GO TO 2000
      QIN(16,I)=0.0128/(EIN(16)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(16)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(16)+E(3))   
      QIN(16,I)=abs(QIN(16,I))
      IF(EN <= (2.0*EIN(16):
)) GO TO 750 
      PEQIN(16,I)=PEQEL(2,(I-IOFFN(16)))
# 2S3
  750 IF(EN <= EIN(17)) GO TO 2000   
      IF(EN > X2S3(N2S3):
) GO TO 771                                 
      DO 760 J=2,N2S3                                                  
      IF(EN <= X2S3(J):
) GO TO 770                                       
  760 CONTINUE                                                          
      J=N2S3                                                           
  770 A=(Y2S3(J)-Y2S3(J-1))/(X2S3(J)-X2S3(J-1))                         
      B=(X2S3(J-1)*Y2S3(J)-X2S3(J)*Y2S3(J-1))/(X2S3(J-1)-X2S3(J))       
      QIN(17,I)=(A*EN+B)*1.0D-18
      GO TO 772
# IF ENERGY GT X2S3(N2S3) EV   SCALE BY 1/E**2
  771 QIN(17,I)=Y2S3(N2S3)*(X2S3(N2S3)/EN)**2*1.D-18
  772 IF(EN <= (2.0*EIN(17))) GO TO 780
      PEQIN(17,I)=PEQEL(2,(I-IOFFN(17)))                                
# 2S2   BEF SCALING
  780 IF(EN <= EIN(18)) GO TO 2000
      QIN(18,I)=0.0166/(EIN(18)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(18)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(18)+E(3)) 
      QIN(18,I)=abs(QIN(18,I))  
      IF(EN <= (2.0*EIN(18):
)) GO TO 790 
      PEQIN(18,I)=PEQEL(2,(I-IOFFN(18)))
# 3D6
  790 IF(EN <= EIN(19)) GO TO 2000   
      IF(EN > X3D6(N3D6):
) GO TO 811                                 
      DO 800 J=2,N3D6                                                  
      IF(EN <= X3D6(J):
) GO TO 810                                       
  800 CONTINUE                                                          
      J=N3D6                                                           
  810 A=(Y3D6(J)-Y3D6(J-1))/(X3D6(J)-X3D6(J-1))                         
      B=(X3D6(J-1)*Y3D6(J)-X3D6(J)*Y3D6(J-1))/(X3D6(J-1)-X3D6(J))       
      QIN(19,I)=(A*EN+B)*1.0D-18
      GO TO 812
# IF ENERGY GT X3D6(N3D6) EV   SCALE BY 1/E**2
  811 QIN(19,I)=Y3D6(N3D6)*(X3D6(N3D6)/EN)**2*1.D-18
  812 IF(EN <= (2.0*EIN(19))) GO TO 820
      PEQIN(19,I)=PEQEL(2,(I-IOFFN(19)))                                
# 3D5   BEF SCALING
  820 IF(EN <= EIN(20)) GO TO 2000
      QIN(20,I)=0.0048/(EIN(20)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(20)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(20)+E(3)) 
      QIN(20,I)=abs(QIN(20,I))  
      IF(EN <= (2.0*EIN(20):
)) GO TO 830 
      PEQIN(20,I)=PEQEL(2,(I-IOFFN(20)))
# 3D4#
  830 IF(EN <= EIN(21)) GO TO 2000   
      IF(EN > X3D4P(N3D4P):
) GO TO 851                                 
      DO 840 J=2,N3D4P                                                  
      IF(EN <= X3D4P(J):
) GO TO 850                                    
  840 CONTINUE                                                          
      J=N3D4P                                                           
  850 A=(Y3D4P(J)-Y3D4P(J-1))/(X3D4P(J)-X3D4P(J-1))                    
      B=(X3D4P(J-1)*Y3D4P(J)-X3D4P(J)*Y3D4P(J-1))/(X3D4P(J-1)-X3D4P(J))
      QIN(21,I)=(A*EN+B)*1.0D-18
      GO TO 852
# IF ENERGY GT X3D4P(N3D4P) EV   SCALE BY 1/E**2
  851 QIN(21,I)=Y3D4P(N3D4P)*(X3D4P(N3D4P)/EN)**2*1.D-18
  852 IF(EN <= (2.0*EIN(21))) GO TO 860
      PEQIN(21,I)=PEQEL(2,(I-IOFFN(21)))                                
# 3D4
  860 IF(EN <= EIN(22)) GO TO 2000   
      IF(EN > X3D4(N3D4):
) GO TO 881                                 
      DO 870 J=2,N3D4                                                  
      IF(EN <= X3D4(J):
) GO TO 880                                    
  870 CONTINUE                                                          
      J=N3D4                                                           
  880 A=(Y3D4(J)-Y3D4(J-1))/(X3D4(J)-X3D4(J-1))                    
      B=(X3D4(J-1)*Y3D4(J)-X3D4(J)*Y3D4(J-1))/(X3D4(J-1)-X3D4(J))
      QIN(22,I)=(A*EN+B)*1.0D-18
      GO TO 882
# IF ENERGY GT X3D4(N3D4) EV   SCALE BY 1/E**2
  881 QIN(22,I)=Y3D4(N3D4)*(X3D4(N3D4)/EN)**2*1.D-18
  882 IF(EN <= (2.0*EIN(22))) GO TO 890
      PEQIN(22,I)=PEQEL(2,(I-IOFFN(22)))                                
# 3D3
  890 IF(EN <= EIN(23)) GO TO 2000   
      IF(EN > X3D3(N3D3):
) GO TO 911                                 
      DO 900 J=2,N3D3                                                  
      IF(EN <= X3D3(J):
) GO TO 910                                    
  900 CONTINUE                                                          
      J=N3D3                                                           
  910 A=(Y3D3(J)-Y3D3(J-1))/(X3D3(J)-X3D3(J-1))                    
      B=(X3D3(J-1)*Y3D3(J)-X3D3(J)*Y3D3(J-1))/(X3D3(J-1)-X3D3(J))
      QIN(23,I)=(A*EN+B)*1.0D-18
      GO TO 912
# IF ENERGY GT X3D3(N3D3) EV   SCALE BY 1/E**2
  911 QIN(23,I)=Y3D3(N3D3)*(X3D3(N3D3)/EN)**2*1.D-18
  912 IF(EN <= (2.0*EIN(23))) GO TO 920
      PEQIN(23,I)=PEQEL(2,(I-IOFFN(23)))                                
# 3D2     BEF SCALING
  920 IF(EN <= EIN(24)) GO TO 2000
      QIN(24,I)=0.0146/(EIN(24)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(24)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(24)+E(3)) 
      QIN(24,I)=abs(QIN(24,I))  
      IF(EN <= (2.0*EIN(24):
)) GO TO 930 
      PEQIN(24,I)=PEQEL(2,(I-IOFFN(24)))
# 3D1##
  930 IF(EN <= EIN(25)) GO TO 2000   
      IF(EN > X3D1PP(N3D1PP):
) GO TO 951                           
      DO 940 J=2,N3D1PP                                                
      IF(EN <= X3D1PP(J):
) GO TO 950                                    
  940 CONTINUE                                                          
      J=N3D1PP                                                         
  950 A=(Y3D1PP(J)-Y3D1PP(J-1))/(X3D1PP(J)-X3D1PP(J-1))                
      B=(X3D1PP(J-1)*Y3D1PP(J)-X3D1PP(J)*Y3D1PP(J-1))/(X3D1PP(J-1)-
     /X3D1PP(J))
      QIN(25,I)=(A*EN+B)*1.0D-18
      GO TO 952
# IF ENERGY GT X3D1PP(N3D1PP) EV   SCALE BY 1/E**2
  951 QIN(25,I)=Y3D1PP(N3D1PP)*(X3D1PP(N3D1PP)/EN)**2*1.D-18
  952 IF(EN <= (2.0*EIN(25))) GO TO 960
      PEQIN(25,I)=PEQEL(2,(I-IOFFN(25)))                                
# 3D1#
  960 IF(EN <= EIN(26)) GO TO 2000   
      IF(EN > X3D1P(N3D1P):
) GO TO 981                           
      DO 970 J=2,N3D1P                                                
      IF(EN <= X3D1P(J):
) GO TO 980                                    
  970 CONTINUE                                                          
      J=N3D1P                                                         
  980 A=(Y3D1P(J)-Y3D1P(J-1))/(X3D1P(J)-X3D1P(J-1))                
      B=(X3D1P(J-1)*Y3D1P(J)-X3D1P(J)*Y3D1P(J-1))/(X3D1P(J-1)-X3D1P(J))
      QIN(26,I)=(A*EN+B)*1.0D-18
      GO TO 982
# IF ENERGY GT X3D1P(N3D1P) EV   SCALE BY 1/E**2
  981 QIN(26,I)=Y3D1P(N3D1P)*(X3D1P(N3D1P)/EN)**2*1.D-18
  982 IF(EN <= (2.0*EIN(26))) GO TO 990
      PEQIN(26,I)=PEQEL(2,(I-IOFFN(26)))                                
# 3S1####
  990 IF(EN <= EIN(27)) GO TO 2000   
      IF(EN > X3S1PPPP(N3S1PPPP):
) GO TO 1011                      
      DO 1000 J=2,N3S1PPPP                                              
      IF(EN <= X3S1PPPP(J):
) GO TO 1010                                  
 1000 CONTINUE                                                          
      J=N3S1PPPP                                                       
 1010 A=(Y3S1PPPP(J)-Y3S1PPPP(J-1))/(X3S1PPPP(J)-X3S1PPPP(J-1))       
      B=(X3S1PPPP(J-1)*Y3S1PPPP(J)-X3S1PPPP(J)*Y3S1PPPP(J-1))/
     /(X3S1PPPP(J-1)-X3S1PPPP(J))
      QIN(27,I)=(A*EN+B)*1.0D-18
      GO TO 1012
# IF ENERGY GT X3S1PPPP(N3S1PPPP) EV   SCALE BY 1/E**2
 1011 QIN(27,I)=Y3S1PPPP(N3S1PPPP)*(X3S1PPPP(N3S1PPPP)/EN)**2*1.D-18
 1012 IF(EN <= (2.0*EIN(27))) GO TO 1020
      PEQIN(27,I)=PEQEL(2,(I-IOFFN(27)))                                
# 3S1###
 1020 IF(EN <= EIN(28)) GO TO 2000   
      IF(EN > X3S1PPP(N3S1PPP):
) GO TO 1041                           
      DO 1030 J=2,N3S1PPP                                             
      IF(EN <= X3S1PPP(J):
) GO TO 1040                                 
 1030 CONTINUE                                                          
      J=N3S1PPP                                                         
 1040 A=(Y3S1PPP(J)-Y3S1PPP(J-1))/(X3S1PPP(J)-X3S1PPP(J-1))            
      B=(X3S1PPP(J-1)*Y3S1PPP(J)-X3S1PPP(J)*Y3S1PPP(J-1))/
     /(X3S1PPP(J-1)-X3S1PPP(J))
      QIN(28,I)=(A*EN+B)*1.0D-18
      GO TO 1042
# IF ENERGY GT X3S1PPP(N3S1PPP) EV   SCALE BY 1/E**2
 1041 QIN(28,I)=Y3S1PPP(N3S1PPP)*(X3S1PPP(N3S1PPP)/EN)**2*1.D-18
 1042 IF(EN <= (2.0*EIN(28))) GO TO 1050
      PEQIN(28,I)=PEQEL(2,(I-IOFFN(28)))                                
# 3S1##
 1050 IF(EN <= EIN(29)) GO TO 2000   
      IF(EN > X3S1PP(N3S1PP):
) GO TO 1071                           
      DO 1060 J=2,N3S1PP                                              
      IF(EN <= X3S1PP(J):
) GO TO 1070                                    
 1060 CONTINUE                                                          
      J=N3S1PP                                                         
 1070 A=(Y3S1PP(J)-Y3S1PP(J-1))/(X3S1PP(J)-X3S1PP(J-1))                
      B=(X3S1PP(J-1)*Y3S1PP(J)-X3S1PP(J)*Y3S1PP(J-1))/
     /(X3S1PP(J-1)-X3S1PP(J))
      QIN(29,I)=(A*EN+B)*1.0D-18
      GO TO 1072
# IF ENERGY GT X3S1PP(N3S1PP) EV   SCALE BY 1/E**2
 1071 QIN(29,I)=Y3S1PP(N3S1PP)*(X3S1PP(N3S1PP)/EN)**2*1.D-18
 1072 IF(EN <= (2.0*EIN(29))) GO TO 1080
      PEQIN(29,I)=PEQEL(2,(I-IOFFN(29)))                                
# 3S1#   BEF SCALING
 1080 IF(EN <= EIN(30)) GO TO 2000
      QIN(30,I)=0.00676/(EIN(30)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(30)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(30)+E(3))  
      QIN(30,I)=abs(QIN(30,I)) 
      IF(EN <= (2.0*EIN(30):
)) GO TO 1090 
      PEQIN(30,I)=PEQEL(2,(I-IOFFN(30)))
# SUM 3P10--3P6
 1090 IF(EN <= EIN(31)) GO TO 2000   
      IF(EN > X3P106(N3P106):
) GO TO 1111                              
      DO 1100 J=2,N3P106                                               
      IF(EN <= X3P106(J):
) GO TO 1110                                  
 1100 CONTINUE                                                          
      J=N3P106                                                          
 1110 A=(Y3P106(J)-Y3P106(J-1))/(X3P106(J)-X3P106(J-1))                
      B=(X3P106(J-1)*Y3P106(J)-X3P106(J)*Y3P106(J-1))/
     /(X3P106(J-1)-X3P106(J))       
      QIN(31,I)=(A*EN+B)*1.0D-18
      GO TO 1112
# IF ENERGY GT X3P106(N3P106) EV   SCALE BY 1/E**1.5   
 1111 QIN(31,I)=Y3P106(N3P106)*(X3P106(N3P106)/EN)**1.5*1.D-18
 1112 IF(EN <= (2.0*EIN(31))) GO TO 1120
      PEQIN(31,I)=PEQEL(2,(I-IOFFN(31)))                                
# SUM 3P5--3P2
 1120 IF(EN <= EIN(32)) GO TO 2000   
      IF(EN > X3P52(N3P52):
) GO TO 1141                              
      DO 1130 J=2,N3P52                                               
      IF(EN <= X3P52(J):
) GO TO 1140                                  
 1130 CONTINUE                                                          
      J=N3P52                                                          
 1140 A=(Y3P52(J)-Y3P52(J-1))/(X3P52(J)-X3P52(J-1))                
      B=(X3P52(J-1)*Y3P52(J)-X3P52(J)*Y3P52(J-1))/(X3P52(J-1)-X3P52(J))
      QIN(32,I)=(A*EN+B)*1.0D-18
      GO TO 1142
# IF ENERGY GT X3P52(N3P52) EV   SCALE BY 1/E**1.5   
 1141 QIN(32,I)=Y3P52(N3P52)*(X3P52(N3P52)/EN)**1.5*1.D-18
 1142 IF(EN <= (2.0*EIN(32))) GO TO 1150
      PEQIN(32,I)=PEQEL(2,(I-IOFFN(32)))                                
# 3P1
 1150 IF(EN <= EIN(33)) GO TO 2000   
      IF(EN > X3P1(N3P1):
) GO TO 1171                              
      DO 1160 J=2,N3P1                                               
      IF(EN <= X3P1(J):
) GO TO 1170                                  
 1160 CONTINUE                                                          
      J=N3P1                                                          
 1170 A=(Y3P1(J)-Y3P1(J-1))/(X3P1(J)-X3P1(J-1))                
      B=(X3P1(J-1)*Y3P1(J)-X3P1(J)*Y3P1(J-1))/(X3P1(J-1)-X3P1(J))
      QIN(33,I)=(A*EN+B)*1.0D-18
      GO TO 1172
# IF ENERGY GT X3P1(N3P1) EV   SCALE BY 1/E   
 1171 QIN(33,I)=Y3P1(N3P1)*(X3P1(N3P1)/EN)*1.D-18
 1172 IF(EN <= (2.0*EIN(33))) GO TO 1180
      PEQIN(33,I)=PEQEL(2,(I-IOFFN(33)))                                
# 3S4     BEF SCALING
 1180 IF(EN <= EIN(34)) GO TO 2000
      QIN(34,I)=0.00635/(EIN(34)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(34)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(34)+E(3))   
      QIN(34,I)=abs(QIN(34,I))
      IF(EN <= (2.0*EIN(34):
)) GO TO 1190
      PEQIN(34,I)=PEQEL(2,(I-IOFFN(34)))
# 3S2     BEF SCALING
 1190 IF(EN <= EIN(35)) GO TO 2000
      QIN(35,I)=0.00440/(EIN(35)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(35)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(35)+E(3))
      QIN(35,I)=abs(QIN(35,I))   
      IF(EN <= (2.0*EIN(35):
)) GO TO 1200
      PEQIN(35,I)=PEQEL(2,(I-IOFFN(35)))
# 4D5     BEF SCALING
 1200 IF(EN <= EIN(36)) GO TO 2000
      QIN(36,I)=0.00705/(EIN(36)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(36)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(36)+E(3))
      QIN(36,I)=abs(QIN(36,I))   
      IF(EN <= (2.0*EIN(36):
)) GO TO 1210
      PEQIN(36,I)=PEQEL(2,(I-IOFFN(36)))
# 4D2     BEF SCALING
 1210 IF(EN <= EIN(37)) GO TO 2000
      QIN(37,I)=0.00235/(EIN(37)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(37)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(37)+E(3)) 
      QIN(37,I)=abs(QIN(37,I))  
      IF(EN <= (2.0*EIN(37):
)) GO TO 1220
      PEQIN(37,I)=PEQEL(2,(I-IOFFN(37)))
# 4S1#    BEF SCALING
 1220 IF(EN <= EIN(38)) GO TO 2000
      QIN(38,I)=0.00435/(EIN(38)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(38)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(38)+E(3)) 
      QIN(38,I)=abs(QIN(38,I))  
      IF(EN <= (2.0*EIN(38):
)) GO TO 1230
      PEQIN(38,I)=PEQEL(2,(I-IOFFN(38)))
# 4S4     BEF SCALING
 1230 IF(EN <= EIN(39)) GO TO 2000
      QIN(39,I)=0.00325/(EIN(39)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(39)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(39)+E(3))
      QIN(39,I)=abs(QIN(39,I))   
      IF(EN <= (2.0*EIN(39):
)) GO TO 1240
      PEQIN(39,I)=PEQEL(2,(I-IOFFN(39)))
# 5D5     BEF SCALING
 1240 IF(EN <= EIN(40)) GO TO 2000
      QIN(40,I)=0.00383/(EIN(40)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(40)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(40)+E(3)) 
      QIN(40,I)=abs(QIN(40,I))  
      IF(EN <= (2.0*EIN(40):
)) GO TO 1250
      PEQIN(40,I)=PEQEL(2,(I-IOFFN(40)))
# 5D2     BEF SCALING
 1250 IF(EN <= EIN(41)) GO TO 2000
      QIN(41,I)=0.00127/(EIN(41)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(41)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(41)+E(3)) 
      QIN(41,I)=abs(QIN(41,I))  
      IF(EN <= (2.0*EIN(41):
)) GO TO 1260
      PEQIN(41,I)=PEQEL(2,(I-IOFFN(41)))
# 4S2     BEF SCALING
 1260 IF(EN <= EIN(42)) GO TO 2000
      QIN(42,I)=0.00165/(EIN(42)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(42)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(42)+E(3)) 
      QIN(42,I)=abs(QIN(42,I))  
      IF(EN <= (2.0*EIN(42):
)) GO TO 1270
      PEQIN(42,I)=PEQEL(2,(I-IOFFN(42)))
# 5S1#    BEF SCALING
 1270 IF(EN <= EIN(43)) GO TO 2000
      QIN(43,I)=0.00250/(EIN(43)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(43)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(43)+E(3))   
      QIN(43,I)=abs(QIN(43,I))
      IF(EN <= (2.0*EIN(43):
)) GO TO 1280
      PEQIN(43,I)=PEQEL(2,(I-IOFFN(43)))
# SUM HIGHER RESONANCE S STATES
 1280 IF(EN <= EIN(44)) GO TO 2000
      QIN(44,I)=0.00962/(EIN(44)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(44)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(44)+E(3))  
      QIN(44,I)=abs(QIN(44,I)) 
      IF(EN <= (2.0*EIN(44):
)) GO TO 1290
      PEQIN(44,I)=PEQEL(2,(I-IOFFN(44)))
# SUM HIGHER RESONANCE S STATES
 1290 IF(EN <= EIN(45)) GO TO 2000
      QIN(45,I)=0.01695/(EIN(45)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(45)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(45)+E(3))   
      QIN(45,I)=abs(QIN(45,I))
      IF(EN <= (2.0*EIN(45):
)) GO TO 2000
      PEQIN(45,I)=PEQEL(2,(I-IOFFN(45)))
# LOAD BREMSSTRAHLUNG X-SECTIONS
#      IF(EN < 1000.) GO TO 2000
#      DO 1300 J=2,NBREM
#      IF(EN <= EBRM(J)) GO TO 1310
#C 1300 CONTINUE
#      J=NBREM
# 1310 A=(math.log(Z10T(J))-math.log(Z10T(J-1)))/(EBRM(J)-EBRM(J-1))
#      B=(math.log(Z10T(J))*EBRM(J-1)-math.log(Z10T(J-1))*EBRM(J))/
#     /(EBRM(J-1)-EBRM(J))
#      QIN(46,I)=math.exp(A*EN+B)*1.D-24
 2000 CONTINUE 
      QINEL=0.0
      DO 8000 ILVL=1,NIN
 8000 QINEL=QINEL+QIN(ILVL,I)
#     Q(1,I)=QELA+QION(1,I)+QION(2,I)+QION(3,I)+QION(4,I)+QINEL+
#    /QIN(46,I)
      Q(1,I)=QELA+QION(1,I)+QION(2,I)+QION(3,I)+QION(4,I)+QINEL
# WRITE TOTAL, COUNTING IONISATION, INELASTIC AND ELASTIC X-SECTIONS
#     WRITE(6,8001) EN,Q(1,I),Q(5,I),QINEL,QELA
#8001 FORMAT(3X,' EN=',D12.4,' QTOT=',D12.4,' QION=',D12.4,' QINEL=',
#    /D12.4,' QELA=',D12.4)
 9000 CONTINUE
#  SAVE COMPUTING TIME
      DO 9001 K=1,NIN
      IF(EFINAL <= EIN(K):
) :
       NIN=K-1
       GO TO 9011
      # endIF
 9001 CONTINUE
 9011 CONTINUE
#      IF(EFINAL > 1000.) NIN=46
      RETURN                                                            
      # end
      def GAS6(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
#    /QNULL,NNULL,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,
#    /SCRPT)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(4000),EROOT(4000),QT1(4000),QT2(4000),
     /QT3(4000),QT4(4000)
      COMMON/DENS/DEN(4000)
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6) 
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30)
     /,EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]  
      DIMENSION XEN(162),YXSEC(162),XEL(151),YEL(151),
     /XEPS(186),YEPS(186),XION(65),YION(65),YINC(65),YIN1(65),XIN2(41),
     /YIN2(41),XIN3(35),YIN3(35),XIN4(32),YIN4(32),XKSH(74),YKSH(74),
     /XL1S(83),YL1S(83),XL2S(82),YL2S(82),XL3S(84),YL3S(84),
     /XM1S(91),YM1S(91),XM2S(98),YM2S(98),XM3S(99),YM3S(99),
     /XM4S(105),YM4S(105),XM5S(106),YM5S(106),
     /XEXC1(105),YEXC1(105),XEXC2(86),YEXC2(86),
     /X1S5(169),Y1S5(169),YP1S5(169),X1S4(130),Y1S4(130),YP1S4(130),
     /X1S3(168),Y1S3(168),YP1S3(168),X1S2(150),Y1S2(150),YP1S2(150),
     /X2P10(142),Y2P10(142),YP2P10(142),X2P9(117),Y2P9(117),YP2P9(117),
     /X2P8(120),Y2P8(120),YP2P8(120),X2P7(111),Y2P7(111),YP2P7(111),
     /X2P6(100),Y2P6(100),YP2P6(100),X2P5(102),Y2P5(102),YP2P5(102),
     /X3D6(69),Y3D6(69),YP3D6(69),X3D5(75),Y3D5(75),YP3D5(75),
     /X2P4(64),Y2P4(64),YP2P4(64),X3D3(74),Y3D3(74),YP3D3(74),
     /X3D4P(73),Y3D4P(73),YP3D4P(73),X2P3(73),Y2P3(73),YP2P3(73),
     /X2P2(75),Y2P2(75),YP2P2(75),X3D4(59),Y3D4(59),YP3D4(59),
     /X2P1(51),Y2P1(51),YP2P1(51),X3D1PP(48),Y3D1PP(48),YP3D1PP(48),
     /X3D1P(41),Y3D1P(41),YP3D1P(41),X2S5(44),Y2S5(44),YP2S5(44),
     /X3P10(20),Y3P10(20),YP3P10(20),X3P9(20),Y3P9(20),YP3P9(20),
     /X3P8(20),Y3P8(20),YP3P8(20),X3S1PP(20),Y3S1PP(20),YP3S1PP(20),
     /X3P7(20),Y3P7(20),YP3P7(20),X3P6(20),Y3P6(20),YP3P6(20),
     /X3S1PPPP(20),Y3S1PPPP(20),YP3S1PPPP(20),
     /X3S1PPP(20),Y3S1PPP(20),YP3S1PPP(20),X3P5(20),Y3P5(20),YP3P5(20),
     /X4D6(20),Y4D6(20),YP4D6(20),X4D4P(20),Y4D4P(20),YP4D4P(20),
     /X4D4(19),Y4D4(19),YP4D4(19),X4D3(19),Y4D3(19),YP4D3(19),
     /X2S3(19),Y2S3(19),YP2S3(19),X4D1PP(19),Y4D1PP(19),YP4D1PP(19),
     /X4D1P(19),Y4D1P(19),YP4D1P(19),X3S5(19),Y3S5(19),YP3S5(19),
     /X4FS(19),Y4FS(19),YP4FS(19),IOFFN(51),IOFFION(11)   
      DIMENSION Z36T(25),EBRM(25)
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME 
# ELASTIC MOMENTUM TRANSFER                                       
      DATA XEN/1.D-6,.001,.003,.005,.007,0.01,.015,0.02,0.03,0.04,      
     /0.05,0.06,0.07,0.08,0.09,0.10,0.12,0.14,0.17,0.20,                
     /0.25,0.30,0.35,0.40,0.45,0.50,0.52,0.54,0.56,0.60, 
     /0.70,0.80,0.90,1.00,1.20,1.40,1.75,2.00,2.50,3.00,               
     /3.30,3.60,4.00,4.40,4.80,5.20,5.60,6.00,6.50,7.00,      
     /7.50,8.00,8.50,9.00,10.0,11.0,12.0,13.0,14.0,15.0,
     /16.0,20.0,30.0,40.0,50.0,60.0,75.0,100.,150.,200.,
     /300.,400.,500.,700.,1000.,1250.,1500.,1750.,2000.,2500.,
     /3000.,3500.,4000.,4500.,5000.,6000.,7000.,8000.,9000.,1.0D4,
     /1.25D4,1.5D4,1.75D4,2.0D4,2.5D4,3.0D4,3.5D4,4.0D4,5.0D4,6.0D4,
     /8.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5D5,3.0D5,3.5D5,4.0D5,
     /4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,
     /2.0D6,2.5D6,3.0D6,3.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,
     /9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5D7,3.0D7,3.5D7,4.0D7,
     /4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,1.0D8,1.25D8,1.5D8,1.75D8,
     /2.0D8,2.5D8,3.0D8,3.5D8,4.0D8,4.5D8,5.0D8,6.0D8,7.0D8,8.0D8,
     /9.0D8,1.0D9/
# ELFORD UP TO 2.0 EV : FIT TO NAKAMURA DRIFT VELOCITY
      DATA YXSEC/37.4,33.1,30.0,27.9,26.2,24.2,21.6,19.5,16.3,13.9,     
     /12.1,10.6,9.30,8.27,7.29,6.55,5.27,4.30,3.18,2.37,                
     /1.47,.908,.548,.321,.184,.111,.0956,.0870,.0844,.0945,
     /.187,.339,.525,.729,1.15,1.63,2.60,3.38,4.75,6.35,                
     /7.32,8.28,9.51,10.7,11.9,13.2,14.3,15.3,16.6,17.7,      
     /18.6,19.0,18.9,18.7,18.1,17.1,15.7,14.2,12.7,11.1,
     /9.60,6.50,2.95,1.95,1.40,1.25,1.20,1.18,0.94,0.80,
     /0.64,0.54,0.48,0.41,.340,.270,.222,.183,.154,.113,
     /.0881,.0711,.0591,.0501,.0432,.033,.026,.0212,.0176,.0149,
     /.0104,.00778,.00605,.00486,.00336,.00248,.00192,.00153,.00105,
     /.000773,
     /4.76D-4,3.28D-4,2.26D-4,1.68D-4,1.30D-4,1.05D-4,7.35D-5,5.51D-5,
     /4.33D-5,3.53D-5,
     /2.94D-5,2.51D-5,1.90D-5,1.51D-5,1.23D-5,1.03D-5,8.81D-6,6.19D-6,
     /4.68D-6,3.69D-6,
     /2.99D-6,2.10D-6,1.57D-6,1.22D-6,9.76D-7,8.02D-7,6.71D-7,4.92D-7,
     /3.77D-7,2.99D-7,
     /2.43D-7,2.02D-7,1.35D-7,9.74D-8,7.36D-8,5.76D-8,3.81D-8,2.71D-8,
     /2.02D-8,1.57D-8,
     /1.25D-8,1.02D-8,7.13D-9,5.26D-9,4.03D-9,3.19D-9,2.58D-9,1.65D-9,
     /1.14D-9,8.40D-10,
     /6.43D-10,4.11D-10,2.85D-10,2.09D-10,1.60D-10,1.26D-10,1.02D-10,
     /7.10D-11,5.21D-11,3.99D-11,
     /3.15D-11,2.55D-11/
# ELASTIC   CONSISTENT WITHIN 1% OF TOTAL X-SECTION SUM
      DATA XEL/1.D-6,.001,.003,.005,.007,0.01,.015,0.02,0.03,0.04,
     /0.05,0.06,0.07,0.08,0.09,0.10,0.12,0.14,0.17,0.20,
     /0.25,0.30,0.35,0.40,0.45,0.50,0.55,0.60,0.65,0.70,
     /0.72,0.74,0.76,0.80,0.85,0.90,0.95,1.00,1.10,1.20,
     /1.30,1.40,1.50,1.75,2.00,2.25,2.50,3.00,3.50,4.00,
     /5.00,6.00,7.00,8.00,9.00,10.0,11.0,12.0,13.0,14.0,
     /15.0,16.0,18.0,20.0,22.5,25.0,27.5,30.0,35.0,40.0,
     /45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,
     /200.,250.,300.,400.,500.,600.,700.,800.,1000.,1200.,
     /1500.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,
     /6.0D3,7.0D3,8.0D3,1.0D4,1.25D4,1.5D4,1.75D4,2.0D4,2.5D4,3.0D4,
     /3.5D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,
     /2.5D5,3.0D5,3.5D5,4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,
     /1.0D6,1.25D6,1.5D6,1.75D6,2.0D6,2.5D6,3.0D6,3.5D6,4.0D6,4.5D6,
     /5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,
     /1.D9/
      DATA YEL/37.4,34.6,31.8,29.9,28.4,26.6,24.1,22.2,19.1,16.8,
     /14.9,13.4,12.1,11.0,10.0,9.15,7.71,6.56,5.21,4.38,
     /3.22,2.31,1.75,1.30,1.04,0.83,0.65,0.60,0.58,0.58,
     /0.59,0.60,0.62,0.66,0.73,0.81,0.90,0.98,1.17,1.41,
     /1.66,1.96,2.25,3.14,3.99,4.74,5.62,7.66,9.59,12.0,
     /16.0,20.1,23.0,25.9,27.2,28.1,28.2,28.2,27.5,26.6,
     /25.7,24.2,22.0,20.5,19.3,17.4,15.8,14.9,12.9,11.7,
     /10.8,9.88,8.85,8.00,7.12,6.44,5.84,5.08,4.38,4.15,
     /3.70,3.56,3.15,2.90,2.62,2.44,2.25,2.20,1.92,1.72,
     /1.61,1.41,1.40,1.28,1.13,1.06,.951,.895,.826,.798,
     /.744,.668,.617,.526,.450,.396,.354,.321,.272,.237,
# SMOOTH JOIN TO SALVAT BETWEEN E=10**5 AND 2*10**5 EV
     /.211,.191,.161,.141,.114,.0973,.0817,.0709,.0630,.0568,
     /.0504,.0461,.0430,.0408,.0390,.0376,.0356,.0342,.0332,.0324,
     /.0318,.0308,.0301,.0297,.0294,.0290,.0288,.0286,.0285,.0284,
     /.0284,.0283,.0283,.0283,.0282,.0282,.0282,.0282,.0282,.0282,
     /.0282/
# ELASTIC ANGULAR DISTRIBUTION (EPSILON)
      DATA XEPS/0.00,.001,.003,.005,.007,.010,.015,.020,.030,.040,
     /0.05,0.06,0.07,0.08,0.09,0.10,0.12,0.14,0.17,0.20,
     /0.25,0.30,0.35,0.40,0.45,0.50,0.52,0.54,0.55,0.56,
     /0.60,0.65,0.70,0.72,0.74,0.76,0.80,0.85,0.90,0.95,
     /1.00,1.10,1.20,1.30,1.40,1.50,1.75,2.00,2.25,2.50,
     /3.00,3.50,4.00,5.20,5.60,6.00,6.50,7.00,7.50,8.00,
     /9.00,10.0,11.0,12.0,13.0,14.0,15.0,16.0,18.0,20.0,
     /22.5,25.0,27.5,30.0,35.0,40.0,45.0,50.0,60.0,70.0,
     /75.0,80.0,90.0,100.,125.,150.,175.,200.,250.,300.,
     /400.,500.,600.,700.,800.,1000.,1200.,1250.,1500.,1750.,
     /1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,
     /7000.,8000.,9000.,1.0D4,1.25D4,1.5D4,1.75D4,2.0D4,2.5D4,3.0D4,
     /3.5D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,
     /2.5D5,3.0D5,3.5D5,4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,
     /1.0D6,1.25D6,1.5D6,1.75D6,2.0D6,2.5D6,3.0D6,3.5D6,4.0D6,4.5D6,
     /5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,
     /2.5D7,3.0D7,3.5D7,4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,
     /1.0D8,1.25D8,1.5D8,1.75D8,2.0D8,2.5D8,3.0D8,3.5D8,4.0D8,4.5D8,
     /5.0D8,6.0D8,7.0D8,8.0D8,9.0D8,1.0D9/
# ELASTIC ANGULAR DISTRIBUTION PARAMETER EPSILON
# EPSILON= 1.0-YEPS
      DATA YEPS/1.,.935,.9152,.8999,.8841,.8652,.8452,.8187,.7822,.7445,
     /.7225,.6926,.6611,.6378,.6066,.5887,.5459,.5096,.4533,.3720,
     /.2822,.2221,.1554,.1082,.0662,.0445,.0416,.0417,.0432,.0442,
     /.0561,.0948,.1626,.1941,.2313,.2662,.3416,.4243,.5002,.5662,
     /.6269,.6968,.7276,.7502,.7506,.7627,.7454,.7730,.7714,.7703, 
     /.7468,.7483,.6947,.6838,.6672,.6508,.6610,.6625,.6480,.6128,
     /.5511,.4952,.4485,.3897,.3447,.3034,.2581,.2253,.1925,.1585,
     /.1198,.1009,.0890,.0780,.0712,.0608,.0537,.0483,.0480,.0536,   
     /.0567,.0618,.0706,.0804,.0796,.0878,.0848,.0888,.0784,.0810,
     /.0713,.0697,.0695,.0691,.0694,.0663,.0578,.0560,.0481,.0407, 
     /.0394,.0346,.0244,.0213,.0177,.0157,.0139,.0126,.0110,.0090,  
     /.0086,.0074,.0065,.0058,.0045,.0037,.0031,.0027,.0023,.0017,
     /.0015,.00126,9.84D-4,8.03D-4,5.85D-4,4.56D-4,3.64D-4,3.04D-4,
     /2.60D-4,2.28D-4,
     /1.746D-4,1.395D-4,1.149D-4,9.68D-5,8.30D-5,7.22D-5,5.64D-5,
     /4.55D-5,3.76D-5,3.17D-5,
     /2.72D-5,1.91D-5,1.43D-5,1.12D-5,9.02D-6,6.21D-6,4.54D-6,3.47D-6,
     /2.74D-6,2.22D-6,
     /1.83D-6,1.31D-6,9.90D-7,7.67D-7,6.15D-7,5.03D-7,3.28D-7,2.31D-7,
     /1.71D-7,1.32D-7,
     /8.46D-8,5.88D-8,4.31D-8,3.29D-8,2.58D-8,2.08D-8,1.43D-8,1.03D-8,
     /7.80D-9,6.10D-9,
     /4.87D-9,3.04D-9,2.07D-9,1.49D-9,1.12D-9,7.0D-10,4.8D-10,3.5D-10,
     /2.6D-10,2.0D-10,
     /1.6D-10,1.1D-10,8.1D-11,6.1D-11,4.7D-11,3.8D-11/
# IONISATION ( VALUES ABOVE 1OKEV GENERATED BY BORN BETHE IN SUB)        
      DATA XION/13.9996,14.5,15.0,15.5,16.0,16.5,17.0,17.5,18.0,18.5,   
     /19.0,19.5,20.0,21.0,22.0,23.0,24.0,26.0,28.0,30.0,                
     /32.0,34.0,36.0,38.0,40.0,45.0,50.0,55.0,60.0,65.0,                
     /70.0,80.0,90.0,100.,120.,140.,160.,180.,200.,250.,                
     /300.,400.,500.,600.,700.,800.,900.,1000.,1200.,1400.,             
     /1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,
     /6000.,7000.,8000.,9000.,10000./                                   
# GROSS IONISATION
      DATA YION/0.00,.078,.160,.255,.360,.450,.552,.655,.766,.878,      
     /.980,1.09,1.20,1.34,1.53,1.63,1.84,2.19,2.43,2.66,                
     /2.86,3.02,3.15,3.27,3.37,3.55,3.73,3.86,3.96,4.06,                
     /4.09,4.15,4.13,4.09,3.97,3.79,3.63,3.47,3.34,3.02,                
     /2.76,2.37,2.07,1.86,1.69,1.53,1.42,1.31,1.15,1.03,                
     /.930,.854,.781,.667,.579,.510,.458,.415,.387,.356,
     /.332,.293,.264,.240,.219/
# COUNTING IONISATION 
      DATA YINC/0.00,.078,.160,.255,.360,.450,.552,.655,.766,.878,      
     /.980,1.09,1.20,1.34,1.53,1.63,1.84,2.19,2.43,2.66,                
     /2.86,3.02,3.15,3.27,3.37,3.53,3.64,3.72,3.77,3.83,                
     /3.83,3.84,3.81,3.76,3.62,3.46,3.31,3.17,3.05,2.75,                
     /2.50,2.12,1.84,1.65,1.49,1.34,1.25,1.14,.995,.886,                
     /.795,.726,.664,.567,.492,.434,.389,.353,.329,.303,
     /.282,.249,.224,.204,.186/
# IONISATION CHARGE STATE =1
      DATA YIN1/0.00,.078,.160,.255,.360,.450,.552,.655,.766,.878,      
     /.980,1.09,1.20,1.34,1.53,1.63,1.84,2.19,2.43,2.66,                
     /2.86,3.02,3.15,3.27,3.37,3.51,3.55,3.58,3.57,3.60,                
     /3.57,3.53,3.49,3.44,3.30,3.16,3.02,2.90,2.79,2.51,                
     /2.29,1.93,1.67,1.49,1.34,1.21,1.12,1.03,.896,.798,                
     /.716,.654,.598,.511,.443,.391,.350,.318,.296,.273,
     /.254,.224,.202,.184,.168/
# IONISATION CHARGE STATE =2
      DATA XIN2/38.35944,45.0,50.0,55.0,60.0,65.0,70.0,80.0,90.0,100.,
     /120.,140.,160.,180.,200.,250.,300.,400.,500.,600.,
     /700.,800.,900.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,
     /3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,
     /10000./                                   
      DATA YIN2/0.0,.0256,.0850,.141,.194,.233,.262,.307,.315,.318,
     /.311,.283,.265,.246,.230,.197,.173,.143,.120,.106,
     /.0958,.0850,.0790,.0699,.0610,.0543,.0487,.0445,.0407,.0348,
     /.0302,.0266,.0238,.0216,.0202,.0186,.0173,.0153,.0137,.0125,
     /.0114/
# IONISATION CHARGE STATE =3
      DATA XIN3/74.029,80.0,90.0,100.,120.,140.,160.,180.,200.,250.,    
     /300.,400.,500.,600.,700.,800.,900.,1000.,1200.,1400.,             
     /1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,
     /6000.,7000.,8000.,9000.,10000./                                   
      DATA YIN3/0.0,.001,.0036,.0071,.0168,.0216,.0258,.0287,.0303,
     /.0343,
     /.0364,.0390,.0393,.0383,.0382,.0360,.0351,.0332,.0290,.0258,     
     /.0231,.0211,.0193,.0165,.0143,.0126,.0113,.0103,.00957,.00882,
     /.00821,.00725,.00652,.00594,.00541/
# IONISATION CHARGE STATE =4
      DATA XIN4/124.88,140.,160.,180.,190.,200.,250.,300.,400.,500.,
     /600.,700.,800.,900.,1000.,1200.,1400.,1600.,1800.,2000.,
     /2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,
     /9000.,10000./                                   
      DATA YIN4/0.0,.000001,.0001,.0004,.00083,.00123,.00332,.00506,
     /.00835,.00938,
     /.0102,.0101,.00991,.00984,.00940,.00816,.00727,.00652,.00595,
     /.00544,
     /.00465,.00403,.00356,.00319,.00289,.00270,.00248,.00231,.00204,
     /.00184,.00167,.00153/
# K-SHELL IONISATION
      DATA XKSH/14327.26,14585.,15010.,15447.,15896.,16360.,16835.,
     /17325.,17830.,18349.,
     /18882.,19432.,2.00D4,2.06D4,2.18D4,2.31D4,2.45D4,2.59D4,2.74D4,
     /2.91D4,
     /3.08D4,3.26D4,3.55D4,3.87D4,4.22D4,4.60D4,5.02D4,5.47D4,6.13D4,
     /6.88D4,
     /7.72D4,8.66D4,1.00D5,1.15D5,1.33D5,1.54D5,1.78D5,2.05D5,2.37D5,
     /2.74D5,
     /3.16D5,3.76D5,4.47D5,5.31D5,7.08D5,8.17D5,1.00D6,1.22D6,1.45D6,
     /1.73D6,
     /2.00D6,2.51D6,3.07D6,4.00D6,5.01D6,6.13D6,8.18D6,1.00D7,1.45D7,
     /2.05D7,
     /2.99D7,4.10D7,5.01D7,6.13D7,8.18D7,1.00D8,1.45D8,2.05D8,2.99D8,
     /4.10D8,
     /5.01D8,6.13D8,8.18D8,1.00D9/
      DATA YKSH/0.0,6.61D-8,1.68D-7,2.66D-7,3.58D-7,4.46D-7,5.30D-7,
     /6.10D-7,6.86D-7,7.57D-7,
     /8.26D-7,8.91D-7,9.52D-7,1.01D-6,1.12D-6,1.21D-6,1.30D-6,1.37D-6,
     /1.44D-6,1.50D-6,
     /1.55D-6,1.59D-6,1.64D-6,1.68D-6,1.71D-6,1.72D-6,1.73D-6,1.72D-6,
     /1.70D-6,1.67D-6,
     /1.64D-6,1.60D-6,1.54D-6,1.47D-6,1.41D-6,1.35D-6,1.29D-6,1.24D-6,
     /1.19D-6,1.15D-6,
     /1.11D-6,1.08D-6,1.05D-6,1.03D-6,1.02D-6,1.02D-6,1.03D-6,1.04D-6,
     /1.06D-6,1.09D-6,
     /1.11D-6,1.16D-6,1.20D-6,1.25D-6,1.31D-6,1.36D-6,1.43D-6,1.48D-6,
     /1.58D-6,1.68D-6,
     /1.78D-6,1.87D-6,1.92D-6,1.98D-6,2.06D-6,2.11D-6,2.22D-6,2.31D-6,
     /2.41D-6,2.50D-6,
     /2.56D-6,2.61D-6,2.69D-6,2.75D-6/
# L1-SHELL IONISATION
      DATA XL1S/1921.0,1956.6,2013.2,2071.4,2131.4,2193.,2256.,2322.,
     /2389.,2458.,
     /2530.,2680.,2837.,3004.,3181.,3369.,3567.,3777.,4000.,4236.,
     /4616.,5031.,5483.,5976.,6513.,7098.,7737.,8433.,9192.,1.00D4,
     /1.15D4,1.33D4,1.54D4,1.78D4,2.05D4,2.44D4,2.90D4,3.45D4,4.10D4,
     /5.01D4,
     /6.13D4,7.50D4,8.91D4,1.00D5,1.22D5,1.50D5,1.83D5,2.24D5,2.82D5,
     /3.55D5,
     /4.47D5,5.79D5,7.50D5,1.00D6,1.22D6,1.45D6,1.73D6,2.00D6,2.51D6,
     /3.07D6,
     /4.00D6,5.01D6,6.13D6,8.18D6,1.00D7,1.50D7,2.05D7,2.51D7,3.07D7,
     /4.10D7,
     /5.16D7,6.13D7,8.18D7,1.00D8,1.50D8,2.05D8,2.51D8,3.07D8,4.10D8,
     /5.16D8,
     /6.13D8,8.18D8,1.00D9/
      DATA YL1S/0.0,3.47D-6,8.56D-6,1.34D-5,1.80D-5,2.23D-5,2.65D-5,
     /3.04D-5,3.41D-5,3.76D-5,
     /4.10D-5,4.71D-5,5.27D-5,5.76D-5,6.19D-5,6.58D-5,6.91D-5,7.20D-5,
     /7.44D-5,7.65D-5,
     /7.88D-5,8.04D-5,8.12D-5,8.15D-5,8.11D-5,8.03D-5,7.90D-5,7.74D-5,
     /7.55D-5,7.33D-5,
     /6.93D-5,6.49D-5,6.04D-5,5.59D-5,5.14D-5,4.64D-5,4.17D-5,3.74D-5,
     /3.35D-5,2.94D-5,
     /2.59D-5,2.28D-5,2.05D-5,1.91D-5,1.70D-5,1.52D-5,1.38D-5,1.26D-5,
     /1.14D-5,1.06D-5,
     /9.97D-6,9.49D-6,9.21D-6,9.08D-6,9.10D-6,9.16D-6,9.27D-6,9.39D-6,
     /9.62D-6,9.86D-6,
     /1.02D-5,1.05D-5,1.09D-5,1.13D-5,1.17D-5,1.24D-5,1.29D-5,1.33D-5,
     /1.36D-5,1.42D-5,
     /1.46D-5,1.49D-5,1.54D-5,1.58D-5,1.65D-5,1.71D-5,1.74D-5,1.78D-5,
     /1.83D-5,1.88D-5,
     /1.91D-5,1.96D-5,2.00D-5/
# L2-SHELL IONISATION
      DATA XL2S/1730.9,1780.7,1832.6,1886.,1941.,1998.,2056.,2116.,
     /2178.,2241.,
     /2306.,2373.,2443.,2514.,2663.,2820.,2987.,3164.,3352.,3550.,
     /3870.,4219.,4734.,5311.,5959.,6685.,7500.,8660.,1.00D4,1.15D4,
     /1.33D4,1.54D4,1.78D4,2.05D4,2.44D4,2.90D4,3.45D4,4.10D4,5.01D4,
     /6.13D4,
     /7.50D4,8.91D4,1.00D5,1.22D5,1.50D5,1.83D5,2.24D5,2.82D5,3.55D5,
     /4.47D5,
     /5.79D5,7.50D5,1.00D6,1.22D6,1.45D6,1.73D6,2.00D6,2.51D6,3.07D6,
     /4.00D6,
     /5.01D6,6.13D6,8.18D6,1.00D7,1.45D7,2.05D7,2.51D7,3.07D7,4.10D7,
     /5.01D7,
     /6.13D7,8.18D7,1.00D8,1.45D8,2.05D8,2.51D8,3.07D8,4.10D8,5.01D8,
     /6.13D8,
     /8.18D8,1.00D9/
      DATA YL2S/0.0,9.21D-6,1.81D-5,2.65D-5,3.45D-5,4.20D-5,4.92D-5,
     /5.59D-5,6.22D-5,6.81D-5,
     /7.36D-5,7.88D-5,8.37D-5,8.82D-5,9.63D-5,1.03D-4,1.09D-4,1.14D-4,
     /1.18D-4,1.22D-4,
     /1.26D-4,1.28D-4,1.30D-4,1.30D-4,1.29D-4,1.26D-4,1.23D-4,1.17D-4,
     /1.11D-4,1.04D-4,
     /9.74D-5,9.04D-5,8.35D-5,7.69D-5,6.95D-5,6.27D-5,5.64D-5,5.06D-5,
     /4.46D-5,3.93D-5,
     /3.47D-5,3.12D-5,2.92D-5,2.60D-5,2.33D-5,2.11D-5,1.93D-5,1.77D-5,
     /1.64D-5,1.55D-5,
     /1.48D-5,1.44D-5,1.42D-5,1.43D-5,1.44D-5,1.46D-5,1.48D-5,1.52D-5,
     /1.57D-5,1.63D-5,
     /1.69D-5,1.74D-5,1.82D-5,1.88D-5,1.99D-5,2.09D-5,2.15D-5,2.21D-5,
     /2.30D-5,2.36D-5,
     /2.43D-5,2.51D-5,2.58D-5,2.69D-5,2.80D-5,2.86D-5,2.92D-5,3.01D-5,
     /3.08D-5,3.14D-5,
     /3.23D-5,3.29D-5/
# L3-SHELL IONISATION
      DATA XL3S/1678.4,1684.5,1733.6,1784.,1836.,1889.,1944.,2001.,
     /2059.,2119.,
     /2181.,2244.,2310.,2377.,2447.,2518.,2667.,2824.,2991.,3168.,
     /3356.,3554.,3874.,4223.,4738.,5315.,5963.,6689.,7506.,8666.,
     /1.00D4,1.15D4,1.33D4,1.54D4,1.78D4,2.05D4,2.44D4,2.90D4,3.45D4,
     /4.10D4,
     /5.01D4,6.13D4,7.50D4,8.91D4,1.00D5,1.22D5,1.50D5,1.83D5,2.24D5,
     /2.82D5,
     /3.55D5,4.47D5,5.79D5,7.50D5,1.00D6,1.22D6,1.45D6,1.73D6,2.00D6,
     /2.51D6,
     /3.07D6,4.00D6,5.01D6,6.13D6,8.18D6,1.00D7,1.50D7,2.05D7,2.51D7,
     /3.07D7,
     /4.10D7,5.16D7,6.31D7,8.18D7,1.00D8,1.50D8,2.05D8,2.51D8,3.07D8,
     /4.10D8,
     /5.16D8,6.31D8,8.18D8,1.00D9/
      DATA YL3S/0.0,2.31D-6,2.23D-5,4.13D-5,5.91D-5,7.64D-5,9.25D-5,
     /1.08D-4,1.22D-4,1.36D-4,
     /1.48D-4,1.60D-4,1.71D-4,1.82D-4,1.91D-4,2.00D-4,2.16D-4,2.30D-4,
     /2.42D-4,2.52D-4,
     /2.60D-4,2.66D-4,2.73D-4,2.78D-4,2.80D-4,2.79D-4,2.75D-4,2.69D-4,
     /2.61D-4,2.49D-4,
     /2.35D-4,2.21D-4,2.06D-4,1.91D-4,1.76D-4,1.62D-4,1.46D-4,1.32D-4,
     /1.18D-4,1.06D-4,
     /9.34D-5,8.22D-5,7.25D-5,6.53D-5,6.10D-5,5.43D-5,4.88D-5,4.41D-5,
     /4.03D-5,3.69D-5,
     /3.42D-5,3.22D-5,3.08D-5,2.99D-5,2.96D-5,2.97D-5,3.00D-5,3.04D-5,
     /3.08D-5,3.17D-5,
     /3.25D-5,3.38D-5,3.50D-5,3.61D-5,3.77D-5,3.89D-5,4.13D-5,4.33D-5,
     /4.46D-5,4.58D-5,
     /4.77D-5,4.91D-5,5.04D-5,5.21D-5,5.34D-5,5.59D-5,5.80D-5,5.93D-5,
     /6.06D-5,6.24D-5,
     /6.39D-5,6.52D-5,6.68D-5,6.81D-5/
# M1-SHELL IONISATION
      DATA XM1S/292.8,295.7,303.9,312.4,321.1,330.1,339.3,348.8,358.6,
     /368.7,
     /389.7,412.0,435.5,460.5,487.0,515.0,544.7,576.1,609.5,644.8,
     /682.0,742.0,808.0,880.0,1014.,1164.,1344.,1554.,1794.,2064.,
     /2454.,2914.,3464.,4234.,5174.,6324.,7514.,8674.,1.00D4,1.22D4,
     /1.50D4,1.88D4,2.37D4,2.99D4,3.87D4,4.87D4,5.96D4,7.08D4,8.66D4,
     /1.00D5,
     /1.22D5,1.50D5,1.88D5,2.37D5,2.99D5,3.87D5,4.87D5,5.96D5,7.08D5,
     /8.66D5,
     /1.00D6,1.22D6,1.50D6,1.88D6,2.37D6,2.99D6,3.87D6,4.87D6,5.96D6,
     /7.08D6,
     /8.66D6,1.00D7,1.22D7,1.63D7,2.05D7,2.51D7,3.07D7,4.10D7,5.16D7,
     /6.31D7,
     /8.66D7,1.00D8,1.50D8,2.05D8,2.51D8,3.07D8,4.10D8,5.16D8,6.31D8,
     /8.66D8,
     /1.00D9/
      DATA YM1S/0.0,3.29D-5,1.10D-4,1.89D-4,2.72D-4,3.57D-4,4.44D-4,
     /5.32D-4,6.20D-4,7.09D-4,
     /8.86D-4,1.06D-3,1.23D-3,1.39D-3,1.54D-3,1.67D-3,1.80D-3,1.91D-3,
     /2.02D-3,2.10D-3,
     /2.18D-3,2.27D-3,2.33D-3,2.37D-3,2.38D-3,2.35D-3,2.27D-3,2.17D-3,
     /2.04D-3,1.91D-3,
     /1.75D-3,1.58D-3,1.42D-3,1.25D-3,1.09D-3,9.49D-4,8.38D-4,7.53D-4,
     /6.77D-4,5.80D-4,
     /4.96D-4,4.15D-4,3.46D-4,2.89D-4,2.37D-4,1.99D-4,1.71D-4,1.51D-4,
     /1.31D-4,1.19D-4,
     /1.05D-4,9.27D-5,8.16D-5,7.29D-5,6.60D-5,6.02D-5,5.65D-5,5.41D-5,
     /5.26D-5,5.15D-5,
     /5.09D-5,5.06D-5,5.07D-5,5.11D-5,5.19D-5,5.29D-5,5.43D-5,5.57D-5,
     /5.70D-5,5.82D-5,
     /5.96D-5,6.07D-5,6.22D-5,6.43D-5,6.61D-5,6.76D-5,6.92D-5,7.14D-5,
     /7.32D-5,7.48D-5,
     /7.72D-5,7.84D-5,8.15D-5,8.40D-5,8.56D-5,8.72D-5,8.95D-5,9.13D-5,
     /9.29D-5,9.54D-5,
     /9.65D-5/
# M2-SHELL IONISATION
      DATA XM2S/222.2,224.1,230.5,237.0,243.7,250.7,257.8,265.1,272.7,
     /280.5,
     /288.4,305.1,322.8,341.6,361.4,382.4,404.7,428.3,453.3,479.8,
     /508.0,553.0,602.0,656.0,715.0,778.0,848.0,924.0,1007.,1157.,
     /1337.,1547.,1787.,2057.,2377.,2747.,3167.,3767.,4607.,5627.,
     /6687.,7727.,8667.,1.00D4,1.22D4,1.50D4,1.83D4,2.37D4,2.90D4,
     /3.76D4,
     /5.01D4,6.49D4,7.72D4,8.66D4,1.00D5,1.22D5,1.50D5,1.78D5,2.05D5,
     /2.37D5,
     /2.74D5,3.25D5,3.98D5,4.87D5,5.96D5,7.29D5,8.66D5,1.00D6,1.22D6,
     /1.50D6,
     /2.05D6,2.99D6,3.87D6,4.87D6,5.96D6,7.08D6,8.66D6,1.00D7,1.22D7,
     /1.50D7,
     /2.05D7,2.99D7,3.87D7,4.87D7,5.96D7,7.08D7,8.66D7,1.00D8,1.22D8,
     /1.50D8,
     /2.05D8,2.99D8,3.87D8,4.87D8,5.96D8,7.08D8,8.66D8,1.00D9/
      DATA YM2S/0.0,4.89D-5,1.82D-4,3.18D-4,4.56D-4,5.95D-4,7.35D-4,
     /8.75D-4,1.01D-3,1.15D-3,
     /1.29D-3,1.56D-3,1.82D-3,2.07D-3,2.31D-3,2.53D-3,2.74D-3,2.93D-3,
     /3.11D-3,3.27D-3,
     /3.41D-3,3.59D-3,3.74D-3,3.84D-3,3.92D-3,3.96D-3,3.97D-3,3.96D-3,
     /3.92D-3,3.81D-3,
     /3.65D-3,3.46D-3,3.25D-3,3.02D-3,2.80D-3,2.57D-3,2.35D-3,2.10D-3,
     /1.83D-3,1.58D-3,
     /1.39D-3,1.25D-3,1.14D-3,1.02D-3,8.74D-4,7.46D-4,6.36D-4,5.18D-4,
     /4.42D-4,3.61D-4,
     /2.90D-4,2.39D-4,2.12D-4,1.95D-4,1.77D-4,1.56D-4,1.38D-4,1.25D-4,
     /1.16D-4,1.08D-4,
     /1.02D-4,9.52D-5,8.89D-5,8.42D-5,8.06D-5,7.82D-5,7.68D-5,7.60D-5,
     /7.56D-5,7.57D-5,
     /7.68D-5,7.91D-5,8.13D-5,8.34D-5,8.54D-5,8.72D-5,8.94D-5,9.10D-5,
     /9.32D-5,9.55D-5,
     /9.91D-5,1.04D-4,1.07D-4,1.09D-4,1.12D-4,1.14D-4,1.16D-4,1.18D-4,
     /1.20D-4,1.23D-4,
     /1.26D-4,1.31D-4,1.34D-4,1.37D-4,1.39D-4,1.41D-4,1.44D-4,1.45D-4/
# M3-SHELL IONISATION
      DATA XM3S/214.4,218.8,225.0,231.3,237.9,244.6,251.5,258.6,266.0,
     /273.5,
     /281.3,289.3,306.0,323.7,342.4,362.3,383.3,405.6,429.2,454.2,
     /481.0,509.0,554.0,603.0,657.0,715.0,779.0,849.0,925.0,1007.,
     /1157.,1337.,1547.,1787.,2057.,2377.,2747.,3167.,3767.,4607.,
     /5627.,6687.,7727.,8667.,1.00D4,1.22D4,1.50D4,1.83D4,2.37D4,2.90D4,
     /3.76D4,5.01D4,6.49D4,7.72D4,8.66D4,1.00D5,1.22D5,1.50D5,1.78D5,
     /2.05D5,
     /2.37D5,2.74D5,3.25D5,3.98D5,4.87D5,5.96D5,7.29D5,8.66D5,1.00D6,
     /1.22D6,
     /1.50D6,2.05D6,2.99D6,3.87D6,4.87D6,5.96D6,7.08D6,8.66D6,1.00D7,
     /1.22D7,
     /1.50D7,2.05D7,2.99D7,3.87D7,4.87D7,5.96D7,7.08D7,8.66D7,1.00D8,
     /1.22D8,
     /1.50D8,2.05D8,2.99D8,3.87D8,4.87D8,5.96D8,7.08D8,8.66D8,1.00D9/
      DATA YM3S/0.0,2.05D-4,4.91D-4,7.83D-4,1.08D-3,1.38D-3,1.68D-3,
     /1.98D-3,2.28D-3,2.58D-3,
     /2.87D-3,3.17D-3,3.74D-3,4.29D-3,4.81D-3,5.31D-3,5.78D-3,6.21D-3,
     /6.61D-3,6.98D-3,
     /7.31D-3,7.60D-3,7.97D-3,8.27D-3,8.48D-3,8.62D-3,8.70D-3,8.71D-3,
     /8.66D-3,8.56D-3,
     /8.30D-3,7.94D-3,7.51D-3,7.04D-3,6.55D-3,6.04D-3,5.55D-3,5.08D-3,
     /4.53D-3,3.94D-3,
     /3.40D-3,3.00D-3,2.69D-3,2.46D-3,2.20D-3,1.88D-3,1.61D-3,1.37D-3,
     /1.12D-3,9.53D-4,
     /7.79D-4,6.26D-4,5.17D-4,4.57D-4,4.22D-4,3.83D-4,3.37D-4,2.98D-4,
     /2.71D-4,2.52D-4,
     /2.35D-4,2.20D-4,2.06D-4,1.93D-4,1.82D-4,1.75D-4,1.69D-4,1.66D-4,
     /1.65D-4,1.64D-4,
     /1.64D-4,1.67D-4,1.72D-4,1.77D-4,1.81D-4,1.86D-4,1.90D-4,1.95D-4,
     /1.98D-4,2.03D-4,
     /2.08D-4,2.16D-4,2.26D-4,2.32D-4,2.38D-4,2.44D-4,2.48D-4,2.54D-4,
     /2.57D-4,2.63D-4,
     /2.68D-4,2.76D-4,2.86D-4,2.93D-4,2.99D-4,3.04D-4,3.09D-4,3.14D-4,
     /3.18D-4/
# M4-SHELL IONISATION
      DATA XM4S/95.0,96.83,99.67,102.6,105.6,108.7,111.9,115.2,118.5,
     /122.0,
     /125.6,133.0,141.0,149.3,158.2,167.5,177.5,188.0,199.2,211.0,
     /223.5,243.7,265.7,289.8,315.9,344.4,375.5,409.4,446.4,486.7,
     /546.1,612.8,687.6,771.5,866.0,1000.,1150.,1330.,1540.,1780.,
     /2050.,2370.,2740.,3160.,3760.,4600.,5620.,6680.,7720.,8660.,
     /1.00D4,1.22D4,1.50D4,1.83D4,2.37D4,2.90D4,3.76D4,5.01D4,6.49D4,
     /7.72D4,
     /8.66D4,1.00D5,1.22D5,1.50D5,1.78D5,2.05D5,2.37D5,2.74D5,3.25D5,
     /3.98D5,
     /4.87D5,5.96D5,7.29D5,8.66D5,1.00D6,1.22D6,1.50D6,2.05D6,2.99D6,
     /3.87D6,
     /4.87D6,5.96D6,7.08D6,8.66D6,1.00D7,1.22D7,1.50D7,2.05D7,2.99D7,
     /3.87D7,
     /4.87D7,5.96D7,7.08D7,8.66D7,1.00D8,1.22D8,1.50D8,2.05D8,2.99D8,
     /3.87D8,
     /4.87D8,5.96D8,7.08D8,8.66D8,1.00D9/
      DATA YM4S/0.0,1.08D-3,2.62D-3,4.04D-3,5.37D-3,6.62D-3,7.79D-3,
     /8.90D-3,9.96D-3,1.10D-2,
     /1.20D-2,1.38D-2,1.56D-2,1.73D-2,1.90D-2,2.06D-2,2.22D-2,2.37D-2,
     /2.52D-2,2.67D-2,
     /2.80D-2,3.00D-2,3.18D-2,3.34D-2,3.47D-2,3.58D-2,3.66D-2,3.72D-2,
     /3.76D-2,3.77D-2,
     /3.74D-2,3.69D-2,3.60D-2,3.48D-2,3.35D-2,3.17D-2,2.98D-2,2.78D-2,
     /2.58D-2,2.39D-2,
     /2.20D-2,2.02D-2,1.85D-2,1.68D-2,1.49D-2,1.30D-2,1.12D-2,9.90D-3,
     /8.90D-3,8.16D-3,
     /7.32D-3,6.28D-3,5.38D-3,4.60D-3,3.77D-3,3.23D-3,2.66D-3,2.15D-3,
     /1.79D-3,1.58D-3,
     /1.47D-3,1.33D-3,1.18D-3,1.05D-3,9.54D-4,8.87D-4,8.30D-4,7.82D-4,
     /7.33D-4,6.88D-4,
     /6.54D-4,6.29D-4,6.12D-4,6.03D-4,5.99D-4,5.99D-4,6.02D-4,6.15D-4,
     /6.39D-4,6.60D-4,
     /6.81D-4,6.99D-4,7.16D-4,7.37D-4,7.52D-4,7.73D-4,7.94D-4,8.28D-4,
     /8.69D-4,8.98D-4,
     /9.24D-4,9.46D-4,9.65D-4,9.88D-4,1.00D-3,1.03D-3,1.05D-3,1.08D-3,
     /1.13D-3,1.16D-3,
     /1.18D-3,1.20D-3,1.22D-3,1.25D-3,1.26D-3/
# M5-SHELL IONISATION
      DATA XM5S/93.8,94.3,97.0,99.9,102.8,105.8,108.9,112.1,115.3,118.7,
     /122.2,125.8,133.2,141.1,149.5,158.4,167.8,177.7,188.2,199.4,
     /211.2,223.7,243.9,266.0,290.0,316.0,345.0,376.0,410.0,446.0,
     /487.0,546.0,613.0,688.0,772.0,866.0,1000.,1150.,1330.,1540.,
     /1780.,2050.,2370.,2740.,3160.,3760.,4600.,5620.,6680.,7720.,
     /8660.,1.00D4,1.22D4,1.50D4,1.83D4,2.37D4,2.90D4,3.76D4,5.01D4,
     /6.49D4,
     /7.72D4,8.66D4,1.00D5,1.22D5,1.50D5,1.78D5,2.05D5,2.37D5,2.74D5,
     /3.25D5,
     /3.98D5,4.87D5,5.96D5,7.29D5,8.66D5,1.00D6,1.22D6,1.50D6,2.05D6,
     /2.99D6,
     /3.87D6,4.87D6,5.96D6,7.08D6,8.66D6,1.00D7,1.22D7,1.50D7,2.05D7,
     /2.99D7,
     /3.87D7,4.87D7,5.96D7,7.08D7,8.66D7,1.00D8,1.22D8,1.50D8,2.05D8,
     /2.99D8,
     /3.87D8,4.87D8,5.96D8,7.08D8,8.66D8,1.00D9/
      DATA YM5S/0.0,4.52D-4,2.91D-3,5.18D-3,7.29D-3,9.26D-3,1.11D-2,
     /1.29D-2,1.45D-2,1.61D-2,
     /1.76D-2,1.91D-2,2.19D-2,2.46D-2,2.72D-2,2.97D-2,3.22D-2,3.46D-2,
     /3.69D-2,3.92D-2,
     /4.14D-2,4.35D-2,4.65D-2,4.92D-2,5.15D-2,5.35D-2,5.52D-2,5.64D-2,
     /5.73D-2,5.77D-2,
     /5.78D-2,5.74D-2,5.65D-2,5.51D-2,5.33D-2,5.13D-2,4.85D-2,4.55D-2,
     /4.25D-2,3.95D-2,
     /3.66D-2,3.37D-2,3.08D-2,2.82D-2,2.56D-2,2.28D-2,1.98D-2,1.71D-2,
     /1.51D-2,1.36D-2,
     /1.24D-2,1.11D-2,9.56D-3,8.19D-3,7.01D-3,5.74D-3,4.92D-3,4.05D-3,
     /3.27D-3,2.72D-3,
     /2.41D-3,2.23D-3,2.03D-3,1.79D-3,1.59D-3,1.45D-3,1.35D-3,1.26D-3,
     /1.19D-3,1.11D-3,
     /1.05D-3,9.94D-4,9.56D-4,9.31D-4,9.18D-4,9.12D-4,9.10D-4,9.16D-4,
     /9.36D-4,9.72D-4,
     /1.00D-3,1.03D-3,1.06D-3,1.09D-3,1.12D-3,1.14D-3,1.17D-3,1.21D-3,
     /1.26D-3,1.32D-3,
     /1.37D-3,1.40D-3,1.44D-3,1.47D-3,1.50D-3,1.53D-3,1.56D-3,1.59D-3,
     /1.65D-3,1.71D-3,
     /1.76D-3,1.80D-3,1.83D-3,1.86D-3,1.89D-3,1.92D-3/
# 1S5  METASTABLE   E=9.91523166 EV  J=2
#      SHAPE def BELOW 50 EV FROM BARTSCHAT AND ZATSARINNY
#      ABOVE 50 EV SCALED BY 1/E**3
      DATA X1S5/9.9152,9.932,9.959,9.973,9.987,10.000,10.027,10.034,
     /10.041,10.048,
     /10.055,10.068,10.082,10.095,10.109,10.123,10.136,10.150,10.163,
     /10.177,
     /10.184,10.191,10.204,10.218,10.231,10.245,10.259,10.313,10.367,
     /10.422,
     /10.476,10.531,10.585,10.612,10.640,10.646,10.653,10.667,10.680,
     /10.694,
     /10.708,10.816,10.925,11.034,11.089,11.143,11.197,11.225,11.252,
     /11.263,
     /11.265,11.268,11.271,11.272,11.274,11.275,11.276,11.279,11.282,
     /11.284,
     /11.287,11.293,11.295,11.298,11.301,11.306,11.309,11.313,11.320,
     /11.327,
     /11.334,11.340,11.347,11.354,11.361,11.367,11.374,11.381,11.388,
     /11.395,
     /11.402,11.415,11.429,11.442,11.456,11.470,11.483,11.497,11.510,
     /11.524,
     /11.538,11.551,11.565,11.578,11.592,11.606,11.619,11.626,11.633,
     /11.640,
     /11.644,11.646,11.649,11.653,11.660,11.665,11.674,11.701,11.755,
     /11.796,
     /11.851,11.905,11.959,11.973,11.976,11.980,11.984,11.986,11.989,
     /11.993,
     /12.000,12.007,12.014,12.017,12.021,12.027,12.041,12.068,12.095,
     /12.150,
     /12.204,12.259,12.304,12.367,12.422,12.476,12.531,12.585,12.640,
     /12.694,
     /12.748,12.803,12.871,12.925,12.993,13.075,13.197,13.334,13.470,
     /13.578,
     /13.742,14.014,14.558,15.102,15.646,16.191,16.735,17.279,17.959,
     /19.048,
     /20.0,21.0,22.0,24.0,27.0,30.0,35.0,40.0,50.0/
      DATA Y1S5/0.00,1.10,2.18,2.87,3.63,4.38,5.69,6.09,6.58,4.84,
     /3.88,3.18,2.69,2.46,2.40,2.44,2.62,3.01,4.01,6.71,
     /7.86,6.60,3.55,2.67,2.42,2.35,2.35,2.54,2.84,3.19,
     /3.58,4.02,4.42,4.70,5.05,5.19,5.39,5.33,5.29,5.42,
     /5.54,6.42,7.20,7.63,7.68,7.57,7.21,6.83,6.10,5.64,
     /5.66,6.12,7.67,8.69,9.58,9.36,9.07,8.29,7.66,7.20,
     /6.87,6.53,6.64,7.25,8.85,9.99,8.47,7.04,5.99,5.69,
     /5.16,5.23,5.49,6.00,6.85,8.06,9.28,9.92,9.98,9.87,
     /9.62,8.49,7.26,6.26,5.51,4.81,4.19,3.61,3.03,2.59,
     /2.39,3.10,3.69,3.90,3.97,3.97,3.95,4.03,4.40,5.31,
     /5.79,5.91,5.89,5.71,5.34,5.01,4.83,4.93,5.11,5.21,
     /5.28,5.30,5.04,4.80,4.81,5.16,5.83,5.86,5.72,5.48,
     /5.13,4.97,5.85,6.50,7.12,7.16,6.71,6.28,5.89,5.52,
     /5.65,5.63,5.67,5.41,5.29,5.41,5.60,5.77,5.95,6.00,
     /5.83,5.56,5.55,5.74,5.91,5.94,5.99,6.06,6.11,6.16,
     /6.14,6.01,5.80,6.07,6.73,7.37,7.84,8.23,8.57,8.64,
     /8.20,7.60,7.00,6.04,4.70,3.60,2.30,1.45,0.70/
      DATA YP1S5/169*0.0/
# 1S4  E=10.032400 EV  J=1    RESONANCE RADIATION  123.585 NM 
#     USED  BEF SCALING ABOVE  20 EV    OSC STRENGTH=0.203 
#     SHAPE def BELOW 20 EV FROM BARTSCHAT AND ZATSARINNY
      DATA X1S4/10.0324,10.034,10.041,10.048,10.055,10.068,10.082,
     /10.095,10.109,10.123,
     /10.136,10.150,10.163,10.204,10.218,10.231,10.245,10.259,10.286,
     /10.354,
     /10.422,10.490,10.558,10.626,10.680,10.748,10.816,10.884,10.953,
     /11.021,
     /11.089,11.157,11.238,11.252,11.265,11.271,11.274,11.276,11.282,
     /11.287,
     /11.295,11.301,11.306,11.309,11.313,11.320,11.334,11.347,11.361,
     /11.374,
     /11.381,11.388,11.395,11.402,11.415,11.429,11.442,11.456,11.483,
     /11.510, 
     /11.538,11.565,11.592,11.619,11.633,11.644,11.649,11.660,11.674,
     /11.701,
     /11.728,11.755,11.776,11.796,11.823,11.851,11.878,11.905,11.932,
     /11.959,
     /11.976,11.984,11.989,12.000,12.014,12.021,12.041,12.068,12.095,
     /12.191,
     /12.245,12.300,12.354,12.408,12.463,12.517,12.572,12.626,12.680,
     /12.735,
     /12.803,12.871,12.925,12.966,13.061,13.157,13.225,13.279,13.347,
     /13.402,
     /13.497,13.606,13.878,14.150,14.422,14.694,14.966,15.238,15.510,
     /15.783,
     /16.055,16.327,16.599,16.871,17.143,17.415,17.687,17.959,19.048,
     /20.000/
      DATA Y1S4/0.00,0.69,2.81,5.49,8.19,6.82,5.53,5.15,5.23,5.74,
     /6.94,9.75,17.4,17.8,9.03,5.97,4.62,3.93,3.42,2.97,
     /3.07,3.35,3.74,4.37,4.81,5.24,5.75,6.37,6.89,7.33,
     /7.66,7.83,7.61,7.46,7.20,7.79,8.62,8.45,8.03,7.78,
     /7.78,8.89,9.48,8.73,8.03,7.38,7.09,7.08,7.79,9.35,
     /9.77,9.75,9.60,9.37,8.58,7.64,6.70,6.56,6.73,6.48,
     /6.23,7.15,7.57,7.95,8.35,8.28,8.02,7.80,7.88,8.06,
     /8.16,8.25,8.31,8.36,8.43,8.49,8.55,8.59,8.62,8.60,
     /9.09,9.57,9.09,8.89,10.0,10.2,9.21,8.96,8.70,9.02,
     /9.25,9.71,9.84,9.76,9.75,9.90,10.1,10.3,10.4,10.8,
     /10.6,10.8,10.8,10.8,10.7,11.0,11.2,11.4,11.5,11.6,
     /11.6,11.8,11.7,11.5,11.4,11.6,12.0,12.5,13.1,13.8,
     /14.5,15.2,15.8,16.4,17.0,17.9,18.9,20.1,22.4,23.7/
      DATA YP1S4/130*0.0/
# 1S3  METASTABLE E=10.56241436 EV J=0 
#      SHAPE def BELOW  50 EV FROM BARTSCHAT AND ZATSARINNY
#      SCALED BY 1/E**3 ABOVE 50 EV
      DATA X1S3/10.5624,10.572,10.585,10.599,10.612,10.626,10.640,
     /10.646,10.653,10.667,
     /10.680,10.694,10.708,10.735,10.762,10.789,10.816,10.844,10.871,
     /10.898,
     /10.925,10.953,10.980,11.007,11.034,11.061,11.089,11.116,11.143,
     /11.170,
     /11.197,11.225,11.252,11.263,11.265,11.268,11.271,11.272,11.274,
     /11.275,
     /11.276,11.279,11.282,11.284,11.287,11.293,11.295,11.298,11.301,
     /11.306,
     /11.309,11.313,11.320,11.327,11.334,11.340,11.347,11.354,11.361,
     /11.367,
     /11.374,11.381,11.388,11.395,11.402,11.415,11.429,11.442,11.456,
     /11.470,
     /11.483,11.497,11.510,11.524,11.538,11.551,11.578,11.606,11.619,
     /11.626,
     /11.633,11.640,11.644,11.646,11.649,11.653,11.660,11.665,11.674,
     /11.701,
     /11.728,11.755,11.776,11.796,11.823,11.851,11.878,11.905,11.932,
     /11.959,
     /11.980,11.993,12.000,12.007,12.014,12.017,12.021,12.027,12.041,
     /12.055,
     /12.068,12.082,12.095,12.110,12.150,12.163,12.177,12.204,12.231,
     /12.259,
     /12.286,12.313,12.340,12.354,12.381,12.435,12.490,12.544,12.599,
     /12.653,
     /12.708,12.762,12.803,12.871,12.993,13.089,13.157,13.225,13.279,
     /13.347,
     /13.374,13.388,13.402,13.415,13.429,13.470,13.497,13.551,13.878,
     /14.422,
     /14.966,15.510,16.055,16.599,17.143,17.687,19.048,20.408,21.089,
     /22.177,
     /23.130,24.490,26.123,28.572,32.654,38.096,43.538,50.0/ 
      DATA Y1S3/0.00,.255,.560,.671,.508,.377,.265,.211,.263,.459,
     /.428,.360,.330,.316,.320,.330,.344,.362,.375,.392,
     /.411,.428,.448,.468,.488,.509,.529,.547,.564,.577,
     /.581,.568,.511,.555,.674,1.01,1.74,2.09,2.21,2.11,
     /1.91,1.53,1.27,1.11,1.00,.875,.848,.865,.979,1.17,
     /1.07,.944,.815,.921,.792,.744,.718,.702,.698,.717,
     /.780,.891,1.04,1.18,1.28,1.31,1.22,1.14,1.10,1.11,
     /1.13,1.15,1.18,1.24,1.29,1.30,1.27,1.28,1.29,1.29,
     /1.26,1.19,1.16,1.15,1.16,1.18,1.21,1.24,1.24,1.25,
     /1.25,1.25,1.25,1.25,1.24,1.23,1.21,1.18,1.13,1.06,
     /.978,.885,.806,.806,1.15,1.36,1.52,1.47,1.26,1.15,
     /1.04,.937,.816,.706,.412,.403,.444,.520,.609,.644,
     /.686,.687,.729,.782,.840,.889,.919,.939,.951,.934,
     /.915,.916,.921,.969,.993,.914,.919,.956,.989,1.02,
     /1.04,1.05,1.06,1.05,1.02,.936,.938,.947,1.00,1.07,
     /1.07,1.12,1.23,1.30,1.38,1.57,1.86,1.77,1.68,1.54,
     /1.41,1.25,1.10,.906,.656,.422,.275,.172/
      DATA YP1S3/168*0.0/
# 1S2  E=10.6436342 EV  J=1   RESONANCE RADIATION  116.487 NM  
#      USED BEF SCALING ABOVE 20 EV      OSC STRENGTH=0.182    
#      SHAPE def BELOW 20 EV FROM BARTSCHAT AND ZATSARINNY
      DATA X1S2/10.6436,10.646,10.653,10.667,10.680,10.694,10.708,
     /10.721,10.748,10.816,
     /10.884,10.953,11.021,11.089,11.157,11.225,11.238,11.252,11.263,
     /11.265,
     /11.268,11.271,11.272,11.274,11.275,11.276,11.279,11.282,11.284,
     /11.287,
     /11.293,11.295,11.298,11.301,11.306,11.309,11.313,11.334,11.367,
     /11.381,
     /11.388,11.395,11.402,11.415,11.429,11.456,11.483,11.510,11.538,
     /11.565,
     /11.592,11.619,11.626,11.633,11.640,11.644,11.646,11.649,11.653,
     /11.660,
     /11.665,11.674,11.687,11.714,11.742,11.762,11.783,11.810,11.837,
     /11.864,
     /11.891,11.918,11.946,11.973,11.980,11.986,11.993,12.000,12.007,
     /12.014,
     /12.017,12.021,12.027,12.041,12.055,12.068,12.082,12.095,12.109,
     /12.150,
     /12.163,12.177,12.191,12.204,12.286,12.340,12.395,12.449,12.504,
     /12.558,
     /12.612,12.667,12.721,12.735,12.748,12.762,12.769,12.776,12.789,
     /12.803,
     /12.871,12.884,12.898,12.912,12.925,12.966,12.993,13.061,13.075,
     /13.089,
     /13.129,13.170,13.197,13.238,13.265,13.293,13.334,13.361,13.388,
     /13.402,
     /13.415,13.429,13.470,13.497,13.551,13.606,13.878,14.150,14.422,
     /14.694,
     /14.966,15.238,15.510,15.783,16.055,16.327,16.599,17.959,19.048,
     /20.000/ 
      DATA Y1S2/0.00,.367,1.32,4.25,3.25,2.45,2.09,1.91,1.74,1.66,
     /1.70,1.81,1.98,2.20,2.45,2.72,2.79,2.89,3.35,3.81,
     /4.80,6.47,7.04,6.96,6.49,5.87,4.90,4.36,4.08,3.94,
     /3.91,4.02,4.24,4.53,3.87,3.48,3.28,3.18,3.37,3.58,
     /3.84,4.15,4.40,4.50,4.37,4.26,4.48,4.70,5.09,5.29,
     /5.41,5.58,5.61,5.57,5.35,5.21,5.18,5.18,5.23,5.35,
     /5.46,5.52,5.58,5.66,5.74,5.79,5.83,5.88,5.91,5.91,
     /5.89,5.83,5.69,5.45,5.36,5.18,5.04,4.81,4.67,5.39,
     /5.96,6.52,6.55,6.08,5.77,5.48,5.14,4.66,4.28,3.67,
     /3.80,4.01,4.29,4.50,5.24,5.49,5.77,5.97,6.14,6.27,
     /6.37,6.45,6.53,6.55,6.47,6.32,6.27,6.22,6.16,6.33,
     /6.39,6.50,6.79,6.95,6.97,6.99,6.88,6.76,6.71,6.74,
     /6.86,6.98,7.06,7.18,7.26,7.35,7.49,7.54,7.65,7.68,
     /7.67,7.54,7.44,7.45,7.52,7.58,7.87,8.18,8.29,8.28,
     /8.35,8.58,8.97,9.50,10.1,10.7,11.2,14.3,16.8,18.0/
      DATA YP1S2/150*0.0/
# 2P10 E=11.3034545 EV  J=1
# SHAPE def FROM B  AND Z ABOVE 30 EV SCALED BY 1/E**3
      DATA X2P10/11.3035,11.306,11.309,11.313,11.320,11.327,11.333,
     /11.340,11.347,11.354,
     /11.361,11.367,11.374,11.381,11.388,11.395,11.402,11.415,11.429,
     /11.442,
     /11.456,11.470,11.483,11.497,11.510,11.524,11.538,11.551,11.565,
     /11.578,
     /11.592,11.606,11.619,11.626,11.633,11.640,11.644,11.646,11.649,
     /11.653,
     /11.660,11.665,11.674,11.687,11.701,11.714,11.728,11.742,11.755,
     /11.762,
     /11.776,11.782,11.796,11.810,11.823,11.837,11.850,11.864,11.878,
     /11.891,
     /11.905,11.919,11.932,11.946,11.959,11.973,11.976,11.980,11.984,
     /11.987,
     /11.989,11.993,12.000,12.007,12.014,12.016,12.021,12.027,12.041,
     /12.055,
     /12.068,12.082,12.095,12.109,12.150,12.163,12.177,12.191,12.204,
     /12.218,
     /12.231,12.245,12.259,12.272,12.286,12.299,12.313,12.327,12.340,
     /12.354,
     /12.367,12.381,12.395,12.408,12.422,12.436,12.449,12.463,12.476,
     /12.490,
     /12.504,12.558,12.612,12.653,12.708,12.748,12.803,12.912,12.966,
     /13.061,
     /13.129,13.252,13.347,13.606,14.014,14.558,14.966,15.510,16.055,
     /16.463,
     /17.007,17.551,17.959,19.048,20.000,21.089,22.041,23.130,24.490,
     /26.123,
     /28.572,30.0/
      DATA Y2P10/0.00,0.64,0.96,1.18,1.48,1.74,2.14,2.61,3.13,3.72,
     /4.35,4.87,5.00,4.66,4.16,3.59,2.85,1.39,0.71,0.58,
     /0.52,0.54,0.57,0.62,0.69,0.76,0.78,0.78,0.76,0.75,
     /0.76,0.80,0.92,1.11,1.54,2.19,2.35,2.27,2.12,1.86,
     /1.52,1.29,1.20,1.15,1.11,1.08,1.06,1.04,1.03,1.03,
     /1.02,1.02,1.02,1.01,1.01,1.01,1.02,1.02,1.03,1.04,
     /1.05,1.06,1.08,1.12,1.22,1.70,1.75,1.63,1.22,1.11,
     /1.13,1.22,1.44,1.75,1.84,1.62,1.21,0.87,0.82,0.86,
     /0.91,0.95,1.02,1.12,1.18,1.17,1.14,1.08,1.05,1.06,
     /1.10,1.15,1.15,1.17,1.17,1.18,1.16,1.14,1.12,1.17,
     /1.14,1.13,1.05,1.01,1.01,1.01,1.02,1.04,1.05,1.06,
     /1.07,1.09,1.10,1.16,1.44,1.11,1.11,1.13,1.07,1.16,
     /1.20,1.25,1.29,1.21,1.23,1.60,1.91,2.64,3.57,4.38,
     /5.45,6.53,7.73,8.54,8.17,7.21,6.26,5.26,4.25,3.39,
     /2.45,2.05/
      DATA YP2P10/142*0.0/
# 2P9 E=11.4430466 EV J=3
# SHAPE def FROM B  AND Z ABOVE 30 EV SCALED BY 1/E**3
      DATA X2P9/11.4430,11.456,11.470,11.483,11.497,11.510,11.524,
     /11.538,11.551,11.565,
     /11.578,11.592,11.606,11.619,11.626,11.633,11.640,11.644,11.646,
     /11.649,
     /11.653,11.660,11.665,11.674,11.687,11.701,11.714,11.728,11.742,
     /11.755,
     /11.762,11.776,11.782,11.796,11.810,11.823,11.837,11.850,11.864,
     /11.878,
     /11.891,11.905,11.919,11.932,11.946,11.959,11.973,11.976,11.980, 
     /11.984,
     /11.987,11.989,11.993,12.000,12.007,12.014,12.016,12.021,12.027,
     /12.041,
     /12.055,12.068,12.082,12.095,12.109,12.150,12.163,12.177,12.191,
     /12.204,
     /12.218,12.231,12.245,12.259,12.272,12.286,12.299,12.313,12.327,
     /12.340,
     /12.354,12.367,12.381,12.395,12.408,12.422,12.436,12.449,12.463,
     /12.476,
     /12.490,12.504,12.558,12.612,12.653,12.748,12.803,12.898,13.061,
     /13.157,
     /13.252,13.497,13.742,14.014,14.996,16.055,17.007,17.959,19.048,
     /20.000,
     /21.089,22.041,23.130,24.490,26.123,28.572,30.000/
      DATA Y2P9/0.00,0.42,0.67,0.75,0.78,0.83,0.95,1.03,1.09,1.02,
     /1.00,1.02,1.08,1.23,1.38,1.59,1.69,1.54,1.40,1.26,
     /1.10,0.97,0.93,0.96,0.99,1.01,1.02,1.04,1.05,1.06,
     /1.06,1.07,1.07,1.08,1.09,1.10,1.11,1.12,1.13,1.14,
     /1.17,1.16,1.18,1.19,1.21,1.23,1.32,1.35,1.39,1.42,
     /1.44,1.47,1.56,1.90,2.82,4.49,4.71,4.20,3.05,2.15,
     /1.92,1.84,1.82,1.80,1.74,1.98,1.94,1.60,1.64,1.73,
     /1.79,1.86,1.85,1.86,1.84,1.80,1.86,1.96,2.05,2.19,
     /1.86,1.68,1.61,1.60,1.57,1.57,1.58,1.60,1.62,1.64,
     /1.66,1.68,1.76,1.82,1.80,1.76,2.00,1.93,1.92,2.08,
     /2.12,2.13,2.16,2.22,3.50,5.50,6.90,7.83,8.15,7.72,
     /6.77,5.84,4.92,4.03,3.31,2.47,2.11/
      DATA YP2P9/117*0.0/
# 2P8 E=11.4446556 EV J=2
# SHAPE def FROM B  AND Z ABOVE 30 EV SCALED BY 1/E
      DATA X2P8/11.4447,11.456,11.470,11.483,11.497,11.510,11.524,
     /11.538,11.551,11.565,
     /11.578,11.592,11.606,11.619,11.626,11.633,11.640,11.644,11.646,
     /11.649,
     /11.653,11.660,11.665,11.674,11.687,11.701,11.714,11.728,11.742,
     /11.755,
     /11.762,11.776,11.782,11.796,11.810,11.823,11.837,11.850,11.864,
     /11.878,
     /11.891,11.905,11.919,11.932,11.946,11.959,11.973,11.976,11.980,
     /11.984,
     /11.987,11.989,11.993,12.000,12.007,12.014,12.016,12.021,12.027,
     /12.041,
     /12.055,12.068,12.082,12.095,12.109,12.150,12.163,12.177,12.191,
     /12.204,
     /12.218,12.231,12.245,12.259,12.272,12.286,12.299,12.313,12.327,
     /12.340,
     /12.354,12.367,12.381,12.395,12.408,12.422,12.436,12.449,12.463,
     /12.476,
     /12.490,12.504,12.558,12.599,12.653,12.708,12.762,12.803,12.898,
     /12.993,
     /13.252,13.497,13.742,14.014,14.558,14.966,15.510,16.055,16.463,
     /17.007,
     /17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,
     /30.0/
      DATA Y2P8/0.00,0.36,0.72,1.01,1.22,1.36,1.45,1.43,1.35,1.29,
     /1.30,1.33,1.38,1.45,1.50,1.59,1.64,1.61,1.57,1.53,
     /1.48,1.44,1.42,1.41,1.43,1.45,1.47,1.48,1.50,1.52,
     /1.53,1.54,1.55,1.57,1.58,1.60,1.61,1.63,1.64,1.66,
     /1.73,1.68,1.69,1.69,1.70,1.71,1.55,1.67,2.20,2.64,
     /2.50,2.31,2.11,1.98,2.05,2.34,2.44,2.45,2.30,2.15,
     /2.09,2.06,2.04,2.06,2.07,1.97,1.97,1.92,1.92,1.95,
     /2.00,2.07,2.12,2.09,2.12,2.16,2.21,2.25,2.33,2.49,
     /2.26,2.08,2.02,2.03,2.02,1.99,1.97,1.96,1.95,1.96,
     /1.97,1.98,2.03,2.06,1.97,2.43,2.30,2.22,2.24,2.36,
     /2.34,2.43,2.51,2.61,3.01,3.52,4.27,4.97,5.45,5.98,
     /6.96,7.70,7.85,7.66,7.37,7.03,6.65,6.30,5.82,5.55/
      DATA YP2P8/120*0.0/
# 2P7 E=11.5261152 EV J=1
# SHAPE def FROM B  AND Z ABOVE 30 EV SCALED BY 1/E**3
      DATA X2P7/11.5261,11.538,11.551,11.565,11.578,11.592,11.606,
     /11.619,11.626,11.633,
     /11.640,11.644,11.646,11.649,11.653,11.660,11.665,11.674,11.687,
     /11.701,
     /11.714,11.728,11.742,11.755,11.762,11.776,11.782,11.796,11.810,
     /11.823,
     /11.837,11.850,11.864,11.878,11.891,11.905,11.919,11.932,11.946,
     /11.959,
     /11.973,11.976,11.980,11.984,11.987,11.989,11.993,12.000,12.007,
     /12.014,
     /12.016,12.021,12.027,12.041,12.055,12.068,12.082,12.095,12.109,
     /12.150,
     /12.163,12.177,12.191,12.204,12.218,12.231,12.245,12.259,12.272,
     /12.286,
     /12.299,12.313,12.327,12.340,12.354,12.367,12.381,12.395,12.408,
     /12.422,
     /12.463,12.504,12.558,12.612,12.653,12.694,12.708,12.735,12.762,
     /12.993,
     /13.197,13.293,13.497,13.742,14.014,14.558,14.966,15.510,16.055,
     /16.599,
     /17.007,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,
     /28.572,30.0/
      DATA Y2P7/0.00,0.21,0.44,0.45,0.45,0.45,0.46,0.49,0.51,0.55,
     /0.57,0.55,0.53,0.51,0.50,0.49,0.50,0.52,0.57,0.60,
     /0.62,0.65,0.66,0.67,0.68,0.68,0.69,0.69,0.70,0.70,
     /0.71,0.71,0.72,0.72,0.72,0.73,0.74,0.74,0.75,0.73,
     /0.78,0.92,1.00,0.80,0.68,0.64,0.62,0.60,0.53,0.51,
     /0.56,0.66,0.74,0.75,0.76,0.74,0.70,0.65,0.81,0.88,
     /0.98,1.20,1.16,1.18,1.23,1.28,1.35,1.31,1.24,1.15,
     /1.10,1.02,0.99,0.99,0.97,0.94,0.88,0.91,0.88,0.86,
     /0.82,0.83,0.87,0.91,0.95,1.05,1.48,1.17,0.99,1.07,
     /1.03,1.06,1.06,1.09,1.19,1.50,1.81,2.33,2.78,3.11,
     /3.25,3.32,3.08,2.76,2.38,2.07,1.80,1.54,1.31,1.03,
     /0.90/ 
      DATA YP2P7/111*0.0/
# 2P6 E=11.5458220 EV J=2
# SHAPE def FROM B  AND Z   SCALED BY 1/E  ABOVE  30 EV
      DATA X2P6/11.5458,11.551,11.565,11.578,11.592,11.606,11.619,
     /11.626,11.633,11.640,
     /11.644,11.646,11.649,11.653,11.660,11.665,11.674,11.687,11.701,
     /11.714,
     /11.728,11.742,11.755,11.762,11.776,11.837,11.905,11.959,11.973,
     /11.976,
     /11.987,12.000,12.007,12.014,12.016,12.021,12.027,12.041,12.055,
     /12.068,
     /12.082,12.095,12.109,12.150,12.163,12.177,12.191,12.204,12.218,
     /12.231,
     /12.245,12.259,12.272,12.286,12.299,12.313,12.327,12.340,12.354,
     /12.367,
     /12.381,12.395,12.408,12.422,12.436,12.449,12.463,12.476,12.490,
     /12.504,
     /12.558,12.599,12.653,12.708,12.762,12.803,12.898,12.993,13.129,
     /13.252,
     /13.497,13.742,14.014,14.558,14.966,15.510,16.055,16.599,17.007,
     /17.415,
     /17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,
     /30.000/
      DATA Y2P6/0.00,0.27,0.84,1.06,1.15,1.20,1.23,1.25,1.28,1.29,
     /1.29,1.28,1.27,1.26,1.26,1.25,1.24,1.23,1.23,1.24,
     /1.25,1.25,1.26,1.26,1.27,1.28,1.27,1.24,1.52,1.49,
     /1.50,1.36,1.45,1.80,1.93,1.97,1.83,1.68,1.62,1.60,
     /1.65,1.91,2.49,2.06,2.00,1.94,1.82,1.75,1.69,1.59,
     /1.51,1.54,1.64,1.83,1.83,1.84,1.80,1.78,1.73,1.68,
     /1.62,1.63,1.60,1.58,1.56,1.53,1.51,1.49,1.48,1.47,
     /1.46,1.49,1.54,1.50,1.66,1.57,1.50,1.45,1.47,1.46,
     /1.39,1.39,1.45,1.70,1.84,2.17,2.53,2.83,3.05,3.16,
     /3.25,3.21,3.07,3.01,2.97,2.93,2.86,2.76,2.55,2.43/
      DATA YP2P6/100*0.0/  
# 2P5 E=11.6660274 EV J=0
# SHAPE def FROM B  AND Z   SCALED BY 1/E ABOVE 108.84 EV
      DATA X2P5/11.6660,11.674,11.687,11.701,11.714,11.728,11.742,
     /11.755,11.762,11.776,
     /11.782,11.796,11.810,11.823,11.837,11.850,11.864,11.878,11.891,
     /11.905,
     /11.919,11.932,11.946,11.959,11.973,11.976,11.980,11.984,11.987,
     /11.989,
     /11.993,12.000,12.007,12.014,12.016,12.021,12.027,12.041,12.055,
     /12.068,
     /12.082,12.095,12.109,12.150,12.163,12.177,12.191,12.204,12.218,
     /12.231,
     /12.245,12.259,12.272,12.286,12.299,12.313,12.327,12.340,12.354,
     /12.367,
     /12.381,12.395,12.408,12.422,12.504,12.558,12.599,12.694,12.708,
     /12.748,
     /12.803,12.912,12.993,13.089,13.252,13.497,13.742,14.014,14.558,
     /14.966,
     /15.510,16.055,16.599,17.007,17.959,19.048,20.000,21.089,22.041,
     /23.130,
     /24.490,26.123,28.572,30.000,32.653,38.096,43.538,54.422,68.028,
     /81.634,
     /95.239,108.84/
      DATA Y2P5/0.00,0.52,0.75,0.87,0.94,0.99,1.03,1.06,1.08,1.11,
     /1.12,1.14,1.16,1.18,1.21,1.23,1.25,1.27,1.30,1.32,
     /1.35,1.38,1.42,1.46,1.33,1.30,1.28,1.43,1.57,1.66,
     /1.76,1.96,2.22,2.24,2.02,1.66,1.40,1.42,1.48,1.54,
     /1.60,1.67,1.89,2.24,2.28,2.26,2.25,2.26,2.25,2.19,
     /2.12,2.16,2.11,2.02,1.86,1.66,1.59,1.74,2.21,2.19,
     /2.18,2.12,2.09,2.10,2.14,2.19,2.24,2.03,2.21,2.74,
     /2.71,2.65,2.52,2.98,2.93,2.87,3.09,3.48,4.86,6.32,
     /8.30,9.88,10.9,10.7,10.7,9.74,8.95,8.27,7.85,7.76,
     /7.21,6.91,6.59,6.42,6.19,5.82,5.54,5.00,4.42,3.92,
     /3.51,3.16/
      DATA YP2P5/102*0.0/
# 3D6 E=11.998135 J=0
#  SHAPE def FRONM B AND Z SCALED BY 1/E**3 ABOVE 54.422 EV
      DATA X3D6/11.9981,12.014,12.068,12.082,12.095,12.109,12.150,
     /12.163,12.177,12.191,
     /12.204,12.218,12.231,12.245,12.259,12.272,12.286,12.299,12.313,
     /12.327,
     /12.340,12.354,12.367,12.381,12.395,12.408,12.449,12.463,12.476,
     /12.490,
     /12.504,12.517,12.558,12.599,12.626,12.640,12.653,12.694,12.748,
     /12.871,
     /12.993,13.129,13.197,13.293,13.402,13.524,13.606,14.014,14.422,
     /14.966,
     /15.510,16.055,16.599,17.007,17.551,17.959,19.048,20.000,21.089,
     /22.041,
     /23.130,24.490,25.851,28.572,30.000,32.653,38.096,43.538,54.422/
      DATA Y3D6/0.00,.053,.058,.069,.088,.119,.155,.155,.157,.136,
     /.135,.136,.149,.118,.112,.113,.117,.120,.120,.117,
     /.126,.147,.140,.136,.126,.123,.123,.122,.121,.119,
     /.118,.117,.117,.118,.117,.113,.107,.124,.157,.151,
     /.163,.194,.230,.245,.248,.265,.280,.344,.442,.548,
     /.802,1.09,1.38,1.61,1.87,2.25,2.53,2.55,2.45,2.33,
     /2.16,1.94,1.79,1.48,1.35,1.14,.765,.539,.269/
      DATA YP3D6/69*0.0/ 
# 3D5 E=12.037029 J=1  RESONANCE RADIATION  103.003 NM   F=0.0053
# SHAPE def FROM B AND Z UP TO 68 EV 
# ABOVE  68 EV USE BEF SCALING 
      DATA X3D5/12.0370,12.041,12.055,12.068,12.082,12.095,12.109,
     /12.150,12.163,12.177,
     /12.191,12.204,12.218,12.231,12.245,12.259,12.272,12.286,12.299,
     /12.313,
     /12.327,12.340,12.354,12.367,12.381,12.395,12.408,12.422,12.436,
     /12.449,
     /12.463,12.476,12.490,12.504,12.558,12.612,12.653,12.708,12.762,
     /12.803,
     /12.898,13.061,13.252,13.524,13.742,14.014,14.286,14.558,14.830,
     /14.966,
     /15.238,15.510,15.783,16.055,16.327,16.599,16.871,17.007,17.279,
     /17.551,
     /17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,
     /30.000,
     /32.653,38.096,43.538,54.422,68.028/                            
      DATA Y3D5/0.00,.084,.113,.139,.173,.216,.238,.352,.381,.395,
     /.409,.439,.505,.568,.427,.392,.403,.407,.390,.348,
     /.353,.369,.431,.417,.412,.393,.397,.406,.414,.420,
     /.423,.425,.426,.427,.429,.434,.416,.476,.492,.548,
     /.581,.646,.773,.851,.955,1.08,1.27,1.50,1.67,1.80,
     /2.16,2.53,2.88,3.27,3.74,4.17,4.63,4.79,5.23,5.61,
     /6.40,7.40,7.54,7.31,6.96,6.48,5.90,5.37,4.63,4.25,
     /3.66,2.73,2.05,1.28,.812/                         
      DATA YP3D5/75*0.0/    
# 2P4 E=12.1003506  J=1
#  SHAPE def FROM B AND Z  SCALED BY 1/E**3 ABOVE 30.0 EV
      DATA X2P4/12.1004,12.109,12.150,12.163,12.177,12.191,12.204,
     /12.218,12.231,12.245,
     /12.259,12.272,12.286,12.299,12.313,12.327,12.340,12.354,12.367,
     /12.381,
     /12.395,12.408,12.449,12.463,12.476,12.490,12.504,12.517,12.531,
     /12.544,
     /12.558,12.599,12.653,12.708,12.762,12.803,12.898,12.993,13.089,
     /13.197,
     /13.293,13.402,13.497,13.606,13.878,14.014,14.558,14.966,15.238,
     /15.510,
     /15.919,16.463,17.007,17.551,17.959,19.048,20.000,21.089,22.041,
     /23.130,
     /24.490,26.123,28.572,30.0/
      DATA Y2P4/0.00,.121,.308,.308,.320,.339,.352,.369,.395,.408,
     /.435,.454,.453,.456,.473,.510,.552,.531,.482,.459,
     /.463,.465,.467,.469,.471,.475,.479,.483,.488,.493,
     /.499,.519,.571,.625,.633,.617,.822,.739,.627,.671,
     /.706,.800,.781,.785,.831,.854,.904,1.09,1.26,1.50,
     /1.80,2.27,2.62,2.88,3.20,3.49,3.48,3.15,2.76,2.34,
     /1.93,1.54,1.17,1.00/
      DATA YP2P4/64*0.0/
# 3D3 E=12.111740 J=2
# SHAPE def FROM B AND Z  SCALED BY 1/E**3 ABOVE 95.239 EV
      DATA X3D3/12.1117,12.150,12.163,12.177,12.191,12.204,12.218,
     /12.231,12.245,12.259,
     /12.272,12.286,12.299,12.313,12.327,12.340,12.354,12.367,12.381,
     /12.395,
     /12.408,12.422,12.436,12.449,12.463,12.476,12.490,12.504,12.517,
     /12.531,
     /12.558,12.572,12.612,12.626,12.640,12.653,12.667,12.694,12.748,
     /12.803,
     /12.898,12.993,13.061,13.129,13.197,13.293,13.402,13.606,13.878,
     /14.150,
     /14.558,14.966,15.510,16.055,16.599,17.007,17.551,17.959,19.048,
     /20.000,
     /21.089,22.041,23.130,24.490,26.123,28.572,30.000,32.653,38.096,
     /43.538,
     /54.422,68.028,81.634,95.239/
      DATA Y3D3/0.00,.573,.543,.494,.395,.352,.346,.389,.400,.364,
     /.352,.345,.335,.318,.269,.246,.325,.343,.389,.413,
     /.420,.432,.447,.460,.472,.480,.486,.490,.492,.494,
     /.496,.496,.495,.493,.488,.482,.476,.447,.584,.610,
     /.616,.578,.663,.735,.815,.860,.870,.949,1.12,1.33,
     /1.85,2.49,3.35,4.06,4.96,5.51,6.45,7.54,8.83,9.11,
     /8.82,8.32,7.70,6.95,6.18,5.19,4.70,3.89,2.63,1.79,
     /.876,.409,.215,.126/
      DATA YP3D3/74*0.0/
# 3D4# E=12.125317  J=4
# SHAPE def FROM B AND Z  SCALED BY 1/E**3 ABOVE  81.634 EV
      DATA X3D4P/12.1253,12.150,12.163,12.177,12.191,12.204,12.218,
     /12.231,12.245,12.259,
     /12.272,12.286,12.299,12.313,12.327,12.340,12.354,12.367,12.381,
     /12.395,
     /12.408,12.422,12.436,12.449,12.463,12.476,12.490,12.504,12.517,
     /12.531,
     /12.558,12.572,12.612,12.626,12.640,12.653,12.667,12.694,12.748,
     /12.803,
     /12.898,12.993,13.061,13.129,13.197,13.293,13.402,13.606,13.878,
     /14.150,
     /14.558,14.966,15.510,16.055,16.599,17.007,17.551,17.959,19.048,
     /20.000,
     /21.089,22.041,23.130,24.490,26.123,28.572,30.000,32.653,38.096,
     /43.538,
     /54.422,68.028,81.634/
      DATA Y3D4P/0.00,.057,.081,.179,.137,.150,.184,.210,.245,.290,
     /.328,.327,.324,.305,.285,.303,.318,.296,.313,.330,
     /.334,.349,.363,.373,.380,.385,.390,.393,.397,.401,
     /.408,.412,.424,.427,.430,.447,.498,.525,.571,.713,
     /.691,.640,.702,.790,.836,.889,.944,1.02,1.20,1.47,
     /1.99,2.69,3.74,4.77,5.64,6.27,7.23,7.37,8.24,8.35,
     /7.91,7.30,6.58,5.73,4.92,3.88,3.41,2.69,1.68,1.09,
     /.508,.232,.122/
      DATA YP3D4P/73*0.0/
# 2P3 E=12.1404262  J=1
# SHAPE def FROM B AND Z  SCALED BY 1/E**3 ABOVE  81.634 EV
      DATA X2P3/12.1404,12.150,12.163,12.177,12.191,12.204,12.218,
     /12.231,12.245,12.259,
     /12.272,12.286,12.299,12.313,12.327,12.340,12.354,12.367,12.381,
     /12.395,
     /12.408,12.422,12.436,12.449,12.463,12.476,12.490,12.504,12.517,
     /12.531,
     /12.558,12.572,12.612,12.626,12.640,12.653,12.667,12.694,12.748,
     /12.803,
     /12.898,12.993,13.061,13.129,13.197,13.293,13.402,13.606,13.878,
     /14.150,
     /14.558,14.966,15.510,16.055,16.599,17.007,17.551,17.959,19.048,
     /20.000,
     /21.089,22.041,23.130,24.490,26.123,28.572,30.000,32.653,38.096,
     /43.538,
     /54.422,68.028,81.634/
      DATA Y2P3/0.00,.108,.284,.400,.456,.485,.496,.544,.568,.536,
     /.506,.485,.484,.495,.509,.559,.593,.581,.576,.562,
     /.559,.551,.543,.537,.533,.532,.532,.534,.536,.540,
     /.551,.557,.580,.586,.591,.613,.729,.777,.646,.678,
     /.873,.725,.672,.632,.644,.667,.723,.657,.690,.652,
     /.676,.818,1.07,1.26,1.74,2.23,2.61,2.94,3.35,3.27,
     /2.86,2.50,2.40,1.75,1.42,1.05,.890,.665,.384,.249,
     /.138,.080,.048/
      DATA YP2P3/73*0.0/
# 2P2 E=12.1436522  J=2
# SHAPE def FROM B AND Z  SCALED BY 1/E  ABOVE  108.84 EV
      DATA X2P2/12.1437,12.150,12.163,12.177,12.191,12.204,12.218,
     /12.231,12.245,12.259,
     /12.272,12.286,12.299,12.313,12.327,12.340,12.354,12.367,12.381,
     /12.395,
     /12.408,12.422,12.436,12.449,12.463,12.476,12.490,12.504,12.517,
     /12.531,
     /12.558,12.572,12.612,12.626,12.640,12.653,12.667,12.694,12.748,
     /12.803,
     /12.898,12.993,13.061,13.129,13.197,13.293,13.402,13.606,13.878,
     /14.150,
     /14.558,14.966,15.510,16.055,16.599,17.007,17.551,17.959,19.048,
     /20.000,
     /21.089,22.041,23.130,24.490,26.123,28.572,30.000,32.653,38.096,
     /43.538,
     /54.422,68.028,81.634,95.239,108.84/
      DATA Y2P2/0.00,.181,.402,.577,.690,.760,.798,.852,.876,.915,
     /.965,1.01,1.02,1.05,1.09,1.17,1.17,1.15,1.15,1.14,
     /1.12,1.11,1.11,1.11,1.12,1.12,1.14,1.15,1.16,1.18,
     /1.21,1.22,1.27,1.28,1.29,1.29,1.35,1.49,1.43,1.66,
     /1.53,1.76,1.52,1.45,1.50,1.56,1.75,1.70,1.64,1.71,
     /1.91,2.24,2.93,3.26,3.79,4.23,4.62,5.05,5.59,5.74,
     /5.62,5.34,5.00,4.65,4.29,3.88,3.66,3.31,2.76,2.38,
     /1.90,1.53,1.28,1.10,.962/
      DATA YP2P2/75*0.0/
# 3D4 E=12.178504  J=3
# SHAPE def FROM B AND Z  SCALED  BY 1/E  ABOVE 108.84 EV
      DATA X3D4/12.1785,12.191,12.204,12.218,12.231,12.245,12.259,
     /12.272,12.286,12.299,
     /12.313,12.327,12.340,12.354,12.367,12.381,12.395,12.408,12.422,
     /12.436,
     /12.449,12.463,12.476,12.558,12.653,12.748,12.803,12.993,13.089,
     /13.388,
     /13.606,14.014,14.286,14.558,14.830,15.102,15.510,15.919,16.463,
     /17.007,
     /17.551,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,
     /28.572,
     /30.000,32.653,38.096,43.538,54.422,68.028,81.634,95.239,108.84/
      DATA Y3D4/0.00,.363,.381,.395,.437,.491,.560,.630,.684,.700,
     /.655,.613,.672,.717,.706,.725,.735,.718,.702,.693,
     /.691,.691,.693,.717,.890,.870,.844,.734,.831,.857,
     /.864,.976,1.20,1.52,1.88,2.20,2.69,3.08,3.67,3.93,
     /4.10,4.36,4.66,4.67,4.50,4.26,3.97,3.62,3.28,2.84,
     /2.63,2.31,1.83,1.52,1.21,1.01,.878,.781,.704/
      DATA YP3D4/59*0.0/
# 2P1 E=12.2564658  J=0
# SHAPE def FROM B AND Z  SCALED BY 1/E ABOVE 108.84 EV
      DATA X2P1/12.2565,12.272,12.286,12.299,12.313,12.327,12.340,
     /12.354,12.367,12.381,
     /12.463,12.504,12.558,12.612,12.653,12.708,12.762,12.803,12.898,
     /12.966,
     /13.061,13.197,13.402,13.551,13.742,14.014,14.558,14.966,15.510,
     /16.055,
     /16.463,17.007,17.551,17.959,19.048,20.000,21.089,22.041,23.130,
     /24.490,
     /26.123,28.572,30.000,32.653,38.096,43.538,54.422,68.028,81.634,
     /95.239,108.84/
      DATA Y2P1/0.00,.200,.261,.282,.298,.321,.378,.554,.540,.517,
     /.478,.489,.518,.560,.508,.642,.789,.647,1.01,.822,
     /.922,.866,.995,1.06,1.11,1.20,1.59,2.23,3.27,4.28,
     /4.85,5.41,5.75,5.98,5.74,5.35,4.96,4.70,4.49,4.30,
     /4.14,3.95,3.86,3.73,3.53,3.38,3.09,2.75,2.46,2.20,2.00/
      DATA YP2P1/51*0.0/   
# 3D1## E=12.257998  J=2  
# SHAPE def FROM B AND Z  SCALED BY 1/E**3 ABOVE 68.028 EV
      DATA X3D1PP/12.2580,12.272,12.286,12.299,12.313,12.327,12.340,
     /12.354,12.367,12.381,
     /12.463,12.504,12.558,12.612,12.653,12.708,12.762,12.803,12.898,
     /12.966,
     /13.061,13.197,13.402,13.551,13.742,14.014,14.558,14.966,15.510,
     /16.055,
     /16.463,17.007,17.551,17.959,19.048,20.000,21.089,22.041,23.130,
     /24.490,
     /26.123,28.572,30.000,32.653,38.096,43.538,54.422,68.028/
      DATA Y3D1PP/0.00,.038,.055,.073,.093,.107,.125,.158,.178,.204,
     /.231,.253,.283,.319,.380,.368,.399,.473,.318,.348,
     /.450,.455,.524,.516,.552,.631,.926,1.24,1.54,1.75,
     /1.99,2.41,2.63,2.60,2.66,2.63,2.50,2.35,2.18,1.97,
     /1.79,1.48,1.33,1.08,.689,.444,.221,.116/
      DATA YP3D1PP/48*0.0/
# 3D1# E=12.284275  J=3
# SHAPE def FROM B AND Z  SCALED BY 1/E ABOVE  38 EV
      DATA X3D1P/12.2843,12.327,12.340,12.354,12.367,12.381,12.463,
     /12.504,12.558,12.612,
     /12.653,12.708,12.762,12.803,12.898,12.966,13.061,13.197,13.402,
     /13.551,
     /13.742,14.014,14.558,14.966,15.510,16.055,16.463,17.007,17.551,
     /17.959,
     /19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.000,
     /32.653,38.096/
      DATA Y3D1P/0.00,.313,.357,.448,.451,.465,.527,.568,.604,.637,
     /.685,.742,.625,.781,.553,.538,.588,.591,.606,.566,
     /.535,.529,.688,.891,1.24,1.50,1.53,1.59,1.78,1.68,
     /1.56,1.47,1.42,1.41,1.40,1.40,1.37,1.29,1.23,1.11,.913/
      DATA YP3D1P/41*0.0/
# 2S5 E=12.352158  J=2
# SHAPE def FROM B AND Z  SCALED BY 1/E**3 ABOVE 68  EV
      DATA X2S5/12.3522,12.367,12.381,12.395,12.408,12.422,12.463,
     /12.504,12.558,12.612,
     /12.653,12.708,12.762,12.803,12.898,12.966,13.061,13.197,13.402,
     /13.551,
     /13.742,14.014,14.558,14.966,15.510,16.055,16.463,17.007,17.551,
     /17.959,
     /19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.000,
     /32.653,
     /38.096,43.538,54.422,68.028/
      DATA Y2S5/0.00,.235,.250,.475,.598,.674,.773,.845,.945,1.04,
     /1.06,1.18,.748,.861,1.05,1.05,1.17,1.14,1.12,1.07,
     /1.03,.989,1.09,1.22,1.49,1.76,1.85,1.93,1.98,2.03,
     /1.89,1.73,1.55,1.41,1.28,1.12,.995,.812,.725,.586,
     /.377,.246,.119,.058/
      DATA YP2S5/44*0.0/
# 3D2 E=12.354555  J=1 RESONANCE RADIATION  100.356 NM  F=0.082
#       USE BEF SCALING
#
# 2S4 E=12.3852827 J=1 RESONANCE RADIATION  100.107 NM  F=0.154
#        USE BEF SCALING
#
# 3P10 E=12.7563854 EV J=1  
#       SHAPE def FROM B AND Z SCALED BY 1/E**3 ABOVE 68 EV
      DATA X3P10/12.7564,12.993,14.014,14.966,16.055,17.007,17.959,
     /19.048,20.000,21.089,
     /22.041,23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,
     /68.028/
      DATA Y3P10/0.00,.459,.956,1.41,2.20,2.55,3.05,2.96,2.74,2.38,
     /2.04,1.70,1.36,1.07,0.75,0.61,0.23,0.14,.078,.046/
      DATA YP3P10/20*0.0/
# 3P9  E=12.7847085 EV J=3  
#       SHAPE def FROM B AND Z SCALED BY 1/E**3 ABOVE 68 EV
      DATA X3P9/12.7847,12.993,14.014,14.966,16.055,17.007,17.959,
     /19.048,20.000,21.089,
     /22.041,23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,
     /68.028/
      DATA Y3P9/0.00,.511,1.48,2.40,3.02,3.44,3.57,3.57,3.36,2.94,
     /2.54,2.12,1.72,1.40,1.02,0.86,0.38,0.24,.122,.061/
      DATA YP3P9/20*0.0/
# 3P8  E=12.7853913 EV J=2  
#       SHAPE def FROM B AND Z SCALED BY 1/EN  ABOVE 68 EV
      DATA X3P8/12.7854,12.993,14.014,14.966,16.055,17.007,17.959,
     /19.048,20.000,21.089,
     /22.041,23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,
     /68.028/
      DATA Y3P8/0.00,.575,1.19,2.00,2.64,2.86,3.08,3.11,3.06,2.91,
     /2.74,2.56,2.36,2.17,1.95,1.83,1.38,1.19,0.94,0.75/
      DATA YP3P8/20*0.0/
# 3S1PP E=12.8033935 EV J=2 
#        SHAPE def FROM B AND Z SCALED BY 1/EN**3 ABOVE 68 EV
      DATA X3S1PP/12.8034,12.993,14.014,14.966,16.055,17.007,17.959,
     /19.048,20.000,21.089,
     /22.041,23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,
     /68.028/
      DATA Y3S1PP/0.00,.328,0.84,1.39,2.05,3.41,4.82,6.11,6.68,6.68,
     /6.40,5.94,5.36,4.81,4.05,3.69,2.14,1.49,0.76,0.36/
      DATA YP3S1PP/20*0.0/
# 3P7 E=12.8092373 EV J=1 
#        SHAPE def FROM B AND Z SCALED BY 1/EN**3 ABOVE 68 EV
      DATA X3P7/12.8092,12.993,14.014,14.966,16.055,17.007,17.959,
     /19.048,20.000,21.089,
     /22.041,23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,
     /68.028/
      DATA Y3P7/0.00,0.29,0.64,1.05,1.31,1.26,1.27,1.10,0.96,0.81,
     /0.70,0.60,0.51,0.44,0.35,0.31,0.17,0.12,.088,.067/
      DATA YP3P7/20*0.0/
# 3P6 E=12.8153298 EV J=2 
#        SHAPE def FROM B AND Z SCALED BY 1/EN ABOVE 68 EV
      DATA X3P6/12.8153,12.993,14.014,14.966,16.055,17.007,17.959,
     /19.048,20.000,21.089,
     /22.041,23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,
     /68.028/
      DATA Y3P6/0.00,0.33,1.18,1.44,1.73,1.98,1.95,1.71,1.50,1.34,
     /1.23,1.14,1.04,0.95,0.81,0.75,0.51,0.42,0.32,0.25/
      DATA YP3P6/20*0.0/
# 3S1PPPP E=12.8252582 EV J=2 
#        SHAPE def FROM B AND Z SCALED BY 1/EN**3 ABOVE 68 EV
      DATA X3S1PPPP/12.8253,12.993,14.014,14.966,16.055,17.007,17.959,
     /19.048,20.000,21.089,
     /22.041,23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,
     /68.028/
      DATA Y3S1PPPP/0.00,0.16,0.41,0.83,1.71,2.50,3.10,3.56,3.83,3.78,
     /3.57,3.26,2.89,2.45,1.97,1.75,0.89,0.58,0.27,0.13/
      DATA YP3S1PPPP/20*0.0/
# 3S1PPP E=12.8573390 EV J=3 
#        SHAPE def FROM B AND Z SCALED BY 1/EN ABOVE 68 EV
      DATA X3S1PPP/12.8573,12.993,14.014,14.966,16.055,17.007,17.959,
     /19.048,20.000,21.089,
     /22.041,23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,
     /68.028/
      DATA Y3S1PPP/0.00,0.29,0.54,0.99,2.02,2.69,3.38,3.90,4.10,4.05,
     /3.84,3.55,3.20,2.80,2.33,2.11,1.27,0.98,0.67,0.50/
      DATA YP3S1PPP/20*0.0/
# 3P5 E=12.8648022 EV J=0 
#        SHAPE def FROM B AND Z SCALED BY 1/EN ABOVE 68 EV
      DATA X3P5/12.8648,12.993,14.014,14.966,16.055,17.007,17.959,
     /19.048,20.000,21.089,
     /22.041,23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,
     /68.028/
      DATA Y3P5/0.00,0.56,2.30,4.54,6.23,6.30,6.01,5.23,4.62,4.10,
     /3.79,3.71,3.29,3.07,2.86,2.75,2.39,2.25,2.02,1.79/
      DATA YP3P5/20*0.0/
# 4D5 E=12.8698 EV J=1 RESONANCE RADIATION   96.3338NM  F=0.0140
#       USE BEF SCALING
# 4D6 E=12.9034651 EV J=0 
#        SHAPE def FROM B AND Z SCALED BY 1/EN**3 ABOVE 68 EV
      DATA X4D6/12.9035,12.993,14.014,14.966,16.055,17.007,17.959,
     /19.048,20.000,21.089,
     /22.041,23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,
     /68.028/
      DATA Y4D6/0.00,0.07,0.21,0.32,0.57,0.76,1.09,1.24,1.30,1.28,
     /1.22,1.12,0.98,0.90,0.74,0.67,0.34,0.25,0.12,.056/
      DATA YP4D6/20*0.0/
# 4D4P E=12.972537 EV J=4
#        SHAPE def FROM B AND Z SCALED BY 1/EN**3 ABOVE 68 EV
      DATA X4D4P/12.9725,12.993,14.014,14.966,16.055,17.007,17.959,
     /19.048,20.000,21.089,
     /22.041,23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,
     /68.028/
      DATA Y4D4P/0.00,0.14,0.89,1.48,2.18,3.01,3.72,4.15,4.25,4.08,
     /3.81,3.48,3.07,2.64,2.09,1.84,0.92,0.60,0.28,0.13/
      DATA YP4D4P/20*0.0/
# 3S1P E=13.0043688 EV J=1 RESONANCE RADIATION 95.341 NM F=0.0435
#       USE BEF SCALING
# 
# 4D4 E=13.0079847 EV J=3
#        SHAPE def FROM B AND Z SCALED BY 1/EN  ABOVE 68 EV
      DATA X4D4/13.0080,14.014,14.966,16.055,17.007,17.959,19.048,
     /20.000,21.089,22.041,
     /23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,68.028/
      DATA Y4D4/0.00,1.10,1.37,1.85,2.26,2.34,2.14,1.95,1.78,1.67,
     /1.56,1.46,1.38,1.26,1.20,0.95,0.90,0.84,0.78/
      DATA YP4D4/19*0.0/
# 4D3 E=13.0192383 EV J=2
#        SHAPE def FROM B AND Z SCALED BY 1/EN**3  ABOVE 68 EV
      DATA X4D3/13.0192,14.014,14.966,16.055,17.007,17.959,19.048,
     /20.000,21.089,22.041,
     /23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,68.028/
      DATA Y4D3/0.00,0.65,1.06,1.66,2.16,2.15,2.16,2.08,1.91,1.74,
     /1.58,1.41,1.29,1.05,0.94,0.48,0.32,0.16,0.09/
      DATA YP4D3/19*0.0/
# 2S3 E=13.029666  EV J=0
#        SHAPE def FROM B AND Z SCALED BY 1/EN**3  ABOVE 68 EV
      DATA X2S3/13.0297,14.014,14.966,16.055,17.007,17.959,19.048,
     /20.000,21.089,22.041,
     /23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,68.028/
      DATA Y2S3/0.00,0.13,0.13,0.17,0.27,0.29,0.29,0.27,0.25,0.23,
     /0.21,0.19,0.17,0.15,0.14,.073,.054,.028,.015/
      DATA YP2S3/19*0.0/
# 2S2  E=13.036483  EV J=1 RESONANCE RADIATION 95.106 NM F=0.0105
#       USE BEF SCALING
# 
# 4D1PP E=13.0386113  J=2
#        SHAPE def FROM B AND Z SCALED BY 1/EN**3  ABOVE 68 EV
      DATA X4D1PP/13.0386,14.014,14.966,16.055,17.007,17.959,19.048,
     /20.000,21.089,22.041,
     /23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,68.028/
      DATA Y4D1PP/0.00,0.50,0.80,1.12,1.46,1.64,1.49,1.40,1.29,1.19,
     /1.17,1.02,0.94,0.80,0.73,0.32,0.22,.109,.059/
      DATA YP4D1PP/19*0.0/
# 4D1P E=13.0441877  J=3
#        SHAPE def FROM B AND Z SCALED BY 1/EN**3  ABOVE 68 EV
      DATA X4D1P/13.0442,14.014,14.966,16.055,17.007,17.959,19.048,
     /20.000,21.089,22.041,
     /23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,68.028/
      DATA Y4D1P/0.00,0.63,0.92,1.47,1.58,1.70,1.50,1.30,1.13,1.02,
     /0.95,0.88,0.84,0.71,0.64,0.33,0.22,.123,.084/
      DATA YP4D1P/19*0.0/
# 3S5  E=13.0986140  J=2
#        SHAPE def FROM B AND Z SCALED BY 1/EN**3  ABOVE 68 EV
      DATA X3S5/13.0986,14.014,14.966,16.055,17.007,17.959,19.048,
     /20.000,21.089,22.041,
     /23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,68.028/
      DATA Y3S5/0.00,0.88,1.56,1.89,1.82,2.08,2.37,2.40,2.21,1.96,
     /1.65,1.30,1.02,0.69,0.57,0.22,0.13,.058,.027/
      DATA YP3S5/19*0.0/
# 4D2  E=13.0987356 EV J=1 RESONANCE RADIATION 94.654 NM F=0.0970
#       USE BEF SCALING
#
# 3S4  E=13.1138948 EV J=1 RESONANCE RADIATION 94.545 NM F=0.0808
#       USE BEF SCALING
#
# SUM 4F STATES   E=13.14  J=1,2,5,4,3,2,4,4
#        SHAPE def FROM B AND Z SCALED BY 1/EN  ABOVE 68 EV
      DATA X4FS/13.14,14.014,14.966,16.055,17.007,17.959,19.048,
     /20.000,21.089,22.041,
     /23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,68.028/
      DATA Y4FS/0.00,1.58,3.51,4.86,4.89,4.50,3.60,2.89,2.24,1.85,
     /1.49,1.19,0.93,0.69,0.59,0.32,0.25,0.18,0.14/
      DATA YP4FS/19*0.0/
# 5D5  E=13.3501402 EV J=1 RESONANCE RADIATION 92.872 NM F=0.0015
#       USE BEF SCALING
#
# 5D2  E=13.4223741 EV J=1 RESONANCE RADIATION 92.372 NM F=0.0439
#         USE BEF SCALING
#
# 4S4  E=13.4365439 EV J=1 RESONANCE RADIATION 92.274 NM F=0.0203
#         USE BEF SCALING
#
# HIGH E=13.6 EV  SUM OF HIGHER DIPOLE STATES            F=0.168
#         USE BEF SCALING 
# 
#    TOTAL OSCILLATOR STRENGTH =1.1258 1.1058
#
#  BREMSSTRAHLUNG X-SECTION WITH CUT OFF UNITS 10**-24
      DATA Z36T/3500.,2633.,1689.,1126.,708.,367.,226.,146.,97.2,84.6,
     /82.1,82.5,83.1,83.6,84.0,84.5,85.1,86.0,86.5,87.3,
     /87.4,87.8,88.0,88.3,88.4/
      DATA EBRM/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,
     /2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,
     /4.E7,5.E7,6.E7,8.E7,1.E8/
#----------------------------------------------------------------------
#     NANISO=0
      IF(NANISO == 0):
 :                                         
       NAME='KRYPTON 2013   ISOTROPIC '
      else:
       NAME='KRYPTON 2013  ANISOTROPIC'
      # endIF
#                                                                       
# --------------------------------------------------------------------  
#  DATA ON KRYPTON NOT AS GOOD AS ARGON . FIT TO HUNTERS DRIFT VELOCITY 
#  AND DIFFUSION OF KOZUMI .TOWNS# end COEFFICIENT                        
#   OF KRUITOFF,HEYLEN AND BHATTACHYRA CONSISENT SO AVERAGED AND GOOD   
#   AGREEMENT OBTAINED WITH CALCULATED VALUES.
# 2007: INCREASED UPPER ENERGY LIMIT TO 2MEV
# 2007: INCLUDED NEW ANGULAR DISTRIBUTION def
# 2007: INCLUDED PENNING TRANSFER FRACTION 
# 2011: 51 EXCITATION LEVELS : USED BEF SCALED VALUES FOR DIPOLE STATES
#       THE 1S2 AND 1S4 DIPOLE STATES INCLUDE THE RESONANCE STRUCTURE 
#       CALCULATED BY BARTSCHAT AND ZATSARINNY DBSR MODEL SCALED BY 0.87
#       THE 2P AND HIGHER TRIPLET STATES CALCULATED IN THE DBSR MODEL 
#       ARE ALSO SCALED TO AGREE WITH ELECTRON SCATTERING AND FIT TO THE 
#       TO THE TOWNS# end GAIN MEASUREMENTS. 
#       DRIFT VELOCITY DATA AT HIGH FIELD FROM NAKAMURA IS FIITED BY THE
#       MOMENTUM TRANSFER X-SECTION. 
#       EXPERIMENTAL AND TOTAL X-SECTIONS AGREE TO 1%.
#       THE DRIFT VELOCITY FIT IS BETTER THAN 1% .
#       TOWNS# end CALC IS IN GOOD AGREEMENT WITH JACQUES ET AL AT LOW
#       ELECTRIC FIELD BUT NOW ABOUT 8% BELOW KRUITOFF AT HIGH FIELD.  
# 2013: INTRODUCED K,L AND M SHELL AND CHARGE 1 2 3 AND 4 IONISATIONS
# --------------------------------------------------------------------  
#
#  BORN BETHE VALUES FOR IONISATION
      CONST=1.873884D-20
      EMASS2=1021997.804
      AM2=4.65 
      C=52.7 
# BORN BETHE CONSTANT
      A0=0.52917720859D-8
      RY=13.60569193
      API=DACOS(-1.00)
      BBCONST=16.0*API*A0*A0*RY*RY/EMASS2
# SCALING CONSTANTS 
      AN1S=0.87
      AN2P10=0.4 
      AN2P5=0.4 
      AN2P1=0.4 
      AN2P=0.75
      AN3P=0.60
      AN3P5=0.4 
      AN3D=0.65
      AN4D=0.4
# AVERAGE AUGER EMISSIONS FROM EACH SHELL
      AUGM5=2.0
      AUGM4=2.0
      AUGM3=3.43
      AUGM2=2.0
      AUGM1=3.81
      AUGL3=4.85
      AUGL2=4.41
      AUGL1=6.47
      AUGK=5.91
#
      NION=11
      NATT=1
      NIN=51
      NNULL=0
#
      NBREM=25
      DO 6 J=1,NIN
      IZBR(J)=0
    6 CONTINUE
      IZBR(52)=36
#
      DO 1 J=1,6
    1 KEL(J)=NANISO
      DO 2 J=1,NIN
    2 KIN(J)=NANISO
#                              
      NEL=151                      
      NDATA=162 
      NEPSI=186                                                        
      NIONG=65
      NION2=41
      NION3=35
      NION4=32 
      NKSH=74
      NL1S=83
      NL2S=82
      NL3S=84
      NM1S=91
      NM2S=98
      NM3S=99
      NM4S=105
      NM5S=106
      N1S5=169
      N1S4=130
      N1S3=168
      N1S2=150
      N2P10=142
      N2P9=117
      N2P8=120
      N2P7=111
      N2P6=100
      N2P5=102
      N3D6=69
      N3D5=75
      N2P4=64
      N3D3=74
      N3D4P=73
      N2P3=73
      N2P2=75
      N3D4=59
      N2P1=51
      N3D1PP=48
      N3D1P=41
      N2S5=44
      N3P10=20
      N3P9=20
      N3P8=20
      N3S1PP=20
      N3P7=20
      N3P6=20
      N3S1PPPP=20
      N3S1PPP=20
      N3P5=20
      N4D6=20
      N4D4P=20
      N4D4=19
      N4D3=19
      N2S3=19
      N4D1PP=19
      N4D1P=19
      N3S5=19
      N4FS=19
#
      E(1)=0.0                                                      
      E(2)=2.0*EMASS/(83.798*AMU)                                     
      E(3)=13.9996  
      E(4)=0.0        
      E(5)=0.0           
# EOBY AT MINIMUM IONISING                          
      E(6)=23.0
# EOBY AT LOW ENERGY
      EOBY(1)=10.0
      EOBY(2)=30.0
      EOBY(3)=60.0
      EOBY(4)=100.
# EOBY FOR SHELLS
      EOBY(5)=175.0
      EOBY(6)=180.0
      EOBY(7)=250.0
      EOBY(8)=1678.4
      EOBY(9)=1730.9
      EOBY(10)=1921.0
      EOBY(11)=14327.26
# AUGER AND FLUORESCENCE DATA
      NC0(1)=0
      EC0(1)=0.0
      WKLM(1)=0.0
      EFL(1)=0.0
      NG1(1)=0
      EG1(1)=0.0
      NG2(1)=0
      EG2(1)=0.0
      NC0(2)=1
      EC0(2)=5.0
      WKLM(2)=0.0
      EFL(2)=0.0
      NG1(2)=0
      EG1(2)=0.0
      NG2(2)=0
      EG2(2)=0.0
      NC0(3)=2
      EC0(3)=10.0
      WKLM(3)=0.0
      EFL(3)=0.0
      NG1(3)=0
      EG1(3)=0.0
      NG2(3)=0
      EG2(3)=0.0
      NC0(4)=3
      EC0(4)=15.
      WKLM(4)=0.0
      EFL(4)=0.0
      NG1(4)=0
      EG1(4)=0.0
      NG2(4)=0
      EG2(4)=0.0
      NC0(5)=3
      EC0(5)=135.1
      WKLM(5)=0.0
      EFL(5)=0.0
      NG1(5)=0
      EG1(5)=0.0
      NG2(5)=0
      EG2(5)=0.0
      NC0(6)=2
      EC0(6)=186.8
      WKLM(6)=0.0
      EFL(6)=0.0
      NG1(6)=0
      EG1(6)=0.0
      NG2(6)=0
      EG2(6)=0.0
      NC0(7)=4
      EC0(7)=200.9
      WKLM(7)=0.0
      EFL(7)=0.0
      NG1(7)=0
      EG1(7)=0.0
      NG2(7)=0
      EG2(7)=0.0
      NC0(8)=5
      EC0(8)=1555.
      WKLM(8)=0.0216
      EFL(8)=1584.
      NG1(8)=3
      EG1(8)=1490.
      NG2(8)=2
      EG2(8)=54.
      NC0(9)=4
      EC0(9)=1619.9
      WKLM(9)=0.0211
      EFL(9)=1636.
      NG1(9)=3
      EG1(9)=1580.
      NG2(9)=2
      EG2(9)=60.
      NC0(10)=7
      EC0(10)=1698.4
      WKLM(10)=0.0022
      EFL(10)=1700.
      NG1(10)=5
      EG1(10)=1538.
      NG2(10)=2
      EG2(10)=160.
      NC0(11)=10
      EC0(11)=13993.
      WKLM(11)=0.65
      EFL(11)=12649.
      NG1(11)=5
      EG1(11)=12438.
      NG2(11)=5
      EG2(11)=1555.
#
      EION(1)=13.99960
      EION(2)=38.35944
      EION(3)=74.029
      EION(4)=124.88
      EION(5)=214.4
      EION(6)=222.2
      EION(7)=292.8
      EION(8)=1678.4
      EION(9)=1730.9
      EION(10)=1921.0
      EION(11)=14327.26
      LEGAS(1)=0
      LEGAS(2)=0
      LEGAS(3)=0
      LEGAS(4)=0
      LEGAS(5)=1
      LEGAS(6)=1
      LEGAS(7)=1
      LEGAS(8)=1
      LEGAS(9)=1
      LEGAS(10)=1
      LEGAS(11)=1
      ISHELL(1)=0
      ISHELL(2)=0
      ISHELL(3)=0
      ISHELL(4)=0
      ISHELL(5)=7
      ISHELL(6)=6
      ISHELL(7)=5
      ISHELL(8)=4
      ISHELL(9)=3
      ISHELL(10)=2
      ISHELL(11)=1
#
      DO 776 J=1,NION
      DO 777 I=1,4000
      IF(EG(I):
 > EION(J)) :
       IOFFION(J)=I-1
       GO TO 776
      # endIF
  777 CONTINUE
  776 CONTINUE
#                                   
      EIN(1)=9.9152
      EIN(2)=10.0324
      EIN(3)=10.5624
      EIN(4)=10.6436
      EIN(5)=11.3035
      EIN(6)=11.4430
      EIN(7)=11.4447
      EIN(8)=11.5261
      EIN(9)=11.5458
      EIN(10)=11.6660
      EIN(11)=11.9981
      EIN(12)=12.0370
      EIN(13)=12.1004
      EIN(14)=12.1117
      EIN(15)=12.1253
      EIN(16)=12.1404
      EIN(17)=12.1437
      EIN(18)=12.1785
      EIN(19)=12.2565
      EIN(20)=12.2580
      EIN(21)=12.2843
      EIN(22)=12.3522
      EIN(23)=12.3546
      EIN(24)=12.3853
      EIN(25)=12.7564
      EIN(26)=12.7847
      EIN(27)=12.7854
      EIN(28)=12.8034
      EIN(29)=12.8092
      EIN(30)=12.8153
      EIN(31)=12.8253
      EIN(32)=12.8573
      EIN(33)=12.8648
      EIN(34)=12.8698
      EIN(35)=12.9035
      EIN(36)=12.9725
      EIN(37)=13.0044
      EIN(38)=13.0080
      EIN(39)=13.0192
      EIN(40)=13.0297
      EIN(41)=13.0365
      EIN(42)=13.0386
      EIN(43)=13.0442
      EIN(44)=13.0986
      EIN(45)=13.0987
      EIN(46)=13.1139
      EIN(47)=13.14
      EIN(48)=13.3501
      EIN(49)=13.4224
      EIN(50)=13.4365
      EIN(51)=13.6
      EIN(52)=0.0
#**********************************************************************
# ENTER PENNING TRANSFER FRACTION FOR EACH LEVEL
# USE PENNING TRANSFER FRACTION BETWEEN 0.0 AND 0.2 
      DO 50 NL=1,NIN
      PENFRA[1,NL]=0.0
# PENNING TRANSFER DISTANCE MICRONS
      PENFRA[2,NL]=1.0
# PENNING TRANSFER TIME
   50 PENFRA[3,NL]=1.0
#**********************************************************************
      IF(IPEN == 0):
 GO TO 4 
      DO 3 KDUM=1,NIN
      IF(PENFRA[1,KDUM] == 0.0):
 GO TO 3
      WRITE(6,999) NAME,EIN(KDUM),PENFRA[1,KDUM],PENFRA[2,KDUM],
     /PENFRA[3,KDUM]
  999 FORMAT(' GAS = ',A15,' ENERGY LEVEL = ',F7.4,' EV.',/,' PENNING PR
     /OBABILITY =',F5.3,' ABS.LENGTH =',F7.2,' DECAY TIME =',F7.1,/)    
    3 CONTINUE
    4 DO 5 NL=1,NIN
      DO 651 I=1,4000
      IF(EG(I):
 > EIN(NL)) :
       IOFFN(NL)=I-1
       GO TO 5
      # endIF
  651 CONTINUE
    5 CONTINUE
      SCRPT(1)='                                                  '
      SCRPT(2)=' ELASTIC ANISOTROPIC        KRYPTON               '
      IF(NANISO == 0):
 :
      SCRPT(2)=' ELASTIC ISOTROPIC          KRYPTON               '
      # endIF
      SCRPT(3)=' IONISATION CHARGE STATE=1      ELOSS=    13.99960'
      SCRPT(4)=' IONISATION CHARGE STATE=2      ELOSS=    38.35944'
      SCRPT(5)=' IONISATION CHARGE STATE=3      ELOSS=    74.029  '
      SCRPT(6)=' IONISATION CHARGE STATE=4      ELOSS=   124.88   '
      SCRPT(7)=' IONISATION    M3 SHELL         ELOSS=   214.4    '
      SCRPT(8)=' IONISATION    M2 SHELL         ELOSS=   222.2    '
      SCRPT(9)=' IONISATION    M1 SHELL         ELOSS=   292.8    '
      SCRPT(10)=' IONISATION    L3 SHELL         ELOSS=  1678.4    '
      SCRPT(11)=' IONISATION    L2 SHELL         ELOSS=  1730.9    '
      SCRPT(12)=' IONISATION    L1 SHELL         ELOSS=  1921.0    '
      SCRPT(13)=' IONISATION    K  SHELL         ELOSS= 14327.26   '
      SCRPT(14)=' ATTACHMENT                                       ' 
      SCRPT(15)='                                                  '
      SCRPT(16)='                                                  '
      SCRPT(17)=' EXC 1S5     J=2 METASTABLE       ELEVEL=   9.9152'
      SCRPT(18)=' EXC 1S4     J=1 RESONANT         ELEVEL=  10.0324'
      SCRPT(19)=' EXC 1S3     J=0 METASTABLE       ELEVEL=  10.5624'
      SCRPT(20)=' EXC 1S2     J=1 RESONANT         ELEVEL=  10.6436'
      SCRPT(21)=' EXC 2P10    J=1                  ELEVEL=  11.3035'
      SCRPT(22)=' EXC 2P9     J=3                  ELEVEL=  11.4430'
      SCRPT(23)=' EXC 2P8     J=2                  ELEVEL=  11.4447'
      SCRPT(24)=' EXC 2P7     J=1                  ELEVEL=  11.5261'
      SCRPT(25)=' EXC 2P6     J=2                  ELEVEL=  11.5458'
      SCRPT(26)=' EXC 2P5     J=0                  ELEVEL=  11.6660'
      SCRPT(27)=' EXC 3D6     J=0                  ELEVEL=  11.9981'
      SCRPT(28)=' EXC 3D5     J=1 RESONANT         ELEVEL=  12.0370'
      SCRPT(29)=' EXC 2P4     J=1                  ELEVEL=  12.1004'
      SCRPT(30)=' EXC 3D3     J=2                  ELEVEL=  12.1117'
      SCRPT(31)=' EXC 3D4#    J=4                  ELEVEL=  12.1253'
      SCRPT(32)=' EXC 2P3     J=1                  ELEVEL=  12.1404'
      SCRPT(33)=' EXC 2P2     J=2                  ELEVEL=  12.1437'
      SCRPT(34)=' EXC 3D4     J=3                  ELEVEL=  12.1785'
      SCRPT(35)=' EXC 2P1     J=0                  ELEVEL=  12.2565'
      SCRPT(36)=' EXC 3D1##   J=2                  ELEVEL=  12.2580'
      SCRPT(37)=' EXC 3D1#    J=3                  ELEVEL=  12.2843'
      SCRPT(38)=' EXC 2S5     J=2                  ELEVEL=  12.3522'
      SCRPT(39)=' EXC 3D2     J=1 RESONANT         ELEVEL=  12.3546'
      SCRPT(40)=' EXC 2S4     J=1 RESONANT         ELEVEL=  12.3853'
      SCRPT(41)=' EXC 3P10    J=1                  ELEVEL=  12.7564'
      SCRPT(42)=' EXC 3P9     J=3                  ELEVEL=  12.7847'
      SCRPT(43)=' EXC 3P8     J=2                  ELEVEL=  12.7854'
      SCRPT(44)=' EXC 3S1##   J=2                  ELEVEL=  12.8034'
      SCRPT(45)=' EXC 3P7     J=1                  ELEVEL=  12.8092'
      SCRPT(46)=' EXC 3P6     J=2                  ELEVEL=  12.8153'
      SCRPT(47)=' EXC 3S1#### J=2                  ELEVEL=  12.8253'
      SCRPT(48)=' EXC 3S1###  J=3                  ELEVEL=  12.8573'
      SCRPT(49)=' EXC 3P5     J=0                  ELEVEL=  12.8648'
      SCRPT(50)=' EXC 4D5     J=1 RESONANT         ELEVEL=  12.8698'
      SCRPT(51)=' EXC 4D6     J=0                  ELEVEL=  12.9035'
      SCRPT(52)=' EXC 4D4#    J=4                  ELEVEL=  12.9725'
      SCRPT(53)=' EXC 3S1#    J=1 RESONANT         ELEVEL=  13.0044'
      SCRPT(54)=' EXC 4D4     J=3                  ELEVEL=  13.0080'
      SCRPT(55)=' EXC 4D3     J=2                  ELEVEL=  13.0192'
      SCRPT(56)=' EXC 2S3     J=0                  ELEVEL=  13.0297'
      SCRPT(57)=' EXC 3S2     J=1 RESONANT         ELEVEL=  13.0365'
      SCRPT(58)=' EXC 4D1##   J=2                  ELEVEL=  13.0386'
      SCRPT(59)=' EXC 4D1#    J=3                  ELEVEL=  13.0442'
      SCRPT(60)=' EXC 3S5     J=2                  ELEVEL=  13.0986'
      SCRPT(61)=' EXC 4D2     J=1 RESONANT         ELEVEL=  13.0987'
      SCRPT(62)=' EXC 3S4     J=1 RESONANT         ELEVEL=  13.1139'
      SCRPT(63)=' EXC 4F   SUM                     ELEVEL=  13.14  '
      SCRPT(64)=' EXC 5D5     J=1 RESONANT         ELEVEL=  13.3501'
      SCRPT(65)=' EXC 5D2     J=1 RESONANT         ELEVEL=  13.4224'
      SCRPT(66)=' EXC 4S4     J=1 RESONANT         ELEVEL=  13.4365'
      SCRPT(67)=' EXC HIGH    J=1 RESONANT         ELEVEL=  13.6   '
      SCRPT(68)=' BREMSSTRAHLUNG FROM KRYPTON ATOM                 '
#      EN=-ESTEP/2.0
      DO 900 I=1,NSTEP      
      EN=EG(I)                           
#      EN=EN+ESTEP
      IF(EN > EIN(1):
) :
       GAMMA1=(EMASS2+2.00*EN)/EMASS2
       GAMMA2=GAMMA1*GAMMA1
       BETA=math.sqrt(1.00-1.00/GAMMA2)
       BETA2=BETA*BETA
      # endIF                                                       
      IF(EN == 0.0):
 :
       QELA=37.8D-16
       QMOM=37.8D-16        
       GO TO 200
      # endIF 
      DO 110 J=2,NEL                                                    
      IF(EN <= XEL(J):
) GO TO 120                                        
  110 CONTINUE                                                          
      J=NEL      
# USE LOG INTERPOLATION 
  120 Y1=math.log(YEL(J-1))
      Y2=math.log(YEL(J))       
      X1=math.log(XEL(J-1))
      X2=math.log(XEL(J))                                                   
      A=(Y2-Y1)/(X2-X1)                         
      B=(X1*Y2-X2*Y1)/(X1-X2)   
      QELA=math.exp((A*math.log(EN)+B))*1.0D-16
      DO 150 J=2,NDATA                                                  
      IF(EN <= XEN(J):
) GO TO 160                                        
  150 CONTINUE                                                          
      J=NDATA
# USE LOG INTERPOLATION 
  160 Y1=math.log(YXSEC(J-1))
      Y2=math.log(YXSEC(J))       
      X1=math.log(XEN(J-1))
      X2=math.log(XEN(J))                                                   
      A=(Y2-Y1)/(X2-X1)                         
      B=(X1*Y2-X2*Y1)/(X1-X2)   
      QMOM=math.exp((A*math.log(EN)+B))*1.0D-16
  200 CONTINUE
      PQ1=0.5+(QELA-QMOM)/QELA
      DO 201 J=2,NEPSI
      IF(EN <= XEPS(J):
) GO TO 202
  201 CONTINUE
      J=NEPSI
  202 A=(YEPS(J)-YEPS(J-1))/(XEPS(J)-XEPS(J-1))
      B=(XEPS(J-1)*YEPS(J)-XEPS(J)*YEPS(J-1))/(XEPS(J-1)-XEPS(J))
      PQ2=A*EN+B
# EPSILON =1.0-YEPS
      PQ2=1.00-PQ2
      IF(NANISO == 1):
 PEQEL(2,I)=PQ1
      IF(NANISO == 2):
 PEQEL(2,I)=PQ2
      Q(2,I)=QELA
      IF(NANISO == 0):
 :
       Q(2,I)=QMOM
       PEQEL(2,I)=0.5
      # endIF
# IONISATION FOR CHARGE =1                                      
      QION(1,I)=0.0 
      PEQION(1,I)=0.50
      IF(NANISO == 2):
 PEQION(1,I)=0.00                                 
      IF(EN <= EION(1):
) GO TO 225
      IF(EN > XION(NIONG):
) GO TO 221                               
      DO 210 J=2,NIONG                                                  
      IF(EN <= XION(J):
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NIONG                                                           
  220 A=(YIN1(J)-YIN1(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YIN1(J)-XION(J)*YIN1(J-1))/(XION(J-1)-XION(J))       
      QION(1,I)=(A*EN+B)*1.0D-16
      GO TO 222
# USE BORN BETHE ABOVE XION(NIONG) EV.
  221 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(1,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.9009 
  222 CONTINUE
# USE ANISOTROPIC SCATTERING FOR PRIMARY IONISATION ELECTRON FOR
# ENERGIES ABOVE 2 * IONISATION ENERGY
# ANISOTROPIC DISTRIBUTION SAME AS ELASTIC AT ENERGY OFFSET BY
# IONISATION ENERGY
      IF(EN <= (2.0*EION(1):
)) GO TO 225
      PEQION(1,I)=PEQEL(2,(I-IOFFION(1)))
# IONISATION FOR CHARGE =2
  225 QION(2,I)=0.00
      PEQION(2,I)=0.50
      IF(NANISO == 2):
 PEQION(2,I)=0.00
      IF(EN <= EION(2):
) GO TO 2253
      IF(EN > XIN2(NION2):
) GO TO 1251
      DO 2251 J=2,NION2
      IF(EN <= XIN2(J):
) GO TO 2252
 2251 CONTINUE
      J=NION2
 2252 A=(YIN2(J)-YIN2(J-1))/(XIN2(J)-XIN2(J-1))
      B=(XIN2(J-1)*YIN2(J)-XIN2(J)*YIN2(J-1))/(XIN2(J-1)-XIN2(J))
      QION(2,I)=(A*EN+B)*1.D-16
      GO TO 1252
# USE BORN BETHE ABOVE XIN2(NION2)
 1251 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(2,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.0613
 1252 CONTINUE
      IF(EN <= (2.0*EION(2):
)) GO TO 2253
      PEQION(2,I)=PEQEL(2,(I-IOFFION(2)))
# IONISATION FOR CHARGE =3
 2253 QION(3,I)=0.00
      PEQION(3,I)=0.50
      IF(NANISO == 2):
 PEQION(3,I)=0.00
      IF(EN <= EION(3):
) GO TO 3256
      IF(EN > XIN3(NION3):
) GO TO 1253
      DO 2254 J=2,NION3
      IF(EN <= XIN3(J):
) GO TO 2255
 2254 CONTINUE
      J=NION3
 2255 A=(YIN3(J)-YIN3(J-1))/(XIN3(J)-XIN3(J-1))
      B=(XIN3(J-1)*YIN3(J)-XIN3(J)*YIN3(J-1))/(XIN3(J-1)-XIN3(J))
      QION(3,I)=(A*EN+B)*1.D-16
      GO TO 1254
# USE BORN BETHE ABOVE XIN3(NION3) EV
 1253 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(3,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.0291 
 1254 CONTINUE
      IF(EN <= (2.0*EION(3):
)) GO TO 3256
      PEQION(3,I)=PEQEL(2,(I-IOFFION(3)))
# IONISATION FOR CHARGE STATE =4
 3256 QION(4,I)=0.00
      PEQION(4,I)=0.50
      IF(NANISO == 2):
 PEQION(4,I)=0.00
      IF(EN <= EION(4):
) GO TO 2256
      IF(EN > XIN4(NION4):
) GO TO 3253
      DO 3254 J=2,NION4
      IF(EN <= XIN4(J):
) GO TO 3255
 3254 CONTINUE
      J=NION4
 3255 A=(YIN4(J)-YIN4(J-1))/(XIN4(J)-XIN4(J-1))
      B=(XIN4(J-1)*YIN4(J)-XIN4(J)*YIN4(J-1))/(XIN4(J-1)-XIN4(J))
      QION(4,I)=(A*EN+B)*1.D-16
      GO TO 1255
# USE BORN BETHE ABOBVE XIN4(NION4) EV
 3253 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(4,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.0082 
 1255 CONTINUE
      IF(EN <= (2.0*EION(4):
)) GO TO 2256
      PEQION(4,I)=PEQEL(2,(I-IOFFION(4)))
#
# M3 SHELL IONISATION
 2256 QION(5,I)=0.00
      PEQION(5,I)=0.50
      IF(NANISO == 2):
 PEQION(5,I)=0.00
      IF(EN <= EION(5):
) GO TO 2259
      DO 2257 J=2,NM3S
      IF(EN <= XM3S(J):
) GO TO 2258
 2257 CONTINUE
      J=NM3S
 2258 A=(YM3S(J)-YM3S(J-1))/(XM3S(J)-XM3S(J-1))
      B=(XM3S(J-1)*YM3S(J)-XM3S(J)*YM3S(J-1))/(XM3S(J-1)-XM3S(J))
      QION(5,I)=(A*EN+B)*1.D-16
      PEQION(5,I)=PEQEL(2,(I-IOFFION(5)))
# M2 SHELL IONISATION
 2259 QION(6,I)=0.00
      PEQION(6,I)=0.50
      IF(NANISO == 2):
 PEQION(6,I)=0.00
      IF(EN <= EION(6):
) GO TO 2262
      DO 2260 J=2,NM2S
      IF(EN <= XM2S(J):
) GO TO 2261
 2260 CONTINUE
      J=NM2S
 2261 A=(YM2S(J)-YM2S(J-1))/(XM2S(J)-XM2S(J-1))
      B=(XM2S(J-1)*YM2S(J)-XM2S(J)*YM2S(J-1))/(XM2S(J-1)-XM2S(J))
      QION(6,I)=(A*EN+B)*1.D-16
      PEQION(6,I)=PEQEL(2,(I-IOFFION(6)))
# M1 SHELL IONISATION
 2262 QION(7,I)=0.00
      PEQION(7,I)=0.50
      IF(NANISO == 2):
 PEQION(7,I)=0.00
      IF(EN <= EION(7):
) GO TO 2265
      DO 2263 J=2,NM1S
      IF(EN <= XM1S(J):
) GO TO 2264
 2263 CONTINUE
      J=NM1S
 2264 A=(YM1S(J)-YM1S(J-1))/(XM1S(J)-XM1S(J-1))
      B=(XM1S(J-1)*YM1S(J)-XM1S(J)*YM1S(J-1))/(XM1S(J-1)-XM1S(J))
      QION(7,I)=(A*EN+B)*1.D-16
      PEQION(7,I)=PEQEL(2,(I-IOFFION(7)))
# L3 SHELL IONISATION
 2265 QION(8,I)=0.00
      PEQION(8,I)=0.50
      IF(NANISO == 2):
 PEQION(8,I)=0.00
      IF(EN <= EION(8):
) GO TO 2268
      DO 2266 J=2,NL3S
      IF(EN <= XL3S(J):
) GO TO 2267
 2266 CONTINUE
      J=NL3S
 2267 A=(YL3S(J)-YL3S(J-1))/(XL3S(J)-XL3S(J-1))
      B=(XL3S(J-1)*YL3S(J)-XL3S(J)*YL3S(J-1))/(XL3S(J-1)-XL3S(J))
      QION(8,I)=(A*EN+B)*1.D-16
      PEQION(8,I)=PEQEL(2,(I-IOFFION(8)))
# L2 SHELL IONISATION
 2268 QION(9,I)=0.00
      PEQION(9,I)=0.50
      IF(NANISO == 2):
 PEQION(9,I)=0.00
      IF(EN <= EION(9):
) GO TO 2271
      DO 2269 J=2,NL2S
      IF(EN <= XL2S(J):
) GO TO 2270
 2269 CONTINUE
      J=NL2S
 2270 A=(YL2S(J)-YL2S(J-1))/(XL2S(J)-XL2S(J-1))
      B=(XL2S(J-1)*YL2S(J)-XL2S(J)*YL2S(J-1))/(XL2S(J-1)-XL2S(J))
      QION(9,I)=(A*EN+B)*1.D-16
      PEQION(9,I)=PEQEL(2,(I-IOFFION(9)))
# L1 SHELL IONISATION
 2271 QION(10,I)=0.00
      PEQION(10,I)=0.50
      IF(NANISO == 2):
 PEQION(10,I)=0.00
      IF(EN <= EION(10):
) GO TO 2274
      DO 2272 J=2,NL1S
      IF(EN <= XL1S(J):
) GO TO 2273
 2272 CONTINUE
      J=NL1S
 2273 A=(YL1S(J)-YL1S(J-1))/(XL1S(J)-XL1S(J-1))
      B=(XL1S(J-1)*YL1S(J)-XL1S(J)*YL1S(J-1))/(XL1S(J-1)-XL1S(J))
      QION(10,I)=(A*EN+B)*1.D-16
      PEQION(10,I)=PEQEL(2,(I-IOFFION(10)))
#  K SHELL IONISATION
 2274 QION(11,I)=0.00
      PEQION(11,I)=0.50
      IF(NANISO == 2):
 PEQION(11,I)=0.00
      IF(EN <= EION(11):
) GO TO 2277
      DO 2275 J=2,NKSH
      IF(EN <= XKSH(J):
) GO TO 2276
 2275 CONTINUE
      J=NKSH
 2276 A=(YKSH(J)-YKSH(J-1))/(XKSH(J)-XKSH(J-1))
      B=(XKSH(J-1)*YKSH(J)-XKSH(J)*YKSH(J-1))/(XKSH(J-1)-XKSH(J))
      QION(11,I)=(A*EN+B)*1.D-16
      PEQION(11,I)=PEQEL(2,(I-IOFFION(11)))
#  ATTACHMENT                                                    
 2277 Q(4,I)=0.0
      QATT(1,I)=Q(4,I)
# COUNTING IONISATION                                         
      Q(5,I)=0.0
      PEQEL(5,I)=0.50
      IF(NANISO == 2):
 PEQEL(5,I)=0.00
      IF(EN <= E(3):
) GO TO 242
      IF(EN > XION(NIONG):
) GO TO 241
      DO 231 J=2,NIONG
      IF(EN <= XION(J):
) GO TO 240
  231 CONTINUE
      J=NIONG
  240 A=(YINC(J)-YINC(J-1))/(XION(J)-XION(J-1))
      B=(XION(J-1)*YINC(J)-XION(J)*YINC(J-1))/(XION(J-1)-XION(J))
      Q(5,I)=(A*EN+B)*1.D-16
      GO TO 242
# USE BORN BETHE X-SECTION ABOVE XION(NIONG) EV.
  241 Q(5,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2) 
  242 CONTINUE                                                       
# CORRECTION TO SHARGE STATE 1 2 3 AND 4 X-SECTION FOR K L AND M SHELLS
# GIVES TOTAL IONISATION EQUAL TO OSCILLATOR SUM
      QTEMP=QION(5,I)+QION(6,I)+QION(7,I)+QION(8,I)+QION(9,I)+
     /QION(10,I)+QION(11,I)
      IF(Q(5,I):
 == 0.0) :
       QCORR=1.0
      else:
       QCORR=(Q(5,I)-QTEMP)/Q(5,I)
      # endIF
      QION(1,I)=QION(1,I)*QCORR
      QION(2,I)=QION(2,I)*QCORR
      QION(3,I)=QION(3,I)*QCORR
      QION(4,I)=QION(4,I)*QCORR
#
      Q(6,I)=0.0 
#
      DO 251 NL=1,NIN+1
      QIN(NL,I)=0.00
      PEQIN(NL,I)=0.50
      IF(NANISO == 2):
 :
       PEQIN(NL,I)=0.00
      # endIF
  251 CONTINUE                                                
# 1S5                                
      IF(EN <= EIN(1):
) GO TO 899
      IF(EN > X1S5(N1S5):
) GO TO 352                                
      DO 350 J=2,N1S5                                                  
      IF(EN <= X1S5(J):
) GO TO 351                                      
  350 CONTINUE                                                          
      J=N1S5                                                           
  351 A=(Y1S5(J)-Y1S5(J-1))/(X1S5(J)-X1S5(J-1))                     
      B=(X1S5(J-1)*Y1S5(J)-X1S5(J)*Y1S5(J-1))/(X1S5(J-1)-X1S5(J)) 
      QIN(1,I)=(A*EN+B)*1.0D-18*AN1S
      GO TO 353
# SCALED X-SECTION ABOVE X1S5(N1S5) EV BY 1/E**3
  352 QIN(1,I)=Y1S5(N1S5)*(X1S5(N1S5)/EN)**3*1.0D-18*AN1S
  353 IF(EN <= (2.0*EIN(1))) GO TO 354
      PEQIN(1,I)=PEQEL(2,(I-IOFFN(1)))
# 1S4                                                 F=0.203
  354 IF(EN <= EIN(2)) GO TO 899
      IF(EN > X1S4(N1S4):
) GO TO 357
      DO 355 J=2,N1S4
      IF(EN <= X1S4(J):
) GO TO 356
  355 CONTINUE
      J=N1S4
  356 A=(Y1S4(J)-Y1S4(J-1))/(X1S4(J)-X1S4(J-1))                     
      B=(X1S4(J-1)*Y1S4(J)-X1S4(J)*Y1S4(J-1))/(X1S4(J-1)-X1S4(J)) 
      QIN(2,I)=(A*EN+B)*1.0D-18*AN1S
      GO TO 358
  357 QIN(2,I)=0.203/(EIN(2)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(2)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(2)+E(3))
  358 IF(EN <= (2.0*EIN(2))) GO TO 359
      PEQIN(2,I)=PEQEL(2,(I-IOFFN(2)))
# 1S3
  359 IF(EN <= EIN(3)) GO TO 899
      IF(EN > X1S3(N1S3):
) GO TO 362                                
      DO 360 J=2,N1S3                                                  
      IF(EN <= X1S3(J):
) GO TO 361                                      
  360 CONTINUE                                                          
      J=N1S3                                                           
  361 A=(Y1S3(J)-Y1S3(J-1))/(X1S3(J)-X1S3(J-1))                     
      B=(X1S3(J-1)*Y1S3(J)-X1S3(J)*Y1S3(J-1))/(X1S3(J-1)-X1S3(J)) 
      QIN(3,I)=(A*EN+B)*1.0D-18*AN1S
      GO TO 363
# SCALED X-SECTION ABOVE X1S3(N1S3) EV BY 1/E**3
  362 QIN(3,I)=Y1S3(N1S3)*(X1S3(N1S3)/EN)**3*1.0D-18*AN1S
  363 IF(EN <= (2.0*EIN(3))) GO TO 364
      PEQIN(3,I)=PEQEL(2,(I-IOFFN(3)))
# 1S2                                                 F=0.182
  364 IF(EN <= EIN(4)) GO TO 899
      IF(EN > X1S2(N1S2):
) GO TO 367
      DO 365 J=2,N1S2
      IF(EN <= X1S2(J):
) GO TO 366
  365 CONTINUE
      J=N1S2
  366 A=(Y1S2(J)-Y1S2(J-1))/(X1S2(J)-X1S2(J-1))                     
      B=(X1S2(J-1)*Y1S2(J)-X1S2(J)*Y1S2(J-1))/(X1S2(J-1)-X1S2(J)) 
      QIN(4,I)=(A*EN+B)*1.0D-18*AN1S
      GO TO 368
  367 QIN(4,I)=0.182/(EIN(4)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(4)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(4)+E(3))
  368 IF(EN <= (2.0*EIN(4))) GO TO 369
      PEQIN(4,I)=PEQEL(2,(I-IOFFN(4)))
# 2P10
  369 IF(EN <= EIN(5)) GO TO 899
      IF(EN > X2P10(N2P10):
) GO TO 372                                
      DO 370 J=2,N2P10                                                  
      IF(EN <= X2P10(J):
) GO TO 371                                      
  370 CONTINUE                                                          
      J=N2P10                                                           
  371 A=(Y2P10(J)-Y2P10(J-1))/(X2P10(J)-X2P10(J-1))                     
      B=(X2P10(J-1)*Y2P10(J)-X2P10(J)*Y2P10(J-1))/(X2P10(J-1)-X2P10(J)) 
      QIN(5,I)=(A*EN+B)*1.0D-18*AN2P10
      GO TO 373
# SCALED X-SECTION ABOVE X2P10(N2P10) EV BY 1/E**3
  372 QIN(5,I)=Y2P10(N2P10)*(X2P10(N2P10)/EN)**3*1.0D-18*AN2P10
  373 IF(EN <= (2.0*EIN(5))) GO TO 374
      PEQIN(5,I)=PEQEL(2,(I-IOFFN(5)))
# 2P9
  374 IF(EN <= EIN(6)) GO TO 899
      IF(EN > X2P9(N2P9):
) GO TO 377                                
      DO 375 J=2,N2P9                                                  
      IF(EN <= X2P9(J):
) GO TO 376                                      
  375 CONTINUE                                                          
      J=N2P9                                                           
  376 A=(Y2P9(J)-Y2P9(J-1))/(X2P9(J)-X2P9(J-1))                     
      B=(X2P9(J-1)*Y2P9(J)-X2P9(J)*Y2P9(J-1))/(X2P9(J-1)-X2P9(J)) 
      QIN(6,I)=(A*EN+B)*1.0D-18*AN2P
      GO TO 378
# SCALED X-SECTION ABOVE X2P9(N2P9) EV BY 1/E**3
  377 QIN(6,I)=Y2P9(N2P9)*(X2P9(N2P9)/EN)**3*1.0D-18*AN2P
  378 IF(EN <= (2.0*EIN(6))) GO TO 379
      PEQIN(6,I)=PEQEL(2,(I-IOFFN(6)))
# 2P8
  379 IF(EN <= EIN(7)) GO TO 899
      IF(EN > X2P8(N2P8):
) GO TO 382                                
      DO 380 J=2,N2P8                                                  
      IF(EN <= X2P8(J):
) GO TO 381                                      
  380 CONTINUE                                                          
      J=N2P8                                                           
  381 A=(Y2P8(J)-Y2P8(J-1))/(X2P8(J)-X2P8(J-1))                     
      B=(X2P8(J-1)*Y2P8(J)-X2P8(J)*Y2P8(J-1))/(X2P8(J-1)-X2P8(J)) 
      QIN(7,I)=(A*EN+B)*1.0D-18*AN2P
      GO TO 383
# SCALED X-SECTION ABOVE X2P8(N2P8) EV BY 1/E   
  382 QIN(7,I)=Y2P8(N2P8)*(X2P8(N2P8)/EN)*1.0D-18*AN2P
  383 IF(EN <= (2.0*EIN(7))) GO TO 384
      PEQIN(7,I)=PEQEL(2,(I-IOFFN(7)))
# 2P7
  384 IF(EN <= EIN(8)) GO TO 899
      IF(EN > X2P7(N2P7):
) GO TO 387                                
      DO 385 J=2,N2P7                                                  
      IF(EN <= X2P7(J):
) GO TO 386                                      
  385 CONTINUE                                                          
      J=N2P7                                                           
  386 A=(Y2P7(J)-Y2P7(J-1))/(X2P7(J)-X2P7(J-1))                     
      B=(X2P7(J-1)*Y2P7(J)-X2P7(J)*Y2P7(J-1))/(X2P7(J-1)-X2P7(J)) 
      QIN(8,I)=(A*EN+B)*1.0D-18*AN2P
      GO TO 388
# SCALED X-SECTION ABOVE X2P7(N2P7) EV BY 1/E**3
  387 QIN(8,I)=Y2P7(N2P7)*(X2P7(N2P7)/EN)**3*1.0D-18*AN2P
  388 IF(EN <= (2.0*EIN(8))) GO TO 389
      PEQIN(8,I)=PEQEL(2,(I-IOFFN(8)))
# 2P6
  389 IF(EN <= EIN(9)) GO TO 899
      IF(EN > X2P6(N2P6):
) GO TO 392                                
      DO 390 J=2,N2P6                                                  
      IF(EN <= X2P6(J):
) GO TO 391                                      
  390 CONTINUE                                                          
      J=N2P6                                                           
  391 A=(Y2P6(J)-Y2P6(J-1))/(X2P6(J)-X2P6(J-1))                     
      B=(X2P6(J-1)*Y2P6(J)-X2P6(J)*Y2P6(J-1))/(X2P6(J-1)-X2P6(J)) 
      QIN(9,I)=(A*EN+B)*1.0D-18*AN2P
      GO TO 393
# SCALED X-SECTION ABOVE X2P6(N2P6) EV BY 1/E   
  392 QIN(9,I)=Y2P6(N2P6)*(X2P6(N2P6)/EN)*1.0D-18*AN2P
  393 IF(EN <= (2.0*EIN(9))) GO TO 394
      PEQIN(9,I)=PEQEL(2,(I-IOFFN(9)))
# 2P5
  394 IF(EN <= EIN(10)) GO TO 899
      IF(EN > X2P5(N2P5):
) GO TO 397                                
      DO 395 J=2,N2P5                                                  
      IF(EN <= X2P5(J):
) GO TO 396                                      
  395 CONTINUE                                                          
      J=N2P5                                                           
  396 A=(Y2P5(J)-Y2P5(J-1))/(X2P5(J)-X2P5(J-1))                     
      B=(X2P5(J-1)*Y2P5(J)-X2P5(J)*Y2P5(J-1))/(X2P5(J-1)-X2P5(J)) 
      QIN(10,I)=(A*EN+B)*1.0D-18*AN2P5
      GO TO 398
# SCALED X-SECTION ABOVE X2P5(N2P5) EV BY 1/E   
  397 QIN(10,I)=Y2P5(N2P5)*(X2P5(N2P5)/EN)*1.0D-18*AN2P5
  398 IF(EN <= (2.0*EIN(10))) GO TO 399
      PEQIN(10,I)=PEQEL(2,(I-IOFFN(10)))
# 3D6
  399 IF(EN <= EIN(11)) GO TO 899
      IF(EN > X3D6(N3D6):
) GO TO 402                                
      DO 400 J=2,N3D6                                                  
      IF(EN <= X3D6(J):
) GO TO 401                                      
  400 CONTINUE                                                          
      J=N3D6                                                           
  401 A=(Y3D6(J)-Y3D6(J-1))/(X3D6(J)-X3D6(J-1))                     
      B=(X3D6(J-1)*Y3D6(J)-X3D6(J)*Y3D6(J-1))/(X3D6(J-1)-X3D6(J)) 
      QIN(11,I)=(A*EN+B)*1.0D-18*AN3D
      GO TO 403
# SCALED X-SECTION ABOVE X3D6(N3D6) EV BY 1/E**3
  402 QIN(11,I)=Y3D6(N3D6)*(X3D6(N3D6)/EN)**3*1.0D-18*AN3D
  403 IF(EN <= (2.0*EIN(11))) GO TO 404
      PEQIN(11,I)=PEQEL(2,(I-IOFFN(11)))
# 3D5
  404 IF(EN <= EIN(12)) GO TO 899
      IF(EN > X3D5(N3D5):
) GO TO 407                                
      DO 405 J=2,N3D5                                                  
      IF(EN <= X3D5(J):
) GO TO 406                                      
  405 CONTINUE                                                          
      J=N3D5                                                           
  406 A=(Y3D5(J)-Y3D5(J-1))/(X3D5(J)-X3D5(J-1))                     
      B=(X3D5(J-1)*Y3D5(J)-X3D5(J)*Y3D5(J-1))/(X3D5(J-1)-X3D5(J)) 
      QIN(12,I)=(A*EN+B)*1.0D-18*AN3D
      GO TO 408
# USE BEF SCALING ABOVE X3D5(N3D5) EV                      F=0.0053
  407 QIN(12,I)=0.0053/(EIN(12)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(12)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(12)+E(3))     
      IF(QIN(12,I):
 < 0.0) QIN(12,I)=0.00
  408 IF(EN <= (2.0*EIN(12))) GO TO 409
      PEQIN(12,I)=PEQEL(2,(I-IOFFN(12)))
# 2P4
  409 IF(EN <= EIN(13)) GO TO 899
      IF(EN > X2P4(N2P4):
) GO TO 412                                
      DO 410 J=2,N2P4                                                  
      IF(EN <= X2P4(J):
) GO TO 411                                      
  410 CONTINUE                                                          
      J=N2P4                                                           
  411 A=(Y2P4(J)-Y2P4(J-1))/(X2P4(J)-X2P4(J-1))                     
      B=(X2P4(J-1)*Y2P4(J)-X2P4(J)*Y2P4(J-1))/(X2P4(J-1)-X2P4(J)) 
      QIN(13,I)=(A*EN+B)*1.0D-18*AN2P
      GO TO 413
# SCALED X-SECTION ABOVE X2P4(N2P4) EV BY 1/E**3
  412 QIN(13,I)=Y2P4(N2P4)*(X2P4(N2P4)/EN)**3*1.0D-18*AN2P
  413 IF(EN <= (2.0*EIN(13))) GO TO 414
      PEQIN(13,I)=PEQEL(2,(I-IOFFN(13)))
# 3D3
  414 IF(EN <= EIN(14)) GO TO 899
      IF(EN > X3D3(N3D3):
) GO TO 417                                
      DO 415 J=2,N3D3                                                  
      IF(EN <= X3D3(J):
) GO TO 416                                      
  415 CONTINUE                                                          
      J=N3D3                                                           
  416 A=(Y3D3(J)-Y3D3(J-1))/(X3D3(J)-X3D3(J-1))                     
      B=(X3D3(J-1)*Y3D3(J)-X3D3(J)*Y3D3(J-1))/(X3D3(J-1)-X3D3(J)) 
      QIN(14,I)=(A*EN+B)*1.0D-18*AN3D
      GO TO 418
# SCALED X-SECTION ABOVE X3D3(N3D3) EV BY 1/E**3
  417 QIN(14,I)=Y3D3(N3D3)*(X3D3(N3D3)/EN)**3*1.0D-18*AN3D
  418 IF(EN <= (2.0*EIN(14))) GO TO 419
      PEQIN(14,I)=PEQEL(2,(I-IOFFN(14)))
# 3D4P
  419 IF(EN <= EIN(15)) GO TO 899
      IF(EN > X3D4P(N3D4P):
) GO TO 422                                
      DO 420 J=2,N3D4P                                                  
      IF(EN <= X3D4P(J):
) GO TO 421                                      
  420 CONTINUE                                                          
      J=N3D4P                                                           
  421 A=(Y3D4P(J)-Y3D4P(J-1))/(X3D4P(J)-X3D4P(J-1))                     
      B=(X3D4P(J-1)*Y3D4P(J)-X3D4P(J)*Y3D4P(J-1))/(X3D4P(J-1)-X3D4P(J)) 
      QIN(15,I)=(A*EN+B)*1.0D-18*AN3D
      GO TO 423
# SCALED X-SECTION ABOVE X3D4P(N3D4P) EV BY 1/E**3
  422 QIN(15,I)=Y3D4P(N3D4P)*(X3D4P(N3D4P)/EN)**3*1.0D-18*AN3D
  423 IF(EN <= (2.0*EIN(15))) GO TO 424
      PEQIN(15,I)=PEQEL(2,(I-IOFFN(15)))
# 2P3 
  424 IF(EN <= EIN(16)) GO TO 899
      IF(EN > X2P3(N2P3):
) GO TO 427                                
      DO 425 J=2,N2P3                                                  
      IF(EN <= X2P3(J):
) GO TO 426                                      
  425 CONTINUE                                                          
      J=N2P3                                                           
  426 A=(Y2P3(J)-Y2P3(J-1))/(X2P3(J)-X2P3(J-1))                     
      B=(X2P3(J-1)*Y2P3(J)-X2P3(J)*Y2P3(J-1))/(X2P3(J-1)-X2P3(J)) 
      QIN(16,I)=(A*EN+B)*1.0D-18*AN2P
      GO TO 428
# SCALED X-SECTION ABOVE X2P3(N2P3) EV BY 1/E**3
  427 QIN(16,I)=Y2P3(N2P3)*(X2P3(N2P3)/EN)**3*1.0D-18*AN2P
  428 IF(EN <= (2.0*EIN(16))) GO TO 429
      PEQIN(16,I)=PEQEL(2,(I-IOFFN(16)))
# 2P2 
  429 IF(EN <= EIN(17)) GO TO 899
      IF(EN > X2P2(N2P2):
) GO TO 432                                
      DO 430 J=2,N2P2                                                  
      IF(EN <= X2P2(J):
) GO TO 431                                      
  430 CONTINUE                                                          
      J=N2P2                                                           
  431 A=(Y2P2(J)-Y2P2(J-1))/(X2P2(J)-X2P2(J-1))                     
      B=(X2P2(J-1)*Y2P2(J)-X2P2(J)*Y2P2(J-1))/(X2P2(J-1)-X2P2(J)) 
      QIN(17,I)=(A*EN+B)*1.0D-18*AN2P
      GO TO 433
# SCALED X-SECTION ABOVE X2P2(N2P2) EV BY 1/E   
  432 QIN(17,I)=Y2P2(N2P2)*(X2P2(N2P2)/EN)*1.0D-18*AN2P
  433 IF(EN <= (2.0*EIN(17))) GO TO 434
      PEQIN(17,I)=PEQEL(2,(I-IOFFN(17)))
# 3D4 
  434 IF(EN <= EIN(18)) GO TO 899
      IF(EN > X3D4(N3D4):
) GO TO 437                                
      DO 435 J=2,N3D4                                                  
      IF(EN <= X3D4(J):
) GO TO 436                                      
  435 CONTINUE                                                          
      J=N3D4                                                           
  436 A=(Y3D4(J)-Y3D4(J-1))/(X3D4(J)-X3D4(J-1))                     
      B=(X3D4(J-1)*Y3D4(J)-X3D4(J)*Y3D4(J-1))/(X3D4(J-1)-X3D4(J)) 
      QIN(18,I)=(A*EN+B)*1.0D-18*AN3D
      GO TO 438
# SCALED X-SECTION ABOVE X3D4(N3D4) EV BY 1/E   
  437 QIN(18,I)=Y3D4(N3D4)*(X3D4(N3D4)/EN)*1.0D-18*AN3D
  438 IF(EN <= (2.0*EIN(18))) GO TO 439
      PEQIN(18,I)=PEQEL(2,(I-IOFFN(18)))
# 2P1 
  439 IF(EN <= EIN(19)) GO TO 899
      IF(EN > X2P1(N2P1):
) GO TO 442                                
      DO 440 J=2,N2P1                                                  
      IF(EN <= X2P1(J):
) GO TO 441                                      
  440 CONTINUE                                                          
      J=N2P1                                                           
  441 A=(Y2P1(J)-Y2P1(J-1))/(X2P1(J)-X2P1(J-1))                     
      B=(X2P1(J-1)*Y2P1(J)-X2P1(J)*Y2P1(J-1))/(X2P1(J-1)-X2P1(J)) 
      QIN(19,I)=(A*EN+B)*1.0D-18*AN2P1
      GO TO 443
# SCALED X-SECTION ABOVE X2P1(N2P1) EV BY 1/E   
  442 QIN(19,I)=Y2P1(N2P1)*(X2P1(N2P1)/EN)*1.0D-18*AN2P1
  443 IF(EN <= (2.0*EIN(19))) GO TO 444
      PEQIN(19,I)=PEQEL(2,(I-IOFFN(19)))
# 3D1PP
  444 IF(EN <= EIN(20)) GO TO 899
      IF(EN > X3D1PP(N3D1PP):
) GO TO 447                                
      DO 445 J=2,N3D1PP                                                
      IF(EN <= X3D1PP(J):
) GO TO 446
  445 CONTINUE                                    
      J=N3D1PP                                                         
  446 A=(Y3D1PP(J)-Y3D1PP(J-1))/(X3D1PP(J)-X3D1PP(J-1))                
      B=(X3D1PP(J-1)*Y3D1PP(J)-X3D1PP(J)*Y3D1PP(J-1))/(X3D1PP(J-1)-
     /X3D1PP(J)) 
      QIN(20,I)=(A*EN+B)*1.0D-18*AN3D
      GO TO 448
# SCALED X-SECTION ABOVE X3D1PP(N3D1PP) EV BY 1/E**3   
  447 QIN(20,I)=Y3D1PP(N3D1PP)*(X3D1PP(N3D1PP)/EN)**3*1.0D-18*AN3D
  448 IF(EN <= (2.0*EIN(20))) GO TO 449
      PEQIN(20,I)=PEQEL(2,(I-IOFFN(20)))
# 3D1P 
  449 IF(EN <= EIN(21)) GO TO 899
      IF(EN > X3D1P(N3D1P):
) GO TO 452                                
      DO 450 J=2,N3D1P                                                
      IF(EN <= X3D1P(J):
) GO TO 451
  450 CONTINUE                                    
      J=N3D1P                                                         
  451 A=(Y3D1P(J)-Y3D1P(J-1))/(X3D1P(J)-X3D1P(J-1))                
      B=(X3D1P(J-1)*Y3D1P(J)-X3D1P(J)*Y3D1P(J-1))/(X3D1P(J-1)-X3D1P(J)) 
      QIN(21,I)=(A*EN+B)*1.0D-18*AN3D
      GO TO 453
# SCALED X-SECTION ABOVE X3D1P(N3D1P) EV BY 1/E  
  452 QIN(21,I)=Y3D1P(N3D1P)*(X3D1P(N3D1P)/EN)*1.0D-18*AN3D
  453 IF(EN <= (2.0*EIN(21))) GO TO 454
      PEQIN(21,I)=PEQEL(2,(I-IOFFN(21)))
# 2S5  
  454 IF(EN <= EIN(22)) GO TO 899
      IF(EN > X2S5(N2S5):
) GO TO 457                                
      DO 455 J=2,N2S5                                                
      IF(EN <= X2S5(J):
) GO TO 456
  455 CONTINUE                                    
      J=N2S5                                                         
  456 A=(Y2S5(J)-Y2S5(J-1))/(X2S5(J)-X2S5(J-1))                
      B=(X2S5(J-1)*Y2S5(J)-X2S5(J)*Y2S5(J-1))/(X2S5(J-1)-X2S5(J)) 
      QIN(22,I)=(A*EN+B)*1.0D-18*AN1S    
      GO TO 458
# SCALED X-SECTION ABOVE X2S5(N2S5) EV BY 1/E**3  
  457 QIN(22,I)=Y2S5(N2S5)*(X2S5(N2S5)/EN)**3*1.0D-18*AN1S
  458 IF(EN <= (2.0*EIN(22))) GO TO 459
      PEQIN(22,I)=PEQEL(2,(I-IOFFN(22)))
# 3D2  BEF SCALED                                         F=0.082
  459 IF(EN <= EIN(23)) GO TO 899
      QIN(23,I)=0.082/(EIN(23)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(23)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(23)+E(3))
      IF(QIN(23,I):
 < 0.0) QIN(23,I)=0.00
      IF(EN <= (2.0*EIN(23):
)) GO TO 460
      PEQIN(23,I)=PEQEL(2,(I-IOFFN(23)))
# 2S4  BEF SCALED                                         F=0.154
  460 IF(EN <= EIN(24)) GO TO 899
      QIN(24,I)=0.154/(EIN(24)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(24)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(24)+E(3))
      IF(QIN(24,I):
 < 0.0) QIN(24,I)=0.0
      IF(EN <= (2.0*EIN(24):
)) GO TO 461
      PEQIN(24,I)=PEQEL(2,(I-IOFFN(24)))
# 3P10 
  461 IF(EN <= EIN(25)) GO TO 899
      IF(EN > X3P10(N3P10):
) GO TO 464                                
      DO 462 J=2,N3P10                                                
      IF(EN <= X3P10(J):
) GO TO 463
  462 CONTINUE                                    
      J=N3P10                                                         
  463 A=(Y3P10(J)-Y3P10(J-1))/(X3P10(J)-X3P10(J-1))                
      B=(X3P10(J-1)*Y3P10(J)-X3P10(J)*Y3P10(J-1))/(X3P10(J-1)-X3P10(J)) 
      QIN(25,I)=(A*EN+B)*1.0D-18*AN3P
      GO TO 465
# SCALED X-SECTION ABOVE X3P10(N3P10) EV BY 1/E**3  
  464 QIN(25,I)=Y3P10(N3P10)*(X3P10(N3P10)/EN)**3*1.0D-18*AN3P
  465 IF(EN <= (2.0*EIN(25))) GO TO 466
      PEQIN(25,I)=PEQEL(2,(I-IOFFN(25)))
# 3P9  
  466 IF(EN <= EIN(26)) GO TO 899
      IF(EN > X3P9(N3P9):
) GO TO 469                                
      DO 467 J=2,N3P9                                                
      IF(EN <= X3P9(J):
) GO TO 468
  467 CONTINUE                                    
      J=N3P9                                                         
  468 A=(Y3P9(J)-Y3P9(J-1))/(X3P9(J)-X3P9(J-1))                
      B=(X3P9(J-1)*Y3P9(J)-X3P9(J)*Y3P9(J-1))/(X3P9(J-1)-X3P9(J)) 
      QIN(26,I)=(A*EN+B)*1.0D-18*AN3P
      GO TO 470
# SCALED X-SECTION ABOVE X3P9(N3P9) EV BY 1/E**3  
  469 QIN(26,I)=Y3P9(N3P9)*(X3P9(N3P9)/EN)**3*1.0D-18*AN3P
  470 IF(EN <= (2.0*EIN(26))) GO TO 471
      PEQIN(26,I)=PEQEL(2,(I-IOFFN(26)))
# 3P8  
  471 IF(EN <= EIN(27)) GO TO 899
      IF(EN > X3P8(N3P8):
) GO TO 474                                
      DO 472 J=2,N3P8                                                
      IF(EN <= X3P8(J):
) GO TO 473
  472 CONTINUE                                    
      J=N3P8                                                         
  473 A=(Y3P8(J)-Y3P8(J-1))/(X3P8(J)-X3P8(J-1))                
      B=(X3P8(J-1)*Y3P8(J)-X3P8(J)*Y3P8(J-1))/(X3P8(J-1)-X3P8(J)) 
      QIN(27,I)=(A*EN+B)*1.0D-18*AN3P
      GO TO 475
# SCALED X-SECTION ABOVE X3P8(N3P8) EV BY 1/E     
  474 QIN(27,I)=Y3P8(N3P8)*(X3P8(N3P8)/EN)*1.0D-18*AN3P
  475 IF(EN <= (2.0*EIN(27))) GO TO 476
      PEQIN(27,I)=PEQEL(2,(I-IOFFN(27)))
# 3S1PP  
  476 IF(EN <= EIN(28)) GO TO 899
      IF(EN > X3S1PP(N3S1PP):
) GO TO 479                                
      DO 477 J=2,N3S1PP                                                
      IF(EN <= X3S1PP(J):
) GO TO 478
  477 CONTINUE                                    
      J=N3S1PP                                                        
  478 A=(Y3S1PP(J)-Y3S1PP(J-1))/(X3S1PP(J)-X3S1PP(J-1))                
      B=(X3S1PP(J-1)*Y3S1PP(J)-X3S1PP(J)*Y3S1PP(J-1))/(X3S1PP(J-1)-
     /X3S1PP(J)) 
      QIN(28,I)=(A*EN+B)*1.0D-18*AN3D
      GO TO 480
# SCALED X-SECTION ABOVE X3S1PP(N3S1PP) EV BY 1/E**3     
  479 QIN(28,I)=Y3S1PP(N3S1PP)*(X3S1PP(N3S1PP)/EN)**3*1.0D-18*AN3D
  480 IF(EN <= (2.0*EIN(28))) GO TO 481
      PEQIN(28,I)=PEQEL(2,(I-IOFFN(28)))
# 3P7    
  481 IF(EN <= EIN(29)) GO TO 899
      IF(EN > X3P7(N3P7):
) GO TO 484                                
      DO 482 J=2,N3P7                                                
      IF(EN <= X3P7(J):
) GO TO 483
  482 CONTINUE                                    
      J=N3P7                                                        
  483 A=(Y3P7(J)-Y3P7(J-1))/(X3P7(J)-X3P7(J-1))                
      B=(X3P7(J-1)*Y3P7(J)-X3P7(J)*Y3P7(J-1))/(X3P7(J-1)-X3P7(J)) 
      QIN(29,I)=(A*EN+B)*1.0D-18*AN3P
      GO TO 485
# SCALED X-SECTION ABOVE X3P7(N3P7) EV BY 1/E**3     
  484 QIN(29,I)=Y3P7(N3P7)*(X3P7(N3P7)/EN)**3*1.0D-18*AN3P
  485 IF(EN <= (2.0*EIN(29))) GO TO 486
      PEQIN(29,I)=PEQEL(2,(I-IOFFN(29)))
# 3P6    
  486 IF(EN <= EIN(30)) GO TO 899
      IF(EN > X3P6(N3P6):
) GO TO 489                                
      DO 487 J=2,N3P6                                                
      IF(EN <= X3P6(J):
) GO TO 488
  487 CONTINUE                                    
      J=N3P6                                                        
  488 A=(Y3P6(J)-Y3P6(J-1))/(X3P6(J)-X3P6(J-1))                
      B=(X3P6(J-1)*Y3P6(J)-X3P6(J)*Y3P6(J-1))/(X3P6(J-1)-X3P6(J)) 
      QIN(30,I)=(A*EN+B)*1.0D-18*AN3P
      GO TO 490
# SCALED X-SECTION ABOVE X3P6(N3P6) EV BY 1/E        
  489 QIN(30,I)=Y3P6(N3P6)*(X3P6(N3P6)/EN)*1.0D-18*AN3P
  490 IF(EN <= (2.0*EIN(30))) GO TO 491
      PEQIN(30,I)=PEQEL(2,(I-IOFFN(30)))
# 3S1PPPP    
  491 IF(EN <= EIN(31)) GO TO 899
      IF(EN > X3S1PPPP(N3S1PPPP):
) GO TO 494                            
      DO 492 J=2,N3S1PPPP                                            
      IF(EN <= X3S1PPPP(J):
) GO TO 493
  492 CONTINUE                                    
      J=N3S1PPPP                                                        
  493 A=(Y3S1PPPP(J)-Y3S1PPPP(J-1))/(X3S1PPPP(J)-X3S1PPPP(J-1))       
      B=(X3S1PPPP(J-1)*Y3S1PPPP(J)-X3S1PPPP(J)*Y3S1PPPP(J-1))/
     /(X3S1PPPP(J-1)-X3S1PPPP(J)) 
      QIN(31,I)=(A*EN+B)*1.0D-18*AN3D
      GO TO 495
# SCALED X-SECTION ABOVE X3S1PPPP(N3S1PPPP) EV BY 1/E**3        
  494 QIN(31,I)=Y3S1PPPP(N3S1PPPP)*(X3S1PPPP(N3S1PPPP)/EN)**3*1.0D-18*
     /AN3D
  495 IF(EN <= (2.0*EIN(31))) GO TO 496
      PEQIN(31,I)=PEQEL(2,(I-IOFFN(31)))
# 3S1PPP    
  496 IF(EN <= EIN(32)) GO TO 899
      IF(EN > X3S1PPP(N3S1PPP):
) GO TO 499                            
      DO 497 J=2,N3S1PPP                                            
      IF(EN <= X3S1PPP(J):
) GO TO 498
  497 CONTINUE                                    
      J=N3S1PPP                                                        
  498 A=(Y3S1PPP(J)-Y3S1PPP(J-1))/(X3S1PPP(J)-X3S1PPP(J-1))       
      B=(X3S1PPP(J-1)*Y3S1PPP(J)-X3S1PPP(J)*Y3S1PPP(J-1))/
     /(X3S1PPP(J-1)-X3S1PPP(J)) 
      QIN(32,I)=(A*EN+B)*1.0D-18*AN3D
      GO TO 500
# SCALED X-SECTION ABOVE X3S1PPP(N3S1PPP) EV BY 1/E        
  499 QIN(32,I)=Y3S1PPP(N3S1PPP)*(X3S1PPP(N3S1PPP)/EN)*1.0D-18*AN3D
  500 IF(EN <= (2.0*EIN(32))) GO TO 501
      PEQIN(32,I)=PEQEL(2,(I-IOFFN(32)))
# 3P5    
  501 IF(EN <= EIN(33)) GO TO 899
      IF(EN > X3P5(N3P5):
) GO TO 504                            
      DO 502 J=2,N3P5                                            
      IF(EN <= X3P5(J):
) GO TO 503
  502 CONTINUE                                    
      J=N3P5                                                        
  503 A=(Y3P5(J)-Y3P5(J-1))/(X3P5(J)-X3P5(J-1))       
      B=(X3P5(J-1)*Y3P5(J)-X3P5(J)*Y3P5(J-1))/(X3P5(J-1)-X3P5(J)) 
      QIN(33,I)=(A*EN+B)*1.0D-18*AN3P5
      GO TO 505
# SCALED X-SECTION ABOVE X3P5(N3P5) EV BY 1/E        
  504 QIN(33,I)=Y3P5(N3P5)*(X3P5(N3P5)/EN)*1.0D-18*AN3P5
  505 IF(EN <= (2.0*EIN(33))) GO TO 506
      PEQIN(33,I)=PEQEL(2,(I-IOFFN(33)))
# 4D5  BEF SCALED                                          F=0.0140
  506 IF(EN <= EIN(34)) GO TO 899
      QIN(34,I)=0.014/(EIN(34)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(34)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(34)+E(3))
      IF(QIN(34,I):
 < 0.0) QIN(34,I)=0.00
      IF(EN <= (2.0*EIN(34):
)) GO TO 507
      PEQIN(34,I)=PEQEL(2,(I-IOFFN(34)))
# 4D6    
  507 IF(EN <= EIN(35)) GO TO 899
      IF(EN > X4D6(N4D6):
) GO TO 510                            
      DO 508 J=2,N4D6                                            
      IF(EN <= X4D6(J):
) GO TO 509
  508 CONTINUE                                    
      J=N4D6                                                        
  509 A=(Y4D6(J)-Y4D6(J-1))/(X4D6(J)-X4D6(J-1))       
      B=(X4D6(J-1)*Y4D6(J)-X4D6(J)*Y4D6(J-1))/(X4D6(J-1)-X4D6(J)) 
      QIN(35,I)=(A*EN+B)*1.0D-18*AN4D
      GO TO 511
# SCALED X-SECTION ABOVE X4D6(N4D6) EV BY 1/E**3     
  510 QIN(35,I)=Y4D6(N4D6)*(X4D6(N4D6)/EN)**3*1.0D-18*AN4D
  511 IF(EN <= (2.0*EIN(35))) GO TO 512
      PEQIN(35,I)=PEQEL(2,(I-IOFFN(35)))
# 4D4P   
  512 IF(EN <= EIN(36)) GO TO 899
      IF(EN > X4D4P(N4D4P):
) GO TO 515                            
      DO 513 J=2,N4D4P                                            
      IF(EN <= X4D4P(J):
) GO TO 514
  513 CONTINUE                                    
      J=N4D4P                                                       
  514 A=(Y4D4P(J)-Y4D4P(J-1))/(X4D4P(J)-X4D4P(J-1))       
      B=(X4D4P(J-1)*Y4D4P(J)-X4D4P(J)*Y4D4P(J-1))/(X4D4P(J-1)-X4D4P(J)) 
      QIN(36,I)=(A*EN+B)*1.0D-18*AN4D
      GO TO 516
# SCALED X-SECTION ABOVE X4D4P(N4D4P) EV BY 1/E**3     
  515 QIN(36,I)=Y4D4P(N4D4P)*(X4D4P(N4D4P)/EN)**3*1.0D-18*AN4D
  516 IF(EN <= (2.0*EIN(36))) GO TO 517
      PEQIN(36,I)=PEQEL(2,(I-IOFFN(36)))
# 3S1P        BEF SCALED                                     F=0.0435
  517 IF(EN <= EIN(37)) GO TO 899
      QIN(37,I)=0.0435/(EIN(37)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(37)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(37)+E(3))
      IF(QIN(37,I):
 < 0.0) QIN(37,I)=0.00
      IF(EN <= (2.0*EIN(37):
)) GO TO 518
      PEQIN(37,I)=PEQEL(2,(I-IOFFN(37)))
# 4D4    
  518 IF(EN <= EIN(38)) GO TO 899
      IF(EN > X4D4(N4D4):
) GO TO 521                          
      DO 519 J=2,N4D4                                            
      IF(EN <= X4D4(J):
) GO TO 520
  519 CONTINUE                                    
      J=N4D4                                                       
  520 A=(Y4D4(J)-Y4D4(J-1))/(X4D4(J)-X4D4(J-1))       
      B=(X4D4(J-1)*Y4D4(J)-X4D4(J)*Y4D4(J-1))/(X4D4(J-1)-X4D4(J)) 
      QIN(38,I)=(A*EN+B)*1.0D-18*AN4D
      GO TO 522
# SCALED X-SECTION ABOVE X4D4(N4D4) EV BY 1/E     
  521 QIN(38,I)=Y4D4(N4D4)*(X4D4(N4D4)/EN)*1.0D-18*AN4D
  522 IF(EN <= (2.0*EIN(38))) GO TO 523
      PEQIN(38,I)=PEQEL(2,(I-IOFFN(38)))
# 4D3    
  523 IF(EN <= EIN(39)) GO TO 899
      IF(EN > X4D3(N4D3):
) GO TO 526                            
      DO 524 J=2,N4D3                                            
      IF(EN <= X4D3(J):
) GO TO 525
  524 CONTINUE                                    
      J=N4D3                                                       
  525 A=(Y4D3(J)-Y4D3(J-1))/(X4D3(J)-X4D3(J-1))       
      B=(X4D3(J-1)*Y4D3(J)-X4D3(J)*Y4D3(J-1))/(X4D3(J-1)-X4D3(J)) 
      QIN(39,I)=(A*EN+B)*1.0D-18*AN4D
      GO TO 527
# SCALED X-SECTION ABOVE X4D3(N4D3) EV BY 1/E**3  
  526 QIN(39,I)=Y4D3(N4D3)*(X4D3(N4D3)/EN)**3*1.0D-18*AN4D
  527 IF(EN <= (2.0*EIN(39))) GO TO 528
      PEQIN(39,I)=PEQEL(2,(I-IOFFN(39)))
# 2S3    
  528 IF(EN <= EIN(40)) GO TO 899
      IF(EN > X2S3(N2S3):
) GO TO 531                        
      DO 529 J=2,N2S3                                            
      IF(EN <= X2S3(J):
) GO TO 530
  529 CONTINUE                                    
      J=N2S3                                                       
  530 A=(Y2S3(J)-Y2S3(J-1))/(X2S3(J)-X2S3(J-1))       
      B=(X2S3(J-1)*Y2S3(J)-X2S3(J)*Y2S3(J-1))/(X2S3(J-1)-X2S3(J)) 
      QIN(40,I)=(A*EN+B)*1.0D-18*AN1S     
      GO TO 532
# SCALED X-SECTION ABOVE X2S3(N2S3) EV BY 1/E**3  
  531 QIN(40,I)=Y2S3(N2S3)*(X2S3(N2S3)/EN)**3*1.0D-18*AN1S
  532 IF(EN <= (2.0*EIN(40))) GO TO 533
      PEQIN(40,I)=PEQEL(2,(I-IOFFN(40)))
# 2S2         BEF SCALED                                 F=0.0105
  533 IF(EN <= EIN(41)) GO TO 899
      QIN(41,I)=0.0105/(EIN(41)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(41)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(41)+E(3))
      IF(QIN(41,I):
 < 0.0) QIN(41,I)=0.00
      IF(EN <= (2.0*EIN(41):
)) GO TO 534
      PEQIN(41,I)=PEQEL(2,(I-IOFFN(41)))
# 4D1PP    
  534 IF(EN <= EIN(42)) GO TO 899
      IF(EN > X4D1PP(N4D1PP):
) GO TO 537                            
      DO 535 J=2,N4D1PP                                            
      IF(EN <= X4D1PP(J):
) GO TO 536
  535 CONTINUE                                    
      J=N4D1PP                                                       
  536 A=(Y4D1PP(J)-Y4D1PP(J-1))/(X4D1PP(J)-X4D1PP(J-1))       
      B=(X4D1PP(J-1)*Y4D1PP(J)-X4D1PP(J)*Y4D1PP(J-1))/
     /(X4D1PP(J-1)-X4D1PP(J)) 
      QIN(42,I)=(A*EN+B)*1.0D-18*AN4D
      GO TO 538
# SCALED X-SECTION ABOVE X4D1PP(N4D1PP) EV BY 1/E**3  
  537 QIN(42,I)=Y4D1PP(N4D1PP)*(X4D1PP(N4D1PP)/EN)**3*1.0D-18*AN4D
  538 IF(EN <= (2.0*EIN(42))) GO TO 539
      PEQIN(42,I)=PEQEL(2,(I-IOFFN(42)))
# 4D1P   
  539 IF(EN <= EIN(43)) GO TO 899
      IF(EN > X4D1P(N4D1P):
) GO TO 542                            
      DO 540 J=2,N4D1P                                            
      IF(EN <= X4D1P(J):
) GO TO 541
  540 CONTINUE                                    
      J=N4D1P                                                       
  541 A=(Y4D1P(J)-Y4D1P(J-1))/(X4D1P(J)-X4D1P(J-1))       
      B=(X4D1P(J-1)*Y4D1P(J)-X4D1P(J)*Y4D1P(J-1))/(X4D1P(J-1)-X4D1P(J)) 
      QIN(43,I)=(A*EN+B)*1.0D-18*AN4D
      GO TO 543
# SCALED X-SECTION ABOVE X4D1P(N4D1P) EV BY 1/E**3  
  542 QIN(43,I)=Y4D1P(N4D1P)*(X4D1P(N4D1P)/EN)**3*1.0D-18*AN4D
  543 IF(EN <= (2.0*EIN(43))) GO TO 544
      PEQIN(43,I)=PEQEL(2,(I-IOFFN(43)))
# 3S5    
  544 IF(EN <= EIN(44)) GO TO 899
      IF(EN > X3S5(N3S5):
) GO TO 547                            
      DO 545 J=2,N3S5                                           
      IF(EN <= X3S5(J):
) GO TO 546
  545 CONTINUE                                    
      J=N3S5                                                       
  546 A=(Y3S5(J)-Y3S5(J-1))/(X3S5(J)-X3S5(J-1))       
      B=(X3S5(J-1)*Y3S5(J)-X3S5(J)*Y3S5(J-1))/(X3S5(J-1)-X3S5(J)) 
      QIN(44,I)=(A*EN+B)*1.0D-18*AN1S
      GO TO 548
# SCALED X-SECTION ABOVE X3S5(N3S5) EV BY 1/E**3  
  547 QIN(44,I)=Y3S5(N3S5)*(X3S5(N3S5)/EN)**3*1.0D-18*AN1S
  548 IF(EN <= (2.0*EIN(44))) GO TO 549
      PEQIN(44,I)=PEQEL(2,(I-IOFFN(44)))
# 4D2         BEF SCALED                                   F=0.0970
  549 IF(EN <= EIN(45)) GO TO 899
      QIN(45,I)=0.0970/(EIN(45)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(45)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(45)+E(3))
      IF(QIN(45,I):
 < 0.0) QIN(45,I)=0.00
      IF(EN <= (2.0*EIN(45):
)) GO TO 550
      PEQIN(45,I)=PEQEL(2,(I-IOFFN(45)))
# 3S4         BEF SCALED                                   F=0.0808
  550 IF(EN <= EIN(46)) GO TO 899
      QIN(46,I)=0.0808/(EIN(46)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(46)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(46)+E(3))
      IF(QIN(46,I):
 < 0.0) QIN(46,I)=0.00
      IF(EN <= (2.0*EIN(46):
)) GO TO 551 
      PEQIN(46,I)=PEQEL(2,(I-IOFFN(46)))
# 4FS   
  551 IF(EN <= EIN(47)) GO TO 899
      IF(EN > X4FS(N4FS):
) GO TO 554                            
      DO 552 J=2,N4FS                                           
      IF(EN <= X4FS(J):
) GO TO 553
  552 CONTINUE                                    
      J=N4FS                                                       
  553 A=(Y4FS(J)-Y4FS(J-1))/(X4FS(J)-X4FS(J-1))       
      B=(X4FS(J-1)*Y4FS(J)-X4FS(J)*Y4FS(J-1))/(X4FS(J-1)-X4FS(J)) 
      QIN(47,I)=(A*EN+B)*1.0D-18*AN4D
      GO TO 555
# SCALED X-SECTION ABOVE X4FS(N4FS) EV BY 1/E  
  554 QIN(47,I)=Y4FS(N4FS)*(X4FS(N4FS)/EN)*1.0D-18*AN4D
  555 IF(EN <= (2.0*EIN(47))) GO TO 556
      PEQIN(47,I)=PEQEL(2,(I-IOFFN(47)))
# 5D5         BEF SCALED                                  F=0.0015
  556 IF(EN <= EIN(48)) GO TO 899
      QIN(48,I)=0.0015/(EIN(48)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(48)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(48)+E(3))
      IF(QIN(48,I):
 < 0.0) QIN(48,I)=0.00
      IF(EN <= (2.0*EIN(48):
)) GO TO 557
      PEQIN(48,I)=PEQEL(2,(I-IOFFN(48)))
# 5D2         BEF SCALED                                   F=0.0439
  557 IF(EN <= EIN(49)) GO TO 899
      QIN(49,I)=0.0439/(EIN(49)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(49)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(49)+E(3))
      IF(QIN(49,I):
 < 0.0) QIN(49,I)=0.00
      IF(EN <= (2.0*EIN(49):
)) GO TO 558
      PEQIN(49,I)=PEQEL(2,(I-IOFFN(49)))
# 4S4         BEF SCALED                                   F=0.0203
  558 IF(EN <= EIN(50)) GO TO 899
      QIN(50,I)=0.0203/(EIN(50)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(50)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(50)+E(3))
      IF(QIN(50,I):
 < 0.0) QIN(50,I)=0.00
      IF(EN <= (2.0*EIN(50):
)) GO TO 559
      PEQIN(50,I)=PEQEL(2,(I-IOFFN(50)))
# SUM OF HIGHER DIPOLE STATES       BEF SCALED              F=0.1680
  559 IF(EN <= EIN(51)) GO TO 899
      QIN(51,I)=0.1680/(EIN(51)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(51)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(51)+E(3))
      IF(QIN(51,I):
 < 0.0) QIN(51,I)=0.00
      IF(EN <= (2.0*EIN(51):
)) GO TO 899
      PEQIN(51,I)=PEQEL(2,(I-IOFFN(51)))
# LOAD BREMSSTRAHLUNG X-SECTIONS
c     IF(EN <= 1000.) GO TO 899
c     DO 600 J=2,NBREM
c      IF(EN <= EBRM(J)) GO TO 610
c  600 CONTINUE
c      J=NBREM
c  610 A=(math.log(Z36T(J))-math.log(Z36T(J-1)))/(EBRM(J)-EBRM(J-1))
c      B=(math.log(Z36T(J))*EBRM(J-1)-math.log(Z36T(J-1))*EBRM(J))/
c     /(EBRM(J-1)-EBRM(J))
c      QIN(52,I)=math.exp(A*EN+B)*1.D-24
  899 CONTINUE  
# 
# CALCULATE TOTAL X-SECTION                           
      Q1SUM=QIN(1,I)+QIN(2,I)+QIN(3,I)+QIN(4,I) 
      Q2SUM=QIN(5,I)+QIN(6,I)+QIN(7,I)+QIN(8,I)+QIN(9,I)+QIN(10,I)
      Q3SUM=0.0
      Q4SUM=0.0
      DO 700 JK=11,24
  700 Q3SUM=Q3SUM+QIN(JK,I)
      DO 701 JK=25,51
  701 Q4SUM=Q4SUM+QIN(JK,I)
      QINEL=Q1SUM+Q2SUM+Q3SUM+Q4SUM
      Q(1,I)=QELA+QINEL+QION(1,I)+QION(2,I)+QION(3,I)+QION(4,I)+
     /QION(5,I)+QION(6,I)+QION(7,I)+QION(8,I)+QION(9,I)+QION(10,I)+
     /QION(11,I)
c     /QION(11,I)+QIN(52,I)
#     WRITE(6,8976) EN,Q1SUM,Q2SUM,Q3SUM,Q4SUM,QINEL
#8976 FORMAT(' EN=',F9.1,' Q1=',D12.3,' Q2=',D12.3,' Q3=',D12.3,' Q4=',
#    /D12.3,' QSUM=',D12.3)       
  900 CONTINUE  
#  SAVE COMPUTE TIME 
      DO 910 K=1,NIN
      IF(EFINAL <= EIN(K):
) :
       NIN=K-1
       GO TO 911
      # endIF 
  910 CONTINUE
  911 CONTINUE
c      IF(EFINAL > 1000.) NIN=52
      RETURN                                                            
      # end
      def GAS7(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
#    /QNULL,NNULL,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,
#    /SCRPT)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(4000),EROOT(4000),QT1(4000),QT2(4000),
     /QT3(4000),QT4(4000)
      COMMON/DENS/DEN(4000)
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)         
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)   
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30)
     /,EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION XEN(182),YMOM(182),XEL(153),YEL(153),XEPS(182),YEPS(182)
      DIMENSION XION(76),YION(76),YINC(76),YIN1(76),XIN2(54),YIN2(54),
     /XIN3(47),YIN3(47),XIN4(42),YIN4(42),XIN5(37),YIN5(37),XIN6(35),
     /YIN6(35),XKSH(60),YKSH(60),
     /XL1S(76),YL1S(76),XL2S(76),YL2S(76),XL3S(76),YL3S(76),
     /XM1S(79),YM1S(79),XM2S(80),YM2S(80),XM3S(80),YM3S(80),
     /XM4S(82),YM4S(82),XM5S(83),YM5S(83)
      DIMENSION X1S5(70),Y1S5(70),YP1S5(70),X1S4(38),Y1S4(38),YP1S4(38),
     /X1S3(46),Y1S3(46),YP1S3(46),X1S2(20),Y1S2(20),YP1S2(20),
     /X2P10(22),Y2P10(22),YP2P10(22),X2P9(21),Y2P9(21),YP2P9(21),
     /X2P8(22),Y2P8(22),YP2P8(22),X2P7(22),Y2P7(22),YP2P7(22),
     /X2P6(22),Y2P6(22),YP2P6(22),X3D6(24),Y3D6(24),YP3D6(24),
     /X2P5(15),Y2P5(15),YP2P5(15),X3D4P(24),Y3D4P(24),YP3D4P(24),
     /X3D3(24),Y3D3(24),YP3D3(24),X3D4(26),Y3D4(26),YP3D4(26),
     /X3D1PP(23),Y3D1PP(23),YP3D1PP(23),X3D1P(22),Y3D1P(22),YP3D1P(22),
     /X2S5(18),Y2S5(18),YP2S5(18),X3P105(18),Y3P105(18),YP3P105(18),
     /X2P4(14),Y2P4(14),YP2P4(14),X4DSUM(16),Y4DSUM(16),YP4DSUM(16),
     /X2P3(14),Y2P3(14),YP2P3(14),X2P2(14),Y2P2(14),YP2P2(14),
     /X2P1(15),Y2P1(15),YP2P1(15),
     /IOFFN(50),IOFFION(12) 
      DIMENSION Z54T(25),EBRM(25)
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME                                                 
#   ELASTIC MOMENTUM TRANSFER                                           
      DATA XEN/0.00,.001,.005,.007,0.01,.015,0.02,.025,0.03,0.04,
     /0.05,0.06,0.07,0.08,0.10,0.12,0.14,0.17,0.20,0.25, 
     /0.27,0.30,0.32,0.35,0.37,0.40,0.42,0.44,0.46,0.48,
     /0.50,0.51,0.52,0.53,0.54,0.55,0.56,0.57,0.58,0.59,
     /0.60,0.61,0.62,0.63,0.64,0.65,0.66,0.67,0.68,0.69,
     /0.70,.715,0.73,0.75,0.77,0.80,0.83,0.85,0.87,0.90,
     /1.00,1.08,1.14,1.20,1.30,1.40,1.50,1.70,2.00,2.50,  
     /3.00,3.50,4.00,4.50,5.00,5.50,6.00,6.50,7.00,8.00,                
     /9.00,10.0,12.0,15.0,18.0,20.0,25.0,30.0,40.0,50.0,                
     /60.0,70.0,80.0,90.0,100.,125.,150.,200.,250.,300.,                
     /400.,500.,600.,700.,800.,1000.,1500.,2000.,3000.,4000.,           
     /5000.,6000.,8000.,1.0D4,1.5D4,2.0D4,3.0D4,4.0D4,5.0D4,6.0D4,     
     /8.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5D5,3.0D5,3.5D5,4.0D5,
     /4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,
     /2.0D6,2.5D6,3.0D6,3.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,
     /9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5D7,3.0D7,3.5D7,4.0D7,
     /4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,1.0D8,1.25D8,1.5D8,1.75D8,
     /2.0D8,2.5D8,3.0D8,3.5D8,4.0D8,4.5D8,5.0D8,6.0D8,7.0D8,8.0D8,
     /9.0D8,1.0D9/
      DATA YMOM/131.,115.,97.0,91.1,83.9,74.6,67.3,61.2,56.1,47.9,
     /41.4,36.2,31.8,28.2,22.5,18.1,14.8,11.1,8.36,5.33,
     /4.47,3.43,2.88,2.22,1.86,1.43,1.20,1.01,.844,.708,
     /.596,.548,.504,.465,.430,.399,.372,.348,.328,.310,
     /.296,.285,.276,.270,.266,.265,.266,.270,.276,.287,
     /.306,.341,.377,.427,.479,.562,.651,.713,.778,.880,
     /1.26,1.62,1.92,2.25,2.85,3.51,4.22,5.73,7.97,11.8,
     /15.8,20.4,24.4,28.0,30.7,31.5,32.3,31.6,31.0,27.8,                
     /23.5,19.8,15.0,10.9,8.40,7.25,5.65,5.00,4.50,3.10,                
     /2.42,2.17,2.00,1.89,1.80,1.73,1.65,1.50,1.39,1.26,                
     /1.09,0.94,0.84,0.75,0.68,0.56,0.38,0.26,.155,.105,                
     /.076,.059,.038,.027,.0148,.0094,.0050,.0031,.0022,.00163,
     /.001024,.000714,.000498,.000372,.000291,.000236,.000166,.000125,
     /9.90D-5,8.08D-5,
     /6.76D-5,5.77D-5,4.38D-5,3.48D-5,2.85D-5,2.39D-5,2.04D-5,
     /1.43D-5,1.08D-5,8.52D-6,
     /6.91D-6,4.85D-6,3.62D-6,2.81D-6,2.25D-6,1.85D-6,1.55D-6,1.13D-6,
     /8.67D-7,6.86D-7,
     /5.58D-7,4.63D-7,3.10D-7,2.23D-7,1.68D-7,1.31D-7,8.64D-8,6.11D-8,
     /4.54D-8,3.51D-8,
     /2.78D-8,2.26D-8,1.57D-8,1.15D-8,8.79D-9,6.93D-9,5.60D-9,3.57D-9,
     /2.47D-9,1.81D-9,
     /1.38D-9,8.82D-10,6.11D-10,4.48D-10,3.43D-10,2.71D-10,2.19D-10,
     /1.52D-10,1.12D-10,8.55D-11,
     /6.75D-11,5.47D-11/
# ELASTIC TOTAL
      DATA XEL/0.00,.001,.005,.007,0.01,.015,0.02,.025,0.03,0.04,
     /0.05,0.06,0.07,0.08,0.10,0.12,0.14,0.17,0.20,0.25, 
     /0.27,0.30,0.32,0.35,0.37,0.40,0.42,0.44,0.46,0.48,
     /0.50,0.51,0.52,0.53,0.54,0.55,0.56,0.57,0.58,0.59,
     /0.60,0.61,0.62,0.63,0.64,0.65,0.66,0.67,0.68,0.69,
     /0.70,0.75,0.80,0.85,0.90,1.00,1.20,1.50,1.75,2.00,
     /2.50,2.75,3.00,3.75,4.00,4.50,5.00,5.50,6.00,6.50,
     /7.00,8.00,9.00,10.0,12.0,15.0,18.0,20.0,25.0,30.0,                
     /40.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,200.,                
     /250.,300.,400.,500.,600.,700.,800.,1000.,1500.,2000.,             
     /3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0D4,3.0D4,4.0D4,
     /5.0D4,6.0D4,8.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5D5,3.0D5,
     /3.5D5,4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,
     /1.5D6,1.75D6,2.0D6,2.5D6,3.0D6,3.5D6,4.0D6,4.5D6,5.0D6,6.0D6,
     /7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5D7,3.0D7,
     /3.5D7,7.0D7,1.D9/  
      DATA YEL/131.,117.,101.,95.4,88.8,80.1,73.3,67.5,62.6,54.7,
     /48.4,43.2,38.8,35.2,29.4,24.7,21.2,17.1,14.0,10.3,
     /9.10,7.75,6.94,5.95,5.40,4.50,4.25,3.95,3.65,3.45,
     /3.20,3.11,3.00,2.90,2.79,2.69,2.59,2.48,2.37,2.25,
     /2.14,2.02,1.92,1.80,1.69,1.58,1.48,1.40,1.32,1.28,
     /1.26,1.24,1.30,1.45,1.50,1.87,2.80,4.76,6.68,8.85,
     /13.7,16.3,18.7,24.5,29.0,32.7,36.8,39.3,41.7,41.7,
     /41.8,41.8,41.0,40.0,37.4,34.2,32.4,30.8,21.9,14.1,                
     /8.58,6.78,5.97,5.49,5.29,5.21,5.10,4.66,4.58,4.67,                
     /4.53,4.35,4.12,3.77,3.58,3.30,3.12,2.80,2.36,2.07,                
     /1.72,1.52,1.34,1.13,.937,.817,.632,.523,.397,.326,
     /.279,.246,.203,.175,.152,.136,.124,.116,.103,.0946,
     /.0886,.0841,.0807,.0779,.0739,.0711,.0690,.0674,.0662,.0640,
     /.0627,.0618,.0612,.0604,.0599,.0596,.0594,.0593,.0592,.0590,
     /.0589,.0589,.0588,.0588,.0587,.0587,.0587,.0587,.0587,.05867,
     /.05866,.05865,.05865/
# ELASTIC ANGULAR DISTRIBUTION ( EPSILON) 
      DATA XEPS/0.00,.001,.005,.007,.010,.015,.020,.025,.030,.040,
     /0.05,0.06,0.07,0.08,0.10,0.12,0.14,0.17,0.20,0.25,
     /0.27,0.30,0.32,0.35,0.37,0.40,0.42,0.44,0.46,0.48,
     /0.50,0.51,0.52,0.53,0.54,0.55,0.56,0.57,0.58,0.59,
     /0.60,0.61,0.62,0.63,0.64,0.65,0.66,0.67,0.68,0.69,
     /0.70,0.71,0.72,0.73,0.75,0.77,0.80,0.83,0.85,0.87,
     /0.90,1.00,1.10,1.20,1.30,1.40,1.50,1.70,2.00,2.50,
     /3.00,3.50,4.00,4.50,5.00,5.50,6.00,6.50,7.00,8.00,
     /9.00,10.0,12.0,15.0,18.0,20.0,25.0,30.0,40.0,50.0,
     /60.0,70.0,80.0,90.0,100.,125.,150.,200.,250.,300.,
     /400.,500.,600.,700.,800.,1000.,1500.,2000.,3000.,4000.,
     /5000.,6000.,8000.,10000.,15000.,2.0D4,3.0D4,4.0D4,5.0D4,6.0D4,
     /8.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5D5,3.0D5,3.5D5,4.0D5,
     /4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,
     /2.0D6,2.5D6,3.0D6,3.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,
     /9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5D7,3.0D7,3.5D7,4.0D7,
     /4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,1.0D8,1.25D8,1.5D8,1.75D8,
     /2.0D8,2.5D8,3.0D8,3.5D8,4.0D8,4.5D8,5.0D8,6.0D8,7.0D8,8.0D8,
     /9.0D8,1.0D9/
# ELASTIC ANGULAR DISTRIBUTION PARAMETER EPSILON
#  YEPS=1.0-EPSILON
      DATA YEPS/1.,.9744,.9406,.9325,.9173,.8972,.8776,.8606,.845,.8148,
     /.7851,.7598,.7333,.7069,.6565,.6117,.5651,.5015,.4373,.3459,
     /.3177,.2684,.2421,.2044,.1803,.1590,.1326,.1141,.0981,.0822,
     /.0714,.0659,.0615,.0575,.0544,.0515,.0492,.0476,.0467,.0464,
     /.0467,.0480,.0493,.0523,.0560,.0614,.0678,.0751,.0845,.0937,
     /.1056,.1183,.1321,.1471,.1802,.2095,.2585,.2944,.3183,.3588,
     /.4247,.5332,.6259,.7104,.7648,.8047,.8308,.8717,.8515,.7938,
     /.7699,.7682,.7647,.7864,.7544,.7075,.6695,.6461,.6238,.5219,
     /.4088,.3217,.2293,.1597,.1165,.1011,.1156,.1887,.3535,.2829,
     /.2332,.2240,.2087,.1956,.1873,.2028,.1934,.1617,.1506,.1379,
     /.1201,.1098,.1003,.0956,.0899,.0792,.0579,.0408,.0259,.0182,
     /.0140,.0126,.0091,.0070,.0046,.00331,.00215,.00154,.00123,.00100,
     /7.30D-4,5.69D-4,4.42D-4,3.59D-4,3.00D-4,2.56D-4,1.96D-4,1.57D-4,
     /1.29D-4,1.09D-4,
     /9.34D-5,8.12D-5,6.34D-5,5.12D-5,4.23D-5,3.563D-5,3.048D-5,
     /2.134D-5,1.607D-5,1.255D-5,
     /1.009D-5,6.944D-6,5.077D-6,3.875D-6,3.056D-6,2.473D-6,2.043D-6,
     /1.461D-6,1.097D-6,8.531D-7,
     /6.826D-7,5.583D-7,3.635D-7,2.550D-7,1.885D-7,1.447D-7,9.266D-8,
     /6.407D-8,4.674D-8,3.548D-8,
     /2.775D-8,2.224D-8,1.512D-8,1.089D-8,8.19D-9,6.36D-9,5.08D-9,
     /3.16D-8,2.14D-9,1.54D-9,
     /1.163D-9,7.25D-10,4.93D-10,3.56D-10,2.69D-10,2.10D-10,1.68D-10,
     /1.15D-10,8.3D-11,6.3D-11,
     /4.9D-11,3.9D-11/
# IONISATION (VALUES ABOVE 20KEV GENERATED BY BORN BETHE IN SUB)  
      DATA XION/12.129843,12.5,13.0,13.5,14.0,14.5,15.0,15.5,16.0,16.5,
     /17.0,18.0,19.0,20.0,21.0,22.0,23.0,24.0,26.0,28.0,                
     /30.0,32.0,34.0,36.0,40.0,45.0,50.0,55.0,60.0,65.0,
     /70.0,80.0,90.0,100.,110.,120.,130.,140.,150.,160.,                
     /180.,200.,250.,300.,350.,400.,450.,500.,550.,600.,
     /700.,800.,900.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,         
     /3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,
     /10000.,12000.,14000.,16000.,18000.,20000./        
# GROSS IONISATION
      DATA YION/0.00,.137,.344,.549,.748,.939,1.12,1.29,1.46,1.62,      
     /1.77,2.04,2.30,2.52,2.73,2.93,3.10,3.27,3.56,3.82,                
     /4.06,4.27,4.42,4.53,4.73,4.94,5.11,5.21,5.31,5.36,
     /5.40,5.46,5.56,5.68,5.75,5.75,5.70,5.58,5.48,5.35,                
     /5.11,4.83,4.36,4.02,3.72,3.46,3.24,3.06,2.87,2.72,
     /2.49,2.26,2.10,1.94,1.68,1.48,1.35,1.23,1.13,.964,                
     /.836,.736,.663,.602,.555,.515,.480,.424,.382,.346,
     /.319,.273,.242,.218,.200,.186/      
# COUNTING IONISATION
      DATA YINC/0.00,.137,.344,.549,.748,.939,1.12,1.29,1.46,1.62, 
     /1.77,2.04,2.30,2.52,2.73,2.93,3.10,3.27,3.56,3.82,                
     /4.06,4.27,4.42,4.53,4.66,4.77,4.84,4.89,4.95,4.99,
     /5.02,5.04,5.03,5.02,4.98,4.90,4.80,4.69,4.60,4.49,
     /4.27,4.01,3.58,3.27,3.00,2.76,2.57,2.41,2.25,2.12,
     /1.93,1.75,1.62,1.49,1.28,1.12,1.03,.923,.855,.731,
     /.632,.557,.501,.455,.420,.389,.364,.320,.289,.262,
     /.241,.206,.183,.165,.152,.141/
# IONISATION CHARGE STATE =1
      DATA YIN1/0.00,.137,.344,.549,.748,.939,1.12,1.29,1.46,1.62, 
     /1.77,2.04,2.30,2.52,2.73,2.93,3.10,3.27,3.56,3.82,                
     /4.06,4.27,4.42,4.51,4.59,4.60,4.58,4.60,4.62,4.64,
     /4.67,4.64,4.53,4.44,4.33,4.21,4.08,4.01,3.93,3.85,
     /3.65,3.44,3.06,2.77,2.48,2.31,2.15,2.00,1.87,1.75,
     /1.58,1.42,1.32,1.21,1.03,.903,.830,.744,.689,.589,
     /.509,.449,.404,.367,.339,.314,.293,.258,.233,.211,
     /.194,.166,.148,.133,.123,.114/
# IONISATION CHARGE STATE =2
      DATA XIN2/33.105,36.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,80.0,
     /90.0,100.,110.,120.,130.,140.,150.,160.,180.,200.,
     /250.,300.,350.,400.,450.,500.,550.,600.,700.,800.,
     /900.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,
     /4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,10000.,12000.,
     /14000.,16000.,18000.,20000./        
      DATA YIN2/0.0,0.02,.0688,.174,.257,.318,.363,.376,.386,.398,
     /.461,.503,.534,.533,.521,.495,.470,.447,.405,.373,
     /.325,.305,.294,.267,.253,.240,.230,.220,.204,.190,
     /.175,.170,.145,.127,.117,.105,.0969,.0828,.0716,.0631,
     /.0568,.0516,.0476,.0441,.0412,.0363,.0327,.0297,.0220,.0188,
     /.0176,.0151,.0139,.0129/
# IONISATION CHARGE STATE =3
      DATA XIN3/64.15,70.0,80.0,90.0,100.,110.,120.,130.,140.,150.,
     /160.,180.,200.,250.,300.,350.,400.,450.,500.,550.,
     /600.,700.,800.,900.,1000.,1200.,1400.,1600.,1800.,2000.,
     /2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,
     /9000.,10000.,12000.,14000.,16000.,18000.,20000./        
      DATA YIN3/0.0,.001,.010,.0324,.0764,.122,.159,.184,.190,.189,
     /.180,.169,.158,.142,.140,.137,.129,.123,.118,.112,
     /.107,.102,.0921,.0844,.0825,.0703,.0616,.0566,.0507,.0470,
     /.0402,.0347,.0306,.0275,.0250,.0231,.0214,.0200,.0176,.0159,
     /.0144,.0132,.0113,.0101,.00907,.00835,.00775/
# IONISATION CHARGE STATE =4
      DATA XIN4/106.35,120.,130.,140.,150.,160.,180.,200.,250.,300.,
     /350.,400.,450.,500.,550.,600.,700.,800.,900.,1000.,
     /1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,
     /5000.,5500.,6000.,7000.,8000.,9000.,10000.,12000.,14000.,16000.,
     /18000.,20000./        
      DATA YIN4/0.0,.0002,.00098,.0033,.0103,.0157,.0279,.0426,.0483,
     /.0421,
     /.0425,.0409,.0402,.0395,.0382,.0369,.0348,.0339,.0319,.0294,
     /.0251,.0219,.0202,.0181,.0167,.0143,.0124,.0109,.00981,.00891,
     /.00823,.00762,.00713,.00627,.00566,.00513,.00472,.00404,.00358,
     /.00323,.00298,.00276/
# IONISATION CHARGE STATE =5
      DATA XIN5/160.45,180.,200.,250.,300.,350.,400.,450.,500.,550.,
     /600.,700.,800.,900.,1000.,1200.,1400.,1600.,1800.,2000.,
     /2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,
     /9000.,10000.,12000.,14000.,16000.,18000.,20000./        
      DATA YIN5/0.0,.00013,.0018,.0062,.0101,.0113,.0106,.0108,.0109,
     /.0104,
     /.0098,.0089,.0078,.0073,.0069,.059,.051,.0047,.0042,.0039,
     /.0034,.0029,.0026,.0023,.0021,.00193,.00179,.00167,.00147,.00133,
     /.00120,.00111,.00095,.00084,.00076,.00070,.00065/
# IONISATION CHARGE STATE =6
      DATA XIN6/227.2,250.,300.,350.,400.,450.,500.,550.,600.,700.,
     /800.,900.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,
     /3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,10000.,
     /12000.,14000.,16000.,18000.,20000./        
      DATA YIN6/0.0,.00005,.00036,.00082,.00128,.00140,.00153,.00162,
     /.00171,.00188,
     /.00182,.00191,.00188,.00160,.00140,.00129,.00116,.00107,.00092,
     /.00079,
     /.00070,.00063,.00057,.00053,.00049,.00046,.00040,.00036,.00033,
     /.00030,.00026,.00023,.00021,.00019,.00018/
# K-SHELL IONISATION
      DATA XKSH/34561.,35490.,36526.,37592.,38690.,39819.,40982.,42178.,
     /43410.,45981.,
     /48706.,51591.,54648.,57885.,64947.,72871.,81761.,1.00D5,1.22D5,
     /1.50D5,
     /1.83D5,2.24D5,2.82D5,3.65D5,4.87D5,6.49D5,8.66D5,1.00D6,1.22D6,
     /1.50D6,
     /1.83D6,2.24D6,2.82D6,3.65D6,4.87D6,6.49D6,8.66D6,1.00D7,1.22D7,
     /1.50D7,
     /2.05D7,2.51D7,3.07D7,4.10D7,5.16D7,6.31D7,7.50D7,8.66D7,1.00D8,
     /1.22D8,
     /1.50D8,2.05D8,2.51D8,3.07D8,4.10D8,5.16D8,6.31D8,7.50D8,8.66D8,
     /1.00D9/ 
      DATA YKSH/0.0,1.74D-8,3.56D-8,5.30D-8,6.98D-8,8.58D-8,1.01D-7,
     /1.16D-7,1.29D-7,1.55D-7,
     /1.78D-7,1.99D-7,2.17D-7,2.34D-7,2.62D-7,2.84D-7,3.00D-7,3.20D-7,
     /3.31D-7,3.35D-7,
     /3.34D-7,3.31D-7,3.26D-7,3.21D-7,3.20D-7,3.23D-7,3.29D-7,3.34D-7,
     /3.43D-7,3.55D-7,
     /3.68D-7,3.83D-7,4.01D-7,4.23D-7,4.50D-7,4.77D-7,5.05D-7,5.20D-7,
     /5.40D-7,5.61D-7,
     /5.93D-7,6.14D-7,6.35D-7,6.65D-7,6.89D-7,7.10D-7,7.28D-7,7.43D-7,
     /7.58D-7,7.79D-7,
     /7.99D-7,8.32D-7,8.53D-7,8.74D-7,9.03D-7,9.27D-7,9.47D-7,9.65D-7,
     /9.79D-7,9.94D-7/
# L1-SHELL IONISATION
      DATA XL1S/5453.,5499.2,5658.7,5823.,5992.,6166.,6345.,6529.,
     /6719.,6914.,
     /7321.,7753.,8210.,8695.,9208.,1.00D4,1.09D4,1.19D4,1.30D4,1.41D4,
     /1.58D4,1.78D4,2.00D4,2.24D4,2.51D4,2.90D4,3.35D4,3.87D4,4.47D4,
     /5.16D4,
     /6.13D4,7.29D4,8.66D4,1.00D5,1.22D5,1.54D5,2.00D5,2.59D5,3.35D5,
     /4.47D5,
     /5.96D5,8.66D5,1.00D6,1.22D6,1.50D6,1.83D6,2.30D6,2.90D6,3.65D6,
     /4.60D6,
     /5.79D6,7.50D6,8.66D6,1.00D7,1.22D7,1.50D7,1.83D7,2.30D7,2.90D7,
     /3.65D7,
     /4.60D7,5.79D7,7.29D7,8.66D7,1.00D8,1.22D8,1.50D8,1.83D8,2.30D8,
     /2.90D8,
     /3.65D8,4.60D8,5.79D8,7.29D8,8.66D8,1.00D9/
      DATA YL1S/0.0,2.21D-7,9.39D-7,1.62D-6,2.26D-6,2.86D-6,3.43D-6,
     /3.96D-6,4.47D-6,4.95D-6,
     /5.82D-6,6.59D-6,7.26D-6,7.86D-6,8.37D-6,9.02D-6,9.52D-6,9.89D-6,
     /1.02D-5,1.03D-5,
     /1.04D-5,1.04D-5,1.02D-5,9.98D-6,9.68D-6,9.23D-6,8.73D-6,8.20D-6,
     /7.66D-6,7.14D-6,
     /6.53D-6,5.97D-6,5.46D-6,5.06D-6,4.57D-6,4.08D-6,3.64D-6,3.30D-6,
     /3.04D-6,2.84D-6,
     /2.71D-6,2.64D-6,2.64D-6,2.66D-6,2.69D-6,2.74D-6,2.82D-6,2.90D-6,
     /3.00D-6,3.11D-6,
     /3.23D-6,3.36D-6,3.44D-6,3.52D-6,3.63D-6,3.74D-6,3.85D-6,3.98D-6,
     /4.12D-6,4.25D-6,
     /4.38D-6,4.51D-6,4.65D-6,4.75D-6,4.83D-6,4.95D-6,5.06D-6,5.18D-6,
     /5.32D-6,5.45D-6,
     /5.58D-6,5.72D-6,5.85D-6,5.99D-6,6.09D-6,6.17D-6/
# L2-SHELL IONISATION
      DATA XL2S/5107.,5160.6,5311.3,5466.,5626.,5790.,5959.,6133.,
     /6312.,6686.,
     /7081.,7501.,7945.,8416.,9175.,1.00D4,1.09D4,1.19D4,1.30D4,1.41D4,
     /1.58D4,1.78D4,2.00D4,2.24D4,2.51D4,2.90D4,3.35D4,3.87D4,4.47D4,
     /5.16D4,
     /6.13D4,7.29D4,8.66D4,1.00D5,1.22D5,1.54D5,2.00D5,2.59D5,3.35D5,
     /4.47D5,
     /5.96D5,8.66D5,1.00D6,1.22D6,1.50D6,1.83D6,2.30D6,2.90D6,3.65D6,
     /4.60D6,
     /5.79D6,7.50D6,8.66D6,1.00D7,1.22D7,1.50D7,2.05D7,2.59D7,3.16D7,
     /4.10D7,
     /5.16D7,6.31D7,7.50D7,8.66D7,1.00D8,1.22D8,1.50D8,2.05D8,2.59D8,
     /3.16D8,
     /4.10D8,5.16D8,6.31D8,7.50D8,8.66D8,1.00D9/
      DATA YL2S/0.0,4.47D-7,1.62D-6,2.72D-6,3.76D-6,4.73D-6,5.64D-6,
     /6.49D-6,7.28D-6,8.71D-6,
     /9.94D-6,1.10D-5,1.19D-5,1.27D-5,1.36D-5,1.43D-5,1.47D-5,1.50D-5,
     /1.52D-5,1.52D-5,
     /1.51D-5,1.49D-5,1.45D-5,1.41D-5,1.36D-5,1.29D-5,1.21D-5,1.13D-5,
     /1.06D-5,9.81D-6,
     /8.97D-6,8.20D-6,7.49D-6,6.96D-6,6.29D-6,5.63D-6,5.03D-6,4.55D-6,
     /4.19D-6,3.92D-6,
     /3.75D-6,3.66D-6,3.66D-6,3.69D-6,3.74D-6,3.82D-6,3.93D-6,4.06D-6,
     /4.20D-6,4.36D-6,
     /4.52D-6,4.72D-6,4.83D-6,4.94D-6,5.10D-6,5.26D-6,5.52D-6,5.71D-6,
     /5.88D-6,6.09D-6,
     /6.28D-6,6.45D-6,6.59D-6,6.71D-6,6.83D-6,7.00D-6,7.17D-6,7.43D-6,
     /7.63D-6,7.79D-6,
     /8.01D-6,8.20D-6,8.37D-6,8.51D-6,8.63D-6,8.75D-6/
# L3-SHELL IONISATION
      DATA XL3S/4786.,4881.6,5023.7,5170.,5321.,5476.,5635.,5800.,
     /5968.,6321.,
     /6695.,7091.,7511.,8187.,8924.,1.00D4,1.09D4,1.19D4,1.30D4,1.41D4,
     /1.58D4,1.78D4,2.00D4,2.24D4,2.51D4,2.90D4,3.35D4,3.87D4,4.47D4,
     /5.16D4,
     /6.13D4,7.29D4,8.66D4,1.00D5,1.22D5,1.54D5,2.00D5,2.59D5,3.35D5,
     /4.47D5,
     /5.96D5,8.66D5,1.00D6,1.22D6,1.50D6,1.83D6,2.30D6,2.90D6,3.65D6,
     /4.60D6,
     /5.79D6,7.50D6,8.66D6,1.00D7,1.22D7,1.50D7,1.83D7,2.30D7,2.90D7,
     /3.65D7,
     /4.60D7,5.79D7,7.50D7,8.66D7,1.00D8,1.22D8,1.50D8,1.83D8,2.30D8,
     /2.90D8,
     /3.65D8,4.60D8,5.79D8,7.50D8,8.66D8,1.00D9/
      DATA YL3S/0.0,1.94D-6,4.64D-6,7.17D-6,9.54D-6,1.18D-5,1.38D-5,
     /1.58D-5,1.76D-5,2.08D-5,
     /2.36D-5,2.60D-5,2.80D-5,3.05D-5,3.23D-5,3.40D-5,3.48D-5,3.52D-5,
     /3.54D-5,3.53D-5,
     /3.48D-5,3.41D-5,3.31D-5,3.19D-5,3.06D-5,2.86D-5,2.70D-5,2.52D-5,
     /2.34D-5,2.17D-5,
     /1.98D-5,1.81D-5,1.65D-5,1.53D-5,1.38D-5,1.23D-5,1.09D-5,9.89D-6,
     /9.10D-6,8.49D-6,
     /8.10D-6,7.90D-6,7.89D-6,7.93D-6,8.04D-6,8.19D-6,8.41D-6,8.67D-6,
     /8.97D-6,9.29D-6,
     /9.63D-6,1.00D-5,1.03D-5,1.05D-5,1.08D-5,1.12D-5,1.15D-5,1.19D-5,
     /1.23D-5,1.27D-5,
     /1.31D-5,1.35D-5,1.39D-5,1.42D-5,1.45D-5,1.48D-5,1.52D-5,1.55D-5,
     /1.59D-5,1.63D-5,
     /1.67D-5,1.71D-5,1.75D-5,1.80D-5,1.82D-5,1.85D-5/
# M1-SHELL IONISATION
      DATA XM1S/1148.7,1180.9,1214.7,1249.4,1285.1,1321.8,1359.7,1398.6,
     /1438.7,1479.9,
     /1566.,1657.,1754.,1856.,1965.,2140.,2330.,2538.,2765.,3012.,
     /3376.,3784.,4243.,4758.,5335.,6157.,7105.,8201.,1.00D4,1.22D4,
     /1.50D4,1.88D4,2.37D4,3.00D4,3.76D4,4.87D4,6.31D4,8.41D4,1.00D5,
     /1.22D5,
     /1.50D5,1.88D5,2.37D5,3.00D5,3.76D5,4.87D5,6.31D5,8.41D5,1.00D6,
     /1.22D6,
     /1.50D6,1.88D6,2.37D6,3.00D6,3.76D6,4.87D6,6.31D6,8.41D6,1.00D7,
     /1.22D7,
     /1.50D7,1.88D7,2.37D7,2.99D7,3.76D7,4.87D7,6.31D7,8.41D7,1.00D8,
     /1.22D8,
     /1.50D8,1.88D8,2.37D8,2.99D8,3.76D8,4.87D8,6.31D8,8.41D8,1.00D9/ 
      DATA YM1S/0.0,2.13D-5,4.08D-5,5.85D-5,7.47D-5,8.95D-5,1.03D-4,
     /1.16D-4,1.27D-4,1.37D-4,
     /1.56D-4,1.71D-4,1.84D-4,1.95D-4,2.04D-4,2.15D-4,2.23D-4,2.28D-4,
     /2.30D-4,2.31D-4,
     /2.29D-4,2.24D-4,2.18D-4,2.10D-4,2.01D-4,1.88D-4,1.75D-4,1.62D-4,
     /1.44D-4,1.27D-4,
     /1.12D-4,9.60D-5,8.20D-5,6.83D-5,5.92D-5,4.93D-5,4.11D-5,3.38D-5,
     /3.03D-5,2.67D-5,
     /2.38D-5,2.10D-5,1.88D-5,1.71D-5,1.58D-5,1.47D-5,1.40D-5,1.35D-5,
     /1.34D-5,1.33D-5,
     /1.34D-5,1.35D-5,1.37D-5,1.40D-5,1.44D-5,1.48D-5,1.53D-5,1.59D-5,
     /1.62D-5,1.66D-5,
     /1.70D-5,1.75D-5,1.80D-5,1.85D-5,1.90D-5,1.96D-5,2.01D-5,2.08D-5,
     /2.11D-5,2.16D-5,
     /2.20D-5,2.25D-5,2.30D-5,2.35D-5,2.40D-5,2.46D-5,2.52D-5,2.58D-5,
     /2.62D-5/
# M2-SHELL IONISATION
      DATA XM2S/1002.1,1012.5,1041.7,1071.7,1102.6,1134.5,1167.2,1201.,
     /1236.,1271.,
     /1346.,1425.,1509.,1597.,1691.,1843.,2008.,2188.,2384.,2598.,
     /2913.,3267.,3664.,4109.,4744.,5635.,6695.,7730.,8925.,1.00D4,
     /1.22D4,1.50D4,1.88D4,2.37D4,3.00D4,3.76D4,4.87D4,6.31D4,8.41D4,
     /1.00D5,
     /1.22D5,1.50D5,1.88D5,2.37D5,3.00D5,3.76D5,4.87D5,6.31D5,8.41D5,
     /1.00D6,
     /1.22D6,1.50D6,1.88D6,2.37D6,3.00D6,3.76D6,4.87D6,6.31D6,8.41D6,
     /1.00D7,
     /1.22D7,1.50D7,1.88D7,2.37D7,2.99D7,3.76D7,4.87D7,6.31D7,8.41D7,
     /1.00D8,
     /1.22D8,1.50D8,1.88D8,2.37D8,2.99D8,3.76D8,4.87D8,6.31D8,8.41D8,
     /1.00D9/
      DATA YM2S/0.0,1.17D-5,4.18D-5,6.88D-5,9.29D-5,1.15D-4,1.34D-4,
     /1.52D-4,1.68D-4,1.83D-4,
     /2.08D-4,2.30D-4,2.49D-4,2.64D-4,2.78D-4,2.95D-4,3.09D-4,3.19D-4,
     /3.27D-4,3.31D-4,
     /3.34D-4,3.32D-4,3.27D-4,3.19D-4,3.06D-4,2.86D-4,2.64D-4,2.45D-4,
     /2.26D-4,2.11D-4,
     /1.86D-4,1.63D-4,1.39D-4,1.19D-4,1.01D-4,8.55D-5,7.12D-5,5.94D-5,
     /4.90D-5,4.38D-5,
     /3.87D-5,3.45D-5,3.05D-5,2.74D-5,2.50D-5,2.31D-5,2.16D-5,2.06D-5,
     /1.99D-5,1.98D-5,
     /1.97D-5,1.98D-5,2.01D-5,2.05D-5,2.10D-5,2.16D-5,2.23D-5,2.31D-5,
     /2.40D-5,2.46D-5,
     /2.52D-5,2.59D-5,2.67D-5,2.75D-5,2.83D-5,2.91D-5,3.00D-5,3.09D-5,
     /3.20D-5,3.26D-5,
     /3.33D-5,3.40D-5,3.48D-5,3.56D-5,3.65D-5,3.73D-5,3.82D-5,3.91D-5,
     /4.01D-5,4.08D-5/
# M3-SHELL IONISATION
      DATA XM3S/940.6,958.1,985.7,1014.1,1043.3,1073.3,1104.3,1136.1,
     /1168.9,1202.6,
     /1273.,1348.,1427.,1510.,1599.,1693.,1844.,2009.,2189.,2385.,
     /2599.,2915.,3269.,3666.,4111.,4746.,5637.,6697.,7732.,8927.,
     /1.00D4,1.22D4,1.50D4,1.88D4,2.37D4,3.00D4,3.76D4,4.87D4,6.31D4,
     /8.41D4,
     /1.00D5,1.22D5,1.50D5,1.88D5,2.37D5,3.00D5,3.76D5,4.87D5,6.31D5,
     /8.41D5,
     /1.00D6,1.22D6,1.88D6,2.37D6,3.00D6,3.76D6,4.87D6,6.31D6,8.41D6,
     /1.00D7,
     /1.22D7,1.50D7,1.88D7,2.37D7,2.99D7,3.76D7,4.87D7,6.31D7,8.41D7,
     /1.00D8,
     /1.22D8,1.50D8,1.88D8,2.37D8,2.99D8,3.76D8,4.87D8,6.31D8,8.41D8,
     /1.00D9/
      DATA YM3S/0.0,5.19D-5,1.24D-4,1.88D-4,2.44D-4,2.95D-4,3.40D-4,
     /3.81D-4,4.18D-4,4.51D-4,
     /5.10D-4,5.59D-4,6.01D-4,6.37D-4,6.68D-4,6.96D-4,7.29D-4,7.56D-4,
     /7.75D-4,7.88D-4,
     /7.96D-4,7.96D-4,7.88D-4,7.72D-4,7.50D-4,7.15D-4,6.66D-4,6.12D-4,
     /5.66D-4,5.20D-4,
     /4.85D-4,4.27D-4,3.74D-4,3.19D-4,2.72D-4,2.31D-4,1.96D-4,1.63D-4,
     /1.36D-4,1.12D-4,
     /1.00D-4,8.86D-5,7.89D-5,6.99D-5,6.27D-5,5.71D-5,5.29D-5,4.94D-5,
     /4.71D-5,4.57D-5,
     /4.53D-5,4.52D-5,4.61D-5,4.71D-5,4.82D-5,4.96D-5,5.13D-5,5.31D-5,
     /5.52D-5,5.65D-5,
     /5.81D-5,5.97D-5,6.15D-5,6.34D-5,6.53D-5,6.71D-5,6.93D-5,7.14D-5,
     /7.38D-5,7.52D-5,
     /7.69D-5,7.86D-5,8.05D-5,8.24D-5,8.43D-5,8.62D-5,8.84D-5,9.05D-5,
     /9.29D-5,9.43D-5/
# M4-SHELL IONISATION
      DATA XM4S/689.0,706.2,726.8,748.1,770.0,792.6,815.7,839.6,864.2,
     /889.5,
     /942.3,998.2,1057.,1120.,1187.,1294.,1411.,1538.,1677.,1828.,
     /2052.,2302.,2583.,2899.,3253.,3756.,4338.,5010.,5786.,6681.,
     /7716.,8911.,1.00D4,1.22D4,1.50D4,1.88D4,2.37D4,3.00D4,3.76D4,
     /4.87D4,
     /6.31D4,8.41D4,1.00D5,1.22D5,1.50D5,1.88D5,2.37D5,3.00D5,3.76D5,
     /4.87D5,
     /6.31D5,8.41D5,1.00D6,1.22D6,1.88D6,2.37D6,3.00D6,3.76D6,4.87D6,
     /6.31D6,
     /8.41D6,1.00D7,1.22D7,1.50D7,1.88D7,2.37D7,2.99D7,3.76D7,4.87D7,
     /6.31D7,
     /8.41D7,1.00D8,1.22D8,1.50D8,1.88D8,2.37D8,2.99D8,3.76D8,4.87D8,
     /6.31D8,
     /8.41D8,1.00D9/
      DATA YM4S/0.0,1.79D-4,3.69D-4,5.38D-4,6.89D-4,8.24D-4,9.45D-4,
     /1.05D-3,1.15D-3,1.24D-3,
     /1.39D-3,1.52D-3,1.62D-3,1.71D-3,1.79D-3,1.88D-3,1.95D-3,2.00D-3,
     /2.03D-3,2.05D-3,
     /2.06D-3,2.05D-3,2.01D-3,1.97D-3,1.91D-3,1.82D-3,1.72D-3,1.61D-3,
     /1.50D-3,1.39D-3,
     /1.29D-3,1.18D-3,1.11D-3,9.84D-4,8.68D-4,7.49D-4,6.43D-4,5.51D-4,
     /4.71D-4,3.96D-4,
     /3.33D-4,2.77D-4,2.50D-4,2.22D-4,1.99D-4,1.77D-4,1.60D-4,1.47D-4,
     /1.37D-4,1.29D-4,
     /1.24D-4,1.21D-4,1.21D-4,1.21D-4,1.25D-4,1.29D-4,1.33D-4,1.38D-4,
     /1.43D-4,1.49D-4,
     /1.56D-4,1.61D-4,1.66D-4,1.71D-4,1.77D-4,1.83D-4,1.89D-4,1.96D-4,
     /2.03D-4,2.10D-4,
     /2.18D-4,2.22D-4,2.28D-4,2.33D-4,2.40D-4,2.46D-4,2.52D-4,2.58D-4,
     /2.65D-4,2.73D-4,
     /2.80D-4,2.85D-4/
# M5-SHELL IONISATION
      DATA XM5S/676.4,686.9,707.0,727.7,748.9,770.8,793.4,816.6,840.4,
     /865.0,
     /916.3,970.7,1028.,1089.,1154.,1258.,1372.,1495.,1630.,1777.,
     /1994.,2238.,2511.,2817.,3161.,3651.,4216.,4869.,5622.,6493.,
     /7717.,8911.,1.00D4,1.22D4,1.50D4,1.88D4,2.37D4,3.00D4,3.76D4,
     /4.87D4,
     /6.31D4,8.41D4,1.00D5,1.22D5,1.50D5,1.88D5,2.37D5,3.00D5,3.76D5,
     /4.87D5,
     /6.31D5,8.41D5,1.00D6,1.22D6,1.50D6,1.88D6,2.37D6,3.00D6,3.76D6,
     /4.87D6,
     /6.31D6,8.41D6,1.00D7,1.22D7,1.50D7,1.88D7,2.37D7,2.99D7,3.76D7,
     /4.87D7,
     /6.31D7,8.41D7,1.00D8,1.22D8,1.50D8,1.88D8,2.37D8,2.99D8,3.76D8,
     /4.87D8,
     /6.31D8,8.41D8,1.00D9/
      DATA YM5S/0.0,1.84D-4,4.98D-4,7.77D-4,1.02D-3,1.25D-3,1.44D-3,
     /1.62D-3,1.78D-3,1.92D-3,
     /2.16D-3,2.37D-3,2.53D-3,2.67D-3,2.79D-3,2.93D-3,3.04D-3,3.12D-3,
     /3.18D-3,3.21D-3,
     /3.23D-3,3.21D-3,3.16D-3,3.09D-3,2.99D-3,2.86D-3,2.70D-3,2.53D-3,
     /2.36D-3,2.19D-3,
     /1.99D-3,1.83D-3,1.71D-3,1.52D-3,1.34D-3,1.16D-3,9.92D-4,8.50D-4,
     /7.27D-4,6.10D-4,
     /5.14D-4,4.28D-4,3.85D-4,3.42D-4,3.06D-4,2.73D-4,2.47D-4,2.26D-4,
     /2.11D-4,1.98D-4,
     /1.91D-4,1.86D-4,1.86D-4,1.87D-4,1.89D-4,1.93D-4,1.98D-4,2.04D-4,
     /2.11D-4,2.20D-4,
     /2.29D-4,2.40D-4,2.47D-4,2.55D-4,2.63D-4,2.72D-4,2.81D-4,2.91D-4,
     /3.00D-4,3.11D-4,
     /3.22D-4,3.34D-4,3.41D-4,3.50D-4,3.58D-4,3.68D-4,3.77D-4,3.87D-4,
     /3.97D-4,4.08D-4,
     /4.18D-4,4.31D-4,4.38D-4/
#
# EXCITATION  UNITS OF 10**-18CM**2
# 
# 1S5 METASTABLE E=8.3153155 EV  J=2        
# SHAPE def BELOW 11EV FROM BARTSCHAT AND ZATSARINNY
# ABOVE 100EV SCALED BY 1/E**3
      DATA X1S5/8.3153,8.35,8.40,8.44,8.48,8.52,8.56,8.60,8.65,8.70,
     /8.75,8.80,8.85,8.90,8.95,9.00,9.05,9.10,9.15,9.20,
     /9.25,9.30,9.35,9.40,9.45,9.50,9.516,9.52,9.525,9.53,
     /9.54,9.545,9.55,9.555,9.56,9.57,9.58,9.59,9.60,9.61,
     /9.615,9.62,9.625,9.63,9.64,9.65,9.66,9.67,9.68,9.70,
     /9.75,10.0,10.5,11.0,11.5,12.0,12.5,13.0,14.0,15.0,
     /16.0,18.0,20.0,25.0,30.0,40.0,50.0,60.0,80.0,100./
      DATA Y1S5/0.00,2.38,4.93,6.41,3.42,2.84,3.00,3.33,3.89,4.59,
     /5.45,6.48,7.72,9.05,10.4,11.5,12.3,12.2,10.8,9.45,
     /8.84,9.04,9.18,9.18,9.11,9.32,23.6,15.7,12.1,10.7,
     /9.79,11.4,15.8,18.0,15.9,13.1,13.6,12.6,10.4,12.1,
     /14.9,20.5,21.5,18.5,17.2,16.9,15.9,13.8,12.4,11.1,
     /10.1,10.0,9.90,9.80,9.70,9.60,9.30,8.80,8.10,7.45,
     /6.80,5.50,4.40,2.20,1.10,.500,.230,.150,.065,.034/
      DATA YP1S5/70*0.0/
# 1S4 E=8.4365236 EV J=1  RESONANCE RADIATION 146.96 NM       F=0.260 
#    USED BEF SCALING ABOVE 11.0EV
# SHAPE def BELOW 11EV FROM BARTSCHAT AND ZATSARINNY        
      DATA X1S4/8.4365,8.45,8.46,8.47,8.48,8.49,8.50,8.52,8.54,8.56,
     /8.60,8.65,8.70,8.75,8.80,8.85,8.90,8.95,9.00,9.05,
     /9.10,9.15,9.20,9.25,9.30,9.35,9.40,9.45,9.50,9.55,
     /9.60,9.62,9.65,9.70,9.75,9.80,10.0,11.0/
      DATA Y1S4/0.00,2.60,5.60,6.09,5.50,4.72,4.27,3.70,3.42,3.24,
     /3.10,3.02,3.34,3.70,4.25,5.03,6.00,7.23,8.70,9.67,
     /10.3,10.1,9.37,9.00,8.70,8.55,8.62,8.77,9.00,10.1,
     /10.5,10.7,10.2,9.22,9.40,9.60,10.8,16.87/
      DATA YP1S4/38*0.0/
# 1S3  METASTABLE   E=9.4471945 EV J=0 
# SHAPE def BELOW 11EV FROM BARTSCAT AND ZATSARINNY
# ABOVE 100EV SCALED BY 1/E**3
      DATA X1S3/9.4472,9.45,9.47,9.48,9.49,9.50,9.506,9.51,9.52,9.525,
     /9.53,9.54,9.55,9.555,9.56,9.57,9.58,9.60,9.62,9.64,
     /9.67,9.68,9.69,9.70,9.71,9.72,9.73,9.74,9.75,9.80,
     /10.0,11.0,12.0,13.0,14.0,15.0,16.0,18.0,20.0,24.0,
     /30.0,40.0,50.0,60.0,80.0,100./
      DATA Y1S3/0.00,.313,.324,.230,.360,1.67,3.78,2.57,1.26,1.71,
     /1.80,1.78,2.23,2.70,2.43,.635,1.14,1.04,1.49,1.59,
     /1.62,2.77,3.89,6.21,9.38,8.28,6.75,4.29,3.97,.556,
     /0.77,3.30,4.30,4.50,4.30,3.70,3.30,2.65,2.25,1.50,
     /0.80,0.32,0.17,0.10,.040,.021/
      DATA YP1S3/46*0.0/
# 1S2 E=9.5697248 EV J=1 RESONANCE RADIATION 129.56 NM        F=0.183
#   USED BEF SCALING ABOVE 11.0EV
# SHAPE def BELOW 11EV FROM BARTSCHAT AND ZATSARINNY
      DATA X1S2/9.5697,9.58,9.59,9.60,9.61,9.62,9.63,9.64,9.65,9.67,
     /9.68,9.69,9.70,9.75,9.77,9.80,9.85,9.90,10.0,11.0/
      DATA Y1S2/0.00,1.21,1.32,1.41,1.41,1.30,1.88,2.00,2.02,2.02,
     /2.83,2.11,2.07,1.78,2.10,1.96,1.75,1.87,2.17,5.305/
      DATA YP1S2/20*0.0/
# 2P10 E=9.5801524 EV  J=1 
# ABOVE 100EV SCALED BY 1/E**3
      DATA X2P10/9.5802,9.80,10.0,10.5,11.0,11.5,12.0,12.5,13.0,14.0,
     /15.0,16.0,18.0,20.0,25.0,30.0,35.0,40.0,50.0,60.0,
     /80.0,100./
      DATA Y2P10/0.00,0.69,1.23,2.34,3.15,3.73,4.14,4.41,4.59,4.76,
     /4.74,4.63,4.26,3.84,2.91,2.23,1.75,1.40,0.95,0.69,
     /.406,.267/
      DATA YP2P10/22*0.0/
# 2P9 E=9.6856199 EV  J=2
# ABOVE 100EV SCALED BY 1/E
      DATA X2P9/9.6856,10.0,10.5,11.0,11.5,12.0,12.5,13.0,14.0,15.0,
     /16.0,18.0,20.0,25.0,30.0,35.0,40.0,50.0,60.0,80.0,
     /100./
      DATA Y2P9/0.00,1.50,3.37,4.49,5.47,6.04,6.48,6.91,7.41,7.49,
     /7.41,6.98,6.26,5.04,4.17,3.52,3.09,2.52,2.08,1.58,
     /1.22/
      DATA YP2P9/21*0.0/
# 2P8 E=9.7207401 EV  J=3
# ABOVE 100EV SCALED BY 1/E**3
      DATA X2P8/9.7207,10.0,10.5,11.0,11.5,12.0,12.5,13.0,13.5,14.0,
     /15.0,16.0,18.0,20.0,25.0,30.0,35.0,40.0,50.0,60.0,
     /80.0,100./
      DATA Y2P8/0.00,1.16,2.78,3.88,4.86,5.44,5.83,6.02,6.35,6.41,
     /6.48,6.33,4.89,3.24,1.51,0.72,0.43,0.26,0.11,.061,
     /.021,.0093/
      DATA YP2P8/22*0.0/
# 2P7 E=9.7892996 EV  J=1
# ABOVE 100EV SCALED BY 1/E**2
      DATA X2P7/9.7893,10.0,10.5,11.0,11.5,12.0,12.5,13.0,13.5,14.0,
     /15.0,16.0,18.0,20.0,25.0,30.0,35.0,40.0,50.0,60.0,
     /80.0,100./
      DATA Y2P7/0.00,0.66,1.68,2.52,3.12,3.48,3.72,3.90,4.02,4.14,
     /4.20,4.20,3.90,3.48,2.64,1.80,1.26,0.96,0.63,0.42,
     /0.24,0.15/
      DATA YP2P7/22*0.0/
# 2P6 E=9.8210934 EV  J=2
# ABOVE 100EV SCALED BY 1/E
      DATA X2P6/9.8211,10.0,10.5,11.0,11.5,12.0,12.5,13.0,13.5,14.0,
     /15.0,16.0,18.0,20.0,25.0,30.0,35.0,40.0,50.0,60.0,
     /80.0,100./
      DATA Y2P6/0.00,0.26,1.05,1.47,1.92,2.19,2.32,2.43,2.53,2.62,
     /2.64,2.88,3.06,2.94,2.70,2.10,1.68,1.53,1.26,1.02,
     /0.78,0.60/
      DATA YP2P6/22*0.0/
# 3D6 E=9.8903760 EV  J=0
# ABOVE 100EV SCALED BY 1/E**1.5
      DATA X3D6/9.8904,10.0,10.5,11.0,11.5,12.0,12.5,13.0,13.5,14.0,
     /14.5,15.0,16.0,17.0,18.0,20.0,22.0,25.0,30.0,40.0,
     /50.0,60.0,80.0,100./
      DATA Y3D6/0.00,0.23,0.83,1.50,2.17,2.77,3.22,3.60,3.90,4.20,
     /4.42,4.65,4.80,5.02,5.02,4.80,4.50,3.90,2.78,1.87,
     /1.35,1.01,0.66,0.48/
      DATA YP3D6/24*0.0/
#
# 3D5 E=9.9170761 EV J=1 RESONACE RADIATION 125.02 NM         F=0.010
#
# 2P5 E=9.9334847 EV  J=0 
# ABOVE 100EV SCALED BY 1/E
      DATA X2P5/9.9335,13.0,16.0,17.5,20.0,24.0,26.0,28.0,30.0,35.0,
     /40.0,50.0,60.0,80.0,100./
      DATA Y2P5/0.00,1.60,2.16,2.70,4.26,7.32,8.46,8.88,8.70,8.40, 
     /7.50,5.70,4.80,3.60,3.00/
      DATA YP2P5/15*0.0/
# 3D4# E=9.9431141 EV  J=4
# ABOVE 100EV SCALED BY 1/E**1.5
      DATA X3D4P/9.9431,10.0,10.5,11.0,11.5,12.0,12.5,13.0,13.5,14.0,
     /14.5,15.0,16.0,17.0,18.0,20.0,22.0,25.0,30.0,40.0,
     /50.0,60.0,80.0,100./
      DATA Y3D4P/0.00,0.45,1.65,3.00,4.35,5.55,6.45,7.20,7.80,8.40,
     /8.85,9.30,9.60,10.1,10.1,9.60,9.00,7.80,5.77,3.75,
     /2.70,2.03,1.32,0.96/
      DATA YP3D4P/24*0.0/
# 3D3 E=9.9587506 EV  J=2
# ABOVE 100EV SCALED BY 1/E**1.5
      DATA X3D3/9.9588,10.0,10.5,11.0,11.5,12.0,12.5,13.0,13.5,14.0,
     /14.5,15.0,16.0,17.0,18.0,20.0,22.0,25.0,30.0,40.0,
     /50.0,60.0,80.0,100./
      DATA Y3D3/0.00,0.48,1.76,3.20,4.64,5.92,6.88,7.68,8.32,8.96,
     /9.44,9.92,10.2,10.7,10.7,10.2,9.60,8.32,5.92,4.00,
     /2.88,2.16,1.41,1.03/
      DATA YP3D3/24*0.0/
# 3D4 E=10.039054 EV  J=3
# ABOVE 100EV SCALED BY 1/E**2
      DATA X3D4/10.0391,10.2,10.5,10.7,11.0,11.2,11.5,12.0,12.5,13.0,
     /13.5,14.0,14.5,15.0,16.0,18.0,20.0,22.0,25.0,30.0,
     /35.0,40.0,50.0,60.0,80.0,100./
      DATA Y3D4/0.00,0.50,1.50,2.20,3.30,4.00,5.00,6.90,8.70,10.7,
     /12.2,13.3,13.6,13.6,12.8,10.2,9.00,7.30,5.70,3.40,
     /2.90,2.20,1.45,1.00,0.56,0.36/
      DATA YP3D4/26*0.0/
# 3D1## E=10.157469 EV  J=2
# ABOVE 100EV SCALED BY 1/E**3
      DATA X3D1PP/10.1575,10.5,10.7,11.0,11.5,12.0,12.5,13.0,13.5,14.0,
     /14.5,15.0,16.0,18.0,20.0,22.0,25.0,30.0,40.0,50.0,
     /60.0,80.0,100./
      DATA Y3D1PP/0.00,0.70,1.30,2.00,3.20,4.50,5.70,6.80,7.80,8.30,
     /8.50,8.50,8.20,6.70,5.30,3.80,2.90,1.55,0.67,0.35,
     /0.20,.085,.044/
      DATA YP3D1PP/23*0.0/
# 3D1# E=10.220042  J=3
# ABOVE 100EV SCALED BY 1/E
      DATA X3D1P/10.2200,10.7,11.0,11.5,12.0,12.5,13.0,13.5,14.0,14.5,
     /15.0,16.0,18.0,20.0,22.0,25.0,30.0,40.0,50.0,60.0,
     /80.0,100./
      DATA Y3D1P/0.00,0.60,1.04,1.83,2.39,3.00,3.39,3.65,3.83,3.94,
     /4.00,4.00,3.95,3.85,3.70,3.45,2.90,2.15,1.70,1.45,
     /1.08,.875/
      DATA YP3D1P/22*0.0/
#
# 3D2 E=10.401030  J=1 RESONANCE RADIATION  119.20 NM         F=0.379
#
# 2S5  E=10.562062 EV  J=2 NOT OBSERVED  USE 1S5 SCALED BY 0.25
# ABOVE 100EV SCALED BY 1/E**3
      DATA X2S5/10.5621,11.0,11.5,12.0,12.5,13.0,14.0,15.0,16.0,18.0,
     /20.0,25.0,30.0,40.0,50.0,60.0,80.0,100./
      DATA Y2S5/0.00,0.10,0.25,0.50,1.00,1.50,2.02,1.75,1.70,1.37,
     /1.10,.550,.275,.125,.057,.037,.016,.0085/
      DATA YP2S5/18*0.0/
#
# 2S4  E=10.593211 EV  J=1  RESONANCE RADIATION 117.04 NM     F=0.086  
#
# 3P10+3P9+3P8+3P7+3P6+3P5  E=10.9016 EV SCALED SUM OF 2P10--2P5 BY 0.25
# ABOVE 100EV SCALED BY 1/E
      DATA X3P105/10.9016,11.50,12.0,12.5,13.0,14.0,15.0,16.0,18.0,20.0,
     /25.0,30.0,35.0,40.0,50.0,60.0,80.0,100./
      DATA Y3P105/0.00,1.00,2.70,3.42,4.20,5.10,5.70,5.94,5.93,5.52,
     /5.31,4.71,4.09,3.54,2.68,2.18,1.59,1.26/
      DATA YP3P105/18*0.0/
# 2P4 E=10.957614 J=1 
# ABOVE 100EV SCALED BY 1/E**2
      DATA X2P4/10.9576,13.0,14.0,15.0,16.0,18.0,20.0,25.0,30.0,40.0,
     /50.0,60.0,80.0,100./
      DATA Y2P4/0.00,0.75,1.10,1.20,1.10,0.75,0.60,0.38,0.25,.145,
     /.095,.065,.037,.025/
      DATA YP2P4/14*0.0/
# 4D6+4D3+4D4#+4D4+4D1##+4D1#  SUM 4D  E=10.9715
#       SHAPE FROM PETROV NORMALISED TO HAYASHI TOTAL
# ABOVE 100EV SCALED BY 1/E**3
      DATA X4DSUM/10.9715,12.0,13.0,14.0,15.0,16.0,18.0,20.0,25.0,30.0,
     /35.0,40.0,50.0,60.0,80.0,100./
      DATA Y4DSUM/0.00,1.50,4.35,4.65,4.50,4.05,3.00,2.25,0.96,0.57,
     /0.36,0.21,.099,.060,.024,.011/
      DATA YP4DSUM/16*0.0/
#
# 4D5 E=10.978772 J=1 RESONANCE RADIATION AT 112.93 NM        F=0.001
# 
# 2P3 E=11.054723  J=2
# ABOVE 100 EV SCALED BY 1/E
      DATA X2P3/11.0547,13.0,14.0,15.0,16.0,18.0,20.0,25.0,30.0,40.0,
     /50.0,60.0,80.0,100./
      DATA Y2P3/0.00,2.20,3.00,3.50,3.60,3.50,3.20,2.60,2.20,1.65,
     /1.35,1.10,0.83,0.65/
      DATA YP2P3/14*0.0/
# 2P2 E=11.069148  J=1
# ABOVE 100EV SCALED BY 1/E**2
      DATA X2P2/11.0691,13.0,14.0,15.0,16.0,18.0,20.0,25.0,30.0,40.0,
     /50.0,60.0,80.0,100./
      DATA Y2P2/0.00,0.75,1.00,1.08,1.08,0.97,0.85,0.56,0.40,0.22,
     /.145,.100,.054,.035/
      DATA YP2P2/14*0.0/
# 2P1 E=11.141221  J=0
# ABOVE 100EV SCALED BY 1/E
      DATA X2P1/11.1412,13.0,14.0,15.0,16.0,18.0,20.0,25.0,30.0,35.0,
     /40.0,50.0,60.0,80.0,100./
      DATA Y2P1/0.00,0.80,1.50,1.90,1.90,1.80,1.60,1.30,1.05,0.91,
     /0.77,0.64,0.52,0.39,0.31/
      DATA YP2P1/15*0.0/
#                          
# 4D2 E=11.162564 EV  J=1 RESONANCE RADIATION AT 111.07 NM    F=0.0835
# 3S4 E=11.274184 EV  J=1 RESONANCE RADIATION AT 109.97 NM    F=0.0225
# 5D5 E=11.422451 EV  J=1 RESONANCE RADIATION AT 108.55 NM    F=0.0227 
# 5D2 E=11.495075 EV  J=1 RESONANCE RADIATION AT 107.86 NM    F=0.002  
# 4S4 E=11.582864 EV  J=1 RESONANCE RADIATION AT 107.04 NM    F=0.0005 
# 3S1# E=11.60718 EV  J=1 RESONANCE RADIATION AT 106.82 NM    F=0.1910
# 6D5 E=11.682783 EV  J=1 RESONANCE RADIATION AT 106.13 NM    F=0.0088 
# 6D2 E=11.739501 EV  J=1 RESONANCE RADIATION AT 105.61 NM    F=0.0967
# 5S4 E=11.752100 EV  J=1 RESONANCE RADIATION AT 105.50 NM    F=0.0288
# 7D5 E=11.806816 EV  J=1 RESONANCE RADIATION AT 105.01 NM    F=0.0042 
# 7D2 E=11.84030  EV  J=1 RESONANCE RADIATION AT 104.71 NM    F=0.0625
# 6S4 E=11.85177  EV  J=1 RESONANCE RADIATION AT 104.61 NM    F=0.0025 
# 2S2 E=11.877758 EV  J=1 RESONANCE RADIATION AT 104.38 NM    F=0.029  
# 8D5 E=11.891681 EV  J=1 RESONANCE RADIATION AT 104.26 NM    F=0.0035 
# 8D2 E=11.90816  EV  J=1 RESONANCE RADIATION AT 104.12 NM    F=0.0386 
# 7S4 E=11.91770  EV  J=1 RESONANCE RADIATION AT 104.03 NM    F=0.005 
# 9D5 E=11.94156  EV  J=1 RESONANCE RADIATION AT 103.83 NM    F=0.0005 
# 9D2 E=11.95502  EV  J=1 RESONANCE RADIATION AT 103.71 NM    F=0.025  
# 8S4 E=11.96207  EV  J=1 RESONANCE RADIATION AT 103.64 NM    F=0.0023 
# 10D5 E=11.978893 EV J=1 RESONANCE RADIATION AT 103.50 NM    F=0.0005 
# 10D2 E=11.98858 EV  J=1 RESONANCE RADIATION AT 103.42 NM    F=0.0164     
# 9S4 E=11.993947 EV  J=1 RESONANCE RADIATION AT 103.37 NM    F=0.0014  
# SUM HIGHER STATES E=12.0 EV                                 F=0.0831 
#
# TOTAL OSCILLATOR SUM =1.650
#
# BREMSSTRAHLUNG X-SECTION WITH CUT OFF UNITS 10**-24
      DATA Z54T/4948.,4086.,2921.,2088.,1396.,776.,492.,328.,220.,189.,
     /179.7,178.6,179.0,179.3,179.6,180.2,180.3,181.5,182.1,182.7,
     /183.6,184.4,184.7,185.5,185.7/
      DATA EBRM/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,
     /2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,
     /4.E7,5.E7,6.E7,8.E7,1.E8/
#-----------------------------------------------------------------------
      IF(NANISO == 0):
 :                                
       NAME='XENON 2013     ISOTROPIC '
      else:
       NAME='XENON 2013   ANISOTROPIC '
      # endIF                                            
#                                                                       
# --------------------------------------------------------------------  
# DATA ON XENON NOT AS GOOD AS ARGON . 
# USED MOMENTUM TRANSFER X-SECTION FROM SCHMIDT UP TO 2 EV. 
# FIT TO TOWNS# end COEFFICIENT OF JACQUES ET AL J.PHYS D19(1986)1731
# AND KRUITHOF TO OBTAIN INELASTIC X-SECTIONS. 
# 2013: INCLUDED SHELL IONISATION X-SECTIONS
# 2010: UPDATED IONISATION X-SECTIONS
# 2009: INCLUDED ALL RESONANCE STATES AND SOME P AND D STATES
# 2007: INCREASED ENERGY RANGE TO 2MEV
# 2007: INCLUDED NEW ANGULAR DISTRIBUTION
# 2007: INCLUDED PENNING TRANSFER FRACTION
# 2013: INTRODUCED K L AND M SHELL AND CHARGE 1 2 AND (3+4+5) IONISATION
# --------------------------------------------------------------------  
#                                                                       
#  BORN BETHE VALUES FOR IONISATION                               
      CONST=1.873884D-20
      EMASS2=1021997.804
      API=DACOS(-1.00)
      A0=0.52917720859D-8
      RY=13.60569193
      BBCONST=16.0*API*A0*A0*RY*RY/EMASS2
#
      AM2=8.04
      C=75.25
#   
# AVERAGE AUGER EMISSIONS FROM EACH SHELL
      AUGM5=4.34
      AUGM4=4.43
      AUGM3=6.79
      AUGM2=6.85
      AUGM1=7.94
      AUGL3=8.21
      AUGL2=8.45
      AUGL1=9.39
      AUGK=8.49
#
      NION=12
      NATT=1
      NIN=50
      NNULL=0
#
      NBREM=25
      DO 6 J=1,NIN
      IZBR(J)=0
    6 CONTINUE
      IZBR(51)=54
#
      DO 1 J=1,6
    1 KEL(J)=NANISO
      DO 2 J=1,NIN
    2 KIN(J)=NANISO   
#                                                                      
      NDATA=182 
      NEL=153  
      NEPSI=182                                                       
      NIONG=76
      NION2=54
      NION3=47
      NION4=42
      NION5=37
      NION6=35
      NIONK=60
      NIONL1=76
      NIONL2=76
      NIONL3=76
      NIONM1=79
      NIONM2=80
      NIONM3=80
      NIONM4=82
      NIONM5=83
      N1S5=70
      N1S4=38
      N1S3=46
      N1S2=20
      N2P10=22
      N2P9=21
      N2P8=22
      N2P7=22
      N2P6=22
      N3D6=24
      N2P5=15
      N3D4P=24
      N3D3=24
      N3D4=26
      N3D1PP=23
      N3D1P=22
      N2S5=18
      N3PSUM=18
      N2P4=14
      N4DSUM=16
      N2P3=14
      N2P2=14
      N2P1=15  
#                                                         
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(131.30*AMU)                                       
      E(3)=12.129843
      E(4)=0.0          
      E(5)=0.0             
# EOBY FOR MINIMUM IONISING PARTICLE
      E(6)=23.7
# EOBY AT LOW ENERGY
      EOBY(1)=8.7
      EOBY(2)=20.0 
      EOBY(3)=38.0
# EOBY FOR SHELLS
      EOBY(4)=400.             
      EOBY(5)=410.             
      EOBY(6)=750.0  
      EOBY(7)=800.0 
      EOBY(8)=920.0 
      EOBY(9)=3850.
      EOBY(10)=4100.
      EOBY(11)=4400.
      EOBY(12)=34561.
# 
      EION(1)=12.129843
      EION(2)=33.105
      EION(3)=64.155
      EION(4)=676.4 
      EION(5)=689.0 
      EION(6)=940.6 
      EION(7)=1002.1
      EION(8)=1148.7
      EION(9)=4786. 
      EION(10)=5107.
      EION(11)=5453. 
      EION(12)=34561.
      LEGAS(1)=0
      LEGAS(2)=0
      LEGAS(3)=0
      LEGAS(4)=1
      LEGAS(5)=1
      LEGAS(6)=1
      LEGAS(7)=1
      LEGAS(8)=1
      LEGAS(9)=1
      LEGAS(10)=1
      LEGAS(11)=1
      LEGAS(12)=1
      ISHELL(1)=0
      ISHELL(2)=0
      ISHELL(3)=0
      ISHELL(4)=9
      ISHELL(5)=8
      ISHELL(6)=7
      ISHELL(7)=6
      ISHELL(8)=5
      ISHELL(9)=4
      ISHELL(10)=3
      ISHELL(11)=2
      ISHELL(12)=1
# FLUORESCENCE DATA
      NC0(1)=0
      EC0(1)=0.0
      WKLM(1)=0.0
      EFL(1)=0.0
      NG1(1)=0
      EG1(1)=0.0
      NG2(1)=0
      EG2(1)=0.0
      NC0(2)=1
      EC0(2)=5.0
      WKLM(2)=0.0
      EFL(2)=0.0
      NG1(2)=0
      EG1(2)=0.0
      NG2(2)=0
      EG2(2)=0.0
      NC0(3)=2
      EC0(3)=10.0
      WKLM(3)=0.0
      EFL(3)=0.0
      NG1(3)=0
      EG1(3)=0.0
      NG2(3)=0
      EG2(3)=0.0
      NC0(4)=4
      EC0(4)=593.7
      WKLM(4)=0.0
      EFL(4)=0.0
      NG1(4)=0
      EG1(4)=0.0
      NG2(4)=0
      EG2(4)=0.0
      NC0(5)=4
      EC0(5)=604.0
      WKLM(5)=0.0
      EFL(5)=0.0
      NG1(5)=0
      EG1(5)=0.0
      NG2(5)=0
      EG2(5)=0.0
      NC0(6)=7
      EC0(6)=782.2
      WKLM(6)=0.0
      EFL(6)=0.0
      NG1(6)=0
      EG1(6)=0.0
      NG2(6)=0
      EG2(6)=0.0
      NC0(7)=7
      EC0(7)=839.7
      WKLM(7)=0.0
      EFL(7)=0.0
      NG1(7)=0
      EG1(7)=0.0
      NG2(7)=0
      EG2(7)=0.0
      NC0(8)=8
      EC0(8)=911.4
      WKLM(8)=0.0
      EFL(8)=0.0
      NG1(8)=0
      EG1(8)=0.0
      NG2(8)=0
      EG2(8)=0.0
      NC0(9)=9
      EC0(9)=4494.3
      WKLM(9)=0.0942
      EFL(9)=4106.
      NG1(9)=5
      EG1(9)=3900.
      NG2(9)=4
      EG2(9)=594.
      NC0(10)=9
      EC0(10)=4774.8
      WKLM(10)=0.093
      EFL(10)=4427.
      NG1(10)=5
      EG1(10)=4181.
      NG2(10)=4
      EG2(10)=594.
      NC0(11)=10
      EC0(11)=5015.2
      WKLM(11)=0.0475
      EFL(11)=4483.
      NG1(11)=5
      EG1(11)=4233.
      NG2(11)=6
      EG2(11)=782.
      NC0(12)=17
      EC0(12)=33900.
      WKLM(12)=0.89
      EFL(12)=29775.
      NG1(12)=8
      EG1(12)=29406.
      NG2(12)=9
      EG2(12)=4494.
#
      DO 776 J=1,NION
      DO 777 I=1,4000
      IF(EG(I):
 > EION(J)) :
       IOFFION(J)=I-1
      GO TO 776
      # endIF
  777 CONTINUE
  776 CONTINUE  
#                               
      EIN(1)=8.3153 
      EIN(2)=8.4365
      EIN(3)=9.4472
      EIN(4)=9.5697
      EIN(5)=9.5802
      EIN(6)=9.6856
      EIN(7)=9.7207
      EIN(8)=9.7893
      EIN(9)=9.8211
      EIN(10)=9.8904
      EIN(11)=9.9171
      EIN(12)=9.9335
      EIN(13)=9.9431
      EIN(14)=9.9588
      EIN(15)=10.0391
      EIN(16)=10.1575
      EIN(17)=10.2200
      EIN(18)=10.4010
      EIN(19)=10.5621
      EIN(20)=10.5932
      EIN(21)=10.9016
      EIN(22)=10.9576
      EIN(23)=10.9715
      EIN(24)=10.9788
      EIN(25)=11.0547
      EIN(26)=11.0691
      EIN(27)=11.1412
      EIN(28)=11.1626
      EIN(29)=11.2742
      EIN(30)=11.4225
      EIN(31)=11.4951
      EIN(32)=11.5829
      EIN(33)=11.6072
      EIN(34)=11.6828
      EIN(35)=11.7395
      EIN(36)=11.7521
      EIN(37)=11.8068
      EIN(38)=11.8403
      EIN(39)=11.8518
      EIN(40)=11.8778
      EIN(41)=11.8917
      EIN(42)=11.9082
      EIN(43)=11.9177
      EIN(44)=11.9416
      EIN(45)=11.9550
      EIN(46)=11.9621
      EIN(47)=11.9789
      EIN(48)=11.9886
      EIN(49)=11.9939
      EIN(50)=12.0
      EIN(51)=0.0
#***********************************************************************
# ENTER PENNING TRANSFER FRACTION FOR EACH LEVEL
# USE TRANSFER FRACTION BETWEEN 0.0 AND 0.1 FOR XENON
      DO 50 NL=1,NIN
      PENFRA[1,NL]=0.0
# PENNING TRANSFER DISTANCE MICRONS
      PENFRA[2,NL]=1.0
# PENNING TRANSFER TIME PICOSECONDS
   50 PENFRA[3,NL]=1.0
#***********************************************************************  
      IF(IPEN == 0):
 GO TO 4 
      DO 3 KDUM=1,NIN
      IF(PENFRA[1,KDUM] == 0.0):
 GO TO 3
      WRITE(6,999) NAME,EIN(KDUM),PENFRA[1,KDUM],PENFRA[2,KDUM],
     /PENFRA[3,KDUM]
  999 FORMAT(' GAS = ',A15,' ENERGY LEVEL = ',F7.4,' EV.',/,' PENNING PR
     /OBABILITY =',F5.3,' ABS.LENGTH =',F7.2,' DECAY TIME =',F7.1,/)    
    3 CONTINUE
    4 DO 5 NL=1,NIN
      DO 555 I=1,4000
      IF(EG(I):
 > EIN(NL)) :
       IOFFN(NL)=I-1
       GO TO 5
      # endIF
  555 CONTINUE
    5 CONTINUE
#  
      SCRPT(1)='                                                  '
      SCRPT(2)='ELASTIC ANISOTROPIC      XENON                    '
      IF(NANISO == 0):
 :
      SCRPT(2)='ELASTIC ISOTROPIC        XENON                    '
      # endIF
      SCRPT(3)='IONISATION CHARGE STATE=1       ELOSS=    12.12984'
      SCRPT(4)='IONISATION CHARGE STATE=2       ELOSS=    33.105  '
      SCRPT(5)='IONISATION CHARGE STATE=3+4+5+6 ELOSS=    64.155  '
      SCRPT(6)='IONISATION  M5-SHELL            ELOSS=   676.4    '
      SCRPT(7)='IONISATION  M4-SHELL            ELOSS=   689.0    '
      SCRPT(8)='IONISATION  M3-SHELL            ELOSS=   940.6    '
      SCRPT(9)='IONISATION  M2-SHELL            ELOSS=  1002.1    '
      SCRPT(10)='IONISATION  M1-SHELL            ELOSS=  1148.7    '
      SCRPT(11)='IONISATION  L3-SHELL            ELOSS=  4786.     '
      SCRPT(12)='IONISATION  L2-SHELL            ELOSS=  5107.     '
      SCRPT(13)='IONISATION  L1-SHELL            ELOSS=  5453.     '
      SCRPT(14)='IONISATION   K-SHELL            ELOSS= 34561.     '
      SCRPT(15)='ATTACHMENT                                        '
      SCRPT(16)='                                                  ' 
      SCRPT(17)='                                                  '
      SCRPT(18)=' EXC  1S5      J=2 METASTABLE   ELOSS=     8.3153 '
      SCRPT(19)=' EXC  1S4      J=1 RESONANT     ELOSS=     8.4365 '
      SCRPT(20)=' EXC  1S3      J=0 METASTABLE   ELOSS=     9.4472 '
      SCRPT(21)=' EXC  1S2      J=1 RESONANT     ELOSS=     9.5697 '
      SCRPT(22)=' EXC  2P10     J=1              ELOSS=     9.5802 '
      SCRPT(23)=' EXC  2P9      J=2              ELOSS=     9.6856 '
      SCRPT(24)=' EXC  2P8      J=3              ELOSS=     9.7207 '
      SCRPT(25)=' EXC  2P7      J=1              ELOSS=     9.7893 '
      SCRPT(26)=' EXC  2P6      J=2              ELOSS=     9.8211 '
      SCRPT(27)=' EXC  3D6      J=0              ELOSS=     9.8904 '
      SCRPT(28)=' EXC  3D5      J=1 RESONANT     ELOSS=     9.9171 '
      SCRPT(29)=' EXC  2P5      J=0              ELOSS=     9.9335 '
      SCRPT(30)=' EXC  3D4#     J=4              ELOSS=     9.9431 '
      SCRPT(31)=' EXC  3D3      J=2              ELOSS=     9.9588 '
      SCRPT(32)=' EXC  3D4      J=3              ELOSS=    10.0391 '
      SCRPT(33)=' EXC  3D1##    J=2              ELOSS=    10.1575 '
      SCRPT(34)=' EXC  3D1#     J=3              ELOSS=    10.2200 '
      SCRPT(35)=' EXC  3D2      J=1 RESONANT     ELOSS=    10.4010 '
      SCRPT(36)=' EXC  2S5      J=2              ELOSS=    10.5621 '
      SCRPT(37)=' EXC  2S4      J=1 RESONANT     ELOSS=    10.5932 '
      SCRPT(38)=' EXC  SUM 3P10-5                ELOSS=    10.9016 '
      SCRPT(39)=' EXC  2P4      J=1              ELOSS=    10.9576 '
      SCRPT(40)=' EXC  SUM 4D                    ELOSS=    10.9715 '
      SCRPT(41)=' EXC  4D5      J=1 RESONANT     ELOSS=    10.9788 '
      SCRPT(42)=' EXC  2P3      J=2              ELOSS=    11.0547 '
      SCRPT(43)=' EXC  2P2      J=1              ELOSS=    11.0691 '
      SCRPT(44)=' EXC  2P1      J=0              ELOSS=    11.1412 '
      SCRPT(45)=' EXC  4D2      J=1 RESONANT     ELOSS=    11.1626 '
      SCRPT(46)=' EXC  3S4      J=1 RESONANT     ELOSS=    11.2742 '
      SCRPT(47)=' EXC  5D5      J=1 RESONANT     ELOSS=    11.4225 '
      SCRPT(48)=' EXC  5D2      J=1 RESONANT     ELOSS=    11.4951 '
      SCRPT(49)=' EXC  4S4      J=1 RESONANT     ELOSS=    11.5829 '
      SCRPT(50)=' EXC  3S1#     J=1 RESONANT     ELOSS=    11.6072 '
      SCRPT(51)=' EXC  6D5      J=1 RESONANT     ELOSS=    11.6828 '
      SCRPT(52)=' EXC  6D2      J=1 RESONANT     ELOSS=    11.7395 '
      SCRPT(53)=' EXC  5S4      J=1 RESONANT     ELOSS=    11.7521 '
      SCRPT(54)=' EXC  7D5      J=1 RESONANT     ELOSS=    11.8068 '
      SCRPT(55)=' EXC  7D2      J=1 RESONANT     ELOSS=    11.8403 '
      SCRPT(56)=' EXC  6S4      J=1 RESONANT     ELOSS=    11.8518 '
      SCRPT(57)=' EXC  2S2      J=1 RESONANT     ELOSS=    11.8778 '
      SCRPT(58)=' EXC  8D5      J=1 RESONANT     ELOSS=    11.8917 '
      SCRPT(59)=' EXC  8D2      J=1 RESONANT     ELOSS=    11.9082 '
      SCRPT(60)=' EXC  7S4      J=1 RESONANT     ELOSS=    11.9177 '
      SCRPT(61)=' EXC  9D5      J=1 RESONANT     ELOSS=    11.9416 '
      SCRPT(62)=' EXC  9D2      J=1 RESONANT     ELOSS=    11.9550 '
      SCRPT(63)=' EXC  8S4      J=1 RESONANT     ELOSS=    11.9621 '
      SCRPT(64)=' EXC  10D5     J=1 RESONANT     ELOSS=    11.9789 '
      SCRPT(65)=' EXC  10D2     J=1 RESONANT     ELOSS=    11.9886 '
      SCRPT(66)=' EXC  9S4      J=1 RESONANT     ELOSS=    11.9939 '
      SCRPT(67)=' EXC  HIGH     J=1 RESONANT     ELOSS=    12.0    '
      SCRPT(68)=' BREMSSTRAHLUNG FROM XENON ATOM                   '
#     EN=-ESTEP/2.0  
      DO 900 I=1,NSTEP    
      EN=EG(I)                                           
#     EN=EN+ESTEP  
      IF(EN > EIN(1):
) :
       GAMMA1=(EMASS2+2.00*EN)/EMASS2
       GAMMA2=GAMMA1*GAMMA1
       BETA=math.sqrt(1.00-1.00/GAMMA2)
       BETA2=BETA*BETA
      # endIF                                                     
      IF(EN <= XEN(2):
) : 
       QELA=122.D-16  
       QMOM=122.D-16      
       GO TO 200
      # endIF 
      DO 110 J=2,NEL                                                    
      IF(EN <= XEL(J):
) GO TO 120                                        
  110 CONTINUE                                                          
      J=NEL   
  120 YXJ=math.log(YEL(J))
      YXJ1=math.log(YEL(J-1))
      XNJ=math.log(XEL(J))
      XNJ1=math.log(XEL(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QELA=math.exp(A*math.log(EN)+B)*1.D-16                                    
      DO 150 J=2,NDATA                                                  
      IF(EN <= XEN(J):
) GO TO 160                                        
  150 CONTINUE                                                          
      J=NDATA 
  160 YXJ=math.log(YMOM(J))
      YXJ1=math.log(YMOM(J-1))
      XNJ=math.log(XEN(J))
      XNJ1=math.log(XEN(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QMOM=math.exp(A*math.log(EN)+B)*1.D-16                                    
  200 CONTINUE
      PQ1=0.5+(QELA-QMOM)/QELA
      DO 201 J=2,NEPSI                                                  
      IF(EN <= XEPS(J):
) GO TO 202                                       
  201 CONTINUE                                                          
      J=NEPSI                                                           
  202 A=(YEPS(J)-YEPS(J-1))/(XEPS(J)-XEPS(J-1))                         
      B=(XEPS(J-1)*YEPS(J)-XEPS(J)*YEPS(J-1))/(XEPS(J-1)-XEPS(J))       
      PQ2=A*EN+B
# EPSILON =1.0-YEPS
      PQ2=1.00-PQ2
      IF(NANISO == 0):
 PEQEL(2,I)=0.5
      IF(NANISO == 1):
 PEQEL(2,I)=PQ1
      IF(NANISO == 2):
 PEQEL(2,I)=PQ2 
      Q(2,I)=QELA       
      IF(NANISO == 0):
 Q(2,I)=QMOM
# IONISATION CHARGE STATE =1                          
      QION(1,I)=0.0
      PEQION(1,I)=0.50
      IF(NANISO == 2):
 PEQION(1,I)=0.00                            
      IF(EN <= EION(1):
) GO TO 3200
      IF(EN > XION(NIONG):
) GO TO 221                                   
      DO 210 J=2,NIONG                                                  
      IF(EN <= XION(J):
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NIONG                                                           
  220 A=(YIN1(J)-YIN1(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YIN1(J)-XION(J)*YIN1(J-1))/(XION(J-1)-XION(J))       
      QION(1,I)=(A*EN+B)*1.0D-16           
      GO TO 222
# USE BORN-BETHE X-SECTION ABOVE XION(NIONG) EV
  221 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(1,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.8061
  222 CONTINUE  
# USE ANISOTROPIC SCATTERING FOR PRIMARY IONISATION ELECTRON FOR
# ENERGIES ABOVE 2 * IONISATION ENERGY  
# ANISOTROPIC ANGULAR DISTRIBUTION SAME AS ELASTIC AT ENERGY OFF SET BY
# IONISATION ENERGY
      IF(EN <= (2.0*EION(1):
)) GO TO 3200
      PEQION(1,I)=PEQEL(2,(I-IOFFION(1)))
# IONISATION CHARGE STATE =2                          
 3200 QION(2,I)=0.0
      PEQION(2,I)=0.50
      IF(NANISO == 2):
 PEQION(2,I)=0.00                            
      IF(EN <= EION(2):
) GO TO 3350    
      IF(EN > XIN2(NION2):
) GO TO 3221                                 
      DO 3210 J=2,NION2                                                 
      IF(EN <= XIN2(J):
) GO TO 3220                                      
 3210 CONTINUE                                                          
      J=NION2                                                           
 3220 A=(YIN2(J)-YIN2(J-1))/(XIN2(J)-XIN2(J-1))                         
      B=(XIN2(J-1)*YIN2(J)-XIN2(J)*YIN2(J-1))/(XIN2(J-1)-XIN2(J))       
      QION(2,I)=(A*EN+B)*1.0D-16           
      GO TO 3222
# USE BORN-BETHE X-SECTION ABOVE XIN2(NION2) EV
 3221 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(2,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.1133
 3222 CONTINUE  
# USE ANISOTROPIC SCATTERING FOR PRIMARY IONISATION ELECTRON FOR
# ENERGIES ABOVE 2 * IONISATION ENERGY  
# ANISOTROPIC ANGULAR DISTRIBUTION SAME AS ELASTIC AT ENERGY OFF SET BY
# IONISATION ENERGY
      IF(EN <= (2.0*EION(2):
)) GO TO 3250
      PEQION(2,I)=PEQEL(2,(I-IOFFION(2)))
# IONISATION CHARGE STATE =3                          
 3250 QION(3,I)=0.0
      PEQION(3,I)=0.50
      IF(NANISO == 2):
 PEQION(3,I)=0.00                            
      IF(EN <= EION(3):
) GO TO 3300    
      IF(EN > XIN3(NION3):
) GO TO 3271                                 
      DO 3265 J=2,NION3                                                 
      IF(EN <= XIN3(J):
) GO TO 3270                                      
 3265 CONTINUE                                                          
      J=NION3                                                           
 3270 A=(YIN3(J)-YIN3(J-1))/(XIN3(J)-XIN3(J-1))                         
      B=(XIN3(J-1)*YIN3(J)-XIN3(J)*YIN3(J-1))/(XIN3(J-1)-XIN3(J))       
      QION(3,I)=(A*EN+B)*1.0D-16           
      GO TO 3272
# USE BORN-BETHE X-SECTION ABOVE XIN3(NION3) EV
 3271 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(3,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.05496
 3272 CONTINUE  
# USE ANISOTROPIC SCATTERING FOR PRIMARY IONISATION ELECTRON FOR
# ENERGIES ABOVE 2 * IONISATION ENERGY  
# ANISOTROPIC ANGULAR DISTRIBUTION SAME AS ELASTIC AT ENERGY OFF SET BY
# IONISATION ENERGY
      IF(EN <= (2.0*EION(3):
)) GO TO 3300
      PEQION(3,I)=PEQEL(2,(I-IOFFION(3)))
# GROSS SUM OF IONISATION STATE =4+5+6
 3300 Q456=0.0
      IF(EN <= 106.35):
 GO TO 3350
      IF(EN > XIN4(NION4):
) GO TO 3349
      DO 3310 J=2,NION4
      IF(EN <= XIN4(J):
) GO TO 3325
 3310 CONTINUE
      J=NION4
 3325 A=(YIN4(J)-YIN4(J-1))/(XIN4(J)-XIN4(J-1))                         
      B=(XIN4(J-1)*YIN4(J)-XIN4(J)*YIN4(J-1))/(XIN4(J-1)-XIN4(J))       
      Q456=(A*EN+B)*1.0D-16 
      Q456=Q456*4.0/3.0
      IF(EN <= 160.45):
 GO TO 3350
      IF(EN > XIN5(NION5):
) GO TO 3349
      DO 3377 J=2,NION5
      IF(EN <= XIN5(J):
) GO TO 3322
 3377 CONTINUE
      J=NION5
 3322 A=(YIN5(J)-YIN5(J-1))/(XIN5(J)-XIN5(J-1))                         
      B=(XIN5(J-1)*YIN5(J)-XIN5(J)*YIN5(J-1))/(XIN5(J-1)-XIN5(J))       
      Q456=Q456+(A*EN+B)*1.0D-16*5.0/3.0
      IF(EN <= 227.2):
 GO TO 3350
      IF(EN > XIN6(NION6):
) GO TO 3349
      DO 3323 J=2,NION6
      IF(EN <= XIN6(J):
) GO TO 3324
 3323 CONTINUE
      J=NION6
 3324 A=(YIN6(J)-YIN6(J-1))/(XIN6(J)-XIN6(J-1))                         
      B=(XIN6(J-1)*YIN6(J)-XIN6(J)*YIN6(J-1))/(XIN6(J-1)-XIN6(J))       
      Q456=Q456+(A*EN+B)*1.0D-16*6.0/3.0
      GO TO 3350   
# USE BORN BETHE X-SECTION ABOVE XIN4(NION4) EV
 3349 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
# 0.3629 = .01959*4/3 + .004597*5/3  + .002504*6/3
      Q456=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.03629
# SUM 3 + 456
 3350 QION(3,I)=QION(3,I)+Q456     
# M5-SHELL IONISATION      
      QION(4,I)=0.00
      PEQION(4,I)=0.50
      IF(NANISO == 2):
 PEQION(4,I)=0.00                            
      IF(EN <= EION(4):
) GO TO 2233
      DO 2231 J=2,NIONM5
      IF(EN <= XM5S(J):
) GO TO 2232
 2231 CONTINUE
      J=NIONM5
 2232 A=(YM5S(J)-YM5S(J-1))/(XM5S(J)-XM5S(J-1))
      B=(XM5S(J-1)*YM5S(J)-XM5S(J)*YM5S(J-1))/(XM5S(J-1)-XM5S(J))
      QION(4,I)=(A*EN+B)*1.D-16
      PEQION(4,I)=PEQEL(2,(I-IOFFION(4)))
# M4-SHELL IONISATION
 2233 QION(5,I)=0.00
      PEQION(5,I)=0.50
      IF(NANISO == 2):
 PEQION(5,I)=0.00                            
      IF(EN <= EION(5):
) GO TO 2236
      DO 2234 J=2,NIONM4
      IF(EN <= XM4S(J):
) GO TO 2235
 2234 CONTINUE
      J=NIONM4
 2235 A=(YM4S(J)-YM4S(J-1))/(XM4S(J)-XM4S(J-1))
      B=(XM4S(J-1)*YM4S(J)-XM4S(J)*YM4S(J-1))/(XM4S(J-1)-XM4S(J))
      QION(5,I)=(A*EN+B)*1.D-16
      PEQION(5,I)=PEQEL(2,(I-IOFFION(5)))
# M3-SHELL IONISATION
 2236 QION(6,I)=0.00
      PEQION(6,I)=0.50
      IF(NANISO == 2):
 PEQION(6,I)=0.00                            
      IF(EN <= EION(6):
) GO TO 2239
      DO 2237 J=2,NIONM3
      IF(EN <= XM3S(J):
) GO TO 2238
 2237 CONTINUE
      J=NIONM3
 2238 A=(YM3S(J)-YM3S(J-1))/(XM3S(J)-XM3S(J-1))
      B=(XM3S(J-1)*YM3S(J)-XM3S(J)*YM3S(J-1))/(XM3S(J-1)-XM3S(J))
      QION(6,I)=(A*EN+B)*1.D-16
      PEQION(6,I)=PEQEL(2,(I-IOFFION(6)))
# M2-SHELL IONISATION
 2239 QION(7,I)=0.00
      PEQION(7,I)=0.50
      IF(NANISO == 2):
 PEQION(7,I)=0.00                            
      IF(EN <= EION(7):
) GO TO 2242
      DO 2240 J=2,NIONM2
      IF(EN <= XM2S(J):
) GO TO 2241
 2240 CONTINUE
      J=NIONM2
 2241 A=(YM2S(J)-YM2S(J-1))/(XM2S(J)-XM2S(J-1))
      B=(XM2S(J-1)*YM2S(J)-XM2S(J)*YM2S(J-1))/(XM2S(J-1)-XM2S(J))
      QION(7,I)=(A*EN+B)*1.D-16
      PEQION(7,I)=PEQEL(2,(I-IOFFION(7)))
# M1-SHELL IONISATION
 2242 QION(8,I)=0.00
      PEQION(8,I)=0.50
      IF(NANISO == 2):
 PEQION(8,I)=0.00                            
      IF(EN <= EION(8):
) GO TO 2245
      DO 2243 J=2,NIONM1
      IF(EN <= XM1S(J):
) GO TO 2244
 2243 CONTINUE
      J=NIONM1
 2244 A=(YM1S(J)-YM1S(J-1))/(XM1S(J)-XM1S(J-1))
      B=(XM1S(J-1)*YM1S(J)-XM1S(J)*YM1S(J-1))/(XM1S(J-1)-XM1S(J))
      QION(8,I)=(A*EN+B)*1.D-16
      PEQION(8,I)=PEQEL(2,(I-IOFFION(8)))
# L3-SHELL IONISATION
 2245 QION(9,I)=0.00
      PEQION(9,I)=0.50
      IF(NANISO == 2):
 PEQION(9,I)=0.00                            
      IF(EN <= EION(9):
) GO TO 2248
      DO 2246 J=2,NIONL3
      IF(EN <= XL3S(J):
) GO TO 2247
 2246 CONTINUE
      J=NIONL3
 2247 A=(YL3S(J)-YL3S(J-1))/(XL3S(J)-XL3S(J-1))
      B=(XL3S(J-1)*YL3S(J)-XL3S(J)*YL3S(J-1))/(XL3S(J-1)-XL3S(J))
      QION(9,I)=(A*EN+B)*1.D-16
      PEQION(9,I)=PEQEL(2,(I-IOFFION(9)))
# L2-SHELL IONISATION
 2248 QION(10,I)=0.00
      PEQION(10,I)=0.50
      IF(NANISO == 2):
 PEQION(10,I)=0.00                            
      IF(EN <= EION(10):
) GO TO 2251
      DO 2249 J=2,NIONL2
      IF(EN <= XL2S(J):
) GO TO 2250
 2249 CONTINUE
      J=NIONL2
 2250 A=(YL2S(J)-YL2S(J-1))/(XL2S(J)-XL2S(J-1))
      B=(XL2S(J-1)*YL2S(J)-XL2S(J)*YL2S(J-1))/(XL2S(J-1)-XL2S(J))
      QION(10,I)=(A*EN+B)*1.D-16
      PEQION(10,I)=PEQEL(2,(I-IOFFION(10)))
# L1-SHELL IONISATION
 2251 QION(11,I)=0.00
      PEQION(11,I)=0.50
      IF(NANISO == 2):
 PEQION(11,I)=0.00                            
      IF(EN <= EION(11):
) GO TO 2254
      DO 2252 J=2,NIONL1
      IF(EN <= XL1S(J):
) GO TO 2253
 2252 CONTINUE
      J=NIONL1
 2253 A=(YL1S(J)-YL1S(J-1))/(XL1S(J)-XL1S(J-1))
      B=(XL1S(J-1)*YL1S(J)-XL1S(J)*YL1S(J-1))/(XL1S(J-1)-XL1S(J))
      QION(11,I)=(A*EN+B)*1.D-16
      PEQION(11,I)=PEQEL(2,(I-IOFFION(11)))
#  K-SHELL IONISATION
 2254 QION(12,I)=0.00
      PEQION(12,I)=0.50
      IF(NANISO == 2):
 PEQION(12,I)=0.00                            
      IF(EN <= EION(12):
) GO TO 2257
      DO 2255 J=2,NIONK 
      IF(EN <= XKSH(J):
) GO TO 2256
 2255 CONTINUE
      J=NIONK 
 2256 A=(YKSH(J)-YKSH(J-1))/(XKSH(J)-XKSH(J-1))
      B=(XKSH(J-1)*YKSH(J)-XKSH(J)*YKSH(J-1))/(XKSH(J-1)-XKSH(J))
      QION(12,I)=(A*EN+B)*1.D-16
      PEQION(12,I)=PEQEL(2,(I-IOFFION(12)))
 2257 CONTINUE
# ATTACHMENT
      Q(4,I)=0.0
      QATT(1,I)=Q(4,I)
# COUNTING IONISATION                                   
      Q(5,I)=0.0     
      PEQEL(5,I)=0.50
      IF(NANISO == 2):
 PEQEL(5,I)=0.00                                  
      IF(EN <= EION(1):
) GO TO 242     
      IF(EN > XION(NIONG):
) GO TO 241                                
      DO 231 J=2,NIONG                                                 
      IF(EN <= XION(J):
) GO TO 240                                       
  231 CONTINUE                                                          
      J=NIONG                                                          
  240 A=(YINC(J)-YINC(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YINC(J)-XION(J)*YINC(J-1))/(XION(J-1)-XION(J))       
      Q(5,I)=(A*EN+B)*1.0D-16 
      GO TO 242
# USE BORN-BETHE X-SECTION ABOVE XION(NION) EV
  241 Q(5,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)
  242 CONTINUE   
# CORRECTION TO CHARGE STATE 1 2 3+4+5+6 X-SECTION FOR K L AND M SHELLS
# CORRECTION GIVES TOTAL IONISATION EQUAL TO OSCILLATOR SUM
      QTEMP=QION(4,I)+QION(5,I)+QION(6,I)+QION(7,I)+QION(8,I)+QION(9,I)+
     /QION(10,I)+QION(11,I)+QION(12,I)
      IF(Q(5,I):
 == 0.0) :
       QCORR=1.0
      else:
       QCORR=(Q(5,I)-QTEMP)/Q(5,I)
      # endIF
      QION(1,I)=QION(1,I)*QCORR
      QION(2,I)=QION(2,I)*QCORR
      QION(3,I)=QION(3,I)*QCORR
#
      Q(6,I)=0.0                                                        
#     
      DO 251 NL=1,NIN+1
      QIN(NL,I)=0.0
      PEQIN(NL,I)=0.50
      IF(NANISO == 2):
 :
       PEQIN(NL,I)=0.00
      # endIF
  251 CONTINUE 
# 1S5                                                    
      IF(EN <= EIN(1):
) GO TO 413     
      IF(EN > X1S5(N1S5):
) GO TO 3110                                   
      DO 310 J=2,N1S5                                                   
      IF(EN <= X1S5(J):
) GO TO 311                                      
  310 CONTINUE                                                          
      J=N1S5                                                           
  311 A=(Y1S5(J)-Y1S5(J-1))/(X1S5(J)-X1S5(J-1))                     
      B=(X1S5(J-1)*Y1S5(J)-X1S5(J)*Y1S5(J-1))/(X1S5(J-1)-X1S5(J)) 
      QIN(1,I)=(A*EN+B)*1.0D-18 
      GO TO 3111
 3110 QIN(1,I)=Y1S5(N1S5)*(X1S5(N1S5)/EN)**3*1.0D-18
 3111 IF(EN <= (2.0*EIN(1))) GO TO 312
      PEQIN(1,I)=PEQEL(2,(I-IOFFN(1)))       
# 1S4 F=0.260                   
  312 IF(EN <= EIN(2)) GO TO 413                    
      IF(EN > X1S4(N1S4):
) GO TO 3141                    
      DO 313 J=2,N1S4                                                  
      IF(EN <= X1S4(J):
) GO TO 314
  313 CONTINUE                                                          
      J=N1S4                                                           
  314 A=(Y1S4(J)-Y1S4(J-1))/(X1S4(J)-X1S4(J-1))                     
      B=(X1S4(J-1)*Y1S4(J)-X1S4(J)*Y1S4(J-1))/(X1S4(J-1)-X1S4(J)) 
      QIN(2,I)=(A*EN+B)*1.0D-18
      GO TO 3142
 3141 QIN(2,I)=0.260/(EIN(2)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(2)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(2)+E(3))
 3142 IF(EN <= (2.0*EIN(2))) GO TO 315
      PEQIN(2,I)=PEQEL(2,(I-IOFFN(2)))   
# 1S3                                  
  315 IF(EN <= EIN(3)) GO TO 413  
      IF(EN > X1S3(N1S3):
) GO TO 3170                              
      DO 316 J=2,N1S3                                                  
      IF(EN <= X1S3(J):
) GO TO 317                                      
  316 CONTINUE                                                          
      J=N1S3                                                           
  317 A=(Y1S3(J)-Y1S3(J-1))/(X1S3(J)-X1S3(J-1))                     
      B=(X1S3(J-1)*Y1S3(J)-X1S3(J)*Y1S3(J-1))/(X1S3(J-1)-X1S3(J)) 
      QIN(3,I)=(A*EN+B)*1.0D-18  
      GO TO 3171
 3170 QIN(3,I)=Y1S3(N1S3)*(X1S3(N1S3)/EN)**3*1.0D-18
 3171 IF(EN <= (2.0*EIN(3))) GO TO 318
      PEQIN(3,I)=PEQEL(2,(I-IOFFN(3)))   
# 1S2 F=0.183                   
  318 IF(EN <= EIN(4)) GO TO 413                
      IF(EN > X1S2(N1S2):
) GO TO 3201       
      DO 319 J=2,N1S2                                                  
      IF(EN <= X1S2(J):
) GO TO 320                               
  319 CONTINUE                                                          
      J=N1S2                                                           
  320 A=(Y1S2(J)-Y1S2(J-1))/(X1S2(J)-X1S2(J-1))                     
      B=(X1S2(J-1)*Y1S2(J)-X1S2(J)*Y1S2(J-1))/(X1S2(J-1)-X1S2(J)) 
      QIN(4,I)=(A*EN+B)*1.0D-18
      GO TO 3202
 3201 QIN(4,I)=0.183/(EIN(4)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(4)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(4)+E(3))
 3202 IF(EN <= (2.0*EIN(4))) GO TO 321
      PEQIN(4,I)=PEQEL(2,(I-IOFFN(4)))
#
# P STATES
#
# 2P10    
  321 IF(EN <= EIN(5)) GO TO 413 
      IF(EN > X2P10(N2P10):
) GO TO 3230                                
      DO 322 J=2,N2P10                                                 
      IF(EN <= X2P10(J):
) GO TO 323                                      
  322 CONTINUE                                                          
      J=N2P10                                                           
  323 A=(Y2P10(J)-Y2P10(J-1))/(X2P10(J)-X2P10(J-1))                     
      B=(X2P10(J-1)*Y2P10(J)-X2P10(J)*Y2P10(J-1))/(X2P10(J-1)-X2P10(J)) 
      QIN(5,I)=(A*EN+B)*1.0D-18         
      GO TO 3231
 3230 QIN(5,I)=Y2P10(N2P10)*(X2P10(N2P10)/EN)**3*1.0D-18 
 3231 IF(EN <= (2.0*EIN(5))) GO TO 324
      PEQIN(5,I)=PEQEL(2,(I-IOFFN(5)))
# 2P9    
  324 IF(EN <= EIN(6)) GO TO 413                        
      IF(EN > X2P9(N2P9):
) GO TO 3260                
      DO 325 J=2,N2P9                                                 
      IF(EN <= X2P9(J):
) GO TO 326                                      
  325 CONTINUE                                                          
      J=N2P9                                                           
  326 A=(Y2P9(J)-Y2P9(J-1))/(X2P9(J)-X2P9(J-1))                     
      B=(X2P9(J-1)*Y2P9(J)-X2P9(J)*Y2P9(J-1))/(X2P9(J-1)-X2P9(J)) 
      QIN(6,I)=(A*EN+B)*1.0D-18      
      GO TO 3261
 3260 QIN(6,I)=Y2P9(N2P9)*(X2P9(N2P9)/EN)*1.0D-18
 3261 IF(EN <= (2.0*EIN(6))) GO TO 327
      PEQIN(6,I)=PEQEL(2,(I-IOFFN(6)))
# 2P8    
  327 IF(EN <= EIN(7)) GO TO 413                 
      IF(EN > X2P8(N2P8):
) GO TO 3290                       
      DO 328 J=2,N2P8                                                 
      IF(EN <= X2P8(J):
) GO TO 329                                      
  328 CONTINUE                                                          
      J=N2P8                                                           
  329 A=(Y2P8(J)-Y2P8(J-1))/(X2P8(J)-X2P8(J-1))                     
      B=(X2P8(J-1)*Y2P8(J)-X2P8(J)*Y2P8(J-1))/(X2P8(J-1)-X2P8(J)) 
      QIN(7,I)=(A*EN+B)*1.0D-18      
      GO TO 3291  
 3290 QIN(7,I)=Y2P8(N2P8)*(X2P8(N2P8)/EN)**3*1.0D-18  
 3291 IF(EN <= (2.0*EIN(7))) GO TO 330
      PEQIN(7,I)=PEQEL(2,(I-IOFFN(7)))
# 2P7    
  330 IF(EN <= EIN(8)) GO TO 413                    
      IF(EN > X2P7(N2P7):
) GO TO 3320                    
      DO 331 J=2,N2P7                                                 
      IF(EN <= X2P7(J):
) GO TO 332                                      
  331 CONTINUE                                                          
      J=N2P7                                                           
  332 A=(Y2P7(J)-Y2P7(J-1))/(X2P7(J)-X2P7(J-1))                     
      B=(X2P7(J-1)*Y2P7(J)-X2P7(J)*Y2P7(J-1))/(X2P7(J-1)-X2P7(J)) 
      QIN(8,I)=(A*EN+B)*1.0D-18      
      GO TO 3321 
 3320 QIN(8,I)=Y2P7(N2P7)*(X2P7(N2P7)/EN)**2*1.0D-18   
 3321 IF(EN <= (2.0*EIN(8))) GO TO 333
      PEQIN(8,I)=PEQEL(2,(I-IOFFN(8)))
# 2P6    
  333 IF(EN <= EIN(9)) GO TO 413                    
      IF(EN > X2P6(N2P6):
) GO TO 3355                    
      DO 334 J=2,N2P6                                                 
      IF(EN <= X2P6(J):
) GO TO 335                                      
  334 CONTINUE                                                          
      J=N2P6                                                           
  335 A=(Y2P6(J)-Y2P6(J-1))/(X2P6(J)-X2P6(J-1))                     
      B=(X2P6(J-1)*Y2P6(J)-X2P6(J)*Y2P6(J-1))/(X2P6(J-1)-X2P6(J)) 
      QIN(9,I)=(A*EN+B)*1.0D-18      
      GO TO 3356   
 3355 QIN(9,I)=Y2P6(N2P6)*(X2P6(N2P6)/EN)*1.0D-18
 3356 IF(EN <= (2.0*EIN(9))) GO TO 336
      PEQIN(9,I)=PEQEL(2,(I-IOFFN(9)))
# 3D6    
  336 IF(EN <= EIN(10)) GO TO 413                
      IF(EN > X3D6(N3D6):
) GO TO 3380                    
      DO 337 J=2,N3D6                                                 
      IF(EN <= X3D6(J):
) GO TO 338                                      
  337 CONTINUE                                                          
      J=N3D6                                                           
  338 A=(Y3D6(J)-Y3D6(J-1))/(X3D6(J)-X3D6(J-1))                     
      B=(X3D6(J-1)*Y3D6(J)-X3D6(J)*Y3D6(J-1))/(X3D6(J-1)-X3D6(J)) 
      QIN(10,I)=(A*EN+B)*1.0D-18     
      GO TO 3381  
 3380 QIN(10,I)=Y3D6(N3D6)*(X3D6(N3D6)/EN)**1.5*1.0D-18 
 3381 IF(EN <= (2.0*EIN(10))) GO TO 339
      PEQIN(10,I)=PEQEL(2,(I-IOFFN(10)))
# 3D5 J=1 F=0.0100   
  339 IF(EN <= EIN(11)) GO TO 413 
      QIN(11,I)=0.0100/(EIN(11)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(11)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(11)+E(3))
      IF(QIN(11,I):
 < 0.0) QIN(11,I)=0.0
      IF(EN <= (2.0*EIN(11):
)) GO TO 340
      PEQIN(11,I)=PEQEL(2,(I-IOFFN(11)))
# 2P5 
  340 IF(EN <= EIN(12)) GO TO 413
      IF(EN > X2P5(N2P5):
) GO TO 3420
      DO 341 J=2,N2P5                                                 
      IF(EN <= X2P5(J):
) GO TO 342                                      
  341 CONTINUE                                                          
      J=N2P5                                                           
  342 A=(Y2P5(J)-Y2P5(J-1))/(X2P5(J)-X2P5(J-1))                     
      B=(X2P5(J-1)*Y2P5(J)-X2P5(J)*Y2P5(J-1))/(X2P5(J-1)-X2P5(J)) 
      QIN(12,I)=(A*EN+B)*1.0D-18     
      GO TO 3421
 3420 QIN(12,I)=Y2P5(N2P5)*(X2P5(N2P5)/EN)*1.0D-18   
 3421 IF(EN <= (2.0*EIN(12))) GO TO 343
      PEQIN(12,I)=PEQEL(2,(I-IOFFN(12)))
# 3D4#
  343 IF(EN <= EIN(13)) GO TO 413
      IF(EN > X3D4P(N3D4P):
) GO TO 3450
      DO 344 J=2,N3D4P                                                
      IF(EN <= X3D4P(J):
) GO TO 345                                      
  344 CONTINUE                                                          
      J=N3D4P                                                           
  345 A=(Y3D4P(J)-Y3D4P(J-1))/(X3D4P(J)-X3D4P(J-1))                     
      B=(X3D4P(J-1)*Y3D4P(J)-X3D4P(J)*Y3D4P(J-1))/(X3D4P(J-1)-X3D4P(J)) 
      QIN(13,I)=(A*EN+B)*1.0D-18       
      GO TO 3451 
 3450 QIN(13,I)=Y3D4P(N3D4P)*(X3D4P(N3D4P)/EN)**1.5*1.0D-18 
 3451 IF(EN <= (2.0*EIN(13))) GO TO 346
      PEQIN(13,I)=PEQEL(2,(I-IOFFN(13)))
# 3D3 
  346 IF(EN <= EIN(14)) GO TO 413
      IF(EN > X3D3(N3D3):
) GO TO 3480
      DO 347 J=2,N3D3                                                
      IF(EN <= X3D3(J):
) GO TO 348                                      
  347 CONTINUE                                                          
      J=N3D3                                                           
  348 A=(Y3D3(J)-Y3D3(J-1))/(X3D3(J)-X3D3(J-1))                     
      B=(X3D3(J-1)*Y3D3(J)-X3D3(J)*Y3D3(J-1))/(X3D3(J-1)-X3D3(J)) 
      QIN(14,I)=(A*EN+B)*1.0D-18     
      GO TO 3481
 3480 QIN(14,I)=Y3D3(N3D3)*(X3D3(N3D3)/EN)**1.5*1.0D-18    
 3481 IF(EN <= (2.0*EIN(14))) GO TO 349
      PEQIN(14,I)=PEQEL(2,(I-IOFFN(14)))
# 3D4 
  349 IF(EN <= EIN(15)) GO TO 413
      IF(EN > X3D4(N3D4):
) GO TO 3510
      DO 350 J=2,N3D4                                                
      IF(EN <= X3D4(J):
) GO TO 351                                      
  350 CONTINUE                                                          
      J=N3D4                                                           
  351 A=(Y3D4(J)-Y3D4(J-1))/(X3D4(J)-X3D4(J-1))                     
      B=(X3D4(J-1)*Y3D4(J)-X3D4(J)*Y3D4(J-1))/(X3D4(J-1)-X3D4(J)) 
      QIN(15,I)=(A*EN+B)*1.0D-18  
      GO TO 3511
 3510 QIN(15,I)=Y3D4(N3D4)*(X3D4(N3D4)/EN)**2*1.0D-18
 3511 IF(EN <= (2.0*EIN(15))) GO TO 352
      PEQIN(15,I)=PEQEL(2,(I-IOFFN(15)))
# 3D1##
  352 IF(EN <= EIN(16)) GO TO 413
      IF(EN > X3D1PP(N3D1PP):
) GO TO 3540
      DO 353 J=2,N3D1PP                                              
      IF(EN <= X3D1PP(J):
) GO TO 354                                
  353 CONTINUE                                                          
      J=N3D1PP                                                        
  354 A=(Y3D1PP(J)-Y3D1PP(J-1))/(X3D1PP(J)-X3D1PP(J-1))               
      B=(X3D1PP(J-1)*Y3D1PP(J)-X3D1PP(J)*Y3D1PP(J-1))/(X3D1PP(J-1)-
     /X3D1PP(J)) 
      QIN(16,I)=(A*EN+B)*1.0D-18  
      GO TO 3541
 3540 QIN(16,I)=Y3D1PP(N3D1PP)*(X3D1PP(N3D1PP)/EN)**3*1.0D-18
 3541 IF(EN <= (2.0*EIN(16))) GO TO 355
      PEQIN(16,I)=PEQEL(2,(I-IOFFN(16)))
# 3D1#
  355 IF(EN <= EIN(17)) GO TO 413
      IF(EN > X3D1P(N3D1P):
) GO TO 3570
      DO 356 J=2,N3D1P                                              
      IF(EN <= X3D1P(J):
) GO TO 357                                
  356 CONTINUE                                                          
      J=N3D1P                                                        
  357 A=(Y3D1P(J)-Y3D1P(J-1))/(X3D1P(J)-X3D1P(J-1))               
      B=(X3D1P(J-1)*Y3D1P(J)-X3D1P(J)*Y3D1P(J-1))/(X3D1P(J-1)-X3D1P(J)) 
      QIN(17,I)=(A*EN+B)*1.0D-18  
      GO TO 3571
 3570 QIN(17,I)=Y3D1P(N3D1P)*(X3D1P(N3D1P)/EN)*1.0D-18
 3571 IF(EN <= (2.0*EIN(17))) GO TO 358
      PEQIN(17,I)=PEQEL(2,(I-IOFFN(17)))
# 3D2 J=1 F=0.379
  358 IF(EN <= EIN(18)) GO TO 413 
      QIN(18,I)=0.3790/(EIN(18)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(18)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(18)+E(3))
      IF(QIN(18,I):
 < 0.0) QIN(18,I)=0.0
      IF(EN <= (2.0*EIN(18):
)) GO TO 359
      PEQIN(18,I)=PEQEL(2,(I-IOFFN(18)))
# 2S5
  359 IF(EN <= EIN(19)) GO TO 413
      IF(EN > X2S5(N2S5):
) GO TO 3610
      DO 360 J=2,N2S5                                               
      IF(EN <= X2S5(J):
) GO TO 361                                
  360 CONTINUE                                                          
      J=N2S5                                                        
  361 A=(Y2S5(J)-Y2S5(J-1))/(X2S5(J)-X2S5(J-1))               
      B=(X2S5(J-1)*Y2S5(J)-X2S5(J)*Y2S5(J-1))/(X2S5(J-1)-X2S5(J)) 
      QIN(19,I)=(A*EN+B)*1.0D-18  
      GO TO 3611
 3610 QIN(19,I)=Y2S5(N2S5)*(X2S5(N2S5)/EN)**3*1.0D-18
 3611 IF(EN <= (2.0*EIN(19))) GO TO 362
      PEQIN(19,I)=PEQEL(2,(I-IOFFN(19)))
# 2S4 J=1 F=0.086
  362 IF(EN <= EIN(20)) GO TO 413 
      QIN(20,I)=0.086/(EIN(20)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(20)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(20)+E(3))
      IF(QIN(20,I):
 < 0.0) QIN(20,I)=0.0
      IF(EN <= (2.0*EIN(20):
)) GO TO 363
      PEQIN(20,I)=PEQEL(2,(I-IOFFN(20)))
# SUM 3P10+3P9+3P8+3P7+3P6+3P5
  363 IF(EN <= EIN(21)) GO TO 413
      IF(EN > X3P105(N3PSUM):
) GO TO 3650
      DO 364 J=2,N3PSUM                                             
      IF(EN <= X3P105(J):
) GO TO 365                                
  364 CONTINUE                                                          
      J=N3PSUM                                                      
  365 A=(Y3P105(J)-Y3P105(J-1))/(X3P105(J)-X3P105(J-1))               
      B=(X3P105(J-1)*Y3P105(J)-X3P105(J)*Y3P105(J-1))/(X3P105(J-1)-
     /X3P105(J)) 
      QIN(21,I)=(A*EN+B)*1.0D-18
      GO TO 3651
 3650 QIN(21,I)=Y3P105(N3PSUM)*(X3P105(N3PSUM)/EN)*1.0D-18
 3651 IF(EN <= (2.0*EIN(21))) GO TO 366
      PEQIN(21,I)=PEQEL(2,(I-IOFFN(21)))
# 2P4                           
  366 IF(EN <= EIN(22)) GO TO 413
      IF(EN > X2P4(N2P4):
) GO TO 3680
      DO 367 J=2,N2P4                                               
      IF(EN <= X2P4(J):
) GO TO 368                                
  367 CONTINUE                                                          
      J=N2P4                                                      
  368 A=(Y2P4(J)-Y2P4(J-1))/(X2P4(J)-X2P4(J-1))               
      B=(X2P4(J-1)*Y2P4(J)-X2P4(J)*Y2P4(J-1))/(X2P4(J-1)-X2P4(J)) 
      QIN(22,I)=(A*EN+B)*1.0D-18  
      GO TO 3681
 3680 QIN(22,I)=Y2P4(N2P4)*(X2P4(N2P4)/EN)**2*1.0D-18
 3681 IF(EN <= (2.0*EIN(22))) GO TO 369
      PEQIN(22,I)=PEQEL(2,(I-IOFFN(22)))
# SUM 4D6+4D3+4D4P+4D4+4D1PP+4D1P
  369 IF(EN <= EIN(23)) GO TO 413
      IF(EN > X4DSUM(N4DSUM):
) GO TO 3710
      DO 370 J=2,N4DSUM                                              
      IF(EN <= X4DSUM(J):
) GO TO 371                                
  370 CONTINUE                                                          
      J=N4DSUM                                                      
  371 A=(Y4DSUM(J)-Y4DSUM(J-1))/(X4DSUM(J)-X4DSUM(J-1))               
      B=(X4DSUM(J-1)*Y4DSUM(J)-X4DSUM(J)*Y4DSUM(J-1))/(X4DSUM(J-1)-
     /X4DSUM(J)) 
      QIN(23,I)=(A*EN+B)*1.0D-18
      GO TO 3711
 3710 QIN(2,I)=Y4DSUM(N4DSUM)*(X4DSUM(N4DSUM)/EN)**3*1.0D-18
 3711 IF(EN <= (2.0*EIN(23))) GO TO 372
      PEQIN(23,I)=PEQEL(2,(I-IOFFN(23)))
# 4D5 J=1 F=0.0010
  372 IF(EN <= EIN(24)) GO TO 413 
      QIN(24,I)=0.0010/(EIN(24)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(24)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(24)+E(3))
      IF(QIN(24,I):
 < 0.0) QIN(24,I)=0.0
      IF(EN <= (2.0*EIN(24):
)) GO TO 373
      PEQIN(24,I)=PEQEL(2,(I-IOFFN(24)))
# 2P3                           
  373 IF(EN <= EIN(25)) GO TO 413
      IF(EN > X2P3(N2P3):
) GO TO 3750
      DO 374 J=2,N2P3                                               
      IF(EN <= X2P3(J):
) GO TO 375                                
  374 CONTINUE                                                          
      J=N2P3                                                      
  375 A=(Y2P3(J)-Y2P3(J-1))/(X2P3(J)-X2P3(J-1))               
      B=(X2P3(J-1)*Y2P3(J)-X2P3(J)*Y2P3(J-1))/(X2P3(J-1)-X2P3(J)) 
      QIN(25,I)=(A*EN+B)*1.0D-18  
      GO TO 3751
 3750 QIN(25,I)=Y2P3(N2P3)*(X2P3(N2P3)/EN)*1.D-18
 3751 IF(EN <= (2.0*EIN(25))) GO TO 376
# 2P2                           
  376 IF(EN <= EIN(26)) GO TO 413
      IF(EN > X2P2(N2P2):
) GO TO 3780
      DO 377 J=2,N2P2                                               
      IF(EN <= X2P2(J):
) GO TO 378                                
  377 CONTINUE                                                          
      J=N2P2                                                      
  378 A=(Y2P2(J)-Y2P2(J-1))/(X2P2(J)-X2P2(J-1))               
      B=(X2P2(J-1)*Y2P2(J)-X2P2(J)*Y2P2(J-1))/(X2P2(J-1)-X2P2(J)) 
      QIN(26,I)=(A*EN+B)*1.0D-18  
      GO TO 3781
 3780 QIN(26,I)=Y2P2(N2P2)*(X2P2(N2P2)/EN)**2*1.0D-18
 3781 IF(EN <= (2.0*EIN(26))) GO TO 379
# 2P1                           
  379 IF(EN <= EIN(27)) GO TO 413
      IF(EN > X2P1(N2P1):
) GO TO 3810
      DO 380 J=2,N2P1                                               
      IF(EN <= X2P1(J):
) GO TO 381                                
  380 CONTINUE                                                          
      J=N2P1                                                      
  381 A=(Y2P1(J)-Y2P1(J-1))/(X2P1(J)-X2P1(J-1))               
      B=(X2P1(J-1)*Y2P1(J)-X2P1(J)*Y2P1(J-1))/(X2P1(J-1)-X2P1(J)) 
      QIN(27,I)=(A*EN+B)*1.0D-18  
      GO TO 3811
 3810 QIN(27,I)=Y2P1(N2P1)*(X2P1(N2P1)/EN)*1.D-18
 3811 IF(EN <= (2.0*EIN(27))) GO TO 382
# 4D2 J=1 F=0.0835
  382 IF(EN <= EIN(28)) GO TO 413 
      QIN(28,I)=0.0835/(EIN(28)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(28)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(28)+E(3))
      IF(QIN(28,I):
 < 0.0) QIN(28,I)=0.0
      IF(EN <= (2.0*EIN(28):
)) GO TO 383
      PEQIN(28,I)=PEQEL(2,(I-IOFFN(28)))
# 3S4 J=1 F=0.0225
  383 IF(EN <= EIN(29)) GO TO 413 
      QIN(29,I)=0.0225/(EIN(29)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(29)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(29)+E(3))
      IF(QIN(29,I):
 < 0.0) QIN(29,I)=0.0
      IF(EN <= (2.0*EIN(29):
)) GO TO 384
      PEQIN(29,I)=PEQEL(2,(I-IOFFN(29)))
# 5D5 J=1 F=0.0227
  384 IF(EN <= EIN(30)) GO TO 413 
      QIN(30,I)=0.0227/(EIN(30)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(30)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(30)+E(3))
      IF(QIN(30,I):
 < 0.0) QIN(30,I)=0.0
      IF(EN <= (2.0*EIN(30):
)) GO TO 385
      PEQIN(30,I)=PEQEL(2,(I-IOFFN(30)))
# 5D2 J=1 F=0.0020
  385 IF(EN <= EIN(31)) GO TO 413 
      QIN(31,I)=0.0020/(EIN(31)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(31)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(31)+E(3))
      IF(QIN(31,I):
 < 0.0) QIN(31,I)=0.0
      IF(EN <= (2.0*EIN(31):
)) GO TO 386
      PEQIN(31,I)=PEQEL(2,(I-IOFFN(31)))
# 4S4 J=1 F=0.0005
  386 IF(EN <= EIN(32)) GO TO 413 
      QIN(32,I)=0.0005/(EIN(32)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(32)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(32)+E(3))
      IF(QIN(32,I):
 < 0.0) QIN(32,I)=0.0
      IF(EN <= (2.0*EIN(32):
)) GO TO 387
      PEQIN(32,I)=PEQEL(2,(I-IOFFN(32)))
# 3S1# J=1 F=0.1910
  387 IF(EN <= EIN(33)) GO TO 413 
      QIN(33,I)=0.1910/(EIN(33)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(33)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(33)+E(3))
      IF(QIN(33,I):
 < 0.0) QIN(33,I)=0.0
      IF(EN <= (2.0*EIN(33):
)) GO TO 388
      PEQIN(33,I)=PEQEL(2,(I-IOFFN(33)))
# 6D5 J=1 F=0.0088 
  388 IF(EN <= EIN(34)) GO TO 413 
      QIN(34,I)=0.0088/(EIN(34)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(34)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(34)+E(3))
      IF(QIN(34,I):
 < 0.0) QIN(34,I)=0.0
      IF(EN <= (2.0*EIN(34):
)) GO TO 389
      PEQIN(34,I)=PEQEL(2,(I-IOFFN(34)))
# 6D2 J=1 F=0.0967 
  389 IF(EN <= EIN(35)) GO TO 413 
      QIN(35,I)=0.0967/(EIN(35)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(35)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(35)+E(3))
      IF(QIN(35,I):
 < 0.0) QIN(35,I)=0.0
      IF(EN <= (2.0*EIN(35):
)) GO TO 390
      PEQIN(35,I)=PEQEL(2,(I-IOFFN(35)))
# 5S4 J=1 F=0.0288 
  390 IF(EN <= EIN(36)) GO TO 413 
      QIN(36,I)=0.0288/(EIN(36)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(36)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(36)+E(3))
      IF(QIN(36,I):
 < 0.0) QIN(36,I)=0.0
      IF(EN <= (2.0*EIN(36):
)) GO TO 391
      PEQIN(36,I)=PEQEL(2,(I-IOFFN(36)))
# 7D5 J=1 F=0.0042 
  391 IF(EN <= EIN(37)) GO TO 413 
      QIN(37,I)=0.0042/(EIN(37)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(37)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(37)+E(3))
      IF(QIN(37,I):
 < 0.0) QIN(37,I)=0.0
      IF(EN <= (2.0*EIN(37):
)) GO TO 392
      PEQIN(37,I)=PEQEL(2,(I-IOFFN(37)))
# 7D2 J=1 F=0.0625 
  392 IF(EN <= EIN(38)) GO TO 413 
      QIN(38,I)=0.0625/(EIN(38)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(38)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(38)+E(3))
      IF(QIN(38,I):
 < 0.0) QIN(38,I)=0.0
      IF(EN <= (2.0*EIN(38):
)) GO TO 393
      PEQIN(38,I)=PEQEL(2,(I-IOFFN(38)))
# 6S4 J=1 F=0.0025 
  393 IF(EN <= EIN(39)) GO TO 413 
      QIN(39,I)=0.0025/(EIN(39)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(39)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(39)+E(3))
      IF(QIN(39,I):
 < 0.0) QIN(39,I)=0.0
      IF(EN <= (2.0*EIN(39):
)) GO TO 394
      PEQIN(39,I)=PEQEL(2,(I-IOFFN(39)))
# 2S2 J=1 F=0.0290 
  394 IF(EN <= EIN(40)) GO TO 413 
      QIN(40,I)=0.0290/(EIN(40)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(40)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(40)+E(3))
      IF(QIN(40,I):
 < 0.0) QIN(40,I)=0.0
      IF(EN <= (2.0*EIN(40):
)) GO TO 395
      PEQIN(40,I)=PEQEL(2,(I-IOFFN(40)))
# 8D5 J=1 F=0.0035 
  395 IF(EN <= EIN(41)) GO TO 413 
      QIN(41,I)=0.0035/(EIN(41)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(41)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(41)+E(3))
      IF(QIN(41,I):
 < 0.0) QIN(41,I)=0.0
      IF(EN <= (2.0*EIN(41):
)) GO TO 396
      PEQIN(41,I)=PEQEL(2,(I-IOFFN(41)))
# 8D2 J=1 F=0.0386 
  396 IF(EN <= EIN(42)) GO TO 413 
      QIN(42,I)=0.0386/(EIN(42)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(42)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(42)+E(3))
      IF(QIN(42,I):
 < 0.0) QIN(42,I)=0.0
      IF(EN <= (2.0*EIN(42):
)) GO TO 397
      PEQIN(42,I)=PEQEL(2,(I-IOFFN(42)))
# 7S4 J=1 F=0.0050 
  397 IF(EN <= EIN(43)) GO TO 413 
      QIN(43,I)=0.0050/(EIN(43)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(43)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(43)+E(3))
      IF(QIN(43,I):
 < 0.0) QIN(43,I)=0.0
      IF(EN <= (2.0*EIN(43):
)) GO TO 398
      PEQIN(43,I)=PEQEL(2,(I-IOFFN(43)))
# 9D5 J=1 F=0.0005 
  398 IF(EN <= EIN(44)) GO TO 413 
      QIN(44,I)=0.0005/(EIN(44)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(44)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(44)+E(3))
      IF(QIN(44,I):
 < 0.0) QIN(44,I)=0.0
      IF(EN <= (2.0*EIN(44):
)) GO TO 399
      PEQIN(44,I)=PEQEL(2,(I-IOFFN(44)))
# 9D2 J=1 F=0.0250 
  399 IF(EN <= EIN(45)) GO TO 413 
      QIN(45,I)=0.0250/(EIN(45)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(45)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(45)+E(3))
      IF(QIN(45,I):
 < 0.0) QIN(45,I)=0.0
      IF(EN <= (2.0*EIN(45):
)) GO TO 400
      PEQIN(45,I)=PEQEL(2,(I-IOFFN(45)))
# 8S4 J=1 F=0.0023 
  400 IF(EN <= EIN(46)) GO TO 413 
      QIN(46,I)=0.0023/(EIN(46)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(46)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(46)+E(3))
      IF(QIN(46,I):
 < 0.0) QIN(46,I)=0.0
      IF(EN <= (2.0*EIN(46):
)) GO TO 401
      PEQIN(46,I)=PEQEL(2,(I-IOFFN(46)))
# 10D5 J=1 F=0.0005 
  401 IF(EN <= EIN(47)) GO TO 413 
      QIN(47,I)=0.0005/(EIN(47)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(47)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(47)+E(3))
      IF(QIN(47,I):
 < 0.0) QIN(47,I)=0.0
      IF(EN <= (2.0*EIN(47):
)) GO TO 402
      PEQIN(47,I)=PEQEL(2,(I-IOFFN(47)))
# 10D2 J=1 F=0.0164 
  402 IF(EN <= EIN(48)) GO TO 413 
      QIN(48,I)=0.0164/(EIN(48)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(48)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(48)+E(3))
      IF(QIN(48,I):
 < 0.0) QIN(48,I)=0.0
      IF(EN <= (2.0*EIN(48):
)) GO TO 403
      PEQIN(48,I)=PEQEL(2,(I-IOFFN(48)))
# 9S4  J=1 F=0.0014 
  403 IF(EN <= EIN(49)) GO TO 413 
      QIN(49,I)=0.0014/(EIN(49)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(49)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(49)+E(3))
      IF(QIN(49,I):
 < 0.0) QIN(49,I)=0.0
      IF(EN <= (2.0*EIN(49):
)) GO TO 404
      PEQIN(49,I)=PEQEL(2,(I-IOFFN(49)))
# HIGH J=1 F=0.0831
  404 IF(EN <= EIN(50)) GO TO 413 
      QIN(50,I)=0.0831/(EIN(50)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(50)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(50)+E(3))
      IF(QIN(50,I):
 < 0.0) QIN(50,I)=0.0
      IF(EN <= (2.0*EIN(50):
)) GO TO 405
      PEQIN(50,I)=PEQEL(2,(I-IOFFN(50)))
  405 CONTINUE
#     IF(EN <= 1000.) GO TO 413
#     DO 500 J=2,NBREM
#     IF(EN <= EBRM(2)) GO TO 510
# 500 CONTINUE
#     J=NBREM
# 510 A=(math.log(Z54T(J))-math.log(Z54T(J-1)))/(EBRM(J)-EBRM(J-1))
#     B=(math.log(Z54T(J))*EBRM(J-1)-math.log(Z54T(J-1))*EBRM(J))/
#    /(EBRM(J-1)-EBRM(J))
#     QIN(51,I)=math.exp(A*EN+B)*1.D-24
#
# CALCULATE TOTAL X-SECTION
  413 QEXC=0.0
      DO 414 NLEV=1,NIN
  414 QEXC=QEXC+QIN(NLEV,I) 
      Q(1,I)=QELA+QION(1,I)+QION(2,I)+QION(3,I)+QION(4,I)+QION(5,I)+
     /QION(6,I)+QION(7,I)+QION(8,I)+QION(9,I)+QION(10,I)+QION(11,I)+
     /QION(12,I)+QEXC
#    /QION(12,I)+QEXC+QIN(51,I)
#
#     WRITE(6,997) EN,Q(1,I),QEXC,Q(5,I),QELA
# 997 FORMAT(' EN =',D12.4,' QTOT =',D12.3,' QEXC =',D12.3,' QION =',D12
#    /.3,' QELA = ',D12.3)  
#
  900 CONTINUE       
# SAVE COMPUTE TIME
      DO 910 K=1,NIN
      IF(EFINAL <= EIN(K):
) :
       NIN=K-1
       GO TO 911
      # endIF
  910 CONTINUE
  911 CONTINUE
#      IF(EFINAL > 1000.) NIN=51
      RETURN                                                            
      # end 
      def GAS8(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY  
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
#    /QNULL,NNULL,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,
#    /SCRPT)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(4000),EROOT(4000),QT1(4000),QT2(4000),
     /QT3(4000),QT4(4000)
      COMMON/DENS/DEN(4000)
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30)
     /,EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]  
      DIMENSION XEN(153),YELM(153),YELT(153),YEPS(153),XATT(6),YATT(6), 
     /XVBV4(26),YVBV4(26),XVBV2(29),YVBV2(29),XVBV1(30),YVBV1(30),
     /XVBV3(25),YVBV3(25),XVBH1(14),YVBH1(14),XVBH2(14),YVBH2(14),
     /XION(70),YION(70),YINC(70),XINF(70),YINF(70),XINF1(68),YINF1(68),
     /XINF2(66),YINF2(66),XINF3(53),YINF3(53),XINF4(51),YINF4(51),
     /XINF5(50),YINF5(50),XINF6(48),YINF6(48),XINPP(49),YINPP(49),
     /XDET(9),YDET(9),XTR1(12),YTR1(12),XTR2(11),YTR2(11),
     /XTR3(11),YTR3(11),
     /XCHD[32],YCHD[32],XCHB[35],YCHB[35],XHAL(34),YHAL(34),
     /XHBE(34),YHBE(34),XKSH(83),YKSH(83),IOFFN(34),IOFFION(10)
      DIMENSION Z1T(25),Z6T(25),EBRM(25)
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME                                                 
      DATA XEN/0.00,.0001,.001,.002,.004,.007,0.01,.012,.014,.017,
     /0.02,.025,0.03,.035,0.04,0.05,0.06,0.07,0.08,0.09,
     /0.10,0.12,0.14,0.17,0.20,0.24,0.28,0.32,0.36,0.40,
     /0.45,0.50,0.60,0.70,0.80,1.00,1.20,1.40,1.70,2.00,
     /2.50,3.00,3.50,4.00,5.00,6.00,7.00,8.00,9.00,10.0,
     /12.0,15.0,20.0,25.0,30.0,40.0,50.0,60.0,80.0,100.,
     /150.,200.,300.,400.,500.,600.,800.,1000.,1500.,2000.,
     /3000.,4000.,5000.,6000.,7000.,8000.,9000.,1.D4,1.25D4,1.5D4,
     /1.75D4,2.0D4,2.5D4,3.0D4,3.5D4,4.0D4,4.5D4,5.0D4,6.0D4,7.0D4,
     /8.0D4,9.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5D5,3.0D5,3.5D5,
     /4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,
     /1.75D6,2.0D6,2.5D6,3.0D6,3.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,
     /8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5D7,3.0D7,3.5D7,
     /4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,1.0D8,1.25D8,1.5D8,
     /1.75D8,2.0D8,2.5D8,3.0D8,3.5D8,4.0D8,4.5D8,5.0D8,6.0D8,7.0D8,
     /8.0D9,9.0D8,1.0D9/
# ELASTIC MOMENTUM TRANSFER X-SECTION     
      DATA YELM/26.7,25.4,22.6,21.0,18.8,16.5,14.8,13.9,13.0,12.0,
     /11.2,10.05,9.05,8.20,7.50,6.25,5.30,4.60,3.88,3.22,
     /2.60,1.74,1.19,0.70,.440,.290,.270,.270,.325,.410,
     /.540,.645,.850,1.08,1.30,1.75,2.25,2.70,3.50,4.35,
     /6.00,7.70,9.70,11.7,14.9,17.0,18.4,18.6,18.6,17.7,
     /14.6,10.6,6.90,4.80,3.90,2.75,2.15,1.75,1.24,0.96,
     /0.59,.400,.235,0.16,.115,0.09,0.06,.045,.0223,.0134,
     /.00654,.0039,.00261,.00188,.00142,.00112,9.01D-4,7.44D-4,
     /4.96D-4,3.56D-4,
     /2.69D-4,2.11D-4,1.41D-4,1.01D-4,7.67D-5,6.03D-5,4.88D-5,4.04D-5,
     /2.92D-5,2.22D-5,
     /1.76D-5,1.43D-5,1.19D-5,8.09D-6,5.93D-6,4.57D-6,3.66D-6,2.54D-6,
     /1.89D-6,1.48D-6,
     /1.20D-6,9.96D-7,8.45D-7,6.38D-7,5.04D-7,4.11D-7,3.43D-7,2.92D-7,
     /2.09D-7,1.58D-7,
     /1.24D-7,1.00D-7,7.01D-8,5.21D-8,4.04D-8,3.24D-8,2.66D-8,2.22D-8,
     /1.62D-8,1.24D-8,
     /9.84D-9,8.00D-9,6.64D-9,4.45D-9,3.20D-9,2.42D-9,1.90D-9,1.26D-9,
     /8.98D-10,6.74D-10,
     /5.25D-10,4.21D-10,3.45D-10,2.44D-10,1.82D-10,1.40D-10,1.12D-10,
     /9.11D-11,5.89D-11,4.11D-11,
     /3.03D-11,2.32D-11,1.49D-11,1.04D-11,7.63D-12,5.84D-12,4.62D-12,
     /3.74D-12,2.60D-12,1.91D-12,
     /1.46D-12,1.16D-12,9.36D-13/
# ELASTIC TOTAL X-SECTION               
      DATA YELT/26.7,25.6,23.3,22.0,19.9,17.9,16.4,15.5,14.8,13.8,
     /12.9,11.6,10.6,9.67,8.89,7.60,6.57,5.70,4.90,4.20,
     /3.70,2.80,2.20,1.62,1.23,0.95,0.82,0.75,0.72,0.71,
     /0.73,0.77,0.95,1.10,1.28,1.72,2.25,3.00,3.96,5.05,
     /6.93,8.93,11.2,13.4,17.9,21.5,23.3,24.0,24.1,24.0,
     /22.2,19.9,16.0,13.4,11.6,8.94,7.57,6.46,5.11,4.24,
     /2.79,2.21,1.56,1.06,0.80,0.63,0.50,0.40,0.31,.252,
     /.202,.167,.147,.123,.106,.093,.083,.075,.060,.051,
     /.044,.039,.0315,.0266,.0231,.0205,.0185,.0169,.0144,.0127,
     /.0117,.0104,.00957,.00812,.00715,.00647,.00595,.00524,.00477,
     /.00444,
     /.00420,.00401,.00387,.00365,.00350,.00340,.00331,.00325,.00314,
     /.00308,
     /.00303,.00300,.00296,.00294,.00293,.00292,.00291,.00290,.00290,
     /.00289,
     /.00289,.00289,.00289,.00288,.00288,.00288,.00288,26*.002879/
# EPSILON FOR ELASTIC ANGULAR DISTRIBUTION  
#  EPSILON=1.0-YEPS
      DATA YEPS/1.00,.9883,.9550,.9319,.9172,.8830,.8543,.8459,.8188,
     /.8058,
     /.8039,.8012,.7827,.7743,.7680,.7373,.7149,.7153,.6937,.6584,
     /.5712,.4669,.3718,.2583,.1913,.1495,.1680,.1932,.2771,.4139,
     /.6212,.7594,.8429,.9727,1.0234,1.0262,1.000,.8507,.8268,.7939,
     /.8003,.7951,.8007,.8111,.7518,.6921,.6907,.6700,.6655,.6181,
     /.5124,.3626,.2575,.1917,.1736,.1512,.1338,.1245,.1054,.0951,
     /.0859,.0685,.0526,.0528,.0493,.0488,.0383,.0350,.0192,.0129,
     /.0069,.0046,.00326,.00272,.00232,.00204,.00180,.00162,.00130,
     /.00107,
     /.00091,.000791,.000634,.000523,.000448,.000390,.000344,.000307,
     /.000254,.000215,
     /1.81D-4,1.63D-4,1.46D-4,1.14D-4,9.23D-5,7.71D-5,6.60D-5,5.06D-5,
     /4.04D-5,3.33D-5,
     /2.81D-5,2.41D-5,2.09D-5,1.63D-5,1.32D-5,1.09D-5,9.17D-6,7.85D-6,
     /5.64D-6,4.24D-6,
     /3.31D-6,2.66D-6,1.83D-6,1.37D-6,1.03D-6,8.09D-7,6.55D-7,5.41D-7,
     /3.88D-7,2.92D-7,
     /2.27D-7,1.82D-7,1.49D-7,9.75D-8,6.87D-8,5.10D-8,3.93D-8,2.54D-8,
     /1.78D-8,1.31D-8,
     /1.01D-8,7.97D-9,6.46D-9,4.48D-9,3.28D-9,2.50D-9,1.97D-9,1.59D-9,
     /1.00D-9,6.86D-10,
     /4.98D-10,3.77D-10,2.37D-10,1.62D-10,1.17D-10,8.90D-11,6.90D-11,
     /5.60D-11,3.80D-11,2.70D-11,
     /2.10D-11,1.60D-11,1.30D-11/
# V4 DIPOLE PART AS ANALYTIC def IN def
# ABOVE 100 EV SCALED BY 1/E**2 
      DATA XVBV4/.1625135,0.20,0.30,0.40,0.50,0.60,0.80,1.00,1.50,2.00,
     /3.00,5.00,6.00,7.00,8.00,9.00,10.0,12.5,15.0,20.0,
     /30.0,40.0,50.0,60.0,80.0,100./
      DATA YVBV4/0.00,.0001,.060,.057,.055,.050,.040,.035,.041,.056,
     /.082,.278,.406,0.47,0.44,.383,.323,.266,.201,.126,
     /.056,.031,.020,.014,.0079,.005/ 
# V2       
      DATA XVBV2/.1901087,.195,0.20,0.21,0.22,0.23,0.24,0.26,0.28,0.30,
     /0.40,0.50,0.60,0.80,1.00,1.50,2.00,3.00,5.00,6.00,
     /7.00,8.00,9.00,10.0,12.5,15.0,20.0,30.0,40.0/
      DATA YVBV2/0.00,.028,.038,.051,.060,.066,.071,.075,.076,.077,  
     /.080,.081,.082,.082,.083,.084,.086,.118,.308,.446,
     /0.49,0.46,.403,.333,.217,.171,.102,.045,.025/
# V1  
      DATA XVBV1/.3615974,.363,.365,.367,0.37,.375,0.38,0.39,0.40,0.42,
     /0.45,0.50,0.60,0.70,0.80,1.00,1.50,2.00,3.00,5.00,
     /6.00,7.00,8.00,9.00,10.0,12.5,15.0,20.0,30.0,40.0/
      DATA YVBV1/.0,.0028,.0043,.0054,.0066,.0083,.0095,.0115,.013,.015,
     /.017,.019,0.02,0.02,.021,.022,.023,.025,.042,.157,
     /.226,.260,.260,.215,.190,.151,.120,.085,.038,.021/
# V3 DIPOLE PART AS ANALYTIC def
      DATA XVBV3/.3743690,0.40,0.50,0.60,0.70,0.80,1.00,1.50,2.00,3.00,
     /5.00,6.00,7.00,8.00,9.00,10.0,12.5,15.0,20.0,30.0,
     /40.0,50.0,60.0,80.0,100./
      DATA YVBV3/.0,.004,0.01,.011,.011,.011,.011,.015,.019,.105,
     /.458,.596,.680,.680,.593,.433,.300,.241,.142,.063,
     /.0355,.0227,.0158,.0089,.0057/
# VIBRATION HARMONIC 
      DATA XVBH1/.544,1.00,2.00,3.00,5.00,6.00,7.00,8.00,9.00,10.0,
     /12.5,15.0,17.5,20.0/
      DATA YVBH1/0.00,.0007,.0028,.014,.053,.068,.075,.075,.061,.044,
     /.031,.021,.015,.011/
# VIBRATION HARMONIC
      DATA XVBH2/.736,1.00,2.00,3.00,5.00,6.00,7.00,8.00,9.00,10.0,
     /12.5,15.0,17.5,20.0/
      DATA YVBH2/0.00,.0005,.0022,.0135,.044,.058,.064,.064,.053,.039,
     /.024,.014,.010,.006/
# IONISATION  X-SECTION ABOVE 1KEV GIVEN BY BORN-BETHE         
      DATA XION/12.65,13.5,14.0,14.5,15.0,15.5,16.0,16.5,17.0,17.5,     
     /18.0,18.5,19.0,19.5,21.0,21.5,22.0,22.5,23.0,23.5,
     /24.0,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,45.0,
     /50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,
     /100.,105.,110.,115.,120.,125.,130.,135.,140.,145.,
     /150.,160.,180.,200.,250.,300.,350.,400.,450.,500.,
     /550.,600.,650.,700.,750.,800.,850.,900.,950.,1000./
# GROSS IONISATION  WEIGHTED AVERAGE OF: RAP AND ENGLANDER, 
#                LINDSAY AND STEBBINGS, AND NISHIMURA
      DATA YION/0.00,.035,.075,.132,.201,.282,.366,.451,.538,.625,      
     /.715,.803,.892,.990,1.26,1.36,1.44,1.52,1.60,1.68,
     /1.75,2.00,2.23,2.41,2.58,2.72,2.83,2.95,3.06,3.25,
     /3.41,3.52,3.61,3.66,3.71,3.73,3.74,3.75,3.74,3.73,
     /3.71,3.68,3.66,3.63,3.60,3.57,3.53,3.50,3.46,3.42,
     /3.36,3.27,3.12,3.00,2.69,2.40,2.22,2.04,1.88,1.74,
     /1.64,1.53,1.44,1.36,1.30,1.25,1.19,1.15,1.10,1.053/
# COUNTING IONISATION
      DATA YINC/0.00,.035,.075,.132,.201,.282,.366,.451,.538,.625,      
     /.715,.803,.892,.990,1.26,1.36,1.44,1.52,1.60,1.68,
     /1.75,2.00,2.22,2.40,2.57,2.71,2.82,2.93,3.04,3.23,
     /3.38,3.49,3.57,3.62,3.67,3.69,3.70,3.71,3.70,3.69,
     /3.67,3.64,3.62,3.59,3.56,3.53,3.49,3.46,3.43,3.39,
     /3.33,3.24,3.09,2.97,2.66,2.38,2.20,2.02,1.86,1.72,
     /1.62,1.52,1.43,1.35,1.29,1.24,1.18,1.14,1.09,1.042/
# IONISATION TO DOUBLE CHARGE FINAL STATES
      DATA XINPP/27.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,45.0,
     /50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,
     /100.,105.,110.,115.,120.,125.,130.,135.,140.,145.,
     /150.,160.,180.,200.,250.,300.,350.,400.,450.,500.,
     /550.,600.,650.,700.,750.,800.,850.,900.,950.,1000./
      DATA YINPP/0.00,.005,.005,.005,.005,.005,0.01,0.01,0.01,
     /.015,.015,0.02,0.02,0.02,0.02,0.02,0.02,0.02,0.02,
     /0.02,0.02,0.02,0.02,0.02,0.02,0.02,0.02,.015,.015,
     /.015,.015,.015,.015,.015,0.01,0.01,0.01,0.01,0.01,
     /0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01/
# IONISATION TO CH4 +
      DATA XINF/12.65,13.5,14.0,14.5,15.0,15.5,16.0,16.5,17.0,17.5,
     /18.0,18.5,19.0,19.5,21.0,21.5,22.0,22.5,23.0,23.5,
     /24.0,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,45.0,
     /50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,
     /100.,105.,110.,115.,120.,125.,130.,135.,140.,145.,
     /150.,160.,180.,200.,250.,300.,350.,400.,450.,500.,
     /550.,600.,650.,700.,750.,800.,850.,900.,950.,1000./
      DATA YINF/0.0,.035,.075,.119,.169,.228,.284,.335,.383,.425,
     /.479,.529,.579,.632,.773,.824,.862,.899,.938,.976,
     /1.008,1.114,1.199,1.254,1.308,1.342,1.363,1.389,1.412,1.443,
     /1.477,1.497,1.502,1.508,1.514,1.514,1.510,1.508,1.499,1.494,
     /1.485,1.470,1.459,1.446,1.434,1.422,1.409,1.401,1.392,1.380,
     /1.359,1.325,1.269,1.227,1.119,1.016,.9535,.8886,.8206,.7609,
     /.7199,.6785,.6419,.6094,.5824,.5599,.5355,.5200,.4990,.4787/
# IONISATION TO CH3 +
      DATA XINF1/14.25,14.5,15.0,15.5,16.0,16.5,17.0,17.5,
     /18.0,18.5,19.0,19.5,21.0,21.5,22.0,22.5,23.0,23.5,
     /24.0,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,45.0,
     /50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,
     /100.,105.,110.,115.,120.,125.,130.,135.,140.,145.,
     /150.,160.,180.,200.,250.,300.,350.,400.,450.,500.,
     /550.,600.,650.,700.,750.,800.,850.,900.,950.,1000./
      DATA YINF1/0.0,.013,.032,.054,.081,.114,.152,.195,
     /.230,.267,.304,.347,.471,.517,.557,.598,.633,.668,
     /.700,.808,.896,.968,1.017,1.052,1.073,1.092,1.110,1.145,
     /1.178,1.205,1.221,1.227,1.233,1.232,1.227,1.230,1.226,1.220,
     /1.211,1.201,1.194,1.188,1.181,1.175,1.163,1.153,1.144,1.132,
     /1.113,1.088,1.047,1.011,.9249,.8351,.7766,.7171,.6676,.6240,
     /.5890,.5539,.5237,.4968,.4769,.4605,.4381,.4232,.4048,.3872/
# IONISATION TO CH2 +
      DATA XINF2/15.2,15.5,16.0,16.5,17.0,17.5,
     /18.0,18.5,19.0,19.5,21.0,21.5,22.0,22.5,23.0,23.5,
     /24.0,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,45.0,
     /50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,
     /100.,105.,110.,115.,120.,125.,130.,135.,140.,145.,
     /150.,160.,180.,200.,250.,300.,350.,400.,450.,500.,
     /550.,600.,650.,700.,750.,800.,850.,900.,950.,1000./
      DATA YINF2/0.0,.0004,.0010,.0019,.0030,.0044,
     /.0058,.0073,.0089,.0108,.0166,.0189,.0209,.0231,.0273,.0318,
     /.0363,.0593,.0888,.1208,.1499,.1797,.2034,.2220,.2415,.2684,
     /.2781,.2866,.2926,.2953,.2980,.3008,.3029,.3001,.2958,.2968,
     /.2969,.2949,.2937,.2902,.2868,.2834,.2790,.2755,.2720,.2677,
     /.2619,.2528,.2381,.2286,.1971,.1729,.1554,.1386,.1268,.1164,
     /.1091,.1019,.0942,.0874,.0839,.0809,.0764,.0732,.0694,.0658/
# IONISATION TO H +
      DATA XINF3/22.2,23.0,23.5,
     /24.0,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,45.0,
     /50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,
     /100.,105.,110.,115.,120.,125.,130.,135.,140.,145.,
     /150.,160.,180.,200.,250.,300.,350.,400.,450.,500.,
     /550.,600.,650.,700.,750.,800.,850.,900.,950.,1000./
      DATA YINF3/0.0,.00104,.00218,
     /.00341,.00962,.0176,.0265,.0419,.0585,.0782,.1016,.1266,.1885,
     /.2404,.2799,.3187,.3435,.3688,.3845,.3992,.4088,.4166,.4188,
     /.4198,.4193,.4200,.4154,.4112,.4067,.4003,.3951,.3896,.3834,
     /.3750,.3622,.3405,.3219,.2655,.2247,.2000,.1765,.1570,.1398,
     /.1291,.1187,.1083,.0990,.0933,.0883,.0824,.0780,.0735,.0692/
# IONISATION TO CH+ NOTE THRESHOLD INCREASED FROM 22.3 DUE TO EXC. STATE
      DATA XINF4/23.5,
     /24.0,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,45.0,
     /50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,
     /100.,105.,110.,115.,120.,125.,130.,135.,140.,145.,
     /150.,160.,180.,200.,250.,300.,350.,400.,450.,500.,
     /550.,600.,650.,700.,750.,800.,850.,900.,950.,1000./
      DATA YINF4/0.0,
     /.00112,.00758,.0166,.0269,.0438,.0621,.0785,.0933,.1090,.1308,
     /.1391,.1490,.1579,.1629,.1679,.1680,.1675,.1689,.1693,.1665,
     /.1631,.1611,.1596,.1570,.1545,.1520,.1491,.1467,.1443,.1415,
     /.1378,.1320,.1220,.1138,.0971,.0824,.0730,.0641,.0573,.0513,
     /.0471,.0430,.0399,.0370,.0349,.0332,.0315,.0304,.0289,.0274/
# IONISATION TO C +
      DATA XINF5/25.2,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,45.0,
     /50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,
     /100.,105.,110.,115.,120.,125.,130.,135.,140.,145.,
     /150.,160.,180.,200.,250.,300.,350.,400.,450.,500.,
     /550.,600.,650.,700.,750.,800.,850.,900.,950.,1000./
      DATA YINF5/0.0,.00092,.0018,.0028,.0068,.0112,.0160,.0212,.0267,
     /.0331,
     /.0412,.0446,.0477,.0508,.0539,.0561,.0581,.0581,.0578,.0579,
     /.0578,.0581,.0585,.0581,.0576,.0571,.0561,.0553,.0546,.0536,
     /.0524,.0501,.0463,.0436,.0352,.0303,.0256,.0213,.0188,.0166,
     /.0154,.0142,.0131,.0122,.0106,.0099,.0095,.0093,.0088,.0083/
# IONISATION TO H2 +
      DATA XINF6/27.9,30.0,32.0,34.0,36.0,38.0,40.0,45.0,
     /50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,
     /100.,105.,110.,115.,120.,125.,130.,135.,140.,145.,
     /150.,160.,180.,200.,250.,300.,350.,400.,450.,500.,
     /550.,600.,650.,700.,750.,800.,850.,900.,950.,1000./
      DATA YINF6/0.0,
     /.0010,.0028,.0047,.0074,.0109,.0146,.0214,
     /.0259,.0286,.0311,.0326,.0342,.0349,.0354,.0359,.0361,.0361,
     /.0360,.0356,.0352,.0348,.0344,.0341,.0336,.0332,.0328,.0324,
     /.0317,.0300,.0272,.0248,.0212,.0185,.0160,.0138,.0122,.0109,
     /.0103,.0098,.0089,.0082,.0077,.0073,.0065,.0059,.0057,.0054/
# K-SHELL IONISATION X-SECTION CARBON  
      DATA XKSH/285.,298.,307.,316.,325.,335.,345.,365.,398.,422.,
     /447.,473.,501.,531.,613.,668.,708.,750.,817.,917.,
     /1000.,1122.,1296.,1496.,1679.,1884.,2054.,2238.,2512.,2985.,
     /3981.,5012.,7079.,1.0D4,1.50D4,2.05D4,2.51D4,3.07D4,4.10D4,5.01D4,
     /6.13D4,7.08D4,8.18D4,1.0D5,1.54D5,2.05D5,2.99D5,4.10D5,5.01D5,
     /6.13D5,
     /7.08D5,8.18D5,1.0D6,1.26D6,1.5D6,2.05D6,3.07D6,4.10D6,5.01D6,
     /6.13D6,
     /7.08D6,8.18D6,1.0D7,1.26D7,1.5D7,2.05D7,3.07D7,4.10D7,5.01D7,
     /6.13D7,
     /7.08D7,8.18D7,1.0D8,1.26D8,1.5D8,2.05D8,3.07D8,4.10D8,5.01D8,
     /6.13D8,
     /7.08D8,8.18D8,1.0D9/
      DATA YKSH/0.00,1.66D-4,3.48D-4,5.25D-4,6.96D-4,8.63D-4,1.02D-3,
     /1.33D-3,1.75D-3,2.01D-3,
     /2.24D-3,2.46D-3,2.66D-3,2.84D-3,3.21D-3,3.38D-3,3.47D-3,3.55D-3,
     /3.65D-3,3.72D-3,
     /3.75D-3,3.74D-3,3.68D-3,3.57D-3,3.45D-3,3.31D-3,3.19D-3,3.07D-3,
     /2.91D-3,2.66D-3,
     /2.25D-3,1.95D-3,1.55D-3,1.21D-3,8.97D-4,7.07D-4,6.07D-4,5.21D-4,
     /4.21D-4,3.63D-4,
     /3.14D-4,2.84D-4,2.57D-4,2.25D-4,1.74D-4,1.50D-4,1.28D-4,1.15D-4,
     /1.09D-4,1.05D-4,
     /1.03D-4,1.02D-4,1.01D-4,1.005D-4,1.01D-4,1.03D-4,1.07D-4,1.11D-4,
     /1.14D-4,1.17D-4,
     /1.20D-4,1.22D-4,1.25D-4,1.29D-4,1.32D-4,1.38D-4,1.45D-4,1.50D-4,
     /1.54D-4,1.58D-4,
     /1.60D-4,1.63D-4,1.67D-4,1.71D-4,1.74D-4,1.80D-4,1.87D-4,1.92D-4,
     /1.96D-4,2.00D-4,
     /2.02D-4,2.05D-4,2.09D-4/
# ATTACHMENT  - DEATTACHMENT VIA H- 9.8 EV RESONANCE (RAWAT ET AL)
      DATA XDET/7.80,8.00,9.00,9.80,10.0,11.0,12.0,13.0,14.0/
      DATA YDET/0.00,.0049,.0134,.0153,.0150,.0113,.0038,.0095,0.00/
# ATTACHMENT  VIA CH2- ONLY (RAWAT ET AL)
      DATA XATT/9.00,10.0,10.4,11.0,12.0,13.0/                          
      DATA YATT/0.00,0.00092,.00112,.00089,.00027,0.00/                 
# DISSOCIATION TRIPLET + SINGLETS ( SINGLETS GIVEN ANALYTICALLY)
# TRIPLETS  
      DATA XTR1/7.50,8.50,10.0,11.0,12.0,13.0,15.0,17.0,20.0,23.0,
     /27.0,30.0/
      DATA YTR1/0.00,.015,.050,.075,.084,.090,.098,.100,.090,.075,
     /.055,.043/
      DATA XTR2/8.50,10.0,11.0,12.0,13.0,15.0,17.0,20.0,23.0,27.0,
     /30.0/
      DATA YTR2/0.00,.088,.161,.185,.198,.216,.220,.198,.165,.121,
     /.095/
      DATA XTR3/10.0,11.0,12.0,13.0,15.0,17.0,20.0,23.0,27.0,30.0,
     /35.0/
      DATA YTR3/0.00,.245,.504,.588,.665,.700,.700,.665,.525,.406,
     /.301/
# LIGHT EMISSION FROM CH(A2DELTA TO X2PI) 
      DATA XCHD/13.4,13.5,14.5,18.5,20.6,21.6,22.5,23.6,27.7,31.8,
     /33.5,33.9,35.4,37.5,39.2,40.0,44.0,49.1,55.6,58.3,
     /60.1,63.2,67.0,71.3,76.3,80.3,100.,150.,200.,400.,
     /700.,1000./
      DATA YCHD/0.00,.0041,.0065,.0116,.0169,.0205,.0232,.0261,.0299,
     /.0327,
     /.0339,.0355,.0363,.0392,.0411,.0441,.0462,.0469,.0476,.0479,
     /.0481,.0485,.0489,.0491,.0487,.0477,.0403,.0292,.0232,.0131,
     /.0082,.0060/
# LIGHT EMISSION FROM CH(B2SIGMA- TO X2PI)
      DATA XCHB/13.7,13.8,14.8,18.8,20.9,21.9,22.8,23.9,28.0,32.1,
     /33.8,34.2,35.7,37.8,39.5,42.1,43.4,44.3,49.4,56.0,
     /58.6,60.4,63.5,67.3,71.6,76.6,80.6,100.,150.,200.,
     /400.,700.,1000.,1500.,2000./
      DATA YCHB/0.00,2.44D-4,3.91D-4,6.96D-4,.00102,.00123,.0014,.00157,
     /.0018,.00197,
     /.00204,.00214,.00219,.00236,.00248,.00259,.00265,.00278,.00283,
     /.00286,
     /.00289,.00290,.00292,.00295,.00296,.00293,.00287,.00242,.00176,
     /.00139,
     /7.88D-4,4.93D-4,3.63D-4,2.57D-4,2.00D-4/
# LIGHT EMISSION FROM H(ALPHA)
      DATA XHAL/16.14,16.3,16.6,16.9,17.2,18.1,19.2,20.0,20.8,22.6,
     /25.2,30.0,40.0,50.0,60.0,70.0,80.0,90.0,100.,144.,
     /185.,200.,224.,245.,284.,364.,453.,500.,600.,700.,
     /800.,1000.,1500.,2000./
      DATA YHAL/0.00,2.54D-4,3.80D-4,5.05D-4,6.60D-4,.00101,.00142,
     /.00175,.00209,.00288,
     /.00431,.00686,.01225,.0156,.0181,.0195,.0204,.0203,.0200,.0181,
     /.0148,.0134,.0127,.0119,.0103,.00789,.00598,.00529,.00425,.00357,
     /.00309,.00227,.0016,.00125/
# LIGHT EMISSION FROM H(BETA)
      DATA XHBE/16.8,18.0,21.9,23.4,24.5,25.5,26.4,28.2,30.0,33.7,
     /37.2,40.0,50.0,57.7,80.0,100.,141.,169.,200.,226.,
     /247.,284.,340.,363.,398.,455.,500.,550.,654.,700.,
     /800.,999.,1500.,2000./
      DATA YHBE/0.00,1.53D-4,5.44D-4,7.19D-4,8.85D-4,.00114,.00128,
     /.00159,.00194,.00228,
     /.00269,.00316,.00374,.00419,.00481,.00463,.00419,.00374,.00314,
     /.00288,
     /.00269,.00227,.00194,.00179,.00160,.00140,.00128,.00114,9.5D-4,
     /8.85D-4,
     /7.19D-4,5.45D-4,3.84D-4,3.00D-4/
# BREMSSTRAHLUNG X-SECTION WITH CUT UNITS 10**-24
      DATA Z1T/11.3,6.18,2.80,1.54,.858,.407,.251,.176,.145,.150,
     /.167,.178,.187,.193,.198,.205,.210,.218,.222,.228,
     /.231,.233,.234,.235,.235/
      DATA Z6T/298.,178.,85.2,47.5,26.3,12.2,7.06,4.45,3.06,2.82,
     /2.89,2.99,3.08,3.13,3.18,3.25,3.31,3.39,3.44,3.49,
     /3.52,3.54,3.55,3.57,3.57/
      DATA EBRM/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,
     /2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,
     /4.E7,5.E7,6.E7,8.E7,1.E8/
#-----------------------------------------------------------------------
# 2015: INCLUDED IMPLICIT IONISATION DISSOCIATION CHANNELS AND
#        REMOVED IONISATION-EXCITATION (DISSOCIATION) CHANNEL.
#        ADDED ENERGY LOSS TO EXCITED ION LEVELS AS AN 
#        APPROXIMATE CROSS SECTION WITH ENERGY LOSS 16 EV
#-----------------------------------------------------------------------
# 2013: UPDATE INCLUDES USE OF OSCILLATOR STRENGTHS FOR DIPOLE SINGLET
#       DISSOCIATION X-SECTION. USED OSCILLATOR STRENGTH FROM 
#       AN AVERAGE OF BRION AND KATEMA WITH HIGH ENERGY VALUES FROM 
#       BERKOWITZ. 1-2% SCALING FACTOR AT # end OF BEF FORMULA IS FROM
#       INCREASED ENERGY LOSS FROM THRESHOLD ENERGY TO AVERAGE ENERGY 
#       FOR THE DIPOLE STATES. 
#       3 TRIPLET STATE DISSOCIATION X-SECTIONS ALLOWED TO VARY IN ORDER
#       TO GIVE FIT TO TOWNS# end COEFICIENT. 
#       INTRODUCED DISSOCIATIVE IONISATION X-SECTION OF APPROXIMATELY
#       50% OF TOTAL IONISATION X-SECTION .  AGREES WITH EXPERIMENTAL 
#       FRAGMENT YIELD FROM LINDSAY AND IMPROVES AGREEMENT WITH WINTERS 
#       TOTAL DISSOCIATION X-SECTION.
#       K-SHELL IONISATION INTRODUCED FOR DE/DX AND FANO CALCULATIONS. 
# ---------------------------------------------------------------------
# 2007: UPDATE OF 2004 DATABASE 
# NOW SPLIT V24 AND V13 VIBRATIONS INTO V1 V2 V3 AND V4 X-SECTIONS
#  SHAPE OF VIBRATIONS GIVEN BY SHAPE defS FROM THEORETICAL 
#  PREDICTIONS BY GIANTURCO ET AL. AND EXPERIMENT BY ALLAN.
#  VIBRATION ANGULAR DISTRIBUTIONS MODELLED BY MODIFIED CAPITELLI/LONGO
#  ELASTIC ANGULAR DISTRIBUTIONS CAN BE EITHER ISOTROPIC OR MODELLED
#  BY OKHRIMOVSKYY ET AL ALGORITHM
# IONISATION AND DISSOCIATION ANGULAR DISTRIBUTIONS GIVEN BY ELASTIC 
# ANGULAR DISTRIBUTION WITH ENERGY OFFSET GIVEN BY THRESHOLD ENERGY.
#  DATABASE EXT# endED TO MIP REGION.
# NOW INCLUDES LIGHT EMISSION X-SECTIONS FROM 
# SASIC ,PETROVIC ET AL NEW JOURNAL OF PHYSICS 6(2004)74
#----------------------------------------------------------------------
# ATTACHMENT CROSS-SECTION OF RAWAT ET AL : JOURNAL OF PHYSICS:
# CONFERENCE SERIES 80(2007)012018 NOW USED INSTEAD OF SHARP AND DOWELL
# DE-ATTACHMENT FOR PART OF ATTACHMENT TO H- ION ASSUMED DUE TO 
# HIGH COLLISIONAL ENERGY FORMATION.
# --------------------------------------------------------------------- 
#  FIT TO METHANE DRIFT VELOCITY OF HADDAD AND SCHMIDT AT LOW FIELD 
#  AND HUNTER AND KLINE AND YOSHIDA AT HIGH FIELD.
#  CALCULATED DRIFT VELOCITY IS WITHIN 1% AT ALL FIELDS UP TO 1000 TD 
#  TRANSVERSE AND LONGITUDINAL DIFFUSION WITHIN 3% AT ALL FIELDS
#  TOWNS# end COEFICIENT WITHIN 3% AT ALL FIELDS  
# REPRODUCES DRIFT VELOCITY AND LORENTZ ANGLES IN ARGON METHANE MIXTURES
# LORENTZ ANGLE ACCURACY LESS THAN 1 DEGREE IN ARGON MIXTURES
# DRIFT VELOCITY BETTER THAN 0.75% IN ARGON MIXTURES.
# ALL ENERGY DEP# endENT FANO FACTORS WITHIN EXPERIMENTAL ERRORS OF 5%  
#-----------------------------------------------------------------------
#     NANISO=0
      IF(NANISO == 0):
 :
       NAME=' CH4 2015    ISOTROPIC  '
      else:
       NAME=' CH4 2015  ANISOTROPIC  '
      # endIF
#-----------------------------------------------------------------------
# BORN BETHE CONSTANTS
      A0=0.52917720859D-08
      RY=13.60569193
      CONST=1.873884D-20
      EMASS2=1021997.804
      API=DACOS(-1.00)
      BBCONST=16.00*API*A0*A0*RY*RY/EMASS2
#
# BORN BETHE VALUES FOR IONISATION
      AM2=3.75
      C=42.5 
# BORN BETHE FOR EXCITATION
      AM2EXC=1.40
      CEXC=19.0 
#  ARRAY SIZE
      NASIZE=4000
# 
      NION=9
      NATT=1
      NIN=34
      NNULL=0
#
      NBREM=25
      DO 8 J=1,NIN
      IZBR(J)=0
    8 CONTINUE
      IZBR(35)=6
      IZBR(36)=1
#
      DO 1 J=1,6
    1 KEL(J)=NANISO
# SUPERELASTIC, V2 V1 AND HARMONIC VIBRATIONS ASSUMED ISOTROPIC
      KIN(1)=0
      KIN(3)=0
      KIN(4)=0
      KIN(5)=0
      KIN(7)=0
      KIN(8)=0
# V4 AND V3 VIBRATIONS ANISOTROPIC ( CAPITELLI-LONGO)
      KIN(2)=1
      KIN(6)=1
# ANGULAR DISTRIBUTION FOR DISSOCIATIVE EXCITATION IS OKHRIMOVSKYY TYPE 
      DO 2 J=9,NIN
    2 KIN(J)=2
#
#  RAT IS MOMENTUM TRANSFER TO TOTAL RATIO FOR VIBRATIONS IN THE
#  RESONANCE REGION AND ALSO FOR THE VIBRATIONS V1 AND V2 .     
#  USED DIPOLE ANGULAR DISTRIBUTION FOR V3 AND V4 NEAR THRESHOLD.
      RAT=1.0  
#                                                         
      NDATA=153 
      NVIBV4=26
      NVIBV2=29
      NVIBV1=30
      NVIBV3=25
      NVIBH1=14
      NVIBH2=14                                                        
      NIOND=70
      NIONF=70
      NIONF1=68
      NIONF2=66
      NIONF3=53
      NIONF4=51
      NIONF5=50
      NIONF6=48
      NIONPP=49
      NKSH=83                                                        
      NATT1=6   
      NDET=9   
      NTRP1=12
      NTRP2=11
      NTRP3=11                                                    
      NCHD=32
      NCHB=35
      NHAL=34
      NHBE=34
# VIBRATIONAL DEGENERACY
      DEGV4=3.0
      DEGV2=2.0
      DEGV1=1.0
      DEGV3=3.0
#
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(16.0426*AMU)                                      
      E(3)=12.65                      
      E(4)=0.0                                      
      E(5)=0.0                                            
      E(6)=0.0 
# 
      EION(1)=12.65
      EION(2)=14.25
      EION(3)=15.2
      EION(4)=22.2
      EION(5)=23.5
      EION(6)=25.2
      EION(7)=27.0
      EION(8)=27.9
      EION(9)=285.0
# OPAL BEATY 
      SCLOBY=0.475
      EOBY(1)=EION(1)*SCLOBY
      EOBY(2)=EION(2)*SCLOBY
      EOBY(3)=EION(3)*SCLOBY
      EOBY(4)=EION(4)*SCLOBY
      EOBY(5)=EION(5)*SCLOBY
      EOBY(6)=EION(6)*SCLOBY
      EOBY(7)=EION(7)*SCLOBY
      EOBY(8)=EION(8)*SCLOBY
      EOBY(9)=EION(9)*0.63
#
      DO 44 JK=1,8
      LEGAS(JK)=0
      ISHELL(JK)=0
      NC0(JK)=0
      EC0(JK)=0.0
      WKLM(JK)=0.0
      EFL(JK)=0.0
      NG1(JK)=0
      EG1(JK)=0.0
      NG2(JK)=0
      EG2(JK)=0.0
   44 CONTINUE
# DOUBLE CHARGED, 2+ ION STATES (EXTRA ELECTRON)
      NC0(7)=1
      EC0(7)=6.0
# FLUORESCENCE DATA
      LEGAS(9)=1
      ISHELL(9)=1
      NC0(9)=2
      EC0(9)=253.
      WKLM(9)=0.0026
      EFL(9)=273.
      NG1(9)=1
      EG1(9)=253.
      NG2(9)=2
      EG2(9)=5.
# OFFSET ENERGY FOR IONISATION ELECTRON ANGULAR DISTRIBUTION
      DO 776 J=1,NION
      DO 777 I=1,NASIZE
      IF(EG(I):
 > EION(J)) :
       IOFFION(J)=I-1
       GO TO 776
      # endIF
  777 CONTINUE
  776 CONTINUE
#
      EIN(1)=-0.1625135 
      EIN(2)=0.1625135
      EIN(3)=-0.1901087
      EIN(4)=0.1901087
      EIN(5)=0.3615974 
      EIN(6)=0.3743690
      EIN(7)=0.544
      EIN(8)=0.736
      EIN(9)=7.50  
      EIN(10)=7.80                                               
      EIN(11)=8.50                                                      
      EIN(12)=8.75
      EIN(13)=9.25
      EIN(14)=9.75
      EIN(15)=10.0
      EIN(16)=10.25
      EIN(17)=10.75
      EIN(18)=11.25
      EIN(19)=11.75
      EIN(20)=12.25
      EIN(21)=12.75
      EIN(22)=13.25
      EIN(23)=13.4 
      EIN(24)=13.7  
      EIN(25)=13.75
      EIN(26)=14.25
      EIN(27)=14.75
      EIN(28)=15.25
      EIN(29)=15.75
      EIN(30)=16.0
      EIN(31)=16.14
      EIN(32)=16.8
      EIN(33)=20.5
      EIN(34)=22.0
      EIN(35)=0.0
      EIN(36)=0.0
# OFFSET ENERGY FOR EXCITATION LEVELS ANGULAR DISTRIBUTION
      DO 3 NL=1,NIN
      DO 651 I=1,NASIZE
      IF(EG(I):
 > abs(EIN(NL))) :
       IOFFN(NL)=I-1
       GO TO 3
      # endIF
  651 CONTINUE
    3 CONTINUE
#***********************************************************************
# ENTER PENNING TRANSFER FRACTION FOR EACH LEVEL 
# LEVELS ARE DISSOCIATIVE SO DO NOT  GIVE PENNING TRANSFERS
      DO 4 K=1,34
      DO 4 L=1,3
    4 PENFRA[L,K]=0.0
      IF(IPEN == 0):
 GO TO 6
      DO 5 KDUM=10,14
      IF(PENFRA[1,KDUM] == 0.0):
 GO TO 5
      WRITE(6,999) NAME,EIN(KDUM),PENFRA[1,KDUM],PENFRA[2,KDUM],
     /PENFRA[3,KDUM]
  999 FORMAT(' GAS = ',A15,' ENERGY LEVEL = ',F7.4,' EV.',/,' PENNING PR
     /OBABILITY =',F5.3,' ABS.LENGTH =',F7.2,' DECAY TIME =',F7.1,/)
    5 CONTINUE
#***********************************************************************
#
    6 SCRPT(1)='                                                  '
      SCRPT(2)=' ELASTIC   ANISOTROPIC      METHANE               '
      IF(NANISO == 0):
 :
      SCRPT(2)=' ELASTIC     ISOTROPIC      METHANE               '
      # endIF
      SCRPT(3)=' IONISATION   CH4 +                ELOSS= 12.65   '
      SCRPT(4)=' IONISATION   CH3 +                ELOSS= 14.25   '
      SCRPT(5)=' IONISATION   CH2 +                ELOSS= 15.2    '
      SCRPT(6)=' IONISATION   H   +                ELOSS= 22.2    '
      SCRPT(7)=' IONISATION   CH  +                ELOSS= 23.5    '
      SCRPT(8)=' IONISATION   C   +                ELOSS= 25.2    '
      SCRPT(9)=' IONISATION     2(+)               ELOSS= 27.0    '
      SCRPT(10)=' IONISATION   H2  +                ELOSS= 27.9    '
      SCRPT(11)=' IONISATION CARBON K-SHELL         ELOSS=285.0    '
      SCRPT(12)=' ATTACHMENT (CH2- ION  ONLY)                      '
      SCRPT(13)='                                                  ' 
      SCRPT(14)='                                                  ' 
      SCRPT(15)=' VIBRATION V4 SUPERELASTIC         ELOSS=-0.162513'
      SCRPT(16)=' VIBRATION V4                      ELOSS= 0.162513'
      SCRPT(17)=' VIBRATION V2 SUPERELASTIC         ELOSS=-0.190109'
      SCRPT(18)=' VIBRATION V2                      ELOSS= 0.190109'
      SCRPT(19)=' VIBRATION V1                      ELOSS= 0.361597'
      SCRPT(20)=' VIBRATION V3                      ELOSS= 0.374369'
      SCRPT(21)=' VIBRATION  HARMONICS NV1+NV3      ELOSS=  0.544  '
      SCRPT(22)=' VIBRATION  HARMONICS NV2+NV3      ELOSS=  0.736  '
      SCRPT(23)=' EXCITATION TRIPLET  DISSOCIATION  ELOSS=  7.5    '
      SCRPT(24)=' ATTACHMENT - DEATTACHMENT         ELOSS=  7.8    '
      SCRPT(25)=' EXCITATION TRIPLET  DISSOCIATION  ELOSS=  8.5    '  
      SCRPT(26)=' EXCITATION SINGLET  DISSOCIATION  ELOSS=  8.75   '
      SCRPT(27)=' EXCITATION SINGLET  DISSOCIATION  ELOSS=  9.25   '
      SCRPT(28)=' EXCITATION SINGLET  DISSOCIATION  ELOSS=  9.75   '
      SCRPT(29)=' EXCITATION TRIPLET  DISSOCIATION  ELOSS= 10.0    '
      SCRPT(30)=' EXCITATION SINGLET  DISSOCIATION  ELOSS= 10.25   '
      SCRPT(31)=' EXCITATION SINGLET  DISSOCIATION  ELOSS= 10.75   '
      SCRPT(32)=' EXCITATION SINGLET  DISSOCIATION  ELOSS= 11.25   '
      SCRPT(33)=' EXCITATION SINGLET  DISSOCIATION  ELOSS= 11.75   '
      SCRPT(34)=' EXCITATION SINGLET  DISSOCIATION  ELOSS= 12.25   '
      SCRPT(35)=' EXCITATION SINGLET  DISSOCIATION  ELOSS= 12.75   '
      SCRPT(36)=' EXCITATION SINGLET  DISSOCIATION  ELOSS= 13.25   '
      SCRPT(37)=' EXCITATION A2D TO GROUND STATE.   ELOSS= 13.4    '
      SCRPT(38)=' EXCITATION B2PI TO GROUND STATE   ELOSS= 13.7    '
      SCRPT(39)=' EXCITATION SINGLET  DISSOCIATION  ELOSS= 13.75   '
      SCRPT(40)=' EXCITATION SINGLET  DISSOCIATION  ELOSS= 14.25   '
      SCRPT(41)=' EXCITATION SINGLET  DISSOCIATION  ELOSS= 14.75   '
      SCRPT(42)=' EXCITATION SINGLET  DISSOCIATION  ELOSS= 15.25   '
      SCRPT(43)=' EXCITATION SINGLET  DISSOCIATION  ELOSS= 15.75   '
      SCRPT(44)=' EXC. OF POSITIVE ION LEVELS       ELOSS= 16.0    '
      SCRPT(45)=' EXCITATION  H(ALPHA)              ELOSS= 16.14   '
      SCRPT(46)=' EXCITATION  H(BETA)               ELOSS= 16.8    '
      SCRPT(47)=' EXCITATION SINGLET  DISSOCIATION  ELOSS= 20.25   '
      SCRPT(48)=' EXCITATION SINGLET  DISSOCIATION  ELOSS= 22.0    '
      SCRPT(49)=' BREMSSTRAHLUNG FROM CARBON ATOM                  '
      SCRPT(50)=' BREMSSTRAHLUNG FROM HYDROGEN ATOM                '
# CALC LEVEL POPULATIONS
      APOPV4=DEGV4*math.exp(EIN(1)/AKT)
      APOPV2=DEGV2*math.exp(EIN(3)/AKT)
      APOPGS=1.0
      APOPSUM=APOPGS+APOPV4+APOPV2
      APOPGS=1.0/APOPSUM
      APOPV4=APOPV4/APOPSUM
      APOPV2=APOPV2/APOPSUM
#  RENORMALISE GROUND STATE TO ALLOW FOR INCREASED EXCITATION X-SEC 
#  FROM EXCITED VIBRATIONAL STATE ( EXACT FOR TWICE GROUND STATE XSEC) 
      APOPGS=1.0
#
#     EN=-ESTEP/2.0  
      DO 1000 I=1,NSTEP 
      EN=EG(I)                                             
#     EN=EN+ESTEP   
      GAMMA1=(EMASS2+2.00*EN)/EMASS2
      GAMMA2=GAMMA1*GAMMA1
      BETA=math.sqrt(1.00-1.00/GAMMA2)
      BETA2=BETA*BETA
# USE LOG INTERPOLATION FOR ELASTIC      
      IF(EN <= XEN(2):
) : 
       QELA=26.7D-16
       QMOM=26.7D-16
       PQ2=0.0
       GO TO 30 
      # endIF                                                    
      DO 10 J=2,NDATA 
      IF(EN <= XEN(J):
) GO TO 11                                        
   10 CONTINUE                                                          
      J=NDATA                                                           
   11 YXJ=math.log(YELT(J))
      YXJ1=math.log(YELT(J-1))
      XNJ=math.log(XEN(J))
      XNJ1=math.log(XEN(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QELA=math.exp(A*math.log(EN)+B)*1.D-16
      YXJ=math.log(YELM(J))
      YXJ1=math.log(YELM(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QMOM=math.exp(A*math.log(EN)+B)*1.D-16
# 
      YXJ=math.log(YEPS(J))
      YXJ1=math.log(YEPS(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      PQ2=math.exp(A*math.log(EN)+B)
#  EPSILON =1-YEPS
      PQ2=1.00-PQ2
   30 CONTINUE
      PQ1=0.5+(QELA-QMOM)/QELA
      IF(NANISO == 0):
 PEQEL(2,I)=0.5
      IF(NANISO == 1):
 PEQEL(2,I)=PQ1
      IF(NANISO == 2):
 PEQEL(2,I)=PQ2
      Q(2,I)=QELA 
      IF(NANISO == 0):
 Q(2,I)=QMOM
# IONISATION TO CH4 +                                                     
      QION(1,I)=0.0             
      PEQION(1,I)=0.5   
      IF(NANISO == 2):
 PEQION(1,I)=0.0                                   
      IF(EN < EION(1):
) GO TO 110   
      IF(EN > XINF(NIONF):
) GO TO 103                                   
      DO 101 J=2,NIONF                                                  
      IF(EN <= XINF(J):
) GO TO 102                                       
  101 CONTINUE                                                          
      J=NIONF                                                  
  102 A=(YINF(J)-YINF(J-1))/(XINF(J)-XINF(J-1))                         
      B=(XINF(J-1)*YINF(J)-XINF(J)*YINF(J-1))/(XINF(J-1)-XINF(J))       
      QION(1,I)=(A*EN+B)*1.D-16
      GO TO 104
# USE BORN BETHE X-SECTION ABOVE XINF(NIONF) EV
  103 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(1,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.4594
  104 CONTINUE        
      IF(EN <= (2.0*EION(1):
)) GO TO 110
      PEQION(1,I)=PEQEL(2,(I-IOFFION(1)))
# IONISATION TO CH3 +                                                     
  110 QION(2,I)=0.0             
      PEQION(2,I)=0.5   
      IF(NANISO == 2):
 PEQION(2,I)=0.0                                   
      IF(EN < EION(2):
) GO TO 120   
      IF(EN > XINF1(NIONF1):
) GO TO 113                               
      DO 111 J=2,NIONF1                                                 
      IF(EN <= XINF1(J):
) GO TO 112                                     
  111 CONTINUE                                                          
      J=NIONF1                                                  
  112 A=(YINF1(J)-YINF1(J-1))/(XINF1(J)-XINF1(J-1))                    
      B=(XINF1(J-1)*YINF1(J)-XINF1(J)*YINF1(J-1))/(XINF1(J-1)-XINF1(J))
      QION(2,I)=(A*EN+B)*1.D-16
      GO TO 114
# USE BORN BETHE X-SECTION ABOVE XINF1(NIONF1) EV
  113 QION(2,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.3716
  114 CONTINUE        
      IF(EN <= (2.0*EION(2):
)) GO TO 120
      PEQION(2,I)=PEQEL(2,(I-IOFFION(2)))
# IONISATION TO CH2 +                                                     
  120 QION(3,I)=0.0             
      PEQION(3,I)=0.5   
      IF(NANISO == 2):
 PEQION(3,I)=0.0                                   
      IF(EN < EION(3):
) GO TO 130   
      IF(EN > XINF2(NIONF2):
) GO TO 123                               
      DO 121 J=2,NIONF2                                                 
      IF(EN <= XINF2(J):
) GO TO 122                                     
  121 CONTINUE                                                          
      J=NIONF2                                                  
  122 A=(YINF2(J)-YINF2(J-1))/(XINF2(J)-XINF2(J-1))                    
      B=(XINF2(J-1)*YINF2(J)-XINF2(J)*YINF2(J-1))/(XINF2(J-1)-XINF2(J))
      QION(3,I)=(A*EN+B)*1.D-16
      GO TO 124
# USE BORN BETHE X-SECTION ABOVE XINF2(NIONF2) EV
  123 QION(3,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.06312
  124 CONTINUE        
      IF(EN <= (2.0*EION(3):
)) GO TO 130
      PEQION(3,I)=PEQEL(2,(I-IOFFION(3)))
# IONISATION TO H +                                                         
  130 QION(4,I)=0.0             
      PEQION(4,I)=0.5   
      IF(NANISO == 2):
 PEQION(4,I)=0.0                                   
      IF(EN < EION(4):
) GO TO 140   
      IF(EN > XINF3(NIONF3):
) GO TO 133                               
      DO 131 J=2,NIONF3                                                
      IF(EN <= XINF3(J):
) GO TO 132                                     
  131 CONTINUE                                                          
      J=NIONF3                                                  
  132 A=(YINF3(J)-YINF3(J-1))/(XINF3(J)-XINF3(J-1))                    
      B=(XINF3(J-1)*YINF3(J)-XINF3(J)*YINF3(J-1))/(XINF3(J-1)-XINF3(J))
      QION(4,I)=(A*EN+B)*1.D-16
      GO TO 134
# USE BORN BETHE X-SECTION ABOVE XINF3(NIONF3) EV
  133 QION(4,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.0664
  134 CONTINUE        
      IF(EN <= (2.0*EION(4):
)) GO TO 140
      PEQION(4,I)=PEQEL(2,(I-IOFFION(4)))
# IONISATION TO CH +                                                         
  140 QION(5,I)=0.0             
      PEQION(5,I)=0.5   
      IF(NANISO == 2):
 PEQION(5,I)=0.0                                   
      IF(EN < EION(5):
) GO TO 150   
      IF(EN > XINF4(NIONF4):
) GO TO 143                               
      DO 141 J=2,NIONF4                                                
      IF(EN <= XINF4(J):
) GO TO 142                                     
  141 CONTINUE                                                          
      J=NIONF4                                                 
  142 A=(YINF4(J)-YINF4(J-1))/(XINF4(J)-XINF4(J-1))                    
      B=(XINF4(J-1)*YINF4(J)-XINF4(J)*YINF4(J-1))/(XINF4(J-1)-XINF4(J))
      QION(5,I)=(A*EN+B)*1.D-16
      GO TO 144
# USE BORN BETHE X-SECTION ABOVE XINF4(NIONF4) EV
  143 QION(5,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.02625
  144 CONTINUE        
      IF(EN <= (2.0*EION(5):
)) GO TO 150
      PEQION(5,I)=PEQEL(2,(I-IOFFION(5)))
# IONISATION TO C +                                                         
  150 QION(6,I)=0.0             
      PEQION(6,I)=0.5   
      IF(NANISO == 2):
 PEQION(6,I)=0.0                                   
      IF(EN < EION(6):
) GO TO 160   
      IF(EN > XINF5(NIONF5):
) GO TO 153                               
      DO 151 J=2,NIONF5                                                
      IF(EN <= XINF5(J):
) GO TO 152                                     
  151 CONTINUE                                                          
      J=NIONF5                                                 
  152 A=(YINF5(J)-YINF5(J-1))/(XINF5(J)-XINF5(J-1))                    
      B=(XINF5(J-1)*YINF5(J)-XINF5(J)*YINF5(J-1))/(XINF5(J-1)-XINF5(J))
      QION(6,I)=(A*EN+B)*1.D-16
      GO TO 154
# USE BORN BETHE X-SECTION ABOVE XINF5(NIONF5) EV
  153 QION(6,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.00798
  154 CONTINUE        
      IF(EN <= (2.0*EION(6):
)) GO TO 160
      PEQION(6,I)=PEQEL(2,(I-IOFFION(6)))
# IONISATION TO DOUBLY POSITIVE CHARGED FINAL STATES             
  160 QION(7,I)=0.0             
      PEQION(7,I)=0.5   
      IF(NANISO == 2):
 PEQION(7,I)=0.0                                   
      IF(EN < EION(7):
) GO TO 170   
      IF(EN > XINPP(NIONPP):
) GO TO 163                               
      DO 161 J=2,NIONPP                                                
      IF(EN <= XINPP(J):
) GO TO 162                                     
  161 CONTINUE                                                          
      J=NIONPP                                                 
  162 A=(YINPP(J)-YINPP(J-1))/(XINPP(J)-XINPP(J-1))                    
      B=(XINPP(J-1)*YINPP(J)-XINPP(J)*YINPP(J-1))/(XINPP(J-1)-XINPP(J))
      QION(7,I)=(A*EN+B)*1.D-16
      GO TO 164
# USE BORN BETHE X-SECTION ABOVE XINPP(NIONPP) EV
  163 QION(7,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.0095969
  164 CONTINUE        
      IF(EN <= (2.0*EION(7):
)) GO TO 170
      PEQION(7,I)=PEQEL(2,(I-IOFFION(7)))
# IONISATION TO H2 +          
  170 QION(8,I)=0.0             
      PEQION(8,I)=0.5   
      IF(NANISO == 2):
 PEQION(8,I)=0.0                                   
      IF(EN < EION(8):
) GO TO 180   
      IF(EN > XINF6(NIONF6):
) GO TO 173                               
      DO 171 J=2,NIONF6                                                
      IF(EN <= XINF6(J):
) GO TO 172                                     
  171 CONTINUE                                                          
      J=NIONF6                                                 
  172 A=(YINF6(J)-YINF6(J-1))/(XINF6(J)-XINF6(J-1))                    
      B=(XINF6(J-1)*YINF6(J)-XINF6(J)*YINF6(J-1))/(XINF6(J-1)-XINF6(J))
      QION(8,I)=(A*EN+B)*1.D-16
      GO TO 174
# USE BORN BETHE X-SECTION ABOVE XINF6(NIONF6) EV
  173 QION(8,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.00523
  174 CONTINUE        
      IF(EN <= (2.0*EION(8):
)) GO TO 180
      PEQION(8,I)=PEQEL(2,(I-IOFFION(8)))
# CALCULATE K-SHELL IONISATION
  180 QION(9,I)=0.00
      PEQION(9,I)=0.5   
      IF(NANISO == 2):
 PEQION(9,I)=0.0                                   
      IF(EN <= EION(9):
) GO TO 200     
      DO 192 J=2,NKSH                                                   
      IF(EN <= XKSH(J):
) GO TO 193                                       
  192 CONTINUE                                                          
      J=NKSH                                                   
  193 A=(YKSH(J)-YKSH(J-1))/(XKSH(J)-XKSH(J-1))                         
      B=(XKSH(J-1)*YKSH(J)-XKSH(J)*YKSH(J-1))/(XKSH(J-1)-XKSH(J))       
      QION(9,I)=(A*EN+B)*1.D-16     
      IF(EN <= (2.0*EION(9):
)) GO TO 194
      PEQION(9,I)=PEQEL(2,(I-IOFFION(9)))
# COORECT IONISATION FOR SPLIT INTO K-SHELL
  194 QSUM=0.0
      DO 195 L=1,8
  195 QSUM=QSUM+QION(L,I)
      IF(QSUM == 0.0):
 GO TO 200
      FAC=(QSUM-QION(9,I))/QSUM
      DO 196 L=1,8
  196 QION(L,I)=QION(L,I)*FAC
#                                      
# ATTACHMENT                                               
  200 Q(4,I)=0.0
      QATT(1,I)=0.0                                     
      IF(EN < XATT(1):
) GO TO 250                                       
      IF(EN > XATT(NATT1):
) GO TO 250                                   
      DO 210 J=2,NATT1                                                  
      IF(EN <= XATT(J):
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NATT1                                                           
  220 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))                         
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))       
      Q(4,I)=(A*EN+B)*1.D-16
      QATT(1,I)=Q(4,I) 
# COUNTING IONISATION                                           
  250 Q(5,I)=0.0     
#     PEQEL(5,I)=0.5
#     IF(NANISO == 2) PEQEL(5,I)=0.0                              
#     IF(EN <= E(3)) GO TO 300
#     IF(EN > XION(NIOND)) GO TO 280 
#     DO 260 J=2,NIOND
#     IF(EN <= XION(J)) GO TO 270
# 260 CONTINUE
#     J=NIOND
# 270 A=(YINC(J)-YINC(J-1))/(XION(J)-XION(J-1))
#     B=(XION(J-1)*YINC(J)-XION(J)*YINC(J-1))/(XION(J-1)-XION(J))
#     Q(5,I)=(A*EN+B)*1.D-16
#     GO TO 290
# USE BORN-BETHE X-SECTION ABOVE XION(NIOND) EV
# 280 Q(5,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)
# 290 CONTINUE
#     IF(EN <= (2.0*E(3))) GO TO 295
#     PEQEL(5,I)=PEQEL(2,(I-IOFFION(1)))
# 295 CONTINUE      
# 
  300 Q(6,I)=0.0                                                        
# V4  SUPERELASTIC ISOTROPIC
      QIN(1,I)=0.0
      PEQIN(1,I)=0.50
      IF(EN <= 0.0):
 GO TO 350    
      IF((EN+EIN(2):
) > XVBV4(NVIBV4)) GO TO 325                        
      DO 310 J=2,NVIBV4                                                 
      IF((EN+EIN(2):
) <= XVBV4(J)) GO TO 320                             
  310 CONTINUE                                                          
      J=NVIBV4                                                          
  320 A=(YVBV4(J)-YVBV4(J-1))/(XVBV4(J)-XVBV4(J-1))                     
      B=(XVBV4(J-1)*YVBV4(J)-XVBV4(J)*YVBV4(J-1))/(XVBV4(J-1)-XVBV4(J))
      QIN(1,I)=(EN+EIN(2))*(A*(EN+EIN(2))+B)/EN
      GO TO 326
  325 QIN(1,I)=YVBV4(NVIBV4)*(XVBV4(NVIBV4)/(EN+EIN(2)))**2
  326 EFAC=math.sqrt(1.0-(EIN(1)/EN))
      QIN(1,I)=QIN(1,I)+0.076*math.log((EFAC+1.0)/(EFAC-1.0))/EN  
      QIN(1,I)=QIN(1,I)*APOPV4*1.D-16 
      QIN(1,I)=QIN(1,I)/DEGV4         
  350 CONTINUE                                                          
# V4   ANISOTROPIC                                                    
      QIN(2,I)=0.0   
       PEQIN(2,I)=0.50                                              
      IF(EN <= EIN(2):
) GO TO 400 
      IF(EN > XVBV4(NVIBV4):
) GO TO 375                         
      DO 360 J=2,NVIBV4                                                
      IF(EN <= XVBV4(J):
) GO TO 370                                      
  360 CONTINUE                                                          
      J=NVIBV4                                                         
  370 A=(YVBV4(J)-YVBV4(J-1))/(XVBV4(J)-XVBV4(J-1))                     
      B=(XVBV4(J-1)*YVBV4(J)-XVBV4(J)*YVBV4(J-1))/(XVBV4(J-1)-XVBV4(J))
      QIN(2,I)=A*EN+B
      GO TO 376
  375 QIN(2,I)=YVBV4(NVIBV4)*(XVBV4(NVIBV4)/EN)**2 
  376 EFAC=math.sqrt(1.0-(EIN(2)/EN))
      ADIP=0.076*math.log((1.0+EFAC)/(1.0-EFAC))/EN     
      ELF=EN-EIN(2)
      FWD=math.log((EN+ELF)/(EN+ELF-2.0*math.sqrt(EN*ELF)))
      BCK=math.log((EN+ELF+2.0*math.sqrt(EN*ELF))/(EN+ELF))
# RATIO OF MT TO TOTAL X-SECT FOR RESONANCE PART =RAT
      XMT=((1.5-FWD/(FWD+BCK))*ADIP+RAT*QIN(2,I))*APOPGS*1.D-16
      QIN(2,I)=(QIN(2,I)+ADIP)*APOPGS*1.D-16      
       PEQIN(2,I)=0.5+(QIN(2,I)-XMT)/QIN(2,I)
# V2 SUPERELASTIC ISOTROPIC
  400 QIN(3,I)=0.0
      PEQIN(3,I)=0.50
      IF(EN <= 0.0):
 GO TO 450
      IF((EN+EIN(4):
) > XVBV2(NVIBV2)) GO TO 421
      DO 410 J=2,NVIBV2
      IF((EN+EIN(4):
) <= XVBV2(J)) GO TO 420
  410 CONTINUE
      J=NVIBV2
  420 A=(YVBV2(J)-YVBV2(J-1))/(XVBV2(J)-XVBV2(J-1))                     
      B=(XVBV2(J-1)*YVBV2(J)-XVBV2(J)*YVBV2(J-1))/(XVBV2(J-1)-XVBV2(J))
      QIN(3,I)=(EN+EIN(4))*(A*(EN+EIN(4))+B)/EN
      QIN(3,I)=QIN(3,I)*APOPV2*1.D-16
      QIN(3,I)=QIN(3,I)/DEGV2
      GO TO 450
# SCALE BY 1/E**2 ABOVE XVBV2(NVIBV2) EV
  421 QIN(3,I)=YVBV2(NVIBV2)*(XVBV2(NVIBV2)/(EN+EIN(4)))**2*APOPV2*
     /1.D-16/DEGV2
# V2 ISOTROPIC
  450 QIN(4,I)=0.0
      PEQIN(4,I)=0.50
      IF(EN <= EIN(4):
) GO TO 500
      IF(EN > XVBV2(NVIBV2):
) GO TO 471
      DO 460 J=2,NVIBV2
      IF(EN <= XVBV2(J):
) GO TO 470
  460 CONTINUE
      J=NVIBV2
  470 A=(YVBV2(J)-YVBV2(J-1))/(XVBV2(J)-XVBV2(J-1))                     
      B=(XVBV2(J-1)*YVBV2(J)-XVBV2(J)*YVBV2(J-1))/(XVBV2(J-1)-XVBV2(J)) 
      QIN(4,I)=(A*EN+B)*APOPGS*1.D-16
      GO TO 500
# SCALE BY 1/E**2 ABOVE XVBV2(NVIBV2) EV
  471 QIN(4,I)=YVBV2(NVIBV2)*(XVBV2(NVIBV2)/EN)**2*APOPGS*1.D-16
# V1  ISOTROPIC                                                        
  500 QIN(5,I)=0.0
      PEQIN(5,I)=0.50                                                 
      IF(EN <= EIN(5):
) GO TO 550
      IF(EN > XVBV1(NVIBV1):
) GO TO 521                               
      DO 510 J=2,NVIBV1                                                 
      IF(EN <= XVBV1(J):
) GO TO 520                                      
  510 CONTINUE                                                          
      J=NVIBV1                                                          
  520 A=(YVBV1(J)-YVBV1(J-1))/(XVBV1(J)-XVBV1(J-1))                     
      B=(XVBV1(J-1)*YVBV1(J)-XVBV1(J)*YVBV1(J-1))/(XVBV1(J-1)-XVBV1(J))
      QIN(5,I)=(A*EN+B)*1.D-16
      GO TO 550 
# SCALE BY 1/E**2 ABOVE XVBV1(NVIBV1) EV
  521 QIN(5,I)=YVBV1(NVIBV1)*(XVBV1(NVIBV1)/EN)**2*1.D-16 
# V3  ANISOTROPIC                                                       
  550 QIN(6,I)=0.0    
      PEQIN(6,I)=0.50                
#     PEQIN(6,I)=0.00                                  
      IF(EN <= EIN(6):
) GO TO 600     
      IF(EN > XVBV3(NVIBV3):
) GO TO 575                               
      DO 560 J=2,NVIBV3                                                 
      IF(EN <= XVBV3(J):
) GO TO 570                                      
  560 CONTINUE                                                          
      J=NVIBV3                                                          
  570 A=(YVBV3(J)-YVBV3(J-1))/(XVBV3(J)-XVBV3(J-1))                     
      B=(XVBV3(J-1)*YVBV3(J)-XVBV3(J)*YVBV3(J-1))/(XVBV3(J-1)-XVBV3(J))
      QIN(6,I)=A*EN+B
      GO TO 576
  575 QIN(6,I)=YVBV3(NVIBV3)*(XVBV3(NVIBV3)/EN)**2
  576 EFAC=math.sqrt(1.0-(EIN(6)/EN))
      ADIP=0.076*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      ELF=EN-EIN(6)
      FWD=math.log((EN+ELF)/(EN+ELF-2.0*math.sqrt(EN*ELF)))
      BCK=math.log((EN+ELF+2.0*math.sqrt(EN*ELF))/(EN+ELF))
# RATIO OF MT TO TOTAL X-SECT FOR RESONANCE PART =RAT
      XMT=((1.5-FWD/(FWD+BCK))*ADIP+RAT*QIN(6,I))*1.D-16
      QIN(6,I)=(ADIP+QIN(6,I))*1.D-16      
      PEQIN(6,I)=0.5+(QIN(6,I)-XMT)/QIN(6,I)
#  VIBRATION HARMONICS 1 ISOTROPIC                                    
  600 QIN(7,I)=0.0
      PEQIN(7,I)=0.50               
      IF(EN <= EIN(7):
) GO TO 650    
      IF(EN > XVBH1(NVIBH1):
) GO TO 621
      DO 610 J=2,NVIBH1                                                 
      IF(EN <= XVBH1(J):
) GO TO 620                                      
  610 CONTINUE                                                          
      J=NVIBH1                                                          
  620 A=(YVBH1(J)-YVBH1(J-1))/(XVBH1(J)-XVBH1(J-1))                     
      B=(XVBH1(J-1)*YVBH1(J)-XVBH1(J)*YVBH1(J-1))/(XVBH1(J-1)-XVBH1(J)) 
      QIN(7,I)=(A*EN+B)*1.D-16   
      GO TO 650
# SCALE BY 1/E**2 ABOVE XVBH1(NVBH1) EV
  621 QIN(7,I)=YVBH1(NVIBH1)*(XVBH1(NVIBH1)/EN)**2*1.D-16
#  VIBRATION HARMONICS 2  ISOTROPIC                                     
  650 QIN(8,I)=0.0                   
      PEQIN(8,I)=0.50                                  
      IF(EN <= EIN(8):
) GO TO 700    
      IF(EN > XVBH2(NVIBH2):
) GO TO 671                                
      DO 660 J=2,NVIBH2                                                 
      IF(EN <= XVBH2(J):
) GO TO 670                                      
  660 CONTINUE                                                          
      J=NVIBH2                                                          
  670 A=(YVBH2(J)-YVBH2(J-1))/(XVBH2(J)-XVBH2(J-1))                     
      B=(XVBH2(J-1)*YVBH2(J)-XVBH2(J)*YVBH2(J-1))/(XVBH2(J-1)-XVBH2(J)) 
      QIN(8,I)=(A*EN+B)*1.D-16 
      GO TO 700
# SCALE BY 1/E**2 ABOVE XVBH2(NVIBH2) EV
  671 QIN(8,I)=YVBH2(NVIBH2)*(XVBH2(NVIBH2)/EN)**2*1.D-16
# TRIPLET DISSOCIATION 7.5EV
  700 QIN(9,I)=0.0
      PEQIN(9,I)=0.0
      IF(EN <= EIN(9):
) GO TO 705
      IF(EN > XTR1(NTRP1):
) GO TO 703
      DO 701 J=2,NTRP1
      IF(EN <= XTR1(J):
) GO TO 702
  701 CONTINUE
      J=NTRP1
  702 A=(YTR1(J)-YTR1(J-1))/(XTR1(J)-XTR1(J-1))
      B=(XTR1(J-1)*YTR1(J)-XTR1(J)*YTR1(J-1))/(XTR1(J-1)-XTR1(J))
      QIN(9,I)=(A*EN+B)*1.D-16
      GO TO 704
# SCALE BY 1/E**2 ABOVE XTR1(NTRP1) EV
  703 QIN(9,I)=YTR1(NTRP1)*(XTR1(NTRP1)/EN)**2*1.D-16
  704 IF(EN <= (3.0*EIN(9))) GO TO 705
      PEQIN(9,I)=PEQEL(2,(I-IOFFN(9)))                                 
# ATTACHMENT - DEATTACHMENT RESONANCE VIA H- AT 9.8EV RESONANCE
  705 QIN(10,I)=0.0
      PEQIN(10,I)=0.0
      IF(EN <= EIN(10):
) GO TO 708
      IF(EN > XDET(NDET):
) GO TO 708
      DO 706 J=2,NDET
      IF(EN <= XDET(J):
) GO TO 707
  706 CONTINUE
      J=NDET
  707 A=(YDET(J)-YDET(J-1))/(XDET(J)-XDET(J-1))
      B=(XDET(J-1)*YDET(J)-XDET(J)*YDET(J-1))/(XDET(J-1)-XDET(J))
      QIN(10,I)=(A*EN+B)*1.D-16
      IF(EN <= (3.0*EIN(10):
)) GO TO 708
      PEQIN(10,I)=PEQEL(2,(I-IOFFN(10)))
# TRIPLET DISSOCIATION  AT 8.5 EV
  708 QIN(11,I)=0.0
      PEQIN(11,I)=0.0
      IF(EN <= EIN(11):
) GO TO 713
      IF(EN > XTR2(NTRP2):
) GO TO 711
      DO 709 J=2,NTRP2
      IF(EN <= XTR2(J):
) GO TO 710
  709 CONTINUE
      J=NTRP2
  710 A=(YTR2(J)-YTR2(J-1))/(XTR2(J)-XTR2(J-1))
      B=(XTR2(J-1)*YTR2(J)-XTR2(J)*YTR2(J-1))/(XTR2(J-1)-XTR2(J))
      QIN(11,I)=(A*EN+B)*1.D-16
      GO TO 712
# SCALE BY 1/E**2 ABOVE XTR2(NTRP2) EV
  711 QIN(11,I)=YTR2(NTRP2)*(XTR2(NTRP2)/EN)**2*1.D-16
  712 IF(EN <= (3.0*EIN(11))) GO TO 713
      PEQIN(11,I)=PEQEL(2,(I-IOFFN(11)))                               
# SINGLET DISSOCIATION AT 8.75 EV USE BEF SCALING WITH F=0.0271
  713 QIN(12,I)=0.0
      PEQIN(12,I)=0.0
      IF(EN <= EIN(12):
) GO TO 714
      QIN(12,I)=0.0271/(EIN(12)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(12)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(12)+E(3))*1.029
      IF(QIN(12,I):
 < 0.0) QIN(12,I)=0.0       
      IF(EN <= (3.0*EIN(12):
)) GO TO 714
      PEQIN(12,I)=PEQEL(2,(I-IOFFN(12)))
# SINGLET DISSOCIATION AT 9.25 EV USE BEF SCALING WITH F=0.0442
  714 QIN(13,I)=0.0
      PEQIN(13,I)=0.0
      IF(EN <= EIN(13):
) GO TO 715
      QIN(13,I)=0.0442/(EIN(13)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(13)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(13)+E(3))*1.027
      IF(QIN(13,I):
 < 0.0) QIN(13,I)=0.0       
      IF(EN <= (3.0*EIN(13):
)) GO TO 715
      PEQIN(13,I)=PEQEL(2,(I-IOFFN(13)))
# SINGLET DISSOCIATION AT 9.75 EV USE BEF SCALING WITH F=0.0859
  715 QIN(14,I)=0.0
      PEQIN(14,I)=0.0
      IF(EN <= EIN(14):
) GO TO 716
      QIN(14,I)=0.0859/(EIN(14)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(14)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(14)+E(3))*1.026
      IF(QIN(14,I):
 < 0.0) QIN(14,I)=0.0       
      IF(EN <= (3.0*EIN(14):
)) GO TO 716
      PEQIN(14,I)=PEQEL(2,(I-IOFFN(14)))
# TRIPLET DISSOCIATION  AT 10.0EV
  716 QIN(15,I)=0.0
      PEQIN(15,I)=0.0
      IF(EN <= EIN(15):
) GO TO 721
      IF(EN > XTR3(NTRP3):
) GO TO 719
      DO 717 J=2,NTRP3
      IF(EN <= XTR3(J):
) GO TO 718
  717 CONTINUE
      J=NTRP3
  718 A=(YTR3(J)-YTR3(J-1))/(XTR3(J)-XTR3(J-1))
      B=(XTR3(J-1)*YTR3(J)-XTR3(J)*YTR3(J-1))/(XTR3(J-1)-XTR3(J))
      QIN(15,I)=(A*EN+B)*1.D-16
      GO TO 720
# SCALE BY 1/E**2 ABOVE XTR3(NTRP3) EV
  719 QIN(15,I)=YTR3(NTRP3)*(XTR3(NTRP3)/EN)**2*1.D-16
  720 IF(EN <= (3.0*EIN(15))) GO TO 721
      PEQIN(15,I)=PEQEL(2,(I-IOFFN(15)))                               
# SINGLET DISSOCIATION AT 10.25 EV USE BEF SCALING WITH F=0.0906
  721 QIN(16,I)=0.00
      PEQIN(16,I)=0.0
      IF(EN <= EIN(16):
) GO TO 722
      QIN(16,I)=0.0906/(EIN(16)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(16)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(16)+E(3))*1.024
      IF(QIN(16,I):
 < 0.0) QIN(16,I)=0.0       
      IF(EN <= (3.0*EIN(16):
)) GO TO 722
      PEQIN(16,I)=PEQEL(2,(I-IOFFN(16)))
# SINGLET DISSOCIATION AT 10.75 EV USE BEF SCALING WITH F=0.0841
  722 QIN(17,I)=0.0
      PEQIN(17,I)=0.0
      IF(EN <= EIN(17):
) GO TO 723
      QIN(17,I)=0.0841/(EIN(17)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(17)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(17)+E(3))*1.023
      IF(QIN(17,I):
 < 0.0) QIN(17,I)=0.0       
      IF(EN <= (3.0*EIN(17):
)) GO TO 723
      PEQIN(17,I)=PEQEL(2,(I-IOFFN(17)))
# SINGLET DISSOCIATION AT 11.25 EV USE BEF SCALING WITH F=0.1036
  723 QIN(18,I)=0.0
      PEQIN(18,I)=0.0
      IF(EN <= EIN(18):
) GO TO 724
      QIN(18,I)=0.1036/(EIN(18)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(18)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(18)+E(3))*1.022
      IF(QIN(18,I):
 < 0.0) QIN(18,I)=0.0       
      IF(EN <= (3.0*EIN(18):
)) GO TO 724
      PEQIN(18,I)=PEQEL(2,(I-IOFFN(18)))
# SINGLET DISSOCIATION AT 11.75 EV USE BEF SCALING WITH F=0.1460
  724 QIN(19,I)=0.0
      PEQIN(19,I)=0.0
      IF(EN <= EIN(19):
) GO TO 725
      QIN(19,I)=0.1460/(EIN(19)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(19)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(19)+E(3))*1.021
      IF(QIN(19,I):
 < 0.0) QIN(19,I)=0.0       
      IF(EN <= (3.0*EIN(19):
)) GO TO 725
      PEQIN(19,I)=PEQEL(2,(I-IOFFN(19)))
# SINGLET DISSOCIATION AT 12.25 EV USE BEF SCALING WITH F=0.1548
  725 QIN(20,I)=0.0
      PEQIN(20,I)=0.0
      IF(EN <= EIN(20):
) GO TO 726
      QIN(20,I)=0.1548/(EIN(20)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(20)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(20)+E(3))*1.020
      IF(QIN(20,I):
 < 0.0) QIN(20,I)=0.0       
      IF(EN <= (3.0*EIN(20):
)) GO TO 726
      PEQIN(20,I)=PEQEL(2,(I-IOFFN(20)))
# SINGLET DISSOCIATION AT 12.75 EV USE BEF SCALING WITH F=0.1927
  726 QIN(21,I)=0.0
      PEQIN(21,I)=0.0
      IF(EN <= EIN(21):
) GO TO 727
      QIN(21,I)=0.1927/(EIN(21)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(21)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(21)+E(3))*1.020
      IF(QIN(21,I):
 < 0.0) QIN(21,I)=0.0       
      IF(EN <= (3.0*EIN(21):
)) GO TO 727
      PEQIN(21,I)=PEQEL(2,(I-IOFFN(21)))
# SINGLET DISSOCIATION AT 13.25 EV USE BEF SCALING WITH F=0.1981
  727 QIN(22,I)=0.0
      PEQIN(22,I)=0.0
      IF(EN <= EIN(22):
) GO TO 728
      QIN(22,I)=0.1981/(EIN(22)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(22)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(22)+E(3))*1.019
      IF(QIN(22,I):
 < 0.0) QIN(22,I)=0.0       
      IF(EN <= (3.0*EIN(22):
)) GO TO 728
      PEQIN(22,I)=PEQEL(2,(I-IOFFN(22)))
#  DISSOCIATIVE EXC TO STATES DECAYING VIA CH(A2DELTA TO G.S.)           
  728 QIN(23,I)=0.0
      PEQIN(23,I)=0.0                             
      IF(EN <= EIN(23):
) GO TO 731 
      IF(EN > XCHD[NCHD]):
 GO TO 7311                                   
      DO 729 J=2,NCHD                                                  
      IF(EN <= XCHD[J]):
 GO TO 730                                      
  729 CONTINUE                                                          
      J=NCHD                                                            
  730 A=(YCHD[J]-YCHD[J-1])/(XCHD[J]-XCHD[J-1])                     
      B=(XCHD[J-1]*YCHD[J]-XCHD[J]*YCHD[J-1])/(XCHD[J-1]-XCHD[J]) 
      QIN(23,I)=(A*EN+B)*1.D-16 
      GO TO 7312
# ABOVE XCHD[NCHD] EV SCALE BY 1/E
 7311 QIN(23,I)=YCHD[NCHD]*(XCHD[NCHD]/EN)*1.D-16
 7312 IF(EN <= (3.0*EIN(23))) GO TO 731
      PEQIN(23,I)=PEQEL(2,(I-IOFFN(23)))                               
#  DISSOCIATIVE EXC TO STATES DECAYING VIA CH(B2SIGMA- TO G.S.)          
  731 QIN(24,I)=0.0
      PEQIN(24,I)=0.0                               
      IF(EN <= EIN(24):
) GO TO 734  
      IF(EN > XCHB[NCHB]):
 GO TO 7341                                   
      DO 732  J=2,NCHB                                                  
      IF(EN <= XCHB[J]):
 GO TO 733                                      
  732 CONTINUE                                                          
      J=NCHB                                                            
  733 A=(YCHB[J]-YCHB[J-1])/(XCHB[J]-XCHB[J-1])                     
      B=(XCHB[J-1]*YCHB[J]-XCHB[J]*YCHB[J-1])/(XCHB[J-1]-XCHB[J]) 
      QIN(24,I)=(A*EN+B)*1.D-16
      GO TO 7342
# ABOVE XCHB[NCHB] EV SCALE BY 1/E
 7341 QIN(24,I)=YCHB[NCHB]*(XCHB[NCHB]/EN)*1.0D-16
 7342 IF(EN <= (3.0*EIN(24))) GO TO 734 
      PEQIN(24,I)=PEQEL(2,(I-IOFFN(24)))                                
# SINGLET DISSOCIATION AT 13.75 EV USE BEF SCALING WITH F=0.1628
  734 QIN(25,I)=0.0
       PEQIN(25,I)=0.0
      IF(EN <= EIN(25):
) GO TO 735
      QIN(25,I)=0.1628/(EIN(25)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(25)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(25)+E(3))*1.018
      IF(QIN(25,I):
 < 0.0) QIN(25,I)=0.0       
      IF(EN <= (3.0*EIN(25):
)) GO TO 735
      PEQIN(25,I)=PEQEL(2,(I-IOFFN(25)))
# SINGLET DISSOCIATION AT 14.25 EV USE BEF SCALING WITH F=0.1093
  735 QIN(26,I)=0.0
      PEQIN(26,I)=0.0
      IF(EN <= EIN(26):
) GO TO 736
      QIN(26,I)=0.1093/(EIN(26)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(26)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(26)+E(3))*1.018
      IF(QIN(26,I):
 < 0.0) QIN(26,I)=0.0       
      IF(EN <= (3.0*EIN(26):
)) GO TO 736
      PEQIN(26,I)=PEQEL(2,(I-IOFFN(26)))
# SINGLET DISSOCIATION AT 14.75 EV USE BEF SCALING WITH F=0.0628
  736 QIN(27,I)=0.0
      PEQIN(27,I)=0.0
      IF(EN <= EIN(27):
) GO TO 737
      QIN(27,I)=0.0628/(EIN(27)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(27)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(27)+E(3))*1.017
      IF(QIN(27,I):
 < 0.0) QIN(27,I)=0.0       
      IF(EN <= (3.0*EIN(27):
)) GO TO 737
      PEQIN(27,I)=PEQEL(2,(I-IOFFN(27)))
# SINGLET DISSOCIATION AT 15.25 EV USE BEF SCALING WITH F=0.0297
  737 QIN(28,I)=0.0
      PEQIN(28,I)=0.0
      IF(EN <= EIN(28):
) GO TO 738
      QIN(28,I)=0.0297/(EIN(28)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(28)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(28)+E(3))*1.016
      IF(QIN(28,I):
 < 0.0) QIN(28,I)=0.0       
      IF(EN <= (3.0*EIN(28):
)) GO TO 738
      PEQIN(28,I)=PEQEL(2,(I-IOFFN(28)))
# SINGLET DISSOCIATION AT 15.75 EV USE BEF SCALING WITH F=0.0074
  738 QIN(29,I)=0.0
      PEQIN(29,I)=0.0
      IF(EN <= EIN(29):
) GO TO 7381
      QIN(29,I)=0.0074/(EIN(29)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(29)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(29)+E(3))*1.016
      IF(QIN(29,I):
 < 0.0) QIN(29,I)=0.0       
      IF(EN <= (3.0*EIN(29):
)) GO TO 7381
      PEQIN(29,I)=PEQEL(2,(I-IOFFN(29)))
# ENERGY LOSS TO EXCITED POSITIVE IONS NOT ALREADY INCLUDED
 7381 QIN(30,I)=0.0
      PEQIN(30,I)=0.0
      IF(EN <= EIN(30):
) GO TO 739      
      QIN(30,I)=0.5000/(EIN(30)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(30)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(30)+E(3))
      IF(QIN(30,I):
 < 0.0) QIN(30,I)=0.0
      IF(EN <= (3.0*EIN(30):
)) GO TO 739
      PEQIN(30,I)=PEQEL(2,(I-IOFFN(30))) 
#  DISSOCIATIVE EXC TO STATES DECAYING VIA H(ALPHA) 
  739 QIN(31,I)=0.0  
      PEQIN(31,I)=0.0                       
      IF(EN <= EIN(31):
) GO TO 742    
      IF(EN > XHAL(NHAL):
) GO TO 7421                                   
      DO 740  J=2,NHAL                                                  
      IF(EN <= XHAL(J):
) GO TO 741                                      
  740 CONTINUE                                                          
      J=NHAL                                                            
  741 A=(YHAL(J)-YHAL(J-1))/(XHAL(J)-XHAL(J-1))                     
      B=(XHAL(J-1)*YHAL(J)-XHAL(J)*YHAL(J-1))/(XHAL(J-1)-XHAL(J)) 
      QIN(31,I)=(A*EN+B)*1.D-16
      GO TO 7422
# ABOVE XHAL(NHAL) EV SCALE BY 1/E
 7421 QIN(31,I)=YHAL(NHAL)*(XHAL(NHAL)/EN)*1.D-16
 7422 IF(EN <= (3.0*EIN(31))) GO TO 742 
      PEQIN(31,I)=PEQEL(2,(I-IOFFN(31)))                               
#  DISSOCIATIVE EXC TO STATES DECAYING VIA H(BETA)                     
  742 QIN(32,I)=0.0                               
      PEQIN(32,I)=0.0            
      IF(EN <= EIN(32):
) GO TO 745  
      IF(EN > XHBE(NHBE):
) GO TO 7451                                  
      DO 743  J=2,NHBE                                                  
      IF(EN <= XHBE(J):
) GO TO 744                                      
  743 CONTINUE                                                          
      J=NHBE                                                            
  744 A=(YHBE(J)-YHBE(J-1))/(XHBE(J)-XHBE(J-1))                     
      B=(XHBE(J-1)*YHBE(J)-XHBE(J)*YHBE(J-1))/(XHBE(J-1)-XHBE(J)) 
      QIN(32,I)=(A*EN+B)*1.D-16  
      GO TO 7452
# ABOVE XHBE(NHBE) EV SCALE BY 1/E
 7451 QIN(32,I)=YHBE(NHBE)*(XHBE(NHBE)/EN)*1.0D-16
 7452 IF(EN <= (3.0*EIN(32))) GO TO 745  
      PEQIN(32,I)=PEQEL(2,(I-IOFFN(32)))      
# SINGLET DISSOCIATION AT 20.50 EV USE BEF SCALING WITH F=0.0045
  745 QIN(33,I)=0.0
      PEQIN(33,I)=0.0
      IF(EN <= EIN(33):
) GO TO 746
      QIN(33,I)=0.0045/(EIN(33)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(33)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(33)+E(3))*1.037
      IF(QIN(33,I):
 < 0.0) QIN(33,I)=0.0       
      IF(EN <= (3.0*EIN(33):
)) GO TO 746
      PEQIN(33,I)=PEQEL(2,(I-IOFFN(33)))
# SINGLET DISSOCIATION AT 22.00 EV USE BEF SCALING WITH F=0.0045
  746 QIN(34,I)=0.0
      PEQIN(34,I)=0.0
      IF(EN <= EIN(34):
) GO TO 747
      QIN(34,I)=0.0045/(EIN(34)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(34)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(34)+E(3))*1.034
      IF(QIN(34,I):
 < 0.0) QIN(34,I)=0.0       
      IF(EN <= (3.0*EIN(34):
)) GO TO 747
      PEQIN(34,I)=PEQEL(2,(I-IOFFN(34)))
  747 CONTINUE
# LOAD BREMSSTRAHLUNG X-SECTIONS
      QIN(35,I)=0.0
      QIN(36,I)=0.0
      IF(EN <= 1000.):
 GO TO 800
      DO 780 J=2,NBREM
      IF(EN <= EBRM(J):
) GO TO 790
  780 CONTINUE
      J=NBREM
  790 A=(math.log(Z6T(J))-math.log(Z6T(J-1)))/(EBRM(J)-EBRM(J-1))
      B=(math.log(Z6T(J))*EBRM(J-1)-math.log(Z6T(J-1))*EBRM(J))/
     /(EBRM(J-1)-EBRM(J))
      A1=(math.log(Z1T(J))-math.log(Z1T(J-1)))/(EBRM(J)-EBRM(J-1))
      B1=(math.log(Z1T(J))*EBRM(J-1)-math.log(Z1T(J-1))*EBRM(J))/
     /(EBRM(J-1)-EBRM(J))
      QIN(35,I)=math.exp(A*EN+B)*1.D-24
      QIN(36,I)=math.exp(A1*EN+B1)*4.D-24
  800 CONTINUE
#     WRITE(6,881) EN
# 881 FORMAT('EN=',D14.6)
#     WRITE(6,882) QIN(1,I),QIN(2,I),QIN(3,I),QIN(4,I),QIN(5,I)
#     WRITE(6,882) QIN(6,I),QIN(7,I),QIN(8,I),QIN(9,I),QIN(10,I)
#     WRITE(6,882) QIN(11,I),QIN(12,I),QIN(13,I),QIN(14,I),QIN(15,I)
#     WRITE(6,882) QIN(16,I),QIN(17,I),QIN(18,I),QIN(19,I),QIN(20,I)
#     WRITE(6,882) QIN(21,I),QIN(22,I),QIN(23,I),QIN(24,I),QIN(25,I)
#     WRITE(6,882) QIN(26,I),QIN(27,I),QIN(28,I),QIN(29,I),QIN(30,I)
#     WRITE(6,882) QIN(31,I),QIN(32,I),QIN(33,I),QIN(34,I),QIN(35,I)
# 882 FORMAT(' QIN ',5D12.4)
#     WRITE(6,883) Q(2,I),Q(3,I),Q(4,I),Q(5,I)
# 883 FORMAT(' Q 2 3 4 5',4D12.4)
#     WRITE(6,884) QION(1,I),QION(2,I),QION(3,I)
# 884 FORMAT('QION 1 2 3 ',3D12.4)
#
      QSUP=QIN(1,I)+QIN(3,I)
      QVIB=QIN(2,I)+QIN(4,I)+QIN(5,I)+QIN(6,I)+QIN(7,I)+QIN(8,I)
      QDATT=QIN(10,I)
      QSING=QIN(12,I)+QIN(13,I)+QIN(14,I)+QIN(16,I)+QIN(17,I)+QIN(18,I)+
     /QIN(19,I)+QIN(20,I)+QIN(21,I)+QIN(22,I)+QIN(25,I)+QIN(26,I)+
     /QIN(27,I)+QIN(28,I)+QIN(29,I)+QIN(30,I)+QIN(33,I)+QIN(34,I)
      QTRIP=QIN(9,I)+QIN(11,I)+QIN(15,I)
      QEXC=QIN(23,I)+QIN(24,I)+QIN(31,I)+QIN(32,I) 
      QTTT=QEXC+QTRIP+QSING+QDATT  
      QWINT=QION(2,I)+QTTT
      QINEL=QSUP+QVIB+QDATT+QSING+QTRIP+QEXC+Q(5,I)+Q(4,I)  
      QIONS=QION(1,I)+QION(2,I)+QION(3,I)+QION(4,I)+QION(5,I)+QION(6,I)+
     /QION(7,I)+QION(8,I)+QION(9,I)   
#     Q(1,I)=Q(2,I)+Q(5,I)+Q(4,I)+QTTT+QSUP+QVIB+QIN(34,I)+QIN(35,I)
#     WRITE(6,767) EN,Q(1,I),QSUP,QVIB,QDATT,QSING,QTRIP,QEXC,QTTT,QINEL
#767  FORMAT(' EN=',F9.2,' QTOT=',D12.3,' QSUP=',D12.3,' QVIB=',D12.3,/,
#    /' QDATT=',D12.3,' QSING=',D12.3,' QTRIP=',D12.3,' QEXC=',D12.3,/,
#    /' QTTT=',D12.3,' QINELSUM=',D12.3,/)
#     WRITE(6,768) EN,QIONS
# 768 FORMAT(' EN=',F9.2,' QIONSUM=',D12.3) 
# 
 1000 CONTINUE
#  SAVE COMPUTE TIME
      DO 1010 K=1,NIN
      IF(EFINAL <= EIN(K):
) :
       NIN=K-1
       GO TO 1011
      # endIF
 1010 CONTINUE
 1011 CONTINUE
#      IF(EFINAL > 1000.) NIN=36
#
      RETURN
      # end  
      def GAS9(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)  
#    /NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,SCRPT) 
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(4000),EROOT(4000),QT1(4000),QT2(4000),
     /QT3(4000),QT4(4000)
      COMMON/DENS/DEN(4000)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)       
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      DIMENSION XEN(164),YMT(164),YEL(164),YEPS(164),
     /XATT1(11),YATT1(11),XATT2(9),YATT2(9),
     /XVIB1(29),YVIB1(29),XVIB2(28),YVIB2(28),XVIB3(28),YVIB3(28),
     /XVIB4(46),YVIB4(46),XVIB5(16),YVIB5(16),
     /XTR1(12),YTR1(12),XTR2(11),YTR2(11),XTR3(11),YTR3(11),IOFFN(250)
      DIMENSION XNUL1(25),YNUL1(25),XNUL2(13),YNUL2(13),
     /XNUL3(14),YNUL3(14)
      DIMENSION XION1(31),YION1(31),XION2(31),YION2(31),XION3(31),
     /YION3(31),XION4(30),YION4(30),XION5(29),YION5(29),XION6(29),
     /YION6(29),XION7(26),YION7(26),XION8(26),YION8(26),XION9(25),
     /YION9(25),XION10(24),YION10(24),XION11(24),YION11(24),XION12(24),
     /YION12(24),XION13(23),YION13(23),XION14(21),YION14(21),
     /XION15(21),YION15(21),XION16(83),YION16(83),XION(50),YIONG(50),
     /YIONC(50),IOFFION(16)
      DIMENSION Z1T(25),Z6T(25),EBRM(25)  
      CHARACTER*50 SCRPT(300),SCRPTN(10)       
      CHARACTER*25 NAME                                                 
      DATA XEN/0.00,.001,.002,.003,.004,.005,.007,0.01,.014,0.02,.025,
     /0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.10,0.11,0.12,                
     /0.13,0.14,0.16,0.18,0.20,0.25,0.30,0.35,0.40,0.50,
     /0.60,0.70,0.80,1.00,1.50,2.00,2.50,3.00,4.00,5.00,
     /6.00,7.00,8.00,9.00,10.0,12.0,14.0,16.0,18.0,20.0,
     /25.0,30.0,40.0,50.0,60.0,70.0,80.0,100.,125.,150.,
     /175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,
     /800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,
     /4000.,4500.,5000.,6000.,7000.,8000.,9000.,1.0D4,1.25D4,1.5D4,
     /1.75D4,2.0D4,2.5D4,3.0D4,3.5D4,4.0D4,4.5D4,5.0D4,6.0D4,7.0D4,
     /8.0D4,9.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5D5,3.0D5,3.5D5,
     /4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,
     /1.75D6,2.0D6,2.5D6,3.0D6,3.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,
     /8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5D7,3.0D7,3.5D7,
     /4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,1.0D8,1.25D8,1.5D8,
     /1.75D8,2.0D8,2.5D8,3.0D8,3.5D8,4.0D8,4.5D8,5.0D8,6.0D8,7.0D8,
     /8.0D8,9.0D8,1.0D9/
      DATA YMT/32.0,31.0,29.0,27.0,26.0,25.0,23.0,20.0,17.6,15.2,13.0,
     /11.2,7.25,4.70,3.25,2.40,1.80,1.40,1.15,1.10,1.08, 
     /1.08,1.10,1.25,1.50,1.85,2.40,3.15,4.10,4.85,6.10,
     /6.90,7.15,7.30,7.70,8.45,9.10,10.3,11.6,13.9,17.8,
     /20.7,21.4,21.3,20.0,17.6,13.9,11.3,9.40,8.00,7.20,
     /5.75,4.90,3.76,3.00,2.50,2.15,1.80,1.41,1.10,0.91,
     /.770,.680,.540,.440,.370,.325,.280,.252,.200,.159,          
     /.127,.104,.0870,.0592,.0431,.0329,.0260,.0175,.0127,.00961,
     /.00756,.00612,.00506,.00364,.00276,.00216,.00175,.00144,9.62D-4,
     /6.91D-4,
     /5.22D-4,4.10D-4,2.74D-4,1.97D-4,1.49D-4,1.17D-4,9.48D-5,7.85D-5,
     /5.67D-5,4.31D-5,
     /3.41D-5,2.77D-5,2.31D-5,1.57D-5,1.15D-5,8.88D-6,7.11D-6,4.93D-6,
     /3.67D-6,2.87D-6,
     /2.33D-6,1.94D-6,1.64D-6,1.24D-6,9.79D-7,7.98D-7,6.67D-7,5.68D-7,
     /4.06D-7,3.06D-7,
     /2.41D-7,1.95D-7,1.36D-7,1.01D-7,7.87D-8,6.30D-8,5.17D-8,4.32D-8,
     /3.16D-8,2.42D-8,
     /1.92D-8,1.56D-8,1.29D-8,8.67D-9,6.23D-9,4.71D-9,3.69D-9,2.45D-9,
     /1.75D-9,1.31D-9,
     /1.02D-9,8.19D-10,6.71D-10,4.75D-10,3.53D-10,2.73D-10,2.18D-10,
     /1.77D-10,1.14D-10,7.99D-11,
     /5.89D-11,4.52D-11,2.90D-11,2.02D-11,1.48D-11,1.14D-11,8.98D-12,
     /7.28D-12,5.06D-12,3.71D-12,
     /2.85D-12,2.25D-12,1.82D-12/
# ASSUME ELASTIC = MOMENTUM TRANSFER UP TO 3.0 EV (NO GOOD ELASTIC DATA)
      DATA YEL/32.0,31.0,29.0,27.0,26.0,25.0,23.0,20.0,17.6,15.2,13.0,
     /11.2,7.25,4.70,3.25,2.40,1.80,1.40,1.15,1.10,1.08, 
     /1.08,1.10,1.25,1.50,1.85,2.40,3.15,4.10,4.85,6.10,
     /6.90,7.15,7.30,7.70,8.45,9.10,10.3,15.2,18.9,23.4,
     /27.2,29.6,31.9,31.0,30.1,27.7,25.9,24.1,23.3,22.1,
     /20.0,17.3,13.4,11.9,10.7,9.85,9.02,7.40,6.25,5.50,
     /4.95,4.50,3.90,3.43,3.04,2.74,2.49,2.29,1.97,1.73,
     /1.54,1.39,1.27,1.04,.877,.760,.671,.544,.458,.395,
     /.348,.311,.281,.235,.203,.178,.159,.144,.116,.0978,
     /.0845,.0745,.0605,.0512,.0445,.0395,.0356,.0325,.0278,.0244,
     /.0226,.0200,.0184,.0156,.0138,.0124,.0115,.0101,.00918,.00855,
     /.00808,.00772,.00744,.00702,.00674,.00653,.00637,.00625,.00605,
     /.00592,
     /.00584,.00578,.00570,.00566,.00563,.00561,.00560,.00559,.00557,
     /.00556,
     /.00556,.00555,.00555,.00555,29*.00554/
      DATA YEPS/38*1.0,.65352,.61534,.65007,
     /.65056,.59839,.52532,.49651,.42242,.32895,.26232,.21931,.17939,
     /.16529,
     /.13630,.13322,.13133,.11165,.09963,.09005,.07893,.07377,.06576,
     /.06017,
     /.05510,.05287,.04673,.04198,.03896,.03770,.03497,.03403,.03050,
     /.02667,
     /.02302,.02024,.01805,.01418,.01167,.00990,.00860,.00681,.00563,
     /.00480,
     /.00418,.00370,.00332,.00276,.00235,.00205,.00182,.00163,.00130,
     /.00108,
     /.000924,.000806,.000641,.000531,.000452,.000393,.000348,3.11D-4,
     /2.56D-4,2.17D-4,
     /1.82D-4,1.65D-4,1.47D-4,1.15D-4,9.32D-5,7.80D-5,6.67D-5,5.10D-5,
     /4.08D-5,3.36D-5,
     /2.83D-5,2.43D-5,2.11D-5,1.65D-5,1.33D-5,1.10D-5,9.27D-6,7.94D-6,
     /5.71D-6,4.29D-6,
     /3.35D-6,2.69D-6,1.86D-6,1.36D-6,1.04D-6,8.19D-7,6.63D-7,5.48D-7,
     /3.93D-7,2.95D-7,
     /2.30D-7,1.84D-7,1.57D-7,9.87D-8,6.96D-8,5.16D-8,3.98D-8,2.58D-8,
     /1.80D-8,1.33D-8,
     /1.02D-8,8.06D-9,6.54D-9,4.53D-9,3.32D-9,2.53D-9,1.99D-9,1.61D-9,
     /1.01D-9,6.94D-10,
     /5.04D-10,3.82D-10,2.40D-10,1.64D-10,1.19D-10,9.0D-11,7.00D-11,
     /5.6D-11,3.8D-11,2.8D-11,
     /2.1D-11,1.6D-11,1.3D-11/
#
      DATA XVIB1/.117,0.13,0.15,0.17,0.20,0.23,0.25,0.30,0.40,0.50,
     /0.60,0.70,0.85,1.00,1.50,2.00,2.50,3.00,3.50,4.00,
     /5.00,6.00,7.50,8.50,10.0,15.0,20.0,30.0,40.0/                   
      DATA YVIB1/0.00,.070,.105,.126,.135,.140,.140,.129,.105,.082,
     /.067,.057,.049,.049,.064,.087,.108,.129,.152,.187,
     /.246,.316,.433,.433,.351,.246,.164,.073,.042/                     
      DATA XVIB2/.148,0.16,0.17,0.20,0.23,0.25,0.30,0.40,0.50,0.60,
     /0.70,0.85,1.00,1.50,2.00,2.50,3.00,3.50,4.00,5.00,
     /6.00,7.50,8.50,10.0,15.0,20.0,30.0,40.0/                    
      DATA YVIB2/0.00,.044,.077,.108,.115,.123,.123,.108,.092,.077,
     /.065,.055,.054,.062,.077,.096,.115,.139,.169,.223,
     /.293,.370,.370,.308,.216,.142,.065,.037/                    
      DATA XVIB3/.182,0.19,0.20,0.23,0.25,0.30,0.35,0.40,0.50,0.60,
     /0.70,0.85,1.00,1.50,2.00,2.50,3.00,3.50,4.00,5.00,
     /6.00,7.50,8.50,10.0,15.0,20.0,30.0,40.0/                
      DATA YVIB3/0.00,.070,.091,.189,.231,.259,.266,.259,.224,.182,
     /.164,.154,.157,.171,.189,.210,.252,.301,.364,.490,
     /.623,.805,.805,.665,.434,.294,.133,.077/                       
      DATA XVIB4/.366,.367,.368,.370,.375,.380,.385,.390,.395,.400,
     /.410,.420,.430,.440,.450,.460,.480,.500,.520,.550,
     /.600,.650,.700,.800,.900,1.00,1.10,1.20,1.30,1.40,
     /1.50,1.70,2.00,2.50,3.00,3.50,4.00,5.00,6.00,7.50,
     /8.50,10.0,15.0,20.0,30.0,40.0/               
      DATA YVIB4/0.00,.03782,.05336,.07494,.1107,.1361,.1561,.1727,
     /.1864,.2002,
     /.2210,.2382,.2520,.2641,.2728,.2814,.2952,.3056,.3125,.3194,
     /.3246,.3246,.3229,.3143,.3026,.3026,.3048,.3071,.3115,.3160,
     /.320,.329,.343,.387,.472,.570,.694,.908,1.16,1.32,
     /1.16,.935,.507,.289,.129,.715/               
      DATA XVIB5/.548,1.00,1.50,2.00,3.00,3.50,4.00,5.00,6.00,7.50,
     /8.50,10.0,15.0,20.0,30.0,40.0/               
      DATA YVIB5/0.00,.001,.002,.003,.0055,.011,.044,.094,.134,.143,
     /.134,.116,.068,.0383,.0171,.0096/   
# GROSS IONISATION X-SECTION  AVERAGE OF TIAN AND VIDAL AND 
# NISHIMURA AND TAWARA  (WITHIN 4% OF EACH OTHER) TYPICALLY REDUCE 
# NISHIMURA BY 2% ...
# BELOW 20 EV USE AVERAGE OVER ALL DATA 
# ABOVE 3 KEV USE SCALED SCHRAM TO 60 KEV : SMOOTH JOIN 
# TO MATRIX ELEMENT FIT OF DATA BY  RIEKE AND PREPJCHAL      
      DATA XION/11.52,12.0,12.5,13.0,14.0,15.0,16.0,17.0,18.0,19.0,     
     /20.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,
     /90.0,100.,125.,150.,175.,200.,225.,250.,275.,300.,
     /350.,400.,450.,500.,550.,600.,700.,800.,900.,1000.,
     /1250.,1500.,1750.,2000.,2500.,3000.,4000.,7000.,10000.,60000./
# GROSS IONISATION 
      DATA YIONG/0.00,.017,.038,.061,.270,.518,0.87,1.28,1.62,1.95,     
     /2.24,3.48,4.45,4.96,5.54,5.87,6.09,6.63,6.80,6.78,                
     /6.82,6.83,6.46,6.18,5.86,5.57,5.31,4.96,4.71,4.51,
     /4.08,3.80,3.44,3.28,3.13,2.94,2.66,2.33,2.21,1.99,
     /1.72,1.49,1.34,1.20,1.06,.881,.657,.411,.290,.0599/
# COUNTING IONISATION
      DATA YIONC/0.0,.017,.038,.061,.270,.518,0.87,1.28,1.62,1.95,
     /2.24,3.48,4.45,4.94,5.47,5.65,5.78,6.27,6.42,6.39,
     /6.44,6.45,6.07,5.79,5.47,5.18,4.94,4.61,4.38,4.19,
     /3.80,3.53,3.20,3.05,2.91,2.74,2.47,2.17,2.06,1.85,
     /1.60,1.39,1.25,1.12,.986,.820,.611,.382,.270,.0557/
# ALL INDIVIDUAL BREAKUP CHANNELS FROM TIAN AND VIDAL
# CORRECTED BY WANG AND VIDAL FOR DISSOCIATION OF C2H6++ 
#
#   C2H6+   
      DATA XION1/11.52,13.0,14.0,15.0,17.5,20.0,25.0,30.0,35.0,40.0,
     /45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,
     /200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600./
      DATA YION1/0.0,.055,.095,.130,.215,.366,.566,.664,.684,.747,
     /.734,.724,.773,.768,.758,.749,.751,.717,.692,.665,
     /.642,.618,.583,.560,.544,.499,.473,.430,.417,.401,.377/
#  C2H4+
      DATA XION2/12.05,13.0,14.0,15.0,17.5,20.0,25.0,30.0,35.0,40.0,
     /45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,
     /200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600./
      DATA YION2/.0,.005,.140,.290,.672,1.068,1.705,2.240,2.350,2.461,
     /2.481,2.473,2.607,2.568,2.517,2.510,2.492,2.346,2.273,2.179,
     /2.103,2.031,1.925,1.841,1.777,1.635,1.542,1.408,1.352,1.301,1.226/
# C2H5+
      DATA XION3/12.65,13.0,14.0,15.0,17.5,20.0,25.0,30.0,35.0,40.0,
     /45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,
     /200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600./
      DATA YION3/0.0,.001,.034,.070,.156,.266,.412,.507,.556,.568,
     /.569,.565,.597,.603,.589,.595,.588,.566,.546,.529,
     /.514,.490,.468,.451,.432,.401,.381,.349,.337,.321,.302/
#  CH3+
      DATA XION4/13.65,14.0,15.0,17.5,20.0,25.0,30.0,35.0,40.0,45.0,
     /50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,
     /225.,250.,275.,300.,350.,400.,450.,500.,550.,600./
      DATA YION4/0.0,.001,.018,.051,.070,.083,.095,.104,.120,.114,
     /.130,.176,.203,.216,.218,.218,.197,.178,.159,.138,
     /.130,.114,.106,.099,.084,.071,.063,.058,.051,.047/
#  C2H3+
      DATA XION5/14.8,15.0,17.5,20.0,25.0,30.0,35.0,40.0,45.0,50.0,
     /60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,225.,
     /250.,275.,300.,350.,400.,450.,500.,550.,600./
      DATA YION5/0.0,.005,.175,.294,.432,.553,.709,.814,.836,.827,
     /.882,.889,.862,.855,.847,.786,.746,.702,.658,.630,
     /.586,.564,.540,.489,.455,.415,.391,.373,.351/
#  C2H2+
      DATA XION6/14.8,15.0,17.5,20.0,25.0,30.0,35.0,40.0,45.0,50.0,
     /60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,225.,
     /250.,275.,300.,350.,400.,450.,500.,550.,600./
      DATA YION6/0.0,.005,.118,.174,.268,.322,.394,.503,.550,.578,
     /.614,.626,.611,.609,.600,.543,.500,.459,.426,.396,
     /.364,.338,.324,.289,.259,.232,.217,.206,.192/
#  H+
      DATA XION7/20.5,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,
     /90.0,100.,125.,150.,175.,200.,225.,250.,275.,300.,
     /350.,400.,450.,500.,550.,600./
      DATA YION7/0.0,.011,.041,.053,.055,.001,.001,.001,.062,.111,
     /.166,.189,.189,.166,.135,.094,.080,.063,.046,.035,
     /.014,.004,.001,.0003,.0001,.00003/
#  H2+
      DATA XION8/21.5,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,
     /90.0,100.,125.,150.,175.,200.,225.,250.,275.,300.,
     /350.,400.,450.,500.,550.,600./
      DATA YION8/0.0,.002,.007,.013,.015,.020,.008,.023,.039,.041,
     /.048,.050,.042,.034,.028,.023,.020,.014,.012,.010,
     /.006,.004,.003,.002,.0015,.001/
#  CH2+
      DATA XION9/25.8,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,
     /100.,125.,150.,175.,200.,225.,250.,275.,300.,350.,
     /400.,450.,500.,550.,600./
      DATA YION9/0.0,.020,.036,.056,.054,.065,.098,.109,.110,.117,
     /.117,.106,.094,.083,.069,.064,.057,.051,.048,.040,
     /.034,.026,.023,.020,.018/
#  C2H+
      DATA XION10/26.2,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,
     /125.,150.,175.,200.,225.,250.,275.,300.,350.,400.,
     /450.,500.,550.,600./
      DATA YION10/0.0,.021,.044,.059,.074,.096,.109,.113,.114,.116,
     /.105,.092,.081,.070,.064,.053,.050,.043,.036,.031,
     /.025,.022,.019,.017/
#  C2H6++
      DATA XION11/32.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,
     /125.,150.,175.,200.,225.,250.,275.,300.,350.,400.,
     /450.,500.,550.,600./
      DATA YION11/0.0,.019,.074,.219,.313,.360,.380,.385,.383,.384,
     /.385,.390,.390,.389,.370,.347,.331,.315,.285,.265,
     /.240,.228,.217,.204/
#  H3+
      DATA XION12/32.5,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,
     /125.,150.,175.,200.,225.,250.,275.,300.,350.,400.,
     /450.,500.,550.,600./
      DATA YION12/0.0,.001,.002,.001,.001,.011,.012,.017,.015,.015,
     /.013,.011,.008,.006,.005,.003,.002,.001,.0005,.00025,
     /.00013,.000062,.000045,.00003/
#  CH+
      DATA XION13/36.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,
     /150.,175.,200.,225.,250.,275.,300.,350.,400.,450.,
     /500.,550.,600./
      DATA YION13/0.0,.006,.012,.016,.026,.038,.041,.046,.047,.043,
     /.036,.029,.025,.023,.019,.015,.014,.010,.007,.005,
     /.003,.002,.0015/
#  C2+
      DATA XION14/37.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,
     /200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,
     /600./
      DATA YION14/0.0,.001,.003,.007,.011,.014,.017,.017,.015,.013,
     /.011,.009,.007,.006,.005,.003,.0017,.0007,.0003,.00017,
     /.00009/
#  C+
      DATA XION15/37.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,
     /200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,
     /600./
      DATA YION15/0.0,.001,.004,.008,.011,.015,.016,.017,.015,.013,
     /.011,.010,.008,.007,.006,.005,.004,.003,.0018,.0009,
     /.0005/
# K-SHELL IONISATION X-SECTION CARBON (SCALED BY 2 IN def) 
      DATA XION16/285.,298.,307.,316.,325.,335.,345.,365.,398.,422.,
     /447.,473.,501.,531.,613.,668.,708.,750.,817.,917.,
     /1000.,1122.,1296.,1496.,1679.,1884.,2054.,2238.,2512.,2985.,
     /3981.,5012.,7079.,1.0D4,1.50D4,2.05D4,2.51D4,3.07D4,4.10D4,5.01D4,
     /6.13D4,7.08D4,8.18D4,1.0D5,1.54D5,2.05D5,2.99D5,4.10D5,5.01D5,
     /6.13D5,
     /7.08D5,8.18D5,1.0D6,1.26D6,1.5D6,2.05D6,3.07D6,4.10D6,5.01D6,
     /6.13D6,
     /7.08D6,8.18D6,1.0D7,1.26D7,1.5D7,2.05D7,3.07D7,4.10D7,5.01D7,
     /6.13D7,
     /7.08D7,8.18D7,1.0D8,1.26D8,1.5D8,2.05D8,3.07D8,4.10D8,5.01D8,
     /6.13D8,
     /7.08D8,8.18D8,1.0D9/
      DATA YION16/0.00,1.66D-4,3.48D-4,5.25D-4,6.96D-4,8.63D-4,1.02D-3,
     /1.33D-3,1.75D-3,2.01D-3,
     /2.24D-3,2.46D-3,2.66D-3,2.84D-3,3.21D-3,3.38D-3,3.47D-3,3.55D-3,
     /3.65D-3,3.72D-3,
     /3.75D-3,3.74D-3,3.68D-3,3.57D-3,3.45D-3,3.31D-3,3.19D-3,3.07D-3,
     /2.91D-3,2.66D-3,
     /2.25D-3,1.95D-3,1.55D-3,1.21D-3,8.97D-4,7.07D-4,6.07D-4,5.21D-4,
     /4.21D-4,3.63D-4,
     /3.14D-4,2.84D-4,2.57D-4,2.25D-4,1.74D-4,1.50D-4,1.28D-4,1.15D-4,
     /1.09D-4,1.05D-4,
     /1.03D-4,1.02D-4,1.01D-4,1.005D-4,1.01D-4,1.03D-4,1.07D-4,1.11D-4,
     /1.14D-4,1.17D-4,
     /1.20D-4,1.22D-4,1.25D-4,1.29D-4,1.32D-4,1.38D-4,1.45D-4,1.50D-4,
     /1.54D-4,1.58D-4,
     /1.60D-4,1.63D-4,1.67D-4,1.71D-4,1.74D-4,1.80D-4,1.87D-4,1.92D-4,
     /1.96D-4,2.00D-4,
     /2.02D-4,2.05D-4,2.09D-4/
# ATTACHMENT  H-  EXCLUDING ION PAIRS
      DATA XATT1/7.00,7.50,8.00,8.50,9.00,9.18,9.50,10.0,10.5,11.0,     
     /11.5/                   
      DATA YATT1/0.00,7.65D-5,2.52D-4,8.42D-4,1.55D-3,1.70D-3,1.50D-3,
     /8.33D-4,2.50D-4,7.65D-5,0.00/  
# ATTACHMENT CH2- EXCLUDING ION PAIRS
      DATA XATT2/7.90,8.40,8.90,9.40,9.90,10.1,10.4,10.9,11.4/          
      DATA YATT2/0.00,1.53D-5,5.04D-5,1.68D-4,3.10D-4,3.40D-4,3.00D-4,
     /1.67D-4,0.0/                    
#                
# NON DIPOLE AT 6.85 EV
      DATA XTR1/6.85,8.00,9.00,10.0,11.0,12.0,14.0,16.0,19.0,22.0,
     /26.0,30.0/                     
      DATA YTR1/0.00,.030,.042,.048,.054,.057,.060,.060,.054,.048,  
     /.036,.026/
c NON DIPOLE AT 8.00 EV               
      DATA XTR2/8.00,9.50,10.5,11.5,12.5,14.5,16.5,19.5,22.5,26.5,
     /30.0/
      DATA YTR2/0.00,.205,.295,.336,.353,.369,.369,.344,.295,.230,
     /.181/
c NON DIPOLE AT 10.0 EV                        
      DATA XTR3/10.0,11.0,12.0,13.0,14.0,17.0,20.0,23.0,27.0,30.0,
     /35.0/                             
      DATA YTR3/0.00,.331,.680,.794,.898,.945,.945,.898,.777,.675,
     /.513/
#                                      
# BREMSSTRAHLUNG X-SECTION WITH CUT UNITS 10**-24
      DATA Z1T/11.3,6.18,2.80,1.54,.858,.407,.251,.176,.145,.150,
     /.167,.178,.187,.193,.198,.205,.210,.218,.222,.228,
     /.231,.233,.234,.235,.235/
      DATA Z6T/298.,178.,85.2,47.5,26.3,12.2,7.06,4.45,3.06,2.82,
     /2.89,2.99,3.08,3.13,3.18,3.25,3.31,3.39,3.44,3.49,
     /3.52,3.54,3.55,3.57,3.57/
      DATA EBRM/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,
     /2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,
     /4.E7,5.E7,6.E7,8.E7,1.E8/
# WINTERS CHEM.PHYS.36(1979)353  (NULL COLLISION)  
#   REDUCED  BY 0.9 IN def
      DATA XNUL1/8.4,10.3,15.0,20.0,25.0,30.0,40.0,50.0,60.0,70.0,
     /80.0,90.0,100.,125.,150.,175.,200.,250.,300.,350.,
     /400.,450.,500.,550.,600./
      DATA YNUL1/0.0,0.20,1.30,3.20,4.00,5.60,6.40,7.00,7.40,7.60,
     /7.65,7.60,7.50,7.30,7.10,6.90,6.70,6.40,6.00,5.60,
     /5.30,4.90,4.60,4.30,4.10/
# LIGHT EMISSION FROM H ALPHA     
#  MOHLMANN  CHEM PHYS 19(1977)233
      DATA XNUL2/20.0,40.0,60.0,80.0,100.,150.,200.,300.,500.,1000.,
     /1300.,1700.,2000./
      DATA YNUL2/0.0,.0116,.0196,.0241,.0250,.0222,.0186,.0121,.007,
     /.0034,
     /.0026,.0020,.0017/
# LIGHT EMISSION FROM CH2(A2DELTA -X2PI)
#  MOHLMANN  CHEM PHYS 19(1977)233
      DATA XNUL3/16.0,20.0,40.0,60.0,80.0,100.,150.,200.,300.,500.,
     /1000.,1300.,1700.,2000./
      DATA YNUL3/0.0,.0011,.0041,.0057,.0062,.0061,.0050,.0041,.0028,
     /.0017,
     /.0008,.0006,.0005,.0004/
# --------------------------------------------------------------------- 
# UPDATED TO DEC 1994 . INCLUDES LATEST ELECTRON SCATTERING RESULTS     
# GIVES BETTER FIT THAN PREVIOUS DATA SET
# 1999 MOD USES VIBRATION AT 35.8 MV AND ALSO SUPER ELASTICS.
#          ALSO MOD TO ELASTIC AT LOW ENERGY BELOW 20 MV
# ---------------------------------------------------------------------
#     NANISO=0
      IF(NANISO == 0):
 :
       NAME=' C2H6 2016   ISOTROPIC  '
      else:
       NAME=' C2H6 2016  ANISOTROPIC '
      # endIF 
#-----------------------------------------------------------------------
# BORN-BETHE CONSTANTS
      A0=0.52917720859D-08
      RY=13.60569193
      CONST=1.873884D-20
      EMASS2=1021997.804
      API=DACOS(-1.00)
      BBCONST=16.00*API*A0*A0*RY*RY/EMASS2
#
# BORN BETHE FOR IONISATION 
      AM2=7.21
      C=70.5
# ARRAY SIZE
      NASIZE=4000
#
      NION=16
      NATT=2
      NIN=55  
      NNULL=3
#
      NBREM=25
      DO 8 J=1,NIN
      IZBR(J)=0
    8 CONTINUE
      IZBR(NIN+1)=6
      IZBR(NIN+2)=1
#
      DO 1 J=1,6
    1 KEL(J)=NANISO
#  SET VIBRATIONAL ANGULAR DISTRIBUTIONS TO ISOTROPIC
      DO 2 J=1,10
    2 KIN(J)=0
# SET ANG DISTRIBUTION FOR DISSOCIATIVE EXCITATIONS TO OKHRIMOVSKYY TYPE
      DO 31 J=11,NIN
   31 KIN(J)=2
                                                     
      NDATA=164
#                                                        
      NIOND=50
      NION1=31
      NION2=31
      NION3=31
      NION4=30
      NION5=29
      NION6=29
      NION7=26
      NION8=26
      NION9=25
      NION10=24
      NION11=24
      NION12=24
      NION13=23
      NION14=21
      NION15=21
      NION16=83
#
      NATT1=11
      NATT2=9                                                         
      NVIB1=29                                                         
      NVIB2=28                                                          
      NVIB3=28
      NVIB4=46
      NVIB5=16
      NTR1=12                                                         
      NTR2=11                                                          
      NTR3=11
      NUL1=25
      NUL2=13
      NUL3=14
# SCALING OF NULL CROSS-SECTIONS
      SCLN(1)=1.0 
      SCLN(2)=10.  
      SCLN(3)=10.      
#
#
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(30.06964*AMU)                                     
      E(3)=11.52                                                        
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
#
      EION(1)=11.52
      EION(2)=12.05
      EION(3)=12.65
      EION(4)=13.65
      EION(5)=14.8
      EION(6)=14.8
      EION(7)=20.5
      EION(8)=21.5
      EION(9)=25.8
      EION(10)=26.2
      EION(11)=32.0
      EION(12)=32.5
      EION(13)=36.0
      EION(14)=37.0
      EION(15)=37.0
      EION(16)=285.0
# OPAL BEATY
      SCLOBY=1.0
      DO 33 J=1,NION
      EOBY(J)=EION(J)*SCLOBY
   33 CONTINUE
      EOBY(NION)=EION(NION)*0.63
#
      DO 44 JK=1,15
      LEGAS(JK)=0
      ISHELL(JK)=0
      NC0(JK)=0
      EC0(JK)=0.0
      WKLM(JK)=0.0
      EFL(JK)=0.0
      NG1(JK)=0
      EG1(JK)=0.0
      NG2(JK)=0
      EG2(JK)=0.0
   44 CONTINUE
# DOUBLE CHARGE , ++ ION STATES ( EXTRA ELECTRON )
      NC0(11)=1
      EC0(11)=6.0
# FLUORESCENCE DATA  (KSHELL)
      LEGAS(16)=1
      ISHELL(16)=1
      NC0(16)=2
      EC0(16)=253.
      WKLM(16)=0.0026
      EFL(16)=273.
      NG1(16)=1
      EG1(16)=253.
      NG2(16)=2
      EG2(16)=5.
# OFFSET ENERGY FOR IONISATION ELECTRON ANGULAR DISTRIBUTION
      DO 776 J=1,NION
      DO 777 I=1,NASIZE
      IF(EG(I):
 > EION(J)) :
       IOFFION(J)=I-1
       GO TO 776
      # endIF
  777 CONTINUE
  776 CONTINUE
#
      EIN(1)=-0.0358
      EIN(2)=0.0358 
      EIN(3)=-0.117                                                     
      EIN(4)=0.117
      EIN(5)=-0.148                      
      EIN(6)=0.148 
      EIN(7)=-0.182                                                     
      EIN(8)=0.182
      EIN(9)=0.366                                                      
      EIN(10)=0.548
      EIN(11)=6.85
      EIN(12)=7.93
      EIN(13)=8.00
      EIN(14)=8.15
      EIN(15)=8.48
      EIN(16)=8.723
      EIN(17)=8.865
      EIN(18)=9.007
      EIN(19)=9.149
      EIN(20)=9.291
      EIN(21)=9.433
      EIN(22)=9.575
      EIN(23)=9.717
      EIN(24)=9.859
      EIN(25)=10.0
      EIN(26)=10.115
      EIN(27)=10.45
      EIN(28)=10.672
      EIN(29)=10.816
      EIN(30)=10.960
      EIN(31)=11.104
      EIN(32)=11.248
      EIN(33)=11.392
      EIN(34)=11.732
      EIN(35)=12.4
      EIN(36)=13.0
      EIN(37)=13.5
      EIN(38)=14.1
      EIN(39)=14.7
      EIN(40)=15.3
      EIN(41)=15.9
      EIN(42)=16.5
      EIN(43)=17.1
      EIN(44)=17.7
      EIN(45)=18.5
      EIN(46)=19.5
      EIN(47)=20.5
      EIN(48)=21.5
      EIN(49)=22.5
      EIN(50)=23.5
      EIN(51)=24.5
      EIN(52)=25.5
      EIN(53)=26.5
      EIN(54)=27.5
      EIN(55)=28.5
      EIN(56)=0.0
      EIN(57)=0.0
# OFFSET ENERGY FOR EXCITATION LEVELS ANGULAR DISTRIBUTION
      DO 3 NL=1,NIN
      DO 651 I=1,NASIZE
      IF(EG(I):
 > abs(EIN(NL))) : 
       IOFFN(NL)=I-1
       GO TO 3
      # endIF
  651 CONTINUE
    3 CONTINUE 
#*****************************************************************
# ENTER PENNING TRANSFER FRACTION FOR EACH LEVEL
# LEVELS THAT ARE DISSOCIATIVE DO NOT GIVE PENNING TRANSFERS
      DO 4 K=1,NIN
      DO 4 L=1,3
    4 PENFRA[L,K]=0.0
# ENTER PENNING CONSTANTS IN PREVIOUS LINE
      IF(IPEN == 0):
 GO TO 6
# PRINT OUT PENNING CONSTANTS
      DO 5 KDUM=10,NIN
      IF(PENFRA[1,KDUM] == 0.0):
 GO TO 5
      WRITE(6,999) NAME,EIN(KDUM),PENFRA[1,KDUM],PENFRA[2,KDUM],
     /PENFRA[3,KDUM]
  999 FORMAT(' GAS = ',A25,' ENERGY LEVEL = ',F7.4,' EV.',/,' PENNING PR
     /OBABILITY =',F5.3,' ABS.LENGTH =',F7.2,' DECAY TIME =',F7.1,/)
    5 CONTINUE
#********************************************************************* 
#
    6 SCRPT(1)='                                                  '
      SCRPT(2)=' ELASTIC   ANISOTROPIC   ETHANE 2016              '
      IF(NANISO == 0):
 :
      SCRPT(2)=' ELASTIC     ISOTROPIC   ETHANE 2016              '
      # endIF
      SCRPT(3)=' IONISATION     C2H6+               ELOSS= 11.52  '
      SCRPT(4)=' IONISATION     C2H4+               ELOSS= 12.05  ' 
      SCRPT(5)=' IONISATION     C2H5+               ELOSS= 12.65  '
      SCRPT(6)=' IONISATION     CH3+                ELOSS= 13.65  ' 
      SCRPT(7)=' IONISATION     C2H3+               ELOSS= 14.8   '
      SCRPT(8)=' IONISATION     C2H2+               ELOSS= 14.8   ' 
      SCRPT(9)=' IONISATION     H+                  ELOSS= 20.5   '
      SCRPT(10)=' IONISATION     H2+                 ELOSS= 21.5   ' 
      SCRPT(11)=' IONISATION     CH2+                ELOSS= 25.8   ' 
      SCRPT(12)=' IONISATION     C2H+                ELOSS= 26.2   ' 
      SCRPT(13)=' ION-DISS       C2H6++ (100% DISS)  ELOSS= 32.0   ' 
      SCRPT(14)=' IONISATION     H3+                 ELOSS= 32.5   ' 
      SCRPT(15)=' IONISATION     CH+                 ELOSS= 36.0   ' 
      SCRPT(16)=' IONISATION     C2+                 ELOSS= 37.0   '
      SCRPT(17)=' IONISATION     C+                  ELOSS= 37.0   '
      SCRPT(18)=' IONISATION   CARBON K-SHELL        ELOSS=285.0   ' 
      SCRPT(19)=' ATTACHMENT H-                                    '
      SCRPT(20)=' ATTACHMENT CH2-                                  '
      SCRPT(21)='                                                  '
      SCRPT(22)='                                                  '
      SCRPT(23)=' TORSION V4     SUPERELASTIC       ELOSS= -0.0358 '
      SCRPT(24)=' TORSION V4                        ELOSS=  0.0358 '
      SCRPT(25)=' V12+V3 ROCKING SUPERELASTIC       ELOSS= -0.117  '
      SCRPT(26)=' V12+V3 ROCKING VIBRATIONS         ELOSS=  0.117  '
      SCRPT(27)=' V9 ROCKING     SUPERELASTIC       ELOSS= -0.148  '
      SCRPT(28)=' V9 ROCKING                        ELOSS=  0.148  '
      SCRPT(29)=' V2+V6+V8+V11  SUPERELASTIC        ELOSS= -0.182  '
      SCRPT(30)=' V2+V6+V8+V11  B# end    VIBRATION   ELOSS=  0.182  '
      SCRPT(31)=' V1+V5+V7+V10  STRETCH VIBRATION   ELOSS=  0.366  '
      SCRPT(32)=' VIBRATION    HARMONICS            ELOSS=  0.548  '
      SCRPT(33)=' TRIPLET DISSOCIATION              ELOSS=  6.85   '
      SCRPT(34)=' SINGLET DISSOC.    F = 0.000136   ELOSS=  7.93   '
      SCRPT(35)=' TRIPLET DISSOCIATION              ELOSS=  8.00   '
      SCRPT(36)=' SINGLET DISSOC.    F = 0.001744   ELOSS=  8.15   '
      SCRPT(37)=' SINGLET DISSOC.    F = 0.008187   ELOSS=  8.48   '
      SCRPT(38)=' SINGLET DISSOC.    F = 0.006312   ELOSS=  8.723  '
      SCRPT(39)=' SINGLET DISSOC.    F = 0.011877   ELOSS=  8.865  '
      SCRPT(40)=' SINGLET DISSOC.    F = 0.020856   ELOSS=  9.007  '
      SCRPT(41)=' SINGLET DISSOC.    F = 0.031444   ELOSS=  9.149  '
      SCRPT(42)=' SINGLET DISSOC.    F = 0.039549   ELOSS=  9.291  '
      SCRPT(43)=' SINGLET DISSOC.    F = 0.042350   ELOSS=  9.433  '
      SCRPT(44)=' SINGLET DISSOC.    F = 0.041113   ELOSS=  9.575  '
      SCRPT(45)=' SINGLET DISSOC.    F = 0.038256   ELOSS=  9.717  '
      SCRPT(46)=' SINGLET DISSOC.    F = 0.036556   ELOSS=  9.859  '
      SCRPT(47)=' TRIPLET DISSOCIATION              ELOSS= 10.0    '
      SCRPT(48)=' SINGLET DISSOC.    F = 0.096232   ELOSS= 10.115  '
      SCRPT(49)=' SINGLET DISSOC.    F = 0.083738   ELOSS= 10.450  '
      SCRPT(50)=' SINGLET DISSOC.    F = 0.043456   ELOSS= 10.672  '
      SCRPT(51)=' SINGLET DISSOC.    F = 0.047436   ELOSS= 10.816  '
      SCRPT(52)=' SINGLET DISSOC.    F = 0.047800   ELOSS= 10.960  '
      SCRPT(53)=' SINGLET DISSOC.    F = 0.048914   ELOSS= 11.104  '
      SCRPT(54)=' SINGLET DISSOC.    F = 0.054353   ELOSS= 11.248  '
      SCRPT(55)=' SINGLET DISSOC.    F = 0.061019   ELOSS= 11.392  '
      SCRPT(56)=' SINGLET DISSOC.    F = 0.24443    ELOSS= 11.732  '
      SCRPT(57)=' SINGLET DISSOC.    F = 0.28479    ELOSS= 12.4    '
      SCRPT(58)=' SINGLET DISSOC.    F = 0.095973   ELOSS= 13.0    '
      SCRPT(59)=' SINGLET DISSOC.    F = 0.090728   ELOSS= 13.5    '
      SCRPT(60)=' SINGLET DISSOC.    F = 0.071357   ELOSS= 14.1    '
      SCRPT(61)=' SINGLET DISSOC.    F = 0.074875   ELOSS= 14.7    '
      SCRPT(62)=' SINGLET DISSOC.    F = 0.054542   ELOSS= 15.3    '
      SCRPT(63)=' SINGLET DISSOC.    F = 0.022479   ELOSS= 15.9    '
      SCRPT(64)=' SINGLET DISSOC.    F = 0.008585   ELOSS= 16.5    '
      SCRPT(65)=' SINGLET DISSOC.    F = 0.004524   ELOSS= 17.1    '
      SCRPT(66)=' SINGLET DISSOC.    F = 0.004982   ELOSS= 17.7    '
      SCRPT(67)=' SINGLET DISSOC.    F = 0.01013    ELOSS= 18.5    '
      SCRPT(68)=' SINGLET DISSOC.    F = 0.01332    ELOSS= 19.5    '
      SCRPT(69)=' SINGLET DISSOC.    F = 0.01331    ELOSS= 20.5    '
      SCRPT(70)=' SINGLET DISSOC.    F = 0.01076    ELOSS= 21.5    '
      SCRPT(71)=' SINGLET DISSOC.    F = 0.009797   ELOSS= 22.5    '
      SCRPT(72)=' SINGLET DISSOC.    F = 0.009198   ELOSS= 23.5    '
      SCRPT(73)=' SINGLET DISSOC.    F = 0.008312   ELOSS= 24.5    '
      SCRPT(74)=' SINGLET DISSOC.    F = 0.007139   ELOSS= 25.5    '
      SCRPT(75)=' SINGLET DISSOC.    F = 0.004715   ELOSS= 26.5    '
      SCRPT(76)=' SINGLET DISSOC.    F = 0.002137   ELOSS= 27.5    '
      SCRPT(77)=' SINGLET DISSOC.    F = 0.000662   ELOSS= 28.5    '
      SCRPT(78)=' BREMSSTRAHLUNG FROM CARBON ATOM                  '
      SCRPT(79)=' BREMSSTRAHLUNG FROM HYDROGEN ATOM                '
# NULL COLLISIONS
      SCRPTN(1)=' C2H6:DISSOCIATION : WINTERS CHEM.PHYS 36(1979)353'
      SCRPTN(2)=' C2H6: LIGHT EMISSION: Halpha                     '
      SCRPTN(3)=' C2H6: LIGHT EMISSION: CH2(A2DELTA - X2PI)        '
#
# CALC LEVEL POPULATIONS
      APOP1=math.exp(EIN(1)/AKT)
      APOP2=math.exp(EIN(3)/AKT)
      APOP3=math.exp(EIN(5)/AKT)
      APOP4=math.exp(EIN(7)/AKT)
# 
#
#     EN=-ESTEP/2.0                                      
      DO 1000 I=1,NSTEP 
      EN=EG(I)
      ENLG=math.log(EN)                                             
#     EN=EN+ESTEP    
      GAMMA1=(EMASS2+2.00*EN)/EMASS2
      GAMMA2=GAMMA1*GAMMA1
      BETA=math.sqrt(1.00-1.00/GAMMA2)
      BETA2=BETA*BETA
#                                                   
      DO 10 J=2,NDATA       
      IF(EN > 10.0):
 GO TO 21                                           
      IF(EN <= XEN(J):
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA                                                           
   20 A=(YMT(J)-YMT(J-1))/(XEN(J)-XEN(J-1))                         
      B=(XEN(J-1)*YMT(J)-XEN(J)*YMT(J-1))/(XEN(J-1)-XEN(J))   
      QMT=(A*EN+B)*1.D-16
      A=(YEL(J)-YEL(J-1))/(XEN(J)-XEN(J-1))
      B=(XEN(J-1)*YEL(J)-XEN(J)*YEL(J-1))/(XEN(J-1)-XEN(J))
      QEL=(A*EN+B)*1.D-16
      A=(YEPS(J)-YEPS(J-1))/(XEN(J)-XEN(J-1))
      B=(XEN(J-1)*YEPS(J)-XEN(J)*YEPS(J-1))/(XEN(J-1)-XEN(J))
      PQ2=A*EN+B
      GO TO 30
# USE LOG INTERPOLATION ABOVE 10 EV
   21 DO 22 J=2,NDATA
      IF(EN <= XEN(J):
) GO TO 23
   22 CONTINUE
      J=NDATA
   23 YXJ=math.log(YEL(J))
      YXJ1=math.log(YEL(J-1))
      XNJ=math.log(XEN(J))
      XNJ1=math.log(XEN(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QEL=math.exp(A*math.log(EN)+B)*1.D-16
      YXJ=math.log(YMT(J))
      YXJ1=math.log(YMT(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QMT=math.exp(A*math.log(EN)+B)*1.D-16
      YXJ=math.log(YEPS(J))
      YXJ1=math.log(YEPS(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      PQ2=math.exp(A*math.log(EN)+B)
   30 CONTINUE
# EPSILON= 1-YEPS
      PQ2=1.00-PQ2 
      PQ1=0.5+(QEL-QMT)/QEL 
# CALCULATE PQ1 AND PQ2
      IF(NANISO == 0):
 PEQEL(2,I)=0.5
      IF(NANISO == 1):
 PEQEL(2,I)=PQ1
      IF(NANISO == 2):
 PEQEL(2,I)=PQ2
      Q(2,I)=QEL
      IF(NANISO == 0):
 Q(2,I)=QMT 
#
# IONISATION 
# 
      DO 100 L=1,NION
      QION(L,I)=0.00
      PEQION(L,I)=0.5
      IF(NANISO == 2):
 PEQION(L,I)=0.0
  100 CONTINUE
#  C2H6+                                                                     
      IF(EN <= EION(1):
) GO TO 110         
      IF(EN > XION1(NION1):
) GO TO 103
      DO 101 J=2,NION1                                                  
      IF(EN <= XION1(J):
) GO TO 102                                     
  101 CONTINUE                                                          
      J=NION1                                                           
  102 A=(YION1(J)-YION1(J-1))/(XION1(J)-XION1(J-1))                    
      B=(XION1(J-1)*YION1(J)-XION1(J)*YION1(J-1))/(XION1(J-1)-XION1(J)) 
      QION(1,I)=(A*EN+B)*1.D-16               
      GO TO 107 
  103 IF(EN > XION(NIOND)) GO TO 106
# USE FRACTION OF COUNTING IONISATION ABOVE 600 EV
# USE LOG INTERPOLATION 
      DO 104 J=2,NIOND
      IF(EN <= XION(J):
) GO TO 105
  104 CONTINUE
      J=NIOND
  105 YXJ=math.log(YIONC(J))
      YXJ1=math.log(YIONC(J-1))
      XNJ=math.log(XION(J))
      XNJ1=math.log(XION(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QCOUNT=math.exp(A*math.log(EN)+B)*1.D-16
# FRACTION OF QCOUNT
      QION(1,I)=QCOUNT*0.1378
      GO TO 107
# USE BORN BETHE ABOVE XION(NIOND) EV
  106 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QBB=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)
      QION(1,I)=QBB*0.1378
  107 CONTINUE
      IF(EN < (2.0*EION(1):
)) GO TO 110
      PEQION(1,I)=PEQEL(2,(I-IOFFION(1)))
# C2H4+ 
  110 IF(EN <= EION(2)) GO TO 120         
      IF(EN > XION2(NION2):
) GO TO 113
      DO 111 J=2,NION2                                                  
      IF(EN <= XION2(J):
) GO TO 112                                     
  111 CONTINUE                                                          
      J=NION2                                                           
  112 A=(YION2(J)-YION2(J-1))/(XION2(J)-XION2(J-1))                    
      B=(XION2(J-1)*YION2(J)-XION2(J)*YION2(J-1))/(XION2(J-1)-XION2(J)) 
      QION(2,I)=(A*EN+B)*1.D-16               
      GO TO 117 
  113 IF(EN > XION(NIOND)) GO TO 116
# USE FRACTION OF COUNTING IONISATION ABOVE 600 EV
# FRACTION OF QCOUNT
      QION(2,I)=QCOUNT*0.4481
      GO TO 117
# USE BORN BETHE ABOVE XION(NIOND) EV
  116 QION(2,I)=QBB*0.4481
  117 CONTINUE
      IF(EN < (2.0*EION(2):
)) GO TO 120
      PEQION(2,I)=PEQEL(2,(I-IOFFION(2)))
# C2H5+ 
  120 IF(EN <= EION(3)) GO TO 130         
      IF(EN > XION3(NION3):
) GO TO 123
      DO 121 J=2,NION3                                                  
      IF(EN <= XION3(J):
) GO TO 122                                     
  121 CONTINUE                                                          
      J=NION3                                                           
  122 A=(YION3(J)-YION3(J-1))/(XION3(J)-XION3(J-1))                    
      B=(XION3(J-1)*YION3(J)-XION3(J)*YION3(J-1))/(XION3(J-1)-XION3(J)) 
      QION(3,I)=(A*EN+B)*1.D-16               
      GO TO 127 
  123 IF(EN > XION(NIOND)) GO TO 126
# USE FRACTION OF COUNTING IONISATION ABOVE 600 EV
# FRACTION OF QCOUNT
      QION(3,I)=QCOUNT*0.1104
      GO TO 127
# USE BORN BETHE ABOVE XION(NIOND) EV
  126 QION(3,I)=QBB*0.1104
  127 CONTINUE
      IF(EN < (2.0*EION(3):
)) GO TO 130
      PEQION(3,I)=PEQEL(2,(I-IOFFION(3)))
# CH3+ 
  130 IF(EN <= EION(4)) GO TO 140         
      IF(EN > XION4(NION4):
) GO TO 133
      DO 131 J=2,NION4                                                  
      IF(EN <= XION4(J):
) GO TO 132                                     
  131 CONTINUE                                                          
      J=NION4                                                           
  132 A=(YION4(J)-YION4(J-1))/(XION4(J)-XION4(J-1))                    
      B=(XION4(J-1)*YION4(J)-XION4(J)*YION4(J-1))/(XION4(J-1)-XION4(J)) 
      QION(4,I)=(A*EN+B)*1.D-16               
      GO TO 137 
  133 IF(EN > XION(NIOND)) GO TO 136
# USE FRACTION OF COUNTING IONISATION ABOVE 600 EV
# FRACTION OF QCOUNT
      QION(4,I)=QCOUNT*0.01718
      GO TO 137
# USE BORN BETHE ABOVE XION(NIOND) EV
  136 QION(4,I)=QBB*0.01718
  137 CONTINUE
      IF(EN < (2.0*EION(4):
)) GO TO 140
      PEQION(4,I)=PEQEL(2,(I-IOFFION(4)))
# C2H3+ 
  140 IF(EN <= EION(5)) GO TO 150         
      IF(EN > XION5(NION5):
) GO TO 143
      DO 141 J=2,NION5                                                  
      IF(EN <= XION5(J):
) GO TO 142                                     
  141 CONTINUE                                                          
      J=NION5                                                           
  142 A=(YION5(J)-YION5(J-1))/(XION5(J)-XION5(J-1))                    
      B=(XION5(J-1)*YION5(J)-XION5(J)*YION5(J-1))/(XION5(J-1)-XION5(J)) 
      QION(5,I)=(A*EN+B)*1.D-16               
      GO TO 147 
  143 IF(EN > XION(NIOND)) GO TO 146
# USE FRACTION OF COUNTING IONISATION ABOVE 600 EV
# FRACTION OF QCOUNT
      QION(5,I)=QCOUNT*0.1283 
      GO TO 147
# USE BORN BETHE ABOVE XION(NIOND) EV
  146 QION(5,I)=QBB*0.1283 
  147 CONTINUE
      IF(EN < (2.0*EION(5):
)) GO TO 150
      PEQION(5,I)=PEQEL(2,(I-IOFFION(5)))
# C2H2+ 
  150 IF(EN <= EION(6)) GO TO 160         
      IF(EN > XION6(NION6):
) GO TO 153
      DO 151 J=2,NION6                                                  
      IF(EN <= XION6(J):
) GO TO 152                                     
  151 CONTINUE                                                          
      J=NION6                                                           
  152 A=(YION6(J)-YION6(J-1))/(XION6(J)-XION6(J-1))                    
      B=(XION6(J-1)*YION6(J)-XION6(J)*YION6(J-1))/(XION6(J-1)-XION6(J)) 
      QION(6,I)=(A*EN+B)*1.D-16               
      GO TO 157 
  153 IF(EN > XION(NIOND)) GO TO 156
# USE FRACTION OF COUNTING IONISATION ABOVE 600 EV
# FRACTION OF QCOUNT
      QION(6,I)=QCOUNT*0.0700 
      GO TO 157
# USE BORN BETHE ABOVE XION(NIOND) EV
  156 QION(6,I)=QBB*0.0700 
  157 CONTINUE
      IF(EN < (2.0*EION(6):
)) GO TO 160
      PEQION(6,I)=PEQEL(2,(I-IOFFION(6)))
# H+ 
  160 IF(EN <= EION(7)) GO TO 170         
      IF(EN > XION7(NION7):
) GO TO 163
      DO 161 J=2,NION7                                                  
      IF(EN <= XION7(J):
) GO TO 162                                     
  161 CONTINUE                                                          
      J=NION7                                                           
  162 A=(YION7(J)-YION7(J-1))/(XION7(J)-XION7(J-1))                    
      B=(XION7(J-1)*YION7(J)-XION7(J)*YION7(J-1))/(XION7(J-1)-XION7(J)) 
      QION(7,I)=(A*EN+B)*1.D-16               
      GO TO 167 
  163 IF(EN > XION(NIOND)) GO TO 166
# USE FRACTION OF COUNTING IONISATION ABOVE 600 EV
# FRACTION OF QCOUNT
      QION(7,I)=QCOUNT*0.000011
      GO TO 167
# USE BORN BETHE ABOVE XION(NIOND) EV
  166 QION(7,I)=QBB*0.000011
  167 CONTINUE
      IF(EN < (2.0*EION(7):
)) GO TO 170
      PEQION(7,I)=PEQEL(2,(I-IOFFION(7)))
# H2+ 
  170 IF(EN <= EION(8)) GO TO 180         
      IF(EN > XION8(NION8):
) GO TO 173
      DO 171 J=2,NION8                                                  
      IF(EN <= XION8(J):
) GO TO 172                                     
  171 CONTINUE                                                          
      J=NION8                                                           
  172 A=(YION8(J)-YION8(J-1))/(XION8(J)-XION8(J-1))                    
      B=(XION8(J-1)*YION8(J)-XION8(J)*YION8(J-1))/(XION8(J-1)-XION8(J)) 
      QION(8,I)=(A*EN+B)*1.D-16               
      GO TO 177 
  173 IF(EN > XION(NIOND)) GO TO 176
# USE FRACTION OF COUNTING IONISATION ABOVE 600 EV
# FRACTION OF QCOUNT
      QION(8,I)=QCOUNT*0.00036  
      GO TO 177
# USE BORN BETHE ABOVE XION(NIOND) EV
  176 QION(8,I)=QBB*0.00036 
  177 CONTINUE
      IF(EN < (2.0*EION(8):
)) GO TO 180
      PEQION(8,I)=PEQEL(2,(I-IOFFION(8)))
# CH2+ 
  180 IF(EN <= EION(9)) GO TO 190         
      IF(EN > XION9(NION9):
) GO TO 183
      DO 181 J=2,NION9                                                  
      IF(EN <= XION9(J):
) GO TO 182                                     
  181 CONTINUE                                                          
      J=NION9                                                           
  182 A=(YION9(J)-YION9(J-1))/(XION9(J)-XION9(J-1))                    
      B=(XION9(J-1)*YION9(J)-XION9(J)*YION9(J-1))/(XION9(J-1)-XION9(J)) 
      QION(9,I)=(A*EN+B)*1.D-16               
      GO TO 187 
  183 IF(EN > XION(NIOND)) GO TO 186
# USE FRACTION OF COUNTING IONISATION ABOVE 600 EV
# FRACTION OF QCOUNT
      QION(9,I)=QCOUNT*0.0066  
      GO TO 187
# USE BORN BETHE ABOVE XION(NIOND) EV
  186 QION(9,I)=QBB*0.0066
  187 CONTINUE
      IF(EN < (2.0*EION(9):
)) GO TO 190
      PEQION(9,I)=PEQEL(2,(I-IOFFION(9)))
# C2H+
  190 IF(EN <= EION(10)) GO TO 200         
      IF(EN > XION10(NION10):
) GO TO 193
      DO 191 J=2,NION10                                                 
      IF(EN <= XION10(J):
) GO TO 192                                     
  191 CONTINUE                                                          
      J=NION10                                                          
  192 A=(YION10(J)-YION10(J-1))/(XION10(J)-XION10(J-1))                
      B=(XION10(J-1)*YION10(J)-XION10(J)*YION10(J-1))/
     /(XION10(J-1)-XION10(J)) 
      QION(10,I)=(A*EN+B)*1.D-16               
      GO TO 197 
  193 IF(EN > XION(NIOND)) GO TO 196
# USE FRACTION OF COUNTING IONISATION ABOVE 600 EV
# FRACTION OF QCOUNT
      QION(10,I)=QCOUNT*0.0062
      GO TO 197
# USE BORN BETHE ABOVE XION(NIOND) EV
  196 QION(10,I)=QBB*0.0062    
  197 CONTINUE
      IF(EN < (2.0*EION(10):
)) GO TO 200
      PEQION(10,I)=PEQEL(2,(I-IOFFION(10)))
# C2H6++
  200 IF(EN <= EION(11)) GO TO 210         
      IF(EN > XION11(NION11):
) GO TO 203
      DO 201 J=2,NION11                                                 
      IF(EN <= XION11(J):
) GO TO 202                                     
  201 CONTINUE                                                          
      J=NION11                                                          
  202 A=(YION11(J)-YION11(J-1))/(XION11(J)-XION11(J-1))                
      B=(XION11(J-1)*YION11(J)-XION11(J)*YION11(J-1))/
     /(XION11(J-1)-XION11(J)) 
      QION(11,I)=(A*EN+B)*1.D-16               
      GO TO 207 
  203 IF(EN > XION(NIOND)) GO TO 206
# USE FRACTION OF COUNTING IONISATION ABOVE 600 EV
# FRACTION OF QCOUNT
      QION(11,I)=QCOUNT*0.0745
      GO TO 207
# USE BORN BETHE ABOVE XION(NIOND) EV
  206 QION(11,I)=QBB*0.0745  
  207 CONTINUE
      IF(EN < (2.0*EION(11):
)) GO TO 210
      PEQION(11,I)=PEQEL(2,(I-IOFFION(11)))
# H3+
  210 IF(EN <= EION(12)) GO TO 220         
      IF(EN > XION12(NION12):
) GO TO 213
      DO 211 J=2,NION12                                                 
      IF(EN <= XION12(J):
) GO TO 212                                     
  211 CONTINUE                                                          
      J=NION12                                                          
  212 A=(YION12(J)-YION12(J-1))/(XION12(J)-XION12(J-1))                
      B=(XION12(J-1)*YION12(J)-XION12(J)*YION12(J-1))/
     /(XION12(J-1)-XION12(J)) 
      QION(12,I)=(A*EN+B)*1.D-16               
      GO TO 217 
  213 IF(EN > XION(NIOND)) GO TO 216
# USE FRACTION OF COUNTING IONISATION ABOVE 600 EV
# FRACTION OF QCOUNT
      QION(12,I)=QCOUNT*0.0000055
      GO TO 217
# USE BORN BETHE ABOVE XION(NIOND) EV
  216 QION(12,I)=QBB*0.0000055   
  217 CONTINUE
      IF(EN < (2.0*EION(12):
)) GO TO 220
      PEQION(12,I)=PEQEL(2,(I-IOFFION(12)))
# CH+
  220 IF(EN <= EION(13)) GO TO 230         
      IF(EN > XION13(NION13):
) GO TO 223
      DO 221 J=2,NION13                                                 
      IF(EN <= XION13(J):
) GO TO 222                                     
  221 CONTINUE                                                          
      J=NION13                                                          
  222 A=(YION13(J)-YION13(J-1))/(XION13(J)-XION13(J-1))                
      B=(XION13(J-1)*YION13(J)-XION13(J)*YION13(J-1))/
     /(XION13(J-1)-XION13(J)) 
      QION(13,I)=(A*EN+B)*1.D-16               
      GO TO 227 
  223 IF(EN > XION(NIOND)) GO TO 226
# USE FRACTION OF COUNTING IONISATION ABOVE 600 EV
# FRACTION OF QCOUNT
      QION(13,I)=QCOUNT*0.00037
      GO TO 227
# USE BORN BETHE ABOVE XION(NIOND) EV
  226 QION(13,I)=QBB*0.00037
  227 CONTINUE
      IF(EN < (2.0*EION(13):
)) GO TO 230
      PEQION(13,I)=PEQEL(2,(I-IOFFION(13)))
# C2+
  230 IF(EN <= EION(14)) GO TO 240         
      IF(EN > XION14(NION14):
) GO TO 233
      DO 231 J=2,NION14                                                 
      IF(EN <= XION14(J):
) GO TO 232                                     
  231 CONTINUE                                                          
      J=NION14                                                          
  232 A=(YION14(J)-YION14(J-1))/(XION14(J)-XION14(J-1))                
      B=(XION14(J-1)*YION14(J)-XION14(J)*YION14(J-1))/
     /(XION14(J-1)-XION14(J)) 
      QION(14,I)=(A*EN+B)*1.D-16               
      GO TO 237 
  233 IF(EN > XION(NIOND)) GO TO 236
# USE FRACTION OF COUNTING IONISATION ABOVE 600 EV
# FRACTION OF QCOUNT
      QION(14,I)=QCOUNT*0.000022
      GO TO 237
# USE BORN BETHE ABOVE XION(NIOND) EV
  236 QION(14,I)=QBB*0.000022
  237 CONTINUE
      IF(EN < (2.0*EION(14):
)) GO TO 240
      PEQION(14,I)=PEQEL(2,(I-IOFFION(14)))
# C+ 
  240 IF(EN <= EION(15)) GO TO 250         
      IF(EN > XION15(NION15):
) GO TO 243
      DO 241 J=2,NION15                                                 
      IF(EN <= XION15(J):
) GO TO 242                                     
  241 CONTINUE                                                          
      J=NION15                                                          
  242 A=(YION15(J)-YION15(J-1))/(XION15(J)-XION15(J-1))                
      B=(XION15(J-1)*YION15(J)-XION15(J)*YION15(J-1))/
     /(XION15(J-1)-XION15(J)) 
      QION(15,I)=(A*EN+B)*1.D-16               
      GO TO 247 
  243 IF(EN > XION(NIOND)) GO TO 246
# USE FRACTION OF COUNTING IONISATION ABOVE 600 EV
# FRACTION OF QCOUNT
      QION(15,I)=QCOUNT*0.00011 
      GO TO 247
# USE BORN BETHE ABOVE XION(NIOND) EV
  246 QION(15,I)=QBB*0.00011 
  247 CONTINUE
      IF(EN < (2.0*EION(15):
)) GO TO 250
      PEQION(15,I)=PEQEL(2,(I-IOFFION(15)))
# CARBON K-SHELL 
  250 IF(EN <= EION(16)) GO TO 260         
      DO 251 J=2,NION16                                                 
      IF(EN <= XION16(J):
) GO TO 252                                     
  251 CONTINUE                                                          
      J=NION16                                                          
  252 A=(YION16(J)-YION16(J-1))/(XION16(J)-XION16(J-1))                
      B=(XION16(J-1)*YION16(J)-XION16(J)*YION16(J-1))/
     /(XION16(J-1)-XION16(J)) 
# FACTOR OF 2 FOR 2 CARBON ATOMS
      QION(16,I)=2.0*(A*EN+B)*1.D-16               
      IF(EN < (2.0*EION(16):
)) GO TO 255
      PEQION(16,I)=PEQEL(2,(I-IOFFION(16)))
# CORRECTION TO INISATION FOR SPLIT OFF KSHELL
  255 QSUM=0.00
      DO 256 L=1,15
  256 QSUM=QSUM+QION(L,I)
      IF(QSUM == 0.0):
 GO TO 260
      FAC=(QSUM-QION(16,I))/QSUM
      DO 257 L=1,15
  257 QION(L,I)=QION(L,I)*FAC 
# ATTACHMENT TO H- 
  260 Q(4,I)=0.0
      QATT(1,I)=0.0
      IF(EN < XATT1(1):
) GO TO 290                                      
      IF(EN >= XATT1(NATT1):
) GO TO 290                                
      DO 270 J=2,NATT1                                                  
      IF(EN <= XATT1(J):
) GO TO 280                                     
  270 CONTINUE                                                          
      J=NATT1                                                          
  280 A=(YATT1(J)-YATT1(J-1))/(XATT1(J)-XATT1(J-1))                     
      B=(XATT1(J-1)*YATT1(J)-XATT1(J)*YATT1(J-1))/(XATT1(J-1)-XATT1(J))
      QATT(1,I)=(A*EN+B)*1.D-16  
# ATTACHMENT TO CH2- 
  290 QATT(2,I)=0.0
      IF(EN < XATT2(1):
) GO TO 300                                      
      IF(EN >= XATT2(NATT2):
) GO TO 300                                
      DO 291 J=2,NATT2                                                  
      IF(EN <= XATT2(J):
) GO TO 292                                     
  291 CONTINUE                                                          
      J=NATT2                                                          
  292 A=(YATT2(J)-YATT2(J-1))/(XATT2(J)-XATT2(J-1))                     
      B=(XATT2(J-1)*YATT2(J)-XATT2(J)*YATT2(J-1))/(XATT2(J-1)-XATT2(J))
      QATT(2,I)=(A*EN+B)*1.D-16  
#                                     
  300 Q(5,I)=0.0
      Q(6,I)=0.0
# SET ZEROS
      DO 310 L=1,NIN
      QIN(L,I)=0.00
  310 PEQIN(L,I)=0.00
#
# SUPERELASTIC VIBRATION-TORSION         ANISOTROPIC ABOVE 10 EV
      IF(EN <= 0.0):
 GO TO 350
      EFAC=math.sqrt(1.0-(EIN(1)/EN))
      QIN(1,I)=0.0045*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      QIN(1,I)=QIN(1,I)*APOP1/(1.0+APOP1)*1.D-16
      IF(EN > 10.0):
 PEQIN(1,I)=PEQEL(2,(I-IOFFN(1)))
#
# VIBRATION-TORSION                      ANISOTROPIC ABOVE 10 EV
  350 IF(EN <= EIN(2)) GO TO 351
      EFAC=math.sqrt(1.0-(EIN(2)/EN))
      QIN(2,I)=0.0045*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      QIN(2,I)=QIN(2,I)*1.0/(1.0+APOP1)*1.D-16
      IF(EN > 10.0):
 PEQIN(2,I)=PEQEL(2,(I-IOFFN(2)))
#
# SUPERELASTIC VIB1                     ANISOTROPIC ABOVE 10 EV
  351 IF(EN <= 0.0) GO TO 356
      IF((EN+EIN(4):
) > XVIB1(NVIB1)) GO TO 354
      DO 352 J=2,NVIB1
      IF((EN+EIN(4):
) <= XVIB1(J)) GO TO 353
  352 CONTINUE
      J=NVIB1
  353 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J))
      QIN(3,I)=(EN+EIN(4))*(A*(EN+EIN(4))+B)/EN
      GO TO 355
  354 QIN(3,I)=YVIB1(NVIB1)*(XVIB1(NVIB1)/(EN+EIN(4)))**2
  355 QIN(3,I)=QIN(3,I)*APOP2/(1.0+APOP2)*1.D-16
      IF(EN > 10.0):
 PEQIN(3,I)=PEQEL(2,(I-IOFFN(3)))
#  VIB1                           ANISOTROPIC ABOVE 10 EV               
  356 IF(EN <= EIN(4)) GO TO 361  
      IF(EN > XVIB1(NVIB1):
) GO TO 359
      DO 357 J=2,NVIB1                                                  
      IF(EN <= XVIB1(J):
) GO TO 358                                      
  357 CONTINUE                                                          
      J=NVIB1                                                           
  358 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J)) 
      QIN(4,I)=(A*EN+B)
      GO TO 360 
  359 QIN(4,I)=YVIB1(NVIB1)*(XVIB1(NVIB1)/EN)**2
  360 QIN(4,I)=QIN(4,I)/(1.0+APOP2)*1.D-16   
      IF(EN > 10.0):
 PEQIN(4,I)=PEQEL(2,(I-IOFFN(4)))  
# SUPERELASTIC VIB2                       ANISOTROPIC ABOVE 10 EV
  361 IF(EN <= 0.0) GO TO 366
      IF((EN+EIN(6):
) > XVIB2(NVIB2)) GO TO 364
      DO 362 J=2,NVIB2
      IF((EN+EIN(6):
) <= XVIB2(J)) GO TO 363  
  362 CONTINUE
      J=NVIB2
  363 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J))
      QIN(5,I)=(EN+EIN(6))*(A*(EN+EIN(6))+B)/EN
      GO TO 365
  364 QIN(5,I)=YVIB2(NVIB2)*(XVIB2(NVIB2)/(EN+EIN(6)))**2
  365 QIN(5,I)=QIN(5,I)*APOP3/(1.0+APOP3)*1.D-16
      IF(EN > 10.0):
 PEQIN(5,I)=PEQEL(2,(I-IOFFN(5)))
# VIB2                                  ANISOTROPIC ABOVE 10 EV
  366 IF(EN <= EIN(6)) GO TO 371
      IF(EN > XVIB2(NVIB2):
) GO TO 369                                 
      DO 367 J=2,NVIB2                                                  
      IF(EN <= XVIB2(J):
) GO TO 368                                      
  367 CONTINUE                                                          
      J=NVIB2                                                           
  368 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J)) 
      QIN(6,I)=(A*EN+B)
      GO TO 370
  369 QIN(6,I)=YVIB2(NVIB2)*(XVIB2(NVIB2)/EN)**2
  370 QIN(6,I)=QIN(6,I)/(1.0+APOP3)*1.D-16
      IF(EN > 10.0):
 PEQIN(6,I)=PEQEL(2,(I-IOFFN(6)))       
# SUPERELASTIC VIB3                       ANISOTROPIC ABOVE 10 EV
  371 IF(EN <= 0.0) GO TO 376
      IF((EN+EIN(8):
) > XVIB3(NVIB3)) GO TO 374
      DO 372 J=2,NVIB3
      IF((EN+EIN(8):
) <= XVIB3(J)) GO TO 373  
  372 CONTINUE
      J=NVIB3
  373 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J))
      QIN(7,I)=(EN+EIN(8))*(A*(EN+EIN(8))+B)/EN
      GO TO 375
  374 QIN(7,I)=YVIB3(NVIB3)*(XVIB3(NVIB3)/(EN+EIN(8)))**2
  375 QIN(7,I)=QIN(7,I)*APOP4/(1.0+APOP4)*1.D-16
      IF(EN > 10.0):
 PEQIN(7,I)=PEQEL(2,(I-IOFFN(7)))
# VIB3                                  ANISOTROPIC ABOBE 10 EV
  376 IF(EN <= EIN(8)) GO TO 381   
      IF(EN > XVIB3(NVIB3):
) GO TO 379
      DO 377 J=2,NVIB3                                                  
      IF(EN <= XVIB3(J):
) GO TO 378                                      
  377 CONTINUE                                                          
      J=NVIB3                                                           
  378 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J)) 
      QIN(8,I)=(A*EN+B)
      GO TO 380
  379 QIN(8,I)=YVIB3(NVIB3)*(XVIB3(NVIB3)/EN)**2    
  380 QIN(8,I)=QIN(8,I)/(1.0+APOP4)*1.D-16
      IF(EN > 10.0):
 PEQIN(8,I)=PEQEL(2,(I-IOFFN(8)))    
# VIB4                                      ANISOTROPIC ABOVE 10 EV
  381 IF(EN <= EIN(9)) GO TO 386 
      IF(EN > XVIB4(NVIB4):
) GO TO 384        
      DO 382 J=2,NVIB4                                                  
      IF(EN <= XVIB4(J):
) GO TO 383                                      
  382 CONTINUE                                                          
      J=NVIB4                                                           
  383 A=(YVIB4(J)-YVIB4(J-1))/(XVIB4(J)-XVIB4(J-1))                     
      B=(XVIB4(J-1)*YVIB4(J)-XVIB4(J)*YVIB4(J-1))/(XVIB4(J-1)-XVIB4(J)) 
      QIN(9,I)=(A*EN+B)*1.D-16
      GO TO 385
  384 QIN(9,I)=YVIB4(NVIB4)*(XVIB4(NVIB4)/EN)**2*1.D-16
  385 IF(EN > 10.0) PEQIN(9,I)=PEQEL(2,(I-IOFFN(9)))     
# VIB HARMONICS                           ANISOTROPIC ABOVE 10 EV   
  386 IF(EN <= EIN(10)) GO TO 391   
      IF(EN > XVIB5(NVIB5):
) GO TO 389    
      DO 387 J=2,NVIB5                                                  
      IF(EN <= XVIB5(J):
) GO TO 388                                      
  387 CONTINUE                                                          
      J=NVIB5                                                           
  388 A=(YVIB5(J)-YVIB5(J-1))/(XVIB5(J)-XVIB5(J-1))                     
      B=(XVIB5(J-1)*YVIB5(J)-XVIB5(J)*YVIB5(J-1))/(XVIB5(J-1)-XVIB5(J)) 
      QIN(10,I)=(A*EN+B)*1.D-16 
      GO TO 390 
  389 QIN(10,I)=YVIB5(NVIB5)*(XVIB5(NVIB5)/EN)**2*1.D-16        
  390 IF(EN > 10.0) PEQIN(10,I)=PEQEL(2,(I-IOFFN(10)))
  391 CONTINUE 
#  
# EXCITATION TO TRIPLET AND SINGLET LEVELS
#
# FIRST TRIPLET AT  6.85 EV
      IF(EN <= EIN(11):
) GO TO 405
      IF(EN > XTR1(NTR1):
) GO TO 403                                   
      DO 401 J=2,NTR1                                              
      IF(EN <= XTR1(J):
) GO TO 402                                  
  401 CONTINUE                                                          
      J=NTR1                                       
  402 A=(YTR1(J)-YTR1(J-1))/(XTR1(J)-XTR1(J-1))                    
      B=(XTR1(J-1)*YTR1(J)-XTR1(J)*YTR1(J-1))/(XTR1(J-1)-XTR1(J))       
      QIN(11,I)=(A*EN+B)*1.D-16     
      GO TO 404
# SCALE BY 1/E**2 ABOVE XTR1(NTR1) EV
  403 QIN(11,I)=YTR1(NTR1)*(XTR1(NTR1)/EN)**2*1.D-16
  404 IF(EN <= (3.0*EIN(11))) GO TO 405
      PEQIN(11,I)=PEQEL(2,(I-IOFFN(11)))
#
# SINGLET DISSOCIATION AT  7.93  EV     BEF SCALING F=.000136          
  405 IF(EN <= (EIN(12))) GO TO 406
      QIN(12,I)=0.000136/(EIN(12)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(12)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(12)+E(3))
      IF(QIN(12,I):
 < 0.0) QIN(12,I)=0.0
      IF(EN <= (3.0*EIN(12):
)) GO TO 406
      PEQIN(12,I)=PEQEL(2,(I-IOFFN(12)))
# 
# SECOND TRIPLET AT  8.00 EV                                   
  406 IF(EN <= EIN(13)) GO TO 411
      IF(EN > XTR2(NTR2):
) GO TO 409  
      DO 407 J=2,NTR2                                                  
      IF(EN <= XTR2(J):
) GO TO 408                                      
  407 CONTINUE                                                          
      J=NTR2                                                           
  408 A=(YTR2(J)-YTR2(J-1))/(XTR2(J)-XTR2(J-1))                     
      B=(XTR2(J-1)*YTR2(J)-XTR2(J)*YTR2(J-1))/(XTR2(J-1)-XTR2(J)) 
      QIN(13,I)=(A*EN+B)*1.D-16
      GO TO 410
# SCALE BY 1/E**2 ABOVE XTR2(NTR2) EV
  409 QIN(13,I)=YTR2(NTR2)*(XTR2(NTR2)/EN)**2*1.D-16
  410 IF(EN <= (3.0*EIN(13))) GO TO 411
      PEQIN(13,I)=PEQEL(2,(I-IOFFN(13)))
#
# SINGLET DISSOCIATION AT  8.15  EV     BEF SCALING F=.001744
  411 IF(EN <= (EIN(14))) GO TO 412
      QIN(14,I)=0.001744/(EIN(14)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(14)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(14)+E(3))
      IF(QIN(14,I):
 < 0.0) QIN(14,I)=0.0
      IF(EN <= (3.0*EIN(14):
)) GO TO 412
      PEQIN(14,I)=PEQEL(2,(I-IOFFN(14)))
# SINGLET DISSOCIATION AT  8.48  EV     BEF SCALING F=.008187
  412 IF(EN <= (EIN(15))) GO TO 413
      QIN(15,I)=0.008187/(EIN(15)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(15)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(15)+E(3))
      IF(QIN(15,I):
 < 0.0) QIN(15,I)=0.0
      IF(EN <= (3.0*EIN(15):
)) GO TO 413
      PEQIN(15,I)=PEQEL(2,(I-IOFFN(15)))
# SINGLET DISSOCIATION AT  8.723 EV     BEF SCALING F=.006312
  413 IF(EN <= (EIN(16))) GO TO 414
      QIN(16,I)=0.006312/(EIN(16)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(16)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(16)+E(3))
      IF(QIN(16,I):
 < 0.0) QIN(16,I)=0.0
      IF(EN <= (3.0*EIN(16):
)) GO TO 414
      PEQIN(16,I)=PEQEL(2,(I-IOFFN(16)))
# SINGLET DISSOCIATION AT  8.865 EV     BEF SCALING F=.011877
  414 IF(EN <= (EIN(17))) GO TO 415
      QIN(17,I)=0.011877/(EIN(17)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(17)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(17)+E(3))
      IF(QIN(17,I):
 < 0.0) QIN(17,I)=0.0
      IF(EN <= (3.0*EIN(17):
)) GO TO 415
      PEQIN(17,I)=PEQEL(2,(I-IOFFN(17)))
# SINGLET DISSOCIATION AT  9.007 EV     BEF SCALING F=.020856
  415 IF(EN <= (EIN(18))) GO TO 416
      QIN(18,I)=0.020856/(EIN(18)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(18)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(18)+E(3))
      IF(QIN(18,I):
 < 0.0) QIN(18,I)=0.0
      IF(EN <= (3.0*EIN(18):
)) GO TO 416
      PEQIN(18,I)=PEQEL(2,(I-IOFFN(18)))
# SINGLET DISSOCIATION AT  9.149 EV     BEF SCALING F=.031444
  416 IF(EN <= (EIN(19))) GO TO 417
      QIN(19,I)=0.031444/(EIN(19)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(19)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(19)+E(3))
      IF(QIN(19,I):
 < 0.0) QIN(19,I)=0.0
      IF(EN <= (3.0*EIN(19):
)) GO TO 417
      PEQIN(19,I)=PEQEL(2,(I-IOFFN(19)))
# SINGLET DISSOCIATION AT  9.291 EV     BEF SCALING F=.039549
  417 IF(EN <= (EIN(21))) GO TO 418
      QIN(20,I)=0.039549/(EIN(20)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(20)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(20)+E(3))
      IF(QIN(20,I):
 < 0.0) QIN(20,I)=0.0
      IF(EN <= (3.0*EIN(20):
)) GO TO 418
      PEQIN(20,I)=PEQEL(2,(I-IOFFN(20)))
# SINGLET DISSOCIATION AT  9.433 EV     BEF SCALING F=.042350
  418 IF(EN <= (EIN(21))) GO TO 419
      QIN(21,I)=0.042350/(EIN(21)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(21)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(21)+E(3))
      IF(QIN(21,I):
 < 0.0) QIN(21,I)=0.0
      IF(EN <= (3.0*EIN(21):
)) GO TO 419
      PEQIN(21,I)=PEQEL(2,(I-IOFFN(21)))
# SINGLET DISSOCIATION AT  9.575 EV     BEF SCALING F=.041113
  419 IF(EN <= (EIN(22))) GO TO 420
      QIN(22,I)=0.041113/(EIN(22)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(22)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(22)+E(3))
      IF(QIN(22,I):
 < 0.0) QIN(22,I)=0.0
      IF(EN <= (3.0*EIN(22):
)) GO TO 420
      PEQIN(22,I)=PEQEL(2,(I-IOFFN(22)))
# SINGLET DISSOCIATION AT  9.717 EV     BEF SCALING F=.038256
  420 IF(EN <= (EIN(23))) GO TO 421
      QIN(23,I)=0.038256/(EIN(23)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(23)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(23)+E(3))
      IF(QIN(23,I):
 < 0.0) QIN(23,I)=0.0
      IF(EN <= (3.0*EIN(23):
)) GO TO 421
      PEQIN(23,I)=PEQEL(2,(I-IOFFN(23)))
# SINGLET DISSOCIATION AT  9.859 EV     BEF SCALING F=.036556
  421 IF(EN <= (EIN(24))) GO TO 422
      QIN(24,I)=0.036556/(EIN(24)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(24)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(24)+E(3))
      IF(QIN(24,I):
 < 0.0) QIN(24,I)=0.0
      IF(EN <= (3.0*EIN(24):
)) GO TO 422
      PEQIN(24,I)=PEQEL(2,(I-IOFFN(24)))
#
# THIRD TRIPLET AT 10.0 EV                                   
  422 IF(EN <= EIN(25)) GO TO 427
      IF(EN > XTR3(NTR3):
) GO TO 425  
      DO 423 J=2,NTR3                                                  
      IF(EN <= XTR3(J):
) GO TO 424                                      
  423 CONTINUE                                                          
      J=NTR3                                                           
  424 A=(YTR3(J)-YTR3(J-1))/(XTR3(J)-XTR3(J-1))                     
      B=(XTR3(J-1)*YTR3(J)-XTR3(J)*YTR3(J-1))/(XTR3(J-1)-XTR3(J)) 
      QIN(25,I)=(A*EN+B)*1.D-16
      GO TO 426
# SCALE BY 1/E**2 ABOVE XTR2(NTR2) EV
  425 QIN(25,I)=YTR3(NTR3)*(XTR3(NTR3)/EN)**2*1.D-16     
  426 IF(EN <= (3.0*EIN(25))) GO TO 427
      PEQIN(25,I)=PEQEL(2,(I-IOFFN(25)))
#
# SINGLET DISSOCIATION AT 10.115 EV     BEF SCALING F=.096232
  427 IF(EN <= (EIN(26))) GO TO 428
      QIN(26,I)=0.096232/(EIN(26)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(26)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(26)+E(3))
      IF(QIN(26,I):
 < 0.0) QIN(26,I)=0.0
      IF(EN <= (3.0*EIN(26):
)) GO TO 428
      PEQIN(26,I)=PEQEL(2,(I-IOFFN(26)))
# SINGLET DISSOCIATION AT 10.45  EV     BEF SCALING F=.083738
  428 IF(EN <= (EIN(27))) GO TO 429
      QIN(27,I)=0.083738/(EIN(27)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(27)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(27)+E(3))
      IF(QIN(27,I):
 < 0.0) QIN(27,I)=0.0
      IF(EN <= (3.0*EIN(27):
)) GO TO 429
      PEQIN(27,I)=PEQEL(2,(I-IOFFN(27)))
# SINGLET DISSOCIATION AT 10.672 EV     BEF SCALING F=.043456
  429 IF(EN <= (EIN(28))) GO TO 430
      QIN(28,I)=0.043456/(EIN(28)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(28)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(28)+E(3))
      IF(QIN(28,I):
 < 0.0) QIN(28,I)=0.0
      IF(EN <= (3.0*EIN(28):
)) GO TO 430
      PEQIN(28,I)=PEQEL(2,(I-IOFFN(28)))
# SINGLET DISSOCIATION AT 10.816 EV     BEF SCALING F=.047436
  430 IF(EN <= (EIN(29))) GO TO 431
      QIN(29,I)=0.047436/(EIN(29)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(29)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(29)+E(3))
      IF(QIN(29,I):
 < 0.0) QIN(29,I)=0.0
      IF(EN <= (3.0*EIN(29):
)) GO TO 431
      PEQIN(29,I)=PEQEL(2,(I-IOFFN(29)))
# SINGLET DISSOCIATION AT 10.960 EV     BEF SCALING F=.047800
  431 IF(EN <= (EIN(30))) GO TO 432
      QIN(30,I)=0.047800/(EIN(30)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(30)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(30)+E(3))
      IF(QIN(30,I):
 < 0.0) QIN(30,I)=0.0
      IF(EN <= (3.0*EIN(30):
)) GO TO 432
      PEQIN(30,I)=PEQEL(2,(I-IOFFN(30)))
# SINGLET DISSOCIATION AT 11.104 EV     BEF SCALING F=.048914
  432 IF(EN <= (EIN(31))) GO TO 433
      QIN(31,I)=0.048914/(EIN(31)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(31)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(31)+E(3))
      IF(QIN(31,I):
 < 0.0) QIN(31,I)=0.0
      IF(EN <= (3.0*EIN(31):
)) GO TO 433
      PEQIN(31,I)=PEQEL(2,(I-IOFFN(31)))
# SINGLET DISSOCIATION AT 11.248 EV     BEF SCALING F=.054353
  433 IF(EN <= (EIN(32))) GO TO 434
      QIN(32,I)=0.054353/(EIN(32)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(32)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(32)+E(3))
      IF(QIN(32,I):
 < 0.0) QIN(32,I)=0.0
      IF(EN <= (3.0*EIN(32):
)) GO TO 434
      PEQIN(32,I)=PEQEL(2,(I-IOFFN(32)))
# SINGLET DISSOCIATION AT 11.392 EV     BEF SCALING F=.061019
  434 IF(EN <= (EIN(33))) GO TO 435
      QIN(33,I)=0.061019/(EIN(33)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(33)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(33)+E(3))
      IF(QIN(33,I):
 < 0.0) QIN(33,I)=0.0
      IF(EN <= (3.0*EIN(33):
)) GO TO 435
      PEQIN(33,I)=PEQEL(2,(I-IOFFN(33)))
# SINGLET DISSOCIATION AT 11.732 EV     BEF SCALING F=.244430
  435 IF(EN <= (EIN(34))) GO TO 436
      QIN(34,I)=0.244430/(EIN(34)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(34)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(34)+E(3))
      IF(QIN(34,I):
 < 0.0) QIN(34,I)=0.0
      IF(EN <= (3.0*EIN(34):
)) GO TO 436
      PEQIN(34,I)=PEQEL(2,(I-IOFFN(34)))
# SINGLET DISSOCIATION AT 12.4   EV     BEF SCALING F=.284790
  436 IF(EN <= (EIN(35))) GO TO 437
      QIN(35,I)=0.284790/(EIN(35)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(35)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(35)+E(3))
      IF(QIN(35,I):
 < 0.0) QIN(35,I)=0.0
      IF(EN <= (2.0*EIN(35):
)) GO TO 437
      PEQIN(35,I)=PEQEL(2,(I-IOFFN(35)))
# SINGLET DISSOCIATION AT 13.0   EV     BEF SCALING F=.095973
  437 IF(EN <= (EIN(36))) GO TO 438
      QIN(36,I)=0.095973/(EIN(36)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(36)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(36)+E(3))
      IF(QIN(36,I):
 < 0.0) QIN(36,I)=0.0
      IF(EN <= (2.0*EIN(36):
)) GO TO 438
      PEQIN(36,I)=PEQEL(2,(I-IOFFN(36)))
# SINGLET DISSOCIATION AT 13.5   EV     BEF SCALING F=.090728
  438 IF(EN <= (EIN(37))) GO TO 439
      QIN(37,I)=0.090728/(EIN(37)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(37)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(37)+E(3))
      IF(QIN(37,I):
 < 0.0) QIN(37,I)=0.0
      IF(EN <= (2.0*EIN(37):
)) GO TO 439
      PEQIN(37,I)=PEQEL(2,(I-IOFFN(37)))
# SINGLET DISSOCIATION AT 14.1   EV     BEF SCALING F=.071357
  439 IF(EN <= (EIN(38))) GO TO 440
      QIN(38,I)=0.071357/(EIN(38)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(38)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(38)+E(3))
      IF(QIN(38,I):
 < 0.0) QIN(38,I)=0.0
      IF(EN <= (2.0*EIN(38):
)) GO TO 440
      PEQIN(38,I)=PEQEL(2,(I-IOFFN(38)))
# SINGLET DISSOCIATION AT 14.7   EV     BEF SCALING F=.074875
  440 IF(EN <= (EIN(39))) GO TO 441
      QIN(39,I)=0.074875/(EIN(39)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(39)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(39)+E(3))
      IF(QIN(39,I):
 < 0.0) QIN(39,I)=0.0
      IF(EN <= (2.0*EIN(39):
)) GO TO 441
      PEQIN(39,I)=PEQEL(2,(I-IOFFN(39)))
# SINGLET DISSOCIATION AT 15.3   EV     BEF SCALING F=.054542
  441 IF(EN <= (EIN(40))) GO TO 442
      QIN(40,I)=0.054542/(EIN(40)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(40)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(40)+E(3))
      IF(QIN(40,I):
 < 0.0) QIN(40,I)=0.0
      IF(EN <= (2.0*EIN(40):
)) GO TO 442
      PEQIN(40,I)=PEQEL(2,(I-IOFFN(40)))
# SINGLET DISSOCIATION AT 15.9   EV     BEF SCALING F=.022479
  442 IF(EN <= (EIN(41))) GO TO 443
      QIN(41,I)=0.022479/(EIN(41)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(41)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(41)+E(3))
      IF(QIN(41,I):
 < 0.0) QIN(41,I)=0.0
      IF(EN <= (2.0*EIN(41):
)) GO TO 443
      PEQIN(41,I)=PEQEL(2,(I-IOFFN(41)))
# SINGLET DISSOCIATION AT 16.5   EV     BEF SCALING F=.008585
  443 IF(EN <= (EIN(42))) GO TO 444
      QIN(42,I)=0.008585/(EIN(42)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(42)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(42)+E(3))
      IF(QIN(42,I):
 < 0.0) QIN(42,I)=0.0
      IF(EN <= (2.0*EIN(42):
)) GO TO 444
      PEQIN(42,I)=PEQEL(2,(I-IOFFN(42)))
# SINGLET DISSOCIATION AT 17.1   EV     BEF SCALING F=.004524
  444 IF(EN <= (EIN(43))) GO TO 445
      QIN(43,I)=0.004524/(EIN(43)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(43)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(43)+E(3))
      IF(QIN(43,I):
 < 0.0) QIN(43,I)=0.0
      IF(EN <= (2.0*EIN(43):
)) GO TO 445
      PEQIN(43,I)=PEQEL(2,(I-IOFFN(43)))
# SINGLET DISSOCIATION AT 17.7   EV     BEF SCALING F=.004982
  445 IF(EN <= (EIN(44))) GO TO 446
      QIN(44,I)=0.004982/(EIN(44)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(44)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(44)+E(3))
      IF(QIN(44,I):
 < 0.0) QIN(44,I)=0.0
      IF(EN <= (2.0*EIN(44):
)) GO TO 446
      PEQIN(44,I)=PEQEL(2,(I-IOFFN(44)))
# SINGLET DISSOCIATION AT 18.5   EV     BEF SCALING F=.010130
  446 IF(EN <= (EIN(45))) GO TO 447
      QIN(45,I)=0.010130/(EIN(45)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(45)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(45)+E(3))
      IF(QIN(45,I):
 < 0.0) QIN(45,I)=0.0
      IF(EN <= (2.0*EIN(45):
)) GO TO 447
      PEQIN(45,I)=PEQEL(2,(I-IOFFN(45)))
# SINGLET DISSOCIATION AT 19.5   EV     BEF SCALING F=.013320
  447 IF(EN <= (EIN(46))) GO TO 448
      QIN(46,I)=0.013320/(EIN(46)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(46)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(46)+E(3))
      IF(QIN(46,I):
 < 0.0) QIN(46,I)=0.0
      IF(EN <= (2.0*EIN(46):
)) GO TO 448
      PEQIN(46,I)=PEQEL(2,(I-IOFFN(46)))
# SINGLET DISSOCIATION AT 20.5   EV     BEF SCALING F=.013310
  448 IF(EN <= (EIN(47))) GO TO 449
      QIN(47,I)=0.013310/(EIN(47)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(47)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(47)+E(3))
      IF(QIN(47,I):
 < 0.0) QIN(47,I)=0.0
      IF(EN <= (2.0*EIN(47):
)) GO TO 449
      PEQIN(47,I)=PEQEL(2,(I-IOFFN(47)))
# SINGLET DISSOCIATION AT 21.5   EV     BEF SCALING F=.010760
  449 IF(EN <= (EIN(48))) GO TO 450
      QIN(48,I)=0.010760/(EIN(48)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(48)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(48)+E(3))
      IF(QIN(48,I):
 < 0.0) QIN(48,I)=0.0
      IF(EN <= (2.0*EIN(48):
)) GO TO 450
      PEQIN(48,I)=PEQEL(2,(I-IOFFN(48)))
# SINGLET DISSOCIATION AT 22.5   EV     BEF SCALING F=.009797
  450 IF(EN <= (EIN(49))) GO TO 451
      QIN(49,I)=0.009797/(EIN(49)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(49)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(49)+E(3))
      IF(QIN(49,I):
 < 0.0) QIN(49,I)=0.0
      IF(EN <= (2.0*EIN(49):
)) GO TO 451
      PEQIN(49,I)=PEQEL(2,(I-IOFFN(49)))
# SINGLET DISSOCIATION AT 23.5   EV     BEF SCALING F=.009198
  451 IF(EN <= (EIN(50))) GO TO 452
      QIN(50,I)=0.009198/(EIN(50)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(50)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(50)+E(3))
      IF(QIN(50,I):
 < 0.0) QIN(50,I)=0.0
      IF(EN <= (2.0*EIN(50):
)) GO TO 452
      PEQIN(50,I)=PEQEL(2,(I-IOFFN(50)))
# SINGLET DISSOCIATION AT 24.5   EV     BEF SCALING F=.008312
  452 IF(EN <= (EIN(51))) GO TO 453
      QIN(51,I)=0.008312/(EIN(51)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(51)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(51)+E(3))
      IF(QIN(51,I):
 < 0.0) QIN(51,I)=0.0
      IF(EN <= (2.0*EIN(51):
)) GO TO 453
      PEQIN(51,I)=PEQEL(2,(I-IOFFN(51)))
# SINGLET DISSOCIATION AT 25.5   EV     BEF SCALING F=.007139
  453 IF(EN <= (EIN(52))) GO TO 454
      QIN(52,I)=0.007139/(EIN(52)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(52)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(52)+E(3))
      IF(QIN(52,I):
 < 0.0) QIN(52,I)=0.0
      IF(EN <= (2.0*EIN(52):
)) GO TO 454
      PEQIN(52,I)=PEQEL(2,(I-IOFFN(52)))
# SINGLET DISSOCIATION AT 26.5   EV     BEF SCALING F=.004715
  454 IF(EN <= (EIN(53))) GO TO 455
      QIN(53,I)=0.004715/(EIN(53)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(53)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(53)+E(3))
      IF(QIN(53,I):
 < 0.0) QIN(53,I)=0.0
      IF(EN <= (2.0*EIN(53):
)) GO TO 455
      PEQIN(53,I)=PEQEL(2,(I-IOFFN(53)))
# SINGLET DISSOCIATION AT 27.5   EV     BEF SCALING F=.002137
  455 IF(EN <= (EIN(54))) GO TO 456
      QIN(54,I)=0.002137/(EIN(54)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(54)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(54)+E(3))
      IF(QIN(54,I):
 < 0.0) QIN(54,I)=0.0
      IF(EN <= (2.0*EIN(54):
)) GO TO 456
      PEQIN(54,I)=PEQEL(2,(I-IOFFN(54)))
# SINGLET DISSOCIATION AT 28.5   EV     BEF SCALING F=.000662
  456 IF(EN <= (EIN(55))) GO TO 457
      QIN(55,I)=0.000662/(EIN(55)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(55)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(55)+E(3))
      IF(QIN(55,I):
 < 0.0) QIN(55,I)=0.0
      IF(EN <= (2.0*EIN(55):
)) GO TO 457
      PEQIN(55,I)=PEQEL(2,(I-IOFFN(55)))
  457 CONTINUE
# LOAD BREMSSTRAHLUNG X-SECTION
      QIN(56,I)=0.0
      QIN(57,I)=0.0
      IF(EN <= 1000.):
 GO TO 800
      DO 780 J=2,NBRM
      IF(EN <= EBRM(J):
) GO TO 790
  780 CONTINUE
      J=NBREM
  790 A=(math.log(Z6T(J))-math.log(Z6T(J-1)))/(EBRM(J)-EBRM(J-1))
      B=(math.log(Z6T(J))*EBRM(J-1)-math.log(Z6T(J-1))*EBRM(J))/
     /(EBRM(J-1)-EBRM(J))
      A1=(math.log(Z1T(J))-math.log(Z1T(J-1)))/(EBRM(J)-EBRM(J-1))
      B1=(math.log(Z1T(J))*EBRM(J-1)-math.log(Z1T(J-1))*EBRM(J))/
     /(EBRM(J-1)-EBRM(J))
      QIN(56,I)=math.exp(A*EN+B)*2.D-24
      QIN(57,I)=math.exp(A1*EN+B1)*6.D-24
  800 CONTINUE
#
#  LOAD NULL COLLISIONS
#
# WINTERS DISSOCIATION X-SECTION       REDUCED BY * 0.9
c WINTERS  CHEM.PHYS. 36(1979)353
      QNULL(1,I)=0.0
      IF(EN <= XNUL1(1):
) GO TO 805
      IF(EN > XNUL1(NUL1):
) GO TO 803
      DO 801 J=2,NUL1
      IF(EN <= XNUL1(J):
) GO TO 802
  801 CONTINUE
      J=NUL1
  802 A=(YNUL1(J)-YNUL1(J-1))/(XNUL1(J)-XNUL1(J-1))
      B=(XNUL1(J-1)*YNUL1(J)-XNUL1(J)*YNUL1(J-1))/(XNUL1(J-1)-XNUL1(J))
      QNULL(1,I)=(A*EN+B)*1.D-16*0.9*SCLN(1)    
      GO TO 805
# SCALE BY 1/E ABOVE XNUL1(NUL1)) EV
  803 QNULL(1,I)=YNUL1(NUL1)*(XNUL1(NUL1)/EN)*1.D-16*0.9*SCLN(1)    
#
# LIGHT EMISSION FROM H ALPHA   
#  MOHLMANN AND DE HEER  CHEM.PHYS.19(1979)233 
#  
  805 QNULL(2,I)=0.0
      IF(EN <= XNUL2(1):
) GO TO 810
      IF(EN > XNUL2(NUL2):
) GO TO 808
      DO 806 J=2,NUL2
      IF(EN <= XNUL2(J):
) GO TO 807
  806 CONTINUE
      J=NUL2
  807 A=(YNUL2(J)-YNUL2(J-1))/(XNUL2(J)-XNUL2(J-1))
      B=(XNUL2(J-1)*YNUL2(J)-XNUL2(J)*YNUL2(J-1))/(XNUL2(J-1)-XNUL2(J))
      QNULL(2,I)=(A*EN+B)*1.D-16*SCLN(2)
      GO TO 810
# SCALE BY 1/E ABOVE XNUL2(NUL2)) EV
  808 QNULL(2,I)=YNUL2(NUL2)*(XNUL2(NUL2)/EN)*1.D-16*SCLN(2)  
#  
# LIGHT EMISSION FROM CH2(A2DELTA - X2PI)
#  MOHLMANN AND DE HEER  CHEM.PHYS.19(1979)233 
#  
  810 QNULL(3,I)=0.0
      IF(EN <= XNUL3(1):
) GO TO 815
      IF(EN > XNUL3(NUL3):
) GO TO 813
      DO 811 J=2,NUL3
      IF(EN <= XNUL3(J):
) GO TO 812
  811 CONTINUE
      J=NUL3
  812 A=(YNUL3(J)-YNUL3(J-1))/(XNUL3(J)-XNUL3(J-1))
      B=(XNUL3(J-1)*YNUL3(J)-XNUL3(J)*YNUL3(J-1))/(XNUL3(J-1)-XNUL3(J))
      QNULL(3,I)=(A*EN+B)*1.D-16*SCLN(3)
      GO TO 815
# SCALE BY 1/E ABOVE XNUL3(NUL3)) EV
  813 QNULL(3,I)=YNUL3(NUL3)*(XNUL3(NUL3)/EN)*1.D-16*SCLN(3)    
#
  815 CONTINUE
      SUMEXC=0.0
      DO 850 J=1,NIN
  850 SUMEXC=SUMEXC+QIN(J,I)
      SUMION=0.0
      DO 851 J=1,NION
  851 SUMION=SUMION+QION(J,I)
      SUMATT=0.0
      DO 852 J=1,NATT
  852 SUMATT=SUMATT+QATT(J,I)
      SUMINEL=SUMEXC+SUMION+SUMATT
#     WRITE(6,888) EN,SUMEXC,SUMION,SUMINEL
# 888 FORMAT(' EN=',D12.3,' SUMEXC=',D12.3,' SUMION=',D12.3,'SUMINEL=',
#    /D12.3)
      SUMEXCH=0.0
      DO 854 J=11,55
  854 SUMEXCH=SUMEXCH+QIN(J,I)
      SUMTRP=QIN(11,I)+QIN(13,I)+QIN(25,I)
      SUMSNG=SUMEXCH-SUMTRP
#     WRITE(6,889) EN,SUMTRP,SUMSNG,SUMEXCH
# 889 FORMAT(' EN=',D12.4,' SUMTRIPLETS=',D12.3,' SUMSINGLETS=',D12.3,'
#    / TOTAL=',D12.3)
 1000 CONTINUE                                                          
#  SAVE COMPUTE TIME 
      DO 1010 K=1,NIN
      IF(EFINAL <= EIN(K):
) :
       NIN=K-1
       GO TO 1011
      # endIF
 1010 CONTINUE
 1011 CONTINUE
#     IF(EFINAL > 1000.) NIN=57
#                                      
      RETURN  
      # end
      def GAS10(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
#    /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,
#    /ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(4000),EROOT(4000),QT1(4000),QT2(4000),
     /QT3(4000),QT4(4000)
      COMMON/DENS/DEN(4000)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)       
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]  
#
      DIMENSION XEN(166),YMT(166),YEL(166),YEPS(166),
     /XION(45),YIONG(45),YIONC(45),
     /XION1(45),YION1(45),XION2(45),YION2(45),XION3(45),YION3(45),
     /XION4(45),YION4(45),XION5(45),YION5(45),XION6(44),YION6(44),
     /XION7(44),YION7(44),XION8(44),YION8(44),XION9(44),YION9(44),
     /XION10(44),YION10(44),XION11(43),YION11(43),XION12(41),YION12(41),
     /XION13(41),YION13(41),XION14(40),YION14(40),XION15(39),YION15(39),
     /XION16(39),YION16(39),XION17(39),YION17(39),XION18(38),YION18(38),
     /XION19(39),YION19(39),XION20(38),YION20(38),XION21(36),YION21(36),
     /XION22(36),YION22(36),XION23(36),YION23(36),XION24(83),YION24(83),
     /XATT1(9),YATT1(9),XATT2(9),YATT2(9),  
     /XVIB1(25),YVIB1(25),XVIB2(24),YVIB2(24),XVIB3(25),YVIB3(25),      
     /XVIB4(17),YVIB4(17),XTR1(14),YTR1(14),XTR2(11),YTR2(11),
     /XTR3(11),YTR3(11),XTR4(11),YTR4(11),IOFFION(24),IOFFN(250)
      DIMENSION XNUL1(14),YNUL1(14),XNUL2(14),YNUL2(14)
      DIMENSION Z1T(25),Z6T(25),EBRM(25)
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME                                                 
      DATA XEN/0.00,0.001,0.002,0.003,0.004,0.005,0.007,0.01,0.014,0.02,
     /0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.10,0.11,0.12,                
     /0.13,0.14,0.16,0.18,0.20,0.22,0.24,0.27,0.30,0.35,
     /0.40,0.50,0.60,0.80,1.00,1.40,2.00,2.50,3.00,3.50,
     /4.00,5.00,6.00,7.00,7.50,8.50,10.0,12.5,15.0,17.5,
     /20.0,25.0,30.0,35.0,40.0,50.0,60.0,70.0,80.0,90.0,
     /100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,
     /500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,
     /2500.,3000.,3500.,4000.,4500.,5000.,6000.,7000.,8000.,9000.,
     /1.0D4,1.25D4,1.5D4,1.75D4,2.0D4,2.5D4,3.0D4,3.5D4,4.0D4,4.5D4,
     /5.0D4,6.0D4,7.0D4,8.0D4,9.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,
     /2.5D5,3.0D5,3.5D5,4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,
     /1.0D6,1.25D6,1.5D6,1.75D6,2.0D6,2.5D6,3.0D6,3.5D6,4.0D6,4.5D6,
     /5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,
     /2.5D7,3.0D7,3.5D7,4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,
     /1.0D8,1.25D8,1.5D8,1.75D8,2.0D8,2.5D8,3.0D8,3.5D8,4.0D8,4.5D8,
     /5.0D8,6.0D8,7.0D8,8.0D8,9.0D8,1.0D9/
# ELASTIC MT : ABOVE 250EV FROM THEORY
#              BELOW 250EV FIT TO TRANSPORT DATA
      DATA YMT/50.9,50.9,42.6,37.0,33.3,29.6,25.5,20.8,18.0,15.3,
     /13.1,11.6,10.4,9.08,7.79,6.36,5.03,3.61,2.85,2.52,
     /2.47,2.47,2.75,3.23,3.94,4.80,5.40,6.45,7.35,8.35,
     /9.07,10.05,10.9,11.8,12.3,12.8,13.6,14.4,15.7,17.5,
     /19.5,23.3,27.2,29.0,29.0,28.0,25.5,21.5,18.5,17.0,
     /15.5,12.8,11.0,9.50,8.40,6.90,5.80,5.00,4.40,4.00,
     /3.60,2.85,2.27,1.85,1.59,1.22,.921,.725,.587,.486,
     /.410,.304,.236,.188,.154,.129,.0878,.0639,.0488,.0386,
     /.0260,.0188,.0143,.0112,9.08D-3,7.51D-3,5.41D-3,4.09D-3,3.21D-3,
     /2.59D-3,
     /2.14D-3,1.43D-3,1.03D-3,7.76D-4,6.08D-4,4.06D-4,2.92D-4,2.21D-4,
     /1.74D-4,1.41D-4,
     /1.17D-4,8.42D-5,6.41D-5,5.06D-5,4.12D-5,3.43D-5,2.33D-5,1.71D-5,
     /1.32D-5,1.06D-5,
     /7.32D-6,5.45D-6,4.26D-6,3.46D-6,2.87D-6,2.44D-6,1.84D-6,1.45D-6,
     /1.19D-6,9.91D-7,
     /8.44D-7,6.04D-7,4.55D-7,3.58D-7,2.90D-7,2.03D-7,1.51D-7,1.17D-7,
     /9.36D-8,7.68D-8,
     /6.42D-8,4.70D-8,3.60D-8,2.85D-8,2.31D-8,1.92D-8,1.29D-8,9.27D-9,
     /7.01D-9,5.49D-9,
     /3.64D-9,2.60D-9,1.95D-9,1.52D-9,1.22D-9,9.98D-10,7.06D-10,
     /5.25D-10,4.06D-10,3.23D-10,
     /2.63D-10,1.70D-10,1.19D-10,8.76D-11,6.72D-11,4.31D-11,3.00D-11,
     /2.20D-11,1.69D-11,1.33D-11,
     /1.08D-11,7.51D-12,5.52D-12,4.23D-12,3.34D-12,2.71D-12/
# ELASTIC: ABOVE 150EV FROM THEORY 
#            BETWEEN 0.5 AND 150 EV FROM CONSISTENCY IN TOTAL X-SECTION
#           BELOW 0.5EV SIMILAR TO MERZ AND  LINDER
      DATA YEL/50.9,50.9,42.6,37.0,33.0,29.6,25.5,20.8,18.4,16.4,
     /14.2,12.6,11.4,10.5,9.70,9.00,8.30,7.70,7.10,6.60,
     /6.20,5.80,5.50,6.15,6.85,7.60,8.20,9.00,9.70,10.5,
     /11.3,12.1,12.7,13.1,14.1,15.5,17.4,18.7,20.5,22.0,
     /24.6,30.8,37.7,41.2,42.9,44.6,42.8,38.5,35.8,33.4,
     /31.3,27.5,24.7,22.8,21.3,19.1,17.2,15.5,14.0,13.0,
     /11.9,9.90,8.50,7.57,6.86,5.80,5.05,4.48,4.03,3.67,
     /3.37,2.90,2.55,2.27,2.05,1.87,1.53,1.30,1.12,.993,
     /.805,.677,.585,.515,.460,.416,.349,.301,.264,.236,
     /.213,.172,.145,.125,.110,.0896,.0758,.0659,.0585,.0527,
     /.0480,.0411,.0362,.0334,.0296,.0273,.0231,.0204,.0184,.0169,
     /.0149,.0136,.0127,.0120,.0114,.0110,.0104,.00997,.00970,.00944,
     /.00926,.00895,.00877,.00864,.00855,.00844,.00838,.00833,.00831,
     /.00829,
     /.00827,.00825,.00824,.00823,.00822,.00822,.00821,.00821,.00821,
     /.00820,
     /.00820,.00820,.00820,23*0.00820/
      DATA YEPS/1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,.96740,.89959,
     /.88412,.88129,.86888,.79880,.70972,.57649,.44800,.29459,.22957,
     /.21203,
     /.22682,.25233,.32703,.35433,.41118,.47945,.51353,.58989,.64598,
     /.69856,
     /.70909,.74912,.78931,.85180,.80991,.74224,.67932,.66312,.65727,
     /.69887,
     /.69494,.66427,.59639,.57278,.53606,.47475,.43564,.39174,.34508,
     /.33665,
     /.32195,.29117,.27113,.24366,.22319,.19428,.17440,.16276,.15632,
     /.15128,
     /.14738,.13657,.12181,.10656,.09845,.08527,.06923,.05829,.05019,
     /.04390,
     /.039014,.031780,.026828,.023104,.020285,.018120,.014236,.011650,
     /9.981D-3,8.631D-3,
     /6.832D-3,5.656D-3,4.828D-3,4.180D-3,3.711D-3,3.327D-3,2.765D-3,
     /2.358D-3,2.063D-3,1.824D-3,
     /1.642D-3,1.311D-3,1.089D-3,9.288D-4,8.106D-4,6.428D-4,5.323D-4,
     /4.534D-4,3.948D-4,3.495D-4,
     /3.140D-4,2.573D-4,2.179D-4,1.824D-4,1.657D-4,1.475D-4,1.151D-4,
     /9.342D-5,7.843D-5,6.746D-5,
     /5.133D-5,4.090D-5,3.356D-5,2.837D-5,2.439D-5,2.122D-5,1.653D-5,
     /1.332D-5,1.105D-5,9.308D-6,
     /7.972D-6,5.738D-6,4.306D-6,3.371D-6,2.711D-6,1.867D-6,1.365D-6,
     /1.043D-6,8.219D-7,6.658D-7,
     /5.504D-7,3.946D-7,2.968D-7,2.313D-7,1.849D-7,1.517D-7,9.933D-8,
     /6.983D-8,5.185D-8,4.003D-8,
     /2.586D-8,1.810D-8,1.334D-8,1.025D-8,8.120D-9,6.566D-9,4.555D-9,
     /3.332D-9,2.541D-9,1.997D-9,
     /1.608D-9,1.016D-9,6.98D-10,5.06D-10,3.83D-10,2.40D-10,1.64D-10,
     /1.19D-10,9.0D-11,7.0D-11,
     /5.6D-11,3.8D-11,2.8D-11,2.1D-11,1.6D-11,1.3D-11/
# GROSS IONISATION X-SECTION AVERAGE OF 1) WANG AND VIDAL 
#  And 2) TAWARA AND NISHIMURA
# ABOVE 2KEV USE SCHRAM NORMALISED TO 2KEV DATA POINT OF TAWARA
# ABOVE 10KEV USE UPDATED FIT TO RIEKE AND PREPJCHAL WITH CORRECTED
# IONISATION OSCILLATOR STRENGTH
#  
      DATA XION/11.12,12.0,15.0,17.5,20.0,25.0,30.0,35.0,40.0,45.0,
     /50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,
     /250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,
     /1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,
     /6000.,7000.,8000.,9000.,10000./
# GROSS IONISATION
      DATA YIONG/0.00,.206,1.14,2.30,3.31,5.21,6.47,7.37,8.00,8.54,
     /9.22,9.79,10.09,10.20,10.24,10.23,9.90,9.36,8.84,8.35,
     /7.80,6.84,6.25,5.78,5.26,4.93,4.33,3.99,3.67,3.27,
     /3.05,2.64,2.27,2.06,1.88,1.57,1.35,1.19,1.06,.887,
     /.764,.673,.603,.548,.5024/
# COUNTING IONISATION
      DATA YIONC/0.00,.206,1.14,2.30,3.31,5.21,6.47,7.32,7.81,8.00,
     /8.43,8.83,9.019,9.118,9.154,9.145,8.85,8.37,7.90,7.46,
     /6.97,6.11,5.59,5.17,4.70,4.41,3.87,3.57,3.28,2.92,
     /2.73,2.36,2.03,1.84,1.68,1.40,1.21,1.06,.952,.793,
     /.683,.602,.539,.490,.4491/
# BREAKUP CHANNELS FROM SCALED WANG AND VIDAL CORRECTED FOR DISSOCIATION
# FROM ++ STATES
#
#  C3H8+
      DATA XION1/11.11,12.0,15.0,17.5,20.0,25.0,30.0,35.0,40.0,45.0,
     /50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,
     /250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,
     /1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,
     /6000.,7000.,8000.,9000.,10000./
      DATA YION1/0.00,.055,.213,.337,.456,.722,.854,.877,.960,.920,
     /.931,.964,.936,.945,.949,.948,.917,.867,.819,.773,
     /.722,.634,.579,.535,.487,.457,.401,.370,.340,.303,
     /.282,.245,.210,.191,.174,.145,.125,.110,.0987,.0822,
     /.0708,.0624,.0559,.0508,.0465/
#  C3H7+
      DATA XION2/11.55,12.0,15.0,17.5,20.0,25.0,30.0,35.0,40.0,45.0,
     /50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,
     /250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,
     /1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,
     /6000.,7000.,8000.,9000.,10000./
      DATA YION2/0.00,.020,.126,.219,.295,.468,.579,.634,.649,.634,
     /.646,.662,.666,.673,.675,.675,.653,.617,.583,.551,
     /.514,.451,.412,.381,.347,.325,.286,.263,.242,.216,
     /.201,.174,.150,.136,.124,.103,.0893,.0782,.0702,.0585,
     /.0504,.0444,.0398,.0361,.0331/
#  C3H6+ 
      DATA XION3/11.75,12.0,15.0,17.5,20.0,25.0,30.0,35.0,40.0,45.0,
     /50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,
     /250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,
     /1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,
     /6000.,7000.,8000.,9000.,10000./
      DATA YION3/0.00,.003,.031,.051,.071,.113,.140,.153,.157,.153,
     /.156,.160,.161,.162,.163,.163,.157,.149,.140,.133,
     /.124,.109,.0993,.0919,.0836,.0784,.0688,.0634,.0583,.0520,
     /.0485,.0420,.0361,.0327,.0299,.0249,.0215,.0188,.0169,.0141,
     /.0121,.0107,.00958,.00871,.00798/
#  C2H4+
      DATA XION4/11.75,12.0,15.0,17.5,20.0,25.0,30.0,35.0,40.0,45.0,
     /50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,
     /250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,
     /1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,
     /6000.,7000.,8000.,9000.,10000./
      DATA YION4/0.00,.027,.257,.444,.604,.957,1.188,1.298,1.330,1.300,
     /1.324,1.356,1.366,1.379,1.385,1.383,1.339,1.266,1.195,1.129,
     /1.055,.9248,.8451,.7816,.7112,.6666,.5855,.5396,.4963,.4421,
     /.4123,.3570,.3069,.2785,.2543,.2118,.1830,.1603,.1440,.1200,
     /.1033,.0911,.0815,.0741,.0679/
#  C2H5+
      DATA XION5/11.91,12.0,15.0,17.5,20.0,25.0,30.0,35.0,40.0,45.0,
     /50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,
     /250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,
     /1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,
     /6000.,7000.,8000.,9000.,10000./
      DATA YION5/0.00,.016,.394,.684,.954,1.512,1.877,2.050,2.100,2.053,
     /2.091,2.141,2.156,2.178,2.186,2.184,2.114,1.998,1.887,1.783,
     /1.665,1.460,1.334,1.234,1.123,1.053,.9245,.8519,.7836,.6981,
     /.6511,.5637,.4846,.4397,.4015,.3344,.2890,.2532,.2274,.1894,
     /.1631,.1438,.1287,.1170,.1073/
#  C3H5+
      DATA XION6/13.48,15.0,17.5,20.0,25.0,30.0,35.0,40.0,45.0,50.0,
     /60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,
     /300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,
     /1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,
     /7000.,8000.,9000.,10000./
      DATA YION6/0.00,.044,.107,.163,.259,.321,.351,.359,.351,.358,
     /.366,.369,.373,.374,.374,.362,.342,.323,.305,.285,
     /.250,.228,.211,.192,.180,.158,.146,.134,.119,.111,
     /.0964,.0829,.0752,.0687,.0572,.0494,.0433,.0389,.0324,.0279,
     /.0246,.0220,.0200,.0184/
#  CH3+ 
      DATA XION7/13.65,15.0,17.5,20.0,25.0,30.0,35.0,40.0,45.0,50.0,
     /60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,
     /300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,
     /1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,
     /7000.,8000.,9000.,10000./
      DATA YION7/0.00,.019,.049,.078,.123,.153,.167,.171,.167,.170,
     /.174,.175,.177,.177,.177,.171,.162,.153,.145,.135,
     /.118,.108,.100,.0911,.0854,.0750,.0691,.0636,.0566,.0528,
     /.0457,.0393,.0357,.0326,.0271,.0234,.0205,.0184,.0154,.0132,
     /.0117,.0104,.00949,.00870/
     /
#  C3H4+
      DATA XION8/13.79,15.0,17.5,20.0,25.0,30.0,35.0,40.0,45.0,50.0,
     /60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,
     /300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,
     /1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,
     /7000.,8000.,9000.,10000./
      DATA YION8/0.00,.0061,.0171,.0270,.0406,.0525,.0670,.0672,.0674,
     /.0686,
     /.0702,.0708,.0715,.0718,.0717,.0694,.0656,.0620,.0585,.0547,
     /.0479,.0438,.0405,.0369,.0346,.0304,.0280,.0257,.0229,.0214,
     /.0185,.0159,.0144,.0132,.0110,.00949,.00831,.00747,.00622,.00536,
     /.00472,.00423,.00384,.00352/
#  C2H2+
      DATA XION9/14.1,15.0,17.5,20.0,25.0,30.0,35.0,40.0,45.0,50.0,
     /60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,
     /300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,
     /1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,
     /7000.,8000.,9000.,10000./
      DATA YION9/0.00,.013,.047,.078,.117,.151,.193,.223,.223,.226,
     /.234,.229,.231,.232,.232,.224,.212,.200,.189,.177,
     /.155,.142,.131,.119,.112,.0981,.0904,.0832,.0741,.0691,
     /.0598,.0514,.0467,.0426,.0355,.0307,.0269,.0241,.0201,.173,
     /.0153,.0137,.0124,.0114/
#  C2H3+
      DATA XION10/14.5,15.0,17.5,20.0,25.0,30.0,35.0,40.0,45.0,50.0,
     /60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,
     /300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,
     /1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,
     /7000.,8000.,9000.,10000./
      DATA YION10/0.00,.038,.219,.387,.582,.742,.964,.987,.965,.983,
     /1.006,1.013,1.024,1.028,1.027,.9934,.9392,.8870,.8379,.7826,
     /.6863,.6272,.5800,.5278,.4947,.4345,.4004,.3683,.3281,.3060,
     /.2649,.2278,.2067,.1887,.1572,.1358,.1190,.1069,.0890,.0767,
     /.0676,.0605,.0550,.0504/
#  C3H3+
      DATA XION11/16.5,17.5,20.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,
     /70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,300.,
     /350.,400.,450.,500.,600.,700.,800.,900.,1000.,1250.,
     /1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,7000.,
     /8000.,9000.,10000./
      DATA YION11/0.00,.125,.197,.312,.387,.423,.434,.424,.432,.442,
     /.446,.450,.452,.451,.437,.413,.390,.368,.344,.302,
     /.276,.255,.232,.218,.191,.176,.162,.144,.135,.116,
     /.1001,.0909,.0830,.0691,.0597,.0523,.0470,.0391,.0337,.0297,
     /.0266,.0242,.0222/
#  H+
      DATA XION12/20.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,
     /90.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,
     /450.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,
     /2000.,2500.,3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,
     /10000./
      DATA YION12/0.00,.00175,.00656,.00845,.00879,.00016,.00016,.00016,
     /.0093,.0172,
     /.0173,.0173,.0167,.0158,.0149,.0141,.0131,.0115,.0105,.00973,
     /.00886,.00830,.00729,.00672,.00618,.00551,.00514,.00445,.00382,
     /.00347,
     /.00317,.00264,.00228,.00200,.00179,.00149,.00129,.00113,.00102,
     /.000923,.000846/
#  H2+ AND H3+
      DATA XION13/21.5,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,
     /90.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,
     /450.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,
     /2000.,2500.,3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,
     /10000./
      DATA YION13/0.00,.00070,.00246,.00455,.00527,.00685,.00710,.00784,
     /.00916,.00925,
     /.00929,.00928,.00898,.00849,.00802,.00758,.00708,.00621,.00567,
     /.00524,
     /.00477,.00447,.00393,.00362,.00333,.00297,.00277,.00240,.00206,
     /.00187,
     /.00171,.00142,.00123,.00108,.000966,.000805,.000693,.000611,
     /.000547,.000497,
     /.000456/
#  CH2+
      DATA XION14/25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,
     /100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,
     /500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,
     /2500.,3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,10000./
      DATA YION14/0.00,.0146,.0262,.0409,.0385,.0475,.0527,.0573,.0578,
     /.0581,
     /.0580,.0561,.0531,.0501,.0473,.0442,.0388,.0354,.0328,.0298,
     /.0279,.0245,.0226,.0208,.0185,.0173,.0150,.0129,.0117,.0107,
     /.00888,.00767,.00672,.00604,.00503,.00433,.00382,.00342,.00311,
     /.00285/
#  C3H2+
      DATA XION15/26.5,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,
     /125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,
     /600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,
     /3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,10000./
      DATA YION15/0.00,.032,.067,.088,.113,.116,.121,.128,.123,.123,
     /.119,.112,.106,.100,.0934,.0819,.0749,.0692,.0630,.0591,
     /.0519,.0478,.0440,.0392,.0365,.0316,.0272,.0247,.0225,.0188,
     /.0162,.0142,.0128,.0106,.00915,.00807,.00722,.00657,.00602/
#  C3H+
      DATA XION16/29.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,
     /125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,
     /600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,
     /3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,10000./
      DATA YION16/0.00,.0196,.0412,.0539,.0694,.0724,.0744,.0751,.0754,
     /.0754,
     /.0729,.0689,.0651,.0615,.0574,.0504,.0460,.0426,.0387,.0363,
     /.0319,.0294,.0270,.0241,.0225,.0194,.0167,.0152,.0139,.0115,
     /.00997,.00873,.00784,.00653,.00563,.00496,.00444,.00404,.00370/
#  C2H+
      DATA XION17/30.4,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,
     /125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,
     /600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,
     /3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,10000./
      DATA YION17/0.00,.0048,.0121,.0131,.0169,.0176,.0181,.0183,.0183,
     /.0183,
     /.0177,.0168,.0158,.0150,.0140,.0123,.0112,.0104,.00942,.00883,
     /.00776,.00715,.00658,.00586,.00546,.00473,.00407,.00369,.00337,
     /.00281,
     /.00242,.00212,.00191,.00159,.00137,.00121,.00108,.000982,.000900/
# ALL STABLE  ++ STATES
      DATA XION18/32.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,
     /150.,175.,200.,250.,300.,350.,400.,450.,500.,600.,
     /700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,
     /3500.,4000.,5000.,6000.,7000.,8000.,9000.,10000./
      DATA YION18/0.00,.0062,.0178,.0262,.0321,.0369,.0372,.0374,.0374,
     /.0362,
     /.0342,.0323,.0305,.0285,.0250,.0228,.0211,.0192,.0180,.0158,
     /.0146,.0134,.0119,.0111,.00964,.00829,.00752,.00687,.00572,.00494,
     /.00433,.00389,.00324,.00279,.00246,.00220,.00200,.00183/
#  ALL DISSOCIATING ++ STATES
      DATA XION19/32.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,
     /125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,
     /600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,
     /3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,10000./
      DATA YION19/0.00,.0460,.1797,.5189,.7608,.9316,1.0718,1.0824,
     /1.0867,1.0856,
     /1.0506,.9933,.9381,.8861,.8277,.7258,.6633,.6134,.5582,.5232,
     /.4595,.4235,.3895,.3470,.3236,.2802,.2409,.2186,.1996,.1662,
     /.1436,.1258,.1130,.0941,.0811,.0715,.0640,.0582,.0533/
#  CH+
      DATA XION20/36.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,
     /150.,175.,200.,250.,300.,350.,400.,450.,500.,600.,
     /700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,
     /3500.,4000.,5000.,6000.,7000.,8000.,9000.,10000./
      DATA YION20/0.00,.0040,.0077,.0106,.0145,.0187,.0189,.0189,.0189,
     /.0183,
     /.0173,.0164,.0155,.0144,.0127,.0116,.0107,.00973,.00912,.00801,
     /.00738,.00679,.00605,.00564,.00489,.00420,.00381,.00348,.00290,
     /.00250,
     /.00219,.00197,.00164,.00141,.00125,.00112,.00101,.000930/
#  C+
      DATA XION21/39.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,
     /200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,
     /900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,
     /5000.,6000.,7000.,8000.,9000.,10000./
      DATA YION21/0.00,.00080,.00388,.00756,.00763,.00766,.00765,.00741,
     /.00700,.00661,
     /.00625,.00584,.00512,.00468,.00432,.00394,.00369,.00324,.00299,
     /.00275,
     /.00245,.00228,.00198,.00170,.00154,.00141,.00117,.00101,.000887,
     /.000797,
     /.000664,.000572,.000504,.000451,.000410,.000376/
#  C2+
      DATA XION22/39.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,
     /200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,
     /900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,
     /5000.,6000.,7000.,8000.,9000.,10000./
      DATA YION22/0.00,.000054,.000264,.000515,.000520,.000522,.000521,
     /.000504,.000477,.000450,
     /.000425,.000397,.000348,.000318,.000295,.000268,.000251,.000221,
     /.000203,.000187,
     /.000167,.000155,.000135,.000116,.000105,.000096,.000080,.000069,
     /.000060,.000054,
     /.000045,.000039,.000034,.000031,.000028,.0000256/
#  C3+ 
      DATA XION23/39.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,
     /200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,
     /900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,
     /5000.,6000.,7000.,8000.,9000.,10000./
      DATA YION23/0.00,.00099,.00481,.00934,.00943,.00947,.00946,.00915,
     /.00865,.00817,
     /.00772,.00721,.00632,.00578,.00534,.00486,.00456,.00400,.00369,
     /.00339,
     /.00302,.00282,.00244,.00210,.00190,.00174,.00145,.00125,.00110,
     /.00098,
     /.00082,.00071,.00062,.00056,.00051,.000464/
# K-SHELL IONISATION X-SECTION CARBON (SCALED BY 3 IN def) 
      DATA XION24/285.,298.,307.,316.,325.,335.,345.,365.,398.,422.,
     /447.,473.,501.,531.,613.,668.,708.,750.,817.,917.,
     /1000.,1122.,1296.,1496.,1679.,1884.,2054.,2238.,2512.,2985.,
     /3981.,5012.,7079.,1.0D4,1.50D4,2.05D4,2.51D4,3.07D4,4.10D4,5.01D4,
     /6.13D4,7.08D4,8.18D4,1.0D5,1.54D5,2.05D5,2.99D5,4.10D5,5.01D5,
     /6.13D5,
     /7.08D5,8.18D5,1.0D6,1.26D6,1.5D6,2.05D6,3.07D6,4.10D6,5.01D6,
     /6.13D6,
     /7.08D6,8.18D6,1.0D7,1.26D7,1.5D7,2.05D7,3.07D7,4.10D7,5.01D7,
     /6.13D7,
     /7.08D7,8.18D7,1.0D8,1.26D8,1.5D8,2.05D8,3.07D8,4.10D8,5.01D8,
     /6.13D8,
     /7.08D8,8.18D8,1.0D9/
      DATA YION24/0.00,1.66D-4,3.48D-4,5.25D-4,6.96D-4,8.63D-4,1.02D-3,
     /1.33D-3,1.75D-3,2.01D-3,
     /2.24D-3,2.46D-3,2.66D-3,2.84D-3,3.21D-3,3.38D-3,3.47D-3,3.55D-3,
     /3.65D-3,3.72D-3,
     /3.75D-3,3.74D-3,3.68D-3,3.57D-3,3.45D-3,3.31D-3,3.19D-3,3.07D-3,
     /2.91D-3,2.66D-3,
     /2.25D-3,1.95D-3,1.55D-3,1.21D-3,8.97D-4,7.07D-4,6.07D-4,5.21D-4,
     /4.21D-4,3.63D-4,
     /3.14D-4,2.84D-4,2.57D-4,2.25D-4,1.74D-4,1.50D-4,1.28D-4,1.15D-4,
     /1.09D-4,1.05D-4,
     /1.03D-4,1.02D-4,1.01D-4,1.005D-4,1.01D-4,1.03D-4,1.07D-4,1.11D-4,
     /1.14D-4,1.17D-4,
     /1.20D-4,1.22D-4,1.25D-4,1.29D-4,1.32D-4,1.38D-4,1.45D-4,1.50D-4,
     /1.54D-4,1.58D-4,
     /1.60D-4,1.63D-4,1.67D-4,1.71D-4,1.74D-4,1.80D-4,1.87D-4,1.92D-4,
     /1.96D-4,2.00D-4,
     /2.02D-4,2.05D-4,2.09D-4/
#
# CH3-  ATTACHMENT
      DATA XATT1/7.60,8.00,8.50,9.00,9.50,10.0,10.5,11.0,11.5/
      DATA YATT1/0.00,2.4D-6,1.1D-5,5.1D-5,6.0D-5,5.1D-5,1.1D-5,2.4D-6,
     /0.0/
# H- ATTACHMENT
      DATA XATT2/7.80,8.00,8.50,9.00,9.50,10.0,10.5,11.0,11.5/
      DATA YATT2/0.00,1.6D-5,7.2D-5,2.8D-4,4.0D-4,2.8D-4,7.2D-5,1.6D-5,
     /0.0/
#
      DATA XVIB1/.108,.125,0.14,0.15,.175,0.20,.225,0.25,0.30,0.40,
     /0.50,0.70,1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.50,
     /8.50,10.0,12.5,15.0,20.0/             
      DATA YVIB1/0.00,.137,.222,.265,.312,.359,.368,.368,.333,.282,
     /.248,.205,.162,.162,.197,.291,.432,.567,.731,.957,
     /1.02,.787,.585,.475,.325/              
      DATA XVIB2/.173,0.18,0.19,0.20,.215,0.23,0.25,0.30,0.40,0.50,
     /0.70,1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.50,8.50,
     /10.0,12.5,15.0,20.0/               
      DATA YVIB2/0.00,.085,.180,.248,.299,.325,.351,.368,.351,.325,
     /.274,.222,.205,.214,.332,.493,.647,.835,1.09,1.16,
     /.898,.665,.531,.370/                 
      DATA XVIB3/.363,0.38,0.40,.425,0.45,.475,0.50,0.55,0.60,0.65,
     /0.70,0.80,1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.00,
     /8.50,10.0,12.5,15.0,20.0/                                   
      DATA YVIB3/0.00,.226,.314,.379,.420,.446,.465,.485,.493,.493,
     /.489,.474,.437,.418,.456,.665,.950,1.23,1.65,2.00,
     /1.70,1.32,1.02,0.80,0.56/                              
      DATA XVIB4/.519,1.00,1.25,1.50,2.00,2.50,3.00,3.50,4.00,5.00,
     /6.00,7.50,8.50,10.0,12.5,15.0,20.0/             
      DATA YVIB4/0.00,.000,.005,.0075,.0163,.030,.0513,.080,.118,.218,
     /.363,.613,.625,.500,.350,.269,.175/
# EFFECTIVE TRIPLET LEVELS
# NON DIPOLE LEVEL AT 6.60 EV
      DATA XTR1/6.60,7.15,7.70,8.00,8.70,9.70,10.7,11.7,13.7,15.7,
     /18.7,21.7,25.7,29.7/
      DATA YTR1/0.00,.072,.216,.304,.384,.409,.424,.432,.424,.408,
     /.352,.296,.216,.160/ 
# NON DIPOLE LEVEL AT 7.70 EV
      DATA XTR2/7.70,9.20,10.2,11.2,12.2,14.2,16.2,19.2,22.2,
     /26.2,29.7/
      DATA YTR2/0.00,.164,.236,.265,.282,.295,.295,.275,.235,
     /.175,.140/
# NON DIPOLE LEVEL AT 9.60 EV
      DATA XTR3/9.60,10.6,11.6,12.6,13.6,16.6,19.6,22.6,26.6,
     /29.6,34.6/
      DATA YTR3/0.00,.298,.614,.716,.810,.853,.853,.810,.702,
     /.610,.464/    
# NON DIPOLE LEVEL AT 26.0 EV
      DATA XTR4/26.0,27.0,28.0,29.0,30.0,33.0,36.0,39.0,43.0,
     /46.0,51.0/
      DATA YTR4/0.00,1.61,2.95,3.44,3.89,4.08,4.08,3.89,3.37,
     /2.93,2.23/    
#                                      
# BREMSSTRAHLUNG X-SECTION WITH CUT UNITS 10**-24
      DATA Z1T/11.3,6.18,2.80,1.54,.858,.407,.251,.176,.145,.150,
     /.167,.178,.187,.193,.198,.205,.210,.218,.222,.228,
     /.231,.233,.234,.235,.235/
      DATA Z6T/298.,178.,85.2,47.5,26.3,12.2,7.06,4.45,3.06,2.82,
     /2.89,2.99,3.08,3.13,3.18,3.25,3.31,3.39,3.44,3.49,
     /3.52,3.54,3.55,3.57,3.57/
      DATA EBRM/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,
     /2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,
     /4.E7,5.E7,6.E7,8.E7,1.E8/
# LIGHT EMISSION FROM H ALPHA     
#  MOHLMANN  CHEM PHYS 19(1977)233
      DATA XNUL1/18.0,20.0,40.0,60.0,80.0,100.,150.,200.,300.,500.,
     /1000.,1300.,1700.,2000./
      DATA YNUL1/0.0,.0019,.0073,.0140,.0162,.0178,.0181,.0144,.0093,
     /.0053,
     /.0025,.0019,.0014,.0012/
# LIGHT EMISSION FROM CH2(A2DELTA -X2PI)
#  MOHLMANN  CHEM PHYS 19(1977)233
      DATA XNUL2/16.0,20.0,40.0,60.0,80.0,100.,150.,200.,300.,500.,
     /1000.,1300.,1700.,2000./
      DATA YNUL2/0.0,.000,.0037,.0054,.0056,.0053,.0048,.0041,.0028,
     /.0016,
     /.0007,.0005,.0004,.0003/
# --------------------------------------------------------------------- 
# ----------------------------------------------------------------------
# UPDATE OF PROPANE TO INCLUDE DISSOCIATIVE IONISATION AND
# OSCILLATOR STRENGTH FOR NEUTRAL DISSOCIATION .
# EXT# endED DATA BASE TO HIGH ENERGY TO ALLOW USE IN DEGRAD
# 
#     NANISO=0
      IF(NANISO == 0):
 :                                           
       NAME=' C3H8 2017   ISOTROPIC   '  
      else:
       NAME=' C3H8 2017  ANISOTROPIC  '
      # endIF                  
# ---------------------------------------------------------------------
# BORN-BETHE CONSTANTS
      A0=0.52917720859D-08
      RY=13.60569193
      CONST=1.873884D-20
      EMASS2=1021997.804
      API=DACOS(-1.00)
      BBCONST=16.00*API*A0*A0*RY*RY/EMASS2
#
# BORN BETHE FOR IONISATION
      AM2=10.52
      C=125.50
# ARRAY SIZE
      NASIZE=4000
#
      NION=24 
      NATT=2 
      NIN=64
      NNULL=2
#
      NBREM=25
      DO 8 J=1,NIN
      IZBR(J)=0
    8 CONTINUE
      IZBR(NIN+1)=6
      IZBR(NIN+2)=1
#
      DO 1 J=1,6
    1 KEL(J)=NANISO
# SET VIBRATIONAL ANGULAR DISTRIBUTIONS TO ISOTROPIC
      DO 2 J=1,8
    2 KIN(J)=0      
# SET ANG DITRIBUTIONS FOR DISSOCIATIVE EXCITATIONS TO OKHRIMOVSKYY TYPE
      DO 31 J=9,NIN
   31 KIN(J)=2
#
      NDATA=166                             
      NIONG=46  
      NION1=45
      NION2=45
      NION3=45
      NION4=45
      NION5=45
      NION6=44
      NION7=44
      NION8=44
      NION9=44
      NION10=44
      NION11=43
      NION12=41
      NION13=41
      NION14=40
      NION15=39
      NION16=39
      NION17=39
      NION18=38
      NION19=39
      NION20=38
      NION21=36
      NION22=36
      NION23=36
      NION24=83
#                                                        
      NATT1=9 
      NATT2=9                                             
      NVIB1=25                                                          
      NVIB2=24                                                          
      NVIB3=25
      NVIB4=17
      NTR1=14
      NTR2=11
      NTR3=11   
      NTR4=11                                                       
      NUL1=14
      NUL2=14      
# SCALING OF NULL CROSS-SECTION
      SCLN(1)=1.0
      SCLN(2)=1.0
#
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(44.09652*AMU)                                     
      E(3)=11.05                                                      
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
#
      EION(1)=11.11
      EION(2)=11.55
      EION(3)=11.75
      EION(4)=11.75
      EION(5)=11.91
      EION(6)=13.48
      EION(7)=13.65
      EION(8)=13.79
      EION(9)=14.1
      EION(10)=14.5
      EION(11)=16.5
      EION(12)=20.0
      EION(13)=21.5
      EION(14)=25.0
      EION(15)=26.5
      EION(16)=29.0
      EION(17)=30.4
      EION(18)=32.0
      EION(19)=32.0
      EION(20)=36.0
      EION(21)=39.0
      EION(22)=39.0
      EION(23)=39.0
      EION(24)=285.0
# OPAL BEATY
      SCLOBY=1.0
      SCLOBY=0.8
      DO 33 J=1,NION
       EOBY(J)=EION(J)*SCLOBY
   33 CONTINUE
      EOBY(NION)=EOBY(NION)*0.63
#
      DO 44 JK=1,23
       LEGAS(JK)=0
       ISHELL(JK)=0
       NC0(JK)=0
       EC0(JK)=0.0
       WKLM(JK)=0.0
       EFL(JK)=0.0
       NG1(JK)=0
       EG1(JK)=0.0
       NG2(JK)=0
       EG2(JK)=0.0
   44 CONTINUE
# DOUBLE CHARGE , ++ ION STATES ( EXTRA ELECTRON )
       NC0(18)=1
       EC0(18)=4.0
       NC0(19)=1
       EC0(19)=4.0 
# FLUORESCENCE DATA (KSHELL)
      LEGAS(24)=1
      ISHELL(24)=1
      NC0(24)=2
      EC0(24)=253.0
      WKLM(24)=0.0026
      EFL(24)=273.0
      NG1(24)=1
      EG1(24)=253.0
      NG2(24)=2
      EG2(24)=5.
# OFFSET ENERGY FOR IONISATION ELECTRON ANGULAR DISTRIBUTION
      DO 776 J=1,NION
      DO 777 I=1,NASIZE
      IF(EG(I):
 > EION(J)) :
       IOFFION(J)=I-1
       GO TO 776
      # endIF
  777 CONTINUE
  776 CONTINUE      
#
      EIN(1)=-0.036
      EIN(2)=0.036
      EIN(3)=-0.108                                            
      EIN(4)=0.108    
      EIN(5)=-0.173                                                  
      EIN(6)=0.173                                                      
      EIN(7)=0.363
      EIN(8)=0.519
      EIN(9)=6.60                                                      
      EIN(10)=7.65                                                      
      EIN(11)=7.70
      EIN(12)=7.95
      EIN(13)=8.25                                                      
      EIN(14)=8.55
      EIN(15)=8.85
      EIN(16)=9.15                                                      
      EIN(17)=9.45
      EIN(18)=9.60
      EIN(19)=9.75                                                      
      EIN(20)=10.05
      EIN(21)=10.35
      EIN(22)=10.65
      EIN(23)=10.9 
      EIN(24)=11.1 
      EIN(25)=11.3 
      EIN(26)=11.5 
      EIN(27)=11.7 
      EIN(28)=11.9 
      EIN(29)=12.1 
      EIN(30)=12.3
      EIN(31)=12.5
      EIN(32)=12.7
      EIN(33)=12.9
      EIN(34)=13.1
      EIN(35)=13.3
      EIN(36)=13.5
      EIN(37)=13.7
      EIN(38)=13.9
      EIN(39)=14.1
      EIN(40)=14.3
      EIN(41)=14.5
      EIN(42)=14.7
      EIN(43)=14.9
      EIN(44)=15.2
      EIN(45)=15.6
      EIN(46)=16.0
      EIN(47)=16.4
      EIN(48)=16.8
      EIN(49)=17.25
      EIN(50)=17.75
      EIN(51)=18.25
      EIN(52)=18.75
      EIN(53)=19.25
      EIN(54)=19.75
      EIN(55)=20.25
      EIN(56)=20.75
      EIN(57)=21.5
      EIN(58)=22.5 
      EIN(59)=23.5 
      EIN(60)=24.5 
      EIN(61)=25.5 
      EIN(62)=26.0
      EIN(63)=26.5 
      EIN(64)=27.5
      EIN(65)=0.0
      EIN(66)=0.0
# OFFSET ENERGY FOR EXCITATION LEVELS ANGULAR DISTRIBUTION
      DO 3 NL=1,NIN
      DO 651 I=1,NASIZE
      IF(EG(I):
 > abs(EIN(NL))) :
       IOFFN(NL)=I-1
       GO TO 3
      # endIF
  651 CONTINUE
    3 CONTINUE
#***********************************************************************
# ENTER PENNING TRANSFER FRACTION FOR EACH LEVEL
# LEVELS THAT ARE DISSOCIATIVE DO NOT GIVE PENNING TRANSFERS
      DO 4 K=1,NIN
      DO 4 L=1,3
    4 PENFRA[L,K]=0.0
# ENTER PENNING CONSTANTS IN PREVIOUS LINE
      IF(IPEN == 0):
 GO TO 6
# PRINT OUT PENNING CONSTANTS
      DO 5 KDUM=1,NIN
      IF(PENFRA[1,KDUM] == 0.0):
 GO TO 5
      WRITE(6,999) NAME,EIN(KDUM),PENFRA[1,KDUM],PENFRA[2,KDUM],
     /PENFRA[3,KDUM]
  999 FORMAT(' GAS = ',A25,' ENERGY LEVEL = ',F7.4,' EV.',/,' PENNING PR
     /OBABILITY =',F5.3,' ABS.LENGTH =',F7.2,' DECAY TIME =',F7.1,/) 
    5 CONTINUE 
#***********************************************************************
#

    6 SCRPT(1)='                                                  '
      SCRPT(2)=' ELASTIC      ANISOTROPIC   PROPANE 2017          '
      IF(NANISO == 0):
 :
      SCRPT(2)=' ELASTIC        ISOTROPIC   PROPANE 2017          '
      # endIF
      SCRPT(3)=' IONISATION    C3H8+               ELOSS=11.11    '
      SCRPT(4)=' IONISATION    C3H7+               ELOSS=11.55    '
      SCRPT(5)=' IONISATION    C3H6+               ELOSS=11.75    '
      SCRPT(6)=' IONISATION    C2H4+               ELOSS=11.75    '
      SCRPT(7)=' IONISATION    C2H5+               ELOSS=11.91    '
      SCRPT(8)=' IONISATION    C3H5+               ELOSS=13.48    '
      SCRPT(9)=' IONISATION    CH3+                ELOSS=13.65    '
      SCRPT(10)=' IONISATION    C3H4+               ELOSS=13.79    '
      SCRPT(11)=' IONISATION    C2H2+               ELOSS=14.1     '
      SCRPT(12)=' IONISATION    C2H3+               ELOSS=14.5     '
      SCRPT(13)=' IONISATION    C3H3+               ELOSS=16.5     '
      SCRPT(14)=' IONISATION    H+                  ELOSS=20.0     '
      SCRPT(15)=' IONISATION    H2+ AND H3+         ELOSS=21.5     '
      SCRPT(16)=' IONISATION    CH2+                ELOSS=25.0     '
      SCRPT(17)=' IONISATION    C3H2+               ELOSS=26.5     '
      SCRPT(18)=' IONISATION    C3H+                ELOSS=29.0     '
      SCRPT(19)=' IONISATION    C2H+                ELOSS=30.4     '
      SCRPT(20)=' IONISATION    ++ STATES STABLE    ELOSS=32.0     '
      SCRPT(21)=' IONISATION    ++ STATES DISSOC.   ELOSS=32.0     '
      SCRPT(22)=' IONISATION    CH+                 ELOSS=36.0     '
      SCRPT(23)=' IONISATION    C+                  ELOSS=39.0     '
      SCRPT(24)=' IONISATION    C2+                 ELOSS=39.0     '
      SCRPT(25)=' IONISATION    C3+                 ELOSS=39.0     '
      SCRPT(26)=' IONISATION  CARBON K-SHELL        ELOSS=285.0    '
#
      SCRPT(27)=' ATTACHMENT CH3-                                  '
      SCRPT(28)=' ATTACHMENT H-                                    '
      SCRPT(29)='                                                  '
      SCRPT(30)='                                                  '
      SCRPT(31)=' TORSION              SUPERELASTIC ELOSS= -0.036  '
      SCRPT(32)=' TORSION                           ELOSS=  0.036  '
      SCRPT(33)=' VIB ROCK AND STRETCH SUPERELASTIC ELOSS= -0.108  '
      SCRPT(34)=' VIB ROCK AND STRETCH              ELOSS=  0.108  '
      SCRPT(35)=' VIB DEFORMATION      SUPERELASTIC ELOSS= -0.173  '
      SCRPT(36)=' VIB DEFORMATION                   ELOSS=  0.173  '
      SCRPT(37)=' VIB STRETCH                       ELOSS=  0.363  '
      SCRPT(38)=' VIB HARMONICS                     ELOSS=  0.519  '
      SCRPT(39)=' TRIPLET DISSOCIATION              ELOSS=  6.60   '
      SCRPT(40)=' SINGLET DISSOC.    F=0.000339     ELOSS=  7.65   ' 
      SCRPT(41)=' TRIPLET DISSOCIATION              ELOSS=  7.70   '
      SCRPT(42)=' SINGLET DISSOC.    F=0.004660     ELOSS=  7.95   '
      SCRPT(43)=' SINGLET DISSOC.    F=0.012816     ELOSS=  8.25   '
      SCRPT(44)=' SINGLET DISSOC.    F=0.037747     ELOSS=  8.55   '
      SCRPT(45)=' SINGLET DISSOC.    F=0.081783     ELOSS=  8.85   '
      SCRPT(46)=' SINGLET DISSOC.    F=0.084248     ELOSS=  9.15   '
      SCRPT(47)=' SINGLET DISSOC.    F=0.090347     ELOSS=  9.45   '
      SCRPT(48)=' TRIPLET DISSOCIATION              ELOSS=  9.60   '
      SCRPT(49)=' SINGLET DISSOC.    F=0.098580     ELOSS=  9.75   '
      SCRPT(50)=' SINGLET DISSOC.    F=0.10415      ELOSS= 10.05   '
      SCRPT(51)=' SINGLET DISSOC.    F=0.11379      ELOSS= 10.35   '
      SCRPT(52)=' SINGLET DISSOC.    F=0.12674      ELOSS= 10.65   '
      SCRPT(53)=' SINGLET DISSOC.    F=0.096356     ELOSS= 10.9    '
      SCRPT(54)=' SINGLET DISSOC.    F=0.10387      ELOSS= 11.1    '
      SCRPT(55)=' SINGLET DISSOC.    F=0.10183      ELOSS= 11.3    '
      SCRPT(56)=' SINGLET DISSOC.    F=0.096718     ELOSS= 11.5    '
      SCRPT(57)=' SINGLET DISSOC.    F=0.090149     ELOSS= 11.7    '
      SCRPT(58)=' SINGLET DISSOC.    F=0.086661     ELOSS= 11.9    '
      SCRPT(59)=' SINGLET DISSOC.    F=0.086097     ELOSS= 12.1    '
      SCRPT(60)=' SINGLET DISSOC.    F=0.083324     ELOSS= 12.3    '
      SCRPT(61)=' SINGLET DISSOC.    F=0.079943     ELOSS= 12.5    '
      SCRPT(62)=' SINGLET DISSOC.    F=0.077210     ELOSS= 12.7    '
      SCRPT(63)=' SINGLET DISSOC.    F=0.070368     ELOSS= 12.9    '
      SCRPT(64)=' SINGLET DISSOC.    F=0.061365     ELOSS= 13.1    '
      SCRPT(65)=' SINGLET DISSOC.    F=0.053208     ELOSS= 13.3    '
      SCRPT(66)=' SINGLET DISSOC.    F=0.046320     ELOSS= 13.5    '
      SCRPT(67)=' SINGLET DISSOC.    F=0.042827     ELOSS= 13.7    '
      SCRPT(68)=' SINGLET DISSOC.    F=0.038898     ELOSS= 13.9    '
      SCRPT(69)=' SINGLET DISSOC.    F=0.035930     ELOSS= 14.1    '
      SCRPT(70)=' SINGLET DISSOC.    F=0.033632     ELOSS= 14.3    '
      SCRPT(71)=' SINGLET DISSOC.    F=0.030562     ELOSS= 14.5    '
      SCRPT(72)=' SINGLET DISSOC.    F=0.028559     ELOSS= 14.7    '
      SCRPT(73)=' SINGLET DISSOC.    F=0.027052     ELOSS= 14.9    '
      SCRPT(74)=' SINGLET DISSOC.    F=0.048051     ELOSS= 15.2    '
      SCRPT(75)=' SINGLET DISSOC.    F=0.036375     ELOSS= 15.6    '
      SCRPT(76)=' SINGLET DISSOC.    F=0.020165     ELOSS= 16.0    '
      SCRPT(77)=' SINGLET DISSOC.    F=0.010038     ELOSS= 16.4    '
      SCRPT(78)=' SINGLET DISSOC.    F=0.0054441    ELOSS= 16.8    '
      SCRPT(79)=' SINGLET DISSOC.    F=0.0050790    ELOSS= 17.25   '
      SCRPT(80)=' SINGLET DISSOC.    F=0.0057699    ELOSS= 17.75   '
      SCRPT(81)=' SINGLET DISSOC.    F=0.0072715    ELOSS= 18.25   '
      SCRPT(82)=' SINGLET DISSOC.    F=0.010296     ELOSS= 18.75   '
      SCRPT(83)=' SINGLET DISSOC.    F=0.014152     ELOSS= 19.25   '
      SCRPT(84)=' SINGLET DISSOC.    F=0.013698     ELOSS= 19.75   '
      SCRPT(85)=' SINGLET DISSOC.    F=0.010362     ELOSS= 20.25   '
      SCRPT(86)=' SINGLET DISSOC.    F=0.0088401    ELOSS= 20.75   '
      SCRPT(87)=' SINGLET DISSOC.    F=0.022195     ELOSS= 21.5    '
      SCRPT(88)=' SINGLET DISSOC.    F=0.0191721    ELOSS= 22.5    '
      SCRPT(89)=' SINGLET DISSOC.    F=0.011553     ELOSS= 23.5    '
      SCRPT(90)=' SINGLET DISSOC.    F=0.0089679    ELOSS= 24.5    '
      SCRPT(91)=' SINGLET DISSOC.    F=0.0064815    ELOSS= 25.5    '
      SCRPT(92)=' TRIPLET DISSOCIATION              ELOSS= 26.0    '
      SCRPT(93)=' SINGLET DISSOC.    F=0.0035484    ELOSS= 26.5    '
      SCRPT(94)=' SINGLET DISSOC.    F=0.0010872    ELOSS= 27.5    '
      SCRPT(95)=' BREMSSTRAHLUNG FROM CARBON ATOM                  '
      SCRPT(96)=' BREMSSTRAHLUNG FROM HYDROGEN ATOM                '
# NULL COLLISIONS
      SCRPTN(1)=' C3H8: LIGHT EMISSION : Halpha                    '
      SCRPTN(2)=' C3H8: LIGHT EMISSION : CH2(A2DELTA-X2PI)         '
#
# CALC LEVEL POPULATIONS
      APOP1=math.exp(EIN(1)/AKT)
      APOP2=math.exp(EIN(3)/AKT)
      APOP3=math.exp(EIN(5)/AKT)  
#
#     EN=-ESTEP/2.0                                      
      DO 1000 I=1,NSTEP
      EN=EG(I)
      ENLG=math.log(EN)                                              
#     EN=EN+ESTEP    
      GAMMA1=(EMASS2+2.00*EN)/EMASS2
      GAMMA2=GAMMA1*GAMMA1
      BETA=math.sqrt(1.00-1.00/GAMMA2)           
      BETA2=BETA*BETA
#                   
      DO 10 J=2,NDATA        
      IF(EN > 10.0):
 GO TO 21                                           
      IF(EN <= XEN(J):
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA                                                           
   20 A=(YMT(J)-YMT(J-1))/(XEN(J)-XEN(J-1))                         
      B=(XEN(J-1)*YMT(J)-XEN(J)*YMT(J-1))/(XEN(J-1)-XEN(J))
      QMT=(A*EN+B)*1.D-16
      A=(YEL(J)-YEL(J-1))/(XEN(J)-XEN(J-1))                         
      B=(XEN(J-1)*YEL(J)-XEN(J)*YEL(J-1))/(XEN(J-1)-XEN(J))
      QEL=(A*EN+B)*1.D-16
      A=(YEPS(J)-YEPS(J-1))/(XEN(J)-XEN(J-1))                         
      B=(XEN(J-1)*YEPS(J)-XEN(J)*YEPS(J-1))/(XEN(J-1)-XEN(J))
      PQ2=A*EN+B
      GO TO 30
# USE LOG INTERPOLATION ABOVE 10 EV
   21 DO 22 J=2,NDATA
      IF(EN <= XEN(J):
) GO TO 23
   22 CONTINUE
      J=NDATA
   23 YXJ=math.log(YEL(J))
      YXJ1=math.log(YEL(J-1))
      XNJ=math.log(XEN(J))
      XNJ1=math.log(XEN(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QEL=math.exp(A*math.log(EN)+B)*1.D-16
      YXJ=math.log(YMT(J))
      YXJ1=math.log(YMT(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QMT=math.exp(A*math.log(EN)+B)*1.D-16
      YXJ=math.log(YEPS(J))
      YXJ1=math.log(YEPS(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      PQ2=math.exp(A*math.log(EN)+B)
   30 CONTINUE
# EPSILON = 1-YEPS
      PQ2=1.00-PQ2
      PQ1=0.5+(QEL-QMT)/QEL
# CALCULATE PQ1 AND PQ2
      IF(NANISO == 0):
 PEQEL(2,I)=0.5
      IF(NANISO == 1):
 PEQEL(2,I)=PQ1
      IF(NANISO == 2):
 PEQEL(2,I)=PQ2
      Q(2,I)=QEL  
      IF(NANISO == 0):
 Q(2,I)=QMT  
#
# IONISATION 
# 
      Q(3,I)=0.0
      DO 40 L=1,NION
      QION(L,I)=0.00
      PEQION(L,I)=0.5
      IF(NANISO == 2):
 PEQION(L,I)=0.0
   40 CONTINUE
# CALCULATE GROSS AND COUNTING IONISATIONS
# NOT USED: ONLY FOR COMPARISON TO TOTAL OF IONISATION CHANNELS
#     GROSS IONISATION
      IF(EN <= EION(1):
) GO TO 50
      IF(EN > XION(NIONG):
) GO TO 43
      DO 41 J=2,NIONG
      IF(EN <= XION(J):
) GO TO 42
   41 CONTINUE
      J=NION
   42 A=(YIONG(J)-YIONG(J-1))/(XION(J)-XION(J-1))
      B=(XION(J-1)*YIONG(J)-XION(J)*YIONG(J-1))/(XION(J-1)-XION(J))
      QIONG=(A*EN+B)*1.D-16
      A=(YIONC(J)-YIONC(J-1))/(XION(J)-XION(J-1))
      B=(XION(J-1)*YIONC(J)-XION(J)*YIONC(J-1))/(XION(J-1)-XION(J))
      QIONC=(A*EN+B)*1.D-16
      GO TO 50
# USE BORN-BETHE ABOVE XION(NIONG) EV
   43 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QBB=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)
      QIONC=QBB
      QIONG=QIONC/0.8939
   50 CONTINUE
#  C3H8+                                                                     
      IF(EN <= EION(1):
) GO TO 65         
      IF(EN > XION1(NION1):
) GO TO 63
      DO 61 J=2,NION1                                                  
      IF(EN <= XION1(J):
) GO TO 62                                     
   61 CONTINUE                                                          
      J=NION1                                                           
   62 A=(YION1(J)-YION1(J-1))/(XION1(J)-XION1(J-1))                    
      B=(XION1(J-1)*YION1(J)-XION1(J)*YION1(J-1))/(XION1(J-1)-XION1(J)) 
      QION(1,I)=(A*EN+B)*1.D-16               
      GO TO 64 
# USE BORN BETHE ABOVE XION1(NION1) EV
   63 QION(1,I)=QIONC*0.103628
   64 CONTINUE
      IF(EN < (2.0*EION(1):
)) GO TO 65
      PEQION(1,I)=PEQEL(2,(I-IOFFION(1)))
# C3H7+ 
   65 IF(EN <= EION(2)) GO TO 70         
      IF(EN > XION2(NION2):
) GO TO 68
      DO 66 J=2,NION2                                                  
      IF(EN <= XION2(J):
) GO TO 67                                     
   66 CONTINUE                                                          
      J=NION2                                                           
   67 A=(YION2(J)-YION2(J-1))/(XION2(J)-XION2(J-1))                    
      B=(XION2(J-1)*YION2(J)-XION2(J)*YION2(J-1))/(XION2(J-1)-XION2(J)) 
      QION(2,I)=(A*EN+B)*1.D-16               
      GO TO 69
# USE BORN BETHE ABOVE XION2(NION2) EV
   68 QION(2,I)=QIONC*0.073774
   69 CONTINUE
      IF(EN < (2.0*EION(2):
)) GO TO 70
      PEQION(2,I)=PEQEL(2,(I-IOFFION(2)))
# C3H6+ 
   70 IF(EN <= EION(3)) GO TO 75         
      IF(EN > XION3(NION3):
) GO TO 73
      DO 71 J=2,NION3                                                  
      IF(EN <= XION3(J):
) GO TO 72                                     
   71 CONTINUE                                                          
      J=NION3                                                           
   72 A=(YION3(J)-YION3(J-1))/(XION3(J)-XION3(J-1))                    
      B=(XION3(J-1)*YION3(J)-XION3(J)*YION3(J-1))/(XION3(J-1)-XION3(J)) 
      QION(3,I)=(A*EN+B)*1.D-16               
      GO TO 74
# USE BORN BETHE ABOVE XION3(NION3) EV
   73 QION(3,I)=QIONC*0.017780
   74 CONTINUE
      IF(EN < (2.0*EION(3):
)) GO TO 75
      PEQION(3,I)=PEQEL(2,(I-IOFFION(3)))
# C2H4+ 
   75 IF(EN <= EION(4)) GO TO 80         
      IF(EN > XION4(NION4):
) GO TO 78
      DO 76 J=2,NION4                                                  
      IF(EN <= XION4(J):
) GO TO 77                                     
   76 CONTINUE                                                          
      J=NION4                                                           
   77 A=(YION4(J)-YION4(J-1))/(XION4(J)-XION4(J-1))                    
      B=(XION4(J-1)*YION4(J)-XION4(J)*YION4(J-1))/(XION4(J-1)-XION4(J)) 
      QION(4,I)=(A*EN+B)*1.D-16               
      GO TO 79
# USE BORN BETHE ABOVE XION4(NION4) EV
   78 QION(4,I)=QIONC*0.151263
   79 CONTINUE
      IF(EN < (2.0*EION(4):
)) GO TO 80
      PEQION(4,I)=PEQEL(2,(I-IOFFION(4)))
# C2H5+ 
   80 IF(EN <= EION(5)) GO TO 85         
      IF(EN > XION5(NION5):
) GO TO 83
      DO 81 J=2,NION5                                                  
      IF(EN <= XION5(J):
) GO TO 82                                     
   81 CONTINUE                                                          
      J=NION5                                                           
   82 A=(YION5(J)-YION5(J-1))/(XION5(J)-XION5(J-1))                    
      B=(XION5(J-1)*YION5(J)-XION5(J)*YION5(J-1))/(XION5(J-1)-XION5(J)) 
      QION(5,I)=(A*EN+B)*1.D-16
      GO TO 84               
# USE BORN BETHE ABOVE XION5(NION5) EV
   83 QION(5,I)=QIONC*0.238836
   84 CONTINUE
      IF(EN < (2.0*EION(5):
)) GO TO 85
      PEQION(5,I)=PEQEL(2,(I-IOFFION(5)))
# C3H5+ 
   85 IF(EN <= EION(6)) GO TO 90         
      IF(EN > XION6(NION6):
) GO TO 88
      DO 86 J=2,NION6                                                  
      IF(EN <= XION6(J):
) GO TO 87                                     
   86 CONTINUE                                                          
      J=NION6                                                           
   87 A=(YION6(J)-YION6(J-1))/(XION6(J)-XION6(J-1))                    
      B=(XION6(J-1)*YION6(J)-XION6(J)*YION6(J-1))/(XION6(J-1)-XION6(J)) 
      QION(6,I)=(A*EN+B)*1.D-16               
      GO TO 89
# USE BORN BETHE ABOVE XION6(NION6) EV
   88 QION(6,I)=QIONC*0.040867 
   89 CONTINUE
      IF(EN < (2.0*EION(6):
)) GO TO 90
      PEQION(6,I)=PEQEL(2,(I-IOFFION(6)))
# CH3+
   90 IF(EN <= EION(7)) GO TO 95         
      IF(EN > XION7(NION7):
) GO TO 93
      DO 91 J=2,NION7                                                  
      IF(EN <= XION7(J):
) GO TO 92                                     
   91 CONTINUE                                                          
      J=NION7                                                           
   92 A=(YION7(J)-YION7(J-1))/(XION7(J)-XION7(J-1))                    
      B=(XION7(J-1)*YION7(J)-XION7(J)*YION7(J-1))/(XION7(J-1)-XION7(J)) 
      QION(7,I)=(A*EN+B)*1.D-16               
      GO TO 94
# USE BORN BETHE ABOVE XION7(NION7) EV
   93 QION(7,I)=QIONC*0.019372
   94 CONTINUE
      IF(EN < (2.0*EION(7):
)) GO TO 95
      PEQION(7,I)=PEQEL(2,(I-IOFFION(7)))
# C3H4+
   95 IF(EN <= EION(8)) GO TO 100         
      IF(EN > XION8(NION8):
) GO TO 98
      DO 96 J=2,NION8                                                  
      IF(EN <= XION8(J):
) GO TO 97                                     
   96 CONTINUE                                                          
      J=NION8                                                           
   97 A=(YION8(J)-YION8(J-1))/(XION8(J)-XION8(J-1))                    
      B=(XION8(J-1)*YION8(J)-XION8(J)*YION8(J-1))/(XION8(J-1)-XION8(J)) 
      QION(8,I)=(A*EN+B)*1.D-16               
      GO TO 99
# USE BORN BETHE ABOVE XION8(NION8) EV
   98 QION(8,I)=QIONC*0.007842
   99 CONTINUE
      IF(EN < (2.0*EION(8):
)) GO TO 100
      PEQION(8,I)=PEQEL(2,(I-IOFFION(8)))
# C2H2+ 
  100 IF(EN <= EION(9)) GO TO 105         
      IF(EN > XION9(NION9):
) GO TO 103
      DO 101 J=2,NION9                                                  
      IF(EN <= XION9(J):
) GO TO 102                                     
  101 CONTINUE                                                          
      J=NION9                                                           
  102 A=(YION9(J)-YION9(J-1))/(XION9(J)-XION9(J-1))                    
      B=(XION9(J-1)*YION9(J)-XION9(J)*YION9(J-1))/(XION9(J-1)-XION9(J)) 
      QION(9,I)=(A*EN+B)*1.D-16               
      GO TO 104
# USE BORN BETHE ABOVE XION9(NION9) EV
  103 QION(9,I)=QIONC*0.025343
  104 CONTINUE
      IF(EN < (2.0*EION(9):
)) GO TO 105
      PEQION(9,I)=PEQEL(2,(I-IOFFION(9)))
# C2H3+
  105 IF(EN <= EION(10)) GO TO 110         
      IF(EN > XION10(NION10):
) GO TO 108
      DO 106 J=2,NION10                                                 
      IF(EN <= XION10(J):
) GO TO 107                                     
  106 CONTINUE                                                          
      J=NION10                                                          
  107 A=(YION10(J)-YION10(J-1))/(XION10(J)-XION10(J-1))                
      B=(XION10(J-1)*YION10(J)-XION10(J)*YION10(J-1))/
     /(XION10(J-1)-XION10(J)) 
      QION(10,I)=(A*EN+B)*1.D-16               
      GO TO 109
# USE BORN BETHE ABOVE XION10(NION10) EV
  108 QION(10,I)=QIONC*0.112253    
  109 CONTINUE
      IF(EN < (2.0*EION(10):
)) GO TO 110
      PEQION(10,I)=PEQEL(2,(I-IOFFION(10)))
# C3H3+
  110 IF(EN <= EION(11)) GO TO 115         
      IF(EN > XION11(NION11):
) GO TO 113
      DO 111 J=2,NION11                                                 
      IF(EN <= XION11(J):
) GO TO 112                                     
  111 CONTINUE                                                          
      J=NION11                                                          
  112 A=(YION11(J)-YION11(J-1))/(XION11(J)-XION11(J-1))                
      B=(XION11(J-1)*YION11(J)-XION11(J)*YION11(J-1))/
     /(XION11(J-1)-XION11(J)) 
      QION(11,I)=(A*EN+B)*1.D-16               
      GO TO 114
# USE BORN BETHE ABOVE XION11(NION11) EV
  113 QION(11,I)=QIONC*0.049359
  114 CONTINUE
      IF(EN < (2.0*EION(11):
)) GO TO 115
      PEQION(11,I)=PEQEL(2,(I-IOFFION(11)))
# H+
  115 IF(EN <= EION(12)) GO TO 120         
      IF(EN > XION12(NION12):
) GO TO 118
      DO 116 J=2,NION12                                                 
      IF(EN <= XION12(J):
) GO TO 117                                     
  116 CONTINUE                                                          
      J=NION12                                                          
  117 A=(YION12(J)-YION12(J-1))/(XION12(J)-XION12(J-1))                
      B=(XION12(J-1)*YION12(J)-XION12(J)*YION12(J-1))/
     /(XION12(J-1)-XION12(J)) 
      QION(12,I)=(A*EN+B)*1.D-16               
      GO TO 119
# USE BORN BETHE ABOVE XION12(NION12) EV
  118 QION(12,I)=QIONC*0.001884
  119 CONTINUE
      IF(EN < (2.0*EION(12):
)) GO TO 120
      PEQION(12,I)=PEQEL(2,(I-IOFFION(12)))
# H2+  AND H3+
  120 IF(EN <= EION(13)) GO TO 125         
      IF(EN > XION13(NION13):
) GO TO 123
      DO 121 J=2,NION13                                                 
      IF(EN <= XION13(J):
) GO TO 122                                     
  121 CONTINUE                                                          
      J=NION13                                                          
  122 A=(YION13(J)-YION13(J-1))/(XION13(J)-XION13(J-1))                
      B=(XION13(J-1)*YION13(J)-XION13(J)*YION13(J-1))/
     /(XION13(J-1)-XION13(J)) 
      QION(13,I)=(A*EN+B)*1.D-16               
      GO TO 124
# USE BORN BETHE ABOVE XION13(NION13) EV
  123 QION(13,I)=QIONC*0.001015
  124 CONTINUE
      IF(EN < (2.0*EION(13):
)) GO TO 125
      PEQION(13,I)=PEQEL(2,(I-IOFFION(13)))
# CH2+
  125 IF(EN <= EION(14)) GO TO 130         
      IF(EN > XION14(NION14):
) GO TO 128
      DO 126 J=2,NION14                                                 
      IF(EN <= XION14(J):
) GO TO 127                                     
  126 CONTINUE                                                          
      J=NION14                                                          
  127 A=(YION14(J)-YION14(J-1))/(XION14(J)-XION14(J-1))                
      B=(XION14(J-1)*YION14(J)-XION14(J)*YION14(J-1))/
     /(XION14(J-1)-XION14(J)) 
      QION(14,I)=(A*EN+B)*1.D-16               
      GO TO 129
# USE BORN BETHE ABOVE XION14(NION14) EV
  128 QION(14,I)=QIONC*0.006342
  129 CONTINUE
      IF(EN < (2.0*EION(14):
)) GO TO 130
      PEQION(14,I)=PEQEL(2,(I-IOFFION(14)))
# C3H2+
  130 IF(EN <= EION(15)) GO TO 135         
      IF(EN > XION15(NION15):
) GO TO 133
      DO 131 J=2,NION15                                                 
      IF(EN <= XION15(J):
) GO TO 132                                     
  131 CONTINUE                                                          
      J=NION15                                                          
  132 A=(YION15(J)-YION15(J-1))/(XION15(J)-XION15(J-1))                
      B=(XION15(J-1)*YION15(J)-XION15(J)*YION15(J-1))/
     /(XION15(J-1)-XION15(J)) 
      QION(15,I)=(A*EN+B)*1.D-16               
      GO TO 134
# USE BORN BETHE ABOVE XION15(NION15) EV
  133 QION(15,I)=QIONC*0.013401
  134 CONTINUE
      IF(EN < (2.0*EION(15):
)) GO TO 135
      PEQION(15,I)=PEQEL(2,(I-IOFFION(15)))
# C3H+
  135 IF(EN <= EION(16)) GO TO 140         
      IF(EN > XION16(NION16):
) GO TO 138
      DO 136 J=2,NION16                                                 
      IF(EN <= XION16(J):
) GO TO 137                                     
  136 CONTINUE                                                          
      J=NION16                                                          
  137 A=(YION16(J)-YION16(J-1))/(XION16(J)-XION16(J-1))                
      B=(XION16(J-1)*YION16(J)-XION16(J)*YION16(J-1))/
     /(XION16(J-1)-XION16(J)) 
      QION(16,I)=(A*EN+B)*1.D-16               
      GO TO 139
# USE BORN BETHE ABOVE XION16(NION16) EV
  138 QION(16,I)=QIONC*0.008240
  139 CONTINUE
      IF(EN < (2.0*EION(16):
)) GO TO 140
      PEQION(16,I)=PEQEL(2,(I-IOFFION(16)))
# C2H+
  140 IF(EN <= EION(17)) GO TO 145         
      IF(EN > XION17(NION17):
) GO TO 143
      DO 141 J=2,NION17                                                 
      IF(EN <= XION17(J):
) GO TO 142                                     
  141 CONTINUE                                                          
      J=NION17                                                          
  142 A=(YION17(J)-YION17(J-1))/(XION17(J)-XION17(J-1))                
      B=(XION17(J-1)*YION17(J)-XION17(J)*YION17(J-1))/
     /(XION17(J-1)-XION17(J)) 
      QION(17,I)=(A*EN+B)*1.D-16               
      GO TO 144
# USE BORN BETHE ABOVE XION17(NION17) EV
  143 QION(17,I)=QIONC*0.002004
  144 CONTINUE
      IF(EN < (2.0*EION(17):
)) GO TO 145
      PEQION(17,I)=PEQEL(2,(I-IOFFION(17)))
# ++ DOUBLE CHARGED STABLE IONS
  145 IF(EN <= EION(18)) GO TO 150         
      IF(EN > XION18(NION18):
) GO TO 148
      DO 146 J=2,NION18                                                 
      IF(EN <= XION18(J):
) GO TO 147                                     
  146 CONTINUE                                                          
      J=NION18                                                          
  147 A=(YION18(J)-YION18(J-1))/(XION18(J)-XION18(J-1))                
      B=(XION18(J-1)*YION18(J)-XION18(J)*YION18(J-1))/
     /(XION18(J-1)-XION18(J)) 
      QION(18,I)=(A*EN+B)*1.D-16               
      GO TO 149
# USE BORN BETHE ABOVE XION18(NION18) EV
  148 QION(18,I)=QIONC*0.004085
  149 CONTINUE
      IF(EN < (2.0*EION(18):
)) GO TO 150
      PEQION(18,I)=PEQEL(2,(I-IOFFION(18)))
# ++ DOUBLE CHARGED UNSTABLE IONS (DISSOCIATIVE)
  150 IF(EN <= EION(19)) GO TO 155         
      IF(EN > XION19(NION19):
) GO TO 153
      DO 151 J=2,NION19                                                 
      IF(EN <= XION19(J):
) GO TO 152                                     
  151 CONTINUE                                                          
      J=NION19                                                         
  152 A=(YION19(J)-YION19(J-1))/(XION19(J)-XION19(J-1))                
      B=(XION19(J-1)*YION19(J)-XION19(J)*YION19(J-1))/
     /(XION19(J-1)-XION19(J)) 
      QION(19,I)=(A*EN+B)*1.D-16               
      GO TO 154
# USE BORN BETHE ABOVE XION19(NION19) EV
  153 QION(19,I)=QIONC*0.118714
  154 CONTINUE
      IF(EN < (2.0*EION(19):
)) GO TO 155
      PEQION(19,I)=PEQEL(2,(I-IOFFION(19)))
# CH+
  155 IF(EN <= EION(20)) GO TO 160         
      IF(EN > XION20(NION20):
) GO TO 158
      DO 156 J=2,NION20                                                 
      IF(EN <= XION20(J):
) GO TO 157                                     
  156 CONTINUE                                                          
      J=NION20                                                         
  157 A=(YION20(J)-YION20(J-1))/(XION20(J)-XION20(J-1))                
      B=(XION20(J-1)*YION20(J)-XION20(J)*YION20(J-1))/
     /(XION20(J-1)-XION20(J)) 
      QION(20,I)=(A*EN+B)*1.D-16               
      GO TO 159
# USE BORN BETHE ABOVE XION20(NION20) EV
  158 QION(20,I)=QIONC*0.002070
  159 CONTINUE
      IF(EN < (2.0*EION(20):
)) GO TO 160
      PEQION(20,I)=PEQEL(2,(I-IOFFION(20)))
# C+ 
  160 IF(EN <= EION(21)) GO TO 165         
      IF(EN > XION21(NION21):
) GO TO 163
      DO 161 J=2,NION21                                                 
      IF(EN <= XION21(J):
) GO TO 162                                     
  161 CONTINUE                                                          
      J=NION21                                                         
  162 A=(YION21(J)-YION21(J-1))/(XION21(J)-XION21(J-1))                
      B=(XION21(J-1)*YION21(J)-XION21(J)*YION21(J-1))/
     /(XION21(J-1)-XION21(J)) 
      QION(21,I)=(A*EN+B)*1.D-16               
      GO TO 164
# USE BORN BETHE ABOVE XION21(NION21) EV
  163 QION(21,I)=QIONC*0.000837
  164 CONTINUE
      IF(EN < (2.0*EION(21):
)) GO TO 165
      PEQION(21,I)=PEQEL(2,(I-IOFFION(21)))
# C2+
  165 IF(EN <= EION(22)) GO TO 170         
      IF(EN > XION22(NION22):
) GO TO 168
      DO 166 J=2,NION22                                                 
      IF(EN <= XION22(J):
) GO TO 167                                     
  166 CONTINUE                                                          
      J=NION22                                                         
  167 A=(YION22(J)-YION22(J-1))/(XION22(J)-XION22(J-1))                
      B=(XION22(J-1)*YION22(J)-XION22(J)*YION22(J-1))/
     /(XION22(J-1)-XION22(J)) 
      QION(22,I)=(A*EN+B)*1.D-16               
      GO TO 169
# USE BORN BETHE ABOVE XION22(NION22) EV
  168 QION(22,I)=QIONC*0.000057
  169 CONTINUE
      IF(EN < (2.0*EION(22):
)) GO TO 170
      PEQION(22,I)=PEQEL(2,(I-IOFFION(22)))
# C3+
  170 IF(EN <= EION(23)) GO TO 175         
      IF(EN > XION23(NION23):
) GO TO 173
      DO 171 J=2,NION23                                                 
      IF(EN <= XION23(J):
) GO TO 172                                     
  171 CONTINUE                                                          
      J=NION23                                                         
  172 A=(YION23(J)-YION23(J-1))/(XION23(J)-XION23(J-1))                
      B=(XION23(J-1)*YION23(J)-XION23(J)*YION23(J-1))/
     /(XION23(J-1)-XION23(J)) 
      QION(23,I)=(A*EN+B)*1.D-16               
      GO TO 174
# USE BORN BETHE ABOVE XION23(NION23) EV
  173 QION(23,I)=QIONC*0.001034
  174 CONTINUE
      IF(EN < (2.0*EION(23):
)) GO TO 175
      PEQION(23,I)=PEQEL(2,(I-IOFFION(23)))
# CARBON K-SHELL 
  175 IF(EN <= EION(24)) GO TO 180         
      DO 176 J=2,NION24                                                 
      IF(EN <= XION24(J):
) GO TO 177                                     
  176 CONTINUE                                                          
      J=NION24                                                          
  177 A=(YION24(J)-YION24(J-1))/(XION24(J)-XION24(J-1))                
      B=(XION24(J-1)*YION24(J)-XION24(J)*YION24(J-1))/
     /(XION24(J-1)-XION24(J)) 
# FACTOR 3 FOR 3 CARBON ATOMS
      QION(24,I)=3.0*(A*EN+B)*1.D-16               
      IF(EN < (2.0*EION(24):
)) GO TO 180
      PEQION(24,I)=PEQEL(2,(I-IOFFION(24)))
# CORRECTION TO TOTAL I0NISATION DUE TO SPLIT OFF KSHELL
  180 QSUM=0.00
      DO 181 L=1,23
  181 QSUM=QSUM+QION(L,I)
      IF(QSUM == 0.0):
 GO TO 200
      FAC=(QSUM-QION(24,I))/QSUM
      DO 182 L=1,23
  182 QION(L,I)=QION(L,I)*FAC 
#
# DISSOCIATIVE ATTACHMENT TO CH3-
#
  200 Q(4,I)=0.0
      QATT(1,I)=0.0
      IF(EN <= XATT1(1):
) GO TO 230                                     
      IF(EN >= XATT1(NATT1):
) GO TO 230                                  
      DO 210 J=2,NATT1                                                  
      IF(EN <= XATT1(J):
) GO TO 220                                     
  210 CONTINUE                                                          
      J=NATT1                                                          
  220 A=(YATT1(J)-YATT1(J-1))/(XATT1(J)-XATT1(J-1))                    
      B=(XATT1(J-1)*YATT1(J)-XATT1(J)*YATT1(J-1))/(XATT1(J-1)-XATT1(J)) 
      QATT(1,I)=(A*EN+B)*1.D-16
# DISSOCIATIVE ATTACHMENT TO H-
  230 QATT(2,I)=0.0
      IF(EN <= XATT2(1):
) GO TO 300                                     
      IF(EN >= XATT2(NATT2):
) GO TO 300                                  
      DO 240 J=2,NATT2                                                  
      IF(EN <= XATT2(J):
) GO TO 250                                     
  240 CONTINUE                                                          
      J=NATT2                                                          
  250 A=(YATT2(J)-YATT2(J-1))/(XATT2(J)-XATT2(J-1))                    
      B=(XATT2(J-1)*YATT2(J)-XATT2(J)*YATT2(J-1))/(XATT2(J-1)-XATT2(J)) 
      QATT(2,I)=(A*EN+B)*1.D-16
#                                    
  300 Q(5,I)=0.0                                                        
      Q(6,I)=0.0                                                        
# SET ZEROS 
      DO 301 L=1,NIN
      QIN(L,I)=0.00
      PEQIN(L,I)=0.5
  301 IF(NANISO == 2) PEQIN(L,I)=0.00
#          
# SUPERELASTIC VIBRATION TORSION           ANISOTROPIC ABOVE 10EV
      IF(EN <= 0.0):
 GO TO 302
      EFAC=math.sqrt(1.0-(EIN(1)/EN))
      QIN(1,I)=0.00536*math.log((EFAC+1.0)/(EFAC-1.0))/EN 
      QIN(1,I)=QIN(1,I)*APOP1/(1.0+APOP1)*1.D-16    
      IF(EN > 10.0):
 PEQIN(1,I)=PEQEL(2,(I-IOFFN(1)))
#   VIBRATION TORSION                      ANISOTROPIC ABOVE 10EV
  302 IF(EN <= EIN(2)) GO TO 303
      EFAC=math.sqrt(1.0-(EIN(2)/EN))
      QIN(2,I)=0.00536*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      QIN(2,I)=QIN(2,I)*1.0/(1.0+APOP1)*1.D-16    
      IF(EN > 10.0):
 PEQIN(2,I)=PEQEL(2,(I-IOFFN(2)))
#
# VIBRATION SUPERELASTIC                   ANISOTROPIC ABOVE 10EV
  303 IF(EN <= 0.0) GO TO 316
      IF((EN+EIN(4):
) > XVIB1(NVIB1)) GO TO 314 
      DO 312 J=2,NVIB1
      IF((EN+EIN(4):
) <= XVIB1(J)) GO TO 313
  312 CONTINUE
      J=NVIB1
  313 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J))
      QIN(3,I)=(EN+EIN(4))*(A*(EN+EIN(4))+B)/EN
      GO TO 315
  314 QIN(3,I)=YVIB1(NVIB1)*(XVIB1(NVIB1)/(EN+EIN(4)))**2
  315 QIN(3,I)=QIN(3,I)*APOP2/(1.0+APOP2)*1.D-16        
      IF(EN > 10.0):
 PEQIN(3,I)=PEQEL(2,(I-IOFFN(3)))
#     
# VIBRATION INELASTIC                    ANISOTROPIC ABOVE 10EV 
  316 IF(EN <= EIN(4)) GO TO 321                   
      IF(EN > XVIB1(NVIB1):
) GO TO 319                      
      DO 317 J=2,NVIB1                                                  
      IF(EN <= XVIB1(J):
) GO TO 318                                     
  317 CONTINUE                                                          
      J=NVIB1                                                           
  318 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J)) 
      QIN(4,I)=(A*EN+B)
      GO TO 320
  319 QIN(4,I)=YVIB1(NVIB1)*(XVIB1(NVIB1)/EN)**2
  320 QIN(4,I)=QIN(4,I)/(1.0+APOP2)*1.D-16           
      IF(EN > 10.0):
 PEQIN(4,I)=PEQEL(2,(I-IOFFN(4)))    
#               
#  SUPERELASTIC VIBRATION                  ANISOTROPIC ABOVE 10EV                          
  321 IF(EN <= 0.0) GO TO 326   
      IF((EN+EIN(6):
) > XVIB2(NVIB2)) GO TO 324                         
      DO 322 J=2,NVIB2
      IF((EN+EIN(6):
) <= XVIB2(J)) GO TO 323                             
  322 CONTINUE                                                          
      J=NVIB2                                                           
  323 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J)) 
      QIN(5,I)=(EN+EIN(6))*(A*(EN+EIN(6))+B)/EN
      GO TO 325
  324 QIN(5,I)=YVIB2(NVIB2)*(XVIB2(NVIB2)/(EN+EIN(6)))**2
  325 QIN(5,I)=QIN(5,I)*APOP3/(1.0+APOP3)*1.D-16           
      IF(EN > 10.0):
 PEQIN(5,I)=PEQEL(2,(I-IOFFN(5)))                 
#                                                       
#  VIBRATION                              ANISOTROPIC ABOVE 10EV                          
  326 IF(EN <= EIN(6)) GO TO 331  
      IF(EN > XVIB2(NVIB2):
) GO TO 329                                  
      DO 327 J=2,NVIB2                                                  
      IF(EN <= XVIB2(J):
) GO TO 328                                      
  327 CONTINUE                                                          
      J=NVIB2                                                           
  328 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J)) 
      QIN(6,I)=(A*EN+B)
      GO TO 330
  329 QIN(6,I)=YVIB2(NVIB2)*(XVIB2(NVIB2)/EN)**2
  330 QIN(6,I)=QIN(6,I)/(1.0+APOP3)*1.D-16          
      IF(EN > 10.0):
 PEQIN(6,I)=PEQEL(2,(I-IOFFN(6)))             
#                                                          
# VIBRATION INELASTIC                 
  331 IF(EN <= EIN(7)) GO TO 341 
      IF(EN > XVIB3(NVIB3):
) GO TO 334 
      DO 332 J=2,NVIB3                                                  
      IF(EN <= XVIB3(J):
) GO TO 333                                      
  332 CONTINUE                                                          
      J=NVIB3                                                           
  333 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J)) 
      QIN(7,I)=(A*EN+B)        
      GO TO 335
  334 QIN(7,I)=YVIB3(NVIB3)*(XVIB3(NVIB3)/EN)**2
  335 QIN(7,I)=QIN(7,I)*1.D-16         
      IF(EN > 10.0):
 PEQIN(7,I)=PEQEL(2,(I-IOFFN(7)))                   
#                                                                       
# VIBRATION INELASTIC                                               
  341 IF(EN <= EIN(8)) GO TO 351    
      IF(EN > XVIB4(NVIB4):
) GO TO 344
      DO 342 J=2,NVIB4                                                  
      IF(EN <= XVIB4(J):
) GO TO 343                                      
  342 CONTINUE                                                          
      J=NVIB4                                                           
  343 A=(YVIB4(J)-YVIB4(J-1))/(XVIB4(J)-XVIB4(J-1))                     
      B=(XVIB4(J-1)*YVIB4(J)-XVIB4(J)*YVIB4(J-1))/(XVIB4(J-1)-XVIB4(J)) 
      QIN(8,I)=(A*EN+B)           
      GO TO 345
  344 QIN(8,I)=YVIB4(NVIB4)*(XVIB4(NVIB4)/EN)**2
  345 QIN(8,I)=QIN(8,I)*1.D-16
      IF(QIN(8,I):
 < 0.0) QIN(8,I)=0.0
      IF(EN > 10.0):
 PEQIN(8,I)=PEQEL(2,(I-IOFFN(8))) 
  351 CONTINUE    
#
# EXCITATIONS
#
#  
# EXCITATION TO TRIPLET AND SINGLET LEVELS
#
# FIRST TRIPLET AT  6.57 EV
      IF(EN <= EIN(9):
) GO TO 405
      IF(EN > XTR1(NTR1):
) GO TO 403                                   
      DO 401 J=2,NTR1                                              
      IF(EN <= XTR1(J):
) GO TO 402                                  
  401 CONTINUE                                                          
      J=NTR1                                       
  402 A=(YTR1(J)-YTR1(J-1))/(XTR1(J)-XTR1(J-1))                    
      B=(XTR1(J-1)*YTR1(J)-XTR1(J)*YTR1(J-1))/(XTR1(J-1)-XTR1(J))       
      QIN(9,I)=(A*EN+B)*1.D-16    
      GO TO 404
# SCALE BY 1/E**2 ABOVE XTR1(NTR1) EV
  403 QIN(9,I)=YTR1(NTR1)*(XTR1(NTR1)/EN)**2*1.D-16
  404 IF(EN <= (3.0*EIN(9))) GO TO 405
      PEQIN(9,I)=PEQEL(2,(I-IOFFN(9)))
#
# SINGLET DISSOCIATION AT  7.65  EV     BEF SCALING F=.000339          
  405 IF(EN <= (EIN(10))) GO TO 406
      QIN(10,I)=0.000339/(EIN(10)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(10)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(10)+E(3))
      IF(QIN(10,I):
 < 0.0) QIN(10,I)=0.0
      IF(EN <= (3.0*EIN(10):
)) GO TO 406
      PEQIN(10,I)=PEQEL(2,(I-IOFFN(10)))
# 
# SECOND TRIPLET AT  7.67 EV                                   
  406 IF(EN <= EIN(11)) GO TO 411
      IF(EN > XTR2(NTR2):
) GO TO 409  
      DO 407 J=2,NTR2                                                  
      IF(EN <= XTR2(J):
) GO TO 408                                      
  407 CONTINUE                                                          
      J=NTR2                                                           
  408 A=(YTR2(J)-YTR2(J-1))/(XTR2(J)-XTR2(J-1))                     
      B=(XTR2(J-1)*YTR2(J)-XTR2(J)*YTR2(J-1))/(XTR2(J-1)-XTR2(J)) 
      QIN(11,I)=(A*EN+B)*1.D-16
      GO TO 410
# SCALE BY 1/E**2 ABOVE XTR2(NTR2) EV
  409 QIN(11,I)=YTR2(NTR2)*(XTR2(NTR2)/EN)**2*1.D-16
  410 IF(EN <= (3.0*EIN(11))) GO TO 411
      PEQIN(11,I)=PEQEL(2,(I-IOFFN(11)))
#
# SINGLET DISSOCIATION AT  7.95  EV     BEF SCALING F=.004660
  411 IF(EN <= (EIN(12))) GO TO 412
      QIN(12,I)=0.004660/(EIN(12)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(12)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(12)+E(3))
      IF(QIN(12,I):
 < 0.0) QIN(12,I)=0.0
      IF(EN <= (3.0*EIN(12):
)) GO TO 412
      PEQIN(12,I)=PEQEL(2,(I-IOFFN(12)))
# SINGLET DISSOCIATION AT  8.25  EV     BEF SCALING F=.012816
  412 IF(EN <= (EIN(13))) GO TO 413
      QIN(13,I)=0.012816/(EIN(13)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(13)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(13)+E(3))
      IF(QIN(13,I):
 < 0.0) QIN(13,I)=0.0
      IF(EN <= (3.0*EIN(13):
)) GO TO 413
      PEQIN(13,I)=PEQEL(2,(I-IOFFN(13)))
# SINGLET DISSOCIATION AT  8.55  EV     BEF SCALING F=.037747
  413 IF(EN <= (EIN(14))) GO TO 414
      QIN(14,I)=0.037747/(EIN(14)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(14)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(14)+E(3))
      IF(QIN(14,I):
 < 0.0) QIN(14,I)=0.0
      IF(EN <= (3.0*EIN(14):
)) GO TO 414
      PEQIN(14,I)=PEQEL(2,(I-IOFFN(14)))
# SINGLET DISSOCIATION AT  8.85  EV     BEF SCALING F=.081783
  414 IF(EN <= (EIN(15))) GO TO 415
      QIN(15,I)=0.081783/(EIN(15)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(15)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(15)+E(3))
      IF(QIN(15,I):
 < 0.0) QIN(15,I)=0.0
      IF(EN <= (3.0*EIN(15):
)) GO TO 415
      PEQIN(15,I)=PEQEL(2,(I-IOFFN(15)))
# SINGLET DISSOCIATION AT  9.15  EV     BEF SCALING F=.084248
  415 IF(EN <= (EIN(16))) GO TO 416
      QIN(16,I)=0.084248/(EIN(16)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(16)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(16)+E(3))
      IF(QIN(16,I):
 < 0.0) QIN(16,I)=0.0
      IF(EN <= (3.0*EIN(16):
)) GO TO 416
      PEQIN(16,I)=PEQEL(2,(I-IOFFN(16)))
# SINGLET DISSOCIATION AT  9.45  EV     BEF SCALING F=.090347
  416 IF(EN <= (EIN(17))) GO TO 422
      QIN(17,I)=0.090347/(EIN(17)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(17)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(17)+E(3))
      IF(QIN(17,I):
 < 0.0) QIN(17,I)=0.0
      IF(EN <= (3.0*EIN(17):
)) GO TO 422
      PEQIN(17,I)=PEQEL(2,(I-IOFFN(17)))
#
# THIRD TRIPLET AT 9.59 EV                                   
  422 IF(EN <= EIN(18)) GO TO 417
      IF(EN > XTR3(NTR3):
) GO TO 425  
      DO 423 J=2,NTR3                                                  
      IF(EN <= XTR3(J):
) GO TO 424                                      
  423 CONTINUE                                                          
      J=NTR3                                                           
  424 A=(YTR3(J)-YTR3(J-1))/(XTR3(J)-XTR3(J-1))                     
      B=(XTR3(J-1)*YTR3(J)-XTR3(J)*YTR3(J-1))/(XTR3(J-1)-XTR3(J)) 
      QIN(18,I)=(A*EN+B)*1.D-16
      GO TO 426
# SCALE BY 1/E**2 ABOVE XTR3(NTR3) EV
  425 QIN(18,I)=YTR3(NTR3)*(XTR3(NTR3)/EN)**2*1.D-16     
  426 IF(EN <= (3.0*EIN(18))) GO TO 417
      PEQIN(18,I)=PEQEL(2,(I-IOFFN(18)))
#
# SINGLET DISSOCIATION AT  9.75  EV     BEF SCALING F=.098580
  417 IF(EN <= (EIN(19))) GO TO 418
      QIN(19,I)=0.098580/(EIN(19)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(19)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(19)+E(3))
      IF(QIN(19,I):
 < 0.0) QIN(19,I)=0.0
      IF(EN <= (3.0*EIN(19):
)) GO TO 418
      PEQIN(19,I)=PEQEL(2,(I-IOFFN(19)))
# SINGLET DISSOCIATION AT  10.05 EV     BEF SCALING F=.10415 
  418 IF(EN <= (EIN(20))) GO TO 419
      QIN(20,I)=0.104150/(EIN(20)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(20)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(20)+E(3))
      IF(QIN(20,I):
 < 0.0) QIN(20,I)=0.0
      IF(EN <= (3.0*EIN(20):
)) GO TO 419
      PEQIN(20,I)=PEQEL(2,(I-IOFFN(20)))
# SINGLET DISSOCIATION AT  10.35 EV     BEF SCALING F=.11379 
  419 IF(EN <= (EIN(21))) GO TO 420
      QIN(21,I)=0.113790/(EIN(21)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(21)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(21)+E(3))
      IF(QIN(21,I):
 < 0.0) QIN(21,I)=0.0
      IF(EN <= (3.0*EIN(21):
)) GO TO 420
      PEQIN(21,I)=PEQEL(2,(I-IOFFN(21)))
# SINGLET DISSOCIATION AT  10.65 EV     BEF SCALING F=.12674 
  420 IF(EN <= (EIN(22))) GO TO 421
      QIN(22,I)=0.126740/(EIN(22)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(22)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(22)+E(3))
      IF(QIN(22,I):
 < 0.0) QIN(22,I)=0.0
      IF(EN <= (3.0*EIN(22):
)) GO TO 421
      PEQIN(22,I)=PEQEL(2,(I-IOFFN(22)))
# SINGLET DISSOCIATION AT  10.9  EV     BEF SCALING F=.096356
  421 IF(EN <= (EIN(23))) GO TO 427
      QIN(23,I)=0.096356/(EIN(23)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(23)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(23)+E(3))
      IF(QIN(23,I):
 < 0.0) QIN(23,I)=0.0
      IF(EN <= (3.0*EIN(23):
)) GO TO 427
      PEQIN(23,I)=PEQEL(2,(I-IOFFN(23)))
# SINGLET DISSOCIATION AT 11.1   EV     BEF SCALING F=.10387 
  427 IF(EN <= (EIN(24))) GO TO 428
      QIN(24,I)=0.103870/(EIN(24)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(24)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(24)+E(3))
      IF(QIN(24,I):
 < 0.0) QIN(24,I)=0.0
      IF(EN <= (3.0*EIN(24):
)) GO TO 428
      PEQIN(24,I)=PEQEL(2,(I-IOFFN(24)))
# SINGLET DISSOCIATION AT 11.3   EV     BEF SCALING F=.10183 
  428 IF(EN <= (EIN(25))) GO TO 429
      QIN(25,I)=0.101830/(EIN(25)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(25)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(25)+E(3))
      IF(QIN(25,I):
 < 0.0) QIN(25,I)=0.0
      IF(EN <= (3.0*EIN(25):
)) GO TO 429
      PEQIN(25,I)=PEQEL(2,(I-IOFFN(25)))
# SINGLET DISSOCIATION AT 11.5   EV     BEF SCALING F=.096718
  429 IF(EN <= (EIN(26))) GO TO 430
      QIN(26,I)=0.096718/(EIN(26)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(26)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(26)+E(3))
      IF(QIN(26,I):
 < 0.0) QIN(26,I)=0.0
      IF(EN <= (3.0*EIN(26):
)) GO TO 430
      PEQIN(26,I)=PEQEL(2,(I-IOFFN(26)))
# SINGLET DISSOCIATION AT 11.7   EV     BEF SCALING F=.090149
  430 IF(EN <= (EIN(27))) GO TO 431
      QIN(27,I)=0.090149/(EIN(27)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(27)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(27)+E(3))
      IF(QIN(27,I):
 < 0.0) QIN(27,I)=0.0
      IF(EN <= (3.0*EIN(27):
)) GO TO 431
      PEQIN(27,I)=PEQEL(2,(I-IOFFN(27)))
# SINGLET DISSOCIATION AT 11.9   EV     BEF SCALING F=.086661
  431 IF(EN <= (EIN(28))) GO TO 432
      QIN(28,I)=0.086661/(EIN(28)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(28)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(28)+E(3))
      IF(QIN(28,I):
 < 0.0) QIN(28,I)=0.0
      IF(EN <= (3.0*EIN(28):
)) GO TO 432
      PEQIN(28,I)=PEQEL(2,(I-IOFFN(28)))
# SINGLET DISSOCIATION AT 12.1   EV     BEF SCALING F=.086097
  432 IF(EN <= (EIN(29))) GO TO 433
      QIN(29,I)=0.086097/(EIN(29)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(29)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(29)+E(3))
      IF(QIN(29,I):
 < 0.0) QIN(29,I)=0.0
      IF(EN <= (3.0*EIN(29):
)) GO TO 433
      PEQIN(29,I)=PEQEL(2,(I-IOFFN(29)))
# SINGLET DISSOCIATION AT 12.3   EV     BEF SCALING F=.083324
  433 IF(EN <= (EIN(30))) GO TO 434
      QIN(30,I)=0.083324/(EIN(30)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(30)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(30)+E(3))
      IF(QIN(30,I):
 < 0.0) QIN(30,I)=0.0
      IF(EN <= (3.0*EIN(30):
)) GO TO 434
      PEQIN(30,I)=PEQEL(2,(I-IOFFN(30)))
# SINGLET DISSOCIATION AT 12.5   EV     BEF SCALING F=.079943
  434 IF(EN <= (EIN(31))) GO TO 435
      QIN(31,I)=0.079943/(EIN(31)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(31)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(31)+E(3))
      IF(QIN(31,I):
 < 0.0) QIN(31,I)=0.0
      IF(EN <= (3.0*EIN(31):
)) GO TO 435
      PEQIN(31,I)=PEQEL(2,(I-IOFFN(31)))
# SINGLET DISSOCIATION AT 12.7   EV     BEF SCALING F=.077210
  435 IF(EN <= (EIN(32))) GO TO 436
      QIN(32,I)=0.077210/(EIN(32)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(32)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(32)+E(3))
      IF(QIN(32,I):
 < 0.0) QIN(32,I)=0.0
      IF(EN <= (3.0*EIN(32):
)) GO TO 436
      PEQIN(32,I)=PEQEL(2,(I-IOFFN(32)))
# SINGLET DISSOCIATION AT 12.9   EV     BEF SCALING F=.070368
  436 IF(EN <= (EIN(33))) GO TO 437
      QIN(33,I)=0.070368/(EIN(33)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(33)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(33)+E(3))
      IF(QIN(33,I):
 < 0.0) QIN(33,I)=0.0
      IF(EN <= (2.0*EIN(33):
)) GO TO 437
      PEQIN(33,I)=PEQEL(2,(I-IOFFN(33)))
# SINGLET DISSOCIATION AT 13.1   EV     BEF SCALING F=.061365
  437 IF(EN <= (EIN(34))) GO TO 438
      QIN(34,I)=0.061365/(EIN(34)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(34)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(34)+E(3))
      IF(QIN(34,I):
 < 0.0) QIN(34,I)=0.0
      IF(EN <= (2.0*EIN(34):
)) GO TO 438
      PEQIN(34,I)=PEQEL(2,(I-IOFFN(34)))
# SINGLET DISSOCIATION AT 13.3   EV     BEF SCALING F=.053208
  438 IF(EN <= (EIN(35))) GO TO 439
      QIN(35,I)=0.053208/(EIN(35)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(35)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(35)+E(3))
      IF(QIN(35,I):
 < 0.0) QIN(35,I)=0.0
      IF(EN <= (2.0*EIN(35):
)) GO TO 439
      PEQIN(35,I)=PEQEL(2,(I-IOFFN(35)))
# SINGLET DISSOCIATION AT 13.5   EV     BEF SCALING F=.046320
  439 IF(EN <= (EIN(36))) GO TO 440
      QIN(36,I)=0.046320/(EIN(36)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(36)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(36)+E(3))
      IF(QIN(36,I):
 < 0.0) QIN(36,I)=0.0
      IF(EN <= (2.0*EIN(36):
)) GO TO 440
      PEQIN(36,I)=PEQEL(2,(I-IOFFN(36)))
# SINGLET DISSOCIATION AT 13.7   EV     BEF SCALING F=.042827
  440 IF(EN <= (EIN(37))) GO TO 441
      QIN(37,I)=0.042827/(EIN(37)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(37)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(37)+E(3))
      IF(QIN(37,I):
 < 0.0) QIN(37,I)=0.0
      IF(EN <= (2.0*EIN(37):
)) GO TO 441
      PEQIN(37,I)=PEQEL(2,(I-IOFFN(37)))
# SINGLET DISSOCIATION AT 13.9   EV     BEF SCALING F=.038898
  441 IF(EN <= (EIN(38))) GO TO 442
      QIN(38,I)=0.038898/(EIN(38)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(38)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(38)+E(3))
      IF(QIN(38,I):
 < 0.0) QIN(38,I)=0.0
      IF(EN <= (2.0*EIN(38):
)) GO TO 442
      PEQIN(38,I)=PEQEL(2,(I-IOFFN(38)))
# SINGLET DISSOCIATION AT 14.1   EV     BEF SCALING F=.035930
  442 IF(EN <= (EIN(39))) GO TO 443
      QIN(39,I)=0.035930/(EIN(39)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(39)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(39)+E(3))
      IF(QIN(39,I):
 < 0.0) QIN(39,I)=0.0
      IF(EN <= (2.0*EIN(39):
)) GO TO 443
      PEQIN(39,I)=PEQEL(2,(I-IOFFN(39)))
# SINGLET DISSOCIATION AT 14.3   EV     BEF SCALING F=.033632
  443 IF(EN <= (EIN(40))) GO TO 444
      QIN(40,I)=0.033632/(EIN(40)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(40)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(40)+E(3))
      IF(QIN(40,I):
 < 0.0) QIN(40,I)=0.0
      IF(EN <= (2.0*EIN(40):
)) GO TO 444
      PEQIN(40,I)=PEQEL(2,(I-IOFFN(40)))
# SINGLET DISSOCIATION AT 14.5   EV     BEF SCALING F=.030562
  444 IF(EN <= (EIN(41))) GO TO 445
      QIN(41,I)=0.030562/(EIN(41)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(41)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(41)+E(3))
      IF(QIN(41,I):
 < 0.0) QIN(41,I)=0.0
      IF(EN <= (2.0*EIN(41):
)) GO TO 445
      PEQIN(41,I)=PEQEL(2,(I-IOFFN(41)))
# SINGLET DISSOCIATION AT 14.7   EV     BEF SCALING F=.028559
  445 IF(EN <= (EIN(42))) GO TO 446
      QIN(42,I)=0.028559/(EIN(42)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(42)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(42)+E(3))
      IF(QIN(42,I):
 < 0.0) QIN(42,I)=0.0
      IF(EN <= (2.0*EIN(42):
)) GO TO 446
      PEQIN(42,I)=PEQEL(2,(I-IOFFN(42)))
# SINGLET DISSOCIATION AT 14.9   EV     BEF SCALING F=.027052
  446 IF(EN <= (EIN(43))) GO TO 447
      QIN(43,I)=0.027052/(EIN(43)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(43)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(43)+E(3))
      IF(QIN(43,I):
 < 0.0) QIN(43,I)=0.0
      IF(EN <= (2.0*EIN(43):
)) GO TO 447
      PEQIN(43,I)=PEQEL(2,(I-IOFFN(43)))
# SINGLET DISSOCIATION AT 15.2   EV     BEF SCALING F=.048051
  447 IF(EN <= (EIN(44))) GO TO 448
      QIN(44,I)=0.048051/(EIN(44)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(44)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(44)+E(3))
      IF(QIN(44,I):
 < 0.0) QIN(44,I)=0.0
      IF(EN <= (2.0*EIN(44):
)) GO TO 448
      PEQIN(44,I)=PEQEL(2,(I-IOFFN(44)))
# SINGLET DISSOCIATION AT 15.6   EV     BEF SCALING F=.036375
  448 IF(EN <= (EIN(45))) GO TO 449
      QIN(45,I)=0.036375/(EIN(45)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(45)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(45)+E(3))
      IF(QIN(45,I):
 < 0.0) QIN(45,I)=0.0
      IF(EN <= (2.0*EIN(45):
)) GO TO 449
      PEQIN(45,I)=PEQEL(2,(I-IOFFN(45)))
# SINGLET DISSOCIATION AT 16.0   EV     BEF SCALING F=.020165
  449 IF(EN <= (EIN(46))) GO TO 450
      QIN(46,I)=0.020165/(EIN(46)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(46)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(46)+E(3))
      IF(QIN(46,I):
 < 0.0) QIN(46,I)=0.0
      IF(EN <= (2.0*EIN(46):
)) GO TO 450
      PEQIN(46,I)=PEQEL(2,(I-IOFFN(46)))
# SINGLET DISSOCIATION AT 16.4   EV     BEF SCALING F=.010038
  450 IF(EN <= (EIN(47))) GO TO 451
      QIN(47,I)=0.010038/(EIN(47)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(47)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(47)+E(3))
      IF(QIN(47,I):
 < 0.0) QIN(47,I)=0.0
      IF(EN <= (2.0*EIN(47):
)) GO TO 451
      PEQIN(47,I)=PEQEL(2,(I-IOFFN(47)))
# SINGLET DISSOCIATION AT 16.8   EV     BEF SCALING F=.0054441
  451 IF(EN <= (EIN(48))) GO TO 452
      QIN(48,I)=0.0054441/(EIN(48)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(48)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(48)+E(3))
      IF(QIN(48,I):
 < 0.0) QIN(48,I)=0.0
      IF(EN <= (2.0*EIN(48):
)) GO TO 452
      PEQIN(48,I)=PEQEL(2,(I-IOFFN(48)))
# SINGLET DISSOCIATION AT 17.25   EV     BEF SCALING F=.0050790
  452 IF(EN <= (EIN(49))) GO TO 453
      QIN(49,I)=0.0050790/(EIN(49)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(49)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(49)+E(3))
      IF(QIN(49,I):
 < 0.0) QIN(49,I)=0.0
      IF(EN <= (2.0*EIN(49):
)) GO TO 453
      PEQIN(49,I)=PEQEL(2,(I-IOFFN(49)))
# SINGLET DISSOCIATION AT 17.75   EV     BEF SCALING F=.0057699
  453 IF(EN <= (EIN(50))) GO TO 454
      QIN(50,I)=0.0057699/(EIN(50)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(50)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(50)+E(3))
      IF(QIN(50,I):
 < 0.0) QIN(50,I)=0.0
      IF(EN <= (2.0*EIN(50):
)) GO TO 454
      PEQIN(50,I)=PEQEL(2,(I-IOFFN(50)))
# SINGLET DISSOCIATION AT 18.25   EV     BEF SCALING F=.0072715
  454 IF(EN <= (EIN(51))) GO TO 455
      QIN(51,I)=0.0072715/(EIN(51)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(51)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(51)+E(3))
      IF(QIN(51,I):
 < 0.0) QIN(51,I)=0.0
      IF(EN <= (2.0*EIN(51):
)) GO TO 455
      PEQIN(51,I)=PEQEL(2,(I-IOFFN(51)))
# SINGLET DISSOCIATION AT 18.75   EV     BEF SCALING F=.010296
  455 IF(EN <= (EIN(52))) GO TO 456
      QIN(52,I)=0.010296/(EIN(52)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(52)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(52)+E(3))
      IF(QIN(52,I):
 < 0.0) QIN(52,I)=0.0
      IF(EN <= (2.0*EIN(52):
)) GO TO 456
      PEQIN(52,I)=PEQEL(2,(I-IOFFN(52)))
# SINGLET DISSOCIATION AT 19.25   EV     BEF SCALING F=.014152
  456 IF(EN <= (EIN(53))) GO TO 457
      QIN(53,I)=0.014152/(EIN(53)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(53)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(53)+E(3))
      IF(QIN(53,I):
 < 0.0) QIN(53,I)=0.0
      IF(EN <= (2.0*EIN(53):
)) GO TO 457
      PEQIN(53,I)=PEQEL(2,(I-IOFFN(53)))
# SINGLET DISSOCIATION AT 19.75   EV     BEF SCALING F=.013698
  457 IF(EN <= (EIN(54))) GO TO 458
      QIN(54,I)=0.013698/(EIN(54)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(54)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(54)+E(3))
      IF(QIN(54,I):
 < 0.0) QIN(54,I)=0.0
      IF(EN <= (2.0*EIN(54):
)) GO TO 458
      PEQIN(54,I)=PEQEL(2,(I-IOFFN(54)))
# SINGLET DISSOCIATION AT 20.25   EV     BEF SCALING F=.010362
  458 IF(EN <= (EIN(55))) GO TO 459
      QIN(55,I)=0.010362/(EIN(55)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(55)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(55)+E(3))
      IF(QIN(55,I):
 < 0.0) QIN(55,I)=0.0
      IF(EN <= (2.0*EIN(55):
)) GO TO 459
      PEQIN(55,I)=PEQEL(2,(I-IOFFN(55)))
# SINGLET DISSOCIATION AT 20.75   EV     BEF SCALING F=.0088401
  459 IF(EN <= (EIN(56))) GO TO 460
      QIN(56,I)=0.0088401/(EIN(56)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(56)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(56)+E(3))
      IF(QIN(56,I):
 < 0.0) QIN(56,I)=0.0
      IF(EN <= (2.0*EIN(56):
)) GO TO 460
      PEQIN(56,I)=PEQEL(2,(I-IOFFN(56)))
# SINGLET DISSOCIATION AT 21.5    EV     BEF SCALING F=.022195
  460 IF(EN <= (EIN(57))) GO TO 461
      QIN(57,I)=0.022195/(EIN(57)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(57)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(57)+E(3))
      IF(QIN(57,I):
 < 0.0) QIN(57,I)=0.0
      IF(EN <= (2.0*EIN(57):
)) GO TO 461
      PEQIN(57,I)=PEQEL(2,(I-IOFFN(57)))
# SINGLET DISSOCIATION AT 22.5    EV     BEF SCALING F=.019172
  461 IF(EN <= (EIN(58))) GO TO 462
      QIN(58,I)=0.019172/(EIN(58)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(58)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(58)+E(3))
      IF(QIN(58,I):
 < 0.0) QIN(58,I)=0.0
      IF(EN <= (2.0*EIN(58):
)) GO TO 462
      PEQIN(58,I)=PEQEL(2,(I-IOFFN(58)))
# SINGLET DISSOCIATION AT 23.5    EV     BEF SCALING F=.011553
  462 IF(EN <= (EIN(59))) GO TO 463
      QIN(59,I)=0.011553/(EIN(59)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(59)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(59)+E(3))
      IF(QIN(59,I):
 < 0.0) QIN(59,I)=0.0
      IF(EN <= (2.0*EIN(59):
)) GO TO 463
      PEQIN(59,I)=PEQEL(2,(I-IOFFN(59))) 
# SINGLET DISSOCIATION AT 24.5    EV     BEF SCALING F=.0089679
  463 IF(EN <= (EIN(60))) GO TO 464
      QIN(60,I)=0.0089679/(EIN(60)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(60)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(60)+E(3))
      IF(QIN(60,I):
 < 0.0) QIN(60,I)=0.0
      IF(EN <= (2.0*EIN(60):
)) GO TO 464
      PEQIN(60,I)=PEQEL(2,(I-IOFFN(60))) 
# SINGLET DISSOCIATION AT 25.5    EV     BEF SCALING F=.0064815
  464 IF(EN <= (EIN(61))) GO TO 465
      QIN(61,I)=0.0064815/(EIN(61)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(61)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(61)+E(3))
      IF(QIN(61,I):
 < 0.0) QIN(61,I)=0.0
      IF(EN <= (2.0*EIN(61):
)) GO TO 465
      PEQIN(61,I)=PEQEL(2,(I-IOFFN(61))) 
#
# FOURTH TRIPLET AT 26.0  EV                                   
  465 IF(EN <= EIN(62)) GO TO 470
      IF(EN > XTR4(NTR4):
) GO TO 468 
      DO 466 J=2,NTR4                                                  
      IF(EN <= XTR4(J):
) GO TO 467                                      
  466 CONTINUE                                                          
      J=NTR4                                                           
  467 A=(YTR4(J)-YTR4(J-1))/(XTR4(J)-XTR4(J-1))                     
      B=(XTR4(J-1)*YTR4(J)-XTR4(J)*YTR4(J-1))/(XTR4(J-1)-XTR4(J)) 
      QIN(62,I)=(A*EN+B)*1.D-16
      GO TO 469
# SCALE BY 1/E**2 ABOVE XTR4(NTR4) EV
  468 QIN(62,I)=YTR4(NTR4)*(XTR4(NTR4)/EN)**2*1.D-16     
  469 IF(EN <= (3.0*EIN(62))) GO TO 470
      PEQIN(62,I)=PEQEL(2,(I-IOFFN(62)))
#
# SINGLET DISSOCIATION AT 26.5    EV     BEF SCALING F=.0035484
  470 IF(EN <= (EIN(63))) GO TO 471
      QIN(63,I)=0.0035484/(EIN(63)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(63)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(63)+E(3))
      IF(QIN(63,I):
 < 0.0) QIN(63,I)=0.0
      IF(EN <= (2.0*EIN(63):
)) GO TO 471
      PEQIN(63,I)=PEQEL(2,(I-IOFFN(63))) 
# SINGLET DISSOCIATION AT 27.5    EV     BEF SCALING F=.0010872
  471 IF(EN <= (EIN(64))) GO TO 472
      QIN(64,I)=0.0010872/(EIN(64)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(64)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(64)+E(3))
      IF(QIN(64,I):
 < 0.0) QIN(64,I)=0.0
      IF(EN <= (2.0*EIN(64):
)) GO TO 472
      PEQIN(64,I)=PEQEL(2,(I-IOFFN(64))) 
  472 CONTINUE
# LOAD BREMSSTRAHLUNG X-SECTION
      QIN(65,I)=0.0
      QIN(66,I)=0.0
#     IF(EN <= 1000.) GO TO 800
#     DO 780 J=2,NBRM
#     IF(EN <= EBRM(J)) GO TO 790
# 780 CONTINUE
#     J=NBREM
# 790 A=(math.log(Z6T(J))-math.log(Z6T(J-1)))/(EBRM(J)-EBRM(J-1))
#     B=(math.log(Z6T(J))*EBRM(J-1)-math.log(Z6T(J-1))*EBRM(J))/
#    /(EBRM(J-1)-EBRM(J))
#     A1=(math.log(Z1T(J))-math.log(Z1T(J-1)))/(EBRM(J)-EBRM(J-1))
#     B1=(math.log(Z1T(J))*EBRM(J-1)-math.log(Z1T(J-1))*EBRM(J))/
#    /(EBRM(J-1)-EBRM(J))
#     QIN(65,I)=math.exp(A*EN+B)*3.D-24
#     QIN(66,I)=math.exp(A1*EN+B1)*8.D-24
# 800 CONTINUE
#
#  LOAD NULL COLLISIONS
#
# LIGHT EMISSION FROM H ALPHA
# MOHLMANN AND DE HEER CHEM.PHYS.19(1979)233
      QNULL(1,I)=0.0
      IF(EN <= XNUL1(1):
) GO TO 805
      IF(EN > XNUL1(NUL1):
) GO TO 803
      DO 801 J=2,NUL1
      IF(EN <= XNUL1(J):
) GO TO 802
  801 CONTINUE
      J=NUL1
  802 A=(YNUL1(J)-YNUL1(J-1))/(XNUL1(J)-XNUL1(J-1))
      B=(XNUL1(J-1)*YNUL1(J)-XNUL1(J)*YNUL1(J-1))/(XNUL1(J-1)-XNUL1(J))
      QNULL(1,I)=(A*EN+B)*1.D-16*0.9*SCLN(1)    
      GO TO 805
# SCALE BY 1/E ABOVE XNUL1(NUL1)) EV
  803 QNULL(1,I)=YNUL1(NUL1)*(XNUL1(NUL1)/EN)*1.D-16*0.9*SCLN(1)    
#
# LIGHT EMISSION FROM CH2(A2DELTA - X2PI)
#  MOHLMANN AND DE HEER  CHEM.PHYS.19(1979)233 
#  
  805 QNULL(2,I)=0.0
      IF(EN <= XNUL2(1):
) GO TO 810
      IF(EN > XNUL2(NUL2):
) GO TO 808
      DO 806 J=2,NUL2
      IF(EN <= XNUL2(J):
) GO TO 807
  806 CONTINUE
      J=NUL2
  807 A=(YNUL2(J)-YNUL2(J-1))/(XNUL2(J)-XNUL2(J-1))
      B=(XNUL2(J-1)*YNUL2(J)-XNUL2(J)*YNUL2(J-1))/(XNUL2(J-1)-XNUL2(J))
      QNULL(2,I)=(A*EN+B)*1.D-16*SCLN(2)
      GO TO 810
# SCALE BY 1/E ABOVE XNUL2(NUL2)) EV
  808 QNULL(2,I)=YNUL2(NUL2)*(XNUL2(NUL2)/EN)*1.D-16*SCLN(2)  
#  
# LIGHT EMISSION FROM CH2(A2DELTA - X2PI)
#  MOHLMANN AND DE HEER  CHEM.PHYS.19(1979)233 
#  
  810 CONTINUE
#
  815 CONTINUE
      SUMEXC=0.0
      DO 850 J=9,NIN
  850 SUMEXC=SUMEXC+QIN(J,I)
      SUMION=0.0
      DO 851 J=1,NION
  851 SUMION=SUMION+QION(J,I)
      SUMATT=0.0
      DO 852 J=1,NATT
  852 SUMATT=SUMATT+QATT(J,I)
      SUMVIB=0.0
      DO 853 J=1,8
  853 SUMVIB=SUMVIB+QIN(J,I)
      SUMELMT=QMT
      SUMEL=QEL
      SUMTOTM=SUMVIB+SUMEXC+SUMION+SUMATT+SUMELMT
      SUMTOT=SUMVIB+SUMEXC+SUMION+SUMATT+SUMEL
      SUMNONEL=SUMVIB+SUMEXC+SUMION+SUMATT
      SUMTRIPLET=QIN(9,I)+QIN(11,I)+QIN(18,I)+QIN(62,I) 
      SUMDIPOLE=SUMEXC-SUMTRIPLET
#
#     WRITE(6,887) EN,QIN(1,I),QIN(2,I)
# 887 FORMAT(' EN = ',D12.4,' TORS SUP = ',D12.4,' TORSION = ',D12.4)
#     WRITE(6,888) EN,QMT,SUMVIB,SUMEXC,SUMION,SUMATT,SUMNONEL,SUMTOTM,
#    /SUMTRIPLET,SUMDIPOLE
# 888 FORMAT(' EN=',D12.4,' QMT =',D11.3,' SUMVIB=',D11.3,' SUMEXC =',
#    /D11.3,' SUMION =',D11.3,' SUMATT =',D11.3,' SUMNONEL =',D11.3,
#    /' SUMTOTM =',D11.3,/,' SUMTRIPLET =',D12.3,' SUMDIPOLE =',D12.3) 
#     WRITE(6,889) EN,SUMNONEL,SUMTOT
# 889 FORMAT(' EN=',D12.4,' INELASTIC=',D12.4,' TOTAL=',D12.4)
#
 1000 CONTINUE                                                          
#  SAVE COMPUTE TIME            
      DO 1010 K=1,NIN
      IF(EFINAL <= EIN(K):
) :
       NIN=K-1
       GO TO 1011
      # endIF      
 1010 CONTINUE
 1011 CONTINUE
#     IF(EFINAL > 1000.) NIN=66
#                               
      RETURN                                                            
      # end
      def GAS11(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
#    /QNULL,NNULL,NCO,ECO,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,
#    /SCRPT)  
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(4000),EROOT(4000),QT1(4000),QT2(4000),
     /QT3(4000),QT4(4000)
      COMMON/DENS/DEN(4000)
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)    
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)     
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30)
     /,EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      DIMENSION XEN(157),YELM(157),YELT(157),YEPS(157),
     /XION(42),YION(42),YINC(42),XATT(10),YATT(10),XKSH(83),YKSH(83),  
     /XVIB1(30),YVIB1(30),XVIB2(24),YVIB2(24),XVIB3(24),YVIB3(24),      
     /XVIB4(29),YVIB4(29),XVIB5(15),YVIB5(15),XEXC1(16),YEXC1(16),
     /XEXC2(16),YEXC2(16),IOFFN(24),IOFFION(10)
      DIMENSION Z6T(25),Z1T(25),EBRM(25)
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME     
# ELASTIC                                          
      DATA XEN/0.00,0.001,0.002,0.003,0.004,0.005,0.007,0.01,0.014,0.02,
     /.025,0.03,.035,0.04,0.05,0.06,0.07,0.08,0.09,0.10,
     /0.11,0.12,0.13,0.14,0.16,0.18,0.20,0.23,0.26,0.30,
     /0.35,0.40,0.50,0.60,0.80,1.00,1.40,2.00,3.00,4.00,
     /5.00,6.00,7.00,8.00,9.00,10.0,12.5,15.0,20.0,25.0,
     /30.0,40.0,50.0,60.0,70.0,80.0,100.,120.,140.,170.,
     /200.,250.,300.,400.,500.,750.,1000.,1250.,1500.,1750.,
     /2000.,2500.,3000.,3500.,4000.,4500.,5000.,6000.,7000.,8000.,
     /9000.,1.D4,1.25D4,1.5D4,1.75D4,2.D4,2.5D4,3.D4,3.5D4,4.D4,
     /4.5D4,5.D4,6.D4,7.D4,8.D4,9.D4,1.D5,1.25D5,1.5D5,1.75D5,
     /2.0D5,2.5D5,3.D5,3.5D5,4.D5,4.5D5,5.D5,6.D5,7.D5,8.D5,
     /9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,2.0D6,2.5D6,3.0D6,3.5D6,4.0D6,
     /4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,
     /2.0D7,2.5D7,3.0D7,3.5D7,4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,
     /9.0D7,1.0D8,1.25D8,1.5D8,1.75D8,2.0D8,2.5D8,3.0D8,3.5D8,4.0D8,
     /4.5D8,5.0D8,6.0D8,7.0D8,8.0D8,9.0D8,1.0D9/
# ELASTIC MOMENTUM TRANSFER X-SECTION
      DATA YELM/255.,255.,255.,255.,255.,210.,150.,105.,74.5,52.0,     
     /41.4,34.5,29.6,25.9,20.7,17.2,14.8,13.0,11.7,10.8,
     /10.0,9.30,8.60,8.00,7.00,5.50,3.50,3.60,4.80,7.50,
     /9.60,11.2,12.9,13.8,14.7,15.3,16.1,17.3,19.8,23.2,
     /27.8,32.3,35.0,35.0,33.0,30.0,25.0,21.5,17.0,13.7,
     /11.5,9.00,7.30,6.10,5.20,4.50,3.50,2.80,2.21,1.72,
     /1.40,1.10,0.87,0.61,0.47,0.28,.171,.116,.0848,.0648,
     /.0505,.0345,.0249,.0189,.0149,.0120,.00996,.00717,.00542,.00426,
     /.00344,.00284,.00190,.00136,.00103,.000807,.000539,.000387,
     /.000293,.000231,
     /1.87D-4,1.55D-4,1.12D-4,8.50D-5,6.72D-5,5.46D-5,4.55D-5,3.10D-5,
     /2.27D-5,1.75D-5,
     /1.40D-5,9.71D-6,7.24D-6,5.66D-6,4.59D-6,3.81D-6,3.24D-6,2.44D-6,
     /1.93D-6,1.57D-6,
     /1.31D-6,1.12D-6,8.01D-7,6.04D-7,4.75D-7,3.84D-7,2.69D-7,2.00D-7,
     /1.55D-7,1.24D-7,
     /1.02D-7,8.52D-8,6.23D-8,4.77D-8,3.78D-8,3.07D-8,2.55D-8,1.71D-8,
     /1.23D-8,9.30D-9,
     /7.28D-9,4.83D-9,3.45D-9,2.59D-9,2.02D-9,1.61D-9,1.32D-9,9.36D-10,
     /6.97D-10,5.39D-10,
     /4.29D-10,3.50D-10,2.26D-10,1.58D-10,1.16D-10,8.92D-11,5.72D-11,
     /3.98D-11,2.92D-11,2.24D-11,
     /1.77D-11,1.44D-11,9.97D-12,7.33D-12,5.61D-12,4.43D-12,3.59D-12/
# ELASTIC X-SECTION ASSUMED ISOTROPIC BELOW     2.0 EV
      DATA YELT/255.,255.,255.,255.,255.,210.,150.,105.,74.5,52.0,     
     /41.4,34.5,29.6,25.9,20.7,17.2,14.8,13.0,11.7,10.8,
     /10.0,9.30,8.60,8.00,7.00,5.50,3.50,3.60,4.80,7.50,
     /9.60,11.2,12.9,13.8,14.7,15.3,16.1,17.3,25.0,32.0,
     /39.0,43.0,46.0,48.0,48.0,46.0,43.5,41.5,37.0,32.0,
     /27.5,22.5,19.0,16.5,14.7,13.3,11.0,9.60,8.40,7.20,
     /6.40,5.30,4.60,3.65,3.05,2.20,1.72,1.42,1.21,1.08,
     /0.96,0.80,.690,.600,.545,.490,.450,.385,.335,.305,
     /.275,.250,.210,.180,.158,.142,.119,.100,.0873,.0774,
     /.0698,.0636,.0545,.0479,.0443,.0392,.0361,.0306,.0270,.0244,
     /.0225,.0198,.0180,.0168,.0158,.0151,.0146,.0138,.0132,.0128,
     /.0125,.0123,.0119,.0116,.0114,.0113,.0112,.0111,.0110,.0110,
     /.0110,.0110,.0109,.0109,.0109,.0109,.0109,30*.01086/
# EPSILON FOR ELASTIC ANGULAR DISTRIBUTION
# EPSILON=1.0-YEPS
      DATA YEPS/38*1.0,.6940,.6011,
     /.5847,.6369,.6507,.6068,.5511,.5054,.4106,.3465,.2851,.2545,
     /.2451,.2283,.2141,.2015,.1880,.1753,.1593,.1393,.1191,.1030,
     /.0903,.0836,.0730,.0610,.0544,.0415,.0296,.0227,.0185,.0151,
     /.01272,.00985,.00786,.00662,.00555,.00484,.00427,.00346,.00291,
     /.00244,
     /.00213,.00190,.001449,.001171,9.84D-4,8.38D-4,6.43D-4,5.35D-4,
     /4.54D-4,3.97D-4,
     /3.50D-4,3.14D-4,2.58D-4,2.19D-4,1.83D-4,1.658D-4,1.481D-4,
     /1.157D-4,9.37D-5,7.84D-5,
     /6.69D-5,5.12D-5,4.11D-5,3.37D-5,2.86D-5,2.45D-5,2.12D-5,1.65D-5,
     /1.34D-5,1.11D-5,
     /9.33D-6,7.99D-6,5.75D-6,4.32D-6,3.37D-6,2.71D-6,1.87D-6,1.37D-6,
     /1.04D-6,8.24D-7,
     /6.67D-7,5.52D-7,3.95D-7,2.97D-7,2.32D-7,1.86D-7,1.52D-7,9.94D-8,
     /7.00D-8,5.20D-8,
     /4.01D-8,2.59D-8,1.81D-8,1.34D-8,1.03D-8,8.12D-9,6.58D-9,4.56D-9,
     /3.34D-9,2.55D-9,
     /2.00D-9,1.62D-9,1.02D-9,7.00D-10,5.07D-10,3.84D-10,2.41D-10,
     /1.65D-10,1.19D-10,9.00D-11,
     /7.1D-11,5.7D-11,3.9D-11,2.8D-11,2.1D-11,1.6D-11,1.3D-11/
# IONISATION
      DATA XION/10.67,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0,19.0,
     /20.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,75.0,
     /85.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,
     /450.,500.,550.,600.,650.,700.,750.,800.,850.,900.,
     /950.,1000./
# GROSS IONISATION
      DATA YION/0.00,.004,.070,0.18,0.37,0.59,0.84,1.10,1.60,2.20,
     /3.00,5.11,6.71,8.00,8.82,9.51,10.0,10.5,10.7,10.8,
     /10.7,10.5,10.0,9.41,8.87,8.33,7.29,6.51,5.90,5.40,
     /4.99,4.65,4.36,4.11,3.88,3.69,3.52,3.36,3.22,3.09,
     /2.98,2.872/
# K-SHELL IONISATION X-SECTION CARBON (MUTILPY BY 4 FOR MOLECULE)  
      DATA XKSH/285.,298.,307.,316.,325.,335.,345.,365.,398.,422.,
     /447.,473.,501.,531.,613.,668.,708.,750.,817.,917.,
     /1000.,1122.,1296.,1496.,1679.,1884.,2054.,2238.,2512.,2985.,
     /3981.,5012.,7079.,1.0D4,1.50D4,2.05D4,2.51D4,3.07D4,4.10D4,5.01D4,
     /6.13D4,7.08D4,8.18D4,1.0D5,1.54D5,2.05D5,2.99D5,4.10D5,5.01D5,
     /6.13D5,
     /7.08D5,8.18D5,1.0D6,1.26D6,1.5D6,2.05D6,3.07D6,4.10D6,5.01D6,
     /6.13D6,
     /7.08D6,8.18D6,1.0D7,1.26D7,1.5D7,2.05D7,3.07D7,4.10D7,5.01D7,
     /6.13D7,
     /7.08D7,8.18D7,1.0D8,1.26D8,1.5D8,2.05D8,3.07D8,4.10D8,5.01D8,
     /6.13D8,
     /7.08D8,8.18D8,1.0D9/
      DATA YKSH/0.00,1.66D-4,3.48D-4,5.25D-4,6.96D-4,8.63D-4,1.02D-3,
     /1.33D-3,1.75D-3,2.01D-3,
     /2.24D-3,2.46D-3,2.66D-3,2.84D-3,3.21D-3,3.38D-3,3.47D-3,3.55D-3,
     /3.65D-3,3.72D-3,
     /3.75D-3,3.74D-3,3.68D-3,3.57D-3,3.45D-3,3.31D-3,3.19D-3,3.07D-3,
     /2.91D-3,2.66D-3,
     /2.25D-3,1.95D-3,1.55D-3,1.21D-3,8.97D-4,7.07D-4,6.07D-4,5.21D-4,
     /4.21D-4,3.63D-4,
     /3.14D-4,2.84D-4,2.57D-4,2.25D-4,1.74D-4,1.50D-4,1.28D-4,1.15D-4,
     /1.09D-4,1.05D-4,
     /1.03D-4,1.02D-4,1.01D-4,1.005D-4,1.01D-4,1.03D-4,1.07D-4,1.11D-4,
     /1.14D-4,1.17D-4,
     /1.20D-4,1.22D-4,1.25D-4,1.29D-4,1.32D-4,1.38D-4,1.45D-4,1.50D-4,
     /1.54D-4,1.58D-4,
     /1.60D-4,1.63D-4,1.67D-4,1.71D-4,1.74D-4,1.80D-4,1.87D-4,1.92D-4,
     /1.96D-4,2.00D-4,
     /2.02D-4,2.05D-4,2.09D-4/
# COUNTING IONISATION
      DATA YINC/42*0.0/
# ATTACHMENT
      DATA XATT/10*0.0/         
      DATA YATT/10*0.0/ 
# VIBRATION/TORSION
# ABOVE 40EV SCALE BY 1/E                                   
      DATA XVIB1/.052,.055,.060,.065,.070,.075,0.08,0.10,0.12,0.14,     
     /0.20,0.25,0.30,0.40,0.50,0.70,1.00,1.50,2.00,3.00,
     /4.00,5.00,6.00,7.00,8.00,10.0,15.0,20.0,30.0,40.0/                
      DATA YVIB1/0.00,.014,.021,.024,.026,.027,.028,.028,.027,.025,     
     /.021,.018,.016,.014,.012,.009,.008,.012,.015,.024,
     /.036,.047,.060,.079,.079,.065,.038,.025,.012,.008/
# VIBRATION                          
# ABOVE 40EV SCALE BY 1/E             
      DATA XVIB2/.108,.125,0.15,0.20,0.23,0.25,0.30,0.40,0.50,0.70,     
     /1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.00,8.00,10.0,                
     /15.0,20.0,30.0,40.0/               
      DATA YVIB2/0.00,0.27,0.52,0.71,0.73,0.73,0.66,0.56,0.49,0.41,     
     /0.32,0.32,0.39,0.63,0.93,1.22,1.57,2.06,2.06,1.69,                
     /1.00,0.66,0.35,0.22/
# VIBRATION              
# ABOVE 40EV SCALE BY 1/E         
      DATA XVIB3/.173,0.18,0.19,0.20,0.23,0.25,0.30,0.40,0.50,0.70,     
     /1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.00,8.00,10.0,                
     /15.0,20.0,30.0,40.0/               
      DATA YVIB3/0.00,0.13,0.27,0.38,0.49,0.53,0.56,0.53,0.49,0.42,     
     /0.34,0.31,0.33,0.48,0.72,0.94,1.21,1.59,1.59,1.35,                
     /0.80,0.52,0.28,.175/
# VIBRATION     
# ABOVE 40EV SCALE BY 1/E                  
      DATA XVIB4/.363,.365,0.37,0.38,0.39,0.40,0.42,0.45,0.50,0.55,
     /0.60,0.70,0.80,0.90,1.00,1.20,1.50,2.00,3.00,4.00,
     /5.00,6.00,7.00,8.00,10.0,15.0,20.0,30.0,40.0/            
      DATA YVIB4/0.00,.108,.198,.299,.366,.416,.487,.555,.615,.645,     
     /.655,.650,.630,.605,.580,0.55,0.57,0.67,1.05,1.50,
     /2.00,2.45,2.70,2.70,2.10,1.15,0.76,0.42,0.27/ 
# VIBRATION HARMONICS         
# ABOVE 40EV SCALE BY 1/E                             
      DATA XVIB5/.519,1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.00,8.00,     
     /10.0,15.0,20.0,30.0,40.0/    
      DATA YVIB5/0.00,.001,0.01,.033,.085,0.16,0.20,0.27,0.30,0.30,     
     /0.23,.125,.085,.047,.032/
# EXCITATION TRIPLET               
      DATA XEXC1/7.20,8.00,9.00,10.0,12.0,14.0,16.0,20.0,25.0,30.0,
     /40.0,50.0,60.0,70.0,80.0,100./                  
      DATA YEXC1/0.00,0.10,0.30,0.45,0.52,0.55,0.51,0.45,0.30,0.20,
     /0.10,0.06,.037,.026,.019,.011/                             
# EXCITATION  TRIPLET                                     
      DATA XEXC2/8.60,9.40,10.4,11.4,13.4,15.4,17.4,21.4,26.0,30.0,
     /40.0,50.0,60.0,70.0,80.0,100./ 
      DATA YEXC2/0.00,0.10,0.30,0.45,0.52,0.55,0.51,0.45,0.30,0.20,
     /0.10,0.06,.037,.026,.019,.011/ 
# BREMSSTRAHLUNG X-SECTION WITH CUT OFF  UNITS 10**-24 CM**2
      DATA Z6T/298.,178.,85.2,47.5,26.3,12.2,7.06,4.45,3.06,2.82,
     /2.89,2.99,3.08,3.13,3.18,3.25,3.31,3.39,3.44,3.49,
     /3.52,3.54,3.55,3.57,3.57/
      DATA Z1T/11.3,6.18,2.80,1.54,.858,.407,.251,.176,.145,.150,
     /.167,.178,.187,.193,.198,.205,.210,.218,.222,.228,
     /.231,.233,.234,.235,.235/
      DATA EBRM/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,
     /2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,
     /4.E7,5.E7,6.E7,8.E7,1.E8/
#**********************************************************************
# 2014 UPDATE INCLUDES CORRECT OSCILLATOR STRENGTH AND FIT TO NEW 
#       TOWNS# end DATA
# 2012 UPDATE INCLUDES K-SHELL IONISATION
# 2009 UPDATE OF 1999 def
#      VERSION INCLUDES ANISOTROPIC SCATTERING. USED ISOTROPIC ELASTIC
#      SCATTERING BELOW 2 EV DUE TO LACK OF EXPERIMENTAL ELECTRON 
#      SCATTERING DATA.
#      ALSO INCLUDES BETTER TREATMENT OF TORSIONAL EXCITATION (USED A 
#      2-LEVEL APPROXIMATION FOR TORSION)
#      IMPROVED FANO FACTOR AND W FROM BETTER EXCITATION/DISSOCIATION
#      X-SECTIONS . PUBLISHED ELECTRON SCATTERING DATA UP TO 2009 IS
#      INCLUDED IN ANALYSIS. GOOD FIT +-1% TO SCHMIDTS HE/ISO DATA .
#      SCHMIDT AND MARTENS : HEIDELBERG PREPRINT :HD-PY 92/02
#      STILL SOME PROBLEMS WITH AR/ISO FITS +-2% BUT PROBABLY CAUSED
#      BY POOR QUALITY EXPERIMENTAL DRIFT VELOCITY DATA.
#      E.G. NO CONSISTANCY AT 3% LEVEL BETWEEN : 
#      FUJII ET AL:  NIM A245(1986)35
#      AND BECKER : HTTP://CYCLO.MIT.EDU/DRIFT/WWW 
#      FUTURE IMPROVEMENT: INCLUDE EFFECTIVE ROTATIONAL STATE AT 0.005EV
#***********************************************************************
#--------------------------------------------------------
      IF(NANISO == 0):
 :
       NAME='ISO-C4H10 2014 ISOTROPIC '
      else:
       NAME='ISO-C4H10 2014 ANISOTRPIC'
      # endIF                                            
# ---------------------------------------------------------------------
# 
      API=DACOS(-1.00)
      A0=0.52917720859D-8
      RY=13.60569193
      CONST=1.873884D-20
      EMASS2=1021997.804
      BBCONST=16.0*API*A0*A0*RY*RY/EMASS2
#
# BORN BETHE VALUES FOR IONISATION
      AM2=14.8
      C=141.9
#
# AVERAGE AUGER EMISSIONS FROM K-SHELL
      AUGK=2.0
#
# ARRAY SIZE
      NASIZE=4000
# SCALE SINGLET X-SECTIONS TO ALLOW FOR INCREASED ENERGY LOSS DUE TO 5%
#   STEP IN ENERGY BETWEEN SINGLET LEVELS.
      ASING=1.02
#
      NION=3
      NATT=1
      NIN=24
      NNULL=0
#     
      NBREM=25
      DO 18 J=1,NIN
      IZBR(J)=0
   18 CONTINUE
      IZBR(25)=6
      IZBR(26)=1
#
# USE NANISO=2 ONLY (OKHRIMOVSKY)
      DO 1 J=1,6 
    1 KEL(J)=NANISO
      DO 2 J=1,NIN
    2 KIN(J)=2
#                                                                  
      NDATA=157                                                         
      NIOND=42                                                       
      NATT1=10                                                          
      NVIB1=30
      NVIB2=24                                                          
      NVIB3=24                                                          
      NVIB4=29
      NVIB5=15
      NEXC1=16                                                         
      NEXC2=16                                                 
      NKSH=83
#
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(58.1234*AMU)                                      
      E(3)=10.67    
      E(4)=0.0           
      E(5)=0.0             
# OPAL BEATY IONISATION ENERGY SPLITTING AT 1.2 MEV                 
      E(6)=7.00 
# OPAL BEATY IONISATION  AT LOW ENERGY
      EOBY(1)=6.8  
# OPAL BEATY FOR DISSOCIATION AND K-SHELL
      EOBY(2)=6.8
      EOBY(3)=180.0

#  
      EION(1)=10.67
      EION(2)=17.0
      EION(3)=285.0
      LEGAS(1)=0
      LEGAS(2)=0
      LEGAS(3)=1
      ISHELL(1)=0
      ISHELL(2)=0
      ISHELL(3)=1
# FLUORESCENCE DATA
      NC0(1)=0
      EC0(1)=0.0
      WKLM(1)=0.0
      EFL(1)=0.0
      NG1(1)=0
      EG1(1)=0.0
      NG2(1)=0
      EG2(1)=0.0
      NC0(2)=0
      EC0(2)=0.0
      WKLM(2)=0.0
      EFL(2)=0.0
      NG1(2)=0
      EG1(2)=0.0
      NG2(2)=0
      EG2(2)=0.0
      NC0(3)=2
      EC0(3)=253.
      WKLM(3)=0.0026
      EFL(3)=273.
      NG1(3)=1
      EG1(3)=253.
      NG2(3)=2
      EG2(3)=5.0
#
      EIN(1)=-0.032                                            
      EIN(2)=0.032 
      EIN(3)=-0.108
      EIN(4)=0.108  
      EIN(5)=-0.173                                                    
      EIN(6)=0.173
      EIN(7)=-0.363                                                    
      EIN(8)=0.363
      EIN(9)=0.519
      EIN(10)=7.2
      EIN(11)=8.6                                               
      EIN(12)=7.50                     
      EIN(13)=8.0
      EIN(14)=8.5
      EIN(15)=9.0
      EIN(16)=9.5
      EIN(17)=10.0
      EIN(18)=10.5
      EIN(19)=11.0
      EIN(20)=11.5
      EIN(21)=12.0
      EIN(22)=12.5
      EIN(23)=13.0
      EIN(24)=13.5
      EIN(25)=0.0
      EIN(26)=0.0
#  
      DO 776 J=1,NION
      DO 777 I=1,NASIZE
      IF(EG(I):
 > EION(J)) :
       IOFFION(J)=I-1
       GO TO 776
      # endIF
  777 CONTINUE
  776 CONTINUE
#
      DO 652 NL=1,NIN
      DO 651 I=1,NASIZE
      IF(EG(I):
 > abs(EIN(NL))) :
       IOFFN(NL)=I-1
       GO TO 652
      # endIF
  651 CONTINUE
  652 CONTINUE
#***********************************************************************
# PENNING TRANSFER FRACTION FOR EACH LEVEL
      DO 5 K=1,24 
      DO 5 L=1,3
    5 PENFRA[L,K]=0.0
      PENSUM=0.0
# PENNING TRANSFER FRACTION FOR EXCITATION LEVELS ONLY
      DO 555 K=10,24
      PENFRA[1,K]=0.0
      PENSUM=PENSUM+PENFRA[1,K]
# PENNING TRANSFER DISTANCE IN MICRONS
      PENFRA[2,K]=1.0
# PENNING TRANSFER TIME IN PICOSECONDS
      PENFRA[3,K]=1.0
  555 CONTINUE
      IF(IPEN == 0):
 GO TO 8
      IF((PENSUM):
 == 0.0) GO TO 8
      DO 6 K=10,24
    6 WRITE(6,999) NAME,EIN(K),PENFRA[1,K],PENFRA[2,K],PENFRA[3,K]
  999 FORMAT(' GAS = ',A15,' ENERGY LEVEL = ',F7.4,' EV.',/,' PENNING PR
     /OBABILITY = ',F5.3,' ABS.LENGTH = ',F7.2,' DECAY TIME = ',F7.1,/)
    8 CONTINUE
#***********************************************************************
      SCRPT(1)='                                                  '
      SCRPT(2)=' ELASTIC  ANISOTROPIC      ISOBUTANE              '
      IF(NANISO == 0):
 :
      SCRPT(2)=' ELASTIC  ISOTROPIC        ISOBUTANE              '
      # endIF
      SCRPT(3)=' IONISATION                       ELOSS=  10.67   '
      SCRPT(4)=' IONISATION-EXCITATION (BREAKUP)  ELOSS=  17.0    '
      SCRPT(5)=' IONISATION  K-SHELL              ELOSS= 285.0    '
      SCRPT(6)=' ATTACHMENT                                       '
      SCRPT(7)='                                                  '
      SCRPT(8)='                                                  '
      SCRPT(9)=' TORSION                          ELOSS=  -0.032  '
      SCRPT(10)=' TORSION                          ELOSS=   0.032  '
      SCRPT(11)=' VIBRATION  B# end                  ELOSS=  -0.108  '
      SCRPT(12)=' VIBRATION  B# end                  ELOSS=   0.108  '
      SCRPT(13)=' VIBRATION  STRETCH               ELOSS=  -0.173  '
      SCRPT(14)=' VIBRATION  STRETCH               ELOSS=   0.173  '
      SCRPT(15)=' VIBRATION  STRETCH               ELOSS=  -0.363  '
      SCRPT(16)=' VIBRATION  STRETCH               ELOSS=   0.363  ' 
      SCRPT(17)=' VIBRATION  STRETCH               ELOSS=   0.519  '
      SCRPT(18)=' EXC.  TRIPLET                    ELOSS=   7.2    '
      SCRPT(19)=' EXC.  TRIPLET                    ELOSS=   8.6    '
      SCRPT(20)=' EXC. SINGLET         F=.0013     ELOSS=   7.5    '
      SCRPT(21)=' EXC. SINGLET         F=.0150     ELOSS=   8.0    '
      SCRPT(22)=' EXC. SINGLET         F=.1140     ELOSS=   8.5    '
      SCRPT(23)=' EXC. SINGLET         F=.1570     ELOSS=   9.0    '
      SCRPT(24)=' EXC. SINGLET         F=.1710     ELOSS=   9.5    '
      SCRPT(25)=' EXC. SINGLET         F=.1880     ELOSS=  10.0    '
      SCRPT(26)=' EXC. SINGLET         F=.2050     ELOSS=  10.5    '
      SCRPT(27)=' EXC. SINGLET         F=.1930     ELOSS=  11.0    '
      SCRPT(28)=' EXC. SINGLET         F=.1620     ELOSS=  11.5    '
      SCRPT(29)=' EXC. SINGLET         F=.1030     ELOSS=  12.0    '
      SCRPT(30)=' EXC. SINGLET         F=.0670     ELOSS=  12.5    '
      SCRPT(31)=' EXC. SINGLET         F=.0640     ELOSS=  13.0    '
      SCRPT(32)=' EXC. SINGLET         F=.0280     ELOSS=  13.5    '
      SCRPT(33)=' BREMSSTRAHLUNG FROM CARBON ATOM                  '
      SCRPT(34)=' BREMSSTRAHLUNG FROM HYDROGEN ATOM                '
# CALCULATE POPULATION OF TORSIONAL STATES
      APOP1=math.exp(EIN(1)/AKT)
      APOP2=math.exp(2.0*EIN(1)/AKT)
      APOP3=math.exp(3.0*EIN(1)/AKT)
      APOP4=math.exp(4.0*EIN(1)/AKT)
      APOP5=math.exp(5.0*EIN(1)/AKT)
      APOP6=math.exp(6.0*EIN(1)/AKT)
      APOP7=math.exp(7.0*EIN(1)/AKT)
      APOP8=math.exp(8.0*EIN(1)/AKT)
      APOP9=math.exp(9.0*EIN(1)/AKT)
      APOP10=math.exp(10.0*EIN(1)/AKT)
      APOPGST=1.0
      APOPSUM=APOPGST+APOP1+APOP2+APOP3+APOP4+APOP5+APOP6+APOP7+APOP8+
     /APOP9+APOP10
      APOPGST=1.0/APOPSUM
      APOP1=APOP1/APOPSUM
      APOP2=APOP2/APOPSUM
      APOP3=APOP3/APOPSUM
      APOP4=APOP4/APOPSUM
      APOP5=APOP5/APOPSUM
      APOP6=APOP6/APOPSUM
      APOP7=APOP7/APOPSUM
      APOP8=APOP8/APOPSUM
      APOP9=APOP9/APOPSUM
      APOP10=APOP10/APOPSUM
#  USE 2 LEVEL APPROXIMATION FOR TORSION
      APOP1=APOP1+APOP2+APOP3+APOP4+APOP5+APOP6+APOP7+APOP8+APOP9+APOP10
      APOPGST=1.0 
# CALCULATE POPULATION  OF VIBRATIONAL STATES
# ASSUME ALL STATE DEGENERACIES ARE EQUAL
      APOPV2=math.exp(EIN(3)/AKT)
      APOPV3=math.exp(EIN(5)/AKT)
      APOPV4=math.exp(EIN(7)/AKT)
      APOPGS=1.0+APOPV2+APOPV3+APOPV4
      APOPV2=APOPV2/APOPGS
      APOPV3=APOPV3/APOPGS
      APOPV4=APOPV4/APOPGS
      APOPGS=1.0/APOPGS
# RENORMALISE GROUND STATE POPULATION ( GIVES CORRECTION THAT
# ALLOWS FOR VIBRATIONAL EXCITATION FROM EXCITED VIBRATIONAL STATES)
      APOPGS=1.0
#
#     EN=-ESTEP/2.0   
      DO 1000 I=1,NSTEP  
      EN=EG(I)                                            
#     EN=EN+ESTEP    
      GAMMA1=(EMASS2+2.00*EN)/EMASS2
      GAMMA2=GAMMA1*GAMMA1
      BETA=math.sqrt(1.00-1.00/GAMMA2)
      BETA2=BETA*BETA
#                                             
      DO 10 J=2,NDATA                                                   
      IF(EN <= XEN(J):
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA                                                           
   20 A=(YELM(J)-YELM(J-1))/(XEN(J)-XEN(J-1))                         
      B=(XEN(J-1)*YELM(J)-XEN(J)*YELM(J-1))/(XEN(J-1)-XEN(J))   
      QMOM=(A*EN+B)*1.D-16  
      A=(YELT(J)-YELT(J-1))/(XEN(J)-XEN(J-1))                         
      B=(XEN(J-1)*YELT(J)-XEN(J)*YELT(J-1))/(XEN(J-1)-XEN(J)) 
      QELA=(A*EN+B)*1.D-16
      A=(YEPS(J)-YEPS(J-1))/(XEN(J)-XEN(J-1))                         
      B=(XEN(J-1)*YEPS(J)-XEN(J)*YEPS(J-1))/(XEN(J-1)-XEN(J))
      PQ2=(A*EN+B)
# EPSILON = 1.0-YEPS
      PQ2=1.00-PQ2
      PQ1=0.5+(QELA-QMOM)/QELA
      IF(NANISO == 0):
 PEQEL(2,I)=0.5
      IF(NANISO == 1):
 PEQEL(2,I)=PQ1
      IF(NANISO == 2):
 PEQEL(2,I)=PQ2
      Q(2,I)=QELA            
      IF(NANISO == 0):
 Q(2,I)=QMOM
# GROSS IONISATION                                         
      QION(1,I)=0.0
      PEQION(1,I)=0.5
      IF(NANISO == 2):
 PEQION(1,I)=0.0 
      IF(EN < EION(1):
) GO TO 150
      IF(EN > XION(NIOND):
) GO TO 123                                
      DO 100 J=2,NIOND                                                  
      IF(EN <= XION(J):
) GO TO 110                                       
  100 CONTINUE                                                          
      J=NIOND                                                           
  110 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J)) 
      QION(1,I)=(A*EN+B)*1.D-16 
      GO TO 124
# USE BORN BETHE X-SECTION ABOVE XION(NIOND) EV
  123 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(1,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)
  124 CONTINUE
# USE ANISOTROPIC SCATTERING FOR PRIMARY IONISATION ELECTRON AT
# ENERGIES ABOVE  2 * IONISATION ENERGY
# ANISOTROPIC ANGULAR DISTRIBUTION EQUAL TO ELASTIC ANGULAR DISTRIBUTION
# AT AN ENERGY OFFSET BY THE IONISATION ENERGY
      IF(EN <= (2.0*EION(1):
)) GO TO 150
      PEQION(1,I)=PEQEL(2,(I-IOFFION(1)))
# CALCULATE IONISATION-EXCITATION AND SPLIT IONISATION INTO
# IONISATION ONLY AND IONISATION +EXCITATION
  150 QION(2,I)=0.0
      PEQION(2,I)=0.50
      IF(NANISO == 2):
 PEQIN(2,I)=0.0
      IF(EN <= EION(2):
) GO TO 160
      QION(2,I)=12.00/(EION(2)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EION(2)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EION(2)+E(3))
      IF(QION(2,I):
 < 0.0) QION(2,I)=0.0
# FIND IONISATION ONLY
      QION(1,I)=QION(1,I)-QION(2,I)
      IF(EN <= (2.0*EION(2):
)) GO TO 160
      PEQION(2,I)=PEQEL(2,(I-IOFFION(2)))
# K-SHELL IONISATION
  160 QION(3,I)=0.0
      PEQION(3,I)=0.5
      IF(NANISO == 2):
 PEQION(3,I)=0.0 
      IF(EN < EION(3):
) GO TO 170
      DO 161 J=2,NKSH                                                  
      IF(EN <= XKSH(J):
) GO TO 162                                       
  161 CONTINUE                                                          
      J=NKSH                                                           
  162 A=(YKSH(J)-YKSH(J-1))/(XKSH(J)-XKSH(J-1))                         
      B=(XKSH(J-1)*YKSH(J)-XKSH(J)*YKSH(J-1))/(XKSH(J-1)-XKSH(J)) 
# FACTOR OF 4 FROM NUMBER OF ATOMS ON MOLECULE
      QION(3,I)=4.0*(A*EN+B)*1.D-16 
# USE ANISOTROPIC SCATTERING FOR PRIMARY IONISATION ELECTRON AT
# ENERGIES ABOVE  2 * IONISATION ENERGY
# ANISOTROPIC ANGULAR DISTRIBUTION EQUAL TO ELASTIC ANGULAR DISTRIBUTION
# AT AN ENERGY OFFSET BY THE IONISATION ENERGY
      IF(EN <= (2.0*EION(3):
)) GO TO 170
      PEQION(3,I)=PEQEL(2,(I-IOFFION(3)))
# CORRECT DISSOCIATIVE IONISATION FOR SPLIT INTO K-SHELL
  170 QION(2,I)=QION(2,I)-QION(3,I)
# ATTACHMENT (NO ATTACHMENT)                                          
      Q(4,I)=0.0  
      QATT(1,I)=Q(4,I)                                                 
# COUNTING IONISATION                                          
  200 Q(5,I)=0.0     
      PEQEL(5,I)=0.5
      IF(NANISO == 2):
 PEQEL(5,I)=0.0
      IF(EN <= E(3):
) GO TO 210
# SET COUNTING IONISATION = GROSS IONISATION (LACK OF EXPERIMENTAL DATA)
      Q(5,I)=QION(1,I)+AUGK*QION(3,I)
      Q(5,I)=Q(5,I)-QION(3,I)
      IF(EN <= (2.0*E(3):
)) GO TO 210
      PEQEL(5,I)=PEQEL(2,(I-IOFFION(1)))
  210 CONTINUE
#**********************************************************************
# TEMPORARY MOD FOR RANGE PARAMETERS 
#      IF(EN > 1000.) QION(1,I)=Q(5,I)
#********************************************************************* 
      Q(6,I)=0.0                                                        
# SUPERELASTIC TORSION
      QIN(1,I)=0.0
      PEQIN(1,I)=0.5
      IF(NANISO == 2):
 PEQIN(1,I)=0.0
      IF(EN == 0.0):
 GO TO 305
      EFAC=math.sqrt(1.0-(EIN(1)/EN))
      QIN(1,I)=0.009*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      QIN(1,I)=APOP1*QIN(1,I)*1.D-16
      IF(EN < (5.0*abs(EIN(1):
))) GO TO 305
      IF(NANISO == 2):
 PEQIN(1,I)=PEQEL(2,(I-IOFFN(1)))
# TORSION           
  305 QIN(2,I)=0.0
      PEQIN(2,I)=0.5  
      IF(NANISO == 2):
 PEQIN(2,I)=0.0                               
      IF(EN <= EIN(2):
) GO TO 400   
      EFAC=math.sqrt(1.0-(EIN(2)/EN))
      QIN(2,I)=0.009*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      QIN(2,I)=APOPGST*QIN(2,I)*1.D-16
      IF(EN < (5.0*abs(EIN(2):
))) GO TO 400
      IF(NANISO == 2):
 PEQIN(2,I)=PEQEL(2,(I-IOFFN(2)))
# SUPERELASTIC VIB B# end MODES
  400 QIN(3,I)=0.0
      PEQIN(3,I)=0.5
      IF(NANISO == 2):
 PEQIN(3,I)=0.0
      IF(EN == 0.0):
 GO TO 450 
      IF((EN+EIN(4):
) > XVIB2(NVIB2)) GO TO 425
      DO 410 J=2,NVIB2
      IF((EN+EIN(4):
) <= XVIB2(J)) GO TO 420
  410 CONTINUE
      J=NVIB2
  420 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J)) 
      QIN(3,I)=APOPV2*(EN+EIN(4))*(A*(EN+EIN(4))+B)*1.D-16/EN  
      GO TO 426
  425 QIN(3,I)=APOPV2*YVIB2(NVIB2)*(XVIB2(NVIB2)/EN)*1.D-16
  426 IF(EN < (3.0*abs(EIN(3)))) GO TO 450
      IF(NANISO == 2):
 PEQIN(3,I)=PEQEL(2,(I-IOFFN(3)))
# VIB B# end MODES 
  450 QIN(4,I)=0.0  
      PEQIN(4,I)=0.5                
      IF(NANISO == 2):
 PEQIN(4,I)=0.0                                    
      IF(EN <= EIN(4):
) GO TO 500                           
      IF(EN > XVIB2(NVIB2):
) GO TO 475              
      DO 460 J=2,NVIB2                                                  
      IF(EN <= XVIB2(J):
) GO TO 470                                      
  460 CONTINUE                                                          
      J=NVIB2                                                           
  470 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J)) 
      QIN(4,I)=APOPGS*(A*EN+B)*1.D-16   
      GO TO 476 
  475 QIN(4,I)=APOPGS*YVIB2(NVIB2)*(XVIB2(NVIB2)/EN)*1.D-16
  476 IF(EN < (3.0*abs(EIN(4)))) GO TO 500
      IF(NANISO == 2):
 PEQIN(4,I)=PEQEL(2,(I-IOFFN(4)))
# SUPERELASTIC VIB STRETCH MODES
  500 CONTINUE 
      QIN(5,I)=0.0
      PEQIN(5,I)=0.5
      IF(NANISO == 2):
 PEQIN(5,I)=0.0
      IF(EN == 0.0):
 GO TO 550
      IF((EN+EIN(6):
) > XVIB3(NVIB3)) GO TO 525
      DO 510  J=2,NVIB3
      IF((EN+EIN(6):
) <= XVIB3(J)) GO TO 520 
  510 CONTINUE
      J=NVIB3
  520 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J)) 
      QIN(5,I)=APOPV3*(EN+EIN(6))*(A*(EN+EIN(6))+B)*1.D-16/EN  
      GO TO 526
  525 QIN(5,I)=APOPV3*YVIB3(NVIB3)*(XVIB3(NVIB3)/EN)*1.D-16
  526 IF(EN < (3.0*abs(EIN(5)))) GO TO 550
      IF(NANISO == 2):
 PEQIN(5,I)=PEQEL(2,(I-IOFFN(5)))
# VIB STRETCH MODES
  550 CONTINUE                                                          
      QIN(6,I)=0.0  
      PEQIN(6,I)=0.5
      IF(NANISO == 2):
 PEQIN(6,I)=0.0                             
      IF(EN <= EIN(6):
) GO TO 600                           
      IF(EN > XVIB3(NVIB3):
) GO TO 575             
      DO 560 J=2,NVIB3                                                  
      IF(EN <= XVIB3(J):
) GO TO 570                                      
  560 CONTINUE                                                          
      J=NVIB3                                                           
  570 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J)) 
      QIN(6,I)=APOPGS*(A*EN+B)*1.D-16 
      GO TO 576 
  575 QIN(6,I)=APOPGS*YVIB3(NVIB3)*(XVIB3(NVIB3)/EN)*1.D-16  
  576 IF(EN < (3.0*abs(EIN(6)))) GO TO 600
      IF(NANISO == 2):
 PEQIN(6,I)=PEQEL(2,(I-IOFFN(6)))
# SUPERELASTIC VIB STRETCH MODES
  600 CONTINUE 
      QIN(7,I)=0.0
      PEQIN(7,I)=0.5
      IF(NANISO == 2):
 PEQIN(7,I)=0.0
      IF(EN == 0.0):
 GO TO 650
      IF((EN+EIN(8):
) > XVIB4(NVIB4)) GO TO 625
      DO 610  J=2,NVIB4
      IF((EN+EIN(8):
) <= XVIB4(J)) GO TO 620 
  610 CONTINUE
      J=NVIB4
  620 A=(YVIB4(J)-YVIB4(J-1))/(XVIB4(J)-XVIB4(J-1))                     
      B=(XVIB4(J-1)*YVIB4(J)-XVIB4(J)*YVIB4(J-1))/(XVIB4(J-1)-XVIB4(J)) 
      QIN(7,I)=APOPV4*(EN+EIN(8))*(A*(EN+EIN(8))+B)*1.D-16/EN 
      GO TO 626
  625 QIN(7,I)=APOPV4*YVIB4(NVIB4)*(XVIB4(NVIB4)/EN)*1.D-16
  626 IF(EN < (3.0*abs(EIN(7)))) GO TO 650
      IF(NANISO == 2):
 PEQIN(7,I)=PEQEL(2,(I-IOFFN(7)))
#  VIB STRETCH MODES         
  650 CONTINUE                                                          
      QIN(8,I)=0.0  
      PEQIN(8,I)=0.5 
      IF(NANISO == 2):
 PEQIN(8,I)=0.0                         
      IF(EN <= EIN(8):
) GO TO 700                           
      IF(EN > XVIB4(NVIB4):
) GO TO 675           
      DO 660 J=2,NVIB4                                                  
      IF(EN <= XVIB4(J):
) GO TO 670                                      
  660 CONTINUE                                                          
      J=NVIB4                                                           
  670 A=(YVIB4(J)-YVIB4(J-1))/(XVIB4(J)-XVIB4(J-1))                     
      B=(XVIB4(J-1)*YVIB4(J)-XVIB4(J)*YVIB4(J-1))/(XVIB4(J-1)-XVIB4(J)) 
      QIN(8,I)=APOPGS*(A*EN+B)*1.D-16 
      GO TO 676   
  675 QIN(8,I)=APOPGS*YVIB4(NVIB4)*(XVIB4(NVIB4)/EN)*1.D-16             
  676 IF(EN < (3.0*abs(EIN(8)))) GO TO 700
      IF(NANISO == 2):
 PEQIN(8,I)=PEQEL(2,(I-IOFFN(8)))       
# HIGHER VIBRATIONAL MODES                                              
  700 QIN(9,I)=0.0  
      PEQIN(9,I)=0.5       
      IF(NANISO == 2):
 PEQIN(9,I)=0.0                            
      IF(EN <= EIN(9):
) GO TO 800                           
      IF(EN > XVIB5(NVIB5):
) GO TO 725             
      DO 710 J=2,NVIB5                                                  
      IF(EN <= XVIB5(J):
) GO TO 720                                      
  710 CONTINUE                                                          
      J=NVIB5                                                           
  720 A=(YVIB5(J)-YVIB5(J-1))/(XVIB5(J)-XVIB5(J-1))                     
      B=(XVIB5(J-1)*YVIB5(J)-XVIB5(J)*YVIB5(J-1))/(XVIB5(J-1)-XVIB5(J)) 
      QIN(9,I)=(A*EN+B)*1.D-16
      GO TO 726
  725 QIN(9,I)=YVIB5(NVIB5)*(XVIB5(NVIB5)/EN)*1.D-16
  726 IF(EN < (3.0*abs(EIN(9)))) GO TO 800
      IF(NANISO == 2):
 PEQIN(9,I)=PEQEL(2,(I-IOFFN(9)))
# EXCITATION    TRIPLET  ABOVE XEXC1(NEXC1) SCALE BY 1/EN**3           
  800 QIN(10,I)=0.0 
      PEQIN(10,I)=0.5  
      IF(NANISO == 2):
 PEQIN(10,I)=0.0                             
      IF(EN <= EIN(10):
) GO TO 850     
      IF(EN > XEXC1(NEXC1):
) GO TO 830                                  
      DO 810 J=2,NEXC1                                                  
      IF(EN <= XEXC1(J):
) GO TO 820                                      
  810 CONTINUE                                                          
      J=NEXC1                                                           
  820 A=(YEXC1(J)-YEXC1(J-1))/(XEXC1(J)-XEXC1(J-1))                     
      B=(XEXC1(J-1)*YEXC1(J)-XEXC1(J)*YEXC1(J-1))/(XEXC1(J-1)-XEXC1(J)) 
      QIN(10,I)=(A*EN+B)*1.D-16  
      GO TO 840
# SCALE BY 1/E**3
  830 QIN(10,I)=YEXC1(NEXC1)*(XEXC1(NEXC1)/EN)**3*1.D-16
  840 IF(EN <= (2.0*EIN(10))) GO TO 850
      PEQIN(10,I)=PEQEL(2,(I-IOFFN(10)))
# EXCITATION  TRIPLET ABOVE XEXC2(NEXC2) SCALE BY 1/E**3
  850 QIN(11,I)=0.0 
      PEQIN(11,I)=0.5              
      IF(NANISO == 2):
 PEQIN(11,I)=0.0                                   
      IF(EN <= EIN(11):
) GO TO 900    
      IF(EN > XEXC2(NEXC2):
) GO TO 880                                  
      DO 860 J=2,NEXC2                                                  
      IF(EN <= XEXC2(J):
) GO TO 870                                      
  860 CONTINUE                                                          
      J=NEXC2                                                           
  870 A=(YEXC2(J)-YEXC2(J-1))/(XEXC2(J)-XEXC2(J-1))                     
      B=(XEXC2(J-1)*YEXC2(J)-XEXC2(J)*YEXC2(J-1))/(XEXC2(J-1)-XEXC2(J)) 
      QIN(11,I)=(A*EN+B)*1.D-16
      GO TO 890                                         
#  SCALE BY 1/E**3
  880 QIN(11,I)=YEXC2(NEXC2)*(XEXC2(NEXC2)/EN)**3*1.D-16
  890 IF(EN <= (2.0*EIN(11))) GO TO 900
      PEQIN(11,I)=PEQEL(2,(I-IOFFN(11)))   
# EXCITATION   F=0.00131                                      
  900 QIN(12,I)=0.0              
      PEQIN(12,I)=0.0                                   
      IF(EN <= EIN(12):
) GO TO 905
      QIN(12,I)=.00131/(EIN(12)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(12)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(12))*ASING
      IF(QIN(12,I):
 < 0.0) QIN(12,I)=0.0
      IF(EN <= (2.0*EIN(12):
)) GO TO 905
      PEQIN(12,I)=PEQEL(2,(I-IOFFN(12)))     
# EXCITATION   F=0.0150                                       
  905 QIN(13,I)=0.0              
      PEQIN(13,I)=0.0                                   
      IF(EN <= EIN(13):
) GO TO 910
      QIN(13,I)=.01500/(EIN(13)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(13)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(13))*ASING
      IF(QIN(13,I):
 < 0.0) QIN(13,I)=0.0
      IF(EN <= (2.0*EIN(13):
)) GO TO 910
      PEQIN(13,I)=PEQEL(2,(I-IOFFN(13)))     
# EXCITATION   F=0.11400                                      
  910 QIN(14,I)=0.0              
      PEQIN(14,I)=0.0                                   
      IF(EN <= EIN(14):
) GO TO 915
      QIN(14,I)=.11400/(EIN(14)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(14)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(14))*ASING
      IF(QIN(14,I):
 < 0.0) QIN(14,I)=0.0
      IF(EN <= (2.0*EIN(14):
)) GO TO 915
      PEQIN(14,I)=PEQEL(2,(I-IOFFN(14)))     
# EXCITATION   F=0.15700                                      
  915 QIN(15,I)=0.0              
      PEQIN(15,I)=0.0                                   
      IF(EN <= EIN(15):
) GO TO 920
      QIN(15,I)=.15700/(EIN(15)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(15)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(15))*ASING
      IF(QIN(15,I):
 < 0.0) QIN(15,I)=0.0
      IF(EN <= (2.0*EIN(15):
)) GO TO 920
      PEQIN(15,I)=PEQEL(2,(I-IOFFN(15)))
# EXCITATION   F=0.17100                                      
  920 QIN(16,I)=0.0              
      PEQIN(16,I)=0.0                                   
      IF(EN <= EIN(16):
) GO TO 925
      QIN(16,I)=.17100/(EIN(16)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(16)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(16))*ASING
      IF(QIN(16,I):
 < 0.0) QIN(16,I)=0.0
      IF(EN <= (2.0*EIN(16):
)) GO TO 925
      PEQIN(16,I)=PEQEL(2,(I-IOFFN(16)))     
# EXCITATION   F=0.18800                                      
  925 QIN(17,I)=0.0              
      PEQIN(17,I)=0.0                                   
      IF(EN <= EIN(17):
) GO TO 930
      QIN(17,I)=.18800/(EIN(17)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(17)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(17))*ASING
      IF(QIN(17,I):
 < 0.0) QIN(17,I)=0.0
      IF(EN <= (2.0*EIN(17):
)) GO TO 930
      PEQIN(17,I)=PEQEL(2,(I-IOFFN(17)))    
# EXCITATION   F=0.20500                                      
  930 QIN(18,I)=0.0              
      PEQIN(18,I)=0.0                                   
      IF(EN <= EIN(18):
) GO TO 935
      QIN(18,I)=.20500/(EIN(18)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(18)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(18))*ASING
      IF(QIN(18,I):
 < 0.0) QIN(18,I)=0.0
      IF(EN <= (2.0*EIN(18):
)) GO TO 935
      PEQIN(18,I)=PEQEL(2,(I-IOFFN(18)))    
# EXCITATION   F=0.19300                                      
  935 QIN(19,I)=0.0              
      PEQIN(19,I)=0.0                                   
      IF(EN <= EIN(19):
) GO TO 940
      QIN(19,I)=.19300/(EIN(19)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(19)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(19))*ASING
      IF(QIN(19,I):
 < 0.0) QIN(19,I)=0.0
      IF(EN <= (2.0*EIN(19):
)) GO TO 940
      PEQIN(19,I)=PEQEL(2,(I-IOFFN(19)))    
# EXCITATION   F=0.16200                                      
  940 QIN(20,I)=0.0              
      PEQIN(20,I)=0.0                                   
      IF(EN <= EIN(20):
) GO TO 945
      QIN(20,I)=.16200/(EIN(20)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(20)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(20))*ASING
      IF(QIN(20,I):
 < 0.0) QIN(20,I)=0.0
      IF(EN <= (2.0*EIN(20):
)) GO TO 945
      PEQIN(20,I)=PEQEL(2,(I-IOFFN(20)))    
# EXCITATION   F=0.10300                                      
  945 QIN(21,I)=0.0              
      PEQIN(21,I)=0.0                                   
      IF(EN <= EIN(21):
) GO TO 950
      QIN(21,I)=.10300/(EIN(21)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(21)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(21))*ASING
      IF(QIN(21,I):
 < 0.0) QIN(21,I)=0.0
      IF(EN <= (2.0*EIN(21):
)) GO TO 950
      PEQIN(21,I)=PEQEL(2,(I-IOFFN(21)))    
# EXCITATION   F=0.06700                                      
  950 QIN(22,I)=0.0              
      PEQIN(22,I)=0.0                                   
      IF(EN <= EIN(22):
) GO TO 955
      QIN(22,I)=.06700/(EIN(22)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(22)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(22))*ASING
      IF(QIN(22,I):
 < 0.0) QIN(22,I)=0.0
      IF(EN <= (2.0*EIN(22):
)) GO TO 955
      PEQIN(22,I)=PEQEL(2,(I-IOFFN(22)))    
# EXCITATION   F=0.06400                                      
  955 QIN(23,I)=0.0              
      PEQIN(23,I)=0.0                                   
      IF(EN <= EIN(23):
) GO TO 960
      QIN(23,I)=.06400/(EIN(23)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(23)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(23))*ASING
      IF(QIN(23,I):
 < 0.0) QIN(23,I)=0.0
      IF(EN <= (2.0*EIN(23):
)) GO TO 960
      PEQIN(23,I)=PEQEL(2,(I-IOFFN(23)))    
# EXCITATION   F=0.02800                                      
  960 QIN(24,I)=0.0              
      PEQIN(24,I)=0.0                                   
      IF(EN <= EIN(24):
) GO TO 965
      QIN(24,I)=.02800/(EIN(24)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(24)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(24))*ASING
      IF(QIN(24,I):
 < 0.0) QIN(24,I)=0.0
      IF(EN <= (2.0*EIN(24):
)) GO TO 965
      PEQIN(24,I)=PEQEL(2,(I-IOFFN(24)))
  965 CONTINUE    
# LOAD BREMSSTRAHLUNG X-SECTIONS
#     QIN(25,I)=0.0
#     QIN(26,I)=0.0
#     IF(EN <= 1000.) GO TO 990
#     DO 972 J=2,NBREM
#     IF(EN <= EBRM(J)) GO TO 973
# 972 CONTINUE
#     J=NBREM
# 973 A=(math.log(Z6T(J))-math.log(Z6T(J-1)))/(EBRM(J)-EBRM(J-1))
#     B=(math.log(Z6T(J))*EBRM(J-1)-math.log(Z6T(J-1))*EBRM(J))/
#    /(EBRM(J-1)-EBRM(J))            
#     A1=(math.log(Z1T(J))-math.log(Z1T(J-1)))/(EBRM(J)-EBRM(J-1))
#     B1=(math.log(Z1T(J))*EBRM(J-1)-math.log(Z1T(J-1))*EBRM(J))/
#    /(EBRM(J-1)-EBRM(J))                                
#     QIN(25,I)=math.exp(A*EN+B)*4.0*1.D-24
#     QIN(26,I)=math.exp(A1*EN+B1)*10.0*1.D-24
# 990 CONTINUE
#
      QSNG=QIN(12,I)+QIN(13,I)+QIN(14,I)+QIN(15,I)+QIN(16,I)+
     /QIN(17,I)+QIN(18,I)+QIN(19,I)+QIN(20,I)+QIN(21,I)+QIN(22,I)+
     /QIN(23,I)+QIN(24,I)
      QTRP=QIN(10,I)+QIN(11,I) 
      QTOTEXC=QTRP+QSNG
      Q(1,I)=Q(2,I)+Q(5,I)+Q(4,I)+QIN(1,I)+QIN(2,I)+QIN(3,I)+QIN(4,I)+  
     /QIN(5,I)+QIN(6,I)+QIN(7,I)+QIN(8,I)+QIN(9,I)+QEXCTOT
#    /QIN(5,I)+QIN(6,I)+QIN(7,I)+QIN(8,I)+QIN(9,I)+QEXCTOT+
#    /QIN(25,I)+QIN(26,I)
#     WRITE(6,991) EN,QTRP,QSNG,QTOTEXC
# 991 FORMAT(' EN=',D12.4,' QTRP=',D12.4,' QSNG=',D12.4,' QEXCTOT=',
#    /D12.4)
c     WRITE(6,992) EN,QION(1,I),QION(2,I),QION(3,I)
# 992 FORMAT(' EN=',D12.4,' ION1=',D12.4,' ION2=',D12.4,' ION3=',D12.4)
 1000 CONTINUE                                                          
#  SAVE COMPUTE TIME
      DO 997 K=14,NIN
      IF(EFINAL <= EIN(K):
) :
       NIN=K-1
       GO TO 998
      # endIF
  997 CONTINUE
  998 CONTINUE
#     IF(EFINAL > 1000.) NIN=NIN+2 
      RETURN                                                            
      # end
      def GAS12(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)  
#    /QNULL,NNULL,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,
#    /SCRPT)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(4000),EROOT(4000),QT1(4000),QT2(4000),
     /QT3(4000),QT4(4000)
      COMMON/DENS/DEN(4000)
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30)
     /,EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250],
     /PJ(220) 
      DIMENSION XEN(158),YMOM(158),YEL(158),YVBMOM(158),YVBEL(158),
     /YEPS(158),XION1(63),YION1(63),XION2(66),YION2(66),XION3(66),
     /YION3(66),XION4(41),YION4(41),XION5(41),YION5(41),XION6(40),
     /YION6(40),XION7(37),YION7(37),XION8(30),YION8(30),XION9(27),
     /YION9(27),XATT(68),YATT(68),
     /XV2(17),YV2(17),X2V2(19),Y2V2(19),XV1(26),YV1(26),
     /X3V2(11),Y3V2(11),XV3(11),YV3(11),XVPD3(14),YVPD3(14),
     /XV130(12),YV130(12),XVPD4(14),YVPD4(14),XVPD5(11),YVPD5(11),
     /XVPD6(11),YVPD6(11),XVPD7(11),YVPD7(11),XVPD8(11),YVPD8(11),
     /XVPD9(11),YVPD9(11),XVPDH(9),YVPDH(9),      
     /XTRP1(11),YTRP1(11),XTRP2(11),YTRP2(11),
     /XKSHC(83),YKSHC(83),XKSHO(81),YKSHO(81),
     /IOFFN(144),IOFFION(11)
      DIMENSION Z6T(25),Z8T(25),EBRM(25)
      CHARACTER*50 SCRPT(300),SCRPTN(10)                             
      CHARACTER*25 NAME 
# ELASTIC +ROTATIONAL                                                
      DATA XEN/1.D-6,.001,.002,.004,.007,.010,.014,.020,.030,.040,     
     /0.05,0.06,0.08,0.10,.125,.150,.175,0.20,0.25,0.30,                
     /0.35,0.40,0.50,0.60,0.70,0.85,1.00,1.25,1.50,1.70,                
     /1.90,2.10,2.30,2.50,2.80,3.00,3.30,3.60,3.80,4.00,                
     /4.50,5.00,5.50,6.00,7.00,8.00,10.0,12.0,15.0,17.0,                
     /20.0,25.0,30.0,40.0,50.0,60.0,70.0,80.0,90.0,100.,
     /120.,150.,170.,200.,250.,300.,350.,400.,450.,500.,
     /600.,700.,800.,900.,1000.,1500.,2000.,3000.,4000.,5000.,
     /6000.,8000.,1.0D4,1.25D4,1.5D4,1.75D4,2.0D4,2.5D4,3.0D4,3.5D4,
     /4.0D4,4.5D4,5.0D4,6.0D4,7.0D4,8.0D4,9.0D4,1.0D5,1.25D5,1.5D5,
     /1.75D5,2.0D5,2.5D5,3.0D5,3.5D5,4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,
     /8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,2.0D6,2.5D6,3.0D6,3.5D6,
     /4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,
     /1.75D7,2.0D7,2.5D7,3.0D7,3.5D7,4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,
     /8.0D7,9.0D7,1.0D8,1.25D8,1.5D8,1.75D8,2.0D8,2.5D8,3.0D8,3.5D8,
     /4.0D8,4.5D8,5.0D8,6.0D8,7.0D8,8.0D8,9.0D8,1.0D9/
# GROUND STATE AND B# end MODE ELASTIC + ROTATION.  MOMENTUM TRANSFER
#  AT 293.15 KELVIN     
      DATA YMOM/148.,148.,146.,141.,134.,128.,119.,109.,95.0,85.0,      
     /76.5,69.5,59.0,52.5,47.5,41.0,36.0,30.0,22.0,16.2, 
     /12.8,10.6,8.20,6.45,5.35,4.30,3.90,3.65,3.60,3.65,                
     /3.75,3.85,4.00,4.20,4.60,4.90,5.30,5.80,6.00,6.00,                
     /5.50,5.10,5.00,5.20,6.10,7.30,8.80,9.80,10.5,10.5,                
     /9.80,8.50,7.00,5.10,4.00,3.50,3.10,2.90,2.70,2.50,
     /2.20,1.88,1.67,1.50,1.25,1.04,.832,.682,.571,.486,
     /.367,.287,.232,.192,.161,.0819,.0501,.0247,.0149,.0100, 
     /.00721,.00430,.00288,.00192,.00138,.00105,8.23D-4,5.5D-4,3.96D-4,
     /3.0D-4,
     /2.36D-4,1.91D-4,1.59D-4,1.15D-4,8.73D-5,6.90D-5,5.62D-5,4.68D-5,
     /3.19D-5,2.34D-5,
     /1.81D-5,1.45D-5,1.00D-5,7.48D-6,5.86D-6,4.75D-6,3.95D-6,3.36D-6,
     /2.54D-6,2.00D-6,
     /1.63D-6,1.37D-6,1.16D-6,8.32D-7,6.28D-7,4.94D-7,4.00D-7,2.80D-7,
     /2.08D-7,1.62D-7,
     /1.30D-7,1.06D-7,8.89D-8,6.51D-8,4.98D-8,3.95D-8,3.21D-8,2.66D-8,
     /1.79D-8,1.29D-8,
     /9.73D-9,7.63D-9,5.06D-9,3.61D-9,2.71D-9,2.11D-9,1.69D-9,1.38D-9,
     /9.79D-10,7.28D-10,
     /5.63D-10,4.48D-10,3.65D-10,2.35D-10,1.64D-10,1.21D-10,9.27D-11,
     /5.95D-11,4.13D-11,3.04D-11,
     /2.33D-11,1.84D-11,1.49D-11,1.03D-11,7.61D-12,5.83D-12,4.60D-12,
     /3.73D-12/
# GROUND STATE AND B# end MODE ELASTIC + ROTATION.  AT 293.15 KELVIN     
      DATA YEL/148.,148.,146.,141.,135.,129.,120.,110.,96.0,86.0,      
     /77.5,70.5,60.0,53.5,48.5,42.0,37.0,31.5,24.8,20.4, 
     /17.4,15.5,13.0,10.7,9.20,7.50,6.30,5.30,4.65,4.46,                
     /4.45,4.45,4.60,4.75,5.10,5.55,6.80,7.90,8.50,7.80,                
     /6.25,6.15,6.60,7.10,8.20,9.60,11.5,13.1,14.0,14.2,                
     /14.3,14.4,14.0,12.2,10.4,9.20,8.20,7.75,7.40,7.00,
     /6.25,5.50,5.10,4.75,4.25,3.85,3.56,3.24,2.99,2.77,
     /2.42,2.16,1.95,1.78,1.63,1.16,.907,.630,.484,.393,
     /.331,.252,.204,.165,.139,.120,.106,.0865,.0731,.0636,
     /.0565,.0509,.0465,.0398,.0350,.0317,.0286,.0264,.0224,.0197,
     /.0178,.0164,.0145,.0132,.0123,.0116,.0111,.0107,.0101,.00967,
     /.00937,.00915,.00897,.00868,.00849,.00837,.00829,.00818,.00812,
     /.00808,
     /.00805,.00803,.00801,.00799,.00798,.00797,.00797,.007965,.007957,
     /.007954,
     /.007951,.007951,.007948,.007948,.007948,.007948,.007946,.007945,
     /20*.007945/
# ELASTIC FOR B# end MODE VIBRATIONS.   MOMENTUM TRANSFER     
      DATA YVBMOM/148.,148.,146.,141.,134.,128.,119.,109.,95.0,85.0,    
     /76.5,69.5,59.0,53.5,50.0,46.5,45.5,45.0,43.0,37.0, 
     /28.5,22.5,16.0,11.5,8.95,6.80,5.80,5.05,4.80,4.65,                
     /4.65,4.70,4.80,5.00,5.35,5.65,6.00,6.20,6.20,6.10, 
     /5.50,5.10,5.00,5.20,6.10,7.30,8.80,9.80,10.5,10.5,                
     /9.80,8.50,7.00,5.10,4.00,3.50,3.10,2.90,2.70,2.50,
     /2.20,1.88,1.67,1.50,1.25,1.04,.832,.682,.571,.486,
     /.367,.287,.232,.192,.161,.0819,.0501,.0247,.0149,.0100, 
     /.00721,.00430,.00288,.00192,.00138,.00105,8.23D-4,5.5D-4,3.96D-4,
     /3.0D-4,
     /2.36D-4,1.91D-4,1.59D-4,1.15D-4,8.73D-5,6.90D-5,5.62D-5,4.68D-5,
     /3.19D-5,2.34D-5,
     /1.81D-5,1.45D-5,1.00D-5,7.48D-6,5.86D-6,4.75D-6,3.95D-6,3.36D-6,
     /2.54D-6,2.00D-6,
     /1.63D-6,1.37D-6,1.16D-6,8.32D-7,6.28D-7,4.94D-7,4.00D-7,2.80D-7,
     /2.08D-7,1.62D-7,
     /1.30D-7,1.06D-7,8.89D-8,6.51D-8,4.98D-8,3.95D-8,3.21D-8,2.66D-8,
     /1.79D-8,1.29D-8,
     /9.73D-9,7.63D-9,5.06D-9,3.61D-9,2.71D-9,2.11D-9,1.69D-9,1.38D-9,
     /9.79D-10,7.28D-10,
     /5.63D-10,4.48D-10,3.65D-10,2.35D-10,1.64D-10,1.21D-10,9.27D-11,
     /5.95D-11,4.13D-11,3.04D-11,
     /2.33D-11,1.84D-11,1.49D-11,1.03D-11,7.61D-12,5.83D-12,4.60D-12,
     /3.73D-12/
# ELASTIC FOR B# end MODE VIBRATIONS.      
      DATA YVBEL/148.,148.,146.,141.,135.,129.,120.,110.,96.0,86.0,     
     /77.5,70.5,60.0,54.5,51.1,47.6,46.8,47.2,48.5,46.6, 
     /38.7,32.9,25.4,19.1,15.4,11.9,9.37,7.33,6.20,5.68,                
     /5.52,5.43,5.52,5.65,5.93,6.40,7.70,8.44,8.78,7.93,     
     /6.25,6.15,6.60,7.10,8.20,9.60,11.5,13.1,14.0,14.2,                
     /14.3,14.4,14.0,12.2,10.4,9.20,8.20,7.75,7.40,7.00,
     /6.25,5.50,5.10,4.75,4.25,3.85,3.56,3.24,2.99,2.77,
     /2.42,2.16,1.95,1.78,1.63,1.16,.907,.630,.484,.393,
     /.331,.252,.204,.165,.139,.120,.106,.0865,.0731,.0636,
     /.0565,.0509,.0465,.0398,.0350,.0317,.0286,.0264,.0224,.0197,
     /.0178,.0164,.0145,.0132,.0123,.0116,.0111,.0107,.0101,.00967,
     /.00937,.00915,.00897,.00868,.00849,.00837,.00829,.00818,.00812,
     /.00808,
     /.00805,.00803,.00801,.00799,.00798,.00797,.00797,.007965,.007957,
     /.007954,
     /.007951,.007951,.007948,.007948,.007948,.007948,.007946,.007945,
     /20*.007945/
# EPSILON FOR ELASTIC ANGULAR DISTRIBUTION
# EPSILON= 1.0-YEPS
      DATA YEPS/1.0,.99999,.9999,.999,.98889,.98838,.98751,.98637,
     /.98437,.98256,
     /.98065,.97873,.97500,.97197,.96908,.96429,.95947,.92864,
     /.83162,.69698,
     /.61559,.54634,.47845,.44409,.41864,.40901,.46393,.55266,
     /.66891,.73158,
     /.76665,.79940,.80584,.82736,.85357,.82540,.67623,.61361,
     /.57544,.66197,
     /.82116,.74722,.64577,.61117,.62691,.64971,.65638,.63267,
     /.63530,.62080,
     /.54823,.42904,.32703,.24494,.21449,.21081,.20872,.20537,
     /.19735,.19081,
     /.18652,.17814,.16660,.15748,.14114,.12395,.099839,.085294,
     /.074236,.065563,
     /.052933,.044215,.037873,.033074,.029321,.018575,.013522,.008720,
     /.006419,.005074,
     /.00419,.00311,.00247,.00196,.001619,.001393,.001209,.000954,
     /7.917D-4,6.736D-4,
     /5.847D-4,5.164D-4,4.637D-4,3.818D-4,3.224D-4,2.758D-4,2.454D-4,
     /2.182D-4,1.701D-4,1.385D-4,
     /1.162D-4,9.92D-5,7.50D-5,6.02D-5,4.96D-5,4.19D-5,3.58D-5,3.12D-5,
     /2.44D-5,1.97D-5,
     /1.63D-5,1.37D-5,1.17D-5,8.44D-6,6.34D-6,4.95D-6,3.98D-6,2.74D-6,
     /2.00D-6,1.53D-6,
     /1.21D-6,9.78D-7,8.09D-7,5.79D-7,4.36D-7,3.39D-7,2.72D-7,2.23D-7,
     /1.46D-7,1.026D-7,
     /7.610D-8,5.868D-8,3.796D-8,2.652D-8,1.955D-8,1.499D-8,1.186D-8,
     /9.60D-9,6.65D-9,4.87D-9,
     /3.71D-9,2.91D-9,2.35D-9,1.48D-9,1.01D-9,7.34D-10,5.55D-10,
     /3.48D-10,2.38D-10,1.72D-10,
     /1.30D-10,1.02D-10,8.2D-11,5.6D-11,4.0D-11,3.0D-11,2.4D-11,1.9D-11/
#      
# V[010]  B# end MODE  ( ANALYTICAL DIPOLE def AT THRESHOLD)
# ABOVE 70EV SCALED BY 1/E
      DATA XV2/.08275,2.00,2.50,3.00,3.50,3.80,4.00,4.50,5.00,6.00,     
     /8.00,10.0,15.0,20.0,30.0,50.0,70.0/
      DATA YV2/0.00,0.00,0.24,0.48,1.29,1.70,1.70,1.17,0.74,0.42,
     /0.01,0.08,0.05,0.08,0.12,0.07,.001/
# V[020]  B# end MODE HARMONIC  RESONANCE    ABOVE 70EV SCALED BY 1/E
      DATA X2V2/.15937,0.18,0.50,1.00,2.00,3.00,3.50,3.80,4.00,4.50,
     /5.00,6.00,8.00,10.0,15.0,20.0,30.0,50.0,70.0/
      DATA Y2V2/0.00,0.02,0.01,.003,.025,0.09,0.31,0.44,0.56,0.49,     
     /0.35,0.17,0.08,0.10,0.02,.008,.015,.008,.001/
# V[100] SYMMETRIC STRETCH                ABOVE 70EV SCALED BY 1/E   
      DATA XV1/.17211,0.18,0.20,0.23,0.25,0.30,0.40,0.50,0.60,1.00,
     /2.00,2.50,3.00,3.50,3.80,4.00,4.50,5.00,6.00,8.00,
     /10.0,15.0,20.0,30.0,50.0,70.0/
      DATA YV1/0.00,.475,.790,0.91,0.91,0.82,0.58,0.43,0.34,0.32,    
     /0.38,0.66,0.89,1.27,1.32,1.04,0.53,0.18,.084,.075,                
     /.077,.030,.009,.030,.008,.001/
# V[030] + V[110]                          ABOVE 10EV SCALED BY 1/E  
      DATA X3V2/.251,2.00,2.50,3.00,3.50,3.80,4.00,4.50,5.00,6.00, 
     /10.0/                         
      DATA Y3V2/0.00,0.00,0.01,0.17,0.36,0.58,0.58,0.36,0.17,0.01,      
     /.001/
# V[001] ASYMMETRIC STRETCH  (ANALYTICAL DIPOLE def AT THRESHOLD)
# ABOVE 10EV SCALED BY 1/E 
      DATA XV3/.29126,2.00,3.00,3.50,3.80,4.00,4.50,5.00,6.00,8.00,
     /10.0/
      DATA YV3/0.00,0.00,.002,.005,.010,.005,.002,.001,.001,.001,
     /.001/
# V[040] + V[120] + V[200]  POLYAD 3        ABOVE 10EV SCALED BY 1/E
      DATA XVPD3/.335,0.35,0.50,0.80,2.00,2.50,3.00,3.50,3.80,4.00,     
     /4.50,5.00,6.00,10.0/
      DATA YVPD3/0.00,0.09,.035,0.02,0.02,0.02,0.21,0.43,0.70,0.70,     
     /0.43,0.21,0.05,.020/
#  V[130] + V[210]                          ABOVE 20EV SCALED BY 1/E  
      DATA XV130/0.422,2.00,2.50,3.00,3.50,3.80,4.00,4.50,5.00,6.00,
     /10.0,20.0/               
      DATA YV130/0.00,0.00,.005,0.10,0.22,0.35,0.35,0.22,0.10,.025,
     /.005,.002/
#  POLYAD 4                                ABOVE 10EV SCALED BY 1/E
      DATA XVPD4/0.505,0.55,0.65,1.00,2.00,2.50,3.00,3.50,3.80,4.00,
     /4.50,5.00,6.00,10.0/          
      DATA YVPD4/0.00,.0017,.0005,.0001,.0001,.005,0.12,0.24,0.40,0.40,
     /0.24,0.13,0.01,.001/
#  POLYAD 5                                ABOVE 10EV SCALED BY 1/E 
      DATA XVPD5/0.685,2.00,2.50,3.00,3.50,3.80,4.00,4.50,5.00,6.00,
     /10.0/                         
      DATA YVPD5/0.00,0.00,.003,0.07,0.14,0.24,0.24,0.14,0.08,.006,
     /.001/
#  POLYAD 6                                ABOVE 10EV SCALED BY 1/E 
      DATA XVPD6/0.825,2.00,2.50,3.00,3.50,3.80,4.00,4.50,5.00,6.00,
     /10.0/                         
      DATA YVPD6/0.00,0.00,.001,0.05,0.10,0.16,0.16,0.10,0.05,.004,
     /.001/
#  POLYAD 7                                ABOVE 10EV SCALED BY 1/E
      DATA XVPD7/0.995,2.00,2.50,3.00,3.50,3.80,4.00,4.50,5.00,6.00,
     /10.0/                         
      DATA YVPD7/0.00,0.00,.001,0.03,0.06,0.10,0.10,0.06,0.03,.003,
     /.001/
#  POLYAD 8                                ABOVE 10EV SCALED BY 1/E
      DATA XVPD8/1.160,2.00,2.50,3.00,3.50,3.80,4.00,4.50,5.00,6.00,
     /10.0/                         
      DATA YVPD8/0.00,0.00,.001,0.03,0.06,0.10,0.10,0.06,0.03,.003,
     /.001/
#  POLYAD 9                                ABOVE 10EV SCALED BY 1/E
      DATA XVPD9/1.320,2.00,2.50,3.00,3.50,3.80,4.00,4.50,5.00,6.00,
     /10.0/                         
      DATA YVPD9/0.00,0.00,.001,0.03,0.06,0.10,0.10,0.06,0.03,.003,
     /.001/
#  SUM HIGHER POLYADS                      ABOVE 10EV SCALED BY 1/E
      DATA XVPDH/2.50,3.00,3.50,3.80,4.00,4.50,5.00,6.00,10.0/ 
      DATA YVPDH/0.00,0.01,0.36,0.58,0.58,0.36,0.16,.045,.001/
# DATA FROM RAP AND BRIGLIA ( SCALED BY 1.031 FROM INCREASE IN CO2
#                              IONISATION X-SEC)
# ABOVE 10EV SCALED BY 1/E**3
      DATA XATT/3.30,3.40,3.50,3.60,3.70,3.80,3.90,4.00,4.10,4.20,
     /4.30,4.40,4.50,4.60,4.70,4.80,4.90,5.00,5.10,5.20,
     /5.30,5.40,5.50,5.60,5.70,5.80,5.90,6.00,6.10,6.20,
     /6.30,6.40,6.50,6.60,6.70,6.80,6.90,7.00,7.10,7.20,  
     /7.30,7.40,7.50,7.60,7.70,7.80,7.90,8.00,8.10,8.20, 
     /8.30,8.40,8.50,8.60,8.70,8.80,8.90,9.00,9.10,9.20, 
     /9.30,9.40,9.50,9.60,9.70,9.80,9.90,10.0/
      DATA YATT/.0,1.81D-5,6.35D-5,1.45D-4,2.81D-4,5.44D-4,8.43D-4,
     /1.09D-3,1.32D-3,1.45D-3,
     /1.53D-3,1.40D-3,1.25D-3,1.01D-3,7.98D-4,6.17D-4,4.54D-4,2.91D-4,
     /2.00D-4,1.36D-4,
     /9.98D-5,6.35D-5,2.72D-5,1.81D-5,9.07D-6,1.00D-6,9.07D-6,1.81D-5,
     /2.72D-5,4.54D-5,
     /6.35D-5,1.09D-4,1.45D-4,2.08D-4,2.99D-4,3.99D-4,5.44D-4,9.25D-4,
     /9.25D-4,1.18D-3,
     /1.49D-3,1.84D-3,2.23D-3,2.75D-3,3.22D-3,3.68D-3,4.08D-3,4.37D-3,
     /4.41D-3,4.26D-3,
     /3.92D-3,3.46D-3,2.92D-3,2.22D-3,1.77D-3,1.40D-3,1.05D-3,8.07D-4,
     /6.35D-4,4.99D-4,
     /3.80D-4,2.99D-4,2.36D-4,1.81D-4,1.36D-4,1.09D-4,8.17D-5,1.00D-6/
# USE 1/EN**2 EXTRAPOLATION ABOVE 30EV
      DATA XTRP1/8.89,10.0,11.0,12.0,13.0,15.0,17.0,20.0,23.0,27.0,
     /30.0/
      DATA YTRP1/0.00,.110,.201,.231,.248,.270,.275,.248,.206,.151,
     /.122/
#  USE 1/E**2 EXTRAPOLATION ABOVE 36EV
      DATA XTRP2/11.3,12.0,13.0,14.0,16.0,18.0,21.0,24.0,28.0,31.0,
     /36.0/
      DATA YTRP2/0.00,.322,.662,.772,.873,.919,.919,.873,.689,.562,
     /.417/
# IONISATION VALUES ABOVE 1KEV GENERATED BY BORN BETHE IN SUB)   
# DATA FROM RAPP, LINDSAY AND RIEKE ALSO BB THEORY
#C    DATA XION/13.776,14.5,15.0,15.5,16.0,16.5,17.0,17.5,18.0,18.5,
#    /19.0,19.5,21.0,21.5,22.0,22.5,23.0,23.5,24.0,26.0,      
#    /28.0,30.0,32.0,34.0,36.0,38.0,40.0,45.0,50.0,55.0,
#    /60.0,65.0,70.0,75.0,80.0,85.0,90.0,100.,110.,130.,
#    /140.,160.,180.,200.,225.,250.,275.,300.,350.,400.,
#    /450.,500.,550.,600.,650.,700.,750.,800.,850.,900.,
#    /950.,1000./                                           
# GROSS IONISATION  
#     DATA YION/0.00,.055,.097,.135,.174,.215,.255,.293,.333,.373,
#    /.428,.452,.577,.623,.676,.727,.777,.828,.880,1.14,      
#    /1.37,1.54,1.70,1.84,1.96,2.07,2.19,2.45,2.67,2.84,         
#    /3.02,3.16,3.27,3.36,3.45,3.51,3.56,3.64,3.66,3.65,
#    /3.63,3.52,3.43,3.32,3.21,3.05,2.97,2.82,2.58,2.43,
#    /2.23,2.09,1.96,1.85,1.77,1.68,1.61,1.53,1.45,1.41,                
#    /1.36,1.30/                                      
# COUNTING IONISATION
#     DATA YINC/0.00,.055,.097,.135,.174,.215,.255,.293,.333,.373,
#    /.428,.452,.577,.623,.676,.727,.777,.828,.880,1.14,      
#    /1.37,1.54,1.70,1.84,1.96,2.07,2.19,2.45,2.67,2.84,         
#    /3.01,3.14,3.26,3.33,3.43,3.48,3.54,3.62,3.63,3.62,
#    /3.60,3.48,3.40,3.29,3.17,3.02,2.94,2.79,2.55,2.41,
#    /2.21,2.08,1.94,1.84,1.75,1.66,1.60,1.51,1.44,1.40,                
#    /1.35,1.29/ 
# 
# IONISATION VALUES ABOVE 1KEV GENERATED BY BORN BETHE IN SUB)   
# DATA FROM RAPP, LINDSAY AND RIEKE ALSO BB THEORY
      DATA XION1/13.776,14.5,15.0,15.5,16.0,16.5,17.0,17.5,18.0,18.5,
     /19.0,19.5,21.0,21.5,22.0,22.5,23.0,23.5,24.0,26.0,      
     /28.0,30.0,32.0,34.0,36.0,38.0,40.0,45.0,50.0,55.0,
     /60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,110.,
     /120.,140.,160.,180.,200.,225.,250.,275.,300.,350.,
     /400.,450.,500.,550.,600.,650.,700.,750.,800.,850.,
     /900.,950.,1000./                                           
# IONISATION CO2+ ( INCLUDING EXCITED STATES A2PIu and B2SIGMA+u )
      DATA YION1/0.00,.056,.100,.139,.179,.221,.263,.302,.343,.384,
     /.441,.466,.594,.642,.696,.749,.800,.853,.906,1.05,
     /1.21,1.32,1.40,1.47,1.55,1.63,1.70,1.84,1.94,2.00,
     /2.06,2.10,2.13,2.15,2.19,2.20,2.22,2.23,2.25,2.23, 
     /2.23,2.19,2.12,2.08,2.01,1.95,1.87,1.83,1.75,1.62,
     /1.54,1.43,1.35,1.27,1.21,1.16,1.10,1.06,1.01,.964,
     /.941,.909,.876/  
# IONISATION EXCITATION CO2+(A2PIu) 17.314ev
# ITIKAWA : SCALED CO2+ BY 38.5% ABOVE 400EV
      DATA XION2/17.314,18.8,19.9,21.1,22.4,23.7,25.1,26.6,28.2,29.8,
     /31.6,33.5,35.4,37.5,39.8,42.1,44.6,47.2,50.0,53.0,
     /56.1,59.5,63.0,66.7,70.7,74.8,79.3,88.9,94.2,99.8,
     /106.,112.,119.,126.,133.,141.,149.,158.,167.,177.,
     /188.,199.,211.,223.,236.,250.,265.,281.,298.,315.,
     /334.,354.,375.,397.,450.,500.,550.,600.,650.,700.,
     /750.,800.,850.,900.,950.,1000./ 
      DATA YION2/0.0,.0314,.0494,.0682,.0873,.107,.128,.150,.168,.191,
     /.214,.233,.256,.280,.304,.331,.356,.388,.416,.445,
     /.476,.508,.541,.579,.615,.646,.675,.723,.740,.754,
     /.767,.776,.784,.790,.796,.796,.798,.796,.796,.791,
     /.784,.775,.763,.750,.734,.718,.702,.687,.671,.656,
     /.640,.624,.609,.593,.551,.520,.489,.466,.447,.423,
     /.408,.389,.371,.362,.350,.337/                            
c IONISATION EXCITATION CO2+(B2SIGMA+u) 18.077ev  
# ITIKAWA : SCALED CO2+ BY 22.0% ABOVE 400EV
      DATA XION3/18.077,18.8,19.9,21.1,22.4,23.7,25.1,26.6,28.2,29.8,
     /31.6,33.5,35.4,37.5,39.8,42.1,44.6,47.2,50.0,53.0,
     /56.1,59.5,63.0,66.7,70.7,74.8,79.3,88.9,94.2,99.8,
     /106.,112.,119.,126.,133.,141.,149.,158.,167.,177.,
     /188.,199.,211.,223.,236.,250.,265.,281.,298.,315.,
     /334.,354.,375.,397.,450.,500.,550.,600.,650.,700.,
     /750.,800.,850.,900.,950.,1000./ 
      DATA YION3/0.0,.0121,.0247,.0384,.0517,.0653,.0797,.0932,.106,
     /.120,
     /.134,.147,.162,.176,.191,.207,.222,.239,.256,.272,
     /.288,.304,.321,.337,.353,.371,.386,.415,.425,.434,
     /.443,.451,.457,.462,.466,.468,.469,.467,.466,.462,
     /.457,.449,.441,.432,.423,.414,.404,.395,.386,.377,
     /.368,.357,.348,.339,.315,.297,.279,.266,.255,.242,
     /.233,.222,.212,.207,.200,.193/                            
# IONISATION O+
      DATA XION4/19.07,25.0,30.0,35.0,40.0,45.0,50.0,55.0,60.0,65.0,
     /70.0,75.0,80.0,85.0,90.0,95.0,100.,110.,120.,140.,
     /160.,180.,200.,225.,250.,275.,300.,350.,400.,450.,
     /500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,
     /1000./
      DATA YION4/0.0,.0419,.0986,.150,.195,.245,.299,.352,.407,.452,
     /.485,.526,.556,.584,.606,.622,.640,.663,.671,.680,
     /.670,.647,.631,.606,.572,.553,.524,.470,.433,.388,
     /.361,.339,.311,.299,.283,.268,.252,.238,.229,.222,
     /.209/
# IONISATION CO+
      DATA XION5/19.47,25.0,30.0,35.0,40.0,45.0,50.0,55.0,60.0,65.0,
     /70.0,75.0,80.0,85.0,90.0,95.0,100.,110.,120.,140.,
     /160.,180.,200.,225.,250.,275.,300.,350.,400.,450.,
     /500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,
     /1000./
      DATA YION5/0.0,.0279,.139,.247,.281,.299,.319,.339,.362,.369,
     /.379,.380,.386,.389,.390,.390,.389,.386,.378,.365,
     /.340,.333,.314,.300,.278,.269,.250,.226,.211,.193,
     /.178,.165,.154,.145,.139,.132,.124,.119,.113,.110,
     /.103/
# IONISATION C+
      DATA XION6/27.82,30.0,35.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,
     /75.0,80.0,85.0,90.0,95.0,100.,110.,120.,140.,160.,
     /180.,200.,225.,250.,275.,300.,350.,400.,450.,500.,
     /550.,600.,650.,700.,750.,800.,850.,900.,950.,1000./
      DATA YION6/0.0,.0024,.028,.0782,.121,.149,.178,.208,.229,.246,
     /.261,.278,.285,.296,.306,.310,.322,.323,.331,.321,
     /.309,.301,.288,.273,.260,.245,.215,.202,.183,.169,
     /.154,.145,.136,.127,.123,.116,.108,.105,.101,.0964/
# IONISATION CO2++
      DATA XION7/37.4,45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,
     /90.0,95.0,100.,110.,120.,140.,160.,180.,200.,225.,
     /250.,275.,300.,350.,400.,450.,500.,550.,600.,650.,
     /700.,750.,800.,850.,900.,950.,1000./
      DATA YION7/0.0,.00166,.00399,.00686,.0106,.0126,.0159,.0172,.0206,
     /.0219,
     /.0227,.0246,.0265,.0285,.0290,.0294,.0290,.0285,.0272,.0257,
     /.0232,.0231,.0203,.0183,.0175,.0165,.0141,.0128,.0125,.0113,
     /.0106,.00986,.00961,.00883,.00823,.00741,.00723/
# IONISATION C++
      DATA XION8/72.0,80.0,85.0,90.0,95.0,100.,110.,120.,140.,160.,
     /180.,200.,225.,250.,275.,300.,350.,400.,450.,500.,
     /550.,600.,650.,700.,750.,800.,850.,900.,950.,1000./
      DATA YION8/0.0,.000179,.000215,.000311,.000506,.000520,.000751,
     /.00108,.00157,.00186,
     /.00249,.00279,.00256,.00291,.00247,.00252,.00216,.00224,.00198,
     /.00177,
     /.00184,.00145,.00169,.00147,.00157,.00139,.00129,.000965,.000897,
     /.000984/
# IONISATION O++
      DATA XION9/74.0,95.0,100.,110.,120.,140.,160.,180.,200.,225.,
     /250.,275.,300.,350.,400.,450.,500.,550.,600.,650.,
     /700.,750.,800.,850.,900.,950.,1000./
      DATA YION9/0.0,.000169,.000197,.000324,.000721,.00133,.00159,
     /.00217,.00233,.00271,
     /.00286,.00304,.00276,.00249,.00215,.00193,.00192,.00168,.00156,
     /.00142,
     /.00176,.00147,.00127,.00127,.00100,.00116,.00103/
# CARBON K-SHELL IONISATION X-SECTION  
      DATA XKSHC/285.,298.,307.,316.,325.,335.,345.,365.,398.,422.,
     /447.,473.,501.,531.,613.,668.,708.,750.,817.,917.,
     /1000.,1122.,1296.,1496.,1679.,1884.,2054.,2238.,2512.,2985.,
     /3981.,5012.,7079.,1.0D4,1.50D4,2.05D4,2.51D4,3.07D4,4.10D4,5.01D4,
     /6.13D4,7.08D4,8.18D4,1.0D5,1.54D5,2.05D5,2.99D5,4.10D5,5.01D5,
     /6.13D5,
     /7.08D5,8.18D5,1.0D6,1.26D6,1.5D6,2.05D6,3.07D6,4.10D6,5.01D6,
     /6.13D6,
     /7.08D6,8.18D6,1.0D7,1.26D7,1.5D7,2.05D7,3.07D7,4.10D7,5.01D7,
     /6.13D7,
     /7.08D7,8.18D7,1.0D8,1.26D8,1.5D8,2.05D8,3.07D8,4.10D8,5.01D8,
     /6.13D8,
     /7.08D8,8.18D8,1.0D9/
      DATA YKSHC/0.00,1.66D-4,3.48D-4,5.25D-4,6.96D-4,8.63D-4,1.02D-3,
     /1.33D-3,1.75D-3,2.01D-3,
     /2.24D-3,2.46D-3,2.66D-3,2.84D-3,3.21D-3,3.38D-3,3.47D-3,3.55D-3,
     /3.65D-3,3.72D-3,
     /3.75D-3,3.74D-3,3.68D-3,3.57D-3,3.45D-3,3.31D-3,3.19D-3,3.07D-3,
     /2.91D-3,2.66D-3,
     /2.25D-3,1.95D-3,1.55D-3,1.21D-3,8.97D-4,7.07D-4,6.07D-4,5.21D-4,
     /4.21D-4,3.63D-4,
     /3.14D-4,2.84D-4,2.57D-4,2.25D-4,1.74D-4,1.50D-4,1.28D-4,1.15D-4,
     /1.09D-4,1.05D-4,
     /1.03D-4,1.02D-4,1.01D-4,1.005D-4,1.01D-4,1.03D-4,1.07D-4,1.11D-4,
     /1.14D-4,1.17D-4,
     /1.20D-4,1.22D-4,1.25D-4,1.29D-4,1.32D-4,1.38D-4,1.45D-4,1.50D-4,
     /1.54D-4,1.58D-4,
     /1.60D-4,1.63D-4,1.67D-4,1.71D-4,1.74D-4,1.80D-4,1.87D-4,1.92D-4,
     /1.96D-4,2.00D-4,
     /2.02D-4,2.05D-4,2.09D-4/
# OXYGEN K-SHELL IONISATION X-SECTION (MULTIPLY BY 2 FOR MOLECULE)
      DATA XKSHO/532.,541.,557.,574.,591.,609.,627.,646.,665.,685.,
     /706.,727.,749.,793.,841.,891.,944.,1000.,1090.,1188.,
     /1296.,1496.,1679.,1884.,2054.,2238.,2512.,2985.,3981.,5012.,
     /7079.,1.00D4,1.50D4,2.05D4,2.51D4,3.07D4,4.10D4,5.01D4,6.13D4,
     /7.08D4,
     /8.18D4,1.00D5,1.54D5,2.05D5,2.99D5,4.10D5,5.01D5,6.13D5,7.08D5,
     /8.18D5,
     /1.00D6,1.25D6,1.50D6,2.05D6,3.07D6,4.10D6,5.01D6,6.13D6,7.08D6,
     /8.18D6,
     /1.00D7,1.26D7,1.50D7,2.05D7,3.07D7,4.10D7,5.01D7,6.13D7,7.08D7,
     /8.18D7,
     /1.00D8,1.26D8,1.50D8,2.05D8,3.07D8,4.10D8,5.01D8,6.13D8,7.08D8,
     /8.18D8,
     /1.00D9/
      DATA YKSHO/0.00,3.31D-5,8.86D-5,1.42D-4,1.95D-4,2.45D-4,2.94D-4,
     /3.41D-4,3.87D-4,4.31D-4,
     /4.73D-4,5.14D-4,5.53D-4,6.27D-4,6.95D-4,7.56D-4,8.13D-4,8.63D-4,
     /9.29D-4,9.84D-4,
     /1.03D-3,1.08D-3,1.10D-3,1.11D-3,1.11D-3,1.10D-3,1.08D-3,1.03D-3,
     /9.24D-4,8.27D-4,
     /6.81D-4,5.49D-4,4.18D-4,3.35D-4,2.90D-4,2.50D-4,2.04D-4,1.77D-4,
     /1.53D-4,1.39D-4,
     /1.26D-4,1.11D-4,
     /8.62D-5,7.45D-5,6.36D-5,5.75D-5,5.48D-5,5.29D-5,5.20D-5,5.13D-5,
     /5.08D-5,5.08D-5,5.12D-5,5.24D-5,5.47D-5,5.68D-5,5.84D-5,6.00D-5,
     /6.13D-5,6.26D-5,
     /6.44D-5,6.65D-5,6.81D-5,7.11D-5,7.50D-5,7.78D-5,7.97D-5,8.17D-5,
     /8.31D-5,8.45D-5,
     /8.65D-5,8.87D-5,9.04D-5,9.36D-5,9.75D-5,1.00D-4,1.02D-4,1.04D-4,
     /1.06D-4,1.07D-4,
     /1.09D-4/
# BREMSSTRAHLUNG X-SECTION WITH CUT OFF UNITS 10**-24 CM**2
      DATA Z6T/298.,178.,85.2,47.5,26.3,12.2,7.06,4.45,3.06,2.82,
     /2.89,2.99,3.08,3.13,3.18,3.25,3.31,3.39,3.44,3.49,
     /3.52,3.54,3.55,3.57,3.57/
      DATA Z8T/477.,294.,145.,81.6,45.8,21.2,12.2,7.69,5.22,4.76,
     /4.84,4.99,5.10,5.20,5.27,5.38,5.46,5.58,5.65,5.72,
     /5.77,5.80,5.81,5.83,5.84/
      DATA EBRM/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,
     /2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,
     /4.E7,5.E7,6.E7,8.E7,1.E8/
# ---------------------------------------------------------------------
# 2015: UPGRADE INCLUDES :
#      1) OSCILLATOR STRENGTH FROM ANALYSIS OF DATA FROM
#         BRION GROUP AND SHAW ET AL . OSCILLATOR SUM S(0)=21.9856
#         S(-1)i=5.372
#      2) USED STRAUB DATA FOR DISSOCIATIVE IONISATION ABOVE 30EV
#         AND   RAP AND ENGLADER-GOLDEN  AT LOW ENERGY
#      3) IONISATION-EXCITATION FROM ITIKAWA REVIEW
#
# ANGULAR DISTRIBUTION ONLY ALLOWED FOR ELASTIC , IONISATION AND 
# EXCITATION ABOVE 10EV. 
#  
# ---------------------------------------------------------------------
c     NANISO=0
      IF(NANISO == 0):
 :
       NAME='CO2  2015   ISOTROPIC    '
      else:
       NAME='CO2  2015 ANISOTROPIC    '
      # endIF
#  --------------------------------------------------------------------
# ---------------------------------------------------------------------
#    BORN-BETHE VALUES FOR IONISATION
      CONST=1.873884D-20
      EMASS2=1021997.804
      API=DACOS(-1.00)
      A0=0.52917720859D-8
      RY=13.60569193
      BBCONST=16.0*API*A0*A0*RY*RY/EMASS2
#
      AM2=5.38
      C=57.0 
      EOBFAC=0.56
#     
# AVERAGE AUGER EMISSIONS FROM EACH SHELL
      AUGKC=2.0
      AUGKO=1.99
# ARRAY SIZE
      NASIZE=4000
#
      NION=11
      NATT=1
      NIN=144  
      NNULL=0
#
      NBREM=25
      DO 11 J=1,NIN
      IZBR(J)=0
   11 CONTINUE
      IZBR(145)=6
      IZBR(146)=8
#
      DO 1 J=1,6
    1 KEL(J)=NANISO
      DO 2 J=1,NIN
      KIN(J)=NANISO
    2 CONTINUE
#                 
      NEL=158                                                           
      NV2=17                                                          
      N2V2=19                                                           
      NV1=26                                                            
      N3V2=11
      NV3=11
      NPD3=14                                                           
      NV130=12                                                          
      NPD4=14  
      NPD5=11
      NPD6=11
      NPD7=11
      NPD8=11
      NPD9=11
      NPDH=9                                                          
      NATT1=68
      NTRP1=11
      NTRP2=11
      NION1=63
      NION2=66
      NION3=66
      NION4=41
      NION5=41
      NION6=40
      NION7=37
      NION8=30
      NION9=27 
      NKSHC=83
      NKSHO=81 
#                                                     
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(44.0095*AMU)                                      
      E(3)=13.776                          
      E(4)=0.0                   
      E(5)=0.0 
      E(6)=0.0 
#     
      EION(1)=13.776
      EION(2)=17.314
      EION(3)=18.077
      EION(4)=19.07
      EION(5)=19.47
      EION(6)=27.82
      EION(7)=37.4
      EION(8)=72.0
      EION(9)=74.0
      EION(10)=285.0
      EION(11)=532.0
# OPAL AND BEATY       
#     DO 90 JK=1,9
      DO 90 JK=1,11
#     EOBY(JK)=EION(JK)*EOBFAC
      EOBY(JK)=13.8
   90 CONTINUE
# OPAL BEATY FOR CARBON AND OXYGEN K-SHELLS
#     EOBY(10)=200.0
#     EOBY(11)=375.0
#
      DO 91 JK=1,9
      LEGAS(JK)=0
      ISHELL(JK)=0
      NC0(JK)=0
      EC0(JK)=0.0
      WKLM(JK)=0.0
      EFL(JK)=0.0
      NG1(JK)=0
      EG1(JK)=0.0
      NG2(JK)=0
      EG2(JK)=0.0
   91 CONTINUE
# DOUBLE CHARGE ++ ION STATES (EXTRA ELECTRON)
      NC0(7)=1
      EC0(7)=1.0
      NC0(8)=1
      EC0(8)=1.0
      NC0(9)=1
      EC0(9)=1.0  
# FLUORESCENCE DATA K SHELLS   
      LEGAS(10)=1
      LEGAS(11)=2
      ISHELL(10)=1
      ISHELL(11)=1
#
      NC0(10)=2
      EC0(10)=253.
      WKLM(10)=0.0026
      EFL(10)=273.
      NG1(10)=1
      EG1(10)=253.
      NG2(10)=2
      EG2(10)=5.
      NC0(11)=3
      EC0(11)=485.
      WKLM(11)=0.0069
      EFL(11)=518.
      NG1(11)=1
      EG1(11)=480.
      NG2(11)=2
      EG2(11)=5.0
#     
      DO 776 J=1,NION
      DO 777 I=1,NASIZE
      IF(EG(I):
 > EION(J)) :
       IOFFION(J)=I-1
       GO TO 776
      # endIF 
  777 CONTINUE
  776 CONTINUE
# DIPOLE TRANSITION STRENGTH FOR VIBRATIONS V010 AND V001      
      AMPV2=0.1703
      AMPV3=0.3922
#-----------------------------------------------------------------------
#  B0 IS ROTATIONAL CONSTANT
#  QBQA IS QUADRUPOLE MOMENT       
      B0=4.838D-5
      A0=0.5291772083D-8
      QBQA=3.24
      QBK=1.67552*(QBQA*A0)**2
#--------------------------------------------------------------------- 
# CALC FRACTIONAL POPULATION DENSITY OF ROTATIONAL STATES
      PJ(1)=1.0
      DO 3 L=2,31  
      J=(2*L)-2
    3 PJ(L)=(2*J+1)*math.exp(-J*(J+1)*B0/AKT)
      SUM=0.0
      DO 4 L=1,31
    4 SUM=SUM+PJ(L)
      DO 5 L=1,31
    5 PJ(L)=PJ(L)/SUM
#--------------------------------------------------------------------- 
# CALC ROTATIONAL TRANSITION ENERGIES
      DO 6 K=1,59,2 
      EIN(K)=B0*(4*K+2)
    6 EIN(K+1)=-EIN(K)   
      EIN(61)  = -0.08275                                               
      EIN(62)  =  0.08275
      EIN(63)  = -0.15937                                               
      EIN(64)  =  0.15937 
      EIN(65)  = -0.17211
      EIN(66)  =  0.17211
      EIN(67)  = -0.251  
      EIN(68)  =  0.251 
      EIN(69)  = -0.29126
      EIN(70)  =  0.29126  
      EIN(71)  =  0.335                                                 
      EIN(72)  =  0.422                                                 
      EIN(73)  =  0.505 
      EIN(74)  =  0.685 
      EIN(75)  =  0.825
      EIN(76)  =  0.995
      EIN(77)  =  1.160
      EIN(78)  =  1.320                                                 
      EIN(79)  =  2.500                                                 
      EIN(80)  =  6.50                                                  
      EIN(81)  =  6.75
      EIN(82)  = 7.00
      EIN(83)  = 7.25
      EIN(84)  = 7.50
      EIN(85)  = 7.75
      EIN(86)  = 8.00
      EIN(87)  = 8.25
      EIN(88)  = 8.50
      EIN(89)  = 8.75
      EIN(90)  = 8.89                                                   
      EIN(91)  = 8.90 
      EIN(92)  = 9.15
      EIN(93)  = 9.40
      EIN(94)  = 9.65
      EIN(95)  = 9.90
      EIN(96)  =10.15
      EIN(97)  =10.7 
      EIN(98)  =11.048
      EIN(99)  =11.3
      EIN(100) =11.385                                                 
      EIN(101) =11.543
      EIN(102) =11.608
      EIN(103) =11.683
      EIN(104) =11.758
      EIN(105) =11.826
      EIN(106) =11.971
      EIN(107) =12.142
      EIN(108) =12.301
      EIN(109) =12.469
      EIN(110) =12.627                                                 
      EIN(111) =12.75 
      EIN(112) =12.901
      EIN(113) =13.01 
      EIN(114) =13.15 
      EIN(115) =13.28 
      EIN(116) =13.39 
      EIN(117) =13.51 
      EIN(118) =13.68 
      EIN(119) =13.78 
      EIN(120) =14.0                                                   
      EIN(121) =14.25 
      EIN(122) =14.5  
      EIN(123) =14.75 
      EIN(124) =15.0  
      EIN(125) =15.25 
      EIN(126) =15.5  
      EIN(127) =15.75 
      EIN(128) =16.0  
      EIN(129) =16.25 
      EIN(130) =16.5                                                   
      EIN(131) =16.75 
      EIN(132) =17.0  
      EIN(133) =17.25 
      EIN(134) =17.5  
      EIN(135) =17.75 
      EIN(136) =18.0
      EIN(137) =18.25
      EIN(138) =18.50
      EIN(139) =18.75
      EIN(140) =19.0
      EIN(141) =19.25
      EIN(142) =19.50
      EIN(143) =19.75
      EIN(144) =25.0
      EIN(145) = 0.0
      EIN(146) = 0.0      
#  OFFSET ENERGY FOR EXCITATION LEVELS ANGULAR DISTRIBUTION
      DO 551 NL=1,144
      DO 651 I=1,NASIZE
      IF(EG(I):
 > abs(EIN(NL))) :
       IOFFN(NL)=I-1
       GO TO 551
      # endIF
  651 CONTINUE
  551 CONTINUE
#***********************************************************************
# ENTER PENNING TRANSFER FRACTION FOR EACH LEVEL
# FIRST 81 LEVELS UNLIKELY TO HAVE ENOUGH ENERGY
      DO 7 K=1,81
      DO 7 L=1,3
    7 PENFRA[L,K]=0.0
# PENNING TRANSFER FRACTION FOR LEVELS 
      DO 7000 K=82,NIN
      PENFRA[1,K]=0.0
# PENNING TRANSFER DISTANCE IN MICRONS
      PENFRA[2,K]=1.0
# PENNING TRANSFER TIME IN PICOSECONDS
      PENFRA[3,K]=1.0
 7000 CONTINUE
      IF(IPEN == 0):
 GO TO 9
      DO 8 KDUM=82,NIN
      IF(PENFRA[1,KDUM] == 0.0):
 GO TO 8
      WRITE(6,999) NAME,EIN(KDUM),PENFRA[1,KDUM],PENFRA[2,KDUM],
     /PENFRA[3,KDUM]
 999  FORMAT(' GAS = ',A15,' ENERGY LEVEL = ',F7.4,' EV.',/,' PENNING PR
     /OBABILITY =',F5.3,' ABS.LENGTH =',F7.2,' DECAY TIME =',F7.1,/)
    8 CONTINUE
#***********************************************************************
# 
# DEGENERACY OF VIBRATIONAL STATES
    9 DEGV1=1.0
      DEGV2=2.0
      DEGV3=1.0
      DEG2V2=3.0
# 3V2 === SUM (3V2 + V12) =   4+2
      DEG3V2=6.0 
#----------------------------------------------------         
# CALC POPULATION OF VIBRATIONAL STATES    
      SUM=0.0   
      APOPV2=DEGV2*math.exp(EIN(61)/AKT)   
      APOP2V2=DEG2V2*math.exp(EIN(63)/AKT)
      APOPV1=DEGV1*math.exp(EIN(65)/AKT)  
      APOP3V2=DEG3V2*math.exp(EIN(67)/AKT)
      APOPV3=DEGV3*math.exp(EIN(69)/AKT)
      SUM=1.0+APOPV2+APOP2V2+APOPV1+APOP3V2+APOPV3
      APOPGS=1.0/SUM
      APOPV2=APOPV2/SUM
      APOP2V2=APOP2V2/SUM
      APOPV1=APOPV1/SUM
      APOP3V2=APOP3V2/SUM
      APOPV3=APOPV3/SUM
      APB# end=APOPV2+APOP2V2+APOP3V2
#     WRITE(6,865) APOPGS,APOPV2,APOP2V2,APOPV1,APOP3V2,APOPV3,APB# end
# 865 FORMAT(' APOPGS=',F8.6,' APOPV2=',F8.6,' APOP2V2=',F8.6,' APOPV1='
#    /,F8.6,' APOP3V2=',F8.6,' APOPV3=',F8.6,/,' APB# end=',F12.10)
#     
# RENORMALISE VIBRATIONAL GROUND STATE POPULATION IN ORDER TO ACCOUNT 
# FOR EXCITATION FROM VIBRATIONALLY EXCITED STATES  
      APOPGS=1.0
# B# end MODE AND EFFECTIVE GROUND STATE POPULATION AT 293.15 KELVIN      
      AEXT20=7.51373753D-2
      AGST20=1.0-AEXT20  
#     WRITE(6,866) APOPGS,AEXT20 
# 866 FORMAT(' RENORMALISED GS POPULATION=', F6.4,' AEXT20=',F12.10)  
#------------------------------------------------------            
      SCRPT(1)='                                                  '
      SCRPT(2)=' ELASTIC  ANISOTROPIC          CO2                '
      IF(NANISO == 0):
 :
      SCRPT(2)=' ELASTIC    ISOTROPIC          CO2                '  
      # endIF
      SCRPT(3)=' IONISATION        CO2+           ELOSS=  13.776  '
      SCRPT(4)=' IONISATION-EXC    CO2+(A2PIu)    ELOSS=  17.314  '
      SCRPT(5)=' IONISATION-EXC    CO2+(B2SIG+u)  ELOSS=  18.077  '
      SCRPT(6)=' DISSOCIATIVE ION  O+             ELOSS=  19.07   '
      SCRPT(7)=' DISSOCIATIVE ION  CO+            ELOSS=  19.47   '
      SCRPT(8)=' DISSOCIATIVE ION  C+             ELOSS=  27.82   '
      SCRPT(9)=' DISSOCIATIVE ION  CO2++          ELOSS=  37.4    '
      SCRPT(10)=' DISSOCIATIVE ION  C++            ELOSS=  72.0    '
      SCRPT(11)=' DISSOCIATIVE ION  O++            ELOSS=  74.0    '
      SCRPT(12)=' IONISATION CARBON K-SHELL        ELOSS= 285.0    '
      SCRPT(13)=' IONISATION OXYGEN K-SHELL        ELOSS= 532.0    '
      SCRPT(14)=' ATTACHMENT                                       '
      SCRPT(15)='                                                  '
      SCRPT(16)='                                                  '
      SCRPT(17)=' ROTATION  0-2                    ELOSS=  0.00029 '
      SCRPT(18)=' ROTATION  2-0                    ELOSS= -0.00029 '
      SCRPT(19)=' ROTATION  2-4                    ELOSS=  0.00068 '
      SCRPT(20)=' ROTATION  4-2                    ELOSS= -0.00068 '
      SCRPT(21)=' ROTATION  4-6                    ELOSS=  0.00106 '
      SCRPT(22)=' ROTATION  6-4                    ELOSS= -0.00106 '
      SCRPT(23)=' ROTATION  6-8                    ELOSS=  0.00145 '
      SCRPT(24)=' ROTATION  8-6                    ELOSS= -0.00145 '
      SCRPT(25)=' ROTATION  8-10                   ELOSS=  0.00184 '
      SCRPT(26)=' ROTATION 10-8                    ELOSS= -0.00184 '
      SCRPT(27)=' ROTATION 10-12                   ELOSS=  0.00223 '
      SCRPT(28)=' ROTATION 12-10                   ELOSS= -0.00223 '
      SCRPT(29)=' ROTATION 12-14                   ELOSS=  0.00261 '
      SCRPT(30)=' ROTATION 14-12                   ELOSS= -0.00261 '
      SCRPT(31)=' ROTATION 14-16                   ELOSS=  0.00300 '
      SCRPT(32)=' ROTATION 16-14                   ELOSS= -0.00300 '
      SCRPT(33)=' ROTATION 16-18                   ELOSS=  0.00339 '
      SCRPT(34)=' ROTATION 18-16                   ELOSS= -0.00339 '
      SCRPT(35)=' ROTATION 18-20                   ELOSS=  0.00377 '
      SCRPT(36)=' ROTATION 20-18                   ELOSS= -0.00377 '
      SCRPT(37)=' ROTATION 20-22                   ELOSS=  0.00416 '
      SCRPT(38)=' ROTATION 22-20                   ELOSS= -0.00416 '
      SCRPT(39)=' ROTATION 22-24                   ELOSS=  0.00455 '
      SCRPT(40)=' ROTATION 24-22                   ELOSS= -0.00455 '
      SCRPT(41)=' ROTATION 24-26                   ELOSS=  0.00493 '
      SCRPT(42)=' ROTATION 26-24                   ELOSS= -0.00493 '
      SCRPT(43)=' ROTATION 26-28                   ELOSS=  0.00532 '
      SCRPT(44)=' ROTATION 28-26                   ELOSS= -0.00532 '
      SCRPT(45)=' ROTATION 28-30                   ELOSS=  0.00571 '
      SCRPT(46)=' ROTATION 30-28                   ELOSS= -0.00571 '
      SCRPT(47)=' ROTATION 30-32                   ELOSS=  0.00610 '
      SCRPT(48)=' ROTATION 32-30                   ELOSS= -0.00610 '
      SCRPT(49)=' ROTATION 32-34                   ELOSS=  0.00648 '
      SCRPT(50)=' ROTATION 34-32                   ELOSS= -0.00648 '
      SCRPT(51)=' ROTATION 34-36                   ELOSS=  0.00687 '
      SCRPT(52)=' ROTATION 36-34                   ELOSS= -0.00687 '
      SCRPT(53)=' ROTATION 36-38                   ELOSS=  0.00726 '
      SCRPT(54)=' ROTATION 38-36                   ELOSS= -0.00726 '
      SCRPT(55)=' ROTATION 38-40                   ELOSS=  0.00764 '
      SCRPT(56)=' ROTATION 40-38                   ELOSS= -0.00764 '
      SCRPT(57)=' ROTATION 40-42                   ELOSS=  0.00803 '
      SCRPT(58)=' ROTATION 42-40                   ELOSS= -0.00803 '
      SCRPT(59)=' ROTATION 42-44                   ELOSS=  0.00842 '
      SCRPT(60)=' ROTATION 44-42                   ELOSS= -0.00842 '
      SCRPT(61)=' ROTATION 44-46                   ELOSS=  0.00881 '
      SCRPT(62)=' ROTATION 46-44                   ELOSS= -0.00881 '
      SCRPT(63)=' ROTATION 46-48                   ELOSS=  0.00919 '
      SCRPT(64)=' ROTATION 48-46                   ELOSS= -0.00919 '
      SCRPT(65)=' ROTATION 48-50                   ELOSS=  0.00958 '
      SCRPT(66)=' ROTATION 50-48                   ELOSS= -0.00958 '
      SCRPT(67)=' ROTATION 50-52                   ELOSS=  0.00997 '
      SCRPT(68)=' ROTATION 52-50                   ELOSS= -0.00997 '
      SCRPT(69)=' ROTATION 52-54                   ELOSS=  0.01035 '
      SCRPT(70)=' ROTATION 54-52                   ELOSS= -0.01035 '
      SCRPT(71)=' ROTATION 54-56                   ELOSS=  0.01074 '
      SCRPT(72)=' ROTATION 56-54                   ELOSS= -0.01074 '
      SCRPT(73)=' ROTATION 56-58                   ELOSS=  0.01113 '
      SCRPT(74)=' ROTATION 58-56                   ELOSS= -0.01113 '
      SCRPT(75)=' ROTATION 58-60                   ELOSS=  0.01151 '
      SCRPT(76)=' ROTATION 60-58                   ELOSS= -0.01151 '
      SCRPT(77)=' VIBRATION  (010)                 ELOSS= -0.08275 '
      SCRPT(78)=' VIBRATION (010)                  ELOSS=  0.08275 '
      SCRPT(79)=' VIBRATION (020)                  ELOSS= -0.15937 '
      SCRPT(80)=' VIBRATION (020)                  ELOSS=  0.15937 '
      SCRPT(81)=' VIBRATION (100)                  ELOSS= -0.17211 '
      SCRPT(82)=' VIBRATION (100)                  ELOSS=  0.17211 '
      SCRPT(83)=' VIBRATION (030)+(110)            ELOSS= -0.251   '
      SCRPT(84)=' VIBRATION (030)+(110)            ELOSS=  0.251   '
      SCRPT(85)=' VIBRATION (001)                  ELOSS= -0.29126 '
      SCRPT(86)=' VIBRATION (001)                  ELOSS=  0.29126 '
      SCRPT(87)=' VIBRATION  POLYAD 3              ELOSS=  0.335   '
      SCRPT(88)=' VIBRATION (130)+(210)            ELOSS=  0.422   '
      SCRPT(89)=' VIBRATION  POLYAD 4              ELOSS=  0.505   '
      SCRPT(90)=' VIBRATION  POLYAD 5              ELOSS=  0.685   '
      SCRPT(91)=' VIBRATION  POLYAD 6              ELOSS=  0.825   '
      SCRPT(92)=' VIBRATION  POLYAD 7              ELOSS=  0.995   '
      SCRPT(93)=' VIBRATION  POLYAD 8              ELOSS=  1.160   '
      SCRPT(94)=' VIBRATION  POLYAD 9              ELOSS=  1.320   '
      SCRPT(95)=' VIBRATION  POLYAD HIGH SUM       ELOSS=  2.50    '
      SCRPT(96)=' 1DEL DISSOC CO + O   F=.0000698  ELOSS=  6.50    '
      SCRPT(97)=' 1DEL DISSOC CO + 0   F=.0000630  ELOSS=  6.75    '
      SCRPT(98)=' 1DEL DISSOC CO + O   F=.0000758  ELOSS=  7.00    '
      SCRPT(99)=' 1DEL DISSOC CO + O   F=.0001638  ELOSS=  7.25    '
      SCRPT(100)=' 1DEL DISSOC CO + O   F=.0003356  ELOSS=  7.50    '
      SCRPT(101)=' 1DEL DISSOC CO + 0   F=.0007378  ELOSS=  7.75    '
      SCRPT(102)=' 1DEL DISSOC CO + 0   F=.001145   ELOSS=  8.00    '
      SCRPT(103)=' 1DEL DISSOC CO + O   F=.001409   ELOSS=  8.25    '
      SCRPT(104)=' 1DEL DISSOC CO + O   F=.001481   ELOSS=  8.50    '
      SCRPT(105)=' 1DEL DISSOC CO + O   F=.000859   ELOSS=  8.75    '
      SCRPT(106)=' TRIPLET                          ELOSS=  8.89    '
      SCRPT(107)=' 1PI  DISSOC CO + O   F=.001687   ELOSS=  8.90    '
      SCRPT(108)=' 1PI  DISSOC CO + O   F=.002115   ELOSS=  9.15    '
      SCRPT(109)=' 1PI  DISSOC CO + O   F=.001920   ELOSS=  9.40    '
      SCRPT(110)=' 1PI  DISSOC CO + O   F=.001180   ELOSS=  9.65    '
      SCRPT(111)=' 1PI  DISSOC CO + 0   F=.000683   ELOSS=  9.90    '
      SCRPT(112)=' 1PI  DISSOC CO + O   F=.000456   ELOSS= 10.15    '
      SCRPT(113)=' SOME RA:AU BANDS  F=.004361   ELOSS= 10.7     '
      SCRPT(114)=' 1SIG# + 1SIG + C#    F=.1718     ELOSS= 11.048   '
      SCRPT(115)=' TRIPLETS                         ELOSS= 11.3     '
      SCRPT(116)=' 1PIu                 F=.06242    ELOSS= 11.385   '
      SCRPT(117)=' RYDBERG      DIPOLE  F=.01852    ELOSS= 11.543   '
      SCRPT(118)=' RYDBERG      DIPOLE  F=.01125    ELOSS= 11.608   '
      SCRPT(119)=' RYDBERG      DIPOLE  F=.01535    ELOSS= 11.683   '
      SCRPT(120)=' RYDBERG      DIPOLE  F=.01009    ELOSS= 11.758   '
      SCRPT(121)=' RYDBERG      DIPOLE  F=.01940    ELOSS= 11.826   '
      SCRPT(122)=' RYDBERG      DIPOLE  F=.03817    ELOSS= 11.971   '
      SCRPT(123)=' RYDBERG      DIPOLE  F=.05814    ELOSS= 12.142   '
      SCRPT(124)=' RYDBERG      DIPOLE  F=.04769    ELOSS= 12.301   '
      SCRPT(125)=' RYDBERG      DIPOLE  F=.09315    ELOSS= 12.469   '
      SCRPT(126)=' RYDBERG      DIPOLE  F=.06305    ELOSS= 12.627   '
      SCRPT(127)=' CONTINUUM    DIPOLE  F=.02477    ELOSS= 12.75    '
      SCRPT(128)=' RYDBERG      DIPOLE  F=.06231    ELOSS= 12.901   '
      SCRPT(129)=' SUM RYDBERGS DIPOLE  F=.06696    ELOSS= 13.01    '
      SCRPT(130)=' SUM RYDBERGS DIPOLE  F=.09451    ELOSS= 13.15    '
      SCRPT(131)=' SUM RYDBERGS DIPOLE  F=.04986    ELOSS= 13.28    '
      SCRPT(132)=' SUM RYDBERGS DIPOLE  F=.09029    ELOSS= 13.39    '
      SCRPT(133)=' SUM RYDBERGS DIPOLE  F=.07431    ELOSS= 13.51    '
      SCRPT(134)=' SUM RYDBERGS DIPOLE  F=.15625    ELOSS= 13.68    '
      SCRPT(135)=' NEUTRAL DISS DIPOLE  F=.08084    ELOSS= 13.78    '
      SCRPT(136)=' NEUTRAL DISS DIPOLE  F=.02662    ELOSS= 14.00    '
      SCRPT(137)=' NEUTRAL DISS DIPOLE  F=.01062    ELOSS= 14.25    '
      SCRPT(138)=' NEUTRAL DISS DIPOLE  F=.00644    ELOSS= 14.50    '
      SCRPT(139)=' NEUTRAL DISS DIPOLE  F=.00484    ELOSS= 14.75    '
      SCRPT(140)=' NEUTRAL DISS DIPOLE  F=.00880    ELOSS= 15.00    '
      SCRPT(141)=' NEUTRAL DISS DIPOLE  F=.01522    ELOSS= 15.25    '
      SCRPT(142)=' NEUTRAL DISS DIPOLE  F=.01683    ELOSS= 15.50    '
      SCRPT(143)=' NEUTRAL DISS DIPOLE  F=.02135    ELOSS= 15.75    '
      SCRPT(144)=' NEUTRAL DISS DIPOLE  F=.03232    ELOSS= 16.00    '
      SCRPT(145)=' NEUTRAL DISS DIPOLE  F=.02534    ELOSS= 16.25    '
      SCRPT(146)=' NEUTRAL DISS DIPOLE  F=.01433    ELOSS= 16.50    '
      SCRPT(147)=' NEUTRAL DISS DIPOLE  F=.00965    ELOSS= 16.75    '
      SCRPT(148)=' NEUTRAL DISS DIPOLE  F=.01481    ELOSS= 17.00    '
      SCRPT(149)=' NEUTRAL DISS DIPOLE  F=.01148    ELOSS= 17.25    '
      SCRPT(150)=' NEUTRAL DISS DIPOLE  F=.00885    ELOSS= 17.50    '
      SCRPT(151)=' NEUTRAL DISS DIPOLE  F=.00931    ELOSS= 17.75    '
      SCRPT(152)=' NEUTRAL DISS DIPOLE  F=.00666    ELOSS= 18.00    '
      SCRPT(153)=' NEUTRAL DISS DIPOLE  F=.00443    ELOSS= 18.25    '
      SCRPT(154)=' NEUTRAL DISS DIPOLE  F=.00371    ELOSS= 18.50    '
      SCRPT(155)=' NEUTRAL DISS DIPOLE  F=.00344    ELOSS= 18.75    '
      SCRPT(156)=' NEUTRAL DISS DIPOLE  F=.00357    ELOSS= 19.00    '
      SCRPT(157)=' NEUTRAL DISS DIPOLE  F=.00530    ELOSS= 19.25    '
      SCRPT(158)=' NEUTRAL DISS DIPOLE  F=.00621    ELOSS= 19.50    '
      SCRPT(159)=' NEUTRAL DISS DIPOLE  F=.00619    ELOSS= 19.75    '
      SCRPT(160)=' SUM OF HIGH TRIPLETS             ELOSS= 25.00    '
      SCRPT(161)=' BREMSSTRAHLUNG FROM CARBON ATOM                  '
      SCRPT(162)=' BREMSSTRAHLUNG FROM OXYGEN ATOMS                 '
#     EN=-ESTEP/2.0
      DO 9000 I=1,NSTEP   
      EN=EG(I)                                                   
#     EN=EN+ESTEP 
      GAMMA1=(EMASS2+2.00*EN)/EMASS2
      GAMMA2=GAMMA1*GAMMA1
      BETA=math.sqrt(1.00-1.00/GAMMA2)
      BETA2=BETA*BETA
# ELASTIC USE LOG INTERPOLATION
      IF(EN <= XEN(1):
) : 
       QMOM=YMOM(1)*1.D-16
       QELA=YEL(1)*1.D-16
       QBMOM=QMOM
       QBELA=QELA
       PQ2=0.0
       GO TO 20
      # endIF                                                             
      DO 10 J=2,NEL                                                    
      IF(EN <= XEN(J):
) GO TO 15                                        
   10 CONTINUE                                                          
      J=NEL 
   15 YXJ=math.log(YMOM(J))
      YXJ1=math.log(YMOM(J-1))
      XNJ=math.log(XEN(J))   
      XNJ1=math.log(XEN(J-1))                                               
      A=(YXJ-YXJ1)/(XNJ-XNJ1)                                           
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)                                  
      QMOM=math.exp(A*math.log(EN)+B)*1.D-16
      YXJ=math.log(YEL(J))
      YXJ1=math.log(YEL(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)                                           
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)                                  
      QELA=math.exp(A*math.log(EN)+B)*1.D-16
      YXJ=math.log(YVBMOM(J))
      YXJ1=math.log(YVBMOM(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)                                           
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)                                  
      QBMOM=math.exp(A*math.log(EN)+B)*1.D-16
      YXJ=math.log(YVBEL(J))
      YXJ1=math.log(YVBEL(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)                                           
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)                                  
      QBELA=math.exp(A*math.log(EN)+B)*1.D-16
      YXJ=math.log(YEPS(J))
      YXJ1=math.log(YEPS(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)                                           
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)                                  
      PQ2=math.exp(A*math.log(EN)+B)
# EPSILON=1.0-YEPS
      PQ2=1.00-PQ2
   20 CONTINUE
# CALC CHANGE IN ELASTIC CROSS SECTION DUE TO CHANGE IN ELASTIC
# SCATTERING FROM B# end MODES ( CHANGE RELATIVE TO X-SECTION AT 293.15K)
# B# end MODE POPULATION AT 293.15K == AEXT20,GROUND STATE POP. == AGST20
#
      QMOM=(1.0-APB# end)*(QMOM-AEXT20*QBMOM)/AGST20+APB# end*QBMOM 
      QELA=(1.0-APB# end)*(QELA-AEXT20*QBELA)/AGST20+APB# end*QBELA
      PQ1=0.5+(QELA-QMOM)/QELA
#                                      
      IF(NANISO == 2):
 :
       Q(2,I)=QELA
       PEQEL(2,I)=PQ2
       IF(EN < 10.0):
 PEQEL(2,I)=0.0
       IF(EN < 10.0):
 Q(2,I)=QMOM
      # endIF
      IF(NANISO == 1):
 :
       Q(2,I)=QELA
       PEQEL(2,I)=PQ1
       IF(EN < 10.0):
 PEQEL(2,I)=0.5
       IF(EN < 10.0):
 Q(2,I)=QMOM
      # endIF
      IF(NANISO == 0):
 :
       PEQEL(2,I)=0.5
       Q(2,I)=QMOM
      # endIF
#
#  IONISATION CO2+
      QION(1,I)=0.0 
      PEQION(1,I)=0.5  
      IF(NANISO == 2):
 PEQION(1,I)=0.0                                   
      IF(EN <= EION(1):
) GO TO 1025
      IF(EN > XION1(NION1):
) GO TO 23               
      DO 21 J=2,NION1                                                  
      IF(EN <= XION1(J):
) GO TO 22                                    
   21 CONTINUE                                                          
      J=NION1                                                           
   22 A=(YION1(J)-YION1(J-1))/(XION1(J)-XION1(J-1))                
      B=(XION1(J-1)*YION1(J)-XION1(J)*YION1(J-1))/(XION1(J-1)-XION1(J))
      QION(1,I)=1.0D-16*(A*EN+B) 
      GO TO 24
# USE BORN-BETHE X-SECTION ABOVE XION1(NION1) EV
   23 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(1,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.67716
   24 IF(EN <= (2.0*EION(1))) GO TO 1025
      PEQION(1,I)=PEQEL(2,(I-IOFFION(1)))
#  IONISATION CO2+(A2PIu)
 1025 QION(2,I)=0.0 
      PEQION(2,I)=0.5  
      IF(NANISO == 2):
 PEQION(2,I)=0.0                                   
      IF(EN <= EION(2):
) GO TO 1030
      IF(EN > XION2(NION2):
) GO TO 1028             
      DO 1026 J=2,NION2                                                
      IF(EN <= XION2(J):
) GO TO 1027                                    
 1026 CONTINUE                                                          
      J=NION2                                                           
 1027 A=(YION2(J)-YION2(J-1))/(XION2(J)-XION2(J-1))                
      B=(XION2(J-1)*YION2(J)-XION2(J)*YION2(J-1))/(XION2(J-1)-XION2(J))
      QION(2,I)=1.0D-16*(A*EN+B) 
      GO TO 1029
# USE BORN-BETHE X-SECTION ABOVE XION2(NION2) EV
 1028 QION(2,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.67716*0.385
 1029 IF(EN <= (2.0*EION(2))) GO TO 1030
      PEQION(2,I)=PEQEL(2,(I-IOFFION(2)))
#  IONISATION CO2+(B2SIGMA+u)
 1030 QION(3,I)=0.0 
      PEQION(3,I)=0.5  
      IF(NANISO == 2):
 PEQION(3,I)=0.0                                   
      IF(EN <= EION(3):
) GO TO 1035
      IF(EN > XION3(NION3):
) GO TO 1033             
      DO 1031 J=2,NION3                                                
      IF(EN <= XION3(J):
) GO TO 1032                                    
 1031 CONTINUE                                                          
      J=NION3                                                           
 1032 A=(YION3(J)-YION3(J-1))/(XION3(J)-XION3(J-1))                
      B=(XION3(J-1)*YION3(J)-XION3(J)*YION3(J-1))/(XION3(J-1)-XION3(J))
      QION(3,I)=1.0D-16*(A*EN+B) 
      GO TO 1034
# USE BORN-BETHE X-SECTION ABOVE XION3(NION3) EV
 1033 QION(3,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.67716*0.220
 1034 IF(EN <= (2.0*EION(3))) GO TO 1035
      PEQION(3,I)=PEQEL(2,(I-IOFFION(3)))
#  DISSOCIATIVE IONISATION O+
 1035 QION(4,I)=0.0 
      PEQION(4,I)=0.5  
      IF(NANISO == 2):
 PEQION(4,I)=0.0                                   
      IF(EN <= EION(4):
) GO TO 1040
      IF(EN > XION4(NION4):
) GO TO 1038             
      DO 1036 J=2,NION4                                                
      IF(EN <= XION4(J):
) GO TO 1037                                    
 1036 CONTINUE                                                          
      J=NION4                                                           
 1037 A=(YION4(J)-YION4(J-1))/(XION4(J)-XION4(J-1))                
      B=(XION4(J-1)*YION4(J)-XION4(J)*YION4(J-1))/(XION4(J-1)-XION4(J))
      QION(4,I)=1.0D-16*(A*EN+B) 
      GO TO 1039
# USE BORN-BETHE X-SECTION ABOVE XION4(NION4) EV
 1038 QION(4,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.16156
 1039 IF(EN <= (2.0*EION(4))) GO TO 1040
      PEQION(4,I)=PEQEL(2,(I-IOFFION(4)))
#  DISSOCIATIVE IONISATION CO+
 1040 QION(5,I)=0.0 
      PEQION(5,I)=0.5  
      IF(NANISO == 2):
 PEQION(5,I)=0.0                                   
      IF(EN <= EION(5):
) GO TO 1045
      IF(EN > XION5(NION5):
) GO TO 1043             
      DO 1041 J=2,NION5                                                
      IF(EN <= XION5(J):
) GO TO 1042                                    
 1041 CONTINUE                                                          
      J=NION5                                                           
 1042 A=(YION5(J)-YION5(J-1))/(XION5(J)-XION5(J-1))                
      B=(XION5(J-1)*YION5(J)-XION5(J)*YION5(J-1))/(XION5(J-1)-XION5(J))
      QION(5,I)=1.0D-16*(A*EN+B) 
      GO TO 1044
# USE BORN-BETHE X-SECTION ABOVE XION5(NION5) EV
 1043 QION(5,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.07962
 1044 IF(EN <= (2.0*EION(5))) GO TO 1045
      PEQION(5,I)=PEQEL(2,(I-IOFFION(5)))
#  DISSOCIATIVE IONISATION C+ 
 1045 QION(6,I)=0.0 
      PEQION(6,I)=0.5  
      IF(NANISO == 2):
 PEQION(6,I)=0.0                                   
      IF(EN <= EION(6):
) GO TO 1050
      IF(EN > XION6(NION6):
) GO TO 1048             
      DO 1046 J=2,NION6                                                
      IF(EN <= XION6(J):
) GO TO 1047                                    
 1046 CONTINUE                                                          
      J=NION6                                                           
 1047 A=(YION6(J)-YION6(J-1))/(XION6(J)-XION6(J-1))                
      B=(XION6(J-1)*YION6(J)-XION6(J)*YION6(J-1))/(XION6(J-1)-XION6(J))
      QION(6,I)=1.0D-16*(A*EN+B) 
      GO TO 1049
# USE BORN-BETHE X-SECTION ABOVE XION6(NION6) EV
 1048 QION(6,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.07452
 1049 IF(EN <= (2.0*EION(6))) GO TO 1050
      PEQION(6,I)=PEQEL(2,(I-IOFFION(6)))
#   IONISATION CO2++ 
 1050 QION(7,I)=0.0 
      PEQION(7,I)=0.5  
      IF(NANISO == 2):
 PEQION(7,I)=0.0                                   
      IF(EN <= EION(7):
) GO TO 1055
      IF(EN > XION7(NION7):
) GO TO 1053             
      DO 1051 J=2,NION7                                                
      IF(EN <= XION7(J):
) GO TO 1052                                    
 1051 CONTINUE                                                          
      J=NION7                                                           
 1052 A=(YION7(J)-YION7(J-1))/(XION7(J)-XION7(J-1))                
      B=(XION7(J-1)*YION7(J)-XION7(J)*YION7(J-1))/(XION7(J-1)-XION7(J))
      QION(7,I)=1.0D-16*(A*EN+B) 
      GO TO 1054
# USE BORN-BETHE X-SECTION ABOVE XION7(NION7) EV
 1053 QION(7,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.00559
 1054 IF(EN <= (2.0*EION(7))) GO TO 1055
      PEQION(7,I)=PEQEL(2,(I-IOFFION(7)))
#   DISSOCIATIVE IONISATION C++ 
 1055 QION(8,I)=0.0 
      PEQION(8,I)=0.5  
      IF(NANISO == 2):
 PEQION(8,I)=0.0                                   
      IF(EN <= EION(8):
) GO TO 1060
      IF(EN > XION8(NION8):
) GO TO 1058             
      DO 1056 J=2,NION8                                                
      IF(EN <= XION8(J):
) GO TO 1057                                    
 1056 CONTINUE                                                          
      J=NION8                                                           
 1057 A=(YION8(J)-YION8(J-1))/(XION8(J)-XION8(J-1))                
      B=(XION8(J-1)*YION8(J)-XION8(J)*YION8(J-1))/(XION8(J-1)-XION8(J))
      QION(8,I)=1.0D-16*(A*EN+B) 
      GO TO 1059
# USE BORN-BETHE X-SECTION ABOVE XION8(NION8) EV
 1058 QION(8,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.00076
 1059 IF(EN <= (2.0*EION(8))) GO TO 1060
      PEQION(8,I)=PEQEL(2,(I-IOFFION(8)))
#   DISSOCIATIVE IONISATION O++ 
 1060 QION(9,I)=0.0 
      PEQION(9,I)=0.5  
      IF(NANISO == 2):
 PEQION(9,I)=0.0                                   
      IF(EN <= EION(9):
) GO TO 25
      IF(EN > XION9(NION9):
) GO TO 1063             
      DO 1061 J=2,NION9                                                
      IF(EN <= XION9(J):
) GO TO 1062                                    
 1061 CONTINUE                                                          
      J=NION9                                                           
 1062 A=(YION9(J)-YION9(J-1))/(XION9(J)-XION9(J-1))                
      B=(XION9(J-1)*YION9(J)-XION9(J)*YION9(J-1))/(XION9(J-1)-XION9(J))
      QION(9,I)=1.0D-16*(A*EN+B) 
      GO TO 1064
# USE BORN-BETHE X-SECTION ABOVE XION9(NION9) EV
 1063 QION(9,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.00080
 1064 IF(EN <= (2.0*EION(9))) GO TO 25
      PEQION(9,I)=PEQEL(2,(I-IOFFION(9)))
# CARBON K-SHELL IONISATION
   25 QION(10,I)=0.0 
      PEQION(10,I)=0.5  
      IF(NANISO == 2):
 PEQION(10,I)=0.0                                  
      IF(EN <= EION(10):
) GO TO 28
      DO 26 J=2,NKSHC                                                  
      IF(EN <= XKSHC(J):
) GO TO 27                                    
   26 CONTINUE                                                          
      J=NKSHC                                                           
   27 A=(YKSHC(J)-YKSHC(J-1))/(XKSHC(J)-XKSHC(J-1))                    
      B=(XKSHC(J-1)*YKSHC(J)-XKSHC(J)*YKSHC(J-1))/(XKSHC(J-1)-XKSHC(J))
      QION(10,I)=1.0D-16*(A*EN+B) 
      IF(EN <= (2.0*EION(10):
)) GO TO 28
      PEQION(10,I)=PEQEL(2,(I-IOFFION(10)))
# OXYGEN K-SHELL IONISATION
   28 QION(11,I)=0.0 
      PEQION(11,I)=0.5  
      IF(NANISO == 2):
 PEQION(11,I)=0.0                                  
      IF(EN <= EION(11):
) GO TO 301
      DO 29 J=2,NKSHO                                                  
      IF(EN <= XKSHO(J):
) GO TO 30                                    
   29 CONTINUE                                                          
      J=NKSHO                                                           
   30 A=(YKSHO(J)-YKSHO(J-1))/(XKSHO(J)-XKSHO(J-1))                    
      B=(XKSHO(J-1)*YKSHO(J)-XKSHO(J)*YKSHO(J-1))/(XKSHO(J-1)-XKSHO(J))
# SCALING FACTOR 2 FOR NUMBER OF OXYGENS PER MOLECULE
      QION(11,I)=2.0D-16*(A*EN+B) 
      IF(EN <= (2.0*EION(11):
)) GO TO 301
      PEQION(11,I)=PEQEL(2,(I-IOFFION(11)))
#
# FIX CO2+ X-SECTION FOR SPLIT INTO CO2+ EXCITED STATES
  301 QION(1,I)=QION(1,I)-QION(2,I)-QION(3,I)
# ATTACHMENT                                                            
      Q(4,I)=0.0
      QATT(1,I)=Q(4,I)                                            
      IF(EN <= XATT(1):
) GO TO 40
      IF(EN > XATT(NATT1):
) GO TO 33                                 
      DO 31  J=2,NATT1                                                  
      IF(EN <= XATT(J):
) GO TO 32                                        
   31 CONTINUE                                                          
      J=NATT1                                                          
   32 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))                         
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))       
      Q(4,I)=1.0D-16*(A*EN+B)
      QATT(1,I)=Q(4,I)
      GO TO 40
   33 Q(4,I)=YATT(NATT1)*(XATT(NATT1)/EN)**3*1.D-16
      QATT(1,I)=Q(4,I)
#
   40 Q(5,I)=0.0                                                     
      Q(6,I)=0.0   
# ----------------------------------------------------------------------
#  QUADRUPOLE BORN ROTATIONAL STATES (GERJUOY AND STEIN)
# ----------------------------------------------------------------------
# SUPERELASTIC ROTATION
      DO 51 K=2,60,2
      AJ=DFLOAT(K)
      L=(K/2)+1
      PEQIN(K,I)=0.5
      IF(NANISO == 2):
 PEQIN(K,I)=0.0
      IF(EN < (4.0*abs(EIN(K):
))) GO TO 50
      IF(NANISO > 0):
 PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
   50 CONTINUE
   51 QIN(K,I)=PJ(L)*QBK*math.sqrt(1.0-EIN(K)/EN)*AJ*(AJ-1.0)/((2.0*AJ+1.0)*
     /(2.0*AJ-1.0))
# ROTATION                 
      DO 52 K=1,59,2
      QIN(K,I)=0.0
      PEQIN(K,I)=0.5
      IF(NANISO == 2):
 PEQIN(K,I)=0.0
      IF(EN <= EIN(K):
) GO TO 52
      AJ=DFLOAT(K-1)
      L=(K+1)/2
      QIN(K,I)=PJ(L)*QBK*math.sqrt(1.0-EIN(K)/EN)*(AJ+2.0)*(AJ+1.0)/((2.0*AJ
     /+3.0)*(2.0*AJ+1.0))
      IF(EN < (4.0*abs(EIN(K):
))) GO TO 52
      IF(NANISO > 0):
 PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
   52 CONTINUE
# BORN (1/E) FALL OFF IN ROTATONAL X-SEC ABOVE 6.0 EV .
      IF(EN < 6.0):
 GO TO 80
      DO 70 K=1,60
      QIN(K,I)=QIN(K,I)*6.0/EN
   70 CONTINUE
   80 CONTINUE   
#                                                                        
#  SUPERELASTIC V2  B# end MODE                                            
      QIN(61,I)=0.0 
      PEQIN(61,I)=0.50
      IF(NANISO == 2):
 PEQIN(61,I)=0.00
      IF(EN <= 0.0):
 GO TO 150
      EFAC=math.sqrt(1.0-(EIN(61)/EN))
      QIN(61,I)=AMPV2*math.log((EFAC+1.0)/(EFAC-1.0))/EN 
      IF((EN+EIN(62):
) > XV2(NV2)) GO TO 125                   
      DO 110 J=2,NV2                                                    
      IF((EN+EIN(62):
) <= XV2(J)) GOTO 120                               
  110 CONTINUE                                                          
      J=NV2                                                             
  120 A=(YV2(J)-YV2(J-1))/(XV2(J)-XV2(J-1))                     
      B=(XV2(J-1)*YV2(J)-XV2(J)*YV2(J-1))/(XV2(J-1)-XV2(J)) 
      QIN(61,I)=QIN(61,I)+(EN+EIN(62))*(A*(EN+EIN(62))+B)/EN
      GO TO 126
  125 QIN(61,I)=QIN(61,I)+YV2(NV2)*XV2(NV2)*(EN+EIN(62))/(EN*EN)
  126 QIN(61,I)=QIN(61,I)*APOPV2/DEGV2*1.D-16
      IF(EN < (3.0*abs(EIN(61):
))) GO TO 150
      IF(NANISO > 0):
 PEQIN(61,I)=PEQEL(2,(I-IOFFN(61)))
# V2  B# end MODE                                                             
  150 QIN(62,I)=0.0                        
      PEQIN(62,I)=0.50
      IF(NANISO == 2):
 PEQIN(62,I)=0.00
      IF(EN <= EIN(62):
) GO TO 200 
      EFAC=math.sqrt(1.0-(EIN(62)/EN))
      QIN(62,I)=AMPV2*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      IF(EN > XV2(NV2):
) GO TO 175                    
      DO 160 J=2,NV2                                                    
      IF(EN <= XV2(J):
) GO TO 170                                      
  160 CONTINUE                                                          
      J=NV2                                                             
  170 A=(YV2(J)-YV2(J-1))/(XV2(J)-XV2(J-1))                     
      B=(XV2(J-1)*YV2(J)-XV2(J)*YV2(J-1))/(XV2(J-1)-XV2(J)) 
      QIN(62,I)=QIN(62,I)+(A*EN+B)
      GO TO 176
  175 QIN(62,I)=QIN(62,I)+YV2(NV2)*XV2(NV2)/EN
  176 QIN(62,I)=QIN(62,I)*APOPGS*1.D-16
      IF(EN < (3.0*EIN(62):
)) GO TO 200
      IF(NANISO > 0):
 PEQIN(62,I)=PEQEL(2,(I-IOFFN(62)))
#     
#  SUPERELASTIC 2V2 B# end MODE HARMONIC                                               
  200 CONTINUE                                                          
      QIN(63,I)=0.0  
      PEQIN(63,I)=0.50
      IF(NANISO == 2):
 PEQIN(63,I)=0.00
      IF(EN <= 0.0):
 GO TO 250                 
      IF((EN+EIN(64):
) > X2V2(N2V2)) GO TO 225                       
      DO 210 J=2,N2V2                                                   
      IF((EN+EIN(64):
) <= X2V2(J)) GOTO 220                              
  210 CONTINUE                                                          
      J=N2V2                                                            
  220 A=(Y2V2(J)-Y2V2(J-1))/(X2V2(J)-X2V2(J-1))                     
      B=(X2V2(J-1)*Y2V2(J)-X2V2(J)*Y2V2(J-1))/(X2V2(J-1)-X2V2(J)) 
      QIN(63,I)=(EN+EIN(64))*(A*(EN+EIN(64))+B)/EN
      GO TO 226
  225 QIN(63,I)=Y2V2(N2V2)*X2V2(N2V2)*(EN+EIN(64))/(EN*EN)
  226 QIN(63,I)=QIN(63,I)*APOP2V2/DEG2V2*1.D-16      
      IF(EN < (3.0*abs(EIN(63):
))) GO TO 250
      IF(NANISO > 0):
 PEQIN(63,I)=PEQEL(2,(I-IOFFN(63)))          
#  2V2 B# end MODE HARMONIC                                               
  250 CONTINUE                                                          
      QIN(64,I)=0.0  
      PEQIN(64,I)=0.50
      IF(NANISO == 2):
 PEQIN(64,I)=0.00
      IF(EN <= EIN(64):
) GO TO 300       
      IF(EN > X2V2(N2V2):
) GO TO 275                                
      DO 260 J=2,N2V2                                                   
      IF(EN <= X2V2(J):
) GOTO 270                                       
  260 CONTINUE                                                          
      J=N2V2                                                            
  270 A=(Y2V2(J)-Y2V2(J-1))/(X2V2(J)-X2V2(J-1))                     
      B=(X2V2(J-1)*Y2V2(J)-X2V2(J)*Y2V2(J-1))/(X2V2(J-1)-X2V2(J)) 
      QIN(64,I)=(A*EN+B)
      GO TO 276
  275 QIN(64,I)=Y2V2(N2V2)*X2V2(N2V2)/EN  
  276 QIN(64,I)=QIN(64,I)*APOPGS*1.D-16  
      IF(EN < (3.0*EIN(64):
)) GO TO 300
      IF(NANISO > 0):
 PEQIN(64,I)=PEQEL(2,(I-IOFFN(64)))                
#  
# SUPERELASTIC V1 SYMMETRIC STRETCH                                
  300 CONTINUE                                                          
      QIN(65,I)=0.0  
      PEQIN(65,I)=0.50
      IF(NANISO == 2):
 PEQIN(65,I)=0.00
      IF(EN <= 0.0):
 GO TO 350   
      IF((EN+EIN(66):
) > XV1(NV1)) GO TO 325                           
      DO 310 J=2,NV1                                                    
      IF((EN+EIN(66):
) <= XV1(J)) GOTO 320                               
  310 CONTINUE                                                          
      J=NV1                                                             
  320 A=(YV1(J)-YV1(J-1))/(XV1(J)-XV1(J-1))                     
      B=(XV1(J-1)*YV1(J)-XV1(J)*YV1(J-1))/(XV1(J-1)-XV1(J)) 
      QIN(65,I)=(EN+EIN(66))*(A*(EN+EIN(66))+B)/EN
      GO TO 326
  325 QIN(65,I)=YV1(NV1)*XV1(NV1)*(EN+EIN(66))/(EN*EN)
  326 QIN(65,I)=QIN(65,I)*APOPV1/DEGV1*1.D-16   
      IF(EN < (3.0*abs(EIN(65):
))) GO TO 350
      IF(NANISO > 0):
 PEQIN(65,I)=PEQEL(2,(I-IOFFN(65)))               
# V1 SYMMETRIC STRETCH                                                 
  350 CONTINUE                                                          
      QIN(66,I)=0.0  
      PEQIN(66,I)=0.50
      IF(NANISO == 2):
 PEQIN(66,I)=0.00
      IF(EN <= EIN(66):
) GO TO 400              
      IF(EN > XV1(NV1):
) GO TO 375                         
      DO 360 J=2,NV1                                                    
      IF(EN <= XV1(J):
) GOTO 370                                       
  360 CONTINUE                                                          
      J=NV1                                                             
  370 A=(YV1(J)-YV1(J-1))/(XV1(J)-XV1(J-1))                     
      B=(XV1(J-1)*YV1(J)-XV1(J)*YV1(J-1))/(XV1(J-1)-XV1(J)) 
      QIN(66,I)=(A*EN+B)
      GO TO 376 
  375 QIN(66,I)=YV1(NV1)*XV1(NV1)/EN
  376 QIN(66,I)=QIN(66,I)*APOPGS*1.D-16
      IF(EN < (3.0*EIN(66):
)) GO TO 400
      IF(NANISO > 0):
 PEQIN(66,I)=PEQEL(2,(I-IOFFN(66)))             
#  
# SUPERELASTIC 3V2 + V12                                                
  400 CONTINUE                                                          
      QIN(67,I)=0.0  
      PEQIN(67,I)=0.50
      IF(NANISO == 2):
 PEQIN(67,I)=0.00
      IF(EN <= 0.0):
 GO TO 450 
      IF((EN+EIN(68):
) > X3V2(N3V2)) GO TO 425                         
      DO 410 J=2,N3V2                                                   
      IF((EN+EIN(68):
) <= X3V2(J)) GOTO 420                              
  410 CONTINUE                                                          
      J=N3V2                                                            
  420 A=(Y3V2(J)-Y3V2(J-1))/(X3V2(J)-X3V2(J-1))                     
      B=(X3V2(J-1)*Y3V2(J)-X3V2(J)*Y3V2(J-1))/(X3V2(J-1)-X3V2(J))
      QIN(67,I)=(EN+EIN(68))*(A*(EN+EIN(68))+B)/EN
      GO TO 426
  425 QIN(67,I)=Y3V2(N3V2)*X3V2(N3V2)*(EN+EIN(68))/(EN*EN) 
  426 QIN(67,I)=QIN(67,I)*APOP3V2/DEG3V2*1.D-16  
      IF(EN < (3.0*abs(EIN(68):
))) GO TO 450
      IF(NANISO > 0):
 PEQIN(67,I)=PEQEL(2,(I-IOFFN(67)))                
# 3V2 + V12                                                             
  450 CONTINUE                                                          
      QIN(68,I)=0.0  
      PEQIN(68,I)=0.50
      IF(NANISO == 2):
 PEQIN(68,I)=0.00
      IF(EN <= EIN(68):
) GO TO 500
      IF(EN > X3V2(N3V2):
) GO TO 475                              
      DO 460 J=2,N3V2                                                   
      IF(EN <= X3V2(J):
) GOTO 470                                       
  460 CONTINUE                                                          
      J=N3V2                                                            
  470 A=(Y3V2(J)-Y3V2(J-1))/(X3V2(J)-X3V2(J-1))                     
      B=(X3V2(J-1)*Y3V2(J)-X3V2(J)*Y3V2(J-1))/(X3V2(J-1)-X3V2(J)) 
      QIN(68,I)=(A*EN+B)  
      GO TO 476
  475 QIN(68,I)=Y3V2(N3V2)*X3V2(N3V2)/EN
  476 QIN(68,I)=QIN(68,I)*APOPGS*1.D-16
      IF(EN < (3.0*EIN(68):
)) GO TO 500
      IF(NANISO > 0):
 PEQIN(68,I)=PEQEL(2,(I-IOFFN(68)))               
#
#  SUPERELASTIC V3 ASYMMETRIC STRETCH                                                     
  500 QIN(69,I)=0.0  
      PEQIN(69,I)=0.50
      IF(NANISO == 2):
 PEQIN(69,I)=0.00
      IF(EN <= 0.0):
 GO TO 550
      EFAC=math.sqrt(1.0-(EIN(69)/EN))
      QIN(69,I)=AMPV3*math.log((EFAC+1.0)/(EFAC-1.0))/EN    
      IF((EN+EIN(70):
) > XV3(NV3)) GO TO 525                
      DO 510 J=2,NV3                                                    
      IF((EN+EIN(70):
) <= XV3(J)) GOTO 520                               
  510 CONTINUE                                                          
      J=NV3                                                             
  520 A=(YV3(J)-YV3(J-1))/(XV3(J)-XV3(J-1))                     
      B=(XV3(J-1)*YV3(J)-XV3(J)*YV3(J-1))/(XV3(J-1)-XV3(J)) 
      QIN(69,I)=QIN(69,I)+(EN+EIN(70))*(A*(EN+EIN(70))+B)/EN
      GO TO 526
  525 QIN(69,I)=QIN(69,I)+YV3(NV3)*XV3(NV3)*(EN+EIN(70))/(EN*EN)
  526 QIN(69,I)=QIN(69,I)*APOPV3/DEGV3*1.D-16
      IF(EN < (3.0*abs(EIN(69):
)))  GO TO 550
      IF(NANISO > 0):
 PEQIN(69,I)=PEQEL(2,(I-IOFFN(69)))
# V3  ASYMMETRIC STRETCH                                                    
  550 QIN(70,I)=0.0  
      PEQIN(70,I)=0.50
      IF(NANISO == 2):
 PEQIN(70,I)=0.00
      IF(EN <= EIN(70):
) GO TO 600 
      EFAC=math.sqrt(1.0-(EIN(70)/EN))
      QIN(70,I)=AMPV3*math.log((1.0+EFAC)/(1.0-EFAC))/EN  
      IF(EN > XV3(NV3):
) GO TO 575                  
      DO 560 J=2,NV3                                                    
      IF(EN <= XV3(J):
) GO TO 570                                      
  560 CONTINUE                                                          
      J=NV3                                                             
  570 A=(YV3(J)-YV3(J-1))/(XV3(J)-XV3(J-1))                     
      B=(XV3(J-1)*YV3(J)-XV3(J)*YV3(J-1))/(XV3(J-1)-XV3(J)) 
      QIN(70,I)=QIN(70,I)+(A*EN+B)
      GO TO 576
  575 QIN(70,I)=QIN(70,I)+YV3(NV3)*XV3(NV3)/EN
  576 QIN(70,I)=QIN(70,I)*APOPGS*1.D-16
      IF(EN < (3.0*EIN(70):
)) GO TO 600
      IF(NANISO > 0):
 PEQIN(70,I)=PEQEL(2,(I-IOFFN(70)))
#     
#  4V2 + 2V1 + V12V2  POLYAD 3                                                 
  600 CONTINUE                                                          
      QIN(71,I)=0.0  
      PEQIN(71,I)=0.50
      IF(NANISO == 2):
 PEQIN(71,I)=0.00
      IF(EN <= EIN(71):
) GO TO 650 
      IF(EN > XVPD3(NPD3):
) GO TO 625                                  
      DO 610 J=2,NPD3                                                   
      IF(EN <= XVPD3(J):
) GOTO 620                                       
  610 CONTINUE                                                          
      J=NPD3                                                           
  620 A=(YVPD3(J)-YVPD3(J-1))/(XVPD3(J)-XVPD3(J-1))                     
      B=(XVPD3(J-1)*YVPD3(J)-XVPD3(J)*YVPD3(J-1))/(XVPD3(J-1)-XVPD3(J)) 
      QIN(71,I)=(A*EN+B)*1.D-16             
      GO TO 626
  625 QIN(71,I)=YVPD3(NPD3)*XVPD3(NPD3)/EN*1.D-16       
  626 IF(EN < (3.0*EIN(71))) GO TO 650
      IF(NANISO > 0):
 PEQIN(71,I)=PEQEL(2,(I-IOFFN(71)))
#                                      
#       3V2V1  + 2V1V2                                                   
  650 CONTINUE                                                          
      QIN(72,I)=0.0  
      PEQIN(72,I)=0.50
      IF(NANISO == 2):
 PEQIN(72,I)=0.00
      IF(EN <= EIN(72):
) GO TO 700                         
      IF(EN > XV130(NV130):
) GO TO 675              
      DO 660 J=2,NV130                                                  
      IF(EN <= XV130(J):
) GOTO 670                                       
  660 CONTINUE                                                          
      J=NV130                                                           
  670 A=(YV130(J)-YV130(J-1))/(XV130(J)-XV130(J-1))                     
      B=(XV130(J-1)*YV130(J)-XV130(J)*YV130(J-1))/(XV130(J-1)-XV130(J)) 
      QIN(72,I)=(A*EN+B)*1.D-16       
      GO TO 676
  675 QIN(72,I)=YV130(NV130)*XV130(NV130)/EN*1.D-16   
  676 IF(EN < (3.0*EIN(72))) GO TO 700
      IF(NANISO > 0):
 PEQIN(72,I)=PEQEL(2,(I-IOFFN(72)))
#                                      
#   POLYAD 4                                                                    
  700 CONTINUE                                                          
      QIN(73,I)=0.0  
      PEQIN(73,I)=0.50
      IF(NANISO == 2):
 PEQIN(73,I)=0.00
      IF(EN <= EIN(73):
) GO TO 750                   
      IF(EN > XVPD4(NPD4):
) GO TO 725                    
      DO 710 J=2,NPD4                                                   
      IF(EN <= XVPD4(J):
) GOTO 720                                       
  710 CONTINUE                                                          
      J=NPD4                                                            
  720 A=(YVPD4(J)-YVPD4(J-1))/(XVPD4(J)-XVPD4(J-1))                     
      B=(XVPD4(J-1)*YVPD4(J)-XVPD4(J)*YVPD4(J-1))/(XVPD4(J-1)-XVPD4(J)) 
      QIN(73,I)=(A*EN+B)*1.D-16      
      GO TO 726
  725 QIN(73,I)=YVPD4(NPD4)*XVPD4(NPD4)/EN*1.D-16     
  726 IF(EN < (3.0*EIN(73))) GO TO 750
      IF(NANISO > 0):
 PEQIN(73,I)=PEQEL(2,(I-IOFFN(73)))
#
#  PLOYAD 5     
  750 CONTINUE                                                          
      QIN(74,I)=0.0  
      PEQIN(74,I)=0.50
      IF(NANISO == 2):
 PEQIN(74,I)=0.00
      IF(EN <= EIN(74):
) GO TO 800
      IF(EN > XVPD5(NPD5):
) GO TO 775                          
      DO 760 J=2,NPD5                                                   
      IF(EN <= XVPD5(J):
) GOTO 770                                       
  760 CONTINUE                                                          
      J=NPD5                                                            
  770 A=(YVPD5(J)-YVPD5(J-1))/(XVPD5(J)-XVPD5(J-1))                     
      B=(XVPD5(J-1)*YVPD5(J)-XVPD5(J)*YVPD5(J-1))/(XVPD5(J-1)-XVPD5(J)) 
      QIN(74,I)=(A*EN+B)*1.D-16  
      GO TO 799
  775 QIN(74,I)=YVPD5(NPD5)*XVPD5(NPD5)/EN*1.D-16
  799 IF(EN < (3.0*EIN(74))) GO TO 800
      IF(NANISO > 0):
 PEQIN(74,I)=PEQEL(2,(I-IOFFN(74)))
#                                              
#   POLYAD 6                                                                    
  800 CONTINUE                                                          
      QIN(75,I)=0.0  
      PEQIN(75,I)=0.50
      IF(NANISO == 2):
 PEQIN(75,I)=0.00
      IF(EN <= EIN(75):
) GO TO 850                
      IF(EN > XVPD6(NPD6):
) GO TO 825                       
      DO 810 J=2,NPD6                                                   
      IF(EN <= XVPD6(J):
) GOTO 820                                       
  810 CONTINUE                                                          
      J=NPD6                                                            
  820 A=(YVPD6(J)-YVPD6(J-1))/(XVPD6(J)-XVPD6(J-1))                     
      B=(XVPD6(J-1)*YVPD6(J)-XVPD6(J)*YVPD6(J-1))/(XVPD6(J-1)-XVPD6(J)) 
      QIN(75,I)=(A*EN+B)*1.D-16 
      GO TO 826
  825 QIN(75,I)=YVPD6(NPD6)*XVPD6(NPD6)/EN*1.D-16
  826 IF(EN < (3.0*EIN(75)))  GO TO 850
      IF(NANISO > 0):
 PEQIN(75,I)=PEQEL(2,(I-IOFFN(75)))
#                                             
#   POLYAD 7                                                                    
  850 CONTINUE                                                          
      QIN(76,I)=0.0  
      PEQIN(76,I)=0.50
      IF(NANISO == 2):
 PEQIN(76,I)=0.00
      IF(EN <= EIN(76):
) GO TO 900                
      IF(EN > XVPD7(NPD7):
) GO TO 875                       
      DO 860 J=2,NPD7                                                   
      IF(EN <= XVPD7(J):
) GOTO 870                                       
  860 CONTINUE                                                          
      J=NPD7                                                            
  870 A=(YVPD7(J)-YVPD7(J-1))/(XVPD7(J)-XVPD7(J-1))                     
      B=(XVPD7(J-1)*YVPD7(J)-XVPD7(J)*YVPD7(J-1))/(XVPD7(J-1)-XVPD7(J)) 
      QIN(76,I)=(A*EN+B)*1.D-16 
      GO TO 876
  875 QIN(76,I)=YVPD7(NPD7)*XVPD7(NPD7)/EN*1.D-16
  876 IF(EN < (3.0*EIN(76))) GO TO 900
      IF(NANISO > 0):
 PEQIN(76,I)=PEQEL(2,(I-IOFFN(76)))
#                                              
#   POLYAD 8                                                                    
  900 CONTINUE                                                          
      QIN(77,I)=0.0  
      PEQIN(77,I)=0.50
      IF(NANISO == 2):
 PEQIN(77,I)=0.00
      IF(EN <= EIN(77):
) GO TO 950                
      IF(EN > XVPD8(NPD8):
) GO TO 925                       
      DO 910 J=2,NPD8                                                   
      IF(EN <= XVPD8(J):
) GOTO 920                                       
  910 CONTINUE                                                          
      J=NPD8                                                            
  920 A=(YVPD8(J)-YVPD8(J-1))/(XVPD8(J)-XVPD8(J-1))                     
      B=(XVPD8(J-1)*YVPD8(J)-XVPD8(J)*YVPD8(J-1))/(XVPD8(J-1)-XVPD8(J)) 
      QIN(77,I)=(A*EN+B)*1.D-16
      GO TO 926
  925 QIN(77,I)=YVPD8(NPD8)*XVPD8(NPD8)/EN*1.D-16
  926 IF(EN < (3.0*EIN(77)))  GO TO 950
      IF(NANISO > 0):
 PEQIN(77,I)=PEQEL(2,(I-IOFFN(77)))
#                                               
#   POLYAD 9                                                                    
  950 CONTINUE                                                          
      QIN(78,I)=0.0  
      PEQIN(78,I)=0.50
      IF(NANISO == 2):
 PEQIN(78,I)=0.00
      IF(EN <= EIN(78):
) GO TO 1000               
      IF(EN > XVPD9(NPD9):
) GO TO 975                       
      DO 960 J=2,NPD9                                                   
      IF(EN <= XVPD9(J):
) GOTO 970                                       
  960 CONTINUE                                                          
      J=NPD9                                                            
  970 A=(YVPD9(J)-YVPD9(J-1))/(XVPD9(J)-XVPD9(J-1))                     
      B=(XVPD9(J-1)*YVPD9(J)-XVPD9(J)*YVPD9(J-1))/(XVPD9(J-1)-XVPD9(J)) 
      QIN(78,I)=(A*EN+B)*1.D-16     
      GO TO 976 
  975 QIN(78,I)=YVPD9(NPD9)*XVPD9(NPD9)/EN*1.D-16
  976 IF(EN < (3.0*EIN(78))) GO TO 1000
      IF(NANISO > 0):
 PEQIN(78,I)=PEQEL(2,(I-IOFFN(78)))
#                                          
#   SUM OF HIGHER POLYADS                                                       
 1000 CONTINUE                                                          
      QIN(79,I)=0.0   
      PEQIN(79,I)=0.50
      IF(NANISO == 2):
 PEQIN(79,I)=0.00
      IF(EN <= EIN(79):
) GO TO 1080               
      IF(EN > XVPDH(NPDH):
) GO TO 1005                       
      DO 1001 J=2,NPDH                                                  
      IF(EN <= XVPDH(J):
) GOTO 1002                                      
 1001 CONTINUE                                                          
      J=NPDH                                                            
 1002 A=(YVPDH(J)-YVPDH(J-1))/(XVPDH(J)-XVPDH(J-1))                     
      B=(XVPDH(J-1)*YVPDH(J)-XVPDH(J)*YVPDH(J-1))/(XVPDH(J-1)-XVPDH(J)) 
      QIN(79,I)=(A*EN+B)*1.D-16       
      GO TO 1006
 1005 QIN(79,I)=YVPDH(NPDH)*XVPDH(NPDH)/EN*1.D-16   
 1006 IF(EN < (3.0*EIN(79))) GO TO 1080
      IF(NANISO > 0):
 PEQIN(79,I)=PEQEL(2,(I-IOFFN(79)))
#  1DELu  6.50ev                      
 1080 CONTINUE                                                          
      QIN(80,I)=0.0  
      PEQIN(80,I)=0.5
      IF(NANISO == 2):
 PEQIN(80,I)=0.0  
      IF(EN <= EIN(80):
) GO TO 1081 
      QIN(80,I)=.0000698/(EIN(80)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(80)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(80)+E(3))*1.0192
      IF(QIN(80,I):
 < 0.0) QIN(80,I)=0.0
      IF(EN <= (2.0*EIN(80):
)) GO TO 1081  
      IF(NANISO > 0):
 PEQIN(80,I)=PEQEL(2,(I-IOFFN(80)))               
# 1DELu 6.75 ev                                                        
 1081 CONTINUE                                                          
      QIN(81,I)=0.0   
      PEQIN(81,I)=0.5  
      IF(NANISO == 2):
 PEQIN(81,I)=0.0                                  
      IF(EN <= EIN(81):
) GO TO 1082                            
      QIN(81,I)=.0000630/(EIN(81)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(81)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(81)+E(3))*1.0185
      IF(QIN(81,I):
 < 0.0) QIN(81,I)=0.0
      IF(EN <= (2.0*EIN(81):
)) GO TO 1082
      IF(NANISO > 0):
 PEQIN(81,I)=PEQEL(2,(I-IOFFN(81)))           
#   1DELu  7.00ev                                            
 1082 CONTINUE                                                          
      QIN(82,I)=0.0
      PEQIN(82,I)=0.5 
      IF(NANISO == 2):
 PEQIN(82,I)=0.0                                 
      IF(EN <= EIN(82):
) GO TO 1083
      QIN(82,I)=.0000758/(EIN(82)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(82)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(82)+E(3))*1.0179
      IF(QIN(82,I):
 < 0.0) QIN(82,I)=0.0
      IF(EN <= (2.0*EIN(82):
)) GO TO 1083
      IF(NANISO > 0):
 PEQIN(82,I)=PEQEL(2,(I-IOFFN(82))) 
#   1DELu 7.25ev
 1083 CONTINUE                                                          
      QIN(83,I)=0.0
      PEQIN(83,I)=0.5
      IF(NANISO == 2):
 PEQIN(83,I)=0.0                                  
      IF(EN <= EIN(83):
) GO TO 1084
      QIN(83,I)=.0001638/(EIN(83)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(83)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(83)+E(3))*1.0172
      IF(QIN(83,I):
 < 0.0) QIN(83,I)=0.0
      IF(EN <= (2.0*EIN(83):
)) GO TO 1084
      IF(NANISO > 0):
 PEQIN(83,I)=PEQEL(2,(I-IOFFN(83)))       
# 1DELu  7.5ev   
 1084 CONTINUE                                                          
      QIN(84,I)=0.0 
      PEQIN(84,I)=0.5
      IF(NANISO == 2):
 PEQIN(84,I)=0.0                                  
      IF(EN <= EIN(84):
) GO TO 1085
      QIN(84,I)=.0003356/(EIN(84)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(84)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(84)+E(3))*1.0167
      IF(QIN(84,I):
 < 0.0) QIN(84,I)=0.0
      IF(EN <= (2.0*EIN(84):
)) GO TO 1085   
      IF(NANISO > 0):
 PEQIN(84,I)=PEQEL(2,(I-IOFFN(84)))           
#  1DELu 7.75ev                                
 1085 CONTINUE           
      QIN(85,I)=0.0
      PEQIN(85,I)=0.5
      IF(NANISO == 2):
 PEQIN(85,I)=0.0                              
      IF(EN <= EIN(85):
) GO TO 1086
      QIN(85,I)=.0007378/(EIN(85)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(85)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(85)+E(3))*1.0161
      IF(QIN(85,I):
 < 0.0) QIN(85,I)=0.0
      IF(EN <= (2.0*EIN(85):
)) GO TO 1086
      IF(NANISO > 0):
 PEQIN(85,I)=PEQEL(2,(I-IOFFN(85))) 
#  1DELu 8.0ev   
 1086 CONTINUE                                                          
      QIN(86,I)=0.0
      PEQIN(86,I)=0.5
      IF(NANISO == 2):
 PEQIN(86,I)=0.0                              
      IF(EN <= EIN(86):
) GO TO 1087
      QIN(86,I)=.001145/(EIN(86)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(86)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(86)+E(3))*1.0156
      IF(QIN(86,I):
 < 0.0) QIN(86,I)=0.0
      IF(EN <= (2.0*EIN(86):
)) GO TO 1087
      IF(NANISO > 0):
 PEQIN(86,I)=PEQEL(2,(I-IOFFN(86))) 
# 1DELu 8.25ev    
 1087 CONTINUE                                                          
      QIN(87,I)=0.0
      PEQIN(87,I)=0.5
      IF(NANISO == 2):
 PEQIN(87,I)=0.0                              
      IF(EN <= EIN(87):
) GO TO 1088
      QIN(87,I)=.001409/(EIN(87)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(87)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(87)+E(3))*1.0152
      IF(QIN(85,I):
 < 0.0) QIN(87,I)=0.0
      IF(EN <= (2.0*EIN(87):
)) GO TO 1088
      IF(NANISO > 0):
 PEQIN(87,I)=PEQEL(2,(I-IOFFN(87))) 
#  1DELu 8.50ev   
 1088 CONTINUE                                                          
      QIN(88,I)=0.0
      PEQIN(88,I)=0.5
      IF(NANISO == 2):
 PEQIN(88,I)=0.0                              
      IF(EN <= EIN(88):
) GO TO 1089
      QIN(88,I)=.001481/(EIN(88)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(88)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(88)+E(3))*1.0147
      IF(QIN(88,I):
 < 0.0) QIN(88,I)=0.0
      IF(EN <= (2.0*EIN(88):
)) GO TO 1089
      IF(NANISO > 0):
 PEQIN(88,I)=PEQEL(2,(I-IOFFN(88))) 
# 1DELu 8.75ev   
 1089 CONTINUE                                                          
      QIN(89,I)=0.0
      PEQIN(89,I)=0.5
      IF(NANISO == 2):
 PEQIN(89,I)=0.0                              
      IF(EN <= EIN(89):
) GO TO 1090
      QIN(89,I)=.000859/(EIN(89)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(89)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(89)+E(3))*1.0143
      IF(QIN(89,I):
 < 0.0) QIN(89,I)=0.0
      IF(EN <= (2.0*EIN(89):
)) GO TO 1090
      IF(NANISO > 0):
 PEQIN(89,I)=PEQEL(2,(I-IOFFN(89))) 
# TRIPLET
 1090 CONTINUE                                                          
      QIN(90,I)=0.0
      PEQIN(90,I)=0.5
      IF(NANISO == 2):
 PEQIN(90,I)=0.0                              
      IF(EN <= EIN(90):
) GO TO 1091
      IF(EN > XTRP1(NTRP1):
) GO TO 2083
      DO 2081 J=2,NTRP1
      IF(EN <= (XTRP1(J):
)) GO TO 2082
 2081 CONTINUE
      J=NTRP1
 2082 A=(YTRP1(J)-YTRP1(J-1))/(XTRP1(J)-XTRP1(J-1))
      B=(XTRP1(J-1)*YTRP1(J)-XTRP1(J)*YTRP1(J-1))/(XTRP1(J-1)-XTRP1(J))
      QIN(90,I)=(A*EN+B)*1.D-16                
      GO TO 2084
# SCALE BY 1/E**2 ABOVE XTRP1(NTRP1) EV
 2083 QIN(90,I)=YTRP1(NTRP1)*(XTRP1(NTRP1)/EN)**2*1.D-16                
 2084 IF(EN <= (2.0*EIN(90))) GO TO 1091
      IF(NANISO > 0):
 PEQIN(90,I)=PEQEL(2,(I-IOFFN(90))) 
#  1PIg  8.90ev                                            
 1091 CONTINUE                                                          
      QIN(91,I)=0.0
      PEQIN(91,I)=0.5
      IF(NANISO == 2):
 PEQIN(91,I)=0.0                              
      IF(EN <= EIN(91):
) GO TO 1092
      QIN(91,I)=.001687/(EIN(91)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(91)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(91)+E(3))*1.0140
      IF(QIN(91,I):
 < 0.0) QIN(91,I)=0.0
      IF(EN <= (2.0*EIN(91):
)) GO TO 1092
      IF(NANISO > 0):
 PEQIN(91,I)=PEQEL(2,(I-IOFFN(91))) 
#  1PIg 9.15ev   
 1092 CONTINUE                                                          
      QIN(92,I)=0.0
      PEQIN(92,I)=0.5
      IF(NANISO == 2):
 PEQIN(92,I)=0.0                              
      IF(EN <= EIN(92):
) GO TO 1093
      QIN(92,I)=.002115/(EIN(92)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(92)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(92)+E(3))*1.0137
      IF(QIN(92,I):
 < 0.0) QIN(92,I)=0.0
      IF(EN <= (2.0*EIN(92):
)) GO TO 1093
      IF(NANISO > 0):
 PEQIN(92,I)=PEQEL(2,(I-IOFFN(92))) 
#  1PIg  9.4ev   
 1093 CONTINUE                                                          
      QIN(93,I)=0.0
      PEQIN(93,I)=0.5
      IF(NANISO == 2):
 PEQIN(93,I)=0.0                              
      IF(EN <= EIN(93):
) GO TO 1094
      QIN(93,I)=.001920/(EIN(93)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(93)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(93)+E(3))*1.0133
      IF(QIN(93,I):
 < 0.0) QIN(93,I)=0.0
      IF(EN <= (2.0*EIN(93):
)) GO TO 1094
      IF(NANISO > 0):
 PEQIN(93,I)=PEQEL(2,(I-IOFFN(93))) 
#  1PIg  9.65ev   
 1094 CONTINUE                                                          
      QIN(94,I)=0.0
      PEQIN(94,I)=0.5
      IF(NANISO == 2):
 PEQIN(94,I)=0.0                              
      IF(EN <= EIN(94):
) GO TO 1095
      QIN(94,I)=.001180/(EIN(94)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(94)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(94)+E(3))*1.0130
      IF(QIN(94,I):
 < 0.0) QIN(94,I)=0.0
      IF(EN <= (2.0*EIN(94):
)) GO TO 1095
      IF(NANISO > 0):
 PEQIN(94,I)=PEQEL(2,(I-IOFFN(94))) 
#  1PIg  9.9ev   
 1095 CONTINUE                                                          
      QIN(95,I)=0.0
      PEQIN(95,I)=0.5
      IF(NANISO == 2):
 PEQIN(95,I)=0.0                              
      IF(EN <= EIN(95):
) GO TO 1096
      QIN(95,I)=.000683/(EIN(95)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(95)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(95)+E(3))*1.0126
      IF(QIN(95,I):
 < 0.0) QIN(95,I)=0.0
      IF(EN <= (2.0*EIN(95):
)) GO TO 1096
      IF(NANISO > 0):
 PEQIN(95,I)=PEQEL(2,(I-IOFFN(95))) 
#  1PIg 10.15ev   
 1096 CONTINUE                                                          
      QIN(96,I)=0.0
      PEQIN(96,I)=0.5
      IF(NANISO == 2):
 PEQIN(96,I)=0.0                              
      IF(EN <= EIN(96):
) GO TO 1097
      QIN(96,I)=.000456/(EIN(96)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(96)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(96)+E(3))*1.0123
      IF(QIN(96,I):
 < 0.0) QIN(96,I)=0.0
      IF(EN <= (2.0*EIN(96):
)) GO TO 1097
      IF(NANISO > 0):
 PEQIN(96,I)=PEQEL(2,(I-IOFFN(96))) 
#   RA:AU  10.7ev                                                     
 1097 CONTINUE                                                          
      QIN(97,I)=0.0
      PEQIN(97,I)=0.5
      IF(NANISO == 2):
 PEQIN(97,I)=0.0                              
      IF(EN <= EIN(97):
) GO TO 1098
      QIN(97,I)=.004361/(EIN(97)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(97)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(97)+E(3))
      IF(QIN(97,I):
 < 0.0) QIN(97,I)=0.0
      IF(EN <= (2.0*EIN(97):
)) GO TO 1098
      IF(NANISO > 0):
 PEQIN(97,I)=PEQEL(2,(I-IOFFN(97))) 
#  1SIGu+'  1SIGu+  C'   11.048ev                               
 1098 CONTINUE                                                          
      QIN(98,I)=0.0
      PEQIN(98,I)=0.5
      IF(NANISO == 2):
 PEQIN(98,I)=0.0                              
      IF(EN <= EIN(98):
) GO TO 1099
      QIN(98,I)=.1718/(EIN(98)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(98)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(98)+E(3))
      IF(QIN(98,I):
 < 0.0) QIN(98,I)=0.0
      IF(EN <= (2.0*EIN(98):
)) GO TO 1099
      IF(NANISO > 0):
 PEQIN(98,I)=PEQEL(2,(I-IOFFN(98))) 
#  TRIPLET                                                                
 1099 CONTINUE                                                          
      QIN(99,I)=0.0
      PEQIN(99,I)=0.5
      IF(NANISO == 2):
 PEQIN(99,I)=0.0                              
      IF(EN <= EIN(99):
) GO TO 1100
      IF(EN > XTRP2(NTRP2):
) GO TO 2093
      DO 2091 J=2,NTRP2
      IF(EN <= (XTRP2(J):
)) GO TO 2092
 2091 CONTINUE
      J=NTRP2
 2092 A=(YTRP2(J)-YTRP2(J-1))/(XTRP2(J)-XTRP2(J-1))
      B=(XTRP2(J-1)*YTRP2(J)-XTRP2(J)*YTRP2(J-1))/(XTRP2(J-1)-XTRP2(J))
      QIN(99,I)=(A*EN+B)*1.D-16             
      GO TO 2094
# SCALE BY 1/E**2 ABOVE XTRP2(NTRP2) EV
 2093 QIN(99,I)=YTRP2(NTRP2)*(XTRP2(NTRP2)/EN)**2*1.D-16           
 2094 IF(EN <= (2.0*EIN(99))) GO TO 1100
      IF(NANISO > 0):
 PEQIN(99,I)=PEQEL(2,(I-IOFFN(99))) 
# 1PIu  11.385ev                                                  
 1100 CONTINUE                                                          
      QIN(100,I)=0.0
      PEQIN(100,I)=0.5
      IF(NANISO == 2):
 PEQIN(100,I)=0.0                              
      IF(EN <= EIN(100):
) GO TO 1101
      QIN(100,I)=.06242/(EIN(100)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(100)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(100)+E(3))
      IF(QIN(100,I):
 < 0.0) QIN(100,I)=0.0
      IF(EN <= (2.0*EIN(100):
)) GO TO 1101
      IF(NANISO > 0):
 PEQIN(100,I)=PEQEL(2,(I-IOFFN(100))) 
#  RYDBERG  11.543ev                                                  
 1101 CONTINUE                                                          
      QIN(101,I)=0.0
      PEQIN(101,I)=0.5
      IF(NANISO == 2):
 PEQIN(101,I)=0.0                              
      IF(EN <= EIN(101):
) GO TO 1102 
      QIN(101,I)=.01852/(EIN(101)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(101)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(101)+E(3))
      IF(QIN(101,I):
 < 0.0) QIN(101,I)=0.0
      IF(EN <= (2.0*EIN(101):
)) GO TO 1102
      IF(NANISO > 0):
 PEQIN(101,I)=PEQEL(2,(I-IOFFN(101))) 
#   RYDBERG 11.608ev                                               
 1102 CONTINUE                                                          
      QIN(102,I)=0.0
      PEQIN(102,I)=0.5
      IF(NANISO == 2):
 PEQIN(102,I)=0.0                              
      IF(EN <= EIN(102):
) GO TO 1103 
      QIN(102,I)=.01125/(EIN(102)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(102)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(102)+E(3))
      IF(QIN(102,I):
 < 0.0) QIN(102,I)=0.0
      IF(EN <= (2.0*EIN(102):
)) GO TO 1103
      IF(NANISO > 0):
 PEQIN(102,I)=PEQEL(2,(I-IOFFN(102))) 
#   RYDBERG 11.683ev                    
 1103 CONTINUE                                                          
      QIN(103,I)=0.0
      PEQIN(103,I)=0.5
      IF(NANISO == 2):
 PEQIN(103,I)=0.0                              
      IF(EN <= EIN(103):
) GO TO 1104 
      QIN(103,I)=.01535/(EIN(103)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(103)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(103)+E(3))
      IF(QIN(103,I):
 < 0.0) QIN(103,I)=0.0
      IF(EN <= (2.0*EIN(103):
)) GO TO 1104
      IF(NANISO > 0):
 PEQIN(103,I)=PEQEL(2,(I-IOFFN(103))) 
#   RYDBERG  11.758ev                                             
 1104 CONTINUE                                                          
      QIN(104,I)=0.0
      PEQIN(104,I)=0.5
      IF(NANISO == 2):
 PEQIN(104,I)=0.0                              
      IF(EN <= EIN(104):
) GO TO 1105 
      QIN(104,I)=.01009/(EIN(104)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(104)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(104)+E(3))
      IF(QIN(104,I):
 < 0.0) QIN(104,I)=0.0
      IF(EN <= (2.0*EIN(104):
)) GO TO 1105
      IF(NANISO > 0):
 PEQIN(104,I)=PEQEL(2,(I-IOFFN(104))) 
#   RYDBERG  11.826ev                                               
 1105 CONTINUE                                                          
      QIN(105,I)=0.0
      PEQIN(105,I)=0.5
      IF(NANISO == 2):
 PEQIN(105,I)=0.0                              
      IF(EN <= EIN(105):
) GO TO 1106 
      QIN(105,I)=.01940/(EIN(105)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(105)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(105)+E(3))
      IF(QIN(105,I):
 < 0.0) QIN(105,I)=0.0
      IF(EN <= (2.0*EIN(105):
)) GO TO 1106
      IF(NANISO > 0):
 PEQIN(105,I)=PEQEL(2,(I-IOFFN(105))) 
#   RYDBERG  11.971ev                                               
 1106 CONTINUE                                                          
      QIN(106,I)=0.0
      PEQIN(106,I)=0.5
      IF(NANISO == 2):
 PEQIN(106,I)=0.0                              
      IF(EN <= EIN(106):
) GO TO 1107 
      QIN(106,I)=.03817/(EIN(106)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(106)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(106)+E(3))
      IF(QIN(106,I):
 < 0.0) QIN(106,I)=0.0
      IF(EN <= (2.0*EIN(106):
)) GO TO 1107
      IF(NANISO > 0):
 PEQIN(106,I)=PEQEL(2,(I-IOFFN(106))) 
#  RYDBERG  12.142ev                                                
 1107 CONTINUE                                                          
      QIN(107,I)=0.0
      PEQIN(107,I)=0.5
      IF(NANISO == 2):
 PEQIN(107,I)=0.0                              
      IF(EN <= EIN(107):
) GO TO 1108 
      QIN(107,I)=.05814/(EIN(107)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(107)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(107)+E(3))
      IF(QIN(107,I):
 < 0.0) QIN(107,I)=0.0
      IF(EN <= (2.0*EIN(107):
)) GO TO 1108
      IF(NANISO > 0):
 PEQIN(107,I)=PEQEL(2,(I-IOFFN(107))) 
#  RYDBERG  12.301ev                                                 
 1108 CONTINUE                                                          
      QIN(108,I)=0.0
      PEQIN(108,I)=0.5
      IF(NANISO == 2):
 PEQIN(108,I)=0.0                              
      IF(EN <= EIN(108):
) GO TO 1109 
      QIN(108,I)=.04769/(EIN(108)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(108)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(108)+E(3))
      IF(QIN(108,I):
 < 0.0) QIN(108,I)=0.0
      IF(EN <= (2.0*EIN(108):
)) GO TO 1109
      IF(NANISO > 0):
 PEQIN(108,I)=PEQEL(2,(I-IOFFN(108))) 
#  RYDBERG   12.469ev                                               
 1109 CONTINUE                                                          
      QIN(109,I)=0.0
      PEQIN(109,I)=0.5
      IF(NANISO == 2):
 PEQIN(109,I)=0.0                              
      IF(EN <= EIN(109):
) GO TO 1110 
      QIN(109,I)=.09315/(EIN(109)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(109)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(109)+E(3))
      IF(QIN(109,I):
 < 0.0) QIN(109,I)=0.0
      IF(EN <= (2.0*EIN(109):
)) GO TO 1110
      IF(NANISO > 0):
 PEQIN(109,I)=PEQEL(2,(I-IOFFN(109))) 
#  RYDBERG 12.627ev                                                  
 1110 CONTINUE                                                          
      QIN(110,I)=0.0
      PEQIN(110,I)=0.5
      IF(NANISO == 2):
 PEQIN(110,I)=0.0                              
      IF(EN <= EIN(110):
) GO TO 1111 
      QIN(110,I)=.06305/(EIN(110)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(110)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(110)+E(3))
      IF(QIN(110,I):
 < 0.0) QIN(110,I)=0.0
      IF(EN <= (2.0*EIN(110):
)) GO TO 1111
      IF(NANISO > 0):
 PEQIN(110,I)=PEQEL(2,(I-IOFFN(110))) 
#  CONTINUUM  12.75ev                                                   
 1111 CONTINUE                                                          
      QIN(111,I)=0.0
      PEQIN(111,I)=0.5
      IF(NANISO == 2):
 PEQIN(111,I)=0.0                              
      IF(EN <= EIN(111):
) GO TO 1112 
      QIN(111,I)=.02477/(EIN(111)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(111)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(111)+E(3))
      IF(QIN(111,I):
 < 0.0) QIN(111,I)=0.0
      IF(EN <= (2.0*EIN(111):
)) GO TO 1112
      IF(NANISO > 0):
 PEQIN(111,I)=PEQEL(2,(I-IOFFN(111))) 
#  RYDBERG  12.901ev                                                      
 1112 CONTINUE                                                          
      QIN(112,I)=0.0
      PEQIN(112,I)=0.5
      IF(NANISO == 2):
 PEQIN(112,I)=0.0                              
      IF(EN <= EIN(112):
) GO TO 1113 
      QIN(112,I)=.06231/(EIN(112)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(112)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(112)+E(3))
      IF(QIN(112,I):
 < 0.0) QIN(112,I)=0.0
      IF(EN <= (2.0*EIN(112):
)) GO TO 1113
      IF(NANISO > 0):
 PEQIN(112,I)=PEQEL(2,(I-IOFFN(112))) 
#  SUM RYDBERGS 13.01ev                                                    
 1113 CONTINUE                                                          
      QIN(113,I)=0.0
      PEQIN(113,I)=0.5
      IF(NANISO == 2):
 PEQIN(113,I)=0.0                              
      IF(EN <= EIN(113):
) GO TO 1114 
      QIN(113,I)=.06696/(EIN(113)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(113)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(113)+E(3))
      IF(QIN(113,I):
 < 0.0) QIN(113,I)=0.0
      IF(EN <= (2.0*EIN(113):
)) GO TO 1114
      IF(NANISO > 0):
 PEQIN(113,I)=PEQEL(2,(I-IOFFN(113))) 
#  SUM RYDBERGS 13.15ev                                                    
 1114 CONTINUE                                                          
      QIN(114,I)=0.0
      PEQIN(114,I)=0.5
      IF(NANISO == 2):
 PEQIN(114,I)=0.0                              
      IF(EN <= EIN(114):
) GO TO 1115 
      QIN(114,I)=.09451/(EIN(114)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(114)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(114)+E(3))
      IF(QIN(114,I):
 < 0.0) QIN(114,I)=0.0
      IF(EN <= (2.0*EIN(114):
)) GO TO 1115
      IF(NANISO > 0):
 PEQIN(114,I)=PEQEL(2,(I-IOFFN(114))) 
#  SUM RYDBERGS  13.28ev                                                   
 1115 CONTINUE                                                          
      QIN(115,I)=0.0
      PEQIN(115,I)=0.5
      IF(NANISO == 2):
 PEQIN(115,I)=0.0                              
      IF(EN <= EIN(115):
) GO TO 1116 
      QIN(115,I)=.04986/(EIN(115)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(115)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(115)+E(3))
      IF(QIN(115,I):
 < 0.0) QIN(115,I)=0.0
      IF(EN <= (2.0*EIN(115):
)) GO TO 1116
      IF(NANISO > 0):
 PEQIN(115,I)=PEQEL(2,(I-IOFFN(115))) 
#  SUM RYDBERGS  13.39ev                                                  
 1116 CONTINUE                                                          
      QIN(116,I)=0.0
      PEQIN(116,I)=0.5
      IF(NANISO == 2):
 PEQIN(116,I)=0.0                              
      IF(EN <= EIN(116):
) GO TO 1117 
      QIN(116,I)=.09029/(EIN(116)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(116)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(116)+E(3))
      IF(QIN(116,I):
 < 0.0) QIN(116,I)=0.0
      IF(EN <= (2.0*EIN(116):
)) GO TO 1117
      IF(NANISO > 0):
 PEQIN(116,I)=PEQEL(2,(I-IOFFN(116))) 
#  SUM RYDBERGS   13.51ev                                                 
 1117 CONTINUE                                                          
      QIN(117,I)=0.0
      PEQIN(117,I)=0.5
      IF(NANISO == 2):
 PEQIN(117,I)=0.0                              
      IF(EN <= EIN(117):
) GO TO 1118 
      QIN(117,I)=.07431/(EIN(117)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(117)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(117)+E(3))
      IF(QIN(117,I):
 < 0.0) QIN(117,I)=0.0
      IF(EN <= (2.0*EIN(117):
)) GO TO 1118
      IF(NANISO > 0):
 PEQIN(117,I)=PEQEL(2,(I-IOFFN(117))) 
#  SUM RYDBERGS   13.68ev                                               
 1118 CONTINUE                                                          
      QIN(118,I)=0.0
      PEQIN(118,I)=0.5
      IF(NANISO == 2):
 PEQIN(118,I)=0.0                              
      IF(EN <= EIN(118):
) GO TO 1119 
      QIN(118,I)=.15625/(EIN(118)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(118)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(118)+E(3))
      IF(QIN(118,I):
 < 0.0) QIN(118,I)=0.0
      IF(EN <= (2.0*EIN(118):
)) GO TO 1119
      IF(NANISO > 0):
 PEQIN(118,I)=PEQEL(2,(I-IOFFN(118))) 
#  NEUTRAL DISSOCIATION 13.78ev                                            
 1119 CONTINUE                                                          
      QIN(119,I)=0.0
      PEQIN(119,I)=0.5
      IF(NANISO == 2):
 PEQIN(119,I)=0.0                              
      IF(EN <= EIN(119):
) GO TO 1120 
      QIN(119,I)=.08084/(EIN(119)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(119)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(119)+E(3))*1.0075
      IF(QIN(119,I):
 < 0.0) QIN(119,I)=0.0
      IF(EN <= (2.0*EIN(119):
)) GO TO 1120
      IF(NANISO > 0):
 PEQIN(119,I)=PEQEL(2,(I-IOFFN(119))) 
#  NEUTRAL DISSOCIATION  14.0ev                                            
 1120 CONTINUE                                                          
      QIN(120,I)=0.0
      PEQIN(120,I)=0.5
      IF(NANISO == 2):
 PEQIN(120,I)=0.0                              
      IF(EN <= EIN(120):
) GO TO 1121 
      QIN(120,I)=.02662/(EIN(120)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(120)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(120)+E(3))*1.0089
      IF(QIN(120,I):
 < 0.0) QIN(120,I)=0.0
      IF(EN <= (2.0*EIN(120):
)) GO TO 1121
      IF(NANISO > 0):
 PEQIN(120,I)=PEQEL(2,(I-IOFFN(120))) 
#  NEUTRAL DISSOCIATION  14.25ev 
 1121 CONTINUE                                                          
      QIN(121,I)=0.0
      PEQIN(121,I)=0.5
      IF(NANISO == 2):
 PEQIN(121,I)=0.0                              
      IF(EN <= EIN(121):
) GO TO 1122 
      QIN(121,I)=.01062/(EIN(121)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(121)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(121)+E(3))*1.0088
      IF(QIN(121,I):
 < 0.0) QIN(121,I)=0.0
      IF(EN <= (2.0*EIN(121):
)) GO TO 1122
      IF(NANISO > 0):
 PEQIN(121,I)=PEQEL(2,(I-IOFFN(121))) 
#   NEUTRAL DISSOCIATION  14.5ev 
 1122 CONTINUE                                                          
      QIN(122,I)=0.0
      PEQIN(122,I)=0.5
      IF(NANISO == 2):
 PEQIN(122,I)=0.0                              
      IF(EN <= EIN(122):
) GO TO 1123 
      QIN(122,I)=.00644/(EIN(122)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(122)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(122)+E(3))*1.0086
      IF(QIN(122,I):
 < 0.0) QIN(122,I)=0.0
      IF(EN <= (2.0*EIN(122):
)) GO TO 1123
      IF(NANISO > 0):
 PEQIN(122,I)=PEQEL(2,(I-IOFFN(122))) 
#  NEUTRAL DISSOCIATION  14.75ev  
 1123 CONTINUE                                                          
      QIN(123,I)=0.0
      PEQIN(123,I)=0.5
      IF(NANISO == 2):
 PEQIN(123,I)=0.0                              
      IF(EN <= EIN(123):
) GO TO 1124 
      QIN(123,I)=.00485/(EIN(123)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(123)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(123)+E(3))*1.0085
      IF(QIN(123,I):
 < 0.0) QIN(123,I)=0.0
      IF(EN <= (2.0*EIN(123):
)) GO TO 1124
      IF(NANISO > 0):
 PEQIN(123,I)=PEQEL(2,(I-IOFFN(123))) 
#  NEUTRAL DISSOCIATION  15.0ev 
 1124 CONTINUE                                                          
      QIN(124,I)=0.0
      PEQIN(124,I)=0.5
      IF(NANISO == 2):
 PEQIN(124,I)=0.0                              
      IF(EN <= EIN(124):
) GO TO 1125 
      QIN(124,I)=.00880/(EIN(124)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(124)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(124)+E(3))*1.0083
      IF(QIN(124,I):
 < 0.0) QIN(124,I)=0.0
      IF(EN <= (2.0*EIN(124):
)) GO TO 1125
      IF(NANISO > 0):
 PEQIN(124,I)=PEQEL(2,(I-IOFFN(124))) 
#  NEUTRAL DISSOCIATION  15.25ev 
 1125 CONTINUE                                                          
      QIN(125,I)=0.0
      PEQIN(125,I)=0.5
      IF(NANISO == 2):
 PEQIN(125,I)=0.0                              
      IF(EN <= EIN(125):
) GO TO 1126 
      QIN(125,I)=.01522/(EIN(125)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(125)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(125)+E(3))*1.0082
      IF(QIN(125,I):
 < 0.0) QIN(125,I)=0.0
      IF(EN <= (2.0*EIN(125):
)) GO TO 1126
      IF(NANISO > 0):
 PEQIN(125,I)=PEQEL(2,(I-IOFFN(125))) 
#  NEUTRAL DISSOCIATION  15.5ev 
 1126 CONTINUE                                                          
      QIN(126,I)=0.0
      PEQIN(126,I)=0.5
      IF(NANISO == 2):
 PEQIN(126,I)=0.0                              
      IF(EN <= EIN(126):
) GO TO 1127 
      QIN(126,I)=.01683/(EIN(126)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(126)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(126)+E(3))*1.0081
      IF(QIN(126,I):
 < 0.0) QIN(126,I)=0.0
      IF(EN <= (2.0*EIN(126):
)) GO TO 1127
      IF(NANISO > 0):
 PEQIN(126,I)=PEQEL(2,(I-IOFFN(126))) 
#  NEUTRAL DISSOCIATION  15.75ev 
 1127 CONTINUE                                                          
      QIN(127,I)=0.0
      PEQIN(127,I)=0.5
      IF(NANISO == 2):
 PEQIN(127,I)=0.0                              
      IF(EN <= EIN(127):
) GO TO 1128 
      QIN(127,I)=.02135/(EIN(127)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(127)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(127)+E(3))*1.0079
      IF(QIN(127,I):
 < 0.0) QIN(127,I)=0.0
      IF(EN <= (2.0*EIN(127):
)) GO TO 1128
      IF(NANISO > 0):
 PEQIN(127,I)=PEQEL(2,(I-IOFFN(127)))  
#  NEUTRAL DISSOCIATION  16.0ev 
 1128 CONTINUE                                                          
      QIN(128,I)=0.0
      PEQIN(128,I)=0.5
      IF(NANISO == 2):
 PEQIN(128,I)=0.0                              
      IF(EN <= EIN(128):
) GO TO 1129 
      QIN(128,I)=.03232/(EIN(128)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(128)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(128)+E(3))*1.0078
      IF(QIN(128,I):
 < 0.0) QIN(128,I)=0.0
      IF(EN <= (2.0*EIN(128):
)) GO TO 1129
      IF(NANISO > 0):
 PEQIN(128,I)=PEQEL(2,(I-IOFFN(128))) 
# NEUTRAL DISSOCIATION  16.25ev 
 1129 CONTINUE                                                          
      QIN(129,I)=0.0
      PEQIN(129,I)=0.5
      IF(NANISO == 2):
 PEQIN(129,I)=0.0                              
      IF(EN <= EIN(129):
) GO TO 1130 
      QIN(129,I)=.02534/(EIN(129)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(129)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(129)+E(3))*1.0077
      IF(QIN(129,I):
 < 0.0) QIN(129,I)=0.0
      IF(EN <= (2.0*EIN(129):
)) GO TO 1130
      IF(NANISO > 0):
 PEQIN(129,I)=PEQEL(2,(I-IOFFN(129))) 
#  NEUTRAL DISSOCIATION  16.5ev 
 1130 CONTINUE                                                          
      QIN(130,I)=0.0
      PEQIN(130,I)=0.5
      IF(NANISO == 2):
 PEQIN(130,I)=0.0                              
      IF(EN <= EIN(130):
) GO TO 1131 
      QIN(130,I)=.01433/(EIN(130)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(130)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(130)+E(3))*1.0076
      IF(QIN(130,I):
 < 0.0) QIN(130,I)=0.0
      IF(EN <= (2.0*EIN(130):
)) GO TO 1131
      IF(NANISO > 0):
 PEQIN(130,I)=PEQEL(2,(I-IOFFN(130))) 
# NEUTRAL DISSOCIATION  16.75ev 
 1131 CONTINUE                                                          
      QIN(131,I)=0.0
      PEQIN(131,I)=0.5
      IF(NANISO == 2):
 PEQIN(131,I)=0.0                              
      IF(EN <= EIN(131):
) GO TO 1132 
      QIN(131,I)=.00965/(EIN(131)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(131)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(131)+E(3))*1.0075
      IF(QIN(131,I):
 < 0.0) QIN(131,I)=0.0
      IF(EN <= (2.0*EIN(131):
)) GO TO 1132
      IF(NANISO > 0):
 PEQIN(131,I)=PEQEL(2,(I-IOFFN(131))) 
#  NEUTRAL DISSOCIATION  17.0ev 
 1132 CONTINUE                                                          
      QIN(132,I)=0.0
      PEQIN(132,I)=0.5
      IF(NANISO == 2):
 PEQIN(132,I)=0.0                              
      IF(EN <= EIN(132):
) GO TO 1133 
      QIN(132,I)=.01481/(EIN(132)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(132)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(132)+E(3))*1.0074
      IF(QIN(132,I):
 < 0.0) QIN(132,I)=0.0
      IF(EN <= (2.0*EIN(132):
)) GO TO 1133 
      IF(NANISO > 0):
 PEQIN(132,I)=PEQEL(2,(I-IOFFN(132))) 
#  NEUTRAL DISSOCIATION  17.25ev 
 1133 CONTINUE                                                          
      QIN(133,I)=0.0
      PEQIN(133,I)=0.5
      IF(NANISO == 2):
 PEQIN(133,I)=0.0                              
      IF(EN <= EIN(133):
) GO TO 1134 
      QIN(133,I)=.01148/(EIN(133)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(133)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(133)+E(3))*1.0072
      IF(QIN(133,I):
 < 0.0) QIN(133,I)=0.0
      IF(EN <= (2.0*EIN(133):
)) GO TO 1134
      IF(NANISO > 0):
 PEQIN(133,I)=PEQEL(2,(I-IOFFN(133))) 
#  NEUTRAL DISSOCIATION  17.5ev 
 1134 CONTINUE                                                          
      QIN(134,I)=0.0
      PEQIN(134,I)=0.5
      IF(NANISO == 2):
 PEQIN(134,I)=0.0                              
      IF(EN <= EIN(134):
) GO TO 1135 
      QIN(134,I)=.00885/(EIN(134)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(134)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(134)+E(3))*1.0071
      IF(QIN(134,I):
 < 0.0) QIN(134,I)=0.0
      IF(EN <= (2.0*EIN(134):
)) GO TO 1135
      IF(NANISO > 0):
 PEQIN(134,I)=PEQEL(2,(I-IOFFN(134))) 
# NEUTRAL DISSOCIATION  17.75ev 
 1135 CONTINUE                                                          
      QIN(135,I)=0.0
      PEQIN(135,I)=0.5
      IF(NANISO == 2):
 PEQIN(135,I)=0.0                              
      IF(EN <= EIN(135):
) GO TO 1136 
      QIN(135,I)=.00931/(EIN(135)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(135)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(135)+E(3))*1.0070
      IF(QIN(135,I):
 < 0.0) QIN(135,I)=0.0
      IF(EN <= (2.0*EIN(135):
)) GO TO 1136
      IF(NANISO > 0):
 PEQIN(135,I)=PEQEL(2,(I-IOFFN(135))) 
# NEUTRAL DISSOCIATION  18.00ev 
 1136 CONTINUE                                                          
      QIN(136,I)=0.0
      PEQIN(136,I)=0.5
      IF(NANISO == 2):
 PEQIN(136,I)=0.0                              
      IF(EN <= EIN(136):
) GO TO 1137 
      QIN(136,I)=.00666/(EIN(136)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(136)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(136)+E(3))*1.0069
      IF(QIN(136,I):
 < 0.0) QIN(136,I)=0.0
      IF(EN <= (2.0*EIN(136):
)) GO TO 1137
      IF(NANISO > 0):
 PEQIN(136,I)=PEQEL(2,(I-IOFFN(136))) 
# NEUTRAL DISSOCIATION  18.25ev 
 1137 CONTINUE                                                          
      QIN(137,I)=0.0
      PEQIN(137,I)=0.5
      IF(NANISO == 2):
 PEQIN(137,I)=0.0                              
      IF(EN <= EIN(137):
) GO TO 1138 
      QIN(137,I)=.00443/(EIN(137)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(137)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(137)+E(3))*1.0068
      IF(QIN(137,I):
 < 0.0) QIN(137,I)=0.0
      IF(EN <= (2.0*EIN(137):
)) GO TO 1138
      IF(NANISO > 0):
 PEQIN(137,I)=PEQEL(2,(I-IOFFN(137))) 
# NEUTRAL DISSOCIATION  18.50ev 
 1138 CONTINUE                                                          
      QIN(138,I)=0.0
      PEQIN(138,I)=0.5
      IF(NANISO == 2):
 PEQIN(138,I)=0.0                              
      IF(EN <= EIN(138):
) GO TO 1139 
      QIN(138,I)=.00371/(EIN(138)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(138)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(138)+E(3))*1.0068
      IF(QIN(138,I):
 < 0.0) QIN(138,I)=0.0
      IF(EN <= (2.0*EIN(138):
)) GO TO 1139
      IF(NANISO > 0):
 PEQIN(138,I)=PEQEL(2,(I-IOFFN(138))) 
# NEUTRAL DISSOCIATION  18.75ev 
 1139 CONTINUE                                                          
      QIN(139,I)=0.0
      PEQIN(139,I)=0.5
      IF(NANISO == 2):
 PEQIN(139,I)=0.0                              
      IF(EN <= EIN(139):
) GO TO 1140 
      QIN(139,I)=.00344/(EIN(139)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(139)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(139)+E(3))*1.0067
      IF(QIN(139,I):
 < 0.0) QIN(139,I)=0.0
      IF(EN <= (2.0*EIN(139):
)) GO TO 1140
      IF(NANISO > 0):
 PEQIN(139,I)=PEQEL(2,(I-IOFFN(139))) 
# NEUTRAL DISSOCIATION  19.00ev 
 1140 CONTINUE                                                          
      QIN(140,I)=0.0
      PEQIN(140,I)=0.5
      IF(NANISO == 2):
 PEQIN(140,I)=0.0                              
      IF(EN <= EIN(140):
) GO TO 1141 
      QIN(140,I)=.00356/(EIN(140)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(140)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(140)+E(3))*1.0066
      IF(QIN(140,I):
 < 0.0) QIN(140,I)=0.0
      IF(EN <= (2.0*EIN(140):
)) GO TO 1141
      IF(NANISO > 0):
 PEQIN(140,I)=PEQEL(2,(I-IOFFN(140))) 
# NEUTRAL DISSOCIATION  19.25ev 
 1141 CONTINUE                                                          
      QIN(141,I)=0.0
      PEQIN(141,I)=0.5
      IF(NANISO == 2):
 PEQIN(141,I)=0.0                              
      IF(EN <= EIN(141):
) GO TO 1142 
      QIN(141,I)=.00530/(EIN(141)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(141)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(141)+E(3))*1.0065
      IF(QIN(141,I):
 < 0.0) QIN(141,I)=0.0
      IF(EN <= (2.0*EIN(141):
)) GO TO 1142
      IF(NANISO > 0):
 PEQIN(141,I)=PEQEL(2,(I-IOFFN(141))) 
# NEUTRAL DISSOCIATION  19.50ev 
 1142 CONTINUE                                                          
      QIN(142,I)=0.0
      PEQIN(142,I)=0.5
      IF(NANISO == 2):
 PEQIN(142,I)=0.0                              
      IF(EN <= EIN(142):
) GO TO 1143 
      QIN(142,I)=.00621/(EIN(142)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(142)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(142)+E(3))*1.0064
      IF(QIN(142,I):
 < 0.0) QIN(142,I)=0.0
      IF(EN <= (2.0*EIN(142):
)) GO TO 1143
      IF(NANISO > 0):
 PEQIN(142,I)=PEQEL(2,(I-IOFFN(142))) 
# NEUTRAL DISSOCIATION  19.75ev 
 1143 CONTINUE                                                          
      QIN(143,I)=0.0
      PEQIN(143,I)=0.5
      IF(NANISO == 2):
 PEQIN(143,I)=0.0                              
      IF(EN <= EIN(143):
) GO TO 1144 
      QIN(143,I)=.00619/(EIN(143)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(143)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(143)+E(3))*1.0070
      IF(QIN(143,I):
 < 0.0) QIN(143,I)=0.0
      IF(EN <= (2.0*EIN(143):
)) GO TO 1144
      IF(NANISO > 0):
 PEQIN(143,I)=PEQEL(2,(I-IOFFN(143))) 
#  TRIPLET SUM OF HIGH LYING TRIPLETS                                         
 1144 CONTINUE                                                          
      QIN(144,I)=0.0
      PEQIN(144,I)=0.5
      IF(NANISO == 2):
 PEQIN(144,I)=0.0                              
      IF(EN <= EIN(144):
) GO TO 1145 
      QIN(144,I)=3.6000/(EIN(144)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(144)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(144)+E(3))      
      IF(QIN(144,I):
 < 0.0) QIN(144,I)=0.0
      IF(EN > 60.0):
 QIN(144,I)=QIN(144,I)*math.sqrt(60.0/EN)
      IF(EN <= (2.0*EIN(144):
)) GO TO 1145
      IF(NANISO > 0):
 PEQIN(144,I)=PEQEL(2,(I-IOFFN(144)))  
#
 1145 CONTINUE
# LOAD BREMSSTRAHLUNG X-SECTIONS
      QIN(145,I)=0.0
      QIN(146,I)=0.0
      IF(EN <= 1000.):
 GO TO 1440
      DO 1410 J=2,NBREM
      IF(EN <= EBRM(J):
) GO TO 1420
 1410 CONTINUE
      J=NBREM
 1420 A=(math.log(Z6T(J))-math.log(Z6T(J-1)))/(EBRM(J)-EBRM(J-1))
      B=(math.log(Z6T(J))*EBRM(J-1)-math.log(Z6T(J-1))*EBRM(J))/
     /(EBRM(J-1)-EBRM(J))
      A1=(math.log(Z8T(J))-math.log(Z8T(J-1)))/(EBRM(J)-EBRM(J-1))
      B1=(math.log(Z8T(J))*EBRM(J-1)-math.log(Z8T(J-1))*EBRM(J))/
     /(EBRM(J-1)-EBRM(J))
      QIN(145,I)=math.exp(A*EN+B)*1.D-24
      QIN(146,I)=math.exp(A1*EN+B1)*2.D-24
 1440 CONTINUE
# SUM ROTATION 
      SUMR=0.0
      DO 1450 K=1,60
      SUMR=SUMR+QIN(K,I)
 1450 CONTINUE   
# SUM VIBRATION 
      SUMV=0.0
      DO 1455 K=61,79 
      SUMV=SUMV+QIN(K,I)
 1455 CONTINUE  
# SUM DIPOLE +TRIPLET EXCITATION  
      SUME=0.0
      DO 1460 K=80,144 
      SUME=SUME+QIN(K,I)
 1460 CONTINUE  
# SUM TRIPLET EXCITATION
      SUMTRP=QIN(90,I)+QIN(99,I)+QIN(144,I)
# GET SUM DIPOLE
      SUME=SUME-SUMTRP
      SUMEXC=SUME+SUMTRP
# SUM IONISATION
      SUMION=0.0
      DO 1470 K=1,11
      SUMION=SUMION+QION(K,I)
 1470 CONTINUE
# GET CORRECT ELASTIC X-SECTION
      Q(2,I)=Q(2,I)-SUMR
# Q(1,I) TOTAL USED FOR INFORMATION ONLY          
      Q(1,I)=QELA+Q(4,I)+SUMV+SUME+SUMTRP+SUMION    
#     WRITE(6,991) EN,SUME,SUMTRP,SUMEXC,SUMION,Q(1,I)  
# 991 FORMAT(' EN=',D12.4,' SUMDIPOLE=',D12.4,' SUM TRIPLT=',D12.4,
#    //,'    SUMEXC=',D12.4,' SUMION=',D12.4,' TOT=',D12.4)  
 9000 CONTINUE                                                          
#                                                                       
#     SAVE ON COMPUTING TIME                                            
#
      DO 2000 K=1,74                                                    
      J=145-K   
      IF(EFINAL <= EIN(J):
) NIN=J-1
 2000 CONTINUE
#     IF(EFINAL > 1000.) NIN=146
#                                                                
      RETURN                                                            
      # end     
      def GAS13(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)   
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)      
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]    
      DIMENSION XEN(62),YXSEC(62),XION(46),YION(46),XATT(16),YATT(16),  
     /XVIB1(34),YVIB1(34),XVIB2(28),YVIB2(28),XVIB3(28),YVIB3(28),      
     /XVIB4(25),YVIB4(25),XVIB5(19),YVIB5(19),XEXC1(25),YEXC1(25),
     /XEXC2(23),YEXC2(23),XEXC3(19),YEXC3(19)
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME                                                 
      DATA XEN/0.00,.001,.002,.003,.004,.005,.007,0.01,0.014,0.02,
     /0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.10,0.11,0.12,                
     /0.13,0.14,0.16,0.18,0.20,0.23,0.26,0.30,0.35,0.40,                
     /0.50,0.60,0.80,1.00,1.40,2.00,3.00,4.00,5.00,6.00,                
     /7.00,8.00,9.00,10.0,15.0,20.0,30.0,40.0,70.0,100.,                
     /140.,200.,250.,300.,500.,1000.,1500.,3000.,6000.,10000.,
     /20000.,100000./
      DATA YXSEC/94.0,93.5,93.0,92.5,92.0,91.5,91.0,90.0,88.0,85.0,     
     /74.0,63.0,53.0,45.0,39.0,33.5,29.0,25.0,21.0,17.0,                
     /13.5,10.8,6.50,4.50,3.60,3.30,3.40,4.20,6.00,7.80,                
     /12.5,16.7,21.8,25.0,27.5,30.0,34.0,37.0,40.0,43.0,                
     /44.0,44.0,42.0,39.0,28.0,22.0,15.0,11.5,6.80,4.90,                
     /2.90,1.78,1.28,1.06,0.60,0.26,0.17,0.08,.034,.021,
     /.0085,.0017/
      DATA XION/10.35,11.0,12.5,13.5,14.5,17.0,20.0,25.0,30.0,35.0,     
     /40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,                
     /175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,                
     /800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,5000.,
     /7000.,10000.,15000.,30000.,60000.,100000./
      DATA YION/0.00,0.33,0.75,1.22,1.82,3.69,5.29,8.33,10.3,11.8,      
     /12.8,13.7,14.8,15.6,16.1,16.4,16.4,16.4,15.9,15.0,                
     /14.1,13.4,12.4,10.9,9.99,9.24,8.41,7.88,6.92,6.38,                
     /5.87,5.23,4.88,4.22,3.63,3.30,3.00,2.60,2.23,1.48,
     /1.11,0.81,0.58,0.31,.167,.106/
      DATA XATT/6.85,7.00,7.20,7.50,8.00,8.50,9.00,9.50,10.0,10.5,      
     /11.0,11.5,12.0,12.5,13.0,13.2/                                    
      DATA YATT/0.00,1.41,2.36,3.57,6.03,9.50,14.3,22.3,31.6,26.6,      
     /20.9,13.4,7.55,2.83,1.07,0.00/                                    
      DATA XVIB1/.052,.055,.060,.065,.070,.075,0.08,0.10,0.12,0.14,     
     /0.20,0.25,0.30,0.40,0.50,0.70,1.00,1.50,2.00,3.00,
     /4.00,5.00,6.00,7.50,8.50,10.0,15.0,20.0,30.0,40.0,                
     /100.,1000.,10000.,100000./                                        
      DATA YVIB1/0.00,.017,.026,.030,.032,.033,.034,.034,.033,.031,     
     /.026,.022,.020,.017,.015,.011,.010,.015,.018,.030,
     /.044,.058,.074,.097,.097,.080,.055,.031,.017,.010,                
     /.003,.0003,.00003,.00003/                                         
      DATA XVIB2/.108,.125,0.15,0.20,0.23,0.25,0.30,0.40,0.50,0.70,     
     /1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.50,8.50,10.0,                
     /15.0,20.0,30.0,40.0,100.,1000.,10000.,100000./                    
      DATA YVIB2/0.00,0.33,0.64,0.87,0.90,0.90,0.81,0.69,0.60,0.50,     
     /0.39,0.39,0.48,0.77,1.14,1.50,1.93,2.53,2.53,2.08,                
     /1.44,0.81,0.43,0.27,0.06,.006,.0006,.00006/                       
      DATA XVIB3/.173,0.18,0.19,0.20,0.23,0.25,0.30,0.40,0.50,0.70,     
     /1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.50,8.50,10.0,                
     /15.0,20.0,30.0,40.0,100.,1000.,10000.,100000./                    
      DATA YVIB3/0.00,0.16,0.33,0.47,0.60,0.65,0.69,0.65,0.60,0.52,     
     /0.42,0.38,0.41,0.59,0.89,1.16,1.49,1.96,1.96,1.60,                
     /1.11,0.63,0.33,0.21,0.05,.005,.0005,.00005/                       
      DATA XVIB4/.363,0.40,0.45,0.50,0.60,0.70,0.80,1.00,1.50,2.00,     
     /3.00,4.00,5.00,6.00,7.50,8.50,10.0,15.0,20.0,30.0,                
     /40.0,100.,1000.,10000.,100000./                                   
      DATA YVIB4/0.00,0.58,0.77,0.86,0.91,0.91,0.86,0.81,0.77,0.85,     
     /1.23,1.76,2.29,2.95,3.26,2.82,2.08,1.19,0.53,0.30,                
     /0.17,0.04,.004,.0004,.00004/                                      
      DATA XVIB5/.519,1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.50,8.50,     
     /10.0,15.0,20.0,30.0,40.0,100.,1000.,10000.,100000./               
      DATA YVIB5/0.00,.001,0.01,.041,.105,0.20,0.25,0.33,0.37,0.31,     
     /.237,.138,.058,.033,.021,.004,.0004,.00004,.000004/               
      DATA XEXC1/7.20,8.50,9.50,11.0,12.0,14.0,16.0,20.0,25.0,30.0,     
     /40.0,60.0,80.0,100.,150.,200.,300.,400.,600.,1000.,               
     /2000.,4000.,10000.,20000.,100000./                                
      DATA YEXC1/0.00,1.60,2.32,2.48,2.56,2.64,2.64,2.64,2.64,2.64,     
     /2.72,2.72,2.64,2.48,2.08,1.92,1.60,1.50,1.28,0.84,                
     /0.41,0.21,0.07,.042,.009/                                         
      DATA XEXC2/9.50,10.5,11.5,14.0,16.0,20.0,25.0,30.0,               
     /40.0,60.0,80.0,100.,150.,200.,300.,400.,600.,1000.,               
     /2000.,4000.,10000.,20000.,100000./
      DATA YEXC2/0.00,0.23,0.49,0.92,1.43,1.92,2.24,2.44,               
     /2.65,2.72,2.65,2.48,2.08,1.92,1.60,1.50,1.28,0.84,                
     /0.39,0.21,0.07,.042,.007/                                         
      DATA XEXC3/17.0,20.0,25.0,30.0,40.0,60.0,80.0,100.,150.,200.,     
     /300.,400.,600.,1000.,2000.,4000.,10000.,20000.,100000./           
      DATA YEXC3/0.00,0.53,1.16,1.60,2.24,2.64,2.64,2.48,2.08,1.92,     
     /1.60,1.50,1.28,0.84,0.41,0.21,0.09,.042,.007/                     
# ----------------------------------------------------------------------       
#  NO DIFFUSION EXPERIMENTAL DATA AVAILABLE,USED INELASTICS FROM SCALING
#  ISOBUTANE INELASTIC X-SECT. ELASTIC DETERMINED FROM DRIFT VELOCITY.  
# HENCE DIFFUSION ACCURATE TO ONLY 10% , DRIFT VELOCITY TO 3% BELOW     
# 10KV/CM.
# MODIFICATION OF NEO-PENTANE (1995) TO INCLUDE SUPERELASTIC SCATTERING
# FIT TO DRIFT VELOCITY OF FLORIANO GEE AND FREEMAN                                                                          
# ----------------------------------------------------------------------       
      NAME='NEO-PENTANE 03 '
#      
      NION=1
      NATT=1
      NIN=11
      NNULL=0
#
      DO 1 J=1,6  
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0                                                     
      NDATA=62                                                          
      NIOND=46                                                          
      NATT1=16                                                          
      NVIB1=34
      NVIB2=28                                                          
      NVIB3=28                                                          
      NVIB4=25
      NVIB5=19
      NEXC1=25                                                          
      NEXC2=23                                                          
      NEXC3=19
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(72.1503*AMU)                                      
      E(3)=10.35                                                        
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
      EOBY(1)=10.35                                                     
      EIN(1)=-.052
      EIN(2)=0.052
      EIN(3)=-.108
      EIN(4)=0.108                                                      
      EIN(5)=-.173 
      EIN(6)=0.173                                                     
      EIN(7)=0.363
      EIN(8)=0.519
      EIN(9)=7.2                                                        
      EIN(10)=9.50                                                      
      EIN(11)=17.0
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       NEO-PENTANE    '
      SCRPT(3)=' IONISATION    ELOSS= 10.35   '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      SCRPT(7)=' VIB           ELOSS= -0.052  '
      SCRPT(8)=' VIB           ELOSS=  0.052  '
      SCRPT(9)=' VIB           ELOSS= -0.108  '
      SCRPT(10)=' VIB           ELOSS=  0.108  '
      SCRPT(11)=' VIB           ELOSS= -0.173  '
      SCRPT(12)=' VIB           ELOSS=  0.173  '
      SCRPT(13)=' VIB           ELOSS=  0.363  '
      SCRPT(14)=' VIB           ELOSS=  0.519  '
      SCRPT(15)=' EXC           ELOSS=  7.20   '
      SCRPT(16)=' EXC           ELOSS=  9.50   '
      SCRPT(17)=' EXC           ELOSS= 17.0    '
      APOP1=math.exp(EIN(1)/AKT)
      APOP2=math.exp(EIN(3)/AKT)
      APOP3=math.exp(EIN(5)/AKT)
      EN=-ESTEP/2.0                                      
      DO 1000 I=1,NSTEP                                              
      EN=EN+ESTEP
      IF(EN <= XEN(2):
) :
       Q(2,I)=YXSEC(2)*1.D-16
       GO TO 21
      # endIF                                                        
      DO 10 J=2,NDATA                                                   
      IF(EN <= XEN(J):
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA 
   20 YXJ=math.log(YXSEC(J))
      YXJ1=math.log(YXSEC(J-1))
      XNJ=math.log(XEN(J))
      XNJ1=math.log(XEN(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      Q(2,I)=math.exp(A*math.log(EN)+B)*1.D-16
   21 CONTINUE                                                          
      Q(3,I)=0.0                                                        
      IF(EN < E(3):
) GO TO 30                                          
      DO 22 J=2,NIOND                                                   
      IF(EN <= XION(J):
) GO TO 23                                        
   22 CONTINUE                                                          
      J=NIOND                                                           
   23 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.D-16                                            
   30 Q(4,I)=0.0  
      QATT(1,I)=Q(4,I)                                                  
      IF(EN < XATT(1):
) GO TO 40                                        
      IF(EN > XATT(NATT1):
) GO TO 40                                    
      DO 31 J=2,NATT1                                                   
      IF(EN <= XATT(J):
) GO TO 32                                        
   31 CONTINUE                                                          
      J=NATT1                                                           
   32 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))                         
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))       
      Q(4,I)=(A*EN+B)*1.D-21     
      QATT(1,I)=Q(4,I)                                       
   40 Q(5,I)=0.0                                                        
      Q(6,I)=0.0  
#                                                            
# SUPERELASTIC VIB1        
      QIN(1,I)=0.0
      IF(EN <= 0.0):
 GO TO 150
      DO 110 J=2,NVIB1
      IF((EN+EIN(2):
) <= XVIB1(J)) GO TO 120
  110 CONTINUE
      J=NVIB1
  120 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J)) 
      QIN(1,I)=(EN+EIN(2))*(A*(EN+EIN(2))+B)/EN
      QIN(1,I)=QIN(1,I)*APOP1/(1.0+APOP1)*1.D-16
#  VIB1
  150 QIN(2,I)=0.0
      IF(EN <= EIN(2):
) GO TO 200                                        
      DO 160  J=2,NVIB1                                                 
      IF(EN <= XVIB1(J):
) GO TO 170                                      
  160 CONTINUE                                                          
      J=NVIB1                                                           
  170 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J)) 
      QIN(2,I)=(A*EN+B)/(1.0+APOP1)*1.D-16                              
  200 CONTINUE
#
# SUPERELASTIC VIB2                                                            
      QIN(3,I)=0.0  
      IF(EN <= 0.0):
 GO TO 250
      DO 210 J=2,NVIB2
      IF((EN+EIN(4):
) <= XVIB2(J)) GO TO 220
  210 CONTINUE
      J=NVIB2
  220 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J)) 
      QIN(3,I)=(EN+EIN(4))*(A*(EN+EIN(4))+B)/EN
      QIN(3,I)=QIN(3,I)*APOP2/(1.0+APOP2)*1.D-16
#  VIB2
  250 QIN(4,I)=0.0          
      IF(EN <= EIN(4):
) GO TO 300                                        
      DO 260 J=2,NVIB2                                                  
      IF(EN <= XVIB2(J):
) GO TO 270                                      
  260 CONTINUE                                                          
      J=NVIB2                                                           
  270 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J)) 
      QIN(4,I)=(A*EN+B)/(1.0+APOP2)*1.D-16                              
  300 CONTINUE   
# 
# SUPERELASTIC VIB3                                                         
      QIN(5,I)=0.0
      IF(EN <= 0.0):
 GO TO 350
      DO 310 J=2,NVIB3
      IF((EN+EIN(6):
) <= XVIB3(J)) GO TO 320
  310 CONTINUE
      J=NVIB3
  320 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J))
      QIN(5,I)=(EN+EIN(6))*(A*(EN+EIN(6))+B)/EN
      QIN(5,I)=QIN(5,I)*APOP3/(1.0+APOP3)*1.D-16
#  VIB3
  350 QIN(6,I)=0.0   
      IF(EN <= EIN(6):
) GO TO 400                                        
      DO 360 J=2,NVIB3                                                  
      IF(EN <= XVIB3(J):
) GO TO 370                                      
  360 CONTINUE                                                          
      J=NVIB3                                                           
  370 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J)) 
      QIN(6,I)=(A*EN+B)/(1.0+APOP3)*1.D-16                              
  400 CONTINUE  
# VIB4                                                          
      QIN(7,I)=0.0                                                      
      IF(EN <= EIN(7):
) GO TO 500                                        
      DO 410 J=2,NVIB4                                                  
      IF(EN <= XVIB4(J):
) GO TO 420                                      
  410 CONTINUE                                                          
      J=NVIB4                                                           
  420 A=(YVIB4(J)-YVIB4(J-1))/(XVIB4(J)-XVIB4(J-1))                     
      B=(XVIB4(J-1)*YVIB4(J)-XVIB4(J)*YVIB4(J-1))/(XVIB4(J-1)-XVIB4(J)) 
      QIN(7,I)=(A*EN+B)*1.D-16                                          
  500 CONTINUE
# VIB5                                                      
      QIN(8,I)=0.0                                                      
      IF(EN <= EIN(8):
) GO TO 600                                        
      DO 510 J=2,NVIB5                                                  
      IF(EN <= XVIB5(J):
) GO TO 520                                      
  510 CONTINUE                                                          
      J=NVIB5                                                           
  520 A=(YVIB5(J)-YVIB5(J-1))/(XVIB5(J)-XVIB5(J-1))                     
      B=(XVIB5(J-1)*YVIB5(J)-XVIB5(J)*YVIB5(J-1))/(XVIB5(J-1)-XVIB5(J)) 
      QIN(8,I)=(A*EN+B)*1.D-16                                          
  600 CONTINUE
# EXC1                                                      
      QIN(9,I)=0.0                                                      
      IF(EN <= EIN(9):
) GO TO 700                                        
      DO 610 J=2,NEXC1                                                  
      IF(EN <= XEXC1(J):
) GO TO 620                                      
  610 CONTINUE                                                          
      J=NEXC1                                                           
  620 A=(YEXC1(J)-YEXC1(J-1))/(XEXC1(J)-XEXC1(J-1))                     
      B=(XEXC1(J-1)*YEXC1(J)-XEXC1(J)*YEXC1(J-1))/(XEXC1(J-1)-XEXC1(J)) 
      QIN(9,I)=(A*EN+B)*1.D-16                                          
  700 CONTINUE   
# EXC2                                                   
      QIN(10,I)=0.0                                                     
      IF(EN <= EIN(10):
) GO TO 800                                       
      DO 710 J=2,NEXC2                                                  
      IF(EN <= XEXC2(J):
) GO TO 720                                      
  710 CONTINUE                                                          
      J=NEXC2                                                           
  720 A=(YEXC2(J)-YEXC2(J-1))/(XEXC2(J)-XEXC2(J-1))                     
      B=(XEXC2(J-1)*YEXC2(J)-XEXC2(J)*YEXC2(J-1))/(XEXC2(J-1)-XEXC2(J)) 
      QIN(10,I)=(A*EN+B)*1.D-16                                         
  800 CONTINUE
# EXC3                                                            
      QIN(11,I)=0.0                                                     
      IF(EN <= EIN(11):
) GO TO 900                                       
      DO 810 J=2,NEXC3                                                  
      IF(EN <= XEXC3(J):
) GO TO 820                                      
  810 CONTINUE                                                          
      J=NEXC3                                                           
  820 A=(YEXC3(J)-YEXC3(J-1))/(XEXC3(J)-XEXC3(J-1))                     
      B=(XEXC3(J-1)*YEXC3(J)-XEXC3(J)*YEXC3(J-1))/(XEXC3(J-1)-XEXC3(J)) 
      QIN(11,I)=(A*EN+B)*1.D-16                                         
  900 CONTINUE                                                          
#                                                                       
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)+QIN(1,I)+QIN(2,I)+QIN(3,I)+QIN(4,I)+  
     /QIN(5,I)+QIN(6,I)+QIN(7,I)+QIN(8,I)+QIN(9,I)+QIN(10,I)+QIN(11,I)
 1000 CONTINUE                                                          
#  SAVE COMPUTE TIME 
      IF(EFINAL <= EIN(11):
) NIN=10                                      
      IF(EFINAL <= EIN(10):
) NIN=9                                       
      IF(EFINAL <= EIN(9):
) NIN=8                                        
      IF(EFINAL <= EIN(8):
) NIN=7                                        
      IF(EFINAL <= EIN(7):
) NIN=6                                        
      IF(EFINAL <= EIN(6):
) NIN=5                                        
      RETURN                                                            
      # end
      def GAS14(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY   
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(4000),EROOT(4000),QT1(4000),QT2(4000),
     /QT3(4000),QT4(4000)
      COMMON/DENS/DEN(4000)
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6) 
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)        
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250] 
      DIMENSION ELEV[100],AJL(100),PJ(100) 
      DIMENSION SALPHA[105],EROT(105),AJIN(210),IMAP(210)   
      DIMENSION XEL(159),YEL(159),XMT(156),YMT(156),XEPS(156),YEPS(156),
     /XVIB1(17),YVIB1(17),XVIB2(18),YVIB2(18),XVIB3(12),YVIB3(12),
     /XION(55),YIONC(55),YIONG(55),XION1(31),YION1(31),XION2(28),
     /YION2(28),XION3(28),YION3(28),XION4(26),YION4(26),XION5(25),
     /YION5(25),XION6(23),YION6(23),XION7(21),YION7(21),XION8(17),
     /YION8(17),XKSH(81),YKSH(81),
     /XATT1(38),YATT1(38),XATT2(30),YATT2(30),XATT3(28),YATT3(28),
     /XTRP1(11),YTRP1(11),XTRP2(10),YTRP2(10),XTRP3(10),YTRP3(10),
     /XTRP4(9),YTRP4(9),
     /XNUL1(12),YNUL1(12),XNUL2(33),YNUL2(33),XNUL3(20),YNUL3(20),
     /XNUL4(18),YNUL4(18),
     /IOFFN(250),IOFFION(9),XSECDUM(210)
      DIMENSION ENROT(145),ENRTS(145),YEPSR(145),YMTRT(145)
      DIMENSION Z8T(25),EBRM(25)
      CHARACTER*50 SCRPT(300),SCRPTN(10)             
      CHARACTER*25 NAME
# ENERGY LEVELS OF WATER ( UP TO J=9) IN MILLIVOLTS
      DATA ELEV/0.0,2.950,4.604,5.253,8.690,9.856,11.800,16.726,16.882,
     /16.956,17.640,21.946,25.578,26.304,35.363,35.387,27.531,27.876,
     /34.157,37.240,39.152,47.426,47.590,60.518,60.521,40.338,40.496,
     /49.526,51.603,55.360,62.484,63.085,75.645,75.673,92.005,92.006,
     /55.383,55.452,67.312,68.552,74.734,80.463,82.022,93.822,93.953,
     /110.172,110.176,129.571,129.571,72.685,72.714,87.311,87.98,97.006,
     /101.26,104.44,115.03,115.46,131.38,131.40,150.79,150.79,172.94,
     /172.94,92.252,92.264,109.46,109.80,121.87,124.74,130.20,139.20,
     /140.32,155.62,155.71,175.02,175.02,197.22,197.22,221.81,221.81,
     /114.09,114.09,133.79,133.95,149.02,150.79,159.06,166.25,168.65,
     /182.87,183.16,202.25,202.27,224.48,224.48,249.18,249.18,275.92,
     /275.92/
#  J VALUE OF WATER LEVELS
      DATA AJL/0.0,1.0,1.0,1.0,2.0,2.0,2.0,2.0,2.0,
     /3.0,3.0,3.0,3.0,3.0,3.0,3.0,4.0,4.0,
     /4.0,4.0,4.0,4.0,4.0,4.0,4.0,5.0,5.0,
     /5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,
     /6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,
     /6.0,6.0,6.0,6.0,7.0,7.0,7.0,7.0,7.0,
     /7.0,7.0,7.0,7.0,7.0,7.0,7.0,7.0,7.0,
     /7.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,
     /8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,
     /9.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0,
     /9.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0,
     /9.0/
#  TRANSITION AMPLITUDES FOR 210 TRANSITIONS
      DATA SALPHA/1.50,1.259,1.092,1.088,1.101,2.074,2.543,2.166,2.066,
     /2.181,
     /3.655,3.446,2.037,4.224,1.899,4.218,5.660,1.841,4.140,1.850,
     /.8333,1.036,1.083,1.297,1.850,2.025,2.085,1.566,2.494,2.881,
     /1.709,2.965,1.778,1.860,1.000,1.500,2.157,3.007,3.977,4.984,
     /5.970,6.980,7.990,1.500,1.667,1.971,2.445,3.131,3.970,4.940,
     /2.395,2.319,2.322,2.449,2.800,3.290,3.393,3.270,3.153,3.090,
     /3.100,4.397,4.267,4.120,4.000,5.400,5.250,5.120,1.244,2.336,
     /3.390,4.397,5.400,6.400,.9225,2.165,3.251,4.265,5.250,.6050,
     /1.840,3.068,4.090,.3804,1.402,2.750,.2494,1.090,0.197,.7557,
     /1.744,2.837,3.918,4.965,5.960,6.980,7.990,.3003,.8347,1.641,
     /2.681,3.710,4.820,5.900,1.550/
# TRANSITION J(INITIAL) VALUES FOR 210 TRANSITIONS
      DATA AJIN/1.0,1.0,2.0,2.0,3.0,3.0,4.0,4.0,5.0,5.0,
     /2.0,2.0,3.0,3.0,4.0,4.0,5.0,5.0,3.0,3.0,
     /4.0,4.0,5.0,5.0,4.0,4.0,5.0,5.0,5.0,5.0,
     /6.0,6.0,7.0,7.0,6.0,6.0,7.0,7.0,7.0,7.0,
     /2.0,2.0,3.0,3.0,4.0,4.0,3.0,3.0,4.0,4.0,
     /5.0,5.0,6.0,6.0,4.0,4.0,5.0,5.0,6.0,6.0,
     /5.0,5.0,6.0,6.0,6.0,6.0,6.0,6.0,0.0,1.0,
     /1.0,2.0,2.0,3.0,3.0,4.0,4.0,5.0,5.0,6.0,
     /6.0,7.0,7.0,8.0,8.0,9.0,1.0,2.0,2.0,3.0,
     /3.0,4.0,4.0,5.0,5.0,6.0,6.0,7.0,7.0,8.0,
     /2.0,3.0,3.0,4.0,4.0,5.0,5.0,6.0,6.0,7.0,
     /7.0,8.0,3.0,4.0,4.0,5.0,5.0,6.0,6.0,7.0,
     /7.0,8.0,4.0,5.0,5.0,6.0,6.0,7.0,7.0,8.0,
     /5.0,6.0,6.0,7.0,7.0,8.0,1.0,2.0,2.0,3.0,
     /3.0,4.0,4.0,5.0,5.0,6.0,6.0,7.0,2.0,3.0,
     /3.0,4.0,4.0,5.0,5.0,6.0,6.0,7.0,3.0,4.0,
     /4.0,5.0,5.0,6.0,6.0,7.0,4.0,5.0,5.0,6.0,
     /6.0,7.0,5.0,6.0,6.0,7.0,6.0,7.0,1.0,2.0,
     /2.0,3.0,3.0,4.0,4.0,5.0,5.0,6.0,6.0,7.0,
     /7.0,8.0,8.0,9.0,2.0,3.0,3.0,4.0,4.0,5.0,
     /5.0,6.0,6.0,7.0,7.0,8.0,8.0,9.0,6.0,7.0/
# TRANSITION ENERGIES FOR 210 TRANSITIONS IN MILIVOLTS
      DATA EROT/2.303,5.082,9.083,12.93,16.33,3.110,4.809,8.439,12.59,
     /4.538,
     /4.994,7.724,6.626,5.834,9.188,7.423,7.433,11.93,9.695,14.63,
     /6.869,9.785,13.09,7.938,10.19,13.16,16.35,9.364,10.88,13.36,
     /11.11,11.91,13.10,17.54,4.604,6.906,8.950,10.92,12.97,15.11,
     /17.33,19.58,21.84,11.47,13.78,15.75,17.45,19.03,20.67,22.49,
     /18.48,21.12,23.33,25.10,26.52,27.74,25.13,28.05,30.74,33.00,
     /34.76,31.48,34.50,37.43,40.16,37.56,40.61,43.62,12.28,18.66,
     /25.16,31.49,37.57,43.36,16.45,22.01,28.25,34.53,40.62,21.51,
     /25.84,31.47,37.58,27.48,30.42,35.00,34.24,35.89,41.55,4.086,
     /7.100,9.891,12.46,14.89,17.23,19.54,21.82,4.769,8.579,12.29,
     /15.71,18.76,21.48,23.99,16.54/
# MAP OF TRANSITION NO TO LEVEL POPULATION
      DATA IMAP/2,4,7,9,14,16,23,25,34,36,5,7,12,14,21,23,32,34,10,12,
     /19,21,30,32,17,19,28,30,26,28,39,41,54,56,37,39,52,54,50,52,
     /6,8,13,15,22,24,11,13,20,22,31,33,44,46,18,20,29,31,42,44,
     /27,29,40,42,38,40,66,68,1,3,2,6,5,11,10,18,17,27,26,38,
     /37,51,50,66,65,83,4,8,7,13,12,20,19,29,28,40,39,53,52,68,
     /9,15,14,22,21,31,30,42,41,55,54,70,16,24,23,33,32,44,43,57,
     /56,72,25,35,34,46,45,59,58,74,36,48,47,61,60,76,3,9,8,16,
     /15,25,24,36,35,49,48,64,6,14,13,23,22,34,33,47,46,62,11,21,
     /20,32,31,45,44,60,18,30,29,43,42,58,27,41,40,56,38,54,3,5,
     /6,10,11,17,18,26,27,37,38,50,51,65,66,82,8,12,13,19,20,28,
     /29,39,40,52,53,67,68,84,42,54/             
# ELASTIC MOMENTUM TRANSFER ( NO ROTATION EXCEPT ABOVE 2000EV)                       
      DATA XMT/.0001,.001,.002,.003,.004,.005,.006,.007,.008,.009,
     /0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.10,
     /0.15,0.20,0.25,0.30,0.40,0.50,0.60,0.70,0.80,0.90,
     /1.00,1.30,1.50,2.00,2.50,3.00,4.00,5.00,6.00,7.00,
     /8.00,9.00,10.0,12.0,15.0,20.0,25.0,30.0,40.0,60.0,
     /80.0,100.,125.,150.,175.,200.,250.,300.,400.,500.,
     /600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,
# ABOVE 2000 EV USE SUM OF ROTATION AND ELASTIC 
     /2000.0001,
     /2500.,3000.,3500.,4000.,4500.,5000.,6000.,7000.,8000.,9000.,
     /1.D4,1.25D4,1.5D4,1.75D4,2.D4,2.5D4,3.D4,3.5D4,4.D4,4.5D4,
     /5.D4,6.D4,7.D4,8.D4,9.D4,1.D5,1.25D5,1.5D5,1.75D5,2.D5,
     /2.5D5,3.D5,3.5D5,4.D5,4.5D5,5.D5,6.D5,7.D5,8.D5,9.D5,
     /1.D6,1.25D6,1.5D6,1.75D6,2.D6,2.5D6,3.D6,3.5D6,4.D6,4.5D6,
     /5.D6,6.D6,7.D6,8.D6,9.D6,1.D7,1.25D7,1.5D7,1.75D7,2.D7,
     /2.5D7,3.D7,3.5D7,4.D7,4.5D7,5.D7,6.D7,7.D7,8.D7,9.D7,
     /1.D8,1.25D8,1.5D8,1.75D8,2.D8,2.5D8,3.D8,3.5D8,4.D8,4.5D8,
     /5.D8,6.D8,7.D8,8.D8,9.D8,1.D9/
      DATA YMT/38000.,35880.,17360.,11167.,8216.,6392.,5418.,4361.,
     /3706.,3237.,
     /2842.,1151.,671.,465.,353.,287.,224.,178.,146.,125.,
     /70.6,45.2,31.0,22.0,12.8,8.30,6.00,3.80,2.70,2.00,
     /1.50,0.85,0.85,1.02,1.45,1.95,2.80,3.60,4.30,4.85,
     /5.30,5.65,5.95,6.20,5.95,5.15,4.55,4.00,3.30,2.35,
     /1.88,1.47,1.21,.951,.772,.642,.466,.356,.228,.160,
     /.118,.0908,.0718,.0581,.0479,.0314,.0219,.0159,.0119,
# ABOVE 2000EV USE SUM OF ROTATION AND ELASTIC
     /.0200,
     /.0136,.00990,.00755,.00596,.00484,.00401,.00290,.00220,.00173,
     /.00140,
     /.00116,7.74D-4,5.56D-4,4.21D-4,3.31D-4,2.21D-4,1.59D-4,1.21D-4,
     /9.5D-5,7.70D-5,
     /6.38D-5,4.61D-5,3.51D-5,2.78D-5,2.26D-5,1.88D-5,1.28D-5,9.41D-6,
     /7.27D-6,5.82D-6,
     /4.04D-6,3.01D-6,2.36D-6,1.91D-6,1.59D-6,1.35D-6,1.02D-6,8.06D-7,
     /6.58D-7,5.50D-7,
     /4.68D-7,3.35D-7,2.53D-7,1.99D-7,1.61D-7,1.13D-7,8.38D-8,6.51D-8,
     /5.21D-8,4.27D-8,
     /3.58D-8,2.62D-8,2.01D-8,1.59D-8,1.29D-8,1.07D-8,7.19D-9,5.18D-9,
     /3.92D-9,3.07D-9,
     /2.04D-9,1.45D-9,1.09D-9,8.49D-10,6.80D-10,5.57D-10,3.94D-10,
     /2.93D-10,2.26D-10,1.80D-10,
     /1.47D-10,9.46D-11,6.60D-11,4.86D-11,3.73D-11,2.39D-11,1.66D-11,
     /1.22D-11,9.36D-12,7.40D-12,
     /5.99D-12,4.16D-12,3.06D-12,2.34D-12,1.85D-12,1.50D-12/
# ELASTIC X-SECTION (WITHOUT ROTATION)
      DATA XEL/.0001,.001,.002,.003,.004,.005,.006,.007,.008,.009,
     /0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.10,
     /0.15,0.20,0.25,0.30,0.40,0.50,0.60,0.70,0.80,0.90,
     /1.00,1.30,1.50,2.00,2.50,3.00,4.00,5.00,6.00,7.00,
     /8.00,9.00,10.0,12.0,15.0,20.0,25.0,30.0,40.0,50.0,
     /60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,
     /300.,400.,500.,600.,700.,800.,900.,1000.,1250.,1500.,
     /1750.,2000.,
c ABOVE 2000EV USE ELASTIC + ROTATION
     /2000.0001,2500.,3000.,3500.,4000.,4500.,5000.,
     /6000.,7000.,8000.,9000.,1.D4,1.25D4,1.5D4,1.75D4,2.D4,2.5D4,
     /3.D4,3.5D4,4.D4,4.5D4,5.D4,6.D4,7.D4,8.D4,9.D4,1.D5,
     /1.25D5,1.5D5,1.75D5,2.D5,2.5D5,3.D5,3.5D5,4.D5,4.5D5,5.D5,
     /6.D5,7.D5,8.D5,9.D5,1.D6,1.25D6,1.5D6,1.75D6,2.D6,2.5D6,
     /3.D6,3.5D6,4.D6,4.5D6,5.D6,6.D6,7.D6,8.D6,9.D6,1.D7,
     /1.25D7,1.5D7,1.75D7,2.D7,2.5D7,3.D7,3.5D7,4.D7,4.5D7,5.D7,
     /6.D7,7.D7,8.D7,9.D7,1.D8,1.25D8,1.5D8,1.75D8,2.D8,2.5D8,
     /3.D8,3.5D8,4.D8,4.5D8,5.D8,6.D8,7.D8,8.D8,9.D8,1.D9/
      DATA YEL/38000.,35880.,17360.,11200.,8700.,7000.,6000.,5000.,
     /4300.,3800.,
     /3600.,1630.,1010.,780.,640.,530.,460.,405.,365.,317.,
     /215.,150.,112.,83.0,52.7,37.0,28.5,21.5,17.0,13.5,
     /10.9,6.50,5.00,2.65,2.45,2.60,3.60,5.00,6.00,7.00,
     /8.00,8.70,9.20,9.90,9.50,8.80,7.80,6.80,5.60,4.50,
     /4.00,3.55,3.20,2.85,2.50,2.05,1.75,1.55,1.40,1.20,
     /1.00,.795,.655,.570,.505,.450,.415,.385,.325,.285,
     /.250,.226,
# ABOVE 2000EV USE ELASTIC + ROTATION
     /.336,.275,.234,.203,.180,.161,.146,
     /.123,.107,.0940,.0841,.0761,.0617,.0519,.0450,.0397,.0323,
     /.0273,.0238,.0211,.0190,.0174,.0149,.0131,.0117,.0107,.00987,
     /.00837,.00738,.00667,.00614,.00541,.00493,.00459,.00433,.00414,
     /.00399,
     /.00377,.00361,.00350,.00342,.00336,.00324,.00318,.00313,.00310,
     /.00306,
     /.00304,.00302,.00301,.00300,.00300,.00299,.00299,.00298,.00298,
     /.00298,
     /30*.00297/
#
#  OKHRIMOVSKY                 1.0 - EPSILON
#  ANGULAR DISTRIBUTION def FOR ELASTIC 
      DATA XEPS/.0001,.001,.002,.003,.004,.005,.006,.007,.008,.009,
     /0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.10,
     /0.15,0.20,0.25,0.30,0.40,0.50,0.60,0.70,0.80,0.90,
     /1.00,1.30,1.50,2.00,2.50,3.00,4.00,5.00,6.00,7.00,
     /8.00,9.00,10.0,12.0,15.0,20.0,25.0,30.0,40.0,60.0,
     /80.0,100.,125.,150.,175.,200.,250.,300.,400.,500.,
     /600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,
#
     /2000.0001,2500.,3000.,3500.,4000.,4500.,5000.,6000.,7000.,
     /8000.,9000.,1.D4,1.25D4,1.5D4,1.75D4,2.D4,2.5D4,3.D4,3.5D4,
     /4.D4,4.5D4,5.D4,6.D4,7.D4,8.D4,9.D4,1.D5,1.25D5,1.5D5,
     /1.75D5,2.D5,2.5D5,3.D5,3.5D5,4.D5,4.5D5,5.D5,6.D5,7.D5,
     /8.D5,9.D5,1.D6,1.25D6,1.5D6,1.75D6,2.D6,2.5D6,3.D6,3.5D6,
     /4.D6,4.5D6,5.D6,6.D6,7.D6,8.D6,9.D6,1.D7,1.25D7,1.5D7,
     /1.75D7,2.D7,2.5D7,3.D7,3.5D7,4.D7,4.5D7,5.D7,6.D7,7.D7,
     /8.D7,9.D7,1.D8,1.25D8,1.5D8,1.75D8,2.D8,2.5D8,3.D8,3.5D8,
     /4.D8,4.5D8,5.D8,6.D8,7.D8,8.D8,9.D8,1.D9/
      DATA YEPS/1.00,1.00,1.00,.99565,.91672,.87009,.85511,.80970,
     /.79461,.77988,
     /.69030,.57574,.52106,.43613,.38391,.37247,.31332,.26543,.22829,
     /.22313,
     /.16735,.14647,.12863,.12046,.10559,.09376,.08536,.06614,.05674,
     /.05139,
     /.04633,.04315,.06256,.21475,.43086,.63530,.67397,.59438,.58994,
     /.55822,
     /.51861,.50188,.49846,.47289,.47289,.42300,.42075,.42656,.42787,
     /.42573,
     /.42573,.42633,.42609,.37461,.32511,.28396,.21779,.18960,.13624,
     /.10619,
     /.08339,.06771,.05713,.04747,4.025D-2,2.844D-2,2.100D-2,1.628D-2,
     /1.273D-2,
#
     /1.497D-2,1.172D-2,9.620D-3,8.153D-3,7.066D-3,6.235D-3,5.577D-3,
     /4.601D-3,3.914D-3,
     /3.404D-3,3.011D-3,2.699D-3,2.141D-3,1.772D-3,1.510D-3,1.315D-3,
     /1.043D-3,8.624D-4,7.336D-4,
     /6.375D-4,5.631D-4,5.035D-4,4.143D-4,3.507D-4,3.035D-4,2.667D-4,
     /2.374D-4,1.848D-4,1.501D-4,
     /1.255D-4,1.073D-4,8.205D-5,6.555D-5,5.398D-5,4.540D-5,3.900D-5,
     /3.390D-5,2.646D-5,2.135D-5,
     /1.765D-5,1.487D-5,1.273D-5,9.143D-6,6.867D-6,5.363D-6,4.309D-6,
     /2.967D-6,2.169D-6,1.656D-6,
     /1.308D-6,1.059D-6,8.748D-7,6.267D-7,4.711D-7,3.671D-7,2.942D-7,
     /2.408D-7,1.574D-7,1.109D-7,
     /8.227D-8,6.344D-8,4.103D-8,2.866D-8,2.112D-8,1.620D-8,1.281D-8,
     /1.038D-8,7.187D-9,5.257D-9,
     /4.004D-9,3.147D-9,2.533D-9,1.596D-9,1.093D-9,7.92D-10,5.99D-10,
     /3.76D-10,2.57D-10,1.86D-10,
     /1.41D-10,1.10D-10,8.8D-11,6.0D-11,4.4D-11,3.3D-11,2.6D-11,2.1D-11/
# INELASTIC ANGULAR DISTRIBUTION  DIPOLE FORM
# ENERGY IN UNITS OF THE ROTATIONAL ENERGY LEVEL. 
# ENRTS FOR SUPER ELASTIC
# ENROT FOR NORMAL ELASTIC
      DATA ENRTS/0.00,0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,
     /0.10,0.11,0.12,0.13,0.14,0.16,0.18,0.20,0.22,0.25,
     /0.28,0.31,0.34,0.37,0.40,0.44,0.48,0.52,0.56,0.60,
     /0.65,0.70,0.75,0.80,0.90,1.00,1.10,1.20,1.30,1.40,
     /1.60,1.80,2.00,2.20,2.40,2.60,2.80,3.00,3.50,4.00,
     /4.50,5.00,5.50,6.00,7.00,8.00,9.00,10.0,11.0,12.0,
     /14.0,16.0,18.0,20.0,22.0,25.0,30.0,35.0,40.0,45.0,
     /50.0,60.0,70.0,80.0,90.0,100.,120.,140.,160.,180.,
     /200.,250.,300.,350.,400.,500.,600.,700.,800.,1000.,
     /1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,5000.,
     /6000.,7000.,8000.,9000.,10000.,12000.,14000.,16000.,18000.,20000.,
     /25000.,30000.,35000.,40000.,50000.,60000.,80000.,1.0D5,1.5D5,
     /2.0D5,
     /2.5D5,3.0D5,3.5D5,4.0D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,
     /1.2D6,1.4D6,1.6D6,1.8D6,2.0D6,2.5D6,3.0D6,3.5D6,4.0D6,5.0D6,
     /6.0D6,7.0D6,8.0D6,9.0D6,1.0D7/
      DATA ENROT/1.0,1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,
     /1.10,1.11,1.12,1.13,1.14,1.16,1.18,1.20,1.22,1.25,
     /1.28,1.31,1.34,1.37,1.40,1.44,1.48,1.52,1.56,1.60,
     /1.65,1.70,1.75,1.80,1.90,2.00,2.10,2.20,2.30,2.40,
     /2.60,2.80,3.00,3.20,3.40,3.60,3.80,4.00,4.50,5.00,
     /5.50,6.00,6.50,7.00,8.00,9.00,10.0,11.0,12.0,13.0,
     /15.0,17.0,19.0,21.0,23.0,26.0,31.0,36.0,41.0,46.0,
     /51.0,61.0,71.0,81.0,91.0,101.,121.,141.,161.,181.,
     /201.,251.,301.,351.,401.,501.,601.,701.,801.,1001.,
     /1201.,1401.,1601.,1801.,2001.,2501.,3001.,3501.,4001.,5001.,
     /6001.,7001.,8001.,9001.,10001.,12001.,14001.,16001.,18001.,20001.,
     /25001.,30001.,35001.,40001.,50001.,60001.,80001.,1.0D5,1.5D5,
     /2.0D5,
     /2.5D5,3.0D5,3.5D5,4.0D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,
     /1.2D6,1.4D6,1.6D6,1.8D6,2.0D6,2.5D6,3.0D6,3.5D6,4.0D6,5.0D6,
     /6.0D6,7.0D6,8.0D6,9.0D6,1.0D7/
# OKRIMOVSKKY   1.0-EPSILON
      DATA YEPSR/1.0,.90060,.86030,.83000,.80486,.78309,.76390,.74641,
     /.73054,.71571,
     /.70205,.68931,.67720,.66584,.65510,.63516,.61705,.60056,.58510,
     /.56417,
     /.54521,.52802,.51233,.49782,.48448,.46818,.45320,.43962,.42704,
     /.41555,
     /.40221,.39009,.37891,.36854,.35015,.33409,.32004,.30760,.29649,
     /.28657,
     /.26933,.25493,.24266,.23212,.22286,.21483,.20763,.20114,.18760,
     /.17674,
     /.16791,.16044,.15403,.14857,.13951,.13226,.12637,.12143,.11718,
     /.11346,
     /.10742,.10255,.09859,.09519,.09234,.08867,.08387,.08017,.07716,
     /.07465,
     /.07252,.06913,.06641,.06426,.06240,.06087,.05833,.05628,.05467,
     /.05327,
     /.05208,.04973,.04794,.04652,.04534,.04347,.04210,.04096,.04001,
     /.03854,
     /.03740,.03648,.03570,.03506,.03450,.03336,.03248,.03173,.03115,
     /.03021,
     /.02946,.02886,.02835,.02792,.02754,.02692,.02641,.02597,.02561,
     /.02529,
     /.02463,.02411,.02369,.02334,.02277,.02232,.02165,.02115,.02030,
     /.01973,
     /.01931,.01898,.01870,.01847,.01810,.01780,.01756,.01735,.01718,
     /.01702,
     /.01675,.01654,.01635,.01620,.01606,.01576,.01553,.01534,.01518,
     /.01490,
     /.01472,.01456,.01440,.01427,.01418/
# RATIO OF MT/TOT
      DATA YMTRT/0.0,.9336,.9065,.8860,.8689,.8540,.8408,.8287,.8176,
     /.8073,
     /.7977,.7887,.7801,.7720,.7643,.7499,.7367,.7245,.7131,.6974,
     /.6830,.6698,.6576,.6462,.6356,.6225,.6103,.5991,.5886,.5789, 
     /.5675,.5570,.5472,.5380,.5214,.5066,.4934,.4815,.4707,.4609,
     /.4435,.4286,.4156,.4042,.3940,.3850,.3768,.3693,.3533,.3401,
     /.3291,.3196,.3113,.3041,.2919,.2819,.2736,.2665,.2603,.2548,
     /.2457,.2382,.2320,.2266,.2220,.2160,.2080,.2017,.1965,.1921,
     /.1883,.1822,.1772,.1732,.1697,.1668,.1619,.1579,.1547,.1519,
     /.1495,.1447,.1410,.1380,.1355,.1315,.1285,.1260,.1239,.1206,
     /.1180,.1159,.1141,.1126,.1113,.1086,.1065,.1047,.1033,.1010,
     /.09915,.09766,.09640,.09532,.09437,.09277,.09147,.09036,.08941,
     /.08858,
     /.08686,.08550,.08439,.08345,.08193,.08072,.07889,.07752,.07516,
     /.07357,
     /.07238,.07144,.07066,.07000,.06892,.06807,.06736,.06676,.06624,
     /.06578,
     /.06500,.06436,.06381,.06334,.06292,.06204,.06133,.06078,.06027,
     /.05944,
     /.05889,.05839,.05790,.05749,.05723/
# VIBRATION      
#  B# end MODE 010                                                 
      DATA XVIB1/.1977,0.30,0.34,0.39,0.60,0.86,1.00,2.00,2.20,3.00,
     /4.00,5.00,6.00,8.00,10.0,15.0,20.0/                               
      DATA YVIB1/0.00,1.47,1.56,1.51,0.68,.344,.318,.172,.163,.138,    
     /.129,.135,.140,.146,.155,.112,.086/                               
# SUM OF STRETCH MODES 001 AND 100                                
      DATA XVIB2/.4535,0.53,0.58,0.63,0.80,1.00,2.10,3.00,4.00,5.00,
     /6.00,7.00,7.50,8.00,9.00,10.0,15.0,20.0/                     
      DATA YVIB2/0.00,1.93,2.00,1.95,.516,.430,.275,.267,.331,.370,
     /.421,.447,.455,.426,.361,.280,.163,.069/                     
# SUM OF VIBRATION HARMONICS
      DATA XVIB3/.919,2.00,3.00,4.00,5.00,6.00,7.00,8.00,9.00,10.0,
     /15.0,20.0/
      DATA YVIB3/0.00,.001,.009,.017,.034,.040,.042,.042,.039,.034,
     /.017,.009/
# 
# IONISATION    ABOVE 5000 EV USE IONISATION OSCILLATOR STRENGTH
#
      DATA XION/12.617,13.5,15.0,17.5,20.0,22.5,25.0,30.0,35.0,40.0,
     /45.0,50.0,60.0,70.0,80.0,90.0,100.,110.,125.,150.,
     /175.,200.,250.,300.,400.,500.,600.,700.,800.,900.,
     /1000.,1100.,1200.,1300.,1400.,1500.,1600.,1700.,1800.,1900.,
     /2000.,2100.,2200.,2300.,2400.,2500.,2600.,2700.,2800.,2900.,
     /3000.,3500.,4000.,4500.,5000./
# COUNTING IONISATION
      DATA YIONC/0.0,.028,.124,.271,.427,.600,.752,1.017,1.248,1.431,
     /1.577,1.701,1.865,1.964,2.052,2.082,2.104,2.094,2.069,1.994,
     /1.931,1.860,1.691,1.534,1.315,1.138,1.005,0.893,0.811,0.744,
     /0.681,0.634,0.595,0.559,0.528,0.501,0.476,0.454,0.434,0.416,
     /0.399,0.384,0.369,0.356,0.344,0.333,0.323,0.313,0.304,0.295,
     /0.287,0.253,0.226,0.205,0.1873/
# GROSS IONISATION
      DATA YIONG/0.0,.028,.124,.271,.427,.600,.752,1.017,1.248,1.431,
     /1.579,1.705,1.875,1.981,2.076,2.111,2.138,2.132,2.111,2.037,
     /1.975,1.903,1.732,1.571,1.346,1.163,1.028,0.913,0.829,0.761,
     /0.696,0.648,0.608,0.571,0.540,0.512,0.486,0.464,0.444,0.425,
     /0.408,0.392,0.377,0.364,0.352,0.340,0.330,0.320,0.311,0.301,
     /0.293,0.259,0.231,0.210,0.1914/
# IONISATION TO H2O +           ELOSS=12.617 EV
      DATA XION1/12.617,13.5,15.0,17.5,20.0,22.5,25.0,30.0,35.0,40.0,
     /45.0,50.0,60.0,70.0,80.0,90.0,100.,110.,125.,150.,
     /175.,200.,250.,300.,400.,500.,600.,700.,800.,900.,
     /1000./
      DATA YION1/0.0,.028,.124,.271,.410,.542,.646,.811,.948,1.047,
     /1.117,1.176,1.241,1.271,1.302,1.304,1.305,1.288,1.266,1.214,
     /1.168,1.129,1.022,0.932,0.803,0.702,0.625,0.555,0.504,0.466,
     /0.429/
# IONISATION TO OH +            ELOSS=18.1 EV
      DATA XION2/18.1,20.0,22.5,25.0,30.0,35.0,40.0,45.0,50.0,60.0,
     /70.0,80.0,90.0,100.,110.,125.,150.,175.,200.,250.,
     /300.,400.,500.,600.,700.,800.,900.,1000./
      DATA YION2/0.0,.0145,.0493,.0847,.159,.220,.263,.298,.325,.355,
     /.374,.388,.388,.392,.389,.384,.367,.358,.342,.315,
     /.294,.253,.216,.191,.173,.159,.145,.132/
# IONISATION TO H +             ELOSS=18.72 EV
      DATA XION3/18.72,20.0,22.5,25.0,30.0,35.0,40.0,45.0,50.0,60.0,
     /70.0,80.0,90.0,100.,110.,125.,150.,175.,200.,250.,
     /300.,400.,500.,600.,700.,800.,900.,1000./
      DATA YION3/.0,.0021,.0089,.0194,.0433,.0724,.1068,.1398,.169,.220,
     /.255,.284,.301,.312,.317,.315,.309,.303,.291,.265,
     /.229,.195,.165,.143,.124,.112,.0997,.0904/
# IONISATION TO O +             ELOSS=21.0 EV    
      DATA XION4/21.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,
     /90.0,100.,110.,125.,150.,175.,200.,250.,300.,400.,
     /500.,600.,700.,800.,900.,1000./
      DATA YION4/0.0,.0022,.0037,.0069,.0132,.0206,.0273,.0383,.0456,
     /.0538,
     /.0587,.0594,.0619,.0617,.0596,.0576,.0550,.0481,.0418,.0332,
     /.0282,.0237,.0203,.0181,.0165,.0145/
# IONISATION TO H2 +            ELOSS=23.0
      DATA XION5/23.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,
     /100.,110.,125.,150.,175.,200.,250.,300.,400.,500.,
     /600.,700.,800.,900.,1000./ 
      DATA YION5/0.0,.00018,.00039,.00057,.00070,.00065,.00066,.00069,
     /.00063,.00078,
     /.00075,.00073,.00064,.00077,.00071,.00054,.00050,.00045,.00040,
     /.00032,
     /.00029,.00033,.00022,.00032,.00024/
# IONISATION TO (H + ,OH +)     ELOSS=35.4 EV  DOUBLE IONISATION
      DATA XION6/35.4,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,110.,
     /125.,150.,175.,200.,250.,300.,400.,500.,600.,700.,
     /800.,900.,1000./
      DATA YION6/0.0,.00045,.0013,.0034,.0091,.0145,.0188,.0216,.0244,
     /.0254,
     /.0268,.0266,.0258,.0244,.0226,.0211,.0182,.0155,.0137,.0124,
     /.0114,.0105,.0095/
# IONISATION TO (H + ,O +)      ELOSS=45.0 EV  DOUBLE IONISATION
      DATA XION7/45.0,50.0,60.0,70.0,80.0,90.0,100.,110.,125.,150.,
     /175.,200.,250.,300.,400.,500.,600.,700.,800.,900.,
     /1000./
      DATA YION7/0.0,.0001,.0011,.0028,.0052,.0076,.0098,.0118,.0144,
     /.0158,
     /.0160,.0163,.0161,.0139,.0111,.0094,.0079,.0068,.0060,.0055,
     /.0048/
# IONISATION TO O ++             ELOSS=70.0 EV  DOUBLE IONISATION
      DATA XION8/70.0,90.0,100.,110.,125.,150.,175.,200.,250.,300.,
     /400.,500.,600.,700.,800.,900.,1000./
      DATA YION8/0.0,.00010,.00022,.00049,.00068,.00106,.00165,.00173,
     /.00180,.00172,
     /.00128,.00108,.00090,.00078,.00069,.00061,.00058/ 
# OXYGEN ATOM K-SHELL IONISATION X-SECTION 
      DATA XKSH/532.,541.,557.,574.,591.,609.,627.,646.,665.,685.,
     /706.,727.,749.,793.,841.,891.,944.,1000.,1090.,1188.,
     /1296.,1496.,1679.,1884.,2054.,2238.,2512.,2985.,3981.,5012.,
     /7079.,1.00D4,1.50D4,2.05D4,2.51D4,3.07D4,4.10D4,5.01D4,6.13D4,
     /7.08D4,
     /8.18D4,1.00D5,1.54D5,2.05D5,2.99D5,4.10D5,5.01D5,6.13D5,7.08D5,
     /8.18D5,
     /1.00D6,1.25D6,1.50D6,2.05D6,3.07D6,4.10D6,5.01D6,6.13D6,7.08D6,
     /8.18D6,
     /1.00D7,1.26D7,1.50D7,2.05D7,3.07D7,4.10D7,5.01D7,6.13D7,7.08D7,
     /8.18D7,
     /1.00D8,1.26D8,1.50D8,2.05D8,3.07D8,4.10D8,5.01D8,6.13D8,7.08D8,
     /8.18D8,
     /1.00D9/
      DATA YKSH/0.00,3.31D-5,8.86D-5,1.42D-4,1.95D-4,2.45D-4,2.94D-4,
     /3.41D-4,3.87D-4,4.31D-4,
     /4.73D-4,5.14D-4,5.53D-4,6.27D-4,6.95D-4,7.56D-4,8.13D-4,8.63D-4,
     /9.29D-4,9.84D-4,
     /1.03D-3,1.08D-3,1.10D-3,1.11D-3,1.11D-3,1.10D-3,1.08D-3,1.03D-3,
     /9.24D-4,8.27D-4,
     /6.81D-4,5.49D-4,4.18D-4,3.35D-4,2.90D-4,2.50D-4,2.04D-4,1.77D-4,
     /1.53D-4,1.39D-4,
     /1.26D-4,1.11D-4,
     /8.62D-5,7.45D-5,6.36D-5,5.75D-5,5.48D-5,5.29D-5,5.20D-5,5.13D-5,
     /5.08D-5,5.08D-5,5.12D-5,5.24D-5,5.47D-5,5.68D-5,5.84D-5,6.00D-5,
     /6.13D-5,6.26D-5,
     /6.44D-5,6.65D-5,6.81D-5,7.11D-5,7.50D-5,7.78D-5,7.97D-5,8.17D-5,
     /8.31D-5,8.45D-5,
     /8.65D-5,8.87D-5,9.04D-5,9.36D-5,9.75D-5,1.00D-4,1.02D-4,1.04D-4,
     /1.06D-4,1.07D-4,
     /1.09D-4/
#
# ALL ATTACHMENT  SCALED BY 10(21)
#    H-  + OH     FEDOR DATA WITH THRESHOLD AT 5.6EV AND SCALED TO FIT 
#                   THE EXPERIMENTAL ATTACHMENT RATE 
      DATA XATT1/5.60,5.75,6.00,6.25,6.40,6.50,
     /6.75,7.00,7.25,7.50,7.75,8.00,8.25,8.40,8.50,8.75,
     /9.00,9.25,9.50,9.75,10.0,10.25,10.5,10.75,11.0,11.25,
     /11.50,11.75,12.00,12.25,12.5,12.75,13.0,13.5,14.0,14.5,
     /15.0,15.5/
      DATA YATT1/8.7,383.,2262.,5368.,5742.,5629.,
     /4019.,2314.,1192.,655.,572.,727.,930.9,1018.,1001.,878.7,
     /690.,435.,231.,127.,66.3,49.0,43.2,47.1,47.1,49.0,
     /47.1,45.1,43.2,41.2,37.2,33.5,27.8,19.6,15.5,11.7,
     /8.79,0.59/ 
# O-  + H  + H    FEDOR DATA SCALED TO MELTON AND CHRISTOPHOROU
      DATA XATT2/6.00,6.25,6.50,6.75,7.00,7.25,7.50,7.75,8.00,8.25,
     /8.50,9.00,9.50,10.0,10.25,10.5,10.75,11.0,11.25,11.50,
     /11.75,12.0,12.25,12.5,12.75,13.0,13.5,14.0,14.5,15.0/  
      DATA YATT2/2.50,7.20,17.8,35.0,59.0,45.0,16.8,11.5,22.1,46.5,
     /80.0,142.,128.,113.,112.,141.,180.,213.,240.,260.,
     /269.,268.,243.,221.,188.,151.,81.0,39.0,18.5,4.5/
#  OH-  +   H     FEDOR NORMALISED TO MELTON
      DATA XATT3/6.00,6.25,6.50,6.75,7.00,7.25,7.50,7.75,8.00,8.25,
     /8.50,8.75,9.00,9.25,9.50,9.75,10.0,10.25,10.5,10.75,
     /11.0,11.25,11.50,11.75,12.0,12.25,12.5,12.75/
      DATA YATT3/0.30,0.70,1.00,1.50,1.45,0.90,0.40,0.30,0.40,0.58,
     /0.70,0.70,0.50,0.40,0.25,0.10,0.10,0.30,0.45,0.58,
     /0.72,0.80,0.80,0.75,0.65,0.50,0.42,0.25/               
# TRIPLET EXCITATIONS
      DATA XTRP1/7.04,7.50,8.00,8.50,9.00,10.0,12.0,15.0,20.0,25.0,
     /30.0/          
      DATA YTRP1/.0001,.075,0.15,0.24,0.33,0.23,0.16,0.14,0.11,.087,
     /.070/       
      DATA XTRP2/9.10,10.0,11.0,12.0,15.0,20.0,25.0,30.0,40.0,50.0/   
      DATA YTRP2/.0001,0.06,0.12,0.16,0.18,0.15,.122,0.10,.075,.055/  
      DATA XTRP3/9.95,11.5,13.0,15.0,17.5,20.0,25.0,30.0,40.0,50.0/
      DATA YTRP3/.0001,0.10,.190,.235,.250,.235,.205,.170,.130,.100/
      DATA XTRP4/13.0,15.0,16.0,18.0,22.0,26.0,30.0,40.0,50.0/
      DATA YTRP4/.0002,.242,.420,.525,.557,.536,.504,.389,.284/
# BREMSSTRAHLUNG X-SECTION WITH CUT OFF UNITS 10**-24 CM**2
      DATA Z8T/477.,294.,145.,81.6,45.8,21.2,12.2,7.69,5.22,4.76,
     /4.84,4.99,5.10,5.20,5.27,5.38,5.46,5.58,5.65,5.72,
     /5.77,5.80,5.81,5.83,5.84/
      DATA EBRM/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,
     /2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,
     /4.E7,5.E7,6.E7,8.E7,1.E8/
# FOLLOWING ARE NULL COLLISIONS:
# OH PRODUCTION FROM HARB ET AL J.CHEM.PHYS. 115(2001)5507
      DATA XNUL1/6.60,10.0,15.0,20.0,30.0,50.0,75.0,100.,150.,200.,
     /250.,300./
      DATA YNUL1/0.0,0.15,0.48,0.75,1.32,1.90,2.10,2.05,1.98,1.75,
     /1.60,1.40/
# OH(A-X) 306-350 NM EMISSION  BEENAKKER ET AL CHEM.PHYS.6(1974)445 
      DATA XNUL2/9.20,10.0,12.5,15.0,17.5,20.0,22.5,25.0,27.5,30.0,
     /35.0,40.0,50.0,60.0,70.0,80.0,90.0,100.,120.,140.,
     /170.,200.,250.,300.,350.,400.,450.,500.,600.,700.,
     /800.,900.,1000./
      DATA YNUL2/0.00,.0187,.0733,.0919,.0932,.0911,.0845,.0797,.0767,
     /.0745,
     /.0698,.0663,.0603,.0566,.0535,.0508,.0483,.0464,.0432,.0400,
     /.0364,.0339,.0297,.0266,.0240,.0224,.0206,.0196,.0179,.0158,
     /.0149,.0131,.0121/
# H ALPHA 3-2   656.3 NM MOHLMANN AND DEHEER  CHEM.PHYS. 40(1979)157
      DATA XNUL3/18.0,20.0,30.0,40.0,50.0,60.0,70.0,80.0,90.0,100.,
     /150.,200.,300.,400.,500.,600.,700.,800.,900.,1000./
      DATA YNUL3/0.0,.00204,.0105,.0169,.0224,.0291,.0326,.0346,.0354,
     /.0355,
     /.0311,.0269,.0204,.0162,.0132,.0114,.0101,.00892,.00814,.00734/
# H ALPHA 2-1 121.6 NM ITIKAWA AND MASON  J.PHYS.CHEM.REF.DATA 34(2005)1
# MORGAN AND MENTAL BELOW 24 EV
      DATA XNUL4/15.4,15.6,24.0,25.0,37.5,50.0,62.5,75.0,87.5,100.,
     /112.5,125.,137.5,150.,175.,200.,225.,250./
      DATA YNUL4/0.0,.0030,.0040,.00601,.0227,.0405,.059,.0727,.0823,
     /.0845,
     /.0839,.0829,.0812,.0799,.0764,.0733,.0698,.0665/
# ---------------------------------------------------------------------
#***********************************************************************
#                                 
      NAME='H2O  ANISOTROPIC     2017'                              
#***********************************************************************
# --------------------------------------------------------------------  
#  EXPERIMENTAL DATA NOT ACCURATE IN WATER VAPOUR. ELECTRON SCATTERING  
#  DATA USED IN ANALYSIS REPRODUCES DRIFT VELOCITY AND DIFFUSION       
#  COEFFICIENTS TO AN  ACCURACY OF  2%.                               
# ---------------------------------------------------------------------
# BORN BETHE VALUES FOR IONISATION
      CONST=1.873884D-20
      EMASS2=1021997.804
      API=DACOS(-1.00)
      A0=0.52917720859D-8
      RY=13.60569193
      BBCONST=16.0*API*A0*A0*RY*RY/EMASS2
#
# FIT OF IONISATION OSCILLATOR STRENGTH TO RIEKE AND PREJECHAL
      AM2=2.895
      C=30.7
# AVERAGE AUGER EMISSION FROM OXYGEN KSHELL
      AUGK=2.0
#
      AMPROT=0.98
      NION=9 
      NATT=3
      NIN=250
      NASIZE=4000
      NBREM=25
      NNULL=4
      NRTANG=145
# 
      DO 11 J=1,NIN
      IZBR(J)=0
   11 CONTINUE
#     IZBR(NIN+1)=8
# SKIP HYDROGEN BREMSTRAHLUNG DUE TO STORAGE SPACE LIMITATIONS 
#     IZBR(NIN+2)=1
#
# USE  OKHRIMOVSKKY TYPE ANGULAR DISTRIBUTION   
      DO 1 J=1,6
    1 KEL(J)=2
# USE OKRIMOVSKKY
      DO 2 J=1,NIN
    2 KIN(J)=2
#     
      NELA=159
      NMMT=156
      NEPS=156        
      NVIB1=17                                                          
      NVIB2=18
      NVIB3=12                                                          
      NIONC=55
      NION1=31
      NION2=28
      NION3=28
      NION4=26
      NION5=25
      NION6=23
      NION7=21
      NION8=17
      NKSH=81                                                         
      NATT1=38 
      NATT2=30
      NATT3=28                             
      NTRP1=11                                                          
      NTRP2=10                                                          
      NTRP3=10 
      NTRP4=9
      NUL1=12
      NUL2=33
      NUL3=20
      NUL4=18  
# SCALING OF NULL COLLISIONS
      SCLN(1)=1.0
      SCLN(2)=1.0
      SCLN(3)=1.0
      SCLN(4)=1.0
# 
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(18.01528*AMU)                                     
      E(3)=12.617                                                      
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
# 
      EION(1)=12.617
      EION(2)=18.1
      EION(3)=18.72
      EION(4)=21.0
      EION(5)=23.0
      EION(6)=35.4
      EION(7)=45.0
      EION(8)=70.0
      EION(9)=532.0
#
#-----------------------------------------------------------------      
# DBA IS DIPOLE MOMENT 
# DRAT IS RATIO OF MOMENTUM TRANSFER TO TOTAL X-SECTION FOR DIPOLE      
# -----------------------------------------------------------------
      GPARA=1.0
      GORTHO=3.0
      DBA=0.728 
      DRAT=0.07  
      A0=0.5291772083D-8
      RY=13.60569172
      DBK=8.37758*RY*(DBA*A0)**2
#------------------------------------------------------------------      
# CALCULATE POPULATION DENSITIES OF ROTATIONAL LEVELS      
      DO 3 J=1,99,2
    3 PJ(J)=GPARA*(2.0*AJL(J)+1.0)*math.exp(-ELEV[J]*1.D-3/AKT)
      DO 4 J=2,100,2
    4 PJ(J)=GORTHO*(2.0*AJL(J)+1.0)*math.exp(-ELEV[J]*1.D-3/AKT)
      RSUM=0.0
      DO 5 J=1,100
    5 RSUM=RSUM+PJ(J)
      DO 6 J=1,100
    6 PJ(J)=PJ(J)/RSUM   
      DO 7 J=1,105  
      EIN(2*J-1)=EROT(J)*1.D-3
    7 EIN(2*J)=-EROT(J)*1.D-3
#
      EIN(211)=-0.1977     
      EIN(212)=0.1977                                                   
      EIN(213)=0.4535                                                   
      EIN(214)=0.919                                                    
      EIN(215)=7.04                                                 
      EIN(216)=6.8425
      EIN(217)=7.2675
      EIN(218)=7.7725
      EIN(219)=8.3575
      EIN(220)=9.1
      EIN(221)=8.91
      EIN(222)=9.43
      EIN(223)=9.95
      EIN(224)=10.47
      EIN(225)=9.95
      EIN(226)=9.994
      EIN(227)=10.172
      EIN(228)=10.39
      EIN(229)=10.575
      EIN(230)=10.78
      EIN(231)=11.01
      EIN(232)=11.122
      EIN(233)=11.377
      EIN(234)=11.525
      EIN(235)=11.75
      EIN(236)=11.94
      EIN(237)=12.08
      EIN(238)=12.24
      EIN(239)=12.34
      EIN(240)=12.45
      EIN(241)=13.0
      EIN(242)=13.117
      EIN(243)=14.117
      EIN(244)=15.117
      EIN(245)=16.117
      EIN(246)=17.117
      EIN(247)=18.117
      EIN(248)=19.117
      EIN(249)=20.117
      EIN(250)=21.117
#  OPAL BEATY
#     SCLOBY=0.8
      DO 8 J=1,NION
#      EOBY(J)=EION(J)*SCLOBY
      EOBY(J)=EION(1)*0.93
    8 CONTINUE
#
      DO 9 JK=1,NION
      LEGAS(JK)=0
      ISHELL(JK)=0
      NC0(JK)=0
      EC0(JK)=0.0
      WKLM(JK)=0.0
      EFL(JK)=0.0
      NG1(JK)=0
      EG1(JK)=0.0
      NG2(JK)=0
      EG2(JK)=0.0
    9 CONTINUE
# DOUBLE CHARGED STATES
      NC0(6)=1
      EC0(6)=6.0
      NC0(7)=1
      EC0(7)=6.0
      NC0(8)=1
      EC0(8)=6.0
# FLUORESCENCE DATA
      LEGAS(9)=1
      ISHELL(9)=1
      NC0(9)=3
      EC0(9)=485.
      WKLM(9)=0.0069
      EFL(9)=518.
      NG1(9)=1
      EG1(9)=480.
      NG2(9)=2
      EG2(9)=5.0
# OFFSET ENERGY FOR IONISATION ELECTRON ANGULAR DISTRIBUTION
      DO 12 J=1,NION
      DO 10 I=1,NASIZE
      IF(EG(I):
 > EION(J)) :
       IOFFION(J)=I-1
       GO TO 12
      # endIF
   10 CONTINUE
   12 CONTINUE
# OFFSET ENERGY FOR EXCITATION ANGULAR DISTRIBUTION
      DO 14 NL=1,NIN
      DO 13 I=1,NASIZE
      IF(EG(I):
 > abs(EIN(NL))) :
       IOFFN(NL)=I-1
       GO TO 14
      # endIF
   13 CONTINUE
   14 CONTINUE
#
#**********************************************************************
# ENTER PENNING TRANSFER FRACTION FOR EACH LEVEL
# SET PENNING TRANSFER FRACTION TO ZERO FOR LOW ENERGY LEVELS
      DO 21 K=1,NIN
      DO 21 L=1,3
       PENFRA[1,K]=0.0
   21 CONTINUE
#---------------------------------------
# PENNING TRANSFER FRACTION FOR LEVELS ABOVE 6.0EV
      DO 22 K=215,NIN
      PENFRA[1,K]=0.0
# PENNING TRANSFER DISTANCE IN MICRONS
      PENFRA[2,K]=1.0
# PENNING TRANSFER TIME IN PICOSECONDS
      PENFRA[3,K]=1.0
      IF(IPEN == 0):
 GO TO 22
      WRITE(6,999) NAME,EIN(K),PENFRA[1,K],PENFRA[2,K],PENFRA[3,K]
  999 FORMAT(' GAS = ',A25,' ENERGY LEVEL = ',F7.4,' EV.',/,' PENNING PR
     /OBABILITY = ',F5.3,' ABS.LENGTH = ',F7.2,' DECAY TIME = ',F7.1,/)
   22 CONTINUE
#**********************************************************************
#
      SCRPT(1)='                                                  '
      SCRPT(2)=' ELASTIC ANISOTROPIC     H2O                      '
      SCRPT(3)=' IONISATION   H2O+                  ELOSS= 12.617 '
      SCRPT(4)=' DISSOC ION    OH+                  ELOSS= 18.1   '
      SCRPT(5)=' DISSOC ION     H+                  ELOSS= 18.72  '
      SCRPT(6)=' DISSOC ION     O+                  ELOSS= 21.0   '
      SCRPT(7)=' DISSOC ION    H2+                  ELOSS= 23.0   '
      SCRPT(8)=' DISSOC ION     H+ + OH+            ELOSS= 35.4   '
      SCRPT(9)=' DISSOC ION     H+ + O+             ELOSS= 45.0   '
      SCRPT(10)=' DISSOC ION     O++                 ELOSS= 70.0   '
      SCRPT(11)=' IONISATION  O K-SHELL              ELOSS=532.0   ' 
      SCRPT(12)=' ATTACHMENT  H-                                   '
      SCRPT(13)=' ATTACHMENT  O-                                   '
      SCRPT(14)=' ATTACHMENT  OH-                                  '
      SCRPT(15)='                                                  ' 
      SCRPT(16)='                                                  ' 
      SCRPT(17)=' ROTATION   101--110               ELOSS= 0.002303'
      SCRPT(18)=' ROTATION   110--101               ELOSS=-0.002303'
      SCRPT(19)=' ROTATION   211--220               ELOSS= 0.005082'
      SCRPT(20)=' ROTATION   220--211               ELOSS=-0.005082'
      SCRPT(21)=' ROTATION   321--330               ELOSS= 0.009083'
      SCRPT(22)=' ROTATION   330--321               ELOSS=-0.009083'
      SCRPT(23)=' ROTATION   431--440               ELOSS= 0.01293 '
      SCRPT(24)=' ROTATION   440--431               ELOSS=-0.01293 '
      SCRPT(25)=' ROTATION   541--550               ELOSS= 0.01633 '
      SCRPT(26)=' ROTATION   550--541               ELOSS=-0.01633 '
      SCRPT(27)=' ROTATION   202--211               ELOSS= 0.00311 '
      SCRPT(28)=' ROTATION   211--202               ELOSS=-0.00311 '
      SCRPT(29)=' ROTATION   312--321               ELOSS= 0.004809'
      SCRPT(30)=' ROTATION   321--312               ELOSS=-0.004809'
      SCRPT(31)=' ROTATION   422--431               ELOSS= 0.008439'
      SCRPT(32)=' ROTATION   431--422               ELOSS=-0.008439'
      SCRPT(33)=' ROTATION   532--541               ELOSS= 0.01259 '
      SCRPT(34)=' ROTATION   541--532               ELOSS=-0.01259 '
      SCRPT(35)=' ROTATION   303--312               ELOSS= 0.004538'
      SCRPT(36)=' ROTATION   312--303               ELOSS=-0.004538'
      SCRPT(37)=' ROTATION   413--422               ELOSS= 0.004994'
      SCRPT(38)=' ROTATION   422--413               ELOSS=-0.004994'
      SCRPT(39)=' ROTATION   523--532               ELOSS= 0.007724'
      SCRPT(40)=' ROTATION   532--523               ELOSS=-0.007724'
      SCRPT(41)=' ROTATION   404--413               ELOSS= 0.006626'
      SCRPT(42)=' ROTATION   413--404               ELOSS=-0.006626'
      SCRPT(43)=' ROTATION   514--523               ELOSS= 0.005834'
      SCRPT(44)=' ROTATION   523--514               ELOSS=-0.005834'
      SCRPT(45)=' ROTATION   505--514               ELOSS= 0.009188'
      SCRPT(46)=' ROTATION   514--505               ELOSS=-0.009188'
      SCRPT(47)=' ROTATION   615--624               ELOSS= 0.007423'
      SCRPT(48)=' ROTATION   624--615               ELOSS=-0.007423'
      SCRPT(49)=' ROTATION   725--734               ELOSS= 0.007433'
      SCRPT(50)=' ROTATION   734--725               ELOSS=-0.007433'
      SCRPT(51)=' ROTATION   606--615               ELOSS= 0.01193 '
      SCRPT(52)=' ROTATION   615--606               ELOSS=-0.01193 '
      SCRPT(53)=' ROTATION   716--725               ELOSS= 0.009695'
      SCRPT(54)=' ROTATION   725--716               ELOSS=-0.009695'
      SCRPT(55)=' ROTATION   707--716               ELOSS= 0.01463 '
      SCRPT(56)=' ROTATION   716--707               ELOSS=-0.01463 '
      SCRPT(57)=' ROTATION   212--221               ELOSS= 0.006869'
      SCRPT(58)=' ROTATION   221--212               ELOSS=-0.006869'
      SCRPT(59)=' ROTATION   322--331               ELOSS= 0.009785'
      SCRPT(60)=' ROTATION   331--322               ELOSS=-0.009785'
      SCRPT(61)=' ROTATION   432--441               ELOSS= 0.01309 '
      SCRPT(62)=' ROTATION   441--432               ELOSS=-0.01309 '
      SCRPT(63)=' ROTATION   313--322               ELOSS= 0.007938'
      SCRPT(64)=' ROTATION   322--313               ELOSS=-0.007938'
      SCRPT(65)=' ROTATION   423--432               ELOSS= 0.01019 '
      SCRPT(66)=' ROTATION   432--423               ELOSS=-0.01019 '
      SCRPT(67)=' ROTATION   533--542               ELOSS= 0.01316 '
      SCRPT(68)=' ROTATION   542--533               ELOSS=-0.01316 '
      SCRPT(69)=' ROTATION   643--652               ELOSS= 0.01635 '
      SCRPT(70)=' ROTATION   652--643               ELOSS=-0.01635 '
      SCRPT(71)=' ROTATION   414--423               ELOSS= 0.009364'
      SCRPT(72)=' ROTATION   423--414               ELOSS=-0.009364'
      SCRPT(73)=' ROTATION   524--533               ELOSS= 0.01088 '
      SCRPT(74)=' ROTATION   533--524               ELOSS=-0.01088 '
      SCRPT(75)=' ROTATION   634--643               ELOSS= 0.01336 '
      SCRPT(76)=' ROTATION   643--634               ELOSS=-0.01336 '
      SCRPT(77)=' ROTATION   515--524               ELOSS= 0.01111 '
      SCRPT(78)=' ROTATION   524--515               ELOSS=-0.01111 '
      SCRPT(79)=' ROTATION   625--634               ELOSS= 0.01191 '
      SCRPT(80)=' ROTATION   634--625               ELOSS=-0.01191 '
      SCRPT(81)=' ROTATION   616--625               ELOSS= 0.01310 '
      SCRPT(82)=' ROTATION   625--616               ELOSS=-0.01310 '
      SCRPT(83)=' ROTATION   818--827               ELOSS= 0.01754 '
      SCRPT(84)=' ROTATION   827--818               ELOSS=-0.01754 '
      SCRPT(85)=' ROTATION   000--111               ELOSS= 0.004604'
      SCRPT(86)=' ROTATION   111--000               ELOSS=-0.004604'
      SCRPT(87)=' ROTATION   101--212               ELOSS= 0.006906'
      SCRPT(88)=' ROTATION   212--101               ELOSS=-0.006906'
      SCRPT(89)=' ROTATION   202--313               ELOSS= 0.008950'
      SCRPT(90)=' ROTATION   313--202               ELOSS=-0.008950'
      SCRPT(91)=' ROTATION   303--414               ELOSS= 0.01092 '
      SCRPT(92)=' ROTATION   414--303               ELOSS=-0.01092 '
      SCRPT(93)=' ROTATION   404--515               ELOSS= 0.01297 '
      SCRPT(94)=' ROTATION   515--404               ELOSS=-0.01297 '
      SCRPT(95)=' ROTATION   505--616               ELOSS= 0.01511 '
      SCRPT(96)=' ROTATION   616--505               ELOSS=-0.01511 '
      SCRPT(97)=' ROTATION   606--717               ELOSS= 0.01733 '
      SCRPT(98)=' ROTATION   717--606               ELOSS=-0.01733 '
      SCRPT(99)=' ROTATION   707--818               ELOSS= 0.01958 '
      SCRPT(100)=' ROTATION   818--707               ELOSS=-0.01958 '
      SCRPT(101)=' ROTATION   808--919               ELOSS= 0.02184 '
      SCRPT(102)=' ROTATION   919--808               ELOSS=-0.02184 '
      SCRPT(103)=' ROTATION   110--221               ELOSS= 0.01147 '
      SCRPT(104)=' ROTATION   221--110               ELOSS=-0.01147 '
      SCRPT(105)=' ROTATION   211--322               ELOSS= 0.01378 '
      SCRPT(106)=' ROTATION   322--211               ELOSS=-0.01378 '
      SCRPT(107)=' ROTATION   312--423               ELOSS= 0.01575 '
      SCRPT(108)=' ROTATION   423--312               ELOSS=-0.01575 '
      SCRPT(109)=' ROTATION   413--524               ELOSS= 0.01745 '
      SCRPT(110)=' ROTATION   524--413               ELOSS=-0.01745 '
      SCRPT(111)=' ROTATION   514--625               ELOSS= 0.01903 '
      SCRPT(112)=' ROTATION   625--514               ELOSS=-0.01903 '
      SCRPT(113)=' ROTATION   615--726               ELOSS= 0.02067 '
      SCRPT(114)=' ROTATION   726--615               ELOSS=-0.02067 '
      SCRPT(115)=' ROTATION   716--827               ELOSS= 0.02249 '
      SCRPT(116)=' ROTATION   827--716               ELOSS=-0.02249 '
      SCRPT(117)=' ROTATION   220--331               ELOSS= 0.01848 '
      SCRPT(118)=' ROTATION   331--220               ELOSS=-0.01848 '
      SCRPT(119)=' ROTATION   321--432               ELOSS= 0.02112 '
      SCRPT(120)=' ROTATION   432--321               ELOSS=-0.02112 '
      SCRPT(121)=' ROTATION   422--533               ELOSS= 0.02333 '
      SCRPT(122)=' ROTATION   533--422               ELOSS=-0.02333 '
      SCRPT(123)=' ROTATION   523--634               ELOSS= 0.02510 '
      SCRPT(124)=' ROTATION   634--523               ELOSS=-0.02510 '
      SCRPT(125)=' ROTATION   624--735               ELOSS= 0.02652 '
      SCRPT(126)=' ROTATION   735--624               ELOSS=-0.02652 '
      SCRPT(127)=' ROTATION   725--836               ELOSS= 0.02774 '
      SCRPT(128)=' ROTATION   836--725               ELOSS=-0.02774 '
      SCRPT(129)=' ROTATION   330--441               ELOSS= 0.02513 '
      SCRPT(130)=' ROTATION   441--330               ELOSS=-0.02513 '
      SCRPT(131)=' ROTATION   431--542               ELOSS= 0.02805 '
      SCRPT(132)=' ROTATION   542--431               ELOSS=-0.02805 '
      SCRPT(133)=' ROTATION   532--643               ELOSS= 0.03074 '
      SCRPT(134)=' ROTATION   643--532               ELOSS=-0.03074 '
      SCRPT(135)=' ROTATION   633--744               ELOSS= 0.03300 '
      SCRPT(136)=' ROTATION   744--633               ELOSS=-0.03300 '
      SCRPT(137)=' ROTATION   734--845               ELOSS= 0.03476 '
      SCRPT(138)=' ROTATION   845--734               ELOSS=-0.03476 '
      SCRPT(139)=' ROTATION   440--551               ELOSS= 0.03148 '
      SCRPT(140)=' ROTATION   551--440               ELOSS=-0.03148 '
      SCRPT(141)=' ROTATION   541--652               ELOSS= 0.03450 '
      SCRPT(142)=' ROTATION   652--541               ELOSS=-0.03450 '
      SCRPT(143)=' ROTATION   642--753               ELOSS= 0.03743 '
      SCRPT(144)=' ROTATION   753--642               ELOSS=-0.03743 '
      SCRPT(145)=' ROTATION   743--854               ELOSS= 0.04016 '
      SCRPT(146)=' ROTATION   854--743               ELOSS=-0.04016 '
      SCRPT(147)=' ROTATION   550--661               ELOSS= 0.03757 '
      SCRPT(148)=' ROTATION   661--550               ELOSS=-0.03757 '
      SCRPT(149)=' ROTATION   651--762               ELOSS= 0.04061 '
      SCRPT(150)=' ROTATION   762--651               ELOSS=-0.04061 '
      SCRPT(151)=' ROTATION   752--863               ELOSS= 0.04361 '
      SCRPT(152)=' ROTATION   863--752               ELOSS=-0.04361 '
      SCRPT(153)=' ROTATION   111--220               ELOSS= 0.01228 '
      SCRPT(154)=' ROTATION   220--111               ELOSS=-0.01228 '
      SCRPT(155)=' ROTATION   221--330               ELOSS= 0.01866 '
      SCRPT(156)=' ROTATION   330--221               ELOSS=-0.01866 '
      SCRPT(157)=' ROTATION   331--440               ELOSS= 0.02516 '
      SCRPT(158)=' ROTATION   440--331               ELOSS=-0.02516 '
      SCRPT(159)=' ROTATION   441--550               ELOSS= 0.03149 '
      SCRPT(160)=' ROTATION   550--441               ELOSS=-0.03149 '
      SCRPT(161)=' ROTATION   551--660               ELOSS= 0.03757 '
      SCRPT(162)=' ROTATION   660--551               ELOSS=-0.03757 '
      SCRPT(163)=' ROTATION   661--770               ELOSS= 0.04336 '
      SCRPT(164)=' ROTATION   770--661               ELOSS=-0.04336 '
      SCRPT(165)=' ROTATION   212--321               ELOSS= 0.01645 '
      SCRPT(166)=' ROTATION   321--212               ELOSS=-0.01645 '
      SCRPT(167)=' ROTATION   322--431               ELOSS= 0.02201 '
      SCRPT(168)=' ROTATION   431--322               ELOSS=-0.02201 '
      SCRPT(169)=' ROTATION   432--541               ELOSS= 0.02825 '
      SCRPT(170)=' ROTATION   541--432               ELOSS=-0.02825 '
      SCRPT(171)=' ROTATION   542--651               ELOSS= 0.03453 '
      SCRPT(172)=' ROTATION   651--542               ELOSS=-0.03453 '
      SCRPT(173)=' ROTATION   652--761               ELOSS= 0.04062 '
      SCRPT(174)=' ROTATION   761--652               ELOSS=-0.04062 '
      SCRPT(175)=' ROTATION   313--422               ELOSS= 0.02151 '
      SCRPT(176)=' ROTATION   422--313               ELOSS=-0.02151 '
      SCRPT(177)=' ROTATION   423--532               ELOSS= 0.02584 '
      SCRPT(178)=' ROTATION   532--423               ELOSS=-0.02584 '
      SCRPT(179)=' ROTATION   533--642               ELOSS= 0.03147 '
      SCRPT(180)=' ROTATION   642--533               ELOSS=-0.03147 '
      SCRPT(181)=' ROTATION   643--752               ELOSS= 0.03758 '
      SCRPT(182)=' ROTATION   752--643               ELOSS=-0.03758 '
      SCRPT(183)=' ROTATION   414--523               ELOSS= 0.02748 '
      SCRPT(184)=' ROTATION   523--414               ELOSS=-0.02748 '
      SCRPT(185)=' ROTATION   524--633               ELOSS= 0.03042 '
      SCRPT(186)=' ROTATION   633--524               ELOSS=-0.03042 '
      SCRPT(187)=' ROTATION   634--743               ELOSS= 0.03500 '
      SCRPT(188)=' ROTATION   743--634               ELOSS=-0.03500 '
      SCRPT(189)=' ROTATION   515--624               ELOSS= 0.03424 '
      SCRPT(190)=' ROTATION   624--515               ELOSS=-0.03424 '
      SCRPT(191)=' ROTATION   625--734               ELOSS= 0.03589 '
      SCRPT(192)=' ROTATION   734--625               ELOSS=-0.03589 '
      SCRPT(193)=' ROTATION   616--725               ELOSS= 0.04155 '
      SCRPT(194)=' ROTATION   725--616               ELOSS=-0.04155 '
      SCRPT(195)=' ROTATION   111--202               ELOSS= 0.004086'
      SCRPT(196)=' ROTATION   202--111               ELOSS=-0.004086'
      SCRPT(197)=' ROTATION   212--303               ELOSS= 0.007100'
      SCRPT(198)=' ROTATION   303--212               ELOSS=-0.007100'
      SCRPT(199)=' ROTATION   313--404               ELOSS= 0.009891'
      SCRPT(200)=' ROTATION   404--313               ELOSS=-0.009891'
      SCRPT(201)=' ROTATION   414--505               ELOSS= 0.01246 '
      SCRPT(202)=' ROTATION   505--414               ELOSS=-0.01246 '
      SCRPT(203)=' ROTATION   515--606               ELOSS= 0.01489 '
      SCRPT(204)=' ROTATION   606--515               ELOSS=-0.01489 '
      SCRPT(205)=' ROTATION   616--707               ELOSS= 0.01723 '
      SCRPT(206)=' ROTATION   707--616               ELOSS=-0.01723 '
      SCRPT(207)=' ROTATION   717--808               ELOSS= 0.01954 '
      SCRPT(208)=' ROTATION   808--717               ELOSS=-0.01954 '
      SCRPT(209)=' ROTATION   818--909               ELOSS= 0.02182 '
      SCRPT(210)=' ROTATION   909--818               ELOSS=-0.02182 '
      SCRPT(211)=' ROTATION   221--312               ELOSS= 0.004769'
      SCRPT(212)=' ROTATION   312--221               ELOSS=-0.004769'
      SCRPT(213)=' ROTATION   322--413               ELOSS= 0.008579'
      SCRPT(214)=' ROTATION   413--322               ELOSS=-0.008579'
      SCRPT(215)=' ROTATION   423--514               ELOSS= 0.01229 '
      SCRPT(216)=' ROTATION   514--423               ELOSS=-0.01229 '
      SCRPT(217)=' ROTATION   524--615               ELOSS= 0.01571 '
      SCRPT(218)=' ROTATION   615--524               ELOSS=-0.01571 '
      SCRPT(219)=' ROTATION   625--716               ELOSS= 0.01876 '
      SCRPT(220)=' ROTATION   716--625               ELOSS=-0.01876 '
      SCRPT(221)=' ROTATION   726--817               ELOSS= 0.02148 '
      SCRPT(222)=' ROTATION   817--726               ELOSS=-0.02148 '
      SCRPT(223)=' ROTATION   827--918               ELOSS= 0.02399 '
      SCRPT(224)=' ROTATION   918--827               ELOSS=-0.02399 '
      SCRPT(225)=' ROTATION   634--725               ELOSS= 0.01654 '
      SCRPT(226)=' ROTATION   725--634               ELOSS=-0.01654 '
      SCRPT(227)=' VIBRATION V2 B# end SUPERELASTIC    ELOSS=-0.1977  '
      SCRPT(228)=' VIBRATION  V2 B# end                ELOSS= 0.1977  '
      SCRPT(229)=' VIBRATION  V1+V3 STRETCH          ELOSS= 0.4535  '
      SCRPT(230)=' VIBRATION  HARMONICS NV1+NV2+NV3  ELOSS= 0.919   '
      SCRPT(231)=' TRIPLET 3B1                       ELOSS=  7.04   '
      SCRPT(232)=' DIPOLE  1B1 (PART1)  F=0.003437   ELOSS=  6.8425 '
      SCRPT(233)=' DIPOLE  1B1 (PART2)  F=0.017166   ELOSS=  7.2675 '
      SCRPT(234)=' DIPOLE  1B1 (PART3)  F=0.019703   ELOSS=  7.7725 '
      SCRPT(235)=' DIPOLE  1B1 (PART4)  F=0.005486   ELOSS=  8.3575 '
      SCRPT(236)=' TRIPLET SUM 3A2 + 1A2 + 3A1       ELOSS=  9.1    '
      SCRPT(237)=' DIPOLE  1A1 (PART1)  F=0.006609   ELOSS=  8.91   '
      SCRPT(238)=' DIPOLE  1A1 (PART2)  F=0.030025   ELOSS=  9.43   '
      SCRPT(239)=' DIPOLE  1A1 (PART3)  F=0.030025   ELOSS=  9.95   '
      SCRPT(240)=' DIPOLE  1A1 (PART4)  F=0.006609   ELOSS= 10.47   '
      SCRPT(241)=' TRIPLET 3B1                       ELOSS=  9.95   '
      SCRPT(242)=' DIPOLE  1B1 (3pa1)   F=0.005200   ELOSS=  9.994  '
      SCRPT(243)=' DIPOLE  1A1 (3pb1)   F=0.014000   ELOSS= 10.172  '
      SCRPT(244)=' DIPOLE  3pa1+3pb1    F=0.010700   ELOSS= 10.39   '
      SCRPT(245)=' DIPOLE  3pa1+3pb1    F=0.009200   ELOSS= 10.575  '
      SCRPT(246)=' DIPOLE 3pa1+3pb1     F=0.006900   ELOSS= 10.78   '
      SCRPT(247)=' DIPOLE 3da1+3sa2+3db1F=0.021800   ELOSS= 11.01   '
      SCRPT(248)=' DIPOLE 3da1          F=0.023900   ELOSS= 11.122  '
      SCRPT(249)=' DIPOLE 4pa1          F=0.013991   ELOSS= 11.377  '
      SCRPT(250)=' DIPOLE 4pb1          F=0.009905   ELOSS= 11.525  '
      SCRPT(251)=' DIPOLE 4da1+4db1     F=0.023551   ELOSS= 11.75   '
      SCRPT(252)=' DIPOLE 5p            F=0.007967   ELOSS= 11.94   '
      SCRPT(253)=' DIPOLE 5d            F=0.018315   ELOSS= 12.08   '
      SCRPT(254)=' DIPOLE 6d            F=0.011109   ELOSS= 12.24   '
      SCRPT(255)=' DIPOLE 7d            F=0.008591   ELOSS= 12.34   '
      SCRPT(256)=' DIPOLE 8d+9d+10d     F=0.028137   ELOSS= 12.50   '
      SCRPT(257)=' SUM HIGHER TRIPLETS               ELOSS= 13.0    '
      SCRPT(258)=' DIPOLE NEUTRAL DISS  F=0.119100   ELOSS= 13.117  '
      SCRPT(259)=' DIPOLE NEUTRAL DISS  F=0.097947   ELOSS= 14.117  '
      SCRPT(260)=' DIPOLE NEUTRAL DISS  F=0.039540   ELOSS= 15.117  '
      SCRPT(261)=' DIPOLE NEUTRAL DISS  F=0.042191   ELOSS= 16.117  '
      SCRPT(262)=' DIPOLE NEUTRAL DISS  F=0.059428   ELOSS= 17.117  '
      SCRPT(263)=' DIPOLE NEUTRAL DISS  F=0.052795   ELOSS= 18.117  '
      SCRPT(264)=' DIPOLE NEUTRAL DISS  F=0.024912   ELOSS= 19.117  '
      SCRPT(265)=' DIPOLE NEUTRAL DISS  F=0.010524   ELOSS= 20.117  '
      SCRPT(266)=' DIPOLE NEUTRAL DISS  F=0.002614   ELOSS= 21.117  '
#  NULL COLLISIONS  
      SCRPTN(1)=' H2O: OH(X)  GROUND STATE DISSOCIATION             '
      SCRPTN(2)=' H2O: OH(A-X) 306-350 NM EMISSION                  ' 
      SCRPTN(3)=' H2O: H ALPHA 3-2 (BALMER)  656.3 NM.  EMISSION    '  
      SCRPTN(4)=' H2O: H ALPHA 2-1 (LYMAN)   121.6 NM.  EMISSION    '
# CALC POPULATION OF LOW ENERGY VIBRATIONAL STATE
      APOPV1=math.exp(EIN(211)/AKT)
      APOPGS=1.0
      APOPSUM=APOPGS+APOPV1
      APOPV1=APOPV1/APOPSUM
# KEEP APOPGS=1 TO ALLOW FOR EXCITATIONS FROM UPPER STATE   
#                                          
      DO 900 I=1,NSTEP                                               
      EN=EG(I)
      GAMMA1=(EMASS2+2.00*EN)/EMASS2
      GAMMA2=GAMMA1*GAMMA1
      BETA=math.sqrt(1.00-1.00/GAMMA2)
      BETA2=BETA*BETA
#
# ELASTIC
      IF(EN <= XEL(1):
) :
       QELA=YEL(1)*1.D-16
       GO TO 32
      # endIF                                             
      DO 30 J=2,NELA                                                    
      IF(EN <= XEL(J):
) GO TO 31                                         
   30 CONTINUE                                                          
      J=NELA    
   31 Y1=math.log(YEL(J))
      Y2=math.log(YEL(J-1)) 
      X1=math.log(XEL(J))
      X2=math.log(XEL(J-1))                                                 
      A=(Y1-Y2)/(X1-X2)                                                 
      B=(X2*Y1-X1*Y2)/(X2-X1)                                           
      QELA=math.exp(A*math.log(EN)+B)*1.0D-16    
# MOMENTUM TRANSFER ELASTIC
   32 IF(EN <= XMT(1)) :
       QMMT=YMT(1)*1.D-16
       GO TO 35
      # endIF
      DO 33 J=2,NMMT
      IF(EN <= XMT(J):
) GO TO 34
   33 CONTINUE
      J=NMMT
   34 Y1=math.log(YMT(J))
      Y2=math.log(YMT(J-1))
      X1=math.log(XMT(J))
      X2=math.log(XMT(J-1))  
      A=(Y1-Y2)/(X1-X2)
      B=(X2*Y1-X1*Y2)/(X2-X1)
      QMMT=math.exp(A*math.log(EN)+B)*1.D-16
# ANGULAR DISTRIBUTION def OKHRIMOVSKY
   35 IF(EN <= XEPS(1)) :
       EPS=YEPS(1)
       GO TO 38
      # endIF
      DO 36 J=2,NEPS
      IF(EN <= XEPS(J):
) GO TO 37
   36 CONTINUE
      J=NEPS
   37 A=(YEPS(J)-YEPS(J-1))/(XEPS(J)-XEPS(J-1))
      B=(XEPS(J-1)*YEPS(J)-XEPS(J)*YEPS(J-1))/(XEPS(J-1)-XEPS(J))
      EPS=A*EN+B
# CONVERT TO  (1.0-EPS)
   38 EPS=1.0-EPS
# USE ELASTIC                  
      Q(2,I)=QELA         
      PEQEL(2,I)=EPS
# CAN USE ISOTROPIC ELASTIC WITH FOLLOWING COMMENTED LINES
#     Q(2,I)=QMMT
#     PEQEL(2,I)=0.0
#      
# IONISATION CALCULATION                                                                 
   40 DO 41 J=1,NION
      PEQION(J,I)=0.0
   41 QION(J,I)=0.0
# IF ENERGY LESS THAN 5KEV CALCULATE TOTAL COUNTING AND GROSS IONISATION
      IF (EN > 5000.):
 GO TO 44 
      IF(EN <= EION(1):
) GO TO 90
      DO 42 J=2,NIONC
      IF(EN <= XION(J):
) GO TO 43
   42 CONTINUE
      J=NIONC
   43 A=(YIONC(J)-YIONC(J-1))/(XION(J)-XION(J-1))
      B=(XION(J-1)*YIONC(J)-XION(J)*YIONC(J-1))/(XION(J-1)-XION(J))
      QCOUNT=(A*EN+B)*1.D-16
      A=(YIONG(J)-YIONG(J-1))/(XION(J)-XION(J-1))
      B=(XION(J-1)*YIONG(J)-XION(J)*YIONG(J-1))/(XION(J-1)-XION(J))
      QGROSS=(A*EN+B)*1.D-16
      GO TO 45
# CALCULATE TOTAL COUNTING AND GROSS IONISATION FROM BORN BETHE FIT   
   44 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QCOUNT=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)
      QGROSS=QCOUNT*1.022
   45 CONTINUE
#
# IONISATION TO H2O+
      IF(EN > XION1(NION1):
) GO TO 52
      IF(EN <= XION1(1):
) GO TO 90
      DO 50 J=2,NION1
      IF(EN <= XION1(J):
) GO TO 51
   50 CONTINUE
      J=NION1
   51 A=(YION1(J)-YION1(J-1))/(XION1(J)-XION1(J-1))
      B=(XION1(J-1)*YION1(J)-XION1(J)*YION1(J-1))/(XION1(J-1)-XION1(J))
      QION(1,I)=(A*EN+B)*1.D-16
      GO TO 53
   52 QION(1,I)=QCOUNT*0.62996
# IONISATION TO OH+
   53 IF(EN > XION2(NION2)) GO TO 56
      IF(EN <= XION2(1):
) GO TO 90
      DO 54 J=2,NION2
      IF(EN <= XION2(J):
) GO TO 55
   54 CONTINUE
      J=NION2
   55 A=(YION2(J)-YION2(J-1))/(XION2(J)-XION2(J-1))
      B=(XION2(J-1)*YION2(J)-XION2(J)*YION2(J-1))/(XION2(J-1)-XION2(J))
      QION(2,I)=(A*EN+B)*1.D-16
      GO TO 57
   56 QION(2,I)=QCOUNT*0.19383
# IONISATION TO  H+
   57 IF(EN > XION3(NION3)) GO TO 60
      IF(EN <= XION3(1):
) GO TO 90
      DO 58 J=2,NION3
      IF(EN <= XION3(J):
) GO TO 59
   58 CONTINUE
      J=NION3
   59 A=(YION3(J)-YION3(J-1))/(XION3(J)-XION3(J-1))
      B=(XION3(J-1)*YION3(J)-XION3(J)*YION3(J-1))/(XION3(J-1)-XION3(J))
      QION(3,I)=(A*EN+B)*1.D-16
      GO TO 61
   60 QION(3,I)=QCOUNT*0.13275
# IONISATION TO  O+
   61 IF(EN > XION4(NION4)) GO TO 64
      IF(EN <= XION4(1):
) GO TO 90
      DO 62 J=2,NION4
      IF(EN <= XION4(J):
) GO TO 63
   62 CONTINUE
      J=NION4
   63 A=(YION4(J)-YION4(J-1))/(XION4(J)-XION4(J-1))
      B=(XION4(J-1)*YION4(J)-XION4(J)*YION4(J-1))/(XION4(J-1)-XION4(J))
      QION(4,I)=(A*EN+B)*1.D-16
      GO TO 65
   64 QION(4,I)=QCOUNT*0.02129
# IONISATION TO  H2+
   65 IF(EN > XION5(NION5)) GO TO 68
      IF(EN <= XION5(1):
) GO TO 90
      DO 66 J=2,NION5
      IF(EN <= XION5(J):
) GO TO 67
   66 CONTINUE
      J=NION5
   67 A=(YION5(J)-YION5(J-1))/(XION5(J)-XION5(J-1))
      B=(XION5(J-1)*YION5(J)-XION5(J)*YION5(J-1))/(XION5(J-1)-XION5(J))
      QION(5,I)=(A*EN+B)*1.D-16
      GO TO 73
   68 QION(5,I)=QCOUNT*0.00035
# IONISATION TO  H+ + OH+
   73 IF(EN > XION6(NION6)) GO TO 76
      IF(EN <= XION6(1):
) GO TO 90
      DO 74 J=2,NION6
      IF(EN <= XION6(J):
) GO TO 75
   74 CONTINUE
      J=NION6
   75 A=(YION6(J)-YION6(J-1))/(XION6(J)-XION6(J-1))
      B=(XION6(J-1)*YION6(J)-XION6(J)*YION6(J-1))/(XION6(J-1)-XION6(J))
      QION(6,I)=(A*EN+B)*1.D-16
      GO TO 77
   76 QION(6,I)=QCOUNT*0.01395
# IONISATION TO  H+ + O+
   77 IF(EN > XION7(NION7)) GO TO 80
      IF(EN <= XION7(1):
) GO TO 90
      DO 78 J=2,NION7
      IF(EN <= XION7(J):
) GO TO 79
   78 CONTINUE
      J=NION7
   79 A=(YION7(J)-YION7(J-1))/(XION7(J)-XION7(J-1))
      B=(XION7(J-1)*YION7(J)-XION7(J)*YION7(J-1))/(XION7(J-1)-XION7(J))
      QION(7,I)=(A*EN+B)*1.D-16
      GO TO 81
   80 QION(7,I)=QCOUNT*0.00705
# IONISATION TO  O++
   81 IF(EN > XION8(NION8)) GO TO 84
      IF(EN <= XION8(1):
) GO TO 90
      DO 82 J=2,NION8
      IF(EN <= XION8(J):
) GO TO 83
   82 CONTINUE
      J=NION8
   83 A=(YION8(J)-YION8(J-1))/(XION8(J)-XION8(J-1))
      B=(XION8(J-1)*YION8(J)-XION8(J)*YION8(J-1))/(XION8(J-1)-XION8(J))
      QION(8,I)=(A*EN+B)*1.D-16
      GO TO 85
   84 QION(8,I)=QCOUNT*0.00085
# IONISATION TO OXYGEN K-SHELL
   85 IF(EN <= XKSH(1)) GO TO 90
      DO 86 J=2,NKSH 
      IF(EN <= XKSH(J):
) GO TO 87
   86 CONTINUE
      J=NKSH
   87 A=(YKSH(J)-YKSH(J-1))/(XKSH(J)-XKSH(J-1))
      B=(XKSH(J-1)*YKSH(J)-XKSH(J)*YKSH(J-1))/(XKSH(J-1)-XKSH(J))
      QION(9,I)=(A*EN+B)*1.D-16
#
   90 DO 98 J=1,NION     
      IF(EN <= (2.0*EION(J):
)) GO TO 98
      PEQION(J,I)=PEQEL(2,(I-IOFFION(J)))
   98 CONTINUE
#
#  ATTACHMENT    H-
      Q(4,I)=0.0                 
      QATT(1,I)=0.0                                       
      IF(EN <= XATT1(1):
 or EN >= XATT1(NATT1)) GO TO 103               
      DO 101  J=2,NATT1                                                
      IF(EN <= XATT1(J):
) GO TO 102                                      
  101 CONTINUE                                                          
      J=NATT1     
  102 YJ=math.log(YATT1(J))
      YJ1=math.log(YATT1(J-1))
      XJ=math.log(XATT1(J))
      XJ1=math.log(XATT1(J-1))                                             
      A=(YJ-YJ1)/(XJ-XJ1)                     
      B=(XJ1*YJ-XJ*YJ1)/(XJ1-XJ) 
      QATT(1,I)=math.exp(A*math.log(EN)+B)*1.D-21         
#  ATTACHMENT    O-
  103 QATT(2,I)=0.0
      IF(EN <= XATT2(1):
 or EN >= XATT2(NATT2)) GO TO 106               
      DO 104  J=2,NATT2                                                
      IF(EN <= XATT2(J):
) GO TO 105                                      
  104 CONTINUE                                                          
      J=NATT2     
  105 YJ=math.log(YATT2(J))
      YJ1=math.log(YATT2(J-1))
      XJ=math.log(XATT2(J))
      XJ1=math.log(XATT2(J-1))                                             
      A=(YJ-YJ1)/(XJ-XJ1)                     
      B=(XJ1*YJ-XJ*YJ1)/(XJ1-XJ) 
      QATT(2,I)=math.exp(A*math.log(EN)+B)*1.D-21  
#  ATTACHMENT    OH-
  106 QATT(3,I)=0.0
      IF(EN <= XATT3(1):
 or EN >= XATT3(NATT3)) GO TO 109               
      DO 107  J=2,NATT3                                                
      IF(EN <= XATT3(J):
) GO TO 108                                      
  107 CONTINUE                                                          
      J=NATT3     
  108 YJ=math.log(YATT3(J))
      YJ1=math.log(YATT3(J-1))
      XJ=math.log(XATT3(J))
      XJ1=math.log(XATT3(J-1))                                             
      A=(YJ-YJ1)/(XJ-XJ1)                     
      B=(XJ1*YJ-XJ*YJ1)/(XJ1-XJ) 
      QATT(3,I)=math.exp(A*math.log(EN)+B)*1.D-21  
#   
  109 Q(4,I)=0.0                                             
      Q(5,I)=0.0                                                        
      Q(6,I)=0.0 
#
#  ZERO INELASTIC ARRAYS
      DO 130 L=1,NIN
      QIN(L,I)=0.00
      PEQIN(L,I)=0.00
  130 CONTINUE
# ----------------------------------------------------------------      
#  DIPOLE BORN ROTATIONAL STATES                                 
#----------------------------------------------------------------
      ENRT=math.sqrt(EN)
#      
#  SUPER ELASTIC ROTATIONAL COLLISIONS
      DO 140 L=2,210,2
      AL=AJIN(L)
      L2=L/2
      QIN(L,I)=DBK*SALPHA[L2]*PJ(IMAP(L))*math.log((ENRT+math.sqrt(EN-EIN(L)))/
     /(math.sqrt(EN-EIN(L))-ENRT))/((2.0*AL+1.0)*EN)*AMPROT       
# IF ENERGY GT 200OEV SET ROTATION TO 0.0 AND USE AS MOD ELASTIC
      IF(EN > 2000.0):
 :
       QIN(L,I)=0.0
       GO TO 140
      # endIF
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(L))
      IF(EPOINT > ENRTS(NRTANG):
) :
       WRITE(6,922) EPOINT,ENRTS(NRTANG),EN
  922  FORMAT(' ENERGY ERROR IN ROT SUPER ANG CALC  EPOINT=',D12.4,' ENR
     /TS=',D12.4,' EN=',D12.4)
      # endIF
      DO 131 M=1,NRTANG
      IF(EPOINT <= ENRTS(M):
) GO TO 132 
  131 CONTINUE
      M=NRTANG
  132 A=(YEPSR(M)-YEPSR(M-1))/(ENRTS(M)-ENRTS(M-1))
      B=(ENRTS(M-1)*YEPSR(M)-ENRTS(M)*YEPSR(M-1))/(ENRTS(M-1)-ENRTS(M))
      EPSIL=A*EPOINT+B
      PEQIN(L,I)=1.0-EPSIL
# CALCULATE USED MT XSEC
      A=(YMTRT(M)-YMTRT(M-1))/(ENRTS(M)-ENRTS(M-1))
      B=(ENRTS(M-1)*YMTRT(M)-ENRTS(M)*YMTRT(M-1))/(ENRTS(M-1)-ENRTS(M))
      XSECDUM(L)=A*EPOINT+B
      XSECDUM(L)=XSECDUM(L)*QIN(L,I)
  140 CONTINUE
# 
# ROTATIONAL COLLISIONS
      DO 150 L=1,209,2
      QIN(L,I)=0.0
      IF(EN <= EIN(L):
) GO TO 150
      AL=AJIN(L)
      L2=(L+1)/2
      QIN(L,I)=DBK*SALPHA[L2]*PJ(IMAP(L))*math.log((ENRT+math.sqrt(EN-EIN(L)))/
     /(ENRT-math.sqrt(EN-EIN(L))))/((2.0*AL+1.0)*EN)*AMPROT       
# IF ENERGY GT 2000EV SET TO 0.0 AND USE MOD ELASTIC
      IF(EN > 2000.0):
 :
       QIN(L,I)=0.0
       GO TO 150
      # endIF
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(L))
      IF(EPOINT > ENROT(NRTANG):
) :
       WRITE(6,923) EPOINT,ENROT(NRTANG),EN
  923  FORMAT(' ENERGY ERROR IN ROT ANG CALC  EPOINT=',D12.4,' ENROT=',
     /D12.4,' EN=',D12.4)
      # endIF
      DO 141 M=1,NRTANG
      IF(EPOINT <= ENROT(M):
) GO TO 142 
  141 CONTINUE
      M=NRTANG
  142 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(L,I)=1.0-EPSIL
# CALCULATE USED MT XSEC
      A=(YMTRT(M)-YMTRT(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YMTRT(M)-ENROT(M)*YMTRT(M-1))/(ENROT(M-1)-ENROT(M))
      XSECDUM(L)=A*EPOINT+B
      XSECDUM(L)=XSECDUM(L)*QIN(L,I)
  150 CONTINUE  
# CALCULATE TOTAL AND MT SUMS OVER ROTATIONS
#     QSUPTT=0.0
#     QSUPMT=0.0
#     DO 160 L=2,210,2
#     QSUPTT=QSUPTT+QIN(L,I)
#     QSUPMT=QSUPMT+XSECDUM(L)
# 160 CONTINUE
#     QTOTTT=0.0
#     QTOTMT=0.0
#     DO 161 L=1,209,2
#     QTOTTT=QTOTTT+QIN(L,I)
#     QTOTMT=QTOTMT+XSECDUM(L)
#     QTSMT=QSUPMT+QTOTMT
#     QTSEL=QSUPTT+QTOTTT
# 161 CONTINUE
#     WRITE(6,944) EN,QSUPTT,QSUPMT,QTOTTT,QTOTMT,QTSEL,QTSMT
# 944 FORMAT(' CROSS SECTION ROTATIONAL SUMS AT ENERGY =',D12.4,/,
#    /' TOTAL SUPER =',D12.4,'  MT SUPER =',D12.4,/,' TOTAL ROTAT =',
#    /D12.4,'  MT ROTAT =',D12.4,/,' TOT ROT=',D12.4,' TOT ROT MT=',
#    /D12.4)
# 
# VIBRATION B# end V2 SUPERELASTIC (DIPOLE 1/E FALL OFF ABOVE ENERGY OF
# XVIB1(NVIB1) EV ) 
      QIN(211,I)=0.0
      IF(EN <= 0.0):
 GO TO 180
      IF((EN+EIN(212):
) > XVIB1(NVIB1)) GO TO 173
      DO 171 J=2,NVIB1
      IF((EN+EIN(212):
) <= XVIB1(J)) GO TO 172
  171 CONTINUE
      J=NVIB1
  172 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J))
      QIN(211,I)=(EN+EIN(212))*(A*(EN+EIN(212))+B)/EN
      GOTO 174
  173 QIN(211,I)=YVIB1(NVIB1)*(XVIB1(NVIB1)/(EN+EIN(212)))/EN
  174 QIN(211,I)=QIN(211,I)*APOPV1*1.D-16        
      PEQIN(211,I)=PEQEL(2,(I-IOFFN(211)))
  180 CONTINUE
#  VIBRATION   B# end  V2 (DIPOLE 1/E FALL OFF ABOVE ENERGY OF
#  XVIB1(NVIB1) EV )
      QIN(212,I)=0.0                                                 
      IF(EN <= EIN(212):
) GO TO 210   
      IF(EN > XVIB1(NVIB1):
) GO TO 203                                
      DO 201 J=2,NVIB1                                                  
      IF(EN <= XVIB1(J):
) GO TO 202                                      
  201 CONTINUE                                                          
      J=NVIB1                                                           
  202 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J)) 
      QIN(212,I)=(A*EN+B)       
      GO TO 204
  203 QIN(212,I)=YVIB1(NVIB1)*(XVIB1(NVIB1)/EN)  
  204 QIN(212,I)=QIN(212,I)*APOPGS*1.D-16 
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(212))
      IF(EPOINT > 500.):
 GO TO 2043
      DO 2041 M=1,NRTANG
      IF(EPOINT <= ENROT(M):
) GO TO 2042
 2041 CONTINUE
      M=NRTANG
 2042 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(212,I)=1.0-EPSIL
      GO TO 210
 2043 PEQIN(212,I)=PEQEL(2,(I-IOFFN(212)))
  210 CONTINUE      
#  VIBRATION STRETCH V1+V3                                           
      QIN(213,I)=0.0                                                    
      IF(EN <= EIN(213):
) GO TO 220                    
      IF(EN > XVIB2(NVIB2):
) GO TO 213                  
      DO 211 J=2,NVIB2                                                  
      IF(EN <= XVIB2(J):
) GO TO 212                                      
  211 CONTINUE                                                          
      J=NVIB2                                                           
  212 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J)) 
      QIN(213,I)=(A*EN+B)*1.D-16 
      GO TO 214
  213 QIN(213,I)=YVIB2(NVIB2)*(XVIB2(NVIB2)/EN)**1.5*1.D-16   
  214 CONTINUE 
      IF(EN < 1.5):
 :
# USE FLAT ANGULAR DISTRIBUTION AT THRESHOLD FOR STRETCH TRANSITION
       PEQIN(213,I)=0.0
       GO TO 220
      # endIF    
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(213))
      IF(EPOINT > 500.):
 GO TO 2143
      DO 2141 M=1,NRTANG
      IF(EPOINT <= ENROT(M):
) GO TO 2142
 2141 CONTINUE
      M=NRTANG
 2142 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(213,I)=1.0-EPSIL
      GO TO 220
 2143 PEQIN(213,I)=PEQEL(2,(I-IOFFN(213)))
  220 CONTINUE                                                          
#  VIBRATION HARMONICS NV2 + NV1 +NV3                                                                     
      QIN(214,I)=0.0                                                    
      IF(EN <= EIN(214):
) GO TO 230               
      IF(EN > XVIB3(NVIB3):
) GO TO 223                       
      DO 221 J=2,NVIB3                                                  
      IF(EN <= XVIB3(J):
) GO TO 222                                      
  221 CONTINUE                                                          
      J=NVIB3                                                           
  222 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J)) 
      QIN(214,I)=(A*EN+B)*1.D-16 
      GO TO 224
  223 QIN(214,I)=YVIB3(NVIB3)*(XVIB3(NVIB3)/EN)**1.5*1.D-16
  224 CONTINUE
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(214))
      IF(EPOINT > 500.):
 GO TO 2243
      DO 2241 M=1,NRTANG
      IF(EPOINT <= ENROT(M):
) GO TO 2242
 2241 CONTINUE
      M=NRTANG
 2242 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(214,I)=1.0-EPSIL
      GO TO 230
 2243 PEQIN(214,I)=PEQEL(2,(I-IOFFN(214)))
  230 CONTINUE    
# TRIPLET 3B1                                    
      QIN(215,I)=0.0                                                    
      IF(EN <= EIN(215):
) GO TO 310   
      IF(EN > XTRP1(NTRP1):
) GO TO 302                                  
      DO 300 J=2,NTRP1                                           
      IF(EN <= XTRP1(J):
) GO TO 301                                      
  300 CONTINUE                                                          
      J=NTRP1                                                          
  301 Y1=math.log(YTRP1(J))
      Y2=math.log(YTRP1(J-1))
      X1=math.log(XTRP1(J))
      X2=math.log(XTRP1(J-1))
      A=(Y1-Y2)/(X1-X2)
      B=(X2*Y1-X1*Y2)/(X2-X1)                   
      QIN(215,I)=math.exp(A*math.log(EN)+B)*1.D-16            
      GO TO 303
  302 QIN(215,I)=YTRP1(NTRP1)*(XTRP1(NTRP1)/EN)**1.5*1.D-16          
  303 IF(EN <= (2.0*EIN(215))) GO TO 310
      PEQIN(215,I)=PEQEL(2,(I-IOFFN(215)))
# EXCITATION  1B1 (7.48EV LEVEL SPLIT INTO 4 GROUPS)
  310 IF(EN <= EIN(216)) GO TO 311
      QIN(216,I)=0.003437/(EIN(216)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(216)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(216))
      IF(QIN(216,I):
 < 0.0) QIN(216,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(216))
      IF(EPOINT > 500.):
 GO TO 3103
      DO 3101 M=1,NRTANG
      IF(EPOINT <= ENROT(M):
) GO TO 3102
 3101 CONTINUE
      M=NRTANG
 3102 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(216,I)=1.0-EPSIL
      GO TO 311
 3103 PEQIN(216,I)=PEQEL(2,(I-IOFFN(216)))
# EXCITATION  1B1 (7.48EV LEVEL SPLIT INTO 4 GROUPS)
  311 IF(EN <= EIN(217)) GO TO 312
      QIN(217,I)=0.017166/(EIN(217)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(217)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(217))
      IF(QIN(217,I):
 < 0.0) QIN(217,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(217))
      IF(EPOINT > 500.):
 GO TO 3113
      DO 3111 M=1,NRTANG
      IF(EPOINT <= ENROT(M):
) GO TO 3112
 3111 CONTINUE
      M=NRTANG
 3112 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(217,I)=1.0-EPSIL
      GO TO 312
 3113 PEQIN(217,I)=PEQEL(2,(I-IOFFN(217)))
# EXCITATION  1B1 (7.48EV LEVEL SPLIT INTO 4 GROUPS)
  312 IF(EN <= EIN(218)) GO TO 313
      QIN(218,I)=0.019703/(EIN(218)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(218)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(218))
      IF(QIN(218,I):
 < 0.0) QIN(218,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(218))
      IF(EPOINT > 500.):
 GO TO 3123
      DO 3121 M=1,NRTANG
      IF(EPOINT <= ENROT(M):
) GO TO 3122
 3121 CONTINUE
      M=NRTANG
 3122 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(218,I)=1.0-EPSIL
      GO TO 313
 3123 PEQIN(218,I)=PEQEL(2,(I-IOFFN(218)))
# EXCITATION  1B1 (7.48EV LEVEL SPLIT INTO 4 GROUPS)
  313 IF(EN <= EIN(219)) GO TO 314
      QIN(219,I)=0.005486/(EIN(219)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(219)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(219))
      IF(QIN(219,I):
 < 0.0) QIN(219,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(219))
      IF(EPOINT > 500.):
 GO TO 3133
      DO 3131 M=1,NRTANG
      IF(EPOINT <= ENROT(M):
) GO TO 3132
 3131 CONTINUE
      M=NRTANG
 3132 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(219,I)=1.0-EPSIL
      GO TO 314
 3133 PEQIN(219,I)=PEQEL(2,(I-IOFFN(219)))
# TRIPLET ( 3A2 + 1A2 + 3A1) 9.1EV                                   
  314 QIN(220,I)=0.0                                                    
      IF(EN <= EIN(220):
) GO TO 322   
      IF(EN > XTRP2(NTRP2):
) GO TO 317                                 
      DO 315 J=2,NTRP2                                           
      IF(EN <= XTRP2(J):
) GO TO 316                                      
  315 CONTINUE                                                          
      J=NTRP2                                                          
  316 Y1=math.log(YTRP2(J))
      Y2=math.log(YTRP2(J-1))
      X1=math.log(XTRP2(J))
      X2=math.log(XTRP2(J-1))
      A=(Y1-Y2)/(X1-X2)
      B=(X2*Y1-X1*Y2)/(X2-X1)
      QIN(220,I)=math.exp(A*math.log(EN)+B)*1.D-16                 
      GO TO 318
  317 QIN(220,I)=YTRP2(NTRP2)*(XTRP2(NTRP2)/EN)**1.5*1.D-16          
  318 IF(EN <= (2.0*EIN(220))) GO TO 322
      PEQIN(220,I)=PEQEL(2,(I-IOFFN(220)))             
# EXCITATION  1A1 (9.69EV LEVEL SPLIT INTO 4 GROUPS)
  322 IF(EN <= EIN(221)) GO TO 323
      QIN(221,I)=0.006609/(EIN(221)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(221)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(221))
      IF(QIN(221,I):
 < 0.0) QIN(221,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(221))
      IF(EPOINT > 500.):
 GO TO 3223
      DO 3221 M=1,NRTANG
      IF(EPOINT <= ENROT(M):
) GO TO 3222
 3221 CONTINUE
      M=NRTANG
 3222 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(221,I)=1.0-EPSIL
      GO TO 323
 3223 PEQIN(221,I)=PEQEL(2,(I-IOFFN(221)))
# EXCITATION  1A1 (9.69EV LEVEL SPLIT INTO 4 GROUPS)
  323 IF(EN <= EIN(222)) GO TO 324
      QIN(222,I)=0.030025/(EIN(222)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(222)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(222))
      IF(QIN(222,I):
 < 0.0) QIN(222,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(222))
      IF(EPOINT > 500.):
 GO TO 3233
      DO 3231 M=1,NRTANG
      IF(EPOINT <= ENROT(M):
) GO TO 3232
 3231 CONTINUE
      M=NRTANG
 3232 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(222,I)=1.0-EPSIL
      GO TO 324
 3233 PEQIN(222,I)=PEQEL(2,(I-IOFFN(222)))
# EXCITATION  1A1 (9.69EV LEVEL SPLIT INTO 4 GROUPS)
  324 IF(EN <= EIN(223)) GO TO 325
      QIN(223,I)=0.030025/(EIN(223)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(223)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(223))
      IF(QIN(223,I):
 < 0.0) QIN(223,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(223))
      IF(EPOINT > 500.):
 GO TO 3243
      DO 3241 M=1,NRTANG
      IF(EPOINT <= ENROT(M):
) GO TO 3242
 3241 CONTINUE
      M=NRTANG
 3242 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(223,I)=1.0-EPSIL
      GO TO 325
 3243 PEQIN(223,I)=PEQEL(2,(I-IOFFN(223)))
# EXCITATION  1A1 (9.69EV LEVEL SPLIT INTO 4 GROUPS)
  325 IF(EN <= EIN(224)) GO TO 326
      QIN(224,I)=0.006609/(EIN(224)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(224)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(224))
      IF(QIN(224,I):
 < 0.0) QIN(224,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(224))
      IF(EPOINT > 500.):
 GO TO 3253
      DO 3251 M=1,NRTANG
      IF(EPOINT <= ENROT(M):
) GO TO 3252
 3251 CONTINUE
      M=NRTANG
 3252 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(224,I)=1.0-EPSIL
      GO TO 326
 3253 PEQIN(224,I)=PEQEL(2,(I-IOFFN(224)))
# TRIPLET 3B1 9.95 EV                                                
  326 QIN(225,I)=0.0                                                    
      IF(EN <= EIN(225):
) GO TO 332     
      IF(EN > XTRP3(NTRP3):
) GO TO 329                                 
      DO 327 J=2,NTRP3                                           
      IF(EN <= XTRP3(J):
) GO TO 328                                      
  327 CONTINUE                                                          
      J=NTRP3                                                          
  328 Y1=math.log(YTRP3(J))
      Y2=math.log(YTRP3(J-1))
      X1=math.log(XTRP3(J))
      X2=math.log(XTRP3(J-1)) 
      A=(Y1-Y2)/(X1-X2)                     
      B=(X2*Y1-X1*Y2)/(X2-X1)
      QIN(225,I)=math.exp(A*math.log(EN)+B)*1.D-16              
      GO TO 330
  329 QIN(225,I)=YTRP3(NTRP3)*(XTRP3(NTRP3)/EN)**1.5*1.D-16          
  330 IF(EN <= (2.0*EIN(225))) GO TO 332
      PEQIN(225,I)=PEQEL(2,(I-IOFFN(225)))
# EXCITATION   1B1 (3pa1)     9.994 EV                      
  332 IF(EN <= EIN(226)) GO TO 333
      QIN(226,I)=0.005200/(EIN(226)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(226)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(226))
      IF(QIN(226,I):
 < 0.0) QIN(226,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(226))
      IF(EPOINT > 500.):
 GO TO 3323
      DO 3321 M=1,NRTANG
      IF(EPOINT <= ENROT(M):
) GO TO 3322
 3321 CONTINUE
      M=NRTANG
 3322 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(226,I)=1.0-EPSIL
      GO TO 333
 3323 PEQIN(226,I)=PEQEL(2,(I-IOFFN(226)))
# EXCITATION   1A1 (3pa1+3pb1)  10.172 EV                      
  333 IF(EN <= EIN(227)) GO TO 334
      QIN(227,I)=0.014000/(EIN(227)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(227)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(227))
      IF(QIN(227,I):
 < 0.0) QIN(227,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(227))
      IF(EPOINT > 500.):
 GO TO 3333
      DO 3331 M=1,NRTANG
      IF(EPOINT <= ENROT(M):
) GO TO 3332
 3331 CONTINUE
      M=NRTANG
 3332 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(227,I)=1.0-EPSIL
      GO TO 334
 3333 PEQIN(227,I)=PEQEL(2,(I-IOFFN(227)))
# EXCITATION    3pa1+3pb1       10.39 EV                      
  334 IF(EN <= EIN(228)) GO TO 335
      QIN(228,I)=0.010700/(EIN(228)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(228)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(228))
      IF(QIN(228,I):
 < 0.0) QIN(228,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(228))
      IF(EPOINT > 500.):
 GO TO 3343
      DO 3341 M=1,NRTANG
      IF(EPOINT <= ENROT(M):
) GO TO 3342
 3341 CONTINUE
      M=NRTANG
 3342 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(228,I)=1.0-EPSIL
      GO TO 335
 3343 PEQIN(228,I)=PEQEL(2,(I-IOFFN(228)))
# EXCITATION    3pa1+3pb1       10.575EV                      
  335 IF(EN <= EIN(229)) GO TO 336
      QIN(229,I)=0.009200/(EIN(229)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(229)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(229))
      IF(QIN(229,I):
 < 0.0) QIN(229,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(229))
      IF(EPOINT > 500.):
 GO TO 3353
      DO 3351 M=1,NRTANG
      IF(EPOINT <= ENROT(M):
) GO TO 3352
 3351 CONTINUE
      M=NRTANG
 3352 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(229,I)=1.0-EPSIL
      GO TO 336
 3353 PEQIN(229,I)=PEQEL(2,(I-IOFFN(229)))
# EXCITATION    3pa1+3pb1       10.78 EV                      
  336 IF(EN <= EIN(230)) GO TO 337
      QIN(230,I)=0.006900/(EIN(230)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(230)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(230))
      IF(QIN(230,I):
 < 0.0) QIN(230,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(230))
      IF(EPOINT > 500.):
 GO TO 3363
      DO 3361 M=1,NRTANG
      IF(EPOINT <= ENROT(M):
) GO TO 3362
 3361 CONTINUE
      M=NRTANG
 3362 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(230,I)=1.0-EPSIL
      GO TO 337
 3363 PEQIN(230,I)=PEQEL(2,(I-IOFFN(230)))
# EXCITATION    3da1+3da2+3db1  11.01 EV                      
  337 IF(EN <= EIN(231)) GO TO 338
      QIN(231,I)=0.021800/(EIN(231)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(231)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(231))
      IF(QIN(231,I):
 < 0.0) QIN(231,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(231))
      IF(EPOINT > 500.):
 GO TO 3373
      DO 3371 M=1,NRTANG
      IF(EPOINT <= ENROT(M):
) GO TO 3372
 3371 CONTINUE
      M=NRTANG
 3372 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(231,I)=1.0-EPSIL
      GO TO 338
 3373 PEQIN(231,I)=PEQEL(2,(I-IOFFN(231)))
# EXCITATION    3da1  11.122 EV                     
  338 IF(EN <= EIN(232)) GO TO 339
      QIN(232,I)=0.023900/(EIN(232)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(232)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(232))
      IF(QIN(232,I):
 < 0.0) QIN(232,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(232))
      IF(EPOINT > 500.):
 GO TO 3383
      DO 3381 M=1,NRTANG
      IF(EPOINT <= ENROT(M):
) GO TO 3382
 3381 CONTINUE
      M=NRTANG
 3382 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(232,I)=1.0-EPSIL
      GO TO 339
 3383 PEQIN(232,I)=PEQEL(2,(I-IOFFN(232)))
# EXCITATION    4pa1  11.377 EV                     
  339 IF(EN <= EIN(233)) GO TO 340
      QIN(233,I)=0.013991/(EIN(233)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(233)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(233))
      IF(QIN(233,I):
 < 0.0) QIN(233,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(233))
      IF(EPOINT > 500.):
 GO TO 3393
      DO 3391 M=1,NRTANG
      IF(EPOINT <= ENROT(M):
) GO TO 3392
 3391 CONTINUE
      M=NRTANG
 3392 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(233,I)=1.0-EPSIL
      GO TO 340
 3393 PEQIN(233,I)=PEQEL(2,(I-IOFFN(233)))
# EXCITATION    4pb1  11.525 EV                     
  340 IF(EN <= EIN(234)) GO TO 341
      QIN(234,I)=0.009905/(EIN(234)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(234)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(234))
      IF(QIN(234,I):
 < 0.0) QIN(234,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(234))
      IF(EPOINT > 500.):
 GO TO 3403
      DO 3401 M=1,NRTANG
      IF(EPOINT <= ENROT(M):
) GO TO 3402
 3401 CONTINUE
      M=NRTANG
 3402 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(234,I)=1.0-EPSIL
      GO TO 341
 3403 PEQIN(234,I)=PEQEL(2,(I-IOFFN(234)))
# EXCITATION    4da1+4db1  11.75 EV                 
  341 IF(EN <= EIN(235)) GO TO 342
      QIN(235,I)=0.023551/(EIN(235)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(235)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(235))
      IF(QIN(235,I):
 < 0.0) QIN(235,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(235))
      IF(EPOINT > 500.):
 GO TO 3413
      DO 3411 M=1,NRTANG
      IF(EPOINT <= ENROT(M):
) GO TO 3412
 3411 CONTINUE
      M=NRTANG
 3412 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(235,I)=1.0-EPSIL
      GO TO 342
 3413 PEQIN(235,I)=PEQEL(2,(I-IOFFN(235)))
# EXCITATION    5p         11.94 EV                 
  342 IF(EN <= EIN(236)) GO TO 343
      QIN(236,I)=0.007967/(EIN(236)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(236)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(236))
      IF(QIN(236,I):
 < 0.0) QIN(236,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(236))
      IF(EPOINT > 500.):
 GO TO 3423
      DO 3421 M=1,NRTANG
      IF(EPOINT <= ENROT(M):
) GO TO 3422
 3421 CONTINUE
      M=NRTANG
 3422 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(236,I)=1.0-EPSIL
      GO TO 343
 3423 PEQIN(236,I)=PEQEL(2,(I-IOFFN(236)))
# EXCITATION    5d         12.08 EV                 
  343 IF(EN <= EIN(237)) GO TO 344
      QIN(237,I)=0.018315/(EIN(237)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(237)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(237))
      IF(QIN(237,I):
 < 0.0) QIN(237,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(237))
      IF(EPOINT > 500.):
 GO TO 3433
      DO 3431 M=1,NRTANG
      IF(EPOINT <= ENROT(M):
) GO TO 3432
 3431 CONTINUE
      M=NRTANG
 3432 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(237,I)=1.0-EPSIL
      GO TO 344
 3433 PEQIN(237,I)=PEQEL(2,(I-IOFFN(237)))
# EXCITATION    6d         12.24 EV                 
  344 IF(EN <= EIN(238)) GO TO 345
      QIN(238,I)=0.011109/(EIN(238)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(238)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(238))
      IF(QIN(238,I):
 < 0.0) QIN(238,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(238))
      IF(EPOINT > 500.):
 GO TO 3443
      DO 3441 M=1,NRTANG
      IF(EPOINT <= ENROT(M):
) GO TO 3442
 3441 CONTINUE
      M=NRTANG
 3442 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(238,I)=1.0-EPSIL
      GO TO 345
 3443 PEQIN(238,I)=PEQEL(2,(I-IOFFN(238)))
# EXCITATION    7d         12.34 EV                 
  345 IF(EN <= EIN(239)) GO TO 346
      QIN(239,I)=0.008591/(EIN(239)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(239)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(239))
      IF(QIN(239,I):
 < 0.0) QIN(239,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(239))
      IF(EPOINT > 500.):
 GO TO 3453
      DO 3451 M=1,NRTANG
      IF(EPOINT <= ENROT(M):
) GO TO 3452
 3451 CONTINUE
      M=NRTANG
 3452 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(239,I)=1.0-EPSIL
      GO TO 346
 3453 PEQIN(239,I)=PEQEL(2,(I-IOFFN(239)))
# EXCITATION    8d+9d+10d  12.50 EV                 
  346 IF(EN <= EIN(240)) GO TO 347
      QIN(240,I)=0.028137/(EIN(240)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(240)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(240))
      IF(QIN(240,I):
 < 0.0) QIN(240,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(240))
      IF(EPOINT > 500.):
 GO TO 3463
      DO 3461 M=1,NRTANG
      IF(EPOINT <= ENROT(M):
) GO TO 3462
 3461 CONTINUE
      M=NRTANG
 3462 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(240,I)=1.0-EPSIL
      GO TO 347
 3463 PEQIN(240,I)=PEQEL(2,(I-IOFFN(240)))
# TRIPLET SUM OF HIGHER TRIPLETS   13.0 EV                                            
  347 QIN(241,I)=0.0                                                    
      IF(EN <= EIN(241):
) GO TO 353
      IF(EN > XTRP4(NTRP4):
) GO TO 350                                
      DO 348 J=2,NTRP4                                           
      IF(EN <= XTRP4(J):
) GO TO 349                                      
  348 CONTINUE                                                          
      J=NTRP4                                                          
  349 Y1=math.log(YTRP4(J))
      Y2=math.log(YTRP4(J-1))
      X1=math.log(XTRP4(J))
      X2=math.log(XTRP4(J-1))
      A=(Y1-Y2)/(X1-X2)                     
      B=(X2*Y1-X1*Y2)/(X2-X1)
      QIN(241,I)=math.exp(A*math.log(EN)+B)*1.D-16         
      GO TO 351
  350 QIN(241,I)=YTRP4(NTRP4)*(XTRP4(NTRP4)/EN)**1.5*1.D-16            
  351 IF(EN <= (2.0*EIN(241))) GO TO 353
      PEQIN(241,I)=PEQEL(2,(I-IOFFN(241)))
# EXCITATION    NEUTRAL DISSOCIATION   ELOSS=13.117 
  353 IF(EN <= EIN(242)) GO TO 354
      QIN(242,I)=0.119100/(EIN(242)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(242)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(242))
      IF(QIN(242,I):
 < 0.0) QIN(242,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(242))
      IF(EPOINT > 500.):
 GO TO 3533
      DO 3531 M=1,NRTANG
      IF(EPOINT <= ENROT(M):
) GO TO 3532
 3531 CONTINUE
      M=NRTANG
 3532 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(242,I)=1.0-EPSIL
      GO TO 354
 3533 PEQIN(242,I)=PEQEL(2,(I-IOFFN(242)))
# EXCITATION    NEUTRAL DISSOCIATION   ELOSS=14.117 
  354 IF(EN <= EIN(243)) GO TO 355
      QIN(243,I)=0.097947/(EIN(243)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(243)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(243))
      IF(QIN(243,I):
 < 0.0) QIN(243,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(243))
      IF(EPOINT > 500.):
 GO TO 3543
      DO 3541 M=1,NRTANG
      IF(EPOINT <= ENROT(M):
) GO TO 3542
 3541 CONTINUE
      M=NRTANG
 3542 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(243,I)=1.0-EPSIL
      GO TO 355
 3543 PEQIN(243,I)=PEQEL(2,(I-IOFFN(243)))
# EXCITATION    NEUTRAL DISSOCIATION   ELOSS=15.117 
  355 IF(EN <= EIN(244)) GO TO 356 
      QIN(244,I)=0.039540/(EIN(244)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(244)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(244))
      IF(QIN(244,I):
 < 0.0) QIN(244,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(244))
      IF(EPOINT > 500.):
 GO TO 3553
      DO 3551 M=1,NRTANG
      IF(EPOINT <= ENROT(M):
) GO TO 3552
 3551 CONTINUE
      M=NRTANG
 3552 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(244,I)=1.0-EPSIL
      GO TO 356
 3553 PEQIN(244,I)=PEQEL(2,(I-IOFFN(244)))
# EXCITATION    NEUTRAL DISSOCIATION   ELOSS=16.117 
  356 IF(EN <= EIN(245)) GO TO 357 
      QIN(245,I)=0.042191/(EIN(245)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(245)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(245))
      IF(QIN(245,I):
 < 0.0) QIN(245,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(245))
      IF(EPOINT > 500.):
 GO TO 3563
      DO 3561 M=1,NRTANG 
      IF(EPOINT <= ENROT(M):
) GO TO 3562
 3561 CONTINUE
      M=NRTANG
 3562 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(245,I)=1.0-EPSIL
      GO TO 357
 3563 PEQIN(245,I)=PEQEL(2,(I-IOFFN(245)))
# EXCITATION    NEUTRAL DISSOCIATION   ELOSS=17.117 
  357 IF(EN <= EIN(246)) GO TO 358 
      QIN(246,I)=0.059428/(EIN(246)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(246)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(246))
      IF(QIN(246,I):
 < 0.0) QIN(246,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(246))
      IF(EPOINT > 500.):
 GO TO 3573
      DO 3571 M=1,NRTANG 
      IF(EPOINT <= ENROT(M):
) GO TO 3572
 3571 CONTINUE
      M=NRTANG
 3572 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(246,I)=1.0-EPSIL
      GO TO 358
 3573 PEQIN(246,I)=PEQEL(2,(I-IOFFN(246)))
# EXCITATION    NEUTRAL DISSOCIATION   ELOSS=18.117 
  358 IF(EN <= EIN(247)) GO TO 359 
      QIN(247,I)=0.052795/(EIN(247)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(247)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(247))
      IF(QIN(247,I):
 < 0.0) QIN(247,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(247))
      IF(EPOINT > 500.):
 GO TO 3583
      DO 3581 M=1,NRTANG 
      IF(EPOINT <= ENROT(M):
) GO TO 3582
 3581 CONTINUE
      M=NRTANG
 3582 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(247,I)=1.0-EPSIL
      GO TO 359
 3583 PEQIN(247,I)=PEQEL(2,(I-IOFFN(247)))
# EXCITATION    NEUTRAL DISSOCIATION   ELOSS=19.117 
  359 IF(EN <= EIN(248)) GO TO 360 
      QIN(248,I)=0.024912/(EIN(248)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(248)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(248))
      IF(QIN(248,I):
 < 0.0) QIN(248,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(248))
      IF(EPOINT > 500.):
 GO TO 3593
      DO 3591 M=1,NRTANG 
      IF(EPOINT <= ENROT(M):
) GO TO 3592
 3591 CONTINUE
      M=NRTANG
 3592 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(248,I)=1.0-EPSIL
      GO TO 360
 3593 PEQIN(248,I)=PEQEL(2,(I-IOFFN(248)))
# EXCITATION    NEUTRAL DISSOCIATION   ELOSS=20.117 
  360 IF(EN <= EIN(249)) GO TO 361 
      QIN(249,I)=0.010524/(EIN(249)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(249)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(249))
      IF(QIN(249,I):
 < 0.0) QIN(249,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(249))
      IF(EPOINT > 500.):
 GO TO 3603
      DO 3601 M=1,NRTANG 
      IF(EPOINT <= ENROT(M):
) GO TO 3602
 3601 CONTINUE
      M=NRTANG
 3602 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(249,I)=1.0-EPSIL
      GO TO 361
 3603 PEQIN(249,I)=PEQEL(2,(I-IOFFN(249)))
# EXCITATION    NEUTRAL DISSOCIATION   ELOSS=21.117 
  361 IF(EN <= EIN(250)) GO TO 362 
      QIN(250,I)=0.002614/(EIN(250)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(250)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+E(3)+EIN(250))
      IF(QIN(250,I):
 < 0.0) QIN(250,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(250))
      IF(EPOINT > 500.):
 GO TO 3613
      DO 3611 M=1,NRTANG 
      IF(EPOINT <= ENROT(M):
) GO TO 3612
 3611 CONTINUE
      M=NRTANG
 3612 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(250,I)=1.0-EPSIL
      GO TO 362
 3613 PEQIN(250,I)=PEQEL(2,(I-IOFFN(250)))
  362 CONTINUE
# LOAD BREMSSTRAHLUNG X-SECTION
#C    QIN(250,I)=0.0
#     IF(EN <= 1000.) GO TO 800
#     DO 780 J=2,NBREM
#     IF(EN <= EBRM(J)) GO TO 790
# 780 CONTINUE
#     J=NBREM
# 790 A=(math.log(Z8T(J))-math.log(Z8T(J-1)))/(EBRM(J)-EBRM(J-1))
#     B=(math.log(Z8T(J))*EBRM(J-1)-math.log(Z8T(J-1))*EBRM(J))/
#    /(EBRM(J-1)-EBRM(J))
#     QIN(250,I)=math.exp(A*EN+B)*1.D-24
# 800 CONTINUE
#----------------------------------------------------------------------
# LOAD NULL COLLISIONS
#  OH PRODUCTION FROM DISSOCIATION HARB ET AL J.CHEM.PHYS. 115(2001)5507
# SCALED ABOVE 200EV BY 1/ENERGY
      QNULL(1,I)=0.0
      IF(EN <= XNUL1(1):
) GO TO 805
      IF(EN > XNUL1(NUL1):
) GO TO 803
      DO 801 J=2,NUL1
      IF(EN <= XNUL1(J):
) GO TO 802
  801 CONTINUE
      J=NUL1
  802 A=(YNUL1(J)-YNUL1(J-1))/(XNUL1(J)-XNUL1(J-1))
      B=(XNUL1(J-1)*YNUL1(J)-XNUL1(J)*YNUL1(J-1))/(XNUL1(J-1)-XNUL1(J))
      QNULL(1,I)=(A*EN+B)*1.D-16*SCLN(1)
      GO TO 805
# SCALE BY 1/E ABOVE XNUL1(NUL1) EV
  803 QNULL(1,I)=YNUL1(NUL1)*(XNUL1(NUL1)/EN)*1.D-16*SCLN(1)
# LIGHT EMISSION FROM OH(A2-X) MOHLMANN AND DEHEER CHEM.PHYS.19(1979)233
  805 QNULL(2,I)=0.0
      IF(EN <= XNUL2(1):
) GO TO 810
      IF(EN > XNUL2(NUL2):
) GO TO 808
      DO 806 J=2,NUL2
      IF(EN <= XNUL2(J):
) GO TO 807
  806 CONTINUE
      J=NUL2
  807 A=(YNUL2(J)-YNUL2(J-1))/(XNUL2(J)-XNUL2(J-1))
      B=(XNUL2(J-1)*YNUL2(J)-XNUL2(J)*YNUL2(J-1))/(XNUL2(J-1)-XNUL2(J))
      QNULL(2,I)=(A*EN+B)*1.D-16*SCLN(2)
      GO TO 810
# SCALE BY 1/E ABOVE XNUL2(NUL2) EV
  808 QNULL(2,I)=YNUL2(NUL2)*(XNUL2(NUL2)/EN)*1.D-16*SCLN(2)
# LIGHT EMISSION FROM H(3-2) , MOHLMANN AND DEHEER CHEM.PHYS.19(1979)233
  810 QNULL(3,I)=0.0
      IF(EN <= XNUL3(1):
) GO TO 815
      IF(EN > XNUL3(NUL3):
) GO TO 813
      DO 811 J=2,NUL3
      IF(EN <= XNUL3(J):
) GO TO 812
  811 CONTINUE
      J=NUL3
  812 A=(YNUL3(J)-YNUL3(J-1))/(XNUL3(J)-XNUL3(J-1))
      B=(XNUL3(J-1)*YNUL3(J)-XNUL3(J)*YNUL3(J-1))/(XNUL3(J-1)-XNUL3(J))
      QNULL(3,I)=(A*EN+B)*1.D-16*SCLN(3)
      GO TO 815
# SCALE BY 1/E ABOVE XNUL3(NUL3) EV
  813 QNULL(3,I)=YNUL3(NUL3)*(XNUL3(NUL3)/EN)*1.D-16*SCLN(3)
# LIGHT EMISSION FROM H(2-1) , MOHLMANN AND DEHEER CHEM.PHYS.19(1979)233
  815 QNULL(4,I)=0.0
      IF(EN <= XNUL4(1):
)  GO TO 820
      IF(EN > XNUL4(NUL4):
) GO TO 818
      DO 816 J=2,NUL4
      IF(EN <= XNUL4(J):
) GO TO 817
  816 CONTINUE
      J=NUL4
  817 A=(YNUL4(J)-YNUL4(J-1))/(XNUL4(J)-XNUL4(J-1))
      B=(XNUL4(J-1)*YNUL4(J)-XNUL4(J)*YNUL4(J-1))/(XNUL4(J-1)-XNUL4(J))
      QNULL(4,I)=(A*EN+B)*1.D-16*SCLN(4)
      GO TO 820
# SCALE BY 1/E ABOVE XNUL4(NUL4) EV
  818 QNULL(4,I)=YNUL4(NUL4)*(XNUL4(NUL4)/EN)*1.D-16*SCLN(4)
#
  820 CONTINUE
# CALC  X-SEC SUMS
      SUMROT=0.0
      DO 850 K=1,210
      SUMROT=SUMROT+QIN(K,I)
  850 CONTINUE
      SUMVIB=0.0
      DO 851 K=211,214 
      SUMVIB=SUMVIB+QIN(K,I)
  851 CONTINUE
      SUMINEL=0.0
      DO 852 K=215,250
      SUMINEL=SUMINEL+QIN(K,I)
  852 CONTINUE
#
      SUMTRP=QIN(215,I)+QIN(220,I)+QIN(225,I)+QIN(230,I)
      SUMSNG=SUMINEL-SUMTRP
#
      SUMATT=0.0
      DO 855 K=1,NATT
      SUMATT=SUMATT+QATT(K,I)
  855 CONTINUE
      SUMION=0.0
      DO 856 K=1,NION
      SUMION=SUMION+QION(K,I)
  856 CONTINUE
      SUMTOT=SUMION+SUMSNG+SUMTRP+SUMATT+SUMVIB+SUMROT
#---------------------------------------------------------------------
#  print out some x-secs
#     WRITE(6,991) EN,SUMROT,SUMVIB,SUMATT,SUMTRP,SUMSNG,SUMION,SUMTOT
# 991 FORMAT(' EN=',F8.3,' ROT=',D12.3,' VIB=',D12.3,' SUMATT=',D12.3,
#    /' SUMTRP=',D12.3,' SUMSNG=',D12.3,' SUMION=',D12.3,' SUMTOT=',
#    /D12.3)         
#   
#-------------------------------------------------------------
#
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      DO 1000 K=1,NIN            
      IF(EFINAL <= EIN(K):
) :
       NIN=K-1
       GO TO 1001
      # endIF
 1000 CONTINUE   
 1001 CONTINUE
c     IF(EFINAL > 1000.) NIN=250    
#                                                                       
      RETURN  
      # end  
      def GAS15(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY  
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
#    /QNULL,NNULL,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,
#    /SCRPT)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(4000),EROOT(4000),QT1(4000),QT2(4000),
     /QT3(4000),QT4(4000)
      COMMON/DENS/DEN(4000)
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30) 
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30)
     /,EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      DIMENSION XELA[153],YELA[153],YMOM(153),YEPS(153),
     /XROT13(63),YROT13(63),XROT35(55),YROT35(55),XROT57(55),YROT57(55),
     /XROT79(50),YROT79(50),XROT911(48),YROT911(48),XROT1113(46),
     /YROT1113(46),XROT1315(45),YROT1315(45),XROT1517(44),YROT1517(44),
     /XROT1719(43),YROT1719(43),XROT1921(41),YROT1921(41),XROT2123(40),
     /YROT2123(40),XROT2325(39),YROT2325(39),XROT2527(38),YROT2527(38),
     /XROT2729(37),YROT2729(37),XROT2931(36),YROT2931(36),XROT3133(34),
     /YROT3133(34),XROT3335(33),YROT3335(33),XROT3537(32),YROT3537(32),
     /XROT3739(32),YROT3739(32),XROT3941(31),YROT3941(31),XROT4143(31),
     /YROT4143(31),XROT4345(30),YROT4345(30),XROT4547(30),YROT4547(30),
     /XROT4749(29),YROT4749(29),
     /XVIB[60],YVIB1(60),YVIB2(60),
     /YVIB3(60),YVIB4(60),YVIB5(60),YVIB6(60),YVIB7(60),YVIB8(60),
     /YVIB9(60),YVIB10(60),YVIB11(60),YVIB12(60),YVIB13(60),YVIB14(60),
     /YVIB15(60),YVIB16(60),YVIB17(60),YVIB18(60),YVIB19(60),
     /YVIB20(60),YVIB21(60),X3ATT(32),Y3ATT(32),XATT(31),YATT(31),
     /XEXC1(40),YEXC1(40),XEXC2(31),YEXC2(31),XEXC3(16),YEXC3(16),    
     /XEXC4(15),YEXC4(15),XEXC5(14),YEXC5(14),XEXC6(14),YEXC6(14),      
     /XEXC7(14),YEXC7(14),XEXC8(15),YEXC8(15),XEXC9(14),YEXC9(14),
     /XROT(48),YROT(48),
     /XIONC(85),YIONC(85),XION1(85),YION1(85),XION2(70),YION2(70),
     /XION3(50),YION3(50),XION4(47),YION4(47),XION5(44),YION5(44),
     /XKSH(81),YKSH(81),
     /IOFFN(150),IOFFION(8),PJ(50)
      DIMENSION Z8T(25),EBRM(25)                          
      CHARACTER*50 SCRPT(300),SCRPTN(10)                         
      CHARACTER*25 NAME                                                 
#  ELASTIC  X-SECTIONS  ASSUMED ISOTROPIC BELOW 2.0EV
      DATA XELA/0.00,.001,.003,.005,.007,.010,.015,.020,.025,0.03,
     /0.04,0.05,0.06,0.07,0.08,0.09,0.10,0.11,0.12,0.14,
     /0.17,0.20,0.30,0.40,0.50,0.60,0.80,1.00,1.20,1.50,
     /2.00,2.50,3.00,4.00,5.00,6.00,8.00,10.0,12.0,15.0,
     /20.0,25.0,30.0,40.0,50.0,60.0,80.0,100.,125.,150.,
     /175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,
     /800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,
     /4000.,4500.,5000.,6000.,7000.,8000.,9000.,1.0D4,1.25D4,1.5D4,
     /1.75D4,2.0D4,2.5D4,3.0D4,3.5D4,4.0D4,4.5D4,5.0D4,6.0D4,7.0D4,
     /8.0D4,9.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5D5,3.0D5,3.5D5,
     /4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,
     /1.75D6,2.0D6,2.5D6,3.0D6,3.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,
     /8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5D7,3.0D7,3.5D7,
     /4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,1.0D8,1.25D8,1.5D8,
     /1.75D8,2.0D8,2.5D8,3.0D8,3.5D8,4.0D8,4.5D8,5.0D8,6.0D8,7.0D8,
     /8.0D8,9.0D8,1.0D9/
# ELASTIC MOMENTUM TRANSFER
      DATA YMOM/0.15,0.17,0.18,0.19,0.21,0.24,0.31,0.45,0.70,1.20,
     /2.35,3.00,3.40,3.60,3.65,3.70,3.73,3.77,3.79,3.83,
     /3.86,3.90,3.95,4.00,4.02,4.21,4.86,5.74,6.44,6.80,
     /6.58,6.37,6.05,5.80,5.70,5.65,5.60,5.55,5.50,5.45,
     /5.40,5.30,5.15,4.85,4.50,4.10,3.55,3.05,2.43,1.94,
     /1.60,1.34,.991,.768,.616,.507,.426,.364,.275,.216,
     /.175,.145,.122,.0847,.0625,.0481,.0383,.0261,.0190,.0145,
     /.0114,.00929,.00770,.00556,.00422,.00332,.00269,.00222,.00149,
     /.00107,
     /8.10D-4,6.37D-4,4.26D-4,3.07D-4,2.32D-4,1.83D-4,1.48D-4,1.23D-4,
     /8.88D-5,6.77D-5,
     /5.35D-5,4.36D-5,3.63D-5,2.47D-5,1.81D-5,1.40D-5,1.12D-5,7.79D-6,
     /5.81D-6,4.55D-6,
     /3.69D-6,3.07D-6,2.61D-6,1.97D-6,1.56D-6,1.27D-6,1.06D-6,9.04D-7,
     /6.46D-7,4.88D-7,
     /3.84D-7,3.11D-7,2.18D-7,1.62D-7,1.26D-7,1.01D-7,8.26D-8,6.91D-8,
     /5.06D-8,3.88D-8,
     /3.07D-8,2.50D-8,2.07D-8,1.39D-8,1.00D-8,7.57D-9,5.93D-9,3.94D-9,
     /2.81D-9,2.11D-9,
     /1.64D-9,1.31D-9,1.08D-9,7.61D-10,5.66D-10,4.38D-10,3.48D-10,
     /2.83D-10,1.83D-10,1.27D-10,
     /9.39D-11,7.20D-11,4.62D-11,3.21D-11,2.36D-11,1.81D-11,1.43D-11,
     /1.16D-11,8.04D-12,5.91D-12,
     /4.52D-12,3.57D-12,2.90D-12/
# ELASTIC 
      DATA YELA/0.15,0.17,0.18,0.19,0.21,0.24,0.31,0.45,0.70,1.20,
     /2.35,3.00,3.40,3.60,3.65,3.70,3.73,3.77,3.79,3.83,
     /3.86,3.90,3.95,4.00,4.02,4.21,4.86,5.74,6.44,6.80,
     /6.58,6.37,6.21,6.58,7.03,7.48,7.96,8.82,9.31,9.34,
     /9.11,9.36,9.15,8.46,7.66,6.85,5.96,5.20,4.50,3.92,
     /3.56,3.27,2.84,2.53,2.29,2.09,1.93,1.80,1.59,1.42,
     /1.29,1.18,1.09,.910,.784,.689,.614,.506,.430,.374,
     /.331,.297,.269,.227,.197,.174,.155,.141,.114,.0961,
     /.0832,.0735,.0598,.0506,.0440,.0391,.0352,.0322,.0275,.0242,
     /.0217,.0198,.0183,.0155,.0137,.0124,.0114,.0100,.00913,.00850,
     /.00803,.00767,.00739,.00698,.00670,.00649,.00634,.00622,.00601,
     /.00588,
     /.00580,.00574,.00567,.00562,.00560,.00558,.00556,.00555,.00554,
     /.00553,
     /.00552,.00552,.00552,.00551,.00551,.00551,.00551,.00551,.00551,
     /.00551,
     /.00551,22*.00550/
      DATA YEPS/30*1.0,
     /1.0000,1.0000,.96137,.82331,.72073,.64268,.57229,.47655,.42962,
     /.42099, 
     /.43201,.40075,.39681,.40896,.42569,.43895,.43546,.42459,.37079,
     /.32162,
     /.27516,.23726,.18398,.14816,.12316,.10538,.09155,.08026,.06441,
     /.05351,
     /.04563,.03969,.03507,.02705,.02196,.01844,.01587,.01240,.010154,
     /.008595,
     /.007441,.006561,.005865,.004834,.004110,.003572,.003159,.002830,
     /.002244,.001857,
     /.001582,.001378,.001092,.0009027,.0007678,.0006671,.0005892,
     /5.269D-4,4.335D-4,3.669D-4,
     /3.176D-4,2.790D-4,2.484D-4,1.933D-4,1.571D-4,1.313D-4,1.122D-4,
     /8.584D-5,6.857D-5,5.647D-5,
     /4.759D-5,4.079D-5,3.547D-5,2.768D-5,2.233D-5,1.847D-5,1.556D-5,
     /1.331D-5,9.559D-6,7.186D-6,
     /5.613D-6,4.510D-6,3.105D-6,2.270D-6,1.734D-6,1.369D-6,1.108D-6,
     /9.156D-7,6.559D-7,4.931D-7,
     /3.842D-7,3.079D-7,2.520D-7,1.648D-7,1.161D-7,8.6108D-8,6.6395D-8,
     /4.2939D-8,2.9994D-8,2.2104D-8,
     /1.6952D-8,1.3407D-8,1.0856D-8,7.519D-9,5.500D-9,4.188D-9,3.290D-9,
     /2.648D-9,1.669D-9,1.142D-9,
     /8.28D-10,6.26D-10,3.93D-10,2.68D-10,1.94D-10,1.47D-10,1.15D-10,
     /9.1D-11,6.3D-11,4.5D-11,
     /3.4D-11,2.7D-11,2.2D-11/
      DATA XROT13/.00178301,.001986,.002055,.002191,.002395,.002558,
     /.002871,.003116,.003442,.003796,
     /.004082,.004368,.004626,.004966,.005347,.005823,.006422,.007334,
     /.008164,.009524,
     /.01088,.01225,.01361,.01497,.01633,.01769,.01905,.02041,.02177,
     /.02313,
     /.02449,.02585,.02721,.02993,.03265,.03538,.03810,.04082,.04762,
     /.05442,
     /.06123,.06803,.08164,.09524,.1088,.1225,.1361,.1537,.1796,.2027,
     /.2340,.2721,.3129,.3578,.4177,.4830,.5810,.6626,.7837,.9279,
     /1.029,1.105,1.361/
# NOTE ALL ROTATIONAL X-SECTIONS IN DATA ARRAYS BELOW ARE  
#             SCALED BY 0.75 IN def
      DATA YROT13/1.D-5,.00476,.00505,.00536,.00545,.00550,.00550,
     /.00545,.00524,.00505,
     /.00485,.00462,.00481,.00550,.00677,.00944,.0129,.0191,.0235,.0308,
     /.0392,.0462,.0532,.0616,.0728,.0826,.0924,.1022,.1148,.1260,
     /.1400,.1540,.1680,.1904,.2184,.2464,.2856,.3304,.4200,.5180,
     /.6160,.7140,.8960,1.064,1.232,1.358,1.498,1.646,1.826,1.957,
     /2.055,2.204,2.248,2.299,2.299,2.220,2.094,1.982,1.851,1.728,
     /1.610,1.534,1.263/
      DATA XROT35/.00320941,.003333,.003470,.004055,.004544,.005048,
     /.005497,.005769,.006368,.007143,
     /.008014,.009347,.01088,.01225,.01361,.01497,.01633,.01769,.01905,
     /.02041,
     /.02177,.02313,.02449,.02585,.02721,.02993,.03265,.03538,.03810,
     /.04082,
     /.04762,.05442,.06123,.06803,.08164,.09524,.1088,.1225,.1361,.1537,
     /.1796,.2027,.2340,.2721,.3129,.3578,.4177,.4830,.5810,.6626,
     /.7837,.9279,1.029,1.105,1.361/
      DATA YROT35/1.D-5,.00196,.00415,.00411,.00407,.00411,.00454,
     /.00540,.00767,.01146,
     /.01658,.02407,.02940,.03556,.04200,.04900,.05600,.06300,.07000,
     /.07700,
     /.08540,.09380,.1022,.1120,.1232,.1372,.1568,.1848,.2128,.2324,
     /.2940,.3640,.4396,.5236,.6440,.7700,.8820,.9940,1.064,1.170,
     /1.299,1.394,1.462,1.568,1.602,1.635,1.635,1.579,1.490,1.411,
     /1.316,1.229,1.145,1.092,.8988/
      DATA XROT57/.00463581,.004762,.004898,.005170,.005442,.005783,
     /.006123,.006803,.007483,.008164,
     /.008844,.009524,.01088,.01225,.01361,.01497,.01633,.01769,.01905,
     /.02041,
     /.02177,.02313,.02449,.02585,.02721,.02993,.03265,.03538,.03810,
     /.04082,
     /.04762,.05442,.06123,.06803,.08164,.09524,.1088,.1225,.1361,.1537,
     /.1796,.2027,.2340,.2721,.3129,.3578,.4177,.4830,.5810,.6626,
     /.7837,.9279,1.029,1.105,1.361/
      DATA YROT57/1.D-5,.00280,.00286,.00308,.00330,.00356,.00420,
     /.00588,.00812,.01092,
     /.01344,.01680,.02296,.02884,.03416,.03920,.04536,.05180,.05880,
     /.06580,
     /.07280,.08120,.0882,.0952,.1036,.1232,.1400,.1596,.1932,.2100,
     /.2839,.3500,.4144,.4844,.6048,.7196,.8316,.9184,1.011,1.112,
     /1.235,1.322,1.389,1.490,1.520,1.554,1.554,1.501,1.414,1.338,
     /1.252,1.168,1.089,1.036,.8540/
      DATA XROT79/.00606221,.006259,.006803,.007483,.008164,.008844,
     /.009524,.01088,.01225,.01361,
     /.01497,.01633,.01769,.01905,.02041,.02177,.02313,.02449,.02585,
     /.02721,
     /.02993,.03265,.03538,.03810,.04082,.04762,.05442,.06123,.06803,
     /.08164,
     /.09524,.1088,.1225,.1361,.1537,.1796,.2027,.2340,.2721,.3129,
     /.3578,.4177,.4830,.5810,.6626,.7837,.9279,1.029,1.105,1.361/
      DATA YROT79/1.D-5,.00280,.00350,.00490,.00658,.00840,.01064,
     /.01596,.02156,.02632,
     /.03080,.03696,.04340,.04900,.05600,.06160,.06860,.07560,.08260,
     /.0896,
     /.1050,.1260,.1512,.1764,.1988,.2688,.3321,.3940,.4578,.5743,
     /.6821,.7899,.8705,.9601,1.055,1.170,1.255,1.319,1.413,1.442,
     /1.474,1.474,1.423,1.343,1.271,1.186,1.107,1.032,.9836,.8095/
      DATA XROT911/.00748861,.007619,.008164,.008844,.009524,.01088,
     /.01225,.01361,.01497,.01633,
     /.01769,.01905,.02041,.02177,.02313,.02449,.02585,.02721,.02993,
     /.03265,
     /.03538,.03810,.04082,.04762,.05442,.06123,.06803,.08164,.09524,
     /.1088,
     /.1225,.1361,.1537,.1796,.2027,.2340,.2721,.3129,.3578,.4177,
     /.4830,.5810,.6626,.7837,.9279,1.029,1.105,1.361/
      DATA YROT911/1.D-5,.00280,.00336,.00420,.00546,.00910,.01316,
     /.01764,.02100,.02632,
     /.03136,.04077,.04200,.04760,.05600,.06160,.06720,.07560,.09240,
     /.1148,
     /.1344,.1568,.1820,.2436,.3136,.3780,.4379,.5496,.6524,.7557,
     /.8330,.9190,1.010,1.120,1.201,1.261,1.352,1.379,1.410,1.410,
     /1.362,1.285,1.216,1.135,1.060,.9878,.9411,.7748/
      DATA XROT1113/.00891501,.009456,.009524,.01088,.01225,.01361,
     /.01497,.01633,.01769,.01905,
     /.02041,.02177,.02313,.02449,.02585,.02721,.02993,.03265,.03538,
     /.03810,
     /.04082,.04762,.05442,.06123,.06803,.08164,.09524,.1088,.1225,
     /.1361,
     /.1537,.1796,.2027,.2340,.2721,.3129,.3578,.4177,.4830,.5810,
     /.6626,.7837,.9279,1.029,1.105,1.361/
      DATA YROT1113/1.D-5,.00280,.00308,.00616,.01036,.01372,.01736,
     /.02156,.02604,.03080,
     /.03724,.04200,.04760,.05320,.06020,.06720,.08120,.1036,.1232,
     /.1456,
     /.1680,.2296,.2884,.3461,.4012,.5034,.5978,.6922,.7630,.8585,
     /.9248,1.026,1.100,1.155,1.238,1.263,1.291,1.291,1.247,1.177,
     /1.114,1.040,.9705,.9044,.8621,.7095/
      DATA XROT1315/.01034141,.01061,.01088,.01225,.01361,.01497,.01633,
     /.01769,.01905,.02041,
     /.02177,.02313,.02449,.02585,.02721,.02993,.03265,.03538,.03810,
     /.04082,
     /.04762,.05442,.06123,.06803,.08164,.09524,.1088,.1225,.1361,.1537,
     /.1796,.2027,.2340,.2721,.3129,.3578,.4177,.4830,.5810,.6626,
     /.7837,.9279,1.029,1.105,1.361/
      DATA YROT1315/1.D-5,.00280,.00364,.00700,.01036,.01344,.01708,
     /.02100,.02576,.03024,
     /.03500,.04060,.04620,.05096,.05712,.07420,.09240,.1120,.1316,
     /.1512,
     /.2100,.2660,.3192,.3699,.4642,.5513,.6384,.7036,.7762,.8532,
     /.9458,1.014,1.065,1.142,1.165,1.191,1.191,1.151,1.085,1.027,
     /.9590,.8952,.8341,.7949,.6544/
      DATA XROT1517/.01176781,.01197,.01225,.01361,.01497,.01633,.01769,
     /.01905,.02041,.02177,
     /.02313,.02449,.02585,.02721,.02993,.03265,.03538,.03810,.04082,
     /.04762,
     /.05442,.06123,.06803,.08164,.09524,.1088,.1225,.1361,.1537,.1796,
     /.2027,.2340,.2721,.3129,.3578,.4177,.4830,.5810,.6626,.7837,
     /.9279,1.029,1.105,1.361/
      DATA YROT1517/1.D-5,.00280,.00350,.00560,.00840,.01148,.01512,
     /.02044,.02464,.02968,
     /.03416,.03780,.04340,.04900,.06300,.08120,.09880,.1176,.1372,
     /.1904,
     /.2436,.2962,.3433,.4308,.5115,.5923,.6529,.7202,.7916,.8778,
     /.9411,.9881,1.060,1.081,1.105,1.105,1.068,1.007,.9531,.8898,
     /.8305,.7739,.7378,.6070/
      DATA XROT1719/.01319421,.01333,.01361,.01497,.01633,.01769,.01905,
     /.02041,.02177,.02313,
     /.02449,.02585,.02721,.02993,.03265,.03538,.03810,.04082,.04762,
     /.05442,
     /.06123,.06803,.08164,.09524,.1088,.1225,.1361,.1537,.1796,.2027,
     /.2340,.2721,.3129,.3578,.4177,.4830,.5810,.6626,.7837,.9279,
     /1.029,1.105,1.361/
      DATA YROT1719/1.D-5,.00280,.00336,.00518,.00770,.01022,.01400,
     /.01764,.02128,.02548,
     /.03080,.03556,.04200,.05460,.07000,.08680,.1064,.1274,.1736,
     /.2226,
     /.2762,.3202,.4018,.4771,.5525,.6090,.6717,.7383,.8187,.8777,
     /.9216,.9881,1.008,1.031,1.031,.9957,.9392,.8890,.8299,.7747,
     /.7220,.6881,.5663/
      DATA XROT1921/.01462061,.01497,.01633,.01769,.01905,.02041,.02177,
     /.02313,.02449,.02585,
     /.02721,.02993,.03265,.03538,.03810,.04082,.04762,.05442,.06123,
     /.06803,
     /.08164,.09524,.1088,.1225,.1361,.1537,.1796,.2027,.2340,.2721,
     /.3129,.3578,.4177,.4830,.5810,.6626,.7837,.9279,1.029,1.105,
     /1.361/
      DATA YROT1921/1.D-5,.00280,.00476,.00678,.01036,.01358,.01680,
     /.01988,.02492,.03080,
     /.03640,.04760,.06300,.07980,.09800,.1190,.1652,.2128,.2588,
     /.3000,
     /.3765,.4470,.5176,.5706,.6294,.6918,.7671,.8224,.8635,.9259,
     /.9447,.9659,.9659,.9329,.8800,.8329,.7776,.7259,.6765,.6447,
     /.5306/
      DATA XROT2123/.01604701,.01633,.01769,.01905,.02041,.02177,.02313,
     /.02449,.02585,.02721,
     /.02993,.03265,.03538,.03810,.04082,.04762,.05442,.06123,.06803,
     /.08164,
     /.09524,.1088,.1225,.1361,.1537,.1796,.2027,.2340,.2721,.3129,
     /.3578,.4177,.4830,.5810,.6626,.7837,.9279,1.029,1.105,1.361/
      DATA YROT2123/1.D-5,.00280,.00448,.00700,.00980,.01288,.01624,
     /.02016,.02464,.02940,
     /.03920,.05320,.06720,.08960,.1106,.1554,.2017,.2435,.2822,
     /.3541,
     /.4206,.4869,.5368,.5921,.6507,.7216,.7736,.8123,.8711,.8887,
     /.9086,.9086,.8775,.8280,.7834,.7316,.6829,.6364,.6065,.4992/
      DATA XROT2325/.01747341,.01769,.01905,.02041,.02177,.02313,.02449,
     /.02585,.02721,.02993,
     /.03265,.03538,.03810,.04082,.04762,.05442,.06123,.06803,.08164,
     /.09524,
     /.1088,.1225,.1361,.1537,.1796,.2027,.2340,.2721,.3129,.3578,
     /.4177,.4830,.5810,.6626,.7837,.9279,1.029,1.105,1.361/
      DATA YROT2325/1.D-5,.00280,.00504,.00784,.01064,.01456,.01904,
     /.02380,.02884,.03836,
     /.05209,.06580,.08792,.1084,.1523,.1977,.2388,.2768,.3472,
     /.4124,
     /.4774,.5264,.5807,.6381,.7076,.7585,.7966,.8540,.8714,.8910,
     /.8910,.8607,.8117,.7683,.7174,.6695,.6241,.5947,.4894/
      DATA XROT2527/.01889981,.01905,.02041,.02177,.02313,.02449,.02585,
     /.02721,.02993,.03265,
     /.03538,.03810,.04082,.04762,.05442,.06123,.06803,.08164,.09524,
     /.1088,
     /.1225,.1361,.1537,.1796,.2027,.2340,.2721,.3129,.3578,.4177,
     /.4830,.5810,.6626,.7837,.9279,1.029,1.105,1.361/
      DATA YROT2527/1.D-5,.00280,.00504,.00868,.01288,.01568,.02072,
     /.02576,.03752,.05096,
     /.06468,.08624,.1064,.1495,.1939,.2342,.2715,.3408,.4046,.4684,
     /.5163,.5696,.6261,.6941,.7442,.7815,.8378,.8548,.8742,.8742,
     /.8442,.7963,.7538,.7036,.6569,.6121,.5835,.4802/
      DATA XROT2729/.02032621,.02041,.02177,.02313,.02449,.02585,.02721,
     /.02993,.03265,.03538,
     /.03810,.04082,.04762,.05442,.06123,.06803,.08164,.09524,.1088,
     /.1225,
     /.1361,.1537,.1796,.2027,.2340,.2721,.3129,.3578,.4177,.4830,
     /.5810,.6626,.7837,.9279,1.029,1.105,1.361/
      DATA YROT2729/1.D-5,.00280,.00490,.00980,.01344,.01904,.02296,
     /.03360,.04900,.06300,
     /.08459,.1044,.1467,.1903,.2299,.2664,.3343,.3970,.4598,.5068,
     /.5589,.6143,.6812,.7302,.7669,.8224,.8389,.8576,.8576,.8285,
     /.7815,.7398,.6905,.6446,.6009,.5726,.4712/
      DATA XROT2931/.02175261,.02177,.02313,.02449,.02585,.02721,.02993,
     /.03265,.03538,.03810,
     /.04082,.04762,.05442,.06123,.06803,.08164,.09524,.1088,.1225,
     /.1361,
     /.1537,.1796,.2027,.2340,.2721,.3129,.3578,.4177,.4830,.5810,
     /.6626,.7837,.9279,1.029,1.105,1.361/
      DATA YROT2931/1.D-5,.00280,.00378,.01008,.01456,.01904,.03136,
     /.04704,.06104,.08305,
     /.1025,.1440,.1868,.2257,.2615,.3282,.3898,.4514,.4976,.5488,
     /.6031,.6686,.7168,.7529,.8072,.8235,.8420,.8420,.8134,.7672,
     /.7260,.6779,.6328,.5897,.5620,.4626/
      DATA XROT3133/.02317901,.02449,.02585,.02721,.02993,.03265,.03538,
     /.03810,.04082,.04762,
     /.05442,.06123,.06803,.08164,.09524,.1088,.1225,.1361,.1537,.1796,
     /.2027,.2340,.2721,.3129,.3578,.4177,.4830,.5810,.6626,.7837,
     /.9279,1.029,1.105,1.361/
      DATA YROT3133/1.D-5,.00280,.00784,.01232,.03080,.04620,.05995,
     /.08156,.1007,.1414,
     /.1835,.2216,.2568,.3223,.3828,.4432,.4886,.5390,.5922,.6566,
     /.7039,.7392,.7927,.8086,.8268,.8268,.7988,.7535,.7132,.6658,
     /.6213,.5790,.5519,.4542/
      DATA XROT3335/.02460541,.02585,.02721,.02993,.03265,.03538,.03810,
     /.04082,.04762,.05442,
     /.06123,.06803,.08164,.09524,.1088,.1225,.1361,.1537,.1796,.2027,
     /.2340,.2721,.3129,.3578,.4177,.4830,.5810,.6626,.7837,.9279,
     /1.029,1.105,1.361/
      DATA YROT3335/1.D-5,.00280,.00518,.02800,.04480,.05656,.07700,
     /.09887,.1389,.1802,
     /.2177,.2523,.3167,.3760,.4355,.4799,.5258,.5818,.6451,.6916,
     /.7263,.7787,.7944,.8123,.8123,.7846,.7400,.7006,.6541,.6104,
     /.5690,.5421,.4463/
      DATA XROT3537/.02603181,.02721,.02993,.03265,.03538,.03810,.04082,
     /.04762,.05442,.06123,
     /.06803,.08164,.09524,.1088,.1225,.1361,.1537,.1796,.2027,.2340,
     /.2721,.3129,.3578,.4177,.4830,.5810,.6626,.7837,.9279,1.029,
     /1.105,1.361/
      DATA YROT3537/1.D-5,.00280,.02576,.04200,.05488,.07566,.09717,
     /.1365,.1771,.2139,
     /.2479,.3111,.3696,.4278,.4715,.5167,.5718,.6339,.6796,.7137,
     /.7652,.7806,.7983,.7983,.7708,.7272,.6882,.6427,.5998,.5592,
     /.5328,.4385/
      DATA XROT3739/.02745821,.02857,.02993,.03265,.03538,.03810,.04082,
     /.04762,.05442,.06123,
     /.06803,.08164,.09524,.1088,.1225,.1361,.1537,.1796,.2027,.2340,
     /.2721,.3129,.3578,.4177,.4830,.5810,.6626,.7837,.9279,1.029,
     /1.105,1.361/
      DATA YROT3739/1.D-5,.00280,.02532,.04127,.05396,.07437,.09551,
     /.1342,.1741,.2103,
     /.2437,.3058,.3632,.4206,.4634,.5079,.5620,.6230,.6681,.7014,
     /.7521,.7675,.7846,.7846,.7577,.7148,.6765,.6317,.5897,.5494,
     /.5236,.4309/
      DATA XROT3941/.02888461,.02993,.03265,.03538,.03810,.04082,.04762,
     /.05442,.06123,.06803,
     /.08164,.09524,.1088,.1225,.1361,.1537,.1796,.2027,.2340,.2721,
     /.3129,.3578,.4177,.4830,.5810,.6626,.7837,.9279,1.029,1.105,
     /1.361/
      DATA YROT3941/1.D-5,.00280,.03780,.05306,.07311,.09391,.1320,
     /.1712,.2067,.2396,
     /.3007,.3570,.4136,.4556,.4995,.5524,.6126,.6569,.6896,.7395,
     /.7546,.7714,.7714,.7451,.7028,.6653,.6210,.5796,.5404,.5149,
     /.4236/
      DATA XROT4143/.03031101,.03129,.03265,.03538,.03810,.04082,.04762,
     /.05442,.06123,.06803,
     /.08164,.09524,.1088,.1225,.1361,.1537,.1796,.2027,.2340,.2721,
     /.3129,.3578,.4177,.4830,.5810,.6626,.7837,.9279,1.029,1.105,
     /1.361/
      DATA YROT4143/1.D-5,.00280,.03500,.05219,.07190,.09237,.1298,
     /.1683,.2033,.2357,
     /.2957,.3511,.4068,.4480,.4914,.5435,.6026,.6460,.6782,.7272,
     /.7420,.7588,.7588,.7328,.6913,.6544,.6110,.5701,.5314,.5065,
     /.4166/
      DATA XROT4345/.03173741,.03265,.03538,.03810,.04082,.04762,.05442,
     /.06123,.06803,.08164,
     /.09524,.1088,.1225,.1361,.1537,.1796,.2027,.2340,.2721,.3129,
     /.3578,.4177,.4830,.5810,.6626,.7837,.9279,1.029,1.105,1.361/
      DATA YROT4345/1.D-5,.00280,.05040,.07073,.09086,.1277,.1656,
     /.2000,.2318,.2909,
     /.3455,.4001,.4407,.4836,.5345,.5928,.6353,.6672,.7154,.7300,
     /.7465,.7465,.7210,.6801,.6437,.6009,.5608,.5228,.4981,.4099/
      DATA XROT4547/.03316381,.03402,.03538,.03810,.04082,.04762,.05442,
     /.06123,.06803,.08164,
     /.09524,.1088,.1225,.1361,.1537,.1796,.2027,.2340,.2721,.3129,
     /.3578,.4177,.4830,.5810,.6626,.7837,.9279,1.029,1.105,1.361/
      DATA YROT4547/1.D-5,.00280,.04760,.06961,.08940,.1256,.1630,
     /.1968,.2281,.2862,
     /.3399,.3937,.4337,.4757,.5261,.5832,.6252,.6566,.7039,.7182,
     /.7344,.7344,.7095,.6692,.6334,.5914,.5519,.5144,.4903,.4035/
      DATA XROT4749/.03459021,.03538,.03810,.04082,.04762,.05442,.06123,
     /.06803,.08164,.09524,
     /.1088,.1225,.1361,.1537,.1796,.2027,.2340,.2721,.3129,.3578,
     /.4177,.4830,.5810,.6626,.7837,.9279,1.029,1.105,1.361/
      DATA YROT4749/1.D-5,.00280,.04480,.08800,.1236,.1604,.1937,
     /.2246,.2817,.3346,
     /.3875,.4270,.4682,.5177,.5740,.6154,.6462,.6930,.7070,.7230,
     /.7230,.6983,.6586,.6233,.5821,.5432,.5062,.4824,.3970/
      DATA XVIB/.193,0.20,0.21,0.23,0.32,0.33,0.35,0.44,0.45,0.47,
     /0.56,0.57,0.59,0.68,0.69,0.71,0.79,0.80,0.82,0.90,           
     /0.91,0.93,1.02,1.03,1.05,1.13,1.14,1.16,1.23,1.24,           
     /1.26,1.34,1.35,1.37,1.44,1.45,1.47,1.54,1.55,1.57,           
     /1.63,1.65,1.67,3.00,4.00,5.00,6.00,7.00,8.00,9.00,           
     /9.50,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0/    
#       
      DATA YVIB1/0.00,.050,.050,0.00,0.00,.800,0.00,0.00,1.00,0.00,
     /0.00,1.35,0.00,0.00,1.32,0.00,0.00,1.02,0.00,0.00,           
     /.611,0.00,0.00,.290,0.00,0.00,.115,0.00,0.00,.049,           
     /0.00,0.00,.017,0.00,0.00,.0056,0.00,0.00,.0019,0.00,         
     /0.00,.0006,0.00,.027,.033,.055,.115,.220,.321,.412,          
     /.458,.458,.366,.266,.179,.119,.078,.046,.023,.011/
      DATA YVIB2/0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,     
     /0.00,.142,0.00,0.00,.422,0.00,0.00,.544,0.00,0.00,                
     /.473,0.00,0.00,.321,0.00,0.00,.204,0.00,0.00,.097,                
     /0.00,0.00,.041,0.00,0.00,.018,0.00,0.00,.008,0.00,                
     /0.00,.003,0.00,.0110,.0128,.0220,.0458,.0879,.128,.165,
     /.183,.183,.147,.106,.071,.048,.032,.018,.0092,.0046/             
      DATA YVIB3/0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,     
     /0.00,0.00,0.00,0.00,.0038,0.00,0.00,.0219,0.0,0.0,                
     /.092,0.00,0.00,.122,0.00,0.00,.117,0.00,0.00,.097,                
     /0.00,0.00,.056,0.00,0.00,.031,0.00,0.00,.0168,0.00,               
     /0.00,.008,0.00,.0043,.0063,.0108,.0224,.0429,.0627,.0806,       
     /.090,.090,.0716,.0519,.0349,.0233,.0153,.0090,.0047,.0022/ 
      DATA YVIB4/0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,     
     /0.00,0.00,0.00,0.00,0.00,0.00,0.00,.0015,0.00,0.0,                
     /.0056,0.00,0.0,.0097,0.00,0.0,.0168,0.00,0.0,.0321,               
     /0.00,0.00,.0341,0.0,0.00,.0290,0.00,0.0,.0219,0.00,               
     /0.00,.0168,0.00,.00258,.00376,.00645,.0134,.0257,.0376,.0483,  
     /.0537,.0537,.0429,.0311,.0210,.0139,.0092,.00537,.00269,.00134/  
      DATA YVIB5/40*0.0,
     /0.00,0.00,0.00,.00172,.00250,.00429,.00895,.0172,.0250,.0323,
     /.0358,.0358,.0287,.0208,.0139,.00931,.00608,.00358,.00179,.00090/
      DATA YVIB6/40*0.0,
     /0.0,0.0,0.0,.00108,.00157,.00269,.00560,.0108,.0157,.0201,
     /.0224,.0224,.0179,.0130,.00873,.00582,.00381,.00224,.00112,.00056/
      DATA YVIB7/40*0.0,
     /0.0,0.0,0.0,.000738,.00108,.00184,.00385,.00738,.0108,.0138,
     /.0154,.0154,.0123,.00891,.00599,.00400,.00261,.00154,.000768,
     /.000385/
      DATA YVIB8/40*0.0,
     /0.0,0.0,0.0,.000572,.000833,.00142,.00298,.00572,.00833,.0107,
     /.0119,.0119,.00952,.00691,.00464,.00309,.00202,.00119,.000595,
     /.000297/
      DATA YVIB9/40*0.0,
     /0.0,0.0,0.0,.000459,.000670,.00115,.00239,.00459,.00670,.00858,
     /.00956,.00956,.00765,.00555,.00373,.00248,.00163,.000956,.000478,
     /.000239/
      DATA YVIB10/40*0.0,
     /0.0,0.0,0.0,.000368,.000537,.000921,.00192,.00368,.00537,.00691,
     /.00767,.00767,.00614,.00445,.00299,.00199,.00130,.000767,.000384,
     /.000192/
      DATA YVIB11/40*0.0,
     /0.0,0.0,0.0,.000209,.000304,.000521,.00109,.00209,.00304,.00391,
     /.00434,.00434,.00348,.00252,.00170,.00113,.000739,.000434,.000218,
     /.000109/
      DATA YVIB12/40*0.0,
     /0.0,0.0,0.0,.000153,.000224,.000384,.000799,.00154,.00224,.00288,
     /.00319,.00319,.00255,.00185,.00124,.000830,.000543,.000319,
     /.000160,.0000799/
      DATA YVIB13/40*0.0,
     /0.0,0.0,0.0,.000123,.000179,.000306,.000638,.00122,.00179,.00230,
     /.00255,.00255,.00205,.00149,.000996,.000664,.000434,.000255,
     /.000127,.0000639/
      DATA YVIB14/40*0.0,
     /0.0,0.0,0.0,.000086,.000125,.000215,.000448,.000860,.00125,.00161,
     /.00179,.00179,.00143,.00104,.000698,.000466,.000304,.000179,
     /.000090,.000045/
      DATA YVIB15/40*0.0,
     /.0,0.0,0.0,6.16D-5,8.97D-5,.000154,.000321,.000616,.000897,.00115,
     /.00128,.00128,.00103,.000744,.000500,.000334,.000218,.000128,
     /.000064,.0000321/
      DATA YVIB16/40*0.0,
     /.0,0.0,0.0,5.51D-5,8.05D-5,.000138,.000287,.000551,.000805,.00104,
     /.00115,.00115,.000920,.000666,.000449,.000299,.000195,.000115,
     /.0000575,.0000288/
      DATA YVIB17/40*0.0,
     /.0,.0,0.0,4.93D-5,7.19D-5,.000123,.000257,.000493,.000719,.000925,
     /.00103,.00103,.000822,.000596,.000401,.000268,.000175,.000103,
     /.0000514,.0000257/
      DATA YVIB18/40*0.0,
     /.0,.0,0.0,4.34D-5,6.34D-5,.000109,.000227,.000434,.000634,.000815,
     /.000906,.000906,.000724,.000525,.000353,.000235,.000154,.0000906,
     /.0000453,.0000226/
      DATA YVIB19/40*0.0,
     /.0,.0,0.0,3.66D-5,5.34D-5,9.16D-5,.000191,.000366,.000534,.000687,
     /.000763,.000763,.000611,.000443,.000297,.000198,.000129,.0000763,
     /.0000382,.0000191/
      DATA YVIB20/40*0.0,
     /.0,.0,0.0,3.07D-5,4.49D-5,7.69D-5,.000160,.000307,.000449,.000577,
     /.000641,.000641,.000513,.000371,.000250,.000167,.000109,.0000641,
     /.0000321,.0000160/
      DATA YVIB21/40*0.0,
     /0.0,0.0,0.0,.000116,.000170,.000292,.000607,.00117,.00170,.00219,
     /.00243,.00243,.00194,.00141,.000948,.000632,.000413,.000243,
     /.000121,.0000607/
# USED RAPP NORMALISED TO LINDSAY AT MAXIMUM (110EV)  : ABOVE
# MAXIMUM USED LINDSAY TO 1KEV : NORMALISED SCHRAM TO 16KEV
# : MATRIX ELEMENTS FROM RIEKE AND BERKOWITZ ANALYSIS 
# NB.ALL CROSS SECTIONS ADJUSTED TO GIVE COUNTING IONISATION. 
      DATA XIONC/12.071,12.5,13.0,13.5,14.0,14.5,15.0,15.5,16.0,16.5,   
     /17.0,17.5,18.0,18.5,19.0,19.5,20.0,20.5,21.0,21.5,                
     /22.0,24.0,26.0,28.0,30.0,32.0,34.0,36.0,40.0,45.0,                
     /50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,
     /100.,108.,118.,138.,158.,178.,198.,223.,248.,273.,                
     /298.,348.,398.,448.,498.,548.,598.,648.,698.,748.,  
     /798.,848.,898.,948.,998.,1200.,1400.,1600.,1800.,2000.,
     /2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,
     /9000.,10000.,12000.,14000.,16000./ 
# COUNTING IONISATION   
      DATA YIONC/0.0,.0052,.0117,.024,.034,.047,.061,.073,.087,.105,    
     /.124,.143,.164,.184,.205,.225,.247,.269,.290,.312,                
     /.336,.435,.538,.641,.754,.873,.981,1.09,1.26,1.49,                
     /1.69,1.84,1.97,2.07,2.16,2.23,2.28,2.34,2.37,2.40,
     /2.42,2.45,2.45,2.42,2.40,2.34,2.28,2.19,2.12,2.01,
     /1.94,1.80,1.68,1.56,1.46,1.38,1.30,1.24,1.19,1.12,
     /1.06,1.03,.987,.950,.922,.805,.718,.645,.587,.540,                
     /.457,.393,.347,.310,.284,.262,.240,.224,.196,.178,
     /.162,.149,.127,.112,.101/    
# IONISATION TO O2+   ASYMPTOTIC 64.75% OF COUNTING IONISATION
      DATA XION1/12.071,12.5,13.0,13.5,14.0,14.5,15.0,15.5,16.0,16.5,  
     /17.0,17.5,18.0,18.5,19.0,19.5,20.0,20.5,21.0,21.5,
     /22.0,24.0,26.0,28.0,30.0,32.0,34.0,36.0,40.0,45.0,
     /50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,
     /100.,108.,118.,138.,158.,178.,198.,223.,248.,273.,                
     /298.,348.,398.,448.,498.,548.,598.,648.,698.,748.,  
     /798.,848.,898.,948.,998.,1200.,1400.,1600.,1800.,2000.,
     /2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,
     /9000.,10000.,12000.,14000.,16000./ 
      DATA YION1/0.0,.0052,.0117,.024,.034,.047,.061,.073,.087,.105,    
     /.124,.143,.164,.184,.205,.225,.247,.269,.288,.306,   
     /.326,.406,.486,.563,.640,.723,.795,.872,.980,1.12,                
     /1.25,1.32,1.39,1.43,1.47,1.50,1.51,1.53,1.53,1.53,
     /1.54,1.54,1.53,1.50,1.48,1.53,1.39,1.34,1.31,1.24,
     /1.20,1.13,1.05,.983,.923,.882,.827,.800,.761,.720,
     /.686,.671,.643,.617,.597,.522,.465,.418,.380,.350,
     /.296,.255,.225,.201,.184,.170,.155,.145,.127,.115,                
     /.105,.0965,.0823,.0726,.0654/
# SINGLE IONISATION TO O+ ASYMPTOTIC 29.93% OF COUNTING IONISATION
      DATA XION2/20.701,21.0,21.5,22.0,22.5,23.0,24.0,26.0,28.0,30.0,
     /32.0,34.0,36.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,
     /75.0,80.0,85.0,90.0,95.0,100.,108.,118.,138.,158.,
     /178.,198.,223.,248.,273.,298.,348.,398.,448.,498.,
     /548.,598.,648.,698.,748.,798.,848.,898.,948.,998.,
     /1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,
     /5000.,5500.,6000.,7000.,8000.,9000.,10000.,12000.,14000.,16000./
      DATA YION2/0.0,.00218,.00582,.0094,.0131,.0167,.0287,.0531,.0781,
     /.114,
     /.151,.186,.222,.281,.353,.428,.486,.541,.593,.633,
     /.661,.692,.723,.741,.758,.767,.785,.786,.780,.770,
     /.759,.736,.709,.680,.648,.620,.570,.530,.490,.459,
     /.426,.398,.376,.361,.338,.321,.309,.292,.284,.276,
     /.241,.215,.193,.176,.162,.137,.118,.104,.0928,.0850,
     /.0784,.0718,.0670,.0587,.0533,.0485,.0446,.0380,.0335,.0302/
# DOUBLE IONISATION TO O+ + O+ FROM  TIAN AND VIDAL 
# ASYMPTOTIC EXTENSION  4.46% OF COUNTING IONISATION.
      DATA XION3/38.46,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,
     /175.,200.,225.,250.,275.,300.,350.,400.,450.,500.,
     /550.,600.,650.,700.,750.,800.,850.,900.,950.,1000.,
     /1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,
     /5000.,5500.,6000.,7000.,8000.,9000.,10000.,12000.,14000.,16000./
      DATA YION3/0.0,.0099,.0207,.0409,.0615,.0793,.0966,.110,.129,.136,
     /.132,.128,.121,.113,.106,.100,.0885,.0804,.0718,.0667,
     /.0607,.0592,.0560,.0538,.0504,.0478,.0460,.0435,.0423,.0411,
     /.0359,.0320,.0288,.0262,.0241,.0204,.0176,.0155,.0138,.0127,
     /.0117,.0107,.00998,.00875,.00794,.00723,.00665,.00566,.00499,
     /.00450/
# DOUBLE IONISATION TO O++ + O   FROM TIAN AND VIDAL AND LINDSAY
# ASYMTOTIC EXTENSION 0.61% OF COUNTING IONISATION
      DATA XION4/68.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,225.,
     /250.,275.,300.,350.,400.,450.,500.,550.,600.,650.,
     /700.,750.,800.,850.,900.,950.,1000.,1200.,1400.,1600.,
     /1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,
     /7000.,8000.,9000.,10000.,12000.,14000.,16000./
      DATA YION4/0.0,.000561,.00176,.00453,.00568,.0106,.0128,.0141,
     /.0152,.0149,
     /.0144,.0140,.0129,.0122,.0113,.0103,.00932,.00837,.00805,.00762,
     /.00732,.00685,.00650,.00626,.00592,.00575,.00559,.00488,.00435,
     /.00392,
     /.00356,.00328,.00277,.00239,.00211,.00188,.00173,.00159,.00146,
     /.00136,
     /.00119,.00108,.000983,.000904,.000770,.000679,.000612/     
# TREBLE IONISATION TO  O++ + O+  FROM TIAN AND VIDAL
# ASYMPTOTIC EXTENSION 0.25% OF COUNTING IONISATION
      DATA XION5/90.0,100.,125.,150.,175.,200.,225.,250.,275.,300.,
     /350.,400.,450.,500.,550.,600.,650.,700.,750.,800.,
     /850.,900.,950.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,
     /3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,
     /10000.,12000.,14000.,16000./
      DATA YION5/0.0,.000565,.00248,.00466,.00619,.00712,.00761,.00763,
     /.00733,.00711,
     /.00627,.00554,.00477,.00414,.00371,.00329,.00311,.00299,.00280,
     /.00266,
     /.00256,.00242,.00235,.00228,.00199,.00178,.00160,.00145,.00134,
     /.00113,
     /.000977,.000862,.000768,.000707,.000650,.000597,.000556,.000486,
     /.000441,.000402,
     /.000369,.000315,.000278,.000250/  
# OXYGEN K-SHELL IONISATION X-SECTION (MULTIPLY BY 2 FOR MOLECULE)
      DATA XKSH/532.,541.,557.,574.,591.,609.,627.,646.,665.,685.,
     /706.,727.,749.,793.,841.,891.,944.,1000.,1090.,1188.,
     /1296.,1496.,1679.,1884.,2054.,2238.,2512.,2985.,3981.,5012.,
     /7079.,1.00D4,1.50D4,2.05D4,2.51D4,3.07D4,4.10D4,5.01D4,6.13D4,
     /7.08D4,
     /8.18D4,1.00D5,1.54D5,2.05D5,2.99D5,4.10D5,5.01D5,6.13D5,7.08D5,
     /8.18D5,
     /1.00D6,1.25D6,1.50D6,2.05D6,3.07D6,4.10D6,5.01D6,6.13D6,7.08D6,
     /8.18D6,
     /1.00D7,1.26D7,1.50D7,2.05D7,3.07D7,4.10D7,5.01D7,6.13D7,7.08D7,
     /8.18D7,
     /1.00D8,1.26D8,1.50D8,2.05D8,3.07D8,4.10D8,5.01D8,6.13D8,7.08D8,
     /8.18D8,
     /1.00D9/
      DATA YKSH/0.00,3.31D-5,8.86D-5,1.42D-4,1.95D-4,2.45D-4,2.94D-4,
     /3.41D-4,3.87D-4,4.31D-4,
     /4.73D-4,5.14D-4,5.53D-4,6.27D-4,6.95D-4,7.56D-4,8.13D-4,8.63D-4,
     /9.29D-4,9.84D-4,
     /1.03D-3,1.08D-3,1.10D-3,1.11D-3,1.11D-3,1.10D-3,1.08D-3,1.03D-3,
     /9.24D-4,8.27D-4,
     /6.81D-4,5.49D-4,4.18D-4,3.35D-4,2.90D-4,2.50D-4,2.04D-4,1.77D-4,
     /1.53D-4,1.39D-4,
     /1.26D-4,1.11D-4,
     /8.62D-5,7.45D-5,6.36D-5,5.75D-5,5.48D-5,5.29D-5,5.20D-5,5.13D-5,
     /5.08D-5,5.08D-5,5.12D-5,5.24D-5,5.47D-5,5.68D-5,5.84D-5,6.00D-5,
     /6.13D-5,6.26D-5,
     /6.44D-5,6.65D-5,6.81D-5,7.11D-5,7.50D-5,7.78D-5,7.97D-5,8.17D-5,
     /8.31D-5,8.45D-5,
     /8.65D-5,8.87D-5,9.04D-5,9.36D-5,9.75D-5,1.00D-4,1.02D-4,1.04D-4,
     /1.06D-4,1.07D-4,
     /1.09D-4/
# BREMSSTRAHLUNG X-SECTION WITH CUT OFF UNITS 10**-24 CM**2
      DATA Z8T/477.,294.,145.,81.6,45.8,21.2,12.2,7.69,5.22,4.76,
     /4.84,4.99,5.10,5.20,5.27,5.38,5.46,5.58,5.65,5.72,
     /5.77,5.80,5.81,5.83,5.84/
      DATA EBRM/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,
     /2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,
     /4.E7,5.E7,6.E7,8.E7,1.E8/
#  THREE BODY ATTACHMENT 
#  TABLE IN UNITS OF 10**-16 FOR P=760 TORR AND T=20 CELSIUS               
      DATA X3ATT/0.058,.065,.073,.083,.089,.095,.103,.109,0.20,0.21,
     /0.23,0.32,0.33,0.35,0.44,0.45,0.47,0.56,0.57,0.59,
     /0.68,0.69,0.71,0.79,0.80,0.82,0.90,0.91,0.93,1.02,
     /1.03,1.05/
      DATA Y3ATT/.000,.0704,.1394,.4477,.1042,.2091,.4477,.000,.000,
     /.0934,
     /.000,.000,.0602,.000,.000,.0380,.000,.000,.0288,.000,
     /.000,.0210,.000,.000,.0184,.000,.000,.0144,.000,.000,
     /.0110,.000/    
#  DISSOCIATIVE ATTACHMENT    RAPP AND BRIGLIA 
#    SCALED BY *0.72 AND ENERGY OFFSET BY -0.3EV
      DATA XATT/3.90,4.10,4.30,4.50,4.70,4.90,5.10,5.30,5.50,5.70,      
     /5.90,6.00,6.10,6.20,6.30,6.40,6.50,6.70,6.90,7.10,                
     /7.30,7.50,7.70,7.90,8.10,8.30,8.50,8.70,9.10,9.70,                
     /11.7/                                                
      DATA YATT/0.00,.000187,.000504,.000950,.00158,.00259,.00386,
     /.00538,.00690,.00821,                                            
     /.00943,.00979,.01008,.01015,.01008,.00986,.00965,.00864,.00763,
     /.00646,     
     /.00531,.00411,.00323,.00240,.00171,.00120,.000886,.000634,.000382,
     /.000202,.000072/                                  
#  EXCITATION TO VIBRATIONALLY SUMMED A1 DELTA G   ALLAN 1995
# SCALED BY 1/E**2 ABOVE 40 EV
      DATA XEXC1/.977,0.982,1.20,1.50,2.00,2.50,3.00,3.50,4.00,4.50,
     /5.00,5.50,6.00,6.50,7.00,7.50,8.00,8.50,9.00,9.50,
     /10.0,10.5,11.0,11.5,12.0,12.5,13.0,13.5,14.0,15.0,
     /16.0,17.0,18.0,20.0,22.0,25.0,28.0,31.0,35.0,40.0/
      DATA YEXC1/0.00,.00102,.00407,.00712,.0122,.0168,.0265,.0397,
     /.0539,.0661,
     /.0783,.0906,.0977,.0997,.0987,.0967,.0936,.0906,.0865,.0834,
     /.0794,.0763,.0743,.0722,.0692,.0682,.0651,.0621,.0605,.0539,
     /.0488,.0448,.0407,.0346,.0305,.0249,.0214,.0188,.0153,.0122/
#  EXCITATION TO VIBRATIONALLY SUMMED  B1 SIGMA G+  ALLAN 1995  
# SCALED BY 1/E**2 ABOVE 17 EV     
      DATA XEXC2/1.627,1.640,2.00,2.50,3.00,3.50,4.00,4.50,5.00,5.50,
     /6.00,6.50,7.00,7.50,8.00,8.50,9.00,9.50,10.0,10.5,
     /11.0,12.0,13.0,14.0,15.0,17.0,20.0,25.0,30.0,35.0,
     /40.0/
      DATA YEXC2/0.0,.00102,.00214,.00407,.00651,.00916,.0116,.0153,
     /.0198,.0234,
     /.0254,.0244,.0224,.0214,.0204,.0193,.0188,.0183,.0178,.0173,
     /.0168,.0163,.0153,.0148,.0142,.0132,.0112,.00906,.00733,.00631,
     /.00519/
# EXCITATION SUM OF C1SIGMA A#3DELTA AND A3SIGMA  HERZBERG CONTINUUM
# SPLIT INTO THREE ENERGY LOSSES AT 5.5 6.0 AND 6.5 EV
# PART1
      DATA XEXC3/5.50,6.00,6.50,7.00,7.50,8.00,9.00,10.0,11.0,12.0,
     /14.0,16.0,18.0,20.0,30.0,45.0/
      DATA YEXC3/0.00,.0224,.0224,.0244,.0285,.0305,.0356,.0366,.0366,
     /.0356,
     /.0326,.0305,.0295,.0265,.0163,.0116/
# PART 2
      DATA XEXC4/6.00,6.50,7.00,7.50,8.00,9.00,10.0,11.0,12.0,14.0,
     /16.0,18.0,20.0,30.0,45.0/
      DATA YEXC4/0.00,.0448,.0549,.0560,.0611,.0712,.0733,.0733,.0733,
     /.0672,
     /.0631,.0590,.0539,.0315,.0234/
# PART 3
      DATA XEXC5/6.50,7.00,7.50,8.00,9.00,10.0,11.0,12.0,14.0,16.0,
     /18.0,20.0,30.0,45.0/
      DATA YEXC5/0.00,.0183,.0254,.0305,.0356,.0366,.0366,.0356,.0326,
     /.0305,
     /.0295,.0265,.0163,.0116/  
# SUM OF TRIPLET STATES AT 8.20 EV AND RESONANT PART OF S-R CONTINUUM
      DATA XEXC6/8.20,10.0,11.0,12.0,13.0,15.0,17.0,20.0,23.0,27.0,
     /30.0,40.0,50.0,80.0/
      DATA YEXC6/0.00,0.21,0.36,0.46,0.50,0.52,0.52,0.46,0.39,0.32,
     /0.29,0.24,.205,.135/
# RESONANT PART OF LONG BAND
      DATA XEXC7/9.972,11.0,12.0,14.0,16.0,18.0,20.0,24.0,28.0,32.0,
     /36.0,40.0,60.0,80.0/
      DATA YEXC7/0.00,.022,.038,.050,.053,.055,.056,.051,.042,.035,
     /.030,.026,.017,.013/
# TRIPLET STATE SUM BELOW IONISATION
      DATA XEXC8/10.6,12.0,13.0,14.0,16.0,18.0,20.0,24.0,28.0,32.0,
     /36.0,40.0,50.0,60.0,80.0/         
      DATA YEXC8/0.0,.0878,.130,.145,.159,.169,.173,.156,.135,.111, 
     /.097,.087,.067,.055,.040/       
# TRIPLET STATE SUM ABOVE IONISATION
      DATA XEXC9/13.1,14.0,15.0,16.0,18.0,20.0,24.0,28.0,32.0,36.0,
     /40.0,50.0,60.0,80.0/       
      DATA YEXC9/0.0,.0658,.122,.142,.157,.169,.174,.163,.146,.125,
     /.111,.087,.073,.054/          
# ROTATIONAL RESONANCE FROM VIBRATIONS (PHELPS)                      
      DATA XROT/.020,.021,.025,0.07,0.08,0.10,0.20,0.21,0.22,0.32,
     /0.33,0.35,0.44,0.45,0.47,0.56,0.57,0.59,0.68,0.69,
     /0.71,0.79,0.80,0.82,0.90,0.91,0.93,1.02,1.03,1.05,
     /1.13,1.14,1.16,1.23,1.24,1.26,1.34,1.35,1.37,1.44,
     /1.45,1.47,1.54,1.55,1.57,1.64,1.65,1.67/                         
      DATA YROT/0.00,0.00,0.00,0.00,.0054,.00,0.00,.0216,.00,.000,
     /.0384,.00,0.00,.054,0.00,0.00,.067,0.00,0.00,0.08,
     /0.00,0.00,.094,0.00,0.00,.084,0.00,0.00,.072,0.00,
     /0.00,.047,0.00,0.00,.040,0.00,0.00,.036,0.00,0.00,
     /.024,0.00,0.00,.012,0.00,0.00,.0048,0.00/
# ----------------------------------------------------------------------
# 2005:
#--------
#  X-SECTIONS DERIVED FROM LAWTON AND PHELPS : J.CHEM.PHYS. 69(1978)1055
#  VIBRATIONAL X-SECTION ADJUSTED TO FIT ARGON MIXTURE DATA OF:
#  JEON AND NAKAMURA  J.APPL.PHYS D 31(1998) 2145-2150
#  ELASTIC X-SECTION DERIVED FROM FIT TO PURE OXYGEN DATA OF:
#  JEON AND NAKAMURA  (AS ABOVE)  AT HIGH FIELD ,
#  AND THE DATA AT LOW FIELD OF :
#  CROMPTON AND ELFORD AUST. J. PHYS. 26(1973)771-782
#  REID AND CROMPTON   AUST. J. PHYS. 33(1980)215-216  
#  N.B THE 3-BODY ATTACHMENT X-SECTION IS INCLUDED IN THE def.           
#  ------------------------------------------------------------------
# 2015:
#-------
#  UPDATED FIT TO ABOVE DATA NOW ALSO  INCLUDES TOWNS# end DATA UP TO 
#  2000TD FROM :
#  YOSHIDA ET AL  J.PHYS.D.29(1996)2124
#
#  ALSO USED OSCILLATOR STRENGTH FOR DIPOLE STATES FROM BRION DATA BASE
#  AND IONISATION EFFICIENCY FROM :
#  HOLLAND ET AL  CHEM. PHYS 173(1993)315
#
#  IN ORDER TO EXTRACT NEUTRAL DISSOCIATION X-SECTION FOR DIPOLE STATES.
#  THE 3-BODY X-SECTION SHAPE IS SIMILAR TO THAT USED IN 2005 FROM:
#  SPENCE AND SHULTZ  PHYS REV A5(1972)724 
#
#  THE FIT TO THE TOWNS# end REQUIRED THE INTRODUCTION OF TWO EFFECTIVE
#  NON DIPOLE STATES ABOVE AND BELOW THE IONISATION ENERGY THAT CONTAIN
#  THE SUM OF ALL NON DIPOLE STATES IN THESE ENERGY REGIONS.
#
# THE IONISATION HAS BEEN SPLIT INTO DISSOCIATIVE AND NON DISSOCIATIVE
# IONISATION CHANNELS. THE TOTAL IONISATION X-SECTION SUM IS MADE 
# CONSISTENT WITH :
# STRAUB ET AL : WEB SITE AND ALSO PHYS REV A54(1996)2146
# 
# THE TOTAL X-SECTION SUM IS WITHIN THE 1 TO 2% EXPERIMENTAL ENERGY
# MEASUREMENT ERRORS
#
# GENERALLY THE CALCULATED DRIFT VELOCITY AND DIFFUSION IS WITHIN
# 1 TO 2% OF THE EXPERIMENTAL VALUES IN PURE GAS AND ARGON MIXTURES.
# THE TOWNS# end IS WITHIN 5% OF THE MEASUREMENTS OF YOSHIDA UP TO 2000TD
#
# THE X-SECTION DATA BASE HAS BEEN EXT# endED TO 1 GEV. 
# ----------------------------------------------------------------------
# 2016:
#------
# REANALYSIS USING ROTATIONAL X-SECTION OF GELTMAN AND TAKAYANGI
#  NOTE : 
#     SCALED ESTIMATED X-SECTION OF GELTMAN AND TAKAYANGI
#     IN THE  def (ROTATIONAL DATA IN DATA ARRAYS USED SCALED
#         BY 0.75 TO GIVE THE VALUES USED IN def)     
# ----------------------------------------------------------------------
#
#      NANISO=0  
      IF(NANISO == 0):
 :
       NAME='OXYGEN  2016  ISOTROPIC  '
      else: 
       NAME='OXYGEN  2016 ANISOTROPIC ' 
      # endIF
#----------------------------------------------------------------------
#
      NION=8
      NATT=1
      NIN=148 
      NNULL=0
#
      NASIZE=4000
      NBREM=25
# BORN BETHE VALUES FOR IONISATION
      CONST=1.873884D-20
      EMASS2=1021997.804
      API=DACOS(-1.00)
      A0=0.52917720859D-8
      RY=13.60569193
      BBCONST=16.0*API*A0*A0*RY*RY/EMASS2
# AVERAGE OF CORRECTED RIEKE AND (HOLLAND +BERKOWITZ) 
      AM2=4.00
      C=43.4
# AVERAGE AUGER EMISSION FROM KSHELL
      AUGK=2.0
# SCALE ROTATION X-SECTIONS BY ROTSCALE
      ROTSCALE=0.75
# CALC FRACTIONAL POPULATION DENSITY OF ROTATIONAL STATES
      B0=1.783D-4
# ROTATIONAL QUADRUPOLE MOMENT
      QBQA=0.90
      QBK=1.67552*(QBQA*A0)**2
      DO 103 K=2,48,2
      AK=DFLOAT(K)
  103 PJ(K)=0.0
      DO 104 K=1,49,2
      AK=DFLOAT(K)
  104 PJ(K)=3.0*(2.0*AK+1.0)*math.exp(-AK*(AK+1.0)*B0/AKT)
      ASUM=0.0
      DO 105 K=1,49
  105 ASUM=ASUM+PJ(K)
      DO 106 K=1,49
  106 PJ(K)=PJ(K)/ASUM
# CALC ROTATIONAL TRANSITION ENERGIES
      EIN(1)=-10.0*B0
      EIN(25)=-EIN(1)
      DO 107 K=2,24
      J=K-1
      AJ=DFLOAT(J)
      EIN(K+24)=EIN(25)+AJ*8.0*B0
  107 EIN(K)=-EIN(K+24)
#  
      DO 11 J=1,NIN
      IZBR(J)=0
   11 CONTINUE
      IZBR(NIN+1)=8
#
      DO 1 J=1,6
    1 KEL(J)=NANISO
      DO 2 J=1,NIN
    2 KIN(J)=NANISO
#                                                          
      NROT=48
      NROT13=63
      NROT35=55
      NROT57=55
      NROT79=50
      NROT911=48
      NROT1113=46
      NROT1315=45
      NROT1517=44
      NROT1719=43
      NROT1921=41
      NROT2123=40
      NROT2325=39
      NROT2527=38
      NROT2729=37
      NROT2931=36
      NROT3133=34
      NROT3335=33
      NROT3537=32
      NROT3739=32
      NROT3941=31
      NROT4143=31
      NROT4345=30
      NROT4547=30
      NROT4749=29
      NELA=153                                          
      NVIB=60 
      NATT1=31   
      N3ATT=32                                                      
      NEXC1=40                                                          
      NEXC2=31                                                          
      NEXC3=16                                                          
      NEXC4=15                                                          
      NEXC5=14          
      NEXC6=14
      NEXC7=14  
      NEXC8=15
      NEXC9=14                          
      NIONC=85
      NION1=85
      NION2=70
      NION3=50
      NION4=47
      NION5=44  
      NKSH=81
#                                                        
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(31.9988*AMU)                                      
      E(3)=12.071                                                       
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
#
      EION(1)=12.071
      EION(2)=16.104
      EION(3)=18.171
      EION(4)=20.701
      EION(5)=38.46
      EION(6)=68.0
      EION(7)=90.0
      EION(8)=532.0
#
      EIN(49)=-0.193                                                  
      EIN(50)=0.193                                                     
      EIN(51)=0.385                                                     
      EIN(52)=0.568                                                    
      EIN(53)=0.749 
      EIN(54)=0.929                                                     
      EIN(55)=0.977
      EIN(56)=1.108
      EIN(57)=1.282      
      EIN(58)=1.458                                            
      EIN(59)=1.627 
      EIN(60)=1.629
      EIN(61)=1.798
      EIN(62)=1.965
      EIN(63)=2.127
      EIN(64)=2.283
      EIN(65)=2.430
      EIN(66)=2.585
      EIN(67)=2.739
      EIN(68)=2.883
      EIN(69)=3.023
      EIN(70)=3.168
      EIN(71)=3.316  
      EIN(72)=3.46                                                   
      EIN(73)=5.50
      EIN(74)=6.00
      EIN(75)=6.50
      EIN(76)=6.98               
      EIN(77)=7.08
      EIN(78)=7.25
      EIN(79)=7.35
      EIN(80)=7.45
      EIN(81)=7.55
      EIN(82)=7.65
      EIN(83)=7.75
      EIN(84)=7.85
      EIN(85)=7.95
      EIN(86)=8.05
      EIN(87)=8.15
      EIN(88)=8.20
      EIN(89)=8.25
      EIN(90)=8.35
      EIN(91)=8.45
      EIN(92)=8.55
      EIN(93)=8.65
      EIN(94)=8.75
      EIN(95)=8.85
      EIN(96)=8.95
      EIN(97)=9.05
      EIN(98)=9.15
      EIN(99)=9.25
      EIN(100)=9.35
      EIN(101)=9.45
      EIN(102)=9.55
      EIN(103)=9.675  
      EIN(104)=9.972
      EIN(105)=10.288
      EIN(106)=10.570
      EIN(107)=10.60
      EIN(108)=10.665
      EIN(109)=10.760
      EIN(110)=10.915
      EIN(111)=11.05
      EIN(112)=11.25
      EIN(113)=11.46
      EIN(114)=11.56
      EIN(115)=11.65
      EIN(116)=11.83
      EIN(117)=11.98
      EIN(118)=12.2
      EIN(119)=12.4
      EIN(120)=12.6
      EIN(121)=12.8
      EIN(122)=13.0
      EIN(123)=13.1
      EIN(124)=13.2
      EIN(125)=13.4
      EIN(126)=13.6
      EIN(127)=13.8
      EIN(128)=14.0
      EIN(129)=14.2
      EIN(130)=14.4
      EIN(131)=14.6
      EIN(132)=14.8
      EIN(133)=15.0
      EIN(134)=15.2
      EIN(135)=15.4
      EIN(136)=15.6
      EIN(137)=15.8
      EIN(138)=16.0
      EIN(139)=16.2
      EIN(140)=16.4
      EIN(141)=16.6
      EIN(142)=16.8
      EIN(143)=17.0
      EIN(144)=17.2
      EIN(145)=17.4
      EIN(146)=17.6
      EIN(147)=17.8
      EIN(148)=18.0
#
      DO 5 J=1,NION
      EOBY(J)=12.9
    5 CONTINUE
#
      DO 7 JK=1,NION
      LEGAS(JK)=0
      ISHELL(JK)=0
      NC0(JK)=0
      EC0(JK)=0.0
      WKLM(JK)=0.0
      EFL(JK)=0.0
      NG1(JK)=0
      EG1(JK)=0.0
      NG2(JK)=0
      EG2(JK)=0.0
    7 CONTINUE
# DOUBLE CHARGED STATES
      NC0(5)=1
      EC0(5)=6.0
      NC0(6)=1
      EC0(6)=6.0
# TRIPLE CHARGED STATES
      NC0(7)=2
      EC0(7)=6.0
# FLUORESCENCE DATA
      LEGAS(8)=1
      ISHELL(8)=1
      NC0(8)=3
      EC0(8)=485.
      WKLM(8)=0.0069
      EFL(8)=518.
      NG1(8)=1
      EG1(8)=480.
      NG2(8)=2
      EG2(8)=5.0
#
      DO 9 J=1,NION
      DO 8 I=1,NASIZE
      IF(EG(I):
 > EION(J)) :
       IOFFION(J)=I-1
       GO TO 9
      # endIF
    8 CONTINUE
    9 CONTINUE
#
      DO 19 NL=1,NIN
      DO 18 I=1,NASIZE
      IF(EG(I):
 > abs(EIN(NL))) :
       IOFFN(NL)=I-1
       GO TO 19
      # endIF
   18 CONTINUE
   19 CONTINUE
#
#**********************************************************************
# ENTER PENNING TRANSFER FRACTION FOR EACH LEVEL
# SET PENNING TRANSFER FRACTION TO ZERO FOR LOW ENERGY LEVELS
      DO 21 K=1,76
      DO 21 L=1,3
   21 CONTINUE
#---------------------------------------
# PENNING TRANSFER FRACTION FOR LEVELS ABOVE 6.0EV
      DO 22 K=76,NIN
      PENFRA[1,K]=0.0
# PENNING TRANSFER DISTANCE IN MICRONS
      PENFRA[2,K]=1.0
# PENNING TRANSFER TIME IN PICOSECONDS
      PENFRA[3,K]=1.0
      IF(IPEN == 0):
 GO TO 22
      WRITE(6,999) NAME,EIN(K),PENFRA[1,K],PENFRA[2,K],PENFRA[3,K]
  999 FORMAT(' GAS = ',A25,' ENERGY LEVEL = ',F7.4,' EV.',/,' PENNING PR
     /OBABILITY = ',F5.3,' ABS.LENGTH = ',F7.2,' DECAY TIME = ',F7.1,/)
   22 CONTINUE
#**********************************************************************
#
      SCRPT(1)='                                                  '
      IF(NANISO == 0):
 :
       SCRPT(2)=' ELASTIC  ISOTROPIC      OXYGEN                   '
      else:
       SCRPT(2)=' ELASTIC ANISOTROPIC     OXYGEN                   '
      # endIF
      SCRPT(3)=' IONISATION  O2+ X2PI              ELOSS= 12.072  '
      SCRPT(4)=' IONISATION  O2+ A4PI              ELOSS= 16.104  '
      SCRPT(5)=' IONISATION  O2+ B4SIGMA           ELOSS= 18.171  '
      SCRPT(6)=' DISSOC ION  O+  + O               ELOSS= 20.701  '
      SCRPT(7)=' DISSOC ION  O+  + O+              ELOSS= 38.46   '
      SCRPT(8)=' DISSOC ION  O++ + O               ELOSS= 68.0    '
      SCRPT(9)=' DISSOC ION  O++ + O+              ELOSS= 90.0    '
      SCRPT(10)=' IONISATION K-SHELL                ELOSS=532.0    '
      SCRPT(11)=' ATTACHMENT 2+3 BODY                              '
      SCRPT(12)='                                                  '
      SCRPT(13)='                                                  '
      SCRPT(14)=' ROTATION 3-1                    ELOSS= -0.0017830'
      SCRPT(15)=' ROTATION 5-3                    ELOSS= -0.0032094'
      SCRPT(16)=' ROTATION 7-5                    ELOSS= -0.0046358'
      SCRPT(17)=' ROTATION 9-7                    ELOSS= -0.0060622'
      SCRPT(18)=' ROTATION 11-9                   ELOSS= -0.0074886'
      SCRPT(19)=' ROTATION 13-11                  ELOSS= -0.0089150'
      SCRPT(20)=' ROTATION 15-13                  ELOSS= -0.0103414'
      SCRPT(21)=' ROTATION 17-15                  ELOSS= -0.0117678'
      SCRPT(22)=' ROTATION 19-17                  ELOSS= -0.0131942'
      SCRPT(23)=' ROTATION 21-19                  ELOSS= -0.0146206'
      SCRPT(24)=' ROTATION 23-21                  ELOSS= -0.0160470'
      SCRPT(25)=' ROTATION 25-23                  ELOSS= -0.0174734'
      SCRPT(26)=' ROTATION 27-25                  ELOSS= -0.0188998'
      SCRPT(27)=' ROTATION 29-27                  ELOSS= -0.0203262'
      SCRPT(28)=' ROTATION 31-29                  ELOSS= -0.0217526'
      SCRPT(29)=' ROTATION 33-31                  ELOSS= -0.0231790'
      SCRPT(30)=' ROTATION 35-33                  ELOSS= -0.0246054'
      SCRPT(31)=' ROTATION 37-35                  ELOSS= -0.0260318'
      SCRPT(32)=' ROTATION 39-37                  ELOSS= -0.0274582'
      SCRPT(33)=' ROTATION 41-39                  ELOSS= -0.0288846'
      SCRPT(34)=' ROTATION 43-41                  ELOSS= -0.0303110'
      SCRPT(35)=' ROTATION 45-43                  ELOSS= -0.0317374'
      SCRPT(36)=' ROTATION 47-45                  ELOSS= -0.0331638'
      SCRPT(37)=' ROTATION 49-47                  ELOSS= -0.0345902'
      SCRPT(38)=' ROTATION 1-3                    ELOSS=  0.0017830'
      SCRPT(39)=' ROTATION 3-5                    ELOSS=  0.0032094'
      SCRPT(40)=' ROTATION 5-7                    ELOSS=  0.0046358'
      SCRPT(41)=' ROTATION 7-9                    ELOSS=  0.0060622'
      SCRPT(42)=' ROTATION 9-11                   ELOSS=  0.0074886'
      SCRPT(43)=' ROTATION 11-13                  ELOSS=  0.0089150'
      SCRPT(44)=' ROTATION 13-15                  ELOSS=  0.0103414'
      SCRPT(45)=' ROTATION 15-17                  ELOSS=  0.0117678'
      SCRPT(46)=' ROTATION 17-19                  ELOSS=  0.0131942'
      SCRPT(47)=' ROTATION 19-21                  ELOSS=  0.0146206'
      SCRPT(48)=' ROTATION 21-23                  ELOSS=  0.0160470'
      SCRPT(49)=' ROTATION 23-25                  ELOSS=  0.0174734'
      SCRPT(50)=' ROTATION 25-27                  ELOSS=  0.0188998'
      SCRPT(51)=' ROTATION 27-29                  ELOSS=  0.0203262'
      SCRPT(52)=' ROTATION 29-31                  ELOSS=  0.0217526'
      SCRPT(53)=' ROTATION 31-33                  ELOSS=  0.0231790'
      SCRPT(54)=' ROTATION 33-35                  ELOSS=  0.0246054'
      SCRPT(55)=' ROTATION 35-37                  ELOSS=  0.0260318'
      SCRPT(56)=' ROTATION 37-39                  ELOSS=  0.0274582'
      SCRPT(57)=' ROTATION 39-41                  ELOSS=  0.0288846'
      SCRPT(58)=' ROTATION 41-43                  ELOSS=  0.0303110'
      SCRPT(59)=' ROTATION 43-45                  ELOSS=  0.0317374'
      SCRPT(60)=' ROTATION 45-47                  ELOSS=  0.0331638'
      SCRPT(61)=' ROTATION 47-49                  ELOSS=  0.0345902'
      SCRPT(62)=' VIB V1                            ELOSS= -0.193  '
      SCRPT(63)=' VIB V1                            ELOSS=  0.193  '
      SCRPT(64)=' VIB 2V1                           ELOSS=  0.385  '
      SCRPT(65)=' VIB 3V1                           ELOSS=  0.568  '
      SCRPT(66)=' VIB 4V1                           ELOSS=  0.749  '
      SCRPT(67)=' VIB 5V1                           ELOSS=  0.929  '
      SCRPT(68)=' A1(DEL)G VIB SUMMED               ELOSS=  0.977  '
      SCRPT(69)=' VIB 6V1                           ELOSS=  1.108  '
      SCRPT(70)=' VIB 7V1                           ELOSS=  1.282  '
      SCRPT(71)=' VIB 8V1                           ELOSS=  1.458  '
      SCRPT(72)=' B1(SIG)G VIB SUMMED               ELOSS=  1.627  '
      SCRPT(73)=' VIB 9V1                           ELOSS=  1.629  '
      SCRPT(74)=' VIB 10V1                          ELOSS=  1.798  '
      SCRPT(75)=' VIB 11V1                          ELOSS=  1.965  '
      SCRPT(76)=' VIB 12V1                          ELOSS=  2.127  '
      SCRPT(77)=' VIB 13V1                          ELOSS=  2.283  '
      SCRPT(78)=' VIB 14V1                          ELOSS=  2.430  '
      SCRPT(79)=' VIB 15V1                          ELOSS=  2.585  '
      SCRPT(80)=' VIB 16V1                          ELOSS=  2.739  '
      SCRPT(81)=' VIB 17V1                          ELOSS=  2.883  '
      SCRPT(82)=' VIB 18V1                          ELOSS=  3.023  '
      SCRPT(83)=' VIB 19V1                          ELOSS=  3.168  '
      SCRPT(84)=' VIB 20V1                          ELOSS=  3.316  '
      SCRPT(85)=' VIB SUM 21V1-30V1                 ELOSS=  3.46   '
      SCRPT(86)=' C1SIG + A#3DEL + A3SIG            ELOSS=  5.50   '
      SCRPT(87)=' C1SIG + A#3DEL + A3SIG            ELOSS=  6.00   '
      SCRPT(88)=' C1SIG + A#3DEL + A3SIG            ELOSS=  6.50   '
      SCRPT(89)=' B3SIG SUMMED V=7-20 F=.000262     EL0SS=  6.98   '
      SCRPT(90)=' DISSOCIATION  S-R  F=0.000408     ELOSS=  7.08   '
      SCRPT(91)=' DISSOCIATION  S-R  F=0.000623     ELOSS=  7.25   '
      SCRPT(92)=' DISSOCIATION  S-R  F=0.001016     ELOSS=  7.35   '
      SCRPT(93)=' DISSOCIATION  S-R  F=0.001562     ELOSS=  7.45   '
      SCRPT(94)=' DISSOCIATION  S-R  F=0.002312     ELOSS=  7.55   '
      SCRPT(95)=' DISSOCIATION  S-R  F=0.003234     ELOSS=  7.65   '
      SCRPT(96)=' DISSOCIATION  S-R  F=0.004362     ELOSS=  7.75   '
      SCRPT(97)=' DISSOCIATION  S-R  F=0.005573     ELOSS=  7.85   '
      SCRPT(98)=' DISSOCIATION  S-R  F=0.006930     ELOSS=  7.95   '
      SCRPT(99)=' DISSOCIATION  S-R  F=0.008342     ELOSS=  8.05   '
      SCRPT(100)=' DISSOCIATION  S-R  F=0.009692     ELOSS=  8.15   '
      SCRPT(101)=' DISSOCIATION  S-R NON-DIPOLE      ELOSS=  8.20   '
      SCRPT(102)=' DISSOCIATION  S-R  F=0.010816     ELOSS=  8.25   '
      SCRPT(103)=' DISSOCIATION  S-R  F=0.011839     ELOSS=  8.35   '
      SCRPT(104)=' DISSOCIATION  S-R  F=0.012580     ELOSS=  8.45   '
      SCRPT(105)=' DISSOCIATION  S-R  F=0.013160     ELOSS=  8.55   '
      SCRPT(106)=' DISSOCIATION  S-R  F=0.013432     ELOSS=  8.65   '
      SCRPT(107)=' DISSOCIATION  S-R  F=0.013571     ELOSS=  8.75   '
      SCRPT(108)=' DISSOCIATION  S-R  F=0.013425     ELOSS=  8.85   '
      SCRPT(109)=' DISSOCIATION  S-R  F=0.012948     ELOSS=  8.95   '
      SCRPT(110)=' DISSOCIATION  S-R  F=0.010892     ELOSS=  9.05   '
      SCRPT(111)=' DISSOCIATION  S-R  F=0.006688     ELOSS=  9.15   '
      SCRPT(112)=' DISSOCIATION  S-R  F=0.002784     ELOSS=  9.25   '
      SCRPT(113)=' DISSOCIATION  S-R  F=0.001767     ELOSS=  9.35   '
      SCRPT(114)=' DISSOCIATION  S-R  F=0.000633     ELOSS=  9.45   '
      SCRPT(115)=' DISSOCIATION  S-R  F=0.000438     ELOSS=  9.55   '
      SCRPT(116)=' DISSOCIATION  S-R  F=0.000465     ELOSS=  9.675  '
      SCRPT(117)=' DISSOC E3SIGMA V=0 F=0.008432     ELOSS=  9.972  '
      SCRPT(118)=' DISSOC E3SIGMA V=1 F=0.007598     ELOSS= 10.288  '
      SCRPT(119)=' DISSOC E3SIGMA V=2 F=0.000829     ELOSS= 10.570  '
      SCRPT(120)=' DISSOC TRIPLET SUM BELOW IP       ELOSS= 10.60   '
      SCRPT(121)=' DISSOC             F=0.000644     ELOSS= 10.665  '
      SCRPT(122)=' DISSOC             F=0.001460     ELOSS= 10.760  '
      SCRPT(123)=' DISSOC             F=0.000818     ELOSS= 10.915  '
      SCRPT(124)=' DISSOC             F=0.000736     ELOSS= 11.05   '
      SCRPT(125)=' DISSOC             F=0.000598     ELOSS= 11.25   '
      SCRPT(126)=' DISSOC             F=0.001482     ELOSS= 11.46   '
      SCRPT(127)=' DISSOC             F=0.000425     ELOSS= 11.56   '
      SCRPT(128)=' DISSOC             F=0.001669     ELOSS= 11.65   '
      SCRPT(129)=' DISSOC             F=0.001766     ELOSS= 11.83   '
      SCRPT(130)=' DISSOC             F=0.001613     ELOSS= 11.98   '
      SCRPT(131)=' DISSOC             F=0.001746     ELOSS= 12.20   '
      SCRPT(132)=' DISSOC             F=0.003329     ELOSS= 12.40   '
      SCRPT(133)=' DISSOC             F=0.006264     ELOSS= 12.60   '
      SCRPT(134)=' DISSOC             F=0.013580     ELOSS= 12.80   '
      SCRPT(135)=' DISSOC             F=0.011373     ELOSS= 13.00   '
      SCRPT(136)=' DISSOC TRIPLET SUM ABOVE IP       ELOSS= 13.1    '
      SCRPT(137)=' DISSOC             F=0.006052     ELOSS= 13.20   '
      SCRPT(138)=' DISSOC             F=0.006051     ELOSS= 13.40   '
      SCRPT(139)=' DISSOC             F=0.004993     ELOSS= 13.60   '
      SCRPT(140)=' DISSOC             F=0.005045     ELOSS= 13.80   '
      SCRPT(141)=' DISSOC             F=0.004962     ELOSS= 14.00   '
      SCRPT(142)=' DISSOC             F=0.006520     ELOSS= 14.20   '
      SCRPT(143)=' DISSOC             F=0.008432     ELOSS= 14.40   '
      SCRPT(144)=' DISSOC             F=0.011304     ELOSS= 14.60   '
      SCRPT(145)=' DISSOC             F=0.015172     ELOSS= 14.80   '
      SCRPT(146)=' DISSOC             F=0.022139     ELOSS= 15.00   '
      SCRPT(147)=' DISSOC             F=0.032682     ELOSS= 15.20   '
      SCRPT(148)=' DISSOC             F=0.039457     ELOSS= 15.40   '
      SCRPT(149)=' DISSOC             F=0.029498     ELOSS= 15.60   '
      SCRPT(150)=' DISSOC             F=0.018923     ELOSS= 15.80   '
      SCRPT(151)=' DISSOC             F=0.017762     ELOSS= 16.00   '
      SCRPT(152)=' DISSOC             F=0.015115     ELOSS= 16.20   '
      SCRPT(153)=' DISSOC             F=0.013220     ELOSS= 16.40   '
      SCRPT(154)=' DISSOC             F=0.009540     ELOSS= 16.60   '
      SCRPT(155)=' DISSOC             F=0.005854     ELOSS= 16.80   '
      SCRPT(156)=' DISSOC             F=0.008733     ELOSS= 17.00   '
      SCRPT(157)=' DISSOC             F=0.007914     ELOSS= 17.20   '
      SCRPT(158)=' DISSOC             F=0.008002     ELOSS= 17.40   '
      SCRPT(159)=' DISSOC             F=0.006519     ELOSS= 17.60   '
      SCRPT(160)=' DISSOC             F=0.003528     ELOSS= 17.80   '
      SCRPT(161)=' DISSOC             F=0.001469     ELOSS= 18.00   '
# CALCULATE DENSITY CORRECTION FOR THREE BODY ATTACHMENT CROSS-SECTION  
      FAC=273.15*TORR/((TEMPC+273.15)*760.0)                            
# FIRST VIBRATIONAL LEVEL POPULATION
      APOP2=math.exp(EIN(49)/AKT)                                           
#     EN=-ESTEP/2.0                                      
      DO 9900 I=1,NSTEP    
      EN=EG(I)                            
#     EN=EN+ESTEP   
      GAMMA1=(EMASS2+2.00*EN)/EMASS2
      GAMMA2=GAMMA1*GAMMA1
      BETA=math.sqrt(1.00-1.00/GAMMA2)
      BETA2=BETA*BETA
#
# ELASTIC
      DO 12 J=2,NELA
      IF(EN <= XELA[J]):
 GO TO 23 
   12 CONTINUE
      J=NELA
   23 A=(YELA[J]-YELA[J-1])/(XELA[J]-XELA[J-1])
      B=(XELA[J-1]*YELA[J]-XELA[J]*YELA[J-1])/(XELA[J-1]-XELA[J])
# ELASTIC
      QELA=(A*EN+B)*1.D-16
      A=(YMOM(J)-YMOM(J-1))/(XELA[J]-XELA[J-1])
      B=(XELA[J-1]*YMOM(J)-XELA[J]*YMOM(J-1))/(XELA[J-1]-XELA[J])
# MOMENTUM TRANSFER
      QMOM=(A*EN+B)*1.D-16
      A=(YEPS(J)-YEPS(J-1))/(XELA[J]-XELA[J-1])
      B=(XELA[J-1]*YEPS(J)-XELA[J]*YEPS(J-1))/(XELA[J-1]-XELA[J])
# ANISOTROPY defS
      PQ2=A*EN+B
# EPSILON =1.0-YEPS
      PQ2=1.00-PQ2
      PQ1=0.5+(QELA-QMOM)/QELA
      IF(NANISO == 0):
 PEQEL(2,I)=0.5
      IF(NANISO == 1):
 PEQEL(2,I)=PQ1
      IF(NANISO == 2):
 PEQEL(2,I)=PQ2
      Q(2,I)=QELA
      IF(NANISO == 0):
 Q(2,I)=QMOM
#                                         
# IONISATION CALCULATION

      DO 50 J=1,NION
      PEQION(J,I)=0.5
      IF(NANISO == 2):
 PEQION(J,I)=0.0
   50 QION(J,I)=0.0  
# IONISATION TO ALL CHANNELS WITH O2+
# IONISATION TO O2+ X2PI
      IF(EN <= EION(1):
) GO TO 54
      IF(EN > XION1(NION1):
) GO TO 53 
      DO 51 J=2,NION1
      IF(EN <= XION1(J):
) GO TO 52
   51 CONTINUE
      J=NION1
   52 A=(YION1(J)-YION1(J-1))/(XION1(J)-XION1(J-1))
      B=(XION1(J-1)*YION1(J)-XION1(J)*YION1(J-1))/(XION1(J-1)-XION1(J))
      QION(1,I)=(A*EN+B)*1.D-16
      GO TO 54
# USE BORN BETHE ABOVE XION1(NION1) EV
   53 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(1,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.6475*0.558
# IONISATION TO O2+ A4PI
   54 IF(EN <= EION(2)) GO TO 58
      IF(EN > XION1(NION1):
) GO TO 57
      EOFF=EN-(EION(2)-EION(1))
      DO 55 J=1,NION1
      IF(EOFF <= XION1(J):
) GO TO 56
   55 CONTINUE
      J=NION1
   56 A=(YION1(J)-YION1(J-1))/(XION1(J)-XION1(J-1))
      B=(XION1(J-1)*YION1(J)-XION1(J)*YION1(J-1))/(XION1(J-1)-XION1(J))
      QION(2,I)=(A*EOFF+B)*1.D-16*0.308
# CORRECT QION(1,I)
      QION(1,I)=QION(1,I)-QION(2,I)
      GO TO 58
# USE BORN BETHE ABOVE XION1(NION1) EV
   57 QION(2,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.6475*0.308
# IONISATION TO O2+ B4SIGMA
   58 IF(EN <= EION(3)) GO TO 62
      IF(EN > XION1(NION1):
) GO TO 61
      EOFF=EN-(EION(3)-EION(1))
      DO 59 J=1,NION1
      IF(EOFF <= XION1(J):
) GO TO 60
   59 CONTINUE
      J=NION1
   60 A=(YION1(J)-YION1(J-1))/(XION1(J)-XION1(J-1))
      B=(XION1(J-1)*YION1(J)-XION1(J)*YION1(J-1))/(XION1(J-1)-XION1(J))
      QION(3,I)=(A*EOFF+B)*1.D-16*0.136
# CORRECT QION(1,I)
      QION(1,I)=QION(1,I)-QION(3,I)
      GO TO 62
# USE BORN BETHE ABOVE XION1(NION1) EV
   61 QION(3,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.6475*0.136
#
#  DISSOCIATIVE IONISATION TO O+ + O
   62 IF(EN <= EION(4)) GO TO 66  
      IF(EN > XION2(NION2):
) GO TO 65                                   
      DO 63 J=2,NION2                                                  
      IF(EN <= XION2(J):
) GO TO 64                                   
   63 CONTINUE                                                          
      J=NION2                                                         
   64 A=(YION2(J)-YION2(J-1))/(XION2(J)-XION2(J-1))                    
      B=(XION2(J-1)*YION2(J)-XION2(J)*YION2(J-1))/(XION2(J-1)-XION2(J))
      QION(4,I)=(A*EN+B)*1.D-16       
      GO TO 66                      
# USE BORN BETHE ABOVE XION2(NION2) EV    
   65 QION(4,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.2993
#
# DISSOCIATIVE DOUBLE IONISATION TO O+ + O+ 
   66 IF(EN <= EION(5)) GO TO 70  
      IF(EN > XION3(NION3):
) GO TO 69                                   
      DO 67 J=2,NION3                                                  
      IF(EN <= XION3(J):
) GO TO 68                                   
   67 CONTINUE                                                          
      J=NION3                                                        
   68 A=(YION3(J)-YION3(J-1))/(XION3(J)-XION3(J-1))                    
      B=(XION3(J-1)*YION3(J)-XION3(J)*YION3(J-1))/(XION3(J-1)-XION3(J))
      QION(5,I)=(A*EN+B)*1.D-16       
      GO TO 70                      
# USE BORN BETHE ABOVE XION3(NION3) EV    
   69 QION(5,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.0446
#
# DISSOCIATIVE DOUBLE IONISATION TO O++ + O 
   70 IF(EN <= EION(6)) GO TO 74  
      IF(EN > XION4(NION4):
) GO TO 73                                   
      DO 71 J=2,NION4                                                  
      IF(EN <= XION4(J):
) GO TO 72                                   
   71 CONTINUE                                                          
      J=NION4                                                        
   72 A=(YION4(J)-YION4(J-1))/(XION4(J)-XION4(J-1))                    
      B=(XION4(J-1)*YION4(J)-XION4(J)*YION4(J-1))/(XION4(J-1)-XION4(J))
      QION(6,I)=(A*EN+B)*1.D-16       
      GO TO 74                      
# USE BORN BETHE ABOVE XION4(NION4) EV    
   73 QION(6,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.0061
#
# DISSOCIATIVE TREBLE IONISATION TO O++ + O+ 
   74 IF(EN <= EION(7)) GO TO 78  
      IF(EN > XION5(NION5):
) GO TO 77                                   
      DO 75 J=2,NION5                                                  
      IF(EN <= XION5(J):
) GO TO 76                                   
   75 CONTINUE                                                          
      J=NION5                                                        
   76 A=(YION5(J)-YION5(J-1))/(XION5(J)-XION5(J-1))                    
      B=(XION5(J-1)*YION5(J)-XION5(J)*YION5(J-1))/(XION5(J-1)-XION5(J))
      QION(7,I)=(A*EN+B)*1.D-16       
      GO TO 78                      
# USE BORN BETHE ABOVE XION5(NION5) EV    
   77 QION(7,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.0025
#
# K-SHELL IONISATION
   78 IF(EN <= EION(8)) GO TO 81  
      DO 79 J=2,NKSH                                                  
      IF(EN <= XKSH(J):
) GO TO 80                                   
   79 CONTINUE                                                          
      J=NKSH                                                       
   80 A=(YKSH(J)-YKSH(J-1))/(XKSH(J)-XKSH(J-1))                    
      B=(XKSH(J-1)*YKSH(J)-XKSH(J)*YKSH(J-1))/(XKSH(J-1)-XKSH(J))
# SCALE BY 2 ATMOS PER MOLECULE
      QION(8,I)=2.0*(A*EN+B)*1.D-16            
#
   81 DO 85 J=1,NION
      IF(EN <= (2.0*EION(J):
)) GO TO 85
      PEQION(J,I)=PEQEL(2,(I-IOFFION(J)))
   85 CONTINUE   
# CORRECTION TO IONISATION FOR AUGER EMISSION FROM KSHELL
      QION(1,I)=QION(1,I)-AUGK*QION(8,I) 
#
#  TWO BODY ATTACHMENT                                                       
      SINGLE=0.0       
# OFFSET FOR ENERGY SCALE
      IF(EN < XATT(1):
) GO TO 250                                
      IF(EN > XATT(NATT1):
) GO TO 230                             
      DO 210 J=2,NATT1                                                 
      IF(EN <= XATT(J):
) GO TO 220                                
  210 CONTINUE                                                          
      J=NATT1                                                          
  220 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))          
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))       
      SINGLE=(A*EN+B)*1.D-16                    
      GO TO 250
# SCALE BY 1/E**3 ABOVE XATT(NATT1)
  230 SINGLE=YATT(NATT1)*(XATT(NATT1)/EN)**3*1.D-16    
#
#  
#  THREE BODY ATTACHMENT    
# ***************************************************************
#  ENTER HERE SCALING FACTOR FOR THREE BODY ATTACHMENT IN MIXTURES:
#  FOR NORMAL SCALING T3B=1.0
      T3B=1.0
#    SCALING FACTOR NORMALLY PROPORTIONAL TO OXYGEN FRACTION 
#    IN RARE GAS MIXTURES
# 
#***********************************************************  
#              
  250 THREEB=0.0                                                    
      IF(EN < X3ATT(1):
) GO TO 300                                      
      IF(EN > X3ATT(N3ATT):
) GO TO 300                                  
      DO 260 J=2,N3ATT                                                  
      IF(EN <= X3ATT(J):
) GO TO 270                                      
  260 CONTINUE                                                          
      J=N3ATT                                                           
  270 A=(Y3ATT(J)-Y3ATT(J-1))/(X3ATT(J)-X3ATT(J-1))
      B=(X3ATT(J-1)*Y3ATT(J)-X3ATT(J)*Y3ATT(J-1))/(X3ATT(J-1)-X3ATT(J))
      THREEB=FAC*(A*EN+B)*1.D-16*T3B  
  300 Q(4,I)=SINGLE+THREEB   
      QATT(1,I)=Q(4,I)  
      Q(5,I)=0.0                                                        
      Q(6,I)=0.0
# SET ZERO
      DO 310 JK=1,NIN
      QIN(JK,I)=0.00
      PEQIN(JK,I)=0.50
      IF(NANISO == 2):
 PEQIN(JK,I)=0.00         
  310 CONTINUE   
#                    
# SUPERELASTIC ROTATION   
      DO 311 K=1,24
# STATISTICAL FACTOR
      AK=DFLOAT(K)
      SFAC=(4.0*AK-1.0)/(4.0*AK+3.0) 
      QIN(K,I)=0.0
      PEQIN(K,I)=0.50
      IF(NANISO == 2):
 PEQIN(K,I)=0.00                      
      IF(EN <= 0.0):
 GO TO 311 
#
      IF(K == 1):
 :
      IF((EN-EIN(K):
) > XROT13(NROT13)) GO TO 3213
      DO 3211 J=2,NROT13
      IF((EN-EIN(K):
) <= XROT13(J)) GO TO 3212
 3211 CONTINUE
      J=NROT13
 3212 YXJ=math.log(YROT13(J))
      YXJ1=math.log(YROT13(J-1))
      XNJ=math.log(XROT13(J))
      XNJ1=math.log(XROT13(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN(K))*math.exp(A*math.log(EN-EIN(K))+B)/EN*
     /1.D-16
      GO TO 3214
 3213 QIN(K,I)=PJ(2*K+1)*SFAC*YROT13(NROT13)*XROT13(NROT13)/
     /(EN-EIN(K))*1.D-16
 3214 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
#
      elif (K == 2) :
      IF((EN-EIN(K):
) > XROT35(NROT35)) GO TO 3217
      DO 3215 J=2,NROT35
      IF((EN-EIN(K):
) <= XROT35(J)) GO TO 3216
 3215 CONTINUE
      J=NROT35
 3216 YXJ=math.log(YROT35(J))
      YXJ1=math.log(YROT35(J-1))
      XNJ=math.log(XROT35(J))
      XNJ1=math.log(XROT35(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN(K))*math.exp(A*math.log(EN-EIN(K))+B)/EN*
     /1.D-16
      GO TO 3218
 3217 QIN(K,I)=PJ(2*K+1)*SFAC*YROT35(NROT35)*XROT35(NROT35)/
     /(EN-EIN(K))*1.D-16      
 3218 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
#
      elif (K == 3) :
      IF((EN-EIN(K):
) > XROT57(NROT57)) GO TO 3221
      DO 3219 J=2,NROT57
      IF((EN-EIN(K):
) <= XROT57(J)) GO TO 3220
 3219 CONTINUE
      J=NROT57
 3220 YXJ=math.log(YROT57(J))
      YXJ1=math.log(YROT57(J-1))
      XNJ=math.log(XROT57(J))
      XNJ1=math.log(XROT57(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN(K))*math.exp(A*math.log(EN-EIN(K))+B)/EN*
     /1.D-16
      GO TO 3222
 3221 QIN(K,I)=PJ(2*K+1)*SFAC*YROT57(NROT57)*XROT57(NROT57)/
     /(EN-EIN(K))*1.D-16      
 3222 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
#
      elif (K == 4) :
      IF((EN-EIN(K):
) > XROT79(NROT79)) GO TO 3225
      DO 3223 J=2,NROT79
      IF((EN-EIN(K):
) <= XROT79(J)) GO TO 3224
 3223 CONTINUE
      J=NROT79
 3224 YXJ=math.log(YROT79(J))
      YXJ1=math.log(YROT79(J-1))
      XNJ=math.log(XROT79(J))
      XNJ1=math.log(XROT79(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN(K))*math.exp(A*math.log(EN-EIN(K))+B)/EN*
     /1.D-16
      GO TO 3226
 3225 QIN(K,I)=PJ(2*K+1)*SFAC*YROT79(NROT79)*XROT79(NROT79)/
     /(EN-EIN(K))*1.D-16      
 3226 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
#
      elif (K == 5) :
      IF((EN-EIN(K):
) > XROT911(NROT911)) GO TO 3229
      DO 3227 J=2,NROT911
      IF((EN-EIN(K):
) <= XROT911(J)) GO TO 3228
 3227 CONTINUE
      J=NROT911
 3228 YXJ=math.log(YROT911(J))
      YXJ1=math.log(YROT911(J-1))
      XNJ=math.log(XROT911(J))
      XNJ1=math.log(XROT911(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN(K))*math.exp(A*math.log(EN-EIN(K))+B)/EN*
     /1.D-16
      GO TO 3230
 3229 QIN(K,I)=PJ(2*K+1)*SFAC*YROT911(NROT911)*XROT911(NROT911)/
     /(EN-EIN(K))*1.D-16      
 3230 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
#
      elif (K == 6) :
      IF((EN-EIN(K):
) > XROT1113(NROT1113)) GO TO 3233
      DO 3231 J=2,NROT1113
      IF((EN-EIN(K):
) <= XROT1113(J)) GO TO 3232
 3231 CONTINUE
      J=NROT1113
 3232 YXJ=math.log(YROT1113(J))
      YXJ1=math.log(YROT1113(J-1))
      XNJ=math.log(XROT1113(J))
      XNJ1=math.log(XROT1113(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN(K))*math.exp(A*math.log(EN-EIN(K))+B)/EN*
     /1.D-16
      GO TO 3234
 3233 QIN(K,I)=PJ(2*K+1)*SFAC*YROT1113(NROT1113)*XROT1113(NROT1113)/
     /(EN-EIN(K))*1.D-16      
 3234 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
#
      elif (K == 7) :
      IF((EN-EIN(K):
) > XROT1315(NROT1315)) GO TO 3237
      DO 3235 J=2,NROT1315
      IF((EN-EIN(K):
) <= XROT1315(J)) GO TO 3236
 3235 CONTINUE
      J=NROT1315
 3236 YXJ=math.log(YROT1315(J))
      YXJ1=math.log(YROT1315(J-1))
      XNJ=math.log(XROT1315(J))
      XNJ1=math.log(XROT1315(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN(K))*math.exp(A*math.log(EN-EIN(K))+B)/EN*
     /1.D-16
      GO TO 3238
 3237 QIN(K,I)=PJ(2*K+1)*SFAC*YROT1315(NROT1315)*XROT1315(NROT1315)/
     /(EN-EIN(K))*1.D-16      
 3238 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
#
      elif (K == 8) :
      IF((EN-EIN(K):
) > XROT1517(NROT1517)) GO TO 3241
      DO 3239 J=2,NROT1517
      IF((EN-EIN(K):
) <= XROT1517(J)) GO TO 3240
 3239 CONTINUE
      J=NROT1517
 3240 YXJ=math.log(YROT1517(J))
      YXJ1=math.log(YROT1517(J-1))
      XNJ=math.log(XROT1517(J))
      XNJ1=math.log(XROT1517(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN(K))*math.exp(A*math.log(EN-EIN(K))+B)/EN*
     /1.D-16
      GO TO 3242
 3241 QIN(K,I)=PJ(2*K+1)*SFAC*YROT1517(NROT1517)*XROT1517(NROT1517)/
     /(EN-EIN(K))*1.D-16      
 3242 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
#
      elif (K == 9) :
      IF((EN-EIN(K):
) > XROT1719(NROT1719)) GO TO 3245
      DO 3243 J=2,NROT1719
      IF((EN-EIN(K):
) <= XROT1719(J)) GO TO 3244
 3243 CONTINUE
      J=NROT1719
 3244 YXJ=math.log(YROT1719(J))
      YXJ1=math.log(YROT1719(J-1))
      XNJ=math.log(XROT1719(J))
      XNJ1=math.log(XROT1719(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN(K))*math.exp(A*math.log(EN-EIN(K))+B)/EN*
     /1.D-16
      GO TO 3246
 3245 QIN(K,I)=PJ(2*K+1)*SFAC*YROT1719(NROT1719)*XROT1719(NROT1719)/
     /(EN-EIN(K))*1.D-16      
 3246 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
#
      elif (K == 10) :
      IF((EN-EIN(K):
) > XROT1921(NROT1921)) GO TO 3249
      DO 3247 J=2,NROT1921
      IF((EN-EIN(K):
) <= XROT1921(J)) GO TO 3248
 3247 CONTINUE
      J=NROT1921
 3248 YXJ=math.log(YROT1921(J))
      YXJ1=math.log(YROT1921(J-1))
      XNJ=math.log(XROT1921(J))
      XNJ1=math.log(XROT1921(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN(K))*math.exp(A*math.log(EN-EIN(K))+B)/EN*
     /1.D-16
      GO TO 3250
 3249 QIN(K,I)=PJ(2*K+1)*SFAC*YROT1921(NROT1921)*XROT1921(NROT1921)/
     /(EN-EIN(K))*1.D-16      
 3250 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
#
      elif (K == 11) :
      IF((EN-EIN(K):
) > XROT2123(NROT2123)) GO TO 3253
      DO 3251 J=2,NROT2123
      IF((EN-EIN(K):
) <= XROT2123(J)) GO TO 3252
 3251 CONTINUE
      J=NROT2123
 3252 YXJ=math.log(YROT2123(J))
      YXJ1=math.log(YROT2123(J-1))
      XNJ=math.log(XROT2123(J))
      XNJ1=math.log(XROT2123(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN(K))*math.exp(A*math.log(EN-EIN(K))+B)/EN*
     /1.D-16
      GO TO 3254
 3253 QIN(K,I)=PJ(2*K+1)*SFAC*YROT2123(NROT2123)*XROT2123(NROT2123)/
     /(EN-EIN(K))*1.D-16      
 3254 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
#
      elif (K == 12) :
      IF((EN-EIN(K):
) > XROT2325(NROT2325)) GO TO 3257
      DO 3255 J=2,NROT2325
      IF((EN-EIN(K):
) <= XROT2325(J)) GO TO 3256
 3255 CONTINUE
      J=NROT2325
 3256 YXJ=math.log(YROT2325(J))
      YXJ1=math.log(YROT2325(J-1))
      XNJ=math.log(XROT2325(J))
      XNJ1=math.log(XROT2325(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN(K))*math.exp(A*math.log(EN-EIN(K))+B)/EN*
     /1.D-16
      GO TO 3258
 3257 QIN(K,I)=PJ(2*K+1)*SFAC*YROT2325(NROT2325)*XROT2325(NROT2325)/
     /(EN-EIN(K))*1.D-16      
 3258 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
#
      elif (K == 13) :
      IF((EN-EIN(K):
) > XROT2527(NROT2527)) GO TO 3261
      DO 3259 J=2,NROT2527
      IF((EN-EIN(K):
) <= XROT2527(J)) GO TO 3260
 3259 CONTINUE
      J=NROT2527
 3260 YXJ=math.log(YROT2527(J))
      YXJ1=math.log(YROT2527(J-1))
      XNJ=math.log(XROT2527(J))
      XNJ1=math.log(XROT2527(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN(K))*math.exp(A*math.log(EN-EIN(K))+B)/EN*
     /1.D-16
      GO TO 3262
 3261 QIN(K,I)=PJ(2*K+1)*SFAC*YROT2527(NROT2527)*XROT2527(NROT2527)/
     /(EN-EIN(K))*1.D-16      
 3262 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
#
      elif (K == 14) :
      IF((EN-EIN(K):
) > XROT2729(NROT2729)) GO TO 3265
      DO 3263 J=2,NROT2729
      IF((EN-EIN(K):
) <= XROT2729(J)) GO TO 3264
 3263 CONTINUE
      J=NROT2729
 3264 YXJ=math.log(YROT2729(J))
      YXJ1=math.log(YROT2729(J-1))
      XNJ=math.log(XROT2729(J))
      XNJ1=math.log(XROT2729(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN(K))*math.exp(A*math.log(EN-EIN(K))+B)/EN*
     /1.D-16
      GO TO 3266
 3265 QIN(K,I)=PJ(2*K+1)*SFAC*YROT2729(NROT2729)*XROT2729(NROT2729)/
     /(EN-EIN(K))*1.D-16      
 3266 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
#
      elif (K == 15) :
      IF((EN-EIN(K):
) > XROT2931(NROT2931)) GO TO 3269
      DO 3267 J=2,NROT2931
      IF((EN-EIN(K):
) <= XROT2931(J)) GO TO 3268
 3267 CONTINUE
      J=NROT2931
 3268 YXJ=math.log(YROT2931(J))
      YXJ1=math.log(YROT2931(J-1))
      XNJ=math.log(XROT2931(J))
      XNJ1=math.log(XROT2931(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN(K))*math.exp(A*math.log(EN-EIN(K))+B)/EN*
     /1.D-16
      GO TO 3270
 3269 QIN(K,I)=PJ(2*K+1)*SFAC*YROT2931(NROT2931)*XROT2931(NROT2931)/
     /(EN-EIN(K))*1.D-16      
 3270 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
#
      elif (K == 16) :
      IF((EN-EIN(K):
) > XROT3133(NROT3133)) GO TO 3273
      DO 3271 J=2,NROT3133
      IF((EN-EIN(K):
) <= XROT3133(J)) GO TO 3272
 3271 CONTINUE
      J=NROT3133
 3272 YXJ=math.log(YROT3133(J))
      YXJ1=math.log(YROT3133(J-1))
      XNJ=math.log(XROT3133(J))
      XNJ1=math.log(XROT3133(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN(K))*math.exp(A*math.log(EN-EIN(K))+B)/EN*
     /1.D-16
      GO TO 3274
 3273 QIN(K,I)=PJ(2*K+1)*SFAC*YROT3133(NROT3133)*XROT3133(NROT3133)/
     /(EN-EIN(K))*1.D-16      
 3274 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
#
      elif (K == 17) :
      IF((EN-EIN(K):
) > XROT3335(NROT3335)) GO TO 3277
      DO 3275 J=2,NROT3335
      IF((EN-EIN(K):
) <= XROT3335(J)) GO TO 3276
 3275 CONTINUE
      J=NROT3335
 3276 YXJ=math.log(YROT3335(J))
      YXJ1=math.log(YROT3335(J-1))
      XNJ=math.log(XROT3335(J))
      XNJ1=math.log(XROT3335(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN(K))*math.exp(A*math.log(EN-EIN(K))+B)/EN*
     /1.D-16
      GO TO 3278
 3277 QIN(K,I)=PJ(2*K+1)*SFAC*YROT3335(NROT3335)*XROT3335(NROT3335)/
     /(EN-EIN(K))*1.D-16      
 3278 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
#
      elif (K == 18) :
      IF((EN-EIN(K):
) > XROT3537(NROT3537)) GO TO 3281
      DO 3279 J=2,NROT3537
      IF((EN-EIN(K):
) <= XROT3537(J)) GO TO 3280
 3279 CONTINUE
      J=NROT3537
 3280 YXJ=math.log(YROT3537(J))
      YXJ1=math.log(YROT3537(J-1))
      XNJ=math.log(XROT3537(J))
      XNJ1=math.log(XROT3537(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN(K))*math.exp(A*math.log(EN-EIN(K))+B)/EN*
     /1.D-16
      GO TO 3282
 3281 QIN(K,I)=PJ(2*K+1)*SFAC*YROT3537(NROT3537)*XROT3537(NROT3537)/
     /(EN-EIN(K))*1.D-16      
 3282 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
#
      elif (K == 19) :
      IF((EN-EIN(K):
) > XROT3739(NROT3739)) GO TO 3285
      DO 3283 J=2,NROT3739
      IF((EN-EIN(K):
) <= XROT3739(J)) GO TO 3284
 3283 CONTINUE
      J=NROT3739
 3284 YXJ=math.log(YROT3739(J))
      YXJ1=math.log(YROT3739(J-1))
      XNJ=math.log(XROT3739(J))
      XNJ1=math.log(XROT3739(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN(K))*math.exp(A*math.log(EN-EIN(K))+B)/EN*
     /1.D-16
      GO TO 3286
 3285 QIN(K,I)=PJ(2*K+1)*SFAC*YROT3739(NROT3739)*XROT3739(NROT3739)/
     /(EN-EIN(K))*1.D-16      
 3286 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
#
      elif (K == 20) :
      IF((EN-EIN(K):
) > XROT3941(NROT3941)) GO TO 3289
      DO 3287 J=2,NROT3941
      IF((EN-EIN(K):
) <= XROT3941(J)) GO TO 3288
 3287 CONTINUE
      J=NROT3941
 3288 YXJ=math.log(YROT3941(J))
      YXJ1=math.log(YROT3941(J-1))
      XNJ=math.log(XROT3941(J))
      XNJ1=math.log(XROT3941(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN(K))*math.exp(A*math.log(EN-EIN(K))+B)/EN*
     /1.D-16
      GO TO 3290
 3289 QIN(K,I)=PJ(2*K+1)*SFAC*YROT3941(NROT3941)*XROT3941(NROT3941)/
     /(EN-EIN(K))*1.D-16      
 3290 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
#
      elif (K == 21) :
      IF((EN-EIN(K):
) > XROT4143(NROT4143)) GO TO 3293
      DO 3291 J=2,NROT4143
      IF((EN-EIN(K):
) <= XROT4143(J)) GO TO 3292
 3291 CONTINUE
      J=NROT4143
 3292 YXJ=math.log(YROT4143(J))
      YXJ1=math.log(YROT4143(J-1))
      XNJ=math.log(XROT4143(J))
      XNJ1=math.log(XROT4143(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN(K))*math.exp(A*math.log(EN-EIN(K))+B)/EN*
     /1.D-16
      GO TO 3294
 3293 QIN(K,I)=PJ(2*K+1)*SFAC*YROT4143(NROT4143)*XROT4143(NROT4143)/
     /(EN-EIN(K))*1.D-16      
 3294 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
#
      elif (K == 22) :
      IF((EN-EIN(K):
) > XROT4345(NROT4345)) GO TO 3297
      DO 3295 J=2,NROT4345
      IF((EN-EIN(K):
) <= XROT4345(J)) GO TO 3296
 3295 CONTINUE
      J=NROT4345
 3296 YXJ=math.log(YROT4345(J))
      YXJ1=math.log(YROT4345(J-1))
      XNJ=math.log(XROT4345(J))
      XNJ1=math.log(XROT4345(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN(K))*math.exp(A*math.log(EN-EIN(K))+B)/EN*
     /1.D-16
      GO TO 3298
 3297 QIN(K,I)=PJ(2*K+1)*SFAC*YROT4345(NROT4345)*XROT4345(NROT4345)/
     /(EN-EIN(K))*1.D-16      
 3298 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
#
      elif (K == 23) :
      IF((EN-EIN(K):
) > XROT4547(NROT4547)) GO TO 3301
      DO 3299 J=2,NROT4547
      IF((EN-EIN(K):
) <= XROT4547(J)) GO TO 3300
 3299 CONTINUE
      J=NROT4547
 3300 YXJ=math.log(YROT4547(J))
      YXJ1=math.log(YROT4547(J-1))
      XNJ=math.log(XROT4547(J))
      XNJ1=math.log(XROT4547(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN(K))*math.exp(A*math.log(EN-EIN(K))+B)/EN*
     /1.D-16
      GO TO 3302
 3301 QIN(K,I)=PJ(2*K+1)*SFAC*YROT4547(NROT4547)*XROT4547(NROT4547)/
     /(EN-EIN(K))*1.D-16      
 3302 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
#
      elif (K == 24) :
      IF((EN-EIN(K):
) > XROT4749(NROT4749)) GO TO 3305
      DO 3303 J=2,NROT4749
      IF((EN-EIN(K):
) <= XROT4749(J)) GO TO 3304
 3303 CONTINUE
      J=NROT4749
 3304 YXJ=math.log(YROT4749(J))
      YXJ1=math.log(YROT4749(J-1))
      XNJ=math.log(XROT4749(J))
      XNJ1=math.log(XROT4749(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN(K))*math.exp(A*math.log(EN-EIN(K))+B)/EN*
     /1.D-16
      GO TO 3306
 3305 QIN(K,I)=PJ(2*K+1)*SFAC*YROT4749(NROT4749)*XROT4749(NROT4749)/
     /(EN-EIN(K))*1.D-16      
 3306 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
      else:
      WRITE(6,997) K
  997 FORMAT(' ERROR IN INDEX IN OXYGEN def K=',I3)
      # endIF
# CALCULATE ENHANCEMENT OF ROTATION DUE TO VIBRATIONAL RESONANCES
      QRES1=0.0
      IF((EN-EIN(K):
) > XROT(NROT)) GO TO 3333
      IF((EN-EIN(K):
) <= XROT(1)) GO TO 3333
      DO 3331 L=1,NROT
      IF((EN-EIN(K):
) <= XROT(L)) GO TO 3332 
 3331 CONTINUE     
      L=NROT
 3332 A=(YROT(L)-YROT(L-1))/(XROT(L)-XROT(L-1))
      B=(XROT(L-1)*YROT(L)-XROT(L)*YROT(L-1))/(XROT(L-1)-XROT(L))
      QRES1=(EN-EIN(K))*(A*(EN-EIN(K))+B)/EN
      QRES1=QRES1*PJ(2*K+1)*1.D-16                        
 3333 QIN(K,I)=QIN(K,I)+QRES1
  311 CONTINUE 
# INELASTIC ROTATION
      DO 312 K=25,48
      QIN(K,I)=0.0
      PEQIN(K,I)=0.50
      IF(NANISO == 2):
 PEQIN(K,I)=0.00
      IF(EN <= 0.0):
 GO TO 312
      IF(EN <= EIN(K):
) GO TO 312
      IF(K == 25):
 :
      IF(EN < XROT13(1):
) GO TO 312
      IF(EN > XROT13(NROT13):
) GO TO 3336
      DO 3334 J=2,NROT13 
      IF(EN <= XROT13(J):
) GO TO 3335
 3334 CONTINUE    
      J=NROT13
 3335 YXJ=math.log(YROT13(J))
      YXJ1=math.log(YROT13(J-1))
      XNJ=math.log(XROT13(J))
      XNJ1=math.log(XROT13(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3337
 3336 QIN(K,I)=PJ(2*K-49)*YROT13(NROT13)*XROT13(NROT13)/EN*1.D-16     
 3337 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
# 
      elif(K == 26) :
      IF(EN < XROT35(1):
) GO TO 312
      IF(EN > XROT35(NROT35):
) GO TO 3340
      DO 3338 J=2,NROT35 
      IF(EN <= XROT35(J):
) GO TO 3339
 3338 CONTINUE    
      J=NROT35
 3339 YXJ=math.log(YROT35(J))
      YXJ1=math.log(YROT35(J-1))
      XNJ=math.log(XROT35(J))
      XNJ1=math.log(XROT35(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3341
 3340 QIN(K,I)=PJ(2*K-49)*YROT35(NROT35)*XROT35(NROT35)/EN*1.D-16     
 3341 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
# 
      elif(K == 27) :
      IF(EN < XROT57(1):
) GO TO 312
      IF(EN > XROT57(NROT57):
) GO TO 3344
      DO 3342 J=2,NROT57 
      IF(EN <= XROT57(J):
) GO TO 3343
 3342 CONTINUE    
      J=NROT57
 3343 YXJ=math.log(YROT57(J))
      YXJ1=math.log(YROT57(J-1))
      XNJ=math.log(XROT57(J))
      XNJ1=math.log(XROT57(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3345
 3344 QIN(K,I)=PJ(2*K-49)*YROT57(NROT57)*XROT57(NROT57)/EN*1.D-16     
 3345 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
# 
      elif(K == 28) :
      IF(EN < XROT79(1):
) GO TO 312
      IF(EN > XROT79(NROT79):
) GO TO 3348
      DO 3346 J=2,NROT79 
      IF(EN <= XROT79(J):
) GO TO 3347
 3346 CONTINUE    
      J=NROT79
 3347 YXJ=math.log(YROT79(J))
      YXJ1=math.log(YROT79(J-1))
      XNJ=math.log(XROT79(J))
      XNJ1=math.log(XROT79(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3349
 3348 QIN(K,I)=PJ(2*K-49)*YROT79(NROT79)*XROT79(NROT79)/EN*1.D-16     
 3349 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
# 
      elif(K == 29) :
      IF(EN < XROT911(1):
) GO TO 312
      IF(EN > XROT911(NROT911):
) GO TO 3352
      DO 3350 J=2,NROT911 
      IF(EN <= XROT911(J):
) GO TO 3351
 3350 CONTINUE    
      J=NROT911
 3351 YXJ=math.log(YROT911(J))
      YXJ1=math.log(YROT911(J-1))
      XNJ=math.log(XROT911(J))
      XNJ1=math.log(XROT911(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3353
 3352 QIN(K,I)=PJ(2*K-49)*YROT911(NROT911)*XROT911(NROT911)/EN*1.D-16   
 3353 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
# 
      elif(K == 30) :
      IF(EN < XROT1113(1):
) GO TO 312
      IF(EN > XROT1113(NROT1113):
) GO TO 3356
      DO 3354 J=2,NROT1113 
      IF(EN <= XROT1113(J):
) GO TO 3355
 3354 CONTINUE    
      J=NROT1113
 3355 YXJ=math.log(YROT1113(J))
      YXJ1=math.log(YROT1113(J-1))
      XNJ=math.log(XROT1113(J))
      XNJ1=math.log(XROT1113(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3357
 3356 QIN(K,I)=PJ(2*K-49)*YROT1113(NROT1113)*XROT1113(NROT1113)/
     /EN*1.D-16   
 3357 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
# 
      elif(K == 31) :
      IF(EN < XROT1315(1):
) GO TO 312
      IF(EN > XROT1315(NROT1315):
) GO TO 3360
      DO 3358 J=2,NROT1315 
      IF(EN <= XROT1315(J):
) GO TO 3359
 3358 CONTINUE    
      J=NROT1315
 3359 YXJ=math.log(YROT1315(J))
      YXJ1=math.log(YROT1315(J-1))
      XNJ=math.log(XROT1315(J))
      XNJ1=math.log(XROT1315(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3361
 3360 QIN(K,I)=PJ(2*K-49)*YROT1315(NROT1315)*XROT1315(NROT1315)/
     /EN*1.D-16   
 3361 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
# 
      elif(K == 32) :
      IF(EN < XROT1517(1):
) GO TO 312
      IF(EN > XROT1517(NROT1517):
) GO TO 3364
      DO 3362 J=2,NROT1517 
      IF(EN <= XROT1517(J):
) GO TO 3363
 3362 CONTINUE    
      J=NROT1517
 3363 YXJ=math.log(YROT1517(J))
      YXJ1=math.log(YROT1517(J-1))
      XNJ=math.log(XROT1517(J))
      XNJ1=math.log(XROT1517(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3365
 3364 QIN(K,I)=PJ(2*K-49)*YROT1517(NROT1517)*XROT1517(NROT1517)/
     /EN*1.D-16   
 3365 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
# 
      elif(K == 33) :
      IF(EN < XROT1719(1):
) GO TO 312
      IF(EN > XROT1719(NROT1719):
) GO TO 3368
      DO 3366 J=2,NROT1719 
      IF(EN <= XROT1719(J):
) GO TO 3367
 3366 CONTINUE    
      J=NROT1719
 3367 YXJ=math.log(YROT1719(J))
      YXJ1=math.log(YROT1719(J-1))
      XNJ=math.log(XROT1719(J))
      XNJ1=math.log(XROT1719(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3369
 3368 QIN(K,I)=PJ(2*K-49)*YROT1719(NROT1719)*XROT1719(NROT1719)/
     /EN*1.D-16   
 3369 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
# 
      elif(K == 34) :
      IF(EN < XROT1921(1):
) GO TO 312
      IF(EN > XROT1921(NROT1921):
) GO TO 3372
      DO 3370 J=2,NROT1921 
      IF(EN <= XROT1921(J):
) GO TO 3371
 3370 CONTINUE    
      J=NROT1921
 3371 YXJ=math.log(YROT1921(J))
      YXJ1=math.log(YROT1921(J-1))
      XNJ=math.log(XROT1921(J))
      XNJ1=math.log(XROT1921(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3373
 3372 QIN(K,I)=PJ(2*K-49)*YROT1921(NROT1921)*XROT1921(NROT1921)/
     /EN*1.D-16   
 3373 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
# 
      elif(K == 35) :
      IF(EN < XROT2123(1):
) GO TO 312
      IF(EN > XROT2123(NROT2123):
) GO TO 3376
      DO 3374 J=2,NROT2123 
      IF(EN <= XROT2123(J):
) GO TO 3375
 3374 CONTINUE    
      J=NROT2123
 3375 YXJ=math.log(YROT2123(J))
      YXJ1=math.log(YROT2123(J-1))
      XNJ=math.log(XROT2123(J))
      XNJ1=math.log(XROT2123(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3377
 3376 QIN(K,I)=PJ(2*K-49)*YROT2123(NROT2123)*XROT2123(NROT2123)/
     /EN*1.D-16   
 3377 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
# 
      elif(K == 36) :
      IF(EN < XROT2325(1):
) GO TO 312
      IF(EN > XROT2325(NROT2325):
) GO TO 3380
      DO 3378 J=2,NROT2325 
      IF(EN <= XROT2325(J):
) GO TO 3379
 3378 CONTINUE    
      J=NROT2325
 3379 YXJ=math.log(YROT2325(J))
      YXJ1=math.log(YROT2325(J-1))
      XNJ=math.log(XROT2325(J))
      XNJ1=math.log(XROT2325(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3381
 3380 QIN(K,I)=PJ(2*K-49)*YROT2325(NROT2325)*XROT2325(NROT2325)/
     /EN*1.D-16   
 3381 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
# 
      elif(K == 37) :
      IF(EN < XROT2527(1):
) GO TO 312
      IF(EN > XROT2527(NROT2527):
) GO TO 3384
      DO 3382 J=2,NROT2527 
      IF(EN <= XROT2527(J):
) GO TO 3383
 3382 CONTINUE    
      J=NROT2527
 3383 YXJ=math.log(YROT2527(J))
      YXJ1=math.log(YROT2527(J-1))
      XNJ=math.log(XROT2527(J))
      XNJ1=math.log(XROT2527(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3385
 3384 QIN(K,I)=PJ(2*K-49)*YROT2527(NROT2527)*XROT2527(NROT2527)/
     /EN*1.D-16   
 3385 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
# 
      elif(K == 38) :
      IF(EN < XROT2729(1):
) GO TO 312
      IF(EN > XROT2729(NROT2729):
) GO TO 3388
      DO 3386 J=2,NROT2729 
      IF(EN <= XROT2729(J):
) GO TO 3387
 3386 CONTINUE    
      J=NROT2729
 3387 YXJ=math.log(YROT2729(J))
      YXJ1=math.log(YROT2729(J-1))
      XNJ=math.log(XROT2729(J))
      XNJ1=math.log(XROT2729(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3389
 3388 QIN(K,I)=PJ(2*K-49)*YROT2729(NROT2729)*XROT2729(NROT2729)/
     /EN*1.D-16   
 3389 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
# 
      elif(K == 39) :
      IF(EN < XROT2931(1):
) GO TO 312
      IF(EN > XROT2931(NROT2931):
) GO TO 3392
      DO 3390 J=2,NROT2931 
      IF(EN <= XROT2931(J):
) GO TO 3391
 3390 CONTINUE    
      J=NROT2931
 3391 YXJ=math.log(YROT2931(J))
      YXJ1=math.log(YROT2931(J-1))
      XNJ=math.log(XROT2931(J))
      XNJ1=math.log(XROT2931(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3393
 3392 QIN(K,I)=PJ(2*K-49)*YROT2931(NROT2931)*XROT2931(NROT2931)/
     /EN*1.D-16   
 3393 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
# 
      elif(K == 40) :
      IF(EN < XROT3133(1):
) GO TO 312
      IF(EN > XROT3133(NROT3133):
) GO TO 3396
      DO 3394 J=2,NROT3133 
      IF(EN <= XROT3133(J):
) GO TO 3395
 3394 CONTINUE    
      J=NROT3133
 3395 YXJ=math.log(YROT3133(J))
      YXJ1=math.log(YROT3133(J-1))
      XNJ=math.log(XROT3133(J))
      XNJ1=math.log(XROT3133(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3397
 3396 QIN(K,I)=PJ(2*K-49)*YROT3133(NROT3133)*XROT3133(NROT3133)/
     /EN*1.D-16   
 3397 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
# 
      elif(K == 41) :
      IF(EN < XROT3335(1):
) GO TO 312
      IF(EN > XROT3335(NROT3335):
) GO TO 3400
      DO 3398 J=2,NROT3335 
      IF(EN <= XROT3335(J):
) GO TO 3399
 3398 CONTINUE    
      J=NROT3335
 3399 YXJ=math.log(YROT3335(J))
      YXJ1=math.log(YROT3335(J-1))
      XNJ=math.log(XROT3335(J))
      XNJ1=math.log(XROT3335(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3401
 3400 QIN(K,I)=PJ(2*K-49)*YROT3335(NROT3335)*XROT3335(NROT3335)/
     /EN*1.D-16   
 3401 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
# 
      elif(K == 42) :
      IF(EN < XROT3537(1):
) GO TO 312
      IF(EN > XROT3537(NROT3537):
) GO TO 3404
      DO 3402 J=2,NROT3537 
      IF(EN <= XROT3537(J):
) GO TO 3403
 3402 CONTINUE    
      J=NROT3537
 3403 YXJ=math.log(YROT3537(J))
      YXJ1=math.log(YROT3537(J-1))
      XNJ=math.log(XROT3537(J))
      XNJ1=math.log(XROT3537(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3405
 3404 QIN(K,I)=PJ(2*K-49)*YROT3537(NROT3537)*XROT3537(NROT3537)/
     /EN*1.D-16   
 3405 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
# 
      elif(K == 43) :
      IF(EN < XROT3739(1):
) GO TO 312
      IF(EN > XROT3739(NROT3739):
) GO TO 3408
      DO 3406 J=2,NROT3739 
      IF(EN <= XROT3739(J):
) GO TO 3407 
 3406 CONTINUE    
      J=NROT3739
 3407 YXJ=math.log(YROT3739(J))
      YXJ1=math.log(YROT3739(J-1))
      XNJ=math.log(XROT3739(J))
      XNJ1=math.log(XROT3739(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3409
 3408 QIN(K,I)=PJ(2*K-49)*YROT3739(NROT3739)*XROT3739(NROT3739)/
     /EN*1.D-16   
 3409 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
# 
      elif(K == 44) :
      IF(EN < XROT3941(1):
) GO TO 312
      IF(EN > XROT3941(NROT3941):
) GO TO 3412
      DO 3410 J=2,NROT3941 
      IF(EN <= XROT3941(J):
) GO TO 3411 
 3410 CONTINUE    
      J=NROT3941
 3411 YXJ=math.log(YROT3941(J))
      YXJ1=math.log(YROT3941(J-1))
      XNJ=math.log(XROT3941(J))
      XNJ1=math.log(XROT3941(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3413
 3412 QIN(K,I)=PJ(2*K-49)*YROT3941(NROT3941)*XROT3941(NROT3941)/
     /EN*1.D-16   
 3413 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
# 
      elif(K == 45) :
      IF(EN < XROT4143(1):
) GO TO 312
      IF(EN > XROT4143(NROT4143):
) GO TO 3416
      DO 3414 J=2,NROT4143 
      IF(EN <= XROT4143(J):
) GO TO 3415 
 3414 CONTINUE    
      J=NROT4143
 3415 YXJ=math.log(YROT4143(J))
      YXJ1=math.log(YROT4143(J-1))
      XNJ=math.log(XROT4143(J))
      XNJ1=math.log(XROT4143(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3417
 3416 QIN(K,I)=PJ(2*K-49)*YROT4143(NROT4143)*XROT4143(NROT4143)/
     /EN*1.D-16   
 3417 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
# 
      elif(K == 46) :
      IF(EN < XROT4345(1):
) GO TO 312
      IF(EN > XROT4345(NROT4345):
) GO TO 3420
      DO 3418 J=2,NROT4345 
      IF(EN <= XROT4345(J):
) GO TO 3419 
 3418 CONTINUE    
      J=NROT4345
 3419 YXJ=math.log(YROT4345(J))
      YXJ1=math.log(YROT4345(J-1))
      XNJ=math.log(XROT4345(J))
      XNJ1=math.log(XROT4345(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3421
 3420 QIN(K,I)=PJ(2*K-49)*YROT4345(NROT4345)*XROT4345(NROT4345)/
     /EN*1.D-16   
 3421 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
# 
      elif(K == 47) :
      IF(EN < XROT4547(1):
) GO TO 312
      IF(EN > XROT4547(NROT4547):
) GO TO 3424
      DO 3422 J=2,NROT4547 
      IF(EN <= XROT4547(J):
) GO TO 3423 
 3422 CONTINUE    
      J=NROT4547
 3423 YXJ=math.log(YROT4547(J))
      YXJ1=math.log(YROT4547(J-1))
      XNJ=math.log(XROT4547(J))
      XNJ1=math.log(XROT4547(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3425
 3424 QIN(K,I)=PJ(2*K-49)*YROT4547(NROT4547)*XROT4547(NROT4547)/
     /EN*1.D-16   
 3425 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
# 
      elif(K == 48) :
      IF(EN < XROT4749(1):
) GO TO 312
      IF(EN > XROT4749(NROT4749):
) GO TO 3428
      DO 3426 J=2,NROT4749 
      IF(EN <= XROT4749(J):
) GO TO 3427 
 3426 CONTINUE    
      J=NROT4749
 3427 YXJ=math.log(YROT4749(J))
      YXJ1=math.log(YROT4749(J-1))
      XNJ=math.log(XROT4749(J))
      XNJ1=math.log(XROT4749(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3429
 3428 QIN(K,I)=PJ(2*K-49)*YROT4749(NROT4749)*XROT4749(NROT4749)/
     /EN*1.D-16   
 3429 IF(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
      else:
      WRITE(6,997) K
      # endIF
# CALCULATE ENHANCEMENT OF ROTATION DUE TO VIBRATIONAL RESONANCES
      QRES=0.0
      IF(EN > XROT(NROT):
) GO TO 3113
      IF(EN <= XROT(1):
) GO TO 3113
      DO 3111 L=1,NROT
      IF(EN <= XROT(L):
) GO TO 3112
 3111 CONTINUE
      L=NROT
 3112 A=(YROT(L)-YROT(L-1))/(XROT(L)-XROT(L-1))
      B=(XROT(L-1)*YROT(L)-XROT(L)*YROT(L-1))/(XROT(L-1)-XROT(L))
      QRES=(A*EN+B)*PJ(2*K-49)*1.D-16                          
 3113 QIN(K,I)=QIN(K,I)+QRES   
      QRSUM=QRSUM+QRES  
  312 CONTINUE
# FORCE ROTATIONAL X-SECTION TO FALL AS 1/E**2 ABOVE 3 EV
c NB 1/E ALREADY USED SO ONLY 1/E EXTRA
      IF(EN < 3.0):
 GO TO 379
      DO 315 K=1,48
  315 QIN(K,I)=QIN(K,I)*(3.0/EN)
#
# SCALE ROTATIONAL X-SECTIONS BY ROTSCALE
  379 DO 3456 K=1,48
 3456 QIN(K,I)=QIN(K,I)*ROTSCALE
#  SUPERELASTIC V1
#  379 IF(EN == 0.0) GO TO 400
      IF(EN == 0.0):
 GO TO 400
      IF((EN+EIN(50):
) > XVIB[NVIB]) GO TO 382 
      DO 380 J=2,NVIB
      IF((EN+EIN(50):
) <= XVIB[J]) GO TO 381
  380 CONTINUE
      J=NVIB
  381 A=(YVIB1(J)-YVIB1(J-1))/(XVIB[J]-XVIB[J-1])
      B=(XVIB[J-1]*YVIB1(J)-XVIB[J]*YVIB1(J-1))/(XVIB[J-1]-XVIB[J])
      QIN(49,I)=(A*(EN+EIN(50))+B)*(EN+EIN(50))/EN
      QIN(49,I)=QIN(49,I)*APOP2/(1.0+APOP2)*1.D-16
      GO TO 383
  382 QIN(49,I)=YVIB1(NVIB)*(XVIB[NVIB]/EN)*APOP2/(1.0+APOP2)*1.D-16
  383 IF(EN > 6.0) PEQIN(49,I)=PEQEL(2,(I-IOFFN(49)))
#  VIB1                     
  400 IF(EN <= EIN(50)) GO TO 450    
      IF(EN > XVIB[NVIB]):
 GO TO 430                                
      DO 410 J=2,NVIB                                                  
      IF(EN <= XVIB[J]):
 GO TO 420                                      
  410 CONTINUE                                                          
      J=NVIB                                                           
  420 A=(YVIB1(J)-YVIB1(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB1(J)-XVIB[J]*YVIB1(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(50,I)=(A*EN+B)/(1.0+APOP2)*1.D-16
      GO TO 440
# SCALE BY 1/E ABOVE XVIB[NVIB]
  430 QIN(50,I)=YVIB1(NVIB)*(XVIB[NVIB]/EN)/(1.0+APOP2)*1.D-16
  440 IF(EN > 6.0) PEQIN(50,I)=PEQEL(2,(I-IOFFN(50))) 
#                                                                       
  450 IF(EN <= EIN(51)) GO TO 500                     
      IF(EN > XVIB[NVIB]):
 GO TO 480                   
      DO 460 J=2,NVIB                                                  
      IF(EN <= XVIB[J]):
 GO TO 470                                      
  460 CONTINUE                                                          
      J=NVIB                                                           
  470 A=(YVIB2(J)-YVIB2(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB2(J)-XVIB[J]*YVIB2(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(51,I)=(A*EN+B)*1.D-16
      GO TO 490
# SCALE BY 1/E ABOVE XVIB[NVIB]
  480 QIN(51,I)=YVIB2(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  490 IF(EN > 6.0) PEQIN(51,I)=PEQEL(2,(I-IOFFN(51)))              
#                                                                       
  500 IF(EN <= EIN(52)) GO TO 550 
      IF(EN > XVIB[NVIB]):
 GO TO 530                           
      DO 510 J=2,NVIB                                                  
      IF(EN <= XVIB[J]):
 GO TO 520                                      
  510 CONTINUE                                                          
      J=NVIB                                                           
  520 A=(YVIB3(J)-YVIB3(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB3(J)-XVIB[J]*YVIB3(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(52,I)=(A*EN+B)*1.D-16    
      GO TO 540
# SCALE BY 1/E ABOVE XVIB[NVIB]
  530 QIN(52,I)=YVIB3(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  540 IF(EN > 6.0) PEQIN(52,I)=PEQEL(2,(I-IOFFN(52)))
#                                                                       
  550 IF(EN <= EIN(53)) GO TO 600   
      IF(EN > XVIB[NVIB]):
 GO TO 580                                   
      DO 560 J=2,NVIB                                                 
      IF(EN <= XVIB[J]):
 GO TO 570                                      
  560 CONTINUE                                                          
      J=NVIB                                                           
  570 A=(YVIB4(J)-YVIB4(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB4(J)-XVIB[J]*YVIB4(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(53,I)=(A*EN+B)*1.D-16   
      GO TO 590
# SCALE BY 1/E ABOVE XVIB[NVIB]
  580 QIN(53,I)=YVIB4(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  590 IF(EN > 6.0) PEQIN(53,I)=PEQEL(2,(I-IOFFN(53)))     
#                                                                       
  600 IF(EN <= EIN(54)) GO TO 605   
      IF(EN > XVIB[NVIB]):
 GO TO 603                                   
      DO 601 J=2,NVIB                                                 
      IF(EN <= XVIB[J]):
 GO TO 602                                      
  601 CONTINUE                                                          
      J=NVIB                                                           
  602 A=(YVIB5(J)-YVIB5(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB5(J)-XVIB[J]*YVIB5(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(54,I)=(A*EN+B)*1.D-16   
      GO TO 604
# SCALE BY 1/E ABOVE XVIB[NVIB]
  603 QIN(54,I)=YVIB5(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  604 IF(EN > 6.0) PEQIN(54,I)=PEQEL(2,(I-IOFFN(54)))                  
# A1 DELTA                                                                   
  605 IF(EN <= EIN(55)) GO TO 610
      IF(EN > XEXC1(NEXC1):
) GO TO 608                                 
      DO 606 J=2,NEXC1                                                  
      IF(EN <= XEXC1(J):
) GO TO 607                                      
  606 CONTINUE                                                          
      J=NEXC1                                                           
  607 A=(YEXC1(J)-YEXC1(J-1))/(XEXC1(J)-XEXC1(J-1))                     
      B=(XEXC1(J-1)*YEXC1(J)-XEXC1(J)*YEXC1(J-1))/(XEXC1(J-1)-XEXC1(J)) 
      QIN(55,I)=(A*EN+B)*1.D-16     
      GO TO 609   
# SCALE BY 1/E**2 ABOVE XEXC1(NEXC1) EV                                       
  608 QIN(55,I)=YEXC1(NEXC1)*(XEXC1(NEXC1)/EN)**2*1.D-16        
  609 IF(EN > 6.0) PEQIN(55,I)=PEQEL(2,(I-IOFFN(55))) 
#              
  610 IF(EN <= EIN(56)) GO TO 615   
      IF(EN > XVIB[NVIB]):
 GO TO 613                                   
      DO 611 J=2,NVIB                                                 
      IF(EN <= XVIB[J]):
 GO TO 612                                      
  611 CONTINUE                                                          
      J=NVIB                                                           
  612 A=(YVIB6(J)-YVIB6(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB6(J)-XVIB[J]*YVIB6(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(56,I)=(A*EN+B)*1.D-16   
      GO TO 614
# SCALE BY 1/E ABOVE XVIB[NVIB]
  613 QIN(56,I)=YVIB6(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  614 IF(EN > 6.0) PEQIN(56,I)=PEQEL(2,(I-IOFFN(56)))                 
#              
  615 IF(EN <= EIN(57)) GO TO 620   
      IF(EN > XVIB[NVIB]):
 GO TO 618                                   
      DO 616 J=2,NVIB                                                 
      IF(EN <= XVIB[J]):
 GO TO 617                                      
  616 CONTINUE                                                          
      J=NVIB                                                           
  617 A=(YVIB7(J)-YVIB7(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB7(J)-XVIB[J]*YVIB7(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(57,I)=(A*EN+B)*1.D-16   
      GO TO 619
# SCALE BY 1/E ABOVE XVIB[NVIB]
  618 QIN(57,I)=YVIB7(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  619 IF(EN > 6.0) PEQIN(57,I)=PEQEL(2,(I-IOFFN(57)))                 
#              
  620 IF(EN <= EIN(58)) GO TO 625   
      IF(EN > XVIB[NVIB]):
 GO TO 623                                   
      DO 621 J=2,NVIB                                                 
      IF(EN <= XVIB[J]):
 GO TO 622                                      
  621 CONTINUE                                                          
      J=NVIB                                                           
  622 A=(YVIB8(J)-YVIB8(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB8(J)-XVIB[J]*YVIB8(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(58,I)=(A*EN+B)*1.D-16   
      GO TO 624
# SCALE BY 1/E ABOVE XVIB[NVIB]
  623 QIN(58,I)=YVIB8(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  624 IF(EN > 6.0) PEQIN(58,I)=PEQEL(2,(I-IOFFN(58)))                 
# B1 SIGMA                                                                  
  625 IF(EN <= EIN(59)) GO TO 630 
      IF(EN > XEXC2(NEXC2):
) GO TO 628                  
      DO 626 J=2,NEXC2                                                  
      IF(EN <= XEXC2(J):
) GO TO 627                                      
  626 CONTINUE                                                          
      J=NEXC2                                                           
  627 A=(YEXC2(J)-YEXC2(J-1))/(XEXC2(J)-XEXC2(J-1))                     
      B=(XEXC2(J-1)*YEXC2(J)-XEXC2(J)*YEXC2(J-1))/(XEXC2(J-1)-XEXC2(J)) 
      QIN(59,I)=(A*EN+B)*1.D-16        
      GO TO 629   
# SCALE BY 1/E**2 ABOVE XEXC2(NEXC2) EV                                     
  628 QIN(59,I)=YEXC2(NEXC2)*(XEXC2(NEXC2)/EN)**2*1.D-16      
  629 IF(EN > (3.0*EIN(59))) PEQIN(61,I)=PEQEL(2,(I-IOFFN(59)))  
#              
  630 IF(EN <= EIN(60)) GO TO 635   
      IF(EN > XVIB[NVIB]):
 GO TO 633                                   
      DO 631 J=2,NVIB                                                 
      IF(EN <= XVIB[J]):
 GO TO 632                                      
  631 CONTINUE                                                          
      J=NVIB                                                           
  632 A=(YVIB9(J)-YVIB9(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB9(J)-XVIB[J]*YVIB9(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(60,I)=(A*EN+B)*1.D-16   
      GO TO 634
# SCALE BY 1/E ABOVE XVIB[NVIB]
  633 QIN(60,I)=YVIB9(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  634 IF(EN > 6.0) PEQIN(60,I)=PEQEL(2,(I-IOFFN(60)))                 
#              
  635 IF(EN <= EIN(61)) GO TO 640   
      IF(EN > XVIB[NVIB]):
 GO TO 638                                   
      DO 636 J=2,NVIB                                                 
      IF(EN <= XVIB[J]):
 GO TO 637                                      
  636 CONTINUE                                                          
      J=NVIB                                                           
  637 A=(YVIB10(J)-YVIB10(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB10(J)-XVIB[J]*YVIB10(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(61,I)=(A*EN+B)*1.D-16   
      GO TO 639
# SCALE BY 1/E ABOVE XVIB[NVIB]
  638 QIN(61,I)=YVIB10(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  639 IF(EN > 6.0) PEQIN(61,I)=PEQEL(2,(I-IOFFN(61)))                 
#              
  640 IF(EN <= EIN(62)) GO TO 645   
      IF(EN > XVIB[NVIB]):
 GO TO 643                                   
      DO 641 J=2,NVIB                                                 
      IF(EN <= XVIB[J]):
 GO TO 642                                      
  641 CONTINUE                                                          
      J=NVIB                                                           
  642 A=(YVIB11(J)-YVIB11(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB11(J)-XVIB[J]*YVIB11(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(62,I)=(A*EN+B)*1.D-16   
      GO TO 644
# SCALE BY 1/E ABOVE XVIB[NVIB]
  643 QIN(62,I)=YVIB11(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  644 IF(EN > 6.0) PEQIN(62,I)=PEQEL(2,(I-IOFFN(62)))                 
#              
  645 IF(EN <= EIN(63)) GO TO 650   
      IF(EN > XVIB[NVIB]):
 GO TO 648                                   
      DO 646 J=2,NVIB                                                 
      IF(EN <= XVIB[J]):
 GO TO 647                                      
  646 CONTINUE                                                          
      J=NVIB                                                           
  647 A=(YVIB12(J)-YVIB12(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB12(J)-XVIB[J]*YVIB12(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(63,I)=(A*EN+B)*1.D-16   
      GO TO 649
# SCALE BY 1/E ABOVE XVIB[NVIB]
  648 QIN(63,I)=YVIB12(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  649 IF(EN > 6.0) PEQIN(63,I)=PEQEL(2,(I-IOFFN(63)))                 
#              
  650 IF(EN <= EIN(64)) GO TO 655   
      IF(EN > XVIB[NVIB]):
 GO TO 653                                   
      DO 651 J=2,NVIB                                                 
      IF(EN <= XVIB[J]):
 GO TO 652                                      
  651 CONTINUE                                                          
      J=NVIB                                                           
  652 A=(YVIB13(J)-YVIB13(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB13(J)-XVIB[J]*YVIB13(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(64,I)=(A*EN+B)*1.D-16   
      GO TO 654
# SCALE BY 1/E ABOVE XVIB[NVIB]
  653 QIN(64,I)=YVIB13(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  654 IF(EN > 6.0) PEQIN(64,I)=PEQEL(2,(I-IOFFN(64)))                 
#              
  655 IF(EN <= EIN(65)) GO TO 660   
      IF(EN > XVIB[NVIB]):
 GO TO 658                                   
      DO 656 J=2,NVIB                                                 
      IF(EN <= XVIB[J]):
 GO TO 657                                      
  656 CONTINUE                                                          
      J=NVIB                                                           
  657 A=(YVIB14(J)-YVIB14(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB14(J)-XVIB[J]*YVIB14(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(65,I)=(A*EN+B)*1.D-16   
      GO TO 659
# SCALE BY 1/E ABOVE XVIB[NVIB]
  658 QIN(65,I)=YVIB14(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  659 IF(EN > 6.0) PEQIN(65,I)=PEQEL(2,(I-IOFFN(65)))                 
#              
  660 IF(EN <= EIN(66)) GO TO 665   
      IF(EN > XVIB[NVIB]):
 GO TO 663                                   
      DO 661 J=2,NVIB                                                 
      IF(EN <= XVIB[J]):
 GO TO 662                                      
  661 CONTINUE                                                          
      J=NVIB                                                           
  662 A=(YVIB15(J)-YVIB15(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB15(J)-XVIB[J]*YVIB15(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(66,I)=(A*EN+B)*1.D-16   
      GO TO 664
# SCALE BY 1/E ABOVE XVIB[NVIB]
  663 QIN(66,I)=YVIB15(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  664 IF(EN > 6.0) PEQIN(66,I)=PEQEL(2,(I-IOFFN(66)))                 
#              
  665 IF(EN <= EIN(67)) GO TO 670   
      IF(EN > XVIB[NVIB]):
 GO TO 668                                   
      DO 666 J=2,NVIB                                                 
      IF(EN <= XVIB[J]):
 GO TO 667                                      
  666 CONTINUE                                                          
      J=NVIB                                                           
  667 A=(YVIB16(J)-YVIB16(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB16(J)-XVIB[J]*YVIB16(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(67,I)=(A*EN+B)*1.D-16   
      GO TO 669
# SCALE BY 1/E ABOVE XVIB[NVIB]
  668 QIN(67,I)=YVIB16(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  669 IF(EN > 6.0) PEQIN(67,I)=PEQEL(2,(I-IOFFN(67)))                 
#              
  670 IF(EN <= EIN(68)) GO TO 675   
      IF(EN > XVIB[NVIB]):
 GO TO 673                                   
      DO 671 J=2,NVIB                                                 
      IF(EN <= XVIB[J]):
 GO TO 672                                      
  671 CONTINUE                                                          
      J=NVIB                                                           
  672 A=(YVIB17(J)-YVIB17(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB17(J)-XVIB[J]*YVIB17(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(68,I)=(A*EN+B)*1.D-16   
      GO TO 674
# SCALE BY 1/E ABOVE XVIB[NVIB]
  673 QIN(68,I)=YVIB17(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  674 IF(EN > 6.0) PEQIN(68,I)=PEQEL(2,(I-IOFFN(68)))                 
#              
  675 IF(EN <= EIN(69)) GO TO 680   
      IF(EN > XVIB[NVIB]):
 GO TO 678                                   
      DO 676 J=2,NVIB                                                 
      IF(EN <= XVIB[J]):
 GO TO 677                                      
  676 CONTINUE                                                          
      J=NVIB                                                           
  677 A=(YVIB18(J)-YVIB18(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB18(J)-XVIB[J]*YVIB18(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(69,I)=(A*EN+B)*1.D-16   
      GO TO 679
# SCALE BY 1/E ABOVE XVIB[NVIB]
  678 QIN(69,I)=YVIB18(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  679 IF(EN > 6.0) PEQIN(69,I)=PEQEL(2,(I-IOFFN(69)))                 
#              
  680 IF(EN <= EIN(70)) GO TO 685   
      IF(EN > XVIB[NVIB]):
 GO TO 683                                   
      DO 681 J=2,NVIB                                                 
      IF(EN <= XVIB[J]):
 GO TO 682                                      
  681 CONTINUE                                                          
      J=NVIB                                                           
  682 A=(YVIB19(J)-YVIB19(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB19(J)-XVIB[J]*YVIB19(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(70,I)=(A*EN+B)*1.D-16   
      GO TO 684
# SCALE BY 1/E ABOVE XVIB[NVIB]
  683 QIN(70,I)=YVIB19(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  684 IF(EN > 6.0) PEQIN(70,I)=PEQEL(2,(I-IOFFN(70)))                 
#              
  685 IF(EN <= EIN(71)) GO TO 690   
      IF(EN > XVIB[NVIB]):
 GO TO 688                                   
      DO 686 J=2,NVIB                                                 
      IF(EN <= XVIB[J]):
 GO TO 687                                      
  686 CONTINUE                                                          
      J=NVIB                                                           
  687 A=(YVIB20(J)-YVIB20(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB20(J)-XVIB[J]*YVIB20(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(71,I)=(A*EN+B)*1.D-16   
      GO TO 689
# SCALE BY 1/E ABOVE XVIB[NVIB]
  688 QIN(71,I)=YVIB20(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  689 IF(EN > 6.0) PEQIN(71,I)=PEQEL(2,(I-IOFFN(71)))                 
#              
  690 IF(EN <= EIN(72)) GO TO 1000  
      IF(EN > XVIB[NVIB]):
 GO TO 693                                   
      DO 691 J=2,NVIB                                                 
      IF(EN <= XVIB[J]):
 GO TO 692                                      
  691 CONTINUE                                                          
      J=NVIB                                                           
  692 A=(YVIB21(J)-YVIB21(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB21(J)-XVIB[J]*YVIB21(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(72,I)=(A*EN+B)*1.D-16   
      GO TO 694
# SCALE BY 1/E ABOVE XVIB[NVIB]
  693 QIN(72,I)=YVIB20(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  694 IF(EN > 6.0) PEQIN(72,I)=PEQEL(2,(I-IOFFN(72)))                 
#  
#   HERZBERG CONTINUUM  C1SIG +A#3DEL + A3SIG 
# PART1                                                            
 1000 IF(EN <= EIN(73)) GO TO 1030  
      IF(EN > XEXC3(NEXC3):
) GO TO 1020                              
      DO 1010 J=2,NEXC3                                                 
      IF(EN <= XEXC3(J):
) GO TO 1015                                     
 1010 CONTINUE                                                          
      J=NEXC3                                                           
 1015 A=(YEXC3(J)-YEXC3(J-1))/(XEXC3(J)-XEXC3(J-1))                     
      B=(XEXC3(J-1)*YEXC3(J)-XEXC3(J)*YEXC3(J-1))/(XEXC3(J-1)-XEXC3(J)) 
      QIN(73,I)=(A*EN+B)*1.D-16                   
      GO TO 1021
# SCALE BY 1/E ABOVE XEXC3(NEXC3)                            
 1020 QIN(73,I)=YEXC3(NEXC3)*(XEXC3(NEXC3)/EN)*1.D-16         
 1021 IF(EN > (2.0*EIN(73))) PEQIN(73,I)=PEQEL(2,(I-IOFFN(73)))       
# PART2                                                                      
 1030 IF(EN <= EIN(74)) GO TO 1060
      IF(EN > XEXC4(NEXC4):
) GO TO 1050                                
      DO 1040 J=2,NEXC4                                                 
      IF(EN <= XEXC4(J):
) GO TO 1045                                     
 1040 CONTINUE                                                          
      J=NEXC4                                                           
 1045 A=(YEXC4(J)-YEXC4(J-1))/(XEXC4(J)-XEXC4(J-1))                     
      B=(XEXC4(J-1)*YEXC4(J)-XEXC4(J)*YEXC4(J-1))/(XEXC4(J-1)-XEXC4(J)) 
      QIN(74,I)=(A*EN+B)*1.D-16                     
      GO TO 1060
# SCALE BY 1/E ABOVE XEXC4(NEXC4)                            
 1050 QIN(74,I)=YEXC4(NEXC4)*(XEXC4(NEXC4)/EN)*1.D-16           
 1060 IF(EN > (2.0*EIN(74))) PEQIN(74,I)=PEQEL(2,(I-IOFFN(74)))
# PART3                                                                      
      IF(EN <= EIN(75):
) GO TO 1100      
      IF(EN > XEXC5(NEXC5):
) GO TO 1080                                
      DO 1070 J=2,NEXC5                                                 
      IF(EN <= XEXC5(J):
) GO TO 1075                                     
 1070 CONTINUE                                                          
      J=NEXC5                                                           
 1075 A=(YEXC5(J)-YEXC5(J-1))/(XEXC5(J)-XEXC5(J-1))                     
      B=(XEXC5(J-1)*YEXC5(J)-XEXC5(J)*YEXC5(J-1))/(XEXC5(J-1)-XEXC5(J)) 
      QIN(75,I)=(A*EN+B)*1.D-16              
      GO TO 1100
# SCALE BY 1/E ABOVE XEXC5(NEXC5)                              
 1080 QIN(75,I)=YEXC5(NEXC5)*(XEXC5(NEXC5)/EN)*1.D-16              
 1100 IF(EN > (2.0*EIN(75))) PEQIN(75,I)=PEQEL(2,(I-IOFFN(75)))
# SUM OF TRANSITIONS TO B3SIGMA V=7 TO V=21
      IF(EN <= EIN(76):
) GO TO 1150
# USE BEF SCALING
      QIN(76,I)=0.00026/(EIN(76)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(76)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(76)+E(3))
      IF(QIN(76,I):
 < 0.0) QIN(76,I)=0.0  
      IF(EN > (2.0*EIN(76):
)) PEQIN(76,I)=PEQEL(2,(I-IOFFN(76)))
#
# SCHUMANN-RUNGE CONTINUUM 
 1150 IF(EN <= EIN(77)) GO TO 1151
# USE BEF SCALING
      QIN(77,I)=0.000408/(EIN(77)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(77)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(77)+E(3))
 1151 IF(EN <= EIN(78)) GO TO 1152
      QIN(78,I)=0.000623/(EIN(78)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(78)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(78)+E(3))
 1152 IF(EN <= EIN(79)) GO TO 1153
      QIN(79,I)=0.001016/(EIN(79)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(79)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(79)+E(3))
 1153 IF(EN <= EIN(80)) GO TO 1154
      QIN(80,I)=0.001562/(EIN(80)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(80)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(80)+E(3))
 1154 IF(EN <= EIN(81)) GO TO 1155
      QIN(81,I)=0.002312/(EIN(81)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(81)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(81)+E(3))
 1155 IF(EN <= EIN(82)) GO TO 1156
      QIN(82,I)=0.003234/(EIN(82)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(82)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(82)+E(3))
 1156 IF(EN <= EIN(83)) GO TO 1157
      QIN(83,I)=0.004362/(EIN(83)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(83)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(83)+E(3))
 1157 IF(EN <= EIN(84)) GO TO 1158
      QIN(84,I)=0.005573/(EIN(84)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(84)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(84)+E(3))
 1158 IF(EN <= EIN(85)) GO TO 1159
      QIN(85,I)=0.006930/(EIN(85)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(85)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(85)+E(3))
 1159 IF(EN <= EIN(86)) GO TO 1160
      QIN(86,I)=0.008342/(EIN(86)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(86)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(86)+E(3))
 1160 IF(EN <= EIN(87)) GO TO 1161
      QIN(87,I)=0.009692/(EIN(87)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(87)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(87)+E(3))
# SUM OF RESONANCES (NON-DIPOLE) IN S-R CONTINUUM AT 8.20EV
      IF(EN <= EIN(88):
) GO TO 1161      
      IF(EN > XEXC6(NEXC6):
) GO TO 963                                
      DO 961 J=2,NEXC6                                                 
      IF(EN <= XEXC6(J):
) GO TO 962                                     
  961 CONTINUE                                                          
      J=NEXC6                                                           
  962 A=(YEXC6(J)-YEXC6(J-1))/(XEXC6(J)-XEXC6(J-1))                     
      B=(XEXC6(J-1)*YEXC6(J)-XEXC6(J)*YEXC6(J-1))/(XEXC6(J-1)-XEXC6(J)) 
      QIN(88,I)=(A*EN+B)*1.D-16          
      GO TO 1161
# SCALE BY 1/E ABOVE XEXC6(NEXC6)                              
  963 QIN(88,I)=YEXC6(NEXC6)*(XEXC6(NEXC6)/EN)*1.D-16             
# MORE SCHUMANN RUNGE CONTINUUM
 1161 IF(EN <= EIN(89)) GO TO 1162
      QIN(89,I)=0.010816/(EIN(89)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(89)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(89)+E(3))
 1162 IF(EN <= EIN(90)) GO TO 1163
      QIN(90,I)=0.011839/(EIN(90)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(90)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(90)+E(3))
 1163 IF(EN <= EIN(91)) GO TO 1164
      QIN(91,I)=0.012580/(EIN(91)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(91)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(91)+E(3))
 1164 IF(EN <= EIN(92)) GO TO 1165
      QIN(92,I)=0.013160/(EIN(92)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(92)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(92)+E(3))
 1165 IF(EN <= EIN(93)) GO TO 1166
      QIN(93,I)=0.013432/(EIN(93)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(93)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(93)+E(3))
 1166 IF(EN <= EIN(94)) GO TO 1167
      QIN(94,I)=0.013571/(EIN(94)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(94)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(94)+E(3))
 1167 IF(EN <= EIN(95)) GO TO 1168
      QIN(95,I)=0.013425/(EIN(95)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(95)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(95)+E(3))
 1168 IF(EN <= EIN(96)) GO TO 1169
      QIN(96,I)=0.012948/(EIN(96)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(96)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(96)+E(3))
 1169 IF(EN <= EIN(97)) GO TO 1170
      QIN(97,I)=0.010892/(EIN(97)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(97)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(97)+E(3))
 1170 IF(EN <= EIN(98)) GO TO 1171
      QIN(98,I)=0.006688/(EIN(98)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(98)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(98)+E(3))
 1171 IF(EN <= EIN(99)) GO TO 1172
      QIN(99,I)=0.002784/(EIN(99)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(99)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(99)+E(3))
 1172 IF(EN <= EIN(100)) GO TO 1173
      QIN(100,I)=0.001767/(EIN(100)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(100)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(100)+E(3))
 1173 IF(EN <= EIN(101)) GO TO 1174
      QIN(101,I)=0.000633/(EIN(101)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(101)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(101)+E(3))
 1174 IF(EN <= EIN(102)) GO TO 1175
      QIN(102,I)=0.000438/(EIN(102)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(102)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(102)+E(3))
 1175 IF(EN <= EIN(103)) GO TO 1176
      QIN(103,I)=0.000465/(EIN(103)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(103)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(103)+E(3))
#
# E3 SIGMA V=0 'LONGEST BAND'
 1176 IF(EN <= EIN(104)) GO TO 1177
      QIN(104,I)=0.008432/(EIN(104)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(104)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(104)+E(3))
# ADD RESONANT COMPONENT TO LONG BAND
      IF(EN > XEXC7(NEXC7):
) GO TO 966                                
      DO 964 J=2,NEXC7                                                
      IF(EN <= XEXC7(J):
) GO TO 965                                     
  964 CONTINUE                                                          
      J=NEXC7                                                           
  965 A=(YEXC7(J)-YEXC7(J-1))/(XEXC7(J)-XEXC7(J-1))                     
      B=(XEXC7(J-1)*YEXC7(J)-XEXC7(J)*YEXC7(J-1))/(XEXC7(J-1)-XEXC7(J)) 
      QIN(104,I)=QIN(104,I)+(A*EN+B)*1.D-16                       
      GO TO 1177
# SCALE BY 1/E ABOVE XEXC7(NEXC7)                            
  966 QIN(104,I)=QIN(104,I)+YEXC7(NEXC7)*(XEXC7(NEXC7)/EN)*1.D-16       
#
# E3 SIGMA V=1 'SECOND BAND'
 1177 IF(EN <= EIN(105)) GO TO 1178
      QIN(105,I)=0.007598/(EIN(105)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(105)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(105)+E(3))
# E3 SIGMA V=2 'THIRD BAND'
 1178 IF(EN <= EIN(106)) GO TO 1881
      QIN(106,I)=0.000829/(EIN(106)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(106)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(106)+E(3))
# 
# TRIPLET SUM BELOW IP
# 
 1881 IF(EN <= EIN(107)) GO TO 1179
      IF(EN > XEXC8(NEXC8):
) GO TO 1884                              
      DO 1882 J=2,NEXC8                                                
      IF(EN <= XEXC8(J):
) GO TO 1883                                     
 1882 CONTINUE                                                          
      J=NEXC8                                                           
 1883 A=(YEXC8(J)-YEXC8(J-1))/(XEXC8(J)-XEXC8(J-1))                     
      B=(XEXC8(J-1)*YEXC8(J)-XEXC8(J)*YEXC8(J-1))/(XEXC8(J-1)-XEXC8(J))
      QIN(107,I)=(A*EN+B)*1.D-16                 
      GO TO 1179
# SCALE BY 1/E**1.5 ABOVE XEXC8(NEXC8)
 1884 QIN(107,I)=YEXC8(NEXC8)*((XEXC8(NEXC8)/EN)**1.5)*1.D-16           
#  
 1179 IF(EN <= EIN(108)) GO TO 1180
      QIN(108,I)=0.000644/(EIN(108)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(108)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(108)+E(3))
# 
 1180 IF(EN <= EIN(109)) GO TO 1181
      QIN(109,I)=0.001460/(EIN(109)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(109)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(109)+E(3))
# 
 1181 IF(EN <= EIN(110)) GO TO 1182
      QIN(110,I)=0.000818/(EIN(110)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(110)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(110)+E(3))
# 
 1182 IF(EN <= EIN(111)) GO TO 1183
      QIN(111,I)=0.000736/(EIN(111)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(111)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(111)+E(3))
# 
 1183 IF(EN <= EIN(112)) GO TO 1184
      QIN(112,I)=0.000598/(EIN(112)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(112)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(112)+E(3))
# 
 1184 IF(EN <= EIN(113)) GO TO 1185
      QIN(113,I)=0.001482/(EIN(113)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(113)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(113)+E(3))
# 
 1185 IF(EN <= EIN(114)) GO TO 1186
      QIN(114,I)=0.000425/(EIN(114)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(114)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(114)+E(3))
# 
 1186 IF(EN <= EIN(115)) GO TO 1187
      QIN(115,I)=0.001669/(EIN(115)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(115)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(115)+E(3))
# 
 1187 IF(EN <= EIN(116)) GO TO 1188
      QIN(116,I)=0.001766/(EIN(116)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(116)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(116)+E(3))
# 
 1188 IF(EN <= EIN(117)) GO TO 1189
      QIN(117,I)=0.001613/(EIN(117)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(117)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(117)+E(3))
#
 1189 DO  1200 JK=77,117
      IF(QIN(JK,I):
 <= 0.0) QIN(JK,I)=0.0
      IF(EN <= (2.0*EIN(JK):
)) GO TO 1200
      PEQIN(JK,I)=PEQEL(2,(I-IOFFN(JK)))
 1200 CONTINUE
# NEUTRAL DISSOCIATION ABOVE IONISATION ENERGY
# 
      IF(EN <= EIN(118):
) GO TO 1301
      QIN(118,I)=0.001746/(EIN(118)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(118)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(118)+E(3))
# 
 1301 IF(EN <= EIN(119)) GO TO 1302
      QIN(119,I)=0.003329/(EIN(119)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(119)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(119)+E(3))
# 
 1302 IF(EN <= EIN(120)) GO TO 1303
      QIN(120,I)=0.006264/(EIN(120)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(120)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(120)+E(3))
# 
 1303 IF(EN <= EIN(121)) GO TO 1304
      QIN(121,I)=0.013513/(EIN(121)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(121)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(121)+E(3))
# 
 1304 IF(EN <= EIN(122)) GO TO 1885
      QIN(122,I)=0.011373/(EIN(122)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(122)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(122)+E(3))
# 
# TRIPLET SUM ABOVE IP
# 
 1885 IF(EN <= EIN(123)) GO TO 1305
      IF(EN > XEXC9(NEXC9):
) GO TO 1888                              
      DO 1886 J=2,NEXC9                                                
      IF(EN <= XEXC9(J):
) GO TO 1887                                     
 1886 CONTINUE                                                          
      J=NEXC9                                                           
 1887 A=(YEXC9(J)-YEXC9(J-1))/(XEXC9(J)-XEXC9(J-1))                     
      B=(XEXC9(J-1)*YEXC9(J)-XEXC9(J)*YEXC9(J-1))/(XEXC9(J-1)-XEXC9(J)) 
      QIN(123,I)=(A*EN+B)*1.D-16                     
      GO TO 1305
# SCALE BY 1/E**1.5 ABOVE XEXC9(NEXC9)
 1888 QIN(123,I)=YEXC9(NEXC9)*(XEXC9(NEXC9)/EN)**1.5*1.D-16        
#  
 1305 IF(EN <= EIN(124)) GO TO 1306
      QIN(124,I)=0.006052/(EIN(124)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(124)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(124)+E(3))
# 
 1306 IF(EN <= EIN(125)) GO TO 1307
      QIN(125,I)=0.006051/(EIN(125)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(125)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(125)+E(3))
# 
 1307 IF(EN <= EIN(126)) GO TO 1308
      QIN(126,I)=0.004993/(EIN(126)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(126)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(126)+E(3))
# 
 1308 IF(EN <= EIN(127)) GO TO 1309
      QIN(127,I)=0.005045/(EIN(127)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(127)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(127)+E(3))
# 
 1309 IF(EN <= EIN(128)) GO TO 1310
      QIN(128,I)=0.004962/(EIN(128)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(128)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(128)+E(3))
# 
 1310 IF(EN <= EIN(129)) GO TO 1311
      QIN(129,I)=0.006520/(EIN(129)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(129)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(129)+E(3))
# 
 1311 IF(EN <= EIN(130)) GO TO 1312
      QIN(130,I)=0.008432/(EIN(130)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(130)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(130)+E(3))
# 
 1312 IF(EN <= EIN(131)) GO TO 1313
      QIN(131,I)=0.011304/(EIN(131)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(131)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(131)+E(3))
# 
 1313 IF(EN <= EIN(132)) GO TO 1314
      QIN(132,I)=0.015172/(EIN(132)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(132)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(132)+E(3))
# 
 1314 IF(EN <= EIN(133)) GO TO 1315
      QIN(133,I)=0.022139/(EIN(133)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(133)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(133)+E(3))
# 
 1315 IF(EN <= EIN(134)) GO TO 1316
      QIN(134,I)=0.032682/(EIN(134)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(134)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(134)+E(3))
# 
 1316 IF(EN <= EIN(135)) GO TO 1317
      QIN(135,I)=0.039457/(EIN(135)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(135)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(135)+E(3))
# 
 1317 IF(EN <= EIN(136)) GO TO 1318
      QIN(136,I)=0.029498/(EIN(136)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(136)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(136)+E(3))
# 
 1318 IF(EN <= EIN(137)) GO TO 1319
      QIN(137,I)=0.018923/(EIN(137)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(137)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(137)+E(3))
# 
 1319 IF(EN <= EIN(138)) GO TO 1320
      QIN(138,I)=0.017762/(EIN(138)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(138)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(138)+E(3))
# 
 1320 IF(EN <= EIN(139)) GO TO 1321
      QIN(139,I)=0.015115/(EIN(139)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(139)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(139)+E(3))
# 
 1321 IF(EN <= EIN(140)) GO TO 1322
      QIN(140,I)=0.013220/(EIN(140)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(140)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(140)+E(3))
# 
 1322 IF(EN <= EIN(141)) GO TO 1323
      QIN(141,I)=0.009540/(EIN(141)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(141)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(141)+E(3))
# 
 1323 IF(EN <= EIN(142)) GO TO 1324
      QIN(142,I)=0.005854/(EIN(142)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(142)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(142)+E(3))
# 
 1324 IF(EN <= EIN(143)) GO TO 1325
      QIN(143,I)=0.008733/(EIN(143)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(143)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(143)+E(3))
# 
 1325 IF(EN <= EIN(144)) GO TO 1326
      QIN(144,I)=0.007914/(EIN(144)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(144)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(144)+E(3))
# 
 1326 IF(EN <= EIN(145)) GO TO 1327
      QIN(145,I)=0.008002/(EIN(145)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(145)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(145)+E(3))
# 
 1327 IF(EN <= EIN(146)) GO TO 1328
      QIN(146,I)=0.006519/(EIN(146)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(146)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(146)+E(3))
# 
 1328 IF(EN <= EIN(147)) GO TO 1329
      QIN(147,I)=0.003528/(EIN(147)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(147)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(147)+E(3))
# 
 1329 IF(EN <= EIN(148)) GO TO 1330
      QIN(148,I)=0.001469/(EIN(148)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/
     /(4.0*EIN(148)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(148)+E(3))
#
 1330 DO  1340 JK=118,148
      IF(QIN(JK,I):
 <= 0.0) QIN(JK,I)=0.0
      IF(EN <= (2.0*EIN(JK):
)) GO TO 1340
      PEQIN(JK,I)=PEQEL(2,(I-IOFFN(JK)))
 1340 CONTINUE
# LOAD BREMSSTRAHLUNG X-SECTION
      QIN(149,I)=0.0
      IF(EN <= 1000.):
 GO TO 1350
      DO 1341 J=2,NBREM
      IF(EN <= EBRM(J):
) GO TO 1342
 1341 CONTINUE
      J=NBREM
 1342 A=(math.log(Z8T(J))-math.log(Z8T(J-1)))/(EBRM(J)-EBRM(J-1))
      B=(math.log(Z8T(J))*EBRM(J-1)-math.log(Z8T(J-1))*EBRM(J))/
     /(EBRM(J-1)-EBRM(J))
      QIN(149,I)=math.exp(A*EN+B)*2.D-24
 1350 CONTINUE
# SCHUMANN RUNGE SUM
      SUMSR=0.0
      DO 1400 JK=77,103 
 1400 SUMSR=SUMSR+QIN(JK,I)
# DISS SUM ABOVE IONISATION ENERGY
      SUMDISI=0.0
      DO 1501 JK=118,148
 1501 SUMDISI=SUMDISI+QIN(JK,I)
# SUM DISS LOW
      SUMDISL=0.0
      DO 1502 JK=107,117 
 1502 SUMDISL=SUMDISL+QIN(JK,I)
# SUM ROT
      SUMROT=0.0
      DO 1508 JK=1,48
 1508 SUMROT=SUMROT+QIN(JK,I)
#     WRITE(6,8747) SUMROT,I,EN
#8747 FORMAT(' SUMROT=',D12.4,' I=',I5,' EN=',D12.4)
# SUMVIB
      SUMVIB=0.0
      DO 1506 JK=49,54 
 1506 SUMVIB=SUMVIB+QIN(JK,I)
      SUMVIB=SUMVIB+QIN(55,I)+QIN(56,I)+QIN(57,I)
      DO 1507 JK=60,72 
 1507 SUMVIB=SUMVIB+QIN(JK,I)
# SUM HERZBERG
      SUMHERZ=QIN(73,I)+QIN(74,I)+QIN(75,I)  
# SUM E3SIGMA
      SUME3=QIN(104,I)+QIN(105,I)+QIN(106,I)
# SUM ION
      SUMION=0.0
      DO 1503 JK=1,NION
 1503 SUMION=SUMION+QION(JK,I)
# SUM OF EXCITATIONS (NO ROTATIONS)
      SUMEXC=0.0
      DO 1504 JK=49,NIN   
 1504 SUMEXC=SUMEXC+QIN(JK,I)   
      SUMEXC=SUMEXC+Q(4,I)
      Q(1,I)=Q(2,I)+SUMION+SUMEXC
#     WRITE(6,889) EN,Q(2,I),SUMEXC,SUMION,Q(1,I),Q(4,I),I 
# 889 FORMAT(' EN=',D12.4,' ELAS=',D12.4,' EXC=',D12.4,' ION=',D12.4,
#    /' TOT=',D12.4,' Q4    =',D12.4,' I=',I5)
#     SUMINEL=SUMION+SUMEXC
#     WRITE(6,890) EN,SUMION,SUMEXC,SUMINEL
# 890 FORMAT(' EN=',D12.4,' SUMION=',D12.4,' SUMEXC=',D12.4,' SUMINEL=',
#    /D12.4)
 9900 CONTINUE                                                          
#  SAVE COMPUTE TIME 
      DO 2000 K=1,148
      J=149-K
      IF(EFINAL <= EIN(J):
) NIN=J-1
 2000 CONTINUE
      IF(NIN < 52):
 NIN=52
#     IF(EFINAL > 1000.) NIN=149                                     
#                                                                       
      RETURN      
      # end 
      def GAS16(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY  
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
#    /QNULL,NNULL,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,
#    /SCRPT)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(4000),EROOT(4000),QT1(4000),QT2(4000),
     /QT3(4000),QT4(4000)
      COMMON/DENS/DEN(4000)
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)         
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30)
     /,EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250],
     /PJ(220) 
      DIMENSION XELA[216],YELA[216],YMOM(216),YEPS(216),
     /XROT(70),YROT(70),
     /XVB1(87),YVB1(87),XVB2(69),YVB2(69),XVB3(70),YVB3(70),
     /XVB4(50),YVB4(50),XVB5(40),YVB5(40),XVB6(41),YVB6(41),
     /XVB7(42),YVB7(42),XVB8(40),YVB8(40),XVB9(35),YVB9(35),
     /XVB10(35),YVB10(35),XVB11(35),YVB11(35),XVB12(33),YVB12(33),
     /XVB13(31),YVB13(31),XVB14(28),YVB14(28),XVB15(32),YVB15(32),
     /XTRP1(23),YTRP1(23),YTP1M(23),XTRP2(23),YTRP2(23),YTP2M(23),
     /XTRP3(21),YTRP3(21),YTP3M(21),XTRP4(22),YTRP4(22),YTP4M(22),
     /XTRP5(23),YTRP5(23),YTP5M(23),XTRP6(21),YTRP6(21),YTP6M(21),
     /XTRP7(21),YTRP7(21),YTP7M(21),XTRP8(21),YTRP8(21),YTP8M(21),
     /XTRP9(20),YTRP9(20),YTP9M(20),XTRP10(20),YTRP10(20),YTP10M(20),
     /XTRP11(19),YTRP11(19),YTP11M(19),XTRP12(22),YTRP12(22),YTP12M(22),
     /XTRP13(10),YTRP13(10),YTP13M(10),XTRP14(10),YTRP14(10),YTP14M(10),
     /XSNG1(19),YSNG1(19),YSG1M(19),XSNG2(17),YSNG2(17),YSG2M(17),
     /XSNG3(17),YSNG3(17),YSG3M(17),XSNG4(19),YSNG4(19),YSG4M(19),
     /XSNG5(17),YSNG5(17),YSG5M(17),XSNG6(16),YSNG6(16),YSG6M(16),
     /XSNG7(12),YSNG7(12),YSG7M(12),XSNG8(8),YSNG8(8),YSG8M(8),
     /XSNG9(16),YSNG9(16),YSG9M(16),XSNG10(8),YSNG10(8),YSG10M(8),
     /XSNG11(8),YSNG11(8),YSG11M(8),XSNG12(8),YSNG12(8),YSG12M(8),
     /XSNG13(8),YSNG13(8),YSG13M(8),XSNG14(8),YSNG14(8),YSG14M(8),
     /XSNG15(8),YSNG15(8),YSG15M(8),
     /XKSH(89),YKSH(89),
     /XION(87),YION(87),XION1(87),YION1(87),XION2(63),YION2(63),
     /XION3(48),YION3(48),XION4(54),YION4(54),IOFFN(127),IOFFION(12)
      DIMENSION Z7T(25),EBRM(25)
      CHARACTER*50 SCRPT(300),SCRPTN(10)      
      CHARACTER*25 NAME                                                 
      DATA XELA/0.00,.001,.0015,.0018,.002,.0025,.003,.004,.005,.006,
     /.007,.008,.009,.010,.012,.015,.018,.020,.025,.030,
     /0.04,0.05,0.06,0.07,0.08,0.09,0.10,0.12,0.15,0.18,    
     /0.20,0.25,0.30,0.40,0.50,0.60,0.70,0.80,0.90,1.00,
     /1.10,1.20,1.30,1.40,1.50,1.60,1.70,1.80,1.85,1.90,
     /1.95,2.00,2.05,2.10,2.15,2.20,2.25,2.30,2.35,2.40,
     /2.45,2.50,2.55,2.60,2.65,2.70,2.75,2.80,2.85,2.90,
     /2.95,3.00,3.05,3.10,3.15,3.20,3.25,3.30,3.35,3.40,
     /3.45,3.50,3.60,3.70,3.80,3.90,4.00,4.50,5.00,5.50,
     /6.00,6.50,7.00,8.00,9.00,10.0,12.0,15.0,17.0,20.0,
     /25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,
     /100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,
     /500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,
     /2500.,3000.,3500.,4000.,4500.,5000.,6000.,7000.,8000.,9000.,
     /10000.,1.25D4,1.5D4,1.75D4,2.0D4,2.5D4,3.0D4,3.5D4,4.0D4,4.5D4,
     /5.0D4,6.0D4,7.0D4,8.0D4,9.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,
     /2.5D5,3.0D5,3.5D5,4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,
     /1.0D6,1.25D6,1.5D6,1.75D6,2.0D6,2.5D6,3.0D6,3.5D6,4.0D6,4.5D6,
     /5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,
     /2.5D7,3.0D7,3.5D7,4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,
     /1.0D8,1.25D8,1.5D8,1.75D8,2.0D8,2.5D8,3.0D8,3.5D8,4.0D8,4.5D8,
     /5.0D8,6.0D8,7.0D8,8.0D8,9.0D8,1.0D9/
# ELASTIC +ROTATION X-SECTION
      DATA YELA/1.12,1.377,1.446,1.484,1.510,1.570,1.640,1.738,1.830,
     /1.928,
     /2.020,2.082,2.151,2.210,2.362,2.570,2.780,2.900,3.170,3.430,
     /3.850,4.170,4.480,4.750,5.000,5.250,5.450,5.850,6.300,6.800,      
     /7.000,7.600,8.000,8.600,9.000,9.200,9.300,9.450,9.650,9.840, 
     /10.00,10.24,10.48,10.67,11.05,11.71,12.90,14.90,16.10,17.60,
     /17.40,17.10,16.30,17.10,20.30,24.10,21.70,18.80,17.90,22.20,
     /24.90,21.70,18.00,16.80,20.90,22.45,20.30,17.00,16.80,18.70,
     /18.70,16.50,15.30,15.70,16.00,15.40,14.60,14.50,14.70,14.30,
     /13.50,13.80,13.60,13.30,13.15,13.00,12.90,11.90,11.60,11.40,
     /11.20,11.10,11.10,10.90,10.80,11.20,11.40,11.80,11.80,11.30,
     /10.70,9.660,8.740,8.090,7.530,7.130,6.380,5.840,5.330,4.940,
     /4.650,4.100,3.600,3.300,2.990,2.620,2.320,2.100,1.930,1.780,
     /1.660,1.470,1.300,1.200,1.110,1.030,0.870,0.765,0.670,0.600,
     /0.496,0.420,0.364,0.321,0.288,0.261,0.219,0.189,0.167,0.149,
     /0.135,0.109,.0919,.0795,.0702,.0570,.0483,.0420,.0372,.0336,
     /.0306,.0262,.0231,.0207,.0189,.0174,.0148,.0130,.0118,.0108,
     /.00953,.00868,.00808,.00764,.00730,.00703,.00664,.00637,.00617,
     /.00602, 
     /.00591,.00572,.00560,.00552,.00546,.00539,.00535,.00532,.00530,
     /.00529,
     /.00528,.00527,.00525,.00525,.00525,.00524,.00524,.00524,.00524,
     /.005236,
     /26*.005234/
# ELASTIC+ROTATION MOMENTUM TRANSFER X-SECTION           
      DATA YMOM/1.12,1.377,1.446,1.484,1.510,1.570,1.640,1.738,1.830,
     /1.928,
     /2.020,2.082,2.151,2.210,2.362,2.570,2.780,2.900,3.170,3.430,      
     /3.900,4.350,4.750,5.100,5.410,5.690,5.950,6.450,7.100,7.590,
     /7.900,8.500,9.000,9.700,10.30,10.90,11.25,11.40,11.30,11.10,
     /10.90,10.65,10.45,10.65,10.80,11.85,13.60,16.00,17.40,19.00,
     /18.80,18.60,17.80,18.50,21.70,25.50,23.10,20.20,19.30,23.50,
     /26.20,23.00,19.30,18.10,22.20,23.70,21.50,18.10,17.80,19.60,
     /19.40,17.10,15.70,15.90,15.90,15.10,14.00,13.50,13.30,12.50,
     /11.40,11.40,11.00,10.60,10.20,10.00,9.900,9.100,8.900,8.700,
     /8.500,8.400,8.300,8.200,8.200,8.300,8.400,8.500,8.500,8.300,
     /7.800,7.200,6.700,6.310,5.950,5.600,4.700,4.000,3.500,3.000,
     /2.650,2.100,1.650,1.370,1.179,0.861,0.662,0.527,0.431,0.360,
     /0.306,0.230,0.179,0.144,0.119,0.100,.0687,.0504,.0387,.0307,
     /.0208,.0151,.0115,.00904,.00733,.00607,.00438,.00332,.00261,
     /.00211,
     /.00174,.00116,8.37D-4,6.33D-4,4.97D-4,3.32D-4,2.39D-4,1.81D-4,
     /1.43D-4,1.15D-4,
     /9.56D-5,6.91D-5,5.26D-5,4.16D-5,3.39D-5,2.82D-5,1.92D-5,1.41D-5,
     /1.09D-5,8.71D-6,
     /6.04D-6,4.50D-6,3.52D-6,2.86D-6,2.38D-6,2.02D-6,1.52D-6,1.20D-6,
     /9.83D-7,8.21D-7,
     /6.99D-7,5.00D-7,3.77D-7,2.97D-7,2.40D-7,1.68D-7,1.25D-7,9.72D-8,
     /7.78D-8,6.38D-8,
     /5.34D-8,3.91D-8,2.99D-8,2.37D-8,1.93D-8,1.60D-8,1.07D-8,7.73D-9,
     /5.84D-9,4.58D-9,
     /3.04D-9,2.17D-9,1.63D-9,1.27D-9,1.01D-9,8.31D-10,5.88D-10,
     /4.37D-10,3.38D-10,2.69D-10,
     /2.19D-10,1.41D-10,9.86D-11,7.27D-11,5.57D-11,3.57D-11,2.48D-11,
     /1.83D-11,1.40D-11,1.11D-11,
     /8.96D-12,6.22D-12,4.57D-12,3.50D-12,2.77D-12,2.24D-12/
# ELASTIC ANISOTROPY def EPSILON
# EPSILON=1.0-YEPS
      DATA YEPS/20*1.00,
     /1.01974,1.06500,1.09085,1.11025,1.12263,1.12532,1.13709,1.15311,
     /1.18909,1.17321,
     /1.19143,1.17651,1.18619,1.19046,1.21464,1.27297,1.30840,1.30369,
     /1.25314,1.19066,
     /1.13451,1.06001,0.99571,0.99719,0.96607,1.01794,1.08128,1.11047,
     /1.12077,1.11898,
     /1.12034,1.13112,1.13750,1.12243,1.10323,1.08700,1.09660,1.11142,
     /1.11699,1.08770,
     /1.07822,1.08972,1.10807,1.11576,1.09314,1.08340,1.08852,1.09688,
     /1.08914,1.07212,
     /1.05611,1.05451,1.03920,1.01911,0.99063,0.97078,0.93840,0.89677,
     /0.85772,0.81253,
     /0.76918,0.74264,0.71789,0.70105,0.67098,0.66198,0.65948,0.65567,
     /0.65920,0.65352,
     /0.64764,0.64463,0.63220,0.63846,0.64810,0.62303,0.61725,0.59484,
     /0.59484,0.61407,
     /0.60653,0.62889,0.65829,0.67702,0.69139,0.68467,0.61702,0.54773,
     /0.51113,0.44953,
     /0.40500,0.34012,0.28400,0.24224,0.22315,0.16753,0.13474,0.11089,
     /0.09315,0.08049,
     /0.07031,0.05555,0.04637,0.03828,0.03277,0.02863,0.02168,0.01705,
     /0.01436,0.01227,
     /0.00951,0.00782,0.00665,0.00576,0.00508,0.00454,0.00377,0.00322,
     /0.00279,0.00248,
     /.002212,.001759,.001461,.001246,.001084,8.62D-4,7.12D-4,6.07D-4,
     /5.31D-4,4.64D-4,
     /4.18D-4,3.44D-4,2.91D-4,2.52D-4,2.21D-4,1.97D-4,1.53D-4,1.249D-4,
     /1.042D-4,8.95D-5,
     /6.83D-5,5.45D-5,4.49D-5,3.79D-5,3.25D-5,2.83D-5,2.20D-5,1.77D-5,
     /1.47D-5,1.24D-5,
     /1.062D-5,7.65D-6,5.73D-6,4.48D-6,3.60D-6,2.48D-6,1.81D-6,1.38D-6,
     /1.09D-6,8.85D-7,
     /7.32D-7,5.24D-7,3.94D-7,3.07D-7,2.46D-7,2.02D-7,1.32D-7,9.28D-8,
     /6.89D-8,5.31D-8,
     /3.44D-8,2.40D-8,1.77D-8,1.36D-8,1.07D-8,8.70D-9,6.03D-9,4.41D-9,
     /3.36D-9,2.64D-9,
     /2.13D-9,1.34D-9,9.19D-10,6.67D-10,5.04D-10,3.16D-10,2.16D-10,
     /1.57D-10,1.18D-10,9.3D-11,
     /7.4D-11,5.1D-11,3.7D-11,2.8D-11,2.2D-11,1.7D-11/
# ROTATIONAL RESONANCE def 
      DATA XROT/0.00,1.00,1.10,1.20,1.30,1.40,1.50,1.60,1.70,1.80,
     /1.85,1.90,1.95,1.98,2.00,2.05,2.10,2.15,2.20,2.25,
     /2.30,2.35,2.40,2.45,2.50,2.55,2.60,2.65,2.69,2.70,
     /2.75,2.80,2.85,2.90,2.95,3.00,3.05,3.10,3.15,3.20,
     /3.25,3.30,3.35,3.40,3.45,3.50,3.60,3.70,3.80,3.90,
     /4.00,4.10,4.20,4.30,4.40,4.50,4.60,4.70,4.80,4.90,
     /5.00,5.10,5.20,5.30,5.40,5.50,5.60,5.70,5.80,5.90/
      DATA YROT/0.00,0.00,0.00,0.10,0.20,0.30,0.40,1.10,2.30,4.30,
     /5.50,7.00,6.80,7.10,6.50,5.70,6.50,9.70,13.5,11.1,
     /8.20,7.30,11.6,14.3,11.1,7.40,6.20,10.2,12.0,11.8,
     /9.60,6.30,6.10,8.00,8.00,5.80,4.60,5.00,5.30,4.70,
     /3.90,3.80,4.00,3.50,2.70,3.00,2.80,2.50,2.40,2.20,
     /2.10,1.90,1.70,1.50,1.20,1.00,0.80,0.70,0.60,0.50,
     /0.40,0.30,0.20,0.10,0.00,0.00,0.00,0.00,0.00,0.00/
# ALLAN AND VICIC  FROM 1.6 EV TO 4.5 EV FOR VIBRATIONS           
      DATA XVB1/.2889,.289,.290,.292,.293,.295,.300,.310,.320,.330,
     /.340,.360,.380,0.40,0.50,0.60,0.70,0.80,0.90,1.00,
     /1.10,1.20,1.30,1.35,1.40,1.45,1.50,1.55,1.60,1.65,
     /1.70,1.75,1.80,1.85,1.90,1.95,2.00,2.05,2.10,2.15,
     /2.20,2.25,2.30,2.35,2.40,2.45,2.50,2.55,2.60,2.65,
     /2.70,2.75,2.80,2.85,2.90,2.95,3.00,3.05,3.10,3.15,
     /3.20,3.25,3.30,3.35,3.40,3.45,3.50,3.55,3.60,3.65,
     /3.70,3.75,3.80,3.90,4.00,4.50,5.00,7.50,10.0,15.0,
     /18.0,20.0,22.5,25.0,30.0,50.0,80.0/            
# V1                                            
      DATA YVB1/.00,.00018,.00045,.00072,.00082,.00099,.00131,
     /.00174,.00203,.00225,
     /.00242,.00267,.00283,.00294,.00340,.00360,.0039,.0044,.0054,.0066,
     /.0086,.0125,.0182,.0230,.0295,.0370,.0475,.0580,.0750,.103,
     /.178,.320,.600,1.20,2.40,4.35,4.40,2.71,1.67,2.40,
     /3.62,4.90,4.46,3.31,2.26,1.74,2.90,4.15,4.25,2.95,
     /1.61,1.97,2.95,3.43,2.30,1.41,1.63,2.30,2.01,1.54,
     /1.12,1.27,1.37,1.27,0.96,0.84,.820,.768,.648,.600,
     /.624,.528,.432,.390,.330,.230,.075,.025,.012,.031,
     /.061,.156,.101,.066,.022,.012,.006/  
# V2              
      DATA XVB2/.5742,.600,.700,.800,.900,1.00,1.10,1.20,1.30,1.40,
     /1.50,1.55,1.60,1.65,1.70,1.75,1.80,1.85,1.90,1.95,
     /2.00,2.05,2.10,2.15,2.20,2.25,2.30,2.35,2.40,2.45,
     /2.50,2.55,2.60,2.65,2.70,2.75,2.80,2.85,2.90,2.95,
     /3.00,3.05,3.10,3.15,3.20,3.25,3.30,3.35,3.40,3.45,
     /3.50,3.55,3.60,3.70,3.80,3.90,4.00,4.50,5.00,7.50,
     /10.0,15.0,18.0,20.0,22.5,25.0,30.0,50.0,80.0/
      DATA YVB2/.0,1.D-5,4.D-5,9.D-5,1.5D-4,2.0D-4,2.8D-4,3.2D-4,5.D-4,
     /8.1D-4,
     /.0026,.0059,.0115,.026,.051,.123,.236,.491,0.94,2.26,
     /2.90,2.55,2.20,1.45,.856,.682,1.33,2.40,3.05,2.78,
     /1.70,.672,.800,1.48,1.61,1.25,.805,.501,.670,.890,
     /.890,.650,.444,.428,.539,.491,.364,.225,.285,.238,
     /.200,.168,.156,.127,.101,.085,.072,.042,.014,.004,
     /.002,.006,.012,.030,.020,.012,.004,.002,.001/
# V3                        
      DATA XVB3/.8559,.900,1.00,1.10,1.20,1.30,1.40,1.50,1.60,1.65,
     /1.70,1.75,1.80,1.85,1.90,1.95,2.00,2.05,2.10,2.15,
     /2.16,2.20,2.25,2.30,2.35,2.40,2.45,2.50,2.55,2.60,
     /2.65,2.70,2.75,2.80,2.85,2.90,2.95,3.00,3.05,3.10,
     /3.15,3.20,3.25,3.30,3.35,3.40,3.45,3.50,3.55,3.60,
     /3.65,3.70,3.75,3.80,3.85,3.90,3.95,4.00,4.50,5.00,
     /7.50,10.0,15.0,18.0,20.0,22.5,25.0,30.0,50.0,80.0/
      DATA YVB3/.0,1.D-5,3.7D-5,7.D-5,9.8D-5,1.3D-4,1.8D-4,4.1D-4,
     /.0021,.0050,
     /.012,.028,.071,.160,.300,.807,1.30,1.87,2.11,2.55,
     /2.57,2.35,1.52,.617,.438,.656,1.46,1.75,1.81,1.38,
     /.630,.250,.409,.747,1.00,.682,.309,.144,.263,.412,
     /.360,.212,.131,.148,.183,.200,.157,.114,.079,.101,
     /.101,.079,.057,.053,.058,.053,.044,.035,.023,.008,
     /.0023,.001,.003,.007,.017,.011,.006,.002,.001,.0005/
# V4
      DATA XVB4/1.1342,1.80,1.85,1.90,1.95,2.00,2.05,2.10,2.15,2.20,
     /2.22,2.25,2.30,2.35,2.40,2.45,2.50,2.55,2.60,2.65,
     /2.70,2.75,2.80,2.85,2.90,2.95,3.00,3.05,3.10,3.15,
     /3.20,3.25,3.30,3.35,3.40,3.50,3.60,3.80,4.00,4.50,
     /5.00,7.50,10.0,15.0,18.0,20.0,22.5,30.0,50.0,80.0/
      DATA YVB4/0.0,0.00,9.D-5,.064,.170,.269,.465,.743,1.29,1.76,
     /1.79,1.72,1.41,1.04,.600,.234,.168,.439,.797,.994,
     /.806,.474,.215,.104,.197,.385,.394,.260,.198,.063,
     /.098,.151,.205,.089,.070,.078,.061,.044,.035,.026,
     /.009,.0026,.00105,.0016,.003,.008,.005,.003,.001,.0005/
# V5               
      DATA XVB5/1.4088,1.90,1.95,2.00,2.05,2.10,2.15,2.20,2.25,2.30,
     /2.35,2.40,2.45,2.50,2.55,2.60,2.65,2.70,2.75,2.80,     
     /2.85,2.90,2.95,3.00,3.05,3.10,3.15,3.20,3.25,3.30,
     /3.35,3.40,3.45,3.50,4.00,4.50,5.00,7.50,10.0,20.0/     
      DATA YVB5/0.00,0.00,.0009,.0118,.0531,.136,.313,.490,.655,.791,
     /1.04,1.18,1.01,.631,.295,.101,.068,.195,.395,.502,
     /.519,.313,.106,.024,.101,.195,.183,.112,.068,.018,
     /.035,.065,.065,.024,.014,.0096,.0032,.00096,.00024,.00012/ 
# V6        
      DATA XVB6/1.6801,2.05,2.10,2.15,2.20,2.25,2.30,2.35,2.40,2.45,
     /2.50,2.55,2.60,2.65,2.70,2.75,2.80,2.85,2.90,2.95,     
     /3.00,3.05,3.10,3.15,3.20,3.25,3.30,3.35,3.40,3.45,
     /3.50,3.55,3.60,3.65,3.70,4.00,4.50,5.00,7.50,10.0,
     /20.0/                                     
      DATA YVB6/0.00,0.00,9.D-5,.0117,.0463,.124,.192,.344,.487,.602,
     /.615,.602,.577,.527,.307,.124,.050,.103,.193,.270,
     /.270,.180,.084,.0372,.0527,.103,.128,.096,.062,.0248,
     /.0186,.0312,.0372,.0372,.0155,.010,.052,.017,.0052,.0021,   
     /.00105/
# V7
      DATA XVB7/1.9475,2.25,2.30,2.35,2.40,2.45,2.50,2.55,2.60,2.65,
     /2.68,2.70,2.75,2.80,2.85,2.90,2.95,3.00,3.05,3.10,
     /3.15,3.20,3.25,3.30,3.35,3.40,3.45,3.50,3.55,3.60,
     /3.65,3.70,3.75,3.80,3.85,3.90,4.00,4.50,5.00,7.50,
     /10.0,20.0/
      DATA YVB7/0.00,0.00,.0009,.0255,.0526,.089,.133,.178,.232,.303,
     /.318,.304,.231,.159,.119,.0542,.0239,.0255,.0796,.113,
     /.108,.0812,.0413,.0112,.0064,.0207,.0334,.0366,.0224,.0128, 
     /.0128,.0157,.0183,.0166,.0096,.0074,.0057,.0039,.0013,.00039,
     /.00015,.000075/
# V8
      DATA XVB8/2.2115,2.40,2.45,2.50,2.55,2.60,2.65,2.70,2.75,2.80,
     /2.85,2.88,2.90,2.95,3.00,3.05,3.10,3.15,3.20,3.25,
     /3.30,3.35,3.40,3.45,3.50,3.55,3.60,3.65,3.70,3.75,
     /3.80,3.85,3.90,3.95,4.00,4.50,5.00,7.50,10.0,20.0/
      DATA YVB8/0.00,0.00,9.D-6,.003,.011,.017,.042,.0656,.0739,.098,
     /.135,.140,.128,.084,.035,.014,.003,.007,.028,.0460,
     /.0460,.028,.011,.003,.0018,.011,.0123,.0140,.0084,.0035,
     /.0018,.0018,.0026,.0029,.0014,.0010,.0003,.00010,.00004,.00002/
# V9
      DATA XVB9/2.4718,2.65,2.70,2.75,2.80,2.85,2.90,2.95,3.00,3.05,
     /3.07,3.10,3.15,3.20,3.25,3.30,3.35,3.40,3.45,3.50,
     /3.55,3.60,3.65,3.70,3.75,3.80,3.85,3.90,3.95,4.00,
     /4.50,5.00,7.50,10.0,20.0/
      DATA YVB9/0.00,.0011,.0028,.0069,.0132,.0264,.0412,.0474,.0438,
     /.0496,
     /.0528,.0438,.0247,.0739,.00295,.00581,.0159,.0232,.0264,.0206,
     /.0116,.00296,.00296,.00581,.00739,.00739,.00528,.00295,.00147,
     /.00070,
     /.00039,.00013,.000039,.0000157,.0000079/
# V10
      DATA XVB10/2.7284,2.90,2.95,3.00,3.05,3.10,3.15,3.20,3.25,3.30,
     /3.35,3.40,3.45,3.50,3.55,3.60,3.65,3.70,3.75,3.80,
     /3.85,3.90,3.95,4.00,4.05,4.10,4.15,4.20,4.25,4.30,
     /4.50,5.00,7.50,10.0,20.0/
      DATA YVB10/0.00,.000040,.00170,.00554,.0103,.0154,.0205,.0201,
     /.0147,.0103,
     /.00677,.00225,.00137,.00452,.00800,.0116,.0119,.00800,.00390,
     /.00137,
     /.00205,.00390,.00573,.00573,.00452,.00349,.00225,.00116,.00042,
     /.00026,
     /.00017,5.8D-5,1.7D-5,8.5D-6,4.2D-6/
# V11
      DATA XVB11/2.9815,3.10,3.15,3.20,3.25,3.30,3.35,3.40,3.45,3.50,
     /3.55,3.60,3.65,3.70,3.75,3.80,3.85,3.90,3.95,4.00,
     /4.05,4.10,4.15,4.20,4.25,4.30,4.35,4.40,4.45,4.50,
     /4.60,5.00,7.50,10.0,20.0/
      DATA YVB11/0.00,3.29D-4,.00170,.00291,.00445,.00550,.00462,
     /.00291,.00170,6.04D-4,
     /2.20D-4,.00105,.00275,.00344,.00303,.00198,7.70D-4,1.65D-4,
     /2.75D-4,4.40D-4,
     /.00116,.00110,3.85D-4,5.50D-5,5.50D-5,3.30D-4,3.85D-4,3.30D-4,
     /1.65D-4,8.70D-5,
     /2.88D-5,9.60D-6,2.88D-6,1.16D-6,5.8D-7/
# V12
      DATA XVB12/3.2310,3.30,3.35,3.40,3.45,3.50,3.55,3.60,3.65,3.70,
     /3.75,3.80,3.85,3.90,3.95,4.00,4.05,4.10,4.15,4.20,
     /4.25,4.30,4.35,4.40,4.45,4.50,4.55,4.60,4.65,5.00,
     /7.50,10.0,20.0/
      DATA YVB12/0.00,3.66D-5,3.78D-4,6.22D-4,.00107,.00119,.00092,
     /4.40D-4,1.59D-4,1.10D-4,
     /4.52D-4,8.06D-4,.00122,.00107,6.96D-4,3.17D-4,7.32D-5,8.55D-5,
     /3.05D-4,3.78D-4,
     /3.05D-4,1.53D-4,7.33D-5,1.22D-5,7.33D-5,1.46D-4,8.55D-5,1.22D-5,
     /6.10D-6,2.04D-6,
     /6.10D-7,2.44D-7,1.22D-7/
# V13
      DATA XVB13/3.4769,3.55,3.60,3.65,3.70,3.75,3.80,3.85,3.90,3.95,
     /4.00,4.05,4.10,4.15,4.20,4.25,4.30,4.35,4.40,4.45,
     /4.50,4.55,4.60,4.65,4.70,4.75,4.80,5.00,7.50,10.0,
     /20.0/
      DATA YVB13/0.00,4.90D-5,1.02D-4,1.96D-4,2.16D-4,1.18D-4,3.92D-5,
     /3.92D-5,1.46D-4,2.94D-4,
     /3.68D-4,3.92D-4,2.72D-4,1.22D-4,2.75D-5,6.28D-5,9.77D-5,1.49D-4,
     /1.18D-4,6.28D-5,
     /1.57D-5,1.57D-5,2.35D-5,4.71D-5,3.14D-5,1.96D-5,3.93D-6,1.31D-6,
     /3.93D-7,1.57D-7,
     /7.8D-8/
# V14
      DATA XVB14/3.7191,3.80,3.85,3.90,3.95,4.00,4.05,4.10,4.15,4.20,
     /4.25,4.30,4.35,4.40,4.45,4.50,4.55,4.60,4.65,4.70,
     /4.75,4.80,4.85,4.90,4.95,7.50,10.0,20.0/
      DATA YVB14/0.00,9.07D-6,1.70D-5,1.70D-5,6.80D-6,7.94D-6,3.51D-5,
     /7.83D-5,1.14D-4,1.09D-4,
     /7.14D-5,3.51D-5,6.80D-6,9.07D-6,4.31D-5,5.44D-5,3.51D-5,1.70D-5,
     /4.54D-6,6.80D-6,
     /1.02D-5,1.70D-5,9.07D-6,5.67D-6,1.75D-6,1.75D-7,6.98D-8,3.5D-8/
# V15
      DATA XVB15/3.9576,4.05,4.10,4.15,4.20,4.25,4.30,4.35,4.40,4.45,
     /4.50,4.55,4.60,4.65,4.70,4.75,4.80,4.85,4.90,4.95,
     /5.00,5.05,5.10,5.15,5.20,5.25,5.30,5.40,5.50,7.50,
     /10.0,20.0/
      DATA YVB15/0.00,9.42D-7,1.25D-6,2.51D-6,5.34D-6,1.94D-5,2.89D-5,
     /3.14D-5,2.16D-5,1.10D-5,
     /4.40D-6,5.96D-6,1.20D-5,1.98D-5,1.64D-5,9.07D-6,3.77D-6,3.77D-6,
     /7.22D-6,7.22D-6,
     /6.28D-6,3.77D-6,3.46D-6,4.39D-6,4.71D-6,4.71D-6,3.77D-6,2.18D-6,
     /1.09D-6,1.09D-7,
     /4.36D-8,2.2D-8/
# A3SIG(V=0-4) (V=0 ENERGY=6.169 EV)  AVERAGE ENERGY LOSS =6.725 EV
      DATA XTRP1/6.725,7.00,7.80,8.50,9.00,10.0,11.0,12.0,13.0,14.0,   
     /16.0,17.0,18.0,20.0,22.0,24.0,26.0,30.0,34.0,40.0,                
     /50.0,70.0,100./             
      DATA YTRP1/0.00,.0035,.0100,.0440,.0280,.0240,.022,.021,.020,.019,
     /.016,.015,.014,.013,.0108,.0099,.0087,.0069,.0057,.0046,          
     /.0033,.0019,.00094/
      DATA YTP1M/0.92,0.92,0.92,0.92,0.92,0.92,0.93,0.94,0.94,0.95,
     /0.97,1.01,1.07,1.12,1.14,1.16,1.18,1.22,1.21,1.20,
     /1.18,1.00,0.92/ 
# A3SIG(V=5-9) (V=5 ENERGY=7.023 EV) AVERAGE ENERGY LOSS =7.360 EV
      DATA XTRP2/7.360,7.50,7.80,8.50,9.00,10.0,11.0,12.0,13.0,14.0,
     /16.0,17.0,18.0,20.0,22.0,24.0,26.0,30.0,34.0,40.0,
     /50.0,70.0,100./
      DATA YTRP2/0.00,.0071,.0180,.072,.108,.096,.094,.092,.085,.081,
     /.069,.064,.059,.054,.049,.043,.038,.029,.024,.020,
     /.0136,.0076,.0040/   
      DATA YTP2M/0.92,0.92,0.92,0.92,0.92,0.92,0.93,0.94,0.94,0.95,
     /0.97,1.01,1.07,1.12,1.14,1.16,1.18,1.22,1.21,1.20,
     /1.18,1.00,0.92/ 
# B3PI(V=0-3) (V=0 ENERGY=7.353 EV) AVERAGE ENERGY LOSS =7.744 EV       
      DATA XTRP3/7.744,8.00,9.00,10.0,11.0,12.0,13.0,14.0,15.0,16.0,  
     /17.0,18.0,20.0,22.0,26.0,30.0,34.0,40.0,50.0,70.0,                
     /100./                  
      DATA YTRP3/.0,.018,.132,.194,.188,.173,.161,.150,.138,.128,
     /.116,.108,.089,.077,.063,.053,.047,.035,.026,.0113,      
     /.0039/
      DATA YTP3M/1.06,1.06,1.06,1.06,1.12,1.18,1.18,1.16,1.14,1.12,
     /1.10,1.08,1.06,1.08,1.12,1.16,1.16,1.17,1.18,1.06,
     /0.94/
# W3DEL(V=0-5) (V=0 ENERGY=7.362 EV) AVERAGE ENERGY LOSS = 8.050 EV    
      DATA XTRP4/8.050,8.50,9.00,10.0,11.0,12.0,14.0,15.0,16.0,17.0,
     /18.0,20.0,22.0,24.0,26.0,28.0,30.0,34.0,40.0,50.0,
     /70.0,100./
      DATA YTRP4/.0,.0010,.007,.016,.023,.030,.044,.050,.053,.053,
     /.052,.047,.039,.032,.027,.023,.020,.015,.0112,.0073,
     /.00366,.00183/
      DATA YTP4M/1.20,1.20,1.20,1.20,1.14,1.08,1.08,1.13,1.16,1.19,
     /1.21,1.22,1.23,1.24,1.25,1.26,1.27,1.26,1.23,1.19,
     /1.11,0.98/
# A3SIG(V=10-21) (V=10 ENERGY=7.790 EV) AVERAGE ENERGY LOSS=8.217 EV    
      DATA XTRP5/8.217,8.30,8.50,8.70,9.00,10.0,11.0,12.0,13.0,14.0,    
     /16.0,17.0,18.0,20.0,22.0,24.0,26.0,30.0,34.0,40.0,                
     /50.0,70.0,100./           
      DATA YTRP5/0.0,.0069,.0365,.0450,.055,.096,.100,.097,.091,.086,
     /.073,.066,.060,.055,.050,.044,.038,.031,.024,.020,                
     /.0145,.0080,.0043/
      DATA YTP5M/0.92,0.92,0.92,0.92,0.92,0.92,0.93,0.94,0.94,0.95,
     /0.97,1.01,1.07,1.12,1.14,1.16,1.18,1.22,1.21,1.20,
     /1.18,1.00,0.92/ 
# B3PI(V=4-16) (V=4 ENERGY=8.177 EV) AVERAGE ENERGY LOSS= 8.451 EV
      DATA XTRP6/8.451,8.50,9.00,10.0,11.0,12.0,13.0,14.0,15.0,16.0,
     /17.0,18.0,20.0,22.0,26.0,30.0,34.0,40.0,50.0,70.0,
     /100./
      DATA YTRP6/.0,.011,.090,.133,.129,.119,.110,.102,.094,.088,
     /.079,.074,.061,.053,.044,.037,.032,.023,.017,.0077, 
     /.0028/
      DATA YTP6M/1.06,1.06,1.06,1.06,1.12,1.18,1.18,1.16,1.14,1.12,
     /1.10,1.08,1.06,1.08,1.12,1.16,1.16,1.17,1.18,1.06,
     /0.94/
# W3DEL(V=6-10) (V=6 ENERGY=8.419 EV) AVERAGE ENERGY LOSS= 8.729 EV
      DATA XTRP7/8.729,9.00,10.0,11.0,12.0,14.0,15.0,16.0,17.0,18.0,
     /20.0,22.0,24.0,26.0,28.0,30.0,34.0,40.0,50.0,70.0,
     /100./
      DATA YTRP7/.0,0.004,.032,.048,.064,.092,.105,.110,.110,
     /.108,
     /.097,.082,.066,.056,.048,.041,.032,.023,.0153,.0076,
     /.0038/
      DATA YTP7M/1.20,1.20,1.20,1.14,1.08,1.08,1.13,1.16,1.19,1.21,
     /1.22,1.23,1.24,1.25,1.26,1.27,1.26,1.23,1.19,1.11,
     /0.98/
# A1PI(V=0-3) (V=0 ENERGY=8.549 EV) AVERAGE ENERGY LOSS= 8.950 EV
      DATA XSNG1/8.950,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0,
     /19.0,20.0,24.0,27.0,30.0,40.0,50.0,70.0,100./        
      DATA YSNG1/.0,.013,.025,.040,.059,.082,.101,.116,.123,.128,
     /.130,.130,.125,.119,.112,.087,.071,.051,.036/  
      DATA YSG1M/0.80,0.80,0.75,0.70,0.66,0.60,0.55,0.53,0.51,0.50,
     /0.49,0.48,0.50,0.52,0.54,0.48,0.41,0.34,0.24/
# B'3SIG(V=0-6) (V=0 ENERGY=8.165 EV) AVERAGE ENERGY LOSS= 8.974 EV
      DATA XTRP8/8.974,9.50,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,
     /18.0,19.0,20.0,22.0,26.0,30.0,34.0,40.0,50.0,70.0,
     /100./
      DATA YTRP8/.0,.0002,.0010,.0032,.0081,.0136,.0203,.0252,.0274,
     /.0274,
     /.0264,.0250,.0236,.0209,.0151,.0114,.0089,.0064,.0041,.0020,
     /.0010/
      DATA YTP8M/0.90,0.90,0.90,0.90,0.90,0.91,0.93,0.97,1.07,1.17,
     /1.22,1.22,1.23,1.26,1.32,1.37,1.35,1.32,1.29,1.20,
     /1.04/
# A'1SIG (V=0-6) (V=0 ENERGY=8.398 EV) AVERAGE ENERGY LOSS= 9.191 EV
      DATA XSNG2/9.191,10.2,12.0,13.0,14.0,15.0,16.0,17.0,18.0,19.0,
     /20.0,24.0,30.0,40.0,50.0,70.0,100./
      DATA YSNG2/.0,.0013,.0071,.0106,.0139,.0146,.0145,.0143,.0139,
     /.0135,
     /.0132,.0105,.0072,.0045,.0031,.0017,.0010/
      DATA YSG2M/1.00,1.00,1.00,1.00,1.00,1.00,1.07,1.13,1.14,1.15,
     /1.16,1.21,1.27,1.17,1.07,0.93,0.72/
# W3DEL(V=11-19) (V=11 ENERGY=9.220 EV) AVERAGE ENERGY LOSS= 9.562 EV
      DATA XTRP9/9.562,10.0,11.0,12.0,14.0,15.0,16.0,17.0,18.0,20.0,
     /22.0,24.0,26.0,28.0,30.0,34.0,40.0,50.0,70.0,100./
      DATA YTRP9/.0,.012,.029,.038,.056,.063,.067,.067,.065,
     /.058,
     /.049,.040,.034,.029,.024,.019,.0141,.0092,.00461,.00230/
      DATA YTP9M/1.20,1.20,1.14,1.08,1.08,1.13,1.16,1.19,1.21,1.22,
     /1.23,1.24,1.25,1.26,1.27,1.26,1.23,1.19,1.11,0.98/
# W1DEL(V=0-5) (V=0 ENERGY=8.895 EV) AVERAGE ENERGY LOSS= 9.590 EV 
      DATA XSNG3/9.590,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0,
     /20.0,24.0,30.0,40.0,50.0,70.0,100./
      DATA YSNG3/.0,.0002,.003,.009,.0109,.0144,.0141,.0138,.0134,.013, 
     /.012,.0094,.0074,.0054,.0043,.0030,.0020/
      DATA YSG3M/1.08,1.08,1.08,1.08,1.05,1.00,0.08,0.97,0.96,0.95,
     /0.92,0.90,0.86,0.76,0.66,0.55,0.36/
# A1PI(V=4-15) (V=4 ENERGY=9.355 EV) AVERAGE ENERGY LOSS= 9.665 EV
      DATA XSNG4/9.665,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0,
     /19.0,20.0,24.0,27.0,30.0,40.0,50.0,70.0,100./        
      DATA YSNG4/.0,.009,.023,.039,.057,.077,.097,.109,.117,.121,
     /.123,.124,.119,.112,.106,.083,.067,.048,.034/  
      DATA YSG4M/0.80,0.80,0.75,0.70,0.66,0.60,0.55,0.53,0.51,0.50,
     /0.49,0.48,0.50,0.52,0.54,0.48,0.41,0.34,0.24/
# B'3SIG(V=7-18) (V=7 ENERGY=9.399 EV) AVERAGE ENERGY LOSS= 9.933 EV
      DATA XTRP10/9.933,10.2,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0,
     /19.0,20.0,22.0,26.0,30.0,34.0,40.0,50.0,70.0,100./
      DATA YTRP10/.0,.0010,.0068,.0169,.0284,.0427,.0528,.0575,.0575,
     /.0552,
     /.0524,.0495,.0438,.0316,.0236,.0187,.0133,.0086,.0041,.0020/
      DATA YTP10M/0.90,0.90,0.90,0.90,0.90,0.91,0.93,0.97,1.07,1.17,
     /1.22,1.22,1.23,1.26,1.32,1.37,1.35,1.32,1.29,1.20/       
# A'1SIG (V=7-19) (V=7 ENERGY=9.645 EV) AVERAGE ENERGY LOSS= 10.174 EV
      DATA XSNG5/10.174,10.5,12.0,13.0,14.0,15.0,16.0,17.0,18.0,19.0,
     /20.0,24.0,30.0,40.0,50.0,70.0,100./
      DATA YSNG5/.0,.0013,.0129,.0194,.0252,.0267,.0265,.0260,.0253,
     /.0247,
     /.0240,.0192,.0133,.0081,.0055,.0032,.0017/
      DATA YSG5M/1.00,1.00,1.00,1.00,1.00,1.00,1.07,1.13,1.14,1.15,
     /1.16,1.21,1.27,1.17,1.07,0.93,0.72/
# W1DEL(V=6-18) (V=6 ENERGY=9.994 EV) AVERAGE ENERGY LOSS= 10.536 EV
      DATA XSNG6/10.536,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0,20.0,
     /24.0,30.0,40.0,50.0,70.0,100./
      DATA YSNG6/.0,.003,.009,.0242,.032,.032,.031,.030,.029,.026,
     /.021,.0164,.0121,.0096,.0066,.0046/
      DATA YSG6M/1.08,1.08,1.08,1.05,1.00,0.08,0.97,0.96,0.95,0.92,
     /0.90,0.86,0.76,0.66,0.55,0.36/
# C3PI(V=0-4) (V=0 ENERGY=11.032 EV) AVERAGE ENERGY LOSS= 11.188 EV   
      DATA XTRP11/11.188,12.0,12.5,13.0,13.5,14.0,14.5,15.0,16.0,17.0,
     /18.0,19.0,20.0,24.0,30.0,40.0,50.0,70.0,100./           
      DATA YTRP11/.0,.057,.089,.130,.180,.225,.235,.225,.205,.190,
     /.170,.155,.140,.105,.074,.044,.031,.015,.0057/ 
      DATA YTP11M/1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.02,1.01,
     /1.00,0.99,0.99,1.06,1.14,1.11,1.09,0.93,0.70/    
# E3SIG  V=0         
      DATA XTRP12/11.875,11.9,11.95,12.0,12.5,13.0,14.0,15.0,16.0,17.0,
     /18.0,19.0,20.0,21.0,25.0,30.0,35.0,40.0,45.0,50.0,
     /70.0,100./   
      DATA YTRP12/.0,.157,.127,.101,.031,.021,.009,.003,.002,.004,
     /.008,.011,.013,.013,.010,.008,.005,.0037,.0027,.002,
     /.0010,.0004/ 
      DATA YTP12M/22*1.0/  
# A''1SIG(V=0-1) (V=0 ENERGY=12.255 EV)  AVERAGE ENERGY LOSS= 12.289 EV
      DATA XSNG7/12.289,13.0,14.0,15.0,17.5,20.0,24.0,30.0,40.0,50.0,
     /70.0,100./
      DATA YSNG7/.0,.002,.005,.011,.022,.034,.037,.036,.031,.028,
     /.020,.0125/
      DATA YSG7M/0.86,0.86,0.86,0.86,0.86,0.91,0.94,0.99,0.94,0.89,
     /0.73,0.50/
# B1PI (V=0-6) (V=0 ENERGY=12.500 EV) AVERAGE ENERGY LOSS= 12.781 EV
#  USE BEF SCALING ABOVE 100EV                   F=0.1855
      DATA XSNG8/12.781,17.5,20.0,30.0,40.0,50.0,70.0,100./ 
      DATA YSNG8/0.0,.0640,.0855,.145,.160,.163,.160,.152/
      DATA YSG8M/0.76,0.76,0.67,0.46,0.34,0.22,0.13,0.05/
# C'1SIG (V=0-3) (V=0 ENERGY=12.934 EV) AVERAGE ENERGY LOSS= 13.000 EV
#  USE BEF SCALING ABOVE 500EV                  F=0.15
      DATA XSNG9/13.000,17.5,20.0,30.0,40.0,50.0,70.0,100.,150.,200.,
     /250.,300.,350.,400.,450.,500./ 
      DATA YSNG9/0.0,.0300,.0440,.067,.086,.093,.102,.100,.091,.083,
     /.075,.069,.063,.059,.054,.052/
      DATA YSG9M/0.72,0.72,0.47,0.41,0.32,0.23,0.13,0.05,0.04,0.03,
     /.028,.025,.022,.020,.018,.016/ 
# G3 PI (V=0-3) (V=0 ENERGY=12.810 EV) AVERAGE ENERGY LOSS=13.001 EV         
      DATA XTRP13/13.001,17.5,20.0,23.0,26.0,30.0,40.0,50.0,70.0,100./
      DATA YTRP13/.0,.0133,.0178,.0204,.0207,.0199,.0174,.0152,.0115,
     /.0065/ 
      DATA YTP13M/0.74,0.74,0.73,0.72,0.71,0.69,0.61,0.53,0.47,0.40/   
# C3 1PI ( V=0-3) V=0 ENERGY=12.912 AVERAGE ENERGY LOSS= 13.076 EV
#  USE BEF SCALING ABOVE 100EV        F=0.15
      DATA XSNG10/13.076,17.5,20.0,30.0,40.0,50.0,70.0,100./ 
      DATA YSNG10/0.0,.0470,.060,.100,.118,.124,.124,.118/
      DATA YSG10M/0.69,0.69,0.55,0.40,0.28,0.16,0.11,0.05/
# F3 PI (V=0-3) (V=0 ENERGY=12.985 EV) AVERAGE ENERGY LOSS=13.174 EV  
      DATA XTRP14/13.174,17.5,20.0,23.0,26.0,30.0,40.0,50.0,70.0,100./
      DATA YTRP14/.0,.0062,.0091,.0129,.0140,.0136,.0119,.0102,.0074,
     /.0040/   
      DATA YTP14M/0.74,0.74,0.76,0.71,0.65,0.63,0.53,0.43,0.40,0.34/  
# B1PI (V=7-14) (V=7 ENERGY=13.156 EV) AVERAGE ENERGY LOSS= 13.338 EV
# USE BEF SCALING ABOVE 100EV      F=0.0663
      DATA XSNG11/13.338,17.5,20.0,30.0,40.0,50.0,70.0,100./ 
      DATA YSNG11/0.0,.0120,.0288,.047,.052,.055,.054,.0503/
      DATA YSG11M/0.76,0.76,0.67,0.46,0.34,0.22,0.13,0.05/
# B# 1SIG (V=0-10) V=0 ENERGY=12.854 AVERAGE ENERGY LOSS= 13.385 EV
#  USE BEF SCALING ABOVE 100EV             F=0.0601
      DATA XSNG12/13.385,17.5,20.0,30.0,40.0,50.0,70.0,100./ 
      DATA YSNG12/0.0,.0156,.027,.037,.046,.048,.048,.046/
      DATA YSG12M/0.81,0.81,0.71,0.47,0.33,0.20,0.15,0.09/
# O3 1PI (V=0-5) (V=0 ENERGY=13.103 EV) AVERAGE ENERGY LOSS= 13.628 EV
# USE BEF SCALING ABOVE 100EV      F=0.0828
      DATA XSNG13/13.628,17.5,20.0,30.0,40.0,50.0,70.0,100./ 
      DATA YSNG13/0.0,.0140,.028,.051,.060,.063,.065,.061/
      DATA YSG13M/0.86,0.86,0.77,0.60,0.45,0.30,0.19,0.08/
# C# 1SIG (V=4-6)  (V=4 ENERGY=13.982 EV)  AVERAGE ENERGY LOSS=14.090
# USE BEF SCALING ABOVE 100EV     F=0.139
      DATA XSNG14/14.090,17.5,20.0,30.0,40.0,50.0,70.0,100./
      DATA YSNG14/0.0,.030,.045,.081,.096,.102,.103,.097/
      DATA YSG14M/0.85,0.85,0.75,0.55,0.40,0.25,0.17,0.08/
# B# 1SIG (V=11-INF) (V=11 ENERGY=13.84 EV) 
#  AVERAGE ENERGY LOSS=14.232 EV      (CONSISTENT WITH BERKOWITZ)
#  USE BEF SCALING ABOVE 100EV            F=0.265  
#  TOTAL TRANSITION STRENGTH FOR B# 1SIG= 0.265 + 0.0601=0.3301 
      DATA XSNG15/14.232,17.5,20.0,30.0,40.0,50.0,70.0,100./ 
      DATA YSNG15/0.0,.055,.083,.151,.180,.191,.194,.182/
      DATA YSG15M/0.81,0.81,0.71,0.47,0.33,0.20,0.15,0.09/
#
# E# 1SIG  ENERGY LOSS=14.36EV        F=0.0108  (BERKOWITZ) 
#  USE BEF SCALING IN def
#
# E 1PI   ENERGY LOSS=14.45EV         F=0.0237   (BERKOWITZ)
# USE BEF SCALING IN def
#
# SINGLET  ENERGY LOSS=14.839EV       F=0.0117  (BERKOWITZ)
# USE BEF SCALING IN def
# 
#  SUM OF HIGH ENERGY SINGLETS   ENERGY LOSS=15.2  F=0.1152
# USE BEF SCALING IN def
#
# SUM OF EXCITATIONS TO EXCITED IONS AND MOLECULAR BREAKUP.
#    ENERGY LOSS=15.5EV    
# USE BEF SCALING                F=1.30
#           
# RAP UP TO 100 EV : LINDSAY TO 1KEV : SCHRAM TO 20KEV    
# ABOVE 20KEV USE MATRIX ELEMENTS COMPATIBLE WITH RIEKE AND BERKOWITZ   
      DATA XION/15.581,16.0,16.5,17.0,17.5,18.0,18.5,19.0,19.5,20.0,
     /20.5,21.0,21.5,22.0,22.5,23.0,23.5,24.0,24.5,25.0,
     /25.5,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,45.0,
     /50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,
     /100.,110.,120.,140.,160.,180.,200.,225.,250.,275.,
     /300.,350.,400.,450.,500.,550.,600.,650.,700.,750.,
     /800.,850.,900.,950.,1000.,1200.,1400.,1600.,1800.,2000.,
     /2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,
     /9000.,10000.,12000.,14000.,16000.,18000.,20000./
# COUNTING IONISATION
      DATA YION/0.00,.0211,.0466,.0713,.0985,.129,.164,.199,.230,.270,
     /.308,.344,.380,.418,.455,.492,.528,.565,.603,.640,
     /.677,.714,.875,1.03,1.15,1.27,1.38,1.49,1.57,1.78,
     /1.94,2.07,2.18,2.27,2.33,2.39,2.44,2.46,2.49,2.51,
     /2.51,2.50,2.48,2.45,2.36,2.28,2.19,2.08,1.98,1.89,
     /1.82,1.68,1.56,1.45,1.36,1.28,1.20,1.12,1.07,1.01,
     /.971,.936,.907,.879,.847,.728,.649,.585,.534,.491,
     /.408,.351,.310,.280,.255,.233,.217,.200,.178,.159,
     /.144,.132,.113,.0998,.0898,.0824,.0752/
# IONISATION TO N2+    ASYMPTOTIC 79.73% OF COUNTING IONISATION
      DATA XION1/15.581,16.0,16.5,17.0,17.5,18.0,18.5,19.0,19.5,20.0,
     /20.5,21.0,21.5,22.0,22.5,23.0,23.5,24.0,24.5,25.0,
     /25.5,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,45.0,
     /50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,
     /100.,110.,120.,140.,160.,180.,200.,225.,250.,275.,
     /300.,350.,400.,450.,500.,550.,600.,650.,700.,750.,
     /800.,850.,900.,950.,1000.,1200.,1400.,1600.,1800.,2000.,
     /2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,
     /9000.,10000.,12000.,14000.,16000.,18000.,20000./
      DATA YION1/0.00,.0211,.0466,.0713,.0985,.129,.164,.199,.230,.270,
     /.308,.344,.380,.418,.455,.492,.528,.565,.603,.640,
     /.677,.714,.865,.929,1.03,1.12,1.20,1.29,1.37,1.52,
     /1.60,1.66,1.72,1.74,1.78,1.80,1.81,1.82,1.83,1.85,
     /1.85,1.83,1.81,1.78,1.72,1.67,1.61,1.55,1.48,1.41,
     /1.37,1.28,1.20,1.11,1.05,.998,.943,.880,.844,.796,
     /.765,.738,.719,.698,.676,.580,.517,.466,.426,.391,
     /.325,.280,.247,.223,.203,.186,.173,.159,.142,.127,
     /.115,.105,.0901,.0796,.0716,.0657,.0600/
# IONISATION TO N+   ASYMPTOTIC 19.70% OF COUNTING IONISATION
      DATA XION2/24.294,28.0,30.0,35.0,40.0,45.0,50.0,55.0,60.0,65.0,
     /70.0,75.0,80.0,85.0,90.0,95.0,100.,110.,120.,140.,
     /160.,180.,200.,225.,250.,275.,300.,350.,400.,450.,
     /500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,
     /1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,
     /4500.,5000.,5500.,6000.,7000.,8000.,9000.,10000.,12000.,14000.,
     /16000.,18000.,20000./
      DATA YION2/0.0,.010,.0325,.0904,.166,.245,.319,.390,.438,.482,
     /.523,.561,.587,.605,.632,.645,.656,.660,.661,.652,
     /.633,.595,.566,.516,.493,.458,.438,.393,.351,.324,
     /.299,.274,.248,.234,.217,.205,.200,.192,.183,.176,
     /.167,.143,.128,.115,.105,.0967,.0804,.0691,.0611,.0552,
     /.0502,.0459,.0427,.0394,.0351,.0313,.0284,.0260,.0223,.0197,
     /.0177,.0162,.0148/
# IONISATION TO N+ + N+  NORMALISED TIAN AND VIDAL  
#  ASYMPTOTIC 3.38% OF COUNTING IONISATION
      DATA XION3/38.8,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,
     /175.,200.,225.,250.,275.,300.,350.,400.,450.,500.,
     /550.,600.,700.,800.,900.,1000.,1200.,1400.,1600.,1800.,
     /2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,
     /8000.,9000.,10000.,12000.,14000.,16000.,18000.,20000./
      DATA YION3/0.0,.00917,.0199,.0378,.0617,.0827,.0991,.109,.119,
     /.117,
     /.112,.105,.0982,.0917,.0842,.0778,.0676,.0596,.0533,.0475,
     /.0439,.0426,.0373,.0343,.0314,.0287,.0246,.0220,.0197,.0180,
     /.0166,.0138,.0119,.0105,.00948,.00862,.00788,.00733,.00676,.00603,
     /.00537,.00488,.00446,.00383,.00338,.00304,.00278,.00254/
# IONISATION TO N++  ASYMPTOTIC  0.57% OF COUNTING IONISATION
      DATA XION4/65.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,110.,120.,
     /140.,160.,180.,200.,225.,250.,275.,300.,350.,400.,
     /450.,500.,550.,600.,650.,700.,750.,800.,850.,900.,
     /950.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,
     /4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,10000.,12000.,
     /14000.,16000.,18000.,20000./
      DATA YION4/0.0,.000171,.000658,.00122,.00204,.00328,.00439,.00495,
     /.00725,.00927,
     /.0122,.0137,.0154,.0154,.0154,.0142,.0141,.0128,.0117,.0103,
     /.00940,.00808,.00796,.00760,.00701,.00649,.00587,.00594,.00543,
     /.00522,
     /.00505,.00485,.00415,.00370,.00333,.00304,.00280,.00233,.00200,
     /.00177,
     /.00160,.00145,.00133,.00124,.00114,.00101,.000906,.000821,.000752,
     /.000644,
     /.000569,.000512,.000470,.000429/
# NITROGEN K-SHELL IONISATION (MULTIPLY BY 2 FOR MOLECULE)
      DATA XKSH/401.6,407.,419.,431.,444.,457.,471.,485.,499.,515.,
     /530.,546.,562.,596.,631.,668.,708.,750.,794.,841.,
     /891.,944.,1000.,1090.,1188.,1296.,1496.,1679.,1884.,2054.,
     /2238.,2512.,2985.,3758.,4467.,5158.,5957.,7079.,1.0D4,1.26D4,
     /1.50D4,2.05D4,2.51D4,3.07D4,4.10D4,5.01D4,6.13D4,7.08D4,8.18D4,
     /1.0D5,
     /1.54D5,2.05D5,2.99D5,4.10D5,5.01D5,6.13D5,7.08D5,8.18D5,1.00D6,
     /1.25D6,
     /1.50D6,2.05D6,3.07D6,4.10D6,5.01D6,6.13D6,7.08D6,8.18D6,1.00D7,
     /1.22D7,
     /1.50D7,1.88D7,2.24D7,2.82D7,3.76D7,4.87D7,6.31D7,8.66D7,1.00D8,
     /1.22D8,
     /1.50D8,1.88D8,2.24D8,2.82D8,3.76D8,4.87D8,6.31D8,8.66D8,1.00D9/
      DATA YKSH/0.00,4.11D-5,1.38D-4,2.32D-4,3.23D-4,4.12D-4,4.98D-4,
     /5.81D-4,6.61D-4,7.38D-4,
     /8.13D-4,8.85D-4,9.54D-4,1.08D-3,1.20D-3,1.31D-3,1.41D-3,1.50D-3,
     /1.58D-3,1.65D-3,
     /1.72D-3,1.77D-3,1.82D-3,1.87D-3,1.91D-3,1.94D-3,1.95D-3,1.93D-3,
     /1.89D-3,1.86D-3,
     /1.81D-3,1.74D-3,1.63D-3,1.45D-3,1.32D-3,1.22D-3,1.12D-3,1.00D-3,
     /7.95D-4,6.77D-4,
     /5.98D-4,4.74D-4,4.09D-4,3.52D-4,2.85D-4,2.47D-4,2.14D-4,1.94D-4,
     /1.76D-4,1.54D-4,
     /1.19D-4,1.03D-4,8.77D-5,7.92D-5,7.54D-5,7.27D-5,7.14D-5,7.04D-5,
     /6.97D-5,6.96D-5,
     /7.00D-5,7.16D-5,7.47D-5,7.74D-5,7.95D-5,8.17D-5,8.34D-5,8.51D-5,
     /8.75D-5,9.00D-5,
     /9.25D-5,9.54D-5,9.76D-5,1.01D-4,1.04D-4,1.08D-4,1.11D-4,1.15D-4,
     /1.17D-4,1.20D-4,
     /1.22D-4,1.25D-4,1.27D-4,1.31D-4,1.34D-4,1.38D-4,1.41D-4,1.45D-4,
     /1.47D-4/
# BREMSSTRAHLUNG X-SECTION WITH CUT OFF UNITS 10**-24 CM**2
      DATA Z7T/385.,234.,113.,63.5,35.5,16.4,9.48,5.96,4.07,3.73,
     /3.81,3.93,4.04,4.11,4.18,4.26,4.33,4.42,4.48,4.55,
     /4.59,4.61,4.63,4.64,4.65/
      DATA EBRM/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,
     /2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,
     /4.E7,5.E7,6.E7,8.E7,1.E8/
#  *********************************************************************
# REANALYSED SINGLET STATES TO MAKE CONSISTENT WITH OSCILLATOR SUM
# FROM BERKOWITZ  USED BEF SCALING TO GIVE X-SCTION AT HIGH ENERGY.
#  *********************************************************************
#  2013: INCLUDE K-SHELL IONISATION
# -----------------------------------
#  NITROGEN UPDATE 2008.
#  USED ELECTRON SCATTERING DATA PUBLISHED UP TO DECEMBER 2008.
#  VIBRATIONAL X-SECTIONS MAINLY FROM ALLAN AND ALSO VICIC
#  ALLAN    J.PHYS.B 18(1985) 4511
#  VICIC    J.PHYS.B 29(1996) 1273
#  ELASTIC FROM ALLAN , ITIKAWA(REVIEW) ,SUN AND ALSO MUSE 
#  ALLAN     J.PHYS.B 38(2005) 3655
#  ITIKAWA   J.PHYS.CHEM.REF DATA 35(2006)31
#  SUN       PHYS.REV 52A(1995)1229
#  MUSE      J.PHYS.B 41(2008)095203
# EXCITATION FROM ITIKAWA (REVIEW) AND KHAKOO
#  KHAKOO    PHYS.REV A 77(2008)012704
#  KHAKOO    PHYS.REV A 71(2005)062703
#  IONISATION FROM RAP , LINDSAY, SCHRAM, RIEKE AND BERKOWITZ
#  RAP       J.CHEM.PHYS 43(1965)1464
#  LINDSAY   LLANDOLT-BORNSTEIN I/17C
#  SCHRAM    PHYSICA 31(1965)94
#  RIEKE     PHYS REV 6A (1972)1507
#  BERKOWITZ PHOTOABSORPTION ,PHOTOIONISATION SPECTROSCOPY
# 
#  ROTATIONAL X-SECTIONS FROM QUADRUPOLE BORN APPROX. WITH TABULATED
#  VALUES FOR THE RESONANCE ENHANCEMENT.
#  INELASTIC X-SECTIONS ARE MAINLY FROM KHAKOO FOR LEVELS BELOW 14.0EV
# USED FRANK-CONDON FACTORS TO WEIGHT THE VIBRATION-EXCITATION LEVELS
# AND ADJUSTED THRESHOLDS TO GIVE CORRECT AVERAGE ENERGY LOSS.
#  THE REMAINING LEVEL STRENGTH IS IN THE EFFECTIVE SINGLET LEVEL
#  AT 14.2EV . THE 14.2 EV LEVEL WAS MADE TO BE CONSISTENT WITH
#  THE TOTAL LEVEL SUM FROM PITCHFORD AND PHELPS AND GIVES ACCURATE
#  FANO FACTORS
# THE TOTAL X-SECTION BELOW 50 EV IS WITHIN 1% OF THE EXPERIMENTAL VALUE
# OF KENNERLEY. ABOVE 50EV IS WITHIN 1% OF REVIEW BY ITIKAWA. 
# TOTAL ELASTIC AND ELASTIC MOMENTUM TRANSFER X-SECTION ARE ADJUSTED TO 
# FIT DATA IN MIXTURES:
#                    NEON /NITROGEN   VD                 ROBERTSON  
#                   ARGON /NITROGEN   VD                 HADDAD
#             PURE  NITROGEN          VD   DT  DL  AND ALPHA 
# LOW FIELD NITROGEN DATA  VD AND DT FROM LOWKE AND HUXLEY AND CROMPTON.
#
#   HIGH FIELD NITROGEN DATA VD AND DL FROM HASEGAWA
#  FIT TO DRIFT AND DIFFUSION DATA BETTER THAN 1% ACCURACY.
#  
#   TOWNS# end COEFICIENT FROM COMPILATION BY DUTTON.
#
#***********************************************************************      
#---------------------------------------------------------------------
      IF(NANISO == 0):
 :
       NAME='NITROGEN 2015  ISOTROPIC '
      else: 
       NAME='NITROGEN 2015 ANISOTROPIC'
      # endIF
#    -------------------------------------------------------------- 
# BORN BETHE VALUES FOR COUNTING IONISATION
      CONST=1.873884D-20
      EMASS2=1021997.804
      API=DACOS(-1.00)
      A0=0.52917720859D-8
      RY=13.60569193
      BBCONST=16.0*API*A0*A0*RY*RY/EMASS2
#
      AM2=3.35
      C=38.1
#
# AVERAGE AUGER EMISSION FROM K-SHELL
      AUGK=1.99
#
      NION=12
      NATT=1
      NIN=127
      NNULL=0
#
      NASIZE=4000
#      
      NBREM=25
      DO 11 J=1,NIN
      IZBR(J)=0
   11 CONTINUE
      IZBR(NIN+1)=7
#
# ANGULAR DISTRIBUTIONS OF ELASTIC AND IONISATION CAN BE EITHER
# ISOTROPIC (KEL=0) OR
# CAPITELLI-LONGO (KEL =1)  OR OKHRIMOVSKKY TYPES (KEL=2)
# 
      DO 1 J=1,6
    1 KEL(J)=NANISO
# USE ISOTROPIC SCATTERING FOR ROTATIONAL AND VIBRATIONAL STATES
#      DO 2 J=1,76 
#    2 KIN(J)=2 
      DO 2 J=1,92
    2 KIN(J)=0    
# USE ISOTROPIC FOR SUPERELASTIC VIBRATION
#      KIN(77)=2
# USE ANISOTROPIC SCATTERING FOR VIBRATIONAL AND EXCITED STATES .
# ANGULAR DISTRIBUTIONS ARE CAPITELLI-LONGO (FORWARD BACKWARD ASYMMETRY)
# OR OKRIMOVSKKY
#     DO 20 J=78,NIN
# FIX TO CAPITELLI LONGO
#  20 KIN(J)=NANISO
      DO 20 J=93,NIN
   20 KIN(J)=1         
# 
      NELA=216                                                          
      NROT=70                                                          
      NVIB1=87                                                          
      NVIB2=69                                                          
      NVIB3=70                                                          
      NVIB4=50                                                          
      NVIB5=40                                                          
      NVIB6=41 
      NVIB7=42
      NVIB8=40 
      NVIB9=35
      NVIB10=35
      NVIB11=35
      NVIB12=33
      NVIB13=31
      NVIB14=28
      NVIB15=32
      NTRP1=23  
      NTRP2=23                                                        
      NTRP3=21
      NTRP4=22                                                          
      NTRP5=23
      NTRP6=21                                                          
      NTRP7=21                                                          
      NTRP8=21
      NTRP9=20
      NTRP10=20
      NTRP11=19
      NTRP12=22
      NTRP13=10
      NTRP14=10
      NSNG1=19                                                         
      NSNG2=17
      NSNG3=17
      NSNG4=19                                                          
      NSNG5=17
      NSNG6=16
      NSNG7=12
      NSNG8=8
      NSNG9=16 
      NSNG10=8
      NSNG11=8
      NSNG12=8
      NSNG13=8
      NSNG14=8
      NSNG15=8
      NIOND=87
      NION1=87
      NION2=63
      NION3=48
      NION4=54 
      NKSH=89
#                                                         
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(27.7940*AMU)                                      
      E(3)=15.581                                  
      E(4)=0.0                                   
      E(5)=0.0                   
      E(6)=0.0
#
      EION(1)=15.581
      EION(2)=15.855
      EION(3)=16.699
      EION(4)=16.935
      EION(5)=17.171
      EION(6)=18.751
      EION(7)=23.591
      EION(8)=24.294
      EION(9)=24.4  
      EION(10)=35.7
      EION(11)=38.8
      EION(12)=401.6
#
#     EOBFRAC=0.680
      DO 14 J=1,12
#     EOBY(J)=EION(J)*EOBFRAC
      EOBY(J)=13.6
   14 CONTINUE
#
      DO 17 JK=1,12
      LEGAS(JK)=0
      ISHELL(JK)=0
      NC0(JK)=0
      EC0(JK)=0.0
      WKLM(JK)=0.0
      EFL(JK)=0.0
      NG1(JK)=0
      EG1(JK)=0.0
      NG2(JK)=0
      EG2(JK)=0.0
   17 CONTINUE
# DOUBLY CHARGED STATES
      NC0(11)=1
      EC0(11)=6.0
# FLUORESENCE DATA
      LEGAS(12)=1
      ISHELL(12)=1
      NC0(12)=2
      EC0(12)=358.6
      WKLM(12)=0.0044
      EFL(12)=385.
      NG1(12)=1
      EG1(12)=353.
      NG2(12)=1
      EG2(12)=6.
#
      DO 776 J=1,NION
      DO 777 I=1,NASIZE
      IF(EG(I):
 > EION(J)) :
       IOFFION(J)=I-1
       GO TO 776
      # endIF
  777 CONTINUE
  776 CONTINUE
# CALC FRACTIONAL POPULATION DENSITY FOR ROTATIONAL STATES
      B0=2.4668D-4
      A0=0.5291772083D-8
# ROTATIONAL QUADRUPOLE MOMENT
      QBQA=1.045
      QBK=1.67552*(QBQA*A0)**2
      DO 3 K=1,39,2 
      AK=DFLOAT(K)
    3 PJ(K)=3.0*(2.0*AK+1.0)*math.exp(-AK*(AK+1.0)*B0/AKT)
      DO 4 K=2,38,2
      AK=DFLOAT(K)
    4 PJ(K)=6.0*(2.0*AK+1.0)*math.exp(-AK*(AK+1.0)*B0/AKT)
      SUM=6.0
      DO 5 K=1,39
    5 SUM=SUM+PJ(K)
      FROT0=6.0/SUM
      DO 6 K=1,39
    6 PJ(K)=PJ(K)/SUM
# CALC ROTATIONAL TRANSITION ENERGIES
      DO 7 K=1,38  
      J=K-1
      AJ=DFLOAT(J)
      EIN(K+38)=B0*(4.0*AJ+6.0)
    7 EIN(K)=-EIN(K+38)
      EIN(77)=-0.2889
      EIN(78)=0.2889
      EIN(79)=0.5742                                                    
      EIN(80)=0.8559                                                    
      EIN(81)=1.1342                                                    
      EIN(82)=1.4088                                                    
      EIN(83)=1.6801
      EIN(84)=1.9475
      EIN(85)=2.2115
      EIN(86)=2.4718
      EIN(87)=2.7284
      EIN(88)=2.9815
      EIN(89)=3.2310
      EIN(90)=3.4769
      EIN(91)=3.7191
      EIN(92)=3.9576
      EIN(93)=6.725
      EIN(94)=7.360                                                     
      EIN(95)=7.744
      EIN(96)=8.050                                                     
      EIN(97)=8.217
      EIN(98)=8.451
      EIN(99)=8.729
      EIN(100)=8.950
      EIN(101)=8.974                                                    
      EIN(102)=9.191
      EIN(103)=9.562
      EIN(104)=9.590
      EIN(105)=9.665
      EIN(106)=9.933
      EIN(107)=10.174 
      EIN(108)=10.536
      EIN(109)=11.188                                                   
      EIN(110)=11.875
      EIN(111)=12.289 
      EIN(112)=12.781
      EIN(113)=13.000
      EIN(114)=13.001
      EIN(115)=13.076
      EIN(116)=13.174
      EIN(117)=13.338
      EIN(118)=13.385
      EIN(119)=13.628
      EIN(120)=14.090
      EIN(121)=14.232                              
      EIN(122)=14.36
      EIN(123)=14.45
      EIN(124)=14.839
      EIN(125)=15.2
      EIN(126)=15.6 
      EIN(127)=16.6
      EIN(128)=0.0
#
#**********************************************************************
# ENTER PENNING TRANSFER FRACTION FOR EACH LEVEL
#  SET PENNING TRANSFER FRACTION TO ZERO FOR LOW ENERGY LEVELS
      DO 8 K=1,106
      DO 8 L=1,3
    8 PENFRA[L,K]=0.0
#-----------------------------------------------------------
# PENNING TRANSFER FRACTION FOR LEVELS ABOVE 10 EV
      DO 9 K=107,127
      PENFRA[1,K]=0.0
# PENNING TRANSFER DISTANCE IN MICRONS
      PENFRA[2,K]=1.0
# PENNING TRANSFER TIME IN PICOSECONDS
      PENFRA[3,K]=1.0
      IF(IPEN == 0):
 GO TO 9
      WRITE(6,999) NAME,EIN(K),PENFRA[1,K],PENFRA[2,K],PENFRA[3,K]
  999 FORMAT(' GAS = ',A15,' ENERGY LEVEL = ',F7.4,' EV.',/,' PENNING PR
     /OBABILITY = ',F5.3,' ABS.LENGTH = ',F7.2,' DECAY TIME = ',F7.1,/)
    9 CONTINUE
#********************************************************************** 
      DO 551 NL=1,NIN
      DO 651 I=1,NASIZE
      IF(EG(I):
 > abs(EIN(NL))) :
       IOFFN(NL)=I-1
       GO TO 551
      # endIF 
  651 CONTINUE
  551 CONTINUE
#    
      SCRPT(1)='                                                  '
      IF(NANISO == 0):
 :
       SCRPT(2)=' ELASTIC  ISOTROPIC           NITROGEN           '
      else:                  
       SCRPT(2)=' ELASTIC ANISOTROPIC          NITROGEN           '
      # endIF
      SCRPT(3)=' IONISATION N2+ X2SIGMA VIB=0     ELOSS=  15.581  '
      SCRPT(4)=' IONISATION N2+ X2SIGMA VIB>0     ELOSS=  15.855  '
      SCRPT(5)=' IONISATION N2+ A2PI    VIB=0     ELOSS=  16.699  '
      SCRPT(6)=' IONISATION N2+ A2PI    VIB=1     ELOSS=  16.935  '
      SCRPT(7)=' IONISATION N2+ A2PI    VIB>1     ELOSS=  17.171  '
      SCRPT(8)=' IONISATION N2+ B2SIGMA           ELOSS=  18.751  '
      SCRPT(9)=' IONISATION N2+ C2SIGMA           ELOSS=  23.591  '
      SCRPT(10)=' DISSOC ION (N+,N)                ELOSS=  24.294  '
      SCRPT(11)=' DISSOC ION (N+,N*)               ELOSS=  24.4    '
      SCRPT(12)=' DISSOC ION (N+*,N)               ELOSS=  35.7    '
      SCRPT(13)=' DISSOC ION (N++,N) AND (N+,N+)   ELOSS=  38.8    '
      SCRPT(14)=' IONISATION K-SHELL               ELOSS= 401.6    '
      SCRPT(15)=' ATTACHMENT                                       '
      SCRPT(16)='                                                  '
      SCRPT(17)='                                                  '  
      SCRPT(18)=' ROTATION  2-0                    ELOSS=  -0.00148'
      SCRPT(19)=' ROTATION  3-1                    ELOSS=  -0.00247'
      SCRPT(20)=' ROTATION  4-2                    ELOSS=  -0.00345'
      SCRPT(21)=' ROTATION  5-3                    ELOSS=  -0.00444'
      SCRPT(22)=' ROTATION  6-4                    ELOSS=  -0.00543'
      SCRPT(23)=' ROTATION  7-5                    ELOSS=  -0.00641'
      SCRPT(24)=' ROTATION  8-6                    ELOSS=  -0.00740'
      SCRPT(25)=' ROTATION  9-7                    ELOSS=  -0.00839'
      SCRPT(26)=' ROTATION 10-8                    ELOSS=  -0.00937'
      SCRPT(27)=' ROTATION 11-9                    ELOSS=  -0.0104 '   
      SCRPT(28)=' ROTATION 12-10                   ELOSS=  -0.0113 '
      SCRPT(29)=' ROTATION 13-11                   ELOSS=  -0.0123 '
      SCRPT(30)=' ROTATION 14-12                   ELOSS=  -0.0133 '
      SCRPT(31)=' ROTATION 15-13                   ELOSS=  -0.0143 '
      SCRPT(32)=' ROTATION 16-14                   ELOSS=  -0.0153 '
      SCRPT(33)=' ROTATION 17-15                   ELOSS=  -0.0163 '   
      SCRPT(34)=' ROTATION 18-16                   ELOSS=  -0.0173 '
      SCRPT(35)=' ROTATION 19-17                   ELOSS=  -0.0183 '
      SCRPT(36)=' ROTATION 20-18                   ELOSS=  -0.0192 '
      SCRPT(37)=' ROTATION 21-19                   ELOSS=  -0.0202 '
      SCRPT(38)=' ROTATION 22-20                   ELOSS=  -0.0212 '
      SCRPT(39)=' ROTATION 23-21                   ELOSS=  -0.0222 '
      SCRPT(40)=' ROTATION 24-22                   ELOSS=  -0.0232 '
      SCRPT(41)=' ROTATION 25-23                   ELOSS=  -0.0242 '
      SCRPT(42)=' ROTATION 26-24                   ELOSS=  -0.0252 '
      SCRPT(43)=' ROTATION 27-25                   ELOSS=  -0.0261 '
      SCRPT(44)=' ROTATION 28-26                   ELOSS=  -0.0271 '
      SCRPT(45)=' ROTATION 29-27                   ELOSS=  -0.0281 '
      SCRPT(46)=' ROTATION 30-28                   ELOSS=  -0.0291 '
      SCRPT(47)=' ROTATION 31-29                   ELOSS=  -0.0301 '
      SCRPT(48)=' ROTATION 32-30                   ELOSS=  -0.0311 '
      SCRPT(49)=' ROTATION 33-31                   ELOSS=  -0.0321 '
      SCRPT(50)=' ROTATION 34-32                   ELOSS=  -0.0331 '
      SCRPT(51)=' ROTATION 35-33                   ELOSS=  -0.0340 '
      SCRPT(52)=' ROTATION 36-34                   ELOSS=  -0.0350 '
      SCRPT(53)=' ROTATION 37-35                   ELOSS=  -0.0360 '
      SCRPT(54)=' ROTATION 38-36                   ELOSS=  -0.0370 '
      SCRPT(55)=' ROTATION 39-37                   ELOSS=  -0.0380 '
      SCRPT(56)=' ROTATION 0-2                     ELOSS=   0.00148'
      SCRPT(57)=' ROTATION 1-3                     ELOSS=   0.00247'
      SCRPT(58)=' ROTATION 2-4                     ELOSS=   0.00345'
      SCRPT(59)=' ROTATION 3-5                     ELOSS=   0.00444'
      SCRPT(60)=' ROTATION 4-6                     ELOSS=   0.00543'   
      SCRPT(61)=' ROTATION 5-7                     ELOSS=   0.00641'
      SCRPT(62)=' ROTATION 6-8                     ELOSS=   0.00740'
      SCRPT(63)=' ROTATION 7-9                     ELOSS=   0.00839'
      SCRPT(64)=' ROTATION 8-10                    ELOSS=   0.00937'
      SCRPT(65)=' ROTATION 9-11                    ELOSS=   0.0104 '
      SCRPT(66)=' ROTATION 10-12                   ELOSS=   0.0113 '
      SCRPT(67)=' ROTATION 11-13                   ELOSS=   0.0123 '
      SCRPT(68)=' ROTATION 12-14                   ELOSS=   0.0133 '
      SCRPT(69)=' ROTATION 13-15                   ELOSS=   0.0143 '
      SCRPT(70)=' ROTATION 14-16                   ELOSS=   0.0153 '
      SCRPT(71)=' ROTATION 15-17                   ELOSS=   0.0163 '
      SCRPT(72)=' ROTATION 16-18                   ELOSS=   0.0173 '
      SCRPT(73)=' ROTATION 17-19                   ELOSS=   0.0183 '
      SCRPT(74)=' ROTATION 18-20                   ELOSS=   0.0192 '
      SCRPT(75)=' ROTATION 19-21                   ELOSS=   0.0202 '
      SCRPT(76)=' ROTATION 20-22                   ELOSS=   0.0212 '
      SCRPT(77)=' ROTATION 21-23                   ELOSS=   0.0222 '
      SCRPT(78)=' ROTATION 22-24                   ELOSS=   0.0232 '
      SCRPT(79)=' ROTATION 23-25                   ELOSS=   0.0242 '
      SCRPT(80)=' ROTATION 24-26                   ELOSS=   0.0252 '
      SCRPT(81)=' ROTATION 25-27                   ELOSS=   0.0261 '
      SCRPT(82)=' ROTATION 26-28                   ELOSS=   0.0271 '
      SCRPT(83)=' ROTATION 27-29                   ELOSS=   0.0281 '
      SCRPT(84)=' ROTATION 28-30                   ELOSS=   0.0291 '
      SCRPT(85)=' ROTATION 29-31                   ELOSS=   0.0301 '
      SCRPT(86)=' ROTATION 30-32                   ELOSS=   0.0311 '
      SCRPT(87)=' ROTATION 31-33                   ELOSS=   0.0321 '
      SCRPT(88)=' ROTATION 32-34                   ELOSS=   0.0331 '
      SCRPT(89)=' ROTATION 33-35                   ELOSS=   0.0340 '
      SCRPT(90)=' ROTATION 34-36                   ELOSS=   0.0350 '
      SCRPT(91)=' ROTATION 35-37                   ELOSS=   0.0360 '
      SCRPT(92)=' ROTATION 36-38                   ELOSS=   0.0370 '
      SCRPT(93)=' ROTATION 37-39                   ELOSS=   0.0380 '
      SCRPT(94)=' VIBRATION     V1                 ELOSS=  -0.2889 '
      SCRPT(95)=' VIBRATION     V1                 ELOSS=   0.2889 '
      SCRPT(96)=' VIBRATION    2V1                 ELOSS=   0.5742 '
      SCRPT(97)=' VIBRATION    3V1                 ELOSS=   0.8559 '
      SCRPT(98)=' VIBRATION    4V1                 ELOSS=   1.1342 '
      SCRPT(99)=' VIBRATION    5V1                 ELOSS=   1.4088 '
      SCRPT(100)=' VIBRATION    6V1                 ELOSS=   1.6801 '
      SCRPT(101)=' VIBRATION    7V1                 ELOSS=   1.9475 '
      SCRPT(102)=' VIBRATION    8V1                 ELOSS=   2.2115 '
      SCRPT(103)=' VIBRATION    9V1                 ELOSS=   2.4718 '
      SCRPT(104)=' VIBRATION   10V1                 ELOSS=   2.7284 '
      SCRPT(105)=' VIBRATION   11V1                 ELOSS=   2.9815 '
      SCRPT(106)=' VIBRATION   12V1                 ELOSS=   3.2310 '
      SCRPT(107)=' VIBRATION   13V1                 ELOSS=   3.4769 '
      SCRPT(108)=' VIBRATION   14V1                 ELOSS=   3.7191 '
      SCRPT(109)=' VIBRATION   15V1                 ELOSS=   3.9576 '
      SCRPT(110)=' A3SIG     V=0-4                  ELOSS=   6.725  '
      SCRPT(111)=' A3SIG     V=5-9                  ELOSS=   7.360  '
      SCRPT(112)=' B 3PI     V=0-3                  ELOSS=   7.744  '
      SCRPT(113)=' W3DEL     V=0-5                  ELOSS=   8.050  '
      SCRPT(114)=' A3SIG     V=10-21                ELOSS=   8.217  '
      SCRPT(115)=' B 3PI     V=4-16                 ELOSS=   8.451  '
      SCRPT(116)=' W3DEL     V=6-10                 ELOSS=   8.729  '
      SCRPT(117)=' A 1PI     V=0-3                  ELOSS=   8.950  '
      SCRPT(118)=' B#3SIG    V=0-6                  ELOSS=   8.974  '
      SCRPT(119)=' A#1SIG    V=0-6                  ELOSS=   9.191  '
      SCRPT(120)=' W3DEL     V=11-19                ELOSS=   9.562  '
      SCRPT(121)=' W 1DEL    V=0-5                  ELOSS=   9.590  '
      SCRPT(122)=' A 1PI     V=4-15                 ELOSS=   9.665  '
      SCRPT(123)=' B#3SIG    V=7-18                 ELOSS=   9.933  '
      SCRPT(124)=' A#1SIG    V=7-19                 ELOSS=  10.174  '
      SCRPT(125)=' W 1DEL    V=6-18                 ELOSS=  10.536  '
      SCRPT(126)=' C 3PI     V=0-4                  ELOSS=  11.188  '
      SCRPT(127)=' E 3SIG                           ELOSS=  11.875  '
      SCRPT(128)=' A##1SIG   V=0-1                  ELOSS=  12.289  '
      SCRPT(129)=' B 1PI     V=0-6     F=0.1855     ELOSS=  12.781  '
      SCRPT(130)=' C#1SIG    V=0-3     F=0.1500     ELOSS=  13.000  '
      SCRPT(131)=' G 3PI     V=0-3                  ELOSS=  13.001  '
      SCRPT(132)=' C3 1PI    V=0-3     F=0.1500     ELOSS=  13.076  '
      SCRPT(133)=' F 3PI     V=0-3                  ELOSS=  13.174  '
      SCRPT(134)=' B 1PI     V=7-14    F=0.0663     ELOSS=  13.338  '
      SCRPT(135)=' B#1SIG    V=0-10    F=0.0601     ELOSS=  13.385  '
      SCRPT(136)=' O3 1PI    V=0-3     F=0.0828     ELOSS=  13.628  '
      SCRPT(137)=' C#1SIG    V=4-6     F=0.1390     ELOSS=  14.090  '
      SCRPT(138)=' B#1SIG    V=11-24   F=0.2650     ELOSS=  14.232  '
      SCRPT(139)=' E#1SIG              F=0.0108     ELOSS=  14.36   '
      SCRPT(140)=' E 1PI               F=0.0237     ELOSS=  14.45   '
      SCRPT(141)=' SINGLET LEVEL       F=0.0117     ELOSS=  14.839  '
      SCRPT(142)=' SUM HIGH SINGLETS   F=0.1152     ELOSS=  15.2    '
      SCRPT(143)=' NEUTRAL DISS ABOVE IONIS. ENERGY ELOSS=  15.6    '
      SCRPT(144)=' NEUTRAL DISS ABOVE IONIS. ENERGY ELOSS=  16.6    '
      SCRPT(145)=' BREMSSTRAHLUNG  FROM NITROGEN ATOMS              '
# CALC VIBRATIONAL LEVEL V1 POPULATION
      APOPV1=math.exp(EIN(77)/AKT)
      APOPGS=1.0
      APOPSUM=APOPGS+APOPV1
      APOPV1=APOPV1/APOPSUM
      APOPGS=APOPGS/APOPSUM
#  RENORMALISE GROUND STATE TO ALLOW FOR EXCITATION FROM
#  THE EXCITED VIBRATIONAL STATE 
      APOPGS=1.0
#       
#     EN=-ESTEP/2.0   
      DO 900 I=1,NSTEP
      EN=EG(I)      
#     EN=EN+ESTEP 
      GAMMA1=(EMASS2+2.00*EN)/EMASS2
      GAMMA2=GAMMA1*GAMMA1
      BETA=math.sqrt(1.00-1.00/GAMMA2)
      BETA2=BETA*BETA
#        
# ELASTIC (+ROTATIONAL)                                                
      DO 10 J=2,NELA                                                    
      IF(EN <= XELA[J]):
 GO TO 15                                        
   10 CONTINUE                                                          
      J=NELA                                                            
   15 A=(YELA[J]-YELA[J-1])/(XELA[J]-XELA[J-1])                         
      B=(XELA[J-1]*YELA[J]-XELA[J]*YELA[J-1])/(XELA[J-1]-XELA[J])
# ELASTIC
      QELA=(A*EN+B)*1.0D-16
      A=(YMOM(J)-YMOM(J-1))/(XELA[J]-XELA[J-1])                         
      B=(XELA[J-1]*YMOM(J)-XELA[J]*YMOM(J-1))/(XELA[J-1]-XELA[J])
#  MOMENTUM TRANSFER
      QMOM=(A*EN+B)*1.0D-16
      A=(YEPS(J)-YEPS(J-1))/(XELA[J]-XELA[J-1])
      B=(XELA[J-1]*YEPS(J)-XELA[J]*YEPS(J-1))/(XELA[J-1]-XELA[J])
# ANISOTROPY defS
      PQ2=(A*EN+B)
# EPSILON =1.0-YEPS
      PQ2=1.00-PQ2
      PQ1=0.5+(QELA-QMOM)/QELA
      IF(NANISO == 0):
 PEQEL(2,I)=0.5
      IF(NANISO == 1):
 PEQEL(2,I)=PQ1
      IF(NANISO == 2):
 PEQEL(2,I)=PQ2
      Q(2,I)=QELA
      IF(NANISO == 0):
 Q(2,I)=QMOM 
# IONISATION CALCULATION 
      DO 29 J=1,12
      PEQION(J,I)=0.5
      IF(NANISO == 2):
 PEQION(J,I)=0.0
   29 QION(J,I)=0.0
#
# IONISATION TO ALL CHANNELS WITH N2+
      QN2PTOT=0.0
      IF(EN <= EION(1):
) GO TO 411   
      IF(EN > XION1(NION1):
) GO TO 41                                 
      DO 30 J=2,NION1                                                   
      IF(EN <= XION1(J):
) GO TO 40                                       
   30 CONTINUE                                                          
      J=NION1                                                           
   40 A=(YION1(J)-YION1(J-1))/(XION1(J)-XION1(J-1))                   
      B=(XION1(J-1)*YION1(J)-XION1(J)*YION1(J-1))/(XION1(J-1)-XION1(J))
      QN2PTOT=(A*EN+B)*1.D-16                   
      GO TO 411
# USE BORN BETHE X-SECTION ABOVE  XION1(NION1) EV 
   41 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QN2PTOT=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.7973                  
#
  411 QION(1,I)=QN2PTOT
      IF(EN > EION(2):
 and EN <= EION(3)) :
       QION(2,I)=QN2PTOT*0.2
       QION(1,I)=QN2PTOT*0.8
      elif(EN > EION(3) and EN <= EION(4)) :
       QION(3,I)=QN2PTOT*0.1986
       QION(2,I)=QN2PTOT*0.1603
       QION(1,I)=QN2PTOT*0.6411
      elif(EN > EION(4) and EN <= EION(5)) :
       QION(4,I)=QN2PTOT*0.2296
       QION(3,I)=QN2PTOT*0.1530
       QION(2,I)=QN2PTOT*0.1235
       QION(1,I)=QN2PTOT*0.4939
      elif(EN > EION(5) and EN <= EION(6)) :
       QION(5,I)=QN2PTOT*0.2765
       QION(4,I)=QN2PTOT*0.1659
       QION(3,I)=QN2PTOT*0.1106
       QION(2,I)=QN2PTOT*0.0894
       QION(1,I)=QN2PTOT*0.3576
      elif(EN > EION(6) and EN <= EION(7)) :
       QION(6,I)=QN2PTOT*0.1299
       QION(5,I)=QN2PTOT*0.2408
       QION(4,I)=QN2PTOT*0.1445
       QION(3,I)=QN2PTOT*0.0963
       QION(2,I)=QN2PTOT*0.0777
       QION(1,I)=QN2PTOT*0.3108
      elif(EN > EION(7)) :
       QION(7,I)=QN2PTOT*0.022
       QION(6,I)=QN2PTOT*0.127
       QION(5,I)=QN2PTOT*0.2355
       QION(4,I)=QN2PTOT*0.1413
       QION(3,I)=QN2PTOT*0.0942
       QION(2,I)=QN2PTOT*0.076
       QION(1,I)=QN2PTOT*0.304
      # endIF
      IF(EN > EION(8):
) :
#
# IONISATION TO ALL CHANNELS WITH N+
       QNPTOT=0.0   
       IF(EN > XION2(NION2):
) GO TO 414                                 
       DO 412 J=2,NION2                                                
       IF(EN <= XION2(J):
) GO TO 413                                     
  412  CONTINUE                                                        
       J=NION2                                                         
  413  A=(YION2(J)-YION2(J-1))/(XION2(J)-XION2(J-1))                   
       B=(XION2(J-1)*YION2(J)-XION2(J)*YION2(J-1))/(XION2(J-1)-XION2(J))
       QNPTOT=(A*EN+B)*1.D-16                   
       GO TO 415
# USE BORN BETHE X-SECTION ABOVE  XION2(NION2) EV 
  414  QNPTOT=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.197                 
  415  CONTINUE 
       QION(8,I)=QNPTOT
       IF(EN > EION(9):
 and EN < EION(10)) :
        IF(EN < 110.):
 QION(9,I)=((EN-EION(9))/(110.-EION(9)))*0.095
     /*1.D-16
        IF(EN >= 110.):
 QION(9,I)=QION(8,I)*0.1439
        QION(8,I)=QION(8,I)-QION(9,I)
       elif(EN > EION(10)) :
        IF(EN < 110.):
 QION(9,I)=((EN-EION(9))/(110.-EION(9)))*0.095
     /*1.D-16
        IF(EN >= 110.):
 QION(9,I)=QION(8,I)*0.1439
        IF(EN < 120.):
 QION(10,I)=((EN-EION(10))/(120.-EION(10)))*
     /0.037*1.D-16
        IF(EN > 120.):
 QION(10,I)=QION(8,I)*0.0560
        QION(8,I)=QION(8,I)-QION(9,I)-QION(10,I)
       # endIF
      # endIF
#
      IF(EN > EION(11):
) :
#  SUM OF DOUBLE IONISATION CHANNELS: N+,N+  AND N++,N
       QION(11,I)=0.0   
       IF(EN > XION3(NION3):
) GO TO 418                                 
       DO 416 J=2,NION3                                                
       IF(EN <= XION3(J):
) GO TO 417                                     
  416  CONTINUE                                                        
       J=NION3                                                         
  417  A=(YION3(J)-YION3(J-1))/(XION3(J)-XION3(J-1))                   
       B=(XION3(J-1)*YION3(J)-XION3(J)*YION3(J-1))/(XION3(J-1)-XION3(J))
       QION(11,I)=(A*EN+B)*1.D-16                   
       GO TO 419
# USE BORN BETHE X-SECTION ABOVE  XION3(NION3) EV 
  418  QION(11,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.0338               
  419  CONTINUE 
#*************************************************
# CORRECTION TO STRAUB N+ FOR  (N+,N+) CHANNEL
       QION(8,I)=QION(8,I)-QION(11,I)
#***************************************************
      # endIF
      IF(EN > 65.0):
 :
       IF(EN > XION4(NION4):
) GO TO 422                                 
       DO 420 J=2,NION4                                                
       IF(EN <= XION4(J):
) GO TO 421                                     
  420  CONTINUE                                                        
       J=NION4                                                         
  421  A=(YION4(J)-YION4(J-1))/(XION4(J)-XION4(J-1))                   
       B=(XION4(J-1)*YION4(J)-XION4(J)*YION4(J-1))/(XION4(J-1)-XION4(J))
       QION(11,I)=QION(11,I)+(A*EN+B)*1.D-16                   
       GO TO 423
# USE BORN BETHE X-SECTION ABOVE  XION4(NION4) EV 
  422  QION(11,I)=QION(11,I)+CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.0057   
  423  CONTINUE 
      # endIF 
# K-SHELL IONISATION 
      IF(EN < EION(12):
) GO TO 434  
      DO 432 J=2,NKSH                                                  
      IF(EN <= XKSH(J):
) GO TO 433                                       
  432 CONTINUE                                                          
      J=NKSH                                                           
  433 A=(YKSH(J)-YKSH(J-1))/(XKSH(J)-XKSH(J-1))                         
      B=(XKSH(J-1)*YKSH(J)-XKSH(J)*YKSH(J-1))/(XKSH(J-1)-XKSH(J)) 
# SCALING FACTOR OF 2 FOR NUMBER OF ATOMS IN MOLECULE      
      QION(12,I)=2.0*(A*EN+B)*1.D-16                   
#
  434 DO 435 J=1,12
      IF(EN <= (2.0*EION(J):
)) GO TO 435
      PEQION(J,I)=PEQEL(2,(I-IOFFION(J)))
  435 CONTINUE
#  
# CORRECTION TO IONISATION FOR AUGER EMISSION
      QION(1,I)=QION(1,I)-AUGK*QION(12,I)
#
      Q(4,I)=0.0  
      QATT(1,I)=Q(4,I)
      Q(5,I)=0.0
      Q(6,I)=0.0                                                        
#---------------------------------------------------------------------  
#  QUADRUPOLE BORN ROTATIONAL STATES  ( GERJUOY AND STEIN)              
#---------------------------------------------------------------------
# 
#  SUPERELASTIC ROTATION   
#     
      DO 53 K=1,38 
      QIN(K,I)=0.0
      PEQIN(K,I)=0.50
      IF(NANISO == 2):
 PEQIN(K,I)=0.00
      IF(EN <= 0.0):
 GO TO 53                                  
      AJ=DFLOAT(K+1)
      QIN(K,I)=PJ(K+1)*QBK*math.sqrt(1.0-EIN(K)/EN)*AJ*(AJ-1.0)/((2.0*AJ+1.0
     /)*(2.0*AJ-1.0))
# CALCULATE ENHANCEMENT OF ROTATIONAL XSEC IN THE RESONANCE REGION
      DO 51 L=1,NROT
      IF((EN-EIN(K):
) <= XROT(L)) GO TO 52
   51 CONTINUE
      L=NROT
   52 A=(YROT(L)-YROT(L-1))/(XROT(L)-XROT(L-1))                     
      B=(XROT(L-1)*YROT(L)-XROT(L)*YROT(L-1))/(XROT(L-1)-XROT(L)) 
      RESFAC=(EN-EIN(K))*(A*(EN-EIN(K))+B)/EN
# USE 30% FOR RESFAC
      RESFAC=RESFAC*0.3  
# BORN ROTATIONAL X-SEC SUM IN RESONANCE REGION = 0.249
      RESFAC=1.0+RESFAC/0.249 
   53 QIN(K,I)=QIN(K,I)*RESFAC    
#
#  INELASTIC ROTATION
#
# CALCULATE ENHANCEMENT OF ROTATIONAL XSEC IN THE RESONANCE REGION
      DO 55 K=39,76
      PEQIN(K,I)=0.50
      IF(NANISO == 2):
 PEQIN(K,I)=0.00
   55 QIN(K,I)=0.0
      IF(EN <= 0.0):
 GO TO 80
      DO 56 L=1,NROT
      IF(EN <= XROT(L):
) GO TO 57 
   56 CONTINUE
      L=NROT
   57 A=(YROT(L)-YROT(L-1))/(XROT(L)-XROT(L-1))                     
      B=(XROT(L-1)*YROT(L)-XROT(L)*YROT(L-1))/(XROT(L-1)-XROT(L)) 
      RESFAC=A*EN+B
# USE 30% FOR RESFAC
      RESFAC=RESFAC*0.3  
# BORN ROTATIONAL X-SEC SUM IN RESONANCE REGION = 0.249
      RESFAC=1.0+RESFAC/0.249  
#  ROT 0-2
      IF(EN <= EIN(39):
) GO TO 80
      QIN(39,I)=FROT0*QBK*math.sqrt(1.0-EIN(39)/EN)*2.0/3.0
      QIN(39,I)=QIN(39,I)*RESFAC
      PEQIN(39,I)=0.0
      IF(NANISO == 2):
 PEQIN(39,I)=0.0
# ROT 1-3 AND HIGHER
      DO 58 K=40,76
      AJ=DFLOAT(K-39) 
      IF(EN <= EIN(K):
) GO TO 80
      QIN(K,I)=PJ(K-39)*QBK*math.sqrt(1.0-EIN(K)/EN)*(AJ+2.0)*(AJ+1.0)/((2.0
     /*AJ+3.0)*(2.0*AJ+1.0))
   58 QIN(K,I)=QIN(K,I)*RESFAC    
#  FORCE ROTATIONAL X-SEC TO FALL AT SAME RATE AS THE
#  ELASTIC X-SECTION ABOVE 5.0 EV
      IF(EN < 5.0):
 GO TO 80
      ASCALE=QMOM/8.90D-16
      DO 70 K=1,76
   70 QIN(K,I)=QIN(K,I)*ASCALE
   80 CONTINUE
#---------------------------------------------------------------------  
#  VIBRATIONAL AND EXCITATION X-SECTIONS         
#--------------------------------------------------------------------- 
#  V1 SUPERELASTIC 
      QIN(77,I)=0.0
      PEQIN(77,I)=0.5
      IF(NANISO == 2):
 PEQIN(77,I)=0.0
      IF(EN <= 0.0):
 GO TO 87
      IF((EN-EIN(77):
) > XVB1(NVIB1)) GO TO 861                    
      DO 85 J=2,NVIB1                                                   
      IF((EN-EIN(77):
) <= XVB1(J)) GO TO 86                           
   85 CONTINUE                                                          
      J=NVIB1                                                           
   86 A=(YVB1(J)-YVB1(J-1))/(XVB1(J)-XVB1(J-1))                     
      B=(XVB1(J-1)*YVB1(J)-XVB1(J)*YVB1(J-1))/(XVB1(J-1)-XVB1(J)) 
      QIN(77,I)=(EN-EIN(77))*(A*(EN-EIN(77))+B)/EN
      GO TO 862
  861 QIN(77,I)=(EN-EIN(77))*YVB1(NVIB1)*(XVB1(NVIB1)/(EN*EN)) 
  862 QIN(77,I)=APOPV1*QIN(77,I)*1.D-16        
   87 CONTINUE
#  V1  
      QIN(78,I)=0.0                                                     
      IF(EN <= EIN(78):
) GO TO 110
      IF(EN > XVB1(NVIB1):
) GO TO 101                                
      DO 90 J=2,NVIB1                                                   
      IF(EN <= XVB1(J):
) GO TO 100                                      
   90 CONTINUE                                                          
      J=NVIB1                                                           
  100 A=(YVB1(J)-YVB1(J-1))/(XVB1(J)-XVB1(J-1))                     
      B=(XVB1(J-1)*YVB1(J)-XVB1(J)*YVB1(J-1))/(XVB1(J-1)-XVB1(J)) 
      QIN(78,I)=APOPGS*(A*EN+B)*1.D-16   
      GO TO 110
  101 QIN(78,I)=APOPGS*YVB1(NVIB1)*(XVB1(NVIB1)/EN)*1.D-16            
  110 CONTINUE
#  2V1                                                                  
      QIN(79,I)=0.0                                
      IF(EN <= EIN(79):
) GO TO 140                           
      IF(EN > XVB2(NVIB2):
) GO TO 131            
      DO 120 J=2,NVIB2                                                  
      IF(EN <= XVB2(J):
) GO TO 130                                      
  120 CONTINUE                                                          
      J=NVIB2                                                           
  130 A=(YVB2(J)-YVB2(J-1))/(XVB2(J)-XVB2(J-1))                     
      B=(XVB2(J-1)*YVB2(J)-XVB2(J)*YVB2(J-1))/(XVB2(J-1)-XVB2(J)) 
      QIN(79,I)=APOPGS*(A*EN+B)*1.D-16
      GO TO 140  
  131 QIN(79,I)=APOPGS*YVB2(NVIB2)*(XVB2(NVIB2)/EN)*1.D-16             
  140 CONTINUE                           
#  3V1                                                       
      QIN(80,I)=0.0                                                    
      IF(EN <= EIN(80):
) GO TO 170                           
      IF(EN > XVB3(NVIB3):
) GO TO 161            
      DO 150 J=2,NVIB3                                                  
      IF(EN <= XVB3(J):
) GO TO 160                                      
  150 CONTINUE                                                          
      J=NVIB3                                                           
  160 A=(YVB3(J)-YVB3(J-1))/(XVB3(J)-XVB3(J-1))                     
      B=(XVB3(J-1)*YVB3(J)-XVB3(J)*YVB3(J-1))/(XVB3(J-1)-XVB3(J)) 
      QIN(80,I)=APOPGS*(A*EN+B)*1.D-16
      GO TO 170
  161 QIN(80,I)=APOPGS*YVB3(NVIB3)*(XVB3(NVIB3)/EN)*1.D-16           
  170 CONTINUE                       
# 4V1                                                               
      QIN(81,I)=0.0                                           
      IF(EN <= EIN(81):
) GO TO 200                               
      IF(EN > XVB4(NVIB4):
) GO TO 191        
      DO 180 J=2,NVIB4                                                  
      IF(EN <= XVB4(J):
) GO TO 190                                      
  180 CONTINUE                                                          
      J=NVIB4                                                           
  190 A=(YVB4(J)-YVB4(J-1))/(XVB4(J)-XVB4(J-1))                     
      B=(XVB4(J-1)*YVB4(J)-XVB4(J)*YVB4(J-1))/(XVB4(J-1)-XVB4(J)) 
      QIN(81,I)=APOPGS*(A*EN+B)*1.D-16
      GO TO 200
  191 QIN(81,I)=APOPGS*YVB4(NVIB4)*(XVB4(NVIB4)/EN)*1.D-16            
  200 CONTINUE                               
# 5V1                                                                  
      QIN(82,I)=0.0                                          
      IF(EN <= EIN(82):
) GO TO 230                              
      IF(EN > XVB5(NVIB5):
) GO TO 221         
      DO 210 J=2,NVIB5                                                  
      IF(EN <= XVB5(J):
) GO TO 220                                      
  210 CONTINUE                                                          
      J=NVIB5                                                           
  220 A=(YVB5(J)-YVB5(J-1))/(XVB5(J)-XVB5(J-1))                     
      B=(XVB5(J-1)*YVB5(J)-XVB5(J)*YVB5(J-1))/(XVB5(J-1)-XVB5(J)) 
      QIN(82,I)=APOPGS*(A*EN+B)*1.D-16
      GO TO 230
  221 QIN(82,I)=APOPGS*YVB5(NVIB5)*(XVB5(NVIB5)/EN)*1.D-16           
  230 CONTINUE                       
# 6V1                                                                   
      QIN(83,I)=0.0                                                     
      IF(EN <= EIN(83):
) GO TO 260                               
      IF(EN > XVB6(NVIB6):
) GO TO 251        
      DO 240 J=2,NVIB6                                                  
      IF(EN <= XVB6(J):
) GO TO 250                                      
  240 CONTINUE                                                          
      J=NVIB6                                                           
  250 A=(YVB6(J)-YVB6(J-1))/(XVB6(J)-XVB6(J-1))                     
      B=(XVB6(J-1)*YVB6(J)-XVB6(J)*YVB6(J-1))/(XVB6(J-1)-XVB6(J)) 
      QIN(83,I)=APOPGS*(A*EN+B)*1.D-16
      GO TO 260
  251 QIN(83,I)=APOPGS*YVB6(NVIB6)*(XVB6(NVIB6)/EN)*1.D-16         
  260 CONTINUE 
# 7V1                                                                   
      QIN(84,I)=0.0                                                     
      IF(EN <= EIN(84):
) GO TO 330                              
      IF(EN > XVB7(NVIB7):
) GO TO 321         
      DO 310 J=2,NVIB7                                                  
      IF(EN <= XVB7(J):
) GO TO 320                                      
  310 CONTINUE                                                          
      J=NVIB7                                                           
  320 A=(YVB7(J)-YVB7(J-1))/(XVB7(J)-XVB7(J-1))                     
      B=(XVB7(J-1)*YVB7(J)-XVB7(J)*YVB7(J-1))/(XVB7(J-1)-XVB7(J)) 
      QIN(84,I)=APOPGS*(A*EN+B)*1.D-16
      GO TO 330
  321 QIN(84,I)=APOPGS*YVB7(NVIB7)*(XVB7(NVIB7)/EN)*1.D-16        
  330 CONTINUE                                                          
# 8V1                                                                   
      QIN(85,I)=0.0                                                     
      IF(EN <= EIN(85):
) GO TO 360                                 
      IF(EN > XVB8(NVIB8):
) GO TO 351      
      DO 340 J=2,NVIB8                                                  
      IF(EN <= XVB8(J):
) GO TO 350                                      
  340 CONTINUE                                                          
      J=NVIB8                                                           
  350 A=(YVB8(J)-YVB8(J-1))/(XVB8(J)-XVB8(J-1))                     
      B=(XVB8(J-1)*YVB8(J)-XVB8(J)*YVB8(J-1))/(XVB8(J-1)-XVB8(J)) 
      QIN(85,I)=APOPGS*(A*EN+B)*1.D-16
      GO TO 360
  351 QIN(85,I)=APOPGS*YVB8(NVIB8)*(XVB8(NVIB8)/EN)*1.D-16         
  360 CONTINUE 
# 9V1                                                                   
      QIN(86,I)=0.0                                                     
      IF(EN <= EIN(86):
) GO TO 2030                              
      IF(EN > XVB9(NVIB9):
) GO TO 2021        
      DO 2010 J=2,NVIB9                                           
      IF(EN <= XVB9(J):
) GO TO 2020                                     
 2010 CONTINUE                                                          
      J=NVIB9                                                           
 2020 A=(YVB9(J)-YVB9(J-1))/(XVB9(J)-XVB9(J-1))                     
      B=(XVB9(J-1)*YVB9(J)-XVB9(J)*YVB9(J-1))/(XVB9(J-1)-XVB9(J)) 
      QIN(86,I)=APOPGS*(A*EN+B)*1.D-16
      GO TO 2030
 2021 QIN(86,I)=APOPGS*YVB9(NVIB9)*(XVB9(NVIB9)/EN)*1.D-16        
 2030 CONTINUE 
# 10V1                                                                  
      QIN(87,I)=0.0                                                     
      IF(EN <= EIN(87):
) GO TO 2060                               
      IF(EN > XVB10(NVIB10):
) GO TO 2051       
      DO 2040 J=2,NVIB10                                              
      IF(EN <= XVB10(J):
) GO TO 2050                                     
 2040 CONTINUE                                                          
      J=NVIB10                                                          
 2050 A=(YVB10(J)-YVB10(J-1))/(XVB10(J)-XVB10(J-1))                     
      B=(XVB10(J-1)*YVB10(J)-XVB10(J)*YVB10(J-1))/(XVB10(J-1)-XVB10(J)) 
      QIN(87,I)=APOPGS*(A*EN+B)*1.D-16  
      GO TO 2060
 2051 QIN(87,I)=APOPGS*YVB10(NVIB10)*(XVB10(NVIB10)/EN)*1.D-16   
 2060 CONTINUE 
# 11V1                                                                  
      QIN(88,I)=0.0                                                     
      IF(EN <= EIN(88):
) GO TO 2130                        
      IF(EN > XVB11(NVIB11):
) GO TO 2121              
      DO 2110 J=2,NVIB11                                              
      IF(EN <= XVB11(J):
) GO TO 2120                                     
 2110 CONTINUE                                                          
      J=NVIB11                                                          
 2120 A=(YVB11(J)-YVB11(J-1))/(XVB11(J)-XVB11(J-1))                     
      B=(XVB11(J-1)*YVB11(J)-XVB11(J)*YVB11(J-1))/(XVB11(J-1)-XVB11(J)) 
      QIN(88,I)=APOPGS*(A*EN+B)*1.D-16  
      GO TO 2130
 2121 QIN(88,I)=APOPGS*YVB11(NVIB11)*(XVB11(NVIB11)/EN)*1.D-16    
 2130 CONTINUE 
# 12V1                                                           
      QIN(89,I)=0.0                                                     
      IF(EN <= EIN(89):
) GO TO 2160                                
      IF(EN > XVB12(NVIB12):
) GO TO 2151      
      DO 2140 J=2,NVIB12                                              
      IF(EN <= XVB12(J):
) GO TO 2150                                     
 2140 CONTINUE                                                          
      J=NVIB12                                                          
 2150 A=(YVB12(J)-YVB12(J-1))/(XVB12(J)-XVB12(J-1))                     
      B=(XVB12(J-1)*YVB12(J)-XVB12(J)*YVB12(J-1))/(XVB12(J-1)-XVB12(J)) 
      QIN(89,I)=APOPGS*(A*EN+B)*1.D-16  
      GO TO 2160
 2151 QIN(89,I)=APOPGS*YVB12(NVIB12)*(XVB12(NVIB12)/EN)*1.D-16   
 2160 CONTINUE 
# 13V1                                                                  
      QIN(90,I)=0.0                                                     
      IF(EN <= EIN(90):
) GO TO 2230                               
      IF(EN > XVB13(NVIB13):
) GO TO 2221       
      DO 2210 J=2,NVIB13                                              
      IF(EN <= XVB13(J):
) GO TO 2220                                     
 2210 CONTINUE                                                          
      J=NVIB13                                                          
 2220 A=(YVB13(J)-YVB13(J-1))/(XVB13(J)-XVB13(J-1))                     
      B=(XVB13(J-1)*YVB13(J)-XVB13(J)*YVB13(J-1))/(XVB13(J-1)-XVB13(J)) 
      QIN(90,I)=APOPGS*(A*EN+B)*1.D-16  
      GO TO 2230
 2221 QIN(90,I)=APOPGS*YVB13(NVIB13)*(XVB13(NVIB13)/EN)*1.D-16      
 2230 CONTINUE 
# 14V1                                                                  
      QIN(91,I)=0.0                                                     
      IF(EN <= EIN(91):
) GO TO 2260                                  
      IF(EN > XVB14(NVIB14):
) GO TO 2251    
      DO 2240 J=2,NVIB14                                              
      IF(EN <= XVB14(J):
) GO TO 2250                                     
 2240 CONTINUE                                                          
      J=NVIB14                                                          
 2250 A=(YVB14(J)-YVB14(J-1))/(XVB14(J)-XVB14(J-1))                     
      B=(XVB14(J-1)*YVB14(J)-XVB14(J)*YVB14(J-1))/(XVB14(J-1)-XVB14(J)) 
      QIN(91,I)=APOPGS*(A*EN+B)*1.D-16  
      GO TO 2260
 2251 QIN(91,I)=APOPGS*YVB14(NVIB14)*(XVB14(NVIB14)/EN)*1.D-16     
 2260 CONTINUE 
# 15V1                                                                  
      QIN(92,I)=0.0                                                     
      IF(EN <= EIN(92):
) GO TO 2330                                 
      IF(EN > XVB15(NVIB15):
) GO TO 2321     
      DO 2310 J=2,NVIB15                                              
      IF(EN <= XVB15(J):
) GO TO 2320                                     
 2310 CONTINUE                                                          
      J=NVIB15                                                          
 2320 A=(YVB15(J)-YVB15(J-1))/(XVB15(J)-XVB15(J-1))                     
      B=(XVB15(J-1)*YVB15(J)-XVB15(J)*YVB15(J-1))/(XVB15(J-1)-XVB15(J)) 
      QIN(92,I)=APOPGS*(A*EN+B)*1.D-16  
      GO TO 2330
 2321 QIN(92,I)=APOPGS*YVB15(NVIB15)*(XVB15(NVIB15)/EN)*1.D-16   
 2330 CONTINUE
# SET ROTATIONAL AND VIBRATIONAL ANGULAR DISTRIBUTIONS ( IF KIN NE 0 )
      DO 2440 K=1,92
      PEQIN(K,I)=0.5
      IF(NANISO == 2):
 PEQIN(K,I)=0.0
      IF(EN <= 3.0*abs(EIN(K):
)) GO TO 2440
      IF(NANISO > 0):
 PEQIN(K,I)=PEQEL(2,(I-IOFFN(K)))
 2440 CONTINUE
#  
# A3SIGMA (V=0-4)  
      QIN(93,I)=0.0 
      PEQIN(93,I)=0.5
      IF(NANISO == 2):
 PEQIN(93,I)=0.0
      IF(EN <= EIN(93):
) GO TO 450                      
      IF(EN > XTRP1(NTRP1):
) GO TO 445                 
      DO 430 J=2,NTRP1                                                  
      IF(EN <= XTRP1(J):
) GO TO 440                                      
  430 CONTINUE                                                          
      J=NTRP1                                                           
  440 A=(YTRP1(J)-YTRP1(J-1))/(XTRP1(J)-XTRP1(J-1))                     
      B=(XTRP1(J-1)*YTRP1(J)-XTRP1(J)*YTRP1(J-1))/(XTRP1(J-1)-XTRP1(J)) 
      QIN(93,I)=(A*EN+B)*1.D-16
      A=(YTP1M(J)-YTP1M(J-1))/(XTRP1(J)-XTRP1(J-1))                     
      B=(XTRP1(J-1)*YTP1M(J)-XTRP1(J)*YTP1M(J-1))/(XTRP1(J-1)-XTRP1(J)) 
      RAT=A*EN+B
      GO TO 446
  445 QIN(93,I)=YTRP1(NTRP1)*(XTRP1(NTRP1)/EN)**2*1.D-16
      RAT=YTP1M(NTRP1)*(XTRP1(NTRP1)/EN)
  446 IF(EN <= (3.0*EIN(93))) GO TO 450
      IF(NANISO == 1):
 PEQIN(93,I)=1.5-RAT
      IF(NANISO == 2):
 PEQIN(93,I)=PEQEL(2,(I-IOFFN(93)))
  450 CONTINUE                                                          
# A3SIGMA (V=5-9)                                     
      QIN(94,I)=0.0 
      PEQIN(94,I)=0.5 
      IF(NANISO == 2):
 PEQIN(94,I)=0.0                         
      IF(EN <= EIN(94):
) GO TO 480  
      IF(EN > XTRP2(NTRP2):
) GO TO 475                               
      DO 460 J=2,NTRP2                                                  
      IF(EN <= XTRP2(J):
) GO TO 470                                      
  460 CONTINUE                                                          
      J=NTRP2                                                           
  470 A=(YTRP2(J)-YTRP2(J-1))/(XTRP2(J)-XTRP2(J-1))                     
      B=(XTRP2(J-1)*YTRP2(J)-XTRP2(J)*YTRP2(J-1))/(XTRP2(J-1)-XTRP2(J)) 
      QIN(94,I)=(A*EN+B)*1.D-16
      A=(YTP2M(J)-YTP2M(J-1))/(XTRP2(J)-XTRP2(J-1))                     
      B=(XTRP2(J-1)*YTP2M(J)-XTRP2(J)*YTP2M(J-1))/(XTRP2(J-1)-XTRP2(J)) 
      RAT=A*EN+B
      GO TO 476
  475 QIN(94,I)=YTRP2(NTRP2)*(XTRP2(NTRP2)/EN)**2*1.D-16
      RAT=YTP2M(NTRP2)*(XTRP2(NTRP2)/EN)
  476 IF(EN <= (3.0*EIN(94))) GO TO 480
      IF(NANISO == 1):
 PEQIN(94,I)=1.5-RAT
      IF(NANISO == 2):
 PEQIN(94,I)=PEQEL(2,(I-IOFFN(94)))
  480 CONTINUE                                                          
# B3PI (V=0-3)                                  
      QIN(95,I)=0.0 
      PEQIN(95,I)=0.5                      
      IF(NANISO == 2):
 PEQIN(95,I)=0.0                            
      IF(EN <= EIN(95):
) GO TO 510
      IF(EN > XTRP3(NTRP3):
) GO TO 505                             
      DO 490 J=2,NTRP3                                                  
      IF(EN <= XTRP3(J):
) GO TO 500                                      
  490 CONTINUE                                                          
      J=NTRP3                                                           
  500 A=(YTRP3(J)-YTRP3(J-1))/(XTRP3(J)-XTRP3(J-1))                     
      B=(XTRP3(J-1)*YTRP3(J)-XTRP3(J)*YTRP3(J-1))/(XTRP3(J-1)-XTRP3(J)) 
      QIN(95,I)=(A*EN+B)*1.D-16                     
      A=(YTP3M(J)-YTP3M(J-1))/(XTRP3(J)-XTRP3(J-1))                     
      B=(XTRP3(J-1)*YTP3M(J)-XTRP3(J)*YTP3M(J-1))/(XTRP3(J-1)-XTRP3(J)) 
      RAT=A*EN+B
      GO TO 506
  505 QIN(95,I)=YTRP3(NTRP3)*(XTRP3(NTRP3)/EN)**2*1.D-16
      RAT=YTP3M(NTRP3)*(XTRP3(NTRP3)/EN)
  506 IF(EN <= (3.0*EIN(95))) GO TO 510
      IF(NANISO == 1):
 PEQIN(95,I)=1.5-RAT
      IF(NANISO == 2):
 PEQIN(95,I)=PEQEL(2,(I-IOFFN(95)))
  510 CONTINUE                                                          
# W3DELTA  (V=0-5)                    
      QIN(96,I)=0.0  
      PEQIN(96,I)=0.5 
      IF(NANISO == 2):
 PEQIN(96,I)=0.0                            
      IF(EN <= EIN(96):
) GO TO 540                       
      IF(EN > XTRP4(NTRP4):
) GO TO 535                
      DO 520 J=2,NTRP4                                                  
      IF(EN <= XTRP4(J):
) GO TO 530                                      
  520 CONTINUE                                                          
      J=NTRP4                                                           
  530 A=(YTRP4(J)-YTRP4(J-1))/(XTRP4(J)-XTRP4(J-1))                     
      B=(XTRP4(J-1)*YTRP4(J)-XTRP4(J)*YTRP4(J-1))/(XTRP4(J-1)-XTRP4(J)) 
      QIN(96,I)=(A*EN+B)*1.D-16
      A=(YTP4M(J)-YTP4M(J-1))/(XTRP4(J)-XTRP4(J-1))                     
      B=(XTRP4(J-1)*YTP4M(J)-XTRP4(J)*YTP4M(J-1))/(XTRP4(J-1)-XTRP4(J)) 
      RAT=A*EN+B
      GO TO 536
  535 QIN(96,I)=YTRP4(NTRP4)*(XTRP4(NTRP4)/EN)**2*1.D-16
      RAT=YTP4M(NTRP4)*(XTRP4(NTRP4)/EN)
  536 IF(EN <= (3.0*EIN(96))) GO TO 540
      IF(NANISO == 1):
 PEQIN(96,I)=1.5-RAT
      IF(NANISO == 2):
 PEQIN(96,I)=PEQEL(2,(I-IOFFN(96)))
  540 CONTINUE                                                          
# A3SIGMA  (V=10-21)                      
      QIN(97,I)=0.0      
      PEQIN(97,I)=0.5    
      IF(NANISO == 2):
 PEQIN(97,I)=0.0                      
      IF(EN <= EIN(97):
) GO TO 570       
      IF(EN > XTRP5(NTRP5):
) GO TO 565                                
      DO 550 J=2,NTRP5                                                  
      IF(EN <= XTRP5(J):
) GO TO 560                                      
  550 CONTINUE                                                          
      J=NTRP5                                                           
  560 A=(YTRP5(J)-YTRP5(J-1))/(XTRP5(J)-XTRP5(J-1))                     
      B=(XTRP5(J-1)*YTRP5(J)-XTRP5(J)*YTRP5(J-1))/(XTRP5(J-1)-XTRP5(J)) 
      QIN(97,I)=(A*EN+B)*1.D-16                   
      A=(YTP5M(J)-YTP5M(J-1))/(XTRP5(J)-XTRP5(J-1))                     
      B=(XTRP5(J-1)*YTP5M(J)-XTRP5(J)*YTP5M(J-1))/(XTRP5(J-1)-XTRP5(J)) 
      RAT=A*EN+B
      GO TO 566
  565 QIN(97,I)=YTRP5(NTRP5)*(XTRP5(NTRP5)/EN)**2*1.D-16
      RAT=YTP5M(NTRP5)*(XTRP5(NTRP5)/EN)
  566 IF(EN <= (3.0*EIN(97))) GO TO 570
      IF(NANISO == 1):
 PEQIN(97,I)=1.5-RAT
      IF(NANISO == 2):
 PEQIN(97,I)=PEQEL(2,(I-IOFFN(97)))
  570 CONTINUE                                                          
# B3PI (V=4-16)                              
      QIN(98,I)=0.0  
      PEQIN(98,I)=0.5  
      IF(NANISO == 2):
 PEQIN(98,I)=0.0                              
      IF(EN <= EIN(98):
) GO TO 600       
      IF(EN > XTRP6(NTRP6):
) GO TO 595                                
      DO 580 J=2,NTRP6                                                  
      IF(EN <= XTRP6(J):
) GO TO 590                                      
  580 CONTINUE                                                          
      J=NTRP6                                                           
  590 A=(YTRP6(J)-YTRP6(J-1))/(XTRP6(J)-XTRP6(J-1))                     
      B=(XTRP6(J-1)*YTRP6(J)-XTRP6(J)*YTRP6(J-1))/(XTRP6(J-1)-XTRP6(J)) 
      QIN(98,I)=(A*EN+B)*1.D-16                               
      A=(YTP6M(J)-YTP6M(J-1))/(XTRP6(J)-XTRP6(J-1))                     
      B=(XTRP6(J-1)*YTP6M(J)-XTRP6(J)*YTP6M(J-1))/(XTRP6(J-1)-XTRP6(J)) 
      RAT=A*EN+B
      GO TO 596
  595 QIN(98,I)=YTRP6(NTRP6)*(XTRP6(NTRP6)/EN)**2*1.D-16
      RAT=YTP6M(NTRP6)*(XTRP6(NTRP6)/EN)
  596 IF(EN <= (3.0*EIN(98))) GO TO 600
      IF(NANISO == 1):
 PEQIN(98,I)=1.5-RAT
      IF(NANISO == 2):
 PEQIN(98,I)=PEQEL(2,(I-IOFFN(98)))
  600 CONTINUE                                                          
# W3DEL (V=6-10)                             
      QIN(99,I)=0.0
      PEQIN(99,I)=0.5
      IF(NANISO == 2):
 PEQIN(99,I)=0.0                              
      IF(EN <= EIN(99):
) GO TO 603       
      IF(EN > XTRP7(NTRP7):
) GO TO 6025                                
      DO 601 J=2,NTRP7                                                  
      IF(EN <= XTRP7(J):
) GO TO 602                                      
  601 CONTINUE                                                          
      J=NTRP7                                                           
  602 A=(YTRP7(J)-YTRP7(J-1))/(XTRP7(J)-XTRP7(J-1))                     
      B=(XTRP7(J-1)*YTRP7(J)-XTRP7(J)*YTRP7(J-1))/(XTRP7(J-1)-XTRP7(J)) 
      QIN(99,I)=(A*EN+B)*1.D-16                               
      A=(YTP7M(J)-YTP7M(J-1))/(XTRP7(J)-XTRP7(J-1))                     
      B=(XTRP7(J-1)*YTP7M(J)-XTRP7(J)*YTP7M(J-1))/(XTRP7(J-1)-XTRP7(J))
      RAT=A*EN+B
      GO TO 6026
 6025 QIN(99,I)=YTRP7(NTRP7)*(XTRP7(NTRP7)/EN)**2*1.D-16
      RAT=YTP7M(NTRP7)*(XTRP7(NTRP7)/EN)
 6026 IF(EN <= (3.0*EIN(99))) GO TO 603
      IF(NANISO == 1):
 PEQIN(99,I)=1.5-RAT
      IF(NANISO == 2):
 PEQIN(99,I)=PEQEL(2,(I-IOFFN(99)))
  603 CONTINUE                                                          
# A1PI (V=0-3)                                  
      QIN(100,I)=0.0  
      PEQIN(100,I)=0.5    
      IF(NANISO == 2):
 PEQIN(100,I)=0.0                                
      IF(EN <= EIN(100):
) GO TO 630      
      IF(EN > XSNG1(NSNG1):
) GO TO 625                                
      DO 610 J=2,NSNG1                                                  
      IF(EN <= XSNG1(J):
) GO TO 620                                      
  610 CONTINUE                                                          
      J=NSNG1                                                           
  620 A=(YSNG1(J)-YSNG1(J-1))/(XSNG1(J)-XSNG1(J-1))                     
      B=(XSNG1(J-1)*YSNG1(J)-XSNG1(J)*YSNG1(J-1))/(XSNG1(J-1)-XSNG1(J)) 
      QIN(100,I)=(A*EN+B)*1.D-16                           
      A=(YSG1M(J)-YSG1M(J-1))/(XSNG1(J)-XSNG1(J-1))                     
      B=(XSNG1(J-1)*YSG1M(J)-XSNG1(J)*YSG1M(J-1))/(XSNG1(J-1)-XSNG1(J)) 
      RAT=A*EN+B
      GO TO 626
  625 QIN(100,I)=YSNG1(NSNG1)*(XSNG1(NSNG1)/EN)**1.5*1.D-16
      RAT=YSG1M(NSNG1)*(XSNG1(NSNG1)/EN)
  626 IF(EN <= (3.0*EIN(100))) GO TO 630
      IF(NANISO == 1):
 PEQIN(100,I)=1.5-RAT
      IF(NANISO == 2):
 PEQIN(100,I)=PEQEL(2,(I-IOFFN(100)))
  630 CONTINUE                                                          
# B#3SIG (V=0-6)                             
      QIN(101,I)=0.0  
      PEQIN(101,I)=0.5 
      IF(NANISO == 2):
 PEQIN(101,I)=0.0                       
      IF(EN <= EIN(101):
) GO TO 633  
      IF(EN > XTRP8(NTRP8):
) GO TO 6325                        
      DO 631 J=2,NTRP8                                                  
      IF(EN <= XTRP8(J):
) GO TO 632                                      
  631 CONTINUE                                                          
      J=NTRP8                                                           
  632 A=(YTRP8(J)-YTRP8(J-1))/(XTRP8(J)-XTRP8(J-1))                     
      B=(XTRP8(J-1)*YTRP8(J)-XTRP8(J)*YTRP8(J-1))/(XTRP8(J-1)-XTRP8(J)) 
      QIN(101,I)=(A*EN+B)*1.D-16                                
      A=(YTP8M(J)-YTP8M(J-1))/(XTRP8(J)-XTRP8(J-1))                     
      B=(XTRP8(J-1)*YTP8M(J)-XTRP8(J)*YTP8M(J-1))/(XTRP8(J-1)-XTRP8(J)) 
      RAT=A*EN+B
      GO TO 6326
 6325 QIN(101,I)=YTRP8(NTRP8)*(XTRP8(NTRP8)/EN)**2*1.D-16
      RAT=YTP8M(NTRP8)*(XTRP8(NTRP8)/EN)
 6326 IF(EN <= (3.0*EIN(101))) GO TO 633
      IF(NANISO == 1):
 PEQIN(101,I)=1.5-RAT
      IF(NANISO == 2):
 PEQIN(101,I)=PEQEL(2,(I-IOFFN(101)))
  633 CONTINUE                                                          
# A#1SIG (V=0-6)                      
      QIN(102,I)=0.0
      PEQIN(102,I)=0.5    
      IF(NANISO == 2):
 PEQIN(102,I)=0.0                          
      IF(EN <= EIN(102):
) GO TO 660      
      IF(EN > XSNG2(NSNG2):
) GO TO 655                                
      DO 640 J=2,NSNG2                                                  
      IF(EN <= XSNG2(J):
) GO TO 650                                      
  640 CONTINUE                                                          
      J=NSNG2                                                           
  650 A=(YSNG2(J)-YSNG2(J-1))/(XSNG2(J)-XSNG2(J-1))                     
      B=(XSNG2(J-1)*YSNG2(J)-XSNG2(J)*YSNG2(J-1))/(XSNG2(J-1)-XSNG2(J)) 
      QIN(102,I)=(A*EN+B)*1.D-16                       
      A=(YSG2M(J)-YSG2M(J-1))/(XSNG2(J)-XSNG2(J-1))                     
      B=(XSNG2(J-1)*YSG2M(J)-XSNG2(J)*YSG2M(J-1))/(XSNG2(J-1)-XSNG2(J))
      RAT=A*EN+B
      GO TO 656
  655 QIN(102,I)=YSNG2(NSNG2)*(XSNG2(NSNG2)/EN)**1.5*1.D-16
      RAT=YSG2M(NSNG2)*(XSNG2(NSNG2)/EN)
  656 IF(EN <= (3.0*EIN(102))) GO TO 660
      IF(NANISO == 1):
 PEQIN(102,I)=1.5-RAT
      IF(NANISO == 2):
 PEQIN(102,I)=PEQEL(2,(I-IOFFN(102)))
  660 CONTINUE                                                          
# W3DEL (V=11-19)                              
      QIN(103,I)=0.0      
      PEQIN(103,I)=0.5 
      IF(NANISO == 2):
 PEQIN(103,I)=0.0                         
      IF(EN <= EIN(103):
) GO TO 690      
      IF(EN > XTRP9(NTRP9):
) GO TO 685                                
      DO 670 J=2,NTRP9                                                  
      IF(EN <= XTRP9(J):
) GO TO 680                                      
  670 CONTINUE                                                          
      J=NTRP9                                                           
  680 A=(YTRP9(J)-YTRP9(J-1))/(XTRP9(J)-XTRP9(J-1))                     
      B=(XTRP9(J-1)*YTRP9(J)-XTRP9(J)*YTRP9(J-1))/(XTRP9(J-1)-XTRP9(J)) 
      QIN(103,I)=(A*EN+B)*1.D-16                            
      A=(YTP9M(J)-YTP9M(J-1))/(XTRP9(J)-XTRP9(J-1))                     
      B=(XTRP9(J-1)*YTP9M(J)-XTRP9(J)*YTP9M(J-1))/(XTRP9(J-1)-XTRP9(J)) 
      RAT=A*EN+B
      GO TO 686
  685 QIN(103,I)=YTRP9(NTRP9)*(XTRP9(NTRP9)/EN)**2*1.D-16
      RAT=YTP9M(NTRP9)*(XTRP9(NTRP9)/EN)
  686 IF(EN <= (3.0*EIN(103))) GO TO 690
      IF(NANISO == 1):
 PEQIN(103,I)=1.5-RAT
      IF(NANISO == 2):
 PEQIN(103,I)=PEQEL(2,(I-IOFFN(103)))
  690 CONTINUE                                                          
# W1DEL (V=0-5)                               
      QIN(104,I)=0.0
      PEQIN(104,I)=0.5 
      IF(NANISO == 2):
 PEQIN(104,I)=0.0                             
      IF(EN <= EIN(104):
) GO TO 720
      IF(EN > XSNG3(NSNG3):
) GO TO 715                               
      DO 700 J=2,NSNG3                                                  
      IF(EN <= XSNG3(J):
) GO TO 710                                      
  700 CONTINUE                                                          
      J=NSNG3                                                           
  710 A=(YSNG3(J)-YSNG3(J-1))/(XSNG3(J)-XSNG3(J-1))                     
      B=(XSNG3(J-1)*YSNG3(J)-XSNG3(J)*YSNG3(J-1))/(XSNG3(J-1)-XSNG3(J)) 
      QIN(104,I)=(A*EN+B)*1.D-16                                  
      A=(YSG3M(J)-YSG3M(J-1))/(XSNG3(J)-XSNG3(J-1))                     
      B=(XSNG3(J-1)*YSG3M(J)-XSNG3(J)*YSG3M(J-1))/(XSNG3(J-1)-XSNG3(J))
      RAT=A*EN+B
      GO TO 716
  715 QIN(104,I)=YSNG3(NSNG3)*(XSNG3(NSNG3)/EN)**1.5*1.D-16
      RAT=YSG3M(NSNG3)*(XSNG3(NSNG3)/EN)
  716 IF(EN <= (3.0*EIN(104))) GO TO 720
      IF(NANISO == 1):
 PEQIN(104,I)=1.5-RAT
      IF(NANISO == 2):
 PEQIN(104,I)=PEQEL(2,(I-IOFFN(104)))
  720 CONTINUE                                                          
# A1PI (V=4-15)                                 
      QIN(105,I)=0.0      
      PEQIN(105,I)=0.5 
      IF(NANISO == 2):
 PEQIN(105,I)=0.0                         
      IF(EN <= EIN(105):
) GO TO 723      
      IF(EN > XSNG4(NSNG4):
) GO TO 7225                               
      DO 721 J=2,NSNG4                                                  
      IF(EN <= XSNG4(J):
) GO TO 722                                      
  721 CONTINUE                                                          
      J=NSNG4                                                           
  722 A=(YSNG4(J)-YSNG4(J-1))/(XSNG4(J)-XSNG4(J-1))                     
      B=(XSNG4(J-1)*YSNG4(J)-XSNG4(J)*YSNG4(J-1))/(XSNG4(J-1)-XSNG4(J)) 
      QIN(105,I)=(A*EN+B)*1.D-16                             
      A=(YSG4M(J)-YSG4M(J-1))/(XSNG4(J)-XSNG4(J-1))                     
      B=(XSNG4(J-1)*YSG4M(J)-XSNG4(J)*YSG4M(J-1))/(XSNG4(J-1)-XSNG4(J)) 
      RAT=A*EN+B
      GO TO 7226
 7225 QIN(105,I)=YSNG4(NSNG4)*(XSNG4(NSNG4)/EN)**1.5*1.D-16
      RAT=YSG4M(NSNG4)*(XSNG4(NSNG4)/EN)
 7226 IF(EN <= (3.0*EIN(105))) GO TO 723
      IF(NANISO == 1):
 PEQIN(105,I)=1.5-RAT
      IF(NANISO == 2):
 PEQIN(105,I)=PEQEL(2,(I-IOFFN(105)))
  723 CONTINUE                                                          
# B#3SIG   (V=7-18)                             
      QIN(106,I)=0.0
      PEQIN(106,I)=0.5 
      IF(NANISO == 2):
 PEQIN(106,I)=0.0                              
      IF(EN <= EIN(106):
) GO TO 750      
      IF(EN > XTRP10(NTRP10):
) GO TO 745                               
      DO 730 J=2,NTRP10                                               
      IF(EN <= XTRP10(J):
) GO TO 740                                  
  730 CONTINUE                                                          
      J=NTRP10                                                        
  740 A=(YTRP10(J)-YTRP10(J-1))/(XTRP10(J)-XTRP10(J-1))               
      B=(XTRP10(J-1)*YTRP10(J)-XTRP10(J)*YTRP10(J-1))/(XTRP10(J-1)-
     /XTRP10(J)) 
      QIN(106,I)=(A*EN+B)*1.D-16                                 
      A=(YTP10M(J)-YTP10M(J-1))/(XTRP10(J)-XTRP10(J-1))               
      B=(XTRP10(J-1)*YTP10M(J)-XTRP10(J)*YTP10M(J-1))/(XTRP10(J-1)-
     /XTRP10(J)) 
      RAT=A*EN+B
      GO TO 746
  745 QIN(106,I)=YTRP10(NTRP10)*(XTRP10(NTRP10)/EN)**2*1.D-16
      RAT=YTP10M(NTRP10)*(XTRP10(NTRP10)/EN)
  746 IF(EN <= (3.0*EIN(106))) GO TO 750
      IF(NANISO == 1):
 PEQIN(106,I)=1.5-RAT
      IF(NANISO == 2):
 PEQIN(106,I)=PEQEL(2,(I-IOFFN(106)))
  750 CONTINUE                                                          
# A#1SIG (V=7-19)                                   
      QIN(107,I)=0.0
      PEQIN(107,I)=0.5   
      IF(NANISO == 2):
 PEQIN(107,I)=0.0                                 
      IF(EN <= EIN(107):
) GO TO 780          
      IF(EN > XSNG5(NSNG5):
) GO TO 771                           
      DO 760 J=2,NSNG5                                                  
      IF(EN <= XSNG5(J):
) GO TO 770                                      
  760 CONTINUE                                                          
      J=NSNG5                                                           
  770 A=(YSNG5(J)-YSNG5(J-1))/(XSNG5(J)-XSNG5(J-1))                     
      B=(XSNG5(J-1)*YSNG5(J)-XSNG5(J)*YSNG5(J-1))/(XSNG5(J-1)-XSNG5(J)) 
      QIN(107,I)=(A*EN+B)*1.D-16                           
      A=(YSG5M(J)-YSG5M(J-1))/(XSNG5(J)-XSNG5(J-1))                     
      B=(XSNG5(J-1)*YSG5M(J)-XSNG5(J)*YSG5M(J-1))/(XSNG5(J-1)-XSNG5(J)) 
      RAT=A*EN+B
      GO TO 772
  771 QIN(107,I)=YSNG5(NSNG5)*(XSNG5(NSNG5)/EN)**1.5*1.D-16
      RAT=YSG5M(NSNG5)*(XSNG5(NSNG5)/EN)
  772 IF(EN <= (3.0*EIN(107))) GO TO 780
      IF(NANISO == 1):
 PEQIN(107,I)=1.5-RAT
      IF(NANISO == 2):
 PEQIN(107,I)=PEQEL(2,(I-IOFFN(107)))
  780 CONTINUE                                                          
# W1DEL (V=6-18)                          
      QIN(108,I)=0.0
      PEQIN(108,I)=0.5     
      IF(NANISO == 2):
 PEQIN(108,I)=0.0                              
      IF(EN <= EIN(108):
) GO TO 783      
      IF(EN > XSNG6(NSNG6):
) GO TO 7825                               
      DO 781 J=2,NSNG6                                               
      IF(EN <= XSNG6(J):
) GO TO 782                                  
  781 CONTINUE                                                          
      J=NSNG6                                                
  782 A=(YSNG6(J)-YSNG6(J-1))/(XSNG6(J)-XSNG6(J-1))               
      B=(XSNG6(J-1)*YSNG6(J)-XSNG6(J)*YSNG6(J-1))/(XSNG6(J-1)-XSNG6(J)) 
      QIN(108,I)=(A*EN+B)*1.D-16                                 
      A=(YSG6M(J)-YSG6M(J-1))/(XSNG6(J)-XSNG6(J-1))               
      B=(XSNG6(J-1)*YSG6M(J)-XSNG6(J)*YSG6M(J-1))/(XSNG6(J-1)-XSNG6(J)) 
      RAT=A*EN+B
      GO TO 7826
 7825 QIN(108,I)=YSNG6(NSNG6)*(XSNG6(NSNG6)/EN)**1.5*1.D-16
      RAT=YSG6M(NSNG6)*(XSNG6(NSNG6)/EN)
 7826 IF(EN <= (3.0*EIN(108))) GO TO 783
      IF(NANISO == 1):
 PEQIN(108,I)=1.5-RAT
      IF(NANISO == 2):
 PEQIN(108,I)=PEQEL(2,(I-IOFFN(108)))
  783 CONTINUE                                                          
# C3PI (V=0-4)                     
      QIN(109,I)=0.0      
      PEQIN(109,I)=0.5     
      IF(NANISO == 2):
 PEQIN(109,I)=0.0                     
      IF(EN <= EIN(109):
) GO TO 786      
      IF(EN > XTRP11(NTRP11):
) GO TO 7855                               
      DO 784 J=2,NTRP11                                               
      IF(EN <= XTRP11(J):
) GO TO 785                                  
  784 CONTINUE                                                          
      J=NTRP11                                                        
  785 A=(YTRP11(J)-YTRP11(J-1))/(XTRP11(J)-XTRP11(J-1))               
      B=(XTRP11(J-1)*YTRP11(J)-XTRP11(J)*YTRP11(J-1))/(XTRP11(J-1)-
     /XTRP11(J)) 
      QIN(109,I)=(A*EN+B)*1.D-16                                 
      A=(YTP11M(J)-YTP11M(J-1))/(XTRP11(J)-XTRP11(J-1))               
      B=(XTRP11(J-1)*YTP11M(J)-XTRP11(J)*YTP11M(J-1))/(XTRP11(J-1)-
     /XTRP11(J)) 
      RAT=A*EN+B
      GO TO 7856
 7855 QIN(109,I)=YTRP11(NTRP11)*(XTRP11(NTRP11)/EN)**2*1.D-16
      RAT=YTP11M(NTRP11)*(XTRP11(NTRP11)/EN)
 7856 IF(EN <= (3.0*EIN(109))) GO TO 786
      IF(NANISO == 1):
 PEQIN(109,I)=1.5-RAT
      IF(NANISO == 2):
 PEQIN(109,I)=PEQEL(2,(I-IOFFN(109)))
  786 CONTINUE                                                          
# E3SIG                                  
      QIN(110,I)=0.0
      PEQIN(110,I)=0.5   
      IF(NANISO == 2):
 PEQIN(110,I)=0.0                               
      IF(EN <= EIN(110):
) GO TO 789          
      IF(EN > XTRP12(NTRP12):
) GO TO 7885                            
      DO 787 J=2,NTRP12                                                
      IF(EN <= XTRP12(J):
) GO TO 788                                    
  787 CONTINUE                                                         
      J=NTRP12                                                         
  788 A=(YTRP12(J)-YTRP12(J-1))/(XTRP12(J)-XTRP12(J-1))                
      B=(XTRP12(J-1)*YTRP12(J)-XTRP12(J)*YTRP12(J-1))/(XTRP12(J-1)-
     /XTRP12(J)) 
      QIN(110,I)=(A*EN+B)*1.D-16                           
      A=(YTP12M(J)-YTP12M(J-1))/(XTRP12(J)-XTRP12(J-1))                
      B=(XTRP12(J-1)*YTP12M(J)-XTRP12(J)*YTP12M(J-1))/(XTRP12(J-1)-
     /XTRP12(J)) 
      RAT=A*EN+B
      GO TO 7886
 7885 QIN(110,I)=YTRP12(NTRP12)*(XTRP12(NTRP12)/EN)**2*1.D-16
      RAT=YTP12M(NTRP12)*(XTRP12(NTRP12)/EN)
 7886 IF(EN <= (3.0*EIN(110))) GO TO 789
      IF(NANISO == 1):
 PEQIN(110,I)=1.5-RAT
      IF(NANISO == 2):
 PEQIN(110,I)=PEQEL(2,(I-IOFFN(110)))
  789 CONTINUE                                                          
# A##1SIG (V=0-1)                      
      QIN(111,I)=0.0
      PEQIN(111,I)=0.5 
      IF(NANISO == 2):
 PEQIN(111,I)=0.0                                
      IF(EN <= EIN(111):
) GO TO 792 
      IF(EN > XSNG7(NSNG7):
) GO TO 7915                              
      DO 790 J=2,NSNG7                                               
      IF(EN <= XSNG7(J):
) GO TO 791                                  
  790 CONTINUE                                                          
      J=NSNG7                                                
  791 A=(YSNG7(J)-YSNG7(J-1))/(XSNG7(J)-XSNG7(J-1))               
      B=(XSNG7(J-1)*YSNG7(J)-XSNG7(J)*YSNG7(J-1))/(XSNG7(J-1)-XSNG7(J)) 
      QIN(111,I)=(A*EN+B)*1.D-16                                 
      A=(YSG7M(J)-YSG7M(J-1))/(XSNG7(J)-XSNG7(J-1))               
      B=(XSNG7(J-1)*YSG7M(J)-XSNG7(J)*YSG7M(J-1))/(XSNG7(J-1)-XSNG7(J))
      RAT=A*EN+B
      GO TO 7916
 7915 QIN(111,I)=YSNG7(NSNG7)*(XSNG7(NSNG7)/EN)**1.5*1.D-16
      RAT=YSG7M(NSNG7)*(XSNG7(NSNG7)/EN)
 7916 IF(EN <= (3.0*EIN(111))) GO TO 792
      IF(NANISO == 1):
 PEQIN(111,I)=1.5-RAT
      IF(NANISO == 2):
 PEQIN(111,I)=PEQEL(2,(I-IOFFN(111)))
  792 CONTINUE                                                          
# B1PI  (V=0-6)                 F=0.1855           
      QIN(112,I)=0.0
      PEQIN(112,I)=0.5        
      IF(NANISO == 2):
 PEQIN(112,I)=0.0    
      IF(EN <= EIN(112):
) GO TO 795  
      IF(EN > XSNG8(NSNG8):
) GO TO 7945                      
      DO 793 J=2,NSNG8                                               
      IF(EN <= XSNG8(J):
) GO TO 794                                  
  793 CONTINUE                                                          
      J=NSNG8                                                
  794 A=(YSNG8(J)-YSNG8(J-1))/(XSNG8(J)-XSNG8(J-1))               
      B=(XSNG8(J-1)*YSNG8(J)-XSNG8(J)*YSNG8(J-1))/(XSNG8(J-1)-XSNG8(J)) 
      QIN(112,I)=(A*EN+B)*1.D-16                                 
      A=(YSG8M(J)-YSG8M(J-1))/(XSNG8(J)-XSNG8(J-1))               
      B=(XSNG8(J-1)*YSG8M(J)-XSNG8(J)*YSG8M(J-1))/(XSNG8(J-1)-XSNG8(J))
      RAT=A*EN+B
      GO TO 7946
# USE BEF SCALING F=0.1855
 7945 QIN(112,I)=.1855/(EIN(112)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(112)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(112)+E(3))
      RAT=YSG8M(NSNG8)*(XSNG8(NSNG8)/EN)
 7946 IF(EN <= (3.0*EIN(112))) GO TO 795
      IF(NANISO == 1):
 PEQIN(112,I)=1.5-RAT
      IF(NANISO == 2):
 PEQIN(112,I)=PEQEL(2,(I-IOFFN(112)))
  795 CONTINUE                                                          
# C#1SIG (V=0-3)                    F=0.150
      QIN(113,I)=0.0      
      PEQIN(113,I)=0.5  
      IF(NANISO == 2):
 PEQIN(113,I)=0.0                        
      IF(EN <= EIN(113):
) GO TO 798   
      IF(EN > XSNG9(NSNG9):
) GO TO 7975                          
      DO 796 J=2,NSNG9                                               
      IF(EN <= XSNG9(J):
) GO TO 797                                  
  796 CONTINUE                                                          
      J=NSNG9                                               
  797 A=(YSNG9(J)-YSNG9(J-1))/(XSNG9(J)-XSNG9(J-1))               
      B=(XSNG9(J-1)*YSNG9(J)-XSNG9(J)*YSNG9(J-1))/(XSNG9(J-1)-XSNG9(J)) 
      QIN(113,I)=(A*EN+B)*1.D-16                                 
      A=(YSG9M(J)-YSG9M(J-1))/(XSNG9(J)-XSNG9(J-1))               
      B=(XSNG9(J-1)*YSG9M(J)-XSNG9(J)*YSG9M(J-1))/(XSNG9(J-1)-XSNG9(J))
      RAT=A*EN+B
      GO TO 7976
# USE BEF SCALING   F=0.15
 7975 QIN(113,I)=.15000/(EIN(113)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(113)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(113)+E(3))
      RAT=YSG9M(NSNG9)*(XSNG9(NSNG9)/EN)
 7976 IF(EN <= (3.0*EIN(113))) GO TO 798
      IF(NANISO == 1):
 PEQIN(113,I)=1.5-RAT
      IF(NANISO == 2):
 PEQIN(113,I)=PEQEL(2,(I-IOFFN(113)))
  798 CONTINUE                                                          
# G 3PI (V=0-3)                          
      QIN(114,I)=0.0
      PEQIN(114,I)=0.5
      IF(NANISO == 2):
 PEQIN(114,I)=0.0                                 
      IF(EN <= EIN(114):
) GO TO 801      
      IF(EN > XTRP13(NTRP13):
) GO TO 8005                              
      DO 799 J=2,NTRP13                                                
      IF(EN <= XTRP13(J):
) GO TO 800                                    
  799 CONTINUE                                                         
      J=NTRP13                                                         
  800 A=(YTRP13(J)-YTRP13(J-1))/(XTRP13(J)-XTRP13(J-1))                
      B=(XTRP13(J-1)*YTRP13(J)-XTRP13(J)*YTRP13(J-1))/(XTRP13(J-1)-
     /XTRP13(J)) 
      QIN(114,I)=(A*EN+B)*1.D-16                           
      A=(YTP13M(J)-YTP13M(J-1))/(XTRP13(J)-XTRP13(J-1))                
      B=(XTRP13(J-1)*YTP13M(J)-XTRP13(J)*YTP13M(J-1))/(XTRP13(J-1)-
     /XTRP13(J)) 
      RAT=A*EN+B
      GO TO 8006
 8005 QIN(114,I)=YTRP13(NTRP13)*(XTRP13(NTRP13)/EN)**1.5*1.D-16
      RAT=YTP13M(NTRP13)*(XTRP13(NTRP13)/EN)
 8006 IF(EN <= (3.0*EIN(114))) GO TO 801
      IF(NANISO == 1):
 PEQIN(114,I)=1.5-RAT
      IF(NANISO == 2):
 PEQIN(114,I)=PEQEL(2,(I-IOFFN(114)))
  801 CONTINUE                                                          
# C3 1PI (V=0-3)                 F=0.15            
      QIN(115,I)=0.0
      PEQIN(115,I)=0.5  
      IF(NANISO == 2):
 PEQIN(115,I)=0.0                              
      IF(EN <= EIN(115):
) GO TO 804          
      IF(EN > XSNG10(NSNG10):
) GO TO 8035                           
      DO 802 J=2,NSNG10                                              
      IF(EN <= XSNG10(J):
) GO TO 803                                  
  802 CONTINUE                                                          
      J=NSNG10                                               
  803 A=(YSNG10(J)-YSNG10(J-1))/(XSNG10(J)-XSNG10(J-1))               
      B=(XSNG10(J-1)*YSNG10(J)-XSNG10(J)*YSNG10(J-1))/(XSNG10(J-1)-
     /XSNG10(J)) 
      QIN(115,I)=(A*EN+B)*1.D-16                                 
      A=(YSG10M(J)-YSG10M(J-1))/(XSNG10(J)-XSNG10(J-1))               
      B=(XSNG10(J-1)*YSG10M(J)-XSNG10(J)*YSG10M(J-1))/(XSNG10(J-1)-
     /XSNG10(J)) 
      RAT=A*EN+B
      GO TO 8036
# USE BEF SCALING
 8035 QIN(115,I)=.1500/(EIN(115)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(115)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(115)+E(3))
      RAT=YSG10M(NSNG10)*(XSNG10(NSNG10)/EN) 
 8036 IF(EN <= (3.0*EIN(115))) GO TO 804
      IF(NANISO == 1):
 PEQIN(115,I)=1.5-RAT
      IF(NANISO == 2):
 PEQIN(115,I)=PEQEL(2,(I-IOFFN(115)))
  804 CONTINUE                                                          
# F 3PI (V=0-3)                          
      QIN(116,I)=0.0      
      PEQIN(116,I)=0.5   
      IF(NANISO == 2):
 PEQIN(116,I)=0.0                       
      IF(EN <= EIN(116):
) GO TO 807                              
      IF(EN > XTRP14(NTRP14):
) GO TO 8065        
      DO 805 J=2,NTRP14                                                
      IF(EN <= XTRP14(J):
) GO TO 806                                    
  805 CONTINUE                                                         
      J=NTRP14                                                         
  806 A=(YTRP14(J)-YTRP14(J-1))/(XTRP14(J)-XTRP14(J-1))                
      B=(XTRP14(J-1)*YTRP14(J)-XTRP14(J)*YTRP14(J-1))/(XTRP14(J-1)-
     /XTRP14(J)) 
      QIN(116,I)=(A*EN+B)*1.D-16                           
      A=(YTP14M(J)-YTP14M(J-1))/(XTRP14(J)-XTRP14(J-1))                
      B=(XTRP14(J-1)*YTP14M(J)-XTRP14(J)*YTP14M(J-1))/(XTRP14(J-1)-
     /XTRP14(J)) 
      RAT=A*EN+B
      GO TO 8066
 8065 QIN(116,I)=YTRP14(NTRP14)*(XTRP14(NTRP14)/EN)**1.5*1.D-16
      RAT=YTP14M(NTRP14)*(XTRP14(NTRP14)/EN)
 8066 IF(EN <= (3.0*EIN(116))) GO TO 807
      IF(NANISO == 1):
 PEQIN(116,I)=1.5-RAT
      IF(NANISO == 2):
 PEQIN(116,I)=PEQEL(2,(I-IOFFN(116)))
  807 CONTINUE                                                          
# B1PI  (V=7-14)                      F=0.0663
      QIN(117,I)=0.0      
      PEQIN(117,I)=0.5 
      IF(NANISO == 2):
 PEQIN(117,I)=0.0                         
      IF(EN <= EIN(117):
) GO TO 810 
      IF(EN > XSNG11(NSNG11):
) GO TO 8095                          
      DO 808 J=2,NSNG11                                              
      IF(EN <= XSNG11(J):
) GO TO 809                                  
  808 CONTINUE                                                          
      J=NSNG11                                               
  809 A=(YSNG11(J)-YSNG11(J-1))/(XSNG11(J)-XSNG11(J-1))               
      B=(XSNG11(J-1)*YSNG11(J)-XSNG11(J)*YSNG11(J-1))/(XSNG11(J-1)-
     /XSNG11(J)) 
      QIN(117,I)=(A*EN+B)*1.D-16                                 
      A=(YSG11M(J)-YSG11M(J-1))/(XSNG11(J)-XSNG11(J-1))               
      B=(XSNG11(J-1)*YSG11M(J)-XSNG11(J)*YSG11M(J-1))/(XSNG11(J-1)-
     /XSNG11(J)) 
      RAT=A*EN+B
      GO TO 8096
# USE BEF SCALING
 8095 QIN(117,I)=.0663/(EIN(117)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(117)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(117)+E(3))
      RAT=YSG11M(NSNG11)*(XSNG11(NSNG11)/EN) 
 8096 IF(EN <= (3.0*EIN(117))) GO TO 810
      IF(NANISO == 1):
 PEQIN(117,I)=1.5-RAT
      IF(NANISO == 2):
 PEQIN(117,I)=PEQEL(2,(I-IOFFN(117)))
  810 CONTINUE                                                          
# B# 1SIG (V=0-10)                       F=.0601
      QIN(118,I)=0.0      
      PEQIN(118,I)=0.5 
      IF(NANISO == 2):
 PEQIN(118,I)=0.0                         
      IF(EN <= EIN(118):
) GO TO 813 
      IF(EN > XSNG12(NSNG12):
) GO TO 8125                            
      DO 811 J=2,NSNG12                                              
      IF(EN <= XSNG12(J):
) GO TO 812                                  
  811 CONTINUE                                                          
      J=NSNG12                                               
  812 A=(YSNG12(J)-YSNG12(J-1))/(XSNG12(J)-XSNG12(J-1))               
      B=(XSNG12(J-1)*YSNG12(J)-XSNG12(J)*YSNG12(J-1))/(XSNG12(J-1)-
     /XSNG12(J)) 
      QIN(118,I)=(A*EN+B)*1.D-16                                 
      A=(YSG12M(J)-YSG12M(J-1))/(XSNG12(J)-XSNG12(J-1))               
      B=(XSNG12(J-1)*YSG12M(J)-XSNG12(J)*YSG12M(J-1))/(XSNG12(J-1)-
     /XSNG12(J)) 
      RAT=A*EN+B
      GO TO 8126
 8125 QIN(118,I)=.0601/(EIN(118)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(118)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(118)+E(3))
      RAT=YSG12M(NSNG12)*(XSNG12(NSNG12)/EN) 
 8126 IF(EN <= (3.0*EIN(118))) GO TO 813
      IF(NANISO == 1):
 PEQIN(118,I)=1.5-RAT
      IF(NANISO == 2):
 PEQIN(118,I)=PEQEL(2,(I-IOFFN(118)))
  813 CONTINUE                                                          
# O3 1PI (V=0-3)                       F=0.0828
      QIN(119,I)=0.0
      PEQIN(119,I)=0.5  
      IF(NANISO == 2):
 PEQIN(119,I)=0.0                               
      IF(EN <= EIN(119):
) GO TO 816    
      IF(EN > XSNG13(NSNG13):
) GO TO 8155                             
      DO 814 J=2,NSNG13                                              
      IF(EN <= XSNG13(J):
) GO TO 815                                  
  814 CONTINUE                                                          
      J=NSNG13                                               
  815 A=(YSNG13(J)-YSNG13(J-1))/(XSNG13(J)-XSNG13(J-1))               
      B=(XSNG13(J-1)*YSNG13(J)-XSNG13(J)*YSNG13(J-1))/(XSNG13(J-1)-
     /XSNG13(J))  
      QIN(119,I)=(A*EN+B)*1.D-16                                 
      A=(YSG13M(J)-YSG13M(J-1))/(XSNG13(J)-XSNG13(J-1))               
      B=(XSNG13(J-1)*YSG13M(J)-XSNG13(J)*YSG13M(J-1))/(XSNG13(J-1)-
     /XSNG13(J))  
      RAT=A*EN+B
      GO TO 8156
# USE BEF SCALING
 8155 QIN(119,I)=.0828/(EIN(119)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(119)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(119)+E(3))
      RAT=YSG13M(NSNG13)*(XSNG12(NSNG13)/EN) 
 8156 IF(EN <= (3.0*EIN(119))) GO TO 816
      IF(NANISO == 1):
 PEQIN(119,I)=1.5-RAT
      IF(NANISO == 2):
 PEQIN(119,I)=PEQEL(2,(I-IOFFN(119)))
  816 CONTINUE   
# C# 1SIG  (SUM V=4-6) (AVERAGE E=14.090)  F=0.139
      QIN(120,I)=0.0
      PEQIN(120,I)=0.5  
      IF(NANISO == 2):
 PEQIN(120,I)=0.0                            
      IF(EN <= EIN(120):
) GO TO 819    
      IF(EN > XSNG14(NSNG14):
) GO TO 8185                             
      DO 817 J=2,NSNG14                                              
      IF(EN <= XSNG14(J):
) GO TO 818                                  
  817 CONTINUE                                                          
      J=NSNG14                                               
  818 A=(YSNG14(J)-YSNG14(J-1))/(XSNG14(J)-XSNG14(J-1))               
      B=(XSNG14(J-1)*YSNG14(J)-XSNG14(J)*YSNG14(J-1))/(XSNG14(J-1)-
     /XSNG14(J)) 
      QIN(120,I)=(A*EN+B)*1.D-16                                 
      A=(YSG14M(J)-YSG14M(J-1))/(XSNG14(J)-XSNG14(J-1))               
      B=(XSNG14(J-1)*YSG14M(J)-XSNG14(J)*YSG14M(J-1))/(XSNG14(J-1)-
     /XSNG14(J)) 
      RAT=A*EN+B
      GO TO 8186
# USE BEF SCALING
 8185 QIN(120,I)=0.1390/(EIN(120)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(120)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(120)+E(3))
      RAT=YSG14M(NSNG14)*(XSNG14(NSNG14)/EN) 
 8186 IF(EN <= (3.0*EIN(120))) GO TO 819
      IF(NANISO == 1):
 PEQIN(120,I)=1.5-RAT
      IF(NANISO == 2):
 PEQIN(120,I)=PEQEL(2,(I-IOFFN(120)))
  819 CONTINUE                                                          
#    
# B# 1SIG  (V=11-24)                 
      QIN(121,I)=0.0
      PEQIN(121,I)=0.5
      IF(NANISO == 2):
 PEQIN(121,I)=0.0                                
      IF(EN <= EIN(121):
) GO TO 829    
      IF(EN > XSNG15(NSNG15):
) GO TO 8285                             
      DO 827 J=2,NSNG15                                             
      IF(EN <= XSNG15(J):
) GO TO 828                                  
  827 CONTINUE                                                          
      J=NSNG15                                               
  828 A=(YSNG15(J)-YSNG15(J-1))/(XSNG15(J)-XSNG15(J-1))               
      B=(XSNG15(J-1)*YSNG15(J)-XSNG15(J)*YSNG15(J-1))/(XSNG15(J-1)-
     /XSNG15(J)) 
      QIN(121,I)=(A*EN+B)*1.D-16                                 
      A=(YSG15M(J)-YSG15M(J-1))/(XSNG15(J)-XSNG15(J-1))               
      B=(XSNG15(J-1)*YSG15M(J)-XSNG15(J)*YSG15M(J-1))/(XSNG15(J-1)-
     /XSNG15(J)) 
      RAT=A*EN+B
      GO TO 8286
# USE BEF SCALING                           F=0.265
 8285 QIN(121,I)=0.2650/(EIN(121)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(121)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(121)+E(3))
      RAT=YSG15M(NSNG15)*(XSNG15(NSNG15)/EN) 
 8286 IF(EN <= (3.0*EIN(121))) GO TO 829
      IF(NANISO == 1):
 PEQIN(121,I)=1.5-RAT
      IF(NANISO == 2):
 PEQIN(121,I)=PEQEL(2,(I-IOFFN(121)))
  829 CONTINUE                                                          
# E# 1SIG     ELOSS=14.36EV    F=0.0108   
      QIN(122,I)=0.0      
      PEQIN(122,I)=0.5  
      IF(NANISO == 2):
 PEQIN(122,I)=0.0               
      IF(EN <= EIN(122):
) GO TO 895    
# USE BEF SCALING
      QIN(122,I)=0.0108/(EIN(122)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(122)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(122)+E(3))
      IF(QIN(122,I):
 < 0.0) QIN(122,I)=0.0
# 
      PEQIN(122,I)=PEQIN(121,I)
  895 CONTINUE
# E 1PI     ELOSS=14.45EV    F=0.0237   
      QIN(123,I)=0.0      
      PEQIN(123,I)=0.5                
      IF(NANISO == 2):
 PEQIN(123,I)=0.0 
      IF(EN <= EIN(123):
) GO TO 896    
# USE BEF SCALING
      QIN(123,I)=0.0237/(EIN(123)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(123)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(123)+E(3))
      IF(QIN(123,I):
 < 0.0) QIN(123,I)=0.0
# 
      PEQIN(123,I)=PEQIN(121,I)
  896 CONTINUE
# SINGLET     ELOSS=14.839EV   F=0.0117   
      QIN(124,I)=0.0      
      PEQIN(124,I)=0.5                
      IF(NANISO == 2):
 PEQIN(124,I)=0.0 
      IF(EN <= EIN(124):
) GO TO 897    
# USE BEF SCALING
      QIN(124,I)=0.0117/(EIN(124)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(124)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(124)+E(3))
      IF(QIN(124,I):
 < 0.0) QIN(124,I)=0.0
# 
      PEQIN(124,I)=PEQIN(121,I)
  897 CONTINUE
# SUM OF HIGH  ENERGY SINGLETS        ELOSS=15.20EV    F=0.1152   
      QIN(125,I)=0.0      
      PEQIN(125,I)=0.5                
      IF(NANISO == 2):
 PEQIN(125,I)=0.0 
      IF(EN <= EIN(125):
) GO TO 898    
# USE BEF SCALING
      QIN(125,I)=0.1152/(EIN(125)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(125)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(125)+E(3))
      IF(QIN(125,I):
 < 0.0) QIN(125,I)=0.0
# 
      PEQIN(125,I)=PEQIN(121,I)
  898 CONTINUE
# SUM NEUTRAL BREAKUP ABOVE IONISATION ENERGY  F=0.160
      QIN(126,I)=0.0      
      PEQIN(126,I)=0.5                
      IF(NANISO == 2):
 PEQIN(126,I)=0.0 
      IF(EN <= (E(3):
)) GO TO 899    
# USE BORN SCALING AND FACTOR TO GIVE TRIPLET+DIPOLE CONTRIBUTION
      QIN(126,I)=0.1600/(EIN(126)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(126)))-BETA2-DEN(I)/2.0)*BBCONST*(EN+2.0*EIN(126))/EN 
      IF(QIN(126,I):
 < 0.0) QIN(126,I)=0.0
      PEQIN(126,I)=PEQIN(121,I)
# SUM NEUTRAL BREAKUP ABOVE IONISATION ENERGY  F=0.090
  899 QIN(127,I)=0.0      
      PEQIN(127,I)=0.5                
      IF(NANISO == 2):
 PEQIN(127,I)=0.0 
      IF(EN <= (E(3):
)) GO TO 8999   
# USE BORN SCALING AND FACTOR TO GIVE TRIPLET+DIPOLE CONTRIBUTION
      QIN(127,I)=0.0900/(EIN(127)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(127)))-BETA2-DEN(I)/2.0)*BBCONST*(EN+2.0*EIN(127))/EN 
      IF(QIN(127,I):
 < 0.0) QIN(127,I)=0.0
      PEQIN(127,I)=PEQIN(121,I)
 8999 CONTINUE
# LOAD BREMSSTRAHLUNG X-SECTION
      QIN(128,I)=0.0
      IF(EN <= 1000.):
 GO TO 8969
      DO 8961 J=2,NBREM
      IF(EN <= EBRM(J):
) GO TO 8962
 8961 CONTINUE
      J=NBREM
 8962 A=(math.log(Z7T(J))-math.log(Z7T(J-1)))/(EBRM(J)-EBRM(J-1))
      B=(math.log(Z7T(J))*EBRM(J-1)-math.log(Z7T(J-1))*EBRM(J))/
     /(EBRM(J-1)-EBRM(J))
      QIN(128,I)=math.exp(A*EN+B)*2.D-24
 8969 CONTINUE                                                          
# ROTATIONAL SUM                                                        
      SUMR=0.0                                                       
      DO 8990 K=1,76                                     
      SUMR=SUMR+QIN(K,I)                                              
 8990 CONTINUE 
#  VIBRATIONAL SUM
      SUMV=0
      DO 8991 K=77,92
      SUMV=SUMV+QIN(K,I)
 8991 CONTINUE
# EXCITATION SUM
      SUMEX=0.0
      DO 8992 K=93,111  
      SUMEX=SUMEX+QIN(K,I)   
 8992 CONTINUE                                                          
# EXCITATION SUM
      SUMEX1=0.0
      DO 8993  K=112,127
      SUMEX1=SUMEX1+QIN(K,I)   
 8993 CONTINUE                                                          
# GET CORRECT ELASTIC XSECTION BY SUBTRACTION OF ROTATION
      Q(2,I)=Q(2,I)-SUMR
# FOR VERY HIGH TEMPERATURES SOMETIMES SUMR BECOMES LARGER THAN
# THE ELASTIC+ROT (ONLY IN FIRST TWO ENERGY BINS) FIX GT 0
      IF(Q(2,I):
 <= 0.0) :
       Q(2,I)=0.95D-16
      # endIF
      Q(1,I)=Q(2,I)+Q(5,I)+QION(2,I)+SUMR+SUMV+SUMEX+SUMEX1           
#     Q(1,I)=Q(2,I)+Q(5,I)+QION(2,I)+SUMR+SUMV+SUMEX+SUMEX1+QIN(127,I)
# CAN PRINT OUT X-SECTION DATA
#     SUMR=SUMR*1.D16
#     SUMV=SUMV*1.D16
#     SUMEX=SUMEX*1.D16
#     SUMEX1=SUMEX1*1.D16
#     SUMVEX=SUMV+SUMEX+SUMEX1
#     SUMVEXI=SUMVEX+Q(5,I)*1.D16
#     WRITE(6,8769) EN,SUMR,SUMV,SUMEX,SUMEX1,SUMVEX,SUMVEXI
#8769 FORMAT(' EN=',F8.3,' SUMR=',F8.3,' SUMV=',F8.3,' SUMEX=',F8.3,' SU
#    /MEX1=',F8.3,' SUMVEX=',F8.3,' TOT=',F8.3)
#     WRITE(6,8770) EN,QION(1,I),QION(2,I),Q(5,I)
#8770 FORMAT(' EN=',D12.4,' QION1=',D12.4,' QION2=',D12.4,' Q5=',D12.4)
# PRINT IONISATION DATA
#     SUMN2P=QION(1,I)+QION(2,I)+QION(3,I)+QION(4,I)+QION(5,I)+QION(6,I)
#    /+QION(7,I)
#     SUMNP=QION(8,I)+QION(9,I)+QION(10,I)
#     SUMITOT=SUMNP+SUMN2P+QION(11,I)+QION(12,I)
#     WRITE(6,8771) EN,SUMN2P,SUMNP,QION(11,I),QION(12,I),SUMITOT
#8771 FORMAT(' EN=',D12.4,' N2+ =',D12.4,' N++ =',D12.4,' N+,N+=',D12.4,
#    /' KSHELL=',D12.4,' TOT=',D12.4) 
#     WRITE(6,8772) EN,( QION(J,I),J=1,12)
#8772 FORMAT(' EN=',D12.4,/,2X,6(D12.4,2X),/,2X,(6D12.4,2X))
  900 CONTINUE         
#     STOP                                                 
# SAVE COMPUTE TIME                                                     
      DO 1000 K=1,127                                                   
      J=128-K                                                           
      IF(EFINAL <= EIN(J):
) NIN=J-1                                      
 1000 CONTINUE
      IF(NIN < 77):
 NIN=77 
#     IF(EFINAL > 1000.) NIN=128
#                                                                       
      RETURN                                                            
      # end                                                               
      def GAS17(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)       
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      DIMENSION XEN(58),YXSEC(58),XION(48),YION(48),XATT(23),YATT(23),  
     /XROT1(18),YROT1(18),XVIB1(24),YVIB1(24),XVIB2(23),YVIB2(23),      
     /XEXC1(32),YEXC1(32),
     /XAT3(18),YAT3(18)
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME                                                 
      DATA XEN/0.00,.005,.007,0.01,.012,.015,0.02,0.03,0.04,0.05,       
     /0.06,0.07,0.08,0.09,0.10,0.12,0.15,0.20,0.30,0.40,                
     /0.50,0.60,0.70,0.80,0.90,1.00,1.20,1.50,2.00,3.00,                
     /4.00,5.00,6.00,7.00,8.00,9.00,10.0,12.0,15.0,20.0,                
     /30.0,40.0,50.0,60.0,70.0,80.0,90.0,100.,120.,150.,                
     /200.,300.,400.,500.,1000.,2000.,10000.,100000./
      DATA YXSEC/32.0,30.8,29.8,27.8,25.5,22.1,20.0,15.7,13.3,11.2,     
     /10.0,9.25,8.63,8.34,8.24,8.00,6.73,6.00,6.00,6.14,                
     /6.50,6.88,7.70,8.25,8.95,9.78,10.6,13.3,13.6,12.8,                
     /10.2,9.78,8.45,7.10,6.10,5.20,4.75,4.10,2.85,1.85,                
     /1.12,0.82,0.59,0.49,0.39,0.32,0.28,0.24,0.18,0.14,                
     /0.09,0.05,.035,.025,0.01,.004,.0005,.0001/
      DATA XION/9.2644,9.50,10.0,10.5,11.0,11.5,12.0,12.5,13.0,13.5,    
     /14.0,15.0,16.0,17.0,18.0,19.0,20.0,22.0,24.0,26.0,                
     /28.0,32.0,36.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,
     /100.,120.,140.,160.,200.,300.,400.,500.,600.,700.,
     /800.,900.,1000.,2000.,4000.,10000.,20000.,100000./                
      DATA YION/0.00,.011,.018,.031,.047,.064,.093,.131,.184,.244,      
     /.305,.418,.503,.585,.663,.736,.813,.959,1.11,1.26,                
     /1.40,1.65,1.87,2.08,2.30,2.48,2.74,2.91,3.04,3.11,                
     /3.14,3.14,3.10,3.04,2.86,2.45,2.11,1.86,1.67,1.51,
     /1.39,1.27,1.21,0.80,0.45,0.23,0.14,.035/
      DATA XATT/6.50,6.80,7.00,7.20,7.40,7.60,7.80,8.00,8.60,8.80,      
     /9.00,9.20,9.40,9.60,9.80,10.0,10.4,10.6,10.8,11.0,
     /11.5,13.0,14.0/
      DATA YATT/0.00,0.02,0.08,0.33,0.71,0.96,1.08,1.11,1.11,1.09,      
     /1.04,0.95,0.83,0.65,0.51,0.38,0.18,0.11,0.08,0.06,                
     /0.04,0.03,0.00/
      DATA XAT3/0.01,.012,.015,0.02,0.03,0.04,0.05,0.06,0.07,0.08,      
     /0.09,0.10,0.12,0.15,0.20,0.30,1.00,10.0/
      DATA YAT3/0.00,.085,0.24,0.14,0.07,.041,.029,.023,.019,.017,      
     /.015,.014,.013,.012,.010,.0085,.0035,0.00/                        
      DATA XROT1/.100,0.12,0.15,0.20,0.30,0.40,0.50,0.60,0.70,0.80,     
     /0.90,1.00,1.20,1.50,2.00,10.0,100.,100000./                       
      DATA YROT1/0.00,.037,.037,.033,.026,.018,.014,.011,.009,.006,     
     /.005,.004,.003,.002,.001,.0001,.00001,.000001/                    
      DATA XVIB1/.2326,0.24,0.25,0.30,0.40,0.50,0.60,0.70,0.80,0.90,    
     /1.00,1.20,1.50,2.00,3.00,4.00,5.00,6.00,7.00,8.00,                
     /10.0,20.0,100.,100000./                                           
      DATA YVIB1/0.00,0.05,0.08,0.10,0.08,0.06,0.05,0.04,.032,.027,     
     /.023,.018,.012,.008,.004,.002,.0015,.0012,.001,.0008,             
     /.0005,.0001,.00002,.000001/                                       
      DATA XVIB2/0.60,0.63,0.70,0.80,0.90,1.00,1.20,1.50,2.00,3.00,     
     /4.00,5.00,6.00,7.00,8.00,10.0,15.0,20.0,40.0,60.0,                
     /100.,1000.,100000./
      DATA YVIB2/0.00,0.60,0.90,0.90,0.85,0.80,0.70,0.50,0.31,0.16,     
     /0.11,.075,.055,.042,.035,.025,.012,.008,.002,.001,                
     /.0005,.00005,.000005/
      DATA XEXC1/6.10,6.50,7.00,7.50,8.00,8.50,9.00,10.0,12.0,15.0,     
     /20.0,30.0,40.0,50.0,60.0,70.0,80.0,90.0,100.,120.,                
     /150.,200.,300.,400.,500.,1000.,2000.,4000.,10000.,20000.,         
     /40000.,100000./
      DATA YEXC1/0.00,0.01,0.02,.085,0.20,0.55,0.70,1.00,1.65,2.21,     
     /3.30,3.50,3.30,3.00,2.65,2.26,2.16,2.00,1.80,1.60,                
     /1.40,1.03,0.85,0.65,0.52,0.25,0.13,0.06,.025,.012,                
     /.0065,.0025/
      NAME='NO      1995   '                                            
# --------------------------------------------------------------------- 
# CALCULATE CORRECTION FACTOR FOR 3BODY ATTACHMENT CROSS-SECTION
      FAC=273.15*TORR/((TEMPC+273.15)*760.0)
#---------------------------------------------
#     WRITE(6,100)
# 100 FORMAT(1H1)
#     WRITE(6,100) FAC
# 101 FORMAT(' 3BODY ATTACHMENT INCLUDED DENSITY SCALING FACTOR =',F7.4)
# 
      NION=1
      NATT=1
      NIN=4 
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0                                                          
      NDATA=58                                                          
      NIOND=48                                                          
      NATT1=23                                                          
      NAT3=18
      NROT1=18
      NVIB1=24                                                          
      NVIB2=23                                                          
      NEXC1=32                                                          
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(30.00614*AMU)                                     
      E(3)=9.2644                                                       
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
      EOBY(1)=13.6                                                     
      EIN(1)=0.100                                                      
      EIN(2)=0.2326                                                     
      EIN(3)=0.600
      EIN(4)=6.10
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       NITRIC OXIDE   '
      SCRPT(3)=' IONISATION    ELOSS=  9.2644 '
      SCRPT(4)=' ATTACHMENT 2+3 BODY          '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      SCRPT(7)=' ROT           ELOSS=  0.100  ' 
      SCRPT(8)=' VIB V1        ELOSS=  0.2326 '
      SCRPT(9)=' VIB SUM       ELOSS=  0.600  '
      SCRPT(10)=' EXC           ELOSS=  6.10   '                        
      EN=-ESTEP/2.0                                      
      DO 1000 I=1,NSTEP                                              
      EN=EN+ESTEP                                                       
      DO 10 J=2,NDATA                                                   
      IF(EN <= XEN(J):
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA                                                           
   20 A=(YXSEC(J)-YXSEC(J-1))/(XEN(J)-XEN(J-1))                         
      B=(XEN(J-1)*YXSEC(J)-XEN(J)*YXSEC(J-1))/(XEN(J-1)-XEN(J))         
      Q(2,I)=(A*EN+B)*1.0D-16                                           
      Q(3,I)=0.0                                                        
      IF(EN < E(3):
) GO TO 200                                          
      DO 110 J=2,NIOND                                                  
      IF(EN <= XION(J):
) GO TO 120                                       
  110 CONTINUE                                                          
      J=NIOND                                                 
  120 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.D-16                                            
  200 Q(4,I)=0.0
      QATT(1,I)=Q(4,I)                                                
      SINGLE=0.0
      IF(EN < XATT(1):
) GO TO 250                                       
      IF(EN > XATT(NATT1):
) GO TO 250                                  
      DO 210 J=2,NATT1                                                  
      IF(EN <= XATT(J):
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NATT1                                                           
  220 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))                         
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))       
      SINGLE=(A*EN+B)*1.D-18                                            
  250 THREEB=0.0
      IF(EN < XAT3(1):
) GO TO 300
      IF(EN > XAT3(NAT3):
) GO TO 300
      DO 260 J=2,NAT3
      IF(EN <= XAT3(J):
) GO TO 270
  260 CONTINUE
      J=NAT3
  270 A=(YAT3(J)-YAT3(J-1))/(XAT3(J)-XAT3(J-1))                         
      B=(XAT3(J-1)*YAT3(J)-XAT3(J)*YAT3(J-1))/(XAT3(J-1)-XAT3(J))       
      THREEB=FAC*(A*EN+B)*1.D-16                                        
      Q(4,I)=SINGLE+THREEB
      QATT(1,I)=Q(4,I)
  300 Q(5,I)=0.0                                                        
      Q(6,I)=0.0                                                        
#                                                                       
      QIN(1,I)=0.0                                                      
      IF(EN <= EIN(1):
) GO TO 400                                        
      DO 310 J=2,NROT1                                                  
      IF(EN <= XROT1(J):
) GO TO 320                                      
  310 CONTINUE                                                          
      J=NROT1                                                           
  320 A=(YROT1(J)-YROT1(J-1))/(XROT1(J)-XROT1(J-1))                     
      B=(XROT1(J-1)*YROT1(J)-XROT1(J)*YROT1(J-1))/(XROT1(J-1)-XROT1(J)) 
      QIN(1,I)=(A*EN+B)*1.D-16                                          
  400 CONTINUE                                                          
      QIN(2,I)=0.0                                                      
      IF(EN <= EIN(2):
) GO TO 500                                        
      DO 410 J=2,NVIB1                                                  
      IF(EN <= XVIB1(J):
) GO TO 420                                      
  410 CONTINUE                                                          
      J=NVIB1                                                           
  420 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J)) 
      QIN(2,I)=(A*EN+B)*1.D-16                                          
  500 CONTINUE                                                          
      QIN(3,I)=0.0                                                      
      IF(EN <= EIN(3):
) GO TO 600                                        
      DO 510 J=2,NVIB2                                                  
      IF(EN <= XVIB2(J):
) GO TO 520                                      
  510 CONTINUE                                                          
      J=NVIB2                                                           
  520 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J)) 
      QIN(3,I)=(A*EN+B)*1.D-16                                          
  600 CONTINUE                                                          
      QIN(4,I)=0.0                                                      
      IF(EN <= EIN(4):
) GO TO 700                                        
      DO 610 J=2,NEXC1                                                  
      IF(EN <= XEXC1(J):
) GO TO 620                                      
  610 CONTINUE                                                          
      J=NEXC1                                                           
  620 A=(YEXC1(J)-YEXC1(J-1))/(XEXC1(J)-XEXC1(J-1))                     
      B=(XEXC1(J-1)*YEXC1(J)-XEXC1(J)*YEXC1(J-1))/(XEXC1(J-1)-XEXC1(J)) 
      QIN(4,I)=(A*EN+B)*1.D-16                                          
  700 CONTINUE                                                          
#                                                                       
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)+QIN(1,I)+QIN(2,I)+QIN(3,I)+QIN(4,I)   
 1000 CONTINUE                                                          
#  SAVE COMPUTE TIME                                                    
      IF(EFINAL <= EIN(4):
) NIN=3                                        
      IF(EFINAL <= EIN(3):
) NIN=2                                        
      IF(EFINAL <= EIN(2):
) NIN=1                                        
      IF(EFINAL <= EIN(1):
) NIN=0                                        
      RETURN                                                            
      # end                                                               
      def GAS18(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6) 
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)        
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250],
     /PJ(60)    
      DIMENSION XEN(69),YXSEC(69),XION(47),YION(47),XATT(51),YATT(51),  
     /XEXC1(28),YEXC1(28),XEXC2(24),YEXC2(24),XEXC3(25),YEXC3(25),
     /XVIBH(19),YVIBH(19),XVIBR(19),YVIBR(19)
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME    
# ELASTIC +ROTATION MOMENTUM TRANSFER                                                   
      DATA XEN/0.00,0.001,.0034,0.01,.012,.014,.017,0.02,.025,0.03,     
     /0.04,0.05,0.06,0.07,0.08,0.09,0.10,0.12,0.14,0.17,                
     /0.20,0.25,0.30,0.35,0.40,0.50,0.60,0.70,0.80,1.00,          
     /1.20,1.40,1.60,1.80,2.00,2.20,2.40,2.60,3.00,4.00,                
     /5.00,6.00,7.00,8.00,9.00,10.0,12.0,14.0,17.0,20.0,                
     /25.0,30.0,40.0,50.0,60.0,70.0,80.0,90.0,100.,140.,
     /200.,250.,300.,400.,500.,700.,1000.,10000.,100000./
      DATA YXSEC/180.,150.,105.,54.5,48.5,43.5,39.0,35.2,30.5,27.3,     
     /22.6,19.8,17.5,15.5,13.4,12.1,10.8,8.90,7.55,6.10,                
     /5.20,4.20,3.70,3.35,3.20,3.10,3.15,3.25,3.35,3.65,
     /4.30,5.00,6.30,8.70,10.2,11.5,12.0,11.5,10.2,8.90,                
     /8.60,9.00,9.50,10.2,10.7,11.1,11.4,11.1,10.0,8.81,                
     /7.31,6.44,5.21,4.40,3.81,3.41,2.88,2.65,2.33,1.59,
     /1.14,0.88,0.73,0.50,0.38,0.25,0.16,0.016,0.0016/
# IONISATION     
      DATA XION/12.886,14.0,14.5,15.0,16.0,17.0,18.0,20.0,21.0,22.5,    
     /25.0,30.0,35.0,40.0,45.0,50.0,55.0,60.0,70.0,80.0,                
     /90.0,100.,110.,120.,140.,160.,200.,250.,300.,350.,
     /400.,450.,500.,600.,700.,800.,900.,1000.,1500.,2000.,
     /3000.,4000.,6000.,10000.,20000.,40000.,100000./
      DATA YION/0.00,.065,.135,.175,.255,.330,.414,.602,0.72,0.877,     
     /1.16,1.61,2.03,2.34,2.61,2.82,3.02,3.18,3.46,3.63,                
     /3.71,3.76,3.77,3.76,3.73,3.63,3.44,3.17,2.94,2.72,                
     /2.51,2.36,2.22,1.95,1.77,1.62,1.49,1.42,1.05,0.83,   
     /0.60,0.48,0.34,.218,.119,.065,.028/
# ATACHMENT
      DATA XATT/0.20,0.25,0.30,0.40,0.50,0.60,0.70,0.80,0.90,1.00,
     /1.10,1.20,1.30,1.40,1.50,1.60,1.70,1.80,1.90,2.00,  
     /2.10,2.20,2.30,2.40,2.50,2.60,2.70,2.80,2.90,3.00,
     /3.10,3.20,3.30,3.40,3.50,3.60,3.70,3.80,3.90,4.00,
     /4.30,5.00,6.00,7.00,8.00,9.00,10.0,11.0,12.0,14.0,
     /16.0/                     
      DATA YATT/0.00,0.01,0.02,0.25,0.90,1.12,1.16,1.23,1.35,1.45,
     /1.52,1.61,1.70,1.76,2.05,2.29,2.92,3.59,4.48,5.35,                
     /6.02,6.58,6.58,6.18,5.45,4.60,3.72,2.75,2.00,1.48,
     /1.07,0.75,0.48,0.36,0.27,0.22,0.17,0.15,0.13,0.10,
     /0.08,0.08,0.09,0.12,0.23,0.34,0.57,0.69,0.46,0.15,
     /0.00/
# VIBRATIONS     
      DATA XVIBH/.073,1.00,1.20,1.40,1.60,1.80,2.00,2.20,2.40,2.60,
     /2.80,3.00,3.20,3.40,3.60,3.80,4.00,10.0,100000./  
      DATA YVIBH/0.00,.022,.062,.144,.291,.500,.735,.927,1.00,.927,
     /.735,.500,.291,.144,.062,.022,.007,.000001,.000000001/
      DATA XVIBR/.073,5.20,5.60,6.00,6.40,6.80,7.20,7.60,8.00,8.40,
     /8.80,9.20,9.60,10.0,10.4,10.8,11.2,15.0,100000./ 
      DATA YVIBR/0.00,.006,0.02,.065,.174,.375,.644,.896,1.00,.896,
     /.644,.375,.174,.065,0.02,.006,.001,.000001,.000000001/
# EXCITATIONS           
      DATA XEXC1/4.06,4.50,5.00,6.00,7.00,8.00,9.00,10.0,12.0,14.0,     
     /17.0,20.0,25.0,30.0,40.0,50.0,60.0,70.0,80.0,90.0,                
     /100.,140.,200.,300.,500.,1000.,10000.,100000./                    
      DATA YEXC1/0.00,0.55,0.83,0.93,0.93,0.84,0.78,0.69,0.60,0.50,     
     /0.42,0.34,0.26,0.21,0.15,0.12,0.10,0.08,0.07,0.06,                
     /0.05,.034,.022,.014,.008,.004,.0004,.00004/                       
      DATA XEXC2/8.50,9.00,10.0,12.0,14.0,17.0,20.0,25.0,30.0,40.0,     
     /50.0,60.0,70.0,80.0,100.,140.,200.,300.,400.,500.,                
     /700.,1000.,10000.,100000./
      DATA YEXC2/0.00,.016,.048,0.12,0.22,0.34,0.47,0.62,0.73,0.81,     
     /0.75,0.64,0.57,0.48,0.36,0.26,0.17,0.12,.083,.067,                
     /.046,.034,.003,.0003/                                             
      DATA XEXC3/9.60,10.0,12.0,14.0,17.0,20.0,25.0,30.0,40.0,50.0,     
     /60.0,70.0,80.0,90.0,100.,140.,200.,250.,300.,400.,                
     /500.,700.,1000.,10000.,100000./
      DATA YEXC3/0.00,.036,0.26,0.76,1.44,2.23,3.20,3.87,4.40,4.40,     
     /3.81,3.41,2.88,2.65,2.33,1.59,1.14,0.88,0.76,0.56,                
     /0.44,0.33,0.25,.025,.0025/                                        
      NAME='N2O     2004   '                                            
# ---------------------------------------------------------------------- 
# DRIFT DIFFUSION AND TOWNS# end EXP DATA: 
#  PACK VOSHALL AND PHELPS   PHYS.REV. 127 (1962) 2084
#  YOSHIDA SASAKI ET AL      J.PHYS.D  32  (1999) 862
#
# UPDATE OF HAYASHI X-SECTIONS INCLUDING NEW X-SECTION MEASUREMENTS BY:
#  KITAJIMA SAKAMOTO GULLEY BUCKMAN ET AL   J.PHYS.B 33(2000) 1687
#        AKTHER ET AL                       J.PHYS.B 35(2002) L481
# ---------------------------------------------------------------------
#  MOD OF 2003 DATA TO INCLUDE DIPOLE ROTATIONAL TRANSITIONS.
#  USED LINEAR UNSYMMETRIC ROTOR MODEL.
#  USED ANISOTROPIC ANGULAR BORN DIPOLE ROTATIONAL SCATTERING 
# ---------------------------------------------------------------------
#   SCALEAT = SCALE FACTOR TO ALLOW FOR DEATTACHMENT COLLISIONS
#             SET SCALE =0.0 FOR COMPLETE DEATTACHMENT
#             SET SCALE =1.0 FOR NO DEATTACHMENT
# ---------------------------------------------------------------------
      SCALEAT=1.0
#      
      AMPV2=0.06
      AMPV1=0.24
      AMPV3=0.12
      AMPV3=0.18
      ARESV2=2.65
      ARESV1=2.55
      ARESV3=0.30
      ARES2V1=0.95
      ARESVR=0.62
#
      NION=1
      NATT=1
      NIN=131
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
      KIN(J)=0
    2 IF(J <= 120) KIN(J)=1                                             
      NDATA=69                                                          
      NIOND=47                                                          
      NATT1=51                                                          
      NVIBH=19
      NVIBR=19
      NEXC1=28                                                          
      NEXC2=24                                                          
      NEXC3=25
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(44.01288*AMU)                                     
      E(3)=12.886                                                       
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
      EOBY(1)=12.886
#  B0 IS ROTATIONAL CONSTANT AND DBA IS DIPOLE MOMENT
#  DRAT IS RATIO OF MOMENTUM TRANSFER TO TOTAL X-SECTION FOR DIPOLE 
# -------------------------------------------------------------------- 
      B0=5.185D-5
      DBA=0.06326
      DRAT=0.25
      A0=0.5291772083D-8
      RY=13.60569172
      DBK=8.37758*RY*(DBA*A0)**2
# --------------------------------------------------------------
#  CALCULATE ROTATIONAL STATE POPULATION AT TEMPERATURE AKT     
      DO 3 K=1,60 
    3 PJ(K)=(2*K+1)*math.exp(-K*(K+1)*B0/AKT)
      SUM=1.00
      DO 4 K=1,60 
    4 SUM=SUM+PJ(K)
      FROT0=1.0/SUM
      DO 5 K=1,60
    5 PJ(K)=PJ(K)/SUM
# CALCULATE ROTATIONAL TRANSITION ENERGIES  
      DO 6 K=1,60
      J=K-1
      EIN(K+60)=B0*2*(J+1)
    6 EIN(K)=-EIN(K+60)        
      EIN(121)=-0.073                                                   
      EIN(122)=0.073
      EIN(123)=-0.15932                                                 
      EIN(124)=0.15932                                                  
      EIN(125)=0.27717
      EIN(126)=0.318
      EIN(127)=0.477
      EIN(128)=0.636
      EIN(129)=4.06                                                     
      EIN(130)=8.50                                                     
      EIN(131)=9.60
      APOPV2=math.exp(EIN(121)/AKT)
      APOPV1=math.exp(EIN(123)/AKT)
#     WRITE(6,99) FROT0,(PJ(J),J=1,60)
#  99 FORMAT(2X,'POP OF STATES=',/,10(2X,D10.3))
#     WRITE(6,98) (EIN(J),J=1,140) 
#  98 FORMAT(2X,'TRANS ENERGY=',/,10(2X,D10.3))         
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       NITROUS OXIDE  '
      SCRPT(3)=' IONISATION    ELOSS= 12.886  '
      SCRPT(4)=' ATTACHMENT (NO DEATTACHMENT) '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      SCRPT(7)=' ROT 1-0       ELOSS= -0.00010'
      SCRPT(8)=' ROT 2-1       ELOSS= -0.00021'
      SCRPT(9)=' ROT 3-2       ELOSS= -0.00031'
      SCRPT(10)=' ROT 4-3       ELOSS= -0.00041'
      SCRPT(11)=' ROT 5-4       ELOSS= -0.00052'
      SCRPT(12)=' ROT 6-5       ELOSS= -0.00062'
      SCRPT(13)=' ROT 7-6       ELOSS= -0.00073'
      SCRPT(14)=' ROT 8-7       ELOSS= -0.00083'
      SCRPT(15)=' ROT 9-8       ELOSS= -0.00093'
      SCRPT(16)=' ROT 10-9      ELOSS= -0.00104'
      SCRPT(17)=' ROT 11-10     ELOSS= -0.00114'
      SCRPT(18)=' ROT 12-11     ELOSS= -0.00124'
      SCRPT(19)=' ROT 13-12     ELOSS= -0.00135'
      SCRPT(20)=' ROT 14-13     ELOSS= -0.00145'
      SCRPT(21)=' ROT 15-14     ELOSS= -0.00156'
      SCRPT(22)=' ROT 16-15     ELOSS= -0.00166'
      SCRPT(23)=' ROT 17-16     ELOSS= -0.00176'
      SCRPT(24)=' ROT 18-17     ELOSS= -0.00187'
      SCRPT(25)=' ROT 19-18     ELOSS= -0.00197'
      SCRPT(26)=' ROT 20-19     ELOSS= -0.00207' 
      SCRPT(27)=' ROT 21-20     ELOSS= -0.00218'
      SCRPT(28)=' ROT 22-21     ELOSS= -0.00228'
      SCRPT(29)=' ROT 23-22     ELOSS= -0.00239'
      SCRPT(30)=' ROT 24-23     ELOSS= -0.00249'
      SCRPT(31)=' ROT 25-24     ELOSS= -0.00259'
      SCRPT(32)=' ROT 26-25     ELOSS= -0.00270'
      SCRPT(33)=' ROT 27-26     ELOSS= -0.00280'
      SCRPT(34)=' ROT 28-27     ELOSS= -0.00290'
      SCRPT(35)=' ROT 29-28     ELOSS= -0.00301'
      SCRPT(36)=' ROT 30-29     ELOSS= -0.00311'
      SCRPT(37)=' ROT 31-30     ELOSS= -0.00321'
      SCRPT(38)=' ROT 32-31     ELOSS= -0.00332'
      SCRPT(39)=' ROT 33-32     ELOSS= -0.00342'
      SCRPT(40)=' ROT 34-33     ELOSS= -0.00353'
      SCRPT(41)=' ROT 35-34     ELOSS= -0.00363'
      SCRPT(42)=' ROT 36-35     ELOSS= -0.00373'
      SCRPT(43)=' ROT 37-36     ELOSS= -0.00384'
      SCRPT(44)=' ROT 38-37     ELOSS= -0.00394'
      SCRPT(45)=' ROT 39-38     ELOSS= -0.00404'
      SCRPT(46)=' ROT 40-39     ELOSS= -0.00415'
      SCRPT(47)=' ROT 41-40     ELOSS= -0.00425'
      SCRPT(48)=' ROT 42-41     ELOSS= -0.00436'
      SCRPT(49)=' ROT 43-42     ELOSS= -0.00446'
      SCRPT(50)=' ROT 44-43     ELOSS= -0.00456'
      SCRPT(51)=' ROT 45-44     ELOSS= -0.00467'
      SCRPT(52)=' ROT 46-45     ELOSS= -0.00477'
      SCRPT(53)=' ROT 47-46     ELOSS= -0.00487'
      SCRPT(54)=' ROT 48-47     ELOSS= -0.00498'
      SCRPT(55)=' ROT 49-48     ELOSS= -0.00508'
      SCRPT(56)=' ROT 50-49     ELOSS= -0.00519'
      SCRPT(57)=' ROT 51-50     ELOSS= -0.00529'
      SCRPT(58)=' ROT 52-51     ELOSS= -0.00539'
      SCRPT(59)=' ROT 53-52     ELOSS= -0.00550'
      SCRPT(60)=' ROT 54-53     ELOSS= -0.00560'
      SCRPT(61)=' ROT 55-54     ELOSS= -0.00570'
      SCRPT(62)=' ROT 56-55     ELOSS= -0.00581'
      SCRPT(63)=' ROT 57-56     ELOSS= -0.00591'
      SCRPT(64)=' ROT 58-57     ELOSS= -0.00601'
      SCRPT(65)=' ROT 59-58     ELOSS= -0.00612'
      SCRPT(66)=' ROT 60-59     ELOSS= -0.00622'
      SCRPT(67)=' ROT 0-1       ELOSS=  0.00010'
      SCRPT(68)=' ROT 1-2       ELOSS=  0.00021'
      SCRPT(69)=' ROT 2-3       ELOSS=  0.00031'
      SCRPT(70)=' ROT 3-4       ELOSS=  0.00041'
      SCRPT(71)=' ROT 4-5       ELOSS=  0.00052'
      SCRPT(72)=' ROT 5-6       ELOSS=  0.00062'
      SCRPT(73)=' ROT 6-7       ELOSS=  0.00073' 
      SCRPT(74)=' ROT 7-8       ELOSS=  0.00083'
      SCRPT(75)=' ROT 8-9       ELOSS=  0.00093'
      SCRPT(76)=' ROT 9-10      ELOSS=  0.00104' 
      SCRPT(77)=' ROT 10-11     ELOSS=  0.00114'
      SCRPT(78)=' ROT 11-12     ELOSS=  0.00124'
      SCRPT(79)=' ROT 12-13     ELOSS=  0.00135'
      SCRPT(80)=' ROT 13-14     ELOSS=  0.00145'
      SCRPT(81)=' ROT 14-15     ELOSS=  0.00156'
      SCRPT(82)=' ROT 15-16     ELOSS=  0.00166'
      SCRPT(83)=' ROT 16-17     ELOSS=  0.00176'
      SCRPT(84)=' ROT 17-18     ELOSS=  0.00187'
      SCRPT(85)=' ROT 18-19     ELOSS=  0.00197'
      SCRPT(86)=' ROT 19-20     ELOSS=  0.00207' 
      SCRPT(87)=' ROT 20-21     ELOSS=  0.00218'
      SCRPT(88)=' ROT 21-22     ELOSS=  0.00228'
      SCRPT(89)=' ROT 22-23     ELOSS=  0.00239'
      SCRPT(90)=' ROT 23-24     ELOSS=  0.00249'
      SCRPT(91)=' ROT 24-25     ELOSS=  0.00259'
      SCRPT(92)=' ROT 25-26     ELOSS=  0.00270'
      SCRPT(93)=' ROT 26-27     ELOSS=  0.00280'
      SCRPT(94)=' ROT 27-28     ELOSS=  0.00290'
      SCRPT(95)=' ROT 28-29     ELOSS=  0.00301'
      SCRPT(96)=' ROT 29-30     ELOSS=  0.00311' 
      SCRPT(97)=' ROT 30-31     ELOSS=  0.00321'
      SCRPT(98)=' ROT 31-32     ELOSS=  0.00332'
      SCRPT(99)=' ROT 32-33     ELOSS=  0.00342'
      SCRPT(100)=' ROT 33-34     ELOSS=  0.00353'
      SCRPT(101)=' ROT 34-35     ELOSS=  0.00363'
      SCRPT(102)=' ROT 35-36     ELOSS=  0.00373'
      SCRPT(103)=' ROT 36-37     ELOSS=  0.00384'
      SCRPT(104)=' ROT 37-38     ELOSS=  0.00394'
      SCRPT(105)=' ROT 38-39     ELOSS=  0.00404'
      SCRPT(106)=' ROT 39-40     ELOSS=  0.00415' 
      SCRPT(107)=' ROT 40-41     ELOSS=  0.00425'
      SCRPT(108)=' ROT 41-42     ELOSS=  0.00436'
      SCRPT(109)=' ROT 42-43     ELOSS=  0.00446'
      SCRPT(110)=' ROT 43-44     ELOSS=  0.00456'
      SCRPT(111)=' ROT 44-45     ELOSS=  0.00467'
      SCRPT(112)=' ROT 45-46     ELOSS=  0.00477'
      SCRPT(113)=' ROT 46-47     ELOSS=  0.00487'
      SCRPT(114)=' ROT 47-48     ELOSS=  0.00498'
      SCRPT(115)=' ROT 48-49     ELOSS=  0.00508'
      SCRPT(116)=' ROT 49-50     ELOSS=  0.00519' 
      SCRPT(117)=' ROT 50-51     ELOSS=  0.00529'
      SCRPT(118)=' ROT 51-52     ELOSS=  0.00539'
      SCRPT(119)=' ROT 52-53     ELOSS=  0.00550'
      SCRPT(120)=' ROT 53-54     ELOSS=  0.00560'
      SCRPT(121)=' ROT 54-55     ELOSS=  0.00570'
      SCRPT(122)=' ROT 55-56     ELOSS=  0.00581'
      SCRPT(123)=' ROT 56-57     ELOSS=  0.00591'
      SCRPT(124)=' ROT 57-58     ELOSS=  0.00601'
      SCRPT(125)=' ROT 58-59     ELOSS=  0.00612'
      SCRPT(126)=' ROT 59-60     ELOSS=  0.00622' 
      SCRPT(127)=' VIB V2        ELOSS= -0.073  '
      SCRPT(128)=' VIB V2        ELOSS=  0.073  '
      SCRPT(129)=' VIB V1        ELOSS= -0.159  '
      SCRPT(130)=' VIB V1        ELOSS=  0.159  '
      SCRPT(131)=' VIB V3        ELOSS=  0.277  '
      SCRPT(132)=' VIB 2V1       ELOSS=  0.318  '
      SCRPT(133)=' VIB 3V1       ELOSS=  0.477  '
      SCRPT(134)=' VIB HIGH      ELOSS=  0.636  '
      SCRPT(135)=' EXC           ELOSS=  4.06   '
      SCRPT(136)=' EXC           ELOSS=  8.50   '
      SCRPT(137)=' EXC           ELOSS=  9.60   '
      EN=-ESTEP/2.0                                      
      DO 1000 I=1,NSTEP                                              
      EN=EN+ESTEP                                                       
      DO 10 J=2,NDATA                                                   
      IF(EN <= XEN(J):
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA                                                           
   20 A=(YXSEC(J)-YXSEC(J-1))/(XEN(J)-XEN(J-1))                         
      B=(XEN(J-1)*YXSEC(J)-XEN(J)*YXSEC(J-1))/(XEN(J-1)-XEN(J))         
      Q(2,I)=(A*EN+B)*1.0D-16      
#                                           
      Q(3,I)=0.0                                                        
      IF(EN < E(3):
) GO TO 50                                 
      DO 30 J=2,NIOND                                                   
      IF(EN <= XION(J):
) GO TO 40                                        
   30 CONTINUE                                                          
      J=NIOND                                                          
   40 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.D-16   
#                                              
   50 Q(4,I)=0.0
      QATT(1,I)=Q(4,I)                                                 
      IF(EN < XATT(1):
) GO TO 60                                        
      IF(EN > XATT(NATT1):
) GO TO 60                                    
      DO 51 J=2,NATT1                                                  
      IF(EN <= XATT(J):
) GO TO 52                                        
   51 CONTINUE                                                          
      J=NATT1                                                           
   52 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))                         
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))       
      Q(4,I)=(A*EN+B)*1.D-18*SCALEAT
      QATT(1,I)=Q(4,I)  
#                                                
   60 Q(5,I)=0.0                                                        
      Q(6,I)=0.0   
#----------------------------------------------------------------------
# DIPOLE BORN ROTATIONAL STATES
#--------------------------------------------------------------------- 
      ENRT=math.sqrt(EN)
# SUPERELASTIC COLLISIONS
      DO 100 L=1,60
      AL=DFLOAT(L)
      QIN(L,I)=PJ(L)*DBK*math.log((ENRT+math.sqrt(EN-EIN(L)))/(math.sqrt(EN-EIN(L))-
     /ENRT))*AL/((2.0*AL+1.0)*EN) 
  100 PEQIN(L,I)=0.5+(QIN(L,I)-DRAT*QIN(L,I))/QIN(L,I)
# ROT 0-1
      IF(EN <= EIN(61):
) GO TO 200
      QIN(61,I)=FROT0*DBK*math.log((ENRT+math.sqrt(EN-EIN(61)))/(ENRT-math.sqrt(EN-
     /EIN(61))))/EN
      PEQIN(61,I)=0.5+(QIN(61,I)-DRAT*QIN(61,I))/QIN(61,I)
# ROT 1-2 AND HIGHER
      DO 160 L=62,120
      IF(EN <= EIN(L):
) GO TO 200
      AL=DFLOAT(L-61)
      QIN(L,I)=PJ(L-61)*DBK*math.log((ENRT+math.sqrt(EN-EIN(L)))/(ENRT-math.sqrt(EN-
     /EIN(L))))*(AL+1.0)/((2.0*AL+1.0)*EN)
  160 PEQIN(L,I)=0.5+(QIN(L,I)-DRAT*QIN(L,I))/QIN(L,I) 
#                   
# SUPERELASTIC V2 B# end MODE
  200 QIN(121,I)=0.0                                                    
      IF(EN <= 0.0):
 GO TO 325
      EFAC=math.sqrt(1.0-(EIN(121)/EN))
      QIN(121,I)=AMPV2*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      DO 310 J=2,NVIBH
      IF((EN+EIN(122):
) <= XVIBH(J)) GO TO 320
  310 CONTINUE
      J=NVIBH
  320 A=(YVIBH(J)-YVIBH(J-1))/(XVIBH(J)-XVIBH(J-1))
      B=(XVIBH(J-1)*YVIBH(J)-XVIBH(J)*YVIBH(J-1))/(XVIBH(J-1)-XVIBH(J))
      QIN(121,I)=QIN(121,I)+ARESV2*(EN+EIN(122))*(A*(EN+EIN(122))+B)/EN 
#   FACTOR 0.5 FROM LEVEL DEGENERACY             
      QIN(121,I)=0.5*QIN(121,I)*APOPV2/(1.0+APOPV2)*1.D-16
# V2 B# end MODE  
  325 CONTINUE
      QIN(122,I)=0.0
      IF(EN <= EIN(122):
) GO TO 350
      EFAC=math.sqrt(1.0-(EIN(122)/EN))
      QIN(122,I)=AMPV2*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      DO 330 J=2,NVIBH
      IF(EN <= XVIBH(J):
) GO TO 340
  330 CONTINUE
      J=NVIBH
  340 A=(YVIBH(J)-YVIBH(J-1))/(XVIBH(J)-XVIBH(J-1))
      B=(XVIBH(J-1)*YVIBH(J)-XVIBH(J)*YVIBH(J-1))/(XVIBH(J-1)-XVIBH(J))
      QIN(122,I)=QIN(122,I)+ARESV2*(A*EN+B)        
      QIN(122,I)=QIN(122,I)*1.0/(1.0+APOPV2)*1.D-16
  350 CONTINUE
# SUPERELASTIC V1 SYMMETRIC STRETCH 
      QIN(123,I)=0.0
      IF(EN <= 0.0):
 GO TO 375   
      EFAC=math.sqrt(1.0-(EIN(123)/EN))
      QIN(123,I)=AMPV1*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      DO 360 J=2,NVIBH
      IF((EN+EIN(124):
) <= XVIBH(J)) GO TO 370
  360 CONTINUE
      J=NVIBH
  370 A=(YVIBH(J)-YVIBH(J-1))/(XVIBH(J)-XVIBH(J-1))
      B=(XVIBH(J-1)*YVIBH(J)-XVIBH(J)*YVIBH(J-1))/(XVIBH(J-1)-XVIBH(J))
      QIN(123,I)=QIN(123,I)+ARESV1*(EN+EIN(124))*(A*(EN+EIN(124))+B)/EN
      DO 371 J=2,NVIBR
      IF((EN+EIN(124):
) <= XVIBR(J)) GO TO 372
  371 CONTINUE
      J=NVIBR
  372 A=(YVIBR(J)-YVIBR(J-1))/(XVIBR(J)-XVIBR(J-1))
      B=(XVIBR(J-1)*YVIBR(J)-XVIBR(J)*YVIBR(J-1))/(XVIBR(J-1)-XVIBR(J))
      QIN(123,I)=QIN(123,I)+ARESVR*(EN+EIN(124))*(A*(EN+EIN(124))+B)/EN
      QIN(123,I)=QIN(123,I)*APOPV1/(1.0+APOPV1)*1.D-16
# V1 SYMMETRIC STRETCH
  375 CONTINUE
      QIN(124,I)=0.0
      IF(EN <= EIN(124):
) GO TO 400
      EFAC=math.sqrt(1.0-(EIN(124)/EN))
      QIN(124,I)=AMPV1*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      DO 380 J=2,NVIBH 
      IF(EN <= XVIBH(J):
) GO TO 390
  380 CONTINUE
      J=NVIBH
  390 A=(YVIBH(J)-YVIBH(J-1))/(XVIBH(J)-XVIBH(J-1))
      B=(XVIBH(J-1)*YVIBH(J)-XVIBH(J)*YVIBH(J-1))/(XVIBH(J-1)-XVIBH(J))
      QIN(124,I)=QIN(124,I)+ARESV1*(A*EN+B) 
      DO 391 J=2,NVIBR 
      IF(EN <= XVIBR(J):
) GO TO 392
  391 CONTINUE
      J=NVIBR
  392 A=(YVIBR(J)-YVIBR(J-1))/(XVIBR(J)-XVIBR(J-1))
      B=(XVIBR(J-1)*YVIBR(J)-XVIBR(J)*YVIBR(J-1))/(XVIBR(J-1)-XVIBR(J))
      QIN(124,I)=QIN(124,I)+ARESVR*(A*EN+B) 
      QIN(124,I)=QIN(124,I)*1.0/(1.0+APOPV1)*1.D-16         
  400 CONTINUE   
# V3 ASYMMETRIC STRETCH                                                         
      QIN(125,I)=0.0  
      IF(EN <= EIN(125):
) GO TO 450
      EFAC=math.sqrt(1.0-(EIN(125)/EN))
      QIN(125,I)=AMPV3*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      DO 410 J=2,NVIBH
      IF(EN <= XVIBH(J):
) GO TO 420
  410 CONTINUE
      J=NVIBH
  420 A=(YVIBH(J)-YVIBH(J-1))/(XVIBH(J)-XVIBH(J-1))
      B=(XVIBH(J-1)*YVIBH(J)-XVIBH(J)*YVIBH(J-1))/(XVIBH(J-1)-XVIBH(J))
      QIN(125,I)=QIN(125,I)+ARESV3*(A*EN+B)
      QIN(125,I)=QIN(125,I)*1.D-16 
# 2V1 SYMMETRIC STRETCH HARMONICS 
  450 CONTINUE
      QIN(126,I)=0.0
      IF(EN <= EIN(126):
) GO TO 500                                      
      DO 460 J=2,NVIBH                                                  
      IF(EN <= XVIBH(J):
) GO TO 470                                      
  460 CONTINUE                                                          
      J=NVIBH                                                           
  470 A=(YVIBH(J)-YVIBH(J-1))/(XVIBH(J)-XVIBH(J-1))                     
      B=(XVIBH(J-1)*YVIBH(J)-XVIBH(J)*YVIBH(J-1))/(XVIBH(J-1)-XVIBH(J)) 
      QIN(126,I)=ARES2V1*(A*EN+B)*1.D-16
# 3V1 SYMMETRIC STRETCH HARMONICS                
  500 CONTINUE                                                          
      QIN(127,I)=0.0                                                    
      IF(EN <= EIN(127):
) GO TO 550                                      
      QIN(127,I)=QIN(126,I)*0.6       
# SUM OF HIGHER VIBRATIONAL HARMONICS                                               
  550 CONTINUE  
      QIN(128,I)=0.0                                                    
      IF(EN <= EIN(128):
) GO TO 600                                      
      QIN(128,I)=QIN(127,I)*0.9    
  600 CONTINUE     
      QIN(129,I)=0.0                                                    
      IF(EN <= EIN(129):
) GO TO 650                                      
      DO 610 J=2,NEXC1                                                  
      IF(EN <= XEXC1(J):
) GO TO 620                                      
  610 CONTINUE                                                          
      J=NEXC1                                                           
  620 A=(YEXC1(J)-YEXC1(J-1))/(XEXC1(J)-XEXC1(J-1))                     
      B=(XEXC1(J-1)*YEXC1(J)-XEXC1(J)*YEXC1(J-1))/(XEXC1(J-1)-XEXC1(J)) 
      QIN(129,I)=(A*EN+B)*1.D-16
  650 CONTINUE                                                          
      QIN(130,I)=0.0                                                    
      IF(EN <= EIN(130):
) GO TO 700                                      
      DO 660 J=2,NEXC2                                                  
      IF(EN <= XEXC2(J):
) GO TO 670                                      
  660 CONTINUE                                                          
      J=NEXC2                                                           
  670 A=(YEXC2(J)-YEXC2(J-1))/(XEXC2(J)-XEXC2(J-1))                     
      B=(XEXC2(J-1)*YEXC2(J)-XEXC2(J)*YEXC2(J-1))/(XEXC2(J-1)-XEXC2(J)) 
      QIN(130,I)=(A*EN+B)*1.D-16                                        
  700 CONTINUE                                                          
      QIN(131,I)=0.0                                                    
      IF(EN <= EIN(131):
) GO TO 750                                      
      DO 710 J=2,NEXC3                                                  
      IF(EN <= XEXC3(J):
) GO TO 720                                      
  710 CONTINUE                                                          
      J=NEXC3                                                           
  720 A=(YEXC3(J)-YEXC3(J-1))/(XEXC3(J)-XEXC3(J-1))                     
      B=(XEXC3(J-1)*YEXC3(J)-XEXC3(J)*YEXC3(J-1))/(XEXC3(J-1)-XEXC3(J)) 
      QIN(131,I)=(A*EN+B)*1.D-16                                        
  750 CONTINUE
      SUMROT=0.0
      DO 800 L=1,120
  800 SUMROT=SUMROT+QIN(L,I)
# GET ELASTIC MOMENTUM TRANSFER
      Q(2,I)=Q(2,I)-SUMROT*DRAT   
# Q(1,I) USED ONLY FOR INFORMATION                                                                         
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)+QIN(121,I)+QIN(122,I)+QIN(123,I)+   
     /QIN(124,I)+QIN(125,I)+QIN(126,I)+QIN(127,I)+QIN(128,I)+QIN(129,I)+
     /QIN(130,I)+QIN(131,I)+SUMROT*DRAT
 1000 CONTINUE                                                          
#  SAVE COMPUTE TIME 
      IF(EFINAL <= EIN(131):
) NIN=130                                    
      IF(EFINAL <= EIN(130):
) NIN=129                                    
      IF(EFINAL <= EIN(129):
) NIN=128                                    
      IF(EFINAL <= EIN(128):
) NIN=127                                    
      IF(EFINAL <= EIN(127):
) NIN=126                                    
      IF(EFINAL <= EIN(126):
) NIN=125                                    
      IF(EFINAL <= EIN(125):
) NIN=124                                    
      IF(EFINAL <= EIN(124):
) NIN=123                                    
      RETURN                                                            
      # end 
      def GAS19(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6) 
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)        
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      DIMENSION XEN(50),YXSEC(50),XVIB1(31),YVIB1(31),XVIB2(31),        
     /YVIB2(31),XVIB3(18),YVIB3(18),XVIB4(31),YVIB4(31),XVIB5(21),
     /YVIB5(21),XEXC1(17),YEXC1(17),XEXC2(24),YEXC2(24),XEXC3(23),
     /YEXC3(23),XION(57),YION(57),XATT(16),YATT(16)
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME                                                 
      DATA XEN/0.00,0.01,.014,0.02,.025,0.03,0.04,0.05,0.06,0.07,       
     /0.08,0.09,0.10,0.12,0.14,0.17,0.20,0.25,0.30,0.40,                
     /0.50,0.60,0.80,1.00,1.40,2.00,3.00,4.00,5.00,6.00,                
     /7.00,8.00,10.0,14.0,20.0,30.0,40.0,50.0,70.0,100.,                
     /140.,200.,300.,400.,600.,800.,1000.,2000.,10000.,100000./ 
      DATA YXSEC/8.40,8.40,7.80,7.20,6.60,6.00,4.90,3.90,3.00,2.70,
     /2.60,2.60,2.70,3.00,3.35,3.85,4.40,5.35,6.20,8.00,
     /9.60,11.0,13.0,14.5,16.0,17.0,17.0,16.5,16.5,17.5,                
     /19.5,19.5,17.5,12.5,8.00,5.00,3.60,2.70,1.90,1.25,                
     /0.85,0.58,0.37,0.27,0.17,0.12,0.10,.047,.008,.00006/              
      DATA XVIB1/.117,1.00,1.20,1.40,1.60,1.80,2.00,2.20,2.40,2.60,     
     /2.80,3.00,3.20,4.00,5.00,6.00,7.00,8.00,9.00,10.0,
     /11.0,15.0,20.0,25.0,30.0,50.0,100.,200.,1000.,10000.,
     /100000./
      DATA YVIB1/0.0,.001,.025,.044,.088,.094,.088,.063,.044,.029,      
     /.014,.013,.038,.088,.125,.163,.212,.288,.312,.288,
     /.262,.125,0.10,.075,0.05,.025,0.01,.004,.0004,.000012,
     /.0000012/                           
      DATA XVIB2/.166,1.00,1.20,1.40,1.60,1.80,2.00,2.20,2.40,2.60,     
     /2.80,3.00,3.20,4.00,5.00,6.00,7.00,8.00,9.00,10.0,                
     /11.0,15.0,20.0,25.0,30.0,50.0,100.,200.,1000.,10000.,
     /100000./             
      DATA YVIB2/0.00,.001,.138,0.47,2.36,3.30,2.91,2.04,1.35,0.76,     
     /0.48,0.34,0.20,0.21,0.26,0.33,0.46,0.54,0.56,0.50,                
     /0.41,0.23,0.18,0.14,0.10,.056,.024,0.01,.0012,.00004,
     /.000004/ 
      DATA XVIB3/.333,1.00,1.20,1.40,1.60,1.80,2.00,2.20,2.40,2.60,
     /2.80,3.00,3.20,10.0,100.0,1000.,10000.,100000./
      DATA YVIB3/0.00,.001,.094,0.11,0.51,0.94,0.85,0.56,0.33,0.19,
     /.094,0.05,.025,.0012,.00012,.000012,.0000012,.00000012/
      DATA XVIB4/.375,1.00,1.20,1.40,1.60,1.80,2.00,2.20,2.40,2.60,
     /2.80,3.00,3.20,4.00,5.00,6.00,7.00,8.00,9.00,10.0,
     /11.0,15.0,20.0,25.0,30.0,50.0,100.,200.,1000.,10000.,
     /100000./
      DATA YVIB4/0.00,.001,.033,.056,0.34,0.54,0.50,0.40,0.29,0.20,
     /0.16,0.14,0.14,0.18,0.30,0.50,0.63,0.65,0.58,0.48,
     /0.36,0.20,0.15,0.13,0.09,0.05,.021,.009,.0011,.00004,
     /.000004/ 
      DATA XVIB5/0.75,1.00,3.00,4.00,5.00,6.00,7.00,8.00,9.00,10.0,     
     /11.0,15.0,20.0,25.0,30.0,50.0,100.,200.,1000.,10000.,
     /100000./  
      DATA YVIB5/0.00,.0001,.001,.017,.030,0.05,0.06,.065,.058,.048,
     /.036,.020,.015,.012,.009,.005,.0021,.0009,.00011,.000004,
     /.0000004/ 
      DATA XEXC1/3.70,3.77,4.00,4.50,5.00,6.00,7.00,8.00,9.00,10.0,     
     /14.0,20.0,30.0,100.,1000.,10000.,100000./                         
      DATA YEXC1/0.00,0.01,0.05,0.24,0.45,0.54,0.54,0.48,0.41,0.31,    
     /0.12,.041,.010,.001,.0001,.00001,.000001/                         
      DATA XEXC2/4.85,4.90,5.00,5.50,6.00,7.00,8.00,9.00,10.0,14.0,     
     /20.0,30.0,40.0,50.0,70.0,100.,140.,200.,300.,500.,
     /700.,1000.,10000.,100000./     
      DATA YEXC2/0.00,.009,.019,.056,0.23,0.56,0.80,1.08,1.30,2.17,     
     /3.09,3.88,4.00,3.76,3.38,3.01,2.40,1.79,1.18,0.66,
     /0.48,0.35,0.035,.0035/      
      DATA XEXC3/7.10,7.15,8.00,8.50,9.00,10.0,14.0,20.0,25.0,30.0,     
     /40.0,50.0,60.0,70.0,100.,140.,200.,300.,500.,700.,
     /1000.,10000.,100000./          
      DATA YEXC3/0.00,0.01,0.08,0.14,0.25,0.41,0.82,1.07,1.10,1.12,     
     /1.00,0.94,0.80,0.72,0.49,0.35,0.25,0.17,0.10,0.07,
     /0.05,.005,.0005/           
      DATA XION/10.5,10.55,11.0,11.5,12.0,12.5,13.0,13.5,14.0,14.5,     
     /15.0,16.0,17.0,18.0,19.0,21.0,22.0,24.0,26.0,28.0,                
     /30.0,32.0,34.0,36.0,38.0,40.0,45.0,50.0,60.0,70.0,
     /80.0,90.0,100.,120.,140.,150.,175.,200.,250.,300.,
     /350.,400.,450.,500.,600.,700.,800.,900.,1000.,1250.,
     /1500.,1750.,2000.,2500.,3000.,10000.,100000./     
      DATA YION/0.00,.011,.045,.087,.134,.193,.263,.345,.431,.533,      
     /.641,.861,1.06,1.27,1.49,1.90,2.09,2.44,2.95,3.25,                
     /3.52,3.76,3.98,4.18,4.35,4.50,4.80,5.07,5.47,5.69,
     /5.80,5.83,5.79,5.66,5.42,5.20,4.80,4.58,3.92,3.56,
     /3.18,2.87,2.64,2.45,2.19,1.96,1.75,1.63,1.52,1.28,
     /1.11,1.03,.908,.767,.678,0.26,.045/       
      DATA XATT/6.85,7.00,7.20,7.50,8.00,8.50,9.00,9.50,10.0,10.5,      
     /11.0,11.5,12.0,12.5,13.0,13.2/                                    
      DATA YATT/0.00,0.67,1.10,1.65,2.80,4.40,6.60,10.3,14.7,12.3,      
     /9.70,6.20,3.50,1.30,0.50,0.00/                                    
      NAME='E:E C2H4 99 '                                            
# --------------------------------------------------------------------- 
#  1999 INCLUDED VIBRATIONAL RESONACE SHAPE FROM WALKER ET AL 
#   REF J.CHEM.PHYS. 69(1978) 5532
#   NOW FITS ARGON-E:E MIXTURE DATA OF JEAN-MARIE ET AL.
#   AND SCHMIDTS DATA IN PURE E:E
# ---------------------------------------------------------------------
#
      NION=1 
      NATT=1
      NIN=10 
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0                                                          
      NDATA=50                                                          
      NVIB1=31                                                          
      NVIB2=31 
      NVIB3=18
      NVIB4=31
      NVIB5=21                                                       
      NEXC1=17                                                          
      NEXC2=24
      NEXC3=23
      NIOND=57                                                          
      NATT1=16                                                          
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(28.05376*AMU)                                     
      E(3)=10.5                                                         
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      EOBY(1)=10.5 
      EIN(1)=-0.117                                           
      EIN(2)=0.117
      EIN(3)=-0.166
      EIN(4)=0.166                                          
      EIN(5)=0.333 
      EIN(6)=0.375
      EIN(7)=0.750
      EIN(8)=3.70                                                       
      EIN(9)=4.85                                                       
      EIN(10)=7.10
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       E:E         '
      SCRPT(3)=' IONISATION    ELOSS= 10.5    '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      SCRPT(7)=' VIB V7        ELOSS= -0.117  '
      SCRPT(8)=' VIB V7        ELOSS=  0.117  '
      SCRPT(9)=' VIB V2+V3     ELOSS= -0.166  '
      SCRPT(10)=' VIB V2+V3     ELOSS=  0.166  '
      SCRPT(11)=' VIB 2V3+2V2   ELOSS=  0.333  '
      SCRPT(12)=' VIB V1        ELOSS=  0.375  '
      SCRPT(13)=' VIB 2V1       ELOSS=  0.750  '
      SCRPT(14)=' EXC           ELOSS=  3.70   '
      SCRPT(15)=' EXC           ELOSS=  4.85   '
      SCRPT(16)=' EXC           ELOSS=  7.10   ' 
      AMP1=0.091
      AMP2=0.091
      AMP3=0.10
      APOP=math.exp(EIN(1)/AKT) 
      APOPH=math.exp(EIN(3)/AKT)                                            
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      DO 10 J=2,NDATA                                                   
      IF(EN <= XEN(J):
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA                                                           
   20 A=(YXSEC(J)-YXSEC(J-1))/(XEN(J)-XEN(J-1))                         
      B=(XEN(J-1)*YXSEC(J)-XEN(J)*YXSEC(J-1))/(XEN(J-1)-XEN(J))         
      Q(2,I)=(A*EN+B)*1.0D-16                                           
#                                                                       
      Q(3,I)=0.0                                                        
      IF(EN < E(3):
) GO TO 200                                          
      DO 110 J=2,NIOND                                                  
      IF(EN <= XION(J):
) GO TO 120                                       
  110 CONTINUE                                                          
      J=NIOND                                                 
  120 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.D-16                                            
#                                                                       
  200 Q(4,I)=0.0
      QATT(1,I)=Q(4,I)                                                
      IF(EN < XATT(1):
) GO TO 300                                     
      IF(EN > XATT(NATT1):
) GO TO 300                                   
      DO 210 J=2,NATT1                                                  
      IF(EN <= XATT(J):
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NATT1                                                           
  220 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))                         
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))       
      Q(4,I)=(A*EN+B)*1.D-21          
      QATT(1,I)=Q(4,I)                                  
#                                                                       
  300 Q(5,I)=0.0                                                        
      Q(6,I)=0.0 
#                                                             
# V7 SUPERELASTIC                                                       
      QIN(1,I)=0.0                                                      
      IF(EN <= 0.0):
 GO TO 350
      EFAC=math.sqrt(1.0-(EIN(1)/EN))
      QIN(1,I)=AMP1*math.log((EFAC+1.0)/(EFAC-1.0))/EN                      
      DO 310 J=2,NVIB1                                                  
      IF((EN+EIN(2):
) <= XVIB1(J)) GO TO 320                             
  310 CONTINUE                                                          
      J=NVIB1                                                           
  320 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J)) 
      QIN(1,I)=QIN(1,I)+(EN+EIN(2))*(A*(EN+EIN(2))+B)/EN
      QIN(1,I)=QIN(1,I)*APOP/(1.0+APOP)*1.D-16                          
  350 CONTINUE  
#    
#  V7                                                                       
      QIN(2,I)=0.0                                                      
      IF(EN <= EIN(2):
) GO TO 400 
      EFAC=math.sqrt(1.0-(EIN(2)/EN))
      QIN(2,I)=AMP1*math.log((1.0+EFAC)/(1.0-EFAC))/EN                      
      DO 360 J=2,NVIB1                                                  
      IF(EN <= XVIB1(J):
) GO TO 370                                      
  360 CONTINUE                                                          
      J=NVIB1                                                           
  370 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J)) 
      QIN(2,I)=QIN(2,I)+(A*EN+B)
      QIN(2,I)=QIN(2,I)/(1.0+APOP)*1.D-16                               
  400 CONTINUE 
#       
# SUPERELASTIC  
      QIN(3,I)=0.0
      IF(EN <= 0.0):
 GO TO 4150
      EFAC=math.sqrt(1.0-(EIN(3)/EN))
      QIN(3,I)=AMP2*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      DO 4110 J=2,NVIB2
      IF((EN+EIN(4):
) <= XVIB2(J)) GO TO 4120 
 4110 CONTINUE      
      J=NVIB2
 4120 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J))
      QIN(3,I)=QIN(3,I)+(EN+EIN(4))*(A*(EN+EIN(4))+B)/EN
      QIN(3,I)=QIN(3,I)*APOPH/(1.0+APOPH)*1.D-16 
 4150 CONTINUE     
#  V2 + V3 (SUM OF VIBRATIONS AT 166 AND 201 MV)                            
      QIN(4,I)=0.0
      IF(EN <= EIN(4):
) GO TO 450
      EFAC=math.sqrt(1.0-(EIN(4)/EN))
      QIN(4,I)=AMP2*math.log((1.0+EFAC)/(1.0-EFAC))/EN                      
      DO 410 J=2,NVIB2                                                  
      IF(EN <= XVIB2(J):
) GO TO 420                                      
  410 CONTINUE                                                          
      J=NVIB2                                                           
  420 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J)) 
      QIN(4,I)=QIN(4,I)+(A*EN+B)
      QIN(4,I)=QIN(4,I)/(1.0+APOPH)*1.D-16                              
  450 CONTINUE 
# 
#  2V3+2V2 (HARMONICS)                                                      
      QIN(5,I)=0.0                                                      
      IF(EN <= EIN(5):
) GO TO 500                                        
      DO 460 J=2,NVIB3                                                  
      IF(EN <= XVIB3(J):
) GO TO 470                                      
  460 CONTINUE                                                          
      J=NVIB3                                                           
  470 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J)) 
      QIN(5,I)=(A*EN+B)*1.D-16                                          
  500 CONTINUE
#  
#  V1                                                                       
      QIN(6,I)=0.0 
      IF(EN <= EIN(6):
) GO TO 550  
      EFAC=math.sqrt(1.0-(EIN(6)/EN))
      QIN(6,I)=AMP3*math.log((1.0+EFAC)/(1.0-EFAC))/EN                      
      DO 510 J=2,NVIB4                                                  
      IF(EN <= XVIB4(J):
) GO TO 520                                      
  510 CONTINUE                                                          
      J=NVIB4                                                           
  520 A=(YVIB4(J)-YVIB4(J-1))/(XVIB4(J)-XVIB4(J-1))                     
      B=(XVIB4(J-1)*YVIB4(J)-XVIB4(J)*YVIB4(J-1))/(XVIB4(J-1)-XVIB4(J)) 
      QIN(6,I)=(QIN(6,I)+(A*EN+B))*1.D-16                               
  550 CONTINUE
#     
# 2V1 (HARMONIC)
      QIN(7,I)=0.0                                                      
      IF(EN <= EIN(7):
) GO TO 600                                        
      DO 560 J=2,NVIB5                                                  
      IF(EN <= XVIB5(J):
) GO TO 570                                      
  560 CONTINUE                                                          
      J=NVIB5                                                           
  570 A=(YVIB5(J)-YVIB5(J-1))/(XVIB5(J)-XVIB5(J-1))                     
      B=(XVIB5(J-1)*YVIB5(J)-XVIB5(J)*YVIB5(J-1))/(XVIB5(J-1)-XVIB5(J)) 
      QIN(7,I)=(A*EN+B)*1.D-16                                          
  600 CONTINUE                                                          
#                                                                       
      QIN(8,I)=0.0                                                      
      IF(EN <= EIN(8):
) GO TO 700                                        
      DO 610 J=2,NEXC1                                                  
      IF(EN <= XEXC1(J):
) GO TO 620                                      
  610 CONTINUE                                                          
      J=NEXC1                                                           
  620 A=(YEXC1(J)-YEXC1(J-1))/(XEXC1(J)-XEXC1(J-1))                     
      B=(XEXC1(J-1)*YEXC1(J)-XEXC1(J)*YEXC1(J-1))/(XEXC1(J-1)-XEXC1(J)) 
      QIN(8,I)=(A*EN+B)*1.D-16                                          
  700 CONTINUE                                                          
#                                                                       
      QIN(9,I)=0.0                                                      
      IF(EN <= EIN(9):
) GO TO 800                                        
      DO 710 J=2,NEXC2                                                  
      IF(EN <= XEXC2(J):
) GO TO 720                                      
  710 CONTINUE                                                          
      J=NEXC2                                                           
  720 A=(YEXC2(J)-YEXC2(J-1))/(XEXC2(J)-XEXC2(J-1))                     
      B=(XEXC2(J-1)*YEXC2(J)-XEXC2(J)*YEXC2(J-1))/(XEXC2(J-1)-XEXC2(J)) 
      QIN(9,I)=(A*EN+B)*1.D-16                                          
  800 CONTINUE                                                          
#                                                                       
      QIN(10,I)=0.0                                                     
      IF(EN <= EIN(10):
) GO TO 899                                       
      DO 810 J=2,NEXC3                                                  
      IF(EN <= XEXC3(J):
) GO TO 820                                      
  810 CONTINUE                                                          
      J=NEXC3                                                           
  820 A=(YEXC3(J)-YEXC3(J-1))/(XEXC3(J)-XEXC3(J-1))                     
      B=(XEXC3(J-1)*YEXC3(J)-XEXC3(J)*YEXC3(J-1))/(XEXC3(J-1)-XEXC3(J)) 
      QIN(10,I)=(A*EN+B)*1.D-16                                         
  899 CONTINUE                                                          
#                                                                       
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)+QIN(1,I)+QIN(2,I)+QIN(3,I)+QIN(4,I)+  
     /QIN(5,I)+QIN(6,I)+QIN(7,I)+QIN(8,I)+QIN(9,I)+QIN(10,I)            
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      IF(EFINAL <= EIN(10):
) NIN=9 
      IF(EFINAL <= EIN(9):
) NIN=8                                        
      IF(EFINAL <= EIN(8):
) NIN=7                                        
      IF(EFINAL <= EIN(7):
) NIN=6                                        
      IF(EFINAL <= EIN(6):
) NIN=5                                        
      IF(EFINAL <= EIN(5):
) NIN=4                                        
      IF(EFINAL <= EIN(4):
) NIN=3                                        
      IF(EFINAL <= EIN(3):
) NIN=2                                        
      IF(EFINAL <= EIN(2):
) NIN=1                                        
      IF(EFINAL <= EIN(1):
) NIN=0                                        
#                                                                       
      RETURN                                                            
      # end                                                               
      def GAS20(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)  
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)         
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      DIMENSION XEN(58),YXSEC(58),XVIB1(37),YVIB1(37),XVIB2(27),        
     /YVIB2(27),XVIB3(27),YVIB3(27),XEXC1(28),YEXC1(28),XEXC2(17),
     /YEXC2(17),XEXC3(32),YEXC3(32),XION(42),YION(42),
     /XATT(16),YATT(16)
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME                                                 
      DATA XEN/0.00,0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,       
     /0.10,0.12,0.14,0.17,0.20,0.25,0.30,0.40,0.50,0.60,                
     /0.80,1.00,1.20,1.40,1.70,2.00,2.50,3.00,4.00,5.00,                
     /6.00,7.00,8.00,9.00,10.0,12.0,14.0,17.0,20.0,30.0,                
     /40.0,50.0,60.0,70.0,80.0,90.0,100.,120.,140.,170.,
     /200.,300.,400.,600.,800.,1000.,10000.,100000./                    
      DATA YXSEC/10.5,10.3,9.85,9.60,9.50,9.45,9.45,9.55,9.75,9.95,     
     /10.1,10.2,10.3,10.4,10.5,10.8,11.2,12.3,13.4,14.5,                
     /16.7,18.5,20.3,22.0,24.5,27.0,27.0,23.0,18.0,17.0,                
     /16.5,16.0,15.0,14.0,13.0,11.0,10.0,7.80,6.60,4.10,                
     /2.95,2.30,1.85,1.55,1.30,1.15,1.00,0.85,0.72,0.57,                
     /0.48,0.31,0.22,0.14,0.10,0.07,.007,.0007/
#  V5     
      DATA XVIB1/.0904,.092,.095,0.10,0.11,0.12,0.14,0.17,0.20,0.25,    
     /0.30,0.40,0.50,0.60,0.80,1.00,1.20,1.40,1.70,2.00,
     /2.50,3.00,4.00,5.00,6.00,7.00,8.00,10.0,12.0,14.0,
     /20.0,30.0,50.0,100.,1000.,10000.,100000./
      DATA YVIB1/0.0,1.32,2.15,2.95,3.75,4.15,4.50,4.50,4.35,4.05,
     /3.70,3.20,2.90,2.60,2.30,2.05,1.80,1.70,1.70,1.85,
     /2.00,1.65,1.10,0.80,0.60,0.50,0.40,0.28,0.24,0.21,
     /.155,.110,.070,.038,.0038,.00038,.000038/
# 2V5      
      DATA XVIB2/0.18,0.25,0.30,0.40,0.50,0.60,0.70,0.80,0.90,1.00,     
     /1.20,1.40,1.70,2.00,2.50,3.00,4.00,5.00,6.00,7.00,                
     /8.00,9.00,10.0,100.,1000.,10000.,100000./                         
      DATA YVIB2/0.00,0.01,.015,0.02,.023,.026,0.03,.035,0.04,0.05,     
     /0.07,0.11,0.26,0.64,1.27,1.00,0.35,0.15,0.08,0.04,                
     /.025,.015,.011,.001,.0001,.00001,.000001/  
# V3                                      
      DATA XVIB3/.408,.412,0.43,0.45,0.50,0.60,0.70,0.80,0.90,1.00,
     /1.20,1.40,1.70,2.00,2.50,3.00,4.00,5.00,6.00,7.00,           
     /8.00,9.00,10.0,100.,1000.,10000.,100000./                         
      DATA YVIB3/0.00,.018,0.15,0.22,0.35,0.49,0.56,0.57,0.57,0.56,
     /0.52,0.51,0.54,0.77,1.01,0.86,0.31,0.20,0.17,.156,           
     /.141,.129,.119,.018,.0018,.00018,.000018/  
#                                      
      DATA XEXC1/1.95,1.97,2.00,2.20,2.50,3.00,4.00,5.00,6.00,7.00,     
     /8.00,9.00,10.0,12.0,14.0,20.0,25.0,30.0,40.0,50.0,
     /70.0,100.,140.,200.,400.,1000.,10000.,100000./                    
      DATA YEXC1/0.00,.009,0.09,0.50,0.80,0.89,0.85,0.74,0.61,0.52,     
     /0.45,0.40,0.36,0.30,0.26,0.18,0.14,0.12,0.09,.072,
     /.055,.036,.027,.018,.009,.004,.0004,.00004/
#                                         
      DATA XEXC2/4.90,5.00,6.00,7.00,8.00,9.00,10.0,12.0,14.0,17.0,     
     /20.0,25.0,30.0,100.,1000.,10000.,100000./                         
      DATA YEXC2/0.00,0.01,0.10,0.19,0.29,0.33,0.35,0.34,0.28,0.17,     
     /.095,0.03,.008,.001,.0001,.00001,.000001/ 
#                                          
      DATA XEXC3/7.90,8.00,8.20,8.50,8.80,9.00,10.0,12.0,14.0,17.0,     
     /20.0,25.0,30.0,40.0,50.0,60.0,70.0,80.0,90.0,100.,                
     /120.,140.,170.,200.,250.,300.,400.,600.,800.,1000.,
     /10000.,100000./
      DATA YEXC3/0.00,0.01,0.17,0.35,0.75,1.25,1.95,2.50,2.60,2.80,     
     /2.85,2.85,2.80,2.65,2.35,2.00,1.75,1.55,1.40,1.25,                
     /1.00,0.90,0.74,0.61,0.48,0.40,0.30,0.20,0.15,.125,
     /.013,.0013/
#     
      DATA XION/11.42,11.5,12.0,13.0,14.0,15.0,16.0,17.0,18.0,19.0,     
     /20.0,25.0,30.0,40.0,50.0,60.0,70.0,80.0,90.0,100.,                
     /120.,140.,170.,200.,250.,300.,400.,500.,600.,700.,
     /800.,900.,1000.,1500.,2000.,4000.,6000.,8000.,10000.,20000.,
     /40000.,100000./      
      DATA YION/0.00,.019,.095,.280,.484,.725,.931,1.13,1.31,1.47,      
     /1.63,2.66,3.32,4.05,4.41,4.61,4.70,4.73,4.72,4.67,                
     /4.50,4.32,4.00,3.73,3.33,2.99,2.49,2.13,1.86,1.64,
     /1.47,1.30,1.23,.908,.720,.405,.287,.223,.184,.100,
     /.054,.023/                
      DATA XATT/6.85,7.00,7.20,7.50,8.00,8.50,9.00,9.50,10.0,10.5,      
     /11.0,11.5,12.0,12.5,13.0,13.2/                                    
      DATA YATT/0.00,0.67,1.10,1.65,2.80,4.40,6.60,10.3,14.7,12.3,      
     /9.70,6.20,3.50,1.30,0.50,0.00/                                    
      NAME=' ACETYLENE 2002'                                            
# --------------------------------------------------------------------- 
# FIT TO DRIFT VELOCITY AND TRANSVERSE DIFFUSION IN PURE GAS :
#             DUNCAN AND WALKER J.CHEM.SOC (LONDON) 68 (1972) 1800  
# ARGON MIXTURE DATA ( DRIFT VELOCITY ONLY) :
#          CHRISTOPHOROU ET AL NUCL.INST.METH. 163(1979)141
#    TOWNS# end COEFICIENT : HEYLEN
# ---------------------------------------------------------------------
# 
      NION=1
      NATT=1
      NIN=7
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0      
      NDATA=58                                                          
      NVIB1=37                                                          
      NVIB2=27                                                          
      NVIB3=27
      NEXC1=28                                                          
      NEXC2=17
      NEXC3=32
      NIOND=42                                                         
      NATT1=16                                                          
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(26.03788*AMU)                                     
      E(3)=11.42                                                        
# CORRECT ENERGY                                                        
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
      EOBY(1)=10.0  
      EIN(1)=-.0904                                                     
      EIN(2)=0.0904                                                     
      EIN(3)=0.180                                                      
      EIN(4)=0.408                                                      
      EIN(5)=1.95                                                       
      EIN(6)=4.90                                                       
      EIN(7)=7.90
      SCRPT(1)='                              ' 
      SCRPT(2)=' ELASTIC       ACETYLENE      '
      SCRPT(3)=' IONISATION    ELOSS= 11.42   '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      SCRPT(7)=' VIB V5        ELOSS= -0.0904 ' 
      SCRPT(8)=' VIB V5        ELOSS=  0.0904 '
      SCRPT(9)=' VIB 2V5       ELOSS=  0.180  '
      SCRPT(10)=' VIB V3        ELOSS=  0.408  '
      SCRPT(11)=' EXC           ELOSS=  1.95   '
      SCRPT(12)=' EXC           ELOSS=  4.90   '
      SCRPT(13)=' EXC           ELOSS=  7.90   '
      EN=-ESTEP/2.0
      APOPV5=math.exp(EIN(1)/AKT)  
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      DO 10 J=2,NDATA                                                   
      IF(EN <= XEN(J):
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA                                                           
   20 A=(YXSEC(J)-YXSEC(J-1))/(XEN(J)-XEN(J-1))                         
      B=(XEN(J-1)*YXSEC(J)-XEN(J)*YXSEC(J-1))/(XEN(J-1)-XEN(J))         
      Q(2,I)=(A*EN+B)*1.0D-16                                           
#                                                                       
      Q(3,I)=0.0                                                        
      IF(EN < E(3):
) GO TO 200                                          
      DO 110 J=2,NIOND                                                 
      IF(EN <= XION(J):
) GO TO 120                                       
  110 CONTINUE                                                          
      J=NIOND                                                  
  120 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.D-16                                            
#                                                                       
  200 Q(4,I)=0.0                            
      QATT(1,I)=Q(4,I)                            
      IF(EN < XATT(1):
) GO TO 300                                       
      IF(EN > XATT(NATT1):
) GO TO 300                                  
      DO 210 J=2,NATT1                                                  
      IF(EN <= XATT(J):
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NATT1                                                           
  220 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))                         
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))       
      Q(4,I)=(A*EN+B)*1.D-21   
      QATT(1,I)=Q(4,I)                                         
  300 Q(5,I)=0.0                                                        
      Q(6,I)=0.0
#
# SUPERELASTIC V5                                                                       
      QIN(1,I)=0.0                                                      
      IF(EN <= 0.0):
 GO TO 330                                        
      DO 310 J=2,NVIB1                                                  
      IF((EN+EIN(2):
) <= XVIB1(J)) GO TO 320                             
  310 CONTINUE                                                          
      J=NVIB1                                                           
  320 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J))
      QIN(1,I)=(EN+EIN(2))*(A*(EN+EIN(2))+B)*1.D-16/EN
# FACTOR 0.5 FROM DENSITY OF STATES        
      QIN(1,I)=0.5*QIN(1,I)*APOPV5/(1.0+APOPV5)                         
  330 CONTINUE                                                          
# V5                                                                    
      QIN(2,I)=0.0                                                      
      IF(EN <= EIN(2):
) GO TO 370                                        
      DO 350 J=2,NVIB1                                                  
      IF(EN <= XVIB1(J):
) GO TO 360                                      
  350 CONTINUE                                                          
      J=NVIB1                                                           
  360 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J)) 
      QIN(2,I)=(A*EN+B)*1.D-16
      QIN(2,I)=QIN(2,I)/(1.0+APOPV5)                                    
  370 CONTINUE                                                          
# 2V5                                                                   
      QIN(3,I)=0.0                                                      
      IF(EN <= EIN(3):
) GO TO 430                                        
      DO 410 J=2,NVIB2                                                  
      IF(EN <= XVIB2(J):
) GO TO 420                                      
  410 CONTINUE                                                          
      J=NVIB2                                                           
  420 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J)) 
      QIN(3,I)=(A*EN+B)*1.D-16                                          
  430 CONTINUE                                                          
# V3                                                                    
      QIN(4,I)=0.0                                                      
      IF(EN <= EIN(4):
) GO TO 470                                        
      DO 450 J=2,NVIB3                                                  
      IF(EN <= XVIB3(J):
) GO TO 460                                      
  450 CONTINUE                                                          
      J=NVIB3                                                           
  460 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J)) 
      QIN(4,I)=(A*EN+B)*1.D-16                                          
  470 CONTINUE                                                          
#                                                                       
      QIN(5,I)=0.0                                                      
      IF(EN <= EIN(5):
) GO TO 530                                        
      DO 510 J=2,NEXC1                                                  
      IF(EN <= XEXC1(J):
) GO TO 520                                      
  510 CONTINUE                                                          
      J=NEXC1                                                           
  520 A=(YEXC1(J)-YEXC1(J-1))/(XEXC1(J)-XEXC1(J-1))                     
      B=(XEXC1(J-1)*YEXC1(J)-XEXC1(J)*YEXC1(J-1))/(XEXC1(J-1)-XEXC1(J)) 
      QIN(5,I)=(A*EN+B)*1.D-16                                          
  530 CONTINUE                                                          
#                                                                       
      QIN(6,I)=0.0                                                      
      IF(EN <= EIN(6):
) GO TO 570                                        
      DO 550 J=2,NEXC2                                                  
      IF(EN <= XEXC2(J):
) GO TO 560                                      
  550 CONTINUE                                                          
      J=NEXC2                                                           
  560 A=(YEXC2(J)-YEXC2(J-1))/(XEXC2(J)-XEXC2(J-1))                     
      B=(XEXC2(J-1)*YEXC2(J)-XEXC2(J)*YEXC2(J-1))/(XEXC2(J-1)-XEXC2(J)) 
      QIN(6,I)=(A*EN+B)*1.D-16                                          
  570 CONTINUE                                                          
#                                                                       
      QIN(7,I)=0.0                                                      
      IF(EN <= EIN(7):
) GO TO 630                                        
      DO 610 J=2,NEXC3                                                  
      IF(EN <= XEXC3(J):
) GO TO 620                                      
  610 CONTINUE                                                          
      J=NEXC3                                                           
  620 A=(YEXC3(J)-YEXC3(J-1))/(XEXC3(J)-XEXC3(J-1))                     
      B=(XEXC3(J-1)*YEXC3(J)-XEXC3(J)*YEXC3(J-1))/(XEXC3(J-1)-XEXC3(J)) 
      QIN(7,I)=(A*EN+B)*1.D-16                                          
  630 CONTINUE                                                          
#                                                                       
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)+QIN(1,I)+QIN(2,I)+QIN(3,I)+QIN(4,I)+  
     /QIN(5,I)+QIN(6,I)+QIN(7,I)                                        
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME   
      IF(EFINAL < EIN(7):
) NIN=6                 
      IF(EFINAL <= EIN(6):
) NIN=5
      IF(EFINAL <= EIN(5):
) NIN=4                                        
      IF(EFINAL <= EIN(4):
) NIN=3                                        
      IF(EFINAL <= EIN(3):
) NIN=2                                        
      IF(EFINAL <= EIN(2):
) NIN=1                                        
      IF(EFINAL <= EIN(1):
) NIN=0                                        
#                                                                       
      RETURN                                                            
      # end 
      def GAS21(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,    
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
#    /QNULL,NNULL,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,
#    /SCRPT)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(4000),EROOT(4000),QT1(4000),QT2(4000),
     /QT3(4000),QT4(4000)
      COMMON/DENS/DEN(4000)
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30)
     /,EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      DIMENSION XELM(172),YELM(172),YELT(172),YEPS(172),
     /XROT0(53),YROT0(53),XROT1(43),YROT1(43),XROT2(28),YROT2(28),
     /XROT3(28),YROT3(28),XVIB1(43),YVIB1(43),XVIB2(42),YVIB2(42),
     /XVIB3(13),YVIB3(13),XVIB4(12),YVIB4(12),
     /XB3S1(3),YB3S1(3),XB3S2(6),YB3S2(6),XB3S3(5),YB3S3(5),
     /XB3S4(8),YB3S4(8),XC3PI(5),YC3PI(5),XA3SG(5),YA3SG(5),
     /XE3SG(5),YE3SG(5),XEFSG(34),YEFSG(34),
     /XATT(18),YATT(18),XION(92),YION(92),XIOND[61],YIOND[61],
     /IOFFN(107),IOFFION(2),PJ(7),ERLVL(7),BEF(10)
      DIMENSION DISLY(37),DISWR(14),DISD1P(16),DISB1S(9)
      DIMENSION Z1T(25),EBRM(25)
      CHARACTER*50 SCRPT(300),SCRPTN(10)                          
      CHARACTER*25 NAME 
# --------------------------------------------------------------      
# ELASTIC MT                                                   
      DATA XELM/0.00,.001,.0012,.0015,.0018,.002,.0025,.003,.004,.005,
     /.006,.007,.008,.009,.010,.012,.015,.018,.020,.025,
     /0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.10,0.12,0.15,  
     /0.18,0.20,0.25,0.30,0.40,0.50,0.60,0.70,0.80,0.90,
     /1.00,1.20,1.50,1.80,2.00,2.50,3.00,4.00,5.00,6.00,
     /7.00,8.00,9.00,10.0,12.0,15.0,18.0,20.0,25.0,30.0,
     /40.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,
     /200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,
     /900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,
     /4500.,5000.,6000.,7000.,8000.,9000.,1.0D4,1.25D4,1.5D4,1.75D4,
     /2.0D4,2.5D4,3.0D4,3.5D4,4.0D4,4.5D4,5.0D4,6.0D4,7.0D4,8.0D4,
     /9.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5D5,3.0D5,3.5D5,4.0D5,
     /4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,
     /2.0D6,2.5D6,3.0D6,3.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,
     /9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5D7,3.0D7,3.5D7,4.0D7,
     /4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,1.0D8,1.25D8,1.5D8,1.75D8,
     /2.0D8,2.5D8,3.0D8,3.5D8,4.0D8,4.5D8,5.0D8,6.0D8,7.0D8,8.0D8,
     /9.0D8,1.0D9/  
      DATA YELM/7.24,7.25,7.26,7.26,7.27,7.28,7.30,7.35,7.38,7.45,
     /7.48,7.54,7.59,7.64,7.70,7.78,7.90,8.04,8.14,8.33,
     /8.56,8.93,9.27,9.54,9.79,10.04,10.25,10.47,10.86,11.35,
     /11.78,12.02,12.54,13.00,13.81,14.52,15.16,15.66,16.17,16.58,
     /17.01,17.70,18.05,18.05,17.70,16.60,15.35,12.85,10.90,9.450,
     /8.20,7.20,6.30,5.60,4.45,3.275,2.529,2.154,1.476,1.100,
     /.702,.505,.375,.295,.238,.195,.170,.116,.0868,.0662,
     /.0524,.0353,.0256,.0195,.0154,.0125,.0103,.00747,.00567,.00446,
     /.00361,.00299,.0020,.00144,.00109,8.53D-4,5.69D-4,4.08D-4,3.08D-4,
     /2.41D-4,
     /1.94D-4,1.60D-4,1.15D-4,8.65D-5,6.77D-5,5.45D-5,4.49D-5,2.98D-5,
     /2.13D-5,1.60D-5,
     /1.26D-5,8.34D-6,5.97D-6,4.51D-6,3.54D-6,2.86D-6,2.36D-6,1.70D-6,
     /1.29D-6,1.02D-6,
     /8.26D-7,6.86D-7,4.65D-7,3.40D-7,2.62D-7,2.09D-7,1.44D-7,1.07D-7,
     /8.37D-8,6.76D-8,
     /5.62D-8,4.76D-8,3.58D-8,2.82D-8,2.30D-8,1.92D-8,1.63D-8,1.15D-8,
     /8.67D-9,6.80D-9,
     /5.49D-9,3.83D-9,2.84D-9,2.20D-9,1.76D-9,1.44D-9,1.20D-9,8.79D-10,
     /6.72D-10,5.31D-10,
     /4.31D-10,3.57D-10,2.39D-10,1.72D-10,1.30D-10,1.02D-10,6.74D-11,
     /4.81D-11,3.61D-11,2.81D-11,
     /2.25D-11,1.85D-11,1.31D-11,9.76D-12,7.57D-12,6.04D-12,4.93D-12,
     /3.20D-12,2.24D-12,1.66D-12,
     /1.27D-12,8.18D-13,5.70D-13,4.19D-13,3.21D-13,2.54D-13,2.06D-13,
     /1.43D-13,1.05D-13,8.06D-14,
     /6.37D-14,5.16D-14/
# ELASTIC ANGULAR DISTRIBUTION def EPSILON
# EPSILON =1-YEPS
      DATA YEPS/1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.00204,1.00406,1.00403,
     /1.00402,1.00799,1.01195,1.01587,1.01974,1.02548,1.03497,1.04613,
     /1.05537,1.07162,
     /1.09485,1.11355,1.13538,1.15360,1.16779,1.18516,1.19550,1.20711,
     /1.22691,1.25186,
     /1.27686,1.29241,1.29958,1.33194,1.36128,1.39254,1.42965,1.43614,
     /1.42939,1.42749,
     /1.44093,1.43942,1.39970,1.34691,1.29121,1.15375,1.03498,0.81607,
     /0.68293,0.59997,
     /0.53826,0.48433,0.43796,0.41063,0.36112,0.31690,0.28482,0.26105,
     /0.20648,0.18652,
     /0.14951,0.13589,0.11425,0.10223,0.09743,0.08175,0.08042,0.06877,
     /0.06127,0.05204,
     /0.04596,0.03674,0.02996,0.02695,0.02487,0.02173,0.01973,0.01733,
     /0.01536,0.01371,
     /.012395,.011378,.009183,.007832,.006527,.005948,.004772,.004142,
     /.003545,.003086,
     /.002742,.002452,.002049,.001748,.001525,.001351,.001215,.0009666,
     /.0007993,.0006810,
     /5.977D-4,4.724D-4,3.896D-4,3.326D-4,2.893D-4,2.544D-4,2.282D-4,
     /1.866D-4,1.581D-4,1.370D-4,
     /1.199D-4,1.066D-4,8.29D-5,6.72D-5,5.63D-5,4.80D-5,3.65D-5,2.91D-5,
     /2.40D-5,2.02D-5,
     /1.73D-5,1.50D-5,1.17D-5,9.40D-6,7.77D-6,6.54D-6,5.59D-6,3.98D-6,
     /2.99D-6,2.33D-6,
     /1.87D-6,1.28D-6,9.38D-7,7.15D-7,5.64D-7,4.56D-7,3.77D-7,2.70D-7,
     /2.02D-7,1.57D-7,
     /1.26D-7,1.03D-7,6.74D-8,4.74D-8,3.52D-8,2.72D-8,1.76D-8,1.23D-8,
     /9.05D-9,6.95D-9,
     /5.50D-9,4.46D-9,3.10D-9,2.28D-9,1.74D-9,1.37D-9,1.11D-9,7.04D-10,
     /4.85D-10,3.53D-10,
     /2.67D-10,1.68D-10,1.15D-10,8.3D-11,6.3D-11,4.9D-11,4.0D-11,
     /2.7D-11,2.0D-11,1.5D-11,
     /1.2D-11,9.0D-12/
# ELASTIC FROM 100EV
      DATA YELT/7.24,7.25,7.26,7.26,7.27,7.28,7.30,7.36,7.40,7.43,
     /7.46,7.50,7.53,7.56,7.60,7.65,7.72,7.80,7.85,7.95,
     /8.05,8.30,8.50,8.65,8.80,8.93,9.06,9.19,9.42,9.70,
     /9.92,10.03,10.42,10.60,11.07,11.43,11.68,12.02,12.46,12.79,
     /13.02,13.56,14.15,14.59,14.78,15.05,15.00,14.66,13.90,13.05,
     /12.10,11.33,10.54,9.744,8.375,6.678,5.508,4.952,3.931,3.125,
     /2.299,1.760,1.465,1.241,1.034,0.954,0.841,0.639,0.518,0.443,
     /.383,.303,.255,.210,.176,.158,.140,.112,.0932,.0800,
     /.070,.062,.049,.040,.035,.0295,.0235,.0189,.0162,.0142,
     /.0126,.0114,.00951,.00817,.00717,.00639,.00576,.00464,.00390,
     /.00336,
     /.00296,.00240,.00203,.00176,.00156,.00141,.00128,.00110,
     /9.66D-4,8.67D-4,
     /7.90D-4,7.28D-4,6.17D-4,5.44D-4,4.91D-4,4.52D-4,3.98D-4,3.63D-4,
     /3.38D-4,3.19D-4,
     /3.05D-4,2.94D-4,2.77D-4,2.66D-4,2.58D-4,2.52D-4,2.47D-4,2.39D-4,
     /2.34D-4,2.31D-4,
     /2.28D-4,2.25D-4,2.23D-4,2.22D-4,2.22D-4,2.21D-4,2.21D-4,2.20D-4,
     /2.20D-4,2.20D-4,
     /2.19D-4,2.19D-4,2.19D-4,2.19D-4,2.19D-4,27*2.188D-4/      
#-----------------------------------------------------------------------
# ROTATION J=0-2
# SCALED BY 1/E ABOVE 20 EV IN def                    
      DATA XROT0/.043928,.046,.047,.048,.049,.050,.051,.054,.055,.060, 
     /.065,.070,.080,.090,0.10,0.11,0.12,0.13,0.14,0.15,
     /0.20,0.25,0.30,0.35,0.40,0.45,0.50,0.55,0.60,0.65, 
     /0.70,0.80,0.90,1.00,1.10,1.20,1.35,1.50,1.75,2.00,
     /2.50,3.00,3.50,4.00,4.50,5.00,6.00,7.00,8.00,9.00,                
     /10.0,15.0,20.0/                                                   
      DATA YROT0/0.00,.0206,.0276,.0286,.0297,.0308,.0310,.0330,.0340,
     /.0394, 
     /.0452,.0507,.0614,.0680,.0740,.0790,.0835,.088,.0925,.0970,
     /.115,.132,.152,.175,.200,.228,.260,.291,.323,.359, 
     /.394,.469,.555,.636,.716,.796,.916,1.036,1.203,1.370,
     /1.585,1.704,1.755,1.758,1.732,1.689,1.579,1.462,1.350,1.248,      
     /1.156,0.730,0.47/                                            
#-----------------------------------------------------------------------
# ROTATION J=1-3                                                        
# SCALED BY 1/E ABOVE 20 EV IN def                    
      DATA XROT1/0.072741,.075,.080,.085,.090,.095,0.10,0.11,0.12,0.13,
     /0.15,0.20,0.25,0.30,0.35,0.40,0.45,0.50,0.56,0.60,                
     /0.66,0.70,0.80,0.90,1.01,1.20,1.40,1.60,1.80,2.00,                
     /2.50,3.00,3.50,4.00,4.50,5.00,6.00,7.00,8.00,9.00,                
     /10.0,15.0,20.0/             
      DATA YROT1/0.00,.0085,.0149,.0203,.0238,.0266,.0282,.0351,.0403,  
     /.0449,
     /.0520,.0604,.0719,.0870,.1029,.1191,.1361,.1543,.1773,.1944,
     /.2212,.2396,.2839,.3328,.3842,.489,.569,.658,.743,.818,           
     /.952,1.020,1.046,1.050,1.036,1.011,.946,.876,.809,.748,           
     /.694,.440,.288/                                                
#-----------------------------------------------------------------------
# ROTATION J=2-4                                         
# SCALED BY 1/E ABOVE 20 EV IN def                    
      DATA XROT2/0.10085,0.15,0.20,0.25,0.30,0.35,0.40,0.45,0.50,0.60, 
     /0.70,0.80,0.90,1.00,1.50,2.00,2.50,3.00,3.50,4.00,                
     /4.50,5.00,5.50,6.00,7.00,8.00,10.0,20.0/  
      DATA YROT2/0.00,.0249,.0367,.0475,.0577,.0694,.0834,.1003,.1192,  
     /.145,
     /.178,.216,.256,.299,.436,.543,.600,.649,.670,.672,           
     /.662,.646,.627,.605,.561,.517,.444,0.20/
# ROTATION J=4-6 USE X-SECTION FOR J=2-4 SCALED BY 0.8
# ROTATION J=6-8 USE X-SECTION FOR J=2-4 SCALED BY 0.5               
#-----------------------------------------------------------------------
# ROTATION J=3-5                              
# SCALED BY 1/E ABOVE 20 EV IN def                    
      DATA XROT3/0.12797,0.15,0.20,0.25,0.30,0.35,0.40,0.45,0.50,0.60,
     /0.70,0.80,0.90,1.00,1.50,2.00,2.50,3.00,3.50,4.00,                
     /4.50,5.00,5.50,6.00,7.00,8.00,10.0,20.0/
      DATA YROT3/0.00,.019,.033,.043,.050,.058,.066,.075,.085,.104,     
     /.128,.154,.185,.214,.334,.565,.700,.750,.825,.828,                
     /.818,.797,.774,.747,.692,.640,.548,0.24/
# ROTATION J=5-7 USE X-SECTION FOR J=3-5 SCALED BY 0.8
# ROTATION J=7-9 USE X-SECTION FOR J=3-5 SCALED BY 0.5           
#-----------------------------------------------------------------------
# VIBRATION V=0-1 DELTAJ=0  ROTATIONALLY ELASTIC  
# SCALE AS 1/E ABOVE 100 EV                      
      DATA XVIB1/.515916,0.56,0.58,0.60,0.65,0.75,0.85,0.95,1.00,1.05, 
     /1.10,1.15,1.20,1.30,1.40,1.60,1.80,2.20,2.40,2.60,                
     /3.00,3.50,4.00,4.50,5.00,6.00,7.00,8.00,9.00,10.0,                
     /11.0,12.0,13.0,14.0,15.0,20.0,25.0,30.0,40.0,50.0,
     /60.0,80.0,100./          
      DATA YVIB1/0.00,.0005,.0031,.0064,.0071,.0106,.0170,.0279,.0342,  
     /.0399,
     /.0451,.0501,.0545,.0651,.0735,.0964,.1216,.1624,.1677,.1719,
     /.1916,.2008,.1860,.1630,.1460,.1160,.0876,.0655,.0510,.0430,
     /.0366,.0318,.0280,.0241,.0222,.0143,.0104,.0073,.0048,.00416,
     /.00351,.00262,.00194/
#-----------------------------------------------------------------------
# VIBRATION V=0-1 DELTAJ=2  ROTATIONALLY INELASTIC 
# SCALE AS 1/E ABOVE 100 EV                     
      DATA XVIB2/.568,.575,0.60,0.65,0.75,0.85,0.95,1.00,1.05,1.10,
     /1.15,1.20,1.30,1.40,1.60,1.80,2.20,2.40,2.60,3.00,                
     /3.50,4.00,4.50,5.00,6.00,7.00,8.00,9.00,10.0,11.0,                
     /12.0,13.0,14.0,15.0,20.0,25.0,30.0,40.0,50.0,60.0,
     /80.0,100./               
      DATA YVIB2/0.00,.0002,.0016,.0028,.0058,.0110,.0204,.0264,.0316,
     /.0369,
     /.0423,.0477,.0602,.0697,.0994,.1334,.1910,.2008,.2141,.2494,
     /.2672,.2540,.2270,.2040,.1640,.1224,.0905,.0690,.0570,.0484,      
     /.0422,.0370,.0319,.0294,.0189,.0138,.0097,.0064,.00552,.00466,
     /.00347,.00257/      
#-----------------------------------------------------------------------
#  VIBRATION V=0-2                                                      
      DATA XVIB3/1.00265,1.40,1.50,2.00,2.50,3.00,4.00,5.00,6.00,8.00,
     /10.0,15.0,20.0/                             
      DATA YVIB3/0.00,.001,.002,.011,.025,.033,.035,.032,.027,.021,
     /.016,.0092,.0066/                        
#-----------------------------------------------------------------------
#  VIBRATION V=0-3                                                      
      DATA XVIB4/1.46083,1.80,2.00,2.50,3.00,4.00,5.00,6.00,8.00,
     /10.0,15.0,20.0/                                   
      DATA YVIB4/.0,.0003,.001,.0025,.0033,.0035,.0032,.0027,.0021,
     /.0016,.00092,.00066/     
# B3 SIGMA+ 100% DISSOCIATIVE SPLIT INTO 4 ENERGY LOSSES
# SCALED BY1/E**3 ABOVE 50.0EV
      DATA XB3S1/8.00,9.20,9.20001/
      DATA YB3S1/0.00,.109,0.00/  
      DATA XB3S2/9.00,9.20,9.20001,10.2,12.2,12.20001/
      DATA YB3S2/0.00,0.00,.109,.187,.445,0.00/  
      DATA XB3S3/9.50,12.2,12.20001,15.2,15.20001/
      DATA YB3S3/0.00,0.00,.445,0.63,0.00/  
      DATA XB3S4/10.0,15.2,15.20001,17.2,20.2,30.0,40.0,50.0/
      DATA YB3S4/0.00,0.00,0.63,.516,.353,.153,.069,.035/
# C3 PI V=0-18 SUMMED VIBRATIONS METASTABLE LEVEL 
# SCALED BY 1/E**3 ABOVE 30 EV
      DATA XC3PI/11.779,15.0,17.5,20.0,30.0/
      DATA YC3PI/0.00,0.09,.126,.135,.072/
# A3 SIGMA V=0-17 SUMMED VIBRATIONS
# SCALED BY 1/E**3 ABOVE 30 EV
      DATA XA3SG/11.793,15.0,17.5,20.0,30.0/
      DATA YA3SG/0.00,.072,.081,0.09,.027/
# E3 SIGMA V=0-10 SUMMED VIBRATIONS
# SCALED BY 1/E**3 ABOVE 30 EV
      DATA XE3SG/13.253,15.0,17.5,20.0,30.0/
      DATA YE3SG/0.00,.0108,.018,.0225,.0117/
# EF1 SIGMA V=0-19 SUMMED VIBRATIONS
#  BORN SCALED ABOVE XEFSG(NEFSG)  EV
      DATA XEFSG/12.301,15.0,16.0,17.0,17.5,19.0,20.0,21.0,23.5,26.0,
     /30.0,40.0,50.0,60.0,70.0,80.0,100.,120.,140.,160.,
     /180.,200.,220.,240.,260.,280.,300.,400.,500.,600.,
     /700.,800.,900.,1000./
      DATA YEFSG/0.00,.028,.033,.037,.038,.039,.040,.040,.040,.040,
     /.040,.041,.041,.039,.036,.034,.029,.026,.024,.022,
     /.021,.020,.019,.018,.017,.016,.015,.012,.0096,.0080,
     /.0069,.0061,.0054,.0049/
# GROUND STATE CONTINUUM FRACTIONS FROM STEPHENS AND DALGARNO: 
# NEUTRAL DISSOCIATION FRACTION FOR LYMAN BAND - GROUND STATE CONTINUUM
      DATA DISLY/3.01D-9,6.58D-9,1.35D-5,1.16D-4,1.48D-3,.0171,
     /.0309,.211,.291,.415,
     /.410,.407,.523,.511,.542,.558,.554,.601,.608,.634,
     /.637,.643,.651,.659,.677,.691,.712,.730,.753,.774,
     /.795,.816,.842,.873,.911,.956,.995/
# NEUTRAL DISSOCIATION FRACTION FOR WERNER BAND - GROUND STATE CONTINUUM
      DATA DISWR/1.57D-11,1.10D-10,2.40D-9,2.03D-8,2.04D-6,7.44D-6,
     /6.75D-4,1.45D-3,.0372,.0643,
     /.377,.425,.642,.825/
# DISSOCIATION FRACTIONS FROM GLASS-MAUJEAN:
# B#1SIGMA 
      DATA DISB1S/1.41D-8,4.77D-8,5.82D-8,1.99D-7,1.05D-6,4.24D-5,
     /.065,.152,.451/
#  D1PI
      DATA DISD1P/5.95D-9,1.39D-8,1.85D-8,3.96D-8,2.47D-6,2.02D-5,
     /7.74D-4,.0039,.0371,.103,
     /.357,.481,.527,.638,.859,.870/
#  
# NEUTRAL
# B1 SIGMA                  OSCILLATOR SUM V=0-36   F=0.310770
# C1 PI                     OSCILLATOR SUM V=0-13   F=0.355995
# B#1 SIGMA                 OSCILLATOR SUM V=0-8    F=0.044610
# D1 PI                     OSCILLATOR SUM V=0-15   F=0.074070
# B##1 SIGMA                OSCILLATOR SUM V=0-6    F=0.022300
# D#1 PI                    OSCILLATOR SUM V=0-3    F=0.014500
# B###1 SIGMA + D##1 PI     OSCILLATOR SUM          F=0.014500
# B####1 SIGMA + D###1 PI   OSCILLATOR SUM          F=0.010100
# B#####1 SIGMA + D####1 PI OSCILLATOR SUM          F=0.005000
# CONTINUUM EXCITATION                              F=0.026800
# PREDISSOCIATION                                   F=0.017000
#
#                 SUM EXCITATION OSCILLATOR         F=0.895645
#                 SUM IONISATION OSCILLATOR         F=1.1219
#           TOTAL OSCILLATOR SUM           F=2.017545
#-----------------------------------------------------------------------
#  ATTACHMENT GIVEN AS TABLES AND AS A TEMPERATURE DEP# endENT def
#
# TABLES FOR 2SIGMAg  ATTACHMENT 
      DATA XATT/7.00,7.50,8.00,8.50,9.00,9.50,10.0,10.4,11.0,11.5,
     /12.0,12.5,13.0,13.5,14.0,14.5,15.0,15.5/
      DATA YATT/0.00,2.8D-6,1.18D-5,3.08D-5,5.88D-5,1.01D-4,1.18D-4,
     /1.29D-4,1.18D-4,1.01D-4,
     /7.28D-5,4.48D-5,2.66D-5,1.26D-5,6.72D-6,3.20D-6,8.0D-7,0.0/
# TOTAL IONISATION
# SEE NOTES BELOW ON DERIVATION OF TOTAL IONISATION X-SECTION                     
      DATA XION/15.418,16.0,16.5,17.0,17.5,18.0,18.5,19.0,19.5,20.0,    
     /20.5,21.0,21.5,22.0,22.5,23.0,23.5,24.0,24.5,25.0,                
     /25.5,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,45.0,                
     /50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,                
     /100.,105.,110.,115.,120.,125.,130.,135.,140.,145.,                
     /150.,160.,180.,200.,225.,250.,275.,300.,350.,400.,
     /450.,500.,550.,600.,650.,700.,750.,800.,850.,900.,
     /950.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,
     /4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,10000.,12000.,
     /14000.,16000./                
      DATA YION/0.00,.0295,.0598,.0910,.121,.154,.184,.217,.245,.276,   
     /.305,.331,.357,.384,.407,.433,.454,.477,.498,.516,                
     /.536,.555,.623,.678,.725,.765,.800,.828,.853,.900,                
     /.927,.945,.954,.957,.957,.956,.950,.944,.934,.920,                
     /.910,.902,.890,.878,.865,.851,.840,.832,.818,.809,                
     /.801,.776,.725,.687,.645,.605,.565,.537,.484,.443,
     /.404,.379,.343,.322,.307,.287,.276,.261,.251,.239,
     /.226,.214,.199,.165,.146,.133,.121,.101,.0865,.0754,
     /.0675,.0610,.0558,.0515,.0480,.0422,.0375,.0340,.0310,.0265,
     /.0234,.0208/   
# DISSOCIATIVE IONISATION X-SECTION STRAUB WITH EXTENSION TO 16KEV
#  USE CONSTANT RATIO FOR H2+ AND H+ ABOVE 1KEV
      DATA XIOND/18.076,25.0,30.0,35.0,40.0,45.0,50.0,55.0,60.0,65.0,
     /70.0,75.0,80.0,85.0,90.0,95.0,100.,110.,120.,140.,
     /160.,180.,200.,225.,250.,275.,300.,350.,400.,450.,
     /500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,
     /1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,
     /4500.,5000.,5500.,6000.,7000.,8000.,9000.,10000.,12000.,14000.,
     /16000./
      DATA YIOND/0.00,.00422,.00856,.0176,.0287,.0408,.0482,.0572,.0625,
     /.0682,
     /.0705,.0737,.0739,.0751,.0754,.0761,.0759,.0744,.0724,.0671,
     /.0639,.0592,.0545,.0505,.0450,.0412,.0392,.0339,.0294,.0260,
     /.0241,.0211,.0197,.0181,.0171,.0159,.0149,.0137,.0135,.0125,
     /.0117,.0109,.00902,.00798,.00727,.00662,.00552,.00473,.00412,
     /.00369,
     /.00333,.00305,.00282,.00262,.00231,.00205,.00186,.00169,.00145,
     /.00128,
     /.00114/
# BREMSSTRAHLUNG X-SECTION WITH CUT OFF  UNITS 10**-24
      DATA Z1T/11.3,6.18,2.80,1.54,.858,.407,.251,.176,.145,.150,
     /.167,.178,.187,.193,.198,.205,.210,.218,.222,.228,
     /.231,.233,.234,.235,.235/
      DATA EBRM/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,
     /2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,
     /4.E7,5.E7,6.E7,8.E7,1.E8/
#***********************************************************************
# IONISATION FROM WEIGHTED AVERAGE OF RAPP AND STRAUB UP TO 180EV
#  NORMALISED STRAUB BETWEEN 180 AND 1000EV : NORMALISED SCHRAM
#  BETWEEN 1 AND 16KEV.
#  ABOVE 16KEV USED BORN-BETHE WITH M2=0.642 AND C=8.3 CLOSE FIT TO 
#  RIEKE AND PREPEJCHAL  AND CONSISTENT WITH BERKOWITZ
# USE ORTHO IONISATION ENERGY AT ROOM TEMPERATURE
# DISSOCIATION ENERGY 0=4.47806952 EV
# ORTHO PARA ENERGY DIFFERENCE J=0 - J=1 FOR GROUND STATE =0.01469049 EV
#
# OSCILLATOR STRENGTHS FROM BERKOWITZ WITH SMALL CORRECTIONS FOR NEW
# IMPROVED FRANCK-CONDON FACTORS FOR LYMAN (B1 SIGMA) AND WERNER (C1 PI)
# TRIPLET X-SECTIONS FROM PUBLISHED ELECTRON SCATTERING UP TO 2010.
# LOWEST TRIPLET DISSOCIATIVE STATE (B3 SIGMA) SPLIT INTO FOUR LEVELS IN
# ORDER TO BETTER SIMULATE VARYING ENERGY LOSS.
# TRIPLET X-SECTIONS SCALED BY 0.9 TO BETTER FIT TOWNS# end COEFICIENT. 
# TRIPLET SCALING FACTOR WITHIN EXPERIMENTAL MEASUREMENT ERRORS. 
# ATTACHMENT X-SECTION INCLUDES TEMPERATURE DEP# endENCE FROM ROTATIONAL 
# POPULATION SHOULD BE ACCURATE UP TO 1000 KELVIN.
# MOMENTUM TRANSFER ELASTIC X-SECTION FROM SCHMIDT UP TO 1.0 EV , ABOVE
# 1.0 EV X-SECTION FROM FIT TO DRIFT VELOCITY.
# FIT TO WITHIN EXPERIMENTAL ERRORS OF DRIFT VELOCITY AND DIFFUSION FROM
# TABLE 14.6 OF HUXLEY AND CROMPTON.
# SOME EVIDENCE OF ELECTRON RUNAWAY ABOVE 300 TOWNS# end FROM CALCULATION.
#-----------------------------------------------------------------------
# 2015 UPDATE INCLUDES DISSOCIATIVE IONISATION AND Q STATES TO NEUTRALS
#-----------------------------------------------------------------------
      IF(NANISO == 0):
 :
       NAME=' H2  ISOTROPIC      2015 ' 
      else:
       NAME=' H2  ANISOTROPIC    2015 '
      # endIF
# ----------------------------------------------------------------------
#                                      
      CONST=1.873884D-20  
      EMASS2=1021997.804
      API=DACOS(-1.00)
      A0=0.52917720859D-8
      RY=13.60569193
      BBCONST=16.0*API*A0*A0*RY*RY/EMASS2
# BORN-BETHE CONSTANTS FOR IONISATION
      AM2=0.642
      C=8.30
#-----------------------------------------------------------------------
      NION=2
      NATT=1
      NIN=107 
      NNULL=0
# ARRAY SIZE
      NASIZE=4000
#
      NBREM=25
      DO 11 J=1,NIN
      IZBR(J)=0
   11 CONTINUE
      IZBR(108)=1
#
      DO 1 J=1,6
    1 KEL(J)=NANISO
      DO 2 J=5,NIN
    2 KIN(J)=NANISO
# SET  SUPERELASTIC TO ISOTROPIC ( X-SEC ZERO ABOVE 20EV)
      DO 22 J=1,4
   22 KIN(J)=0
      NELM=172                                                         
      NROT0=53                                                          
      NROT1=43                                                          
      NROT2=28                                                          
      NROT3=28                                                          
      NVIB1=43                                                          
      NVIB2=42                                                          
      NVIB3=13                                                          
      NVIB4=12 
      NB3S1=3
      NB3S2=6
      NB3S3=5
      NB3S4=8
      NC3PI=5
      NA3SG=5
      NE3SG=5
      NEFSG=34 
      NIONG=92                                                        
      NIOND=61                                                          
      NATT1=18    
#                                                       
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(2.015650*AMU)   
# IONISATION ENERGY FOR PARA =15.42580155 EV
# IONISATION ENERGY FOR ORTHO=15.41833111 EV
# USE ORTHO ENERGY FOR ROOM TEMPERATURE GAS
      E(3)=15.418 
      EION(1)=E(3)
# DISSOCIATIVE IONISATION THRESHOLD
      EION(2)=18.076
#                                                     
      E(4)=0.0                                     
      E(5)=0.0                              
      E(6)=0.0 
# OPAL BEATY FOR LOW ENERGY
      ESCOBY=0.5
      EOBY(1)=EION(1)*ESCOBY
      EOBY(2)=EION(2)*ESCOBY
# FLUORESENCE DATA
      DO 24 J=1,2
      LEGAS(J)=0
      ISHELL(J)=0
      NC0(J)=0
      EC0(J)=0.0
      WKLM(J)=0.0
      EFL(J)=0.0
      NG1(J)=0
      EG1(J)=0.0
      NG2(J)=0
      EG2(J)=0.0
   24 CONTINUE
# OFFSET ENERGY FOR IONISATION ANGULAR DISTRIBUTION
      DO 49 J=1,NION
      DO 48 I=1,NASIZE
      IF(EG(I):
 > EION(J)) :
       IOFFION(J)=I-1
       GO TO 49
      # endIF
   48 CONTINUE
   49 CONTINUE
#
      EIN(1)=-.043928
      EIN(2)=-.072741
      EIN(3)=-.10085
      EIN(4)=-.12797
      EIN(5)=0.043928                                                   
      EIN(6)=0.072741                                                  
      EIN(7)=0.10085                                                    
      EIN(8)=0.12797                                                 
      EIN(9)=0.515916                                                   
      EIN(10)=0.568                                                     
      EIN(11)=1.00265                                                   
      EIN(12)=1.46083 
# b3 SIGMA+ DISSOCIATION SPLIT INTO 4 ENERGY LOSSES
      EIN(13)=8.0  
      EIN(14)=9.0 
      EIN(15)=9.5 
      EIN(16)=10.0
# B1 SIGMA+ LYMAN BANDS
      EIN(17)=11.189
      EIN(18)=11.353
      EIN(19)=11.512
      EIN(20)=11.666
      EIN(21)=11.817
      EIN(22)=11.963
      EIN(23)=12.105
      EIN(24)=12.244
      EIN(25)=12.378
      EIN(26)=12.509
      EIN(27)=12.636
      EIN(28)=12.759
      EIN(29)=12.878
      EIN(30)=12.994
      EIN(31)=13.106
      EIN(32)=13.215
      EIN(33)=13.320
      EIN(34)=13.422
      EIN(35)=13.521
      EIN(36)=13.617
      EIN(37)=13.709
      EIN(38)=13.798
      EIN(39)=13.884
      EIN(40)=13.967
      EIN(41)=14.047
      EIN(42)=14.124
      EIN(43)=14.197
      EIN(44)=14.268
      EIN(45)=14.335
      EIN(46)=14.399
      EIN(47)=14.458
      EIN(48)=14.514
      EIN(49)=14.564
      EIN(50)=14.608
      EIN(51)=14.644
      EIN(52)=14.668
      EIN(53)=14.678
# C1 PI WERNER BANDS
      EIN(54)=12.285
      EIN(55)=12.571
      EIN(56)=12.840
      EIN(57)=13.094
      EIN(58)=13.332
      EIN(59)=13.553
      EIN(60)=13.758
      EIN(61)=13.947
      EIN(62)=14.119
      EIN(63)=14.273
      EIN(64)=14.408
      EIN(65)=14.522
      EIN(66)=14.611
      EIN(67)=14.672
# C3 PI 
      EIN(68)=11.779
      EIN(69)=13.100
# A3 SIGMA
      EIN(70)=11.793
      EIN(71)=12.684
# E3 SIGMA
      EIN(72)=13.253
# EF1 SIGMA
      EIN(73)=12.301
      EIN(74)=12.841   
# B#1 SIGMA BANDS
      EIN(75)=13.698
      EIN(76)=13.931
      EIN(77)=14.144
      EIN(78)=14.333
      EIN(79)=14.494
      EIN(80)=14.613
      EIN(81)=14.651
      EIN(82)=14.664
      EIN(83)=14.672 
# D1 PI BANDS
      EIN(84)=13.994
      EIN(85)=14.270
      EIN(86)=14.530
      EIN(87)=14.775
      EIN(88)=15.003
      EIN(89)=15.218
      EIN(90)=15.418
      EIN(91)=15.602
      EIN(92)=15.772
      EIN(93)=15.928
      EIN(94)=16.068
      EIN(95)=16.191
      EIN(96)=16.299
      EIN(97)=16.390
      EIN(98)=16.462
      EIN(99)=16.516 
# B##1 SIGMA
      EIN(100)=14.491
# D#1 PI 
      EIN(101)=14.609 
# B###1 SIGMA  + D##1 PI
      EIN(102)=14.899   
# B####1 SIGMA + D###1 PI
      EIN(103)=15.060
# B#####1 SIGAM + D####1 PI
      EIN(104)=15.150
# CONTINUUM DISSOCIATIVE EXC 
      EIN(105)=15.300
# PREDISSOCIATION ABOVE IONISATION POTENTIAL
      EIN(106)=15.800
# Q1 + Q2 STATES SINGLETS TO NEUTRAL DISSOCIATION
      EIN(107)=32.0
      EIN(108)=0.0
# BEF SCALING :  BINDING ENERGIES
      BEF(1)=E(3)
      BEF(2)=E(3)
      BEF(3)=E(3)
      BEF(4)=E(3)
      BEF(5)=E(3)
# 
# ATTACHMENT THRESHOLD EV FOR 2 SIGMAu
      EATTTH=3.723
# ATTACHMENT WIDTH FOR 2 SIGMAu
      EATTWD=0.45
# ATTACHMENT AMPLITUDE FOR 2 SIGMAu
      AMPATT=3.0D-21
# ATTACHMENT THRESHOLD EV FOR 2 SIGMAg
      EATTTH1=13.922
# ATTACHMENT WIDTH FOR 2 SIGMAg
      EATTWD1=0.95
# ATTACHMENT AMPLITUDE FOR 2 SIGMAg
      AMPATT1=3.0D-20
#-----------------------------------------------------------------------
# ROTATIONAL ENERGY LEVELS: ERLVL(N)
#  PARA - ORTHO ENERGY DIFFERENCE ( J=0 - J=1 ROT LEVEL) = 0.01469049 EV
#  REF :ASTROPHYS J.  282(1984)L85
      ERLVL(1)=0.01469049
      ERLVL(2)=EIN(5)
      ERLVL(3)=0.01469049+EIN(6)
      ERLVL(4)=EIN(5)+EIN(7)
      ERLVL(5)=0.01469049+EIN(6)+EIN(8)
      ERLVL(6)=EIN(5)+EIN(7)+0.15381
      ERLVL(7)=0.01469049+EIN(6)+EIN(8)+0.1794
#**********************************************************************
# ENTER PENNING TRANSFER FRACTION FOR EACH LEVEL
# USE TRANSFER FRACTION IN RANGE BETWEEN 0.0 AND 0.2 FOR MOST MIXTURES
      DO 50 NL=1,NIN
      PENFRA[1,NL]=0.0
# PENNING TRANSFER DISTANCE MICRONS
      PENFRA[2,NL]=1.0
# PENNING TRANSFER TIME PICOSECONDS
   50 PENFRA[3,NL]=1.0
#**********************************************************************
      IF(IPEN == 0):
 GO TO 4 
      DO 3 KDUM=1,NIN
      IF(PENFRA[1,KDUM] == 0.0):
 GO TO 3
      WRITE(6,999) NAME,EIN(KDUM),PENFRA[1,KDUM],PENFRA[2,KDUM],
     /PENFRA[3,KDUM]
  999 FORMAT(' GAS = ',A15,' ENERGY LEVEL = ',F7.4,' EV.',/,' PENNING PR
     /OBABILITY =',F5.3,' ABS.LENGTH =',F7.2,' DECAY TIME =',F7.1,/)    
    3 CONTINUE
#
# OFFSET ENERGY FOR EXCITATION LEVELS ANGULAR DISTRIBUTION
    4 DO 5 NL=1,NIN
      DO 651 I=1,NASIZE
      IF(EG(I):
 > abs(EIN(NL))) :
       IOFFN(NL)=I-1
       GO TO 5
      # endIF
  651 CONTINUE
    5 CONTINUE
#
# ROTATIONAL POPULATIONS
      DO 6 K=1,7,2
    6 PJ(K)=3*(2*K+1)*math.exp(-ERLVL(K)/AKT)
      DO 7 K=2,6,2
    7 PJ(K)=(2*K+1)*math.exp(-ERLVL(K)/AKT)
      SUM=1.0
      DO 8 K=1,7
    8 SUM=SUM+PJ(K)        
      FROT0=1.0/SUM                                                     
      FROT1=PJ(1)/SUM                                                   
      FROT2=PJ(2)/SUM                                                   
      FROT3=PJ(3)/SUM                                                   
      FROT4=PJ(4)/SUM                                                   
      FROT5=PJ(5)/SUM 
      FROT6=PJ(6)/SUM
      FROT7=PJ(7)/SUM 
#     WRITE(6,88) FROT0,FROT1,FROT2,FROT3,FROT4,FROT5,FROT6,FROT7
#  88 FORMAT(3X,' FROT0=',F9.6,' FROT1=',F9.6,' FROT2=',F9.6,' FROT3=',
#    /F9.6,' FROT4=',F9.6,' FROT5=',F9.6,' FROT6=',F9.6,' FROT7=',F9.6) 
#-----------------------------------------------------------------------        
#
      SCRPT(1)='                                                  '
      SCRPT(2)=' ELASTIC  ANISOTROPIC        HYDROGEN             '
      IF(NANISO == 0):
 :
      SCRPT(2)=' ELASTIC    ISOTROPIC        HYDROGEN             '
      # endIF
      SCRPT(3)=' IONISATION                       ELOSS= 15.418   '
      SCRPT(4)=' DISSOCIATIVE IONISATION          ELOSS= 18.076   '
      SCRPT(5)=' ATTACHMENT                                       '
      SCRPT(6)='                                                  '
      SCRPT(7)='                                                  '
      SCRPT(8)=' ROTATION   2-0                   ELOSS= -0.043928'
      SCRPT(9)=' ROTATION   3-1                   ELOSS= -0.072741'
      SCRPT(10)=' ROTATION   4-2                   ELOSS= -0.10085 '
      SCRPT(11)=' ROTATION   5-3                   ELOSS= -0.12797 '
      SCRPT(12)=' ROTATION   0-2                   ELOSS=  0.043928'
      SCRPT(13)=' ROTATION   1-3                   ELOSS=  0.072741'
      SCRPT(14)=' ROTATION   2-4 + 4-6 + 6-8       ELOSS=  0.10085 '
      SCRPT(15)=' ROTATION   3-5 + 5-7 + 7-9       ELOSS=  0.12797 ' 
      SCRPT(16)=' VIBRATION   V1 DJ=0              ELOSS=  0.515916'
      SCRPT(17)=' VIBRATION   V1 DJ=2              ELOSS=  0.568   '
      SCRPT(18)=' VIBRATION  2V1                   ELOSS=  1.00265 '
      SCRPT(19)=' VIBRATION  3V1                   ELOSS=  1.46083 '
      SCRPT(20)=' B3 SIG       DISSOCIATIVE        ELOSS=  8.00    '
      SCRPT(21)=' B3 SIG       DISSOCIATIVE        ELOSS=  9.00    '
      SCRPT(22)=' B3 SIG       DISSOCIATIVE        ELOSS=  9.50    '
      SCRPT(23)=' B3 SIG       DISSOCIATIVE        ELOSS= 10.00    '
      SCRPT(24)=' B1SIG V=0    LYMAN               ELOSS= 11.189   '
      SCRPT(25)=' B1SIG V=1    LYMAN               ELOSS= 11.353   '
      SCRPT(26)=' B1SIG V=2    LYMAN .001% DISSOC  ELOSS= 11.512   '
      SCRPT(27)=' B1SIG V=3    LYMAN 0.01% DISSOC  ELOSS= 11.666   '
      SCRPT(28)=' B1SIG V=4    LYMAN 0.15% DISSOC  ELOSS= 11.817   '
      SCRPT(29)=' B1SIG V=5    LYMAN 1.71% DISSOC  ELOSS= 11.963   '
      SCRPT(30)=' B1SIG V=6    LYMAN 3.09% DISSOC  ELOSS= 12.105   '
      SCRPT(31)=' B1SIG V=7    LYMAN 21.1% DISSOC  ELOSS= 12.244   '
      SCRPT(32)=' B1SIG V=8    LYMAN 29.1% DISSOC  ELOSS= 12.378   '
      SCRPT(33)=' B1SIG V=9    LYMAN 41.5% DISSOC  ELOSS= 12.509   '
      SCRPT(34)=' B1SIG V=10   LYMAN 41.0% DISSOC  ELOSS= 12.636   '
      SCRPT(35)=' B1SIG V=11   LYMAN 40.7% DISSOC  ELOSS= 12.759   '
      SCRPT(36)=' B1SIG V=12   LYMAN 52.3% DISSOC  ELOSS= 12.878   '
      SCRPT(37)=' B1SIG V=13   LYMAN 51.1% DISSOC  ELOSS= 12.994   '
      SCRPT(38)=' B1SIG V=14   LYMAN 54.2% DISSOC  ELOSS= 13.106   '
      SCRPT(39)=' B1SIG V=15   LYMAN 55.8% DISSOC  ELOSS= 13.216   '
      SCRPT(40)=' B1SIG V=16   LYMAN 55.4% DISSOC  ELOSS= 13.320   '
      SCRPT(41)=' B1SIG V=17   LYMAN 60.1% DISSOC  ELOSS= 13.422   '
      SCRPT(42)=' B1SIG V=18   LYMAN 60.8% DISSOC  ELOSS= 13.521   '
      SCRPT(43)=' B1SIG V=19   LYMAN 63.4% DISSOC  ELOSS= 13.617   '
      SCRPT(44)=' B1SIG V=20   LYMAN 63.7% DISSOC  ELOSS= 13.709   '
      SCRPT(45)=' B1SIG V=21   LYMAN 64.3% DISSOC  ELOSS= 13.798   '
      SCRPT(46)=' B1SIG V=22   LYMAN 65.1% DISSOC  ELOSS= 13.884   '
      SCRPT(47)=' B1SIG V=23   LYMAN 65.9% DISSOC  ELOSS= 13.967   '
      SCRPT(48)=' B1SIG V=24   LYMAN 67.7% DISSOC  ELOSS= 14.047   '
      SCRPT(49)=' B1SIG V=25   LYMAN 69.1% DISSOC  ELOSS= 14.124   '
      SCRPT(50)=' B1SIG V=26   LYMAN 71.2% DISSOC  ELOSS= 14.197   '
      SCRPT(51)=' B1SIG V=27   LYMAN 73.0% DISSOC  ELOSS= 14.268   '
      SCRPT(52)=' B1SIG V=28   LYMAN 75.3% DISSOC  ELOSS= 14.335   '
      SCRPT(53)=' B1SIG V=29   LYMAN 77.4% DISSOC  ELOSS= 14.399   '
      SCRPT(54)=' B1SIG V=30   LYMAN 79.5% DISSOC  ELOSS= 14.458   '
      SCRPT(55)=' B1SIG V=31   LYMAN 81.6% DISSOC  ELOSS= 14.514   '
      SCRPT(56)=' B1SIG V=32   LYMAN 84.2% DISSOC  ELOSS= 14.564   '
      SCRPT(57)=' B1SIG V=33   LYMAN 87.3% DISSOC  ELOSS= 14.608   '
      SCRPT(58)=' B1SIG V=34   LYMAN 91.1% DISSOC  ELOSS= 14.644   '
      SCRPT(59)=' B1SIG V=35   LYMAN 95.6% DISSOC  ELOSS= 14.668   '
      SCRPT(60)=' B1SIG V=36   LYMAN 99.5% DISSOC  ELOSS= 14.678   '
      SCRPT(61)=' C1 PI V=0    WERNER              ELOSS= 12.285   '
      SCRPT(62)=' C1 PI V=1    WERNER              ELOSS= 12.571   '
      SCRPT(63)=' C1 PI V=2    WERNER              ELOSS= 12.840   '
      SCRPT(64)=' C1 PI V=3    WERNER              ELOSS= 13.094   '
      SCRPT(65)=' C1 PI V=4    WERNER              ELOSS= 13.332   '
      SCRPT(66)=' C1 PI V=5    WERNER              ELOSS= 13.553   '
      SCRPT(67)=' C1 PI V=6    WERNER .067% DISSOC ELOSS= 13.758   '
      SCRPT(68)=' C1 PI V=7    WERNER .145% DISSOC ELOSS= 13.947   '
      SCRPT(69)=' C1 PI V=8    WERNER 3.72% DISSOC ELOSS= 14.119   '
      SCRPT(70)=' C1 PI V=9    WERNER 6.43% DISSOC ELOSS= 14.273   '
      SCRPT(71)=' C1 PI V=10   WERNER 37.7% DISSOC ELOSS= 14.408   '
      SCRPT(72)=' C1 PI V=11   WERNER 42.5% DISSOC ELOSS= 14.522   '
      SCRPT(73)=' C1 PI V=12   WERNER 64.2% DISSOC ELOSS= 14.611   '
      SCRPT(74)=' C1 PI V=13   WERNER 82.5% DISSOC ELOSS= 14.672   '
      SCRPT(75)=' C3 PI V=0-4  DISSOCIATIVE        ELOSS= 11.779   '
      SCRPT(76)=' C3 PI V=5-18 DISSOCIATIVE        ELOSS= 13.100   '
      SCRPT(77)=' A3SIG V=0-3  DISSOCIATIVE        ELOSS= 11.793   '
      SCRPT(78)=' A3SIG V=3-17 DISSOCIATIVE        ELOSS= 12.684   '
      SCRPT(79)=' E3SIG V=0-9  DISSOCIATIVE        ELOSS= 13.253   '
      SCRPT(80)=' EF1SIG V=0-5        50.0% DISSOC ELOSS= 12.301   '
      SCRPT(81)=' EF1SIG V=6-19       50.0% DISSOC ELOSS= 12.841   '
      SCRPT(82)=' B#1SIG V=0                       ELOSS= 13.698   '
      SCRPT(83)=' B#1SIG V=1                       ELOSS= 13.931   '
      SCRPT(84)=' B#1SIG V=2                       ELOSS= 14.144   '
      SCRPT(85)=' B#1SIG V=3                       ELOSS= 14.333   '
      SCRPT(86)=' B#1SIG V=4                       ELOSS= 14.494   '
      SCRPT(87)=' B#1SIG V=5                       ELOSS= 14.613   '
      SCRPT(88)=' B#1SIG V=6    6.5% DISSOC        ELOSS= 14.651   '
      SCRPT(89)=' B#1SIG V=7   15.2% DISSOC        ELOSS= 14.664   '
      SCRPT(90)=' B#1SIG V=8   45.1% DISSOC        ELOSS= 14.672   '
      SCRPT(91)=' D1 PI  V=0                       ELOSS= 13.994   '
      SCRPT(92)=' D1 PI  V=1                       ELOSS= 14.270   '
      SCRPT(93)=' D1 PI  V=2                       ELOSS= 14.530   '
      SCRPT(94)=' D1 PI  V=3                       ELOSS= 14.775   '
      SCRPT(95)=' D1 PI  V=4                       ELOSS= 15.003   '
      SCRPT(96)=' D1 PI  V=5   .002% DISSOC        ELOSS= 15.218   '
      SCRPT(97)=' D1 PI  V=6   .077% DISSOC        ELOSS= 15.418   '
      SCRPT(98)=' D1 PI  V=7   0.39% DISSOC        ELOSS= 15.602   '
      SCRPT(99)=' D1 PI  V=8   3.71% DISSOC        ELOSS= 15.772   '
      SCRPT(100)=' D1 PI  V=9   10.3% DISSOC        ELOSS= 15.928   '
      SCRPT(101)=' D1 PI  V=10  35.7% DISSOC        ELOSS= 16.068   '
      SCRPT(102)=' D1 PI  V=11  48.1% DISSOC        ELOSS= 16.191   '
      SCRPT(103)=' D1 PI  V=12  52.7% DISSOC        ELOSS= 16.299   '
      SCRPT(104)=' D1 PI  V=13  63.8% DISSOC        ELOSS= 16.390   '
      SCRPT(105)=' D1 PI  V=14  85.9% DISSOC        ELOSS= 16.462   '
      SCRPT(106)=' D1 PI  V=15  87.0% DISSOC        ELOSS= 16.516   '
      SCRPT(107)=' B##SIG V=0-6 DISSOCIATIVE        ELOSS= 14.491   '
      SCRPT(108)=' D#1 PI V=0-3 DISSOCIATIVE        ELOSS= 14.609   '
      SCRPT(109)=' 5P SIG 6P PI DISSOCIATIVE        ELOSS= 14.899   '
      SCRPT(110)=' 6P SIG 6P PI DISSOCIATIVE        ELOSS= 15.060   '
      SCRPT(111)=' 7P SIG 7P PI DISSOCIATIVE        ELOSS= 15.150   '
      SCRPT(112)=' CONTINUUM EX DISSOCIATIVE        EL0SS= 15.300   '
      SCRPT(113)=' PREDISS >IP  DISSOCIATIVE        ELOSS= 15.800   '
      SCRPT(114)=' Q1 +Q2  SINGLETS NEUTRAL DISS    ELOSS= 32.0     '
      SCRPT(115)=' BREMSSTRAHLUNG FROM HYDROGEN ATOMS               '
# 
c*****************************                    
#      EN=-ESTEP/2.0           
#**************************                           
      DO 900 I=1,NSTEP 
      EN=EG(I)                                                  
#     EN=EN+ESTEP   
      IF(EN > EIN(1):
) :
       GAMMA1=(EMASS2+2.00*EN)/EMASS2
       GAMMA2=GAMMA1*GAMMA1
       BETA=math.sqrt(1.00-1.00/GAMMA2)
       BETA2=BETA*BETA
      # endIF 
#                                                                     
      DO 60 J=2,NELM                                                   
      IF(EN <= XELM(J):
) GO TO 70                                       
   60 CONTINUE                                                          
      J=NELM 
# ELASTIC MOMENTUM TRANSFER                                                          
   70 A=(YELM(J)-YELM(J-1))/(XELM(J)-XELM(J-1))                         
      B=(XELM(J-1)*YELM(J)-XELM(J)*YELM(J-1))/(XELM(J-1)-XELM(J))      
      QMOM=(A*EN+B)*1.0D-16   
# ELASTIC X-SECTION  
      A=(YELT(J)-YELT(J-1))/(XELM(J)-XELM(J-1))                         
      B=(XELM(J-1)*YELT(J)-XELM(J)*YELT(J-1))/(XELM(J-1)-XELM(J))      
      QELA=(A*EN+B)*1.0D-16
# ANGULAR DISTRIBUTION FACTOR ( OKRIMOVSKKY)
      A=(YEPS(J)-YEPS(J-1))/(XELM(J)-XELM(J-1))                         
      B=(XELM(J-1)*YEPS(J)-XELM(J)*YEPS(J-1))/(XELM(J-1)-XELM(J))      
      PQ2=A*EN+B      
# EPSILON =1.0-YEPS
      PQ2=1.00-PQ2       
      PQ1=0.5+(QELA-QMOM)/QELA
      IF(NANISO == 0):
 PEQEL(2,I)=0.5
      IF(NANISO == 1):
 PEQEL(2,I)=PQ1
      IF(NANISO == 2):
 PEQEL(2,I)=PQ2
      Q(2,I)=QELA
      IF(NANISO == 0):
 Q(2,I)=QMOM                                   
# GROSS IONISATION                                                      
      QION(1,I)=0.0  
      PEQION(1,I)=0.50
      IF(NANISO == 2):
 PEQION(1,I)=0.00
      IF(EN < EION(1):
) GO TO 123    
      IF(EN > XION(NIONG):
) GO TO 121                                  
      DO 110 J=2,NIONG                                                  
      IF(EN <= XION(J):
) GO TO 120                                       
  110 CONTINUE                                                          
      J=NIONG                                                  
  120 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      QION(1,I)=(A*EN+B)*1.D-16                    
      GO TO 122
# USE BORN-BETHE X-SECTION ABOVE XION(NIONG) EV
  121 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(1,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)
  122 CONTINUE
      IF(EN <= (2.0*EION(1):
)) GO TO 123
      PEQION(1,I)=PEQEL(2,(I-IOFFION(1)))  
# DISSOCIATIVE IONISATION
  123 QION(2,I)=0.0
      PEQION(2,I)=0.50
      IF(NANISO == 2):
 PEQION(2,I)=0.00
      IF(EN < EION(2):
) GO TO 150
      IF(EN > (XIOND[NIOND]):
) GO TO 141
      DO 130 J=2,NIOND
      IF(EN <= XIOND[J]):
 GO TO 140
  130 CONTINUE
      J=NIOND
  140 A=(YIOND[J]-YIOND[J-1])/(XIOND[J]-XIOND[J-1])                  
      B=(XIOND[J-1]*YIOND[J]-XIOND[J]*YIOND[J-1])/(XIOND[J-1]-XIOND[J])
      QION(2,I)=(A*EN+B)*1.D-16
      GO TO 142
# USE BORN-BETHE X-SECTION ABOVE XIOND[NIOND] EV
  141 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(2,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.05481 
  142 CONTINUE
      IF(EN <= (2.0*EION(2):
)) GO TO 150
      PEQION(2,I)=PEQEL(2,(I-IOFFION(2)))
# CALCULATE NON-DISSOCIATIVE IONISATION
  150  IF(QION(1,I) == 0.0) GO TO 200
       QION(1,I)=QION(1,I)-QION(2,I)
# ATTACHMENT                                                            
  200 Q(4,I)=0.0
      QATT(1,I)=Q(4,I)
      PEQEL(4,I)=0.5
      IF(NANISO == 2):
 PEQEL(4,I)=0.0
# ROTATIONAL DEP# endANCE OF ATTACHMENT TO 2 SIGMAu
      IF(EN < (EATTTH-ERLVL(7):
)) GO TO 300
      Q(4,I)=AMPATT*5.00*FROT7*math.exp(-(EN-EATTTH+ERLVL(7))/EATTWD)
      IF(EN < (EATTTH-ERLVL(6):
)) GO TO 300
      Q(4,I)=Q(4,I)+AMPATT*3.96*FROT6*math.exp(-(EN-EATTTH+ERLVL(6))/EATTWD)
      IF(EN < (EATTTH-ERLVL(5):
)) GO TO 300
      Q(4,I)=Q(4,I)+AMPATT*3.15*FROT5*math.exp(-(EN-EATTTH+ERLVL(5))/EATTWD)
      IF(EN < (EATTTH-ERLVL(4):
)) GO TO 300
      Q(4,I)=Q(4,I)+AMPATT*2.50*FROT4*math.exp(-(EN-EATTTH+ERLVL(4))/EATTWD)
      IF(EN < (EATTTH-ERLVL(3):
)) GO TO 300
      Q(4,I)=Q(4,I)+AMPATT*1.99*FROT3*math.exp(-(EN-EATTTH+ERLVL(3))/EATTWD)
      IF(EN < (EATTTH-ERLVL(2):
)) GO TO 300
      Q(4,I)=Q(4,I)+AMPATT*1.58*FROT2*math.exp(-(EN-EATTTH+ERLVL(2))/EATTWD)
      IF(EN < (EATTTH-ERLVL(1):
)) GO TO 300
      Q(4,I)=Q(4,I)+AMPATT*1.26*FROT1*math.exp(-(EN-EATTTH+ERLVL(1))/EATTWD)
      IF(EN < EATTTH):
 GO TO 300
      Q(4,I)=Q(4,I)+AMPATT*FROT0*math.exp(-(EN-EATTTH)/EATTWD)
      IF(EN < XATT(1):
) GO TO 300
# ATTACHMENT TO 2 SIGMAg   
      IF(EN > XATT(NATT1):
) GO TO 250                                   
      DO 210 J=2,NATT1                                                  
      IF(EN <= XATT(J):
) GO TO 220  
  210 CONTINUE                                                          
      J=NATT1                                                           
  220 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))                         
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))       
      Q(4,I)=Q(4,I)+(A*EN+B)*1.D-16                 
# HIGH ENERGY ATTACHMENT TO 2 SIGMAg
# 250 CONTINUE  
  250 IF(EN <= EATTTH1) GO TO 300
      Q(4,I)=Q(4,I)+AMPATT1*math.exp(-(EN-EATTTH1)/EATTWD1)
  300 QATT(1,I)=Q(4,I)
#                   
      Q(5,I)=0.0                                               
      Q(6,I)=0.0 
#
      DO 1005 NL=1,NIN+1
      QIN(NL,I)=0.00
      PEQIN(NL,I)=0.50
      IF(NANISO == 2):
 :
       PEQIN(NL,I)=0.00  
      # endIF
 1005 CONTINUE                                                     
#--------------------------------------------------------------------- 
#                    SUPERELASTIC 2-0
      IF(EN <= 0.0):
 GO TO 1100
      IF(EN > XROT0(NROT0):
) GO TO 1100
      DO 1010 J=2,NROT0
      IF((EN+EIN(5):
) <= XROT0(J)) GO TO 1020
 1010 CONTINUE
      J=NROT0
 1020 A=(YROT0(J)-YROT0(J-1))/(XROT0(J)-XROT0(J-1))                     
      B=(XROT0(J-1)*YROT0(J)-XROT0(J)*YROT0(J-1))/(XROT0(J-1)-XROT0(J))
      QIN(1,I)=FROT2*0.2*(EN+EIN(5))*(A*(EN+EIN(5))+B)*1.D-16/EN 
#                    SUPERELASTIC 3-1
 1100 IF(EN <= 0.0) GO TO 1200 
      IF(EN > XROT1(NROT1):
) GO TO 1200
      DO 1110 J=2,NROT1
      IF((EN+EIN(6):
) <= XROT1(J)) GO TO 1120
 1110 CONTINUE
      J=NROT1
 1120 A=(YROT1(J)-YROT1(J-1))/(XROT1(J)-XROT1(J-1))                     
      B=(XROT1(J-1)*YROT1(J)-XROT1(J)*YROT1(J-1))/(XROT1(J-1)-XROT1(J)) 
      QIN(2,I)=FROT3*(3.0/7.0)*(EN+EIN(6))*(A*(EN+EIN(6))+B)*1.D-16/EN 
#                    SUPERELASTIC 4-2
 1200 IF(EN <= 0.0) GO TO 1250
      IF(EN > XROT2(NROT2):
) GO TO 1250
      DO 1210 J=2,NROT2
      IF((EN+EIN(7):
) <= XROT2(J)) GO TO 1220
 1210 CONTINUE
      J=NROT2
 1220 A=(YROT2(J)-YROT2(J-1))/(XROT2(J)-XROT2(J-1))                     
      B=(XROT2(J-1)*YROT2(J)-XROT2(J)*YROT2(J-1))/(XROT2(J-1)-XROT2(J))
      QIN(3,I)=FROT4*(5.0/9.0)*(EN+EIN(7))*(A*(EN+EIN(7))+B)*1.D-16/EN 
#                    SUPERELASTIC 5-3 
 1250 IF(EN <= 0.0) GO TO 1290
      IF(EN > XROT3(NROT3):
) GO TO 1290
      DO 1260 J=2,NROT3
      IF((EN+EIN(8):
) <= XROT3(J)) GO TO 1270
 1260 CONTINUE
      J=NROT3
 1270 A=(YROT3(J)-YROT3(J-1))/(XROT3(J)-XROT3(J-1))                     
      B=(XROT3(J-1)*YROT3(J)-XROT3(J)*YROT3(J-1))/(XROT3(J-1)-XROT3(J))
      QIN(4,I)=FROT5*(7.0/11.)*(EN+EIN(8))*(A*(EN+EIN(8))+B)*1.D-16/EN 
#                      ROTATION 0-2 
 1290 IF(EN <= EIN(5)) GO TO 1400
      IF(EN > XROT0(NROT0):
) GO TO 1330                         
      DO 1310 J=2,NROT0                                                 
      IF(EN <= XROT0(J):
) GO TO 1320                                     
 1310 CONTINUE                                                          
      J=NROT0                                                           
 1320 A=(YROT0(J)-YROT0(J-1))/(XROT0(J)-XROT0(J-1))                     
      B=(XROT0(J-1)*YROT0(J)-XROT0(J)*YROT0(J-1))/(XROT0(J-1)-XROT0(J)) 
      QIN(5,I)=(A*EN+B)*1.D-16*FROT0        
      GO TO 2330 
 1330 QIN(5,I)=YROT0(NROT0)*1.D-16*FROT0*XROT0(NROT0)/EN  
 2330 IF(EN <= (2.0*EIN(5))) GO TO 1400
      PEQIN(5,I)=PEQEL(2,(I-IOFFN(5)))
#                        ROTATION 1-3                                   
 1400 IF(EN <= EIN(6)) GO TO 1401
      IF(EN > XROT1(NROT1):
) GO TO 1331                     
      DO 1311 J=2,NROT1                                                 
      IF(EN <= XROT1(J):
) GO TO 1321                                     
 1311 CONTINUE                                                          
      J=NROT1                                                           
 1321 A=(YROT1(J)-YROT1(J-1))/(XROT1(J)-XROT1(J-1))                     
      B=(XROT1(J-1)*YROT1(J)-XROT1(J)*YROT1(J-1))/(XROT1(J-1)-XROT1(J)) 
      QIN(6,I)=(A*EN+B)*1.D-16*FROT1           
      GO TO 2331
 1331 QIN(6,I)=YROT1(NROT1)*1.D-16*FROT1*XROT1(NROT1)/EN         
 2331 IF(EN <= (2.0*EIN(6))) GO TO 1401
      PEQIN(6,I)=PEQEL(2,(I-IOFFN(6)))
#                      ROTATION 2-4 + 4-6 + 6-8
# USED SCALED 2-4 XSECTION FOR 4-6 AND 6-8 
c ALSO SCALED FOR ENERGY LOSS BY 1.5 FOR 4-6 AND BY 2.0 FOR 6-8                              
 1401 IF(EN <= EIN(7)) GO TO 1402
      IF(EN > XROT2(NROT2):
) GO TO 1332                               
      DO 1312 J=2,NROT2                                                 
      IF(EN <= XROT2(J):
) GO TO 1322                                     
 1312 CONTINUE                                                          
      J=NROT2                                                           
 1322 A=(YROT2(J)-YROT2(J-1))/(XROT2(J)-XROT2(J-1))                     
      B=(XROT2(J-1)*YROT2(J)-XROT2(J)*YROT2(J-1))/(XROT2(J-1)-XROT2(J)) 
      QIN(7,I)=(A*EN+B)*1.D-16*(FROT2+FROT4*0.8*1.5+FROT6*0.5*2.0)    
      GO TO 2332
 1332 QIN(7,I)=YROT2(NROT2)*1.D-16*(FROT2+FROT4*0.8*1.5+FROT6*0.5*2.0)
      QIN(7,I)=QIN(7,I)*XROT2(NROT2)/EN   
 2332 IF(EN <= (2.0*EIN(7))) GO TO 1402
      PEQIN(7,I)=PEQEL(2,(I-IOFFN(7)))
#                        ROTATION 3-5 + 5-7 + 7-9
# USED SCALED 3-5 XSECTION FOR 5-7 AND 7-9 
# ALSO SCALED FOR ENERGY LOSS BY 1.4 FOR 5-7 AND 1.8 FOR 7-9     
 1402 IF(EN <= EIN(8)) GO TO 1403 
      IF(EN > XROT3(NROT3):
) GO TO 1333                        
      DO 1313 J=2,NROT3                                                 
      IF(EN <= XROT3(J):
) GO TO 1323                                     
 1313 CONTINUE                                                          
      J=NROT3                                                           
 1323 A=(YROT3(J)-YROT3(J-1))/(XROT3(J)-XROT3(J-1))                     
      B=(XROT3(J-1)*YROT3(J)-XROT3(J)*YROT3(J-1))/(XROT3(J-1)-XROT3(J)) 
      QIN(8,I)=(A*EN+B)*1.D-16*(FROT3+FROT5*0.8*1.4+FROT7*0.5*1.8)   
      GO TO 2333
 1333 QIN(8,I)=YROT3(NROT3)*1.D-16*(FROT3+FROT5*0.8*1.4+FROT7*0.5*1.8)
      QIN(8,I)=QIN(8,I)*XROT3(NROT3)/EN
 2333 IF(EN <= (2.0*EIN(8))) GO TO 1403
      PEQIN(8,I)=PEQEL(2,(I-IOFFN(8)))
#-----------------------------------------------------------------------
# VIBRATION  V1   WITH DJ=0
 1403 IF(EN <= EIN(9)) GO TO 304  
      IF(EN > XVIB1(NVIB1):
) GO TO 303                         
      DO 301 J=2,NVIB1                                                  
      IF(EN <= XVIB1(J):
) GO TO 302                                      
  301 CONTINUE                                                          
      J=NVIB1                                                           
  302 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J)) 
      QIN(9,I)=(A*EN+B)*1.D-16        
      GO TO 1303
  303 QIN(9,I)=YVIB1(NVIB1)*1.D-16*XVIB1(NVIB1)/EN
 1303 IF(EN <= (2.0*EIN(9))) GO TO 304 
      PEQIN(9,I)=PEQEL(2,(I-IOFFN(9)))
#                      
#  VIBRATION  V1   WITH DJ=2                                               
  304 IF(EN <= EIN(10)) GO TO 308    
      IF(EN > XVIB2(NVIB2):
) GO TO 307                               
      DO 305 J=2,NVIB2                                                  
      IF(EN <= XVIB2(J):
) GO TO 306                                      
  305 CONTINUE                                                          
      J=NVIB2                                                           
  306 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J)) 
      QIN(10,I)=(A*EN+B)*1.D-16               
      GO TO 1307
  307 QIN(10,I)=YVIB2(NVIB2)*1.D-16*XVIB2(NVIB2)/EN   
 1307 IF(EN <= (2.0*EIN(10))) GO TO 308 
      PEQIN(10,I)=PEQEL(2,(I-IOFFN(10)))
#            
# VIBRATION V2                                                         
  308 IF(EN <= EIN(11)) GO TO 312 
      IF(EN > XVIB3(NVIB3):
) GO TO 311                       
      DO 309 J=2,NVIB3                                                  
      IF(EN <= XVIB3(J):
) GO TO 310                                      
  309 CONTINUE                                                          
      J=NVIB3                                                           
  310 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J)) 
      QIN(11,I)=(A*EN+B)*1.D-16
      GO TO 2311
  311 QIN(11,I)=YVIB3(NVIB3)*1.D-16*XVIB3(NVIB3)/EN  
 2311 IF(EN <= (2.0*EIN(11))) GO TO 312 
      PEQIN(11,I)=PEQEL(2,(I-IOFFN(11)))
#
# VIBRATION V3                                       
  312 IF(EN <= EIN(12)) GO TO 316 
      IF(EN > XVIB4(NVIB4):
) GO TO 315                               
      DO 313 J=2,NVIB4                                                  
      IF(EN <= XVIB4(J):
) GO TO 314                                      
  313 CONTINUE                                                          
      J=NVIB4                                                           
  314 A=(YVIB4(J)-YVIB4(J-1))/(XVIB4(J)-XVIB4(J-1))                     
      B=(XVIB4(J-1)*YVIB4(J)-XVIB4(J)*YVIB4(J-1))/(XVIB4(J-1)-XVIB4(J)) 
      QIN(12,I)=(A*EN+B)*1.D-16       
      GO TO 1315
  315 QIN(12,I)=YVIB4(NVIB4)*1.D-16*XVIB4(NVIB4)/EN      
 1315 IF(EN <= (2.0*EIN(12))) GO TO 316 
      PEQIN(12,2)=PEQEL(2,(I-IOFFN(12)))
#        
#  B3 SIGMA DISSOCIATION ELOSS=8.0EV                        
  316 IF(EN <= EIN(13)) GO TO 320
      IF(EN > XB3S1(NB3S1):
) GO TO 320 
      DO 317 J=2,NB3S1                                                  
      IF(EN <= XB3S1(J):
) GO TO 318                                      
  317 CONTINUE                                                          
      J=NB3S1                                                           
  318 A=(YB3S1(J)-YB3S1(J-1))/(XB3S1(J)-XB3S1(J-1))                     
      B=(XB3S1(J-1)*YB3S1(J)-XB3S1(J)*YB3S1(J-1))/(XB3S1(J-1)-XB3S1(J)) 
      QIN(13,I)=(A*EN+B)*1.D-16
      IF(EN <= (2.0*EIN(13):
)) GO TO 320 
      PEQIN(13,2)=PEQEL(2,(I-IOFFN(13)))
#       
#  B3 SIGMA DISSOCIATION ELOSS=9.0EV                                               
  320 IF(EN <= EIN(14)) GO TO 324  
      IF(EN > XB3S2(NB3S2):
) GO TO 324                               
      DO 321 J=2,NB3S2                                                  
      IF(EN <= XB3S2(J):
) GO TO 322                                      
  321 CONTINUE                                                          
      J=NB3S2                                                           
  322 A=(YB3S2(J)-YB3S2(J-1))/(XB3S2(J)-XB3S2(J-1))                     
      B=(XB3S2(J-1)*YB3S2(J)-XB3S2(J)*YB3S2(J-1))/(XB3S2(J-1)-XB3S2(J)) 
      QIN(14,I)=(A*EN+B)*1.D-16
      IF(EN <= (2.0*EIN(14):
)) GO TO 324 
      PEQIN(14,2)=PEQEL(2,(I-IOFFN(14)))
#                                 
# B3 SIGMA DISSOCIATION ELOSS=9.5EV
  324 IF(EN <= EIN(15)) GO TO 328 
      IF(EN > XB3S3(NB3S3):
) GO TO 328                               
      DO 325 J=2,NB3S3                                                  
      IF(EN <= XB3S3(J):
) GO TO 326                                      
  325 CONTINUE                                                          
      J=NB3S3                                                           
  326 A=(YB3S3(J)-YB3S3(J-1))/(XB3S3(J)-XB3S3(J-1))                     
      B=(XB3S3(J-1)*YB3S3(J)-XB3S3(J)*YB3S3(J-1))/(XB3S3(J-1)-XB3S3(J)) 
      QIN(15,I)=(A*EN+B)*1.D-16   
      IF(EN <= (2.0*EIN(15):
)) GO TO 328 
      PEQIN(15,2)=PEQEL(2,(I-IOFFN(15)))
#                                                                       
# B3 SIGMA DISSOCIATION ELOSS=10.0EV 
# SCALED BY 1/E**3 ABOVE XB3S4(NB3S4) EV
  328 IF(EN <= EIN(16)) GO TO 332 
      IF(EN > XB3S4(NB3S4):
) GO TO 331                               
      DO 329 J=2,NB3S4                                                  
      IF(EN <= XB3S4(J):
) GO TO 330                                      
  329 CONTINUE                                                          
      J=NB3S4                                                           
  330 A=(YB3S4(J)-YB3S4(J-1))/(XB3S4(J)-XB3S4(J-1))                     
      B=(XB3S4(J-1)*YB3S4(J)-XB3S4(J)*YB3S4(J-1))/(XB3S4(J-1)-XB3S4(J)) 
      QIN(16,I)=(A*EN+B)*1.D-16   
      GO TO 3331
  331 QIN(16,I)=YB3S4(NB3S4)*1.D-16*(XB3S4(NB3S4)/EN)**3
 3331 IF(EN <= (2.0*EIN(16))) GO TO 332 
      PEQIN(16,2)=PEQEL(2,(I-IOFFN(16)))
#   LYMAN BANDS FOR VIB=0 TO 36    B1 SIGMA--- GROUND STATE             
#   DIPOLE ALLOWED  
# V=0                                                           
  332 IF(EN <= EIN(17)) GO TO 333
      QIN(17,I)=.0016884/(EIN(17)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(17)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(17)+BEF(1))
      IF(QIN(17,I):
 < 0.0) QIN(17,I)=0.0
      IF(EN <= (2.0*EIN(17):
)) GO TO 333
      PEQIN(17,I)=PEQEL(2,(I-IOFFN(17)))
# V=1 B1 SIGMA
  333 IF(EN <= EIN(18)) GO TO 334
      QIN(18,I)=.005782/(EIN(18)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(18)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(18)+BEF(1))
      IF(QIN(18,I):
 < 0.0) QIN(18,I)=0.0
      IF(EN <= (2.0*EIN(18):
)) GO TO 334
      PEQIN(18,I)=PEQEL(2,(I-IOFFN(18)))
# V=2 B1 SIGMA
  334 IF(EN <= EIN(19)) GO TO 335
      QIN(19,I)=.011536/(EIN(19)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(19)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(19)+BEF(1))
      IF(QIN(19,I):
 < 0.0) QIN(19,I)=0.0
      IF(EN <= (2.0*EIN(18):
)) GO TO 335
      PEQIN(19,I)=PEQEL(2,(I-IOFFN(19)))
# V=3 B1 SIGMA
  335 IF(EN <= EIN(20)) GO TO 336
      QIN(20,I)=.017531/(EIN(20)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(20)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(20)+BEF(1))
      IF(QIN(20,I):
 < 0.0) QIN(20,I)=0.0
      IF(EN <= (2.0*EIN(20):
)) GO TO 336
      PEQIN(20,I)=PEQEL(2,(I-IOFFN(20)))
# V=4 B1 SIGMA
  336 IF(EN <= EIN(21)) GO TO 337
      QIN(21,I)=.022477/(EIN(21)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(21)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(21)+BEF(1))
      IF(QIN(21,I):
 < 0.0) QIN(21,I)=0.0
      IF(EN <= (2.0*EIN(21):
)) GO TO 337
      PEQIN(21,I)=PEQEL(2,(I-IOFFN(21)))
# V=5 B1 SIGMA
  337 IF(EN <= EIN(22)) GO TO 338
      QIN(22,I)=.025688/(EIN(22)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(22)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(22)+BEF(1))
      IF(QIN(22,I):
 < 0.0) QIN(22,I)=0.0
      IF(EN <= (2.0*EIN(22):
)) GO TO 338
      PEQIN(22,I)=PEQEL(2,(I-IOFFN(22)))
# V=6 B1 SIGMA
  338 IF(EN <= EIN(23)) GO TO 339
      QIN(23,I)=.027021/(EIN(23)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(23)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(23)+BEF(1))
      IF(QIN(23,I):
 < 0.0) QIN(23,I)=0.0
      IF(EN <= (2.0*EIN(23):
)) GO TO 339
      PEQIN(23,I)=PEQEL(2,(I-IOFFN(23)))
# V=7 B1 SIGMA
  339 IF(EN <= EIN(24)) GO TO 340
      QIN(24,I)=.026731/(EIN(24)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(24)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(24)+BEF(1))
      IF(QIN(24,I):
 < 0.0) QIN(24,I)=0.0
      IF(EN <= (2.0*EIN(24):
)) GO TO 340
      PEQIN(24,I)=PEQEL(2,(I-IOFFN(24)))
# V=8 B1 SIGMA
  340 IF(EN <= EIN(25)) GO TO 341
      QIN(25,I)=.025233/(EIN(25)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(25)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(25)+BEF(1))
      IF(QIN(25,I):
 < 0.0) QIN(25,I)=0.0
      IF(EN <= (2.0*EIN(25):
)) GO TO 341
      PEQIN(25,I)=PEQEL(2,(I-IOFFN(25)))
# V=9 B1 SIGMA
  341 IF(EN <= EIN(26)) GO TO 342
      QIN(26,I)=.022980/(EIN(26)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(26)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(26)+BEF(1))
      IF(QIN(26,I):
 < 0.0) QIN(26,I)=0.0
      IF(EN <= (2.0*EIN(26):
)) GO TO 342
      PEQIN(26,I)=PEQEL(2,(I-IOFFN(26)))
# V=10 B1 SIGMA
  342 IF(EN <= EIN(27)) GO TO 343
      QIN(27,I)=.020362/(EIN(27)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(27)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(27)+BEF(1))
      IF(QIN(27,I):
 < 0.0) QIN(27,I)=0.0
      IF(EN <= (2.0*EIN(27):
)) GO TO 343
      PEQIN(27,I)=PEQEL(2,(I-IOFFN(27)))
# V=11 B1 SIGMA
  343 IF(EN <= EIN(28)) GO TO 344
      QIN(28,I)=.017653/(EIN(28)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(28)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(28)+BEF(1))
      IF(QIN(28,I):
 < 0.0) QIN(28,I)=0.0
      IF(EN <= (2.0*EIN(28):
)) GO TO 344
      PEQIN(28,I)=PEQEL(2,(I-IOFFN(28)))
# V=12 B1 SIGMA
  344 IF(EN <= EIN(29)) GO TO 345
      QIN(29,I)=.015054/(EIN(29)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(29)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(29)+BEF(1))
      IF(QIN(29,I):
 < 0.0) QIN(29,I)=0.0
      IF(EN <= (2.0*EIN(29):
)) GO TO 345
      PEQIN(29,I)=PEQEL(2,(I-IOFFN(29)))
# V=13 B1 SIGMA
  345 IF(EN <= EIN(30)) GO TO 346
      QIN(30,I)=.012678/(EIN(30)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(30)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(30)+BEF(1))
      IF(QIN(30,I):
 < 0.0) QIN(30,I)=0.0
      IF(EN <= (2.0*EIN(30):
)) GO TO 346
      PEQIN(30,I)=PEQEL(2,(I-IOFFN(30)))
# V=14 B1 SIGMA
  346 IF(EN <= EIN(31)) GO TO 347
      QIN(31,I)=.010567/(EIN(31)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(31)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(31)+BEF(1))
      IF(QIN(31,I):
 < 0.0) QIN(31,I)=0.0
      IF(EN <= (2.0*EIN(31):
)) GO TO 347
      PEQIN(31,I)=PEQEL(2,(I-IOFFN(31)))
# V=15 B1 SIGMA
  347 IF(EN <= EIN(32)) GO TO 348
      QIN(32,I)=.008746/(EIN(32)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(32)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(32)+BEF(1))
      IF(QIN(32,I):
 < 0.0) QIN(32,I)=0.0
      IF(EN <= (2.0*EIN(32):
)) GO TO 348
      PEQIN(32,I)=PEQEL(2,(I-IOFFN(32)))
# V=16 B1 SIGMA
  348 IF(EN <= EIN(33)) GO TO 349
      QIN(33,I)=.007201/(EIN(33)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(33)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(33)+BEF(1))
      IF(QIN(33,I):
 < 0.0) QIN(33,I)=0.0
      IF(EN <= (2.0*EIN(33):
)) GO TO 349
      PEQIN(33,I)=PEQEL(2,(I-IOFFN(33)))
# V=17 B1 SIGMA
  349 IF(EN <= EIN(34)) GO TO 350
      QIN(34,I)=.005909/(EIN(34)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(34)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(34)+BEF(1))
      IF(QIN(34,I):
 < 0.0) QIN(34,I)=0.0
      IF(EN <= (2.0*EIN(34):
)) GO TO 350
      PEQIN(34,I)=PEQEL(2,(I-IOFFN(34)))
# V=18 B1 SIGMA
  350 IF(EN <= EIN(35)) GO TO 351
      QIN(35,I)=.004838/(EIN(35)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(35)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(35)+BEF(1))
      IF(QIN(35,I):
 < 0.0) QIN(35,I)=0.0
      IF(EN <= (2.0*EIN(35):
)) GO TO 351
      PEQIN(35,I)=PEQEL(2,(I-IOFFN(35)))
# V=19 B1 SIGMA
  351 IF(EN <= EIN(36)) GO TO 352
      QIN(36,I)=.003956/(EIN(36)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(36)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(36)+BEF(1))
      IF(QIN(36,I):
 < 0.0) QIN(36,I)=0.0
      IF(EN <= (2.0*EIN(36):
)) GO TO 352
      PEQIN(36,I)=PEQEL(2,(I-IOFFN(36)))
# V=20 B1 SIGMA
  352 IF(EN <= EIN(37)) GO TO 353
      QIN(37,I)=.003233/(EIN(37)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(37)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(37)+BEF(1))
      IF(QIN(37,I):
 < 0.0) QIN(37,I)=0.0
      IF(EN <= (2.0*EIN(37):
)) GO TO 353
      PEQIN(37,I)=PEQEL(2,(I-IOFFN(37)))
# V=21 B1 SIGMA
  353 IF(EN <= EIN(38)) GO TO 354
      QIN(38,I)=.002644/(EIN(38)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(38)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(38)+BEF(1))
      IF(QIN(38,I):
 < 0.0) QIN(38,I)=0.0
      IF(EN <= (2.0*EIN(38):
)) GO TO 354
      PEQIN(38,I)=PEQEL(2,(I-IOFFN(38)))
# V=22 B1 SIGMA
  354 IF(EN <= EIN(39)) GO TO 355
      QIN(39,I)=.002165/(EIN(39)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(39)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(39)+BEF(1))
      IF(QIN(39,I):
 < 0.0) QIN(39,I)=0.0
      IF(EN <= (2.0*EIN(39):
)) GO TO 355
      PEQIN(39,I)=PEQEL(2,(I-IOFFN(39)))
# V=23 B1 SIGMA
  355 IF(EN <= EIN(40)) GO TO 356
      QIN(40,I)=.001775/(EIN(40)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(40)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(40)+BEF(1))
      IF(QIN(40,I):
 < 0.0) QIN(40,I)=0.0
      IF(EN <= (2.0*EIN(40):
)) GO TO 356
      PEQIN(40,I)=PEQEL(2,(I-IOFFN(40)))
# V=24 B1 SIGMA
  356 IF(EN <= EIN(41)) GO TO 357
      QIN(41,I)=.001457/(EIN(41)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(41)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(41)+BEF(1))
      IF(QIN(41,I):
 < 0.0) QIN(41,I)=0.0
      IF(EN <= (2.0*EIN(41):
)) GO TO 357
      PEQIN(41,I)=PEQEL(2,(I-IOFFN(41)))
# V=25 B1 SIGMA
  357 IF(EN <= EIN(42)) GO TO 358
      QIN(42,I)=.001199/(EIN(42)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(42)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(42)+BEF(1))
      IF(QIN(42,I):
 < 0.0) QIN(42,I)=0.0
      IF(EN <= (2.0*EIN(42):
)) GO TO 358
      PEQIN(42,I)=PEQEL(2,(I-IOFFN(42)))
# V=26 B1 SIGMA
  358 IF(EN <= EIN(43)) GO TO 359
      QIN(43,I)=.0009882/(EIN(43)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(43)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(43)+BEF(1))
      IF(QIN(43,I):
 < 0.0) QIN(43,I)=0.0
      IF(EN <= (2.0*EIN(43):
)) GO TO 359
      PEQIN(43,I)=PEQEL(2,(I-IOFFN(43)))
# V=27 B1 SIGMA
  359 IF(EN <= EIN(44)) GO TO 360
      QIN(44,I)=.0008153/(EIN(44)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(44)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(44)+BEF(1))
      IF(QIN(44,I):
 < 0.0) QIN(44,I)=0.0
      IF(EN <= (2.0*EIN(44):
)) GO TO 360
      PEQIN(44,I)=PEQEL(2,(I-IOFFN(44)))
# V=28 B1 SIGMA
  360 IF(EN <= EIN(45)) GO TO 361
      QIN(45,I)=.0006738/(EIN(45)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(45)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(45)+BEF(1))
      IF(QIN(45,I):
 < 0.0) QIN(45,I)=0.0
      IF(EN <= (2.0*EIN(45):
)) GO TO 361
      PEQIN(45,I)=PEQEL(2,(I-IOFFN(45)))
# V=29 B1 SIGMA
  361 IF(EN <= EIN(46)) GO TO 362
      QIN(46,I)=.0005561/(EIN(46)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(46)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(46)+BEF(1))
      IF(QIN(46,I):
 < 0.0) QIN(46,I)=0.0
      IF(EN <= (2.0*EIN(46):
)) GO TO 362
      PEQIN(46,I)=PEQEL(2,(I-IOFFN(46)))
# V=30 B1 SIGMA
  362 IF(EN <= EIN(47)) GO TO 363
      QIN(47,I)=.0004573/(EIN(47)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(47)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(47)+BEF(1))
      IF(QIN(47,I):
 < 0.0) QIN(47,I)=0.0
      IF(EN <= (2.0*EIN(47):
)) GO TO 363
      PEQIN(47,I)=PEQEL(2,(I-IOFFN(47)))
# V=31 B1 SIGMA 
  363 IF(EN <= EIN(48)) GO TO 364
      QIN(48,I)=.0003731/(EIN(48)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(48)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(48)+BEF(1))
      IF(QIN(48,I):
 < 0.0) QIN(48,I)=0.0
      IF(EN <= (2.0*EIN(48):
)) GO TO 364
      PEQIN(48,I)=PEQEL(2,(I-IOFFN(48)))
# V=32 B1 SIGMA 
  364 IF(EN <= EIN(49)) GO TO 365
      QIN(49,I)=.0002992/(EIN(49)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(49)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(49)+BEF(1))
      IF(QIN(49,I):
 < 0.0) QIN(49,I)=0.0
      IF(EN <= (2.0*EIN(49):
)) GO TO 365
      PEQIN(49,I)=PEQEL(2,(I-IOFFN(49)))
# V=33 B1 SIGMA 
  365 IF(EN <= EIN(50)) GO TO 366
      QIN(50,I)=.0002309/(EIN(50)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(50)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(50)+BEF(1))
      IF(QIN(50,I):
 < 0.0) QIN(50,I)=0.0
      IF(EN <= (2.0*EIN(50):
)) GO TO 366
      PEQIN(50,I)=PEQEL(2,(I-IOFFN(50)))
# V=34 B1 SIGMA 
  366 IF(EN <= EIN(51)) GO TO 367
      QIN(51,I)=.0001627/(EIN(51)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(51)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(51)+BEF(1))
      IF(QIN(51,I):
 < 0.0) QIN(51,I)=0.0
      IF(EN <= (2.0*EIN(51):
)) GO TO 367
      PEQIN(51,I)=PEQEL(2,(I-IOFFN(51)))
# V=35 B1 SIGMA 
  367 IF(EN <= EIN(52)) GO TO 368
      QIN(52,I)=8.652D-5/(EIN(52)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(52)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(52)+BEF(1))
      IF(QIN(52,I):
 < 0.0) QIN(52,I)=0.0
      IF(EN <= (2.0*EIN(52):
)) GO TO 368
      PEQIN(52,I)=PEQEL(2,(I-IOFFN(52)))
# V=36 B1 SIGMA 
  368 IF(EN <= EIN(53)) GO TO 369
      QIN(53,I)=2.256D-5/(EIN(53)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(53)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(53)+BEF(1))
      IF(QIN(53,I):
 < 0.0) QIN(53,I)=0.0
      IF(EN <= (2.0*EIN(53):
)) GO TO 369
      PEQIN(53,I)=PEQEL(2,(I-IOFFN(53)))
# V=0  C1 PI    
  369 IF(EN <= EIN(54)) GO TO 370
      QIN(54,I)=.0476000/(EIN(54)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(54)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(54)+BEF(2))
      IF(QIN(54,I):
 < 0.0) QIN(54,I)=0.0
      IF(EN <= (2.0*EIN(54):
)) GO TO 370
      PEQIN(54,I)=PEQEL(2,(I-IOFFN(54)))
# V=1  C1 PI    
  370 IF(EN <= EIN(55)) GO TO 371
      QIN(55,I)=.0728400/(EIN(55)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(55)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(55)+BEF(2))
      IF(QIN(55,I):
 < 0.0) QIN(55,I)=0.0
      IF(EN <= (2.0*EIN(55):
)) GO TO 371
      PEQIN(55,I)=PEQEL(2,(I-IOFFN(55)))
# V=2  C1 PI    
  371 IF(EN <= EIN(56)) GO TO 372
      QIN(56,I)=.0698200/(EIN(56)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(56)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(56)+BEF(2))
      IF(QIN(56,I):
 < 0.0) QIN(56,I)=0.0
      IF(EN <= (2.0*EIN(56):
)) GO TO 372
      PEQIN(56,I)=PEQEL(2,(I-IOFFN(56)))
# V=3  C1 PI    
  372 IF(EN <= EIN(57)) GO TO 373
      QIN(57,I)=.0547200/(EIN(57)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(57)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(57)+BEF(2))
      IF(QIN(57,I):
 < 0.0) QIN(57,I)=0.0
      IF(EN <= (2.0*EIN(57):
)) GO TO 373
      PEQIN(57,I)=PEQEL(2,(I-IOFFN(57)))
# V=4  C1 PI    
  373 IF(EN <= EIN(58)) GO TO 374
      QIN(58,I)=.0387400/(EIN(58)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(58)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(58)+BEF(2))
      IF(QIN(58,I):
 < 0.0) QIN(58,I)=0.0
      IF(EN <= (2.0*EIN(58):
)) GO TO 374
      PEQIN(58,I)=PEQEL(2,(I-IOFFN(58)))
# V=5  C1 PI    
  374 IF(EN <= EIN(59)) GO TO 375
      QIN(59,I)=.0259800/(EIN(59)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(59)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(59)+BEF(2))
      IF(QIN(59,I):
 < 0.0) QIN(59,I)=0.0
      IF(EN <= (2.0*EIN(59):
)) GO TO 375
      PEQIN(59,I)=PEQEL(2,(I-IOFFN(59)))
# V=6  C1 PI    
  375 IF(EN <= EIN(60)) GO TO 376
      QIN(60,I)=.0170000/(EIN(60)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(60)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(60)+BEF(2))
      IF(QIN(60,I):
 < 0.0) QIN(60,I)=0.0
      IF(EN <= (2.0*EIN(60):
)) GO TO 376
      PEQIN(60,I)=PEQEL(2,(I-IOFFN(60)))
# V=7  C1 PI    
  376 IF(EN <= EIN(61)) GO TO 377
      QIN(61,I)=.0109900/(EIN(61)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(61)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(61)+BEF(2))
      IF(QIN(61,I):
 < 0.0) QIN(61,I)=0.0
      IF(EN <= (2.0*EIN(61):
)) GO TO 377
      PEQIN(61,I)=PEQEL(2,(I-IOFFN(61)))
# V=8  C1 PI    
  377 IF(EN <= EIN(62)) GO TO 378
      QIN(62,I)=.0070980/(EIN(62)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(62)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(62)+BEF(2))
      IF(QIN(62,I):
 < 0.0) QIN(62,I)=0.0
      IF(EN <= (2.0*EIN(62):
)) GO TO 378
      PEQIN(62,I)=PEQEL(2,(I-IOFFN(62)))
# V=9  C1 PI    
  378 IF(EN <= EIN(63)) GO TO 379
      QIN(63,I)=.0045920/(EIN(63)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(63)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(63)+BEF(2))
      IF(QIN(63,I):
 < 0.0) QIN(63,I)=0.0
      IF(EN <= (2.0*EIN(63):
)) GO TO 379
      PEQIN(63,I)=PEQEL(2,(I-IOFFN(63)))
# V=10 C1 PI    
  379 IF(EN <= EIN(64)) GO TO 380
      QIN(64,I)=.0029760/(EIN(64)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(64)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(64)+BEF(2))
      IF(QIN(64,I):
 < 0.0) QIN(64,I)=0.0
      IF(EN <= (2.0*EIN(64):
)) GO TO 380
      PEQIN(64,I)=PEQEL(2,(I-IOFFN(64)))
# V=11 C1 PI    
  380 IF(EN <= EIN(65)) GO TO 381
      QIN(65,I)=.0019090/(EIN(65)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(65)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(65)+BEF(2))
      IF(QIN(65,I):
 < 0.0) QIN(65,I)=0.0
      IF(EN <= (2.0*EIN(65):
)) GO TO 381
      PEQIN(65,I)=PEQEL(2,(I-IOFFN(65)))
# V=12 C1 PI    
  381 IF(EN <= EIN(66)) GO TO 382
      QIN(66,I)=.0011710/(EIN(66)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(66)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(66)+BEF(2))
      IF(QIN(66,I):
 < 0.0) QIN(66,I)=0.0
      IF(EN <= (2.0*EIN(66):
)) GO TO 382
      PEQIN(66,I)=PEQEL(2,(I-IOFFN(66)))
# V=13 C1 PI    
  382 IF(EN <= EIN(67)) GO TO 383
      QIN(67,I)=.0005590/(EIN(67)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(67)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(67)+BEF(2))
      IF(QIN(67,I):
 < 0.0) QIN(67,I)=0.0
      IF(EN <= (2.0*EIN(67):
)) GO TO 383
      PEQIN(67,I)=PEQEL(2,(I-IOFFN(67)))
# C3PI V=0-4  METASTABLE LEVEL     FRANCK-CONDON FAC=0.6967
# SCALED BY 1/E**3 ABOVE XC3PI(NC3PI) EV
  383 IF(EN <= EIN(68)) GO TO 387 
      IF(EN > XC3PI(NC3PI):
) GO TO 386                               
      DO 384 J=2,NC3PI                                                  
      IF(EN <= XC3PI(J):
) GO TO 385                                      
  384 CONTINUE                                                          
      J=NC3PI                                                           
  385 A=(YC3PI(J)-YC3PI(J-1))/(XC3PI(J)-XC3PI(J-1))                     
      B=(XC3PI(J-1)*YC3PI(J)-XC3PI(J)*YC3PI(J-1))/(XC3PI(J-1)-XC3PI(J)) 
      QIN(68,I)=(A*EN+B)*1.D-16*0.6967
      GO TO 1386
  386 QIN(68,I)=YC3PI(NC3PI)*1.D-16*((XC3PI(NC3PI)/EN)**3)*0.6967
 1386 IF(EN <= (2.0*EIN(68))) GO TO 387
      PEQIN(68,I)=PEQEL(2,(I-IOFFN(68)))
# C3PI V=5-18 METASTABLE LEVEL     FRANCK-CONDON FAC=0.3033
# SCALED BY 1/E**3 ABOVE XC3PI(NC3PI) EV
  387 IF(EN <= EIN(69)) GO TO 391 
      IF(EN > XC3PI(NC3PI):
) GO TO 390                               
      DO 388 J=2,NC3PI                                                  
      IF(EN <= XC3PI(J):
) GO TO 389                                      
  388 CONTINUE                                                          
      J=NC3PI                                                           
  389 A=(YC3PI(J)-YC3PI(J-1))/(XC3PI(J)-XC3PI(J-1))                     
      B=(XC3PI(J-1)*YC3PI(J)-XC3PI(J)*YC3PI(J-1))/(XC3PI(J-1)-XC3PI(J)) 
      QIN(69,I)=(A*EN+B)*1.D-16*0.3033   
      GO TO 1390
  390 QIN(69,I)=YC3PI(NC3PI)*1.D-16*((XC3PI(NC3PI)/EN)**3)*0.3033
 1390 IF(EN <= (2.0*EIN(69))) GO TO 391
      PEQIN(69,I)=PEQEL(2,(I-IOFFN(69)))
# A3SG V=0-2                   FRANCK-CONDON FAC=0.6668
# SCALED BY 1/E**3 ABOVE XA3SG(NA3SG) EV
  391 IF(EN <= EIN(70)) GO TO 395 
      IF(EN > XA3SG(NA3SG):
) GO TO 394                               
      DO 392 J=2,NA3SG                                                  
      IF(EN <= XA3SG(J):
) GO TO 393                                      
  392 CONTINUE                                                          
      J=NA3SG                                                           
  393 A=(YA3SG(J)-YA3SG(J-1))/(XA3SG(J)-XA3SG(J-1))                     
      B=(XA3SG(J-1)*YA3SG(J)-XA3SG(J)*YA3SG(J-1))/(XA3SG(J-1)-XA3SG(J)) 
      QIN(70,I)=(A*EN+B)*1.D-16*0.6668   
      GO TO 1394
  394 QIN(70,I)=YA3SG(NA3SG)*1.D-16*((XA3SG(NA3SG)/EN)**3)*0.6668
 1394 IF(EN <= (2.0*EIN(70))) GO TO 395
      PEQIN(70,I)=PEQEL(2,(I-IOFFN(70)))
# A3SG V=3-17                  FRANCK-CONDON FAC=0.3332
# SCALED BY 1/E**3 ABOVE XA3SG(NA3SG) EV
  395 IF(EN <= EIN(71)) GO TO 399 
      IF(EN > XA3SG(NA3SG):
) GO TO 398                               
      DO 396 J=2,NA3SG                                                  
      IF(EN <= XA3SG(J):
) GO TO 397                                      
  396 CONTINUE                                                          
      J=NA3SG                                                           
  397 A=(YA3SG(J)-YA3SG(J-1))/(XA3SG(J)-XA3SG(J-1))                     
      B=(XA3SG(J-1)*YA3SG(J)-XA3SG(J)*YA3SG(J-1))/(XA3SG(J-1)-XA3SG(J)) 
      QIN(71,I)=(A*EN+B)*1.D-16*0.3332
      GO TO 1398
  398 QIN(71,I)=YA3SG(NA3SG)*1.D-16*((XA3SG(NA3SG)/EN)**3)*0.3332
 1398 IF(EN <= (2.0*EIN(71))) GO TO 399
      PEQIN(71,I)=PEQEL(2,(I-IOFFN(71)))
# E3SG V=0-9                                           
# SCALED BY 1/E**3 ABOVE XE3SG(NE3SG) EV
  399 IF(EN <= EIN(72)) GO TO 403 
      IF(EN > XE3SG(NE3SG):
) GO TO 402                               
      DO 400 J=2,NE3SG                                                  
      IF(EN <= XE3SG(J):
) GO TO 401                                      
  400 CONTINUE                                                          
      J=NE3SG                                                           
  401 A=(YE3SG(J)-YE3SG(J-1))/(XE3SG(J)-XE3SG(J-1))                     
      B=(XE3SG(J-1)*YE3SG(J)-XE3SG(J)*YE3SG(J-1))/(XE3SG(J-1)-XE3SG(J)) 
      QIN(72,I)=(A*EN+B)*1.D-16          
      GO TO 2402
  402 QIN(72,I)=YE3SG(NE3SG)*1.D-16*(XE3SG(NE3SG)/EN)**3        
 2402 IF(EN <= (2.0*EIN(72))) GO TO 403
      PEQIN(72,I)=PEQEL(2,(I-IOFFN(72)))
# EF1 SIGMA V=0-5                   FRANCK-CONDON FACTOR=0.4
# USE BORN SCALING ABOVE XEFSG(NEFSG)  EV
  403 IF(EN <= EIN(73)) GO TO 407 
      IF(EN > XEFSG(NEFSG):
) GO TO 406                               
      DO 404 J=2,NEFSG                                                  
      IF(EN <= XEFSG(J):
) GO TO 405                                      
  404 CONTINUE                                                          
      J=NEFSG                                                           
  405 A=(YEFSG(J)-YEFSG(J-1))/(XEFSG(J)-XEFSG(J-1))                     
      B=(XEFSG(J-1)*YEFSG(J)-XEFSG(J)*YEFSG(J-1))/(XEFSG(J-1)-XEFSG(J)) 
      QIN(73,I)=(A*EN+B)*1.D-16*0.4          
      GO TO 1406
  406 QIN(73,I)=.0089000/(EIN(73)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(73)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(73)+BEF(3))
      IF(QIN(73,I):
 < 0.0) QIN(73,I)=0.0
 1406 IF(EN <= (2.0*EIN(73))) GO TO 407
      PEQIN(73,I)=PEQEL(2,(I-IOFFN(73)))
# EF1 SIGMA V=6-19                   FRANCK-CONDON FACTOR=0.6
# USE BORN SCALING ABOVE XEFSG(NEFSG) EV
  407 IF(EN <= EIN(74)) GO TO 411 
      IF(EN > XEFSG(NEFSG):
) GO TO 410                               
      DO 408 J=2,NEFSG                                                  
      IF(EN <= XEFSG(J):
) GO TO 409                                      
  408 CONTINUE                                                          
      J=NEFSG                                                           
  409 A=(YEFSG(J)-YEFSG(J-1))/(XEFSG(J)-XEFSG(J-1))                     
      B=(XEFSG(J-1)*YEFSG(J)-XEFSG(J)*YEFSG(J-1))/(XEFSG(J-1)-XEFSG(J)) 
      QIN(74,I)=(A*EN+B)*1.D-16*0.6          
      GO TO 1410
  410 QIN(74,I)=.0133000/(EIN(74)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(74)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(74)+BEF(3))
      IF(QIN(74,I):
 < 0.0) QIN(74,I)=0.0
 1410 IF(EN <= (2.0*EIN(74))) GO TO 411
      PEQIN(74,I)=PEQEL(2,(I-IOFFN(74)))
# B#1 SIGMA V=0       
  411 IF(EN <= EIN(75)) GO TO 412
      QIN(75,I)=.003970/(EIN(75)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(75)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(75)+BEF(4))
      IF(QIN(75,I):
 < 0.0) QIN(75,I)=0.0
      IF(EN <= (2.0*EIN(75):
)) GO TO 412
      PEQIN(75,I)=PEQEL(2,(I-IOFFN(75)))
# B#1 SIGMA V=1         
  412 IF(EN <= EIN(76)) GO TO 413
      QIN(76,I)=.008150/(EIN(76)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(76)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(76)+BEF(4))
      IF(QIN(76,I):
 < 0.0) QIN(76,I)=0.0
      IF(EN <= (2.0*EIN(76):
)) GO TO 413
      PEQIN(76,I)=PEQEL(2,(I-IOFFN(76)))
# B#1 SIGMA V=2         
  413 IF(EN <= EIN(77)) GO TO 414
      QIN(77,I)=.009980/(EIN(77)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(77)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(77)+BEF(4))
      IF(QIN(77,I):
 < 0.0) QIN(77,I)=0.0
      IF(EN <= (2.0*EIN(77):
)) GO TO 414
      PEQIN(77,I)=PEQEL(2,(I-IOFFN(77)))
# B#1 SIGMA V=3         
  414 IF(EN <= EIN(78)) GO TO 415
      QIN(78,I)=.009520/(EIN(78)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(78)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(78)+BEF(4))
      IF(QIN(78,I):
 < 0.0) QIN(78,I)=0.0
      IF(EN <= (2.0*EIN(78):
)) GO TO 415
      PEQIN(78,I)=PEQEL(2,(I-IOFFN(78)))
# B#1 SIGMA V=4         
  415 IF(EN <= EIN(79)) GO TO 416
      QIN(79,I)=.007550/(EIN(79)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(79)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(79)+BEF(4))
      IF(QIN(79,I):
 < 0.0) QIN(79,I)=0.0
      IF(EN <= (2.0*EIN(79):
)) GO TO 416
      PEQIN(79,I)=PEQEL(2,(I-IOFFN(79)))
# B#1 SIGMA V=5         
  416 IF(EN <= EIN(80)) GO TO 417
      QIN(80,I)=.004230/(EIN(80)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(80)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(80)+BEF(4))
      IF(QIN(80,I):
 < 0.0) QIN(80,I)=0.0
      IF(EN <= (2.0*EIN(80):
)) GO TO 417
      PEQIN(80,I)=PEQEL(2,(I-IOFFN(80)))
# B#1 SIGMA V=6         
  417 IF(EN <= EIN(81)) GO TO 418
      QIN(81,I)=.000460/(EIN(81)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(81)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(81)+BEF(4))
      IF(QIN(81,I):
 < 0.0) QIN(81,I)=0.0
      IF(EN <= (2.0*EIN(81):
)) GO TO 418
      PEQIN(81,I)=PEQEL(2,(I-IOFFN(81)))
# B#1 SIGMA V=7         
  418 IF(EN <= EIN(82)) GO TO 419
      QIN(82,I)=.000450/(EIN(82)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(82)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(82)+BEF(4))
      IF(QIN(82,I):
 < 0.0) QIN(82,I)=0.0
      IF(EN <= (2.0*EIN(82):
)) GO TO 419
      PEQIN(82,I)=PEQEL(2,(I-IOFFN(82)))
# B#1 SIGMA V=8         
  419 IF(EN <= EIN(83)) GO TO 420
      QIN(83,I)=.000300/(EIN(83)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(83)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(83)+BEF(4))
      IF(QIN(83,I):
 < 0.0) QIN(83,I)=0.0
      IF(EN <= (2.0*EIN(83):
)) GO TO 420
      PEQIN(83,I)=PEQEL(2,(I-IOFFN(83)))
# D1 PI     V=0         
  420 IF(EN <= EIN(84)) GO TO 421
      QIN(84,I)=.007750/(EIN(84)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(84)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(84)+BEF(5))
      IF(QIN(84,I):
 < 0.0) QIN(84,I)=0.0
      IF(EN <= (2.0*EIN(85):
)) GO TO 421
      PEQIN(84,I)=PEQEL(2,(I-IOFFN(84)))
# D1 PI     V=1         
  421 IF(EN <= EIN(85)) GO TO 422
      QIN(85,I)=.013100/(EIN(85)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(85)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(85)+BEF(5))
      IF(QIN(85,I):
 < 0.0) QIN(85,I)=0.0
      IF(EN <= (2.0*EIN(85):
)) GO TO 422
      PEQIN(85,I)=PEQEL(2,(I-IOFFN(85)))
# D1 PI     V=2         
  422 IF(EN <= EIN(86)) GO TO 423
      QIN(86,I)=.013670/(EIN(86)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(86)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(86)+BEF(5))
      IF(QIN(86,I):
 < 0.0) QIN(86,I)=0.0
      IF(EN <= (2.0*EIN(86):
)) GO TO 423
      PEQIN(86,I)=PEQEL(2,(I-IOFFN(86)))
# D1 PI     V=3         
  423 IF(EN <= EIN(87)) GO TO 424
      QIN(87,I)=.011560/(EIN(87)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(87)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(87)+BEF(5))
      IF(QIN(87,I):
 < 0.0) QIN(87,I)=0.0
      IF(EN <= (2.0*EIN(87):
)) GO TO 424
      PEQIN(87,I)=PEQEL(2,(I-IOFFN(87)))
# D1 PI     V=4         
  424 IF(EN <= EIN(88)) GO TO 425
      QIN(88,I)=.008730/(EIN(88)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(88)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(88)+BEF(5))
      IF(QIN(88,I):
 < 0.0) QIN(88,I)=0.0
      IF(EN <= (2.0*EIN(88):
)) GO TO 425
      PEQIN(88,I)=PEQEL(2,(I-IOFFN(88)))
# D1 PI     V=5         
  425 IF(EN <= EIN(89)) GO TO 426
      QIN(89,I)=.006190/(EIN(89)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(89)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(89)+BEF(5))
      IF(QIN(89,I):
 < 0.0) QIN(89,I)=0.0
      IF(EN <= (2.0*EIN(89):
)) GO TO 426
      PEQIN(89,I)=PEQEL(2,(I-IOFFN(89)))
# D1 PI     V=6         
  426 IF(EN <= EIN(90)) GO TO 427
      QIN(90,I)=.004280/(EIN(90)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(90)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(90)+BEF(5))
      IF(QIN(90,I):
 < 0.0) QIN(90,I)=0.0
      IF(EN <= (2.0*EIN(90):
)) GO TO 427
      PEQIN(90,I)=PEQEL(2,(I-IOFFN(90)))
# D1 PI     V=7         
  427 IF(EN <= EIN(91)) GO TO 428
      QIN(91,I)=.002920/(EIN(91)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(91)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(91)+BEF(5))
      IF(QIN(91,I):
 < 0.0) QIN(91,I)=0.0
      IF(EN <= (2.0*EIN(91):
)) GO TO 428
      PEQIN(91,I)=PEQEL(2,(I-IOFFN(91)))
# D1 PI     V=8         
  428 IF(EN <= EIN(92)) GO TO 429
      QIN(92,I)=.001960/(EIN(92)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(92)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(92)+BEF(5))
      IF(QIN(92,I):
 < 0.0) QIN(92,I)=0.0
      IF(EN <= (2.0*EIN(92):
)) GO TO 429
      PEQIN(92,I)=PEQEL(2,(I-IOFFN(92)))
# D1 PI     V=9         
  429 IF(EN <= EIN(93)) GO TO 430
      QIN(93,I)=.001330/(EIN(93)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(93)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(93)+BEF(5))
      IF(QIN(93,I):
 < 0.0) QIN(93,I)=0.0
      IF(EN <= (2.0*EIN(93):
)) GO TO 430
      PEQIN(93,I)=PEQEL(2,(I-IOFFN(93)))
# D1 PI     V=10        
  430 IF(EN <= EIN(94)) GO TO 431
      QIN(94,I)=.000910/(EIN(94)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(94)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(94)+BEF(5))
      IF(QIN(94,I):
 < 0.0) QIN(94,I)=0.0
      IF(EN <= (2.0*EIN(94):
)) GO TO 431
      PEQIN(94,I)=PEQEL(2,(I-IOFFN(94)))
# D1 PI     V=11        
  431 IF(EN <= EIN(95)) GO TO 432
      QIN(95,I)=.000630/(EIN(95)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(95)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(95)+BEF(5))
      IF(QIN(95,I):
 < 0.0) QIN(95,I)=0.0
      IF(EN <= (2.0*EIN(95):
)) GO TO 432
      PEQIN(95,I)=PEQEL(2,(I-IOFFN(95)))
# D1 PI     V=12        
  432 IF(EN <= EIN(96)) GO TO 433
      QIN(96,I)=.000430/(EIN(96)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(96)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(96)+BEF(5))
      IF(QIN(96,I):
 < 0.0) QIN(96,I)=0.0
      IF(EN <= (2.0*EIN(96):
)) GO TO 433
      PEQIN(96,I)=PEQEL(2,(I-IOFFN(96)))
# D1 PI     V=13        
  433 IF(EN <= EIN(97)) GO TO 434
      QIN(97,I)=.000290/(EIN(97)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(97)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(97)+BEF(5))
      IF(QIN(97,I):
 < 0.0) QIN(97,I)=0.0
      IF(EN <= (2.0*EIN(97):
)) GO TO 434
      PEQIN(97,I)=PEQEL(2,(I-IOFFN(97)))
# D1 PI     V=14        
  434 IF(EN <= EIN(98)) GO TO 435
      QIN(98,I)=.000200/(EIN(98)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(98)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(98)+BEF(5))
      IF(QIN(98,I):
 < 0.0) QIN(98,I)=0.0
      IF(EN <= (2.0*EIN(98):
)) GO TO 435
      PEQIN(98,I)=PEQEL(2,(I-IOFFN(98)))
# D1 PI     V=15        
  435 IF(EN <= EIN(99)) GO TO 436
      QIN(99,I)=.000120/(EIN(99)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(99)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(99)+BEF(5))
      IF(QIN(99,I):
 < 0.0) QIN(99,I)=0.0
      IF(EN <= (2.0*EIN(99):
)) GO TO 436
      PEQIN(99,I)=PEQEL(2,(I-IOFFN(99)))
# B##1 SIGMA SUM V=0-6  DISSOCIATIVE 
# SCALED BY 1.08 FOR INCREASED ENERGY LOSSES FROM VIB SERIES
  436 IF(EN <= EIN(100)) GO TO 437
      QIN(100,I)=.02230/(EIN(100)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(100)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(100)+BEF(5))*1.08 
      IF(QIN(100,I):
 < 0.0) QIN(100,I)=0.0
      IF(EN <= (2.0*EIN(100):
)) GO TO 437
      PEQIN(100,I)=PEQEL(2,(I-IOFFN(100)))
# D#1 PI     SUM V=0-3  DISSOCIATIVE
# SCALED BY 1.08 FOR INCREASED ENERGY LOSSES FROM VIB SERIES
  437 IF(EN <= EIN(101)) GO TO 438
      QIN(101,I)=.01450/(EIN(101)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(101)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(101)+BEF(5))*1.08 
      IF(QIN(101,I):
 < 0.0) QIN(101,I)=0.0
      IF(EN <= (2.0*EIN(101):
)) GO TO 438
      PEQIN(101,I)=PEQEL(2,(I-IOFFN(101)))
# B###1 SIGMA + D##1 PI VIBRATION SUMMED   DISSOCIATIVE 
#  SCALED BY 1.08 FOR INCREASED ENERGY LOSSES FROM VIB SERIES
  438 IF(EN <= EIN(102)) GO TO 439
      QIN(102,I)=.01450/(EIN(102)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(102)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(102)+BEF(5))*1.08 
      IF(QIN(102,I):
 < 0.0) QIN(102,I)=0.0
      IF(EN <= (2.0*EIN(102):
)) GO TO 439
      PEQIN(102,I)=PEQEL(2,(I-IOFFN(102)))
# B####1 SIGMA + D###1 PI VIBRATION SUMMED   DISSOCIATIVE
#  SCALED BY 1.08 FOR INCREASED ENERGY LOSSES FROM VIB SERIES
  439 IF(EN <= EIN(103)) GO TO 440
      QIN(103,I)=.01010/(EIN(103)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(103)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(103)+BEF(5))*1.08 
      IF(QIN(103,I):
 < 0.0) QIN(103,I)=0.0
      IF(EN <= (2.0*EIN(103):
)) GO TO 440
      PEQIN(103,I)=PEQEL(2,(I-IOFFN(103)))
# B#####1 SIGMA + D####1 PI VIBRATION SUMMED   DISSOCIATIVE 
#  SCALED BY 1.08 FOR INCREASED ENERGY LOSSES FROM VIB SERIES
  440 IF(EN <= EIN(104)) GO TO 441
      QIN(104,I)=.00500/(EIN(104)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(104)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(104)+BEF(5))*1.08
      IF(QIN(104,I):
 < 0.0) QIN(104,I)=0.0
      IF(EN <= (2.0*EIN(104):
)) GO TO 441
      PEQIN(104,I)=PEQEL(2,(I-IOFFN(104)))
# CONTINUUM EXCITATION AROUND IONISATION ENERGY   DISSOCIATIVE
# SCALED BY 1.20 FOR INCREASED ENERGY LOSSES ABOVE THRESHOLD
  441 IF(EN <= EIN(105)) GO TO 442
      QIN(105,I)=.02680/(EIN(105)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(105)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(105)+BEF(5))*1.20
      IF(QIN(105,I):
 < 0.0) QIN(105,I)=0.0
      IF(EN <= (2.0*EIN(105):
)) GO TO 442
      PEQIN(105,I)=PEQEL(2,(I-IOFFN(105)))
# PREDISSOCIATION ABOVE IONISATION ENERGY         DISSOCIATIVE
# SCALED BY 1.2 FOR INCREASED ENERGY LOSSES ABOVE THRESHOLD 
  442 IF(EN <= EIN(106)) GO TO 443
      QIN(106,I)=.01700/(EIN(106)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(106)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(106)+BEF(5))*1.20 
      IF(QIN(106,I):
 < 0.0) QIN(106,I)=0.0
      IF(EN <= (2.0*EIN(106):
)) GO TO 443
      PEQIN(106,I)=PEQEL(2,(I-IOFFN(106)))
# DOUBLE EXCITED STATES TO NEUTRALS FROM BACKX ET AL
  443 IF(EN <= EIN(107)) GO TO 444
      QIN(107,I)=.00927/(EIN(107)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(107)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(107)+BEF(5))  
      IF(QIN(107,I):
 < 0.0) QIN(107,I)=0.0
      IF(EN <= (2.0*EIN(107):
)) GO TO 444
      PEQIN(107,I)=PEQEL(2,(I-IOFFN(107)))
  444 CONTINUE
# LOAD BREMSSTRAHLUNG X-SECTION
#     IF(EN <= 1000.) GO TO 450
#     DO 445 J=2,NBREM
#     IF(EN <= EBRM(J)) GO TO 446 
# 445 CONTINUE
#     J=NBREM
# 446 A=(math.log(Z1T(J))-math.log(Z1T(J-1)))/(EBRM(J)-EBRM(J-1))
#     B=(math.log(Z1T(J))*EBRM(J-1)-math.log(Z1T(J-1))*EBRM(J))/
#    /(EBRM(J-1)-EBRM(J))
#     QIN(108,I)=math.exp(A*EN+B)*2.D-24
  450 CONTINUE
#---------------------------------------------------------------------
      Q(1,I)=0.0
      DO 555 NL=1,107
      Q(1,I)=Q(1,I)+QIN(NL,I)
  555 CONTINUE
      Q(1,I)=Q(1,I)+Q(2,I)+Q(4,I)+QION(1,I)+QION(2,I)
cc    XLYMAN=0.0
c     DISLYMAN=0.0
c     DO 700 JK=17,53
c     XLYMAN=XLYMAN+QIN(JK,I)
c     DISLYMAN=DISLYMAN+QIN(JK,I)*DISLY(JK-16)
c 700 CONTINUE
c     XWERNER=0.0
c     DISWERNER=0.0
c     DO 701 JK=54,67
c     XWERNER=XWERNER+QIN(JK,I)
c     DISWERNER=DISWERNER+QIN(JK,I)*DISWR(JK-53)
c 701 CONTINUE
c     DISB1SIG=0.0
c     QB1SIG=0.0
c     DO 702 JK=75,83
c     QB1SIG=QB1SIG+QIN(JK,I)
c     DISB1SIG=DISB1SIG+QIN(JK,I)*DISB1S(JK-74)
c 702 CONTINUE
c     DISD1PI=0.0
c     QD1PI=0.0
c     DO 703 JK=84,99
c     QD1PI=QD1PI+QIN(JK,I)
c     DISD1PI=DISD1PI+QIN(JK,I)*DISD1P(JK-83)
c 703 CONTINUE    
c SUM TRIPLETS
c     TRIPL=QIN(13,I)+QIN(14,I)+QIN(15,I)+QIN(16,I)+QIN(68,I)+QIN(69,I)+
c    /QIN(70,I)+QIN(71,I)+QIN(72,I)
c     DISEFL=(QIN(73,I)+QIN(74,I))*0.5 
# SUM HIGH LEVELS 
c     QHIGH=QIN(100,I)+QIN(101,I)+QIN(102,I)+QIN(103,I)+QIN(104,I)+
c    /QIN(105,I)+QIN(106,I)+QIN(107,I)
c     DISTOT=TRIPL+DISLYMAN+DISWERNER+QHIGH+DISEFL
# TOTAL IONISATION
c     QIONT=QION(1,I)+QION(2,I)
# OUTPUT XSECTIONS   
#     WRITE(6,991) EN,Q(2,I),Q(4,I),QIONT,Q(1,I),XLYMAN,XWERNER,
#    /DISLYMAN,DISWERNER,TRIPL,QB1SIG,QD1PI,DISB1SIG,DISD1PI,QHIGH,
#    /QIN(105,I),QIN(106,I),DISEFL,DISTOT,QIN(107,I)      
# 991 FORMAT(' EN=',D12.4,' ELAS=',D12.4,' ATT =',D12.4,'IONS=',D12.4,'
#    / TOT=',D12.4,/,' XLYMAN=',D12.4,' XWERNER =',D12.4,' DISLYMAN=',
#    /D12.4,' DISWERNER=',D12.4,' DISTRIP=',D12.4,/,'QB1SIG= ',D12.4,
#    /'QD1PI= ',D12.4,' DISB1SIG=',D12.4,' DISD1PI=',D12.4,/,
#    /' QHIGH=',D12.4,/,' QIN105=',D12.4,' QIN106=',D12.4,' DISEFL=',
#    /D12.4,' DISTOT=',D12.4,/,' DOUBLEEXC=',D12.4)
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      NIN=12
      IF(EFINAL > 8.0 and EFINAL <= 10.0):
 NIN=16
      IF(EFINAL > 10.0):
 NIN=107
#      IF(EFINAL > 1000.) NIN=108
#
      RETURN                                                            
      # end 
      def GAS22(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY   
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN) 
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6) 
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)        
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      DIMENSION XEN(53),YXSEC(53),XROT0(40),YROT0(40),XROT1(42),YROT1(42
     /),XROT2(31),YROT2(31),XROT3(31),YROT3(31),XROT4(31),YROT4(31),
     /XROT5(30),YROT5(30),XVIB1(35),YVIB1(35),XVIB2(35),YVIB2(35),
     /XVIB3(16),YVIB3(16),XVIB4(16),YVIB4(16),XEXC1(20),YEXC1(20),
     /XEXC2(23),YEXC2(23),XATT(18),YATT(18),XION(72),YION(72),PJ(7)
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME                                                 
      DATA XEN/0.00,0.01,0.02,0.03,0.04,.046,0.05,0.06,0.07,0.08,       
     /0.09,0.10,0.13,0.15,0.20,0.30,0.40,0.50,0.60,0.70,                
     /0.90,1.00,1.10,1.40,1.50,1.60,1.80,2.00,2.50,3.00,                
     /4.00,5.00,6.00,8.00,10.0,15.0,20.0,30.0,40.0,50.0,                
     /60.0,80.0,100.,150.,200.,300.,400.,500.,600.,800.,
     /1000.,10000.,100000./          
      DATA YXSEC/6.36,7.26,7.95,8.45,8.91,9.05,9.22,9.50,9.79,10.04,    
     /10.24,10.44,10.93,11.33,11.93,12.92,13.82,14.61,15.51,16.20,      
     /16.9,17.2,17.3,17.7,17.7,17.8,17.7,17.5,16.8,16.1,        
     /14.2,13.5,13.2,12.3,11.2,7.30,4.30,1.60,0.77,0.50,    
     /0.35,0.22,0.15,0.07,.043,.022,.014,.010,.006,.004,
     /.002,.0002,.00002/           
#-----------------------------------------------------------------------
# ROTATION J=0-2                                                        
      DATA XROT0/.0226,.025,0.03,0.04,0.05,0.06,0.07,0.08,0.10,0.15,    
     /0.20,0.25,0.30,0.40,0.50,0.60,0.70,0.80,0.90,1.00,                
     /1.20,1.50,2.00,2.50,3.00,3.50,4.00,4.50,5.00,6.00,
     /7.00,8.00,9.00,10.0,15.0,20.0,100.,1000.,10000.,100000./
      DATA YROT0/0.00,.024,.042,.061,.067,.073,.078,.082,.091,.110,    
     /.129,.144,.170,.215,.264,.323,.394,.469,.555,.636,                
     /.796,1.036,1.370,1.585,1.704,1.755,1.758,1.732,1.689,1.579,
     /1.462,1.350,1.248,1.156,0.730,0.44,0.05,.0015,.00015,.000015/
#-----------------------------------------------------------------------
# ROTATION J=1-3                                                        
      DATA XROT1/.0377,0.04,0.05,0.06,0.07,0.08,0.10,0.15,0.20,0.25,   
     /0.30,0.40,0.50,0.56,0.60,0.66,0.70,0.80,0.90,1.01,                
     /1.20,1.40,1.60,1.80,2.00,2.50,3.00,3.50,4.00,4.50,
     /5.00,6.00,7.00,8.00,9.00,10.0,15.0,20.0,100.,1000.,10000.,100000./
      DATA YROT1/0.00,0.01,.026,.032,.036,.040,.046,.058,.071,.082,     
     /.094,.122,.152,.165,.178,.200,.214,.252,.292,.334,                
     /.420,.510,.610,.700,.786,.937,1.01,1.05,1.05,1.04,
     /1.01,.946,.876,.809,.748,.694,.440,.265,0.03,.001,.0001,.00001/
#-----------------------------------------------------------------------
# ROTATION J=2-4                                                        
      DATA XROT2/.0528,0.07,0.10,0.15,0.20,0.30,0.40,0.50,0.60,0.70,    
     /0.80,0.90,1.00,1.50,2.00,2.50,3.00,3.50,4.00,4.50,           
     /5.00,5.50,6.00,7.00,8.00,10.0,20.0,100.,1000.,10000.,100000./     
      DATA YROT2/0.00,.022,.034,.046,.055,.075,.099,.115,.132,.162,     
     /.193,.227,.266,.463,.619,.719,.774,.799,.802,.790,      
     /.771,.748,.721,.669,.617,.529,0.20,0.02,.0007,.00007,.000007/     
#-----------------------------------------------------------------------
# ROTATION J=3-5                                                        
      DATA XROT3/.0679,0.10,0.15,0.20,0.25,0.30,0.40,0.50,0.60,0.70,
     /0.80,0.90,1.00,1.50,2.00,2.50,3.00,3.50,4.00,4.50,         
     /5.00,5.50,6.00,7.00,8.00,10.0,20.0,100.,1000.,10000.,100000./     
      DATA YROT3/0.00,0.02,0.04,0.05,0.06,0.07,.095,.110,.129,.160,
     /.194,.233,.271,.478,.637,.742,.799,.825,.828,.818,       
     /.797,.774,.747,.692,.640,.548,0.18,0.02,.0007,.00007,.000007/     
#-----------------------------------------------------------------------
# ROTATION J=4-6
      DATA XROT4/.0830,0.10,0.15,0.20,0.25,0.30,0.40,0.50,0.60,0.70,
     /0.80,0.90,1.00,1.50,2.00,2.50,3.00,3.50,4.00,4.50,         
     /5.00,5.50,6.00,7.00,8.00,10.0,20.0,100.,1000.,10000.,100000./     
      DATA YROT4/0.00,.012,0.03,.038,.045,.053,.071,.083,.097,.120,
     /.146,.175,0.20,0.36,0.48,0.56,0.60,0.62,0.62,0.61,       
     /0.60,0.58,0.56,0.52,0.48,0.41,0.13,.015,.0005,.00005,.000005/     
#-----------------------------------------------------------------------
# ROTATION J=5-7                                                        
      DATA XROT5/.0981,0.15,0.20,0.25,0.30,0.40,0.50,0.60,0.70,0.80,
     /0.90,1.00,1.50,2.00,2.50,3.00,3.50,4.00,4.50,5.00,    
     /5.50,6.00,7.00,8.00,10.0,20.0,100.,1000.,10000.,100000./          
      DATA YROT5/0.00,.015,.028,.034,0.04,.053,.062,.073,0.09,0.11,
     /0.13,0.15,0.27,0.36,0.42,0.45,0.46,0.46,0.46,0.45,  
     /0.44,0.42,0.39,0.36,0.31,0.10,0.01,.0004,.00004,.000004/ 
#----------------------------------------------------------------------                   
# VIBRATION V=0-1 DELTAJ=0  ROTATIONALLY ELASTIC                        
      DATA XVIB1/0.371,0.50,0.60,0.65,0.75,0.85,1.00,1.15,1.25,1.50,    
     /1.75,2.00,2.20,2.40,2.60,3.00,3.50,4.00,4.50,5.00,
     /6.00,7.00,8.00,9.00,10.0,11.0,12.0,13.0,14.0,15.0,
     /20.0,100.,1000.,10000.,100000./                              
      DATA YVIB1/0.00,.0045,.009,.011,.016,.020,.028,.037,.042,.064,    
     /.084,.100,.110,.120,.128,.135,.140,.140,.135,.122,
     /.100,.077,.060,.046,.035,.027,.021,.017,.015,.013,
     /.0085,.0017,.00005,.000005,.0000005/  
#-----------------------------------------------------------------------
# VIBRATION V=0-1 DELTAJ=2  ROTATIONALLY INELASTIC                      
      DATA XVIB2/0.391,0.50,0.60,0.65,0.75,0.85,1.00,1.15,1.25,1.50,    
     /1.75,2.00,2.20,2.40,2.60,3.00,3.50,4.00,4.50,5.00,
     /6.00,7.00,8.00,9.00,10.0,11.0,12.0,13.0,14.0,15.0,
     /20.0,100.,1000.,10000.,100000./                              
      DATA YVIB2/0.00,.0025,.0055,.008,.012,.017,.026,.035,.040,.064,   
     /.088,.115,.135,.150,.160,.176,.188,.188,.185,.172,      
     /.142,.110,.082,.062,.045,.035,.026,.019,.014,.011, 
     /.0074,.0015,.00004,.000004,.0000004/  
#-----------------------------------------------------------------------
#  VIBRATION V=0-2                                                      
      DATA XVIB3/0.735,1.00,1.50,2.00,3.00,4.00,5.00,6.00,8.00,10.0,    
     /15.0,20.0,100.,1000.,10000.,100000./                              
      DATA YVIB3/0.00,.0005,.003,.007,.017,.018,.017,.015,.011,.007,    
     /.001,.0005,.00015,.000005,.0000005,.00000005/  
#-----------------------------------------------------------------------
#  VIBRATION V=0-3                                                      
      DATA XVIB4/1.085,1.35,1.50,2.00,3.00,4.00,5.00,6.00,8.00,10.0,
     /15.0,20.0,100.,1000.,10000.,100000./                              
      DATA YVIB4/0.00,.00015,.0003,.0008,.0016,.0016,.0015,.0012,.001,  
     /.0015,.0005,.0001,.000025,.0000008,.00000008,.000000008/   
#-----------------------------------------------------------------------
# EXCITATION TO TRIPLET STATES (DISSOCIATION)                           
      DATA XEXC1/8.85,8.92,9.34,10.0,11.0,12.0,15.0,20.0,25.0,30.0,     
     /40.0,50.0,60.0,80.0,100.,150.,200.,1000.,10000.,100000./          
      DATA YEXC1/0.00,.008,0.04,0.08,.184,.336,0.51,0.46,0.28,0.18,     
     /0.08,.041,.025,.010,.005,.0012,.0005,.00008,.000008,.0000008/     
#  EXCITATION TO SINGLET STATES                                         
      DATA XEXC2/12.0,12.13,13.4,15.0,17.0,20.0,25.0,30.0,40.0,50.0,    
     /60.0,80.0,100.,150.,200.,300.,400.,500.,600.,800.,
     /1000.,10000.,100000./          
      DATA YEXC2/0.00,0.09,0.09,0.24,0.40,0.58,0.86,1.01,1.07,1.11,     
     /1.13,1.05,0.99,0.79,0.70,0.58,0.50,0.42,0.38,0.31,
     /0.24,.024,.0024/           
#-----------------------------------------------------------------------
      DATA XATT/7.40,8.00,9.00,10.0,11.0,12.0,13.0,14.0,15.0,16.0,      
     /17.0,18.0,30.0,60.0,100.,1000.,10000.,100000./                
      DATA YATT/0.00,.000005,.000012,.000026,.000027,.00003,.000035,
     /.00010,.00008,.00009,.00010,.00011,.00006,.00001,.000001,       
     /.0000001,.00000001,.000000001/                                    
#-----------------------------------------------------------------------
      DATA XION/15.427,16.0,16.5,17.0,17.5,18.0,18.5,19.0,19.5,20.0,    
     /20.5,21.0,21.5,22.0,22.5,23.0,23.5,24.0,24.5,25.0,                
     /25.5,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,45.0,                
     /50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,                
     /100.,105.,110.,115.,120.,125.,130.,135.,140.,145.,                
     /150.,160.,180.,200.,250.,300.,350.,400.,450.,500.,                
     /550.,600.,650.,700.,750.,800.,850.,900.,950.,1000.,
     /10000.,100000./               
      DATA YION/0.00,.034,.069,.104,.138,.173,.207,.239,.272,.300,   
     /.328,.355,.383,.406,.429,.454,.475,.498,.518,.537,                
     /.556,.575,.641,.699,.744,.786,.821,.851,.876,.931,                
     /.950,.968,.977,.981,.981,.980,.974,.968,.958,.948,                
     /.939,.925,.913,.907,.889,.877,.866,.853,.839,.827,                
     /.813,.792,.754,.716,.638,.576,.523,.482,.446,.414,                
     /.387,.366,.344,.326,.310,.295,.282,.271,.257,.247,
     /.0247,.00247/                
#---------------------------------------------------------------------- 
      NAME=' DEUTERIUM 98  '                                            
# --------------------------------------------------------------------  
#  CALCULATE FRACTIONAL POPULATION DENSITY FOR ROTATIONAL STATES        
      B0=0.00377272                                                     
      DO 111 K=1,7,2                                                    
 111  PJ(K)=3*(2*K+1)*math.exp(-K*(K+1)*B0/AKT)                             
      DO 112 K=2,6,2                                                    
 112  PJ(K)=6*(2*K+1)*math.exp(-K*(K+1)*B0/AKT)                             
      SUM=6.0                                                           
      DO 113 K=1,7                                                      
 113  SUM=SUM+PJ(K)                                                     
      FROT0=6.0/SUM                                                     
      FROT1=PJ(1)/SUM                                                   
      FROT2=PJ(2)/SUM                                                   
      FROT3=PJ(3)/SUM                                                   
      FROT4=PJ(4)/SUM                                                   
      FROT5=PJ(5)/SUM
      FROT6=PJ(6)/SUM
      FROT7=PJ(7)/SUM
#     WRITE(6,88) FROT0,FROT1,FROT2,FROT3,FROT4,FROT5,FROT6,FROT7
#  88 FORMAT(2X,' FROT0=',F9.5,' FROT1=',F9.5,' FROT2=',F9.5,' FROT3=',
#    /F9.5,' FROT4=',F9.5,' FROT5=',F9.5,' FROT6=',F9.5,' FROT7=',F9.5)                                                            
#----------------------------------------------------------------------
#
      NION=1
      NATT=1
      NIN=15 
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0                                                          
      NDATA=53                                                          
      NROT0=40                                                          
      NROT1=42                                                          
      NROT2=31                                                          
      NROT3=31 
      NROT4=31
      NROT5=30                                                          
      NVIB1=35                                                          
      NVIB2=35                                                          
      NVIB3=16                                                          
      NVIB4=16                                                          
      NEXC1=20                                                          
      NEXC2=23                                                          
      NIOND=72                                                          
      NATT1=18                                                          
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(4.028204*AMU)                                     
      E(3)=15.427                                                       
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      EOBY(1)=8.30
      EIN(1)=-.0226
      EIN(2)=-.0377
      EIN(3)=-.0528
      EIN(4)=0.0226                                                     
      EIN(5)=0.0377                                                     
      EIN(6)=0.0528                                                     
      EIN(7)=0.0679 
      EIN(8)=0.0830 
      EIN(9)=0.0981  
      EIN(10)=0.371                                                   
      EIN(11)=0.391                                                     
      EIN(12)=0.735                                                     
      EIN(13)=1.085                                                     
      EIN(14)=8.85                                                      
      EIN(15)=12.0 
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       DEUTERIUM      '
      SCRPT(3)=' IONISATION    ELOSS= 15.427  '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      SCRPT(7)=' ROT 2-0       ELOSS= -0.0226 '
      SCRPT(8)=' ROT 3-1       ELOSS= -0.0377 '
      SCRPT(9)=' ROT 4-2       ELOSS= -0.0528 '
      SCRPT(10)=' ROT 0-2       ELOSS=  0.0226 '
      SCRPT(11)=' ROT 1-3       ELOSS=  0.0377 '
      SCRPT(12)=' ROT 2-4       ELOSS=  0.0528 '
      SCRPT(13)=' ROT 3-5       ELOSS=  0.0679 '
      SCRPT(14)=' ROT 4-6 + 6-8 ELOSS=  0.0830 '
      SCRPT(15)=' ROT 5-7 + 7-9 ELOSS=  0.0981 '
      SCRPT(16)=' VIB V1 DJ=0   ELOSS=  0.371  '
      SCRPT(17)=' VIB V1 DJ=2   ELOSS=  0.391  '
      SCRPT(18)=' VIB 2V1       ELOSS=  0.735  '
      SCRPT(19)=' VIB 3V1       ELOSS=  1.085  '
      SCRPT(20)=' EXC TRPLT     ELOSS=  8.85   '
      SCRPT(21)=' EXC SNGLT     ELOSS= 12.0    '                        
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      DO 10 J=2,NDATA                                                   
      IF(EN <= XEN(J):
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA                                                           
   20 A=(YXSEC(J)-YXSEC(J-1))/(XEN(J)-XEN(J-1))                         
      B=(XEN(J-1)*YXSEC(J)-XEN(J)*YXSEC(J-1))/(XEN(J-1)-XEN(J))         
      Q(2,I)=(A*EN+B)*1.0D-16                                           
#                                                                       
      Q(3,I)=0.0                                                        
      IF(EN < E(3):
) GO TO 200                                          
      DO 110 J=2,NIOND                                                  
      IF(EN <= XION(J):
) GO TO 120                                       
  110 CONTINUE                                                          
      J=NIOND                                                    
  120 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.D-16                                            
  200 CONTINUE                                                          
#                                                                       
      Q(4,I)=0.0  
      QATT(1,I)=Q(4,I)                                                 
      IF(EN < XATT(1):
) GO TO 300                                       
      DO 210 J=2,NATT1                                                  
      IF(EN <= XATT(J):
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NATT1                                                           
  220 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))                         
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))       
      Q(4,I)=(A*EN+B)*1.D-16 
      QATT(1,I)=Q(4,I)                                           
  300 CONTINUE                                                          
      Q(5,I)=0.0                                                        
      Q(6,I)=0.0                                                        
#--------------------------------------------------------------------- 
#                    SUPERELASTIC 2-0
      QIN(1,I)=0.0
      IF(EN <= 0.0):
 GO TO 1100
      DO 1010 J=2,NROT0
      IF((EN+EIN(4):
) <= XROT0(J)) GO TO 1020
 1010 CONTINUE
      J=NROT0
 1020 A=(YROT0(J)-YROT0(J-1))/(XROT0(J)-XROT0(J-1))                     
      B=(XROT0(J-1)*YROT0(J)-XROT0(J)*YROT0(J-1))/(XROT0(J-1)-XROT0(J))
      QIN(1,I)=FROT2*0.2*(EN+EIN(4))*(A*(EN+EIN(4))+B)*1.D-16/EN 
 1100 CONTINUE
#                    SUPERELASTIC 3-1
      QIN(2,I)=0.0
      IF(EN <= 0.0):
 GO TO 1101 
      DO 1011 J=2,NROT1
      IF((EN+EIN(5):
) <= XROT1(J)) GO TO 1021
 1011 CONTINUE
      J=NROT1
 1021 A=(YROT1(J)-YROT1(J-1))/(XROT1(J)-XROT1(J-1))                     
      B=(XROT1(J-1)*YROT1(J)-XROT1(J)*YROT1(J-1))/(XROT1(J-1)-XROT1(J)) 
      QIN(2,I)=FROT3*(3.0/7.0)*(EN+EIN(5))*(A*(EN+EIN(5))+B)*1.D-16/EN
 1101 CONTINUE
#                    SUPERELASTIC 4-2  
      QIN(3,I)=0.0
      IF(EN <= 0.0):
 GO TO 1102 
      DO 1012 J=2,NROT2
      IF((EN+EIN(6):
) <= XROT2(J)) GO TO 1022
 1012 CONTINUE
      J=NROT2
 1022 A=(YROT2(J)-YROT2(J-1))/(XROT2(J)-XROT2(J-1))                     
      B=(XROT2(J-1)*YROT2(J)-XROT2(J)*YROT2(J-1))/(XROT2(J-1)-XROT2(J)) 
      QIN(3,I)=FROT4*(5.0/9.0)*(EN+EIN(6))*(A*(EN+EIN(6))+B)*1.D-16/EN
 1102 CONTINUE
#                      ROTATION 0-2 
      QIN(4,I)=0.0                                                      
      IF(EN <= EIN(4):
) GO TO 1400                                       
      DO 1310 J=2,NROT0                                                 
      IF(EN <= XROT0(J):
) GO TO 1320                                     
 1310 CONTINUE                                                          
      J=NROT0                                                           
 1320 A=(YROT0(J)-YROT0(J-1))/(XROT0(J)-XROT0(J-1))                     
      B=(XROT0(J-1)*YROT0(J)-XROT0(J)*YROT0(J-1))/(XROT0(J-1)-XROT0(J)) 
      QIN(4,I)=(A*EN+B)*1.D-16*FROT0                                    
 1400 CONTINUE                                                          
#                        ROTATION 1-3                                   
      QIN(5,I)=0.0                                                      
      IF(EN <= EIN(5):
) GO TO 1401                                       
      DO 1311 J=2,NROT1                                                 
      IF(EN <= XROT1(J):
) GO TO 1321                                     
 1311 CONTINUE                                                          
      J=NROT1                                                           
 1321 A=(YROT1(J)-YROT1(J-1))/(XROT1(J)-XROT1(J-1))                     
      B=(XROT1(J-1)*YROT1(J)-XROT1(J)*YROT1(J-1))/(XROT1(J-1)-XROT1(J)) 
      QIN(5,I)=(A*EN+B)*1.D-16*FROT1                                    
 1401 CONTINUE                                                          
#                      ROTATION 2-4                                     
      QIN(6,I)=0.0                                                      
      IF(EN <= EIN(6):
) GO TO 1402                                       
      DO 1312 J=2,NROT2                                                 
      IF(EN <= XROT2(J):
) GO TO 1322                                     
 1312 CONTINUE                                                          
      J=NROT2                                                           
 1322 A=(YROT2(J)-YROT2(J-1))/(XROT2(J)-XROT2(J-1))                     
      B=(XROT2(J-1)*YROT2(J)-XROT2(J)*YROT2(J-1))/(XROT2(J-1)-XROT2(J)) 
      QIN(6,I)=(A*EN+B)*1.D-16*FROT2                                    
 1402 CONTINUE                                                          
#                        ROTATION 3-5                                   
      QIN(7,I)=0.0                                                      
      IF(EN <= EIN(7):
) GO TO 1403                                       
      DO 1313 J=2,NROT3                                                 
      IF(EN <= XROT3(J):
) GO TO 1323                                     
 1313 CONTINUE                                                          
      J=NROT3                                                           
 1323 A=(YROT3(J)-YROT3(J-1))/(XROT3(J)-XROT3(J-1))                     
      B=(XROT3(J-1)*YROT3(J)-XROT3(J)*YROT3(J-1))/(XROT3(J-1)-XROT3(J)) 
      QIN(7,I)=(A*EN+B)*1.D-16*FROT3                                    
 1403 CONTINUE                 
#                      ROTATION 4-6 + 6-8 
      QIN(8,I)=0.0                                                      
      IF(EN <= EIN(8):
) GO TO 1404                                       
      DO 1314 J=2,NROT4                                                 
      IF(EN <= XROT4(J):
) GO TO 1324                                     
 1314 CONTINUE                                                          
      J=NROT4                                                           
 1324 A=(YROT4(J)-YROT4(J-1))/(XROT4(J)-XROT4(J-1))                     
      B=(XROT4(J-1)*YROT4(J)-XROT4(J)*YROT4(J-1))/(XROT4(J-1)-XROT4(J)) 
      QIN(8,I)=(A*EN+B)*1.D-16*(FROT4+FROT6)                            
 1404 CONTINUE                 
#                      ROTATION 5-7 + 7-9 
      QIN(9,I)=0.0                                                      
      IF(EN <= EIN(9):
) GO TO 1405                                       
      DO 1315 J=2,NROT5                                                 
      IF(EN <= XROT5(J):
) GO TO 1325                                     
 1315 CONTINUE                                                          
      J=NROT5                                                           
 1325 A=(YROT5(J)-YROT5(J-1))/(XROT5(J)-XROT5(J-1))                     
      B=(XROT5(J-1)*YROT5(J)-XROT5(J)*YROT5(J-1))/(XROT5(J-1)-XROT5(J)) 
      QIN(9,I)=(A*EN+B)*1.D-16*(FROT5+FROT7)                            
 1405 CONTINUE                 
#-----------------------------------------------------------------------
      QIN(10,I)=0.0                                                     
      IF(EN <= EIN(10):
) GO TO 400                                       
      DO 310 J=2,NVIB1                                                  
      IF(EN <= XVIB1(J):
) GO TO 320                                      
  310 CONTINUE                                                          
      J=NVIB1                                                           
  320 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J)) 
      QIN(10,I)=(A*EN+B)*1.D-16                 
  400 CONTINUE                                                          
#                                                                       
      QIN(11,I)=0.0                                                     
      IF(EN <= EIN(11):
) GO TO 500                                       
      DO 410 J=2,NVIB2                                                  
      IF(EN <= XVIB2(J):
) GO TO 420                                      
  410 CONTINUE                                                          
      J=NVIB2                                                           
  420 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J)) 
      QIN(11,I)=(A*EN+B)*1.D-16                                         
  500 CONTINUE                                                          
#                                                                       
      QIN(12,I)=0.0                                                     
      IF(EN <= EIN(12):
) GO TO 501                                       
      DO 411 J=2,NVIB3                                                  
      IF(EN <= XVIB3(J):
) GO TO 421                                      
  411 CONTINUE                                                          
      J=NVIB3                                                           
  421 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J)) 
      QIN(12,I)=(A*EN+B)*1.D-16                                         
  501 CONTINUE                                                          
#                                                                       
      QIN(13,I)=0.0                                                     
      IF(EN <= EIN(13):
) GO TO 502                                       
      DO 412 J=2,NVIB4                                                  
      IF(EN <= XVIB4(J):
) GO TO 422                                      
  412 CONTINUE                                                          
      J=NVIB4                                                           
  422 A=(YVIB4(J)-YVIB4(J-1))/(XVIB4(J)-XVIB4(J-1))                     
      B=(XVIB4(J-1)*YVIB4(J)-XVIB4(J)*YVIB4(J-1))/(XVIB4(J-1)-XVIB4(J)) 
      QIN(13,I)=(A*EN+B)*1.D-16                                         
  502 CONTINUE                                                          
#-----------------------------------------------------------------------
      QIN(14,I)=0.0                                                     
      IF(EN <= EIN(14):
) GO TO 600                                       
      DO 510 J=2,NEXC1                                                  
      IF(EN <= XEXC1(J):
) GO TO 520                                      
  510 CONTINUE                                                          
      J=NEXC1                                                           
  520 A=(YEXC1(J)-YEXC1(J-1))/(XEXC1(J)-XEXC1(J-1))                     
      B=(XEXC1(J-1)*YEXC1(J)-XEXC1(J)*YEXC1(J-1))/(XEXC1(J-1)-XEXC1(J)) 
      QIN(14,I)=(A*EN+B)*1.D-16              
  600 CONTINUE                                                          
#                                                                       
      QIN(15,I)=0.0                                                     
      IF(EN <= EIN(15):
) GO TO 700                                       
      DO 610 J=2,NEXC2                                                  
      IF(EN <= XEXC2(J):
) GO TO 620                                      
  610 CONTINUE                                                          
      J=NEXC2                                                           
  620 A=(YEXC2(J)-YEXC2(J-1))/(XEXC2(J)-XEXC2(J-1))                     
      B=(XEXC2(J-1)*YEXC2(J)-XEXC2(J)*YEXC2(J-1))/(XEXC2(J-1)-XEXC2(J)) 
      QIN(15,I)=(A*EN+B)*1.D-16                                         
  700 CONTINUE                                                          
#---------------------------------------------------------------------  
# NB. ROTATIONAL AND VIBRATIONAL STATES INCLUDED IN Q(2,I)              
# -------------------------------------------------------------------   
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)+QIN(14,I)+QIN(15,I)                   
# GET CORRECT ELASTIC XSECTION 
      IF(EN < 200.):
 :                                         
      Q(2,I)=Q(2,I)-QIN(1,I)-QIN(2,I)-QIN(3,I)-QIN(4,I)-QIN(5,I)-QIN(6,I
     /)-QIN(7,I)-QIN(8,I)-QIN(9,I)-QIN(10,I)-QIN(11,I)-QIN(12,I)-QIN(13,
     /I)          
      # endIF
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      IF(EFINAL <= EIN(15):
) NIN=14
      IF(EFINAL <= EIN(14):
) NIN=13 
      IF(EFINAL <= EIN(13):
) NIN=12 
      IF(EFINAL <= EIN(12):
) NIN=11
      IF(EFINAL <= EIN(11):
) NIN=10
      IF(EFINAL <= EIN(10):
) NIN=9                                       
      IF(EFINAL <= EIN(9):
) NIN=8                                        
      IF(EFINAL <= EIN(8):
) NIN=7                                        
      IF(EFINAL <= EIN(7):
) NIN=6                                        
      IF(EFINAL <= EIN(6):
) NIN=5                                        
      IF(EFINAL <= EIN(5):
) NIN=4                                        
      IF(EFINAL <= EIN(4):
) NIN=3                                        
      IF(EFINAL <= EIN(3):
) NIN=2                                        
      IF(EFINAL <= EIN(2):
) NIN=1                                        
      IF(EFINAL <= EIN(1):
) NIN=0                                        
#                                                                       
      RETURN                                                            
      # end            
      def GAS23(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY  
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)  
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)       
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250],
     /PJ(40)     
      DIMENSION XEN(53),YEN(53),XVIB1(52),YVIB1(52),XVIB2(27),YVIB2(27),
     /XVIB3(24),YVIB3(24),XVIB4(23),YVIB4(23),XVIB5(20),YVIB5(20),
     /XVIB6(19),YVIB6(19),XION(90),YION(90),XATT(52),YATT(52),
     /XEXC(30),YEXC(30),XEXC1(26),YEXC1(26),XEXC2(24),YEXC2(24),
     /XEXC3(22),YEXC3(22),XEXC4(21),YEXC4(21),XEXC5(19),YEXC5(19) 
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME 
# ELASTIC MOMENTUM TRANSFER                                         
      DATA XEN/0.00,.001,.002,.003,.005,.007,.0085,0.01,.015,0.02,
     /0.03,0.04,0.05,0.07,0.10,0.12,0.14,0.16,0.18,0.20,
     /0.25,0.30,0.40,0.50,0.60,0.80,1.00,1.20,1.40,1.60,
     /1.80,2.00,2.50,3.00,4.00,5.00,6.00,7.00,8.00,10.0,
     /12.0,15.0,17.0,20.0,25.0,30.0,50.0,75.0,100.,200.,
     /1000.,10000.,100000./
      DATA YEN/0.51,0.90,1.08,1.24,1.50,1.72,1.85,2.00,2.42,2.77, 
     /3.38,3.90,4.35,5.10,6.00,6.50,7.10,7.75,8.10,8.50,
     /10.7,12.4,14.7,15.6,16.1,16.4,17.5,22.4,30.1,36.2,
     /37.4,37.2,20.3,16.4,12.1,11.2,10.7,10.2,9.81,8.83,
     /8.48,8.38,8.08,7.58,6.59,5.79,3.59,2.29,1.70,1.00,
     /0.15,.015,.0015/
#     
      DATA XVIB1/.266,.270,0.28,0.30,0.32,0.35,0.40,0.45,0.50,0.60,     
     /0.70,0.80,0.85,0.90,0.95,1.00,1.05,1.10,1.22,1.31,                
     /1.41,1.51,1.65,1.74,1.82,1.90,1.98,2.09,2.17,2.28,                
     /2.32,2.40,2.51,2.69,2.87,3.07,3.29,3.53,3.82,4.00,
     /5.00,6.00,8.00,10.0,12.0,15.0,20.0,30.0,100.,1000., 
     /10000.,100000./
      DATA YVIB1/0.00,.045,.081,.117,.131,.153,.165,.168,.167,.155,     
     /.135,.118,.112,.115,.120,.130,.196,.320,0.77,1.31, 
     /2.30,3.44,3.23,3.80,4.20,3.74,3.34,3.64,3.18,2.67,                
     /2.74,2.39,2.00,1.57,1.17,0.83,0.55,0.35,0.18,.051,
     /.043,.037,.030,.025,.022,.018,.014,.010,.0037,.00037,
     /.000037,.0000037/
      DATA XVIB2/.528,1.10,1.20,1.30,1.40,1.50,1.60,1.70,1.80,1.90,     
     /2.00,2.10,2.20,2.30,2.40,2.50,2.60,2.70,2.80,2.90,                
     /3.00,3.20,10.0,100.,1000.,10000.,100000./                         
      DATA YVIB2/0.00,.027,.055,.135,.495,1.11,1.66,1.43,1.22,1.66,     
     /1.43,1.14,1.15,0.91,0.67,0.67,0.44,0.39,0.22,0.22,                
     /0.11,.055,.005,.0005,.00005,.000005,.0000006/                     
      DATA XVIB3/.787,1.40,1.50,1.60,1.70,1.80,1.90,2.00,2.10,2.20,
     /2.30,2.40,2.50,2.60,2.70,2.80,2.90,3.00,3.20,10.0,
     /100.,1000.,10000.,100000./
      DATA YVIB3/0.00,.055,0.28,0.77,1.08,0.83,0.49,0.72,0.83,0.44,
     /0.39,0.44,0.22,0.25,0.17,0.11,0.12,.055,.022,.0022,
     /.00022,.000022,.0000022,.00000022/
      DATA XVIB4/1.043,1.40,1.50,1.60,1.70,1.80,1.90,2.00,2.10,2.20,
     /2.30,2.40,2.50,2.60,2.70,2.80,2.90,3.00,10.0,100.,
     /1000.,10000.,100000./
      DATA YVIB4/0.00,.013,0.11,0.25,0.61,0.77,0.61,0.20,0.32,0.41,
     /0.22,0.12,0.20,.045,.045,.012,.0032,.0027,.0003,.00003,
     /.000003,.0000003,.00000003/
      DATA XVIB5/1.295,1.60,1.70,1.80,1.90,2.00,2.10,2.20,2.30,2.40,
     /2.50,2.60,2.70,2.80,3.00,10.0,100.,1000.,10000.,100000./ 
      DATA YVIB5/0.00,.055,0.29,0.32,0.54,0.32,0.11,.049,0.20,.072,
     /.045,.045,.009,.004,.002,.0002,.00002,.000002,.0000002,.00000002/
      DATA XVIB6/1.544,1.70,1.80,1.90,2.00,2.10,2.20,2.30,2.40,2.50,
     /2.60,2.70,2.80,3.00,10.0,100.,1000.,10000.,100000./
      DATA YVIB6/0.00,.049,0.13,0.22,0.61,0.61,0.45,0.34,0.20,0.14,
     /0.13,.042,.014,.0045,.0005,.00005,.000005,.0000005,.00000005/  
#        
      DATA XION/14.013,14.5,15.0,15.5,16.0,16.5,17.0,17.5,18.0,18.5,    
     /19.0,19.5,20.0,20.5,21.0,21.5,22.0,22.5,23.0,23.5,                
     /24.0,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,45.0, 
     /50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0, 
     /100.,105.,110.,115.,120.,125.,130.,135.,140.,145.,
     /150.,160.,180.,200.,250.,300.,350.,400.,450.,500.,
     /550.,600.,650.,700.,750.,800.,850.,900.,950.,1000.,
     /1100.,1200.,1300.,1400.,1500.,1600.,1800.,2000.,2500.,3000.,
     /4000.,6000.,8000.,10000.,15000.,20000.,30000.,40000.,60000.,
     /100000./
      DATA YION/0.00,.0273,.051,.077,.106,.139,.177,.214,.254,.297,     
     /.340,.386,.428,.472,.516,.560,.601,.643,.684,.724,                
     /.766,.933,1.09,1.24,1.38,1.50,1.60,1.70,1.79,1.97,
     /2.12,2.24,2.34,2.43,2.50,2.53,2.59,2.60,2.63,2.64,
     /2.65,2.66,2.66,2.65,2.64,2.63,2.62,2.60,2.59,2.58,
     /2.57,2.52,2.45,2.37,2.16,1.99,1.85,1.72,1.59,1.50,
     /1.43,1.35,1.27,1.21,1.15,1.11,1.06,1.03,.994,.959,
     /.864,.810,.762,.721,.683,.650,.592,.545,.456,.392,
     /.309,.219,.172,.141,.099,.077,.054,.042,.029,
     /.019/               
      DATA XATT/9.00,9.20,9.30,9.35,9.40,9.45,9.60,9.65,9.70,9.75,      
     /9.80,9.85,9.90,10.0,10.1,10.2,10.3,10.4,10.5,10.6,
     /10.7,10.8,10.9,11.0,11.1,11.2,11.3,11.4,11.5,11.6,
     /11.7,11.8,11.9,12.0,12.1,12.2,12.3,12.4,12.5,12.6,
     /12.8,13.0,19.0,25.0,30.0,35.0,40.0,60.0,100.,1000.,
     /10000.,100000./
      DATA YATT/0.00,.00009,.00018,.00026,.00034,.00073,.0011,.0017,    
     /.0018,.0019,.0020,.0020,.0020,.0020,.0020,.0019,.0018,.0017,.0015,
     /.0014,.0012,.0011,.0010,.00088,.00077,.00065,.00055,.00047,.00040,
     /.00033,.00028,.00024,.00019,.00017,.00014,.00011,.00010,.00009,
     /.00008,.00007,.00006,.00006,.00006,.00006,.0001,.0001,.0001,.0001,
     /.0001,.0001,.0000001,.00000001/
#  EXCITATION A3 PI     
      DATA XEXC/6.04,6.20,6.40,6.60,7.00,7.15,8.00,9.00,10.0,11.0,      
     /12.0,13.0,14.0,15.0,17.0,20.0,22.0,24.0,27.0,30.0,                
     /35.0,40.0,50.0,60.0,70.0,80.0,100.,1000.,10000.,100000./          
      DATA YEXC/0.00,2.04,2.09,2.04,0.55,0.29,0.53,0.94,1.06,1.08,    
     /1.02,0.92,0.81,0.71,0.55,0.39,0.34,0.29,.245,0.22,                
     /0.21,0.20,0.18,0.17,0.15,0.14,.127,.028,.0028,.00028/ 
# EXCITATION  A3 SIGMA                             
      DATA XEXC1/6.82,7.00,8.00,9.00,10.0,11.0,12.0,13.0,14.0,15.0,     
     /17.0,20.0,22.0,24.0,27.0,30.0,35.0,40.0,50.0,60.0,                
     /70.0,80.0,100.0,1000.,10000.,100000./                             
      DATA YEXC1/0.00,.013,0.07,0.34,0.46,0.50,0.49,0.46,0.42,0.38,     
     /0.32,0.25,0.21,0.18,0.15,.118,.084,.056,.031,.018,                
     /.0118,.007,.003,.00014,.000014,.0000014/
# EXCITATION  A1 PI                                                 
      DATA XEXC2/8.07,9.00,10.0,11.0,12.0,13.0,14.0,15.0,17.0,20.0,
     /22.0,24.0,27.0,30.0,35.0,40.0,50.0,60.0,70.0,80.0,
     /100.,1000.,10000.,100000./
      DATA YEXC2/0.00,.108,0.18,0.24,0.27,0.29,0.32,0.35,0.38,0.39,
     /0.40,0.42,0.42,0.41,0.40,0.39,0.38,0.36,0.35,0.34,
     /0.31,.084,.0084,.00084/
#  EXCITATION B3 SIGMA
      DATA XEXC3/10.39,11.0,12.0,13.0,14.0,15.0,17.0,20.0,22.0,24.0,
     /27.0,30.0,35.0,40.0,50.0,60.0,70.0,80.0,100.,1000.,
     /10000.,100000./       
      DATA YEXC3/0.00,.025,.035,.055,.066,.074,.077,.060,.042,.028,
     /.018,.015,.0137,.0127,.0118,.0118,.0108,.0108,.0099,.0014,
     /.00014,.000014/
#  EXCITATION C1 SIGMA +E1 PI
      DATA XEXC4/11.3,12.0,13.0,14.0,15.0,17.0,20.0,22.0,24.0,27.0,
     /30.0,35.0,40.0,50.0,60.0,70.0,80.0,100.,1000.,10000.,
     /100000./ 
      DATA YEXC4/0.00,.056,.087,0.12,0.14,.175,0.22,0.24,0.25,0.27,
     /0.28,0.28,0.28,0.27,0.25,.245,0.24,0.22,.063,.0063,
     /.00063/
#   EXCITATION   SUM OF HIGHER LEVELS 
      DATA XEXC5/13.5,14.0,15.0,17.0,20.0,22.0,24.0,27.0,30.0,35.0,
     /40.0,50.0,60.0,70.0,80.0,100.,1000.,10000.,100000./
      DATA YEXC5/0.00,0.07,0.14,0.29,0.39,0.42,0.45,0.48,0.49,0.50,
     /0.52,0.52,0.50,0.49,0.48,0.46,0.13,.013,.0013/                   
# -------------------------------------------------------------------
#  FIT TO DATA OF :   
#             HADDAD AND MILLOY      AUST J. PHYS 36(1983)473
#             PETROVIC AND CROMPTON  AUST J. PHYS 42(1989)609
#             NAKAMURA               J.PHYS D 20(1987) 933
#             SAELEE AND LUCAS       J.PHYS D 10(1977) 343
#     AND LOW TEMPERTURE PACK AND PHELPS DATA
#    REPLACES 1998 ROUTINE  
#  USES ANISTROPIC ANGULAR DISTRIBUTION FOR DIPOLE ROTATIONAL STATES      
# -------------------------------------------------------------------
#        
      NAME='  C-O  2003    '
#               
      NION=1
      NATT=1
      NIN=64
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
      KIN(J)=0
    2 IF(J <= 52) KIN(J)=1  
      NDATA=53
      NVIB1=52                        
      NVIB2=27
      NVIB3=24
      NVIB4=23
      NVIB5=20
      NVIB6=19                                                        
      NIOND=90                                                         
      NATT1=52                                                          
      NEXC=30                                                           
      NEXC1=26
      NEXC2=24
      NEXC3=22
      NEXC4=21
      NEXC5=19                                                        
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(28.0104*AMU)                                      
      E(3)=14.013                                                       
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
      EOBY(1)=14.013
#   B0 IS ROTATIONAL CONSTANT AND DBA IS DIPOLE MOMENT
#   DRAT IS RATIO OF MOMENTUM TRANSFER TO TOTAL X-SECTION FOR DIPOLE 
# ------------------------------------------------------  
      B0=2.384D-4
      DBA=0.0432
      DRAT=0.25  
      AVIB=1.0 
# -------------------------------------------------------      
      A0=0.5291772083D-8
      RY=13.60569172
      DBK=8.37758*RY*(DBA*A0)**2 
# CALCULATE ROTATIONAL STATE POPULATION AT TEMPERATURE       
      DO 3 K=1,26
    3 PJ(K)=(2*K+1)*math.exp(-K*(K+1)*B0/AKT)
      SUM=1.0
      DO 4 K=1,26
    4 SUM=SUM+PJ(K)
      FROT0=1.0/SUM
      DO 5 K=1,26
    5 PJ(K)=PJ(K)/SUM
# CALC ROTATIONAL TRANSITION ENERGIES
      DO 6 K=1,26
      J=K-1
      EIN(K+26)=B0*2*(J+1) 
    6 EIN(K)=-EIN(K+26)               
      EIN(53)=0.266                                                     
      EIN(54)=0.528                                                     
      EIN(55)=0.787                                                     
      EIN(56)=1.043
      EIN(57)=1.295
      EIN(58)=1.544
      EIN(59)=6.04
      EIN(60)=6.82
      EIN(61)=8.07
      EIN(62)=10.39
      EIN(63)=11.3
      EIN(64)=13.5
#     WRITE(6,99) FROT0,(PJ(J),J=1,30)
#  99 FORMAT(2X,'POP OF STATES=',/,11(2X,D10.3))
#     WRITE(6,98) (EIN(J),J=1,64)
#  98 FORMAT(2X,'TRANS ENERGY=',/,10(2X,D10.3))       
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       CARBON MONOXIDE'
      SCRPT(3)=' IONISATION    ELOSS= 14.013  '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      SCRPT(7)=' ROT 1-0       ELOSS= -0.00048'
      SCRPT(8)=' ROT 2-1       ELOSS= -0.00095'
      SCRPT(9)=' ROT 3-2       ELOSS= -0.00143'
      SCRPT(10)=' ROT 4-3       ELOSS= -0.00191'
      SCRPT(11)=' ROT 5-4       ELOSS= -0.00238'
      SCRPT(12)=' ROT 6-5       ELOSS= -0.00286'
      SCRPT(13)=' ROT 7-6       ELOSS= -0.00334'
      SCRPT(14)=' ROT 8-7       ELOSS= -0.00381'
      SCRPT(15)=' ROT 9-8       ELOSS= -0.00429'
      SCRPT(16)=' ROT 10-9      ELOSS= -0.00477'  
      SCRPT(17)=' ROT 11-10     ELOSS= -0.00524'
      SCRPT(18)=' ROT 12-11     ELOSS= -0.00572'
      SCRPT(19)=' ROT 13-12     ELOSS= -0.00620'
      SCRPT(20)=' ROT 14-13     ELOSS= -0.00668'
      SCRPT(21)=' ROT 15-14     ELOSS= -0.00715'
      SCRPT(22)=' ROT 16-15     ELOSS= -0.00763'
      SCRPT(23)=' ROT 17-16     ELOSS= -0.00811'
      SCRPT(24)=' ROT 18-17     ELOSS= -0.00858'
      SCRPT(25)=' ROT 19-18     ELOSS= -0.00906'
      SCRPT(26)=' ROT 20-19     ELOSS= -0.00954'  
      SCRPT(27)=' ROT 21-20     ELOSS= -0.0100 '
      SCRPT(28)=' ROT 22-21     ELOSS= -0.0105 '
      SCRPT(29)=' ROT 23-22     ELOSS= -0.0110 '
      SCRPT(30)=' ROT 24-23     ELOSS= -0.0114 '
      SCRPT(31)=' ROT 25-24     ELOSS= -0.0119 '
      SCRPT(32)=' ROT 26-25     ELOSS= -0.0124 '
      SCRPT(33)=' ROT 0-1       ELOSS=  0.00048'
      SCRPT(34)=' ROT 1-2       ELOSS=  0.00095'
      SCRPT(35)=' ROT 2-3       ELOSS=  0.00143'
      SCRPT(36)=' ROT 3-4       ELOSS=  0.00191'  
      SCRPT(37)=' ROT 4-5       ELOSS=  0.00238'
      SCRPT(38)=' ROT 5-6       ELOSS=  0.00286'
      SCRPT(39)=' ROT 6-7       ELOSS=  0.00334'
      SCRPT(40)=' ROT 7-8       ELOSS=  0.00381'
      SCRPT(41)=' ROT 8-9       ELOSS=  0.00429' 
      SCRPT(42)=' ROT 9-10      ELOSS=  0.00477'
      SCRPT(43)=' ROT 10-11     ELOSS=  0.00524'
      SCRPT(44)=' ROT 11-12     ELOSS=  0.00572'
      SCRPT(45)=' ROT 12-13     ELOSS=  0.00620'
      SCRPT(46)=' ROT 13-14     ELOSS=  0.00668'  
      SCRPT(47)=' ROT 14-15     ELOSS=  0.00715'
      SCRPT(48)=' ROT 15-16     ELOSS=  0.00763'
      SCRPT(49)=' ROT 16-17     ELOSS=  0.00811'
      SCRPT(50)=' ROT 17-18     ELOSS=  0.00858'
      SCRPT(51)=' ROT 18-19     ELOSS=  0.00906'
      SCRPT(52)=' ROT 19-20     ELOSS=  0.00954'
      SCRPT(53)=' ROT 20-21     ELOSS=  0.0100 '
      SCRPT(54)=' ROT 21-22     ELOSS=  0.0105 '
      SCRPT(55)=' ROT 22-23     ELOSS=  0.0110 '
      SCRPT(56)=' ROT 23-24     ELOSS=  0.0114 '  
      SCRPT(57)=' ROT 24-25     ELOSS=  0.0119 '
      SCRPT(58)=' ROT 25-26     ELOSS=  0.0124 '
      SCRPT(59)=' VIB V1        ELOSS=  0.266  '
      SCRPT(60)=' VIB 2V1       ELOSS=  0.528  '
      SCRPT(61)=' VIB 3V1       ELOSS=  0.787  '
      SCRPT(62)=' VIB 4V1       ELOSS=  1.043  '
      SCRPT(63)=' VIB 5V1       ELOSS=  1.295  '
      SCRPT(64)=' VIB 6V1       ELOSS=  1.544  '
      SCRPT(65)=' EXC A3 PI     ELOSS=  6.04   '
      SCRPT(66)=' EXC A3 SIGMA  ELOSS=  6.82   '  
      SCRPT(67)=' EXC A1 PI     ELOSS=  8.07   '
      SCRPT(68)=' EXC B3 SIGMA  ELOSS= 10.39   '
      SCRPT(69)=' EXC C1 + E1   ELOSS= 11.3    '
      SCRPT(70)=' EXC           ELOSS= 13.5    '                        
      EN=-ESTEP/2.0                                      
      DO 9000 I=1,NSTEP                                              
      EN=EN+ESTEP                                                       
      DO 10 J=2,NDATA                                                   
      IF(EN <= XEN(J):
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA                                                           
   20 A=(YEN(J)-YEN(J-1))/(XEN(J)-XEN(J-1))                         
      B=(XEN(J-1)*YEN(J)-XEN(J)*YEN(J-1))/(XEN(J-1)-XEN(J))         
      Q(2,I)=(A*EN+B)*1.0D-16                                           
#                                                                       
      Q(3,I)=0.0                                                        
      IF(EN < E(3):
) GO TO 50                                           
      DO 30 J=2,NIOND                                                   
      IF(EN <= XION(J):
) GO TO 40                                        
   30 CONTINUE                                                          
      J=NIOND                                                   
   40 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.D-16                                            
#                                                                       
   50 Q(4,I)=0.0   
      QATT(1,I)=Q(4,I)                                           
      IF(EN < XATT(1):
) GO TO 55                                        
      IF(EN > XATT(NATT1):
) GO TO 55                                    
      DO 51 J=2,NATT1                                                   
      IF(EN <= XATT(J):
) GO TO 52                                        
   51 CONTINUE                                                          
      J=NATT1                                                           
   52 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))                         
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))       
      Q(4,I)=(A*EN+B)*1.D-16
      QATT(1,I)=Q(4,I)                                            
#                                                                       
   55 Q(5,I)=0.0                                                        
      Q(6,I)=0.0       
#----------------------------------------------------------------------
# DIPOLE BORN ROTATIONAL STATES                                                       
#----------------------------------------------------------------------
      ENRT=math.sqrt(EN)
# SUPER ELASTIC ROTATIONAL COLLISIONS      
      DO 150 L=1,26 
      AL=DFLOAT(L)                                                
      QIN(L,I)=PJ(L)*DBK*math.log((ENRT+math.sqrt(EN-EIN(L)))/(math.sqrt(EN-EIN(L))-
     /ENRT))*AL/((2.0*AL+1.0)*EN) 
  150 PEQIN(L,I)=0.5+(QIN(L,I)-DRAT*QIN(L,I))/QIN(L,I)   
      DO 155 L=27,52
  155 QIN(L,I)=0.0    
# ROT 0-1           
      IF(EN <= EIN(27):
) GO TO 200
      QIN(27,I)=FROT0*DBK*math.log((ENRT+math.sqrt(EN-EIN(27)))/(ENRT-math.sqrt(EN-
     /EIN(27))))/EN
      PEQIN(27,I)=0.5+(QIN(27,I)-DRAT*QIN(27,I))/QIN(27,I)
# ROT 1-2 AND HIGHER     
      DO 160 L=28,52
      IF(EN <= EIN(L):
) GO TO 200
      AL=DFLOAT(L-27)
      QIN(L,I)=PJ(L-27)*DBK*math.log((ENRT+math.sqrt(EN-EIN(L)))/(ENRT-math.sqrt(EN-
     /EIN(L))))*(AL+1.0)/((2.0*AL+1.0)*EN)
  160 PEQIN(L,I)=0.5+(QIN(L,I)-DRAT*QIN(L,I))/QIN(L,I)    
#    
  200 CONTINUE
#                                                                       
      QIN(53,I)=0.0                                                     
      IF(EN <= EIN(53):
) GO TO 400                                       
      DO 310 J=2,NVIB1                                                  
      IF(EN <= XVIB1(J):
) GO TO 320                                      
  310 CONTINUE                                                          
      J=NVIB1                                                           
  320 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J)) 
      QIN(53,I)=(A*EN+B)*1.D-16*AVIB                                    
  400 CONTINUE                     
#                                                                       
      QIN(54,I)=0.0                                                     
      IF(EN <= EIN(54):
) GO TO 500                                       
      DO 410 J=2,NVIB2                                                  
      IF(EN <= XVIB2(J):
) GO TO 420                                      
  410 CONTINUE                                                          
      J=NVIB2                                                           
  420 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J)) 
      QIN(54,I)=(A*EN+B)*1.D-16                                         
  500 CONTINUE                                                          
#                          
      QIN(55,I)=0.0                                                     
      IF(EN <= EIN(55):
) GO TO 600                                       
      DO 510 J=2,NVIB3                                                  
      IF(EN <= XVIB3(J):
) GO TO 520                                      
  510 CONTINUE                                                          
      J=NVIB3                                                           
  520 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J)) 
      QIN(55,I)=(A*EN+B)*1.D-16                                         
  600 CONTINUE                                                          
#                          
      QIN(56,I)=0.0                                                     
      IF(EN <= EIN(56):
) GO TO 700                                       
      DO 610 J=2,NVIB4                                                  
      IF(EN <= XVIB4(J):
) GO TO 620                                      
  610 CONTINUE                                                          
      J=NVIB4                                                           
  620 A=(YVIB4(J)-YVIB4(J-1))/(XVIB4(J)-XVIB4(J-1))                     
      B=(XVIB4(J-1)*YVIB4(J)-XVIB4(J)*YVIB4(J-1))/(XVIB4(J-1)-XVIB4(J)) 
      QIN(56,I)=(A*EN+B)*1.D-16                                         
  700 CONTINUE                                                          
#                          
      QIN(57,I)=0.0                                                     
      IF(EN <= EIN(57):
) GO TO 800                                       
      DO 710 J=2,NVIB5                                                  
      IF(EN <= XVIB5(J):
) GO TO 720                                      
  710 CONTINUE                                                          
      J=NVIB5                                                           
  720 A=(YVIB5(J)-YVIB5(J-1))/(XVIB5(J)-XVIB5(J-1))                     
      B=(XVIB5(J-1)*YVIB5(J)-XVIB5(J)*YVIB5(J-1))/(XVIB5(J-1)-XVIB5(J)) 
      QIN(57,I)=(A*EN+B)*1.D-16                                         
  800 CONTINUE                                                          
#                          
      QIN(58,I)=0.0                                                     
      IF(EN <= EIN(58):
) GO TO 900                                       
      DO 810 J=2,NVIB6                                                  
      IF(EN <= XVIB6(J):
) GO TO 820                                      
  810 CONTINUE                                                          
      J=NVIB6                                                           
  820 A=(YVIB6(J)-YVIB6(J-1))/(XVIB6(J)-XVIB6(J-1))                     
      B=(XVIB6(J-1)*YVIB6(J)-XVIB6(J)*YVIB6(J-1))/(XVIB6(J-1)-XVIB6(J)) 
      QIN(58,I)=(A*EN+B)*1.D-16                                         
  900 CONTINUE                                                          
#                          
      QIN(59,I)=0.0                                                     
      IF(EN <= EIN(59):
) GO TO 1000                                      
      DO 910 J=2,NEXC                                                   
      IF(EN <= XEXC(J):
) GO TO 920                                       
  910 CONTINUE                                                          
      J=NEXC                                                            
  920 A=(YEXC(J)-YEXC(J-1))/(XEXC(J)-XEXC(J-1))                         
      B=(XEXC(J-1)*YEXC(J)-XEXC(J)*YEXC(J-1))/(XEXC(J-1)-XEXC(J))       
      QIN(59,I)=(A*EN+B)*1.D-16                                         
 1000 CONTINUE                                                          
#                                                                       
      QIN(60,I)=0.0                                                     
      IF(EN <= EIN(60):
) GO TO 1100                                      
      DO 1010 J=2,NEXC1                                                 
      IF(EN <= XEXC1(J):
) GO TO 1020                                     
 1010 CONTINUE                                                          
      J=NEXC1                                                           
 1020 A=(YEXC1(J)-YEXC1(J-1))/(XEXC1(J)-XEXC1(J-1))                     
      B=(XEXC1(J-1)*YEXC1(J)-XEXC1(J)*YEXC1(J-1))/(XEXC1(J-1)-XEXC1(J)) 
      QIN(60,I)=(A*EN+B)*1.D-16                                         
 1100 CONTINUE                                                          
#                                                                       
      QIN(61,I)=0.0                                                     
      IF(EN <= EIN(61):
) GO TO 1200                                      
      DO 1110 J=2,NEXC2                                                 
      IF(EN <= XEXC2(J):
) GO TO 1120                                     
 1110 CONTINUE                                                          
      J=NEXC2                                                           
 1120 A=(YEXC2(J)-YEXC2(J-1))/(XEXC2(J)-XEXC2(J-1))                     
      B=(XEXC2(J-1)*YEXC2(J)-XEXC2(J)*YEXC2(J-1))/(XEXC2(J-1)-XEXC2(J)) 
      QIN(61,I)=(A*EN+B)*1.D-16                                         
 1200 CONTINUE                                                          
#                                                                       
      QIN(62,I)=0.0                                                     
      IF(EN <= EIN(62):
) GO TO 1300                                      
      DO 1210 J=2,NEXC3                                                 
      IF(EN <= XEXC3(J):
) GO TO 1220                                     
 1210 CONTINUE                                                          
      J=NEXC3                                                           
 1220 A=(YEXC3(J)-YEXC3(J-1))/(XEXC3(J)-XEXC3(J-1))                     
      B=(XEXC3(J-1)*YEXC3(J)-XEXC3(J)*YEXC3(J-1))/(XEXC3(J-1)-XEXC3(J)) 
      QIN(62,I)=(A*EN+B)*1.D-16                                         
 1300 CONTINUE                                                          
#                                                                       
      QIN(63,I)=0.0                                                     
      IF(EN <= EIN(63):
) GO TO 1400                                      
      DO 1310 J=2,NEXC4                                                 
      IF(EN <= XEXC4(J):
) GO TO 1320                                     
 1310 CONTINUE                                                          
      J=NEXC4                                                           
 1320 A=(YEXC4(J)-YEXC4(J-1))/(XEXC4(J)-XEXC4(J-1))                     
      B=(XEXC4(J-1)*YEXC4(J)-XEXC4(J)*YEXC4(J-1))/(XEXC4(J-1)-XEXC4(J)) 
      QIN(63,I)=(A*EN+B)*1.D-16                                         
 1400 CONTINUE                                                          
#                                                                       
      QIN(64,I)=0.0                                                     
      IF(EN <= EIN(64):
) GO TO 1500                                      
      DO 1410 J=2,NEXC5                                                 
      IF(EN <= XEXC5(J):
) GO TO 1420                                     
 1410 CONTINUE                                                          
      J=NEXC5                                                           
 1420 A=(YEXC5(J)-YEXC5(J-1))/(XEXC5(J)-XEXC5(J-1))                     
      B=(XEXC5(J-1)*YEXC5(J)-XEXC5(J)*YEXC5(J-1))/(XEXC5(J-1)-XEXC5(J)) 
      QIN(64,I)=(A*EN+B)*1.D-16                                         
 1500 CONTINUE                                                          
#                                                                       
      SUM=0.0
      DO 2000 K=1,64 
      SUM=SUM+QIN(K,I)
 2000 CONTINUE
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)+SUM
 9000 CONTINUE                                                          
#  SAVE COMPUTE TIME
      DO 9900 K=1,64
      J=65-K                    
      IF(EFINAL <= EIN(J):
)  NIN=J-1 
 9900 CONTINUE                        
#                                                                       
      RETURN                                                            
      # end       
      def GAS24(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30) 
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)      
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      DIMENSION XEN(33),YXSEC(33),XVIB1(29),YVIB1(29),XVIB2(29),YVIB2(29
     /),XVIB3(28),YVIB3(28),XION(25),YION(25),XEXC(26),YEXC(26),        
     /XEXC1(31),YEXC1(31)
      CHARACTER*50 SCRPT(300),SCRPTN(10)                          
      CHARACTER*25 NAME                                                 
      DATA XEN/0.00,0.001,0.003,0.007,0.01,0.014,0.02,0.03,0.05,0.07,   
     /0.10,0.14,0.20,0.30,0.40,0.60,0.80,1.00,1.40,2.00,                
     /3.00,5.00,6.00,8.00,10.0,14.0,20.0,40.0,70.0,100.,                
     /140.,200.,1000./                                                  
      DATA YXSEC/165.,145.,135.,122.,108.,98.0,92.0,83.0,71.0,62.0,     
     /50.0,43.0,36.0,28.5,24.0,15.8,11.5,9.30,8.50,9.20,                
     /12.5,22.0,26.0,38.0,40.0,30.0,20.0,10.0,6.00,4.00,                
     /2.80,2.00,0.40/                                                   
      DATA XVIB1/0.00,0.12,0.121,0.13,0.14,0.17,0.22,0.26,0.36,0.46,    
     /0.56,0.66,0.76,0.96,1.36,2.00,3.00,4.00,5.00,6.00,                
     /7.00,8.00,9.00,10.0,14.0,20.0,40.0,100.,1000./                    
      DATA YVIB1/0.00,0.00,.052,0.42,0.75,1.03,1.21,1.26,1.14,0.98,     
     /0.84,0.74,0.66,0.58,0.49,0.56,0.77,1.23,1.75,2.27,                
     /2.36,2.27,1.92,1.40,0.59,0.28,0.07,0.02,0.00/                     
      DATA XVIB2/0.00,0.16,0.161,0.17,0.18,0.21,0.26,0.30,0.40,0.50,    
     /0.60,0.70,0.80,1.00,1.40,2.00,3.00,4.00,5.00,6.00,                
     /7.00,8.00,9.00,10.0,14.0,20.0,40.0,100.,1000./                    
      DATA YVIB2/0.00,0.00,.052,0.42,0.75,1.03,1.21,1.26,1.14,0.98,     
     /0.84,0.74,0.66,0.58,0.49,0.56,0.77,1.23,1.75,2.27,                
     /2.36,2.27,1.92,1.40,0.59,0.28,0.07,0.02,0.00/                     
      DATA XVIB3/0.00,0.36,0.362,0.38,0.40,0.42,0.47,0.51,0.55,0.60,    
     /0.70,0.80,1.00,1.40,2.00,3.00,4.00,5.00,6.00,7.00,                
     /8.00,9.00,10.0,14.0,20.0,40.0,100.,1000./                         
      DATA YVIB3/0.00,0.00,.053,.105,0.21,0.28,0.42,0.53,0.61,0.66,     
     /0.75,0.75,0.73,0.66,0.72,0.88,1.28,1.75,2.10,2.36,                
     /2.36,1.92,1.40,0.54,0.23,0.07,0.02,0.00/                          
      DATA XION/10.0,10.8,13.3,18.3,19.3,20.3,23.3,28.3,33.3,38.3,      
     /43.3,48.3,53.3,58.3,68.3,78.3,88.3,98.3,120.,140.,                
     /200.,300.,500.,700.,1000./                                        
      DATA YION/0.00,.251,2.28,5.93,6.84,7.52,9.01,11.1,12.6,13.6,      
     /14.5,15.0,15.2,15.6,16.0,16.1,16.0,15.7,15.2,14.6,                
     /12.5,9.67,6.74,5.04,4.01/                                         
      DATA XEXC/6.30,6.70,7.30,7.80,8.30,8.80,9.30,10.3,11.3,13.3,      
     /15.3,19.3,24.3,29.3,39.3,49.3,59.3,69.3,79.3,100.,                
     /150.,200.,300.,400.,600.,1000./                                   
      DATA YEXC/0.00,0.35,0.65,1.00,1.31,1.55,1.75,2.16,2.45,3.02,      
     /3.49,4.08,4.43,4.51,4.31,3.90,3.55,3.23,2.94,2.47,                
     /1.78,1.40,0.98,0.73,0.47,0.33/                                    
      DATA XEXC1/8.30,8.50,9.10,9.60,10.1,10.6,11.1,12.1,13.1,14.1,     
     /15.1,17.1,19.1,21.1,25.1,29.1,34.1,39.1,44.1,49.1,                
     /59.1,69.1,79.1,100.,150.,200.,300.,400.,500.,600.,1000./          
      DATA YEXC1/0.00,0.12,0.26,0.38,0.47,0.58,0.70,1.06,1.60,2.36,     
     /3.29,4.81,5.94,6.53,7.16,7.24,7.06,6.61,6.10,5.54,                
     /4.61,3.96,3.47,2.80,2.04,1.67,1.22,0.96,0.79,0.67,0.49/           
#                                                                       
#  NO EXPERIMENTAL DATA ON TRANSVERSE DIFFUSION AVAILABLE SO TWO        
#  DATA SETS CREATED WITH EXPECTED MAXIMUM AND MINIMUM DIFFUSION        
#  HOT IS THE MORE DIFFUSING GAS.                                       
#                                                                       
      NAME='METHYLAL  HOT  '  
#      
      NION=1
      NATT=1
      NIN=5 
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0                                                          
      NDATA=33                                                          
      NVIB1=29                                                          
      NVIB2=29                                                          
      NVIB3=28                                                          
      NIOND=25                                                          
      NEXC=26                                                           
      NEXC1=31                                                          
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(76.09532*AMU)                                     
      E(3)=10.0                                                         
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0                                                          
      EIN(1)=0.12                                                       
      EIN(2)=0.16                                                       
      EIN(3)=0.36                                                       
      EIN(4)=6.3                                                        
      EIN(5)=8.3
      EOBY(1)=10.0
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       METHYLAL       '
      SCRPT(3)=' IONISATION    ELOSS= 10.0    '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      SCRPT(7)=' VIB           ELOSS=  0.12   '
      SCRPT(8)=' VIB           ELOSS=  0.16   '
      SCRPT(9)=' VIB           ELOSS=  0.36   '
      SCRPT(10)=' EXC           ELOSS=  6.3    '
      SCRPT(11)=' EXC           ELOSS=  8.3    '                        
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
#                                                                       
      DO 10 J=2,NDATA                                                   
      IF(EN <= XEN(J):
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA                                                           
   20 A=(YXSEC(J)-YXSEC(J-1))/(XEN(J)-XEN(J-1))                         
      B=(XEN(J-1)*YXSEC(J)-XEN(J)*YXSEC(J-1))/(XEN(J-1)-XEN(J))         
      Q(2,I)=(A*EN+B)*1.0D-16                                           
#                                                                       
      Q(3,I)=0.0                                                        
      IF(EN < E(3):
) GO TO 200                                          
      DO 110 J=2,NIOND                                                  
      IF(EN <= XION(J):
) GO TO 120                                       
  110 CONTINUE                                                          
      J=NIOND                                                           
  120 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.D-16                                            
#                                                                       
  200 Q(4,I)=0.0  
      QATT(1,I)=Q(4,I)                                
      Q(5,I)=0.0                                                        
      Q(6,I)=0.0                                                        
#                                                                       
      QIN(1,I)=0.0                                                      
      IF(EN <= EIN(1):
) GO TO 400                                        
      DO 310 J=2,NVIB1                                                  
      IF(EN <= XVIB1(J):
) GO TO 320                                      
  310 CONTINUE                                                          
      J=NVIB1                                                           
  320 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J)) 
      QIN(1,I)=(A*EN+B)*1.D-16                                          
  400 CONTINUE                                                          
#                                                                       
      QIN(2,I)=0.0                                                      
      IF(EN <= EIN(2):
) GO TO 430                                        
      DO 410 J=2,NVIB2                                                  
      IF(EN <= XVIB2(J):
) GO TO 420                                      
  410 CONTINUE                                                          
      J=NVIB2                                                           
  420 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J)) 
      QIN(2,I)=(A*EN+B)*1.D-16                                          
  430 CONTINUE                                                          
#                                                                       
      QIN(3,I)=0.0                                                      
      IF(EN <= EIN(3):
) GO TO 460                                        
      DO 440 J=2,NVIB3                                                  
      IF(EN <= XVIB3(J):
) GO TO 450                                      
  440 CONTINUE                                                          
      J=NVIB3                                                           
  450 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J)) 
      QIN(3,I)=(A*EN+B)*1.D-16                                          
  460 CONTINUE                                                          
#                                                                       
      QIN(4,I)=0.0                                                      
      IF(EN <= EIN(4):
) GO TO 600                                        
      DO 510 J=2,NEXC                                                   
      IF(EN <= XEXC(J):
) GO TO 520                                       
  510 CONTINUE                                                          
      J=NEXC                                                            
  520 A=(YEXC(J)-YEXC(J-1))/(XEXC(J)-XEXC(J-1))                         
      B=(XEXC(J-1)*YEXC(J)-XEXC(J)*YEXC(J-1))/(XEXC(J-1)-XEXC(J))       
      QIN(4,I)=(A*EN+B)*1.D-16                                          
  600 CONTINUE                                                          
#                                                                       
      QIN(5,I)=0.0                                                      
      IF(EN <= EIN(5):
) GO TO 700                                        
      DO 610 J=2,NEXC1                                                  
      IF(EN <= XEXC(J):
) GO TO 620                                       
  610 CONTINUE                                                          
      J=NEXC1                                                           
  620 A=(YEXC1(J)-YEXC1(J-1))/(XEXC1(J)-XEXC1(J-1))                     
      B=(XEXC1(J-1)*YEXC1(J)-XEXC1(J)*YEXC1(J-1))/(XEXC1(J-1)-XEXC1(J)) 
      QIN(5,I)=(A*EN+B)*1.D-16                                          
  700 CONTINUE                                                          
      Q(1,I)=Q(2,I)+Q(3,I)+QIN(1,I)+QIN(2,I)+QIN(3,I)+QIN(4,I)+QIN(5,I) 
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME                                                    
      IF(EFINAL <= EIN(5):
) NIN=4                                        
      IF(EFINAL <= EIN(4):
) NIN=3                                        
      IF(EFINAL <= EIN(3):
) NIN=2                                        
      IF(EFINAL <= EIN(2):
) NIN=1                                        
      IF(EFINAL <= EIN(1):
) NIN=0                                        
#                                                                       
      RETURN                                                            
      # end                                                               
      def GAS25(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)       
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      DIMENSION XEN(54),YXSEC(54),XION(29),YION(29),XATT(16),YATT(16),  
     /XVIB3(19),YVIB3(19),XVIB4(28),YVIB4(28),XVIB5(25),YVIB5(25),      
     /XVIB6(19),YVIB6(19),XEXC(27),YEXC(27),XEXC1(35),YEXC1(35)
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME                                                 
      DATA XEN/0.00,.004,0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,       
     /0.09,0.10,0.11,0.12,0.13,0.14,0.16,0.18,0.20,0.24,                
     /0.30,0.40,0.50,0.60,0.80,1.00,1.40,2.00,3.00,4.00,                
     /5.00,6.00,7.00,8.00,9.00,10.0,15.0,20.0,30.0,40.0,                
     /70.0,100.,140.,200.,250.,300.,500.,1000.,1500.,3000.,             
     /6000.,10000.,20000.,100000./
      DATA YXSEC/235.,235.,235.,233.,225.,215.,205.,190.,175.,160.,     
     /140.,125.,110.,95.0,80.0,74.0,62.0,51.0,43.0,34.0,                
     /25.0,20.0,18.0,16.5,15.7,15.0,14.5,15.0,17.5,20.0,                
     /22.0,23.5,24.0,24.5,24.0,22.0,15.0,11.5,8.00,6.20,                
     /3.50,2.60,1.50,0.95,0.70,0.55,0.30,0.14,0.09,0.04,                
     /0.02,.012,.005,.001/
      DATA XION/10.04,10.9,13.4,18.4,19.4,20.4,23.4,28.4,33.4,38.4,     
     /43.4,48.4,53.4,58.4,68.4,78.4,88.4,98.4,120.,140.,                
     /200.,300.,500.,700.,1000.,2000.,4000.,10000.,100000./             
      DATA YION/0.00,0.12,1.12,2.92,3.37,3.70,4.44,5.48,6.17,6.68,      
     /7.13,7.41,7.52,7.66,7.84,7.89,7.84,7.75,7.53,7.20,                
     /6.17,4.76,3.30,2.45,1.95,1.15,0.70,0.36,.06/                      
      DATA XATT/6.85,7.00,7.20,7.50,8.00,8.50,9.00,9.50,10.0,10.5,      
     /11.0,11.5,12.0,12.5,13.0,13.2/                                    
      DATA YATT/0.00,0.67,1.10,1.65,2.80,4.40,6.60,10.3,14.7,12.3,      
     /9.70,6.20,3.50,1.30,0.50,0.00/                                    
# V2 AND V3 DIPOLE PARTS GIVEN ANALYTICALLY
# NB V3 TABLE CONTAINS ONLY RESONANCE PART OF X-SECT.
      DATA XVIB3/.137,1.00,2.00,3.00,4.00,5.00,6.00,7.00,8.00,9.00,
     /10.0,14.0,20.0,30.0,40.0,100.,1000.,10000.,100000./
      DATA YVIB3/0.00,0.01,0.45,0.75,1.00,1.15,1.20,1.15,1.00,0.90,
     /0.80,0.50,0.35,0.21,0.16,0.05,.005,.0005,.00005/
      DATA XVIB4/.180,0.19,0.20,0.23,0.25,0.30,0.35,0.40,0.50,0.70,     
     /1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.50,8.50,10.0,                
     /15.0,20.0,30.0,40.0,100.,1000.,10000.,100000./                    
      DATA YVIB4/0.00,0.17,0.22,0.30,0.32,0.34,0.34,0.32,0.31,0.25,     
     /0.21,0.19,0.19,0.32,0.47,0.61,0.79,1.03,1.03,0.85,                
     /0.58,0.33,0.18,0.11,0.03,.003,.0003,.00003/                       
      DATA XVIB5/.349,0.40,0.45,0.50,0.60,0.70,0.80,1.00,1.50,2.00,     
     /3.00,4.00,5.00,6.00,7.50,8.50,10.0,15.0,20.0,30.0,                
     /40.0,100.,1000.,10000.,100000./                                   
      DATA YVIB5/0.00,0.35,0.43,0.47,0.48,0.48,0.46,0.43,0.43,0.47,     
     /0.69,1.00,1.30,1.75,1.90,1.60,1.20,0.72,0.30,0.17,                
     /0.10,0.02,.002,.0002,.00002/                                      
      DATA XVIB6/.529,1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.50,8.50,     
     /10.0,15.0,20.0,30.0,40.0,100.,1000.,10000.,100000./               
      DATA YVIB6/0.00,.001,0.01,.016,.035,0.06,0.09,0.12,0.13,0.11,     
     /0.08,.045,0.02,0.01,.007,.0016,.00016,.000016,.0000016/           
      DATA XEXC/7.70,8.50,9.00,9.50,10.5,11.5,13.0,15.0,20.0,25.0,      
     /30.0,40.0,50.0,60.0,70.0,80.0,100.,150.,200.,300.,                
     /400.,600.,1000.,2000.,4000.,10000.,100000./                       
      DATA YEXC/0.00,0.11,0.38,0.71,1.26,1.76,2.03,2.36,2.80,3.03,      
     /3.08,3.19,3.25,3.25,3.20,3.10,2.81,1.93,1.49,1.10,                
     /0.88,0.66,0.44,0.28,.160,.083,.0150/                              
      DATA XEXC1/8.50,8.70,9.30,9.85,10.3,10.8,11.3,12.3,13.3,14.3,     
     /15.3,17.3,20.0,22.0,25.0,30.0,35.0,40.0,45.0,50.0,                
     /60.0,70.0,80.0,100.,150.,200.,300.,400.,500.,600.,                
     /1000.,2000.,4000.,10000.,100000./
      DATA YEXC1/0.00,0.077,0.16,0.23,0.29,0.34,0.42,0.64,0.97,1.43,    
     /1.99,2.91,3.79,4.07,4.73,5.50,5.94,6.16,6.44,6.60,                
     /6.82,6.82,6.77,6.44,4.79,3.91,2.86,2.20,1.87,1.65,                
     /1.16,0.68,0.40,0.20,.038/
      NAME=' DME    1998   '                                            
# --------------------------------------------------------------------- 
# UPDATES DME97 WITH MONTE CARLO SIMULATION OF STEADY STATE TOWNS# end
#  VALUE FOR ALPHA.   
# UPDATES DME94 WITH CORRECT VIBRATIONAL ANALYSIS FROM SVERDLOV.
# UPDATES DME92 WITH BETTER FIT TO FANO AND EV/ION PAIR
# --------------------------------------------------------------------- 
      AVIB1=0.06
      AVIB2=0.35
#
      NION=1
      NATT=1
      NIN=8
      NNULL=0
#
      DO 1 J=1,6  
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0                                                     
      NDATA=54                                                          
      NVIB3=19                                                          
      NVIB4=28                                                          
      NVIB5=25
      NVIB6=19
      NIOND=29                                                          
      NATT1=16                                                         
      NEXC=27                                                           
      NEXC1=35  
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(46.06904*AMU)                                     
      E(3)=10.04                                                        
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
      EOBY(1)=10.04
      EIN(1)=-0.051                                                     
      EIN(2)=0.051                                                      
      EIN(3)=0.137                                                      
      EIN(4)=0.180                                                      
      EIN(5)=0.349
      EIN(6)=0.529
      EIN(7)=7.70                                                       
      EIN(8)=8.5
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       DME            '
      SCRPT(3)=' IONISATION    ELOSS= 10.04   '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      SCRPT(7)=' VIB           ELOSS= -0.051  '
      SCRPT(8)=' VIB           ELOSS=  0.051  '
      SCRPT(9)=' VIB           ELOSS=  0.137  '
      SCRPT(10)=' VIB           ELOSS=  0.180  '
      SCRPT(11)=' VIB           ELOSS=  0.349  '
      SCRPT(12)=' VIB           ELOSS=  0.529  '
      SCRPT(13)=' EXC           ELOSS=  7.70   '
      SCRPT(14)=' EXC           ELOSS=  8.50   '
      APOP=math.exp(EIN(1)/AKT)                                             
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      DO 10 J=2,NDATA                                                   
      IF(EN <= XEN(J):
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA                                                           
   20 A=(YXSEC(J)-YXSEC(J-1))/(XEN(J)-XEN(J-1))                         
      B=(XEN(J-1)*YXSEC(J)-XEN(J)*YXSEC(J-1))/(XEN(J-1)-XEN(J))         
      Q(2,I)=(A*EN+B)*1.0D-16                                           
      Q(3,I)=0.0                                                        
      IF(EN < E(3):
) GO TO 200                                          
      DO 110 J=2,NIOND                                                  
      IF(EN <= XION(J):
) GO TO 120                                       
  110 CONTINUE                                                          
      J=NIOND                                                           
  120 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.D-16                                            
  200 Q(4,I)=0.0                              
      QATT(1,I)=Q(4,I)                          
      IF(EN < XATT(1):
) GO TO 300                                       
      IF(EN > XATT(NATT1):
) GO TO 300                                  
      DO 210 J=2,NATT1                                                  
      IF(EN <= XATT(J):
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NATT1                                                           
  220 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))                         
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))       
      Q(4,I)=(A*EN+B)*1.D-21
      QATT(1,I)=Q(4,I)                                            
  300 Q(5,I)=0.0                                                        
      Q(6,I)=0.0                                                        
#           
# SUPERELASTIC OF VIBRATION 
#
      QIN(1,I)=0.0
      IF(EN == 0.0):
 GO TO 390
      EFAC=math.sqrt(1.0-(EIN(1)/EN))
      QIN(1,I)=AVIB1*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      QIN(1,I)=QIN(1,I)*APOP/(1.0+APOP)*1.D-16
#                                                 
  390 QIN(2,I)=0.0                                                      
      IF(EN <= EIN(2):
) GO TO 400                                        
      EFAC=math.sqrt(1.0-(EIN(2)/EN))
      QIN(2,I)=AVIB1*math.log((1.0+EFAC)/(1.0-EFAC))/(EN*(1.0+APOP))*1.D-16
  400 CONTINUE                                                          
      QIN(3,I)=0.0                                                      
      IF(EN <= EIN(3):
) GO TO 430                                        
      DO 410 J=2,NVIB3                                                  
      IF(EN <= XVIB3(J):
) GO TO 420                                      
  410 CONTINUE                                                          
      J=NVIB3                                                           
  420 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J)) 
      QIN(3,I)=(A*EN+B)                                                 
      EFAC=math.sqrt(1.0-(EIN(3)/EN))
      QIN(3,I)=(QIN(3,I)+AVIB2*math.log((1.0+EFAC)/(1.0-EFAC))/EN)*1.D-16
  430 CONTINUE                                                          
      QIN(4,I)=0.0                                                      
      IF(EN <= EIN(4):
) GO TO 500                                        
      DO 440 J=2,NVIB4                                                  
      IF(EN <= XVIB4(J):
) GO TO 450                                      
  440 CONTINUE                                                          
      J=NVIB4                                                           
  450 A=(YVIB4(J)-YVIB4(J-1))/(XVIB4(J)-XVIB4(J-1))                     
      B=(XVIB4(J-1)*YVIB4(J)-XVIB4(J)*YVIB4(J-1))/(XVIB4(J-1)-XVIB4(J)) 
      QIN(4,I)=(A*EN+B)*1.D-16                                          
  500 CONTINUE                                                          
      QIN(5,I)=0.0                                                      
      IF(EN <= EIN(5):
) GO TO 600                                        
      DO 540 J=2,NVIB5                                                  
      IF(EN <= XVIB5(J):
) GO TO 550                                      
  540 CONTINUE                                                          
      J=NVIB5                                                           
  550 A=(YVIB5(J)-YVIB5(J-1))/(XVIB5(J)-XVIB5(J-1))                     
      B=(XVIB5(J-1)*YVIB5(J)-XVIB5(J)*YVIB5(J-1))/(XVIB5(J-1)-XVIB5(J)) 
      QIN(5,I)=(A*EN+B)*1.D-16                                          
  600 CONTINUE                                                          
      QIN(6,I)=0.0                                                      
      IF(EN <= EIN(6):
) GO TO 700                                        
      DO 640 J=2,NVIB6                                                  
      IF(EN <= XVIB6(J):
) GO TO 650                                      
  640 CONTINUE                                                          
      J=NVIB6                                                           
  650 A=(YVIB6(J)-YVIB6(J-1))/(XVIB6(J)-XVIB6(J-1))                     
      B=(XVIB6(J-1)*YVIB6(J)-XVIB6(J)*YVIB6(J-1))/(XVIB6(J-1)-XVIB6(J)) 
      QIN(6,I)=(A*EN+B)*1.D-16                                          
  700 CONTINUE                                                          
      QIN(7,I)=0.0                                                      
      IF(EN <= EIN(7):
) GO TO 800                                        
      DO 710 J=2,NEXC                                                   
      IF(EN <= XEXC(J):
) GO TO 720                                       
  710 CONTINUE                                                          
      J=NEXC                                                            
  720 A=(YEXC(J)-YEXC(J-1))/(XEXC(J)-XEXC(J-1))                         
      B=(XEXC(J-1)*YEXC(J)-XEXC(J)*YEXC(J-1))/(XEXC(J-1)-XEXC(J))       
      QIN(7,I)=(A*EN+B)*1.D-16                                          
  800 CONTINUE                                                          
      QIN(8,I)=0.0                                                      
      IF(EN <= EIN(8):
) GO TO 899                                        
      DO 810 J=2,NEXC1                                                  
      IF(EN <= XEXC1(J):
) GO TO 820                                      
  810 CONTINUE                                                          
      J=NEXC1                                                           
  820 A=(YEXC1(J)-YEXC1(J-1))/(XEXC1(J)-XEXC1(J-1))                     
      B=(XEXC1(J-1)*YEXC1(J)-XEXC1(J)*YEXC1(J-1))/(XEXC1(J-1)-XEXC1(J)) 
      QIN(8,I)=(A*EN+B)*1.D-16                                          
  899 CONTINUE                                                          
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)+QIN(1,I)+QIN(2,I)+QIN(3,I)+QIN(4,I)+  
     /QIN(5,I)+QIN(6,I)+QIN(7,I)+QIN(8,I)                               
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME            
      IF(EFINAL <= EIN(8):
) NIN=7        
      IF(EFINAL <= EIN(7):
) NIN=6                                        
      IF(EFINAL <= EIN(6):
) NIN=5                                        
      IF(EFINAL <= EIN(5):
) NIN=4                                        
      IF(EFINAL <= EIN(4):
) NIN=3                                        
      IF(EFINAL <= EIN(3):
) NIN=2                                        
      IF(EFINAL <= EIN(2):
) NIN=1                                        
      IF(EFINAL <= EIN(1):
) NIN=0                                        
      RETURN                                                            
      # end    
      def GAS26(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY  
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
# ----------------------------------------------------------------      
#    NEW ANALYSIS UPDATED TO DECEMBER 1994                              
# ---------------------------------------------------------------       
      NAME='REID STEP(ANIS)'                                            
#                
      NION=1
      NATT=1
      NIN=1
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0
# ANISOTROPIC SCATTERING FOR LEVEL 1    
      KIN(1)=1
#                                                                       
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(4.0*AMU)                                          
      E(3)=15.90                                                        
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
      EOBY(1)=15.90                                                     
      EIN(1)=0.2
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       REID STEP(ANIS)'
      SCRPT(3)=' IONISATION    ELOSS= 15.90   '
      SCRPT(4)='                              '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      SCRPT(7)=' EXC (ANIS)    ELOSS=  0.20   '                         
      EN=-ESTEP/2.0                                      
      DO 9000 I=1,NSTEP
      PEQEL(2,I)=0.0
      PEQIN(1,I)=0.0
      EN=EN+ESTEP                                                       
      Q(2,I)=1.0E-16                                                    
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0    
      QATT(1,I)=Q(4,I)                              
      Q(5,I)=0.0                                                        
      Q(6,I)=0.0                                                        
      QIN(1,I)=0.0                                                      
      IF(EN <= EIN(1):
) GO TO 400                                        
      QIN(1,I)=10.0E-16
      PEQIN(1,I)=0.5+(QIN(1,I)-0.7*QIN(1,I))/QIN(1,I)
  400 CONTINUE                                                          
#                                                                       
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)+0.7*QIN(1,I)                          
 9000 CONTINUE                                                          
#  SAVE COMPUTE TIME                                                    
      IF(EFINAL <= EIN(1):
) NIN=0                                        
      RETURN                                                            
      # end                                                               
      def GAS27(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)  
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)       
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]
      CHARACTER*50 SCRPT(300),SCRPTN(10)     
      CHARACTER*25 NAME                                                 
# ----------------------------------------------------------------      
#    MAXWELL MODEL DECEMBER 1994                                        
# ---------------------------------------------------------------       
      NAME=' MAXWELL 1994--'    
#                
      NION=1                                
      NATT=1
      NIN=0
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
#     DO 2 J=1,NIN
#   2 KIN(J)=0  
      SIGC=6.0E-16
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(4.0*AMU)                                          
      E(3)=99.                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
      EOBY(1)=99.
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       MAXWELL        '
      SCRPT(3)='                              '
      SCRPT(4)='                              '
      SCRPT(5)='                              '
      SCRPT(6)='                              '                         
      EN=-ESTEP/2.0                                      
      DO 9000 I=1,NSTEP                                              
      EN=EN+ESTEP                                                       
      IF(EN == 0.0):
 :
      Q(2,I)=100000.E-16
      GO TO 10
      # endIF
      Q(2,I)=SIGC/math.sqrt(EN)                                             
  10  Q(3,I)=0.0                                                        
      Q(4,I)=0.0  
      QATT(1,I)=Q(4,I)                                
      Q(5,I)=0.0                                                        
      Q(6,I)=0.0                                                        
#                                                                       
      Q(1,I)=Q(2,I)                                                     
 9000 CONTINUE                                                          
      RETURN                                                            
      # end                                                               
      def GAS28(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY  
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN) 
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)       
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]
      CHARACTER*50 SCRPT(300),SCRPTN(10)     
      CHARACTER*25 NAME                                                 
# ----------------------------------------------------------------      
#    NEW ANALYSIS UPDATED TO DECEMBER 1994                              
# ---------------------------------------------------------------       
      NAME=' REID RAMP S=10'  
#                
      NION=1  
      NATT=1
      NIN=1
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0            
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(4.0*AMU)                                          
      E(3)=15.90                                                        
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0    
      EOBY(1)=15.9                                                      
      EIN(1)=0.2  
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       REID RAMP      '
      SCRPT(3)='                              '
      SCRPT(4)='                              '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      SCRPT(7)=' EXC           ELOSS=  0.2    '                        
      EN=-ESTEP/2.0                                      
      DO 9000 I=1,NSTEP                                              
      EN=EN+ESTEP                                                       
      Q(2,I)=6.0E-16                                                    
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0  
      QATT(1,I)=Q(4,I)                                
      Q(5,I)=0.0                                                        
      Q(6,I)=0.0                                                        
      QIN(1,I)=0.0                                                      
      IF(EN <= EIN(1):
) GO TO 400                                        
      QIN(1,I)=(EN-EIN(1))*10.0E-16
  400 CONTINUE                                                          
#                                                                       
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)+QIN(1,I)                          
 9000 CONTINUE                                                          
#  SAVE COMPUTE TIME                                                    
      IF(EFINAL <= EIN(1):
) NIN=0                                        
      RETURN                                                            
      # end                                                               
      def GAS29(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY   
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNUL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      DIMENSION XENM(56),YXMOM(56),XENT(56),YXTOT(56),
     /XVIB2(22),YVIB2(22),XVIB3(22),YVIB3(22),XVIB4(22),YVIB4(22),
     /XVIB5(22),YVIB5(22),XVIB6(22),YVIB6(22),      
     /XDISS(27),YDISS(27),XATT(26),YATT(26),XION(48),YION(48)
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME                                                 
      DATA XENM/0.0,0.001,0.002,0.004,0.007,0.01,.015,0.02,.025,0.03,
     /0.04,0.05,0.06,0.07,0.08,0.09,0.10,0.12,0.15,0.20, 
     /0.25,0.30,0.35,0.40,0.45,0.50,0.60,0.70,0.80,0.90, 
     /1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.00,8.00,9.00,
     /10.0,15.0,20.0,30.0,40.0,50.0,60.0,70.0,80.0,90.0,
     /100.0,200.,400.,1000.,10000.,100000./                             
#  ELASTIC MOMENTUM TRANSFER
      DATA YXMOM/29.0,26.0,24.0,20.0,16.0,12.9,9.60,7.65,6.40,5.55,
     /4.25,3.40,2.80,2.40,2.00,1.90,2.00,2.50,3.15,4.20,
     /5.25,6.10,6.80,7.40,7.80,8.20,8.80,9.30,9.60,9.80,
     /10.0,10.4,10.7,11.0,11.2,11.4,11.5,11.6,11.8,12.0,
     /12.5,14.5,14.5,13.2,11.5,10.0,9.20,8.50,7.66,6.66,
     /5.86,3.00,1.50,0.60,0.06,.0006/   
      DATA XENT/0.0,0.001,0.002,0.004,0.007,0.01,.015,0.02,.025,0.03,
     /0.04,0.05,0.06,0.07,0.08,0.09,0.10,0.12,0.15,0.20, 
     /0.25,0.30,0.35,0.40,0.45,0.50,0.60,0.70,0.80,0.90, 
     /1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.00,8.00,9.00,
     /10.0,15.0,20.0,30.0,40.0,50.0,60.0,70.0,80.0,90.0,
     /100.0,200.,400.,1000.,10000.,100000./                             
#  ELASTIC TOTAL 
      DATA YXTOT/29.0,26.0,24.0,20.0,16.0,12.9,9.60,7.65,6.40,5.55,
     /4.25,3.40,2.80,2.40,2.00,1.90,2.00,2.50,3.15,4.20,
     /5.25,6.10,6.80,7.40,7.80,8.20,8.80,9.30,9.60,9.80,
     /11.3,12.5,13.5,14.5,15.5,16.5,17.5,18.5,19.5,20.0,
     /20.7,23.5,23.5,21.5,19.5,18.5,17.5,17.0,16.0,15.0,
     /14.5,11.5,9.00,7.00,0.70,0.07/
#  VIBRATION V11 (RESONANCE ONLY)
      DATA XVIB2/0.065,1.00,2.00,3.00,4.00,4.50,5.00,6.00,7.00,8.00,
     /9.00,10.0,11.0,12.0,13.0,15.0,20.0,50.0,100.,1000.,             
     /10000.,100000./                                        
      DATA YVIB2/0.0,0.0,.028,.063,.196,.182,0.14,.126,.182,0.21,
     /0.21,.175,.063,.028,.014,.007,.0014,.000007,.0000007,.00000007,  
     /.000000007,.0000000007/                                
#  VIBRATION V2  (RESONANCE ONLY)
      DATA XVIB3/0.1001,1.00,2.00,3.00,4.00,4.50,5.00,6.00,7.00,8.00,
     /9.00,10.0,11.0,12.0,13.0,15.0,20.0,50.0,100.,1000.,      
     /10000.,100000./                                        
      DATA YVIB3/0.0,0.0,.175,.343,1.08,1.04,0.77,0.70,1.02,1.15, 
     /1.13,.959,0.35,.154,.063,.028,.014,.000003,.0000003,.00000003, 
     /.000000003,.0000000003/                             
#  VIBRATION V1 (RESONANCE ONLY)
      DATA XVIB4/0.1523,1.00,2.00,3.00,4.00,4.50,5.00,6.00,7.00,8.00,
     /9.00,10.0,11.0,12.0,13.0,15.0,20.0,50.0,100.,1000.,
     /10000.,100000./                                        
      DATA YVIB4/0.0,0.0,.378,.756,2.34,2.24,1.68,1.51,2.23,2.52,
     /2.49,2.10,0.77,.336,0.14,0.07,.035,.00007,.000007,.0000007,
     /.00000007,.000000007/                                
#  VIBRATION HARMONIC 2(V1)
      DATA XVIB5/0.35,1.00,2.00,3.00,4.00,4.50,5.00,6.00,7.00,8.00,
     /9.00,10.0,11.0,12.0,13.0,15.0,20.0,50.0,100.,1000.,
     /10000.,100000./                                        
      DATA YVIB5/0.0,0.0,.135,0.27,0.84,.795,0.60,0.54,.795,0.90,
     /.885,0.75,0.27,0.12,.045,0.03,.015,.00015,.000015,.0000015,
     /.00000015,.000000015/                                
# VIBRATION HARMONIC (3(V1) + ALL OTHER HARMONICS)
      DATA XVIB6/0.500,1.00,2.00,3.00,4.00,4.50,5.00,6.00,7.00,8.00,
     /9.00,10.0,11.0,12.0,13.0,15.0,20.0,50.0,100.,1000.,
     /10000.,100000./                                        
      DATA YVIB6/0.0,0.0,0.54,1.08,3.35,3.20,2.40,2.16,3.18,3.60,
     /3.56,3.00,1.09,0.48,.195,.105,.045,.00015,.000015,.0000015,
     /.00000015,.000000015/                                
#  DISOCIATION X-SECTION                                                
      DATA XDISS/11.8,12.0,13.0,14.0,15.0,18.0,20.0,25.0,30.0,40.0,     
     /50.0,60.0,80.0,100.,120.,150.,200.,300.,400.,500.,
     /600.,800.,1000.,2000.,4000.,10000.,100000./ 
      DATA YDISS/0.00,.007,.072,0.40,0.75,1.33,1.61,1.88,2.00,2.25,
     /2.40,2.50,2.60,2.60,2.60,2.55,2.50,2.40,2.30,2.20,   
     /2.00,1.75,1.48,0.80,0.46,0.21,0.021/      
      DATA XION/14.48,17.0,18.0,19.0,21.0,23.0,25.0,27.0,29.0,31.0,     
     /33.0,35.0,37.0,39.0,41.0,43.0,45.0,47.0,49.0,51.0,                
     /61.0,71.0,81.0,91.0,101.,126.,151.,176.,201.,251.,                
     /301.,351.,401.,451.,501.,601.,701.,801.,901.,1001.,               
     /1251.,1501.,1751.,2001.,2501.,3001.,10000.,100000./               
      DATA YION/0.00,.0889,.211,.375,.782,1.18,1.59,2.11,2.49,2.81,     
     /3.16,3.49,3.86,4.17,4.54,4.85,5.14,5.52,5.77,6.19,                
     /6.82,7.57,7.84,8.17,8.39,8.77,8.75,8.76,8.57,8.17,                
     /7.41,7.13,6.55,6.21,5.89,5.17,4.72,4.40,3.96,3.77,                
     /3.19,2.79,2.44,2.28,1.88,1.67,0.60,0.09/                          
      DATA XATT/2.00,2.25,2.50,2.75,3.00,3.25,3.50,3.75,4.00,4.25,
     /4.50,4.75,5.00,5.25,5.50,5.75,6.00,6.25,6.50,6.75,
     /7.00,8.00,10.0,20.0,100.0,100000./
      DATA YATT/.0,.0075,.020,.038,.053,.069,.083,.086,.083,.074,
     /.060,.046,.035,.025,.017,.010,.0068,.004,.0016,.0007,
     /.0003,.0002,.0001,.00001,.000001,.0000001/
# ---------------------------------------------------------------------      
#    NEW ANALYSIS UPDATED TO NOVEMBER 1999.
#    ALLOWS SUPERELASTIC SCATTERING TO ALL VIBRATIONAL LEVELS
c    EXCLUDING VIBRATION HARMONICS.
#    BORN ANGULAR DISTRIBUTION FOR  V1(0.1001) AND V2(0.1523) LEVELS.
# --------------------------------------------------------------------       
      NAME=' C2F6 -1999--- ' 
#                
      NION=1                                 
      NATT=1
      NIN=9 
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0
# ANISOTROPIC SCATTERING FROM LEVEL 5 AND 6    
      KIN(5)=1
      KIN(6)=1  
#                                                                       
      NDATA=56 
      NETOT=56                                                        
      NVIB2=22                                                          
      NVIB3=22                                                          
      NVIB4=22                                                          
      NVIB5=22                                                          
      NVIB6=22
      NDISS=27
      NATT1=26
      NIOND=48                                                       
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(138.0118*AMU)                                     
      E(3)=14.48                                                        
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
      EOBY(1)=14.48
      EIN(1)=-0.065
      EIN(2)=-0.1001
      EIN(3)=-0.1523                                             
      EIN(4)=0.065                                                      
      EIN(5)=0.1001
      EIN(6)=0.1523                                                     
      EIN(7)=0.35                                                       
      EIN(8)=0.500 
      EIN(9)=11.8
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       C2F6           '
      SCRPT(3)=' IONISATION    ELOSS= 14.48   '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      SCRPT(7)=' VIB V11       ELOSS= -0.065  '
      SCRPT(8)=' VIB V2        ELOSS= -0.1001 '
      SCRPT(9)=' VIB V1        ELOSS= -0.1523 '
      SCRPT(10)=' VIB V11       ELOSS=  0.065  '
      SCRPT(11)=' VIB V2        ELOSS=  0.1001 '
      SCRPT(12)=' VIB V1        ELOSS=  0.1523 '
      SCRPT(13)=' VIB 2V1       ELOSS=  0.35   '
      SCRPT(14)=' VIB           ELOSS=  0.50   '
      SCRPT(15)=' EXC DISOCN    ELOSS= 11.8    '
      APOP1=math.exp(EIN(1)/AKT)
      APOP2=math.exp(EIN(2)/AKT)
      APOP3=math.exp(EIN(3)/AKT)
      EN=-ESTEP/2.0                                      
      DO 9000 I=1,NSTEP                                              
      EN=EN+ESTEP                                                       
      DO 10 J=2,NDATA                                                   
      IF(EN <= XENM(J):
) GO TO 20                                        
   10 CONTINUE                                                          
      J=NDATA                                                           
   20 A=(YXMOM(J)-YXMOM(J-1))/(XENM(J)-XENM(J-1))                       
      B=(XENM(J-1)*YXMOM(J)-XENM(J)*YXMOM(J-1))/(XENM(J-1)-XENM(J))     
      XMOMT=(A*EN+B)*1.0D-16
      DO 50 J=2,NETOT
      IF(EN <= XENT(J):
) GO TO 60
   50 CONTINUE
      J=NETOT
   60 A=(YXTOT(J)-YXTOT(J-1))/(XENT(J)-XENT(J-1))                       
      B=(XENT(J-1)*YXTOT(J)-XENT(J)*YXTOT(J-1))/(XENT(J-1)-XENT(J))     
      XTOT=(A*EN+B)*1.0D-16
      IF(KEL(2):
 == 1) Q(2,I)=XTOT
      IF(KEL(2):
 == 1) PEQEL(2,I)=0.5+(XTOT-XMOMT)/XTOT
      IF(KEL(2):
 == 0) Q(2,I)=XMOMT
#      
      Q(3,I)=0.0                                                        
      IF(EN < E(3):
) GO TO 200                                          
      DO 110 J=2,NIOND                                                  
      IF(EN <= XION(J):
) GO TO 120                                       
  110 CONTINUE                                                          
      J=NIOND                                                           
  120 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.D-16                                            
#                                                                       
  200 Q(4,I)=0.0                          
      QATT(1,I)=Q(4,I)        
      IF(EN < XATT(1):
) GO TO 250                                       
      IF(EN > XATT(NATT1):
) GO TO 250                                   
      DO 210 J=2,NATT1                                                  
      IF(EN <= XATT(J):
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NATT1                                                          
  220 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))                         
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))       
      Q(4,I)=(A*EN+B)*1.D-16     
      QATT(1,I)=Q(4,I)                 
  250 Q(5,I)=0.0                                                        
      Q(6,I)=0.0
#           
# SUPERELASTICS                                                                          
      QIN(1,I)=0.0
      QIN(2,I)=0.0
      QIN(3,I)=0.0
      IF(EN == 0.0):
 GO TO 305
# SUPERELASTIC OF VIBRATION V11       
      EFAC=math.sqrt(1.0-(EIN(1)/EN))
      QIN(1,I)=0.0363*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      DO 260 J=2,NVIB2
      IF((EN+EIN(4):
) <= XVIB2(J)) GO TO 270
  260 CONTINUE
      J=NVIB2
  270 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J))
      QIN(1,I)=QIN(1,I)+(EN+EIN(4))*(A*(EN+EIN(4))+B)/EN 
      QIN(1,I)=QIN(1,I)*APOP1/(1.0+APOP1)*1.D-16
#  SUPERELASTIC OF VIBRATION V2
      EFAC=math.sqrt(1.0-(EIN(2)/EN))
      QIN(2,I)=0.4230*math.log((EFAC+1.0)/(EFAC-1.0))/EN 
      DO 280 J=2,NVIB3
      IF((EN+EIN(5):
) <= XVIB3(J)) GO TO 290
  280 CONTINUE
      J=NVIB3
  290 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J))
      QIN(2,I)=QIN(2,I)+(EN+EIN(5))*(A*(EN+EIN(5))+B)/EN 
      QIN(2,I)=QIN(2,I)*APOP2/(1.0+APOP2)*1.D-16 
# SUPERELASTIC OF VIBRATION V1
      EFAC=math.sqrt(1.0-(EIN(3)/EN))
      QIN(3,I)=1.5000*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      DO 300 J=2,NVIB4
      IF((EN+EIN(6):
) <= XVIB4(J))GO TO 301
  300 CONTINUE
      J=NVIB4
  301 A=(YVIB4(J)-YVIB4(J-1))/(XVIB4(J)-XVIB4(J-1))                     
      B=(XVIB4(J-1)*YVIB4(J)-XVIB4(J)*YVIB4(J-1))/(XVIB4(J-1)-XVIB4(J)) 
      QIN(3,I)=QIN(3,I)+(EN+EIN(6))*(A*(EN+EIN(6))+B)/EN
      QIN(3,I)=QIN(3,I)*APOP3/(1.0+APOP3)*1.D-16            
# 
  305 CONTINUE
      QIN(4,I)=0.0                                                      
      IF(EN <= EIN(4):
) GO TO 400                                        
      DO 310 J=2,NVIB2                                                  
      IF(EN <= XVIB2(J):
) GO TO 320                                      
  310 CONTINUE                                                          
      J=NVIB2                                                           
  320 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J)) 
      EFAC=math.sqrt(1.0-(EIN(4)/EN))
      QIN(4,I)=0.0363*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      QIN(4,I)=((A*EN+B)+QIN(4,I))*1.0/(1.0+APOP1)*1.D-16
  400 CONTINUE                                                          
#                                                                       
      QIN(5,I)=0.0                                                      
      IF(EN <= EIN(5):
) GO TO 500                                        
      DO 410 J=2,NVIB3                                                  
      IF(EN <= XVIB3(J):
) GO TO 420                                      
  410 CONTINUE                                                          
      J=NVIB3                                                           
  420 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J)) 
      EFAC=math.sqrt(1.0-(EIN(5)/EN))
      QIN(5,I)=0.4230*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      ELF=EN-EIN(5)
      FWD=math.log((EN+ELF)/(EN+ELF-2.0*math.sqrt(EN*ELF)))
      BCK=math.log((EN+ELF+2.0*math.sqrt(EN*ELF))/(EN+ELF))
# ASSUME RATIO  MOM.T /TOT X-SECT FOR RESONANCE PART = RAT3
      RAT3=0.80 
      XMT=((1.5-FWD/(FWD+BCK))*QIN(5,I)+RAT3*(A*EN+B))*1.0D-16
      XMT=XMT/(1.0+APOP2)        
      QIN(5,I)=((A*EN+B)+QIN(5,I))*1.0/(1.0+APOP2)*1.D-16
      PEQIN(5,I)=0.5+(QIN(5,I)-XMT)/QIN(5,I)
  500 CONTINUE                                                          
#
      QIN(6,I)=0.0                                                      
      IF(EN <= EIN(6):
) GO TO 600                                        
      DO 510 J=2,NVIB4                                                  
      IF(EN <= XVIB4(J):
) GO TO 520                                      
  510 CONTINUE                                                          
      J=NVIB4                                                           
  520 A=(YVIB4(J)-YVIB4(J-1))/(XVIB4(J)-XVIB4(J-1))                     
      B=(XVIB4(J-1)*YVIB4(J)-XVIB4(J)*YVIB4(J-1))/(XVIB4(J-1)-XVIB4(J)) 
      EFAC=math.sqrt(1.0-(EIN(6)/EN))
      QIN(6,I)=1.500*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      ELF=EN-EIN(6)
      FWD=math.log((EN+ELF)/(EN+ELF-2.0*math.sqrt(EN*ELF)))
      BCK=math.log((EN+ELF+2.0*math.sqrt(EN*ELF))/(EN+ELF))
#   ASSUME RATIO MOM T./ TOT X-SECT FOR RESONANCE PART = RAT4 
      RAT4=0.80   
      XMT=((1.5-FWD/(FWD+BCK))*QIN(6,I)+RAT4*(A*EN+B))*1.0D-16
      XMT=XMT/(1.0+APOP3)
      QIN(6,I)=((A*EN+B)+QIN(6,I))*1.0/(1.0+APOP3)*1.D-16
      PEQIN(6,I)=0.5+(QIN(6,I)-XMT)/QIN(6,I)
  600 CONTINUE                                                          
#                                                                       
      QIN(7,I)=0.0                                                      
      IF(EN <= EIN(7):
) GO TO 700                                        
      DO 610 J=2,NVIB5                                                  
      IF(EN <= XVIB5(J):
) GO TO 620                                      
  610 CONTINUE                                                          
      J=NVIB5                                                           
  620 A=(YVIB5(J)-YVIB5(J-1))/(XVIB5(J)-XVIB5(J-1))                     
      B=(XVIB5(J-1)*YVIB5(J)-XVIB5(J)*YVIB5(J-1))/(XVIB5(J-1)-XVIB5(J)) 
      QIN(7,I)=(A*EN+B)*1.D-16                                          
  700 CONTINUE                                                          
#                                                                       
      QIN(8,I)=0.0                                                      
      IF(EN <= EIN(8):
) GO TO 800                                        
      DO 710 J=2,NVIB6                                                  
      IF(EN <= XVIB6(J):
) GO TO 720                                      
  710 CONTINUE                                                          
      J=NVIB6                                                           
  720 A=(YVIB6(J)-YVIB6(J-1))/(XVIB6(J)-XVIB6(J-1))                     
      B=(XVIB6(J-1)*YVIB6(J)-XVIB6(J)*YVIB6(J-1))/(XVIB6(J-1)-XVIB6(J)) 
      QIN(8,I)=(A*EN+B)*1.D-16                                          
  800 CONTINUE                                                          
#                                                                       
      QIN(9,I)=0.0                                                      
      IF(EN <= EIN(9):
) GO TO 900                                        
      DO 810 J=2,NDISS                                                  
      IF(EN <= XDISS(J):
) GO TO 820                                      
  810 CONTINUE                                                          
      J=NDISS                                                           
  820 A=(YDISS(J)-YDISS(J-1))/(XDISS(J)-XDISS(J-1))                     
      B=(XDISS(J-1)*YDISS(J)-XDISS(J)*YDISS(J-1))/(XDISS(J-1)-XDISS(J)) 
      QIN(9,I)=(A*EN+B)*1.D-16                                          
  900 CONTINUE                                                          
#                             
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)+QIN(1,I)+QIN(2,I)+QIN(3,I)+QIN(4,I)+ 
     /QIN(5,I)+QIN(6,I)+QIN(7,I)+QIN(8,I)+QIN(9,I)           
 9000 CONTINUE                                                          
#  SAVE COMPUTE TIME
      IF(EFINAL <= EIN(9):
) NIN=8    
      IF(EFINAL <= EIN(8):
) NIN=7
      IF(EFINAL <= EIN(7):
) NIN=6                                        
      IF(EFINAL <= EIN(6):
) NIN=5
      IF(EFINAL <= EIN(5):
) NIN=4
      IF(EFINAL <= EIN(4):
) NIN=3                                        
      IF(EFINAL <= EIN(3):
) NIN=2                                        
      IF(EFINAL <= EIN(2):
) NIN=1                                        
      IF(EFINAL <= EIN(1):
) NIN=0                                        
      RETURN                                                            
      # end 
      def GAS30(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY  
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
#    /QNULL,NNULL,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,
#    /SCRPT)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(4000),EROOT(4000),QT1(4000),QT2(4000),
     /QT3(4000),QT4(4000)
      COMMON/DENS/DEN(4000)
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30)
     /,EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]  
      DIMENSION XEN(159),YELM(159),YELT(159),YEPS(159),
     /XATT(113),YAT1(113),YAT2(113),YAT3(113),YAT4(113),YAT5(113),
     /YAT6(113),YAT7(113), 
     /XION(55),YION(55),YIN1(55),YIN2(55),YIN3(55),YIN4(55),YIN5(55),
     /YIN6(55),YIN7(55),XL3SH(100),YL3SH(100),XL2SH(100),YL2SH(100),
     /XL1SH(100),YL1SH(100),XKSHS(80),YKSHS(80),XKSHF(79),YKSHF(79),
     /XV1V1(13),YV1V1(13),XV2V1(12),YV2V1(12),XV3V1(7),YV3V1(7),
     ,XV4V1(7),YV4V1(7),XV5V1(5),YV5V1(5),XVBV3(17),YVBV3(17),
     /XTR1(12),YTR1(12),  
     /XTR2(11),YTR2(11),XTR3(11),YTR3(11),
     /IOFFN(35),IOFFION(12)
      DIMENSION Z9T(25),Z16T(25),EBRM(25)
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME                                                 
      DATA XEN/0.00,.001,.005,.010,.025,.050,.075,0.10,0.20,0.30,
     /0.35,0.40,0.45,0.50,0.60,0.70,0.80,0.90,1.00,1.20,
     /1.50,2.00,2.50,3.00,3.50,4.00,4.50,5.00,6.00,7.00,
     /8.00,9.00,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,
     /18.0,19.0,20.0,22.0,25.0,30.0,35.0,40.0,45.0,50.0,
     /60.0,70.0,75.0,80.0,90.0,100.,125.,150.,200.,250.,
     /300.,350.,400.,450.,500.,600.,700.,800.,1000.,1250.,
     /1500.,1750.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,6000.,
     /7000.,8000.,9000.,1.0D4,1.25D4,1.5D4,1.75D4,2.0D4,2.5D4,3.0D4,
     /3.5D4,4.0D4,4.5D4,5.0D4,6.0D4,7.0D4,8.0D4,9.0D4,1.0D5,1.25D5,
     /1.5D5,1.75D5,2.0D5,2.5D5,3.0D5,3.5D5,4.0D5,4.5D5,5.0D5,6.0D5,
     /7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,2.0D6,2.5D6,3.0D6,
     /3.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,
     /1.5D7,1.75D7,2.0D7,2.5D7,3.0D7,3.5D7,4.0D7,4.5D7,5.0D7,6.0D7,
     /7.0D7,8.0D7,9.0D7,1.0D8,1.25D8,1.5D8,1.75D8,2.0D8,2.5D8,3.0D8,
     /3.5D8,4.0D8,4.5D8,5.0D8,6.0D8,7.0D8,8.0D8,9.0D8,1.0D9/
# ELASTIC MOMENTUM TRANSFER X-SECTION     
      DATA YELM/1434.,1300.,890.,620.,386.,199.,122.,61.5,36.0,28.0,
     /24.0,20.8,17.4,15.0,12.0,10.3,9.21,8.57,8.25,8.75,
     /10.5,14.5,16.3,15.1,14.3,13.6,13.5,13.9,15.1,15.5,
     /14.8,14.7,15.3,16.5,17.6,16.5,15.1,14.4,14.2,14.5,
     /14.8,15.3,15.7,16.1,15.4,13.4,11.5,10.3,9.45,8.73,
     /7.84,7.24,6.88,6.52,5.93,5.49,4.67,3.95,2.84,2.12,
     /1.66,1.39,1.22,1.08,0.96,.784,.642,.554,.447,0.35,
     /.265,.225,.195,.135,.099,.0762,.0606,.0494,.0412,.0300,
     /.0229,.0181,.0147,.0122,.00818,.00591,.00449,.00353,.00237,.00171,
     /.00130,.00102,8.30D-4,6.88D-4,4.99D-4,3.80D-4,3.01D-4,2.45D-4,
     /2.04D-4,1.40D-4,
     /1.02D-4,7.92D-5,6.35D-5,4.41D-5,3.29D-5,2.58D-5,2.09D-5,1.74D-5,
     /1.48D-5,1.12D-5,
     /8.85D-6,7.22D-6,6.04D-6,5.15D-6,3.67D-6,2.77D-6,2.18D-6,1.77D-6,
     /1.24D-6,9.22D-7,
     /7.16D-7,5.74D-7,4.71D-7,3.94D-7,2.89D-7,2.21D-7,1.75D-7,1.42D-7,
     /1.18D-7,7.94D-8,
     /5.72D-8,4.32D-8,3.39D-8,2.25D-8,1.60D-8,1.20D-8,9.36D-9,7.50D-9,
     /6.14D-9,4.33D-9,
     /3.22D-9,2.49D-9,1.98D-9,1.61D-9,1.04D-9,7.21D-10,5.31D-10,
     /4.07D-10,2.61D-10,1.81D-10,
     /1.33D-10,1.02D-10,8.06D-11,6.53D-11,4.54D-11,3.33D-11,2.55D-11,
     /2.02D-11,1.63D-11/
# ELASTIC TOTAL X-SECTION               
      DATA YELT/1434.,1300.,890.,620.,386.,209.,136.,77.0,45.0,35.0,
     /30.0,26.2,21.8,18.7,14.8,12.5,11.1,10.2,9.72,9.73,
     /10.9,14.8,17.6,18.4,19.6,19.5,20.0,21.0,23.6,24.2,
     /24.6,25.0,25.2,25.8,26.6,25.5,24.9,24.7,24.6,24.5,
     /24.5,24.6,24.7,25.3,25.3,24.7,24.0,23.5,23.0,22.4,
     /21.2,20.1,19.7,19.3,18.6,18.0,16.2,14.8,12.5,11.1,
     /10.0,9.15,8.45,7.84,7.14,6.45,5.74,5.30,4.52,3.94,
     /3.43,3.04,2.73,2.28,1.96,1.72,1.53,1.39,1.26,1.08,
     /.938,.832,.748,.680,.555,.470,.408,.362,.295,.251,
     /.219,.194,.175,.160,.137,.121,.109,.0992,.0915,.0777,
     /.0685,.0620,.0571,.0503,.0458,.0427,.0403,.0385,.0371,.0351,
     /.0336,.0326,.0318,.0312,.0302,.0296,.0291,.0288,.0285,.0282,
     /.0281,.0280,.0279,.0279,.0278,.0278,.0277,.0277,.0277,.0277,
     /.0277,.0277,.0277,.0277,.0277,.0277,.0277,.0277,.0277,.0277,
     /.0276,.0276,.0276,.0276,.0276,.0276,.0276,.0276,.0276,.0276,
     /.0276,.0276,.0276,.0276,.0276,.0276,.0276,.0276,.0276/
# EPSILON FOR ELASTIC ANGULAR DISTRIBUTION  
#  EPSILON=1.0-YEPS
      DATA YEPS/.9999,.9999,.9999,.9999,.9999,.9283,.8463,.7035,.7053,
     /.7053,
     /.7053,.6967,.7027,.7084,.7208,.7396,.7479,.7630,.7755,.8496,
     /.9450,.9696,.8907,.7327,.6061,.5630,.5345,.5179,.4898,.4906,
     /.4427,.4260,.4515,.4898,.5175,.4967,.4472,.4192,.4114,.4291,
     /.4466,.4663,.4845,.4845,.4495,.3719,.3052,.2643,.2383,.2190,
     /.2015,.1934,.1842,.1752,.1600,.1492,.1365,.1215,.09574,.07381,
     /.06047,.05348,.04969,.04650,.04482,.03893,.03466,.03168,.02936,
     /.02538,
     /.02106,.01989,.01897,.01481,.01209,.01019,.00880,.00774,.00691,
     /.00567,
     /.00481,.00417,.00368,.00329,.00260,.00215,.00183,.001588,.001257,
     /.001037,
     /8.82D-4,7.66D-4,6.76D-4,6.04D-4,4.97D-4,4.21D-4,3.64D-4,3.19D-4,
     /2.84D-4,2.21D-4,
     /1.798D-4,1.504D-4,1.285D-4,9.83D-5,7.86D-5,6.47D-5,5.45D-5,
     /4.68D-5,4.07D-5,3.18D-5,
     /2.56D-5,2.12D-5,1.786D-5,1.529D-5,1.093D-5,8.22D-6,6.42D-6,
     /5.16D-6,3.55D-6,2.60D-6,
     /1.99D-6,1.568D-6,1.270D-6,1.049D-6,7.52D-7,5.65D-7,4.41D-7,
     /3.53D-7,2.89D-7,1.89D-7,
     /1.331D-7,9.87D-8,7.62D-8,4.92D-8,3.44D-8,2.53D-8,1.94D-8,1.533D-8,
     /1.241D-8,8.58D-9,
     /6.27D-9,4.77D-9,3.74D-9,3.01D-9,1.89D-9,1.29D-9,9.38D-10,7.09D-10,
     /4.44D-10,3.03D-10,
     /2.20D-10,1.66D-10,1.30D-10,1.04D-10,7.1D-11,5.1D-11,3.9D-11,
     /3.0D-11,2.4D-11/
# V1 RAMAN ISOTROPIC                   SCALED BY 1/E**2 ABOVE 1.0 EV
      DATA XV1V1/.096032,.100,.114,0.25,0.20,0.25,0.30,0.35,0.40,0.50,
     /0.55,0.70,1.00/
      DATA YV1V1/0.00,19.0,21.0,15.7,9.68,8.80,8.80,7.54,6.28,6.00,
     /5.60,4.20,2.45/
# 2V1 RAMAN ISOTROPIC                  SCALED BY 1/E**2 ABOVE 1.0EV
      DATA XV2V1/.192064,0.20,0.23,0.25,0.30,0.35,0.40,0.50,0.55,0.60,
     /0.70,1.00/
      DATA YV2V1/0.00,3.14,4.14,3.52,3.02,2.76,2.64,2.14,1.98,1.85,
     /1.70,0.99/
# 3V1 RAMAN ISOTROPIC                  SCALED BY 1/E**2 ABOVE 1.0EV
      DATA XV3V1/0.288096,0.325,0.40,0.50,0.60,0.70,1.00/
      DATA YV3V1/0.00,2.3,1.6,1.30,1.10,0.85,0.50/
# 4V1 RAMAN ISOTROPIC                  SCALED BY 1/E**2 ABOVE 1.0EV
      DATA XV4V1/.384128,0.45,0.50,0.55,0.60,0.70,1.00/
      DATA YV4V1/0.00,1.15,0.85,0.65,0.55,0.50,0.29/
# 5V1+HIGHER V1 RAMAN   ISOTROPIC      SCALED BY 1/E**2 ABOVE 1.0EV
      DATA XV5V1/.48016,0.55,0.60,0.70,1.00/
      DATA YV5V1/0.00,1.00,0.70,0.45,0.26/
# V3 DIPOLE ANISOTROPIC
# V3 DIPOLE PART AS ANALYTIC def IN def
# V3 DIRECT PART AT THRESHOLD AND ALSO RESONANT STRUCTURE ABOVE 6EV
# GIVEN AS TABLES.
#              
      DATA XVBV3/.11754,.125,0.13,0.14,0.15,0.16,0.17,0.18,0.19,5.00,
     /6.00,7.00,8.00,9.00,10.0,12.0,15.0/
      DATA YVBV3/0.00,20.0,17.0,13.0,9.00,6.00,3.50,2.00,0.00,0.00,
     /1.50,4.00,2.00,0.00,0.00,4.50,0.00/
# V4 DIPOLE ANISOTROPIC
# V4 DIPOLE GIVEN AS ANALYTIC def IN def
#
# NOTE : IONISATION  X-SECTIONS ABOVE 1KEV GIVEN BY BORN-BETHE.
#       IONISATION FROM RAP ET AL AND LINDSAY ET AL.
#         
      DATA XION/15.67,16.5,17.0,17.5,18.0,18.5,19.0,19.5,21.0,21.5,     
     /22.0,22.5,23.0,23.5,24.0,26.0,28.0,30.0,32.0,34.0,
     /36.0,38.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,75.0,
     /80.0,85.0,90.0,95.0,100.,105.,110.,115.,120.,125.,
     /130.,135.,140.,145.,150.,160.,180.,200.,250.,300.,
     /400.,500.,600.,800.,1000./
# IONISATION TO SF5 +
      DATA YION/0.00,.020,.035,.055,.084,.118,.154,.197,.314,.370,    
     /.434,.509,.584,.670,.760,1.13,1.36,1.61,1.83,2.08,
     /2.26,2.37,2.46,2.63,2.81,2.99,3.02,3.08,3.16,3.19,
     /3.25,3.28,3.27,3.29,3.30,3.31,3.32,3.33,3.33,3.32,
     /3.30,3.30,3.29,3.29,3.30,3.30,3.24,3.20,3.03,2.92,
     /2.62,2.42,2.21,1.86,1.65/
# IONISATION TO SF4 +
      DATA YIN1/0.00,0.00,0.00,0.00,0.00,0.00,.001,.003,.009,.011,      
     /.012,.014,.017,.020,.022,.038,.052,.076,.110,.130,
     /.148,.161,.173,.180,.202,.220,.228,.240,.256,.261,
     /.269,.271,.271,.277,.282,.283,.284,.285,.285,.284,
     /.284,.284,.285,.280,.277,.268,.266,.265,.243,.237,
     /.208,.199,.172,.146,.127/
# IONISATION TO SF3 +
      DATA YIN2/0.00,0.00,0.00,0.00,0.00,0.00,0.00,.002,.008,.010,
     /.011,.013,.020,.028,.038,.092,.148,.242,.340,.449,
     /.546,.598,.648,.603,.694,.768,.812,.843,.881,.886,
     /.898,.922,.938,.950,.958,.961,.964,.966,.964,.964,
     /.963,.965,.965,.961,.960,.949,.936,.927,.869,.814,
     /.717,.660,.598,.493,.449/
# IONISATION TO SF2 +
      DATA YIN3/16*0.0,.001,.002,.021,.043,
     /.072,.097,.125,.186,.233,.261,.281,.292,.306,.300,
     /.296,.305,.312,.311,.310,.307,.304,.301,.296,.295,
     /.293,.292,.291,.286,.282,.272,.267,.264,.234,.217,
     /.172,.154,.140,.113,.098/
# IONISATION TO SF +
      DATA YIN4/19*0.0,.001,
     /.014,.031,.054,.163,.282,.348,.405,.447,.496,.512,
     /.534,.570,.601,.615,.625,.634,.642,.648,.654,.650,
     /.646,.643,.640,.644,.650,.657,.638,.622,.569,.515,
     /.425,.383,.342,.267,.221/
# IONISATION TO S +
      DATA YIN5/21*0.0,.003,.011,.030,.072,.112,.152,.181,.214,.233,
     /.256,.275,.291,.310,.328,.345,.362,.378,.394,.398,
     /.401,.406,.411,.413,.417,.421,.424,.428,.390,.370,
     /.300,.263,.233,.173,.151/
# IONISATION TO F +
      DATA YIN6/21*0.0,.002,.007,.025,.052,.092,.134,.186,.242,.267,
     /.296,.349,.401,.448,.495,.530,.566,.602,.637,.658,
     /.677,.699,.721,.735,.753,.780,.807,.838,.817,.759,
     /.627,.538,.481,.372,.297/
# IONISATION TO SUM OF DOUBLE CHARGED STATES SF3,SF2,SF ALL ++
# MAJORITY IN STATE SF2 ++
      DATA YIN7/25*0.0,.011,.0217,.0330,.0445,.0585,
     /.0730,.0850,.0980,.1084,.1188,.1257,.1326,.1395,.1463,.1505,
     /.1548,.1590,.1633,.1631,.1629,.1624,.1652,.1681,.1546,.1419,
     /.1189,.1023,.0894,.0684,.0611/
# SULFUR L3 SHELL
      DATA XL3SH/164.16,170.6,175.8,181.2,186.7,192.3,198.1,204.1,210.3,
     /216.7,
     /229.9,244.0,258.9,274.6,318.3,358.0,390.9,439.5,494.0,555.1,
     /605.9,700.7,810.3,910.1,1022.,1216.,1447.,1671.,1932.,2232.,
     /2578.,2978.,3440.,3974.,4460.,5005.,5950.,7072.,8168.,9165.,
     /1.00D4,1.15D4,1.30D4,1.45D4,1.63D4,1.83D4,2.05D4,2.37D4,2.74D4,
     /3.16D4,
     /3.65D4,4.22D4,4.87D4,5.62D4,6.49D4,7.50D4,8.66D4,1.00D5,1.26D5,
     /1.54D5,
     /2.05D5,2.51D5,3.07D5,3.55D5,4.10D5,5.01D5,6.13D5,7.29D5,8.66D5,
     /1.00D6,
     /1.26D6,1.50D6,2.05D6,3.07D6,4.10D6,5.01D6,6.13D6,7.08D6,8.18D6,
     /1.00D7,
     /1.26D7,1.50D7,2.05D7,3.07D7,4.10D7,5.01D7,6.13D7,7.08D7,8.18D7,
     /1.00D8,
     /1.26D8,1.50D8,2.05D8,3.07D8,4.10D8,5.01D8,6.13D8,7.08D8,8.18D8,
     /1.00D9/
      DATA YL3SH/0.00,1.49D-3,2.62D-3,3.72D-3,4.79D-3,5.83D-3,6.84D-3,
     /7.81D-3,8.75D-3,9.65D-3,
     /1.13D-2,1.29D-2,1.43D-2,1.56D-2,1.83D-2,1.99D-2,2.09D-2,2.19D-2,
     /2.25D-2,2.28D-2,
     /2.29D-2,2.26D-2,2.21D-2,2.15D-2,2.07D-2,1.94D-2,1.80D-2,1.67D-2,
     /1.55D-2,1.43D-2,
     /1.31D-2,1.20D-2,1.10D-2,9.99D-3,9.24D-3,8.54D-3,7.56D-3,6.68D-3,
     /6.01D-3,5.52D-3,
     /5.17D-3,4.64D-3,4.26D-3,3.90D-3,3.57D-3,3.27D-3,3.00D-3,2.68D-3,
     /2.41D-3,2.16D-3,
     /1.94D-3,1.74D-3,1.56D-3,1.41D-3,1.27D-3,1.15D-3,1.05D-3,9.52D-4,
     /8.26D-4,7.35D-4,
     /6.33D-4,5.78D-4,5.34D-4,5.08D-4,4.87D-4,4.63D-4,4.47D-4,4.37D-4,
     /4.30D-4,4.28D-4,
     /4.27D-4,4.29D-4,4.39D-4,4.57D-4,4.74D-4,4.87D-4,5.00D-4,5.10D-4,
     /5.21D-4,5.35D-4,
     /5.53D-4,5.66D-4,5.90D-4,6.21D-4,6.44D-4,6.60D-4,6.76D-4,6.87D-4,
     /6.99D-4,7.15D-4,
     /7.33D-4,7.47D-4,7.72D-4,8.04D-4,8.27D-4,8.43D-4,8.59D-4,8.71D-4,
     /8.82D-4,8.98D-4/
# SULFUR L2 SHELL
      DATA XL2SH/165.36,170.5,175.7,181.0,186.5,192.2,198.0,204.0,210.2,
     /216.5,
     /229.8,243.8,258.7,274.5,318.1,357.8,390.7,439.3,493.8,555.0,
     /605.7,700.6,810.2,909.9,1022.,1216.,1447.,1671.,1932.,2232.,
     /2578.,2978.,3440.,3974.,4460.,5005.,5950.,7072.,8168.,9165.,
     /1.00D4,1.15D4,1.30D4,1.45D4,1.63D4,1.83D4,2.05D4,2.37D4,2.74D4,
     /3.16D4,
     /3.65D4,4.22D4,4.87D4,5.62D4,6.49D4,7.50D4,8.66D4,1.00D5,1.26D5,
     /1.54D5,
     /2.05D5,2.51D5,3.07D5,3.55D5,4.10D5,5.01D5,6.13D5,7.29D5,8.66D5,
     /1.00D6,
     /1.26D6,1.50D6,2.05D6,3.07D6,4.10D6,5.01D6,6.13D6,7.08D6,8.18D6,
     /1.00D7,
     /1.26D7,1.50D7,2.05D7,3.07D7,4.10D7,5.01D7,6.13D7,7.08D7,8.18D7,
     /1.00D8,
     /1.26D8,1.50D8,2.05D8,3.07D8,4.10D8,5.01D8,6.13D8,7.08D8,8.18D8,
     /1.00D9/
      DATA YL2SH/0.00,5.76D-4,1.13D-3,1.68D-3,2.21D-3,2.72D-3,3.22D-3,
     /3.70D-3,4.16D-3,4.61D-3,
     /5.45D-3,6.23D-3,6.93D-3,7.57D-3,8.91D-3,9.73D-3,1.02D-2,1.07D-2,
     /1.10D-2,1.12D-2,
     /1.12D-2,1.11D-2,1.09D-2,1.06D-2,1.02D-2,9.56D-3,8.85D-3,8.24D-3,
     /7.64D-3,7.04D-3,
     /6.47D-3,5.94D-3,5.42D-3,4.93D-3,4.57D-3,4.22D-3,3.74D-3,3.30D-3,
     /2.97D-3,2.73D-3,
     /2.56D-3,2.29D-3,2.10D-3,1.93D-3,1.77D-3,1.62D-3,1.48D-3,1.33D-3,
     /1.19D-3,1.07D-3,
     /9.57D-4,8.60D-4,7.74D-4,6.97D-4,6.30D-4,5.70D-4,5.17D-4,4.71D-4,
     /4.08D-4,3.64D-4,
     /3.13D-4,2.86D-4,2.64D-4,2.51D-4,2.41D-4,2.29D-4,2.21D-4,2.16D-4,
     /2.13D-4,2.12D-4,
     /2.11D-4,2.13D-4,2.17D-4,2.26D-4,2.35D-4,2.41D-4,2.48D-4,2.53D-4,
     /2.58D-4,2.65D-4,
     /2.73D-4,2.80D-4,2.92D-4,3.08D-4,3.19D-4,3.27D-4,3.35D-4,3.40D-4,
     /3.46D-4,3.54D-4,
     /3.63D-4,3.70D-4,3.82D-4,3.98D-4,4.09D-4,4.17D-4,4.25D-4,4.31D-4,
     /4.37D-4,4.45D-4/
# SULFUR L1 SHELL
      DATA XL1SH/230.9,235.3,242.1,249.0,256.1,263.5,271.0,278.8,286.8,
     /295.0,
     /303.5,321.2,339.9,370.1,403.1,439.0,478.1,520.8,567.3,618.0,
     /692.8,754.8,822.5,896.2,976.6,1095.,1193.,1301.,1418.,1545.,
     /1733.,2000.,2517.,3078.,3553.,4102.,4602.,5163.,6136.,7291.,
     /8419.,1.00D4,1.19D4,1.41D4,1.63D4,1.83D4,2.05D4,2.51D4,3.07D4,
     /3.55D4,
     /4.10D4,4.60D4,5.16D4,5.62D4,6.49D4,7.72D4,8.91D4,1.00D5,1.26D5,
     /1.54D5,
     /2.05D5,2.51D5,3.07D5,3.55D5,4.10D5,5.01D5,6.13D5,7.29D5,8.66D5,
     /1.00D6,
     /1.26D6,1.50D6,2.05D6,3.07D6,4.10D6,5.01D6,6.13D6,7.08D6,8.18D6,
     /1.00D7,
     /1.26D7,1.50D7,2.05D7,3.07D7,4.10D7,5.01D7,6.13D7,7.08D7,8.18D7,
     /1.00D8,
     /1.26D8,1.50D8,2.05D8,3.07D8,4.10D8,5.01D8,6.13D8,7.08D8,8.18D8,
     /1.00D9/
      DATA YL1SH/0.00,1.83D-4,4.44D-4,6.95D-4,9.35D-4,1.17D-3,1.39D-3,
     /1.60D-3,1.81D-3,2.00D-3,
     /2.19D-3,2.54D-3,2.87D-3,3.30D-3,3.68D-3,4.00D-3,4.26D-3,4.48D-3,
     /4.65D-3,4.77D-3,
     /4.87D-3,4.89D-3,4.89D-3,4.85D-3,4.78D-3,4.66D-3,4.54D-3,4.41D-3,
     /4.26D-3,4.11D-3,
     /3.89D-3,3.60D-3,3.15D-3,2.77D-3,2.52D-3,2.28D-3,2.11D-3,1.94D-3,
     /1.71D-3,1.50D-3,
     /1.34D-3,1.18D-3,1.03D-3,8.97D-4,8.00D-4,7.31D-4,6.67D-4,5.69D-4,
     /4.86D-4,4.34D-4,
     /3.89D-4,3.56D-4,3.26D-4,3.06D-4,2.75D-4,2.44D-4,2.20D-4,2.04D-4,
     /1.76D-4,1.56D-4,
     /1.34D-4,1.22D-4,1.12D-4,1.06D-4,1.02D-4,9.63D-5,9.24D-5,9.00D-5,
     /8.84D-5,8.76D-5,
     /8.71D-5,8.72D-5,8.85D-5,9.16D-5,9.44D-5,9.66D-5,9.89D-5,1.01D-4,
     /1.03D-4,1.05D-4,
     /1.08D-4,1.10D-4,1.14D-4,1.20D-4,1.24D-4,1.27D-4,1.29D-4,1.31D-4,
     /1.33D-4,1.36D-4,
     /1.39D-4,1.42D-4,1.46D-4,1.52D-4,1.56D-4,1.59D-4,1.61D-4,1.63D-4,
     /1.65D-4,1.68D-4/
# SULFUR K SHELL
      DATA XKSHS/2472.,2528.,2601.,2677.,2755.,2834.,2917.,3001.,3089.,
     /3178.,
     /3271.,3366.,3464.,3564.,3668.,3774.,3884.,3997.,4113.,4233.,
     /4356.,4483.,4748.,5028.,5325.,5804.,6510.,7515.,8430.,9457.,
     /11240.,1.50D4,2.05D4,2.51D4,3.07D4,4.10D4,5.01D4,6.13D4,7.08D4,
     /8.18D4,
     /1.00D5,1.50D5,2.05D5,2.99D5,4.10D5,5.01D5,6.13D5,7.08D5,8.18D5,
     /1.00D6,
     /1.26D6,1.50D6,2.05D6,3.07D6,4.10D6,5.01D6,6.13D6,7.08D6,8.18D6,
     /1.00D7,
     /1.26D7,1.50D7,2.05D7,3.07D7,4.10D7,5.01D7,6.13D7,7.08D7,8.18D7,
     /1.00D8,
     /1.26D8,1.50D8,2.05D8,3.07D8,4.10D8,5.01D8,6.13D8,7.08D8,8.18D8,
     /1.00D9/
      DATA YKSHS/0.0,2.47D-6,5.51D-6,8.42D-6,1.12D-5,1.39D-5,1.65D-5,
     /1.89D-5,2.13D-5,2.35D-5,
     /2.56D-5,2.77D-5,2.96D-5,3.15D-5,3.32D-5,3.49D-5,3.65D-5,3.80D-5,
     /3.94D-5,4.08D-5,
     /4.21D-5,4.33D-5,4.55D-5,4.74D-5,4.91D-5,5.11D-5,5.31D-5,5.44D-5,
     /5.46D-5,5.42D-5,
     /5.27D-5,4.84D-5,4.23D-5,3.82D-5,3.43D-5,2.91D-5,2.59D-5,2.30D-5,
     /2.11D-5,1.94D-5,
     /1.73D-5,1.39D-5,1.20D-5,1.04D-5,9.49D-6,9.11D-6,8.84D-6,8.71D-6,
     /8.63D-6,8.60D-6,
     /8.65D-6,8.74D-6,9.01D-6,9.50D-6,9.91D-6,1.02D-5,1.06D-5,1.08D-5,
     /1.10D-5,1.14D-5,
     /1.18D-5,1.21D-5,1.27D-5,1.34D-5,1.40D-5,1.44D-5,1.47D-5,1.50D-5,
     /1.53D-5,1.57D-5,
     /1.61D-5,1.64D-5,1.70D-5,1.78D-5,1.83D-5,1.88D-5,1.91D-5,1.94D-5,
     /1.97D-5,2.00D-5/
# FLUORINE K-SHELL IONISATION X-SECTION
      DATA XKSHF/685.4,705.,726.,747.,770.,792.,816.,840.,865.,890.,
     /916.,944.,1000.,1090.,1188.,1296.,1496.,1679.,1884.,2054.,
     /2238.,2512.,2985.,3758.,4467.,5158.,5957.,7079.,1.0D4,1.26D4,
     /1.50D4,2.05D4,2.51D4,3.07D4,4.10D4,5.01D4,6.13D4,7.08D4,8.18D4,
     /1.0D5,
     /1.50D5,2.05D5,2.99D5,4.10D5,5.01D5,6.13D5,7.08D5,8.18D5,1.00D6,
     /1.26D6,
     /1.50D6,2.05D6,3.07D6,4.10D6,5.01D6,6.13D6,7.08D6,8.18D6,1.00D7,
     /1.26D7,
     /1.50D7,2.05D7,3.07D7,4.10D7,5.01D7,6.13D7,7.08D7,8.18D7,1.00D8,
     /1.26D8,
     /1.50D8,2.05D8,3.07D8,4.10D8,5.01D8,6.13D8,7.08D8,8.18D8,1.00D9/
      DATA YKSHF/0.00,3.39D-5,6.77D-5,1.00D-4,1.32D-4,1.63D-4,1.92D-4,
     /2.21D-4,2.48D-4,2.75D-4,
     /3.00D-4,3.25D-4,3.71D-4,4.33D-4,4.87D-4,5.34D-4,5.96D-4,6.32D-4,
     /6.57D-4,6.69D-4,
     /6.77D-4,6.79D-4,6.68D-4,6.33D-4,5.97D-4,5.62D-4,5.25D-4,4.80D-4,
     /3.93D-4,3.41D-4,
     /3.04D-4,2.45D-4,2.13D-4,1.85D-4,1.51D-4,1.31D-4,1.14D-4,1.04D-4,
     /9.46D-5,8.32D-5,
     /6.58D-5,5.60D-5,4.80D-5,4.35D-5,4.15D-5,4.00D-5,3.93D-5,3.89D-5,
     /3.85D-5,3.86D-5,
     /3.89D-5,3.98D-5,4.17D-5,4.33D-5,4.45D-5,4.58D-5,4.68D-5,4.78D-5,
     /4.92D-5,5.09D-5,
     /5.21D-5,5.45D-5,5.75D-5,5.96D-5,6.12D-5,6.27D-5,6.38D-5,6.49D-5,
     /6.64D-5,6.82D-5,
     /6.95D-5,7.19D-5,7.50D-5,7.72D-5,7.88D-5,8.03D-5,8.14D-5,8.25D-5,
     /8.40D-5/
# ATTACHMENT   (ALL DATA AT 300 KELVIN)
      DATA XATT/1.D-6,.00002,.00005,.00007,.0001,.0002,.0003,.0004,
     /.0005,.0006,
     /.0007,.0008,.0009,.001,.002,.003,.004,.005,.006,.007,
     /.008,.009,.010,.015,.020,.025,.030,.035,.040,.045,
     /.050,.055,.060,.065,.070,.075,.080,.085,.090,.095,
     /.100,.105,.110,.115,.120,.125,.130,.140,.150,.160,
     /.170,.180,.190,.200,.220,.240,.260,.280,.300,.350,
     /.400,.450,.500,.550,.600,.650,.700,.750,.800,.850,
     /.900,.950,1.00,1.10,1.20,1.30,1.40,1.50,1.60,1.70,
     /1.80,1.90,2.00,2.25,2.50,2.75,3.00,3.50,4.00,4.50,
     /5.00,5.50,6.00,6.50,7.00,7.50,8.00,8.50,9.00,9.50,
     /10.0,10.25,10.5,11.0,11.5,12.0,12.5,13.0,13.5,14.0,
     /14.5,15.0,15.5/
# ATTACHMENT   SF6-                                BRAUN ET AL 2009
      DATA YAT1/19845.,19845.,12346.,10350.,8571.,5906.,4728.,4028.,
     /3551.,3200.,
     /2927.,2708.,2527.,2374.,1540.,1196.,989.6,865.4,762.2,683.8,
     /612.8,564.5,534.6,380.8,308.3,258.8,219.7,191.3,173.2,153.9,
     /130.6,121.5,108.1,103.8,89.56,91.17,83.17,80.07,72.08,73.68,
     /50.47,39.94,34.78,31.24,31.00,25.33,21.04,17.71,14.66,11.74,
     /9.21,7.31,5.59,3.99,1.96,1.00,.526,.266,.126,.036,
     /.029,.017,.013,50*0.0/
# ATTACHMENT DISSOCIATIVE     SF5-                 BRAUN ET AL 2009 
      DATA YAT2/14*0.0,.477,.453,.443,.413,.395,.377,
     /.366,.349,.342,.292,.259,.232,.220,.203,.192,.179,
     /.171,.161,.155,.148,.144,.142,.134,.132,.130,.123,
     /.113,.109,.103,.101,.096,.093,.093,.096,.099,.100,
     /.110,.115,.123,.123,.134,.164,.198,.232,.265,.389,
     /.513,.676,.743,.810,.710,.632,.479,.394,.299,.247,
     /.190,.157,.130,.0801,.0573,.0397,.0283,.0189,.0150,.0103,
     /.0069,.0049,31*0.0/
# ATTACHMENT  DISSOCIATIVE   SF4-     J.PHYS.CHEM.REF.DATA 29(2000)267
# UNITS 10**-18
      DATA YAT3/87*0.0,.0084,.0350,.144,
     /.457,.528,.394,.251,.130,.046,.0084,.0032,15*0.0/
# ATTACHMENT DISSOCIATIVE    SF3-     J.PHYS.CHEM.REF.DATA 29(2000)267
# UNITS 10**-18
      DATA YAT4/96*0.0,.0014,.0046,.015,.033,
     /.051,.0577,.064,.075,.071,.049,.026,.011,.0031,.0008,
     /3*0.0/
# ATTACHMENT DISSOCIATIVE   SF2-      J.PHYS.CHEM.REF.DATA 29(2000)267
# UNITS 10**-18
      DATA YAT5/100*0.0,
     /0.00,.00019,.00037,.0014,.0042,.0076,.0106,.0087,.0044,.0017,
     /.00068,.00028,0.00/
# ATTACHMENT DISSOCIATIVE    F2-      J.PHYS.CHEM.REF.DATA 29(2000)267
# UNITS 10**-18
      DATA YAT6/77*0.0,.003,.004,.005,
     /.006,.007,.008,.0075,.006,.0042,.0026,.0026,.00265,.0707,
     /.0489,.0155,.0038,.0019,.0015,.0015,.0018,.0031,.0065,.0104,
     /.0200,.0308,.0503,.0910,.0954,.0615,.0274,.0111,.0050,.0032,
     /.0018,.0012,0.00/
# ATTACHMENT DISSOCIATIVE    F-       J.PHYS.CHEM.REF.DATA 29(2000)267
# UNITS 10**-18
      DATA YAT7/80*0.0,
     /0.00,.010,.022,.075,.149,.162,.098,.171,.856,2.69,
     /4.63,4.39,2.78,1.37,.749,.615,.977,1.42,1.57,1.39,
     /1.13,1.14,1.31,2.10,2.35,1.95,1.22,.629,.400,.340,
     /.310,.300,0.0/
# DISSOCIATION TRIPLET + SINGLETS ( SINGLETS GIVEN ANALYTICALLY)
#
# TRIPLETS  SCALED AT HIGH ENERGY BY 1/E**2
      DATA XTR1/9.60,10.6,12.0,13.0,14.0,15.0,17.0,19.0,22.0,25.0,
     /29.0,32.0/
      DATA YTR1/0.00,.009,.030,.045,.050,.054,.059,.060,.054,.045,
     /.033,.026/
      DATA XTR2/10.9,12.4,14.0,15.0,16.0,18.0,20.0,23.0,26.0,30.0,
     /33.0/
      DATA YTR2/0.00,.053,.097,.111,.119,.130,.132,.119,.099,.073,
     /.057/
      DATA XTR3/14.4,15.4,17.0,18.0,20.0,22.0,25.0,28.0,32.0,35.0,
     /38.0/
      DATA YTR3/0.00,.110,.227,.265,.299,.315,.315,.299,.236,.183,
     /.135/
# BREMSSTRAHLUNG X-SECTION WITH CUT UNITS 10**-24
      DATA Z16T/1299.,871.,480.,289.,167.,79.5,46.9,29.4,19.6,17.5,
     /17.5,17.8,18.2,18.5,18.6,18.9,19.1,19.3,19.5,19.7,
     /19.8,19.9,20.0,20.0,20.1/
      DATA Z9T/573.,358.,179.,101.6,57.3,26.5,15.4,9.63,6.52,5.92,
     /6.01,6.18,6.35,6.43,6.52,6.65,6.75,6.87,6.95,7.02,
     /7.07,7.10,7.12,7.13,7.14/
      DATA EBRM/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,
     /2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,
     /4.E7,5.E7,6.E7,8.E7,1.E8/
#-----------------------------------------------------------------------
#
#-----------------------------------------------------------------------
#     NANISO=0
      IF(NANISO == 0):
 :
       NAME=' SF6 2014    ISOTROPIC  '
      else:
       NAME=' SF6 2014  ANISOTROPIC  '
      # endIF
#-----------------------------------------------------------------------
# BORN BETHE CONSTANTS
      A0=0.52917720859D-08
      RY=13.60569193
      CONST=1.873884D-20
      EMASS2=1021997.804
      API=DACOS(-1.00)
      BBCONST=16.00*API*A0*A0*RY*RY/EMASS2
#
# BORN BETHE VALUES FOR IONISATION
      AM2=13.894
      C=140.7
# AMPLITUDE NORMALISATION FOR TRIPLETS
      AMPTR1=1.0
      AMPTR2=1.0
      AMPTR3=1.0 
#  DIPOLE CONSTANT FOR VIBRATIONS V4 AND V3 
      V4DCONST=0.236
      V3DCONST=2.83
#  ARRAY SIZE
      NASIZE=4000
# 
      NION=12
      NATT=1
      NIN=35
      NNULL=0
#
      NBREM=25
      DO 8 J=1,NIN
      IZBR(J)=0
    8 CONTINUE
      IZBR(36)=16
      IZBR(37)=9
#
      DO 1 J=1,6
    1 KEL(J)=NANISO
# SUPERELASTIC, V4,V1 AND V3 SET TO ISOTROPIC
# NB SET TO 2 IN DEGRAD
      KIN(1)=0
      KIN(3)=0
      KIN(5)=0
# INELASTIC V1,2V1,3V1,4V1 AND 5V1 SET TO STANDARD ANG DISTRIBUTION
      KIN(4)=2
      KIN(7)=2
      KIN(8)=2
      KIN(9)=2
      KIN(10)=2
# V4 AND V3 VIBRATIONS ANISOTROPIC ( CAPITELLI-LONGO)
# NB SET TO 2 IN DEGRAD
      KIN(2)=1
      KIN(6)=1
# 
# ANGULAR DISTRIBUTION FOR DISSOCIATIVE EXCITATION IS OKHRIMOVSKYY TYPE 
      DO 2 J=11,NIN
    2 KIN(J)=2
#
#  RAT IS MOMENTUM TRANSFER TO TOTAL RATIO FOR VIBRATIONS IN THE
#  RESONANCE AND THRESHOLD REGION  FOR THE VIBRATION V3.     
#  USED DIPOLE ANGULAR DISTRIBUTION FOR V3 AND V4 NEAR THRESHOLD.
      RAT=1.0  
#                                                         
      NDATA=159 
      N1V1=13
      N2V1=12
      N3V1=7
      N4V1=7
      N5V1=5
      N1V3=17                                                      
      NIOND=55
      NIONL3=100
      NIONL2=100
      NIONL1=100
      NKSHS=80
      NKSHF=79                                                        
      NATT1=113    
      NTRP1=12
      NTRP2=11
      NTRP3=11                                                    
# VIBRATIONAL DEGENERACY
      DEGV4=3.0
      DEGV1=1.0
      DEGV3=3.0
#
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(146.0554192*AMU)                                
      E(3)=15.67                             
      E(4)=0.0                                              
      E(5)=0.0                           
      E(6)=0.0 
# 
      EION(1)=E(3)  
      EION(2)=18.5
      EION(3)=18.8
      EION(4)=27.0
      EION(5)=31.0
      EION(6)=37.0
      EION(7)=46.5
      EION(8)=164.16
      EION(9)=165.36
      EION(10)=230.9
      EION(11)=2472.0
      EION(12)=685.4         
# OPAL BEATY
      EOBY(1)=EION(1)*0.85
      EOBY(2)=EION(2)*0.85
      EOBY(3)=EION(3)*0.85
      EOBY(4)=EION(4)*0.85
      EOBY(5)=EION(5)*0.85
      EOBY(6)=EION(6)*0.85
      EOBY(7)=EION(7)*0.85
      EOBY(8)=EION(8)*1.0
      EOBY(9)=EION(9)*1.0
      EOBY(10)=EION(10)*1.0
      EOBY(11)=EION(11)*1.0
      EOBY(12)=EION(12)*1.0
#
# FLUORESCENCE DATA
      DO 22 NK=1,6 
      NC0(NK)=0
      EC0(NK)=0.0
      WKLM(NK)=0.0
      EFL(NK)=0.0
      NG1(NK)=0
      EG1(NK)=0.0
      NG2(NK)=0
      EG2(NK)=0.0
      LEGAS(NK)=0
      ISHELL(NK)=0
   22 CONTINUE
# IONISATION TO 2+ CHARGE STATES
      NC0(7)=1
      EC0(7)=1.0
      WKLM(7)=0.0
      EFL(7)=0.0
      NG1(7)=0
      EG1(7)=0.0
      NG2(7)=0
      EG2(7)=0.0
      LEGAS(7)=0
      ISHELL(7)=0
# SULFUR L3 SHELL
      NC0(8)=2
      EC0(8)=138.
      WKLM(8)=0.00093
      EFL(8)=150.
      NG1(8)=1
      EG1(8)=138.
      NG2(8)=1
      EG2(8)=5.
      LEGAS(8)=1
      ISHELL(8)=4
# SULFUR L2 SHELL
      NC0(9)=2
      EC0(9)=133.
      WKLM(9)=0.00093
      EFL(9)=150.
      NG1(9)=1
      EG1(9)=133.
      NG2(9)=1
      EG2(9)=5.0
      LEGAS(9)=1
      ISHELL(9)=3
# SULFUR L1 SHELL
      NC0(10)=2
      EC0(10)=170.
      WKLM(10)=0.00093
      EFL(10)=215.
      NG1(10)=2
      EG1(10)=170.
      NG2(10)=1
      EG2(10)=5.0
      LEGAS(10)=1
      ISHELL(10)=2
# SULFUR K  SHELL
      NC0(11)=4
      EC0(11)=2353.
      WKLM(11)=0.0804
      EFL(11)=2308.
      NG1(11)=3
      EG1(11)=2220.
      NG2(11)=2
      EG2(11)=90.0
      LEGAS(11)=1
      ISHELL(11)=1
# FLUORINE K SHELL
      NC0(12)=3
      EC0(12)=625.2
      WKLM(12)=0.010
      EFL(12)=668.
      NG1(12)=2
      EG1(12)=625.2
      NG2(12)=1
      EG2(12)=5.0
      LEGAS(12)=2  
      ISHELL(12)=1
# OFFSET ENERGY FOR IONISATION ELECTRON ANGULAR DISTRIBUTION
      DO 776 J=1,NION
      DO 777 I=1,NASIZE
      IF(EG(I):
 > EION(J)) :
       IOFFION(J)=I-1
       GO TO 776
      # endIF
  777 CONTINUE
  776 CONTINUE
#
      EIN(1)=-0.076253
      EIN(2)=0.076253
      EIN(3)=-0.096032  
      EIN(4)=0.096032 
      EIN(5)=-0.11754  
      EIN(6)=0.11754  
      EIN(7)=0.192064  
      EIN(8)=0.288096 
      EIN(9)=0.384128
      EIN(10)=0.48016
      EIN(11)=9.60 
      EIN(12)=10.0                                               
      EIN(13)=10.5
      EIN(14)=10.9                                                      
      EIN(15)=11.0
      EIN(16)=11.5
      EIN(17)=12.0
      EIN(18)=12.5
      EIN(19)=13.0
      EIN(20)=13.5
      EIN(21)=14.0
      EIN(22)=14.4
      EIN(23)=14.5
      EIN(24)=15.0
      EIN(25)=15.5
      EIN(26)=16.0 
      EIN(27)=16.5  
      EIN(28)=17.0
      EIN(29)=17.5
      EIN(30)=18.0
      EIN(31)=18.5
      EIN(32)=19.0
      EIN(33)=19.5
      EIN(34)=20.0
      EIN(35)=23.0
      EIN(36)=0.0
      EIN(37)=0.0
# OFFSET ENERGY FOR EXCITATION LEVELS ANGULAR DISTRIBUTION
      DO 3 NL=1,35
      DO 651 I=1,NASIZE
      IF(EG(I):
 > abs(EIN(NL))) :
       IOFFN(NL)=I-1
       GO TO 3
      # endIF
  651 CONTINUE
    3 CONTINUE
#***********************************************************************
# ENTER PENNING TRANSFER FRACTION FOR EACH LEVEL 
# LEVELS ARE DISSOCIATIVE SO DO NOT  GIVE PENNING TRANSFERS
      DO 4 K=1,35
      DO 4 L=1,3
    4 PENFRA[L,K]=0.0
      IF(IPEN == 0):
 GO TO 6
      DO 5 KDUM=10,14
      IF(PENFRA[1,KDUM] == 0.0):
 GO TO 5
      WRITE(6,999) NAME,EIN(KDUM),PENFRA[1,KDUM],PENFRA[2,KDUM],
     /PENFRA[3,KDUM]
  999 FORMAT(' GAS = ',A15,' ENERGY LEVEL = ',F7.4,' EV.',/,' PENNING PR
     /OBABILITY =',F5.3,' ABS.LENGTH =',F7.2,' DECAY TIME =',F7.1,/) 
    5 CONTINUE
#***********************************************************************
#
    6 SCRPT(1)='                                                  '
      SCRPT(2)=' ELASTIC   ANISOTROPIC      SF6                   '
      IF(NANISO == 0):
 :
      SCRPT(2)=' ELASTIC     ISOTROPIC      SF6                   '
      # endIF
      SCRPT(3)=' IONISATION  SF5 +                 ELOSS=   15.67 '
      SCRPT(4)=' IONISATION  SF4 +                 ELOSS=   18.5  '
      SCRPT(5)=' IONISATION  SF3 +                 ELOSS=   18.8  '
      SCRPT(6)=' IONISATION  SF2 +                 ELOSS=   27.0  '
      SCRPT(7)=' IONISATION  SF  +                 ELOSS=   31.0  '
      SCRPT(8)=' IONISATION  SUM OF: S + AND F +   ELOSS=   37.0  '
      SCRPT(9)=' IONISATION  SUM OF (SF3 SF2 SF)2+ ELOSS=   46.5  '
      SCRPT(10)=' IONISATION SULFUR L3 SHELL        ELOSS=  164.16 '
      SCRPT(11)=' IONISATION SULFUR L2 SHELL        ELOSS=  165.36 '
      SCRPT(12)=' IONISATION SULFUR L1 SHELL        ELOSS=  230.9  '
      SCRPT(13)=' IONISATION SULFUR  K SHELL        ELOSS= 2472.0  '
      SCRPT(14)=' IONISATION FLUORINE K SHELL       ELOSS=  685.4  '
      SCRPT(15)=' ATTACHMENT    (VALID FOR T=300KELVIN)            '
      SCRPT(16)='                                                  '
      SCRPT(17)='                                                  '
      SCRPT(18)=' VIBRATION V4 SUPERELASTIC         ELOSS=-0.076253' 
      SCRPT(19)=' VIBRATION V4 ANISOTROPIC          ELOSS= 0.076253'
      SCRPT(20)=' VIBRATION V1 SUPERELASTIC         ELOSS=-0.096032'
      SCRPT(21)=' VIBRATION V1 ISOTROPIC            ELOSS= 0.096032'
      SCRPT(22)=' VIBRATION V3 SUPERELASTIC         ELOSS=-0.11754 '
      SCRPT(23)=' VIBRATION V3 ANISOTROPIC          ELOSS= 0.11754 '
      SCRPT(24)=' VIBRATION 2V1                     ELOSS= 0.192064'
      SCRPT(25)=' VIBRATION 3V1                     ELOSS= 0.288096'
      SCRPT(26)=' VIBRATION 4V1                     ELOSS= 0.384128'
      SCRPT(27)=' VIBRATION 5V1 + HIGHER HARMONICS  ELOSS= 0.48016 '
      SCRPT(28)=' EXC. TRIPLET  DISSOCIATION        ELOSS=  9.6    '
      SCRPT(29)=' EXC. SINGLET  DISSOC.   F=0.0443  ELOSS= 10.0    '
      SCRPT(30)=' EXC. SINGLET  DISSOC.   F=0.0642  ELOSS= 10.5    '  
      SCRPT(31)=' EXC. TRIPLET  DISSOCIATION        ELOSS= 10.9    '
      SCRPT(32)=' EXC. SINGLET  DISSOC.   F=0.1839  ELOSS= 11.0    '
      SCRPT(33)=' EXC. SINGLET  DISSOC.   F=0.1073  ELOSS= 11.5    '
      SCRPT(34)=' EXC. SINGLET  DISSOC.   F=0.0880  ELOSS= 12.0    '
      SCRPT(35)=' EXC. SINGLET  DISSOC.   F=0.0304  ELOSS= 12.5    '
      SCRPT(36)=' EXC. ION PAIR F- + SF5+ F=0.0648  ELOSS= 13.0    '
      SCRPT(37)=' EXC. SINGLET  DISSOC.   F=0.1067  ELOSS= 13.5    '
      SCRPT(38)=' EXC. SINGLET  DISSOC.   F=0.1047  ELOSS= 14.0    '
      SCRPT(39)=' EXC. TRIPLET  DISSOCIATION        ELOSS= 14.4    '
      SCRPT(40)=' EXC. SINGLET  DISSOC.   F=0.1211  ELOSS= 14.5    '
      SCRPT(41)=' EXC. SINGLET  DISSOC.   F=0.2225  ELOSS= 15.0    '
      SCRPT(42)=' EXC. SINGLET  DISSOC.   F=0.2731  ELOSS= 15.5    '
      SCRPT(43)=' EXC. SINGLET  DISSOC.   F=0.1514  ELOSS= 16.0    '
      SCRPT(44)=' EXC. SINGLET  DISSOC.   F=0.1831  ELOSS= 16.5    '
      SCRPT(45)=' EXC. SINGLET  DISSOC.   F=0.1678  ELOSS= 17.0    '
      SCRPT(46)=' EXC. SINGLET  DISSOC.   F=0.1098  ELOSS= 17.5    '
      SCRPT(47)=' EXC. SINGLET  DISSOC.   F=0.0623  ELOSS= 18.0    '
      SCRPT(48)=' EXC. SINGLET  DISSOC.   F=0.0361  ELOSS= 18.5    '
      SCRPT(49)=' EXC. SINGLET  DISSOC.   F=0.0107  ELOSS= 19.0    '
      SCRPT(50)=' EXC. SINGLET  DISSOC.   F=0.0129  ELOSS= 19.5    '
      SCRPT(51)=' EXC. SINGLET  DISSOC.   F=0.0053  ELOSS= 20.0    '
      SCRPT(52)=' EXC. SINGLET  DISSOC.   F=0.0290  ELOSS= 23.0    '
      SCRPT(53)=' BREMSSTRAHLUNG FROM SULFUR ATOM                  '
      SCRPT(54)=' BREMSSTRAHLUNG FROM FLUORINE ATOM                '
# CALC LEVEL POPULATIONS
      APOPV4=DEGV4*math.exp(EIN(1)/AKT)
      APOPV1=DEGV1*math.exp(EIN(3)/AKT)
      APOPV3=DEGV3*math.exp(EIN(5)/AKT)
      APOPGS=1.0
      APOPSUM=APOPGS+APOPV4+APOPV1+APOPV3
      APOPGS=1.0/APOPSUM
      APOPV4=APOPV4/APOPSUM
      APOPV1=APOPV1/APOPSUM
      APOPV3=APOPV3/APOPSUM
#  RENORMALISE GROUND STATE TO ALLOW FOR EXCITATION X-SEC 
#  FROM EXCITED VIBRATIONAL STATE 
      APOPGS=1.0
#
#     EN=-ESTEP/2.0  
      DO 1000 I=1,NSTEP 
      EN=EG(I)                                             
#     EN=EN+ESTEP   
      GAMMA1=(EMASS2+2.00*EN)/EMASS2
      GAMMA2=GAMMA1*GAMMA1
      BETA=math.sqrt(1.00-1.00/GAMMA2)
      BETA2=BETA*BETA
# USE LOG INTERPOLATION FOR ELASTIC      
      IF(EN <= XEN(2):
) : 
       QELA=1434.D-16
       QMOM=1434.D-16
       PQ2=0.0
       GO TO 30 
      # endIF                                                    
      DO 10 J=2,NDATA 
      IF(EN <= XEN(J):
) GO TO 11                                        
   10 CONTINUE                                                          
      J=NDATA                                                           
   11 YXJ=math.log(YELT(J))
      YXJ1=math.log(YELT(J-1))
      XNJ=math.log(XEN(J))
      XNJ1=math.log(XEN(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QELA=math.exp(A*math.log(EN)+B)*1.D-16
      YXJ=math.log(YELM(J))
      YXJ1=math.log(YELM(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QMOM=math.exp(A*math.log(EN)+B)*1.D-16
# 
      YXJ=math.log(YEPS(J))
      YXJ1=math.log(YEPS(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      PQ2=math.exp(A*math.log(EN)+B)
#  EPSILON =1-YEPS
      PQ2=1.00-PQ2
   30 CONTINUE
      PQ1=0.5+(QELA-QMOM)/QELA
      IF(NANISO == 0):
 PEQEL(2,I)=0.5
      IF(NANISO == 1):
 PEQEL(2,I)=PQ1
      IF(NANISO == 2):
 PEQEL(2,I)=PQ2
      Q(2,I)=QELA 
      IF(NANISO == 0):
 Q(2,I)=QMOM
# IONISATION   SF5 +                    
      QION(1,I)=0.0             
      PEQION(1,I)=0.5   
      IF(NANISO == 2):
 PEQION(1,I)=0.0                                   
      IF(EN < EION(1):
) GO TO 44   
      IF(EN > XION(NIOND):
) GO TO 42                                   
      DO 40 J=2,NIOND                                                  
      IF(EN <= XION(J):
) GO TO 41                                       
   40 CONTINUE                                                          
      J=NIOND                                                   
   41 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      QION(1,I)=(A*EN+B)*1.D-16
      GO TO 43
# USE BORN BETHE X-SECTION ABOVE XION(NIOND) EV
   42 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(1,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.5403
   43 CONTINUE  
#        
      IF(EN <= (2.0*EION(1):
)) GO TO 44
      PEQION(1,I)=PEQEL(2,(I-IOFFION(1)))
# IONISATION SF4 +
   44 QION(2,I)=0.0             
      PEQION(2,I)=0.5   
      IF(NANISO == 2):
 PEQION(2,I)=0.0                                   
      IF(EN < EION(2):
) GO TO 54   
      IF(EN > XION(NIOND):
) GO TO 52                                   
      DO 50 J=2,NIOND                                                  
      IF(EN <= XION(J):
) GO TO 51                                       
   50 CONTINUE                                                          
      J=NIOND                                                   
   51 A=(YIN1(J)-YIN1(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YIN1(J)-XION(J)*YIN1(J-1))/(XION(J-1)-XION(J))       
      QION(2,I)=(A*EN+B)*1.D-16
      GO TO 53
# USE BORN BETHE X-SECTION ABOVE XION(NIOND) EV
   52 QION(2,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.0416
   53 CONTINUE  
#        
      IF(EN <= (2.0*EION(2):
)) GO TO 54
      PEQION(2,I)=PEQEL(2,(I-IOFFION(2)))
# IONISATION SF3 +
   54 QION(3,I)=0.0             
      PEQION(3,I)=0.5   
      IF(NANISO == 2):
 PEQION(3,I)=0.0                                   
      IF(EN < EION(3):
) GO TO 64   
      IF(EN > XION(NIOND):
) GO TO 62                                   
      DO 60 J=2,NIOND                                                  
      IF(EN <= XION(J):
) GO TO 61                                       
   60 CONTINUE                                                          
      J=NIOND                                                   
   61 A=(YIN2(J)-YIN2(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YIN2(J)-XION(J)*YIN2(J-1))/(XION(J-1)-XION(J))       
      QION(3,I)=(A*EN+B)*1.D-16
      GO TO 63
# USE BORN BETHE X-SECTION ABOVE XION(NIOND) EV
   62 QION(3,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.1470
   63 CONTINUE  
#        
      IF(EN <= (2.0*EION(3):
)) GO TO 64
      PEQION(3,I)=PEQEL(2,(I-IOFFION(3)))
# IONISATION SF2 +
   64 QION(4,I)=0.0             
      PEQION(4,I)=0.5   
      IF(NANISO == 2):
 PEQION(4,I)=0.0                                   
      IF(EN < EION(4):
) GO TO 74   
      IF(EN > XION(NIOND):
) GO TO 72                                   
      DO 70 J=2,NIOND                                                  
      IF(EN <= XION(J):
) GO TO 71                                       
   70 CONTINUE                                                          
      J=NIOND                                                   
   71 A=(YIN3(J)-YIN3(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YIN3(J)-XION(J)*YIN3(J-1))/(XION(J-1)-XION(J))       
      QION(4,I)=(A*EN+B)*1.D-16
      GO TO 73
# USE BORN BETHE X-SECTION ABOVE XION(NIOND) EV
   72 QION(4,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.0321
   73 CONTINUE  
#        
      IF(EN <= (2.0*EION(4):
)) GO TO 74
      PEQION(4,I)=PEQEL(2,(I-IOFFION(4)))
# IONISATION SF  +
   74 QION(5,I)=0.0             
      PEQION(5,I)=0.5   
      IF(NANISO == 2):
 PEQION(5,I)=0.0                                   
      IF(EN < EION(5):
) GO TO 84   
      IF(EN > XION(NIOND):
) GO TO 82                                   
      DO 80 J=2,NIOND                                                  
      IF(EN <= XION(J):
) GO TO 81                                       
   80 CONTINUE                                                          
      J=NIOND                                                   
   81 A=(YIN4(J)-YIN4(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YIN4(J)-XION(J)*YIN4(J-1))/(XION(J-1)-XION(J))       
      QION(5,I)=(A*EN+B)*1.D-16
      GO TO 83
# USE BORN BETHE X-SECTION ABOVE XION(NIOND) EV
   82 QION(5,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.0724
   83 CONTINUE  
#        
      IF(EN <= (2.0*EION(5):
)) GO TO 84 
      PEQION(5,I)=PEQEL(2,(I-IOFFION(5)))
# IONISATION SUM OF S + AND F +
   84 QION(6,I)=0.0             
      PEQION(6,I)=0.5   
      IF(NANISO == 2):
 PEQION(6,I)=0.0                                   
      IF(EN < EION(6):
) GO TO 94   
      IF(EN > XION(NIOND):
) GO TO 92                                   
      DO 90 J=2,NIOND                                                  
      IF(EN <= XION(J):
) GO TO 91                                       
   90 CONTINUE                                                          
      J=NIOND                                                   
   91 A=(YIN5(J)-YIN5(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YIN5(J)-XION(J)*YIN5(J-1))/(XION(J-1)-XION(J))       
      QION(6,I)=(A*EN+B)*1.D-16
      A=(YIN6(J)-YIN6(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YIN6(J)-XION(J)*YIN6(J-1))/(XION(J-1)-XION(J))
      QION(6,I)=QION(6,I)+(A*EN+B)*1.D-16
      GO TO 93
# USE BORN BETHE X-SECTION ABOVE XION(NIOND) EV
   92 QION(6,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.1466
   93 CONTINUE
      IF(EN < (2.0*EION(6):
)) GO TO 94
      PEQION(6,I)=PEQEL(2,(I-IOFFION(6)))  
# IONISATION SUM OF SF3,SF2 AND SF  ALL DOUBLE CHARGED
   94 QION(7,I)=0.0             
      PEQION(7,I)=0.5   
      IF(NANISO == 2):
 PEQION(7,I)=0.0                                   
      IF(EN < EION(7):
) GO TO 104   
      IF(EN > XION(NIOND):
) GO TO 102                                   
      DO 100 J=2,NIOND                                                  
      IF(EN <= XION(J):
) GO TO 101                                       
  100 CONTINUE                                                          
      J=NIOND                                                   
  101 A=(YIN7(J)-YIN7(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YIN7(J)-XION(J)*YIN7(J-1))/(XION(J-1)-XION(J))       
      QION(7,I)=(A*EN+B)*1.D-16
      GO TO 103
# USE BORN BETHE X-SECTION ABOVE XION(NIOND) EV
  102 QION(7,I)=CONST*(AM2*(X1-DEN(I)/2.0)+C*X2)*0.0200
  103 CONTINUE  
      IF(EN < (2.0*EION(7):
)) GO TO 104
      PEQION(7,I)=PEQEL(2,(I-IOFFION(7)))
# CALCULATE SULFUR L3 SHELL IONISATION
  104 QION(8,I)=0.0
      PEQION(8,I)=0.5
      IF(NANISO == 2):
 PEQION(8,I)=0.0
      IF(EN < EION(8):
) GO TO 114
      DO 110 J=2,NIONL3
      IF(EN <= XL3SH(J):
) GO TO 111
  110 CONTINUE
      J=NIONL3
  111 A=(YL3SH(J)-YL3SH(J-1))/(XL3SH(J)-XL3SH(J-1))
      B=(XL3SH(J-1)*YL3SH(J)-XL3SH(J)*YL3SH(J-1))/(XL3SH(J-1)-XL3SH(J))
      QION(8,I)=(A*EN+B)*1.D-16
      IF(EN <= (2.0*EION(8):
)) GO TO 114
      PEQION(8,I)=PEQEL(2,(I-IOFFION(8)))
# CALCULATE SULFUR L2 SHELL IONISATION  
  114 QION(9,I)=0.0
      PEQION(9,I)=0.5
      IF(NANISO == 2):
 PEQION(9,I)=0.0
      IF(EN < EION(9):
) GO TO 124
      DO 120 J=2,NIONL2
      IF(EN <= XL2SH(J):
) GO TO 121
  120 CONTINUE
      J=NIONL2
  121 A=(YL2SH(J)-YL2SH(J-1))/(XL2SH(J)-XL2SH(J-1))
      B=(XL2SH(J-1)*YL2SH(J)-XL2SH(J)*YL2SH(J-1))/(XL2SH(J-1)-XL2SH(J))
      QION(9,I)=(A*EN+B)*1.D-16
      IF(EN <= (2.0*EION(9):
)) GO TO 124
      PEQION(9,I)=PEQEL(2,(I-IOFFION(9)))
# CALCULATE SULFUR L1 SHELL IONISATION  
  124 QION(10,I)=0.0
      PEQION(10,I)=0.5
      IF(NANISO == 2):
 PEQION(10,I)=0.0
      IF(EN < EION(10):
) GO TO 134
      DO 130 J=2,NIONL1
      IF(EN <= XL1SH(J):
) GO TO 131
  130 CONTINUE
      J=NIONL1
  131 A=(YL1SH(J)-YL1SH(J-1))/(XL1SH(J)-XL1SH(J-1))
      B=(XL1SH(J-1)*YL1SH(J)-XL1SH(J)*YL1SH(J-1))/(XL1SH(J-1)-XL1SH(J))
      QION(10,I)=(A*EN+B)*1.D-16
      IF(EN <= (2.0*EION(10):
)) GO TO 134
      PEQION(10,I)=PEQEL(2,(I-IOFFION(10)))
# CALCULATE SULFUR K SHELL IONISATION  
  134 QION(11,I)=0.0
      PEQION(11,I)=0.5
      IF(NANISO == 2):
 PEQION(11,I)=0.0
      IF(EN < EION(11):
) GO TO 144
      DO 140 J=2,NKSHS
      IF(EN <= XKSHS(J):
) GO TO 141
  140 CONTINUE
      J=NKSHS
  141 A=(YKSHS(J)-YKSHS(J-1))/(XKSHS(J)-XKSHS(J-1))
      B=(XKSHS(J-1)*YKSHS(J)-XKSHS(J)*YKSHS(J-1))/(XKSHS(J-1)-XKSHS(J))
      QION(11,I)=(A*EN+B)*1.D-16
      IF(EN <= (2.0*EION(11):
)) GO TO 144
      PEQION(11,I)=PEQEL(2,(I-IOFFION(11)))
# CALCULATE FLUORINE K-SHELL IONISATION
  144 QION(12,I)=0.00
      PEQION(12,I)=0.5   
      IF(NANISO == 2):
 PEQION(12,I)=0.0                                  
      IF(EN <= EION(12):
) GO TO 154     
      DO 150 J=2,NKSHF                                                  
      IF(EN <= XKSHF(J):
) GO TO 151                                      
  150 CONTINUE                                                          
      J=NKSHF                                                   
  151 A=(YKSHF(J)-YKSHF(J-1))/(XKSHF(J)-XKSHF(J-1))                     
      B=(XKSHF(J-1)*YKSHF(J)-XKSHF(J)*YKSHF(J-1))/(XKSHF(J-1)-XKSHF(J))
      QION(12,I)=(A*EN+B)*1.D-16  
      IF(EN <= (2.0*EION(12):
)) GO TO 154
      PEQION(12,I)=PEQEL(2,(I-IOFFION(12)))
# CORECTION TO IONISATION DUE TO SPLIT INTO K AND L SHELLS
  154 SSUM=QION(8,I)+QION(9,I)+QION(10,I)+QION(11,I)+QION(12,I)
      IF(SSUM <= 0.0):
 GO TO 200
      TOT=QION(1,I)+QION(2,I)+QION(3,I)+QION(4,I)+QION(5,I)+QION(6,I)+
     /QION(7,I)
      CRFAC=(TOT-SSUM)/TOT
      DO 155 J=1,7
      QION(J,I)=QION(J,I)*CRFAC
  155 CONTINUE
#                                      
# ATTACHMENT (USE LOG INTERPOLATION FOR SF6- AND LINEAR FOR OTHER IONS)      
  200 Q(4,I)=0.0
      QATT(1,I)=Q(4,I)                                                  
      IF(EN <= 0.0):
 GO TO 250                                       
      IF(EN >= XATT(NATT1):
) GO TO 250                                   
      DO 210 J=2,NATT1                                                  
      IF(EN <= XATT(J):
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NATT1 
  220 XNJ=math.log(XATT(J))
      XNJ1=math.log(XATT(J-1))
      XNL=XATT(J)
      XNL1=XATT(J-1)
# LOG
      IF(YAT1(J):
 == 0.0 or YAT1(J-1) == 0.0) :
       QAT1=0.0
       GO TO 221
      # endIF
      Y1J=math.log(YAT1(J))
      Y1J1=math.log(YAT1(J-1))
      A1=(Y1J-Y1J1)/(XNJ-XNJ1)
      B1=(XNJ1*Y1J-XNJ*Y1J1)/(XNJ1-XNJ)
      QAT1=math.exp(A1*math.log(EN)+B1)*1.D-16
# LINEAR
  221 Y2J=YAT2(J)
      Y2J1=YAT2(J-1)
      Y3J=YAT3(J)
      Y3J1=YAT3(J-1)
      Y4J=YAT4(J)
      Y4J1=YAT4(J-1)
      Y5J=YAT5(J)
      Y5J1=YAT5(J-1)
      Y6J=YAT6(J)
      Y6J1=YAT6(J-1)
      Y7J=YAT7(J)
      Y7J1=YAT7(J-1)
      A2=(Y2J-Y2J1)/(XNL-XNL1)
      B2=(XNL1*Y2J-XNL*Y2J1)/(XNL1-XNL)
      A3=(Y3J-Y3J1)/(XNL-XNL1)
      B3=(XNL1*Y3J-XNL*Y3J1)/(XNL1-XNL)
      A4=(Y4J-Y4J1)/(XNL-XNL1)
      B4=(XNL1*Y4J-XNL*Y4J1)/(XNL1-XNL)
      A5=(Y5J-Y5J1)/(XNL-XNL1)
      B5=(XNL1*Y5J-XNL*Y5J1)/(XNL1-XNL)
      A6=(Y6J-Y6J1)/(XNL-XNL1)
      B6=(XNL1*Y6J-XNL*Y6J1)/(XNL1-XNL)
      A7=(Y7J-Y7J1)/(XNL-XNL1)
      B7=(XNL1*Y7J-XNL*Y7J1)/(XNL1-XNL)
      QAT2=(A2*EN+B2)*1.D-16
      QAT3=(A3*EN+B3)*1.D-18
      QAT4=(A4*EN+B4)*1.D-18
      QAT5=(A5*EN+B5)*1.D-18
      QAT6=(A6*EN+B6)*1.D-18
      QAT7=(A7*EN+B7)*1.D-18
      Q(4,I)=QAT1+QAT2+QAT3+QAT4+QAT5+QAT6+QAT7
      QATT(1,I)=Q(4,I)
#                                                               
  250 Q(5,I)=0.0     
      Q(6,I)=0.0                                                        
# V4 SUPERELASTIC  
      QIN(1,I)=0.0
      PEQIN(1,I)=0.50
      IF(KIN(1):
 == 2) PEQIN(1,I)=0.0
      IF(EN <= 0.0):
 GO TO 350
      EFAC=math.sqrt(1.0-(EIN(1)/EN))
#  DIPOLE 
      QIN(1,I)=V4DCONST*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      QIN(1,I)=QIN(1,I)*APOPV4/DEGV4*1.D-16
      IF(KIN(1):
 == 2) PEQIN(1,I)=PEQEL(2,(I-IOFFN(1)))
# V4 ANISOTROPIC
  350 QIN(2,I)=0.0
      PEQIN(2,I)=0.50
      IF(KIN(2):
 == 2) PEQIN(2,I)=0.0
      IF(EN <= EIN(2):
) GO TO 400
#  DIPOLE 
      EFAC=math.sqrt(1.0-(EIN(2)/EN))  
      ELF=EN-EIN(2)
      FWD=math.log((EN+ELF)/(EN+ELF-2.0*math.sqrt(EN*ELF)))
      BCK=math.log((EN+ELF+2.0*math.sqrt(EN*ELF))/(EN+ELF))
      QIN(2,I)=V4DCONST*math.log((1.0+EFAC)/(1.0-EFAC))/EN 
      QIN(2,I)=QIN(2,I)*APOPGS*1.D-16
      XMT=(1.5-FWD/(FWD+BCK))*Q(2,I)
      IF(KIN(2):
 == 1) PEQIN(2,I)=0.5+(QIN(2,I)-XMT)/QIN(2,I)
      IF(KIN(2):
 == 2) PEQIN(2,I)=PEQEL(2,(I-IOFFN(2)))    
# 1V1 SUPERELASTIC 
 400  QIN(3,I)=0.0
      PEQIN(3,I)=0.50
      IF(KIN(3):
 == 2) PEQIN(3,I)=0.0
      IF(EN <= 0.0):
 GO TO 450    
      IF((EN+EIN(4):
) > XV1V1(N1V1)) GO TO 425                        
      DO 410 J=2,N1V1                                                 
      IF((EN+EIN(4):
) <= XV1V1(J)) GO TO 420                             
  410 CONTINUE                                                          
      J=N1V1                                                          
  420 A=(YV1V1(J)-YV1V1(J-1))/(XV1V1(J)-XV1V1(J-1))                     
      B=(XV1V1(J-1)*YV1V1(J)-XV1V1(J)*YV1V1(J-1))/(XV1V1(J-1)-XV1V1(J))
      QIN(3,I)=(EN+EIN(4))*(A*(EN+EIN(4))+B)/EN
      GO TO 426
  425 QIN(3,I)=YV1V1(N1V1)*(XV1V1(N1V1)/(EN+EIN(4)))**2
  426 QIN(3,I)=QIN(3,I)*APOPV1/DEGV1*1.D-16 
      IF(KIN(3):
 == 2) PEQIN(3,I)=PEQEL(2,(I-IOFFN(3)))                 
# 1V1   ISOTROPIC                                                    
  450 QIN(4,I)=0.0   
      PEQIN(4,I)=0.50              
      IF(KIN(4):
 == 2) PEQIN(4,I)=0.0                                
      IF(EN <= EIN(4):
) GO TO 500 
      IF(EN > XV1V1(N1V1):
) GO TO 475                         
      DO 460 J=2,N1V1                                                
      IF(EN <= XV1V1(J):
) GO TO 470                                      
  460 CONTINUE                                                          
      J=N1V1                                                         
  470 A=(YV1V1(J)-YV1V1(J-1))/(XV1V1(J)-XV1V1(J-1))                     
      B=(XV1V1(J-1)*YV1V1(J)-XV1V1(J)*YV1V1(J-1))/(XV1V1(J-1)-XV1V1(J))
      QIN(4,I)=A*EN+B
      GO TO 476
  475 QIN(4,I)=YV1V1(N1V1)*(XV1V1(N1V1)/EN)**2 
  476 QIN(4,I)=QIN(4,I)*APOPGS*1.D-16 
      IF(KIN(4):
 == 2) PEQIN(4,I)=PEQEL(2,(I-IOFFN(4)))
#
# V3 SUPERELASTIC  
  500 QIN(5,I)=0.0
      PEQIN(5,I)=0.50
      IF(KIN(5):
 == 2) PEQIN(5,I)=0.0
      IF(EN <= 0.0):
 GO TO 550
      IF((EN+EIN(6):
) > XVBV3(N1V3)) GO TO 530
      DO 510 J=2,N1V3
      IF((EN+EIN(6):
) <= XVBV3(J)) GO TO 520
  510 CONTINUE
      J=N1V3
  520 A=(YVBV3(J)-YVBV3(J-1))/(XVBV3(J)-XVBV3(J-1))                     
      B=(XVBV3(J-1)*YVBV3(J)-XVBV3(J)*YVBV3(J-1))/(XVBV3(J-1)-XVBV3(J))
      QIN(5,I)=(EN+EIN(6))*(A*(EN+EIN(6))+B)/EN
  530 EFAC=math.sqrt(1.0-(EIN(5)/EN))
# ADD DIPOLE 
      QIN(5,I)=QIN(5,I)+V3DCONST*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      QIN(5,I)=QIN(5,I)*APOPV3/DEGV3*1.D-16
      IF(KIN(5):
 == 2) PEQIN(5,I)=PEQEL(2,(I-IOFFN(5)))
# V3 ANISOTROPIC
  550 QIN(6,I)=0.0
      PEQIN(6,I)=0.50
      IF(KIN(6):
 == 2) PEQIN(6,I)=0.0
      IF(EN <= EIN(6):
) GO TO 600
      IF(EN > XVBV3(N1V3):
) GO TO 580
      DO 560 J=2,N1V3
      IF(EN <= XVBV3(J):
) GO TO 570
  560 CONTINUE
      J=N1V3
  570 A=(YVBV3(J)-YVBV3(J-1))/(XVBV3(J)-XVBV3(J-1))                     
      B=(XVBV3(J-1)*YVBV3(J)-XVBV3(J)*YVBV3(J-1))/(XVBV3(J-1)-XVBV3(J)) 
      QIN(6,I)=(A*EN+B)
# ADD DIPOLE PART
  580 EFAC=math.sqrt(1.0-(EIN(6)/EN))   
      ADIP=V3DCONST*math.log((1.0+EFAC)/(1.0-EFAC))/EN     
      ELF=EN-EIN(6)
      FWD=math.log((EN+ELF)/(EN+ELF-2.0*math.sqrt(EN*ELF)))
      BCK=math.log((EN+ELF+2.0*math.sqrt(EN*ELF))/(EN+ELF))
# RATIO OF MT TO TOTAL X-SECT FOR RESONANCE PART =RAT
      XMT=((1.5-FWD/(FWD+BCK))*ADIP+RAT*QIN(6,I))*APOPGS*1.D-16         
      QIN(6,I)=(QIN(6,I)+ADIP)*APOPGS*1.D-16 
      IF(KIN(6):
 == 1) PEQIN(6,I)=0.5+(QIN(6,I)-XMT)/QIN(6,I)    
      IF(KIN(6):
 == 2) PEQIN(6,I)=PEQEL(2,(I-IOFFN(6)))
c
# 2V1                                                         
  600 QIN(7,I)=0.0
      PEQIN(7,I)=0.50       
      IF(KIN(7):
 == 2) PEQIN(7,I)=0.0                                 
      IF(EN <= EIN(7):
) GO TO 650
      IF(EN > XV2V1(N2V1):
) GO TO 621                               
      DO 610 J=2,N2V1                                                 
      IF(EN <= XV2V1(J):
) GO TO 620                                      
  610 CONTINUE                                                          
      J=N2V1                                                          
  620 A=(YV2V1(J)-YV2V1(J-1))/(XV2V1(J)-XV2V1(J-1))                     
      B=(XV2V1(J-1)*YV2V1(J)-XV2V1(J)*YV2V1(J-1))/(XV2V1(J-1)-XV2V1(J))
      QIN(7,I)=(A*EN+B)*1.D-16
      GO TO 630 
# SCALE BY 1/E**2 ABOVE XV2V1(N2V1) EV
  621 QIN(7,I)=YV2V1(N2V1)*(XV2V1(N2V1)/EN)**2*1.D-16 
  630 IF(KIN(7) == 2) PEQIN(7,I)=PEQEL(2,(I-IOFFN(7))) 
# 3V1                                       
  650 QIN(8,I)=0.0    
      PEQIN(8,I)=0.50                
      IF(KIN(8):
 == 2) PEQIN(8,I)=0.00                                  
      IF(EN <= EIN(8):
) GO TO 680     
      IF(EN > XV3V1(N3V1):
) GO TO 675                               
      DO 660 J=2,N3V1                                                
      IF(EN <= XV3V1(J):
) GO TO 670                                      
  660 CONTINUE                                                          
      J=N3V1                                                          
  670 A=(YV3V1(J)-YV3V1(J-1))/(XV3V1(J)-XV3V1(J-1))                     
      B=(XV3V1(J-1)*YV3V1(J)-XV3V1(J)*YV3V1(J-1))/(XV3V1(J-1)-XV3V1(J))
      QIN(8,I)=(A*EN+B)*1.D-16
      GO TO 676
# SCALE BY 1/E**2 ABOBE XV3V1(N3V1) EV
  675 QIN(8,I)=YV3V1(N3V1)*(XV3V1(N3V1)/EN)**2*1.D-16
  676 IF(KIN(8) == 2) PEQIN(8,I)=PEQEL(2,(I-IOFFN(8)))
# 4V1                                   
  680 QIN(9,I)=0.0
      PEQIN(9,I)=0.50  
      IF(KIN(9):
 == 2) PEQIN(9,I)=0.0             
      IF(EN <= EIN(9):
) GO TO 685    
      IF(EN > XV4V1(N4V1):
) GO TO 683
      DO 681 J=2,N4V1                                                 
      IF(EN <= XV4V1(J):
) GO TO 682                                      
  681 CONTINUE
      J=N4V1                                                          
  682 A=(YV4V1(J)-YV4V1(J-1))/(XV4V1(J)-XV4V1(J-1))                     
      B=(XV4V1(J-1)*YV4V1(J)-XV4V1(J)*YV4V1(J-1))/(XV4V1(J-1)-XV4V1(J)) 
      QIN(9,I)=(A*EN+B)*1.D-16   
      GO TO 684
# SCALE BY 1/E**2 ABOVE XV4V1(N4V1) EV
  683 QIN(9,I)=YV4V1(N4V1)*(XV4V1(N4V1)/EN)**2*1.D-16
  684 IF(KIN(9) == 2) PEQIN(9,I)=PEQEL(2,(I-IOFFN(9)))
# 5V1                                   
  685 QIN(10,I)=0.0                   
      PEQIN(10,I)=0.50 
      IF(KIN(10):
 == 2) PEQIN(10,I)=0.0                                 
      IF(EN <= EIN(10):
) GO TO 700    
      IF(EN > XV5V1(N5V1):
) GO TO 688                                
      DO 686 J=2,N5V1                                                 
      IF(EN <= XV5V1(J):
) GO TO 687                                      
  686 CONTINUE                                                          
      J=N5V1                                                          
  687 A=(YV5V1(J)-YV5V1(J-1))/(XV5V1(J)-XV5V1(J-1))                     
      B=(XV5V1(J-1)*YV5V1(J)-XV5V1(J)*YV5V1(J-1))/(XV5V1(J-1)-XV5V1(J)) 
      QIN(10,I)=(A*EN+B)*1.D-16 
      GO TO 689
# SCALE BY 1/E**2 ABOVE XV5V1(N5V1) EV
  688 QIN(10,I)=YV5V1(N5V1)*(XV5V1(N5V1)/EN)**2*1.D-16
  689 IF(KIN(10) == 2) PEQIN(10,I)=PEQEL(2,(I-IOFFN(10)))
# TRIPLET AT 9.6EV
  700 QIN(11,I)=0.0
      PEQIN(11,I)=0.0
      IF(EN <= EIN(11):
) GO TO 705
      IF(EN > XTR1(NTRP1):
) GO TO 703
      DO 701 J=2,NTRP1
      IF(EN <= XTR1(J):
) GO TO 702
  701 CONTINUE
      J=NTRP1
  702 A=(YTR1(J)-YTR1(J-1))/(XTR1(J)-XTR1(J-1))
      B=(XTR1(J-1)*YTR1(J)-XTR1(J)*YTR1(J-1))/(XTR1(J-1)-XTR1(J))
      QIN(11,I)=(A*EN+B)*1.D-16*AMPTR1
      GO TO 704
# SCALE BY 1/E**2 ABOVE XTR1(NTRP1) EV
  703 QIN(11,I)=YTR1(NTRP1)*(XTR1(NTRP1)/EN)**2*1.D-16*AMPTR1
  704 IF(EN <= (3.0*EIN(11))) GO TO 705
      PEQIN(11,I)=PEQEL(2,(I-IOFFN(11)))                                
# SINGLET DISSOCIATION AT 10.0 EV USE BEF SCALING WITH F=0.0443
  705 QIN(12,I)=0.0
      PEQIN(12,I)=0.0
      IF(EN <= EIN(12):
) GO TO 706
      QIN(12,I)=0.0443/(EIN(12)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(12)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(12)+E(3))*1.025
      IF(QIN(12,I):
 < 0.0) QIN(12,I)=0.0       
      IF(EN <= (3.0*EIN(12):
)) GO TO 706
      PEQIN(12,I)=PEQEL(2,(I-IOFFN(12)))
# SINGLET DISSOCIATION AT 10.5 EV USE BEF SCALING WITH F=0.0642
  706 QIN(13,I)=0.0
      PEQIN(13,I)=0.0
      IF(EN <= EIN(13):
) GO TO 707
      QIN(13,I)=0.0642/(EIN(13)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(13)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(13)+E(3))*1.024
      IF(QIN(13,I):
 < 0.0) QIN(13,I)=0.0       
      IF(EN <= (3.0*EIN(13):
)) GO TO 707
      PEQIN(13,I)=PEQEL(2,(I-IOFFN(13)))
# TRIPLET DISSOCIATION AT 10.9 EV  
  707 QIN(14,I)=0.0
      PEQIN(14,I)=0.0
      IF(EN <= EIN(14):
) GO TO 712
      IF(EN > XTR2(NTRP2):
) GO TO 710
      DO 708 J=2,NTRP2
      IF(EN <= XTR2(J):
) GO TO 709
  708 CONTINUE
      J=NTRP2
  709 A=(YTR2(J)-YTR2(J-1))/(XTR2(J)-XTR2(J-1))
      B=(XTR2(J-1)*YTR2(J)-XTR2(J)*YTR2(J-1))/(XTR2(J-1)-XTR2(J))
      QIN(14,I)=(A*EN+B)*1.D-16*AMPTR2
      GO TO 711
# SCALE BY 1/E**2 ABOVE XTR2(NTRP2) EV
  710 QIN(14,I)=YTR2(NTRP2)*(XTR2(NTRP2)/EN)**2*1.D-16*AMPTR2
  711 IF(EN <= (3.0*EIN(14))) GO TO 712
      PEQIN(14,I)=PEQEL(2,(I-IOFFN(14)))                               
# SINGLET DISSOCIATION AT 11.0 EV USE BEF SCALING WITH F=0.1839
  712 QIN(15,I)=0.0
      PEQIN(15,I)=0.0
      IF(EN <= EIN(15):
) GO TO 713
      QIN(15,I)=0.1839/(EIN(15)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(15)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(15)+E(3))*1.023
      IF(QIN(15,I):
 < 0.0) QIN(15,I)=0.0       
      IF(EN <= (3.0*EIN(15):
)) GO TO 713
      PEQIN(15,I)=PEQEL(2,(I-IOFFN(15)))
# SINGLET DISSOCIATION AT 11.5 EV USE BEF SCALING WITH F=0.1073
  713 QIN(16,I)=0.0
      PEQIN(16,I)=0.0
      IF(EN <= EIN(16):
) GO TO 714
      QIN(16,I)=0.1073/(EIN(16)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(16)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(16)+E(3))*1.022
      IF(QIN(16,I):
 < 0.0) QIN(16,I)=0.0       
      IF(EN <= (3.0*EIN(16):
)) GO TO 714
      PEQIN(16,I)=PEQEL(2,(I-IOFFN(16)))
# SINGLET DISSOCIATION AT 12.0 EV USE BEF SCALING WITH F=0.0880
  714 QIN(17,I)=0.0
      PEQIN(17,I)=0.0
      IF(EN <= EIN(17):
) GO TO 715
      QIN(17,I)=0.0880/(EIN(17)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(17)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(17)+E(3))*1.021
      IF(QIN(17,I):
 < 0.0) QIN(17,I)=0.0       
      IF(EN <= (3.0*EIN(17):
)) GO TO 715
      PEQIN(17,I)=PEQEL(2,(I-IOFFN(17)))
# SINGLET DISSOCIATION AT 12.5 EV USE BEF SCALING WITH F=0.0304
  715 QIN(18,I)=0.0
      PEQIN(18,I)=0.0
      IF(EN <= EIN(18):
) GO TO 716
      QIN(18,I)=0.0304/(EIN(18)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(18)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(18)+E(3))*1.020
      IF(QIN(18,I):
 < 0.0) QIN(18,I)=0.0       
      IF(EN <= (3.0*EIN(18):
)) GO TO 716
      PEQIN(18,I)=PEQEL(2,(I-IOFFN(18)))
# SINGLET DISSOCIATION AT 13.0 EV USE BEF SCALING WITH F=0.0648
# ION PAIR FORMATION  F- + SF5+
  716 QIN(19,I)=0.0
      PEQIN(19,I)=0.0
      IF(EN <= EIN(19):
) GO TO 717
      QIN(19,I)=0.0648/(EIN(19)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(19)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(19)+E(3))*1.019
      IF(QIN(19,I):
 < 0.0) QIN(19,I)=0.0       
      IF(EN <= (3.0*EIN(19):
)) GO TO 717
      PEQIN(19,I)=PEQEL(2,(I-IOFFN(19)))
# SINGLET DISSOCIATION AT 13.5 EV USE BEF SCALING WITH F=0.1067
  717 QIN(20,I)=0.0
      PEQIN(20,I)=0.0
      IF(EN <= EIN(20):
) GO TO 718
      QIN(20,I)=0.1067/(EIN(20)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(20)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(20)+E(3))*1.019
      IF(QIN(20,I):
 < 0.0) QIN(20,I)=0.0       
      IF(EN <= (3.0*EIN(20):
)) GO TO 718
      PEQIN(20,I)=PEQEL(2,(I-IOFFN(20)))
# SINGLET DISSOCIATION AT 14.0 EV USE BEF SCALING WITH F=0.1047
  718 QIN(21,I)=0.0
      PEQIN(21,I)=0.0
      IF(EN <= EIN(21):
) GO TO 719
      QIN(21,I)=0.1047/(EIN(21)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(21)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(21)+E(3))*1.018
      IF(QIN(21,I):
 < 0.0) QIN(21,I)=0.0       
      IF(EN <= (3.0*EIN(21):
)) GO TO 719
      PEQIN(21,I)=PEQEL(2,(I-IOFFN(21)))
# TRIPLET DISSOCIATION  AT 14.4 EV
  719 QIN(22,I)=0.0
      PEQIN(2,I)=0.0
      IF(EN <= EIN(22):
) GO TO 724
      IF(EN > XTR3(NTRP3):
) GO TO 722
      DO 720 J=2,NTRP3
      IF(EN <= XTR3(J):
) GO TO 721
  720 CONTINUE
      J=NTRP3
  721 A=(YTR3(J)-YTR3(J-1))/(XTR3(J)-XTR3(J-1))
      B=(XTR3(J-1)*YTR3(J)-XTR3(J)*YTR3(J-1))/(XTR3(J-1)-XTR3(J))
      QIN(22,I)=(A*EN+B)*1.D-16*AMPTR3
      GO TO 723
# SCALE BY 1/E**2 ABOVE XTR3(NTRP3) EV
  722 QIN(22,I)=YTR3(NTRP3)*(XTR3(NTRP3)/EN)**2*1.D-16*AMPTR3
  723 IF(EN <= (3.0*EIN(22))) GO TO 724
      PEQIN(22,I)=PEQEL(2,(I-IOFFN(22)))                               
# SINGLET DISSOCIATION AT 14.5 EV USE BEF SCALING WITH F=0.1211
  724 QIN(23,I)=0.00
      PEQIN(23,I)=0.0
      IF(EN <= EIN(23):
) GO TO 725
      QIN(23,I)=0.01211/(EIN(23)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(23)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(23)+E(3))*1.017
      IF(QIN(23,I):
 < 0.0) QIN(23,I)=0.0       
      IF(EN <= (3.0*EIN(23):
)) GO TO 725
      PEQIN(23,I)=PEQEL(2,(I-IOFFN(23)))
# SINGLET DISSOCIATION AT 15.0 EV USE BEF SCALING WITH F=0.2225
  725 QIN(24,I)=0.0
      PEQIN(24,I)=0.0
      IF(EN <= EIN(24):
) GO TO 726
      QIN(24,I)=0.2225/(EIN(24)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(24)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(24)+E(3))*1.017
      IF(QIN(24,I):
 < 0.0) QIN(24,I)=0.0       
      IF(EN <= (3.0*EIN(24):
)) GO TO 726
      PEQIN(24,I)=PEQEL(2,(I-IOFFN(24)))
# SINGLET DISSOCIATION AT 15.5 EV USE BEF SCALING WITH F=0.2731
  726 QIN(25,I)=0.0
      PEQIN(25,I)=0.0
      IF(EN <= EIN(25):
) GO TO 727
      QIN(25,I)=0.2731/(EIN(25)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(25)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(25)+E(3))*1.016
      IF(QIN(25,I):
 < 0.0) QIN(25,I)=0.0       
      IF(EN <= (3.0*EIN(25):
)) GO TO 727
      PEQIN(25,I)=PEQEL(2,(I-IOFFN(25)))
# SINGLET DISSOCIATION AT 16.0 EV USE BEF SCALING WITH F=0.1514
  727 QIN(26,I)=0.0
      PEQIN(26,I)=0.0
      IF(EN <= EIN(26):
) GO TO 728
      QIN(26,I)=0.1514/(EIN(26)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(26)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(26)+E(3))*1.016
      IF(QIN(26,I):
 < 0.0) QIN(26,I)=0.0       
      IF(EN <= (3.0*EIN(26):
)) GO TO 728
      PEQIN(26,I)=PEQEL(2,(I-IOFFN(26)))
# SINGLET DISSOCIATION AT 16.5 EV USE BEF SCALING WITH F=0.1831
  728 QIN(27,I)=0.0
       PEQIN(27,I)=0.0
      IF(EN <= EIN(27):
) GO TO 729
      QIN(27,I)=0.1831/(EIN(27)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(27)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(27)+E(3))*1.015
      IF(QIN(27,I):
 < 0.0) QIN(27,I)=0.0       
      IF(EN <= (3.0*EIN(27):
)) GO TO 729
      PEQIN(27,I)=PEQEL(2,(I-IOFFN(27)))
# SINGLET DISSOCIATION AT 17.00 EV USE BEF SCALING WITH F=0.1678
  729 QIN(28,I)=0.0
      PEQIN(28,I)=0.0
      IF(EN <= EIN(28):
) GO TO 730
      QIN(28,I)=0.1678/(EIN(28)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(28)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(28)+E(3))*1.015
      IF(QIN(28,I):
 < 0.0) QIN(28,I)=0.0       
      IF(EN <= (3.0*EIN(28):
)) GO TO 730
      PEQIN(28,I)=PEQEL(2,(I-IOFFN(28)))
# SINGLET DISSOCIATION AT 17.5 EV USE BEF SCALING WITH F=0.1098
  730 QIN(29,I)=0.0
      PEQIN(29,I)=0.0
      IF(EN <= EIN(29):
) GO TO 731
      QIN(29,I)=0.1098/(EIN(29)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(29)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(29)+E(3))*1.014
      IF(QIN(29,I):
 < 0.0) QIN(29,I)=0.0       
      IF(EN <= (3.0*EIN(29):
)) GO TO 731
      PEQIN(29,I)=PEQEL(2,(I-IOFFN(29)))
# SINGLET DISSOCIATION AT 18.0 EV USE BEF SCALING WITH F=0.0623
  731 QIN(30,I)=0.0
      PEQIN(30,I)=0.0
      IF(EN <= EIN(30):
) GO TO 732
      QIN(30,I)=0.0623/(EIN(30)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(30)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(30)+E(3))*1.014
      IF(QIN(30,I):
 < 0.0) QIN(30,I)=0.0       
      IF(EN <= (3.0*EIN(30):
)) GO TO 732
      PEQIN(30,I)=PEQEL(2,(I-IOFFN(30)))
# SINGLET DISSOCIATION AT 18.5 EV USE BEF SCALING WITH F=0.0361
  732 QIN(31,I)=0.0
      PEQIN(31,I)=0.0
      IF(EN <= EIN(31):
) GO TO 733
      QIN(31,I)=0.0361/(EIN(31)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(31)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(31)+E(3))*1.014
      IF(QIN(31,I):
 < 0.0) QIN(31,I)=0.0       
      IF(EN <= (3.0*EIN(31):
)) GO TO 733
      PEQIN(31,I)=PEQEL(2,(I-IOFFN(31)))
# SINGLET DISSOCIATION AT 19.0 EV USE BEF SCALING WITH F=0.0107
  733 QIN(32,I)=0.0
      PEQIN(32,I)=0.0
      IF(EN <= EIN(32):
) GO TO 734
      QIN(32,I)=0.0107/(EIN(32)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(32)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(32)+E(3))*1.013
      IF(QIN(32,I):
 < 0.0) QIN(32,I)=0.0       
      IF(EN <= (3.0*EIN(32):
)) GO TO 734
      PEQIN(32,I)=PEQEL(2,(I-IOFFN(32)))
# SINGLET DISSOCIATION AT 19.5 EV USE BEF SCALING WITH F=0.0129
  734 QIN(33,I)=0.0
      PEQIN(33,I)=0.0
      IF(EN <= EIN(33):
) GO TO 735
      QIN(33,I)=0.0129/(EIN(33)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(33)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(33)+E(3))*1.013
      IF(QIN(33,I):
 < 0.0) QIN(33,I)=0.0       
      IF(EN <= (3.0*EIN(33):
)) GO TO 735
      PEQIN(33,I)=PEQEL(2,(I-IOFFN(33)))
# SINGLET DISSOCIATION AT 20.0 EV USE BEF SCALING WITH F=0.0053
  735 QIN(34,I)=0.0
      PEQIN(34,I)=0.0
      IF(EN <= EIN(34):
) GO TO 736
      QIN(34,I)=0.0053/(EIN(34)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(34)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(34)+E(3))*1.013
      IF(QIN(34,I):
 < 0.0) QIN(34,I)=0.0       
      IF(EN <= (3.0*EIN(34):
)) GO TO 736
      PEQIN(34,I)=PEQEL(2,(I-IOFFN(34)))
# SINGLET DISSOCIATION AT 23.0 EV USE BEF SCALING WITH F=0.029
  736 QIN(35,I)=0.0
      PEQIN(35,I)=0.0
      IF(EN <= EIN(35):
) GO TO 737
      QIN(35,I)=0.0290/(EIN(35)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(35)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(35)+E(3))*1.02
      IF(QIN(35,I):
 < 0.0) QIN(35,I)=0.0       
      IF(EN <= (3.0*EIN(35):
)) GO TO 737
      PEQIN(35,I)=PEQEL(2,(I-IOFFN(35)))
# LOAD BREMSSTRAHLUNG X-SECTIONS
  737 QIN(36,I)=0.0
      QIN(37,I)=0.0
      IF(EN <= 1000.):
 GO TO 800
      DO 780 J=2,NBREM
      IF(EN <= EBRM(J):
) GO TO 790
  780 CONTINUE
      J=NBREM
  790 A=(math.log(Z16T(J))-math.log(Z16T(J-1)))/(EBRM(J)-EBRM(J-1))
      B=(math.log(Z16T(J))*EBRM(J-1)-math.log(Z16T(J-1))*EBRM(J))/
     /(EBRM(J-1)-EBRM(J))
      A1=(math.log(Z9T(J))-math.log(Z9T(J-1)))/(EBRM(J)-EBRM(J-1))
      B1=(math.log(Z9T(J))*EBRM(J-1)-math.log(Z9T(J-1))*EBRM(J))/
     /(EBRM(J-1)-EBRM(J))
      QIN(36,I)=math.exp(A*EN+B)*1.D-24
      QIN(37,I)=math.exp(A1*EN+B1)*6.D-24
  800 CONTINUE
#     WRITE(6,881) EN
# 881 FORMAT('EN=',D14.6)
#     WRITE(6,882) QIN(1,I),QIN(2,I),QIN(3,I),QIN(4,I),QIN(5,I)
#     WRITE(6,882) QIN(6,I),QIN(7,I),QIN(8,I),QIN(9,I),QIN(10,I)
#     WRITE(6,882) QIN(11,I),QIN(12,I),QIN(13,I),QIN(14,I),QIN(15,I)
#     WRITE(6,882) QIN(16,I),QIN(17,I),QIN(18,I),QIN(19,I),QIN(20,I)
#     WRITE(6,882) QIN(21,I),QIN(22,I),QIN(23,I),QIN(24,I),QIN(25,I)
#     WRITE(6,882) QIN(26,I),QIN(27,I),QIN(28,I),QIN(29,I),QIN(30,I)
#     WRITE(6,882) QIN(31,I),QIN(32,I),QIN(33,I),QIN(34,I),QIN(35,I)
# 882 FORMAT(' QIN ',5D12.4)
#     WRITE(6,883) Q(2,I),Q(3,I),Q(4,I),Q(5,I)
# 883 FORMAT(' Q 2 3 4 5',4D12.4)
#     WRITE(6,884) QION(1,I),QION(2,I),QION(3,I)
# 884 FORMAT('QION 1 2 3 ',3D12.4)
#
      QSUP=QIN(1,I)+QIN(3,I)+QIN(5,I)
      QVIB=QIN(2,I)+QIN(4,I)+QIN(6,I)+QIN(7,I)+QIN(8,I)+QIN(9,I)+
     /QIN(10,I)
      QSING=0.0
      DO 888 NPT=11,35
  888 QSING=QSING+QIN(NPT,I)
      QTRIP=QIN(11,I)+QIN(14,I)+QIN(22,I)
      QSING=QSING-QTRIP
      QATTA=Q(4,I)
      QIONS=0.0
      DO 889 NPT=1,NION
  889 QIONS=QIONS+QION(NPT,I)      
      QTOT=Q(2,I)+Q(4,I)+QSUP+QVIB+QSING+QTRIP                   
#     WRITE(6,767) EN,QTOT,QATTA,QSUP,QVIB,QSING,QTRIP,QIONS,Q(2,I),QMOM
#767  FORMAT(' EN=',F12.4,' QTOT=',D12.3,' QATT=',D12.3,' QSUP=',D12.3,/
#    /,' QVIB=',D12.3,' QSING=',D12.3,' QTRIP=',D12.3,' QION=',D12.3,/,'
#    / QELAS=',D12.3,' QELMOM=',D12.3,/)
# 
 1000 CONTINUE
#  SAVE COMPUTE TIME
      DO 1010 K=1,NIN
      IF(EFINAL <= EIN(K):
) :
       NIN=K-1
       GO TO 1011
      # endIF
 1010 CONTINUE
 1011 CONTINUE
#     IF(EFINAL > 1000.) NIN=37
#
      RETURN
      # end     
      def GAS31(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)  
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)        
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]     
      DIMENSION XEL(25),YEL(25),XVIBH(19),YVIBH(19),XION(47),YION(47),
     /XATT(30),YATT(30),XEXC1(18),YEXC1(18)
      DIMENSION ELEV[120],AKL(120),AJL(120),PJ(120)
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME 
# J VALUES OF FIRST 120 LEVELS
      DATA AJL/0.0,1.0,1.0,2.0,2.0,2.0,3.0,3.0,3.0,3.0,
     /4.0,4.0,4.0,4.0,4.0,5.0,5.0,5.0,5.0,5.0,   
     /5.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,7.0,7.0,
     /7.0,7.0,7.0,7.0,7.0,7.0,8.0,8.0,8.0,8.0,
     /8.0,8.0,8.0,8.0,8.0,9.0,9.0,9.0,9.0,9.0,
     /9.0,9.0,9.0,9.0,9.0,10.,10.,10.,10.,10.,
     /10.,10.,10.,10.,10.,10.,11.,11.,11.,11.,
     /11.,11.,11.,11.,11.,11.,11.,11.,12.,12.,
     /12.,12.,12.,12.,12.,12.,12.,12.,12.,12.,
     /12.,13.,13.,13.,13.,13.,13.,13.,13.,13.,
     /13.,13.,13.,13.,13.,14.,14.,14.,14.,14.,
     /14.,14.,14.,14.,14.,14.,14.,14.,14.,14./   
# K VALUES OF FIRST 120 LEVELS
      DATA AKL/0.0,0.0,1.0,0.0,1.0,2.0,0.0,1.0,2.0,3.0,    
     /0.0,1.0,2.0,3.0,4.0,0.0,1.0,2.0,3.0,4.0,
     /5.0,0.0,1.0,2.0,3.0,4.0,5.0,6.0,0.0,1.0,
     /2.0,3.0,4.0,5.0,6.0,7.0,0.0,1.0,2.0,3.0,
     /4.0,5.0,6.0,7.0,8.0,0.0,1.0,2.0,3.0,4.0,
     /5.0,6.0,7.0,8.0,9.0,0.0,1.0,2.0,3.0,4.0,
     /5.0,6.0,7.0,8.0,9.0,10.,0.0,1.0,2.0,3.0,  
     /4.0,5.0,6.0,7.0,8.0,9.0,10.,11.,0.0,1.0,
     /2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.,11.,
     /12.,0.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,
     /9.0,10.,11.,12.,13.,0.0,1.0,2.0,3.0,4.0,
     /5.0,6.0,7.0,8.0,9.0,10.,11.,12.,13.,14./   
# (ELASTIC + ROTATIONAL)  MOMENTUM TRANSFER                                
      DATA XEL/.0001,.001,0.01,0.03,0.10,0.40,1.00,1.50,2.00,2.75,
     /3.50,5.00,7.50,10.0,12.0,15.0,20.0,30.0,60.0,100.,                
     /200.0,500.0,1000.0,10000.,100000./
      DATA YEL/156000.,15600.,1560.,520.,125.,19.5,5.20,3.25,3.00,2.80, 
     /3.20,4.50,6.00,7.00,7.00,6.80,6.50,5.50,2.90,1.55,
     /0.70,0.15,.075,.007,.0007/  
# RESONACE SHAPE def FOR VIBRATIONS                                       
      DATA XVIBH/0.00,2.00,3.00,4.00,5.00,6.00,7.00,7.30,7.60,8.00,
     /9.00,10.0,12.0,15.0,20.0,100.,1000.,10000.,100000./               
      DATA YVIBH/0.00,0.00,0.01,0.06,0.16,0.39,0.59,0.60,0.59,0.42,     
     /0.31,0.16,0.06,0.01,.005,.001,.0001,.00001,.000001/  
# IONISATION                  
      DATA XION/10.16,11.6,12.5,14.0,16.0,18.0,20.0,25.0,30.0,35.0,     
     /40.0,45.0,50.0,55.0,60.0,65.0,70.0,80.0,90.0,100.,
     /120.,140.,160.,180.,200.,240.,280.,320.,360.,400.,
     /440.,500.,550.,600.,650.,700.,750.,800.,900.,1000.,
     /2000.,4000.,6000.,10000.,20000.,40000.,100000./                  
      DATA YION/0.00,.067,0.16,0.29,0.46,0.63,0.80,1.25,1.65,2.02,     
     /2.38,2.62,2.78,2.87,2.94,2.99,3.02,3.05,3.04,3.01,
     /2.91,2.80,2.70,2.60,2.50,2.30,2.13,1.98,1.85,1.74,
     /1.64,1.50,1.42,1.34,1.27,1.21,1.16,1.12,1.05,0.99,
     /0.53,0.30,0.21,0.14,.074,.040,.017/
# ATTACHMENT     
      DATA XATT/4.60,4.75,5.00,5.25,5.50,5.65,5.75,6.00,6.25,6.50,      
     /6.75,7.00,7.50,8.00,8.50,9.00,9.50,10.0,10.5,11.0,
     /11.5,12.0,12.5,13.0,14.0,16.0,100.,1000.,10000.,100000./          
      DATA YATT/0.00,0.15,0.63,2.04,3.33,3.66,3.60,2.82,1.65,0.84,   
     /0.36,0.12,.048,.048,.048,.081,.276,0.48,0.54,0.48,               
     /0.36,.213,.114,0.06,0.03,.003,.0003,.00003,.000003,.0000003/
# USED SINGLE LUMPED EXCITATION LEVEL AT 7 EV            
      DATA XEXC1/7.00,7.50,8.00,9.00,10.0,12.0,15.0,20.0,30.0,40.0,     
     /50.0,80.0,100.0,200.,500.0,1000.,10000.,100000./                 
      DATA YEXC1/0.00,0.24,0.48,0.96,1.32,1.80,2.28,2.85,3.10,3.25,     
     /3.35,3.20,3.00,2.40,1.35,0.72,.072,.0072/   
#                                             
      NAME='NH3        2004'                                            
# --------------------------------------------------------------------  
#  EXPERIMENTAL DATA NOT ACCURATE IN AMMONIA GAS. LACK OF GOOD QUALITY
#  TRANSVERSE DIFFUSION MEASUREMENTS.   ELECTRON SCATTERING DATA IS 
#  USED IN THE ANALYSIS AND REPRODUCES DRIFT VELOCITY AND DIFFUSION       
#  COEFFICIENTS TO AN  ACCURACY OF  3%. 
#  ATTACHMENT X-SEC FROM SHARP ET AL. 
#  USED SYMMETRIC TOP ROTATOR MODEL FOR ROTATIONAL EXCITATIONS   
#  THE FIRST 120 ROTATIONAL STATES ARE USED IN THE ANALYSIS : GROUPED 
#  INTO TRANSITIONS OF EQUAL ENERGY GIVING A TOTAL OF 28 ROTATIONAL 
#  TRANSITIONS.
#  DIPOLE ANGULAR DISTRIBUTION USED FOR ROTATIONAL EXCITATIONS.                         
# ---------------------------------------------------------------------
      NION=1 
      NATT=1
      NIN=34
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
# SET ANGULAR DISTRIBUTION FLAG FOR ROTATIONAL LEVELS    
      DO 2 J=1,NIN
      KIN(J)=0 
    2 IF(J <= 28) KIN(J)=1   
      NDATA=25                                                          
      NVIBH=19                                                          
      NIOND=47                                                         
      NATT1=30                                                          
      NEXC1=18
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(17.03056*AMU)                                     
      E(3)=10.16                                                       
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
      EOBY(1)=10.8 
#----------------------------------------------------------------------       
# AR AND BR ARE ROTATIONAL CONSTANTS FOR SYMMETRIC TOP ROTOR   
# ENERGY OF LEVEL (JK) = BR*J*(J+1) + (AR-BR)*K*K
# DBA IS DIPOLE MOMENT
# DRAT IS MOMENTUM TRANSFER TO TOTAL X-SECTION RATIO FOR DIPOLE ROTOR
#
      AR=0.0000287
      BR=0.0000453
      RY=13.60569172 
      A0=0.5291772083D-8
#   CONVERT TO EV
      AR=AR*2.0*RY
      BR=BR*2.0*RY
      DBA=0.5787
      DRAT=0.08
      DBK=8.37758*RY*(DBA*A0)**2
# ---------------------------------------------------------------------
# CALCULATE ROTATIONAL STATE POPULATION PJ(LEVEL) AT TEMPERATURE AKT
      L=1
      ELEV[1]=0.0              
      DO 6 J=1,14
      DO 6 K=1,(J+1)
      L=L+1
      AJ=DFLOAT(J)
      AK=DFLOAT(K)
      AK=AK-1.0
   6  ELEV[L]=BR*AJ*(AJ+1.0)+(AR-BR)*AK*AK
      PJ(1)=2.0
      DO 7 L=2,120
      DEG=2.0
      IF(AKL(L):
 == 1. or AKL(L) == 2. or AKL(L) == 4. or AKL(L) == 5..OR
     /.AKL(L) == 7. or AKL(L) == 8. or AKL(L) == 10. or AKL(L) == 11..OR
     /.AKL(L) == 13. or AKL(L) == 14.) DEG=1.0
    7 PJ(L)=DEG*(2.0*AJL(L)+1.0)*math.exp(-ELEV[L]/AKT)
      SUM=0.0
      DO 8 L=1,120
    8 SUM=SUM+PJ(L)
      DO 9 L=1,120
    9 PJ(L)=PJ(L)/SUM  
# ----------------------------------------------------------------------
      EIN(1)=ELEV[1]-ELEV[2]
      EIN(2)=-EIN(1)
      EIN(3)=ELEV[2]-ELEV[4]
      EIN(4)=-EIN(3)
      EIN(5)=ELEV[4]-ELEV[7]
      EIN(6)=-EIN(5)
      EIN(7)=ELEV[7]-ELEV[11]
      EIN(8)=-EIN(7)
      EIN(9)=ELEV[11]-ELEV[16]
      EIN(10)=-EIN(9)
      EIN(11)=ELEV[16]-ELEV[22]
      EIN(12)=-EIN(11)
      EIN(13)=ELEV[22]-ELEV[29]
      EIN(14)=-EIN(13)
      EIN(15)=ELEV[29]-ELEV[37]
      EIN(16)=-EIN(15)
      EIN(17)=ELEV[37]-ELEV[46]
      EIN(18)=-EIN(17)
      EIN(19)=ELEV[46]-ELEV[56]
      EIN(20)=-EIN(19)
      EIN(21)=ELEV[56]-ELEV[67]
      EIN(22)=-EIN(21)
      EIN(23)=ELEV[67]-ELEV[79]
      EIN(24)=-EIN(23)
      EIN(25)=ELEV[79]-ELEV[92]
      EIN(26)=-EIN(25)
      EIN(27)=ELEV[92]-ELEV[106]
      EIN(28)=-EIN(27)
      EIN(29)=-0.1178
      EIN(30)=0.1178                                                    
      EIN(31)=0.2013                                                    
      EIN(32)=0.4137
      EIN(33)=0.8274                                                    
      EIN(34)=7.00 
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       NH3            '
      SCRPT(3)=' IONISATION    ELOSS= 10.16   '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      SCRPT(7)=' ROT  1K-- 0K  ELOSS= -0.00247'
      SCRPT(8)=' ROT  0K-- 1K  ELOSS=  0.00247'
      SCRPT(9)=' ROT  2K-- 1K  ELOSS= -0.00493'
      SCRPT(10)=' ROT  1K-- 2K  ELOSS=  0.00493'
      SCRPT(11)=' ROT  3K-- 2K  ELOSS= -0.00740'
      SCRPT(12)=' ROT  2K-- 3K  ELOSS=  0.00740'
      SCRPT(13)=' ROT  4K-- 3K  ELOSS= -0.00986'
      SCRPT(14)=' ROT  3K-- 4K  ELOSS=  0.00986'
      SCRPT(15)=' ROT  5K-- 4K  ELOSS= -0.0123 '
      SCRPT(16)=' ROT  4K-- 5K  ELOSS=  0.0123 '
      SCRPT(17)=' ROT  6K-- 5K  ELOSS= -0.0148 '
      SCRPT(18)=' ROT  5K-- 6K  ELOSS=  0.0148 '
      SCRPT(19)=' ROT  7K-- 6K  ELOSS= -0.0173 '
      SCRPT(20)=' ROT  6K-- 7K  ELOSS=  0.0173 '
      SCRPT(21)=' ROT  8K-- 7K  ELOSS= -0.0197 '
      SCRPT(22)=' ROT  7K-- 8K  ELOSS=  0.0197 '
      SCRPT(23)=' ROT  9K-- 8K  ELOSS= -0.0222 '
      SCRPT(24)=' ROT  8K-- 9K  ELOSS=  0.0222 '
      SCRPT(25)=' ROT 10K-- 9K  ELOSS= -0.0247 '
      SCRPT(26)=' ROT  9K--10K  ELOSS=  0.0247 '
      SCRPT(27)=' ROT 11K--10K  ELOSS= -0.0271 '
      SCRPT(28)=' ROT 10K--11K  ELOSS=  0.0271 '
      SCRPT(29)=' ROT 12K--11K  ELOSS= -0.0296 '
      SCRPT(30)=' ROT 11K--12K  ELOSS=  0.0296 '
      SCRPT(31)=' ROT 13K--12K  ELOSS= -0.0320 '
      SCRPT(32)=' ROT 12K--13K  ELOSS=  0.0320 '
      SCRPT(33)=' ROT 14K--13K  ELOSS= -0.0345 '
      SCRPT(34)=' ROT 13K--14K  ELOSS=  0.0345 '
      SCRPT(35)=' VIB V2        ELOSS= -0.1178 '
      SCRPT(36)=' VIB V2        ELOSS=  0.1178 '
      SCRPT(37)=' VIB V4        ELOSS=  0.2013 '
      SCRPT(38)=' VIB V1 + V3   ELOSS=  0.4137 '
      SCRPT(39)=' VIB  HAR      ELOSS=  0.8274 '
      SCRPT(40)=' EXC           ELOSS=  7.00   '                       
      EN=-ESTEP/2.00
      APOPV2=math.exp(EIN(29)/AKT)                                    
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP 
      Q(2,I)=0.00
      IF(EN <= XEL(1):
) :
       Q(2,I)=YEL(1)*1.D-16
       GO TO 30
      # endIF
      DO 10 J=2,NDATA                                                   
      IF(EN <= XEL(J):
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA
# USE LOG INTERPOLATION BECAUSE OF RAPID CHANGE IN X-SEC
   20 YXJ=math.log(YEL(J))
      YXJ1=math.log(YEL(J-1))
      XNJ=math.log(XEL(J))
      XNJ1=math.log(XEL(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      Q(2,I)=math.exp(A*math.log(EN)+B)*1.D-16  
#                                                                       
   30 Q(3,I)=0.00                                                      
      IF(EN < E(3):
) GO TO 40                                           
      DO 31 J=2,NIOND                                                   
      IF(EN <= XION(J):
) GO TO 32                                        
   31 CONTINUE                                                          
      J=NIOND                                                      
   32 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.D-16                                            
   40 CONTINUE                                                          
#                                                                       
      Q(4,I)=0.00   
      QATT(1,I)=Q(4,I)                             
      IF(EN < XATT(1):
) GO TO 50                                        
      DO 41 J=2,NATT1                                                  
      IF(EN <= XATT(J):
) GO TO 42                                        
   41 CONTINUE                                                          
      J=NATT1                                                           
   42 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))                         
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))       
      Q(4,I)=(A*EN+B)*1.D-18  
      QATT(1,I)=Q(4,I)                    
   50 CONTINUE                                                          
      Q(5,I)=0.00                                                      
      Q(6,I)=0.00                                                      
#----------------------------------------------------------------------
# DIPOLE BORN ROTATIONAL TRANSITIONS 
# SUMMED TRANSITIONS OF EQUAL ENERGY  
#----------------------------------------------------------------------
      ENRT=math.sqrt(EN)
#  ROTATIONAL COLLISIONS (JK)
# 10-->00 
      AJ=1.0
      AJG=1.0
      AJG2=AJG*AJG
      QIN(1,I)=DBK*math.log((ENRT+math.sqrt(EN-EIN(1)))/(math.sqrt(EN-EIN(1))-ENRT))
     /*PJ(2)*AJG2/(AJG*(2.0*AJ+1.0)*EN)
      PEQIN(1,I)=0.5+(QIN(1,I)-DRAT*QIN(1,I))/QIN(1,I) 
# 00-->10
      AJ=0.0
      AJG=1.0
      AJG2=AJG*AJG
      QIN(2,I)=0.00
      IF(EN <= EIN(2):
) GO TO 60
      QIN(2,I)=DBK*math.log((ENRT+math.sqrt(EN-EIN(2)))/(ENRT-math.sqrt(EN-EIN(2))))
     /*PJ(1)*AJG2/(AJG*(2.0*AJ+1.0)*EN)
      PEQIN(2,I)=0.5+(QIN(2,I)-DRAT*QIN(2,I))/QIN(2,I)
# 20-->10  + 21-->11
   60 AJ=2.0
      AJG=2.0
      AJG2=AJG*AJG
      QIN(3,I)=DBK*math.log((ENRT+math.sqrt(EN-EIN(3)))/(math.sqrt(EN-EIN(3))-ENRT))
     /*(PJ(4)*AJG2+PJ(5)*(AJG2-1.0))/(AJG*(2.0*AJ+1.0)*EN)  
      PEQIN(3,I)=0.5+(QIN(3,I)-DRAT*QIN(3,I))/QIN(3,I)
# 10-->20 + 11-->21
      AJ=1.0
      AJG=2.0
      AJG2=AJG*AJG
      QIN(4,I)=0.00
      IF(EN <= EIN(4):
) GO TO 61
      QIN(4,I)=DBK*math.log((ENRT+math.sqrt(EN-EIN(4)))/(ENRT-math.sqrt(EN-EIN(4))))
     /*(PJ(2)*AJG2+PJ(3)*(AJG2-1.0))/(AJG*(2.0*AJ+1.0)*EN)  
      PEQIN(4,I)=0.5+(QIN(4,I)-DRAT*QIN(4,I))/QIN(4,I)
# 30-->20 + 31-->21 + 32-->22
   61 AJ=3.0
      AJG=3.0
      AJG2=AJG*AJG
      QIN(5,I)=DBK*math.log((ENRT+math.sqrt(EN-EIN(5)))/(math.sqrt(EN-EIN(5))-ENRT))
     /*(PJ(7)*AJG2+PJ(8)*(AJG2-1.0)+PJ(9)*(AJG2-4.0))/(AJG*(2.0*AJ+1.0)*
     /EN)  
      PEQIN(5,I)=0.5+(QIN(5,I)-DRAT*QIN(5,I))/QIN(5,I)
# 20-->30 + 21-->31 + 22-->32
      AJ=2.0
      AJG=3.0
      AJG2=AJG*AJG
      QIN(6,I)=0.00
      IF(EN <= EIN(6):
) GO TO 62
      QIN(6,I)=DBK*math.log((ENRT+math.sqrt(EN-EIN(6)))/(ENRT-math.sqrt(EN-EIN(6))))
     /*(PJ(4)*AJG2+PJ(5)*(AJG2-1.0)+PJ(6)*(AJG2-4.0))/(AJG*(2.0*AJ+1.0)*
     /EN)  
      PEQIN(6,I)=0.5+(QIN(6,I)-DRAT*QIN(6,I))/QIN(6,I)
# 40-->30 + 41-->31 + 42-->32 + 43-->33
   62 AJ=4.0
      AJG=4.0
      AJG2=AJG*AJG
      QIN(7,I)=DBK*math.log((ENRT+math.sqrt(EN-EIN(7)))/(math.sqrt(EN-EIN(7))-ENRT))
     /*(PJ(11)*AJG2+PJ(12)*(AJG2-1.0)+PJ(13)*(AJG2-4.0)+PJ(14)*(AJG2-9.0
     /))/(AJG*(2.0*AJ+1.0)*EN)
      PEQIN(7,I)=0.5+(QIN(7,I)-DRAT*QIN(7,I))/QIN(7,I)
# 30-->40 + 31-->41 + 32-->42 + 33-->43
      AJ=3.0
      AJG=4.0
      AJG2=AJG*AJG
      QIN(8,I)=0.00
      IF(EN <= EIN(8):
) GO TO 63
      QIN(8,I)=DBK*math.log((ENRT+math.sqrt(EN-EIN(8)))/(ENRT-math.sqrt(EN-EIN(8))))
     /*(PJ(7)*AJG2+PJ(8)*(AJG2-1.0)+PJ(9)*(AJG2-4.0)+PJ(10)*(AJG2-9.0))/
     /(AJG*(2.0*AJ+1.0)*EN)
      PEQIN(8,I)=0.5+(QIN(8,I)-DRAT*QIN(8,I))/QIN(8,I)
# 50-->40 + 51-->41 + 52-->42 + 53-->43 + 54-->44
   63 AJ=5.0
      AJG=5.0
      AJG2=AJG*AJG
      QIN(9,I)=DBK*math.log((ENRT+math.sqrt(EN-EIN(9)))/(math.sqrt(EN-EIN(9))-ENRT))
     /*(PJ(16)*AJG2+PJ(17)*(AJG2-1.0)+PJ(18)*(AJG2-4.0)+PJ(19)*(AJG2-9.0
     /)+PJ(20)*(AJG2-16.0))/(AJG*(2.0*AJ+1.0)*EN)
      PEQIN(9,I)=0.5+(QIN(9,I)-DRAT*QIN(9,I))/QIN(9,I)
# 40-->50 + 41-->51 + 42-->52 + 43-->53 + 44-->54
      AJ=4.0
      AJG=5.0
      AJG2=AJG*AJG
      QIN(10,I)=0.00
      IF(EN <= EIN(10):
) GO TO 64
      QIN(10,I)=DBK*math.log((ENRT+math.sqrt(EN-EIN(10)))/(ENRT-math.sqrt(EN-EIN(10)
     /)))*(PJ(11)*AJG2+PJ(12)*(AJG2-1.0)+PJ(13)*(AJG2-4.0)+PJ(14)*(AJG2-
     /9.0)+PJ(15)*(AJG2-16.0))/(AJG*(2.0*AJ+1.0)*EN)
      PEQIN(10,I)=0.5+(QIN(10,I)-DRAT*QIN(10,I))/QIN(10,I)
# 60-->50 + 61-->51 + 62-->52 + 63-->53 + 64-->54 + 65-->55
   64 AJ=6.0
      AJG=6.0
      AJG2=AJG*AJG
      QIN(11,I)=DBK*math.log((ENRT+math.sqrt(EN-EIN(11)))/(math.sqrt(EN-EIN(11))-
     /ENRT))*(PJ(22)*AJG2+PJ(23)*(AJG2-1.0)+PJ(24)*(AJG2-4.0)+PJ(25)*
     /(AJG2-9.0)+PJ(26)*(AJG2-16.0)+PJ(27)*(AJG2-25.0))/(AJG*(2.0*AJ+
     /1.0)*EN) 
      PEQIN(11,I)=0.5+(QIN(11,I)-DRAT*QIN(11,I))/QIN(11,I)
# 50-->60 + 51-->61 + 52-->62 + 53-->63 + 54-->64 + 55-->65
      AJ=5.0
      AJG=6.0
      AJG2=AJG*AJG
      QIN(12,I)=0.00
      IF(EN <= EIN(12):
) GO TO 65
      QIN(12,I)=DBK*math.log((ENRT+math.sqrt(EN-EIN(12)))/(ENRT-math.sqrt(EN-EIN(12)
     /)))*(PJ(16)*AJG2+PJ(17)*(AJG2-1.0)+PJ(18)*(AJG2-4.0)+PJ(19)*(AJG2-
     /9.0)+PJ(20)*(AJG2-16.0)+PJ(21)*(AJG2-25.0))/(AJG*(2.0*AJ+1.0)*EN)
      PEQIN(12,I)=0.5+(QIN(12,I)-DRAT*QIN(12,I))/QIN(12,I)
# 70-->60 + 71-->61 + 72-->62 + 73-->63 + 74-->64 + 75-->65 + 76-->66
   65 AJ=7.0
      AJG=7.0
      AJG2=AJG*AJG
      QIN(13,I)=DBK*math.log((ENRT+math.sqrt(EN-EIN(13)))/(math.sqrt(EN-EIN(13))-
     /ENRT))*(PJ(29)*AJG2+PJ(30)*(AJG2-1.0)+PJ(31)*(AJG2-4.0)+PJ(32)*
     /(AJG2-9.0)+PJ(33)*(AJG2-16.)+PJ(34)*(AJG2-25.)+PJ(35)*(AJG2-36.))/
     /(AJG*(2.0*AJ+1.0)*EN)
      PEQIN(13,I)=0.5+(QIN(13,I)-DRAT*QIN(13,I))/QIN(13,I)
# 60-->70 + 61-->71 + 62-->72 + 63-->73 + 64-->74 + 65-->75 + 66-->76
      AJ=6.0
      AJG=7.0
      AJG2=AJG*AJG
      QIN(14,I)=0.00
      IF(EN <= EIN(14):
) GO TO 66
      QIN(14,I)=DBK*math.log((ENRT+math.sqrt(EN-EIN(14)))/(ENRT-math.sqrt(EN-EIN(14)
     /)))*(PJ(22)*AJG2+PJ(23)*(AJG2-1.0)+PJ(24)*(AJG2-4.0)+PJ(25)*(AJG2-
     /9.0)+PJ(26)*(AJG2-16.0)+PJ(27)*(AJG2-25.0)+PJ(28)*(AJG2-36.))/
     /(AJG*(2.0*AJ+1.0)*EN)
      PEQIN(14,I)=0.5+(QIN(14,I)-DRAT*QIN(14,I))/QIN(14,I)
# 80-->70 +81-->71 +82-->72 +87-->73 +84-->74 +85-->75 +86-->76 +87-->77
   66 AJ=8.0
      AJG=8.0
      AJG2=AJG*AJG
      QIN(15,I)=DBK*math.log((ENRT+math.sqrt(EN-EIN(15)))/(math.sqrt(EN-EIN(15))-
     /ENRT))*(PJ(37)*AJG2+PJ(38)*(AJG2-1.0)+PJ(39)*(AJG2-4.0)+PJ(40)*
     /(AJG2-9.0)+PJ(41)*(AJG2-16.)+PJ(42)*(AJG2-25.)+PJ(43)*(AJG2-36.)+
     /PJ(44)*(AJG2-49.))/(AJG*(2.0*AJ+1.0)*EN)
      PEQIN(15,I)=0.5+(QIN(15,I)-DRAT*QIN(15,I))/QIN(15,I)
# 70-->80 +71-->81 +72-->82 +73-->83 +74-->84 +75-->85 +76-->86 +77-->87
      AJ=7.0
      AJG=8.0
      AJG2=AJG*AJG
      QIN(16,I)=0.00
      IF(EN <= EIN(16):
) GO TO 67
      QIN(16,I)=DBK*math.log((ENRT+math.sqrt(EN-EIN(16)))/(ENRT-math.sqrt(EN-EIN(16)
     /)))*(PJ(29)*AJG2+PJ(30)*(AJG2-1.0)+PJ(31)*(AJG2-4.0)+PJ(32)*(AJG2-
     /9.0)+PJ(33)*(AJG2-16.0)+PJ(34)*(AJG2-25.0)+PJ(35)*(AJG2-36.)+
     /PJ(36)*(AJG2-49.))/(AJG*(2.0*AJ+1.0)*EN)
      PEQIN(16,I)=0.5+(QIN(16,I)-DRAT*QIN(16,I))/QIN(16,I)
# 90-->80 +91-->81 +92-->82 +97-->83 +94-->84 +95-->85 +96-->86 +97-->87
# +98-->88
   67 AJ=9.0
      AJG=9.0
      AJG2=AJG*AJG
      QIN(17,I)=DBK*math.log((ENRT+math.sqrt(EN-EIN(17)))/(math.sqrt(EN-EIN(17))-
     /ENRT))*(PJ(46)*AJG2+PJ(47)*(AJG2-1.0)+PJ(48)*(AJG2-4.0)+PJ(49)*
     /(AJG2-9.0)+PJ(50)*(AJG2-16.)+PJ(51)*(AJG2-25.)+PJ(52)*(AJG2-36.)+
     /PJ(53)*(AJG2-49.)+PJ(54)*(AJG2-64.))/(AJG*(2.0*AJ+1.0)*EN)
      PEQIN(17,I)=0.5+(QIN(17,I)-DRAT*QIN(17,I))/QIN(17,I)
# 80-->90 +81-->91 +82-->92 +83-->93 +84-->94 +85-->95 +86-->96 +87-->97
# +88-->98
      AJ=8.0
      AJG=9.0
      AJG2=AJG*AJG
      QIN(18,I)=0.00
      IF(EN <= EIN(18):
) GO TO 68
      QIN(18,I)=DBK*math.log((ENRT+math.sqrt(EN-EIN(18)))/(ENRT-math.sqrt(EN-EIN(18)
     /)))*(PJ(37)*AJG2+PJ(38)*(AJG2-1.0)+PJ(39)*(AJG2-4.0)+PJ(40)*(AJG2-
     /9.0)+PJ(41)*(AJG2-16.0)+PJ(42)*(AJG2-25.0)+PJ(43)*(AJG2-36.)+
     /PJ(44)*(AJG2-49.)+PJ(45)*(AJG2-64.))/(AJG*(2.0*AJ+1.0)*EN)
      PEQIN(18,I)=0.5+(QIN(18,I)-DRAT*QIN(18,I))/QIN(18,I)
# 10 0-->90 + 10 1-->91 +10 2-->92 + 10 3 -->93 + 10 4-->94 + 10 5-->95 
# + 10 6-->96 + 10 7-->97 + 10 8 -->98 + 10 9-->99
   68 AJ=10.0
      AJG=10.0
      AJG2=AJG*AJG
      QIN(19,I)=DBK*math.log((ENRT+math.sqrt(EN-EIN(19)))/(math.sqrt(EN-EIN(19))-
     /ENRT))*(PJ(56)*AJG2+PJ(57)*(AJG2-1.0)+PJ(58)*(AJG2-4.0)+PJ(59)*
     /(AJG2-9.0)+PJ(60)*(AJG2-16.)+PJ(61)*(AJG2-25.)+PJ(62)*(AJG2-36.)+
     /PJ(63)*(AJG2-49.)+PJ(64)*(AJG2-64.)+PJ(65)*(AJG2-81.))/(AJG*(2.0*
     /AJ+1.0)*EN)
      PEQIN(19,I)=0.5+(QIN(19,I)-DRAT*QIN(19,I))/QIN(19,I)
# 90-->10 0 + 91-->10 1 + 92-->10 2 + 93-->10 3 + 94-->10 4 + 95-->10 5 
# + 96-->10 6 + 97-->10 7 + 98-->10 8 + 99-->10 9
      AJ=9.0
      AJG=10.0
      AJG2=AJG*AJG
      QIN(20,I)=0.00
      IF(EN <= EIN(20):
) GO TO 69
      QIN(20,I)=DBK*math.log((ENRT+math.sqrt(EN-EIN(20)))/(ENRT-math.sqrt(EN-EIN(20)
     /)))*(PJ(46)*AJG2+PJ(47)*(AJG2-1.0)+PJ(48)*(AJG2-4.0)+PJ(49)*(AJG2-
     /9.0)+PJ(50)*(AJG2-16.0)+PJ(51)*(AJG2-25.0)+PJ(52)*(AJG2-36.)+
     /PJ(53)*(AJG2-49.)+PJ(54)*(AJG2-64.)+PJ(55)*(AJG2-81.))/(AJG*(2.0*
     /AJ+1.0)*EN)
      PEQIN(20,I)=0.5+(QIN(20,I)-DRAT*QIN(20,I))/QIN(20,I)
# 110-->100 +111-->101 +112-->102 +113-->103 +114-->104 +115-->105
# +116-->106 +117-->107 +118-->108 +119-->109 +1110-->1010
   69 AJ=11.0
      AJG=11.0
      AJG2=AJG*AJG
      QIN(21,I)=DBK*math.log((ENRT+math.sqrt(EN-EIN(21)))/(math.sqrt(EN-EIN(21))-
     /ENRT))*(PJ(67)*AJG2+PJ(68)*(AJG2-1.0)+PJ(69)*(AJG2-4.0)+PJ(70)*
     /(AJG2-9.0)+PJ(71)*(AJG2-16.)+PJ(72)*(AJG2-25.)+PJ(73)*(AJG2-36.)+
     /PJ(74)*(AJG2-49.)+PJ(75)*(AJG2-64.)+PJ(76)*(AJG2-81.)+PJ(77)*(AJG2
     /-100.))/(AJG*(2.0*AJ+1.0)*EN)
      PEQIN(21,I)=0.5+(QIN(21,I)-DRAT*QIN(21,I))/QIN(21,I)
# 100-->110 +101-->111 +102-->112 +103-->113 +104-->114 +105-->115  
# +106-->116 +107-->117 +108-->118 +109-->119 +1010-->1110
      AJ=10.0
      AJG=11.0
      AJG2=AJG*AJG
      QIN(22,I)=0.00
      IF(EN <= EIN(22):
) GO TO 70
      QIN(22,I)=DBK*math.log((ENRT+math.sqrt(EN-EIN(22)))/(ENRT-math.sqrt(EN-EIN(22)
     /)))*(PJ(56)*AJG2+PJ(57)*(AJG2-1.0)+PJ(58)*(AJG2-4.0)+PJ(59)*(AJG2-
     /9.0)+PJ(60)*(AJG2-16.0)+PJ(61)*(AJG2-25.0)+PJ(62)*(AJG2-36.)+
     /PJ(63)*(AJG2-49.)+PJ(64)*(AJG2-64.)+PJ(65)*(AJG2-81.)+PJ(66)*(AJG2
     /-100.))/(AJG*(2.0*AJ+1.0)*EN)
      PEQIN(22,I)=0.5+(QIN(22,I)-DRAT*QIN(22,I))/QIN(22,I)
# 120-->110 +121-->111 +122-->112 +123-->113 +124-->114 +125-->115
# +126-->116 +127-->117 +128-->118 +129-->119 +1210-->1110 +1211-->1111
   70 AJ=12.0
      AJG=12.0
      AJG2=AJG*AJG
      QIN(23,I)=DBK*math.log((ENRT+math.sqrt(EN-EIN(23)))/(math.sqrt(EN-EIN(23))-
     /ENRT))*(PJ(79)*AJG2+PJ(80)*(AJG2-1.0)+PJ(81)*(AJG2-4.0)+PJ(82)*
     /(AJG2-9.0)+PJ(83)*(AJG2-16.)+PJ(84)*(AJG2-25.)+PJ(85)*(AJG2-36.)+
     /PJ(86)*(AJG2-49.)+PJ(87)*(AJG2-64.)+PJ(88)*(AJG2-81.)+PJ(89)*(AJG2
     /-100.)+PJ(90)*(AJG2-121.))/(AJG*(2.0*AJ+1.0)*EN)
      PEQIN(23,I)=0.5+(QIN(23,I)-DRAT*QIN(23,I))/QIN(23,I)
# 110-->120 +111-->121 +112-->122 +113-->123 +114-->124 +115-->125  
# +116-->126 +117-->127 +118-->128 +119-->129 +1110-->1210 +1111-->1211
      AJ=11.0
      AJG=12.0
      AJG2=AJG*AJG
      QIN(24,I)=0.00
      IF(EN <= EIN(24):
) GO TO 71
      QIN(24,I)=DBK*math.log((ENRT+math.sqrt(EN-EIN(24)))/(ENRT-math.sqrt(EN-EIN(24)
     /)))*(PJ(67)*AJG2+PJ(68)*(AJG2-1.0)+PJ(69)*(AJG2-4.0)+PJ(70)*(AJG2-
     /9.0)+PJ(71)*(AJG2-16.0)+PJ(72)*(AJG2-25.0)+PJ(73)*(AJG2-36.)+
     /PJ(74)*(AJG2-49.)+PJ(75)*(AJG2-64.)+PJ(76)*(AJG2-81.)+PJ(77)*(AJG2
     /-100.)+PJ(78)*(AJG2-121.))/(AJG*(2.0*AJ+1.0)*EN)
      PEQIN(24,I)=0.5+(QIN(24,I)-DRAT*QIN(24,I))/QIN(24,I)
# 130-->120 +131-->121 +132-->122 +133-->123 +134-->124 +135-->125
# +136-->126 +137-->127 +138-->128 +139-->129 +1310-->1210 +1311-->1211
# +1312-->1212
   71 AJ=13.0
      AJG=13.0
      AJG2=AJG*AJG
      QIN(25,I)=DBK*math.log((ENRT+math.sqrt(EN-EIN(25)))/(math.sqrt(EN-EIN(25))-
     /ENRT))*(PJ(92)*AJG2+PJ(93)*(AJG2-1.0)+PJ(94)*(AJG2-4.0)+PJ(95)*
     /(AJG2-9.0)+PJ(96)*(AJG2-16.)+PJ(97)*(AJG2-25.)+PJ(98)*(AJG2-36.)+
     /PJ(99)*(AJG2-49.)+PJ(100)*(AJG2-64.)+PJ(101)*(AJG2-81.)+PJ(102)*
     /(AJG2-100.)+PJ(103)*(AJG2-121.)+PJ(104)*(AJG2-144.))/(AJG*
     /(2.0*AJ+1.0)*EN)
      PEQIN(25,I)=0.5+(QIN(25,I)-DRAT*QIN(25,I))/QIN(25,I)
# 120-->130 +121-->131 +122-->132 +123-->133 +124-->134 +125-->135  
# +126-->136 +127-->137 +128-->138 +129-->139 +1210-->1310 +1211-->1311
# +1212-->1312
      AJ=12.0
      AJG=13.0
      AJG2=AJG*AJG
      QIN(26,I)=0.00
      IF(EN <= EIN(26):
) GO TO 72
      QIN(26,I)=DBK*math.log((ENRT+math.sqrt(EN-EIN(26)))/(ENRT-math.sqrt(EN-EIN(26)
     /)))*(PJ(79)*AJG2+PJ(80)*(AJG2-1.0)+PJ(81)*(AJG2-4.0)+PJ(82)*(AJG2-
     /9.0)+PJ(83)*(AJG2-16.0)+PJ(84)*(AJG2-25.0)+PJ(85)*(AJG2-36.)+
     /PJ(86)*(AJG2-49.)+PJ(87)*(AJG2-64.)+PJ(88)*(AJG2-81.)+PJ(89)*(AJG2
     /-100.)+PJ(90)*(AJG2-121.)+PJ(91)*(AJG2-144.))/
     /(AJG*(2.0*AJ+1.0)*EN)
      PEQIN(26,I)=0.5+(QIN(26,I)-DRAT*QIN(26,I))/QIN(26,I)
# 140-->130 +141-->131 +142-->132 +143-->133 +144-->134 +145-->135
# +146-->136 +147-->137 +148-->138 +149-->139 +1410-->1310 +1411-->1311
# +1412-->1312 +1413-->1313
   72 AJ=14.0
      AJG=14.0
      AJG2=AJG*AJG
      QIN(27,I)=DBK*math.log((ENRT+math.sqrt(EN-EIN(27)))/(math.sqrt(EN-EIN(27))-
     /ENRT))*(PJ(106)*AJG2+PJ(107)*(AJG2-1.0)+PJ(108)*(AJG2-4.0)+
     /PJ(109)*(AJG2-9.0)+PJ(110)*(AJG2-16.)+PJ(111)*(AJG2-25.)+PJ(112)*
     /(AJG2-36.)+PJ(113)*(AJG2-49.)+PJ(114)*(AJG2-64.)+PJ(115)*
     /(AJG2-81.)+PJ(116)*(AJG2-100.)+PJ(117)*(AJG2-121.)+PJ(118)*(AJG2-
     /144.)+PJ(119)*(AJG2-169.))/(AJG*(2.0*AJ+1.0)*EN)
      PEQIN(27,I)=0.5+(QIN(27,I)-DRAT*QIN(27,I))/QIN(27,I)
# 130-->140 +131-->141 +132-->142 +133-->143 +134-->144 +135-->145  
# +136-->146 +137-->147 +138-->148 +139-->149 +1310-->1410 +1311-->1411
# +1312-->1412 +1313-->1413
      AJ=13.0
      AJG=14.0
      AJG2=AJG*AJG
      QIN(28,I)=0.00
      IF(EN <= EIN(28):
) GO TO 200
      QIN(28,I)=DBK*math.log((ENRT+math.sqrt(EN-EIN(28)))/(ENRT-math.sqrt(EN-EIN(28)
     /)))*(PJ(92)*AJG2+PJ(93)*(AJG2-1.0)+PJ(94)*(AJG2-4.0)+PJ(95)*(AJG2-
     /9.0)+PJ(96)*(AJG2-16.0)+PJ(97)*(AJG2-25.0)+PJ(98)*(AJG2-36.)+
     /PJ(99)*(AJG2-49.)+PJ(100)*(AJG2-64.)+PJ(101)*(AJG2-81.)+PJ(102)*
     /(AJG2-100.)+PJ(103)*(AJG2-121.)+PJ(104)*(AJG2-144.)+PJ(105)*
     /(AJG2-169.))/(AJG*(2.0*AJ+1.0)*EN)
      PEQIN(28,I)=0.5+(QIN(28,I)-DRAT*QIN(28,I))/QIN(28,I)
# 
#  SUPERELASTIC V2   
#
  200 QIN(29,I)=0.00                                                   
      IF(EN <= 0.0):
 GO TO 250                                           
      EFAC=math.sqrt(1.0-(EIN(29)/EN))                                     
      QIN(29,I)=0.195*math.log((EFAC+1.0)/(EFAC-1.0))/EN 
      DO 220 J=2,NVIBH
      IF((EN+EIN(30):
) <= XVIBH(J)) GO TO 230  
  220 CONTINUE
      J=NVIBH
  230 A=(YVIBH(J)-YVIBH(J-1))/(XVIBH(J)-XVIBH(J-1))
      B=(XVIBH(J-1)*YVIBH(J)-XVIBH(J)*YVIBH(J-1))/(XVIBH(J-1)-XVIBH(J))
      QIN(29,I)=QIN(29,I)+0.25*(EN+EIN(30))*(A*(EN+EIN(30))+B)/EN       
      QIN(29,I)=QIN(29,I)*APOPV2/(1.0+APOPV2)*1.D-16                   
#    V2                                                                 
  250 QIN(30,I)=0.00                                                   
      IF(EN <= EIN(30):
) GO TO 300                                       
      EFAC=math.sqrt(1.0-(EIN(30)/EN))                                      
      QIN(30,I)=0.195*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      DO 270 J=2,NVIBH
      IF(EN <= XVIBH(J):
) GO TO 280
  270 CONTINUE
      J=NVIBH
  280 A=(YVIBH(J)-YVIBH(J-1))/(XVIBH(J)-XVIBH(J-1)) 
      B=(XVIBH(J-1)*YVIBH(J)-XVIBH(J)*YVIBH(J-1))/(XVIBH(J-1)-XVIBH(J))
      QIN(30,I)=QIN(30,I)+0.25*(A*EN+B)       
      QIN(30,I)=QIN(30,I)/(1.0+APOPV2)*1.D-16                      
#  V4                                                                   
  300 QIN(31,I)=0.00                                                   
      IF(EN <= EIN(31):
) GO TO 400 
      EFAC=math.sqrt(1.0-(EIN(31)/EN))
      QIN(31,I)=0.182*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      DO 310 J=2,NVIBH                                                  
      IF(EN <= XVIBH(J):
) GO TO 320                                      
  310 CONTINUE                                                          
      J=NVIBH                                                           
  320 A=(YVIBH(J)-YVIBH(J-1))/(XVIBH(J)-XVIBH(J-1))                     
      B=(XVIBH(J-1)*YVIBH(J)-XVIBH(J)*YVIBH(J-1))/(XVIBH(J-1)-XVIBH(J)) 
      QIN(31,I)=(QIN(31,I)+0.52*(A*EN+B))*1.D-16                        
  400 CONTINUE                                                          
#  V1+V3                                                                
      QIN(32,I)=0.00                                                   
      IF(EN <= EIN(32):
) GO TO 500  
      EFAC=math.sqrt(1.0-(EIN(32)/EN))
      QIN(32,I)=0.182*math.log((1.0+EFAC)/(1.0-EFAC))/EN                    
      DO 410 J=2,NVIBH                                                  
      IF(EN <= XVIBH(J):
) GO TO 420                                      
  410 CONTINUE                                                          
      J=NVIBH                                                           
  420 A=(YVIBH(J)-YVIBH(J-1))/(XVIBH(J)-XVIBH(J-1))                     
      B=(XVIBH(J-1)*YVIBH(J)-XVIBH(J)*YVIBH(J-1))/(XVIBH(J-1)-XVIBH(J)) 
      QIN(32,I)=(QIN(32,I)+1.10*(A*EN+B))*1.D-16                        
  500 CONTINUE                                                          
# HARMONICS (2V1,2V1+V4,3V1, ETC )                                               
      QIN(33,I)=0.00                                                   
      IF(EN <= EIN(33):
) GO TO 600        
      DO 510 J=2,NVIBH                                                  
      IF(EN <= XVIBH(J):
) GO TO 520                                      
  510 CONTINUE                                                          
      J=NVIBH                                                           
  520 A=(YVIBH(J)-YVIBH(J-1))/(XVIBH(J)-XVIBH(J-1))                     
      B=(XVIBH(J-1)*YVIBH(J)-XVIBH(J)*YVIBH(J-1))/(XVIBH(J-1)-XVIBH(J)) 
      QIN(33,I)=0.165*(A*EN+B)*1.D-16                                   
  600 CONTINUE                                                          
#                                                                       
      QIN(34,I)=0.00                                                   
      IF(EN <= EIN(34):
) GO TO 700                                       
      DO 610 J=2,NEXC1                                                  
      IF(EN <= XEXC1(J):
) GO TO 620                                      
  610 CONTINUE                                                          
      J=NEXC1                                                           
  620 A=(YEXC1(J)-YEXC1(J-1))/(XEXC1(J)-XEXC1(J-1))                     
      B=(XEXC1(J-1)*YEXC1(J)-XEXC1(J)*YEXC1(J-1))/(XEXC1(J-1)-XEXC1(J)) 
      QIN(34,I)=(A*EN+B)*1.D-16                                    
  700 CONTINUE                                                          
      SUM=0.00
      DO 750 K=1,28
  750 SUM=SUM+QIN(K,I)
#---------------------------------------------------------------------
#    SUBTRACT ROTATIONAL MT  XSEC TO GET CORRECT ELASTIC MT XSEC.
# 
      Q(2,I)=Q(2,I)-SUM*DRAT             
#-----------------------------------------------------      
#  TOTAL XSEC (USED ONLY FOR INFORMATION)
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)+QIN(29,I)+QIN(30,I)+
     /QIN(31,I)+QIN(32,I)+QIN(33,I)+QIN(34,I)+SUM*DRAT            
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      DO 1000 K=1,6
      J=35-K
      IF(EFINAL <= EIN(J):
) NIN=J-1
 1000 CONTINUE     
#                                                                       
      RETURN                                                            
      # end
      def GAS32(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)  
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6) 
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)        
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      DIMENSION XEN(49),YXSEC(49),XVIB1(31),YVIB1(31),XVIB2(31),        
     /YVIB2(31),XVIB3(18),YVIB3(18),XVIB4(31),YVIB4(31),XVIB5(21),
     /YVIB5(21),XEXC1(17),YEXC1(17),XEXC2(23),YEXC2(23),XEXC3(20),
     /YEXC3(20),XION(46),YION(46),XATT(16),YATT(16)
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME                                                 
      DATA XEN/0.00,0.01,.014,0.02,0.03,0.04,0.05,0.06,0.07,0.08, 
     /0.09,0.10,0.11,0.12,0.14,0.16,0.18,0.20,0.25,0.30,                
     /0.40,0.50,0.60,0.80,1.00,1.40,2.00,3.00,4.00,5.00,                
     /6.00,7.50,8.50,10.0,15.0,20.0,30.0,40.0,70.0,                
     /100.,140.,200.,250.,300.,500.,1000.,1500.,10000.,100000./ 
      DATA YXSEC/54.0,51.0,50.0,49.0,45.0,42.0,39.0,34.0,28.5,22.0,
     /15.5,9.40,6.80,4.80,4.40,4.80,6.10,8.80,15.5,19.5,
     /22.0,22.5,23.0,23.5,24.0,24.0,24.5,24.0,25.0,27.0,                
     /28.0,30.0,27.0,22.0,15.4,12.0,8.31,6.28,3.69,                
     /2.66,1.57,0.97,0.70,0.57,0.32,.143,.092,.011,.001/                
      DATA XVIB1/.114,1.00,1.20,1.40,1.60,1.80,2.00,2.20,2.40,2.60,     
     /2.80,3.00,3.20,4.00,5.00,6.00,7.00,8.00,9.00,10.0,
     /11.0,15.0,20.0,25.0,30.0,50.0,100.,200.,1000.,10000.,
     /100000./
      DATA YVIB1/0.0,.001,0.04,0.07,0.14,0.15,0.14,0.10,0.08,0.08,      
     /0.08,0.08,0.08,0.20,0.28,0.36,0.48,0.64,0.70,0.64,
     /0.59,0.30,0.22,0.17,0.11,0.06,.022,.008,.0008,.00003,
     /.000003/                           
      DATA XVIB2/.161,1.00,1.40,1.60,1.80,2.00,2.20,2.40,2.60,2.80,     
     /3.00,3.20,3.40,4.00,5.00,6.00,7.00,8.00,9.00,10.0,                
     /11.0,15.0,20.0,25.0,30.0,50.0,100.,200.,1000.,10000.,
     /100000./             
      DATA YVIB2/0.00,.001,0.22,0.75,3.77,5.28,4.65,3.26,2.16,1.21,     
     /0.77,0.54,0.38,0.42,0.60,0.80,1.11,1.30,1.35,1.20,                
     /1.00,0.56,0.44,0.33,0.24,0.14,0.06,.024,.003,.0001, 
     /.00001/  
      DATA XVIB3/.322,1.00,1.40,1.60,1.80,2.00,2.20,2.40,2.60,2.80,
     /3.00,3.20,3.40,10.0,100.0,1000.,10000.,100000./
      DATA YVIB3/0.00,.001,0.15,0.17,0.82,1.50,1.36,0.90,0.52,0.30,
     /0.15,0.08,0.04,.002,.0002,.00002,.000002,.0000002/
      DATA XVIB4/.360,1.00,1.40,1.60,1.80,2.00,2.20,2.40,2.60,2.80,
     /3.00,3.20,3.40,4.00,5.00,6.00,7.00,8.00,9.00,10.0,
     /11.0,15.0,20.0,25.0,30.0,50.0,100.,200.,1000.,10000.,
     /100000./
      DATA YVIB4/0.00,.001,.052,.090,0.54,0.86,0.80,0.64,0.46,0.45,
     /0.45,0.45,0.50,0.60,1.00,1.40,1.80,1.85,1.70,1.50,
     /1.20,0.65,0.48,0.42,0.28,0.16,0.06,0.03,.004,.0001,  
     /.00001/  
      DATA XVIB5/0.72,1.00,3.00,4.00,5.00,6.00,7.00,8.00,9.00,10.0,     
     /11.0,15.0,20.0,25.0,30.0,50.0,100.,200.,1000.,10000.,
     /100000./  
      DATA YVIB5/0.00,.0001,.008,0.05,0.10,0.16,0.20,0.21,0.18,0.15,
     /0.12,0.06,0.05,0.04,0.03,.015,.007,.003,.0004,.00001, 
     /.000001/  
      DATA XEXC1/4.18,4.50,5.00,6.00,7.00,8.00,9.00,10.0,12.0,14.0,     
     /16.0,20.0,30.0,100.,1000.,10000.,100000./                         
      DATA YEXC1/0.00,0.11,0.21,0.42,0.84,0.80,0.67,0.61,0.45,0.34,     
     /0.27,0.25,0.20,0.06,.006,.0006,.00006/                            
      DATA XEXC2/7.30,7.50,8.00,8.50,9.00,10.0,11.0,14.0,20.0,25.0,     
     /30.0,40.0,60.0,80.0,100.,150.,200.,400.,1000.,2000.,
     /10000.,20000.,100000./         
      DATA YEXC2/0.00,.026,0.21,0.36,0.65,1.11,1.70,2.38,2.74,2.81,     
     /2.86,2.81,2.69,2.55,2.38,2.14,1.87,1.46,0.82,0.41,
     /0.09,.044,.009/             
      DATA XEXC3/9.00,10.0,11.0,14.0,16.0,20.0,25.0,30.0,40.0,60.0,     
     /80.0,100.,150.,200.,400.,1000.,2000.,10000.,20000.,100000./
      DATA YEXC3/0.00,0.43,1.11,2.04,2.30,2.64,2.81,2.86,2.81,2.69,     
     /2.55,2.38,2.14,1.87,1.46,0.82,0.41,0.09,.044,.009/  
      DATA XION/9.73,11.0,12.0,13.0,14.0,16.5,19.0,24.0,30.0,35.0,     
     /40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,
     /175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,
     /800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,5000.,
     /7000.,10000.,15000.,30000.,60000.,100000./     
      DATA YION/0.00,0.19,0.43,0.70,1.05,2.12,3.06,4.81,5.97,6.80,      
     /7.38,7.88,8.51,9.04,9.32,9.42,9.42,9.42,9.14,8.64,                
     /8.16,7.71,7.20,6.31,5.77,5.34,4.86,4.55,4.00,3.68,
     /3.39,3.02,2.82,2.44,2.10,1.90,1.74,1.50,1.28,0.85,
     /0.64,0.47,0.33,0.18,.097,.061/                    
      DATA XATT/6.85,7.00,7.20,7.50,8.00,8.50,9.00,9.50,10.0,10.5,      
     /11.0,11.5,12.0,12.5,13.0,13.2/                                    
      DATA YATT/0.00,0.67,1.10,1.65,2.80,4.40,6.60,10.3,14.7,12.3,      
     /9.70,6.20,3.50,1.30,0.50,0.00/                                    
      NAME='PROPENE C3H6 99'     
# --------------------------------------------------------------------- 
#  1999 INCLUDED VIBRATIONAL RESONACE SHAPE FROM ALLEN  AND ALSO USED
#   SIMILAR RESONANCE SHAPE IN E:E FROM WALKER ET AL .: 
#   REF J.CHEM.PHYS. 69(1978) 5532  (E:E RESONANCE MOVED TO 2.1 EV)
#   FIT TO  SCHMIDTS ,GEE+FREEMAN AND BOWMAN+GORDON DATA IN PURE PROPENE
#   NO GOOD DATA AT HIGH FIELD THEREFORE X-SECTIONS ABOVE 3 EV ARE 
#   DERIVED FROM SYSTEMATICS IN THE HYDROCARBONS.
# ---------------------------------------------------------------------
#
      NION=1 
      NATT=1
      NIN=12
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0     
      NDATA=49                                                          
      NVIB1=31                                                          
      NVIB2=31 
      NVIB3=18
      NVIB4=31
      NVIB5=21                                                       
      NEXC1=17                                                          
      NEXC2=23
      NEXC3=20
      NIOND=46                                                          
      NATT1=16                                                          
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(42.08064*AMU)                                     
      E(3)=9.73                                                         
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
      EOBY(1)=9.73 
      EIN(1)=-0.0716
      EIN(2)=0.0716 
      EIN(3)=-0.114                                           
      EIN(4)=0.114
      EIN(5)=-0.161
      EIN(6)=0.161                                          
      EIN(7)=0.322 
      EIN(8)=0.360 
      EIN(9)=0.720
      EIN(10)=4.18                                                      
      EIN(11)=7.30                                                      
      EIN(12)=9.00
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       PROPENE        '
      SCRPT(3)=' IONISATION    ELOSS=  9.73   '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      SCRPT(7)=' VIB V20       ELOSS= -0.0716 '
      SCRPT(8)=' VIB V20       ELOSS=  0.0716 '
      SCRPT(9)=' VIB V13       ELOSS= -0.114  '
      SCRPT(10)=' VIB V13       ELOSS=  0.114  '
      SCRPT(11)=' VIB           ELOSS= -0.161  '
      SCRPT(12)=' VIB           ELOSS=  0.161  '
      SCRPT(13)=' VIB HAR       ELOSS=  0.322  '
      SCRPT(14)=' VIB           ELOSS=  0.360  '
      SCRPT(15)=' VIB HAR       ELOSS=  0.720  '
      SCRPT(16)=' EXC           ELOSS=  4.18   '
      SCRPT(17)=' EXC           ELOSS=  7.30   '
      SCRPT(18)=' EXC           ELOSS=  9.00   '
      AMP=0.070      
      AMP1=0.15               
      AMP2=0.15          
      AMP3=0.198        
      APOPL=math.exp(EIN(1)/AKT)
      APOP=math.exp(EIN(3)/AKT) 
      APOPH=math.exp(EIN(5)/AKT)                                            
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      DO 10 J=2,NDATA                                                   
      IF(EN <= XEN(J):
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA                                                           
   20 A=(YXSEC(J)-YXSEC(J-1))/(XEN(J)-XEN(J-1))                         
      B=(XEN(J-1)*YXSEC(J)-XEN(J)*YXSEC(J-1))/(XEN(J-1)-XEN(J))         
      Q(2,I)=(A*EN+B)*1.0D-16                                           
#                                                                       
      Q(3,I)=0.0                                                        
      IF(EN < E(3):
) GO TO 200                                          
      DO 110 J=2,NIOND                                                  
      IF(EN <= XION(J):
) GO TO 120                                       
  110 CONTINUE                                                          
      J=NIOND                                                      
  120 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.D-16                                            
#                                                                       
  200 Q(4,I)=0.0                         
      QATT(1,I)=Q(4,I)                               
      IF(EN < XATT(1):
) GO TO 300                                       
      IF(EN > XATT(NATT1):
) GO TO 300                                   
      DO 210 J=2,NATT1                                                  
      IF(EN <= XATT(J):
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NATT1                                                           
  220 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))                         
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))       
      Q(4,I)=(A*EN+B)*1.D-21  
      QATT(1,I)=Q(4,I)                                          
#                                                                       
  300 Q(5,I)=0.0                                                        
      Q(6,I)=0.0 
#  SUPERELASTIC
      QIN(1,I)=0.0
      IF(EN <= 0.0):
 GO TO 3050
      EFAC=math.sqrt(1.0-(EIN(1)/EN))
      QIN(1,I)=AMP*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      QIN(1,I)=QIN(1,I)*APOPL/(1.0+APOPL)*1.D-16
 3050 CONTINUE   
      QIN(2,I)=0.0
      IF(EN <= EIN(2):
) GO TO 3060
      EFAC=math.sqrt(1.0-(EIN(2)/EN))
      QIN(2,I)=AMP*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      QIN(2,I)=QIN(2,I)/(1.0+APOPL)*1.D-16
 3060 CONTINUE       
#                                                             
# V7 SUPERELASTIC                                                       
      QIN(3,I)=0.0                                                      
      IF(EN <= 0.0):
 GO TO 350
      EFAC=math.sqrt(1.0-(EIN(3)/EN))
      QIN(3,I)=AMP1*math.log((EFAC+1.0)/(EFAC-1.0))/EN                      
      DO 310 J=2,NVIB1                                                  
      IF((EN+EIN(4):
) <= XVIB1(J)) GO TO 320                             
  310 CONTINUE                                                          
      J=NVIB1                                                           
  320 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J)) 
      QIN(3,I)=QIN(3,I)+(EN+EIN(4))*(A*(EN+EIN(4))+B)/EN
      QIN(3,I)=QIN(3,I)*APOP/(1.0+APOP)*1.D-16                          
  350 CONTINUE  
#    
#  V7                                                                       
      QIN(4,I)=0.0                                                      
      IF(EN <= EIN(4):
) GO TO 400 
      EFAC=math.sqrt(1.0-(EIN(4)/EN))
      QIN(4,I)=AMP1*math.log((1.0+EFAC)/(1.0-EFAC))/EN                      
      DO 360 J=2,NVIB1                                                  
      IF(EN <= XVIB1(J):
) GO TO 370                                      
  360 CONTINUE                                                          
      J=NVIB1                                                           
  370 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J)) 
      QIN(4,I)=QIN(4,I)+(A*EN+B)
      QIN(4,I)=QIN(4,I)/(1.0+APOP)*1.D-16                               
  400 CONTINUE 
#       
# SUPERELASTIC  
      QIN(5,I)=0.0
      IF(EN <= 0.0):
 GO TO 4150
      EFAC=math.sqrt(1.0-(EIN(5)/EN))
      QIN(5,I)=AMP2*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      DO 4110 J=2,NVIB2
      IF((EN+EIN(6):
) <= XVIB2(J)) GO TO 4120 
 4110 CONTINUE      
      J=NVIB2
 4120 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J))
      QIN(5,I)=QIN(5,I)+(EN+EIN(6))*(A*(EN+EIN(6))+B)/EN
      QIN(5,I)=QIN(5,I)*APOPH/(1.0+APOPH)*1.D-16 
 4150 CONTINUE     
#  V2 + V3 (SUM OF VIBRATIONS AT 166 AND 201 MV)                            
      QIN(6,I)=0.0
      IF(EN <= EIN(6):
) GO TO 450
      EFAC=math.sqrt(1.0-(EIN(6)/EN))
      QIN(6,I)=AMP2*math.log((1.0+EFAC)/(1.0-EFAC))/EN                      
      DO 410 J=2,NVIB2                                                  
      IF(EN <= XVIB2(J):
) GO TO 420                                      
  410 CONTINUE                                                          
      J=NVIB2                                                           
  420 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J)) 
      QIN(6,I)=QIN(6,I)+(A*EN+B)
      QIN(6,I)=QIN(6,I)/(1.0+APOPH)*1.D-16                              
  450 CONTINUE 
# 
#  2V3+2V2 (HARMONICS)                                                      
      QIN(7,I)=0.0                                                      
      IF(EN <= EIN(7):
) GO TO 500                                        
      DO 460 J=2,NVIB3                                                  
      IF(EN <= XVIB3(J):
) GO TO 470                                      
  460 CONTINUE                                                          
      J=NVIB3                                                           
  470 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J)) 
      QIN(7,I)=(A*EN+B)*1.D-16                                          
  500 CONTINUE
#  
#  V1                                                                       
      QIN(8,I)=0.0 
      IF(EN <= EIN(8):
) GO TO 550  
      EFAC=math.sqrt(1.0-(EIN(8)/EN))
      QIN(8,I)=AMP3*math.log((1.0+EFAC)/(1.0-EFAC))/EN                      
      DO 510 J=2,NVIB4                                                  
      IF(EN <= XVIB4(J):
) GO TO 520                                      
  510 CONTINUE                                                          
      J=NVIB4                                                           
  520 A=(YVIB4(J)-YVIB4(J-1))/(XVIB4(J)-XVIB4(J-1))                     
      B=(XVIB4(J-1)*YVIB4(J)-XVIB4(J)*YVIB4(J-1))/(XVIB4(J-1)-XVIB4(J)) 
      QIN(8,I)=(QIN(8,I)+(A*EN+B))*1.D-16                               
  550 CONTINUE
#     
# 2V1 (HARMONIC)
      QIN(9,I)=0.0                                                      
      IF(EN <= EIN(9):
) GO TO 600                                        
      DO 560 J=2,NVIB5                                                  
      IF(EN <= XVIB5(J):
) GO TO 570                                      
  560 CONTINUE                                                          
      J=NVIB5                                                           
  570 A=(YVIB5(J)-YVIB5(J-1))/(XVIB5(J)-XVIB5(J-1))                     
      B=(XVIB5(J-1)*YVIB5(J)-XVIB5(J)*YVIB5(J-1))/(XVIB5(J-1)-XVIB5(J)) 
      QIN(9,I)=(A*EN+B)*1.D-16                                          
  600 CONTINUE                                                          
#                                                                       
      QIN(10,I)=0.0                                                     
      IF(EN <= EIN(10):
) GO TO 700                                       
      DO 610 J=2,NEXC1                                                  
      IF(EN <= XEXC1(J):
) GO TO 620                                      
  610 CONTINUE                                                          
      J=NEXC1                                                           
  620 A=(YEXC1(J)-YEXC1(J-1))/(XEXC1(J)-XEXC1(J-1))                     
      B=(XEXC1(J-1)*YEXC1(J)-XEXC1(J)*YEXC1(J-1))/(XEXC1(J-1)-XEXC1(J)) 
      QIN(10,I)=(A*EN+B)*1.D-16                                         
  700 CONTINUE                                                          
#                                                                       
      QIN(11,I)=0.0                                                     
      IF(EN <= EIN(11):
) GO TO 800                                       
      DO 710 J=2,NEXC2                                                  
      IF(EN <= XEXC2(J):
) GO TO 720                                      
  710 CONTINUE                                                          
      J=NEXC2                                                           
  720 A=(YEXC2(J)-YEXC2(J-1))/(XEXC2(J)-XEXC2(J-1))                     
      B=(XEXC2(J-1)*YEXC2(J)-XEXC2(J)*YEXC2(J-1))/(XEXC2(J-1)-XEXC2(J)) 
      QIN(11,I)=(A*EN+B)*1.D-16                                         
  800 CONTINUE                                                          
#                                                                       
      QIN(12,I)=0.0                                                     
      IF(EN <= EIN(12):
) GO TO 899                                       
      DO 810 J=2,NEXC3                                                  
      IF(EN <= XEXC3(J):
) GO TO 820                                      
  810 CONTINUE                                                          
      J=NEXC3                                                           
  820 A=(YEXC3(J)-YEXC3(J-1))/(XEXC3(J)-XEXC3(J-1))                     
      B=(XEXC3(J-1)*YEXC3(J)-XEXC3(J)*YEXC3(J-1))/(XEXC3(J-1)-XEXC3(J)) 
      QIN(12,I)=(A*EN+B)*1.D-16                                         
  899 CONTINUE                                                          
#                                                                       
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)+QIN(1,I)+QIN(2,I)+QIN(3,I)+QIN(4,I)+  
     /QIN(5,I)+QIN(6,I)+QIN(7,I)+QIN(8,I)+QIN(9,I)+QIN(10,I)+QIN(11,I)+
     /QIN(12,I)                                                         
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      IF(EFINAL <= EIN(12):
) NIN=11
      IF(EFINAL <= EIN(11):
) NIN=10
      IF(EFINAL <= EIN(10):
) NIN=9 
      IF(EFINAL <= EIN(9):
) NIN=8                                        
      IF(EFINAL <= EIN(8):
) NIN=7                                        
      IF(EFINAL <= EIN(7):
) NIN=6                                        
      IF(EFINAL <= EIN(6):
) NIN=5                                        
      IF(EFINAL <= EIN(5):
) NIN=4                                        
      IF(EFINAL <= EIN(4):
) NIN=3                                        
      IF(EFINAL <= EIN(3):
) NIN=2                                        
      IF(EFINAL <= EIN(2):
) NIN=1                                        
      IF(EFINAL <= EIN(1):
) NIN=0                                        
#                                                                       
      RETURN                                                            
      # end   
      def GAS33(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)  
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)       
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      DIMENSION XEN(49),YXSEC(49),XVIB1(32),YVIB1(32),XVIB2(31),        
     /YVIB2(31),XVIB3(15),YVIB3(15),XVIB4(28),YVIB4(28),XVIB5(21),
     /YVIB5(21),XEXC1(23),YEXC1(23),XEXC2(20),YEXC2(20),
     /XION(46),YION(46),XATT(16),YATT(16)
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME                                                 
      DATA XEN/0.00,0.01,.014,0.02,0.03,0.04,0.05,0.06,0.07,0.08, 
     /0.09,0.10,0.11,0.12,0.14,0.16,0.18,0.20,0.25,0.30,                
     /0.40,0.50,0.60,0.80,1.00,1.40,2.00,3.00,4.00,5.00,                
     /6.00,7.50,8.50,10.0,15.0,20.0,30.0,40.0,70.0,                
     /100.,140.,200.,250.,300.,500.,1000.,1500.,10000.,100000./ 
      DATA YXSEC/13.0,11.0,10.5,9.80,7.80,5.60,4.20,2.90,2.10,2.00,
     /2.20,2.65,3.25,3.90,5.65,7.30,9.15,10.8,14.2,16.8,
     /20.0,21.5,22.0,22.5,22.7,22.8,22.9,23.0,23.5,25.5,                
     /27.0,29.0,27.0,22.0,15.4,12.0,8.31,6.28,3.69,                
     /2.66,1.57,0.97,0.70,0.57,0.32,.143,.092,.011,.001/                
      DATA XVIB1/.107,1.00,1.20,1.40,1.60,1.80,2.00,2.20,2.40,2.60,
     /3.00,4.00,4.50,5.00,5.50,6.00,6.50,7.00,8.00,9.00,      
     /10.0,11.0,15.0,20.0,25.0,30.0,50.0,100.,200.,1000.,       
     /10000.,100000./
      DATA YVIB1/0.0,.001,.022,.040,.080,.080,.080,.085,.085,.085,      
     /0.13,0.22,0.70,1.10,1.25,1.15,0.75,0.60,0.71,0.77,     
     /0.71,0.64,0.31,0.25,0.18,0.12,0.06,.025,0.01,.001,       
     /.00003,.000003/                           
      DATA XVIB2/.178,1.00,1.40,1.60,1.80,2.00,2.20,2.40,2.60,2.80,     
     /3.00,3.20,3.40,4.00,5.00,6.00,7.00,8.00,9.00,10.0,                
     /11.0,15.0,20.0,25.0,30.0,50.0,100.,200.,1000.,10000.,
     /100000./            
      DATA YVIB2/0.00,.001,0.15,0.25,0.40,0.45,0.47,0.50,0.52,0.55,     
     /0.57,0.60,0.62,0.66,0.74,0.90,1.14,1.33,1.38,1.23,
     /1.01,0.56,0.44,0.34,0.25,0.14,.059,.025,.003,.0001,
     /.00001/ 
      DATA XVIB3/.295,1.00,3.00,4.00,4.50,5.00,5.50,6.00,6.50,7.00,     
     /10.0,100.0,1000.,10000.,100000./
      DATA YVIB3/0.00,.001,0.01,0.01,0.05,0.10,0.15,0.10,0.05,0.01,
     /.001,.0001,.00001,.000001,.0000001/
      DATA XVIB4/.374,1.00,1.40,1.60,1.80,2.00,2.20,2.40,2.60,3.00,
     /4.00,5.00,6.00,7.00,8.00,9.00,10.0,11.0,15.0,20.0,
     /25.0,30.0,50.0,100.,200.,1000.,10000.,100000./
      DATA YVIB4/0.00,.001,.029,.049,0.30,0.44,0.47,0.50,0.55,0.70,
     /0.75,1.15,1.40,1.70,1.80,1.70,1.50,1.40,0.90,0.66,
     /0.57,0.40,0.22,0.92,0.04,.004,.0004,.00004/    
      DATA XVIB5/.748,1.00,3.00,4.00,5.00,6.00,7.00,8.00,9.00,10.0,     
     /11.0,15.0,20.0,25.0,30.0,50.0,100.,200.,1000.,10000.,
     /100000./  
      DATA YVIB5/0.00,.0001,.002,.030,.052,.088,0.11,0.12,0.10,.084,
     /.065,.035,.025,.020,.016,.009,.004,.0014,.0002,.000005,
     /.0000005/ 
      DATA XEXC1/7.30,7.50,8.00,8.50,9.00,10.0,11.0,14.0,20.0,25.0,     
     /30.0,40.0,60.0,80.0,100.,150.,200.,400.,1000.,2000.,       
     /10000.,20000.,100000./                
      DATA YEXC1/0.00,.026,0.21,0.36,0.65,1.11,1.70,2.38,2.74,2.81,     
     /2.86,2.81,2.69,2.55,2.38,2.14,1.87,1.46,0.82,0.41,     
     /0.09,.044,.009/       
      DATA XEXC2/9.00,10.0,11.0,14.0,16.0,20.0,25.0,30.0,40.0,60.0,
     /80.0,100.,150.,200.,400.,1000.,2000.,10000.,20000.,100000./ 
      DATA YEXC2/0.00,0.43,1.11,2.04,2.30,2.64,2.81,2.86,2.81,2.69,
     /2.55,2.38,2.14,1.87,1.46,0.82,0.41,0.09,.044,.009/  
      DATA XION/9.86,11.0,12.0,13.0,14.0,16.5,19.0,24.0,30.0,35.0,     
     /40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,
     /175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,
     /800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,5000.,
     /7000.,10000.,15000.,30000.,60000.,100000./     
      DATA YION/0.00,0.19,0.43,0.70,1.05,2.12,3.06,4.81,5.97,6.80,      
     /7.38,7.88,8.51,9.04,9.32,9.42,9.42,9.42,9.14,8.64,                
     /8.16,7.71,7.20,6.31,5.77,5.34,4.86,4.55,4.00,3.68,
     /3.39,3.02,2.82,2.44,2.10,1.90,1.74,1.50,1.28,0.85,
     /0.64,0.47,0.33,0.18,.097,.061/                    
      DATA XATT/6.85,7.00,7.20,7.50,8.00,8.50,9.00,9.50,10.0,10.5,      
     /11.0,11.5,12.0,12.5,13.0,13.2/                                    
      DATA YATT/0.00,0.67,1.10,1.65,2.80,4.40,6.60,10.3,14.7,12.3,      
     /9.70,6.20,3.50,1.30,0.50,0.00/                                    
      NAME=' CYCLO--C3H6 99'     
# --------------------------------------------------------------------- 
#  1999 INCLUDED VIBRATIONAL RESONACE SHAPES FROM ALLEN (ERHARDT AND 
#   MORGAN) AND ASLO BOESTEN AND TANAKA XIX ICPEAC                      
#   FIT TO  SCHMIDTS ,GEE+FREEMAN AND BOWMAN+GORDON DATA IN 
#   PURE CYCLO - PROPANE AND SCHMIDT IN HELIUM/CYCLOPROPANE.
#   NO GOOD DATA AT HIGH FIELD THEREFORE X-SECTIONS ABOVE 1 EV ARE 
#   DERIVED FROM SYSTEMATICS IN THE HYDROCARBONS AND ABOVE REFS.
# ---------------------------------------------------------------------
#
      NION=1 
      NATT=1
      NIN=9
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0                                                    
      NDATA=49                                                          
      NVIB1=32                                                          
      NVIB2=31 
      NVIB3=15
      NVIB4=28
      NVIB5=21                                                       
      NEXC1=23
      NEXC2=20
      NIOND=46                                                          
      NATT1=16                                                          
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(42.08064*AMU)                                     
      E(3)=9.86                                                         
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      EOBY(1)=9.86
      EIN(1)=-0.107                                           
      EIN(2)=0.107
      EIN(3)=-0.178
      EIN(4)=0.178                                          
      EIN(5)=0.295 
      EIN(6)=0.374 
      EIN(7)=0.748
      EIN(8)=7.30
      EIN(9)=9.00
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       CYCLO PROPANE  '
      SCRPT(3)=' IONISATION    ELOSS=  9.86   '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      SCRPT(7)=' VIB V11       ELOSS= -0.107  '
      SCRPT(8)=' VIB V11       ELOSS=  0.107  '
      SCRPT(9)=' VIB           ELOSS= -0.178  '
      SCRPT(10)=' VIB           ELOSS=  0.178  '
      SCRPT(11)=' VIB 2V3       ELOSS=  0.295  '
      SCRPT(12)=' VIB           ELOSS=  0.374  '
      SCRPT(13)=' VIB HAR       ELOSS=  0.748  '
      SCRPT(14)=' EXC           ELOSS=  7.30   '
      SCRPT(15)=' EXC           ELOSS=  9.00   '   
      AMP1=0.120                    
      AMP2=0.090                
      AMP3=0.109                 
      APOP=math.exp(EIN(1)/AKT) 
      APOPH=math.exp(EIN(3)/AKT)                                            
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      DO 10 J=2,NDATA                                                   
      IF(EN <= XEN(J):
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA                                                           
   20 A=(YXSEC(J)-YXSEC(J-1))/(XEN(J)-XEN(J-1))                         
      B=(XEN(J-1)*YXSEC(J)-XEN(J)*YXSEC(J-1))/(XEN(J-1)-XEN(J))         
      Q(2,I)=(A*EN+B)*1.0D-16                                           
#                                                                       
      Q(3,I)=0.0                                                        
      IF(EN < E(3):
) GO TO 200                                          
      DO 110 J=2,NIOND                                                  
      IF(EN <= XION(J):
) GO TO 120                                       
  110 CONTINUE                                                          
      J=NIOND                                                  
  120 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.D-16                                            
#                                                                       
  200 Q(4,I)=0.0                                        
      QATT(1,I)=Q(4,I)                
      IF(EN < XATT(1):
) GO TO 300                                       
      IF(EN > XATT(NATT1):
) GO TO 300                                   
      DO 210 J=2,NATT1                                                  
      IF(EN <= XATT(J):
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NATT1                                                           
  220 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))                         
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))       
      Q(4,I)=(A*EN+B)*1.D-21 
      QATT(1,I)=Q(4,I)                                           
#                                                                       
  300 Q(5,I)=0.0                                                        
      Q(6,I)=0.0 
#                                                             
# V7 SUPERELASTIC                                                       
      QIN(1,I)=0.0                                                      
      IF(EN <= 0.0):
 GO TO 350
      EFAC=math.sqrt(1.0-(EIN(1)/EN))
      QIN(1,I)=AMP1*math.log((EFAC+1.0)/(EFAC-1.0))/EN                      
      DO 310 J=2,NVIB1                                                  
      IF((EN+EIN(2):
) <= XVIB1(J)) GO TO 320                             
  310 CONTINUE                                                          
      J=NVIB1                                                           
  320 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J)) 
      QIN(1,I)=QIN(1,I)+(EN+EIN(2))*(A*(EN+EIN(2))+B)/EN
      QIN(1,I)=QIN(1,I)*APOP/(1.0+APOP)*1.D-16                          
  350 CONTINUE  
#    
#  V11 + V3                                                                 
      QIN(2,I)=0.0                                                      
      IF(EN <= EIN(2):
) GO TO 400 
      EFAC=math.sqrt(1.0-(EIN(2)/EN))
      QIN(2,I)=AMP1*math.log((1.0+EFAC)/(1.0-EFAC))/EN                      
      DO 360 J=2,NVIB1                                                  
      IF(EN <= XVIB1(J):
) GO TO 370                                      
  360 CONTINUE                                                          
      J=NVIB1                                                           
  370 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J)) 
      QIN(2,I)=QIN(2,I)+(A*EN+B)
      QIN(2,I)=QIN(2,I)/(1.0+APOP)*1.D-16                               
  400 CONTINUE 
#       
# SUPERELASTIC  
      QIN(3,I)=0.0
      IF(EN <= 0.0):
 GO TO 4150
      EFAC=math.sqrt(1.0-(EIN(3)/EN))
      QIN(3,I)=AMP2*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      DO 4110 J=2,NVIB2
      IF((EN+EIN(4):
) <= XVIB2(J)) GO TO 4120 
 4110 CONTINUE      
      J=NVIB2
 4120 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J))
      QIN(3,I)=QIN(3,I)+(EN+EIN(4))*(A*(EN+EIN(4))+B)/EN
      QIN(3,I)=QIN(3,I)*APOPH/(1.0+APOPH)*1.D-16 
 4150 CONTINUE     
#  V9 + V2 (SUM OF VIBRATIONS AT 179 AND 183 MV)                            
      QIN(4,I)=0.0
      IF(EN <= EIN(4):
) GO TO 450
      EFAC=math.sqrt(1.0-(EIN(4)/EN))
      QIN(4,I)=AMP2*math.log((1.0+EFAC)/(1.0-EFAC))/EN                      
      DO 410 J=2,NVIB2                                                  
      IF(EN <= XVIB2(J):
) GO TO 420                                      
  410 CONTINUE                                                          
      J=NVIB2                                                           
  420 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J)) 
      QIN(4,I)=QIN(4,I)+(A*EN+B)
      QIN(4,I)=QIN(4,I)/(1.0+APOPH)*1.D-16                              
  450 CONTINUE 
# 
#  2V3 (HARMONICS)                                                      
      QIN(5,I)=0.0                                                      
      IF(EN <= EIN(5):
) GO TO 500                                        
      DO 460 J=2,NVIB3                                                  
      IF(EN <= XVIB3(J):
) GO TO 470                                      
  460 CONTINUE                                                          
      J=NVIB3                                                           
  470 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J)) 
      QIN(5,I)=(A*EN+B)*1.D-16                                          
  500 CONTINUE
#  
#  V1 + V8 + V12                                                            
      QIN(6,I)=0.0 
      IF(EN <= EIN(6):
) GO TO 550  
      EFAC=math.sqrt(1.0-(EIN(6)/EN))
      QIN(6,I)=AMP3*math.log((1.0+EFAC)/(1.0-EFAC))/EN                      
      DO 510 J=2,NVIB4                                                  
      IF(EN <= XVIB4(J):
) GO TO 520                                      
  510 CONTINUE                                                          
      J=NVIB4                                                           
  520 A=(YVIB4(J)-YVIB4(J-1))/(XVIB4(J)-XVIB4(J-1))                     
      B=(XVIB4(J-1)*YVIB4(J)-XVIB4(J)*YVIB4(J-1))/(XVIB4(J-1)-XVIB4(J)) 
      QIN(6,I)=(QIN(6,I)+(A*EN+B))*1.D-16                               
  550 CONTINUE
#     
# 2V1 (HARMONIC)
      QIN(7,I)=0.0                                                      
      IF(EN <= EIN(7):
) GO TO 600                                        
      DO 560 J=2,NVIB5                                                  
      IF(EN <= XVIB5(J):
) GO TO 570                                      
  560 CONTINUE                                                          
      J=NVIB5                                                           
  570 A=(YVIB5(J)-YVIB5(J-1))/(XVIB5(J)-XVIB5(J-1))                     
      B=(XVIB5(J-1)*YVIB5(J)-XVIB5(J)*YVIB5(J-1))/(XVIB5(J-1)-XVIB5(J)) 
      QIN(7,I)=(A*EN+B)*1.D-16                                          
  600 CONTINUE                                                          
#                                                                       
#                                                                       
      QIN(8,I)=0.0                                                      
      IF(EN <= EIN(8):
) GO TO 850                                        
      DO 810 J=2,NEXC1                                                  
      IF(EN <= XEXC1(J):
) GO TO 820                                      
  810 CONTINUE                                                          
      J=NEXC1                                                           
  820 A=(YEXC1(J)-YEXC1(J-1))/(XEXC1(J)-XEXC1(J-1))                     
      B=(XEXC1(J-1)*YEXC1(J)-XEXC1(J)*YEXC1(J-1))/(XEXC1(J-1)-XEXC1(J)) 
      QIN(8,I)=(A*EN+B)*1.D-16                                          
  850 CONTINUE                                                          
#
      QIN(9,I)=0.0                                                      
      IF(EN <= EIN(9):
) GO TO 899                                        
      DO 860 J=2,NEXC2                                                  
      IF(EN <= XEXC2(J):
) GO TO 870                                      
  860 CONTINUE                                                          
      J=NEXC2                                                           
  870 A=(YEXC2(J)-YEXC2(J-1))/(XEXC2(J)-XEXC2(J-1))                     
      B=(XEXC2(J-1)*YEXC2(J)-XEXC2(J)*YEXC2(J-1))/(XEXC2(J-1)-XEXC2(J)) 
      QIN(9,I)=(A*EN+B)*1.D-16                                          
  899 CONTINUE                                                          
#
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)+QIN(1,I)+QIN(2,I)+QIN(3,I)+QIN(4,I)+  
     /QIN(5,I)+QIN(6,I)+QIN(7,I)+QIN(8,I)+QIN(9,I)                      
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      IF(EFINAL <= EIN(9):
) NIN=8
      IF(EFINAL <= EIN(8):
) NIN=7                                        
      IF(EFINAL <= EIN(7):
) NIN=6                                        
      IF(EFINAL <= EIN(6):
) NIN=5                                        
      IF(EFINAL <= EIN(5):
) NIN=4                                        
      IF(EFINAL <= EIN(4):
) NIN=3                                        
      IF(EFINAL <= EIN(3):
) NIN=2                                        
      IF(EFINAL <= EIN(2):
) NIN=1                                        
      IF(EFINAL <= EIN(1):
) NIN=0                                        
#                                                                       
      RETURN                                                            
      # end   
      def GAS34(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)  
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)       
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      DIMENSION XEN(24),YXSEC(24),XVIBH(18),YVIBH(18),XION(47),YION(47),
     /XATT(17),YATT(17),XEXC(25),YEXC(25),XEXC1(23),YEXC1(23),
     /XEXC2(19),YEXC2(19)
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME                                                 
      DATA XEN/0.00,.001,0.01,0.10,0.40,1.00,1.50,2.00,3.00,
     /4.00,5.00,7.50,10.0,12.0,15.0,20.0,30.0,60.0,100.,                
     /200.0,500.0,1000.0,10000.,100000./
      DATA YXSEC/2060.,2060.,1750.,175.,42.5,16.5,13.5,12.5,13.5,
     /15.0,16.0,20.0,19.0,18.0,15.0,11.5,8.60,3.60,2.05,
     /0.80,0.20,0.10,.008,.0008/                                        
      DATA XVIBH/0.00,2.00,3.00,4.00,5.00,6.00,7.00,8.00,9.00,10.0,
     /11.0,12.0,15.0,20.0,100.,1000.,10000.,100000./               
      DATA YVIBH/0.00,0.00,.025,0.45,0.60,0.80,0.95,1.00,0.95,0.80,     
     /0.60,0.45,0.30,0.18,0.02,.001,.0001,.00001/                       
      DATA XION/10.85,11.5,12.0,12.5,13.5,14.5,15.5,16.5,17.5,18.5,     
     /20.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,
     /90.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,
     /450.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,
     /2000.,4000.,6000.,10000.,20000.,40000.,100000./                   
      DATA YION/0.00,.015,0.06,0.13,0.33,0.60,0.89,1.21,1.53,1.84,      
     /2.12,3.29,4.20,4.67,5.11,5.52,5.70,6.30,6.54,6.48,
     /6.46,6.51,6.17,5.97,5.65,5.36,4.73,4.34,3.95,3.65,
     /3.28,3.15,2.86,2.56,2.25,2.12,1.92,1.65,1.44,1.29,
     /1.15,0.68,0.50,0.34,.189,.104,.043/
      DATA XATT/5.00,5.50,6.00,7.00,7.50,8.00,8.50,9.00,9.50,10.0,      
     /10.4,11.0,12.0,13.0,14.0,15.0,20.0/                  
      DATA YATT/0.00,.145,0.44,0.38,0.32,0.24,0.26,0.36,0.66,1.24,   
     /2.00,1.08,0.30,0.20,0.16,0.12,0.00/  
      DATA XEXC/7.50,8.00,9.00,10.0,11.0,14.0,17.0,20.0,25.0,30.0,
     /40.0,60.0,80.0,100.,150.,200.,300.,400.,600.,1000.,
     /2000.,4000.,10000.,20000.,100000./ 
      DATA YEXC/0.00,0.21,0.46,0.53,0.60,0.67,0.69,0.79,0.90,0.96,
     /1.00,1.00,1.00,0.93,0.87,0.80,0.66,0.60,0.47,0.33,
     /0.17,0.09,.033,.017,.004/                             
      DATA XEXC1/9.80,10.5,11.5,13.5,16.0,20.0,25.0,30.0,
     /40.0,60.0,80.0,100.,150.,200.,300.,400.,600.,1000.,
     /2000.,4000.,10000.,20000.,100000./                                
      DATA YEXC1/0.00,0.11,0.23,0.42,0.64,0.87,1.02,1.10,               
     /1.15,1.15,1.15,1.07,1.00,0.93,0.78,0.70,0.54,0.40,
     /0.20,0.10,0.04,0.02,.004/
      DATA XEXC2/17.0,20.0,25.0,30.0,
     /40.0,60.0,80.0,100.,150.,200.,300.,400.,600.,1000.,
     /2000.,4000.,10000.,20000.,100000./
      DATA YEXC2/0.00,0.24,0.52,0.66,
     /0.71,0.66,0.63,0.60,0.55,0.47,0.38,0.30,0.22,0.14,
     /.076,.043,.019,.009,.0019/  
#                                             
      NAME='METHANOL   1999'                                            
# --------------------------------------------------------------------  
#    X-SECTIONS FROM SCALING ETHANOL X-SECTIONS AND ALSO FROM   
#    TOTAL ELECTRON SCATTERING FROM GDANSK.
# ---------------------------------------------------------------------
#
      NION=1 
      NATT=1
      NIN=9
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0  
      NDATA=24                                                          
      NVIBH=18                                                          
      NIOND=47                                                          
      NATT1=17
      NEXC=25                                                           
      NEXC1=23 
      NEXC2=19
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(32.04186*AMU)                                     
      E(3)=10.85                                                        
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
      EOBY(1)=10.85
      EIN(1)=-0.025
      EIN(2)=0.025
      EIN(3)=-0.1281
      EIN(4)=0.1281 
      EIN(5)=0.1668                                                     
      EIN(6)=0.3527
      EIN(7)=7.50 
      EIN(8)=9.80          
      EIN(9)=17.0
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       METHANOL       '
      SCRPT(3)=' IONISATION    ELOSS= 10.85   '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      SCRPT(7)=' ROT           ELOSS= -0.025  '
      SCRPT(8)=' ROT           ELOSS=  0.025  '
      SCRPT(9)=' VIB V8        ELOSS= -0.1281 '
      SCRPT(10)=' VIB V8        ELOSS=  0.1281 '
      SCRPT(11)=' VIB V6        ELOSS=  0.1668 '
      SCRPT(12)=' VIB V3        ELOSS=  0.3527 '
      SCRPT(13)=' EXC           ELOSS=  7.50   '
      SCRPT(14)=' EXC           ELOSS=  9.80   '
      SCRPT(15)=' EXC           ELOSS= 17.0    '
      APOP1=math.exp(EIN(1)/AKT)
      APOP2=math.exp(EIN(3)/AKT)                                            
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP 
      Q(2,I)=0.0
# USE LOG INTERPOLATION BECAUSE OF RAPID CHANGE IN X-SEC
      IF(EN <= XEN(2):
) :
       Q(2,I)=YXSEC(2)*1.D-16
       GO TO 30
      # endIF
      DO 10 J=2,NDATA                                                   
      IF(EN <= XEN(J):
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA
   20 YXJ=math.log(YXSEC(J))
      YXJ1=math.log(YXSEC(J-1))
      XNJ=math.log(XEN(J))
      XNJ1=math.log(XEN(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      Q(2,I)=math.exp(A*math.log(EN)+B)*1.D-16  
#                                                                       
   30 Q(3,I)=0.0                                                        
      IF(EN < E(3):
) GO TO 40                                           
      DO 31 J=2,NIOND                                                   
      IF(EN <= XION(J):
) GO TO 32                                        
   31 CONTINUE                                                          
      J=NIOND                                                           
   32 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.D-16                                            
   40 CONTINUE                                                          
#                                                                       
      Q(4,I)=0.0                                      
      QATT(1,I)=Q(4,I)                  
      IF(EN < XATT(1):
) GO TO 50
      IF(EN >= XATT(NATT1):
) GO TO 50                                   
      DO 41 J=2,NATT1                                                   
      IF(EN <= XATT(J):
) GO TO 42                                        
   41 CONTINUE                                                          
      J=NATT1                                                           
   42 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))                         
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))       
      Q(4,I)=(A*EN+B)*1.D-19 
      QATT(1,I)=Q(4,I)                                           
   50 CONTINUE                                                          
      Q(5,I)=0.0                                                        
      Q(6,I)=0.0                                                        
#                                                                      
#  SUPERELASTIC  ROT1
#
      QIN(1,I)=0.0
      IF(EN <= 0.0):
 GO TO 150
      EFAC=math.sqrt(1.0-(EIN(1)/EN))
      QIN(1,I)=0.7*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      QIN(1,I)=QIN(1,I)*APOP1/(1.0+APOP1)*1.D-16
#  ROT1     
  150 QIN(2,I)=0.0                                                      
      IF(EN <= EIN(2):
) GO TO 200 
      EFAC=math.sqrt(1.0-(EIN(2)/EN))                                       
      QIN(2,I)=0.7*math.log((1.0+EFAC)/(1.0-EFAC))/EN 
      QIN(2,I)=QIN(2,I)/(1.0+APOP1)*1.D-16                     
# 
#  SUPERELASTIC V1   
#
  200 QIN(3,I)=0.0                                                      
      IF(EN <= 0.0):
 GO TO 250                                           
      EFAC=math.sqrt(1.0-(EIN(3)/EN))                                       
      QIN(3,I)=0.40*math.log((EFAC+1.0)/(EFAC-1.0))/EN 
      DO 220 J=2,NVIBH
      IF((EN+EIN(4):
) <= XVIBH(J)) GO TO 230  
  220 CONTINUE
      J=NVIBH
  230 A=(YVIBH(J)-YVIBH(J-1))/(XVIBH(J)-XVIBH(J-1))
      B=(XVIBH(J-1)*YVIBH(J)-XVIBH(J)*YVIBH(J-1))/(XVIBH(J-1)-XVIBH(J))
      QIN(3,I)=QIN(3,I)+(EN+EIN(4))*(A*(EN+EIN(4))+B)/EN                
      QIN(3,I)=QIN(3,I)*APOP2/(1.0+APOP2)*1.D-16                        
# INELASTIC V1                                                          
  250 QIN(4,I)=0.0                                                      
      IF(EN <= EIN(4):
) GO TO 300                                        
      EFAC=math.sqrt(1.0-(EIN(4)/EN))                                       
      QIN(4,I)=0.40*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      DO 270 J=2,NVIBH
      IF(EN <= XVIBH(J):
) GO TO 280
  270 CONTINUE
      J=NVIBH
  280 A=(YVIBH(J)-YVIBH(J-1))/(XVIBH(J)-XVIBH(J-1)) 
      B=(XVIBH(J-1)*YVIBH(J)-XVIBH(J)*YVIBH(J-1))/(XVIBH(J-1)-XVIBH(J))
      QIN(4,I)=QIN(4,I)+(A*EN+B)       
      QIN(4,I)=QIN(4,I)/(1.0+APOP2)*1.D-16                      
#  VIB 2                                                                
  300 QIN(5,I)=0.0                                                      
      IF(EN <= EIN(5):
) GO TO 400 
      EFAC=math.sqrt(1.0-(EIN(5)/EN))
      QIN(5,I)=0.44*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      DO 310 J=2,NVIBH                                                  
      IF(EN <= XVIBH(J):
) GO TO 320                                      
  310 CONTINUE                                                          
      J=NVIBH                                                           
  320 A=(YVIBH(J)-YVIBH(J-1))/(XVIBH(J)-XVIBH(J-1))                     
      B=(XVIBH(J-1)*YVIBH(J)-XVIBH(J)*YVIBH(J-1))/(XVIBH(J-1)-XVIBH(J)) 
      QIN(5,I)=(QIN(5,I)+(A*EN+B))*1.D-16                               
  400 CONTINUE                                                          
#  VIB 3                                                                
      QIN(6,I)=0.0                                                      
      IF(EN <= EIN(6):
) GO TO 500  
      EFAC=math.sqrt(1.0-(EIN(6)/EN))
      QIN(6,I)=0.84*math.log((1.0+EFAC)/(1.0-EFAC))/EN                      
      DO 410 J=2,NVIBH                                                  
      IF(EN <= XVIBH(J):
) GO TO 420                                      
  410 CONTINUE                                                          
      J=NVIBH                                                           
  420 A=(YVIBH(J)-YVIBH(J-1))/(XVIBH(J)-XVIBH(J-1))                     
      B=(XVIBH(J-1)*YVIBH(J)-XVIBH(J)*YVIBH(J-1))/(XVIBH(J-1)-XVIBH(J)) 
      QIN(6,I)=(QIN(6,I)+(A*EN+B))*1.D-16                               
  500 CONTINUE                                                          
# EXC                                                                            
      QIN(7,I)=0.0                                                      
      IF(EN <= EIN(7):
) GO TO 600        
      DO 510 J=2,NEXC                                                   
      IF(EN <= XEXC(J):
) GO TO 520                                       
  510 CONTINUE                                                          
      J=NEXC                                                            
  520 A=(YEXC(J)-YEXC(J-1))/(XEXC(J)-XEXC(J-1))                         
      B=(XEXC(J-1)*YEXC(J)-XEXC(J)*YEXC(J-1))/(XEXC(J-1)-XEXC(J))       
      QIN(7,I)=(A*EN+B)*1.D-16                                         
  600 CONTINUE                                                          
#  EXC 1                                                               
      QIN(8,I)=0.0                                                      
      IF(EN <= EIN(8):
) GO TO 700                                        
      DO 610 J=2,NEXC1                                                  
      IF(EN <= XEXC1(J):
) GO TO 620                                      
  610 CONTINUE                                                          
      J=NEXC1                                                           
  620 A=(YEXC1(J)-YEXC1(J-1))/(XEXC1(J)-XEXC1(J-1))                     
      B=(XEXC1(J-1)*YEXC1(J)-XEXC1(J)*YEXC1(J-1))/(XEXC1(J-1)-XEXC1(J)) 
      QIN(8,I)=(A*EN+B)*1.D-16                                    
  700 CONTINUE
# EXC 2
      QIN(9,I)=0.0
      IF(EN <= EIN(9):
) GO TO 800  
      DO 710 J=2,NEXC2                                                  
      IF(EN <= XEXC2(J):
) GO TO 720                                      
  710 CONTINUE                                                          
      J=NEXC2                                                           
  720 A=(YEXC2(J)-YEXC2(J-1))/(XEXC2(J)-XEXC2(J-1))                     
      B=(XEXC2(J-1)*YEXC2(J)-XEXC2(J)*YEXC2(J-1))/(XEXC2(J-1)-XEXC2(J)) 
      QIN(9,I)=(A*EN+B)*1.D-16                                    
  800 CONTINUE
#---------------------------------------------------------------------
#    SUBTRACT ROTATIONAL XSEC TO GET CORRECT ELASTIC XSEC. 
      Q(2,I)=Q(2,I)-QIN(1,I)-QIN(2,I) 
#     IF(Q(2,I) <= 0.0) WRITE(6,966) Q(2,I),I
# 966 FORMAT(3X,' ERROR IN GAS 27 Q(2,I)=',E12.3,'  I=',I5)     
#  TOTAL        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)+QIN(1,I)+QIN(2,I)+
     /QIN(3,I)+QIN(4,I)+QIN(5,I)+QIN(6,I)+QIN(7,I)+QIN(8,I)+QIN(9,I)
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      IF(EFINAL <= EIN(9):
) NIN=8
      IF(EFINAL <= EIN(8):
) NIN=7 
      IF(EFINAL <= EIN(7):
) NIN=6   
      IF(EFINAL <= EIN(6):
) NIN=5                                        
      IF(EFINAL <= EIN(5):
) NIN=4                                        
      IF(EFINAL <= EIN(4):
) NIN=3                                        
      IF(EFINAL <= EIN(3):
) NIN=2                                        
      IF(EFINAL <= EIN(2):
) NIN=1                                        
      IF(EFINAL <= EIN(1):
) NIN=0                                        
#                                                                       
      RETURN                                                            
      # end
      def GAS35(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)  
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6) 
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)        
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      DIMENSION XEN(24),YXSEC(24),XVIBH(18),YVIBH(18),XION(48),YION(48),
     /XATT(17),YATT(17),XEXC(25),YEXC(25),XEXC1(23),YEXC1(23),
     /XEXC2(19),YEXC2(19)
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME                                                 
      DATA XEN/0.00,.001,0.01,0.10,0.40,1.00,1.50,2.00,3.00,
     /4.00,5.00,7.50,10.0,12.0,15.0,20.0,30.0,60.0,100.,                
     /200.0,500.0,1000.0,10000.,100000./
      DATA YXSEC/2060.,2060.,1750.,175.,42.5,16.5,13.5,12.5,13.5,       
     /18.0,21.0,27.0,26.5,25.0,21.0,16.0,12.0,5.00,2.90,
     /1.05,0.35,0.16,.012,.001/                                         
      DATA XVIBH/0.00,2.00,3.00,4.00,5.00,6.00,7.00,8.00,9.00,10.0,
     /11.0,12.0,15.0,20.0,100.,1000.,10000.,100000./               
      DATA YVIBH/0.00,0.00,.025,0.25,0.66,0.88,1.05,1.10,1.05,0.88,     
     /0.66,0.50,0.33,0.19,.022,.0011,.00011,.000011/                    
      DATA XION/10.48,11.0,12.0,12.5,13.0,14.0,15.0,17.0,20.0,25.0,     
     /30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,
     /125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,
     /600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,
     /3000.,5000.,7000.,10000.,15000.,30000.,60000.,100000./            
      DATA YION/0.00,0.11,0.32,0.45,0.59,0.91,1.32,2.21,3.12,5.01,      
     /6.22,7.09,7.69,8.21,8.87,9.41,9.71,9.81,9.81,9.81,
     /9.52,9.00,8.50,8.03,7.50,6.58,6.01,5.56,5.06,4.74,
     /4.16,3.84,3.53,3.14,2.93,2.54,2.18,1.98,1.81,1.56,
     /1.34,0.88,0.66,0.49,0.35,.188,.101,.063/
      DATA XATT/5.00,5.50,6.00,7.00,7.50,8.00,8.50,9.00,9.50,10.0,      
     /10.4,11.0,12.0,13.0,14.0,15.0,20.0/                  
      DATA YATT/0.00,.145,0.44,0.38,0.32,0.24,0.26,0.36,0.66,1.24,   
     /2.00,1.08,0.30,0.20,0.16,0.12,0.00/  
      DATA XEXC/7.20,9.00,10.0,11.0,12.0,14.0,16.0,20.0,25.0,30.0,
     /40.0,60.0,80.0,100.,150.,200.,300.,400.,600.,1000.,
     /2000.,4000.,10000.,20000.,100000./ 
      DATA YEXC/0.00,0.81,1.18,1.27,1.31,1.35,1.35,1.35,1.35,1.35,
     /1.39,1.39,1.35,1.27,1.06,0.98,0.82,0.77,0.65,0.42,
     /0.20,0.10,.041,.021,.004/                             
      DATA XEXC1/9.50,10.5,11.5,13.5,16.0,20.0,25.0,30.0,
     /40.0,60.0,80.0,100.,150.,200.,300.,400.,600.,1000.,
     /2000.,4000.,10000.,20000.,100000./                                
      DATA YEXC1/0.00,0.14,0.30,0.56,0.86,1.15,1.35,1.46,               
     /1.59,1.64,1.59,1.49,1.25,1.15,0.96,0.90,0.77,0.50,
     /0.24,0.12,.048,.025,.005/
      DATA XEXC2/16.0,20.0,25.0,30.0,
     /40.0,60.0,80.0,100.,150.,200.,300.,400.,600.,1000.,
     /2000.,4000.,10000.,20000.,100000./
      DATA YEXC2/0.00,0.32,0.69,0.96,
     /1.35,1.59,1.59,1.49,1.25,1.15,0.96,0.90,0.77,0.50,
     /0.24,0.12,.048,.025,.005/   
#                                             
      NAME=' ETHANOL   1999'                                            
# --------------------------------------------------------------------  
#   VIBRATION EXCITATION AND IONISATION FROM SCALING PROPANE X-SECTIONS
#   EXPERIMENTAL DATA FROM CHRISTOPHOROU AND FROMMHOLD ALSO MIXTURE 
c   DATA WITH ARGON FROM COLLI AND LEONARDIS
# ---------------------------------------------------------------------
#
      NION=1 
      NATT=1
      NIN=9
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0          
      NDATA=24                                                          
      NVIBH=18                                                          
      NIOND=48                                                          
      NATT1=17
      NEXC=25                                                           
      NEXC1=23 
      NEXC2=19
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(46.06904*AMU)                                     
      E(3)=10.48                                                        
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
      EOBY(1)=10.48
      EIN(1)=-0.025
      EIN(2)=0.025
      EIN(3)=-0.109  
      EIN(4)=0.109                                                      
      EIN(5)=0.1668                                                     
      EIN(6)=0.3527
      EIN(7)=7.20 
      EIN(8)=9.50          
      EIN(9)=16.0
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       ETHANOL        '
      SCRPT(3)=' IONISATION    ELOSS= 10.48   '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      SCRPT(7)=' ROT           ELOSS= -0.025  '
      SCRPT(8)=' ROT           ELOSS=  0.025  '
      SCRPT(9)=' VIB V8        ELOSS= -0.109  '
      SCRPT(10)=' VIB V8        ELOSS=  0.109  '
      SCRPT(11)=' VIB V6        ELOSS=  0.1668 '
      SCRPT(12)=' VIB V3        ELOSS=  0.3527 '
      SCRPT(13)=' EXC           ELOSS=  7.20   '
      SCRPT(14)=' EXC           ELOSS=  9.50   '
      SCRPT(15)=' EXC           ELOSS= 16.0    '
      APOP1=math.exp(EIN(1)/AKT)
      APOP2=math.exp(EIN(3)/AKT)                                            
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP 
      Q(2,I)=0.0
# USE LOG INTERPOLATION BECAUSE OF RAPID CHANGE IN X-SEC
      IF(EN <= XEN(2):
) :
       Q(2,I)=YXSEC(2)*1.D-16
       GO TO 30
      # endIF
      DO 10 J=2,NDATA                                                   
      IF(EN <= XEN(J):
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA
   20 YXJ=math.log(YXSEC(J))
      YXJ1=math.log(YXSEC(J-1))
      XNJ=math.log(XEN(J))
      XNJ1=math.log(XEN(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      Q(2,I)=math.exp(A*math.log(EN)+B)*1.D-16  
#                                                                       
   30 Q(3,I)=0.0                                                        
      IF(EN < E(3):
) GO TO 40                                           
      DO 31 J=2,NIOND                                                   
      IF(EN <= XION(J):
) GO TO 32                                        
   31 CONTINUE                                                          
      J=NIOND                                                    
   32 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.D-16                                            
   40 CONTINUE                                                          
#                                                                       
      Q(4,I)=0.0                                      
      QATT(1,I)=Q(4,I)                  
      IF(EN < XATT(1):
) GO TO 50
      IF(EN >= XATT(NATT1):
) GO TO 50                                   
      DO 41 J=2,NATT1                                                   
      IF(EN <= XATT(J):
) GO TO 42                                        
   41 CONTINUE                                                          
      J=NATT1                                                           
   42 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))                         
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))       
      Q(4,I)=(A*EN+B)*1.D-19  
      QATT(1,I)=Q(4,I)                                          
   50 CONTINUE                                                          
      Q(5,I)=0.0                                                        
      Q(6,I)=0.0                                                        
#                                                                      
#  SUPERELASTIC  ROT1
#
      QIN(1,I)=0.0
      IF(EN <= 0.0):
 GO TO 150
      EFAC=math.sqrt(1.0-(EIN(1)/EN))
      QIN(1,I)=0.7*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      QIN(1,I)=QIN(1,I)*APOP1/(1.0+APOP1)*1.D-16
#  ROT1     
  150 QIN(2,I)=0.0                                                      
      IF(EN <= EIN(2):
) GO TO 200 
      EFAC=math.sqrt(1.0-(EIN(2)/EN))                                       
      QIN(2,I)=0.7*math.log((1.0+EFAC)/(1.0-EFAC))/EN 
      QIN(2,I)=QIN(2,I)/(1.0+APOP1)*1.D-16                     
# 
#  SUPERELASTIC V1   
#
  200 QIN(3,I)=0.0                                                      
      IF(EN <= 0.0):
 GO TO 250                                           
      EFAC=math.sqrt(1.0-(EIN(3)/EN))                                       
      QIN(3,I)=0.403*math.log((EFAC+1.0)/(EFAC-1.0))/EN 
      DO 220 J=2,NVIBH
      IF((EN+EIN(4):
) <= XVIBH(J)) GO TO 230  
  220 CONTINUE
      J=NVIBH
  230 A=(YVIBH(J)-YVIBH(J-1))/(XVIBH(J)-XVIBH(J-1))
      B=(XVIBH(J-1)*YVIBH(J)-XVIBH(J)*YVIBH(J-1))/(XVIBH(J-1)-XVIBH(J))
      QIN(3,I)=QIN(3,I)+(EN+EIN(4))*(A*(EN+EIN(4))+B)/EN                
      QIN(3,I)=QIN(3,I)*APOP2/(1.0+APOP2)*1.D-16                        
# INELASTIC V1                                                          
  250 QIN(4,I)=0.0                                                      
      IF(EN <= EIN(4):
) GO TO 300                                        
      EFAC=math.sqrt(1.0-(EIN(4)/EN))                                       
      QIN(4,I)=0.403*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      DO 270 J=2,NVIBH
      IF(EN <= XVIBH(J):
) GO TO 280
  270 CONTINUE
      J=NVIBH
  280 A=(YVIBH(J)-YVIBH(J-1))/(XVIBH(J)-XVIBH(J-1)) 
      B=(XVIBH(J-1)*YVIBH(J)-XVIBH(J)*YVIBH(J-1))/(XVIBH(J-1)-XVIBH(J))
      QIN(4,I)=QIN(4,I)+(A*EN+B)       
      QIN(4,I)=QIN(4,I)/(1.0+APOP2)*1.D-16                      
#  VIB 2                                                                
  300 QIN(5,I)=0.0                                                      
      IF(EN <= EIN(5):
) GO TO 400 
      EFAC=math.sqrt(1.0-(EIN(5)/EN))
      QIN(5,I)=0.423*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      DO 310 J=2,NVIBH                                                  
      IF(EN <= XVIBH(J):
) GO TO 320                                      
  310 CONTINUE                                                          
      J=NVIBH                                                           
  320 A=(YVIBH(J)-YVIBH(J-1))/(XVIBH(J)-XVIBH(J-1))                     
      B=(XVIBH(J-1)*YVIBH(J)-XVIBH(J)*YVIBH(J-1))/(XVIBH(J-1)-XVIBH(J)) 
      QIN(5,I)=(QIN(5,I)+(A*EN+B))*1.D-16                               
  400 CONTINUE                                                          
#  VIB 3                                                                
      QIN(6,I)=0.0                                                      
      IF(EN <= EIN(6):
) GO TO 500  
      EFAC=math.sqrt(1.0-(EIN(6)/EN))
      QIN(6,I)=0.84*math.log((1.0+EFAC)/(1.0-EFAC))/EN                      
      DO 410 J=2,NVIBH                                                  
      IF(EN <= XVIBH(J):
) GO TO 420                                      
  410 CONTINUE                                                          
      J=NVIBH                                                           
  420 A=(YVIBH(J)-YVIBH(J-1))/(XVIBH(J)-XVIBH(J-1))                     
      B=(XVIBH(J-1)*YVIBH(J)-XVIBH(J)*YVIBH(J-1))/(XVIBH(J-1)-XVIBH(J)) 
      QIN(6,I)=(QIN(6,I)+(A*EN+B))*1.D-16                               
  500 CONTINUE                                                          
# EXC                                                                            
      QIN(7,I)=0.0                                                      
      IF(EN <= EIN(7):
) GO TO 600        
      DO 510 J=2,NEXC                                                   
      IF(EN <= XEXC(J):
) GO TO 520                                       
  510 CONTINUE                                                          
      J=NEXC                                                            
  520 A=(YEXC(J)-YEXC(J-1))/(XEXC(J)-XEXC(J-1))                         
      B=(XEXC(J-1)*YEXC(J)-XEXC(J)*YEXC(J-1))/(XEXC(J-1)-XEXC(J))       
      QIN(7,I)=(A*EN+B)*1.D-16                                         
  600 CONTINUE                                                          
#  EXC 1                                                               
      QIN(8,I)=0.0                                                      
      IF(EN <= EIN(8):
) GO TO 700                                        
      DO 610 J=2,NEXC1                                                  
      IF(EN <= XEXC1(J):
) GO TO 620                                      
  610 CONTINUE                                                          
      J=NEXC1                                                           
  620 A=(YEXC1(J)-YEXC1(J-1))/(XEXC1(J)-XEXC1(J-1))                     
      B=(XEXC1(J-1)*YEXC1(J)-XEXC1(J)*YEXC1(J-1))/(XEXC1(J-1)-XEXC1(J)) 
      QIN(8,I)=(A*EN+B)*1.D-16                                    
  700 CONTINUE
# EXC 2
      QIN(9,I)=0.0
      IF(EN <= EIN(9):
) GO TO 800  
      DO 710 J=2,NEXC2                                                  
      IF(EN <= XEXC2(J):
) GO TO 720                                      
  710 CONTINUE                                                          
      J=NEXC2                                                           
  720 A=(YEXC2(J)-YEXC2(J-1))/(XEXC2(J)-XEXC2(J-1))                     
      B=(XEXC2(J-1)*YEXC2(J)-XEXC2(J)*YEXC2(J-1))/(XEXC2(J-1)-XEXC2(J)) 
      QIN(9,I)=(A*EN+B)*1.D-16                                    
  800 CONTINUE
#---------------------------------------------------------------------
#    SUBTRACT ROTATIONAL XSEC TO GET CORRECT ELASTIC XSEC. 
      Q(2,I)=Q(2,I)-QIN(1,I)-QIN(2,I) 
#     IF(Q(2,I) <= 0.0) WRITE(6,966) Q(2,I),I
# 966 FORMAT(3X,' ERROR IN GAS 27 Q(2,I)=',E12.3,'  I=',I5)     
#  TOTAL        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)+QIN(1,I)+QIN(2,I)+
     /QIN(3,I)+QIN(4,I)+QIN(5,I)+QIN(6,I)+QIN(7,I)+QIN(8,I)+QIN(9,I)
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      IF(EFINAL <= EIN(9):
) NIN=8
      IF(EFINAL <= EIN(8):
) NIN=7 
      IF(EFINAL <= EIN(7):
) NIN=6   
      IF(EFINAL <= EIN(6):
) NIN=5                                        
      IF(EFINAL <= EIN(5):
) NIN=4                                        
      IF(EFINAL <= EIN(4):
) NIN=3                                        
      IF(EFINAL <= EIN(3):
) NIN=2                                        
      IF(EFINAL <= EIN(2):
) NIN=1                                        
      IF(EFINAL <= EIN(1):
) NIN=0                                        
#                                                                       
      RETURN                                                            
      # end
      def GAS36(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)  
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)   
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)      
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      DIMENSION XEN(24),YXSEC(24),XVIBH(18),YVIBH(18),XION(46),YION(46),
     /XATT(17),YATT(17),XEXC(25),YEXC(25),XEXC1(23),YEXC1(23),
     /XEXC2(19),YEXC2(19)
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME                                                 
      DATA XEN/0.00,.001,0.01,0.10,0.40,1.00,1.50,2.00,3.00,
     /4.00,5.00,7.50,10.0,12.0,15.0,20.0,30.0,60.0,100.,                
     /200.0,500.0,1000.0,10000.,100000./
      DATA YXSEC/2160.,2160.,1840.,184.,44.5,17.0,14.0,13.0,14.0,       
     /21.0,26.0,33.5,33.5,31.5,26.5,20.5,15.5,6.50,3.70,
     /1.30,0.45,0.21,.015,.0012/                                        
      DATA XVIBH/0.00,2.00,3.00,4.00,5.00,6.00,7.00,8.00,9.00,10.0,
     /11.0,12.0,15.0,20.0,100.,1000.,10000.,100000./               
      DATA YVIBH/0.00,0.00,.034,0.34,0.89,1.19,1.42,1.48,1.42,1.19,     
     /0.89,0.68,0.45,0.25,.030,.0015,.00015,.000015/                    
      DATA XION/10.18,10.7,12.0,13.0,14.0,16.5,19.5,25.0,30.0,35.0,     
     /40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,
     /175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,
     /800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,5000.,
     /7000.,10000.,15000.,30000.,60000.,100000./                        
      DATA YION/0.00,0.26,0.59,0.96,1.43,2.91,4.17,6.57,8.16,9.30,      
     /10.1,10.8,11.6,12.3,12.7,12.9,12.9,12.9,12.5,11.8,
     /11.2,10.6,9.80,8.63,7.88,7.29,6.64,6.22,5.46,5.04,
     /4.63,4.12,3.85,3.33,2.86,2.60,2.37,2.05,1.76,1.16,
     /0.87,0.64,0.46,0.25,0.11,.083/             
      DATA XATT/5.00,5.50,6.00,7.00,7.50,8.00,8.50,9.00,9.50,10.0,      
     /10.4,11.0,12.0,13.0,14.0,15.0,20.0/                  
      DATA YATT/0.00,.145,0.44,0.38,0.32,0.24,0.26,0.36,0.66,1.24,   
     /2.00,1.08,0.30,0.20,0.16,0.12,0.00/  
      DATA XEXC/7.00,9.00,10.0,11.0,12.0,14.0,16.0,20.0,25.0,30.0,
     /40.0,60.0,80.0,100.,150.,200.,300.,400.,600.,1000.,
     /2000.,4000.,10000.,20000.,100000./ 
      DATA YEXC/0.00,1.07,1.57,1.69,1.74,1.80,1.80,1.80,1.80,1.80,
     /1.85,1.85,1.80,1.69,1.41,1.30,1.09,1.02,0.86,0.56,
     /0.27,0.13,.055,.028,.005/                             
      DATA XEXC1/9.00,10.0,11.0,13.0,16.0,20.0,25.0,30.0,
     /40.0,60.0,80.0,100.,150.,200.,300.,400.,600.,1000.,
     /2000.,4000.,10000.,20000.,100000./                                
      DATA YEXC1/0.00,0.19,0.40,0.75,1.14,1.53,1.80,1.94,               
     /2.11,2.18,2.11,1.98,1.66,1.53,1.28,1.20,1.02,0.67,
     /0.32,0.16,.064,.033,.007/
      DATA XEXC2/16.0,20.0,25.0,30.0,
     /40.0,60.0,80.0,100.,150.,200.,300.,400.,600.,1000.,
     /2000.,4000.,10000.,20000.,100000./
      DATA YEXC2/0.00,0.42,0.92,1.28,
     /1.80,2.11,2.11,1.98,1.66,1.53,1.28,1.20,1.02,0.67,
     /0.32,0.16,.064,.033,.007/   
#                                             
      NAME='2-PROPANOL 1999'                                            
# --------------------------------------------------------------------  
#   X-SECTIONS FROM SCALING ETHANOL X-SECTIONS  AT LOW ENERGY AND 
#   FITS TO DRIFT VELOCITY OF CHRISTOPHOROU AND CHRISTODOULIDES.   
# ---------------------------------------------------------------------
#
      NION=1 
      NATT=1
      NIN=9
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0    
      NDATA=24                                                          
      NVIBH=18                                                          
      NIOND=46                                                          
      NATT1=17
      NEXC=25                                                           
      NEXC1=23 
      NEXC2=19
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(60.09592*AMU)                                     
      E(3)=10.18                                                        
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
      EOBY(1)=10.18
      EIN(1)=-0.025
      EIN(2)=0.025
      EIN(3)=-0.109  
      EIN(4)=0.109                                                      
      EIN(5)=0.1668                                                     
      EIN(6)=0.3527
      EIN(7)=7.00 
      EIN(8)=9.00          
      EIN(9)=16.0
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       PROPANOL       '
      SCRPT(3)=' IONISATION    ELOSS= 10.18   '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      SCRPT(7)=' ROT           ELOSS= -0.025  '
      SCRPT(8)=' ROT           ELOSS=  0.025  '
      SCRPT(9)=' VIB V8        ELOSS= -0.109  '
      SCRPT(10)=' VIB V8        ELOSS=  0.109  '
      SCRPT(11)=' VIB V6        ELOSS=  0.1668 '
      SCRPT(12)=' VIB V3        ELOSS=  0.3527 '
      SCRPT(13)=' EXC           ELOSS=  7.00   '
      SCRPT(14)=' EXC           ELOSS=  9.00   '
      SCRPT(15)=' EXC           ELOSS= 16.0    '
      APOP1=math.exp(EIN(1)/AKT)
      APOP2=math.exp(EIN(3)/AKT)                                            
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP 
      Q(2,I)=0.0
# USE LOG INTERPOLATION BECAUSE OF RAPID CHANGE IN X-SEC
      IF(EN <= XEN(2):
) :
       Q(2,I)=YXSEC(2)*1.D-16
       GO TO 30
      # endIF
      DO 10 J=2,NDATA                                                   
      IF(EN <= XEN(J):
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA
   20 YXJ=math.log(YXSEC(J))
      YXJ1=math.log(YXSEC(J-1))
      XNJ=math.log(XEN(J))
      XNJ1=math.log(XEN(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      Q(2,I)=math.exp(A*math.log(EN)+B)*1.D-16  
#                                                                       
   30 Q(3,I)=0.0                                                        
      IF(EN < E(3):
) GO TO 40                                           
      DO 31 J=2,NIOND                                                   
      IF(EN <= XION(J):
) GO TO 32                                        
   31 CONTINUE                                                          
      J=NIOND                                                           
   32 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.D-16                                            
   40 CONTINUE                                                          
#                                                                       
      Q(4,I)=0.0                                   
      QATT(1,I)=Q(4,I)                     
      IF(EN < XATT(1):
) GO TO 50
      IF(EN >= XATT(NATT1):
) GO TO 50                                   
      DO 41 J=2,NATT1                                                   
      IF(EN <= XATT(J):
) GO TO 42                                        
   41 CONTINUE                                                          
      J=NATT1                                                           
   42 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))                         
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))       
      Q(4,I)=(A*EN+B)*1.D-19    
      QATT(1,I)=Q(4,I)                                        
   50 CONTINUE                                                          
      Q(5,I)=0.0                                                        
      Q(6,I)=0.0                                                        
#                                                                      
#  SUPERELASTIC  ROT1
#
      QIN(1,I)=0.0
      IF(EN <= 0.0):
 GO TO 150
      EFAC=math.sqrt(1.0-(EIN(1)/EN))
      QIN(1,I)=0.7*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      QIN(1,I)=QIN(1,I)*APOP1/(1.0+APOP1)*1.D-16
#  ROT1     
  150 QIN(2,I)=0.0                                                      
      IF(EN <= EIN(2):
) GO TO 200 
      EFAC=math.sqrt(1.0-(EIN(2)/EN))                                       
      QIN(2,I)=0.7*math.log((1.0+EFAC)/(1.0-EFAC))/EN 
      QIN(2,I)=QIN(2,I)/(1.0+APOP1)*1.D-16                     
# 
#  SUPERELASTIC V1   
#
  200 QIN(3,I)=0.0                                                      
      IF(EN <= 0.0):
 GO TO 250                                           
      EFAC=math.sqrt(1.0-(EIN(3)/EN))                                       
      QIN(3,I)=0.443*math.log((EFAC+1.0)/(EFAC-1.0))/EN 
      DO 220 J=2,NVIBH
      IF((EN+EIN(4):
) <= XVIBH(J)) GO TO 230  
  220 CONTINUE
      J=NVIBH
  230 A=(YVIBH(J)-YVIBH(J-1))/(XVIBH(J)-XVIBH(J-1))
      B=(XVIBH(J-1)*YVIBH(J)-XVIBH(J)*YVIBH(J-1))/(XVIBH(J-1)-XVIBH(J))
      QIN(3,I)=QIN(3,I)+(EN+EIN(4))*(A*(EN+EIN(4))+B)/EN                
      QIN(3,I)=QIN(3,I)*APOP2/(1.0+APOP2)*1.D-16                        
# INELASTIC V1                                                          
  250 QIN(4,I)=0.0                                                      
      IF(EN <= EIN(4):
) GO TO 300                                        
      EFAC=math.sqrt(1.0-(EIN(4)/EN))                                       
      QIN(4,I)=0.443*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      DO 270 J=2,NVIBH
      IF(EN <= XVIBH(J):
) GO TO 280
  270 CONTINUE
      J=NVIBH
  280 A=(YVIBH(J)-YVIBH(J-1))/(XVIBH(J)-XVIBH(J-1)) 
      B=(XVIBH(J-1)*YVIBH(J)-XVIBH(J)*YVIBH(J-1))/(XVIBH(J-1)-XVIBH(J))
      QIN(4,I)=QIN(4,I)+(A*EN+B)       
      QIN(4,I)=QIN(4,I)/(1.0+APOP2)*1.D-16                      
#  VIB 2                                                                
  300 QIN(5,I)=0.0                                                      
      IF(EN <= EIN(5):
) GO TO 400 
      EFAC=math.sqrt(1.0-(EIN(5)/EN))
      QIN(5,I)=0.465*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      DO 310 J=2,NVIBH                                                  
      IF(EN <= XVIBH(J):
) GO TO 320                                      
  310 CONTINUE                                                          
      J=NVIBH                                                           
  320 A=(YVIBH(J)-YVIBH(J-1))/(XVIBH(J)-XVIBH(J-1))                     
      B=(XVIBH(J-1)*YVIBH(J)-XVIBH(J)*YVIBH(J-1))/(XVIBH(J-1)-XVIBH(J)) 
      QIN(5,I)=(QIN(5,I)+(A*EN+B))*1.D-16                               
  400 CONTINUE                                                          
#  VIB 3                                                                
      QIN(6,I)=0.0                                                      
      IF(EN <= EIN(6):
) GO TO 500  
      EFAC=math.sqrt(1.0-(EIN(6)/EN))
      QIN(6,I)=0.92*math.log((1.0+EFAC)/(1.0-EFAC))/EN                      
      DO 410 J=2,NVIBH                                                  
      IF(EN <= XVIBH(J):
) GO TO 420                                      
  410 CONTINUE                                                          
      J=NVIBH                                                           
  420 A=(YVIBH(J)-YVIBH(J-1))/(XVIBH(J)-XVIBH(J-1))                     
      B=(XVIBH(J-1)*YVIBH(J)-XVIBH(J)*YVIBH(J-1))/(XVIBH(J-1)-XVIBH(J)) 
      QIN(6,I)=(QIN(6,I)+(A*EN+B))*1.D-16                               
  500 CONTINUE                                                          
# EXC                                                                            
      QIN(7,I)=0.0                                                      
      IF(EN <= EIN(7):
) GO TO 600        
      DO 510 J=2,NEXC                                                   
      IF(EN <= XEXC(J):
) GO TO 520                                       
  510 CONTINUE                                                          
      J=NEXC                                                            
  520 A=(YEXC(J)-YEXC(J-1))/(XEXC(J)-XEXC(J-1))                         
      B=(XEXC(J-1)*YEXC(J)-XEXC(J)*YEXC(J-1))/(XEXC(J-1)-XEXC(J))       
      QIN(7,I)=(A*EN+B)*1.D-16                                         
  600 CONTINUE                                                          
#  EXC 1                                                               
      QIN(8,I)=0.0                                                      
      IF(EN <= EIN(8):
) GO TO 700                                        
      DO 610 J=2,NEXC1                                                  
      IF(EN <= XEXC1(J):
) GO TO 620                                      
  610 CONTINUE                                                          
      J=NEXC1                                                           
  620 A=(YEXC1(J)-YEXC1(J-1))/(XEXC1(J)-XEXC1(J-1))                     
      B=(XEXC1(J-1)*YEXC1(J)-XEXC1(J)*YEXC1(J-1))/(XEXC1(J-1)-XEXC1(J)) 
      QIN(8,I)=(A*EN+B)*1.D-16                                    
  700 CONTINUE
# EXC 2
      QIN(9,I)=0.0
      IF(EN <= EIN(9):
) GO TO 800  
      DO 710 J=2,NEXC2                                                  
      IF(EN <= XEXC2(J):
) GO TO 720                                      
  710 CONTINUE                                                          
      J=NEXC2                                                           
  720 A=(YEXC2(J)-YEXC2(J-1))/(XEXC2(J)-XEXC2(J-1))                     
      B=(XEXC2(J-1)*YEXC2(J)-XEXC2(J)*YEXC2(J-1))/(XEXC2(J-1)-XEXC2(J)) 
      QIN(9,I)=(A*EN+B)*1.D-16                                    
  800 CONTINUE
#---------------------------------------------------------------------
#    SUBTRACT ROTATIONAL XSEC TO GET CORRECT ELASTIC XSEC. 
      Q(2,I)=Q(2,I)-QIN(1,I)-QIN(2,I) 
#     IF(Q(2,I) <= 0.0) WRITE(6,966) Q(2,I),I
# 966 FORMAT(3X,' ERROR IN GAS 27 Q(2,I)=',E12.3,'  I=',I5)     
#  TOTAL        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)+QIN(1,I)+QIN(2,I)+
     /QIN(3,I)+QIN(4,I)+QIN(5,I)+QIN(6,I)+QIN(7,I)+QIN(8,I)+QIN(9,I)
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      IF(EFINAL <= EIN(9):
) NIN=8
      IF(EFINAL <= EIN(8):
) NIN=7 
      IF(EFINAL <= EIN(7):
) NIN=6   
      IF(EFINAL <= EIN(6):
) NIN=5                                        
      IF(EFINAL <= EIN(5):
) NIN=4                                        
      IF(EFINAL <= EIN(4):
) NIN=3                                        
      IF(EFINAL <= EIN(3):
) NIN=2                                        
      IF(EFINAL <= EIN(2):
) NIN=1                                        
      IF(EFINAL <= EIN(1):
) NIN=0                                        
#                                                                       
      RETURN                                                            
      # end
      def GAS37(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY  
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN) 
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6) 
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)        
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      DIMENSION XEN(67),YXSEC(67),XATT(3),YATT(3),XION(27),YION(27),  
     /XEXC1(27),YEXC1(27),XEXC2(25),YEXC2(25),XEXC3(22),YEXC3(22),
     /XEXC4(20),YEXC4(20),XEXC5(18),YEXC5(18)
      CHARACTER*50 SCRPT(300),SCRPTN(10)        
      CHARACTER*25 NAME                                                 
      DATA XEN/0.00,.00005,.0001,.00015,.0002,.0003,.0004,.0005,.0006,
     /.0007,          
     /.0008,.0009,.001,.00125,.0015,.0017,.00185,.002,.0025,.003,       
     /.004,.005,.0056,.006,.007,.008,.009,0.01,.0125,.013,              
     /.015,0.02,.025,0.03,0.04,0.05,0.06,0.07,0.08,0.09,                
     /0.10,0.20,0.30,0.40,0.50,0.60,0.70,0.80,0.90,1.00,
     /1.20,1.40,1.50,1.60,1.80,2.00,2.20,2.40,2.60,2.80,                
     /4.00,10.0,1000.,2000.,10000.,20000.,100000./
      DATA YXSEC/1190.,1188.,1005.,916.,851.,760.,708.,667.,639.,624.,  
     /609.,639.,696.,1149.,4745.,10930.,10930.,7038.,2782.,2130.,
     /2354.,4620.,6849.,6300.,4016.,2848.,2520.,2876.,4365.,4745.,      
     /4515.,2876.,1775.,1430.,1039.,851.,790.,710.,670.,630.,    
     /600.,415.,340.,290.,260.,230.,210.,195.,180.,170.,
     /135.,100.,80.0,65.0,58.5,52.5,47.6,44.4,43.1,41.2,               
     /36.0,26.0,0.14,0.07,.012,.006,.0012/
      DATA XION/3.8926,5.00,6.00,7.00,8.00,10.0,12.0,14.0,15.0,17.0,    
     /20.0,25.0,30.0,40.0,50.0,60.0,80.0,100.,200.,300.,      
     /400.,500.,600.,700.,1000.,10000.,100000./         
      DATA YION/0.00,2.70,4.80,6.00,7.20,8.00,8.20,9.80,10.0,9.30,      
     /8.40,9.90,10.2,9.92,9.82,9.58,9.08,8.79,7.40,6.25,                
     /5.44,5.02,4.88,4.80,4.50,0.45,.045/               
      DATA XATT/10.0,100.0,100000./                                     
      DATA YATT/0.00,0.0000001,0.0000000001/                            
#  P1/2                                          
      DATA XEXC1/1.3859,1.40,1.45,1.50,1.60,1.70,1.90,2.00,2.20,2.50,   
     /3.00,3.50,4.00,5.00,6.00,7.00,8.00,10.0,15.0,20.0,
     /40.0,60.0,80.0,100.,1000.,10000.,100000./               
      DATA YEXC1/0.00,1.47,15.4,23.7,17.8,17.1,14.2,12.7,12.0,11.2,     
     /12.2,12.7,13.0,13.8,14.3,15.1,15.1,14.7,13.8,13.3,                
     /8.32,6.24,4.94,4.16,0.42,.042,.0042/
#  P3/2                                    
      DATA XEXC2/1.4546,1.50,1.60,1.70,1.90,2.00,2.20,2.50,3.00,3.50,   
     /4.00,5.00,6.00,7.00,8.00,10.0,15.0,20.0,40.0,60.0,                
     /80.0,100.,1000.,10000.,100000./    
      DATA YEXC2/0.00,23.7,34.6,32.3,26.9,24.2,21.5,19.5,20.5,21.5,     
     /22.0,23.3,24.2,25.5,25.5,24.9,23.3,22.4,14.1,10.6,                
     /8.36,7.04,0.70,0.07,.007/ 
#  D3/2 + D5/2                                             
      DATA XEXC3/1.7977,1.90,2.00,2.20,2.50,3.00,3.50,4.00,5.00,6.00,   
     /7.00,8.00,10.0,15.0,20.0,40.0,60.0,80.0,100.,1000.,               
     /10000.,100000./                      
      DATA YEXC3/0.00,7.50,14.7,19.8,20.3,21.8,23.2,23.5,24.9,25.8,     
     /27.3,27.3,26.6,24.9,24.0,15.0,11.3,8.93,7.52,0.75,                
     /.075,.0075/                 
#  S1/2                                                    
      DATA XEXC4/2.2981,2.40,2.50,3.00,3.50,4.00,5.00,6.00,7.00,8.00,   
     /10.0,15.0,20.0,40.0,60.0,80.0,100.,1000.,10000.,100000./          
      DATA YEXC4/0.00,3.40,4.90,6.40,7.30,7.50,7.95,8.25,8.70,8.70,     
     /8.47,7.95,7.65,4.80,3.60,2.85,2.40,0.24,.024,.0024/               
#  SUM OF HIGHER LEVELS
      DATA XEXC5/2.6986,3.00,3.50,4.00,5.00,6.00,7.00,8.00,10.0,15.0,   
     /20.0,40.0,60.0,80.0,100.,1000.,10000.,100000./                    
      DATA YEXC5/0.00,1.90,3.30,4.40,4.66,4.84,5.10,5.10,4.97,4.66,     
     /4.49,2.82,2.11,1.67,1.41,.141,.0141,.00141/                       
      NAME=' CESIUM 2001   '                                            
# --------------------------------------------------------------------- 
# ---------------------------------------------------------------------
      NION=1 
      NATT=1
      NIN=5
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0    
      NDATA=67                                                          
      NIOND=27
      NATT1=3                                                           
      NEXC1=27                                                          
      NEXC2=25                                                          
      NEXC3=22
      NEXC4=20
      NEXC5=18
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(132.90545*AMU)                                    
      E(3)=3.8926                                                       
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
      EOBY(1)=3.8926
      EIN(1)=1.3859
      EIN(2)=1.4546
      EIN(3)=1.7977
      EIN(4)=2.2981
      EIN(5)=2.6986
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       CESIUM         '
      SCRPT(3)=' IONISATION    ELOSS=  3.8926 '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      SCRPT(7)=' EXC P1/2      ELOSS=  1.3859 '
      SCRPT(8)=' EXC P3/2      ELOSS=  1.4546 '
      SCRPT(9)=' EXC D3/2+5/2  ELOSS=  1.7977 '
      SCRPT(10)=' EXC S1/2      ELOSS=  2.2981 '
      SCRPT(11)=' EXC HIGHER    ELOSS=  2.6986 '
      EN=-ESTEP/2.0                                      
      DO 1000 I=1,NSTEP                                              
      EN=EN+ESTEP                                                       
      DO 10 J=2,NDATA                                                   
      IF(EN <= XEN(J):
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA                                                           
   20 A=(YXSEC(J)-YXSEC(J-1))/(XEN(J)-XEN(J-1))                         
      B=(XEN(J-1)*YXSEC(J)-XEN(J)*YXSEC(J-1))/(XEN(J-1)-XEN(J))         
      Q(2,I)=(A*EN+B)*1.D-16
      Q(3,I)=0.0                                                        
      IF(EN < E(3):
) GO TO 200                                          
      DO 110 J=2,NIOND                                                  
      IF(EN <= XION(J):
) GO TO 120                                       
  110 CONTINUE                                                          
      J=NIOND                                                           
  120 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.D-16                                            
  200 Q(4,I)=0.0                                 
      QATT(1,I)=Q(4,I)                       
      IF(EN < XATT(1):
) GO TO 300                                       
      IF(EN >= XATT(NATT1):
) GO TO 300                                   
      DO 210 J=2,NATT1                                                  
      IF(EN <= XATT(J):
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NATT1                                                           
  220 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))                         
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))       
      Q(4,I)=(A*EN+B)*1.D-16    
      QATT(1,I)=Q(4,I)                                        
  300 Q(5,I)=0.0                                                        
      Q(6,I)=0.0   
#       
      QIN(1,I)=0.0                                                      
      IF(EN <= EIN(1):
) GO TO 400                                        
      DO 310 J=2,NEXC1                                                  
      IF(EN <= XEXC1(J):
) GO TO 320                                      
  310 CONTINUE                                                          
      J=NEXC1                                                           
  320 A=(YEXC1(J)-YEXC1(J-1))/(XEXC1(J)-XEXC1(J-1))                     
      B=(XEXC1(J-1)*YEXC1(J)-XEXC1(J)*YEXC1(J-1))/(XEXC1(J-1)-XEXC1(J)) 
      QIN(1,I)=(A*EN+B)*1.D-16                                          
  400 CONTINUE
#                                                            
      QIN(2,I)=0.0                                                      
      IF(EN <= EIN(2):
) GO TO 500                                        
      DO 410 J=2,NEXC2                                                  
      IF(EN <= XEXC2(J):
) GO TO 420                                      
  410 CONTINUE                                                          
      J=NEXC2                                                           
  420 A=(YEXC2(J)-YEXC2(J-1))/(XEXC2(J)-XEXC2(J-1))                     
      B=(XEXC2(J-1)*YEXC2(J)-XEXC2(J)*YEXC2(J-1))/(XEXC2(J-1)-XEXC2(J)) 
      QIN(2,I)=(A*EN+B)*1.D-16                                          
  500 CONTINUE
#                                                            
      QIN(3,I)=0.0                                                      
      IF(EN <= EIN(3):
) GO TO 600                                        
      DO 510 J=2,NEXC3                                                 
      IF(EN <= XEXC3(J):
) GO TO 520                                      
  510 CONTINUE                                                          
      J=NEXC3                                                           
  520 A=(YEXC3(J)-YEXC3(J-1))/(XEXC3(J)-XEXC3(J-1))                     
      B=(XEXC3(J-1)*YEXC3(J)-XEXC3(J)*YEXC3(J-1))/(XEXC3(J-1)-XEXC3(J)) 
      QIN(3,I)=(A*EN+B)*1.D-16                                          
  600 CONTINUE
#
      QIN(4,I)=0.0                                                      
      IF(EN <= EIN(4):
) GO TO 700                                        
      DO 610 J=2,NEXC4                                                 
      IF(EN <= XEXC4(J):
) GO TO 620                                      
  610 CONTINUE                                                          
      J=NEXC4                                                           
  620 A=(YEXC4(J)-YEXC4(J-1))/(XEXC4(J)-XEXC4(J-1))                     
      B=(XEXC4(J-1)*YEXC4(J)-XEXC4(J)*YEXC4(J-1))/(XEXC4(J-1)-XEXC4(J)) 
      QIN(4,I)=(A*EN+B)*1.D-16                                          
  700 CONTINUE
#                                                            
      QIN(5,I)=0.0                                                      
      IF(EN <= EIN(5):
) GO TO 800                                        
      DO 710 J=2,NEXC5                                                 
      IF(EN <= XEXC5(J):
) GO TO 720                                      
  710 CONTINUE                                                          
      J=NEXC5                                                           
  720 A=(YEXC5(J)-YEXC5(J-1))/(XEXC5(J)-XEXC5(J-1))                     
      B=(XEXC5(J-1)*YEXC5(J)-XEXC5(J)*YEXC5(J-1))/(XEXC5(J-1)-XEXC5(J)) 
      QIN(5,I)=(A*EN+B)*1.D-16                                          
  800 CONTINUE
#                                                                       
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)+QIN(1,I)+QIN(2,I)+QIN(3,I)+QIN(4,I)+
     /QIN(5,I)    
 1000 CONTINUE                                                          
#  SAVE COMPUTE TIME 
      IF(EFINAL <= EIN(5):
) NIN=4
      IF(EFINAL <= EIN(4):
) NIN=3                                        
      IF(EFINAL <= EIN(3):
) NIN=2                                        
      IF(EFINAL <= EIN(2):
) NIN=1                                        
      IF(EFINAL <= EIN(1):
) NIN=0                                        
      RETURN                                                            
      # end                                                               
      def GAS38(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)  
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),  
     /NG2(30),EG2(30)     
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      DIMENSION XEN(29),YXSEC(29),XATT(65),YATT(65),XION(24),YION(24),  
     /XVIB1(55),YVIB1(55),XVIB2(54),YVIB2(54),XVIB3(32),YVIB3(32),      
     /XVIB4(24),YVIB4(24),XEXC1(18),YEXC1(18),XEXC2(17),YEXC2(17),
     /XEXC3(18),YEXC3(18),XEXC4(17),YEXC4(17)         
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME                                                 
      DATA XEN/0.00,0.01,.028,.109,.282,.471,.681,1.01,1.25,1.45,       
     /1.49,1.53,1.56,1.62,2.16,2.57,3.58,6.19,9.89,16.3,                
     /24.5,39.3,71.0,120.,218.,379.,953.,10000.,100000./                
      DATA YXSEC/10.3,10.3,10.2,10.3,10.5,11.1,12.7,16.6,21.6,32.6,     
     /35.6,36.2,36.2,35.4,24.3,19.9,16.2,12.2,10.1,8.13, 
     /6.24,4.19,2.52,1.44,.684,.301,.082,.009,.001/                     
      DATA XVIB1/.1108,0.20,0.30,0.40,0.50,0.60,0.70,0.80,0.90,1.00,    
     /1.10,1.20,1.30,1.40,1.50,1.60,1.70,1.80,1.90,2.00,
     /2.10,2.20,2.30,2.40,2.50,2.60,2.70,2.80,2.90,3.00,
     /3.10,3.20,3.30,3.40,3.50,3.60,3.70,3.80,3.90,4.00,                
     /4.10,4.20,4.30,4.40,4.50,4.60,4.70,4.80,4.90,5.00,
     /10.0,100.,1000.,10000.,100000./     
      DATA YVIB1/0.00,0.64,0.85,0.86,0.77,0.63,0.50,0.39,0.30,0.23,     
     /0.18,0.14,0.12,.095,.079,.066,.057,.049,.043,.038,                
     /.033,.030,.027,.024,.022,.020,.018,.017,.015,.014,
     /.013,.012,.011,.0105,.010,.0094,.0089,.0084,.0078,.0074,
     /.0071,.0067,.0063,.0060,.0057,.0054,.0052,.0050,.0048,.0046,
     /.0025,.00030,.00003,.000003,.0000003/                
      DATA XVIB2/.2188,0.30,0.40,0.50,0.60,0.70,0.80,0.90,1.00,1.10,    
     /1.20,1.30,1.40,1.50,1.60,1.70,1.80,1.90,2.00,2.10,                
     /2.20,2.30,2.40,2.50,2.60,2.70,2.80,2.90,3.00,3.10,
     /3.20,3.30,3.40,3.50,3.60,3.70,3.80,3.90,4.00,4.10,
     /4.20,4.30,4.40,4.50,4.60,4.70,4.80,4.90,5.00,10.0,
     /100.,1000.,10000.,100000./                
      DATA YVIB2/0.00,0.82,0.99,0.97,0.85,0.70,0.55,0.43,0.33,0.26,     
     /0.21,0.16,0.13,0.11,.093,.080,.069,.060,.053,.047,                
     /.042,.037,.034,.031,.028,.026,.024,.022,.020,.019, 
     /.017,.016,.015,.014,.013,.012,.011,.011,.010,.010,
     /.0094,.0089,.0084,.0081,.0077,.0073,.0070,.0067,.0064,.0035,
     /.0004,.00004,.000004,.0000004/                              
      DATA XVIB3/.3237,0.40,0.50,0.60,0.70,0.80,1.00,1.20,1.40,1.60,    
     /1.80,2.00,2.20,2.40,2.60,2.80,3.00,3.20,3.40,3.60,                
     /3.80,4.00,4.20,4.40,4.60,4.80,5.00,10.0,100.,1000.,
     /10000.,100000./               
      DATA YVIB3/0.00,0.52,0.63,0.61,0.53,0.43,0.27,0.16,0.10,.069,     
     /.050,.039,.031,.025,.021,.017,.015,.013,.011,.010,                
     /.0088,.0079,.0071,.0064,.0058,.0053,.0048,.003,.0003,.00003,
     /.000003,.0000003/      
      DATA XVIB4/.4205,0.50,0.60,0.70,0.80,0.90,1.00,1.20,1.40,1.60,    
     /1.80,2.00,2.20,2.50,3.00,3.50,4.00,4.50,4.90,10.0,
     /100.,1000.,10000.,100000./                
      DATA YVIB4/0.00,0.18,0.21,0.21,0.18,0.15,0.11,.060,.034,.023,     
     /.016,.013,.010,.0078,.0052,.0038,.0028,.0022,.0018,.001,          
     /.0001,.00001,.000001,.0000001/                                    
      DATA XION/15.69,16.54,16.56,16.83,17.4,18.2,19.6,21.8,25.5,28.6,  
     /35.4,42.5,52.1,66.6,94.0,118.,176.,269.,381.,507.,
     /720.,937.,10000.,100000./                           
      DATA YION/0.0,.0103,.015,.0255,.0413,.066,.106,.172,.302,.436,    
     /.628,.783,.934,1.066,1.18,1.22,1.18,1.04,.865,.721,               
     /.572,.473,0.05,0.005/                               
      DATA XATT/0.00,0.01,0.02,0.03,0.04,0.05,0.07,0.10,0.15,0.20,      
     /0.25,0.30,0.35,0.40,0.45,0.50,0.60,0.70,0.80,0.90,
     /1.00,1.20,1.40,1.60,1.80,2.00,2.20,2.40,2.60,2.80,
     /3.00,3.20,3.40,3.60,3.80,4.00,4.20,4.40,4.60,4.80,
     /5.00,5.20,5.40,5.60,5.80,6.00,6.20,6.40,6.60,6.80,
     /7.00,7.20,7.40,7.60,7.80,8.00,8.20,8.40,8.60,8.80,
     /10.0,100.,1000.,10000.,100000./                
      DATA YATT/80.0,44.4,24.7,13.7,8.20,7.40,7.10,6.50,5.45,4.80,      
     /4.25,3.65,3.10,2.65,2.25,1.92,1.34,0.94,.655,.455,
     /.320,.153,.075,.036,.022,.014,.012,.011,.010,.0097,
     /.0093,.0082,.0069,.0056,.0046,.0039,.0035,.0036,.0038,.0042,
     /.0046,.0052,.0057,.0063,.0068,.0069,.0070,.0069,.0064,.0058,
     /.0052,.0049,.0040,.0035,.0030,.0025,.0021,.0017,.0014,.0012,
     /.0004,.00004,.000004,.0000004,.00000004/                
      DATA XEXC1/3.16,4.00,4.20,4.60,5.60,6.00,7.00,8.00,10.0,15.0,     
     /20.0,27.0,34.0,40.0,100.,1000.,10000.,100000./                    
      DATA YEXC1/0.0,.065,0.10,.145,0.20,0.22,0.23,0.22,0.20,0.14,      
     /.107,.080,.060,.048,.024,.003,.0003,.00003/                       
      DATA XEXC2/4.34,5.00,6.00,7.00,8.00,10.0,14.7,20.0,25.0,40.0,     
     /54.0,60.0,80.0,100.,1000.,10000.,100000./                         
      DATA YEXC2/0.00,0.04,0.06,.074,.080,.074,.060,.047,.040,.025,     
     /.020,.017,.013,.010,.001,.0001,.00001/                            
      DATA XEXC3/11.57,11.73,12.62,14.0,17.0,18.7,21.6,25.8,31.1,39.5,  
     /51.9,78.4,142.,235.,396.,959.,10000.,100000./                     
      DATA YEXC3/0.00,.0102,.0301,.0791,.232,.301,.373,.445,.502,.524,  
     /.510,.477,.373,.282,.204,.119,.012,.0012/          
      DATA XEXC4/13.08,19.25,20.4,23.8,28.6,34.6,43.0,53.4,68.2,90.6,
     /121.,180.,284.,427.,970.,10000.,100000./
      DATA YEXC4/.0,.0104,.0144,.025,.0396,.0552,.0666,.0722,.074,.0734,
     /.0693,.0588,.0442,.033,.0176,.0018,.00018/                 
      NAME=' F2   MORGAN   '                                            
# --------------------------------------------------------------------- 
#    COPIED FROM W.L.MORGAN                              
# ---------------------------------------------------------------------
#
      NION=1 
      NATT=1
      NIN=9
      NNULL=0 
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0    
      NDATA=29                                                          
      NIOND=24                                                          
      NATT1=65                                                          
      NVIB1=55                                                          
      NVIB2=54                                                          
      NVIB3=32
      NVIB4=24
      NEXC1=18
      NEXC2=17                                                          
      NEXC3=18                                                          
      NEXC4=17
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(38.00000*AMU)                                     
      E(3)=15.69                                                        
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
      EOBY(1)=15.69
      EIN(1)=-0.1108
      EIN(2)=0.1108 
      EIN(3)=0.2188                                                     
      EIN(4)=0.3237                                                     
      EIN(5)=0.4205                                                     
      EIN(6)=3.16 
      EIN(7)=4.34                                                       
      EIN(8)=11.57                                                      
      EIN(9)=13.08 
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       FLOURINE       '
      SCRPT(3)=' IONISATION    ELOSS= 15.69   '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      SCRPT(7)=' VIB V1        ELOSS= -0.1108 '
      SCRPT(8)=' VIB V1        ELOSS=  0.1108 '
      SCRPT(9)=' VIB 2V1       ELOSS=  0.2188 '
      SCRPT(10)=' VIB 3V1       ELOSS=  0.3237 '
      SCRPT(11)=' VIB 4V1       ELOSS=  0.4205 '
      SCRPT(12)=' EXC           ELOSS=  3.16   ' 
      SCRPT(13)=' EXC           ELOSS=  4.34   '
      SCRPT(14)=' EXC           ELOSS= 11.57   '
      SCRPT(15)=' EXC           ELOSS= 13.08   '     
      APOP=math.exp(EIN(1)/AKT)
      EN=-ESTEP/2.0                                      
      DO 1000 I=1,NSTEP                                              
      EN=EN+ESTEP                                                       
      DO 10 J=2,NDATA                                                   
      IF(EN <= XEN(J):
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA                                                           
   20 A=(YXSEC(J)-YXSEC(J-1))/(XEN(J)-XEN(J-1))                         
      B=(XEN(J-1)*YXSEC(J)-XEN(J)*YXSEC(J-1))/(XEN(J-1)-XEN(J))         
      Q(2,I)=(A*EN+B)*1.D-16                                            
      Q(3,I)=0.0                                                        
      IF(EN < E(3):
) GO TO 200                                          
      DO 110 J=2,NIOND                                                  
      IF(EN <= XION(J):
) GO TO 120                                       
  110 CONTINUE                                                          
      J=NIOND                                                  
  120 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.D-16                                            
  200 Q(4,I)=0.0                                        
      QATT(1,I)=Q(4,I)                
      IF(EN >= XATT(NATT1):
) GO TO 300                                   
      DO 210 J=2,NATT1                                                  
      IF(EN <= XATT(J):
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NATT1                                                           
  220 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))                         
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))       
      Q(4,I)=(A*EN+B)*1.D-16  
      QATT(1,I)=Q(4,I)                                          
  300 Q(5,I)=0.0                                                        
      Q(6,I)=0.0    
#                  
# SUPERELASTIC V1 
      QIN(1,I)=0.0
      IF(EN <= 0.0):
 GO TO 305
      DO 301 J=2,NVIB1
      IF((EN+EIN(2):
) <= XVIB1(J)) GO TO 302
  301 CONTINUE
      J=NVIB1
  302 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J))
      QIN(1,I)=(EN+EIN(2))*(A*(EN+EIN(2))+B)*1.D-16/EN
      QIN(1,I)=QIN(1,I)*APOP/(1.0+APOP) 
  305 CONTINUE
# V1                                                                     
      QIN(2,I)=0.0                                                      
      IF(EN <= EIN(2):
) GO TO 400                                        
      DO 310 J=2,NVIB1                                                  
      IF(EN <= XVIB1(J):
) GO TO 320                                      
  310 CONTINUE                                                          
      J=NVIB1                                                           
  320 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J)) 
      QIN(2,I)=(A*EN+B)*1.D-16 
      QIN(2,I)=QIN(2,I)/(1.0+APOP)                             
  400 CONTINUE 
# 2V1                                                           
      QIN(3,I)=0.0                                                      
      IF(EN <= EIN(3):
) GO TO 500                                        
      DO 410 J=2,NVIB2                                                  
      IF(EN <= XVIB2(J):
) GO TO 420                                      
  410 CONTINUE                                                          
      J=NVIB2                                                           
  420 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J)) 
      QIN(3,I)=(A*EN+B)*1.D-16                                          
  500 CONTINUE
# 3V1                                                            
      QIN(4,I)=0.0                                                      
      IF(EN <= EIN(4):
) GO TO 600                                        
      DO 510 J=2,NVIB3                                                  
      IF(EN <= XVIB3(J):
) GO TO 520                                      
  510 CONTINUE                                                          
      J=NVIB3                                                           
  520 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J)) 
      QIN(4,I)=(A*EN+B)*1.D-16                                          
  600 CONTINUE 
# 4V1                                                           
      QIN(5,I)=0.0                                                      
      IF(EN <= EIN(5):
) GO TO 700                                        
      DO 610 J=2,NVIB4                                                  
      IF(EN <= XVIB4(J):
) GO TO 620                                      
  610 CONTINUE                                                          
      J=NVIB4                                                           
  620 A=(YVIB4(J)-YVIB4(J-1))/(XVIB4(J)-XVIB4(J-1))                     
      B=(XVIB4(J-1)*YVIB4(J)-XVIB4(J)*YVIB4(J-1))/(XVIB4(J-1)-XVIB4(J)) 
      QIN(5,I)=(A*EN+B)*1.D-16                                          
  700 CONTINUE
#                                                             
      QIN(6,I)=0.0                                                      
      IF(EN <= EIN(6):
) GO TO 800                                        
      DO 710 J=2,NEXC1                                                  
      IF(EN <= XEXC1(J):
) GO TO 720                                      
  710 CONTINUE                                                          
      J=NEXC1                                                           
  720 A=(YEXC1(J)-YEXC1(J-1))/(XEXC1(J)-XEXC1(J-1))                     
      B=(XEXC1(J-1)*YEXC1(J)-XEXC1(J)*YEXC1(J-1))/(XEXC1(J-1)-XEXC1(J)) 
      QIN(6,I)=(A*EN+B)*1.D-16                                          
  800 CONTINUE  
#                                                          
      QIN(7,I)=0.0                                                      
      IF(EN <= EIN(7):
) GO TO 900                                        
      DO 810 J=2,NEXC2                                                  
      IF(EN <= XEXC2(J):
) GO TO 820                                      
  810 CONTINUE                                                          
      J=NEXC2                                                           
  820 A=(YEXC2(J)-YEXC2(J-1))/(XEXC2(J)-XEXC2(J-1))                     
      B=(XEXC2(J-1)*YEXC2(J)-XEXC2(J)*YEXC2(J-1))/(XEXC2(J-1)-XEXC2(J)) 
      QIN(7,I)=(A*EN+B)*1.D-16                                          
  900 CONTINUE 
#                                                           
      QIN(8,I)=0.0                                                      
      IF(EN <= EIN(8):
) GO TO 990                                        
      DO 910 J=2,NEXC3                                                  
      IF(EN <= XEXC3(J):
) GO TO 920                                      
  910 CONTINUE                                                          
      J=NEXC3                                                           
  920 A=(YEXC3(J)-YEXC3(J-1))/(XEXC3(J)-XEXC3(J-1))                     
      B=(XEXC3(J-1)*YEXC3(J)-XEXC3(J)*YEXC3(J-1))/(XEXC3(J-1)-XEXC3(J)) 
      QIN(8,I)=(A*EN+B)*1.D-16                                          
  990 CONTINUE 
#                                                           
      QIN(9,I)=0.0                                                      
      IF(EN <= EIN(9):
) GO TO 1990                                       
      DO 1910 J=2,NEXC4                                                 
      IF(EN <= XEXC4(J):
) GO TO 1920                                     
 1910 CONTINUE                                                          
      J=NEXC4                                                           
 1920 A=(YEXC4(J)-YEXC4(J-1))/(XEXC4(J)-XEXC4(J-1))                     
      B=(XEXC4(J-1)*YEXC4(J)-XEXC4(J)*YEXC4(J-1))/(XEXC4(J-1)-XEXC4(J)) 
      QIN(9,I)=(A*EN+B)*1.D-16                                          
 1990 CONTINUE                                                          
#                                                                       
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)+QIN(1,I)+QIN(2,I)+QIN(3,I)+QIN(4,I)+  
     /QIN(5,I)+QIN(6,I)+QIN(7,I)+QIN(8,I)+QIN(9,I)
 1000 CONTINUE                                                          
#  SAVE COMPUTE TIME 
      IF(EFINAL <= EIN(9):
) NIN=8                                        
      IF(EFINAL <= EIN(8):
) NIN=7
      IF(EFINAL <= EIN(7):
) NIN=6
      IF(EFINAL <= EIN(6):
) NIN=5
      IF(EFINAL <= EIN(5):
) NIN=4
      IF(EFINAL <= EIN(4):
) NIN=3                                        
      IF(EFINAL <= EIN(3):
) NIN=2                                        
      IF(EFINAL <= EIN(2):
) NIN=1                                        
      IF(EFINAL <= EIN(1):
) NIN=0                                        
      RETURN                                                            
      # end                                                               
      def GAS39(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY   
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]  
      DIMENSION XEN(30),YXSEC(30),XVIB1(39),YVIB1(39),                  
     /XVIB2(34),YVIB2(34),XEXC(18),YEXC(18),XION(69),YION(69),          
     /XATT(30),YATT(30),XAT1(9),YAT1(9)
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME
#  ELASTIC                                                       
      DATA XEN/0.00,0.01,0.02,0.04,0.07,0.10,0.15,0.20,0.30,0.50,       
     /0.80,1.00,1.20,1.50,1.80,2.20,3.00,3.50,5.00,8.00,  
     /10.0,12.0,15.0,20.0,30.0,40.0,100.,1000.,10000.,100000./          
      DATA YXSEC/99.0,90.0,80.0,58.0,45.0,36.5,28.5,23.0,16.0,9.82,     
     /7.62,8.61,11.6,14.3,20.0,23.8,27.6,28.1,26.4,28.1,
     /29.2,29.2,26.4,17.1,9.90,6.50,2.70,0.27,.027,.0027/               
#  VIBRATION V2 (010) B# endING                
      DATA XVIB1/.0490,0.05,.055,0.06,0.07,0.08,0.09,0.10,0.12,0.14,   
     /0.17,0.20,0.25,0.30,0.35,0.40,0.50,0.60,0.80,1.00,
     /1.20,1.40,1.70,2.00,2.50,3.00,3.50,4.00,5.00,6.00,
     /8.00,10.0,15.0,20.0,40.0,100.,1000.,10000.,100000./               
      DATA YVIB1/0.00,2.40,10.0,18.5,21.0,22.0,21.0,19.5,14.0,10.0,     
     /7.00,5.00,3.20,2.10,1.50,1.20,0.90,0.78,0.60,0.50,
     /0.43,0.39,0.33,0.29,0.25,0.22,0.25,0.32,0.40,0.45,
     /0.20,0.10,.075,.052,.032,.013,.0013,.00013,.000013/               
#  VIBRATION V1  (100) SYMMETRIC STRETCH
      DATA XVIB2/.0810,0.09,0.10,0.11,0.12,0.13,0.15,0.17,0.20,0.25,   
     /0.30,0.35,0.40,0.50,0.60,0.80,1.00,1.20,1.40,1.70,
     /2.00,2.50,3.00,3.50,4.00,5.00,6.00,8.00,10.0,20.0,
     /100.,1000.,10000.,100000./                
      DATA YVIB2/0.00,2.50,6.00,7.50,8.00,7.50,5.80,4.20,2.50,1.50,     
     /1.05,0.74,0.58,0.40,0.29,0.16,0.12,0.10,0.10,.125,
     /.165,0.27,0.43,0.51,0.49,0.20,0.12,0.07,.057,.033,
     /.008,.0008,.00008,.000008/                
# VIBRATION V3  (001) ASYMMETRIC STRETCH : USED DIPOLE EXCITATION FUNC.          
#                                                                       
# IONISATION                          
      DATA XION/10.07,10.5,11.0,11.5,12.0,12.5,13.0,13.5,14.0,14.5,
     /15.0,15.5,16.0,16.5,17.0,18.0,19.0,20.0,21.0,22.0,                
     /23.0,24.0,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,
     /45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,90.0,100.,                
     /120.,140.,160.,180.,200.,220.,240.,250.,300.,350.,
     /400.,450.,500.,550.,600.,650.,700.,800.,900.,1000.,               
     /1500.,2000.,2500.,3000.,5000.,10000.,20000.,40000.,100000./
      DATA YION/0.00,.192,.421,.652,.880,1.10,1.32,1.53,1.72,1.92,      
     /2.20,2.48,2.74,3.03,3.31,3.84,4.34,4.83,5.28,5.69,                
     /6.06,6.40,6.99,7.48,7.90,8.26,8.58,8.84,9.05,9.23,                
     /9.53,9.69,9.75,9.74,9.68,9.59,9.47,9.34,9.06,8.76,
     /8.17,7.63,7.14,6.71,6.33,5.99,5.69,5.55,4.96,4.48,
     /4.10,3.79,3.52,3.29,3.09,2.92,2.76,2.50,2.29,2.12,                
     /1.56,1.28,1.10,0.94,0.66,0.42,0.24,.134,.069/
# ATTACHMENT CS2 -  (PROBABLY 3 BODY MORMALISED AT 40 TORR)   
      DATA XAT1/.0001,.001,0.01,.017,.025,0.03,.035,0.04,10.0/
      DATA YAT1/35.0,35.0,28.0,20.0,10.0,5.00,1.50,.00001,.0000001/  
# DISOCIATIVE ATTACHMENT    UNITS OF 10**-19
      DATA XATT/2.41,2.50,2.60,2.70,2.80,3.00,3.20,3.35,3.60,3.70,      
     /3.80,4.00,4.20,4.40,5.40,5.50,5.75,6.00,6.25,6.50,       
     /6.75,7.00,7.50,7.75,8.00,8.25,8.50,10.0,100.,100000./
      DATA YATT/0.00,0.01,0.02,0.04,0.08,0.40,2.00,3.70,3.00,3.10,      
     /2.70,1.50,0.40,0.01,0.01,0.10,0.50,1.45,1.80,0.90,
     /0.30,0.20,0.30,0.90,0.50,0.10,0.01,0.01,.001,.0001/
#  EXCITATION                                                           
      DATA XEXC/6.20,7.00,8.00,9.00,10.0,11.0,12.0,14.0,17.0,20.0,      
     /30.0,40.0,60.0,80.0,100.,1000.,10000.,100000./                    
      DATA YEXC/0.00,0.60,1.50,3.30,5.20,7.00,8.00,8.80,9.20,8.90,      
     /8.00,7.40,6.30,5.50,5.00,0.50,0.05,.005/                      
# ----------------------------------------------------------------      
# LACK OF ELECTRON DRIFT DATA . 
# USED SOHNS ELECTRON SCATTERING DATA AND UNPUBLISHED DATA BY ALLEN.
#  THE ATTACHMENT IS PROBABLY 3 BODY EXCEPT FOR THE DISOCIATIVE 
#   ATTACHMENT.           
#  THE 3-BODY X-SECTION  CORRESPONDS TO 40 TORR PRESSURE 
# ---------------------------------------------------------------       
      NAME=' CS2  -2001--- '
#                      
      NION=1
      NATT=1
      NIN=6
      NNULL=0
#
      DO 1 J=1,6 
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0                                                       
      NDATA=30                                                          
      NVIB1=39                                                          
      NVIB2=34                                                          
      NIOND=69                                                          
      NATT2=30 
      NATT1=9
      NEXC=18 
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(76.1427*AMU)                                      
      E(3)=10.07                                                        
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
      EOBY(1)=10.07
      EIN(1)=-0.049
      EIN(2)=0.049
      EIN(3)=-0.081                                                     
      EIN(4)=0.081                                                      
      EIN(5)=0.190      
      EIN(6)=6.20
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       CS2            '
      SCRPT(3)=' IONISATION    ELOSS= 10.07   '
      SCRPT(4)=' ATTACHMENT  (ASSUMED 2 BODY) '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      SCRPT(7)=' VIB V2        ELOSS= -0.049  '
      SCRPT(8)=' VIB V2        ELOSS=  0.049  '
      SCRPT(9)=' VIB V1        ELOSS= -0.081  '
      SCRPT(10)=' VIB V1        ELOSS=  0.081  '
      SCRPT(11)=' VIB V3        ELOSS=  0.190  '
      SCRPT(12)=' EXC           ELOSS=  6.20   ' 
      APOPV2=math.exp(EIN(1)/AKT)
      APOPV1=math.exp(EIN(3)/AKT)
      EN=-ESTEP/2.0                                      
      DO 9000 I=1,NSTEP                                              
      EN=EN+ESTEP   
      DO 10 J=2,NDATA                                                   
      IF(EN <= XEN(J):
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA 
   20 A=(YXSEC(J)-YXSEC(J-1))/(XEN(J)-XEN(J-1))
      B=(XEN(J-1)*YXSEC(J)-XEN(J)*YXSEC(J-1))/(XEN(J-1)-XEN(J))
      Q(2,I)=(A*EN+B)*1.0D-16
   30 Q(3,I)=0.0                                                        
      IF(EN < E(3):
) GO TO 200                                          
      DO 110 J=2,NIOND                                                 
      IF(EN <= XION(J):
) GO TO 120                                       
  110 CONTINUE                                                          
      J=NIOND                                                   
  120 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.D-16                                            
#                                                                       
  200 Q(4,I)=0.0 
      QATT(1,I)=Q(4,I)
      IF(EN < XAT1(1):
) GO TO 250                                       
      IF(EN > XAT1(NATT1):
) GO TO 250                                   
      DO 210 J=2,NATT1                                                  
      IF(EN <= XAT1(J):
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NATT1                                                          
  220 A=(YAT1(J)-YAT1(J-1))/(XAT1(J)-XAT1(J-1))                         
      B=(XAT1(J-1)*YAT1(J)-XAT1(J)*YAT1(J-1))/(XAT1(J-1)-XAT1(J))
      Q(4,I)=(A*EN+B)*1.D-16*1.3
      QATT(1,I)=Q(4,I)                                        
  250 CONTINUE                                                          
      IF(EN < XATT(1):
) GO TO 300                                       
      IF(EN > XATT(NATT2):
) GO TO 300                                   
      DO 260 J=2,NATT2                                                  
      IF(EN <= XATT(J):
) GO TO 270                                       
  260 CONTINUE                                                          
      J=NATT2                                                           
  270 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))                         
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))       
      Q(4,I)=Q(4,I)+(A*EN+B)*1.D-19             
      QATT(1,I)=Q(4,I)                        
  300 Q(5,I)=0.0                                                        
      Q(6,I)=0.0
#        	
# SUPERELASTIC V2 B# endING MODE 
#
      QIN(1,I)=0.0 
      IF(EN == 0.0):
 GO TO 340
      DO 310 J=2,NVIB1
      IF((EN+EIN(2):
) <= XVIB1(J)) GO TO 320
  310 CONTINUE     
      J=NVIB1                     
  320 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J)) 
      QIN(1,I)=(EN+EIN(2))*(A*(EN+EIN(2))+B)*1.D-16/EN
      QIN(1,I)=QIN(1,I)*APOPV2/(1.0+APOPV2) 
  340 CONTINUE     
#         
# VIBRATION V2 B# endING MODE
      QIN(2,I)=0.0                                                      
      IF(EN <= EIN(2):
) GO TO 400                                        
      DO 350 J=2,NVIB1
      IF(EN <= XVIB1(J):
) GO TO 360
  350 CONTINUE
      J=NVIB1
  360 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J)) 
      QIN(2,I)=(A*EN+B)*1.D-16                         
      QIN(2,I)=QIN(2,I)/(1.0+APOPV2)         
  400 CONTINUE                                                          
#           
# SUPERELASTIC OF V1 SYMMETRIC STRETCH VIBRATION                                       
#
      QIN(3,I)=0.0
      IF(EN == 0.0):
 GO TO 440
      DO 410 J=2,NVIB2
      IF((EN+EIN(4):
) <= XVIB2(J)) GO TO 420
  410 CONTINUE     
      J=NVIB2                     
  420 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J)) 
      QIN(3,I)=(EN+EIN(4))*(A*(EN+EIN(4))+B)*1.D-16/EN
      QIN(3,I)=QIN(3,I)*APOPV1/(1.0+APOPV1) 
  440 CONTINUE     
#         
# VIBRATION V3 SYMMETRIC STRETCH
      QIN(4,I)=0.0                                                      
      IF(EN <= EIN(4):
) GO TO 500                                        
      DO 450 J=2,NVIB2
      IF(EN <= XVIB2(J):
) GO TO 460
  450 CONTINUE
      J=NVIB2
  460 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J)) 
      QIN(4,I)=(A*EN+B)*1.D-16                         
      QIN(4,I)=QIN(4,I)/(1.0+APOPV1)         
  500 CONTINUE                     
#                                                          
#  VIBRATION V3 ASYMMETRIC STRETCH                                      
      QIN(5,I)=0.0                                                      
      IF(EN <= EIN(5):
) GO TO 600                                        
      EFAC=math.sqrt(1.0-(EIN(5)/EN))
      QIN(5,I)=0.710*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      QIN(5,I)=QIN(5,I)*1.D-16
  600 CONTINUE
#
# EXCITATION (DISOCIATION)                                                                       
      QIN(6,I)=0.0
      IF(EN <= EIN(6):
) GO TO 900                                        
      DO 810 J=2,NEXC                                                   
      IF(EN <= XEXC(J):
) GO TO 820                                       
  810 CONTINUE                                                          
      J=NEXC                                                            
  820 A=(YEXC(J)-YEXC(J-1))/(XEXC(J)-XEXC(J-1))                         
      B=(XEXC(J-1)*YEXC(J)-XEXC(J)*YEXC(J-1))/(XEXC(J-1)-XEXC(J))       
      QIN(6,I)=(A*EN+B)*1.D-16                                          
  900 CONTINUE                                                          
#                                                                       
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)+QIN(1,I)+QIN(2,I)+QIN(3,I)+QIN(4,I)+ 
     /QIN(5,I)+QIN(6,I)                           
 9000 CONTINUE                                                          
#  SAVE COMPUTE TIME 
      IF(EFINAL <= EIN(6):
) NIN=5
      IF(EFINAL <= EIN(5):
) NIN=4
      RETURN                                                            
      # end 
      def GAS40(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY   
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      DIMENSION XEN(34),YXSEC(34),XVIB1(40),YVIB1(40),                  
     /XVIB2(39),YVIB2(39),XVIB3(31),YVIB3(31),      
     /XVIB4(14),YVIB4(14),XVIB5(22),YVIB5(22),XVIB6(22),YVIB6(22),
     /XEXC(17),YEXC(17),XION(70),YION(70),XATT(20),YATT(20)
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME
#  ELASTIC                                                       
      DATA XEN/1.D-6,.001,0.01,0.10,0.15,0.20,0.30,0.40,0.50,0.60,
     /0.70,0.80,1.00,1.20,1.50,1.70,2.00,2.50,3.00,4.00,
     /5.00,7.00,10.0,15.0,20.0,30.0,40.0,60.0,80.0,100.,
     /200.,1000.,10000.,100000./
      DATA YXSEC/1.9D3,1.9D3,190.,19.0,11.5,9.00,7.20,7.40,7.70,8.00,
     /8.40,8.80,10.0,10.7,10.0,9.50,9.00,10.0,11.5,14.5,
     /15.0,15.5,16.0,14.5,13.0,9.00,6.50,4.00,2.60,2.00,
     /1.00,0.20,0.02,.002/
#  VIBRATION V2 (010)   B# endING                   
      DATA XVIB1/.064,0.07,0.08,0.09,0.10,0.12,0.14,0.17,0.20,0.24,
     /0.28,0.32,0.36,0.40,0.45,0.50,0.60,0.70,0.80,0.90,
     /1.00,1.10,1.15,1.20,1.30,1.50,1.70,2.00,2.50,3.00,
     /4.00,5.00,6.00,7.00,8.00,10.0,100.,1000.,10000.,100000./
      DATA YVIB1/0.00,2.75,4.20,4.80,4.80,4.50,3.50,2.60,2.10,1.60, 
     /1.35,1.15,1.05,1.00,1.00,1.05,1.15,1.40,1.85,2.30,
     /2.80,3.40,3.80,3.80,3.30,2.20,1.30,0.80,0.35,0.25,
     /0.21,.165,0.14,.125,0.11,0.09,.013,.0013,.00013,.000013/
#  VIBRATION V1 (100) SYMMETRIC STRETCH 
      DATA XVIB2/.107,0.11,0.12,0.13,0.14,0.15,0.16,0.18,0.20,0.22, 
     /0.25,0.30,0.35,0.40,0.50,0.60,0.70,0.80,0.90,1.00,
     /1.10,1.15,1.20,1.30,1.50,2.00,2.50,3.00,3.50,4.00,
     /4.50,5.00,6.00,8.00,10.0,100.,1000.,10000.,100000./     
      DATA YVIB2/0.00,0.30,0.56,0.68,0.75,0.78,0.81,0.81,0.75,0.64,
     /0.58,0.50,0.47,0.46,0.46,0.50,0.55,0.70,0.90,1.15,
     /1.40,1.50,1.50,1.30,0.90,0.50,0.40,0.40,0.68,0.84,
     /0.65,0.48,0.30,0.24,0.21,.021,.0021,.00021,.000021/      
# VIBRATION HARMONIC   2V2 (020)  B# endING 
      DATA XVIB3/.128,0.13,0.14,0.15,0.16,0.18,0.20,0.22,0.25,0.30,
     /0.40,0.50,0.60,0.70,0.80,0.90,1.00,1.10,1.15,1.20,
     /1.30,1.50,1.70,2.00,3.00,5.00,10.0,100.,1000.,10000.,
     /100000./      
      DATA YVIB3/0.00,1.07,2.40,3.00,3.35,3.70,3.75,3.50,2.75,1.95,
     /1.35,1.20,1.30,1.50,1.90,2.40,2.80,3.50,3.90,3.90,
     /3.60,2.50,1.50,0.90,0.20,.035,0.01,.001,.0001,.00001,
     /.000001/ 
# VIBRATION V3 (001) ASYMMETRIC STRETCH  ( RESONANCE PART ONLY)
      DATA XVIB4/.256,0.70,0.80,0.90,1.00,1.10,1.15,1.20,1.30,1.50,
     /1.70,2.00,10.0,100000./ 
      DATA YVIB4/0.00,0.02,0.60,1.50,2.60,3.00,3.50,3.50,3.00,1.80,
     /0.90,0.08,0.001,.000002/  
# VIBRATION SUM OF HARMONICS  NV1   
      DATA XVIB5/0.38,0.70,0.80,0.90,1.00,1.10,1.15,1.20,1.30,1.50,
     /1.70,2.00,3.00,3.50,4.00,4.50,5.00,6.00,10.0,100.,
     /1000.,100000./ 
      DATA YVIB5/0.00,.001,0.04,0.12,0.20,0.26,0.30,0.30,0.26,0.20,
     /0.12,0.02,0.05,0.10,0.15,0.10,0.05,0.02,0.01,.001,
     /.0001,.0000001/
# VIBRATION SUM OF HIGHER HARMONICS (0.512)
      DATA XVIB6/.512,0.70,0.80,0.90,1.00,1.10,1.15,1.20,1.30,1.50,
     /1.70,2.00,3.00,3.50,4.00,4.50,5.00,6.00,10.0,100.,
     /1000.,100000./ 
      DATA YVIB6/0.00,.001,0.03,0.08,0.13,0.17,0.20,0.20,0.17,0.13,
     /0.08,0.02,0.03,0.07,0.10,0.07,0.03,0.02,0.01,.001,
     /.0001,.0000001/
# IONISATION                          
      DATA XION/11.19,11.5,12.0,12.5,13.0,13.5,14.0,14.5,15.0,15.5,
     /16.0,16.5,17.0,17.5,18.0,18.5,19.0,19.5,20.0,21.0,
     /22.0,23.0,24.0,26.0,28.0,30.0,32.0,34.0,36.0,38.0,                
     /40.0,45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,90.0,                
     /100.,110.,120.,140.,160.,180.,200.,250.,300.,350.,
     /400.,450.,500.,550.,600.,650.,700.,750.,800.,900.,
     /1000.,1500.,2000.,2500.,3000.,5000.,10000.,20000.,40000.,100000./
      DATA YION/0.00,.105,.279,.455,.630,.802,0.97,1.13,1.29,1.44,      
     /1.58,1.72,1.85,1.99,2.14,2.28,2.43,2.58,2.73,3.01,                
     /3.27,3.52,3.75,4.16,4.51,4.81,5.09,5.33,5.53,5.71,                
     /5.85,6.14,6.33,6.44,6.50,6.53,6.52,6.50,6.46,6.34,
     /6.20,6.05,5.90,5.59,5.29,5.02,4.78,4.26,3.84,3.51,
     /3.23,2.99,2.79,2.62,2.47,2.34,2.22,2.11,2.01,1.85,
     /1.71,1.26,1.03,0.88,0.76,0.54,0.34,0.20,.108,.055/
      DATA XATT/0.94,1.00,1.10,1.20,1.25,1.30,1.40,1.50,1.60,1.70,      
     /1.80,1.90,2.00,2.10,2.20,2.30,2.40,2.50,10.0,100000./             
      DATA YATT/0.00,0.03,.182,.272,.290,.282,.263,.219,.151,.106,      
     /.069,.042,.026,.015,.011,.005,.002,.001,.001,.0000001/       
#  EXCITATION                                                           
      DATA XEXC/7.00,8.00,9.00,10.0,11.0,12.0,14.0,17.0,20.0,30.0,      
     /40.0,60.0,80.0,100.,1000.,10000.,100000./                         
      DATA YEXC/0.0,0.60,1.40,2.80,4.00,5.00,5.75,6.10,6.00,5.40,       
     /5.00,4.20,3.70,3.35,0.65,.065,.0065/                          
# ----------------------------------------------------------------      
#  LACK OF ELECTRON DRIFT DATA. 
#  USED SOHNS ELECTRON SCATTERING DATA .
#  POSSIBLE 3-BODY ATTACHMENT NOT YET INCLUDED .
#  3-BODY ATTACHMENT IS SMALLER THAN CARBON DISULPHIDE BUT MAY BE 
#  SIGNIFICANT..
# ---------------------------------------------------------------       
      NAME=' COS  -2001--- '
#              
      NION=1
      NATT=1
      NIN=10
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0                                                          
      NDATA=34 
      NVIB1=40
      NVIB2=39
      NVIB3=31                                                          
      NVIB4=14                                                          
      NVIB5=22
      NVIB6=22
      NIOND=70 
      NATT1=20 
      NEXC=17 
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(60.0761*AMU)                                      
      E(3)=11.19                                                        
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
      EOBY(1)=11.19
      EIN(1)=-0.064
      EIN(2)=0.064
      EIN(3)=-0.107                                                     
      EIN(4)=0.107                                                      
      EIN(5)=-0.128
      EIN(6)=0.128                                                      
      EIN(7)=0.256                                                      
      EIN(8)=0.380  
      EIN(9)=0.512
      EIN(10)=7.00
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       COS            '
      SCRPT(3)=' IONISATION    ELOSS= 11.19   '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      SCRPT(7)=' VIB V2        ELOSS= -0.064  '
      SCRPT(8)=' VIB V2        ELOSS=  0.064  '
      SCRPT(9)=' VIB V1        ELOSS= -0.107  '
      SCRPT(10)=' VIB V1        ELOSS=  0.107  '
      SCRPT(11)=' VIB 2V2       ELOSS= -0.128  '
      SCRPT(12)=' VIB 2V2       ELOSS=  0.128  '
      SCRPT(13)=' VIB V3        ELOSS=  0.256  ' 
      SCRPT(14)=' VIB NV1       ELOSS=  0.380  '
      SCRPT(15)=' VIB           ELOSS=  0.512  '
      SCRPT(16)=' EXC           ELOSS=  7.00   ' 
      APOPV2=math.exp(EIN(1)/AKT)
      APOPV1=math.exp(EIN(3)/AKT)
      APOP2V2=math.exp(EIN(5)/AKT)
      EN=-ESTEP/2.0                                      
      DO 9000 I=1,NSTEP                                              
      EN=EN+ESTEP   
      IF(EN == 0.0):
 Q(2,I)=1900.D-16
      IF(EN == 0.0):
 GO TO 30
      DO 10 J=2,NDATA                                                   
      IF(EN <= XEN(J):
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA 
# USE LOG INTERPOLATION
   20 Y1=math.log(YXSEC(J-1))
      Y2=math.log(YXSEC(J))
      X1=math.log(XEN(J-1))
      X2=math.log(XEN(J))                                                   
      A=(Y2-Y1)/(X2-X1)                                          
      B=(X1*Y2-X2*Y1)/(X1-X2)                                           
      Q(2,I)=math.exp((A*math.log(EN)+B))*1.0D-16
   30 Q(3,I)=0.0                                                        
      IF(EN < E(3):
) GO TO 200                                          
      DO 110 J=2,NIOND                                                 
      IF(EN <= XION(J):
) GO TO 120                                       
  110 CONTINUE                                                          
      J=NIOND                                                  
  120 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.D-16                                            
#                                                                       
  200 Q(4,I)=0.0                                  
      QATT(1,I)=Q(4,I)                      
      IF(EN < XATT(1):
) GO TO 300                                       
      IF(EN > XATT(NATT1):
) GO TO 300                                  
      DO 210 J=2,NATT1                                                 
      IF(EN <= XATT(J):
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NATT1                                                          
  220 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))                         
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))       
      Q(4,I)=(A*EN+B)*1.D-16
      QATT(1,I)=Q(4,I)                                            
  300 Q(5,I)=0.0                                                        
      Q(6,I)=0.0
#        	
# SUPERELASTIC V2 B# endING MODE             
#
      QIN(1,I)=0.0 
      IF(EN == 0.0):
 GO TO 340
      DO 310 J=2,NVIB1
      IF((EN+EIN(2):
) <= XVIB1(J)) GO TO 320
  310 CONTINUE
      J=NVIB1
  320 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J)) 
      QIN(1,I)=(EN+EIN(2))*(A*(EN+EIN(2))+B)/EN 
      QIN(1,I)=QIN(1,I)*APOPV2/(1.0+APOPV2)*1.D-16
  340 CONTINUE  
#         
# VIBRATION V2 B# endING MODE
#
      QIN(2,I)=0.0                                                      
      IF(EN <= EIN(2):
) GO TO 400
      DO 350 J=2,NVIB1
      IF(EN <= XVIB1(J):
) GO TO 360
  350 CONTINUE
      J=NVIB1
  360 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J)) 
      QIN(2,I)=(A*EN+B)                                
      QIN(2,I)=QIN(2,I)/(1.0+APOPV2)*1.D-16
  400 CONTINUE                                                          
#           
# SUPERELASTIC OF VIBRATION V1 SYMMETRIC STRETCH                                        
#
      QIN(3,I)=0.0
      IF(EN == 0.0):
 GO TO 440
      DO 410 J=2,NVIB2
      IF((EN+EIN(4):
) <= XVIB2(J)) GO TO 420
  410 CONTINUE
      J=NVIB2 
  420 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J)) 
      QIN(3,I)=(EN+EIN(4))*(A*(EN+EIN(4))+B)/EN 
      QIN(3,I)=QIN(3,I)*APOPV1/(1.0+APOPV1)*1.D-16
  440 CONTINUE  
#      
# VIBRATION V1 SYMMETRIC STRETCH 
#
      QIN(4,I)=0.0
      IF(EN <= EIN(4):
) GO TO 500
      DO 450 J=2,NVIB2
      IF(EN <= XVIB2(J):
) GO TO 460
  450 CONTINUE
      J=NVIB2
  460 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J)) 
      QIN(4,I)=(A*EN+B)                                
      QIN(4,I)=QIN(4,I)/(1.0+APOPV1)*1.D-16
  500 CONTINUE                                                          
#                                                          
#  SUPERELASTIC VIBRATION HARMONIC 2V2 B# endING MODE
#                                         
      QIN(5,I)=0.0                                                      
      IF(EN == 0.0):
 GO TO 540                                        
      DO 510 J=2,NVIB3                                                  
      IF((EN+EIN(6):
) <= XVIB3(J)) GO TO 520                             
  510 CONTINUE                                                          
      J=NVIB3                                                           
  520 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J)) 
      QIN(5,I)=(EN+EIN(6))*(A*(EN+EIN(6))+B)/EN
      QIN(5,I)=QIN(5,I)*APOP2V2/(1.0+APOP2V2)*1.D-16
  540 CONTINUE
#                                                            
# VIBRATION HARMONIC 2V2 B# endING MODE 
# 
      QIN(6,I)=0.0                                                      
      IF(EN <= EIN(6):
) GO TO 600                                        
      DO 550 J=2,NVIB3                                                  
      IF(EN <= XVIB3(J):
) GO TO 560                                      
  550 CONTINUE                                                          
      J=NVIB3                                                           
  560 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J)) 
      QIN(6,I)=(A*EN+B)
      QIN(6,I)=QIN(6,I)/(1.0+APOP2V2)*1.D-16
  600 CONTINUE   
#                                                         
#  VIBRATION V3 ASYMMETRIC STRETCH
#                                                                   
      QIN(7,I)=0.0                                                      
      IF(EN <= EIN(7):
) GO TO 700 
      DO 610 J=2,NVIB4                                                  
      IF(EN <= XVIB4(J):
) GO TO 620                                      
  610 CONTINUE                                                          
      J=NVIB4                                                           
  620 A=(YVIB4(J)-YVIB4(J-1))/(XVIB4(J)-XVIB4(J-1))                     
      B=(XVIB4(J-1)*YVIB4(J)-XVIB4(J)*YVIB4(J-1))/(XVIB4(J-1)-XVIB4(J)) 
      EFAC=math.sqrt(1.0-(EIN(7)/EN))
      QIN(7,I)=0.639*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      QIN(7,I)=(QIN(7,I)+(A*EN+B))*1.D-16
  700 CONTINUE
#                                                            
#  SUM OF HARMONICS NV1   
#                                                   
      QIN(8,I)=0.0                                                      
      IF(EN <= EIN(8):
) GO TO 740                                        
      DO 710 J=2,NVIB5                                                  
      IF(EN <= XVIB5(J):
) GO TO 720                                      
  710 CONTINUE                                                          
      J=NVIB5                                                           
  720 A=(YVIB5(J)-YVIB5(J-1))/(XVIB5(J)-XVIB5(J-1))                     
      B=(XVIB5(J-1)*YVIB5(J)-XVIB5(J)*YVIB5(J-1))/(XVIB5(J-1)-XVIB5(J)) 
      QIN(8,I)=(A*EN+B)*1.D-16                                          
  740 CONTINUE              
#                                                            
#  SUM OF HIGHER HARMONICS (0.512)
#                                                   
      QIN(9,I)=0.0                                                      
      IF(EN <= EIN(9):
) GO TO 800                                        
      DO 750 J=2,NVIB6                                                  
      IF(EN <= XVIB6(J):
) GO TO 760                                      
  750 CONTINUE                                                          
      J=NVIB6                                                           
  760 A=(YVIB6(J)-YVIB6(J-1))/(XVIB6(J)-XVIB6(J-1))                     
      B=(XVIB6(J-1)*YVIB6(J)-XVIB6(J)*YVIB6(J-1))/(XVIB6(J-1)-XVIB6(J)) 
      QIN(9,I)=(A*EN+B)*1.D-16                                          
  800 CONTINUE              
#
# EXCITATION (DISOCIATION)   
#                                                                    
      QIN(10,I)=0.0
      IF(EN <= EIN(10):
) GO TO 900                                       
      DO 810 J=2,NEXC                                                   
      IF(EN <= XEXC(J):
) GO TO 820                                       
  810 CONTINUE                                                          
      J=NEXC                                                            
  820 A=(YEXC(J)-YEXC(J-1))/(XEXC(J)-XEXC(J-1))                         
      B=(XEXC(J-1)*YEXC(J)-XEXC(J)*YEXC(J-1))/(XEXC(J-1)-XEXC(J))       
      QIN(10,I)=(A*EN+B)*1.D-16                                         
  900 CONTINUE                                                          
#                                                                       
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)+QIN(1,I)+QIN(2,I)+QIN(3,I)+QIN(4,I)+ 
     /QIN(5,I)+QIN(6,I)+QIN(7,I)+QIN(8,I)+QIN(9,I)+QIN(10,I)
 9000 CONTINUE                                                          
#  SAVE COMPUTE TIME 
      IF(EFINAL <= EIN(10):
) NIN=9 
      IF(EFINAL <= EIN(9):
) NIN=8
      IF(EFINAL <= EIN(8):
) NIN=7
      IF(EFINAL <= EIN(7):
) NIN=6                                        
      RETURN                                                            
      # end       
      def GAS41(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY  
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6) 
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)        
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      DIMENSION XEN(73),YXSEC(73),XVIB1(24),YVIB1(24),XVIB2(22),YVIB2(22
     /),XION(82),YION(82),XATT(14),YATT(14),XDIS1(32),YDIS1(32),        
     /XDIS2(32),YDIS2(32),XDIS3(32),YDIS3(32),XDIS4(32),YDIS4(32),
     /YELAT(73),XVIB3(19),YVIB3(19),XVIB4(19),YVIB4(19)
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME                                                 
      DATA XEN/0.00,.0001,.001,.004,.007,0.01,.012,.014,.017,0.02,
     /.025,0.03,.035,0.04,0.05,0.06,0.07,0.08,0.09,0.10,               
     /0.12,0.14,0.17,0.20,0.24,0.28,0.32,0.36,0.40,0.45,                
     /0.50,0.60,0.70,0.80,1.00,1.20,1.40,1.70,2.00,2.50,                
     /3.00,3.50,4.00,5.00,6.00,7.00,8.00,9.00,10.0,12.0,                
     /15.0,20.0,30.0,40.0,50.0,60.0,80.0,100.,150.,200.,
     /300.,400.,500.,600.,800.,1000.,2000.,4000.,6000.,8000.,
     /10000.,20000.,100000./
# ELASTIC MOMENTUM TRANSFER X-SECTION     
      DATA YXSEC/26.7,25.4,22.7,18.9,16.6,14.9,14.0,13.1,12.1,11.1, 
     /9.80,8.71,7.78,6.98,5.68,4.70,3.85,3.31,2.75,2.32,                
     /1.72,1.23,0.78,.500,.330,.315,.340,.375,.430,.500,                
     /.600,.810,1.05,1.29,1.80,2.15,2.55,3.25,4.05,5.80,  
     /7.90,10.1,11.7,14.5,16.3,17.2,17.6,17.6,17.0,15.0,                
     /13.0,8.50,4.70,3.40,2.50,2.10,1.55,1.20,0.66,0.44,
     /0.25,0.16,0.12,0.09,0.06,.045,.016,.006,.003,.002,
     /.001,.00025,.000015/
# ELASTIC TOTAL X-SECTION               
      DATA YELAT/26.7,25.6,23.3,19.9,17.9,16.4,15.5,14.8,13.8,12.9,     
     /11.6,10.6,9.67,8.89,7.60,6.57,5.60,4.90,4.20,3.70,
     /2.80,2.20,1.62,1.23,0.95,0.82,0.75,0.72,0.71,0.73,
     /0.77,0.95,1.10,1.28,1.72,2.25,3.00,4.00,5.00,7.32,
     /8.81,11.0,13.3,17.6,21.2,23.2,24.0,23.8,23.1,21.4,
     /19.7,15.6,11.2,8.55,7.20,6.09,4.74,3.89,2.55,2.00,
     /1.35,1.05,0.78,0.65,0.50,0.42,0.23,0.14,0.10,0.08,
     /.064,.030,.007/  
      DATA XVIB1/.1234,0.20,0.30,0.40,0.50,0.60,0.80,1.00,2.00,3.00,
     /5.00,6.00,7.00,8.00,9.00,10.0,12.5,15.0,20.0,50.0,
     /100.0,1000.,10000.,100000./               
      DATA YVIB1/0.00,.0001,.048,.054,.057,.059,.069,.079,.119,.152,
     /0.50,0.70,0.80,0.75,0.65,0.55,0.39,0.33,0.19,.077,
     /.044,0.004,.0004,.00004/                    
      DATA XVIB2/.275,0.40,0.50,0.60,0.80,1.00,2.00,3.00,5.00,6.00,
     /7.00,8.00,9.00,10.0,12.5,15.0,20.0,50.0,100.,1000.,
     /10000.,100000./                               
      DATA YVIB2/0.00,.006,.009,.010,.011,.013,.033,.090,0.50,0.70,
     /0.80,0.75,0.65,0.50,0.25,0.19,0.10,0.04,0.02,0.01,
     /.001,.0001/  
      DATA XVIB3/.405,1.00,2.00,3.00,5.00,6.00,7.00,8.00,9.00,10.0,
     /12.5,15.0,17.5,20.0,50.0,100.,1000.,10000.,100000./
      DATA YVIB3/0.00,.001,.005,.027,.095,.125,.135,.135,.110,.080,
     /.055,.037,.028,.020,.008,.003,.0003,.00003,.000003/
      DATA XVIB4/.545,1.00,2.00,3.00,5.00,6.00,7.00,8.00,9.00,10.0,
     /12.5,15.0,17.5,20.0,50.0,100.,1000.,10000.,100000./
      DATA YVIB4/0.00,.0008,.004,.024,.080,.105,.115,.115,.095,.070,
     /.045,.027,.018,.010,.007,.003,.0003,.00003,.000003/               
      DATA XION/12.99,13.5,14.0,14.5,15.0,15.5,16.0,16.5,17.0,17.5,     
     /18.0,18.5,19.0,19.5,21.0,21.5,22.0,22.5,23.0,23.5,
     /24.0,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,45.0,
     /50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,
     /100.,105.,110.,115.,120.,125.,130.,135.,140.,145.,
     /150.,160.,180.,200.,250.,300.,350.,400.,450.,500.,
     /550.,600.,650.,700.,750.,800.,850.,900.,950.,1000.,
     /1500.,2000.,3000.,4000.,5000.,7000.,10000.,12000.,15000.,20000.,
     /40000.,100000./
      DATA YION/0.00,.034,.074,0.13,.198,.278,.361,.445,.530,.610,      
     /.706,.793,.880,.977,1.24,1.34,1.42,1.50,1.57,1.65,
     /1.72,1.97,2.20,2.38,2.54,2.68,2.79,2.91,3.02,3.21,
     /3.36,3.47,3.56,3.62,3.66,3.68,3.69,3.70,3.69,3.68,
     /3.66,3.63,3.62,3.59,3.55,3.52,3.48,3.45,3.41,3.38,
     /3.33,3.25,3.11,3.01,2.72,2.49,2.27,2.09,1.94,1.83,
     /1.72,1.63,1.54,1.47,1.40,1.34,1.28,1.24,1.20,1.18,
     /0.82,0.66,0.47,0.37,0.31,.235,.175,.151,.127,0.10,
     /.058,.028/
      DATA XATT/7.00,7.50,8.00,8.50,9.00,9.50,10.0,10.5,11.0,11.5,      
     /12.0,12.5,13.0,13.5/                                              
      DATA YATT/0.00,0.005,0.12,0.51,0.75,0.85,0.96,0.91,0.72,0.49,     
     /0.27,0.13,0.06,0.00/                                              
      DATA XDIS1/9.00,10.0,13.0,15.0,17.0,20.0,22.0,25.0,30.0,40.0,     
     /50.0,60.0,70.0,80.0,100.,150.,200.,300.,400.,500.,                
     /600.,800.,1000.,1500.,2000.,3000.,4000.,6000.,8000.,10000.,
     /20000.,100000./
      DATA YDIS1/0.00,0.27,0.27,0.36,0.45,0.53,0.58,0.59,0.58,0.57,     
     /0.56,0.55,0.54,0.53,0.52,0.50,0.46,0.40,0.33,0.28,                
     /0.24,0.18,0.14,.098,.075,.055,.040,.029,.022,.018,
     /.009,.0018/
      DATA XDIS2/10.0,11.0,13.0,15.0,17.0,20.0,22.0,25.0,30.0,40.0,     
     /50.0,60.0,70.0,80.0,100.,150.,200.,300.,400.,500.,                
     /600.,800.,1000.,1500.,2000.,3000.,4000.,6000.,8000.,10000.,
     /20000.,100000./
      DATA YDIS2/0.00,0.27,0.27,0.36,0.45,0.53,0.58,0.59,0.58,0.57,     
     /0.56,0.55,0.54,0.53,0.52,0.50,0.46,0.40,0.33,0.28,                
     /0.24,0.18,0.14,.098,.075,.055,.040,.029,.022,.018,
     /.009,.0018/
      DATA XDIS3/11.0,12.0,13.0,15.0,17.0,20.0,22.0,25.0,30.0,40.0,     
     /50.0,60.0,70.0,80.0,100.,150.,200.,300.,400.,500.,                
     /600.,800.,1000.,1500.,2000.,3000.,4000.,6000.,8000.,10000.,
     /20000.,100000./
      DATA YDIS3/0.00,0.27,0.27,0.36,0.45,0.53,0.58,0.59,0.58,0.57,     
     /0.56,0.55,0.54,0.53,0.52,0.50,0.46,0.40,0.33,0.28,                
     /0.24,0.18,0.14,.098,.075,.055,.040,.029,.022,.018,
     /.009,.0018/
      DATA XDIS4/11.8,12.0,13.0,15.0,17.0,20.0,22.0,25.0,30.0,40.0,     
     /50.0,60.0,70.0,80.0,100.,150.,200.,300.,400.,500.,                
     /600.,800.,1000.,1500.,2000.,3000.,4000.,6000.,8000.,10000.,
     /20000.,100000./
      DATA YDIS4/0.00,.045,0.27,0.36,0.45,0.53,0.58,0.59,0.58,0.57,     
     /0.56,0.55,0.54,0.53,0.52,0.50,0.46,0.40,0.33,0.28,                
     /0.24,0.18,0.14,.098,.075,.055,.040,.029,.022,.018,
     /.009,.0018/
# ---------------------------------------------------------------------
# SCALED VIBRATIONAL X-SECTIONS FROM METHANE (CH4) TO GIVE FIT TO DRIFT
# VELOCITY AND TRANSVERSE DIFFUSION IN DEUTERATED METHANE.
# NO MIXTURE DATA AVAILABLE.
#  REFS: DRIFT VELOCITY: 
#        COTTRELL AND WALKER  TRANS.FARADAY.SOC. 61 (1585) 1965
#        TRANSVERSE DIFFUSION:
#        MILLICAN AND WALKER  J.PHYS.D 20 (193) 1987
# ---------------------------------------------------------------------     
      NAME=' CD4    2004   '
#      
      AVIB1=0.059 
      AVIB2=0.050 
#
      NION=1 
      NATT=1
      NIN=9 
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0
# USE ANISOTROPIC SCATTERING FOR ELASTIC AND COPY (OFFSET) TO IONISATION
      KEL(2)=1
      KEL(3)=1
# USE ANISOTROPIC SCATTERING FOR LEVEL 2 AND 3    
      KIN(2)=1
      KIN(3)=1
#           
      RAT=0.8                                                           
      NDATA=73
      NVIB1=24                                                          
      NVIB2=22
      NVIB3=19
      NVIB4=19                                                          
      NIOND=82                                                         
      NATT1=14                                                          
      NDIS1=32                                                          
      NDIS2=32
      NDIS3=32
      NDIS4=32
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(20.0671*AMU)                                      
      E(3)=12.99                                                        
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      EOBY(1)=7.3  
      IOFF=IFIX(SNGL(0.5+E(3)/ESTEP)) 
      EIN(1)=-0.1234   
      EIN(2)=0.1234 
      EIN(3)=0.275 
      EIN(4)=0.405
      EIN(5)=0.545                                                 
      EIN(6)=9.0                                                        
      EIN(7)=10.0
      EIN(8)=11.0
      EIN(9)=11.8
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC (ANIS)   CD4         '
      SCRPT(3)=' IONISATION    ELOSS= 12.99   '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      SCRPT(7)=' VIB V2+V4     ELOSS= -0.1234 '
      SCRPT(8)=' VIB V2+V4     ELOSS=  0.1234 '
      SCRPT(9)=' VIB V1+V3     ELOSS=  0.275  '
      SCRPT(10)=' VIB  HAR      ELOSS=  0.405  '
      SCRPT(11)=' VIB  HAR      ELOSS=  0.545  '
      SCRPT(12)=' EXC DISOCIATN ELOSS=  9.0    '  
      SCRPT(13)=' EXC DISOCIATN ELOSS= 10.0    '
      SCRPT(14)=' EXC DISOCIATN ELOSS= 11.0    '
      SCRPT(15)=' EXC DISOCIATN ELOSS= 11.8    '
      APOP=math.exp(EIN(1)/AKT)
#     WRITE(6,99) APOP 
#  99 FORMAT(3X,'APOP=',D12.3)         
      EN=-ESTEP/2.0                                      
      DO 1000 I=1,NSTEP                                              
      EN=EN+ESTEP   
# USE LOG INTERPOLATION FOR ELASTIC      
      IF(EN <= XEN(2):
) : 
       QELA=26.7D-16
       QMOM=26.7D-16
       GO TO 30 
      # endIF                                                    
      DO 3 J=2,NDATA 
      IF(EN <= XEN(J):
) GO TO 4                                          
   3  CONTINUE                                                          
      J=NDATA                                                           
   4  YXJ=math.log(YELAT(J))
      YXJ1=math.log(YELAT(J-1))
      XNJ=math.log(XEN(J))
      XNJ1=math.log(XEN(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QELA=math.exp(A*math.log(EN)+B)*1.D-16
      YXJ=math.log(YXSEC(J))
      YXJ1=math.log(YXSEC(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QMOM=math.exp(A*math.log(EN)+B)*1.D-16
   30 CONTINUE
      PEQEL(2,I)=0.5+(QELA-QMOM)/QELA
      Q(2,I)=QELA 
#                                                                       
      Q(3,I)=0.0             
      PEQEL(3,I)=0.5                                           
      IF(EN < E(3):
) GO TO 200                                          
      DO 110 J=2,NIOND                                                  
      IF(EN <= XION(J):
) GO TO 120                                       
  110 CONTINUE                                                          
      J=NIOND                                                   
  120 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.D-16
#   USE ANISOTROPIC SCATTERING FOR PRIMARY IONISATION ELECTRON FOR 
# ENERGIES ABOVE 2 * IONISATION ENERGY 
#  ANISOTROPIC DISTRIBUTION SAME AS ELASTIC AT ENERGY OFFSET BY
#  IONISATION ENERGY       
      IF(EN <= (2.0*E(3):
)) GO TO 200
      PEQEL(3,I)=PEQEL(2,(I-IOFF))                                      
#                                                                       
  200 Q(4,I)=0.0                                     
      QATT(1,I)=Q(4,I)                   
      IF(EN < XATT(1):
) GO TO 300                                       
      IF(EN > XATT(NATT1):
) GO TO 300                                   
      DO 210 J=2,NATT1                                                  
      IF(EN <= XATT(J):
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NATT1                                                           
  220 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))                         
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))       
      Q(4,I)=(A*EN+B)*1.D-19   
      QATT(1,I)=Q(4,I)                                         
  300 Q(5,I)=0.0                                                        
      Q(6,I)=0.0                                                        
# V4 + V2 SUPERELASTIC 
      QIN(1,I)=0.0                                                      
      IF(EN <= 0.0):
 GO TO 350                                           
      DO 310 J=2,NVIB1                                                  
      IF((EN+EIN(2):
) <= XVIB1(J)) GO TO 320                             
  310 CONTINUE                                                          
      J=NVIB1                                                           
  320 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J))
      EFAC=math.sqrt(1.0-(EIN(1)/EN))
      QIN(1,I)=AVIB1*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      QIN(1,I)=QIN(1,I)+(EN+EIN(2))*(A*(EN+EIN(2))+B)/EN
      QIN(1,I)=QIN(1,I)*APOP/(1.0+APOP)*1.D-16                          
  350 CONTINUE                                                          
# V4 + V2                                                               
      QIN(2,I)=0.0                                                      
      IF(EN <= EIN(2):
) GO TO 400                                        
      DO 360 J=2,NVIB1                                                  
      IF(EN <= XVIB1(J):
) GO TO 370                                      
  360 CONTINUE                                                          
      J=NVIB1                                                           
  370 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J)) 
      EFAC=math.sqrt(1.0-(EIN(2)/EN))
      QIN(2,I)=AVIB1*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      ELF=EN-EIN(2)
      FWD=math.log((EN+ELF)/(EN+ELF-2.0*math.sqrt(EN*ELF)))
      BCK=math.log((EN+ELF+2.0*math.sqrt(EN*ELF))/(EN+ELF))
# RATIO OF MT TO TOTAL X-SECT FOR RESONANCE PART =RAT
      XMT=((1.5-FWD/(FWD+BCK))*QIN(2,I)+RAT*(A*EN+B))*1.D-16
      QIN(2,I)=((A*EN+B)+QIN(2,I))*1.D-16      
      PEQIN(2,I)=0.5+(QIN(2,I)-XMT)/QIN(2,I)
      QIN(2,I)=QIN(2,I)/(1.0+APOP)                                      
  400 CONTINUE                                                          
# V1 + V3                                                               
      QIN(3,I)=0.0                                                      
      IF(EN <= EIN(3):
) GO TO 500                                        
      DO 410 J=2,NVIB2                                                  
      IF(EN <= XVIB2(J):
) GO TO 420                                      
  410 CONTINUE                                                          
      J=NVIB2                                                           
  420 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J))
      EFAC=math.sqrt(1.0-(EIN(3)/EN))
      QIN(3,I)=AVIB2*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      ELF=EN-EIN(3)
      FWD=math.log((EN+ELF)/(EN+ELF-2.0*math.sqrt(EN*ELF)))
      BCK=math.log((EN+ELF+2.0*math.sqrt(EN*ELF))/(EN+ELF))
# RATIO OF MT TO TOTAL X-SECT FOR RESONANCE PART =RAT
      XMT=((1.5-FWD/(FWD+BCK))*QIN(3,I)+RAT*(A*EN+B))*1.D-16
      QIN(3,I)=((A*EN+B)+QIN(3,I))*1.D-16      
      PEQIN(3,I)=0.5+(QIN(3,I)-XMT)/QIN(3,I)
  500 CONTINUE                                                          
#  VIBRATION HARMONICS 1                                                
      QIN(4,I)=0.0                                                      
      IF(EN <= EIN(4):
) GO TO 600                                        
      DO 510 J=2,NVIB3                                                  
      IF(EN <= XVIB3(J):
) GO TO 520                                      
  510 CONTINUE                                                          
      J=NVIB3                                                           
  520 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J)) 
      QIN(4,I)=(A*EN+B)*1.D-16                                          
  600 CONTINUE                                                          
#  VIBRATION HARMONICS 2                                                
      QIN(5,I)=0.0                                                      
      IF(EN <= EIN(5):
) GO TO 700                                        
      DO 610 J=2,NVIB4                                                  
      IF(EN <= XVIB4(J):
) GO TO 620                                      
  610 CONTINUE                                                          
      J=NVIB4                                                           
  620 A=(YVIB4(J)-YVIB4(J-1))/(XVIB4(J)-XVIB4(J-1))                     
      B=(XVIB4(J-1)*YVIB4(J)-XVIB4(J)*YVIB4(J-1))/(XVIB4(J-1)-XVIB4(J)) 
      QIN(5,I)=(A*EN+B)*1.D-16                                          
  700 CONTINUE                                                          
#  DISOCIATIVE EXCITATION                                               
      QIN(6,I)=0.0                                                      
      IF(EN <= EIN(6):
) GO TO 850                                        
      DO 810 J=2,NDIS1                                                  
      IF(EN <= XDIS1(J):
) GO TO 820                                      
  810 CONTINUE                                                          
      J=NDIS1                                                           
  820 A=(YDIS1(J)-YDIS1(J-1))/(XDIS1(J)-XDIS1(J-1))                     
      B=(XDIS1(J-1)*YDIS1(J)-XDIS1(J)*YDIS1(J-1))/(XDIS1(J-1)-XDIS1(J)) 
      QIN(6,I)=(A*EN+B)*1.D-16                                   
  850 CONTINUE                                                          
#  DISOCIATIVE EXCITATION                                               
      QIN(7,I)=0.0                                                      
      IF(EN <= EIN(7):
) GO TO 900                                        
      DO 860 J=2,NDIS2                                                  
      IF(EN <= XDIS2(J):
) GO TO 870                                      
  860 CONTINUE                                                          
      J=NDIS2                                                           
  870 A=(YDIS2(J)-YDIS2(J-1))/(XDIS2(J)-XDIS2(J-1))                     
      B=(XDIS2(J-1)*YDIS2(J)-XDIS2(J)*YDIS2(J-1))/(XDIS2(J-1)-XDIS2(J)) 
      QIN(7,I)=(A*EN+B)*1.D-16                                   
  900 CONTINUE                                                          
#    DISOCIATIVE EXCITATION                                             
      QIN(8,I)=0.0                                                      
      IF(EN <= EIN(8):
) GO TO 950                                        
      DO 910 J=2,NDIS3                                                  
      IF(EN <= XDIS3(J):
) GO TO 920                                      
  910 CONTINUE                                                          
      J=NDIS3                                                           
  920 A=(YDIS3(J)-YDIS3(J-1))/(XDIS3(J)-XDIS3(J-1))                     
      B=(XDIS3(J-1)*YDIS3(J)-XDIS3(J)*YDIS3(J-1))/(XDIS3(J-1)-XDIS3(J)) 
      QIN(8,I)=(A*EN+B)*1.D-16                                   
  950 CONTINUE                                                          
#    DISOCIATIVE EXCITATION                                             
      QIN(9,I)=0.0                                                      
      IF(EN <= EIN(9):
) GO TO 990                                        
      DO 960 J=2,NDIS4                                                  
      IF(EN <= XDIS4(J):
) GO TO 970                                      
  960 CONTINUE                                                          
      J=NDIS4                                                           
  970 A=(YDIS4(J)-YDIS4(J-1))/(XDIS4(J)-XDIS4(J-1))                     
      B=(XDIS4(J-1)*YDIS4(J)-XDIS4(J)*YDIS4(J-1))/(XDIS4(J-1)-XDIS4(J)) 
      QIN(9,I)=(A*EN+B)*1.D-16                                   
  990 CONTINUE                                                          
#                                                                       
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)+QIN(1,I)+QIN(2,I)+QIN(3,I)+QIN(4,I)+
     /QIN(5,I)+QIN(6,I)+QIN(7,I)+QIN(8,I)+QIN(9,I)
#
 1000 CONTINUE                                                          
#  SAVE COMPUTE TIME   
      IF(EFINAL <= EIN(9):
) NIN=8
      IF(EFINAL <= EIN(8):
) NIN=7    
      IF(EFINAL <= EIN(7):
) NIN=6                                        
      IF(EFINAL <= EIN(6):
) NIN=5
      IF(EFINAL <= EIN(5):
) NIN=4
      IF(EFINAL <= EIN(4):
) NIN=3
      IF(EFINAL <= EIN(3):
) NIN=2                                        
#                                                                       
      RETURN                                                            
      # end    
      def GAS42(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY   
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      DIMENSION XEN(62),YXSEC(62),XVIBH(15),YVIBH(15),
     /XVIB1(15),YVIB1(15),XVIB3(15),YVIB3(15),XEXC(34),YEXC(34),      
     /XION(71),YION(71),XATT(33),YATT(33)
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME                                                 
#
      DATA XEN/0.0,.001,0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,        
     /0.09,0.10,0.12,0.14,0.16,0.18,0.20,0.24,0.30,0.35,
     /0.40,0.50,0.60,0.70,0.80,1.00,1.50,2.00,2.50,3.00,                
     /3.50,4.00,5.00,6.00,7.00,8.00,10.0,12.0,14.0,17.0,
     /20.0,24.0,28.0,32.0,36.0,40.0,45.0,50.0,60.0,75.0,
     /100.,150.,200.,300.,500.,700.,1000.,2000.,4000.,10000.,
     /20000.,100000./
#
      DATA YXSEC/100.,80.0,50.3,43.0,39.0,35.5,33.0,31.0,29.4,27.8,
     /26.8,25.5,23.5,21.0,18.5,16.0,14.0,10.5,7.20,5.65,    
     /4.25,3.15,2.70,2.70,3.30,4.30,6.20,7.80,9.30,10.4,
     /11.1,11.3,11.3,10.9,10.5,10.0,9.00,8.50,8.00,7.50,
     /7.20,6.80,6.50,6.40,6.30,6.20,6.00,5.75,5.05,4.50,
     /3.75,2.70,1.75,1.00,0.57,0.38,0.24,0.11,0.05,0.02,
     /0.01,.002/
#
#  VIBRATION V1                         
      DATA XVIB1/0.110,1.00,1.50,2.00,2.50,3.00,3.50,4.00,5.00,6.00,
     /10.0,100.,1000.,10000.,100000./  
      DATA YVIB1/0.0,.00001,0.20,0.48,0.72,0.80,0.72,0.48,0.32,0.12,  
     /.0016,.001,.0001,.00001,.000001/                 
#  VIBRATION V3                         
      DATA XVIB3/0.180,1.00,1.50,2.00,2.50,3.00,3.50,4.00,5.00,6.00,
     /10.0,100.,1000.,10000.,100000./  
      DATA YVIB3/0.0,.00001,0.40,0.96,1.44,1.60,1.44,0.96,0.64,0.24,  
     /.0032,.001,.0001,.00001,.000001/                 
#  VIBRATION HARMONIC (2V1+2V3 AND HIGHER HARMONICS)                                   
      DATA XVIBH/0.360,1.00,1.50,2.00,2.50,3.00,3.50,4.00,5.00,6.00,
     /10.0,100.,1000.,10000.,100000./  
      DATA YVIBH/0.0,.00001,0.21,0.54,0.78,0.90,0.78,0.54,0.36,0.18,  
     /.0024,.001,.0001,.00001,.000001/                 
#                                     
      DATA XION/15.56,16.5,17.0,17.5,18.0,18.5,19.0,19.5,20.0,20.5, 
     /21.0,22.0,23.0,24.0,26.0,28.0,30.0,32.0,34.0,36.0,
     /38.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,
     /85.0,90.0,95.0,100.,105.,110.,115.,120.,125.,130.,
     /135.,140.,150.,160.,170.,180.,200.,220.,250.,300.,
     /350.,400.,450.,500.,600.,700.,800.,900.,1000.,1200.,      
     /1400.,2000.,2500.,3000.,4000.,5000.,6000.,8000.,10000.,20000.,
     /100000./
      DATA YION/0.0,0.045,.064,.079,.130,.183,.236,.295,.356,.419,
     /.493,.645,0.80,0.96,1.26,1.54,1.80,2.03,2.25,2.45,
     /2.63,2.79,3.15,3.48,3.76,3.99,4.19,4.35,4.48,4.58,
     /4.67,4.74,4.80,4.84,4.88,4.90,4.92,4.93,4.93,4.93,
     /4.93,4.92,4.89,4.86,4.81,4.76,4.66,4.54,4.37,4.08,
     /3.83,3.59,3.38,3.20,2.88,2.62,2.41,2.23,2.07,1.85,       
     /1.66,1.37,1.15,1.02,0.82,0.67,0.58,0.45,0.36,0.21,           
     /.06/ 
#  ATTACHMENT     
      DATA XATT/10.0,10.4,10.5,10.6,10.7,10.8,10.9,11.0,11.1,11.2,
     /11.3,11.4,11.5,11.6,11.7,11.8,11.9,12.0,12.1,12.2,
     /12.3,12.4,12.5,12.6,12.7,12.8,12.9,13.0,20.0,100.,
     /1000.,10000.,100000./       
      DATA YATT/0.00,.0015,.0032,.0046,.0063,.0084,.010,.014,.017,.020,
     /.022,.024,.025,.025,.023,.021,.018,.015,.012,.0097,
     /.0069,.0048,.0033,.0022,.0015,.00092,.00061,.00024,.0002,.0001,
     /.00001,.000001,.0000001/   
#  DISOCIATION X-SECTION EXCLUDING DISOCIATIVE IONISATION X-SECTION     
      DATA XEXC/10.0,10.1,10.6,11.1,11.6,12.1,12.6,13.1,13.6,14.1,      
     /14.6,15.1,16.2,17.2,18.2,20.2,22.2,24.2,27.2,30.3,                
     /40.0,50.0,100.,200.,300.,400.,500.,600.,1000.,2000.,
     /4000.,10000.,20000.,100000./                          
      DATA YEXC/0.00,0.01,0.11,0.21,0.39,0.58,0.65,0.73,0.82,0.89,      
     /0.97,1.03,1.15,1.24,1.33,1.49,1.61,1.68,1.78,1.82,                
     /1.81,1.83,1.88,1.88,1.70,1.40,1.10,0.88,0.49,0.22,               
     /0.11,0.05,0.03,.008/                                    
# ----------------------------------------------------------------      
# ---------------------------------------------------------------       
      NAME=' BF3  -2001--- '                                            
#               
      NION=1
      NATT=1
      NIN=9
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0 
# ANISOTROPIC SCATTERING FOR LEVELS 6 AND 7
      KIN(6)=1
      KIN(7)=1  
#                                                                        
      NDATA=62 
      NVIB1=15                                                         
      NVIB3=15
      NVIBH=15                                                          
      NIOND=71                                                         
      NATT1=33                                                          
      NEXC=34                                                           
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(67.8062*AMU)                                      
      E(3)=15.56                                                        
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
      EOBY(1)=15.56
      EIN(1)=-0.0596  
      EIN(2)=-0.086  
      EIN(3)=-0.110                                                     
      EIN(4)=0.0596                                                     
      EIN(5)=0.086 
      EIN(6)=0.110
      EIN(7)=0.180 
      EIN(8)=0.360                                                     
      EIN(9)=10.0  
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       BF3            '
      SCRPT(3)=' IONISATION    ELOSS= 15.56   '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              ' 
      SCRPT(6)='                              '
      SCRPT(7)=' VIB V4        ELOSS= -0.0596 '
      SCRPT(8)=' VIB V2        ELOSS= -0.086  '
      SCRPT(9)=' VIB V1        ELOSS= -0.110  '
      SCRPT(10)=' VIB V4        ELOSS=  0.0596 '
      SCRPT(11)=' VIB V2        ELOSS=  0.086  '
      SCRPT(12)=' VIB V1 (ANIS) ELOSS=  0.110  '
      SCRPT(13)=' VIB V3 (ANIS) ELOSS=  0.180  '
      SCRPT(14)=' VIB HAR       ELOSS=  0.360  '
      SCRPT(15)=' EXC           ELOSS= 10.0    '                        
      APOP1=math.exp(EIN(1)/AKT)
      APOP2=math.exp(EIN(2)/AKT)
      APOP3=math.exp(EIN(3)/AKT)
      EN=-ESTEP/2.0                                      
      DO 9000 I=1,NSTEP                                              
      EN=EN+ESTEP                                                       
      DO 10 J=2,NDATA                                                   
      IF(EN <= XEN(J):
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA                                                           
   20 A=(YXSEC(J)-YXSEC(J-1))/(XEN(J)-XEN(J-1))                         
      B=(XEN(J-1)*YXSEC(J)-XEN(J)*YXSEC(J-1))/(XEN(J-1)-XEN(J))         
      Q(2,I)=(A*EN+B)*1.0D-16
      Q(3,I)=0.0                                                        
      IF(EN < E(3):
) GO TO 200                                          
      DO 110 J=2,NIOND                                                 
      IF(EN <= XION(J):
) GO TO 120                                       
  110 CONTINUE                                                          
      J=NIOND                                                   
  120 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.D-16                                            
#                                                                       
  200 Q(4,I)=0.0                                     
      QATT(1,I)=Q(4,I)                   
      IF(EN < XATT(1):
) GO TO 300                                       
      IF(EN > XATT(NATT1):
) GO TO 300                                   
      DO 210 J=2,NATT1                                                  
      IF(EN <= XATT(J):
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NATT1                                                           
  220 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))                         
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))       
      Q(4,I)=(A*EN+B)*1.D-16
      QATT(1,I)=Q(4,I)                                            
  300 Q(5,I)=0.0                                                        
      Q(6,I)=0.0
#           
# SUPERELASTIC OF VIBRATION V4                                                          
#
      QIN(1,I)=0.0
      IF(EN == 0.0):
 GO TO 305
      EFAC=math.sqrt(1.0-(EIN(1)/EN))
      QIN(1,I)=0.018*math.log((EFAC+1.0)/(EFAC-1.0))/EN    
      QIN(1,I)=QIN(1,I)*APOP1/(1.0+APOP1)*1.D-16
  305 CONTINUE     
#      
# SUPERELASTIC OF VIBRATION V2
      QIN(2,I)=0.0                                                      
      IF(EN == 0.0):
 GO TO 400                                           
      EFAC=math.sqrt(1.0-(EIN(2)/EN))
      QIN(2,I)=0.045*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      QIN(2,I)=QIN(2,I)*APOP2/(1.0+APOP2)*1.D-16
  400 CONTINUE             
# SUPERELASTIC OF VIBRATION V1
      QIN(3,I)=0.0                                                      
      IF(EN == 0.0):
 GO TO 500                                           
      EFAC=math.sqrt(1.0-(EIN(3)/EN))
      QIN(3,I)=0.37*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      QIN(3,I)=QIN(3,I)*APOP3/(1.0+APOP3)*1.D-16
  500 CONTINUE             
#   V4                                                                    
      QIN(4,I)=0.0                                                      
      IF(EN <= EIN(4):
) GO TO 600                                        
      EFAC=math.sqrt(1.0-(EIN(4)/EN))
      QIN(4,I)=0.018*math.log((1.0+EFAC)/(1.0-EFAC))/EN      
      QIN(4,I)=QIN(4,I)*1.0/(1.0+APOP1)*1.D-16 
  600 CONTINUE                                                          
#   V2
      QIN(5,I)=0.0                                                      
      IF(EN <= EIN(5):
) GO TO 700                                        
      EFAC=math.sqrt(1.0-(EIN(5)/EN))
      QIN(5,I)=0.045*math.log((1.0+EFAC)/(1.0-EFAC))/EN                   
      QIN(5,I)=QIN(5,I)*1.0/(1.0+APOP2)*1.D-16                 
  700 CONTINUE
#   V1                                                                      
      QIN(6,I)=0.0                                                      
      IF(EN <= EIN(6):
) GO TO 800                                        
      DO 710 J=2,NVIB1                                                  
      IF(EN <= XVIB1(J):
) GO TO 720                                      
  710 CONTINUE                                                          
      J=NVIB1                                                           
  720 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J))
      EFAC=math.sqrt(1.0-(EIN(6)/EN))
      QIN(6,I)=0.37*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      ELF=EN-EIN(6)
      FWD=math.log((EN+ELF)/(EN+ELF-2.0*math.sqrt(EN*ELF)))
      BCK=math.log((EN+ELF+2.0*math.sqrt(EN*ELF))/(EN+ELF))
# ASSUME RATIO MOM T./ TOT X-SECT FOR RESONANCE PART = RAT4
      RAT4=0.58
      XMT=((1.5-FWD/(FWD+BCK))*QIN(6,I)+RAT4*(A*EN+B))*1.D-16
      QIN(6,I)=(QIN(6,I)+(A*EN+B))*1.D-16
      PEQIN(6,I)=0.5+(QIN(6,I)-XMT)/QIN(6,I)
      QIN(6,I)=QIN(6,I)*1.0/(1.0+APOP3)
  800 CONTINUE                                                          
#  V3                                                                      
      QIN(7,I)=0.0                                                      
      IF(EN <= EIN(7):
) GO TO 900                                        
      DO 810 J=2,NVIB3                                                  
      IF(EN <= XVIB3(J):
) GO TO 820                                      
  810 CONTINUE                                                          
      J=NVIB3                                                           
  820 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J))
      EFAC=math.sqrt(1.0-(EIN(7)/EN))
      QIN(7,I)=0.74*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      ELF=EN-EIN(7)
      FWD=math.log((EN+ELF)/(EN+ELF-2.0*math.sqrt(EN*ELF)))
      BCK=math.log((EN+ELF+2.0*math.sqrt(EN*ELF))/(EN+ELF))
# ASSUME RATIO MOM T./ TOT X-SECT FOR RESONANCE PART = RAT4
      RAT4=0.58
      XMT=((1.5-FWD/(FWD+BCK))*QIN(7,I)+RAT4*(A*EN+B))*1.D-16
      QIN(7,I)=(QIN(7,I)+(A*EN+B))*1.D-16
      PEQIN(7,I)=0.5+(QIN(7,I)-XMT)/QIN(7,I)
  900 CONTINUE                                                          
#                                                                       
      QIN(8,I)=0.0                                                      
      IF(EN <= EIN(8):
) GO TO 1000                                       
      DO 910 J=2,NVIBH                                                  
      IF(EN <= XVIBH(J):
) GO TO 920                                      
  910 CONTINUE                                                          
      J=NVIBH                                                          
  920 A=(YVIBH(J)-YVIBH(J-1))/(XVIBH(J)-XVIBH(J-1))                     
      B=(XVIBH(J-1)*YVIBH(J)-XVIBH(J)*YVIBH(J-1))/(XVIBH(J-1)-XVIBH(J)) 
      QIN(8,I)=(A*EN+B)*1.D-16                                          
 1000 CONTINUE
#
      QIN(9,I)=0.0                                                      
      IF(EN <= EIN(9):
) GO TO 1100                                       
      DO 1010 J=2,NEXC                                                  
      IF(EN <= XEXC(J):
) GO TO 1020                                      
 1010 CONTINUE                                                          
      J=NEXC                                                           
 1020 A=(YEXC(J)-YEXC(J-1))/(XEXC(J)-XEXC(J-1))                     
      B=(XEXC(J-1)*YEXC(J)-XEXC(J)*YEXC(J-1))/(XEXC(J-1)-XEXC(J)) 
      QIN(9,I)=(A*EN+B)*1.D-16                                          
 1100 CONTINUE
#
#                                                                       
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)+QIN(1,I)+QIN(2,I)+QIN(3,I)+QIN(4,I)+ 
     /QIN(5,I)+QIN(6,I)+QIN(7,I)+QIN(8,I)+QIN(9,I)
 9000 CONTINUE                                                          
#  SAVE COMPUTE TIME
      IF(EFINAL <= EIN(9):
) NIN=8
      IF(EFINAL <= EIN(8):
) NIN=7 
      IF(EFINAL <= EIN(7):
) NIN=6 
      IF(EFINAL <= EIN(6):
) NIN=5
      IF(EFINAL <= EIN(5):
) NIN=4
      IF(EFINAL <= EIN(4):
) NIN=3                                        
      IF(EFINAL <= EIN(3):
) NIN=2                                        
      IF(EFINAL <= EIN(2):
) NIN=1                                        
      IF(EFINAL <= EIN(1):
) NIN=0                                        
      RETURN                                                            
      # end 
      def GAS43(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY   
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      DIMENSION XENM(53),YXMOM(53),XENT(50),YXTOT(50),
     /XVIB2(24),YVIB2(24),XVIB3(24),YVIB3(24),XVIB4(24),YVIB4(24),
     /XVIB5(24),YVIB5(24),XVIB6(24),YVIB6(24),      
     /XDISS(29),YDISS(29),XATT(26),YATT(26),X3ATT(10),Y3ATT(10),
     /XION(50),YION(50)
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME     
# ELASTIC MOMENTUM TRANSFER (USED LOG INTERPOLATION  IN def)  
      DATA XENM/1.D-6,0.001,0.01,0.06,0.10,0.30,0.60,1.00,1.40,2.00,
     /3.00,4.00,5.00,6.00,7.00,8.00,9.00,10.0,15.0,20.0,
     /25.0,30.0,40.0,50.0,60.0,70.0,80.0,90.0,100.,200.,
     /300.,400.,500.,700.,1000.,1500.,2000.,3000.,5000.,7000.,
     /1.0D4,2.0D4,4.0D4,7.0D4,1.0D5,2.0D5,4.0D5,7.0D5,1.0D6,2.0D6,
     /4.0D6,7.0D6,1.0D7/
      DATA YXMOM/5500.,5500.,3250.,580.,320.,79.0,31.5,18.0,14.8,15.2,
     /15.9,16.4,16.8,17.1,17.3,17.3,17.2,17.0,15.0,12.5,
     /10.0,8.20,6.20,4.85,4.10,3.60,3.06,2.66,2.34,1.20,
     /0.82,0.64,.515,0.38,0.26,0.17,.112,.058,.0236,.0130,
     /.00685,.00196,5.65D-4,2.09D-4,7.65D-5,3.47D-5,1.14D-5,4.82D-6,
     /2.80D-6,9.63D-7,
     /3.12D-7,1.20D-7,6.42D-8/
#  ELASTIC TOTAL         
      DATA XENT/1.D-6,0.001,0.01,0.10,1.00,1.50,2.00,3.00,4.00,5.00,
     /6.00,7.00,8.00,9.00,10.0,15.0,20.0,30.0,40.0,50.0,
     /60.0,70.0,80.0,90.0,100.,150.,200.,300.,400.,500.,
     /700.,1000.,1500.,2000.,3000.,5000.,7000.,1.D4,2.D4,4.D4,
     /7.D4,1.D5,2.D5,4.D5,7.D5,1.D6,2.D6,4.D6,7.D6,1.D7/
      DATA YXTOT/5500.,5500.,3200.,320.,32.0,18.0,14.5,14.0,15.0,16.5,
     /17.5,18.5,19.5,20.0,20.7,23.5,23.5,21.5,19.5,18.5,     
     /17.5,17.0,16.0,15.0,14.5,12.2,10.2,7.76,6.39,5.47,
     /4.28,3.26,2.35,1.84,1.29,.807,.590,.422,.221,.117,
     /.0728,.0549,.0342,.0241,.0201,.0187,.0173,.0168,.0166,.0166/   
#  VIBRATION V11 (RESONANCE ONLY) ANALYTIC DIPOLE IN def
      DATA XVIB2/0.065,1.00,2.00,3.00,4.00,4.50,5.00,6.00,7.00,8.00,
     /9.00,10.0,11.0,12.0,13.0,15.0,20.0,50.0,100.,1000.,             
     /10000.,100000.,1.D6,1.D7/                                        
      DATA YVIB2/0.0,0.0,.018,.041,.127,.118,.091,.082,.118,.137,
     /.137,.114,.041,.018,.009,.004,.0009,1.0D-4,1.0D-5,1.0D-6,        
     /1.0D-7,1.0D-8,1.D-9,1.D-10/                                     
#  VIBRATION V2  (RESONANCE ONLY) ANALYTIC DIPOLE IN def
      DATA XVIB3/0.1001,1.00,2.00,3.00,4.00,4.50,5.00,6.00,7.00,8.00,
     /9.00,10.0,11.0,12.0,13.0,15.0,20.0,50.0,100.,1000.,      
     /10000.,100000.,1.D6,1.D7/                                       
      DATA YVIB3/0.0,0.0,.114,.223,.702,.676,.501,.455,.663,.748, 
     /.735,.624,.228,.100,.041,.018,.009,1.0D-3,1.0D-4,1.0D-5,       
     /1.0D-6,1.0D-7,1.D-8,1.D-9/                                      
#  VIBRATION V1 (RESONANCE ONLY) ANALYTIC DIPOLE IN def
      DATA XVIB4/0.1523,1.00,2.00,3.00,4.00,4.50,5.00,6.00,7.00,8.00,
     /9.00,10.0,11.0,12.0,13.0,15.0,20.0,50.0,100.,1000.,
     /10000.,100000.,1.D6,1.D7/                                        
      DATA YVIB4/0.0,0.0,.246,.491,1.52,1.46,1.09,.982,1.45,1.64,
     /1.62,1.37,.500,.218,.091,.045,.023,1.0D-3,1.0D-4,1.0D-5,   
     /1.0D-6,1.0D-7,1.D-8,1.D-9/                                       
#  VIBRATION HARMONIC 2(V1) RESONANCE + C-H STRETCH MODE 
#  ANALYTIC DIPOLE IN def
      DATA XVIB5/0.35,1.00,2.00,3.00,4.00,4.50,5.00,6.00,7.00,8.00,
     /9.00,10.0,11.0,12.0,13.0,15.0,20.0,50.0,100.,1000.,
     /10000.,100000.,1.D6,1.D7/                                        
      DATA YVIB5/0.0,0.0,.074,.149,.462,.437,.330,.297,.437,.495,
     /.487,.413,.149,.066,.025,.016,.008,1.0D-4,1.0D-5,1.0D-6,   
     /1.0D-7,1.0D-8,1.D-9,1.D-10/                                       
# VIBRATION HARMONIC (3(V1) + ALL OTHER HARMONICS)
      DATA XVIB6/0.500,1.00,2.00,3.00,4.00,4.50,5.00,6.00,7.00,8.00,
     /9.00,10.0,11.0,12.0,13.0,15.0,20.0,50.0,100.,1000.,
     /10000.,100000.,1.D6,1.D7/                                        
      DATA YVIB6/0.0,0.0,.216,.432,1.34,1.28,.960,.864,1.27,1.44,
     /1.42,1.20,.436,.192,.078,.042,.018,6.0D-5,6.0D-6,6.0D-7,   
     /6.0D-8,6.0D-9,6.D-10,6.D-11/                                     
#  DISOCIATION X-SECTION (USED LOG INTERP HENCE FINITE AT THRESHOLD) 
      DATA XDISS/11.8,12.0,13.0,14.0,15.0,18.0,20.0,25.0,30.0,40.0,     
     /50.0,60.0,80.0,100.,120.,150.,200.,300.,400.,500.,
     /600.,800.,1000.,2000.,4000.,10000.,10000,1.D6,1.D7/ 
      DATA YDISS/1.D-9,.011,.108,0.60,1.05,1.92,2.38,3.15,3.60,3.98,
     /4.13,4.28,4.35,4.28,4.20,4.17,4.02,3.83,3.68,3.53,   
     /3.23,2.70,2.28,1.23,.705,.315,.0315,.003,.0003/
# SCALED FROM C2F6       
      DATA XION/14.48,17.0,18.0,19.0,21.0,23.0,25.0,27.0,29.0,31.0,     
     /33.0,35.0,37.0,39.0,41.0,43.0,45.0,47.0,49.0,51.0,                
     /61.0,71.0,81.0,91.0,101.,126.,151.,176.,201.,251.,                
     /301.,351.,401.,451.,501.,601.,701.,801.,901.,1001.,               
     /1251.,1501.,1751.,2001.,2501.,3001.,10000.,100000.,1.D6,1.D7/
      DATA YION/0.00,.0889,.211,.375,.782,1.18,1.59,2.11,2.49,2.81,     
     /3.16,3.49,3.86,4.17,4.54,4.85,5.14,5.52,5.77,6.19,                
     /6.82,7.57,7.84,8.17,8.39,8.77,8.75,8.76,8.57,8.17,                
     /7.41,7.13,6.55,6.21,5.89,5.17,4.72,4.40,3.96,3.77,                
     /3.19,2.79,2.44,2.28,1.88,1.67,0.60,0.09,.009,.0009/  
# 2 BODY ATTACHMENT FIT TO BASILE ET AL   
      DATA XATT/2.00,2.25,2.50,2.75,3.00,3.25,3.50,3.75,4.00,4.25,
     /4.50,4.75,5.00,5.25,5.50,5.75,6.00,6.25,6.50,6.75,
     /7.00,8.00,10.0,20.0,100.0,100000./
      DATA YATT/.0,1.27D-5,3.40D-5,6.46D-5,9.01D-5,1.17D-4,1.41D-4,
     /1.46D-4,1.41D-4,1.26D-4,
     /1.02D-4,7.82D-5,5.95D-5,4.25D-5,2.89D-5,1.70D-5,1.16D-5,6.80D-6,
     /2.72D-6,1.19D-6,
     /5.10D-7,3.40D-7,1.0D-7,1.0D-8,1.0D-9,1.0D-10/
# 3-BODY ATTACHMENT TO FIT BASILE ET AL ( USES LOG INTERPOLATION)
#   VALUE AT 760 TORR :  SCALE BY 760/P FOR OTHER PRESSURES 
      DATA X3ATT/.001,0.01,0.04,0.15,0.20,0.40,0.50,0.60,1.50,3.00/
      DATA Y3ATT/1.D-4,1.D-4,1.D-5,1.D-5,2.4D-4,2.4D-4,2.0D-4,1.6D-4,
     /1.2D-4,1.D-5/ 
# --------------------------------------------------------------------- 
#    UPDATE 2010      USED ISOTROPIC X-SECTIONS             
#    FIT TO DATA OF URQUIJO ET AL   EUR PHYS J D 51 241-246  2009
#    AND DATA OF BASILE ET AL   PROC INT CONF PHEN IN ION GASES 1991
#    GOOD FIT OBTAINED TO ARGON MIXTURE DATA OF URQUIIJO FOR 2 5 AND 
#    10% AND 20% MIXES . DATA OF 1% MIX IS 0.5% (MISSPRINT) 
#    FIT TO THE LONGITUDINAL DIFFUSION DATA DOES NOT GIVE LARGE 
#    THRESHOLD PEAK OF URQUIJO . 
#    USED SCALED C2F6 X-SECTIONS FOR VIBRATIONS AND PLUS EXTRA C-H
#    STRETCH MODE.
#    INCLUDED A SMALL 3 BODY X-SECTION TO FIT ATTACHMENT MEASURED BY
#    BASILE ET AL.
#    X-SECTIONS NOW MORE ACCURATE THAN LAST DATA SET . NOW 3*   
# --------------------------------------------------------------------       
      NAME=' C2H2F4 2010   '                                            
#               
      NION=1
      NATT=1
      NIN=9
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0
#   
      NDATA=53  
      NETOT=50                                                        
      NVIB2=24                                                          
      NVIB3=24                                                          
      NVIB4=24                                                          
      NVIB5=24                                                          
      NVIB6=24
      NDISS=29
      NATT1=26
      N3ATT=10
      NIOND=50                                                        
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(102.0308928*AMU)                                
      E(3)=14.48                                                        
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
      EOBY(1)=14.48
      EIN(1)=-0.065
      EIN(2)=-0.1001
      EIN(3)=-0.1523                                             
      EIN(4)=0.065                                                      
      EIN(5)=0.1001
      EIN(6)=0.1523                                                     
      EIN(7)=0.35                                                       
      EIN(8)=0.500 
      EIN(9)=11.8
# *********************************************************************
# PENNING TRANSFER FRACTION FOR EACH LEVEL
      DO 5 K=1,9
      DO 5 L=1,3
    5 PENFRA[L,K]=0.0
# PENNING TRANSFER FRACTION FOR EXCITATION LEVEL ONLY
      PENFRA[1,9]=0.0
# PENNING TRANSFER DISTANCE IN MICRONS
      PENFRA[2,9]=1.0
# PENNING TRANSFER TIME IN PICOSECONDS
      PENFRA[3,9]=1.0
      IF(IPEN == 0):
 GO TO 8
      IF(PENFRA[1,9] == 0.0):
 GO TO 8
      WRITE(6,999) NAME,EIN(9),PENFRA[1,9],PENFRA[2,9],PENFRA[3,9]
  999 FORMAT(' GAS = ',A15,' ENERGY LEVEL = ',F7.4,' EV.',/,' PENNING PR
     /OBABILITY = ',F5.3,' ABS.LENGTH = ',F7.2,' DECAY TIME = ',F7.1,/)
    8 CONTINUE 
#**********************************************************************
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC  ISOTROPIC  C2H2F4   '
      SCRPT(3)=' IONISATION    ELOSS= 14.48   '
      SCRPT(4)=' ATTACHMENT (2 AND 3 BODY)    '
      SCRPT(5)='                              ' 
      SCRPT(6)='                              '
      SCRPT(7)=' VIB V11       ELOSS= -0.065  '
      SCRPT(8)=' VIB V2        ELOSS= -0.1001 '
      SCRPT(9)=' VIB V1        ELOSS= -0.1523 '
      SCRPT(10)=' VIB V11       ELOSS=  0.065  '
      SCRPT(11)=' VIB V2        ELOSS=  0.1001 '
      SCRPT(12)=' VIB V1        ELOSS=  0.1523 '
      SCRPT(13)=' VIB C-H + 2V1 ELOSS=  0.35   '
      SCRPT(14)=' VIB HARMONIC  ELOSS=  0.50   '
      SCRPT(15)=' EXC DISS0CTN  ELOSS= 11.8    '
# CALCULATE DENSITY SCALING FOR 3-BODY ATTACHMENT 
      FAC=(273.15+20.0)*TORR/((TEMPC+273.15)*760.0)
#                       
      APOP1=math.exp(EIN(1)/AKT)
      APOP2=math.exp(EIN(2)/AKT)
      APOP3=math.exp(EIN(3)/AKT)
      APSUM=1.0+APOP1+APOP2+APOP3
      APOP1=APOP1/APSUM
      APOP2=APOP2/APSUM
      APOP3=APOP3/APSUM
#  RENORMALISE GS POP TO ALLOW HIGHER EXCITATION
      APOPGS=1.0
#
      EN=-ESTEP/2.0                                      
      DO 9000 I=1,NSTEP                                              
      EN=EN+ESTEP
      IF(EN == 0.0):
 XMOMT=5500.D-16
      IF(EN == 0.0):
 GO TO 30                                            
      DO 10 J=2,NDATA                                                   
      IF(EN <= XENM(J):
) GO TO 20                                        
   10 CONTINUE                                                          
      J=NDATA
# USE LOG INTERPOLATION 
   20 Y1=math.log(YXMOM(J-1))
      Y2=math.log(YXMOM(J))
      X1=math.log(XENM(J-1))
      X2=math.log(XENM(J))                                                  
      A=(Y2-Y1)/(X2-X1)                                                 
      B=(X1*Y2-X2*Y1)/(X1-X2)                                           
      XMOMT=math.exp((A*math.log(EN)+B))*1.0D-16
   30 IF(EN == 0.0) XTOT=5500.D-16
      IF(EN == 0.0):
 GO TO 70 
      DO 50 J=2,NETOT
      IF(EN <= XENT(J):
) GO TO 60
   50 CONTINUE
      J=NETOT
   60 Y1=math.log(YXTOT(J-1))
      Y2=math.log(YXTOT(J))
      X1=math.log(XENT(J-1))
      X2=math.log(XENT(J))   
      A=(Y2-Y1)/(X2-X1)                                                 
      B=(X1*Y2-X2*Y1)/(X1-X2)                                           
      XTOT=math.exp((A*math.log(EN)+B))*1.0D-16
   70 CONTINUE     
      Q(2,I)=XTOT
      IF(KEL(2):
 == 0) Q(2,I)=XMOMT
      IF(KEL(2):
 == 0) PEQEL(2,I)=0.5
#      
      Q(3,I)=0.0 
      PEQEL(3,I)=0.5                                        
      IF(EN < E(3):
) GO TO 200                                          
      DO 110 J=2,NIOND                                                  
      IF(EN <= XION(J):
) GO TO 120                                       
  110 CONTINUE                                                          
      J=NIOND                                                           
  120 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.D-16                                            
#  TWO BODY ATTACHMENT                                       
  200 Q(4,I)=0.0    
      QATT(1,I)=Q(4,I)
      IF(EN < XATT(1):
) GO TO 230                                       
      IF(EN > XATT(NATT1):
) GO TO 230                                   
      DO 210 J=2,NATT1                                                  
      IF(EN <= XATT(J):
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NATT1                                                           
  220 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))                         
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))       
      Q(4,I)=(A*EN+B)*1.D-16
      QATT(1,I)=Q(4,I)           
# THREE BODY ATTACHMENT USE LOG INTERPOLATION
  230 THREEB=0.0
      IF(EN < X3ATT(1):
) GO TO 255
      IF(EN > X3ATT(N3ATT):
) GO TO 255
      DO 240 J=2,N3ATT
      IF(EN <= X3ATT(J):
) GO TO 250
  240 CONTINUE
      J=N3ATT
  250 Y1=math.log(Y3ATT(J-1))
      Y2=math.log(Y3ATT(J))
      X1=math.log(X3ATT(J-1))
      X2=math.log(X3ATT(J))
      A=(Y2-Y1)/(X2-X1)
      B=(X1*Y2-X2*Y1)/(X1-X2)
      THREEB=math.exp(A*math.log(EN)+B)*1.D-16*FAC
  255 Q(4,I)=Q(4,I)+THREEB
      QATT(1,I)=Q(4,I)                                    
      Q(5,I)=0.0                                                        
      Q(6,I)=0.0
#           
# SUPERELASTICS                               
      QIN(1,I)=0.0
      PEQIN(1,I)=0.5
      QIN(2,I)=0.0
      PEQIN(2,I)=0.5
      QIN(3,I)=0.0
      PEQIN(3,I)=0.5
      IF(EN == 0.0):
 GO TO 305
# SUPERELASTIC OF VIBRATION V11       
      EFAC=math.sqrt(1.0-(EIN(1)/EN))
      QIN(1,I)=0.0236*math.log((EFAC+1.0)/(EFAC-1.0))/EN       
      DO 260 J=2,NVIB2
      IF((EN+EIN(4):
) <= XVIB2(J)) GO TO 270
  260 CONTINUE
      J=NVIB2
  270 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J))
      QIN(1,I)=QIN(1,I)+(EN+EIN(4))*(A*(EN+EIN(4))+B)/EN       
      QIN(1,I)=QIN(1,I)*APOP1*1.D-16
#  SUPERELASTIC OF VIBRATION V2
      EFAC=math.sqrt(1.0-(EIN(2)/EN))
      QIN(2,I)=0.2750*math.log((EFAC+1.0)/(EFAC-1.0))/EN       
      DO 280 J=2,NVIB3
      IF((EN+EIN(5):
) <= XVIB3(J)) GO TO 290
  280 CONTINUE
      J=NVIB3
  290 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J))
      QIN(2,I)=QIN(2,I)+(EN+EIN(5))*(A*(EN+EIN(5))+B)/EN      
      QIN(2,I)=QIN(2,I)*APOP2*1.D-16 
# SUPERELASTIC OF VIBRATION V1
      EFAC=math.sqrt(1.0-(EIN(3)/EN))
      QIN(3,I)=0.9750*math.log((EFAC+1.0)/(EFAC-1.0))/EN        
      DO 300 J=2,NVIB4
      IF((EN+EIN(6):
) <= XVIB4(J))GO TO 301
  300 CONTINUE
      J=NVIB4
  301 A=(YVIB4(J)-YVIB4(J-1))/(XVIB4(J)-XVIB4(J-1))                     
      B=(XVIB4(J-1)*YVIB4(J)-XVIB4(J)*YVIB4(J-1))/(XVIB4(J-1)-XVIB4(J)) 
      QIN(3,I)=QIN(3,I)+(EN+EIN(6))*(A*(EN+EIN(6))+B)/EN        
      QIN(3,I)=QIN(3,I)*APOP3*1.D-16            
#  V11
  305 CONTINUE
      QIN(4,I)=0.0  
      PEQIN(4,I)=0.5                                                    
      IF(EN <= EIN(4):
) GO TO 400                                        
      DO 310 J=2,NVIB2                                                  
      IF(EN <= XVIB2(J):
) GO TO 320                                      
  310 CONTINUE                                                          
      J=NVIB2                                                           
  320 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J)) 
      EFAC=math.sqrt(1.0-(EIN(4)/EN))
      QIN(4,I)=0.0236*math.log((1.0+EFAC)/(1.0-EFAC))/EN       
      QIN(4,I)=((A*EN+B)+QIN(4,I))*APOPGS*1.D-16
  400 CONTINUE                                                          
#   V2                                                                    
      QIN(5,I)=0.0  
      PEQIN(5,I)=0.5                                                    
      IF(EN <= EIN(5):
) GO TO 500                                        
      DO 410 J=2,NVIB3                                                  
      IF(EN <= XVIB3(J):
) GO TO 420                                      
  410 CONTINUE                                                          
      J=NVIB3                                                           
  420 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J)) 
      EFAC=math.sqrt(1.0-(EIN(5)/EN))
      QIN(5,I)=0.2750*math.log((1.0+EFAC)/(1.0-EFAC))/EN        
      QIN(5,I)=((A*EN+B)+QIN(5,I))*APOPGS*1.D-16
  500 CONTINUE                                                          
# V1
      QIN(6,I)=0.0  
      PEQIN(6,I)=0.5                                                    
      IF(EN <= EIN(6):
) GO TO 600                                        
      DO 510 J=2,NVIB4                                                  
      IF(EN <= XVIB4(J):
) GO TO 520                                      
  510 CONTINUE                                                          
      J=NVIB4                                                           
  520 A=(YVIB4(J)-YVIB4(J-1))/(XVIB4(J)-XVIB4(J-1))                     
      B=(XVIB4(J-1)*YVIB4(J)-XVIB4(J)*YVIB4(J-1))/(XVIB4(J-1)-XVIB4(J)) 
      EFAC=math.sqrt(1.0-(EIN(6)/EN))
      QIN(6,I)=0.975*math.log((1.0+EFAC)/(1.0-EFAC))/EN       
      QIN(6,I)=((A*EN+B)+QIN(6,I))*APOPGS*1.D-16
  600 CONTINUE                                                          
#  C-H STRETCH MODE AND 2V1
      QIN(7,I)=0.0  
      PEQIN(7,I)=0.5                                                    
      IF(EN <= EIN(7):
) GO TO 700                                        
      DO 610 J=2,NVIB5                                                  
      IF(EN <= XVIB5(J):
) GO TO 620                                      
  610 CONTINUE                                                          
      J=NVIB5                                                           
  620 A=(YVIB5(J)-YVIB5(J-1))/(XVIB5(J)-XVIB5(J-1))                     
      B=(XVIB5(J-1)*YVIB5(J)-XVIB5(J)*YVIB5(J-1))/(XVIB5(J-1)-XVIB5(J)) 
      EFAC=math.sqrt(1.0-(EIN(7)/EN))
      QIN(7,I)=0.1925*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      QIN(7,I)=((A*EN+B)+QIN(7,I))*1.D-16                         
  700 CONTINUE                                                          
#   3V1 AND HIGHER MODES                       
      QIN(8,I)=0.0  
      PEQIN(8,I)=0.5                                                    
      IF(EN <= EIN(8):
) GO TO 800                                        
      DO 710 J=2,NVIB6                                                  
      IF(EN <= XVIB6(J):
) GO TO 720                                      
  710 CONTINUE                                                          
      J=NVIB6                                                           
  720 A=(YVIB6(J)-YVIB6(J-1))/(XVIB6(J)-XVIB6(J-1))                     
      B=(XVIB6(J-1)*YVIB6(J)-XVIB6(J)*YVIB6(J-1))/(XVIB6(J-1)-XVIB6(J)) 
      QIN(8,I)=(A*EN+B)*1.D-16                                  
  800 CONTINUE                                                          
#  EXCITATION AND DISOCIATION  1 LEVEL APPROXIMATION                           
      QIN(9,I)=0.0
      PEQIN(9,I)=0.5
      IF(EN <= EIN(9):
) GO TO 900                                        
      DO 810 J=2,NDISS                                                  
      IF(EN <= XDISS(J):
) GO TO 820                                      
  810 CONTINUE                                                          
      J=NDISS  
  820 Y1=math.log(YDISS(J-1))
      Y2=math.log(YDISS(J))
      X1=math.log(XDISS(J-1))
      X2=math.log(XDISS(J))
      A=(Y2-Y1)/(X2-X1)
      B=(X1*Y2-X2*Y1)/(X1-X2)
      QIN(9,I)=math.exp((A*math.log(EN)+B))*1.D-16
  900 CONTINUE                                                          
#                             
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)+QIN(1,I)+QIN(2,I)+QIN(3,I)+QIN(4,I)+ 
     /QIN(5,I)+QIN(6,I)+QIN(7,I)+QIN(8,I)+QIN(9,I)           
 9000 CONTINUE                                                          
#  SAVE COMPUTE TIME
      IF(EFINAL <= EIN(9):
) NIN=8    
      IF(EFINAL <= EIN(8):
) NIN=7
      IF(EFINAL <= EIN(7):
) NIN=6                                        
      IF(EFINAL <= EIN(6):
) NIN=5
      IF(EFINAL <= EIN(5):
) NIN=4
      IF(EFINAL <= EIN(4):
) NIN=3                                        
      IF(EFINAL <= EIN(3):
) NIN=2                                        
      IF(EFINAL <= EIN(2):
) NIN=1                                        
      IF(EFINAL <= EIN(1):
) NIN=0                                        
      RETURN                                                            
      # end 
      def GAS44(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)  
#    /QNULL,NNULL,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,
#    /SCRPT)  
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(4000),EROOT(4000),QT1(4000),QT2(4000),
     /QT3(4000),QT4(4000)
      COMMON/DENS/DEN(4000)
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)       
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      DIMENSION XEN(130),YELM(130),YELT(130),YEPS(130),
     /XION(42),YION(42),YINC(42),XATT(10),YATT(10),
     /XKSHC(83),YKSHC(83),XKSHN(89),YKSHN(89),
     /XTORS(32),YTORS(32),XVIB1(25),YVIB1(25),XVIB2(24),YVIB2(24),
     /XVIB3(28),YVIB3(28),XVHAR(15),YVHAR(15),
     /XTRP1(12),YTRP1(12),XTRP2(11),YTRP2(11),XTRP3(11),YTRP3(11),
     /IOFFN(37),IOFFION(12)
      DIMENSION Z6T(25),Z7T(25),Z1T(25),EBRM(25)
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME  
#                                                
      DATA XEN/0.00,.001,0.01,0.02,0.10,0.20,0.30,0.40,0.50,0.70,
     /1.00,1.50,2.00,3.00,4.00,5.00,7.00,8.00,10.0,12.0,
     /15.0,20.0,30.0,60.0,100.,125.,150.,175.,200.,250.,
     /300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,
     /1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,
     /6000.,7000.,8000.,9000.,1.0D4,1.25D4,1.5D4,1.75D4,2.0D4,2.5D4,
     /3.0D4,3.5D4,4.0D4,4.5D4,5.0D4,6.0D4,7.0D4,8.0D4,9.0D4,1.0D5,
     /1.25D5,1.5D5,1.75D5,2.0D5,2.5D5,3.0D5,3.5D5,4.0D5,4.5D5,5.0D5,
     /6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,3.0D6,2.5D6,
     /3.0D6,3.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,
     /1.25D7,1.5D7,1.75D7,2.0D7,2.5D7,3.0D7,3.5D7,4.0D7,4.5D7,5.0D7,
     /6.0D7,7.0D7,8.0D7,9.0D7,1.0D8,1.25D8,1.5D8,1.75D8,2.0D8,2.5D8,
     /3.0D8,3.5D8,4.0D8,4.5D8,5.0D8,6.0D8,7.0D8,8.0D8,9.0D8,1.0D9/
# ELASTIC MOMENTUM TRANSFER
      DATA YELM/400.,390.,280.,190.,38.0,19.5,15.0,13.0,12.5,13.0,
     /14.0,15.5,17.0,21.0,26.0,31.0,38.0,38.0,37.0,33.0,
     /29.0,24.0,18.0,11.0,6.09,4.50,3.50,2.81,2.32,1.67,
     /1.26,.998,.810,.672,.568,.423,.328,.263,.216,.180,
     /.123,.0899,.0687,.0544,.0367,.0265,.0202,.0159,.0128,.0106,
     /.00765,.00579,.00455,.00367,.00304,.00203,.00146,.00110,8.63D-4,
     /5.77D-4,
     /4.14D-4,3.14D-4,2.47D-4,2.00D-4,1.66D-4,1.20D-4,9.10D-5,7.19D-5,
     /5.85D-5,4.87D-5,
     /3.32D-5,2.43D-5,1.88D-5,1.50D-5,1.04D-5,7.76D-6,6.07D-6,4.92D-6,
     /4.09D-6,3.47D-6,
     /2.62D-6,2.07D-6,1.69D-6,1.41D-6,1.20D-6,8.60D-7,6.48D-7,5.10D-7,
     /4.13D-7,2.89D-7,
     /2.15D-7,1.67D-7,1.33D-7,1.09D-7,9.15D-8,6.69D-8,5.13D-8,4.06D-8,
     /3.30D-8,2.74D-8,
     /1.84D-8,1.32D-8,9.99D-9,7.83D-9,5.19D-9,3.71D-9,2.78D-9,2.17D-9,
     /1.74D-9,1.42D-9,
     /1.01D-9,7.49D-10,5.79D-10,4.61D-10,3.75D-10,2.42D-10,1.69D-10,
     /1.25D-10,9.57D-11,6.14D-11,
     /4.27D-11,3.14D-11,2.40D-11,1.90D-11,1.54D-11,1.07D-11,7.86D-12,
     /6.02D-12,4.76D-12,3.85D-12/
# ELASTIC 
      DATA YELT/400.,390.,280.,190.,38.0,19.5,15.0,14.5,15.0,15.7,
     /17.0,19.0,21.4,26.5,34.5,41.3,51.3,54.0,56.0,52.2,
     /46.2,39.7,33.0,22.3,16.2,13.2,11.8,10.2,8.76,7.44,
     /6.49,5.78,5.21,4.75,4.37,3.77,3.32,2.97,2.68,2.45,
     /2.01,1.71,1.48,1.31,1.06,.897,.775,.682,.610,.551,
     /.463,.399,.351,.314,.284,.229,.193,.167,.147,.119,
     /.101,.0877,.0779,.0702,.0640,.0548,.0482,.0442,.0394,.0363,
     /.0308,.0271,.0245,.0226,.0199,.0181,.0169,.0159,.0152,.0147,
     /.0139,.0133,.0129,.0126,.0123,.0119,.0117,.0115,.0114,.0113,
     /.0112,.0111,.0111,.0110,.0110,.0110,.0110,.0110,.0110,.0110,
     /.0109,29*0.0109/
#  1.0-EPS
      DATA YEPS/7*1.0,.84557,.75309,.74543,
     /.73896,.72785,.69736,.69462,.64030,.63613,.62258,.57254,.51632,
     /.48021,
     /.47463,.44619,.37693,.31990,.20687,.17740,.14298,.12770,.12028,
     /.09386,
     /.076184,.063994,.055018,.048145,.042751,.034829,.029328,.025289,
     /.022205,.019780,
     /.015515,.012745,.01001,.009377,.007412,.006122,.005213,.004539,
     /.004020,.003604,
     /.002989,.002552,.002225,.001973,.001771,.001410,.001170,9.991D-4,
     /8.715D-4,6.926D-4,
     /5.734D-4,4.886D-4,4.250D-4,3.755D-4,3.361D-4,2.768D-4,2.346D-4,
     /1.978D-4,1.785D-4,1.590D-4,
     /1.239D-4,1.007D-4,8.425D-5,7.202D-5,5.511D-5,4.405D-5,3.628D-5,
     /3.058D-5,2.622D-5,2.280D-5,
     /1.781D-5,1.437D-5,1.188D-5,1.002D-5,8.574D-6,6.164D-6,4.635D-6,
     /3.621D-6,2.910D-6,2.003D-6,
     /1.466D-6,1.120D-6,8.840D-7,7.159D-7,5.917D-7,4.239D-7,3.186D-7,
     /2.484D-7,1.991D-7,1.631D-7,
     /1.066D-7,7.51D-8,5.58D-8,4.30D-8,2.78D-8,1.94D-8,1.43D-8,1.10D-8,
     /8.70D-9,7.10D-9,
     /4.89D-9,3.58D-9,2.73D-9,2.15D-9,1.73D-9,1.09D-9,7.48D-10,5.43D-10,
     /4.11D-10,2.58D-10,
     /1.76D-10,1.28D-10,9.7D-11,7.5D-11,6.0D-11,4.1D-11,3.0D-11,2.3D-11,
     /1.8D-11,1.4D-11/
# TORSION SCALED BY 1/E ABOVE 10 EV
      DATA XTORS/.0334,.034,.035,.036,.038,.040,.045,.050,.055,.060,
     /.070,.080,.100,.120,.140,.170,.200,0.25,0.30,0.40,
     /0.50,0.70,1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.00,
     /8.00,10.0/                                 
      DATA YTORS/0.00,.068,.072,.090,.114,.132,.150,.156,.162,.162,
     /.156,.150,.138,.126,.114,.102,.0932,.0798,.0702,.0576, 
     /.0486,.0378,.0288,.0210,.0162,.0120,.0090,.0078,.0066,.00576,
     /.00516,.0042/                                       
# VIB1 SCALED BY 1/E ABOVE 40 EV 
      DATA XVIB1/.103,0.12,0.13,0.15,0.20,0.23,0.25,0.30,0.40,0.50,
     /0.70,1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.00,8.00,
     /10.0,15.0,20.0,30.0,40.0/  
      DATA YVIB1/0.00,0.51,0.90,1.20,1.30,1.26,1.18,1.06,0.90,0.79,
     /0.66,0.51,0.43,0.57,0.92,1.21,1.56,2.03,2.03,1.67,
     /0.99,0.66,0.35,0.22,0.16/      
# YVIB2 SCALED BY 1/E ABOVE 40 EV
      DATA XVIB2/.179,.185,0.19,0.20,0.23,0.25,0.30,0.40,0.50,0.70,
     /1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.00,8.00,10.0,
     /15.0,20.0,30.0,40.0/
      DATA YVIB2/0.00,0.23,0.48,0.68,0.88,0.95,1.01,0.95,0.88,0.76,
     /0.61,0.53,0.53,0.79,1.03,1.33,1.75,1.75,1.48,0.88,
     /0.57,0.31,.193,.145/
# YVIB3 SCALED BY 1/E ABOVE 40 EV
      DATA XVIB3/.366,.373,0.38,0.39,0.40,0.42,0.45,0.50,0.55,0.60,
     /0.70,0.80,0.90,1.00,1.20,1.50,2.00,3.00,4.00,5.00,
     /6.00,7.00,8.00,10.0,15.0,20.0,30.0,40.0/
      DATA YVIB3/0.00,.224,.339,.415,.472,.553,0.63,0.70,0.73,0.74,
     /0.74,0.71,0.65,0.66,0.65,0.65,0.73,1.04,1.39,1.70,
     /1.87,1.87,1.46,0.80,0.53,0.29,0.19,0.14/
# YVHAR SCALED BY 1/E ABOVE 40 EV
      DATA XVHAR/.480,1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.00,8.00,
     /10.0,15.0,20.0,30.0,40.0/
      DATA YVHAR/0.00,.001,.033,.085,0.16,0.20,0.27,0.30,0.30,0.23,
     /.125,.085,.047,.032,.024/
# NB.  RYDBERG 3S AND 3P AND HIGHER STATES
#   DIPOLE PART GIVEN BY BRION CAN.J.CHEM. 72(1994)529 
#   DIPOLE PART GIVE ANALYTICALLY BEF SCALING IN def
#
#   TRIPLET NON DIPOLE STATES 
      DATA XTRP1/4.60,5.50,7.00,8.00,9.00,10.0,12.0,14.0,17.0,20.0,
     /24.0,27.0/         
      DATA YTRP1/0.00,.015,.050,.075,.084,.090,.098,.100,.090,.075,
     /.055,.043/          
#                             
      DATA XTRP2/5.70,7.20,8.20,9.20,10.2,12.2,14.2,17.2,20.2,24.2,
     /27.2/                                                          
      DATA YTRP2/0.00,.088,.161,.185,.198,.216,.220,.198,.165,.121,     
     /.095/                                              
#
      DATA XTRP3/7.00,8.00,9.00,10.0,12.0,14.0,17.0,20.0,24.0,27.0,
     /32.0/
      DATA YTRP3/0.00,.245,.504,.588,.665,.700,.700,.665,.525,.406,
     /.301/                                             
#  
      DATA XION/8.40,9.00,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,     
     /18.0,19.0,20.0,22.5,25.0,27.5,30.0,35.0,40.0,45.0,    
     /50.0,60.0,70.0,80.0,90.0,100.,110.,120.,140.,160.,
     /180.,200.,300.,400.,500.,600.,700.,800.,900.,1000.,   
     /2000.,3000./
# GROSS IONISATION                                                      
      DATA YION/0.00,.097,.267,.435,.595,.760,1.08,1.53,2.00,2.52,    
     /3.06,3.58,4.07,5.18,6.15,7.00,7.75,8.93,9.79,10.4,
     /10.8,11.3,11.5,11.5,11.4,11.2,11.0,10.7,10.2,9.76,
     /9.30,8.86,7.16,6.00,5.18,4.57,4.09,3.71,3.40,3.13,
     /1.81,1.30/ 
# COUNTING IONISATION
      DATA YINC/42*0.0/                           
      DATA XATT/10*0.0/    
      DATA YATT/10*0.0/ 
# K-SHELL IONISATION X-SECTION CARBON  
      DATA XKSHC/285.,298.,307.,316.,325.,335.,345.,365.,398.,422.,
     /447.,473.,501.,531.,613.,668.,708.,750.,817.,917.,
     /1000.,1122.,1296.,1496.,1679.,1884.,2054.,2238.,2512.,2985.,
     /3981.,5012.,7079.,1.0D4,1.50D4,2.05D4,2.51D4,3.07D4,4.10D4,5.01D4,
     /6.13D4,7.08D4,8.18D4,1.0D5,1.54D5,2.05D5,2.99D5,4.10D5,5.01D5,
     /6.13D5,
     /7.08D5,8.18D5,1.0D6,1.26D6,1.5D6,2.05D6,3.07D6,4.10D6,5.01D6,
     /6.13D6,
     /7.08D6,8.18D6,1.0D7,1.26D7,1.5D7,2.05D7,3.07D7,4.10D7,5.01D7,
     /6.13D7,
     /7.08D7,8.18D7,1.0D8,1.26D8,1.5D8,2.05D8,3.07D8,4.10D8,5.01D8,
     /6.13D8,
     /7.08D8,8.18D8,1.0D9/
      DATA YKSHC/0.00,1.66D-4,3.48D-4,5.25D-4,6.96D-4,8.63D-4,1.02D-3,
     /1.33D-3,1.75D-3,2.01D-3,
     /2.24D-3,2.46D-3,2.66D-3,2.84D-3,3.21D-3,3.38D-3,3.47D-3,3.55D-3,
     /3.65D-3,3.72D-3,
     /3.75D-3,3.74D-3,3.68D-3,3.57D-3,3.45D-3,3.31D-3,3.19D-3,3.07D-3,
     /2.91D-3,2.66D-3,
     /2.25D-3,1.95D-3,1.55D-3,1.21D-3,8.97D-4,7.07D-4,6.07D-4,5.21D-4,
     /4.21D-4,3.63D-4,
     /3.14D-4,2.84D-4,2.57D-4,2.25D-4,1.74D-4,1.50D-4,1.28D-4,1.15D-4,
     /1.09D-4,1.05D-4,
     /1.03D-4,1.02D-4,1.01D-4,1.005D-4,1.01D-4,1.03D-4,1.07D-4,1.11D-4,
     /1.14D-4,1.17D-4,
     /1.20D-4,1.22D-4,1.25D-4,1.29D-4,1.32D-4,1.38D-4,1.45D-4,1.50D-4,
     /1.54D-4,1.58D-4,
     /1.60D-4,1.63D-4,1.67D-4,1.71D-4,1.74D-4,1.80D-4,1.87D-4,1.92D-4,
     /1.96D-4,2.00D-4,
     /2.02D-4,2.05D-4,2.09D-4/
# NITROGEN K-SHELL IONISATION (MULTIPLY BY 2 FOR MOLECULE)
      DATA XKSHN/401.6,407.,419.,431.,444.,457.,471.,485.,499.,515.,
     /530.,546.,562.,596.,631.,668.,708.,750.,794.,841.,
     /891.,944.,1000.,1090.,1188.,1296.,1496.,1679.,1884.,2054.,
     /2238.,2512.,2985.,3758.,4467.,5158.,5957.,7079.,1.0D4,1.26D4,
     /1.50D4,2.05D4,2.51D4,3.07D4,4.10D4,5.01D4,6.13D4,7.08D4,8.18D4,
     /1.0D5,
     /1.54D5,2.05D5,2.99D5,4.10D5,5.01D5,6.13D5,7.08D5,8.18D5,1.00D6,
     /1.25D6,
     /1.50D6,2.05D6,3.07D6,4.10D6,5.01D6,6.13D6,7.08D6,8.18D6,1.00D7,
     /1.22D7,
     /1.50D7,1.88D7,2.24D7,2.82D7,3.76D7,4.87D7,6.31D7,8.66D7,1.00D8,
     /1.22D8,
     /1.50D8,1.88D8,2.24D8,2.82D8,3.76D8,4.87D8,6.31D8,8.66D8,1.00D9/
      DATA YKSHN/0.00,4.11D-5,1.38D-4,2.32D-4,3.23D-4,4.12D-4,4.98D-4,
     /5.81D-4,6.61D-4,7.38D-4,
     /8.13D-4,8.85D-4,9.54D-4,1.08D-3,1.20D-3,1.31D-3,1.41D-3,1.50D-3,
     /1.58D-3,1.65D-3,
     /1.72D-3,1.77D-3,1.82D-3,1.87D-3,1.91D-3,1.94D-3,1.95D-3,1.93D-3,
     /1.89D-3,1.86D-3,
     /1.81D-3,1.74D-3,1.63D-3,1.45D-3,1.32D-3,1.22D-3,1.12D-3,1.00D-3,
     /7.95D-4,6.77D-4,
     /5.98D-4,4.74D-4,4.09D-4,3.52D-4,2.85D-4,2.47D-4,2.14D-4,1.94D-4,
     /1.76D-4,1.54D-4,
     /1.19D-4,1.03D-4,8.77D-5,7.92D-5,7.54D-5,7.27D-5,7.14D-5,7.04D-5,
     /6.97D-5,6.96D-5,
     /7.00D-5,7.16D-5,7.47D-5,7.74D-5,7.95D-5,8.17D-5,8.34D-5,8.51D-5,
     /8.75D-5,9.00D-5,
     /9.25D-5,9.54D-5,9.76D-5,1.01D-4,1.04D-4,1.08D-4,1.11D-4,1.15D-4,
     /1.17D-4,1.20D-4,
     /1.22D-4,1.25D-4,1.27D-4,1.31D-4,1.34D-4,1.38D-4,1.41D-4,1.45D-4,
     /1.47D-4/
# BREMSTRAHLUNG X-SECTION WITH CUT OFF
      DATA Z1T/11.3,6.18,2.80,1.54,.858,.407,.251,.176,.145,.150,
     /.167,.178,.187,.193,.198,.205,.210,.218,.222,.228,
     /.231,.233,.234,.235,.235/
      DATA Z6T/298.,178.,85.2,47.5,26.3,12.2,7.06,4.45,3.06,2.82,
     /2.89,2.99,3.08,3.13,3.18,3.25,3.31,3.39,3.44,3.49,
     /3.52,3.54,3.55,3.57,3.57/
      DATA Z7T/385.,234.,113.,63.5,35.5,16.4,9.48,5.96,4.07,3.73,
     /3.81,3.93,4.04,4.11,4.18,4.26,4.33,4.42,4.48,4.55,
     /4.59,4.61,4.63,4.64,4.65/
      DATA EBRM/1000.,2000.,5000.,1.D4,2.D4,5.D4,1.D5,2.D5,5.D5,1.D6,
     /2.D6,3.D6,4.D6,5.D6,6.D6,8.D6,1.D7,1.5D7,2.D7,3.D7,
     /4.D7,5.D7,6.D7,8.D7,1.D8/
#
# ********************************************************************
      IF(NANISO == 2):
 NAME=' N(CH3)3 2015 ANISOTROPIC'         
      IF(NANISO == 0):
 NAME=' N(CH3)3 2015  ISOTROPIC '                
# ********************************************************************  
#    X-SECTIONS FROM SCALING AND SYSTEMATICS                  
#    TMA USED AS DOPANT AND FOR LIGHT EMISSION 
#    LIGHT FROM TRANSITIONS IN S AND P RYDBERG STATES ( 4.6 EV LEVEL )
#    TOTAL ELECTRON SCATTERING FROM GDANSK.
# --------------------------------------------------------------------
# BEF CONSTANT
      EMASS2=1021997.804
      API=DACOS(-1.00)      
      A0=0.52917720859D-8
      RY=13.60569193
      BBCONST=16.0*API*A0*A0*RY*RY/EMASS2
#
#   BORN BETHE VALUES FOR IONISATION
      CONST=1.873884D-20
      AM2=15.2
      C=142.1
      AUGKC=2.00
      AUGKN=1.99
#
      NDATA=130
      NIOND=42
      NKSHC=83
      NKSHN=89
      NATT1=10                                                         
      NTORS=32 
      NVIB1=25
      NVIB2=24
      NVIB3=28
      NTRP1=12
      NTRP2=11
      NTRP3=11
      NVHAR=15 
#  
      NION=3
      NATT=1
      NIN=37  
      NNULL=0
#                                                  
#  ARRAY SIZE
      NASIZE=4000
#
      NBREM=25
      DO 1 J=1,NIN
      IZBR(J)=0
    1 CONTINUE
      IZBR(38)=1
      IZBR(39)=6
      IZBR(40)=7
#
# SET ANISOTROPIC SCATTERING OKHRIMOVSKKY
      DO 2 J=1,6
    2 KEL(J)=NANISO
      DO 3 J=1,NIN
    3 KIN(J)=NANISO
#
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(59.11026*AMU)                                     
      E(3)=8.40                                                        
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
#
      EION(1)=8.40
      EION(2)=285.0
      EION(3)=401.6
#
      EOBY(1)=EION(1)*0.85
      EOBY(2)=210.0
      EOBY(3)=260.0 
#  
      LEGAS(1)=0
      ISHELL(1)=0
      LEGAS(2)=1
      ISHELL(2)=1
      LEGAS(3)=2
      ISHELL(3)=1
      NC0(1)=0
      EC0(1)=0.0
      WKLM(1)=0.0
      EFL(1)=0.0
      NG1(1)=0
      EG1(1)=0.0
      NG2(1)=0
      EG2(1)=0.0
# K SHELL DATA INCLUDING FLUORESCENCE 
      NC0(2)=2
      EC0(2)=253.0
      WKLM(2)=0.0026
      EFL(2)=273.0
      NG1(2)=1
      EG1(2)=253.0
      NG2(2)=1
      EG2(2)=5.0
      NC0(3)=2
      EC0(3)=358.6
      WKLM(3)=0.0044
      EFL(3)=385. 
      NG1(3)=1
      EG1(3)=353.
      NG2(3)=1
      EG2(3)=6.0
#
      DO 141 J=1,NION
      DO 4 I=1,NASIZE
      IF(EG(I):
 > EION(J)) :
       IOFFION(J)=I-1
       GO TO 141
      # endIF
    4 CONTINUE
  141 CONTINUE
#       
      EIN(1)=-0.025
      EIN(2)=0.025
      EIN(3)=-0.0334
      EIN(4)=0.0334
      EIN(5)=-0.103
      EIN(6)=0.103
      EIN(7)=0.179  
      EIN(8)=0.366                                                      
      EIN(9)=0.480
# NON DIPOLE
      EIN(10)=4.6  
# 3S RYDBERG DIPOLE
      EIN(11)=4.65
      EIN(12)=4.95
      EIN(13)=5.25
      EIN(14)=5.55
# NON DIPOLE
      EIN(15)=5.7
# 3P RYDBERG DIPOLE
      EIN(16)=5.85
      EIN(17)=6.15
      EIN(18)=6.45
      EIN(19)=6.75
# NON DIPOLE
      EIN(20)=7.0
# HIGHER RYDBERGS
      EIN(21)=7.05
      EIN(22)=7.35
      EIN(23)=7.65
      EIN(24)=7.95
      EIN(25)=8.25
      EIN(26)=8.55
      EIN(27)=8.85
      EIN(28)=9.15
      EIN(29)=9.45
      EIN(30)=9.75
      EIN(31)=10.05
      EIN(32)=10.35
      EIN(33)=10.65
      EIN(34)=10.95
      EIN(35)=11.25
      EIN(36)=11.55
      EIN(37)=11.85
      EIN(38)=0.0
      EIN(39)=0.0
      EIN(40)=0.0
# OFFSET ENERGY FOR EXCITATIONS
      DO 42 NL=1,NIN
      DO 651 I=1,NASIZE
      IF(EG(I):
 > abs(EIN(NL))) :
       IOFFN(NL)=I-1
       GO TO 42
      # endIF
  651 CONTINUE
   42 CONTINUE
# *************************************************************
# PENNING TRANSFER FRACTION FOR EACH LEVEL
# SET TO 0 SINCE VERY LOW ENERGY EXCITATION LEVELS
      DO 5 K=1,NIN
      DO 5 L=1,3
    5 PENFRA[L,K]=0.0
# **************************************************************
      SCRPT(1)='                                                   '
      SCRPT(2)=' ELASTIC  N-(CH3)3 TRIMETHYL AMINE                 '
      SCRPT(3)=' IONISATION                         ELOSS=   8.40  '
      SCRPT(4)=' IONISATION   CARBON K-SHELL        ELOSS= 285.0   '
      SCRPT(5)=' IONISATION NITROGEN K-SHELL        ELOSS= 401.6   '
      SCRPT(6)=' ATTACHMENT                                        '
      SCRPT(7)='                                                   '
      SCRPT(8)='                                                   '
      SCRPT(9)=' ROTATION                           ELOSS= -0.025  '
      SCRPT(10)=' ROTATION                           ELOSS=  0.025  '
      SCRPT(11)=' TORSION + ROTATION                 ELOSS= -0.0334 '
      SCRPT(12)=' TORSION + ROTATION                 ELOSS=  0.0334 '
      SCRPT(13)=' VIBRATION V1                       ELOSS= -0.103  '
      SCRPT(14)=' VIBRATION V1                       ELOSS=  0.103  '
      SCRPT(15)=' VIBRATION V2                       ELOSS=  0.179  '
      SCRPT(16)=' VIBRATION V3                       ELOSS=  0.366  '
      SCRPT(17)=' VIBRATION HARMONICS                ELOSS=  0.480  '
      SCRPT(18)=' EXC TRIPLET                        ELOSS=  4.6    '
      SCRPT(19)=' EXC DIPOLE   3S RYDBERG  F=.00047  ELOSS=  4.65   '
      SCRPT(20)=' EXC DIPOLE   3S RYDBERG  F=.00384  ELOSS=  4.95   '
      SCRPT(21)=' EXC DIPOLE   3S RYDBERG  F=.00828  ELOSS=  5.25   '
      SCRPT(22)=' EXC DIPOLE   3S RYDBERG  F=.00974  ELOSS=  5.55   '
      SCRPT(23)=' EXC TRIPLET                        ELOSS=  5.70   '
      SCRPT(24)=' EXC DIPOLE   3P RYDBERG  F=.02635  ELOSS=  5.85   '
      SCRPT(25)=' EXC DIPOLE   3P RYDBERG  F=.03621  ELOSS=  6.15   '
      SCRPT(26)=' EXC DIPOLE   3P RYDBERG  F=.02819  ELOSS=  6.45   '
      SCRPT(27)=' EXC DIPOLE   3P RYDBERG  F=.02325  ELOSS=  6.75   '
      SCRPT(28)=' EXC TRIPLET                        ELOSS=  7.00   '
      SCRPT(29)=' EXC DIPOLE HIGH RYDBERG  F=.02271  ELOSS=  7.05   '
      SCRPT(30)=' EXC DIPOLE HIGH RYDBERG  F=.02561  ELOSS=  7.35   '
      SCRPT(31)=' EXC DIPOLE HIGH RYDBERG  F=.02641  ELOSS=  7.65   '
      SCRPT(32)=' EXC DIPOLE HIGH RYDBERG  F=.02625  ELOSS=  7.95   '
      SCRPT(33)=' EXC DIPOLE HIGH RYDBERG  F=.02671  ELOSS=  8.25   '
      SCRPT(34)=' EXC DIPOLE HIGH RYDBERG  F=.04342  ELOSS=  8.55   '
      SCRPT(35)=' EXC DIPOLE HIGH RYDBERG  F=.06804  ELOSS=  8.85   '
      SCRPT(36)=' EXC DIPOLE HIGH RYDBERG  F=.07186  ELOSS=  9.15   '
      SCRPT(37)=' EXC DIPOLE HIGH RYDBERG  F=.07346  ELOSS=  9.45   '
      SCRPT(38)=' EXC DIPOLE HIGH RYDBERG  F=.08795  ELOSS=  9.75   '
      SCRPT(39)=' EXC DIPOLE HIGH RYDBERG  F=.11445  ELOSS= 10.05   '
      SCRPT(40)=' EXC DIPOLE HIGH RYDBERG  F=.12904  ELOSS= 10.35   '
      SCRPT(41)=' EXC DIPOLE HIGH RYDBERG  F=.13512  ELOSS= 10.65   '
      SCRPT(42)=' EXC DIPOLE HIGH RYDBERG  F=.14497  ELOSS= 10.95   '
      SCRPT(43)=' EXC DIPOLE HIGH RYDBERG  F=.15169  ELOSS= 11.25   '
      SCRPT(44)=' EXC DIPOLE HIGH RYDBERG  F=.15328  ELOSS= 11.55   '
      SCRPT(45)=' EXC DIPOLE HIGH RYDBERG  F=.15788  ELOSS= 11.85   '
      SCRPT(46)=' BREMSSTRAHLUNG FROM HYDROGEN ATOMS                '
      SCRPT(47)=' BREMSSTRAHLUNG FROM CARBON ATOMS                  '
      SCRPT(48)=' BREMSSTRAHLUNG FROM NITROGEN ATOM                 '
#
      APOP1=math.exp(EIN(1)/AKT)
      APOP2=math.exp(EIN(3)/AKT)
      APOP3=math.exp(EIN(5)/AKT)
#                                            
#      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
#      EN=EN+ESTEP 
      EN=EG(I)
      GAMMA1=(EMASS2+2.00*EN)/EMASS2
      GAMMA2=GAMMA1*GAMMA1
      BETA=math.sqrt(1.00-1.00/GAMMA2)
      BETA2=BETA*BETA
#
      Q(2,I)=0.0
# USE LOG INTERPOLATION BECAUSE OF RAPID CHANGE IN X-SEC
      IF(EN <= XEN(2):
) :
       Q(2,I)=YELM(2)*1.D-16
       GO TO 30
      # endIF
      DO 10 J=2,NDATA                                                   
      IF(EN <= XEN(J):
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA
   20 YXJ=math.log(YELM(J))
      YXJ1=math.log(YELM(J-1))
      XNJ=math.log(XEN(J))
      XNJ1=math.log(XEN(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QMOM=math.exp(A*math.log(EN)+B)*1.D-16 
      YXJ=math.log(YELT(J))
      YXJ1=math.log(YELT(J-1))
      XNJ=math.log(XEN(J))
      XNJ1=math.log(XEN(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QELA=math.exp(A*math.log(EN)+B)*1.D-16 
      A=(YEPS(J)-YEPS(J-1))/(XEN(J)-XEN(J-1))
      B=(XEN(J-1)*YEPS(J)-XEN(J)*YEPS(J-1))/(XEN(J-1)-XEN(J))
      PQ2=(A*EN+B)
# EPS CORRECTED FOR 1-EPS
      PQ2=1.0-PQ2
      PQ1=0.5+(QELA-QMOM)/QELA
      Q(2,I)=QELA
      IF(NANISO == 0):
 Q(2,I)=QMOM
   30 IF(NANISO == 0) PEQEL(2,I)=0.5
      IF(NANISO == 1):
 PEQEL(2,I)=PQ1
      IF(NANISO == 2):
 PEQEL(2,I)=PQ2
#                                                                       
      Q(3,I)=0.0 
#               
      QION(1,I)=0.0
      PEQION(1,I)=0.5
      IF(NANISO == 2):
 PEQION(1,I)=0.0                               
      IF(EN < EION(1):
) GO TO 35    
      IF(EN > XION(NIOND):
) GO TO 33                                   
      DO 31 J=2,NIOND                                                   
      IF(EN <= XION(J):
) GO TO 32                                        
   31 CONTINUE                                                          
      J=NIOND                                                           
   32 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      QION(1,I)=(A*EN+B)*1.D-16                                        
      GO TO 34
# USE BORN BETHE X-SECTION ABOVE XION(NIOND) EV
   33 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(1,I)=CONST*(AM2*(X1-DEN(1)/2.0)+C*X2)
   34 IF(EN <= (2.0*EION(1))) GO TO 35
      PEQION(1,I)=PEQEL(2,(I-IOFFION(1)))
# CARBON K SHELL IONISATION
   35 QION(2,I)=0.0
      PEQION(2,I)=0.5
      IF(NANISO == 2):
 PEQION(2,I)=0.0
      IF(EN <= EION(2):
) GO TO 38
      DO 36 J=2,NKSHC
      IF(EN <= XKSHC(J):
) GO TO 37
   36 CONTINUE
      J=NKSHC
   37 A=(YKSHC(J)-YKSHC(J-1))/(XKSHC(J)-XKSHC(J-1))
      B=(XKSHC(J-1)*YKSHC(J)-XKSHC(J)*YKSHC(J-1))/(XKSHC(J-1)-XKSHC(J))
# 3 CARBONS PER MOLECULE
      QION(2,I)=3.0*(A*EN+B)*1.D-16
      IF(EN <= (2.0*EION(2):
)) GO TO 38
      PEQION(2,I)=PEQEL(2,(I-IOFFION(2)))
# NITROGEN K-SHELL IONISATION
   38 QION(3,I)=0.0
      PEQION(3,I)=0.5
      IF(NANISO == 2):
 PEQION(3,I)=0.0
      IF(EN <= EION(3):
) GO TO 41
      DO 39 J=2,NKSHN
      IF(EN <= XKSHN(J):
) GO TO 40
   39 CONTINUE
      J=NKSHN
   40 A=(YKSHN(J)-YKSHN(J-1))/(XKSHN(J)-XKSHN(J-1))
      B=(XKSHN(J-1)*YKSHN(J)-XKSHN(J)*YKSHN(J-1))/(XKSHN(J-1)-XKSHN(J))
      QION(3,I)=(A*EN+B)*1.D-16
      IF(EN <= (2.0*EION(3):
)) GO TO 41
      PEQION(3,I)=PEQEL(2,(I-IOFFION(3)))
# CORRECT THE IONISATION FOR SPLIT INTO KSHELLS
      QION(1,I)=QION(1,I)-AUGKC*QION(2,I)-AUGKN*QION(3,I)
# ATTACHMENT
   41 Q(4,I)=0.0
      QATT(1,I)=Q(4,I)  
#                                                     
      Q(5,I)=0.0                                                     
      Q(6,I)=0.0                                                        
#                                                                      
#  SUPERELASTIC  ROT1
#
      QIN(1,I)=0.0
      PEQIN(1,I)=0.0
      IF(EN <= 0.0):
 GO TO 100
      EFAC=math.sqrt(1.0-(EIN(1)/EN))
      QIN(1,I)=0.27*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      QIN(1,I)=QIN(1,I)*APOP1/(1.0+APOP1)*1.D-16          
      IF(EN <= abs(20.0*EIN(1):
)) GO TO 100
      PEQIN(1,I)=PEQEL(2,(I-IOFFN(1)))    
#  ROT1     
  100 QIN(2,I)=0.0 
      PEQIN(2,I)=0.0                                                  
      IF(EN <= EIN(2):
) GO TO 150 
      EFAC=math.sqrt(1.0-(EIN(2)/EN))                                       
      QIN(2,I)=0.27*math.log((1.0+EFAC)/(1.0-EFAC))/EN 
      QIN(2,I)=QIN(2,I)/(1.0+APOP1)*1.D-16       
      IF(EN <= (20.0*EIN(2):
)) GO TO 150
      PEQIN(2,I)=PEQEL(2,(I-IOFFN(2)))                         
# 
#  SUPERELASTIC TORSION
#
  150 QIN(3,I)=0.0 
      PEQIN(3,I)=0.0                                                  
      IF(EN <= 0.0):
 GO TO 200  
      IF((EN+EIN(4):
) > XTORS(NTORS)) GO TO 175                         
      DO 160 J=2,NTORS
      IF((EN+EIN(4):
) <= XTORS(J)) GO TO 170  
  160 CONTINUE
      J=NTORS
  170 A=(YTORS(J)-YTORS(J-1))/(XTORS(J)-XTORS(J-1))
      B=(XTORS(J-1)*YTORS(J)-XTORS(J)*YTORS(J-1))/(XTORS(J-1)-XTORS(J))
      QIN(3,I)=(EN+EIN(4))*(A*(EN+EIN(4))+B)/EN                
      QIN(3,I)=QIN(3,I)*APOP2/(1.0+APOP2)*1.D-16       
      GO TO 176
# SCALED BY 1/E ABOVE XTORS(NTORS) EV
  175 QIN(3,I)=YTORS(NTORS)*XTORS(NTORS)/EN 
      QIN(3,I)=QIN(3,I)*APOP2/(1.0+APOP2)*1.D-16          
  176 IF(EN <= abs(10.0*EIN(3))) GO TO 200
      PEQIN(3,I)=PEQEL(2,(I-IOFFN(3)))            
# INELASTIC TORSION                                                          
  200 QIN(4,I)=0.0 
      PEQIN(4,I)=0.0                                                  
      IF(EN <= EIN(4):
) GO TO 250
      IF(EN > XTORS(NTORS):
) GO TO 225                          
      DO 210 J=2,NTORS
      IF(EN <= XTORS(J):
) GO TO 220
  210 CONTINUE
      J=NTORS
  220 A=(YTORS(J)-YTORS(J-1))/(XTORS(J)-XTORS(J-1)) 
      B=(XTORS(J-1)*YTORS(J)-XTORS(J)*YTORS(J-1))/(XTORS(J-1)-XTORS(J))
      QIN(4,I)=(A*EN+B)       
      QIN(4,I)=QIN(4,I)/(1.0+APOP2)*1.D-16        
      GO TO 226
# SCALED BY 1/E ABOVE XTORS(NTORS) EV
  225 QIN(4,I)=YTORS(NTORS)*XTORS(NTORS)/EN 
      QIN(4,I)=QIN(4,I)/(1.0+APOP2)*1.D-16 
  226 IF(EN <= (10.0*EIN(4))) GO TO 250
      PEQIN(4,I)=PEQEL(2,(I-IOFFN(4)))                          
# SUPERELASTIC VIB1                                                   
  250 QIN(5,I)=0.0
      PEQIN(5,I)=0.0
      IF(EN <= 0.0):
 GO TO 300    
      IF((EN+EIN(6):
) > XVIB1(NVIB1)) GO TO 275                     
      DO 260 J=2,NVIB1                                                  
      IF((EN+EIN(6):
) <= XVIB1(J)) GO TO 270                        
  260 CONTINUE                                                          
      J=NVIB1                                                           
  270 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J)) 
      QIN(5,I)=(EN+EIN(6))*(A*(EN+EIN(6))+B)/EN             
      QIN(5,I)=QIN(5,I)*APOP3/(1.0+APOP3)*1.D-16                 
      GO TO 276
# SCALED BY 1/E ABOVE XVIB1(NVIB1) EV
  275 QIN(5,I)=YVIB1(NVIB1)*XVIB1(NVIB1)/EN
      QIN(5,I)=QIN(5,I)*APOP3/(1.0+APOP3)*1.D-16        
  276 IF(EN <= abs(10.0*EIN(5))) GO TO 300
      PEQIN(5,I)=PEQEL(2,(I-IOFFN(5)))
# INELASTIC VIB1                                                           
  300 QIN(6,I)=0.0 
      PEQIN(6,I)=0.0                                                  
      IF(EN <= EIN(6):
) GO TO 350 
      IF(EN > XVIB1(NVIB1):
) GO TO 325 
      DO 310 J=2,NVIB1                                                  
      IF(EN <= XVIB1(J):
) GO TO 320                                      
  310 CONTINUE                                                          
      J=NVIB1                                                           
  320 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J)) 
      QIN(6,I)=(A*EN+B)
      QIN(6,I)=QIN(6,I)/(1.0+APOP3)*1.D-16                             
      GO TO 326
# SCALED BY 1/E ABOVE XVIB1(NVIB1) EV
  325 QIN(6,I)=YVIB1(NVIB1)*XVIB1(NVIB1)/EN               
      QIN(6,I)=QIN(6,I)/(1.0+APOP3)*1.D-16           
  326 IF(EN <= (10.0*EIN(6))) GO TO 350
      PEQIN(6,I)=PEQEL(2,(I-IOFFN(6)))        
# INELASTIC VIB2                                                      
  350 QIN(7,I)=0.0 
      PEQIN(7,I)=0.0                                                  
      IF(EN <= EIN(7):
) GO TO 400   
      IF(EN > XVIB2(NVIB2):
) GO TO 375     
      DO 360 J=2,NVIB2                                                 
      IF(EN <= XVIB2(J):
) GO TO 370                                     
  360 CONTINUE                                                          
      J=NVIB2                                                           
  370 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                    
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J))
      QIN(7,I)=(A*EN+B)*1.D-16                                        
      GO TO 376
# SCALED BY 1/E ABOVE XVIB2(NVIB2) EV
  375 QIN(7,I)=YVIB2(NVIB2)*XVIB2(NVIB2)/EN*1.D-16            
  376 IF(EN <= (5.0*EIN(7))) GO TO 400
      PEQIN(7,I)=PEQEL(2,(I-IOFFN(7)))              
# INELASTIC VIB3                                                               
  400 QIN(8,I)=0.0  
      PEQIN(8,I)=0.0                                                    
      IF(EN <= EIN(8):
) GO TO 450 
      IF(EN > XVIB3(NVIB3):
) GO TO 425                                  
      DO 410 J=2,NVIB3                                                  
      IF(EN <= XVIB3(J):
) GO TO 420                                      
  410 CONTINUE                                                          
      J=NVIB3                                                           
  420 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J)) 
      QIN(8,I)=(A*EN+B)*1.D-16                                          
      GO TO 426
# SCALED BY 1/E ABOVE XVIB3(NVIB3) EV
  425 QIN(8,I)=YVIB3(NVIB3)*XVIB3(NVIB3)/EN*1.D-16        
  426 IF(EN <= (5.0*EIN(8))) GO TO 450
      PEQIN(8,I)=PEQEL(2,(I-IOFFN(8)))
# INELASTIC VIBRATION HARMONICS
  450 QIN(9,I)=0.0
      PEQIN(9,I)=0.0
      IF(EN <= EIN(9):
) GO TO 500
      IF(EN > XVHAR(NVHAR):
) GO TO 475  
      DO 460 J=2,NVHAR                                                  
      IF(EN <= XVHAR(J):
) GO TO 470                                      
  460 CONTINUE                                                          
      J=NVHAR                                                           
  470 A=(YVHAR(J)-YVHAR(J-1))/(XVHAR(J)-XVHAR(J-1))                     
      B=(XVHAR(J-1)*YVHAR(J)-XVHAR(J)*YVHAR(J-1))/(XVHAR(J-1)-XVHAR(J)) 
      QIN(9,I)=(A*EN+B)*1.D-16        
      GO TO 476
# SCALED BY 1/E ABOVE XVHAR(NVHAR) EV
  475 QIN(9,I)=YVHAR(NVHAR)*XVHAR(NVHAR)/EN*1.D-16
  476 IF(EN <= (5.0*EIN(9))) GO TO 500
      PEQIN(9,I)=PEQEL(2,(I-IOFFN(9)))                     
# EXCITATION  NON DIPOLE                     
  500 QIN(10,I)=0.0
      PEQIN(10,I)=0.0
      IF(EN <= EIN(10):
) GO TO 550
      IF(EN > XTRP1(NTRP1):
) GO TO 525  
      DO 510 J=2,NTRP1                                                  
      IF(EN <= XTRP1(J):
) GO TO 520                                      
  510 CONTINUE                                                          
      J=NTRP1                                                          
  520 A=(YTRP1(J)-YTRP1(J-1))/(XTRP1(J)-XTRP1(J-1))                     
      B=(XTRP1(J-1)*YTRP1(J)-XTRP1(J)*YTRP1(J-1))/(XTRP1(J-1)-XTRP1(J)) 
      QIN(10,I)=(A*EN+B)*1.D-16    
      GO TO 526
# SCALED BY 1/E**2 ABOVE XTRP1(NTRP1) EV
  525 QIN(10,I)=YTRP1(NTRP1)*(XTRP1(NTRP1)/EN)**2*1.D-16
  526 IF(EN <= (5.0*EIN(10))) GO TO 550
      PEQIN(10,I)=PEQEL(2,(I-IOFFN(10))) 
# PART OF 3S RYDBERG CONTINUUM
  550 QIN(11,I)=0.0
      PEQIN(11,I)=0.0
      IF(EN <= EIN(11):
) GO TO 551
      QIN(11,I)=.0004779/(EIN(11)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(11)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(11)+E(3))*1.0323
      IF(QIN(11,I):
 < 0.0) QIN(11,I)=0.0
      IF(EN <= (5.0*EIN(11):
)) GO TO 551
      PEQIN(11,I)=PEQEL(2,(I-IOFFN(11)))
# PART OF 3S RYDBERG CONTINUUM
  551 QIN(12,I)=0.0
      PEQIN(12,I)=0.0
      IF(EN <= EIN(12):
) GO TO 552
      QIN(12,I)=.0039141/(EIN(12)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(12)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(12)+E(3))*1.0303
      IF(QIN(12,I):
 < 0.0) QIN(12,I)=0.0
      IF(EN <= (5.0*EIN(12):
)) GO TO 552
      PEQIN(12,I)=PEQEL(2,(I-IOFFN(12)))
# PART OF 3S RYDBERG CONTINUUM
  552 QIN(13,I)=0.0
      PEQIN(13,I)=0.0
      IF(EN <= EIN(13):
) GO TO 553
      QIN(13,I)=.0084476/(EIN(13)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(13)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(13)+E(3))*1.0286
      IF(QIN(13,I):
 < 0.0) QIN(13,I)=0.0
      IF(EN <= (5.0*EIN(13):
)) GO TO 553
      PEQIN(13,I)=PEQEL(2,(I-IOFFN(13)))
# PART OF 3S RYDBERG CONTINUUM
  553 QIN(14,I)=0.0
      PEQIN(14,I)=0.0
      IF(EN <= EIN(14):
) GO TO 554
      QIN(14,I)=.0102610/(EIN(14)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(14)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(14)+E(3))*1.0270
      IF(QIN(14,I):
 < 0.0) QIN(14,I)=0.0
      IF(EN <= (5.0*EIN(14):
)) GO TO 554
      PEQIN(14,I)=PEQEL(2,(I-IOFFN(14)))
# EXCITATION  NON DIPOLE                     
  554 QIN(15,I)=0.0
      PEQIN(15,I)=0.0
      IF(EN <= EIN(15):
) GO TO 559
      IF(EN > XTRP2(NTRP2):
) GO TO 557  
      DO 555 J=2,NTRP2                                                  
      IF(EN <= XTRP2(J):
) GO TO 556                                      
  555 CONTINUE                                                          
      J=NTRP2                                                          
  556 A=(YTRP2(J)-YTRP2(J-1))/(XTRP2(J)-XTRP2(J-1))                     
      B=(XTRP2(J-1)*YTRP2(J)-XTRP2(J)*YTRP2(J-1))/(XTRP2(J-1)-XTRP2(J)) 
      QIN(15,I)=(A*EN+B)*1.D-16    
      GO TO 558
# SCALED BY 1/E**2 ABOVE XTRP2(NTRP2) EV
  557 QIN(15,I)=YTRP2(NTRP2)*(XTRP2(NTRP2)/EN)**2*1.D-16
  558 IF(EN <= (5.0*EIN(15))) GO TO 559
      PEQIN(15,I)=PEQEL(2,(I-IOFFN(15))) 
# PART OF 3P RYDBERG CONTINUUM
  559 QIN(16,I)=0.0
      PEQIN(16,I)=0.0
      IF(EN <= EIN(16):
) GO TO 560 
      QIN(16,I)=0.028163/(EIN(16)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(16)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(16)+E(3))*1.0256
      IF(QIN(16,I):
 < 0.0) QIN(16,I)=0.0
      IF(EN <= (4.0*EIN(16):
)) GO TO 560
      PEQIN(16,I)=PEQEL(2,(I-IOFFN(16)))                    
# PART OF 3P RYDBERG CONTINUUM
  560 QIN(17,I)=0.0
      PEQIN(17,I)=0.0
      IF(EN <= EIN(17):
) GO TO 561 
      QIN(17,I)=0.038700/(EIN(17)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(17)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(17)+E(3))*1.0244
      IF(QIN(17,I):
 < 0.0) QIN(17,I)=0.0
      IF(EN <= (4.0*EIN(17):
)) GO TO 561
      PEQIN(17,I)=PEQEL(2,(I-IOFFN(17)))                    
# PART OF 3P RYDBERG CONTINUUM
  561 QIN(18,I)=0.0
      PEQIN(18,I)=0.0
      IF(EN <= EIN(18):
) GO TO 562 
      QIN(18,I)=0.030128/(EIN(18)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(18)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(18)+E(3))*1.0233
      IF(QIN(18,I):
 < 0.0) QIN(18,I)=0.0
      IF(EN <= (4.0*EIN(18):
)) GO TO 562
      PEQIN(18,I)=PEQEL(2,(I-IOFFN(18)))                    
# PART OF 3P RYDBERG CONTINUUM
  562 QIN(19,I)=0.0
      PEQIN(19,I)=0.0
      IF(EN <= EIN(19):
) GO TO 563 
      QIN(19,I)=0.024852/(EIN(19)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(19)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(19)+E(3))*1.0222
      IF(QIN(19,I):
 < 0.0) QIN(19,I)=0.0
      IF(EN <= (4.0*EIN(19):
)) GO TO 563
      PEQIN(19,I)=PEQEL(2,(I-IOFFN(19)))                    
# EXCITATION  NON DIPOLE                     
  563 QIN(20,I)=0.0
      PEQIN(20,I)=0.0
      IF(EN <= EIN(20):
) GO TO 568
      IF(EN > XTRP3(NTRP3):
) GO TO 566  
      DO 564 J=2,NTRP3                                                  
      IF(EN <= XTRP3(J):
) GO TO 565                                      
  564 CONTINUE                                                          
      J=NTRP3                                                          
  565 A=(YTRP3(J)-YTRP3(J-1))/(XTRP3(J)-XTRP3(J-1))                     
      B=(XTRP3(J-1)*YTRP3(J)-XTRP3(J)*YTRP3(J-1))/(XTRP3(J-1)-XTRP3(J)) 
      QIN(20,I)=(A*EN+B)*1.D-16    
      GO TO 567
# SCALED BY 1/E**2 ABOVE XTRP3(NTRP3) EV
  566 QIN(20,I)=YTRP3(NTRP3)*(XTRP3(NTRP3)/EN)**2*1.D-16
  567 IF(EN <= (4.0*EIN(20))) GO TO 568
      PEQIN(20,I)=PEQEL(2,(I-IOFFN(20))) 
# HIGH RYDBERG STATES             
  568 QIN(21,I)=0.0
      PEQIN(21,I)=0.0
      IF(EN <= EIN(21):
) GO TO 569 
      QIN(21,I)=0.023943/(EIN(21)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(21)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(21)+E(3))*1.0213
      IF(QIN(21,I):
 < 0.0) QIN(21,I)=0.0
      IF(EN <= (4.0*EIN(21):
)) GO TO 569
      PEQIN(21,I)=PEQEL(2,(I-IOFFN(21)))                    
# HIGH RYDBERG STATES             
  569 QIN(22,I)=0.0
      PEQIN(22,I)=0.0
      IF(EN <= EIN(22):
) GO TO 570 
      QIN(22,I)=0.026992/(EIN(22)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(22)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(22)+E(3))*1.0204
      IF(QIN(22,I):
 < 0.0) QIN(22,I)=0.0
      IF(EN <= (4.0*EIN(22):
)) GO TO 570
      PEQIN(22,I)=PEQEL(2,(I-IOFFN(22)))                    
# HIGH RYDBERG STATES             
  570 QIN(23,I)=0.0
      PEQIN(23,I)=0.0
      IF(EN <= EIN(23):
) GO TO 571 
      QIN(23,I)=0.027837/(EIN(23)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(23)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(23)+E(3))*1.0196
      IF(QIN(23,I):
 < 0.0) QIN(23,I)=0.0
      IF(EN <= (4.0*EIN(23):
)) GO TO 571
      PEQIN(23,I)=PEQEL(2,(I-IOFFN(23)))                    
# HIGH RYDBERG STATES             
  571 QIN(24,I)=0.0
      PEQIN(24,I)=0.0
      IF(EN <= EIN(24):
) GO TO 572 
      QIN(24,I)=0.027667/(EIN(24)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(24)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(24)+E(3))*1.0189
      IF(QIN(24,I):
 < 0.0) QIN(24,I)=0.0
      IF(EN <= (4.0*EIN(24):
)) GO TO 572
      PEQIN(24,I)=PEQEL(2,(I-IOFFN(24)))                    
# HIGH RYDBERG STATES             
  572 QIN(25,I)=0.0
      PEQIN(25,I)=0.0
      IF(EN <= EIN(25):
) GO TO 573 
      QIN(25,I)=0.028156/(EIN(25)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(25)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(25)+E(3))*1.0182
      IF(QIN(25,I):
 < 0.0) QIN(25,I)=0.0
      IF(EN <= (3.0*EIN(25):
)) GO TO 573
      PEQIN(25,I)=PEQEL(2,(I-IOFFN(25)))                    
# HIGH RYDBERG STATES             
  573 QIN(26,I)=0.0
      PEQIN(26,I)=0.0
      IF(EN <= EIN(26):
) GO TO 574 
      QIN(26,I)=0.045773/(EIN(26)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(26)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(26)+E(3))*1.0175
# SCALE BY (1.0 - IONISATION QUANTUM EFFICIENCY)
      QIN(26,I)=QIN(26,I)*0.9324 
      IF(QIN(26,I):
 < 0.0) QIN(26,I)=0.0
      IF(EN <= (3.0*EIN(26):
)) GO TO 574
      PEQIN(26,I)=PEQEL(2,(I-IOFFN(26)))                    
# HIGH RYDBERG STATES             
  574 QIN(27,I)=0.0
      PEQIN(27,I)=0.0
      IF(EN <= EIN(27):
) GO TO 575 
      QIN(27,I)=0.071724/(EIN(27)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(27)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(27)+E(3))*1.0169
# SCALE BY (1.0 - IONISATION QUANTUM EFFICIENCY)
      QIN(27,I)=QIN(27,I)*0.8514 
      IF(QIN(27,I):
 < 0.0) QIN(27,I)=0.0
      IF(EN <= (3.0*EIN(27):
)) GO TO 575
      PEQIN(27,I)=PEQEL(2,(I-IOFFN(27)))                    
# HIGH RYDBERG STATES             
  575 QIN(28,I)=0.0
      PEQIN(28,I)=0.0
      IF(EN <= EIN(28):
) GO TO 576 
      QIN(28,I)=0.075742/(EIN(28)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(28)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(28)+E(3))*1.0164
# SCALE BY (1.0 - IONISATION QUANTUM EFFICIENCY)
      QIN(28,I)=QIN(28,I)*0.7703 
      IF(QIN(28,I):
 < 0.0) QIN(28,I)=0.0
      IF(EN <= (3.0*EIN(28):
)) GO TO 576
      PEQIN(28,I)=PEQEL(2,(I-IOFFN(28)))                    
# HIGH RYDBERG STATES             
  576 QIN(29,I)=0.0
      PEQIN(29,I)=0.0
      IF(EN <= EIN(29):
) GO TO 577 
      QIN(29,I)=0.077213/(EIN(29)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(29)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(29)+E(3))*1.0159
# SCALE BY (1.0 - IONISATION QUANTUM EFFICIENCY)
      QIN(29,I)=QIN(29,I)*0.6892 
      IF(QIN(29,I):
 < 0.0) QIN(29,I)=0.0
      IF(EN <= (3.0*EIN(29):
)) GO TO 577
      PEQIN(29,I)=PEQEL(2,(I-IOFFN(29)))                    
# HIGH RYDBERG STATES             
  577 QIN(30,I)=0.0
      PEQIN(30,I)=0.0
      IF(EN <= EIN(30):
) GO TO 578 
      QIN(30,I)=0.092447/(EIN(30)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(30)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(30)+E(3))*1.0154
# SCALE BY (1.0 - IONISATION QUANTUM EFFICIENCY)
      QIN(30,I)=QIN(30,I)*0.6081 
      IF(QIN(30,I):
 < 0.0) QIN(30,I)=0.0
      IF(EN <= (3.0*EIN(30):
)) GO TO 578
      PEQIN(30,I)=PEQEL(2,(I-IOFFN(30)))                    
# HIGH RYDBERG STATES             
  578 QIN(31,I)=0.0
      PEQIN(31,I)=0.0
      IF(EN <= EIN(31):
) GO TO 579 
      QIN(31,I)=0.12030/(EIN(31)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(31)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(31)+E(3))*1.0149
# SCALE BY (1.0 - IONISATION QUANTUM EFFICIENCY)
      QIN(31,I)=QIN(31,I)*0.527  
      IF(QIN(31,I):
 < 0.0) QIN(31,I)=0.0
      IF(EN <= (3.0*EIN(31):
)) GO TO 579
      PEQIN(31,I)=PEQEL(2,(I-IOFFN(31)))                    
# HIGH RYDBERG STATES             
  579 QIN(32,I)=0.0
      PEQIN(32,I)=0.0
      IF(EN <= EIN(32):
) GO TO 580 
      QIN(32,I)=0.13563/(EIN(32)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(32)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(32)+E(3))*1.0145
# SCALE BY (1.0 - IONISATION QUANTUM EFFICIENCY)
      QIN(32,I)=QIN(32,I)*0.4459 
      IF(QIN(32,I):
 < 0.0) QIN(32,I)=0.0
      IF(EN <= (3.0*EIN(32):
)) GO TO 580
      PEQIN(32,I)=PEQEL(2,(I-IOFFN(32)))                    
# HIGH RYDBERG STATES             
  580 QIN(33,I)=0.0
      PEQIN(33,I)=0.0
      IF(EN <= EIN(33):
) GO TO 581 
      QIN(33,I)=0.14202/(EIN(33)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(33)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(33)+E(3))*1.0141
# SCALE BY (1.0 - IONISATION QUANTUM EFFICIENCY)
      QIN(33,I)=QIN(33,I)*0.3649 
      IF(QIN(33,I):
 < 0.0) QIN(33,I)=0.0
      IF(EN <= (3.0*EIN(33):
)) GO TO 581
      PEQIN(33,I)=PEQEL(2,(I-IOFFN(33)))                    
# HIGH RYDBERG STATES             
  581 QIN(34,I)=0.0
      PEQIN(34,I)=0.0
      IF(EN <= EIN(34):
) GO TO 582 
      QIN(34,I)=0.15238/(EIN(34)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(34)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(34)+E(3))*1.0137
# SCALE BY (1.0 - IONISATION QUANTUM EFFICIENCY)
      QIN(34,I)=QIN(34,I)*0.2838 
      IF(QIN(34,I):
 < 0.0) QIN(34,I)=0.0
      IF(EN <= (3.0*EIN(34):
)) GO TO 582
      PEQIN(34,I)=PEQEL(2,(I-IOFFN(34)))                    
# HIGH RYDBERG STATES             
  582 QIN(35,I)=0.0
      PEQIN(35,I)=0.0
      IF(EN <= EIN(35):
) GO TO 583 
      QIN(35,I)=0.15903/(EIN(35)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(35)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(35)+E(3))*1.0133
# SCALE BY (1.0 - IONISATION QUANTUM EFFICIENCY)
      QIN(35,I)=QIN(35,I)*0.2027 
      IF(QIN(35,I):
 < 0.0) QIN(35,I)=0.0
      IF(EN <= (3.0*EIN(35):
)) GO TO 583
      PEQIN(35,I)=PEQEL(2,(I-IOFFN(35)))                    
# HIGH RYDBERG STATES             
  583 QIN(36,I)=0.0
      PEQIN(36,I)=0.0
      IF(EN <= EIN(36):
) GO TO 584 
      QIN(36,I)=0.16048/(EIN(36)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(36)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(36)+E(3))*1.0130
# SCALE BY (1.0 - IONISATION QUANTUM EFFICIENCY)
      QIN(36,I)=QIN(36,I)*0.1216 
      IF(QIN(36,I):
 < 0.0) QIN(36,I)=0.0
      IF(EN <= (3.0*EIN(36):
)) GO TO 584
      PEQIN(36,I)=PEQEL(2,(I-IOFFN(36)))                    
# HIGH RYDBERG STATES             
  584 QIN(37,I)=0.0
      PEQIN(37,I)=0.0
      IF(EN <= EIN(37):
) GO TO 585 
      QIN(37,I)=0.16530/(EIN(37)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0
     /*EIN(37)))-BETA2-DEN(I)/2.0)*BBCONST*EN/(EN+EIN(37)+E(3))*1.0127
# SCALE BY (1.0 - IONISATION QUANTUM EFFICIENCY)
      QIN(37,I)=QIN(37,I)*0.0405 
      IF(QIN(37,I):
 < 0.0) QIN(37,I)=0.0
      IF(EN <= (3.0*EIN(37):
)) GO TO 585
      PEQIN(37,I)=PEQEL(2,(I-IOFFN(37))) 
  585 CONTINUE     
# LOAD BREMSSTRAHLUNG X-SECTIONS
      QIN(38,I)=0.0
      QIN(39,I)=0.0
      QIN(40,I)=0.0
      IF(EN <= 1000.):
 GO TO 720
      DO 700 J=2,NBREM
      IF(EN <= EBRM(J):
) GO TO 710
  700 CONTINUE
      J=NBREM
  710 A=(math.log(Z1T(J))-math.log(Z1T(J-1)))/(EBRM(J)-EBRM(J-1))
      B=(math.log(Z1T(J))*EBRM(J-1)-math.log(Z1T(J-1))*EBRM(J))/
     /(EBRM(J-1)-EBRM(J))
      A1=(math.log(Z6T(J))-math.log(Z6T(J-1)))/(EBRM(J)-EBRM(J-1))
      B1=(math.log(Z6T(J))*EBRM(J-1)-math.log(Z6T(J-1))*EBRM(J))/
     /(EBRM(J-1)-EBRM(J))
      A2=(math.log(Z7T(J))-math.log(Z7T(J-1)))/(EBRM(J)-EBRM(J-1))
      B2=(math.log(Z7T(J))*EBRM(J-1)-math.log(Z7T(J-1))*EBRM(J))/
     /(EBRM(J-1)-EBRM(J))
      QIN(38,I)=math.exp(A*EN+B)*9.0*1.D-24
      QIN(39,I)=math.exp(A1*EN+B1)*3.0*1.D-24
      QIN(40,I)=math.exp(A2*EN+B2)*1.D-24
  720 CONTINUE
#---------------------------------------------------------------------
#---------------------------------------------------------------------
#    SUBTRACT ROTATIONAL XSEC TO GET CORRECT ELASTIC XSEC. 
      Q(2,I)=Q(2,I)-QIN(1,I)-QIN(2,I) 
#       IF(Q(2,I) <= 0.0) WRITE(6,966) Q(2,I),I
# 966 FORMAT(3X,' ERROR IN GAS 27 Q(2,I)=',E12.3,'  I=',I5)     
#  
      RSUM=QIN(1,I)+QIN(2,I)
      VSUM=0.0
      DO 800 J=3,9
  800 VSUM=VSUM+QIN(J,I)
      TRPSUM=QIN(10,I)+QIN(15,I)+QIN(20,I)
      SNGSUM=0.0
      DO 801 J=10,37
  801 SNGSUM=SNGSUM+QIN(J,I)
      SNGSUM=SNGSUM-TRPSUM
      SUMION=QION(1,I)+QION(2,I)+QION(3,I) 
      SUMBREM=QIN(38,I)+QIN(39,I)+QIN(40,I)
      Q(1,I)=Q(2,I)+SUMION+Q(4,I)+SNGSUM+TRPSUM+VSUM+RSUM
#     WRITE(6,911) EG(I),Q(1,I),Q(2,I),RSUM,VSUM,SUMION,SNGSUM,TRPSUM,
#    /SUMBREM
# 911 FORMAT(' EN =',D12.4,' QTOT=',D12.4,/,' QEL=',D12.4,
#    /' RSUM =',D12.4,' VSUM=',D12.4,/,' QION=',D12.4,' SNGLT=',D12.4,
#    /' TRPLT=',D12.4,/,' BREM =',D12.4,/)
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      DO 1010 K=1,NIN
      IF(EFINAL <= EIN(K):
) :
       NIN=K-1
       GO TO 1011
      # endIF
 1010 CONTINUE
 1011 CONTINUE
      IF(NIN <= 9):
 NIN=9
#     IF(EFINAL > 1000.) NIN=40                                       
#                                                                       
      RETURN
      # end
      def GAS45(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)  
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)  
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)       
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      DIMENSION XELM(142),YELM(142),YELT(142),YEPS(142),
     /XROT0(53),YROT0(53),XROT1(43),YROT1(43),XROT2(28),YROT2(28),
     /XROT3(28),YROT3(28),XVIB1(43),YVIB1(43),XVIB2(42),YVIB2(42),
     /XVIB3(13),YVIB3(13),XVIB4(12),YVIB4(12),
     /XB3S1(3),YB3S1(3),XB3S2(6),YB3S2(6),XB3S3(5),YB3S3(5),
     /XB3S4(8),YB3S4(8),XC3PI(5),YC3PI(5),XA3SG(5),YA3SG(5),
     /XE3SG(5),YE3SG(5),XEFSG(34),YEFSG(34),
     /XEXC1(20),YEXC1(20),XEXC2(23),YEXC2(23),
     /XATT(18),YATT(18),XION(92),YION(92),IOFFN(106),PJ(7),ERLVL(7),
     /BEF(10)
      CHARACTER*50 SCRPT(300),SCRPTN(10)                            
      CHARACTER*25 NAME 
# --------------------------------------------------------------      
# ELASTIC MT                                                   
      DATA XELM/0.00,.001,.0012,.0015,.0018,.002,.0025,.003,.004,.005,
     /.006,.007,.008,.009,.010,.012,.015,.018,.020,.025,
     /0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.10,0.12,0.15,  
     /0.18,0.20,0.25,0.30,0.40,0.50,0.60,0.70,0.80,0.90,
     /1.00,1.20,1.50,1.80,2.00,2.50,3.00,4.00,5.00,6.00,
     /7.00,8.00,9.00,10.0,12.0,15.0,18.0,20.0,25.0,30.0,
     /40.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,
     /200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,
     /900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,
     /4500.,5000.,6000.,7000.,8000.,9000.,1.0D4,1.25D4,1.5D4,1.75D4,
     /2.0D4,2.5D4,3.0D4,3.5D4,4.0D4,4.5D4,5.0D4,6.0D4,7.0D4,8.0D4,
     /9.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5D5,3.0D5,3.5D5,4.0D5,
     /4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,
     /2.0D6,2.5D6,3.0D6,3.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,
     /9.0D6,1.0D7/  
      DATA YELM/7.24,7.25,7.26,7.26,7.27,7.28,7.30,7.35,7.38,7.45,
     /7.48,7.54,7.59,7.64,7.70,7.78,7.90,8.04,8.14,8.33,
     /8.56,8.93,9.27,9.54,9.79,10.04,10.25,10.47,10.86,11.35,
     /11.78,12.02,12.54,13.00,13.81,14.52,15.16,15.66,16.17,16.58,
     /17.01,17.70,18.05,18.05,17.70,16.60,15.35,12.85,10.90,9.450,
     /8.20,7.20,6.30,5.60,4.45,3.275,2.529,2.154,1.476,1.100,
     /.702,.505,.375,.295,.238,.195,.170,.116,.0868,.0662,
     /.0524,.0353,.0256,.0195,.0154,.0125,.0103,.00747,.00567,.00446,
     /.00361,.00299,.0020,.00144,.00109,8.53D-4,5.69D-4,4.08D-4,3.08D-4,
     /2.41D-4,
     /1.94D-4,1.60D-4,1.15D-4,8.65D-5,6.77D-5,5.45D-5,4.49D-5,2.98D-5,
     /2.13D-5,1.60D-5,
     /1.26D-5,8.34D-6,5.97D-6,4.51D-6,3.54D-6,2.86D-6,2.36D-6,1.70D-6,
     /1.29D-6,1.02D-6,
     /8.26D-7,6.86D-7,4.65D-7,3.40D-7,2.62D-7,2.09D-7,1.44D-7,1.07D-7,
     /8.37D-8,6.76D-8,
     /5.62D-8,4.76D-8,3.58D-8,2.82D-8,2.30D-8,1.92D-8,1.63D-8,1.15D-8,
     /8.67D-9,6.80D-9,
     /5.49D-9,3.83D-9,2.84D-9,2.20D-9,1.76D-9,1.44D-9,1.20D-9,8.79D-10,
     /6.72D-10,5.31D-10,
     /4.31D-10,3.57D-10/
      DATA YEPS/0.0,0.0,0.0,0.0,0.0,0.0,0.0,-.00204,-.00406,-.00403,
     /-.00402,-.00799,-.01195,-.01587,-.01974,-.02548,-.03497,-.04613,
     /-.05537,-.07162,
     /-.09485,-.11355,-.13538,-.15360,-.16779,-.18516,-.19550,-.20711,
     /-.22691,-.25186,
     /-.27686,-.29241,-.29958,-.33194,-.36128,-.39254,-.42965,-.43614,
     /-.42939,-.42749,
     /-.44093,-.43942,-.39970,-.34691,-.29121,-.15375,-.03498,0.18393,
     /0.31707,0.40003,
     /0.46174,0.51567,0.56204,0.58937,0.63888,0.68310,0.71518,0.73895,
     /0.79352,0.81348,
     /0.85049,0.86411,0.88575,0.89777,0.90257,0.91825,0.91958,0.93123,
     /0.93873,0.94796,
     /0.95404,0.96326,0.97004,0.97305,0.97513,0.97827,0.98027,0.98267,
     /0.98464,0.98629,
     /.987605,.988622,.990817,.992168,.993473,.994052,.995228,.995858,
     /.996455,.996914,
     /.987258,.997548,.997951,.998252,.998475,.998649,.998785,.9990334,
     /.9992007,.9993190,
     /.9994023,.9995276,.9996104,.9996674,.9997107,.9997456,.9997718,
     /.9998134,.9998419,.9998630,
     /.9998801,.9998934,.9999171,.9999328,.9999437,.9999520,.9999635,
     /.9999709,.9999760,.9999798,
     /.9999827,.9999850,.9999883,.9999906,.9999922,.9999934,.9999944,
     /.9999960,.9999970,.9999977,
     /.9999981,.9999987,.9999990,.9999993,.9999994,.9999995,.9999996,
     /.9999997,.9999998,.9999998,
     /.9999999,.9999999/
# ELASTIC FROM 100 EV
      DATA YELT/7.24,7.25,7.26,7.26,7.27,7.28,7.30,7.36,7.40,7.43,
     /7.46,7.50,7.53,7.56,7.60,7.65,7.72,7.80,7.85,7.95,
     /8.05,8.30,8.50,8.65,8.80,8.93,9.06,9.19,9.42,9.70,
     /9.92,10.03,10.42,10.60,11.07,11.43,11.68,12.02,12.46,12.79,
     /13.02,13.56,14.15,14.59,14.78,15.05,15.00,14.66,13.90,13.05,
     /12.10,11.33,10.54,9.744,8.375,6.678,5.508,4.952,3.931,3.125,
     /2.299,1.760,1.465,1.241,1.034,0.954,0.841,0.639,0.518,0.443,
     /.383,.303,.255,.210,.176,.158,.140,.112,.0932,.0800,
     /.070,.062,.049,.040,.035,.0295,.0235,.0189,.0162,.0142,
     /.0126,.0114,.00951,.00817,.00717,.00639,.00576,.00464,.00390,
     /.00336,
     /.00296,.00240,.00203,.00176,.00156,.00141,.00128,.00110,
     /9.66D-4,8.67D-4,
     /7.90D-4,7.28D-4,6.17D-4,5.44D-4,4.91D-4,4.52D-4,3.98D-4,3.63D-4,
     /3.38D-4,3.19D-4,
     /3.05D-4,2.94D-4,2.77D-4,2.66D-4,2.58D-4,2.52D-4,2.47D-4,2.39D-4,
     /2.34D-4,2.31D-4,
     /2.28D-4,2.25D-4,2.23D-4,2.22D-4,2.22D-4,2.21D-4,2.21D-4,2.20D-4,
     /2.20D-4,2.20D-4,
     /2.19D-4,2.19D-4/      
#-----------------------------------------------------------------------
# ROTATION J=0-2
# SCALED BY 1/E ABOVE 20 EV IN def                    
      DATA XROT0/.043928,.046,.047,.048,.049,.050,.051,.054,.055,.060, 
     /.065,.070,.080,.090,0.10,0.11,0.12,0.13,0.14,0.15,
     /0.20,0.25,0.30,0.35,0.40,0.45,0.50,0.55,0.60,0.65, 
     /0.70,0.80,0.90,1.00,1.10,1.20,1.35,1.50,1.75,2.00,
     /2.50,3.00,3.50,4.00,4.50,5.00,6.00,7.00,8.00,9.00,                
     /10.0,15.0,20.0/                                                   
      DATA YROT0/0.00,.0206,.0276,.0286,.0297,.0308,.0310,.0330,.0340,
     /.0394, 
     /.0452,.0507,.0614,.0680,.0740,.0790,.0835,.088,.0925,.0970,
     /.115,.132,.152,.175,.200,.228,.260,.291,.323,.359, 
     /.394,.469,.555,.636,.716,.796,.916,1.036,1.203,1.370,
     /1.585,1.704,1.755,1.758,1.732,1.689,1.579,1.462,1.350,1.248,      
     /1.156,0.730,0.47/                                            
#-----------------------------------------------------------------------
# ROTATION J=1-3                                                        
# SCALED BY 1/E ABOVE 20 EV IN def                    
      DATA XROT1/0.072741,.075,.080,.085,.090,.095,0.10,0.11,0.12,0.13,
     /0.15,0.20,0.25,0.30,0.35,0.40,0.45,0.50,0.56,0.60,                
     /0.66,0.70,0.80,0.90,1.01,1.20,1.40,1.60,1.80,2.00,                
     /2.50,3.00,3.50,4.00,4.50,5.00,6.00,7.00,8.00,9.00,                
     /10.0,15.0,20.0/             
      DATA YROT1/0.00,.0085,.0149,.0203,.0238,.0266,.0282,.0351,.0403,  
     /.0449,
     /.0520,.0604,.0719,.0870,.1029,.1191,.1361,.1543,.1773,.1944,
     /.2212,.2396,.2839,.3328,.3842,.489,.569,.658,.743,.818,           
     /.952,1.020,1.046,1.050,1.036,1.011,.946,.876,.809,.748,           
     /.694,.440,.288/                                                
#-----------------------------------------------------------------------
# ROTATION J=2-4                                         
# SCALED BY 1/E ABOVE 20 EV IN def                    
      DATA XROT2/0.10085,0.15,0.20,0.25,0.30,0.35,0.40,0.45,0.50,0.60, 
     /0.70,0.80,0.90,1.00,1.50,2.00,2.50,3.00,3.50,4.00,                
     /4.50,5.00,5.50,6.00,7.00,8.00,10.0,20.0/  
      DATA YROT2/0.00,.0249,.0367,.0475,.0577,.0694,.0834,.1003,.1192,  
     /.145,
     /.178,.216,.256,.299,.436,.543,.600,.649,.670,.672,           
     /.662,.646,.627,.605,.561,.517,.444,0.20/
# ROTATION J=4-6 USE X-SECTION FOR J=2-4 SCALED BY 0.8
# ROTATION J=6-8 USE X-SECTION FOR J=2-4 SCALED BY 0.5               
#-----------------------------------------------------------------------
# ROTATION J=3-5                              
# SCALED BY 1/E ABOVE 20 EV IN def                    
      DATA XROT3/0.12797,0.15,0.20,0.25,0.30,0.35,0.40,0.45,0.50,0.60,
     /0.70,0.80,0.90,1.00,1.50,2.00,2.50,3.00,3.50,4.00,                
     /4.50,5.00,5.50,6.00,7.00,8.00,10.0,20.0/
      DATA YROT3/0.00,.019,.033,.043,.050,.058,.066,.075,.085,.104,     
     /.128,.154,.185,.214,.334,.565,.700,.750,.825,.828,                
     /.818,.797,.774,.747,.692,.640,.548,0.24/
# ROTATION J=5-7 USE X-SECTION FOR J=3-5 SCALED BY 0.8
# ROTATION J=7-9 USE X-SECTION FOR J=3-5 SCALED BY 0.5           
#-----------------------------------------------------------------------
# VIBRATION V=0-1 DELTAJ=0  ROTATIONALLY ELASTIC  
# SCALE AS 1/E ABOVE 100 EV                      
      DATA XVIB1/.515916,0.56,0.58,0.60,0.65,0.75,0.85,0.95,1.00,1.05, 
     /1.10,1.15,1.20,1.30,1.40,1.60,1.80,2.20,2.40,2.60,                
     /3.00,3.50,4.00,4.50,5.00,6.00,7.00,8.00,9.00,10.0,                
     /11.0,12.0,13.0,14.0,15.0,20.0,25.0,30.0,40.0,50.0,
     /60.0,80.0,100./          
      DATA YVIB1/0.00,.0005,.0031,.0064,.0071,.0106,.0170,.0279,.0342,  
     /.0399,
     /.0451,.0501,.0545,.0651,.0735,.0964,.1216,.1624,.1677,.1719,
     /.1916,.2008,.1860,.1630,.1460,.1160,.0876,.0655,.0510,.0430,
     /.0366,.0318,.0280,.0241,.0222,.0143,.0104,.0073,.0048,.00416,
     /.00351,.00262,.00194/
#-----------------------------------------------------------------------
# VIBRATION V=0-1 DELTAJ=2  ROTATIONALLY INELASTIC 
# SCALE AS 1/E ABOVE 100 EV                     
      DATA XVIB2/.568,.575,0.60,0.65,0.75,0.85,0.95,1.00,1.05,1.10,
     /1.15,1.20,1.30,1.40,1.60,1.80,2.20,2.40,2.60,3.00,                
     /3.50,4.00,4.50,5.00,6.00,7.00,8.00,9.00,10.0,11.0,                
     /12.0,13.0,14.0,15.0,20.0,25.0,30.0,40.0,50.0,60.0,
     /80.0,100./               
      DATA YVIB2/0.00,.0002,.0016,.0028,.0058,.0110,.0204,.0264,.0316,
     /.0369,
     /.0423,.0477,.0602,.0697,.0994,.1334,.1910,.2008,.2141,.2494,
     /.2672,.2540,.2270,.2040,.1640,.1224,.0905,.0690,.0570,.0484,      
     /.0422,.0370,.0319,.0294,.0189,.0138,.0097,.0064,.00552,.00466,
     /.00347,.00257/      
#-----------------------------------------------------------------------
#  VIBRATION V=0-2                                                      
      DATA XVIB3/1.00265,1.40,1.50,2.00,2.50,3.00,4.00,5.00,6.00,8.00,
     /10.0,15.0,20.0/                             
      DATA YVIB3/0.00,.001,.002,.011,.025,.033,.035,.032,.027,.021,
     /.016,.0092,.0066/                        
#-----------------------------------------------------------------------
#  VIBRATION V=0-3                                                      
      DATA XVIB4/1.46083,1.80,2.00,2.50,3.00,4.00,5.00,6.00,8.00,
     /10.0,15.0,20.0/                                   
      DATA YVIB4/.0,.0003,.001,.0025,.0033,.0035,.0032,.0027,.0021,
     /.0016,.00092,.00066/     
# B3 SIGMA+ 100% DISSOCIATIVE SPLIT INTO 4 ENERGY LOSSES
# SCALED BY1/E**3 ABOVE 50.0EV
      DATA XB3S1/8.00,9.20,9.20001/
      DATA YB3S1/0.00,.109,0.00/  
      DATA XB3S2/9.00,9.20,9.20001,10.2,12.2,12.20001/
      DATA YB3S2/0.00,0.00,.109,.187,.445,0.00/  
      DATA XB3S3/9.50,12.2,12.20001,15.2,15.20001/
      DATA YB3S3/0.00,0.00,.445,0.63,0.00/  
      DATA XB3S4/10.0,15.2,15.20001,17.2,20.2,30.0,40.0,50.0/
      DATA YB3S4/0.00,0.00,0.63,.516,.353,.153,.069,.035/
# C3 PI V=0-18 SUMMED VIBRATIONS METASTABLE LEVEL 
# SCALED BY 1/E**3 ABOVE 30 EV
      DATA XC3PI/11.779,15.0,17.5,20.0,30.0/
      DATA YC3PI/0.00,0.09,.126,.135,.072/
# A3 SIGMA V=0-17 SUMMED VIBRATIONS
# SCALED BY 1/E**3 ABOVE 30 EV
      DATA XA3SG/11.793,15.0,17.5,20.0,30.0/
      DATA YA3SG/0.00,.072,.081,0.09,.027/
# E3 SIGMA V=0-10 SUMMED VIBRATIONS
# SCALED BY 1/E**3 ABOVE 30 EV
      DATA XE3SG/13.253,15.0,17.5,20.0,30.0/
      DATA YE3SG/0.00,.0108,.018,.0225,.0117/
# EF1 SIGMA V=0-19 SUMMED VIBRATIONS
#  BORN SCALED ABOVE XEFSG(NEFSG)  EV
      DATA XEFSG/12.301,15.0,16.0,17.0,17.5,19.0,20.0,21.0,23.5,26.0,
     /30.0,40.0,50.0,60.0,70.0,80.0,100.,120.,140.,160.,
     /180.,200.,220.,240.,260.,280.,300.,400.,500.,600.,
     /700.,800.,900.,1000./
      DATA YEFSG/0.00,.028,.033,.037,.038,.039,.040,.040,.040,.040,
     /.040,.041,.041,.039,.036,.034,.029,.026,.024,.022,
     /.021,.020,.019,.018,.017,.016,.015,.012,.0096,.0080,
     /.0069,.0061,.0054,.0049/
# B1 SIGMA                  OSCILLATOR SUM V=0-36   F=0.310770
# C1 PI                     OSCILLATOR SUM V=0-13   F=0.355995
# B#1 SIGMA                 OSCILLATOR SUM V=0-8    F=0.044610
# D1 PI                     OSCILLATOR SUM V=0-15   F=0.074070
# B##1 SIGMA                OSCILLATOR SUM V=0-6    F=0.022300
# D#1 PI                    OSCILLATOR SUM V=0-3    F=0.014500
# B###1 SIGMA + D##1 PI     OSCILLATOR SUM          F=0.014500
# B####1 SIGMA + D###1 PI   OSCILLATOR SUM          F=0.010100
# B#####1 SIGMA + D####1 PI OSCILLATOR SUM          F=0.005000
# CONTINUUM EXCITATION                              F=0.026800
# PREDISSOCIATION                                   F=0.017000
#
#                 SUM EXCITATION OSCILLATOR         F=0.895645
#                 SUM IONISATION OSCILLATOR         F=1.1219
#           TOTAL OSCILLATOR SUM           F=2.017545
#-----------------------------------------------------------------------
#  ATTACHMENT GIVEN AS TABLES AND AS A TEMPERATURE DEP# endENT def
#
# TABLES FOR 2SIGMAg  ATTACHMENT 
      DATA XATT/7.00,7.50,8.00,8.50,9.00,9.50,10.0,10.4,11.0,11.5,
     /12.0,12.5,13.0,13.5,14.0,14.5,15.0,15.5/
      DATA YATT/0.00,2.8D-6,1.18D-5,3.08D-5,5.88D-5,1.01D-4,1.18D-4,
     /1.29D-4,1.18D-4,1.01D-4,
     /7.28D-5,4.48D-5,2.66D-5,1.26D-5,6.72D-6,3.20D-6,8.0D-7,0.0/
# SEE NOTES ON DERIVATION OF IONISATION X-SECTION                     
      DATA XION/15.418,16.0,16.5,17.0,17.5,18.0,18.5,19.0,19.5,20.0,    
     /20.5,21.0,21.5,22.0,22.5,23.0,23.5,24.0,24.5,25.0,                
     /25.5,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,45.0,                
     /50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,                
     /100.,105.,110.,115.,120.,125.,130.,135.,140.,145.,                
     /150.,160.,180.,200.,225.,250.,275.,300.,350.,400.,
     /450.,500.,550.,600.,650.,700.,750.,800.,850.,900.,
     /950.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,
     /4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,10000.,12000.,
     /14000.,16000./                
      DATA YION/0.00,.0295,.0598,.0910,.121,.154,.184,.217,.245,.276,   
     /.305,.331,.357,.384,.407,.433,.454,.477,.498,.516,                
     /.536,.555,.623,.678,.725,.765,.800,.828,.853,.900,                
     /.927,.945,.954,.957,.957,.956,.950,.944,.934,.920,                
     /.910,.902,.890,.878,.865,.851,.840,.832,.818,.809,                
     /.801,.776,.725,.687,.645,.605,.565,.537,.484,.443,
     /.404,.379,.343,.322,.307,.287,.276,.261,.251,.239,
     /.226,.214,.199,.165,.146,.133,.121,.101,.0865,.0754,
     /.0675,.0610,.0558,.0515,.0480,.0422,.0375,.0340,.0310,.0265,
     /.0234,.0208/   
#***********************************************************************
# IONISATION FROM WEIGHTED AVERAGE OF RAPP AND STRAUB UP TO 180EV
#  NORMALISED STRAUB BETWEEN 180 AND 1000EV : NORMALISED SCHRAM
#  BETWEEN 1 AND 16KEV.
#  ABOVE 16KEV USED BORN-BETHE WITH M2=0.642 AND C=8.3 CLOSE FIT TO 
#  RIEKE AND PREPEJCHAL  AND CONSISTENT WITH BERKOWITZ
# USE ORTHO IONISATION ENERGY AT ROOM TEMPERATURE
# DISSOCIATION ENERGY 0=4.47806952 EV
# ORTHO PARA ENERGY DIFFERENCE J=0 - J=1 FOR GROUND STATE =0.01469049 EV
#
# OSCILLATOR STRENGTHS FROM BERKOWITZ WITH SMALL CORRECTIONS FOR NEW
# IMPROVED FRANCK-CONDON FACTORS FOR LYMAN (B1 SIGMA) AND WERNER (C1 PI)
# TRIPLET X-SECTIONS FROM PUBLISHED ELECTRON SCATTERING UP TO 2010.
# LOWEST TRIPLET DISSOCIATIVE STATE (B3 SIGMA) SPLIT INTO FOUR LEVELS IN
# ORDER TO BETTER SIMULATE VARYING ENERGY LOSS.
# TRIPLET X-SECTIONS SCALED BY 0.9 TO BETTER FIT TOWNS# end COEFICIENT. 
# TRIPLET SCALING FACTOR WITHIN EXPERIMENTAL MEASUREMENT ERRORS. 
# ATTACHMENT X-SECTION INCLUDES TEMPERATURE DEP# endENCE FROM ROTATIONAL 
# POPULATION SHOULD BE ACCURATE UP TO 1000 KELVIN.
# MOMENTUM TRANSFER ELASTIC X-SECTION FROM SCHMIDT UP TO 1.0 EV , ABOVE
# 1.0 EV X-SECTION FROM FIT TO DRIFT VELOCITY.
# FIT TO WITHIN EXPERIMENTAL ERRORS OF DRIFT VELOCITY AND DIFFUSION FROM
# TABLE 14.6 OF HUXLEY AND CROMPTON.
# SOME EVIDENCE OF ELECTRON RUNAWAY ABOVE 300 TOWNS# end FROM CALCULATION.
#-----------------------------------------------------------------------
      IF(NANISO == 0):
 :
       NAME='H2PARA ISO 2010' 
      else:
       NAME='H2PARA ANI 2010'
      # endIF
# ----------------------------------------------------------------------
#                                      
      CONST=1.873884D-20  
      EMASS2=1021997.804
      API=DACOS(-1.00)
      A0=0.52917720859D-8
      RY=13.60569193
      BBCONST=16.0*API*A0*A0*RY*RY/EMASS2
# BORN-BETHE CONSTANTS FOR IONISATION
      AM2=0.642
      C=8.30
#-----------------------------------------------------------------------
      NION=1  
      NATT=1
      NIN=106
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=NANISO
      DO 2 J=13,NIN
    2 KIN(J)=NANISO
# SET VIBRATION AND ROTATION TO ISOTROPIC
      DO 22 J=1,12
   22 KIN(J)=0
      NELM=142                                                         
      NROT0=53                                                          
      NROT1=43                                                          
      NROT2=28                                                          
      NROT3=28                                                          
      NVIB1=43                                                          
      NVIB2=42                                                          
      NVIB3=13                                                          
      NVIB4=12 
      NB3S1=3
      NB3S2=6
      NB3S3=5
      NB3S4=8
      NC3PI=5
      NA3SG=5
      NE3SG=5
      NEFSG=34                                                         
      NIOND=92                                                         
      NATT1=18                                                          
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(2.015650*AMU)   
# IONISATION ENERGY FOR PARA =15.42580155 EV
# IONISATION ENERGY FOR ORTHO=15.41833111 EV
# USE ORTHO ENERGY FOR ROOM TEMPERATURE GAS
      E(3)=15.418 
# EXCITATION X-SECTION AT 1.3 MEV                                                      
      E(4)=0.2228D-18             
# IONISING X-SECTION AT 1.3 MEV                           
      E(5)=0.1889D-18    
# EOBY FOR MINIMUM IONISING PARTICLES                                 
      E(6)=6.5 
#
      EOBY(1)=12.0
      IOFF=IFIX(SNGL(0.5+E(3)/ESTEP))
      EIN(1)=-.043928
      EIN(2)=-.072741
      EIN(3)=-.10085
      EIN(4)=-.12797
      EIN(5)=0.043928                                                   
      EIN(6)=0.072741                                                  
      EIN(7)=0.10085                                                    
      EIN(8)=0.12797                                                 
      EIN(9)=0.515916                                                   
      EIN(10)=0.568                                                     
      EIN(11)=1.00265                                                   
      EIN(12)=1.46083 
# b3 SIGMA+ DISSOCIATION SPLIT INTO 4 ENERGY LOSSES
      EIN(13)=8.0  
      EIN(14)=9.0 
      EIN(15)=9.5 
      EIN(16)=10.0
# B1 SIGMA+ LYMAN BANDS
      EIN(17)=11.189
      EIN(18)=11.353
      EIN(19)=11.512
      EIN(20)=11.666
      EIN(21)=11.817
      EIN(22)=11.963
      EIN(23)=12.105
      EIN(24)=12.244
      EIN(25)=12.378
      EIN(26)=12.509
      EIN(27)=12.636
      EIN(28)=12.759
      EIN(29)=12.878
      EIN(30)=12.994
      EIN(31)=13.106
      EIN(32)=13.215
      EIN(33)=13.320
      EIN(34)=13.422
      EIN(35)=13.521
      EIN(36)=13.617
      EIN(37)=13.709
      EIN(38)=13.798
      EIN(39)=13.884
      EIN(40)=13.967
      EIN(41)=14.047
      EIN(42)=14.124
      EIN(43)=14.197
      EIN(44)=14.268
      EIN(45)=14.335
      EIN(46)=14.399
      EIN(47)=14.458
      EIN(48)=14.514
      EIN(49)=14.564
      EIN(50)=14.608
      EIN(51)=14.644
      EIN(52)=14.668
      EIN(53)=14.678
# C1 PI WERNER BANDS
      EIN(54)=12.285
      EIN(55)=12.571
      EIN(56)=12.840
      EIN(57)=13.094
      EIN(58)=13.332
      EIN(59)=13.553
      EIN(60)=13.758
      EIN(61)=13.947
      EIN(62)=14.119
      EIN(63)=14.273
      EIN(64)=14.408
      EIN(65)=14.522
      EIN(66)=14.611
      EIN(67)=14.672
# C3 PI 
      EIN(68)=11.779
      EIN(69)=13.100
# A3 SIGMA
      EIN(70)=11.793
      EIN(71)=12.684
      EIN(72)=13.253
# E3 SIGMA
      EIN(73)=12.301
# EF SIGMA
      EIN(74)=12.841   
# B#1 SIGMA BANDS
      EIN(75)=13.698
      EIN(76)=13.931
      EIN(77)=14.144
      EIN(78)=14.333
      EIN(79)=14.494
      EIN(80)=14.613
      EIN(81)=14.651
      EIN(82)=14.664
      EIN(83)=14.672 
# D1 PI BANDS
      EIN(84)=13.994
      EIN(85)=14.270
      EIN(86)=14.530
      EIN(87)=14.775
      EIN(88)=15.003
      EIN(89)=15.218
      EIN(90)=15.418
      EIN(91)=15.602
      EIN(92)=15.772
      EIN(93)=15.928
      EIN(94)=16.068
      EIN(95)=16.191
      EIN(96)=16.299
      EIN(97)=16.390
      EIN(98)=16.462
      EIN(99)=16.516 
# B##1 SIGMA
      EIN(100)=14.491
# D#1 PI 
      EIN(101)=14.609 
# B###1 SIGMA  + D##1 PI
      EIN(102)=14.899   
# B####1 SIGMA + D###1 PI
      EIN(103)=15.060
# B#####1 SIGAM + D####1 PI
      EIN(104)=15.150
# CONTINUUM DISSOCIATIVE EXC 
      EIN(105)=15.300
# PREDISSOCIATION ABOVE IONISATION POTENTIAL
      EIN(106)=15.800
# BEF SCALING :  BINDING ENERGIES
      BEF(1)=E(3)
      BEF(2)=E(3)
      BEF(3)=E(3)
      BEF(4)=E(3)
      BEF(5)=E(3)
# 
# ATTACHMENT THRESHOLD EV FOR 2 SIGMAu
      EATTTH=3.723
# ATTACHMENT WIDTH FOR 2 SIGMAu
      EATTWD=0.45
# ATTACHMENT AMPLITUDE FOR 2 SIGMAu
      AMPATT=3.0D-21
# ATTACHMENT THRESHOLD EV FOR 2 SIGMAg
      EATTTH1=13.922
# ATTACHMENT WIDTH FOR 2 SIGMAg
      EATTWD1=0.95
# ATTACHMENT AMPLITUDE FOR 2 SIGMAg
      AMPATT1=3.0D-20
#-----------------------------------------------------------------------
# ROTATIONAL ENERGY LEVELS: ERLVL(N)
#  PARA - ORTHO ENERGY DIFFERENCE ( J=0 - J=1 ROT LEVEL) = 0.01469049 EV
#  REF :ASTROPHYS J.  282(1984)L85
      ERLVL(1)=0.01469049
      ERLVL(2)=EIN(5)
      ERLVL(3)=0.01469049+EIN(6)
      ERLVL(4)=EIN(5)+EIN(7)
      ERLVL(5)=0.01469049+EIN(6)+EIN(8)
      ERLVL(6)=EIN(5)+EIN(7)+0.15381
      ERLVL(7)=0.01469049+EIN(6)+EIN(8)+0.1794
#**********************************************************************
# ENTER PENNING TRANSFER FRACTION FOR EACH LEVEL
# USE TRANSFER FRACTION IN RANGE BETWEEN 0.0 AND 0.2 FOR MOST MIXTURES
      DO 50 NL=1,NIN
      PENFRA[1,NL]=0.0
# PENNING TRANSFER DISTANCE MICRONS
      PENFRA[2,NL]=1.0
# PENNING TRANSFER TIME PICOSECONDS
   50 PENFRA[3,NL]=1.0
#**********************************************************************
      IF(IPEN == 0):
 GO TO 4 
      DO 3 KDUM=1,NIN
      IF(PENFRA[1,KDUM] == 0.0):
 GO TO 3
      WRITE(6,999) NAME,EIN(KDUM),PENFRA[1,KDUM],PENFRA[2,KDUM],
     /PENFRA[3,KDUM]
  999 FORMAT(' GAS = ',A15,' ENERGY LEVEL = ',F7.4,' EV.',/,' PENNING PR
     /OBABILITY =',F5.3,' ABS.LENGTH =',F7.2,' DECAY TIME =',F7.1,/)    
    3 CONTINUE
#
    4 DO 5 NL=1,NIN
    5 IOFFN(NL)=IFIX(SNGL(0.5+EIN(NL)/ESTEP))
#
# ROTATIONAL POPULATIONS
      DO 6 K=1,7,2
#   6 PJ(K)=3*(2*K+1)*math.exp(-ERLVL(K)/AKT)
    6 PJ(K)=0.00
      DO 7 K=2,6,2
    7 PJ(K)=(2*K+1)*math.exp(-ERLVL(K)/AKT)
      SUM=1.0
      DO 8 K=1,7
    8 SUM=SUM+PJ(K)        
      FROT0=1.0/SUM                                                     
      FROT1=PJ(1)/SUM                                                   
      FROT2=PJ(2)/SUM                                                   
      FROT3=PJ(3)/SUM                                                   
      FROT4=PJ(4)/SUM                                                   
      FROT5=PJ(5)/SUM 
      FROT6=PJ(6)/SUM
      FROT7=PJ(7)/SUM 
#     WRITE(6,88) FROT0,FROT1,FROT2,FROT3,FROT4,FROT5,FROT6,FROT7
#  88 FORMAT(3X,' FROT0=',F9.6,' FROT1=',F9.6,' FROT2=',F9.6,' FROT3=',
#    /F9.6,' FROT4=',F9.6,' FROT5=',F9.6,' FROT6=',F9.6,' FROT7=',F9.6) 
#-----------------------------------------------------------------------        
#
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC (ANISO)  P-HYDROGEN  '
      IF(NANISO == 0):
 :
      SCRPT(2)=' ELASTIC (ISOT)   P-HYDROGEN  '
      # endIF
      SCRPT(3)=' IONISATION    ELOSS= 15.418  '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      SCRPT(7)=' ROT 2-0       ELOSS=-0.043928'
      SCRPT(8)=' ROT 3-1       ELOSS=-0.072741'
      SCRPT(9)=' ROT 4-2       ELOSS=-0.10085 '
      SCRPT(10)=' ROT 5-3       ELOSS=-0.12797 '
      SCRPT(11)=' ROT 0-2       ELOSS= 0.043928'
      SCRPT(12)=' ROT 1-3       ELOSS= 0.072741'
      SCRPT(13)=' ROT 2-4+46+68 ELOSS= 0.10085 '
      SCRPT(14)=' ROT 3-5+57+79 ELOSS= 0.12797 ' 
      SCRPT(15)=' VIB V1 DJ=0   ELOSS= 0.515916'
      SCRPT(16)=' VIB V1 DJ=2   ELOSS= 0.568   '
      SCRPT(17)=' VIB 2V1       ELOSS= 1.00265 '
      SCRPT(18)=' VIB 3V1       ELOSS= 1.46083 '
      SCRPT(19)=' B3 SIG       DIS ELOSS= 8.00 '
      SCRPT(20)=' B3 SIG       DIS ELOSS= 9.00 '
      SCRPT(21)=' B3 SIG       DIS ELOSS= 9.50 '
      SCRPT(22)=' B3 SIG       DIS ELOSS=10.00 '
      SCRPT(23)=' B1SIG V=0    LY  ELOSS=11.189'
      SCRPT(24)=' B1SIG V=1    LY  ELOSS=11.353'
      SCRPT(25)=' B1SIG V=2    LY  ELOSS=11.512'
      SCRPT(26)=' B1SIG V=3    LY  ELOSS=11.666'
      SCRPT(27)=' B1SIG V=4    LY  ELOSS=11.817'
      SCRPT(28)=' B1SIG V=5    LY  ELOSS=11.963'
      SCRPT(29)=' B1SIG V=6    LY  ELOSS=12.105'
      SCRPT(30)=' B1SIG V=7    LY  ELOSS=12.244'
      SCRPT(31)=' B1SIG V=8    LY  ELOSS=12.378'
      SCRPT(32)=' B1SIG V=9    LY  ELOSS=12.509'
      SCRPT(33)=' B1SIG V=10   LY  ELOSS=12.636'
      SCRPT(34)=' B1SIG V=11   LY  ELOSS=12.759'
      SCRPT(35)=' B1SIG V=12   LY  ELOSS=12.878'
      SCRPT(36)=' B1SIG V=13   LY  ELOSS=12.994'
      SCRPT(37)=' B1SIG V=14   LY  ELOSS=13.106'
      SCRPT(38)=' B1SIG V=15   LY  ELOSS=13.216'
      SCRPT(39)=' B1SIG V=16   LY  ELOSS=13.320'
      SCRPT(40)=' B1SIG V=17   LY  ELOSS=13.422'
      SCRPT(41)=' B1SIG V=18   LY  ELOSS=13.521'
      SCRPT(42)=' B1SIG V=19   LY  ELOSS=13.617'
      SCRPT(43)=' B1SIG V=20   LY  ELOSS=13.709'
      SCRPT(44)=' B1SIG V=21   LY  ELOSS=13.798'
      SCRPT(45)=' B1SIG V=22   LY  ELOSS=13.884'
      SCRPT(46)=' B1SIG V=23   LY  ELOSS=13.967'
      SCRPT(47)=' B1SIG V=24   LY  ELOSS=14.047'
      SCRPT(48)=' B1SIG V=25   LY  ELOSS=14.124'
      SCRPT(49)=' B1SIG V=26   LY  ELOSS=14.197'
      SCRPT(50)=' B1SIG V=27   LY  ELOSS=14.268'
      SCRPT(51)=' B1SIG V=28   LY  ELOSS=14.335'
      SCRPT(52)=' B1SIG V=29   LY  ELOSS=14.399'
      SCRPT(53)=' B1SIG V=30   LY  ELOSS=14.458'
      SCRPT(54)=' B1SIG V=31   LY  ELOSS=14.514'
      SCRPT(55)=' B1SIG V=32   LY  ELOSS=14.564'
      SCRPT(56)=' B1SIG V=33   LY  ELOSS=14.608'
      SCRPT(57)=' B1SIG V=34   LY  ELOSS=14.644'
      SCRPT(58)=' B1SIG V=35   LY  ELOSS=14.668'
      SCRPT(59)=' B1SIG V=36   LY  ELOSS=14.678'
      SCRPT(60)=' C1 PI V=0    WR  ELOSS=12.285'
      SCRPT(61)=' C1 PI V=1    WR  ELOSS=12.571'
      SCRPT(62)=' C1 PI V=2    WR  ELOSS=12.840'
      SCRPT(63)=' C1 PI V=3    WR  ELOSS=13.094'
      SCRPT(64)=' C1 PI V=4    WR  ELOSS=13.332'
      SCRPT(65)=' C1 PI V=5    WR  ELOSS=13.553'
      SCRPT(66)=' C1 PI V=6    WR  ELOSS=13.758'
      SCRPT(67)=' C1 PI V=7    WR  ELOSS=13.947'
      SCRPT(68)=' C1 PI V=8    WR  ELOSS=14.119'
      SCRPT(69)=' C1 PI V=9    WR  ELOSS=14.273'
      SCRPT(70)=' C1 PI V=10   WR  ELOSS=14.408'
      SCRPT(71)=' C1 PI V=11   WR  ELOSS=14.522'
      SCRPT(72)=' C1 PI V=12   WR  ELOSS=14.611'
      SCRPT(73)=' C1 PI V=13   WR  ELOSS=14.672'
      SCRPT(74)=' C3 PI V=0-4  DIS ELOSS=11.779'
      SCRPT(75)=' C3 PI V=5-18 DIS ELOSS=13.100'
      SCRPT(76)=' A3SIG V=0-3  DIS ELOSS=11.793'
      SCRPT(77)=' A3SIG V=3-17 DIS ELOSS=12.684'
      SCRPT(78)=' E3SIG V=0-9  DIS ELOSS=13.253'
      SCRPT(79)=' EF1SIG V=0-5     ELOSS=12.301'
      SCRPT(80)=' EF1SIG V=6-19    ELOSS=12.841'
      SCRPT(81)=' B#1SIG V=0       ELOSS=13.698'
      SCRPT(82)=' B#1SIG V=1       ELOSS=13.931'
      SCRPT(83)=' B#1SIG V=2       ELOSS=14.144'
      SCRPT(84)=' B#1SIG V=3       ELOSS=14.333'
      SCRPT(85)=' B#1SIG V=4       ELOSS=14.494'
      SCRPT(86)=' B#1SIG V=5       ELOSS=14.613'
      SCRPT(87)=' B#1SIG V=6       ELOSS=14.651'
      SCRPT(88)=' B#1SIG V=7       ELOSS=14.664'
      SCRPT(89)=' B#1SIG V=8       ELOSS=14.672'
      SCRPT(90)=' D1 PI  V=0       ELOSS=13.994'
      SCRPT(91)=' D1 PI  V=1       ELOSS=14.270'
      SCRPT(92)=' D1 PI  V=2       ELOSS=14.530'
      SCRPT(93)=' D1 PI  V=3   DIS ELOSS=14.775'
      SCRPT(94)=' D1 PI  V=4   DIS ELOSS=15.003'
      SCRPT(95)=' D1 PI  V=5   DIS ELOSS=15.218'
      SCRPT(96)=' D1 PI  V=6   DIS ELOSS=15.418'
      SCRPT(97)=' D1 PI  V=7   DIS ELOSS=15.602'
      SCRPT(98)=' D1 PI  V=8   DIS ELOSS=15.772'
      SCRPT(99)=' D1 PI  V=9   DIS ELOSS=15.928'
      SCRPT(100)=' D1 PI  V=10  DIS ELOSS=16.068'
      SCRPT(101)=' D1 PI  V=11  DIS ELOSS=16.191'
      SCRPT(102)=' D1 PI  V=12  DIS ELOSS=16.299'
      SCRPT(103)=' D1 PI  V=13  DIS ELOSS=16.390'
      SCRPT(104)=' D1 PI  V=14  DIS ELOSS=16.462'
      SCRPT(105)=' D1 PI  V=15  DIS ELOSS=16.516'
      SCRPT(106)=' B##SIG V=0-6 DIS ELOSS=14.491'
      SCRPT(107)=' D#1 PI V=0-3 DIS ELOSS=14.609'
      SCRPT(108)=' 5P SIG 6P PI DIS ELOSS=14.899'
      SCRPT(109)=' 6P SIG 6P PI DIS ELOSS=15.060'
      SCRPT(110)=' 7P SIG 7P PI DIS ELOSS=15.150'
      SCRPT(111)=' CONTINUUM EX DIS EL0SS=15.300'
      SCRPT(112)=' PREDISS >IP  DIS ELOSS=15.800'
# 
c*****************************                    
       EN=-ESTEP/2.0           
#**************************                           
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP   
      IF(EN > EIN(1):
) :
       GAMMA1=(EMASS2+2.00*EN)/EMASS2
       GAMMA2=GAMMA1*GAMMA1
       BETA=math.sqrt(1.00-1.00/GAMMA2)
       BETA2=BETA*BETA
      # endIF 
#                                                                     
      DO 60 J=2,NELM                                                   
      IF(EN <= XELM(J):
) GO TO 70                                       
   60 CONTINUE                                                          
      J=NELM 
# ELASTIC MOMENTUM TRANSFER                                                          
   70 A=(YELM(J)-YELM(J-1))/(XELM(J)-XELM(J-1))                         
      B=(XELM(J-1)*YELM(J)-XELM(J)*YELM(J-1))/(XELM(J-1)-XELM(J))      
      QMOM=(A*EN+B)*1.0D-16   
# ELASTIC X-SECTION  
      A=(YELT(J)-YELT(J-1))/(XELM(J)-XELM(J-1))                         
      B=(XELM(J-1)*YELT(J)-XELM(J)*YELT(J-1))/(XELM(J-1)-XELM(J))      
      QELA=(A*EN+B)*1.0D-16
# ANGULAR DISTRIBUTION FACTOR ( OKRIMOVSKKY)
      A=(YEPS(J)-YEPS(J-1))/(XELM(J)-XELM(J-1))                         
      B=(XELM(J-1)*YEPS(J)-XELM(J)*YEPS(J-1))/(XELM(J-1)-XELM(J))      
      PQ2=A*EN+B             
      PQ1=0.5+(QELA-QMOM)/QELA
      IF(NANISO == 0):
 PEQEL(2,I)=0.5
      IF(NANISO == 1):
 PEQEL(2,I)=PQ1
      IF(NANISO == 2):
 PEQEL(2,I)=PQ2
      Q(2,I)=QELA
      IF(NANISO == 0):
 Q(2,I)=QMOM                                   
# GROSS IONISATION                                                      
      Q(3,I)=0.0  
      PEQEL(3,I)=0.50
      IF(NANISO == 2):
 PEQEL(3,I)=0.00
      IF(EN < E(3):
) GO TO 200    
      IF(EN > XION(NIOND):
) GO TO 121                                  
      DO 110 J=2,NIOND                                                  
      IF(EN <= XION(J):
) GO TO 120                                       
  110 CONTINUE                                                          
      J=NIOND                                                  
  120 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.D-16                    
      GO TO 122
# USE BORN-BETHE X-SECTION ABOVE XION(NIOND) EV
  121 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      Q(3,I)=CONST*(AM2*X1+C*X2)
  122 CONTINUE
# USE ANISOTROPIC SCATTERING FOR PRIMARY IONISATION ELECTRON FOR
# ENERGIES ABOVE 2 * IONISATION ENERGY
# ANISOTROPIC ANGULAR DISTRIBUTION SAME AS ELASTIC AT ENERGY OFFSET BY
# IONISATION ENERGY
      IF(EN <= (2.0*E(3):
)) GO TO 200
      PEQEL(3,I)=PEQEL(2,(I-IOFF))                       
# ATTCHMENT                                                            
  200 Q(4,I)=0.0
      QATT(4,I)=Q(4,I)
      PEQEL(4,I)=0.5
      IF(NANISO == 2):
 PEQEL(4,I)=0.0
# ROTATIONAL DEP# endANCE OF ATTACHMENT TO 2 SIGMAu
      IF(EN < (EATTTH-ERLVL(7):
)) GO TO 300
      Q(4,I)=AMPATT*5.00*FROT7*math.exp(-(EN-EATTTH+ERLVL(7))/EATTWD)
      IF(EN < (EATTTH-ERLVL(6):
)) GO TO 300
      Q(4,I)=Q(4,I)+AMPATT*3.96*FROT6*math.exp(-(EN-EATTTH+ERLVL(6))/EATTWD)
      IF(EN < (EATTTH-ERLVL(5):
)) GO TO 300
      Q(4,I)=Q(4,I)+AMPATT*3.15*FROT5*math.exp(-(EN-EATTTH+ERLVL(5))/EATTWD)
      IF(EN < (EATTTH-ERLVL(4):
)) GO TO 300
      Q(4,I)=Q(4,I)+AMPATT*2.50*FROT4*math.exp(-(EN-EATTTH+ERLVL(4))/EATTWD)
      IF(EN < (EATTTH-ERLVL(3):
)) GO TO 300
      Q(4,I)=Q(4,I)+AMPATT*1.99*FROT3*math.exp(-(EN-EATTTH+ERLVL(3))/EATTWD)
      IF(EN < (EATTTH-ERLVL(2):
)) GO TO 300
      Q(4,I)=Q(4,I)+AMPATT*1.58*FROT2*math.exp(-(EN-EATTTH+ERLVL(2))/EATTWD)
      IF(EN < (EATTTH-ERLVL(1):
)) GO TO 300
      Q(4,I)=Q(4,I)+AMPATT*1.26*FROT1*math.exp(-(EN-EATTTH+ERLVL(1))/EATTWD)
      IF(EN < EATTTH):
 GO TO 300
      Q(4,I)=Q(4,I)+AMPATT*FROT0*math.exp(-(EN-EATTTH)/EATTWD)
      IF(EN < XATT(1):
) GO TO 300
# ATTACHMENT TO 2 SIGMAg   
      IF(EN > XATT(NATT1):
) GO TO 250                                   
      DO 210 J=2,NATT1                                                  
      IF(EN <= XATT(J):
) GO TO 220  
  210 CONTINUE                                                          
      J=NATT1                                                           
  220 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))                         
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))       
      Q(4,I)=Q(4,I)+(A*EN+B)*1.D-16                 
# HIGH ENERGY ATTACHMENT TO 2 SIGMAg
  250 IF(EN <= EATTTH1) GO TO 300
      Q(4,I)=Q(4,I)+AMPATT1*math.exp(-(EN-EATTTH1)/EATTWD1)
# COUNTING IONISATION ( SET EQUAL TO GROSS IONISATION)         
  300 QATT(1,I)=Q(4,I)         
      Q(5,I)=Q(3,I)               
      PEQEL(5,I)=PEQEL(3,I)                                  
      Q(6,I)=0.0 
#
      DO 1005 NL=1,NIN
      QIN(NL,I)=0.00
      PEQIN(NL,I)=0.50
      IF(NANISO == 2):
 :
       PEQIN(NL,I)=0.00  
      # endIF
 1005 CONTINUE                                                     
#--------------------------------------------------------------------- 
#                    SUPERELASTIC 2-0
      IF(EN <= 0.0):
 GO TO 1100
      IF(EN > XROT0(NROT0):
) GO TO 1100
      DO 1010 J=2,NROT0
      IF((EN+EIN(5):
) <= XROT0(J)) GO TO 1020
 1010 CONTINUE
      J=NROT0
 1020 A=(YROT0(J)-YROT0(J-1))/(XROT0(J)-XROT0(J-1))                     
      B=(XROT0(J-1)*YROT0(J)-XROT0(J)*YROT0(J-1))/(XROT0(J-1)-XROT0(J))
      QIN(1,I)=FROT2*0.2*(EN+EIN(5))*(A*(EN+EIN(5))+B)*1.D-16/EN 
#                    SUPERELASTIC 3-1
 1100 IF(EN <= 0.0) GO TO 1200 
      IF(EN > XROT1(NROT1):
) GO TO 1200
      DO 1110 J=2,NROT1
      IF((EN+EIN(6):
) <= XROT1(J)) GO TO 1120
 1110 CONTINUE
      J=NROT1
 1120 A=(YROT1(J)-YROT1(J-1))/(XROT1(J)-XROT1(J-1))                     
      B=(XROT1(J-1)*YROT1(J)-XROT1(J)*YROT1(J-1))/(XROT1(J-1)-XROT1(J)) 
      QIN(2,I)=FROT3*(3.0/7.0)*(EN+EIN(6))*(A*(EN+EIN(6))+B)*1.D-16/EN 
#                    SUPERELASTIC 4-2
 1200 IF(EN <= 0.0) GO TO 1250
      IF(EN > XROT2(NROT2):
) GO TO 1250
      DO 1210 J=2,NROT2
      IF((EN+EIN(7):
) <= XROT2(J)) GO TO 1220
 1210 CONTINUE
      J=NROT2
 1220 A=(YROT2(J)-YROT2(J-1))/(XROT2(J)-XROT2(J-1))                     
      B=(XROT2(J-1)*YROT2(J)-XROT2(J)*YROT2(J-1))/(XROT2(J-1)-XROT2(J))
      QIN(3,I)=FROT4*(5.0/9.0)*(EN+EIN(7))*(A*(EN+EIN(7))+B)*1.D-16/EN 
#                    SUPERELASTIC 5-3 
 1250 IF(EN <= 0.0) GO TO 1290
      IF(EN > XROT3(NROT3):
) GO TO 1290
      DO 1260 J=2,NROT3
      IF((EN+EIN(8):
) <= XROT3(J)) GO TO 1270
 1260 CONTINUE
      J=NROT3
 1270 A=(YROT3(J)-YROT3(J-1))/(XROT3(J)-XROT3(J-1))                     
      B=(XROT3(J-1)*YROT3(J)-XROT3(J)*YROT3(J-1))/(XROT3(J-1)-XROT3(J))
      QIN(4,I)=FROT5*(7.0/11.)*(EN+EIN(8))*(A*(EN+EIN(8))+B)*1.D-16/EN 
#                      ROTATION 0-2 
 1290 IF(EN <= EIN(5)) GO TO 1400
      IF(EN > XROT0(NROT0):
) GO TO 1330                         
      DO 1310 J=2,NROT0                                                 
      IF(EN <= XROT0(J):
) GO TO 1320                                     
 1310 CONTINUE                                                          
      J=NROT0                                                           
 1320 A=(YROT0(J)-YROT0(J-1))/(XROT0(J)-XROT0(J-1))                     
      B=(XROT0(J-1)*YROT0(J)-XROT0(J)*YROT0(J-1))/(XROT0(J-1)-XROT0(J)) 
      QIN(5,I)=(A*EN+B)*1.D-16*FROT0        
      GO TO 2330 
 1330 QIN(5,I)=YROT0(NROT0)*1.D-16*FROT0*XROT0(NROT0)/EN  
 2330 IF(EN <= (2.0*EIN(5))) GO TO 1400
      PEQIN(5,I)=PEQEL(2,(I-IOFFN(5)))
#                        ROTATION 1-3                                   
 1400 IF(EN <= EIN(6)) GO TO 1401
      IF(EN > XROT1(NROT1):
) GO TO 1331                     
      DO 1311 J=2,NROT1                                                 
      IF(EN <= XROT1(J):
) GO TO 1321                                     
 1311 CONTINUE                                                          
      J=NROT1                                                           
 1321 A=(YROT1(J)-YROT1(J-1))/(XROT1(J)-XROT1(J-1))                     
      B=(XROT1(J-1)*YROT1(J)-XROT1(J)*YROT1(J-1))/(XROT1(J-1)-XROT1(J)) 
      QIN(6,I)=(A*EN+B)*1.D-16*FROT1           
      GO TO 2331
 1331 QIN(6,I)=YROT1(NROT1)*1.D-16*FROT1*XROT1(NROT1)/EN         
 2331 IF(EN <= (2.0*EIN(6))) GO TO 1401
      PEQIN(6,I)=PEQEL(2,(I-IOFFN(6)))
#                      ROTATION 2-4 + 4-6 + 6-8
# USED SCALED 2-4 XSECTION FOR 4-6 AND 6-8 
c ALSO SCALED FOR ENERGY LOSS BY 1.5 FOR 4-6 AND BY 2.0 FOR 6-8                              
 1401 IF(EN <= EIN(7)) GO TO 1402
      IF(EN > XROT2(NROT2):
) GO TO 1332                               
      DO 1312 J=2,NROT2                                                 
      IF(EN <= XROT2(J):
) GO TO 1322                                     
 1312 CONTINUE                                                          
      J=NROT2                                                           
 1322 A=(YROT2(J)-YROT2(J-1))/(XROT2(J)-XROT2(J-1))                     
      B=(XROT2(J-1)*YROT2(J)-XROT2(J)*YROT2(J-1))/(XROT2(J-1)-XROT2(J)) 
      QIN(7,I)=(A*EN+B)*1.D-16*(FROT2+FROT4*0.8*1.5+FROT6*0.5*2.0)    
      GO TO 2332
 1332 QIN(7,I)=YROT2(NROT2)*1.D-16*(FROT2+FROT4*0.8*1.5+FROT6*0.5*2.0)
      QIN(7,I)=QIN(7,I)*XROT2(NROT2)/EN   
 2332 IF(EN <= (2.0*EIN(7))) GO TO 1402
      PEQIN(7,I)=PEQEL(2,(I-IOFFN(7)))
#                        ROTATION 3-5 + 5-7 + 7-9
# USED SCALED 3-5 XSECTION FOR 5-7 AND 7-9 
# ALSO SCALED FOR ENERGY LOSS BY 1.4 FOR 5-7 AND 1.8 FOR 7-9     
 1402 IF(EN <= EIN(8)) GO TO 1403 
      IF(EN > XROT3(NROT3):
) GO TO 1333                        
      DO 1313 J=2,NROT3                                                 
      IF(EN <= XROT3(J):
) GO TO 1323                                     
 1313 CONTINUE                                                          
      J=NROT3                                                           
 1323 A=(YROT3(J)-YROT3(J-1))/(XROT3(J)-XROT3(J-1))                     
      B=(XROT3(J-1)*YROT3(J)-XROT3(J)*YROT3(J-1))/(XROT3(J-1)-XROT3(J)) 
      QIN(8,I)=(A*EN+B)*1.D-16*(FROT3+FROT5*0.8*1.4+FROT7*0.5*1.8)   
      GO TO 2333
 1333 QIN(8,I)=YROT3(NROT3)*1.D-16*(FROT3+FROT5*0.8*1.4+FROT7*0.5*1.8)
      QIN(8,I)=QIN(8,I)*XROT3(NROT3)/EN
 2333 IF(EN <= (2.0*EIN(8))) GO TO 1403
      PEQIN(8,I)=PEQEL(2,(I-IOFFN(8)))
#-----------------------------------------------------------------------
# VIBRATION  V1   WITH DJ=0
 1403 IF(EN <= EIN(9)) GO TO 304  
      IF(EN > XVIB1(NVIB1):
) GO TO 303                         
      DO 301 J=2,NVIB1                                                  
      IF(EN <= XVIB1(J):
) GO TO 302                                      
  301 CONTINUE                                                          
      J=NVIB1                                                           
  302 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J)) 
      QIN(9,I)=(A*EN+B)*1.D-16        
      GO TO 1303
  303 QIN(9,I)=YVIB1(NVIB1)*1.D-16*XVIB1(NVIB1)/EN
 1303 IF(EN <= (2.0*EIN(9))) GO TO 304 
      PEQIN(9,I)=PEQEL(2,(I-IOFFN(9)))
#                      
#  VIBRATION  V1   WITH DJ=2                                               
  304 IF(EN <= EIN(10)) GO TO 308    
      IF(EN > XVIB2(NVIB2):
) GO TO 307                               
      DO 305 J=2,NVIB2                                                  
      IF(EN <= XVIB2(J):
) GO TO 306                                      
  305 CONTINUE                                                          
      J=NVIB2                                                           
  306 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J)) 
      QIN(10,I)=(A*EN+B)*1.D-16               
      GO TO 1307
  307 QIN(10,I)=YVIB2(NVIB2)*1.D-16*XVIB2(NVIB2)/EN   
 1307 IF(EN <= (2.0*EIN(10))) GO TO 308 
      PEQIN(10,I)=PEQEL(2,(I-IOFFN(10)))
#            
# VIBRATION V2                                                         
  308 IF(EN <= EIN(11)) GO TO 312 
      IF(EN > XVIB3(NVIB3):
) GO TO 311                       
      DO 309 J=2,NVIB3                                                  
      IF(EN <= XVIB3(J):
) GO TO 310                                      
  309 CONTINUE                                                          
      J=NVIB3                                                           
  310 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J)) 
      QIN(11,I)=(A*EN+B)*1.D-16
      GO TO 2311
  311 QIN(11,I)=YVIB3(NVIB3)*1.D-16*XVIB3(NVIB3)/EN  
 2311 IF(EN <= (2.0*EIN(11))) GO TO 312 
      PEQIN(11,I)=PEQEL(2,(I-IOFFN(11)))
#
# VIBRATION V3                                       
  312 IF(EN <= EIN(12)) GO TO 316 
      IF(EN > XVIB4(NVIB4):
) GO TO 315                               
      DO 313 J=2,NVIB4                                                  
      IF(EN <= XVIB4(J):
) GO TO 314                                      
  313 CONTINUE                                                          
      J=NVIB4                                                           
  314 A=(YVIB4(J)-YVIB4(J-1))/(XVIB4(J)-XVIB4(J-1))                     
      B=(XVIB4(J-1)*YVIB4(J)-XVIB4(J)*YVIB4(J-1))/(XVIB4(J-1)-XVIB4(J)) 
      QIN(12,I)=(A*EN+B)*1.D-16       
      GO TO 1315
  315 QIN(12,I)=YVIB4(NVIB4)*1.D-16*XVIB4(NVIB4)/EN      
 1315 IF(EN <= (2.0*EIN(12))) GO TO 316 
      PEQIN(12,2)=PEQEL(2,(I-IOFFN(12)))
#        
#  B3 SIGMA DISSOCIATION ELOSS=8.0EV                        
  316 IF(EN <= EIN(13)) GO TO 320
      IF(EN > XB3S1(NB3S1):
) GO TO 320 
      DO 317 J=2,NB3S1                                                  
      IF(EN <= XB3S1(J):
) GO TO 318                                      
  317 CONTINUE                                                          
      J=NB3S1                                                           
  318 A=(YB3S1(J)-YB3S1(J-1))/(XB3S1(J)-XB3S1(J-1))                     
      B=(XB3S1(J-1)*YB3S1(J)-XB3S1(J)*YB3S1(J-1))/(XB3S1(J-1)-XB3S1(J)) 
      QIN(13,I)=(A*EN+B)*1.D-16
      IF(EN <= (2.0*EIN(13):
)) GO TO 320 
      PEQIN(13,2)=PEQEL(2,(I-IOFFN(13)))
#       
#  B3 SIGMA DISSOCIATION ELOSS=9.0EV                                               
  320 IF(EN <= EIN(14)) GO TO 324  
      IF(EN > XB3S2(NB3S2):
) GO TO 324                               
      DO 321 J=2,NB3S2                                                  
      IF(EN <= XB3S2(J):
) GO TO 322                                      
  321 CONTINUE                                                          
      J=NB3S2                                                           
  322 A=(YB3S2(J)-YB3S2(J-1))/(XB3S2(J)-XB3S2(J-1))                     
      B=(XB3S2(J-1)*YB3S2(J)-XB3S2(J)*YB3S2(J-1))/(XB3S2(J-1)-XB3S2(J)) 
      QIN(14,I)=(A*EN+B)*1.D-16
      IF(EN <= (2.0*EIN(14):
)) GO TO 324 
      PEQIN(14,2)=PEQEL(2,(I-IOFFN(14)))
#                                 
# B3 SIGMA DISSOCIATION ELOSS=9.5EV
  324 IF(EN <= EIN(15)) GO TO 328 
      IF(EN > XB3S3(NB3S3):
) GO TO 328                               
      DO 325 J=2,NB3S3                                                  
      IF(EN <= XB3S3(J):
) GO TO 326                                      
  325 CONTINUE                                                          
      J=NB3S3                                                           
  326 A=(YB3S3(J)-YB3S3(J-1))/(XB3S3(J)-XB3S3(J-1))                     
      B=(XB3S3(J-1)*YB3S3(J)-XB3S3(J)*YB3S3(J-1))/(XB3S3(J-1)-XB3S3(J)) 
      QIN(15,I)=(A*EN+B)*1.D-16   
      IF(EN <= (2.0*EIN(15):
)) GO TO 328 
      PEQIN(15,2)=PEQEL(2,(I-IOFFN(15)))
#                                                                       
# B3 SIGMA DISSOCIATION ELOSS=10.0EV 
# SCALED BY 1/E**3 ABOVE XB3S4(NB3S4) EV
  328 IF(EN <= EIN(16)) GO TO 332 
      IF(EN > XB3S4(NB3S4):
) GO TO 331                               
      DO 329 J=2,NB3S4                                                  
      IF(EN <= XB3S4(J):
) GO TO 330                                      
  329 CONTINUE                                                          
      J=NB3S4                                                           
  330 A=(YB3S4(J)-YB3S4(J-1))/(XB3S4(J)-XB3S4(J-1))                     
      B=(XB3S4(J-1)*YB3S4(J)-XB3S4(J)*YB3S4(J-1))/(XB3S4(J-1)-XB3S4(J)) 
      QIN(16,I)=(A*EN+B)*1.D-16   
      GO TO 3331
  331 QIN(16,I)=YB3S4(NB3S4)*1.D-16*(XB3S4(NB3S4)/EN)**3
 3331 IF(EN <= (2.0*EIN(16))) GO TO 332 
      PEQIN(16,2)=PEQEL(2,(I-IOFFN(16)))
#   LYMAN BANDS FOR VIB=0 TO 36    B1 SIGMA--- GROUND STATE             
#   DIPOLE ALLOWED  
# V=0                                                           
  332 IF(EN <= EIN(17)) GO TO 333
      QIN(17,I)=.0016884/(EIN(17)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(17)))-BETA2)*BBCONST*EN/(EN+EIN(17)+BEF(1))
      IF(QIN(17,I):
 < 0.0) QIN(17,I)=0.0
      IF(EN <= (2.0*EIN(17):
)) GO TO 333
      PEQIN(17,I)=PEQEL(2,(I-IOFFN(17)))
# V=1 B1 SIGMA
  333 IF(EN <= EIN(18)) GO TO 334
      QIN(18,I)=.005782/(EIN(18)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(18)))-BETA2)*BBCONST*EN/(EN+EIN(18)+BEF(1))
      IF(QIN(18,I):
 < 0.0) QIN(18,I)=0.0
      IF(EN <= (2.0*EIN(18):
)) GO TO 334
      PEQIN(18,I)=PEQEL(2,(I-IOFFN(18)))
# V=2 B1 SIGMA
  334 IF(EN <= EIN(19)) GO TO 335
      QIN(19,I)=.011536/(EIN(19)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(19)))-BETA2)*BBCONST*EN/(EN+EIN(19)+BEF(1))
      IF(QIN(19,I):
 < 0.0) QIN(19,I)=0.0
      IF(EN <= (2.0*EIN(18):
)) GO TO 335
      PEQIN(19,I)=PEQEL(2,(I-IOFFN(19)))
# V=3 B1 SIGMA
  335 IF(EN <= EIN(20)) GO TO 336
      QIN(20,I)=.017531/(EIN(20)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(20)))-BETA2)*BBCONST*EN/(EN+EIN(20)+BEF(1))
      IF(QIN(20,I):
 < 0.0) QIN(20,I)=0.0
      IF(EN <= (2.0*EIN(20):
)) GO TO 336
      PEQIN(20,I)=PEQEL(2,(I-IOFFN(20)))
# V=4 B1 SIGMA
  336 IF(EN <= EIN(21)) GO TO 337
      QIN(21,I)=.022477/(EIN(21)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(21)))-BETA2)*BBCONST*EN/(EN+EIN(21)+BEF(1))
      IF(QIN(21,I):
 < 0.0) QIN(21,I)=0.0
      IF(EN <= (2.0*EIN(21):
)) GO TO 337
      PEQIN(21,I)=PEQEL(2,(I-IOFFN(21)))
# V=5 B1 SIGMA
  337 IF(EN <= EIN(22)) GO TO 338
      QIN(22,I)=.025688/(EIN(22)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(22)))-BETA2)*BBCONST*EN/(EN+EIN(22)+BEF(1))
      IF(QIN(22,I):
 < 0.0) QIN(22,I)=0.0
      IF(EN <= (2.0*EIN(22):
)) GO TO 338
      PEQIN(22,I)=PEQEL(2,(I-IOFFN(22)))
# V=6 B1 SIGMA
  338 IF(EN <= EIN(23)) GO TO 339
      QIN(23,I)=.027021/(EIN(23)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(23)))-BETA2)*BBCONST*EN/(EN+EIN(23)+BEF(1))
      IF(QIN(23,I):
 < 0.0) QIN(23,I)=0.0
      IF(EN <= (2.0*EIN(23):
)) GO TO 339
      PEQIN(23,I)=PEQEL(2,(I-IOFFN(23)))
# V=7 B1 SIGMA
  339 IF(EN <= EIN(24)) GO TO 340
      QIN(24,I)=.026731/(EIN(24)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(24)))-BETA2)*BBCONST*EN/(EN+EIN(24)+BEF(1))
      IF(QIN(24,I):
 < 0.0) QIN(24,I)=0.0
      IF(EN <= (2.0*EIN(24):
)) GO TO 340
      PEQIN(24,I)=PEQEL(2,(I-IOFFN(24)))
# V=8 B1 SIGMA
  340 IF(EN <= EIN(25)) GO TO 341
      QIN(25,I)=.025233/(EIN(25)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(25)))-BETA2)*BBCONST*EN/(EN+EIN(25)+BEF(1))
      IF(QIN(25,I):
 < 0.0) QIN(25,I)=0.0
      IF(EN <= (2.0*EIN(25):
)) GO TO 341
      PEQIN(25,I)=PEQEL(2,(I-IOFFN(25)))
# V=9 B1 SIGMA
  341 IF(EN <= EIN(26)) GO TO 342
      QIN(26,I)=.022980/(EIN(26)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(26)))-BETA2)*BBCONST*EN/(EN+EIN(26)+BEF(1))
      IF(QIN(26,I):
 < 0.0) QIN(26,I)=0.0
      IF(EN <= (2.0*EIN(26):
)) GO TO 342
      PEQIN(26,I)=PEQEL(2,(I-IOFFN(26)))
# V=10 B1 SIGMA
  342 IF(EN <= EIN(27)) GO TO 343
      QIN(27,I)=.020362/(EIN(27)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(27)))-BETA2)*BBCONST*EN/(EN+EIN(27)+BEF(1))
      IF(QIN(27,I):
 < 0.0) QIN(27,I)=0.0
      IF(EN <= (2.0*EIN(27):
)) GO TO 343
      PEQIN(27,I)=PEQEL(2,(I-IOFFN(27)))
# V=11 B1 SIGMA
  343 IF(EN <= EIN(28)) GO TO 344
      QIN(28,I)=.017653/(EIN(28)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(28)))-BETA2)*BBCONST*EN/(EN+EIN(28)+BEF(1))
      IF(QIN(28,I):
 < 0.0) QIN(28,I)=0.0
      IF(EN <= (2.0*EIN(28):
)) GO TO 344
      PEQIN(28,I)=PEQEL(2,(I-IOFFN(28)))
# V=12 B1 SIGMA
  344 IF(EN <= EIN(29)) GO TO 345
      QIN(29,I)=.015054/(EIN(29)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(29)))-BETA2)*BBCONST*EN/(EN+EIN(29)+BEF(1))
      IF(QIN(29,I):
 < 0.0) QIN(29,I)=0.0
      IF(EN <= (2.0*EIN(29):
)) GO TO 345
      PEQIN(29,I)=PEQEL(2,(I-IOFFN(29)))
# V=13 B1 SIGMA
  345 IF(EN <= EIN(30)) GO TO 346
      QIN(30,I)=.012678/(EIN(30)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(30)))-BETA2)*BBCONST*EN/(EN+EIN(30)+BEF(1))
      IF(QIN(30,I):
 < 0.0) QIN(30,I)=0.0
      IF(EN <= (2.0*EIN(30):
)) GO TO 346
      PEQIN(30,I)=PEQEL(2,(I-IOFFN(30)))
# V=14 B1 SIGMA
  346 IF(EN <= EIN(31)) GO TO 347
      QIN(31,I)=.010567/(EIN(31)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(31)))-BETA2)*BBCONST*EN/(EN+EIN(31)+BEF(1))
      IF(QIN(31,I):
 < 0.0) QIN(31,I)=0.0
      IF(EN <= (2.0*EIN(31):
)) GO TO 347
      PEQIN(31,I)=PEQEL(2,(I-IOFFN(31)))
# V=15 B1 SIGMA
  347 IF(EN <= EIN(32)) GO TO 348
      QIN(32,I)=.008746/(EIN(32)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(32)))-BETA2)*BBCONST*EN/(EN+EIN(32)+BEF(1))
      IF(QIN(32,I):
 < 0.0) QIN(32,I)=0.0
      IF(EN <= (2.0*EIN(32):
)) GO TO 348
      PEQIN(32,I)=PEQEL(2,(I-IOFFN(32)))
# V=16 B1 SIGMA
  348 IF(EN <= EIN(33)) GO TO 349
      QIN(33,I)=.007201/(EIN(33)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(33)))-BETA2)*BBCONST*EN/(EN+EIN(33)+BEF(1))
      IF(QIN(33,I):
 < 0.0) QIN(33,I)=0.0
      IF(EN <= (2.0*EIN(33):
)) GO TO 349
      PEQIN(33,I)=PEQEL(2,(I-IOFFN(33)))
# V=17 B1 SIGMA
  349 IF(EN <= EIN(34)) GO TO 350
      QIN(34,I)=.005909/(EIN(34)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(34)))-BETA2)*BBCONST*EN/(EN+EIN(34)+BEF(1))
      IF(QIN(34,I):
 < 0.0) QIN(34,I)=0.0
      IF(EN <= (2.0*EIN(34):
)) GO TO 350
      PEQIN(34,I)=PEQEL(2,(I-IOFFN(34)))
# V=18 B1 SIGMA
  350 IF(EN <= EIN(35)) GO TO 351
      QIN(35,I)=.004838/(EIN(35)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(35)))-BETA2)*BBCONST*EN/(EN+EIN(35)+BEF(1))
      IF(QIN(35,I):
 < 0.0) QIN(35,I)=0.0
      IF(EN <= (2.0*EIN(35):
)) GO TO 351
      PEQIN(35,I)=PEQEL(2,(I-IOFFN(35)))
# V=19 B1 SIGMA
  351 IF(EN <= EIN(36)) GO TO 352
      QIN(36,I)=.003956/(EIN(36)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(36)))-BETA2)*BBCONST*EN/(EN+EIN(36)+BEF(1))
      IF(QIN(36,I):
 < 0.0) QIN(36,I)=0.0
      IF(EN <= (2.0*EIN(36):
)) GO TO 352
      PEQIN(36,I)=PEQEL(2,(I-IOFFN(36)))
# V=20 B1 SIGMA
  352 IF(EN <= EIN(37)) GO TO 353
      QIN(37,I)=.003233/(EIN(37)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(37)))-BETA2)*BBCONST*EN/(EN+EIN(37)+BEF(1))
      IF(QIN(37,I):
 < 0.0) QIN(37,I)=0.0
      IF(EN <= (2.0*EIN(37):
)) GO TO 353
      PEQIN(37,I)=PEQEL(2,(I-IOFFN(37)))
# V=21 B1 SIGMA
  353 IF(EN <= EIN(38)) GO TO 354
      QIN(38,I)=.002644/(EIN(38)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(38)))-BETA2)*BBCONST*EN/(EN+EIN(38)+BEF(1))
      IF(QIN(38,I):
 < 0.0) QIN(38,I)=0.0
      IF(EN <= (2.0*EIN(38):
)) GO TO 354
      PEQIN(38,I)=PEQEL(2,(I-IOFFN(38)))
# V=22 B1 SIGMA
  354 IF(EN <= EIN(39)) GO TO 355
      QIN(39,I)=.002165/(EIN(39)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(39)))-BETA2)*BBCONST*EN/(EN+EIN(39)+BEF(1))
      IF(QIN(39,I):
 < 0.0) QIN(39,I)=0.0
      IF(EN <= (2.0*EIN(39):
)) GO TO 355
      PEQIN(39,I)=PEQEL(2,(I-IOFFN(39)))
# V=23 B1 SIGMA
  355 IF(EN <= EIN(40)) GO TO 356
      QIN(40,I)=.001775/(EIN(40)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(40)))-BETA2)*BBCONST*EN/(EN+EIN(40)+BEF(1))
      IF(QIN(40,I):
 < 0.0) QIN(40,I)=0.0
      IF(EN <= (2.0*EIN(40):
)) GO TO 356
      PEQIN(40,I)=PEQEL(2,(I-IOFFN(40)))
# V=24 B1 SIGMA
  356 IF(EN <= EIN(41)) GO TO 357
      QIN(41,I)=.001457/(EIN(41)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(41)))-BETA2)*BBCONST*EN/(EN+EIN(41)+BEF(1))
      IF(QIN(41,I):
 < 0.0) QIN(41,I)=0.0
      IF(EN <= (2.0*EIN(41):
)) GO TO 357
      PEQIN(41,I)=PEQEL(2,(I-IOFFN(41)))
# V=25 B1 SIGMA
  357 IF(EN <= EIN(42)) GO TO 358
      QIN(42,I)=.001199/(EIN(42)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(42)))-BETA2)*BBCONST*EN/(EN+EIN(42)+BEF(1))
      IF(QIN(42,I):
 < 0.0) QIN(42,I)=0.0
      IF(EN <= (2.0*EIN(42):
)) GO TO 358
      PEQIN(42,I)=PEQEL(2,(I-IOFFN(42)))
# V=26 B1 SIGMA
  358 IF(EN <= EIN(43)) GO TO 359
      QIN(43,I)=.0009882/(EIN(43)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(43)))-BETA2)*BBCONST*EN/(EN+EIN(43)+BEF(1))
      IF(QIN(43,I):
 < 0.0) QIN(43,I)=0.0
      IF(EN <= (2.0*EIN(43):
)) GO TO 359
      PEQIN(43,I)=PEQEL(2,(I-IOFFN(43)))
# V=27 B1 SIGMA
  359 IF(EN <= EIN(44)) GO TO 360
      QIN(44,I)=.0008153/(EIN(44)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(44)))-BETA2)*BBCONST*EN/(EN+EIN(44)+BEF(1))
      IF(QIN(44,I):
 < 0.0) QIN(44,I)=0.0
      IF(EN <= (2.0*EIN(44):
)) GO TO 360
      PEQIN(44,I)=PEQEL(2,(I-IOFFN(44)))
# V=28 B1 SIGMA
  360 IF(EN <= EIN(45)) GO TO 361
      QIN(45,I)=.0006738/(EIN(45)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(45)))-BETA2)*BBCONST*EN/(EN+EIN(45)+BEF(1))
      IF(QIN(45,I):
 < 0.0) QIN(45,I)=0.0
      IF(EN <= (2.0*EIN(45):
)) GO TO 361
      PEQIN(45,I)=PEQEL(2,(I-IOFFN(45)))
# V=29 B1 SIGMA
  361 IF(EN <= EIN(46)) GO TO 362
      QIN(46,I)=.0005561/(EIN(46)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(46)))-BETA2)*BBCONST*EN/(EN+EIN(46)+BEF(1))
      IF(QIN(46,I):
 < 0.0) QIN(46,I)=0.0
      IF(EN <= (2.0*EIN(46):
)) GO TO 362
      PEQIN(46,I)=PEQEL(2,(I-IOFFN(46)))
# V=30 B1 SIGMA
  362 IF(EN <= EIN(47)) GO TO 363
      QIN(47,I)=.0004573/(EIN(47)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(47)))-BETA2)*BBCONST*EN/(EN+EIN(47)+BEF(1))
      IF(QIN(47,I):
 < 0.0) QIN(47,I)=0.0
      IF(EN <= (2.0*EIN(47):
)) GO TO 363
      PEQIN(47,I)=PEQEL(2,(I-IOFFN(47)))
# V=31 B1 SIGMA 
  363 IF(EN <= EIN(48)) GO TO 364
      QIN(48,I)=.0003731/(EIN(48)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(48)))-BETA2)*BBCONST*EN/(EN+EIN(48)+BEF(1))
      IF(QIN(48,I):
 < 0.0) QIN(48,I)=0.0
      IF(EN <= (2.0*EIN(48):
)) GO TO 364
      PEQIN(48,I)=PEQEL(2,(I-IOFFN(48)))
# V=32 B1 SIGMA 
  364 IF(EN <= EIN(49)) GO TO 365
      QIN(49,I)=.0002992/(EIN(49)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(49)))-BETA2)*BBCONST*EN/(EN+EIN(49)+BEF(1))
      IF(QIN(49,I):
 < 0.0) QIN(49,I)=0.0
      IF(EN <= (2.0*EIN(49):
)) GO TO 365
      PEQIN(49,I)=PEQEL(2,(I-IOFFN(49)))
# V=33 B1 SIGMA 
  365 IF(EN <= EIN(50)) GO TO 366
      QIN(50,I)=.0002309/(EIN(50)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(50)))-BETA2)*BBCONST*EN/(EN+EIN(50)+BEF(1))
      IF(QIN(50,I):
 < 0.0) QIN(50,I)=0.0
      IF(EN <= (2.0*EIN(50):
)) GO TO 366
      PEQIN(50,I)=PEQEL(2,(I-IOFFN(50)))
# V=34 B1 SIGMA 
  366 IF(EN <= EIN(51)) GO TO 367
      QIN(51,I)=.0001627/(EIN(51)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(51)))-BETA2)*BBCONST*EN/(EN+EIN(51)+BEF(1))
      IF(QIN(51,I):
 < 0.0) QIN(51,I)=0.0
      IF(EN <= (2.0*EIN(51):
)) GO TO 367
      PEQIN(51,I)=PEQEL(2,(I-IOFFN(51)))
# V=35 B1 SIGMA 
  367 IF(EN <= EIN(52)) GO TO 368
      QIN(52,I)=8.652D-5/(EIN(52)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(52)))-BETA2)*BBCONST*EN/(EN+EIN(52)+BEF(1))
      IF(QIN(52,I):
 < 0.0) QIN(52,I)=0.0
      IF(EN <= (2.0*EIN(52):
)) GO TO 368
      PEQIN(52,I)=PEQEL(2,(I-IOFFN(52)))
# V=36 B1 SIGMA 
  368 IF(EN <= EIN(53)) GO TO 369
      QIN(53,I)=2.256D-5/(EIN(53)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(53)))-BETA2)*BBCONST*EN/(EN+EIN(53)+BEF(1))
      IF(QIN(53,I):
 < 0.0) QIN(53,I)=0.0
      IF(EN <= (2.0*EIN(53):
)) GO TO 369
      PEQIN(53,I)=PEQEL(2,(I-IOFFN(53)))
# V=0  C1 PI    
  369 IF(EN <= EIN(54)) GO TO 370
      QIN(54,I)=.0476000/(EIN(54)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(54)))-BETA2)*BBCONST*EN/(EN+EIN(54)+BEF(2))
      IF(QIN(54,I):
 < 0.0) QIN(54,I)=0.0
      IF(EN <= (2.0*EIN(54):
)) GO TO 370
      PEQIN(54,I)=PEQEL(2,(I-IOFFN(54)))
# V=1  C1 PI    
  370 IF(EN <= EIN(55)) GO TO 371
      QIN(55,I)=.0728400/(EIN(55)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(55)))-BETA2)*BBCONST*EN/(EN+EIN(55)+BEF(2))
      IF(QIN(55,I):
 < 0.0) QIN(55,I)=0.0
      IF(EN <= (2.0*EIN(55):
)) GO TO 371
      PEQIN(55,I)=PEQEL(2,(I-IOFFN(55)))
# V=2  C1 PI    
  371 IF(EN <= EIN(56)) GO TO 372
      QIN(56,I)=.0698200/(EIN(56)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(56)))-BETA2)*BBCONST*EN/(EN+EIN(56)+BEF(2))
      IF(QIN(56,I):
 < 0.0) QIN(56,I)=0.0
      IF(EN <= (2.0*EIN(56):
)) GO TO 372
      PEQIN(56,I)=PEQEL(2,(I-IOFFN(56)))
# V=3  C1 PI    
  372 IF(EN <= EIN(57)) GO TO 373
      QIN(57,I)=.0547200/(EIN(57)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(57)))-BETA2)*BBCONST*EN/(EN+EIN(57)+BEF(2))
      IF(QIN(57,I):
 < 0.0) QIN(57,I)=0.0
      IF(EN <= (2.0*EIN(57):
)) GO TO 373
      PEQIN(57,I)=PEQEL(2,(I-IOFFN(57)))
# V=4  C1 PI    
  373 IF(EN <= EIN(58)) GO TO 374
      QIN(58,I)=.0387400/(EIN(58)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(58)))-BETA2)*BBCONST*EN/(EN+EIN(58)+BEF(2))
      IF(QIN(58,I):
 < 0.0) QIN(58,I)=0.0
      IF(EN <= (2.0*EIN(58):
)) GO TO 374
      PEQIN(58,I)=PEQEL(2,(I-IOFFN(58)))
# V=5  C1 PI    
  374 IF(EN <= EIN(59)) GO TO 375
      QIN(59,I)=.0259800/(EIN(59)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(59)))-BETA2)*BBCONST*EN/(EN+EIN(59)+BEF(2))
      IF(QIN(59,I):
 < 0.0) QIN(59,I)=0.0
      IF(EN <= (2.0*EIN(59):
)) GO TO 375
      PEQIN(59,I)=PEQEL(2,(I-IOFFN(59)))
# V=6  C1 PI    
  375 IF(EN <= EIN(60)) GO TO 376
      QIN(60,I)=.0170000/(EIN(60)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(60)))-BETA2)*BBCONST*EN/(EN+EIN(60)+BEF(2))
      IF(QIN(60,I):
 < 0.0) QIN(60,I)=0.0
      IF(EN <= (2.0*EIN(60):
)) GO TO 376
      PEQIN(60,I)=PEQEL(2,(I-IOFFN(60)))
# V=7  C1 PI    
  376 IF(EN <= EIN(61)) GO TO 377
      QIN(61,I)=.0109900/(EIN(61)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(61)))-BETA2)*BBCONST*EN/(EN+EIN(61)+BEF(2))
      IF(QIN(61,I):
 < 0.0) QIN(61,I)=0.0
      IF(EN <= (2.0*EIN(61):
)) GO TO 377
      PEQIN(61,I)=PEQEL(2,(I-IOFFN(61)))
# V=8  C1 PI    
  377 IF(EN <= EIN(62)) GO TO 378
      QIN(62,I)=.0070980/(EIN(62)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(62)))-BETA2)*BBCONST*EN/(EN+EIN(62)+BEF(2))
      IF(QIN(62,I):
 < 0.0) QIN(62,I)=0.0
      IF(EN <= (2.0*EIN(62):
)) GO TO 378
      PEQIN(62,I)=PEQEL(2,(I-IOFFN(62)))
# V=9  C1 PI    
  378 IF(EN <= EIN(63)) GO TO 379
      QIN(63,I)=.0045920/(EIN(63)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(63)))-BETA2)*BBCONST*EN/(EN+EIN(63)+BEF(2))
      IF(QIN(63,I):
 < 0.0) QIN(63,I)=0.0
      IF(EN <= (2.0*EIN(63):
)) GO TO 379
      PEQIN(63,I)=PEQEL(2,(I-IOFFN(63)))
# V=10 C1 PI    
  379 IF(EN <= EIN(64)) GO TO 380
      QIN(64,I)=.0029760/(EIN(64)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(64)))-BETA2)*BBCONST*EN/(EN+EIN(64)+BEF(2))
      IF(QIN(64,I):
 < 0.0) QIN(64,I)=0.0
      IF(EN <= (2.0*EIN(64):
)) GO TO 380
      PEQIN(64,I)=PEQEL(2,(I-IOFFN(64)))
# V=11 C1 PI    
  380 IF(EN <= EIN(65)) GO TO 381
      QIN(65,I)=.0019090/(EIN(65)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(65)))-BETA2)*BBCONST*EN/(EN+EIN(65)+BEF(2))
      IF(QIN(65,I):
 < 0.0) QIN(65,I)=0.0
      IF(EN <= (2.0*EIN(65):
)) GO TO 381
      PEQIN(65,I)=PEQEL(2,(I-IOFFN(65)))
# V=12 C1 PI    
  381 IF(EN <= EIN(66)) GO TO 382
      QIN(66,I)=.0011710/(EIN(66)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(66)))-BETA2)*BBCONST*EN/(EN+EIN(66)+BEF(2))
      IF(QIN(66,I):
 < 0.0) QIN(66,I)=0.0
      IF(EN <= (2.0*EIN(66):
)) GO TO 382
      PEQIN(66,I)=PEQEL(2,(I-IOFFN(66)))
# V=13 C1 PI    
  382 IF(EN <= EIN(67)) GO TO 383
      QIN(67,I)=.0005590/(EIN(67)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(67)))-BETA2)*BBCONST*EN/(EN+EIN(67)+BEF(2))
      IF(QIN(67,I):
 < 0.0) QIN(67,I)=0.0
      IF(EN <= (2.0*EIN(67):
)) GO TO 383
      PEQIN(67,I)=PEQEL(2,(I-IOFFN(67)))
# C3PI V=0-4  METASTABLE LEVEL     FRANCK-CONDON FAC=0.6967
# SCALED BY 1/E**3 ABOVE XC3PI(NC3PI) EV
  383 IF(EN <= EIN(68)) GO TO 387 
      IF(EN > XC3PI(NC3PI):
) GO TO 386                               
      DO 384 J=2,NC3PI                                                  
      IF(EN <= XC3PI(J):
) GO TO 385                                      
  384 CONTINUE                                                          
      J=NC3PI                                                           
  385 A=(YC3PI(J)-YC3PI(J-1))/(XC3PI(J)-XC3PI(J-1))                     
      B=(XC3PI(J-1)*YC3PI(J)-XC3PI(J)*YC3PI(J-1))/(XC3PI(J-1)-XC3PI(J)) 
      QIN(68,I)=(A*EN+B)*1.D-16*0.6967
      GO TO 1386
  386 QIN(68,I)=YC3PI(NC3PI)*1.D-16*((XC3PI(NC3PI)/EN)**3)*0.6967
 1386 IF(EN <= (2.0*EIN(68))) GO TO 387
      PEQIN(68,I)=PEQEL(2,(I-IOFFN(68)))
# C3PI V=5-18 METASTABLE LEVEL     FRANCK-CONDON FAC=0.3033
# SCALED BY 1/E**3 ABOVE XC3PI(NC3PI) EV
  387 IF(EN <= EIN(69)) GO TO 391 
      IF(EN > XC3PI(NC3PI):
) GO TO 390                               
      DO 388 J=2,NC3PI                                                  
      IF(EN <= XC3PI(J):
) GO TO 389                                      
  388 CONTINUE                                                          
      J=NC3PI                                                           
  389 A=(YC3PI(J)-YC3PI(J-1))/(XC3PI(J)-XC3PI(J-1))                     
      B=(XC3PI(J-1)*YC3PI(J)-XC3PI(J)*YC3PI(J-1))/(XC3PI(J-1)-XC3PI(J)) 
      QIN(69,I)=(A*EN+B)*1.D-16*0.3033   
      GO TO 1390
  390 QIN(69,I)=YC3PI(NC3PI)*1.D-16*((XC3PI(NC3PI)/EN)**3)*0.3033
 1390 IF(EN <= (2.0*EIN(69))) GO TO 391
      PEQIN(69,I)=PEQEL(2,(I-IOFFN(69)))
# A3SG V=0-2                   FRANCK-CONDON FAC=0.6668
# SCALED BY 1/E**3 ABOVE XA3SG(NA3SG) EV
  391 IF(EN <= EIN(70)) GO TO 395 
      IF(EN > XA3SG(NA3SG):
) GO TO 394                               
      DO 392 J=2,NA3SG                                                  
      IF(EN <= XA3SG(J):
) GO TO 393                                      
  392 CONTINUE                                                          
      J=NA3SG                                                           
  393 A=(YA3SG(J)-YA3SG(J-1))/(XA3SG(J)-XA3SG(J-1))                     
      B=(XA3SG(J-1)*YA3SG(J)-XA3SG(J)*YA3SG(J-1))/(XA3SG(J-1)-XA3SG(J)) 
      QIN(70,I)=(A*EN+B)*1.D-16*0.6668   
      GO TO 1394
  394 QIN(70,I)=YA3SG(NA3SG)*1.D-16*((XA3SG(NA3SG)/EN)**3)*0.6668
 1394 IF(EN <= (2.0*EIN(70))) GO TO 395
      PEQIN(70,I)=PEQEL(2,(I-IOFFN(70)))
# A3SG V=3-17                  FRANCK-CONDON FAC=0.3332
# SCALED BY 1/E**3 ABOVE XA3SG(NA3SG) EV
  395 IF(EN <= EIN(71)) GO TO 399 
      IF(EN > XA3SG(NA3SG):
) GO TO 398                               
      DO 396 J=2,NA3SG                                                  
      IF(EN <= XA3SG(J):
) GO TO 397                                      
  396 CONTINUE                                                          
      J=NA3SG                                                           
  397 A=(YA3SG(J)-YA3SG(J-1))/(XA3SG(J)-XA3SG(J-1))                     
      B=(XA3SG(J-1)*YA3SG(J)-XA3SG(J)*YA3SG(J-1))/(XA3SG(J-1)-XA3SG(J)) 
      QIN(71,I)=(A*EN+B)*1.D-16*0.3332
      GO TO 1398
  398 QIN(71,I)=YA3SG(NA3SG)*1.D-16*((XA3SG(NA3SG)/EN)**3)*0.3332
 1398 IF(EN <= (2.0*EIN(71))) GO TO 399
      PEQIN(71,I)=PEQEL(2,(I-IOFFN(71)))
# E3SG V=0-9                                           
# SCALED BY 1/E**3 ABOVE XE3SG(NE3SG) EV
  399 IF(EN <= EIN(72)) GO TO 403 
      IF(EN > XE3SG(NE3SG):
) GO TO 402                               
      DO 400 J=2,NE3SG                                                  
      IF(EN <= XE3SG(J):
) GO TO 401                                      
  400 CONTINUE                                                          
      J=NE3SG                                                           
  401 A=(YE3SG(J)-YE3SG(J-1))/(XE3SG(J)-XE3SG(J-1))                     
      B=(XE3SG(J-1)*YE3SG(J)-XE3SG(J)*YE3SG(J-1))/(XE3SG(J-1)-XE3SG(J)) 
      QIN(72,I)=(A*EN+B)*1.D-16          
      GO TO 2402
  402 QIN(72,I)=YE3SG(NE3SG)*1.D-16*(XE3SG(NE3SG)/EN)**3        
 2402 IF(EN <= (2.0*EIN(72))) GO TO 403
      PEQIN(72,I)=PEQEL(2,(I-IOFFN(72)))
# EF1 SIGMA V=0-5                   FRANCK-CONDON FACTOR=0.4
# USE BORN SCALING ABOVE XEFSG(NEFSG)  EV
  403 IF(EN <= EIN(73)) GO TO 407 
      IF(EN > XEFSG(NEFSG):
) GO TO 406                               
      DO 404 J=2,NEFSG                                                  
      IF(EN <= XEFSG(J):
) GO TO 405                                      
  404 CONTINUE                                                          
      J=NEFSG                                                           
  405 A=(YEFSG(J)-YEFSG(J-1))/(XEFSG(J)-XEFSG(J-1))                     
      B=(XEFSG(J-1)*YEFSG(J)-XEFSG(J)*YEFSG(J-1))/(XEFSG(J-1)-XEFSG(J)) 
      QIN(73,I)=(A*EN+B)*1.D-16*0.4          
      GO TO 1406
  406 QIN(73,I)=.0089000/(EIN(73)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(73)))-BETA2)*BBCONST*EN/(EN+EIN(73)+BEF(3))
      IF(QIN(73,I):
 < 0.0) QIN(73,I)=0.0
 1406 IF(EN <= (2.0*EIN(73))) GO TO 407
      PEQIN(73,I)=PEQEL(2,(I-IOFFN(73)))
# EF1 SIGMA V=6-19                   FRANCK-CONDON FACTOR=0.6
# USE BORN SCALING ABOVE XEFSG(NEFSG) EV
  407 IF(EN <= EIN(74)) GO TO 411 
      IF(EN > XEFSG(NEFSG):
) GO TO 410                               
      DO 408 J=2,NEFSG                                                  
      IF(EN <= XEFSG(J):
) GO TO 409                                      
  408 CONTINUE                                                          
      J=NEFSG                                                           
  409 A=(YEFSG(J)-YEFSG(J-1))/(XEFSG(J)-XEFSG(J-1))                     
      B=(XEFSG(J-1)*YEFSG(J)-XEFSG(J)*YEFSG(J-1))/(XEFSG(J-1)-XEFSG(J)) 
      QIN(74,I)=(A*EN+B)*1.D-16*0.6          
      GO TO 1410
  410 QIN(74,I)=.0133000/(EIN(74)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(74)))-BETA2)*BBCONST*EN/(EN+EIN(74)+BEF(3))
      IF(QIN(74,I):
 < 0.0) QIN(74,I)=0.0
 1410 IF(EN <= (2.0*EIN(74))) GO TO 411
      PEQIN(74,I)=PEQEL(2,(I-IOFFN(74)))
# B#1 SIGMA V=0       
  411 IF(EN <= EIN(75)) GO TO 412
      QIN(75,I)=.003970/(EIN(75)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(75)))-BETA2)*BBCONST*EN/(EN+EIN(75)+BEF(4))
      IF(QIN(75,I):
 < 0.0) QIN(75,I)=0.0
      IF(EN <= (2.0*EIN(75):
)) GO TO 412
      PEQIN(75,I)=PEQEL(2,(I-IOFFN(75)))
# B#1 SIGMA V=1         
  412 IF(EN <= EIN(76)) GO TO 413
      QIN(76,I)=.008150/(EIN(76)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(76)))-BETA2)*BBCONST*EN/(EN+EIN(76)+BEF(4))
      IF(QIN(76,I):
 < 0.0) QIN(76,I)=0.0
      IF(EN <= (2.0*EIN(76):
)) GO TO 413
      PEQIN(76,I)=PEQEL(2,(I-IOFFN(76)))
# B#1 SIGMA V=2         
  413 IF(EN <= EIN(77)) GO TO 414
      QIN(77,I)=.009980/(EIN(77)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(77)))-BETA2)*BBCONST*EN/(EN+EIN(77)+BEF(4))
      IF(QIN(77,I):
 < 0.0) QIN(77,I)=0.0
      IF(EN <= (2.0*EIN(77):
)) GO TO 414
      PEQIN(77,I)=PEQEL(2,(I-IOFFN(77)))
# B#1 SIGMA V=3         
  414 IF(EN <= EIN(78)) GO TO 415
      QIN(78,I)=.009520/(EIN(78)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(78)))-BETA2)*BBCONST*EN/(EN+EIN(78)+BEF(4))
      IF(QIN(78,I):
 < 0.0) QIN(78,I)=0.0
      IF(EN <= (2.0*EIN(78):
)) GO TO 415
      PEQIN(78,I)=PEQEL(2,(I-IOFFN(78)))
# B#1 SIGMA V=4         
  415 IF(EN <= EIN(79)) GO TO 416
      QIN(79,I)=.007550/(EIN(79)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(79)))-BETA2)*BBCONST*EN/(EN+EIN(79)+BEF(4))
      IF(QIN(79,I):
 < 0.0) QIN(79,I)=0.0
      IF(EN <= (2.0*EIN(79):
)) GO TO 416
      PEQIN(79,I)=PEQEL(2,(I-IOFFN(79)))
# B#1 SIGMA V=5         
  416 IF(EN <= EIN(80)) GO TO 417
      QIN(80,I)=.004230/(EIN(80)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(80)))-BETA2)*BBCONST*EN/(EN+EIN(80)+BEF(4))
      IF(QIN(80,I):
 < 0.0) QIN(80,I)=0.0
      IF(EN <= (2.0*EIN(80):
)) GO TO 417
      PEQIN(80,I)=PEQEL(2,(I-IOFFN(80)))
# B#1 SIGMA V=6         
  417 IF(EN <= EIN(81)) GO TO 418
      QIN(81,I)=.000460/(EIN(81)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(81)))-BETA2)*BBCONST*EN/(EN+EIN(81)+BEF(4))
      IF(QIN(81,I):
 < 0.0) QIN(81,I)=0.0
      IF(EN <= (2.0*EIN(81):
)) GO TO 418
      PEQIN(81,I)=PEQEL(2,(I-IOFFN(81)))
# B#1 SIGMA V=7         
  418 IF(EN <= EIN(82)) GO TO 419
      QIN(82,I)=.000450/(EIN(82)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(82)))-BETA2)*BBCONST*EN/(EN+EIN(82)+BEF(4))
      IF(QIN(82,I):
 < 0.0) QIN(82,I)=0.0
      IF(EN <= (2.0*EIN(82):
)) GO TO 419
      PEQIN(82,I)=PEQEL(2,(I-IOFFN(82)))
# B#1 SIGMA V=8         
  419 IF(EN <= EIN(83)) GO TO 420
      QIN(83,I)=.000300/(EIN(83)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(83)))-BETA2)*BBCONST*EN/(EN+EIN(83)+BEF(4))
      IF(QIN(83,I):
 < 0.0) QIN(83,I)=0.0
      IF(EN <= (2.0*EIN(83):
)) GO TO 420
      PEQIN(83,I)=PEQEL(2,(I-IOFFN(83)))
# D1 PI     V=0         
  420 IF(EN <= EIN(84)) GO TO 421
      QIN(84,I)=.007750/(EIN(84)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(84)))-BETA2)*BBCONST*EN/(EN+EIN(84)+BEF(5))
      IF(QIN(84,I):
 < 0.0) QIN(84,I)=0.0
      IF(EN <= (2.0*EIN(85):
)) GO TO 421
      PEQIN(84,I)=PEQEL(2,(I-IOFFN(84)))
# D1 PI     V=1         
  421 IF(EN <= EIN(85)) GO TO 422
      QIN(85,I)=.013100/(EIN(85)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(85)))-BETA2)*BBCONST*EN/(EN+EIN(85)+BEF(5))
      IF(QIN(85,I):
 < 0.0) QIN(85,I)=0.0
      IF(EN <= (2.0*EIN(85):
)) GO TO 422
      PEQIN(85,I)=PEQEL(2,(I-IOFFN(85)))
# D1 PI     V=2         
  422 IF(EN <= EIN(86)) GO TO 423
      QIN(86,I)=.013670/(EIN(86)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(86)))-BETA2)*BBCONST*EN/(EN+EIN(86)+BEF(5))
      IF(QIN(86,I):
 < 0.0) QIN(86,I)=0.0
      IF(EN <= (2.0*EIN(86):
)) GO TO 423
      PEQIN(86,I)=PEQEL(2,(I-IOFFN(86)))
# D1 PI     V=3         
  423 IF(EN <= EIN(87)) GO TO 424
      QIN(87,I)=.011560/(EIN(87)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(87)))-BETA2)*BBCONST*EN/(EN+EIN(87)+BEF(5))
      IF(QIN(87,I):
 < 0.0) QIN(87,I)=0.0
      IF(EN <= (2.0*EIN(87):
)) GO TO 424
      PEQIN(87,I)=PEQEL(2,(I-IOFFN(87)))
# D1 PI     V=4         
  424 IF(EN <= EIN(88)) GO TO 425
      QIN(88,I)=.008730/(EIN(88)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(88)))-BETA2)*BBCONST*EN/(EN+EIN(88)+BEF(5))
      IF(QIN(88,I):
 < 0.0) QIN(88,I)=0.0
      IF(EN <= (2.0*EIN(88):
)) GO TO 425
      PEQIN(88,I)=PEQEL(2,(I-IOFFN(88)))
# D1 PI     V=5         
  425 IF(EN <= EIN(89)) GO TO 426
      QIN(89,I)=.006190/(EIN(89)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(89)))-BETA2)*BBCONST*EN/(EN+EIN(89)+BEF(5))
      IF(QIN(89,I):
 < 0.0) QIN(89,I)=0.0
      IF(EN <= (2.0*EIN(89):
)) GO TO 426
      PEQIN(89,I)=PEQEL(2,(I-IOFFN(89)))
# D1 PI     V=6         
  426 IF(EN <= EIN(90)) GO TO 427
      QIN(90,I)=.004280/(EIN(90)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(90)))-BETA2)*BBCONST*EN/(EN+EIN(90)+BEF(5))
      IF(QIN(90,I):
 < 0.0) QIN(90,I)=0.0
      IF(EN <= (2.0*EIN(90):
)) GO TO 427
      PEQIN(90,I)=PEQEL(2,(I-IOFFN(90)))
# D1 PI     V=7         
  427 IF(EN <= EIN(91)) GO TO 428
      QIN(91,I)=.002920/(EIN(91)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(91)))-BETA2)*BBCONST*EN/(EN+EIN(91)+BEF(5))
      IF(QIN(91,I):
 < 0.0) QIN(91,I)=0.0
      IF(EN <= (2.0*EIN(91):
)) GO TO 428
      PEQIN(91,I)=PEQEL(2,(I-IOFFN(91)))
# D1 PI     V=8         
  428 IF(EN <= EIN(92)) GO TO 429
      QIN(92,I)=.001960/(EIN(92)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(92)))-BETA2)*BBCONST*EN/(EN+EIN(92)+BEF(5))
      IF(QIN(92,I):
 < 0.0) QIN(92,I)=0.0
      IF(EN <= (2.0*EIN(92):
)) GO TO 429
      PEQIN(92,I)=PEQEL(2,(I-IOFFN(92)))
# D1 PI     V=9         
  429 IF(EN <= EIN(93)) GO TO 430
      QIN(93,I)=.001330/(EIN(93)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(93)))-BETA2)*BBCONST*EN/(EN+EIN(93)+BEF(5))
      IF(QIN(93,I):
 < 0.0) QIN(93,I)=0.0
      IF(EN <= (2.0*EIN(93):
)) GO TO 430
      PEQIN(93,I)=PEQEL(2,(I-IOFFN(93)))
# D1 PI     V=10        
  430 IF(EN <= EIN(94)) GO TO 431
      QIN(94,I)=.000910/(EIN(94)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(94)))-BETA2)*BBCONST*EN/(EN+EIN(94)+BEF(5))
      IF(QIN(94,I):
 < 0.0) QIN(94,I)=0.0
      IF(EN <= (2.0*EIN(94):
)) GO TO 431
      PEQIN(94,I)=PEQEL(2,(I-IOFFN(94)))
# D1 PI     V=11        
  431 IF(EN <= EIN(95)) GO TO 432
      QIN(95,I)=.000630/(EIN(95)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(95)))-BETA2)*BBCONST*EN/(EN+EIN(95)+BEF(5))
      IF(QIN(95,I):
 < 0.0) QIN(95,I)=0.0
      IF(EN <= (2.0*EIN(95):
)) GO TO 432
      PEQIN(95,I)=PEQEL(2,(I-IOFFN(95)))
# D1 PI     V=12        
  432 IF(EN <= EIN(96)) GO TO 433
      QIN(96,I)=.000430/(EIN(96)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(96)))-BETA2)*BBCONST*EN/(EN+EIN(96)+BEF(5))
      IF(QIN(96,I):
 < 0.0) QIN(96,I)=0.0
      IF(EN <= (2.0*EIN(96):
)) GO TO 433
      PEQIN(96,I)=PEQEL(2,(I-IOFFN(96)))
# D1 PI     V=13        
  433 IF(EN <= EIN(97)) GO TO 434
      QIN(97,I)=.000290/(EIN(97)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(97)))-BETA2)*BBCONST*EN/(EN+EIN(97)+BEF(5))
      IF(QIN(97,I):
 < 0.0) QIN(97,I)=0.0
      IF(EN <= (2.0*EIN(97):
)) GO TO 434
      PEQIN(97,I)=PEQEL(2,(I-IOFFN(97)))
# D1 PI     V=14        
  434 IF(EN <= EIN(98)) GO TO 435
      QIN(98,I)=.000200/(EIN(98)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(98)))-BETA2)*BBCONST*EN/(EN+EIN(98)+BEF(5))
      IF(QIN(98,I):
 < 0.0) QIN(98,I)=0.0
      IF(EN <= (2.0*EIN(98):
)) GO TO 435
      PEQIN(98,I)=PEQEL(2,(I-IOFFN(98)))
# D1 PI     V=15        
  435 IF(EN <= EIN(99)) GO TO 436
      QIN(99,I)=.000120/(EIN(99)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(99)))-BETA2)*BBCONST*EN/(EN+EIN(99)+BEF(5))
      IF(QIN(99,I):
 < 0.0) QIN(99,I)=0.0
      IF(EN <= (2.0*EIN(99):
)) GO TO 436
      PEQIN(99,I)=PEQEL(2,(I-IOFFN(99)))
# B##1 SIGMA SUM V=0-6  DISSOCIATIVE 
# SCALED BY 1.08 FOR INCREASED ENERGY LOSSES FROM VIB SERIES
  436 IF(EN <= EIN(100)) GO TO 437
      QIN(100,I)=.02230/(EIN(100)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(100)))-BETA2)*BBCONST*EN/(EN+EIN(100)+BEF(5))*1.08 
      IF(QIN(100,I):
 < 0.0) QIN(100,I)=0.0
      IF(EN <= (2.0*EIN(100):
)) GO TO 437
      PEQIN(100,I)=PEQEL(2,(I-IOFFN(100)))
# D#1 PI     SUM V=0-3  DISSOCIATIVE
# SCALED BY 1.08 FOR INCREASED ENERGY LOSSES FROM VIB SERIES
  437 IF(EN <= EIN(101)) GO TO 438
      QIN(101,I)=.01450/(EIN(101)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(101)))-BETA2)*BBCONST*EN/(EN+EIN(101)+BEF(5))*1.08 
      IF(QIN(101,I):
 < 0.0) QIN(101,I)=0.0
      IF(EN <= (2.0*EIN(101):
)) GO TO 438
      PEQIN(101,I)=PEQEL(2,(I-IOFFN(101)))
# B###1 SIGMA + D##1 PI VIBRATION SUMMED   DISSOCIATIVE 
#  SCALED BY 1.08 FOR INCREASED ENERGY LOSSES FROM VIB SERIES
  438 IF(EN <= EIN(102)) GO TO 439
      QIN(102,I)=.01450/(EIN(102)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(102)))-BETA2)*BBCONST*EN/(EN+EIN(102)+BEF(5))*1.08 
      IF(QIN(102,I):
 < 0.0) QIN(102,I)=0.0
      IF(EN <= (2.0*EIN(102):
)) GO TO 439
      PEQIN(102,I)=PEQEL(2,(I-IOFFN(102)))
# B####1 SIGMA + D###1 PI VIBRATION SUMMED   DISSOCIATIVE
#  SCALED BY 1.08 FOR INCREASED ENERGY LOSSES FROM VIB SERIES
  439 IF(EN <= EIN(103)) GO TO 440
      QIN(103,I)=.01010/(EIN(103)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(103)))-BETA2)*BBCONST*EN/(EN+EIN(103)+BEF(5))*1.08 
      IF(QIN(103,I):
 < 0.0) QIN(103,I)=0.0
      IF(EN <= (2.0*EIN(103):
)) GO TO 440
      PEQIN(103,I)=PEQEL(2,(I-IOFFN(103)))
# B#####1 SIGMA + D####1 PI VIBRATION SUMMED   DISSOCIATIVE 
#  SCALED BY 1.08 FOR INCREASED ENERGY LOSSES FROM VIB SERIES
  440 IF(EN <= EIN(104)) GO TO 441
      QIN(104,I)=.00500/(EIN(104)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(104)))-BETA2)*BBCONST*EN/(EN+EIN(104)+BEF(5))*1.08
      IF(QIN(104,I):
 < 0.0) QIN(104,I)=0.0
      IF(EN <= (2.0*EIN(104):
)) GO TO 441
      PEQIN(104,I)=PEQEL(2,(I-IOFFN(104)))
# CONTINUUM EXCITATION AROUND IONISATION ENERGY   DISSOCIATIVE
# SCALED BY 1.20 FOR INCREASED ENERGY LOSSES ABOVE THRESHOLD
  441 IF(EN <= EIN(105)) GO TO 442
      QIN(105,I)=.02680/(EIN(105)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(105)))-BETA2)*BBCONST*EN/(EN+EIN(105)+BEF(5))*1.20
      IF(QIN(105,I):
 < 0.0) QIN(105,I)=0.0
      IF(EN <= (2.0*EIN(105):
)) GO TO 442
      PEQIN(105,I)=PEQEL(2,(I-IOFFN(105)))
# PREDISSOCIATION ABOVE IONISATION ENERGY         DISSOCIATIVE
# SCALED BY 1.2 FOR INCREASED ENERGY LOSSES ABOVE THRESHOLD 
  442 IF(EN <= EIN(106)) GO TO 443
      QIN(106,I)=.01700/(EIN(106)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*
     /EIN(106)))-BETA2)*BBCONST*EN/(EN+EIN(106)+BEF(5))*1.20 
      IF(QIN(106,I):
 < 0.0) QIN(106,I)=0.0
      IF(EN <= (2.0*EIN(106):
)) GO TO 443
      PEQIN(106,I)=PEQEL(2,(I-IOFFN(106)))
  443 CONTINUE
#---------------------------------------------------------------------
      Q(1,I)=0.0
      DO 555 NL=1,106
      Q(1,I)=Q(1,I)+QIN(NL,I)
  555 CONTINUE
      Q(1,I)=Q(1,I)+Q(2,I)+Q(4,I)+Q(5,I) 
#     WRITE(6,991) EN,Q(2,I),Q(4,I),Q(5,I),Q(1,I)          
# 991 FORMAT(' EN=',D12.4,' ELAS=',D12.4,' ATT =',D12.4,'IONS=',D12.4,'
#    / TOT=',D12.4) 
  900 CONTINUE 
#  SAVE COMPUTE TIME
      DO 910 K=1,20 
      IF(EFINAL <= EIN(K):
) :
       NIN=K-1
       GO TO 911
      # endIF
  910 CONTINUE
  911 CONTINUE
#                                                                       
      RETURN                                                            
      # end 
      def GAS46(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)         
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# ---------------------------------------------------------------------
      NION=1 
      NATT=1
      NIN=0 
      NNULL=0
#     
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0    
      E(1)=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      EOBY(1)=0.0
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS47(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)         
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# ---------------------------------------------------------------------
      NION=1 
      NATT=1
      NIN=0
      NNULL=0
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0           
      E(1)=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      EOBY(1)=0.0
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS48(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)         
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# ---------------------------------------------------------------------
      NION=1  
      NATT=1
      NIN=0
      NNULL=0
      DO 1 J=1,6
    1 KEL(J)=0 
      DO 2 J=1,NIN
    2 KIN(J)=0           
      E(1)=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      EOBY(1)=0.0
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS49(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)         
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# ---------------------------------------------------------------------
      NION=1 
      NATT=1
      NIN=0 
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0           
      E(1)=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      EOBY(1)=0.0
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS50(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)  
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250] 
      DIMENSION XEN(32),YXSEC(32),XVIB3(14),YVIB3(14),XVIB4(16),        
     /YVIB4(16),XVIB6(16),YVIB6(16),XEXC(33),YEXC(33),XION(52),YION(52),
     /XATT(13),YATT(13)
      CHARACTER*25 NAME                            
      CHARACTER*50 SCRPT(300),SCRPTN(10)
#                      
      DATA XEN/1.D-6,.001,0.01,0.10,1.00,1.50,2.00,3.00,4.00,5.00,      
     /7.00,9.00,10.0,15.0,20.0,30.0,35.0,50.0,60.0,75.0,
     /100.,150.,200.,300.,500.,700.,1000.,2000.,4000.,10000.,
     /20000.,100000./
      DATA YXSEC/1.63D4,1.63D4,1630.,163.,16.3,11.5,10.5,9.50,9.50,10.0,
     /11.0,11.0,10.8,10.5,10.0,9.50,8.40,6.50,5.50,4.60,
     /3.54,2.55,1.63,0.96,0.54,0.36,0.23,0.10,0.05,0.02,
     /0.01,.002/
#  VIBRATION V5 + V2 + V4 (RESONANCE ONLY)
      DATA XVIB3/0.1429,4.00,4.70,5.70,6.70,7.70,9.50,15.0,20.0,50.0,   
     /100.,1000.,10000.,100000./                                        
      DATA YVIB3/0.0,0.0,.109,.952,1.43,1.22,0.79,.068,.023,.0001,      
     /.00001,.000001,.0000001,.00000001/                                
#  VIBRATION HARMONIC 2(V5)
      DATA XVIB4/0.2858,1.00,3.00,3.70,4.70,5.70,6.70,7.70,9.50,15.0,   
     /20.0,50.0,100.0,1000.,10000.,100000./                             
      DATA YVIB4/0.0,.001,.005,0.02,0.03,0.23,0.35,0.30,0.20,.016,      
     /.006,.0003,.00001,.000001,.0000001,.00000001/                     
# VIBRATION HARMONIC (3(V5) + ALL OTHER HARMONICS)
      DATA XVIB6/0.4287,1.00,3.00,3.70,4.70,5.70,6.70,7.70,9.50,15.0,   
     /20.0,50.0,100.,1000.,10000.,100000./                              
      DATA YVIB6/0.0,.001,0.04,0.08,0.12,0.92,1.40,1.20,0.80,.064,      
     /.020,.0004,.00004,.000004,.0000004,.00000004/                     
      DATA XION/13.86,14.0,15.0,16.0,17.0,18.0,20.0,22.0,24.0,26.0,
     /28.0,30.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,                
     /48.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,                
     /250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,                
     /1000.,1250.,1500.,1750.,2000.,2500.,3000.,5000.,10000.,20000.,
     /40000.,100000./     
      DATA YION/0.0,.031,.072,.123,.184,.266,.431,.590,.843,1.07,      
     /1.27,1.46,1.65,1.83,1.96,2.14,2.34,2.50,2.68,2.93,                
     /3.07,3.57,3.95,4.28,4.42,4.61,4.78,4.75,4.78,4.59,                
     /4.30,4.13,3.88,3.65,3.45,3.16,2.80,2.55,2.35,2.14,                
     /2.01,1.70,1.48,1.35,1.21,1.04,0.89,0.63,0.40,.230,
     /.127,.065/                
      DATA XATT/1.00,2.50,4.00,6.00,7.00,8.00,9.00,10.0,11.0,12.0,      
     /14.0,100.,10000./                                                 
      DATA YATT/0.00,0.04,0.17,0.17,0.07,0.07,0.56,2.26,1.30,0.67,      
     /0.01,.0001,.000001/                                          
#  DISOCIATION X-SECTION EXCLUDING DISOCIATIVE IONISATION X-SECTION     
      DATA XEXC/10.7,11.0,12.0,13.0,14.0,16.0,18.0,23.0,28.0,33.0,      
     /38.0,43.0,48.0,60.0,70.0,80.0,100.,120.,140.,160.,                
     /180.,200.,250.,300.,400.,500.,600.,1000.,2000.,4000.,             
     /10000.,20000.,100000./                          
      DATA YEXC/0.0,0.05,0.21,0.37,0.57,0.87,1.10,1.42,1.52,1.57,       
     /1.60,1.63,1.62,1.61,1.60,1.60,1.59,1.57,1.55,1.52,            
     /1.49,1.45,1.37,1.27,1.10,0.92,0.80,0.53,0.31,0.18,                
     /0.09,0.05,.013/                                    
# ----------------------------------------------------------------      
# DATA ON DRIFT VELOCITY AND TOWNS# end IN PURE GAS
#                : P.REV. E 60 (1999) 4990
#              ALSO CLARK ET AL IN ABOVE REF.
#  ARGON MIXTURE DATA IN : CHEM. PHYS.LETT. 304(1999) 303
# 
# --------------------------------------------------------------- 
#      
      NAME=' CHF3 -2001--- '
#             
      NION=1
      NATT=1
      NIN=9
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0                                                          
      NDATA=32                                                          
      NVIB3=14                                                          
      NVIB4=16                                                          
      NVIB6=16
      NIOND=52                                                          
      NATT1=13 
      NEXC=33                                                           
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(70.0138*AMU)                                      
      E(3)=13.86                                                        
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
# SET OPAL AND BEATY ENERGY SPLITTING TO EION
      EOBY(1)=E(3)   
      EIN(1)=-0.035
      EIN(2)=0.035
      EIN(3)=-0.063   
      EIN(4)=0.063                                                      
      EIN(5)=0.1429
      EIN(6)=0.2858                                                     
      EIN(7)=0.3764                                                     
      EIN(8)=0.4287 
      EIN(9)=10.7
      APOPR=math.exp(EIN(1)/AKT)
      APOPV=math.exp(EIN(3)/AKT)
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC         CHF3         '
      SCRPT(3)=' IONISATION    ELOSS= 13.86   '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      SCRPT(7)=' ROT           ELOSS= -0.035  '
      SCRPT(8)=' ROT           ELOSS=  0.035  '
      SCRPT(9)=' VIB63         ELOSS= -0.063  '
      SCRPT(10)=' VIB63         ELOSS=  0.063  '
      SCRPT(11)=' VIB524        ELOSS=  0.1429 '
      SCRPT(12)=' VIB1          ELOSS=  0.2858 '
      SCRPT(13)=' VIB HAR       ELOSS=  0.3764 '
      SCRPT(14)=' VIB HAR       ELOSS=  0.4287 '
      SCRPT(15)=' EXC (DISOCTN)  ELOSS= 10.7   '
      EN=-ESTEP/2.0                                      
      DO 9000 I=1,NSTEP                                              
      EN=EN+ESTEP   
      IF(EN == 0.0):
 Q(2,I)=16300.D-16
      IF(EN == 0.0):
 GO TO 30
      DO 10 J=2,NDATA                                                   
      IF(EN <= XEN(J):
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA 
# USE LOG INTERPOLATION
   20 Y1=math.log(YXSEC(J-1))
      Y2=math.log(YXSEC(J))
      X1=math.log(XEN(J-1))
      X2=math.log(XEN(J))                                                   
      A=(Y2-Y1)/(X2-X1)                                          
      B=(X1*Y2-X2*Y1)/(X1-X2)                                           
      Q(2,I)=math.exp((A*math.log(EN)+B))*1.0D-16
   30 Q(3,I)=0.0                                                        
      IF(EN < E(3):
) GO TO 200                                          
      DO 110 J=2,NIOND                                                  
      IF(EN <= XION(J):
) GO TO 120                                       
  110 CONTINUE                                                          
      J=NIOND                                                           
  120 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.D-16                                            
#                                                                       
  200 Q(4,I)=0.0                                  
      QATT(1,I)=Q(4,I)                      
      IF(EN < XATT(1):
) GO TO 300                                       
      IF(EN > XATT(NATT1):
) GO TO 300                                  
      DO 210 J=2,NATT1                                                 
      IF(EN <= XATT(J):
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NATT1                                                          
  220 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))                         
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))       
      Q(4,I)=(A*EN+B)*1.D-19  
      QATT(1,I)=Q(4,I)                                     
  300 Q(5,I)=0.0                                                        
      Q(6,I)=0.0
#           
# SUPERELASTIC EFFECTIVE ROTATION
#  
      QIN(1,I)=0.0
      IF(EN == 0.0):
 GO TO 305
      EFAC=math.sqrt(1.0-(EIN(1)/EN))
      QIN(1,I)=0.100*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      QIN(1,I)=QIN(1,I)*APOPR/(1.0+APOPR)*1.D-16
#
# EFFECTIVE ROTATION
  305 CONTINUE
      QIN(2,I)=0.0
      IF(EN <= EIN(2):
) GO TO 350
      EFAC=math.sqrt(1.0-(EIN(2)/EN))
      QIN(2,I)=0.100*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      QIN(2,I)=QIN(2,I)*1.0/(1.0+APOPR)*1.D-16
  350 CONTINUE  
# 
# SUPERELASTIC OF VIBRATION V6 + V3
# 
      QIN(3,I)=0.0
      IF(EN == 0.0):
 GO TO 365
      EFAC=math.sqrt(1.0-(EIN(3)/EN))
      QIN(3,I)=0.152*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      QIN(3,I)=QIN(3,I)*APOPV/(1.0+APOPV)*1.D-16
#                
# VIB V6 + V3
  365 CONTINUE
      QIN(4,I)=0.0                                                      
      IF(EN <= EIN(4):
) GO TO 400                                        
      EFAC=math.sqrt(1.0-(EIN(4)/EN))
      QIN(4,I)=0.152*math.log((1.0+EFAC)/(1.0-EFAC))/EN    
      QIN(4,I)=QIN(4,I)*1.0/(1.0+APOPV)*1.D-16
  400 CONTINUE  
#                                                          
#  V5 + V2 + V4                                                         
      QIN(5,I)=0.0                                                      
      IF(EN <= EIN(5):
) GO TO 500                                        
      DO 410 J=2,NVIB3                                                  
      IF(EN <= XVIB3(J):
) GO TO 420                                      
  410 CONTINUE                                                          
      J=NVIB3                                                           
  420 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J)) 
      EFAC=math.sqrt(1.0-(EIN(5)/EN))
      QIN(5,I)=0.748*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      QIN(5,I)=((A*EN+B)+QIN(5,I))*1.D-16
  500 CONTINUE                                                          
# 2V5 
      QIN(6,I)=0.0                                                      
      IF(EN <= EIN(6):
) GO TO 600                                        
      DO 510 J=2,NVIB4                                                  
      IF(EN <= XVIB4(J):
) GO TO 520                                      
  510 CONTINUE                                                          
      J=NVIB4                                                           
  520 A=(YVIB4(J)-YVIB4(J-1))/(XVIB4(J)-XVIB4(J-1))                     
      B=(XVIB4(J-1)*YVIB4(J)-XVIB4(J)*YVIB4(J-1))/(XVIB4(J-1)-XVIB4(J)) 
      QIN(6,I)=(A*EN+B)*1.D-16
  600 CONTINUE                                                          
#  V1                                                                   
      QIN(7,I)=0.0                                                      
      IF(EN <= EIN(7):
) GO TO 700   
      EFAC=math.sqrt(1.0-(EIN(7)/EN))
      QIN(7,I)=0.421*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      QIN(7,I)=QIN(7,I)*1.D-16
  700 CONTINUE                                                          
#  HIGHER HARMONICS                                                     
      QIN(8,I)=0.0                                                      
      IF(EN <= EIN(8):
) GO TO 800                                        
      DO 710 J=2,NVIB6                                                  
      IF(EN <= XVIB6(J):
) GO TO 720                                      
  710 CONTINUE                                                          
      J=NVIB6                                                           
  720 A=(YVIB6(J)-YVIB6(J-1))/(XVIB6(J)-XVIB6(J-1))                     
      B=(XVIB6(J-1)*YVIB6(J)-XVIB6(J)*YVIB6(J-1))/(XVIB6(J-1)-XVIB6(J)) 
      QIN(8,I)=(A*EN+B)*1.D-16                                          
  800 CONTINUE                                                          
#   EXCITATION (DISOCIATION)                                            
      QIN(9,I)=0.0
      IF(EN <= EIN(9):
) GO TO 900                                        
      DO 810 J=2,NEXC                                                   
      IF(EN <= XEXC(J):
) GO TO 820                                       
  810 CONTINUE                                                          
      J=NEXC                                                            
  820 A=(YEXC(J)-YEXC(J-1))/(XEXC(J)-XEXC(J-1))                         
      B=(XEXC(J-1)*YEXC(J)-XEXC(J)*YEXC(J-1))/(XEXC(J-1)-XEXC(J))       
      QIN(9,I)=(A*EN+B)*1.D-16                                          
  900 CONTINUE                                                          
#                                                                       
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)+QIN(1,I)+QIN(2,I)+QIN(3,I)+QIN(4,I)+ 
     /QIN(5,I)+QIN(6,I)+QIN(7,I)+QIN(8,I)+QIN(9,I)
 9000 CONTINUE                                                          
#  SAVE COMPUTE TIME 
      IF(EFINAL <= EIN(9):
) NIN=8
      IF(EFINAL <= EIN(8):
) NIN=7
      IF(EFINAL <= EIN(7):
) NIN=6
      IF(EFINAL <= EIN(6):
) NIN=5
      IF(EFINAL <= EIN(5):
) NIN=4
      IF(EFINAL <= EIN(4):
) NIN=3                                        
      IF(EFINAL <= EIN(3):
) NIN=2                                        
      IF(EFINAL <= EIN(2):
) NIN=1                                        
      IF(EFINAL <= EIN(1):
) NIN=0                                        
      RETURN                                                            
      # end 
      def GAS51(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)  
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250] 
      DIMENSION XEL(30),YEL(30),XVIBH(16),YVIBH(16),                  
     /XEXC(31),YEXC(31),XION(40),YION(40)
      CHARACTER*25 NAME                            
      CHARACTER*50 SCRPT(300),SCRPTN(10)
#                     
      DATA XEL/1.D-6,.001,0.01,0.10,0.40,0.60,0.80,1.00,1.40,2.00,      
     /3.00,5.00,7.50,10.0,14.0,20.0,30.0,50.0,75.0,100.,
     /150.,200.,400.,700.,1000.,2000.,4000.,10000.,20000.,100000./
      DATA YEL/2800.,2800.,280.,28.0,7.00,5.50,5.00,5.00,6.00,7.00,
     /9.00,11.5,15.5,18.0,18.0,17.0,14.0,10.0,8.00,6.00,
     /4.00,3.00,1.45,0.90,0.65,0.30,0.15,0.05,0.02,.004/       
#  VIBRATION HARMONIC 2(V3)
      DATA XVIBH/0.30,1.00,3.00,3.70,4.70,5.70,6.70,7.70,9.50,15.0,   
     /20.0,50.0,100.0,1000.,10000.,100000./                             
      DATA YVIBH/0.00,.005,.025,0.10,0.25,1.15,1.75,1.50,1.00,.080,     
     /.030,.0015,.00005,.000005,.0000005,.00000005/                     
      DATA XION/11.40,12.0,13.0,14.0,16.0,18.0,20.0,22.0,24.0,26.0,
     /30.0,34.0,38.0,42.0,46.0,50.0,60.0,70.0,80.0,90.0,  
     /100.,125.,150.,175.,200.,250.,300.,400.,500.,600.,                
     /800.,1000.,1500.,2000.,2500.,3000.,5000.,10000.,20000.,100000./   
      DATA YION/0.00,0.04,0.13,0.25,0.40,0.66,1.00,1.30,1.70,2.05,      
     /2.45,2.85,3.30,3.80,4.30,4.60,5.35,5.90,6.40,6.60,
     /6.80,7.00,7.05,7.00,6.90,6.45,6.20,5.50,4.75,4.20,                
     /3.55,3.05,2.25,1.85,1.60,1.35,0.95,0.60,0.35,0.10/
#  DISOCIATION X-SECTION EXCLUDING DISOCIATIVE IONISATION X-SECTION     
      DATA XEXC/8.70,9.00,10.0,11.0,12.0,14.0,16.0,21.0,26.0,31.0,      
     /36.0,40.0,50.0,70.0,100.,120.,140.,160.,180.,200.,      
     /250.,300.,400.,500.,600.,1000.,2000.,4000.,10000.,20000.,         
     /100000./                          
      DATA YEXC/0.0,0.07,0.32,0.56,0.85,1.35,1.65,2.15,2.30,2.35,       
     /2.40,2.45,2.45,2.43,2.41,2.39,2.35,2.30,2.25,2.20,  
     /2.05,1.90,1.65,1.40,1.20,0.80,0.46,0.27,0.14,0.07,      
     /.020/                                    
# ----------------------------------------------------------------      
# SCALED X-SECTIONS FROM SYSTEMATICS AND USED ATTACHMENT X-SECTION
#  FROM ALAJAJIAN ET AL : J.PHYS B21(1988) 4021 
#  AND NORMALISED TO MCCORKLE (1987) AND SPYROU ET AL 
# ---------------------------------------------------------------  
#     
      NAME=' CF3BR -2002-- '
#      
      NION=1
      NATT=1
      NIN=7 
      NNULL=0 
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0                                                          
      NEL=30                                                          
      NVIBH=16                                                          
      NIOND=40                                                          
      NEXC=31                                                           
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(148.90991*AMU)                                    
      E(3)=11.40                                                        
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
# SET OPAL AND BEATY ENERGY SPLITTING TO EION
      EOBY(1)=E(3)   
      EIN(1)=-0.050
      EIN(2)=0.050
      EIN(3)=-0.1345
      EIN(4)=0.1345
      EIN(5)=0.1499
      EIN(6)=0.30                                                      
      EIN(7)=8.7
      APOPV1=math.exp(EIN(1)/AKT)
      APOPV2=math.exp(EIN(3)/AKT)
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC         CF3BR        '
      SCRPT(3)=' IONISATION    ELOSS= 11.40   '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      SCRPT(7)=' VIB1          ELOSS= -0.050  '
      SCRPT(8)=' VIB1          ELOSS=  0.050  '
      SCRPT(9)=' VIB2          ELOSS= -0.1345 '
      SCRPT(10)=' VIB2          ELOSS=  0.1345 '
      SCRPT(11)=' VIB3          ELOSS=  0.1499 '
      SCRPT(12)=' VIB HAR       ELOSS=  0.30   '
      SCRPT(13)=' EXC           ELOSS=  8.7    '
      EN=-ESTEP/2.0                                      
      DO 9000 I=1,NSTEP                                              
      EN=EN+ESTEP   
      IF(EN == 0.0):
 Q(2,I)=2800.D-16
      IF(EN == 0.0):
 GO TO 30
      DO 10 J=2,NEL                                                     
      IF(EN <= XEL(J):
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NEL   
# USE LOG INTERPOLATION
   20 Y1=math.log(YEL(J-1))
      Y2=math.log(YEL(J))
      X1=math.log(XEL(J-1))
      X2=math.log(XEL(J))                                                   
      A=(Y2-Y1)/(X2-X1)                                          
      B=(X1*Y2-X2*Y1)/(X1-X2)                                           
      Q(2,I)=math.exp((A*math.log(EN)+B))*1.0D-16
   30 Q(3,I)=0.0                                                        
      IF(EN < E(3):
) GO TO 100                                          
      DO 40 J=2,NIOND                                                   
      IF(EN <= XION(J):
) GO TO 50                                        
   40 CONTINUE                                                          
      J=NIOND                                                          
   50 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.D-16                                            
#                                                                       
  100 Q(4,I)=0.0
      QATT(1,I)=Q(4,I)                                               
      IF(EN == 0.0 or EN > 2.0):
 GO TO 200    
# defAL FORM OF ATTACHMENT FROM J.PHYS.B 21(1988) 4021                                         
      AT1=0.0353/math.sqrt(EN)                                              
      AT2=math.exp(-EN*EN/9.D-6)                                            
      AT3=math.exp(-EN/0.0588)                                              
      Q(4,I)=(AT1*AT2+AT3)*27.4D-16   
      QATT(1,I)=Q(4,I)                                
  200 Q(5,I)=0.0                                                        
      Q(6,I)=0.0
#           
# SUPERELASTIC VIBRATION V1           
#  
      QIN(1,I)=0.0
      IF(EN == 0.0):
 GO TO 250
      EFAC=math.sqrt(1.0-(EIN(1)/EN))
      QIN(1,I)=0.100*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      QIN(1,I)=QIN(1,I)*APOPV1/(1.0+APOPV1)*1.D-16
#
#  VIBRATION V1
#             
  250 CONTINUE
      QIN(2,I)=0.0
      IF(EN <= EIN(2):
) GO TO 300
      EFAC=math.sqrt(1.0-(EIN(2)/EN))
      QIN(2,I)=0.100*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      QIN(2,I)=QIN(2,I)*1.0/(1.0+APOPV1)*1.D-16
  300 CONTINUE  
# 
# SUPERELASTIC OF VIBRATION V2
# 
      QIN(3,I)=0.0
      IF(EN == 0.0):
 GO TO 350
      EFAC=math.sqrt(1.0-(EIN(3)/EN))
      QIN(3,I)=0.110*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      QIN(3,I)=QIN(3,I)*APOPV2/(1.0+APOPV2)*1.D-16
#                
# VIBRATION V2 
  350 CONTINUE
      QIN(4,I)=0.0                                                      
      IF(EN <= EIN(4):
) GO TO 400                                        
      EFAC=math.sqrt(1.0-(EIN(4)/EN))
      QIN(4,I)=0.110*math.log((1.0+EFAC)/(1.0-EFAC))/EN    
      QIN(4,I)=QIN(4,I)*1.0/(1.0+APOPV2)*1.D-16
  400 CONTINUE
#      
# VIBRATION V3    
      QIN(5,I)=0.0                                                      
      IF(EN <= EIN(5):
) GO TO 500                                        
      EFAC=math.sqrt(1.0-(EIN(5)/EN))
      QIN(5,I)=0.750*math.log((1.0+EFAC)/(1.0-EFAC))/EN*1.D-16    
  500 CONTINUE 
#                                                          
#  VIBRATION HARMONIC 2V3                                               
      QIN(6,I)=0.0                                                      
      IF(EN <= EIN(6):
) GO TO 600                                        
      DO 510 J=2,NVIBH                                                  
      IF(EN <= XVIBH(J):
) GO TO 520                                      
  510 CONTINUE                                                          
      J=NVIBH                                                           
  520 A=(YVIBH(J)-YVIBH(J-1))/(XVIBH(J)-XVIBH(J-1))                     
      B=(XVIBH(J-1)*YVIBH(J)-XVIBH(J)*YVIBH(J-1))/(XVIBH(J-1)-XVIBH(J)) 
      QIN(6,I)=(A*EN+B)*1.D-16
  600 CONTINUE                                                          
#                                                                       
      QIN(7,I)=0.0
      IF(EN <= EIN(7):
) GO TO 700                                        
      DO 610 J=2,NEXC                                                   
      IF(EN <= XEXC(J):
) GO TO 620                                       
  610 CONTINUE                                                          
      J=NEXC                                                            
  620 A=(YEXC(J)-YEXC(J-1))/(XEXC(J)-XEXC(J-1))                         
      B=(XEXC(J-1)*YEXC(J)-XEXC(J)*YEXC(J-1))/(XEXC(J-1)-XEXC(J))       
      QIN(7,I)=(A*EN+B)*1.D-16                                          
  700 CONTINUE                                                          
#                                                                       
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)+QIN(1,I)+QIN(2,I)+QIN(3,I)+QIN(4,I)+ 
     /QIN(5,I)+QIN(6,I)+QIN(7,I)
 9000 CONTINUE                                                          
#  SAVE COMPUTE TIME 
      IF(EFINAL <= EIN(7):
) NIN=6
      IF(EFINAL <= EIN(6):
) NIN=5
      IF(EFINAL <= EIN(5):
) NIN=4
      IF(EFINAL <= EIN(4):
) NIN=3                                        
      IF(EFINAL <= EIN(3):
) NIN=2                                        
      IF(EFINAL <= EIN(2):
) NIN=1                                        
      IF(EFINAL <= EIN(1):
) NIN=0                                        
      RETURN                                                            
      # end 
      def GAS52(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY   
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      DIMENSION XENM(56),YXMOM(56),XENT(56),YXTOT(56),
     /XVIB2(22),YVIB2(22),XVIB3(22),YVIB3(22),XVIB4(22),YVIB4(22),
     /XVIB5(22),YVIB5(22),XVIB6(22),YVIB6(22),YATT1(23),      
     /XDISS(27),YDISS(27),XATT(23),YATT(23),XION(50),YION(50)
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME     
#                                            
      DATA XENM/0.0,0.001,0.002,0.004,0.007,0.01,.015,0.02,.025,0.03,
     /0.04,0.05,0.06,0.07,0.08,0.09,0.10,0.12,0.15,0.20, 
     /0.25,0.30,0.35,0.40,0.45,0.50,0.60,0.70,0.80,0.90, 
     /1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.00,8.00,9.00,
     /10.0,15.0,20.0,30.0,40.0,50.0,60.0,70.0,80.0,90.0,
     /100.0,200.,400.,1000.,10000.,100000./                             
#  ELASTIC MOMENTUM TRANSFER
      DATA YXMOM/56.0,52.0,49.0,42.0,35.0,28.0,21.0,16.5,13.5,11.5,
     /9.20,7.40,6.10,5.20,4.20,3.90,4.00,4.40,5.20,6.40,
     /7.60,8.50,9.60,10.2,10.8,11.3,12.0,12.5,12.9,13.1,
     /13.2,13.6,14.0,14.5,15.5,16.5,17.5,18.5,19.5,20.5,
     /21.5,25.0,25.5,23.5,20.5,16.8,14.0,12.2,10.7,9.60,
     /8.50,4.50,2.20,0.85,.085,.0085/
      DATA XENT/0.0,0.001,0.002,0.004,0.007,0.01,.015,0.02,.025,0.03,
     /0.04,0.05,0.06,0.07,0.08,0.09,0.10,0.12,0.15,0.20, 
     /0.25,0.30,0.35,0.40,0.45,0.50,0.60,0.70,0.80,0.90, 
     /1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.00,8.00,9.00,
     /10.0,15.0,20.0,30.0,40.0,50.0,60.0,70.0,80.0,90.0,
     /100.0,200.,400.,1000.,10000.,100000./                             
#  ELASTIC TOTAL ( NO GOOD DATA AVAILABLE) 
      DATA YXTOT/56*0.0/                                           
#  VIBRATION V1 (RESONANCE ONLY)
      DATA XVIB2/0.065,1.00,1.90,2.30,3.10,3.70,4.50,5.50,6.50,8.00,
     /9.00,10.0,11.0,12.0,13.0,15.0,20.0,50.0,100.,1000.,             
     /10000.,100000./                                        
      DATA YVIB2/0.0,.0000001,.050,.113,.353,.328,.252,.227,.328,.378,
     /.378,.315,.113,.050,.025,.013,.0025,.000013,.0000013,.00000013,  
     /.000000013,.0000000013/                                
#  VIBRATION V2  (RESONANCE ONLY)
      DATA XVIB3/0.100,1.00,1.90,2.30,3.10,3.70,4.50,5.50,6.50,8.00,
     /9.00,10.0,11.0,12.0,13.0,15.0,20.0,50.0,100.,1000.,      
     /10000.,100000./                                        
      DATA YVIB3/0.0,.0000001,.315,.617,1.94,1.87,1.39,1.26,1.84,2.07, 
     /2.03,1.73,0.63,.277,.113,.050,.025,.000005,.0000005,.00000005, 
     /.000000005,.0000000005/                             
#  VIBRATION V3 (RESONANCE ONLY)
      DATA XVIB4/0.155,1.00,1.90,2.30,3.10,3.70,4.50,5.50,6.50,8.00,
     /9.00,10.0,11.0,12.0,13.0,15.0,20.0,50.0,100.,1000.,
     /10000.,100000./                                        
      DATA YVIB4/0.0,.0000001,.680,1.36,4.21,4.03,3.02,2.72,4.01,4.54,
     /4.48,3.78,1.39,.605,.252,.126,.063,.00013,.000013,.0000013,
     /.00000013,.000000013/                                
#  VIBRATION HARMONIC 2(V3)
      DATA XVIB5/0.35,1.00,1.90,2.30,3.10,3.70,4.50,5.50,6.50,8.00,
     /9.00,10.0,11.0,12.0,13.0,15.0,20.0,50.0,100.,1000.,
     /10000.,100000./                                        
      DATA YVIB5/0.0,.0000001,.243,.486,1.51,1.43,1.08,.972,1.43,1.62,
     /1.59,1.35,.486,.216,.081,.054,.027,.00027,.000027,.0000027,
     /.00000027,.000000027/                                
# VIBRATION HARMONIC (3(V3) + ALL OTHER HARMONICS)
      DATA XVIB6/0.500,1.00,1.90,2.30,3.10,3.70,4.50,5.50,6.50,8.00,
     /9.00,10.0,11.0,12.0,13.0,15.0,20.0,50.0,100.,1000.,
     /10000.,100000./                                        
      DATA YVIB6/0.0,.0000001,.826,1.65,5.12,4.90,3.65,3.30,4.85,5.50,
     /5.45,4.60,1.65,.735,.300,.160,.070,.00023,.000023,.0000023,
     /.00000023,.000000023/                                
#  DISOCIATION X-SECTION                                                
      DATA XDISS/11.0,12.0,13.0,14.0,15.0,18.0,20.0,25.0,30.0,40.0,     
     /50.0,60.0,80.0,100.,120.,150.,200.,300.,400.,500.,
     /600.,800.,1000.,2000.,4000.,10000.,100000./ 
      DATA YDISS/0.00,.005,.070,0.22,0.75,1.70,2.25,2.90,3.15,3.35,
     /3.45,3.50,3.60,3.60,3.60,3.55,3.50,3.35,3.25,3.08,   
     /2.80,2.45,2.05,1.12,0.65,0.30,0.030/ 
# ION NISHIMURA ET AL          
      DATA XION/13.38,16.0,17.0,18.0,19.0,20.0,22.0,24.0,26.0,28.0,     
     /30.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,                
     /50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,                
     /250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,                
     /1000.,1250.,1500.,1750.,2000.,2500.,3000.,10000.,20000.,100000./  
      DATA YION/0.00,.129,.316,.562,.815,1.13,1.81,2.31,3.08,3.58,     
     /4.10,4.57,5.12,5.58,5.88,6.54,7.01,7.43,7.85,8.31,                
     /8.99,10.4,11.3,11.9,12.5,12.8,13.3,13.4,13.2,12.8,                
     /12.1,11.2,10.5,9.80,9.31,8.61,7.80,6.99,6.41,5.82,                
     /5.48,4.64,4.05,3.62,3.31,2.78,2.44,0.88,0.48,0.13/
# ATTACHMENT     
      DATA XATT/0.70,0.80,1.00,1.50,1.70,2.00,2.30,2.50,2.70,3.00,
     /3.50,4.00,4.50,5.00,5.50,6.00,6.50,7.00,8.00,10.0,
     /20.0,100.0,100000./
# PRESSURE DEP# endENT ATTACHMENT X-SEC     
      DATA YATT/.000,.003,.006,.028,.049,.092,.097,.073,.035,.026, 
     /.021,.017,.015,.012,.008,.006,.005,.005,.005,.004,   
     /.002,.00005,.0000005/  
#  DISOCIATIVE ATTACHMENT
      DATA YATT1/0.00,0.00,0.00,.002,.010,.026,.066,.099,.127,.103,
     /.055,.025,.009,.004,.004,.004,.003,.003,.002,.001,
     /.001,.00005,.0000005/
# ---------------------------------------------------------------------      
#    APPROXIMATE PRESSURE DEP# endENCE OF ATTACHMENT IS INCLUDED
#    ALLOWS SUPERELASTIC SCATTERING TO ALL VIBRATIONAL LEVELS
#    EXCLUDING VIBRATION HARMONICS.
#    BORN ANGULAR DISTRIBUTION FOR  V2(0.100) AND V3(0.155) LEVELS.
# -------------------------------------------------------------------- 
#      
      NAME=' C3F8  -2002-- '                                            
#                   
      NION=1
      NATT=1
      NIN=9  
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0
# ANISOTROPIC SCATTERING FOR LEVELS 5 AND 6
      KIN(5)=1
      KIN(6)=1
#                                                                             
      NDATA=56 
      NETOT=56                                                        
      NVIB2=22                                                          
      NVIB3=22                                                          
      NVIB4=22                                                          
      NVIB5=22                                                          
      NVIB6=22
      NDISS=27
      NATT1=23
      NIOND=50
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(188.0193*AMU)                                     
      E(3)=13.38                                                        
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
      EOBY(1)=13.38
      EIN(1)=-0.065
      EIN(2)=-0.100 
      EIN(3)=-0.155                                              
      EIN(4)=0.065                                                      
      EIN(5)=0.100 
      EIN(6)=0.155                                                      
      EIN(7)=0.35                                                       
      EIN(8)=0.500 
      EIN(9)=11.0
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       C3F8           '
      SCRPT(3)=' IONISATION    ELOSS= 13.38   '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      SCRPT(7)=' VIB V1        ELOSS= -0.065  '
      SCRPT(8)=' VIB V2        ELOSS= -0.100  '
      SCRPT(9)=' VIB V3        ELOSS= -0.155  '
      SCRPT(10)=' VIB V1        ELOSS=  0.065  '
      SCRPT(11)=' VIB V2        ELOSS=  0.100  '
      SCRPT(12)=' VIB V3        ELOSS=  0.155  '
      SCRPT(13)=' VIB 2V3       ELOSS=  0.35   '
      SCRPT(14)=' VIB           ELOSS=  0.50   '
      SCRPT(15)=' EXC DISOCN    ELOSS= 11.0    '
      APOP1=math.exp(EIN(1)/AKT)
      APOP2=math.exp(EIN(2)/AKT)
      APOP3=math.exp(EIN(3)/AKT)
      EN=-ESTEP/2.0                                      
      DO 9000 I=1,NSTEP                                              
      EN=EN+ESTEP                                                       
      DO 10 J=2,NDATA                                                   
      IF(EN <= XENM(J):
) GO TO 20                                        
   10 CONTINUE                                                          
      J=NDATA                                                           
   20 A=(YXMOM(J)-YXMOM(J-1))/(XENM(J)-XENM(J-1))                       
      B=(XENM(J-1)*YXMOM(J)-XENM(J)*YXMOM(J-1))/(XENM(J-1)-XENM(J))     
      XMOMT=(A*EN+B)*1.0D-16
      DO 50 J=2,NETOT
      IF(EN <= XENT(J):
) GO TO 60
   50 CONTINUE
      J=NETOT
   60 A=(YXTOT(J)-YXTOT(J-1))/(XENT(J)-XENT(J-1))                       
      B=(XENT(J-1)*YXTOT(J)-XENT(J)*YXTOT(J-1))/(XENT(J-1)-XENT(J))     
      XTOT=(A*EN+B)*1.0D-16
      Q(2,I)=XTOT
      PEQEL(2,I)=0.5+(XTOT-XMOMT)/XTOT
      IF(KEL(2):
 == 0) Q(2,I)=XMOMT
      IF(KEL(2):
 == 0) PEQEL(2,I)=0.5
#      
      Q(3,I)=0.0                                                        
      IF(EN < E(3):
) GO TO 200                                          
      DO 110 J=2,NIOND                                                 
      IF(EN <= XION(J):
) GO TO 120                                       
  110 CONTINUE                                                          
      J=NIOND                                                          
  120 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.D-16                                            
#                                                                       
  200 Q(4,I)=0.0                           
      QATT(1,I)=Q(4,I)                             
      IF(EN < XATT(1):
) GO TO 250                                       
      IF(EN > XATT(NATT1):
) GO TO 250                                   
      DO 210 J=2,NATT1                                                  
      IF(EN <= XATT(J):
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NATT1                                                           
  220 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))                         
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))
      A1=(YATT1(J)-YATT1(J-1))/(XATT(J)-XATT(J-1))                      
      B1=(XATT(J-1)*YATT1(J)-XATT(J)*YATT1(J-1))/(XATT(J-1)-XATT(J))
      Q(4,I)=((A*EN+B)+(A1*EN+B1)*TORR/2280.0)*1.D-16  
      QATT(1,I)=Q(4,I)
  250 Q(5,I)=0.0                                                        
      Q(6,I)=0.0
#           
# SUPERELASTICS                                                                          
      QIN(1,I)=0.0
      QIN(2,I)=0.0
      QIN(3,I)=0.0
      IF(EN == 0.0):
 GO TO 305
# SUPERELASTIC OF VIBRATION V1        
      EFAC=math.sqrt(1.0-(EIN(1)/EN))
      QIN(1,I)=0.070*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      DO 260 J=2,NVIB2
      IF((EN+EIN(4):
) <= XVIB2(J)) GO TO 270
  260 CONTINUE
      J=NVIB2
  270 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J))
      QIN(1,I)=QIN(1,I)+(EN+EIN(4))*(A*(EN+EIN(4))+B)/EN 
      QIN(1,I)=QIN(1,I)*APOP1/(1.0+APOP1)*1.D-16
#  SUPERELASTIC OF VIBRATION V2
      EFAC=math.sqrt(1.0-(EIN(2)/EN))
      QIN(2,I)=0.850*math.log((EFAC+1.0)/(EFAC-1.0))/EN 
      DO 280 J=2,NVIB3
      IF((EN+EIN(5):
) <= XVIB3(J)) GO TO 290
  280 CONTINUE
      J=NVIB3
  290 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J))
      QIN(2,I)=QIN(2,I)+(EN+EIN(5))*(A*(EN+EIN(5))+B)/EN 
      QIN(2,I)=QIN(2,I)*APOP2/(1.0+APOP2)*1.D-16 
# SUPERELASTIC OF VIBRATION V3
      EFAC=math.sqrt(1.0-(EIN(3)/EN))
      QIN(3,I)=1.600*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      DO 300 J=2,NVIB4
      IF((EN+EIN(6):
) <= XVIB4(J))GO TO 301
  300 CONTINUE
      J=NVIB4
  301 A=(YVIB4(J)-YVIB4(J-1))/(XVIB4(J)-XVIB4(J-1))                     
      B=(XVIB4(J-1)*YVIB4(J)-XVIB4(J)*YVIB4(J-1))/(XVIB4(J-1)-XVIB4(J)) 
      QIN(3,I)=QIN(3,I)+(EN+EIN(6))*(A*(EN+EIN(6))+B)/EN
      QIN(3,I)=QIN(3,I)*APOP3/(1.0+APOP3)*1.D-16            
# 
  305 CONTINUE
      QIN(4,I)=0.0                                                      
      IF(EN <= EIN(4):
) GO TO 400                                        
      DO 310 J=2,NVIB2                                                  
      IF(EN <= XVIB2(J):
) GO TO 320                                      
  310 CONTINUE                                                          
      J=NVIB2                                                           
  320 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J)) 
      EFAC=math.sqrt(1.0-(EIN(4)/EN))
      QIN(4,I)=0.070*math.log((1.0+EFAC)/(1.0-EFAC))/EN 
      QIN(4,I)=((A*EN+B)+QIN(4,I))*1.0/(1.0+APOP1)*1.D-16
  400 CONTINUE                                                          
#                                                                       
      QIN(5,I)=0.0                                                      
      IF(EN <= EIN(5):
) GO TO 500                                        
      DO 410 J=2,NVIB3                                                  
      IF(EN <= XVIB3(J):
) GO TO 420                                      
  410 CONTINUE                                                          
      J=NVIB3                                                           
  420 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J)) 
      EFAC=math.sqrt(1.0-(EIN(5)/EN))
      QIN(5,I)=0.850*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      ELF=EN-EIN(5)
      FWD=math.log((EN+ELF)/(EN+ELF-2.0*math.sqrt(EN*ELF)))
      BCK=math.log((EN+ELF+2.0*math.sqrt(EN*ELF))/(EN+ELF))
# ASSUME RATIO  MOM.T /TOT X-SECT FOR RESONANCE PART = RAT3
      RAT3=0.80 
      XMT=((1.5-FWD/(FWD+BCK))*QIN(5,I)+RAT3*(A*EN+B))*1.0D-16
      XMT=XMT/(1.0+APOP2)        
      QIN(5,I)=((A*EN+B)+QIN(5,I))*1.0/(1.0+APOP2)*1.D-16
      PEQIN(5,I)=0.5+(QIN(5,I)-XMT)/QIN(5,I)
  500 CONTINUE                                                          
#
      QIN(6,I)=0.0                                                      
      IF(EN <= EIN(6):
) GO TO 600                                        
      DO 510 J=2,NVIB4                                                  
      IF(EN <= XVIB4(J):
) GO TO 520                                      
  510 CONTINUE                                                          
      J=NVIB4                                                           
  520 A=(YVIB4(J)-YVIB4(J-1))/(XVIB4(J)-XVIB4(J-1))                     
      B=(XVIB4(J-1)*YVIB4(J)-XVIB4(J)*YVIB4(J-1))/(XVIB4(J-1)-XVIB4(J)) 
      EFAC=math.sqrt(1.0-(EIN(6)/EN))
      QIN(6,I)=1.600*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      ELF=EN-EIN(6)
      FWD=math.log((EN+ELF)/(EN+ELF-2.0*math.sqrt(EN*ELF)))
      BCK=math.log((EN+ELF+2.0*math.sqrt(EN*ELF))/(EN+ELF))
#   ASSUME RATIO MOM T./ TOT X-SECT FOR RESONANCE PART = RAT4 
      RAT4=0.80   
      XMT=((1.5-FWD/(FWD+BCK))*QIN(6,I)+RAT4*(A*EN+B))*1.0D-16
      XMT=XMT/(1.0+APOP3)
      QIN(6,I)=((A*EN+B)+QIN(6,I))*1.0/(1.0+APOP3)*1.D-16
      PEQIN(6,I)=0.5+(QIN(6,I)-XMT)/QIN(6,I)
  600 CONTINUE                                                          
#                                                                       
      QIN(7,I)=0.0                                                      
      IF(EN <= EIN(7):
) GO TO 700                                        
      DO 610 J=2,NVIB5                                                  
      IF(EN <= XVIB5(J):
) GO TO 620                                      
  610 CONTINUE                                                          
      J=NVIB5                                                           
  620 A=(YVIB5(J)-YVIB5(J-1))/(XVIB5(J)-XVIB5(J-1))                     
      B=(XVIB5(J-1)*YVIB5(J)-XVIB5(J)*YVIB5(J-1))/(XVIB5(J-1)-XVIB5(J)) 
      QIN(7,I)=(A*EN+B)*1.D-16                                          
  700 CONTINUE                                                          
#                                                                       
      QIN(8,I)=0.0                                                      
      IF(EN <= EIN(8):
) GO TO 800                                        
      DO 710 J=2,NVIB6                                                  
      IF(EN <= XVIB6(J):
) GO TO 720                                      
  710 CONTINUE                                                          
      J=NVIB6                                                           
  720 A=(YVIB6(J)-YVIB6(J-1))/(XVIB6(J)-XVIB6(J-1))                     
      B=(XVIB6(J-1)*YVIB6(J)-XVIB6(J)*YVIB6(J-1))/(XVIB6(J-1)-XVIB6(J)) 
      QIN(8,I)=(A*EN+B)*1.D-16                                          
  800 CONTINUE                                                          
#                                                                       
      QIN(9,I)=0.0                                                      
      IF(EN <= EIN(9):
) GO TO 900                                        
      DO 810 J=2,NDISS                                                  
      IF(EN <= XDISS(J):
) GO TO 820                                      
  810 CONTINUE                                                          
      J=NDISS                                                           
  820 A=(YDISS(J)-YDISS(J-1))/(XDISS(J)-XDISS(J-1))                     
      B=(XDISS(J-1)*YDISS(J)-XDISS(J)*YDISS(J-1))/(XDISS(J-1)-XDISS(J)) 
      QIN(9,I)=(A*EN+B)*1.D-16       
  900 CONTINUE                                                          
#                             
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)+QIN(1,I)+QIN(2,I)+QIN(3,I)+QIN(4,I)+ 
     /QIN(5,I)+QIN(6,I)+QIN(7,I)+QIN(8,I)+QIN(9,I)           
 9000 CONTINUE                                                          
#  SAVE COMPUTE TIME
      IF(EFINAL <= EIN(9):
) NIN=8    
      IF(EFINAL <= EIN(8):
) NIN=7
      IF(EFINAL <= EIN(7):
) NIN=6                                        
      IF(EFINAL <= EIN(6):
) NIN=5
      IF(EFINAL <= EIN(5):
) NIN=4
      IF(EFINAL <= EIN(4):
) NIN=3                                        
      IF(EFINAL <= EIN(3):
) NIN=2                                        
      IF(EFINAL <= EIN(2):
) NIN=1                                        
      IF(EFINAL <= EIN(1):
) NIN=0                                        
      RETURN                                                            
      # end 
      def GAS53(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)  
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250] 
      DIMENSION XEN(30),YXSEC(30),XION(104),YION(104),
     /XVIB1(18),YVIB1(18),XVIB2(18),YVIB2(18),XVIB3(16),YVIB3(16),
     /XVIB4(16),YVIB4(16),XVIB5(16),YVIB5(16),
     /XEXC1(15),YEXC1(15),XEXC2(14),YEXC2(14),XEXC3(15),YEXC3(15),
     /XATT(25),YAT1(25),YAT2(25)
      CHARACTER*25 NAME                            
      CHARACTER*50 SCRPT(300),SCRPTN(10)
#                     
      DATA XEN/1.D-6,.001,0.01,0.10,0.20,0.40,0.70,1.00,2.00,3.00,      
     /4.00,5.00,6.00,7.00,8.00,10.0,15.0,20.0,30.0,50.0,
     /100.,200.,300.,600.,1000.,2000.,3000.,6000.,10000.,100000./
      DATA YXSEC/3000.,1500.,150.,19.0,14.0,12.0,12.0,12.0,12.0,12.0,
     /12.0,12.0,12.0,12.0,12.0,12.0,11.5,11.0,10.0,7.40,
     /4.70,1.99,1.16,0.41,.185,.058,.028,.0081,.0031,.0003/ 
#  VIBRATION V2  B# end MODE 
#  RESONANCE ONLY , DIPOLE ANALYTICAL 
      DATA XVIB1/.0869,0.50,1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.00,   
     /8.00,9.00,10.0,12.0,15.0,100.,1000.,100000./                      
      DATA YVIB1/0.00,.0005,.001,.005,.010,0.12,.265,0.24,0.13,0.07,    
     /0.03,0.02,0.01,.001,.0001,.00001,.000001,.0000001/                
#  VIBRATION SUM OF V1 AND V3 STRETCH MODES 
#  RESONANCE ONLY , DIPOLE ANALYTICAL  
      DATA XVIB2/.1292,0.50,1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.00,   
     /8.00,9.00,10.0,12.0,14.0,100.,1000.,100000./                      
      DATA YVIB2/0.00,0.01,0.015,0.02,0.05,0.43,0.83,0.74,0.56,0.44,    
     /0.25,0.14,0.05,0.01,.001,.0001,.00001,.000001/                    
# VIBRATION HARMONIC (V12 AND V23 )                    
      DATA XVIB3/0.2161,1.00,2.00,3.00,4.00,5.00,6.00,7.00,8.00,9.00,   
     /10.0,12.0,20.0,100.,1000.,100000./                                
      DATA YVIB3/0.00,.001,0.01,.077,.165,.140,.068,.034,.022,.020,     
     /.020,.010,.005,.001,.0001,.000001/   
# VIBRATION HARMONIC (V13 2V1 AND 2V3)                 
      DATA XVIB4/0.2660,1.00,2.00,3.00,4.00,5.00,6.00,7.00,8.00,9.00,   
     /10.0,12.0,20.0,100.,1000.,100000./                                
      DATA YVIB4/0.00,.003,0.04,.140,.278,.271,.238,.210,.140,.075,     
     /.029,.010,.005,.001,.0001,.000001/   
# VIBRATION HARMONIC ( SUM OF HIGHER HARMONICS )                    
      DATA XVIB5/0.38,1.00,2.00,3.00,4.00,5.00,6.00,7.00,8.00,9.00,   
     /10.0,12.0,20.0,100.,1000.,100000./                                
      DATA YVIB5/0.00,.001,0.02,.070,.139,.135,.119,.105,.070,.038,     
     /.014,.005,.002,.001,.0001,.000001/   
      DATA XION/12.75,13.0,13.5,14.0,14.5,15.0,15.5,16.0,16.5,17.0,
     /17.5,18.0,18.5,19.0,19.5,20.0,20.5,21.0,21.5,22.0,                
     /22.5,23.0,23.5,24.0,26.0,28.0,30.0,32.0,34.0,36.0,                
     /38.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,                
     /85.0,90.0,95.0,100.,105.,110.,115.,120.,125.,130.,             
     /135.,140.,145.,150.,160.,170.,180.,190.,200.,210.,
     /220.,230.,240.,250.,300.,350.,400.,450.,500.,550.,
     /600.,650.,700.,750.,800.,850.,900.,950.,1000.,1100.,
     /1250.,1500.,1750.,2000.,2250.,2500.,2750.,3000.,3250.,3500.,
     /3750.,4000.,4500.,5000.,6000.,7000.,8000.,9000.,10000.,15000.,
     /20000.,30000.,50000.,100000./
      DATA YION/0.00,.011,.035,.059,.083,.118,.162,.216,.270,.324,      
     /.378,.431,.484,.535,.586,.636,.685,.732,.779,.824,                
     /.869,.921,.975,1.03,1.25,1.46,1.66,1.84,2.01,2.17,                
     /2.31,2.44,2.72,2.95,3.14,3.30,3.42,3.52,3.60,3.66,                
     /3.71,3.74,3.77,3.78,3.79,3.80,3.80,3.79,3.78,3.77,
     /3.76,3.74,3.72,3.70,3.66,3.61,3.56,3.51,3.46,3.41,
     /3.35,3.30,3.25,3.20,2.97,2.76,2.57,2.41,2.27,2.14,
     /2.03,1.93,1.84,1.76,1.68,1.62,1.55,1.50,1.44,1.35,
     /1.23,1.07,.950,.856,.780,.717,.664,.619,.580,.546,
     /.516,.489,.443,.406,.348,.305,.272,.246,.225,.158,
     /.123,.086,.054,.029/
#  DISOCIATIVE ATTACHMENT :  O3 + E- = O2 + O-     
      DATA XATT/0.00,0.20,0.40,0.60,0.80,1.00,1.20,1.40,1.60,1.80,      
     /2.00,2.40,2.60,3.00,3.50,4.00,5.00,6.00,7.00,7.50,  
     /8.00,9.00,10.0,20.0,100000./              
      DATA YAT1/0.00,.032,.070,0.14,0.22,0.29,0.36,0.37,0.36,0.26,      
     /0.21,0.12,0.10,0.09,0.08,0.06,0.02,0.02,0.05,0.07,
     /0.05,0.01,.005,.001,.00000001/         
# DISOCIATIVE ATTACHMENT :  O3 + E- = O + O2-      
      DATA YAT2/0.00,0.00,0.00,0.01,0.08,0.13,0.17,0.15,0.11,.055,
     /.025,.006,.005,.002,.002,.0015,.001,.002,.003,.003,
     /.0025,.001,.0005,.0001,.00000001/                                 
#  CHAPPUIS BAND                                                         
      DATA XEXC1/1.50,2.00,3.00,4.00,5.00,6.00,8.00,10.0,12.0,14.0,     
     /20.0,40.0,100.,1000.,100000./                                     
      DATA YEXC1/0.00,0.01,0.04,0.12,0.12,0.10,0.08,0.06,0.05,0.04,     
     /0.02,0.01,.004,.0004,.000004/                       
#   HARTLEY BAND
      DATA XEXC2/4.85,6.00,7.00,8.00,9.00,10.0,12.0,14.0,16.0,20.0,
     /40.0,100.,1000.,100000./ 
      DATA YEXC2/0.00,0.26,0.63,0.75,0.68,0.65,0.58,0.47,0.37,0.27,
     /0.13,0.05,.005,.000005/
#    SUM OF OTHER STATES HIGHER THAN 9.0 EV
      DATA XEXC3/9.00,10.0,12.0,14.0,16.0,18.0,20.0,40.0,100.,150.,
     /200.,400.,1000.,10000.,100000./ 
      DATA YEXC3/0.00,0.52,1.50,1.50,1.40,1.40,1.20,1.00,0.80,0.70,
     /0.60,0.30,0.12,.012,.0012/      
# ---------------------------------------------------------------------
#  OZONE
#      USED BEB (THEORETICAL VALUES) FOR IONIZATION X-SECTION
#      VIB.RESONANCES:  ALLAN ET AL      J. PHYS. B   29(1996)4727
#      ATTACHMENT:      RANGWALA ET AL   J. PHYS. B   32(1999)3795
#      EXCITATION:      ALLEN ET AL      J.CHEM.PHYS.105(1996)5665
#      ELASTIC   :      SHYN AND SWEENEY  PHYS REV  47A (1993)2919 
#                       GULLEY ET AL     J. PHYS. B  31 (1998)5197
#                       PABLOS ET AL     J. PHYS. B  35 (2002)865
#      GOOD FIT TO EXPERIMENTAL ATTACHMENT RATE MEASUREMENTS :
#              STELMAN,MORUZZI AND PHELPS  J.CHEM.PHYS 56(1972)4183
#      N.B. ATTACHMENT RATE MEASUREMENTS OF PHELPS NEED TO BE CORRECTED 
#           FOR DETACHMENT COLLISIONS . CORRECTION FACTOR TAKEN FROM 
#           KLOPOVSKII ET AL   PLASMA PHYSICS REPORTS 23(1997) 165-171    
# ---------------------------------------------------------------------
#       
      NAME=' OZONE  2002   '
#               
      NION=1
      NATT=1
      NIN=11
      NNULL=0
# 
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0                                                          
      NDATA=30                                                          
      NVIB1=18                                                          
      NVIB2=18                                                          
      NVIB3=16
      NVIB4=16
      NVIB5=16
      NIOND=104                                                         
      NATT1=25 
      NEXC1=15
      NEXC2=14
      NEXC3=15                                                          
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(47.9982*AMU)                                      
      E(3)=12.75                                                        
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
# SET OPAL AND BEATY ENERGY SPLITTING TO EION
      EOBY(1)=E(3)   
      EIN(1)=-0.005
      EIN(2)=0.005
      EIN(3)=-0.0869  
      EIN(4)=0.0869                                                     
      EIN(5)=0.1292 
      EIN(6)=0.2161                                                     
      EIN(7)=0.2660                                                     
      EIN(8)=0.380  
      EIN(9)=1.50
      EIN(10)=4.85
      EIN(11)=9.00
      APOPR=math.exp(EIN(1)/AKT)
      APOPV=math.exp(EIN(3)/AKT)
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC        OZONE         '
      SCRPT(3)=' IONISATION    ELOSS= 12.75   '
      SCRPT(4)=' DISOCIATIVE ATTACHMENT       '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      SCRPT(7)=' ROT           ELOSS= -0.005  '
      SCRPT(8)=' ROT           ELOSS=  0.005  '
      SCRPT(9)=' VIB2  B# end    ELOSS= -0.0869 '
      SCRPT(10)=' VIB2 B# end     ELOSS=  0.0869 '
      SCRPT(11)=' VIB3+VIB1     ELOSS=  0.1292 '
      SCRPT(12)=' V12+V23       ELOSS=  0.2161 '
      SCRPT(13)=' V13+2V1+2V3   ELOSS=  0.2660 '
      SCRPT(14)=' SUM HIGH VIB  ELOSS=  0.380  '
      SCRPT(15)=' EXC CHAPPUIS  ELOSS=  1.50   '
      SCRPT(16)=' EXC HARTLEY   ELOSS=  4.85   '
      SCRPT(17)=' EXC           ELOSS=  9.00   '
      EN=-ESTEP/2.0                                      
      DO 9000 I=1,NSTEP                                              
      EN=EN+ESTEP   
      IF(EN == 0.0):
 Q(2,I)=3000.D-16  
      IF(EN == 0.0):
 GO TO 30
      DO 10 J=2,NDATA                                                   
      IF(EN <= XEN(J):
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA 
# USE LOG INTERPOLATION
   20 Y1=math.log(YXSEC(J-1))
      Y2=math.log(YXSEC(J))
      X1=math.log(XEN(J-1))
      X2=math.log(XEN(J))                                                   
      A=(Y2-Y1)/(X2-X1)                                          
      B=(X1*Y2-X2*Y1)/(X1-X2)                                           
      Q(2,I)=math.exp((A*math.log(EN)+B))*1.0D-16
   30 Q(3,I)=0.0                                                        
      IF(EN < E(3):
) GO TO 200                                          
      DO 110 J=2,NIOND                                                  
      IF(EN <= XION(J):
) GO TO 120                                       
  110 CONTINUE                                                          
      J=NIOND                                                           
  120 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.D-16                                            
#   SUM OF DISOCIATIVE ATTACHMENTS TO O- AND O2-                                    
  200 Q(4,I)=0.0                                         
      QATT(1,I)=Q(4,I)              
      IF(EN < XATT(1):
) GO TO 300                                       
      IF(EN > XATT(NATT1):
) GO TO 300                                  
      DO 210 J=2,NATT1                                                 
      IF(EN <= XATT(J):
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NATT1                                                          
  220 A1=(YAT1(J)-YAT1(J-1))/(XATT(J)-XATT(J-1))                        
      B1=(XATT(J-1)*YAT1(J)-XATT(J)*YAT1(J-1))/(XATT(J-1)-XATT(J)) 
      A2=(YAT2(J)-YAT2(J-1))/(XATT(J)-XATT(J-1))                        
      B2=(XATT(J-1)*YAT2(J)-XATT(J)*YAT2(J-1))/(XATT(J-1)-XATT(J)) 
      Q(4,I)=((A1+A2)*EN+B1+B2)*1.D-16   
      QATT(1,I)=Q(4,I)                               
  300 Q(5,I)=0.0                                                        
      Q(6,I)=0.0
#           
# SUPERELASTIC EFFECTIVE ROTATION
#  
      QIN(1,I)=0.0
      IF(EN == 0.0):
 GO TO 305
      EFAC=math.sqrt(1.0-(EIN(1)/EN))
      QIN(1,I)=0.450*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      QIN(1,I)=QIN(1,I)*APOPR/(1.0+APOPR)*1.D-16
#
# EFFECTIVE ROTATION
  305 CONTINUE
      QIN(2,I)=0.0
      IF(EN <= EIN(2):
) GO TO 350
      EFAC=math.sqrt(1.0-(EIN(2)/EN))
      QIN(2,I)=0.450*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      QIN(2,I)=QIN(2,I)*1.0/(1.0+APOPR)*1.D-16
  350 CONTINUE  
# 
# SUPERELASTIC  VIBRATION V2 (B# end MODE)
# 
      QIN(3,I)=0.0
      IF(EN == 0.0):
 GO TO 365
      EFAC=math.sqrt(1.0-(EIN(3)/EN))
      QIN(3,I)=0.0133*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      QIN(3,I)=QIN(3,I)*APOPV/(1.0+APOPV)*1.D-16
#                
# VIBRATION V2 (B# end MODE)
  365 CONTINUE
      QIN(4,I)=0.0 
      IF(EN <= EIN(4):
) GO TO 400  
      DO 370 J=2,NVIB1                                                  
      IF(EN <= XVIB1(J):
) GO TO 380                                      
  370 CONTINUE                                                          
      J=NVIB1                                                           
  380 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J)) 
      EFAC=math.sqrt(1.0-(EIN(4)/EN))
      QIN(4,I)=0.0133*math.log((1.0+EFAC)/(1.0-EFAC))/EN 
      QIN(4,I)=(A*EN+B)+QIN(4,I)   
      QIN(4,I)=QIN(4,I)*1.0/(1.0+APOPV)*1.D-16
  400 CONTINUE  
#                                                          
#  V1 + V3   ( STRETCH MODES )                                          
      QIN(5,I)=0.0                                                      
      IF(EN <= EIN(5):
) GO TO 500                                        
      DO 410 J=2,NVIB2                                                  
      IF(EN <= XVIB2(J):
) GO TO 420                                      
  410 CONTINUE                                                          
      J=NVIB2                                                           
  420 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J)) 
      EFAC=math.sqrt(1.0-(EIN(5)/EN))
      QIN(5,I)=0.090*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      QIN(5,I)=((A*EN+B)+QIN(5,I))*1.D-16
  500 CONTINUE  
#                                                          
# V12 +V23 
      QIN(6,I)=0.0                                                      
      IF(EN <= EIN(6):
) GO TO 600                                        
      DO 510 J=2,NVIB3                                                  
      IF(EN <= XVIB3(J):
) GO TO 520                                      
  510 CONTINUE                                                          
      J=NVIB3                                                           
  520 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J)) 
      QIN(6,I)=(A*EN+B)*1.D-16
  600 CONTINUE  
#                                                          
#  V13+2V1+2V3                                                          
      QIN(7,I)=0.0                                                      
      IF(EN <= EIN(7):
) GO TO 700  
      DO 610 J=2,NVIB4                                                  
      IF(EN <= XVIB4(J):
) GO TO 620                                      
  610 CONTINUE                                                          
      J=NVIB4                                                           
  620 A=(YVIB4(J)-YVIB4(J-1))/(XVIB4(J)-XVIB4(J-1))                     
      B=(XVIB4(J-1)*YVIB4(J)-XVIB4(J)*YVIB4(J-1))/(XVIB4(J-1)-XVIB4(J)) 
      QIN(7,I)=(A*EN+B)*1.D-16
  700 CONTINUE 
#                                                           
#  HIGHER HARMONICS                                                     
      QIN(8,I)=0.0                                                      
      IF(EN <= EIN(8):
) GO TO 800                                        
      DO 710 J=2,NVIB5                                                  
      IF(EN <= XVIB5(J):
) GO TO 720                                      
  710 CONTINUE                                                          
      J=NVIB5                                                           
  720 A=(YVIB5(J)-YVIB5(J-1))/(XVIB5(J)-XVIB5(J-1))                     
      B=(XVIB5(J-1)*YVIB5(J)-XVIB5(J)*YVIB5(J-1))/(XVIB5(J-1)-XVIB5(J)) 
      QIN(8,I)=(A*EN+B)*1.D-16                                          
  800 CONTINUE  
#                                                          
#   EXCITATION  CHAPPUIS BAND                                            
      QIN(9,I)=0.0
      IF(EN <= EIN(9):
) GO TO 900                                        
      DO 810 J=2,NEXC1                                                  
      IF(EN <= XEXC1(J):
) GO TO 820                                      
  810 CONTINUE                                                          
      J=NEXC1                                                           
  820 A=(YEXC1(J)-YEXC1(J-1))/(XEXC1(J)-XEXC1(J-1))                     
      B=(XEXC1(J-1)*YEXC1(J)-XEXC1(J)*YEXC1(J-1))/(XEXC1(J-1)-XEXC1(J)) 
      QIN(9,I)=(A*EN+B)*1.D-16                                          
  900 CONTINUE                                                          
#
#   EXCITATION  HARTLEY BAND                                            
      QIN(10,I)=0.0
      IF(EN <= EIN(10):
) GO TO 1000                                      
      DO 910 J=2,NEXC2                                                  
      IF(EN <= XEXC2(J):
) GO TO 920                                      
  910 CONTINUE                                                          
      J=NEXC2                                                           
  920 A=(YEXC2(J)-YEXC2(J-1))/(XEXC2(J)-XEXC2(J-1))                     
      B=(XEXC2(J-1)*YEXC2(J)-XEXC2(J)*YEXC2(J-1))/(XEXC2(J-1)-XEXC2(J)) 
      QIN(10,I)=(A*EN+B)*1.D-16                                         
 1000 CONTINUE                                                          
#                                                          
#   EXCITATION                                                          
      QIN(11,I)=0.0
      IF(EN <= EIN(11):
) GO TO 1100                                      
      DO 1010 J=2,NEXC3                                                 
      IF(EN <= XEXC3(J):
) GO TO 1020                                     
 1010 CONTINUE                                                          
      J=NEXC3                                                           
 1020 A=(YEXC3(J)-YEXC3(J-1))/(XEXC3(J)-XEXC3(J-1))                     
      B=(XEXC3(J-1)*YEXC3(J)-XEXC3(J)*YEXC3(J-1))/(XEXC3(J-1)-XEXC3(J)) 
      QIN(11,I)=(A*EN+B)*1.D-16                                         
 1100 CONTINUE                                                          
#
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)+QIN(1,I)+QIN(2,I)+QIN(3,I)+QIN(4,I)+ 
     /QIN(5,I)+QIN(6,I)+QIN(7,I)+QIN(8,I)+QIN(9,I)+QIN(10,I)+QIN(11,I)
 9000 CONTINUE                                                          
#  SAVE COMPUTE TIME
      IF(EFINAL <= EIN(11):
) NIN=10
      IF(EFINAL <= EIN(10):
) NIN=9
      IF(EFINAL <= EIN(9):
) NIN=8
      IF(EFINAL <= EIN(8):
) NIN=7
      IF(EFINAL <= EIN(7):
) NIN=6
      IF(EFINAL <= EIN(6):
) NIN=5
      IF(EFINAL <= EIN(5):
) NIN=4
      IF(EFINAL <= EIN(4):
) NIN=3                                        
      IF(EFINAL <= EIN(3):
) NIN=2                                        
      IF(EFINAL <= EIN(2):
) NIN=1                                        
      IF(EFINAL <= EIN(1):
) NIN=0                                        
      RETURN                                                            
      # end 
      def GAS54(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)   
      COMMON/RATIO/AN1,AN2,AN3,AN4,AN5,AN6,AN,FRAC(6)              
      COMMON/GASN/NGASN(6)                                    
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)   
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)      
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      DIMENSION XEN(79),YXSEC(79),XION(52),YION(52)
      DIMENSION XDIM(10),YDIM(10)
      DIMENSION XEXC3(28),YEXC3(28),XEXC4(32),YEXC4(32),XEXC5(20)
      DIMENSION YEXC5(20),XEXC6(24),YEXC6(24),YEXC7(12),XEXC7(12)
      DIMENSION YEXC8(12),XEXC8(12),XEL(57),YEL(57)
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME     
#                                            
#   ELASTIC MOMENTUM TRANSFER ENGLAND+ELFORD 1991 (MOD 2003 EL+MC)                     
      DATA XEN/0.00,.005,0.01,.015,0.02,0.03,0.04,0.05,0.06,0.07,
     /0.08,0.09,0.10,0.12,0.13,0.14,0.15,0.16,0.17,0.18,
     /0.19,0.20,0.21,0.22,0.23,0.24,0.26,0.28,0.30,0.32,
     /0.34,0.36,0.38,0.39,0.40,0.41,0.42,0.43,0.44,0.46,
     /0.48,0.50,0.55,0.60,0.65,0.70,0.75,0.80,0.90,1.00,
     /1.20,1.40,1.60,1.80,2.00,2.50,3.00,4.00,5.00,6.00,
     /7.00,8.00,9.00,10.0,12.0,15.0,25.0,35.0,50.0,100.,
     /150.,300.,400.,500.,1000.,2000.,4000.,10000.,100000./
      DATA YXSEC/13.7,13.8,13.9,14.2,15.0,16.5,18.0,20.5,23.0,26.5,
     /30.0,34.0,39.4,54.9,62.9,71.0,78.9,86.5,94.2,102.,
     /109.,115.,121.,127.,133.,139.,149.,159.,168.,177.,
     /186.,195.,204.,208.,211.,214.,217.,219.,220.,219.,
     /215.,209.,190.,174.,161.,151.,143.,136.,123.,113.,
     /95.5,82.0,70.0,60.5,51.5,37.0,29.0,20.0,14.7,10.8,
     /8.17,5.63,4.29,3.37,3.00,2.95,4.00,4.40,3.60,1.35,
     /0.95,0.79,.826,.752,0.57,0.28,0.14,.056,.0056/
# ELASTIC TOTAL  ELFORD AND MCEARCHAN THEORY
      DATA XEL/0.00,.001,.002,.004,.007,0.01,0.02,0.03,0.04,0.05,
     /0.06,0.07,0.08,0.09,0.10,0.15,0.20,0.25,0.30,0.35,
     /0.40,0.45,0.50,0.55,0.60,0.70,0.80,0.90,1.00,1.20, 
     /1.40,1.60,1.80,2.00,3.00,4.00,5.00,6.00,7.00,8.00,
     /9.00,10.0,12.0,15.0,25.0,35.0,50.0,100.,150.,300.,
     /400.,500.,1000.,2000.,4000.,10000.,100000./
      DATA YEL/12.33,17.4,17.9,19.2,21.2,20.4,23.5,26.0,28.2,30.4,
     /32.5,34.7,37.0,39.4,42.0,58.1,81.7,113.,147.,176.,
     /194.,203.,205.,205.,203.,195.,185.,173.,162.,142.,
     /126.,113.,102.,93.1,63.5,46.5,35.3,27.8,22.2,19.4,
     /16.5,14.3,12.5,11.0,9.60,9.00,9.00,8.80,7.50,4.90,
     /3.90,3.40,2.30,1.40,0.90,0.50,0.12/
# IONISATION                                                            
      DATA XION/10.4375,15.0,17.5,20.0,25.0,30.0,35.0,40.0,45.0,        
     /50.0,55.0,60.0,65.0,70.0,75.0,80.0,90.0,100.,125.,                
     /150.,175.,200.,250.,300.,350.,400.,450.,500.,550.,
     /600.,650.,700.,800.,900.,1000.,1500.,2000.,2500.,3000.,           
     /3500.,4000.,4500.,5000.,6000.,7000.,8000.,9000.,10000.,11000.,
     /20000.,50000.,100000./                                            
      DATA YION/0.00,1.13,2.47,2.68,3.79,4.50,5.09,5.44,5.75,           
     /5.95,6.09,6.22,6.27,6.37,6.38,6.42,6.37,6.27,5.92,                
     /5.72,5.44,5.17,4.77,4.34,4.01,3.87,3.46,3.24,3.13,
     /3.07,2.80,2.70,2.37,2.20,2.12,1.62,1.31,1.11,.976,                
     /.859,.763,.691,.612,.513,.431,.373,.332,.300,.274,
     /.150,.060,.030/                              
#  DIMER X-SECTION (ENGLAND AND ELFORD AJP 44(1991)647-675)
      DATA XDIM/.040,.045,0.09,0.17,0.40,4.00,40.0,400.,4000.,100000./
      DATA YDIM/0.00,8.30,8.30,1.25,0.83,.083,.008,.0008,.00008,.000003/
# EXCITATION      
      DATA XEXC3/4.667,4.70,4.80,4.90,5.00,5.10,5.20,5.30,5.40,5.50,
     /5.60,5.70,5.80,5.90,6.00,6.25,6.50,7.00,7.25,7.50,
     /10.0,12.0,15.0,20.0,30.0,100.,1000.,100000./         
      DATA YEXC3/0.00,0.10,0.60,0.25,0.30,0.40,0.55,0.68,0.85,0.95,    
     /0.95,0.90,0.85,0.75,0.70,0.65,0.60,0.50,0.48,0.45,     
     /0.15,0.09,.044,.019,.005,.00015,.000005,.0000000001/              
      DATA XEXC4/4.887,4.90,5.00,5.10,5.20,5.30,5.40,5.50,5.60,5.70,
     /5.80,5.90,6.00,6.25,6.50,7.00,7.25,7.50,10.0,12.0,
     /15.0,20.0,30.0,60.0,100.,150.,200.,400.,1000.,2000.,
     /10000.,100000./
      DATA YEXC4/0.00,0.20,1.20,2.50,1.50,1.40,1.60,2.00,2.40,2.50,     
     /2.45,2.30,2.15,1.95,1.75,1.55,1.50,1.45,0.80,0.60,
     /0.39,0.34,0.27,0.19,0.13,.085,0.06,0.03,.012,.006,
     /.0012,.00012/
      DATA XEXC5/5.461,5.50,5.60,5.70,5.80,5.90,6.00,6.25,6.50,7.00,
     /7.25,7.50,10.0,15.0,20.0,30.0,40.0,100.,1000.,100000./
      DATA YEXC5/0.00,0.80,2.00,3.20,3.50,3.65,3.60,3.45,3.25,2.60,     
     /2.45,2.30,0.90,0.23,0.10,.028,.012,.0009,.000001,.00000001/
      DATA XEXC6/6.704,7.00,7.50,8.00,9.00,10.0,11.0,12.5,15.0,20.0,
     /25.0,35.0,40.0,50.0,60.0,100.,150.,200.,400.,1000.,
     /2000.,5000.,10000.,100000./
      DATA YEXC6/0.00,0.08,0.20,0.50,1.50,2.05,2.50,3.05,3.55,4.25,    
     /4.55,4.50,4.40,4.15,3.75,3.00,2.45,2.10,1.25,0.65,
     /0.34,0.14,0.07,.007/
      DATA XEXC7/7.926,9.00,10.0,20.0,40.0,60.0,100.,200.,1000.,2000.,
     /10000.,100000./
      DATA YEXC7/0.00,0.25,0.15,0.14,0.13,0.11,0.07,0.04,.008,.004, 
     /.0008,.00008/          
      DATA XEXC8/8.60,10.0,11.0,20.0,40.0,60.0,100.,200.,1000.,2000.,
     /10000.,100000./       
      DATA YEXC8/0.00,0.75,0.45,0.42,0.39,0.32,0.21,0.12,.024,.012,
     /.0024,.00024/         
# -------------------------------------------------------------------       
      NAME='MERCURY DIMER03'                                            
#-------------------------------------------------------------------                                                                        
# -------------------------------------------------------------------- 
#  ISOTROPIC SCATTERING VERSION OF MERCURY WITH DIMERS USES AMALGAM OF
#  ELFORD AND MCEARCHAN  2003             AND
#  ENGLAND AND ELFORD    1993 
#  CONTAINS POSSIBLE EXTENSION TO ANISOTROPIC SCATTERING USING THE 
#  THEORETICAL ELASTIC X-SECTION OF ELFORD AND MCEARCHAN. 
#               
#  DIMER FRACTION IN GAS FOR NITROGEN AND HELIUM MIXTURES AND PURE 
#  MERCURY  SHOWN AS PARAMETER EANDE (BELOW) FOR GENERAL PURPOSE USE 
#  HAVE SET EANDE TO NITROGEN MIXTURE VALUE. 
#  FOR LARGE FRACTIONS OF MERCURY AT LOW FIELDS USE BOLTZMAN SOLUTION
#  SINCE  BACKGROUND GAS MOVEMENT (KT TERM) IS IMPORTANT . 
#  USE MONTE CARLO (KT=0) BACKGROUND GAS STATIONARY FOR MOST OTHER CASES 
# --------------------------------------------------------------------
#  
#  FIND FRACTION OF GAS FOR DIMER NORMALISATION
# 
      GFRAC=0.0
      DO 11 IDGS=1,6
       IF(NGASN(IDGS):
 == 54) :
        GFRAC=FRAC(IDGS)
       # endIF
   11 CONTINUE
      GFRAC=GFRAC/100.0
#-------------------------------------------------------------
#  DIMER NORMALISATION
#  PURE MERCURY  EANDE=0.00221
#  N2-HG MIX     EANDE=0.00162
#  HE-HG MIX     EANDE=0.00067
      EANDE=0.00221     
      DNORM=GFRAC*(573.0/(273.15+TEMPC))*TORR/760.0
      DNORM=DNORM*EANDE 
#---------------------------------------------------------------  
      NION=1  
      NATT=1
      NIN=8 
      NNULL=0
#                                     
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0                          
      NDATA=79
      NEL=57                                                          
      NIOND=52
      NDIM=10                                                    
      NEXC3=28
      NEXC4=32
      NEXC5=20
      NEXC6=24
      NEXC7=12
      NEXC8=12
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(200.59*AMU)                                       
      E(3)=10.4375                                                      
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
      EOBY(1)=10.4375 
      EIN(1)=-0.040
      EIN(2)=0.040                                                     
      EIN(3)=4.667 
      EIN(4)=4.887
      EIN(5)=5.461
      EIN(6)=6.704   
      EIN(7)=7.926
      EIN(8)=8.60
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC (ISOT)  MERCURY      '
      SCRPT(3)=' IONISATION    ELOSS= 10.4375 '
      SCRPT(4)='                              '
      SCRPT(5)='                              ' 
      SCRPT(6)='                              '
      SCRPT(7)=' DIMER SUPER   ELOSS= -0.040  '
      SCRPT(8)=' DIMER         ELOSS=  0.040  '
      SCRPT(9)=' EXC 3P0       ELOSS=  4.667  '
      SCRPT(10)=' EXC 3P1       ELOSS=  4.887  '
      SCRPT(11)=' EXC 3P2       ELOSS=  5.461  '
      SCRPT(12)=' EXC 1P1       ELOSS=  6.704  '
      SCRPT(13)=' EXC 1S0       ELOSS=  7.926  '
      SCRPT(14)=' EXC HIGH      ELOSS=  8.60   '
      APOPDM=math.exp(EIN(1)/AKT)
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP 
# USE LOG INTERPOLATION FOR ELASTIC AND MT X-SECTIONS                                                            
      IF(EN <= XEL(2):
) : 
       QELA=YEL(1)*1.D-16     
       GO TO 125 
      # endIF 
      DO 110 J=2,NEL                                                    
      IF(EN <= XEL(J):
) GO TO 120                                        
  110 CONTINUE                                                          
      J=NEL   
  120 YXJ=math.log(YEL(J))
      YXJ1=math.log(YEL(J-1))
      XNJ=math.log(XEL(J))
      XNJ1=math.log(XEL(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QELA=math.exp(A*math.log(EN)+B)*1.D-16 
  125 IF(EN <= XEN(2)) :
       QMOM=YXSEC(1)*1.D-16
       GO TO 200
      # endIF                                                             
      DO 150 J=2,NDATA                                                  
      IF(EN <= XEN(J):
) GO TO 160                                        
  150 CONTINUE                                                          
      J=NDATA 
  160 YXJ=math.log(YXSEC(J))
      YXJ1=math.log(YXSEC(J-1))
      XNJ=math.log(XEN(J))
      XNJ1=math.log(XEN(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QMOM=math.exp(A*math.log(EN)+B)*1.D-16                                    
  200 CONTINUE
#------------------------------------------------------------------ 
# ANISOTROPIC VERSION DECOMMENT 2 LINES BELOW AND COMMENT NEXT TWO
# ALSO CHANGE SCRIPT DESCRIPTOR  : SCRPT(2) AND SET KEL(2)=1
#     PEQEL(2,I)=0.5+(QELA-QMOM)/QELA
#     Q(2,I)=QELA
#--------------------------------------------------------------
      PEQEL(2,I)=0.0
      Q(2,I)=QMOM   
#--------------------------------------------------------------      
# IONISATION                                                                  
      Q(3,I)=0.0                                                        
      IF(EN <= E(3):
) GO TO 230                                          
      DO 210 J=2,NIOND                                                  
      IF(EN <= XION(J):
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NIOND                                                  
  220 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.0D-16                                           
  230 CONTINUE                                                          
      Q(4,I)=0.0      
      QATT(1,I)=Q(4,I)                            
      Q(5,I)=0.0                                                        
      Q(6,I)=0.0
# DIMER SUPERELASTIC 
      QIN(1,I)=0.0                              
      IF(EN <= 0.0):
 GO TO 300
      DO 250 J=2,NDIM
      IF((EN+EIN(2):
) <= XDIM(J)) GO TO 270
  250 CONTINUE
      J=NDIM
  270 A=(YDIM(J)-YDIM(J-1))/(XDIM(J)-XDIM(J-1))
      B=(XDIM(J-1)*YDIM(J)-XDIM(J)*YDIM(J-1))/(XDIM(J-1)-XDIM(J))
      QIN(1,I)=(EN+EIN(2))*(A*(EN+EIN(2))+B)*1.D-16/EN
      QIN(1,I)=QIN(1,I)*APOPDM/(1.0+APOPDM)
      QIN(1,I)=QIN(1,I)*DNORM
  300 CONTINUE
# DIMER
      QIN(2,I)=0.0
      IF(EN <= EIN(2):
) GO TO 340
      DO 310 J=2,NDIM
      IF(EN <= XDIM(J):
) GO TO 320
  310 CONTINUE
      J=NDIM
  320 A=(YDIM(J)-YDIM(J-1))/(XDIM(J)-XDIM(J-1))
      B=(XDIM(J-1)*YDIM(J)-XDIM(J)*YDIM(J-1))/(XDIM(J-1)-XDIM(J))
      QIN(2,I)=(A*EN+B)*1.D-16
      QIN(2,I)=QIN(2,I)/(1.0+APOPDM)
      QIN(2,I)=QIN(2,I)*DNORM         
  340 CONTINUE                                                  
#  EXC 3P0                                                                     
      QIN(3,I)=0.0                                                      
      IF(EN <= EIN(3):
) GO TO 370                                        
      DO 350 J=2,NEXC3                                                  
      IF(EN <= XEXC3(J):
) GO TO 360                                      
  350 CONTINUE                                                          
      J=NEXC3                                                           
  360 A=(YEXC3(J)-YEXC3(J-1))/(XEXC3(J)-XEXC3(J-1))                     
      B=(XEXC3(J-1)*YEXC3(J)-XEXC3(J)*YEXC3(J-1))/(XEXC3(J-1)-XEXC3(J)) 
      QIN(3,I)=(A*EN+B)*1.0D-16                                         
  370 CONTINUE
# EXC 3P1   
      QIN(4,I)=0.0                                                      
      IF(EN <= EIN(4):
) GO TO 470                                        
      DO 450 J=2,NEXC4                                                  
      IF(EN <= XEXC4(J):
) GO TO 460                                      
  450 CONTINUE                                                          
      J=NEXC4                                                           
  460 A=(YEXC4(J)-YEXC4(J-1))/(XEXC4(J)-XEXC4(J-1))                     
      B=(XEXC4(J-1)*YEXC4(J)-XEXC4(J)*YEXC4(J-1))/(XEXC4(J-1)-XEXC4(J)) 
      QIN(4,I)=(A*EN+B)*1.0D-16                                         
  470 CONTINUE
#  EXC 3P2   
      QIN(5,I)=0.0                                                      
      IF(EN <= EIN(5):
) GO TO 570                                        
      DO 550 J=2,NEXC5                                                  
      IF(EN <= XEXC5(J):
) GO TO 560                                      
  550 CONTINUE                                                          
      J=NEXC5                                                           
  560 A=(YEXC5(J)-YEXC5(J-1))/(XEXC5(J)-XEXC5(J-1))                     
      B=(XEXC5(J-1)*YEXC5(J)-XEXC5(J)*YEXC5(J-1))/(XEXC5(J-1)-XEXC5(J)) 
      QIN(5,I)=(A*EN+B)*1.0D-16                                         
  570 CONTINUE
# EXC 1P1  
      QIN(6,I)=0.0                                                      
      IF(EN <= EIN(6):
) GO TO 670                                        
      DO 650 J=2,NEXC6                                                  
      IF(EN <= XEXC6(J):
) GO TO 660                                      
  650 CONTINUE                                                          
      J=NEXC6                                                           
  660 A=(YEXC6(J)-YEXC6(J-1))/(XEXC6(J)-XEXC6(J-1))                     
      B=(XEXC6(J-1)*YEXC6(J)-XEXC6(J)*YEXC6(J-1))/(XEXC6(J-1)-XEXC6(J)) 
      QIN(6,I)=(A*EN+B)*1.0D-16                                         
  670 CONTINUE
# EXC 1S0   
      QIN(7,I)=0.0                                                      
      IF(EN <= EIN(7):
) GO TO 770                                        
      DO 750 J=2,NEXC7                                                  
      IF(EN <= XEXC7(J):
) GO TO 760                                      
  750 CONTINUE                                                          
      J=NEXC7                                                           
  760 A=(YEXC7(J)-YEXC7(J-1))/(XEXC7(J)-XEXC7(J-1))                     
      B=(XEXC7(J-1)*YEXC7(J)-XEXC7(J)*YEXC7(J-1))/(XEXC7(J-1)-XEXC7(J)) 
      QIN(7,I)=(A*EN+B)*1.0D-16                                         
  770 CONTINUE 
# EXC SUM HIGHER LEVELS  
      QIN(8,I)=0.0                                                      
      IF(EN <= EIN(8):
) GO TO 870                                        
      DO 850 J=2,NEXC8                                                  
      IF(EN <= XEXC8(J):
) GO TO 860                                      
  850 CONTINUE                                                          
      J=NEXC8                                                           
  860 A=(YEXC8(J)-YEXC8(J-1))/(XEXC8(J)-XEXC8(J-1))                     
      B=(XEXC8(J-1)*YEXC8(J)-XEXC8(J)*YEXC8(J-1))/(XEXC8(J-1)-XEXC8(J)) 
      QIN(8,I)=(A*EN+B)*1.0D-16                                         
  870 CONTINUE 
      Q(1,I)=Q(2,I)+Q(3,I)+QIN(1,I)+QIN(2,I)+QIN(3,I)+QIN(4,I)+QIN(5,I)+
     /QIN(6,I)+QIN(7,I)+QIN(8,I)                                      
  900 CONTINUE
      IF(EFINAL < EIN(8):
) NIN=7
      IF(EFINAL < EIN(7):
) NIN=6
      IF(EFINAL < EIN(6):
) NIN=5
      IF(EFINAL < EIN(5):
) NIN=4
      IF(EFINAL < EIN(4):
) NIN=3
      IF(EFINAL < EIN(3):
) NIN=2
      IF(EFINAL < EIN(2):
) NIN=1
      RETURN                                                            
      # end     
      def GAS55(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY   
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)         
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      DIMENSION XEL(25),YEL(25),XVIB1(16),YVIB1(16),XVIB2(16),YVIB2(16),
     /XVIB3(15),YVIB3(15),XVIB4(15),YVIB4(15),XEXC(18),YEXC(18),
     /XION(66),YION(66),XATT(26),YATT(26)  
      CHARACTER*50 SCRPT(300),SCRPTN(10)             
      CHARACTER*25 NAME
#
# ELASTIC + EFFECTIVE ROTATION                                                       
      DATA XEL/0.00,.001,0.01,0.10,0.40,0.60,0.80,1.00,1.20,1.50,       
     /1.75,2.00,2.30,3.00,5.00,7.00,10.0,15.0,20.0,30.0, 
     /50.0,100.,1000.,10000.,100000./               
      DATA YEL/1900.,1900.,1600.,160.,40.0,23.5,13.0,8.10,7.50,9.00,
     /15.0,18.9,21.0,17.0,21.8,21.8,12.8,8.30,5.20,3.30,
     /1.75,0.75,0.07,.007,.0007/        
# VIBRATION                                                       
      DATA XVIB1/.1466,0.80,1.00,1.50,2.00,2.30,2.70,3.00,5.00,7.00,
     /10.0,20.0,100.,1000.,10000.,100000./                              
      DATA YVIB1/0.00,.0001,0.02,0.22,0.55,0.60,0.60,0.56,0.33,0.20,    
     /0.10,.05,.001,.0001,.00001,.000001/                               
      DATA XVIB2/.3242,0.80,1.00,1.50,2.00,2.30,2.70,3.00,5.00,7.00,
     /10.0,20.0,100.,1000.,10000.,100000./                              
      DATA YVIB2/0.00,.0001,0.10,1.20,2.30,2.15,1.50,1.20,0.30,0.10,
     /0.05,.025,.001,.0001,.00001,.000001/ 
      DATA XVIB3/.4708,0.90,1.00,1.50,2.00,2.30,2.70,3.00,5.00,7.00,
     /10.0,100.,1000.,10000.,100000./ 
      DATA YVIB3/0.00,.001,.006,0.24,0.42,0.50,0.42,0.25,0.05,0.01,
     /.001,.0001,.00001,.000001,.0000001/ 
      DATA XVIB4/.6484,0.90,1.00,1.50,2.00,2.30,2.70,3.00,5.00,7.00,
     /10.0,100.,1000.,10000.,100000./ 
      DATA YVIB4/0.00,.001,0.01,1.15,1.40,1.45,1.40,0.80,0.16,0.03,
     /.001,.0001,.00001,.000001,.0000001/                               
      DATA XION/10.48,11.0,11.5,12.0,12.5,13.0,13.5,14.0,14.5,15.0,     
     /16.0,17.0,18.0,19.0,20.0,22.0,24.0,26.0,28.0,30.0,
     /32.0,34.0,36.0,38.0,40.0,45.0,50.0,55.0,60.0,65.0,
     /70.0,80.0,90.0,100.,110.,120.,130.,150.,170.,200.,
     /250.,300.,350.,400.,450.,500.,550.,600.,650.,700.,
     /750.,800.,900.,1000.,1200.,1500.,2000.,3000.,4000.,7000.,
     /10000.,14000.,20000.,40000.,60000.,100000./
      DATA YION/0.00,.088,.175,.262,.349,.435,.518,.621,.724,.825,     
     /1.02,1.22,1.42,1.62,1.79,2.11,2.38,2.62,2.82,3.01,
     /3.17,3.30,3.42,3.52,3.61,3.77,3.88,3.94,3.98,3.99,
     /3.99,3.95,3.88,3.80,3.71,3.61,3.52,3.33,3.16,2.93,
     /2.61,2.36,2.15,1.98,1.83,1.71,1.60,1.51,1.42,1.35,
     /1.28,1.22,1.12,1.04,.903,.758,.603,.433,.341,.212,
     /.155,.116,.085,.046,.032,.020/
      DATA XATT/1.50,1.75,2.00,2.25,2.50,2.75,3.00,3.25,4.75,5.00,      
     /5.25,5.50,5.65,6.00,6.25,6.50,7.00,7.50,8.00,8.50,      
     /9.00,9.50,10.0,10.5,11.0,11.5/                         
      DATA YATT/0.00,.0023,.0088,.019,.018,.012,.003,.0001,.0001,.0007,
     /.005,.010,.010,.0048,.0012,.0001,.0001,.0018,.0024,.0018,
     /.0018,.003,.0033,.001,.0001,.0000001/                             
      DATA XEXC/7.85,8.00,9.00,10.0,12.0,15.0,20.0,25.0,30.0,40.0,
     /60.0,100.,150.,200.,300.,1000.,10000.,100000./                    
      DATA YEXC/0.00,0.40,2.00,3.00,3.80,4.20,4.60,4.60,4.20,3.80,
     /2.90,2.30,1.70,1.40,1.15,0.55,.055,.0055/  
#------------------------------------------------------------------         
      NAME='H2S       2003 '                                            
# -------------------------------------------------------------------- 
#   NO DRIFT VELOCITY AVAILABLE IN PURE H2S USED DATA OF MIXTURE IN C2H4
#   FROM HURST ET AL. AND DIFFUSION FROM MILLICAN AND WALKER.  
#   ELASTIC AND VIBRATION XSECTIONS FROM ELECTRON SCATTERING BY :
#   GULLEY ET AL AND ROHR . ATTACHMENT FROM AZRIA ET AL. 
#   IONISATION : BEB X-SECTIONS OF KIM
#    NB. DT OF MILLICAN AND WALKER AFFECTED BY ATTACHMENT ABOVE 40 TD.
# ---------------------------------------------------------------------
      NION=1 
      NATT=1
      NIN=9
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0       
      NEL=25                                                          
      NVIB1=16                                                          
      NVIB2=16 
      NVIB3=15
      NVIB4=15                                                         
      NIOND=66                                                          
      NATT1=26                                                          
      NEXC=18                                                           
      AMP1=0.1875   
      AMP2=0.1725   
      AMPVIB1=0.075   
      AMPVIB2=0.375   
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(34.08088*AMU)                                     
      E(3)=10.48                                                        
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
      EOBY(1)=10.48
      EIN(1)=-0.025
      EIN(2)=0.025
      EIN(3)=-0.075
      EIN(4)=0.075                                                      
      EIN(5)=0.1466                                                     
      EIN(6)=0.3242                                                     
      EIN(7)=0.4708                                                     
      EIN(8)=0.6484                                                     
      EIN(9)=7.85
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       H2S            '
      SCRPT(3)=' IONISATION    ELOSS= 10.48   '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      SCRPT(7)=' ROT R1        ELOSS= -0.025  '
      SCRPT(8)=' ROT R1        ELOSS=  0.025  '
      SCRPT(9)=' ROT R2        EL0SS= -0.075  '
      SCRPT(10)=' ROT R2        ELOSS=  0.075  '
      SCRPT(11)=' VIB V2        ELOSS=  0.1466 '
      SCRPT(12)=' VIB V13       ELOSS=  0.3242 '
      SCRPT(13)=' (V13+V2)+HIGH ELOSS=  0.4708 '
      SCRPT(14)=' 2V13+HIGH     ELOSS=  0.6484 '
      SCRPT(15)=' EXC           ELOSS=  7.85   '
      APOP1=math.exp(EIN(1)/AKT)
      APOP2=math.exp(EIN(3)/AKT)                                            
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP  
      Q(2,I)=0.0
      IF(EN <= XEL(2):
) :
       Q(2,I)=YEL(2)*1.D-16
       GO TO 30
      # endIF                                             
      DO 10 J=2,NEL                                                     
      IF(EN <= XEL(J):
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NEL    
   20 Y1=math.log(YEL(J))
      Y2=math.log(YEL(J-1)) 
      X1=math.log(XEL(J))
      X2=math.log(XEL(J-1))                                                 
      A=(Y1-Y2)/(X1-X2)                                                 
      B=(X2*Y1-X1*Y2)/(X2-X1)                                           
      Q(2,I)=math.exp(A*math.log(EN)+B)*1.0D-16                                 
#                                                                       
   30 Q(3,I)=0.0                                                        
      IF(EN < E(3):
) GO TO 200                                          
      DO 110 J=2,NIOND                                                  
      IF(EN <= XION(J):
) GO TO 120                                       
  110 CONTINUE                                                          
      J=NIOND                                                           
  120 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.D-16                                            
  200 CONTINUE                                                          
#                                                                       
      Q(4,I)=0.0
      QATT(1,I)=Q(4,I)                                                  
      IF(EN < XATT(1):
 or EN > XATT(NATT1)) GO TO 300                  
      DO 210 J=2,NATT1                                                  
      IF(EN <= XATT(J):
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NATT1                                                           
  220 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))                         
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))       
      Q(4,I)=(A*EN+B)*1.D-16  
      QATT(1,I)=Q(4,I)                                          
  300 CONTINUE                                                          
      Q(5,I)=0.0                                                        
      Q(6,I)=0.0                                                        
#                                                                      
#  SUPERELASTIC  ROT1
#
      QIN(1,I)=0.0
      IF(EN <= 0.0):
 GO TO 1300
      EFAC=math.sqrt(1.0-(EIN(1)/EN))
      QIN(1,I)=AMP1*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      QIN(1,I)=QIN(1,I)*APOP1/(1.0+APOP1)*1.D-16
#  ROT1     
 1300 QIN(2,I)=0.0                                                      
      IF(EN <= EIN(2):
) GO TO 1400
      EFAC=math.sqrt(1.0-(EIN(2)/EN))                                       
      QIN(2,I)=AMP1*math.log((1.0+EFAC)/(1.0-EFAC))/EN 
      QIN(2,I)=QIN(2,I)/(1.0+APOP1)*1.D-16                     
# 
#  SUPERELASTIC ROT2
#
 1400 QIN(3,I)=0.0                                                      
      IF(EN <= 0.0):
 GO TO 1500                                          
      EFAC=math.sqrt(1.0-(EIN(3)/EN))                                       
      QIN(3,I)=AMP2*math.log((EFAC+1.0)/(EFAC-1.0))/EN                      
      QIN(3,I)=QIN(3,I)*APOP2/(1.0+APOP2)*1.D-16                        
#  ROT2                                                                 
 1500 QIN(4,I)=0.0                                                      
      IF(EN <= EIN(4):
) GO TO 1600                                       
      EFAC=math.sqrt(1.0-(EIN(4)/EN))                                       
      QIN(4,I)=AMP2*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      QIN(4,I)=QIN(4,I)/(1.0+APOP2)*1.D-16                      
#  VIB V2
 1600 QIN(5,I)=0.0                                                      
      IF(EN <= EIN(5):
) GO TO 400   
      EFAC=math.sqrt(1.0-(EIN(5)/EN))
      QIN(5,I)=AMPVIB1*math.log((1.0+EFAC)/(1.0-EFAC))/EN                   
      DO 310 J=2,NVIB1                                                  
      IF(EN <= XVIB1(J):
) GO TO 320                                      
  310 CONTINUE                                                          
      J=NVIB1                                                           
  320 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J)) 
      QIN(5,I)=(QIN(5,I)+(A*EN+B))*1.D-16                               
  400 CONTINUE                                                          
#  VIB V13 COMPOSITE                                                        
      QIN(6,I)=0.0                                                      
      IF(EN <= EIN(6):
) GO TO 500
      EFAC=math.sqrt(1.0-(EIN(6)/EN))
      QIN(6,I)=AMPVIB2*math.log((1.0+EFAC)/(1.0-EFAC))/EN                   
      DO 410 J=2,NVIB2                                                  
      IF(EN <= XVIB2(J):
) GO TO 420                                      
  410 CONTINUE                                                          
      J=NVIB2                                                           
  420 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J)) 
      QIN(6,I)=(QIN(6,I)+(A*EN+B))*1.D-16                               
  500 CONTINUE                                                          
#  VIB V2+V13 AND HIGHER SERIES                                         
      QIN(7,I)=0.0                                                      
      IF(EN <= EIN(7):
) GO TO 600                                        
      DO 510 J=2,NVIB3                                                  
      IF(EN <= XVIB3(J):
) GO TO 520                                      
  510 CONTINUE                                                          
      J=NVIB3                                                           
  520 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J)) 
      QIN(7,I)=(A*EN+B)*1.D-16                                         
  600 CONTINUE                                                          
#  VIB 2V13 AND HIGHER SERIES                                           
      QIN(8,I)=0.0                                                      
      IF(EN <= EIN(8):
) GO TO 700                                        
      DO 610 J=2,NVIB4                                                  
      IF(EN <= XVIB4(J):
) GO TO 620                                      
  610 CONTINUE                                                          
      J=NVIB4                                                           
  620 A=(YVIB4(J)-YVIB4(J-1))/(XVIB4(J)-XVIB4(J-1))                     
      B=(XVIB4(J-1)*YVIB4(J)-XVIB4(J)*YVIB4(J-1))/(XVIB4(J-1)-XVIB4(J)) 
      QIN(8,I)=(A*EN+B)*1.D-16                                    
  700 CONTINUE                                                          
#  SINGLE EFFECTIVE EXCITATION LEVEL                                    
      QIN(9,I)=0.0                                                      
      IF(EN <= EIN(9):
) GO TO 800                                        
      DO 710 J=2,NEXC                                                  
      IF(EN <= XEXC(J):
) GO TO 720                                      
  710 CONTINUE                                                          
      J=NEXC                                                           
  720 A=(YEXC(J)-YEXC(J-1))/(XEXC(J)-XEXC(J-1))                     
      B=(XEXC(J-1)*YEXC(J)-XEXC(J)*YEXC(J-1))/(XEXC(J-1)-XEXC(J)) 
      QIN(9,I)=(A*EN+B)*1.D-16                                       
  800 CONTINUE                                                          
#---------------------------------------------------------------------
#   GET ELASTIC FROM ELASTIC + ROTATION  X-SECTION 
      Q(2,I)=Q(2,I)-QIN(1,I)-QIN(2,I)-QIN(3,I)-QIN(4,I) 
#      
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)+QIN(7,I)+QIN(8,I)+
     /QIN(9,I)+QIN(1,I)+QIN(2,I)+QIN(3,I)+QIN(4,I)+QIN(5,I)+QIN(6,I)
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      IF(EFINAL <= EIN(9):
) NIN=8 
      IF(EFINAL <= EIN(8):
) NIN=7 
      IF(EFINAL <= EIN(7):
) NIN=6   
      IF(EFINAL <= EIN(6):
) NIN=5                                        
      IF(EFINAL <= EIN(5):
) NIN=4                                        
#                                                                       
      RETURN                                                            
      # end
      def GAS56(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)  
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)         
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      DIMENSION XEN(57),YXSEC(57),XION(46),YION(46),XATT(16),YATT(16),  
     /XVIB1(34),YVIB1(34),XVIB2(28),YVIB2(28),XVIB3(28),YVIB3(28),      
     /XVIB4(25),YVIB4(25),XVIB5(19),YVIB5(19),XEXC1(25),YEXC1(25),
     /XEXC2(23),YEXC2(23),XEXC3(19),YEXC3(19)
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME     
#                                            
      DATA XEN/0.00,.001,.002,.004,.007,0.01,.015,0.02,.025,0.03,
     /0.04,0.05,0.06,0.07,0.08,0.09,0.10,0.12,0.14,0.17,           
     /0.20,0.25,0.30,0.35,0.40,0.50,0.60,0.80,1.00,1.50,                
     /2.00,3.00,4.00,5.00,6.00,7.00,8.00,9.00,10.0,15.0,                
     /20.0,30.0,40.0,70.0,100.,140.,200.,250.,300.,500.,                
     /1000.,1500.,3000.,6000.,10000.,20000.,100000./
      DATA YXSEC/60.0,59.0,56.0,54.0,51.0,45.0,35.0,27.5,22.5,19.0,     
     /14.0,10.7,9.40,7.80,6.90,6.00,5.50,5.30,5.55,6.55,      
     /8.05,11.5,13.5,14.5,15.5,16.5,17.5,18.5,19.5,21.0,                
     /22.5,25.0,29.0,31.0,34.0,36.0,36.0,34.0,31.0,21.5,                
     /17.0,11.5,8.80,5.20,3.75,2.21,1.36,0.98,0.81,0.46,                
     /0.20,0.13,0.06,.026,.016,.0065,.0013/
      DATA XION/10.67,11.2,12.7,13.7,14.7,17.2,20.0,25.0,30.0,35.0,     
     /40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,                
     /175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,                
     /800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,5000.,
     /7000.,10000.,15000.,30000.,60000.,100000./
      DATA YION/0.00,0.27,0.61,0.99,1.48,3.00,4.30,6.77,8.41,9.58,      
     /10.4,11.1,12.0,12.7,13.1,13.3,13.3,13.3,12.9,12.2,                
     /11.5,10.9,10.1,8.89,8.12,7.51,6.84,6.41,5.63,5.19,                
     /4.77,4.25,3.97,3.43,2.95,2.68,2.44,2.11,1.81,1.20,
     /0.90,0.66,0.47,.254,.136,.086/
      DATA XATT/6.85,7.00,7.20,7.50,8.00,8.50,9.00,9.50,10.0,10.5,      
     /11.0,11.5,12.0,12.5,13.0,13.2/                                    
      DATA YATT/0.00,1.15,1.92,2.90,4.90,7.72,11.6,18.1,25.7,21.6,      
     /17.0,10.9,6.14,2.30,0.87,0.00/                                    
      DATA XVIB1/.052,.055,.060,.065,.070,.075,0.08,0.10,0.12,0.14,     
     /0.20,0.25,0.30,0.40,0.50,0.70,1.00,1.50,2.00,3.00,
     /4.00,5.00,6.00,7.50,8.50,10.0,15.0,20.0,30.0,40.0,                
     /100.,1000.,10000.,100000./                                        
      DATA YVIB1/0.00,.014,.021,.024,.026,.027,.028,.028,.027,.025,     
     /.021,.018,.016,.014,.012,.009,.008,.012,.015,.024,
     /.036,.047,.060,.079,.079,.065,.045,.025,.014,.008,                
     /.002,.0002,.00002,.00002/                                         
      DATA XVIB2/.108,.125,0.15,0.20,0.23,0.25,0.30,0.40,0.50,0.70,     
     /1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.50,8.50,10.0,                
     /15.0,20.0,30.0,40.0,100.,1000.,10000.,100000./                    
      DATA YVIB2/0.00,0.27,0.52,0.71,0.73,0.73,0.66,0.56,0.49,0.41,     
     /0.32,0.32,0.39,0.63,0.93,1.22,1.57,2.06,2.06,1.69,                
     /1.17,0.66,0.35,0.22,0.05,.005,.0005,.00005/                       
      DATA XVIB3/.173,0.18,0.19,0.20,0.23,0.25,0.30,0.40,0.50,0.70,     
     /1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.50,8.50,10.0,                
     /15.0,20.0,30.0,40.0,100.,1000.,10000.,100000./                    
      DATA YVIB3/0.00,0.13,0.27,0.38,0.49,0.53,0.56,0.53,0.49,0.42,     
     /0.34,0.31,0.33,0.48,0.72,0.94,1.21,1.59,1.59,1.30,                
     /0.90,0.51,0.27,0.17,0.04,.004,.0004,.00004/                       
      DATA XVIB4/.363,0.40,0.45,0.50,0.60,0.70,0.80,1.00,1.50,2.00,     
     /3.00,4.00,5.00,6.00,7.50,8.50,10.0,15.0,20.0,30.0,                
     /40.0,100.,1000.,10000.,100000./                                   
      DATA YVIB4/0.00,0.47,0.63,0.70,0.74,0.74,0.70,0.66,0.63,0.69,     
     /1.00,1.43,1.86,2.40,2.65,2.29,1.69,0.97,0.43,0.24,                
     /0.14,0.03,.003,.0003,.00003/                                      
      DATA XVIB5/.519,1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.50,8.50,     
     /10.0,15.0,20.0,30.0,40.0,100.,1000.,10000.,100000./               
      DATA YVIB5/0.00,.001,0.01,.033,.085,0.16,0.20,0.27,0.30,0.25,     
     /.193,.112,.047,.027,.017,.003,.0003,.00003,.000003/               
      DATA XEXC1/7.40,8.70,9.70,11.0,12.0,14.0,16.0,20.0,25.0,30.0,     
     /40.0,60.0,80.0,100.,150.,200.,300.,400.,600.,1000.,               
     /2000.,4000.,10000.,20000.,100000./                                
      DATA YEXC1/0.00,1.30,1.89,2.02,2.08,2.15,2.15,2.15,2.15,2.15,     
     /2.21,2.21,2.15,2.02,1.69,1.56,1.30,1.22,1.04,0.68,                
     /0.33,0.17,0.06,.034,.007/                                         
      DATA XEXC2/9.70,10.7,11.7,14.0,16.0,20.0,25.0,30.0,               
     /40.0,60.0,80.0,100.,150.,200.,300.,400.,600.,1000.,               
     /2000.,4000.,10000.,20000.,100000./
      DATA YEXC2/0.00,0.19,0.40,0.75,1.16,1.56,1.82,1.98,               
     /2.15,2.21,2.15,2.02,1.69,1.56,1.30,1.22,1.04,0.68,                
     /0.32,0.17,0.06,.034,.006/                                         
      DATA XEXC3/17.0,20.0,25.0,30.0,40.0,60.0,80.0,100.,150.,200.,     
     /300.,400.,600.,1000.,2000.,4000.,10000.,20000.,100000./           
      DATA YEXC3/0.00,0.43,0.94,1.30,1.82,2.15,2.15,2.02,1.69,1.56,     
     /1.30,1.22,1.04,0.68,0.33,0.17,0.07,.034,.006/                     
#--------------------------------------------------------
      NAME=' N-BUTANE 2003 '                                            
# ---------------------------------------------------------------------
#  NO EXPERIMENTAL DATA AVAILABLE ON DIFFUSION . DRIFT VELOCITY DATA
#  FROM FLORIANO,GEE AND FREEMAN USED. 
#  ANALYSIS : FIXED INELASTIC X-SECTIONS TO ISOBUTANE VALUES AND VARIED
#  ELASTIC X-SECTION TO OBTAIN FIT TO DRIFT VELOCITY.
#  NO USEFUL ELECTRON SCATTERING DATA AVAILABLE.
# ---------------------------------------------------------------------
#
      NION=1
      NATT=1
      NIN=10
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0                                                          
      NDATA=57                                                          
      NIOND=46                                                          
      NATT1=16                                                          
      NVIB1=34
      NVIB2=28                                                          
      NVIB3=28                                                          
      NVIB4=25
      NVIB5=19
      NEXC1=25                                                          
      NEXC2=23                                                          
      NEXC3=19
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(58.1234*AMU)                                      
      E(3)=10.67                                                        
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
      EOBY(1)=10.67  
      EIN(1)=-0.052                                            
      EIN(2)=0.052
      EIN(3)=-0.108
      EIN(4)=0.108                                                      
      EIN(5)=0.173                                                      
      EIN(6)=0.363
      EIN(7)=0.519
      EIN(8)=7.4                                                        
      EIN(9)=9.70                                                       
      EIN(10)=17.0
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       N-BUTANE       '
      SCRPT(3)=' IONISATION    ELOSS= 10.67   '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      SCRPT(7)=' VIB           ELOSS= -0.052  '
      SCRPT(8)=' VIB           ELOSS=  0.052  '
      SCRPT(9)=' VIB           ELOSS= -0.108  '
      SCRPT(10)=' VIB           ELOSS=  0.108  '
      SCRPT(11)=' VIB           ELOSS=  0.173  '
      SCRPT(12)=' VIB           ELOSS=  0.363  '
      SCRPT(13)=' VIB           ELOSS=  0.519  '
      SCRPT(14)=' EXC           ELOSS=  7.4    '
      SCRPT(15)=' EXC           ELOSS=  9.70   '
      SCRPT(16)=' EXC           ELOSS= 17.0    '
      APOP=math.exp(EIN(1)/AKT)
      HPOP=math.exp(EIN(3)/AKT)
      EN=-ESTEP/2.0                                      
      DO 1000 I=1,NSTEP                                              
      EN=EN+ESTEP                                                       
      DO 10 J=2,NDATA                                                   
      IF(EN <= XEN(J):
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA                                                           
   20 A=(YXSEC(J)-YXSEC(J-1))/(XEN(J)-XEN(J-1))                         
      B=(XEN(J-1)*YXSEC(J)-XEN(J)*YXSEC(J-1))/(XEN(J-1)-XEN(J))         
      Q(2,I)=(A*EN+B)*1.0D-16                                           
      Q(3,I)=0.0                                                        
      IF(EN < E(3):
) GO TO 200                                          
      DO 110 J=2,NIOND                                                 
      IF(EN <= XION(J):
) GO TO 120                                       
  110 CONTINUE                                                          
      J=NIOND                                                       
  120 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.D-16                                            
  200 Q(4,I)=0.0                                     
      QATT(1,I)=Q(4,I)                  
      IF(EN < XATT(1):
) GO TO 300                                       
      IF(EN > XATT(NATT1):
) GO TO 300                                   
      DO 210 J=2,NATT1                                                  
      IF(EN <= XATT(J):
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NATT1                                                           
  220 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))                         
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))       
      Q(4,I)=(A*EN+B)*1.D-21 
      QATT(1,I)=Q(4,I)                                           
  300 Q(5,I)=0.0                                                        
      Q(6,I)=0.0                                                        
#                              
# SUPERELASTIC VIB
      QIN(1,I)=0.0
      IF(EN == 0.0):
 GO TO 305 
      DO 301 J=2,NVIB1           
      IF((EN+EIN(2):
) <= XVIB1(J)) GO TO 302
  301 CONTINUE
      J=NVIB1
  302 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J)) 
      QIN(1,I)=(EN+EIN(2))*(A*(EN+EIN(2))+B)*1.D-16/EN 
      QIN(1,I)=APOP*QIN(1,I)/(1.0+APOP)                                 
#                       
  305 QIN(2,I)=0.0                                                      
      IF(EN <= EIN(2):
) GO TO 4000                                       
      DO 4100 J=2,NVIB1                                                 
      IF(EN <= XVIB1(J):
) GO TO 4200                                     
 4100 CONTINUE                                                          
      J=NVIB1                                                           
 4200 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J)) 
      QIN(2,I)=(A*EN+B)*1.D-16/(1.0+APOP)                               
 4000 CONTINUE 
      QIN(3,I)=0.0
      IF(EN == 0.0):
 GO TO 1100
      DO 307 J=2,NVIB2
      IF((EN+EIN(4):
) <= XVIB2(J)) GO TO 308
  307 CONTINUE
      J=NVIB2
  308 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J)) 
      QIN(3,I)=(EN+EIN(4))*(A*(EN+EIN(4))+B)*1.D-16/EN  
      QIN(3,I)=HPOP*QIN(3,I)/(1.0+HPOP)                                 
 1100 QIN(4,I)=0.0                                                      
      IF(EN <= EIN(4):
) GO TO 400                                        
      DO 310 J=2,NVIB2                                                  
      IF(EN <= XVIB2(J):
) GO TO 320                                      
  310 CONTINUE                                                          
      J=NVIB2                                                           
  320 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J)) 
      QIN(4,I)=(A*EN+B)*1.D-16/(1.0+HPOP)                               
  400 CONTINUE                                                          
      QIN(5,I)=0.0                                                      
      IF(EN <= EIN(5):
) GO TO 500                                        
      DO 410 J=2,NVIB3                                                  
      IF(EN <= XVIB3(J):
) GO TO 420                                      
  410 CONTINUE                                                          
      J=NVIB3                                                           
  420 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J)) 
      QIN(5,I)=(A*EN+B)*1.D-16                                          
  500 CONTINUE                                                          
      QIN(6,I)=0.0                                                      
      IF(EN <= EIN(6):
) GO TO 600                                        
      DO 510 J=2,NVIB4                                                  
      IF(EN <= XVIB4(J):
) GO TO 520                                      
  510 CONTINUE                                                          
      J=NVIB4                                                           
  520 A=(YVIB4(J)-YVIB4(J-1))/(XVIB4(J)-XVIB4(J-1))                     
      B=(XVIB4(J-1)*YVIB4(J)-XVIB4(J)*YVIB4(J-1))/(XVIB4(J-1)-XVIB4(J)) 
      QIN(6,I)=(A*EN+B)*1.D-16                                          
  600 CONTINUE                                                          
      QIN(7,I)=0.0                                                      
      IF(EN <= EIN(7):
) GO TO 700                                        
      DO 610 J=2,NVIB5                                                  
      IF(EN <= XVIB5(J):
) GO TO 620                                      
  610 CONTINUE                                                          
      J=NVIB5                                                           
  620 A=(YVIB5(J)-YVIB5(J-1))/(XVIB5(J)-XVIB5(J-1))                     
      B=(XVIB5(J-1)*YVIB5(J)-XVIB5(J)*YVIB5(J-1))/(XVIB5(J-1)-XVIB5(J)) 
      QIN(7,I)=(A*EN+B)*1.D-16                                          
  700 CONTINUE                                                          
      QIN(8,I)=0.0                                                      
      IF(EN <= EIN(8):
) GO TO 800                                        
      DO 710 J=2,NEXC1                                                  
      IF(EN <= XEXC1(J):
) GO TO 720                                      
  710 CONTINUE                                                          
      J=NEXC1                                                           
  720 A=(YEXC1(J)-YEXC1(J-1))/(XEXC1(J)-XEXC1(J-1))                     
      B=(XEXC1(J-1)*YEXC1(J)-XEXC1(J)*YEXC1(J-1))/(XEXC1(J-1)-XEXC1(J)) 
      QIN(8,I)=(A*EN+B)*1.D-16                                          
  800 CONTINUE                                                          
      QIN(9,I)=0.0                                                      
      IF(EN <= EIN(9):
) GO TO 900                                        
      DO 810 J=2,NEXC2                                                  
      IF(EN <= XEXC2(J):
) GO TO 820                                      
  810 CONTINUE                                                          
      J=NEXC2                                                           
  820 A=(YEXC2(J)-YEXC2(J-1))/(XEXC2(J)-XEXC2(J-1))                     
      B=(XEXC2(J-1)*YEXC2(J)-XEXC2(J)*YEXC2(J-1))/(XEXC2(J-1)-XEXC2(J)) 
      QIN(9,I)=(A*EN+B)*1.D-16                                          
  900 CONTINUE                                                          
      QIN(10,I)=0.0                                                     
      IF(EN <= EIN(10):
) GO TO 990                                       
      DO 910 J=2,NEXC3                                                  
      IF(EN <= XEXC3(J):
) GO TO 920                                      
  910 CONTINUE                                                          
      J=NEXC3                                                           
  920 A=(YEXC3(J)-YEXC3(J-1))/(XEXC3(J)-XEXC3(J-1))                     
      B=(XEXC3(J-1)*YEXC3(J)-XEXC3(J)*YEXC3(J-1))/(XEXC3(J-1)-XEXC3(J)) 
      QIN(10,I)=(A*EN+B)*1.D-16                                         
  990 CONTINUE                                                          
#                                                                       
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)+QIN(1,I)+QIN(2,I)+QIN(3,I)+QIN(4,I)+  
     /QIN(5,I)+QIN(6,I)+QIN(7,I)+QIN(8,I)+QIN(9,I)+QIN(10,I)
 1000 CONTINUE                                                          
#  SAVE COMPUTE TIME
      IF(EFINAL <= EIN(10):
) NIN=9
      IF(EFINAL <= EIN(9):
) NIN=8                    
      IF(EFINAL <= EIN(8):
) NIN=7                                        
      IF(EFINAL <= EIN(7):
) NIN=6                                        
      IF(EFINAL <= EIN(6):
) NIN=5                                        
      IF(EFINAL <= EIN(5):
) NIN=4                                        
      IF(EFINAL <= EIN(4):
) NIN=3                                        
      RETURN                                                            
      # end                                                               
      def GAS57(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)         
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      DIMENSION XEN(61),YXSEC(61),XION(46),YION(46),XATT(16),YATT(16),  
     /XVIB1(34),YVIB1(34),XVIB2(28),YVIB2(28),XVIB3(28),YVIB3(28),      
     /XVIB4(25),YVIB4(25),XVIB5(19),YVIB5(19),XEXC1(25),YEXC1(25),
     /XEXC2(23),YEXC2(23),XEXC3(19),YEXC3(19)
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME     
#                                            
      DATA XEN/0.00,.001,.002,.003,.004,.005,.007,0.01,.015,0.02,
     /0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.10,0.11,0.12,                
     /0.14,0.16,0.18,0.20,0.23,0.26,0.30,0.35,0.40,0.50,           
     /0.60,0.80,1.00,1.40,2.00,3.00,4.00,5.00,6.00,7.00,           
     /8.00,9.00,10.0,15.0,20.0,30.0,40.0,70.0,100.,140.,                
     /200.,250.,300.,500.,1000.,1500.,3000.,6000.,10000.,20000.,
     /100000./
      DATA YXSEC/77.0,75.0,70.0,66.0,62.0,57.0,51.0,45.0,37.0,31.0,     
     /24.0,18.5,15.5,13.0,11.0,9.45,8.25,7.35,6.75,6.75,                
     /8.20,10.6,13.7,17.2,20.5,23.0,25.0,26.5,27.0,28.0,           
     /29.0,30.0,31.0,32.5,34.0,36.0,38.0,40.0,43.0,44.0,           
     /44.0,42.0,39.0,28.0,22.0,15.0,11.5,6.80,4.90,2.90,                
     /1.78,1.28,1.06,0.60,0.26,0.17,0.08,.034,.021,.0085,
     /.0017/
      DATA XION/10.35,11.0,12.5,13.5,14.5,17.0,20.0,25.0,30.0,35.0,     
     /40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,                
     /175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,                
     /800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,5000.,
     /7000.,10000.,15000.,30000.,60000.,100000./
      DATA YION/0.00,0.33,0.75,1.22,1.82,3.69,5.29,8.33,10.3,11.8,      
     /12.8,13.7,14.8,15.6,16.1,16.4,16.4,16.4,15.9,15.0,                
     /14.1,13.4,12.4,10.9,9.99,9.24,8.41,7.88,6.92,6.38,                
     /5.87,5.23,4.88,4.22,3.63,3.30,3.00,2.60,2.23,1.48,
     /1.11,0.81,0.58,0.31,.167,.106/
      DATA XATT/6.85,7.00,7.20,7.50,8.00,8.50,9.00,9.50,10.0,10.5,      
     /11.0,11.5,12.0,12.5,13.0,13.2/                                    
      DATA YATT/0.00,1.41,2.36,3.57,6.03,9.50,14.3,22.3,31.6,26.6,      
     /20.9,13.4,7.55,2.83,1.07,0.00/                                    
      DATA XVIB1/.052,.055,.060,.065,.070,.075,0.08,0.10,0.12,0.14,     
     /0.20,0.25,0.30,0.40,0.50,0.70,1.00,1.50,2.00,3.00,
     /4.00,5.00,6.00,7.50,8.50,10.0,15.0,20.0,30.0,40.0,                
     /100.,1000.,10000.,100000./                                        
      DATA YVIB1/0.00,.017,.026,.030,.032,.033,.034,.034,.033,.031,     
     /.026,.022,.020,.017,.015,.011,.010,.015,.018,.030,
     /.044,.058,.074,.097,.097,.080,.055,.031,.017,.010,                
     /.003,.0003,.00003,.00003/                                         
      DATA XVIB2/.108,.125,0.15,0.20,0.23,0.25,0.30,0.40,0.50,0.70,     
     /1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.50,8.50,10.0,                
     /15.0,20.0,30.0,40.0,100.,1000.,10000.,100000./                    
      DATA YVIB2/0.00,0.33,0.64,0.87,0.90,0.90,0.81,0.69,0.60,0.50,     
     /0.39,0.39,0.48,0.77,1.14,1.50,1.93,2.53,2.53,2.08,                
     /1.44,0.81,0.43,0.27,0.06,.006,.0006,.00006/                       
      DATA XVIB3/.173,0.18,0.19,0.20,0.23,0.25,0.30,0.40,0.50,0.70,     
     /1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.50,8.50,10.0,                
     /15.0,20.0,30.0,40.0,100.,1000.,10000.,100000./                    
      DATA YVIB3/0.00,0.16,0.33,0.47,0.60,0.65,0.69,0.65,0.60,0.52,     
     /0.42,0.38,0.41,0.59,0.89,1.16,1.49,1.96,1.96,1.60,                
     /1.11,0.63,0.33,0.21,0.05,.005,.0005,.00005/                       
      DATA XVIB4/.363,0.40,0.45,0.50,0.60,0.70,0.80,1.00,1.50,2.00,     
     /3.00,4.00,5.00,6.00,7.50,8.50,10.0,15.0,20.0,30.0,                
     /40.0,100.,1000.,10000.,100000./                                   
      DATA YVIB4/0.00,0.58,0.77,0.86,0.91,0.91,0.86,0.81,0.77,0.85,     
     /1.23,1.76,2.29,2.95,3.26,2.82,2.08,1.19,0.53,0.30,                
     /0.17,0.04,.004,.0004,.00004/                                      
      DATA XVIB5/.519,1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.50,8.50,     
     /10.0,15.0,20.0,30.0,40.0,100.,1000.,10000.,100000./               
      DATA YVIB5/0.00,.001,0.01,.041,.105,0.20,0.25,0.33,0.37,0.31,     
     /.237,.138,.058,.033,.021,.004,.0004,.00004,.000004/               
      DATA XEXC1/7.20,8.50,9.50,11.0,12.0,14.0,16.0,20.0,25.0,30.0,     
     /40.0,60.0,80.0,100.,150.,200.,300.,400.,600.,1000.,               
     /2000.,4000.,10000.,20000.,100000./                                
      DATA YEXC1/0.00,1.60,2.32,2.48,2.56,2.64,2.64,2.64,2.64,2.64,     
     /2.72,2.72,2.64,2.48,2.08,1.92,1.60,1.50,1.28,0.84,                
     /0.41,0.21,0.07,.042,.009/                                         
      DATA XEXC2/9.50,10.5,11.5,14.0,16.0,20.0,25.0,30.0,               
     /40.0,60.0,80.0,100.,150.,200.,300.,400.,600.,1000.,               
     /2000.,4000.,10000.,20000.,100000./
      DATA YEXC2/0.00,0.23,0.49,0.92,1.43,1.92,2.24,2.44,               
     /2.65,2.72,2.65,2.48,2.08,1.92,1.60,1.50,1.28,0.84,                
     /0.39,0.21,0.07,.042,.007/                                         
      DATA XEXC3/17.0,20.0,25.0,30.0,40.0,60.0,80.0,100.,150.,200.,     
     /300.,400.,600.,1000.,2000.,4000.,10000.,20000.,100000./           
      DATA YEXC3/0.00,0.53,1.16,1.60,2.24,2.64,2.64,2.48,2.08,1.92,     
     /1.60,1.50,1.28,0.84,0.41,0.21,0.09,.042,.007/                     
# ----------------------------------------------------------------------       
#  NO DIFFUSION EXPERIMENTAL DATA AVAILABLE,USED INELASTICS FROM SCALING
#  ISOBUTANE INELASTIC X-SECT. ELASTIC DETERMINED FROM DRIFT VELOCITY.  
# HENCE DIFFUSION ACCURATE TO ONLY 10% , DRIFT VELOCITY TO 3% BELOW     
# 10KV/CM.
# MODIFICATION OF NEO-PENTANE (1995) TO INCLUDE SUPERELASTIC SCATTERING
# FIT TO DRIFT VELOCITY OF FLORIANO GEE AND FREEMAN                                                                          
# ----------------------------------------------------------------------  
#     
      NAME='N-PENTANE   03 '
#----------------------------------------------------------------------
#      
      NION=1
      NATT=1
      NIN=11
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0                                                          
      NDATA=61                                                          
      NIOND=46                                                          
      NATT1=16                                                          
      NVIB1=34
      NVIB2=28                                                          
      NVIB3=28                                                          
      NVIB4=25
      NVIB5=19
      NEXC1=25                                                          
      NEXC2=23                                                          
      NEXC3=19
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(72.1503*AMU)                                      
      E(3)=10.35                                                        
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
      EOBY(1)=10.35                                                     
      EIN(1)=-.052
      EIN(2)=0.052
      EIN(3)=-.108
      EIN(4)=0.108                                                      
      EIN(5)=-.173 
      EIN(6)=0.173                                                     
      EIN(7)=0.363
      EIN(8)=0.519
      EIN(9)=7.2                                                        
      EIN(10)=9.50                                                      
      EIN(11)=17.0
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       N-PENTANE      '
      SCRPT(3)=' IONISATION    ELOSS= 10.35   '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      SCRPT(7)=' VIB           ELOSS= -0.052  '
      SCRPT(8)=' VIB           ELOSS=  0.052  '
      SCRPT(9)=' VIB           ELOSS= -0.108  '
      SCRPT(10)=' VIB           ELOSS=  0.108  '
      SCRPT(11)=' VIB           ELOSS= -0.173  '
      SCRPT(12)=' VIB           ELOSS=  0.173  '
      SCRPT(13)=' VIB           ELOSS=  0.363  '
      SCRPT(14)=' VIB           ELOSS=  0.519  '
      SCRPT(15)=' EXC           ELOSS=  7.20   '
      SCRPT(16)=' EXC           ELOSS=  9.50   '
      SCRPT(17)=' EXC           ELOSS= 17.0    '
      APOP1=math.exp(EIN(1)/AKT)
      APOP2=math.exp(EIN(3)/AKT)
      APOP3=math.exp(EIN(5)/AKT)
      EN=-ESTEP/2.0                                      
      DO 1000 I=1,NSTEP                                              
      EN=EN+ESTEP
      IF(EN <= XEN(2):
) :
       Q(2,I)=YXSEC(2)*1.D-16
       GO TO 21
      # endIF                                                        
      DO 10 J=2,NDATA                                                   
      IF(EN <= XEN(J):
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA 
   20 YXJ=math.log(YXSEC(J))
      YXJ1=math.log(YXSEC(J-1))
      XNJ=math.log(XEN(J))
      XNJ1=math.log(XEN(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      Q(2,I)=math.exp(A*math.log(EN)+B)*1.D-16
   21 CONTINUE                                                          
      Q(3,I)=0.0                                                        
      IF(EN < E(3):
) GO TO 30                                          
      DO 22 J=2,NIOND                                                   
      IF(EN <= XION(J):
) GO TO 23                                        
   22 CONTINUE                                                          
      J=NIOND                                                         
   23 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.D-16                                            
   30 Q(4,I)=0.0                                     
      QATT(1,I)=Q(4,I)                   
      IF(EN < XATT(1):
) GO TO 40                                        
      IF(EN > XATT(NATT1):
) GO TO 40                                    
      DO 31 J=2,NATT1                                                   
      IF(EN <= XATT(J):
) GO TO 32                                        
   31 CONTINUE                                                          
      J=NATT1                                                          
   32 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))                         
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))       
      Q(4,I)=(A*EN+B)*1.D-21    
      QATT(1,I)=Q(4,I)                                        
   40 Q(5,I)=0.0                                                        
      Q(6,I)=0.0  
#                                                            
# SUPERELASTIC VIB1        
      QIN(1,I)=0.0
      IF(EN <= 0.0):
 GO TO 150
      DO 110 J=2,NVIB1
      IF((EN+EIN(2):
) <= XVIB1(J)) GO TO 120
  110 CONTINUE
      J=NVIB1
  120 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J)) 
      QIN(1,I)=(EN+EIN(2))*(A*(EN+EIN(2))+B)/EN
      QIN(1,I)=QIN(1,I)*APOP1/(1.0+APOP1)*1.D-16
#  VIB1
  150 QIN(2,I)=0.0
      IF(EN <= EIN(2):
) GO TO 200                                        
      DO 160  J=2,NVIB1                                                 
      IF(EN <= XVIB1(J):
) GO TO 170                                      
  160 CONTINUE                                                          
      J=NVIB1                                                           
  170 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J)) 
      QIN(2,I)=(A*EN+B)/(1.0+APOP1)*1.D-16                              
  200 CONTINUE
#
# SUPERELASTIC VIB2                                                            
      QIN(3,I)=0.0  
      IF(EN <= 0.0):
 GO TO 250
      DO 210 J=2,NVIB2
      IF((EN+EIN(4):
) <= XVIB2(J)) GO TO 220
  210 CONTINUE
      J=NVIB2
  220 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J)) 
      QIN(3,I)=(EN+EIN(4))*(A*(EN+EIN(4))+B)/EN
      QIN(3,I)=QIN(3,I)*APOP2/(1.0+APOP2)*1.D-16
#  VIB2
  250 QIN(4,I)=0.0          
      IF(EN <= EIN(4):
) GO TO 300                                        
      DO 260 J=2,NVIB2                                                  
      IF(EN <= XVIB2(J):
) GO TO 270                                      
  260 CONTINUE                                                          
      J=NVIB2                                                           
  270 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J)) 
      QIN(4,I)=(A*EN+B)/(1.0+APOP2)*1.D-16                              
  300 CONTINUE   
# 
# SUPERELASTIC VIB3                                                         
      QIN(5,I)=0.0
      IF(EN <= 0.0):
 GO TO 350
      DO 310 J=2,NVIB3
      IF((EN+EIN(6):
) <= XVIB3(J)) GO TO 320
  310 CONTINUE
      J=NVIB3
  320 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J))
      QIN(5,I)=(EN+EIN(6))*(A*(EN+EIN(6))+B)/EN
      QIN(5,I)=QIN(5,I)*APOP3/(1.0+APOP3)*1.D-16
#  VIB3
  350 QIN(6,I)=0.0   
      IF(EN <= EIN(6):
) GO TO 400                                        
      DO 360 J=2,NVIB3                                                  
      IF(EN <= XVIB3(J):
) GO TO 370                                      
  360 CONTINUE                                                          
      J=NVIB3                                                           
  370 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J)) 
      QIN(6,I)=(A*EN+B)/(1.0+APOP3)*1.D-16                              
  400 CONTINUE  
# VIB4                                                          
      QIN(7,I)=0.0                                                      
      IF(EN <= EIN(7):
) GO TO 500                                        
      DO 410 J=2,NVIB4                                                  
      IF(EN <= XVIB4(J):
) GO TO 420                                      
  410 CONTINUE                                                          
      J=NVIB4                                                           
  420 A=(YVIB4(J)-YVIB4(J-1))/(XVIB4(J)-XVIB4(J-1))                     
      B=(XVIB4(J-1)*YVIB4(J)-XVIB4(J)*YVIB4(J-1))/(XVIB4(J-1)-XVIB4(J)) 
      QIN(7,I)=(A*EN+B)*1.D-16                                          
  500 CONTINUE
# VIB5                                                      
      QIN(8,I)=0.0                                                      
      IF(EN <= EIN(8):
) GO TO 600                                        
      DO 510 J=2,NVIB5                                                  
      IF(EN <= XVIB5(J):
) GO TO 520                                      
  510 CONTINUE                                                          
      J=NVIB5                                                           
  520 A=(YVIB5(J)-YVIB5(J-1))/(XVIB5(J)-XVIB5(J-1))                     
      B=(XVIB5(J-1)*YVIB5(J)-XVIB5(J)*YVIB5(J-1))/(XVIB5(J-1)-XVIB5(J)) 
      QIN(8,I)=(A*EN+B)*1.D-16                                          
  600 CONTINUE
# EXC1                                                      
      QIN(9,I)=0.0                                                      
      IF(EN <= EIN(9):
) GO TO 700                                        
      DO 610 J=2,NEXC1                                                  
      IF(EN <= XEXC1(J):
) GO TO 620                                      
  610 CONTINUE                                                          
      J=NEXC1                                                           
  620 A=(YEXC1(J)-YEXC1(J-1))/(XEXC1(J)-XEXC1(J-1))                     
      B=(XEXC1(J-1)*YEXC1(J)-XEXC1(J)*YEXC1(J-1))/(XEXC1(J-1)-XEXC1(J)) 
      QIN(9,I)=(A*EN+B)*1.D-16                                          
  700 CONTINUE   
# EXC2                                                   
      QIN(10,I)=0.0                                                     
      IF(EN <= EIN(10):
) GO TO 800                                       
      DO 710 J=2,NEXC2                                                  
      IF(EN <= XEXC2(J):
) GO TO 720                                      
  710 CONTINUE                                                          
      J=NEXC2                                                           
  720 A=(YEXC2(J)-YEXC2(J-1))/(XEXC2(J)-XEXC2(J-1))                     
      B=(XEXC2(J-1)*YEXC2(J)-XEXC2(J)*YEXC2(J-1))/(XEXC2(J-1)-XEXC2(J)) 
      QIN(10,I)=(A*EN+B)*1.D-16                                         
  800 CONTINUE
# EXC3                                                            
      QIN(11,I)=0.0                                                     
      IF(EN <= EIN(11):
) GO TO 900                                       
      DO 810 J=2,NEXC3                                                  
      IF(EN <= XEXC3(J):
) GO TO 820                                      
  810 CONTINUE                                                          
      J=NEXC3                                                           
  820 A=(YEXC3(J)-YEXC3(J-1))/(XEXC3(J)-XEXC3(J-1))                     
      B=(XEXC3(J-1)*YEXC3(J)-XEXC3(J)*YEXC3(J-1))/(XEXC3(J-1)-XEXC3(J)) 
      QIN(11,I)=(A*EN+B)*1.D-16                                         
  900 CONTINUE                                                          
#                                                                       
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)+QIN(1,I)+QIN(2,I)+QIN(3,I)+QIN(4,I)+  
     /QIN(5,I)+QIN(6,I)+QIN(7,I)+QIN(8,I)+QIN(9,I)+QIN(10,I)+QIN(11,I)
 1000 CONTINUE                                                          
#  SAVE COMPUTE TIME 
      IF(EFINAL <= EIN(11):
) NIN=10                                      
      IF(EFINAL <= EIN(10):
) NIN=9                                       
      IF(EFINAL <= EIN(9):
) NIN=8                                        
      IF(EFINAL <= EIN(8):
) NIN=7                                        
      IF(EFINAL <= EIN(7):
) NIN=6                                        
      IF(EFINAL <= EIN(6):
) NIN=5                                        
      RETURN                                                            
      # end                                                               
      def GAS58(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY  
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)         
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250],
     /PJ(120) 
      DIMENSION XMOM(65),YMOM(65),XELA[59],YELA[59],XVIB1(50),YVIB1(50),
     /XVIB2(24),YVIB2(24),XVIB3(20),YVIB3(20),XVIB4(18),YVIB4(18),      
     /XVIB5(18),YVIB5(18),XVIB6(15),YVIB6(15),XVIB7(17),YVIB7(17),
     /XVIB8(15),YVIB8(15),      
     /XTRP1(25),YTRP1(25),XTRP3(23),YTRP3(23),XTRP5(26),YTRP5(26),      
     /XTRP7(29),YTRP7(29),XTRP8(19),YTRP8(19),      
     /XSNG2(29),YSNG2(29),XSNG5(26),YSNG5(26),XION(43),YION(43)
      CHARACTER*50 SCRPT(300),SCRPTN      
      CHARACTER*25 NAME     
#                                            
      DATA XELA/0.00,.010,.015,0.02,0.03,0.04,0.05,0.07,0.10,0.12,    
     /0.15,0.17,0.20,0.25,0.30,0.35,0.40,0.50,0.70,1.00,
     /1.20,1.30,1.50,1.70,1.90,2.10,2.20,2.50,2.80,3.00,
     /3.30,3.60,4.00,4.50,5.00,6.00,7.00,8.00,10.0,12.0,
     /15.0,17.0,20.0,25.0,30.0,50.0,75.0,100.,150.,200.,
     /300.,500.,700.,1000.,2000.,4000.,10000.,20000.,100000./
      DATA YELA/1.10,1.92,2.23,2.49,2.95,3.35,3.78,4.48,5.26,5.72,      
     /6.33,6.62,7.11,7.70,8.22,8.62,8.96,9.24,9.52,9.74, 
     /10.26,10.91,11.99,13.78,16.98,17.62,18.94,19.11,22.7,18.74,
     /16.88,15.59,14.08,12.90,12.74,12.53,12.43,13.01,13.23,13.23,
     /12.80,12.56,12.10,11.41,10.67,8.30,6.66,5.38,4.18,3.50,
     /2.70,1.831,1.455,1.03,0.58,0.28,0.10,.052,.008/    
      DATA XMOM/0.00,.001,.002,.003,.005,.007,.0085,.010,.015,0.02,    
     /0.03,0.04,0.05,0.07,0.10,0.12,0.15,0.17,0.20,0.25,
     /0.30,0.35,0.40,0.50,0.70,1.00,1.20,1.30,1.50,1.70,
     /1.90,2.10,2.20,2.50,2.80,3.00,3.30,3.60,4.00,4.50,
     /5.00,6.00,7.00,8.00,10.0,12.0,15.0,17.0,20.0,25.0,
     /30.0,50.0,75.0,100.,150.,200.,300.,500.,700.,1000.,
     /2000.,4000.,10000.,20000.,100000./                
      DATA YMOM/1.10,1.36,1.49,1.62,1.81,2.00,2.10,2.19,2.55,2.85,      
     /3.38,3.82,4.30,5.08,5.92,6.42,7.08,7.38,7.88,8.48, 
     /8.98,9.36,9.67,9.87,9.97,9.96,10.34,10.92,11.87,13.47,
     /16.41,16.85,18.02,17.92,21.0,17.20,15.3,13.96,12.42,11.19,
     /10.86,10.36,10.0,10.2,9.90,9.50,8.70,8.26,7.60,6.70,
     /5.90,3.80,2.56,1.80,1.13,0.80,0.48,0.23,.143,.077,
     /.038,.019,.008,.004,.001/                
      DATA XVIB1/0.29,0.30,0.33,0.40,0.75,0.90,1.00,1.10,1.16,1.20,     
     /1.22,1.40,1.50,1.60,1.65,1.70,1.80,1.90,2.00,2.10,                
     /2.20,2.30,2.40,2.50,2.60,2.70,2.75,2.80,2.90,3.00,                
     /3.10,3.20,3.30,3.40,3.50,3.60,4.00,5.00,15.0,18.0,                
     /20.0,22.0,23.0,25.0,29.0,32.0,50.0,80.0,1000.,100000./            
      DATA YVIB1/.00,.001,.0017,.0025,.0037,.0055,.0065,.009,.011,.0125,
     /.0135,.070,.100,.150,.270,.315,.540,1.485,4.80,2.565,             
     /1.20,4.50,2.76,1.59,3.15,1.545,0.60,1.35,.525,0.870,              
     /1.17,0.855,0.66,0.60,.585,0.57,.055,.035,.035,0.04,               
     /.065,.085,.085,0.06,0.03,.015,.012,0.00,0.00,0.00/                
      DATA XVIB2/0.59,1.70,1.80,1.90,2.00,2.10,2.20,2.30,2.40,2.50,     
     /2.60,2.70,2.75,2.80,2.90,3.00,3.10,3.20,3.30,3.40,                
     /3.50,3.60,1000.,100000./                                          
      DATA YVIB2/0.00,0.00,.015,0.63,1.935,3.30,1.47,0.54,2.115,3.00,   
     /0.54,1.05,1.725,1.275,0.33,0.90,0.645,0.375,0.345,0.30,           
     /0.213,0.00,0.00,0.00/                                             
      DATA XVIB3/0.88,1.90,2.00,2.10,2.20,2.30,2.40,2.50,2.60,2.70,     
     /2.75,2.80,2.90,3.00,3.10,3.20,3.30,3.40,1000.,100000./            
      DATA YVIB3/0.00,0.00,0.96,2.055,2.70,1.695,0.075,0.96,1.47,0.45,  
     /0.96,0.54,0.855,0.405,0.282,0.291,0.0615,0.00,0.00,0.00/          
      DATA XVIB4/1.17,2.00,2.10,2.20,2.30,2.40,2.50,2.60,2.70,2.75,     
     /2.80,2.90,3.00,3.10,3.20,3.30,1000.,100000./                      
      DATA YVIB4/0.0,0.0,.2025,1.515,2.385,1.440,.555,.0825,1.2,1.095,  
     /0.675,0.03,0.33,0.315,0.06,0.00,0.00,0.00/                        
      DATA XVIB5/1.47,2.10,2.20,2.30,2.40,2.50,2.60,2.70,2.75,2.80,     
     /2.90,3.00,3.10,3.20,3.30,3.40,1000.,100000./                      
      DATA YVIB5/0.00,0.00,.825,1.23,1.53,1.44,0.345,.0225,.345,0.54,   
     /0.66,.2175,.105,.315,.1035,0.00,0.00,0.00/                        
      DATA XVIB6/1.76,2.20,2.30,2.40,2.50,2.60,2.70,2.75,2.80,2.90,     
     /3.00,3.10,3.20,1000.,100000./                                     
      DATA YVIB6/0.00,0.00,.0063,1.125,1.74,1.38,0.78,0.45,.315,.246,   
     /0.48,.1635,0.00,0.00,0.00/
      DATA XVIB7/2.06,2.30,2.40,2.50,2.60,2.70,2.75,2.80,2.90,3.00,
     /3.10,3.20,3.30,3.40,3.50,1000.,100000./
      DATA YVIB7/0.00,0.00,.0126,0.39,0.66,0.96,.795,0.60,0.18,.0063,
     /.192,.204,.078,.0189,0.00,0.00,0.00/
      DATA XVIB8/2.35,2.50,2.60,2.70,2.75,2.80,2.90,3.00,3.10,3.20,
     /3.30,3.40,3.50,1000.,100000./
      DATA YVIB8/0.00,0.00,.0189,0.36,0.36,0.33,.345,.264,.0375,.0063,
     /.1545,.0252,0.00,0.00,0.00/                         
      DATA XTRP1/6.17,7.00,7.80,8.50,9.00,10.0,11.0,12.0,13.0,14.0,     
     /16.0,17.0,18.0,20.0,22.0,24.0,26.0,30.0,34.0,40.0,                
     /50.0,70.0,150.,1000.,100000./                                     
      DATA YTRP1/0.00,.0033,.0085,.0213,.0307,.0468,.059,.069,.075,.082,
     /.089,.089,.084,.072,.061,.052,.045,.034,.029,.023,           
     /.019,.004,0.00,0.00,0.00/                                       
      DATA XTRP3/7.35,8.00,9.00,10.0,11.0,12.0,13.0,14.0,15.0,16.0,     
     /17.0,18.0,20.0,22.0,26.0,30.0,34.0,40.0,50.0,70.0,                
     /150.0,1000.,100000./                                              
      DATA YTRP3/.0,.0543,.1434,.2312,.2975,.343,.373,.387,.397,.399,
     /.383,.354,.289,.227,.165,.131,.106,.0777,.0469,.0168,     
     /0.00,0.00,0.00/                                                   
      DATA XTRP5/7.80,8.10,8.50,8.70,9.00,10.0,11.0,12.0,13.0,14.0,     
     /16.0,17.0,18.0,20.0,22.0,24.0,26.0,30.0,34.0,40.0,                
     /50.0,70.0,150.0,500.0,1000.,100000./                              
      DATA YTRP5/0.0,.0015,.0097,.018,.029,.073,.115,.148,.180,.208,    
     /.205,.178,.152,.122,.105,.091,.081,.066,.057,.047,                
     /.041,.021,.007,0.00,0.00,0.00/                                    
      DATA XSNG2/8.55,9.00,12.0,14.0,15.0,16.0,17.0,18.0,19.0,20.0,
     /24.0,26.0,30.0,40.0,50.0,70.0,100.,150.,200.,250.,    
     /300.,500.,700.,1000.,2000.,4000.,10000.,20000.,100000./           
      DATA YSNG2/.0,.0141,.163,.2276,.2412,.2481,.2483,.238,.2268,.2150,
     /.1860,.1734,.1527,.1160,.0900,.0642,.0425,.0268,.0201,.0161,     
     /.0134,.0082,.0060,.0042,.0020,.0010,.0004,.0002,.00004/           
      DATA XTRP7/11.03,11.5,12.0,12.5,13.0,13.5,13.8,14.0,14.2,14.5,    
     /15.0,16.0,17.0,18.0,19.0,20.0,22.0,24.0,26.0,28.0,                
     /30.0,36.0,40.0,50.0,70.0,100.0,150.0,1000.,100000./               
      DATA YTRP7/.0,.0405,.093,.1965,.435,.735,.93,.975,.96,.945,       
     /.825,.645,.525,.450,.405,.375,.315,.2655,.225,.2085,              
     /.1665,.117,.0945,.0585,.0225,.0023,0.00,0.00,0.00/                
      DATA XTRP8/11.87,11.92,12.7,17.0,19.0,20.0,22.0,24.0,26.0,28.0,   
     /30.0,32.0,40.0,50.0,70.0,100.,150.0,1000.,100000./                
      DATA YTRP8/.0,.0496,.0041,.0346,.0436,.0448,.0405,.0338,.0289,   
     /.0241,.0193,.0172,.0122,.010,.007,.005,0.00,0.00,0.00/            
      DATA XSNG5/13.0,14.0,15.0,16.0,17.0,18.0,20.0,22.0,25.0,30.0,     
     /40.0,60.0,80.0,100.,150.,200.,250.,300.,500.,700.,
     /1000.,2000.,4000.,10000.,20000.,100000./          
      DATA YSNG5/0.0,.081,0.19,0.25,0.42,0.52,0.75,0.96,1.19,1.48,      
     /1.65,1.76,1.68,1.58,1.33,1.16,1.05,0.96,0.74,0.64,
     /0.53,0.28,0.14,0.06,0.03,.006/           
      DATA XION/15.6,16.0,16.5,17.0,17.5,18.0,18.5,19.0,19.5,20.0,      
     /21.0,22.0,23.0,24.0,25.0,26.0,30.0,34.0,38.0,45.0,
     /50.0,60.0,75.0,100.,125.,150.,200.,250.,300.,400.,                
     /500.,700.,1000.,1500.,2000.,3000.,4000.,6000.,8000.,10000.,
     /20000.,40000.,100000./                                   
      DATA YION/0.00,.021,.047,.071,.099,.129,.164,.199,.230,.270,      
     /.344,.418,.492,.565,.640,.714,1.03,1.27,1.49,1.78,
     /1.94,2.18,2.39,2.52,2.52,2.45,2.27,2.08,1.92,1.66,                
     /1.45,1.16,0.91,.654,.521,.375,.295,.209,.164,.135,
     /.073,.040,.017/    
#                                     
      NAME='N2 2004 PHELPS '                                            
#    --------------------------------------------------------------     
#    NITROGEN FROM PITCHFORD AND PHELPS . JILA REPORT NO.26 (1985)      
#    MULTI TERM CROSS SECTIONS WITH MODIFICATION CF:PHELPS PRIVATE      
#    COMMUNICATION . REDUCED 11.03 ENERGY LOSS X-SECTION BY 0.6666
#    IN CODE.
#       ACCURACY ABOUT 1% AT ALL FIELDS.         
#    COMBINED SOME CLOSE LEVELS IN ORDER TO SAVE COMPUTING TIME
#    2004: INCLUDED FULL TREATMENT OF ROTATIONAL STATES           
#    ANISOTROPIC ELASTIC SCATTERING                               
#    -------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=71
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0 
# USE ANISTROPIC ELASTIC SCATTERING AND COPY (OFFSET) TO IONISATION
      KEL(2)=1 
      KEL(3)=1
# ANISOTROPIC INELASTIC FROM COPY (OFFSET) OF ELASTIC ANGULAR DIST
      KIN(65)=1
      KIN(66)=1
      KIN(67)=1
      KIN(68)=1
      KIN(69)=1
      KIN(70)=1
      KIN(71)=1 
      NELA=59                                                           
      NMOM=65                                                           
      NVIB1=50                                                          
      NVIB2=24                                                          
      NVIB3=20                                                          
      NVIB4=18                                                          
      NVIB5=18                                                          
      NVIB6=15 
      NVIB7=17
      NVIB8=15                                                         
      NTRP1=25                                                          
      NTRP3=23                                                          
      NTRP5=26                                                          
      NTRP7=29                                                          
      NTRP8=19                                                          
      NSNG2=29                                                          
      NSNG5=26                                                          
      NIOND=43                                                          
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(27.7940*AMU)                                      
      E(3)=15.60                                                        
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      EOBY(1)=13.0
      IOFF=IFIX(SNGL(0.5+E(3)/ESTEP))
# CALC FRACTIONAL POPULATION DENSITY FOR ROTATIONAL STATES
      B0=2.4668D-4
      A0=0.5291772083
      QBQA=1.06
      QBK=1.67552*(QBQA*A0)**2*1.D-16  
      DO 3 K=1,29,2 
    3 PJ(K)=3*(2*K+1)*math.exp(-K*(K+1)*B0/AKT)
      DO 4 K=2,28,2
    4 PJ(K)=6*(2*K+1)*math.exp(-K*(K+1)*B0/AKT)
      SUM=6.0
      DO 5 K=1,29
    5 SUM=SUM+PJ(K)
      FROT0=6.0/SUM
      DO 6 K=1,29
    6 PJ(K)=PJ(K)/SUM   
# CALC ROTATIONAL TRANSITION ENERGIES
      DO 7 K=1,28  
      J=K-1
      EIN(K+28)=B0*(4*J+6)
    7 EIN(K)=-EIN(K+28)
      EIN(57)=0.290
      EIN(58)=0.590                                                     
      EIN(59)=0.880                                                     
      EIN(60)=1.17                                                      
      EIN(61)=1.47                                                      
      EIN(62)=1.76  
      EIN(63)=2.06
      EIN(64)=2.35                                                     
      EIN(65)=6.17                                                      
      EIN(66)=7.35                                                      
      EIN(67)=7.80                                                      
      EIN(68)=8.55                                                      
      EIN(69)=11.03                                                     
      EIN(70)=11.87                                                     
      EIN(71)=13.0
      IOFF65=IFIX(SNGL(0.5+EIN(65)/ESTEP))
      IOFF66=IFIX(SNGL(0.5+EIN(66)/ESTEP))
      IOFF67=IFIX(SNGL(0.5+EIN(67)/ESTEP))
      IOFF68=IFIX(SNGL(0.5+EIN(68)/ESTEP))
      IOFF69=IFIX(SNGL(0.5+EIN(69)/ESTEP))
      IOFF70=IFIX(SNGL(0.5+EIN(70)/ESTEP))
      IOFF71=IFIX(SNGL(0.5+EIN(71)/ESTEP))
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC  ANISOTROPIC NITROGEN' 
      SCRPT(3)=' IONISATION    ELOSS= 15.60   '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '  
      SCRPT(7)=' ROT 2-0       ELOSS= -0.00148'
      SCRPT(8)=' ROT 3-1       ELOSS= -0.00247'
      SCRPT(9)=' ROT 4-2       ELOSS= -0.00345'
      SCRPT(10)=' ROT 5-3       ELOSS= -0.00444'
      SCRPT(11)=' ROT 6-4       ELOSS= -0.00543'
      SCRPT(12)=' ROT 7-5       ELOSS= -0.00641'
      SCRPT(13)=' ROT 8-6       ELOSS= -0.00740'
      SCRPT(14)=' ROT 9-7       ELOSS= -0.00839'
      SCRPT(15)=' ROT 10-8      ELOSS= -0.00937'
      SCRPT(16)=' ROT 11-9      ELOSS= -0.0104 '   
      SCRPT(17)=' ROT 12-10     ELOSS= -0.0113 '
      SCRPT(18)=' ROT 13-11     ELOSS= -0.0123 '
      SCRPT(19)=' ROT 14-12     ELOSS= -0.0133 '
      SCRPT(20)=' ROT 15-13     ELOSS= -0.0143 '
      SCRPT(21)=' ROT 16-14     ELOSS= -0.0153 '
      SCRPT(22)=' ROT 17-15     ELOSS= -0.0163 '   
      SCRPT(23)=' ROT 18-16     ELOSS= -0.0173 '
      SCRPT(24)=' ROT 19-17     ELOSS= -0.0183 '
      SCRPT(25)=' ROT 20-18     ELOSS= -0.0192 '
      SCRPT(26)=' ROT 21-19     ELOSS= -0.0202 '
      SCRPT(27)=' ROT 22-20     ELOSS= -0.0212 '
      SCRPT(28)=' ROT 23-21     ELOSS= -0.0222 '
      SCRPT(29)=' ROT 24-22     ELOSS= -0.0232 '
      SCRPT(30)=' ROT 25-23     ELOSS= -0.0242 '
      SCRPT(31)=' ROT 26-24     ELOSS= -0.0252 '
      SCRPT(32)=' ROT 27-25     ELOSS= -0.0261 '
      SCRPT(33)=' ROT 28-26     ELOSS= -0.0271 '
      SCRPT(34)=' ROT 29-27     ELOSS= -0.0281 '
      SCRPT(35)=' ROT 0-2       ELOSS=  0.00148'
      SCRPT(36)=' ROT 1-3       ELOSS=  0.00247'
      SCRPT(37)=' ROT 2-4       ELOSS=  0.00345'
      SCRPT(38)=' ROT 3-5       ELOSS=  0.00444'
      SCRPT(39)=' ROT 4-6       ELOSS=  0.00543'   
      SCRPT(40)=' ROT 5-7       ELOSS=  0.00641'
      SCRPT(41)=' ROT 6-8       ELOSS=  0.00740'
      SCRPT(42)=' ROT 7-9       ELOSS=  0.00839'
      SCRPT(43)=' ROT 8-10      ELOSS=  0.00937'
      SCRPT(44)=' ROT 9-11      ELOSS=  0.0104 '
      SCRPT(45)=' ROT 10-12     ELOSS=  0.0113 '
      SCRPT(46)=' ROT 11-13     ELOSS=  0.0123 '
      SCRPT(47)=' ROT 12-14     ELOSS=  0.0133 '
      SCRPT(48)=' ROT 13-15     ELOSS=  0.0143 '
      SCRPT(49)=' ROT 14-16     ELOSS=  0.0153 '
      SCRPT(50)=' ROT 15-17     ELOSS=  0.0163 '
      SCRPT(51)=' ROT 16-18     ELOSS=  0.0173 '
      SCRPT(52)=' ROT 17-19     ELOSS=  0.0183 '
      SCRPT(53)=' ROT 18-20     ELOSS=  0.0192 '
      SCRPT(54)=' ROT 19-21     ELOSS=  0.0202 '
      SCRPT(55)=' ROT 20-22     ELOSS=  0.0212 '
      SCRPT(56)=' ROT 21-23     ELOSS=  0.0222 '
      SCRPT(57)=' ROT 22-24     ELOSS=  0.0232 '
      SCRPT(58)=' ROT 23-25     ELOSS=  0.0242 '
      SCRPT(59)=' ROT 24-26     ELOSS=  0.0252 '
      SCRPT(60)=' ROT 25-27     ELOSS=  0.0261 '
      SCRPT(61)=' ROT 26-28     ELOSS=  0.0271 '
      SCRPT(62)=' ROT 27-29     ELOSS=  0.0281 '
      SCRPT(63)=' VIB V1        ELOSS=  0.290  '
      SCRPT(64)=' VIB 2V1       ELOSS=  0.590  '
      SCRPT(65)=' VIB 3V1       ELOSS=  0.880  '
      SCRPT(66)=' VIB 4V1       ELOSS=  1.17   '
      SCRPT(67)=' VIB 5V1       ELOSS=  1.47   '
      SCRPT(68)=' VIB 6V1       ELOSS=  1.76   '
      SCRPT(69)=' VIB 7V1       ELOSS=  2.06   '
      SCRPT(70)=' VIB 8V1       ELOSS=  2.35   '
      SCRPT(71)=' EXC TRPLT1    ELOSS=  6.17   '
      SCRPT(72)=' EXC TRPLT3    ELOSS=  7.35   '
      SCRPT(73)=' EXC TRPLT5    ELOSS=  7.80   '
      SCRPT(74)=' EXC SNGLT2    ELOSS=  8.55   '
      SCRPT(75)=' EXC TRPLT7    ELOSS= 11.03   '
      SCRPT(76)=' EXC TRPLT8    ELOSS= 11.87   '
      SCRPT(77)=' EXC SNGLT5    ELOSS= 13.0    '
#       
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP 
#        
# ELASTIC (+ROTATIONAL)                                                           
      DO 10 J=2,NELA                                                    
      IF(EN <= XELA[J]):
 GO TO 15                                        
   10 CONTINUE                                                          
      J=NELA                                                            
   15 A=(YELA[J]-YELA[J-1])/(XELA[J]-XELA[J-1])                         
      B=(XELA[J-1]*YELA[J]-XELA[J]*YELA[J-1])/(XELA[J-1]-XELA[J])
      QELA=(A*EN+B)*1.0D-16
#      
#  MOMENTUM TRANSFER
      DO 20 J=2,NMOM                                                    
      IF(EN <= XMOM(J):
) GO TO 25                                        
   20 CONTINUE                                                          
      J=NMOM                                                            
   25 A=(YMOM(J)-YMOM(J-1))/(XMOM(J)-XMOM(J-1))                         
      B=(XMOM(J-1)*YMOM(J)-XMOM(J)*YMOM(J-1))/(XMOM(J-1)-XMOM(J))
      QMOM=(A*EN+B)*1.0D-16
#       
      PEQEL(2,I)=0.5+(QELA-QMOM)/QELA 
      Q(2,I)=QELA                                                       
#                                                                       
      Q(3,I)=0.0                   
      PEQEL(3,I)=0.5                                     
      IF(EN < E(3):
) GO TO 50                                           
      DO 30 J=2,NIOND                                                   
      IF(EN <= XION(J):
) GO TO 40                                        
   30 CONTINUE                                                          
      J=NIOND                                                  
   40 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.D-16       
# USE ANISOTROPIC SCATTERING FOR PRIMARY IONISATION ELECTRON FOR
# ENERGIES ABOVE 2 * IONISATION ENERGY
# ANISOTROPIC ANGULAR DISTRIBUTION SAME AS ELASTIC AT ENERGY OFFSET BY
# IONISATION ENERGY
      IF(EN <= (2.0*E(3):
)) GO TO 50
      PEQEL(3,I)=PEQEL(2,(I-IOFF))                                      
#                                                                       
   50 Q(4,I)=0.0   
      QATT(1,I)=Q(4,I)                               
      Q(5,I)=0.0                                                        
      Q(6,I)=0.0                                                        
#---------------------------------------------------------------------  
#  QUADRUPOLE BORN ROTATIONAL STATES  ( GERJUOY AND STEIN)              
#---------------------------------------------------------------------
#  SUPERELASTIC ROTATION
      DO 51 K=1,28
      AJ=DFLOAT(K+1)
   51 QIN(K,I)=PJ(K+1)*QBK*math.sqrt(1.0-EIN(K)/EN)*AJ*(AJ-1.0)/((2.0*AJ+1.0
     /)*(2.0*AJ-1.0)) 
#  
      DO 52 K=29,56
   52 QIN(K,I)=0.0                        
# INELASTIC ROTATION  
#   ROT 0-2
      IF(EN <= EIN(29):
) GO TO 60
       QIN(29,I)=FROT0*QBK*math.sqrt(1.0-EIN(29)/EN)*2.0/3.0
#   ROT 1-3 AND HIGHER       
      DO 53 K=30,56
      AJ=DFLOAT(K-29)
      IF(EN <= EIN(K):
) GO TO 60
   53 QIN(K,I)=PJ(K-29)*QBK*math.sqrt(1.0-EIN(K)/EN)*(AJ+2.0)*(AJ+1.0)/((2.0
     /*AJ+3.0)*(2.0*AJ+1.0))     
# BORN (1/E) FALL OFF IN ROTATIONAL X-SECS ABOVE 6.0 EV
   60 IF(EN < 6.0) GO TO 80
      DO 70 K=1,56
   70 QIN(K,I)=QIN(K,I)*6.0/EN   
#                                                                    
#---------------------------------------------------------------------  
   80 CONTINUE                                                          
#---------------------------------------------------------------------  
      QIN(57,I)=0.0                                                     
      IF(EN <= EIN(57):
) GO TO 110                                       
      DO 90 J=2,NVIB1                                                   
      IF(EN <= XVIB1(J):
) GO TO 100                                      
   90 CONTINUE                                                          
      J=NVIB1                                                           
  100 A=(YVIB1(J)-YVIB1(J-1))/(XVIB1(J)-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1(J)-XVIB1(J)*YVIB1(J-1))/(XVIB1(J-1)-XVIB1(J)) 
      QIN(57,I)=(A*EN+B)*1.D-16                                         
  110 CONTINUE
#                                                                       
      QIN(58,I)=0.0                                                     
      IF(EN <= EIN(58):
) GO TO 140                                       
      DO 120 J=2,NVIB2                                                  
      IF(EN <= XVIB2(J):
) GO TO 130                                      
  120 CONTINUE                                                          
      J=NVIB2                                                           
  130 A=(YVIB2(J)-YVIB2(J-1))/(XVIB2(J)-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2(J)-XVIB2(J)*YVIB2(J-1))/(XVIB2(J-1)-XVIB2(J)) 
      QIN(58,I)=(A*EN+B)*1.D-16                                         
  140 CONTINUE                                                          
#                                                                       
      QIN(59,I)=0.0                                                     
      IF(EN <= EIN(59):
) GO TO 170                                       
      DO 150 J=2,NVIB3                                                  
      IF(EN <= XVIB3(J):
) GO TO 160                                      
  150 CONTINUE                                                          
      J=NVIB3                                                           
  160 A=(YVIB3(J)-YVIB3(J-1))/(XVIB3(J)-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3(J)-XVIB3(J)*YVIB3(J-1))/(XVIB3(J-1)-XVIB3(J)) 
      QIN(59,I)=(A*EN+B)*1.D-16                                         
  170 CONTINUE                                                          
#                                                                       
      QIN(60,I)=0.0                                                     
      IF(EN <= EIN(60):
) GO TO 200                                       
      DO 180 J=2,NVIB4                                                  
      IF(EN <= XVIB4(J):
) GO TO 190                                      
  180 CONTINUE                                                          
      J=NVIB4                                                           
  190 A=(YVIB4(J)-YVIB4(J-1))/(XVIB4(J)-XVIB4(J-1))                     
      B=(XVIB4(J-1)*YVIB4(J)-XVIB4(J)*YVIB4(J-1))/(XVIB4(J-1)-XVIB4(J)) 
      QIN(60,I)=(A*EN+B)*1.D-16                                         
  200 CONTINUE                                                          
#                                                                       
      QIN(61,I)=0.0                                                     
      IF(EN <= EIN(61):
) GO TO 230                                       
      DO 210 J=2,NVIB5                                                  
      IF(EN <= XVIB5(J):
) GO TO 220                                      
  210 CONTINUE                                                          
      J=NVIB5                                                           
  220 A=(YVIB5(J)-YVIB5(J-1))/(XVIB5(J)-XVIB5(J-1))                     
      B=(XVIB5(J-1)*YVIB5(J)-XVIB5(J)*YVIB5(J-1))/(XVIB5(J-1)-XVIB5(J)) 
      QIN(61,I)=(A*EN+B)*1.D-16                                         
  230 CONTINUE                                                          
#                                                                       
      QIN(62,I)=0.0                                                     
      IF(EN <= EIN(62):
) GO TO 260                                       
      DO 240 J=2,NVIB6                                                  
      IF(EN <= XVIB6(J):
) GO TO 250                                      
  240 CONTINUE                                                          
      J=NVIB6                                                           
  250 A=(YVIB6(J)-YVIB6(J-1))/(XVIB6(J)-XVIB6(J-1))                     
      B=(XVIB6(J-1)*YVIB6(J)-XVIB6(J)*YVIB6(J-1))/(XVIB6(J-1)-XVIB6(J)) 
      QIN(62,I)=(A*EN+B)*1.D-16                                         
  260 CONTINUE 
#                                                                       
      QIN(63,I)=0.0                                                     
      IF(EN <= EIN(63):
) GO TO 330                                       
      DO 310 J=2,NVIB7                                                  
      IF(EN <= XVIB7(J):
) GO TO 320                                      
  310 CONTINUE                                                          
      J=NVIB7                                                           
  320 A=(YVIB7(J)-YVIB7(J-1))/(XVIB7(J)-XVIB7(J-1))                     
      B=(XVIB7(J-1)*YVIB7(J)-XVIB7(J)*YVIB7(J-1))/(XVIB7(J-1)-XVIB7(J)) 
      QIN(63,I)=(A*EN+B)*1.D-16                                         
  330 CONTINUE                                                          
#                                                                       
      QIN(64,I)=0.0                                                     
      IF(EN <= EIN(64):
) GO TO 360                                       
      DO 340 J=2,NVIB8                                                  
      IF(EN <= XVIB8(J):
) GO TO 350                                      
  340 CONTINUE                                                          
      J=NVIB8                                                           
  350 A=(YVIB8(J)-YVIB8(J-1))/(XVIB8(J)-XVIB8(J-1))                     
      B=(XVIB8(J-1)*YVIB8(J)-XVIB8(J)*YVIB8(J-1))/(XVIB8(J-1)-XVIB8(J)) 
      QIN(64,I)=(A*EN+B)*1.D-16                                         
  360 CONTINUE 
#                                                                       
      QIN(65,I)=0.0 
      PEQIN(65,I)=0.5                                                   
      IF(EN <= EIN(65):
) GO TO 450                                       
      DO 430 J=2,NTRP1                                                  
      IF(EN <= XTRP1(J):
) GO TO 440                                      
  430 CONTINUE                                                          
      J=NTRP1                                                           
  440 A=(YTRP1(J)-YTRP1(J-1))/(XTRP1(J)-XTRP1(J-1))                     
      B=(XTRP1(J-1)*YTRP1(J)-XTRP1(J)*YTRP1(J-1))/(XTRP1(J-1)-XTRP1(J)) 
      QIN(65,I)=(A*EN+B)*1.D-16  
      IF(EN <= (2.0*EIN(65):
)) GO TO 450
      PEQIN(65,I)=PEQEL(2,(I-IOFF65))                                   
  450 CONTINUE                                                          
#                                                                       
      QIN(66,I)=0.0                 
      PEQIN(66,I)=0.5                                    
      IF(EN <= EIN(66):
) GO TO 510                                       
      DO 490 J=2,NTRP3                                                  
      IF(EN <= XTRP3(J):
) GO TO 500                                      
  490 CONTINUE                                                          
      J=NTRP3                                                           
  500 A=(YTRP3(J)-YTRP3(J-1))/(XTRP3(J)-XTRP3(J-1))                     
      B=(XTRP3(J-1)*YTRP3(J)-XTRP3(J)*YTRP3(J-1))/(XTRP3(J-1)-XTRP3(J)) 
      QIN(66,I)=(A*EN+B)*1.D-16     
      IF(EN <= (2.0*EIN(66):
)) GO TO 510
      PEQIN(66,I)=PEQEL(2,(I-IOFF66))                                   
  510 CONTINUE                                                          
#                                                                       
      QIN(67,I)=0.0
      PEQIN(67,I)=0.5                                                   
      IF(EN <= EIN(67):
) GO TO 570                                       
      DO 550 J=2,NTRP5                                                  
      IF(EN <= XTRP5(J):
) GO TO 560                                      
  550 CONTINUE                                                          
      J=NTRP5                                                           
  560 A=(YTRP5(J)-YTRP5(J-1))/(XTRP5(J)-XTRP5(J-1))                     
      B=(XTRP5(J-1)*YTRP5(J)-XTRP5(J)*YTRP5(J-1))/(XTRP5(J-1)-XTRP5(J)) 
      QIN(67,I)=(A*EN+B)*1.D-16 
      IF(EN <= (2.0*EIN(67):
)) GO TO 570
      PEQIN(67,I)=PEQEL(2,(I-IOFF67))                                   
  570 CONTINUE                                                          
#                                                                       
      QIN(68,I)=0.0   
      PEQIN(68,I)=0.5                                                  
      IF(EN <= EIN(68):
) GO TO 660                                       
      DO 640 J=2,NSNG2                                                  
      IF(EN <= XSNG2(J):
) GO TO 650                                      
  640 CONTINUE                                                          
      J=NSNG2                                                           
  650 A=(YSNG2(J)-YSNG2(J-1))/(XSNG2(J)-XSNG2(J-1))                     
      B=(XSNG2(J-1)*YSNG2(J)-XSNG2(J)*YSNG2(J-1))/(XSNG2(J-1)-XSNG2(J)) 
      QIN(68,I)=(A*EN+B)*1.D-16        
      IF(EN <= (2.0*EIN(68):
)) GO TO 660
      PEQIN(68,I)=PEQEL(2,(I-IOFF68))                                 
  660 CONTINUE                                                          
#                                                                       
      QIN(69,I)=0.0
      PEQIN(69,I)=0.5                                                   
      IF(EN <= EIN(69):
) GO TO 720                                       
      DO 700 J=2,NTRP7                                                  
      IF(EN <= XTRP7(J):
) GO TO 710                                      
  700 CONTINUE                                                          
      J=NTRP7                                                           
  710 A=(YTRP7(J)-YTRP7(J-1))/(XTRP7(J)-XTRP7(J-1))                     
      B=(XTRP7(J-1)*YTRP7(J)-XTRP7(J)*YTRP7(J-1))/(XTRP7(J-1)-XTRP7(J)) 
      QIN(69,I)=0.6666*(A*EN+B)*1.D-16 
      IF(EN <= (2.0*EIN(69):
)) GO TO 720
      PEQIN(69,I)=PEQEL(2,(I-IOFF69))                                   
  720 CONTINUE                                                          
#                                                                       
      QIN(70,I)=0.0  
      PEQIN(70,I)=0.5                                                   
      IF(EN <= EIN(70):
) GO TO 750                                       
      DO 730 J=2,NTRP8                                                  
      IF(EN <= XTRP8(J):
) GO TO 740                                      
  730 CONTINUE                                                          
      J=NTRP8                                                           
  740 A=(YTRP8(J)-YTRP8(J-1))/(XTRP8(J)-XTRP8(J-1))                     
      B=(XTRP8(J-1)*YTRP8(J)-XTRP8(J)*YTRP8(J-1))/(XTRP8(J-1)-XTRP8(J)) 
      QIN(70,I)=(A*EN+B)*1.D-16 
      IF(EN <= (2.0*EIN(70):
)) GO TO 750
      PEQIN(70,I)=PEQEL(2,(I-IOFF70))                                   
  750 CONTINUE                                                          
#                                                                       
      QIN(71,I)=0.0 
      PEQIN(71,I)=0.5                                                   
      IF(EN <= EIN(71):
) GO TO 810                                       
      DO 790 J=2,NSNG5                                                  
      IF(EN <= XSNG5(J):
) GO TO 800                                      
  790 CONTINUE                                                          
      J=NSNG5                                                           
  800 A=(YSNG5(J)-YSNG5(J-1))/(XSNG5(J)-XSNG5(J-1))                     
      B=(XSNG5(J-1)*YSNG5(J)-XSNG5(J)*YSNG5(J-1))/(XSNG5(J-1)-XSNG5(J)) 
      QIN(71,I)=(A*EN+B)*1.D-16
      IF(EN <= (2.0*EIN(71):
)) GO TO 810
      PEQIN(71,I)=PEQEL(2,(I-IOFF71))                                   
  810 CONTINUE                                                          
#                                                                       
#                                                                       
      SUM=0.0                                                           
      DO 898 K=1,56                                                     
      SUM=SUM+QIN(K,I)                                                  
  898 CONTINUE 
# GET CORRECT ELASTIC XSECTION BY SUBTRACTION OF ROTATION
      Q(2,I)=Q(2,I)-SUM 
      SUM1=0.0
      DO 899 K=57,71   
      SUM1=SUM1+QIN(K,I)   
  899 CONTINUE                                                          
      Q(1,I)=Q(2,I)+Q(3,I)+SUM+SUM1                                     
  900 CONTINUE                                                          
# SAVE COMPUTE TIME                                                     
      DO 1000 K=1,71                                                  
      J=72-K                                                            
      IF(EFINAL <= EIN(J):
) NIN=J-1                                      
 1000 CONTINUE 
#                                                                       
      RETURN                                                            
      # end   
      def GAS59(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY  
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      IMPLICIT #real*8 (A-H,O-Z) 
      IMPLICIT #integer*8 (I-N)                                        
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6) 
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)         
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]    
      DIMENSION XELM(69),YELM(69),XVIBR(21),YVIBR(21),
     /XION(106),YION(106),XATT(10),YATT(10),XDIS1(28),YDIS1(28),
     /XEL(11),YEL(11)           
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME     
#                                            
      DATA XELM/0.00,.001,0.01,.012,.014,.017,0.02,.025,0.03,.035,
     /0.04,0.05,0.06,0.07,0.08,0.09,0.10,0.12,0.14,0.17,               
     /0.20,0.25,0.30,0.35,0.40,0.45,0.50,0.60,0.70,0.80,                
     /1.00,1.20,1.40,1.70,2.00,2.50,3.00,3.50,4.00,5.00,                
     /6.00,7.00,8.00,9.00,10.0,12.0,15.0,20.0,30.0,40.0,                
     /50.0,60.0,80.0,100.,150.,200.,300.,400.,500.,600.,
     /800.,1000.,2000.,4000.,6000.,8000.,10000.,20000.,100000./
# ELASTIC MOMENTUM TRANSFER X-SECTION     
      DATA YELM/106.,106.,106.,105.,104.,102.,100.,95.0,90.0,86.0, 
     /83.0,76.5,70.5,65.5,60.5,55.5,51.0,43.0,32.5,20.5,                
     /13.0,6.00,4.00,3.20,3.20,3.30,3.60,4.30,5.00,6.50,                
     /9.50,12.5,16.5,21.0,26.0,28.5,30.0,30.5,30.0,28.5,  
     /26.5,24.5,22.5,20.5,18.5,16.0,13.0,8.50,4.70,3.40,                
     /2.50,2.10,1.55,1.20,0.85,0.65,0.55,0.40,0.35,0.30,
     /0.25,0.20,0.11,0.07,0.04,0.03,.025,.013,.002/
#  ELASTIC X-SECTION (ONLY KNOWN IN LIMITED RANGE)
      DATA XEL/1.00,2.00,2.50,3.00,5.00,7.50,10.0,15.0,20.0,60.0,
     /100./  
      DATA YEL/11.5,28.5,33.0,40.5,51.5,48.0,41.0,30.5,24.0,8.00,
     /6.40/       
# VIBRATION RESONANCE SHAPE def            
# GAUSSIAN SHAPE def AT 2.5 EV RESONANCE FWHM = 1.6 EV
# PLUS A HIGH ENERGY TAIL      
      DATA XVIBR/0.35,0.70,1.00,1.30,1.60,1.90,2.20,2.50,3.00,3.50,
     /4.00,4.50,5.00,5.50,6.00,6.50,10.0,100.,1000.,10000.,
     /100000./
      DATA YVIBR/0.00,0.16,0.47,1.14,2.25,3.65,4.90,5.40,4.90,3.65, 
     /2.25,1.14,0.47,0.16,0.04,0.02,.001,.0001,.00001,.000001,
     /.0000001/                  
# USE BEB VALUES FOR IONISATION                                         
      DATA XION/11.33,11.5,12.0,12.5,13.0,13.5,14.0,14.5,15.0,15.5,     
     /16.0,16.5,17.0,17.5,18.0,18.5,19.0,19.5,20.0,20.5,
     /21.0,21.5,22.0,22.5,23.0,23.5,24.0,26.0,28.0,30.0,
     /32.0,34.0,36.0,38.0,40.0,45.0,50.0,55.0,60.0,65.0,
     /70.0,75.0,80.0,85.0,90.0,95.0,100.,105.,110.,115.,
     /120.,125.,130.,135.,140.,145.,150.,160.,170.,180.,
     /190.,200.,210.,220.,230.,240.,250.,300.,350.,400.,
     /450.,500.,550.,600.,650.,700.,750.,800.,850.,900., 
     /950.,1000.,1100.,1200.,1300.,1400.,1500.,1600.,1700.,1800.,
     /1900.,2000.,2200.,2400.,2700.,3000.,4000.,5000.,6000.,8000.,
     /10000.,15000.,20000.,40000.,70000.,100000./
      DATA YION/0.00,.050,.202,.359,.518,.676,.832,.986,1.14,1.28,      
     /1.42,1.56,1.69,1.82,1.94,2.06,2.17,2.28,2.38,2.49,
     /2.60,2.70,2.80,2.90,2.99,3.08,3.16,3.47,3.74,3.96,
     /4.16,4.32,4.46,4.58,4.68,4.88,5.04,5.15,5.22,5.26,
     /5.27,5.27,5.26,5.24,5.20,5.16,5.12,5.08,5.03,4.98,
     /4.92,4.87,4.82,4.76,4.71,4.66,4.60,4.50,4.40,4.31,
     /4.21,4.12,4.04,3.95,3.87,3.80,3.72,3.39,3.12,2.88,
     /2.69,2.52,2.37,2.23,2.12,2.01,1.92,1.84,1.76,1.69,
     /1.62,1.56,1.46,1.37,1.29,1.22,1.15,1.10,1.05,1.00,
     /.960,.922,.854,.797,.724,.665,.524,.435,.372,.291,
     /.240,.169,.131,.071,.043,.031/
#   ATTACHMENT X-SECTION ( NO DATA)  
      DATA XATT/7.00,7.50,8.00,8.50,9.00,9.50,10.0,10.5,11.0,11.5/      
      DATA YATT/10*0.0/                                                 
#  EXCITATION AND DISSOCIATION                                                 
      DATA XDIS1/7.50,8.50,10.0,12.5,15.0,20.0,25.0,30.0,40.0,60.0,     
     /80.0,100.,150.,200.,300.,400.,500.,750.,1000.,1500.,              
     /2000.,3000.,4000.,6000.,8000.,10000.,20000.,100000./
      DATA YDIS1/0.00,1.80,4.50,5.70,6.50,7.00,7.25,7.25,7.00,6.50,     
     /6.00,5.50,4.80,4.00,3.00,2.50,2.00,1.40,1.00,0.80,                
     /0.60,0.40,0.30,0.20,0.18,0.16,0.08,0.02/
#     
#  ******************************************************************   
#  ISOTROPIC FIT TO DRIFT DIFFUSION DATA IN ARGON / GEH4 MIXTURES OF
#   SOEJIMA AND NAKAMURA   J VAC SCI TECHNOL A 11 (1993) 1161-1164
#   OTHER ELECTRON SCATTERING REFERENCES :             
#    DILLON ET AL    J.PHYS B 26(1993)3147
#    KARWASZ         J.PHYS B 28(1995)1301
#    MOZEJKO ET AL   J.PHYS.B 29(1996)L571
#  IONISATION X-SECTION FROM BEB THEORY OF KIM ET AL NIST WEB PAGE
#   
# 
# COMBINED EXCITATION AND DISSOCIATION X-SECTION FROM CONSISTENT 
# SUM OF ELASTIC, VIBRATION ,IONISATION AND EXCITATION/DISSOCIATION 
# TO GIVE EXPERIMENTAL VALUES OF THE TOTAL X-SECTION. 
#
#  ANALYSIS SUMMARY :  DRIFT AND DIFFUSION DATA CONSTRAIN VIBRATIONAL
#  X-SECTION BUT ARE ONLY SENSITIVE TO THE ELASTIC X-SECTION BELOW 
#  0.2EV .  VALUES OF THE ELASTIC X-SECTION ABOVE 1 EV ARE CONSTRAINED
#  BY THE ELECTRON SCATTERING MEASUREMENTS OF DILLON ET AL. 
# THE ELASTIC X-SECTION IN THE RAMSAUER DIP REGION BETWEEN 0.2 AND 
# 1.0 EV IS NOT CONSTRAINED BY THE DATA AND ONLY MEASUREMENTS OF DRIFT
# AND DIFFUSION IN PURE GERMANE WILL ALLOW A COMPLETE ANALYSIS
#     
# --------------------------------------------------------------------
#**********************************************************************
      NAME='GERMANE 2005   '
#**********************************************************************
      NION=1      
      NATT=1
      NIN=6 
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0
#           
      NDATA=69
      NVIBR=21                                                          
      NIOND=106                                                        
      NATT1=10                                                          
      NDIS1=28                                                          
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(76.6418*AMU)                                      
      E(3)=11.33                                                        
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
# OPAL AND BEATY ENERGY SPLITTING FACTOR       
      EOBY(1)=E(3) 
      EIN(1)=-0.1016   
      EIN(2)=0.1016 
      EIN(3)=0.2611
      EIN(4)=0.35 
      EIN(5)=0.50                                                  
      EIN(6)=7.5                                                        
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC        GERMANE       '
      SCRPT(3)=' IONISATION    ELOSS= 11.33   '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      SCRPT(7)=' VIB V2+V4     ELOSS= -0.1016 '
      SCRPT(8)=' VIB V2+V4     ELOSS=  0.1016 '
      SCRPT(9)=' VIB V1+V3     ELOSS=  0.2611 '
      SCRPT(10)=' VIB  HAR      ELOSS=  0.350  '
      SCRPT(11)=' VIB  HAR      ELOSS=  0.500  '
      SCRPT(12)=' EXC+DISSOC    ELOSS=  7.5    '  
      APOP=math.exp(EIN(1)/AKT)
#      
      EN=-ESTEP/2.00                                    
      DO 1000 I=1,NSTEP                                                 
      EN=EN+ESTEP   
# USE LOG INTERPOLATION FOR ELASTIC      
      IF(EN <= XELM(2):
) : 
       QMOM=YELM(2)*1.D-16
       GO TO 30 
      # endIF                                                    
      DO 3 J=2,NDATA 
      IF(EN <= XELM(J):
) GO TO 4                                         
   3  CONTINUE                                                          
      J=NDATA                                                           
   4  XNJ=math.log(XELM(J))
      XNJ1=math.log(XELM(J-1))
      YXJ=math.log(YELM(J))
      YXJ1=math.log(YELM(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QMOM=math.exp(A*math.log(EN)+B)*1.D-16
   30 CONTINUE
      PEQEL(2,I)=0.50                   
      Q(2,I)=QMOM
#       
# IONISATION
#                                                                      
      Q(3,I)=0.00           
      PEQEL(3,I)=0.50                                         
      IF(EN < E(3):
) GO TO 200                                          
      DO 110 J=2,NIOND                                                 
      IF(EN <= XION(J):
) GO TO 120                                       
  110 CONTINUE                                                          
      J=NIOND                                                  
  120 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.D-16
#      
# ATTACHMENT
#                                                                       
  200 Q(4,I)=0.00                       
      QATT(1,I)=Q(4,I)                               
      IF(EN < XATT(1):
) GO TO 300                                       
      IF(EN > XATT(NATT1):
) GO TO 300                                   
      DO 210 J=2,NATT1                                                  
      IF(EN <= XATT(J):
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NATT1                                                           
  220 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))                         
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))       
      Q(4,I)=(A*EN+B)*1.D-19
      QATT(1,I)=Q(4,I)
#                                                  
  300 Q(5,I)=0.00                                                      
      Q(6,I)=0.00  
#                                                          
# V4 + V2 SUPERELASTIC 
      QIN(1,I)=0.00                                                    
      IF(EN <= 0.0):
 GO TO 350 
      IF((EN+EIN(2):
) <= XVIBR(1)) GO TO 330                             
      DO 310 J=2,NVIBR                                                  
      IF((EN+EIN(2):
) <= XVIBR(J)) GO TO 320                             
  310 CONTINUE                                                          
      J=NVIBR                                                           
  320 A=(YVIBR(J)-YVIBR(J-1))/(XVIBR(J)-XVIBR(J-1))                     
      B=(XVIBR(J-1)*YVIBR(J)-XVIBR(J)*YVIBR(J-1))/(XVIBR(J-1)-XVIBR(J))
      QIN(1,I)=1.50*((EN+EIN(2))*(A*(EN+EIN(2))+B)/EN)
  330 CONTINUE    
      EFAC=math.sqrt(1.0-(EIN(1)/EN))
      QDIPOL=0.825*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      QIN(1,I)=QIN(1,I)+QDIPOL 
      QIN(1,I)=QIN(1,I)*APOP/(1.0+APOP)*1.D-16                          
  350 CONTINUE       
#                                                      
# V4 + V2                                                               
      QIN(2,I)=0.00
      IF(EN <= EIN(2):
) GO TO 400
      IF(EN <= XVIBR(1):
) GO TO 380                                      
      DO 360 J=2,NVIBR                                                  
      IF(EN <= XVIBR(J):
) GO TO 370                                      
  360 CONTINUE                                                          
      J=NVIBR                                                           
  370 A=(YVIBR(J)-YVIBR(J-1))/(XVIBR(J)-XVIBR(J-1))                     
      B=(XVIBR(J-1)*YVIBR(J)-XVIBR(J)*YVIBR(J-1))/(XVIBR(J-1)-XVIBR(J)) 
      QIN(2,I)=1.50*(A*EN+B)
  380 CONTINUE    
      EFAC=math.sqrt(1.0-(EIN(2)/EN))
      QDIPOL=0.825*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      QIN(2,I)=QIN(2,I)+QDIPOL   
      QIN(2,I)=QIN(2,I)/(1.0+APOP)*1.D-16                               
  400 CONTINUE  
#                                                          
# V1 + V3                                                               
      QIN(3,I)=0.00                                                    
      IF(EN <= EIN(3):
) GO TO 500 
      IF(EN <= XVIBR(1):
) GO TO 430                                      
      DO 410 J=2,NVIBR                                                  
      IF(EN <= XVIBR(J):
) GO TO 420                                      
  410 CONTINUE                                                          
      J=NVIBR                                                           
  420 A=(YVIBR(J)-YVIBR(J-1))/(XVIBR(J)-XVIBR(J-1))                     
      B=(XVIBR(J-1)*YVIBR(J)-XVIBR(J)*YVIBR(J-1))/(XVIBR(J-1)-XVIBR(J))
      QIN(3,I)=0.84*(A*EN+B)
  430 CONTINUE    
      EFAC=math.sqrt(1.0-(EIN(3)/EN))
      QDIPOL=0.530*math.log((1.0+EFAC)/(1.0-EFAC))/EN   
      QIN(3,I)=(QDIPOL+QIN(3,I))*1.D-16      
  500 CONTINUE       
#                                                     
#  VIBRATION HARMONICS 1                                                
      QIN(4,I)=0.00                                                    
      IF(EN <= EIN(4):
) GO TO 600 
      DO 510 J=2,NVIBR                                                  
      IF(EN <= XVIBR(J):
) GO TO 520                                      
  510 CONTINUE                                                          
      J=NVIBR                                                           
  520 A=(YVIBR(J)-YVIBR(J-1))/(XVIBR(J)-XVIBR(J-1))                     
      B=(XVIBR(J-1)*YVIBR(J)-XVIBR(J)*YVIBR(J-1))/(XVIBR(J-1)-XVIBR(J)) 
      QIN(4,I)=0.113*(A*EN+B)*1.D-16                                    
  600 CONTINUE  
#                                                          
#  VIBRATION HARMONICS 2                                                
      QIN(5,I)=0.00                                                    
      IF(EN <= EIN(5):
) GO TO 700                                        
      DO 610 J=2,NVIBR                                                  
      IF(EN <= XVIBR(J):
) GO TO 620                                      
  610 CONTINUE                                                          
      J=NVIBR                                                           
  620 A=(YVIBR(J)-YVIBR(J-1))/(XVIBR(J)-XVIBR(J-1))                     
      B=(XVIBR(J-1)*YVIBR(J)-XVIBR(J)*YVIBR(J-1))/(XVIBR(J-1)-XVIBR(J)) 
      QIN(5,I)=0.074*(A*EN+B)*1.D-16                                    
  700 CONTINUE 
#                                                           
#  EXCITATION + DISSOCIATION                                            
      QIN(6,I)=0.00                                                    
      IF(EN <= EIN(6):
) GO TO 850                                        
      DO 810 J=2,NDIS1                                                  
      IF(EN <= XDIS1(J):
) GO TO 820                                      
  810 CONTINUE                                                          
      J=NDIS1                                                           
  820 A=(YDIS1(J)-YDIS1(J-1))/(XDIS1(J)-XDIS1(J-1))                     
      B=(XDIS1(J-1)*YDIS1(J)-XDIS1(J)*YDIS1(J-1))/(XDIS1(J-1)-XDIS1(J)) 
      QIN(6,I)=(A*EN+B)*1.D-16                                   
  850 CONTINUE                                                          
#                                                                       
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)+QIN(1,I)+QIN(2,I)+QIN(3,I)+QIN(4,I)+
     /QIN(5,I)+QIN(6,I)
#
 1000 CONTINUE                                                          
#  SAVE COMPUTE TIME   
      IF(EFINAL <= EIN(6):
) NIN=5
      IF(EFINAL <= EIN(5):
) NIN=4
      IF(EFINAL <= EIN(4):
) NIN=3
      IF(EFINAL <= EIN(3):
) NIN=2                                        
      IF(EFINAL <= EIN(2):
) NIN=1                                        
#                                                                       
      RETURN                                                            
      # end    
      def GAS60(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY  
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)
      IMPLICIT #real*8 (A-H,O-Z)  
      IMPLICIT #integer*8 (I-N)                                       
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6) 
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)          
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]    
      DIMENSION XELM(48),YELM(48),XVIBR(21),YVIBR(21),
     /XION(106),YION(106),XATT(10),YATT(10),XDIS1(28),YDIS1(28),
     /XEL(12),YEL(12)           
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME     
#                                            
# ELASTIC MOMENTUM TRANSFER X-SECTION     
      DATA XELM/0.00,.001,.004,0.01,.014,0.02,0.03,0.04,0.05,0.06,
     /0.07,0.08,0.10,0.12,0.14,0.17,0.20,0.30,0.40,0.50,
     /0.60,0.70,0.80,1.00,1.20,1.40,1.80,2.15,2.65,3.00,
     /4.00,5.00,7.50,10.0,15.0,20.0,40.0,70.0,100.,150.,
     /200.,400.,1000.,2000.,4000.,10000.,20000.,100000./
      DATA YELM/50.0,50.0,48.5,47.0,44.5,41.5,36.0,29.0,24.0,18.0,
     /14.5,11.5,7.50,4.80,2.65,1.60,1.20,0.95,0.95,1.05,
     /1.20,1.50,2.00,4.60,10.0,19.5,29.5,31.5,31.5,28.5,
     /24.5,25.5,23.0,16.0,11.5,9.50,5.00,3.00,1.50,0.90,
     /0.63,0.28,0.18,0.10,0.05,.0048,.0018,.00009/
#  ELASTIC X-SECTION (ONLY KNOWN IN LIMITED RANGE)
      DATA XEL/1.80,2.15,2.65,3.00,4.00,5.00,7.50,10.0,15.0,20.0,
     /40.0,100./
      DATA YEL/30.0,32.0,35.0,36.5,40.0,44.5,47.0,40.0,29.0,21.0,
     /15.0,5.00/  
# VIBRATION RESONANCE SHAPE def            
# GAUSSIAN SHAPE def AT 2.35 EV RESONANCE FWHM = 1.5 EV
# PLUS A HIGH ENERGY TAIL      
      DATA XVIBR/0.35,0.73,1.00,1.27,1.54,1.81,2.08,2.35,2.80,3.25,
     /3.70,4.15,4.60,5.05,5.50,5.95,10.0,100.,1000.,10000.,
     /100000./
      DATA YVIBR/0.00,0.16,0.47,1.14,2.25,3.65,4.90,5.40,4.90,3.65, 
     /2.25,1.14,0.47,0.16,0.08,0.06,0.05,.005,.0001,.00001,
     /.000001/                  
# USE BEB VALUES FOR IONISATION                                         
      DATA XION/11.65,12.0,12.5,13.0,13.5,14.0,14.5,15.0,15.5,16.0,
     /16.5,17.0,17.5,18.0,18.5,19.0,19.5,20.0,20.5,21.0,
     /21.5,22.0,22.5,23.0,23.5,24.0,26.0,28.0,30.0,32.0,
     /34.0,36.0,38.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,
     /75.0,80.0,85.0,90.0,95.0,100.,105.,110.,115.,120.,
     /125.,130.,135.,140.,145.,150.,160.,170.,180.,190.,
     /200.,210.,220.,230.,240.,250.,300.,350.,400.,450.,
     /500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,
     /1000.,1100.,1200.,1300.,1400.,1500.,1600.,1700.,1800.,1900.,
     /2000.,2200.,2400.,2700.,3000.,4000.,5000.,6000.,8000.,10000.,
     /14000.,20000.,30000.,40000.,60000.,100000./
      DATA YION/0.00,.112,.276,.444,.613,.780,.945,1.11,1.26,1.42,      
     /1.56,1.70,1.84,1.97,2.10,2.22,2.34,2.45,2.57,2.68,
     /2.79,2.90,3.00,3.10,3.20,3.29,3.62,3.90,4.14,4.34,
     /4.51,4.65,4.78,4.88,5.06,5.17,5.23,5.25,5.24,5.21,
     /5.17,5.12,5.06,5.00,4.93,4.87,4.80,4.73,4.66,4.59,
     /4.52,4.45,4.39,4.32,4.26,4.20,4.08,3.96,3.86,3.75,
     /3.66,3.56,3.48,3.39,3.31,3.24,2.90,2.64,2.42,2.24,
     /2.08,1.94,1.83,1.73,1.64,1.56,1.48,1.42,1.36,1.30,
     /1.25,1.16,1.09,1.02,.963,.912,.866,.825,.788,.754,
     /.724,.670,.623,.566,.518,.407,.337,.288,.225,.185,
     /.138,.101,.070,.054,.038,.024/
#   ATTACHMENT X-SECTION ( NB  *10**19 )  
      DATA XATT/7.00,7.50,8.00,8.50,9.00,9.50,10.0,10.5,11.0,11.5/      
      DATA YATT/0.00,5.00,10.0,16.0,10.0,5.00,1.00,0.10,0.01,.001/      
#  EXCITATION AND DISSOCIATION                                                  
      DATA XDIS1/8.00,9.00,10.0,12.0,15.0,20.0,25.0,30.0,40.0,60.0,     
     /80.0,100.,150.,200.,300.,400.,500.,750.,1000.,1500.,              
     /2000.,3000.,4000.,6000.,8000.,10000.,20000.,100000./
      DATA YDIS1/0.00,2.00,3.80,5.10,5.90,6.60,6.80,6.80,6.80,6.60,     
     /6.00,5.50,4.80,4.00,3.00,2.50,2.00,1.40,1.00,0.80,                
     /0.60,0.40,0.30,0.20,0.18,0.16,0.08,0.02/
#     
#  *********************************************************************
# FIT TO SILANE:
#   DRIFT VELOCITY : 
#           W.J.POLLOCK         TRANS FARADAY SOC. 64(1968)2919
#  TRANSVERSE DIFF : 
#        MILLICAN AND WALKER    J.PHYS.D 20(1987)193
#  TOWNS# end COEFICIENTS :  
#     SHIMOZUMA AND TAGASHIRA   J.PHYS.D 19(1986)L179
#  -----------------------------------------------------------
#  FIT TO MIXTURE DATA : 
#  ARGON/SILANE: DL AND VD
#      KURACHI AND NAKAMURA     J.PHYS.D 21(1988)602   
# ARGON/KRYPTON: DL AND VD 
#      KURACHI AND NAKAMURA     IEEE TRANS PLASMA SCI. 19(1991)262
#    
#***********************************************************************
      NAME='SILANE  2005   '
#**********************************************************************
      NION=1       
      NATT=1
      NIN=6 
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0
#    
#  USE ANISOTROPIC SCATTERING FROM LEVEL 2 AND 3 (V24 AND V13)
      KIN(2)=1
      KIN(3)=1    
#
      RAT=1.0 
      NDATA=48
      NVIBR=21                                                          
      NIOND=106                                                         
      NATT1=10                                                          
      NDIS1=28                                                          
      E(1)=0.0                                                          
      E(2)=2.0*EMASS/(32.1173*AMU)                                      
      E(3)=11.65                                                        
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
# OPAL AND BEATY ENERGY SPLITTING FACTOR       
      EOBY(1)=E(3) 
      EIN(1)=-0.1128   
      EIN(2)=0.1128 
      EIN(3)=0.2707
      EIN(4)=0.35 
      EIN(5)=0.50                                                  
      EIN(6)=8.0                                                        
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC        SILANE        '
      SCRPT(3)=' IONISATION    ELOSS= 11.65   '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      SCRPT(7)=' VIB V2+V4     ELOSS= -0.1128 '
      SCRPT(8)=' VIB V2+V4     ELOSS=  0.1128 '
      SCRPT(9)=' VIB V1+V3     ELOSS=  0.2707 '
      SCRPT(10)=' VIB  HAR      ELOSS=  0.350  '
      SCRPT(11)=' VIB  HAR      ELOSS=  0.500  '
      SCRPT(12)=' EXC+DISSOC    ELOSS=  8.0    '  
      APOP=math.exp(EIN(1)/AKT)
#      
      EN=-ESTEP/2.00                                    
      DO 1000 I=1,NSTEP                                                 
      EN=EN+ESTEP   
# USE LOG INTERPOLATION FOR ELASTIC      
      IF(EN <= XELM(2):
) : 
       QMOM=YELM(2)*1.D-16
       GO TO 30 
      # endIF                                                    
      DO 3 J=2,NDATA 
      IF(EN <= XELM(J):
) GO TO 4                                         
   3  CONTINUE                                                          
      J=NDATA                                                           
   4  XNJ=math.log(XELM(J))
      XNJ1=math.log(XELM(J-1))
      YXJ=math.log(YELM(J))
      YXJ1=math.log(YELM(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QMOM=math.exp(A*math.log(EN)+B)*1.D-16
   30 CONTINUE
      PEQEL(2,I)=0.50                   
      Q(2,I)=QMOM
#       
# IONISATION
#                                                                      
      Q(3,I)=0.00           
      PEQEL(3,I)=0.50                                         
      IF(EN < E(3):
) GO TO 200                                          
      DO 110 J=2,NIOND                                                  
      IF(EN <= XION(J):
) GO TO 120                                       
  110 CONTINUE                                                          
      J=NIOND                                                 
  120 A=(YION(J)-YION(J-1))/(XION(J)-XION(J-1))                         
      B=(XION(J-1)*YION(J)-XION(J)*YION(J-1))/(XION(J-1)-XION(J))       
      Q(3,I)=(A*EN+B)*1.D-16
#      
# ATTACHMENT
#                                                                       
  200 Q(4,I)=0.00                                
      QATT(1,I)=Q(4,I)                      
      IF(EN <= XATT(1):
) GO TO 300                                       
      IF(EN > XATT(NATT1):
) GO TO 300                                   
      DO 210 J=2,NATT1                                                  
      IF(EN <= XATT(J):
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NATT1                                                          
  220 A=(YATT(J)-YATT(J-1))/(XATT(J)-XATT(J-1))                         
      B=(XATT(J-1)*YATT(J)-XATT(J)*YATT(J-1))/(XATT(J-1)-XATT(J))       
      Q(4,I)=(A*EN+B)*1.D-19
      QATT(1,I)=Q(4,I)
#                                                  
  300 Q(5,I)=0.00                                                      
      Q(6,I)=0.00  
#                                                          
# V4 + V2 SUPERELASTIC 
      QIN(1,I)=0.00      
      QRES=0.00                                              
      IF(EN <= 0.0):
 GO TO 350 
      IF((EN+EIN(2):
) <= XVIBR(1)) GO TO 330                             
      DO 310 J=2,NVIBR                                                  
      IF((EN+EIN(2):
) <= XVIBR(J)) GO TO 320                             
  310 CONTINUE                                                          
      J=NVIBR                                                           
  320 A=(YVIBR(J)-YVIBR(J-1))/(XVIBR(J)-XVIBR(J-1))                     
      B=(XVIBR(J-1)*YVIBR(J)-XVIBR(J)*YVIBR(J-1))/(XVIBR(J-1)-XVIBR(J))
      QRES=1.40*((EN+EIN(2))*(A*(EN+EIN(2))+B)/EN)          
  330 CONTINUE    
      EFAC=math.sqrt(1.0-(EIN(1)/EN))
      QDIPOL=0.660*math.log((EFAC+1.0)/(EFAC-1.0))/EN       
      QIN(1,I)=(QRES+QDIPOL)*1.D-16 
      QIN(1,I)=QIN(1,I)*APOP/(1.0+APOP)                                
  350 CONTINUE       
#                                                      
# V4 + V2                                                               
      QIN(2,I)=0.00
      QRES=0.00
      IF(EN <= EIN(2):
) GO TO 400
      IF(EN <= XVIBR(1):
) GO TO 380                                      
      DO 360 J=2,NVIBR                                                  
      IF(EN <= XVIBR(J):
) GO TO 370                                      
  360 CONTINUE                                                          
      J=NVIBR                                                           
  370 A=(YVIBR(J)-YVIBR(J-1))/(XVIBR(J)-XVIBR(J-1))                     
      B=(XVIBR(J-1)*YVIBR(J)-XVIBR(J)*YVIBR(J-1))/(XVIBR(J-1)-XVIBR(J)) 
      QRES=1.40*(A*EN+B)        
  380 CONTINUE  
      EFAC=math.sqrt(1.0-(EIN(2)/EN))  
      QIN(2,I)=0.660*math.log((1.0+EFAC)/(1.0-EFAC))/EN       
      ELF=EN-EIN(2)
      FWD=math.log((EN+ELF)/(EN+ELF-2.0*math.sqrt(EN*ELF)))
      BCK=math.log((EN+ELF+2.0*math.sqrt(EN*ELF))/(EN+ELF))
# RATIO OF MT TO TOTAL X-SECT FOR RESONANCE PART = RAT
      XMT=((1.5-FWD/(FWD+BCK))*QIN(2,I)+RAT*QRES)*1.D-16
      QIN(2,I)=(QIN(2,I)+QRES)*1.D-16
      PEQIN(2,I)=0.5+(QIN(2,I)-XMT)/QIN(2,I)      
      QIN(2,I)=QIN(2,I)/(1.0+APOP)                                      
  400 CONTINUE  
#                                                          
# V1 + V3                                                               
      QIN(3,I)=0.00 
      QRES=0.00                                                   
      IF(EN <= EIN(3):
) GO TO 500 
      IF(EN <= XVIBR(1):
) GO TO 430                                      
      DO 410 J=2,NVIBR                                                  
      IF(EN <= XVIBR(J):
) GO TO 420                                      
  410 CONTINUE                                                          
      J=NVIBR                                                           
  420 A=(YVIBR(J)-YVIBR(J-1))/(XVIBR(J)-XVIBR(J-1))                     
      B=(XVIBR(J-1)*YVIBR(J)-XVIBR(J)*YVIBR(J-1))/(XVIBR(J-1)-XVIBR(J))
      QRES=0.65*(A*EN+B)         
  430 CONTINUE    
      EFAC=math.sqrt(1.0-(EIN(3)/EN))
      QIN(3,I)=0.418*math.log((1.0+EFAC)/(1.0-EFAC))/EN         
      ELF=EN-EIN(3)
      FWD=math.log((EN+ELF)/(EN+ELF-2.0*math.sqrt(EN*ELF)))
      BCK=math.log((EN+ELF+2.0*math.sqrt(EN*ELF))/(EN+ELF))
# RATIO OF MT TO TOTAL X-SECT FOR RESONANCE PART = RAT
      XMT=((1.5-FWD/(FWD+BCK))*QIN(3,I)+RAT*QRES)*1.D-16
      QIN(3,I)=(QIN(3,I)+QRES)*1.D-16
      PEQIN(3,I)=0.5+(QIN(3,I)-XMT)/QIN(3,I)      
  500 CONTINUE       
#                                                     
#  VIBRATION HARMONICS 1                                                
      QIN(4,I)=0.00                                                    
      IF(EN <= EIN(4):
) GO TO 600 
      DO 510 J=2,NVIBR                                                  
      IF(EN <= XVIBR(J):
) GO TO 520                                      
  510 CONTINUE                                                          
      J=NVIBR                                                           
  520 A=(YVIBR(J)-YVIBR(J-1))/(XVIBR(J)-XVIBR(J-1))                     
      B=(XVIBR(J-1)*YVIBR(J)-XVIBR(J)*YVIBR(J-1))/(XVIBR(J-1)-XVIBR(J)) 
      QIN(4,I)=0.134*(A*EN+B)*1.D-16                                    
  600 CONTINUE  
#                                                          
#  VIBRATION HARMONICS 2                                                
      QIN(5,I)=0.00                                                    
      IF(EN <= EIN(5):
) GO TO 700                                        
      DO 610 J=2,NVIBR                                                  
      IF(EN <= XVIBR(J):
) GO TO 620                                      
  610 CONTINUE                                                          
      J=NVIBR                                                           
  620 A=(YVIBR(J)-YVIBR(J-1))/(XVIBR(J)-XVIBR(J-1))                     
      B=(XVIBR(J-1)*YVIBR(J)-XVIBR(J)*YVIBR(J-1))/(XVIBR(J-1)-XVIBR(J)) 
      QIN(5,I)=0.094*(A*EN+B)*1.D-16                                    
  700 CONTINUE 
#                                                           
#  EXCITATION + DISSOCIATION                                            
      QIN(6,I)=0.00                                                    
      IF(EN <= EIN(6):
) GO TO 850                                        
      DO 810 J=2,NDIS1                                                  
      IF(EN <= XDIS1(J):
) GO TO 820                                      
  810 CONTINUE                                                          
      J=NDIS1                                                           
  820 A=(YDIS1(J)-YDIS1(J-1))/(XDIS1(J)-XDIS1(J-1))                     
      B=(XDIS1(J-1)*YDIS1(J)-XDIS1(J)*YDIS1(J-1))/(XDIS1(J-1)-XDIS1(J)) 
      QIN(6,I)=(A*EN+B)*1.D-16                                   
  850 CONTINUE                                                          
#                                                                       
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)+QIN(1,I)+QIN(2,I)+QIN(3,I)+QIN(4,I)+
     /QIN(5,I)+QIN(6,I)
#
 1000 CONTINUE                                                          
#  SAVE COMPUTE TIME   
      IF(EFINAL <= EIN(6):
) NIN=5
      IF(EFINAL <= EIN(5):
) NIN=4
      IF(EFINAL <= EIN(4):
) NIN=3
      IF(EFINAL <= EIN(3):
) NIN=2                                        
      IF(EFINAL <= EIN(2):
) NIN=1                                        
#                                                                       
      RETURN                                                            
      # end    
      def GAS61(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)       
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME 
#                                                
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# ---------------------------------------------------------------------
      NION=1 
      NATT=1
      NIN=0
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0           
      E(1)=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      EOBY(1)=0.0
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0  
      QATT(1,I)=Q(4,I)                                
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS62(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)       
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME     
#                                            
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# ---------------------------------------------------------------------
      NION=1 
      NATT=1
      NIN=0
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0           
      E(1)=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      EOBY(1)=0.0
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0  
      QATT(1,I)=Q(4,I)                                
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS63(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)       
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME     
#                                            
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# ---------------------------------------------------------------------
      NION=1 
      NATT=1
      NIN=0
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0           
      E(1)=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      EOBY(1)=0.0
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0  
      QATT(1,I)=Q(4,I)                                
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS64(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)       
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME     
#                                            
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# ---------------------------------------------------------------------
      NION=1 
      NATT=1
      NIN=0
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0           
      E(1)=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      EOBY(1)=0.0
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0  
      QATT(1,I)=Q(4,I)                                
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS65(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)       
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME     
#                                            
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# ---------------------------------------------------------------------
      NION=1 
      NATT=1
      NIN=0
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0           
      E(1)=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      EOBY(1)=0.0
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0  
      QATT(1,I)=Q(4,I)                                
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS66(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)       
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME 
#                                                
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# ---------------------------------------------------------------------
      NION=1 
      NATT=1
      NIN=0
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0           
      E(1)=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      EOBY(1)=0.0
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0  
      QATT(1,I)=Q(4,I)                                
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS67(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)       
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME     
#                                            
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# ---------------------------------------------------------------------
      NION=1 
      NATT=1
      NIN=0
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0           
      E(1)=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      EOBY(1)=0.0
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0  
      QATT(1,I)=Q(4,I)                                
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS68(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)       
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME     
#                                            
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# ---------------------------------------------------------------------
      NION=1 
      NATT=1
      NIN=0
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0           
      E(1)=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      EOBY(1)=0.0
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0  
      QATT(1,I)=Q(4,I)                                
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS69(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)       
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME     
#                                            
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# ---------------------------------------------------------------------
      NION=1 
      NATT=1
      NIN=0
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0           
      E(1)=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      EOBY(1)=0.0
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0  
      QATT(1,I)=Q(4,I)                                
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS70(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)       
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME     
#                                            
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# ---------------------------------------------------------------------
      NION=1 
      NATT=1
      NIN=0
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0           
      E(1)=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      EOBY(1)=0.0
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0  
      QATT(1,I)=Q(4,I)                                
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS71(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)       
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME     
#                                            
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# ---------------------------------------------------------------------
      NION=1 
      NATT=1
      NIN=0
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0           
      E(1)=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      EOBY(1)=0.0
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0  
      QATT(1,I)=Q(4,I)                                
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS72(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)       
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME     
#                                            
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# ---------------------------------------------------------------------
      NION=1 
      NATT=1
      NIN=0
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0           
      E(1)=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      EOBY(1)=0.0
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0  
      QATT(1,I)=Q(4,I)                                
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS73(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)       
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME      
#                                           
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# ---------------------------------------------------------------------
      NION=1 
      NATT=1
      NIN=0
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0           
      E(1)=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      EOBY(1)=0.0
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0  
      QATT(1,I)=Q(4,I)                                
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS74(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)       
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME      
#                                           
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# ---------------------------------------------------------------------
      NION=1 
      NATT=1
      NIN=0
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0           
      E(1)=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      EOBY(1)=0.0
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0  
      QATT(1,I)=Q(4,I)                                
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS75(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)       
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME     
#                                            
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# ---------------------------------------------------------------------
      NION=1 
      NATT=1
      NIN=0
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0           
      E(1)=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      EOBY(1)=0.0
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0  
      QATT(1,I)=Q(4,I)                                
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS76(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)       
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME     
#                                            
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# ---------------------------------------------------------------------
      NION=1 
      NATT=1
      NIN=0
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0           
      E(1)=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      EOBY(1)=0.0
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0  
      QATT(1,I)=Q(4,I)                                
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS77(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)       
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME     
#                                            
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# ---------------------------------------------------------------------
      NION=1 
      NATT=1
      NIN=0
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0           
      E(1)=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      EOBY(1)=0.0
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0  
      QATT(1,I)=Q(4,I)                                
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS78(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)       
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME     
#                                            
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# ---------------------------------------------------------------------
      NION=1 
      NATT=1
      NIN=0
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0           
      E(1)=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      EOBY(1)=0.0
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0  
      QATT(1,I)=Q(4,I)                                
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS79(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)       
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME     
#                                            
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# ---------------------------------------------------------------------
      NION=1 
      NATT=1
      NIN=0
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0           
      E(1)=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      EOBY(1)=0.0
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0  
      QATT(1,I)=Q(4,I)                                
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS80(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY 
     /,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
     /QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT,SCRPTN)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      DIMENSION QATT(8,4000),QNULL(10,4000),SCLN(10)
      DIMENSION PEQEL(6,4000),PEQIN(250,4000),KIN(250),KEL(6)  
      DIMENSION QION(30,4000),PEQION(30,4000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),
     /NG2(30),EG2(30)       
      DIMENSION Q(6,4000),QIN(250,4000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME    
#                                             
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# ---------------------------------------------------------------------
      NION=1 
      NATT=1
      NIN=0
      NNULL=0
#
      DO 1 J=1,6
    1 KEL(J)=0
      DO 2 J=1,NIN
    2 KIN(J)=0           
      E(1)=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      EOBY(1)=0.0
      SCRPT(1)='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0  
      QATT(1,I)=Q(4,I)                                
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end
