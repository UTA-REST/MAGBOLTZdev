# 
#                   def DEGRADE VERSION 3.3   
#
# ********************************************************************** 
#  COPYRIGHT 2017 :   STEPHEN FRANCIS BIAGI    MARIA R.C. 
#  *********************************************************************
# VERSION 3.3   H2O 2017 ADDED TO DATA BASE
#------------------------------------------------------
# VERSION 3.2   C3H8 2017 ADDED TO DATA BASE
#--------------------------------------------------------
# VERSION 3.1   C2H6 2016 ADDED TO DATA BASE
#               INTRODUCED EXTRA NULL COLLISIONS TO SIMULATE LIGHT
#               EMISSION ALONG TRACKS in MOLECULAR GASSES
#               RAW DATA NOW INCLUDES BLOCK WITH COORDINATES OF
#               MOLECULAR LIGHT EMISSION AND IDENTIFICATION OF EMISSION
#               FRAGMENT.
#            
#-----------------------------------------------------------------------
# ----------------------------------------------------------------------
# VERSION 2.14  O2 UPDATE WITH BETTER ROTATIONAL X-SECTIONS FROM GELTMAN
#                  AND TAKAYANGI
#-----------------------------------------------------------------------
# VERSION 2.13  O2 UPDATE  
#      CONTAINS OPTION (IN def GAS15) TO SCALE 3 BODY ATTACHMENT
#                
#-----------------------------------------------------------------------
# VERSION 2.12  N2 UPDATE WITH DISSOCIATIVE IONISATION
#-----------------------------------------------------------------------
# VERSION 2.11A FIXED BUGS IN MAGNETIC ROUTINES FOUND BY CARLOS AZEVADO
#-----------------------------------------------------------------------
# VERSION 2.11  H2 UPDATE WITH DISSOCIATIVE IONISATION
#----------------------------------------------------------------------
# VERSION 2.10B RAW DATA OUPUT CHANGED TO GIVE EXCITATION TOTAL 
#                  IN EACH GAS 
# VERSION 2.10A FIX OUTPUT BUG FOR CARLOS AZEVADO
#------------------------------------------------
# VERSION 2.10 CO2 UPDATE CORRECT OSCILLATOR STRENGTHS AND DISSOCIATIVE
#              IONISATION INCLUDED
#-----------------------------------------------------------------------
# VERSION2.9   TMA UPDATE NOW INCLUDED IN DEGRAD
#-----------------------------------------------------------------------
# VERSION2.8A  BUG:MISSING LINE IN def CASRESE FIXED
#------------------------------------------------------------------
# VERSION2.8   UPDATED CF4 TO INCLUDE ALL IONISATION DISSOCIATION
#              CHANNELS AND ALSO NEW OSCILLATOR STRENGTHS
#              MODIFIED DOUBLE BETA DECAY SO THAT THE INITIAL VECTOR
#              OF THE SECOND BETA ARE AUTOMATICALLY AT 180 DEGREES TO THE
#              FIRST BETA.
#-----------------------------------------------------------------------
# VERSION 2.7  UPDATED CH4 TO INCLUDE ALL IONISATION DISSOCIATION
#              CHANNELS
#-----------------------------------------------------------------------
# VERSION 2.6  ADDED SF6 (2014) TO DATA BASE
#  --------------------------------------------------------------------
# VERSION 2.5  CHANGED INPUT DATA print FOR ANGULAR DISTRIBUTION
#              PARAMETERS SO THAT PRECISION IS GOOD AT HIGHEST ENERGIES.
#      ALSO UPDATED C4H10 ,N2, H2 AND CH4 TO GIVE BETTER RANGE
#      PARAMETERS
#----------------------------------------------------------------------
# VERSION 2.4  SMALL CHANGES TO OUTPUT
#--------------------------------------------------------------------
# VERSION 2.3  CORRECTED ERROR IN FANO CALCULATION FOR DETECTION
#              EFFICIENCY OF PHOTONS.
#-------------------------------------------------------------------
# VERSION 2.2  REMOVED BUG WHICH CAUSED 0.1% BAD EVENTS.
#--------------------------------------------------------------------
# VERSION 2.1  IMPROVED ELECTRON IONISATION FLUORESCENCE CALCULATION
#---------------------------------------------------------------------
# VERSION 1.9  CORRECTED ERROR IN LOGIC IN VERSION 1.8 AND 1.7
#---------------------------------------------------------------------
# VERSION 1.8  INTRODUCED FORM FACTORS FOR COMPTON AND RAYLEIGH
#---------------------------------------------------------------------
# VERSION 1.7  BREMSTRAHLUNG INCLUDED AS OPTION
#----------------------------------------------------------------------
# VERSION 1.6  INTRODUCED DENSITY EFFECT
#----------------------------------------------------------------------
# VERSION 1.5  INTRODUCED SEED FOR RANDOM NUMBER GENERATOR
#-----------------------------------------------------------------------
# VERSION 1.4  IMPROVED PRINTED OUTPUT print
#-----------------------------------------------------------------------
# VERSION 1.3  COMPTON RAYLEIGH AND PAIR PRODUCTION INCLUDED AS OPTION
#-----------------------------------------------------------------------
# VERSION 1.2 
#             USED RELATIVISTIC KINEMATICS
#-----------------------------------------------------------------------
# VERSION 1.1 
#            INCREASED SOME ARRAY SIZES 
#            ALLOWED 5TH GENERATION PHOTOABSORPTION
#            IMPLEMENTED ANGULAR DISTRIBUTION FOR INITIAL PHOTO ELECTRON
#            COMING FROM 2ND,3RD,4TH AND 5TH GENERATION PHOTOABSORPTION
#----------------------------------------------------------------------
# def CALCULATES DEGREDATION SPECTRA FOR :1) MIPS
#                                             2) ELECTRON BEAM 
#                                             3) X-RAYS
#                                             4) BETA DECAY
#                                             5) DOUBLE BETA DECAY
#    FOR X-RAYS : 
# SHELL ABSORPTION BY PHOTOELECTRIC EFFECT AND SUBSEQUENT AUGER SHAKEOFF 
# AND FLOURESCENCE EMISSION SIMULATED AUTOMATICALLY. 
# AUGER FLOURESCENCE AND SHAKE OFF ALSO INCLUDED IN BETA AND DOUBLE BETA
# DECAY SIMULATIONS.
# CALCULATES NO OF ELECTRONS AND EXCITATIONS AFTER ENERGY THERMALISATION
# GIVING THE FANO FACTORS FOR BOTH THE ELECTRONS AND THE EXCITATIONS.
# RANGE PARAMETERS CAN BE EXTRACTED FROM THE THERMALISED ELECTRON RAW
# DATA OUPUT.
# ASSUMING NO IONISATION-RECOMBINATION IT GIVES LIGHT YIELD IN NOBLE 
# GASES ASSUMING NO MOLECULAR CONTAMINATION.
# CONTROL CHARACTER, IWRITE=1 ,  OUTPUTS RAW DATA TO OUTPUT FILE FOR 
# LATER ANALYSIS. 
#     RAW DATA OUPUT FILE print GIVEN BELOW
#  THIS def CAN BE USED TO GIVE THE CLUSTER SIZE DISTRIBUTION AND 
#  PRIMARY CLUSTER DISTRIBUTION IN GAS MIXTURES FOR IONISING  PARTICLES. 
#  THE SPATIAL DISTRIBUTION OF THE THERMALISED ELECTRONS IS GIVEN
#  AND PLOTTED AS A CUMULATED SUM . THE INDIVIDUAL EVENTS CAN ALSO BE
#  OUTPUT USING CONTROL WORD ,IWRITE , SO THAT A MORE DETAILED ANALAYSIS
#  CAN BE PERFORMED WITH OTHER DETECTOR SIMULATION defS.
#    IONISING PARTICLE CLUSTERS ARE CREATED WITH A START POSITION OF THE 
#  PRIMARY ELECTRON IN X Y AND Z OF (0,0,0) .IT IS EASY TO TRANSFORM AND 
#  PLACE THE GENERATED CLUSTERS ON A TRACK WITH THE CALCULATED PRIMARY
#  CLUSTER SPACING ALONG THE TRACK GIVEN BY A POISSON DISTRIBUTION.
#  THERE IS AT THE MOMENT NO FACILITY TO ALLOW THE DENSITY EFFECT, WHICH
#  MAY CHANGE THE CLUSTER SIZE AT ENERGIES ABOVE MINIMUM IONISING. 
#  HOWEVER THE DENSITY EFFECT IS EXPECTED TO BE SMALL ABOVE MINIMUM 
#  IONISING. THE DE/DX IS ALSO CALCULATED FOR THE IONISING PARTICLE
#  ENERGY.
#            
#  THE def ALSO CALCULATES THE RANGE AND ALL FANO FACTORS FOR THE
#  CASE OF X-RAY INJECTED WITH AN ENERGY ESTART INTO THE GAS.
#  THIS ALLOWS THE SIMULATION OF THE RANGE AND CLUSTER SIZE OF X-RAYS
#  INCIDENT ON THE GAS MIXTURE. THE CONVERSION POINT IS TAKEN SIMILARLY
#  TO THE MIP CASE TO BE AT (0,0,0).
#  THE def CAN OUTPUT THE RAW DATA SUCH AS CONVERTED X-RAY CLOUD 
#  COORDINATES OF THE THERMALISED ELECTRONS FOR LATER USE BY DETECTOR 
#  SIMULATION defS
#  
#  THE PRELIMINARY TESTS ON THE NOBLE GASES GIVE FANO FACTORS AND RANGE
#  TO BETTER THAN 5% ACCURACY UP TO 20KEV. CLUSTER SIZE DISTRIBUTIONS
#  FOR MIPS SEEM TO BE IN AGREEMENT WITH THE ONLY ACCURATE DATA OF
#  FISCHLE ET AL.. 
#  THE AUTHOR WOULD LIKE FEEDBACK FROM USERS OF THE def 
#  SPECIFICALLY THE USE OF THE PENNING OPTION REQUIRES SOME INPUT TO 
#  THE def. THE PROBABILITY OF PENNING TRANSFER IS MIXTURE
#  DEP# endENT AND ONLY WITH SOME GOOD FEEDBACK FROM  USERS SO THAT A
#  PENNING FRACTION DATABASE BE BUILT UP.
#  THE PENNING FRACTION CAN BE INSERTED BY USERS IN EACH OF THE GAS
#  DATABASE defS : RECOMPILED AND RUN . NOTE THERE IS A LOT OF
#  MISLEADING STATEMENTS ON PENNING MIXTURES IN THE LITERATURE. THE
#  LARGEST EFFECTS ON CLUSTER SIZE OCCUR PROPORTIONALLY TO THE AVERAGE 
#  DE/DX CHANGE WITH GAS MIXTURE THE PENNING EFFECTS  ARE ONLY A 
#  FEW % ON THE CLUSTER SIZE.
# --------------------------------------------------------------------
#   RAW DATA OUTPUT FILE print:
#
#   IF IWRITE EQ 0 :ONLY NORMAL OUTPUT
#   
#   IF IWRITE EQ 1 : OUTPUT TO FILE DEGRAD.OUT
#         
#      LINE 1   EVENT NUMBER (NEVENT), 
#               ELECTRON CLUSTER SIZE (NCLUS),
#               EXCITATION CLUSTER SIZE (NSTEXC),
#               NUMBER OF EXC IN GAS1
#               NUMBER OF EXC IN GAS2
#               NUMBER OF EXC IN GAS3
#               NUMBER OF EXC IN GAS4
#               NUMBER OF EXC IN GAS5
#               NUMBER OF EXC IN GAS6
#               NUMBER OF PRIMARY COMPTON COLLISIONS (MCOMP)
#               NUMBER OF PRIMARY PAIR PRODUCTION COLLISIONS (MPAIR)
#               NULL COLLISION CLUSTER SIZE IN MOLECULAR GASES (NEXCNUL)
#               
#
#      LINE 2   X,Y,Z AND T (AND FLAGS FOR:-FLUORESCENCE,PAIR PRODUCTION
#               AND BREMSSTRAHLUNG) FOR EACH OF THE NCLUS THERMALISED
#                ELECTRONS 
#   -----------------------------------------------------------
#  IF IWRITE EQ 2 : OUTPUT TO FILE DEGRAD.OUT
# 
#      LINE 1   SAME AS ABOVE 
#          
#      LINE 2   SAME AS ABOVE
#
#      LINE 3   X,Y,Z AND T FOR EACH OF THE NSTEXC EXCITATIONS
#              
#      LINE 4    X,Y,Z,T AND ID FOR EACH OF THE NEXCNUL DISSOCIATION AND 
#                LIGHT EMISSION NULL COLLISIONS  IN THE MOLECULAR GAS. 
#       NB. THE ID OF THE NULL COLLISION IS GIVEN IN THE PRINTED OUTPUT.
#                IF NEXCNUL=0 : WRITE LINE OF ZEROS
#
#                   TIME IN PICOSECONDS
#                   X,Y,Z IN MICRONS
#
# FLAGS : FLUORESCENCE: 
#                     VALUES FROM 0 TO N WHERE N IS THE CLUSTER NUMBER
#                     FOR EACH OF THE N ABSORBED FLUORESCENCE PHOTONS IN
#                     THE EVENT 
#      PAIRPRODUCTION :  VALUES 0 1 OR 2
#                        0 : NOT PRODUCED BY PAIR PRODUCTION  
#                        1 : PRODUCED BY PAIR ELECTRON TRACK
#                        2 : PRODUCED BY PAIR POSITRON TRACK
#       BREMSSTRAHLUNG:  VALUES 0 1 OR 2
#                        O: NOT PRODUCED BY BREMSSTRAHLUNG 
#                        1: PRODUCED FROM REMAINING ELECTRON
#                        2: PRODUCED FROM BREMSSTRAHLUNG GAMMA          
#   
# ********************************************************************* 
#   
#   ELASTIC ANISOTROPIC SCATTERING IS IN DATA BASE . IF THERE IS NO
#   DATA ON ANISOTROPIC SCATTERING OF THE INELASTIC LEVELS THE def 
#   ESTIMATES THE ANISOTROPIC INELASTIC SCATTERING FROM THE ELASTIC 
#   ANISOTROPIC SCATTERING . THE IONISATION SCATTERING IS SIMILARLILY
#   INTERPOLATED FROM THE ELASTIC ANISOTROPIC SCATTERING.  
#           
#   POSTSCRIPT PLOTS OF THE DATABASE X-SECTIONS CAN BE OBTAINED ON:-
#    HTTP://CONSULT.CERN.CH/WRITEUPS/MAGBOLTZ/CROSS/
#    OR THE LXCAT SITE .
#    NOTE  PLOTS HAVE NOT BEEN UPDATED FOR MULTIPLE EXCITATION
#    LEVELS
# ********************************************************************* 
#  GEOMETRY: 
#--------------
#            THE ELECTRIC FIELD IS TAKEN ALONG THE Z-AXIS AND THE 
#   MAGNETIC FIELD IS TAKEN IN THE Z-X PLANE AT AN ANGLE, BTHETA ,
#   TO THE ELECTRIC FIELD. 
#                                    
#----------------------------------------------------------------       
#--------------------------------------------------------------- 
#   INPUT CARDS :                                                       
#-------------------------------------------------------------------   
#  FIRST CARD: 5I10,3F10.5 : NGAS,NDELTA,IMIP,NDVEC,NSEED,
#                                    ESTART,ETHRM,ECUT
#  NGAS   = NUMBER OF GASES IN MIXTURE                                
#  NDELTA = NUMBER OF DELTA ELECTRONS (CONVERTED X-RAYS) OR MIPS  
#           MAXIMUM NUMBER OF MIPS   = 100000   
#           MAXIMUM NUMBER OF GAMMAS =  10000
#           MAXIMUM NUMBER OF BETAS  =  10000
#           MAXIMUM NUMBER OF E-BEAM =  10000
#
#  IMIP   = 1 MIPS SIMULATION  (DE/DX, CLUSTERS)
#  IMIP   = 2 ELECTRON BEAM  (TOTAL ABSORPTION)
#  IMIP   = 3 X-RAY
#  IMIP   = 4 BETA DECAY
#  IMIP   = 5 DOUBLE BETA DECAY
#
#  NOTE THE DOUBLE BETA DECAY EVENTS ARE SPLIT IN TWO THE FIRST
#  BETA IS OUTPUT AS A SEPARATE EVENT FROM THE SECOND BETA WHICH
#  ARE AT 180 DEGREES TO EACH OTHER (USE EVEN NUMBER OF TOTAL EVENTS
#  IN ORDER TO HAVE FULL TWO BETA EVENTS)   
# 
#  NDVEC  = 2 MIP X-RAY OR BETA IN RANDOM DIRECTION
#  NDVEC  = 1 MIP X-RAY OR BETA DIRECTION PARALLEL TO E-FIELD (Z) 
#  NDVEC  =-1 MIP X-RAY OR BETA DIRECTION ANTI PARALLEL TO E-FIELD (-Z) 
#  NDVEC  = 0 MIP X-RAY OR BETA IN RANDOM DIRECTION IN X-Y PLANE
#         
#  NOTE :   ELECTRON BEAM WITH NDVEC =0 GIVES DIRECTION ALONG X-AXIS
#           THIS ALLOWS TRACK PARALLEL TO BFIELD WHEN THE B-FIELD IS
#           AT 90 DEGREES TO E-FIELD
#  NSEED  = 0 USES STANDARD SEED VALUE = 54217137
#  NSEED != 0 USES VALUE OF NSEED AS SEED VALUE 
#
#  ESTART = MIP,ELECTRON,BETA DECAY OR X-RAY ENERGY IN EV.
#           NOTE DOUBLE BETA DECAY ENERGY IS TO BE ENTERED AS
#           THE ENERGY OF EACH BETA (0.5 TIMES TOTAL DECAY ENERGY)
#            (IF X-RAY MAX ENERGY=2.0MEV)
#            
#  ETHRM  = ELECTRONS TRACKED UNTIL THEY FALL TO THIS ENERGY EV.
#           FOR FAST CALCULATION THE THERMALISATION ENERGY SHOULD BE 
#          SET TO THE LOWEST IONISATION POTENTIAL IN THE GAS MIXTURE.
#          FOR MORE ACCURATE THERMALISATION RANGE THE THERMALISATION
#          ENERGY SHOULD BE SET TO THE LOWEST EXCITATION ENERGY IN 
#          PURE NOBLE GASES OR TO 2.0EV FOR MIXTURES WITH MOLECULAR
#          GAS
#  ECUT   = FOR MIPS ONLY.  APPLIES ENERGY CUT IN EV TO GIVE THE 
#           MAXIMUM ALLOWED PRIMARY CLUSTER ENERGY ( SHOULD BE SET
#           TO LESS THAN 10000. EV TO GIVE MAXIMUM PRIMARY CLUSTER SIZE
#           OF TYPICALLY 400 ELECTRONS
#------------------------------------------------------------------
#  SECOND CARD : 6I5   : NGAS1 , NGAS2, NGAS3 , NGAS4 , NGAS5 , NGAS6
#       NGAS1,ETC :  GAS NUMBER IDENTIFIERS (BETWEEN 1 AND 80)
#                   SEE GAS LIST BELOW FOR IDENTIFYING NUMBERS.
#                                                                      
#-------------------------------------------------------------          
# THIRD CARD: 8'%.4f' %  : FRAC1,FRAC2,FRAC3,FRAC4,FRAC5,FRAC6,TEMP,TORR   
#  FRAC1,ETC : PERCENTAGE FRACTION OF GAS1,ETC                          
#  TEMP : TEMPERATURE OF GAS IN CENTIGRADE                              
#  TORR :  PRESSURE OF GAS IN TORR                                      
# ------------------------------------------------------------          
# FOURTH CARD :  3'%.3f' % ,2I5  : EFIELD,BMAG,BTHETA,IWRITE,IPEN             
#  EFIELD : ELECTRIC FIELD IN VOLTS/ CM.                                
#   BMAG  : MAGNITUDE OF THE MAGNETIC FIELD IN KILOGAUSS
#  BTHETA : ANGLE BETWEEN THE ELECTRIC AND MAGNETIC FIELDS IN DEGREES. 
#
#  IWRITE : =0                STANDARD OUTPUT
#  IWRITE : =1    
#   LINE1   OUTPUT NO OF ELECTRONS AND NO OF EXCITATIONS FOR EACH EVENT
#   LINE2   OUTPUTS X,Y,Z AND T FOR EACH THERMALISED ELECTRON
#  IWRITE : =2
#   LINE1   OUTPUT NO OF ELECTRONS AND NO OF EXCITATIONS FOR EACH EVENT
#   LINE2   OUTPUTS X,Y,Z AND T FOR EACH THERMALISED ELECTRON
#   LINE3   OUTPUTS X,Y,Z AND T FOR EACH EXCITATION
#   
#   IPEN :  =0 NO PENNING TRANSFERS
#           =1  PENNING TRANSFERS ALLOWED
#            ( MODIFY GAS def TO CHANGE PENNING FRACTIONS)
# -----------------------------------------------------------------
# FIFTH CARD : 2'%.3f' % ,7I5 : 
#          DETEFF,EXCWGHT,KGAS,LGAS,LCMP,LRAY,LPAP,LBRM,IECASC
#  DETEFF: DETECTION EFFICIENCY OF PHOTONS. USED FOR CALCULATION OF
#          FANO FACTORS FOR COMBINED ELECTRON AND PHOTON DETECTION 
#          IN PURE NOBLE GASES  :  
#          USE BETWEEN 0.0  -  100.0  DETECTION EFFICIENCY
# EXCWGHT: WEIGHT GIVEN TO EXCITATION EVENTS IN FANO CALCULATION
#          WITH RESPECT TO IONISATION. TYPICALLY 0.5 TO 0.6
#          USE WEIGHT GIVEN BY SQRT(Fele/Fexc)  
#          WHERE Fele= ELECTRON FANO FACTOR
#                Fexc= EXCITATION FANO FACTOR
#  KGAS:   GAS IDENTIFIER FOR WHICH GAS IN MIXTURE HAS BETA DECAYED
#          IDENTIFIER NUMBERS : NGAS1 etc   
#  LGAS:   IF MOLECULAR GAS : LGAS IDENTIFIES THE COMPONENT ATOM
#          IN THE MOLECULE WHICH HAS BETA DECAYED:
#          E.G. IN CO2  1 = CARBON  2 = OXYGEN
#               IN CF4  1 = CARBON  2 = FLUORINE
#  LCMP:   = 0 NO COMPTON SCATTERING
#          = 1 INCLUDE COMPTON SCATTERING
#  LRAY:   = 0 NO RAYLEIGH SCATTERING
#          = 1 INCLUDE RAYLEIGH SCATTERING
#  LPAP:   = 0 NO PAIR PRODUCTION
#          = 1 INCLUDE PAIR PRODUCTION                  
#  LBRM;   = 0 NO BREMSSTRAHLUNG
#          = 1 INCLUDE BREMSSTRAHLUNG
#
# IECASC   = 0 USE PARAMETERISED CASCADE FOR 2ND TO NTH GENERATION OF
#               ELECTRON IONISING COLLISIONS
#          = 1 USE EXACT CASCADE FOR 2ND TO NTH GENERATION OF ELECTRON
#               IONISING COLLISIONS
#-----------------------------------------------------------------------
# CARD 4*N+1 USES NGAS=0 TO TERMINATE CORRECTLY                         
#-------------------------------------------------------------------- 
# DATA BASE:
#  
# GAS NUMBER:                                           STAR RATING:  
#-----------------------------------------------------------------
# GAS1  :  CF4             (2015)                                  5*
# GAS2  :  ARGON           (2014)                                  5* 
# GAS3  :  HELIUM 4        (2014)                                  5* 
# GAS4  :  HELIUM 3        (2014)                                  5*
# GAS5  :  NEON            (2013)                                  5*
# GAS6  :  KRYPTON         (2013)                                  4*
# GAS7  :  XENON           (2013)                                  4*
# GAS8  :  METHANE         (2015)                                  5*
# GAS9  :  ETHANE          (2016)                                  5*
# GAS10 :  PROPANE         (2017)                                  4*
# GAS11 :  ISOBUTANE       (2014)                                  4*
# GAS12 :  CO2             (2015)                                  5*
# GAS13 :  NEO-PENTANE     NOT YET DONE                            4* 
# GAS14 :  H20             (2017)                                  5*
# GAS15 :  OXYGEN          (2015)                                  5*
# GAS16 :  NITROGEN        (2016)                                  5*
# GAS17 :  NITRIC OXIDE    NOT YET DONE                            2*
# GAS18 :  NITROUS OXIDE   NOT YET DONE                            4*
# GAS19 :  E:E          NOT YET DONE                            4*
# GAS20 :  ACETYLENE       NOT YET DONE                            4*
# GAS21 :  HYDROGEN        (2010)                                  5*
# GAS22 :  DEUTERIUM       NOT YET DONE                            5*
# GAS23 :  CARBON MONOXIDE NOT YET DONE                            5*
# GAS24 :  METHYLAL        NOT YET DONE                            2*
# GAS25 :  DME             NOT YET DONE                            4*
# GAS26 :  REID STEP MODEL NOT YET DONE                            
# GAS27 :  MAXWELL MODEL   NOT YET DONE                              
# GAS28 :  REID RAMP MODEL NOT YET DONE                              
# GAS29 :  C2F6            NOT YET DONE                            4*
# GAS30 :  SF6             (2014)                                  4*
# GAS31 :  NH3 AMMONIA     NOT YET DONE                            4*
# GAS32 :  C3H6   PROPENE  NOT YET DONE                            4*
# GAS33 :  C3H6  CYCLOPROPANE  NOT YET DONE                        4*
# GAS34 :  CH3OH METHANOL  NOT YET DONE                            3*
# GAS35 :  C2H5OH ETHANOL  NOT YET DONE                            3*
# GAS36 :  C3H7OH ISO PROPANOL(1999)   NOT YET DONE                3*
# GAS37 :  CESIUM (2001)               NOT YET DONE                2* 
# GAS38 :  FLOURINE  (MORGAN)          NOT YET DONE                2*
# GAS39 :  CS2  (2001)  ( ION DRIFT,DARK MATTER )  NOT YET DONE    2*
# GAS40 :  COS  (2001)                NOT YET DONE                 2*  
# GAS41 :  CD4 (2004)                 NOT YET DONE                 4*
# GAS42 :  BF3 BORON TRIFLOURIDE (2001)  (ANISOTROPIC) NOT YET DONE4*
# GAS43 :  C2HF5 OR C2H2F4           NOT YET DONE                  2*
# GAS44 :  TMA (2015) UPDATE                                       4*
# GAS45 : 
# GAS46 :  
# GAS47 : 
# GAS48 : 
# GAS49 :  
# GAS50 :  CHF3     (2001)          NOT YET DONE                   3*
# GAS51 :  CF3BR    (2002)          NOT YET DONE                   3* 
# GAS52 :  C3F8     (2002)          NOT YET DONE                   3*
# GAS53 :  OZONE    (2002)          NOT YET DONE                   3*
# GAS54 :  MERCURY  (2003)          NOT YET DONE                   2*
# GAS55 :  H2S      (2003)          NOT YET DONE                   2* 
# GAS56 :  N-BUTANE (2003)          NOT YET DONE                   4*
# GAS57 :  N-PENTANE(2003)          NOT YET DONE                   4*
# GAS58-80  :DUMMY ROUTINES                                               
#------------------------------------------------------------------
#
def DEGRADE:
	# IMPLICIT #real*8 (A-H,O-Z)
	# IMPLICIT #integer*8 (I-N)
	global TMAX,SMALL,API,ESTART,THETA,PHI
	global TCFMAX=[0 for x in range(11)]
	global TCFMAX1,RSTART,EFIELD,ETHRM,ECUT,NEVENT,IMIP,IWRITE,EOVB,WB,BTHETA,BMAG
	SETUP(LAST)                                                  
	if(LAST == 1):
		STOP
	DENSITY()
	CASCDAT()
	MIXERC()
	MIXER()
	# CALCULATE FLUORESCENCE ABSORPTION DISTANCES 
	FLDIST()
	PRINTER()
	if(IMIP == 1):
		MIPCALC()
	# IF MIP OR ELECTRON BEAM SKIP DIRECT CASCADE CALCULATION
	if(IMIP <= 2):
		pass
	else:
		ICON=IMIP-2
		#  ICON=1 XRAY,   ICON=2 BETA DECAY , ICON=3 DOUBLE BETA DECAY  
		CONTROL0(NEVENT,ESTART,ICON)
		# CALCULATE AND OUTPUT AVERAGES FROM SHELLS
		OUTPUTC(NEVENT,IMIP)
		# AFTER ALL SHELL EMISSIONS THERMALISE ELECTRONS
	if(BMAG == 0.00):
		MONTEFE()
	if(BMAG != 0.00):
		if(BTHETA == 0.00 or BTHETA == 180.00):
			MONTEFA()
		else if(BTHETA == 90.00) :
			MONTEFB()
		else:
			MONTEFC()
		# endif
	# endif
	STATS2()
	OUTPUT()
	DEGRADE()
	STOP                                                             
      # end
def ANGCUT(PSCT1,ANGC,PSCT2):        
	# IMPLICIT #real*8 (A-H,O-Z)
	# IMPLICIT #integer*8 (I-N)
	#  --------------------------------------------------------------      
	#  SET ANGLE CUTS ON ANGULAR DISTRIBUTION AND RENORMALISE FORWARD 
	#  SCATTERING PROBABILITY  
	#  ---------------------------------------------------------------
	ANGC=1.0
	PSCT2=PSCT1         
	if(PSCT1 <= 1.0):
		RETURN
	API=numpy.arccos(-1.00)
	RADS=2.0/API 
	CNS=PSCT1-0.5     
	THETAC=DASIN(2.0*math.sqrt(CNS-CNS*CNS))
	FAC=(1.0-DCOS(THETAC))/(DSIN(THETAC)*DSIN(THETAC))
	PSCT2=(CNS*FAC)+0.5      
	ANGC=THETAC*RADS
	RETURN
	# end                                                              
	def MIXER:
	IMPLICIT #real*8 (A-H,O-Z)
	IMPLICIT #integer*8 (I-N)                                         
	CHARACTER*25 NAMEG,NAME1,NAME2,NAME3,NAME4,NAME5,NAME6
	COMMON/RATIO/AN1,AN2,AN3,AN4,AN5,AN6,AN,FRAC(6)              
	CHARACTER*50 DSCRPT,SCRP1(300),SCRP2(300),SCRP3(300),SCRP4(300),SCRP5(300),SCRP6(300)   
	CHARACTER*50 DSCRPTN,SCRPN1(10),SCRPN2(10),SCRPN3(10),SCRPN4(10),SCRPN5(10),SCRPN6(10)                          
	COMMON/GASN/NGASN(6) 
	COMMON/MIX1/QELM(20000),QSUM(20000),QION(6,20000),QIN1(250,20000),QIN2(250,20000),QIN3(250,20000),QIN4(250,20000),QIN5(250,20000),QIN6(250,20000),QSATT(20000)             
	COMMON/MIX2/E(20000),EROOT(20000),QTOT(20000),QREL(20000),QINEL(20000),QEL(20000)
	COMMON/MIX3/NIN1,NIN2,NIN3,NIN4,NIN5,NIN6,LION(6),LIN1(250),LIN2(250),LIN3(250),LIN4(250),LIN5(250),LIN6(250),ALION(6),ALIN1(250),ALIN2(250),ALIN3(250),ALIN4(250),ALIN5(250),ALIN6(250)
	COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
	COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
	COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,TCFMAX(10),TCFMAX1,RSTART,EFIELD,ETHRM,ECUT,NDELTA,IMIP,IWRITE                    
	COMMON/LARGE/CF(20000,512),EIN(512),TCF(20000),IARRY(512),RGAS(512),IPN(512),WPL(512),IZBR(512),IPLAST,PENFRA[3,512]  
	COMMON/LARGEN/CFN(20000,60),TCFN(20000),SCLENUL(60),NPLAST    
	COMMON/ANIS/PSCT(20000,512),ANGCT(20000,512),INDEX(512),NISO
	COMMON/FRED/FCION(20000),FCATT(20000)
	COMMON/ECASC/NEGAS(512),LEGAS(512),IESHELL(512),IECASC            
	COMMON/MRATIO/VAN1,VAN2,VAN3,VAN4,VAN5,VAN6,VAN
	COMMON/IONC/DOUBLE(6,20000),CMINIXSC(6),CMINEXSC(6),ECLOSS(6),WPLN(6),ICOUNT,AVPFRAC(3,6)
	COMMON/IONFL/NC0(512),EC0(512),NG1(512),EG1(512),NG2(512),EG2(512),WKLM(512),EFL(512)
	COMMON/COMP/LCMP,LCFLG,LRAY,LRFLG,LPAP,LPFLG,LBRM,LBFLG,LPEFLG
	COMMON/NAMES/NAMEG(6)
	COMMON/IDEXC/NGEXC1,NGEXC2,NGEXC3,NGEXC4,NGEXC5,NGEXC6,IDG1,IDG2,IDG3,IDG4,IDG5,IDG6      
	COMMON/SCRIP/DSCRPT(512),DSCRPTN(60)
	COMMON/IONMOD/ESPLIT(512,20),IONMODEL(512)
	COMMON/RLTVY/BET[20]00),GAM(20000),VC,EMS                        
	DIMENSION Q1(6,20000),Q2(6,20000),Q3(6,20000),Q4(6,20000),Q5(6,20000),Q6(6,20000)
	DIMENSION E1(6),E2(6),E3(6),E4(6),E5(6),E6(6),EI1(250),EI2(250),EI3(250),EI4(250),EI5(250),EI6(250)
	DIMENSION QATT(6,20000),EION(6)         
	DIMENSION PEQEL1(6,20000),PEQEL2(6,20000),PEQEL3(6,20000),PEQEL4(6,20000),PEQEL5(6,20000),PEQEL6(6,20000)
	DIMENSION PEQIN1(250,20000),PEQIN2(250,20000),PEQIN3(250,20000),  PEQIN4(250,20000),PEQIN5(250,20000),PEQIN6(250,20000)
	DIMENSION PENFRA1(3,250),PENFRA2(3,250),PENFRA3(3,250),PENFRA4(3,250),PENFRA5(3,250),PENFRA6(3,250)
	DIMENSION KIN1(250),KIN2(250),KIN3(250),KIN4(250),KIN5(250),KIN6(250)
	DIMENSION KEL1(6),KEL2(6),KEL3(6),KEL4(6),KEL5(6),KEL6(6)
	DIMENSION EION1(30),EION2(30),EION3(30),EION4(30),EION5(30),EION6(30)
	DIMENSION QION1(30,20000),QION2(30,20000),QION3(30,20000),QION4(30,20000),QION5(30,20000),QION6(30,20000)
	DIMENSION PEQION1(30,20000),PEQION2(30,20000),PEQION3(30,20000),PEQION4(30,20000),PEQION5(30,20000),PEQION6(30,20000)
	DIMENSION LEGAS1(30),LEGAS2(30),LEGAS3(30),LEGAS4(30),LEGAS5(30),LEGAS6(30)
	DIMENSION IESHEL1(30),IESHEL2(30),IESHEL3(30),IESHEL4(30),IESHEL5(30),IESHEL6(30) 
	DIMENSION EB1(30),EB2(30),EB3(30),EB4(30),EB5(30),EB6(30)
	DIMENSION NC01(30),NC02(30),NC03(30),NC04(30),NC05(30),NC06(30)
	DIMENSION EC01(30),EC02(30),EC03(30),EC04(30),EC05(30),EC06(30)
	DIMENSION NG11(30),NG12(30),NG13(30),NG14(30),NG15(30),NG16(30)
	DIMENSION EG11(30),EG12(30),EG13(30),EG14(30),EG15(30),EG16(30)
	DIMENSION NG21(30),NG22(30),NG23(30),NG24(30),NG25(30),NG26(30)
	DIMENSION EG21(30),EG22(30),EG23(30),EG24(30),EG25(30),EG26(30)
	DIMENSION WK1(30),WK2(30),WK3(30),WK4(30),WK5(30),WK6(30)
	DIMENSION EFL1(30),EFL2(30),EFL3(30),EFL4(30),EFL5(30),EFL6(30)
	DIMENSION IZBR1(250),IZBR2(250),IZBR3(250),IZBR4(250),IZBR5(250),IZBR6(250)
	DIMENSION QATT1(8,20000),QATT2(8,20000),QATT3(8,20000),QATT4(8,20000),QATT5(8,20000),QATT6(8,20000) 
	DIMENSION QNUL1(10,20000),QNUL2(10,20000),QNUL3(10,20000),QNUL4(10,20000),QNUL5(10,20000),QNUL6(10,20000),SCLN1(10),SCLN2(10),SCLN3(10),SCLN4(10),SCLN5(10),SCLN6(10)  
	DIMENSION ESPLIT1(5,20),ESPLIT2(5,20),ESPLIT3(5,20),ESPLIT4(5,20),ESPLIT5(5,20),ESPLIT6(5,20)
	#                                                                       
	#  ---------------------------------------------------------------------
	#                                                                       
	#     def MIXER FILLS ARRAYS OF COLLISION FREQUENCY              
	#     CAN HAVE A MIXTURE OF UP TO 6 GASES                               
	#                                                                       
	#     MOD: STORE COUNTING IONISATION X-SECTION IN ARRAY CMINIXSC(6)
	#          AT MINIMUM IONISING ENERGY                                 
	#  ---------------------------------------------------------------------
	#                                                             
	NISO=0
	NIN1=0                                                            
	NIN2=0                                                            
	NIN3=0                                                            
	NIN4=0
	NIN5=0
	NIN6=0
	NION1=0
	NION2=0
	NION3=0
	NION4=0
	NION5=0
	NION6=0
	NATT1=0
	NATT2=0
	NATT3=0
	NATT4=0
	NATT5=0
	NATT6=0
	NUL1=0
	NUL2=0
	NUL3=0
	NUL4=0
	NUL5=0
	NUL6=0
	DO 2 J=1,6  
	NAMEG[J]='-------------------------'                              
	KEL1[J]=0
	KEL2[J]=0
	KEL3[J]=0
	KEL4[J]=0
	KEL5[J]=0
	KEL6[J]=0                       
	DO 1 I=1,20000                                                    
	Q1[J][I]=0.00                                                     
	Q2[J][I]=0.00                                                     
	Q3[J][I]=0.00                                                     
	Q4[J][I]=0.00
	Q5[J][I]=0.00
	Q6[J][I]=0.00
	DOUBLE[J][I]=0.00    
	1 CONTINUE                                                          
	E1[J]=0.00                                                       
	E2[J]=0.00                                                       
	E3[J]=0.00                                                       
	E4[J]=0.00 
	E5[J]=0.00
	2 E6[J]=0.00
	DO 222 J=1,30
	IESHEL1[J]=0
	IESHEL2[J]=0
	IESHEL3[J]=0
	IESHEL4[J]=0
	IESHEL5[J]=0
	IESHEL6[J]=0
	LEGAS1[J]=0
	LEGAS2[J]=0
	LEGAS3[J]=0
	LEGAS4[J]=0
	LEGAS5[J]=0
	LEGAS6[J]=0
	EION1[J]=0.00
	EION2[J]=0.00
	EION3[J]=0.00
	EION4[J]=0.00
	EION5[J]=0.00
	EION6[J]=0.00
	EB1[J]=0.00
	EB2[J]=0.00
	EB3[J]=0.00
	EB4[J]=0.00
	EB5[J]=0.00
	EB6[J]=0.00
	EC01[J]=0.00
	EC02[J]=0.00
	EC03[J]=0.00
	EC04[J]=0.00
	EC05[J]=0.00
	EC06[J]=0.00
	EG11[J]=0.00
	EG12[J]=0.00
	EG13[J]=0.00
	EG14[J]=0.00
	EG15[J]=0.00
	EG16[J]=0.00
	EG21[J]=0.00
	EG22[J]=0.00
	EG23[J]=0.00
	EG24[J]=0.00
	EG25[J]=0.00
	EG26[J]=0.00
	WK1[J]=0.00
	WK2[J]=0.00
	WK3[J]=0.00
	WK4[J]=0.00
	WK5[J]=0.00
	WK6[J]=0.00
	EFL1[J]=0.00
	EFL2[J]=0.00
	EFL3[J]=0.00
	EFL4[J]=0.00
	EFL5[J]=0.00
	EFL6[J]=0.00
	NC01[J]=0
	NC02[J]=0
	NC03[J]=0
	NC04[J]=0
	NC05[J]=0
	NC06[J]=0
	NG11[J]=0
	NG12[J]=0
	NG13[J]=0
	NG14[J]=0
	NG15[J]=0
	NG16[J]=0
	NG21[J]=0
	NG22[J]=0
	NG23[J]=0
	NG24[J]=0
	NG25[J]=0
	NG26[J]=0
	DO 222 I=1,20000
	QION1[J][I]=0.00
	QION2[J][I]=0.00
	QION3[J][I]=0.00
	QION4[J][I]=0.00
	QION5[J][I]=0.00
	QION6[J][I]=0.00
	222 CONTINUE
	DO 223 K=1,8
	DO 223 I=1,20000
	QATT1(K,I)=0.0
	QATT2(K,I)=0.0
	QATT3(K,I)=0.0
	QATT4(K,I)=0.0
	QATT5(K,I)=0.0
	QATT6(K,I)=0.0
	223 CONTINUE
	DO 224 K=1,10
	DO 224 I=1,20000
	QNUL1(K,I)=0.0
	QNUL2(K,I)=0.0
	QNUL3(K,I)=0.0
	QNUL4(K,I)=0.0
	QNUL5(K,I)=0.0
	QNUL6(K,I)=0.0
	224 CONTINUE 
	DO 225 I=1,512
	IONMODEL[I]=0
	DO 225 K=1,20
	ESPLIT(I,K)=0.0
	225 CONTINUE   
	# CALCULATE AND STORE ENERGY GRID FOR XRAYS BETAS OR PARTICLES
	if(EFINAL <= 20000.0):
	:
	ESTEP=EFINAL/float(NSTEP)
	EHALF=ESTEP/2.00
	E[1]=EHALF
	GAM[1]=(EMS+E[1])/EMS
	BET[1]=math.sqrt(1.00-1.00/(GAM[1]*GAM[1]))
	DO 3 I=2,20000
	AJ=float(I-1)
	E[I]=EHALF+ESTEP*AJ
	GAM[I]=(EMS+E[I])/EMS
	BET[I)]math.sqrt(1.00-1.00/(GAM[I]*GAM[I]))
	3  EROOT[I]=math.sqrt(E[I])
	EROOT[1]=math.sqrt(EHALF)     
	else if(EFINAL > 20000.0 and EFINAL <= 140000.) :
	ESTEP=1.0
	EHALF=0.5
	E[1]=EHALF
	GAM[1]=(EMS+E[1])/EMS
	BET[1]=math.sqrt(1.00-1.00/(GAM[1]*GAM[1]))
	DO 31 I=2,16000
	AJ=float(I-1)
	E[I]=EHALF+ESTEP*AJ
	GAM[I]=(EMS+E[I])/EMS
	BET[I)]math.sqrt(1.00-1.00/(GAM[I]*GAM[I]))
	31  EROOT[I]=math.sqrt(E[I])
	EROOT[1]=math.sqrt(EHALF)
	ESTEP1=(EFINAL-16000.0)/float(4000)
	DO 32 I=16001,20000
	AJ=float(I-16000)
	E[I]=16000.0+AJ*ESTEP1
	GAM[I]=(EMS+E[I])/EMS
	BET[I)]math.sqrt(1.00-1.00/(GAM[I]*GAM[I]))
	32  EROOT[I]=math.sqrt(E[I])
	else:
	ESTEP=1.0
	EHALF=0.5
	E[1]=EHALF
	GAM[1]=(EMS+E[1])/EMS
	BET[1]=math.sqrt(1.00-1.00/(GAM[1]*GAM[1]))
	DO 33 I=2,12000
	AJ=float(I-1)
	E[I]=EHALF+ESTEP*AJ
	GAM[I]=(EMS+E[I])/EMS
	BET[I)]math.sqrt(1.00-1.00/(GAM[I]*GAM[I]))
	33  EROOT[I]=math.sqrt(E[I])
	EROOT[1]=math.sqrt(EHALF)
	ESTEP1=20.0
	DO 34 I=12001,16000
	AJ=float(I-12000)
	E[I]=12000.0+AJ*ESTEP1
	GAM[I]=(EMS+E[I])/EMS
	BET[I)]math.sqrt(1.00-1.00/(GAM[I]*GAM[I]))
	34  EROOT[I]=math.sqrt(E[I])
	ESTEP2=(EFINAL-92000.0)/float(4000)
	DO 35 I=16001,20000
	AJ=float(I-16000)
	E[I]=92000.0+AJ*ESTEP2
	GAM[I]=(EMS+E[I])/EMS
	BET[I)]math.sqrt(1.00-1.00/(GAM[I]*GAM[I]))
	35  EROOT[I]=math.sqrt(E[I])
	# endif
	#
	DO 4 I=1,250
	IZBR1[I]=0
	IZBR2[I]=0
	IZBR3[I]=0
	IZBR4[I]=0
	IZBR5[I]=0
	IZBR6[I]=0
	KIN1[I]=0
	KIN2[I]=0
	KIN3[I]=0
	KIN4[I]=0
	KIN5[I]=0
	4 KIN6[I]=0
	DO 6 I=1,512 
	6 INDEX[I]=0                                               
	#                                                                       
	#   CALL GAS CROSS-SECTIONS 
	CALL GASMIX(NGASN[1],Q1,QIN1,NIN1,E1,EI1,NAME1,VIRIAL1,EB1,PEQEL1,PEQIN1,PENFRA1,KEL1,KIN1,QION1,PEQION1,EION1,NION1,QATT1,NATT1,QNUL1,NUL1,SCLN1,NC01,EC01,WK1,EFL1,NG11,EG11,NG21,EG21,IZBR1,LEGAS1,IESHEL1,IONMODL1,ESPLIT1,SCRP1,SCRPN1) 
	if(NGAS == 1):
	GO TO 10 
	CALL GASMIX(NGASN(2),Q2,QIN2,NIN2,E2,EI2,NAME2,VIRIAL2,EB2,PEQEL2,PEQIN2,PENFRA2,KEL2,KIN2,QION2,PEQION2,EION2,NION2,QATT2,NATT2,QNUL2,NUL2,SCLN2,NC02,EC02,WK2,EFL2,NG12,EG12,NG22,EG22,IZBR2,LEGAS2,IESHEL2,IONMODL2,ESPLIT2,SCRP2,SCRPN2) 
	if(NGAS == 2):
	GO TO 10 
	CALL GASMIX(NGASN(3),Q3,QIN3,NIN3,E3,EI3,NAME3,VIRIAL3,EB3,PEQEL3,PEQIN3,PENFRA3,KEL3,KIN3,QION3,PEQION3,EION3,NION3,QATT3,NATT3,QNUL3,NUL3,SCLN3,NC03,EC03,WK3,EFL3,NG13,EG13,NG23,EG23,IZBR3,LEGAS3,IESHEL3,IONMODL3,ESPLIT3,SCRP3,SCRPN3) 
	if(NGAS == 3):
	GO TO 10 
	CALL GASMIX(NGASN(4),Q4,QIN4,NIN4,E4,EI4,NAME4,VIRIAL4,EB4,PEQEL4,PEQIN4,PENFRA4,KEL4,KIN4,QION4,PEQION4,EION4,NION4,QATT4,NATT4,QNUL4,NUL4,SCLN4,NC04,EC04,WK4,EFL4,NG14,EG14,NG24,EG24,IZBR4,LEGAS4,IESHEL4,IONMODL4,ESPLIT4,SCRP4,SCRPN4)
	if(NGAS == 4):
	GO TO 10 
	CALL GASMIX(NGASN(5),Q5,QIN5,NIN5,E5,EI5,NAME5,VIRIAL5,EB5,PEQEL5,PEQIN5,PENFRA5,KEL5,KIN5,QION5,PEQION5,EION5,NION5,QATT5,NATT5,QNUL5,NUL5,SCLN5,NC05,EC05,WK5,EFL5,NG15,EG15,NG25,EG25,IZBR5,LEGAS5,IESHEL5,IONMODL5,ESPLIT5,SCRP5,SCRPN5)
	if(NGAS == 5):
	GO TO 10 
	CALL GASMIX(NGASN(6),Q6,QIN6,NIN6,E6,EI6,NAME6,VIRIAL6,EB6,PEQEL6,PEQIN6,PENFRA6,KEL6,KIN6,QION6,PEQION6,EION6,NION6,QATT6,NATT6,QNUL6,NUL6,SCLN6,NC06,EC06,WK6,EFL6,NG16,EG16,NG26,EG26,IZBR6,LEGAS6,IESHEL6,IONMODL6,ESPLIT6,SCRP6,SCRPN6) 
	10 CONTINUE                                                          
	# ---------------------------------------------------------------       
	#  CORRECTION OF NUMBER DENSITY DUE TO VIRIAL COEFFICIENT               
	#  CAN BE defMED HERE NOT YET IMPLEMENTED.                          
	#-----------------------------------------------------------------      
	#-----------------------------------------------------------------      
	#     CALCULATION OF COLLISION FREQUENCIES FOR AN ARRAY OF              
	#     ELECTRON ENERGIES IN THE RANGE ZERO TO EFINAL        
	#                                                                     
	#     L=5*N-4    ELASTIC NTH GAS                                        
	#     L=5*N-3    IONISATION NTH GAS                               
	#     L=5*N-2    ATTACHMENT NTH GAS                                  
	#     L=5*N-1    INELASTIC NTH GAS    
	#     L=5*N      SUPERELASTIC NTH GAS                    
	#---------------------------------------------------------------   
	DO 700 IE=1,20000  
	FCION(IE)=0.00
	FCATT(IE)=0.00
	#
	NP=1 
	IDG1=1
	NEGAS[NP]=1  
	LEGAS[NP]=0
	IESHELL[NP]=0                                               
	CF(IE,NP)=Q1(2,IE)*VAN1*BET[IE]
	PSCT(IE,NP)=0.50
	ANGCT(IE,NP)=1.00    
	INDEX[NP]=0 
	#   ELASTIC ANG  
	if(KEL1(2):
	== 1) :
	PSCT1=PEQEL1(2,IE)
	CALL ANGCUT(PSCT1,ANGC,PSCT2)
	ANGCT(IE,NP)=ANGC
	PSCT(IE,NP)=PSCT2  
	INDEX[NP]=1   
	# endif 
	if(KEL1(2):
	== 2) :
	PSCT(IE,NP)=PEQEL1(2,IE)
	INDEX[NP]=2
	# endif
	#
	if(IE > 1):
	GO TO 12                                   
	RGAS1=1.00+E1(2)/2.00                                           
	RGAS[NP]=RGAS1                                                    
	EIN[NP]=0.00                                                     
	IPN[NP]=0 
	L=1                                                      
	IARRY[NP]=L 
	IZBR[NP]=0
	DSCRPT[NP]=SCRP1(2)  
	NAMEG[1]=NAME1
	PENFRA[1,NP]=0.0
	PENFRA[2,NP]=0.0
	PENFRA[3,NP]=0.0
	AVPFRAC(1,1)=0.0
	AVPFRAC(2,1)=0.0
	AVPFRAC(3,1)=0.0
	CMINEXSC[1]=E1(4)*AN1                                        
	CMINIXSC[1]=E1(5)*AN1
	ECLOSS[1]=E1(3)
	WPLN[1]=E1(6)
	12 if(EFINAL < E1(3)) GO TO 30
	if(NION1 > 1):
	GO TO 20  
	NP=NP+1
	IDG1=NP
	# CHOOSE BETWEEN COUNTING AND GROSS IONISATION X-SECTION
	if(ICOUNT == 1):
	:
	CF(IE,NP)=Q1(5,IE)*VAN1*BET[IE]
	FCION(IE)=FCION(IE)+CF(IE,NP)
	DOUBLE(1,IE)=Q1(3,IE)/Q1(5,IE)-1.00
	else:                                    
	CF(IE,NP)=Q1(3,IE)*VAN1*BET[IE]
	FCION(IE)=FCION(IE)+CF(IE,NP)
	# endif
	NEGAS[NP]=1 
	LEGAS[NP]=0
	IESHELL[NP]=0
	PSCT(IE,NP)=0.5
	ANGCT(IE,NP)=1.0
	INDEX[NP]=0
	# 
	if(ICOUNT == 1):
	:
	if(KEL1(5):
	== 1) :
	PSCT1=PEQEL1(5,IE) 
	CALL ANGCUT(PSCT1,ANGC,PSCT2)
	ANGCT(IE,NP)=ANGC
	PSCT(IE,NP)=PSCT2
	INDEX[NP]=1
	# endif
	if(KEL1(5):
	== 2) :
	PSCT(IE,NP)=PEQEL1(5,IE)
	INDEX[NP]=2
	# endif
	else:
	if(KEL1(3):
	== 1) :
	PSCT1=PEQEL1(3,IE) 
	CALL ANGCUT(PSCT1,ANGC,PSCT2)
	ANGCT(IE,NP)=ANGC
	PSCT(IE,NP)=PSCT2
	INDEX[NP]=1
	# endif
	if(KEL1(3):
	== 2) :
	PSCT(IE,NP)=PEQEL1(3,IE)
	INDEX[NP]=2
	# endif
	# endif
	#
	WPL[NP]=EB1[1]
	NC0[NP]=NC01[1]
	EC0[NP]=EC01[1]
	NG1[NP]=NG11[1]
	EG1[NP]=EG11[1]
	NG2[NP]=NG21[1]
	EG2[NP]=EG21[1]
	WKLM[NP]=WK1[1]
	EFL[NP]=EFL1[1]
	if(IE > 1):
	GO TO 30                                     
	RGAS[NP]=RGAS1                                                    
	EIN[NP]=E1(3)/RGAS1
	IPN[NP]=1 
	L=2                                                      
	IARRY[NP]=L 
	IZBR[NP]=0
	DSCRPT[NP]=SCRP1(3) 
	PENFRA[1,NP]=0.0
	PENFRA[2,NP]=0.0
	PENFRA[3,NP]=0.0
	IONMODEL[NP]=IONMODL1
	DO 19 K=1,20
	19 ESPLIT(NP,K)=ESPLIT1(IONMODL1,K) 
	GO TO 30
	20 DO 25 KION=1,NION1
	NP=NP+1
	IDG1=NP
	# CHOOSE BETWEEN COUNTING AND GROSS IONISATION X-SECTION
	CF(IE,NP)=QION1(KION,IE)*VAN1*BET[IE]
	FCION(IE)=FCION(IE)+CF(IE,NP)
	PSCT(IE,NP)=0.50
	ANGCT(IE,NP)=1.00
	INDEX[NP]=0 
	NEGAS[NP]=1
	LEGAS[NP]=LEGAS1[KION]
	IESHELL[NP]=IESHEL1[KION]
	#                           
	if(KEL1(3):
	== 1) :
	PSCT1=PEQION1(KION,IE) 
	CALL ANGCUT(PSCT1,ANGC,PSCT2)
	ANGCT(IE,NP)=ANGC
	PSCT(IE,NP)=PSCT2
	INDEX[NP]=1
	# endif
	if(KEL1(3):
	== 2) :
	PSCT(IE,NP)=PEQION1(KION,IE)
	INDEX[NP]=2
	# endif
	#
	WPL[NP]=EB1[KION]
	NC0[NP]=NC01[KION]
	EC0[NP]=EC01[KION]
	NG1[NP]=NG11[KION]
	EG1[NP]=EG11[KION]
	NG2[NP]=NG21[KION]
	EG2[NP]=EG21[KION]
	WKLM[NP]=WK1[KION]
	EFL[NP]=EFL1[KION]
	if(IE > 1):
	GO TO 25                                     
	RGAS[NP]=RGAS1                                                    
	EIN[NP]=EION1[KION]/RGAS1
	# 
	IPN[NP]=1 
	L=2                                                      
	IARRY[NP]=L 
	IZBR[NP]=0
	DSCRPT[NP]=SCRP1(2+KION) 
	PENFRA[1,NP]=0.0
	PENFRA[2,NP]=0.0
	PENFRA[3,NP]=0.0
	IONMODEL[NP]=IONMODL1
	DO 24 K=1,20
	24 ESPLIT(NP,K)=ESPLIT1(IONMODL1,K) 
	25 CONTINUE   
	30 if(EFINAL < E1(4)) GO TO 40   
	if(NATT1 > 1):
	GO TO 551                                   
	NP=NP+1
	IDG1=NP                                                           
	CF(IE,NP)=Q1(4,IE)*VAN1*BET[IE]
	FCATT(IE)=FCATT(IE)+CF(IE,NP) 
	PSCT(IE,NP)=0.5
	ANGCT(IE,NP)=1.0
	if(IE > 1):
	GO TO 40
	NEGAS[NP]=1
	LEGAS[NP]=0
	IESHELL[NP]=0
	INDEX[NP]=0                                     
	RGAS[NP]=RGAS1                                                   
	EIN[NP]=0.00                                                     
	IPN[NP]=-1              
	L=3                                           
	IARRY[NP]=L
	IZBR[NP]=0
	DSCRPT[NP]=SCRP1(3+NION1)
	PENFRA[1,NP]=0.0
	PENFRA[2,NP]=0.0
	PENFRA[3,NP]=0.0 
	GO TO 40
	551 DO 552 JJ=1,NATT1 
	NP=NP+1
	IDG1=NP
	CF(IE,NP)=QATT1(JJ,IE)*VAN1*BET[IE]
	FCATT(IE)=FCATT(IE)+CF(IE,NP)
	PSCT(IE,NP)=0.5
	ANGCT(IE,NP)=1.0
	if(IE > 1):
	GO TO 552
	NEGAS[NP]=1
	LEGAS[NP]=0
	IESHELL[NP]=0
	INDEX[NP]=0
	RGAS[NP]=RGAS1
	EIN[NP]=0.00
	IPN[NP]=-1
	L=3
	IARRY[NP]=L
	IZBR[NP]=0
	DSCRPT[NP]=SCRP1(2+NION1+JJ)
	PENFRA[1,NP]=0.0
	PENFRA[2,NP]=0.0
	PENFRA[3,NP]=0.0
	552 CONTINUE
	40 if(NIN1 == 0) GO TO 60                                           
	DO 50 J=1,NIN1
	NP=NP+1
	IDG1=NP      
	NEGAS[NP]=1
	LEGAS[NP]=0
	IESHELL[NP]=0                                                     
	CF(IE,NP)=QIN1(J,IE)*VAN1*BET[IE]
	# NO X-SECTION FOR BREMSSTRAHLUNG IF LBRM=0
	if(IZBR1[J]:
	!= 0 and LBRM == 0) CF(IE,NP)=0.0
	PSCT(IE,NP)=0.5
	ANGCT(IE,NP)=1.0
	INDEX[NP]=0
	#
	if(KIN1[J]:
	== 1) :   
	PSCT1=PEQIN1(J,IE)
	CALL ANGCUT(PSCT1,ANGC,PSCT2)
	ANGCT(IE,NP)=ANGC
	PSCT(IE,NP)=PSCT2
	INDEX[NP]=1   
	# endif
	if(KIN1[J]:
	== 2) :
	PSCT(IE,NP)=PEQIN1(J,IE)
	INDEX[NP]=2
	# endif
	#
	if(IE > 1):
	GO TO 50                                     
	RGAS[NP]=RGAS1                                                    
	EIN[NP]=EI1[J]/RGAS1
	L=4
	if(EI1[J]:
	< 0.00) L=5                                           
	IPN[NP]=0  
	IARRY[NP]=L
	IZBR[NP]=IZBR1[J]
	DSCRPT[NP]=SCRP1(4+NION1+NATT1+J)
	PENFRA[1,NP]=PENFRA1(1,J)
	PENFRA[2,NP]=PENFRA1(2,J)*1.D-6/math.sqrt(3.00)
	PENFRA[3,NP]=PENFRA1(3,J)
	if(PENFRA[1,NP] > AVPFRAC(1,1):
	) : 
	AVPFRAC(1,1)=PENFRA[1,NP]
	AVPFRAC(2,1)=PENFRA[2,NP]
	AVPFRAC(3,1)=PENFRA[3,NP]
	# endif
	if(J == NIN1):
	CMINEXSC[1]=CMINEXSC[1]*AVPFRAC(1,1)
	50 CONTINUE    
	#                                                    
	60 if(NGAS == 1) GO TO 600
	NP=NP+1
	IDG2=NP  
	NEGAS[NP]=2
	LEGAS[NP]=0
	IESHELL[NP]=0                                                 
	CF(IE,NP)=Q2(2,IE)*VAN2*BET[IE]
	PSCT(IE,NP)=0.5
	ANGCT(IE,NP)=1.0
	INDEX[NP]=0
	#
	if(KEL2(2):
	== 1) :
	PSCT1=PEQEL2(2,IE)
	CALL ANGCUT(PSCT1,ANGC,PSCT2)
	ANGCT(IE,NP)=ANGC
	PSCT(IE,NP)=PSCT2
	INDEX[NP]=1
	# endif
	if(KEL2(2):
	== 2) :
	PSCT(IE,NP)=PEQEL2(2,IE)
	INDEX[NP]=2 
	# endif 
	#
	if(IE > 1):
	GO TO 62                                     
	RGAS2=1.00+E2(2)/2.00                                           
	RGAS[NP]=RGAS2                                                    
	EIN[NP]=0.00                                                     
	IPN[NP]=0
	L=6                                                          
	IARRY[NP]=L      
	IZBR[NP]=0
	DSCRPT[NP]=SCRP2(2)  
	NAMEG(2)=NAME2
	PENFRA[1,NP]=0.0 
	PENFRA[2,NP]=0.0
	PENFRA[3,NP]=0.0
	AVPFRAC(1,2)=0.0
	AVPFRAC(2,2)=0.0
	AVPFRAC(3,2)=0.0                        
	CMINEXSC(2)=E2(4)*AN2                                        
	CMINIXSC(2)=E2(5)*AN2
	ECLOSS(2)=E2(3)
	WPLN(2)=E2(6)
	62 if(EFINAL < E2(3)) GO TO 130  
	if(NION2 > 1):
	GO TO 70                                   
	NP=NP+1
	IDG2=NP
	# CHOOSE BETWEEN COUNTING AND GROSS IONISATION X-SECTION
	if(ICOUNT == 1):
	:
	CF(IE,NP)=Q2(5,IE)*VAN2*BET[IE]
	FCION(IE)=FCION(IE)+CF(IE,NP)
	DOUBLE(2,IE)=Q2(3,IE)/Q2(5,IE)-1.00
	else:                             
	CF(IE,NP)=Q2(3,IE)*VAN2*BET[IE]
	FCION(IE)=FCION(IE)+CF(IE,NP)
	# endif
	NEGAS[NP]=2
	LEGAS[NP]=0
	IESHELL[NP]=0
	PSCT(IE,NP)=0.5
	ANGCT(IE,NP)=1.0
	INDEX[NP]=0
	#
	if(ICOUNT == 1):
	:
	if(KEL2(5):
	== 1) :
	PSCT1=PEQEL2(5,IE)
	CALL ANGCUT(PSCT1,ANGC,PSCT2)
	ANGCT(IE,NP)=ANGC
	PSCT(IE,NP)=PSCT2
	INDEX[NP]=1
	# endif
	if(KEL2(5):
	== 2) :
	PSCT(IE,NP)=PEQEL2(5,IE)
	INDEX[NP]=2
	# endif
	else:
	if(KEL2(3):
	== 1) :
	PSCT1=PEQEL2(3,IE)
	CALL ANGCUT(PSCT1,ANGC,PSCT2)
	ANGCT(IE,NP)=ANGC
	PSCT(IE,NP)=PSCT2
	INDEX[NP]=1
	# endif
	if(KEL2(3):
	== 2) :
	PSCT(IE,NP)=PEQEL2(3,IE)
	INDEX[NP]=2
	# endif
	# endif
	#
	WPL[NP]=EB2[1]
	NC0[NP]=NC02[1]
	EC0[NP]=EC02[1]
	NG1[NP]=NG12[1]
	EG1[NP]=EG12[1]
	NG2[NP]=NG22[1]
	EG2[NP]=EG22[1]
	WKLM[NP]=WK2[1]
	EFL[NP]=EFL2[1]
	if(IE > 1):
	GO TO 130                                      
	RGAS[NP]=RGAS2                                                    
	EIN[NP]=E2(3)/RGAS2 
	IPN[NP]=1  
	L=7                                                        
	IARRY[NP]=L
	IZBR[NP]=0      
	DSCRPT[NP]=SCRP2(3)     
	PENFRA[1,NP]=0.0 
	PENFRA[2,NP]=0.0
	PENFRA[3,NP]=0.0  
	IONMODEL[NP]=IONMODL2
	DO 69 K=1,20
	69 ESPLIT(NP,K)=ESPLIT2(IONMODL2,K) 
	GO TO 130                                       
	70 DO 80 KION=1,NION2
	NP=NP+1
	IDG2=NP
	CF(IE,NP)=QION2(KION,IE)*VAN2*BET[IE]
	FCION(IE)=FCION(IE)+CF(IE,NP)
	PSCT(IE,NP)=0.5
	ANGCT(IE,NP)=1.0
	INDEX[NP]=0
	NEGAS[NP]=2
	LEGAS[NP]=LEGAS2[KION]
	IESHELL[NP]=IESHEL2[KION]
	#
	if(KEL2(3):
	== 1) :
	PSCT1=PEQION2(KION,IE)
	CALL ANGCUT(PSCT1,ANGC,PSCT2)
	ANGCT(IE,NP)=ANGC
	PSCT(IE,NP)=PSCT2
	INDEX[NP]=1
	# endif
	if(KEL2(3):
	== 2) :
	PSCT(IE,NP)=PEQION2(KION,IE)
	INDEX[NP]=2
	# endif
	#
	WPL[NP]=EB2[KION]
	NC0[NP]=NC02[KION]
	EC0[NP]=EC02[KION]
	NG1[NP]=NG12[KION]
	EG1[NP]=EG12[KION]
	NG2[NP]=NG22[KION]
	EG2[NP]=EG22[KION]
	WKLM[NP]=WK2[KION]
	EFL[NP]=EFL2[KION]
	if(IE > 1):
	GO TO 80                                      
	RGAS[NP]=RGAS2                                                    
	EIN[NP]=EION2[KION]/RGAS2 
	#
	IPN[NP]=1  
	L=7                                                        
	IARRY[NP]=L
	IZBR[NP]=0      
	DSCRPT[NP]=SCRP2(2+KION)     
	PENFRA[1,NP]=0.0 
	PENFRA[2,NP]=0.0
	PENFRA[3,NP]=0.0       
	IONMODEL[NP]=IONMODL2
	DO 79 K=1,20
	79 ESPLIT(NP,K)=ESPLIT2(IONMODL2,K) 
	80 CONTINUE                                  
	130 if(EFINAL < E2(4)) GO TO 140    
	if(NATT2 > 1):
	GO TO 561                                 
	NP=NP+1
	IDG2=NP                                                           
	CF(IE,NP)=Q2(4,IE)*VAN2*BET[IE]
	FCATT(IE)=FCATT(IE)+CF(IE,NP)  
	PSCT(IE,NP)=0.5
	ANGCT(IE,NP)=1.0
	if(IE > 1):
	GO TO 140
	NEGAS[NP]=2
	LEGAS[NP]=0
	IESHELL[NP]=0
	INDEX[NP]=0                                  
	RGAS[NP]=RGAS2                                                    
	EIN[NP]=0.00                                                     
	IPN[NP]=-1            
	L=8                                              
	IARRY[NP]=L
	IZBR[NP]=0      
	DSCRPT[NP]=SCRP2(3+NION2)   
	PENFRA[1,NP]=0.0  
	PENFRA[2,NP]=0.0
	PENFRA[3,NP]=0.0        
	GO TO 140
	561 DO 562 JJ=1,NATT2
	NP=NP+1
	IDG2=NP
	CF(IE,NP)=QATT2(JJ,IE)*VAN2*BET[IE]
	FCATT(IE)=FCATT(IE)+CF(IE,NP)
	PSCT(IE,NP)=0.5
	ANGCT(IE,NP)=1.0
	if(IE > 1):
	GO TO 562
	NEGAS[NP]=2
	LEGAS[NP]=0
	IESHELL[NP]=0
	INDEX[NP]=0
	RGAS[NP]=RGAS2
	EIN[NP]=0.00
	IPN[NP]=-1
	L=8
	IARRY[NP]=L
	IZBR[NP]=0
	DSCRPT[NP]=SCRP2(2+NION2+JJ)
	PENFRA[1,NP]=0.0
	PENFRA[2,NP]=0.0
	PENFRA[3,NP]=0.0
	562 CONTINUE                                 
	140 if(NIN2 == 0) GO TO 160                                           
	DO 150 J=1,NIN2
	NP=NP+1
	IDG2=NP    
	NEGAS[NP]=2
	LEGAS[NP]=0
	IESHELL[NP]=0                                                   
	CF(IE,NP)=QIN2(J,IE)*VAN2*BET[IE]
	# NO X-SECTION FOR BREMSSTRAHLUNG IF LBRM=0
	if(IZBR2[J]:
	!= 0 and LBRM == 0) CF(IE,NP)=0.0
	PSCT(IE,NP)=0.5
	ANGCT(IE,NP)=1.0
	INDEX[NP]=0
	#
	if(KIN2[J]:
	== 1) :
	PSCT1=PEQIN2(J,IE)
	CALL ANGCUT(PSCT1,ANGC,PSCT2)
	ANGCT(IE,NP)=ANGC
	PSCT(IE,NP)=PSCT2
	INDEX[NP]=1
	# endif
	if(KIN2[J]:
	== 2) :
	PSCT(IE,NP)=PEQIN2(J,IE)
	INDEX[NP]=2
	# endif
	#
	if(IE > 1):
	GO TO 150                                    
	RGAS[NP]=RGAS2                                                   
	EIN[NP]=EI2[J]/RGAS2
	L=9 
	if(EI2[J]:
	< 0.00) L=10                                          
	IPN[NP]=0         
	IARRY[NP]=L
	IZBR[NP]=IZBR2[J]
	DSCRPT[NP]=SCRP2(4+NION2+NATT2+J)
	PENFRA[1,NP]=PENFRA2(1,J)
	PENFRA[2,NP]=PENFRA2(2,J)*1.D-6/math.sqrt(3.00)
	PENFRA[3,NP]=PENFRA2(3,J)
	if(PENFRA[1,NP] > AVPFRAC(1,2):
	) : 
	AVPFRAC(1,2)=PENFRA[1,NP]
	AVPFRAC(2,2)=PENFRA[2,NP]
	AVPFRAC(3,2)=PENFRA[3,NP]
	# endif
	if(J == NIN2):
	CMINEXSC(2)=CMINEXSC(2)*AVPFRAC(1,2)
	150 CONTINUE     
	#                                                   
	160 if(NGAS == 2) GO TO 600
	NP=NP+1
	IDG3=NP              
	NEGAS[NP]=3
	LEGAS[NP]=0
	IESHELL[NP]=0                                             
	CF(IE,NP)=Q3(2,IE)*VAN3*BET[IE]
	PSCT(IE,NP)=0.5
	ANGCT(IE,NP)=1.0
	INDEX[NP]=0
	#      
	if(KEL3(2):
	== 1) :
	PSCT1=PEQEL3(2,IE)
	CALL ANGCUT(PSCT1,ANGC,PSCT2)
	ANGCT(IE,NP)=ANGC
	PSCT(IE,NP)=PSCT2
	INDEX[NP]=1
	# endif 
	if(KEL3(2):
	== 2) :
	PSCT(IE,NP)=PEQEL3(2,IE)
	INDEX[NP]=2
	# endif
	#
	if(IE > 1):
	GO TO 162                                     
	RGAS3=1.00+E3(2)/2.00                                           
	RGAS[NP]=RGAS3                                                    
	EIN[NP]=0.00                                                     
	IPN[NP]=0  
	L=11                                                        
	IARRY[NP]=L
	IZBR[NP]=0
	DSCRPT[NP]=SCRP3(2)
	NAMEG(3)=NAME3
	PENFRA[1,NP]=0.0 
	PENFRA[2,NP]=0.0
	PENFRA[3,NP]=0.0
	AVPFRAC(1,3)=0.0
	AVPFRAC(2,3)=0.0
	AVPFRAC(3,3)=0.0
	CMINEXSC(3)=E3(4)*AN3                                   
	CMINIXSC(3)=E3(5)*AN3 
	ECLOSS(3)=E3(3)
	WPLN(3)=E3(6)
	162 if(EFINAL < E3(3)) GO TO 230 
	if(NION3 > 1):
	GO TO 170                                    
	NP=NP+1
	IDG3=NP
	# CHOOSE BETWEEN COUNTING AND GROSS IONISATION X-SECTION
	if(ICOUNT == 1):
	:
	CF(IE,NP)=Q3(5,IE)*VAN3*BET[IE]
	FCION(IE)=FCION(IE)+CF(IE,NP)
	DOUBLE(3,IE)=Q3(3,IE)/Q3(5,IE)-1.00
	else:                              
	CF(IE,NP)=Q3(3,IE)*VAN3*BET[IE]
	FCION(IE)=FCION(IE)+CF(IE,NP)
	# endif
	NEGAS[NP]=3
	LEGAS[NP]=0
	IESHELL[NP]=0
	PSCT(IE,NP)=0.5
	ANGCT(IE,NP)=1.0
	INDEX[NP]=0
	#
	if(ICOUNT == 1):
	:
	if(KEL3(5):
	== 1) :
	PSCT1=PEQEL3(5,IE)
	CALL ANGCUT(PSCT1,ANGC,PSCT2)
	ANGCT(IE,NP)=ANGC
	PSCT(IE,NP)=PSCT2
	INDEX[NP]=1
	# endif
	if(KEL3(5):
	== 2) :
	PSCT(IE,NP)=PEQEL3(5,IE)
	INDEX[NP]=2
	# endif
	else:
	if(KEL3(3):
	== 1) :
	PSCT1=PEQEL3(3,IE)
	CALL ANGCUT(PSCT1,ANGC,PSCT2)
	ANGCT(IE,NP)=ANGC
	PSCT(IE,NP)=PSCT2
	INDEX[NP]=1
	# endif
	if(KEL3(3):
	== 2) :
	PSCT(IE,NP)=PEQEL3(3,IE)
	INDEX[NP]=2
	# endif
	# endif
	# 
	WPL[NP]=EB3[1]
	NC0[NP]=NC03[1]
	EC0[NP]=EC03[1]
	NG1[NP]=NG13[1]
	EG1[NP]=EG13[1]
	NG2[NP]=NG23[1]
	EG2[NP]=EG23[1]
	WKLM[NP]=WK3[1]
	EFL[NP]=EFL3[1]
	if(IE > 1):
	GO TO 230                                            
	RGAS[NP]=RGAS3                                                    
	EIN[NP]=E3(3)/RGAS3 
	IPN[NP]=1
	L=12                                                           
	IARRY[NP]=L
	IZBR[NP]=0
	DSCRPT[NP]=SCRP3(3) 
	PENFRA[1,NP]=0.0  
	PENFRA[2,NP]=0.0
	PENFRA[3,NP]=0.0 
	IONMODEL[NP]=IONMODL3
	DO 169 K=1,20
	169 ESPLIT(NP,K)=ESPLIT3(IONMODL3,K) 
	GO TO 230  
	170 DO 180 KION=1,NION3                                         
	NP=NP+1
	IDG3=NP
	# CHOOSE BETWEEN COUNTING AND GROSS IONISATION X-SECTION
	CF(IE,NP)=QION3(KION,IE)*VAN3*BET[IE]
	FCION(IE)=FCION(IE)+CF(IE,NP)
	PSCT(IE,NP)=0.5
	ANGCT(IE,NP)=1.0
	INDEX[NP]=0
	NEGAS[NP]=3
	LEGAS[NP]=LEGAS3[KION]
	IESHELL[NP]=IESHEL3[KION]
	#
	if(KEL3(3):
	== 1) :
	PSCT1=PEQION3(3,IE)
	CALL ANGCUT(PSCT1,ANGC,PSCT2)
	ANGCT(IE,NP)=ANGC
	PSCT(IE,NP)=PSCT2
	INDEX[NP]=1
	# endif
	if(KEL3(3):
	== 2) :
	PSCT(IE,NP)=PEQION3(KION,IE)
	INDEX[NP]=2
	# endif
	# 
	WPL[NP]=EB3[KION]
	NC0[NP]=NC03[KION]
	EC0[NP]=EC03[KION]
	NG1[NP]=NG13[KION]
	EG1[NP]=EG13[KION]
	NG2[NP]=NG23[KION]
	EG2[NP]=EG23[KION]
	WKLM[NP]=WK3[KION]
	EFL[NP]=EFL3[KION]
	if(IE > 1):
	GO TO 180                                            
	RGAS[NP]=RGAS3                                                    
	EIN[NP]=EION3[KION]/RGAS3 
	#
	IPN[NP]=1
	L=12                                                           
	IARRY[NP]=L
	IZBR[NP]=0
	DSCRPT[NP]=SCRP3(2+KION) 
	PENFRA[1,NP]=0.0  
	PENFRA[2,NP]=0.0
	PENFRA[3,NP]=0.0    
	IONMODEL[NP]=IONMODL3
	DO 179 K=1,20
	179 ESPLIT(NP,K)=ESPLIT3(IONMODL3,K) 
	180 CONTINUE                                        
	230 if(EFINAL < E3(4)) GO TO 240      
	if(NATT3 > 1):
	GO TO 571                               
	NP=NP+1
	IDG3=NP                                                           
	CF(IE,NP)=Q3(4,IE)*VAN3*BET[IE]
	FCATT(IE)=FCATT(IE)+CF(IE,NP)
	PSCT(IE,NP)=0.5
	ANGCT(IE,NP)=1.0
	if(IE > 1):
	GO TO 240
	NEGAS[NP]=3
	LEGAS[NP]=0
	IESHELL[NP]=0
	INDEX[NP]=0                                            
	RGAS[NP]=RGAS3                                                   
	EIN[NP]=0.00                                                     
	IPN[NP]=-1 
	L=13                                                        
	IARRY[NP]=L
	IZBR[NP]=0
	DSCRPT[NP]=SCRP3(3+NION3)
	PENFRA[1,NP]=0.0 
	PENFRA[2,NP]=0.0
	PENFRA[3,NP]=0.0        
	GO TO 240
	571 CONTINUE
	DO 572 JJ=1,NATT3
	NP=NP+1
	IDG3=NP
	CF(IE,NP)=QATT3(JJ,IE)*VAN3*BET[IE]  
	FCATT(IE)=FCATT(IE)+CF(IE,NP)      
	PSCT(IE,NP)=0.5
	ANGCT(IE,NP)=1.0
	if(IE > 1):
	GO TO 572
	NEGAS[NP]=3
	LEGAS[NP]=0
	IESHELL[NP]=0
	INDEX[NP]=0
	RGAS[NP]=RGAS3
	EIN[NP]=0.00
	IPN[NP]=-1
	L=13
	IARRY[NP]=L
	IZBR[NP]=0
	DSCRPT[NP]=SCRP3(2+NION3+JJ)
	PENFRA[1,NP]=0.0
	PENFRA[2,NP]=0.0
	PENFRA[3,NP]=0.0
	572 CONTINUE                           
	240 if(NIN3 == 0) GO TO 260                                           
	DO 250 J=1,NIN3 
	NP=NP+1
	IDG3=NP      
	NEGAS[NP]=3
	LEGAS[NP]=0
	IESHELL[NP]=0                                                     
	CF(IE,NP)=QIN3(J,IE)*VAN3*BET[IE]
	# NO X-SECTION FOR BREMSSTRAHLUNG IF LBRM=0
	if(IZBR3[J]:
	!= 0 and LBRM == 0) CF(IE,NP)=0.0
	PSCT(IE,NP)=0.5
	ANGCT(IE,NP)=1.0
	INDEX[NP]=0
	#
	if(KIN3[J]:
	== 1) :
	PSCT1=PEQIN3(J,IE)
	CALL ANGCUT(PSCT1,ANGC,PSCT2)
	ANGCT(IE,NP)=ANGC
	PSCT(IE,NP)=PSCT2
	INDEX[NP]=1
	# endif
	if(KIN3[J]:
	== 2) :
	PSCT(IE,NP)=PEQIN3(J,IE)
	INDEX[NP]=2
	# endif
	#
	if(IE > 1):
	GO TO 250                                     
	RGAS[NP]=RGAS3                                                    
	EIN[NP]=EI3[J]/RGAS3
	L=14
	if(EI3[J]:
	< 0.00) L=15                                          
	IPN[NP]=0
	IARRY[NP]=L
	IZBR[NP]=IZBR3[J]
	DSCRPT[NP]=SCRP3(4+NION3+NATT3+J)
	PENFRA[1,NP]=PENFRA3(1,J)
	PENFRA[2,NP]=PENFRA3(2,J)*1.D-6/math.sqrt(3.00)
	PENFRA[3,NP]=PENFRA3(3,J)  
	if(PENFRA[1,NP] > AVPFRAC(1,3):
	) : 
	AVPFRAC(1,3)=PENFRA[1,NP]
	AVPFRAC(2,3)=PENFRA[2,NP]
	AVPFRAC(3,3)=PENFRA[3,NP]
	# endif
	if(J == NIN3):
	CMINEXSC(3)=CMINEXSC(3)*AVPFRAC(1,3)   
	250 CONTINUE             
	#                  
	260 if(NGAS == 3) GO TO 600  
	NP=NP+1
	IDG4=NP      
	NEGAS[NP]=4
	LEGAS[NP]=0
	IESHELL[NP]=0                                                     
	CF(IE,NP)=Q4(2,IE)*VAN4*BET[IE] 
	PSCT(IE,NP)=0.5
	ANGCT(IE,NP)=1.0
	INDEX[NP]=0
	#
	if(KEL4(2):
	== 1) :
	PSCT1=PEQEL4(2,IE)
	CALL ANGCUT(PSCT1,ANGC,PSCT2)
	ANGCT(IE,NP)=ANGC
	PSCT(IE,NP)=PSCT2
	INDEX[NP]=1  
	# endif
	if(KEL4(2):
	== 2) :
	PSCT(IE,NP)=PEQEL4(2,IE)
	INDEX[NP]=2
	# endif 
	#
	if(IE > 1):
	GO TO 262                                    
	RGAS4=1.00+E4(2)/2.00                                           
	RGAS[NP]=RGAS4                                                    
	EIN[NP]=0.00                                                     
	IPN[NP]=0
	L=16                                                          
	IARRY[NP]=L
	IZBR[NP]=0
	DSCRPT[NP]=SCRP4(2)
	NAMEG(4)=NAME4 
	PENFRA[1,NP]=0.0
	PENFRA[2,NP]=0.0
	PENFRA[3,NP]=0.0
	AVPFRAC(1,4)=0.0 
	AVPFRAC(2,4)=0.0
	AVPFRAC(3,4)=0.0
	CMINEXSC(4)=E4(4)*AN4                                       
	CMINIXSC(4)=E4(5)*AN4
	ECLOSS(4)=E4(3)
	WPLN(4)=E4(6)
	262 if(EFINAL < E4(3)) GO TO 330  
	if(NION4 > 1):
	GO TO 270                                   
	NP=NP+1
	IDG4=NP  
	# CHOOSE BETWEEN COUNTING AND GROSS IONISATION X-SECTION
	if(ICOUNT == 1):
	:
	CF(IE,NP)=Q4(5,IE)*VAN4*BET[IE]
	FCION(IE)=FCION(IE)+CF(IE,NP)
	DOUBLE(4,IE)=Q4(3,IE)/Q4(5,IE)-1.00
	else:                                                         
	CF(IE,NP)=Q4(3,IE)*VAN4*BET[IE]
	FCION(IE)=FCION(IE)+CF(IE,NP)
	# endif
	NEGAS[NP]=4
	LEGAS[NP]=0
	IESHELL[NP]=0
	PSCT(IE,NP)=0.5
	ANGCT(IE,NP)=1.0
	INDEX[NP]=0  
	#
	if(ICOUNT == 1):
	:
	if(KEL4(5):
	== 1) :
	PSCT1=PEQEL4(5,IE)
	CALL ANGCUT(PSCT1,ANGC,PSCT2)
	ANGCT(IE,NP)=ANGC
	PSCT(IE,NP)=PSCT2
	INDEX[NP]=1
	# endif
	if(KEL4(5):
	== 2) :
	PSCT(IE,NP)=PEQEL4(5,IE)
	INDEX[NP]=2
	# endif
	else:
	if(KEL4(3):
	== 1) :
	PSCT1=PEQEL4(3,IE)
	CALL ANGCUT(PSCT1,ANGC,PSCT2)
	ANGCT(IE,NP)=ANGC
	PSCT(IE,NP)=PSCT2
	INDEX[NP]=1
	# endif
	if(KEL4(3):
	== 2) :
	PSCT(IE,NP)=PEQEL4(3,IE)
	INDEX[NP]=2
	# endif
	# endif
	#
	WPL[NP]=EB4[1]
	NC0[NP]=NC04[1]
	EC0[NP]=EC04[1]
	NG1[NP]=NG14[1]
	EG1[NP]=EG14[1]
	NG2[NP]=NG24[1]
	EG2[NP]=EG24[1]
	WKLM[NP]=WK4[1]
	EFL[NP]=EFL4[1]
	if(IE > 1):
	GO TO 330                                     
	RGAS[NP]=RGAS4                                                    
	EIN[NP]=E4(3)/RGAS4 
	IPN[NP]=1  
	L=17                                                        
	IARRY[NP]=L
	IZBR[NP]=0
	DSCRPT[NP]=SCRP4(3)   
	PENFRA[1,NP]=0.0  
	PENFRA[2,NP]=0.0 
	PENFRA[3,NP]=0.0  
	IONMODEL[NP]=IONMODL4
	DO 269 K=1,20
	269 ESPLIT(NP,K)=ESPLIT4(IONMODL4,K) 
	GO TO 330
	270 DO 280 KION=1,NION4                                       
	NP=NP+1
	IDG4=NP
	# CHOOSE BETWEEN COUNTING AND GROSS IONISATION X-SECTION
	CF(IE,NP)=QION4(KION,IE)*VAN4*BET[IE]
	FCION(IE)=FCION(IE)+CF(IE,NP)
	PSCT(IE,NP)=0.5
	ANGCT(IE,NP)=1.0
	INDEX[NP]=0  
	NEGAS[NP]=4
	LEGAS[NP]=LEGAS4[KION]
	IESHELL[NP]=IESHEL4[KION]
	#
	if(KEL4(3):
	== 1) :
	PSCT1=PEQION4(KION,IE)
	CALL ANGCUT(PSCT1,ANGC,PSCT2)
	ANGCT(IE,NP)=ANGC
	PSCT(IE,NP)=PSCT2
	INDEX[NP]=1
	# endif
	if(KEL4(3):
	== 2) :
	PSCT(IE,NP)=PEQION4(KION,IE)
	INDEX[NP]=2
	# endif
	# 
	WPL[NP]=EB4[KION]
	NC0[NP]=NC04[KION]
	EC0[NP]=EC04[KION]
	NG1[NP]=NG14[KION]
	EG1[NP]=EG14[KION]
	NG2[NP]=NG24[KION]
	EG2[NP]=EG24[KION]
	WKLM[NP]=WK4[KION]
	EFL[NP]=EFL4[KION]
	if(IE > 1):
	GO TO 280                                     
	RGAS[NP]=RGAS4                                                    
	EIN[NP]=EION4[KION]/RGAS4
	# 
	IPN[NP[=1] 
	L=17                                                        
	IARRY[NP]=L
	IZBR[NP]=0
	DSCRPT[NP]=SCRP4[2+KION]
	PENFRA[1,NP]=0.0  
	PENFRA[2,NP]=0.0 
	PENFRA[3,NP]=0.0  
	IONMODEL[NP]=IONMODL4
	DO 279 K=1,20
	279 ESPLIT(NP,K)=ESPLIT4(IONMODL4,K) 
	280 CONTINUE                                       
	330 if(EFINAL < E4(4)) GO TO 340          
	if(NATT4 > 1):
	GO TO 581                           
	NP=NP+1
	IDG4=NP                                                           
	CF(IE,NP)=Q4(4,IE)*VAN4*BET[IE]
	FCATT(IE)=FCATT(IE)+CF(IE,NP)
	PSCT(IE,NP)=0.5
	ANGCT(IE,NP)=1.0
	if(IE > 1):
	GO TO 340  
	NEGAS[NP]=4
	LEGAS[NP]=0
	IESHELL[NP]=0      
	INDEX[NP]=0                             
	RGAS[NP]=RGAS4                                                    
	EIN[NP]=0.00                                                     
	IPN[NP]=-1 
	L=18                                                        
	IARRY[NP]=L
	IZBR[NP]=0
	DSCRPT[NP]=SCRP4(3+NION4)
	PENFRA[1,NP]=0.0  
	PENFRA[2,NP]=0.0
	PENFRA[3,NP]=0.0        
	GO TO 340
	581 DO 582 JJ=1,NATT4
	NP=NP+1
	IDG4=NP
	CF(IE,NP)=QATT4(JJ,IE)*VAN4*BET[IE]
	FCATT(IE)=FCATT(IE)+CF(IE,NP) 
	PSCT(IE,NP)=0.5
	ANGCT(IE,NP)=1.0
	if(IE > 1):
	GO TO 582
	NEGAS[NP]=4
	LEGAS[NP]=0
	IESHELL[NP]=0
	INDEX[NP]=0
	RGAS[NP]=RGAS4
	EIN[NP]=0.00
	IPN[NP]=-1
	L=18
	IARRY[NP]=L
	IZBR[NP]=0
	DSCRPT[NP]=SCRP4(2+NION4+JJ)
	PENFRA[1,NP]=0.0
	PENFRA[2,NP]=0.0
	PENFRA[3,NP]=0.0
	582 CONTINUE                                    
	340 if(NIN4 == 0) GO TO 360                                           
	DO 350 J=1,NIN4 
	NP=NP+1
	IDG4=NP
	NEGAS[NP]=4
	LEGAS[NP]=0
	IESHELL[NP]=0
	CF(IE,NP)=QIN4(J,IE)*VAN4*BET[IE]
	# NO X-SECTION FOR BREMSSTRAHLUNG IF LBRM=0
	if(IZBR4[J]:
	!= 0 and LBRM == 0) CF(IE,NP)=0.0
	PSCT(IE,NP)=0.5
	ANGCT(IE,NP)=1.0
	INDEX[NP]=0
	#
	if(KIN4[J]:
	== 1) :
	PSCT1=PEQIN4(J,IE)
	CALL ANGCUT(PSCT1,ANGC,PSCT2)
	ANGCT(IE,NP)=ANGC
	PSCT(IE,NP)=PSCT2
	INDEX[NP]=1
	# endif
	if(KIN4[J]:
	== 2) :
	PSCT(IE,NP)=PEQIN4(J,IE)
	INDEX[NP]=2
	# endif
	#
	if(IE > 1):
	GO TO 350        
	RGAS[NP]=RGAS4                                                    
	EIN[NP]=EI4[J]/RGAS4
	L=19
	if(EI4[J]:
	< 0.00) L=20                                          
	IPN[NP]=0         
	IARRY[NP]=L
	IZBR[NP]=IZBR4[J]
	DSCRPT[NP]=SCRP4(4+NION4+NATT4+J)
	PENFRA[1,NP]=PENFRA4(1,J)
	PENFRA[2,NP]=PENFRA4(2,J)*1.D-6/math.sqrt(3.00)
	PENFRA[3,NP]=PENFRA4(3,J)
	if(PENFRA[1,NP] > AVPFRAC(1,4):
	) : 
	AVPFRAC(1,4)=PENFRA[1,NP]
	AVPFRAC(2,4)=PENFRA[2,NP]
	AVPFRAC(3,4)=PENFRA[3,NP]
	# endif
	if(J == NIN4):
	CMINEXSC(4)=CMINEXSC(4)*AVPFRAC(1,4)
	350 CONTINUE             
	#                                           
	360 if(NGAS == 4) GO TO 600  
	NP=NP+1
	IDG5=NP      
	NEGAS[NP]=5
	LEGAS[NP]=0
	IESHELL[NP]=0                                                     
	CF(IE,NP)=Q5(2,IE)*VAN5*BET[IE] 
	PSCT(IE,NP)=0.5
	ANGCT(IE,NP)=1.0
	INDEX[NP]=0
	#
	if(KEL5(2):
	== 1) : 
	PSCT1=PEQEL5(2,IE)
	CALL ANGCUT(PSCT1,ANGC,PSCT2)
	ANGCT(IE,NP)=ANGC
	PSCT(IE,NP)=PSCT2
	INDEX[NP]=1
	# endif
	if(KEL5(2):
	== 2) :
	PSCT(IE,NP)=PEQEL5(2,IE)
	INDEX[NP]=2
	# endif
	# 
	if(IE > 1):
	GO TO 362                                    
	RGAS5=1.00+E5(2)/2.00                                           
	RGAS[NP]=RGAS5                                                    
	EIN[NP]=0.00                                                     
	IPN[NP]=0
	L=21                                                          
	IARRY[NP]=L
	IZBR[NP]=0
	DSCRPT[NP]=SCRP5(2) 
	NAMEG(5)=NAME5    
	PENFRA[1,NP]=0.0
	PENFRA[2,NP]=0.0
	PENFRA[3,NP]=0.0
	AVPFRAC(1,5)=0.0
	AVPFRAC(2,5)=0.0
	AVPFRAC(3,5)=0.0
	CMINEXSC(5)=E5(4)*AN5                                    
	CMINIXSC(5)=E5(5)*AN5
	ECLOSS(5)=E5(3)
	WPLN(5)=E5(6)
	362 if(EFINAL < E5(3)) GO TO 430  
	if(NION5 > 1):
	GO TO 370                                   
	NP=NP+1
	IDG5=NP  
	# CHOOSE BETWEEN COUNTING AND GROSS IONISATION X-SECTION
	if(ICOUNT == 1):
	:
	CF(IE,NP)=Q5(5,IE)*VAN5*BET[IE]
	FCION(IE)=FCION(IE)+CF(IE,NP)
	DOUBLE(5,IE)=Q5(3,IE)/Q5(5,IE)-1.00
	else:                                                         
	CF(IE,NP)=Q5(3,IE)*VAN5*BET[IE]
	FCION(IE)=FCION(IE)+CF(IE,NP)
	# endif
	NEGAS[NP]=5
	LEGAS[NP]=0
	IESHELL[NP]=0
	PSCT(IE,NP)=0.5
	ANGCT(IE,NP)=1.0
	INDEX[NP]=0 
	#
	if(ICOUNT == 1):
	:
	if(KEL5(5):
	== 1) :
	PSCT1=PEQEL5(5,IE)
	CALL ANGCUT(PSCT1,ANGC,PSCT2)
	ANGCT(IE,NP)=ANGC
	PSCT(IE,NP)=PSCT2
	INDEX[NP]=1
	# endif
	if(KEL5(5):
	== 2) :
	PSCT(IE,NP)=PEQEL5(5,IE)
	INDEX[NP]=2
	# endif
	else:
	if(KEL5(3):
	== 1) :
	PSCT1=PEQEL5(3,IE)
	CALL ANGCUT(PSCT1,ANGC,PSCT2)
	ANGCT(IE,NP)=ANGC
	PSCT(IE,NP)=PSCT2
	INDEX[NP]=1
	# endif
	if(KEL5(3):
	== 2) :
	PSCT(IE,NP)=PEQEL5(3,IE)
	INDEX[NP]=2
	# endif
	# endif
	# 
	WPL[NP]=EB5[1]     
	NC0[NP]=NC05[1]
	EC0[NP]=EC05[1]
	NG1[NP]=NG15[1]
	EG1[NP]=EG15[1]
	NG2[NP]=NG25[1]
	EG2[NP]=EG25[1]
	WKLM[NP]=WK5[1]
	EFL[NP]=EFL5[1]
	if(IE > 1):
	GO TO 430                                    
	RGAS[NP]=RGAS5                                                    
	EIN[NP]=E5[3]/RGAS5 
	IPN[NP]=1
	L=22                                                          
	IARRY[NP]=L
	IZBR[NP]=0
	DSCRPT[NP]=SCRP5(3)  
	PENFRA[1,NP]=0.0  
	PENFRA[2,NP]=0.0
	PENFRA[3,NP]=0.0 
	IONMODEL[NP]=IONMODL5
	DO 369 K=1,20
	369 ESPLIT(NP,K)=ESPLIT5(IONMODL5,K) 
	GO TO 430       
	370 DO 380 KION=1,NION5                                   
	NP=NP+1
	IDG5=NP  
	# CHOOSE BETWEEN COUNTING AND GROSS IONISATION X-SECTION
	CF[IE,NP]=QION5(KION,IE)*VAN5*BET[IE]
	FCION(IE)=FCION(IE)+CF[IE,NP]
	PSCT[IE,NP]=0.5
	ANGCT[IE,NP]=1.0
	INDEX[NP]=0 
	NEGAS[NP]=5
	LEGAS[NP]=LEGAS5[KION]
	IESHELL[NP]=IESHEL5[KION]
	#
	if(KEL5(3):
	== 1) :
	PSCT1=PEQION5(KION,IE)
	CALL ANGCUT(PSCT1,ANGC,PSCT2)
	ANGCT(IE,NP)=ANGC
	PSCT(IE,NP)=PSCT2
	INDEX[NP]=1
	# endif
	if(KEL5(3):
	== 2) :
	PSCT(IE,NP)=PEQION5(KION,IE)
	INDEX[NP]=2
	# endif
	#
	WPL[NP]=EB5[KION]
	NC0[NP]=NC05[KION]
	EC0[NP]=EC05[KION]
	NG1[NP]=NG15[KION]
	EG1[NP]=EG15[KION]
	NG2[NP]=NG25[KION]
	EG2[NP]=EG25[KION]
	WKLM[NP]=WK5[KION]
	EFL[NP]=EFL5[KION]
	if(IE > 1):
	GO TO 380                                    
	RGAS[NP]=RGAS5                                                    
	EIN[NP]=EION5[KION]/RGAS5
	# 
	IPN[NP]=1
	L=22                                                          
	IARRY[NP]=L
	IZBR[NP]=0
	DSCRPT[NP]=SCRP5(2+KION)  
	PENFRA[1,NP]=0.0  
	PENFRA[2,NP]=0.0
	PENFRA[3,NP]=0.0 
	IONMODEL[NP]=IONMODL5
	DO 379 K=1,20
	379 ESPLIT(NP,K)=ESPLIT5(IONMODL5,K) 
	380 CONTINUE
	430 if(EFINAL < E5(4)) GO TO 440                 
	if(NATT5 > 1):
	GO TO 591                    
	NP=NP+1
	IDG5=NP                                                           
	CF(IE,NP)=Q5(4,IE)*VAN5*BET[IE]
	FCATT(IE)=FCATT(IE)+CF(IE,NP)
	PSCT(IE,NP)=0.5
	ANGCT(IE,NP)=1.0
	if(IE > 1):
	GO TO 440
	NEGAS[NP]=5
	LEGAS[NP]=0
	IESHELL[NP]=0
	INDEX[NP]=0                                     
	RGAS[NP]=RGAS5                                                    
	EIN[NP]=0.00                                                     
	IPN[NP]=-1             
	L=23                                            
	IARRY[NP]=L
	IZBR[NP]=0
	DSCRPT[NP]=SCRP5(3+NION5)  
	PENFRA[1,NP]=0.0  
	PENFRA[2,NP]=0.0 
	PENFRA[3,NP]=0.0        
	GO TO 440
	591 DO 592 JJ=1,NATT5
	NP=NP+1
	IDG5=NP
	CF(IE,NP)=QATT5(JJ,IE)*VAN5*BET[IE]
	FCATT(IE)=FCATT(IE)+CF(IE,NP)
	PSCT(IE,NP)=0.5
	ANGCT(IE,NP)=1.0
	if(IE > 1):
	GO TO 592
	NEGAS[NP]=5
	LEGAS[NP]=0
	IESHELL[NP]=0
	INDEX[NP]=0
	RGAS[NP]=RGAS5
	EIN[NP]=0.00
	IPN[NP]=-1
	L=23
	IARRY[NP]=L
	IZBR[NP]=0
	DSCRPT[NP]=SCRP5(2+NION5+JJ)
	PENFRA[1,NP]=0.0
	PENFRA[2,NP]=0.0
	PENFRA[3,NP]=0.0
	592 CONTINUE                                  
	440 if(NIN5 == 0) GO TO 460                                           
	DO 450 J=1,NIN5 
	NP=NP+1
	IDG5=NP      
	NEGAS[NP]=5
	LEGAS[NP]=0
	IESHELL[NP]=0                                                     
	CF(IE,NP)=QIN5(J,IE)*VAN5*BET[IE] 
	# NO X-SECTION FOR BREMSSTRAHLUNG IF LBRM=0
	if(IZBR5[J]:
	!= 0 and LBRM == 0) CF(IE,NP)=0.0
	PSCT(IE,NP)=0.5
	ANGCT(IE,NP)=1.0
	INDEX[NP]=0
	#
	if(KIN5[J]:
	== 1) :
	PSCT1=PEQIN5(J,IE)
	CALL ANGCUT(PSCT1,ANGC,PSCT2)
	ANGCT(IE,NP)=ANGC
	PSCT(IE,NP)=PSCT2
	INDEX[NP]=1
	# endif
	if(KIN5[J]:
	== 2) :
	PSCT(IE,NP)=PEQIN5(J,IE)
	INDEX[NP]=2
	# endif  
	#        
	if(IE > 1):
	GO TO 450
	RGAS[NP]=RGAS5                                                    
	EIN[NP]=EI5[J]/RGAS5
	L=24
	if(EI5[J]:
	< 0.00) L=25                                          
	IPN[NP]=0         
	IARRY[NP]=L
	IZBR[NP]=IZBR5[J]
	DSCRPT[NP]=SCRP5(4+NION5+NATT5+J)
	PENFRA[1,NP]=PENFRA5(1,J)
	PENFRA[2,NP]=PENFRA5(2,J)*1.D-6/math.sqrt(3.00)
	PENFRA[3,NP]=PENFRA5(3,J)
	if(PENFRA[1,NP] > AVPFRAC(1,5):
	) : 
	AVPFRAC(1,5)=PENFRA[1,NP]
	AVPFRAC(2,5)=PENFRA[2,NP]
	AVPFRAC(3,5)=PENFRA[3,NP]
	# endif
	if(J == NIN5):
	CMINEXSC(5)=CMINEXSC(5)*AVPFRAC(1,5)
	450 CONTINUE             
	#                                           
	460 if(NGAS == 5) GO TO 600  
	NP=NP+1
	IDG6=NP      
	NEGAS[NP]=6
	LEGAS[NP]=0
	IESHELL[NP]=0                                                     
	CF(IE,NP)=Q6(2,IE)*VAN6*BET[IE]
	PSCT(IE,NP)=0.5
	ANGCT(IE,NP)=1.0
	INDEX[NP]=0 
	#
	if(KEL6(2):
	== 1) :
	PSCT1=PEQEL6(2,IE)
	CALL ANGCUT(PSCT1,ANGC,PSCT2)
	ANGCT(IE,NP)=ANGC
	PSCT(IE,NP)=PSCT2
	INDEX[NP]=1
	# endif
	if(KEL6(2):
	== 2) :
	PSCT(IE,NP)=PEQEL6(2,IE)
	INDEX[NP]=2
	# endif
	#  
	if(IE > 1):
	GO TO 462                                    
	RGAS6=1.00+E6(2)/2.00                                           
	RGAS[NP]=RGAS6                                                    
	EIN[NP]=0.00                                                     
	IPN[NP]=0
	L=26                                                          
	IARRY[NP]=L
	IZBR[NP]=0  
	DSCRPT[NP]=SCRP6(2) 
	NAMEG(6)=NAME6  
	PENFRA[1,NP]=0.0
	PENFRA[2,NP]=0.0
	PENFRA[3,NP]=0.0
	AVPFRAC(1,6)=0.0
	AVPFRAC(2,6)=0.0
	AVPFRAC(3,6)=0.0
	CMINEXSC(6)=E6(4)*AN6                                       
	CMINIXSC(6)=E6(5)*AN6
	ECLOSS(6)=E6(3)
	WPLN(6)=E6(6)
	462 if(EFINAL < E6(3)) GO TO 530      
	if(NION6 > 1):
	GO TO 470                               
	NP=NP+1 
	IDG6=NP 
	# CHOOSE BETWEEN COUNTING AND GROSS IONISATION X-SECTION
	if(ICOUNT == 1):
	:
	CF(IE,NP)=Q6(5,IE)*VAN6*BET[IE]
	FCION(IE)=FCION(IE)+CF(IE,NP)
	DOUBLE(6,IE)=Q6(3,IE)/Q6(5,IE)-1.00
	else:                                                         
	CF(IE,NP)=Q6(3,IE)*VAN6*BET[IE]
	FCION(IE)=FCION(IE)+CF(IE,NP)
	# endif
	NEGAS[NP]=6
	LEGAS[NP]=0
	IESHELL[NP]=0
	PSCT(IE,NP)=0.5
	ANGCT(IE,NP)=1.0
	INDEX[NP]=0
	#
	if(ICOUNT == 1):
	:
	if(KEL6(5):
	== 1) :
	PSCT1=PEQEL6(5,IE)
	CALL ANGCUT(PSCT1,ANGC,PSCT2)
	ANGCT(IE,NP)=ANGC
	PSCT(IE,NP)=PSCT2
	INDEX[NP]=1      
	# endif
	if(KEL6(5):
	== 2) :
	PSCT(IE,NP)=PEQEL6(5,IE)
	INDEX[NP]=2
	# endif
	else:
	if(KEL6(3):
	== 1) :
	PSCT1=PEQEL6(3,IE)
	CALL ANGCUT(PSCT1,ANGC,PSCT2)
	ANGCT(IE,NP)=ANGC
	PSCT(IE,NP)=PSCT2
	INDEX[NP]=1      
	# endif
	if(KEL6(3):
	== 2) :
	PSCT(IE,NP)=PEQEL6(3,IE)
	INDEX[NP]=2
	# endif
	# endif
	#
	WPL[NP]=EB6[1]
	NC0[NP]=NC06[1]
	EC0[NP]=EC06[1]
	NG1[NP]=NG16[1]
	EG1[NP]=EG16[1]
	NG2[NP]=NG26[1]
	EG2[NP]=EG26[1]
	WKLM[NP]=WK6[1]
	EFL[NP]=EFL6[1]
	if(IE > 1):
	GO TO 530                                     
	RGAS[NP]=RGAS6                                                    
	EIN[NP]=E6[3]/RGAS6 
	IPN[NP]=1             
	L=27                                             
	IARRY[NP]=L
	IZBR[NP]=0  
	DSCRPT[NP]=SCRP6[3]
	PENFRA[1,NP]=0.0  
	PENFRA[2,NP]=0.0
	PENFRA[3,NP]=0.0    
	GO TO 530  
	470 DO 480 KION=1,NION6    
	NP=NP+1
	IDG6=NP  
	# CHOOSE BETWEEN COUNTING AND GROSS IONISATION X-SECTION
	CF(IE,NP)=QION6(KION,IE)*VAN6*BET[IE]
	FCION(IE)=FCION(IE)+CF(IE,NP)
	PSCT(IE,NP)=0.5
	ANGCT(IE,NP)=1.0
	INDEX[NP]=0
	NEGAS[NP]=6
	LEGAS[NP]=LEGAS6[KION]
	IESHELL[NP]=IESHEL6[KION]
	#
	if(KEL6[3]== 1) :
	PSCT1=PEQION6(KION,IE)
	CALL ANGCUT(PSCT1,ANGC,PSCT2)
	ANGCT(IE,NP)=ANGC
	PSCT(IE,NP)=PSCT2
	INDEX[NP]=1      
	# endif
	if(KEL6[3]== 2):
	PSCT[IE,NP]=PEQION6[KION,IE]
	INDEX[NP]=2
	# endif
	#
	WPL[NP]=EB6[KION]
	NC0[NP]=NC06[KION]
	EC0[NP]=EC06[KION]
	NG1[NP]=NG16[KION]
	EG1[NP]=EG16[KION]
	NG2[NP]=NG26[KION]
	EG2[NP]=EG26[KION]
	WKLM[NP]=WK6[KION]
	EFL[NP]=EFL6[KION]
	if(IE > 1):
	GO TO 480                                     
	RGAS[NP]=RGAS6                                                    
	EIN[NP]=EION6[KION]/RGAS6 
	IPN[NP]=1             
	L=27                                             
	IARRY[NP]=L
	IZBR[NP]=0  
	DSCRPT[NP]=SCRP6(2+KION)
	PENFRA[1,NP]=0.0  
	PENFRA[2,NP]=0.0
	PENFRA[3,NP]=0.0    
	IONMODEL[NP]=IONMODL6
	DO 479 K=1,20
	479 ESPLIT(NP,K)=ESPLIT6(IONMODL6,K) 
	480 CONTINUE                                 
	530 if(EFINAL < E6(4)) GO TO 540                  
	if(NATT6 > 1):
	GO TO 590                   
	NP=NP+1
	IDG6=NP                                                           
	CF(IE,NP)=Q6(4,IE)*VAN6*BET[IE] 
	FCATT(IE)=FCATT(IE)+CF(IE,NP)
	PSCT(IE,NP)=0.5
	ANGCT(IE,NP)=1.0
	if(IE > 1):
	GO TO 540 
	NEGAS[NP]=6
	LEGAS[NP]=0
	IESHELL[NP]=0       
	INDEX[NP]=0                            
	RGAS[NP]=RGAS6                                                    
	EIN[NP]=0.00                                                     
	IPN[NP]=-1
	L=28                                                          
	IARRY[NP]=L
	IZBR[NP]=0  
	DSCRPT[NP]=SCRP6(3+NION6) 
	PENFRA[1,NP]=0.0  
	PENFRA[2,NP]=0.0
	PENFRA[3,NP]=0.0        
	GO TO 540
	590 DO 602 JJ=1,NATT6
	NP=NP+1
	IDG6=NP
	CF(IE,NP)=QATT6(JJ,IE)*VAN6*BET[IE]
	FCATT(IE)=FCATT(IE)+CF(IE,NP)
	PSCT(IE,NP)=0.5
	ANGCT(IE,NP)=1.0
	if(IE > 1):
	GO TO 602
	NEGAS[NP]=6
	LEGAS[NP]=0
	IESHELL[NP]=0
	INDEX[NP]=0
	RGAS[NP]=RGAS6
	EIN[NP]=0.00
	IPN[NP]=-1
	L=28
	IARRY[NP]=L
	IZBR[NP]=0
	DSCRPT[NP]=SCRP6(2+NION6+JJ)
	PENFRA[1,NP]=0.0
	PENFRA[2,NP]=0.0
	PENFRA[3,NP]=0.0
	IONMODEL[NP]=IONMODL6
	DO 601 K=1,20
	601 ESPLIT(NP,K)=ESPLIT6(IONMODL6,K)  
	602 CONTINUE                                    
	540 if(NIN6 == 0) GO TO 560                                           
	DO 550 J=1,NIN6 
	NP=NP+1
	IDG6=NP      
	NEGAS[NP]=6
	LEGAS[NP]=0
	IESHELL[NP]=0                                                     
	CF(IE,NP)=QIN6(J,IE)*VAN6*BET[IE]
	# NO X-SECTION FOR BREMSSTRAHLUNG IF LBRM=0
	if(IZBR6[J]:
	!= 0 and LBRM == 0) CF(IE,NP)=0.0
	PSCT(IE,NP)=0.5
	ANGCT(IE,NP)=1.0
	INDEX[NP]=0 
	#
	if(KIN6[J]== 1) :
	PSCT1=PEQIN6(J,IE)
	CALL ANGCUT(PSCT1,ANGC,PSCT2)
	ANGCT(IE,NP)=ANGC
	PSCT(IE,NP)=PSCT2
	INDEX[NP]=1
	# endif
	if(KIN6[J]== 2) :
	PSCT(IE,NP)=PEQIN6(J,IE)
	INDEX[NP]=2
	# endif
	#
	if(IE > 1):
	GO TO 550          
	RGAS[NP]=RGAS6                                                    
	EIN[NP]=EI6[J]/RGAS6
	L=29
	if(EI6[J]< 0.00):
		L=30                                          
	IPN[NP]=0         
	IARRY[NP]=L
	IZBR[NP]=IZBR6[J]  
	DSCRPT[NP]=SCRP6(4+NION6+NATT6+J)
	PENFRA[1,NP]=PENFRA6[1,J]
	PENFRA[2,NP]=PENFRA6[2,J]*1.D-6/math.sqrt(3.00)
	PENFRA[3,NP]=PENFRA6[3,J]
	if(PENFRA[1,NP] > AVPFRAC(1,6):
	AVPFRAC[1,6]=PENFRA[1,NP]
	AVPFRAC[2,6]=PENFRA[2,NP]
	AVPFRAC[3,6]=PENFRA[3,NP]
	# endif
	if(J == NIN6):
		CMINEXSC[6]=CMINEXSC[6]*AVPFRAC[1,6]  #2363
	550 CONTINUE                                                     
	560 CONTINUE     
	#                                                                       
	600 CONTINUE                                                          
	IPLAST=NP  
	# ----------------------------------------------------------------      
	#   CAN INCREASE ARRAY SIZE UP TO 1740 IF MORE COMPLEX MIXTURES USED.
	#   1740 = 6 * 290 ( 6 = MAX NO OF GASES. 290 = MAX NO OF LEVELS )    
	# ------------------------------------------------------------------    
	if(IPLAST > 512):
		print('WARNING TOO MANY LEVELS IN CALCULATION. CAN INCREASE THE ARRAY SIZES FROM 512 UP TO 1740 MAXIMUM\n')                 

	if(IPLAST > 512):
	  	STOP                                            
	# --------------------------------------------------------------------  
	#     CALCULATION OF TOTAL COLLISION FREQUENCY                          
	# --------------------------------------------------------------------- 
	TCF[IE]=0.00              #2380                                       
	for IL in range(1,IPLAST):
	  TCF(IE)=TCF(IE)+CF[IE][IL]
	  if(CF[IE][IL]< 0.00):
		#WRITE(6,776) CF[IE][IL],IE,IL,IARRY(IL),EIN(IL),E(IE) 
			print(' WARNING NEGATIVE COLLISION FREQUENCY =',CF[IE,IL],' IE =',IE,' IL =',IL,' IARRY=',IARRY[IL],' EIN=',EIN[IL],' ENERGY=',E[IE])                                              
	for IL in range(1,IPLAST):
	  if(TCF(IE)== 0.00):
	  	CF[IE][IL]=0.00  #2390
	  else:                                    
	  	CF[IE][IL)=CF[IE][IL]/TCF(IE)                                                                                          
		  620 CONTINUE                                                          
	for IL in range(2,IPLAST):
		CF[IE][IL]=CF[IE][IL]+CF[IE][IL-1]                                   
		                   
	# FIX ROUNDING ERRORS AT HIGHEST VALUE
	CF[IE,IPLAST]=1.00
	#
	#     FCATT(IE)=FCATT(IE)*EROOT(IE)
	#     FCION(IE)=FCION(IE)*EROOT(IE)                                     
	#     TCF(IE)=TCF(IE)*EROOT(IE)   
	FCATT(IE)=FCATT(IE)*1.0D-10  
	FCION(IE)=FCION(IE)*1.0D-10                                       
	TCF(IE)=TCF(IE)*1.0D-10   
	# CALCULATION OF NULL COLLISION FREQUENCIES
	NP=0
	NPLAST=0
	if((NUL1+NUL2+NUL3+NUL4+NUL5+NUL6):
	== 0) GO TO 699
	if(NUL1 > 0):
	:
	DO 631 J=1,NUL1
	NP=NP+1
	SCLENUL[NP]=SCLN1[J]
	DSCRPTN[NP]=SCRPN1[J]
	631  CFN(IE,NP)=QNUL1(J,IE)*VAN1*SCLENUL[NP]*BET[IE]
	# endif
	if(NUL2 > 0):
	:
	DO 632 J=1,NUL2
	NP=NP+1
	SCLENUL[NP]=SCLN2[J]
	DSCRPTN[NP]=SCRPN2[J]
	632  CFN(IE,NP)=QNUL2(J,IE)*VAN2*SCLENUL[NP]*BET[IE]
	# endif
	if(NUL3 > 0):
	:
	DO 633 J=1,NUL3
	NP=NP+1
	SCLENUL[NP]=SCLN3[J]
	DSCRPTN[NP]=SCRPN3[J]
	633  CFN(IE,NP)=QNUL3(J,IE)*VAN3*SCLENUL[NP]*BET[IE]
	# endif
	if(NUL4 > 0):
	:
	DO 634 J=1,NUL4
	NP=NP+1
	SCLENUL[NP]=SCLN4[J]
	DSCRPTN[NP]=SCRPN4[J]
	634  CFN(IE,NP)=QNUL4(J,IE)*VAN4*SCLENUL[NP]*BET[IE]
	# endif
	if(NUL5 > 0):
	:
	DO 635 J=1,NUL5
	NP=NP+1
	SCLENUL[NP]=SCLN5[J]
	DSCRPTN[NP]=SCRPN5[J]
	635  CFN(IE,NP)=QNUL5(J,IE)*VAN5*SCLENUL[NP]*BET[IE]
	# endif
	if(NUL6 > 0):
	:
	DO 636 J=1,NUL6
	NP=NP+1
	SCLENUL[NP]=SCLN6[J]
	DSCRPTN[NP]=SCRPN6[J]
	636  CFN(IE,NP)=QNUL6(J,IE)*VAN6*SCLENUL[NP]*BET[IE]
	# endif
	NPLAST=NP
	# SUM NULL COLLISIONS
	TCFN[IE]=0.0
	for IL in range(1,NPLAST):  # call 640  #2455
		TCFN(IE)=TCFN(IE)+CFN[IE][IL]
		if(CFN[IE][IL]< 0.0):
		#print(6,779) CFN[IE][IL],IE,IL
			print(' WARNING NEGATIVE NULL COLLISION REQUENCY =',CFN[IE][IL],' IE =',IE,' IL =',IL)
	for IL in range(1,NPLAST):
	  if(TCFN(IE)== 0.00):
	  	CFN[IE][IL]=0.00
	  else:
	  	CFN[IE][IL]=CFN[IE][IL]/TCFN(IE)
	TCFN(IE)=TCFN(IE)*1.0D-10 #2467
	if(NPLAST == 1):
	  	GO TO 699
	  else:
	  for IL in range(2,NPLAST):
	      CFN[IE][IL]=CFN[IE][IL]+CFN(IE,IL-1)
	# FIX ROUNDING ERRORS AT HIGHEST VALUE
		  CFN(IE,NPLAST)=1.00 
	#     WRITE(6,841) (INDEX[J],J, J=1,IPLAST)
	# 841 print(2X,' INDEX=',I3,' J=',I3)                   
	#  SET ANISOTROPIC FLAG IF ANISOTROPIC SCATTERING DATA IS DETECTED
	KELSUM=0 #2479
	#########                  RESET INDENTATION                ###########################
	for J in range(1,6):
	KELSUM=KELSUM+KEL1[J]+KEL2[J]+KEL3[J]+KEL4[J]+KEL5[J]+KEL6[J]
	for J in range(1,250):
	KELSUM=KELSUM+KIN1[J]+KIN2[J]+KIN3[J]+KIN4[J]+KIN5[J]+KIN6[J]
	if(KELSUM > 0):
		NISO=1  
	#     IF(NISO == 1) WRITE(6,7765) NISO
	#7765 print(3X,' ANISOTROPIC SCATTERING DETECTED NISO=',I5)         
	# -------------------------------------------------------------------   
	#   CALCULATE NULL COLLISION FREQUENCY                                  
	# -------------------------------------------------------------------   
	BP=EFIELD*EFIELD*CONST1           #2490                               
	F2=EFIELD*CONST3                                                  
	ELOW=TMAX*(TMAX*BP-F2*math.sqrt(0.50*EFINAL))/ESTEP-1.00            
	ELOW=DMIN1(ELOW,SMALL)                                            
	EHI=TMAX*(TMAX*BP+F2*math.sqrt(0.50*EFINAL))/ESTEP+1.00
	if(EHI > 20000.0):
		EHI=20000.0
	JONE=1
	JLARGE=20000  
	for I in range(1,10):
	JLOW=20000-2000*(11-I)+1+DINT(ELOW)                               
	JHI=20000-2000*(10-I)+DINT(EHI)
	JLOW=DMAX0(JLOW,JONE)                                         
	JHI=DMIN0(JHI,JLARGE)
	for J in range(JLOW,JHI):
		if(TCF[J]>= TCFMAX[I]):
			TCFMAX[I]=TCF[J]                          
	#---------------------------------------------------------------------
	# FIND MAXIMUM COLLISION FREQUENCY
	#     TLIM=TCFMAX[1]
	#     DO 835 I=1,10
	# 835 IF(TLIM < TCFMAX[I]) TLIM=TCFMAX[I]
	#     TCFMAX1=TLIM  
	TLIM=0.0
	for I in range(1,20000):
	if(TLIM < TCF[I]) TLIM=TCF[I]
	TCFMAX1=TLIM                                                    
	# -------------------------------------------------------------------   
	#   CROSS SECTION DATA FOR INTEGRALS IN  OUTPUT               
	# --------------------------------------------------------------------- 
	for I in range[1][NSTEP]:      #900                                         
	QTOT[I]=AN1*Q1[1][I]+AN2*Q2[1][I]+AN3*Q3[1][I]+AN4*Q4[1][I]+AN5*Q5[1][I]+AN6*Q6[1][I]     
	QEL[I]=AN1*Q1[2][I]+AN2*Q2[2][I]+AN3*Q3[2][I]+AN4*Q4[2][I]+AN5*Q5[2][I]+AN6*Q6[2][I]             
	#                                                                       
	QION[1][I]=Q1[3][I]*AN1   
	if(NION1 > 1):
	    for KION in range[1][NION1]: #811
			QION[1][I]=QION1[KION][I]*AN1
	# endif                                           
	QION[2][I]=Q2[3][I]*AN2                                             
		if(NION2 > 1):
	    for KION in range(1,NION2): #812
			QION[2][I]=QION2[KION][I]*AN2
	# endif                                           
	QION(3,I)=Q3[3][I]*AN3                                             
	if(NION3 > 1):
	    for KION in range(1,NION3):
			QION[3][I]=QION3[KION][I]*AN3
	# endif                                           
	QION(4,I)=Q4(3,I)*AN4
	if(NION4 > 1):
		for KION in range(1,NION4):
			QION[4][I]=QION4[KION][I]*AN4
	# endif                                           
	QION[5][I]=Q5[3][I]*AN5
	if(NION5 > 1):
	    for KION in range(1,NION5):
			QION(5,I)=QION5(KION,I)*AN5
	# endif                                           
	QION[6][I]=Q6[3][I]*AN6                                             
	if(NION6 > 1):
	    for KION in range[1][NION6]:
			QION[6][I]=QION6[KION][I]*AN6
	# endif                                           
	QATT[1][I]=Q1[4][I]*AN1                                             
	QATT[2][I]=Q2[4][I]*AN2                                             
	QATT[3][I]=Q3[4][I]*AN3                                             
	QATT[4][I]=Q4[4][I]*AN4
	QATT[5][I]=Q5[4][I]*AN5
	QATT[6][I]=Q6[4][I]*AN6                                             
	#                                                                       
	QREL[I]=0.00                                                     
	QSATT[I]=0.00                                                   
	QSUM[I]=0.00                                                     
	for J in range(1,NGAS):
		QSUM[I]=QSUM[I]+QION[J][I]+QATT[J][I]                               
		QSATT[I]=QSATT[I]+QATT[J][I]                                       
		QREL[I]=QREL[I]+QION[J][I]-QATT[J][I]                               
	#                                                                       
	if(NIN1 == 0):
		pass
	else:
		for J in range(1,NIN1):
			QSUM[I]=QSUM[I]+QIN1[J][I]*AN1                                     
	if(NIN2 == 0):
		pass                                           
	else:
		for J in range(1,NIN2):
			QSUM[I]=QSUM[I]+QIN2[J][I]*AN2                                     
	if(NIN3 == 0):
		pass                                           
	else
		for J in range(1,NIN3):
			QSUM[I]=QSUM[I]+QIN3[J][I]*AN3                                     
	if(NIN4 == 0):
		pass                                           
		else:
			for J in range(1,NIN4):
			QSUM[I]=QSUM[I]+QIN4[J][I]*AN4                                     
	if(NIN5 == 0):
		pass 
	else:
		for J in range(1,NIN5):
				QSUM[I]=QSUM[I]+QIN5[J][I]*AN5
	if(NIN6 == 0):
		pass
	else:
	    for J in range(1,NIN6):
			QSUM[I]=QSUM[I]+QIN6[J][I]*AN6                                     
	##                                                                       
	RETURN                                                            
	# end 

##COMMENT: end subroutine
def GASMIX(NGS,Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN):
	#IMPLICIT #real*8 (A-H,O-Z) 
	int( I )
	int( J )
	int( K )
	int( L )
	int( M )
	int( N )
	CHARACTER*25 NAME       
	CHARACTER*50 SCRPT(300),SCRPTN(10)                       
	E=[0 for x in range(7)]
	EI=[0 for x in range(251)]
	KIN=[0 for x in range(251)]
	Q=[[0 for x in range(7)] for y in range(20001)]
	QIN=[[0 for x in range(251)] for y in range(20001)]
	EION=[0 for x in range(31)]
	EB=[0 for x in range(31)]   
	QION=[[0 for x in range(31)] for y in range(20001)]      
	PEQION=[[0 for x in range(31)] for y in range(20001)]
	PEQEL=[[0 for x in range(7)] for y in range(20001)]
	PEQIN=[[0 for x in range(251)] for y in range(20001)]
	KEL=[0 for x in range(7)]
	PENFRA=[[0 for x in range(4)] for y in range(251)]
	NC0=[0 for x in range(31)]
	EC0=[0 for x in range(31)]
	WK=[0 for x in range(31)]
	EFL=[0 for x in range(31)]
	NG1=[0 for x in range(31)]
	EG1=[0 for x in range(31)]
	NG2=[0 for x in range(31)]
	EG2=[0 for x in range(31)]
	IZBR=[0 for x in range(251)]
	LEGAS=[0 for x in range(31)]
	IESHELL=[0 for x in range(31)]
	QATT=[[0 for x in range(9)] for y in range(20001)]
	QNULL=[[0 for x in range(11)] for y in range(20001)]
	SCLN=[0 for x in range(11)]
	ESPLIT=[[0 for x in range(6)] for y in range(21)]
	# 
	GO TO (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80) NGS

if(NGS==1):
	GAS1(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
	return    
if(NGS==2):
	GAS2(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
	return    
if(NGS==3):
	GAS3(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
	return    
if(NGS==4):
	GAS4(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
	return    
if (NGS==5):
 GAS5(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==6):
 GAS6(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==7):
 GAS7(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==8):
 GAS8(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==9):
 GAS9(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==10):
 GAS10(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==11):
 GAS11(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==12):
 GAS12(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==13):
 GAS13(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==14):
 GAS14(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==15):
 GAS15(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==16):
 GAS16(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==17):
 GAS17(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==18):
 GAS18(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==19):
 GAS19(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==20):
 GAS20(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==21):
 GAS21(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==22):
 GAS22(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==23):
 GAS23(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==24):
 GAS24(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==25):
 GAS25(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==26):
 GAS26(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==27):
 GAS27(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==28):
 GAS28(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==29):
 GAS29(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KQION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==30):
 GAS30(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==31):
 GAS31(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==32):
 GAS32(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==33):
 GAS33(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==34):
 GAS34(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==35):
 GAS35(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==36):
 GAS36(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==37):
 GAS37(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==38):
 GAS38(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==39):
 GAS39(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==40):
 GAS40(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==41):
 GAS41(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==42):
 GAS42(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==43):
 GAS43(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==44):
 GAS44(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==45):
 GAS45(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==46):
 GAS46(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==47):
 GAS47(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==48):
 GAS48(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==49):
 GAS49(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==50):
 GAS50(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==51):
 GAS51(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==52):
 GAS52(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==53):
 GAS53(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==54):
 GAS54(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==55):
 GAS55(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==56):
 GAS56(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==57):
 GAS57(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==58):
 GAS58(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==59):
 GAS59(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==60):
 GAS60(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==61):
 GAS61(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==62):
 GAS62(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==63):
 GAS63(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==64):
 GAS64(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==65):
 GAS65(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==66):
 GAS66(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==67):
 GAS67(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==68):
 GAS68(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==69):
 GAS69(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==70):
 GAS70(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==71):
 GAS71(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==72):
 GAS72(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==73):
 GAS73(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==74):
 GAS74(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==75):
 GAS75(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==76):
 GAS76(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==77):
 GAS77(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==78):
 GAS78(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==79):
 GAS79(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
if (NGS==80):
 GAS80(Q,QIN,NIN,E,EI,NAME,VIRL,EB,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WK,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,IESHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
  return   
      # end 
def BREMS(IZ,EIN,DCOSX,DCOSY,DCOSZ,EOUT,ECOSX,ECOSY,ECOSZ,EGAMMA,GCOSX,GCOSY,GCOSZ)
	#MPLICIT #real*8(A-H,O-Z)
	#IMPLICIT #integer*8(I-N)
	# def CALCULATES BREMSSTRAHLUNG SCATTERING FOR GAS ATOMIC NO =IZ
	# INPUTS   : ELECTRON ENERGY =EIN
	#          : INCIDENT ELECTRON DIRECTION COSINES: DCOSX,DCOSY,DCOSZ
	# OUTPUTS  : ELECTRON AND GAMMA ENERGIES: EOUT, EGAMMA
	#          : GAMMA DIRECTION COSINES: GCOSX,GCOSY,GCOSZ
	#          : ELECTRON DIRECTION COSINES: ECOSX,ECOSY,ECOSZ
	#     
	API=numpy.arccos(-1.00)                      
	# CALCULATES GAMMA ENERGY EGAMMA     
	BRENERGY(IZ,EIN,EGAMMA)
	EOUT=EIN-EGAMMA
	# CALCULATES GAMMA EMISSION ANGLE THETA
	Z=float(IZ)
	BREMSANGLE(EIN,EGAMMA,Z,ANGL,EANG) 
	R1=DRAND48(RDUM)
	PHI=2.0*API*R1
	THETA=ANGL
	DRCOS(DCOSX,DCOSY,DCOSZ,THETA,PHI,GCOSX,GCOSY,GCOSZ)
	# USE RUTHERFORD APPROX FOR ELECTRON SCATTERING ANGLE
	#      CALL RUTH(EANG)
	# USE CONSERVED TRANSVERSE MOMENTUM APPROX FOR ELECTRON SCATTERING ANGLE
	THETA=EANG
	PHI=2.0*API-PHI
	DRCOS(DCOSX,DCOSY,DCOSZ,THETA,PHI,ECOSX,ECOSY,ECOSZ)
	return 
	# end
def BRENERGY(IZ,EIN,EOUT):
	#IMPLICIT #real*8(A-H,O-Z)
	#IMPLICIT #integer*8(I-N)
	# FROM SELTZER AND BERGER AT.NUCL.DATA TABLES 35(1986)345
	# VARIABLE ENERGY CUT OFF USED IN THE CALCULATION OF THE INTEGRAL ENERGY
	#  DISTRIBUTION. CONSISTENCY WITH X-SECTIONS GIVES DE/DX WITHIN 1% OF
	# SELTZER AND BERGER.
	# def CALCULATES ENERGY OF BREMSTRAHLUNG GAMMA =  EOUT
	# FROM RANDOM SAMPLING OF INTEGRAL ENERGY DISTRIBUTIONS OF ATOMS
	# WITH ATOMIC NUMBER = IZ AND INCIDENT ELECTRON ENERGY = EIN 
	Z1=[[0 for x in range(201)] for y in range(26)]
	Z2=[[0 for x in range(201)] for y in range(26)]
	Z5=[[0 for x in range(201)] for y in range(26)]
	Z6=[[0 for x in range(201)] for y in range(26)]
	Z7=[[0 for x in range(201)] for y in range(26)]
	Z8=[[0 for x in range(201)] for y in range(26)]
	Z9=[[0 for x in range(201)] for y in range(26)]
	Z10=[[0 for x in range(201)] for y in range(26)]
	Z14=[[0 for x in range(201)] for y in range(26)]
	Z15=[[0 for x in range(201)] for y in range(26)]
	Z16=[[0 for x in range(201)] for y in range(26)]
	Z17=[[0 for x in range(201)] for y in range(26)]
	Z18=[[0 for x in range(201)] for y in range(26)]
	Z32=[[0 for x in range(201)] for y in range(26)]
	Z35=[[0 for x in range(201)] for y in range(26)]
	Z36=[[0 for x in range(201)] for y in range(26)]
	Z53=[[0 for x in range(201)] for y in range(26)]
	Z54=[[0 for x in range(201)] for y in range(26)]
	Z55=[[0 for x in range(201)] for y in range(26)]
	ET1=[0 for x in range(25)]
	TEMP=[0 for x in range(200)]
	# ENERGY OF INCIDENT ELECTRON FOR DATA ARRAY IN EV.
	      DATA ET1/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,4.E7,5.E7,6.E7,8.E7,1.000001E8/
	# NORMALISED INTEGRAL ENERGY LOSS PROBABILITIES
	# PROBABILITIES IN 200 EQUAL ENERGY STEPS AT EACH INCIDENT ENERGY.
	# Z=1
	      Z1=[.181787,.272617,.333130,.378483,.414741,.444935,.470798,.493412,.513500,.531567,.547980,.563015,.576884,.589753,.601757,.613002,.623579,.633561,.643011,.651983,.660510,.668634,.676390,.683807,.690914,.697734,.704288,.710596,.716674,.722538,.728202,.733678,.738978,.744111,.749088,.753917,.758607,.763164,.767595,.771907,.776102,.780186,.784164,.788040,.791820,.795507,.799105,.802619,.806052,.809406,.812685,.815892,.819030,.822102,.825108,.828053,.830939,.833766,.836538,.839256,.841920,.844533,.847096,.849610,.852078,.854500,.856878,.859213,.861506,.863760,.865974,.868150,.870289,.872393,.874461,.876495,.878497,.880466,.882403,.884310,.886187,.888034,.889852,.891642,.893404,.895140,.896850,.898534,.900193,.901827,.903438,.905025,.906590,.908133,.909653,.911153,.912631,.914089,.915527,.916946,.918345,.919725,.921086,.922429,.923754,.925061,.926351,.927625,.928881,.930121,.931346,.932554,.933748,.934926,.936089,.937238,.938373,.939493,.940600,.941693,.942773,.943840,.944894,.945936,.946965,.947981,.948986,.949979,.950960,.951930,.952889,.953836,.954773,.955699,.956614,.957519,.958414,.959299,.960174,.961040,.961896,.962742,.963580,.964408,.965228,.966038,.966841,.967634,.968419,.969197,.969965,.970726,.971479,.972225,.972962,.973692,.974415,.975130,.975838,.976539,.977233,.977921,.978602,.979276,.979944,.980606,.981262,.981911,.982555,.983192,.983824,.984449,.985069,.985684,.986293,.986896,.987494,.988086,.988673,.989255,.989832,.990404,.990972,.991535,.992093,.992647,.993197,.993742,.994283,.994819,.995352,.995881,.996407,.996929,.997448,.997964,.998477,.998987,.999495,1.00000,.187238,.280768,.343061,.389736,.427041,.458098,.484693,.507942,.528587,.547150,.564010,.579450,.593688,.606897,.619213,.630749,.641595,.651829,.661516,.670709,.679434,.687733,.695645,.703200,.710428,.717354,.724000,.730387,.736532,.742452,.748161,.753673,.758999,.764150,.769137,.773968,.778653,.783199,.787612,.791901,.796066,.800115,.804051,.807882,.811610,.815242,.818780,.822230,.825594,.828876,.832080,.835209,.838264,.841250,.844169,.847023,.849815,.852546,.855219,.857836,.860398,.862906,.865363,.867770,.870128,.872439,.874705,.876927,.879106,.881243,.883341,.885399,.887419,.889403,.891350,.893263,.895142,.896988,.898801,.900584,.902335,.904057,.905748,.907412,.909047,.910656,.912237,.913793,.915324,.916830,.918311,.919770,.921205,.922618,.924009,.925378,.926726,.928054,.929362,.930650,.931919,.933168,.934399,.935611,.936805,.937981,.939141,.940283,.941408,.942518,.943611,.944689,.945752,.946799,.947832,.948850,.949854,.950845,.951822,.952785,.953735,.954671,.955595,.956506,.957405,.958291,.959165,.960027,.960878,.961718,.962546,.963363,.964169,.964965,.965750,.966525,.967290,.968045,.968791,.969526,.970252,.970968,.971675,.972373,.973061,.973740,.974410,.975072,.975725,.976369,.977005,.977633,.978253,.978865,.979470,.980066,.980655,.981237,.981811,.982378,.982938,.983490,.984034,.984572,.985102,.985625,.986141,.986651,.987153,.987649,.988139,.988622,.989099,.989570,.990034,.990493,.990945,.991392,.991833,.992269,.992699,.993123,.993543,.993957,.994366,.994771,.995170,.995565,.995954,.996339,.996721,.997098,.997472,.997842,.998209,.998573,.998934,.999291,.999647,1.00000,.196037,.293779,.358756,.407352,.446119,.478333,.505867,.529892,.551187,.570299,.587624,.603460,.618037,.631535,.644097,.655841,.666863,.677243,.687049,.696339,.705136,.713485,.721426,.728993,.736216,.743122,.749734,.756074,.762160,.768010,.773640,.779062,.784290,.789336,.794210,.798921,.803479,.807892,.812167,.816312,.820330,.824227,.828009,.831682,.835251,.838720,.842093,.845375,.848570,.851681,.854712,.857665,.860544,.863352,.866092,.868765,.871375,.873923,.876413,.878845,.881222,.883545,.885817,.888039,.890213,.892339,.894421,.896458,.898453,.900407,.902321,.904196,.906033,.907834,.909599,.911330,.913027,.914692,.916325,.917927,.919499,.921041,.922555,.924041,.925500,.926933,.928340,.929722,.931079,.932413,.933723,.935010,.936275,.937519,.938741,.939943,.941125,.942286,.943429,.944553,.945658,.946745,.947814,.948865,.949899,.950917,.951918,.952904,.953873,.954828,.955767,.956692,.957602,.958498,.959380,.960249,.961105,.961947,.962777,.963594,.964398,.965190,.965969,.966737,.967492,.968236,.968968,.969689,.970399,.971099,.971787,.972466,.973134,.973792,.974440,.975079,.975708,.976328,.976939,.977541,.978134,.978717,.979290,.979855,.980411,.980958,.981496,.982026,.982548,.983061,.983567,.984065,.984555,.985037,.985513,.985981,.986441,.986895,.987342,.987782,.988214,.988639,.989055,.989464,.989866,.990260,.990647,.991028,.991401,.991768,.992128,.992482,.992829,.993170,.993505,.993835,.994158,.994476,.994788,.995094,.995394,.995687,.995974,.996254,.996528,.996796,.997059,.997315,.997566,.997811,.998051,.998285,.998515,.998739,.998960,.999176,.999388,.999595,.999800,1.00000,.202484,.303268,.370154,.420092,.459862,.492854,.521005,.545526,.567224,.586663,.604256,.620310,.635062,.648698,.661368,.673192,.684271,.694686,.704509,.713799,.722580,.730900,.738799,.746313,.753472,.760305,.766836,.773087,.779077,.784825,.790346,.795654,.800764,.805686,.810432,.815012,.819435,.823710,.827844,.831844,.835718,.839470,.843107,.846634,.850056,.853379,.856606,.859741,.862789,.865754,.868638,.871445,.874178,.876839,.879433,.881960,.884425,.886828,.889173,.891461,.893694,.895876,.898006,.900088,.902122,.904111,.906055,.907956,.909816,.911636,.913416,.915159,.916865,.918536,.920172,.921774,.923344,.924882,.926389,.927866,.929314,.930734,.932126,.933492,.934831,.936145,.937434,.938699,.939940,.941158,.942354,.943528,.944681,.945813,.946924,.948016,.949089,.950142,.951177,.952195,.953194,.954176,.955141,.956090,.957022,.957938,.958839,.959724,.960595,.961451,.962293,.963121,.963936,.964737,.965525,.966300,.967063,.967814,.968552,.969279,.969994,.970696,.971387,.972067,.972735,.973393,.974039,.974675,.975301,.975917,.976523,.977119,.977706,.978283,.978851,.979410,.979960,.980502,.981035,.981560,.982075,.982582,.983080,.983569,.984050,.984523,.984988,.985445,.985893,.986335,.986769,.987195,.987615,.988027,.988432,.988831,.989223,.989608,.989987,.990360,.990725,.991082,.991432,.991775,.992110,.992439,.992760,.993075,.993383,.993685,.993981,.994271,.994554,.994832,.995104,.995371,.995632,.995888,.996139,.996384,.996622,.996854,.997079,.997298,.997510,.997716,.997916,.998111,.998300,.998484,.998661,.998833,.998998,.999158,.999312,.999461,.999604,.999741,.999873,1.00000,.211055,.315729,.384947,.436440,.477301,.511077,.539793,.564717,.586692,.606309,.623999,.640083,.654811,.668375,.680933,.692610,.703512,.713725,.723322,.732365,.740905,.748988,.756653,.763937,.770870,.777480,.783791,.789825,.795602,.801138,.806451,.811554,.816461,.821182,.825730,.830114,.834344,.838427,.842372,.846185,.849875,.853446,.856905,.860256,.863506,.866659,.869718,.872688,.875574,.878378,.881104,.883755,.886334,.888844,.891288,.893668,.895986,.898246,.900448,.902596,.904690,.906733,.908727,.910673,.912572,.914427,.916239,.918009,.919739,.921429,.923081,.924697,.926277,.927822,.929334,.930813,.932261,.933678,.935065,.936423,.937753,.939055,.940331,.941580,.942805,.944004,.945180,.946333,.947462,.948570,.949656,.950721,.951765,.952789,.953794,.954780,.955748,.956697,.957629,.958543,.959441,.960322,.961187,.962037,.962872,.963691,.964496,.965287,.966064,.966827,.967577,.968313,.969038,.969749,.970449,.971136,.971812,.972476,.973130,.973772,.974403,.975023,.975632,.976231,.976820,.977398,.977967,.978526,.979076,.979616,.980147,.980670,.981184,.981689,.982185,.982674,.983155,.983627,.984092,.984550,.984999,.985439,.985872,.986297,.986715,.987125,.987527,.987923,.988311,.988693,.989067,.989435,.989797,.990152,.990501,.990844,.991181,.991512,.991837,.992157,.992469,.992774,.993072,.993364,.993648,.993927,.994199,.994465,.994724,.994978,.995227,.995469,.995706,.995938,.996165,.996387,.996603,.996815,.997022,.997225,.997420,.997610,.997792,.997969,.998140,.998305,.998465,.998619,.998769,.998913,.999051,.999182,.999307,.999427,.999539,.999644,.999743,.999836,.999921,1.00000,.220066,.328878,.400615,.453820,.495912,.530600,.560002,.585444,.607807,.627712,.645605,.661826,.676633,.690230,.702779,.714414,.725242,.735356,.744831,.753732,.762120,.770040,.777536,.784642,.791392,.797812,.803929,.809765,.815339,.820670,.825775,.830666,.835360,.839866,.844197,.848363,.852373,.856236,.859960,.863552,.867021,.870373,.873614,.876750,.879786,.882725,.885573,.888334,.891011,.893608,.896128,.898576,.900952,.903262,.905506,.907689,.909811,.911876,.913885,.915841,.917746,.919601,.921409,.923170,.924887,.926561,.928194,.929786,.931340,.932856,.934336,.935780,.937191,.938569,.939914,.941229,.942514,.943769,.944996,.946196,.947369,.948517,.949640,.950740,.951815,.952868,.953899,.954909,.955897,.956865,.957813,.958742,.959652,.960543,.961417,.962273,.963113,.963935,.964742,.965533,.966308,.967069,.967815,.968547,.969265,.969969,.970660,.971338,.972004,.972657,.973298,.973927,.974545,.975151,.975747,.976331,.976905,.977469,.978023,.978567,.979101,.979625,.980140,.980646,.981142,.981630,.982109,.982580,.983042,.983496,.983942,.984380,.984811,.985234,.985650,.986059,.986460,.986855,.987243,.987625,.987999,.988365,.988725,.989077,.989423,.989762,.990094,.990420,.990740,.991054,.991362,.991664,.991960,.992250,.992535,.992815,.993089,.993359,.993623,.993882,.994135,.994382,.994623,.994858,.995088,.995313,.995532,.995746,.995954,.996158,.996357,.996552,.996742,.996927,.997108,.997285,.997458,.997627,.997791,.997952,.998107,.998257,.998400,.998538,.998671,.998800,.998923,.999042,.999156,.999266,.999370,.999467,.999558,.999644,.999721,.999791,.999854,.999910,.999959,1.00000,.230172,.343527,.417960,.472945,.516271,.551833,.581856,.607732,.630386,.650468,.668449,.684685,.699446,.712946,.725357,.736817,.747441,.757324,.766545,.775174,.783288,.790934,.798154,.804986,.811462,.817609,.823453,.829017,.834321,.839382,.844219,.848844,.853273,.857516,.861586,.865492,.869245,.872852,.876323,.879663,.882885,.885993,.888995,.891895,.894697,.897408,.900030,.902568,.905026,.907407,.909715,.911952,.914121,.916227,.918270,.920253,.922180,.924051,.925870,.927638,.929357,.931029,.932655,.934238,.935778,.937278,.938739,.940161,.941547,.942897,.944214,.945497,.946748,.947968,.949157,.950318,.951451,.952556,.953635,.954688,.955717,.956723,.957706,.958667,.959607,.960526,.961425,.962304,.963164,.964006,.964829,.965635,.966424,.967197,.967953,.968693,.969418,.970128,.970823,.971504,.972171,.972824,.973463,.974090,.974703,.975304,.975893,.976470,.977035,.977589,.978132,.978664,.979185,.979696,.980197,.980689,.981170,.981643,.982106,.982560,.983006,.983443,.983872,.984292,.984705,.985111,.985508,.985899,.986282,.986658,.987027,.987390,.987745,.988095,.988438,.988774,.989105,.989430,.989749,.990062,.990369,.990670,.990965,.991253,.991536,.991814,.992086,.992352,.992613,.992869,.993120,.993366,.993608,.993844,.994076,.994303,.994526,.994745,.994959,.995169,.995374,.995574,.995769,.995959,.996145,.996326,.996502,.996674,.996842,.997006,.997165,.997321,.997473,.997622,.997766,.997907,.998045,.998180,.998311,.998439,.998562,.998680,.998793,.998902,.999007,.999107,.999204,.999297,.999386,.999472,.999551,.999626,.999695,.999759,.999815,.999865,.999908,.999946,.999976,1.00000,.243209,.362338,.440141,.497304,.542104,.578678,.609388,.635712,.658635,.678846,.696845,.713009,.727625,.740921,.753078,.764243,.774537,.784062,.792901,.801128,.808842,.816093,.822921,.829365,.835455,.841222,.846689,.851880,.856815,.861512,.865988,.870257,.874333,.878228,.881954,.885521,.888938,.892214,.895357,.898374,.901277,.904073,.906767,.909364,.911868,.914285,.916618,.918872,.921049,.923154,.925190,.927159,.929065,.930910,.932698,.934429,.936107,.937733,.939310,.940840,.942326,.943769,.945170,.946533,.947857,.949145,.950397,.951615,.952800,.953953,.955076,.956168,.957232,.958269,.959278,.960261,.961220,.962153,.963064,.963951,.964818,.965663,.966489,.967296,.968083,.968853,.969605,.970339,.971057,.971759,.972445,.973115,.973771,.974412,.975039,.975652,.976252,.976838,.977412,.977974,.978523,.979060,.979584,.980097,.980599,.981089,.981568,.982037,.982496,.982945,.983384,.983814,.984234,.984645,.985047,.985441,.985827,.986204,.986573,.986935,.987288,.987634,.987973,.988304,.988628,.988945,.989255,.989558,.989855,.990146,.990431,.990709,.990982,.991249,.991510,.991766,.992017,.992262,.992502,.992737,.992968,.993193,.993413,.993629,.993841,.994048,.994250,.994449,.994643,.994833,.995019,.995202,.995380,.995555,.995727,.995894,.996059,.996220,.996377,.996532,.996682,.996829,.996972,.997111,.997247,.997379,.997508,.997634,.997756,.997876,.997992,.998105,.998216,.998323,.998428,.998531,.998631,.998728,.998823,.998915,.999004,.999089,.999170,.999248,.999323,.999394,.999463,.999529,.999592,.999652,.999708,.999759,.999807,.999851,.999888,.999920,.999948,.999971,.999988,1.00000,.260795,.387490,.469554,.529354,.575835,.613469,.644811,.671456,.694468,.714591,.732365,.748194,.762392,.775200,.786815,.797395,.807070,.815948,.824120,.831663,.838715,.845323,.851529,.857367,.862869,.868063,.872973,.877621,.882027,.886208,.890180,.893957,.897553,.900980,.904248,.907367,.910346,.913193,.915917,.918524,.921027,.923431,.925740,.927961,.930098,.932154,.934135,.936042,.937881,.939654,.941364,.943014,.944607,.946145,.947631,.949067,.950454,.951796,.953094,.954350,.955568,.956750,.957898,.959012,.960094,.961145,.962166,.963158,.964122,.965060,.965972,.966859,.967722,.968561,.969378,.970174,.970948,.971702,.972436,.973151,.973847,.974526,.975189,.975834,.976464,.977078,.977677,.978261,.978831,.979387,.979930,.980460,.980977,.981482,.981975,.982457,.982927,.983386,.983835,.984273,.984700,.985118,.985525,.985922,.986310,.986689,.987059,.987420,.987772,.988116,.988452,.988781,.989101,.989415,.989721,.990020,.990312,.990597,.990876,.991149,.991414,.991673,.991925,.992171,.992411,.992644,.992872,.993093,.993310,.993520,.993726,.993926,.994122,.994312,.994498,.994679,.994856,.995028,.995196,.995360,.995520,.995676,.995827,.995975,.996119,.996259,.996396,.996529,.996659,.996786,.996909,.997030,.997147,.997261,.997373,.997482,.997588,.997691,.997792,.997890,.997985,.998078,.998168,.998256,.998341,.998424,.998505,.998583,.998659,.998733,.998805,.998875,.998943,.999009,.999073,.999135,.999196,.999255,.999313,.999368,.999422,.999473,.999522,.999569,.999613,.999656,.999697,.999736,.999773,.999809,.999842,.999872,.999899,.999924,.999945,.999962,.999976,.999988,.999995,1.00000,.268658,.398636,.482481,.543328,.590428,.628407,.659906,.686574,.709512,.729487,.747058,.762642,.776562,.789069,.800364,.810611,.819942,.828469,.836285,.843471,.850175,.856444,.862319,.867834,.873022,.877908,.882518,.886873,.890992,.894893,.898592,.902102,.905436,.908607,.911625,.914499,.917238,.919852,.922346,.924729,.927018,.929218,.931334,.933370,.935330,.937218,.939038,.940792,.942485,.944118,.945694,.947216,.948687,.950108,.951482,.952811,.954096,.955340,.956544,.957709,.958840,.959939,.961005,.962041,.963047,.964024,.964975,.965898,.966796,.967670,.968520,.969347,.970151,.970934,.971697,.972439,.973162,.973866,.974552,.975220,.975871,.976506,.977125,.977728,.978316,.978890,.979450,.979995,.980528,.981048,.981555,.982050,.982533,.983004,.983465,.983914,.984353,.984782,.985201,.985610,.986009,.986399,.986779,.987151,.987513,.987867,.988213,.988550,.988880,.989202,.989516,.989823,.990123,.990417,.990703,.990983,.991257,.991524,.991785,.992041,.992290,.992532,.992769,.992999,.993224,.993443,.993656,.993864,.994067,.994265,.994458,.994646,.994829,.995008,.995182,.995352,.995518,.995680,.995838,.995992,.996142,.996287,.996427,.996564,.996696,.996824,.996949,.997070,.997187,.997301,.997412,.997519,.997623,.997724,.997822,.997917,.998009,.998099,.998186,.998271,.998352,.998432,.998509,.998583,.998655,.998725,.998793,.998858,.998922,.998983,.999043,.999101,.999157,.999211,.999264,.999315,.999364,.999412,.999458,.999503,.999546,.999587,.999627,.999664,.999700,.999734,.999766,.999797,.999827,.999855,.999881,.999904,.999925,.999945,.999961,.999974,.999984,.999993,.999997,1.00000,.270783,.401484,.485600,.546500,.593533,.631369,.662676,.689121,.711813,.731528,.748830,.764141,.777785,.790014,.801034,.811006,.820067,.828328,.835883,.842811,.849284,.855346,.861033,.866380,.871416,.876165,.880652,.884897,.888917,.892729,.896348,.899787,.903058,.906173,.909142,.911973,.914675,.917256,.919723,.922082,.924352,.926537,.928642,.930669,.932625,.934510,.936330,.938088,.939785,.941425,.943011,.944544,.946028,.947463,.948853,.950199,.951503,.952767,.953991,.955179,.956333,.957454,.958544,.959603,.960633,.961635,.962610,.963559,.964483,.965382,.966257,.967110,.967941,.968750,.969539,.970307,.971057,.971787,.972500,.973195,.973873,.974534,.975180,.975810,.976426,.977026,.977613,.978186,.978746,.979293,.979827,.980349,.980859,.981358,.981845,.982322,.982788,.983243,.983689,.984124,.984550,.984966,.985373,.985771,.986159,.986539,.986911,.987274,.987630,.987977,.988317,.988650,.988975,.989294,.989605,.989910,.990208,.990500,.990786,.991066,.991339,.991606,.991866,.992120,.992369,.992611,.992849,.993080,.993306,.993527,.993743,.993954,.994161,.994362,.994559,.994752,.994940,.995124,.995304,.995479,.995650,.995816,.995977,.996134,.996286,.996434,.996578,.996718,.996854,.996986,.997115,.997240,.997361,.997479,.997594,.997706,.997814,.997920,.998022,.998122,.998218,.998311,.998400,.998485,.998568,.998647,.998724,.998797,.998868,.998937,.999002,.999066,.999127,.999185,.999242,.999296,.999349,.999399,.999448,.999495,.999540,.999582,.999623,.999661,.999698,.999733,.999766,.999798,.999828,.999857,.999883,.999907,.999928,.999948,.999963,.999976,.999986,.999994,.999998,1.00000,.269419,.399426,.483072,.543617,.590362,.627956,.659055,.685317,.707846,.727414,.744582,.759771,.773301,.785427,.796349,.806231,.815207,.823389,.830869,.837727,.844145,.850165,.855822,.861149,.866174,.870922,.875414,.879670,.883708,.887543,.891190,.894661,.897969,.901123,.904134,.907010,.909760,.912390,.914909,.917322,.919645,.921884,.924043,.926125,.928135,.930075,.931950,.933762,.935514,.937209,.938850,.940437,.941975,.943465,.944909,.946309,.947666,.948983,.950261,.951501,.952707,.953880,.955021,.956132,.957212,.958264,.959289,.960287,.961259,.962207,.963130,.964030,.964908,.965763,.966598,.967412,.968207,.968982,.969739,.970478,.971199,.971904,.972592,.973264,.973921,.974563,.975191,.975804,.976404,.976991,.977564,.978125,.978674,.979210,.979735,.980249,.980752,.981244,.981725,.982196,.982658,.983109,.983550,.983982,.984405,.984819,.985224,.985621,.986009,.986389,.986761,.987126,.987483,.987832,.988175,.988510,.988839,.989161,.989476,.989785,.990087,.990383,.990672,.990955,.991231,.991502,.991766,.992025,.992278,.992526,.992769,.993006,.993238,.993465,.993688,.993905,.994118,.994327,.994531,.994731,.994925,.995115,.995299,.995479,.995654,.995825,.995991,.996153,.996311,.996465,.996614,.996760,.996903,.997041,.997176,.997308,.997436,.997561,.997683,.997802,.997916,.998026,.998132,.998234,.998332,.998426,.998517,.998604,.998688,.998769,.998847,.998922,.998995,.999064,.999131,.999196,.999258,.999318,.999375,.999431,.999483,.999533,.999580,.999624,.999666,.999706,.999743,.999779,.999812,.999844,.999873,.999899,.999922,.999944,.999961,.999975,.999986,.999995,.999998,1.00000,.267822,.397057,.480204,.540387,.586852,.624220,.655132,.681235,.703627,.723076,.740140,.755235,.768683,.780734,.791589,.801410,.810330,.818461,.825894,.832710,.839097,.845098,.850747,.856074,.861107,.865869,.870382,.874665,.878735,.882606,.886293,.889808,.893163,.896367,.899430,.902361,.905167,.907856,.910434,.912908,.915293,.917592,.919810,.921951,.924020,.926018,.927950,.929819,.931628,.933378,.935074,.936716,.938308,.939851,.941348,.942800,.944209,.945577,.946906,.948196,.949451,.950673,.951862,.953020,.954148,.955247,.956317,.957361,.958378,.959369,.960336,.961279,.962199,.963097,.963974,.964829,.965664,.966479,.967276,.968054,.968814,.969556,.970282,.970992,.971686,.972364,.973028,.973677,.974312,.974933,.975540,.976135,.976717,.977287,.977845,.978391,.978925,.979449,.979961,.980464,.980955,.981437,.981908,.982369,.982822,.983264,.983698,.984123,.984539,.984947,.985347,.985739,.986123,.986499,.986868,.987229,.987584,.987931,.988272,.988606,.988933,.989254,.989567,.989874,.990175,.990469,.990757,.991039,.991316,.991587,.991852,.992112,.992366,.992616,.992860,.993099,.993334,.993564,.993789,.994010,.994225,.994436,.994641,.994841,.995036,.995227,.995413,.995595,.995772,.995945,.996114,.996279,.996440,.996597,.996751,.996901,.997047,.997190,.997329,.997466,.997597,.997724,.997846,.997963,.998076,.998186,.998291,.998392,.998490,.998584,.998675,.998763,.998847,.998929,.999007,.999083,.999156,.999226,.999294,.999359,.999421,.999478,.999532,.999583,.999631,.999676,.999718,.999757,.999794,.999829,.999861,.999889,.999915,.999939,.999957,.999973,.999985,.999995,.999998,1.00000,.265590,.393823,.476374,.536161,.582347,.619513,.650275,.676267,.698577,.717966,.734988,.750054,.763484,.775526,.786379,.796205,.805134,.813278,.820728,.827563,.833977,.840010,.845696,.851066,.856146,.860959,.865526,.869866,.873995,.877928,.881678,.885258,.888679,.891951,.895083,.898084,.900961,.903721,.906371,.908917,.911372,.913739,.916024,.918231,.920363,.922424,.924417,.926345,.928212,.930019,.931770,.933467,.935112,.936707,.938255,.939757,.941216,.942632,.944007,.945344,.946644,.947910,.949142,.950343,.951512,.952650,.953760,.954842,.955897,.956926,.957929,.958908,.959862,.960794,.961704,.962592,.963459,.964306,.965133,.965941,.966731,.967504,.968259,.968998,.969720,.970427,.971119,.971796,.972458,.973107,.973742,.974363,.974972,.975567,.976151,.976723,.977283,.977832,.978369,.978896,.979412,.979918,.980414,.980899,.981376,.981843,.982300,.982749,.983189,.983620,.984044,.984459,.984866,.985265,.985657,.986041,.986418,.986788,.987151,.987508,.987857,.988199,.988534,.988863,.989185,.989501,.989811,.990114,.990412,.990704,.990990,.991271,.991546,.991816,.992081,.992340,.992595,.992845,.993090,.993331,.993566,.993795,.994020,.994239,.994453,.994663,.994867,.995067,.995263,.995454,.995641,.995823,.996002,.996177,.996347,.996514,.996677,.996837,.996993,.997146,.997293,.997435,.997572,.997704,.997832,.997955,.998074,.998188,.998299,.998405,.998508,.998608,.998704,.998796,.998886,.998972,.999055,.999136,.999213,.999288,.999358,.999423,.999485,.999542,.999595,.999645,.999691,.999735,.999775,.999813,.999848,.999879,.999907,.999933,.999954,.999970,.999984,.999995,.999999,1.00000,.264156,.391725,.473866,.533369,.579345,.616351,.646987,.672878,.695106,.714429,.731395,.746416,.759808,.771819,.782647,.792451,.801363,.809493,.816932,.823758,.830169,.836204,.841898,.847279,.852374,.857206,.861794,.866158,.870313,.874275,.878056,.881668,.885123,.888430,.891598,.894636,.897551,.900351,.903041,.905627,.908122,.910530,.912855,.915101,.917273,.919373,.921405,.923373,.925278,.927124,.928913,.930648,.932331,.933964,.935549,.937088,.938583,.940035,.941446,.942819,.944155,.945455,.946722,.947957,.949160,.950333,.951476,.952591,.953678,.954739,.955774,.956785,.957771,.958734,.959674,.960593,.961490,.962367,.963223,.964060,.964879,.965680,.966464,.967230,.967981,.968715,.969433,.970137,.970826,.971500,.972161,.972808,.973441,.974062,.974670,.975266,.975851,.976423,.976984,.977534,.978074,.978602,.979121,.979629,.980127,.980616,.981095,.981566,.982027,.982480,.982924,.983359,.983787,.984206,.984618,.985022,.985419,.985809,.986191,.986566,.986935,.987296,.987650,.987997,.988337,.988671,.988999,.989321,.989636,.989946,.990249,.990547,.990840,.991126,.991408,.991684,.991956,.992222,.992483,.992740,.992991,.993237,.993477,.993712,.993941,.994166,.994386,.994601,.994812,.995018,.995219,.995416,.995609,.995798,.995983,.996164,.996341,.996514,.996684,.996850,.997010,.997165,.997315,.997459,.997599,.997734,.997865,.997991,.998113,.998231,.998344,.998454,.998561,.998663,.998763,.998859,.998952,.999041,.999128,.999212,.999290,.999363,.999431,.999495,.999554,.999610,.999661,.999710,.999755,.999797,.999835,.999869,.999900,.999927,.999950,.999968,.999983,.999995,.999999,1.00000,.261569,.387956,.469382,.528398,.574023,.610766,.641202,.666937,.689044,.708271,.725163,.740126,.753474,.765452,.776256,.786043,.794946,.803071,.810510,.817339,.823761,.829815,.835532,.840943,.846073,.850943,.855574,.859983,.864187,.868201,.872035,.875704,.879217,.882583,.885813,.888913,.891892,.894756,.897512,.900165,.902726,.905199,.907590,.909902,.912138,.914303,.916399,.918430,.920399,.922308,.924160,.925957,.927701,.929395,.931041,.932640,.934195,.935707,.937177,.938608,.940002,.941360,.942683,.943974,.945232,.946459,.947656,.948824,.949965,.951078,.952164,.953226,.954262,.955275,.956265,.957232,.958178,.959102,.960006,.960890,.961755,.962601,.963430,.964242,.965036,.965814,.966576,.967323,.968054,.968771,.969473,.970161,.970836,.971497,.972146,.972782,.973405,.974016,.974616,.975204,.975781,.976348,.976903,.977448,.977983,.978508,.979024,.979529,.980026,.980514,.980992,.981462,.981924,.982377,.982823,.983260,.983690,.984112,.984527,.984934,.985334,.985727,.986112,.986490,.986862,.987226,.987584,.987936,.988281,.988621,.988954,.989281,.989602,.989918,.990228,.990533,.990832,.991126,.991415,.991699,.991977,.992249,.992516,.992777,.993034,.993284,.993530,.993771,.994007,.994238,.994464,.994686,.994904,.995117,.995326,.995531,.995731,.995928,.996121,.996310,.996493,.996670,.996842,.997008,.997169,.997325,.997476,.997623,.997765,.997902,.998035,.998164,.998289,.998410,.998527,.998641,.998751,.998858,.998961,.999061,.999155,.999242,.999324,.999400,.999471,.999538,.999600,.999658,.999713,.999764,.999809,.999849,.999885,.999916,.999942,.999963,.999980,.999994,.999999,1.00000,.259442,.384862,.465704,.524325,.569667,.606199,.636474,.662087,.684099,.703253,.720088,.735009,.748325,.760280,.771069,.780847,.789746,.797871,.805314,.812150,.818584,.824655,.830394,.835830,.840987,.845889,.850553,.854999,.859242,.863295,.867172,.870884,.874441,.877854,.881131,.884279,.887307,.890220,.893026,.895730,.898341,.900866,.903307,.905668,.907955,.910169,.912315,.914395,.916412,.918370,.920270,.922115,.923907,.925648,.927341,.928987,.930588,.932146,.933663,.935139,.936578,.937980,.939348,.940682,.941984,.943254,.944494,.945705,.946887,.948041,.949169,.950272,.951349,.952402,.953431,.954438,.955422,.956385,.957327,.958249,.959152,.960036,.960901,.961749,.962580,.963394,.964191,.964973,.965739,.966490,.967227,.967949,.968657,.969351,.970032,.970700,.971356,.971999,.972630,.973250,.973858,.974455,.975040,.975616,.976181,.976735,.977280,.977815,.978340,.978856,.979363,.979862,.980351,.980832,.981305,.981769,.982226,.982674,.983115,.983549,.983975,.984393,.984804,.985208,.985605,.985995,.986378,.986754,.987124,.987487,.987845,.988196,.988541,.988880,.989214,.989542,.989864,.990181,.990493,.990799,.991100,.991394,.991683,.991967,.992244,.992517,.992784,.993046,.993303,.993555,.993803,.994045,.994283,.994517,.994746,.994971,.995191,.995408,.995620,.995828,.996030,.996227,.996417,.996602,.996781,.996955,.997123,.997287,.997446,.997600,.997750,.997895,.998037,.998173,.998306,.998435,.998561,.998682,.998800,.998915,.999022,.999123,.999217,.999305,.999388,.999465,.999538,.999606,.999670,.999729,.999782,.999828,.999869,.999905,.999935,.999959,.999978,.999994,.999999,1.00000,.255552,.379198,.458965,.516857,.561673,.597813,.627789,.653170,.675002,.694016,.710743,.725580,.738833,.750742,.761498,.771255,.780142,.788264,.795710,.802555,.809007,.815105,.820878,.826354,.831559,.836512,.841234,.845741,.850049,.854171,.858119,.861906,.865541,.869033,.872391,.875622,.878735,.881734,.884628,.887420,.890121,.892733,.895263,.897713,.900087,.902389,.904622,.906790,.908894,.910938,.912924,.914855,.916732,.918559,.920336,.922066,.923751,.925392,.926991,.928549,.930069,.931553,.933001,.934414,.935795,.937143,.938460,.939747,.941005,.942235,.943438,.944614,.945765,.946890,.947992,.949070,.950125,.951158,.952170,.953161,.954132,.955084,.956017,.956931,.957828,.958707,.959570,.960416,.961246,.962060,.962859,.963643,.964413,.965168,.965910,.966638,.967353,.968055,.968745,.969423,.970088,.970742,.971385,.972016,.972637,.973247,.973847,.974436,.975016,.975585,.976146,.976697,.977239,.977772,.978296,.978812,.979319,.979818,.980310,.980793,.981268,.981736,.982195,.982648,.983092,.983530,.983960,.984384,.984801,.985211,.985614,.986011,.986402,.986787,.987165,.987538,.987904,.988265,.988621,.988971,.989315,.989652,.989984,.990309,.990629,.990944,.991253,.991556,.991854,.992147,.992435,.992718,.992996,.993269,.993537,.993801,.994060,.994315,.994566,.994812,.995052,.995285,.995512,.995733,.995949,.996158,.996362,.996561,.996755,.996943,.997127,.997305,.997479,.997649,.997814,.997974,.998131,.998284,.998432,.998577,.998713,.998842,.998963,.999077,.999185,.999286,.999382,.999472,.999558,.999638,.999709,.999772,.999827,.999877,.999916,.999948,.999973,.999994,.999999,1.00000,.252928,.375371,.454404,.511794,.556246,.592112,.621876,.647092,.668793,.687704,.704348,.719120,.732323,.744192,.754918,.764654,.773526,.781638,.789080,.795924,.802383,.808492,.814281,.819779,.825009,.829991,.834745,.839288,.843633,.847795,.851787,.855618,.859299,.862839,.866246,.869529,.872693,.875746,.878694,.881542,.884297,.886965,.889550,.892056,.894486,.896844,.899133,.901356,.903516,.905616,.907658,.909644,.911577,.913459,.915291,.917076,.918816,.920511,.922165,.923778,.925352,.926889,.928390,.929856,.931289,.932690,.934059,.935398,.936707,.937988,.939241,.940468,.941668,.942843,.943994,.945121,.946225,.947307,.948366,.949405,.950423,.951422,.952401,.953362,.954305,.955229,.956137,.957028,.957903,.958761,.959604,.960432,.961245,.962043,.962828,.963598,.964355,.965099,.965831,.966549,.967256,.967950,.968633,.969305,.969965,.970615,.971254,.971883,.972501,.973110,.973708,.974297,.974877,.975448,.976009,.976562,.977107,.977642,.978170,.978689,.979201,.979704,.980199,.980687,.981166,.981639,.982104,.982562,.983013,.983457,.983895,.984326,.984750,.985168,.985580,.985985,.986385,.986778,.987166,.987548,.987924,.988293,.988656,.989013,.989365,.989710,.990050,.990384,.990713,.991037,.991355,.991668,.991976,.992279,.992577,.992870,.993159,.993443,.993723,.993998,.994266,.994528,.994783,.995032,.995275,.995512,.995744,.995970,.996190,.996405,.996614,.996819,.997019,.997214,.997404,.997590,.997771,.997948,.998121,.998289,.998449,.998600,.998743,.998879,.999007,.999129,.999244,.999353,.999456,.999554,.999642,.999719,.999789,.999850,.999899,.999938,.999969,.999993,.999999,1.00000,.249671,.370607,.448712,.505461,.549441,.584947,.614430,.639421,.660942,.679705,.696230,.710905,.724028,.735832,.746506,.756199,.765038,.773125,.780546,.787377,.793830,.799940,.805738,.811250,.816499,.821506,.826289,.830864,.835245,.839447,.843481,.847357,.851086,.854677,.858136,.861473,.864693,.867804,.870811,.873719,.876535,.879265,.881912,.884481,.886974,.889396,.891749,.894036,.896261,.898425,.900532,.902583,.904582,.906529,.908427,.910277,.912083,.913844,.915563,.917241,.918881,.920483,.922049,.923580,.925078,.926543,.927976,.929379,.930752,.932096,.933413,.934702,.935966,.937203,.938416,.939605,.940771,.941914,.943035,.944134,.945213,.946272,.947311,.948332,.949334,.950318,.951285,.952234,.953167,.954084,.954985,.955870,.956740,.957596,.958437,.959264,.960077,.960877,.961663,.962437,.963198,.963948,.964685,.965411,.966125,.966829,.967521,.968203,.968874,.969535,.970186,.970827,.971459,.972081,.972694,.973298,.973893,.974479,.975057,.975626,.976187,.976740,.977284,.977821,.978349,.978870,.979384,.979890,.980389,.980881,.981365,.981843,.982314,.982779,.983237,.983688,.984134,.984573,.985006,.985433,.985854,.986268,.986676,.987077,.987473,.987863,.988246,.988624,.988997,.989363,.989725,.990081,.990431,.990777,.991117,.991453,.991783,.992109,.992430,.992746,.993056,.993358,.993654,.993944,.994227,.994505,.994776,.995041,.995301,.995555,.995803,.996047,.996285,.996518,.996746,.996969,.997187,.997401,.997610,.997815,.998010,.998196,.998374,.998543,.998704,.998858,.999005,.999145,.999279,.999407,.999522,.999625,.999719,.999804,.999870,.999921,.999961,.999993,.999999,1.00000,.247441,.367346,.444819,.501132,.544793,.580056,.609349,.634191,.655591,.674258,.690704,.705315,.718386,.730150,.740791,.750459,.759277,.767349,.774761,.781585,.788036,.794149,.799953,.805474,.810736,.815758,.820559,.825154,.829558,.833785,.837844,.841749,.845507,.849127,.852619,.855989,.859243,.862389,.865431,.868376,.871230,.873997,.876682,.879289,.881821,.884281,.886673,.889000,.891264,.893469,.895615,.897707,.899745,.901733,.903671,.905562,.907408,.909209,.910969,.912688,.914368,.916011,.917617,.919189,.920727,.922233,.923707,.925150,.926564,.927949,.929306,.930636,.931939,.933217,.934470,.935700,.936905,.938088,.939249,.940388,.941506,.942605,.943684,.944744,.945785,.946808,.947814,.948802,.949774,.950729,.951668,.952592,.953501,.954394,.955273,.956138,.956989,.957826,.958650,.959461,.960260,.961046,.961820,.962583,.963334,.964074,.964802,.965520,.966228,.966925,.967612,.968289,.968956,.969613,.970262,.970901,.971531,.972152,.972764,.973369,.973964,.974551,.975130,.975701,.976264,.976819,.977366,.977906,.978439,.978964,.979482,.979993,.980498,.980995,.981486,.981971,.982449,.982921,.983387,.983846,.984299,.984745,.985185,.985619,.986047,.986468,.986883,.987293,.987697,.988095,.988487,.988874,.989256,.989632,.990003,.990369,.990730,.991086,.991437,.991784,.992123,.992456,.992781,.993101,.993414,.993720,.994021,.994316,.994604,.994887,.995165,.995437,.995703,.995965,.996221,.996472,.996718,.996960,.997196,.997429,.997651,.997864,.998068,.998263,.998451,.998630,.998802,.998966,.999124,.999275,.999413,.999538,.999653,.999757,.999839,.999903,.999953,.999992,.999999,1.00000,.245664,.364756,.441734,.497710,.541127,.576206,.605359,.630090,.651405,.670004,.686397,.700967,.714007,.725746,.736370,.746026,.754837,.762906,.770317,.777143,.783599,.789720,.795533,.801066,.806341,.811378,.816195,.820808,.825231,.829477,.833558,.837484,.841264,.844908,.848424,.851818,.855098,.858269,.861338,.864309,.867190,.869985,.872697,.875332,.877892,.880381,.882802,.885157,.887450,.889684,.891859,.893980,.896048,.898065,.900033,.901954,.903829,.905660,.907450,.909198,.910908,.912581,.914218,.915819,.917387,.918923,.920426,.921899,.923343,.924757,.926144,.927503,.928836,.930144,.931426,.932684,.933919,.935131,.936321,.937489,.938637,.939764,.940872,.941961,.943031,.944083,.945117,.946134,.947134,.948118,.949086,.950038,.950975,.951897,.952804,.953697,.954576,.955441,.956293,.957132,.957959,.958773,.959574,.960364,.961143,.961910,.962666,.963411,.964146,.964870,.965583,.966287,.966981,.967665,.968340,.969005,.969662,.970309,.970948,.971578,.972199,.972812,.973417,.974013,.974602,.975183,.975756,.976322,.976880,.977431,.977974,.978511,.979041,.979563,.980080,.980589,.981093,.981589,.982080,.982565,.983042,.983514,.983978,.984437,.984889,.985335,.985775,.986209,.986638,.987060,.987477,.987888,.988294,.988695,.989090,.989480,.989865,.990245,.990620,.990991,.991354,.991710,.992060,.992402,.992739,.993069,.993393,.993711,.994023,.994329,.994629,.994924,.995214,.995498,.995776,.996050,.996319,.996582,.996841,.997095,.997339,.997574,.997800,.998016,.998225,.998425,.998618,.998803,.998981,.999153,.999310,.999454,.999587,.999709,.999806,.999882,.999943,.999991,.999999,1.00000,.244082,.362455,.438999,.494682,.537890,.572815,.601851,.626493,.647740,.666287,.682642,.697183,.710202,.721928,.732543,.742196,.751008,.759081,.766498,.773333,.779800,.785933,.791760,.797308,.802599,.807653,.812488,.817119,.821562,.825828,.829930,.833877,.837679,.841346,.844884,.848302,.851605,.854800,.857893,.860889,.863794,.866614,.869351,.872011,.874596,.877110,.879556,.881936,.884255,.886513,.888714,.890860,.892953,.894996,.896989,.898935,.900835,.902692,.904506,.906280,.908015,.909713,.911374,.913001,.914594,.916154,.917683,.919180,.920648,.922087,.923498,.924882,.926239,.927571,.928877,.930160,.931419,.932655,.933868,.935060,.936231,.937382,.938513,.939626,.940719,.941795,.942852,.943892,.944916,.945923,.946914,.947889,.948848,.949793,.950723,.951639,.952540,.953428,.954302,.955164,.956012,.956849,.957673,.958486,.959286,.960076,.960854,.961622,.962379,.963125,.963861,.964587,.965303,.966010,.966707,.967394,.968073,.968743,.969403,.970056,.970699,.971334,.971961,.972580,.973190,.973793,.974388,.974975,.975555,.976128,.976693,.977252,.977803,.978348,.978886,.979417,.979942,.980460,.980972,.981478,.981977,.982469,.982955,.983435,.983908,.984375,.984836,.985291,.985740,.986183,.986621,.987053,.987479,.987900,.988316,.988726,.989131,.989531,.989927,.990317,.990700,.991076,.991445,.991808,.992164,.992514,.992858,.993195,.993526,.993852,.994172,.994486,.994794,.995097,.995395,.995688,.995975,.996257,.996535,.996807,.997070,.997323,.997567,.997802,.998029,.998247,.998458,.998661,.998856,.999045,.999219,.999380,.999528,.999665,.999775,.999863,.999934,.999991,.999999,1.00000,.241562,.358800,.434666,.489898,.532786,.567479,.596343,.620859,.642011,.660490,.676796,.691305,.704305,.716023,.726638,.736298,.745123,.753214,.760654,.767514,.774008,.780168,.786025,.791602,.796924,.802009,.806876,.811540,.816015,.820315,.824450,.828432,.832269,.835970,.839543,.842996,.846335,.849566,.852694,.855726,.858667,.861522,.864296,.866991,.869612,.872162,.874644,.877061,.879416,.881710,.883947,.886129,.888258,.890336,.892365,.894347,.896283,.898175,.900025,.901834,.903605,.905338,.907035,.908697,.910325,.911920,.913484,.915016,.916519,.917993,.919439,.920858,.922250,.923616,.924957,.926274,.927567,.928837,.930085,.931311,.932516,.933701,.934867,.936013,.937141,.938250,.939342,.940416,.941474,.942514,.943539,.944548,.945542,.946520,.947484,.948434,.949369,.950291,.951199,.952094,.952976,.953846,.954704,.955549,.956384,.957207,.958018,.958819,.959609,.960389,.961158,.961917,.962666,.963406,.964136,.964856,.965567,.966270,.966963,.967648,.968324,.968991,.969651,.970302,.970945,.971580,.972208,.972828,.973440,.974045,.974643,.975234,.975818,.976395,.976965,.977528,.978085,.978636,.979180,.979718,.980249,.980774,.981292,.981804,.982309,.982808,.983302,.983789,.984270,.984746,.985216,.985680,.986139,.986593,.987041,.987483,.987921,.988353,.988781,.989203,.989619,.990027,.990429,.990824,.991212,.991594,.991969,.992339,.992702,.993059,.993411,.993756,.994096,.994431,.994760,.995083,.995402,.995715,.996023,.996326,.996619,.996903,.997177,.997442,.997698,.997946,.998185,.998417,.998641,.998858,.999060,.999247,.999422,.999585,.999718,.999827,.999917,.999990,.999999,1.00000,.239662,.356046,.431403,.486295,.528945,.563465,.592201,.616623,.637706,.656135,.672407,.686893,.699881,.711594,.722211,.731879,.740716,.748822,.756281,.763163,.769678,.775861,.781740,.787342,.792688,.797797,.802689,.807379,.811880,.816205,.820367,.824374,.828238,.831966,.835566,.839045,.842411,.845669,.848824,.851883,.854851,.857734,.860534,.863257,.865905,.868481,.870990,.873433,.875814,.878135,.880399,.882607,.884762,.886866,.888921,.890929,.892891,.894809,.896684,.898519,.900315,.902073,.903795,.905483,.907136,.908757,.910346,.911904,.913432,.914931,.916402,.917845,.919262,.920654,.922020,.923362,.924679,.925974,.927247,.928497,.929727,.930937,.932127,.933297,.934450,.935583,.936699,.937798,.938880,.939945,.940994,.942027,.943045,.944047,.945035,.946008,.946967,.947913,.948845,.949763,.950669,.951563,.952444,.953314,.954172,.955019,.955854,.956679,.957493,.958296,.959089,.959872,.960645,.961408,.962162,.962906,.963641,.964367,.965084,.965793,.966493,.967184,.967867,.968542,.969209,.969868,.970520,.971164,.971800,.972429,.973051,.973666,.974274,.974875,.975469,.976057,.976638,.977212,.977780,.978342,.978898,.979447,.979989,.980525,.981055,.981579,.982096,.982608,.983114,.983614,.984109,.984597,.985081,.985559,.986031,.986499,.986961,.987418,.987870,.988317,.988757,.989190,.989616,.990036,.990449,.990856,.991256,.991650,.992038,.992420,.992796,.993167,.993531,.993890,.994244,.994592,.994935,.995273,.995605,.995933,.996250,.996558,.996856,.997145,.997425,.997696,.997959,.998214,.998461,.998701,.998925,.999135,.999332,.999516,.999669,.999796,.999901,.999989,.999999,1.00000]
	# Z=2
	      Z2=[.177512,.266277,.325460,.369851,.405367,.434967,.460341,.482545,.502284,.520051,.536204,.551013,.564683,.577379,.589229,.600340,.610798,.620676,.630036,.638928,.647386,.655449,.663152,.670524,.677593,.684381,.690909,.697197,.703260,.709113,.714770,.720244,.725545,.730683,.735669,.740509,.745213,.749788,.754239,.758574,.762794,.766906,.770914,.774823,.778637,.782362,.785999,.789554,.793029,.796428,.799754,.803009,.806196,.809318,.812377,.815376,.818316,.821199,.824028,.826804,.829528,.832202,.834827,.837405,.839937,.842424,.844869,.847271,.849634,.851957,.854241,.856489,.858700,.860876,.863018,.865127,.867203,.869248,.871262,.873246,.875200,.877126,.879023,.880892,.882735,.884551,.886342,.888108,.889849,.891566,.893260,.894931,.896580,.898207,.899812,.901397,.902961,.904505,.906029,.907534,.909020,.910487,.911936,.913366,.914779,.916175,.917554,.918916,.920262,.921591,.922905,.924204,.925487,.926756,.928010,.929249,.930475,.931686,.932884,.934069,.935240,.936399,.937545,.938678,.939799,.940908,.942006,.943091,.944165,.945228,.946280,.947320,.948350,.949370,.950379,.951377,.952366,.953344,.954313,.955272,.956222,.957163,.958095,.959018,.959932,.960838,.961735,.962624,.963504,.964377,.965241,.966098,.966946,.967787,.968621,.969447,.970266,.971077,.971881,.972678,.973469,.974253,.975031,.975802,.976567,.977326,.978078,.978825,.979565,.980300,.981029,.981752,.982470,.983181,.983888,.984589,.985284,.985974,.986659,.987338,.988013,.988683,.989348,.990008,.990664,.991315,.991962,.992604,.993241,.993875,.994504,.995129,.995751,.996368,.996982,.997592,.998199,.998803,.999403,1.00000,.183561,.275279,.336382,.382178,.418790,.449279,.475395,.498230,.518514,.536758,.553331,.568513,.582518,.595513,.607633,.618989,.629669,.639749,.649291,.658351,.666957,.675150,.682967,.690440,.697594,.704457,.711048,.717387,.723492,.729378,.735060,.740550,.745860,.751001,.755981,.760812,.765499,.770052,.774476,.778779,.782962,.787032,.790993,.794851,.798610,.802275,.805850,.809338,.812743,.816069,.819318,.822494,.825599,.828637,.831608,.834517,.837365,.840154,.842886,.845564,.848188,.850759,.853280,.855752,.858176,.860555,.862889,.865180,.867429,.869637,.871806,.873937,.876030,.878087,.880109,.882097,.884051,.885972,.887863,.889722,.891551,.893350,.895121,.896863,.898578,.900266,.901928,.903564,.905175,.906762,.908326,.909866,.911383,.912878,.914351,.915804,.917235,.918646,.920037,.921409,.922761,.924094,.925409,.926706,.927985,.929246,.930490,.931718,.932929,.934124,.935303,.936467,.937616,.938749,.939868,.940973,.942064,.943140,.944204,.945253,.946290,.947314,.948325,.949323,.950309,.951283,.952245,.953196,.954134,.955062,.955979,.956884,.957779,.958663,.959537,.960401,.961255,.962099,.962933,.963757,.964572,.965378,.966174,.966961,.967740,.968509,.969270,.970023,.970767,.971503,.972230,.972950,.973662,.974365,.975062,.975750,.976432,.977105,.977772,.978432,.979084,.979729,.980368,.981000,.981625,.982243,.982855,.983460,.984059,.984652,.985239,.985819,.986394,.986962,.987525,.988082,.988633,.989179,.989719,.990254,.990783,.991308,.991828,.992342,.992852,.993358,.993858,.994354,.994845,.995332,.995815,.996294,.996769,.997241,.997709,.998173,.998635,.999093,.999548,1.00000,.191908,.287659,.351358,.399030,.437088,.468735,.495804,.519439,.540403,.559231,.576311,.591935,.606326,.619661,.632080,.643699,.654611,.664895,.674617,.683833,.692569,.700869,.708770,.716307,.723507,.730399,.737003,.743342,.749433,.755294,.760939,.766381,.771634,.776708,.781614,.786361,.790958,.795413,.799733,.803926,.807994,.811943,.815780,.819509,.823135,.826664,.830098,.833443,.836701,.839877,.842974,.845995,.848943,.851820,.854630,.857375,.860057,.862678,.865241,.867747,.870199,.872598,.874945,.877243,.879493,.881697,.883856,.885971,.888044,.890076,.892068,.894022,.895938,.897818,.899662,.901472,.903249,.904993,.906705,.908387,.910038,.911661,.913255,.914821,.916360,.917873,.919360,.920822,.922259,.923673,.925063,.926431,.927776,.929100,.930402,.931684,.932945,.934187,.935409,.936612,.937797,.938963,.940111,.941242,.942355,.943452,.944532,.945596,.946644,.947677,.948694,.949697,.950685,.951659,.952618,.953564,.954497,.955416,.956323,.957217,.958097,.958966,.959822,.960665,.961497,.962317,.963126,.963924,.964710,.965486,.966251,.967005,.967749,.968483,.969207,.969922,.970627,.971322,.972008,.972685,.973353,.974011,.974660,.975301,.975932,.976555,.977169,.977775,.978373,.978962,.979544,.980118,.980684,.981243,.981794,.982338,.982874,.983404,.983927,.984443,.984951,.985452,.985945,.986432,.986912,.987384,.987850,.988309,.988762,.989208,.989648,.990082,.990510,.990931,.991347,.991757,.992161,.992559,.992952,.993340,.993722,.994097,.994467,.994832,.995191,.995544,.995892,.996235,.996573,.996905,.997233,.997556,.997875,.998190,.998500,.998807,.999111,.999410,.999707,1.00000,.198342,.297156,.362797,.411850,.450952,.483420,.511150,.535326,.556739,.575942,.593336,.609224,.623837,.637357,.649931,.661676,.672691,.683057,.692842,.702104,.710868,.719180,.727078,.734599,.741772,.748624,.755180,.761461,.767486,.773272,.778835,.784190,.789349,.794324,.799125,.803762,.808245,.812582,.816780,.820847,.824788,.828608,.832314,.835912,.839405,.842800,.846099,.849308,.852430,.855468,.858427,.861309,.864118,.866855,.869525,.872129,.874670,.877150,.879572,.881937,.884247,.886506,.888714,.890873,.892985,.895051,.897072,.899051,.900988,.902885,.904742,.906562,.908345,.910092,.911805,.913484,.915130,.916744,.918327,.919880,.921404,.922899,.924366,.925807,.927221,.928610,.929974,.931313,.932629,.933921,.935191,.936439,.937665,.938870,.940055,.941219,.942365,.943491,.944598,.945687,.946758,.947811,.948847,.949866,.950869,.951856,.952826,.953781,.954722,.955647,.956558,.957454,.958337,.959206,.960061,.960904,.961734,.962551,.963356,.964148,.964929,.965697,.966454,.967199,.967932,.968655,.969366,.970067,.970757,.971437,.972107,.972767,.973417,.974058,.974689,.975311,.975924,.976528,.977124,.977710,.978288,.978857,.979417,.979968,.980511,.981045,.981572,.982090,.982601,.983104,.983599,.984087,.984568,.985041,.985507,.985967,.986420,.986866,.987305,.987738,.988163,.988582,.988993,.989397,.989794,.990184,.990567,.990945,.991315,.991680,.992038,.992390,.992737,.993077,.993412,.993741,.994065,.994383,.994696,.995004,.995305,.995601,.995890,.996174,.996452,.996724,.996991,.997252,.997508,.997759,.998005,.998246,.998481,.998712,.998938,.999159,.999376,.999588,.999796,1.00000,.207202,.310062,.378144,.428840,.469107,.502422,.530774,.555404,.577140,.596563,.614094,.630049,.644672,.658152,.670644,.682271,.693136,.703324,.712907,.721945,.730488,.738581,.746263,.753569,.760530,.767173,.773521,.779596,.785417,.791002,.796365,.801522,.806484,.811264,.815872,.820318,.824612,.828760,.832772,.836654,.840412,.844053,.847583,.851006,.854328,.857553,.860685,.863729,.866689,.869567,.872367,.875093,.877747,.880332,.882851,.885306,.887700,.890035,.892312,.894535,.896705,.898823,.900892,.902913,.904888,.906818,.908705,.910550,.912354,.914119,.915845,.917535,.919189,.920808,.922393,.923945,.925466,.926956,.928415,.929845,.931247,.932621,.933968,.935289,.936584,.937854,.939100,.940322,.941521,.942698,.943853,.944986,.946099,.947191,.948264,.949317,.950351,.951367,.952365,.953345,.954308,.955255,.956184,.957098,.957996,.958879,.959746,.960599,.961438,.962262,.963073,.963870,.964654,.965425,.966184,.966930,.967664,.968386,.969097,.969796,.970484,.971160,.971826,.972480,.973124,.973758,.974381,.974995,.975598,.976192,.976777,.977352,.977919,.978476,.979025,.979565,.980097,.980621,.981136,.981644,.982143,.982634,.983117,.983592,.984059,.984518,.984970,.985415,.985852,.986282,.986706,.987122,.987532,.987935,.988332,.988722,.989106,.989485,.989857,.990223,.990582,.990934,.991279,.991618,.991949,.992275,.992594,.992906,.993213,.993514,.993809,.994098,.994382,.994661,.994934,.995201,.995464,.995722,.995975,.996223,.996464,.996700,.996929,.997153,.997372,.997584,.997792,.997994,.998191,.998383,.998570,.998750,.998926,.999096,.999260,.999419,.999572,.999720,.999863,1.00000,.215504,.322215,.392669,.444999,.486458,.520675,.549719,.574888,.597044,.616792,.634571,.650711,.665466,.679035,.691576,.703221,.714074,.724226,.733750,.742711,.751162,.759150,.766717,.773898,.780725,.787226,.793425,.799345,.805005,.810423,.815615,.820596,.825379,.829977,.834400,.838658,.842761,.846717,.850534,.854219,.857782,.861227,.864561,.867790,.870917,.873949,.876888,.879740,.882508,.885195,.887805,.890342,.892807,.895205,.897537,.899807,.902016,.904167,.906262,.908303,.910293,.912232,.914124,.915970,.917771,.919528,.921244,.922919,.924555,.926154,.927715,.929241,.930733,.932191,.933617,.935011,.936375,.937709,.939015,.940292,.941543,.942768,.943968,.945143,.946294,.947422,.948527,.949611,.950673,.951714,.952735,.953736,.954717,.955680,.956624,.957551,.958460,.959351,.960227,.961086,.961929,.962756,.963569,.964366,.965149,.965919,.966674,.967416,.968144,.968860,.969563,.970254,.970932,.971599,.972255,.972899,.973532,.974154,.974766,.975367,.975958,.976538,.977108,.977669,.978220,.978761,.979293,.979816,.980330,.980835,.981332,.981820,.982300,.982772,.983237,.983693,.984142,.984584,.985018,.985445,.985864,.986276,.986680,.987077,.987466,.987849,.988224,.988593,.988955,.989311,.989660,.990003,.990340,.990671,.990996,.991315,.991629,.991937,.992240,.992537,.992828,.993112,.993391,.993663,.993930,.994190,.994445,.994695,.994939,.995178,.995411,.995640,.995864,.996083,.996297,.996507,.996712,.996913,.997110,.997302,.997489,.997670,.997845,.998015,.998179,.998338,.998493,.998643,.998788,.998929,.999063,.999192,.999314,.999432,.999543,.999646,.999744,.999836,.999921,1.00000,.223691,.334125,.406820,.460653,.503176,.538165,.567777,.593361,.615816,.635770,.653681,.669893,.684669,.698216,.710701,.722257,.732997,.743012,.752381,.761168,.769440,.777245,.784623,.791611,.798242,.804544,.810542,.816258,.821713,.826925,.831911,.836684,.841259,.845648,.849861,.853910,.857804,.861552,.865161,.868638,.871996,.875239,.878374,.881406,.884340,.887180,.889930,.892595,.895179,.897684,.900115,.902474,.904765,.906990,.909151,.911252,.913295,.915281,.917214,.919094,.920925,.922708,.924446,.926139,.927789,.929398,.930967,.932497,.933990,.935447,.936869,.938258,.939613,.940937,.942229,.943493,.944727,.945933,.947112,.948264,.949391,.950495,.951574,.952631,.953665,.954677,.955669,.956640,.957591,.958522,.959435,.960329,.961205,.962063,.962904,.963729,.964538,.965330,.966108,.966870,.967617,.968350,.969068,.969773,.970464,.971142,.971807,.972459,.973099,.973727,.974343,.974948,.975541,.976124,.976695,.977257,.977808,.978349,.978880,.979401,.979913,.980416,.980909,.981393,.981869,.982335,.982794,.983244,.983686,.984120,.984546,.984965,.985376,.985780,.986177,.986567,.986950,.987326,.987696,.988060,.988416,.988765,.989108,.989444,.989774,.990097,.990414,.990725,.991030,.991330,.991623,.991912,.992194,.992472,.992744,.993011,.993273,.993530,.993783,.994030,.994272,.994509,.994740,.994965,.995185,.995400,.995611,.995816,.996016,.996212,.996404,.996591,.996774,.996952,.997127,.997297,.997464,.997627,.997786,.997942,.998092,.998237,.998377,.998512,.998642,.998768,.998889,.999007,.999120,.999230,.999333,.999431,.999524,.999612,.999692,.999766,.999834,.999896,.999951,1.00000,.234197,.349330,.424796,.480446,.524219,.560084,.590309,.616312,.639038,.659148,.677123,.693323,.708026,.721450,.733769,.745123,.755631,.765388,.774476,.782965,.790941,.798450,.805536,.812235,.818578,.824595,.830311,.835748,.840926,.845864,.850578,.855082,.859391,.863517,.867470,.871262,.874901,.878396,.881756,.884987,.888102,.891105,.894004,.896803,.899507,.902120,.904647,.907091,.909457,.911747,.913966,.916116,.918200,.920220,.922181,.924083,.925929,.927721,.929462,.931154,.932799,.934399,.935955,.937471,.938946,.940382,.941780,.943143,.944471,.945764,.947026,.948255,.949454,.950624,.951764,.952877,.953964,.955024,.956059,.957069,.958056,.959021,.959964,.960886,.961788,.962669,.963531,.964374,.965199,.966007,.966796,.967569,.968326,.969066,.969791,.970501,.971196,.971876,.972543,.973195,.973834,.974460,.975072,.975672,.976259,.976834,.977397,.977948,.978489,.979018,.979536,.980044,.980542,.981030,.981508,.981976,.982436,.982886,.983327,.983760,.984183,.984599,.985005,.985404,.985795,.986177,.986553,.986920,.987281,.987634,.987981,.988320,.988653,.988980,.989300,.989614,.989921,.990223,.990519,.990810,.991094,.991373,.991645,.991913,.992174,.992431,.992682,.992928,.993170,.993406,.993637,.993864,.994087,.994305,.994518,.994727,.994933,.995134,.995331,.995524,.995712,.995896,.996075,.996250,.996421,.996587,.996749,.996907,.997061,.997212,.997359,.997502,.997642,.997778,.997911,.998041,.998167,.998291,.998411,.998529,.998642,.998751,.998855,.998956,.999053,.999146,.999235,.999321,.999404,.999483,.999558,.999628,.999693,.999754,.999809,.999858,.999901,.999941,.999973,1.00000,.248882,.370451,.449626,.507637,.552975,.589884,.620791,.647210,.670152,.690322,.708236,.724279,.738745,.751868,.763834,.774792,.784868,.794165,.802769,.810755,.818236,.825262,.831873,.838106,.843993,.849561,.854836,.859841,.864594,.869115,.873418,.877520,.881432,.885168,.888739,.892154,.895423,.898554,.901555,.904434,.907203,.909868,.912434,.914907,.917290,.919589,.921807,.923948,.926016,.928014,.929945,.931812,.933618,.935366,.937058,.938696,.940282,.941820,.943310,.944754,.946157,.947521,.948846,.950134,.951387,.952605,.953791,.954945,.956067,.957161,.958225,.959262,.960271,.961255,.962214,.963148,.964059,.964947,.965813,.966657,.967481,.968285,.969070,.969836,.970584,.971314,.972026,.972723,.973402,.974067,.974716,.975350,.975969,.976575,.977167,.977745,.978311,.978864,.979405,.979934,.980451,.980956,.981450,.981932,.982404,.982865,.983316,.983757,.984188,.984610,.985022,.985426,.985821,.986207,.986584,.986954,.987316,.987670,.988016,.988355,.988686,.989009,.989325,.989634,.989935,.990230,.990518,.990799,.991074,.991342,.991605,.991861,.992112,.992357,.992597,.992831,.993060,.993284,.993503,.993717,.993925,.994129,.994328,.994523,.994712,.994898,.995079,.995255,.995428,.995596,.995761,.995921,.996078,.996231,.996381,.996527,.996670,.996809,.996946,.997079,.997208,.997334,.997456,.997575,.997691,.997804,.997913,.998020,.998124,.998225,.998323,.998418,.998511,.998601,.998689,.998775,.998858,.998939,.999018,.999094,.999168,.999238,.999306,.999370,.999432,.999492,.999548,.999603,.999655,.999705,.999752,.999794,.999834,.999871,.999902,.999930,.999953,.999973,.999989,1.00000,.255686,.380145,.460923,.519903,.565838,.603104,.634202,.660692,.683615,.703701,.721477,.737341,.751597,.764484,.776194,.786881,.796674,.805678,.813982,.821662,.828848,.835587,.841920,.847882,.853505,.858817,.863843,.868604,.873120,.877409,.881486,.885367,.889064,.892590,.895954,.899168,.902240,.905178,.907991,.910685,.913278,.915773,.918177,.920494,.922728,.924884,.926964,.928973,.930914,.932789,.934603,.936357,.938054,.939697,.941288,.942828,.944321,.945768,.947170,.948531,.949852,.951136,.952383,.953596,.954776,.955923,.957040,.958126,.959183,.960212,.961214,.962190,.963140,.964066,.964968,.965848,.966705,.967541,.968356,.969151,.969926,.970682,.971420,.972140,.972843,.973529,.974199,.974853,.975491,.976115,.976724,.977319,.977900,.978468,.979024,.979566,.980096,.980615,.981121,.981617,.982101,.982574,.983036,.983488,.983930,.984361,.984783,.985196,.985599,.985994,.986380,.986757,.987126,.987487,.987840,.988186,.988524,.988854,.989178,.989495,.989804,.990106,.990401,.990689,.990970,.991245,.991513,.991776,.992032,.992282,.992527,.992766,.992999,.993227,.993450,.993668,.993881,.994089,.994293,.994492,.994685,.994874,.995057,.995236,.995410,.995579,.995744,.995904,.996061,.996213,.996361,.996506,.996646,.996783,.996917,.997047,.997173,.997296,.997417,.997534,.997647,.997757,.997864,.997968,.998069,.998166,.998261,.998353,.998442,.998529,.998613,.998695,.998774,.998851,.998925,.998998,.999068,.999136,.999202,.999267,.999328,.999387,.999443,.999497,.999548,.999597,.999644,.999689,.999732,.999773,.999811,.999845,.999877,.999906,.999931,.999951,.999969,.999983,.999993,1.00000,.256518,.381206,.462017,.520937,.566761,.603884,.634818,.661132,.683870,.703765,.721348,.737016,.751077,.763770,.775286,.785783,.795386,.804204,.812325,.819825,.826850,.833446,.839650,.845498,.851020,.856242,.861187,.865877,.870331,.874565,.878595,.882435,.886097,.889593,.892933,.896126,.899182,.902109,.904914,.907603,.910193,.912690,.915097,.917419,.919661,.921826,.923918,.925940,.927896,.929788,.931620,.933393,.935111,.936775,.938388,.939952,.941469,.942941,.944370,.945756,.947105,.948416,.949691,.950932,.952140,.953316,.954461,.955576,.956662,.957720,.958751,.959756,.960736,.961692,.962623,.963532,.964419,.965284,.966129,.966953,.967758,.968544,.969312,.970061,.970794,.971509,.972209,.972892,.973560,.974214,.974852,.975476,.976087,.976684,.977269,.977840,.978399,.978946,.979482,.980006,.980518,.981019,.981510,.981990,.982459,.982919,.983368,.983809,.984239,.984661,.985074,.985478,.985874,.986261,.986641,.987013,.987377,.987733,.988083,.988425,.988760,.989087,.989407,.989720,.990026,.990326,.990619,.990906,.991186,.991461,.991729,.991992,.992249,.992501,.992748,.992989,.993225,.993456,.993682,.993903,.994119,.994330,.994535,.994734,.994929,.995119,.995304,.995484,.995659,.995831,.995998,.996160,.996319,.996474,.996625,.996772,.996915,.997055,.997192,.997325,.997454,.997578,.997698,.997815,.997928,.998037,.998142,.998244,.998343,.998438,.998531,.998620,.998707,.998791,.998872,.998950,.999026,.999100,.999171,.999240,.999305,.999368,.999427,.999484,.999539,.999590,.999640,.999687,.999732,.999774,.999813,.999849,.999882,.999911,.999936,.999956,.999973,.999987,.999995,1.00000,.254535,.378274,.458480,.516966,.562457,.599316,.630033,.656165,.678750,.698513,.715980,.731549,.745521,.758135,.769582,.780017,.789565,.798332,.806408,.813867,.820864,.827442,.833640,.839489,.845020,.850258,.855225,.859943,.864430,.868702,.872773,.876658,.880368,.883915,.887309,.890558,.893672,.896659,.899525,.902277,.904930,.907488,.909958,.912343,.914647,.916874,.919028,.921112,.923129,.925082,.926974,.928807,.930585,.932309,.933981,.935604,.937179,.938709,.940195,.941639,.943044,.944411,.945742,.947038,.948301,.949531,.950730,.951898,.953037,.954148,.955231,.956288,.957319,.958325,.959307,.960266,.961202,.962116,.963009,.963881,.964733,.965566,.966380,.967176,.967955,.968716,.969460,.970188,.970900,.971597,.972279,.972947,.973600,.974239,.974865,.975478,.976078,.976666,.977241,.977805,.978357,.978897,.979426,.979944,.980452,.980949,.981436,.981913,.982381,.982838,.983287,.983727,.984158,.984581,.984995,.985401,.985799,.986189,.986571,.986946,.987314,.987673,.988025,.988370,.988707,.989038,.989361,.989678,.989989,.990293,.990591,.990882,.991168,.991448,.991723,.991991,.992255,.992513,.992766,.993014,.993256,.993492,.993723,.993948,.994168,.994383,.994592,.994797,.994997,.995193,.995384,.995570,.995752,.995930,.996104,.996273,.996439,.996601,.996760,.996914,.997064,.997209,.997349,.997484,.997616,.997743,.997865,.997984,.998099,.998211,.998318,.998423,.998524,.998621,.998716,.998808,.998896,.998982,.999065,.999145,.999222,.999294,.999363,.999428,.999490,.999548,.999604,.999657,.999707,.999755,.999798,.999837,.999873,.999905,.999932,.999954,.999972,.999987,.999995,1.00000,.252791,.375687,.455349,.513442,.558629,.595243,.625757,.651717,.674155,.693789,.711144,.726613,.740496,.753031,.764406,.774775,.784264,.792978,.801004,.808418,.815383,.821939,.828125,.833972,.839508,.844758,.849745,.854487,.859003,.863309,.867419,.871347,.875102,.878698,.882143,.885446,.888616,.891661,.894586,.897400,.900114,.902734,.905264,.907709,.910073,.912360,.914573,.916716,.918791,.920802,.922752,.924643,.926477,.928257,.929985,.931664,.933294,.934878,.936419,.937916,.939374,.940794,.942177,.943524,.944837,.946118,.947366,.948583,.949770,.950929,.952059,.953163,.954240,.955292,.956319,.957323,.958303,.959261,.960197,.961112,.962006,.962881,.963736,.964573,.965392,.966193,.966977,.967744,.968495,.969231,.969951,.970656,.971346,.972022,.972684,.973333,.973969,.974592,.975202,.975801,.976387,.976961,.977524,.978075,.978616,.979146,.979665,.980175,.980674,.981163,.981643,.982114,.982576,.983029,.983473,.983909,.984337,.984756,.985168,.985572,.985968,.986355,.986736,.987108,.987473,.987831,.988182,.988526,.988863,.989194,.989518,.989836,.990147,.990453,.990753,.991047,.991335,.991618,.991895,.992167,.992433,.992693,.992948,.993196,.993439,.993677,.993910,.994137,.994359,.994576,.994789,.994997,.995200,.995399,.995594,.995784,.995970,.996153,.996331,.996505,.996674,.996838,.996996,.997149,.997298,.997442,.997581,.997716,.997847,.997974,.998097,.998216,.998331,.998442,.998551,.998655,.998757,.998855,.998951,.999043,.999131,.999213,.999291,.999365,.999435,.999501,.999563,.999622,.999678,.999731,.999779,.999822,.999862,.999897,.999927,.999951,.999971,.999987,.999996,1.00000,.251190,.373325,.452505,.510255,.555181,.591589,.621936,.647758,.670079,.689614,.706884,.722279,.736098,.748576,.759902,.770227,.779678,.788357,.796353,.803740,.810687,.817233,.823416,.829266,.834811,.840075,.845080,.849845,.854387,.858723,.862866,.866828,.870622,.874257,.877744,.881091,.884306,.887397,.890371,.893234,.895997,.898666,.901245,.903739,.906152,.908487,.910748,.912939,.915062,.917121,.919118,.921056,.922937,.924764,.926539,.928263,.929939,.931569,.933154,.934697,.936199,.937662,.939089,.940479,.941835,.943157,.944447,.945705,.946933,.948132,.949302,.950445,.951561,.952651,.953717,.954758,.955775,.956770,.957743,.958694,.959624,.960534,.961425,.962297,.963150,.963985,.964803,.965603,.966387,.967156,.967908,.968645,.969367,.970075,.970768,.971448,.972114,.972767,.973408,.974036,.974652,.975255,.975847,.976427,.976996,.977554,.978102,.978639,.979165,.979682,.980189,.980687,.981175,.981655,.982125,.982587,.983040,.983485,.983922,.984350,.984771,.985184,.985588,.985985,.986374,.986756,.987130,.987497,.987858,.988211,.988558,.988899,.989233,.989561,.989883,.990199,.990509,.990813,.991112,.991405,.991692,.991973,.992248,.992517,.992780,.993038,.993290,.993537,.993779,.994016,.994247,.994474,.994696,.994914,.995127,.995335,.995539,.995739,.995935,.996127,.996313,.996493,.996668,.996837,.997001,.997160,.997315,.997464,.997610,.997750,.997887,.998019,.998148,.998272,.998393,.998510,.998623,.998734,.998841,.998944,.999042,.999134,.999221,.999303,.999381,.999454,.999522,.999587,.999648,.999706,.999759,.999806,.999850,.999889,.999921,.999947,.999969,.999987,.999996,1.00000,.249697,.371133,.449879,.507323,.552023,.588255,.618462,.644171,.666399,.685857,.703063,.718404,.732178,.744619,.755913,.766211,.775639,.784300,.792281,.799655,.806595,.813141,.819328,.825186,.830744,.836024,.841048,.845836,.850403,.854765,.858937,.862931,.866757,.870427,.873949,.877333,.880586,.883717,.886730,.889634,.892438,.895147,.897767,.900301,.902754,.905129,.907431,.909661,.911824,.913922,.915958,.917935,.919855,.921720,.923533,.925296,.927010,.928677,.930300,.931879,.933418,.934918,.936381,.937807,.939198,.940555,.941880,.943173,.944435,.945667,.946871,.948047,.949197,.950320,.951417,.952490,.953540,.954566,.955570,.956551,.957512,.958453,.959374,.960275,.961158,.962022,.962869,.963699,.964511,.965308,.966088,.966853,.967602,.968337,.969058,.969765,.970457,.971137,.971803,.972457,.973099,.973728,.974345,.974950,.975544,.976127,.976699,.977260,.977811,.978352,.978882,.979404,.979915,.980418,.980911,.981396,.981871,.982339,.982798,.983249,.983691,.984126,.984552,.984970,.985380,.985783,.986178,.986566,.986948,.987322,.987689,.988049,.988404,.988751,.989093,.989428,.989757,.990081,.990399,.990711,.991016,.991316,.991609,.991896,.992177,.992453,.992723,.992987,.993246,.993500,.993749,.993992,.994231,.994465,.994694,.994919,.995139,.995355,.995566,.995773,.995974,.996169,.996359,.996542,.996721,.996894,.997062,.997225,.997383,.997536,.997685,.997830,.997970,.998107,.998239,.998367,.998492,.998613,.998731,.998845,.998952,.999054,.999149,.999239,.999324,.999404,.999480,.999551,.999618,.999681,.999739,.999790,.999837,.999880,.999915,.999944,.999967,.999987,.999996,1.00000,.247214,.367493,.445519,.502463,.546791,.582737,.612718,.638245,.660324,.679661,.696766,.712024,.725728,.738112,.749358,.759617,.769013,.777648,.785609,.792967,.799900,.806447,.812642,.818515,.824093,.829398,.834452,.839273,.843878,.848282,.852498,.856538,.860414,.864135,.867711,.871151,.874461,.877650,.880724,.883689,.886554,.889326,.892007,.894604,.897119,.899556,.901919,.904212,.906437,.908597,.910695,.912734,.914715,.916642,.918516,.920340,.922114,.923842,.925525,.927165,.928763,.930322,.931843,.933327,.934776,.936190,.937571,.938919,.940237,.941524,.942783,.944012,.945215,.946391,.947541,.948666,.949766,.950844,.951898,.952930,.953940,.954930,.955900,.956850,.957781,.958693,.959587,.960464,.961323,.962165,.962992,.963802,.964597,.965377,.966142,.966892,.967629,.968352,.969062,.969758,.970442,.971113,.971772,.972419,.973054,.973678,.974290,.974892,.975483,.976064,.976634,.977194,.977745,.978286,.978818,.979340,.979854,.980359,.980855,.981343,.981822,.982293,.982755,.983209,.983655,.984094,.984524,.984947,.985363,.985771,.986173,.986567,.986955,.987336,.987711,.988079,.988441,.988797,.989146,.989490,.989828,.990158,.990483,.990801,.991112,.991418,.991718,.992012,.992301,.992584,.992861,.993134,.993401,.993663,.993920,.994172,.994420,.994663,.994901,.995135,.995362,.995583,.995798,.996006,.996209,.996406,.996598,.996784,.996965,.997141,.997312,.997479,.997640,.997798,.997951,.998099,.998244,.998384,.998521,.998654,.998779,.998898,.999009,.999115,.999214,.999308,.999396,.999480,.999558,.999632,.999699,.999760,.999814,.999863,.999903,.999936,.999964,.999986,.999996,1.00000,.244999,.364258,.441661,.498179,.542197,.577908,.607708,.633094,.655062,.674310,.691346,.706549,.720212,.732563,.743785,.754029,.763414,.772044,.780003,.787364,.794306,.800867,.807080,.812976,.818580,.823915,.829002,.833859,.838502,.842946,.847204,.851289,.855210,.858979,.862604,.866093,.869455,.872695,.875822,.878840,.881759,.884583,.887317,.889965,.892532,.895021,.897435,.899779,.902054,.904264,.906412,.908500,.910530,.912506,.914428,.916299,.918122,.919897,.921626,.923312,.924957,.926561,.928128,.929656,.931149,.932607,.934032,.935424,.936784,.938114,.939414,.940686,.941930,.943147,.944337,.945503,.946643,.947760,.948854,.949925,.950974,.952002,.953010,.953997,.954966,.955915,.956846,.957760,.958655,.959534,.960396,.961242,.962072,.962887,.963687,.964472,.965243,.966000,.966743,.967473,.968190,.968895,.969586,.970266,.970934,.971590,.972235,.972869,.973492,.974104,.974706,.975297,.975879,.976451,.977014,.977567,.978111,.978646,.979173,.979690,.980199,.980700,.981192,.981675,.982150,.982618,.983078,.983530,.983974,.984411,.984841,.985264,.985680,.986089,.986492,.986888,.987278,.987661,.988039,.988410,.988774,.989132,.989483,.989828,.990166,.990499,.990825,.991145,.991460,.991768,.992072,.992369,.992662,.992949,.993231,.993508,.993780,.994047,.994310,.994568,.994819,.995063,.995300,.995531,.995755,.995974,.996187,.996393,.996595,.996790,.996981,.997166,.997347,.997522,.997693,.997859,.998021,.998178,.998332,.998481,.998622,.998755,.998880,.998999,.999111,.999217,.999317,.999411,.999500,.999584,.999660,.999728,.999789,.999844,.999890,.999928,.999960,.999986,.999996,1.00000,.241648,.359334,.435754,.491580,.535081,.570391,.599871,.624995,.646748,.665818,.682703,.697780,.711335,.723595,.734741,.744919,.754249,.762832,.770753,.778081,.785001,.791550,.797760,.803660,.809276,.814629,.819740,.824626,.829303,.833785,.838086,.842216,.846187,.850008,.853687,.857234,.860656,.863959,.867149,.870233,.873219,.876111,.878914,.881632,.884270,.886830,.889316,.891732,.894081,.896364,.898586,.900748,.902854,.904904,.906901,.908848,.910746,.912596,.914402,.916163,.917883,.919563,.921205,.922808,.924376,.925908,.927407,.928873,.930307,.931710,.933083,.934428,.935744,.937033,.938295,.939532,.940744,.941931,.943095,.944236,.945355,.946453,.947530,.948586,.949623,.950640,.951639,.952620,.953582,.954528,.955456,.956368,.957264,.958144,.959009,.959858,.960693,.961514,.962321,.963114,.963893,.964660,.965414,.966155,.966884,.967602,.968307,.969001,.969684,.970356,.971017,.971667,.972308,.972938,.973558,.974169,.974770,.975362,.975944,.976518,.977083,.977639,.978186,.978724,.979254,.979776,.980289,.980795,.981293,.981783,.982266,.982741,.983209,.983670,.984124,.984571,.985012,.985446,.985873,.986295,.986709,.987116,.987516,.987909,.988296,.988676,.989050,.989418,.989780,.990135,.990485,.990829,.991167,.991500,.991828,.992150,.992466,.992778,.993084,.993386,.993680,.993967,.994247,.994519,.994785,.995045,.995298,.995545,.995786,.996020,.996249,.996473,.996691,.996904,.997111,.997314,.997511,.997704,.997892,.998076,.998250,.998415,.998572,.998720,.998861,.998995,.999122,.999243,.999357,.999466,.999563,.999652,.999731,.999803,.999862,.999911,.999952,.999985,.999996,1.00000,.239436,.356081,.431849,.487217,.530374,.565415,.594680,.619629,.641237,.660185,.676969,.691959,.705441,.717638,.728730,.738862,.748154,.756703,.764595,.771900,.778803,.785341,.791545,.797444,.803063,.808423,.813545,.818445,.823139,.827641,.831963,.836118,.840116,.843965,.847675,.851254,.854709,.858047,.861273,.864395,.867419,.870350,.873192,.875951,.878630,.881231,.883760,.886218,.888609,.890936,.893202,.895408,.897557,.899652,.901694,.903686,.905628,.907524,.909375,.911182,.912948,.914673,.916360,.918010,.919623,.921202,.922746,.924258,.925738,.927187,.928606,.929996,.931358,.932693,.934001,.935284,.936541,.937774,.938983,.940169,.941334,.942476,.943598,.944699,.945780,.946842,.947885,.948910,.949916,.950905,.951877,.952832,.953771,.954694,.955602,.956494,.957372,.958235,.959083,.959918,.960740,.961548,.962344,.963126,.963897,.964655,.965402,.966137,.966860,.967573,.968275,.968966,.969646,.970317,.970977,.971628,.972269,.972900,.973522,.974136,.974739,.975334,.975920,.976497,.977066,.977626,.978178,.978721,.979257,.979785,.980305,.980818,.981323,.981821,.982312,.982796,.983273,.983743,.984207,.984664,.985114,.985557,.985993,.986421,.986843,.987259,.987668,.988070,.988466,.988857,.989241,.989619,.989991,.990357,.990718,.991074,.991424,.991768,.992108,.992442,.992768,.993087,.993399,.993704,.994001,.994292,.994576,.994853,.995125,.995390,.995649,.995902,.996149,.996391,.996627,.996858,.997084,.997305,.997521,.997731,.997932,.998123,.998305,.998479,.998644,.998801,.998951,.999094,.999229,.999359,.999476,.999582,.999678,.999766,.999837,.999896,.999945,.999984,.999996,1.00000,.236764,.352139,.427103,.481898,.524621,.559319,.588305,.613024,.634438,.653222,.669864,.684732,.698108,.710212,.721223,.731284,.740513,.749007,.756850,.764112,.770979,.777490,.783674,.789559,.795169,.800527,.805650,.810556,.815260,.819775,.824115,.828290,.832310,.836185,.839923,.843532,.847019,.850391,.853654,.856813,.859875,.862846,.865730,.868531,.871253,.873899,.876472,.878976,.881414,.883788,.886101,.888355,.890553,.892697,.894789,.896830,.898824,.900771,.902672,.904531,.906348,.908126,.909865,.911567,.913234,.914865,.916463,.918028,.919561,.921064,.922537,.923981,.925397,.926785,.928148,.929484,.930795,.932082,.933346,.934586,.935805,.937001,.938177,.939333,.940469,.941585,.942682,.943761,.944822,.945866,.946892,.947902,.948895,.949873,.950834,.951781,.952713,.953630,.954532,.955421,.956297,.957159,.958008,.958844,.959668,.960480,.961280,.962068,.962845,.963611,.964366,.965109,.965843,.966566,.967279,.967982,.968675,.969358,.970033,.970698,.971353,.972000,.972637,.973266,.973886,.974497,.975100,.975695,.976282,.976861,.977432,.977996,.978552,.979100,.979642,.980176,.980704,.981224,.981738,.982245,.982744,.983237,.983722,.984200,.984671,.985136,.985594,.986045,.986490,.986929,.987361,.987788,.988208,.988622,.989031,.989434,.989832,.990223,.990610,.990991,.991364,.991730,.992088,.992439,.992782,.993119,.993448,.993771,.994087,.994397,.994701,.994998,.995290,.995575,.995855,.996129,.996397,.996661,.996918,.997171,.997413,.997645,.997867,.998079,.998282,.998477,.998663,.998842,.999013,.999176,.999326,.999463,.999588,.999702,.999795,.999871,.999933,.999983,.999996,1.00000,.235024,.349575,.424019,.478446,.520890,.555370,.584179,.608752,.630045,.648726,.665280,.680073,.693384,.705433,.716395,.726413,.735604,.744067,.751881,.759118,.765966,.772461,.778633,.784510,.790115,.795470,.800593,.805502,.810211,.814733,.819081,.823266,.827299,.831187,.834940,.838565,.842070,.845460,.848742,.851921,.855005,.857998,.860904,.863728,.866473,.869143,.871742,.874271,.876734,.879134,.881474,.883755,.885980,.888151,.890271,.892340,.894362,.896337,.898267,.900155,.902001,.903808,.905577,.907309,.909005,.910666,.912294,.913889,.915453,.916986,.918489,.919964,.921411,.922830,.924223,.925590,.926933,.928251,.929545,.930817,.932066,.933294,.934502,.935689,.936856,.938005,.939134,.940245,.941339,.942414,.943473,.944515,.945541,.946551,.947545,.948525,.949489,.950439,.951374,.952296,.953204,.954099,.954982,.955851,.956708,.957553,.958386,.959208,.960018,.960817,.961605,.962382,.963149,.963905,.964652,.965388,.966114,.966831,.967539,.968237,.968926,.969606,.970277,.970939,.971593,.972238,.972875,.973503,.974124,.974736,.975341,.975939,.976528,.977111,.977686,.978254,.978815,.979369,.979916,.980457,.980991,.981517,.982036,.982548,.983053,.983552,.984043,.984529,.985008,.985480,.985947,.986407,.986862,.987310,.987753,.988190,.988621,.989047,.989467,.989882,.990289,.990688,.991080,.991464,.991841,.992211,.992574,.992930,.993279,.993622,.993958,.994288,.994612,.994929,.995241,.995547,.995847,.996142,.996431,.996715,.996988,.997251,.997503,.997745,.997978,.998203,.998418,.998625,.998824,.999016,.999192,.999355,.999504,.999642,.999755,.999846,.999921,.999982,.999996,1.00000,.233580,.347459,.421485,.475620,.517849,.552162,.580840,.605307,.626514,.645124,.661621,.676366,.689637,.701653,.712588,.722585,.731758,.740206,.748010,.755239,.762082,.768573,.774744,.780622,.786230,.791590,.796719,.801635,.806352,.810884,.815243,.819440,.823485,.827387,.831154,.834794,.838314,.841721,.845019,.848216,.851317,.854328,.857253,.860095,.862859,.865548,.868166,.870714,.873197,.875617,.877976,.880277,.882523,.884714,.886854,.888944,.890986,.892982,.894933,.896842,.898709,.900537,.902327,.904081,.905799,.907482,.909132,.910749,.912335,.913891,.915417,.916914,.918384,.919826,.921242,.922633,.923998,.925339,.926657,.927952,.929224,.930476,.931707,.932917,.934108,.935280,.936433,.937567,.938684,.939783,.940865,.941931,.942980,.944013,.945031,.946034,.947021,.947995,.948954,.949898,.950830,.951749,.952654,.953547,.954428,.955297,.956154,.957000,.957834,.958657,.959469,.960270,.961061,.961841,.962612,.963372,.964123,.964864,.965596,.966319,.967032,.967737,.968432,.969119,.969797,.970467,.971129,.971782,.972428,.973065,.973695,.974317,.974932,.975539,.976140,.976733,.977319,.977898,.978470,.979036,.979595,.980146,.980691,.981228,.981759,.982283,.982801,.983312,.983817,.984316,.984808,.985295,.985775,.986250,.986719,.987182,.987639,.988092,.988538,.988980,.989413,.989839,.990257,.990667,.991071,.991467,.991856,.992238,.992614,.992983,.993345,.993701,.994051,.994395,.994732,.995064,.995390,.995710,.996025,.996335,.996633,.996920,.997197,.997464,.997722,.997970,.998209,.998439,.998662,.998876,.999074,.999258,.999428,.999586,.999716,.999822,.999909,.999981,.999997,1.00000,.232314,.345607,.419274,.473162,.515209,.549384,.577956,.602339,.623479,.642035,.658489,.673200,.686444,.698439,.709359,.719344,.728509,.736952,.744753,.751982,.758826,.765320,.771495,.777378,.782993,.788359,.793497,.798422,.803148,.807691,.812061,.816269,.820326,.824240,.828020,.831674,.835207,.838628,.841941,.845152,.848269,.851295,.854235,.857093,.859873,.862579,.865213,.867778,.870278,.872715,.875092,.877410,.879673,.881883,.884040,.886148,.888209,.890223,.892192,.894119,.896005,.897851,.899660,.901432,.903168,.904870,.906538,.908174,.909779,.911353,.912898,.914413,.915901,.917362,.918797,.920206,.921589,.922949,.924285,.925598,.926890,.928160,.929409,.930638,.931848,.933038,.934210,.935363,.936499,.937617,.938718,.939803,.940871,.941923,.942960,.943981,.944988,.945980,.946958,.947922,.948873,.949811,.950736,.951648,.952548,.953436,.954313,.955177,.956031,.956873,.957705,.958525,.959336,.960136,.960926,.961706,.962476,.963237,.963988,.964730,.965463,.966187,.966902,.967609,.968307,.968997,.969679,.970352,.971018,.971676,.972326,.972968,.973604,.974231,.974852,.975466,.976073,.976672,.977266,.977852,.978432,.979004,.979569,.980128,.980680,.981225,.981763,.982296,.982822,.983341,.983855,.984363,.984864,.985360,.985850,.986335,.986814,.987287,.987755,.988218,.988672,.989120,.989559,.989991,.990416,.990834,.991245,.991648,.992046,.992436,.992820,.993198,.993569,.993934,.994294,.994647,.994995,.995337,.995673,.996004,.996323,.996632,.996930,.997218,.997496,.997764,.998024,.998274,.998517,.998750,.998968,.999171,.999359,.999534,.999679,.999799,.999898,.999980,.999997,1.00000,.230306,.342680,.415788,.469295,.511068,.545039,.573453,.597716,.618763,.637247,.653646,.668315,.681529,.693503,.704409,.714387,.723551,.731997,.739805,.747044,.753900,.760407,.766597,.772496,.778127,.783511,.788667,.793612,.798359,.802922,.807313,.811543,.815622,.819560,.823363,.827040,.830597,.834042,.837380,.840615,.843757,.846808,.849773,.852656,.855462,.858192,.860851,.863442,.865967,.868429,.870831,.873174,.875462,.877697,.879880,.882013,.884098,.886137,.888132,.890083,.891994,.893866,.895700,.897497,.899258,.900986,.902680,.904341,.905971,.907571,.909141,.910683,.912197,.913683,.915143,.916578,.917988,.919373,.920735,.922074,.923391,.924687,.925962,.927218,.928453,.929670,.930868,.932047,.933209,.934353,.935481,.936591,.937686,.938764,.939827,.940875,.941908,.942927,.943931,.944921,.945898,.946862,.947814,.948753,.949680,.950595,.951498,.952390,.953270,.954140,.954999,.955847,.956684,.957512,.958329,.959137,.959935,.960723,.961502,.962272,.963033,.963785,.964528,.965263,.965990,.966708,.967419,.968121,.968816,.969503,.970182,.970854,.971519,.972176,.972827,.973470,.974107,.974737,.975360,.975977,.976586,.977189,.977785,.978375,.978958,.979534,.980105,.980669,.981227,.981778,.982324,.982864,.983398,.983927,.984450,.984967,.985479,.985985,.986486,.986982,.987470,.987951,.988424,.988890,.989349,.989801,.990246,.990684,.991115,.991540,.991958,.992370,.992776,.993176,.993569,.993957,.994339,.994716,.995086,.995451,.995805,.996148,.996480,.996802,.997114,.997416,.997709,.997993,.998268,.998534,.998784,.999018,.999236,.999441,.999613,.999757,.999877,.999978,.999997,1.00000,.228771,.340447,.413134,.466358,.507928,.541749,.570052,.594231,.615213,.633651,.650015,.664660,.677858,.689823,.700726,.710705,.719875,.728330,.736151,.743404,.750275,.756798,.763003,.768918,.774566,.779966,.785139,.790100,.794864,.799444,.803853,.808100,.812197,.816152,.819972,.823667,.827242,.830705,.834060,.837314,.840473,.843542,.846525,.849427,.852250,.854999,.857676,.860286,.862829,.865310,.867730,.870093,.872400,.874653,.876854,.879006,.881110,.883168,.885181,.887152,.889081,.890972,.892824,.894640,.896420,.898166,.899878,.901558,.903206,.904824,.906413,.907972,.909504,.911009,.912487,.913939,.915367,.916770,.918149,.919506,.920841,.922154,.923447,.924720,.925974,.927208,.928424,.929621,.930801,.931964,.933109,.934238,.935350,.936447,.937528,.938594,.939645,.940682,.941704,.942713,.943708,.944691,.945661,.946619,.947564,.948498,.949420,.950331,.951230,.952119,.952997,.953864,.954721,.955568,.956405,.957232,.958049,.958857,.959656,.960446,.961226,.961998,.962762,.963517,.964264,.965003,.965733,.966456,.967172,.967879,.968579,.969272,.969958,.970636,.971308,.971972,.972630,.973281,.973926,.974564,.975195,.975819,.976437,.977049,.977654,.978253,.978845,.979432,.980012,.980587,.981155,.981718,.982276,.982827,.983373,.983914,.984449,.984979,.985504,.986024,.986536,.987041,.987539,.988029,.988513,.988990,.989460,.989923,.990380,.990831,.991275,.991713,.992145,.992570,.992990,.993405,.993813,.994216,.994613,.995005,.995386,.995755,.996114,.996463,.996801,.997130,.997450,.997760,.998061,.998354,.998629,.998888,.999132,.999361,.999555,.999720,.999859,.999976,.999997,1.00000]
	# Z=5
	      Z5=[.168879,.253429,.309870,.352255,.386208,.414539,.438854,.460158,.479119,.496207,.511761,.526038,.539234,.551503,.562970,.573733,.583877,.593470,.602570,.611226,.619473,.627349,.634886,.642112,.649052,.655728,.662159,.668364,.674357,.680153,.685764,.691203,.696479,.701602,.706580,.711423,.716137,.720729,.725204,.729570,.733829,.737986,.742046,.746013,.749891,.753685,.757397,.761032,.764592,.768080,.771500,.774853,.778143,.781371,.784540,.787652,.790709,.793713,.796666,.799569,.802423,.805230,.807991,.810707,.813380,.816012,.818602,.821154,.823667,.826142,.828582,.830987,.833357,.835695,.838000,.840273,.842516,.844729,.846913,.849068,.851196,.853295,.855368,.857415,.859437,.861433,.863405,.865353,.867278,.869180,.871060,.872918,.874754,.876570,.878365,.880141,.881896,.883633,.885351,.887050,.888731,.890394,.892040,.893668,.895279,.896873,.898451,.900014,.901560,.903091,.904607,.906107,.907594,.909065,.910523,.911967,.913397,.914814,.916217,.917608,.918986,.920351,.921704,.923044,.924373,.925689,.926995,.928288,.929570,.930842,.932102,.933352,.934591,.935819,.937037,.938245,.939443,.940632,.941810,.942979,.944139,.945290,.946431,.947564,.948688,.949803,.950910,.952009,.953099,.954181,.955255,.956321,.957379,.958429,.959472,.960507,.961535,.962556,.963569,.964575,.965574,.966566,.967552,.968531,.969504,.970470,.971430,.972384,.973332,.974273,.975208,.976138,.977061,.977979,.978891,.979797,.980698,.981593,.982483,.983367,.984245,.985119,.985987,.986850,.987708,.988561,.989409,.990253,.991091,.991924,.992753,.993576,.994395,.995210,.996019,.996824,.997625,.998421,.999213,1.00000,.173392,.260163,.318060,.361519,.396317,.425340,.450238,.472043,.491442,.508915,.524814,.539401,.552877,.565401,.577100,.588078,.598418,.608193,.617461,.626273,.634661,.642664,.650316,.657644,.664676,.671435,.677939,.684209,.690259,.696104,.701758,.707233,.712539,.717687,.722684,.727541,.732264,.736861,.741337,.745699,.749950,.754094,.758137,.762084,.765938,.769703,.773384,.776984,.780507,.783954,.787330,.790637,.793878,.797054,.800169,.803225,.806224,.809167,.812057,.814895,.817682,.820420,.823110,.825754,.828352,.830908,.833421,.835893,.838325,.840718,.843074,.845394,.847678,.849928,.852144,.854327,.856478,.858599,.860689,.862749,.864781,.866784,.868759,.870707,.872629,.874525,.876396,.878242,.880064,.881862,.883637,.885390,.887121,.888830,.890518,.892186,.893833,.895460,.897068,.898657,.900228,.901779,.903313,.904829,.906328,.907809,.909274,.910723,.912155,.913572,.914973,.916358,.917729,.919086,.920427,.921755,.923069,.924369,.925655,.926929,.928189,.929437,.930672,.931895,.933106,.934305,.935493,.936669,.937834,.938987,.940130,.941262,.942383,.943494,.944594,.945685,.946765,.947836,.948896,.949948,.950990,.952023,.953047,.954062,.955069,.956066,.957056,.958037,.959010,.959975,.960931,.961880,.962821,.963754,.964680,.965598,.966509,.967413,.968309,.969198,.970081,.970956,.971826,.972688,.973544,.974394,.975238,.976075,.976906,.977731,.978550,.979363,.980170,.980972,.981767,.982557,.983342,.984121,.984894,.985663,.986425,.987183,.987936,.988683,.989425,.990163,.990895,.991623,.992346,.993064,.993777,.994486,.995190,.995890,.996586,.997277,.997964,.998647,.999325,1.00000,.181573,.272326,.332807,.378151,.414413,.444621,.470503,.493142,.513259,.531357,.547804,.562875,.576782,.589691,.601734,.613021,.623640,.633666,.643160,.652177,.660743,.668900,.676683,.684123,.691249,.698083,.704649,.710964,.717047,.722912,.728575,.734047,.739340,.744465,.749432,.754248,.758924,.763464,.767878,.772171,.776346,.780408,.784363,.788216,.791971,.795633,.799205,.802692,.806097,.809423,.812674,.815851,.818959,.822000,.824975,.827888,.830741,.833536,.836275,.838959,.841591,.844171,.846701,.849184,.851620,.854011,.856358,.858663,.860926,.863150,.865335,.867482,.869593,.871668,.873708,.875715,.877689,.879631,.881541,.883422,.885273,.887095,.888889,.890656,.892396,.894110,.895798,.897462,.899101,.900716,.902309,.903879,.905426,.906952,.908457,.909941,.911404,.912848,.914272,.915678,.917065,.918433,.919784,.921117,.922433,.923732,.925015,.926281,.927532,.928767,.929987,.931192,.932382,.933558,.934719,.935867,.937001,.938122,.939229,.940324,.941406,.942475,.943532,.944578,.945611,.946633,.947644,.948643,.949632,.950609,.951576,.952532,.953478,.954414,.955340,.956256,.957163,.958059,.958947,.959825,.960694,.961555,.962406,.963249,.964083,.964910,.965727,.966537,.967339,.968132,.968918,.969697,.970468,.971231,.971987,.972736,.973477,.974212,.974939,.975660,.976374,.977082,.977783,.978478,.979167,.979849,.980526,.981197,.981861,.982520,.983173,.983821,.984463,.985099,.985730,.986355,.986975,.987590,.988200,.988804,.989404,.990000,.990590,.991176,.991758,.992336,.992909,.993478,.994042,.994603,.995159,.995712,.996261,.996806,.997347,.997885,.998419,.998949,.999476,1.00000,.188804,.283039,.345751,.392702,.430197,.461387,.488074,.511384,.532067,.550649,.567512,.582942,.597160,.610339,.622618,.634109,.644905,.655083,.664708,.673836,.682493,.690721,.698557,.706036,.713184,.720029,.726592,.732894,.738953,.744785,.750405,.755826,.761061,.766120,.771014,.775751,.780341,.784792,.789110,.793302,.797372,.801326,.805169,.808907,.812545,.816086,.819536,.822897,.826174,.829370,.832488,.835531,.838503,.841406,.844242,.847014,.849724,.852375,.854969,.857507,.859991,.862424,.864807,.867141,.869428,.871671,.873869,.876024,.878138,.880212,.882247,.884244,.886204,.888129,.890019,.891875,.893698,.895490,.897250,.898980,.900681,.902353,.903998,.905615,.907206,.908772,.910312,.911828,.913319,.914788,.916233,.917657,.919058,.920438,.921798,.923137,.924456,.925756,.927036,.928298,.929542,.930768,.931977,.933168,.934343,.935501,.936644,.937770,.938881,.939977,.941059,.942125,.943178,.944216,.945241,.946252,.947250,.948235,.949207,.950167,.951115,.952050,.952974,.953886,.954787,.955677,.956555,.957423,.958280,.959127,.959963,.960789,.961606,.962412,.963209,.963997,.964775,.965544,.966304,.967056,.967798,.968532,.969257,.969974,.970683,.971384,.972077,.972762,.973439,.974108,.974770,.975425,.976072,.976713,.977346,.977972,.978591,.979204,.979810,.980409,.981002,.981589,.982169,.982743,.983311,.983873,.984429,.984979,.985523,.986062,.986595,.987123,.987645,.988161,.988673,.989179,.989680,.990175,.990666,.991152,.991633,.992110,.992582,.993049,.993513,.993972,.994426,.994877,.995323,.995765,.996204,.996639,.997070,.997498,.997923,.998344,.998763,.999178,.999590,1.00000,.196516,.294417,.359447,.408043,.446778,.478940,.506408,.530355,.551563,.570582,.587809,.603543,.618014,.631402,.643853,.655483,.666389,.676652,.686339,.695509,.704188,.712422,.720250,.727706,.734820,.741618,.748125,.754360,.760344,.766093,.771623,.776946,.782077,.787027,.791805,.796423,.800888,.805209,.809393,.813448,.817379,.821192,.824893,.828487,.831979,.835374,.838675,.841887,.845014,.848059,.851025,.853916,.856734,.859483,.862165,.864782,.867337,.869832,.872270,.874651,.876980,.879257,.881485,.883664,.885798,.887886,.889931,.891934,.893896,.895818,.897702,.899548,.901359,.903134,.904875,.906583,.908258,.909902,.911516,.913100,.914655,.916182,.917683,.919157,.920605,.922028,.923426,.924801,.926152,.927481,.928787,.930072,.931336,.932579,.933801,.935004,.936188,.937353,.938500,.939628,.940739,.941833,.942909,.943970,.945014,.946042,.947055,.948052,.949035,.950003,.950957,.951897,.952823,.953736,.954635,.955522,.956396,.957258,.958107,.958945,.959771,.960585,.961388,.962179,.962960,.963730,.964490,.965239,.965978,.966707,.967426,.968136,.968836,.969527,.970208,.970881,.971545,.972200,.972847,.973485,.974115,.974737,.975350,.975955,.976553,.977142,.977724,.978299,.978865,.979425,.979978,.980523,.981061,.981593,.982118,.982636,.983148,.983654,.984153,.984645,.985132,.985612,.986086,.986553,.987015,.987471,.987921,.988365,.988803,.989236,.989663,.990085,.990502,.990913,.991319,.991720,.992116,.992507,.992894,.993275,.993652,.994023,.994390,.994752,.995110,.995463,.995812,.996156,.996496,.996832,.997163,.997491,.997816,.998137,.998454,.998769,.999081,.999390,.999696,1.00000,.208612,.312089,.380526,.431445,.471857,.505266,.533674,.558334,.580080,.599496,.617006,.632929,.647511,.660944,.673382,.684949,.695750,.705869,.715380,.724343,.732812,.740831,.748440,.755674,.762564,.769136,.775414,.781420,.787172,.792688,.797984,.803074,.807970,.812684,.817227,.821608,.825837,.829922,.833871,.837690,.841387,.844968,.848439,.851804,.855068,.858237,.861314,.864304,.867210,.870035,.872784,.875458,.878062,.880597,.883067,.885474,.887821,.890109,.892340,.894518,.896643,.898718,.900744,.902724,.904658,.906549,.908397,.910204,.911971,.913700,.915391,.917046,.918666,.920252,.921804,.923325,.924815,.926274,.927703,.929104,.930478,.931825,.933145,.934441,.935711,.936958,.938181,.939381,.940559,.941716,.942851,.943966,.945060,.946135,.947191,.948228,.949246,.950247,.951231,.952197,.953147,.954081,.954999,.955901,.956789,.957661,.958519,.959363,.960193,.961010,.961814,.962604,.963382,.964147,.964900,.965641,.966371,.967089,.967796,.968491,.969176,.969851,.970514,.971168,.971811,.972444,.973068,.973682,.974287,.974882,.975469,.976047,.976616,.977176,.977729,.978273,.978809,.979337,.979857,.980370,.980875,.981372,.981862,.982344,.982819,.983286,.983747,.984200,.984647,.985087,.985520,.985947,.986368,.986782,.987191,.987593,.987990,.988380,.988765,.989144,.989517,.989884,.990244,.990598,.990946,.991289,.991626,.991957,.992282,.992602,.992917,.993227,.993531,.993831,.994125,.994415,.994700,.994980,.995255,.995527,.995793,.996054,.996310,.996561,.996807,.997049,.997286,.997519,.997748,.997972,.998192,.998408,.998620,.998828,.999032,.999232,.999429,.999623,.999813,1.00000,.216430,.323522,.394175,.446616,.488132,.522370,.551413,.576561,.598683,.618386,.636113,.652193,.666882,.680380,.692848,.704415,.715189,.725259,.734700,.743575,.751945,.759856,.767348,.774457,.781215,.787649,.793784,.799642,.805242,.810602,.815738,.820664,.825395,.829941,.834313,.838523,.842578,.846488,.850260,.853901,.857422,.860827,.864122,.867313,.870404,.873400,.876306,.879125,.881862,.884519,.887100,.889608,.892047,.894418,.896725,.898970,.901155,.903283,.905356,.907376,.909345,.911265,.913138,.914966,.916750,.918492,.920192,.921853,.923476,.925061,.926610,.928125,.929605,.931053,.932469,.933854,.935209,.936535,.937833,.939103,.940348,.941567,.942761,.943932,.945079,.946203,.947305,.948386,.949446,.950485,.951505,.952505,.953486,.954449,.955393,.956320,.957230,.958124,.959001,.959862,.960707,.961537,.962352,.963153,.963939,.964711,.965470,.966215,.966948,.967667,.968375,.969070,.969753,.970424,.971084,.971733,.972371,.972998,.973615,.974221,.974818,.975403,.975979,.976545,.977102,.977649,.978187,.978716,.979236,.979748,.980251,.980746,.981233,.981711,.982182,.982645,.983101,.983549,.983991,.984425,.984851,.985270,.985682,.986087,.986485,.986876,.987261,.987639,.988010,.988376,.988735,.989088,.989435,.989777,.990112,.990442,.990767,.991086,.991400,.991709,.992012,.992309,.992600,.992885,.993164,.993439,.993708,.993971,.994230,.994483,.994732,.994976,.995215,.995450,.995680,.995905,.996127,.996344,.996557,.996766,.996970,.997169,.997363,.997552,.997737,.997918,.998094,.998266,.998434,.998598,.998757,.998912,.999063,.999210,.999352,.999490,.999623,.999753,.999878,1.00000,.225947,.337364,.410618,.464801,.507550,.542683,.572382,.598010,.620477,.640418,.658297,.674460,.689173,.702648,.715051,.726518,.737162,.747077,.756340,.765018,.773185,.780887,.788167,.795060,.801598,.807810,.813721,.819352,.824724,.829856,.834762,.839459,.843959,.848274,.852416,.856395,.860220,.863901,.867444,.870857,.874152,.877334,.880410,.883384,.886261,.889046,.891744,.894357,.896889,.899345,.901728,.904039,.906284,.908463,.910581,.912638,.914639,.916584,.918475,.920316,.922109,.923856,.925558,.927217,.928834,.930412,.931950,.933451,.934916,.936346,.937742,.939105,.940436,.941737,.943007,.944249,.945462,.946648,.947808,.948941,.950051,.951136,.952199,.953238,.954256,.955253,.956229,.957184,.958120,.959037,.959936,.960816,.961679,.962524,.963353,.964165,.964961,.965742,.966508,.967258,.967994,.968716,.969424,.970118,.970798,.971465,.972120,.972762,.973392,.974010,.974617,.975212,.975796,.976369,.976932,.977484,.978026,.978558,.979081,.979594,.980097,.980591,.981075,.981550,.982017,.982474,.982923,.983364,.983797,.984221,.984638,.985047,.985449,.985843,.986230,.986610,.986984,.987350,.987710,.988064,.988410,.988751,.989084,.989412,.989733,.990048,.990357,.990661,.990959,.991251,.991538,.991819,.992095,.992366,.992633,.992894,.993150,.993402,.993649,.993892,.994129,.994361,.994588,.994810,.995027,.995239,.995446,.995649,.995848,.996042,.996231,.996417,.996599,.996776,.996950,.997120,.997287,.997449,.997609,.997764,.997915,.998062,.998204,.998342,.998476,.998606,.998732,.998854,.998973,.999088,.999198,.999304,.999406,.999505,.999598,.999687,.999772,.999852,.999928,1.00000,.237962,.354730,.431127,.487360,.531509,.567616,.597989,.624072,.646825,.666922,.684852,.700982,.715594,.728911,.741108,.752331,.762697,.772305,.781238,.789566,.797387,.804749,.811692,.818252,.824463,.830351,.835942,.841258,.846318,.851142,.855745,.860142,.864347,.868370,.872224,.875919,.879463,.882866,.886136,.889279,.892308,.895229,.898046,.900766,.903393,.905932,.908386,.910759,.913056,.915279,.917431,.919517,.921538,.923497,.925397,.927240,.929029,.930766,.932452,.934089,.935682,.937232,.938740,.940208,.941637,.943029,.944385,.945706,.946993,.948248,.949471,.950664,.951828,.952963,.954070,.955151,.956205,.957235,.958240,.959221,.960180,.961116,.962031,.962925,.963799,.964652,.965487,.966303,.967100,.967880,.968643,.969389,.970119,.970834,.971532,.972216,.972885,.973540,.974182,.974809,.975423,.976024,.976613,.977188,.977752,.978303,.978843,.979372,.979890,.980397,.980894,.981380,.981856,.982323,.982780,.983228,.983667,.984097,.984518,.984931,.985336,.985731,.986118,.986497,.986868,.987231,.987587,.987935,.988276,.988609,.988936,.989256,.989570,.989877,.990177,.990472,.990761,.991043,.991320,.991591,.991857,.992116,.992370,.992618,.992861,.993098,.993331,.993558,.993780,.993998,.994211,.994419,.994623,.994822,.995017,.995208,.995395,.995578,.995757,.995932,.996102,.996269,.996431,.996589,.996742,.996892,.997038,.997180,.997319,.997454,.997586,.997714,.997839,.997961,.998080,.998195,.998308,.998418,.998526,.998630,.998731,.998828,.998921,.999012,.999098,.999182,.999263,.999341,.999416,.999488,.999556,.999621,.999682,.999740,.999793,.999842,.999888,.999929,.999967,1.00000,.242264,.360926,.438420,.495355,.539974,.576398,.606982,.633197,.656024,.676149,.694071,.710165,.724718,.737955,.750059,.761174,.771422,.780903,.789702,.797891,.805571,.812791,.819591,.826010,.832078,.837824,.843273,.848448,.853368,.858052,.862516,.866775,.870842,.874729,.878448,.882009,.885420,.888692,.891831,.894845,.897750,.900550,.903251,.905858,.908376,.910808,.913160,.915434,.917634,.919763,.921825,.923822,.925757,.927633,.929452,.931217,.932929,.934591,.936204,.937771,.939295,.940778,.942221,.943625,.944993,.946325,.947622,.948886,.950118,.951319,.952489,.953631,.954744,.955830,.956890,.957924,.958933,.959918,.960880,.961819,.962736,.963632,.964507,.965361,.966196,.967012,.967809,.968589,.969350,.970095,.970823,.971536,.972232,.972913,.973580,.974232,.974870,.975494,.976105,.976703,.977288,.977860,.978419,.978967,.979502,.980026,.980539,.981041,.981533,.982013,.982484,.982945,.983396,.983838,.984271,.984694,.985109,.985516,.985914,.986304,.986685,.987058,.987423,.987779,.988128,.988470,.988804,.989131,.989451,.989764,.990070,.990369,.990663,.990950,.991231,.991506,.991775,.992039,.992297,.992549,.992796,.993036,.993271,.993501,.993725,.993943,.994156,.994365,.994568,.994767,.994961,.995150,.995335,.995516,.995692,.995865,.996033,.996198,.996358,.996515,.996668,.996816,.996960,.997101,.997237,.997370,.997499,.997624,.997746,.997865,.997981,.998093,.998202,.998309,.998412,.998513,.998611,.998706,.998799,.998889,.998975,.999058,.999138,.999214,.999287,.999358,.999425,.999490,.999552,.999611,.999667,.999719,.999768,.999814,.999855,.999891,.999924,.999954,.999979,1.00000,.242347,.360919,.438270,.495038,.539477,.575715,.606109,.632132,.654768,.674703,.692436,.708343,.722711,.735766,.747689,.758627,.768701,.778010,.786641,.794663,.802199,.809294,.815987,.822313,.828303,.833983,.839378,.844509,.849395,.854053,.858499,.862747,.866809,.870699,.874425,.877998,.881426,.884719,.887883,.890925,.893860,.896691,.899426,.902067,.904620,.907088,.909477,.911789,.914028,.916196,.918298,.920336,.922313,.924230,.926091,.927898,.929653,.931358,.933014,.934625,.936191,.937716,.939201,.940647,.942055,.943427,.944764,.946067,.947337,.948576,.949784,.950963,.952113,.953235,.954330,.955399,.956443,.957463,.958459,.959431,.960382,.961311,.962219,.963106,.963973,.964822,.965651,.966462,.967256,.968032,.968792,.969535,.970263,.970975,.971672,.972354,.973022,.973676,.974317,.974944,.975558,.976159,.976748,.977325,.977889,.978442,.978984,.979515,.980035,.980544,.981043,.981532,.982012,.982481,.982942,.983393,.983836,.984270,.984695,.985112,.985520,.985920,.986312,.986695,.987071,.987439,.987799,.988152,.988498,.988837,.989169,.989494,.989813,.990125,.990431,.990731,.991025,.991313,.991596,.991872,.992143,.992407,.992665,.992917,.993164,.993404,.993640,.993869,.994094,.994313,.994528,.994737,.994942,.995143,.995338,.995530,.995717,.995899,.996078,.996253,.996422,.996587,.996747,.996902,.997053,.997199,.997342,.997480,.997614,.997744,.997870,.997993,.998112,.998228,.998341,.998450,.998556,.998659,.998759,.998857,.998950,.999039,.999124,.999205,.999283,.999357,.999429,.999497,.999562,.999624,.999682,.999735,.999785,.999830,.999870,.999905,.999936,.999963,.999984,1.00000,.239643,.356973,.433568,.489820,.533886,.569844,.600025,.625884,.648392,.668228,.685887,.701737,.716064,.729090,.740996,.751926,.761999,.771314,.779956,.787995,.795553,.802675,.809401,.815763,.821793,.827516,.832957,.838137,.843073,.847784,.852285,.856589,.860710,.864657,.868443,.872077,.875567,.878922,.882149,.885254,.888252,.891147,.893944,.896648,.899264,.901795,.904246,.906620,.908921,.911151,.913315,.915413,.917451,.919429,.921350,.923216,.925030,.926794,.928509,.930178,.931803,.933385,.934927,.936430,.937895,.939323,.940716,.942074,.943400,.944693,.945956,.947188,.948392,.949567,.950716,.951837,.952934,.954005,.955052,.956076,.957077,.958055,.959013,.959949,.960865,.961762,.962639,.963498,.964338,.965161,.965967,.966755,.967528,.968285,.969026,.969752,.970463,.971160,.971844,.972513,.973169,.973812,.974442,.975059,.975664,.976257,.976838,.977408,.977966,.978514,.979051,.979578,.980095,.980602,.981099,.981586,.982065,.982534,.982994,.983446,.983889,.984323,.984749,.985166,.985575,.985976,.986369,.986754,.987132,.987503,.987866,.988223,.988572,.988915,.989252,.989582,.989906,.990223,.990535,.990841,.991140,.991432,.991719,.991999,.992273,.992542,.992804,.993061,.993313,.993559,.993800,.994036,.994267,.994493,.994715,.994932,.995144,.995352,.995555,.995754,.995948,.996136,.996318,.996496,.996668,.996835,.996998,.997155,.997309,.997458,.997602,.997743,.997880,.998012,.998141,.998267,.998389,.998507,.998622,.998734,.998840,.998942,.999038,.999130,.999218,.999302,.999382,.999458,.999530,.999599,.999663,.999721,.999775,.999824,.999867,.999904,.999937,.999964,.999985,1.00000,.237514,.353848,.429822,.485641,.529384,.565094,.595078,.620779,.643158,.662888,.680459,.696237,.710504,.723482,.735348,.746245,.756291,.765587,.774213,.782241,.789796,.796922,.803659,.810038,.816089,.821839,.827310,.832524,.837499,.842250,.846794,.851144,.855313,.859311,.863148,.866835,.870380,.873791,.877075,.880240,.883295,.886248,.889103,.891866,.894539,.897128,.899636,.902067,.904425,.906712,.908931,.911086,.913179,.915213,.917189,.919110,.920979,.922797,.924566,.926288,.927965,.929600,.931194,.932748,.934263,.935741,.937183,.938591,.939964,.941306,.942615,.943895,.945145,.946366,.947559,.948726,.949866,.950981,.952072,.953138,.954181,.955202,.956201,.957179,.958136,.959073,.959990,.960888,.961768,.962629,.963474,.964300,.965111,.965905,.966683,.967446,.968193,.968926,.969645,.970350,.971041,.971718,.972382,.973034,.973672,.974299,.974913,.975516,.976107,.976687,.977257,.977815,.978364,.978902,.979430,.979948,.980457,.980957,.981447,.981929,.982401,.982865,.983320,.983766,.984203,.984633,.985055,.985468,.985874,.986273,.986664,.987048,.987425,.987795,.988158,.988515,.988865,.989209,.989547,.989879,.990204,.990522,.990834,.991139,.991438,.991732,.992019,.992300,.992576,.992847,.993112,.993371,.993626,.993875,.994120,.994359,.994594,.994824,.995050,.995271,.995486,.995695,.995899,.996096,.996288,.996475,.996656,.996832,.997004,.997170,.997332,.997490,.997643,.997792,.997937,.998078,.998214,.998348,.998477,.998603,.998723,.998837,.998945,.999048,.999146,.999239,.999327,.999411,.999492,.999568,.999638,.999702,.999761,.999815,.999861,.999901,.999936,.999965,.999986,1.00000,.234815,.349931,.425177,.480511,.523913,.559376,.589180,.614749,.637034,.656699,.674227,.689981,.704239,.717221,.729100,.740020,.750097,.759428,.768096,.776169,.783775,.790955,.797748,.804187,.810301,.816116,.821654,.826936,.831980,.836803,.841420,.845843,.850086,.854159,.858072,.861835,.865456,.868944,.872305,.875546,.878677,.881704,.884631,.887463,.890204,.892860,.895434,.897929,.900349,.902697,.904976,.907190,.909340,.911430,.913462,.915437,.917359,.919229,.921049,.922821,.924548,.926231,.927872,.929472,.931032,.932555,.934041,.935491,.936907,.938290,.939640,.940960,.942249,.943508,.944740,.945943,.947120,.948271,.949397,.950498,.951576,.952631,.953664,.954676,.955666,.956636,.957586,.958517,.959430,.960323,.961199,.962058,.962900,.963725,.964534,.965327,.966105,.966868,.967617,.968352,.969072,.969779,.970473,.971153,.971821,.972477,.973120,.973752,.974373,.974982,.975579,.976167,.976743,.977310,.977866,.978413,.978949,.979477,.979995,.980504,.981004,.981495,.981977,.982450,.982915,.983371,.983819,.984259,.984692,.985116,.985533,.985943,.986346,.986742,.987130,.987512,.987888,.988257,.988619,.988976,.989325,.989668,.990004,.990333,.990656,.990972,.991283,.991588,.991886,.992179,.992467,.992749,.993025,.993296,.993563,.993824,.994080,.994331,.994578,.994820,.995055,.995284,.995506,.995722,.995932,.996137,.996336,.996529,.996717,.996900,.997078,.997251,.997419,.997582,.997742,.997896,.998047,.998194,.998336,.998475,.998606,.998732,.998850,.998963,.999071,.999173,.999269,.999361,.999449,.999532,.999608,.999678,.999743,.999802,.999853,.999896,.999933,.999965,.999986,1.00000,.233389,.347834,.422658,.477694,.520874,.556163,.585827,.611283,.633474,.653060,.670523,.686221,.700433,.713375,.725221,.736112,.746166,.755477,.764129,.772189,.779786,.786963,.793758,.800202,.806324,.812151,.817703,.823003,.828066,.832911,.837551,.841999,.846269,.850370,.854312,.858106,.861759,.865279,.868674,.871950,.875115,.878177,.881138,.884006,.886783,.889474,.892083,.894613,.897069,.899452,.901767,.904016,.906202,.908327,.910394,.912405,.914362,.916267,.918122,.919929,.921690,.923408,.925083,.926717,.928312,.929868,.931387,.932871,.934320,.935736,.937119,.938470,.939792,.941083,.942346,.943582,.944790,.945972,.947129,.948261,.949369,.950455,.951518,.952559,.953579,.954578,.955557,.956517,.957458,.958380,.959284,.960171,.961040,.961892,.962729,.963549,.964354,.965144,.965919,.966679,.967426,.968158,.968877,.969583,.970277,.970957,.971626,.972282,.972927,.973560,.974182,.974793,.975393,.975983,.976563,.977133,.977692,.978243,.978783,.979315,.979837,.980350,.980854,.981349,.981836,.982313,.982783,.983245,.983698,.984144,.984582,.985013,.985436,.985852,.986261,.986663,.987059,.987447,.987830,.988206,.988575,.988936,.989291,.989640,.989982,.990317,.990646,.990970,.991287,.991598,.991903,.992203,.992498,.992787,.993070,.993349,.993622,.993891,.994155,.994413,.994665,.994910,.995149,.995381,.995607,.995826,.996040,.996248,.996451,.996648,.996840,.997026,.997208,.997385,.997557,.997725,.997888,.998047,.998202,.998353,.998496,.998632,.998761,.998883,.999000,.999110,.999215,.999315,.999410,.999499,.999582,.999658,.999727,.999791,.999845,.999892,.999931,.999965,.999986,1.00000,.231064,.344416,.418557,.473114,.515936,.550948,.580391,.605668,.627712,.647178,.664540,.680154,.694296,.707180,.718978,.729829,.739850,.749135,.757766,.765810,.773399,.780574,.787372,.793825,.799961,.805805,.811379,.816703,.821794,.826670,.831343,.835827,.840134,.844275,.848259,.852096,.855794,.859360,.862802,.866126,.869341,.872451,.875463,.878381,.881209,.883952,.886613,.889195,.891703,.894139,.896507,.898809,.901048,.903226,.905346,.907410,.909420,.911379,.913287,.915147,.916962,.918732,.920460,.922146,.923793,.925402,.926973,.928508,.930009,.931476,.932910,.934312,.935684,.937026,.938339,.939624,.940882,.942114,.943319,.944500,.945657,.946790,.947901,.948990,.950057,.951103,.952129,.953135,.954122,.955090,.956039,.956971,.957885,.958782,.959663,.960527,.961375,.962208,.963026,.963830,.964619,.965393,.966154,.966902,.967637,.968358,.969067,.969764,.970449,.971122,.971784,.972435,.973074,.973703,.974321,.974929,.975527,.976115,.976694,.977263,.977822,.978372,.978912,.979444,.979967,.980481,.980986,.981483,.981972,.982453,.982927,.983392,.983850,.984301,.984744,.985180,.985609,.986032,.986448,.986857,.987259,.987653,.988041,.988422,.988796,.989163,.989525,.989879,.990228,.990570,.990907,.991237,.991562,.991882,.992196,.992504,.992807,.993105,.993398,.993686,.993966,.994240,.994506,.994765,.995018,.995265,.995505,.995738,.995966,.996189,.996405,.996616,.996822,.997022,.997218,.997408,.997594,.997775,.997951,.998123,.998287,.998442,.998589,.998730,.998863,.998989,.999110,.999224,.999333,.999436,.999531,.999617,.999696,.999768,.999830,.999882,.999927,.999965,.999987,1.00000,.229248,.341744,.415350,.469529,.512069,.546860,.576128,.601262,.623188,.642556,.659836,.675382,.689466,.702302,.714059,.724877,.734869,.744131,.752743,.760773,.768352,.775523,.782322,.788779,.794924,.800780,.806369,.811711,.816824,.821722,.826420,.830931,.835267,.839438,.843454,.847324,.851056,.854658,.858136,.861498,.864750,.867899,.870950,.873907,.876774,.879556,.882257,.884880,.887428,.889904,.892312,.894655,.896934,.899153,.901314,.903418,.905469,.907468,.909417,.911318,.913172,.914983,.916751,.918478,.920164,.921813,.923424,.924998,.926538,.928044,.929517,.930958,.932368,.933749,.935100,.936423,.937718,.938987,.940230,.941448,.942642,.943812,.944960,.946085,.947188,.948271,.949332,.950374,.951396,.952400,.953384,.954351,.955300,.956231,.957146,.958045,.958927,.959794,.960646,.961482,.962305,.963113,.963907,.964687,.965454,.966208,.966950,.967679,.968396,.969101,.969794,.970476,.971147,.971807,.972456,.973094,.973723,.974341,.974950,.975549,.976138,.976718,.977288,.977849,.978401,.978944,.979479,.980005,.980523,.981032,.981534,.982028,.982514,.982992,.983464,.983928,.984384,.984834,.985277,.985713,.986142,.986564,.986978,.987385,.987786,.988180,.988567,.988947,.989322,.989690,.990052,.990408,.990758,.991102,.991441,.991774,.992101,.992424,.992741,.993053,.993357,.993654,.993943,.994226,.994501,.994770,.995032,.995288,.995537,.995780,.996018,.996249,.996476,.996696,.996911,.997121,.997326,.997526,.997722,.997912,.998094,.998266,.998430,.998586,.998734,.998876,.999010,.999138,.999260,.999375,.999481,.999578,.999666,.999746,.999815,.999873,.999922,.999964,.999987,1.00000,.226068,.337066,.409733,.463251,.505294,.539700,.568659,.593542,.615262,.634457,.651594,.667019,.681002,.693752,.705437,.716195,.726138,.735360,.743938,.751941,.759503,.766664,.773460,.779921,.786075,.791945,.797553,.802919,.808058,.812987,.817719,.822268,.826643,.830857,.834917,.838834,.842615,.846267,.849798,.853213,.856521,.859726,.862834,.865849,.868775,.871617,.874378,.877062,.879672,.882211,.884683,.887088,.889432,.891715,.893940,.896110,.898226,.900290,.902304,.904271,.906192,.908068,.909902,.911695,.913447,.915162,.916838,.918479,.920084,.921656,.923195,.924701,.926177,.927622,.929039,.930427,.931787,.933120,.934428,.935710,.936968,.938202,.939413,.940602,.941768,.942914,.944038,.945143,.946228,.947293,.948340,.949368,.950379,.951372,.952348,.953307,.954251,.955178,.956090,.956986,.957868,.958735,.959589,.960428,.961254,.962067,.962867,.963654,.964429,.965192,.965942,.966682,.967409,.968126,.968832,.969527,.970211,.970886,.971550,.972204,.972848,.973483,.974108,.974723,.975330,.975927,.976516,.977095,.977667,.978230,.978784,.979331,.979870,.980401,.980924,.981440,.981949,.982450,.982944,.983432,.983911,.984383,.984848,.985306,.985756,.986200,.986637,.987067,.987490,.987907,.988318,.988722,.989120,.989513,.989899,.990280,.990655,.991024,.991388,.991746,.992097,.992439,.992774,.993101,.993421,.993734,.994039,.994338,.994630,.994916,.995196,.995469,.995736,.995997,.996253,.996502,.996747,.996986,.997219,.997448,.997666,.997874,.998073,.998263,.998444,.998616,.998781,.998939,.999089,.999232,.999364,.999484,.999594,.999694,.999779,.999851,.999912,.999963,.999988,1.00000,.223951,.333949,.405985,.459058,.500766,.534908,.563657,.588367,.609943,.629019,.646055,.661395,.675304,.687992,.699625,.710338,.720243,.729433,.737985,.745965,.753511,.760661,.767451,.773910,.780066,.785942,.791559,.796937,.802091,.807037,.811789,.816358,.820757,.824996,.829084,.833029,.836840,.840523,.844086,.847535,.850876,.854116,.857259,.860310,.863273,.866152,.868951,.871673,.874321,.876899,.879409,.881854,.884237,.886559,.888825,.891034,.893190,.895295,.897350,.899357,.901318,.903236,.905110,.906944,.908738,.910493,.912211,.913893,.915539,.917152,.918732,.920280,.921797,.923283,.924741,.926170,.927571,.928946,.930294,.931617,.932916,.934191,.935443,.936672,.937880,.939067,.940232,.941378,.942503,.943610,.944697,.945766,.946818,.947852,.948868,.949868,.950852,.951820,.952772,.953708,.954630,.955538,.956431,.957311,.958177,.959030,.959869,.960696,.961511,.962313,.963103,.963882,.964649,.965405,.966149,.966883,.967607,.968320,.969023,.969715,.970398,.971071,.971734,.972388,.973032,.973668,.974294,.974912,.975521,.976121,.976714,.977298,.977874,.978442,.979003,.979555,.980101,.980639,.981170,.981694,.982210,.982718,.983219,.983713,.984199,.984679,.985151,.985617,.986076,.986528,.986974,.987414,.987847,.988275,.988696,.989111,.989521,.989924,.990322,.990715,.991099,.991476,.991844,.992205,.992558,.992904,.993242,.993574,.993899,.994216,.994528,.994833,.995132,.995424,.995711,.995991,.996266,.996536,.996799,.997058,.997305,.997542,.997769,.997985,.998193,.998392,.998582,.998764,.998939,.999106,.999259,.999400,.999529,.999648,.999748,.999831,.999902,.999961,.999988,1.00000,.221368,.330134,.401388,.453902,.495186,.528992,.557467,.581951,.603338,.622252,.639148,.654369,.668174,.680772,.692326,.702970,.712815,.721951,.730457,.738397,.745909,.753033,.759803,.766248,.772394,.778265,.783882,.789262,.794423,.799379,.804144,.808729,.813147,.817406,.821516,.825486,.829324,.833035,.836628,.840108,.843483,.846757,.849935,.853023,.856023,.858940,.861778,.864539,.867228,.869847,.872399,.874887,.877313,.879679,.881988,.884242,.886443,.888593,.890694,.892747,.894755,.896719,.898642,.900523,.902365,.904169,.905936,.907667,.909363,.911026,.912656,.914254,.915821,.917358,.918867,.920346,.921799,.923225,.924624,.925999,.927349,.928676,.929979,.931260,.932520,.933758,.934975,.936173,.937350,.938508,.939648,.940769,.941872,.942957,.944025,.945077,.946112,.947131,.948135,.949123,.950096,.951055,.952000,.952931,.953848,.954752,.955644,.956522,.957388,.958242,.959083,.959913,.960732,.961539,.962335,.963120,.963895,.964659,.965412,.966156,.966890,.967614,.968328,.969032,.969728,.970414,.971091,.971760,.972419,.973070,.973713,.974348,.974974,.975593,.976203,.976807,.977402,.977990,.978571,.979144,.979710,.980268,.980819,.981362,.981898,.982427,.982949,.983465,.983973,.984475,.984970,.985458,.985941,.986417,.986887,.987351,.987809,.988261,.988708,.989148,.989581,.990005,.990422,.990830,.991231,.991625,.992011,.992390,.992762,.993127,.993486,.993837,.994183,.994522,.994854,.995181,.995502,.995816,.996126,.996429,.996721,.997001,.997271,.997531,.997780,.998020,.998251,.998472,.998686,.998891,.999081,.999256,.999417,.999567,.999692,.999797,.999885,.999959,.999988,1.00000,.219700,.327671,.398420,.450574,.491583,.525173,.553471,.577809,.599072,.617882,.634688,.649831,.663570,.676109,.687612,.698212,.708017,.717119,.725595,.733509,.741000,.748106,.754861,.761295,.767433,.773299,.778912,.784292,.789454,.794414,.799184,.803776,.808201,.812470,.816592,.820574,.824424,.828150,.831759,.835255,.838646,.841938,.845136,.848242,.851263,.854201,.857060,.859843,.862555,.865197,.867772,.870283,.872733,.875125,.877459,.879738,.881965,.884141,.886268,.888347,.890382,.892374,.894323,.896232,.898102,.899934,.901729,.903489,.905214,.906905,.908564,.910191,.911788,.913355,.914893,.916402,.917885,.919340,.920770,.922174,.923555,.924912,.926246,.927558,.928849,.930118,.931367,.932596,.933805,.934995,.936167,.937320,.938455,.939573,.940674,.941758,.942826,.943878,.944914,.945935,.946941,.947933,.948911,.949875,.950826,.951763,.952688,.953599,.954499,.955386,.956261,.957124,.957976,.958816,.959646,.960464,.961272,.962070,.962857,.963634,.964401,.965158,.965906,.966644,.967373,.968092,.968803,.969505,.970198,.970883,.971560,.972228,.972888,.973540,.974184,.974821,.975450,.976071,.976686,.977293,.977892,.978484,.979068,.979645,.980215,.980778,.981333,.981882,.982424,.982960,.983489,.984011,.984527,.985037,.985541,.986039,.986531,.987017,.987497,.987971,.988438,.988896,.989346,.989789,.990224,.990651,.991072,.991485,.991891,.992290,.992682,.993068,.993447,.993820,.994187,.994547,.994902,.995250,.995593,.995930,.996255,.996568,.996871,.997163,.997444,.997716,.997978,.998231,.998475,.998710,.998929,.999132,.999320,.999496,.999643,.999766,.999870,.999957,.999988,1.00000,.218301,.325615,.395953,.447819,.488613,.522036,.550203,.574433,.595609,.614347,.631094,.646187,.659885,.672391,.683866,.694443,.704230,.713318,.721783,.729689,.737174,.744277,.751031,.757465,.763606,.769475,.775094,.780480,.785650,.790618,.795397,.800000,.804437,.808718,.812852,.816848,.820712,.824453,.828076,.831588,.834996,.838305,.841519,.844643,.847682,.850638,.853516,.856319,.859049,.861711,.864306,.866838,.869308,.871720,.874075,.876375,.878623,.880820,.882969,.885070,.887126,.889139,.891111,.893042,.894933,.896787,.898604,.900386,.902133,.903846,.905527,.907176,.908795,.910384,.911943,.913475,.914979,.916457,.917908,.919335,.920737,.922116,.923472,.924806,.926119,.927410,.928680,.929931,.931162,.932373,.933566,.934741,.935897,.937036,.938158,.939264,.940353,.941426,.942483,.943525,.944553,.945566,.946566,.947551,.948524,.949483,.950430,.951363,.952285,.953194,.954092,.954978,.955852,.956716,.957568,.958410,.959241,.960061,.960872,.961672,.962462,.963243,.964015,.964777,.965530,.966273,.967008,.967735,.968453,.969162,.969863,.970556,.971241,.971918,.972588,.973249,.973904,.974551,.975190,.975823,.976448,.977065,.977675,.978278,.978873,.979462,.980043,.980618,.981186,.981748,.982303,.982851,.983394,.983930,.984460,.984984,.985502,.986014,.986520,.987021,.987513,.987998,.988475,.988944,.989406,.989860,.990307,.990747,.991179,.991605,.992025,.992437,.992843,.993243,.993636,.994024,.994405,.994780,.995149,.995513,.995865,.996205,.996534,.996852,.997160,.997457,.997745,.998023,.998293,.998553,.998796,.999023,.999234,.999431,.999597,.999737,.999855,.999955,.999989,1.00000,.217233,.324044,.394068,.445713,.486342,.519637,.547701,.571849,.592957,.611638,.628339,.643394,.657059,.669538,.680991,.691550,.701322,.710398,.718854,.726753,.734233,.741333,.748084,.754518,.760659,.766530,.772151,.777541,.782715,.787688,.792473,.797082,.801526,.805815,.809957,.813961,.817835,.821585,.825219,.828741,.832159,.835479,.838704,.841840,.844890,.847859,.850749,.853564,.856307,.858981,.861589,.864134,.866618,.869043,.871412,.873726,.875988,.878199,.880361,.882476,.884547,.886575,.888561,.890506,.892413,.894282,.896114,.897911,.899673,.901401,.903098,.904763,.906397,.908001,.909577,.911124,.912644,.914138,.915605,.917048,.918466,.919862,.921234,.922585,.923914,.925222,.926509,.927777,.929025,.930254,.931464,.932656,.933830,.934987,.936126,.937250,.938356,.939447,.940523,.941583,.942628,.943660,.944677,.945681,.946672,.947650,.948615,.949567,.950507,.951435,.952351,.953256,.954149,.955031,.955902,.956762,.957611,.958451,.959280,.960099,.960908,.961708,.962498,.963279,.964051,.964814,.965568,.966314,.967051,.967780,.968500,.969213,.969917,.970614,.971303,.971984,.972658,.973324,.973984,.974636,.975280,.975918,.976547,.977170,.977786,.978394,.978996,.979591,.980179,.980761,.981336,.981905,.982468,.983025,.983575,.984119,.984658,.985191,.985718,.986239,.986752,.987258,.987755,.988245,.988728,.989203,.989672,.990133,.990587,.991034,.991474,.991908,.992336,.992757,.993172,.993580,.993983,.994380,.994770,.995156,.995529,.995890,.996241,.996581,.996910,.997229,.997539,.997839,.998130,.998411,.998675,.998923,.999154,.999371,.999554,.999710,.999841,.999953,.999989,1.00000,.215553,.321578,.391112,.442415,.482791,.515890,.543800,.567825,.588832,.607432,.624066,.639066,.652688,.665130,.676555,.687091,.696846,.705910,.714357,.722252,.729729,.736828,.743581,.750017,.756162,.762039,.767667,.773064,.778247,.783230,.788026,.792647,.797103,.801404,.805560,.809579,.813467,.817233,.820882,.824420,.827855,.831192,.834435,.837588,.840657,.843643,.846552,.849386,.852149,.854843,.857471,.860036,.862540,.864986,.867375,.869710,.871993,.874225,.876409,.878545,.880638,.882687,.884695,.886663,.888593,.890485,.892340,.894160,.895946,.897698,.899418,.901107,.902766,.904395,.905995,.907567,.909112,.910630,.912123,.913590,.915034,.916454,.917852,.919228,.920583,.921916,.923230,.924523,.925797,.927051,.928288,.929506,.930706,.931889,.933055,.934204,.935337,.936454,.937556,.938642,.939714,.940772,.941816,.942846,.943863,.944868,.945859,.946838,.947805,.948760,.949703,.950634,.951554,.952463,.953361,.954248,.955124,.955991,.956847,.957693,.958529,.959356,.960174,.960982,.961782,.962573,.963355,.964128,.964893,.965650,.966399,.967139,.967872,.968597,.969315,.970025,.970727,.971422,.972111,.972792,.973465,.974132,.974791,.975443,.976088,.976726,.977358,.977983,.978601,.979213,.979818,.980417,.981010,.981597,.982178,.982753,.983322,.983886,.984443,.984995,.985540,.986077,.986606,.987128,.987643,.988150,.988651,.989144,.989631,.990112,.990585,.991053,.991514,.991968,.992417,.992859,.993296,.993727,.994152,.994571,.994979,.995375,.995760,.996135,.996499,.996853,.997197,.997532,.997858,.998175,.998473,.998754,.999018,.999267,.999480,.999662,.999817,.999950,.999989,1.00000,.214347,.319811,.389000,.440063,.480263,.513228,.541034,.564975,.585917,.604465,.621057,.636024,.649620,.662043,.673453,.683979,.693728,.702788,.711235,.719132,.726612,.733715,.740473,.746915,.753067,.758950,.764586,.769992,.775183,.780175,.784980,.789611,.794077,.798389,.802556,.806586,.810485,.814262,.817923,.821473,.824920,.828269,.831525,.834691,.837772,.840771,.843693,.846540,.849315,.852022,.854664,.857242,.859759,.862218,.864620,.866968,.869265,.871510,.873707,.875857,.877963,.880026,.882048,.884030,.885973,.887878,.889748,.891581,.893381,.895148,.896882,.898585,.900257,.901900,.903514,.905100,.906659,.908192,.909698,.911180,.912638,.914073,.915485,.916876,.918245,.919594,.920922,.922231,.923520,.924790,.926042,.927276,.928492,.929690,.930872,.932038,.933187,.934320,.935438,.936541,.937629,.938703,.939764,.940811,.941846,.942867,.943875,.944871,.945855,.946827,.947788,.948736,.949674,.950600,.951516,.952420,.953315,.954199,.955073,.955936,.956791,.957636,.958472,.959298,.960116,.960925,.961726,.962518,.963302,.964077,.964844,.965604,.966356,.967100,.967836,.968565,.969287,.970001,.970708,.971409,.972102,.972788,.973467,.974139,.974805,.975464,.976116,.976762,.977402,.978035,.978662,.979283,.979898,.980508,.981111,.981709,.982301,.982887,.983468,.984043,.984611,.985171,.985724,.986270,.986809,.987341,.987866,.988384,.988896,.989401,.989900,.990392,.990878,.991358,.991832,.992299,.992761,.993218,.993668,.994113,.994547,.994969,.995380,.995781,.996172,.996552,.996923,.997284,.997637,.997980,.998305,.998612,.998903,.999178,.999415,.999620,.999796,.999947,.999989,1.00000]
	# Z=6
	      Z6=[.167744,.251739,.307817,.349937,.383682,.411844,.436019,.457202,.476059,.493055,.508529,.522733,.535865,.548076,.559490,.570206,.580306,.589859,.598923,.607546,.615764,.623614,.631127,.638333,.645255,.651915,.658334,.664527,.670511,.676299,.681904,.687338,.692611,.697732,.702711,.707554,.712270,.716865,.721345,.725716,.729981,.734146,.738213,.742189,.746077,.749881,.753605,.757251,.760824,.764326,.767759,.771127,.774432,.777676,.780861,.783990,.787065,.790086,.793057,.795979,.798853,.801679,.804460,.807196,.809890,.812542,.815154,.817727,.820262,.822761,.825223,.827651,.830044,.832405,.834734,.837032,.839299,.841536,.843745,.845925,.848078,.850203,.852301,.854374,.856421,.858443,.860441,.862415,.864366,.866294,.868201,.870085,.871949,.873791,.875614,.877416,.879199,.880963,.882708,.884435,.886143,.887834,.889507,.891162,.892801,.894424,.896030,.897620,.899194,.900753,.902297,.903826,.905340,.906840,.908326,.909798,.911257,.912702,.914134,.915553,.916959,.918353,.919734,.921103,.922460,.923805,.925138,.926460,.927770,.929070,.930358,.931636,.932903,.934159,.935406,.936642,.937868,.939084,.940290,.941487,.942675,.943853,.945022,.946182,.947334,.948476,.949610,.950736,.951853,.952962,.954062,.955155,.956239,.957316,.958385,.959446,.960500,.961547,.962586,.963618,.964642,.965660,.966672,.967676,.968674,.969666,.970651,.971629,.972602,.973568,.974528,.975482,.976430,.977372,.978308,.979238,.980163,.981082,.981996,.982903,.983806,.984703,.985595,.986482,.987363,.988240,.989111,.989978,.990839,.991696,.992547,.993394,.994236,.995074,.995906,.996734,.997558,.998376,.999190,1.00000,.171664,.257595,.314947,.358010,.392500,.421275,.445967,.467597,.486845,.504189,.519974,.534460,.547847,.560292,.571921,.582835,.593119,.602843,.612065,.620836,.629189,.637160,.644784,.652089,.659101,.665842,.672333,.678590,.684631,.690470,.696120,.701592,.706897,.712046,.717047,.721908,.726637,.731241,.735727,.740099,.744361,.748519,.752576,.756538,.760408,.764191,.767891,.771510,.775053,.778521,.781919,.785249,.788514,.791715,.794855,.797937,.800962,.803932,.806850,.809716,.812533,.815300,.818020,.820694,.823324,.825911,.828456,.830960,.833425,.835852,.838242,.840596,.842914,.845199,.847450,.849669,.851856,.854013,.856139,.858237,.860305,.862346,.864359,.866344,.868304,.870238,.872147,.874031,.875892,.877729,.879543,.881335,.883105,.884854,.886581,.888289,.889976,.891643,.893291,.894920,.896531,.898123,.899697,.901253,.902792,.904314,.905819,.907308,.908781,.910238,.911680,.913107,.914518,.915915,.917297,.918666,.920020,.921361,.922688,.924002,.925304,.926592,.927868,.929132,.930383,.931623,.932851,.934068,.935273,.936467,.937650,.938822,.939984,.941135,.942275,.943406,.944526,.945637,.946738,.947829,.948911,.949984,.951048,.952102,.953148,.954185,.955214,.956234,.957245,.958248,.959244,.960231,.961210,.962181,.963145,.964101,.965050,.965991,.966925,.967851,.968771,.969683,.970589,.971488,.972381,.973267,.974146,.975019,.975886,.976746,.977601,.978449,.979291,.980127,.980958,.981782,.982601,.983414,.984222,.985023,.985820,.986611,.987397,.988177,.988952,.989722,.990487,.991247,.992002,.992752,.993497,.994238,.994973,.995705,.996431,.997154,.997871,.998585,.999295,1.00000,.179318,.268977,.328751,.373582,.409448,.439336,.464955,.487371,.507297,.525231,.541535,.556480,.570276,.583086,.595043,.606252,.616802,.626767,.636206,.645174,.653699,.661819,.669572,.676987,.684091,.690909,.697461,.703767,.709844,.715706,.721369,.726843,.732141,.737274,.742250,.747078,.751767,.756323,.760753,.765065,.769260,.773344,.777322,.781200,.784981,.788669,.792270,.795786,.799221,.802578,.805861,.809072,.812213,.815288,.818300,.821249,.824139,.826971,.829748,.832471,.835142,.837761,.840332,.842855,.845332,.847765,.850153,.852500,.854806,.857073,.859301,.861491,.863646,.865765,.867849,.869900,.871919,.873905,.875861,.877787,.879683,.881551,.883390,.885203,.886989,.888749,.890483,.892193,.893878,.895540,.897179,.898796,.900390,.901962,.903514,.905045,.906555,.908046,.909517,.910969,.912403,.913819,.915216,.916597,.917960,.919306,.920636,.921950,.923248,.924531,.925798,.927050,.928288,.929511,.930720,.931915,.933097,.934265,.935420,.936561,.937691,.938808,.939913,.941005,.942086,.943156,.944214,.945261,.946297,.947322,.948336,.949340,.950333,.951317,.952290,.953253,.954207,.955151,.956086,.957012,.957928,.958836,.959735,.960625,.961507,.962381,.963246,.964103,.964952,.965794,.966627,.967453,.968272,.969082,.969886,.970682,.971471,.972253,.973029,.973797,.974558,.975314,.976062,.976805,.977541,.978271,.978995,.979713,.980426,.981132,.981832,.982527,.983216,.983900,.984578,.985251,.985918,.986580,.987237,.987888,.988535,.989177,.989815,.990448,.991077,.991701,.992320,.992935,.993546,.994153,.994755,.995354,.995948,.996539,.997125,.997708,.998287,.998862,.999433,1.00000,.186488,.279606,.341601,.388034,.425130,.456001,.482427,.505518,.526015,.544438,.561164,.576475,.590589,.603677,.615876,.627297,.638031,.648156,.657735,.666822,.675445,.683645,.691459,.698920,.706056,.712891,.719450,.725750,.731810,.737647,.743274,.748706,.753953,.759026,.763937,.768693,.773304,.777776,.782118,.786335,.790432,.794414,.798286,.802054,.805722,.809295,.812777,.816172,.819483,.822713,.825867,.828946,.831955,.834895,.837769,.840579,.843328,.846018,.848651,.851229,.853754,.856227,.858651,.861026,.863355,.865639,.867878,.870076,.872232,.874348,.876425,.878465,.880468,.882436,.884368,.886268,.888134,.889969,.891772,.893545,.895290,.897005,.898694,.900355,.901989,.903599,.905183,.906742,.908278,.909790,.911280,.912747,.914193,.915617,.917021,.918404,.919767,.921111,.922435,.923741,.925029,.926299,.927552,.928787,.930006,.931209,.932395,.933566,.934721,.935861,.936986,.938097,.939193,.940276,.941345,.942400,.943442,.944471,.945487,.946490,.947482,.948461,.949429,.950385,.951330,.952264,.953186,.954098,.954999,.955890,.956771,.957641,.958502,.959353,.960194,.961026,.961848,.962662,.963466,.964262,.965048,.965827,.966597,.967358,.968112,.968857,.969595,.970325,.971047,.971761,.972468,.973168,.973861,.974546,.975225,.975896,.976561,.977219,.977870,.978515,.979153,.979785,.980411,.981031,.981645,.982254,.982856,.983453,.984044,.984629,.985209,.985783,.986352,.986916,.987474,.988028,.988576,.989119,.989657,.990190,.990719,.991244,.991763,.992279,.992790,.993298,.993801,.994299,.994794,.995285,.995772,.996255,.996735,.997212,.997684,.998154,.998620,.999083,.999543,1.00000,.194351,.291219,.355592,.403719,.442099,.473980,.501221,.524980,.546033,.564921,.582037,.597677,.612068,.625389,.637782,.649364,.660230,.670460,.680120,.689269,.697933,.706156,.713977,.721430,.728545,.735347,.741860,.748106,.754101,.759865,.765411,.770753,.775904,.780875,.785677,.790320,.794811,.799159,.803372,.807457,.811418,.815262,.818995,.822621,.826146,.829573,.832908,.836154,.839315,.842395,.845396,.848322,.851176,.853961,.856679,.859332,.861924,.864456,.866930,.869349,.871714,.874029,.876294,.878511,.880681,.882807,.884890,.886930,.888930,.890890,.892811,.894695,.896543,.898356,.900134,.901880,.903593,.905274,.906926,.908547,.910139,.911704,.913242,.914754,.916239,.917700,.919136,.920548,.921937,.923303,.924647,.925970,.927271,.928551,.929811,.931052,.932273,.933475,.934659,.935825,.936973,.938103,.939217,.940314,.941395,.942461,.943510,.944545,.945564,.946569,.947560,.948536,.949499,.950449,.951385,.952308,.953218,.954116,.955002,.955875,.956737,.957587,.958426,.959254,.960071,.960877,.961673,.962459,.963234,.963999,.964755,.965500,.966237,.966964,.967682,.968391,.969091,.969782,.970465,.971139,.971805,.972463,.973112,.973754,.974388,.975014,.975632,.976243,.976847,.977443,.978033,.978615,.979190,.979759,.980320,.980876,.981424,.981967,.982503,.983032,.983556,.984073,.984585,.985090,.985590,.986084,.986572,.987054,.987531,.988003,.988469,.988930,.989386,.989836,.990282,.990723,.991158,.991589,.992015,.992436,.992853,.993265,.993672,.994075,.994474,.994868,.995258,.995644,.996026,.996404,.996778,.997148,.997515,.997879,.998239,.998597,.998952,.999304,.999653,1.00000,.206872,.309532,.377457,.428019,.468165,.501368,.529615,.554145,.575786,.595116,.612557,.628425,.642962,.656359,.668770,.680317,.691104,.701214,.710721,.719684,.728156,.736181,.743799,.751043,.757945,.764531,.770825,.776848,.782618,.788154,.793471,.798582,.803501,.808238,.812805,.817212,.821467,.825578,.829553,.833399,.837124,.840733,.844232,.847625,.850919,.854117,.857224,.860243,.863179,.866034,.868813,.871518,.874152,.876718,.879219,.881657,.884034,.886353,.888616,.890824,.892980,.895086,.897143,.899154,.901119,.903041,.904919,.906757,.908555,.910314,.912036,.913722,.915372,.916988,.918571,.920122,.921642,.923131,.924590,.926021,.927424,.928800,.930151,.931475,.932775,.934051,.935303,.936532,.937739,.938924,.940087,.941230,.942353,.943456,.944539,.945604,.946650,.947679,.948690,.949683,.950660,.951621,.952566,.953495,.954409,.955308,.956193,.957063,.957919,.958762,.959591,.960407,.961211,.962002,.962780,.963546,.964301,.965044,.965776,.966496,.967206,.967905,.968593,.969271,.969939,.970596,.971244,.971883,.972512,.973132,.973742,.974344,.974937,.975522,.976098,.976666,.977225,.977777,.978321,.978857,.979385,.979906,.980419,.980925,.981423,.981914,.982398,.982875,.983346,.983809,.984266,.984717,.985161,.985599,.986031,.986456,.986876,.987290,.987698,.988101,.988497,.988888,.989272,.989650,.990022,.990389,.990750,.991105,.991455,.991800,.992139,.992474,.992803,.993127,.993446,.993761,.994071,.994376,.994677,.994973,.995264,.995550,.995832,.996109,.996382,.996650,.996914,.997174,.997429,.997680,.997928,.998171,.998411,.998648,.998881,.999111,.999337,.999561,.999782,1.00000,.214692,.320982,.391146,.443251,.484525,.518582,.547487,.572530,.594571,.614214,.631895,.647943,.662611,.676098,.688561,.700131,.710913,.720996,.730455,.739352,.747745,.755681,.763200,.770338,.777125,.783589,.789755,.795644,.801277,.806670,.811840,.816801,.821566,.826147,.830555,.834800,.838892,.842837,.846646,.850324,.853880,.857321,.860652,.863878,.867004,.870036,.872976,.875830,.878600,.881291,.883906,.886448,.888919,.891324,.893663,.895940,.898158,.900318,.902422,.904473,.906473,.908424,.910328,.912186,.914000,.915772,.917502,.919192,.920844,.922458,.924036,.925579,.927087,.928563,.930007,.931419,.932802,.934155,.935479,.936776,.938047,.939292,.940512,.941708,.942881,.944031,.945158,.946264,.947348,.948412,.949456,.950480,.951485,.952471,.953440,.954390,.955323,.956239,.957139,.958023,.958890,.959743,.960580,.961403,.962211,.963005,.963786,.964553,.965306,.966047,.966776,.967492,.968196,.968888,.969569,.970238,.970897,.971544,.972181,.972808,.973424,.974029,.974625,.975211,.975787,.976353,.976911,.977459,.977998,.978528,.979050,.979564,.980069,.980566,.981055,.981537,.982010,.982477,.982936,.983387,.983832,.984268,.984698,.985120,.985536,.985944,.986346,.986741,.987130,.987512,.987889,.988259,.988623,.988981,.989334,.989680,.990022,.990358,.990688,.991013,.991332,.991646,.991953,.992255,.992551,.992842,.993127,.993408,.993683,.993953,.994218,.994479,.994734,.994985,.995232,.995474,.995712,.995945,.996174,.996400,.996620,.996835,.997046,.997253,.997455,.997652,.997846,.998035,.998220,.998402,.998579,.998752,.998921,.999086,.999248,.999405,.999559,.999710,.999857,1.00000,.224132,.334728,.407492,.461349,.503870,.538839,.568419,.593963,.616370,.636272,.654128,.670281,.684996,.698481,.710901,.722393,.733066,.743015,.752316,.761037,.769246,.776991,.784314,.791250,.797832,.804087,.810042,.815717,.821133,.826308,.831258,.835997,.840540,.844899,.849084,.853105,.856973,.860695,.864280,.867735,.871071,.874293,.877409,.880422,.883338,.886162,.888897,.891547,.894116,.896608,.899027,.901374,.903653,.905867,.908018,.910109,.912143,.914121,.916045,.917917,.919742,.921520,.923252,.924942,.926589,.928196,.929764,.931294,.932788,.934246,.935670,.937060,.938419,.939746,.941043,.942311,.943550,.944762,.945947,.947106,.948240,.949350,.950437,.951500,.952542,.953562,.954561,.955539,.956498,.957437,.958358,.959260,.960144,.961011,.961860,.962694,.963511,.964312,.965097,.965868,.966624,.967365,.968092,.968806,.969505,.970192,.970865,.971526,.972174,.972811,.973436,.974049,.974651,.975242,.975822,.976392,.976951,.977500,.978040,.978570,.979090,.979600,.980101,.980593,.981075,.981549,.982014,.982471,.982919,.983359,.983791,.984216,.984633,.985042,.985444,.985839,.986227,.986608,.986982,.987350,.987711,.988065,.988413,.988754,.989089,.989418,.989741,.990057,.990368,.990674,.990973,.991268,.991557,.991841,.992119,.992393,.992662,.992926,.993185,.993440,.993689,.993933,.994171,.994405,.994633,.994857,.995076,.995291,.995500,.995706,.995907,.996104,.996296,.996485,.996670,.996851,.997028,.997201,.997371,.997537,.997699,.997856,.998009,.998157,.998302,.998442,.998579,.998712,.998841,.998966,.999088,.999205,.999318,.999428,.999533,.999634,.999731,.999825,.999914,1.00000,.235745,.351536,.427368,.483238,.527145,.563089,.593353,.619368,.642083,.662166,.680101,.696252,.710896,.724255,.736503,.747783,.758212,.767888,.776892,.785296,.793190,.800624,.807638,.814268,.820547,.826502,.832159,.837539,.842664,.847551,.852215,.856673,.860937,.865019,.868931,.872683,.876283,.879741,.883065,.886262,.889343,.892315,.895183,.897952,.900628,.903213,.905713,.908132,.910473,.912740,.914935,.917063,.919125,.921125,.923065,.924947,.926775,.928549,.930272,.931946,.933575,.935160,.936702,.938204,.939667,.941092,.942480,.943832,.945151,.946436,.947690,.948912,.950105,.951269,.952404,.953513,.954595,.955651,.956683,.957691,.958675,.959637,.960576,.961495,.962393,.963271,.964129,.964968,.965789,.966591,.967377,.968145,.968897,.969632,.970352,.971057,.971747,.972422,.973084,.973731,.974365,.974985,.975592,.976187,.976768,.977338,.977896,.978442,.978978,.979502,.980015,.980518,.981010,.981493,.981966,.982430,.982884,.983329,.983765,.984193,.984612,.985022,.985423,.985816,.986201,.986577,.986946,.987308,.987662,.988009,.988348,.988681,.989007,.989326,.989639,.989946,.990246,.990541,.990829,.991112,.991389,.991660,.991924,.992184,.992437,.992685,.992928,.993166,.993398,.993626,.993849,.994067,.994280,.994489,.994693,.994894,.995090,.995282,.995470,.995653,.995833,.996008,.996178,.996344,.996506,.996664,.996818,.996968,.997115,.997258,.997397,.997533,.997665,.997794,.997920,.998043,.998163,.998280,.998394,.998505,.998612,.998716,.998816,.998912,.999005,.999095,.999182,.999265,.999346,.999424,.999498,.999569,.999636,.999700,.999759,.999815,.999867,.999915,.999960,1.00000,.239857,.357467,.434356,.490908,.535274,.571531,.602007,.628158,.650954,.671073,.689010,.705133,.719729,.733020,.745185,.756369,.766691,.776252,.785134,.793409,.801173,.808476,.815358,.821857,.828003,.833827,.839352,.844601,.849594,.854350,.858885,.863214,.867349,.871304,.875089,.878715,.882191,.885525,.888726,.891802,.894766,.897624,.900382,.903045,.905617,.908102,.910505,.912830,.915080,.917258,.919367,.921411,.923392,.925312,.927175,.928983,.930737,.932440,.934094,.935701,.937264,.938785,.940265,.941706,.943110,.944476,.945808,.947106,.948371,.949604,.950806,.951979,.953123,.954239,.955328,.956391,.957428,.958441,.959430,.960396,.961340,.962262,.963162,.964041,.964901,.965741,.966562,.967364,.968149,.968916,.969667,.970401,.971119,.971821,.972508,.973181,.973839,.974483,.975113,.975730,.976334,.976924,.977502,.978067,.978621,.979162,.979692,.980211,.980719,.981216,.981703,.982179,.982646,.983103,.983551,.983989,.984419,.984840,.985252,.985656,.986051,.986437,.986816,.987186,.987548,.987902,.988248,.988588,.988920,.989245,.989563,.989874,.990179,.990477,.990769,.991055,.991335,.991609,.991878,.992141,.992398,.992649,.992893,.993133,.993366,.993594,.993817,.994035,.994248,.994456,.994659,.994857,.995051,.995240,.995426,.995606,.995783,.995956,.996125,.996290,.996450,.996606,.996758,.996906,.997050,.997190,.997326,.997458,.997587,.997712,.997834,.997953,.998068,.998181,.998290,.998397,.998501,.998601,.998700,.998795,.998887,.998975,.999060,.999141,.999219,.999294,.999367,.999436,.999502,.999566,.999626,.999683,.999736,.999786,.999832,.999873,.999910,.999945,.999974,1.00000,.238991,.356130,.432683,.488965,.533103,.569160,.599456,.625442,.648086,.668063,.685866,.701864,.716339,.729516,.741572,.752651,.762874,.772337,.781126,.789311,.797000,.804239,.811069,.817525,.823638,.829436,.834943,.840181,.845169,.849926,.854466,.858804,.862953,.866925,.870731,.874381,.877884,.881248,.884481,.887591,.890590,.893484,.896280,.898981,.901591,.904117,.906560,.908926,.911217,.913437,.915588,.917675,.919699,.921663,.923569,.925420,.927218,.928965,.930664,.932314,.933921,.935486,.937009,.938493,.939939,.941348,.942722,.944061,.945367,.946641,.947884,.949097,.950281,.951436,.952564,.953666,.954742,.955793,.956821,.957824,.958805,.959764,.960701,.961617,.962513,.963389,.964247,.965085,.965905,.966708,.967494,.968263,.969015,.969752,.970473,.971180,.971872,.972549,.973213,.973863,.974499,.975123,.975733,.976331,.976916,.977490,.978052,.978602,.979142,.979670,.980188,.980696,.981193,.981681,.982159,.982628,.983087,.983538,.983980,.984413,.984838,.985253,.985660,.986059,.986449,.986831,.987206,.987573,.987932,.988284,.988629,.988967,.989299,.989623,.989941,.990253,.990559,.990859,.991152,.991440,.991722,.991997,.992265,.992528,.992785,.993036,.993281,.993521,.993755,.993985,.994209,.994428,.994642,.994852,.995057,.995257,.995453,.995645,.995832,.996016,.996194,.996367,.996535,.996698,.996857,.997011,.997161,.997307,.997448,.997586,.997719,.997849,.997975,.998098,.998217,.998333,.998445,.998555,.998661,.998765,.998864,.998958,.999049,.999136,.999218,.999298,.999374,.999447,.999516,.999583,.999645,.999703,.999756,.999806,.999850,.999889,.999924,.999955,.999980,1.00000,.236499,.352466,.428285,.484052,.527804,.563561,.593618,.619410,.641894,.661739,.679432,.695337,.709736,.722848,.734849,.745884,.756068,.765502,.774266,.782431,.790112,.797353,.804193,.810668,.816807,.822637,.828181,.833462,.838497,.843305,.847900,.852296,.856506,.860543,.864415,.868133,.871707,.875143,.878450,.881634,.884708,.887676,.890546,.893320,.896004,.898601,.901117,.903554,.905916,.908206,.910428,.912584,.914677,.916709,.918684,.920602,.922467,.924281,.926044,.927760,.929432,.931060,.932646,.934192,.935699,.937169,.938602,.940001,.941365,.942697,.943997,.945266,.946506,.947716,.948899,.950054,.951184,.952287,.953366,.954421,.955453,.956462,.957449,.958414,.959359,.960284,.961189,.962074,.962941,.963790,.964622,.965436,.966233,.967014,.967779,.968529,.969264,.969984,.970690,.971381,.972059,.972723,.973374,.974012,.974638,.975251,.975852,.976442,.977020,.977587,.978142,.978688,.979223,.979747,.980262,.980767,.981263,.981749,.982226,.982695,.983154,.983604,.984045,.984478,.984902,.985318,.985726,.986126,.986519,.986904,.987281,.987652,.988015,.988371,.988721,.989064,.989401,.989731,.990056,.990374,.990685,.990990,.991288,.991580,.991866,.992146,.992420,.992688,.992951,.993208,.993459,.993706,.993947,.994183,.994415,.994641,.994863,.995081,.995294,.995502,.995705,.995902,.996093,.996279,.996460,.996636,.996806,.996972,.997133,.997290,.997443,.997591,.997735,.997874,.998011,.998143,.998271,.998396,.998518,.998636,.998749,.998856,.998959,.999057,.999150,.999239,.999325,.999406,.999483,.999557,.999625,.999689,.999747,.999801,.999848,.999890,.999926,.999957,.999981,1.00000,.234277,.349206,.424380,.479697,.523115,.558615,.588469,.614098,.636450,.656188,.673792,.689625,.703965,.717029,.728992,.739995,.750156,.759572,.768324,.776481,.784162,.791410,.798264,.804759,.810923,.816782,.822361,.827679,.832756,.837608,.842249,.846695,.850958,.855047,.858975,.862751,.866383,.869879,.873247,.876493,.879629,.882659,.885589,.888425,.891169,.893827,.896402,.898899,.901320,.903669,.905949,.908163,.910313,.912403,.914434,.916408,.918329,.920198,.922017,.923787,.925512,.927193,.928832,.930430,.931989,.933509,.934992,.936440,.937853,.939233,.940581,.941897,.943183,.944440,.945668,.946868,.948042,.949189,.950312,.951410,.952484,.953535,.954564,.955571,.956557,.957522,.958468,.959394,.960301,.961189,.962060,.962913,.963749,.964569,.965372,.966159,.966932,.967689,.968431,.969159,.969873,.970574,.971260,.971934,.972594,.973242,.973878,.974501,.975113,.975714,.976303,.976881,.977449,.978006,.978553,.979090,.979617,.980135,.980644,.981143,.981633,.982113,.982585,.983047,.983501,.983947,.984384,.984813,.985234,.985648,.986054,.986452,.986843,.987227,.987604,.987975,.988338,.988695,.989046,.989390,.989728,.990059,.990382,.990700,.991011,.991316,.991614,.991907,.992194,.992475,.992750,.993020,.993285,.993545,.993799,.994049,.994293,.994533,.994768,.994998,.995223,.995441,.995653,.995859,.996060,.996255,.996445,.996630,.996810,.996986,.997156,.997322,.997483,.997640,.997793,.997942,.998087,.998228,.998365,.998498,.998626,.998746,.998862,.998971,.999076,.999175,.999269,.999359,.999445,.999527,.999602,.999671,.999734,.999793,.999843,.999887,.999925,.999958,.999982,1.00000,.231713,.345476,.419947,.474791,.517873,.553126,.582797,.608290,.630541,.650205,.667758,.683557,.697878,.710936,.722902,.733918,.744099,.753540,.762323,.770516,.778237,.785529,.792431,.798976,.805192,.811107,.816744,.822121,.827259,.832173,.836879,.841389,.845717,.849874,.853869,.857713,.861413,.864978,.868415,.871731,.874935,.878033,.881029,.883929,.886737,.889458,.892095,.894653,.897134,.899542,.901880,.904151,.906358,.908503,.910589,.912617,.914591,.916512,.918383,.920204,.921980,.923710,.925398,.927043,.928649,.930215,.931744,.933237,.934694,.936118,.937508,.938867,.940194,.941492,.942760,.944001,.945214,.946400,.947561,.948696,.949807,.950895,.951961,.953004,.954026,.955026,.956007,.956967,.957909,.958831,.959735,.960621,.961490,.962342,.963178,.963997,.964801,.965589,.966362,.967121,.967866,.968596,.969313,.970016,.970707,.971385,.972050,.972703,.973344,.973974,.974592,.975200,.975796,.976382,.976958,.977523,.978078,.978624,.979160,.979687,.980205,.980713,.981212,.981701,.982183,.982655,.983119,.983575,.984023,.984463,.984895,.985320,.985737,.986147,.986550,.986946,.987336,.987718,.988094,.988464,.988826,.989182,.989530,.989872,.990207,.990536,.990859,.991175,.991485,.991790,.992089,.992382,.992669,.992951,.993228,.993500,.993766,.994028,.994285,.994537,.994782,.995020,.995252,.995478,.995698,.995911,.996119,.996322,.996518,.996710,.996896,.997078,.997254,.997426,.997593,.997756,.997915,.998069,.998219,.998365,.998504,.998636,.998762,.998882,.998996,.999104,.999207,.999305,.999399,.999488,.999570,.999645,.999715,.999779,.999834,.999882,.999923,.999958,.999983,1.00000,.230257,.343333,.417373,.471913,.514768,.549843,.579372,.604749,.626904,.646488,.663974,.679718,.693991,.707009,.718942,.729930,.740087,.749509,.758276,.766456,.774169,.781459,.788362,.794913,.801139,.807066,.812717,.818113,.823270,.828207,.832936,.837473,.841828,.846014,.850039,.853914,.857647,.861245,.864717,.868068,.871307,.874441,.877473,.880409,.883253,.886010,.888683,.891276,.893794,.896238,.898612,.900919,.903162,.905343,.907464,.909529,.911538,.913495,.915401,.917258,.919068,.920834,.922556,.924236,.925876,.927477,.929040,.930566,.932057,.933514,.934938,.936329,.937689,.939020,.940320,.941593,.942838,.944056,.945248,.946414,.947557,.948676,.949772,.950845,.951897,.952927,.953937,.954927,.955898,.956849,.957782,.958697,.959594,.960474,.961337,.962184,.963015,.963830,.964630,.965416,.966186,.966943,.967686,.968415,.969131,.969835,.970525,.971203,.971869,.972524,.973167,.973798,.974419,.975029,.975628,.976217,.976795,.977364,.977924,.978473,.979013,.979544,.980065,.980577,.981080,.981575,.982061,.982538,.983008,.983469,.983923,.984369,.984807,.985238,.985661,.986078,.986487,.986890,.987286,.987676,.988058,.988433,.988801,.989163,.989517,.989865,.990207,.990542,.990871,.991194,.991511,.991823,.992129,.992429,.992724,.993013,.993297,.993576,.993851,.994120,.994382,.994637,.994885,.995127,.995363,.995592,.995815,.996033,.996244,.996451,.996651,.996847,.997037,.997223,.997403,.997579,.997751,.997917,.998080,.998238,.998389,.998532,.998669,.998798,.998922,.999039,.999151,.999257,.999358,.999454,.999542,.999624,.999699,.999767,.999826,.999877,.999921,.999958,.999983,1.00000,.227837,.339779,.413113,.467159,.509646,.544438,.573743,.598939,.620947,.640412,.657799,.673461,.687668,.700631,.712520,.723473,.733602,.743003,.751755,.759925,.767634,.774926,.781838,.788401,.794644,.800592,.806267,.811690,.816878,.821847,.826612,.831186,.835581,.839807,.843876,.847795,.851573,.855219,.858739,.862139,.865428,.868612,.871695,.874682,.877578,.880388,.883114,.885760,.888331,.890829,.893257,.895618,.897914,.900150,.902325,.904444,.906508,.908519,.910480,.912391,.914256,.916075,.917851,.919585,.921278,.922932,.924549,.926128,.927672,.929181,.930657,.932100,.933512,.934894,.936246,.937569,.938865,.940133,.941375,.942592,.943784,.944952,.946097,.947219,.948319,.949397,.950455,.951492,.952509,.953507,.954486,.955447,.956390,.957315,.958223,.959115,.959990,.960850,.961694,.962523,.963337,.964136,.964922,.965693,.966451,.967196,.967928,.968648,.969355,.970049,.970733,.971404,.972064,.972714,.973352,.973980,.974597,.975205,.975802,.976389,.976967,.977535,.978093,.978642,.979182,.979713,.980236,.980750,.981255,.981752,.982241,.982722,.983195,.983661,.984119,.984570,.985014,.985451,.985881,.986304,.986720,.987128,.987529,.987923,.988310,.988690,.989064,.989431,.989792,.990147,.990496,.990838,.991175,.991506,.991831,.992151,.992465,.992774,.993078,.993377,.993668,.993952,.994228,.994498,.994761,.995017,.995267,.995511,.995748,.995980,.996205,.996426,.996640,.996850,.997054,.997253,.997447,.997637,.997822,.998002,.998173,.998337,.998492,.998640,.998780,.998914,.999042,.999163,.999279,.999388,.999489,.999582,.999667,.999744,.999811,.999868,.999916,.999958,.999984,1.00000,.226026,.337114,.409912,.463580,.505783,.540353,.569479,.594531,.616420,.635785,.653089,.668681,.682828,.695742,.707589,.718506,.728606,.737983,.746714,.754868,.762568,.769855,.776765,.783331,.789581,.795540,.801228,.806667,.811874,.816864,.821652,.826251,.830672,.834927,.839025,.842976,.846787,.850466,.854020,.857455,.860781,.864001,.867121,.870147,.873081,.875929,.878694,.881380,.883991,.886528,.888996,.891398,.893735,.896011,.898228,.900388,.902493,.904546,.906547,.908500,.910406,.912266,.914083,.915858,.917592,.919286,.920943,.922562,.924146,.925694,.927210,.928693,.930144,.931564,.932955,.934317,.935651,.936957,.938237,.939491,.940721,.941926,.943108,.944267,.945404,.946519,.947613,.948687,.949740,.950774,.951788,.952785,.953763,.954723,.955666,.956593,.957502,.958396,.959274,.960137,.960985,.961818,.962637,.963442,.964233,.965011,.965775,.966527,.967267,.967994,.968709,.969412,.970104,.970785,.971455,.972114,.972762,.973400,.974028,.974646,.975254,.975852,.976440,.977019,.977589,.978150,.978702,.979245,.979779,.980305,.980823,.981333,.981835,.982329,.982815,.983294,.983766,.984230,.984688,.985138,.985581,.986016,.986445,.986865,.987279,.987686,.988086,.988480,.988867,.989248,.989622,.989990,.990352,.990709,.991059,.991404,.991743,.992077,.992405,.992728,.993044,.993351,.993651,.993944,.994230,.994509,.994782,.995048,.995307,.995560,.995807,.996049,.996284,.996514,.996739,.996958,.997172,.997381,.997585,.997784,.997974,.998155,.998327,.998491,.998648,.998797,.998939,.999074,.999203,.999326,.999438,.999541,.999635,.999722,.999796,.999858,.999912,.999958,.999984,1.00000,.222847,.332434,.404288,.457289,.498992,.533171,.561985,.586781,.608459,.627647,.644803,.660271,.674313,.687137,.698909,.709764,.719811,.729144,.737840,.745965,.753644,.760919,.767826,.774394,.780652,.786623,.792330,.797792,.803025,.808046,.812868,.817504,.821966,.826263,.830406,.834404,.838264,.841994,.845601,.849092,.852473,.855750,.858928,.862012,.865006,.867914,.870740,.873488,.876160,.878760,.881292,.883757,.886158,.888498,.890779,.893004,.895174,.897292,.899359,.901377,.903348,.905274,.907157,.908998,.910798,.912558,.914280,.915966,.917615,.919230,.920811,.922359,.923876,.925362,.926818,.928246,.929644,.931016,.932361,.933680,.934974,.936244,.937490,.938713,.939914,.941092,.942250,.943387,.944503,.945600,.946677,.947736,.948776,.949798,.950803,.951791,.952762,.953717,.954655,.955579,.956487,.957380,.958259,.959123,.959974,.960811,.961634,.962445,.963243,.964029,.964802,.965563,.966313,.967051,.967778,.968494,.969199,.969893,.970577,.971251,.971915,.972568,.973212,.973846,.974471,.975087,.975693,.976290,.976879,.977459,.978030,.978594,.979149,.979696,.980235,.980767,.981291,.981808,.982317,.982819,.983314,.983800,.984280,.984751,.985216,.985673,.986124,.986567,.987004,.987434,.987858,.988275,.988686,.989091,.989490,.989883,.990270,.990651,.991027,.991397,.991759,.992113,.992459,.992797,.993128,.993452,.993769,.994079,.994381,.994678,.994968,.995251,.995528,.995800,.996065,.996325,.996579,.996828,.997071,.997309,.997536,.997754,.997961,.998160,.998349,.998531,.998704,.998869,.999028,.999179,.999317,.999445,.999561,.999668,.999759,.999836,.999901,.999956,.999985,1.00000,.220813,.329435,.400679,.453247,.494623,.528544,.557150,.581775,.603310,.622379,.639433,.654814,.668782,.681542,.693260,.704067,.714074,.723372,.732039,.740139,.747799,.755060,.761957,.768520,.774776,.780750,.786462,.791931,.797175,.802209,.807046,.811699,.816179,.820498,.824663,.828685,.832570,.836327,.839961,.843480,.846891,.850198,.853408,.856524,.859550,.862492,.865351,.868133,.870841,.873476,.876043,.878544,.880982,.883359,.885678,.887940,.890147,.892303,.894408,.896464,.898474,.900439,.902361,.904241,.906080,.907880,.909642,.911368,.913057,.914712,.916334,.917923,.919480,.921007,.922504,.923972,.925411,.926824,.928209,.929569,.930904,.932215,.933502,.934766,.936007,.937227,.938425,.939603,.940760,.941897,.943015,.944115,.945195,.946258,.947303,.948331,.949343,.950338,.951317,.952280,.953228,.954161,.955079,.955984,.956874,.957751,.958614,.959465,.960302,.961127,.961940,.962741,.963529,.964307,.965073,.965827,.966571,.967305,.968027,.968740,.969442,.970134,.970816,.971489,.972152,.972805,.973450,.974085,.974711,.975329,.975938,.976539,.977132,.977716,.978293,.978862,.979423,.979977,.980523,.981062,.981593,.982116,.982631,.983139,.983640,.984134,.984620,.985100,.985572,.986038,.986498,.986950,.987397,.987837,.988271,.988699,.989121,.989537,.989947,.990352,.990748,.991136,.991516,.991888,.992253,.992610,.992960,.993302,.993638,.993967,.994289,.994605,.994914,.995217,.995514,.995805,.996090,.996370,.996643,.996912,.997169,.997415,.997651,.997877,.998094,.998301,.998500,.998691,.998874,.999049,.999210,.999358,.999495,.999620,.999726,.999816,.999891,.999955,.999985,1.00000,.218380,.325835,.396333,.448366,.489332,.522927,.551265,.575668,.597014,.615920,.632834,.648093,.661954,.674620,.686254,.696988,.706929,.716169,.724784,.732838,.740460,.747689,.754560,.761102,.767343,.773306,.779011,.784478,.789723,.794760,.799604,.804267,.808760,.813093,.817275,.821315,.825221,.829001,.832659,.836204,.839642,.842978,.846218,.849365,.852424,.855399,.858293,.861111,.863854,.866527,.869132,.871672,.874150,.876567,.878926,.881229,.883479,.885677,.887825,.889924,.891978,.893987,.895953,.897878,.899762,.901608,.903415,.905187,.906922,.908624,.910292,.911927,.913531,.915105,.916649,.918164,.919651,.921111,.922544,.923951,.925334,.926693,.928028,.929340,.930631,.931899,.933147,.934374,.935581,.936768,.937936,.939085,.940216,.941329,.942425,.943503,.944565,.945610,.946640,.947654,.948653,.949637,.950606,.951562,.952503,.953431,.954346,.955247,.956136,.957012,.957876,.958728,.959568,.960397,.961214,.962020,.962815,.963600,.964373,.965137,.965890,.966634,.967367,.968090,.968804,.969509,.970205,.970891,.971568,.972237,.972897,.973549,.974193,.974828,.975455,.976075,.976686,.977290,.977887,.978476,.979058,.979631,.980197,.980755,.981306,.981850,.982386,.982916,.983438,.983954,.984463,.984966,.985462,.985951,.986435,.986912,.987383,.987848,.988308,.988761,.989206,.989643,.990072,.990493,.990906,.991311,.991709,.992100,.992484,.992860,.993230,.993593,.993950,.994300,.994644,.994981,.995312,.995638,.995958,.996272,.996574,.996864,.997144,.997413,.997672,.997922,.998162,.998393,.998615,.998829,.999027,.999210,.999380,.999537,.999669,.999780,.999873,.999952,.999986,1.00000,.216783,.323473,.393483,.445167,.485865,.519248,.547412,.571670,.592893,.611695,.628519,.643699,.657491,.670098,.681679,.692366,.702266,.711470,.720052,.728077,.735675,.742883,.749737,.756266,.762496,.768451,.774151,.779614,.784858,.789896,.794743,.799410,.803908,.808248,.812439,.816489,.820406,.824197,.827868,.831427,.834879,.838231,.841486,.844650,.847727,.850720,.853633,.856470,.859233,.861926,.864552,.867113,.869612,.872051,.874433,.876759,.879031,.881253,.883424,.885547,.887625,.889659,.891650,.893601,.895511,.897383,.899217,.901015,.902779,.904508,.906203,.907867,.909500,.911102,.912675,.914219,.915736,.917225,.918688,.920125,.921538,.922926,.924292,.925635,.926956,.928255,.929533,.930791,.932029,.933247,.934446,.935626,.936788,.937933,.939059,.940169,.941262,.942339,.943400,.944445,.945476,.946492,.947493,.948480,.949454,.950414,.951361,.952295,.953217,.954126,.955022,.955907,.956780,.957642,.958492,.959332,.960160,.960978,.961785,.962582,.963369,.964145,.964912,.965669,.966417,.967155,.967885,.968605,.969316,.970019,.970713,.971399,.972076,.972745,.973406,.974060,.974705,.975343,.975974,.976597,.977212,.977820,.978420,.979012,.979597,.980175,.980746,.981310,.981866,.982416,.982960,.983497,.984027,.984551,.985069,.985580,.986085,.986585,.987078,.987566,.988045,.988516,.988980,.989435,.989883,.990323,.990755,.991180,.991599,.992010,.992414,.992812,.993203,.993587,.993965,.994337,.994702,.995062,.995416,.995764,.996099,.996423,.996736,.997038,.997330,.997612,.997884,.998146,.998399,.998644,.998872,.999083,.999280,.999463,.999618,.999748,.999857,.999949,.999986,1.00000,.215609,.321739,.391393,.442822,.483326,.516555,.544594,.568748,.589884,.608611,.625371,.640496,.654240,.666805,.678349,.689004,.698877,.708056,.716617,.724623,.732205,.739400,.746243,.752763,.758986,.764935,.770631,.776092,.781335,.786373,.791221,.795891,.800393,.804737,.808933,.812989,.816912,.820711,.824391,.827958,.831419,.834781,.838047,.841222,.844310,.847315,.850240,.853089,.855866,.858573,.861212,.863787,.866300,.868754,.871150,.873491,.875779,.878016,.880203,.882342,.884436,.886486,.888494,.890461,.892389,.894278,.896130,.897946,.899727,.901474,.903188,.904870,.906521,.908142,.909733,.911296,.912832,.914340,.915822,.917279,.918711,.920119,.921505,.922868,.924209,.925529,.926827,.928106,.929365,.930604,.931824,.933026,.934209,.935375,.936524,.937655,.938771,.939869,.940952,.942020,.943073,.944111,.945135,.946145,.947142,.948125,.949095,.950052,.950996,.951929,.952849,.953757,.954654,.955539,.956413,.957276,.958128,.958970,.959801,.960622,.961432,.962233,.963024,.963806,.964578,.965341,.966094,.966839,.967575,.968302,.969021,.969731,.970434,.971128,.971814,.972492,.973163,.973826,.974481,.975129,.975770,.976402,.977027,.977645,.978256,.978859,.979455,.980044,.980627,.981203,.981772,.982334,.982890,.983440,.983983,.984521,.985052,.985577,.986096,.986610,.987115,.987613,.988102,.988584,.989058,.989524,.989984,.990436,.990880,.991318,.991749,.992174,.992592,.993003,.993408,.993806,.994199,.994585,.994966,.995341,.995703,.996054,.996394,.996722,.997040,.997348,.997646,.997934,.998213,.998483,.998735,.998971,.999191,.999396,.999570,.999717,.999842,.999947,.999986,1.00000,.214473,.320073,.389399,.440600,.480936,.514036,.541975,.566048,.587120,.605796,.622514,.637606,.651324,.663868,.675397,.686040,.695905,.705079,.713638,.721645,.729228,.736426,.743273,.749797,.756026,.761981,.767684,.773153,.778403,.783450,.788307,.792986,.797498,.801852,.806059,.810126,.814061,.817870,.821562,.825141,.828615,.831989,.835267,.838455,.841555,.844573,.847511,.850374,.853164,.855884,.858536,.861125,.863652,.866119,.868529,.870884,.873185,.875436,.877637,.879790,.881898,.883962,.885984,.887965,.889907,.891811,.893677,.895507,.897303,.899064,.900793,.902490,.904155,.905791,.907397,.908975,.910525,.912048,.913545,.915016,.916463,.917887,.919287,.920665,.922022,.923357,.924671,.925965,.927240,.928495,.929731,.930948,.932148,.933329,.934494,.935642,.936773,.937888,.938987,.940071,.941140,.942195,.943236,.944262,.945276,.946276,.947262,.948237,.949198,.950148,.951085,.952011,.952924,.953827,.954718,.955599,.956469,.957328,.958176,.959015,.959844,.960663,.961472,.962272,.963062,.963844,.964616,.965380,.966135,.966882,.967620,.968350,.969072,.969786,.970492,.971191,.971881,.972565,.973241,.973909,.974570,.975224,.975870,.976508,.977140,.977764,.978381,.978991,.979595,.980192,.980782,.981365,.981943,.982514,.983078,.983637,.984190,.984736,.985277,.985812,.986339,.986858,.987369,.987872,.988368,.988856,.989337,.989811,.990277,.990737,.991190,.991636,.992076,.992509,.992935,.993356,.993770,.994178,.994581,.994977,.995361,.995734,.996096,.996446,.996786,.997116,.997436,.997746,.998047,.998339,.998612,.998869,.999109,.999335,.999526,.999689,.999828,.999945,.999986,1.00000,.213037,.317960,.386861,.437762,.477873,.510798,.538596,.562556,.583534,.602131,.618784,.633821,.647494,.659999,.671496,.682113,.691955,.701112,.709657,.717652,.725226,.732417,.739258,.745779,.752005,.757959,.763662,.769132,.774384,.779434,.784295,.788979,.793496,.797857,.802070,.806144,.810087,.813905,.817605,.821194,.824677,.828061,.831351,.834550,.837662,.840692,.843643,.846518,.849321,.852054,.854721,.857324,.859865,.862347,.864772,.867141,.869458,.871724,.873941,.876110,.878234,.880315,.882354,.884352,.886311,.888232,.890117,.891965,.893779,.895559,.897307,.899022,.900707,.902362,.903988,.905585,.907155,.908698,.910215,.911707,.913174,.914619,.916040,.917439,.918817,.920173,.921509,.922825,.924121,.925397,.926655,.927895,.929117,.930321,.931508,.932678,.933832,.934970,.936092,.937198,.938291,.939368,.940432,.941483,.942519,.943543,.944554,.945552,.946538,.947512,.948473,.949423,.950362,.951289,.952205,.953111,.954006,.954890,.955764,.956627,.957481,.958326,.959161,.959987,.960803,.961611,.962409,.963200,.963981,.964754,.965519,.966276,.967025,.967765,.968498,.969224,.969942,.970652,.971356,.972052,.972741,.973422,.974096,.974763,.975423,.976077,.976723,.977363,.977996,.978623,.979243,.979858,.980466,.981067,.981663,.982253,.982837,.983415,.983988,.984555,.985114,.985665,.986208,.986744,.987273,.987794,.988308,.988815,.989316,.989809,.990296,.990776,.991249,.991716,.992177,.992632,.993080,.993523,.993959,.994390,.994809,.995217,.995613,.995998,.996373,.996737,.997092,.997437,.997772,.998098,.998406,.998697,.998970,.999229,.999450,.999640,.999802,.999942,.999986,1.00000,.211891,.316276,.384842,.435509,.475446,.508237,.535930,.559804,.580713,.599254,.615862,.630861,.644503,.656984,.668461,.679063,.688894,.698042,.706581,.714574,.722146,.729336,.736178,.742700,.748928,.754886,.760593,.766067,.771325,.776381,.781248,.785938,.790463,.794831,.799052,.803135,.807086,.810914,.814623,.818221,.821715,.825110,.828410,.831619,.834743,.837784,.840747,.843634,.846450,.849195,.851875,.854490,.857044,.859539,.861977,.864360,.866691,.868970,.871200,.873383,.875521,.877616,.879669,.881681,.883655,.885590,.887488,.889351,.891179,.892974,.894736,.896466,.898165,.899835,.901475,.903087,.904671,.906229,.907760,.909266,.910749,.912208,.913644,.915058,.916451,.917823,.919175,.920506,.921818,.923111,.924385,.925641,.926879,.928099,.929303,.930490,.931660,.932815,.933954,.935077,.936187,.937282,.938363,.939430,.940484,.941525,.942553,.943569,.944572,.945563,.946542,.947510,.948466,.949411,.950345,.951268,.952180,.953082,.953973,.954855,.955727,.956589,.957442,.958286,.959121,.959947,.960765,.961573,.962374,.963166,.963950,.964726,.965494,.966254,.967007,.967752,.968489,.969220,.969943,.970659,.971367,.972069,.972764,.973451,.974132,.974807,.975474,.976135,.976790,.977438,.978080,.978716,.979346,.979970,.980588,.981200,.981807,.982407,.983003,.983592,.984174,.984749,.985316,.985875,.986428,.986973,.987512,.988043,.988568,.989086,.989598,.990103,.990601,.991094,.991580,.992060,.992535,.993003,.993465,.993922,.994367,.994801,.995224,.995636,.996038,.996430,.996811,.997183,.997546,.997900,.998235,.998552,.998853,.999138,.999384,.999596,.999780,.999939,.999986,1.00000]
	# Z=7
	      Z7=[.166924,.250516,.306332,.348259,.381853,.409892,.433963,.455058,.473839,.490768,.506182,.520333,.533417,.545585,.556959,.567640,.577708,.587231,.596267,.604865,.613060,.620890,.628386,.635575,.642483,.649131,.655538,.661722,.667697,.673479,.679078,.684508,.689777,.694896,.699872,.704715,.709431,.714026,.718508,.722882,.727150,.731317,.735390,.739370,.743264,.747074,.750805,.754459,.758039,.761549,.764991,.768368,.771683,.774937,.778133,.781273,.784358,.787392,.790375,.793309,.796195,.799035,.801829,.804579,.807286,.809953,.812579,.815167,.817717,.820230,.822708,.825151,.827560,.829937,.832282,.834595,.836879,.839133,.841358,.843556,.845725,.847868,.849984,.852074,.854138,.856178,.858194,.860186,.862156,.864102,.866027,.867930,.869812,.871673,.873514,.875335,.877137,.878920,.880684,.882430,.884158,.885868,.887561,.889236,.890895,.892537,.894163,.895773,.897367,.898946,.900510,.902059,.903594,.905114,.906621,.908113,.909592,.911058,.912511,.913951,.915378,.916792,.918194,.919584,.920962,.922328,.923682,.925025,.926356,.927677,.928986,.930285,.931573,.932851,.934118,.935375,.936623,.937860,.939088,.940306,.941514,.942714,.943904,.945085,.946258,.947421,.948576,.949722,.950860,.951990,.953111,.954224,.955330,.956427,.957517,.958599,.959673,.960740,.961800,.962852,.963897,.964935,.965967,.966991,.968009,.969021,.970026,.971024,.972016,.973002,.973982,.974956,.975923,.976885,.977840,.978790,.979734,.980672,.981605,.982532,.983454,.984370,.985281,.986186,.987087,.987982,.988872,.989757,.990638,.991513,.992383,.993249,.994109,.994965,.995816,.996662,.997504,.998340,.999172,1.00000,.170438,.255768,.312729,.355505,.389771,.418362,.442902,.464401,.483537,.500782,.516479,.530887,.544204,.556586,.568158,.579020,.589257,.598938,.608121,.616856,.625177,.633120,.640719,.648003,.654996,.661720,.668197,.674443,.680475,.686306,.691950,.697418,.702722,.707870,.712871,.717735,.722467,.727076,.731567,.735946,.740216,.744382,.748449,.752422,.756304,.760099,.763811,.767445,.771002,.774486,.777899,.781246,.784527,.787746,.790904,.794004,.797048,.800038,.802976,.805863,.808700,.811489,.814231,.816927,.819579,.822189,.824757,.827285,.829774,.832225,.834640,.837018,.839362,.841672,.843948,.846193,.848406,.850589,.852743,.854867,.856962,.859030,.861070,.863084,.865071,.867033,.868970,.870883,.872772,.874638,.876481,.878302,.880102,.881880,.883637,.885374,.887091,.888788,.890466,.892126,.893766,.895389,.896993,.898580,.900149,.901702,.903238,.904757,.906261,.907749,.909221,.910678,.912120,.913548,.914961,.916360,.917746,.919117,.920475,.921820,.923152,.924472,.925778,.927073,.928355,.929625,.930883,.932130,.933366,.934590,.935803,.937005,.938197,.939378,.940549,.941709,.942860,.944000,.945131,.946252,.947363,.948465,.949558,.950642,.951717,.952783,.953840,.954889,.955930,.956962,.957985,.959001,.960009,.961008,.962000,.962984,.963961,.964930,.965891,.966846,.967793,.968733,.969666,.970593,.971512,.972425,.973331,.974231,.975124,.976011,.976891,.977766,.978634,.979496,.980352,.981202,.982046,.982885,.983717,.984544,.985366,.986182,.986992,.987797,.988597,.989391,.990181,.990965,.991744,.992518,.993287,.994051,.994810,.995565,.996315,.997061,.997802,.998539,.999272,1.00000,.177524,.266313,.325522,.369943,.405490,.435121,.460526,.482763,.502534,.520334,.536520,.551362,.565066,.577795,.589679,.600824,.611316,.621228,.630621,.639547,.648035,.656124,.663850,.671241,.678326,.685128,.691668,.697964,.704033,.709891,.715551,.721026,.726326,.731462,.736444,.741280,.745977,.750544,.754987,.759312,.763521,.767621,.771617,.775513,.779313,.783023,.786645,.790184,.793642,.797024,.800331,.803568,.806736,.809839,.812878,.815856,.818775,.821637,.824444,.827199,.829901,.832552,.835155,.837711,.840221,.842687,.845109,.847490,.849830,.852131,.854394,.856620,.858810,.860964,.863084,.865171,.867226,.869249,.871242,.873204,.875138,.877042,.878919,.880769,.882592,.884390,.886162,.887910,.889633,.891333,.893010,.894664,.896296,.897907,.899497,.901066,.902614,.904143,.905653,.907144,.908616,.910070,.911507,.912926,.914328,.915713,.917082,.918434,.919771,.921093,.922399,.923690,.924967,.926229,.927478,.928712,.929933,.931140,.932334,.933515,.934684,.935840,.936984,.938116,.939236,.940345,.941443,.942529,.943604,.944668,.945722,.946765,.947798,.948821,.949833,.950836,.951829,.952813,.953787,.954751,.955707,.956654,.957592,.958522,.959443,.960356,.961260,.962156,.963044,.963925,.964797,.965662,.966520,.967369,.968212,.969047,.969875,.970696,.971509,.972316,.973117,.973910,.974698,.975479,.976253,.977022,.977784,.978540,.979291,.980035,.980774,.981506,.982233,.982955,.983671,.984381,.985086,.985786,.986480,.987169,.987853,.988533,.989207,.989877,.990543,.991203,.991860,.992511,.993158,.993801,.994440,.995074,.995704,.996330,.996952,.997570,.998183,.998793,.999398,1.00000,.184515,.276680,.338061,.384050,.420805,.451403,.477603,.500505,.520842,.539127,.555733,.570940,.584963,.597971,.610099,.621458,.632139,.642215,.651752,.660803,.669394,.677568,.685360,.692804,.699926,.706752,.713303,.719599,.725658,.731496,.737128,.742565,.747820,.752903,.757825,.762595,.767221,.771709,.776069,.780305,.784422,.788425,.792320,.796112,.799805,.803403,.806911,.810333,.813672,.816931,.820114,.823223,.826262,.829233,.832139,.834982,.837764,.840487,.843153,.845765,.848324,.850832,.853291,.855702,.858066,.860385,.862661,.864895,.867087,.869240,.871354,.873431,.875471,.877476,.879446,.881383,.883287,.885160,.887001,.888813,.890595,.892349,.894076,.895775,.897448,.899096,.900718,.902316,.903891,.905442,.906970,.908476,.909960,.911423,.912865,.914286,.915688,.917070,.918433,.919778,.921104,.922413,.923704,.924979,.926236,.927477,.928703,.929912,.931106,.932285,.933449,.934599,.935734,.936855,.937963,.939057,.940138,.941205,.942260,.943303,.944333,.945351,.946358,.947353,.948337,.949310,.950271,.951222,.952163,.953093,.954012,.954922,.955822,.956712,.957592,.958463,.959325,.960177,.961021,.961855,.962681,.963499,.964308,.965109,.965902,.966687,.967464,.968233,.968995,.969749,.970496,.971236,.971968,.972693,.973411,.974122,.974827,.975525,.976216,.976900,.977579,.978251,.978917,.979577,.980231,.980880,.981522,.982159,.982790,.983416,.984037,.984651,.985261,.985865,.986464,.987058,.987647,.988231,.988810,.989384,.989953,.990518,.991079,.991636,.992188,.992736,.993279,.993819,.994354,.994886,.995413,.995937,.996458,.996974,.997487,.997997,.998503,.999005,.999504,1.00000,.195216,.292365,.356828,.404948,.443263,.475043,.502155,.525766,.546656,.565368,.582300,.597747,.611940,.625057,.637241,.648611,.659262,.669274,.678714,.687641,.696100,.704135,.711782,.719075,.726042,.732708,.739095,.745223,.751112,.756775,.762229,.767487,.772560,.777460,.782196,.786778,.791214,.795512,.799679,.803722,.807646,.811458,.815163,.818765,.822269,.825680,.829002,.832238,.835393,.838468,.841469,.844397,.847255,.850046,.852773,.855437,.858042,.860589,.863080,.865517,.867903,.870237,.872523,.874762,.876955,.879104,.881211,.883275,.885299,.887285,.889232,.891142,.893017,.894857,.896663,.898436,.900178,.901888,.903568,.905219,.906841,.908435,.910001,.911541,.913055,.914544,.916009,.917449,.918866,.920259,.921631,.922980,.924309,.925616,.926903,.928170,.929418,.930646,.931856,.933048,.934222,.935378,.936518,.937641,.938748,.939838,.940913,.941973,.943017,.944047,.945063,.946064,.947052,.948026,.948986,.949934,.950868,.951790,.952700,.953597,.954483,.955357,.956220,.957072,.957913,.958743,.959562,.960371,.961170,.961959,.962738,.963507,.964267,.965018,.965759,.966491,.967214,.967929,.968635,.969332,.970022,.970703,.971377,.972042,.972700,.973351,.973994,.974630,.975258,.975880,.976495,.977102,.977703,.978298,.978886,.979467,.980042,.980610,.981173,.981729,.982280,.982825,.983364,.983897,.984425,.984948,.985465,.985976,.986483,.986984,.987481,.987972,.988458,.988940,.989416,.989888,.990355,.990817,.991275,.991729,.992178,.992623,.993064,.993501,.993935,.994364,.994789,.995211,.995629,.996044,.996455,.996862,.997267,.997668,.998065,.998459,.998849,.999235,.999619,1.00000,.205303,.307221,.374681,.424914,.464814,.497826,.525919,.550326,.571865,.591112,.608484,.624295,.638785,.652144,.664524,.676047,.686814,.696911,.706407,.715365,.723834,.731859,.739479,.746729,.753638,.760233,.766538,.772573,.778358,.783909,.789243,.794372,.799309,.804066,.808654,.813082,.817358,.821493,.825491,.829362,.833111,.836745,.840269,.843688,.847008,.850232,.853365,.856412,.859374,.862257,.865064,.867796,.870458,.873052,.875581,.878047,.880453,.882800,.885091,.887328,.889513,.891647,.893733,.895772,.897766,.899716,.901623,.903489,.905316,.907103,.908853,.910567,.912245,.913890,.915501,.917079,.918627,.920144,.921631,.923089,.924520,.925923,.927301,.928652,.929979,.931282,.932561,.933817,.935050,.936262,.937452,.938622,.939770,.940900,.942009,.943100,.944172,.945226,.946263,.947282,.948284,.949270,.950240,.951194,.952133,.953058,.953967,.954862,.955743,.956610,.957464,.958304,.959132,.959947,.960749,.961540,.962318,.963085,.963840,.964584,.965317,.966039,.966751,.967452,.968143,.968824,.969495,.970157,.970809,.971452,.972085,.972710,.973326,.973933,.974532,.975122,.975704,.976278,.976845,.977403,.977954,.978497,.979032,.979560,.980081,.980595,.981101,.981601,.982094,.982580,.983060,.983533,.984000,.984460,.984914,.985363,.985805,.986242,.986672,.987098,.987516,.987929,.988337,.988738,.989133,.989523,.989908,.990287,.990660,.991029,.991392,.991750,.992103,.992452,.992795,.993134,.993468,.993797,.994122,.994443,.994758,.995070,.995376,.995679,.995977,.996271,.996560,.996846,.997127,.997404,.997678,.997948,.998215,.998479,.998739,.998997,.999252,.999503,.999753,1.00000,.213235,.318850,.388598,.440417,.481483,.515382,.544166,.569114,.591083,.610668,.628306,.644322,.658966,.672437,.684892,.696458,.707242,.717331,.726799,.735709,.744117,.752069,.759606,.766763,.773571,.780057,.786246,.792159,.797815,.803234,.808429,.813416,.818208,.822816,.827252,.831525,.835644,.839618,.843455,.847162,.850747,.854216,.857576,.860831,.863985,.867045,.870014,.872895,.875694,.878413,.881055,.883624,.886123,.888555,.890921,.893226,.895470,.897656,.899787,.901864,.903891,.905868,.907797,.909681,.911521,.913317,.915073,.916788,.918464,.920103,.921705,.923272,.924805,.926304,.927771,.929207,.930613,.931989,.933337,.934656,.935950,.937217,.938460,.939678,.940872,.942044,.943193,.944320,.945426,.946511,.947576,.948621,.949646,.950653,.951642,.952612,.953566,.954502,.955421,.956325,.957212,.958084,.958941,.959782,.960610,.961423,.962222,.963008,.963781,.964541,.965288,.966022,.966745,.967455,.968154,.968842,.969518,.970183,.970838,.971482,.972116,.972739,.973352,.973956,.974549,.975133,.975708,.976273,.976829,.977377,.977916,.978446,.978968,.979482,.979988,.980486,.980976,.981459,.981935,.982403,.982863,.983316,.983762,.984201,.984632,.985057,.985475,.985886,.986291,.986690,.987082,.987468,.987848,.988222,.988590,.988953,.989310,.989661,.990007,.990348,.990682,.991011,.991334,.991652,.991964,.992270,.992571,.992867,.993158,.993444,.993725,.994001,.994273,.994539,.994802,.995059,.995313,.995562,.995807,.996048,.996284,.996515,.996742,.996965,.997183,.997397,.997608,.997814,.998016,.998214,.998408,.998599,.998786,.998969,.999149,.999326,.999499,.999669,.999836,1.00000,.222723,.332677,.405054,.458650,.500985,.535819,.565299,.590768,.613121,.632985,.650815,.666952,.681660,.695144,.707571,.719074,.729763,.739731,.749055,.757801,.766036,.773809,.781160,.788126,.794738,.801024,.807009,.812716,.818163,.823370,.828352,.833125,.837700,.842091,.846309,.850363,.854263,.858018,.861636,.865123,.868491,.871746,.874893,.877937,.880883,.883736,.886501,.889180,.891779,.894299,.896745,.899120,.901427,.903668,.905846,.907963,.910022,.912026,.913975,.915873,.917722,.919524,.921281,.922994,.924665,.926296,.927887,.929439,.930955,.932435,.933881,.935293,.936673,.938022,.939340,.940628,.941888,.943120,.944324,.945503,.946657,.947786,.948892,.949975,.951035,.952074,.953092,.954089,.955066,.956023,.956962,.957882,.958784,.959668,.960535,.961386,.962220,.963038,.963841,.964629,.965401,.966159,.966902,.967632,.968348,.969050,.969740,.970417,.971081,.971733,.972374,.973002,.973620,.974226,.974821,.975406,.975980,.976545,.977099,.977643,.978178,.978703,.979218,.979724,.980220,.980708,.981187,.981657,.982119,.982573,.983019,.983456,.983886,.984309,.984724,.985132,.985532,.985926,.986313,.986693,.987066,.987433,.987792,.988146,.988493,.988833,.989168,.989497,.989819,.990136,.990448,.990754,.991054,.991349,.991639,.991924,.992204,.992479,.992749,.993014,.993274,.993529,.993778,.994023,.994262,.994496,.994726,.994951,.995171,.995387,.995598,.995805,.996008,.996207,.996402,.996593,.996780,.996963,.997143,.997319,.997490,.997658,.997820,.997979,.998134,.998285,.998431,.998575,.998714,.998850,.998982,.999110,.999234,.999354,.999471,.999584,.999693,.999799,.999901,1.00000,.233959,.348963,.424337,.479913,.523622,.559432,.589607,.615565,.638248,.658319,.676256,.692421,.707091,.720482,.732770,.744095,.754574,.764304,.773366,.781829,.789782,.797273,.804343,.811028,.817361,.823369,.829078,.834509,.839684,.844620,.849333,.853838,.858148,.862277,.866233,.870029,.873674,.877175,.880541,.883779,.886901,.889913,.892820,.895628,.898341,.900964,.903501,.905956,.908332,.910634,.912863,.915025,.917120,.919153,.921125,.923039,.924897,.926702,.928455,.930159,.931817,.933430,.935001,.936531,.938021,.939472,.940887,.942266,.943610,.944921,.946199,.947446,.948662,.949850,.951009,.952140,.953245,.954323,.955377,.956406,.957412,.958394,.959355,.960293,.961211,.962109,.962986,.963844,.964684,.965505,.966309,.967095,.967864,.968617,.969355,.970076,.970783,.971474,.972152,.972815,.973465,.974101,.974723,.975332,.975929,.976514,.977086,.977647,.978196,.978734,.979261,.979777,.980283,.980779,.981265,.981741,.982208,.982665,.983114,.983554,.983985,.984406,.984819,.985224,.985620,.986008,.986388,.986761,.987126,.987483,.987834,.988177,.988514,.988843,.989166,.989483,.989794,.990098,.990396,.990689,.990975,.991255,.991529,.991797,.992060,.992317,.992569,.992815,.993057,.993293,.993524,.993751,.993973,.994190,.994402,.994611,.994815,.995015,.995210,.995402,.995589,.995771,.995949,.996123,.996292,.996457,.996618,.996775,.996928,.997078,.997224,.997366,.997505,.997640,.997773,.997902,.998027,.998150,.998270,.998387,.998500,.998610,.998715,.998818,.998916,.999012,.999104,.999194,.999280,.999363,.999443,.999519,.999592,.999661,.999727,.999789,.999847,.999902,.999953,1.00000,.237864,.354599,.430984,.487214,.531367,.567481,.597864,.623958,.646724,.666834,.684779,.700924,.715552,.728885,.741098,.752336,.762718,.772342,.781291,.789636,.797469,.804839,.811788,.818352,.824564,.830451,.836039,.841350,.846404,.851220,.855815,.860201,.864395,.868406,.872247,.875928,.879458,.882846,.886100,.889228,.892242,.895150,.897957,.900666,.903285,.905815,.908263,.910631,.912923,.915142,.917292,.919376,.921395,.923354,.925255,.927099,.928889,.930628,.932316,.933957,.935553,.937107,.938619,.940091,.941525,.942922,.944283,.945609,.946902,.948163,.949392,.950591,.951761,.952902,.954016,.955103,.956165,.957201,.958213,.959202,.960168,.961111,.962033,.962933,.963813,.964673,.965514,.966336,.967140,.967926,.968695,.969447,.970183,.970903,.971607,.972296,.972971,.973631,.974278,.974910,.975530,.976135,.976728,.977308,.977876,.978432,.978976,.979508,.980030,.980541,.981041,.981530,.982010,.982480,.982940,.983390,.983832,.984265,.984689,.985104,.985511,.985908,.986297,.986678,.987051,.987416,.987773,.988122,.988465,.988800,.989127,.989449,.989763,.990071,.990372,.990667,.990957,.991240,.991517,.991789,.992054,.992313,.992567,.992814,.993056,.993292,.993523,.993749,.993969,.994185,.994396,.994601,.994803,.994999,.995192,.995380,.995563,.995743,.995919,.996090,.996257,.996420,.996578,.996732,.996882,.997028,.997170,.997309,.997443,.997574,.997702,.997826,.997947,.998065,.998179,.998291,.998399,.998505,.998608,.998709,.998805,.998898,.998987,.999073,.999155,.999235,.999311,.999385,.999456,.999524,.999588,.999648,.999706,.999760,.999809,.999855,.999897,.999935,.999970,1.00000,.236945,.353193,.429236,.485199,.529128,.565048,.595259,.621197,.643821,.663799,.681621,.697651,.712169,.725398,.737513,.748658,.758950,.768488,.777354,.785619,.793385,.800699,.807602,.814129,.820311,.826177,.831749,.837051,.842102,.846919,.851519,.855916,.860122,.864150,.868011,.871715,.875270,.878686,.881970,.885128,.888176,.891117,.893959,.896704,.899359,.901926,.904412,.906818,.909148,.911407,.913597,.915720,.917780,.919779,.921721,.923606,.925437,.927217,.928947,.930629,.932266,.933861,.935414,.936926,.938400,.939837,.941238,.942604,.943936,.945235,.946503,.947740,.948948,.950127,.951279,.952403,.953502,.954575,.955623,.956648,.957650,.958629,.959586,.960522,.961438,.962333,.963209,.964066,.964904,.965725,.966528,.967314,.968084,.968838,.969575,.970298,.971006,.971699,.972378,.973044,.973695,.974333,.974958,.975570,.976170,.976758,.977334,.977898,.978451,.978992,.979524,.980044,.980555,.981055,.981545,.982026,.982498,.982961,.983414,.983859,.984295,.984722,.985140,.985550,.985951,.986344,.986730,.987107,.987477,.987840,.988195,.988543,.988885,.989219,.989547,.989869,.990184,.990493,.990796,.991093,.991383,.991667,.991945,.992216,.992481,.992741,.992994,.993242,.993485,.993722,.993953,.994180,.994402,.994619,.994831,.995038,.995241,.995440,.995634,.995824,.996009,.996188,.996363,.996532,.996697,.996857,.997013,.997165,.997312,.997455,.997594,.997729,.997861,.997989,.998113,.998234,.998351,.998466,.998577,.998685,.998789,.998888,.998983,.999074,.999161,.999245,.999325,.999402,.999476,.999546,.999612,.999673,.999731,.999784,.999832,.999875,.999913,.999947,.999976,1.00000,.234419,.349480,.424781,.480222,.523762,.559380,.589350,.615093,.637557,.657403,.675115,.691053,.705495,.718660,.730722,.741823,.752079,.761588,.770432,.778679,.786439,.793756,.800670,.807216,.813424,.819321,.824931,.830276,.835373,.840241,.844895,.849349,.853615,.857707,.861633,.865403,.869028,.872514,.875870,.879103,.882224,.885238,.888152,.890970,.893697,.896337,.898894,.901371,.903772,.906101,.908361,.910554,.912683,.914751,.916761,.918713,.920612,.922459,.924255,.926003,.927705,.929364,.930980,.932556,.934092,.935590,.937052,.938477,.939869,.941227,.942553,.943847,.945112,.946347,.947554,.948733,.949886,.951012,.952114,.953191,.954245,.955275,.956283,.957269,.958234,.959179,.960104,.961009,.961895,.962763,.963613,.964445,.965261,.966060,.966843,.967610,.968361,.969098,.969820,.970528,.971222,.971902,.972569,.973222,.973862,.974490,.975106,.975710,.976302,.976883,.977453,.978012,.978560,.979098,.979626,.980144,.980653,.981151,.981641,.982122,.982593,.983055,.983508,.983952,.984388,.984815,.985234,.985645,.986048,.986444,.986832,.987213,.987586,.987953,.988313,.988666,.989012,.989352,.989686,.990013,.990334,.990647,.990955,.991255,.991550,.991838,.992121,.992397,.992668,.992933,.993193,.993447,.993696,.993940,.994179,.994413,.994642,.994867,.995087,.995302,.995512,.995715,.995913,.996106,.996293,.996475,.996652,.996824,.996992,.997154,.997312,.997466,.997616,.997761,.997903,.998041,.998175,.998305,.998432,.998555,.998672,.998785,.998892,.998995,.999093,.999186,.999276,.999361,.999443,.999521,.999593,.999660,.999722,.999780,.999831,.999876,.999915,.999950,.999978,1.00000,.232336,.346411,.421090,.476091,.519298,.554656,.584416,.609987,.632307,.652033,.669643,.685494,.699862,.712964,.724972,.736026,.746243,.755718,.764533,.772757,.780502,.787814,.794731,.801287,.807512,.813431,.819069,.824445,.829579,.834487,.839185,.843685,.848002,.852145,.856125,.859953,.863636,.867183,.870600,.873896,.877080,.880157,.883133,.886013,.888801,.891501,.894119,.896656,.899117,.901505,.903824,.906075,.908262,.910388,.912454,.914464,.916418,.918321,.920172,.921975,.923731,.925444,.927113,.928740,.930328,.931877,.933389,.934864,.936304,.937711,.939085,.940427,.941738,.943019,.944272,.945496,.946694,.947864,.949010,.950130,.951226,.952299,.953350,.954378,.955385,.956371,.957337,.958283,.959210,.960118,.961008,.961880,.962735,.963573,.964394,.965200,.965990,.966765,.967524,.968270,.969001,.969717,.970421,.971110,.971787,.972450,.973102,.973740,.974368,.974983,.975587,.976180,.976762,.977333,.977894,.978445,.978986,.979517,.980039,.980551,.981054,.981547,.982031,.982506,.982972,.983429,.983878,.984318,.984751,.985175,.985592,.986001,.986403,.986798,.987185,.987565,.987939,.988306,.988666,.989020,.989366,.989706,.990039,.990365,.990685,.990999,.991306,.991607,.991902,.992191,.992475,.992753,.993026,.993293,.993555,.993812,.994064,.994311,.994553,.994791,.995022,.995247,.995466,.995679,.995886,.996088,.996285,.996476,.996663,.996844,.997020,.997192,.997360,.997523,.997681,.997836,.997986,.998133,.998275,.998414,.998547,.998673,.998793,.998907,.999017,.999121,.999220,.999314,.999404,.999490,.999569,.999642,.999709,.999772,.999826,.999873,.999915,.999951,.999979,1.00000,.230291,.343425,.417531,.472139,.515062,.550207,.579804,.605250,.627473,.647125,.664678,.680487,.694825,.707906,.719902,.730952,.741170,.750652,.759478,.767716,.775480,.782814,.789755,.796338,.802591,.808541,.814211,.819621,.824790,.829735,.834470,.839009,.843365,.847548,.851569,.855438,.859163,.862752,.866212,.869551,.872778,.875899,.878918,.881842,.884675,.887419,.890081,.892663,.895169,.897601,.899964,.902260,.904492,.906661,.908772,.910826,.912825,.914771,.916666,.918513,.920313,.922068,.923780,.925450,.927080,.928672,.930225,.931742,.933224,.934671,.936086,.937468,.938819,.940141,.941433,.942697,.943933,.945142,.946326,.947484,.948619,.949729,.950816,.951881,.952924,.953945,.954946,.955927,.956889,.957831,.958754,.959660,.960548,.961418,.962272,.963109,.963931,.964737,.965528,.966303,.967065,.967812,.968544,.969264,.969969,.970662,.971342,.972010,.972666,.973309,.973941,.974562,.975171,.975770,.976358,.976936,.977503,.978061,.978609,.979147,.979676,.980195,.980705,.981205,.981697,.982180,.982654,.983120,.983577,.984027,.984468,.984902,.985329,.985748,.986159,.986564,.986961,.987352,.987736,.988114,.988484,.988847,.989204,.989553,.989896,.990232,.990562,.990886,.991203,.991515,.991820,.992120,.992415,.992704,.992987,.993265,.993538,.993806,.994069,.994328,.994579,.994824,.995062,.995294,.995520,.995740,.995954,.996163,.996366,.996564,.996757,.996945,.997127,.997305,.997479,.997648,.997812,.997973,.998129,.998281,.998426,.998564,.998695,.998820,.998940,.999053,.999161,.999264,.999362,.999455,.999541,.999620,.999693,.999760,.999819,.999870,.999914,.999952,.999980,1.00000,.228688,.341073,.414713,.468996,.511679,.546639,.576091,.601420,.623549,.643124,.660614,.676373,.690670,.703718,.715688,.726717,.736920,.746390,.755209,.763443,.771208,.778547,.785498,.792094,.798363,.804332,.810024,.815458,.820653,.825626,.830390,.834961,.839349,.843567,.847623,.851528,.855290,.858917,.862417,.865795,.869061,.872222,.875281,.878244,.881115,.883899,.886600,.889220,.891765,.894236,.896637,.898971,.901241,.903448,.905596,.907687,.909723,.911707,.913639,.915522,.917358,.919149,.920897,.922603,.924268,.925894,.927482,.929033,.930549,.932031,.933479,.934894,.936279,.937633,.938957,.940253,.941522,.942763,.943978,.945168,.946333,.947474,.948591,.949686,.950759,.951811,.952842,.953852,.954842,.955813,.956766,.957700,.958616,.959514,.960396,.961261,.962110,.962943,.963761,.964563,.965351,.966124,.966883,.967629,.968360,.969079,.969784,.970477,.971158,.971827,.972484,.973129,.973763,.974386,.974998,.975600,.976191,.976772,.977344,.977905,.978457,.978999,.979531,.980055,.980569,.981074,.981570,.982058,.982538,.983009,.983473,.983928,.984376,.984816,.985249,.985674,.986093,.986504,.986909,.987307,.987698,.988081,.988457,.988827,.989189,.989545,.989894,.990237,.990574,.990905,.991229,.991548,.991861,.992168,.992470,.992767,.993058,.993344,.993625,.993900,.994169,.994431,.994686,.994935,.995177,.995413,.995643,.995867,.996085,.996298,.996506,.996708,.996905,.997097,.997284,.997467,.997645,.997818,.997987,.998152,.998309,.998458,.998600,.998736,.998864,.998987,.999104,.999215,.999320,.999421,.999514,.999599,.999677,.999749,.999811,.999865,.999912,.999952,.999980,1.00000,.225621,.336592,.409367,.463058,.505311,.539947,.569152,.594289,.616269,.635729,.653131,.668823,.683072,.696087,.708036,.719056,.729259,.738738,.747571,.755826,.763618,.770990,.777978,.784615,.790929,.796947,.802690,.808179,.813431,.818463,.823289,.827923,.832376,.836659,.840783,.844757,.848589,.852287,.855858,.859308,.862646,.865878,.869008,.872042,.874983,.877837,.880606,.883295,.885908,.888446,.890915,.893315,.895651,.897924,.900137,.902293,.904393,.906440,.908436,.910382,.912280,.914133,.915941,.917707,.919432,.921117,.922764,.924373,.925946,.927484,.928989,.930460,.931900,.933308,.934687,.936036,.937358,.938651,.939919,.941160,.942376,.943568,.944736,.945882,.947004,.948106,.949185,.950245,.951284,.952303,.953303,.954285,.955248,.956193,.957122,.958033,.958928,.959807,.960669,.961517,.962350,.963167,.963971,.964760,.965536,.966298,.967047,.967783,.968507,.969219,.969918,.970606,.971282,.971947,.972601,.973244,.973876,.974498,.975110,.975712,.976304,.976887,.977459,.978022,.978575,.979120,.979655,.980182,.980700,.981210,.981711,.982205,.982690,.983168,.983638,.984101,.984556,.985004,.985445,.985879,.986306,.986725,.987136,.987541,.987938,.988329,.988712,.989089,.989460,.989824,.990182,.990534,.990880,.991219,.991554,.991882,.992205,.992522,.992834,.993141,.993440,.993732,.994016,.994294,.994564,.994828,.995085,.995336,.995581,.995819,.996052,.996279,.996501,.996717,.996928,.997133,.997334,.997529,.997720,.997907,.998084,.998253,.998414,.998568,.998714,.998854,.998986,.999113,.999234,.999349,.999454,.999552,.999641,.999723,.999794,.999855,.999907,.999952,.999981,1.00000,.223772,.333874,.406104,.459413,.501379,.535793,.564821,.589814,.611677,.631039,.648360,.663985,.678177,.691146,.703057,.714045,.724222,.733681,.742498,.750741,.758527,.765896,.772886,.779529,.785852,.791882,.797641,.803147,.808419,.813473,.818322,.822982,.827462,.831774,.835928,.839933,.843797,.847528,.851134,.854619,.857993,.861261,.864428,.867499,.870477,.873369,.876176,.878904,.881555,.884132,.886639,.889079,.891454,.893767,.896019,.898215,.900355,.902441,.904476,.906461,.908400,.910292,.912140,.913946,.915710,.917435,.919121,.920770,.922382,.923959,.925503,.927013,.928492,.929939,.931357,.932745,.934105,.935437,.936742,.938022,.939276,.940506,.941712,.942894,.944054,.945192,.946309,.947405,.948480,.949536,.950572,.951590,.952589,.953570,.954534,.955480,.956410,.957323,.958221,.959103,.959969,.960821,.961658,.962481,.963291,.964086,.964868,.965638,.966394,.967138,.967870,.968590,.969298,.969995,.970680,.971355,.972019,.972672,.973315,.973948,.974570,.975183,.975786,.976379,.976962,.977537,.978102,.978658,.979206,.979745,.980275,.980798,.981312,.981819,.982317,.982808,.983292,.983768,.984237,.984699,.985153,.985599,.986038,.986470,.986894,.987311,.987722,.988125,.988522,.988913,.989297,.989675,.990046,.990412,.990771,.991125,.991473,.991815,.992152,.992484,.992807,.993123,.993431,.993732,.994026,.994313,.994593,.994866,.995133,.995394,.995648,.995897,.996139,.996376,.996607,.996833,.997054,.997270,.997480,.997686,.997882,.998068,.998247,.998417,.998579,.998734,.998881,.999022,.999156,.999284,.999402,.999510,.999609,.999700,.999778,.999845,.999902,.999951,.999981,1.00000,.220584,.329178,.400459,.453096,.494557,.528576,.557285,.582020,.603667,.622849,.640020,.655516,.669601,.682478,.694311,.705234,.715356,.724769,.733549,.741761,.749525,.756881,.763865,.770509,.776839,.782882,.788658,.794186,.799485,.804568,.809452,.814148,.818668,.823023,.827222,.831275,.835189,.838971,.842630,.846170,.849601,.852926,.856151,.859281,.862320,.865272,.868141,.870930,.873644,.876285,.878856,.881360,.883799,.886177,.888495,.890755,.892961,.895113,.897214,.899266,.901270,.903229,.905144,.907016,.908847,.910638,.912391,.914106,.915784,.917428,.919038,.920614,.922159,.923672,.925155,.926609,.928034,.929432,.930802,.932146,.933465,.934760,.936030,.937277,.938501,.939703,.940884,.942043,.943182,.944301,.945401,.946481,.947542,.948586,.949612,.950620,.951612,.952587,.953545,.954488,.955416,.956328,.957226,.958109,.958978,.959834,.960676,.961504,.962320,.963123,.963913,.964692,.965458,.966213,.966956,.967688,.968409,.969119,.969819,.970509,.971187,.971856,.972515,.973164,.973803,.974433,.975053,.975664,.976267,.976860,.977445,.978022,.978590,.979150,.979702,.980247,.980783,.981312,.981833,.982348,.982854,.983352,.983843,.984326,.984802,.985270,.985731,.986185,.986633,.987073,.987507,.987935,.988356,.988771,.989179,.989582,.989978,.990369,.990754,.991133,.991504,.991866,.992221,.992568,.992908,.993240,.993565,.993883,.994194,.994498,.994795,.995087,.995372,.995650,.995923,.996190,.996451,.996707,.996957,.997202,.997436,.997660,.997875,.998080,.998276,.998463,.998642,.998814,.998978,.999135,.999279,.999412,.999534,.999646,.999741,.999822,.999891,.999950,.999982,1.00000,.218543,.326168,.396836,.449038,.490170,.523930,.552430,.576993,.598497,.617559,.634626,.650036,.664046,.676859,.688637,.699513,.709595,.718973,.727724,.735912,.743656,.750998,.757972,.764610,.770939,.776982,.782762,.788297,.793605,.798700,.803598,.808309,.812847,.817221,.821441,.825515,.829452,.833260,.836944,.840511,.843969,.847323,.850578,.853739,.856810,.859794,.862697,.865520,.868268,.870944,.873551,.876091,.878567,.880982,.883337,.885636,.887880,.890071,.892211,.894301,.896345,.898344,.900298,.902210,.904081,.905912,.907705,.909460,.911179,.912864,.914514,.916131,.917716,.919270,.920794,.922288,.923754,.925192,.926603,.927988,.929348,.930683,.931994,.933282,.934547,.935790,.937011,.938211,.939391,.940551,.941691,.942812,.943914,.944998,.946064,.947113,.948145,.949161,.950160,.951143,.952111,.953063,.954001,.954925,.955834,.956729,.957611,.958480,.959335,.960178,.961008,.961826,.962632,.963427,.964209,.964981,.965741,.966491,.967230,.967958,.968676,.969384,.970081,.970769,.971447,.972115,.972774,.973424,.974065,.974696,.975320,.975934,.976540,.977138,.977728,.978310,.978884,.979451,.980010,.980561,.981104,.981640,.982167,.982687,.983200,.983705,.984203,.984693,.985177,.985654,.986124,.986587,.987044,.987495,.987939,.988377,.988809,.989235,.989655,.990069,.990475,.990872,.991262,.991643,.992017,.992383,.992741,.993093,.993437,.993774,.994105,.994429,.994746,.995057,.995362,.995661,.995954,.996240,.996522,.996797,.997062,.997315,.997558,.997791,.998015,.998229,.998435,.998632,.998821,.999003,.999170,.999324,.999466,.999597,.999707,.999801,.999881,.999948,.999982,1.00000,.216118,.322578,.392503,.444171,.484894,.518328,.546562,.570902,.592217,.611117,.628044,.643332,.657235,.669954,.681650,.692452,.702469,.711789,.720488,.728630,.736336,.743646,.750594,.757211,.763524,.769556,.775329,.780860,.786168,.791266,.796170,.800890,.805439,.809826,.814061,.818154,.822110,.825939,.829646,.833237,.836721,.840102,.843386,.846576,.849677,.852694,.855629,.858486,.861269,.863980,.866623,.869200,.871713,.874166,.876560,.878898,.881182,.883413,.885594,.887725,.889811,.891851,.893849,.895804,.897718,.899593,.901430,.903231,.904995,.906724,.908420,.910083,.911714,.913315,.914885,.916427,.917939,.919425,.920883,.922315,.923723,.925106,.926465,.927801,.929115,.930407,.931678,.932927,.934156,.935366,.936556,.937726,.938879,.940013,.941130,.942229,.943311,.944377,.945427,.946460,.947479,.948482,.949471,.950446,.951406,.952352,.953286,.954205,.955112,.956006,.956888,.957758,.958615,.959461,.960295,.961118,.961930,.962731,.963522,.964301,.965071,.965830,.966579,.967318,.968048,.968767,.969478,.970179,.970872,.971555,.972229,.972896,.973553,.974202,.974844,.975477,.976102,.976719,.977329,.977932,.978526,.979112,.979691,.980262,.980825,.981381,.981929,.982471,.983005,.983533,.984053,.984567,.985074,.985575,.986070,.986558,.987040,.987515,.987985,.988449,.988905,.989352,.989790,.990221,.990644,.991059,.991467,.991867,.992260,.992646,.993025,.993398,.993763,.994122,.994474,.994821,.995161,.995495,.995823,.996145,.996455,.996754,.997041,.997318,.997585,.997842,.998089,.998328,.998557,.998778,.998983,.999172,.999348,.999511,.999649,.999765,.999862,.999945,.999983,1.00000,.214591,.320317,.389770,.441097,.481559,.514783,.542845,.567040,.588232,.607025,.623861,.639067,.652899,.665554,.677193,.687945,.697917,.707197,.715860,.723969,.731647,.738933,.745861,.752461,.758760,.764782,.770546,.776072,.781375,.786472,.791376,.796099,.800651,.805044,.809286,.813386,.817352,.821190,.824909,.828513,.832010,.835405,.838703,.841909,.845026,.848058,.851010,.853885,.856685,.859415,.862076,.864672,.867206,.869678,.872092,.874451,.876755,.879007,.881209,.883363,.885470,.887533,.889553,.891532,.893470,.895370,.897232,.899057,.900847,.902602,.904324,.906014,.907672,.909299,.910897,.912466,.914007,.915520,.917007,.918467,.919903,.921315,.922704,.924070,.925413,.926735,.928035,.929315,.930574,.931814,.933034,.934236,.935419,.936584,.937731,.938862,.939975,.941072,.942153,.943218,.944268,.945304,.946324,.947331,.948323,.949302,.950267,.951220,.952159,.953086,.954000,.954903,.955793,.956672,.957539,.958396,.959241,.960075,.960899,.961712,.962515,.963307,.964090,.964863,.965626,.966380,.967124,.967859,.968585,.969303,.970011,.970711,.971403,.972087,.972762,.973429,.974089,.974740,.975384,.976021,.976649,.977270,.977883,.978488,.979086,.979677,.980260,.980836,.981405,.981968,.982523,.983072,.983614,.984149,.984679,.985201,.985718,.986229,.986733,.987232,.987722,.988204,.988678,.989144,.989602,.990052,.990495,.990931,.991359,.991780,.992194,.992601,.993002,.993396,.993783,.994164,.994539,.994908,.995271,.995627,.995972,.996305,.996626,.996936,.997236,.997526,.997806,.998076,.998337,.998589,.998824,.999043,.999246,.999436,.999596,.999731,.999846,.999942,.999983,1.00000,.213477,.318668,.387779,.438861,.479134,.512208,.540147,.564239,.585343,.604062,.620833,.635983,.649765,.662377,.673977,.684695,.694636,.703889,.712528,.720615,.728274,.735544,.742458,.749046,.755335,.761348,.767105,.772626,.777925,.783019,.787921,.792643,.797195,.801589,.805833,.809935,.813904,.817747,.821470,.825080,.828583,.831985,.835290,.838504,.841631,.844673,.847635,.850521,.853333,.856074,.858748,.861357,.863903,.866390,.868818,.871191,.873510,.875777,.877994,.880163,.882287,.884366,.886403,.888398,.890354,.892271,.894150,.895993,.897800,.899574,.901314,.903022,.904699,.906345,.907961,.909549,.911109,.912641,.914147,.915627,.917083,.918515,.919923,.921309,.922672,.924014,.925334,.926634,.927914,.929174,.930415,.931638,.932841,.934027,.935196,.936347,.937482,.938600,.939702,.940788,.941859,.942916,.943959,.944987,.946001,.947002,.947990,.948965,.949927,.950876,.951814,.952739,.953652,.954554,.955445,.956324,.957193,.958050,.958898,.959734,.960561,.961378,.962184,.962981,.963768,.964546,.965315,.966075,.966825,.967567,.968300,.969025,.969742,.970450,.971150,.971842,.972527,.973203,.973872,.974534,.975188,.975834,.976472,.977103,.977726,.978343,.978952,.979553,.980148,.980736,.981318,.981892,.982460,.983022,.983577,.984127,.984669,.985206,.985737,.986262,.986779,.987287,.987788,.988280,.988765,.989242,.989712,.990175,.990630,.991078,.991520,.991954,.992382,.992803,.993218,.993626,.994028,.994424,.994814,.995198,.995570,.995930,.996278,.996615,.996942,.997258,.997564,.997861,.998148,.998425,.998685,.998928,.999155,.999367,.999547,.999700,.999830,.999940,.999983,1.00000,.212540,.317288,.386121,.437007,.477132,.510092,.537939,.561956,.582998,.601666,.618394,.633508,.647259,.659846,.671426,.682126,.692053,.701294,.709923,.718004,.725657,.732922,.739832,.746418,.752705,.758717,.764475,.769995,.775296,.780392,.785297,.790021,.794577,.798975,.803223,.807331,.811305,.815153,.818882,.822497,.826007,.829416,.832728,.835950,.839083,.842134,.845104,.847998,.850818,.853569,.856252,.858870,.861425,.863921,.866359,.868742,.871071,.873348,.875575,.877755,.879889,.881979,.884026,.886032,.887999,.889927,.891817,.893672,.895491,.897276,.899028,.900747,.902436,.904094,.905722,.907322,.908894,.910439,.911957,.913449,.914917,.916362,.917783,.919181,.920558,.921913,.923247,.924560,.925853,.927127,.928382,.929618,.930836,.932036,.933218,.934384,.935533,.936665,.937782,.938883,.939969,.941040,.942097,.943141,.944170,.945187,.946190,.947180,.948158,.949123,.950076,.951017,.951946,.952864,.953771,.954667,.955552,.956426,.957289,.958143,.958986,.959819,.960643,.961457,.962262,.963057,.963843,.964621,.965390,.966150,.966901,.967644,.968379,.969106,.969825,.970536,.971239,.971935,.972624,.973304,.973978,.974643,.975302,.975952,.976596,.977232,.977862,.978484,.979100,.979709,.980312,.980907,.981497,.982080,.982657,.983228,.983793,.984351,.984904,.985451,.985990,.986521,.987044,.987559,.988066,.988565,.989057,.989542,.990020,.990490,.990954,.991411,.991861,.992304,.992741,.993172,.993596,.994014,.994426,.994832,.995226,.995608,.995979,.996338,.996687,.997025,.997353,.997671,.997980,.998280,.998561,.998825,.999072,.999305,.999503,.999672,.999815,.999938,.999983,1.00000,.211042,.315085,.383475,.434049,.473941,.506719,.534421,.558321,.579267,.597855,.614516,.629575,.643281,.655829,.667377,.678051,.687957,.697182,.705798,.713869,.721515,.728775,.735682,.742266,.748553,.754567,.760327,.765852,.771158,.776260,.781172,.785904,.790469,.794876,.799135,.803253,.807239,.811099,.814840,.818469,.821992,.825414,.828741,.831976,.835124,.838189,.841175,.844084,.846920,.849686,.852384,.855018,.857590,.860101,.862556,.864955,.867300,.869594,.871838,.874034,.876185,.878292,.880357,.882381,.884366,.886312,.888221,.890093,.891931,.893735,.895505,.897244,.898952,.900629,.902277,.903896,.905488,.907052,.908590,.910102,.911591,.913055,.914497,.915916,.917313,.918689,.920044,.921379,.922694,.923989,.925266,.926523,.927763,.928985,.930190,.931378,.932549,.933704,.934843,.935967,.937076,.938171,.939251,.940318,.941371,.942411,.943438,.944453,.945454,.946444,.947422,.948388,.949342,.950285,.951216,.952137,.953047,.953947,.954836,.955715,.956584,.957443,.958293,.959133,.959964,.960786,.961600,.962404,.963200,.963987,.964766,.965537,.966299,.967054,.967801,.968540,.969272,.969996,.970712,.971422,.972124,.972818,.973506,.974186,.974859,.975525,.976185,.976837,.977483,.978123,.978756,.979382,.980003,.980617,.981225,.981827,.982424,.983014,.983599,.984178,.984748,.985312,.985867,.986414,.986955,.987487,.988013,.988531,.989042,.989547,.990044,.990535,.991019,.991497,.991968,.992433,.992892,.993345,.993792,.994232,.994661,.995078,.995484,.995879,.996263,.996637,.997000,.997354,.997698,.998033,.998349,.998648,.998930,.999196,.999424,.999621,.999789,.999934,.999983,1.00000,.209948,.313478,.381548,.431898,.471624,.504273,.531873,.555691,.576571,.595104,.611720,.626743,.640419,.652943,.664472,.675131,.685025,.694241,.702852,.710919,.718563,.725821,.732728,.739313,.745602,.751617,.757380,.762908,.768217,.773324,.778240,.782977,.787547,.791960,.796225,.800349,.804342,.808209,.811957,.815593,.819124,.822554,.825890,.829134,.832292,.835366,.838362,.841281,.844127,.846904,.849613,.852258,.854842,.857365,.859831,.862242,.864600,.866906,.869163,.871371,.873535,.875655,.877733,.879770,.881767,.883727,.885649,.887535,.889386,.891203,.892987,.894739,.896460,.898151,.899813,.901446,.903051,.904629,.906181,.907707,.909209,.910688,.912144,.913577,.914989,.916379,.917749,.919098,.920428,.921738,.923030,.924303,.925558,.926795,.928015,.929218,.930405,.931576,.932730,.933869,.934994,.936104,.937201,.938284,.939353,.940409,.941453,.942483,.943501,.944508,.945502,.946484,.947455,.948415,.949364,.950301,.951228,.952145,.953051,.953947,.954833,.955710,.956577,.957436,.958285,.959125,.959956,.960779,.961593,.962399,.963196,.963986,.964767,.965541,.966307,.967065,.967816,.968559,.969295,.970024,.970746,.971460,.972167,.972868,.973562,.974248,.974929,.975602,.976269,.976930,.977585,.978233,.978875,.979511,.980142,.980766,.981385,.981998,.982605,.983207,.983800,.984387,.984965,.985537,.986101,.986658,.987208,.987750,.988286,.988816,.989338,.989854,.990364,.990867,.991364,.991855,.992340,.992818,.993291,.993758,.994214,.994658,.995090,.995512,.995924,.996325,.996716,.997097,.997469,.997831,.998175,.998501,.998810,.999103,.999357,.999576,.999766,.999931,.999983,1.00000]
	# Z=8
	      Z8=[.166272,.249544,.305149,.346921,.380393,.408332,.432319,.453342,.472059,.488933,.504297,.518404,.531447,.543579,.554920,.565569,.575609,.585106,.594118,.602693,.610869,.618680,.626159,.633333,.640228,.646863,.653260,.659434,.665400,.671174,.676767,.682190,.687455,.692569,.697543,.702383,.707096,.711691,.716171,.720545,.724813,.728982,.733056,.737039,.740935,.744748,.748482,.752140,.755725,.759240,.762688,.766071,.769391,.772652,.775855,.779002,.782095,.785136,.788128,.791070,.793965,.796813,.799616,.802376,.805093,.807769,.810406,.813003,.815564,.818087,.820576,.823030,.825451,.827839,.830195,.832520,.834816,.837082,.839319,.841529,.843711,.845866,.847995,.850098,.852175,.854229,.856258,.858264,.860247,.862208,.864147,.866064,.867960,.869836,.871692,.873528,.875345,.877143,.878923,.880684,.882428,.884153,.885861,.887553,.889227,.890885,.892527,.894153,.895764,.897359,.898939,.900505,.902056,.903593,.905116,.906625,.908121,.909604,.911074,.912531,.913975,.915406,.916825,.918232,.919627,.921010,.922382,.923742,.925091,.926429,.927756,.929073,.930378,.931674,.932959,.934234,.935499,.936754,.938000,.939236,.940462,.941680,.942888,.944087,.945277,.946459,.947632,.948796,.949952,.951100,.952239,.953371,.954494,.955610,.956718,.957818,.958910,.959995,.961073,.962143,.963207,.964263,.965313,.966356,.967392,.968421,.969444,.970461,.971471,.972475,.973472,.974464,.975449,.976429,.977402,.978370,.979331,.980287,.981238,.982182,.983122,.984055,.984984,.985907,.986825,.987738,.988646,.989549,.990446,.991339,.992227,.993110,.993988,.994861,.995730,.996593,.997452,.998306,.999155,1.00000,.169499,.254371,.311033,.353592,.387687,.416141,.440566,.461968,.481020,.498191,.513823,.528174,.541440,.553776,.565306,.576131,.586334,.595984,.605140,.613850,.622148,.630071,.637653,.644920,.651899,.658612,.665079,.671316,.677340,.683166,.688805,.694269,.699570,.704716,.709717,.714581,.719315,.723925,.728419,.732802,.737076,.741247,.745320,.749299,.753188,.756991,.760711,.764353,.767920,.771413,.774837,.778194,.781487,.784717,.787887,.791000,.794057,.797060,.800012,.802913,.805764,.808567,.811324,.814036,.816704,.819329,.821914,.824458,.826964,.829432,.831864,.834260,.836622,.838950,.841245,.843508,.845740,.847942,.850115,.852259,.854374,.856461,.858521,.860555,.862563,.864545,.866503,.868436,.870346,.872233,.874097,.875940,.877760,.879560,.881338,.883097,.884835,.886555,.888255,.889936,.891599,.893243,.894870,.896479,.898071,.899645,.901203,.902745,.904271,.905781,.907276,.908755,.910220,.911670,.913106,.914528,.915935,.917329,.918710,.920078,.921432,.922774,.924104,.925421,.926726,.928019,.929300,.930570,.931828,.933075,.934311,.935537,.936751,.937955,.939149,.940333,.941506,.942670,.943823,.944968,.946102,.947227,.948343,.949450,.950548,.951637,.952717,.953789,.954852,.955907,.956953,.957992,.959022,.960044,.961058,.962065,.963064,.964055,.965039,.966016,.966985,.967948,.968903,.969851,.970793,.971727,.972655,.973576,.974491,.975399,.976301,.977197,.978086,.978970,.979847,.980718,.981583,.982442,.983296,.984143,.984985,.985822,.986653,.987478,.988299,.989113,.989923,.990727,.991526,.992320,.993109,.993893,.994673,.995447,.996217,.996983,.997744,.998500,.999252,1.00000,.176312,.264490,.323289,.367400,.402697,.432118,.457342,.479419,.499048,.516718,.532786,.547518,.561120,.573754,.585549,.596609,.607021,.616856,.626177,.635034,.643460,.651496,.659175,.666527,.673578,.680351,.686867,.693145,.699199,.705047,.710700,.716171,.721471,.726611,.731598,.736443,.741152,.745732,.750191,.754534,.758763,.762883,.766900,.770818,.774641,.778374,.782020,.785584,.789067,.792475,.795810,.799073,.802270,.805400,.808468,.811476,.814425,.817317,.820155,.822940,.825673,.828356,.830989,.833576,.836116,.838612,.841065,.843476,.845846,.848177,.850470,.852726,.854945,.857129,.859279,.861396,.863480,.865532,.867554,.869545,.871508,.873442,.875348,.877227,.879079,.880906,.882708,.884484,.886237,.887966,.889673,.891356,.893018,.894658,.896277,.897876,.899454,.901012,.902552,.904072,.905574,.907057,.908523,.909972,.911404,.912819,.914218,.915601,.916968,.918320,.919657,.920979,.922286,.923579,.924858,.926123,.927374,.928612,.929837,.931049,.932249,.933436,.934611,.935775,.936927,.938067,.939196,.940314,.941421,.942517,.943603,.944678,.945743,.946798,.947843,.948878,.949903,.950919,.951926,.952923,.953912,.954891,.955862,.956824,.957777,.958722,.959659,.960587,.961508,.962420,.963325,.964222,.965111,.965993,.966867,.967734,.968593,.969446,.970291,.971130,.971962,.972787,.973606,.974418,.975224,.976023,.976817,.977604,.978385,.979160,.979929,.980693,.981450,.982202,.982948,.983689,.984424,.985154,.985878,.986597,.987311,.988020,.988724,.989424,.990119,.990808,.991494,.992174,.992850,.993522,.994189,.994852,.995510,.996164,.996814,.997460,.998101,.998738,.999371,1.00000,.182834,.274184,.335040,.380648,.417109,.447470,.473475,.496213,.516409,.534573,.551073,.566187,.580129,.593065,.605130,.616433,.627063,.637095,.646592,.655608,.664169,.672318,.680090,.687516,.694625,.701440,.707984,.714275,.720333,.726171,.731804,.737246,.742507,.747599,.752531,.757312,.761951,.766454,.770829,.775082,.779217,.783239,.787154,.790966,.794680,.798301,.801832,.805277,.808640,.811924,.815132,.818268,.821333,.824331,.827265,.830135,.832945,.835697,.838393,.841035,.843623,.846162,.848650,.851092,.853487,.855837,.858144,.860409,.862633,.864818,.866964,.869072,.871145,.873182,.875185,.877154,.879091,.880996,.882870,.884715,.886530,.888317,.890077,.891810,.893516,.895197,.896853,.898485,.900093,.901678,.903240,.904779,.906298,.907794,.909270,.910726,.912162,.913578,.914975,.916354,.917715,.919057,.920383,.921692,.922983,.924259,.925518,.926762,.927991,.929204,.930403,.931587,.932756,.933912,.935054,.936182,.937297,.938400,.939489,.940566,.941630,.942683,.943724,.944754,.945772,.946779,.947775,.948760,.949735,.950699,.951654,.952598,.953532,.954456,.955371,.956276,.957172,.958059,.958936,.959805,.960665,.961517,.962361,.963196,.964023,.964843,.965654,.966458,.967254,.968042,.968823,.969597,.970364,.971123,.971876,.972622,.973360,.974093,.974818,.975537,.976250,.976956,.977657,.978351,.979040,.979723,.980400,.981071,.981737,.982397,.983052,.983701,.984346,.984984,.985618,.986246,.986870,.987488,.988102,.988710,.989314,.989914,.990509,.991099,.991686,.992268,.992846,.993419,.993989,.994554,.995116,.995673,.996227,.996777,.997323,.997866,.998405,.998940,.999472,1.00000,.193622,.290007,.353982,.401752,.439800,.471368,.498307,.521775,.542544,.561153,.577997,.593369,.607497,.620557,.632694,.644021,.654636,.664617,.674031,.682935,.691376,.699395,.707031,.714315,.721275,.727936,.734321,.740449,.746338,.752005,.757464,.762728,.767808,.772717,.777463,.782056,.786504,.790814,.794995,.799053,.802993,.806821,.810543,.814163,.817686,.821116,.824457,.827714,.830889,.833986,.837008,.839958,.842839,.845653,.848403,.851091,.853720,.856291,.858807,.861270,.863680,.866040,.868352,.870617,.872837,.875013,.877146,.879237,.881289,.883302,.885277,.887215,.889118,.890986,.892820,.894622,.896392,.898131,.899840,.901519,.903170,.904793,.906389,.907958,.909502,.911020,.912514,.913984,.915430,.916854,.918255,.919634,.920992,.922330,.923647,.924944,.926221,.927480,.928720,.929941,.931145,.932332,.933502,.934655,.935792,.936913,.938018,.939108,.940183,.941244,.942289,.943321,.944339,.945344,.946335,.947312,.948278,.949230,.950170,.951098,.952014,.952919,.953812,.954695,.955566,.956426,.957276,.958116,.958945,.959765,.960574,.961374,.962164,.962945,.963717,.964480,.965233,.965978,.966715,.967442,.968162,.968874,.969578,.970274,.970962,.971643,.972317,.972983,.973643,.974295,.974940,.975578,.976210,.976835,.977453,.978065,.978671,.979270,.979863,.980450,.981031,.981607,.982177,.982741,.983300,.983854,.984402,.984945,.985482,.986015,.986543,.987065,.987583,.988096,.988604,.989108,.989606,.990100,.990590,.991075,.991556,.992033,.992506,.992976,.993441,.993903,.994361,.994816,.995267,.995714,.996158,.996599,.997037,.997471,.997902,.998329,.998751,.999170,.999587,1.00000,.203917,.305177,.372223,.422163,.461842,.494681,.522637,.546930,.568377,.587547,.604855,.620612,.635058,.648380,.660729,.672227,.682974,.693055,.702540,.711489,.719953,.727975,.735596,.742847,.749760,.756361,.762674,.768718,.774513,.780076,.785422,.790565,.795517,.800290,.804894,.809339,.813634,.817787,.821805,.825695,.829465,.833119,.836665,.840106,.843447,.846694,.849849,.852918,.855904,.858810,.861640,.864396,.867082,.869700,.872253,.874743,.877173,.879544,.881860,.884121,.886331,.888490,.890600,.892664,.894683,.896657,.898589,.900480,.902331,.904144,.905918,.907657,.909360,.911029,.912665,.914268,.915840,.917381,.918893,.920376,.921831,.923259,.924661,.926037,.927388,.928715,.930018,.931298,.932555,.933790,.935004,.936197,.937370,.938522,.939655,.940769,.941865,.942942,.944001,.945043,.946069,.947078,.948070,.949047,.950009,.950956,.951888,.952805,.953709,.954598,.955474,.956337,.957187,.958024,.958848,.959661,.960461,.961249,.962026,.962792,.963547,.964291,.965024,.965747,.966459,.967162,.967854,.968537,.969210,.969875,.970529,.971175,.971812,.972441,.973061,.973672,.974275,.974870,.975458,.976037,.976609,.977173,.977729,.978278,.978820,.979355,.979882,.980403,.980917,.981425,.981926,.982420,.982908,.983390,.983866,.984335,.984799,.985257,.985709,.986155,.986596,.987030,.987459,.987882,.988300,.988712,.989119,.989520,.989916,.990307,.990692,.991073,.991449,.991820,.992186,.992548,.992905,.993257,.993605,.993948,.994287,.994622,.994952,.995278,.995600,.995918,.996232,.996541,.996847,.997149,.997448,.997743,.998035,.998324,.998610,.998893,.999174,.999451,.999727,1.00000,.211861,.316838,.386193,.437741,.478608,.512358,.541026,.565885,.587783,.607314,.624909,.640893,.655515,.668970,.681415,.692978,.703762,.713855,.723332,.732253,.740674,.748642,.756195,.763370,.770197,.776703,.782913,.788848,.794527,.799969,.805189,.810200,.815017,.819651,.824112,.828411,.832557,.836558,.840422,.844156,.847769,.851265,.854652,.857933,.861115,.864201,.867196,.870103,.872928,.875672,.878341,.880935,.883460,.885916,.888308,.890637,.892906,.895117,.897272,.899373,.901424,.903425,.905378,.907285,.909148,.910968,.912746,.914484,.916183,.917845,.919469,.921058,.922613,.924135,.925624,.927081,.928508,.929906,.931274,.932615,.933929,.935218,.936481,.937720,.938935,.940126,.941296,.942443,.943569,.944674,.945759,.946823,.947869,.948895,.949903,.950893,.951866,.952821,.953760,.954682,.955588,.956479,.957354,.958214,.959060,.959892,.960710,.961514,.962305,.963083,.963848,.964600,.965341,.966069,.966786,.967491,.968185,.968868,.969540,.970201,.970852,.971493,.972123,.972743,.973354,.973954,.974546,.975128,.975701,.976265,.976820,.977367,.977905,.978435,.978958,.979472,.979978,.980477,.980968,.981452,.981928,.982397,.982858,.983312,.983760,.984200,.984633,.985060,.985480,.985894,.986302,.986703,.987098,.987487,.987871,.988248,.988620,.988986,.989347,.989703,.990052,.990396,.990734,.991067,.991394,.991716,.992032,.992343,.992649,.992951,.993247,.993538,.993825,.994107,.994385,.994658,.994927,.995191,.995451,.995707,.995959,.996206,.996449,.996688,.996922,.997152,.997379,.997601,.997820,.998035,.998246,.998454,.998658,.998859,.999056,.999251,.999442,.999631,.999817,1.00000,.221439,.330806,.402825,.456180,.498342,.533048,.562432,.587829,.610128,.629952,.647754,.663872,.678569,.692049,.704477,.715986,.726685,.736667,.746007,.754772,.763029,.770823,.778197,.785187,.791823,.798135,.804146,.809878,.815353,.820587,.825597,.830397,.835001,.839420,.843666,.847749,.851678,.855462,.859108,.862624,.866021,.869304,.872479,.875551,.878526,.881407,.884198,.886905,.889531,.892078,.894551,.896952,.899285,.901552,.903756,.905899,.907984,.910012,.911987,.913909,.915783,.917609,.919390,.921127,.922822,.924475,.926089,.927665,.929203,.930706,.932174,.933608,.935009,.936379,.937718,.939027,.940308,.941560,.942785,.943984,.945158,.946307,.947432,.948534,.949613,.950671,.951707,.952722,.953717,.954693,.955649,.956586,.957505,.958407,.959291,.960158,.961008,.961843,.962661,.963465,.964253,.965026,.965785,.966530,.967261,.967979,.968683,.969375,.970054,.970720,.971375,.972018,.972649,.973269,.973879,.974477,.975065,.975643,.976210,.976768,.977316,.977854,.978382,.978900,.979410,.979910,.980402,.980885,.981359,.981825,.982283,.982733,.983175,.983610,.984037,.984456,.984869,.985274,.985673,.986064,.986449,.986827,.987198,.987563,.987921,.988273,.988618,.988958,.989292,.989620,.989942,.990258,.990570,.990875,.991176,.991471,.991761,.992047,.992327,.992603,.992873,.993138,.993397,.993652,.993901,.994146,.994385,.994620,.994851,.995076,.995298,.995515,.995728,.995937,.996141,.996342,.996539,.996732,.996921,.997107,.997288,.997465,.997638,.997806,.997971,.998132,.998289,.998442,.998591,.998737,.998879,.999018,.999153,.999284,.999411,.999536,.999657,.999774,.999889,1.00000,.232478,.346824,.421814,.477140,.520681,.556374,.586470,.612376,.635028,.655083,.673017,.689190,.703876,.717290,.729607,.740965,.751482,.761252,.770358,.778867,.786866,.794401,.801516,.808245,.814620,.820671,.826422,.831895,.837110,.842086,.846839,.851383,.855733,.859899,.863894,.867727,.871408,.874945,.878347,.881620,.884777,.887823,.890764,.893604,.896350,.899004,.901572,.904058,.906464,.908795,.911054,.913244,.915368,.917428,.919427,.921368,.923253,.925084,.926862,.928592,.930274,.931912,.933507,.935060,.936573,.938047,.939484,.940885,.942250,.943582,.944881,.946149,.947386,.948593,.949771,.950922,.952045,.953143,.954215,.955262,.956285,.957285,.958263,.959219,.960153,.961067,.961961,.962836,.963691,.964528,.965347,.966149,.966933,.967701,.968453,.969189,.969910,.970616,.971307,.971984,.972647,.973297,.973932,.974555,.975164,.975762,.976347,.976920,.977481,.978031,.978570,.979099,.979616,.980124,.980621,.981109,.981587,.982056,.982515,.982966,.983407,.983839,.984263,.984678,.985084,.985483,.985873,.986255,.986630,.986997,.987357,.987710,.988056,.988395,.988728,.989053,.989373,.989686,.989993,.990294,.990589,.990878,.991160,.991437,.991708,.991973,.992233,.992488,.992737,.992981,.993220,.993454,.993684,.993908,.994128,.994344,.994555,.994762,.994965,.995164,.995357,.995547,.995731,.995911,.996087,.996259,.996426,.996590,.996750,.996905,.997057,.997206,.997351,.997492,.997630,.997765,.997897,.998025,.998151,.998274,.998392,.998507,.998618,.998726,.998830,.998931,.999029,.999124,.999215,.999304,.999389,.999471,.999549,.999624,.999695,.999763,.999827,.999889,.999946,1.00000,.236198,.352202,.428167,.484130,.528107,.564104,.594411,.620460,.643204,.663310,.681264,.697431,.712089,.725458,.737715,.749002,.759437,.769117,.778126,.786532,.794425,.801854,.808860,.815481,.821747,.827688,.833329,.838692,.843797,.848663,.853306,.857741,.861981,.866039,.869926,.873651,.877225,.880657,.883953,.887122,.890177,.893125,.895970,.898717,.901372,.903939,.906422,.908824,.911149,.913401,.915583,.917698,.919749,.921738,.923668,.925541,.927359,.929125,.930841,.932508,.934130,.935709,.937246,.938743,.940201,.941621,.943005,.944353,.945668,.946950,.948200,.949420,.950610,.951771,.952904,.954011,.955091,.956146,.957176,.958182,.959165,.960126,.961064,.961981,.962877,.963754,.964610,.965448,.966267,.967068,.967852,.968618,.969368,.970102,.970820,.971523,.972212,.972885,.973545,.974190,.974822,.975441,.976046,.976638,.977218,.977786,.978342,.978886,.979419,.979941,.980452,.980953,.981443,.981924,.982395,.982856,.983308,.983751,.984185,.984610,.985027,.985434,.985833,.986223,.986605,.986979,.987345,.987704,.988055,.988398,.988735,.989064,.989387,.989703,.990013,.990316,.990613,.990904,.991189,.991468,.991741,.992008,.992269,.992523,.992772,.993016,.993254,.993486,.993714,.993936,.994154,.994366,.994574,.994777,.994976,.995170,.995360,.995546,.995728,.995906,.996079,.996247,.996411,.996571,.996727,.996878,.997026,.997169,.997309,.997445,.997578,.997707,.997833,.997955,.998075,.998191,.998304,.998415,.998522,.998627,.998727,.998825,.998918,.999008,.999095,.999178,.999259,.999336,.999411,.999482,.999551,.999615,.999676,.999734,.999788,.999837,.999884,.999926,.999965,1.00000,.235274,.350789,.426410,.482102,.525853,.561654,.591788,.617679,.640278,.660250,.678080,.694128,.708675,.721940,.734096,.745288,.755631,.765223,.774147,.782471,.790295,.797667,.804626,.811207,.817443,.823361,.828986,.834338,.839439,.844305,.848953,.853396,.857649,.861723,.865629,.869376,.872975,.876434,.879759,.882959,.886047,.889028,.891908,.894692,.897383,.899987,.902508,.904949,.907314,.909606,.911828,.913984,.916076,.918106,.920078,.921993,.923854,.925663,.927421,.929131,.930796,.932417,.933997,.935535,.937035,.938497,.939922,.941312,.942668,.943990,.945281,.946541,.947771,.948972,.950145,.951290,.952409,.953503,.954571,.955616,.956637,.957635,.958611,.959565,.960499,.961412,.962305,.963179,.964034,.964871,.965691,.966493,.967278,.968047,.968800,.969537,.970260,.970967,.971661,.972340,.973005,.973657,.974295,.974920,.975532,.976133,.976721,.977297,.977862,.978415,.978958,.979490,.980011,.980522,.981024,.981515,.981998,.982470,.982934,.983389,.983835,.984271,.984699,.985118,.985528,.985930,.986325,.986711,.987089,.987460,.987824,.988181,.988530,.988873,.989209,.989538,.989861,.990177,.990488,.990792,.991090,.991381,.991665,.991944,.992216,.992482,.992742,.992997,.993246,.993490,.993728,.993961,.994189,.994412,.994631,.994844,.995053,.995258,.995458,.995653,.995844,.996029,.996209,.996384,.996554,.996720,.996880,.997037,.997189,.997337,.997481,.997621,.997758,.997890,.998019,.998144,.998266,.998385,.998500,.998613,.998720,.998824,.998923,.999018,.999109,.999196,.999280,.999360,.999438,.999512,.999581,.999646,.999706,.999763,.999814,.999860,.999902,.999940,.999972,1.00000,.232731,.347053,.421928,.477098,.520459,.555958,.585851,.611548,.633989,.653830,.671551,.687510,.701983,.715185,.727291,.738441,.748751,.758317,.767221,.775530,.783350,.790726,.797698,.804300,.810563,.816513,.822175,.827571,.832718,.837635,.842337,.846838,.851150,.855287,.859257,.863071,.866739,.870267,.873664,.876937,.880098,.883151,.886103,.888959,.891722,.894397,.896989,.899500,.901935,.904297,.906589,.908814,.910974,.913073,.915112,.917095,.919022,.920897,.922721,.924497,.926226,.927912,.929554,.931155,.932716,.934239,.935725,.937174,.938589,.939970,.941319,.942636,.943922,.945179,.946407,.947607,.948780,.949927,.951049,.952145,.953218,.954267,.955294,.956299,.957282,.958244,.959186,.960108,.961011,.961896,.962762,.963610,.964441,.965255,.966053,.966835,.967602,.968353,.969089,.969811,.970519,.971212,.971892,.972558,.973212,.973852,.974480,.975097,.975701,.976294,.976875,.977445,.978005,.978554,.979093,.979621,.980140,.980649,.981149,.981640,.982121,.982593,.983055,.983509,.983954,.984391,.984819,.985239,.985651,.986055,.986452,.986841,.987223,.987598,.987966,.988327,.988681,.989029,.989370,.989706,.990034,.990355,.990670,.990978,.991279,.991575,.991864,.992147,.992425,.992697,.992963,.993224,.993480,.993730,.993975,.994216,.994451,.994682,.994908,.995129,.995345,.995554,.995758,.995956,.996149,.996336,.996519,.996696,.996868,.997036,.997200,.997358,.997513,.997663,.997809,.997952,.998090,.998225,.998356,.998483,.998605,.998722,.998833,.998940,.999042,.999139,.999232,.999321,.999406,.999487,.999563,.999633,.999699,.999760,.999814,.999862,.999905,.999943,.999975,1.00000,.229493,.342347,.416341,.470920,.513864,.549060,.578729,.604262,.626584,.646341,.664007,.679932,.694391,.707595,.719715,.730890,.741235,.750843,.759796,.768161,.776041,.783481,.790522,.797195,.803533,.809561,.815303,.820780,.826011,.831013,.835801,.840389,.844791,.849016,.853077,.856982,.860740,.864360,.867849,.871214,.874464,.877605,.880643,.883583,.886429,.889185,.891856,.894445,.896957,.899394,.901759,.904056,.906287,.908455,.910563,.912612,.914606,.916546,.918434,.920272,.922063,.923808,.925510,.927169,.928787,.930365,.931905,.933409,.934876,.936309,.937708,.939075,.940410,.941715,.942990,.944237,.945456,.946648,.947813,.948953,.950069,.951161,.952230,.953277,.954301,.955305,.956288,.957251,.958194,.959118,.960024,.960911,.961781,.962634,.963471,.964290,.965094,.965883,.966656,.967415,.968159,.968889,.969605,.970308,.970997,.971673,.972337,.972989,.973629,.974257,.974873,.975479,.976073,.976657,.977230,.977793,.978346,.978889,.979422,.979946,.980461,.980966,.981461,.981948,.982426,.982894,.983355,.983807,.984251,.984687,.985115,.985535,.985948,.986354,.986752,.987144,.987528,.987906,.988277,.988642,.988999,.989349,.989693,.990029,.990359,.990683,.991000,.991311,.991616,.991915,.992208,.992495,.992777,.993053,.993324,.993590,.993851,.994106,.994357,.994603,.994843,.995075,.995302,.995522,.995737,.995945,.996148,.996346,.996538,.996724,.996906,.997083,.997256,.997423,.997586,.997745,.997900,.998050,.998196,.998339,.998475,.998605,.998728,.998847,.998959,.999067,.999170,.999268,.999362,.999451,.999534,.999611,.999683,.999749,.999808,.999859,.999905,.999944,.999976,1.00000,.227727,.339748,.413219,.467430,.510097,.545077,.574575,.599967,.622173,.641834,.659419,.675277,.689679,.702835,.714916,.726058,.736374,.745960,.754895,.763245,.771118,.778556,.785600,.792282,.798633,.804677,.810439,.815939,.821196,.826226,.831046,.835667,.840103,.844366,.848464,.852409,.856209,.859871,.863403,.866813,.870108,.873294,.876377,.879361,.882252,.885054,.887770,.890404,.892961,.895443,.897853,.900195,.902471,.904684,.906836,.908930,.910968,.912952,.914884,.916766,.918600,.920389,.922133,.923835,.925495,.927116,.928698,.930243,.931752,.933225,.934665,.936073,.937448,.938793,.940108,.941393,.942651,.943882,.945085,.946264,.947417,.948547,.949653,.950736,.951797,.952837,.953856,.954854,.955833,.956792,.957732,.958654,.959558,.960445,.961315,.962168,.963005,.963826,.964632,.965422,.966198,.966960,.967707,.968441,.969161,.969868,.970562,.971244,.971913,.972571,.973216,.973851,.974474,.975086,.975687,.976278,.976859,.977430,.977991,.978542,.979083,.979615,.980137,.980650,.981154,.981649,.982135,.982613,.983082,.983543,.983996,.984442,.984879,.985310,.985732,.986148,.986557,.986958,.987353,.987741,.988122,.988495,.988862,.989221,.989574,.989920,.990259,.990592,.990919,.991239,.991554,.991863,.992166,.992463,.992755,.993042,.993323,.993599,.993870,.994136,.994395,.994647,.994893,.995131,.995364,.995591,.995811,.996026,.996235,.996438,.996637,.996830,.997018,.997201,.997379,.997553,.997722,.997886,.998047,.998203,.998352,.998494,.998630,.998759,.998882,.998999,.999111,.999218,.999320,.999417,.999507,.999590,.999667,.999739,.999801,.999856,.999903,.999945,.999976,1.00000,.226226,.337539,.410567,.464467,.506902,.541701,.571054,.596330,.618440,.638022,.655541,.671344,.685700,.698818,.710867,.721984,.732280,.741849,.750770,.759111,.766978,.774417,.781464,.788153,.794513,.800571,.806348,.811866,.817143,.822196,.827038,.831685,.836148,.840439,.844567,.848542,.852373,.856067,.859633,.863076,.866405,.869626,.872744,.875763,.878690,.881526,.884278,.886948,.889541,.892059,.894505,.896883,.899195,.901444,.903632,.905762,.907836,.909856,.911824,.913741,.915612,.917436,.919215,.920952,.922648,.924303,.925920,.927499,.929042,.930550,.932024,.933464,.934873,.936251,.937599,.938917,.940208,.941471,.942707,.943917,.945102,.946263,.947400,.948515,.949607,.950677,.951726,.952754,.953763,.954752,.955721,.956673,.957606,.958521,.959419,.960300,.961165,.962014,.962848,.963666,.964469,.965257,.966031,.966792,.967538,.968271,.968992,.969699,.970394,.971077,.971748,.972407,.973055,.973692,.974318,.974933,.975537,.976132,.976716,.977291,.977856,.978411,.978956,.979492,.980018,.980536,.981044,.981544,.982036,.982519,.982994,.983461,.983921,.984372,.984816,.985253,.985683,.986105,.986520,.986929,.987330,.987724,.988111,.988490,.988862,.989228,.989587,.989939,.990285,.990625,.990959,.991286,.991608,.991924,.992235,.992539,.992839,.993133,.993422,.993705,.993982,.994251,.994513,.994769,.995018,.995260,.995496,.995727,.995951,.996170,.996383,.996590,.996792,.996990,.997182,.997369,.997551,.997729,.997903,.998072,.998233,.998386,.998532,.998672,.998805,.998932,.999052,.999168,.999277,.999382,.999479,.999568,.999651,.999727,.999794,.999851,.999902,.999945,.999977,1.00000,.223806,.333982,.406299,.459701,.501762,.536273,.565397,.590488,.612447,.631904,.649320,.665039,.679324,.692384,.704386,.715464,.725729,.735274,.744178,.752506,.760368,.767806,.774859,.781559,.787935,.794011,.799811,.805355,.810661,.815746,.820623,.825306,.829808,.834138,.838309,.842328,.846204,.849945,.853558,.857050,.860428,.863699,.866868,.869939,.872917,.875806,.878610,.881333,.883979,.886550,.889050,.891482,.893848,.896151,.898394,.900578,.902706,.904781,.906803,.908775,.910700,.912578,.914412,.916202,.917951,.919660,.921330,.922962,.924558,.926119,.927645,.929138,.930599,.932028,.933428,.934797,.936139,.937452,.938739,.939999,.941234,.942445,.943632,.944795,.945936,.947054,.948152,.949228,.950284,.951320,.952337,.953335,.954314,.955276,.956220,.957146,.958056,.958950,.959828,.960691,.961538,.962370,.963188,.963991,.964781,.965556,.966319,.967069,.967806,.968530,.969242,.969943,.970631,.971309,.971975,.972630,.973275,.973909,.974532,.975146,.975750,.976343,.976927,.977500,.978065,.978620,.979166,.979704,.980232,.980752,.981264,.981767,.982263,.982750,.983230,.983702,.984167,.984624,.985075,.985518,.985953,.986381,.986802,.987215,.987621,.988020,.988412,.988797,.989176,.989548,.989914,.990273,.990627,.990974,.991316,.991652,.991982,.992307,.992626,.992940,.993246,.993544,.993836,.994120,.994397,.994667,.994931,.995188,.995439,.995683,.995922,.996155,.996382,.996604,.996820,.997032,.997238,.997439,.997635,.997826,.998009,.998183,.998349,.998507,.998658,.998802,.998939,.999070,.999195,.999314,.999424,.999525,.999618,.999704,.999778,.999842,.999897,.999945,.999978,1.00000,.221973,.331284,.403056,.456073,.497845,.532129,.561072,.586014,.607851,.627206,.644536,.660182,.674407,.687415,.699374,.710415,.720650,.730170,.739053,.747364,.755215,.762648,.769700,.776403,.782786,.788873,.794686,.800246,.805571,.810676,.815577,.820285,.824814,.829173,.833374,.837424,.841333,.845108,.848756,.852284,.855699,.859007,.862213,.865321,.868337,.871265,.874108,.876870,.879554,.882164,.884704,.887175,.889580,.891923,.894205,.896429,.898597,.900712,.902774,.904786,.906750,.908668,.910541,.912372,.914161,.915910,.917619,.919291,.920927,.922527,.924093,.925625,.927125,.928594,.930033,.931442,.932822,.934175,.935500,.936799,.938073,.939322,.940547,.941748,.942926,.944083,.945218,.946331,.947424,.948497,.949550,.950585,.951601,.952598,.953578,.954540,.955486,.956415,.957328,.958226,.959107,.959974,.960826,.961664,.962488,.963297,.964094,.964877,.965647,.966405,.967150,.967884,.968605,.969315,.970013,.970701,.971377,.972043,.972698,.973343,.973978,.974603,.975217,.975822,.976417,.977003,.977580,.978147,.978706,.979256,.979797,.980330,.980855,.981372,.981881,.982382,.982876,.983362,.983841,.984313,.984776,.985232,.985681,.986122,.986555,.986982,.987401,.987813,.988219,.988618,.989011,.989397,.989777,.990150,.990518,.990880,.991236,.991586,.991931,.992270,.992601,.992924,.993240,.993548,.993849,.994142,.994429,.994709,.994983,.995250,.995511,.995765,.996014,.996257,.996494,.996726,.996953,.997174,.997390,.997601,.997802,.997995,.998178,.998353,.998520,.998680,.998832,.998977,.999116,.999249,.999371,.999483,.999586,.999681,.999762,.999833,.999893,.999945,.999978,1.00000,.218850,.326680,.397518,.449873,.491146,.525038,.553666,.578350,.599971,.619146,.636324,.651841,.665956,.678871,.690750,.701724,.711902,.721374,.730217,.738495,.746322,.753738,.760781,.767481,.773866,.779961,.785788,.791365,.796711,.801842,.806770,.811510,.816073,.820470,.824709,.828801,.832754,.836574,.840270,.843847,.847312,.850672,.853931,.857094,.860165,.863149,.866049,.868869,.871613,.874283,.876883,.879415,.881882,.884287,.886632,.888919,.891151,.893329,.895455,.897532,.899560,.901543,.903482,.905378,.907232,.909046,.910821,.912558,.914259,.915925,.917556,.919154,.920719,.922254,.923757,.925232,.926677,.928094,.929485,.930848,.932187,.933500,.934789,.936055,.937298,.938518,.939717,.940894,.942051,.943187,.944304,.945401,.946480,.947540,.948582,.949607,.950615,.951606,.952581,.953539,.954483,.955411,.956324,.957222,.958106,.958977,.959833,.960676,.961507,.962324,.963129,.963921,.964701,.965470,.966227,.966973,.967707,.968431,.969144,.969846,.970538,.971220,.971891,.972553,.973204,.973846,.974479,.975102,.975717,.976322,.976919,.977507,.978087,.978658,.979221,.979777,.980324,.980864,.981396,.981921,.982438,.982947,.983448,.983941,.984427,.984905,.985376,.985840,.986297,.986747,.987190,.987627,.988057,.988481,.988898,.989310,.989715,.990114,.990507,.990895,.991274,.991645,.992008,.992363,.992710,.993050,.993383,.993708,.994026,.994338,.994642,.994941,.995232,.995518,.995798,.996071,.996339,.996601,.996857,.997109,.997349,.997579,.997799,.998009,.998211,.998404,.998589,.998765,.998935,.999096,.999246,.999383,.999509,.999626,.999725,.999809,.999882,.999943,.999979,1.00000,.216830,.323699,.393928,.445849,.486793,.520427,.548844,.573355,.594831,.613884,.630958,.646386,.660424,.673273,.685095,.696020,.706155,.715591,.724403,.732654,.740460,.747861,.754892,.761584,.767966,.774061,.779890,.785473,.790828,.795969,.800910,.805665,.810244,.814659,.818919,.823033,.827008,.830852,.834573,.838176,.841669,.845057,.848345,.851538,.854640,.857656,.860588,.863441,.866218,.868922,.871556,.874123,.876625,.879066,.881447,.883770,.886038,.888253,.890416,.892530,.894596,.896617,.898594,.900528,.902421,.904274,.906088,.907864,.909605,.911310,.912980,.914618,.916224,.917798,.919341,.920856,.922341,.923799,.925229,.926633,.928012,.929366,.930695,.932002,.933285,.934546,.935785,.937003,.938201,.939378,.940535,.941674,.942793,.943894,.944977,.946043,.947091,.948123,.949139,.950138,.951122,.952090,.953044,.953983,.954908,.955818,.956715,.957599,.958470,.959327,.960172,.961005,.961826,.962634,.963431,.964217,.964991,.965755,.966507,.967250,.967981,.968702,.969413,.970114,.970805,.971486,.972158,.972820,.973474,.974118,.974754,.975380,.975999,.976609,.977210,.977804,.978390,.978968,.979538,.980101,.980656,.981202,.981741,.982272,.982795,.983311,.983819,.984320,.984814,.985301,.985781,.986255,.986721,.987181,.987635,.988083,.988524,.988959,.989389,.989812,.990227,.990633,.991031,.991421,.991803,.992177,.992544,.992904,.993256,.993601,.993939,.994271,.994596,.994914,.995226,.995532,.995832,.996126,.996414,.996696,.996967,.997227,.997477,.997716,.997945,.998166,.998377,.998580,.998775,.998961,.999134,.999293,.999440,.999575,.999690,.999788,.999871,.999942,.999980,1.00000,.214415,.320122,.389607,.440991,.481523,.514827,.542974,.567258,.588541,.607428,.624357,.639659,.653586,.666337,.678071,.688918,.698984,.708358,.717114,.725316,.733080,.740445,.747446,.754115,.760478,.766558,.772378,.777955,.783307,.788449,.793394,.798155,.802744,.807171,.811444,.815574,.819567,.823431,.827174,.830800,.834317,.837732,.841048,.844270,.847402,.850449,.853414,.856301,.859112,.861852,.864523,.867127,.869668,.872148,.874568,.876932,.879241,.881497,.883703,.885859,.887968,.890033,.892053,.894032,.895969,.897866,.899726,.901548,.903334,.905084,.906801,.908485,.910137,.911758,.913349,.914910,.916442,.917947,.919425,.920876,.922302,.923704,.925082,.926437,.927769,.929079,.930368,.931635,.932882,.934109,.935317,.936505,.937675,.938827,.939960,.941077,.942176,.943258,.944325,.945375,.946410,.947430,.948435,.949425,.950402,.951364,.952313,.953248,.954171,.955080,.955977,.956862,.957735,.958595,.959445,.960282,.961109,.961925,.962729,.963524,.964307,.965081,.965844,.966597,.967340,.968074,.968798,.969513,.970218,.970915,.971603,.972282,.972952,.973615,.974269,.974914,.975552,.976182,.976805,.977419,.978026,.978624,.979215,.979797,.980372,.980940,.981500,.982053,.982598,.983137,.983669,.984194,.984712,.985223,.985728,.986227,.986719,.987205,.987685,.988159,.988625,.989081,.989530,.989970,.990403,.990827,.991244,.991653,.992055,.992450,.992838,.993219,.993592,.993960,.994320,.994675,.995023,.995365,.995700,.996030,.996348,.996654,.996949,.997233,.997507,.997770,.998024,.998269,.998505,.998732,.998942,.999138,.999319,.999487,.999630,.999750,.999852,.999939,.999980,1.00000,.212889,.317863,.386880,.437928,.478202,.511300,.539279,.563422,.584586,.603370,.620212,.635436,.649296,.661987,.673669,.684470,.694495,.703832,.712556,.720729,.728468,.735811,.742795,.749448,.755799,.761869,.767680,.773251,.778599,.783738,.788683,.793445,.798036,.802466,.806744,.810879,.814879,.818751,.822502,.826138,.829666,.833091,.836419,.839653,.842799,.845860,.848840,.851741,.854569,.857325,.860012,.862633,.865192,.867689,.870128,.872510,.874838,.877114,.879339,.881515,.883645,.885730,.887772,.889772,.891732,.893653,.895535,.897381,.899191,.900967,.902709,.904418,.906096,.907743,.909359,.910947,.912507,.914038,.915543,.917022,.918477,.919906,.921313,.922696,.924057,.925396,.926714,.928011,.929287,.930544,.931781,.932999,.934199,.935381,.936545,.937692,.938821,.939935,.941032,.942113,.943179,.944230,.945266,.946288,.947296,.948290,.949271,.950239,.951193,.952135,.953065,.953982,.954888,.955781,.956663,.957534,.958394,.959242,.960080,.960908,.961725,.962532,.963328,.964115,.964892,.965659,.966417,.967166,.967906,.968637,.969359,.970072,.970777,.971473,.972161,.972842,.973514,.974178,.974835,.975484,.976125,.976758,.977383,.978000,.978610,.979213,.979808,.980395,.980976,.981550,.982116,.982676,.983230,.983776,.984316,.984850,.985378,.985899,.986414,.986923,.987424,.987916,.988400,.988876,.989344,.989804,.990256,.990701,.991139,.991569,.991993,.992409,.992818,.993221,.993617,.994007,.994390,.994768,.995139,.995504,.995856,.996197,.996526,.996844,.997151,.997448,.997735,.998012,.998280,.998539,.998780,.999005,.999215,.999410,.999576,.999716,.999835,.999936,.999980,1.00000,.211794,.316243,.384924,.435731,.475820,.508771,.536629,.560671,.581750,.600461,.617239,.632408,.646219,.658869,.670513,.681281,.691276,.700588,.709288,.717441,.725161,.732490,.739460,.746102,.752443,.758506,.764311,.769878,.775222,.780359,.785303,.790065,.794657,.799089,.803370,.807509,.811513,.815390,.819146,.822788,.826323,.829756,.833092,.836335,.839490,.842561,.845551,.848464,.851303,.854070,.856770,.859404,.861975,.864485,.866937,.869334,.871676,.873966,.876205,.878396,.880541,.882641,.884699,.886715,.888691,.890627,.892526,.894388,.896215,.898007,.899766,.901492,.903187,.904850,.906484,.908089,.909666,.911216,.912738,.914235,.915706,.917154,.918579,.919980,.921359,.922717,.924053,.925368,.926663,.927939,.929195,.930432,.931651,.932852,.934035,.935201,.936350,.937483,.938599,.939700,.940785,.941856,.942912,.943955,.944983,.945998,.946999,.947987,.948963,.949926,.950876,.951815,.952741,.953656,.954560,.955452,.956334,.957204,.958064,.958914,.959753,.960582,.961401,.962210,.963010,.963801,.964582,.965354,.966117,.966872,.967617,.968355,.969083,.969804,.970516,.971221,.971918,.972607,.973288,.973962,.974628,.975286,.975937,.976580,.977215,.977843,.978464,.979078,.979685,.980285,.980879,.981466,.982046,.982619,.983187,.983748,.984302,.984851,.985394,.985931,.986459,.986979,.987491,.987995,.988490,.988978,.989459,.989932,.990397,.990855,.991307,.991751,.992188,.992619,.993043,.993460,.993871,.994276,.994675,.995068,.995448,.995816,.996172,.996517,.996852,.997176,.997489,.997793,.998087,.998372,.998638,.998888,.999121,.999340,.999526,.999684,.999819,.999933,.999980,1.00000,.210825,.314815,.383206,.433806,.473740,.506569,.534328,.558290,.579301,.597957,.614687,.629816,.643593,.656212,.667832,.678578,.688556,.697852,.706540,.714682,.722395,.729716,.736681,.743319,.749657,.755718,.761522,.767089,.772435,.777574,.782520,.787285,.791881,.796317,.800603,.804748,.808758,.812641,.816404,.820053,.823596,.827037,.830381,.833633,.836796,.839876,.842875,.845797,.848646,.851423,.854132,.856776,.859358,.861879,.864341,.866748,.869101,.871402,.873652,.875854,.878010,.880123,.882192,.884220,.886208,.888157,.890068,.891943,.893783,.895588,.897360,.899100,.900808,.902485,.904133,.905752,.907343,.908906,.910443,.911954,.913440,.914902,.916341,.917758,.919152,.920525,.921876,.923207,.924517,.925808,.927080,.928333,.929568,.930785,.931984,.933166,.934331,.935480,.936612,.937729,.938831,.939919,.940992,.942051,.943096,.944128,.945146,.946151,.947144,.948125,.949093,.950049,.950993,.951925,.952847,.953757,.954656,.955544,.956422,.957290,.958147,.958994,.959832,.960660,.961478,.962288,.963088,.963879,.964661,.965434,.966199,.966956,.967704,.968444,.969176,.969900,.970616,.971325,.972026,.972720,.973406,.974084,.974755,.975418,.976074,.976723,.977365,.977999,.978627,.979248,.979863,.980470,.981072,.981667,.982255,.982838,.983414,.983985,.984549,.985108,.985658,.986200,.986733,.987259,.987777,.988287,.988790,.989285,.989773,.990254,.990728,.991195,.991655,.992108,.992554,.992995,.993428,.993856,.994277,.994692,.995095,.995486,.995865,.996233,.996590,.996937,.997273,.997599,.997915,.998222,.998511,.998782,.999037,.999276,.999480,.999655,.999804,.999931,.999981,1.00000,.209377,.312683,.380643,.430939,.470644,.503295,.530911,.554756,.575672,.594247,.610910,.625983,.639712,.652293,.663879,.674598,.684553,.693830,.702504,.710634,.718337,.725651,.732610,.739244,.745580,.751640,.757444,.763012,.768360,.773502,.778452,.783223,.787824,.792267,.796560,.800712,.804730,.808622,.812395,.816054,.819606,.823058,.826414,.829677,.832853,.835946,.838958,.841894,.844756,.847547,.850271,.852930,.855526,.858063,.860541,.862963,.865332,.867649,.869916,.872135,.874308,.876437,.878524,.880570,.882575,.884542,.886472,.888365,.890224,.892048,.893838,.895597,.897324,.899021,.900688,.902327,.903937,.905521,.907077,.908608,.910115,.911597,.913057,.914494,.915909,.917302,.918675,.920027,.921359,.922672,.923965,.925240,.926496,.927735,.928956,.930160,.931348,.932519,.933674,.934813,.935938,.937048,.938144,.939226,.940295,.941350,.942392,.943421,.944437,.945442,.946434,.947414,.948382,.949339,.950285,.951220,.952144,.953057,.953959,.954852,.955734,.956607,.957470,.958324,.959168,.960004,.960830,.961647,.962456,.963256,.964048,.964832,.965607,.966375,.967134,.967886,.968630,.969367,.970096,.970818,.971532,.972239,.972939,.973631,.974317,.974995,.975667,.976332,.976990,.977641,.978286,.978925,.979557,.980183,.980803,.981417,.982025,.982627,.983223,.983814,.984397,.984971,.985538,.986096,.986648,.987191,.987728,.988257,.988779,.989294,.989802,.990303,.990798,.991286,.991768,.992243,.992712,.993174,.993631,.994082,.994520,.994947,.995362,.995766,.996159,.996541,.996914,.997276,.997628,.997972,.998296,.998602,.998891,.999165,.999400,.999602,.999777,.999927,.999981,1.00000,.208295,.311094,.378738,.428814,.468356,.500880,.528397,.552162,.573013,.591536,.608157,.623195,.636896,.649454,.661023,.671729,.681674,.690945,.699614,.707743,.715445,.722760,.729720,.736356,.742694,.748758,.754566,.760139,.765491,.770639,.775595,.780372,.784980,.789429,.793730,.797889,.801916,.805816,.809596,.813264,.816825,.820286,.823651,.826924,.830110,.833212,.836234,.839180,.842053,.844855,.847590,.850260,.852867,.855414,.857904,.860338,.862718,.865047,.867326,.869556,.871741,.873882,.875981,.878038,.880056,.882035,.883976,.885881,.887752,.889587,.891390,.893161,.894900,.896609,.898288,.899938,.901561,.903156,.904725,.906267,.907786,.909281,.910753,.912202,.913630,.915036,.916422,.917787,.919132,.920458,.921765,.923053,.924323,.925575,.926810,.928028,.929230,.930415,.931584,.932738,.933877,.935001,.936112,.937209,.938292,.939362,.940420,.941464,.942496,.943516,.944523,.945519,.946504,.947476,.948438,.949389,.950329,.951259,.952178,.953086,.953986,.954875,.955755,.956626,.957487,.958340,.959184,.960019,.960846,.961664,.962474,.963276,.964069,.964855,.965633,.966404,.967167,.967922,.968670,.969411,.970145,.970871,.971591,.972303,.973009,.973708,.974400,.975085,.975764,.976437,.977103,.977763,.978417,.979065,.979707,.980343,.980973,.981598,.982217,.982830,.983436,.984033,.984624,.985206,.985782,.986350,.986910,.987464,.988011,.988551,.989085,.989612,.990132,.990646,.991153,.991655,.992150,.992639,.993122,.993600,.994065,.994519,.994962,.995393,.995814,.996224,.996624,.997015,.997395,.997767,.998119,.998453,.998770,.999070,.999331,.999557,.999753,.999923,.999981,1.00000]
	# Z=9
	      Z9=[.165712,.248707,.304131,.345768,.379134,.406986,.430899,.451859,.470521,.487344,.502665,.516732,.529739,.541837,.553148,.563769,.573783,.583256,.592246,.600800,.608957,.616751,.624214,.631374,.638255,.644879,.651264,.657429,.663387,.669153,.674738,.680156,.685415,.690524,.695494,.700330,.705041,.709633,.714112,.718484,.722752,.726920,.730994,.734978,.738875,.742689,.746425,.750085,.753672,.757189,.760639,.764025,.767349,.770613,.773820,.776971,.780068,.783114,.786110,.789058,.791958,.794812,.797620,.800386,.803109,.805792,.808435,.811039,.813607,.816138,.818633,.821095,.823523,.825919,.828284,.830617,.832921,.835196,.837442,.839661,.841852,.844016,.846154,.848267,.850354,.852417,.854457,.856473,.858466,.860437,.862386,.864314,.866221,.868108,.869975,.871822,.873650,.875460,.877251,.879024,.880779,.882517,.884237,.885940,.887627,.889297,.890952,.892591,.894214,.895822,.897416,.898995,.900560,.902110,.903647,.905170,.906680,.908176,.909660,.911131,.912590,.914036,.915470,.916892,.918302,.919700,.921087,.922463,.923828,.925182,.926525,.927857,.929179,.930491,.931793,.933085,.934367,.935639,.936902,.938155,.939399,.940634,.941859,.943076,.944284,.945483,.946674,.947856,.949030,.950196,.951353,.952503,.953644,.954778,.955904,.957022,.958133,.959236,.960332,.961421,.962503,.963578,.964646,.965707,.966762,.967809,.968851,.969885,.970914,.971936,.972952,.973962,.974965,.975963,.976954,.977940,.978920,.979894,.980862,.981825,.982782,.983734,.984681,.985622,.986558,.987489,.988415,.989335,.990251,.991162,.992068,.992968,.993864,.994755,.995641,.996523,.997399,.998271,.999138,1.00000,.168809,.253342,.309782,.352176,.386143,.414491,.438826,.460152,.479137,.496249,.511829,.526132,.539356,.551653,.563147,.573940,.584113,.593736,.602865,.611552,.619828,.627732,.635296,.642548,.649512,.656212,.662667,.668894,.674909,.680726,.686358,.691816,.697111,.702253,.707251,.712111,.716843,.721452,.725944,.730327,.734601,.738773,.742848,.746828,.750720,.754526,.758250,.761896,.765467,.768966,.772396,.775759,.779057,.782294,.785472,.788592,.791657,.794668,.797628,.800538,.803398,.806211,.808977,.811699,.814377,.817013,.819608,.822164,.824681,.827161,.829604,.832012,.834386,.836726,.839034,.841310,.843555,.845770,.847956,.850113,.852242,.854343,.856417,.858465,.860487,.862483,.864456,.866404,.868329,.870231,.872110,.873967,.875803,.877618,.879413,.881187,.882941,.884677,.886393,.888090,.889770,.891430,.893074,.894699,.896308,.897899,.899474,.901033,.902576,.904104,.905616,.907113,.908595,.910063,.911516,.912955,.914381,.915793,.917192,.918577,.919950,.921310,.922658,.923993,.925317,.926628,.927928,.929216,.930493,.931759,.933014,.934258,.935491,.936714,.937926,.939129,.940321,.941504,.942677,.943840,.944993,.946138,.947273,.948399,.949516,.950624,.951723,.952814,.953896,.954969,.956035,.957092,.958141,.959183,.960216,.961242,.962260,.963270,.964273,.965269,.966257,.967238,.968213,.969180,.970140,.971094,.972040,.972980,.973914,.974841,.975762,.976676,.977584,.978486,.979382,.980272,.981155,.982033,.982905,.983772,.984632,.985487,.986337,.987181,.988020,.988853,.989681,.990504,.991322,.992135,.992943,.993746,.994544,.995337,.996125,.996909,.997689,.998464,.999234,1.00000,.175096,.262685,.321104,.364939,.400023,.429274,.454357,.476315,.495842,.513425,.529416,.544082,.557626,.570208,.581957,.592977,.603353,.613158,.622450,.631283,.639688,.647705,.655368,.662707,.669746,.676510,.683019,.689291,.695342,.701186,.706838,.712310,.717612,.722754,.727745,.732594,.737309,.741896,.746363,.750714,.754952,.759083,.763110,.767039,.770875,.774620,.778280,.781857,.785356,.788779,.792129,.795409,.798622,.801769,.804855,.807880,.810847,.813758,.816615,.819420,.822172,.824875,.827529,.830136,.832697,.835214,.837688,.840121,.842514,.844867,.847182,.849460,.851702,.853910,.856083,.858223,.860330,.862407,.864452,.866468,.868455,.870413,.872344,.874248,.876125,.877977,.879803,.881605,.883383,.885138,.886869,.888579,.890266,.891932,.893577,.895201,.896805,.898390,.899955,.901501,.903029,.904539,.906032,.907507,.908965,.910407,.911832,.913242,.914635,.916014,.917377,.918725,.920059,.921379,.922684,.923976,.925254,.926518,.927770,.929009,.930235,.931449,.932651,.933841,.935020,.936187,.937342,.938487,.939621,.940744,.941856,.942958,.944049,.945131,.946202,.947264,.948316,.949358,.950391,.951415,.952430,.953436,.954433,.955421,.956401,.957373,.958336,.959290,.960237,.961176,.962107,.963030,.963945,.964853,.965753,.966646,.967532,.968411,.969282,.970147,.971004,.971855,.972700,.973538,.974369,.975194,.976013,.976826,.977633,.978433,.979228,.980016,.980799,.981576,.982347,.983113,.983873,.984628,.985377,.986121,.986860,.987594,.988322,.989046,.989765,.990479,.991189,.991894,.992594,.993289,.993980,.994667,.995348,.996026,.996699,.997368,.998032,.998692,.999348,1.00000,.181322,.271944,.332332,.377604,.413806,.443961,.469797,.492394,.512471,.530533,.546946,.561985,.575860,.588739,.600755,.612014,.622606,.632606,.642075,.651067,.659609,.667741,.675500,.682916,.690017,.696827,.703368,.709659,.715717,.721558,.727196,.732644,.737913,.743014,.747956,.752749,.757400,.761917,.766306,.770575,.774726,.778766,.782698,.786529,.790262,.793903,.797454,.800921,.804305,.807611,.810842,.814001,.817090,.820111,.823069,.825964,.828799,.831576,.834297,.836965,.839580,.842144,.844659,.847127,.849549,.851927,.854261,.856554,.858805,.861018,.863192,.865329,.867429,.869495,.871526,.873524,.875489,.877423,.879326,.881200,.883044,.884860,.886649,.888411,.890147,.891857,.893543,.895204,.896841,.898456,.900047,.901616,.903164,.904691,.906196,.907682,.909147,.910593,.912020,.913428,.914819,.916191,.917547,.918885,.920207,.921512,.922801,.924075,.925333,.926576,.927805,.929018,.930218,.931403,.932575,.933733,.934878,.936010,.937129,.938235,.939330,.940412,.941483,.942542,.943590,.944627,.945653,.946668,.947672,.948666,.949650,.950624,.951588,.952542,.953486,.954421,.955347,.956263,.957170,.958069,.958959,.959840,.960713,.961578,.962435,.963284,.964125,.964958,.965784,.966602,.967413,.968216,.969013,.969802,.970584,.971359,.972128,.972889,.973644,.974393,.975135,.975871,.976601,.977325,.978043,.978755,.979462,.980162,.980857,.981547,.982231,.982910,.983583,.984251,.984914,.985571,.986224,.986871,.987513,.988151,.988784,.989412,.990036,.990655,.991270,.991881,.992487,.993089,.993687,.994280,.994870,.995455,.996037,.996615,.997188,.997758,.998324,.998887,.999445,1.00000,.192189,.287886,.351420,.398874,.436679,.468054,.494835,.518172,.538830,.557345,.574108,.589410,.603476,.616484,.628574,.639862,.650442,.660393,.669781,.678662,.687085,.695089,.702712,.709986,.716939,.723595,.729977,.736105,.741995,.747665,.753127,.758396,.763484,.768400,.773155,.777758,.782217,.786540,.790734,.794805,.798760,.802603,.806341,.809977,.813518,.816966,.820325,.823601,.826795,.829912,.832955,.835925,.838827,.841663,.844435,.847145,.849797,.852391,.854930,.857415,.859849,.862234,.864570,.866859,.869103,.871304,.873461,.875578,.877655,.879693,.881694,.883658,.885587,.887481,.889341,.891169,.892965,.894731,.896466,.898172,.899850,.901500,.903122,.904719,.906289,.907835,.909356,.910853,.912327,.913778,.915207,.916614,.918000,.919365,.920709,.922034,.923340,.924626,.925894,.927143,.928375,.929590,.930788,.931969,.933134,.934283,.935416,.936534,.937637,.938726,.939800,.940860,.941906,.942938,.943957,.944963,.945956,.946936,.947904,.948860,.949805,.950737,.951658,.952569,.953468,.954356,.955234,.956102,.956959,.957807,.958644,.959472,.960290,.961099,.961898,.962689,.963471,.964243,.965007,.965763,.966510,.967250,.967982,.968706,.969422,.970131,.970832,.971526,.972213,.972893,.973566,.974232,.974892,.975545,.976191,.976830,.977464,.978091,.978711,.979326,.979935,.980538,.981136,.981728,.982314,.982896,.983472,.984043,.984608,.985169,.985724,.986275,.986821,.987361,.987897,.988429,.988955,.989477,.989995,.990508,.991017,.991522,.992024,.992521,.993015,.993506,.993992,.994475,.994954,.995430,.995903,.996372,.996839,.997302,.997762,.998217,.998668,.999115,.999559,1.00000,.202601,.303238,.369890,.419553,.459022,.491698,.519523,.543711,.565070,.584167,.601415,.617122,.631526,.644813,.657134,.668609,.679338,.689405,.698879,.707821,.716280,.724301,.731921,.739175,.746092,.752699,.759018,.765071,.770876,.776450,.781808,.786964,.791930,.796717,.801337,.805799,.810110,.814281,.818317,.822225,.826014,.829688,.833253,.836714,.840076,.843343,.846520,.849610,.852617,.855545,.858396,.861174,.863882,.866523,.869098,.871611,.874064,.876458,.878796,.881081,.883313,.885495,.887629,.889716,.891758,.893756,.895711,.897625,.899500,.901335,.903133,.904895,.906622,.908314,.909973,.911599,.913194,.914759,.916294,.917800,.919278,.920729,.922153,.923552,.924926,.926276,.927602,.928904,.930184,.931442,.932679,.933894,.935089,.936264,.937419,.938555,.939673,.940772,.941853,.942917,.943964,.944995,.946009,.947008,.947992,.948960,.949913,.950852,.951777,.952688,.953585,.954469,.955340,.956198,.957044,.957877,.958698,.959507,.960305,.961091,.961867,.962631,.963385,.964128,.964861,.965584,.966297,.967001,.967695,.968379,.969055,.969721,.970378,.971027,.971667,.972299,.972923,.973538,.974145,.974745,.975336,.975921,.976497,.977067,.977629,.978184,.978732,.979273,.979808,.980335,.980857,.981372,.981880,.982382,.982878,.983368,.983853,.984331,.984803,.985270,.985731,.986186,.986636,.987080,.987518,.987951,.988379,.988801,.989219,.989631,.990038,.990440,.990838,.991230,.991618,.992001,.992380,.992754,.993124,.993489,.993850,.994207,.994560,.994908,.995252,.995593,.995929,.996262,.996590,.996915,.997237,.997555,.997871,.998183,.998492,.998799,.999103,.999404,.999703,1.00000,.210845,.315347,.384408,.435752,.476469,.510103,.538682,.563469,.585311,.604797,.622356,.638313,.652913,.666352,.678786,.690341,.701121,.711214,.720692,.729618,.738045,.746019,.753581,.760765,.767603,.774120,.780342,.786290,.791983,.797438,.802672,.807699,.812531,.817181,.821659,.825974,.830137,.834155,.838036,.841788,.845418,.848932,.852336,.855635,.858834,.861938,.864950,.867875,.870717,.873479,.876165,.878777,.881319,.883793,.886201,.888548,.890834,.893062,.895234,.897352,.899419,.901437,.903407,.905330,.907210,.909046,.910840,.912594,.914309,.915986,.917626,.919231,.920801,.922338,.923842,.925315,.926757,.928169,.929553,.930908,.932237,.933539,.934817,.936070,.937299,.938505,.939688,.940850,.941989,.943108,.944206,.945284,.946343,.947383,.948404,.949407,.950393,.951361,.952312,.953247,.954166,.955069,.955958,.956831,.957690,.958534,.959365,.960182,.960985,.961776,.962554,.963319,.964072,.964813,.965542,.966260,.966967,.967662,.968347,.969021,.969685,.970338,.970981,.971615,.972238,.972852,.973457,.974052,.974639,.975217,.975786,.976346,.976898,.977443,.977979,.978507,.979027,.979540,.980045,.980543,.981034,.981517,.981993,.982462,.982924,.983379,.983827,.984268,.984703,.985132,.985554,.985971,.986381,.986785,.987184,.987576,.987963,.988345,.988721,.989091,.989456,.989815,.990168,.990516,.990858,.991194,.991526,.991852,.992173,.992489,.992800,.993106,.993408,.993705,.993997,.994285,.994568,.994847,.995121,.995392,.995658,.995919,.996177,.996430,.996680,.996925,.997167,.997404,.997638,.997868,.998095,.998318,.998539,.998756,.998970,.999182,.999390,.999596,.999799,1.00000,.220329,.329187,.400899,.454046,.496059,.530655,.559958,.585293,.607547,.627338,.645117,.661220,.675909,.689387,.701818,.713333,.724042,.734037,.743393,.752177,.760452,.768266,.775660,.782671,.789328,.795661,.801694,.807449,.812947,.818203,.823236,.828059,.832686,.837128,.841398,.845504,.849456,.853263,.856933,.860472,.863892,.867198,.870396,.873490,.876487,.879390,.882204,.884932,.887579,.890148,.892642,.895064,.897418,.899706,.901930,.904093,.906198,.908246,.910240,.912182,.914075,.915921,.917721,.919476,.921190,.922862,.924494,.926087,.927644,.929164,.930649,.932101,.933520,.934907,.936263,.937589,.938886,.940155,.941397,.942612,.943801,.944966,.946107,.947225,.948320,.949393,.950444,.951475,.952485,.953475,.954446,.955398,.956332,.957248,.958146,.959027,.959892,.960740,.961573,.962390,.963192,.963979,.964751,.965509,.966254,.966984,.967702,.968406,.969098,.969778,.970445,.971101,.971745,.972377,.972999,.973610,.974210,.974799,.975379,.975949,.976508,.977058,.977598,.978128,.978649,.979161,.979664,.980159,.980644,.981122,.981591,.982052,.982505,.982951,.983389,.983819,.984242,.984658,.985068,.985470,.985865,.986254,.986635,.987010,.987379,.987741,.988097,.988447,.988791,.989129,.989461,.989788,.990109,.990424,.990735,.991040,.991340,.991635,.991925,.992210,.992490,.992764,.993033,.993297,.993556,.993810,.994060,.994304,.994544,.994779,.995010,.995237,.995459,.995677,.995891,.996101,.996307,.996510,.996708,.996903,.997094,.997280,.997462,.997640,.997814,.997984,.998151,.998314,.998473,.998629,.998781,.998929,.999074,.999216,.999354,.999489,.999621,.999750,.999877,1.00000,.231241,.345037,.419704,.474820,.518216,.553810,.583837,.609695,.632318,.652358,.670288,.686464,.701160,.714592,.726930,.738314,.748859,.758662,.767802,.776348,.784382,.791954,.799104,.805868,.812278,.818363,.824148,.829654,.834903,.839912,.844697,.849274,.853655,.857853,.861878,.865742,.869453,.873020,.876452,.879755,.882940,.886014,.888983,.891850,.894623,.897303,.899897,.902408,.904840,.907196,.909479,.911693,.913840,.915923,.917945,.919909,.921816,.923668,.925469,.927219,.928923,.930581,.932196,.933769,.935302,.936795,.938251,.939670,.941054,.942404,.943721,.945006,.946260,.947484,.948679,.949846,.950986,.952099,.953186,.954249,.955288,.956303,.957296,.958266,.959215,.960143,.961051,.961939,.962809,.963659,.964491,.965306,.966104,.966884,.967649,.968397,.969131,.969849,.970552,.971241,.971916,.972577,.973224,.973858,.974479,.975087,.975683,.976267,.976839,.977400,.977949,.978488,.979016,.979533,.980041,.980538,.981026,.981505,.981974,.982434,.982884,.983326,.983759,.984183,.984598,.985005,.985404,.985796,.986179,.986555,.986923,.987284,.987638,.987986,.988326,.988660,.988987,.989308,.989623,.989932,.990235,.990531,.990821,.991105,.991383,.991656,.991923,.992184,.992441,.992692,.992938,.993179,.993415,.993646,.993873,.994095,.994313,.994526,.994736,.994941,.995141,.995336,.995527,.995713,.995895,.996073,.996246,.996416,.996581,.996743,.996900,.997055,.997205,.997352,.997496,.997636,.997773,.997907,.998038,.998165,.998289,.998409,.998526,.998638,.998748,.998854,.998957,.999057,.999153,.999247,.999337,.999424,.999508,.999588,.999665,.999739,.999809,.999876,.999940,1.00000,.234929,.350371,.426008,.481759,.525593,.561492,.591733,.617738,.640456,.660550,.678503,.694677,.709350,.722740,.735022,.746339,.756806,.766522,.775568,.784013,.791947,.799415,.806460,.813119,.819424,.825403,.831082,.836482,.841625,.846527,.851207,.855678,.859953,.864046,.867968,.871728,.875336,.878801,.882130,.885332,.888420,.891398,.894274,.897052,.899737,.902332,.904843,.907273,.909626,.911905,.914113,.916254,.918330,.920344,.922298,.924195,.926037,.927826,.929565,.931254,.932899,.934499,.936057,.937574,.939052,.940492,.941896,.943264,.944597,.945898,.947166,.948404,.949611,.950790,.951940,.953063,.954160,.955231,.956277,.957298,.958297,.959272,.960225,.961157,.962068,.962958,.963828,.964679,.965512,.966326,.967123,.967902,.968665,.969411,.970141,.970856,.971556,.972241,.972912,.973569,.974212,.974841,.975457,.976060,.976650,.977228,.977794,.978348,.978891,.979423,.979943,.980453,.980953,.981443,.981922,.982393,.982853,.983305,.983747,.984181,.984606,.985021,.985428,.985826,.986216,.986598,.986972,.987338,.987696,.988047,.988391,.988728,.989058,.989381,.989697,.990007,.990311,.990609,.990901,.991186,.991466,.991739,.992006,.992267,.992522,.992772,.993016,.993254,.993488,.993716,.993939,.994157,.994371,.994580,.994784,.994984,.995179,.995370,.995557,.995740,.995919,.996092,.996261,.996426,.996586,.996743,.996895,.997043,.997187,.997328,.997465,.997599,.997729,.997856,.997979,.998099,.998217,.998331,.998442,.998551,.998655,.998756,.998854,.998947,.999038,.999125,.999209,.999290,.999368,.999443,.999515,.999583,.999648,.999709,.999767,.999821,.999871,.999918,.999961,1.00000,.234094,.349090,.424412,.479915,.523539,.559256,.589334,.615191,.637773,.657741,.675576,.691638,.706205,.719494,.731681,.742905,.753285,.762916,.771880,.780247,.788113,.795524,.802522,.809142,.815415,.821370,.827029,.832416,.837551,.842450,.847130,.851606,.855890,.859994,.863929,.867706,.871334,.874821,.878174,.881401,.884516,.887523,.890428,.893236,.895952,.898581,.901125,.903589,.905976,.908291,.910535,.912712,.914825,.916876,.918868,.920803,.922684,.924512,.926289,.928018,.929701,.931340,.932937,.934493,.936010,.937489,.938930,.940337,.941708,.943047,.944353,.945629,.946874,.948089,.949277,.950437,.951570,.952678,.953760,.954818,.955853,.956864,.957853,.958820,.959766,.960691,.961597,.962483,.963350,.964199,.965030,.965844,.966640,.967420,.968184,.968932,.969665,.970383,.971087,.971776,.972452,.973113,.973761,.974396,.975018,.975628,.976225,.976810,.977384,.977946,.978498,.979038,.979568,.980088,.980598,.981098,.981588,.982069,.982540,.983003,.983456,.983900,.984335,.984761,.985179,.985588,.985990,.986383,.986768,.987146,.987516,.987879,.988235,.988584,.988926,.989262,.989591,.989914,.990230,.990540,.990844,.991141,.991431,.991715,.991993,.992264,.992530,.992790,.993045,.993293,.993537,.993775,.994008,.994237,.994460,.994678,.994892,.995102,.995306,.995507,.995702,.995892,.996076,.996256,.996430,.996600,.996765,.996926,.997083,.997235,.997383,.997527,.997667,.997803,.997936,.998065,.998191,.998313,.998432,.998548,.998659,.998766,.998869,.998967,.999061,.999152,.999239,.999322,.999403,.999480,.999552,.999620,.999683,.999743,.999797,.999847,.999892,.999933,.999969,1.00000,.231719,.345595,.420214,.475221,.518473,.553900,.583746,.609414,.631841,.651679,.669405,.685376,.699866,.713090,.725222,.736402,.746743,.756343,.765282,.773628,.781484,.788895,.795899,.802533,.808827,.814808,.820499,.825922,.831097,.836040,.840768,.845294,.849631,.853791,.857785,.861622,.865312,.868862,.872280,.875574,.878755,.881828,.884800,.887674,.890456,.893150,.895760,.898289,.900742,.903121,.905430,.907671,.909848,.911962,.914017,.916015,.917958,.919848,.921687,.923477,.925221,.926921,.928577,.930192,.931767,.933304,.934803,.936266,.937694,.939088,.940449,.941779,.943078,.944347,.945587,.946800,.947985,.949144,.950277,.951386,.952470,.953531,.954569,.955584,.956579,.957552,.958505,.959438,.960351,.961246,.962123,.962982,.963823,.964647,.965455,.966247,.967023,.967784,.968530,.969261,.969978,.970681,.971370,.972046,.972708,.973358,.973995,.974620,.975232,.975834,.976423,.977002,.977570,.978127,.978674,.979211,.979737,.980254,.980762,.981260,.981749,.982228,.982698,.983159,.983611,.984055,.984490,.984917,.985336,.985747,.986150,.986546,.986934,.987316,.987690,.988057,.988417,.988771,.989119,.989460,.989794,.990121,.990441,.990755,.991062,.991363,.991657,.991946,.992229,.992506,.992777,.993043,.993304,.993559,.993809,.994054,.994294,.994529,.994760,.994986,.995206,.995420,.995628,.995830,.996027,.996219,.996406,.996587,.996764,.996935,.997103,.997265,.997424,.997578,.997728,.997874,.998016,.998154,.998289,.998420,.998545,.998665,.998780,.998890,.998995,.999095,.999192,.999284,.999372,.999456,.999535,.999608,.999677,.999741,.999798,.999850,.999896,.999937,.999971,1.00000,.229507,.342351,.416329,.470889,.513811,.548985,.578632,.604141,.626439,.646173,.663814,.679717,.694152,.707333,.719430,.730583,.740905,.750491,.759422,.767765,.775624,.783044,.790064,.796718,.803036,.809045,.814768,.820227,.825440,.830424,.835195,.839767,.844151,.848360,.852404,.856293,.860036,.863640,.867114,.870464,.873701,.876830,.879858,.882788,.885626,.888375,.891040,.893625,.896133,.898566,.900930,.903225,.905456,.907625,.909733,.911784,.913780,.915723,.917614,.919456,.921252,.923002,.924709,.926375,.927999,.929585,.931133,.932644,.934120,.935562,.936970,.938346,.939692,.941006,.942292,.943549,.944779,.945982,.947159,.948311,.949438,.950542,.951622,.952679,.953715,.954730,.955723,.956697,.957651,.958585,.959502,.960399,.961280,.962142,.962989,.963818,.964632,.965430,.966213,.966981,.967734,.968473,.969198,.969909,.970607,.971291,.971963,.972623,.973270,.973905,.974529,.975141,.975742,.976332,.976912,.977481,.978040,.978589,.979129,.979658,.980178,.980689,.981190,.981681,.982164,.982638,.983103,.983560,.984008,.984449,.984881,.985306,.985723,.986133,.986535,.986930,.987319,.987700,.988075,.988443,.988804,.989158,.989505,.989845,.990178,.990505,.990826,.991140,.991448,.991750,.992047,.992337,.992622,.992902,.993176,.993445,.993709,.993967,.994221,.994470,.994713,.994949,.995179,.995402,.995620,.995832,.996039,.996240,.996435,.996626,.996812,.996992,.997168,.997340,.997507,.997669,.997828,.997982,.998132,.998279,.998418,.998552,.998679,.998801,.998917,.999028,.999135,.999236,.999333,.999425,.999511,.999591,.999665,.999733,.999794,.999848,.999896,.999939,.999973,1.00000,.226634,.338180,.411383,.465426,.507986,.542898,.572355,.597727,.619928,.639596,.657197,.673079,.687511,.700702,.712821,.724006,.734368,.744001,.752985,.761386,.769306,.776790,.783876,.790598,.796986,.803066,.808862,.814394,.819682,.824741,.829588,.834236,.838697,.842984,.847106,.851073,.854893,.858576,.862127,.865555,.868868,.872072,.875172,.878174,.881081,.883898,.886630,.889280,.891851,.894347,.896772,.899128,.901417,.903643,.905809,.907915,.909966,.911962,.913906,.915800,.917646,.919446,.921202,.922915,.924586,.926218,.927811,.929366,.930886,.932370,.933820,.935238,.936624,.937978,.939303,.940599,.941866,.943106,.944320,.945507,.946670,.947809,.948925,.950017,.951088,.952137,.953165,.954172,.955160,.956128,.957078,.958009,.958922,.959817,.960696,.961557,.962403,.963233,.964047,.964847,.965631,.966401,.967157,.967899,.968628,.969343,.970046,.970736,.971414,.972079,.972733,.973376,.974007,.974628,.975237,.975836,.976425,.977004,.977573,.978132,.978681,.979221,.979751,.980271,.980782,.981285,.981779,.982264,.982740,.983209,.983669,.984122,.984566,.985004,.985433,.985856,.986271,.986679,.987081,.987476,.987863,.988243,.988615,.988981,.989340,.989692,.990037,.990376,.990708,.991035,.991355,.991669,.991978,.992280,.992578,.992869,.993156,.993437,.993713,.993984,.994247,.994504,.994754,.994998,.995235,.995466,.995691,.995910,.996124,.996331,.996534,.996731,.996923,.997110,.997292,.997470,.997643,.997812,.997976,.998136,.998288,.998434,.998573,.998706,.998833,.998954,.999069,.999180,.999285,.999385,.999479,.999565,.999646,.999720,.999786,.999844,.999894,.999939,.999974,1.00000,.225158,.336009,.408774,.462510,.504839,.539571,.568885,.594140,.616245,.635833,.653368,.669194,.683579,.696731,.708818,.719975,.730315,.739930,.748900,.757290,.765204,.772686,.779774,.786503,.792900,.798992,.804803,.810352,.815659,.820740,.825610,.830283,.834771,.839085,.843236,.847233,.851084,.854799,.858383,.861845,.865192,.868430,.871564,.874600,.877542,.880395,.883161,.885846,.888452,.890984,.893444,.895835,.898159,.900421,.902621,.904763,.906848,.908880,.910858,.912787,.914668,.916502,.918293,.920040,.921746,.923411,.925038,.926627,.928180,.929697,.931181,.932631,.934050,.935437,.936794,.938122,.939422,.940694,.941939,.943158,.944352,.945522,.946668,.947791,.948892,.949971,.951029,.952067,.953084,.954081,.955060,.956020,.956961,.957885,.958792,.959682,.960556,.961413,.962255,.963082,.963893,.964690,.965473,.966241,.966996,.967738,.968466,.969182,.969886,.970577,.971256,.971924,.972580,.973225,.973859,.974482,.975095,.975698,.976291,.976874,.977446,.978009,.978562,.979106,.979640,.980165,.980682,.981189,.981688,.982179,.982661,.983136,.983602,.984061,.984512,.984956,.985392,.985821,.986244,.986659,.987067,.987467,.987860,.988246,.988625,.988996,.989361,.989720,.990072,.990417,.990757,.991090,.991417,.991739,.992054,.992365,.992669,.992968,.993262,.993551,.993832,.994106,.994373,.994634,.994887,.995134,.995375,.995610,.995839,.996062,.996279,.996491,.996697,.996898,.997094,.997286,.997472,.997654,.997831,.998004,.998168,.998326,.998476,.998619,.998756,.998886,.999010,.999129,.999242,.999351,.999451,.999544,.999630,.999709,.999779,.999840,.999893,.999940,.999974,1.00000,.222773,.332499,.404559,.457799,.499755,.534198,.563281,.588349,.610299,.629760,.647188,.662925,.677236,.690326,.702361,.713477,.723782,.733369,.742317,.750691,.758595,.766074,.773165,.779901,.786310,.792418,.798249,.803822,.809155,.814265,.819167,.823874,.828398,.832750,.836941,.840979,.844874,.848633,.852263,.855771,.859166,.862453,.865637,.868722,.871715,.874618,.877437,.880174,.882833,.885417,.887930,.890374,.892753,.895068,.897323,.899519,.901659,.903744,.905778,.907761,.909696,.911585,.913430,.915231,.916991,.918710,.920390,.922033,.923639,.925209,.926745,.928248,.929719,.931159,.932568,.933947,.935298,.936621,.937917,.939187,.940431,.941651,.942847,.944020,.945170,.946298,.947404,.948490,.949555,.950601,.951626,.952634,.953622,.954593,.955546,.956482,.957401,.958304,.959191,.960062,.960919,.961760,.962587,.963399,.964198,.964982,.965754,.966513,.967259,.967992,.968713,.969422,.970120,.970806,.971481,.972145,.972799,.973441,.974074,.974696,.975308,.975910,.976503,.977085,.977658,.978221,.978776,.979321,.979858,.980386,.980905,.981417,.981920,.982415,.982903,.983383,.983855,.984320,.984778,.985228,.985671,.986106,.986534,.986954,.987367,.987772,.988171,.988563,.988948,.989326,.989698,.990064,.990424,.990777,.991125,.991466,.991802,.992132,.992457,.992777,.993088,.993392,.993688,.993977,.994260,.994535,.994803,.995065,.995321,.995570,.995814,.996051,.996283,.996509,.996730,.996945,.997155,.997360,.997560,.997756,.997942,.998120,.998290,.998453,.998607,.998755,.998896,.999031,.999159,.999282,.999395,.999500,.999597,.999686,.999763,.999831,.999889,.999940,.999975,1.00000,.220873,.329704,.401203,.454048,.495710,.529923,.558823,.583742,.605571,.624931,.642275,.657943,.672196,.685238,.697234,.708316,.718595,.728162,.737093,.745455,.753353,.760830,.767922,.774664,.781082,.787203,.793049,.798639,.803992,.809125,.814050,.818783,.823334,.827715,.831936,.836006,.839933,.843726,.847391,.850935,.854365,.857688,.860909,.864033,.867064,.870005,.872862,.875638,.878337,.880961,.883514,.885998,.888417,.890773,.893068,.895304,.897485,.899611,.901686,.903710,.905686,.907616,.909501,.911343,.913143,.914903,.916624,.918307,.919953,.921564,.923140,.924683,.926194,.927673,.929122,.930541,.931931,.933294,.934629,.935937,.937221,.938479,.939714,.940925,.942113,.943279,.944423,.945547,.946649,.947732,.948795,.949839,.950865,.951872,.952861,.953834,.954789,.955728,.956650,.957557,.958449,.959325,.960187,.961034,.961867,.962687,.963493,.964286,.965065,.965833,.966587,.967330,.968061,.968780,.969488,.970185,.970871,.971546,.972211,.972865,.973509,.974143,.974767,.975380,.975984,.976579,.977164,.977741,.978308,.978867,.979417,.979958,.980491,.981017,.981534,.982043,.982545,.983039,.983526,.984005,.984477,.984941,.985397,.985845,.986286,.986719,.987146,.987565,.987978,.988384,.988783,.989176,.989562,.989942,.990316,.990684,.991046,.991402,.991753,.992098,.992434,.992763,.993084,.993398,.993704,.994003,.994295,.994580,.994859,.995131,.995397,.995656,.995910,.996157,.996399,.996636,.996866,.997092,.997312,.997528,.997733,.997930,.998117,.998297,.998468,.998632,.998788,.998937,.999080,.999216,.999342,.999458,.999564,.999663,.999748,.999821,.999885,.999939,.999976,1.00000,.217663,.324972,.395511,.447675,.488823,.522634,.551209,.575862,.597470,.616645,.633833,.649368,.663508,.676454,.688368,.699382,.709602,.719120,.728011,.736339,.744212,.751673,.758757,.765496,.771918,.778048,.783908,.789518,.794894,.800053,.805009,.809775,.814363,.818784,.823046,.827161,.831134,.834975,.838690,.842285,.845769,.849147,.852424,.855604,.858693,.861693,.864610,.867447,.870207,.872893,.875509,.878057,.880539,.882960,.885320,.887622,.889868,.892060,.894201,.896291,.898334,.900331,.902283,.904192,.906060,.907887,.909675,.911425,.913139,.914817,.916461,.918071,.919649,.921195,.922711,.924197,.925654,.927083,.928485,.929860,.931210,.932535,.933835,.935112,.936366,.937598,.938808,.939997,.941165,.942312,.943440,.944549,.945639,.946710,.947764,.948800,.949819,.950821,.951807,.952777,.953731,.954670,.955594,.956504,.957399,.958280,.959148,.960002,.960843,.961671,.962487,.963290,.964081,.964861,.965629,.966385,.967130,.967865,.968588,.969301,.970004,.970696,.971378,.972049,.972711,.973363,.974006,.974639,.975264,.975879,.976485,.977083,.977672,.978253,.978826,.979390,.979947,.980496,.981037,.981571,.982097,.982614,.983124,.983626,.984120,.984606,.985086,.985558,.986022,.986480,.986931,.987375,.987813,.988244,.988669,.989087,.989500,.989906,.990306,.990700,.991086,.991464,.991833,.992194,.992548,.992894,.993232,.993564,.993888,.994205,.994515,.994819,.995116,.995407,.995692,.995971,.996244,.996511,.996772,.997028,.997273,.997508,.997733,.997948,.998154,.998352,.998541,.998722,.998896,.999062,.999215,.999357,.999487,.999607,.999710,.999798,.999873,.999938,.999977,1.00000,.215573,.321886,.391792,.443505,.484309,.517848,.546202,.570673,.592128,.611173,.628249,.643689,.657746,.670621,.682473,.693432,.703606,.713083,.721939,.730236,.738086,.745528,.752599,.759330,.765748,.771878,.777741,.783357,.788743,.793914,.798885,.803669,.808276,.812717,.817003,.821142,.825141,.829010,.832754,.836379,.839894,.843304,.846614,.849828,.852950,.855986,.858938,.861811,.864607,.867330,.869982,.872568,.875088,.877547,.879945,.882286,.884571,.886803,.888983,.891113,.893196,.895233,.897226,.899176,.901084,.902952,.904782,.906574,.908329,.910049,.911735,.913387,.915007,.916595,.918153,.919681,.921181,.922652,.924096,.925514,.926906,.928274,.929617,.930936,.932233,.933507,.934760,.935991,.937202,.938392,.939563,.940714,.941846,.942960,.944056,.945135,.946196,.947241,.948269,.949281,.950277,.951258,.952224,.953176,.954113,.955036,.955945,.956841,.957724,.958594,.959451,.960296,.961128,.961949,.962758,.963555,.964342,.965117,.965881,.966635,.967378,.968111,.968833,.969546,.970248,.970940,.971623,.972297,.972961,.973616,.974262,.974900,.975529,.976149,.976761,.977365,.977961,.978549,.979130,.979703,.980267,.980823,.981372,.981912,.982445,.982970,.983487,.983997,.984500,.984996,.985485,.985967,.986442,.986911,.987373,.987828,.988278,.988721,.989158,.989589,.990011,.990425,.990831,.991228,.991617,.991999,.992373,.992739,.993098,.993450,.993795,.994133,.994464,.994788,.995107,.995419,.995725,.996024,.996318,.996606,.996883,.997149,.997403,.997648,.997883,.998108,.998325,.998533,.998732,.998924,.999101,.999265,.999416,.999556,.999675,.999776,.999862,.999936,.999977,1.00000,.213019,.318107,.387230,.438381,.478755,.511952,.540026,.564263,.585520,.604395,.621326,.636638,.650584,.663361,.675128,.686011,.696118,.705535,.714338,.722589,.730400,.737811,.744856,.751567,.757970,.764090,.769947,.775561,.780949,.786125,.791105,.795899,.800520,.804977,.809282,.813441,.817463,.821356,.825126,.828779,.832323,.835764,.839105,.842351,.845508,.848578,.851566,.854475,.857309,.860070,.862762,.865387,.867948,.870448,.872887,.875270,.877598,.879873,.882096,.884270,.886397,.888479,.890517,.892512,.894467,.896382,.898258,.900097,.901900,.903667,.905401,.907101,.908770,.910407,.912014,.913591,.915140,.916661,.918155,.919622,.921064,.922482,.923875,.925245,.926593,.927918,.929222,.930505,.931767,.933009,.934231,.935434,.936618,.937784,.938932,.940063,.941176,.942273,.943353,.944418,.945466,.946500,.947519,.948523,.949513,.950489,.951451,.952400,.953336,.954259,.955169,.956067,.956952,.957826,.958688,.959539,.960378,.961207,.962024,.962831,.963628,.964413,.965189,.965954,.966710,.967455,.968191,.968918,.969636,.970344,.971044,.971734,.972416,.973090,.973755,.974412,.975061,.975702,.976336,.976961,.977579,.978188,.978789,.979382,.979968,.980545,.981116,.981679,.982234,.982783,.983324,.983859,.984386,.984908,.985422,.985930,.986432,.986927,.987416,.987899,.988373,.988839,.989296,.989745,.990186,.990618,.991043,.991461,.991871,.992273,.992669,.993057,.993439,.993813,.994181,.994543,.994898,.995247,.995590,.995927,.996251,.996564,.996865,.997155,.997435,.997705,.997965,.998215,.998457,.998690,.998906,.999106,.999293,.999466,.999613,.999737,.999843,.999932,.999977,1.00000,.211448,.315782,.384424,.435229,.475338,.508324,.536225,.560318,.581453,.600224,.617064,.632298,.646176,.658893,.670606,.681442,.691507,.700888,.709659,.717881,.725667,.733056,.740083,.746779,.753170,.759279,.765129,.770737,.776120,.781295,.786273,.791068,.795691,.800152,.804461,.808626,.812655,.816555,.820334,.823997,.827551,.831003,.834356,.837616,.840787,.843872,.846876,.849801,.852651,.855430,.858140,.860783,.863363,.865882,.868342,.870745,.873094,.875389,.877634,.879830,.881980,.884084,.886145,.888165,.890144,.892083,.893984,.895849,.897677,.899471,.901231,.902958,.904654,.906318,.907953,.909558,.911135,.912684,.914206,.915702,.917173,.918619,.920042,.921442,.922819,.924174,.925508,.926821,.928113,.929385,.930638,.931871,.933086,.934283,.935462,.936623,.937768,.938895,.940007,.941102,.942182,.943248,.944298,.945334,.946356,.947364,.948359,.949340,.950308,.951264,.952207,.953138,.954056,.954963,.955858,.956742,.957615,.958477,.959328,.960168,.960998,.961818,.962627,.963426,.964216,.964995,.965766,.966527,.967279,.968021,.968755,.969481,.970197,.970906,.971606,.972297,.972981,.973657,.974325,.974986,.975638,.976282,.976919,.977547,.978168,.978781,.979387,.979985,.980577,.981161,.981738,.982308,.982872,.983429,.983979,.984523,.985060,.985591,.986116,.986635,.987146,.987647,.988141,.988626,.989103,.989572,.990034,.990488,.990934,.991373,.991805,.992230,.992647,.993059,.993463,.993861,.994252,.994637,.995016,.995389,.995749,.996097,.996433,.996759,.997073,.997377,.997670,.997954,.998228,.998493,.998741,.998971,.999186,.999387,.999557,.999702,.999825,.999929,.999978,1.00000,.210317,.314111,.382408,.432966,.472887,.505722,.533502,.557493,.578542,.597240,.614017,.629197,.643027,.655702,.667379,.678184,.688221,.697578,.706327,.714530,.722300,.729675,.736691,.743377,.749760,.755863,.761708,.767312,.772694,.777867,.782846,.787642,.792267,.796731,.801044,.805213,.809248,.813154,.816939,.820609,.824172,.827632,.830995,.834264,.837445,.840541,.843556,.846493,.849356,.852147,.854870,.857526,.860120,.862653,.865127,.867545,.869908,.872219,.874479,.876691,.878856,.880976,.883053,.885089,.887083,.889039,.890956,.892837,.894682,.896492,.898269,.900012,.901724,.903406,.905057,.906678,.908272,.909838,.911377,.912889,.914377,.915841,.917281,.918698,.920093,.921466,.922818,.924148,.925459,.926749,.928021,.929273,.930506,.931722,.932920,.934100,.935264,.936411,.937542,.938657,.939757,.940841,.941912,.942968,.944010,.945039,.946054,.947056,.948045,.949021,.949985,.950937,.951877,.952805,.953722,.954627,.955522,.956405,.957278,.958140,.958992,.959834,.960666,.961488,.962300,.963103,.963897,.964681,.965456,.966223,.966981,.967730,.968471,.969204,.969928,.970645,.971353,.972054,.972747,.973433,.974110,.974780,.975442,.976096,.976743,.977383,.978015,.978640,.979259,.979870,.980474,.981072,.981663,.982247,.982825,.983397,.983962,.984522,.985075,.985622,.986161,.986691,.987213,.987727,.988232,.988730,.989220,.989702,.990177,.990645,.991105,.991559,.992005,.992444,.992877,.993303,.993723,.994136,.994543,.994944,.995332,.995708,.996073,.996425,.996767,.997098,.997419,.997729,.998030,.998322,.998595,.998851,.999090,.999315,.999506,.999669,.999808,.999927,.999978,1.00000,.209358,.312696,.380707,.431061,.470829,.503544,.531227,.555139,.576122,.594765,.611496,.626636,.640433,.653080,.664733,.675518,.685538,.694881,.703618,.711813,.719575,.726944,.733955,.740638,.747019,.753122,.758966,.764572,.769956,.775132,.780114,.784914,.789544,.794014,.798332,.802508,.806549,.810463,.814256,.817934,.821505,.824973,.828344,.831623,.834812,.837917,.840941,.843887,.846759,.849560,.852292,.854958,.857561,.860103,.862587,.865015,.867388,.869708,.871978,.874200,.876375,.878506,.880594,.882640,.884646,.886613,.888542,.890434,.892291,.894114,.895902,.897659,.899383,.901077,.902741,.904376,.905983,.907562,.909114,.910641,.912142,.913620,.915074,.916505,.917914,.919302,.920668,.922013,.923338,.924644,.925930,.927197,.928446,.929676,.930890,.932085,.933264,.934427,.935573,.936703,.937819,.938920,.940006,.941078,.942136,.943181,.944213,.945231,.946237,.947230,.948210,.949179,.950136,.951081,.952015,.952937,.953849,.954750,.955640,.956519,.957389,.958248,.959098,.959938,.960768,.961589,.962401,.963204,.963998,.964783,.965560,.966328,.967088,.967839,.968583,.969318,.970046,.970766,.971479,.972184,.972881,.973570,.974252,.974927,.975594,.976254,.976907,.977552,.978191,.978823,.979448,.980067,.980679,.981285,.981884,.982477,.983064,.983645,.984220,.984789,.985350,.985902,.986446,.986982,.987510,.988030,.988542,.989047,.989545,.990035,.990518,.990994,.991463,.991926,.992381,.992830,.993273,.993709,.994139,.994563,.994975,.995374,.995761,.996137,.996502,.996856,.997199,.997533,.997856,.998171,.998466,.998743,.999004,.999250,.999460,.999639,.999793,.999924,.999978,1.00000,.207963,.310639,.378232,.428290,.467835,.500375,.527916,.551713,.572600,.591163,.607826,.622909,.636658,.649264,.660882,.671637,.681633,.690955,.699675,.707856,.715606,.722966,.729970,.736647,.743024,.749124,.754967,.760573,.765957,.771135,.776120,.780924,.785558,.790033,.794358,.798540,.802589,.806510,.810312,.813999,.817579,.821058,.824439,.827729,.830930,.834047,.837083,.840043,.842928,.845742,.848488,.851169,.853787,.856344,.858843,.861286,.863675,.866011,.868297,.870535,.872727,.874874,.876979,.879042,.881065,.883049,.884996,.886906,.888780,.890620,.892427,.894201,.895944,.897656,.899338,.900991,.902616,.904214,.905785,.907329,.908850,.910346,.911819,.913270,.914699,.916105,.917491,.918857,.920202,.921528,.922834,.924122,.925391,.926643,.927877,.929094,.930294,.931478,.932645,.933797,.934934,.936057,.937165,.938259,.939340,.940407,.941461,.942503,.943531,.944547,.945551,.946543,.947524,.948493,.949450,.950396,.951332,.952257,.953171,.954075,.954969,.955853,.956728,.957593,.958448,.959295,.960133,.960961,.961781,.962593,.963396,.964191,.964977,.965756,.966527,.967289,.968045,.968792,.969532,.970265,.970991,.971708,.972419,.973122,.973819,.974508,.975190,.975866,.976535,.977197,.977853,.978502,.979145,.979782,.980413,.981037,.981656,.982269,.982876,.983477,.984070,.984655,.985232,.985801,.986363,.986917,.987463,.988002,.988534,.989059,.989577,.990088,.990593,.991090,.991581,.992066,.992544,.993016,.993482,.993942,.994390,.994825,.995249,.995662,.996063,.996454,.996834,.997204,.997565,.997915,.998247,.998560,.998856,.999136,.999377,.999586,.999765,.999920,.999978,1.00000,.206940,.309137,.376430,.426279,.465667,.498087,.525533,.549254,.570079,.588591,.605213,.620262,.633983,.646567,.658167,.668909,.678895,.688209,.696925,.705103,.712852,.720212,.727215,.733893,.740270,.746372,.752217,.757825,.763212,.768393,.773382,.778190,.782828,.787308,.791637,.795824,.799878,.803804,.807611,.811304,.814890,.818375,.821763,.825060,.828268,.831393,.834437,.837404,.840297,.843120,.845875,.848564,.851191,.853758,.856266,.858718,.861117,.863463,.865759,.868007,.870209,.872367,.874482,.876556,.878590,.880585,.882542,.884463,.886349,.888201,.890019,.891805,.893559,.895283,.896977,.898642,.900279,.901888,.903471,.905028,.906561,.908070,.909555,.911019,.912460,.913880,.915279,.916657,.918015,.919354,.920674,.921975,.923258,.924523,.925770,.927001,.928214,.929412,.930593,.931759,.932910,.934046,.935169,.936277,.937372,.938454,.939522,.940578,.941622,.942652,.943671,.944678,.945674,.946658,.947630,.948592,.949543,.950483,.951412,.952332,.953241,.954141,.955032,.955913,.956785,.957648,.958503,.959348,.960185,.961014,.961834,.962646,.963450,.964246,.965035,.965816,.966589,.967354,.968113,.968864,.969608,.970345,.971074,.971797,.972513,.973222,.973924,.974620,.975309,.975992,.976669,.977339,.978003,.978662,.979314,.979960,.980601,.981236,.981865,.982489,.983104,.983712,.984313,.984905,.985491,.986069,.986640,.987204,.987761,.988311,.988854,.989390,.989920,.990444,.990961,.991472,.991977,.992476,.992968,.993455,.993930,.994393,.994844,.995284,.995714,.996133,.996541,.996940,.997329,.997708,.998068,.998409,.998733,.999041,.999308,.999540,.999741,.999916,.999978,1.00000]
	# Z=10
	      Z10=[.165243,.248005,.303274,.344797,.378072,.405848,.429698,.450601,.469214,.485994,.501275,.515306,.528280,.540348,.551630,.562226,.572215,.581665,.590634,.599168,.607306,.615082,.622529,.629674,.636541,.643152,.649525,.655677,.661625,.667380,.672957,.678365,.683616,.688718,.693680,.698510,.703214,.707801,.712274,.716641,.720904,.725069,.729139,.733119,.737013,.740825,.744559,.748217,.751803,.755319,.758769,.762154,.765478,.768742,.771949,.775101,.778199,.781246,.784244,.787193,.790095,.792951,.795762,.798530,.801257,.803943,.806589,.809198,.811769,.814305,.816805,.819272,.821705,.824106,.826476,.828816,.831125,.833406,.835659,.837884,.840081,.842253,.844398,.846518,.848613,.850684,.852731,.854755,.856757,.858736,.860694,.862631,.864547,.866443,.868319,.870176,.872014,.873833,.875634,.877417,.879183,.880931,.882662,.884376,.886074,.887755,.889421,.891071,.892707,.894327,.895932,.897523,.899100,.900663,.902212,.903748,.905271,.906781,.908277,.909762,.911234,.912693,.914141,.915577,.917001,.918414,.919815,.921206,.922585,.923954,.925312,.926659,.927997,.929324,.930641,.931949,.933246,.934535,.935813,.937083,.938343,.939594,.940837,.942070,.943295,.944511,.945718,.946917,.948108,.949291,.950465,.951632,.952791,.953942,.955086,.956222,.957350,.958471,.959585,.960692,.961791,.962884,.963970,.965049,.966122,.967188,.968247,.969300,.970346,.971387,.972421,.973449,.974470,.975486,.976496,.977500,.978498,.979491,.980478,.981459,.982434,.983405,.984370,.985329,.986284,.987233,.988177,.989116,.990050,.990980,.991904,.992823,.993737,.994646,.995550,.996450,.997344,.998234,.999120,1.00000,.168343,.252636,.308914,.351183,.385048,.413309,.437569,.458827,.477750,.494806,.510333,.524588,.537765,.550018,.561472,.572225,.582360,.591946,.601041,.609693,.617939,.625815,.633354,.640583,.647528,.654209,.660647,.666860,.672862,.678668,.684290,.689739,.695028,.700163,.705156,.710013,.714741,.719348,.723840,.728223,.732498,.736671,.740747,.744730,.748625,.752434,.756162,.759812,.763388,.766892,.770327,.773695,.777000,.780243,.783428,.786555,.789627,.792646,.795614,.798532,.801401,.804222,.806996,.809726,.812413,.815058,.817662,.820226,.822752,.825240,.827692,.830109,.832491,.834840,.837157,.839442,.841696,.843920,.846115,.848281,.850419,.852529,.854613,.856670,.858702,.860708,.862690,.864649,.866583,.868495,.870385,.872253,.874099,.875925,.877730,.879514,.881280,.883026,.884753,.886462,.888152,.889824,.891479,.893117,.894737,.896341,.897929,.899500,.901056,.902596,.904122,.905632,.907128,.908609,.910077,.911530,.912970,.914396,.915809,.917210,.918597,.919972,.921335,.922685,.924024,.925351,.926666,.927970,.929262,.930544,.931815,.933074,.934324,.935563,.936792,.938010,.939219,.940418,.941607,.942787,.943958,.945119,.946271,.947413,.948547,.949672,.950788,.951896,.952995,.954086,.955169,.956243,.957310,.958368,.959419,.960462,.961497,.962525,.963546,.964559,.965565,.966563,.967555,.968540,.969518,.970489,.971453,.972411,.973362,.974307,.975245,.976177,.977103,.978022,.978936,.979843,.980745,.981640,.982530,.983414,.984292,.985165,.986033,.986895,.987751,.988603,.989449,.990290,.991126,.991957,.992782,.993603,.994419,.995230,.996037,.996839,.997636,.998428,.999216,1.00000,.174224,.261387,.319529,.363161,.398087,.427209,.452185,.474052,.493500,.511014,.526944,.541556,.555052,.567590,.579300,.590284,.600628,.610403,.619669,.628477,.636861,.644859,.652505,.659828,.666854,.673607,.680105,.686368,.692411,.698250,.703897,.709365,.714664,.719804,.724794,.729644,.734359,.738948,.743416,.747770,.752012,.756147,.760179,.764114,.767956,.771709,.775377,.778962,.782470,.785902,.789262,.792552,.795775,.798935,.802032,.805069,.808048,.810972,.813842,.816660,.819427,.822143,.824812,.827433,.830010,.832542,.835032,.837480,.839889,.842258,.844590,.846885,.849144,.851368,.853559,.855716,.857841,.859935,.861999,.864033,.866038,.868015,.869964,.871886,.873782,.875653,.877498,.879319,.881116,.882890,.884640,.886369,.888076,.889761,.891425,.893069,.894693,.896297,.897882,.899448,.900996,.902526,.904039,.905534,.907012,.908474,.909919,.911349,.912763,.914162,.915545,.916914,.918268,.919608,.920934,.922246,.923545,.924830,.926102,.927362,.928609,.929843,.931066,.932277,.933476,.934664,.935840,.937006,.938160,.939304,.940438,.941560,.942673,.943775,.944868,.945951,.947024,.948087,.949142,.950187,.951223,.952250,.953268,.954277,.955278,.956271,.957255,.958231,.959199,.960159,.961111,.962055,.962992,.963921,.964842,.965756,.966663,.967563,.968455,.969341,.970220,.971092,.971957,.972816,.973669,.974515,.975355,.976188,.977015,.977837,.978652,.979461,.980265,.981062,.981854,.982640,.983421,.984196,.984966,.985730,.986489,.987243,.987992,.988736,.989475,.990209,.990938,.991663,.992382,.993098,.993808,.994514,.995215,.995912,.996604,.997292,.997975,.998654,.999329,1.00000,.180079,.270101,.330103,.375096,.411083,.441066,.466761,.489240,.509217,.527192,.543531,.558504,.572323,.585153,.597125,.608346,.618905,.628876,.638320,.647290,.655813,.663929,.671675,.679080,.686173,.692977,.699514,.705803,.711861,.717703,.723344,.728796,.734070,.739177,.744127,.748928,.753588,.758115,.762516,.766797,.770961,.775014,.778960,.782806,.786555,.790211,.793779,.797263,.800665,.803989,.807238,.810416,.813524,.816565,.819542,.822458,.825314,.828112,.830854,.833543,.836180,.838766,.841304,.843794,.846239,.848639,.850996,.853312,.855587,.857823,.860020,.862181,.864305,.866394,.868450,.870472,.872461,.874420,.876347,.878245,.880114,.881955,.883768,.885555,.887316,.889051,.890761,.892447,.894110,.895749,.897365,.898960,.900532,.902084,.903614,.905125,.906616,.908087,.909539,.910972,.912388,.913786,.915166,.916530,.917877,.919207,.920522,.921821,.923104,.924373,.925626,.926866,.928090,.929301,.930498,.931682,.932852,.934009,.935154,.936285,.937405,.938513,.939609,.940694,.941767,.942829,.943880,.944921,.945951,.946970,.947979,.948978,.949967,.950947,.951916,.952877,.953828,.954769,.955702,.956626,.957541,.958447,.959346,.960236,.961118,.961992,.962858,.963716,.964567,.965410,.966246,.967075,.967896,.968710,.969517,.970317,.971110,.971896,.972676,.973449,.974216,.974976,.975731,.976479,.977222,.977959,.978689,.979415,.980134,.980848,.981556,.982259,.982956,.983648,.984335,.985017,.985693,.986365,.987031,.987692,.988349,.989001,.989649,.990291,.990930,.991564,.992193,.992819,.993439,.994056,.994668,.995277,.995881,.996481,.997078,.997670,.998258,.998843,.999423,1.00000,.188369,.282324,.344808,.391556,.428864,.459877,.486396,.509542,.530067,.548494,.565205,.580486,.594558,.607592,.619727,.631077,.641732,.651772,.661259,.670250,.678782,.686896,.694628,.702011,.709073,.715838,.722328,.728564,.734563,.740340,.745910,.751287,.756481,.761504,.766366,.771075,.775640,.780069,.784368,.788544,.792600,.796542,.800375,.804104,.807733,.811268,.814712,.818069,.821343,.824537,.827655,.830699,.833672,.836576,.839415,.842191,.844906,.847563,.850162,.852707,.855198,.857638,.860028,.862370,.864665,.866914,.869120,.871283,.873405,.875487,.877530,.879536,.881505,.883438,.885336,.887201,.889033,.890833,.892602,.894341,.896051,.897734,.899389,.901017,.902620,.904197,.905750,.907278,.908783,.910265,.911725,.913163,.914579,.915974,.917349,.918704,.920039,.921355,.922652,.923931,.925193,.926437,.927665,.928877,.930072,.931252,.932416,.933566,.934700,.935820,.936926,.938018,.939096,.940161,.941212,.942251,.943277,.944290,.945291,.946280,.947258,.948224,.949179,.950123,.951056,.951979,.952891,.953793,.954685,.955567,.956439,.957302,.958155,.958999,.959834,.960660,.961477,.962285,.963085,.963876,.964659,.965434,.966201,.966961,.967712,.968456,.969193,.969922,.970644,.971359,.972067,.972767,.973461,.974149,.974829,.975503,.976171,.976832,.977487,.978135,.978778,.979415,.980046,.980671,.981291,.981905,.982514,.983118,.983716,.984308,.984896,.985478,.986056,.986628,.987195,.987758,.988316,.988869,.989417,.989960,.990500,.991035,.991565,.992092,.992614,.993133,.993647,.994158,.994664,.995167,.995666,.996161,.996653,.997141,.997625,.998107,.998585,.999060,.999531,1.00000,.201402,.301470,.367761,.417167,.456443,.488967,.516669,.540755,.562031,.581059,.598247,.613905,.628267,.641519,.653809,.665259,.675968,.686018,.695479,.704411,.712863,.720878,.728496,.735749,.742668,.749277,.755601,.761660,.767472,.773055,.778422,.783589,.788566,.793367,.798000,.802475,.806801,.810987,.815039,.818964,.822770,.826461,.830044,.833523,.836904,.840190,.843386,.846495,.849522,.852470,.855342,.858141,.860869,.863531,.866127,.868661,.871135,.873550,.875910,.878216,.880470,.882674,.884830,.886939,.889002,.891022,.892999,.894935,.896832,.898689,.900510,.902293,.904042,.905756,.907437,.909086,.910703,.912289,.913846,.915373,.916873,.918346,.919793,.921213,.922609,.923980,.925327,.926651,.927953,.929232,.930490,.931727,.932943,.934139,.935315,.936472,.937611,.938731,.939833,.940918,.941986,.943037,.944072,.945092,.946095,.947084,.948058,.949017,.949962,.950893,.951811,.952715,.953606,.954484,.955349,.956202,.957043,.957872,.958689,.959495,.960290,.961074,.961848,.962610,.963363,.964105,.964838,.965561,.966274,.966978,.967673,.968358,.969035,.969703,.970363,.971014,.971656,.972291,.972917,.973536,.974146,.974750,.975346,.975934,.976516,.977090,.977657,.978218,.978772,.979319,.979859,.980394,.980921,.981443,.981959,.982468,.982972,.983469,.983961,.984447,.984928,.985403,.985872,.986335,.986794,.987247,.987694,.988137,.988574,.989006,.989434,.989856,.990274,.990687,.991095,.991499,.991898,.992292,.992682,.993068,.993450,.993827,.994200,.994570,.994935,.995296,.995654,.996007,.996357,.996703,.997046,.997385,.997722,.998056,.998386,.998714,.999039,.999362,.999682,1.00000,.209775,.313776,.382525,.433650,.474205,.507715,.536195,.560905,.582684,.602119,.619637,.635561,.650135,.663554,.675972,.687516,.698289,.708378,.717855,.726781,.735212,.743191,.750760,.757952,.764798,.771326,.777559,.783519,.789225,.794694,.799943,.804985,.809833,.814499,.818993,.823326,.827506,.831542,.835442,.839212,.842860,.846393,.849816,.853134,.856352,.859475,.862507,.865452,.868313,.871095,.873800,.876431,.878993,.881486,.883914,.886280,.888586,.890833,.893025,.895163,.897249,.899286,.901275,.903219,.905117,.906972,.908786,.910559,.912293,.913989,.915648,.917272,.918861,.920416,.921939,.923431,.924891,.926322,.927724,.929098,.930444,.931765,.933061,.934332,.935579,.936802,.938003,.939182,.940339,.941475,.942590,.943686,.944761,.945818,.946856,.947876,.948878,.949862,.950830,.951781,.952716,.953636,.954540,.955429,.956304,.957164,.958010,.958843,.959662,.960468,.961262,.962042,.962811,.963567,.964311,.965044,.965766,.966476,.967176,.967865,.968543,.969211,.969869,.970516,.971154,.971783,.972402,.973012,.973613,.974205,.974788,.975363,.975929,.976487,.977037,.977579,.978114,.978640,.979160,.979671,.980176,.980673,.981162,.981645,.982120,.982589,.983051,.983507,.983956,.984398,.984835,.985265,.985689,.986107,.986519,.986926,.987326,.987722,.988111,.988496,.988874,.989247,.989614,.989976,.990332,.990683,.991029,.991369,.991704,.992035,.992360,.992681,.992997,.993308,.993614,.993917,.994214,.994508,.994797,.995081,.995362,.995639,.995911,.996179,.996443,.996704,.996960,.997213,.997462,.997707,.997950,.998189,.998425,.998658,.998888,.999116,.999341,.999563,.999783,1.00000,.219397,.327827,.399277,.452245,.494129,.528629,.557859,.583138,.605350,.625108,.642863,.658950,.673628,.687100,.699528,.711045,.721758,.731760,.741126,.749920,.758208,.766035,.773443,.780468,.787141,.793490,.799539,.805311,.810825,.816099,.821149,.825990,.830635,.835096,.839383,.843508,.847479,.851305,.854993,.858551,.861990,.865314,.868530,.871644,.874659,.877580,.880412,.883158,.885823,.888410,.890921,.893361,.895732,.898037,.900279,.902459,.904581,.906646,.908657,.910615,.912525,.914387,.916203,.917975,.919704,.921392,.923039,.924649,.926221,.927756,.929257,.930724,.932157,.933559,.934930,.936271,.937583,.938866,.940122,.941351,.942555,.943734,.944889,.946020,.947129,.948215,.949280,.950324,.951347,.952351,.953334,.954299,.955246,.956174,.957085,.957979,.958856,.959717,.960562,.961391,.962205,.963004,.963788,.964558,.965314,.966057,.966786,.967502,.968205,.968896,.969575,.970242,.970897,.971541,.972174,.972796,.973407,.974008,.974598,.975179,.975749,.976309,.976860,.977401,.977933,.978455,.978969,.979473,.979969,.980457,.980936,.981408,.981871,.982327,.982775,.983215,.983648,.984074,.984493,.984905,.985310,.985708,.986100,.986484,.986862,.987234,.987600,.987959,.988312,.988660,.989001,.989337,.989668,.989992,.990312,.990626,.990935,.991239,.991538,.991833,.992121,.992405,.992683,.992956,.993224,.993487,.993745,.993999,.994248,.994492,.994732,.994968,.995200,.995427,.995650,.995869,.996084,.996295,.996503,.996707,.996906,.997102,.997293,.997480,.997664,.997843,.998019,.998191,.998360,.998525,.998687,.998845,.999000,.999152,.999300,.999446,.999588,.999728,.999865,1.00000,.230042,.343304,.417657,.472568,.515826,.551322,.581282,.607097,.629692,.649716,.667641,.683822,.698529,.711977,.724336,.735746,.746320,.756154,.765328,.773910,.781981,.789588,.796772,.803571,.810015,.816134,.821952,.827491,.832773,.837814,.842631,.847239,.851651,.855879,.859935,.863829,.867570,.871166,.874627,.877958,.881171,.884273,.887268,.890163,.892961,.895667,.898286,.900822,.903278,.905658,.907965,.910201,.912372,.914477,.916522,.918507,.920435,.922309,.924130,.925901,.927625,.929303,.930938,.932530,.934081,.935593,.937067,.938504,.939906,.941273,.942607,.943909,.945180,.946420,.947631,.948814,.949969,.951098,.952201,.953278,.954332,.955361,.956368,.957353,.958316,.959258,.960179,.961081,.961963,.962826,.963671,.964498,.965308,.966101,.966878,.967638,.968383,.969113,.969827,.970528,.971214,.971885,.972543,.973188,.973819,.974438,.975045,.975639,.976221,.976792,.977351,.977900,.978437,.978965,.979481,.979988,.980485,.980973,.981451,.981920,.982380,.982830,.983272,.983704,.984128,.984544,.984951,.985351,.985743,.986127,.986503,.986872,.987234,.987589,.987938,.988279,.988614,.988943,.989265,.989581,.989891,.990194,.990492,.990783,.991068,.991348,.991622,.991890,.992153,.992411,.992664,.992911,.993154,.993392,.993625,.993853,.994077,.994297,.994512,.994723,.994929,.995130,.995327,.995519,.995707,.995890,.996069,.996245,.996416,.996583,.996746,.996906,.997061,.997214,.997363,.997508,.997651,.997790,.997925,.998058,.998187,.998312,.998434,.998552,.998666,.998777,.998885,.998990,.999092,.999191,.999286,.999378,.999467,.999553,.999635,.999714,.999790,.999863,.999933,1.00000,.233535,.348365,.423648,.479173,.522856,.558654,.588829,.614794,.637491,.657579,.675538,.691727,.706423,.719843,.732160,.743516,.754026,.763788,.772883,.781379,.789361,.796878,.803971,.810677,.817028,.823051,.828774,.834217,.839402,.844347,.849067,.853578,.857893,.862025,.865985,.869782,.873428,.876929,.880294,.883531,.886653,.889665,.892574,.895384,.898100,.900726,.903267,.905726,.908107,.910414,.912650,.914817,.916919,.918959,.920938,.922860,.924726,.926539,.928301,.930014,.931680,.933303,.934882,.936420,.937919,.939379,.940802,.942189,.943542,.944861,.946147,.947402,.948627,.949823,.950990,.952129,.953242,.954328,.955390,.956427,.957440,.958430,.959397,.960343,.961268,.962172,.963055,.963920,.964765,.965592,.966401,.967193,.967968,.968726,.969468,.970195,.970906,.971602,.972284,.972952,.973606,.974246,.974872,.975485,.976086,.976674,.977249,.977813,.978366,.978907,.979437,.979956,.980465,.980964,.981452,.981931,.982400,.982860,.983311,.983753,.984186,.984610,.985025,.985431,.985829,.986218,.986599,.986973,.987339,.987697,.988048,.988392,.988729,.989059,.989383,.989700,.990010,.990314,.990613,.990905,.991191,.991470,.991743,.992011,.992272,.992528,.992778,.993022,.993262,.993496,.993724,.993948,.994168,.994382,.994592,.994797,.994998,.995194,.995387,.995575,.995758,.995937,.996111,.996280,.996446,.996607,.996763,.996916,.997065,.997210,.997352,.997490,.997624,.997755,.997883,.998007,.998129,.998247,.998362,.998475,.998583,.998688,.998789,.998886,.998981,.999071,.999159,.999244,.999326,.999405,.999480,.999551,.999620,.999685,.999746,.999804,.999858,.999909,.999956,1.00000,.232807,.347237,.422230,.477522,.521005,.556626,.586641,.612459,.635019,.654979,.672817,.688891,.703477,.716791,.729007,.740266,.750682,.760353,.769360,.777771,.785681,.793135,.800176,.806838,.813152,.819147,.824847,.830274,.835448,.840386,.845104,.849617,.853938,.858079,.862051,.865864,.869527,.873048,.876436,.879697,.882845,.885884,.888821,.891659,.894405,.897062,.899635,.902126,.904541,.906881,.909151,.911354,.913491,.915566,.917581,.919539,.921442,.923292,.925091,.926841,.928545,.930204,.931821,.933396,.934932,.936429,.937889,.939313,.940703,.942058,.943381,.944673,.945934,.947166,.948369,.949544,.950692,.951814,.952911,.953983,.955032,.956057,.957059,.958040,.958999,.959937,.960856,.961754,.962634,.963495,.964338,.965164,.965972,.966764,.967539,.968299,.969043,.969772,.970487,.971187,.971873,.972545,.973203,.973848,.974480,.975099,.975707,.976302,.976885,.977457,.978017,.978567,.979106,.979635,.980153,.980662,.981161,.981650,.982130,.982601,.983062,.983514,.983957,.984391,.984817,.985234,.985643,.986043,.986436,.986821,.987198,.987568,.987931,.988287,.988636,.988978,.989313,.989642,.989965,.990282,.990591,.990894,.991191,.991481,.991764,.992042,.992313,.992579,.992839,.993093,.993342,.993586,.993824,.994058,.994286,.994510,.994729,.994943,.995153,.995358,.995558,.995752,.995942,.996126,.996305,.996479,.996649,.996814,.996974,.997131,.997283,.997431,.997575,.997715,.997852,.997985,.998114,.998240,.998363,.998483,.998597,.998708,.998813,.998915,.999013,.999107,.999197,.999284,.999367,.999447,.999522,.999593,.999660,.999723,.999780,.999833,.999882,.999926,.999965,1.00000,.228871,.341519,.415444,.470021,.513001,.548258,.578006,.603629,.626049,.645912,.663687,.679726,.694300,.707622,.719861,.731156,.741620,.751349,.760422,.768906,.776895,.784434,.791563,.798317,.804728,.810822,.816624,.822155,.827434,.832480,.837307,.841931,.846363,.850616,.854701,.858627,.862403,.866039,.869541,.872916,.876175,.879324,.882367,.885310,.888158,.890915,.893585,.896173,.898681,.901113,.903473,.905764,.907988,.910148,.912247,.914287,.916270,.918199,.920075,.921901,.923680,.925412,.927101,.928746,.930350,.931915,.933441,.934929,.936382,.937800,.939184,.940536,.941856,.943145,.944405,.945635,.946838,.948014,.949164,.950288,.951387,.952463,.953516,.954547,.955555,.956543,.957510,.958457,.959384,.960293,.961183,.962055,.962910,.963747,.964568,.965372,.966161,.966934,.967693,.968436,.969165,.969880,.970581,.971269,.971944,.972606,.973255,.973892,.974517,.975131,.975733,.976324,.976904,.977474,.978033,.978582,.979120,.979650,.980169,.980680,.981181,.981672,.982154,.982626,.983090,.983545,.983992,.984430,.984860,.985282,.985697,.986104,.986503,.986895,.987280,.987657,.988028,.988393,.988750,.989102,.989445,.989782,.990112,.990436,.990752,.991062,.991366,.991664,.991955,.992241,.992521,.992795,.993064,.993327,.993585,.993838,.994086,.994329,.994567,.994801,.995028,.995249,.995464,.995673,.995876,.996074,.996266,.996453,.996636,.996813,.996985,.997153,.997317,.997476,.997630,.997781,.997927,.998070,.998209,.998344,.998473,.998597,.998716,.998830,.998939,.999043,.999143,.999239,.999331,.999419,.999502,.999579,.999651,.999719,.999780,.999835,.999885,.999930,.999968,1.00000,.226596,.338174,.411430,.465537,.508166,.543150,.572682,.598129,.620406,.640150,.657827,.673785,.688292,.701558,.713751,.725009,.735444,.745149,.754204,.762675,.770659,.778200,.785338,.792107,.798537,.804654,.810484,.816047,.821362,.826445,.831314,.835980,.840458,.844759,.848893,.852871,.856700,.860389,.863947,.867379,.870695,.873900,.877001,.880002,.882908,.885723,.888452,.891098,.893665,.896156,.898575,.900924,.903207,.905425,.907583,.909681,.911722,.913709,.915643,.917527,.919363,.921152,.922897,.924598,.926258,.927878,.929459,.931002,.932509,.933980,.935418,.936822,.938195,.939536,.940847,.942129,.943383,.944609,.945808,.946982,.948131,.949255,.950356,.951434,.952490,.953524,.954538,.955530,.956503,.957456,.958391,.959307,.960205,.961085,.961949,.962796,.963626,.964441,.965240,.966024,.966793,.967548,.968289,.969016,.969729,.970429,.971117,.971792,.972454,.973105,.973743,.974371,.974987,.975592,.976186,.976770,.977343,.977907,.978461,.979005,.979539,.980063,.980578,.981083,.981579,.982067,.982545,.983015,.983477,.983930,.984375,.984812,.985242,.985664,.986078,.986486,.986886,.987279,.987666,.988046,.988418,.988783,.989141,.989492,.989836,.990173,.990504,.990828,.991146,.991458,.991764,.992064,.992358,.992647,.992930,.993208,.993480,.993747,.994010,.994267,.994517,.994761,.994998,.995229,.995454,.995673,.995886,.996093,.996295,.996492,.996684,.996870,.997051,.997228,.997400,.997568,.997731,.997890,.998045,.998196,.998340,.998478,.998610,.998736,.998856,.998972,.999082,.999188,.999289,.999385,.999475,.999559,.999637,.999710,.999775,.999834,.999885,.999931,.999969,1.00000,.224747,.335452,.408159,.461880,.504218,.538977,.568327,.593627,.615783,.635426,.653019,.668906,.683354,.696570,.708722,.719945,.730351,.740034,.749070,.757527,.765503,.773042,.780183,.786960,.793402,.799536,.805386,.810971,.816311,.821423,.826322,.831021,.835533,.839871,.844043,.848059,.851929,.855661,.859261,.862737,.866097,.869348,.872494,.875540,.878492,.881353,.884128,.886820,.889433,.891971,.894436,.896832,.899162,.901427,.903631,.905776,.907864,.909897,.911878,.913807,.915689,.917524,.919314,.921061,.922766,.924431,.926056,.927643,.929194,.930709,.932190,.933637,.935052,.936436,.937789,.939113,.940408,.941676,.942916,.944130,.945319,.946484,.947625,.948742,.949837,.950910,.951961,.952992,.954003,.954993,.955965,.956918,.957852,.958769,.959668,.960550,.961416,.962265,.963099,.963918,.964721,.965509,.966284,.967044,.967790,.968523,.969242,.969949,.970643,.971325,.971995,.972653,.973300,.973935,.974560,.975174,.975777,.976370,.976952,.977525,.978088,.978641,.979184,.979717,.980241,.980756,.981262,.981759,.982248,.982728,.983199,.983663,.984119,.984567,.985008,.985441,.985866,.986285,.986696,.987101,.987498,.987888,.988270,.988645,.989012,.989373,.989728,.990075,.990416,.990751,.991080,.991402,.991719,.992029,.992334,.992634,.992928,.993216,.993500,.993778,.994049,.994313,.994570,.994820,.995064,.995301,.995533,.995758,.995978,.996192,.996400,.996604,.996801,.996994,.997182,.997365,.997544,.997718,.997887,.998053,.998210,.998361,.998505,.998643,.998774,.998900,.999020,.999135,.999244,.999349,.999446,.999537,.999621,.999700,.999769,.999830,.999884,.999932,.999970,1.00000,.223171,.333133,.405374,.458767,.500859,.535425,.564623,.589799,.611852,.631410,.648932,.664760,.679158,.692333,.704451,.715646,.726029,.735693,.744715,.753161,.761131,.768668,.775812,.782596,.789048,.795196,.801061,.806665,.812026,.817161,.822084,.826810,.831351,.835718,.839921,.843969,.847873,.851638,.855274,.858786,.862182,.865469,.868652,.871736,.874725,.877623,.880436,.883166,.885817,.888392,.890896,.893330,.895697,.898000,.900242,.902425,.904551,.906622,.908640,.910608,.912527,.914400,.916227,.918011,.919753,.921454,.923116,.924739,.926326,.927877,.929394,.930876,.932327,.933746,.935134,.936493,.937822,.939124,.940399,.941647,.942869,.944067,.945241,.946392,.947519,.948624,.949708,.950771,.951813,.952835,.953838,.954822,.955787,.956734,.957664,.958576,.959472,.960351,.961214,.962062,.962894,.963712,.964514,.965303,.966077,.966838,.967585,.968319,.969041,.969750,.970446,.971131,.971804,.972466,.973117,.973756,.974385,.975003,.975611,.976209,.976797,.977374,.977942,.978499,.979048,.979587,.980116,.980637,.981149,.981653,.982148,.982635,.983113,.983584,.984047,.984502,.984950,.985391,.985825,.986251,.986670,.987080,.987484,.987880,.988269,.988650,.989025,.989393,.989755,.990110,.990458,.990800,.991137,.991467,.991791,.992110,.992423,.992730,.993032,.993329,.993618,.993900,.994174,.994442,.994703,.994957,.995205,.995447,.995683,.995912,.996136,.996354,.996567,.996775,.996977,.997174,.997367,.997554,.997737,.997916,.998086,.998249,.998404,.998552,.998694,.998829,.998959,.999082,.999200,.999313,.999417,.999515,.999605,.999688,.999762,.999826,.999883,.999933,.999971,1.00000,.220688,.329479,.400986,.453862,.495567,.529832,.558789,.583770,.605663,.625089,.642501,.658237,.672558,.685669,.697734,.708885,.719233,.728869,.737869,.746299,.754260,.761795,.768942,.775734,.782200,.788365,.794252,.799881,.805270,.810436,.815394,.820156,.824735,.829142,.833388,.837481,.841430,.845242,.848926,.852488,.855935,.859273,.862508,.865644,.868686,.871639,.874505,.877290,.879996,.882626,.885185,.887674,.890098,.892457,.894755,.896994,.899176,.901304,.903379,.905403,.907379,.909307,.911191,.913031,.914828,.916585,.918303,.919982,.921623,.923229,.924801,.926338,.927843,.929316,.930758,.932170,.933554,.934909,.936236,.937537,.938812,.940062,.941288,.942490,.943668,.944825,.945959,.947072,.948164,.949236,.950288,.951321,.952335,.953331,.954309,.955269,.956212,.957139,.958049,.958943,.959822,.960685,.961534,.962367,.963187,.963993,.964785,.965563,.966329,.967082,.967822,.968550,.969266,.969971,.970664,.971345,.972016,.972676,.973325,.973964,.974593,.975211,.975818,.976416,.977004,.977583,.978152,.978712,.979263,.979805,.980339,.980864,.981381,.981889,.982390,.982882,.983367,.983845,.984315,.984778,.985232,.985679,.986118,.986549,.986973,.987390,.987800,.988202,.988598,.988986,.989369,.989744,.990114,.990477,.990834,.991185,.991530,.991870,.992204,.992532,.992852,.993164,.993469,.993767,.994057,.994340,.994617,.994886,.995150,.995406,.995657,.995902,.996141,.996374,.996601,.996824,.997040,.997252,.997459,.997661,.997853,.998037,.998213,.998381,.998542,.998695,.998841,.998981,.999115,.999243,.999361,.999470,.999571,.999665,.999746,.999817,.999879,.999933,.999972,1.00000,.218795,.326692,.397637,.450116,.491523,.525556,.554327,.579156,.600924,.620246,.637571,.653234,.667494,.680554,.692576,.703693,.714011,.723623,.732604,.741019,.748971,.756501,.763648,.770444,.776917,.783092,.788992,.794636,.800044,.805230,.810210,.814996,.819601,.824036,.828310,.832433,.836413,.840258,.843975,.847571,.851053,.854427,.857698,.860871,.863951,.866941,.869846,.872669,.875414,.878084,.880682,.883212,.885675,.888075,.890413,.892693,.894916,.897085,.899201,.901266,.903283,.905253,.907178,.909059,.910898,.912695,.914454,.916174,.917856,.919503,.921115,.922693,.924238,.925751,.927234,.928686,.930109,.931504,.932871,.934212,.935526,.936815,.938080,.939321,.940539,.941734,.942907,.944058,.945188,.946298,.947388,.948459,.949510,.950543,.951558,.952556,.953536,.954499,.955446,.956376,.957291,.958191,.959075,.959944,.960799,.961640,.962467,.963281,.964081,.964869,.965644,.966406,.967156,.967894,.968621,.969336,.970040,.970733,.971416,.972087,.972748,.973399,.974039,.974669,.975289,.975900,.976501,.977092,.977675,.978248,.978813,.979369,.979916,.980455,.980986,.981509,.982024,.982532,.983032,.983524,.984008,.984484,.984952,.985413,.985866,.986311,.986749,.987180,.987603,.988020,.988430,.988834,.989231,.989621,.990005,.990383,.990755,.991121,.991481,.991836,.992182,.992520,.992850,.993173,.993488,.993795,.994096,.994390,.994676,.994956,.995230,.995497,.995759,.996014,.996263,.996507,.996745,.996978,.997205,.997427,.997639,.997842,.998036,.998222,.998399,.998569,.998731,.998886,.999034,.999175,.999306,.999427,.999538,.999641,.999731,.999808,.999875,.999933,.999973,1.00000,.215613,.322000,.391992,.443794,.484691,.518323,.546770,.571335,.592882,.612020,.629188,.644719,.658866,.671830,.683771,.694818,.705078,.714640,.723580,.731962,.739888,.747402,.754540,.761332,.767808,.773991,.779904,.785566,.790995,.796206,.801215,.806033,.810673,.815145,.819459,.823624,.827649,.831540,.835305,.838951,.842484,.845911,.849236,.852463,.855599,.858646,.861608,.864490,.867294,.870024,.872684,.875274,.877799,.880261,.882663,.885006,.887292,.889525,.891705,.893835,.895916,.897951,.899941,.901887,.903791,.905655,.907479,.909264,.911013,.912725,.914403,.916046,.917657,.919236,.920784,.922302,.923791,.925251,.926684,.928089,.929469,.930824,.932153,.933459,.934742,.936002,.937239,.938455,.939650,.940825,.941979,.943114,.944229,.945326,.946404,.947465,.948508,.949535,.950544,.951538,.952515,.953477,.954424,.955355,.956272,.957175,.958064,.958939,.959801,.960649,.961485,.962308,.963119,.963918,.964705,.965480,.966244,.966997,.967738,.968469,.969189,.969899,.970598,.971286,.971965,.972633,.973292,.973942,.974582,.975212,.975834,.976447,.977051,.977647,.978234,.978813,.979384,.979947,.980502,.981049,.981588,.982119,.982642,.983156,.983663,.984162,.984654,.985138,.985615,.986085,.986547,.987003,.987452,.987895,.988330,.988760,.989183,.989600,.990011,.990415,.990811,.991199,.991578,.991949,.992312,.992668,.993016,.993356,.993689,.994015,.994334,.994647,.994952,.995252,.995545,.995831,.996112,.996387,.996656,.996920,.997172,.997414,.997646,.997868,.998081,.998285,.998480,.998668,.998847,.999019,.999178,.999325,.999460,.999585,.999692,.999785,.999863,.999931,.999974,1.00000,.213685,.319151,.388554,.439936,.480512,.513889,.542129,.566520,.587922,.606935,.623997,.639436,.653503,.666397,.678276,.689270,.699483,.709004,.717908,.726258,.734159,.741652,.748773,.755553,.762020,.768198,.774109,.779772,.785205,.790422,.795439,.800267,.804919,.809405,.813735,.817917,.821960,.825871,.829657,.833325,.836881,.840332,.843682,.846936,.850099,.853173,.856165,.859076,.861910,.864671,.867361,.869984,.872541,.875036,.877470,.879847,.882168,.884435,.886650,.888814,.890931,.893002,.895028,.897010,.898951,.900851,.902713,.904536,.906322,.908072,.909788,.911470,.913119,.914737,.916323,.917880,.919408,.920907,.922379,.923824,.925243,.926637,.928006,.929352,.930674,.931974,.933251,.934507,.935742,.936956,.938151,.939326,.940481,.941618,.942737,.943838,.944922,.945988,.947038,.948071,.949089,.950091,.951078,.952050,.953007,.953950,.954880,.955795,.956697,.957586,.958462,.959325,.960176,.961015,.961842,.962657,.963461,.964254,.965036,.965807,.966567,.967316,.968054,.968783,.969501,.970209,.970908,.971597,.972276,.972946,.973608,.974260,.974903,.975538,.976165,.976783,.977393,.977995,.978589,.979175,.979753,.980322,.980883,.981436,.981982,.982519,.983049,.983571,.984086,.984594,.985094,.985588,.986075,.986555,.987028,.987494,.987955,.988409,.988856,.989298,.989731,.990155,.990570,.990977,.991376,.991768,.992151,.992526,.992895,.993255,.993609,.993956,.994296,.994629,.994956,.995276,.995590,.995898,.996200,.996495,.996780,.997052,.997315,.997566,.997808,.998040,.998263,.998477,.998683,.998881,.999063,.999232,.999389,.999534,.999657,.999763,.999853,.999929,.999974,1.00000,.211460,.315849,.384558,.435436,.475622,.508686,.536667,.560839,.582053,.600903,.617822,.633135,.647090,.659884,.671674,.682586,.692726,.702182,.711026,.719321,.727175,.734627,.741713,.748464,.754907,.761065,.766960,.772611,.778035,.783248,.788262,.793091,.797746,.802237,.806574,.810766,.814821,.818745,.822547,.826231,.829806,.833277,.836648,.839924,.843111,.846210,.849228,.852166,.855028,.857818,.860538,.863191,.865779,.868306,.870774,.873184,.875538,.877840,.880089,.882290,.884443,.886550,.888614,.890635,.892614,.894553,.896454,.898317,.900144,.901935,.903692,.905416,.907108,.908768,.910397,.911997,.913568,.915111,.916626,.918115,.919579,.921017,.922432,.923823,.925191,.926537,.927860,.929163,.930445,.931706,.932948,.934170,.935373,.936558,.937725,.938874,.940005,.941120,.942219,.943301,.944367,.945418,.946454,.947476,.948483,.949475,.950454,.951420,.952372,.953311,.954238,.955152,.956053,.956943,.957821,.958687,.959541,.960385,.961218,.962040,.962851,.963651,.964441,.965221,.965991,.966751,.967501,.968242,.968973,.969695,.970408,.971112,.971808,.972494,.973173,.973843,.974505,.975158,.975804,.976442,.977072,.977694,.978307,.978912,.979509,.980099,.980681,.981255,.981823,.982382,.982935,.983481,.984019,.984551,.985077,.985595,.986107,.986613,.987113,.987606,.988090,.988566,.989033,.989492,.989942,.990384,.990819,.991246,.991665,.992076,.992481,.992878,.993268,.993651,.994028,.994397,.994761,.995118,.995469,.995813,.996145,.996466,.996774,.997072,.997359,.997635,.997902,.998159,.998406,.998645,.998867,.999073,.999265,.999443,.999595,.999724,.999833,.999926,.999975,1.00000,.210044,.313751,.382024,.432587,.472531,.505401,.533223,.557262,.578363,.597116,.613951,.629189,.643079,.655816,.667555,.678422,.688522,.697941,.706753,.715020,.722848,.730279,.737347,.744082,.750511,.756658,.762545,.768189,.773607,.778816,.783828,.788657,.793312,.797806,.802146,.806342,.810402,.814332,.818140,.821833,.825416,.828896,.832277,.835564,.838762,.841874,.844903,.847854,.850730,.853534,.856268,.858936,.861540,.864082,.866566,.868992,.871363,.873681,.875948,.878166,.880337,.882463,.884545,.886585,.888584,.890543,.892464,.894348,.896195,.898008,.899786,.901532,.903245,.904927,.906579,.908202,.909795,.911361,.912900,.914412,.915899,.917362,.918800,.920216,.921608,.922978,.924327,.925655,.926962,.928248,.929515,.930763,.931992,.933203,.934396,.935571,.936729,.937870,.938995,.940103,.941197,.942275,.943338,.944387,.945422,.946442,.947449,.948443,.949424,.950392,.951347,.952290,.953221,.954140,.955047,.955943,.956827,.957701,.958564,.959416,.960257,.961088,.961909,.962720,.963521,.964312,.965094,.965867,.966630,.967384,.968130,.968866,.969594,.970314,.971025,.971728,.972423,.973111,.973790,.974462,.975125,.975781,.976428,.977068,.977700,.978324,.978941,.979551,.980153,.980748,.981337,.981918,.982493,.983061,.983622,.984177,.984726,.985268,.985804,.986334,.986855,.987367,.987871,.988367,.988854,.989333,.989804,.990268,.990724,.991172,.991613,.992047,.992474,.992894,.993307,.993713,.994113,.994506,.994893,.995274,.995642,.995998,.996342,.996674,.996995,.997306,.997606,.997896,.998176,.998448,.998701,.998937,.999158,.999364,.999539,.999688,.999815,.999923,.999975,1.00000,.208991,.312193,.380142,.430473,.470239,.502967,.530672,.554614,.575632,.594314,.611087,.626272,.640116,.652812,.664514,.675349,.685421,.694815,.703605,.711851,.719663,.727078,.734132,.740856,.747275,.753414,.759294,.764932,.770346,.775552,.780562,.785389,.790044,.794537,.798879,.803077,.807139,.811072,.814884,.818580,.822168,.825654,.829041,.832335,.835539,.838658,.841696,.844655,.847540,.850352,.853096,.855774,.858388,.860941,.863435,.865872,.868254,.870584,.872863,.875092,.877275,.879414,.881508,.883561,.885573,.887546,.889481,.891378,.893240,.895067,.896860,.898620,.900348,.902045,.903712,.905349,.906958,.908539,.910094,.911621,.913124,.914603,.916058,.917490,.918899,.920287,.921653,.922998,.924323,.925628,.926913,.928179,.929427,.930656,.931868,.933062,.934239,.935400,.936544,.937672,.938785,.939883,.940966,.942035,.943091,.944132,.945160,.946174,.947176,.948165,.949141,.950106,.951058,.951998,.952927,.953845,.954751,.955646,.956531,.957405,.958269,.959122,.959966,.960799,.961623,.962438,.963243,.964039,.964826,.965604,.966373,.967133,.967885,.968629,.969365,.970092,.970812,.971524,.972228,.972924,.973612,.974293,.974966,.975631,.976289,.976939,.977582,.978217,.978846,.979468,.980082,.980691,.981292,.981887,.982475,.983057,.983633,.984202,.984766,.985323,.985872,.986412,.986943,.987466,.987982,.988489,.988988,.989480,.989964,.990440,.990910,.991372,.991827,.992275,.992716,.993151,.993579,.994001,.994416,.994825,.995221,.995605,.995976,.996337,.996686,.997024,.997351,.997669,.997976,.998274,.998553,.998815,.999061,.999291,.999487,.999655,.999798,.999920,.999975,1.00000,.207973,.310693,.378341,.428458,.468065,.500668,.528274,.552135,.573087,.591714,.608442,.623589,.637400,.650069,.661750,.672567,.682624,.692007,.700788,.709028,.716834,.724246,.731299,.738022,.744441,.750582,.756463,.762105,.767523,.772733,.777749,.782582,.787243,.791744,.796093,.800299,.804370,.808312,.812133,.815839,.819438,.822933,.826331,.829635,.832851,.835981,.839030,.842001,.844897,.847722,.850477,.853167,.855794,.858359,.860865,.863315,.865710,.868053,.870344,.872587,.874783,.876934,.879042,.881108,.883133,.885119,.887067,.888978,.890852,.892692,.894498,.896271,.898013,.899723,.901403,.903053,.904676,.906270,.907837,.909378,.910894,.912386,.913855,.915300,.916723,.918124,.919504,.920863,.922202,.923521,.924820,.926101,.927363,.928607,.929833,.931041,.932233,.933408,.934567,.935710,.936838,.937951,.939050,.940134,.941205,.942262,.943306,.944337,.945355,.946360,.947353,.948334,.949303,.950260,.951206,.952141,.953064,.953977,.954879,.955771,.956652,.957524,.958385,.959237,.960080,.960913,.961736,.962551,.963357,.964154,.964943,.965723,.966495,.967259,.968014,.968762,.969501,.970234,.970958,.971675,.972384,.973085,.973779,.974464,.975143,.975814,.976477,.977134,.977783,.978425,.979061,.979690,.980312,.980927,.981536,.982139,.982735,.983326,.983910,.984488,.985057,.985619,.986172,.986716,.987253,.987782,.988303,.988817,.989323,.989822,.990314,.990799,.991276,.991747,.992211,.992669,.993120,.993565,.994003,.994435,.994854,.995262,.995657,.996041,.996413,.996775,.997126,.997468,.997799,.998120,.998423,.998707,.998974,.999225,.999440,.999624,.999782,.999917,.999975,1.00000,.206833,.309008,.376306,.426174,.465590,.498042,.525523,.549281,.570146,.588699,.605362,.620454,.634217,.646844,.658488,.669273,.679301,.688659,.697418,.705639,.713428,.720824,.727863,.734574,.740983,.747114,.752987,.758622,.764034,.769239,.774250,.779079,.783738,.788237,.792584,.796789,.800860,.804802,.808624,.812331,.815931,.819429,.822830,.826138,.829358,.832493,.835547,.838524,.841427,.844258,.847021,.849718,.852352,.854925,.857440,.859899,.862303,.864655,.866956,.869208,.871415,.873577,.875695,.877773,.879810,.881808,.883768,.885691,.887579,.889432,.891251,.893038,.894793,.896518,.898212,.899878,.901515,.903124,.904707,.906263,.907795,.909303,.910787,.912249,.913689,.915107,.916503,.917880,.919236,.920572,.921889,.923187,.924467,.925729,.926973,.928200,.929410,.930604,.931781,.932943,.934090,.935222,.936340,.937444,.938534,.939611,.940675,.941726,.942764,.943789,.944803,.945804,.946794,.947772,.948739,.949695,.950639,.951573,.952497,.953410,.954313,.955207,.956090,.956964,.957829,.958685,.959532,.960370,.961199,.962020,.962832,.963636,.964431,.965219,.965999,.966771,.967535,.968291,.969041,.969782,.970517,.971244,.971963,.972676,.973381,.974079,.974771,.975456,.976134,.976805,.977470,.978128,.978781,.979427,.980066,.980700,.981328,.981950,.982566,.983176,.983779,.984373,.984959,.985537,.986107,.986670,.987225,.987774,.988314,.988848,.989375,.989894,.990407,.990914,.991413,.991906,.992393,.992874,.993348,.993816,.994272,.994715,.995147,.995567,.995976,.996374,.996762,.997139,.997507,.997864,.998202,.998522,.998824,.999110,.999357,.999570,.999754,.999913,.999975,1.00000,.205902,.307635,.374656,.424327,.463595,.495931,.523319,.547001,.567803,.586303,.602923,.617978,.631710,.644310,.655932,.666698,.676712,.686057,.694806,.703019,.710801,.718193,.725227,.731935,.738342,.744472,.750345,.755980,.761393,.766600,.771613,.776445,.781107,.785610,.789961,.794171,.798246,.802194,.806022,.809735,.813341,.816846,.820253,.823568,.826795,.829937,.832998,.835982,.838892,.841731,.844502,.847207,.849849,.852430,.854953,.857420,.859832,.862192,.864502,.866763,.868978,.871149,.873276,.875363,.877409,.879417,.881387,.883320,.885217,.887081,.888910,.890708,.892473,.894208,.895914,.897590,.899238,.900858,.902452,.904019,.905562,.907081,.908577,.910051,.911502,.912932,.914340,.915728,.917096,.918445,.919774,.921084,.922376,.923650,.924907,.926146,.927369,.928575,.929765,.930939,.932099,.933244,.934375,.935492,.936595,.937686,.938763,.939827,.940879,.941919,.942946,.943962,.944965,.945958,.946939,.947909,.948868,.949817,.950755,.951683,.952601,.953510,.954409,.955299,.956179,.957051,.957914,.958768,.959613,.960450,.961279,.962100,.962912,.963717,.964514,.965303,.966085,.966859,.967626,.968385,.969138,.969883,.970621,.971352,.972077,.972795,.973506,.974210,.974908,.975600,.976285,.976964,.977637,.978304,.978965,.979620,.980269,.980913,.981551,.982183,.982808,.983425,.984034,.984635,.985230,.985816,.986396,.986969,.987534,.988093,.988645,.989190,.989729,.990261,.990786,.991306,.991819,.992326,.992828,.993323,.993806,.994277,.994737,.995185,.995622,.996049,.996465,.996871,.997267,.997654,.998020,.998369,.998699,.999013,.999286,.999523,.999730,.999909,.999976,1.00000]
	# Z=14
	      Z14=[.163504,.245406,.300107,.341207,.374147,.401648,.425263,.445963,.464397,.481019,.496156,.510058,.522913,.534872,.546055,.556557,.566460,.575830,.584722,.593186,.601257,.608972,.616362,.623453,.630270,.636834,.643163,.649274,.655183,.660902,.666444,.671821,.677041,.682115,.687051,.691856,.696538,.701102,.705556,.709904,.714150,.718299,.722355,.726323,.730206,.734008,.737733,.741383,.744963,.748474,.751920,.755302,.758624,.761888,.765095,.768247,.771348,.774397,.777398,.780352,.783259,.786121,.788940,.791716,.794452,.797148,.799806,.802426,.805010,.807559,.810074,.812556,.815005,.817423,.819810,.822168,.824496,.826796,.829069,.831315,.833534,.835728,.837896,.840040,.842159,.844255,.846329,.848380,.850409,.852416,.854403,.856369,.858316,.860242,.862150,.864038,.865909,.867761,.869596,.871413,.873213,.874997,.876764,.878515,.880250,.881970,.883675,.885365,.887040,.888701,.890348,.891982,.893601,.895207,.896800,.898381,.899948,.901503,.903046,.904577,.906096,.907604,.909100,.910585,.912059,.913522,.914975,.916417,.917849,.919271,.920683,.922085,.923477,.924859,.926233,.927597,.928952,.930297,.931634,.932963,.934282,.935593,.936896,.938190,.939476,.940754,.942024,.943286,.944540,.945787,.947026,.948257,.949482,.950699,.951908,.953111,.954306,.955495,.956677,.957852,.959021,.960182,.961337,.962485,.963627,.964763,.965892,.967014,.968131,.969241,.970346,.971444,.972537,.973623,.974704,.975779,.976849,.977913,.978971,.980024,.981072,.982114,.983150,.984182,.985208,.986228,.987244,.988255,.989260,.990261,.991256,.992247,.993232,.994213,.995189,.996161,.997127,.998090,.999047,1.00000,.167140,.250824,.306689,.348646,.382256,.410304,.434377,.455470,.474245,.491166,.506569,.520708,.533777,.545929,.557287,.567949,.577998,.587501,.596517,.605093,.613267,.621076,.628550,.635719,.642605,.649232,.655618,.661781,.667736,.673496,.679075,.684483,.689732,.694830,.699786,.704608,.709303,.713878,.718339,.722691,.726939,.731086,.735137,.739098,.742971,.746760,.750470,.754103,.757663,.761152,.764574,.767930,.771224,.774457,.777633,.780752,.783817,.786830,.789793,.792706,.795572,.798391,.801165,.803896,.806584,.809231,.811838,.814407,.816939,.819434,.821893,.824318,.826710,.829069,.831396,.833693,.835959,.838196,.840405,.842586,.844739,.846866,.848967,.851042,.853092,.855118,.857120,.859100,.861056,.862990,.864903,.866794,.868665,.870516,.872346,.874157,.875949,.877723,.879478,.881215,.882934,.884636,.886322,.887990,.889643,.891279,.892900,.894505,.896095,.897670,.899231,.900778,.902310,.903828,.905333,.906825,.908303,.909769,.911222,.912662,.914091,.915507,.916911,.918304,.919686,.921056,.922415,.923764,.925101,.926428,.927745,.929051,.930347,.931634,.932911,.934177,.935435,.936683,.937922,.939152,.940373,.941585,.942788,.943982,.945169,.946346,.947516,.948677,.949830,.950976,.952113,.953243,.954365,.955480,.956587,.957687,.958779,.959865,.960943,.962014,.963079,.964137,.965188,.966232,.967270,.968301,.969326,.970345,.971357,.972363,.973364,.974358,.975346,.976328,.977305,.978275,.979240,.980200,.981154,.982102,.983045,.983983,.984915,.985842,.986764,.987681,.988592,.989499,.990401,.991297,.992189,.993076,.993958,.994836,.995708,.996576,.997439,.998297,.999151,1.00000,.171557,.257439,.314762,.357807,.392284,.421049,.445735,.467361,.486607,.503949,.519734,.534221,.547610,.560057,.571688,.582606,.592893,.602621,.611848,.620624,.628980,.636953,.644577,.651882,.658891,.665630,.672116,.678369,.684404,.690237,.695879,.701344,.706641,.711780,.716772,.721623,.726341,.730934,.735408,.739768,.744018,.748162,.752206,.756154,.760010,.763779,.767464,.771068,.774595,.778048,.781430,.784743,.787990,.791175,.794298,.797362,.800369,.803322,.806221,.809069,.811867,.814616,.817319,.819975,.822587,.825156,.827684,.830171,.832619,.835029,.837402,.839739,.842041,.844309,.846544,.848747,.850918,.853059,.855169,.857251,.859304,.861330,.863328,.865300,.867247,.869168,.871064,.872937,.874786,.876612,.878416,.880198,.881958,.883697,.885416,.887114,.888793,.890453,.892093,.893715,.895319,.896905,.898473,.900025,.901559,.903077,.904579,.906065,.907535,.908990,.910431,.911856,.913267,.914663,.916046,.917415,.918770,.920112,.921441,.922757,.924061,.925353,.926632,.927900,.929156,.930401,.931634,.932856,.934068,.935268,.936458,.937638,.938807,.939967,.941116,.942255,.943385,.944505,.945616,.946718,.947811,.948894,.949970,.951036,.952094,.953144,.954185,.955218,.956244,.957261,.958270,.959272,.960266,.961253,.962232,.963204,.964169,.965126,.966077,.967020,.967957,.968888,.969811,.970728,.971639,.972543,.973441,.974333,.975219,.976099,.976973,.977840,.978702,.979559,.980409,.981254,.982094,.982927,.983756,.984579,.985397,.986209,.987016,.987819,.988616,.989408,.990195,.990977,.991754,.992527,.993295,.994058,.994816,.995570,.996320,.997064,.997805,.998541,.999273,1.00000,.176573,.264899,.323810,.368012,.403390,.432885,.458178,.480319,.500009,.517738,.533862,.548649,.562305,.574991,.586837,.597948,.608409,.618294,.627663,.636567,.645034,.653104,.660812,.668187,.675256,.682043,.688569,.694852,.700909,.706755,.712404,.717869,.723159,.728286,.733259,.738087,.742777,.747336,.751772,.756091,.760294,.764388,.768379,.772269,.776065,.779770,.783388,.786923,.790378,.793756,.797061,.800294,.803460,.806560,.809597,.812573,.815490,.818351,.821156,.823909,.826610,.829262,.831865,.834421,.836933,.839400,.841825,.844208,.846551,.848856,.851122,.853352,.855546,.857705,.859831,.861923,.863984,.866013,.868012,.869981,.871922,.873834,.875720,.877579,.879411,.881219,.883002,.884760,.886495,.888207,.889897,.891564,.893209,.894834,.896438,.898021,.899585,.901130,.902655,.904162,.905651,.907122,.908576,.910013,.911433,.912837,.914225,.915597,.916954,.918296,.919622,.920935,.922233,.923517,.924787,.926043,.927286,.928516,.929734,.930938,.932131,.933311,.934480,.935637,.936782,.937916,.939040,.940152,.941254,.942345,.943426,.944497,.945557,.946608,.947649,.948680,.949702,.950715,.951719,.952713,.953699,.954676,.955644,.956605,.957557,.958501,.959436,.960364,.961284,.962197,.963102,.963999,.964889,.965772,.966648,.967516,.968378,.969232,.970080,.970921,.971755,.972583,.973405,.974221,.975030,.975833,.976630,.977422,.978207,.978986,.979760,.980528,.981291,.982048,.982799,.983545,.984286,.985021,.985751,.986476,.987196,.987912,.988622,.989327,.990028,.990724,.991415,.992101,.992783,.993461,.994134,.994803,.995467,.996127,.996783,.997435,.998082,.998726,.999365,1.00000,.186721,.279794,.341652,.387902,.424789,.455433,.481619,.504461,.524703,.542864,.559323,.574365,.588206,.601020,.612942,.624085,.634540,.644384,.653681,.662486,.670845,.678798,.686381,.693625,.700557,.707200,.713577,.719707,.725606,.731290,.736774,.742068,.747186,.752138,.756932,.761579,.766085,.770458,.774706,.778834,.782849,.786755,.790558,.794263,.797873,.801394,.804828,.808181,.811454,.814651,.817775,.820829,.823816,.826739,.829598,.832398,.835140,.837825,.840457,.843036,.845565,.848044,.850477,.852864,.855206,.857506,.859763,.861981,.864159,.866299,.868402,.870469,.872501,.874499,.876464,.878397,.880298,.882169,.884011,.885823,.887608,.889364,.891095,.892799,.894477,.896131,.897760,.899366,.900948,.902508,.904046,.905562,.907057,.908531,.909985,.911419,.912834,.914230,.915607,.916966,.918308,.919632,.920940,.922230,.923505,.924763,.926006,.927234,.928446,.929644,.930827,.931996,.933152,.934293,.935421,.936536,.937638,.938727,.939804,.940868,.941920,.942961,.943990,.945008,.946015,.947011,.947997,.948971,.949936,.950890,.951834,.952768,.953693,.954608,.955513,.956410,.957297,.958175,.959044,.959904,.960757,.961601,.962436,.963264,.964085,.964897,.965702,.966499,.967289,.968072,.968847,.969616,.970377,.971132,.971879,.972620,.973355,.974083,.974804,.975519,.976228,.976931,.977629,.978320,.979006,.979687,.980361,.981031,.981695,.982353,.983007,.983655,.984298,.984936,.985569,.986197,.986820,.987438,.988052,.988661,.989265,.989866,.990462,.991054,.991642,.992227,.992807,.993384,.993956,.994525,.995090,.995652,.996211,.996766,.997316,.997862,.998403,.998939,.999471,1.00000,.195376,.292677,.357286,.405552,.444011,.475933,.503186,.526938,.547967,.566819,.583888,.599473,.613803,.627055,.639376,.650880,.661665,.671810,.681384,.690442,.699017,.707154,.714889,.722258,.729290,.736011,.742443,.748609,.754527,.760212,.765682,.770948,.776025,.780922,.785651,.790221,.794640,.798918,.803061,.807075,.810969,.814748,.818417,.821981,.825446,.828815,.832094,.835284,.838392,.841419,.844369,.847245,.850051,.852788,.855460,.858068,.860615,.863104,.865536,.867914,.870240,.872516,.874744,.876926,.879062,.881155,.883206,.885216,.887186,.889118,.891012,.892870,.894692,.896481,.898236,.899959,.901650,.903311,.904942,.906544,.908118,.909666,.911188,.912684,.914155,.915602,.917026,.918426,.919804,.921160,.922494,.923808,.925101,.926374,.927627,.928862,.930077,.931275,.932454,.933616,.934761,.935890,.937002,.938099,.939180,.940246,.941296,.942333,.943355,.944363,.945357,.946337,.947305,.948259,.949201,.950130,.951047,.951952,.952846,.953727,.954598,.955457,.956306,.957144,.957973,.958790,.959598,.960396,.961185,.961964,.962734,.963494,.964246,.964988,.965722,.966448,.967165,.967873,.968574,.969266,.969951,.970628,.971298,.971960,.972614,.973262,.973902,.974535,.975162,.975781,.976394,.977000,.977600,.978194,.978781,.979362,.979936,.980505,.981068,.981625,.982176,.982722,.983262,.983796,.984326,.984849,.985368,.985882,.986390,.986893,.987392,.987885,.988374,.988858,.989337,.989812,.990282,.990747,.991209,.991665,.992118,.992566,.993010,.993450,.993887,.994319,.994747,.995172,.995593,.996010,.996424,.996834,.997241,.997644,.998044,.998441,.998836,.999227,.999615,1.00000,.206449,.308875,.376632,.427056,.467083,.500181,.528332,.552773,.574330,.593582,.610948,.626744,.641212,.654543,.666889,.678374,.689099,.699151,.708599,.717506,.725924,.733899,.741468,.748667,.755525,.762070,.768323,.774308,.780042,.785543,.790826,.795905,.800793,.805500,.810039,.814417,.818645,.822730,.826681,.830503,.834204,.837791,.841269,.844643,.847918,.851098,.854188,.857191,.860112,.862953,.865718,.868410,.871031,.873586,.876075,.878503,.880870,.883179,.885433,.887632,.889781,.891880,.893931,.895937,.897897,.899815,.901690,.903525,.905321,.907078,.908799,.910484,.912135,.913751,.915335,.916888,.918409,.919900,.921362,.922796,.924203,.925584,.926939,.928269,.929575,.930857,.932117,.933354,.934569,.935763,.936935,.938088,.939221,.940334,.941429,.942505,.943563,.944604,.945627,.946633,.947623,.948598,.949557,.950500,.951429,.952344,.953244,.954130,.955003,.955862,.956708,.957542,.958363,.959171,.959968,.960753,.961526,.962288,.963038,.963778,.964508,.965226,.965935,.966634,.967322,.968001,.968671,.969331,.969982,.970625,.971258,.971883,.972499,.973107,.973706,.974298,.974882,.975457,.976026,.976586,.977140,.977686,.978224,.978756,.979281,.979799,.980311,.980815,.981314,.981806,.982291,.982771,.983244,.983712,.984173,.984629,.985079,.985524,.985963,.986396,.986824,.987247,.987664,.988075,.988482,.988883,.989279,.989671,.990057,.990438,.990815,.991187,.991554,.991917,.992275,.992629,.992979,.993324,.993665,.994001,.994334,.994663,.994988,.995309,.995627,.995940,.996250,.996557,.996860,.997159,.997455,.997749,.998040,.998328,.998613,.998895,.999175,.999453,.999727,1.00000,.216087,.322988,.393501,.445826,.487243,.521392,.550353,.575425,.597476,.617112,.634774,.650793,.665423,.678864,.691277,.702790,.713512,.723531,.732922,.741749,.750074,.757943,.765396,.772469,.779193,.785595,.791700,.797529,.803103,.808438,.813550,.818455,.823164,.827691,.832045,.836237,.840275,.844169,.847927,.851554,.855061,.858454,.861739,.864920,.868002,.870990,.873888,.876701,.879431,.882083,.884659,.887163,.889598,.891966,.894270,.896513,.898696,.900823,.902895,.904914,.906883,.908805,.910679,.912510,.914296,.916041,.917746,.919411,.921039,.922630,.924185,.925706,.927193,.928648,.930072,.931465,.932828,.934163,.935469,.936749,.938003,.939231,.940435,.941615,.942773,.943907,.945020,.946111,.947181,.948231,.949261,.950272,.951265,.952238,.953194,.954132,.955054,.955958,.956847,.957719,.958576,.959418,.960245,.961057,.961856,.962640,.963411,.964168,.964913,.965645,.966365,.967072,.967768,.968452,.969124,.969786,.970437,.971077,.971706,.972325,.972934,.973533,.974122,.974701,.975271,.975831,.976383,.976925,.977459,.977984,.978500,.979008,.979509,.980001,.980485,.980962,.981432,.981894,.982348,.982796,.983237,.983670,.984097,.984517,.984930,.985337,.985738,.986132,.986520,.986902,.987279,.987649,.988014,.988373,.988726,.989075,.989418,.989755,.990088,.990416,.990738,.991055,.991367,.991674,.991976,.992273,.992565,.992853,.993136,.993415,.993689,.993959,.994225,.994486,.994744,.994997,.995246,.995492,.995733,.995971,.996205,.996435,.996661,.996884,.997102,.997318,.997529,.997737,.997942,.998143,.998342,.998537,.998729,.998918,.999104,.999288,.999470,.999649,.999825,1.00000,.227284,.339295,.412898,.467307,.510210,.545449,.575220,.600897,.623392,.643348,.661229,.677384,.692083,.705536,.717912,.729348,.739957,.749832,.759054,.767689,.775814,.783476,.790718,.797574,.804077,.810256,.816134,.821734,.827076,.832178,.837056,.841725,.846199,.850488,.854605,.858560,.862362,.866019,.869540,.872931,.876205,.879366,.882421,.885374,.888230,.890995,.893671,.896264,.898777,.901213,.903575,.905868,.908093,.910253,.912351,.914390,.916372,.918298,.920172,.921994,.923769,.925498,.927182,.928823,.930423,.931983,.933504,.934988,.936436,.937849,.939228,.940575,.941889,.943173,.944427,.945653,.946850,.948020,.949164,.950282,.951375,.952445,.953490,.954514,.955515,.956494,.957453,.958391,.959309,.960209,.961089,.961951,.962796,.963623,.964433,.965227,.966005,.966767,.967514,.968246,.968964,.969667,.970356,.971032,.971694,.972343,.972980,.973604,.974216,.974816,.975405,.975982,.976548,.977104,.977649,.978184,.978709,.979224,.979730,.980226,.980712,.981189,.981657,.982116,.982566,.983008,.983441,.983866,.984282,.984691,.985093,.985487,.985873,.986252,.986624,.986990,.987348,.987700,.988046,.988385,.988717,.989044,.989363,.989677,.989985,.990286,.990582,.990872,.991157,.991436,.991710,.991979,.992243,.992502,.992755,.993005,.993249,.993489,.993724,.993955,.994181,.994402,.994619,.994831,.995038,.995241,.995440,.995634,.995824,.996011,.996193,.996372,.996546,.996717,.996885,.997049,.997210,.997367,.997521,.997672,.997819,.997962,.998102,.998238,.998371,.998500,.998626,.998750,.998870,.998987,.999101,.999212,.999320,.999425,.999528,.999627,.999724,.999819,.999911,1.00000,.230882,.344505,.419061,.474098,.517435,.552980,.582967,.608793,.631389,.651404,.669313,.685472,.700152,.713570,.725896,.737269,.747805,.757599,.766731,.775271,.783301,.790870,.798020,.804785,.811198,.817288,.823078,.828591,.833847,.838865,.843659,.848246,.852637,.856846,.860884,.864760,.868483,.872064,.875509,.878825,.882025,.885114,.888098,.890982,.893770,.896468,.899079,.901608,.904057,.906431,.908733,.910965,.913131,.915234,.917275,.919258,.921184,.923056,.924876,.926646,.928369,.930046,.931680,.933270,.934820,.936331,.937803,.939239,.940639,.942004,.943336,.944636,.945904,.947143,.948351,.949532,.950685,.951811,.952912,.953987,.955037,.956064,.957068,.958050,.959009,.959948,.960865,.961763,.962642,.963501,.964342,.965165,.965970,.966759,.967531,.968287,.969027,.969752,.970462,.971157,.971838,.972505,.973158,.973798,.974424,.975038,.975640,.976229,.976806,.977372,.977926,.978470,.979002,.979525,.980037,.980538,.981031,.981513,.981986,.982450,.982905,.983350,.983787,.984214,.984633,.985044,.985446,.985841,.986227,.986606,.986977,.987341,.987698,.988048,.988391,.988728,.989058,.989381,.989698,.990009,.990314,.990612,.990904,.991189,.991469,.991742,.992010,.992272,.992529,.992780,.993026,.993267,.993503,.993734,.993960,.994182,.994399,.994611,.994819,.995023,.995222,.995416,.995606,.995790,.995971,.996146,.996318,.996486,.996649,.996809,.996964,.997116,.997265,.997409,.997551,.997689,.997823,.997955,.998083,.998208,.998330,.998447,.998561,.998671,.998778,.998882,.998982,.999079,.999174,.999265,.999353,.999437,.999519,.999597,.999672,.999744,.999812,.999878,.999941,1.00000,.229285,.342156,.416242,.470947,.514036,.549388,.579222,.604923,.627416,.647347,.665186,.681285,.695917,.709294,.721586,.732932,.743445,.753221,.762339,.770868,.778893,.786462,.793614,.800386,.806809,.812911,.818717,.824248,.829524,.834563,.839381,.843993,.848411,.852648,.856714,.860620,.864374,.867986,.871463,.874813,.878047,.881170,.884189,.887109,.889934,.892669,.895317,.897883,.900371,.902783,.905123,.907394,.909599,.911741,.913821,.915843,.917809,.919721,.921581,.923390,.925153,.926870,.928543,.930174,.931763,.933314,.934826,.936301,.937741,.939146,.940518,.941857,.943165,.944443,.945691,.946911,.948103,.949268,.950407,.951521,.952610,.953675,.954717,.955737,.956734,.957711,.958666,.959602,.960517,.961414,.962292,.963152,.963994,.964820,.965628,.966420,.967196,.967957,.968703,.969434,.970150,.970852,.971539,.972213,.972874,.973522,.974157,.974779,.975390,.975988,.976575,.977151,.977716,.978270,.978813,.979346,.979869,.980383,.980886,.981381,.981865,.982340,.982806,.983262,.983709,.984148,.984578,.984999,.985413,.985818,.986216,.986606,.986989,.987364,.987732,.988093,.988447,.988795,.989136,.989470,.989798,.990118,.990432,.990740,.991040,.991335,.991623,.991906,.992182,.992453,.992718,.992978,.993232,.993481,.993725,.993964,.994199,.994428,.994653,.994873,.995087,.995296,.995499,.995698,.995891,.996079,.996262,.996441,.996614,.996784,.996949,.997110,.997267,.997420,.997568,.997714,.997855,.997993,.998127,.998258,.998384,.998506,.998623,.998736,.998845,.998949,.999051,.999148,.999242,.999332,.999418,.999500,.999577,.999651,.999719,.999784,.999844,.999900,.999952,1.00000,.226947,.338717,.412112,.466333,.509058,.544128,.573737,.599256,.621599,.641406,.659142,.675156,.689717,.703034,.715277,.726583,.737064,.746814,.755912,.764426,.772444,.780014,.787174,.793960,.800402,.806529,.812363,.817926,.823238,.828316,.833176,.837832,.842297,.846583,.850700,.854659,.858468,.862136,.865670,.869078,.872370,.875552,.878630,.881609,.884493,.887287,.889995,.892621,.895168,.897640,.900039,.902370,.904634,.906834,.908974,.911055,.913079,.915049,.916967,.918835,.920654,.922428,.924158,.925845,.927491,.929097,.930664,.932194,.933688,.935147,.936572,.937964,.939325,.940655,.941955,.943226,.944469,.945685,.946874,.948037,.949176,.950290,.951381,.952449,.953494,.954518,.955520,.956502,.957464,.958407,.959331,.960236,.961123,.961992,.962845,.963681,.964500,.965304,.966092,.966865,.967623,.968366,.969096,.969811,.970512,.971200,.971876,.972538,.973188,.973826,.974453,.975067,.975671,.976263,.976844,.977415,.977976,.978527,.979067,.979598,.980119,.980630,.981132,.981624,.982107,.982581,.983046,.983503,.983951,.984391,.984823,.985248,.985664,.986073,.986474,.986869,.987256,.987636,.988010,.988377,.988736,.989089,.989434,.989772,.990104,.990428,.990747,.991059,.991365,.991665,.991959,.992247,.992530,.992807,.993078,.993345,.993606,.993862,.994113,.994359,.994599,.994832,.995060,.995281,.995497,.995707,.995912,.996112,.996306,.996495,.996680,.996859,.997034,.997205,.997371,.997533,.997691,.997845,.997995,.998141,.998281,.998415,.998545,.998669,.998788,.998903,.999013,.999119,.999221,.999318,.999410,.999497,.999578,.999655,.999726,.999791,.999851,.999907,.999956,1.00000,.223926,.334320,.406886,.460547,.502875,.537654,.567047,.592406,.614631,.634353,.652032,.668010,.682552,.695867,.708119,.719445,.729956,.739743,.748886,.757449,.765522,.773149,.780370,.787220,.793729,.799923,.805828,.811463,.816848,.822001,.826937,.831670,.836213,.840577,.844773,.848811,.852700,.856447,.860062,.863550,.866921,.870181,.873334,.876387,.879344,.882209,.884986,.887680,.890294,.892831,.895296,.897690,.900016,.902278,.904478,.906618,.908700,.910727,.912701,.914624,.916498,.918326,.920108,.921847,.923544,.925200,.926816,.928395,.929937,.931443,.932914,.934352,.935758,.937132,.938476,.939790,.941076,.942333,.943564,.944768,.945947,.947102,.948233,.949340,.950426,.951489,.952531,.953553,.954554,.955536,.956498,.957442,.958367,.959275,.960166,.961039,.961897,.962738,.963563,.964373,.965168,.965949,.966715,.967467,.968205,.968930,.969642,.970341,.971028,.971703,.972365,.973016,.973656,.974284,.974901,.975508,.976105,.976691,.977267,.977833,.978389,.978935,.979472,.979998,.980516,.981024,.981523,.982014,.982495,.982969,.983434,.983891,.984340,.984782,.985215,.985642,.986061,.986473,.986878,.987276,.987666,.988049,.988425,.988793,.989154,.989508,.989856,.990197,.990531,.990859,.991181,.991497,.991807,.992111,.992409,.992702,.992989,.993271,.993548,.993819,.994084,.994341,.994592,.994837,.995075,.995307,.995533,.995753,.995968,.996177,.996381,.996579,.996773,.996961,.997145,.997324,.997498,.997668,.997834,.997996,.998150,.998299,.998441,.998578,.998709,.998834,.998954,.999070,.999180,.999286,.999386,.999479,.999567,.999649,.999724,.999792,.999853,.999909,.999958,1.00000,.222289,.331908,.403984,.457300,.499367,.533941,.563170,.588394,.610508,.630137,.647736,.663648,.678134,.691401,.703613,.714905,.725387,.735151,.744274,.752821,.760884,.768506,.775726,.782579,.789095,.795300,.801218,.806869,.812273,.817447,.822405,.827163,.831732,.836123,.840349,.844417,.848338,.852118,.855767,.859290,.862696,.865991,.869181,.872270,.875263,.878166,.880981,.883712,.886364,.888940,.891443,.893875,.896240,.898540,.900779,.902958,.905079,.907145,.909158,.911119,.913032,.914899,.916719,.918497,.920232,.921926,.923581,.925197,.926777,.928320,.929829,.931305,.932748,.934159,.935540,.936891,.938213,.939506,.940773,.942013,.943228,.944419,.945585,.946728,.947848,.948947,.950024,.951080,.952115,.953131,.954127,.955104,.956063,.957005,.957928,.958835,.959724,.960598,.961455,.962298,.963125,.963937,.964734,.965517,.966287,.967043,.967785,.968515,.969232,.969937,.970629,.971310,.971979,.972637,.973283,.973919,.974544,.975159,.975763,.976358,.976942,.977516,.978080,.978634,.979179,.979714,.980241,.980758,.981266,.981767,.982258,.982741,.983217,.983684,.984144,.984596,.985040,.985478,.985908,.986331,.986746,.987153,.987553,.987946,.988331,.988709,.989080,.989445,.989802,.990154,.990498,.990837,.991169,.991496,.991816,.992131,.992440,.992744,.993042,.993335,.993620,.993898,.994169,.994433,.994691,.994942,.995186,.995425,.995657,.995884,.996104,.996320,.996529,.996734,.996934,.997128,.997318,.997503,.997683,.997859,.998027,.998188,.998343,.998490,.998632,.998767,.998897,.999021,.999140,.999254,.999361,.999461,.999554,.999641,.999720,.999790,.999854,.999911,.999959,1.00000,.220839,.329775,.401424,.454438,.496280,.530679,.559768,.584879,.606900,.626453,.643989,.659848,.674291,.687521,.699704,.710972,.721435,.731183,.740294,.748834,.756892,.764514,.771737,.778597,.785121,.791337,.797268,.802935,.808357,.813549,.818529,.823308,.827900,.832316,.836567,.840662,.844610,.848419,.852096,.855648,.859084,.862409,.865629,.868749,.871774,.874707,.877553,.880316,.883000,.885607,.888141,.890605,.893002,.895334,.897604,.899815,.901968,.904066,.906110,.908104,.910048,.911946,.913799,.915607,.917374,.919099,.920786,.922433,.924044,.925619,.927159,.928666,.930139,.931581,.932992,.934374,.935726,.937050,.938347,.939618,.940862,.942082,.943278,.944451,.945601,.946728,.947834,.948919,.949983,.951027,.952052,.953058,.954045,.955014,.955966,.956900,.957817,.958718,.959603,.960472,.961326,.962165,.962989,.963799,.964595,.965377,.966146,.966901,.967644,.968375,.969093,.969799,.970494,.971176,.971848,.972509,.973159,.973798,.974427,.975046,.975654,.976252,.976841,.977419,.977987,.978546,.979096,.979637,.980169,.980692,.981207,.981713,.982211,.982701,.983183,.983657,.984124,.984584,.985036,.985480,.985917,.986346,.986767,.987181,.987587,.987986,.988378,.988763,.989141,.989513,.989878,.990236,.990589,.990935,.991275,.991609,.991937,.992260,.992577,.992888,.993192,.993488,.993777,.994059,.994333,.994601,.994862,.995117,.995365,.995607,.995844,.996074,.996299,.996518,.996732,.996941,.997144,.997343,.997537,.997726,.997906,.998079,.998245,.998403,.998555,.998700,.998839,.998972,.999099,.999221,.999335,.999441,.999540,.999632,.999714,.999788,.999853,.999912,.999960,1.00000,.218512,.326350,.397310,.449839,.491317,.525434,.554297,.579225,.601096,.620524,.637957,.653729,.668100,.681271,.693404,.704632,.715061,.724784,.733876,.742400,.750450,.758069,.765294,.772160,.778695,.784925,.790874,.796561,.802006,.807224,.812232,.817041,.821665,.826115,.830401,.834533,.838519,.842367,.846084,.849678,.853156,.856525,.859789,.862954,.866024,.869003,.871896,.874706,.877437,.880092,.882675,.885188,.887634,.890015,.892335,.894595,.896798,.898946,.901041,.903084,.905079,.907027,.908930,.910789,.912606,.914382,.916118,.917816,.919477,.921101,.922691,.924247,.925770,.927262,.928722,.930153,.931554,.932927,.934272,.935591,.936884,.938152,.939396,.940616,.941814,.942989,.944142,.945273,.946384,.947475,.948546,.949598,.950631,.951646,.952643,.953623,.954585,.955531,.956461,.957374,.958272,.959155,.960023,.960877,.961716,.962542,.963354,.964152,.964938,.965711,.966471,.967219,.967955,.968680,.969393,.970095,.970786,.971466,.972135,.972795,.973443,.974081,.974709,.975327,.975935,.976533,.977122,.977702,.978272,.978834,.979387,.979931,.980467,.980995,.981514,.982026,.982530,.983026,.983515,.983996,.984469,.984934,.985391,.985840,.986282,.986716,.987143,.987563,.987976,.988381,.988780,.989173,.989559,.989938,.990311,.990678,.991039,.991395,.991744,.992087,.992423,.992750,.993070,.993381,.993686,.993983,.994273,.994556,.994832,.995102,.995365,.995623,.995874,.996119,.996358,.996592,.996820,.997043,.997261,.997474,.997677,.997872,.998058,.998236,.998406,.998569,.998725,.998875,.999018,.999154,.999281,.999399,.999509,.999611,.999701,.999781,.999851,.999913,.999962,1.00000,.216752,.323755,.394187,.446342,.487537,.521432,.550116,.574898,.596646,.615972,.633319,.649018,.663327,.676445,.688533,.699723,.710120,.719816,.728885,.737392,.745429,.753039,.760260,.767126,.773664,.779901,.785858,.791557,.797016,.802251,.807276,.812106,.816751,.821225,.825535,.829693,.833706,.837582,.841329,.844953,.848462,.851862,.855159,.858356,.861460,.864473,.867400,.870245,.873012,.875703,.878321,.880870,.883352,.885770,.888127,.890424,.892665,.894850,.896982,.899064,.901096,.903082,.905023,.906920,.908774,.910588,.912362,.914097,.915796,.917458,.919086,.920680,.922240,.923769,.925267,.926735,.928174,.929584,.930966,.932322,.933652,.934957,.936238,.937494,.938728,.939940,.941129,.942297,.943444,.944571,.945678,.946766,.947835,.948885,.949917,.950932,.951930,.952910,.953875,.954823,.955756,.956673,.957576,.958464,.959337,.960197,.961042,.961875,.962694,.963501,.964294,.965076,.965845,.966603,.967349,.968083,.968807,.969519,.970221,.970913,.971593,.972263,.972923,.973573,.974212,.974842,.975462,.976073,.976675,.977268,.977851,.978427,.978993,.979551,.980101,.980643,.981177,.981703,.982222,.982733,.983235,.983730,.984216,.984695,.985165,.985628,.986084,.986532,.986973,.987407,.987834,.988254,.988668,.989075,.989475,.989870,.990258,.990640,.991016,.991386,.991748,.992101,.992446,.992783,.993112,.993434,.993749,.994056,.994356,.994649,.994936,.995216,.995490,.995757,.996019,.996274,.996524,.996768,.997007,.997240,.997463,.997677,.997882,.998077,.998265,.998444,.998616,.998780,.998938,.999088,.999228,.999358,.999478,.999589,.999687,.999772,.999847,.999913,.999963,1.00000,.213562,.319054,.388534,.440015,.480702,.514199,.542564,.567084,.588617,.607763,.624957,.640529,.654730,.667757,.679768,.690894,.701238,.710890,.719923,.728401,.736418,.744017,.751233,.758099,.764643,.770891,.776865,.782585,.788068,.793330,.798387,.803250,.807933,.812446,.816798,.820999,.825058,.828982,.832778,.836453,.840014,.843467,.846818,.850071,.853230,.856300,.859285,.862188,.865012,.867762,.870440,.873049,.875592,.878071,.880489,.882848,.885150,.887397,.889592,.891735,.893831,.895879,.897883,.899843,.901761,.903638,.905475,.907275,.909037,.910763,.912454,.914111,.915736,.917328,.918890,.920421,.921924,.923397,.924843,.926262,.927655,.929023,.930367,.931687,.932984,.934258,.935510,.936741,.937951,.939140,.940310,.941459,.942590,.943702,.944797,.945873,.946932,.947974,.948999,.950009,.951002,.951980,.952943,.953892,.954826,.955745,.956651,.957544,.958423,.959289,.960142,.960983,.961811,.962628,.963433,.964226,.965008,.965779,.966539,.967288,.968027,.968755,.969472,.970179,.970876,.971563,.972240,.972908,.973566,.974216,.974856,.975487,.976110,.976724,.977330,.977927,.978516,.979098,.979671,.980237,.980794,.981343,.981884,.982417,.982941,.983458,.983967,.984469,.984963,.985450,.985930,.986403,.986869,.987328,.987781,.988227,.988666,.989100,.989527,.989948,.990360,.990763,.991158,.991544,.991922,.992292,.992654,.993009,.993356,.993696,.994029,.994355,.994674,.994986,.995292,.995591,.995885,.996172,.996453,.996728,.996992,.997246,.997489,.997721,.997945,.998159,.998365,.998562,.998751,.998932,.999101,.999256,.999401,.999534,.999650,.999750,.999837,.999912,.999964,1.00000,.211512,.316030,.384892,.435934,.476289,.509524,.537677,.562023,.583411,.602434,.619525,.635008,.649133,.662096,.674052,.685130,.695434,.705052,.714057,.722511,.730510,.738094,.745301,.752161,.758704,.764954,.770932,.776658,.782151,.787425,.792495,.797375,.802075,.806607,.810980,.815204,.819286,.823235,.827056,.830758,.834347,.837829,.841209,.844492,.847682,.850784,.853801,.856737,.859595,.862379,.865091,.867735,.870313,.872827,.875281,.877676,.880014,.882298,.884530,.886711,.888843,.890930,.892971,.894969,.896925,.898841,.900717,.902555,.904356,.906121,.907852,.909549,.911212,.912844,.914445,.916016,.917558,.919071,.920557,.922016,.923449,.924857,.926240,.927600,.928937,.930251,.931543,.932814,.934064,.935293,.936502,.937692,.938863,.940015,.941149,.942265,.943364,.944446,.945511,.946560,.947593,.948611,.949614,.950602,.951575,.952535,.953480,.954412,.955331,.956236,.957129,.958009,.958877,.959733,.960577,.961410,.962231,.963041,.963840,.964628,.965405,.966172,.966928,.967674,.968410,.969136,.969852,.970559,.971256,.971944,.972623,.973293,.973954,.974607,.975251,.975887,.976514,.977134,.977746,.978350,.978945,.979532,.980111,.980681,.981244,.981799,.982346,.982886,.983418,.983942,.984460,.984970,.985474,.985971,.986460,.986944,.987421,.987891,.988355,.988813,.989262,.989702,.990133,.990556,.990970,.991376,.991774,.992165,.992547,.992923,.993290,.993651,.994005,.994352,.994692,.995025,.995352,.995673,.995987,.996296,.996592,.996877,.997151,.997414,.997667,.997910,.998144,.998368,.998584,.998792,.998985,.999163,.999329,.999482,.999615,.999728,.999826,.999910,.999965,1.00000,.208947,.312240,.380323,.430807,.470738,.503638,.531519,.555638,.576836,.595698,.612651,.628016,.642038,.654912,.666791,.677802,.688049,.697616,.706578,.714995,.722963,.730522,.737710,.744556,.751088,.757332,.763308,.769035,.774532,.779813,.784893,.789785,.794499,.799048,.803439,.807683,.811787,.815759,.819606,.823334,.826951,.830462,.833872,.837187,.840410,.843545,.846596,.849567,.852462,.855283,.858033,.860715,.863332,.865887,.868381,.870816,.873196,.875522,.877796,.880019,.882195,.884325,.886410,.888453,.890453,.892414,.894336,.896219,.898066,.899877,.901654,.903398,.905108,.906787,.908435,.910054,.911643,.913204,.914737,.916243,.917724,.919180,.920612,.922021,.923406,.924769,.926110,.927430,.928729,.930007,.931266,.932505,.933725,.934926,.936110,.937276,.938424,.939555,.940670,.941769,.942851,.943919,.944972,.946010,.947033,.948043,.949038,.950020,.950989,.951945,.952888,.953819,.954737,.955643,.956538,.957421,.958292,.959153,.960002,.960841,.961669,.962486,.963293,.964090,.964876,.965653,.966420,.967178,.967926,.968665,.969395,.970116,.970829,.971533,.972228,.972915,.973594,.974265,.974928,.975583,.976229,.976868,.977498,.978120,.978734,.979341,.979940,.980531,.981115,.981692,.982261,.982824,.983379,.983928,.984470,.985005,.985534,.986056,.986572,.987082,.987583,.988075,.988558,.989033,.989499,.989957,.990407,.990849,.991283,.991710,.992130,.992542,.992947,.993345,.993736,.994120,.994498,.994869,.995234,.995592,.995938,.996272,.996594,.996904,.997203,.997492,.997771,.998040,.998299,.998549,.998782,.998999,.999201,.999389,.999550,.999688,.999806,.999907,.999966,1.00000,.207275,.309770,.377347,.427470,.467127,.499810,.527515,.551489,.572565,.591324,.608190,.623479,.637437,.650255,.662087,.673056,.683267,.692804,.701739,.710135,.718084,.725630,.732806,.739645,.746172,.752413,.758389,.764118,.769619,.774906,.779993,.784894,.789619,.794179,.798583,.802841,.806961,.810949,.814813,.818558,.822194,.825724,.829155,.832490,.835734,.838891,.841964,.844958,.847876,.850720,.853494,.856201,.858843,.861422,.863941,.866403,.868808,.871160,.873460,.875710,.877912,.880069,.882181,.884250,.886278,.888266,.890214,.892125,.893998,.895837,.897641,.899411,.901148,.902854,.904530,.906175,.907791,.909379,.910939,.912472,.913980,.915463,.916922,.918358,.919770,.921160,.922529,.923876,.925202,.926507,.927793,.929060,.930307,.931536,.932747,.933940,.935115,.936274,.937416,.938542,.939652,.940747,.941827,.942893,.943945,.944982,.946006,.947017,.948014,.948999,.949971,.950930,.951878,.952813,.953737,.954649,.955550,.956440,.957319,.958187,.959045,.959892,.960729,.961557,.962375,.963183,.963982,.964771,.965551,.966323,.967086,.967840,.968585,.969322,.970051,.970772,.971484,.972189,.972886,.973576,.974257,.974930,.975595,.976253,.976902,.977544,.978178,.978805,.979425,.980037,.980642,.981241,.981832,.982417,.982995,.983567,.984132,.984691,.985244,.985790,.986327,.986856,.987376,.987887,.988390,.988885,.989372,.989851,.990323,.990786,.991243,.991692,.992133,.992568,.992996,.993417,.993831,.994239,.994640,.995035,.995417,.995787,.996144,.996490,.996825,.997149,.997462,.997766,.998059,.998343,.998609,.998857,.999089,.999306,.999492,.999651,.999787,.999903,.999966,1.00000,.206042,.307951,.375157,.425018,.464476,.497003,.524583,.548455,.569445,.588132,.604937,.620176,.634090,.646872,.658672,.669616,.679804,.689323,.698244,.706627,.714567,.722105,.729276,.736111,.742636,.748877,.754854,.760585,.766089,.771381,.776474,.781380,.786113,.790681,.795094,.799361,.803491,.807489,.811364,.815122,.818770,.822312,.825755,.829103,.832360,.835530,.838618,.841625,.844557,.847415,.850203,.852924,.855581,.858174,.860708,.863185,.865605,.867972,.870287,.872552,.874770,.876942,.879070,.881156,.883200,.885204,.887169,.889096,.890987,.892843,.894664,.896452,.898207,.899931,.901624,.903287,.904921,.906527,.908106,.909657,.911184,.912686,.914163,.915618,.917049,.918459,.919846,.921212,.922558,.923883,.925188,.926475,.927742,.928991,.930221,.931434,.932630,.933809,.934971,.936117,.937247,.938363,.939464,.940550,.941623,.942681,.943726,.944758,.945777,.946783,.947776,.948757,.949726,.950683,.951628,.952562,.953484,.954396,.955297,.956187,.957067,.957937,.958796,.959646,.960487,.961317,.962139,.962952,.963755,.964550,.965335,.966113,.966882,.967642,.968395,.969139,.969876,.970604,.971325,.972039,.972744,.973442,.974131,.974813,.975487,.976154,.976814,.977466,.978111,.978749,.979380,.980004,.980622,.981233,.981837,.982435,.983027,.983612,.984191,.984765,.985329,.985885,.986432,.986971,.987502,.988024,.988539,.989046,.989546,.990038,.990522,.991000,.991470,.991933,.992390,.992839,.993282,.993719,.994149,.994573,.994984,.995382,.995768,.996143,.996506,.996858,.997200,.997531,.997853,.998164,.998457,.998731,.998989,.999230,.999438,.999616,.999768,.999899,.999966,1.00000,.205137,.306616,.373550,.423217,.462529,.494941,.522427,.546222,.567149,.585782,.602542,.617742,.631624,.644377,.656153,.667077,.677248,.686752,.695661,.704034,.711966,.719497,.726663,.733493,.740015,.746254,.752229,.757960,.763464,.768757,.773851,.778760,.783495,.788067,.792484,.796756,.800890,.804894,.808774,.812538,.816191,.819741,.823191,.826546,.829811,.832989,.836085,.839101,.842041,.844909,.847706,.850437,.853103,.855707,.858251,.860737,.863169,.865546,.867872,.870148,.872377,.874560,.876700,.878797,.880852,.882868,.884845,.886785,.888688,.890556,.892389,.894189,.895957,.897693,.899399,.901075,.902722,.904341,.905932,.907497,.909036,.910551,.912042,.913510,.914955,.916378,.917779,.919159,.920518,.921857,.923177,.924477,.925758,.927021,.928266,.929493,.930703,.931896,.933073,.934233,.935379,.936509,.937625,.938726,.939813,.940887,.941947,.942994,.944028,.945049,.946058,.947055,.948039,.949012,.949973,.950923,.951861,.952789,.953706,.954612,.955508,.956394,.957270,.958137,.958994,.959841,.960680,.961509,.962330,.963141,.963945,.964739,.965525,.966304,.967074,.967836,.968590,.969336,.970075,.970807,.971530,.972246,.972954,.973655,.974348,.975034,.975712,.976384,.977048,.977706,.978356,.979001,.979638,.980269,.980894,.981512,.982124,.982730,.983330,.983923,.984509,.985086,.985654,.986215,.986767,.987312,.987849,.988378,.988900,.989414,.989922,.990422,.990915,.991401,.991881,.992354,.992820,.993280,.993733,.994181,.994615,.995037,.995447,.995845,.996232,.996608,.996973,.997328,.997673,.998008,.998323,.998620,.998899,.999162,.999389,.999584,.999752,.999897,.999966,1.00000,.203836,.304694,.371235,.420621,.459719,.491963,.519313,.542995,.563827,.582381,.599073,.614215,.628047,.640758,.652497,.663389,.673533,.683015,.691904,.700260,.708178,.715698,.722854,.729677,.736194,.742428,.748401,.754131,.759635,.764929,.770026,.774938,.779678,.784254,.788677,.792955,.797097,.801109,.804998,.808771,.812434,.815994,.819455,.822821,.826097,.829287,.832395,.835424,.838377,.841258,.844070,.846814,.849494,.852112,.854671,.857172,.859618,.862011,.864352,.866643,.868888,.871087,.873243,.875356,.877428,.879460,.881454,.883410,.885330,.887214,.889065,.890882,.892667,.894421,.896144,.897837,.899501,.901138,.902747,.904329,.905887,.907420,.908929,.910415,.911878,.913320,.914740,.916139,.917517,.918875,.920214,.921533,.922834,.924116,.925381,.926628,.927857,.929070,.930267,.931447,.932613,.933763,.934899,.936021,.937129,.938224,.939305,.940373,.941428,.942471,.943501,.944519,.945526,.946520,.947503,.948475,.949436,.950386,.951325,.952253,.953172,.954081,.954980,.955870,.956750,.957621,.958483,.959336,.960181,.961017,.961844,.962663,.963474,.964277,.965072,.965859,.966638,.967410,.968174,.968931,.969680,.970422,.971157,.971884,.972604,.973317,.974023,.974722,.975414,.976100,.976779,.977452,.978118,.978778,.979432,.980080,.980721,.981357,.981987,.982611,.983227,.983835,.984435,.985027,.985612,.986189,.986759,.987321,.987877,.988425,.988967,.989501,.990029,.990550,.991065,.991573,.992075,.992571,.993060,.993544,.994015,.994474,.994921,.995356,.995780,.996193,.996596,.996988,.997371,.997743,.998095,.998429,.998745,.999043,.999302,.999527,.999722,.999891,.999967,1.00000,.202918,.303343,.369611,.418805,.457760,.489891,.517152,.540762,.561535,.580040,.596691,.611800,.625604,.638291,.650012,.660888,.671021,.680492,.689374,.697726,.705641,.713158,.720312,.727134,.733650,.739884,.745857,.751589,.757095,.762390,.767490,.772405,.777148,.781728,.786155,.790437,.794583,.798600,.802494,.806272,.809941,.813506,.816973,.820345,.823628,.826824,.829939,.832975,.835935,.838823,.841642,.844394,.847081,.849707,.852274,.854783,.857237,.859638,.861987,.864287,.866540,.868748,.870912,.873034,.875115,.877156,.879159,.881125,.883054,.884948,.886808,.888635,.890430,.892194,.893927,.895630,.897305,.898951,.900571,.902163,.903731,.905275,.906795,.908291,.909766,.911218,.912649,.914060,.915449,.916819,.918169,.919500,.920813,.922107,.923383,.924642,.925884,.927109,.928318,.929511,.930688,.931852,.933000,.934135,.935256,.936364,.937458,.938539,.939608,.940664,.941707,.942739,.943759,.944767,.945764,.946750,.947724,.948688,.949641,.950584,.951517,.952440,.953354,.954258,.955154,.956040,.956917,.957786,.958646,.959497,.960340,.961175,.962002,.962821,.963632,.964436,.965231,.966020,.966801,.967574,.968341,.969100,.969851,.970596,.971334,.972065,.972790,.973507,.974219,.974923,.975622,.976314,.976999,.977679,.978353,.979020,.979682,.980338,.980989,.981633,.982270,.982900,.983522,.984136,.984743,.985343,.985936,.986523,.987102,.987674,.988240,.988799,.989352,.989898,.990439,.990973,.991500,.992022,.992538,.993048,.993546,.994032,.994507,.994970,.995423,.995864,.996295,.996716,.997127,.997529,.997910,.998273,.998617,.998944,.999229,.999479,.999697,.999887,.999967,1.00000]
	# Z=15
	      Z15=[.163128,.244844,.299421,.340430,.373298,.400739,.424303,.444960,.463355,.479942,.495049,.508922,.521752,.533688,.544848,.555330,.565214,.574567,.583443,.591891,.599948,.607650,.615027,.622106,.628912,.635465,.641784,.647885,.653785,.659496,.665030,.670399,.675613,.680680,.685609,.690408,.695084,.699643,.704091,.708434,.712676,.716820,.720873,.724837,.728718,.732517,.736240,.739889,.743467,.746977,.750422,.753804,.757126,.760389,.763597,.766750,.769851,.772902,.775904,.778859,.781768,.784632,.787453,.790232,.792971,.795670,.798330,.800954,.803541,.806094,.808612,.811098,.813551,.815973,.818365,.820727,.823060,.825364,.827642,.829893,.832117,.834316,.836490,.838639,.840764,.842867,.844946,.847003,.849039,.851053,.853046,.855020,.856973,.858906,.860821,.862717,.864595,.866455,.868297,.870122,.871930,.873722,.875498,.877257,.879001,.880730,.882443,.884142,.885826,.887496,.889152,.890795,.892424,.894040,.895642,.897232,.898810,.900375,.901927,.903468,.904998,.906516,.908023,.909518,.911003,.912477,.913941,.915395,.916838,.918271,.919694,.921108,.922512,.923906,.925292,.926668,.928035,.929393,.930742,.932083,.933416,.934739,.936055,.937362,.938661,.939952,.941235,.942510,.943778,.945038,.946291,.947536,.948774,.950005,.951228,.952445,.953655,.954857,.956054,.957243,.958426,.959602,.960771,.961934,.963090,.964240,.965384,.966522,.967653,.968778,.969897,.971011,.972118,.973220,.974316,.975406,.976491,.977570,.978644,.979712,.980775,.981832,.982884,.983931,.984972,.986008,.987040,.988066,.989087,.990103,.991114,.992120,.993121,.994118,.995110,.996097,.997079,.998057,.999031,1.00000,.166838,.250372,.306138,.348019,.381570,.409568,.433599,.454655,.473397,.490288,.505665,.519779,.532826,.544957,.556296,.566940,.576971,.586459,.595459,.604021,.612182,.619978,.627440,.634597,.641473,.648089,.654466,.660619,.666565,.672316,.677887,.683287,.688528,.693619,.698568,.703383,.708071,.712640,.717095,.721442,.725684,.729826,.733873,.737829,.741698,.745484,.749190,.752820,.756377,.759864,.763283,.766637,.769929,.773161,.776335,.779454,.782518,.785530,.788492,.791405,.794271,.797090,.799865,.802596,.805285,.807933,.810541,.813111,.815644,.818141,.820602,.823030,.825423,.827785,.830115,.832414,.834683,.836924,.839135,.841319,.843476,.845607,.847711,.849790,.851845,.853875,.855882,.857866,.859827,.861767,.863685,.865581,.867458,.869314,.871150,.872967,.874765,.876544,.878306,.880049,.881775,.883484,.885177,.886852,.888512,.890156,.891784,.893397,.894995,.896578,.898147,.899701,.901242,.902769,.904282,.905782,.907270,.908744,.910206,.911656,.913093,.914519,.915933,.917335,.918726,.920106,.921475,.922833,.924181,.925518,.926845,.928161,.929468,.930765,.932052,.933329,.934597,.935856,.937106,.938346,.939578,.940801,.942015,.943221,.944419,.945608,.946789,.947962,.949127,.950284,.951434,.952576,.953710,.954837,.955956,.957068,.958173,.959272,.960363,.961447,.962524,.963595,.964659,.965716,.966767,.967812,.968850,.969882,.970908,.971928,.972942,.973950,.974952,.975948,.976939,.977923,.978902,.979876,.980844,.981807,.982764,.983716,.984663,.985605,.986541,.987472,.988399,.989320,.990237,.991148,.992055,.992957,.993854,.994746,.995633,.996516,.997394,.998267,.999136,1.00000,.171092,.256746,.313922,.356859,.391252,.419949,.444578,.466156,.485361,.502667,.518420,.532878,.546242,.558666,.570277,.581177,.591448,.601161,.610374,.619138,.627483,.635447,.643062,.650359,.657363,.664095,.670577,.676826,.682858,.688688,.694328,.699791,.705087,.710227,.715218,.720070,.724789,.729384,.733859,.738222,.742474,.746622,.750669,.754621,.758482,.762255,.765944,.769554,.773087,.776546,.779934,.783253,.786508,.789699,.792829,.795901,.798916,.801877,.804784,.807641,.810447,.813205,.815916,.818581,.821202,.823780,.826317,.828814,.831271,.833690,.836072,.838419,.840730,.843008,.845252,.847464,.849645,.851796,.853916,.856008,.858071,.860106,.862114,.864096,.866052,.867983,.869889,.871771,.873629,.875465,.877278,.879069,.880838,.882586,.884314,.886022,.887709,.889378,.891027,.892658,.894271,.895866,.897443,.899004,.900548,.902075,.903586,.905081,.906561,.908026,.909475,.910910,.912331,.913737,.915130,.916508,.917873,.919225,.920564,.921891,.923205,.924506,.925796,.927074,.928340,.929595,.930838,.932071,.933293,.934503,.935704,.936894,.938074,.939243,.940403,.941553,.942693,.943824,.944945,.946057,.947161,.948255,.949341,.950418,.951487,.952547,.953599,.954643,.955679,.956707,.957728,.958740,.959745,.960743,.961733,.962716,.963691,.964660,.965621,.966576,.967524,.968465,.969400,.970328,.971250,.972165,.973074,.973977,.974874,.975765,.976650,.977528,.978402,.979269,.980131,.980987,.981837,.982682,.983522,.984356,.985185,.986008,.986827,.987640,.988448,.989252,.990050,.990843,.991632,.992415,.993194,.993969,.994738,.995503,.996264,.997020,.997771,.998519,.999262,1.00000,.175918,.263927,.322633,.366688,.401952,.431355,.456572,.478649,.498285,.515967,.532051,.546803,.560428,.573087,.584908,.595998,.606440,.616309,.625663,.634554,.643011,.651072,.658772,.666141,.673206,.679990,.686513,.692795,.698852,.704700,.710350,.715817,.721111,.726242,.731220,.736053,.740748,.745314,.749757,.754083,.758295,.762397,.766396,.770296,.774101,.777816,.781444,.784989,.788454,.791843,.795159,.798404,.801581,.804693,.807741,.810730,.813659,.816532,.819351,.822116,.824831,.827495,.830111,.832681,.835205,.837686,.840124,.842521,.844877,.847195,.849475,.851719,.853926,.856099,.858238,.860344,.862419,.864462,.866474,.868457,.870412,.872338,.874237,.876110,.877957,.879778,.881575,.883347,.885096,.886821,.888525,.890206,.891865,.893504,.895121,.896719,.898296,.899855,.901394,.902914,.904417,.905902,.907370,.908820,.910254,.911672,.913074,.914460,.915830,.917186,.918526,.919852,.921164,.922461,.923745,.925015,.926272,.927516,.928747,.929965,.931171,.932365,.933547,.934718,.935877,.937025,.938162,.939287,.940403,.941507,.942601,.943685,.944759,.945823,.946878,.947922,.948958,.949983,.951000,.952008,.953006,.953997,.954978,.955951,.956916,.957873,.958822,.959762,.960695,.961620,.962538,.963448,.964351,.965246,.966134,.967015,.967889,.968755,.969615,.970469,.971315,.972156,.972989,.973817,.974638,.975453,.976263,.977066,.977863,.978654,.979440,.980219,.980993,.981762,.982525,.983282,.984035,.984781,.985523,.986259,.986991,.987717,.988438,.989155,.989867,.990573,.991276,.991973,.992666,.993354,.994038,.994718,.995393,.996064,.996730,.997392,.998051,.998704,.999354,1.00000,.182804,.274126,.334955,.380537,.416970,.447305,.473283,.495995,.516165,.534303,.550777,.565865,.579781,.592691,.604730,.616007,.626611,.636617,.646088,.655078,.663614,.671736,.679482,.686881,.693963,.700751,.707268,.713533,.719563,.725374,.730980,.736395,.741629,.746693,.751598,.756351,.760962,.765438,.769785,.774011,.778119,.782115,.786004,.789791,.793481,.797078,.800586,.804008,.807349,.810611,.813798,.816913,.819957,.822935,.825849,.828700,.831491,.834224,.836901,.839525,.842096,.844618,.847091,.849517,.851897,.854234,.856528,.858780,.860993,.863166,.865301,.867400,.869462,.871490,.873484,.875446,.877375,.879273,.881140,.882978,.884788,.886570,.888325,.890054,.891758,.893437,.895091,.896722,.898329,.899914,.901476,.903017,.904537,.906036,.907515,.908973,.910413,.911833,.913235,.914618,.915984,.917333,.918665,.919981,.921280,.922563,.923831,.925084,.926321,.927544,.928753,.929947,.931127,.932294,.933448,.934588,.935715,.936830,.937932,.939022,.940100,.941167,.942222,.943266,.944299,.945321,.946333,.947334,.948324,.949305,.950276,.951236,.952188,.953129,.954061,.954985,.955898,.956803,.957700,.958587,.959466,.960337,.961200,.962054,.962901,.963740,.964571,.965395,.966211,.967020,.967821,.968615,.969402,.970182,.970956,.971722,.972482,.973235,.973982,.974722,.975456,.976184,.976906,.977621,.978331,.979035,.979734,.980427,.981114,.981795,.982471,.983142,.983807,.984467,.985122,.985772,.986417,.987056,.987691,.988321,.988946,.989566,.990182,.990793,.991400,.992003,.992601,.993194,.993784,.994369,.994950,.995527,.996100,.996668,.997233,.997794,.998351,.998905,.999454,1.00000,.194492,.291372,.355716,.403792,.442109,.473919,.501082,.524761,.545730,.564530,.581558,.597107,.611407,.624635,.636935,.648423,.659194,.669329,.678894,.687947,.696518,.704652,.712387,.719756,.726789,.733512,.739948,.746119,.752041,.757733,.763209,.768483,.773567,.778472,.783210,.787789,.792219,.796506,.800660,.804685,.808590,.812381,.816061,.819638,.823115,.826496,.829787,.832990,.836111,.839151,.842114,.845004,.847823,.850574,.853259,.855881,.858443,.860945,.863391,.865783,.868123,.870414,.872656,.874853,.877004,.879112,.881177,.883202,.885187,.887134,.889043,.890916,.892754,.894558,.896328,.898066,.899773,.901449,.903096,.904713,.906303,.907867,.909404,.910916,.912403,.913866,.915305,.916722,.918116,.919488,.920838,.922168,.923477,.924766,.926036,.927286,.928518,.929732,.930928,.932106,.933267,.934412,.935541,.936654,.937751,.938833,.939900,.940952,.941990,.943014,.944024,.945021,.946004,.946974,.947932,.948877,.949810,.950730,.951639,.952536,.953422,.954298,.955162,.956016,.956860,.957693,.958517,.959331,.960135,.960929,.961715,.962491,.963258,.964016,.964766,.965507,.966239,.966963,.967679,.968387,.969087,.969780,.970465,.971142,.971812,.972475,.973131,.973779,.974421,.975056,.975684,.976306,.976921,.977529,.978132,.978728,.979317,.979901,.980479,.981051,.981617,.982178,.982733,.983282,.983827,.984365,.984899,.985427,.985951,.986469,.986982,.987490,.987994,.988493,.988986,.989476,.989960,.990440,.990916,.991387,.991854,.992317,.992776,.993230,.993681,.994127,.994570,.995009,.995444,.995875,.996302,.996727,.997147,.997564,.997978,.998389,.998796,.999200,.999602,1.00000,.205643,.307690,.375208,.425465,.465368,.498370,.526444,.550824,.572331,.591542,.608875,.624644,.639090,.652403,.664735,.676209,.686927,.696973,.706418,.715324,.723743,.731719,.739291,.746494,.753357,.759908,.766168,.772160,.777903,.783413,.788705,.793794,.798692,.803410,.807960,.812350,.816590,.820687,.824650,.828485,.832199,.835799,.839290,.842678,.845966,.849160,.852264,.855281,.858216,.861071,.863850,.866556,.869192,.871761,.874265,.876707,.879088,.881412,.883680,.885895,.888058,.890171,.892237,.894257,.896232,.898164,.900054,.901903,.903714,.905486,.907221,.908920,.910585,.912216,.913814,.915381,.916916,.918421,.919898,.921345,.922766,.924161,.925530,.926874,.928193,.929489,.930762,.932013,.933241,.934449,.935635,.936801,.937947,.939073,.940181,.941270,.942341,.943394,.944430,.945449,.946452,.947439,.948411,.949367,.950308,.951235,.952148,.953047,.953932,.954803,.955662,.956508,.957341,.958161,.958970,.959767,.960552,.961326,.962089,.962841,.963582,.964312,.965033,.965743,.966444,.967135,.967816,.968488,.969151,.969805,.970450,.971086,.971714,.972333,.972944,.973548,.974143,.974730,.975310,.975882,.976446,.977004,.977554,.978097,.978634,.979163,.979686,.980202,.980712,.981216,.981713,.982204,.982689,.983168,.983641,.984108,.984570,.985026,.985476,.985921,.986361,.986795,.987223,.987647,.988065,.988478,.988886,.989289,.989687,.990080,.990469,.990852,.991232,.991606,.991976,.992342,.992704,.993061,.993414,.993763,.994107,.994448,.994785,.995118,.995448,.995773,.996096,.996414,.996729,.997040,.997349,.997654,.997957,.998257,.998554,.998849,.999140,.999429,.999716,1.00000,.215279,.321808,.392094,.444264,.485569,.519635,.548532,.573557,.595571,.615180,.632821,.648826,.663447,.676883,.689295,.700810,.711536,.721562,.730962,.739800,.748136,.756017,.763484,.770570,.777309,.783725,.789846,.795691,.801280,.806632,.811761,.816682,.821409,.825952,.830324,.834533,.838590,.842501,.846277,.849922,.853447,.856858,.860159,.863358,.866457,.869462,.872377,.875207,.877953,.880622,.883214,.885735,.888185,.890569,.892889,.895148,.897347,.899489,.901576,.903610,.905595,.907531,.909420,.911265,.913066,.914825,.916543,.918222,.919863,.921467,.923036,.924570,.926070,.927538,.928974,.930379,.931755,.933102,.934420,.935712,.936977,.938217,.939433,.940624,.941792,.942938,.944062,.945164,.946245,.947305,.948346,.949367,.950369,.951353,.952319,.953267,.954198,.955113,.956010,.956892,.957759,.958610,.959446,.960268,.961075,.961869,.962649,.963415,.964169,.964910,.965638,.966354,.967059,.967751,.968433,.969103,.969762,.970410,.971048,.971676,.972293,.972900,.973497,.974085,.974663,.975232,.975791,.976342,.976883,.977417,.977941,.978458,.978966,.979467,.979959,.980444,.980922,.981392,.981854,.982310,.982759,.983200,.983635,.984063,.984484,.984899,.985308,.985710,.986106,.986496,.986880,.987259,.987631,.987998,.988360,.988716,.989067,.989413,.989753,.990089,.990419,.990744,.991063,.991378,.991688,.991993,.992294,.992589,.992881,.993167,.993449,.993727,.994001,.994270,.994536,.994797,.995054,.995308,.995557,.995803,.996045,.996283,.996517,.996748,.996975,.997198,.997418,.997635,.997848,.998057,.998264,.998468,.998668,.998866,.999061,.999253,.999443,.999631,.999817,1.00000,.226684,.338424,.411864,.466165,.508991,.544176,.573907,.599554,.622029,.641971,.659843,.675995,.690693,.704148,.716529,.727972,.738589,.748475,.757708,.766356,.774493,.782169,.789424,.796293,.802810,.809001,.814893,.820506,.825862,.830977,.835869,.840551,.845038,.849341,.853471,.857439,.861254,.864924,.868458,.871862,.875148,.878322,.881388,.884354,.887222,.889998,.892686,.895289,.897813,.900260,.902633,.904936,.907171,.909341,.911449,.913498,.915489,.917425,.919308,.921139,.922923,.924661,.926354,.928004,.929613,.931182,.932712,.934205,.935662,.937084,.938472,.939827,.941150,.942442,.943705,.944939,.946144,.947323,.948475,.949602,.950703,.951781,.952835,.953866,.954875,.955863,.956830,.957776,.958702,.959610,.960498,.961368,.962220,.963055,.963873,.964675,.965461,.966231,.966985,.967725,.968450,.969160,.969857,.970540,.971209,.971865,.972508,.973139,.973758,.974365,.974960,.975544,.976117,.976679,.977230,.977771,.978302,.978823,.979334,.979836,.980329,.980812,.981285,.981750,.982206,.982653,.983092,.983522,.983945,.984359,.984766,.985165,.985557,.985942,.986320,.986690,.987054,.987412,.987762,.988107,.988445,.988776,.989101,.989420,.989733,.990039,.990340,.990635,.990925,.991209,.991488,.991762,.992030,.992294,.992553,.992806,.993056,.993300,.993540,.993776,.994006,.994232,.994453,.994669,.994881,.995089,.995292,.995491,.995685,.995876,.996063,.996246,.996425,.996600,.996772,.996940,.997105,.997266,.997424,.997579,.997731,.997878,.998022,.998163,.998300,.998434,.998565,.998692,.998817,.998939,.999057,.999173,.999286,.999396,.999503,.999607,.999709,.999808,.999905,1.00000,.230091,.343375,.417742,.472664,.515928,.551430,.581395,.607212,.629810,.649837,.667764,.683946,.698654,.712103,.724463,.735874,.746448,.756282,.765457,.774039,.782108,.789713,.796895,.803691,.810131,.816246,.822059,.827594,.832869,.837905,.842716,.847317,.851723,.855944,.859993,.863880,.867613,.871202,.874655,.877978,.881185,.884281,.887272,.890162,.892957,.895661,.898278,.900813,.903268,.905648,.907956,.910194,.912365,.914473,.916520,.918508,.920440,.922317,.924142,.925917,.927645,.929328,.930967,.932564,.934120,.935636,.937115,.938557,.939963,.941335,.942674,.943981,.945257,.946502,.947718,.948906,.950066,.951200,.952308,.953390,.954449,.955483,.956495,.957484,.958451,.959397,.960323,.961228,.962114,.962982,.963830,.964661,.965475,.966271,.967051,.967814,.968562,.969295,.970013,.970716,.971405,.972079,.972740,.973387,.974021,.974642,.975250,.975846,.976430,.977003,.977564,.978114,.978654,.979183,.979701,.980209,.980708,.981196,.981676,.982146,.982607,.983058,.983500,.983933,.984357,.984773,.985181,.985580,.985972,.986356,.986732,.987101,.987462,.987817,.988164,.988505,.988839,.989167,.989488,.989803,.990112,.990414,.990709,.990999,.991282,.991559,.991831,.992097,.992358,.992613,.992863,.993108,.993347,.993582,.993812,.994037,.994258,.994474,.994686,.994894,.995096,.995294,.995487,.995675,.995859,.996038,.996213,.996384,.996551,.996714,.996873,.997028,.997180,.997327,.997472,.997613,.997751,.997885,.998016,.998145,.998269,.998389,.998506,.998620,.998730,.998836,.998940,.999040,.999137,.999232,.999323,.999410,.999495,.999576,.999654,.999730,.999802,.999871,.999937,1.00000,.228455,.340959,.414830,.469397,.512393,.547681,.577472,.603146,.625623,.645547,.663386,.679492,.694135,.707527,.719837,.731204,.741740,.751542,.760687,.769244,.777297,.784893,.792072,.798872,.805322,.811450,.817282,.822839,.828141,.833205,.838048,.842684,.847127,.851388,.855478,.859407,.863185,.866820,.870320,.873692,.876948,.880093,.883133,.886073,.888918,.891672,.894339,.896924,.899429,.901859,.904217,.906505,.908727,.910884,.912981,.915019,.917000,.918927,.920801,.922625,.924402,.926132,.927819,.929463,.931066,.932629,.934153,.935641,.937092,.938509,.939892,.941243,.942562,.943850,.945109,.946339,.947541,.948717,.949866,.950989,.952088,.953162,.954213,.955242,.956248,.957233,.958197,.959140,.960064,.960969,.961854,.962722,.963572,.964404,.965219,.966019,.966802,.967569,.968321,.969059,.969781,.970489,.971183,.971863,.972530,.973183,.973824,.974452,.975068,.975672,.976265,.976846,.977416,.977975,.978524,.979062,.979590,.980108,.980617,.981116,.981605,.982085,.982555,.983016,.983468,.983911,.984345,.984771,.985189,.985599,.986001,.986395,.986782,.987161,.987533,.987898,.988256,.988608,.988953,.989291,.989622,.989947,.990264,.990575,.990880,.991178,.991470,.991756,.992036,.992310,.992579,.992842,.993100,.993352,.993600,.993842,.994079,.994312,.994540,.994763,.994980,.995192,.995399,.995600,.995796,.995987,.996173,.996355,.996532,.996704,.996872,.997036,.997196,.997351,.997503,.997651,.997795,.997935,.998072,.998206,.998335,.998459,.998579,.998694,.998805,.998913,.999016,.999116,.999212,.999305,.999393,.999477,.999557,.999633,.999705,.999772,.999835,.999894,.999949,1.00000,.226103,.337500,.410678,.464758,.507388,.542394,.571959,.597450,.619777,.639578,.657315,.673335,.687907,.701240,.713502,.724830,.735334,.745111,.754237,.762780,.770827,.778425,.785614,.792428,.798898,.805052,.810913,.816504,.821843,.826948,.831834,.836517,.841007,.845319,.849461,.853445,.857279,.860971,.864530,.867962,.871277,.874482,.877583,.880583,.883488,.886303,.889030,.891675,.894241,.896731,.899149,.901497,.903778,.905996,.908152,.910249,.912289,.914274,.916207,.918089,.919923,.921711,.923455,.925155,.926814,.928432,.930012,.931554,.933060,.934530,.935966,.937370,.938741,.940082,.941392,.942673,.943926,.945152,.946350,.947523,.948671,.949794,.950894,.951970,.953024,.954056,.955066,.956056,.957026,.957976,.958908,.959820,.960714,.961591,.962450,.963293,.964119,.964930,.965724,.966504,.967268,.968018,.968753,.969474,.970181,.970875,.971556,.972224,.972880,.973523,.974155,.974775,.975383,.975980,.976567,.977143,.977708,.978264,.978809,.979344,.979870,.980386,.980892,.981388,.981876,.982354,.982824,.983284,.983737,.984181,.984617,.985045,.985466,.985879,.986284,.986683,.987074,.987458,.987835,.988206,.988569,.988925,.989274,.989616,.989951,.990279,.990601,.990916,.991226,.991529,.991826,.992118,.992404,.992684,.992959,.993228,.993493,.993752,.994006,.994255,.994498,.994734,.994965,.995189,.995408,.995621,.995829,.996031,.996228,.996420,.996607,.996790,.996967,.997141,.997310,.997474,.997634,.997791,.997943,.998092,.998234,.998372,.998503,.998630,.998752,.998869,.998981,.999089,.999193,.999293,.999388,.999477,.999561,.999640,.999713,.999781,.999843,.999901,.999953,1.00000,.223198,.333272,.405651,.459194,.501442,.536168,.565526,.590864,.613078,.632797,.650479,.666466,.681021,.694352,.706624,.717972,.728507,.738320,.747489,.756081,.764181,.771835,.779082,.785957,.792489,.798707,.804634,.810292,.815699,.820873,.825830,.830583,.835145,.839528,.843743,.847800,.851707,.855472,.859104,.862609,.865997,.869273,.872442,.875511,.878483,.881363,.884155,.886864,.889492,.892043,.894521,.896929,.899268,.901543,.903756,.905908,.908003,.910042,.912028,.913963,.915849,.917688,.919481,.921231,.922938,.924605,.926232,.927820,.929372,.930888,.932369,.933817,.935231,.936615,.937968,.939290,.940585,.941851,.943090,.944302,.945489,.946652,.947791,.948906,.949999,.951070,.952120,.953148,.954157,.955145,.956114,.957065,.957997,.958911,.959808,.960688,.961552,.962399,.963230,.964046,.964847,.965633,.966405,.967162,.967906,.968637,.969354,.970058,.970750,.971429,.972097,.972752,.973397,.974030,.974652,.975263,.975864,.976454,.977034,.977605,.978165,.978715,.979256,.979786,.980308,.980820,.981323,.981817,.982302,.982779,.983248,.983709,.984161,.984606,.985043,.985473,.985896,.986311,.986719,.987120,.987514,.987900,.988278,.988650,.989014,.989371,.989722,.990065,.990403,.990734,.991059,.991377,.991690,.991997,.992298,.992594,.992884,.993168,.993448,.993722,.993989,.994249,.994503,.994750,.994991,.995226,.995454,.995677,.995894,.996106,.996312,.996513,.996709,.996900,.997086,.997268,.997445,.997617,.997785,.997949,.998106,.998257,.998401,.998540,.998673,.998801,.998924,.999041,.999154,.999262,.999364,.999460,.999550,.999634,.999711,.999782,.999846,.999904,.999955,1.00000,.221596,.330910,.402810,.456012,.498004,.532528,.561724,.586928,.609031,.628658,.646261,.662182,.676680,.689963,.702194,.713507,.724012,.733801,.742950,.751525,.759614,.767261,.774507,.781383,.787922,.794149,.800089,.805761,.811186,.816379,.821357,.826134,.830721,.835131,.839375,.843460,.847398,.851195,.854860,.858398,.861820,.865130,.868335,.871439,.874447,.877363,.880192,.882937,.885602,.888190,.890705,.893150,.895527,.897839,.900089,.902279,.904412,.906489,.908513,.910485,.912408,.914285,.916115,.917903,.919647,.921351,.923015,.924641,.926230,.927782,.929300,.930784,.932236,.933655,.935044,.936403,.937733,.939035,.940309,.941557,.942780,.943977,.945151,.946301,.947429,.948534,.949617,.950680,.951722,.952744,.953747,.954730,.955696,.956643,.957572,.958484,.959380,.960259,.961122,.961970,.962802,.963620,.964422,.965211,.965986,.966746,.967494,.968229,.968951,.969660,.970357,.971043,.971716,.972378,.973030,.973670,.974299,.974918,.975527,.976126,.976714,.977292,.977860,.978418,.978967,.979507,.980037,.980558,.981070,.981574,.982069,.982556,.983035,.983506,.983969,.984425,.984873,.985313,.985747,.986173,.986591,.987002,.987405,.987801,.988189,.988570,.988945,.989312,.989673,.990027,.990375,.990716,.991052,.991381,.991704,.992022,.992334,.992640,.992941,.993237,.993525,.993805,.994079,.994346,.994606,.994860,.995107,.995348,.995583,.995812,.996035,.996253,.996465,.996673,.996875,.997072,.997264,.997451,.997634,.997812,.997983,.998146,.998303,.998453,.998597,.998735,.998867,.998993,.999115,.999231,.999340,.999442,.999537,.999627,.999708,.999781,.999847,.999906,.999957,1.00000,.220237,.328908,.400402,.453318,.495094,.529450,.558511,.583604,.605616,.625167,.642706,.658573,.673026,.686271,.698470,.709756,.720239,.730009,.739143,.747706,.755787,.763431,.770675,.777554,.784098,.790332,.796281,.801965,.807402,.812611,.817605,.822400,.827006,.831436,.835700,.839808,.843769,.847590,.851279,.854843,.858290,.861627,.864858,.867989,.871025,.873969,.876826,.879600,.882294,.884911,.887456,.889930,.892337,.894679,.896959,.899179,.901342,.903449,.905503,.907506,.909460,.911367,.913228,.915046,.916821,.918555,.920249,.921905,.923524,.925107,.926655,.928169,.929650,.931100,.932518,.933907,.935266,.936598,.937901,.939178,.940430,.941657,.942859,.944038,.945194,.946328,.947440,.948531,.949601,.950652,.951682,.952694,.953687,.954661,.955618,.956558,.957481,.958387,.959277,.960152,.961011,.961855,.962684,.963499,.964300,.965087,.965860,.966620,.967368,.968103,.968826,.969536,.970235,.970922,.971598,.972263,.972917,.973561,.974194,.974817,.975429,.976031,.976623,.977205,.977777,.978340,.978894,.979438,.979973,.980500,.981018,.981528,.982030,.982523,.983009,.983486,.983957,.984419,.984874,.985323,.985763,.986195,.986619,.987036,.987445,.987848,.988243,.988631,.989012,.989386,.989754,.990116,.990471,.990820,.991163,.991500,.991831,.992156,.992476,.992790,.993097,.993396,.993687,.993972,.994249,.994519,.994783,.995040,.995291,.995536,.995775,.996008,.996235,.996457,.996674,.996885,.997091,.997292,.997488,.997679,.997863,.998038,.998206,.998367,.998521,.998668,.998810,.998945,.999075,.999199,.999315,.999423,.999524,.999618,.999703,.999779,.999847,.999907,.999958,1.00000,.217999,.325611,.396439,.448884,.490307,.524386,.553225,.578138,.600001,.619427,.636863,.652642,.667022,.680205,.692352,.703595,.714043,.723784,.732895,.741441,.749510,.757148,.764391,.771274,.777825,.784071,.790035,.795737,.801196,.806428,.811449,.816271,.820908,.825370,.829667,.833810,.837807,.841666,.845394,.848998,.852486,.855864,.859138,.862312,.865391,.868379,.871281,.874100,.876839,.879502,.882093,.884613,.887067,.889456,.891783,.894051,.896261,.898416,.900518,.902568,.904569,.906524,.908433,.910299,.912122,.913904,.915646,.917350,.919017,.920647,.922243,.923804,.925333,.926830,.928296,.929732,.931138,.932516,.933867,.935191,.936489,.937762,.939011,.940236,.941438,.942618,.943776,.944912,.946028,.947123,.948199,.949255,.950293,.951312,.952314,.953298,.954264,.955214,.956148,.957066,.957969,.958856,.959728,.960586,.961429,.962259,.963074,.963877,.964667,.965443,.966208,.966960,.967700,.968428,.969145,.969851,.970546,.971230,.971903,.972566,.973218,.973860,.974491,.975113,.975724,.976326,.976919,.977502,.978076,.978641,.979197,.979745,.980285,.980816,.981339,.981854,.982361,.982860,.983352,.983837,.984313,.984782,.985242,.985695,.986139,.986577,.987007,.987430,.987845,.988254,.988656,.989052,.989441,.989823,.990199,.990569,.990933,.991291,.991643,.991990,.992328,.992658,.992980,.993295,.993602,.993902,.994194,.994480,.994759,.995032,.995298,.995557,.995811,.996059,.996301,.996537,.996768,.996993,.997213,.997428,.997634,.997831,.998020,.998200,.998373,.998538,.998697,.998848,.998994,.999132,.999262,.999382,.999494,.999598,.999690,.999772,.999844,.999908,.999959,1.00000,.216279,.323075,.393389,.445470,.486617,.520480,.549146,.573917,.595662,.614989,.632342,.648050,.662371,.675503,.687608,.698815,.709232,.718949,.728039,.736568,.744625,.752255,.759495,.766378,.772932,.779184,.785157,.790870,.796341,.801589,.806626,.811467,.816123,.820607,.824927,.829094,.833116,.837001,.840756,.844388,.847904,.851312,.854616,.857820,.860930,.863950,.866884,.869735,.872507,.875204,.877828,.880383,.882871,.885294,.887656,.889958,.892204,.894394,.896531,.898617,.900654,.902644,.904589,.906490,.908349,.910167,.911946,.913685,.915388,.917055,.918686,.920284,.921849,.923381,.924883,.926355,.927797,.929211,.930597,.931957,.933290,.934599,.935883,.937144,.938381,.939596,.940789,.941961,.943112,.944242,.945353,.946444,.947517,.948571,.949607,.950625,.951626,.952610,.953578,.954530,.955466,.956387,.957293,.958185,.959062,.959925,.960774,.961610,.962433,.963243,.964040,.964825,.965598,.966359,.967108,.967846,.968573,.969289,.969994,.970689,.971373,.972046,.972709,.973362,.974005,.974639,.975262,.975876,.976481,.977077,.977664,.978243,.978813,.979374,.979927,.980472,.981010,.981539,.982061,.982575,.983081,.983578,.984068,.984549,.985023,.985489,.985948,.986399,.986843,.987280,.987710,.988134,.988550,.988960,.989364,.989761,.990152,.990537,.990916,.991289,.991654,.992010,.992358,.992698,.993030,.993354,.993672,.993982,.994284,.994580,.994870,.995152,.995429,.995699,.995963,.996221,.996473,.996720,.996961,.997197,.997422,.997638,.997845,.998043,.998233,.998415,.998589,.998755,.998915,.999068,.999210,.999341,.999463,.999577,.999677,.999764,.999841,.999909,.999960,1.00000,.213128,.318431,.387804,.439218,.479863,.513334,.541683,.566196,.587727,.606876,.624079,.639661,.653875,.666918,.678947,.690091,.700455,.710128,.719183,.727684,.735722,.743339,.750573,.757456,.764016,.770278,.776265,.781997,.787491,.792764,.797830,.802703,.807394,.811915,.816274,.820483,.824548,.828477,.832279,.835958,.839524,.842982,.846337,.849595,.852758,.855832,.858821,.861728,.864557,.867311,.869992,.872605,.875152,.877634,.880055,.882418,.884723,.886974,.889171,.891318,.893416,.895468,.897475,.899438,.901359,.903239,.905079,.906882,.908647,.910376,.912070,.913730,.915358,.916953,.918517,.920051,.921556,.923033,.924481,.925903,.927299,.928670,.930017,.931339,.932639,.933916,.935171,.936405,.937618,.938810,.939982,.941135,.942269,.943384,.944481,.945560,.946622,.947667,.948696,.949708,.950705,.951686,.952652,.953604,.954541,.955464,.956373,.957268,.958151,.959020,.959876,.960721,.961552,.962372,.963180,.963977,.964762,.965537,.966300,.967053,.967795,.968526,.969246,.969957,.970657,.971348,.972028,.972700,.973361,.974014,.974658,.975292,.975918,.976536,.977145,.977746,.978339,.978923,.979500,.980069,.980630,.981182,.981726,.982262,.982790,.983310,.983823,.984328,.984825,.985316,.985799,.986275,.986744,.987207,.987663,.988112,.988555,.988991,.989422,.989846,.990261,.990667,.991065,.991454,.991836,.992209,.992574,.992932,.993282,.993625,.993960,.994289,.994611,.994926,.995234,.995537,.995833,.996122,.996406,.996684,.996951,.997207,.997452,.997687,.997913,.998130,.998338,.998537,.998729,.998912,.999083,.999240,.999387,.999522,.999640,.999742,.999831,.999908,.999962,1.00000,.211080,.315409,.384164,.435138,.475450,.508657,.536795,.561132,.582517,.601543,.618640,.634134,.648271,.661247,.673220,.684316,.694639,.704277,.713302,.721778,.729797,.737400,.744623,.751500,.758057,.764320,.770311,.776049,.781552,.786836,.791916,.796804,.801512,.806052,.810432,.814662,.818750,.822704,.826530,.830237,.833830,.837317,.840701,.843988,.847183,.850289,.853310,.856249,.859112,.861899,.864616,.867263,.869845,.872364,.874821,.877220,.879562,.881849,.884085,.886269,.888405,.890495,.892540,.894541,.896501,.898420,.900299,.902141,.903945,.905713,.907447,.909147,.910814,.912449,.914053,.915627,.917171,.918688,.920176,.921638,.923074,.924484,.925871,.927234,.928574,.929891,.931186,.932460,.933713,.934945,.936157,.937350,.938524,.939679,.940816,.941936,.943038,.944123,.945191,.946243,.947279,.948300,.949306,.950298,.951274,.952237,.953186,.954121,.955043,.955952,.956848,.957732,.958603,.959462,.960310,.961146,.961970,.962784,.963586,.964378,.965159,.965929,.966689,.967438,.968178,.968907,.969627,.970337,.971038,.971729,.972412,.973086,.973750,.974407,.975054,.975694,.976325,.976948,.977564,.978171,.978770,.979361,.979943,.980518,.981084,.981642,.982193,.982736,.983272,.983800,.984321,.984835,.985342,.985842,.986336,.986822,.987303,.987777,.988244,.988706,.989158,.989601,.990036,.990461,.990879,.991288,.991690,.992083,.992469,.992847,.993218,.993582,.993939,.994289,.994632,.994968,.995298,.995621,.995939,.996250,.996549,.996837,.997113,.997379,.997635,.997880,.998116,.998343,.998562,.998772,.998966,.999147,.999315,.999471,.999605,.999720,.999820,.999906,.999963,1.00000,.208528,.311634,.379608,.430023,.469907,.502774,.530634,.554740,.575930,.594789,.611743,.627112,.641142,.654024,.665914,.676938,.687197,.696779,.705756,.714190,.722173,.729748,.736950,.743810,.750356,.756612,.762600,.768340,.773849,.779141,.784233,.789135,.793860,.798419,.802820,.807074,.811188,.815169,.819025,.822762,.826387,.829907,.833325,.836647,.839878,.843020,.846079,.849057,.851958,.854786,.857542,.860230,.862854,.865414,.867913,.870355,.872740,.875071,.877350,.879578,.881759,.883893,.885983,.888030,.890035,.892000,.893926,.895813,.897664,.899479,.901260,.903007,.904721,.906403,.908055,.909676,.911269,.912832,.914369,.915878,.917362,.918821,.920256,.921667,.923056,.924422,.925766,.927088,.928390,.929672,.930933,.932175,.933398,.934603,.935789,.936958,.938110,.939244,.940362,.941463,.942549,.943620,.944676,.945717,.946743,.947756,.948755,.949740,.950712,.951671,.952618,.953551,.954473,.955383,.956281,.957167,.958042,.958905,.959758,.960600,.961431,.962252,.963062,.963862,.964652,.965433,.966203,.966964,.967716,.968458,.969191,.969916,.970631,.971339,.972037,.972728,.973410,.974084,.974750,.975409,.976059,.976700,.977334,.977959,.978577,.979187,.979789,.980384,.980971,.981551,.982124,.982689,.983248,.983800,.984345,.984884,.985416,.985942,.986461,.986974,.987478,.987973,.988460,.988938,.989407,.989868,.990322,.990767,.991204,.991634,.992057,.992472,.992880,.993281,.993675,.994062,.994443,.994817,.995185,.995546,.995895,.996231,.996556,.996869,.997171,.997462,.997743,.998015,.998276,.998529,.998764,.998983,.999187,.999377,.999540,.999680,.999800,.999902,.999963,1.00000,.206875,.309193,.376668,.426726,.466340,.498994,.526680,.550644,.571714,.590473,.607341,.622637,.636603,.649431,.661275,.672258,.682484,.692036,.700989,.709401,.717367,.724927,.732117,.738968,.745507,.751759,.757745,.763483,.768992,.774287,.779382,.784289,.789020,.793585,.797995,.802257,.806381,.810373,.814241,.817990,.821628,.825162,.828596,.831934,.835181,.838342,.841419,.844416,.847337,.850185,.852962,.855672,.858318,.860900,.863423,.865888,.868297,.870652,.872956,.875209,.877415,.879575,.881691,.883764,.885796,.887787,.889739,.891654,.893532,.895374,.897182,.898956,.900698,.902408,.904087,.905737,.907357,.908949,.910514,.912052,.913564,.915052,.916515,.917955,.919373,.920768,.922141,.923493,.924824,.926135,.927426,.928698,.929950,.931185,.932401,.933599,.934781,.935945,.937093,.938224,.939340,.940441,.941527,.942598,.943656,.944699,.945728,.946744,.947747,.948737,.949714,.950679,.951632,.952572,.953501,.954418,.955324,.956219,.957103,.957977,.958839,.959691,.960533,.961365,.962187,.962999,.963802,.964595,.965379,.966153,.966919,.967676,.968425,.969164,.969896,.970619,.971334,.972041,.972741,.973432,.974115,.974790,.975457,.976117,.976768,.977412,.978048,.978677,.979298,.979913,.980520,.981120,.981714,.982301,.982881,.983454,.984022,.984582,.985137,.985685,.986225,.986755,.987277,.987791,.988297,.988794,.989284,.989766,.990240,.990706,.991166,.991617,.992062,.992500,.992931,.993355,.993773,.994184,.994589,.994987,.995373,.995746,.996106,.996455,.996793,.997120,.997436,.997741,.998037,.998324,.998591,.998842,.999076,.999295,.999482,.999643,.999781,.999898,.999964,1.00000,.205567,.307266,.374350,.424133,.463539,.496031,.523587,.547445,.568428,.587113,.603921,.619165,.633089,.645881,.657695,.668653,.678859,.688395,.697334,.705737,.713696,.721252,.728439,.735290,.741830,.748085,.754075,.759819,.765336,.770639,.775743,.780660,.785403,.789981,.794403,.798680,.802818,.806825,.810708,.814473,.818128,.821679,.825129,.828484,.831749,.834926,.838021,.841036,.843974,.846840,.849635,.852363,.855026,.857627,.860167,.862650,.865077,.867451,.869772,.872044,.874268,.876447,.878581,.880672,.882722,.884732,.886703,.888636,.890533,.892394,.894221,.896014,.897774,.899503,.901202,.902870,.904509,.906120,.907704,.909260,.910791,.912298,.913780,.915240,.916676,.918090,.919482,.920852,.922202,.923532,.924842,.926132,.927404,.928657,.929892,.931109,.932309,.933492,.934658,.935808,.936943,.938063,.939168,.940258,.941335,.942397,.943446,.944482,.945504,.946514,.947511,.948495,.949468,.950429,.951378,.952315,.953242,.954157,.955061,.955955,.956839,.957712,.958575,.959428,.960272,.961106,.961931,.962747,.963554,.964352,.965141,.965921,.966693,.967457,.968212,.968960,.969699,.970431,.971155,.971872,.972580,.973280,.973973,.974658,.975335,.976005,.976667,.977322,.977970,.978611,.979245,.979872,.980493,.981107,.981714,.982315,.982909,.983498,.984080,.984656,.985223,.985782,.986332,.986874,.987407,.987933,.988451,.988961,.989463,.989958,.990446,.990926,.991400,.991866,.992325,.992778,.993224,.993663,.994096,.994523,.994937,.995338,.995727,.996105,.996471,.996826,.997170,.997504,.997828,.998142,.998437,.998714,.998974,.999218,.999427,.999607,.999762,.999895,.999964,1.00000,.204643,.305902,.372708,.422292,.461548,.493922,.521383,.545161,.566079,.584709,.601470,.616675,.630564,.643327,.655116,.666054,.676241,.685762,.694689,.703081,.711032,.718580,.725763,.732610,.739148,.745402,.751392,.757138,.762656,.767962,.773070,.777992,.782740,.787324,.791753,.796036,.800182,.804197,.808089,.811863,.815527,.819087,.822547,.825912,.829186,.832373,.835478,.838503,.841452,.844327,.847133,.849871,.852545,.855156,.857708,.860202,.862640,.865024,.867356,.869639,.871874,.874064,.876210,.878313,.880375,.882397,.884380,.886325,.888234,.890108,.891947,.893753,.895526,.897268,.898979,.900660,.902313,.903937,.905534,.907104,.908648,.910168,.911665,.913137,.914587,.916015,.917421,.918806,.920170,.921514,.922838,.924142,.925428,.926695,.927945,.929176,.930391,.931588,.932769,.933934,.935083,.936218,.937337,.938443,.939534,.940612,.941676,.942727,.943764,.944789,.945802,.946802,.947790,.948767,.949731,.950685,.951627,.952558,.953478,.954388,.955287,.956177,.957056,.957926,.958786,.959637,.960479,.961311,.962135,.962950,.963756,.964554,.965343,.966124,.966897,.967662,.968419,.969169,.969910,.970645,.971371,.972090,.972800,.973504,.974200,.974888,.975570,.976244,.976911,.977572,.978225,.978872,.979512,.980146,.980773,.981394,.982009,.982618,.983220,.983817,.984405,.984985,.985556,.986119,.986674,.987222,.987762,.988294,.988818,.989336,.989846,.990349,.990845,.991334,.991816,.992292,.992761,.993224,.993680,.994130,.994568,.994993,.995405,.995806,.996196,.996575,.996943,.997300,.997647,.997985,.998303,.998602,.998884,.999149,.999378,.999575,.999745,.999892,.999964,1.00000,.203306,.303931,.370337,.419638,.458679,.490885,.518212,.541880,.562706,.581261,.597957,.613108,.626952,.639677,.651434,.662344,.672509,.682013,.690925,.699305,.707246,.714788,.721965,.728807,.735343,.741595,.747584,.753331,.758850,.764159,.769270,.774197,.778949,.783538,.787974,.792264,.796417,.800440,.804340,.808123,.811797,.815366,.818836,.822212,.825497,.828696,.831813,.834850,.837812,.840700,.843519,.846271,.848959,.851584,.854150,.856658,.859111,.861510,.863858,.866156,.868407,.870612,.872774,.874893,.876971,.879009,.881009,.882971,.884897,.886787,.888643,.890466,.892257,.894016,.895745,.897444,.899114,.900756,.902370,.903958,.905520,.907059,.908573,.910064,.911532,.912979,.914403,.915807,.917190,.918553,.919896,.921219,.922525,.923811,.925080,.926331,.927565,.928782,.929982,.931166,.932336,.933490,.934630,.935756,.936868,.937966,.939050,.940122,.941181,.942227,.943261,.944282,.945292,.946290,.947276,.948251,.949215,.950168,.951110,.952042,.952964,.953876,.954778,.955671,.956554,.957428,.958293,.959149,.959997,.960836,.961666,.962488,.963302,.964107,.964905,.965695,.966477,.967252,.968019,.968778,.969530,.970275,.971012,.971742,.972464,.973180,.973889,.974590,.975285,.975974,.976655,.977331,.978000,.978662,.979318,.979969,.980613,.981251,.981883,.982510,.983128,.983738,.984341,.984936,.985523,.986103,.986675,.987240,.987798,.988349,.988893,.989430,.989960,.990484,.991002,.991512,.992017,.992515,.993008,.993494,.993967,.994429,.994878,.995317,.995743,.996159,.996565,.996960,.997345,.997720,.998075,.998411,.998729,.999030,.999292,.999518,.999715,.999887,.999964,1.00000,.202350,.302523,.368643,.417741,.456631,.488719,.515949,.539540,.560302,.578803,.595455,.610568,.624381,.637080,.648814,.659707,.669857,.679348,.688251,.696624,.704560,.712097,.719270,.726111,.732645,.738897,.744887,.750635,.756157,.761468,.766583,.771513,.776270,.780864,.785305,.789600,.793759,.797789,.801696,.805486,.809167,.812744,.816223,.819607,.822901,.826109,.829235,.832281,.835253,.838152,.840981,.843743,.846441,.849078,.851654,.854174,.856638,.859049,.861408,.863717,.865980,.868197,.870371,.872502,.874591,.876641,.878652,.880626,.882563,.884465,.886333,.888168,.889970,.891740,.893481,.895191,.896872,.898526,.900151,.901751,.903325,.904874,.906401,.907903,.909384,.910842,.912278,.913694,.915089,.916464,.917820,.919156,.920473,.921772,.923054,.924317,.925564,.926793,.928006,.929204,.930386,.931553,.932706,.933845,.934970,.936082,.937180,.938265,.939338,.940398,.941445,.942481,.943505,.944517,.945517,.946506,.947485,.948452,.949409,.950355,.951292,.952218,.953136,.954043,.954942,.955832,.956712,.957584,.958448,.959302,.960149,.960987,.961817,.962639,.963453,.964260,.965059,.965850,.966634,.967411,.968180,.968942,.969697,.970445,.971186,.971920,.972647,.973368,.974082,.974789,.975490,.976185,.976874,.977556,.978232,.978903,.979567,.980226,.980879,.981526,.982166,.982798,.983422,.984040,.984649,.985252,.985848,.986437,.987018,.987594,.988162,.988724,.989279,.989829,.990371,.990908,.991439,.991963,.992482,.992995,.993495,.993984,.994462,.994928,.995383,.995827,.996261,.996685,.997099,.997504,.997888,.998253,.998600,.998930,.999218,.999470,.999690,.999882,.999965,1.00000]
	# Z=16
	      Z16=[.162761,.244293,.298750,.339670,.372466,.399848,.423362,.443975,.462332,.478885,.493961,.507806,.520610,.532522,.543661,.554123,.563988,.573322,.582182,.590614,.598657,.606345,.613710,.620778,.627573,.634116,.640426,.646520,.652412,.658115,.663643,.669006,.674214,.679276,.684201,.688995,.693667,.698223,.702668,.707008,.711247,.715390,.719441,.723404,.727283,.731081,.734803,.738452,.742029,.745539,.748984,.752366,.755688,.758952,.762160,.765315,.768417,.771469,.774473,.777429,.780340,.783206,.786029,.788811,.791552,.794254,.796917,.799544,.802135,.804691,.807214,.809703,.812161,.814587,.816983,.819349,.821687,.823997,.826279,.828535,.830765,.832969,.835149,.837304,.839435,.841543,.843629,.845692,.847734,.849754,.851754,.853734,.855694,.857634,.859556,.861458,.863343,.865210,.867060,.868892,.870708,.872507,.874290,.876057,.877809,.879546,.881268,.882975,.884668,.886347,.888012,.889663,.891301,.892926,.894538,.896137,.897724,.899299,.900862,.902412,.903952,.905480,.906997,.908503,.909998,.911483,.912957,.914422,.915876,.917320,.918754,.920179,.921594,.923000,.924397,.925784,.927163,.928533,.929894,.931247,.932591,.933927,.935254,.936574,.937885,.939189,.940484,.941772,.943053,.944326,.945591,.946849,.948100,.949344,.950581,.951811,.953034,.954251,.955460,.956663,.957860,.959050,.960233,.961409,.962580,.963744,.964901,.966053,.967198,.968338,.969471,.970599,.971721,.972837,.973947,.975052,.976151,.977244,.978333,.979415,.980493,.981565,.982631,.983692,.984749,.985799,.986845,.987886,.988921,.989952,.990978,.991999,.993015,.994027,.995034,.996036,.997033,.998027,.999015,1.00000,.166502,.249867,.305521,.347318,.380802,.408744,.432727,.453741,.472446,.489304,.504650,.518736,.531757,.543865,.555181,.565804,.575816,.585285,.594268,.602813,.610958,.618740,.626189,.633334,.640199,.646806,.653173,.659317,.665255,.671000,.676564,.681958,.687194,.692280,.697224,.702035,.706720,.711286,.715738,.720083,.724323,.728464,.732509,.736465,.740334,.744120,.747827,.751458,.755016,.758504,.761925,.765282,.768576,.771811,.774988,.778109,.781176,.784192,.787158,.790076,.792945,.795769,.798548,.801284,.803978,.806631,.809245,.811821,.814359,.816861,.819328,.821762,.824162,.826529,.828865,.831171,.833447,.835694,.837912,.840103,.842267,.844404,.846516,.848602,.850664,.852701,.854715,.856706,.858674,.860621,.862546,.864450,.866333,.868196,.870040,.871864,.873669,.875456,.877224,.878975,.880709,.882425,.884125,.885808,.887475,.889126,.890761,.892381,.893987,.895577,.897154,.898716,.900264,.901798,.903319,.904827,.906322,.907804,.909273,.910730,.912176,.913609,.915031,.916441,.917841,.919229,.920606,.921973,.923329,.924675,.926011,.927337,.928653,.929959,.931255,.932542,.933820,.935089,.936348,.937599,.938840,.940074,.941298,.942515,.943723,.944923,.946114,.947298,.948474,.949642,.950803,.951956,.953102,.954240,.955371,.956495,.957612,.958722,.959825,.960921,.962010,.963093,.964169,.965239,.966303,.967360,.968411,.969455,.970494,.971526,.972553,.973573,.974588,.975597,.976601,.977598,.978591,.979577,.980559,.981534,.982505,.983470,.984431,.985386,.986335,.987280,.988220,.989155,.990085,.991011,.991931,.992847,.993758,.994664,.995565,.996461,.997353,.998240,.999122,1.00000,.170750,.256236,.313299,.356152,.390478,.419120,.443702,.465239,.484407,.501681,.517405,.531837,.545176,.557578,.569168,.580048,.590301,.599997,.609194,.617943,.626274,.634226,.641831,.649119,.656114,.662840,.669316,.675559,.681587,.687414,.693052,.698513,.703808,.708947,.713938,.718790,.723511,.728107,.732585,.736950,.741205,.745355,.749405,.753360,.757223,.760999,.764692,.768304,.771840,.775302,.778693,.782016,.785274,.788468,.791602,.794677,.797695,.800659,.803570,.806430,.809240,.812001,.814716,.817385,.820010,.822592,.825133,.827634,.830095,.832519,.834906,.837257,.839573,.841856,.844105,.846322,.848508,.850664,.852789,.854886,.856955,.858996,.861010,.862998,.864961,.866898,.868811,.870700,.872566,.874409,.876229,.878028,.879806,.881562,.883298,.885015,.886711,.888388,.890047,.891687,.893309,.894913,.896500,.898069,.899622,.901159,.902679,.904184,.905673,.907146,.908605,.910049,.911479,.912894,.914296,.915683,.917058,.918419,.919767,.921102,.922425,.923736,.925035,.926322,.927597,.928861,.930114,.931356,.932587,.933807,.935017,.936216,.937405,.938584,.939753,.940912,.942062,.943202,.944333,.945455,.946567,.947671,.948767,.949853,.950931,.952001,.953063,.954117,.955162,.956200,.957230,.958252,.959267,.960274,.961274,.962267,.963252,.964230,.965202,.966166,.967124,.968075,.969019,.969957,.970889,.971815,.972734,.973647,.974554,.975455,.976350,.977239,.978122,.979000,.979872,.980738,.981599,.982454,.983304,.984149,.984988,.985822,.986651,.987474,.988293,.989107,.989915,.990719,.991518,.992312,.993101,.993886,.994666,.995441,.996212,.996978,.997740,.998498,.999251,1.00000,.175354,.263091,.321623,.365552,.400719,.430045,.455199,.477224,.496815,.514459,.530510,.545234,.558834,.571471,.583275,.594348,.604776,.614633,.623977,.632859,.641308,.649363,.657058,.664423,.671485,.678266,.684788,.691069,.697125,.702973,.708624,.714092,.719388,.724521,.729502,.734338,.739037,.743607,.748054,.752384,.756600,.760708,.764712,.768617,.772428,.776148,.779782,.783333,.786804,.790200,.793522,.796773,.799957,.803075,.806131,.809126,.812063,.814943,.817768,.820541,.823263,.825935,.828559,.831137,.833670,.836159,.838606,.841011,.843377,.845704,.847994,.850247,.852464,.854647,.856796,.858912,.860997,.863050,.865073,.867067,.869032,.870969,.872880,.874764,.876622,.878455,.880263,.882048,.883809,.885547,.887262,.888956,.890628,.892279,.893910,.895520,.897111,.898683,.900235,.901769,.903285,.904784,.906264,.907728,.909175,.910606,.912021,.913420,.914803,.916172,.917525,.918864,.920188,.921498,.922795,.924077,.925347,.926603,.927846,.929076,.930295,.931501,.932695,.933878,.935049,.936209,.937358,.938496,.939624,.940740,.941847,.942943,.944029,.945105,.946171,.947228,.948275,.949312,.950341,.951360,.952371,.953373,.954366,.955351,.956328,.957296,.958257,.959209,.960153,.961090,.962019,.962940,.963854,.964761,.965660,.966552,.967437,.968316,.969187,.970051,.970909,.971760,.972605,.973444,.974276,.975102,.975922,.976736,.977544,.978346,.979143,.979933,.980718,.981497,.982271,.983039,.983802,.984559,.985311,.986058,.986800,.987537,.988268,.988995,.989717,.990434,.991147,.991854,.992558,.993256,.993950,.994639,.995324,.996005,.996682,.997354,.998021,.998685,.999345,1.00000,.182024,.272973,.333564,.378975,.415279,.445511,.471406,.494048,.514161,.532250,.548683,.563736,.577621,.590506,.602523,.613782,.624370,.634364,.643825,.652807,.661335,.669452,.677193,.684590,.691669,.698456,.704973,.711238,.717269,.723082,.728691,.734108,.739345,.744414,.749323,.754082,.758698,.763179,.767533,.771765,.775881,.779884,.783782,.787578,.791277,.794884,.798402,.801836,.805188,.808462,.811661,.814787,.817845,.820836,.823763,.826628,.829433,.832180,.834872,.837510,.840097,.842634,.845122,.847564,.849960,.852312,.854622,.856890,.859119,.861308,.863460,.865575,.867654,.869698,.871709,.873687,.875633,.877548,.879432,.881287,.883114,.884912,.886685,.888430,.890150,.891846,.893516,.895163,.896787,.898387,.899966,.901522,.903058,.904572,.906067,.907541,.908996,.910431,.911848,.913247,.914628,.915992,.917339,.918670,.919984,.921283,.922566,.923834,.925087,.926325,.927549,.928758,.929954,.931136,.932305,.933460,.934603,.935733,.936851,.937956,.939049,.940131,.941202,.942261,.943309,.944346,.945373,.946389,.947395,.948390,.949376,.950352,.951318,.952274,.953221,.954159,.955088,.956008,.956919,.957821,.958715,.959600,.960477,.961346,.962207,.963060,.963906,.964744,.965574,.966397,.967212,.968020,.968821,.969615,.970402,.971183,.971956,.972723,.973483,.974237,.974984,.975726,.976461,.977190,.977913,.978630,.979342,.980047,.980747,.981442,.982131,.982814,.983492,.984165,.984832,.985494,.986151,.986803,.987450,.988092,.988730,.989362,.989990,.990613,.991232,.991846,.992456,.993061,.993662,.994259,.994851,.995439,.996023,.996603,.997179,.997751,.998319,.998883,.999444,1.00000,.194385,.291164,.355408,.403385,.441604,.473317,.500383,.523966,.544839,.563544,.580476,.595932,.610137,.623272,.635479,.646874,.657553,.667596,.677069,.686031,.694523,.702587,.710262,.717580,.724569,.731255,.737661,.743807,.749711,.755389,.760856,.766125,.771209,.776118,.780863,.785453,.789896,.794199,.798372,.802419,.806346,.810159,.813862,.817462,.820962,.824367,.827682,.830910,.834055,.837120,.840108,.843023,.845867,.848643,.851354,.854002,.856589,.859118,.861590,.864008,.866373,.868688,.870954,.873172,.875345,.877473,.879558,.881602,.883605,.885570,.887496,.889385,.891238,.893057,.894841,.896593,.898313,.900002,.901660,.903289,.904890,.906465,.908013,.909535,.911032,.912505,.913955,.915381,.916784,.918166,.919525,.920864,.922182,.923480,.924758,.926017,.927257,.928478,.929682,.930868,.932038,.933191,.934328,.935450,.936556,.937647,.938724,.939786,.940835,.941869,.942890,.943897,.944892,.945874,.946843,.947800,.948744,.949677,.950598,.951508,.952407,.953295,.954172,.955039,.955895,.956742,.957578,.958405,.959223,.960030,.960829,.961618,.962399,.963171,.963934,.964688,.965434,.966172,.966902,.967623,.968337,.969043,.969742,.970433,.971116,.971793,.972462,.973124,.973779,.974427,.975069,.975704,.976332,.976954,.977570,.978179,.978782,.979379,.979970,.980555,.981134,.981708,.982276,.982839,.983396,.983947,.984494,.985035,.985571,.986102,.986628,.987149,.987665,.988177,.988683,.989185,.989682,.990175,.990663,.991147,.991626,.992101,.992573,.993039,.993502,.993961,.994416,.994867,.995315,.995758,.996198,.996634,.997066,.997495,.997921,.998343,.998762,.999178,.999591,1.00000,.205020,.306769,.374098,.424219,.464019,.496939,.524947,.549272,.570733,.589905,.607205,.622945,.637366,.650658,.662972,.674430,.685135,.695169,.704605,.713503,.721915,.729885,.737454,.744654,.751516,.758066,.764326,.770320,.776064,.781576,.786872,.791964,.796866,.801589,.806144,.810540,.814786,.818889,.822859,.826701,.830423,.834030,.837529,.840925,.844222,.847424,.850537,.853563,.856507,.859371,.862160,.864875,.867521,.870100,.872614,.875066,.877458,.879792,.882070,.884295,.886469,.888593,.890670,.892700,.894686,.896629,.898530,.900391,.902212,.903995,.905742,.907453,.909129,.910771,.912381,.913959,.915506,.917023,.918510,.919970,.921402,.922808,.924189,.925545,.926876,.928184,.929469,.930731,.931971,.933190,.934388,.935566,.936724,.937862,.938982,.940083,.941166,.942231,.943278,.944309,.945324,.946323,.947306,.948274,.949228,.950166,.951091,.952001,.952898,.953782,.954652,.955510,.956355,.957187,.958008,.958816,.959613,.960399,.961173,.961937,.962690,.963432,.964164,.964886,.965598,.966301,.966994,.967678,.968352,.969017,.969674,.970322,.970961,.971592,.972215,.972830,.973436,.974035,.974626,.975210,.975786,.976354,.976916,.977471,.978018,.978559,.979094,.979621,.980142,.980657,.981165,.981668,.982164,.982654,.983138,.983617,.984089,.984557,.985018,.985474,.985925,.986370,.986810,.987244,.987674,.988098,.988517,.988931,.989340,.989745,.990144,.990539,.990930,.991316,.991697,.992074,.992447,.992815,.993179,.993539,.993895,.994247,.994595,.994940,.995280,.995617,.995951,.996280,.996607,.996929,.997249,.997566,.997880,.998191,.998499,.998805,.999108,.999408,.999705,1.00000,.214663,.320905,.391014,.443063,.484279,.518277,.547123,.572107,.594089,.613673,.631295,.647285,.661896,.675325,.687731,.699244,.709970,.719997,.729400,.738243,.746584,.754471,.761944,.769038,.775784,.782209,.788337,.794191,.799789,.805150,.810288,.815219,.819956,.824509,.828891,.833111,.837178,.841100,.844886,.848542,.852077,.855498,.858811,.862019,.865129,.868145,.871070,.873909,.876666,.879344,.881947,.884477,.886938,.889332,.891661,.893929,.896138,.898290,.900386,.902430,.904423,.906369,.908267,.910121,.911932,.913700,.915428,.917116,.918766,.920380,.921957,.923500,.925009,.926486,.927931,.929346,.930730,.932086,.933414,.934714,.935988,.937237,.938462,.939662,.940839,.941994,.943127,.944238,.945328,.946397,.947447,.948477,.949488,.950481,.951456,.952413,.953353,.954276,.955183,.956074,.956949,.957809,.958654,.959484,.960301,.961103,.961892,.962667,.963430,.964180,.964917,.965642,.966355,.967056,.967746,.968425,.969093,.969750,.970397,.971033,.971659,.972274,.972880,.973476,.974063,.974640,.975208,.975767,.976317,.976858,.977392,.977916,.978433,.978941,.979442,.979935,.980421,.980899,.981369,.981833,.982290,.982739,.983182,.983618,.984047,.984470,.984886,.985296,.985700,.986098,.986490,.986876,.987257,.987631,.988001,.988364,.988723,.989076,.989424,.989767,.990105,.990438,.990765,.991088,.991405,.991718,.992027,.992330,.992629,.992924,.993214,.993499,.993781,.994058,.994332,.994601,.994866,.995127,.995385,.995639,.995888,.996135,.996377,.996616,.996851,.997082,.997310,.997535,.997756,.997974,.998189,.998401,.998609,.998815,.999019,.999220,.999418,.999614,.999808,1.00000,.225895,.337286,.410523,.464694,.507433,.542558,.572250,.597873,.620335,.640272,.658147,.674307,.689017,.702489,.714889,.726355,.736997,.746909,.756170,.764847,.773012,.780714,.787993,.794887,.801426,.807638,.813550,.819183,.824557,.829690,.834598,.839297,.843799,.848117,.852262,.856244,.860072,.863755,.867301,.870717,.874015,.877200,.880279,.883256,.886135,.888923,.891623,.894238,.896773,.899231,.901616,.903930,.906176,.908358,.910477,.912536,.914538,.916485,.918379,.920221,.922016,.923764,.925468,.927129,.928748,.930327,.931868,.933371,.934838,.936270,.937668,.939033,.940366,.941668,.942941,.944184,.945400,.946588,.947750,.948886,.949997,.951084,.952147,.953188,.954206,.955202,.956178,.957133,.958069,.958985,.959882,.960761,.961621,.962465,.963291,.964101,.964895,.965673,.966436,.967184,.967917,.968635,.969340,.970030,.970707,.971371,.972022,.972660,.973287,.973901,.974503,.975095,.975675,.976244,.976802,.977351,.977889,.978417,.978935,.979444,.979943,.980432,.980912,.981383,.981846,.982299,.982744,.983180,.983609,.984029,.984442,.984847,.985244,.985635,.986018,.986394,.986763,.987125,.987481,.987831,.988173,.988510,.988840,.989163,.989481,.989793,.990099,.990399,.990693,.990982,.991266,.991544,.991818,.992086,.992349,.992608,.992862,.993111,.993355,.993595,.993831,.994061,.994286,.994507,.994724,.994936,.995143,.995347,.995546,.995741,.995933,.996120,.996304,.996483,.996660,.996832,.997002,.997167,.997330,.997489,.997645,.997797,.997945,.998090,.998232,.998370,.998505,.998637,.998766,.998892,.999015,.999135,.999252,.999367,.999478,.999588,.999694,.999799,.999900,1.00000,.229467,.342472,.416673,.471485,.514673,.550122,.580048,.605839,.628419,.648434,.666356,.682536,.697247,.710701,.723069,.734490,.745076,.754924,.764113,.772711,.780796,.788418,.795616,.802428,.808886,.815017,.820848,.826399,.831692,.836744,.841572,.846191,.850613,.854852,.858918,.862821,.866571,.870177,.873646,.876986,.880208,.883320,.886326,.889232,.892041,.894760,.897392,.899940,.902410,.904803,.907124,.909375,.911559,.913680,.915739,.917740,.919683,.921573,.923409,.925196,.926935,.928629,.930279,.931886,.933453,.934980,.936468,.937920,.939337,.940718,.942067,.943383,.944668,.945922,.947147,.948344,.949513,.950655,.951771,.952862,.953928,.954971,.955990,.956987,.957962,.958915,.959848,.960761,.961654,.962528,.963384,.964221,.965041,.965844,.966631,.967401,.968155,.968894,.969618,.970327,.971021,.971702,.972368,.973021,.973660,.974287,.974901,.975502,.976092,.976670,.977236,.977792,.978336,.978870,.979393,.979907,.980410,.980904,.981388,.981863,.982328,.982784,.983230,.983668,.984097,.984518,.984930,.985333,.985729,.986117,.986498,.986871,.987237,.987595,.987947,.988292,.988630,.988961,.989287,.989606,.989918,.990224,.990523,.990817,.991104,.991385,.991660,.991930,.992194,.992453,.992707,.992955,.993198,.993437,.993670,.993899,.994123,.994343,.994558,.994769,.994975,.995176,.995372,.995563,.995750,.995933,.996111,.996285,.996455,.996622,.996784,.996942,.997097,.997248,.997395,.997539,.997680,.997817,.997952,.998083,.998210,.998333,.998453,.998570,.998682,.998792,.998898,.999002,.999102,.999199,.999293,.999384,.999471,.999556,.999637,.999716,.999791,.999864,.999933,1.00000,.228060,.340384,.414147,.468642,.511585,.546836,.576599,.602252,.624714,.644627,.662459,.678560,.693201,.706592,.718904,.730274,.740814,.750621,.759772,.768335,.776395,.783998,.791185,.797992,.804449,.810585,.816425,.821989,.827299,.832371,.837222,.841866,.846317,.850586,.854684,.858621,.862407,.866050,.869558,.872938,.876201,.879354,.882402,.885351,.888203,.890966,.893641,.896234,.898748,.901186,.903552,.905848,.908078,.910244,.912349,.914395,.916384,.918319,.920202,.922034,.923818,.925557,.927252,.928903,.930514,.932085,.933617,.935113,.936572,.937996,.939387,.940745,.942072,.943367,.944634,.945871,.947080,.948263,.949419,.950549,.951655,.952737,.953794,.954830,.955843,.956834,.957804,.958754,.959684,.960595,.961487,.962360,.963216,.964054,.964876,.965681,.966469,.967242,.968000,.968743,.969471,.970184,.970883,.971568,.972240,.972898,.973544,.974177,.974798,.975406,.976004,.976589,.977164,.977727,.978280,.978822,.979355,.979877,.980389,.980892,.981385,.981869,.982343,.982807,.983263,.983710,.984148,.984577,.984999,.985412,.985817,.986215,.986605,.986987,.987363,.987731,.988092,.988447,.988795,.989137,.989471,.989798,.990119,.990433,.990740,.991041,.991336,.991625,.991908,.992185,.992457,.992723,.992983,.993239,.993489,.993734,.993974,.994209,.994440,.994666,.994886,.995100,.995310,.995513,.995712,.995906,.996095,.996279,.996458,.996633,.996803,.996970,.997132,.997290,.997444,.997594,.997740,.997883,.998023,.998158,.998289,.998416,.998538,.998656,.998769,.998879,.998985,.999087,.999185,.999280,.999371,.999457,.999539,.999618,.999692,.999761,.999827,.999889,.999946,1.00000,.225741,.336968,.410039,.464045,.506619,.541582,.571113,.596577,.618882,.638663,.656385,.672393,.686955,.700279,.712534,.723856,.734357,.744130,.753253,.761795,.769842,.777441,.784632,.791449,.797923,.804082,.809949,.815546,.820891,.826003,.830898,.835588,.840087,.844408,.848560,.852553,.856397,.860099,.863668,.867110,.870436,.873652,.876763,.879774,.882691,.885516,.888256,.890912,.893489,.895991,.898420,.900780,.903073,.905302,.907470,.909578,.911630,.913627,.915572,.917465,.919311,.921111,.922865,.924577,.926246,.927876,.929466,.931018,.932535,.934015,.935462,.936875,.938257,.939607,.940927,.942217,.943480,.944714,.945922,.947104,.948261,.949393,.950500,.951585,.952647,.953687,.954706,.955703,.956681,.957638,.958577,.959496,.960398,.961281,.962147,.962996,.963829,.964646,.965447,.966232,.967003,.967758,.968499,.969225,.969938,.970637,.971323,.971996,.972656,.973304,.973940,.974565,.975177,.975779,.976369,.976949,.977518,.978077,.978626,.979165,.979694,.980213,.980722,.981222,.981712,.982193,.982665,.983129,.983584,.984031,.984470,.984900,.985323,.985738,.986146,.986546,.986940,.987326,.987705,.988078,.988443,.988800,.989151,.989495,.989832,.990162,.990486,.990804,.991115,.991420,.991719,.992012,.992300,.992582,.992859,.993130,.993396,.993657,.993913,.994164,.994409,.994648,.994880,.995107,.995327,.995543,.995753,.995957,.996157,.996351,.996541,.996726,.996906,.997082,.997253,.997420,.997583,.997742,.997897,.998048,.998193,.998333,.998467,.998596,.998720,.998839,.998954,.999064,.999170,.999272,.999368,.999459,.999545,.999626,.999702,.999771,.999836,.999896,.999951,1.00000,.223760,.334056,.406546,.460144,.502416,.537144,.566489,.591803,.613986,.633667,.651307,.667247,.681753,.695032,.707251,.718544,.729022,.738778,.747889,.756423,.764468,.772070,.779268,.786096,.792585,.798761,.804649,.810269,.815640,.820780,.825704,.830426,.834958,.839313,.843501,.847531,.851413,.855154,.858763,.862246,.865613,.868871,.872024,.875079,.878038,.880907,.883690,.886391,.889013,.891559,.894033,.896438,.898776,.901050,.903263,.905417,.907515,.909557,.911547,.913486,.915377,.917222,.919022,.920778,.922493,.924167,.925802,.927399,.928960,.930485,.931975,.933433,.934858,.936252,.937615,.938949,.940254,.941532,.942783,.944007,.945206,.946379,.947529,.948655,.949758,.950838,.951897,.952935,.953952,.954949,.955927,.956885,.957825,.958747,.959651,.960538,.961409,.962262,.963100,.963922,.964729,.965520,.966297,.967059,.967807,.968542,.969263,.969970,.970665,.971347,.972017,.972675,.973322,.973956,.974580,.975192,.975794,.976385,.976966,.977537,.978097,.978648,.979188,.979719,.980241,.980753,.981256,.981750,.982235,.982712,.983180,.983641,.984093,.984537,.984974,.985404,.985825,.986240,.986648,.987048,.987442,.987827,.988205,.988576,.988940,.989298,.989648,.989992,.990330,.990661,.990986,.991305,.991618,.991925,.992227,.992523,.992814,.993099,.993379,.993654,.993922,.994183,.994438,.994686,.994929,.995165,.995395,.995619,.995838,.996051,.996259,.996462,.996660,.996853,.997041,.997225,.997404,.997578,.997749,.997915,.998074,.998227,.998374,.998514,.998650,.998779,.998903,.999023,.999137,.999247,.999350,.999447,.999538,.999624,.999702,.999774,.999840,.999900,.999953,1.00000,.222053,.331547,.403536,.456783,.498792,.533317,.562501,.587685,.609762,.629357,.646925,.662806,.677264,.690503,.702690,.713957,.724415,.734156,.743256,.751783,.759826,.767430,.774634,.781472,.787974,.794166,.800072,.805712,.811107,.816271,.821222,.825971,.830533,.834919,.839139,.843202,.847118,.850894,.854539,.858058,.861462,.864757,.867948,.871040,.874037,.876945,.879766,.882505,.885165,.887750,.890262,.892706,.895082,.897395,.899647,.901839,.903975,.906056,.908084,.910061,.911991,.913873,.915711,.917505,.919257,.920969,.922641,.924276,.925873,.927435,.928962,.930456,.931918,.933348,.934747,.936117,.937457,.938770,.940056,.941315,.942549,.943757,.944941,.946101,.947238,.948353,.949445,.950517,.951567,.952597,.953608,.954599,.955571,.956525,.957461,.958380,.959282,.960167,.961036,.961889,.962727,.963549,.964356,.965149,.965927,.966691,.967442,.968179,.968903,.969615,.970314,.971001,.971676,.972339,.972990,.973631,.974261,.974880,.975488,.976086,.976674,.977252,.977819,.978377,.978925,.979463,.979993,.980513,.981024,.981527,.982022,.982508,.982985,.983455,.983917,.984372,.984818,.985258,.985690,.986115,.986533,.986942,.987344,.987739,.988127,.988508,.988881,.989248,.989609,.989963,.990310,.990652,.990987,.991316,.991640,.991957,.992270,.992576,.992877,.993173,.993462,.993744,.994018,.994286,.994547,.994802,.995050,.995293,.995529,.995760,.995985,.996205,.996419,.996628,.996832,.997031,.997225,.997415,.997600,.997780,.997953,.998119,.998278,.998430,.998576,.998715,.998849,.998977,.999100,.999218,.999328,.999431,.999528,.999618,.999700,.999774,.999841,.999902,.999955,1.00000,.219279,.327525,.398772,.451528,.493196,.527479,.556490,.581552,.603547,.623090,.640631,.656506,.670973,.684237,.696458,.707771,.718282,.728084,.737251,.745849,.753965,.761643,.768921,.775833,.782410,.788677,.794658,.800374,.805843,.811083,.816108,.820933,.825570,.830030,.834324,.838461,.842451,.846301,.850018,.853611,.857086,.860449,.863707,.866864,.869925,.872894,.875775,.878573,.881290,.883931,.886498,.888995,.891423,.893787,.896088,.898329,.900512,.902640,.904713,.906735,.908708,.910634,.912513,.914348,.916140,.917891,.919602,.921274,.922909,.924507,.926070,.927598,.929094,.930557,.931990,.933392,.934764,.936108,.937425,.938714,.939978,.941216,.942430,.943620,.944787,.945931,.947053,.948154,.949233,.950293,.951333,.952353,.953354,.954337,.955302,.956250,.957180,.958094,.958991,.959872,.960738,.961589,.962424,.963245,.964052,.964845,.965624,.966389,.967142,.967882,.968610,.969325,.970028,.970720,.971400,.972069,.972727,.973374,.974011,.974638,.975253,.975859,.976454,.977039,.977615,.978181,.978737,.979285,.979823,.980352,.980873,.981386,.981890,.982386,.982873,.983354,.983826,.984291,.984748,.985198,.985641,.986075,.986501,.986920,.987332,.987736,.988133,.988523,.988906,.989283,.989652,.990016,.990373,.990724,.991069,.991408,.991741,.992068,.992390,.992706,.993014,.993315,.993609,.993895,.994174,.994447,.994713,.994972,.995225,.995472,.995713,.995948,.996178,.996401,.996620,.996833,.997041,.997245,.997443,.997636,.997822,.997999,.998170,.998333,.998489,.998639,.998782,.998919,.999051,.999177,.999295,.999406,.999509,.999606,.999692,.999770,.999840,.999903,.999956,1.00000,.217039,.324224,.394802,.447084,.488396,.522399,.551185,.576064,.597907,.617323,.634757,.650542,.664933,.678132,.690300,.701567,.712041,.721811,.730953,.739531,.747633,.755304,.762580,.769495,.776080,.782358,.788355,.794089,.799580,.804844,.809897,.814751,.819419,.823913,.828242,.832416,.836444,.840333,.844092,.847726,.851244,.854652,.857954,.861155,.864262,.867276,.870204,.873048,.875812,.878500,.881115,.883659,.886136,.888547,.890897,.893186,.895418,.897594,.899716,.901787,.903808,.905782,.907711,.909594,.911435,.913235,.914994,.916715,.918398,.920045,.921656,.923233,.924777,.926288,.927769,.929218,.930639,.932030,.933394,.934731,.936041,.937326,.938587,.939824,.941037,.942227,.943396,.944542,.945668,.946773,.947858,.948924,.949970,.950998,.952007,.952999,.953974,.954932,.955873,.956798,.957707,.958601,.959480,.960344,.961193,.962028,.962850,.963658,.964453,.965234,.966004,.966760,.967505,.968238,.968959,.969668,.970367,.971054,.971731,.972398,.973053,.973698,.974333,.974957,.975572,.976176,.976772,.977357,.977934,.978502,.979061,.979611,.980152,.980686,.981211,.981728,.982237,.982739,.983233,.983719,.984197,.984667,.985129,.985584,.986031,.986470,.986902,.987326,.987744,.988154,.988558,.988956,.989346,.989730,.990108,.990480,.990846,.991206,.991560,.991908,.992248,.992580,.992904,.993220,.993529,.993831,.994126,.994414,.994695,.994969,.995237,.995499,.995755,.996005,.996249,.996487,.996720,.996948,.997170,.997387,.997595,.997794,.997985,.998168,.998343,.998510,.998671,.998824,.998972,.999113,.999244,.999366,.999480,.999586,.999681,.999764,.999838,.999904,.999957,1.00000,.215238,.321573,.391618,.443526,.484556,.518340,.546953,.571691,.593417,.612738,.630093,.645812,.660149,.673302,.685433,.696670,.707119,.716871,.725999,.734567,.742664,.750331,.757609,.764528,.771119,.777407,.783414,.789162,.794668,.799949,.805020,.809893,.814582,.819098,.823450,.827649,.831702,.835617,.839402,.843064,.846610,.850047,.853379,.856611,.859748,.862795,.865755,.868632,.871429,.874151,.876800,.879378,.881890,.884337,.886722,.889047,.891314,.893526,.895685,.897792,.899850,.901861,.903826,.905746,.907624,.909460,.911257,.913014,.914734,.916417,.918065,.919679,.921260,.922808,.924325,.925811,.927268,.928696,.930096,.931469,.932816,.934137,.935434,.936706,.937956,.939182,.940386,.941569,.942730,.943870,.944991,.946092,.947173,.948236,.949281,.950308,.951317,.952309,.953285,.954245,.955188,.956116,.957029,.957927,.958810,.959679,.960534,.961376,.962204,.963019,.963822,.964612,.965389,.966155,.966908,.967651,.968382,.969102,.969811,.970509,.971196,.971873,.972540,.973196,.973842,.974478,.975104,.975722,.976329,.976928,.977518,.978099,.978671,.979235,.979790,.980338,.980877,.981409,.981933,.982449,.982957,.983457,.983948,.984432,.984907,.985376,.985836,.986290,.986736,.987175,.987607,.988032,.988451,.988863,.989268,.989667,.990060,.990447,.990828,.991203,.991570,.991928,.992278,.992620,.992954,.993280,.993600,.993912,.994217,.994515,.994807,.995092,.995370,.995643,.995909,.996169,.996424,.996673,.996916,.997154,.997382,.997600,.997810,.998010,.998202,.998386,.998562,.998731,.998893,.999048,.999192,.999326,.999450,.999565,.999667,.999756,.999835,.999904,.999958,1.00000,.212161,.317035,.386156,.437408,.477943,.511338,.539637,.564117,.585630,.604771,.621974,.637565,.651792,.664853,.676905,.688075,.698468,.708173,.717262,.725798,.733871,.741523,.748791,.755708,.762301,.768596,.774615,.780379,.785905,.791210,.796307,.801210,.805932,.810482,.814871,.819109,.823203,.827162,.830991,.834699,.838293,.841778,.845160,.848443,.851632,.854731,.857745,.860676,.863528,.866305,.869010,.871645,.874213,.876718,.879160,.881543,.883869,.886140,.888358,.890524,.892642,.894712,.896737,.898718,.900657,.902554,.904411,.906230,.908011,.909756,.911465,.913141,.914783,.916392,.917971,.919519,.921037,.922527,.923989,.925423,.926832,.928215,.929573,.930907,.932218,.933506,.934771,.936015,.937238,.938439,.939621,.940783,.941925,.943049,.944155,.945242,.946312,.947365,.948400,.949420,.950423,.951411,.952384,.953342,.954285,.955214,.956128,.957029,.957917,.958791,.959653,.960502,.961338,.962162,.962975,.963775,.964565,.965343,.966110,.966866,.967611,.968346,.969070,.969783,.970487,.971180,.971864,.972538,.973202,.973858,.974504,.975141,.975770,.976390,.977001,.977604,.978199,.978786,.979365,.979937,.980499,.981054,.981600,.982138,.982668,.983190,.983705,.984212,.984712,.985204,.985690,.986168,.986639,.987104,.987562,.988013,.988458,.988897,.989329,.989756,.990173,.990581,.990981,.991373,.991756,.992132,.992500,.992860,.993212,.993557,.993895,.994226,.994551,.994868,.995179,.995484,.995782,.996074,.996361,.996641,.996910,.997169,.997416,.997654,.997883,.998102,.998312,.998514,.998707,.998893,.999065,.999225,.999374,.999511,.999631,.999735,.999825,.999904,.999960,1.00000,.210182,.314111,.382631,.433453,.473661,.506797,.534886,.559191,.580558,.599575,.616672,.632170,.646319,.659312,.671304,.682423,.692772,.702438,.711493,.720001,.728052,.735686,.742940,.749847,.756435,.762728,.768748,.774516,.780048,.785361,.790470,.795386,.800122,.804689,.809097,.813355,.817470,.821451,.825304,.829037,.832657,.836168,.839578,.842889,.846107,.849236,.852280,.855242,.858126,.860936,.863673,.866341,.868943,.871482,.873959,.876377,.878738,.881044,.883297,.885499,.887653,.889760,.891822,.893839,.895815,.897750,.899644,.901501,.903320,.905102,.906850,.908564,.910244,.911892,.913509,.915096,.916653,.918181,.919682,.921155,.922603,.924025,.925422,.926795,.928145,.929473,.930778,.932061,.933323,.934564,.935785,.936987,.938169,.939332,.940477,.941604,.942714,.943806,.944881,.945940,.946984,.948011,.949023,.950021,.951003,.951972,.952926,.953867,.954794,.955708,.956609,.957498,.958374,.959237,.960089,.960929,.961758,.962575,.963382,.964177,.964962,.965735,.966498,.967251,.967994,.968727,.969449,.970163,.970866,.971561,.972246,.972923,.973590,.974249,.974899,.975541,.976175,.976801,.977419,.978029,.978630,.979223,.979808,.980384,.980953,.981513,.982066,.982612,.983150,.983680,.984204,.984720,.985230,.985732,.986228,.986717,.987200,.987676,.988146,.988610,.989064,.989510,.989947,.990375,.990796,.991207,.991611,.992007,.992396,.992777,.993150,.993517,.993876,.994228,.994574,.994913,.995246,.995572,.995892,.996206,.996508,.996798,.997077,.997345,.997603,.997851,.998090,.998319,.998540,.998752,.998949,.999132,.999302,.999460,.999596,.999713,.999814,.999902,.999961,1.00000,.207706,.310450,.378214,.428494,.468288,.501096,.528917,.553000,.574179,.593036,.609995,.625376,.639421,.652324,.664238,.675288,.685577,.695191,.704202,.712670,.720687,.728294,.735526,.742416,.748990,.755274,.761289,.767054,.772587,.777904,.783019,.787943,.792691,.797271,.801693,.805967,.810100,.814101,.817976,.821731,.825375,.828912,.832348,.835687,.838934,.842093,.845168,.848162,.851079,.853922,.856694,.859397,.862035,.864610,.867124,.869580,.871979,.874324,.876616,.878858,.881052,.883200,.885303,.887362,.889380,.891357,.893295,.895195,.897057,.898884,.900676,.902434,.904160,.905853,.907515,.909148,.910750,.912325,.913871,.915391,.916885,.918354,.919798,.921219,.922616,.923991,.925343,.926674,.927985,.929274,.930543,.931793,.933024,.934236,.935429,.936605,.937763,.938904,.940028,.941136,.942228,.943305,.944367,.945413,.946446,.947464,.948468,.949458,.950436,.951400,.952351,.953289,.954216,.955130,.956032,.956922,.957801,.958669,.959526,.960372,.961207,.962031,.962845,.963649,.964442,.965226,.966000,.966764,.967519,.968265,.969001,.969729,.970448,.971158,.971860,.972553,.973239,.973916,.974585,.975246,.975899,.976544,.977180,.977808,.978429,.979042,.979647,.980244,.980834,.981417,.981993,.982561,.983123,.983678,.984226,.984767,.985302,.985830,.986353,.986868,.987375,.987873,.988362,.988843,.989315,.989780,.990236,.990684,.991124,.991557,.991982,.992401,.992811,.993215,.993612,.994002,.994386,.994763,.995134,.995498,.995850,.996189,.996516,.996832,.997137,.997431,.997715,.997989,.998253,.998508,.998746,.998967,.999174,.999366,.999531,.999672,.999794,.999898,.999961,1.00000,.206212,.308235,.375537,.425484,.465022,.497625,.525276,.549218,.570276,.589029,.605898,.621200,.635176,.648017,.659877,.670879,.681125,.690700,.699676,.708114,.716104,.723688,.730901,.737775,.744336,.750610,.756616,.762376,.767905,.773220,.778334,.783261,.788011,.792595,.797023,.801304,.805446,.809455,.813340,.817107,.820762,.824312,.827761,.831115,.834378,.837553,.840644,.843655,.846590,.849451,.852242,.854965,.857622,.860217,.862752,.865228,.867649,.870016,.872330,.874594,.876811,.878981,.881107,.883190,.885232,.887233,.889195,.891119,.893006,.894857,.896674,.898457,.900207,.901926,.903614,.905272,.906900,.908500,.910073,.911618,.913138,.914633,.916104,.917552,.918976,.920378,.921758,.923116,.924454,.925771,.927069,.928346,.929605,.930845,.932067,.933272,.934458,.935628,.936781,.937918,.939039,.940145,.941236,.942312,.943374,.944422,.945456,.946476,.947483,.948478,.949459,.950428,.951385,.952329,.953262,.954183,.955093,.955992,.956879,.957756,.958622,.959478,.960323,.961158,.961984,.962799,.963605,.964401,.965188,.965966,.966735,.967495,.968246,.968989,.969724,.970450,.971168,.971878,.972580,.973274,.973960,.974638,.975307,.975969,.976624,.977270,.977909,.978541,.979165,.979782,.980392,.980995,.981592,.982181,.982764,.983340,.983910,.984474,.985031,.985582,.986124,.986658,.987183,.987699,.988208,.988708,.989200,.989685,.990162,.990631,.991093,.991548,.991996,.992436,.992870,.993297,.993718,.994131,.994539,.994940,.995328,.995704,.996067,.996419,.996759,.997089,.997407,.997716,.998014,.998303,.998573,.998826,.999062,.999283,.999473,.999635,.999775,.999894,.999962,1.00000,.205140,.306647,.373618,.423327,.462681,.495137,.522669,.546509,.567482,.586161,.602967,.618212,.632139,.644938,.656759,.667727,.677943,.687491,.696443,.704860,.712832,.720400,.727600,.734463,.741015,.747281,.753282,.759038,.764565,.769878,.774992,.779920,.784672,.789260,.793692,.797977,.802124,.806140,.810032,.813806,.817470,.821028,.824487,.827850,.831122,.834306,.837408,.840430,.843375,.846247,.849049,.851783,.854452,.857059,.859606,.862094,.864527,.866906,.869233,.871510,.873740,.875924,.878064,.880161,.882216,.884232,.886209,.888148,.890050,.891917,.893750,.895549,.897316,.899051,.900755,.902430,.904075,.905692,.907282,.908845,.910383,.911895,.913384,.914850,.916292,.917712,.919111,.920488,.921844,.923180,.924497,.925794,.927071,.928331,.929572,.930796,.932002,.933191,.934364,.935520,.936661,.937787,.938898,.939995,.941077,.942145,.943200,.944241,.945269,.946284,.947287,.948277,.949255,.950220,.951175,.952117,.953048,.953968,.954878,.955776,.956664,.957542,.958409,.959266,.960114,.960952,.961780,.962599,.963409,.964209,.965001,.965784,.966559,.967325,.968082,.968832,.969573,.970306,.971032,.971750,.972459,.973161,.973855,.974541,.975220,.975891,.976555,.977211,.977861,.978503,.979138,.979767,.980388,.981003,.981612,.982214,.982810,.983399,.983982,.984560,.985128,.985688,.986240,.986784,.987319,.987847,.988367,.988879,.989384,.989881,.990372,.990855,.991331,.991800,.992262,.992718,.993167,.993610,.994046,.994476,.994893,.995298,.995690,.996071,.996440,.996798,.997145,.997481,.997808,.998125,.998422,.998701,.998962,.999208,.999419,.999601,.999757,.999891,.999962,1.00000,.204077,.305086,.371747,.421239,.460433,.492765,.520199,.543962,.564872,.583501,.600265,.615478,.629379,.642157,.653963,.664919,.675127,.684670,.693621,.702037,.710011,.717582,.724786,.731653,.738210,.744482,.750489,.756252,.761786,.767107,.772230,.777166,.781927,.786524,.790966,.795262,.799419,.803446,.807349,.811134,.814809,.818379,.821849,.825224,.828509,.831706,.834820,.837855,.840814,.843699,.846514,.849262,.851945,.854566,.857127,.859629,.862076,.864470,.866811,.869103,.871347,.873545,.875699,.877810,.879880,.881909,.883900,.885852,.887768,.889649,.891495,.893307,.895087,.896836,.898553,.900241,.901899,.903529,.905131,.906707,.908257,.909783,.911284,.912762,.914218,.915651,.917062,.918452,.919821,.921169,.922498,.923808,.925098,.926370,.927624,.928861,.930080,.931281,.932467,.933636,.934790,.935928,.937052,.938162,.939257,.940339,.941407,.942462,.943504,.944533,.945549,.946553,.947545,.948525,.949493,.950450,.951396,.952331,.953254,.954168,.955070,.955963,.956846,.957719,.958583,.959437,.960282,.961118,.961945,.962763,.963572,.964373,.965165,.965950,.966726,.967494,.968254,.969006,.969751,.970488,.971217,.971939,.972653,.973359,.974058,.974749,.975433,.976110,.976780,.977444,.978100,.978750,.979393,.980029,.980659,.981283,.981900,.982511,.983117,.983716,.984306,.984889,.985463,.986029,.986586,.987137,.987679,.988214,.988741,.989261,.989774,.990280,.990778,.991270,.991755,.992234,.992706,.993171,.993630,.994083,.994523,.994951,.995366,.995770,.996162,.996543,.996914,.997274,.997623,.997963,.998284,.998585,.998870,.999137,.999368,.999567,.999739,.999888,.999962,1.00000,.202807,.303213,.369491,.418711,.457699,.489870,.517173,.540829,.561649,.580203,.596904,.612063,.625918,.638656,.650429,.661357,.671541,.681065,.689999,.698402,.706364,.713926,.721122,.727983,.734536,.740805,.746811,.752572,.758107,.763430,.768555,.773494,.778259,.782861,.787308,.791610,.795774,.799807,.803718,.807511,.811194,.814773,.818252,.821637,.824931,.828139,.831263,.834309,.837278,.840175,.843001,.845761,.848456,.851088,.853661,.856176,.858635,.861041,.863395,.865700,.867957,.870168,.872336,.874461,.876545,.878588,.880593,.882561,.884492,.886388,.888249,.890077,.891872,.893636,.895370,.897073,.898748,.900394,.902013,.903605,.905172,.906715,.908233,.909729,.911201,.912652,.914080,.915488,.916875,.918242,.919589,.920916,.922225,.923516,.924788,.926043,.927281,.928501,.929706,.930894,.932067,.933225,.934368,.935497,.936613,.937714,.938803,.939878,.940940,.941990,.943027,.944052,.945065,.946066,.947055,.948034,.949001,.949957,.950903,.951838,.952763,.953678,.954583,.955479,.956365,.957242,.958110,.958970,.959820,.960662,.961495,.962320,.963137,.963945,.964746,.965538,.966323,.967100,.967870,.968632,.969387,.970134,.970874,.971606,.972332,.973050,.973761,.974465,.975163,.975854,.976538,.977216,.977887,.978552,.979211,.979863,.980510,.981150,.981785,.982414,.983034,.983647,.984252,.984849,.985439,.986021,.986596,.987163,.987724,.988277,.988823,.989363,.989896,.990422,.990942,.991455,.991962,.992463,.992958,.993447,.993923,.994387,.994839,.995279,.995709,.996127,.996535,.996933,.997320,.997698,.998055,.998394,.998714,.999018,.999281,.999510,.999709,.999882,.999963,1.00000,.201916,.301898,.367908,.416937,.455781,.487838,.515050,.538630,.559388,.577889,.594546,.609667,.623490,.636201,.647951,.658859,.669027,.678537,.687459,.695853,.703808,.711363,.718554,.725411,.731962,.738229,.744234,.749995,.755531,.760855,.765982,.770924,.775692,.780298,.784749,.789055,.793225,.797264,.801180,.804979,.808669,.812255,.815741,.819133,.822434,.825649,.828782,.831835,.834812,.837717,.840552,.843319,.846023,.848664,.851245,.853769,.856237,.858652,.861015,.863329,.865595,.867816,.869993,.872127,.874221,.876274,.878289,.880266,.882207,.884113,.885984,.887822,.889628,.891402,.893146,.894860,.896544,.898201,.899830,.901433,.903011,.904564,.906093,.907599,.909083,.910545,.911985,.913404,.914802,.916180,.917539,.918879,.920200,.921502,.922786,.924053,.925303,.926536,.927753,.928953,.930138,.931309,.932465,.933607,.934736,.935851,.936952,.938040,.939116,.940179,.941230,.942268,.943295,.944310,.945313,.946306,.947287,.948257,.949217,.950166,.951106,.952035,.952955,.953866,.954767,.955660,.956543,.957418,.958284,.959141,.959990,.960831,.961664,.962489,.963306,.964115,.964916,.965710,.966497,.967276,.968048,.968812,.969570,.970320,.971063,.971800,.972529,.973252,.973968,.974678,.975382,.976079,.976769,.977454,.978133,.978805,.979472,.980133,.980788,.981438,.982079,.982713,.983340,.983959,.984571,.985176,.985774,.986365,.986949,.987526,.988097,.988661,.989219,.989770,.990315,.990854,.991387,.991914,.992434,.992949,.993452,.993943,.994423,.994891,.995349,.995796,.996232,.996658,.997075,.997482,.997868,.998236,.998585,.998917,.999207,.999461,.999683,.999878,.999963,1.00000]
	# Z=17
	      Z17=[.162256,.243545,.297843,.338648,.371356,.398666,.422121,.442684,.460999,.477515,.492558,.506376,.519155,.531046,.542165,.552610,.562460,.571781,.580629,.589051,.597084,.604764,.612121,.619182,.625972,.632510,.638815,.644905,.650794,.656495,.662020,.667381,.672588,.677649,.682573,.687368,.692040,.696596,.701042,.705384,.709625,.713769,.717822,.721787,.725668,.729470,.733195,.736846,.740427,.743941,.747390,.750776,.754102,.757370,.760583,.763742,.766849,.769906,.772915,.775876,.778793,.781664,.784493,.787280,.790027,.792735,.795405,.798038,.800635,.803198,.805727,.808223,.810687,.813121,.815524,.817897,.820242,.822560,.824849,.827113,.829350,.831562,.833749,.835912,.838052,.840168,.842261,.844333,.846383,.848412,.850421,.852409,.854378,.856327,.858257,.860169,.862063,.863939,.865798,.867639,.869464,.871273,.873066,.874842,.876604,.878350,.880082,.881799,.883502,.885190,.886865,.888527,.890175,.891810,.893432,.895042,.896639,.898224,.899797,.901359,.902909,.904447,.905975,.907492,.908998,.910494,.911979,.913455,.914920,.916375,.917821,.919257,.920683,.922101,.923509,.924908,.926299,.927680,.929053,.930418,.931774,.933122,.934462,.935793,.937117,.938433,.939741,.941042,.942335,.943621,.944899,.946170,.947434,.948691,.949941,.951184,.952421,.953650,.954873,.956090,.957300,.958503,.959700,.960891,.962075,.963253,.964424,.965590,.966749,.967902,.969050,.970191,.971327,.972457,.973582,.974701,.975814,.976922,.978024,.979122,.980213,.981300,.982381,.983456,.984527,.985592,.986653,.987708,.988758,.989803,.990844,.991880,.992910,.993937,.994958,.995976,.996988,.997996,.999000,1.00000,.166613,.250009,.305666,.347453,.380919,.408836,.432792,.453775,.472446,.489269,.504578,.518627,.531609,.543677,.554952,.565533,.575503,.584929,.593869,.602371,.610474,.618216,.625627,.632735,.639565,.646137,.652471,.658584,.664492,.670207,.675742,.681109,.686317,.691376,.696295,.701082,.705742,.710284,.714713,.719035,.723254,.727375,.731403,.735341,.739195,.742966,.746660,.750278,.753825,.757303,.760715,.764064,.767351,.770579,.773750,.776866,.779930,.782943,.785906,.788821,.791690,.794513,.797293,.800029,.802725,.805380,.807997,.810576,.813118,.815624,.818097,.820535,.822941,.825315,.827658,.829971,.832255,.834510,.836737,.838937,.841110,.843257,.845378,.847473,.849545,.851592,.853616,.855617,.857595,.859552,.861487,.863401,.865295,.867169,.869023,.870858,.872675,.874472,.876252,.878014,.879758,.881486,.883196,.884890,.886567,.888228,.889874,.891505,.893120,.894721,.896307,.897878,.899436,.900980,.902510,.904028,.905531,.907023,.908501,.909967,.911421,.912863,.914293,.915712,.917120,.918516,.919901,.921276,.922640,.923993,.925336,.926669,.927992,.929305,.930608,.931902,.933187,.934462,.935728,.936984,.938233,.939472,.940704,.941927,.943141,.944348,.945547,.946738,.947921,.949096,.950264,.951425,.952578,.953723,.954862,.955994,.957118,.958236,.959347,.960451,.961549,.962640,.963726,.964804,.965877,.966944,.968004,.969059,.970108,.971151,.972189,.973220,.974246,.975267,.976282,.977292,.978296,.979295,.980289,.981278,.982262,.983240,.984213,.985181,.986144,.987102,.988055,.989004,.989947,.990886,.991819,.992747,.993670,.994589,.995502,.996411,.997315,.998215,.999110,1.00000,.170558,.255937,.312922,.355711,.389982,.418575,.443111,.464606,.483734,.500970,.516657,.531054,.544358,.556727,.568285,.579133,.589355,.599020,.608187,.616906,.625211,.633139,.640723,.647992,.654971,.661682,.668145,.674378,.680397,.686216,.691848,.697304,.702596,.707732,.712722,.717575,.722296,.726894,.731374,.735743,.740002,.744157,.748211,.752171,.756040,.759822,.763520,.767139,.770681,.774150,.777549,.780879,.784144,.787346,.790488,.793571,.796598,.799570,.802490,.805359,.808178,.810948,.813671,.816348,.818981,.821572,.824120,.826629,.829098,.831529,.833923,.836281,.838604,.840893,.843149,.845373,.847566,.849727,.851859,.853962,.856037,.858084,.860104,.862097,.864065,.866008,.867926,.869821,.871692,.873539,.875365,.877169,.878951,.880712,.882453,.884173,.885874,.887556,.889218,.890862,.892489,.894097,.895689,.897263,.898821,.900362,.901888,.903398,.904892,.906371,.907836,.909286,.910721,.912143,.913551,.914945,.916326,.917693,.919048,.920390,.921720,.923038,.924344,.925638,.926921,.928193,.929453,.930703,.931941,.933170,.934387,.935595,.936792,.937979,.939157,.940325,.941483,.942632,.943771,.944902,.946024,.947136,.948240,.949336,.950423,.951502,.952573,.953635,.954690,.955737,.956776,.957807,.958831,.959847,.960856,.961858,.962853,.963840,.964821,.965794,.966761,.967721,.968675,.969622,.970563,.971498,.972426,.973348,.974264,.975174,.976078,.976976,.977869,.978756,.979637,.980512,.981382,.982246,.983105,.983959,.984807,.985650,.986488,.987321,.988150,.988973,.989791,.990604,.991413,.992217,.993016,.993810,.994599,.995384,.996164,.996940,.997712,.998479,.999242,1.00000,.175119,.262719,.321146,.364986,.400074,.429327,.454413,.476374,.495903,.513487,.529480,.544147,.557693,.570276,.582026,.593046,.603423,.613228,.622521,.631354,.639759,.647775,.655436,.662772,.669809,.676569,.683073,.689340,.695386,.701225,.706871,.712336,.717631,.722766,.727751,.732592,.737299,.741878,.746336,.750679,.754908,.759029,.763047,.766966,.770791,.774527,.778176,.781742,.785230,.788641,.791979,.795247,.798448,.801584,.804657,.807669,.810624,.813522,.816366,.819157,.821897,.824586,.827227,.829821,.832369,.834874,.837335,.839755,.842135,.844476,.846778,.849044,.851273,.853468,.855629,.857756,.859852,.861915,.863949,.865952,.867927,.869874,.871794,.873687,.875554,.877396,.879213,.881005,.882775,.884521,.886244,.887945,.889625,.891284,.892922,.894539,.896137,.897715,.899275,.900815,.902338,.903843,.905331,.906803,.908257,.909696,.911118,.912525,.913917,.915294,.916656,.918003,.919336,.920656,.921961,.923253,.924532,.925798,.927051,.928291,.929519,.930735,.931940,.933133,.934314,.935485,.936644,.937792,.938930,.940058,.941175,.942281,.943378,.944465,.945542,.946610,.947668,.948717,.949756,.950787,.951809,.952822,.953826,.954822,.955810,.956789,.957760,.958723,.959678,.960625,.961565,.962497,.963421,.964338,.965248,.966150,.967045,.967933,.968815,.969689,.970557,.971418,.972273,.973121,.973963,.974799,.975628,.976452,.977269,.978081,.978886,.979686,.980480,.981268,.982051,.982828,.983600,.984366,.985127,.985883,.986633,.987379,.988119,.988855,.989586,.990312,.991033,.991750,.992462,.993169,.993872,.994570,.995264,.995953,.996638,.997319,.997995,.998668,.999336,1.00000,.181387,.272024,.332411,.377673,.413859,.443996,.469811,.492385,.512438,.530475,.546861,.561873,.575721,.588572,.600559,.611789,.622353,.632323,.641762,.650724,.659236,.667339,.675068,.682455,.689526,.696308,.702820,.709082,.715112,.720925,.726535,.731955,.737196,.742270,.747184,.751949,.756573,.761063,.765425,.769667,.773792,.777806,.781714,.785521,.789232,.792850,.796380,.799825,.803190,.806476,.809688,.812828,.815899,.818903,.821843,.824722,.827541,.830302,.833008,.835661,.838261,.840812,.843315,.845771,.848182,.850548,.852873,.855155,.857398,.859602,.861768,.863898,.865992,.868051,.870076,.872069,.874029,.875958,.877857,.879727,.881568,.883382,.885168,.886929,.888663,.890373,.892059,.893720,.895358,.896974,.898567,.900138,.901688,.903218,.904727,.906216,.907685,.909136,.910567,.911981,.913376,.914755,.916117,.917462,.918791,.920105,.921402,.922685,.923952,.925205,.926443,.927667,.928877,.930074,.931257,.932427,.933584,.934729,.935861,.936980,.938088,.939184,.940269,.941342,.942404,.943456,.944497,.945527,.946547,.947556,.948556,.949545,.950525,.951495,.952456,.953408,.954350,.955284,.956208,.957124,.958031,.958930,.959820,.960703,.961577,.962443,.963302,.964153,.964996,.965832,.966660,.967481,.968295,.969102,.969902,.970695,.971481,.972260,.973033,.973799,.974559,.975312,.976060,.976801,.977536,.978265,.978989,.979706,.980418,.981124,.981824,.982519,.983209,.983893,.984571,.985245,.985913,.986576,.987234,.987887,.988535,.989178,.989817,.990451,.991080,.991705,.992325,.992941,.993552,.994159,.994761,.995360,.995954,.996544,.997130,.997712,.998290,.998864,.999434,1.00000,.193573,.289964,.353963,.401766,.439853,.471462,.498445,.521960,.542776,.561434,.578326,.593748,.607926,.621037,.633224,.644602,.655268,.665300,.674766,.683721,.692208,.700270,.707944,.715261,.722252,.728941,.735351,.741502,.747411,.753095,.758570,.763847,.768939,.773857,.778612,.783212,.787665,.791980,.796164,.800223,.804163,.807988,.811704,.815316,.818829,.822248,.825576,.828817,.831975,.835054,.838056,.840985,.843843,.846634,.849359,.852021,.854622,.857165,.859652,.862084,.864464,.866793,.869074,.871307,.873494,.875638,.877738,.879796,.881814,.883793,.885734,.887639,.889507,.891340,.893140,.894907,.896641,.898345,.900018,.901662,.903278,.904868,.906431,.907968,.909480,.910968,.912432,.913873,.915291,.916687,.918061,.919415,.920747,.922060,.923353,.924626,.925881,.927117,.928335,.929535,.930719,.931886,.933038,.934174,.935295,.936400,.937491,.938568,.939631,.940679,.941714,.942736,.943745,.944741,.945724,.946695,.947654,.948600,.949536,.950459,.951372,.952274,.953165,.954046,.954917,.955777,.956628,.957468,.958300,.959121,.959934,.960737,.961532,.962317,.963094,.963862,.964622,.965374,.966117,.966853,.967580,.968300,.969012,.969717,.970414,.971104,.971787,.972463,.973132,.973793,.974449,.975097,.975739,.976375,.977004,.977627,.978243,.978854,.979458,.980057,.980650,.981237,.981818,.982394,.982964,.983529,.984089,.984643,.985192,.985736,.986275,.986809,.987339,.987863,.988382,.988897,.989407,.989912,.990413,.990909,.991401,.991889,.992372,.992852,.993327,.993798,.994265,.994729,.995188,.995643,.996095,.996543,.996987,.997428,.997865,.998298,.998729,.999156,.999579,1.00000,.204221,.305594,.372687,.422644,.462321,.495146,.523079,.547343,.568756,.587888,.605155,.620869,.635270,.648545,.660845,.672294,.682991,.693021,.702455,.711352,.719765,.727738,.735311,.742516,.749383,.755939,.762207,.768209,.773962,.779484,.784789,.789892,.794805,.799539,.804106,.808514,.812772,.816888,.820871,.824726,.828461,.832083,.835596,.839005,.842316,.845533,.848659,.851700,.854658,.857537,.860341,.863071,.865732,.868325,.870854,.873321,.875727,.878076,.880370,.882610,.884798,.886937,.889029,.891074,.893075,.895033,.896949,.898824,.900660,.902458,.904219,.905945,.907635,.909292,.910916,.912508,.914069,.915601,.917103,.918576,.920023,.921443,.922837,.924207,.925552,.926873,.928172,.929447,.930701,.931934,.933145,.934336,.935507,.936658,.937791,.938905,.940000,.941078,.942139,.943182,.944209,.945221,.946217,.947197,.948163,.949114,.950050,.950973,.951882,.952778,.953660,.954530,.955386,.956231,.957063,.957884,.958692,.959490,.960276,.961051,.961815,.962569,.963312,.964046,.964770,.965483,.966188,.966883,.967569,.968245,.968913,.969572,.970223,.970865,.971499,.972124,.972742,.973352,.973954,.974548,.975135,.975715,.976288,.976853,.977412,.977964,.978509,.979048,.979580,.980105,.980625,.981138,.981645,.982147,.982642,.983131,.983615,.984093,.984566,.985033,.985494,.985951,.986401,.986847,.987287,.987723,.988153,.988578,.988999,.989414,.989825,.990231,.990633,.991030,.991422,.991810,.992194,.992574,.992949,.993320,.993687,.994050,.994409,.994765,.995117,.995465,.995809,.996150,.996487,.996821,.997152,.997480,.997805,.998127,.998446,.998762,.999076,.999387,.999695,1.00000,.213966,.319886,.389798,.441712,.482830,.516754,.545544,.570484,.592433,.611991,.629594,.645571,.660171,.673594,.685998,.697511,.708239,.718271,.727680,.736530,.744880,.752776,.760258,.767362,.774119,.780555,.786695,.792561,.798171,.803544,.808696,.813640,.818389,.822956,.827351,.831584,.835665,.839601,.843400,.847070,.850620,.854055,.857381,.860603,.863726,.866755,.869694,.872546,.875316,.878007,.880623,.883166,.885639,.888045,.890387,.892668,.894889,.897053,.899161,.901217,.903222,.905179,.907090,.908955,.910777,.912557,.914296,.915995,.917656,.919281,.920869,.922423,.923943,.925430,.926886,.928311,.929706,.931072,.932409,.933720,.935004,.936263,.937497,.938708,.939895,.941059,.942201,.943322,.944421,.945500,.946559,.947599,.948620,.949622,.950606,.951572,.952521,.953453,.954369,.955269,.956153,.957022,.957876,.958715,.959540,.960352,.961149,.961933,.962705,.963463,.964209,.964943,.965664,.966375,.967073,.967760,.968437,.969102,.969757,.970402,.971036,.971660,.972274,.972879,.973474,.974059,.974635,.975202,.975761,.976310,.976852,.977384,.977909,.978426,.978934,.979435,.979929,.980415,.980893,.981365,.981829,.982286,.982737,.983180,.983618,.984048,.984472,.984890,.985302,.985707,.986107,.986501,.986889,.987271,.987648,.988019,.988386,.988746,.989102,.989452,.989798,.990138,.990473,.990803,.991129,.991449,.991765,.992076,.992383,.992685,.992983,.993276,.993566,.993851,.994132,.994409,.994682,.994951,.995216,.995478,.995735,.995989,.996239,.996486,.996729,.996969,.997205,.997437,.997667,.997893,.998116,.998336,.998553,.998767,.998978,.999187,.999394,.999598,.999800,1.00000,.225368,.336517,.409609,.463681,.506350,.541424,.571078,.596672,.619112,.639034,.656898,.673050,.687757,.701228,.713629,.725097,.735744,.745662,.754930,.763615,.771789,.779500,.786789,.793692,.800241,.806464,.812386,.818030,.823415,.828559,.833478,.838188,.842701,.847031,.851187,.855180,.859019,.862713,.866271,.869698,.873007,.876204,.879293,.882281,.885172,.887970,.890681,.893307,.895852,.898321,.900716,.903040,.905296,.907488,.909617,.911687,.913698,.915655,.917558,.919410,.921214,.922972,.924685,.926355,.927983,.929572,.931121,.932633,.934109,.935550,.936956,.938330,.939672,.940983,.942263,.943515,.944739,.945935,.947105,.948249,.949368,.950463,.951534,.952582,.953608,.954612,.955595,.956558,.957501,.958424,.959328,.960214,.961082,.961933,.962766,.963583,.964384,.965168,.965938,.966692,.967432,.968157,.968868,.969564,.970248,.970918,.971575,.972220,.972852,.973472,.974081,.974678,.975264,.975839,.976403,.976957,.977501,.978034,.978558,.979072,.979577,.980072,.980557,.981034,.981501,.981960,.982410,.982852,.983286,.983712,.984129,.984540,.984942,.985338,.985726,.986107,.986481,.986849,.987209,.987564,.987912,.988253,.988588,.988916,.989239,.989555,.989866,.990171,.990470,.990764,.991052,.991335,.991613,.991886,.992153,.992416,.992675,.992928,.993177,.993422,.993661,.993896,.994126,.994351,.994572,.994788,.995000,.995208,.995412,.995611,.995807,.995998,.996186,.996370,.996551,.996728,.996901,.997071,.997238,.997401,.997561,.997717,.997869,.998018,.998164,.998307,.998446,.998583,.998716,.998846,.998973,.999098,.999220,.999338,.999455,.999569,.999680,.999789,.999896,1.00000,.228783,.341483,.415506,.470203,.513313,.548708,.578597,.604364,.626929,.646938,.664858,.681043,.695762,.709227,.721609,.733045,.743649,.753517,.762727,.771347,.779454,.787097,.794316,.801149,.807627,.813778,.819628,.825199,.830511,.835582,.840428,.845065,.849505,.853761,.857844,.861764,.865531,.869153,.872639,.875995,.879233,.882360,.885382,.888302,.891126,.893859,.896505,.899068,.901551,.903957,.906291,.908555,.910753,.912886,.914957,.916970,.918925,.920826,.922675,.924473,.926223,.927928,.929588,.931206,.932783,.934321,.935819,.937281,.938707,.940098,.941456,.942781,.944075,.945338,.946572,.947777,.948954,.950105,.951229,.952328,.953402,.954453,.955480,.956484,.957466,.958427,.959367,.960287,.961188,.962069,.962931,.963775,.964602,.965412,.966204,.966981,.967741,.968486,.969216,.969931,.970632,.971318,.971990,.972649,.973294,.973926,.974545,.975153,.975748,.976331,.976903,.977463,.978013,.978552,.979080,.979599,.980107,.980606,.981095,.981574,.982044,.982505,.982956,.983399,.983832,.984257,.984674,.985082,.985482,.985875,.986260,.986637,.987007,.987370,.987725,.988074,.988417,.988752,.989082,.989405,.989721,.990031,.990334,.990631,.990922,.991207,.991487,.991760,.992028,.992291,.992548,.992800,.993047,.993289,.993526,.993758,.993986,.994209,.994428,.994642,.994851,.995056,.995255,.995450,.995641,.995826,.996008,.996186,.996359,.996528,.996693,.996855,.997013,.997167,.997318,.997465,.997609,.997749,.997886,.998021,.998151,.998277,.998400,.998520,.998636,.998748,.998858,.998964,.999067,.999167,.999264,.999358,.999448,.999536,.999621,.999702,.999781,.999857,.999930,1.00000,.227540,.339633,.413259,.467664,.510547,.545755,.575488,.601122,.623571,.643477,.661306,.677409,.692054,.705452,.717773,.729153,.739706,.749526,.758691,.767270,.775345,.782963,.790165,.796986,.803458,.809609,.815463,.821041,.826365,.831451,.836315,.840973,.845437,.849719,.853830,.857780,.861578,.865234,.868754,.872146,.875422,.878587,.881646,.884606,.887470,.890243,.892929,.895532,.898057,.900505,.902881,.905187,.907426,.909602,.911716,.913771,.915769,.917713,.919604,.921445,.923238,.924985,.926688,.928348,.929967,.931546,.933086,.934589,.936055,.937487,.938885,.940251,.941584,.942887,.944160,.945405,.946621,.947810,.948972,.950109,.951222,.952309,.953374,.954415,.955434,.956431,.957408,.958364,.959300,.960216,.961114,.961993,.962855,.963698,.964525,.965336,.966130,.966908,.967671,.968419,.969152,.969871,.970575,.971265,.971942,.972605,.973256,.973893,.974519,.975132,.975734,.976324,.976903,.977471,.978028,.978575,.979112,.979638,.980155,.980662,.981159,.981647,.982125,.982593,.983053,.983503,.983945,.984379,.984804,.985220,.985629,.986031,.986424,.986810,.987189,.987561,.987925,.988283,.988635,.988979,.989317,.989647,.989971,.990288,.990599,.990903,.991201,.991493,.991779,.992059,.992333,.992602,.992866,.993124,.993377,.993625,.993868,.994106,.994339,.994568,.994791,.995008,.995220,.995427,.995628,.995824,.996016,.996202,.996384,.996562,.996735,.996903,.997068,.997228,.997385,.997537,.997686,.997831,.997973,.998111,.998245,.998373,.998498,.998618,.998733,.998845,.998953,.999058,.999158,.999256,.999348,.999437,.999522,.999602,.999679,.999751,.999819,.999883,.999944,1.00000,.225578,.336720,.409733,.463693,.506231,.541162,.570666,.596105,.618387,.638148,.655850,.671841,.686386,.699694,.711934,.723242,.733729,.743489,.752600,.761129,.769167,.776757,.783941,.790753,.797223,.803378,.809243,.814838,.820184,.825296,.830191,.834883,.839385,.843708,.847864,.851861,.855708,.859415,.862989,.866437,.869768,.872990,.876108,.879126,.882049,.884881,.887627,.890291,.892876,.895385,.897822,.900190,.902491,.904729,.906904,.909021,.911082,.913088,.915041,.916943,.918798,.920605,.922368,.924088,.925765,.927402,.929000,.930560,.932084,.933572,.935026,.936446,.937834,.939191,.940518,.941815,.943084,.944325,.945539,.946727,.947889,.949027,.950140,.951231,.952298,.953343,.954367,.955369,.956351,.957314,.958256,.959180,.960086,.960974,.961844,.962697,.963533,.964354,.965158,.965947,.966721,.967480,.968225,.968955,.969671,.970374,.971064,.971741,.972405,.973057,.973697,.974325,.974941,.975547,.976141,.976725,.977298,.977861,.978413,.978956,.979489,.980012,.980525,.981028,.981523,.982008,.982484,.982951,.983410,.983860,.984302,.984737,.985163,.985582,.985993,.986397,.986793,.987183,.987566,.987942,.988310,.988671,.989025,.989371,.989711,.990044,.990371,.990691,.991005,.991312,.991614,.991910,.992200,.992484,.992763,.993036,.993304,.993567,.993825,.994078,.994325,.994565,.994800,.995028,.995251,.995469,.995681,.995888,.996090,.996286,.996478,.996666,.996848,.997026,.997200,.997370,.997535,.997697,.997854,.998008,.998156,.998298,.998434,.998565,.998691,.998812,.998929,.999041,.999148,.999252,.999350,.999442,.999530,.999613,.999690,.999762,.999829,.999891,.999948,1.00000,.221819,.331279,.403297,.456605,.498694,.533309,.562592,.587879,.610062,.629766,.647445,.663438,.678009,.691361,.703661,.715040,.725611,.735464,.744676,.753313,.761457,.769155,.776445,.783363,.789938,.796198,.802167,.807865,.813313,.818527,.823523,.828316,.832917,.837339,.841592,.845686,.849630,.853432,.857100,.860642,.864065,.867375,.870579,.873680,.876685,.879597,.882421,.885160,.887819,.890400,.892907,.895344,.897712,.900014,.902254,.904434,.906555,.908621,.910633,.912593,.914503,.916367,.918184,.919957,.921688,.923377,.925026,.926637,.928210,.929747,.931249,.932717,.934152,.935555,.936927,.938269,.939582,.940866,.942123,.943354,.944558,.945738,.946894,.948026,.949135,.950222,.951287,.952331,.953355,.954358,.955342,.956307,.957253,.958181,.959092,.959985,.960861,.961721,.962566,.963394,.964207,.965005,.965789,.966558,.967313,.968055,.968783,.969498,.970201,.970891,.971568,.972234,.972888,.973531,.974163,.974783,.975393,.975993,.976582,.977161,.977730,.978289,.978838,.979377,.979906,.980426,.980937,.981439,.981932,.982416,.982893,.983361,.983820,.984272,.984716,.985153,.985582,.986004,.986419,.986827,.987227,.987619,.988004,.988381,.988751,.989115,.989471,.989821,.990164,.990501,.990831,.991156,.991474,.991786,.992093,.992394,.992689,.992979,.993264,.993543,.993815,.994081,.994339,.994591,.994837,.995077,.995310,.995538,.995760,.995976,.996187,.996393,.996593,.996789,.996980,.997165,.997347,.997524,.997696,.997864,.998026,.998181,.998330,.998473,.998610,.998742,.998869,.998990,.999107,.999219,.999325,.999425,.999519,.999608,.999689,.999763,.999832,.999895,.999950,1.00000,.220128,.328789,.400305,.453259,.495081,.529489,.558605,.583757,.605829,.625441,.643042,.658971,.673487,.686795,.699057,.710405,.720950,.730783,.739979,.748603,.756741,.764437,.771729,.778653,.785238,.791511,.797495,.803212,.808681,.813918,.818939,.823758,.828387,.832839,.837123,.841249,.845227,.849064,.852768,.856345,.859805,.863152,.866394,.869533,.872576,.875527,.878390,.881168,.883866,.886487,.889034,.891509,.893917,.896260,.898540,.900759,.902921,.905026,.907078,.909078,.911028,.912931,.914788,.916600,.918370,.920098,.921787,.923436,.925048,.926623,.928163,.929669,.931142,.932583,.933993,.935372,.936723,.938044,.939338,.940605,.941846,.943062,.944254,.945422,.946566,.947689,.948789,.949868,.950926,.951963,.952981,.953980,.954960,.955922,.956865,.957791,.958701,.959593,.960470,.961330,.962175,.963005,.963820,.964620,.965407,.966179,.966938,.967683,.968416,.969136,.969843,.970539,.971222,.971894,.972555,.973204,.973843,.974471,.975089,.975696,.976293,.976879,.977455,.978022,.978578,.979125,.979663,.980192,.980712,.981223,.981725,.982219,.982705,.983183,.983652,.984114,.984569,.985016,.985456,.985888,.986313,.986729,.987138,.987540,.987934,.988321,.988701,.989074,.989441,.989800,.990154,.990501,.990841,.991176,.991504,.991827,.992144,.992455,.992761,.993062,.993355,.993640,.993919,.994191,.994456,.994714,.994966,.995212,.995451,.995685,.995913,.996135,.996352,.996564,.996770,.996972,.997168,.997360,.997547,.997729,.997904,.998072,.998233,.998388,.998536,.998678,.998814,.998944,.999070,.999190,.999303,.999409,.999508,.999602,.999686,.999763,.999833,.999897,.999952,1.00000,.218667,.326639,.397724,.450374,.491970,.526201,.555177,.580216,.602195,.621730,.639268,.655144,.669617,.682888,.695121,.706446,.716972,.726790,.735975,.744593,.752727,.760423,.767719,.774649,.781243,.787527,.793525,.799257,.804743,.809999,.815040,.819881,.824533,.829009,.833318,.837470,.841474,.845339,.849071,.852677,.856166,.859544,.862815,.865985,.869059,.872040,.874934,.877744,.880473,.883126,.885705,.888213,.890653,.893027,.895339,.897591,.899785,.901923,.904007,.906039,.908022,.909957,.911846,.913691,.915492,.917253,.918973,.920654,.922298,.923905,.925477,.927014,.928518,.929990,.931431,.932842,.934223,.935575,.936900,.938197,.939468,.940715,.941936,.943134,.944308,.945460,.946590,.947698,.948785,.949851,.950898,.951925,.952934,.953924,.954895,.955850,.956787,.957707,.958611,.959499,.960371,.961228,.962069,.962897,.963709,.964508,.965293,.966065,.966824,.967570,.968303,.969024,.969733,.970430,.971116,.971791,.972454,.973107,.973749,.974381,.975002,.975612,.976212,.976803,.977383,.977954,.978515,.979068,.979611,.980145,.980670,.981187,.981696,.982196,.982688,.983173,.983650,.984119,.984580,.985035,.985481,.985919,.986350,.986773,.987188,.987596,.987997,.988390,.988777,.989157,.989531,.989898,.990258,.990613,.990961,.991303,.991639,.991970,.992295,.992614,.992926,.993230,.993526,.993815,.994098,.994373,.994642,.994904,.995160,.995409,.995653,.995890,.996122,.996349,.996570,.996785,.996996,.997201,.997402,.997598,.997785,.997965,.998137,.998302,.998461,.998612,.998758,.998897,.999030,.999158,.999278,.999390,.999495,.999594,.999682,.999762,.999834,.999898,.999953,1.00000,.216389,.323284,.393691,.445862,.487097,.521047,.549797,.574651,.596478,.615887,.633319,.649106,.663504,.676713,.688893,.700175,.710665,.720454,.729616,.738215,.746338,.754028,.761324,.768258,.774860,.781157,.787171,.792922,.798430,.803711,.808779,.813649,.818333,.822841,.827185,.831374,.835416,.839320,.843092,.846740,.850272,.853692,.857008,.860222,.863341,.866369,.869309,.872165,.874942,.877642,.880269,.882825,.885313,.887736,.890097,.892398,.894641,.896828,.898962,.901043,.903075,.905060,.906999,.908893,.910744,.912554,.914323,.916054,.917746,.919403,.921023,.922610,.924163,.925683,.927173,.928631,.930061,.931461,.932833,.934178,.935497,.936791,.938060,.939305,.940526,.941724,.942901,.944055,.945188,.946301,.947394,.948467,.949520,.950555,.951572,.952571,.953553,.954518,.955466,.956398,.957314,.958214,.959100,.959970,.960826,.961668,.962496,.963310,.964111,.964899,.965674,.966437,.967188,.967926,.968653,.969369,.970073,.970766,.971449,.972120,.972781,.973432,.974072,.974702,.975321,.975931,.976532,.977123,.977704,.978277,.978841,.979396,.979942,.980481,.981010,.981532,.982046,.982552,.983051,.983542,.984024,.984499,.984965,.985424,.985875,.986318,.986754,.987183,.987604,.988019,.988427,.988828,.989222,.989610,.989992,.990367,.990737,.991100,.991458,.991809,.992153,.992488,.992815,.993135,.993447,.993752,.994050,.994341,.994625,.994902,.995173,.995438,.995696,.995949,.996196,.996437,.996672,.996902,.997127,.997347,.997557,.997758,.997951,.998136,.998313,.998483,.998646,.998801,.998950,.999093,.999227,.999351,.999466,.999574,.999670,.999756,.999832,.999900,.999955,1.00000,.214633,.320696,.390579,.442379,.483334,.517066,.545641,.570352,.592060,.611370,.628719,.644437,.658776,.671936,.684074,.695321,.705783,.715548,.724692,.733276,.741389,.749073,.756367,.763303,.769910,.776213,.782237,.788001,.793523,.798819,.803906,.808795,.813500,.818031,.822399,.826612,.830680,.834611,.838411,.842088,.845649,.849099,.852445,.855691,.858842,.861902,.864875,.867765,.870575,.873309,.875970,.878561,.881084,.883543,.885939,.888276,.890554,.892778,.894947,.897065,.899133,.901155,.903130,.905060,.906948,.908794,.910601,.912368,.914097,.915790,.917447,.919070,.920660,.922217,.923743,.925238,.926703,.928140,.929548,.930930,.932285,.933614,.934919,.936200,.937457,.938691,.939903,.941093,.942261,.943409,.944537,.945645,.946734,.947804,.948856,.949890,.950906,.951905,.952887,.953853,.954803,.955738,.956657,.957561,.958451,.959326,.960188,.961035,.961870,.962691,.963499,.964295,.965078,.965849,.966609,.967357,.968093,.968818,.969533,.970236,.970929,.971611,.972283,.972944,.973595,.974237,.974868,.975490,.976103,.976706,.977301,.977887,.978464,.979032,.979592,.980144,.980688,.981224,.981752,.982273,.982785,.983289,.983785,.984273,.984752,.985225,.985689,.986147,.986597,.987040,.987476,.987905,.988327,.988743,.989152,.989555,.989952,.990342,.990726,.991105,.991475,.991836,.992190,.992535,.992872,.993202,.993524,.993840,.994148,.994449,.994743,.995031,.995312,.995587,.995856,.996119,.996376,.996628,.996873,.997114,.997344,.997565,.997776,.997979,.998173,.998359,.998537,.998708,.998872,.999029,.999175,.999310,.999436,.999554,.999657,.999748,.999829,.999900,.999956,1.00000,.211581,.316195,.385163,.436313,.476778,.510124,.538389,.562846,.584343,.603476,.620675,.636267,.650499,.663567,.675628,.686810,.697218,.706937,.716043,.724597,.732688,.740357,.747641,.754574,.761183,.767493,.773528,.779307,.784848,.790167,.795278,.800196,.804931,.809495,.813898,.818149,.822256,.826228,.830070,.833791,.837397,.840894,.844288,.847583,.850784,.853895,.856920,.859862,.862726,.865514,.868229,.870875,.873454,.875969,.878422,.880816,.883152,.885433,.887660,.889837,.891964,.894044,.896079,.898069,.900017,.901923,.903789,.905617,.907407,.909160,.910878,.912562,.914212,.915830,.917417,.918973,.920500,.921997,.923467,.924909,.926325,.927716,.929081,.930423,.931741,.933036,.934309,.935559,.936789,.937998,.939186,.940355,.941504,.942634,.943746,.944840,.945916,.946975,.948018,.949043,.950053,.951047,.952026,.952989,.953938,.954873,.955793,.956700,.957593,.958473,.959340,.960194,.961036,.961866,.962683,.963489,.964283,.965067,.965839,.966600,.967350,.968089,.968818,.969536,.970245,.970943,.971631,.972310,.972979,.973639,.974289,.974931,.975564,.976188,.976804,.977411,.978010,.978602,.979185,.979760,.980327,.980885,.981435,.981977,.982511,.983038,.983556,.984067,.984570,.985067,.985556,.986038,.986513,.986981,.987442,.987897,.988346,.988788,.989224,.989654,.990074,.990486,.990890,.991285,.991671,.992050,.992421,.992784,.993139,.993487,.993828,.994162,.994489,.994810,.995124,.995431,.995732,.996027,.996316,.996599,.996871,.997132,.997382,.997622,.997853,.998074,.998286,.998490,.998686,.998874,.999048,.999210,.999360,.999500,.999621,.999727,.999819,.999899,.999958,1.00000,.209605,.313276,.381643,.432364,.472503,.505591,.533646,.557928,.579279,.598288,.615382,.630882,.645035,.658036,.670038,.681169,.691532,.701214,.710286,.718813,.726880,.734532,.741803,.748727,.755331,.761640,.767676,.773459,.779007,.784335,.789458,.794389,.799140,.803721,.808143,.812414,.816543,.820537,.824404,.828150,.831783,.835307,.838729,.842053,.845283,.848424,.851479,.854453,.857348,.860169,.862917,.865596,.868209,.870758,.873245,.875673,.878044,.880360,.882623,.884835,.886999,.889115,.891186,.893213,.895198,.897141,.899045,.900910,.902737,.904528,.906284,.908006,.909695,.911351,.912976,.914570,.916135,.917671,.919179,.920660,.922114,.923543,.924948,.926328,.927685,.929019,.930331,.931621,.932890,.934137,.935365,.936573,.937761,.938931,.940082,.941215,.942330,.943428,.944510,.945575,.946623,.947656,.948674,.949677,.950665,.951639,.952599,.953545,.954477,.955396,.956303,.957196,.958077,.958946,.959803,.960648,.961481,.962303,.963114,.963914,.964703,.965482,.966249,.967007,.967754,.968491,.969218,.969936,.970644,.971343,.972032,.972713,.973385,.974048,.974702,.975348,.975986,.976616,.977237,.977851,.978457,.979053,.979642,.980222,.980795,.981359,.981916,.982465,.983007,.983541,.984068,.984588,.985101,.985607,.986106,.986599,.987085,.987565,.988038,.988505,.988963,.989412,.989853,.990284,.990708,.991123,.991530,.991929,.992321,.992704,.993081,.993450,.993813,.994168,.994516,.994858,.995194,.995523,.995845,.996162,.996466,.996759,.997041,.997312,.997572,.997823,.998064,.998295,.998518,.998733,.998932,.999117,.999289,.999448,.999586,.999705,.999808,.999898,.999958,1.00000,.207209,.309731,.377365,.427560,.467297,.500065,.527858,.551923,.573091,.591943,.608902,.624285,.638337,.651249,.663173,.674236,.684540,.694169,.703196,.711682,.719716,.727339,.734587,.741492,.748082,.754380,.760409,.766188,.771734,.777064,.782191,.787128,.791887,.796479,.800913,.805198,.809342,.813354,.817239,.821005,.824659,.828206,.831652,.835001,.838258,.841427,.844511,.847515,.850442,.853294,.856075,.858788,.861435,.864018,.866542,.869006,.871414,.873768,.876069,.878319,.880521,.882677,.884788,.886856,.888881,.890866,.892811,.894717,.896587,.898421,.900219,.901984,.903716,.905415,.907084,.908722,.910331,.911911,.913463,.914988,.916487,.917962,.919411,.920837,.922240,.923620,.924977,.926314,.927629,.928923,.930197,.931452,.932687,.933904,.935102,.936282,.937445,.938591,.939720,.940832,.941928,.943010,.944075,.945127,.946163,.947185,.948194,.949188,.950169,.951138,.952093,.953035,.953965,.954883,.955789,.956683,.957566,.958438,.959298,.960148,.960986,.961814,.962632,.963439,.964236,.965023,.965801,.966568,.967327,.968076,.968816,.969547,.970269,.970983,.971688,.972384,.973073,.973753,.974425,.975090,.975746,.976393,.977033,.977664,.978288,.978904,.979512,.980112,.980705,.981291,.981870,.982441,.983006,.983564,.984115,.984659,.985197,.985728,.986253,.986772,.987282,.987782,.988275,.988758,.989233,.989700,.990159,.990610,.991053,.991489,.991917,.992337,.992751,.993157,.993557,.993950,.994336,.994716,.995089,.995456,.995810,.996152,.996481,.996800,.997107,.997403,.997689,.997965,.998232,.998489,.998729,.998953,.999161,.999355,.999522,.999665,.999788,.999894,.999959,1.00000,.205667,.307449,.374610,.424465,.463942,.496502,.524125,.548049,.569097,.587846,.604716,.620022,.634007,.646860,.658733,.669750,.680013,.689607,.698603,.707061,.715072,.722676,.729908,.736799,.743378,.749668,.755692,.761467,.767012,.772342,.777471,.782412,.787176,.791774,.796216,.800510,.804664,.808686,.812584,.816362,.820029,.823591,.827051,.830416,.833689,.836874,.839976,.842997,.845941,.848812,.851611,.854343,.857009,.859613,.862156,.864641,.867069,.869444,.871766,.874038,.876262,.878440,.880573,.882663,.884712,.886719,.888688,.890619,.892513,.894371,.896194,.897984,.899741,.901466,.903160,.904824,.906458,.908065,.909643,.911194,.912720,.914221,.915698,.917151,.918581,.919988,.921374,.922737,.924080,.925403,.926705,.927988,.929252,.930497,.931724,.932933,.934124,.935299,.936456,.937598,.938723,.939834,.940929,.942010,.943076,.944128,.945166,.946191,.947203,.948201,.949187,.950160,.951120,.952069,.953006,.953931,.954844,.955747,.956638,.957519,.958389,.959248,.960097,.960936,.961765,.962584,.963393,.964193,.964984,.965765,.966538,.967301,.968056,.968802,.969540,.970270,.970991,.971704,.972410,.973107,.973796,.974478,.975151,.975816,.976473,.977123,.977765,.978400,.979027,.979648,.980261,.980867,.981466,.982059,.982645,.983224,.983797,.984364,.984924,.985478,.986023,.986560,.987088,.987607,.988119,.988622,.989117,.989605,.990084,.990557,.991022,.991479,.991930,.992373,.992810,.993240,.993663,.994080,.994490,.994894,.995285,.995663,.996029,.996384,.996727,.997059,.997380,.997691,.997991,.998283,.998555,.998810,.999049,.999272,.999463,.999628,.999769,.999890,.999960,1.00000,.204550,.305798,.372618,.422230,.461520,.493934,.521437,.545261,.566225,.584903,.601712,.616966,.630905,.643718,.655557,.666545,.676782,.686353,.695330,.703772,.711769,.719361,.726584,.733468,.740042,.746328,.752350,.758124,.763670,.769002,.774134,.779079,.783848,.788453,.792901,.797202,.801365,.805396,.809303,.813092,.816770,.820342,.823814,.827190,.830475,.833673,.836786,.839820,.842777,.845661,.848474,.851219,.853899,.856517,.859074,.861572,.864015,.866404,.868741,.871027,.873266,.875458,.877607,.879712,.881776,.883799,.885783,.887729,.889639,.891513,.893352,.895157,.896930,.898671,.900382,.902062,.903713,.905335,.906930,.908498,.910040,.911558,.913051,.914521,.915967,.917391,.918794,.920174,.921534,.922874,.924193,.925493,.926774,.928036,.929280,.930506,.931715,.932907,.934082,.935240,.936383,.937511,.938625,.939723,.940807,.941878,.942934,.943978,.945008,.946025,.947029,.948021,.949001,.949969,.950925,.951869,.952802,.953724,.954635,.955535,.956425,.957305,.958175,.959034,.959884,.960725,.961556,.962378,.963190,.963994,.964789,.965575,.966353,.967123,.967884,.968637,.969382,.970119,.970849,.971571,.972285,.972990,.973688,.974379,.975061,.975736,.976404,.977064,.977717,.978364,.979003,.979635,.980261,.980880,.981492,.982098,.982697,.983291,.983878,.984459,.985031,.985594,.986150,.986697,.987235,.987766,.988289,.988805,.989312,.989812,.990305,.990791,.991270,.991741,.992206,.992664,.993116,.993561,.993999,.994432,.994851,.995257,.995652,.996035,.996406,.996766,.997115,.997454,.997783,.998101,.998401,.998682,.998946,.999195,.999408,.999592,.999750,.999887,.999960,1.00000,.203643,.304458,.371006,.420423,.459567,.491864,.519275,.543022,.563922,.582547,.599311,.614526,.628433,.641218,.653034,.664001,.674222,.683779,.692744,.701176,.709165,.716751,.723969,.730850,.737421,.743705,.749726,.755501,.761047,.766381,.771515,.776463,.781236,.785844,.790296,.794603,.798771,.802808,.806721,.810516,.814200,.817780,.821260,.824644,.827937,.831143,.834266,.837309,.840275,.843169,.845992,.848747,.851437,.854065,.856633,.859143,.861597,.863997,.866345,.868643,.870893,.873097,.875258,.877375,.879450,.881485,.883482,.885440,.887362,.889248,.891099,.892917,.894702,.896455,.898178,.899870,.901533,.903168,.904775,.906356,.907910,.909441,.910947,.912429,.913889,.915326,.916741,.918135,.919509,.920861,.922194,.923508,.924803,.926079,.927336,.928577,.929799,.931005,.932194,.933367,.934524,.935666,.936794,.937907,.939006,.940091,.941163,.942221,.943266,.944299,.945318,.946326,.947321,.948304,.949276,.950236,.951185,.952123,.953050,.953966,.954872,.955768,.956653,.957530,.958396,.959253,.960101,.960940,.961770,.962591,.963403,.964206,.965002,.965789,.966567,.967338,.968101,.968856,.969603,.970343,.971075,.971799,.972516,.973225,.973926,.974620,.975307,.975986,.976659,.977325,.977983,.978636,.979281,.979920,.980552,.981179,.981798,.982412,.983020,.983621,.984214,.984799,.985376,.985944,.986504,.987057,.987602,.988139,.988669,.989191,.989707,.990215,.990716,.991210,.991698,.992179,.992653,.993121,.993583,.994038,.994481,.994911,.995328,.995735,.996129,.996513,.996886,.997248,.997601,.997943,.998266,.998570,.998856,.999126,.999359,.999560,.999733,.999883,.999960,1.00000,.202314,.302501,.368651,.417787,.456719,.488851,.516128,.539767,.560577,.579127,.595828,.610991,.624853,.637602,.649386,.660328,.670527,.680067,.689019,.697441,.705421,.713001,.720213,.727091,.733660,.739944,.745965,.751741,.757290,.762627,.767766,.772719,.777497,.782111,.786571,.790885,.795061,.799107,.803029,.806833,.810528,.814118,.817608,.821003,.824307,.827525,.830659,.833714,.836693,.839599,.842434,.845202,.847905,.850546,.853127,.855650,.858118,.860531,.862893,.865205,.867469,.869688,.871862,.873994,.876084,.878135,.880146,.882120,.884057,.885958,.887825,.889659,.891460,.893229,.894968,.896677,.898356,.900008,.901631,.903228,.904800,.906347,.907870,.909370,.910847,.912302,.913735,.915147,.916539,.917910,.919261,.920593,.921906,.923201,.924477,.925736,.926978,.928203,.929411,.930603,.931780,.932942,.934089,.935222,.936341,.937447,.938539,.939618,.940683,.941737,.942777,.943806,.944823,.945827,.946821,.947802,.948773,.949733,.950682,.951620,.952549,.953467,.954376,.955275,.956165,.957045,.957917,.958779,.959633,.960478,.961314,.962142,.962962,.963773,.964577,.965373,.966161,.966941,.967714,.968479,.969237,.969987,.970730,.971465,.972193,.972914,.973628,.974335,.975036,.975729,.976416,.977097,.977771,.978439,.979100,.979755,.980405,.981048,.981685,.982316,.982940,.983555,.984163,.984762,.985355,.985939,.986517,.987087,.987650,.988205,.988754,.989297,.989832,.990361,.990883,.991399,.991909,.992412,.992909,.993400,.993879,.994345,.994800,.995243,.995675,.996096,.996506,.996906,.997296,.997676,.998036,.998377,.998700,.999005,.999271,.999502,.999703,.999878,.999961,1.00000,.201437,.301206,.367092,.416041,.454831,.486852,.514039,.537604,.558354,.576852,.593510,.608636,.622467,.635189,.646951,.657875,.668058,.677585,.686526,.694940,.702913,.710486,.717694,.724567,.731132,.737414,.743433,.749208,.754756,.760092,.765231,.770184,.774964,.779580,.784041,.788357,.792536,.796585,.800510,.804318,.808016,.811610,.815105,.818505,.821815,.825039,.828179,.831241,.834227,.837139,.839982,.842758,.845470,.848119,.850708,.853240,.855716,.858139,.860510,.862831,.865105,.867333,.869517,.871659,.873759,.875819,.877840,.879824,.881771,.883683,.885560,.887404,.889216,.890995,.892744,.894464,.896154,.897816,.899450,.901057,.902640,.904197,.905732,.907242,.908731,.910197,.911641,.913065,.914467,.915850,.917213,.918557,.919882,.921188,.922477,.923748,.925001,.926238,.927458,.928663,.929852,.931026,.932186,.933332,.934464,.935582,.936687,.937779,.938859,.939925,.940979,.942022,.943052,.944070,.945077,.946073,.947058,.948031,.948995,.949947,.950890,.951823,.952746,.953660,.954565,.955460,.956347,.957225,.958094,.958955,.959807,.960651,.961487,.962315,.963135,.963947,.964751,.965548,.966338,.967120,.967895,.968662,.969423,.970176,.970922,.971661,.972394,.973119,.973838,.974551,.975257,.975957,.976651,.977338,.978020,.978695,.979364,.980028,.980686,.981338,.981982,.982619,.983248,.983870,.984485,.985093,.985693,.986286,.986873,.987453,.988026,.988593,.989153,.989707,.990255,.990796,.991331,.991861,.992384,.992901,.993407,.993900,.994382,.994853,.995313,.995763,.996202,.996631,.997049,.997459,.997848,.998218,.998570,.998904,.999197,.999453,.999677,.999873,.999961,1.00000]
	# Z=18
	      Z18=[.161857,.242949,.297119,.337829,.370462,.397712,.421116,.441636,.459912,.476394,.491408,.505199,.517954,.529823,.540922,.551349,.561182,.570488,.579321,.587730,.595751,.603420,.610768,.617820,.624602,.631133,.637432,.643516,.649399,.655096,.660618,.665975,.671179,.676238,.681160,.685953,.690624,.695180,.699625,.703967,.708208,.712353,.716406,.720373,.724256,.728059,.731786,.735439,.739023,.742539,.745991,.749380,.752709,.755981,.759197,.762360,.765471,.768532,.771545,.774512,.777432,.780309,.783142,.785935,.788686,.791399,.794075,.796713,.799316,.801884,.804419,.806921,.809391,.811830,.814239,.816618,.818970,.821293,.823589,.825859,.828103,.830321,.832515,.834685,.836831,.838954,.841055,.843134,.845191,.847227,.849243,.851239,.853215,.855171,.857109,.859029,.860931,.862815,.864681,.866531,.868364,.870181,.871982,.873767,.875537,.877292,.879032,.880757,.882469,.884166,.885850,.887521,.889178,.890822,.892453,.894072,.895679,.897273,.898856,.900427,.901986,.903535,.905072,.906599,.908115,.909620,.911116,.912601,.914076,.915541,.916997,.918443,.919880,.921307,.922726,.924135,.925536,.926928,.928311,.929686,.931053,.932411,.933762,.935104,.936439,.937765,.939084,.940396,.941700,.942997,.944286,.945568,.946844,.948112,.949373,.950628,.951876,.953117,.954352,.955581,.956802,.958018,.959226,.960429,.961625,.962815,.963998,.965176,.966348,.967513,.968673,.969827,.970975,.972118,.973255,.974387,.975513,.976633,.977749,.978859,.979963,.981063,.982157,.983245,.984329,.985407,.986480,.987549,.988612,.989670,.990724,.991772,.992816,.993856,.994891,.995921,.996947,.997969,.998987,1.00000,.166240,.249453,.304990,.346690,.380087,.407949,.431857,.452800,.471437,.488229,.503512,.517537,.530497,.542545,.553802,.564368,.574323,.583736,.592663,.601154,.609247,.616979,.624382,.631482,.638304,.644870,.651198,.657305,.663207,.668918,.674449,.679812,.685017,.690073,.694989,.699773,.704432,.708972,.713399,.717720,.721938,.726058,.730085,.734023,.737876,.741648,.745342,.748961,.752509,.755988,.759400,.762750,.766038,.769268,.772441,.775559,.778624,.781639,.784604,.787522,.790393,.793219,.796001,.798741,.801440,.804099,.806719,.809302,.811848,.814359,.816835,.819279,.821689,.824068,.826416,.828734,.831023,.833284,.835517,.837722,.839901,.842054,.844181,.846282,.848360,.850413,.852444,.854451,.856436,.858399,.860342,.862263,.864164,.866044,.867906,.869748,.871571,.873376,.875164,.876933,.878685,.880420,.882138,.883839,.885525,.887194,.888848,.890487,.892110,.893719,.895313,.896893,.898459,.900012,.901551,.903076,.904589,.906089,.907576,.909051,.910514,.911965,.913405,.914833,.916249,.917655,.919050,.920434,.921807,.923170,.924523,.925866,.927198,.928521,.929835,.931138,.932433,.933718,.934994,.936261,.937520,.938770,.940011,.941245,.942470,.943687,.944897,.946098,.947292,.948479,.949657,.950829,.951993,.953150,.954300,.955443,.956578,.957707,.958830,.959945,.961055,.962158,.963254,.964345,.965429,.966508,.967580,.968647,.969708,.970763,.971812,.972856,.973895,.974927,.975955,.976977,.977994,.979006,.980012,.981014,.982010,.983001,.983987,.984968,.985944,.986915,.987881,.988842,.989799,.990751,.991698,.992639,.993576,.994508,.995435,.996357,.997275,.998188,.999096,1.00000,.169937,.255034,.311850,.354527,.388720,.417257,.441754,.463222,.482332,.499558,.515241,.529640,.542950,.555329,.566899,.577763,.588003,.597689,.606879,.615623,.623949,.631897,.639499,.646783,.653775,.660499,.666972,.673214,.679241,.685066,.690703,.696163,.701458,.706596,.711587,.716440,.721161,.725757,.730235,.734601,.738857,.743009,.747061,.751018,.754885,.758664,.762360,.765977,.769517,.772983,.776379,.779707,.782970,.786170,.789310,.792391,.795416,.798387,.801304,.804172,.806989,.809758,.812481,.815159,.817793,.820384,.822935,.825445,.827917,.830351,.832749,.835111,.837438,.839732,.841993,.844222,.846421,.848588,.850727,.852837,.854918,.856972,.859000,.861001,.862977,.864928,.866855,.868758,.870638,.872495,.874330,.876143,.877935,.879706,.881457,.883187,.884899,.886591,.888265,.889920,.891557,.893176,.894778,.896363,.897932,.899484,.901020,.902540,.904045,.905534,.907009,.908469,.909915,.911346,.912764,.914168,.915558,.916936,.918300,.919652,.920991,.922318,.923634,.924937,.926229,.927510,.928780,.930038,.931286,.932523,.933750,.934966,.936172,.937368,.938554,.939731,.940897,.942055,.943203,.944342,.945472,.946593,.947706,.948810,.949906,.950993,.952072,.953143,.954207,.955262,.956310,.957350,.958382,.959407,.960425,.961436,.962439,.963435,.964425,.965407,.966383,.967352,.968315,.969271,.970221,.971165,.972103,.973034,.973960,.974879,.975793,.976701,.977603,.978499,.979390,.980275,.981155,.982029,.982898,.983762,.984620,.985473,.986321,.987164,.988002,.988835,.989663,.990486,.991304,.992118,.992926,.993730,.994530,.995325,.996115,.996901,.997682,.998459,.999232,1.00000,.174571,.261907,.320166,.363885,.398881,.428061,.453087,.474998,.494486,.512035,.527998,.542639,.556163,.568727,.580461,.591467,.601833,.611628,.620913,.629739,.638139,.646151,.653809,.661143,.668178,.674938,.681442,.687710,.693758,.699599,.705248,.710717,.716016,.721155,.726144,.730991,.735703,.740288,.744752,.749102,.753338,.757466,.761491,.765418,.769251,.772994,.776651,.780225,.783721,.787141,.790487,.793764,.796974,.800118,.803200,.806222,.809185,.812093,.814946,.817747,.820496,.823195,.825846,.828449,.831008,.833522,.835993,.838423,.840813,.843164,.845477,.847753,.849993,.852198,.854369,.856507,.858613,.860687,.862731,.864745,.866731,.868688,.870619,.872523,.874400,.876253,.878081,.879884,.881664,.883421,.885155,.886867,.888558,.890227,.891876,.893504,.895113,.896702,.898272,.899824,.901357,.902873,.904372,.905854,.907320,.908769,.910202,.911620,.913023,.914410,.915783,.917141,.918485,.919815,.921132,.922435,.923724,.925001,.926264,.927516,.928755,.929982,.931197,.932401,.933593,.934774,.935944,.937103,.938251,.939389,.940517,.941634,.942741,.943839,.944926,.946004,.947073,.948132,.949182,.950223,.951256,.952279,.953294,.954300,.955297,.956287,.957268,.958241,.959206,.960163,.961113,.962055,.962989,.963916,.964836,.965748,.966653,.967551,.968442,.969326,.970204,.971075,.971939,.972797,.973648,.974494,.975333,.976165,.976992,.977813,.978628,.979437,.980240,.981038,.981830,.982616,.983397,.984172,.984942,.985707,.986467,.987221,.987971,.988715,.989455,.990190,.990920,.991645,.992366,.993082,.993794,.994501,.995203,.995901,.996595,.997284,.997970,.998651,.999327,1.00000,.180780,.271120,.331312,.376431,.412505,.442551,.468289,.490798,.510794,.528781,.545123,.560095,.573908,.586726,.598684,.609887,.620426,.630374,.639792,.648735,.657230,.665319,.673037,.680414,.687478,.694253,.700761,.707020,.713049,.718861,.724472,.729894,.735138,.740216,.745135,.749906,.754536,.759033,.763403,.767654,.771788,.775811,.779729,.783546,.787267,.790897,.794438,.797894,.801270,.804569,.807792,.810945,.814028,.817045,.819998,.822890,.825722,.828497,.831217,.833883,.836497,.839062,.841579,.844049,.846473,.848854,.851192,.853489,.855746,.857964,.860145,.862288,.864396,.866469,.868509,.870516,.872490,.874434,.876347,.878231,.880087,.881914,.883715,.885490,.887239,.888964,.890663,.892339,.893992,.895622,.897230,.898815,.900380,.901924,.903447,.904951,.906435,.907900,.909346,.910774,.912184,.913577,.914953,.916313,.917656,.918984,.920296,.921592,.922874,.924141,.925393,.926631,.927855,.929066,.930263,.931447,.932618,.933776,.934921,.936055,.937176,.938286,.939384,.940471,.941547,.942611,.943666,.944709,.945742,.946765,.947778,.948780,.949773,.950757,.951731,.952695,.953651,.954597,.955534,.956463,.957383,.958294,.959198,.960093,.960979,.961858,.962729,.963592,.964448,.965296,.966137,.966970,.967796,.968615,.969426,.970231,.971029,.971820,.972605,.973383,.974154,.974919,.975678,.976431,.977177,.977918,.978652,.979381,.980104,.980821,.981533,.982238,.982939,.983634,.984323,.985007,.985686,.986360,.987028,.987692,.988350,.989004,.989653,.990297,.990936,.991571,.992201,.992827,.993448,.994065,.994677,.995285,.995889,.996488,.997084,.997675,.998262,.998845,.999425,1.00000,.192894,.288960,.352751,.400405,.438377,.469896,.496805,.520258,.541022,.559636,.576491,.591880,.606029,.619116,.631282,.642643,.653293,.663311,.672765,.681710,.690190,.698245,.705914,.713228,.720216,.726904,.733313,.739464,.745375,.751062,.756539,.761820,.766916,.771840,.776599,.781205,.785665,.789987,.794178,.798245,.802192,.806026,.809751,.813372,.816895,.820323,.823661,.826913,.830082,.833171,.836184,.839125,.841994,.844796,.847533,.850207,.852821,.855376,.857875,.860320,.862712,.865054,.867347,.869593,.871794,.873950,.876063,.878134,.880166,.882158,.884112,.886029,.887911,.889758,.891571,.893351,.895099,.896816,.898502,.900160,.901789,.903392,.904968,.906519,.908045,.909546,.911023,.912478,.913909,.915319,.916707,.918074,.919420,.920746,.922052,.923339,.924607,.925856,.927088,.928302,.929499,.930680,.931845,.932994,.934128,.935248,.936352,.937442,.938518,.939580,.940628,.941663,.942685,.943694,.944690,.945675,.946647,.947607,.948555,.949492,.950418,.951332,.952237,.953131,.954014,.954888,.955751,.956605,.957449,.958284,.959109,.959926,.960733,.961531,.962321,.963102,.963875,.964639,.965395,.966143,.966884,.967616,.968341,.969059,.969769,.970471,.971167,.971855,.972537,.973211,.973879,.974540,.975195,.975843,.976484,.977120,.977749,.978372,.978988,.979599,.980204,.980804,.981398,.981986,.982568,.983145,.983717,.984284,.984845,.985401,.985952,.986498,.987039,.987575,.988106,.988632,.989154,.989671,.990184,.990691,.991195,.991694,.992189,.992680,.993166,.993649,.994127,.994601,.995072,.995538,.996001,.996460,.996915,.997366,.997813,.998258,.998698,.999135,.999569,1.00000,.203619,.304705,.371618,.421447,.461026,.493775,.521647,.545861,.567232,.586329,.603568,.619257,.633637,.646895,.659181,.670617,.681305,.691326,.700754,.709646,.718055,.726026,.733597,.740802,.747671,.754229,.760499,.766504,.772261,.777787,.783097,.788206,.793125,.797865,.802439,.806854,.811119,.815244,.819234,.823098,.826841,.830472,.833993,.837412,.840732,.843959,.847095,.850145,.853113,.856002,.858816,.861556,.864227,.866831,.869370,.871847,.874265,.876624,.878929,.881179,.883378,.885528,.887631,.889687,.891699,.893667,.895594,.897480,.899327,.901136,.902908,.904644,.906346,.908013,.909648,.911251,.912823,.914365,.915878,.917363,.918820,.920251,.921656,.923036,.924392,.925724,.927034,.928320,.929584,.930827,.932049,.933251,.934433,.935595,.936738,.937862,.938968,.940056,.941127,.942181,.943219,.944241,.945247,.946238,.947214,.948175,.949122,.950055,.950974,.951880,.952773,.953652,.954519,.955374,.956216,.957047,.957866,.958673,.959469,.960254,.961028,.961792,.962546,.963289,.964023,.964747,.965461,.966166,.966862,.967549,.968226,.968895,.969556,.970208,.970852,.971487,.972115,.972735,.973347,.973951,.974548,.975137,.975720,.976296,.976864,.977426,.977981,.978530,.979072,.979608,.980137,.980660,.981177,.981688,.982194,.982693,.983187,.983675,.984157,.984634,.985106,.985572,.986033,.986488,.986939,.987384,.987824,.988260,.988690,.989116,.989537,.989953,.990364,.990772,.991174,.991572,.991966,.992356,.992741,.993122,.993499,.993873,.994242,.994607,.994969,.995327,.995682,.996033,.996380,.996724,.997065,.997402,.997737,.998069,.998398,.998724,.999047,.999368,.999685,1.00000,.213298,.318910,.388634,.440419,.481444,.515299,.544036,.568937,.590855,.610390,.627976,.643941,.658534,.671952,.684355,.695869,.706601,.716638,.726055,.734913,.743273,.751179,.758672,.765787,.772554,.779002,.785154,.791032,.796655,.802041,.807205,.812162,.816925,.821505,.825913,.830160,.834254,.838204,.842017,.845701,.849264,.852712,.856051,.859286,.862422,.865464,.868415,.871280,.874062,.876766,.879393,.881948,.884433,.886851,.889205,.891497,.893729,.895904,.898023,.900090,.902106,.904074,.905995,.907871,.909703,.911493,.913242,.914951,.916623,.918257,.919855,.921418,.922948,.924445,.925910,.927344,.928748,.930123,.931470,.932789,.934082,.935350,.936593,.937812,.939008,.940181,.941332,.942461,.943569,.944657,.945724,.946772,.947801,.948812,.949804,.950779,.951736,.952677,.953601,.954509,.955401,.956278,.957140,.957988,.958821,.959640,.960446,.961238,.962017,.962784,.963538,.964280,.965009,.965728,.966434,.967129,.967814,.968487,.969150,.969802,.970445,.971076,.971698,.972311,.972913,.973506,.974090,.974665,.975231,.975789,.976338,.976878,.977410,.977935,.978451,.978960,.979461,.979954,.980440,.980919,.981391,.981856,.982314,.982765,.983209,.983647,.984079,.984504,.984923,.985336,.985743,.986144,.986540,.986929,.987314,.987692,.988065,.988433,.988796,.989154,.989506,.989854,.990196,.990534,.990866,.991194,.991517,.991836,.992150,.992459,.992765,.993065,.993362,.993655,.993943,.994227,.994508,.994784,.995057,.995326,.995591,.995853,.996110,.996364,.996615,.996862,.997106,.997346,.997583,.997817,.998047,.998275,.998499,.998721,.998940,.999157,.999371,.999583,.999793,1.00000,.224767,.335645,.408572,.462534,.505125,.540142,.569754,.595317,.617735,.637641,.655495,.671641,.686346,.699817,.712222,.723695,.734349,.744276,.753554,.762251,.770437,.778160,.785461,.792377,.798939,.805175,.811110,.816766,.822165,.827322,.832255,.836978,.841505,.845848,.850017,.854024,.857877,.861585,.865156,.868597,.871919,.875129,.878231,.881232,.884135,.886946,.889669,.892308,.894866,.897346,.899753,.902089,.904358,.906561,.908702,.910783,.912806,.914774,.916688,.918551,.920366,.922135,.923858,.925539,.927178,.928777,.930336,.931858,.933344,.934795,.936211,.937594,.938945,.940266,.941556,.942817,.944050,.945255,.946434,.947586,.948714,.949817,.950897,.951954,.952988,.954000,.954991,.955962,.956912,.957843,.958755,.959649,.960524,.961382,.962223,.963047,.963855,.964646,.965423,.966184,.966930,.967662,.968380,.969083,.969773,.970450,.971113,.971765,.972403,.973030,.973645,.974248,.974840,.975422,.975992,.976552,.977102,.977641,.978171,.978691,.979202,.979702,.980194,.980676,.981149,.981614,.982070,.982517,.982956,.983387,.983811,.984226,.984635,.985035,.985429,.985815,.986195,.986567,.986933,.987293,.987646,.987992,.988332,.988666,.988993,.989315,.989630,.989940,.990244,.990542,.990836,.991123,.991406,.991684,.991956,.992224,.992487,.992745,.992998,.993247,.993491,.993730,.993965,.994195,.994420,.994641,.994857,.995069,.995277,.995481,.995681,.995877,.996069,.996257,.996442,.996623,.996800,.996975,.997145,.997313,.997477,.997637,.997794,.997947,.998097,.998244,.998388,.998528,.998666,.998800,.998932,.999061,.999187,.999311,.999432,.999550,.999666,.999779,.999891,1.00000,.228268,.340735,.414618,.469220,.512264,.547610,.577464,.603204,.625751,.645746,.663658,.679837,.694554,.708020,.720404,.731845,.742456,.752331,.761549,.770178,.778296,.785949,.793180,.800024,.806513,.812677,.818538,.824122,.829446,.834529,.839388,.844038,.848491,.852760,.856856,.860789,.864569,.868204,.871702,.875071,.878323,.881462,.884496,.887429,.890265,.893010,.895668,.898242,.900736,.903155,.905500,.907775,.909984,.912128,.914210,.916233,.918199,.920111,.921969,.923777,.925538,.927252,.928923,.930550,.932137,.933683,.935191,.936662,.938097,.939497,.940863,.942197,.943499,.944771,.946013,.947226,.948411,.949569,.950702,.951808,.952890,.953948,.954982,.955994,.956983,.957951,.958898,.959825,.960732,.961620,.962489,.963340,.964173,.964989,.965788,.966571,.967338,.968089,.968825,.969546,.970253,.970945,.971623,.972287,.972938,.973575,.974200,.974813,.975413,.976002,.976579,.977145,.977700,.978244,.978777,.979300,.979814,.980317,.980811,.981295,.981770,.982235,.982691,.983138,.983576,.984005,.984426,.984839,.985243,.985640,.986029,.986411,.986785,.987152,.987512,.987865,.988211,.988550,.988884,.989210,.989531,.989844,.990151,.990452,.990747,.991036,.991319,.991596,.991867,.992134,.992394,.992650,.992900,.993146,.993386,.993622,.993853,.994080,.994302,.994519,.994732,.994940,.995143,.995341,.995534,.995724,.995908,.996089,.996265,.996438,.996606,.996771,.996932,.997089,.997243,.997393,.997540,.997683,.997823,.997960,.998094,.998223,.998349,.998471,.998590,.998705,.998818,.998927,.999033,.999136,.999236,.999332,.999426,.999517,.999604,.999689,.999771,.999850,.999926,1.00000,.227136,.339046,.412565,.466900,.509733,.544907,.574616,.600232,.622670,.642569,.660396,.676498,.691145,.704547,.716874,.728261,.738822,.748651,.757826,.766416,.774502,.782131,.789343,.796175,.802658,.808819,.814683,.820272,.825606,.830702,.835577,.840244,.844718,.849010,.853130,.857090,.860899,.864564,.868093,.871495,.874779,.877953,.881022,.883990,.886862,.889644,.892338,.894950,.897482,.899938,.902322,.904635,.906882,.909065,.911187,.913249,.915254,.917205,.919103,.920951,.922751,.924504,.926214,.927880,.929505,.931090,.932637,.934145,.935618,.937056,.938460,.939831,.941171,.942479,.943758,.945008,.946229,.947424,.948592,.949734,.950851,.951944,.953014,.954060,.955084,.956086,.957068,.958028,.958969,.959890,.960793,.961677,.962542,.963391,.964222,.965037,.965835,.966618,.967385,.968138,.968875,.969597,.970306,.971000,.971681,.972348,.973002,.973644,.974273,.974891,.975496,.976090,.976673,.977244,.977805,.978356,.978896,.979426,.979946,.980457,.980957,.981448,.981929,.982401,.982864,.983318,.983763,.984199,.984627,.985047,.985459,.985864,.986260,.986649,.987031,.987406,.987773,.988134,.988488,.988835,.989176,.989509,.989835,.990155,.990468,.990775,.991076,.991370,.991659,.991942,.992219,.992490,.992756,.993017,.993273,.993523,.993768,.994009,.994245,.994476,.994701,.994921,.995135,.995344,.995548,.995747,.995941,.996130,.996314,.996494,.996669,.996840,.997007,.997170,.997328,.997483,.997634,.997782,.997926,.998066,.998201,.998332,.998459,.998581,.998699,.998813,.998923,.999030,.999132,.999232,.999327,.999417,.999504,.999587,.999666,.999740,.999811,.999878,.999941,1.00000,.225346,.336382,.409331,.463249,.505756,.540664,.570151,.595578,.617851,.637605,.655303,.671290,.685833,.699142,.711382,.722691,.733180,.742943,.752057,.760590,.768631,.776225,.783413,.790228,.796702,.802861,.808729,.814328,.819677,.824792,.829691,.834387,.838892,.843218,.847377,.851377,.855228,.858938,.862515,.865966,.869301,.872526,.875647,.878668,.881595,.884431,.887181,.889848,.892437,.894950,.897391,.899762,.902067,.904309,.906489,.908609,.910674,.912683,.914641,.916547,.918406,.920217,.921984,.923708,.925390,.927031,.928633,.930197,.931725,.933217,.934675,.936099,.937491,.938852,.940183,.941485,.942757,.944003,.945221,.946413,.947579,.948721,.949839,.950933,.952004,.953053,.954081,.955087,.956073,.957039,.957986,.958914,.959823,.960715,.961588,.962445,.963285,.964109,.964918,.965710,.966488,.967250,.967998,.968732,.969451,.970158,.970851,.971531,.972198,.972853,.973496,.974128,.974747,.975356,.975953,.976540,.977116,.977682,.978238,.978783,.979319,.979845,.980361,.980867,.981364,.981852,.982330,.982800,.983262,.983715,.984159,.984596,.985025,.985446,.985860,.986266,.986665,.987057,.987442,.987820,.988191,.988554,.988910,.989259,.989601,.989936,.990265,.990587,.990903,.991213,.991516,.991814,.992106,.992393,.992673,.992949,.993219,.993484,.993744,.993998,.994247,.994489,.994726,.994957,.995181,.995401,.995615,.995824,.996028,.996226,.996420,.996610,.996794,.996974,.997150,.997322,.997489,.997653,.997812,.997968,.998117,.998261,.998400,.998533,.998661,.998784,.998902,.999016,.999126,.999231,.999331,.999425,.999515,.999600,.999679,.999753,.999822,.999887,.999946,1.00000,.221496,.330812,.402747,.456001,.498054,.532645,.561911,.587187,.609365,.629067,.646746,.662743,.677318,.690677,.702984,.714373,.724953,.734817,.744040,.752690,.760846,.768554,.775855,.782782,.789367,.795636,.801613,.807320,.812776,.817998,.823002,.827801,.832409,.836838,.841098,.845198,.849148,.852957,.856631,.860178,.863606,.866922,.870131,.873238,.876247,.879164,.881993,.884737,.887400,.889986,.892498,.894938,.897311,.899618,.901862,.904045,.906171,.908240,.910256,.912219,.914134,.916001,.917822,.919599,.921333,.923026,.924678,.926293,.927869,.929410,.930915,.932386,.933825,.935231,.936607,.937952,.939268,.940556,.941817,.943050,.944258,.945442,.946601,.947736,.948848,.949938,.951007,.952054,.953081,.954087,.955075,.956043,.956992,.957923,.958837,.959733,.960613,.961476,.962324,.963155,.963972,.964773,.965559,.966332,.967090,.967834,.968566,.969284,.969989,.970682,.971363,.972032,.972689,.973335,.973969,.974593,.975206,.975809,.976401,.976983,.977555,.978116,.978668,.979210,.979742,.980265,.980779,.981283,.981779,.982267,.982745,.983216,.983679,.984133,.984580,.985019,.985451,.985875,.986293,.986703,.987106,.987500,.987888,.988268,.988640,.989006,.989365,.989717,.990062,.990401,.990734,.991061,.991381,.991696,.992005,.992308,.992605,.992897,.993184,.993465,.993740,.994007,.994268,.994522,.994770,.995011,.995247,.995476,.995700,.995918,.996131,.996339,.996541,.996739,.996931,.997119,.997302,.997481,.997655,.997825,.997989,.998146,.998296,.998441,.998580,.998714,.998843,.998966,.999085,.999199,.999307,.999409,.999505,.999595,.999678,.999755,.999825,.999890,.999948,1.00000,.219781,.328289,.399719,.452618,.494405,.528790,.557892,.583037,.605106,.624719,.642325,.658260,.672785,.686103,.698377,.709739,.720298,.730146,.739357,.747999,.756151,.763861,.771167,.778103,.784700,.790983,.796978,.802704,.808182,.813427,.818456,.823283,.827919,.832377,.836668,.840800,.844783,.848625,.852334,.855917,.859381,.862733,.865979,.869123,.872170,.875125,.877991,.880774,.883475,.886100,.888650,.891129,.893541,.895887,.898170,.900393,.902557,.904666,.906720,.908723,.910677,.912583,.914443,.916258,.918031,.919762,.921453,.923106,.924720,.926299,.927842,.929351,.930827,.932270,.933683,.935065,.936418,.937743,.939040,.940309,.941553,.942772,.943967,.945138,.946285,.947410,.948513,.949595,.950656,.951697,.952718,.953719,.954702,.955667,.956613,.957543,.958455,.959350,.960230,.961093,.961941,.962774,.963592,.964395,.965184,.965960,.966722,.967470,.968206,.968929,.969639,.970338,.971024,.971699,.972363,.973015,.973657,.974288,.974908,.975519,.976118,.976708,.977287,.977856,.978416,.978966,.979506,.980038,.980560,.981074,.981579,.982076,.982565,.983045,.983518,.983982,.984439,.984889,.985331,.985766,.986194,.986613,.987024,.987428,.987825,.988214,.988597,.988972,.989341,.989703,.990058,.990407,.990750,.991087,.991418,.991743,.992062,.992375,.992683,.992986,.993281,.993568,.993849,.994123,.994389,.994650,.994904,.995151,.995393,.995629,.995859,.996083,.996302,.996515,.996723,.996927,.997125,.997319,.997507,.997692,.997868,.998038,.998201,.998357,.998507,.998651,.998789,.998921,.999048,.999170,.999285,.999393,.999494,.999589,.999676,.999755,.999827,.999893,.999950,1.00000,.218323,.326144,.397142,.449737,.491296,.525504,.554464,.579494,.601469,.621004,.638544,.654426,.668906,.682187,.694430,.705767,.716306,.726137,.735336,.743969,.752117,.759826,.767134,.774076,.780681,.786975,.792983,.798724,.804219,.809483,.814533,.819381,.824040,.828522,.832838,.836997,.841007,.844877,.848614,.852226,.855720,.859102,.862379,.865553,.868632,.871618,.874516,.877330,.880064,.882721,.885303,.887815,.890259,.892638,.894953,.897209,.899406,.901547,.903635,.905670,.907657,.909595,.911488,.913336,.915141,.916904,.918628,.920312,.921959,.923569,.925144,.926685,.928192,.929667,.931111,.932525,.933909,.935264,.936592,.937892,.939167,.940416,.941641,.942841,.944019,.945174,.946306,.947417,.948508,.949577,.950627,.951658,.952669,.953662,.954637,.955594,.956534,.957458,.958365,.959256,.960131,.960991,.961836,.962666,.963482,.964284,.965072,.965847,.966609,.967358,.968094,.968818,.969531,.970231,.970920,.971598,.972264,.972920,.973565,.974200,.974824,.975438,.976041,.976634,.977218,.977791,.978356,.978911,.979457,.979994,.980522,.981042,.981553,.982056,.982552,.983039,.983518,.983990,.984454,.984911,.985360,.985801,.986234,.986659,.987077,.987488,.987891,.988287,.988676,.989059,.989435,.989804,.990167,.990523,.990874,.991218,.991557,.991889,.992216,.992538,.992851,.993157,.993456,.993747,.994031,.994309,.994579,.994844,.995101,.995353,.995598,.995838,.996072,.996300,.996523,.996741,.996953,.997160,.997363,.997560,.997749,.997931,.998105,.998272,.998432,.998586,.998733,.998874,.999009,.999139,.999261,.999375,.999482,.999582,.999672,.999754,.999827,.999894,.999951,1.00000,.215997,.322719,.393026,.445133,.486326,.520248,.548980,.573824,.595646,.615054,.632489,.648282,.662688,.675907,.688099,.699393,.709898,.719702,.728880,.737496,.745635,.753340,.760650,.767598,.774213,.780522,.786547,.792310,.797828,.803119,.808197,.813076,.817769,.822286,.826639,.830835,.834885,.838796,.842576,.846231,.849769,.853196,.856517,.859738,.862863,.865897,.868842,.871704,.874486,.877191,.879823,.882384,.884877,.887305,.889671,.891976,.894223,.896414,.898552,.900638,.902674,.904663,.906605,.908503,.910359,.912172,.913945,.915680,.917376,.919036,.920661,.922251,.923808,.925333,.926826,.928288,.929721,.931125,.932501,.933850,.935173,.936470,.937742,.938991,.940216,.941418,.942598,.943756,.944893,.946009,.947105,.948182,.949239,.950278,.951298,.952301,.953286,.954254,.955206,.956141,.957061,.957965,.958854,.959728,.960587,.961432,.962264,.963081,.963886,.964677,.965456,.966222,.966976,.967718,.968449,.969167,.969875,.970572,.971257,.971932,.972597,.973250,.973894,.974527,.975150,.975763,.976366,.976960,.977545,.978121,.978687,.979246,.979795,.980336,.980869,.981394,.981910,.982419,.982921,.983414,.983900,.984377,.984846,.985307,.985761,.986207,.986645,.987077,.987501,.987918,.988328,.988732,.989128,.989519,.989903,.990281,.990652,.991018,.991377,.991731,.992077,.992414,.992744,.993066,.993380,.993687,.993987,.994280,.994566,.994845,.995118,.995385,.995646,.995900,.996149,.996392,.996629,.996861,.997088,.997309,.997521,.997725,.997920,.998106,.998285,.998457,.998621,.998779,.998930,.999075,.999210,.999336,.999453,.999563,.999661,.999748,.999826,.999896,.999953,1.00000,.214244,.320136,.389919,.441655,.482568,.516270,.544826,.569525,.591228,.610536,.627887,.643609,.657955,.671123,.683273,.694532,.705007,.714786,.723944,.732544,.740672,.748370,.755677,.762625,.769243,.775559,.781593,.787367,.792898,.798204,.803299,.808197,.812910,.817449,.821824,.826045,.830120,.834057,.837864,.841547,.845114,.848570,.851922,.855174,.858331,.861396,.864375,.867270,.870086,.872825,.875491,.878087,.880615,.883079,.885480,.887821,.890105,.892333,.894507,.896629,.898703,.900728,.902708,.904643,.906535,.908386,.910196,.911968,.913702,.915399,.917060,.918688,.920281,.921843,.923373,.924872,.926341,.927782,.929195,.930580,.931939,.933273,.934581,.935866,.937127,.938365,.939581,.940775,.941947,.943099,.944231,.945343,.946435,.947509,.948565,.949602,.950622,.951625,.952611,.953581,.954535,.955473,.956396,.957304,.958197,.959076,.959941,.960793,.961631,.962456,.963267,.964067,.964854,.965629,.966392,.967143,.967883,.968612,.969330,.970037,.970734,.971419,.972094,.972759,.973414,.974058,.974693,.975318,.975934,.976541,.977139,.977728,.978308,.978879,.979443,.979998,.980545,.981084,.981615,.982139,.982654,.983160,.983659,.984150,.984632,.985107,.985575,.986035,.986488,.986933,.987372,.987803,.988228,.988647,.989058,.989464,.989863,.990256,.990642,.991023,.991396,.991759,.992115,.992463,.992802,.993134,.993459,.993776,.994087,.994390,.994687,.994977,.995260,.995537,.995808,.996073,.996332,.996586,.996834,.997076,.997308,.997531,.997745,.997949,.998145,.998333,.998513,.998686,.998852,.999011,.999158,.999296,.999424,.999543,.999648,.999741,.999823,.999896,.999954,1.00000,.211179,.315613,.384473,.435554,.475971,.509283,.537524,.561965,.583452,.602579,.619777,.635369,.649604,.662678,.674746,.685937,.696354,.706084,.715202,.723769,.731872,.739552,.746849,.753792,.760412,.766734,.772779,.778568,.784118,.789447,.794568,.799494,.804239,.808812,.813223,.817483,.821598,.825578,.829429,.833157,.836771,.840276,.843678,.846980,.850188,.853306,.856338,.859288,.862158,.864953,.867675,.870328,.872914,.875435,.877894,.880294,.882637,.884924,.887158,.889340,.891473,.893560,.895600,.897596,.899549,.901461,.903333,.905166,.906961,.908720,.910444,.912133,.913788,.915412,.917003,.918564,.920096,.921598,.923073,.924520,.925941,.927336,.928706,.930053,.931375,.932675,.933952,.935208,.936442,.937655,.938848,.940021,.941175,.942310,.943426,.944524,.945605,.946668,.947715,.948745,.949759,.950757,.951740,.952708,.953661,.954599,.955524,.956435,.957332,.958216,.959087,.959945,.960791,.961625,.962446,.963256,.964054,.964841,.965617,.966382,.967136,.967879,.968612,.969334,.970046,.970748,.971440,.972122,.972794,.973458,.974112,.974757,.975394,.976022,.976641,.977252,.977854,.978449,.979035,.979614,.980184,.980746,.981299,.981844,.982381,.982911,.983432,.983946,.984453,.984952,.985444,.985928,.986406,.986877,.987342,.987800,.988251,.988696,.989134,.989567,.989990,.990405,.990810,.991208,.991597,.991978,.992351,.992717,.993075,.993426,.993769,.994105,.994435,.994757,.995074,.995383,.995687,.995984,.996275,.996560,.996834,.997097,.997349,.997592,.997824,.998048,.998262,.998468,.998666,.998856,.999032,.999196,.999348,.999489,.999612,.999720,.999814,.999895,.999956,1.00000,.209151,.312619,.380867,.431511,.471597,.504648,.532677,.556943,.578285,.597289,.614382,.629885,.644043,.657052,.669064,.680206,.690582,.700278,.709366,.717908,.725991,.733658,.740944,.747881,.754499,.760821,.766870,.772666,.778226,.783566,.788701,.793643,.798405,.802997,.807430,.811711,.815851,.819855,.823732,.827488,.831130,.834663,.838094,.841427,.844665,.847815,.850878,.853860,.856763,.859591,.862347,.865033,.867653,.870209,.872703,.875138,.877516,.879838,.882108,.884326,.886495,.888618,.890695,.892728,.894718,.896667,.898577,.900447,.902280,.904077,.905839,.907566,.909260,.910922,.912552,.914152,.915722,.917263,.918776,.920262,.921721,.923156,.924565,.925950,.927312,.928651,.929968,.931262,.932536,.933788,.935021,.936233,.937426,.938600,.939756,.940894,.942013,.943116,.944202,.945271,.946324,.947362,.948384,.949391,.950383,.951361,.952325,.953275,.954212,.955135,.956045,.956943,.957828,.958701,.959562,.960410,.961248,.962074,.962889,.963693,.964486,.965268,.966039,.966800,.967551,.968292,.969022,.969744,.970455,.971158,.971851,.972535,.973210,.973876,.974534,.975184,.975825,.976458,.977083,.977700,.978308,.978908,.979500,.980084,.980659,.981227,.981787,.982339,.982883,.983421,.983951,.984474,.984990,.985499,.986001,.986496,.986985,.987468,.987944,.988414,.988875,.989326,.989769,.990204,.990630,.991047,.991457,.991859,.992253,.992639,.993018,.993390,.993755,.994113,.994464,.994808,.995146,.995477,.995803,.996122,.996429,.996724,.997008,.997281,.997543,.997796,.998039,.998273,.998498,.998714,.998915,.999102,.999276,.999438,.999577,.999698,.999803,.999894,.999956,1.00000,.206737,.309047,.376555,.426667,.466347,.499074,.526839,.550884,.572039,.590884,.607839,.623223,.637278,.650195,.662128,.673200,.683514,.693155,.702196,.710696,.718744,.726382,.733644,.740563,.747166,.753478,.759520,.765312,.770872,.776215,.781355,.786305,.791077,.795682,.800129,.804427,.808584,.812608,.816505,.820283,.823949,.827508,.830965,.834325,.837592,.840771,.843865,.846879,.849814,.852675,.855465,.858186,.860841,.863433,.865964,.868435,.870851,.873211,.875519,.877776,.879985,.882148,.884265,.886339,.888370,.890361,.892313,.894225,.896101,.897941,.899746,.901516,.903254,.904959,.906634,.908278,.909892,.911478,.913036,.914567,.916072,.917552,.919007,.920438,.921846,.923231,.924594,.925936,.927256,.928555,.929835,.931095,.932335,.933557,.934760,.935945,.937113,.938263,.939397,.940514,.941615,.942701,.943771,.944827,.945868,.946894,.947907,.948906,.949892,.950864,.951824,.952770,.953705,.954627,.955537,.956435,.957322,.958197,.959062,.959915,.960758,.961590,.962411,.963222,.964023,.964814,.965595,.966366,.967128,.967881,.968625,.969359,.970085,.970802,.971511,.972211,.972903,.973586,.974262,.974930,.975589,.976240,.976883,.977518,.978145,.978764,.979375,.979978,.980575,.981164,.981745,.982320,.982888,.983448,.984003,.984550,.985091,.985625,.986153,.986675,.987187,.987691,.988186,.988672,.989150,.989620,.990081,.990535,.990981,.991419,.991850,.992273,.992690,.993099,.993501,.993897,.994285,.994668,.995043,.995413,.995770,.996114,.996446,.996767,.997076,.997375,.997663,.997942,.998211,.998470,.998712,.998938,.999148,.999344,.999513,.999658,.999783,.999890,.999957,1.00000,.205274,.306879,.373935,.423721,.463150,.495677,.523277,.547185,.568222,.586965,.603834,.619141,.633128,.645986,.657866,.668892,.679164,.688769,.697777,.706248,.714270,.721886,.729129,.736032,.742622,.748923,.754956,.760742,.766297,.771637,.776776,.781726,.786499,.791107,.795557,.799860,.804023,.808054,.811960,.815746,.819422,.822991,.826460,.829832,.833112,.836304,.839413,.842441,.845392,.848269,.851075,.853813,.856485,.859095,.861644,.864134,.866568,.868948,.871276,.873553,.875782,.877965,.880104,.882199,.884253,.886266,.888240,.890176,.892075,.893938,.895767,.897561,.899323,.901053,.902752,.904421,.906061,.907672,.909256,.910812,.912343,.913848,.915330,.916788,.918222,.919634,.921024,.922393,.923740,.925067,.926374,.927661,.928929,.930179,.931410,.932623,.933819,.934998,.936160,.937305,.938435,.939549,.940649,.941733,.942803,.943860,.944902,.945930,.946946,.947948,.948937,.949914,.950878,.951831,.952771,.953700,.954617,.955523,.956418,.957302,.958176,.959038,.959891,.960733,.961565,.962388,.963201,.964004,.964798,.965582,.966358,.967125,.967883,.968632,.969373,.970105,.970830,.971546,.972255,.972955,.973647,.974331,.975007,.975676,.976336,.976989,.977634,.978271,.978902,.979525,.980141,.980750,.981352,.981948,.982536,.983118,.983694,.984263,.984826,.985383,.985931,.986470,.987001,.987523,.988037,.988543,.989041,.989531,.990013,.990488,.990956,.991416,.991869,.992315,.992755,.993187,.993613,.994032,.994445,.994851,.995245,.995626,.995994,.996351,.996696,.997030,.997354,.997667,.997970,.998264,.998538,.998795,.999036,.999261,.999454,.999621,.999763,.999886,.999958,1.00000,.204154,.305223,.371938,.421480,.460723,.493102,.520582,.544390,.565343,.584015,.600822,.616077,.630019,.642837,.654683,.665679,.675926,.685508,.694496,.702951,.710960,.718564,.725798,.732694,.739278,.745576,.751608,.757393,.762949,.768291,.773433,.778387,.783166,.787779,.792237,.796547,.800719,.804759,.808675,.812472,.816158,.819738,.823218,.826602,.829895,.833099,.836221,.839261,.842225,.845116,.847935,.850687,.853373,.855997,.858560,.861065,.863513,.865908,.868250,.870542,.872786,.874984,.877138,.879248,.881317,.883346,.885336,.887287,.889202,.891081,.892925,.894736,.896514,.898260,.899976,.901661,.903317,.904944,.906544,.908117,.909664,.911186,.912685,.914159,.915610,.917039,.918446,.919831,.921196,.922540,.923864,.925168,.926454,.927720,.928969,.930199,.931412,.932608,.933787,.934950,.936097,.937229,.938347,.939449,.940538,.941612,.942672,.943720,.944753,.945774,.946783,.947778,.948762,.949733,.950693,.951641,.952578,.953503,.954418,.955322,.956215,.957098,.957971,.958834,.959688,.960531,.961366,.962191,.963007,.963814,.964612,.965402,.966182,.966955,.967719,.968476,.969224,.969964,.970697,.971421,.972138,.972847,.973548,.974241,.974926,.975604,.976274,.976938,.977594,.978242,.978884,.979519,.980148,.980769,.981384,.981993,.982595,.983190,.983780,.984363,.984938,.985504,.986062,.986612,.987153,.987686,.988212,.988730,.989240,.989743,.990238,.990726,.991208,.991682,.992149,.992610,.993064,.993512,.993953,.994387,.994809,.995218,.995615,.996000,.996374,.996737,.997088,.997429,.997761,.998082,.998384,.998667,.998933,.999184,.999399,.999585,.999745,.999883,.999958,1.00000,.203214,.303840,.370276,.419623,.458719,.490984,.518373,.542107,.563000,.581623,.598389,.613609,.627523,.640319,.652146,.663127,.673362,.682935,.691917,.700368,.708373,.715975,.723208,.730103,.736688,.742986,.749019,.754807,.760365,.765709,.770855,.775813,.780596,.785213,.789675,.793991,.798168,.802213,.806134,.809937,.813630,.817217,.820704,.824096,.827396,.830609,.833738,.836788,.839761,.842661,.845490,.848251,.850948,.853582,.856155,.858670,.861130,.863535,.865889,.868192,.870447,.872657,.874822,.876944,.879025,.881065,.883066,.885029,.886956,.888847,.890703,.892525,.894315,.896073,.897800,.899498,.901165,.902805,.904416,.906001,.907560,.909095,.910605,.912092,.913556,.914998,.916417,.917815,.919193,.920550,.921887,.923204,.924503,.925783,.927045,.928289,.929515,.930725,.931917,.933094,.934255,.935401,.936532,.937649,.938752,.939840,.940916,.941977,.943026,.944062,.945085,.946095,.947094,.948081,.949056,.950019,.950971,.951912,.952842,.953762,.954671,.955570,.956459,.957338,.958208,.959068,.959919,.960761,.961593,.962417,.963232,.964039,.964837,.965627,.966409,.967183,.967948,.968706,.969457,.970199,.970934,.971661,.972380,.973092,.973796,.974492,.975182,.975864,.976539,.977208,.977869,.978524,.979172,.979813,.980449,.981077,.981700,.982316,.982926,.983530,.984125,.984712,.985291,.985862,.986425,.986980,.987527,.988067,.988599,.989124,.989642,.990153,.990656,.991153,.991643,.992126,.992603,.993074,.993538,.993995,.994440,.994873,.995293,.995701,.996099,.996484,.996860,.997224,.997579,.997924,.998248,.998554,.998843,.999115,.999350,.999553,.999728,.999879,.999959,1.00000,.201886,.301882,.367922,.416987,.455871,.487971,.515227,.538853,.559656,.578204,.594908,.610076,.623946,.636704,.648501,.659456,.669671,.679227,.688196,.696636,.704634,.712229,.719458,.726350,.732933,.739231,.745265,.751054,.756615,.761963,.767113,.772076,.776865,.781489,.785959,.790282,.794467,.798522,.802452,.806265,.809968,.813566,.817064,.820466,.823778,.827002,.830144,.833206,.836191,.839103,.841945,.844720,.847429,.850076,.852663,.855192,.857665,.860085,.862452,.864769,.867039,.869263,.871443,.873580,.875675,.877730,.879746,.881725,.883667,.885573,.887445,.889283,.891088,.892862,.894605,.896318,.898002,.899658,.901286,.902886,.904462,.906013,.907541,.909044,.910525,.911984,.913421,.914837,.916232,.917607,.918962,.920297,.921614,.922913,.924193,.925455,.926700,.927929,.929140,.930336,.931516,.932681,.933832,.934969,.936091,.937200,.938295,.939377,.940446,.941503,.942547,.943578,.944598,.945606,.946602,.947587,.948561,.949524,.950476,.951417,.952349,.953270,.954182,.955084,.955977,.956860,.957734,.958600,.959456,.960304,.961143,.961974,.962797,.963611,.964418,.965216,.966007,.966790,.967565,.968334,.969094,.969847,.970592,.971330,.972061,.972785,.973502,.974211,.974914,.975611,.976300,.976983,.977660,.978330,.978994,.979652,.980304,.980950,.981589,.982223,.982849,.983467,.984077,.984679,.985274,.985861,.986441,.987014,.987579,.988137,.988689,.989233,.989771,.990302,.990827,.991345,.991857,.992363,.992862,.993356,.993837,.994306,.994763,.995208,.995642,.996066,.996478,.996881,.997273,.997656,.998018,.998361,.998686,.998994,.999262,.999495,.999697,.999874,.999959,1.00000,.201061,.300664,.366452,.415339,.454086,.486078,.513247,.536800,.557542,.576038,.592698,.607828,.621665,.634396,.646168,.657102,.667298,.676839,.685794,.694223,.702211,.709799,.717021,.723908,.730486,.736781,.742813,.748600,.754161,.759509,.764660,.769625,.774416,.779043,.783516,.787843,.792033,.796092,.800028,.803846,.807554,.811158,.814662,.818070,.821388,.824618,.827766,.830834,.833825,.836744,.839592,.842373,.845089,.847742,.850335,.852871,.855350,.857776,.860150,.862474,.864750,.866981,.869168,.871313,.873416,.875479,.877503,.879490,.881440,.883355,.885235,.887082,.888896,.890679,.892432,.894154,.895847,.897513,.899150,.900761,.902346,.903908,.905445,.906959,.908450,.909920,.911367,.912794,.914200,.915585,.916951,.918298,.919626,.920935,.922227,.923500,.924757,.925997,.927220,.928427,.929619,.930796,.931959,.933107,.934242,.935363,.936471,.937566,.938648,.939717,.940774,.941818,.942851,.943873,.944882,.945881,.946868,.947844,.948810,.949765,.950710,.951646,.952572,.953489,.954396,.955294,.956183,.957063,.957935,.958798,.959653,.960499,.961338,.962168,.962990,.963805,.964612,.965411,.966203,.966988,.967765,.968535,.969297,.970053,.970801,.971543,.972278,.973006,.973727,.974442,.975151,.975853,.976549,.977239,.977922,.978600,.979272,.979938,.980598,.981252,.981899,.982538,.983169,.983793,.984410,.985020,.985623,.986219,.986807,.987390,.987965,.988534,.989096,.989652,.990202,.990746,.991283,.991815,.992340,.992860,.993367,.993863,.994347,.994820,.995283,.995734,.996175,.996606,.997027,.997439,.997830,.998202,.998556,.998892,.999187,.999445,.999671,.999869,.999959,1.00000]
	# Z=32
	      Z32=[.156458,.234910,.287361,.326810,.358460,.384910,.407646,.427597,.445382,.461433,.476067,.489520,.501974,.513570,.524425,.534630,.544262,.553385,.562052,.570310,.578195,.585741,.592978,.599932,.606625,.613077,.619307,.625330,.631161,.636812,.642295,.647621,.652798,.657837,.662745,.667529,.672195,.676751,.681202,.685552,.689807,.693970,.698047,.702040,.705954,.709792,.713557,.717253,.720882,.724447,.727950,.731394,.734782,.738114,.741394,.744623,.747803,.750935,.754022,.757065,.760064,.763021,.765937,.768814,.771652,.774453,.777219,.779949,.782645,.785309,.787940,.790541,.793111,.795652,.798164,.800648,.803105,.805536,.807941,.810321,.812676,.815007,.817313,.819597,.821857,.824096,.826312,.828508,.830683,.832837,.834972,.837087,.839184,.841262,.843321,.845364,.847388,.849396,.851387,.853362,.855320,.857262,.859189,.861100,.862996,.864878,.866744,.868597,.870435,.872260,.874071,.875869,.877654,.879427,.881186,.882934,.884669,.886393,.888104,.889804,.891493,.893171,.894837,.896493,.898138,.899773,.901397,.903012,.904616,.906210,.907795,.909370,.910936,.912493,.914040,.915579,.917109,.918630,.920142,.921646,.923142,.924630,.926109,.927581,.929044,.930500,.931948,.933389,.934822,.936248,.937666,.939077,.940482,.941879,.943270,.944654,.946031,.947401,.948765,.950123,.951474,.952819,.954158,.955491,.956817,.958138,.959453,.960762,.962066,.963364,.964656,.965943,.967224,.968500,.969771,.971036,.972296,.973551,.974801,.976046,.977287,.978522,.979752,.980978,.982199,.983415,.984627,.985834,.987036,.988234,.989428,.990617,.991802,.992983,.994160,.995334,.996505,.997672,.998837,1.00000,.160824,.241417,.295266,.335744,.368198,.395305,.418591,.439012,.457205,.473616,.488568,.502305,.515014,.526841,.537905,.548301,.558107,.567389,.576202,.584594,.592600,.600256,.607593,.614637,.621411,.627937,.634232,.640313,.646196,.651892,.657415,.662775,.667982,.673045,.677973,.682772,.687450,.692013,.696467,.700817,.705068,.709223,.713287,.717265,.721159,.724975,.728714,.732380,.735977,.739507,.742973,.746376,.749720,.753007,.756239,.759417,.762544,.765622,.768651,.771635,.774572,.777466,.780317,.783127,.785897,.788628,.791321,.793978,.796599,.799186,.801740,.804261,.806750,.809209,.811637,.814037,.816407,.818751,.821067,.823357,.825621,.827860,.830074,.832264,.834431,.836574,.838695,.840794,.842871,.844928,.846964,.848980,.850977,.852954,.854912,.856852,.858774,.860678,.862565,.864435,.866289,.868126,.869946,.871752,.873541,.875316,.877075,.878821,.880551,.882268,.883971,.885660,.887336,.888999,.890649,.892287,.893912,.895524,.897125,.898714,.900292,.901858,.903413,.904958,.906491,.908014,.909527,.911029,.912521,.914003,.915476,.916939,.918392,.919836,.921271,.922697,.924113,.925521,.926921,.928312,.929694,.931069,.932435,.933794,.935144,.936487,.937823,.939151,.940471,.941784,.943090,.944389,.945681,.946966,.948245,.949516,.950781,.952039,.953291,.954537,.955776,.957009,.958237,.959458,.960674,.961883,.963088,.964286,.965479,.966666,.967848,.969025,.970196,.971363,.972524,.973679,.974830,.975976,.977117,.978253,.979384,.980510,.981632,.982749,.983861,.984968,.986071,.987169,.988263,.989353,.990437,.991518,.992593,.993665,.994731,.995794,.996852,.997905,.998955,1.00000,.165023,.247728,.302994,.344541,.377856,.405684,.429592,.450561,.469244,.486097,.501455,.515566,.528621,.540773,.552141,.562824,.572902,.582442,.591501,.600128,.608350,.616204,.623723,.630935,.637863,.644530,.650955,.657156,.663147,.668944,.674558,.680000,.685282,.690413,.695400,.700254,.704979,.709584,.714074,.718456,.722732,.726907,.730986,.734974,.738874,.742690,.746426,.750085,.753671,.757185,.760632,.764013,.767332,.770590,.773789,.776932,.780021,.783058,.786044,.788980,.791869,.794712,.797509,.800263,.802975,.805646,.808277,.810870,.813425,.815944,.818428,.820877,.823293,.825676,.828028,.830349,.832640,.834901,.837135,.839340,.841518,.843670,.845795,.847895,.849970,.852020,.854047,.856051,.858032,.859991,.861928,.863844,.865740,.867615,.869470,.871306,.873122,.874920,.876700,.878462,.880206,.881932,.883642,.885334,.887011,.888671,.890316,.891945,.893558,.895157,.896741,.898311,.899867,.901408,.902936,.904451,.905952,.907440,.908916,.910379,.911830,.913269,.914696,.916111,.917516,.918909,.920290,.921661,.923022,.924372,.925711,.927040,.928359,.929668,.930968,.932258,.933538,.934809,.936071,.937323,.938567,.939803,.941029,.942248,.943458,.944660,.945854,.947039,.948217,.949388,.950550,.951706,.952853,.953994,.955127,.956253,.957372,.958483,.959589,.960687,.961778,.962864,.963943,.965015,.966081,.967142,.968196,.969244,.970286,.971322,.972353,.973378,.974397,.975410,.976418,.977421,.978418,.979410,.980396,.981377,.982354,.983325,.984291,.985252,.986209,.987160,.988107,.989049,.989986,.990919,.991847,.992771,.993690,.994605,.995515,.996420,.997322,.998219,.999112,1.00000,.168793,.253367,.309868,.352333,.386376,.414804,.439223,.460634,.479706,.496907,.512577,.526971,.540286,.552676,.564264,.575151,.585418,.595136,.604362,.613144,.621507,.629488,.637121,.644434,.651454,.658202,.664699,.670962,.677009,.682852,.688507,.693983,.699293,.704445,.709449,.714313,.719045,.723652,.728139,.732513,.736778,.740939,.745001,.748967,.752843,.756633,.760339,.763966,.767516,.770994,.774401,.777740,.781015,.784226,.787377,.790470,.793507,.796490,.799420,.802299,.805130,.807912,.810649,.813341,.815990,.818596,.821163,.823689,.826177,.828629,.831043,.833423,.835768,.838080,.840360,.842608,.844826,.847013,.849171,.851301,.853403,.855477,.857524,.859546,.861542,.863512,.865459,.867382,.869281,.871158,.873012,.874845,.876656,.878447,.880217,.881967,.883698,.885410,.887103,.888777,.890433,.892071,.893692,.895296,.896882,.898453,.900007,.901545,.903067,.904574,.906066,.907544,.909006,.910455,.911889,.913310,.914717,.916111,.917491,.918859,.920215,.921558,.922889,.924208,.925516,.926812,.928096,.929370,.930632,.931884,.933125,.934356,.935577,.936787,.937987,.939178,.940358,.941530,.942691,.943844,.944987,.946121,.947247,.948364,.949472,.950572,.951663,.952746,.953821,.954888,.955947,.956999,.958042,.959078,.960106,.961127,.962141,.963147,.964146,.965139,.966124,.967103,.968074,.969040,.969998,.970951,.971896,.972836,.973769,.974696,.975617,.976533,.977442,.978345,.979242,.980134,.981020,.981900,.982775,.983645,.984509,.985368,.986221,.987070,.987913,.988752,.989586,.990414,.991238,.992057,.992872,.993682,.994487,.995288,.996084,.996876,.997663,.998446,.999225,1.00000,.174731,.262156,.320481,.364254,.399297,.428520,.453586,.475533,.495056,.512638,.528633,.543305,.556858,.569452,.581214,.592249,.602642,.612464,.621776,.630629,.639049,.647077,.654747,.662088,.669126,.675886,.682388,.688650,.694688,.700518,.706153,.711605,.716886,.722005,.726972,.731795,.736482,.741040,.745476,.749795,.754002,.758101,.762098,.765998,.769804,.773520,.777152,.780701,.784172,.787567,.790890,.794144,.797330,.800452,.803511,.806511,.809453,.812339,.815172,.817952,.820682,.823362,.825996,.828583,.831126,.833626,.836084,.838502,.840880,.843220,.845523,.847790,.850021,.852219,.854383,.856515,.858615,.860684,.862724,.864735,.866717,.868672,.870600,.872502,.874378,.876230,.878057,.879860,.881640,.883397,.885132,.886845,.888537,.890208,.891859,.893490,.895101,.896693,.898267,.899822,.901359,.902878,.904381,.905867,.907336,.908789,.910226,.911647,.913053,.914444,.915821,.917183,.918530,.919864,.921184,.922490,.923784,.925064,.926331,.927586,.928829,.930059,.931278,.932485,.933680,.934864,.936037,.937199,.938350,.939491,.940621,.941741,.942850,.943950,.945040,.946120,.947191,.948252,.949304,.950347,.951381,.952405,.953422,.954429,.955428,.956419,.957401,.958375,.959341,.960299,.961249,.962192,.963127,.964054,.964974,.965887,.966792,.967690,.968581,.969466,.970343,.971213,.972077,.972934,.973785,.974629,.975467,.976299,.977124,.977944,.978757,.979564,.980366,.981161,.981951,.982735,.983513,.984286,.985053,.985815,.986572,.987323,.988068,.988809,.989545,.990275,.991000,.991721,.992436,.993147,.993853,.994554,.995250,.995942,.996629,.997312,.997990,.998664,.999334,1.00000,.185653,.278272,.339880,.385983,.422783,.453381,.479549,.502395,.522657,.540852,.557356,.572451,.586354,.599235,.611230,.622450,.632987,.642916,.652301,.661198,.669643,.677679,.685342,.692661,.699665,.706379,.712823,.719017,.724979,.730723,.736264,.741615,.746788,.751792,.756638,.761334,.765889,.770309,.774603,.778776,.782832,.786776,.790613,.794350,.797989,.801536,.804994,.808367,.811659,.814873,.818012,.821079,.824076,.827007,.829874,.832679,.835424,.838112,.840744,.843322,.845849,.848325,.850753,.853134,.855469,.857760,.860009,.862216,.864383,.866511,.868601,.870654,.872672,.874654,.876603,.878519,.880403,.882256,.884078,.885871,.887636,.889374,.891085,.892771,.894431,.896067,.897679,.899268,.900834,.902377,.903899,.905399,.906879,.908338,.909777,.911197,.912597,.913979,.915342,.916688,.918017,.919329,.920625,.921905,.923169,.924419,.925653,.926873,.928078,.929269,.930447,.931611,.932761,.933898,.935023,.936135,.937234,.938321,.939396,.940460,.941512,.942553,.943583,.944603,.945612,.946611,.947599,.948578,.949547,.950506,.951455,.952395,.953326,.954248,.955160,.956064,.956960,.957846,.958725,.959595,.960456,.961310,.962156,.962993,.963824,.964646,.965461,.966268,.967068,.967861,.968647,.969426,.970198,.970963,.971721,.972473,.973218,.973956,.974689,.975414,.976134,.976847,.977555,.978256,.978951,.979640,.980323,.981001,.981673,.982339,.982999,.983654,.984304,.984949,.985588,.986221,.986850,.987474,.988092,.988706,.989314,.989918,.990516,.991110,.991699,.992284,.992864,.993439,.994009,.994576,.995137,.995694,.996247,.996795,.997340,.997880,.998416,.998948,.999476,1.00000,.194670,.291613,.355982,.404065,.442376,.474174,.501319,.524975,.545919,.564692,.581690,.597209,.611476,.624671,.636937,.648390,.659126,.669225,.678753,.687769,.696303,.704400,.712098,.719431,.726427,.733114,.739514,.745648,.751534,.757190,.762630,.767868,.772917,.777787,.782490,.787034,.791429,.795682,.799800,.803792,.807664,.811423,.815074,.818621,.822071,.825426,.828692,.831872,.834969,.837987,.840930,.843799,.846599,.849331,.851999,.854604,.857149,.859637,.862068,.864446,.866773,.869051,.871283,.873469,.875611,.877710,.879768,.881786,.883766,.885707,.887612,.889481,.891316,.893117,.894886,.896623,.898329,.900005,.901652,.903270,.904862,.906427,.907966,.909481,.910971,.912437,.913880,.915301,.916699,.918076,.919431,.920766,.922081,.923376,.924652,.925909,.927148,.928369,.929572,.930758,.931927,.933079,.934216,.935337,.936442,.937532,.938608,.939669,.940715,.941748,.942767,.943773,.944765,.945745,.946712,.947666,.948609,.949539,.950457,.951364,.952260,.953146,.954021,.954885,.955740,.956584,.957419,.958243,.959059,.959865,.960662,.961450,.962229,.962999,.963761,.964514,.965259,.965996,.966725,.967445,.968159,.968864,.969563,.970254,.970938,.971615,.972285,.972948,.973604,.974254,.974897,.975534,.976165,.976789,.977407,.978019,.978625,.979225,.979819,.980408,.980991,.981568,.982140,.982706,.983266,.983822,.984372,.984917,.985457,.985992,.986521,.987046,.987566,.988081,.988592,.989098,.989599,.990095,.990587,.991075,.991558,.992037,.992513,.992984,.993450,.993913,.994372,.994828,.995279,.995726,.996170,.996610,.997047,.997480,.997909,.998334,.998756,.999174,.999589,1.00000,.206686,.309201,.376997,.427437,.467466,.500556,.528692,.553114,.574648,.593874,.611212,.626977,.641414,.654712,.667024,.678474,.689164,.699180,.708592,.717462,.725845,.733784,.741320,.748486,.755312,.761824,.768047,.774001,.779706,.785178,.790432,.795482,.800342,.805022,.809534,.813886,.818088,.822147,.826072,.829870,.833547,.837111,.840566,.843918,.847172,.850331,.853401,.856385,.859286,.862109,.864856,.867531,.870136,.872674,.875147,.877559,.879911,.882206,.884445,.886631,.888766,.890853,.892892,.894886,.896836,.898744,.900610,.902436,.904224,.905974,.907687,.909366,.911010,.912621,.914199,.915746,.917263,.918750,.920209,.921639,.923043,.924421,.925774,.927103,.928408,.929689,.930948,.932186,.933401,.934596,.935770,.936924,.938059,.939174,.940272,.941350,.942412,.943455,.944482,.945492,.946487,.947466,.948429,.949378,.950312,.951232,.952138,.953030,.953909,.954775,.955628,.956468,.957296,.958112,.958916,.959709,.960490,.961260,.962018,.962767,.963504,.964231,.964948,.965655,.966352,.967040,.967718,.968387,.969046,.969697,.970339,.970972,.971597,.972213,.972822,.973422,.974014,.974598,.975175,.975744,.976306,.976861,.977409,.977950,.978484,.979012,.979533,.980047,.980556,.981057,.981553,.982043,.982527,.983004,.983476,.983943,.984404,.984859,.985309,.985753,.986192,.986627,.987056,.987480,.987900,.988314,.988724,.989129,.989530,.989926,.990318,.990705,.991088,.991467,.991842,.992212,.992578,.992941,.993299,.993653,.994004,.994351,.994694,.995033,.995368,.995700,.996029,.996354,.996675,.996993,.997308,.997619,.997928,.998232,.998534,.998833,.999129,.999422,.999713,1.00000,.218902,.327092,.398389,.451246,.493044,.527476,.556648,.581880,.604051,.623774,.641498,.657558,.672212,.685663,.698072,.709572,.720270,.730258,.739612,.748395,.756674,.764495,.771898,.778920,.785591,.791939,.797989,.803763,.809279,.814557,.819612,.824459,.829109,.833577,.837872,.842004,.845984,.849818,.853516,.857084,.860532,.863866,.867092,.870215,.873240,.876172,.879013,.881770,.884445,.887041,.889563,.892013,.894394,.896708,.898960,.901150,.903282,.905357,.907378,.909346,.911265,.913137,.914962,.916744,.918482,.920179,.921837,.923455,.925036,.926581,.928090,.929566,.931008,.932419,.933798,.935148,.936468,.937760,.939024,.940261,.941473,.942660,.943822,.944961,.946077,.947170,.948241,.949291,.950321,.951330,.952320,.953290,.954242,.955176,.956091,.956990,.957872,.958737,.959586,.960419,.961238,.962041,.962829,.963603,.964363,.965110,.965843,.966563,.967270,.967965,.968648,.969319,.969978,.970626,.971262,.971888,.972503,.973107,.973701,.974286,.974860,.975424,.975979,.976524,.977060,.977587,.978105,.978614,.979115,.979607,.980091,.980568,.981036,.981497,.981950,.982395,.982834,.983265,.983689,.984107,.984518,.984921,.985319,.985709,.986094,.986472,.986843,.987209,.987569,.987923,.988272,.988615,.988952,.989284,.989611,.989932,.990249,.990560,.990867,.991168,.991465,.991757,.992044,.992327,.992605,.992878,.993147,.993412,.993672,.993928,.994181,.994429,.994673,.994913,.995150,.995382,.995611,.995837,.996059,.996277,.996492,.996704,.996912,.997117,.997318,.997517,.997712,.997904,.998094,.998280,.998464,.998644,.998823,.998998,.999171,.999342,.999510,.999675,.999839,1.00000,.222786,.332771,.405167,.458777,.501123,.535966,.565453,.590928,.613286,.633154,.650988,.667128,.681839,.695326,.707755,.719260,.729951,.739920,.749246,.757993,.766231,.774007,.781363,.788334,.794951,.801244,.807236,.812951,.818406,.823622,.828613,.833395,.837980,.842381,.846609,.850673,.854584,.858350,.861978,.865477,.868856,.872121,.875279,.878333,.881290,.884154,.886928,.889618,.892226,.894756,.897212,.899597,.901913,.904163,.906350,.908477,.910545,.912558,.914516,.916423,.918280,.920090,.921854,.923575,.925252,.926889,.928486,.930044,.931566,.933051,.934502,.935918,.937302,.938655,.939977,.941269,.942532,.943767,.944974,.946156,.947311,.948442,.949549,.950632,.951692,.952730,.953746,.954741,.955716,.956670,.957605,.958521,.959419,.960299,.961161,.962006,.962835,.963647,.964444,.965225,.965990,.966741,.967477,.968199,.968907,.969602,.970283,.970952,.971607,.972251,.972882,.973502,.974110,.974707,.975292,.975867,.976432,.976986,.977531,.978065,.978589,.979104,.979609,.980105,.980591,.981069,.981537,.981998,.982449,.982893,.983328,.983756,.984176,.984588,.984993,.985391,.985782,.986165,.986542,.986912,.987276,.987632,.987982,.988326,.988663,.988994,.989318,.989637,.989950,.990258,.990559,.990855,.991146,.991432,.991712,.991988,.992258,.992523,.992784,.993040,.993291,.993537,.993779,.994015,.994247,.994474,.994697,.994915,.995129,.995339,.995545,.995747,.995945,.996139,.996329,.996515,.996698,.996878,.997054,.997227,.997395,.997561,.997722,.997881,.998036,.998187,.998336,.998481,.998623,.998762,.998898,.999031,.999161,.999289,.999414,.999536,.999656,.999773,.999888,1.00000,.221584,.330999,.403036,.456393,.498548,.533241,.562609,.587986,.610263,.630064,.647840,.663933,.678604,.692057,.704457,.715938,.726610,.736563,.745875,.754612,.762845,.770621,.777981,.784960,.791589,.797895,.803904,.809638,.815115,.820355,.825371,.830180,.834794,.839225,.843484,.847581,.851525,.855325,.858989,.862523,.865939,.869241,.872435,.875527,.878521,.881422,.884235,.886962,.889608,.892177,.894671,.897094,.899448,.901736,.903962,.906127,.908233,.910284,.912280,.914224,.916119,.917967,.919768,.921526,.923240,.924914,.926547,.928141,.929698,.931219,.932705,.934157,.935576,.936963,.938319,.939645,.940942,.942211,.943452,.944666,.945855,.947018,.948157,.949273,.950365,.951434,.952482,.953508,.954514,.955499,.956465,.957412,.958340,.959249,.960141,.961016,.961873,.962715,.963540,.964349,.965143,.965922,.966686,.967435,.968170,.968891,.969599,.970293,.970975,.971643,.972300,.972945,.973577,.974198,.974808,.975407,.975996,.976573,.977141,.977698,.978245,.978781,.979308,.979824,.980331,.980829,.981318,.981797,.982268,.982730,.983184,.983630,.984067,.984497,.984919,.985333,.985740,.986140,.986532,.986918,.987296,.987667,.988031,.988388,.988738,.989082,.989419,.989749,.990073,.990392,.990704,.991010,.991311,.991606,.991896,.992180,.992459,.992733,.993001,.993265,.993523,.993775,.994022,.994263,.994499,.994730,.994955,.995176,.995391,.995602,.995809,.996011,.996208,.996401,.996590,.996775,.996956,.997133,.997306,.997476,.997640,.997800,.997956,.998107,.998254,.998398,.998537,.998672,.998803,.998931,.999055,.999175,.999290,.999403,.999511,.999616,.999717,.999815,.999909,1.00000,.219169,.327457,.398795,.451666,.493462,.527880,.557032,.582238,.604379,.624070,.641759,.657782,.672397,.685808,.698177,.709636,.720293,.730239,.739550,.748290,.756534,.764326,.771706,.778710,.785369,.791709,.797754,.803527,.809047,.814330,.819393,.824250,.828915,.833397,.837710,.841861,.845861,.849718,.853439,.857032,.860506,.863867,.867121,.870272,.873326,.876287,.879159,.881946,.884651,.887279,.889833,.892315,.894729,.897076,.899361,.901585,.903750,.905859,.907913,.909916,.911868,.913773,.915632,.917445,.919216,.920945,.922633,.924282,.925894,.927468,.929008,.930513,.931984,.933423,.934831,.936209,.937556,.938876,.940167,.941431,.942669,.943881,.945069,.946232,.947371,.948488,.949582,.950655,.951706,.952737,.953748,.954739,.955711,.956664,.957599,.958517,.959417,.960300,.961167,.962018,.962853,.963672,.964476,.965265,.966040,.966801,.967547,.968280,.969000,.969707,.970402,.971084,.971754,.972412,.973058,.973694,.974318,.974931,.975534,.976126,.976708,.977279,.977840,.978391,.978932,.979464,.979986,.980499,.981003,.981498,.981985,.982463,.982933,.983394,.983848,.984294,.984732,.985163,.985587,.986003,.986412,.986812,.987206,.987592,.987971,.988342,.988707,.989065,.989417,.989762,.990100,.990433,.990759,.991080,.991394,.991703,.992006,.992304,.992597,.992884,.993164,.993438,.993706,.993968,.994224,.994473,.994718,.994956,.995189,.995417,.995640,.995858,.996071,.996279,.996482,.996681,.996875,.997065,.997251,.997432,.997608,.997778,.997943,.998102,.998257,.998406,.998551,.998692,.998828,.998959,.999085,.999207,.999323,.999434,.999540,.999641,.999737,.999829,.999917,1.00000,.216449,.323489,.394067,.446422,.487846,.521989,.550933,.575983,.598005,.617608,.635233,.651213,.665802,.679201,.691570,.703038,.713714,.723686,.733030,.741810,.750096,.757935,.765365,.772422,.779135,.785532,.791637,.797471,.803053,.808401,.813529,.818453,.823184,.827735,.832116,.836337,.840407,.844334,.848127,.851791,.855335,.858765,.862086,.865304,.868424,.871449,.874385,.877235,.880002,.882691,.885305,.887846,.890318,.892724,.895065,.897345,.899565,.901728,.903837,.905892,.907897,.909854,.911763,.913627,.915447,.917225,.918961,.920658,.922316,.923937,.925522,.927072,.928588,.930072,.931523,.932943,.934333,.935694,.937027,.938332,.939611,.940863,.942091,.943294,.944474,.945630,.946764,.947875,.948966,.950035,.951084,.952114,.953124,.954115,.955088,.956043,.956981,.957901,.958805,.959692,.960563,.961419,.962260,.963085,.963896,.964692,.965475,.966244,.966999,.967742,.968471,.969188,.969893,.970586,.971268,.971937,.972596,.973244,.973880,.974507,.975122,.975727,.976321,.976905,.977479,.978043,.978598,.979143,.979679,.980205,.980723,.981233,.981733,.982226,.982710,.983186,.983655,.984115,.984568,.985014,.985452,.985881,.986303,.986717,.987124,.987523,.987915,.988300,.988678,.989049,.989414,.989772,.990124,.990470,.990809,.991142,.991470,.991792,.992108,.992419,.992722,.993018,.993308,.993591,.993867,.994137,.994401,.994658,.994910,.995156,.995396,.995631,.995861,.996085,.996304,.996519,.996728,.996932,.997132,.997328,.997517,.997699,.997875,.998045,.998210,.998368,.998522,.998670,.998813,.998951,.999083,.999209,.999329,.999443,.999551,.999652,.999747,.999836,.999921,1.00000,.214777,.321030,.391118,.443128,.484296,.518241,.547029,.571952,.593872,.613392,.630950,.646874,.661418,.674781,.687121,.698568,.709227,.719188,.728525,.737301,.745588,.753431,.760870,.767937,.774664,.781077,.787200,.793054,.798657,.804028,.809182,.814131,.818890,.823469,.827880,.832132,.836233,.840193,.844018,.847715,.851293,.854758,.858114,.861367,.864522,.867583,.870555,.873441,.876245,.878971,.881621,.884199,.886708,.889150,.891529,.893846,.896103,.898304,.900450,.902542,.904584,.906578,.908524,.910425,.912282,.914096,.915869,.917603,.919297,.920955,.922576,.924162,.925714,.927233,.928719,.930175,.931601,.932997,.934364,.935704,.937017,.938304,.939566,.940803,.942017,.943206,.944374,.945519,.946642,.947744,.948826,.949888,.950931,.951954,.952959,.953946,.954915,.955866,.956801,.957720,.958622,.959508,.960379,.961234,.962075,.962901,.963714,.964512,.965297,.966068,.966827,.967573,.968306,.969027,.969737,.970434,.971121,.971796,.972460,.973114,.973756,.974388,.975009,.975619,.976220,.976810,.977391,.977962,.978524,.979076,.979620,.980154,.980680,.981197,.981707,.982208,.982700,.983185,.983663,.984133,.984594,.985047,.985493,.985930,.986360,.986782,.987197,.987604,.988005,.988398,.988785,.989165,.989538,.989905,.990266,.990621,.990969,.991312,.991649,.991980,.992303,.992619,.992928,.993230,.993524,.993812,.994093,.994368,.994637,.994899,.995156,.995406,.995651,.995891,.996125,.996354,.996577,.996796,.997009,.997218,.997419,.997613,.997800,.997981,.998155,.998323,.998484,.998640,.998791,.998936,.999074,.999204,.999328,.999446,.999556,.999658,.999753,.999841,.999924,1.00000,.213437,.319056,.388743,.440470,.481426,.515204,.543858,.568673,.590503,.609947,.627442,.643314,.657814,.671139,.683448,.694869,.705507,.715451,.724775,.733541,.741822,.749662,.757101,.764171,.770904,.777326,.783459,.789326,.794944,.800331,.805502,.810471,.815250,.819850,.824283,.828558,.832684,.836669,.840520,.844244,.847849,.851341,.854724,.858006,.861189,.864279,.867279,.870194,.873027,.875782,.878462,.881070,.883609,.886081,.888489,.890836,.893124,.895354,.897530,.899653,.901725,.903749,.905725,.907656,.909543,.911387,.913190,.914953,.916678,.918365,.920016,.921631,.923213,.924761,.926277,.927762,.929217,.930642,.932038,.933407,.934749,.936064,.937355,.938620,.939862,.941079,.942275,.943447,.944598,.945728,.946837,.947927,.948996,.950046,.951078,.952091,.953087,.954065,.955026,.955970,.956898,.957810,.958706,.959588,.960454,.961305,.962143,.962966,.963775,.964572,.965355,.966125,.966883,.967628,.968362,.969083,.969793,.970492,.971180,.971857,.972523,.973177,.973821,.974455,.975078,.975691,.976294,.976888,.977472,.978047,.978612,.979169,.979717,.980256,.980787,.981310,.981824,.982331,.982829,.983320,.983803,.984277,.984743,.985201,.985651,.986093,.986528,.986956,.987376,.987789,.988196,.988595,.988988,.989374,.989754,.990128,.990495,.990856,.991211,.991561,.991902,.992236,.992562,.992880,.993192,.993496,.993794,.994084,.994368,.994646,.994918,.995183,.995442,.995696,.995944,.996186,.996423,.996655,.996881,.997103,.997316,.997521,.997719,.997910,.998093,.998270,.998440,.998604,.998762,.998914,.999058,.999194,.999323,.999445,.999557,.999661,.999756,.999845,.999926,1.00000,.211156,.315700,.384714,.435967,.476568,.510071,.538507,.563145,.584830,.604156,.621553,.637344,.651778,.665049,.677315,.688701,.699313,.709236,.718546,.727303,.735581,.743423,.750868,.757948,.764695,.771133,.777286,.783175,.788817,.794231,.799431,.804430,.809242,.813876,.818345,.822656,.826820,.830844,.834734,.838499,.842146,.845680,.849107,.852432,.855659,.858794,.861839,.864799,.867678,.870479,.873206,.875860,.878446,.880965,.883420,.885815,.888150,.890428,.892652,.894822,.896943,.899014,.901038,.903016,.904951,.906843,.908693,.910504,.912276,.914010,.915708,.917370,.918999,.920594,.922156,.923688,.925189,.926660,.928102,.929517,.930904,.932265,.933601,.934912,.936198,.937461,.938701,.939918,.941113,.942287,.943440,.944573,.945686,.946780,.947855,.948911,.949949,.950970,.951973,.952960,.953930,.954884,.955822,.956745,.957653,.958545,.959424,.960288,.961138,.961975,.962799,.963609,.964407,.965193,.965966,.966727,.967477,.968215,.968941,.969657,.970362,.971055,.971737,.972409,.973071,.973722,.974363,.974995,.975617,.976229,.976832,.977426,.978011,.978588,.979155,.979715,.980266,.980809,.981344,.981871,.982389,.982899,.983401,.983894,.984380,.984857,.985327,.985789,.986244,.986692,.987133,.987566,.987993,.988413,.988826,.989233,.989633,.990027,.990415,.990797,.991171,.991536,.991892,.992241,.992582,.992916,.993242,.993561,.993873,.994177,.994476,.994767,.995052,.995331,.995604,.995871,.996132,.996387,.996637,.996881,.997116,.997342,.997559,.997768,.997969,.998162,.998347,.998526,.998698,.998863,.999018,.999165,.999302,.999432,.999550,.999659,.999758,.999848,.999929,1.00000,.209475,.313224,.381738,.432638,.472974,.506270,.534541,.559044,.580619,.599853,.617174,.632901,.647282,.660510,.672739,.684096,.694684,.704589,.713884,.722632,.730903,.738742,.746187,.753271,.760023,.766469,.772632,.778532,.784189,.789617,.794834,.799851,.804681,.809336,.813826,.818160,.822347,.826395,.830310,.834101,.837773,.841334,.844789,.848141,.851397,.854561,.857636,.860626,.863535,.866367,.869124,.871810,.874427,.876978,.879465,.881892,.884259,.886570,.888826,.891030,.893183,.895287,.897344,.899356,.901324,.903249,.905133,.906977,.908783,.910551,.912282,.913978,.915640,.917269,.918865,.920430,.921965,.923469,.924945,.926393,.927814,.929209,.930578,.931922,.933241,.934537,.935810,.937060,.938289,.939496,.940682,.941848,.942993,.944120,.945227,.946316,.947386,.948439,.949475,.950493,.951495,.952481,.953451,.954406,.955345,.956270,.957180,.958076,.958958,.959826,.960681,.961523,.962352,.963168,.963972,.964764,.965545,.966313,.967071,.967817,.968552,.969276,.969989,.970691,.971382,.972064,.972735,.973397,.974049,.974691,.975324,.975947,.976562,.977168,.977765,.978354,.978934,.979506,.980070,.980626,.981174,.981713,.982243,.982765,.983279,.983785,.984283,.984774,.985257,.985733,.986201,.986663,.987117,.987565,.988005,.988439,.988867,.989288,.989703,.990112,.990512,.990903,.991286,.991660,.992026,.992385,.992735,.993078,.993414,.993742,.994064,.994378,.994686,.994987,.995282,.995571,.995853,.996129,.996400,.996665,.996919,.997164,.997399,.997625,.997842,.998051,.998251,.998444,.998630,.998808,.998975,.999132,.999279,.999417,.999542,.999655,.999757,.999850,.999930,1.00000,.207109,.309722,.377508,.427885,.467820,.500797,.528805,.553090,.574480,.593555,.610739,.626348,.640625,.653761,.665911,.677197,.687723,.697573,.706821,.715526,.723761,.731571,.738991,.746056,.752793,.759228,.765384,.771280,.776936,.782367,.787589,.792613,.797454,.802121,.806624,.810974,.815178,.819244,.823180,.826992,.830688,.834274,.837755,.841135,.844420,.847614,.850720,.853743,.856685,.859551,.862344,.865065,.867719,.870307,.872833,.875298,.877705,.880056,.882352,.884596,.886791,.888937,.891037,.893092,.895103,.897073,.899001,.900890,.902741,.904554,.906331,.908074,.909782,.911457,.913101,.914713,.916295,.917847,.919371,.920866,.922336,.923779,.925196,.926589,.927958,.929304,.930626,.931926,.933205,.934462,.935699,.936915,.938111,.939288,.940446,.941586,.942707,.943811,.944898,.945968,.947021,.948059,.949080,.950086,.951078,.952054,.953016,.953964,.954897,.955818,.956725,.957619,.958500,.959368,.960224,.961069,.961901,.962722,.963531,.964329,.965116,.965892,.966657,.967411,.968155,.968888,.969612,.970325,.971029,.971723,.972407,.973083,.973749,.974407,.975055,.975695,.976327,.976950,.977565,.978173,.978771,.979361,.979942,.980515,.981080,.981636,.982185,.982727,.983260,.983786,.984305,.984816,.985321,.985818,.986309,.986793,.987270,.987741,.988205,.988663,.989112,.989552,.989983,.990406,.990821,.991227,.991626,.992017,.992400,.992776,.993145,.993507,.993861,.994209,.994550,.994885,.995213,.995535,.995851,.996160,.996458,.996744,.997020,.997285,.997539,.997784,.998020,.998246,.998464,.998674,.998869,.999051,.999220,.999378,.999519,.999643,.999754,.999852,.999933,1.00000,.205292,.307033,.374261,.424238,.463866,.496598,.524407,.548525,.569774,.588729,.605809,.621328,.635526,.648594,.660683,.671916,.682396,.692206,.701417,.710091,.718301,.726090,.733494,.740546,.747274,.753704,.759858,.765755,.771414,.776851,.782080,.787115,.791967,.796647,.801165,.805531,.809753,.813839,.817795,.821629,.825348,.828957,.832461,.835867,.839177,.842396,.845529,.848579,.851549,.854443,.857263,.860014,.862697,.865315,.867870,.870366,.872803,.875184,.877512,.879787,.882013,.884192,.886324,.888411,.890455,.892457,.894419,.896342,.898226,.900073,.901884,.903661,.905404,.907113,.908791,.910438,.912055,.913642,.915201,.916732,.918236,.919714,.921168,.922596,.924001,.925382,.926741,.928077,.929392,.930685,.931958,.933210,.934443,.935656,.936851,.938027,.939185,.940325,.941448,.942555,.943645,.944719,.945777,.946820,.947848,.948862,.949861,.950846,.951817,.952774,.953718,.954650,.955568,.956474,.957368,.958249,.959119,.959977,.960824,.961659,.962484,.963297,.964100,.964891,.965673,.966444,.967205,.967957,.968698,.969430,.970153,.970866,.971571,.972266,.972953,.973631,.974300,.974962,.975615,.976260,.976896,.977524,.978144,.978755,.979358,.979952,.980539,.981119,.981690,.982255,.982811,.983361,.983904,.984439,.984967,.985489,.986004,.986513,.987015,.987510,.987997,.988474,.988943,.989403,.989855,.990298,.990733,.991160,.991580,.991991,.992396,.992793,.993182,.993565,.993941,.994310,.994672,.995028,.995378,.995721,.996052,.996370,.996677,.996973,.997257,.997532,.997796,.998050,.998296,.998532,.998752,.998958,.999149,.999328,.999485,.999623,.999744,.999851,.999935,1.00000,.202798,.303343,.369808,.419238,.458448,.490849,.518386,.542279,.563338,.582132,.599074,.614472,.628567,.641544,.653555,.664720,.675140,.684898,.694064,.702699,.710877,.718639,.726022,.733058,.739774,.746196,.752345,.758242,.763903,.769345,.774581,.779626,.784490,.789185,.793720,.798104,.802346,.806453,.810432,.814290,.818035,.821671,.825204,.828638,.831979,.835229,.838394,.841477,.844481,.847410,.850266,.853052,.855772,.858427,.861020,.863554,.866030,.868451,.870818,.873134,.875400,.877620,.879793,.881922,.884009,.886053,.888058,.890023,.891951,.893841,.895697,.897517,.899304,.901058,.902781,.904472,.906134,.907766,.909370,.910946,.912496,.914020,.915519,.916994,.918445,.919872,.921277,.922660,.924022,.925362,.926682,.927981,.929261,.930522,.931764,.932988,.934193,.935382,.936552,.937706,.938844,.939967,.941073,.942165,.943241,.944303,.945351,.946385,.947405,.948412,.949405,.950386,.951354,.952309,.953252,.954183,.955103,.956011,.956907,.957793,.958667,.959531,.960384,.961226,.962058,.962880,.963693,.964495,.965288,.966072,.966846,.967611,.968367,.969115,.969853,.970583,.971305,.972019,.972724,.973422,.974111,.974791,.975464,.976128,.976784,.977432,.978073,.978706,.979332,.979950,.980561,.981164,.981761,.982351,.982934,.983510,.984080,.984643,.985199,.985750,.986291,.986823,.987346,.987860,.988365,.988862,.989351,.989832,.990304,.990769,.991226,.991676,.992118,.992553,.992980,.993401,.993815,.994222,.994622,.995016,.995397,.995764,.996119,.996462,.996793,.997112,.997421,.997720,.998008,.998286,.998547,.998790,.999018,.999231,.999417,.999580,.999722,.999847,.999936,1.00000,.201477,.301382,.367435,.416565,.455544,.487758,.515141,.538904,.559852,.578549,.595405,.610730,.624758,.637677,.649635,.660752,.671130,.680849,.689981,.698585,.706735,.714473,.721835,.728852,.735552,.741960,.748098,.753984,.759637,.765073,.770305,.775346,.780208,.784902,.789437,.793823,.798067,.802178,.806161,.810024,.813774,.817417,.820957,.824400,.827749,.831009,.834184,.837278,.840293,.843233,.846101,.848900,.851633,.854301,.856909,.859456,.861947,.864383,.866765,.869096,.871378,.873614,.875804,.877951,.880054,.882117,.884140,.886124,.888070,.889981,.891855,.893696,.895503,.897277,.899021,.900733,.902416,.904069,.905695,.907293,.908864,.910411,.911933,.913430,.914904,.916355,.917784,.919191,.920576,.921940,.923285,.924609,.925914,.927199,.928466,.929715,.930946,.932160,.933356,.934536,.935700,.936848,.937981,.939100,.940203,.941292,.942367,.943429,.944477,.945511,.946533,.947541,.948537,.949521,.950493,.951453,.952401,.953338,.954264,.955179,.956082,.956976,.957858,.958731,.959593,.960446,.961288,.962122,.962945,.963760,.964565,.965361,.966149,.966928,.967698,.968460,.969213,.969959,.970696,.971426,.972147,.972860,.973565,.974262,.974951,.975633,.976307,.976973,.977633,.978285,.978930,.979567,.980198,.980823,.981440,.982051,.982655,.983253,.983845,.984431,.985007,.985574,.986133,.986684,.987225,.987759,.988285,.988802,.989312,.989814,.990309,.990796,.991276,.991748,.992214,.992673,.993124,.993570,.994008,.994440,.994859,.995264,.995656,.996036,.996404,.996761,.997106,.997440,.997764,.998077,.998371,.998647,.998905,.999148,.999359,.999543,.999703,.999843,.999937,1.00000,.200590,.300067,.365846,.414777,.453604,.485696,.512979,.536657,.557533,.576169,.592972,.608249,.622237,.635119,.647045,.658134,.668486,.678183,.687295,.695881,.704015,.711738,.719087,.726093,.732782,.739181,.745311,.751190,.756837,.762267,.767494,.772531,.777390,.782081,.786614,.790998,.795241,.799351,.803334,.807197,.810948,.814592,.818134,.821579,.824932,.828195,.831374,.834472,.837492,.840437,.843310,.846115,.848854,.851529,.854143,.856698,.859195,.861638,.864029,.866367,.868658,.870902,.873101,.875257,.877370,.879442,.881475,.883469,.885425,.887346,.889231,.891082,.892900,.894686,.896440,.898164,.899858,.901524,.903161,.904770,.906354,.907913,.909447,.910958,.912445,.913909,.915351,.916771,.918170,.919548,.920906,.922245,.923564,.924864,.926145,.927409,.928655,.929883,.931095,.932289,.933469,.934632,.935781,.936915,.938035,.939140,.940232,.941309,.942374,.943425,.944463,.945489,.946503,.947504,.948493,.949471,.950437,.951391,.952335,.953268,.954190,.955101,.956003,.956894,.957776,.958647,.959510,.960362,.961206,.962041,.962866,.963683,.964491,.965290,.966081,.966864,.967639,.968406,.969165,.969916,.970659,.971394,.972121,.972841,.973553,.974257,.974955,.975645,.976327,.977003,.977672,.978334,.978990,.979638,.980281,.980916,.981546,.982169,.982786,.983397,.983999,.984592,.985177,.985754,.986322,.986882,.987434,.987979,.988515,.989044,.989566,.990080,.990587,.991088,.991581,.992067,.992546,.993019,.993485,.993945,.994392,.994826,.995247,.995656,.996054,.996440,.996815,.997179,.997533,.997877,.998201,.998506,.998794,.999065,.999301,.999506,.999684,.999839,.999937,1.00000,.199744,.298817,.364337,.413084,.451770,.483750,.510942,.534545,.555357,.573938,.590695,.605933,.619886,.632738,.644638,.655705,.666037,.675718,.684815,.693389,.701512,.709227,.716568,.723568,.730253,.736648,.742775,.748652,.754298,.759728,.764956,.769995,.774856,.779549,.784086,.788474,.792721,.796835,.800824,.804692,.808449,.812100,.815649,.819101,.822461,.825732,.828919,.832025,.835054,.838008,.840891,.843705,.846454,.849139,.851763,.854328,.856836,.859290,.861691,.864040,.866342,.868597,.870807,.872974,.875098,.877181,.879225,.881230,.883198,.885130,.887026,.888888,.890718,.892515,.894280,.896015,.897720,.899397,.901045,.902666,.904261,.905832,.907377,.908899,.910398,.911873,.913327,.914759,.916170,.917560,.918930,.920281,.921612,.922924,.924217,.925493,.926751,.927992,.929216,.930423,.931615,.932791,.933953,.935100,.936233,.937352,.938457,.939548,.940627,.941692,.942745,.943785,.944813,.945829,.946833,.947826,.948807,.949777,.950735,.951683,.952621,.953549,.954466,.955374,.956272,.957161,.958040,.958910,.959771,.960623,.961466,.962300,.963126,.963944,.964754,.965555,.966348,.967134,.967912,.968682,.969444,.970198,.970945,.971684,.972415,.973139,.973856,.974565,.975268,.975963,.976651,.977333,.978008,.978676,.979338,.979994,.980643,.981286,.981922,.982553,.983175,.983789,.984394,.984991,.985580,.986162,.986735,.987301,.987859,.988410,.988954,.989490,.990020,.990542,.991058,.991567,.992069,.992565,.993054,.993537,.994007,.994464,.994910,.995343,.995765,.996176,.996575,.996964,.997343,.997712,.998060,.998389,.998700,.998994,.999250,.999472,.999666,.999835,.999938,1.00000,.198763,.297360,.362574,.411098,.449611,.481453,.508530,.532036,.552766,.571275,.587969,.603151,.617055,.629864,.641725,.652757,.663057,.672709,.681781,.690332,.698434,.706130,.713455,.720440,.727112,.733495,.739612,.745480,.751118,.756542,.761764,.766798,.771655,.776346,.780880,.785266,.789512,.793627,.797615,.801485,.805243,.808896,.812447,.815902,.819265,.822540,.825731,.828841,.831874,.834833,.837721,.840541,.843295,.845986,.848616,.851187,.853702,.856163,.858570,.860927,.863237,.865500,.867718,.869893,.872027,.874119,.876173,.878188,.880166,.882108,.884016,.885889,.887730,.889539,.891316,.893063,.894781,.896470,.898131,.899765,.901374,.902958,.904517,.906053,.907566,.909056,.910524,.911971,.913397,.914802,.916188,.917554,.918901,.920229,.921538,.922830,.924105,.925362,.926602,.927826,.929035,.930229,.931408,.932572,.933722,.934859,.935981,.937091,.938187,.939270,.940341,.941399,.942445,.943479,.944502,.945513,.946512,.947501,.948479,.949445,.950402,.951349,.952285,.953212,.954130,.955038,.955937,.956827,.957708,.958581,.959444,.960299,.961146,.961985,.962815,.963637,.964452,.965259,.966058,.966850,.967634,.968410,.969180,.969942,.970697,.971446,.972187,.972921,.973649,.974371,.975085,.975794,.976496,.977191,.977881,.978565,.979242,.979914,.980580,.981240,.981892,.982536,.983172,.983800,.984421,.985034,.985640,.986238,.986830,.987414,.987991,.988562,.989126,.989683,.990233,.990777,.991315,.991846,.992371,.992890,.993396,.993890,.994373,.994843,.995302,.995750,.996188,.996614,.997031,.997437,.997823,.998190,.998539,.998870,.999159,.999413,.999635,.999829,.999938,1.00000,.197954,.296165,.361133,.409483,.447863,.479599,.506591,.530027,.550697,.569157,.585808,.600954,.614827,.627609,.639447,.650459,.660744,.670382,.679441,.687982,.696076,.703764,.711083,.718062,.724730,.731110,.737223,.743090,.748727,.754149,.759371,.764405,.769263,.773955,.778490,.782878,.787127,.791244,.795236,.799109,.802871,.806527,.810083,.813542,.816910,.820191,.823388,.826504,.829543,.832509,.835404,.838230,.840992,.843690,.846328,.848907,.851430,.853898,.856314,.858680,.860998,.863269,.865496,.867680,.869822,.871924,.873986,.876011,.877998,.879949,.881866,.883749,.885598,.887416,.889203,.890960,.892687,.894385,.896056,.897699,.899317,.900910,.902479,.904025,.905547,.907047,.908525,.909982,.911418,.912833,.914229,.915605,.916962,.918300,.919620,.920922,.922206,.923474,.924725,.925959,.927178,.928382,.929572,.930747,.931909,.933056,.934190,.935311,.936419,.937514,.938597,.939667,.940725,.941771,.942806,.943829,.944841,.945843,.946833,.947812,.948782,.949742,.950692,.951633,.952565,.953487,.954400,.955305,.956201,.957088,.957967,.958838,.959700,.960555,.961401,.962240,.963071,.963894,.964710,.965518,.966319,.967113,.967900,.968680,.969453,.970218,.970977,.971730,.972476,.973215,.973948,.974675,.975395,.976110,.976818,.977520,.978216,.978907,.979592,.980271,.980942,.981606,.982263,.982912,.983554,.984189,.984816,.985437,.986051,.986658,.987259,.987853,.988441,.989022,.989597,.990166,.990728,.991285,.991836,.992381,.992913,.993434,.993944,.994442,.994929,.995406,.995872,.996328,.996774,.997210,.997626,.998023,.998401,.998762,.999079,.999359,.999606,.999823,.999939,1.00000]
	# Z=35
	      Z35=[.155302,.233195,.285284,.324473,.355921,.382209,.404812,.424651,.442340,.458310,.472874,.486265,.498664,.510214,.521027,.531195,.540796,.549891,.558534,.566771,.574637,.582167,.589390,.596332,.603014,.609458,.615680,.621698,.627524,.633171,.638652,.643977,.649155,.654195,.659104,.663891,.668561,.673121,.677577,.681934,.686195,.690366,.694450,.698451,.702374,.706221,.709996,.713701,.717341,.720917,.724431,.727887,.731287,.734632,.737924,.741166,.744360,.747506,.750607,.753664,.756678,.759650,.762582,.765474,.768328,.771145,.773927,.776674,.779387,.782067,.784716,.787334,.789922,.792481,.795011,.797514,.799989,.802439,.804863,.807262,.809637,.811987,.814313,.816617,.818897,.821156,.823394,.825610,.827806,.829982,.832138,.834275,.836393,.838493,.840575,.842640,.844687,.846718,.848732,.850730,.852711,.854677,.856628,.858563,.860483,.862388,.864279,.866156,.868019,.869869,.871705,.873528,.875339,.877136,.878921,.880694,.882456,.884205,.885943,.887669,.889384,.891088,.892782,.894464,.896136,.897797,.899448,.901089,.902721,.904342,.905954,.907556,.909150,.910734,.912309,.913875,.915432,.916981,.918521,.920053,.921577,.923092,.924599,.926099,.927590,.929074,.930550,.932019,.933480,.934934,.936380,.937820,.939253,.940678,.942097,.943509,.944915,.946313,.947706,.949092,.950471,.951844,.953211,.954571,.955926,.957274,.958616,.959952,.961282,.962607,.963925,.965238,.966546,.967847,.969144,.970435,.971720,.973001,.974276,.975546,.976810,.978070,.979325,.980575,.981820,.983061,.984296,.985527,.986754,.987975,.989193,.990408,.991618,.992825,.994028,.995228,.996426,.997620,.998811,1.00000,.159574,.239557,.293010,.333199,.365429,.392353,.415488,.435781,.453863,.470177,.485045,.498707,.511349,.523118,.534128,.544476,.554239,.563483,.572261,.580621,.588599,.596230,.603544,.610568,.617325,.623834,.630116,.636186,.642058,.647746,.653262,.658616,.663819,.668879,.673804,.678602,.683281,.687845,.692301,.696655,.700910,.705071,.709141,.713126,.717029,.720853,.724602,.728280,.731888,.735430,.738908,.742326,.745684,.748986,.752233,.755428,.758572,.761667,.764714,.767716,.770673,.773586,.776457,.779287,.782077,.784829,.787544,.790222,.792866,.795475,.798052,.800596,.803108,.805591,.808043,.810467,.812862,.815231,.817572,.819888,.822178,.824442,.826683,.828899,.831092,.833262,.835410,.837536,.839641,.841726,.843789,.845833,.847858,.849863,.851850,.853819,.855770,.857703,.859619,.861519,.863402,.865268,.867118,.868953,.870772,.872577,.874366,.876141,.877901,.879648,.881381,.883100,.884806,.886499,.888179,.889847,.891502,.893145,.894776,.896396,.898004,.899600,.901186,.902760,.904324,.905877,.907420,.908953,.910475,.911988,.913490,.914983,.916467,.917941,.919407,.920863,.922310,.923748,.925178,.926599,.928012,.929416,.930813,.932202,.933582,.934955,.936321,.937678,.939029,.940372,.941708,.943036,.944358,.945672,.946980,.948281,.949576,.950863,.952145,.953419,.954688,.955951,.957207,.958457,.959702,.960940,.962173,.963400,.964622,.965838,.967048,.968253,.969453,.970647,.971836,.973020,.974199,.975373,.976542,.977706,.978864,.980018,.981168,.982312,.983451,.984586,.985717,.986842,.987964,.989080,.990192,.991300,.992403,.993501,.994595,.995684,.996769,.997850,.998927,1.00000,.164447,.246847,.301897,.343273,.376444,.404146,.427941,.448806,.467393,.484156,.499428,.513458,.526436,.538512,.549808,.560420,.570429,.579903,.588897,.597459,.605624,.613427,.620901,.628072,.634964,.641600,.647998,.654175,.660146,.665925,.671525,.676957,.682231,.687355,.692340,.697192,.701919,.706527,.711023,.715411,.719695,.723879,.727967,.731965,.735876,.739704,.743452,.747124,.750723,.754251,.757713,.761109,.764443,.767717,.770933,.774093,.777200,.780254,.783258,.786213,.789121,.791982,.794797,.797569,.800299,.802988,.805637,.808247,.810819,.813356,.815856,.818322,.820755,.823155,.825524,.827861,.830169,.832447,.834696,.836918,.839112,.841280,.843421,.845537,.847628,.849695,.851739,.853759,.855757,.857732,.859686,.861618,.863530,.865422,.867294,.869146,.870979,.872794,.874590,.876369,.878130,.879873,.881600,.883311,.885005,.886683,.888346,.889993,.891625,.893243,.894846,.896435,.898010,.899571,.901118,.902652,.904174,.905682,.907178,.908661,.910133,.911592,.913040,.914476,.915901,.917315,.918718,.920110,.921492,.922863,.924224,.925574,.926915,.928246,.929567,.930879,.932181,.933474,.934758,.936033,.937299,.938556,.939805,.941046,.942278,.943502,.944718,.945926,.947126,.948318,.949503,.950680,.951849,.953011,.954166,.955314,.956455,.957589,.958715,.959835,.960949,.962056,.963156,.964250,.965338,.966420,.967496,.968565,.969629,.970687,.971739,.972785,.973825,.974860,.975889,.976913,.977931,.978944,.979952,.980954,.981952,.982944,.983931,.984914,.985891,.986864,.987832,.988795,.989754,.990708,.991657,.992602,.993543,.994478,.995410,.996337,.997259,.998178,.999091,1.00000,.168583,.253010,.309385,.351734,.385669,.413993,.438310,.459621,.478595,.495700,.511274,.525573,.538794,.551090,.562585,.573379,.583555,.593180,.602314,.611005,.619286,.627194,.634763,.642020,.648991,.655696,.662157,.668389,.674410,.680234,.685872,.691337,.696639,.701787,.706791,.711659,.716397,.721013,.725513,.729902,.734183,.738360,.742438,.746423,.750317,.754124,.757850,.761496,.765066,.768564,.771992,.775352,.778648,.781881,.785054,.788170,.791229,.794235,.797188,.800091,.802944,.805749,.808507,.811220,.813888,.816514,.819099,.821644,.824149,.826617,.829048,.831444,.833804,.836131,.838425,.840686,.842917,.845117,.847287,.849429,.851542,.853628,.855687,.857720,.859727,.861710,.863667,.865601,.867512,.869400,.871266,.873110,.874932,.876734,.878515,.880277,.882018,.883741,.885444,.887130,.888797,.890447,.892079,.893695,.895294,.896876,.898443,.899994,.901530,.903050,.904556,.906047,.907524,.908986,.910435,.911871,.913293,.914702,.916098,.917481,.918852,.920211,.921558,.922893,.924216,.925528,.926829,.928119,.929398,.930667,.931924,.933172,.934409,.935636,.936854,.938061,.939259,.940447,.941626,.942796,.943957,.945109,.946252,.947386,.948512,.949629,.950737,.951838,.952930,.954015,.955091,.956160,.957221,.958274,.959320,.960358,.961389,.962413,.963429,.964439,.965441,.966437,.967426,.968409,.969385,.970355,.971318,.972275,.973225,.974170,.975108,.976041,.976967,.977888,.978803,.979712,.980615,.981513,.982405,.983292,.984173,.985050,.985921,.986787,.987648,.988504,.989355,.990202,.991043,.991880,.992713,.993540,.994363,.995182,.995996,.996805,.997610,.998411,.999208,1.00000,.173813,.260793,.318828,.362391,.397271,.426362,.451318,.473173,.492616,.510130,.526064,.540683,.554189,.566741,.578466,.589468,.599830,.609626,.618914,.627744,.636147,.644159,.651816,.659148,.666179,.672933,.679431,.685691,.691729,.697561,.703199,.708655,.713942,.719068,.724042,.728874,.733571,.738140,.742588,.746920,.751140,.755253,.759265,.763179,.767000,.770732,.774379,.777944,.781432,.784844,.788184,.791455,.794659,.797798,.800876,.803895,.806855,.809760,.812612,.815411,.818160,.820860,.823513,.826120,.828682,.831202,.833679,.836116,.838514,.840873,.843196,.845482,.847733,.849950,.852133,.854285,.856404,.858493,.860552,.862582,.864584,.866558,.868506,.870427,.872323,.874193,.876039,.877862,.879661,.881437,.883191,.884923,.886634,.888324,.889994,.891644,.893274,.894885,.896477,.898051,.899606,.901145,.902666,.904170,.905658,.907129,.908585,.910025,.911450,.912859,.914254,.915634,.917001,.918353,.919691,.921016,.922328,.923626,.924912,.926185,.927446,.928694,.929931,.931156,.932370,.933572,.934763,.935943,.937112,.938270,.939418,.940556,.941683,.942801,.943908,.945006,.946095,.947173,.948243,.949303,.950355,.951397,.952431,.953456,.954472,.955480,.956480,.957472,.958455,.959431,.960398,.961358,.962310,.963255,.964192,.965122,.966045,.966960,.967869,.968770,.969665,.970553,.971434,.972308,.973177,.974038,.974893,.975743,.976585,.977422,.978253,.979077,.979896,.980709,.981516,.982318,.983114,.983904,.984689,.985468,.986242,.987011,.987774,.988532,.989285,.990033,.990775,.991513,.992246,.992974,.993697,.994415,.995128,.995837,.996542,.997242,.997937,.998629,.999316,1.00000,.184600,.276715,.338003,.383876,.420502,.450962,.477018,.499772,.519957,.538087,.554536,.569584,.583446,.596293,.608259,.619455,.629972,.639884,.649256,.658141,.666578,.674607,.682265,.689582,.696585,.703300,.709746,.715943,.721909,.727659,.733207,.738566,.743747,.748761,.753617,.758324,.762890,.767323,.771629,.775815,.779885,.783843,.787696,.791448,.795103,.798666,.802140,.805530,.808840,.812071,.815228,.818312,.821328,.824278,.827163,.829987,.832752,.835459,.838110,.840709,.843255,.845751,.848199,.850601,.852956,.855268,.857537,.859765,.861953,.864102,.866213,.868287,.870325,.872329,.874299,.876236,.878141,.880015,.881859,.883673,.885459,.887219,.888951,.890659,.892341,.893998,.895631,.897241,.898829,.900393,.901936,.903458,.904959,.906439,.907899,.909340,.910762,.912165,.913549,.914916,.916266,.917599,.918916,.920217,.921502,.922772,.924027,.925268,.926494,.927706,.928903,.930088,.931258,.932416,.933561,.934693,.935812,.936920,.938015,.939098,.940170,.941231,.942281,.943320,.944349,.945367,.946375,.947372,.948360,.949338,.950307,.951265,.952215,.953155,.954086,.955009,.955922,.956827,.957724,.958612,.959492,.960363,.961227,.962082,.962930,.963770,.964602,.965427,.966245,.967055,.967858,.968654,.969443,.970225,.971000,.971769,.972531,.973286,.974035,.974778,.975514,.976244,.976967,.977685,.978396,.979102,.979802,.980496,.981184,.981866,.982543,.983214,.983880,.984541,.985196,.985845,.986490,.987130,.987764,.988393,.989018,.989637,.990252,.990861,.991466,.992066,.992662,.993253,.993839,.994421,.994998,.995571,.996139,.996703,.997262,.997818,.998369,.998916,.999460,1.00000,.195708,.293041,.357583,.405732,.444046,.475804,.502880,.526445,.547280,.565932,.582797,.598175,.612294,.625335,.637442,.648731,.659300,.669228,.678584,.687424,.695799,.703752,.711318,.718531,.725419,.732007,.738318,.744371,.750185,.755775,.761157,.766342,.771345,.776174,.780841,.785354,.789722,.793953,.798053,.802030,.805891,.809640,.813284,.816826,.820273,.823628,.826894,.830077,.833178,.836203,.839153,.842031,.844841,.847585,.850266,.852885,.855445,.857949,.860398,.862793,.865138,.867434,.869683,.871886,.874045,.876161,.878235,.880269,.882264,.884220,.886140,.888025,.889874,.891690,.893473,.895224,.896944,.898633,.900294,.901926,.903530,.905108,.906660,.908186,.909688,.911166,.912621,.914053,.915462,.916849,.918216,.919561,.920886,.922191,.923477,.924743,.925991,.927221,.928433,.929627,.930805,.931967,.933113,.934243,.935358,.936458,.937543,.938614,.939670,.940713,.941742,.942758,.943761,.944751,.945729,.946694,.947647,.948588,.949518,.950436,.951343,.952239,.953125,.954001,.954866,.955722,.956567,.957403,.958230,.959047,.959855,.960654,.961444,.962225,.962998,.963762,.964518,.965266,.966006,.966737,.967462,.968178,.968888,.969590,.970286,.970974,.971656,.972331,.972999,.973660,.974316,.974964,.975607,.976243,.976873,.977498,.978116,.978728,.979335,.979936,.980531,.981120,.981704,.982283,.982856,.983424,.983987,.984544,.985096,.985644,.986186,.986723,.987256,.987783,.988306,.988824,.989338,.989847,.990352,.990852,.991347,.991839,.992326,.992808,.993287,.993761,.994231,.994698,.995160,.995618,.996072,.996523,.996971,.997415,.997855,.998292,.998725,.999154,.999579,1.00000,.205726,.307791,.375305,.425547,.465429,.498405,.526451,.550801,.572277,.591455,.608755,.624489,.638900,.652179,.664475,.675914,.686596,.696606,.706015,.714885,.723269,.731212,.738752,.745924,.752757,.759278,.765510,.771475,.777190,.782674,.787941,.793005,.797878,.802573,.807099,.811466,.815684,.819760,.823701,.827515,.831209,.834790,.838262,.841632,.844903,.848080,.851167,.854168,.857088,.859928,.862693,.865385,.868008,.870564,.873056,.875485,.877855,.880168,.882425,.884628,.886781,.888886,.890943,.892954,.894921,.896846,.898729,.900572,.902377,.904144,.905874,.907569,.909229,.910857,.912451,.914015,.915547,.917051,.918525,.919971,.921390,.922784,.924152,.925496,.926816,.928113,.929387,.930639,.931869,.933078,.934267,.935435,.936584,.937714,.938825,.939918,.940992,.942050,.943090,.944114,.945122,.946114,.947091,.948053,.949001,.949934,.950853,.951759,.952651,.953530,.954396,.955250,.956091,.956920,.957737,.958543,.959337,.960120,.960892,.961653,.962403,.963144,.963874,.964595,.965305,.966007,.966698,.967381,.968055,.968720,.969376,.970023,.970663,.971293,.971916,.972531,.973138,.973737,.974329,.974913,.975490,.976060,.976623,.977179,.977728,.978271,.978807,.979337,.979860,.980377,.980888,.981393,.981892,.982385,.982873,.983355,.983831,.984301,.984767,.985226,.985681,.986130,.986574,.987014,.987448,.987877,.988301,.988721,.989136,.989546,.989952,.990353,.990749,.991142,.991530,.991913,.992293,.992668,.993039,.993407,.993770,.994129,.994485,.994837,.995185,.995529,.995870,.996207,.996541,.996871,.997198,.997521,.997842,.998159,.998473,.998784,.999093,.999398,.999700,1.00000,.217742,.325401,.396374,.449011,.490652,.524966,.554051,.579216,.601336,.621023,.638720,.654763,.669406,.682851,.695261,.706766,.717473,.727472,.736840,.745641,.753937,.761777,.769200,.776242,.782934,.789304,.795376,.801172,.806711,.812012,.817090,.821960,.826634,.831125,.835444,.839601,.843604,.847462,.851184,.854776,.858248,.861606,.864856,.868002,.871050,.874005,.876869,.879648,.882346,.884964,.887508,.889980,.892383,.894719,.896992,.899204,.901356,.903452,.905494,.907483,.909422,.911314,.913159,.914960,.916719,.918435,.920111,.921749,.923348,.924912,.926439,.927933,.929394,.930822,.932219,.933586,.934924,.936233,.937514,.938768,.939997,.941200,.942379,.943534,.944666,.945776,.946863,.947929,.948975,.950000,.951006,.951992,.952959,.953908,.954840,.955754,.956651,.957531,.958395,.959244,.960077,.960895,.961698,.962487,.963262,.964023,.964771,.965505,.966227,.966936,.967633,.968318,.968991,.969653,.970303,.970943,.971572,.972190,.972798,.973395,.973983,.974561,.975129,.975687,.976236,.976776,.977307,.977829,.978343,.978848,.979345,.979834,.980315,.980789,.981254,.981712,.982163,.982607,.983043,.983473,.983895,.984311,.984720,.985123,.985519,.985909,.986292,.986670,.987041,.987407,.987767,.988121,.988470,.988813,.989151,.989483,.989811,.990133,.990451,.990763,.991071,.991373,.991671,.991965,.992253,.992537,.992817,.993092,.993363,.993630,.993893,.994151,.994406,.994657,.994903,.995146,.995386,.995621,.995854,.996082,.996307,.996529,.996747,.996962,.997174,.997382,.997587,.997790,.997989,.998185,.998378,.998569,.998757,.998942,.999125,.999305,.999482,.999657,.999830,1.00000,.221884,.331456,.403602,.457043,.499268,.534022,.563442,.588868,.611189,.631030,.648844,.664973,.679677,.693162,.705592,.717102,.727801,.737781,.747119,.755880,.764134,.771926,.779298,.786286,.792922,.799232,.805243,.810976,.816451,.821685,.826696,.831497,.836102,.840522,.844770,.848854,.852785,.856571,.860219,.863738,.867137,.870422,.873598,.876673,.879649,.882531,.885325,.888033,.890660,.893208,.895682,.898085,.900419,.902687,.904892,.907036,.909122,.911151,.913127,.915050,.916924,.918751,.920531,.922268,.923962,.925614,.927226,.928800,.930337,.931837,.933303,.934734,.936133,.937500,.938836,.940142,.941419,.942668,.943889,.945084,.946253,.947397,.948517,.949613,.950686,.951736,.952765,.953773,.954760,.955726,.956674,.957602,.958512,.959403,.960277,.961134,.961974,.962797,.963605,.964397,.965174,.965935,.966683,.967415,.968134,.968839,.969531,.970210,.970876,.971529,.972171,.972801,.973419,.974026,.974621,.975206,.975781,.976345,.976898,.977442,.977976,.978500,.979015,.979520,.980015,.980502,.980980,.981449,.981910,.982362,.982806,.983243,.983671,.984092,.984506,.984912,.985311,.985703,.986089,.986467,.986839,.987204,.987562,.987913,.988259,.988598,.988930,.989257,.989578,.989893,.990203,.990507,.990806,.991099,.991387,.991670,.991948,.992221,.992490,.992753,.993012,.993266,.993514,.993758,.993997,.994232,.994462,.994688,.994910,.995127,.995340,.995549,.995754,.995956,.996153,.996347,.996537,.996724,.996907,.997087,.997263,.997435,.997604,.997769,.997931,.998090,.998245,.998398,.998547,.998693,.998836,.998976,.999113,.999248,.999379,.999509,.999635,.999759,.999881,1.00000,.220910,.330017,.401868,.455098,.497162,.531788,.561105,.586444,.608693,.628473,.646235,.662318,.676983,.690434,.702836,.714320,.724997,.734957,.744278,.753025,.761269,.769057,.776429,.783420,.790061,.796381,.802404,.808151,.813643,.818896,.823927,.828750,.833378,.837824,.842098,.846209,.850169,.853984,.857662,.861211,.864641,.867958,.871167,.874273,.877282,.880198,.883024,.885765,.888426,.891008,.893516,.895952,.898319,.900621,.902860,.905038,.907157,.909221,.911230,.913187,.915094,.916954,.918768,.920538,.922264,.923949,.925594,.927200,.928769,.930301,.931798,.933261,.934691,.936089,.937456,.938792,.940100,.941379,.942630,.943855,.945053,.946227,.947376,.948501,.949603,.950682,.951739,.952775,.953789,.954784,.955759,.956714,.957651,.958570,.959470,.960354,.961220,.962070,.962903,.963721,.964523,.965310,.966082,.966840,.967583,.968312,.969027,.969730,.970419,.971096,.971760,.972412,.973052,.973681,.974298,.974905,.975500,.976085,.976660,.977224,.977778,.978322,.978856,.979379,.979893,.980398,.980894,.981380,.981858,.982327,.982787,.983239,.983684,.984120,.984548,.984969,.985382,.985789,.986188,.986579,.986964,.987341,.987711,.988074,.988431,.988780,.989123,.989460,.989791,.990115,.990433,.990746,.991052,.991353,.991649,.991939,.992223,.992503,.992777,.993047,.993310,.993568,.993821,.994067,.994309,.994545,.994776,.995003,.995224,.995441,.995653,.995860,.996063,.996262,.996457,.996647,.996833,.997016,.997194,.997369,.997539,.997704,.997866,.998022,.998175,.998323,.998468,.998608,.998745,.998878,.999007,.999132,.999253,.999371,.999484,.999594,.999701,.999804,.999904,1.00000,.218603,.326631,.397811,.450573,.492292,.526652,.555760,.580933,.603049,.622721,.640396,.656409,.671019,.684427,.696795,.708255,.718915,.728866,.738183,.746931,.755182,.762983,.770372,.777385,.784053,.790403,.796458,.802241,.807771,.813065,.818139,.823007,.827682,.832175,.836499,.840661,.844672,.848540,.852273,.855877,.859362,.862734,.865999,.869161,.872225,.875197,.878079,.880877,.883593,.886231,.888795,.891287,.893710,.896068,.898362,.900596,.902771,.904889,.906953,.908965,.910927,.912841,.914709,.916532,.918311,.920049,.921747,.923405,.925025,.926609,.928157,.929671,.931151,.932599,.934015,.935401,.936758,.938085,.939385,.940658,.941904,.943125,.944320,.945492,.946640,.947765,.948867,.949948,.951008,.952047,.953065,.954065,.955045,.956006,.956950,.957875,.958783,.959675,.960550,.961408,.962251,.963078,.963890,.964687,.965470,.966238,.966993,.967734,.968461,.969176,.969878,.970568,.971245,.971911,.972565,.973208,.973839,.974460,.975070,.975670,.976259,.976837,.977406,.977964,.978512,.979050,.979580,.980100,.980610,.981112,.981606,.982090,.982567,.983035,.983495,.983948,.984393,.984830,.985260,.985683,.986097,.986504,.986904,.987296,.987681,.988059,.988430,.988794,.989151,.989502,.989847,.990185,.990517,.990843,.991164,.991478,.991787,.992091,.992389,.992681,.992967,.993247,.993520,.993787,.994049,.994304,.994553,.994797,.995036,.995269,.995497,.995720,.995938,.996151,.996360,.996564,.996763,.996958,.997149,.997335,.997516,.997691,.997861,.998026,.998185,.998340,.998489,.998635,.998775,.998912,.999043,.999168,.999289,.999405,.999516,.999622,.999723,.999819,.999911,1.00000,.215947,.322755,.393192,.445450,.486805,.520896,.549801,.574820,.596819,.616404,.634017,.649988,.664571,.677967,.690334,.701803,.712482,.722458,.731807,.740593,.748885,.756730,.764167,.771231,.777951,.784355,.790467,.796309,.801898,.807253,.812388,.817319,.822058,.826616,.831005,.835233,.839311,.843246,.847045,.850717,.854268,.857706,.861035,.864260,.867387,.870420,.873363,.876220,.878995,.881692,.884313,.886861,.889341,.891753,.894102,.896389,.898617,.900787,.902903,.904966,.906978,.908942,.910859,.912730,.914558,.916343,.918087,.919791,.921457,.923086,.924678,.926236,.927760,.929251,.930710,.932138,.933536,.934904,.936245,.937558,.938844,.940104,.941340,.942551,.943738,.944902,.946043,.947163,.948261,.949338,.950395,.951433,.952450,.953450,.954430,.955393,.956338,.957266,.958178,.959073,.959952,.960815,.961664,.962497,.963315,.964119,.964910,.965686,.966449,.967199,.967937,.968662,.969374,.970075,.970764,.971441,.972107,.972762,.973407,.974040,.974663,.975275,.975877,.976468,.977050,.977621,.978183,.978735,.979278,.979812,.980337,.980854,.981362,.981861,.982352,.982836,.983311,.983779,.984239,.984691,.985136,.985572,.986000,.986421,.986834,.987240,.987638,.988030,.988414,.988792,.989163,.989527,.989885,.990237,.990582,.990922,.991255,.991583,.991905,.992221,.992531,.992833,.993128,.993416,.993698,.993974,.994243,.994506,.994763,.995015,.995260,.995500,.995735,.995965,.996189,.996408,.996622,.996832,.997037,.997237,.997431,.997618,.997799,.997974,.998143,.998306,.998464,.998617,.998764,.998907,.999043,.999173,.999297,.999416,.999528,.999633,.999733,.999827,.999916,1.00000,.214295,.320325,.390275,.442190,.483288,.517180,.545927,.570818,.592713,.612213,.629755,.645668,.660203,.673560,.685896,.697340,.707999,.717961,.727299,.736079,.744370,.752217,.759659,.766731,.773463,.779881,.786009,.791869,.797478,.802855,.808015,.812970,.817736,.822322,.826739,.830997,.835105,.839072,.842903,.846608,.850193,.853664,.857028,.860288,.863450,.866518,.869497,.872390,.875202,.877934,.880592,.883177,.885694,.888143,.890529,.892853,.895118,.897326,.899479,.901579,.903628,.905629,.907583,.909491,.911355,.913177,.914958,.916699,.918401,.920066,.921695,.923288,.924848,.926375,.927869,.929333,.930766,.932170,.933545,.934893,.936214,.937509,.938779,.940024,.941245,.942443,.943618,.944771,.945903,.947013,.948103,.949173,.950223,.951255,.952268,.953263,.954240,.955199,.956142,.957069,.957979,.958873,.959752,.960616,.961465,.962299,.963120,.963926,.964719,.965499,.966266,.967020,.967761,.968491,.969208,.969914,.970608,.971292,.971964,.972626,.973276,.973916,.974545,.975163,.975772,.976370,.976958,.977537,.978107,.978667,.979218,.979760,.980294,.980819,.981335,.981844,.982344,.982837,.983321,.983798,.984267,.984728,.985180,.985624,.986061,.986490,.986912,.987326,.987734,.988134,.988527,.988914,.989294,.989668,.990035,.990396,.990751,.991100,.991443,.991780,.992109,.992431,.992746,.993054,.993354,.993648,.993935,.994215,.994490,.994758,.995020,.995276,.995526,.995771,.996010,.996244,.996473,.996696,.996915,.997129,.997335,.997534,.997726,.997911,.998090,.998262,.998428,.998589,.998743,.998893,.999035,.999170,.999298,.999420,.999534,.999640,.999739,.999832,.999919,1.00000,.212870,.318231,.387762,.439384,.480264,.513987,.542600,.567385,.589192,.608621,.626105,.641971,.656468,.669793,.682105,.693531,.704176,.714128,.723461,.732238,.740529,.748380,.755828,.762908,.769650,.776081,.782223,.788098,.793724,.799119,.804298,.809274,.814060,.818668,.823109,.827391,.831523,.835514,.839372,.843102,.846714,.850212,.853603,.856891,.860081,.863178,.866185,.869107,.871948,.874710,.877397,.880012,.882558,.885037,.887453,.889807,.892102,.894340,.896523,.898654,.900733,.902764,.904748,.906687,.908581,.910433,.912244,.914015,.915748,.917442,.919101,.920725,.922314,.923870,.925394,.926887,.928350,.929783,.931188,.932564,.933914,.935238,.936536,.937810,.939060,.940286,.941489,.942670,.943830,.944968,.946085,.947183,.948261,.949320,.950360,.951381,.952385,.953372,.954341,.955294,.956231,.957151,.958056,.958946,.959820,.960680,.961526,.962358,.963176,.963981,.964773,.965551,.966318,.967072,.967814,.968544,.969263,.969970,.970666,.971351,.972026,.972689,.973341,.973983,.974614,.975236,.975847,.976449,.977041,.977624,.978198,.978763,.979319,.979866,.980405,.980935,.981457,.981972,.982478,.982977,.983467,.983949,.984422,.984888,.985345,.985795,.986237,.986672,.987100,.987520,.987933,.988340,.988740,.989133,.989519,.989899,.990273,.990641,.991003,.991359,.991707,.992047,.992379,.992704,.993021,.993332,.993635,.993932,.994221,.994505,.994782,.995053,.995318,.995577,.995830,.996077,.996320,.996556,.996788,.997014,.997233,.997443,.997646,.997841,.998029,.998210,.998385,.998553,.998716,.998872,.999020,.999160,.999293,.999419,.999535,.999643,.999743,.999835,.999921,1.00000,.210529,.314786,.383626,.434762,.475279,.508720,.537110,.561713,.583373,.602681,.620065,.635849,.650279,.663549,.675817,.687208,.697826,.707758,.717078,.725847,.734135,.741988,.749443,.756535,.763291,.769739,.775902,.781800,.787453,.792876,.798084,.803093,.807913,.812556,.817033,.821353,.825525,.829557,.833456,.837229,.840884,.844426,.847861,.851194,.854430,.857573,.860627,.863596,.866483,.869293,.872028,.874691,.877285,.879813,.882278,.884681,.887025,.889312,.891544,.893724,.895853,.897933,.899966,.901954,.903897,.905798,.907658,.909477,.911258,.913002,.914709,.916381,.918018,.919622,.921194,.922735,.924245,.925725,.927177,.928601,.929997,.931368,.932713,.934033,.935328,.936600,.937850,.939076,.940281,.941464,.942627,.943769,.944892,.945995,.947079,.948145,.949192,.950222,.951235,.952231,.953211,.954174,.955122,.956054,.956971,.957873,.958761,.959634,.960494,.961340,.962173,.962993,.963801,.964595,.965378,.966148,.966907,.967654,.968390,.969115,.969829,.970532,.971223,.971904,.972575,.973235,.973885,.974526,.975156,.975778,.976390,.976992,.977586,.978171,.978748,.979316,.979875,.980427,.980970,.981505,.982032,.982550,.983060,.983562,.984055,.984541,.985019,.985489,.985952,.986407,.986855,.987296,.987730,.988158,.988578,.988992,.989400,.989801,.990196,.990585,.990965,.991337,.991701,.992056,.992404,.992744,.993076,.993401,.993719,.994030,.994334,.994632,.994923,.995208,.995486,.995759,.996025,.996286,.996541,.996790,.997031,.997261,.997484,.997697,.997903,.998101,.998291,.998475,.998651,.998820,.998980,.999131,.999273,.999406,.999529,.999641,.999744,.999839,.999924,1.00000,.208876,.312347,.380688,.431469,.471717,.504946,.533165,.557627,.579170,.598379,.615680,.631392,.645761,.658980,.671203,.682557,.693143,.703049,.712346,.721097,.729373,.737217,.744667,.751756,.758515,.764968,.771138,.777046,.782710,.788147,.793372,.798398,.803238,.807902,.812401,.816745,.820941,.824998,.828924,.832725,.836408,.839979,.843443,.846806,.850072,.853246,.856331,.859332,.862251,.865093,.867860,.870556,.873184,.875745,.878243,.880679,.883057,.885378,.887645,.889858,.892021,.894136,.896204,.898226,.900204,.902139,.904033,.905888,.907703,.909482,.911223,.912930,.914602,.916241,.917847,.919422,.920967,.922482,.923968,.925426,.926857,.928262,.929641,.930995,.932325,.933631,.934914,.936175,.937413,.938630,.939827,.941002,.942158,.943295,.944412,.945511,.946591,.947654,.948700,.949729,.950741,.951737,.952717,.953681,.954631,.955565,.956485,.957391,.958283,.959161,.960026,.960877,.961716,.962542,.963356,.964158,.964948,.965727,.966494,.967250,.967995,.968728,.969450,.970162,.970863,.971554,.972235,.972906,.973567,.974218,.974861,.975493,.976117,.976732,.977338,.977936,.978525,.979106,.979679,.980244,.980800,.981347,.981886,.982417,.982939,.983454,.983960,.984459,.984950,.985434,.985911,.986380,.986842,.987297,.987746,.988188,.988623,.989052,.989474,.989890,.990298,.990696,.991086,.991467,.991840,.992206,.992563,.992913,.993255,.993590,.993917,.994238,.994552,.994860,.995160,.995455,.995743,.996025,.996301,.996572,.996832,.997082,.997322,.997553,.997775,.997989,.998195,.998392,.998583,.998765,.998937,.999098,.999249,.999391,.999521,.999638,.999744,.999841,.999926,1.00000,.206523,.308863,.376481,.426741,.466590,.499501,.527459,.551704,.573062,.592113,.609277,.624871,.639136,.652265,.664408,.675691,.686216,.696067,.705316,.714024,.722264,.730079,.737505,.744576,.751319,.757762,.763925,.769830,.775495,.780935,.786165,.791200,.796050,.800726,.805240,.809600,.813815,.817892,.821839,.825662,.829369,.832966,.836457,.839848,.843144,.846348,.849465,.852498,.855451,.858327,.861129,.863861,.866525,.869123,.871659,.874134,.876551,.878911,.881217,.883471,.885675,.887831,.889941,.892006,.894027,.896006,.897944,.899843,.901703,.903526,.905313,.907065,.908783,.910468,.912121,.913743,.915335,.916897,.918430,.919936,.921415,.922867,.924295,.925697,.927076,.928431,.929763,.931073,.932361,.933628,.934874,.936099,.937305,.938492,.939659,.940809,.941940,.943053,.944149,.945228,.946291,.947338,.948369,.949384,.950385,.951371,.952342,.953299,.954242,.955172,.956088,.956991,.957882,.958759,.959625,.960478,.961320,.962150,.962968,.963776,.964572,.965357,.966131,.966894,.967647,.968389,.969121,.969844,.970556,.971259,.971952,.972637,.973312,.973978,.974635,.975284,.975924,.976556,.977179,.977795,.978401,.978999,.979589,.980170,.980743,.981308,.981865,.982414,.982956,.983490,.984016,.984535,.985048,.985553,.986051,.986542,.987027,.987505,.987977,.988442,.988898,.989345,.989784,.990214,.990636,.991049,.991455,.991852,.992242,.992625,.993000,.993368,.993728,.994082,.994430,.994770,.995104,.995432,.995754,.996069,.996372,.996664,.996945,.997215,.997475,.997725,.997965,.998196,.998419,.998633,.998833,.999019,.999192,.999354,.999498,.999627,.999742,.999844,.999929,1.00000,.204673,.306128,.373183,.423042,.462585,.495255,.523016,.547098,.568320,.587255,.604321,.619830,.634023,.647089,.659179,.670415,.680900,.690717,.699937,.708621,.716841,.724639,.732054,.739116,.745855,.752295,.758459,.764367,.770036,.775484,.780723,.785768,.790631,.795321,.799850,.804227,.808459,.812555,.816522,.820366,.824095,.827715,.831230,.834645,.837966,.841195,.844338,.847398,.850379,.853283,.856114,.858874,.861567,.864195,.866761,.869266,.871713,.874104,.876442,.878727,.880963,.883151,.885293,.887390,.889444,.891455,.893427,.895359,.897252,.899109,.900930,.902716,.904468,.906187,.907874,.909530,.911156,.912753,.914320,.915860,.917374,.918861,.920323,.921761,.923175,.924565,.925932,.927278,.928601,.929903,.931185,.932446,.933687,.934910,.936113,.937298,.938464,.939614,.940745,.941860,.942959,.944042,.945109,.946160,.947197,.948219,.949226,.950220,.951199,.952165,.953118,.954057,.954984,.955899,.956801,.957691,.958569,.959435,.960290,.961134,.961967,.962788,.963599,.964399,.965189,.965968,.966737,.967497,.968246,.968986,.969717,.970438,.971151,.971854,.972549,.973235,.973912,.974581,.975242,.975895,.976539,.977175,.977802,.978420,.979031,.979633,.980228,.980815,.981394,.981966,.982530,.983087,.983637,.984179,.984715,.985244,.985766,.986282,.986791,.987294,.987787,.988272,.988747,.989214,.989672,.990122,.990564,.990997,.991423,.991841,.992252,.992655,.993051,.993440,.993821,.994196,.994565,.994926,.995282,.995631,.995967,.996291,.996603,.996903,.997193,.997472,.997741,.998001,.998251,.998491,.998716,.998926,.999121,.999304,.999465,.999607,.999732,.999843,.999930,1.00000,.202206,.302482,.368786,.418107,.457242,.489587,.517084,.540948,.561986,.580766,.597699,.613093,.627188,.640168,.652184,.663357,.673787,.683557,.692736,.701386,.709578,.717353,.724750,.731799,.738528,.744963,.751124,.757033,.762706,.768159,.773408,.778464,.783339,.788045,.792591,.796986,.801238,.805356,.809346,.813214,.816968,.820614,.824157,.827601,.830951,.834212,.837386,.840479,.843492,.846430,.849295,.852091,.854820,.857484,.860087,.862629,.865114,.867544,.869920,.872244,.874519,.876747,.878929,.881067,.883161,.885214,.887227,.889201,.891136,.893035,.894899,.896727,.898522,.900284,.902015,.903714,.905384,.907024,.908635,.910219,.911777,.913308,.914815,.916297,.917756,.919191,.920604,.921994,.923363,.924710,.926037,.927344,.928631,.929899,.931148,.932379,.933592,.934787,.935965,.937126,.938271,.939400,.940513,.941612,.942695,.943764,.944819,.945859,.946886,.947900,.948900,.949887,.950862,.951824,.952773,.953711,.954637,.955552,.956455,.957347,.958228,.959098,.959957,.960806,.961645,.962474,.963292,.964101,.964901,.965690,.966471,.967243,.968005,.968759,.969504,.970240,.970968,.971688,.972400,.973103,.973799,.974485,.975164,.975834,.976497,.977151,.977798,.978437,.979069,.979693,.980310,.980920,.981523,.982118,.982707,.983290,.983865,.984434,.984997,.985553,.986100,.986638,.987167,.987687,.988198,.988701,.989195,.989681,.990159,.990630,.991092,.991547,.991995,.992435,.992868,.993294,.993713,.994126,.994531,.994930,.995316,.995688,.996048,.996395,.996731,.997055,.997369,.997671,.997964,.998247,.998511,.998759,.998990,.999207,.999397,.999564,.999710,.999839,.999932,1.00000,.200990,.300676,.366599,.415643,.454562,.486734,.514087,.537829,.558763,.577452,.594305,.609630,.623662,.636586,.648552,.659680,.670068,.679801,.688947,.697566,.705731,.713483,.720858,.727888,.734600,.741020,.747169,.753067,.758731,.764177,.769419,.774470,.779341,.784044,.788589,.792983,.797236,.801354,.805346,.809217,.812975,.816625,.820173,.823623,.826980,.830248,.833430,.836530,.839553,.842500,.845375,.848181,.850921,.853596,.856210,.858764,.861262,.863704,.866093,.868430,.870719,.872961,.875157,.877310,.879420,.881489,.883517,.885507,.887460,.889376,.891256,.893103,.894915,.896696,.898444,.900162,.901850,.903510,.905140,.906744,.908321,.909872,.911399,.912902,.914381,.915838,.917272,.918683,.920074,.921444,.922793,.924122,.925432,.926723,.927995,.929249,.930485,.931703,.932905,.934089,.935258,.936411,.937549,.938672,.939781,.940875,.941955,.943021,.944073,.945112,.946139,.947152,.948153,.949141,.950118,.951083,.952036,.952977,.953907,.954827,.955735,.956633,.957520,.958397,.959264,.960121,.960968,.961806,.962634,.963453,.964263,.965064,.965856,.966639,.967414,.968181,.968939,.969689,.970431,.971165,.971890,.972608,.973318,.974019,.974713,.975399,.976078,.976749,.977413,.978070,.978719,.979362,.979997,.980626,.981248,.981864,.982473,.983076,.983672,.984262,.984843,.985415,.985979,.986534,.987080,.987619,.988149,.988671,.989185,.989692,.990191,.990683,.991167,.991644,.992114,.992577,.993034,.993483,.993926,.994363,.994785,.995195,.995591,.995975,.996348,.996708,.997057,.997395,.997723,.998040,.998338,.998617,.998880,.999126,.999340,.999528,.999692,.999835,.999933,1.00000,.199932,.299112,.364714,.413529,.452274,.484308,.511550,.535200,.556057,.574681,.591479,.606756,.620748,.633638,.645574,.656676,.667043,.676758,.685888,.694495,.702649,.710392,.717761,.724786,.731496,.737914,.744063,.749961,.755627,.761076,.766322,.771378,.776255,.780965,.785516,.789918,.794179,.798307,.802308,.806189,.809958,.813618,.817177,.820637,.824005,.827283,.830476,.833588,.836621,.839580,.842466,.845283,.848034,.850721,.853346,.855912,.858420,.860874,.863274,.865623,.867924,.870178,.872386,.874550,.876672,.878753,.880794,.882797,.884761,.886690,.888583,.890442,.892267,.894060,.895821,.897552,.899253,.900925,.902569,.904185,.905775,.907340,.908880,.910397,.911890,.913360,.914808,.916234,.917638,.919022,.920386,.921730,.923054,.924360,.925647,.926916,.928167,.929400,.930617,.931817,.933001,.934170,.935324,.936464,.937588,.938699,.939796,.940879,.941948,.943005,.944049,.945080,.946098,.947105,.948099,.949082,.950054,.951014,.951962,.952900,.953828,.954745,.955652,.956549,.957436,.958313,.959181,.960039,.960888,.961728,.962560,.963382,.964196,.965001,.965798,.966587,.967367,.968140,.968904,.969661,.970410,.971151,.971884,.972608,.973326,.974035,.974737,.975432,.976120,.976800,.977473,.978139,.978799,.979452,.980098,.980737,.981370,.981997,.982617,.983232,.983837,.984434,.985022,.985602,.986174,.986738,.987294,.987842,.988383,.988916,.989442,.989960,.990472,.990976,.991473,.991964,.992447,.992925,.993395,.993860,.994311,.994749,.995175,.995589,.995991,.996382,.996762,.997132,.997491,.997840,.998168,.998478,.998770,.999045,.999284,.999492,.999674,.999831,.999934,1.00000,.199215,.298053,.363436,.412094,.450719,.482659,.509824,.533409,.554212,.572791,.589549,.604793,.618755,.631619,.643533,.654617,.664967,.674667,.683786,.692382,.700526,.708261,.715622,.722641,.729344,.735757,.741900,.747795,.753456,.758902,.764145,.769198,.774073,.778781,.783331,.787731,.791992,.796119,.800119,.804000,.807769,.811430,.814990,.818452,.821822,.825103,.828299,.831413,.834450,.837413,.840303,.843125,.845880,.848572,.851203,.853774,.856288,.858748,.861154,.863510,.865817,.868077,.870292,.872464,.874593,.876682,.878731,.880741,.882713,.884650,.886551,.888418,.890252,.892054,.893824,.895564,.897274,.898955,.900608,.902233,.903833,.905407,.906958,.908484,.909987,.911467,.912925,.914361,.915777,.917171,.918546,.919900,.921236,.922552,.923850,.925130,.926393,.927638,.928866,.930077,.931273,.932454,.933620,.934771,.935908,.937030,.938139,.939235,.940317,.941386,.942443,.943487,.944518,.945538,.946546,.947542,.948526,.949500,.950462,.951413,.952354,.953285,.954206,.955117,.956019,.956910,.957793,.958666,.959530,.960385,.961231,.962069,.962898,.963719,.964531,.965336,.966132,.966920,.967701,.968474,.969239,.969996,.970746,.971488,.972222,.972949,.973668,.974381,.975086,.975784,.976475,.977160,.977838,.978509,.979174,.979832,.980484,.981130,.981769,.982403,.983028,.983645,.984253,.984854,.985446,.986031,.986608,.987177,.987739,.988294,.988841,.989381,.989915,.990441,.990961,.991473,.991980,.992480,.992973,.993460,.993935,.994396,.994846,.995283,.995709,.996124,.996528,.996921,.997304,.997677,.998029,.998362,.998677,.998974,.999233,.999459,.999656,.999828,.999934,1.00000,.198291,.296678,.361768,.410212,.448671,.480475,.507527,.531017,.551737,.570242,.586937,.602123,.616034,.628852,.640725,.651770,.662086,.671754,.680844,.689413,.697533,.705247,.712588,.719589,.726276,.732675,.738806,.744689,.750341,.755777,.761013,.766059,.770929,.775631,.780177,.784575,.788833,.792958,.796958,.800838,.804607,.808269,.811831,.815295,.818668,.821952,.825152,.828271,.831312,.834280,.837176,.840004,.842766,.845464,.848102,.850681,.853203,.855670,.858085,.860449,.862765,.865035,.867260,.869441,.871580,.873679,.875738,.877759,.879743,.881691,.883603,.885482,.887328,.889141,.890923,.892675,.894398,.896091,.897757,.899395,.901008,.902595,.904159,.905698,.907215,.908709,.910181,.911631,.913060,.914469,.915858,.917227,.918577,.919908,.921221,.922515,.923793,.925052,.926296,.927522,.928733,.929930,.931111,.932278,.933431,.934570,.935695,.936807,.937906,.938992,.940066,.941127,.942175,.943212,.944237,.945251,.946253,.947244,.948225,.949194,.950154,.951103,.952043,.952973,.953894,.954805,.955707,.956601,.957485,.958361,.959228,.960087,.960937,.961779,.962613,.963439,.964258,.965068,.965872,.966667,.967455,.968236,.969009,.969775,.970533,.971285,.972029,.972767,.973498,.974222,.974939,.975650,.976355,.977053,.977745,.978431,.979110,.979784,.980452,.981114,.981768,.982414,.983052,.983683,.984306,.984921,.985529,.986130,.986724,.987311,.987891,.988464,.989031,.989591,.990144,.990691,.991231,.991766,.992294,.992816,.993326,.993823,.994309,.994783,.995246,.995697,.996138,.996569,.996990,.997400,.997790,.998161,.998513,.998847,.999141,.999398,.999623,.999821,.999935,1.00000,.197587,.295637,.360512,.408802,.447144,.478855,.505831,.529258,.549925,.568385,.585041,.600194,.614077,.626870,.638721,.649748,.660048,.669702,.678780,.687339,.695450,.703155,.710489,.717483,.724165,.730558,.736684,.742563,.748211,.753644,.758877,.763921,.768788,.773489,.778033,.782430,.786687,.790811,.794811,.798691,.802460,.806123,.809685,.813151,.816525,.819812,.823014,.826136,.829180,.832151,.835051,.837882,.840648,.843351,.845993,.848576,.851103,.853576,.855996,.858365,.860686,.862962,.865192,.867379,.869525,.871630,.873695,.875723,.877713,.879668,.881587,.883473,.885326,.887146,.888936,.890695,.892425,.894126,.895799,.897445,.899066,.900661,.902233,.903781,.905305,.906808,.908288,.909747,.911185,.912603,.914001,.915379,.916738,.918078,.919400,.920704,.921991,.923261,.924513,.925750,.926971,.928177,.929368,.930545,.931709,.932858,.933994,.935116,.936226,.937323,.938407,.939479,.940539,.941587,.942623,.943648,.944662,.945664,.946656,.947637,.948608,.949570,.950522,.951464,.952397,.953321,.954236,.955142,.956040,.956929,.957809,.958681,.959545,.960401,.961249,.962089,.962921,.963746,.964564,.965374,.966176,.966972,.967760,.968541,.969316,.970083,.970844,.971598,.972345,.973086,.973821,.974549,.975272,.975988,.976697,.977401,.978100,.978792,.979478,.980159,.980833,.981498,.982157,.982808,.983452,.984089,.984719,.985342,.985958,.986568,.987171,.987767,.988357,.988941,.989519,.990090,.990655,.991215,.991768,.992316,.992851,.993375,.993888,.994389,.994880,.995359,.995829,.996288,.996737,.997177,.997596,.997996,.998378,.998742,.999063,.999346,.999595,.999816,.999935,1.00000][]
	# Z=36
	      Z36=[.154885,.232574,.284533,.323627,.355002,.381231,.403786,.423584,.441238,.457178,.471715,.485083,.497463,.508995,.519792,.529947,.539535,.548620,.557254,.565482,.573342,.580866,.588084,.595022,.601701,.608142,.614363,.620379,.626205,.631853,.637335,.642661,.647841,.652883,.657795,.662585,.667259,.671823,.676284,.680645,.684911,.689087,.693176,.697182,.701110,.704962,.708742,.712453,.716097,.719679,.723199,.726660,.730065,.733415,.736713,.739961,.743160,.746312,.749419,.752482,.755501,.758479,.761416,.764315,.767175,.769998,.772786,.775539,.778259,.780946,.783601,.786226,.788820,.791386,.793923,.796433,.798915,.801372,.803803,.806210,.808591,.810949,.813282,.815593,.817882,.820148,.822393,.824618,.826821,.829005,.831170,.833315,.835442,.837550,.839640,.841713,.843769,.845808,.847831,.849838,.851828,.853803,.855762,.857706,.859635,.861549,.863449,.865335,.867207,.869066,.870911,.872743,.874562,.876369,.878163,.879945,.881715,.883473,.885220,.886955,.888680,.890393,.892095,.893786,.895467,.897137,.898798,.900448,.902088,.903718,.905339,.906951,.908553,.910146,.911730,.913305,.914872,.916430,.917979,.919520,.921053,.922577,.924094,.925602,.927103,.928596,.930081,.931559,.933029,.934492,.935948,.937397,.938839,.940273,.941701,.943123,.944537,.945945,.947347,.948742,.950131,.951513,.952889,.954258,.955621,.956979,.958330,.959675,.961014,.962347,.963675,.964997,.966313,.967623,.968929,.970228,.971523,.972812,.974095,.975374,.976648,.977916,.979180,.980438,.981692,.982941,.984186,.985425,.986660,.987891,.989117,.990340,.991559,.992774,.993986,.995195,.996400,.997603,.998803,1.00000,.159491,.239418,.292825,.332971,.365162,.392048,.415147,.435404,.453452,.469732,.484565,.498194,.510803,.522538,.533516,.543831,.553561,.562772,.571518,.579846,.587794,.595396,.602683,.609682,.616414,.622901,.629160,.635209,.641061,.646730,.652228,.657565,.662751,.667795,.672705,.677489,.682153,.686704,.691148,.695490,.699733,.703883,.707944,.711921,.715815,.719633,.723376,.727048,.730651,.734189,.737664,.741079,.744435,.747735,.750981,.754175,.757319,.760415,.763463,.766466,.769425,.772341,.775215,.778049,.780843,.783600,.786320,.789004,.791654,.794270,.796853,.799404,.801925,.804416,.806877,.809310,.811715,.814093,.816444,.818771,.821071,.823346,.825597,.827825,.830029,.832210,.834369,.836506,.838623,.840718,.842793,.844849,.846885,.848902,.850901,.852881,.854844,.856789,.858717,.860629,.862524,.864402,.866264,.868111,.869942,.871757,.873558,.875345,.877117,.878875,.880619,.882349,.884067,.885771,.887462,.889141,.890807,.892461,.894103,.895733,.897352,.898959,.900555,.902140,.903714,.905277,.906830,.908372,.909905,.911427,.912939,.914442,.915935,.917418,.918893,.920358,.921814,.923261,.924699,.926129,.927551,.928964,.930369,.931765,.933154,.934535,.935908,.937274,.938632,.939983,.941326,.942662,.943991,.945313,.946628,.947936,.949237,.950532,.951820,.953101,.954377,.955646,.956909,.958167,.959418,.960664,.961904,.963139,.964368,.965591,.966809,.968022,.969230,.970432,.971629,.972821,.974008,.975190,.976367,.977539,.978706,.979869,.981027,.982179,.983328,.984471,.985611,.986745,.987875,.989001,.990121,.991237,.992348,.993453,.994555,.995652,.996745,.997833,.998918,1.00000,.164060,.246273,.301203,.342492,.375597,.403245,.426996,.447825,.466380,.483117,.498367,.512376,.525337,.537398,.548681,.559281,.569281,.578746,.587732,.596289,.604448,.612247,.619717,.626884,.633775,.640408,.646805,.652981,.658952,.664732,.670333,.675765,.681040,.686167,.691154,.696008,.700738,.705349,.709848,.714240,.718528,.722715,.726808,.730810,.734726,.738558,.742311,.745988,.749592,.753126,.756592,.759994,.763333,.766613,.769835,.773001,.776113,.779174,.782184,.785146,.788059,.790926,.793749,.796527,.799263,.801959,.804614,.807231,.809810,.812353,.814861,.817334,.819774,.822181,.824556,.826901,.829215,.831501,.833757,.835986,.838188,.840363,.842512,.844635,.846734,.848808,.850859,.852887,.854892,.856875,.858837,.860777,.862696,.864596,.866475,.868335,.870176,.871999,.873803,.875589,.877358,.879110,.880845,.882563,.884265,.885951,.887622,.889277,.890917,.892542,.894153,.895750,.897333,.898902,.900457,.901999,.903528,.905045,.906548,.908040,.909519,.910986,.912442,.913886,.915319,.916741,.918152,.919552,.920941,.922321,.923689,.925048,.926397,.927736,.929065,.930384,.931695,.932996,.934288,.935570,.936844,.938110,.939367,.940615,.941855,.943087,.944311,.945527,.946735,.947935,.949127,.950312,.951490,.952660,.953823,.954978,.956127,.957268,.958403,.959531,.960652,.961767,.962875,.963977,.965073,.966162,.967245,.968323,.969394,.970459,.971519,.972573,.973621,.974663,.975700,.976731,.977757,.978778,.979793,.980803,.981808,.982807,.983802,.984792,.985777,.986758,.987733,.988704,.989670,.990632,.991589,.992542,.993489,.994433,.995372,.996307,.997237,.998163,.999084,1.00000,.168147,.252367,.308612,.350870,.384735,.413005,.437279,.458556,.477502,.494584,.510139,.524423,.537632,.549918,.561405,.572194,.582365,.591988,.601121,.609812,.618094,.626005,.633576,.640836,.647809,.654519,.660984,.667222,.673248,.679077,.684721,.690192,.695500,.700656,.705667,.710542,.715288,.719912,.724419,.728817,.733106,.737292,.741378,.745371,.749273,.753089,.756822,.760477,.764055,.767561,.770997,.774365,.777669,.780910,.784091,.787215,.790282,.793295,.796257,.799168,.802028,.804841,.807607,.810327,.813003,.815637,.818229,.820781,.823294,.825769,.828208,.830610,.832978,.835312,.837613,.839882,.842119,.844327,.846504,.848653,.850773,.852866,.854932,.856971,.858985,.860974,.862939,.864880,.866797,.868692,.870564,.872414,.874243,.876051,.877839,.879607,.881355,.883083,.884793,.886485,.888158,.889814,.891453,.893075,.894680,.896269,.897842,.899399,.900941,.902467,.903979,.905477,.906960,.908429,.909884,.911325,.912754,.914169,.915571,.916960,.918338,.919703,.921056,.922397,.923727,.925045,.926353,.927649,.928934,.930209,.931473,.932727,.933971,.935204,.936428,.937642,.938846,.940041,.941227,.942403,.943570,.944728,.945878,.947018,.948151,.949274,.950390,.951497,.952596,.953686,.954769,.955845,.956912,.957972,.959024,.960069,.961107,.962137,.963160,.964177,.965186,.966188,.967184,.968173,.969156,.970132,.971102,.972065,.973023,.973974,.974919,.975858,.976791,.977718,.978639,.979555,.980465,.981369,.982267,.983161,.984049,.984931,.985809,.986682,.987549,.988412,.989270,.990123,.990971,.991815,.992653,.993487,.994317,.995142,.995963,.996779,.997591,.998398,.999201,1.00000,.173552,.260404,.318356,.361858,.396691,.425743,.450668,.472495,.491915,.509408,.525324,.539927,.553419,.565958,.577671,.588662,.599015,.608802,.618082,.626905,.635302,.643309,.650962,.658290,.665318,.672070,.678567,.684826,.690864,.696696,.702335,.707793,.713081,.718209,.723186,.728021,.732721,.737293,.741744,.746080,.750305,.754422,.758437,.762356,.766181,.769918,.773569,.777139,.780631,.784048,.787393,.790669,.793878,.797023,.800106,.803129,.806095,.809005,.811862,.814666,.817421,.820126,.822784,.825396,.827964,.830489,.832972,.835414,.837817,.840182,.842509,.844801,.847057,.849279,.851468,.853625,.855750,.857844,.859909,.861944,.863951,.865930,.867883,.869810,.871711,.873587,.875438,.877266,.879070,.880852,.882611,.884349,.886065,.887761,.889436,.891091,.892726,.894342,.895940,.897519,.899080,.900624,.902150,.903660,.905153,.906630,.908091,.909536,.910966,.912381,.913782,.915167,.916539,.917897,.919240,.920571,.921888,.923192,.924483,.925761,.927028,.928282,.929524,.930754,.931973,.933180,.934377,.935562,.936736,.937900,.939053,.940196,.941329,.942451,.943564,.944667,.945761,.946845,.947919,.948985,.950041,.951089,.952128,.953158,.954179,.955193,.956198,.957194,.958183,.959164,.960137,.961102,.962059,.963009,.963951,.964887,.965814,.966735,.967649,.968555,.969455,.970348,.971235,.972115,.972988,.973855,.974716,.975570,.976418,.977260,.978096,.978926,.979750,.980569,.981381,.982188,.982990,.983785,.984576,.985360,.986140,.986914,.987682,.988446,.989204,.989957,.990705,.991448,.992186,.992920,.993648,.994372,.995090,.995805,.996514,.997220,.997921,.998618,.999311,1.00000,.184415,.276438,.337663,.383490,.420078,.450507,.476536,.499266,.519430,.537541,.553973,.569005,.582853,.595686,.607640,.618824,.629329,.639230,.648592,.657468,.665896,.673917,.681568,.688878,.695875,.702583,.709024,.715217,.721179,.726925,.732469,.737825,.743003,.748014,.752868,.757573,.762137,.766568,.770873,.775058,.779127,.783085,.786937,.790689,.794345,.797908,.801384,.804775,.808085,.811318,.814476,.817563,.820581,.823532,.826420,.829247,.832014,.834723,.837378,.839979,.842529,.845029,.847480,.849885,.852245,.854560,.856834,.859066,.861258,.863411,.865526,.867605,.869648,.871657,.873632,.875574,.877484,.879364,.881213,.883032,.884824,.886589,.888327,.890040,.891727,.893391,.895030,.896645,.898238,.899809,.901358,.902885,.904392,.905878,.907345,.908791,.910219,.911628,.913019,.914391,.915747,.917086,.918409,.919717,.921008,.922284,.923545,.924792,.926024,.927241,.928445,.929636,.930812,.931976,.933127,.934265,.935390,.936503,.937604,.938694,.939772,.940838,.941894,.942939,.943973,.944997,.946010,.947014,.948007,.948990,.949964,.950929,.951883,.952829,.953766,.954693,.955612,.956523,.957424,.958317,.959202,.960079,.960948,.961808,.962661,.963506,.964344,.965174,.965997,.966812,.967620,.968421,.969215,.970002,.970782,.971556,.972322,.973083,.973837,.974584,.975325,.976060,.976789,.977511,.978228,.978938,.979643,.980341,.981034,.981722,.982404,.983080,.983750,.984416,.985076,.985730,.986380,.987024,.987664,.988298,.988927,.989551,.990171,.990785,.991395,.992000,.992600,.993195,.993786,.994373,.994955,.995532,.996105,.996674,.997238,.997798,.998354,.998907,.999455,1.00000,.195295,.292433,.356854,.404918,.443168,.474877,.501915,.525449,.546259,.564891,.581741,.597105,.611214,.624247,.636348,.647633,.658198,.668125,.677481,.686322,.694698,.702653,.710222,.717438,.724330,.730922,.737238,.743296,.749115,.754711,.760099,.765291,.770300,.775136,.779810,.784330,.788706,.792944,.797052,.801037,.804905,.808662,.812314,.815865,.819319,.822682,.825957,.829147,.832257,.835289,.838247,.841134,.843952,.846704,.849393,.852020,.854589,.857100,.859557,.861960,.864314,.866618,.868874,.871086,.873252,.875376,.877458,.879500,.881503,.883467,.885395,.887287,.889145,.890968,.892759,.894518,.896245,.897943,.899611,.901250,.902862,.904448,.906007,.907542,.909051,.910536,.911998,.913437,.914854,.916248,.917622,.918974,.920306,.921618,.922911,.924184,.925439,.926676,.927894,.929096,.930280,.931449,.932601,.933738,.934859,.935965,.937057,.938134,.939197,.940246,.941282,.942304,.943313,.944309,.945292,.946264,.947223,.948170,.949105,.950029,.950942,.951844,.952735,.953617,.954488,.955349,.956200,.957042,.957874,.958696,.959510,.960314,.961110,.961897,.962675,.963445,.964206,.964959,.965704,.966441,.967171,.967893,.968608,.969315,.970016,.970710,.971397,.972077,.972750,.973417,.974077,.974731,.975379,.976021,.976656,.977285,.977909,.978526,.979138,.979744,.980345,.980939,.981528,.982112,.982690,.983263,.983831,.984393,.984951,.985503,.986050,.986592,.987130,.987662,.988190,.988713,.989231,.989745,.990255,.990759,.991260,.991756,.992248,.992735,.993218,.993697,.994172,.994643,.995109,.995572,.996031,.996487,.996939,.997387,.997832,.998273,.998711,.999145,.999575,1.00000,.205227,.307060,.374432,.424577,.464388,.497311,.525316,.549635,.571086,.590246,.607532,.623256,.637661,.650935,.663229,.674668,.685352,.695365,.704780,.713655,.722046,.729996,.737544,.744723,.751565,.758095,.764336,.770310,.776036,.781529,.786806,.791881,.796765,.801470,.806007,.810386,.814614,.818701,.822653,.826479,.830184,.833776,.837260,.840641,.843923,.847111,.850209,.853222,.856152,.859003,.861779,.864482,.867116,.869682,.872184,.874624,.877005,.879328,.881595,.883809,.885973,.888087,.890154,.892175,.894152,.896087,.897979,.899832,.901646,.903422,.905162,.906866,.908535,.910171,.911775,.913347,.914889,.916400,.917883,.919337,.920765,.922167,.923544,.924895,.926223,.927528,.928809,.930069,.931307,.932523,.933719,.934895,.936051,.937187,.938305,.939405,.940487,.941551,.942598,.943628,.944642,.945641,.946624,.947593,.948546,.949486,.950411,.951323,.952221,.953106,.953978,.954837,.955684,.956518,.957341,.958152,.958952,.959740,.960517,.961284,.962040,.962785,.963521,.964246,.964962,.965669,.966365,.967053,.967732,.968402,.969063,.969715,.970359,.970995,.971623,.972242,.972854,.973458,.974054,.974643,.975225,.975799,.976367,.976927,.977481,.978029,.978570,.979104,.979632,.980154,.980670,.981179,.981683,.982181,.982673,.983159,.983640,.984115,.984585,.985050,.985509,.985963,.986412,.986855,.987294,.987728,.988157,.988581,.989001,.989416,.989826,.990231,.990633,.991030,.991422,.991810,.992195,.992574,.992950,.993322,.993690,.994054,.994414,.994770,.995122,.995471,.995816,.996158,.996495,.996830,.997161,.997489,.997813,.998135,.998453,.998768,.999080,.999389,.999696,1.00000,.217542,.325104,.396015,.448608,.490215,.524502,.553564,.578711,.600816,.620489,.638175,.654206,.668841,.682279,.694681,.706180,.716882,.726877,.736240,.745037,.753331,.761168,.768589,.775629,.782320,.788689,.794760,.800556,.806095,.811396,.816475,.821345,.826021,.830513,.834833,.838991,.842996,.846856,.850579,.854173,.857648,.861008,.864260,.867409,.870460,.873417,.876284,.879066,.881767,.884389,.886936,.889411,.891817,.894157,.896433,.898649,.900805,.902905,.904950,.906943,.908886,.910781,.912631,.914436,.916198,.917919,.919599,.921241,.922845,.924412,.925944,.927443,.928907,.930340,.931742,.933113,.934455,.935768,.937054,.938313,.939546,.940754,.941937,.943097,.944233,.945347,.946440,.947510,.948560,.949590,.950600,.951591,.952563,.953517,.954453,.955371,.956273,.957158,.958027,.958880,.959717,.960540,.961347,.962141,.962920,.963686,.964438,.965177,.965903,.966616,.967318,.968007,.968685,.969351,.970006,.970649,.971282,.971905,.972517,.973119,.973711,.974293,.974865,.975427,.975980,.976525,.977060,.977586,.978103,.978613,.979114,.979606,.980091,.980568,.981038,.981500,.981954,.982401,.982842,.983275,.983701,.984121,.984533,.984939,.985339,.985733,.986120,.986501,.986876,.987245,.987608,.987966,.988318,.988665,.989006,.989342,.989673,.989999,.990320,.990636,.990947,.991253,.991554,.991851,.992143,.992431,.992714,.992992,.993267,.993537,.993803,.994064,.994322,.994576,.994826,.995073,.995315,.995554,.995789,.996021,.996249,.996474,.996695,.996913,.997128,.997340,.997548,.997754,.997956,.998155,.998352,.998545,.998736,.998924,.999110,.999293,.999474,.999652,.999827,1.00000,.221596,.331036,.403102,.456489,.498675,.533400,.562799,.588208,.610517,.630349,.648157,.664281,.678983,.692467,.704897,.716409,.727110,.737093,.746434,.755200,.763458,.771255,.778632,.785625,.792266,.798582,.804598,.810337,.815817,.821058,.826074,.830881,.835492,.839919,.844173,.848263,.852200,.855992,.859647,.863171,.866576,.869867,.873050,.876130,.879112,.882001,.884800,.887514,.890146,.892701,.895181,.897589,.899928,.902202,.904412,.906562,.908653,.910688,.912668,.914597,.916476,.918307,.920093,.921835,.923533,.925191,.926808,.928387,.929928,.931433,.932903,.934339,.935743,.937114,.938455,.939765,.941047,.942300,.943526,.944725,.945898,.947047,.948170,.949271,.950348,.951403,.952436,.953447,.954438,.955409,.956361,.957293,.958206,.959102,.959980,.960841,.961684,.962512,.963323,.964119,.964900,.965665,.966416,.967152,.967875,.968584,.969279,.969961,.970631,.971288,.971933,.972566,.973188,.973798,.974397,.974985,.975563,.976130,.976687,.977235,.977772,.978299,.978816,.979324,.979823,.980313,.980794,.981266,.981730,.982185,.982633,.983072,.983504,.983927,.984344,.984753,.985155,.985550,.985938,.986319,.986694,.987061,.987422,.987777,.988125,.988466,.988802,.989131,.989455,.989773,.990085,.990392,.990693,.990989,.991280,.991565,.991846,.992122,.992392,.992659,.992920,.993176,.993427,.993673,.993915,.994152,.994385,.994613,.994837,.995057,.995272,.995484,.995692,.995895,.996095,.996292,.996484,.996673,.996859,.997041,.997219,.997394,.997565,.997733,.997897,.998058,.998216,.998370,.998522,.998670,.998815,.998958,.999097,.999234,.999368,.999500,.999628,.999755,.999879,1.00000,.220570,.329525,.401285,.454456,.496480,.531077,.560373,.585699,.607939,.627713,.645473,.661557,.676224,.689679,.702086,.713577,.724262,.734231,.743561,.752318,.760572,.768370,.775751,.782752,.789403,.795732,.801764,.807520,.813021,.818283,.823323,.828154,.832791,.837246,.841528,.845648,.849615,.853438,.857125,.860682,.864120,.867444,.870661,.873775,.876790,.879713,.882546,.885295,.887961,.890550,.893064,.895507,.897881,.900189,.902434,.904617,.906743,.908812,.910827,.912789,.914702,.916568,.918387,.920161,.921893,.923583,.925233,.926844,.928418,.929955,.931457,.932925,.934359,.935762,.937133,.938474,.939786,.941070,.942325,.943554,.944757,.945935,.947088,.948217,.949323,.950406,.951467,.952506,.953525,.954523,.955502,.956461,.957401,.958324,.959228,.960114,.960984,.961837,.962674,.963495,.964301,.965091,.965866,.966626,.967372,.968105,.968823,.969528,.970221,.970900,.971567,.972222,.972866,.973497,.974117,.974726,.975325,.975912,.976490,.977057,.977613,.978159,.978696,.979222,.979738,.980246,.980744,.981233,.981713,.982184,.982647,.983102,.983548,.983987,.984418,.984841,.985257,.985665,.986066,.986461,.986847,.987227,.987599,.987965,.988323,.988675,.989020,.989359,.989692,.990018,.990338,.990653,.990961,.991265,.991562,.991854,.992141,.992422,.992699,.992970,.993236,.993496,.993750,.993999,.994242,.994480,.994714,.994942,.995165,.995384,.995598,.995807,.996012,.996213,.996409,.996601,.996790,.996974,.997154,.997331,.997503,.997670,.997833,.997992,.998146,.998297,.998443,.998585,.998724,.998859,.998990,.999117,.999240,.999359,.999475,.999587,.999695,.999800,.999902,1.00000,.218508,.326490,.397639,.450380,.492082,.526428,.555525,.580689,.602796,.622461,.640129,.656137,.670742,.684145,.696509,.707966,.718623,.728570,.737885,.746630,.754879,.762678,.770065,.777077,.783743,.790091,.796145,.801927,.807456,.812749,.817821,.822688,.827363,.831856,.836178,.840340,.844351,.848219,.851951,.855554,.859039,.862411,.865676,.868839,.871904,.874876,.877759,.880557,.883274,.885914,.888479,.890972,.893397,.895756,.898052,.900287,.902463,.904584,.906649,.908663,.910627,.912543,.914413,.916238,.918019,.919759,.921459,.923120,.924742,.926328,.927879,.929395,.930878,.932328,.933747,.935135,.936494,.937825,.939127,.940402,.941651,.942874,.944073,.945247,.946397,.947525,.948630,.949714,.950776,.951818,.952839,.953841,.954824,.955788,.956734,.957662,.958573,.959467,.960345,.961207,.962052,.962882,.963697,.964496,.965282,.966052,.966810,.967553,.968283,.969001,.969705,.970398,.971078,.971746,.972402,.973048,.973682,.974305,.974918,.975520,.976111,.976692,.977263,.977823,.978374,.978915,.979446,.979969,.980482,.980986,.981481,.981968,.982447,.982918,.983380,.983835,.984281,.984721,.985153,.985577,.985994,.986403,.986805,.987199,.987586,.987965,.988338,.988704,.989063,.989416,.989763,.990103,.990437,.990765,.991087,.991403,.991714,.992019,.992319,.992613,.992901,.993182,.993457,.993726,.993989,.994246,.994497,.994743,.994983,.995218,.995448,.995672,.995892,.996107,.996317,.996523,.996724,.996920,.997113,.997301,.997483,.997660,.997832,.997998,.998159,.998315,.998467,.998614,.998756,.998894,.999027,.999155,.999277,.999395,.999507,.999615,.999718,.999816,.999910,1.00000,.215845,.322607,.393018,.445258,.486601,.520683,.549583,.574598,.596595,.616180,.633793,.649765,.664349,.677746,.690116,.701588,.712270,.722249,.731602,.740391,.748687,.756535,.763974,.771039,.777761,.784166,.790278,.796119,.801709,.807063,.812198,.817128,.821866,.826423,.830810,.835037,.839113,.843046,.846844,.850513,.854063,.857498,.860825,.864049,.867174,.870206,.873147,.876003,.878777,.881472,.884092,.886640,.889118,.891530,.893877,.896164,.898390,.900560,.902675,.904737,.906749,.908712,.910629,.912500,.914327,.916112,.917856,.919560,.921226,.922855,.924448,.926006,.927530,.929022,.930481,.931910,.933308,.934678,.936019,.937332,.938619,.939881,.941117,.942329,.943517,.944683,.945825,.946946,.948046,.949125,.950183,.951222,.952242,.953242,.954225,.955189,.956136,.957066,.957979,.958876,.959757,.960623,.961473,.962308,.963129,.963935,.964727,.965506,.966271,.967023,.967763,.968490,.969205,.969908,.970599,.971278,.971947,.972604,.973251,.973887,.974512,.975126,.975730,.976324,.976908,.977481,.978045,.978600,.979145,.979682,.980209,.980728,.981238,.981739,.982233,.982718,.983196,.983665,.984128,.984582,.985029,.985467,.985898,.986321,.986736,.987144,.987544,.987938,.988324,.988704,.989077,.989443,.989803,.990156,.990504,.990845,.991181,.991510,.991834,.992152,.992463,.992767,.993064,.993355,.993638,.993916,.994187,.994451,.994710,.994963,.995211,.995453,.995689,.995920,.996146,.996367,.996583,.996794,.997001,.997203,.997398,.997587,.997770,.997946,.998117,.998282,.998442,.998596,.998745,.998890,.999028,.999160,.999286,.999406,.999520,.999627,.999728,.999824,.999914,1.00000,.214277,.320299,.390242,.442153,.483249,.517138,.545883,.570773,.592667,.612165,.629706,.645618,.660153,.673508,.685844,.697288,.707946,.717907,.727246,.736025,.744315,.752160,.759601,.766671,.773401,.779816,.785942,.791798,.797404,.802778,.807933,.812886,.817647,.822229,.826642,.830896,.834999,.838961,.842788,.846488,.850069,.853536,.856895,.860151,.863309,.866374,.869349,.872239,.875047,.877777,.880431,.883013,.885527,.887973,.890356,.892678,.894940,.897146,.899296,.901394,.903441,.905440,.907392,.909298,.911161,.912981,.914760,.916500,.918201,.919865,.921493,.923085,.924644,.926170,.927664,.929127,.930560,.931963,.933338,.934685,.936006,.937301,.938571,.939816,.941037,.942236,.943411,.944565,.945697,.946808,.947899,.948970,.950021,.951054,.952068,.953064,.954042,.955003,.955947,.956875,.957787,.958683,.959563,.960429,.961280,.962116,.962938,.963746,.964541,.965323,.966091,.966847,.967591,.968323,.969042,.969750,.970447,.971132,.971807,.972471,.973124,.973765,.974397,.975018,.975628,.976229,.976820,.977401,.977972,.978535,.979088,.979633,.980169,.980696,.981215,.981726,.982228,.982723,.983210,.983690,.984161,.984623,.985078,.985525,.985964,.986395,.986819,.987235,.987645,.988047,.988442,.988831,.989213,.989589,.989958,.990321,.990677,.991028,.991373,.991712,.992044,.992367,.992684,.992993,.993295,.993591,.993880,.994162,.994438,.994708,.994971,.995229,.995481,.995728,.995969,.996204,.996434,.996660,.996880,.997095,.997303,.997504,.997697,.997884,.998064,.998238,.998406,.998569,.998725,.998876,.999020,.999157,.999287,.999410,.999526,.999634,.999735,.999829,.999917,1.00000,.212922,.318304,.387846,.439473,.480357,.514081,.542694,.567477,.589283,.608709,.626190,.642052,.656545,.669867,.682174,.693596,.704236,.714183,.723512,.732284,.740570,.748415,.755859,.762934,.769670,.776095,.782232,.788101,.793722,.799111,.804284,.809254,.814035,.818637,.823071,.827347,.831474,.835459,.839311,.843036,.846641,.850134,.853520,.856802,.859987,.863079,.866082,.868999,.871835,.874593,.877276,.879886,.882428,.884904,.887315,.889666,.891957,.894192,.896371,.898498,.900575,.902602,.904583,.906519,.908411,.910260,.912069,.913837,.915568,.917261,.918917,.920539,.922127,.923681,.925204,.926695,.928157,.929589,.930992,.932367,.933716,.935039,.936337,.937610,.938860,.940085,.941289,.942470,.943629,.944768,.945886,.946983,.948062,.949121,.950162,.951184,.952189,.953177,.954147,.955101,.956039,.956961,.957867,.958758,.959634,.960496,.961343,.962177,.962997,.963803,.964597,.965378,.966146,.966902,.967646,.968378,.969099,.969809,.970507,.971195,.971871,.972537,.973192,.973836,.974470,.975094,.975708,.976312,.976906,.977491,.978068,.978635,.979193,.979743,.980284,.980816,.981341,.981858,.982366,.982868,.983360,.983844,.984320,.984787,.985247,.985699,.986144,.986581,.987010,.987433,.987848,.988256,.988658,.989053,.989442,.989824,.990200,.990569,.990933,.991291,.991641,.991982,.992316,.992643,.992962,.993274,.993579,.993878,.994169,.994454,.994733,.995006,.995272,.995533,.995788,.996037,.996281,.996520,.996753,.996981,.997201,.997413,.997617,.997814,.998004,.998187,.998363,.998533,.998697,.998856,.999005,.999147,.999282,.999409,.999527,.999637,.999738,.999832,.999919,1.00000,.210653,.314963,.383831,.434984,.475511,.508958,.537350,.561953,.583611,.602916,.620296,.636073,.650497,.663761,.676021,.687404,.698014,.707938,.717249,.726009,.734289,.742133,.749579,.756662,.763410,.769850,.776004,.781894,.787538,.792953,.798154,.803154,.807966,.812601,.817071,.821383,.825547,.829571,.833462,.837228,.840875,.844410,.847838,.851165,.854394,.857530,.860578,.863540,.866422,.869226,.871955,.874612,.877201,.879723,.882182,.884580,.886919,.889201,.891428,.893603,.895727,.897803,.899831,.901815,.903754,.905652,.907508,.909324,.911102,.912842,.914546,.916215,.917850,.919451,.921021,.922559,.924067,.925545,.926995,.928417,.929812,.931181,.932524,.933843,.935138,.936409,.937658,.938884,.940088,.941271,.942433,.943575,.944698,.945801,.946886,.947952,.949000,.950030,.951044,.952041,.953021,.953985,.954934,.955867,.956785,.957689,.958578,.959453,.960315,.961162,.961997,.962819,.963628,.964424,.965209,.965982,.966742,.967492,.968230,.968957,.969673,.970378,.971072,.971755,.972428,.973091,.973743,.974386,.975019,.975643,.976257,.976862,.977458,.978046,.978624,.979195,.979757,.980310,.980856,.981394,.981923,.982444,.982956,.983460,.983955,.984443,.984923,.985396,.985861,.986318,.986768,.987212,.987648,.988077,.988500,.988916,.989326,.989729,.990126,.990517,.990899,.991273,.991638,.991996,.992345,.992687,.993021,.993348,.993668,.993981,.994287,.994586,.994879,.995166,.995446,.995720,.995988,.996250,.996507,.996758,.997000,.997233,.997457,.997672,.997879,.998079,.998271,.998456,.998634,.998805,.998966,.999119,.999262,.999397,.999522,.999635,.999740,.999836,.999922,1.00000,.209018,.312550,.380927,.431729,.471992,.505230,.533453,.557918,.579461,.598669,.615967,.631676,.646040,.659254,.671472,.682819,.693398,.703297,.712586,.721329,.729597,.737433,.744874,.751956,.758706,.765150,.771312,.777211,.782867,.788295,.793511,.798528,.803359,.808014,.812504,.816839,.821027,.825075,.828992,.832783,.836458,.840020,.843477,.846832,.850090,.853256,.856333,.859327,.862239,.865074,.867835,.870524,.873144,.875699,.878191,.880621,.882993,.885308,.887568,.889776,.891934,.894043,.896106,.898123,.900096,.902027,.903917,.905767,.907579,.909353,.911091,.912794,.914463,.916098,.917702,.919274,.920816,.922328,.923812,.925267,.926696,.928099,.929476,.930828,.932156,.933461,.934743,.936002,.937240,.938456,.939652,.940827,.941982,.943118,.944236,.945334,.946415,.947478,.948524,.949553,.950566,.951562,.952543,.953508,.954458,.955394,.956315,.957222,.958115,.958994,.959860,.960714,.961554,.962382,.963197,.964001,.964793,.965573,.966342,.967100,.967847,.968582,.969307,.970021,.970724,.971417,.972100,.972773,.973436,.974090,.974734,.975369,.975996,.976613,.977221,.977821,.978413,.978996,.979572,.980139,.980697,.981247,.981788,.982321,.982846,.983362,.983871,.984372,.984866,.985352,.985830,.986301,.986766,.987223,.987674,.988117,.988555,.988985,.989410,.989828,.990237,.990637,.991029,.991412,.991787,.992154,.992513,.992864,.993208,.993544,.993874,.994196,.994512,.994821,.995123,.995419,.995709,.995993,.996270,.996542,.996804,.997055,.997297,.997530,.997753,.997969,.998176,.998375,.998566,.998751,.998924,.999087,.999239,.999383,.999514,.999632,.999740,.999838,.999924,1.00000,.206613,.308993,.376633,.426909,.466768,.499686,.527649,.551897,.573257,.592308,.609473,.625065,.639330,.652456,.664598,.675878,.686400,.696248,.705494,.714199,.722434,.730244,.737666,.744731,.751469,.757906,.764063,.769961,.775619,.781052,.786276,.791302,.796145,.800814,.805320,.809672,.813879,.817948,.821887,.825702,.829401,.832989,.836473,.839857,.843145,.846342,.849452,.852478,.855425,.858294,.861090,.863816,.866473,.869066,.871595,.874065,.876476,.878830,.881131,.883380,.885579,.887730,.889835,.891895,.893911,.895886,.897820,.899715,.901571,.903391,.905174,.906923,.908638,.910320,.911970,.913589,.915178,.916737,.918268,.919771,.921247,.922698,.924124,.925525,.926902,.928255,.929586,.930895,.932182,.933448,.934694,.935919,.937125,.938311,.939479,.940628,.941759,.942873,.943969,.945049,.946112,.947160,.948192,.949208,.950210,.951197,.952169,.953127,.954072,.955003,.955921,.956826,.957718,.958597,.959465,.960320,.961164,.961996,.962816,.963626,.964424,.965211,.965988,.966753,.967508,.968253,.968987,.969712,.970427,.971132,.971828,.972514,.973192,.973860,.974520,.975171,.975814,.976448,.977074,.977692,.978301,.978902,.979494,.980077,.980652,.981220,.981779,.982330,.982874,.983410,.983938,.984459,.984974,.985481,.985981,.986474,.986960,.987440,.987914,.988381,.988838,.989287,.989728,.990159,.990583,.990998,.991405,.991804,.992196,.992580,.992956,.993326,.993688,.994044,.994392,.994735,.995070,.995399,.995722,.996039,.996344,.996638,.996920,.997192,.997453,.997704,.997946,.998179,.998403,.998619,.998820,.999008,.999183,.999346,.999492,.999622,.999738,.999841,.999928,1.00000,.204753,.306244,.373319,.423191,.462743,.495418,.523183,.547267,.568491,.587426,.604491,.619999,.634191,.647254,.659342,.670575,.681057,.690871,.700087,.708767,.716984,.724778,.732188,.739245,.745979,.752414,.758572,.764474,.770138,.775579,.780813,.785851,.790707,.795392,.799914,.804284,.808510,.812599,.816559,.820396,.824118,.827731,.831239,.834649,.837963,.841187,.844324,.847378,.850352,.853251,.856076,.858831,.861519,.864142,.866702,.869202,.871645,.874031,.876364,.878645,.880876,.883060,.885197,.887290,.889340,.891348,.893316,.895244,.897135,.898989,.900806,.902589,.904339,.906055,.907740,.909393,.911017,.912611,.914177,.915714,.917226,.918712,.920172,.921609,.923021,.924410,.925776,.927121,.928443,.929745,.931026,.932287,.933528,.934750,.935953,.937138,.938305,.939454,.940586,.941702,.942801,.943884,.944952,.946004,.947041,.948064,.949073,.950067,.951048,.952015,.952969,.953910,.954839,.955755,.956658,.957550,.958430,.959298,.960155,.961001,.961836,.962659,.963472,.964274,.965066,.965847,.966618,.967380,.968131,.968873,.969606,.970330,.971044,.971749,.972446,.973134,.973814,.974485,.975148,.975803,.976449,.977087,.977716,.978337,.978949,.979553,.980150,.980739,.981320,.981893,.982459,.983018,.983569,.984114,.984651,.985182,.985706,.986223,.986734,.987238,.987733,.988219,.988696,.989165,.989624,.990076,.990519,.990954,.991381,.991801,.992213,.992617,.993015,.993405,.993788,.994164,.994534,.994897,.995253,.995604,.995941,.996266,.996580,.996882,.997173,.997454,.997724,.997985,.998236,.998478,.998704,.998915,.999112,.999296,.999459,.999602,.999728,.999840,.999929,1.00000,.202436,.302822,.369196,.418567,.457739,.490114,.517636,.541520,.562576,.581370,.598315,.613721,.627824,.640813,.652836,.664015,.674449,.684223,.693407,.702060,.710254,.718033,.725431,.732482,.739212,.745648,.751811,.757720,.763394,.768847,.774096,.779152,.784027,.788732,.793278,.797672,.801924,.806041,.810030,.813897,.817650,.821295,.824837,.828281,.831630,.834890,.838063,.841155,.844168,.847105,.849970,.852765,.855493,.858156,.860758,.863300,.865784,.868213,.870589,.872912,.875187,.877414,.879596,.881733,.883828,.885880,.887893,.889866,.891802,.893701,.895564,.897393,.899187,.900950,.902680,.904380,.906049,.907689,.909301,.910885,.912443,.913975,.915482,.916965,.918424,.919860,.921273,.922664,.924033,.925382,.926710,.928017,.929305,.930574,.931825,.933056,.934270,.935466,.936646,.937808,.938954,.940084,.941199,.942299,.943384,.944454,.945511,.946553,.947581,.948596,.949598,.950587,.951564,.952528,.953479,.954419,.955347,.956263,.957168,.958062,.958945,.959817,.960679,.961530,.962371,.963201,.964022,.964833,.965635,.966427,.967210,.967983,.968748,.969504,.970251,.970990,.971720,.972442,.973156,.973862,.974557,.975240,.975913,.976574,.977226,.977867,.978498,.979119,.979730,.980332,.980924,.981507,.982081,.982646,.983203,.983751,.984290,.984821,.985345,.985860,.986368,.986870,.987366,.987855,.988338,.988815,.989286,.989752,.990211,.990664,.991112,.991554,.991991,.992423,.992849,.993270,.993685,.994096,.994501,.994902,.995289,.995663,.996024,.996373,.996710,.997036,.997351,.997655,.997949,.998233,.998499,.998748,.998981,.999199,.999391,.999559,.999707,.999836,.999931,1.00000,.200952,.300618,.366528,.415562,.454473,.486639,.513987,.537724,.558653,.577338,.594188,.609509,.623538,.636460,.648423,.659548,.669935,.679665,.688809,.697426,.705589,.713339,.720713,.727742,.734454,.740873,.747021,.752919,.758582,.764028,.769270,.774321,.779192,.783896,.788440,.792835,.797088,.801207,.805199,.809071,.812829,.816480,.820028,.823479,.826836,.830104,.833286,.836387,.839410,.842357,.845233,.848039,.850778,.853454,.856068,.858622,.861119,.863561,.865950,.868288,.870576,.872818,.875015,.877167,.879277,.881346,.883375,.885365,.887318,.889234,.891115,.892961,.894774,.896555,.898304,.900022,.901710,.903370,.905001,.906604,.908182,.909734,.911261,.912765,.914244,.915701,.917135,.918548,.919939,.921309,.922659,.923989,.925300,.926591,.927864,.929118,.930355,.931574,.932777,.933962,.935132,.936286,.937425,.938549,.939658,.940753,.941834,.942901,.943955,.944995,.946022,.947037,.948039,.949029,.950006,.950972,.951926,.952869,.953800,.954721,.955630,.956529,.957418,.958296,.959165,.960023,.960872,.961711,.962540,.963361,.964172,.964974,.965767,.966552,.967328,.968096,.968856,.969607,.970350,.971086,.971813,.972532,.973243,.973946,.974641,.975329,.976009,.976682,.977347,.978005,.978656,.979300,.979937,.980567,.981191,.981808,.982418,.983022,.983620,.984211,.984794,.985367,.985932,.986489,.987036,.987576,.988107,.988631,.989147,.989655,.990155,.990648,.991134,.991612,.992083,.992548,.993005,.993456,.993901,.994338,.994762,.995173,.995571,.995956,.996330,.996691,.997042,.997381,.997710,.998028,.998327,.998608,.998871,.999119,.999335,.999523,.999688,.999833,.999932,1.00000,.200040,.299268,.364895,.413725,.452479,.484519,.511764,.535414,.556269,.574891,.591685,.606958,.620944,.633828,.645758,.656854,.667214,.676921,.686044,.694643,.702789,.710524,.717884,.724901,.731602,.738011,.744151,.750041,.755698,.761137,.766374,.771421,.776289,.780989,.785531,.789924,.794176,.798294,.802286,.806157,.809916,.813569,.817119,.820573,.823933,.827205,.830392,.833498,.836527,.839480,.842362,.845175,.847922,.850606,.853228,.855791,.858297,.860748,.863146,.865493,.867792,.870045,.872252,.874415,.876536,.878616,.880657,.882659,.884623,.886551,.888445,.890303,.892129,.893922,.895684,.897416,.899117,.900790,.902435,.904052,.905643,.907209,.908751,.910268,.911763,.913234,.914683,.916111,.917517,.918902,.920268,.921613,.922939,.924247,.925535,.926806,.928059,.929294,.930513,.931715,.932901,.934072,.935228,.936369,.937495,.938607,.939706,.940790,.941861,.942920,.943965,.944997,.946017,.947025,.948021,.949005,.949978,.950939,.951889,.952829,.953757,.954675,.955583,.956481,.957369,.958247,.959115,.959974,.960824,.961664,.962496,.963319,.964133,.964938,.965735,.966524,.967305,.968077,.968842,.969598,.970347,.971088,.971821,.972546,.973264,.973974,.974677,.975372,.976061,.976742,.977416,.978084,.978745,.979399,.980046,.980687,.981322,.981951,.982573,.983189,.983796,.984395,.984986,.985568,.986142,.986708,.987266,.987817,.988360,.988895,.989424,.989944,.990458,.990965,.991465,.991958,.992444,.992924,.993398,.993865,.994318,.994758,.995185,.995600,.996003,.996394,.996773,.997142,.997500,.997848,.998174,.998482,.998772,.999044,.999282,.999489,.999671,.999829,.999933,1.00000,.199128,.297926,.363286,.411929,.450545,.482477,.509637,.533220,.554021,.572598,.589357,.604601,.618564,.631431,.643347,.654432,.664786,.674489,.683611,.692210,.700357,.708095,.715458,.722479,.729184,.735598,.741743,.747639,.753302,.758748,.763991,.769045,.773921,.778628,.783179,.787580,.791840,.795967,.799967,.803848,.807616,.811277,.814837,.818299,.821669,.824950,.828147,.831262,.834300,.837262,.840154,.842976,.845732,.848425,.851057,.853629,.856144,.858605,.861013,.863369,.865677,.867939,.870156,.872328,.874459,.876549,.878598,.880610,.882584,.884521,.886424,.888292,.890127,.891930,.893702,.895442,.897154,.898836,.900490,.902116,.903717,.905293,.906844,.908372,.909876,.911357,.912816,.914254,.915670,.917066,.918441,.919797,.921133,.922451,.923750,.925031,.926294,.927540,.928769,.929981,.931178,.932360,.933527,.934679,.935817,.936940,.938050,.939147,.940230,.941300,.942357,.943402,.944435,.945455,.946464,.947461,.948446,.949421,.950384,.951336,.952278,.953210,.954132,.955044,.955946,.956838,.957722,.958596,.959460,.960316,.961164,.962002,.962832,.963654,.964467,.965272,.966069,.966858,.967640,.968414,.969180,.969938,.970688,.971430,.972166,.972893,.973614,.974327,.975033,.975732,.976424,.977110,.977789,.978461,.979126,.979786,.980439,.981085,.981726,.982360,.982986,.983604,.984213,.984815,.985408,.985994,.986572,.987142,.987705,.988261,.988809,.989351,.989885,.990412,.990933,.991447,.991954,.992455,.992950,.993438,.993914,.994376,.994827,.995266,.995693,.996109,.996514,.996908,.997292,.997666,.998019,.998353,.998669,.998967,.999228,.999455,.999653,.999825,.999933,1.00000,.198183,.296522,.361582,.410006,.448451,.480245,.507290,.530774,.551490,.569993,.586686,.601871,.615782,.628600,.640474,.651520,.661838,.671508,.680600,.689172,.697295,.705011,.712355,.719359,.726049,.732450,.738584,.744470,.750125,.755565,.760803,.765852,.770725,.775431,.779980,.784381,.788642,.792770,.796773,.800656,.804428,.808094,.811658,.815125,.818500,.821787,.824990,.828111,.831156,.834126,.837024,.839854,.842619,.845319,.847959,.850540,.853065,.855534,.857951,.860317,.862635,.864907,.867133,.869317,.871458,.873558,.875619,.877642,.879627,.881576,.883491,.885371,.887218,.889033,.890817,.892570,.894294,.895989,.897656,.899295,.900909,.902498,.904062,.905603,.907121,.908616,.910089,.911541,.912971,.914381,.915771,.917141,.918492,.919824,.921138,.922433,.923711,.924972,.926216,.927444,.928656,.929853,.931035,.932203,.933357,.934497,.935623,.936736,.937835,.938922,.939996,.941058,.942107,.943145,.944170,.945185,.946187,.947179,.948160,.949130,.950090,.951040,.951980,.952911,.953832,.954744,.955647,.956541,.957426,.958302,.959170,.960029,.960880,.961723,.962558,.963384,.964203,.965015,.965818,.966615,.967403,.968184,.968958,.969724,.970484,.971236,.971981,.972719,.973451,.974176,.974894,.975605,.976311,.977010,.977702,.978389,.979069,.979744,.980412,.981075,.981730,.982376,.983015,.983647,.984271,.984887,.985496,.986098,.986693,.987280,.987861,.988435,.989003,.989563,.990118,.990665,.991207,.991742,.992271,.992794,.993305,.993803,.994290,.994765,.995229,.995682,.996124,.996556,.996977,.997389,.997780,.998152,.998505,.998841,.999135,.999394,.999620,.999819,.999934,1.00000,.197480,.295482,.360328,.408599,.446926,.478627,.505596,.529018,.549681,.568139,.584793,.599946,.613828,.626622,.638474,.649502,.659804,.669460,.678540,.687102,.695216,.702924,.710261,.717257,.723942,.730338,.736467,.742349,.748000,.753436,.758672,.763719,.768589,.773294,.777841,.782241,.786501,.790629,.794631,.798515,.802287,.805953,.809518,.812987,.816364,.819653,.822858,.825983,.829030,.832003,.834905,.837739,.840507,.843213,.845857,.848442,.850972,.853446,.855868,.858240,.860563,.862840,.865073,.867262,.869409,.871516,.873583,.875612,.877604,.879560,.881481,.883369,.885223,.887045,.888836,.890596,.892327,.894030,.895704,.897351,.898973,.900569,.902142,.903691,.905217,.906720,.908202,.909662,.911101,.912519,.913918,.915297,.916657,.917998,.919321,.920625,.921913,.923183,.924437,.925674,.926895,.928102,.929294,.930472,.931636,.932786,.933922,.935046,.936156,.937253,.938338,.939411,.940471,.941520,.942557,.943582,.944597,.945600,.946592,.947574,.948546,.949508,.950460,.951403,.952337,.953262,.954177,.955084,.955982,.956872,.957753,.958626,.959490,.960347,.961195,.962036,.962869,.963695,.964513,.965324,.966127,.966923,.967712,.968494,.969269,.970037,.970799,.971553,.972301,.973043,.973778,.974507,.975230,.975947,.976658,.977362,.978061,.978754,.979441,.980123,.980797,.981463,.982122,.982774,.983419,.984057,.984687,.985311,.985928,.986538,.987142,.987740,.988330,.988915,.989493,.990066,.990632,.991192,.991747,.992295,.992832,.993356,.993870,.994372,.994864,.995344,.995815,.996275,.996725,.997166,.997586,.997987,.998370,.998735,.999057,.999341,.999592,.999813,.999934,1.00000][]
	# Z=53
	      Z53=[.149126,.223981,.274079,.311800,.342094,.367438,.389246,.408403,.425498,.440944,.455040,.468012,.480033,.491240,.501739,.511622,.520959,.529812,.538232,.546262,.553938,.561294,.568357,.575151,.581698,.588017,.594125,.600037,.605768,.611328,.616729,.621982,.627094,.632075,.636933,.641673,.646302,.650827,.655253,.659584,.663825,.667979,.672052,.676046,.679965,.683813,.687592,.691306,.694957,.698548,.702081,.705558,.708982,.712355,.715678,.718953,.722183,.725368,.728510,.731611,.734671,.737693,.740677,.743624,.746536,.749414,.752259,.755071,.757852,.760603,.763325,.766018,.768683,.771321,.773933,.776520,.779081,.781619,.784133,.786624,.789093,.791540,.793965,.796370,.798754,.801118,.803462,.805788,.808095,.810385,.812656,.814911,.817148,.819370,.821575,.823764,.825938,.828097,.830241,.832371,.834487,.836589,.838678,.840753,.842816,.844865,.846903,.848928,.850941,.852942,.854933,.856911,.858879,.860836,.862783,.864719,.866645,.868561,.870467,.872363,.874250,.876128,.877997,.879857,.881708,.883551,.885385,.887211,.889028,.890838,.892640,.894434,.896221,.898000,.899772,.901537,.903294,.905045,.906789,.908526,.910255,.911976,.913689,.915394,.917092,.918782,.920464,.922139,.923807,.925467,.927121,.928768,.930407,.932040,.933667,.935286,.936900,.938507,.940107,.941702,.943289,.944868,.946439,.948003,.949559,.951108,.952650,.954185,.955713,.957233,.958747,.960254,.961754,.963248,.964735,.966216,.967690,.969158,.970619,.972075,.973524,.974967,.976404,.977835,.979260,.980680,.982093,.983501,.984904,.986300,.987693,.989080,.990463,.991842,.993215,.994583,.995945,.997302,.998654,1.00000,.154057,.231311,.282965,.321820,.352995,.379050,.401448,.421105,.438628,.454446,.468868,.482127,.494402,.505833,.516534,.526595,.536093,.545089,.553636,.561781,.569559,.577006,.584150,.591016,.597626,.604001,.610158,.616111,.621877,.627466,.632890,.638161,.643286,.648276,.653136,.657876,.662501,.667017,.671430,.675745,.679968,.684101,.688150,.692119,.696011,.699829,.703577,.707257,.710873,.714426,.717920,.721357,.724738,.728067,.731344,.734573,.737754,.740889,.743980,.747028,.750035,.753001,.755929,.758820,.761674,.764493,.767277,.770029,.772748,.775437,.778095,.780723,.783323,.785895,.788440,.790959,.793452,.795920,.798364,.800785,.803182,.805556,.807908,.810238,.812547,.814835,.817104,.819352,.821582,.823792,.825985,.828159,.830316,.832456,.834579,.836685,.838776,.840851,.842910,.844954,.846984,.848998,.850999,.852985,.854957,.856915,.858861,.860793,.862712,.864619,.866513,.868395,.870266,.872125,.873972,.875808,.877633,.879447,.881251,.883044,.884826,.886598,.888359,.890110,.891850,.893581,.895301,.897012,.898714,.900406,.902089,.903763,.905428,.907084,.908732,.910371,.912002,.913625,.915239,.916846,.918443,.920033,.921613,.923186,.924750,.926306,.927854,.929395,.930927,.932452,.933969,.935479,.936982,.938477,.939966,.941447,.942921,.944389,.945849,.947303,.948750,.950189,.951621,.953045,.954463,.955873,.957276,.958673,.960063,.961446,.962822,.964192,.965556,.966913,.968263,.969608,.970946,.972278,.973605,.974925,.976238,.977544,.978844,.980137,.981423,.982702,.983975,.985241,.986501,.987755,.989002,.990242,.991476,.992703,.993927,.995148,.996367,.997582,.998793,1.00000,.158359,.237794,.290922,.330896,.362978,.389800,.412864,.433111,.451165,.467467,.482334,.496007,.508668,.520463,.531508,.541895,.551703,.560996,.569828,.578246,.586282,.593971,.601343,.608425,.615240,.621808,.628148,.634277,.640208,.645955,.651530,.656944,.662206,.667326,.672311,.677170,.681908,.686533,.691050,.695464,.699778,.703996,.708123,.712163,.716120,.719997,.723798,.727525,.731183,.734774,.738300,.741764,.745168,.748515,.751806,.755044,.758230,.761367,.764455,.767498,.770494,.773445,.776353,.779220,.782046,.784832,.787581,.790292,.792968,.795608,.798215,.800789,.803330,.805841,.808321,.810771,.813193,.815587,.817953,.820293,.822607,.824895,.827157,.829396,.831610,.833802,.835970,.838116,.840241,.842344,.844427,.846489,.848531,.850554,.852558,.854543,.856510,.858459,.860390,.862304,.864202,.866082,.867947,.869795,.871628,.873445,.875247,.877034,.878807,.880566,.882310,.884041,.885758,.887462,.889153,.890831,.892496,.894149,.895790,.897419,.899036,.900641,.902235,.903817,.905389,.906949,.908499,.910037,.911566,.913084,.914592,.916090,.917579,.919057,.920526,.921986,.923437,.924878,.926310,.927734,.929148,.930554,.931950,.933338,.934718,.936089,.937452,.938806,.940153,.941491,.942822,.944144,.945459,.946767,.948067,.949359,.950645,.951923,.953194,.954458,.955715,.956965,.958208,.959444,.960673,.961895,.963111,.964321,.965524,.966721,.967911,.969095,.970273,.971445,.972611,.973771,.974925,.976073,.977215,.978352,.979483,.980609,.981729,.982844,.983954,.985058,.986158,.987252,.988341,.989425,.990504,.991578,.992648,.993713,.994773,.995828,.996879,.997925,.998965,1.00000,.162945,.244652,.299280,.340368,.373333,.400883,.424566,.445347,.463873,.480594,.495838,.509852,.522826,.534907,.546215,.556847,.566883,.576388,.585419,.594023,.602230,.610076,.617594,.624810,.631748,.638430,.644875,.651099,.657118,.662947,.668596,.674077,.679400,.684576,.689611,.694515,.699293,.703953,.708501,.712943,.717278,.721512,.725650,.729697,.733655,.737529,.741323,.745041,.748684,.752256,.755760,.759198,.762574,.765888,.769145,.772344,.775490,.778582,.781624,.784617,.787561,.790457,.793308,.796114,.798877,.801597,.804278,.806919,.809522,.812087,.814617,.817111,.819571,.821998,.824393,.826756,.829088,.831391,.833665,.835910,.838127,.840317,.842481,.844619,.846732,.848820,.850884,.852924,.854942,.856937,.858910,.860861,.862792,.864702,.866591,.868461,.870312,.872144,.873957,.875752,.877529,.879289,.881032,.882758,.884467,.886160,.887838,.889500,.891147,.892779,.894396,.895998,.897587,.899161,.900722,.902270,.903804,.905325,.906833,.908329,.909813,.911284,.912744,.914192,.915628,.917053,.918467,.919870,.921262,.922644,.924015,.925376,.926727,.928067,.929398,.930719,.932031,.933333,.934626,.935910,.937184,.938450,.939707,.940955,.942195,.943426,.944649,.945863,.947070,.948268,.949459,.950642,.951817,.952984,.954144,.955297,.956442,.957580,.958711,.959835,.960952,.962063,.963167,.964264,.965354,.966438,.967516,.968588,.969653,.970712,.971766,.972813,.973854,.974889,.975919,.976943,.977961,.978974,.979981,.980983,.981980,.982971,.983957,.984939,.985915,.986887,.987853,.988815,.989773,.990725,.991673,.992616,.993555,.994489,.995419,.996344,.997265,.998181,.999093,1.00000,.169872,.254925,.311704,.354347,.388508,.417014,.441482,.462920,.482002,.499200,.514856,.529226,.542510,.554861,.566405,.577242,.587456,.597115,.606278,.614996,.623300,.631228,.638813,.646084,.653065,.659780,.666247,.672485,.678509,.684333,.689971,.695433,.700732,.705875,.710873,.715733,.720463,.725069,.729558,.733936,.738204,.742368,.746432,.750401,.754278,.758069,.761777,.765405,.768957,.772435,.775842,.779182,.782456,.785667,.788818,.791910,.794946,.797928,.800857,.803735,.806563,.809342,.812074,.814760,.817402,.820001,.822559,.825076,.827553,.829993,.832395,.834762,.837093,.839391,.841655,.843887,.846087,.848257,.850397,.852508,.854591,.856646,.858674,.860676,.862652,.864603,.866530,.868433,.870312,.872169,.874003,.875815,.877606,.879377,.881126,.882856,.884566,.886256,.887928,.889581,.891217,.892835,.894435,.896019,.897586,.899137,.900672,.902192,.903696,.905185,.906659,.908119,.909564,.910995,.912413,.913817,.915208,.916585,.917950,.919302,.920642,.921970,.923286,.924591,.925884,.927166,.928436,.929696,.930946,.932184,.933412,.934630,.935838,.937036,.938225,.939403,.940572,.941732,.942883,.944024,.945157,.946281,.947396,.948503,.949602,.950692,.951775,.952849,.953916,.954974,.956025,.957069,.958105,.959134,.960155,.961170,.962177,.963177,.964170,.965157,.966137,.967110,.968077,.969038,.969993,.970941,.971884,.972820,.973751,.974675,.975594,.976507,.977415,.978317,.979213,.980104,.980990,.981870,.982745,.983614,.984479,.985339,.986193,.987043,.987887,.988727,.989562,.990392,.991217,.992038,.992854,.993665,.994472,.995274,.996071,.996865,.997654,.998439,.999221,1.00000,.182524,.273574,.334133,.379446,.415612,.445681,.471394,.493841,.513747,.531621,.547832,.562658,.576312,.588960,.600738,.611755,.622099,.631846,.641058,.649789,.658085,.665984,.673522,.680728,.687630,.694250,.700609,.706727,.712620,.718302,.723788,.729089,.734218,.739184,.743996,.748664,.753194,.757594,.761872,.766032,.770081,.774025,.777867,.781613,.785267,.788833,.792314,.795715,.799039,.802288,.805466,.808576,.811619,.814599,.817517,.820377,.823180,.825927,.828622,.831266,.833860,.836406,.838905,.841360,.843771,.846140,.848469,.850757,.853007,.855220,.857396,.859537,.861644,.863717,.865758,.867767,.869745,.871693,.873612,.875503,.877366,.879202,.881011,.882795,.884554,.886289,.887999,.889686,.891351,.892993,.894613,.896212,.897790,.899348,.900885,.902403,.903902,.905383,.906845,.908289,.909715,.911125,.912518,.913894,.915254,.916599,.917928,.919242,.920541,.921825,.923095,.924351,.925593,.926821,.928037,.929239,.930428,.931604,.932768,.933920,.935060,.936189,.937306,.938412,.939507,.940591,.941665,.942728,.943780,.944823,.945855,.946878,.947891,.948894,.949888,.950873,.951849,.952815,.953773,.954722,.955663,.956596,.957521,.958437,.959346,.960247,.961141,.962027,.962906,.963778,.964642,.965499,.966349,.967193,.968029,.968859,.969682,.970499,.971309,.972113,.972910,.973702,.974488,.975268,.976042,.976810,.977573,.978330,.979082,.979828,.980569,.981305,.982035,.982760,.983480,.984195,.984905,.985610,.986311,.987006,.987697,.988383,.989065,.989742,.990415,.991084,.991749,.992409,.993065,.993717,.994365,.995009,.995649,.996285,.996916,.997541,.998162,.998778,.999391,1.00000,.188874,.283047,.345654,.392477,.429832,.460873,.487406,.510557,.531078,.549496,.566192,.581455,.595503,.608512,.620620,.631939,.642563,.652568,.662021,.670975,.679465,.687532,.695213,.702541,.709544,.716247,.722673,.728841,.734770,.740474,.745970,.751270,.756387,.761330,.766110,.770736,.775217,.779561,.783773,.787862,.791834,.795693,.799447,.803098,.806653,.810115,.813488,.816776,.819983,.823111,.826165,.829147,.832059,.834905,.837687,.840407,.843067,.845670,.848217,.850711,.853154,.855548,.857896,.860197,.862454,.864668,.866840,.868973,.871065,.873120,.875138,.877121,.879068,.880981,.882862,.884710,.886528,.888315,.890072,.891801,.893502,.895177,.896826,.898450,.900049,.901624,.903175,.904704,.906210,.907695,.909158,.910600,.912022,.913423,.914806,.916169,.917513,.918839,.920147,.921438,.922712,.923969,.925210,.926436,.927646,.928840,.930020,.931185,.932336,.933473,.934596,.935706,.936802,.937885,.938955,.940013,.941059,.942092,.943113,.944123,.945122,.946109,.947086,.948052,.949007,.949953,.950888,.951813,.952729,.953634,.954531,.955418,.956296,.957165,.958024,.958876,.959718,.960552,.961378,.962196,.963005,.963807,.964601,.965387,.966166,.966938,.967702,.968460,.969210,.969953,.970689,.971419,.972142,.972858,.973568,.974271,.974968,.975659,.976344,.977022,.977695,.978362,.979022,.979677,.980327,.980970,.981608,.982241,.982868,.983489,.984106,.984717,.985323,.985924,.986520,.987111,.987696,.988278,.988854,.989425,.989992,.990555,.991114,.991668,.992219,.992765,.993307,.993845,.994379,.994909,.995436,.995958,.996477,.996992,.997504,.998011,.998515,.999015,.999510,1.00000,.200033,.299413,.365246,.414306,.453305,.485597,.513101,.537013,.558133,.577021,.594082,.609622,.623875,.637026,.649223,.660584,.671209,.681180,.690567,.699427,.707813,.715769,.723331,.730534,.737406,.743972,.750257,.756279,.762058,.767610,.772950,.778091,.783045,.787823,.792437,.796894,.801205,.805376,.809415,.813328,.817124,.820807,.824384,.827858,.831236,.834520,.837715,.840826,.843855,.846805,.849681,.852485,.855220,.857888,.860492,.863035,.865518,.867944,.870315,.872633,.874899,.877117,.879288,.881413,.883493,.885530,.887526,.889482,.891398,.893276,.895118,.896924,.898696,.900433,.902138,.903811,.905454,.907066,.908649,.910203,.911730,.913231,.914706,.916156,.917582,.918984,.920362,.921718,.923052,.924364,.925655,.926925,.928175,.929406,.930617,.931810,.932984,.934140,.935278,.936400,.937505,.938593,.939667,.940724,.941767,.942794,.943807,.944806,.945791,.946763,.947721,.948665,.949597,.950517,.951424,.952318,.953201,.954072,.954932,.955780,.956618,.957445,.958261,.959067,.959863,.960649,.961425,.962192,.962949,.963697,.964436,.965165,.965886,.966599,.967303,.967998,.968685,.969364,.970035,.970699,.971354,.972003,.972644,.973277,.973904,.974524,.975137,.975743,.976342,.976935,.977522,.978102,.978676,.979244,.979805,.980361,.980911,.981455,.981993,.982525,.983052,.983574,.984090,.984601,.985107,.985607,.986103,.986593,.987079,.987560,.988036,.988507,.988973,.989435,.989893,.990346,.990794,.991238,.991678,.992113,.992545,.992972,.993395,.993814,.994228,.994639,.995046,.995449,.995848,.996243,.996635,.997023,.997407,.997787,.998164,.998538,.998908,.999275,.999639,1.00000,.212864,.318251,.387818,.439481,.480405,.514173,.542833,.567664,.589520,.608996,.626528,.642441,.656986,.670359,.682717,.694190,.704882,.714880,.724259,.733082,.741409,.749286,.756753,.763845,.770591,.777020,.783155,.789018,.794628,.800002,.805157,.810105,.814860,.819434,.823837,.828079,.832170,.836117,.839929,.843612,.847175,.850625,.853966,.857205,.860345,.863392,.866349,.869221,.872011,.874723,.877359,.879923,.882418,.884847,.887211,.889515,.891759,.893946,.896079,.898158,.900188,.902170,.904105,.905995,.907842,.909647,.911412,.913137,.914824,.916474,.918089,.919669,.921215,.922729,.924211,.925662,.927084,.928476,.929841,.931178,.932489,.933774,.935034,.936271,.937484,.938674,.939842,.940988,.942113,.943217,.944301,.945366,.946411,.947438,.948446,.949437,.950410,.951366,.952306,.953230,.954137,.955030,.955907,.956770,.957618,.958453,.959273,.960080,.960874,.961655,.962424,.963180,.963924,.964657,.965377,.966087,.966785,.967472,.968149,.968815,.969471,.970116,.970752,.971378,.971994,.972601,.973198,.973786,.974366,.974937,.975499,.976053,.976598,.977136,.977665,.978187,.978701,.979208,.979707,.980199,.980684,.981161,.981632,.982096,.982553,.983004,.983448,.983886,.984317,.984743,.985162,.985576,.985983,.986385,.986781,.987172,.987557,.987937,.988312,.988682,.989046,.989405,.989759,.990109,.990453,.990793,.991128,.991459,.991785,.992107,.992424,.992737,.993046,.993350,.993651,.993947,.994240,.994528,.994813,.995094,.995371,.995644,.995914,.996181,.996443,.996703,.996959,.997211,.997461,.997707,.997950,.998189,.998426,.998660,.998891,.999118,.999343,.999565,.999784,1.00000,.217509,.325066,.395980,.448580,.490197,.524495,.553570,.578731,.600849,.620536,.638237,.654284,.668933,.682386,.694803,.706317,.717034,.727044,.736422,.745234,.753543,.761395,.768832,.775888,.782595,.788979,.795067,.800878,.806434,.811751,.816846,.821732,.826423,.830932,.835268,.839441,.843462,.847338,.851077,.854687,.858176,.861552,.864818,.867982,.871047,.874018,.876899,.879694,.882408,.885043,.887602,.890090,.892508,.894860,.897149,.899375,.901543,.903654,.905711,.907714,.909668,.911573,.913432,.915247,.917017,.918746,.920435,.922084,.923695,.925269,.926808,.928312,.929783,.931221,.932628,.934004,.935351,.936669,.937959,.939222,.940458,.941669,.942856,.944018,.945156,.946272,.947366,.948438,.949488,.950519,.951529,.952520,.953491,.954444,.955379,.956297,.957197,.958080,.958947,.959798,.960634,.961454,.962259,.963049,.963825,.964587,.965336,.966071,.966793,.967502,.968199,.968884,.969557,.970218,.970867,.971506,.972134,.972750,.973357,.973953,.974539,.975115,.975681,.976237,.976784,.977321,.977850,.978369,.978880,.979382,.979876,.980362,.980840,.981309,.981771,.982226,.982673,.983113,.983545,.983971,.984389,.984801,.985206,.985604,.985995,.986380,.986759,.987131,.987498,.987858,.988213,.988561,.988905,.989242,.989574,.989901,.990223,.990540,.990851,.991158,.991459,.991755,.992047,.992333,.992615,.992892,.993164,.993432,.993695,.993954,.994209,.994460,.994706,.994948,.995187,.995421,.995652,.995879,.996102,.996322,.996538,.996750,.996958,.997163,.997364,.997562,.997757,.997948,.998136,.998320,.998502,.998680,.998855,.999028,.999197,.999363,.999526,.999687,.999845,1.00000,.217009,.324334,.395105,.447606,.489150,.523393,.552425,.577551,.599643,.619309,.636993,.653027,.667667,.681113,.693526,.705036,.715752,.725762,.735142,.743957,.752271,.760131,.767577,.774644,.781364,.787763,.793866,.799695,.805268,.810604,.815719,.820626,.825339,.829869,.834228,.838425,.842469,.846369,.850133,.853767,.857281,.860681,.863972,.867160,.870249,.873243,.876148,.878967,.881704,.884362,.886945,.889456,.891897,.894272,.896582,.898831,.901021,.903154,.905232,.907258,.909233,.911159,.913039,.914874,.916665,.918414,.920122,.921791,.923422,.925015,.926573,.928096,.929585,.931042,.932467,.933862,.935226,.936562,.937869,.939149,.940403,.941631,.942833,.944012,.945167,.946299,.947409,.948497,.949563,.950609,.951635,.952641,.953628,.954596,.955546,.956478,.957393,.958290,.959172,.960037,.960886,.961720,.962538,.963342,.964131,.964906,.965667,.966414,.967149,.967870,.968579,.969275,.969959,.970631,.971292,.971942,.972580,.973207,.973824,.974430,.975026,.975611,.976186,.976751,.977306,.977852,.978388,.978914,.979432,.979941,.980441,.980933,.981416,.981892,.982359,.982818,.983270,.983714,.984151,.984581,.985003,.985417,.985825,.986225,.986618,.987005,.987384,.987757,.988124,.988484,.988838,.989187,.989529,.989865,.990196,.990521,.990840,.991154,.991463,.991766,.992064,.992356,.992643,.992923,.993199,.993469,.993734,.993994,.994249,.994499,.994744,.994985,.995221,.995453,.995681,.995904,.996123,.996337,.996548,.996755,.996957,.997154,.997347,.997536,.997720,.997900,.998076,.998247,.998415,.998579,.998739,.998895,.999046,.999194,.999337,.999477,.999613,.999746,.999875,1.00000,.215653,.322326,.392679,.444879,.486192,.520251,.549131,.574131,.596116,.615690,.633294,.649258,.663836,.677228,.689594,.701062,.711741,.721718,.731069,.739857,.748150,.755995,.763430,.770491,.777207,.783606,.789712,.795547,.801129,.806476,.811604,.816525,.821255,.825803,.830182,.834400,.838466,.842390,.846178,.849838,.853379,.856806,.860126,.863342,.866462,.869487,.872424,.875275,.878045,.880736,.883352,.885897,.888373,.890782,.893128,.895413,.897639,.899808,.901922,.903984,.905996,.907959,.909876,.911748,.913576,.915362,.917108,.918814,.920481,.922112,.923707,.925268,.926794,.928288,.929751,.931182,.932584,.933956,.935301,.936617,.937908,.939172,.940412,.941627,.942818,.943986,.945131,.946255,.947357,.948438,.949499,.950540,.951562,.952564,.953549,.954515,.955464,.956396,.957311,.958210,.959092,.959959,.960810,.961647,.962468,.963275,.964069,.964848,.965614,.966367,.967107,.967834,.968549,.969252,.969943,.970623,.971291,.971948,.972595,.973231,.973855,.974470,.975073,.975667,.976251,.976824,.977388,.977943,.978489,.979025,.979553,.980072,.980582,.981084,.981578,.982064,.982542,.983012,.983475,.983930,.984378,.984817,.985249,.985674,.986091,.986501,.986903,.987299,.987688,.988071,.988446,.988816,.989179,.989536,.989887,.990232,.990572,.990905,.991233,.991556,.991872,.992182,.992485,.992782,.993073,.993358,.993637,.993911,.994179,.994442,.994699,.994951,.995199,.995441,.995678,.995911,.996139,.996363,.996582,.996797,.997005,.997209,.997407,.997599,.997786,.997969,.998146,.998319,.998487,.998650,.998808,.998961,.999108,.999250,.999387,.999519,.999646,.999768,.999886,1.00000,.214258,.320266,.390198,.442098,.483183,.517062,.545798,.570678,.592562,.612052,.629584,.645487,.660013,.673360,.685687,.697123,.707773,.717727,.727057,.735829,.744110,.751946,.759376,.766435,.773152,.779555,.785667,.791510,.797102,.802460,.807601,.812538,.817284,.821850,.826247,.830484,.834572,.838517,.842328,.846011,.849575,.853028,.856373,.859616,.862762,.865815,.868780,.871660,.874458,.877179,.879826,.882401,.884907,.887348,.889725,.892041,.894298,.896499,.898645,.900739,.902783,.904779,.906729,.908634,.910495,.912314,.914093,.915832,.917533,.919197,.920826,.922420,.923980,.925507,.927003,.928468,.929903,.931309,.932687,.934037,.935361,.936659,.937931,.939179,.940404,.941605,.942783,.943939,.945074,.946188,.947281,.948354,.949408,.950443,.951459,.952458,.953438,.954402,.955348,.956279,.957192,.958090,.958973,.959840,.960692,.961530,.962354,.963163,.963959,.964742,.965512,.966269,.967014,.967746,.968466,.969175,.969872,.970558,.971233,.971898,.972551,.973193,.973825,.974446,.975057,.975658,.976250,.976831,.977404,.977967,.978521,.979066,.979602,.980130,.980649,.981161,.981664,.982159,.982647,.983127,.983599,.984062,.984518,.984966,.985407,.985840,.986266,.986684,.987096,.987501,.987899,.988290,.988675,.989053,.989426,.989792,.990152,.990506,.990855,.991198,.991533,.991862,.992184,.992499,.992808,.993111,.993407,.993697,.993981,.994259,.994532,.994799,.995060,.995317,.995568,.995814,.996055,.996291,.996522,.996749,.996969,.997182,.997389,.997590,.997784,.997973,.998156,.998334,.998506,.998674,.998834,.998988,.999136,.999277,.999412,.999540,.999663,.999780,.999892,1.00000,.212969,.318366,.387912,.439538,.480417,.514135,.542740,.567514,.589310,.608727,.626197,.642048,.656530,.669840,.682136,.693546,.704175,.714110,.723427,.732187,.740460,.748292,.755721,.762780,.769501,.775910,.782029,.787881,.793484,.798855,.804010,.808961,.813723,.818306,.822721,.826978,.831085,.835050,.838882,.842587,.846174,.849649,.853018,.856285,.859456,.862534,.865524,.868429,.871254,.874001,.876674,.879276,.881810,.884277,.886682,.889026,.891311,.893540,.895715,.897837,.899909,.901934,.903912,.905845,.907735,.909583,.911390,.913158,.914888,.916581,.918238,.919861,.921449,.923006,.924530,.926024,.927487,.928922,.930328,.931707,.933059,.934385,.935686,.936962,.938215,.939444,.940650,.941834,.942997,.944138,.945259,.946360,.947442,.948504,.949548,.950573,.951581,.952572,.953545,.954502,.955443,.956367,.957276,.958170,.959048,.959913,.960762,.961598,.962420,.963229,.964024,.964807,.965577,.966335,.967080,.967814,.968537,.969248,.969947,.970636,.971314,.971981,.972637,.973283,.973918,.974543,.975158,.975763,.976359,.976946,.977523,.978091,.978651,.979202,.979744,.980278,.980804,.981322,.981832,.982334,.982828,.983314,.983791,.984261,.984723,.985177,.985624,.986064,.986496,.986921,.987340,.987751,.988156,.988555,.988947,.989332,.989712,.990085,.990453,.990815,.991169,.991516,.991855,.992188,.992513,.992832,.993145,.993451,.993750,.994044,.994331,.994613,.994889,.995159,.995424,.995683,.995937,.996186,.996430,.996669,.996900,.997124,.997341,.997551,.997753,.997950,.998140,.998324,.998502,.998675,.998840,.998997,.999147,.999290,.999425,.999552,.999673,.999787,.999896,1.00000,.211813,.316662,.385862,.437244,.477938,.511512,.540001,.564681,.586399,.605750,.623166,.638971,.653414,.666692,.678961,.690348,.700958,.710879,.720184,.728935,.737202,.745030,.752458,.759520,.766245,.772659,.778786,.784647,.790260,.795643,.800810,.805776,.810553,.815152,.819583,.823858,.827983,.831967,.835819,.839543,.843151,.846647,.850037,.853326,.856519,.859619,.862632,.865560,.868408,.871178,.873875,.876500,.879057,.881549,.883977,.886345,.888654,.890908,.893106,.895253,.897350,.899399,.901401,.903359,.905273,.907146,.908978,.910770,.912525,.914243,.915924,.917571,.919185,.920766,.922315,.923833,.925321,.926780,.928210,.929613,.930990,.932340,.933665,.934966,.936242,.937495,.938726,.939934,.941121,.942286,.943431,.944556,.945661,.946747,.947814,.948863,.949894,.950908,.951905,.952885,.953849,.954796,.955728,.956645,.957546,.958433,.959306,.960164,.961009,.961840,.962658,.963463,.964255,.965035,.965803,.966559,.967303,.968036,.968758,.969468,.970168,.970856,.971533,.972200,.972856,.973503,.974139,.974765,.975382,.975989,.976587,.977176,.977756,.978327,.978890,.979444,.979990,.980528,.981058,.981580,.982093,.982598,.983095,.983584,.984065,.984539,.985004,.985463,.985914,.986358,.986794,.987224,.987647,.988064,.988474,.988878,.989275,.989666,.990051,.990430,.990802,.991165,.991521,.991870,.992212,.992546,.992874,.993195,.993509,.993817,.994119,.994414,.994704,.994988,.995266,.995538,.995805,.996066,.996322,.996574,.996816,.997051,.997277,.997496,.997708,.997912,.998110,.998301,.998486,.998665,.998834,.998996,.999149,.999295,.999431,.999559,.999679,.999792,.999899,1.00000,.209820,.313728,.382338,.433304,.473688,.507019,.535316,.559839,.581429,.600675,.618004,.633737,.648121,.661350,.673579,.684934,.695520,.705421,.714712,.723454,.731717,.739545,.746977,.754045,.760779,.767206,.773347,.779225,.784858,.790261,.795452,.800441,.805244,.809870,.814330,.818633,.822789,.826804,.830688,.834445,.838086,.841617,.845041,.848366,.851594,.854731,.857780,.860745,.863630,.866438,.869172,.871836,.874432,.876962,.879429,.881836,.884184,.886477,.888715,.890901,.893037,.895126,.897168,.899165,.901120,.903032,.904904,.906736,.908530,.910288,.912010,.913696,.915350,.916970,.918559,.920116,.921644,.923142,.924612,.926055,.927470,.928860,.930224,.931564,.932879,.934171,.935441,.936688,.937913,.939117,.940300,.941464,.942607,.943731,.944837,.945924,.946993,.948045,.949079,.950097,.951098,.952083,.953052,.954006,.954945,.955869,.956778,.957674,.958555,.959423,.960277,.961119,.961947,.962764,.963568,.964359,.965140,.965908,.966665,.967412,.968146,.968870,.969583,.970285,.970976,.971658,.972329,.972990,.973641,.974283,.974916,.975539,.976154,.976759,.977356,.977944,.978524,.979096,.979660,.980215,.980762,.981301,.981831,.982353,.982867,.983373,.983871,.984362,.984845,.985321,.985790,.986252,.986707,.987155,.987596,.988031,.988459,.988881,.989297,.989706,.990108,.990501,.990886,.991263,.991633,.991995,.992350,.992698,.993039,.993373,.993701,.994022,.994336,.994644,.994946,.995243,.995533,.995817,.996096,.996370,.996634,.996888,.997134,.997370,.997599,.997819,.998032,.998237,.998436,.998627,.998807,.998978,.999139,.999292,.999433,.999564,.999685,.999798,.999903,1.00000,.207309,.310064,.377972,.428461,.468502,.501579,.529685,.554065,.575547,.594713,.611986,.627681,.642044,.655265,.667497,.678866,.689472,.699403,.708729,.717512,.725818,.733691,.741169,.748286,.755069,.761547,.767741,.773672,.779358,.784816,.790062,.795107,.799966,.804649,.809166,.813527,.817740,.821814,.825756,.829572,.833271,.836857,.840337,.843716,.846997,.850186,.853287,.856303,.859238,.862095,.864878,.867589,.870231,.872808,.875320,.877772,.880165,.882501,.884782,.887010,.889188,.891318,.893401,.895438,.897432,.899383,.901293,.903163,.904995,.906789,.908547,.910270,.911958,.913614,.915237,.916828,.918390,.919921,.921424,.922899,.924347,.925769,.927165,.928537,.929885,.931209,.932510,.933789,.935046,.936281,.937496,.938691,.939866,.941021,.942158,.943276,.944376,.945458,.946523,.947572,.948603,.949619,.950619,.951604,.952574,.953529,.954469,.955396,.956309,.957208,.958093,.958966,.959826,.960674,.961509,.962333,.963144,.963944,.964733,.965510,.966277,.967032,.967776,.968510,.969233,.969946,.970649,.971342,.972025,.972698,.973363,.974018,.974664,.975301,.975930,.976550,.977161,.977764,.978360,.978947,.979525,.980095,.980656,.981209,.981754,.982291,.982820,.983341,.983854,.984360,.984859,.985351,.985835,.986313,.986784,.987248,.987705,.988156,.988600,.989038,.989468,.989888,.990300,.990704,.991099,.991486,.991866,.992238,.992602,.992959,.993309,.993652,.993987,.994317,.994639,.994956,.995265,.995569,.995867,.996159,.996440,.996712,.996973,.997226,.997470,.997704,.997931,.998150,.998360,.998564,.998756,.998937,.999109,.999271,.999420,.999557,.999683,.999800,.999905,1.00000,.205175,.306901,.374149,.424161,.463834,.496618,.524482,.548658,.569967,.588985,.606128,.621711,.635974,.649107,.661262,.672561,.683106,.692982,.702259,.710999,.719268,.727110,.734562,.741658,.748425,.754890,.761075,.767000,.772684,.778142,.783391,.788442,.793308,.798000,.802529,.806903,.811132,.815222,.819182,.823018,.826737,.830346,.833849,.837252,.840560,.843775,.846904,.849948,.852913,.855800,.858614,.861357,.864032,.866641,.869187,.871673,.874101,.876472,.878789,.881053,.883268,.885434,.887555,.889631,.891663,.893653,.895603,.897513,.899385,.901220,.903019,.904783,.906513,.908210,.909875,.911509,.913113,.914688,.916233,.917751,.919243,.920708,.922149,.923565,.924957,.926326,.927672,.928996,.930298,.931579,.932840,.934081,.935301,.936503,.937686,.938850,.939997,.941126,.942238,.943333,.944411,.945474,.946522,.947554,.948571,.949573,.950561,.951536,.952496,.953443,.954377,.955297,.956205,.957101,.957984,.958856,.959715,.960563,.961400,.962226,.963040,.963843,.964635,.965417,.966188,.966949,.967700,.968441,.969172,.969893,.970605,.971308,.972002,.972687,.973363,.974030,.974689,.975340,.975982,.976616,.977242,.977858,.978467,.979067,.979659,.980243,.980818,.981387,.981947,.982500,.983046,.983584,.984115,.984639,.985156,.985667,.986170,.986667,.987158,.987642,.988118,.988584,.989042,.989492,.989934,.990367,.990793,.991211,.991621,.992024,.992420,.992809,.993191,.993565,.993934,.994295,.994650,.994999,.995342,.995679,.996003,.996316,.996618,.996908,.997189,.997459,.997720,.997971,.998214,.998447,.998666,.998871,.999063,.999243,.999405,.999552,.999685,.999804,.999909,1.00000,.203390,.304265,.370973,.420600,.459982,.492535,.520214,.544237,.565418,.584328,.601380,.616885,.631082,.644159,.656265,.667524,.678034,.687881,.697134,.705854,.714108,.721938,.729382,.736472,.743237,.749703,.755890,.761820,.767511,.772978,.778237,.783300,.788180,.792887,.797432,.801824,.806070,.810180,.814160,.818017,.821758,.825389,.828916,.832343,.835675,.838916,.842071,.845142,.848133,.851047,.853889,.856660,.859363,.862001,.864577,.867092,.869549,.871950,.874296,.876591,.878836,.881034,.883185,.885292,.887356,.889378,.891359,.893301,.895205,.897072,.898903,.900700,.902462,.904192,.905890,.907556,.909193,.910800,.912379,.913929,.915454,.916952,.918426,.919875,.921300,.922702,.924082,.925439,.926774,.928089,.929383,.930656,.931910,.933145,.934361,.935559,.936739,.937901,.939046,.940174,.941286,.942382,.943463,.944528,.945579,.946615,.947636,.948644,.949638,.950618,.951585,.952540,.953481,.954410,.955327,.956232,.957125,.958007,.958877,.959736,.960584,.961421,.962247,.963063,.963868,.964663,.965448,.966223,.966988,.967744,.968490,.969228,.969956,.970675,.971385,.972087,.972781,.973466,.974143,.974812,.975472,.976123,.976767,.977402,.978028,.978647,.979258,.979861,.980457,.981045,.981626,.982199,.982766,.983325,.983878,.984423,.984962,.985495,.986020,.986540,.987050,.987552,.988045,.988530,.989006,.989474,.989934,.990386,.990831,.991268,.991698,.992120,.992535,.992944,.993345,.993740,.994128,.994509,.994884,.995253,.995610,.995954,.996286,.996606,.996916,.997214,.997503,.997782,.998051,.998311,.998554,.998782,.998995,.999195,.999374,.999533,.999676,.999804,.999911,1.00000,.200711,.300315,.366220,.415278,.454231,.486448,.513856,.537659,.558658,.577416,.594340,.609738,.623846,.636847,.648891,.660097,.670565,.680378,.689604,.698304,.706543,.714364,.721804,.728894,.735663,.742135,.748333,.754276,.759983,.765469,.770749,.775835,.780740,.785474,.790047,.794469,.798747,.802889,.806903,.810795,.814573,.818241,.821806,.825272,.828643,.831924,.835119,.838231,.841263,.844220,.847104,.849918,.852664,.855346,.857966,.860525,.863027,.865473,.867865,.870205,.872495,.874739,.876936,.879088,.881198,.883266,.885293,.887281,.889231,.891144,.893021,.894864,.896673,.898448,.900192,.901905,.903588,.905241,.906865,.908462,.910032,.911577,.913096,.914591,.916062,.917510,.918935,.920338,.921720,.923080,.924419,.925739,.927038,.928319,.929580,.930823,.932048,.933256,.934446,.935619,.936776,.937917,.939043,.940154,.941249,.942331,.943398,.944451,.945490,.946516,.947528,.948528,.949515,.950489,.951451,.952402,.953340,.954267,.955183,.956087,.956980,.957863,.958735,.959597,.960448,.961290,.962121,.962943,.963756,.964559,.965353,.966137,.966913,.967680,.968439,.969189,.969931,.970664,.971389,.972107,.972815,.973516,.974209,.974893,.975570,.976239,.976900,.977554,.978200,.978839,.979471,.980096,.980714,.981325,.981929,.982527,.983118,.983702,.984280,.984852,.985415,.985969,.986513,.987050,.987577,.988096,.988608,.989111,.989606,.990093,.990573,.991045,.991509,.991967,.992417,.992861,.993297,.993727,.994150,.994567,.994970,.995360,.995738,.996104,.996457,.996800,.997131,.997452,.997762,.998063,.998346,.998611,.998861,.999096,.999304,.999489,.999654,.999800,.999913,1.00000,.199462,.298464,.363982,.412762,.451500,.483546,.510813,.534498,.555396,.574068,.590918,.606250,.620300,.633251,.645250,.656417,.666850,.676632,.685831,.694506,.702724,.710526,.717949,.725025,.731782,.738244,.744434,.750370,.756071,.761553,.766830,.771914,.776818,.781552,.786127,.790551,.794832,.798978,.802996,.806893,.810676,.814351,.817923,.821397,.824777,.828067,.831272,.834394,.837438,.840406,.843302,.846128,.848887,.851582,.854215,.856788,.859304,.861764,.864171,.866526,.868832,.871091,.873304,.875473,.877600,.879684,.881729,.883735,.885702,.887634,.889529,.891390,.893217,.895012,.896775,.898507,.900209,.901882,.903526,.905143,.906733,.908298,.909838,.911353,.912846,.914315,.915761,.917185,.918588,.919970,.921332,.922673,.923995,.925298,.926581,.927847,.929095,.930325,.931538,.932734,.933914,.935079,.936228,.937363,.938482,.939587,.940678,.941756,.942819,.943870,.944907,.945932,.946943,.947943,.948930,.949906,.950870,.951822,.952763,.953693,.954612,.955521,.956419,.957307,.958185,.959053,.959912,.960761,.961600,.962431,.963252,.964064,.964868,.965662,.966449,.967227,.967996,.968758,.969511,.970257,.970994,.971724,.972446,.973159,.973865,.974564,.975255,.975939,.976615,.977285,.977947,.978603,.979251,.979893,.980529,.981158,.981780,.982396,.983006,.983610,.984204,.984791,.985368,.985937,.986498,.987051,.987596,.988134,.988663,.989185,.989699,.990206,.990706,.991199,.991685,.992164,.992636,.993102,.993561,.994014,.994453,.994879,.995292,.995693,.996082,.996460,.996826,.997181,.997526,.997861,.998176,.998472,.998752,.999015,.999248,.999454,.999636,.999797,.999914,1.00000,.198601,.297183,.362430,.411012,.449597,.481518,.508682,.532278,.553101,.571707,.588498,.603779,.617783,.630693,.642655,.653788,.664190,.673944,.683118,.691770,.699967,.707752,.715159,.722221,.728966,.735418,.741599,.747528,.753224,.758701,.763974,.769056,.773958,.778692,.783267,.787691,.791974,.796123,.800144,.804045,.807832,.811512,.815090,.818569,.821955,.825252,.828463,.831593,.834644,.837620,.840524,.843358,.846126,.848830,.851472,.854054,.856580,.859050,.861466,.863831,.866148,.868418,.870642,.872822,.874959,.877056,.879112,.881130,.883110,.885053,.886961,.888834,.890674,.892482,.894258,.896003,.897718,.899404,.901062,.902692,.904296,.905875,.907429,.908959,.910466,.911949,.913410,.914849,.916267,.917664,.919041,.920397,.921734,.923052,.924352,.925633,.926896,.928142,.929371,.930583,.931779,.932960,.934126,.935277,.936413,.937535,.938643,.939737,.940818,.941885,.942940,.943982,.945011,.946028,.947033,.948027,.949008,.949979,.950938,.951886,.952823,.953750,.954667,.955574,.956470,.957357,.958235,.959103,.959962,.960811,.961652,.962484,.963307,.964121,.964927,.965725,.966515,.967296,.968070,.968836,.969594,.970344,.971086,.971821,.972548,.973268,.973980,.974686,.975384,.976076,.976760,.977438,.978109,.978773,.979432,.980083,.980729,.981368,.982001,.982628,.983246,.983856,.984458,.985052,.985638,.986216,.986786,.987349,.987905,.988453,.988993,.989527,.990054,.990573,.991087,.991593,.992093,.992586,.993073,.993554,.994021,.994475,.994917,.995346,.995763,.996169,.996564,.996947,.997320,.997683,.998025,.998348,.998654,.998942,.999196,.999420,.999619,.999793,.999915,1.00000,.197844,.296068,.361090,.409513,.447978,.479807,.506896,.530432,.551206,.569770,.586528,.601781,.615762,.628653,.640599,.651720,.662113,.671859,.681027,.689676,.697871,.705654,.713060,.720122,.726867,.733319,.739501,.745432,.751130,.756609,.761885,.766970,.771876,.776613,.781192,.785620,.789908,.794061,.798087,.801993,.805785,.809470,.813053,.816538,.819929,.823232,.826449,.829584,.832641,.835623,.838533,.841374,.844148,.846859,.849507,.852096,.854628,.857105,.859528,.861900,.864223,.866500,.868731,.870918,.873063,.875166,.877229,.879254,.881241,.883192,.885108,.886988,.888836,.890651,.892435,.894187,.895910,.897604,.899269,.900907,.902519,.904106,.905668,.907206,.908721,.910213,.911682,.913130,.914557,.915962,.917348,.918713,.920059,.921387,.922695,.923986,.925258,.926514,.927752,.928973,.930179,.931370,.932546,.933707,.934853,.935986,.937105,.938210,.939301,.940380,.941446,.942499,.943540,.944569,.945586,.946591,.947584,.948567,.949538,.950498,.951448,.952388,.953318,.954237,.955147,.956048,.956939,.957821,.958693,.959557,.960412,.961258,.962096,.962925,.963746,.964559,.965363,.966160,.966949,.967731,.968504,.969270,.970028,.970778,.971521,.972257,.972985,.973706,.974420,.975127,.975828,.976521,.977208,.977889,.978563,.979230,.979891,.980546,.981195,.981838,.982473,.983100,.983718,.984329,.984933,.985528,.986116,.986697,.987271,.987838,.988397,.988950,.989496,.990035,.990567,.991093,.991613,.992126,.992633,.993134,.993623,.994099,.994563,.995016,.995457,.995888,.996308,.996717,.997116,.997505,.997874,.998224,.998555,.998869,.999145,.999388,.999602,.999790,.999916,1.00000,.196822,.294556,.359264,.407462,.445755,.477447,.504424,.527867,.548563,.567060,.583761,.598964,.612902,.625755,.637668,.648761,.659129,.668853,.678003,.686635,.694816,.702586,.709982,.717035,.723772,.730217,.736394,.742320,.748014,.753491,.758765,.763849,.768754,.773492,.778071,.782502,.786791,.790947,.794976,.798885,.802682,.806371,.809959,.813449,.816846,.820155,.823378,.826520,.829585,.832574,.835492,.838341,.841123,.843842,.846499,.849097,.851638,.854124,.856556,.858938,.861271,.863557,.865799,.867996,.870152,.872266,.874340,.876376,.878375,.880337,.882264,.884157,.886016,.887843,.889639,.891403,.893139,.894845,.896523,.898173,.899798,.901397,.902973,.904524,.906052,.907557,.909040,.910502,.911942,.913362,.914761,.916141,.917502,.918843,.920166,.921471,.922758,.924028,.925282,.926518,.927739,.928945,.930136,.931313,.932475,.933623,.934758,.935879,.936987,.938082,.939165,.940235,.941292,.942338,.943372,.944394,.945405,.946405,.947393,.948371,.949339,.950297,.951245,.952183,.953112,.954032,.954942,.955843,.956736,.957620,.958495,.959361,.960219,.961069,.961911,.962745,.963571,.964390,.965200,.966004,.966799,.967587,.968368,.969142,.969908,.970667,.971419,.972165,.972903,.973635,.974361,.975080,.975792,.976498,.977198,.977892,.978579,.979261,.979937,.980607,.981269,.981923,.982570,.983210,.983842,.984466,.985084,.985695,.986299,.986895,.987486,.988069,.988646,.989217,.989781,.990339,.990891,.991436,.991976,.992510,.993032,.993542,.994040,.994528,.995004,.995470,.995926,.996372,.996807,.997233,.997639,.998025,.998393,.998744,.999054,.999328,.999569,.999783,.999917,1.00000,.196160,.293574,.358076,.406125,.444302,.475901,.502802,.526181,.546821,.565270,.581929,.597096,.611001,.623826,.635714,.646783,.657131,.666837,.675970,.684588,.692756,.700514,.707900,.714944,.721673,.728112,.734283,.740204,.745894,.751368,.756639,.761721,.766625,.771362,.775942,.780372,.784662,.788820,.792850,.796762,.800561,.804253,.807843,.811337,.814738,.818050,.821277,.824424,.827493,.830487,.833409,.836263,.839050,.841774,.844436,.847040,.849586,.852078,.854517,.856904,.859244,.861536,.863784,.865988,.868150,.870271,.872352,.874395,.876401,.878370,.880304,.882204,.884071,.885906,.887709,.889481,.891224,.892938,.894624,.896282,.897914,.899522,.901106,.902665,.904202,.905715,.907207,.908677,.910126,.911555,.912963,.914352,.915722,.917072,.918405,.919719,.921016,.922295,.923558,.924804,.926035,.927250,.928451,.929638,.930810,.931969,.933114,.934246,.935365,.936471,.937564,.938645,.939714,.940770,.941816,.942849,.943872,.944883,.945883,.946873,.947852,.948822,.949782,.950733,.951674,.952606,.953529,.954443,.955349,.956245,.957133,.958013,.958885,.959748,.960604,.961451,.962291,.963123,.963948,.964765,.965575,.966378,.967173,.967961,.968743,.969517,.970285,.971046,.971801,.972549,.973291,.974026,.974755,.975478,.976195,.976906,.977611,.978310,.979004,.979691,.980372,.981045,.981711,.982369,.983021,.983666,.984304,.984936,.985560,.986179,.986791,.987396,.987995,.988589,.989176,.989757,.990332,.990901,.991464,.992022,.992569,.993104,.993628,.994142,.994645,.995138,.995621,.996095,.996558,.997013,.997447,.997863,.998260,.998640,.998977,.999277,.999542,.999777,.999917,1.00000][]
	# Z=54
	      Z54=[.148794,.223487,.273479,.311122,.341356,.366651,.388418,.407540,.424604,.440024,.454097,.467048,.479050,.490240,.500725,.510593,.519918,.528760,.537170,.545191,.552859,.560206,.567261,.574047,.580587,.586899,.593000,.598907,.604631,.610185,.615581,.620828,.625935,.630911,.635763,.640499,.645124,.649644,.654065,.658392,.662629,.666780,.670849,.674840,.678757,.682602,.686379,.690091,.693740,.697329,.700861,.704337,.707760,.711131,.714453,.717728,.720957,.724142,.727284,.730385,.733446,.736468,.739452,.742400,.745313,.748192,.751037,.753851,.756633,.759386,.762109,.764803,.767470,.770110,.772724,.775313,.777876,.780416,.782933,.785426,.787897,.790347,.792775,.795183,.797570,.799937,.802285,.804615,.806926,.809219,.811495,.813754,.815996,.818222,.820431,.822626,.824805,.826969,.829118,.831254,.833375,.835483,.837578,.839660,.841729,.843785,.845830,.847862,.849883,.851893,.853891,.855878,.857854,.859820,.861776,.863721,.865656,.867582,.869498,.871405,.873302,.875190,.877070,.878940,.880802,.882655,.884501,.886338,.888167,.889988,.891801,.893607,.895405,.897197,.898980,.900757,.902527,.904290,.906047,.907797,.909538,.911272,.912998,.914716,.916426,.918129,.919825,.921513,.923194,.924868,.926534,.928194,.929848,.931494,.933134,.934768,.936395,.938015,.939630,.941238,.942839,.944431,.946016,.947593,.949163,.950725,.952280,.953828,.955368,.956902,.958428,.959948,.961460,.962966,.964465,.965958,.967444,.968924,.970397,.971864,.973325,.974779,.976228,.977670,.979106,.980537,.981961,.983380,.984793,.986201,.987604,.989002,.990396,.991785,.993169,.994546,.995918,.997284,.998645,1.00000,.153738,.230836,.282387,.321165,.352280,.378286,.400643,.420264,.437756,.453546,.467943,.481180,.493434,.504847,.515531,.525577,.535060,.544043,.552579,.560711,.568480,.575917,.583052,.589910,.596513,.602882,.609032,.614980,.620741,.626326,.631746,.637013,.642136,.647122,.651981,.656718,.661341,.665856,.670268,.674583,.678804,.682938,.686987,.690956,.694848,.698667,.702415,.706097,.709713,.713268,.716764,.720202,.723586,.726917,.730196,.733427,.736610,.739748,.742842,.745893,.748903,.751873,.754804,.757698,.760556,.763378,.766166,.768922,.771645,.774338,.777000,.779633,.782237,.784813,.787363,.789886,.792384,.794857,.797306,.799731,.802133,.804512,.806870,.809205,.811520,.813814,.816088,.818342,.820578,.822795,.824993,.827174,.829337,.831483,.833613,.835726,.837823,.839905,.841971,.844023,.846060,.848081,.850089,.852082,.854062,.856028,.857981,.859920,.861847,.863762,.865664,.867555,.869433,.871300,.873155,.875000,.876833,.878655,.880467,.882269,.884060,.885840,.887610,.889369,.891119,.892858,.894588,.896308,.898019,.899720,.901413,.903096,.904771,.906436,.908094,.909742,.911383,.913015,.914640,.916256,.917864,.919463,.921054,.922637,.924211,.925778,.927336,.928887,.930430,.931965,.933493,.935014,.936527,.938033,.939532,.941024,.942509,.943987,.945459,.946923,.948381,.949831,.951273,.952709,.954137,.955558,.956972,.958379,.959779,.961173,.962560,.963940,.965314,.966682,.968043,.969398,.970746,.972089,.973425,.974756,.976079,.977395,.978704,.980007,.981302,.982591,.983873,.985148,.986417,.987680,.988935,.990184,.991425,.992660,.993892,.995120,.996346,.997568,.998786,1.00000,.158046,.237329,.290358,.330260,.362288,.389065,.412092,.432308,.450336,.466615,.481462,.495117,.507764,.519545,.530577,.540954,.550753,.560037,.568862,.577274,.585304,.592988,.600355,.607433,.614245,.620810,.627148,.633274,.639203,.644949,.650523,.655935,.661197,.666316,.671301,.676160,.680898,.685524,.690041,.694457,.698772,.702991,.707120,.711161,.715120,.718999,.722801,.726532,.730192,.733785,.737314,.740780,.744187,.747537,.750832,.754073,.757263,.760403,.763495,.766541,.769541,.772496,.775408,.778279,.781109,.783900,.786653,.789369,.792049,.794694,.797306,.799884,.802431,.804947,.807432,.809888,.812315,.814714,.817086,.819431,.821750,.824044,.826313,.828557,.830777,.832975,.835149,.837302,.839433,.841542,.843631,.845700,.847749,.849778,.851789,.853781,.855755,.857711,.859649,.861570,.863475,.865363,.867234,.869090,.870930,.872754,.874564,.876358,.878138,.879904,.881656,.883394,.885119,.886831,.888529,.890215,.891888,.893548,.895197,.896833,.898458,.900071,.901672,.903262,.904841,.906409,.907967,.909513,.911049,.912575,.914091,.915597,.917093,.918579,.920056,.921523,.922982,.924431,.925871,.927302,.928724,.930137,.931542,.932937,.934325,.935703,.937074,.938436,.939790,.941136,.942474,.943805,.945127,.946442,.947750,.949050,.950343,.951629,.952908,.954179,.955444,.956701,.957952,.959195,.960432,.961662,.962886,.964102,.965313,.966517,.967714,.968906,.970091,.971270,.972443,.973610,.974771,.975926,.977075,.978219,.979357,.980490,.981617,.982739,.983856,.984967,.986073,.987174,.988270,.989360,.990446,.991527,.992603,.993675,.994742,.995803,.996860,.997913,.998959,1.00000,.162678,.244255,.298799,.339827,.372746,.400258,.423909,.444664,.463167,.479869,.495096,.509096,.522056,.534126,.545425,.556048,.566076,.575574,.584598,.593197,.601400,.609242,.616756,.623969,.630905,.637585,.644029,.650252,.656271,.662099,.667748,.673230,.678554,.683731,.688767,.693672,.698453,.703115,.707665,.712109,.716446,.720683,.724824,.728873,.732835,.736712,.740509,.744229,.747875,.751451,.754958,.758400,.761779,.765097,.768357,.771560,.774709,.777806,.780851,.783848,.786796,.789696,.792550,.795361,.798128,.800853,.803537,.806183,.808790,.811360,.813894,.816394,.818858,.821290,.823690,.826058,.828396,.830703,.832982,.835232,.837455,.839650,.841819,.843962,.846080,.848174,.850243,.852289,.854312,.856312,.858291,.860248,.862184,.864099,.865995,.867870,.869726,.871564,.873382,.875183,.876966,.878731,.880480,.882211,.883926,.885625,.887309,.888976,.890629,.892266,.893889,.895497,.897091,.898671,.900238,.901791,.903330,.904857,.906371,.907873,.909362,.910839,.912304,.913758,.915200,.916630,.918050,.919459,.920857,.922244,.923621,.924987,.926343,.927690,.929026,.930353,.931670,.932978,.934276,.935566,.936846,.938117,.939380,.940634,.941879,.943116,.944344,.945565,.946777,.947981,.949177,.950365,.951546,.952719,.953885,.955043,.956194,.957338,.958474,.959604,.960727,.961843,.962952,.964055,.965151,.966241,.967325,.968402,.969473,.970538,.971597,.972650,.973697,.974738,.975774,.976804,.977828,.978846,.979859,.980867,.981869,.982866,.983859,.984846,.985828,.986806,.987778,.988746,.989709,.990667,.991621,.992570,.993514,.994454,.995390,.996321,.997248,.998170,.999087,1.00000,.169670,.254624,.311341,.353938,.388064,.416543,.440987,.462407,.481473,.498657,.514301,.528661,.541936,.554279,.565816,.576648,.586856,.596511,.605671,.614385,.622686,.630612,.638196,.645465,.652446,.659159,.665626,.671864,.677888,.683712,.689351,.694814,.700113,.705258,.710257,.715119,.719850,.724458,.728950,.733330,.737600,.741766,.745832,.749803,.753684,.757477,.761187,.764818,.768372,.771853,.775263,.778605,.781882,.785097,.788250,.791346,.794385,.797369,.800301,.803182,.806013,.808796,.811531,.814220,.816866,.819468,.822029,.824549,.827030,.829473,.831879,.834249,.836584,.838885,.841153,.843389,.845593,.847767,.849910,.852025,.854111,.856170,.858202,.860208,.862188,.864143,.866073,.867979,.869863,.871723,.873561,.875377,.877172,.878945,.880699,.882432,.884145,.885840,.887515,.889172,.890811,.892433,.894037,.895625,.897196,.898750,.900289,.901812,.903320,.904813,.906290,.907754,.909203,.910638,.912059,.913467,.914862,.916243,.917612,.918968,.920311,.921643,.922963,.924272,.925568,.926854,.928129,.929392,.930645,.931888,.933120,.934342,.935553,.936755,.937947,.939130,.940303,.941466,.942620,.943766,.944902,.946030,.947149,.948260,.949362,.950457,.951543,.952621,.953692,.954755,.955810,.956857,.957897,.958930,.959956,.960974,.961985,.962989,.963987,.964977,.965961,.966939,.967910,.968875,.969834,.970787,.971734,.972674,.973609,.974538,.975461,.976378,.977290,.978197,.979097,.979993,.980883,.981767,.982646,.983521,.984390,.985254,.986113,.986967,.987816,.988660,.989500,.990335,.991165,.991990,.992811,.993627,.994438,.995245,.996047,.996846,.997640,.998430,.999216,1.00000,.182359,.273329,.333836,.379112,.415250,.445295,.470990,.493420,.513313,.531175,.547376,.562193,.575839,.588481,.600253,.611263,.621603,.631345,.640554,.649282,.657575,.665472,.673007,.680212,.687112,.693731,.700090,.706207,.712100,.717782,.723268,.728570,.733699,.738666,.743479,.748147,.752679,.757081,.761359,.765521,.769572,.773517,.777361,.781109,.784765,.788333,.791817,.795220,.798546,.801797,.804978,.808090,.811135,.814118,.817039,.819901,.822707,.825457,.828155,.830801,.833398,.835946,.838449,.840907,.843321,.845693,.848024,.850316,.852569,.854784,.856964,.859108,.861217,.863294,.865338,.867350,.869331,.871283,.873205,.875099,.876965,.878804,.880617,.882404,.884166,.885904,.887617,.889308,.890976,.892621,.894244,.895847,.897428,.898989,.900530,.902052,.903554,.905038,.906503,.907951,.909381,.910794,.912190,.913570,.914933,.916281,.917614,.918931,.920233,.921521,.922795,.924054,.925299,.926531,.927750,.928955,.930148,.931328,.932495,.933651,.934794,.935926,.937047,.938156,.939254,.940342,.941419,.942485,.943541,.944587,.945623,.946649,.947666,.948672,.949670,.950658,.951637,.952607,.953569,.954521,.955465,.956401,.957330,.958250,.959162,.960067,.960964,.961853,.962735,.963610,.964478,.965338,.966192,.967039,.967879,.968712,.969538,.970358,.971172,.971979,.972780,.973575,.974364,.975147,.975925,.976696,.977462,.978223,.978978,.979727,.980472,.981211,.981944,.982673,.983396,.984114,.984828,.985536,.986239,.986938,.987632,.988321,.989007,.989687,.990364,.991036,.991704,.992367,.993027,.993682,.994334,.994981,.995624,.996264,.996898,.997527,.998152,.998771,.999387,1.00000,.188639,.282701,.345237,.392010,.429327,.460339,.486848,.509980,.530486,.548890,.565576,.580829,.594870,.607873,.619976,.631291,.641911,.651914,.661365,.670319,.678808,.686874,.694556,.701884,.708888,.715592,.722019,.728189,.734119,.739826,.745324,.750627,.755746,.760691,.765474,.770104,.774588,.778934,.783150,.787243,.791218,.795081,.798838,.802493,.806051,.809517,.812894,.816186,.819396,.822529,.825587,.828572,.831489,.834339,.837125,.839849,.842513,.845120,.847672,.850170,.852617,.855016,.857367,.859673,.861934,.864153,.866330,.868466,.870563,.872623,.874645,.876632,.878584,.880502,.882387,.884239,.886061,.887853,.889615,.891348,.893053,.894733,.896386,.898014,.899618,.901197,.902753,.904286,.905797,.907286,.908753,.910199,.911626,.913032,.914418,.915785,.917134,.918464,.919777,.921072,.922350,.923611,.924857,.926086,.927300,.928499,.929683,.930853,.932008,.933148,.934276,.935389,.936489,.937577,.938651,.939713,.940762,.941799,.942825,.943838,.944841,.945832,.946813,.947783,.948742,.949691,.950630,.951559,.952479,.953388,.954289,.955179,.956061,.956934,.957797,.958652,.959499,.960337,.961166,.961987,.962801,.963606,.964404,.965194,.965977,.966752,.967520,.968281,.969035,.969781,.970521,.971255,.971981,.972701,.973414,.974121,.974822,.975517,.976205,.976887,.977563,.978233,.978898,.979556,.980209,.980856,.981498,.982134,.982764,.983389,.984009,.984624,.985233,.985837,.986437,.987031,.987620,.988205,.988784,.989359,.989930,.990496,.991058,.991616,.992169,.992719,.993264,.993806,.994343,.994876,.995406,.995932,.996454,.996973,.997487,.997998,.998505,.999008,.999506,1.00000,.199724,.298959,.364702,.413699,.452652,.484909,.512384,.536274,.557377,.576250,.593300,.608831,.623077,.636223,.648416,.659775,.670399,.680369,.689756,.698617,.707005,.714963,.722528,.729733,.736608,.743179,.749467,.755493,.761276,.766833,.772177,.777322,.782281,.787065,.791683,.796146,.800462,.804639,.808683,.812602,.816404,.820093,.823675,.827155,.830538,.833828,.837030,.840146,.843181,.846137,.849019,.851829,.854570,.857244,.859854,.862402,.864892,.867324,.869700,.872024,.874296,.876520,.878697,.880827,.882913,.884956,.886958,.888919,.890842,.892726,.894573,.896385,.898162,.899905,.901616,.903295,.904943,.906560,.908149,.909709,.911242,.912748,.914229,.915684,.917115,.918522,.919906,.921267,.922606,.923924,.925220,.926495,.927751,.928986,.930203,.931400,.932579,.933741,.934884,.936011,.937120,.938214,.939292,.940354,.941402,.942434,.943452,.944456,.945446,.946422,.947384,.948334,.949270,.950194,.951106,.952005,.952892,.953768,.954632,.955485,.956327,.957158,.957979,.958789,.959589,.960380,.961160,.961931,.962692,.963444,.964187,.964921,.965646,.966363,.967071,.967770,.968461,.969144,.969819,.970486,.971146,.971798,.972443,.973081,.973711,.974335,.974952,.975562,.976165,.976762,.977352,.977936,.978514,.979085,.979651,.980210,.980763,.981311,.981853,.982389,.982919,.983445,.983965,.984479,.984988,.985493,.985992,.986486,.986975,.987459,.987938,.988413,.988883,.989349,.989809,.990266,.990718,.991165,.991608,.992047,.992482,.992912,.993338,.993761,.994179,.994593,.995003,.995410,.995812,.996211,.996606,.996997,.997384,.997768,.998148,.998525,.998898,.999268,.999636,1.00000,.212592,.317851,.387341,.438949,.479834,.513573,.542209,.567023,.588864,.608329,.625852,.641759,.656298,.669668,.682025,.693496,.704188,.714187,.723567,.732392,.740721,.748601,.756071,.763165,.769915,.776348,.782487,.788354,.793968,.799346,.804505,.809457,.814217,.818796,.823203,.827451,.831546,.835498,.839315,.843003,.846571,.850026,.853372,.856616,.859762,.862814,.865776,.868653,.871448,.874165,.876806,.879375,.881876,.884309,.886679,.888988,.891237,.893429,.895567,.897651,.899686,.901673,.903613,.905508,.907360,.909170,.910940,.912670,.914362,.916017,.917636,.919221,.920772,.922291,.923777,.925233,.926660,.928057,.929426,.930767,.932083,.933372,.934638,.935878,.937096,.938290,.939463,.940613,.941742,.942851,.943940,.945008,.946058,.947089,.948102,.949097,.950074,.951034,.951978,.952906,.953818,.954714,.955596,.956463,.957315,.958153,.958978,.959789,.960587,.961372,.962144,.962905,.963653,.964389,.965113,.965826,.966529,.967220,.967900,.968570,.969230,.969879,.970518,.971148,.971768,.972378,.972979,.973571,.974154,.974729,.975294,.975852,.976401,.976942,.977475,.978000,.978518,.979028,.979530,.980026,.980514,.980995,.981469,.981936,.982397,.982851,.983298,.983739,.984174,.984603,.985025,.985442,.985853,.986258,.986657,.987051,.987439,.987822,.988200,.988573,.988940,.989302,.989660,.990012,.990359,.990702,.991040,.991374,.991703,.992027,.992347,.992663,.992975,.993282,.993585,.993884,.994180,.994471,.994758,.995042,.995322,.995598,.995871,.996140,.996405,.996667,.996926,.997181,.997433,.997682,.997927,.998170,.998409,.998645,.998879,.999109,.999336,.999560,.999782,1.00000,.217321,.324790,.395650,.448213,.489802,.524080,.553138,.578286,.600394,.620073,.637768,.653809,.668455,.681905,.694321,.705833,.716550,.726560,.735939,.744751,.753061,.760915,.768353,.775411,.782120,.788507,.794596,.800410,.805969,.811288,.816386,.821275,.825969,.830481,.834820,.838996,.843020,.846899,.850642,.854255,.857747,.861126,.864396,.867563,.870631,.873605,.876490,.879289,.882005,.884644,.887207,.889698,.892120,.894475,.896767,.898997,.901168,.903283,.905342,.907350,.909307,.911216,.913078,.914896,.916670,.918402,.920094,.921746,.923361,.924938,.926480,.927988,.929462,.930904,.932314,.933693,.935043,.936365,.937658,.938924,.940164,.941378,.942567,.943733,.944874,.945993,.947090,.948165,.949219,.950252,.951266,.952260,.953234,.954190,.955129,.956049,.956952,.957839,.958709,.959563,.960401,.961224,.962032,.962825,.963604,.964369,.965120,.965858,.966583,.967295,.967995,.968682,.969358,.970022,.970674,.971315,.971946,.972565,.973174,.973773,.974362,.974940,.975509,.976068,.976617,.977157,.977688,.978210,.978723,.979228,.979724,.980213,.980693,.981165,.981630,.982086,.982536,.982978,.983413,.983841,.984262,.984676,.985083,.985483,.985877,.986265,.986646,.987020,.987389,.987752,.988109,.988460,.988805,.989145,.989480,.989809,.990133,.990452,.990765,.991074,.991378,.991676,.991970,.992258,.992542,.992821,.993096,.993366,.993631,.993893,.994150,.994402,.994651,.994895,.995136,.995372,.995605,.995834,.996060,.996281,.996499,.996713,.996924,.997131,.997334,.997534,.997731,.997924,.998114,.998300,.998484,.998664,.998842,.999016,.999187,.999355,.999521,.999683,.999843,1.00000,.216957,.324254,.395007,.447493,.489026,.523259,.552282,.577401,.599485,.619145,.636823,.652852,.667486,.680927,.693335,.704841,.715553,.725559,.734935,.743746,.752056,.759913,.767356,.774421,.781139,.787536,.793637,.799464,.805037,.810371,.815485,.820391,.825103,.829633,.833991,.838187,.842231,.846131,.849894,.853528,.857043,.860442,.863734,.866922,.870011,.873006,.875912,.878731,.881469,.884128,.886711,.889222,.891665,.894040,.896352,.898602,.900793,.902927,.905006,.907032,.909009,.910937,.912818,.914654,.916446,.918197,.919906,.921576,.923208,.924803,.926362,.927887,.929378,.930836,.932263,.933659,.935025,.936362,.937671,.938952,.940207,.941437,.942642,.943822,.944979,.946112,.947224,.948313,.949381,.950429,.951456,.952464,.953452,.954422,.955374,.956308,.957224,.958124,.959007,.959874,.960725,.961560,.962380,.963186,.963976,.964753,.965516,.966265,.967001,.967724,.968434,.969132,.969818,.970492,.971154,.971806,.972445,.973075,.973693,.974301,.974898,.975485,.976062,.976628,.977185,.977732,.978270,.978798,.979318,.979828,.980330,.980823,.981308,.981785,.982254,.982715,.983169,.983615,.984053,.984484,.984908,.985324,.985733,.986135,.986530,.986918,.987299,.987674,.988042,.988404,.988760,.989110,.989454,.989792,.990124,.990451,.990772,.991088,.991398,.991703,.992003,.992297,.992585,.992867,.993144,.993416,.993683,.993944,.994201,.994453,.994700,.994942,.995180,.995413,.995642,.995867,.996088,.996304,.996516,.996725,.996928,.997127,.997322,.997512,.997698,.997879,.998056,.998230,.998399,.998565,.998726,.998883,.999036,.999186,.999331,.999472,.999609,.999743,.999873,1.00000,.215578,.322216,.392549,.444735,.486039,.520091,.548967,.573963,.595945,.615517,.633121,.649084,.663663,.677056,.689422,.700892,.711571,.721550,.730903,.739693,.747988,.755834,.763270,.770332,.777049,.783449,.789555,.795390,.800972,.806319,.811447,.816368,.821098,.825646,.830024,.834241,.838307,.842230,.846017,.849676,.853216,.856643,.859962,.863179,.866298,.869323,.872259,.875111,.877880,.880572,.883188,.885733,.888209,.890619,.892965,.895250,.897476,.899645,.901760,.903822,.905835,.907799,.909716,.911588,.913417,.915204,.916950,.918657,.920326,.921957,.923553,.925114,.926642,.928136,.929599,.931032,.932434,.933808,.935153,.936471,.937762,.939028,.940268,.941484,.942676,.943845,.944991,.946116,.947219,.948301,.949363,.950405,.951427,.952431,.953416,.954384,.955333,.956266,.957182,.958082,.958965,.959833,.960685,.961522,.962345,.963153,.963947,.964728,.965495,.966249,.966990,.967718,.968434,.969138,.969831,.970512,.971181,.971839,.972487,.973124,.973750,.974366,.974971,.975565,.976150,.976725,.977291,.977847,.978393,.978931,.979460,.979980,.980492,.980995,.981490,.981977,.982457,.982928,.983392,.983849,.984298,.984739,.985172,.985597,.986016,.986427,.986831,.987228,.987619,.988003,.988380,.988751,.989116,.989474,.989827,.990173,.990514,.990849,.991178,.991503,.991820,.992131,.992436,.992734,.993027,.993313,.993594,.993869,.994139,.994403,.994662,.994915,.995164,.995408,.995647,.995881,.996110,.996335,.996556,.996772,.996982,.997187,.997386,.997580,.997768,.997952,.998131,.998305,.998474,.998638,.998798,.998951,.999100,.999243,.999381,.999514,.999642,.999766,.999885,1.00000,.214186,.320160,.390071,.441957,.483031,.516903,.545632,.570507,.592388,.611874,.629405,.645306,.659831,.673177,.685504,.696939,.707589,.717543,.726874,.735646,.743927,.751764,.759194,.766253,.772971,.779375,.785488,.791331,.796923,.802283,.807424,.812361,.817108,.821674,.826072,.830310,.834398,.838344,.842155,.845838,.849404,.852857,.856202,.859446,.862593,.865647,.868612,.871493,.874292,.877014,.879661,.882237,.884744,.887185,.889563,.891880,.894138,.896339,.898487,.900581,.902626,.904623,.906573,.908479,.910341,.912161,.913940,.915680,.917382,.919047,.920677,.922271,.923832,.925360,.926857,.928323,.929758,.931165,.932544,.933895,.935219,.936518,.937791,.939040,.940266,.941467,.942647,.943804,.944939,.946054,.947148,.948223,.949277,.950313,.951331,.952330,.953312,.954276,.955224,.956155,.957070,.957969,.958852,.959720,.960573,.961412,.962237,.963048,.963845,.964629,.965399,.966158,.966903,.967637,.968358,.969068,.969766,.970453,.971129,.971795,.972449,.973092,.973725,.974348,.974960,.975562,.976155,.976738,.977311,.977875,.978431,.978977,.979515,.980044,.980565,.981077,.981582,.982079,.982568,.983049,.983523,.983988,.984445,.984895,.985337,.985771,.986198,.986618,.987031,.987438,.987837,.988230,.988616,.988996,.989370,.989738,.990099,.990455,.990805,.991149,.991486,.991817,.992140,.992457,.992767,.993070,.993368,.993659,.993945,.994224,.994498,.994767,.995030,.995287,.995540,.995787,.996029,.996266,.996499,.996727,.996948,.997163,.997371,.997572,.997768,.997958,.998142,.998321,.998495,.998663,.998824,.998979,.999128,.999270,.999406,.999536,.999660,.999777,.999891,1.00000,.212956,.318342,.387880,.439499,.480371,.514082,.542681,.567448,.589238,.608649,.626113,.641959,.656435,.669740,.682030,.693435,.704058,.713988,.723300,.732055,.740324,.748152,.755577,.762634,.769352,.775759,.781877,.787727,.793329,.798699,.803853,.808804,.813566,.818149,.822564,.826821,.830929,.834895,.838728,.842433,.846021,.849498,.852867,.856135,.859307,.862386,.865376,.868282,.871108,.873856,.876529,.879132,.881666,.884134,.886539,.888884,.891169,.893399,.895574,.897696,.899769,.901794,.903773,.905706,.907597,.909445,.911253,.913021,.914752,.916445,.918103,.919726,.921316,.922873,.924398,.925892,.927356,.928791,.930198,.931578,.932930,.934257,.935559,.936836,.938089,.939319,.940526,.941711,.942874,.944016,.945138,.946240,.947322,.948385,.949430,.950456,.951465,.952456,.953431,.954389,.955330,.956256,.957165,.958060,.958939,.959804,.960655,.961492,.962314,.963124,.963920,.964704,.965475,.966234,.966980,.967715,.968438,.969150,.969851,.970541,.971219,.971887,.972544,.973191,.973827,.974453,.975069,.975675,.976272,.976860,.977438,.978008,.978568,.979120,.979664,.980199,.980726,.981245,.981756,.982260,.982755,.983242,.983720,.984191,.984655,.985110,.985558,.985999,.986433,.986859,.987279,.987692,.988099,.988498,.988892,.989279,.989660,.990035,.990404,.990767,.991123,.991471,.991812,.992146,.992473,.992793,.993107,.993414,.993715,.994010,.994299,.994582,.994859,.995131,.995397,.995657,.995913,.996163,.996408,.996648,.996881,.997106,.997323,.997534,.997738,.997936,.998127,.998312,.998492,.998665,.998831,.998989,.999140,.999284,.999420,.999548,.999670,.999785,.999895,1.00000,.211809,.316652,.385848,.437225,.477914,.511482,.539967,.564641,.586354,.605700,.623111,.638912,.653350,.666623,.678887,.690270,.700875,.710791,.720091,.728838,.737101,.744926,.752351,.759410,.766132,.772544,.778669,.784528,.790140,.795522,.800689,.805654,.810430,.815028,.819460,.823734,.827859,.831844,.835696,.839421,.843029,.846525,.849916,.853205,.856398,.859499,.862512,.865440,.868288,.871059,.873756,.876382,.878939,.881431,.883860,.886228,.888538,.890791,.892991,.895137,.897235,.899284,.901287,.903245,.905160,.907033,.908865,.910658,.912413,.914131,.915813,.917461,.919075,.920656,.922206,.923724,.925213,.926672,.928104,.929507,.930884,.932235,.933561,.934862,.936139,.937393,.938624,.939832,.941019,.942185,.943331,.944456,.945562,.946648,.947716,.948765,.949797,.950811,.951809,.952789,.953753,.954702,.955634,.956551,.957453,.958341,.959213,.960072,.960918,.961749,.962568,.963373,.964166,.964947,.965715,.966471,.967216,.967950,.968672,.969383,.970083,.970772,.971450,.972118,.972775,.973422,.974059,.974686,.975303,.975911,.976510,.977100,.977681,.978253,.978817,.979372,.979919,.980458,.980989,.981512,.982027,.982533,.983031,.983521,.984003,.984478,.984945,.985405,.985857,.986302,.986740,.987171,.987596,.988014,.988425,.988830,.989228,.989621,.990007,.990388,.990760,.991125,.991482,.991832,.992175,.992511,.992840,.993162,.993478,.993787,.994090,.994386,.994677,.994962,.995241,.995515,.995782,.996045,.996302,.996554,.996798,.997034,.997261,.997481,.997694,.997900,.998098,.998290,.998476,.998656,.998826,.998988,.999142,.999289,.999426,.999555,.999676,.999790,.999898,1.00000,.209828,.313737,.382347,.433311,.473692,.507020,.535314,.559834,.581421,.600663,.617988,.633717,.648097,.661323,.673548,.684899,.695481,.705379,.714666,.723404,.731664,.739489,.746917,.753983,.760715,.767139,.773279,.779156,.784787,.790189,.795378,.800367,.805169,.809794,.814253,.818556,.822712,.826727,.830610,.834368,.838009,.841539,.844964,.848288,.851516,.854652,.857701,.860666,.863551,.866359,.869093,.871757,.874352,.876882,.879349,.881756,.884104,.886396,.888634,.890820,.892956,.895044,.897086,.899084,.901038,.902950,.904822,.906654,.908448,.910206,.911927,.913614,.915267,.916888,.918477,.920034,.921562,.923061,.924531,.925973,.927389,.928779,.930143,.931483,.932799,.934091,.935361,.936608,.937833,.939037,.940221,.941384,.942528,.943652,.944758,.945845,.946914,.947966,.949001,.950018,.951020,.952005,.952975,.953929,.954868,.955792,.956701,.957597,.958479,.959347,.960202,.961043,.961872,.962689,.963493,.964285,.965066,.965835,.966593,.967339,.968074,.968799,.969512,.970214,.970906,.971588,.972260,.972922,.973574,.974216,.974850,.975474,.976089,.976695,.977292,.977881,.978462,.979034,.979599,.980155,.980703,.981242,.981773,.982296,.982811,.983318,.983817,.984309,.984793,.985270,.985740,.986203,.986659,.987108,.987550,.987986,.988416,.988839,.989256,.989667,.990069,.990463,.990850,.991228,.991599,.991963,.992319,.992668,.993010,.993345,.993674,.993996,.994311,.994621,.994924,.995221,.995512,.995798,.996078,.996352,.996617,.996873,.997119,.997357,.997586,.997808,.998021,.998228,.998427,.998619,.998800,.998971,.999133,.999286,.999428,.999560,.999683,.999796,.999902,1.00000,.207253,.309982,.377875,.428353,.468386,.501457,.529558,.553934,.575414,.594578,.611849,.627543,.641905,.655125,.667357,.678725,.689332,.699263,.708589,.717373,.725679,.733553,.741032,.748149,.754934,.761412,.767607,.773538,.779226,.784685,.789931,.794978,.799837,.804521,.809039,.813401,.817616,.821691,.825634,.829451,.833150,.836738,.840219,.843599,.846881,.850071,.853173,.856189,.859125,.861983,.864767,.867479,.870122,.872699,.875212,.877665,.880058,.882395,.884676,.886905,.889084,.891214,.893298,.895336,.897330,.899282,.901193,.903063,.904896,.906690,.908449,.910172,.911861,.913517,.915141,.916733,.918295,.919827,.921330,.922806,.924254,.925677,.927074,.928446,.929794,.931119,.932420,.933700,.934957,.936193,.937409,.938604,.939779,.940935,.942072,.943191,.944292,.945375,.946440,.947489,.948522,.949538,.950539,.951524,.952494,.953450,.954391,.955318,.956231,.957131,.958017,.958891,.959751,.960600,.961435,.962259,.963071,.963872,.964661,.965439,.966206,.966962,.967707,.968441,.969165,.969879,.970582,.971276,.971960,.972634,.973299,.973955,.974602,.975240,.975869,.976490,.977102,.977706,.978302,.978890,.979469,.980039,.980601,.981155,.981701,.982239,.982768,.983290,.983805,.984312,.984812,.985304,.985790,.986268,.986740,.987205,.987663,.988115,.988561,.989000,.989430,.989852,.990265,.990669,.991066,.991454,.991835,.992208,.992573,.992931,.993282,.993626,.993962,.994293,.994616,.994933,.995244,.995549,.995848,.996141,.996423,.996695,.996958,.997211,.997456,.997692,.997919,.998139,.998350,.998555,.998748,.998930,.999102,.999265,.999415,.999553,.999681,.999798,.999904,1.00000,.205091,.306781,.374010,.424011,.463678,.496459,.524322,.548500,.569811,.588832,.605979,.621567,.635835,.648974,.661135,.672441,.682992,.692875,.702159,.710906,.719182,.727030,.734487,.741587,.748359,.754828,.761016,.766944,.772630,.778091,.783342,.788394,.793262,.797956,.802486,.806861,.811090,.815181,.819140,.822976,.826695,.830304,.833808,.837211,.840518,.843734,.846862,.849907,.852871,.855759,.858572,.861315,.863990,.866599,.869145,.871631,.874058,.876429,.878746,.881010,.883225,.885391,.887512,.889587,.891619,.893609,.895559,.897469,.899341,.901176,.902975,.904739,.906469,.908166,.909831,.911465,.913069,.914643,.916189,.917707,.919198,.920664,.922104,.923520,.924912,.926281,.927627,.928951,.930253,.931534,.932795,.934035,.935256,.936457,.937640,.938804,.939951,.941080,.942191,.943286,.944365,.945428,.946475,.947507,.948524,.949526,.950514,.951488,.952448,.953395,.954329,.955250,.956158,.957053,.957937,.958808,.959668,.960516,.961352,.962178,.962992,.963796,.964588,.965370,.966141,.966902,.967653,.968394,.969126,.969848,.970560,.971263,.971957,.972642,.973319,.973986,.974645,.975296,.975939,.976574,.977200,.977817,.978426,.979026,.979619,.980203,.980780,.981348,.981909,.982463,.983009,.983548,.984080,.984604,.985122,.985633,.986138,.986635,.987127,.987612,.988088,.988555,.989014,.989464,.989907,.990341,.990767,.991186,.991597,.992001,.992398,.992787,.993170,.993545,.993914,.994277,.994633,.994982,.995326,.995663,.995989,.996302,.996605,.996896,.997178,.997449,.997710,.997962,.998205,.998439,.998659,.998865,.999057,.999237,.999401,.999548,.999682,.999803,.999908,1.00000,.203351,.304208,.370905,.420526,.459903,.492454,.520130,.544151,.565332,.584241,.601293,.616799,.630996,.644074,.656181,.667440,.677952,.687800,.697054,.705776,.714031,.721862,.729307,.736399,.743165,.749631,.755820,.761751,.767442,.772910,.778170,.783234,.788114,.792822,.797367,.801759,.806007,.810117,.814097,.817954,.821696,.825328,.828855,.832283,.835615,.838857,.842011,.845083,.848074,.850989,.853831,.856602,.859306,.861944,.864520,.867035,.869493,.871894,.874241,.876536,.878782,.880980,.883131,.885238,.887302,.889324,.891306,.893248,.895152,.897020,.898851,.900648,.902410,.904140,.905838,.907505,.909142,.910749,.912328,.913878,.915403,.916902,.918375,.919824,.921250,.922652,.924031,.925389,.926724,.928039,.929333,.930607,.931861,.933096,.934312,.935510,.936690,.937852,.938997,.940125,.941237,.942333,.943414,.944480,.945530,.946566,.947588,.948596,.949590,.950570,.951537,.952492,.953433,.954363,.955280,.956185,.957078,.957960,.958830,.959689,.960537,.961374,.962201,.963016,.963822,.964617,.965402,.966177,.966943,.967699,.968446,.969183,.969911,.970631,.971342,.972044,.972738,.973423,.974100,.974770,.975430,.976082,.976726,.977361,.977988,.978608,.979219,.979823,.980419,.981008,.981589,.982163,.982730,.983290,.983843,.984389,.984929,.985462,.985988,.986508,.987019,.987522,.988015,.988501,.988978,.989446,.989907,.990360,.990806,.991243,.991674,.992097,.992513,.992922,.993324,.993720,.994109,.994491,.994867,.995237,.995594,.995939,.996271,.996593,.996903,.997203,.997492,.997772,.998041,.998302,.998546,.998775,.998989,.999189,.999369,.999530,.999674,.999802,.999910,1.00000,.200674,.300261,.366157,.415209,.454158,.486373,.513779,.537581,.558580,.577338,.594263,.609661,.623769,.636772,.648817,.660025,.670494,.680309,.689537,.698238,.706479,.714302,.721743,.728834,.735604,.742078,.748277,.754221,.759929,.765416,.770696,.775783,.780688,.785423,.789997,.794419,.798697,.802840,.806855,.810747,.814525,.818194,.821759,.825225,.828596,.831878,.835073,.838185,.841218,.844175,.847059,.849874,.852620,.855302,.857922,.860482,.862984,.865430,.867822,.870162,.872454,.874697,.876894,.879047,.881157,.883225,.885253,.887241,.889191,.891104,.892982,.894824,.896633,.898409,.900153,.901866,.903549,.905202,.906827,.908424,.909994,.911539,.913058,.914553,.916025,.917473,.918898,.920301,.921682,.923042,.924382,.925701,.927001,.928281,.929543,.930786,.932011,.933218,.934408,.935581,.936738,.937880,.939005,.940116,.941212,.942293,.943360,.944413,.945452,.946478,.947491,.948491,.949478,.950452,.951415,.952365,.953303,.954230,.955146,.956051,.956944,.957827,.958699,.959561,.960413,.961255,.962086,.962908,.963721,.964524,.965318,.966103,.966879,.967647,.968405,.969155,.969897,.970631,.971356,.972074,.972783,.973484,.974177,.974861,.975538,.976207,.976869,.977523,.978170,.978809,.979441,.980066,.980685,.981296,.981901,.982498,.983090,.983675,.984253,.984826,.985389,.985943,.986488,.987025,.987553,.988073,.988584,.989088,.989583,.990071,.990551,.991024,.991489,.991947,.992398,.992842,.993280,.993710,.994134,.994551,.994955,.995346,.995724,.996090,.996445,.996788,.997120,.997442,.997753,.998054,.998338,.998604,.998854,.999090,.999300,.999486,.999651,.999798,.999912,1.00000,.199391,.298360,.363857,.412622,.451349,.483386,.510645,.534324,.555218,.573885,.590731,.606061,.620109,.633057,.645055,.656220,.666652,.676433,.685631,.694305,.702523,.710325,.717749,.724826,.731583,.738047,.744238,.750176,.755879,.761362,.766641,.771727,.776634,.781370,.785947,.790374,.794658,.798807,.802828,.806728,.810514,.814192,.817766,.821243,.824625,.827918,.831125,.834249,.837295,.840265,.843163,.845991,.848753,.851449,.854084,.856659,.859177,.861639,.864047,.866404,.868712,.870972,.873187,.875357,.877485,.879572,.881618,.883625,.885594,.887527,.889423,.891286,.893114,.894910,.896675,.898408,.900111,.901785,.903431,.905049,.906640,.908207,.909748,.911265,.912758,.914228,.915675,.917101,.918505,.919888,.921250,.922593,.923915,.925219,.926504,.927770,.929019,.930250,.931464,.932661,.933842,.935007,.936157,.937292,.938413,.939519,.940611,.941689,.942753,.943804,.944842,.945868,.946880,.947881,.948869,.949845,.950809,.951763,.952704,.953635,.954555,.955464,.956363,.957252,.958131,.958999,.959859,.960708,.961548,.962379,.963201,.964014,.964818,.965613,.966400,.967179,.967949,.968711,.969465,.970211,.970949,.971679,.972401,.973116,.973822,.974522,.975213,.975898,.976575,.977245,.977908,.978564,.979213,.979856,.980492,.981122,.981745,.982361,.982972,.983576,.984172,.984759,.985337,.985907,.986469,.987023,.987568,.988106,.988636,.989159,.989674,.990182,.990683,.991176,.991663,.992143,.992616,.993082,.993542,.993995,.994435,.994862,.995276,.995678,.996068,.996446,.996813,.997170,.997515,.997851,.998167,.998464,.998745,.999009,.999243,.999450,.999633,.999795,.999913,1.00000,.198570,.297140,.362380,.410958,.449540,.481460,.508623,.532219,.553042,.571648,.588441,.603724,.617729,.630640,.642604,.653739,.664144,.673899,.683075,.691729,.699929,.707715,.715124,.722188,.728934,.735387,.741569,.747500,.753196,.758674,.763948,.769030,.773934,.778668,.783243,.787668,.791951,.796100,.800122,.804023,.807811,.811491,.815068,.818548,.821934,.825231,.828442,.831572,.834623,.837599,.840503,.843337,.846105,.848809,.851451,.854034,.856559,.859029,.861446,.863811,.866127,.868397,.870621,.872801,.874938,.877035,.879091,.881108,.883088,.885032,.886940,.888813,.890653,.892460,.894236,.895981,.897697,.899383,.901040,.902670,.904274,.905853,.907407,.908937,.910443,.911927,.913388,.914827,.916245,.917642,.919018,.920375,.921712,.923030,.924329,.925611,.926874,.928120,.929349,.930561,.931757,.932938,.934103,.935254,.936390,.937512,.938620,.939714,.940795,.941863,.942917,.943959,.944988,.946005,.947010,.948004,.948985,.949955,.950914,.951862,.952800,.953727,.954643,.955550,.956447,.957334,.958211,.959079,.959938,.960787,.961628,.962460,.963283,.964097,.964903,.965701,.966491,.967273,.968046,.968812,.969570,.970320,.971063,.971797,.972525,.973245,.973957,.974663,.975361,.976053,.976737,.977415,.978087,.978751,.979410,.980061,.980707,.981346,.981979,.982607,.983225,.983836,.984438,.985032,.985618,.986197,.986767,.987330,.987886,.988434,.988976,.989510,.990037,.990557,.991070,.991577,.992077,.992571,.993059,.993540,.994008,.994462,.994904,.995334,.995752,.996159,.996554,.996938,.997311,.997675,.998018,.998342,.998647,.998936,.999191,.999417,.999616,.999791,.999914,1.00000,.197781,.295976,.360980,.409389,.447845,.479666,.506749,.530280,.551050,.569611,.586367,.601618,.615597,.628486,.640431,.651551,.661943,.671689,.680857,.689506,.697701,.705484,.712891,.719953,.726699,.733152,.739336,.745268,.750966,.756447,.761724,.766811,.771718,.776457,.781038,.785468,.789757,.793912,.797941,.801848,.805643,.809330,.812914,.816401,.819795,.823099,.826318,.829456,.832515,.835499,.838411,.841253,.844030,.846742,.849392,.851983,.854517,.856995,.859420,.861794,.864119,.866397,.868630,.870819,.872965,.875070,.877135,.879161,.881150,.883102,.885019,.886901,.888750,.890566,.892351,.894105,.895829,.897523,.899190,.900829,.902442,.904029,.905592,.907131,.908647,.910140,.911610,.913059,.914486,.915892,.917278,.918644,.919991,.921319,.922628,.923919,.925192,.926448,.927686,.928908,.930114,.931305,.932481,.933643,.934790,.935922,.937041,.938147,.939239,.940318,.941384,.942437,.943478,.944507,.945524,.946530,.947524,.948506,.949478,.950438,.951389,.952329,.953258,.954179,.955089,.955990,.956881,.957764,.958637,.959501,.960357,.961203,.962042,.962872,.963693,.964507,.965312,.966110,.966900,.967682,.968456,.969223,.969982,.970733,.971477,.972213,.972942,.973664,.974380,.975088,.975789,.976484,.977172,.977853,.978528,.979197,.979859,.980515,.981165,.981809,.982445,.983072,.983692,.984304,.984908,.985504,.986093,.986675,.987249,.987816,.988376,.988929,.989476,.990015,.990548,.991074,.991594,.992108,.992615,.993116,.993605,.994081,.994546,.994999,.995441,.995872,.996292,.996702,.997102,.997492,.997861,.998212,.998545,.998860,.999138,.999383,.999598,.999788,.999915,1.00000,.196794,.294516,.359219,.407413,.445704,.477395,.504372,.527816,.548511,.567010,.583712,.598917,.612856,.625711,.637627,.648722,.659092,.668819,.677971,.686606,.694789,.702561,.709959,.717013,.723751,.730198,.736376,.742303,.747998,.753476,.758750,.763835,.768741,.773479,.778059,.782489,.786779,.790935,.794964,.798873,.802669,.806359,.809946,.813436,.816834,.820142,.823366,.826508,.829572,.832561,.835479,.838327,.841110,.843828,.846485,.849083,.851624,.854110,.856542,.858923,.861257,.863543,.865784,.867982,.870137,.872251,.874325,.876361,.878360,.880322,.882249,.884141,.886001,.887828,.889623,.891388,.893123,.894830,.896508,.898158,.899783,.901383,.902958,.904509,.906037,.907543,.909026,.910487,.911928,.913348,.914747,.916127,.917488,.918829,.920152,.921458,.922745,.924015,.925268,.926505,.927726,.928932,.930123,.931300,.932462,.933611,.934745,.935867,.936975,.938070,.939152,.940222,.941280,.942325,.943359,.944381,.945392,.946392,.947381,.948358,.949326,.950284,.951232,.952170,.953099,.954018,.954929,.955830,.956722,.957606,.958481,.959347,.960206,.961056,.961897,.962731,.963557,.964376,.965186,.965990,.966785,.967573,.968354,.969127,.969894,.970653,.971405,.972150,.972889,.973621,.974346,.975065,.975777,.976483,.977183,.977877,.978564,.979246,.979922,.980592,.981254,.981908,.982555,.983194,.983827,.984451,.985069,.985680,.986284,.986881,.987471,.988055,.988632,.989203,.989768,.990326,.990878,.991424,.991964,.992498,.993020,.993530,.994029,.994517,.994994,.995461,.995917,.996363,.996799,.997226,.997632,.998019,.998388,.998739,.999050,.999324,.999567,.999781,.999916,1.00000,.196133,.293537,.358033,.406078,.444254,.475852,.502753,.526133,.546773,.565225,.581885,.597054,.610961,.623787,.635677,.646749,.657099,.666808,.675944,.684564,.692734,.700495,.707882,.714927,.721658,.728098,.734270,.740192,.745883,.751357,.756629,.761711,.766615,.771353,.775932,.780363,.784653,.788810,.792840,.796751,.800550,.804242,.807832,.811325,.814726,.818038,.821265,.824411,.827480,.830473,.833396,.836249,.839036,.841760,.844422,.847026,.849572,.852064,.854502,.856890,.859229,.861522,.863769,.865973,.868135,.870256,.872338,.874380,.876386,.878355,.880289,.882189,.884056,.885891,.887694,.889467,.891210,.892923,.894609,.896268,.897900,.899508,.901092,.902651,.904188,.905702,.907194,.908664,.910113,.911542,.912950,.914339,.915708,.917059,.918392,.919706,.921003,.922282,.923545,.924791,.926021,.927237,.928438,.929625,.930797,.931956,.933101,.934233,.935352,.936457,.937551,.938632,.939700,.940757,.941802,.942836,.943858,.944870,.945870,.946859,.947839,.948809,.949769,.950720,.951661,.952593,.953516,.954430,.955335,.956232,.957120,.958000,.958871,.959735,.960590,.961438,.962278,.963110,.963935,.964752,.965562,.966364,.967160,.967948,.968730,.969504,.970272,.971033,.971788,.972536,.973277,.974013,.974742,.975465,.976182,.976893,.977598,.978297,.978990,.979678,.980359,.981032,.981698,.982357,.983008,.983653,.984292,.984923,.985548,.986166,.986779,.987384,.987984,.988577,.989164,.989745,.990321,.990890,.991454,.992012,.992558,.993094,.993618,.994132,.994636,.995130,.995613,.996087,.996551,.997006,.997441,.997857,.998255,.998636,.998973,.999273,.999539,.999775,.999916,1.00000][]
	# Z=55
	      Z55=[.148461,.222990,.272876,.310441,.340614,.365859,.387585,.406672,.423706,.439098,.453147,.466078,.478061,.489234,.499703,.509558,.518870,.527701,.536100,.544111,.551770,.559109,.566156,.572934,.579466,.585771,.591866,.597765,.603483,.609031,.614421,.619662,.624764,.629734,.634581,.639311,.643931,.648447,.652863,.657186,.661419,.665566,.669631,.673619,.677532,.681374,.685148,.688858,.692505,.696092,.699621,.703096,.706517,.709888,.713209,.716483,.719711,.722895,.726037,.729138,.732199,.735221,.738205,.741153,.744067,.746946,.749792,.752607,.755390,.758143,.760867,.763563,.766231,.768873,.771489,.774079,.776644,.779186,.781705,.784200,.786674,.789126,.791557,.793968,.796358,.798729,.801081,.803415,.805731,.808028,.810309,.812573,.814820,.817051,.819267,.821467,.823652,.825823,.827979,.830121,.832249,.834364,.836466,.838555,.840632,.842696,.844748,.846788,.848816,.850834,.852840,.854835,.856819,.858794,.860757,.862711,.864655,.866589,.868514,.870430,.872336,.874234,.876122,.878003,.879874,.881738,.883593,.885441,.887280,.889112,.890937,.892754,.894564,.896366,.898162,.899951,.901733,.903508,.905277,.907040,.908794,.910541,.912280,.914011,.915734,.917450,.919159,.920860,.922555,.924242,.925922,.927596,.929263,.930923,.932576,.934224,.935865,.937499,.939128,.940750,.942365,.943971,.945570,.947161,.948744,.950320,.951888,.953449,.955003,.956550,.958089,.959622,.961148,.962666,.964179,.965684,.967183,.968675,.970161,.971641,.973114,.974581,.976041,.977496,.978944,.980387,.981823,.983254,.984678,.986097,.987511,.988921,.990326,.991726,.993120,.994508,.995890,.997265,.998636,1.00000,.153397,.230329,.281772,.320472,.351525,.377482,.399798,.419384,.436846,.452610,.466985,.480201,.492438,.503836,.514505,.524539,.534011,.542983,.551510,.559634,.567395,.574826,.581955,.588808,.595407,.601771,.607918,.613863,.619620,.625203,.630622,.635887,.641009,.645994,.650852,.655590,.660213,.664728,.669141,.673456,.677679,.681813,.685864,.689834,.693728,.697548,.701298,.704981,.708599,.712156,.715654,.719094,.722480,.725812,.729094,.732327,.735513,.738653,.741749,.744803,.747815,.750788,.753722,.756619,.759480,.762305,.765097,.767856,.770583,.773279,.775945,.778582,.781190,.783770,.786324,.788852,.791354,.793831,.796284,.798714,.801121,.803505,.805867,.808208,.810528,.812827,.815107,.817367,.819608,.821830,.824035,.826222,.828391,.830543,.832679,.834799,.836903,.838991,.841064,.843123,.845166,.847195,.849210,.851210,.853197,.855170,.857131,.859078,.861012,.862935,.864845,.866743,.868629,.870504,.872367,.874219,.876061,.877891,.879712,.881522,.883321,.885109,.886888,.888656,.890414,.892162,.893900,.895629,.897349,.899059,.900760,.902452,.904136,.905811,.907477,.909135,.910785,.912426,.914060,.915685,.917303,.918911,.920512,.922104,.923688,.925264,.926832,.928392,.929945,.931490,.933028,.934558,.936081,.937597,.939106,.940608,.942103,.943592,.945074,.946549,.948016,.949477,.950929,.952375,.953813,.955245,.956669,.958086,.959497,.960901,.962298,.963689,.965073,.966451,.967822,.969187,.970546,.971899,.973245,.974586,.975919,.977246,.978565,.979877,.981182,.982480,.983771,.985055,.986333,.987604,.988868,.990125,.991374,.992617,.993856,.995092,.996324,.997553,.998779,1.00000,.157778,.236930,.289872,.329712,.361689,.388425,.411418,.431604,.449606,.465862,.480689,.494326,.506956,.518722,.529741,.540105,.549892,.559167,.567982,.576384,.584406,.592082,.599443,.606515,.613321,.619881,.626214,.632336,.638261,.644004,.649575,.654985,.660244,.665361,.670345,.675202,.679940,.684564,.689081,.693496,.697811,.702031,.706159,.710202,.714161,.718041,.721846,.725577,.729240,.732835,.736366,.739835,.743245,.746597,.749895,.753139,.756332,.759476,.762572,.765621,.768625,.771584,.774501,.777375,.780210,.783005,.785762,.788482,.791167,.793816,.796433,.799016,.801567,.804087,.806577,.809038,.811470,.813874,.816251,.818601,.820925,.823224,.825498,.827747,.829973,.832176,.834356,.836514,.838650,.840766,.842860,.844935,.846990,.849025,.851041,.853039,.855019,.856981,.858926,.860853,.862764,.864658,.866536,.868398,.870245,.872076,.873892,.875693,.877480,.879253,.881012,.882757,.884489,.886207,.887913,.889605,.891286,.892953,.894609,.896253,.897885,.899506,.901115,.902712,.904299,.905874,.907439,.908993,.910537,.912071,.913594,.915108,.916612,.918106,.919590,.921065,.922531,.923988,.925436,.926875,.928305,.929726,.931138,.932542,.933937,.935323,.936701,.938071,.939433,.940787,.942133,.943471,.944801,.946124,.947439,.948747,.950047,.951340,.952627,.953906,.955178,.956443,.957700,.958951,.960195,.961433,.962663,.963887,.965105,.966316,.967521,.968719,.969911,.971097,.972277,.973451,.974619,.975781,.976937,.978088,.979233,.980373,.981507,.982635,.983758,.984876,.985989,.987096,.988199,.989296,.990388,.991476,.992559,.993637,.994710,.995778,.996841,.997900,.998953,1.00000,.162418,.243869,.298332,.339300,.372173,.399649,.423270,.444000,.462481,.479164,.494376,.508361,.521309,.533368,.544657,.555272,.565292,.574784,.583803,.592397,.600595,.608434,.615945,.623155,.630089,.636767,.643209,.649431,.655449,.661277,.666926,.672408,.677732,.682909,.687947,.692853,.697634,.702298,.706849,.711295,.715635,.719874,.724017,.728068,.732032,.735912,.739712,.743435,.747084,.750663,.754173,.757618,.761001,.764322,.767586,.770793,.773945,.777046,.780095,.783096,.786048,.788952,.791811,.794625,.797397,.800126,.802815,.805465,.808077,.810652,.813190,.815694,.818164,.820600,.823005,.825378,.827720,.830032,.832316,.834571,.836799,.838999,.841173,.843321,.845444,.847543,.849618,.851669,.853697,.855702,.857686,.859648,.861590,.863510,.865411,.867292,.869154,.870996,.872820,.874627,.876415,.878186,.879939,.881676,.883397,.885101,.886790,.888463,.890121,.891764,.893392,.895006,.896606,.898191,.899763,.901322,.902867,.904399,.905919,.907426,.908920,.910403,.911874,.913333,.914780,.916216,.917641,.919056,.920459,.921852,.923234,.924606,.925968,.927320,.928662,.929994,.931317,.932630,.933934,.935229,.936515,.937792,.939060,.940319,.941570,.942812,.944046,.945272,.946490,.947699,.948901,.950095,.951281,.952460,.953631,.954795,.955952,.957101,.958243,.959378,.960507,.961628,.962743,.963851,.964953,.966049,.967138,.968221,.969298,.970368,.971433,.972491,.973544,.974591,.975632,.976667,.977697,.978721,.979740,.980753,.981761,.982764,.983762,.984755,.985742,.986726,.987704,.988677,.989646,.990610,.991569,.992524,.993474,.994420,.995361,.996298,.997230,.998158,.999081,1.00000,.169459,.254311,.310962,.353513,.387602,.416052,.440473,.461872,.480921,.498091,.513722,.528072,.541337,.553672,.565202,.576027,.586230,.595881,.605036,.613747,.622045,.629969,.637550,.644818,.651797,.658510,.664976,.671214,.677237,.683062,.688701,.694165,.699465,.704611,.709612,.714475,.719208,.723818,.728311,.732693,.736965,.741133,.745202,.749176,.753058,.756855,.760568,.764201,.767758,.771241,.774655,.778000,.781280,.784498,.787655,.790753,.793796,.796784,.799719,.802604,.805438,.808224,.810963,.813656,.816305,.818911,.821476,.824000,.826485,.828932,.831342,.833716,.836055,.838360,.840631,.842871,.845079,.847257,.849405,.851524,.853614,.855677,.857713,.859723,.861707,.863666,.865600,.867511,.869398,.871262,.873104,.874924,.876723,.878500,.880258,.881995,.883712,.885411,.887090,.888751,.890394,.892019,.893628,.895219,.896794,.898352,.899895,.901422,.902934,.904430,.905912,.907379,.908832,.910271,.911696,.913108,.914506,.915892,.917264,.918624,.919971,.921307,.922631,.923943,.925244,.926533,.927812,.929079,.930336,.931583,.932818,.934044,.935260,.936466,.937662,.938848,.940025,.941192,.942351,.943500,.944640,.945772,.946895,.948010,.949117,.950215,.951306,.952388,.953463,.954530,.955589,.956641,.957685,.958722,.959752,.960774,.961790,.962798,.963800,.964795,.965783,.966765,.967741,.968710,.969673,.970630,.971581,.972527,.973466,.974399,.975327,.976249,.977165,.978076,.978981,.979881,.980775,.981665,.982548,.983427,.984301,.985169,.986033,.986892,.987746,.988594,.989439,.990278,.991113,.991943,.992769,.993589,.994405,.995216,.996024,.996826,.997625,.998420,.999211,1.00000,.182203,.273097,.333556,.378798,.414909,.444933,.470609,.493025,.512905,.530757,.546949,.561757,.575396,.588032,.599798,.610805,.621140,.630879,.640084,.648809,.657100,.664995,.672529,.679732,.686631,.693249,.699607,.705724,.711616,.717298,.722785,.728087,.733217,.738184,.742998,.747667,.752199,.756602,.760882,.765045,.769097,.773044,.776890,.780639,.784297,.787866,.791352,.794757,.798084,.801338,.804520,.807634,.810682,.813666,.816590,.819454,.822261,.825014,.827714,.830362,.832962,.835513,.838018,.840478,.842894,.845269,.847603,.849897,.852152,.854371,.856552,.858699,.860811,.862890,.864937,.866952,.868936,.870890,.872815,.874712,.876581,.878423,.880238,.882028,.883793,.885534,.887251,.888944,.890615,.892263,.893890,.895495,.897079,.898643,.900188,.901712,.903218,.904704,.906173,.907623,.909057,.910473,.911872,.913255,.914622,.915973,.917309,.918629,.919935,.921226,.922503,.923765,.925014,.926249,.927471,.928680,.929876,.931059,.932230,.933389,.934535,.935671,.936795,.937907,.939009,.940100,.941180,.942250,.943309,.944358,.945397,.946427,.947446,.948457,.949457,.950449,.951431,.952404,.953369,.954325,.955272,.956212,.957143,.958066,.958982,.959890,.960790,.961683,.962568,.963446,.964317,.965181,.966037,.966887,.967730,.968566,.969396,.970219,.971036,.971846,.972650,.973448,.974241,.975027,.975808,.976583,.977352,.978116,.978874,.979627,.980374,.981117,.981854,.982585,.983312,.984034,.984750,.985462,.986169,.986871,.987568,.988261,.988949,.989633,.990313,.990989,.991660,.992327,.992990,.993648,.994303,.994954,.995600,.996243,.996881,.997514,.998141,.998764,.999384,1.00000,.188445,.282413,.344889,.391620,.428904,.459890,.486377,.509492,.529982,.548374,.565049,.580293,.594326,.607322,.619419,.630729,.641345,.651344,.660791,.669742,.678229,.686294,.693974,.701302,.708305,.715009,.721436,.727606,.733537,.739245,.744745,.750048,.755169,.760116,.764901,.769533,.774019,.778368,.782587,.786681,.790659,.794525,.798285,.801943,.805504,.808973,.812353,.815649,.818863,.821999,.825060,.828049,.830969,.833823,.836612,.839340,.842008,.844619,.847174,.849676,.852127,.854529,.856885,.859194,.861459,.863682,.865862,.868003,.870104,.872167,.874193,.876184,.878140,.880061,.881950,.883807,.885633,.887428,.889194,.890931,.892641,.894324,.895981,.897613,.899221,.900804,.902364,.903901,.905415,.906908,.908379,.909829,.911259,.912669,.914059,.915431,.916783,.918117,.919434,.920732,.922014,.923279,.924529,.925762,.926980,.928182,.929370,.930543,.931702,.932846,.933977,.935094,.936198,.937289,.938367,.939432,.940486,.941526,.942555,.943573,.944579,.945574,.946558,.947531,.948494,.949447,.950390,.951322,.952245,.953158,.954062,.954956,.955841,.956717,.957585,.958443,.959293,.960134,.960967,.961792,.962608,.963417,.964218,.965012,.965798,.966577,.967348,.968112,.968869,.969620,.970363,.971099,.971829,.972552,.973269,.973979,.974683,.975381,.976072,.976758,.977437,.978111,.978778,.979440,.980096,.980746,.981391,.982030,.982664,.983292,.983915,.984533,.985146,.985754,.986356,.986954,.987546,.988134,.988717,.989295,.989869,.990438,.991003,.991564,.992121,.992674,.993223,.993767,.994308,.994845,.995378,.995907,.996432,.996954,.997472,.997986,.998496,.999002,.999503,1.00000,.199492,.298618,.364291,.413239,.452155,.484382,.511834,.535706,.556792,.575653,.592692,.608214,.622453,.635592,.647780,.659134,.669755,.679723,.689107,.697967,.706354,.714311,.721876,.729082,.735957,.742528,.748817,.754845,.760630,.766188,.771534,.776682,.781643,.786429,.791050,.795516,.799835,.804014,.808062,.811984,.815789,.819481,.823067,.826551,.829937,.833231,.836436,.839556,.842595,.845556,.848441,.851255,.854000,.856678,.859293,.861846,.864339,.866775,.869157,.871484,.873761,.875990,.878170,.880305,.882396,.884444,.886450,.888416,.890342,.892231,.894083,.895899,.897681,.899429,.901144,.902827,.904480,.906102,.907695,.909259,.910797,.912308,.913793,.915253,.916688,.918100,.919488,.920854,.922197,.923519,.924820,.926100,.927360,.928600,.929821,.931023,.932206,.933372,.934520,.935650,.936765,.937863,.938945,.940012,.941063,.942100,.943122,.944130,.945124,.946104,.947071,.948025,.948966,.949894,.950809,.951713,.952604,.953484,.954352,.955209,.956055,.956890,.957714,.958529,.959333,.960127,.960912,.961686,.962451,.963207,.963954,.964692,.965421,.966141,.966853,.967556,.968251,.968938,.969617,.970287,.970951,.971607,.972255,.972897,.973531,.974158,.974779,.975392,.975999,.976599,.977193,.977781,.978362,.978937,.979506,.980069,.980626,.981177,.981722,.982262,.982796,.983325,.983848,.984366,.984879,.985386,.985889,.986386,.986879,.987366,.987849,.988327,.988801,.989269,.989733,.990193,.990648,.991099,.991545,.991987,.992425,.992859,.993288,.993714,.994135,.994552,.994965,.995375,.995780,.996182,.996580,.996974,.997364,.997751,.998134,.998514,.998890,.999263,.999633,1.00000,.212385,.317547,.386975,.438541,.479393,.513107,.541724,.566521,.588349,.607803,.625318,.641217,.655750,.669115,.681468,.692936,.703625,.713623,.723002,.731826,.740155,.748034,.755505,.762600,.769352,.775786,.781926,.787795,.793411,.798792,.803953,.808909,.813671,.818253,.822664,.826914,.831013,.834968,.838788,.842480,.846052,.849510,.852860,.856108,.859257,.862313,.865279,.868160,.870959,.873679,.876325,.878898,.881402,.883840,.886214,.888526,.890779,.892976,.895117,.897206,.899244,.901235,.903179,.905078,.906934,.908748,.910521,.912255,.913951,.915610,.917233,.918822,.920377,.921899,.923390,.924849,.926279,.927680,.929053,.930398,.931717,.933011,.934279,.935524,.936745,.937943,.939119,.940273,.941406,.942518,.943610,.944683,.945736,.946770,.947786,.948785,.949766,.950730,.951677,.952608,.953523,.954423,.955308,.956178,.957034,.957876,.958704,.959518,.960320,.961108,.961884,.962648,.963399,.964138,.964866,.965583,.966288,.966983,.967666,.968340,.969002,.969655,.970298,.970930,.971553,.972167,.972771,.973367,.973953,.974531,.975100,.975660,.976213,.976757,.977293,.977822,.978342,.978856,.979361,.979860,.980351,.980835,.981313,.981783,.982247,.982704,.983154,.983598,.984036,.984468,.984893,.985313,.985727,.986135,.986537,.986934,.987325,.987711,.988092,.988468,.988838,.989203,.989563,.989918,.990269,.990614,.990955,.991292,.991623,.991951,.992274,.992592,.992906,.993217,.993523,.993824,.994122,.994416,.994706,.994993,.995275,.995554,.995829,.996101,.996369,.996633,.996895,.997152,.997407,.997658,.997906,.998151,.998392,.998631,.998867,.999099,.999329,.999556,.999779,1.00000,.217130,.324510,.395315,.447840,.489401,.523657,.552699,.577833,.599931,.619602,.637290,.653326,.667968,.681415,.693829,.705340,.716056,.726066,.735445,.744259,.752570,.760425,.767865,.774925,.781635,.788025,.794117,.799933,.805494,.810817,.815918,.820810,.825507,.830022,.834364,.838545,.842572,.846455,.850201,.853817,.857313,.860696,.863969,.867140,.870211,.873189,.876077,.878880,.881600,.884242,.886809,.889303,.891729,.894088,.896383,.898616,.900791,.902909,.904972,.906982,.908943,.910855,.912721,.914542,.916319,.918055,.919749,.921405,.923023,.924604,.926149,.927660,.929137,.930582,.931995,.933378,.934731,.936055,.937351,.938620,.939863,.941080,.942273,.943441,.944586,.945708,.946807,.947886,.948942,.949979,.950995,.951992,.952970,.953929,.954870,.955793,.956700,.957589,.958462,.959319,.960160,.960986,.961797,.962593,.963375,.964143,.964897,.965638,.966366,.967081,.967783,.968473,.969152,.969819,.970474,.971118,.971751,.972373,.972985,.973587,.974178,.974759,.975331,.975892,.976444,.976987,.977521,.978045,.978561,.979069,.979568,.980059,.980541,.981016,.981483,.981943,.982395,.982840,.983277,.983708,.984131,.984548,.984957,.985360,.985756,.986146,.986530,.986907,.987278,.987643,.988002,.988356,.988704,.989046,.989383,.989714,.990041,.990362,.990678,.990989,.991295,.991596,.991892,.992183,.992469,.992750,.993027,.993299,.993567,.993830,.994090,.994345,.994595,.994842,.995085,.995324,.995559,.995790,.996017,.996241,.996461,.996678,.996890,.997099,.997305,.997507,.997705,.997901,.998093,.998281,.998467,.998649,.998829,.999005,.999178,.999348,.999515,.999680,.999841,1.00000,.216829,.324066,.394782,.447242,.488755,.522973,.551984,.577094,.599171,.618824,.636497,.652521,.667152,.680590,.692997,.704501,.715212,.725217,.734593,.743403,.751714,.759571,.767015,.774081,.780799,.787197,.793300,.799128,.804702,.810038,.815154,.820062,.824775,.829307,.833667,.837865,.841911,.845813,.849579,.853215,.856732,.860134,.863427,.866618,.869709,.872707,.875614,.878436,.881176,.883837,.886423,.888937,.891381,.893759,.896073,.898325,.900519,.902655,.904736,.906765,.908744,.910674,.912557,.914395,.916190,.917943,.919655,.921327,.922961,.924558,.926120,.927647,.929140,.930600,.932029,.933427,.934795,.936134,.937445,.938729,.939986,.941218,.942425,.943607,.944766,.945902,.947015,.948106,.949177,.950226,.951256,.952265,.953256,.954228,.955181,.956117,.957035,.957937,.958822,.959691,.960543,.961381,.962203,.963010,.963803,.964581,.965346,.966097,.966835,.967560,.968272,.968972,.969660,.970336,.971000,.971653,.972295,.972926,.973546,.974156,.974755,.975344,.975923,.976491,.977050,.977599,.978139,.978669,.979190,.979703,.980207,.980702,.981189,.981668,.982139,.982602,.983058,.983506,.983946,.984379,.984805,.985223,.985634,.986038,.986435,.986825,.987208,.987585,.987955,.988319,.988677,.989029,.989375,.989715,.990049,.990377,.990700,.991018,.991330,.991637,.991939,.992234,.992524,.992808,.993087,.993361,.993629,.993893,.994151,.994405,.994653,.994897,.995137,.995372,.995603,.995829,.996051,.996269,.996483,.996694,.996899,.997099,.997296,.997487,.997675,.997858,.998037,.998212,.998383,.998550,.998713,.998871,.999026,.999176,.999323,.999466,.999605,.999740,.999872,1.00000,.215402,.321960,.392244,.444398,.485677,.519712,.548574,.573561,.595536,.615103,.632702,.648664,.663241,.676633,.689000,.700470,.711152,.721133,.730488,.739281,.747579,.755428,.762868,.769932,.776653,.783057,.789167,.795005,.800592,.805942,.811074,.815999,.820732,.825284,.829666,.833888,.837958,.841885,.845676,.849339,.852883,.856314,.859637,.862857,.865980,.869009,.871948,.874803,.877576,.880270,.882890,.885438,.887917,.890330,.892679,.894967,.897196,.899368,.901486,.903551,.905566,.907532,.909452,.911327,.913159,.914948,.916697,.918406,.920077,.921711,.923309,.924872,.926402,.927899,.929365,.930799,.932204,.933580,.934927,.936247,.937541,.938808,.940051,.941269,.942463,.943634,.944783,.945909,.947014,.948099,.949162,.950207,.951231,.952237,.953224,.954194,.955146,.956080,.956998,.957900,.958786,.959655,.960510,.961349,.962174,.962984,.963780,.964563,.965332,.966088,.966831,.967562,.968280,.968986,.969680,.970363,.971035,.971695,.972345,.972984,.973612,.974229,.974836,.975433,.976020,.976597,.977164,.977722,.978271,.978811,.979342,.979864,.980377,.980883,.981380,.981869,.982350,.982824,.983290,.983748,.984199,.984641,.985077,.985504,.985924,.986337,.986743,.987143,.987535,.987920,.988300,.988672,.989039,.989399,.989753,.990101,.990444,.990781,.991112,.991438,.991757,.992070,.992376,.992676,.992970,.993259,.993541,.993818,.994089,.994355,.994616,.994871,.995122,.995367,.995608,.995843,.996074,.996301,.996523,.996741,.996953,.997159,.997360,.997555,.997746,.997931,.998111,.998287,.998457,.998624,.998784,.998939,.999089,.999234,.999374,.999508,.999638,.999762,.999883,1.00000,.214039,.319947,.389819,.441679,.482735,.516594,.545314,.570182,.592059,.611542,.629071,.644972,.659498,.672845,.685174,.696612,.707265,.717222,.726557,.735333,.743618,.751458,.758893,.765955,.772677,.779084,.785200,.791046,.796642,.802004,.807148,.812089,.816838,.821407,.825807,.830048,.834139,.838087,.841901,.845587,.849155,.852610,.855958,.859204,.862353,.865410,.868377,.871260,.874061,.876785,.879435,.882012,.884522,.886965,.889345,.891663,.893924,.896127,.898276,.900373,.902420,.904418,.906371,.908278,.910142,.911963,.913744,.915486,.917190,.918856,.920487,.922083,.923646,.925175,.926673,.928140,.929578,.930986,.932366,.933718,.935044,.936344,.937619,.938869,.940095,.941299,.942479,.943638,.944774,.945890,.946986,.948062,.949118,.950155,.951173,.952174,.953157,.954122,.955071,.956004,.956920,.957820,.958705,.959574,.960429,.961269,.962095,.962907,.963706,.964491,.965263,.966023,.966770,.967505,.968228,.968939,.969639,.970328,.971006,.971673,.972328,.972973,.973608,.974232,.974846,.975450,.976044,.976628,.977203,.977769,.978326,.978874,.979413,.979944,.980466,.980981,.981487,.981985,.982476,.982959,.983433,.983900,.984359,.984810,.985254,.985690,.986118,.986540,.986955,.987362,.987764,.988158,.988546,.988927,.989303,.989672,.990035,.990393,.990744,.991090,.991429,.991760,.992085,.992403,.992715,.993020,.993320,.993613,.993900,.994181,.994456,.994726,.994991,.995250,.995504,.995752,.995996,.996235,.996469,.996699,.996921,.997137,.997347,.997550,.997747,.997938,.998124,.998304,.998479,.998649,.998812,.998968,.999118,.999262,.999399,.999530,.999655,.999774,.999889,1.00000,.212758,.318058,.387545,.439132,.479982,.513679,.542268,.567031,.588818,.608228,.625694,.641542,.656022,.669332,.681628,.693039,.703670,.713608,.722927,.731691,.739968,.747803,.755236,.762299,.769024,.775437,.781560,.787416,.793023,.798398,.803557,.808513,.813278,.817866,.822285,.826546,.830657,.834626,.838462,.842171,.845762,.849241,.852614,.855885,.859059,.862141,.865134,.868043,.870871,.873622,.876298,.878903,.881440,.883910,.886318,.888665,.890953,.893184,.895362,.897486,.899561,.901589,.903569,.905505,.907397,.909248,.911057,.912828,.914560,.916255,.917915,.919540,.921131,.922689,.924216,.925712,.927178,.928614,.930023,.931404,.932758,.934086,.935389,.936668,.937922,.939153,.940362,.941548,.942713,.943857,.944980,.946083,.947167,.948231,.949277,.950305,.951315,.952307,.953283,.954242,.955185,.956111,.957022,.957918,.958799,.959665,.960517,.961355,.962180,.962991,.963788,.964573,.965346,.966106,.966854,.967590,.968315,.969028,.969730,.970422,.971102,.971771,.972429,.973077,.973715,.974343,.974960,.975568,.976167,.976756,.977336,.977907,.978469,.979023,.979568,.980104,.980633,.981154,.981666,.982171,.982668,.983156,.983637,.984109,.984574,.985031,.985481,.985923,.986358,.986787,.987208,.987622,.988030,.988432,.988827,.989215,.989598,.989974,.990345,.990709,.991066,.991416,.991759,.992094,.992423,.992745,.993060,.993369,.993671,.993967,.994258,.994542,.994821,.995094,.995361,.995623,.995880,.996132,.996378,.996620,.996854,.997080,.997300,.997512,.997717,.997916,.998109,.998296,.998476,.998651,.998818,.998977,.999129,.999275,.999412,.999542,.999665,.999782,.999893,1.00000,.211625,.316388,.385538,.436885,.477556,.511112,.539589,.564260,.585971,.605318,.622732,.638536,.652979,.666258,.678529,.689919,.700532,.710456,.719765,.728521,.736793,.744626,.752058,.759123,.765852,.772270,.778401,.784266,.789883,.795269,.800440,.805409,.810189,.814792,.819227,.823504,.827633,.831620,.835475,.839203,.842813,.846312,.849705,.852997,.856192,.859295,.862310,.865241,.868091,.870864,.873563,.876190,.878750,.881243,.883674,.886044,.888355,.890610,.892811,.894960,.897058,.899109,.901114,.903073,.904989,.906864,.908697,.910492,.912248,.913968,.915651,.917300,.918915,.920497,.922048,.923568,.925057,.926518,.927950,.929355,.930733,.932085,.933412,.934714,.935992,.937247,.938478,.939688,.940876,.942043,.943190,.944316,.945423,.946510,.947579,.948630,.949663,.950678,.951676,.952658,.953623,.954572,.955506,.956424,.957327,.958216,.959090,.959950,.960796,.961629,.962449,.963256,.964050,.964831,.965601,.966359,.967105,.967839,.968563,.969275,.969977,.970667,.971346,.972015,.972673,.973322,.973960,.974588,.975207,.975817,.976417,.977008,.977590,.978164,.978729,.979285,.979834,.980374,.980906,.981431,.981946,.982454,.982954,.983445,.983929,.984404,.984873,.985334,.985787,.986234,.986673,.987106,.987532,.987951,.988363,.988770,.989170,.989563,.989951,.990333,.990707,.991073,.991432,.991783,.992127,.992465,.992795,.993118,.993435,.993746,.994050,.994348,.994641,.994927,.995207,.995482,.995751,.996015,.996274,.996528,.996773,.997010,.997239,.997460,.997674,.997881,.998081,.998274,.998461,.998642,.998814,.998977,.999133,.999280,.999419,.999550,.999672,.999787,.999896,1.00000,.209703,.313555,.382131,.433073,.473439,.506756,.535042,.559557,.581140,.600379,.617704,.633433,.647814,.661040,.673268,.684622,.695206,.705107,.714397,.723139,.731403,.739231,.746663,.753733,.760468,.766896,.773039,.778919,.784553,.789959,.795151,.800143,.804947,.809575,.814038,.818344,.822502,.826520,.830406,.834166,.837810,.841343,.844770,.848097,.851327,.854466,.857517,.860485,.863372,.866182,.868918,.871583,.874180,.876712,.879181,.881590,.883940,.886233,.888473,.890660,.892798,.894888,.896931,.898930,.900886,.902799,.904672,.906506,.908301,.910060,.911782,.913470,.915125,.916746,.918336,.919894,.921423,.922922,.924393,.925837,.927253,.928644,.930009,.931350,.932666,.933959,.935230,.936478,.937704,.938909,.940093,.941257,.942402,.943527,.944634,.945722,.946792,.947844,.948880,.949898,.950901,.951887,.952857,.953812,.954752,.955677,.956588,.957484,.958367,.959236,.960092,.960935,.961765,.962582,.963387,.964181,.964962,.965732,.966491,.967239,.967975,.968700,.969415,.970118,.970812,.971494,.972167,.972830,.973484,.974127,.974762,.975387,.976003,.976611,.977209,.977800,.978381,.978955,.979521,.980078,.980627,.981168,.981700,.982224,.982740,.983249,.983749,.984242,.984728,.985206,.985677,.986141,.986598,.987049,.987492,.987930,.988360,.988785,.989203,.989615,.990019,.990414,.990802,.991182,.991554,.991919,.992276,.992626,.992970,.993306,.993636,.993959,.994276,.994587,.994891,.995190,.995482,.995769,.996051,.996326,.996592,.996849,.997097,.997336,.997567,.997789,.998004,.998212,.998412,.998605,.998788,.998960,.999124,.999278,.999421,.999555,.999678,.999793,.999900,1.00000,.207135,.309811,.377673,.428131,.468150,.501212,.529307,.553678,.575155,.594318,.611589,.627284,.641648,.654870,.667105,.678477,.689087,.699022,.708353,.717141,.725451,.733329,.740812,.747932,.754720,.761201,.767399,.773333,.779023,.784484,.789732,.794781,.799643,.804328,.808848,.813211,.817427,.821504,.825448,.829266,.832967,.836556,.840038,.843419,.846702,.849894,.852996,.856015,.858952,.861811,.864596,.867309,.869954,.872532,.875047,.877501,.879895,.882233,.884517,.886747,.888927,.891059,.893143,.895183,.897178,.899132,.901043,.902916,.904749,.906545,.908305,.910030,.911720,.913377,.915002,.916595,.918159,.919692,.921196,.922673,.924123,.925546,.926945,.928318,.929667,.930993,.932296,.933576,.934835,.936072,.937289,.938485,.939662,.940819,.941957,.943077,.944178,.945262,.946329,.947379,.948412,.949430,.950431,.951418,.952389,.953346,.954288,.955216,.956130,.957031,.957918,.958792,.959654,.960503,.961340,.962165,.962978,.963780,.964570,.965349,.966117,.966874,.967619,.968355,.969080,.969794,.970499,.971193,.971878,.972553,.973219,.973876,.974524,.975163,.975793,.976415,.977028,.977633,.978230,.978819,.979399,.979971,.980534,.981089,.981636,.982174,.982705,.983228,.983744,.984252,.984753,.985246,.985733,.986212,.986685,.987151,.987611,.988064,.988510,.988951,.989382,.989805,.990219,.990625,.991022,.991412,.991793,.992167,.992534,.992893,.993245,.993590,.993928,.994260,.994585,.994903,.995215,.995521,.995821,.996115,.996399,.996672,.996936,.997191,.997437,.997674,.997903,.998123,.998336,.998542,.998736,.998920,.999093,.999257,.999408,.999548,.999676,.999795,.999902,1.00000,.205022,.306679,.373887,.423873,.463529,.496300,.524156,.548327,.569634,.588650,.605793,.621377,.635643,.648779,.660938,.672241,.682792,.692673,.701956,.710701,.718976,.726824,.734281,.741381,.748153,.754622,.760811,.766740,.772427,.777889,.783141,.788195,.793064,.797759,.802291,.806668,.810898,.814991,.818953,.822791,.826512,.830123,.833628,.837033,.840343,.843560,.846691,.849737,.852703,.855592,.858408,.861152,.863829,.866440,.868988,.871475,.873904,.876277,.878595,.880861,.883077,.885245,.887367,.889444,.891478,.893470,.895421,.897332,.899206,.901042,.902842,.904607,.906339,.908037,.909704,.911339,.912944,.914520,.916067,.917586,.919078,.920545,.921987,.923404,.924797,.926167,.927514,.928839,.930142,.931425,.932686,.933928,.935150,.936352,.937536,.938701,.939849,.940979,.942091,.943187,.944267,.945331,.946379,.947412,.948430,.949433,.950422,.951397,.952358,.953306,.954241,.955162,.956071,.956967,.957852,.958724,.959584,.960433,.961271,.962097,.962913,.963717,.964510,.965293,.966065,.966827,.967578,.968320,.969052,.969775,.970488,.971192,.971887,.972573,.973250,.973918,.974578,.975230,.975874,.976509,.977136,.977754,.978364,.978965,.979558,.980143,.980721,.981290,.981852,.982407,.982954,.983493,.984026,.984552,.985070,.985582,.986088,.986586,.987079,.987564,.988041,.988510,.988970,.989421,.989865,.990300,.990727,.991147,.991560,.991965,.992362,.992753,.993137,.993514,.993884,.994247,.994605,.994955,.995300,.995639,.995965,.996280,.996584,.996877,.997159,.997431,.997694,.997947,.998192,.998427,.998648,.998855,.999048,.999230,.999394,.999543,.999678,.999800,.999907,1.00000,.203245,.304056,.370727,.420331,.459697,.492240,.519912,.543931,.565111,.584020,.601074,.616581,.630781,.643862,.655973,.667237,.677753,.687606,.696865,.705592,.713852,.721688,.729137,.736233,.743003,.749472,.755664,.761598,.767292,.772763,.778025,.783091,.787974,.792683,.797231,.801625,.805874,.809985,.813967,.817825,.821568,.825202,.828730,.832159,.835493,.838735,.841891,.844964,.847956,.850873,.853715,.856488,.859193,.861832,.864409,.866926,.869384,.871786,.874134,.876430,.878677,.880876,.883029,.885137,.887201,.889224,.891207,.893150,.895055,.896923,.898755,.900552,.902316,.904046,.905745,.907412,.909050,.910658,.912237,.913788,.915313,.916813,.918287,.919737,.921163,.922565,.923945,.925303,.926640,.927955,.929249,.930524,.931779,.933014,.934231,.935429,.936610,.937773,.938918,.940047,.941160,.942256,.943338,.944404,.945455,.946492,.947514,.948522,.949517,.950498,.951466,.952421,.953363,.954293,.955211,.956116,.957010,.957893,.958763,.959623,.960472,.961310,.962137,.962953,.963759,.964555,.965340,.966116,.966882,.967639,.968386,.969124,.969853,.970573,.971285,.971988,.972682,.973368,.974046,.974715,.975376,.976029,.976673,.977309,.977937,.978557,.979169,.979773,.980370,.980959,.981541,.982116,.982684,.983244,.983798,.984345,.984885,.985419,.985946,.986467,.986979,.987482,.987977,.988463,.988941,.989411,.989872,.990326,.990773,.991211,.991643,.992067,.992484,.992894,.993297,.993694,.994084,.994467,.994844,.995215,.995573,.995919,.996253,.996575,.996887,.997188,.997478,.997759,.998030,.998291,.998536,.998766,.998981,.999183,.999363,.999525,.999670,.999800,.999909,1.00000,.200640,.300213,.366101,.415148,.454093,.486306,.513712,.537513,.558511,.577270,.594195,.609595,.623704,.636708,.648755,.659964,.670436,.680252,.689482,.698185,.706428,.714252,.721695,.728787,.735559,.742033,.748233,.754178,.759887,.765374,.770655,.775742,.780648,.785383,.789957,.794380,.798658,.802801,.806816,.810708,.814486,.818155,.821720,.825186,.828558,.831839,.835034,.838146,.841179,.844137,.847021,.849835,.852582,.855264,.857884,.860444,.862946,.865392,.867784,.870124,.872415,.874659,.876856,.879009,.881119,.883187,.885215,.887203,.889153,.891066,.892944,.894786,.896595,.898371,.900115,.901828,.903511,.905164,.906789,.908385,.909956,.911500,.913020,.914515,.915986,.917434,.918860,.920263,.921644,.923004,.924344,.925663,.926963,.928244,.929505,.930748,.931973,.933181,.934371,.935544,.936702,.937843,.938969,.940080,.941175,.942257,.943324,.944377,.945416,.946442,.947455,.948455,.949442,.950417,.951379,.952329,.953268,.954195,.955111,.956015,.956909,.957792,.958664,.959526,.960378,.961220,.962051,.962874,.963686,.964490,.965284,.966069,.966845,.967613,.968371,.969122,.969864,.970598,.971323,.972041,.972750,.973451,.974144,.974829,.975507,.976176,.976838,.977492,.978139,.978779,.979411,.980037,.980655,.981267,.981872,.982470,.983061,.983647,.984226,.984798,.985362,.985916,.986462,.986999,.987527,.988048,.988560,.989064,.989560,.990048,.990529,.991002,.991468,.991926,.992378,.992823,.993260,.993691,.994116,.994534,.994938,.995330,.995709,.996076,.996431,.996775,.997108,.997430,.997742,.998044,.998329,.998596,.998847,.999084,.999294,.999481,.999648,.999796,.999911,1.00000,.199360,.298314,.363804,.412564,.451288,.483323,.510583,.534261,.555155,.573823,.590670,.606001,.620050,.633000,.644999,.656166,.666600,.676383,.685583,.694260,.702479,.710284,.717709,.724787,.731546,.738010,.744202,.750141,.755845,.761330,.766609,.771696,.776603,.781340,.785918,.790344,.794628,.798778,.802799,.806699,.810485,.814163,.817738,.821214,.824597,.827890,.831097,.834222,.837268,.840238,.843136,.845965,.848726,.851423,.854058,.856633,.859151,.861613,.864021,.866378,.868686,.870947,.873162,.875332,.877460,.879547,.881593,.883600,.885569,.887502,.889398,.891261,.893089,.894885,.896650,.898383,.900086,.901760,.903405,.905023,.906614,.908180,.909721,.911238,.912731,.914201,.915649,.917074,.918478,.919861,.921223,.922565,.923888,.925192,.926476,.927743,.928991,.930222,.931436,.932633,.933814,.934979,.936129,.937264,.938385,.939491,.940582,.941660,.942725,.943776,.944814,.945839,.946852,.947852,.948840,.949816,.950781,.951734,.952676,.953606,.954526,.955436,.956335,.957223,.958102,.958971,.959830,.960680,.961520,.962351,.963173,.963986,.964790,.965585,.966372,.967151,.967921,.968683,.969437,.970184,.970922,.971652,.972374,.973088,.973795,.974495,.975186,.975871,.976548,.977218,.977882,.978538,.979187,.979830,.980467,.981096,.981720,.982337,.982947,.983552,.984148,.984735,.985313,.985884,.986446,.987000,.987546,.988084,.988615,.989138,.989653,.990162,.990663,.991157,.991644,.992124,.992598,.993065,.993525,.993980,.994420,.994848,.995262,.995665,.996055,.996434,.996802,.997159,.997506,.997842,.998158,.998457,.998738,.999003,.999238,.999446,.999630,.999793,.999912,1.00000,.198536,.297091,.362323,.410895,.449474,.481392,.508554,.532150,.552973,.571580,.588373,.603657,.617663,.630576,.642541,.653678,.664084,.673842,.683020,.691676,.699878,.707666,.715077,.722142,.728889,.735344,.741527,.747459,.753156,.758635,.763910,.768994,.773897,.778633,.783209,.787634,.791918,.796068,.800090,.803992,.807780,.811460,.815038,.818518,.821905,.825202,.828414,.831544,.834595,.837572,.840476,.843311,.846079,.848783,.851425,.854008,.856534,.859004,.861421,.863786,.866103,.868372,.870597,.872777,.874915,.877011,.879067,.881085,.883065,.885009,.886917,.888790,.890630,.892438,.894214,.895959,.897674,.899361,.901018,.902649,.904253,.905832,.907386,.908916,.910422,.911905,.913367,.914806,.916224,.917620,.918997,.920354,.921691,.923009,.924308,.925589,.926853,.928099,.929327,.930539,.931736,.932916,.934082,.935233,.936369,.937491,.938599,.939693,.940773,.941841,.942895,.943937,.944966,.945983,.946988,.947981,.948963,.949933,.950892,.951840,.952777,.953704,.954621,.955527,.956424,.957311,.958188,.959056,.959915,.960764,.961605,.962437,.963260,.964074,.964880,.965678,.966468,.967249,.968023,.968789,.969547,.970297,.971040,.971775,.972502,.973222,.973935,.974640,.975339,.976031,.976715,.977393,.978065,.978730,.979388,.980040,.980686,.981325,.981959,.982586,.983205,.983815,.984418,.985012,.985599,.986177,.986748,.987312,.987868,.988416,.988958,.989492,.990020,.990540,.991054,.991561,.992062,.992556,.993044,.993525,.993993,.994449,.994891,.995322,.995740,.996147,.996543,.996928,.997302,.997666,.998009,.998334,.998641,.998930,.999186,.999413,.999613,.999789,.999913,1.00000,.197744,.295923,.360917,.409321,.447773,.479591,.506673,.530204,.550973,.569535,.586291,.601543,.615523,.628413,.640360,.651481,.661876,.671623,.680793,.689444,.697641,.705426,.712834,.719898,.726646,.733101,.739285,.745219,.750919,.756401,.761680,.766767,.771676,.776416,.780998,.785429,.789719,.793876,.797905,.801813,.805609,.809297,.812882,.816370,.819764,.823069,.826289,.829427,.832486,.835471,.838383,.841226,.844003,.846715,.849366,.851957,.854491,.856970,.859395,.861769,.864094,.866373,.868606,.870795,.872941,.875046,.877111,.879138,.881127,.883079,.884996,.886878,.888727,.890544,.892328,.894082,.895807,.897502,.899168,.900807,.902420,.904008,.905571,.907110,.908626,.910119,.911589,.913038,.914465,.915871,.917257,.918624,.919970,.921298,.922607,.923898,.925171,.926427,.927666,.928888,.930094,.931285,.932461,.933622,.934769,.935902,.937021,.938126,.939218,.940297,.941363,.942416,.943458,.944487,.945504,.946509,.947503,.948485,.949457,.950417,.951367,.952307,.953237,.954157,.955068,.955969,.956860,.957742,.958616,.959480,.960335,.961182,.962020,.962850,.963672,.964486,.965291,.966089,.966879,.967661,.968435,.969202,.969961,.970712,.971456,.972193,.972922,.973644,.974360,.975068,.975769,.976464,.977152,.977834,.978509,.979177,.979840,.980496,.981146,.981790,.982426,.983054,.983674,.984286,.984890,.985487,.986076,.986658,.987232,.987800,.988360,.988913,.989460,.990000,.990533,.991060,.991580,.992094,.992601,.993103,.993592,.994069,.994534,.994987,.995430,.995861,.996282,.996692,.997093,.997483,.997854,.998205,.998538,.998855,.999134,.999379,.999595,.999786,.999914,1.00000,.196759,.294467,.359161,.407350,.445638,.477327,.504303,.527746,.548442,.566941,.583644,.598850,.612791,.625647,.637565,.648661,.659034,.668763,.677917,.686554,.694739,.702513,.709913,.716968,.723708,.730157,.736336,.742265,.747961,.753439,.758715,.763801,.768708,.773446,.778027,.782459,.786749,.790906,.794935,.798845,.802642,.806332,.809921,.813411,.816809,.820118,.823342,.826485,.829549,.832539,.835457,.838306,.841089,.843808,.846465,.849063,.851604,.854090,.856523,.858905,.861238,.863525,.865766,.867964,.870119,.872234,.874309,.876345,.878343,.880306,.882233,.884126,.885985,.887813,.889608,.891374,.893109,.894815,.896494,.898144,.899769,.901369,.902944,.904496,.906024,.907530,.909013,.910475,.911915,.913335,.914735,.916114,.917475,.918817,.920140,.921445,.922732,.924002,.925255,.926492,.927713,.928919,.930110,.931287,.932449,.933597,.934732,.935853,.936961,.938056,.939138,.940208,.941266,.942312,.943346,.944368,.945379,.946378,.947367,.948345,.949313,.950271,.951218,.952157,.953086,.954005,.954915,.955817,.956709,.957592,.958467,.959334,.960192,.961042,.961884,.962718,.963544,.964362,.965172,.965976,.966771,.967559,.968340,.969113,.969879,.970638,.971391,.972136,.972874,.973606,.974332,.975050,.975763,.976469,.977169,.977862,.978550,.979232,.979907,.980577,.981239,.981894,.982541,.983180,.983812,.984438,.985055,.985666,.986270,.986868,.987458,.988042,.988619,.989190,.989755,.990313,.990865,.991412,.991952,.992486,.993008,.993519,.994018,.994507,.994984,.995451,.995908,.996354,.996791,.997218,.997625,.998012,.998382,.998734,.999045,.999320,.999564,.999779,.999915,1.00000,.196097,.293485,.357973,.406012,.444185,.475781,.502681,.526059,.546700,.565152,.581813,.596982,.610891,.623719,.635611,.646684,.657036,.666747,.675885,.684507,.692679,.700442,.707831,.714878,.721611,.728053,.734226,.740150,.745842,.751317,.756591,.761674,.766580,.771319,.775899,.780331,.784622,.788780,.792812,.796724,.800524,.804217,.807808,.811302,.814703,.818016,.821244,.824391,.827460,.830454,.833377,.836231,.839019,.841743,.844406,.847010,.849557,.852048,.854487,.856875,.859215,.861508,.863755,.865960,.868122,.870243,.872325,.874368,.876373,.878343,.880277,.882177,.884044,.885879,.887682,.889455,.891198,.892912,.894598,.896256,.897889,.899497,.901080,.902640,.904177,.905691,.907182,.908653,.910102,.911531,.912939,.914328,.915698,.917049,.918381,.919695,.920992,.922272,.923534,.924781,.926011,.927227,.928428,.929615,.930788,.931946,.933091,.934223,.935342,.936448,.937541,.938622,.939691,.940748,.941793,.942826,.943849,.944860,.945860,.946850,.947829,.948799,.949759,.950709,.951651,.952583,.953506,.954420,.955325,.956221,.957110,.957989,.958861,.959724,.960580,.961427,.962267,.963099,.963924,.964741,.965551,.966353,.967149,.967937,.968719,.969493,.970261,.971022,.971777,.972525,.973266,.974002,.974731,.975454,.976171,.976881,.977587,.978286,.978979,.979667,.980347,.981020,.981686,.982345,.982997,.983642,.984280,.984912,.985537,.986155,.986768,.987373,.987973,.988566,.989153,.989735,.990310,.990880,.991443,.992001,.992548,.993084,.993609,.994123,.994627,.995121,.995605,.996079,.996543,.996999,.997434,.997851,.998249,.998631,.998969,.999270,.999536,.999773,.999915,1.00000][]
	#
	# FIND NEAREST ENERGY IN ARRAY
	flag=0
	for J in range(1,24):
	  if(EIN >= ET1[J]and EIN < ET1(J+1)) :
	  	IPT=J
	  	if(EIN > ((ET1[J]+ET1(J+1))*0.5)):
	    	IPT=J+1
	    flag=1						###PSEUDO- if 
	  # endif
	if(flag):																	
    	print(' ENERGY IN def BRENERGY OUT OF RANGE EIN=',float(EIN))
    	STOP
    else:
    	pass
	if(IZ == 1):
		for J in range(1,200):
	    	TEMP[J]=Z1[J][IPT]
	else if(IZ == 2) :
	    for J in range(1,200):
		    TEMP[J]=Z2[J][IPT]
	else if(IZ == 5) :
	    for J in range(1,200):++
	        TEMP[J]=Z5[J][IPT]
	else if(IZ == 6) :
	    for J in range(1,200):
	        TEMP[J]=Z6[J][IPT]
	else if(IZ == 7) :
	    for J in range(1,200):
	        TEMP[J]=Z7[J][IPT]
	else if(IZ == 8) :
	    for J in range(1,200):
	    	TEMP[J]=Z8[J][IPT]
	else if(IZ == 9) :
	    for J in range(1,200):
	    	TEMP[J]=Z9[J][IPT]
	else if(IZ == 10) :
	    for J in range(1,200):
			TEMP[J]=Z10[J][IPT]
	else if(IZ == 14) :
	    for J in range(1,200):
			TEMP[J]=Z14[J][IPT]
	else if(IZ == 15) :
	    for J in range(1,200):
			TEMP[J]=Z15[J][IPT]
	else if(IZ == 16) :
	    for J in range(1,200):
			TEMP[J]=Z16[J][IPT]
	else if(IZ == 17) :
	    for J in range(1,200):
			TEMP[J]=Z17[J][IPT]
	else if(IZ == 18) :
		for J in range(1,200):
			TEMP[J]=Z18[J][IPT]
	else if(IZ == 32) :
		for J in range(1,200):
			TEMP[J]=Z32[J][IPT]
	else if(IZ == 35) :
		for J in range(1,200):
			TEMP[J]=Z35[J][IPT]
	else if(IZ == 36) :
		for J in range(1,200):
			TEMP[J]=Z36[J][IPT]
	else if(IZ == 53) :
		for J in range(1,200):
			TEMP[J]=Z53[J][IPT]
	else if(IZ == 54) :
		for J in range(1,200):
			TEMP[J]=Z54[J][IPT]
	else if(IZ == 55) :
		for J in range(1,200):
			TEMP[J]=Z55[J][IPT]
    else:
		# ATOMIC NUMBER NOT CORRECT
		print(' ATOMIC NUMBER =',IZ,' NOT IN DATA BASE')
    	STOP
    # endif
    RN=DRAND48(RDUM)
    if(RN < TEMP[1]) :
    	J=1
		EOUT=EIN*0.5/200.0
		RETURN
    # endif
    for J in range(1,199):
    	if(RN > TEMP[J] and RN <= TEMP(J+1)) :
			EOUT=EIN*(float[J]+0.5)/200.0
			RETURN
		# endif 
	print(' SAMPLING ERROR IN def BRENERGY def STOPPED')
	STOP
	RETURN
      # end
def BREMSANGLE(EIN,EGAMMA,Z,ANGL,EANGL):
	#IMPLICIT #real*8(A-H,O-Z)
	#IMPLICIT #integer*8(I-N)
	ANG=[0 for x in range(19)]
	XSEC=[0 for x in range(19)]
	XSECL=[0 for x in range(19)]
	ARR=[0 for x in range(181)]
	DATA ANG/0.0,.17453,.34907,.52360,.69813,.87266,1.0472,1.2217,1.3963,1.5708,1.7453,1.9199,2.0944,2.2689,2.4435,2.6180,2.7925,2.9671,3.14159265359/
	# CALCULATES BREMSSTRAHLUNG GAMMA ANGLE IN RADIANS =ANGL
	#   INPUTS: ELECTRON ENERGY =EIN , GAMMA ENERGY=EGAMMA BOTH IN EV
	#  ATOMIC NUMBER OF ATOM = Z
	# CALCULATES ELECTRON ANGLE EANGL WITH APPROXIMATION OF CONSERVED
	# TRANSVERSE MOMENTUM
	HBAR=1.054571726D-34
	API=numpy.arccos(-1.00)
	ANG[19]=API
	NSTEP=180
	DTHETA=API/18.0
	THETA=-DTHETA
	for K in range(1,19):
		THETA=THETA+DTHETA
		# CALL def
		BREMSK(EIN,EGAMMA,THETA,Z,XSEC1,EANGL)
#      WRITE(6,77) EIN,EGAMMA,THETA,EANGL
#  77  print(' EIN=',D12.4,' EGAMMA=',D12.4,' THETA=',D12.4,' EANGL=',D12.4)
		XSEC[K]=XSEC1
# LOAD LOG ARRAY
		XSECL[K]=math.log(XSEC[K])
#      WRITE(6,200) (XSEC[K], K=1,19)
#  200 print(' XSEC FOR 10 DEGREE SCATTERING STEPS =',/,10D12.4,/9D12.4)
# CALCULATE NORMALISED INTEGRAL FOR SAMPLING
# USE LOG INTERPOLATION AND SAMPLE AT 1 DEGREE
		ARR[1]=XSEC[1]*DSIN(ANG[1])
		ARR[NSTEP+1]=XSEC[19]*DSIN(ANG[19])
		ASTEP=API/float(NSTEP)
		AST=-ASTEP
		for L in range(1,(NSTEP+1)):
			AST=AST+ASTEP
			flag=0
			J=0
			for J in range(2,19):
				if(AST <= ANG[J]) :
					flag=1
					break
				else:
					pass
			if(flag):
				J=19
			print("self-check J=",J)  #SELF ADDED
			A=(XSECL[J]-XSECL[J-1])/(ANG[J]-ANG[J-1])
			B=(ANG[J-1]*XSECL[J]-ANG[J]*XSECL[J-1])/(ANG[J-1]-ANG[J])
			ARR[L]=math.exp(A*AST+B)*DSIN(AST)
#  INTEGRATE AND NORMALISE
		ASUM=0.0
		for J in range(1,(NSTEP+1)):
			ASUM=ASUM+ARR[J]
		for J in range(1,(NSTEP+1)):
			ARR[J]=ARR[J]/ASUM
# CREATE CUMMULANT
		for J  in range(2,(NSTEP+1)):
			ARR[J]=ARR(J-1)+ARR[J]
# TEST AGAINST RANDOM NUMBER TO DETERMINE SCATTERING ANGLE
		RN=DRAND48()
		ASCLE=API/180.0
		for J in range(2,180):
			if(RN > ARR[J]and RN <= ARR(J+1)) :
				ANGL=float[J]*ASCLE
		# endif
		RETURN
      # end
def BREMSK(ein,egamma,Theta_i,Z,XSEC,Theta_fp):
	#IMPLICIT #real*8(a-h,o-z)
	#IMPLICIT #integer*8(i-n)
	xint=[0 for x in range(8)]
	# REF:   CHRSITOPH KOEHN AND UTE EBERT :
	#        PREPRINT    : ARXIV 1202.4879v4 feb2013
	#        PUBLICATION : ATMOSPHERIC RESEARCH 135(2014)432
	#-----------------------------------------------------------
	#     CHANGED INPUT ein AND egamma TO EV.
	# MOD TO INCLUDE CALCULATION OF Theta_f 
	#     GIVEN  ein,egamma,theta_i and assuming q=0
	#----------------------------------------------------------
	# DEFINE CONSTANTS (CODATA 2012)
	hbar=1.054571726*(10**-34)
	Vc=299792458.0
	Vc2=299792458.0*299792458.0
	electronMass=9.10938291*(10**-31)
	electronCharge=1.602176565*(10**-19)
	E_rest=electronMass*Vc2
	alpha_fine=7.2973525698*(10**-3)
	PI=numpy.arccos(-1.00)
	#
	energy=ein*electronCharge
	phot_freq=egamma*electronCharge/hbar
	#
	cost=DCOS(Theta_i)
	sint=DSIN(Theta_i)
#  integrals which are needed for Bremsstrahlung
#  define physical quantities
	E_0=energy+E_rest
	p_0=sqrt(((energy+E_rest)/Vc)**2-Vc2*electronMass**2)
	E_f=E_0-hbar*phot_freq
	p_f=sqrt((E_f/Vc)**2-Vc2*electronMass**2)
	#  help defs for cross section
	tri_1=-p_0**2-p_f**2-(hbar/Vc*phot_freq)**2+2*hbar/Vc*phot_freq*p_0*cost
	tri_2=-2*hbar/Vc*phot_freq*p_f+2*p_0*p_f*cost
	#
	A=Z**2*(alpha_fine)**3/(2.0*PI)**2*p_f/p_0*hbar*hbar/phot_freq   
	#  prefactor of all cross section terms 
	B=Z**2*(alpha_fine)**3/(2.0*PI)*p_f/p_0*hbar*hbar/phot_freq       
	#  prefactor for Theta_i=0
	#
	#  SOME FREQUENTLY USED COMBINATIONS
	C1=4.0*p_0*p_0*p_f*p_f*sint*sint
	C2=4.0*E_rest*E_rest*p_0*p_0*p_f*p_f*sint*sint
	C3=E_0-Vc*p_0*cost
	C4=tri_2*E_f+tri_1*p_f*Vc
	C5=tri_1*E_f+tri_2*p_f*Vc
#
	if (Theta_i != 0.0):
		xint[1]=2.0*PI*A/math.sqrt(tri_2**2+C1)*math.log((tri_2**2+C1-math.sqrt(tri_2**2+C1)*(tri_1+tri_2)+tri_1*tri_2)/(-tri_2**2-C1-math.sqrt(tri_2**2+C1)*(tri_1-tri_2)+tri_1*tri_2))*(1.0+Vc*tri_2/(p_f*C3)-p_0**2*Vc2*sint**2/C3**2-2.0*hbar*hbar*phot_freq**2*p_f*tri_2/(Vc*C3*(tri_2**2+C1)))
		#
		xint[2]=-2.0*PI*A*Vc/(p_f*C3)*math.log((E_f+p_f*Vc)/(E_f-p_f*Vc))
		#
		xint[3]=2.0*PI*A/math.sqrt(C4**2+C2)*math.log(((E_f+p_f*Vc)*(C1*(E_f-p_f*Vc)+(tri_1+tri_2)*(C4-math.sqrt(C4**2+C2))))/((E_f-p_f*Vc)*(C1*(-E_f-p_f*Vc)+(tri_1-tri_2)*(C4-math.sqrt(C4**2+C2)))))*(-((tri_2**2+C1)*(E_f**3+E_f*p_f**2*Vc2)+p_f*Vc*(2.0*(tri_1**2-C1)*E_f*p_f*Vc+tri_1*tri_2*(3.0*E_f**2+p_f**2*Vc2)))/(C4**2+C2)-Vc*C4/(p_f*C3)-4.0*E_0**2*p_f**2*(2.0*C4**2-C2)*C5/(C4**2+C2)**2+(2.0*C2*(E_0**2+E_f**2)-2.0*hbar*hbar*phot_freq**2*p_0**2*sint**2*p_f*Vc*C4+2.0*hbar*hbar*phot_freq**2*p_f*electronMass**2*Vc**3*C4)/(C3*(C4**2+C2)))
		#
		xint[4]=-4.0*PI*A*p_f*Vc*C4/(C4**2+C2)-16.0*PI*E_0**2*p_f**2*A*C4**2/(C4**2+C2)**2
		#
		xint[5]=4.0*PI*A/((-tri_2**2+tri_1**2-C1)*(C4**2+C2))*(hbar*hbar*phot_freq**2*p_f**2/C3*(E_f*(2.0*tri_2**2*(tri_2**2-tri_1**2)+2.0*C1*(tri_2**2+tri_1**2))+p_f*Vc*(2.0*tri_1*tri_2*(tri_2**2-tri_1**2)+4.0*tri_1*tri_2*C1))/(tri_2**2+C1)+2.0*hbar*hbar*phot_freq**2*p_0**2*sint**2*(2.0*tri_1*tri_2*p_f*Vc+2.0*tri_2**2*E_f+2.0*C1*E_f)/C3+2.0*E_0**2*p_f**2*(2.0*(tri_2**2-tri_1**2)*C4**2+2.0*C1*((tri_1**2+tri_2**2)*(E_f**2+p_f**2*Vc2)+4.0*tri_1*tri_2*E_f*p_f*Vc))/(C4**2+C2)+2.0*C1*(E_0**2+E_f**2)*C5/C3)
		#
		xint[6]=16.0*PI*E_f**2*p_0**2*sint**2*A/(C3**2*(-tri_2**2+tri_1**2-C1))
		#
		xint[7]=0.0

		xint[8]=0.0
	else:
		xint[1]=-2.0*B*p_f*Vc/C4
		#
		xint[2]=B*p_f**2*Vc2*(-tri_1**2+tri_2**2)/(tri_2*C4**2)*math.log((tri_1+tri_2)/(tri_1-tri_2))
		# 
		xint[3]=B*(2.0*tri_1*E_f*p_f*Vc+tri_2*(E_f**2+p_f**2*Vc2))/C4**2*math.log((E_f+p_f*Vc)/(E_f-p_f*Vc))
		# 
		xint[4]=-16.0*B*E_0**2*p_f**2/C4**2
		# 
		xint[5]=-4.0*B*hbar*hbar*p_f**2*phot_freq**2/((E_0-Vc*p_0)*C4*tri_2)
		#
		xint[6]=-8.0*B*E_0**2*p_f**2*C5/C4**3*math.log(((tri_1-tri_2)*(E_f-p_f*Vc))/((tri_1+tri_2)*(E_f+p_f*Vc)))
		# 
		xint[7]=2.0*B*hbar*hbar*p_f**2*phot_freq**2*(2.0*tri_1*tri_2*E_f+tri_1**2*p_f*Vc+tri_2**2*p_f*Vc)/((tri_2*E_f+tri_1*p_f*Vc)**2*(E_0-Vc*p_0)*tri_2**2)*math.log((tri_1+tri_2)/(tri_1-tri_2))
		#
		xint[8]=2.0*B*hbar*hbar*p_f*phot_freq**2*(E_f**2-p_f**2*Vc2)/(C4**2*(E_0-Vc*p_0)*Vc)*math.log((E_f-p_f*Vc)/(E_f+p_f*Vc))

#
	XSEC=xint[1]+xint[2]+xint[3]+xint[4]+xint[5]+xint[6]+xint[7]+xint[8]
#     write(6,88) (xint[I],i=1,8)
# 88  print(' xintegral=',/,4(D14.4,X),/,4(D14.4,X))
	Theta_fp=dasin((hbar*phot_freq/Vc*sint)/p_f)
	RETURN
      # end
def DENSITY:
	#IMPLICIT #real*8 (A-H,O-Z)
	#IMPLICIT #integer*8 (I-N)
	global DEN=[0 for x in range(20000)]
	global CAN1,AN2,AN3,AN4,AN5,AN6,AN,FRAC=[0 for x in range(6)]
	global NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
	global NGASN=[0 for x in range(6)]
	global BET=[0 for x in range(2000)],GAM=[0 for x in range(20000)],VC,EMS
	AND=[0 for x in range(6)],EIAV=[0 for x in range(80)],X00=[0 for x in range(80)]
	X11=[0 for x in range(80)],AKS=[0 for x in range(80)],AAA=[0 for x in range(80)]
	JELEC=[0 for x in range(80)]
	# DENSITY EFFECT CONSTANTS
	# EIAV ENERGY IN EV
	# JELEC NUMBER OF ELECTRONS PER ATOM OR MOLECULE
	DATA EIAV/115.0,188.0,41.8,41.8,137.0,352.0,482.0,41.7,45.4,47.1,48.3,85.0,0.0,71.6,95.0,82.0,0.0,0.0,0.0,0.0,19.2,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,128.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,48.3,36*0.0/
	DATA JELEC/42,18,2,2,10,36,54,10,18,26,34,22,0,10,16,14,0,0,0,0,2,0,0,0,0,0,0,0,0,70,0,0,0,0,0,0,0,0,0,0,0,0,0,34,36*0/
	DATA X00/1.70,1.7635,2.2017,2.2017,2.0735,1.7158,1.5630,1.6263,1.5090,1.4339,1.3788,1.6294,0.0,1.7952,1.7541,1.7378,0.0,0.0,0.0,0.0,1.8639,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.6,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.3788,36*0.0/
	DATA X11/4.00,4.4855,3.6122,3.6122,4.6421,5.0748,4.7371,3.9716,3.8726,3.8011,3.7524,4.1825,0.0,4.3437,4.3213,4.1323,0.0,0.0,0.0,0.0,3.2718,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,4.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.7524,36*0.0/
	DATA AKS/3.00,2.9618,5.8347,5.8347,3.5771,3.4051,2.7414,3.6257,3.6095,3.5920,3.4884,3.3227,0.0,3.5901,3.2913,3.2125,0.0,0.0,0.0,0.0,5.7273,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.4884,36*0.0/
	DATA AAA/.18551,.19714,.13443,.13443,.08064,.07446,.23314,.09253,0.09627,0.09916,.10852,.11768,0.0,.08101,.11778,.15349,0.0,0.0,0.0,0.0,.14092,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,.177484,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,.10852,36*0.0/
	#
	API=numpy.arccos(-1.00)                                                 
	EMS=510998.9280
	RE=2.8179403267*(10**-13)
	ALPH=137.035999074
	ABZERO=273.150                                                   
	ATMOS=760.00                                                     
	#                                                                       
	# DENSITY EFFECT CALCULATION
	AND[1]=AN1
	AND[2]=AN2
	AND[3]=AN3
	AND[4]=AN4
	AND[5]=AN5
	AND[6]=AN6
	HSUM=0.0
	SUM1=0.0
	SUMDNOM=0.0
	for L1 in range(1,NGAS):
		SUM1=SUM1+FRAC[L1]*float(JELEC(NGASN[L1]))*math.log(EIAV[NGASN[L1]]) 
		SUMDNOM=SUMDNOM+FRAC[L1]*float(JELEC(NGASN[L1]))
		HSUM=HSUM+AND[L1]*float(JELEC(NGASN[L1]))
	EIBAR=math.exp(SUM1/SUMDNOM)
# PLASMA ENERGY
	HWP1=math.sqrt(4.0*API*HSUM*RE**3)*ALPH*EMS
#
	DELDEN=math.log(EIBAR/HWP1)
	CBAR=1.0+2.0*DELDEN
	flag=0   #SELF ADDED
	if(NGAS == 1):  #22392
 		flag=1
# CALC X0 AND X1
	if(CBAR < 10.0):
		X0=1.6
		X1=4.0
	else if(CBAR >= 4.0 and CBAR < 10.5) :
		X0=1.7
		X1=4.0
	else if(CBAR >= 10.5 and CBAR < 11.0) :
		X0=1.8
		X1=4.0
	else if(CBAR >= 11.0 and CBAR < 11.5) :
		X0=1.9
		X1=4.0
	else if(CBAR >= 11.5 and CBAR < 12.25) :
		X0=2.0
		X1=4.0
	else if(CBAR >= 12.25 and CBAR < 13.804) :
		X0=2.0
		X1=5.0
	else: 
		X0=0.326*CBAR-1.5
		X1=5.0
	# endif
	if(flag==1):
		AKBAR=3.0
		ABAR=(CBAR-2.0*math.log(10.00)*X0)/((X1-X0)**3)
	else if(flag==0):
		AKBAR=AKS[NGASN[1]]
		X0=X00[NGASN[1]]
		X1=X11[NGASN[1]]
		ABAR=AAA[NGASN[1]]
	else:
		pass
# CORRECT X0 AND X1 FOR DENSITY CHANGE FROM 20C AND 760 TORR
# NB CORRECTION TO CBAR ALREADY DONE
	DCOR=0.5*math.log10(TORR*293.15/(760.0*(TEMPC+ABZERO)))
	X0=X0-DCOR
	X1=X1-DCOR
	# CALCULATE DENSITY CORRECTION FACTOR ARRAY DEN(20000)
	AFC=2.0*math.log(10.00)
	for I in range(1,20000):
		BG=BET[I]*GAM[I]
		X=math.log10(BG)
		if(X < X0):
			DEN[I]=0.0
		else if(X > X0 and X < X1) :
			DEN[I]=ABAR*math.exp(AKBAR*math.log(X1-X))+AFC*X-CBAR
		else: 
			DEN[I]=AFC*X-CBAR              
		# endif
		#     WRITE(6,99) DEN[I]
		#  99 print(' DENSITY CORRECTION=',D12.5)
		
	RETURN
      # end
def SETUP(LAST):                                            
	#IMPLICIT #real*8 (A-H,O-Z) 
	#IMPLICIT #integer*8 (I-N) 
	#integer*4 NSEED                                       
	global NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
	global ECHARG,EMASS,AMU,PIR2
	global KGAS,LGAS,DETEFF,EXCWGHT
	global NDVEC,CONST1,CONST2,CONST3,CONST4,CONST5                  
	global AN1,AN2,AN3,AN4,AN5,AN6,AN,FRAC=[0 for x in range(6)]               
	global NGASN=[0 for x in range(6)]                                 
	global TMAX,SMALL,API,ESTART,THETA,PHI,TCFMAX=[0 for x in range(10)],TCFMAX1,RSTART,EFIELD,ETHRM,ECUT,NEVENT,IMIP,IWRITE
	global DRXINIT,DRYINIT,DRZINIT
	global EOVB,WB,BTHETA,BMAG 
	global DOUBLE=[[0 for x in range(6)] for y in range(20000)],AVPFRAC(3,6)
	global CMINIXSC=[0 for x in range(6)],CMINEXSC=[0 for x in range(6)],ECLOSS=[0 for x in range(6)],WPLN=[0 for x in range(6)],ICOUNT
	global OVAN1,VAN2,VAN3,VAN4,VAN5,VAN6,VAN
	global =[0 for x in range(30)],NETOT,NPRIME,TMAX1,TIME=[0 for x in range(300)],NNULL,NITOT,ICOLN=[0 for x i range(512)],ICOLNN=[0 for x in range(60)],NREAL,NEXCTOT
	global MSUM=[0 for x in range(10000)],MCOMP=[0 for x in range(10000)],MRAYL=[0 for x in range(10000)],MPAIR=[0 for x in range(10000)],MPHOT=[0 for x in range(10000)],MVAC=[0 for x in range(10000)]
	global BET=[0 for x in range(2000)],GAM=[0 for x in range(20000)],VC,EMS 
	global ICMP,ICFLG,IRAY,IRFLG,IPAP,IPFLG,IBRM,IBFLG,LPEFLG 
	global E=[0 for x in range(20000)],EROOT=[0 for x in range(20000)],QTOT=[0 for x in range(20000)],QREL=[0 for x in range(20000)],QINEL=[0 for x in range(20000)],QEL=[0 for x in range(20000)]
	global NXPL10=[0 for x in range(31)],NYPL10=[0 for x in range(31)],NZPL10=[0 for x in range(31)],NXPL40=[0 for x in range(31)],NYPL40=[0 for x in range(31)],NZPL40=[0 for x in range(31)],NXPL100=[0 for x in range(31)],NYPL100=[0 for x in range(31)],NZPL100=[0 for x in range(31)],NXPL400=[0 for x in range(31)],NYPL400=[0 for x in range(31)],NZPL400=[0 for x in range(31)],NXPL1000=[0 for x in range(31)],NYPL1000=[0 for x in range(31)],NZPL1000=[0 for x in range(31)],NXPL2=[0 for x in range(31)],NYPL2=[0 for x in range(31)],NZPL2=[0 for x in range(31)],NXPL4000=[0 for x in range(31)],NYPL4000=[0 for x in range(31)],NZPL4000=[0 for x in range(31)],NXPL10000=[0 for x in range(31)],NYPL10000=[0 for x in range(31)],NZPL10000=[0 for x in range(31)],NXPL40000=[0 for x in range(31)],NYPL40000=[0 for x in range(31)],NZPL40000=[0 for x in range(31)],NXPL100000=[0 for x in range(31)],NYPL100000=[0 for x in range(31)],NZPL100000=[0 for x in range(31)],NRPL2=[0 for x in range(31)],NRPL10=[0 for x in range(31)],NRPL40=[0 for x in range(31)],NRPL100=[0 for x in range(31)],NRPL400=[0 for x in range(31)],NRPL1000=[0 for x in range(31)],NRPL4000=[0 for x in range(31)],NRPL10000=[0 for x in range(31)],NRPL40000=[0 for x in range(31)],NRPL100000=[0 for x in range(31)]
	global NEPL1=[0 for x in range(100)],NEPL10=[0 for x in range(100)],NEPL100=[0 for x in range(100)],MELEC=[0 for x in range(1000)],MELEC3=[0 for x in range(1000)],MELEC10=[0 for x in range(1000)],MELEC30=[0 for x in range(1000)],MELEC100=[0 for x in range(1000)],MELEC300=[0 for x in range(1000)]
	global EBRGAM=[0 for x in range(10)],BRDCOSX=[0 for x in range(10)],BRDCOSY=[0 for x in range(10)],BRDCOSZ=[0 for x in range(10)],BRX=[0 for x in range(10)],BRY=[0 for x in range(10)],BRZ=[0 for x in range(10)],BRT=[0 for x in range(10)]
	global EBRTOT=[0 for x in range(6)],NBREM=[0 for x in range(6)]
	global XAV=[0 for x in range(100000)],YAV=[0 for x in range(100000)],ZAV=[0 for x in range(100000)],TAV=[0 for x in range(100000)],XYAV=[0 for x in range(100000)],XYZAV=[0 for x in range(100000)]
	global DX=[0 for x in range(100000)],DY=[0 for x in range(100000)],DZ=[0 for x in range(100000)]
	global DT=[0 for x in range(100000)],DXY=[0 for x in range(100000)],DXYZ=[0 for x in range(100000)],NCL=[0 for x in range(100000)],FARX1=[0 for x in range(100000)],FARY1=[0 for x in range(100000)],FARZ1=[0 for x in range(100000)],FARXY1=[0 for x in range(100000)],RMAX1=[0 for x in range(100000)],TSUM=[0 for x in range(100000)],XNEG=[0 for x in range(100000)], YNEG=[0 for x in range(100000)],ZNEG=[0 for x in range(100000)],EDELTA[100000],EDELTA2=[0 for x in range(100000)],NCLEXC=[0 for x in range(100000)]
	global NSEED
	global NEGAS=[0 for x in range(512)],LEGAS=[0 for x in range(512)],IESHELL=[0 for x in range(512)],IECASC
	#                                                                       
	#   NEW UPDATE OF CONSTANTS 2010
	#
	API=numpy.arccos(-1.00)                                                 
	ARY=13.605692530                                              
	PIR2=8.7973554297*(10**-17)
	ECHARG=1.602176565*(10**-19)                                         
	EMASS=9.10938291*(10**-31)                     
	EMS=510998.9280
	VC=299792458.00                       
	AMU=1.660538921*(10**-27)                                             
	BOLTZ=8.6173324*(10**-5)    
	BOLTZJ=1.3806488*(10**-23)                                              
	AWB=1.758820088*(10**10)                                             
	ALOSCH=2.6867805*(10**19)     
	RE=2.8179403267*(10**-13)    
	ALPH=137.035999074
	HBAR=6.58211928*(10**-16)                                     
	EOVM=math.sqrt(2.00*ECHARG/EMASS)*100.00                            
	ABZERO=273.150                                                   
	ATMOS=760.00                                                     
	CONST1=AWB/2.00*1.0*(10**-19)                                          
	CONST2=CONST1*1.0*(10**-02)                                             
	CONST3=math.sqrt(0.20*AWB)*1.0*(10**-9)                                   
	CONST4=CONST3*ALOSCH*1.0*(10**-15)                                      
	CONST5=CONST3/2.00
	TWOPI=2.00*API
	NANISO=2
	for K in range(1,6):
		NBREM[K]=0
		EBRTOT[K]=0.0
	ICFLG=0
	IRFLG=0
	IPFLG=0
	IBFLG=0
	LPEFLG=0
	#  --------------------------------------------       
	#                                                                       
	#      READ IN OUTPUT CONTROL AND INTEGRATION DATA                      
	#                                                                       
	NGAS=int(input())
	NEVENT=int(input())
	IMIP=int(input())
	NDVEC=int(input())
	NSEED=int(input())
	ESTART=float(input())
	ETHRM=float(input())
	ECUT=float(input())
	ICOUNT=0
	if(IMIP == 1):
		ICOUNT=1 
	if(NGAS == 0):  #yet to figure out 
		LAST=1
		return  
	if(ESTART > 3.0*(10**6) and IMIP == 3):
		print(' def STOPPED: X-RAY ENERGY=','%.3f%' % ESTART,'EV. MAXIMUM ENERGY 3.0MEV')
		STOP 
	# endif
	if(IMIP != 1 and NEVENT > 10000):
		print(' def STOPPED NUMBER OF EVENTS =',NEVENT,' LARGER THAN ARRAY LIMIT OF 10000')
		STOP
	# endif
	if(IMIP == 1 and NEVENT > 100000):
		print(' def STOPPED NUMBER OF EVENTS =',NEVENT,' LARGER THAN ARRAY LIMIT OF 100000')
		STOP
	# endif
	# 
	#   GAS IDENTIFIERS 
	#
	for i in range(1,6):
		NGASN[i]=int(input())
	#      
	#      GAS PARAMETERS
	#
	for in in range(1,6):
		FRAC[i]=round(float(input()),4)  	#print(8'%.4f' %)      
	TEMPC=round(float(input()),4)  					#print(8'%.4f' %)      
	TORR=round(float(input()),4)                  	#print(8'%.4f' %)      

       
	#print(8'%.4f' %)      
	#                                                  
	#      FIELD VALUES                                                    
	#                                                                       
	EFIELD=round(float(input()),3)  			#print(3'%.3f' % ,2I5)
	BMAG=round(float(input()),3)			#print(3'%.3f' % ,2I5)
	BTHETA=round(float(input()),3)			#print(3'%.3f' % ,2I5)
	IWRITE=int(input())			#print(3'%.3f' % ,2I5)
	IPEN=int(input())                    			#print(3'%.3f' % ,2I5)     
	
	DETEFF=round(float(input()),3)      	# print(2'%.3f' % ,7I5)
	EXCWGHT=round(float(input()),3)			# print(2'%.3f' % ,7I5)			
	KGAS=int(input())						# print(2'%.3f' % ,7I5)
	LGAS=int(input())						# print(2'%.3f' % ,7I5)
	ICMP=int(input())						# print(2'%.3f' % ,7I5)
	IRAY=int(input())						# print(2'%.3f' % ,7I5)
	IPAP=int(input())						# print(2'%.3f' % ,7I5)
	IBRM=int(input())						# print(2'%.3f' % ,7I5)
	IECASC =int(input())					# print(2'%.3f' % ,7I5)
	#     WRITE(6,656) IWRITE
	# 656 print(' IWRITE=',I3)  
	if(IWRITE != 0):
		OPEN(UNIT=50,FILE='DEGRAD.OUT')  #yet to figure out
	# CALCULATE EFINAL FOR DELTAS OR XRAYS 
	# INCREASED EFINAL CAUSED BY ELECTRIC FIELD 
	EBIG=0.05*ESTART/1000. 
	EFINAL=ESTART*1.0001+760.0*EBIG/TORR*(TEMPC+ABZERO)/293.15*EFIELD
	if(EFINAL < (1.01*ESTART)):
		EFINAL=1.01*ESTART 
	#   CHECK INPUT
	TOTFRAC=0.00
	if(NGAS == 0 or NGAS > 6):
			GO TO 999
	for J in range(1,NGAS):
		if(NGASN[J]== 0 or FRAC[J] == 0.00):
			GO TO 999
		TOTFRAC=TOTFRAC+FRAC[J]
	if(abs(TOTFRAC-100.00)> 1.D-6):
		GO TO 999
	LAST=0
	TMAX=100.00  
	NOUT=10  
	NSTEP=20000
	# INITIAL ANGLES
	if(NDVEC): #22594
		PHI=0
		THETA=0
	else if(NDVEC==-1):
		PHI=0
		THETA=numpy.arccos(-1)
	else if(NDVEC==0):
		PHI=0.0
		THETA=API/2.0
	else if(NDVEC==2):
		R3=DRAND48(0.0,1.0)
		PHI=TWOPI*R3
		R4=DRAND48(1.5, 1.9)
		THETA=numpy.arccos(1.0-2.0*R4)
	else :
		print('DIRECTION OF BEAM NOT DEFINED NDVEC =',NDVEC)
		STOP

	# INITIAL DIRECTION COSINES FOR CASCADE CALCULATION
	DRZINIT= numpy.cos(THETA)
	DRXINIT= numpy.sin(THETA)*numpy.cos(PHI)
	DRYINIT=numpy.sin(THETA)*numpy.sin(PHI)
	# ZERO COMMON BLOCKS OF OUTPUT RESULTS
	for J in range(1,10000):
		MSUM[J]=0
		MCOMP[J]=0
		MRAYL[J]=0
		MPAIR[J]=0
		MPHOT[J]=0
		MVAC[J]=0

	for J in range(1,300):
		TIME[J]=0
	for K in range(1,30):
		ICOLL[K]=0
	for K in range(1,512):
		ICOLN[K]=0
	for K in range(1,60):
		ICOLNN[K]=0
	for in range(1,10):
		TCFMAX[K]=float(0)
	# ZERO PLOT ARRAYS
	for K in range(1,31):
		NXPL2[K]=0
		NYPL2[K]=0
		NZPL2[K]=0
		NXPL10[K]=0
		NYPL10[K]=0
		NZPL10[K]=0
		NXPL40[K]=0
		NYPL40[K]=0
		NZPL40[K]=0
		NXPL100[K]=0
		NYPL100[K]=0
		NZPL100[K]=0
		NXPL400[K]=0
		NYPL400[K]=0
		NZPL400[K]=0
		NXPL1000[K]=0
		NYPL1000[K]=0
		NZPL1000[K]=0
		NXPL4000[K]=0
		NYPL4000[K]=0
		NZPL4000[K]=0
		NXPL10000[K]=0
		NYPL10000[K]=0
		NZPL10000[K]=0
		NXPL40000[K]=0
		NYPL40000[K]=0
		NZPL40000[K]=0
		NXPL100000[K]=0
		NYPL100000[K]=0
		NZPL100000[K]=0
		NRPL2[K]=0
		NRPL10[K]=0
		NRPL40[K]=0
		NRPL100[K]=0
		NRPL400[K]=0
		NRPL1000[K]=0
		NRPL4000[K]=0
		NRPL10000[K]=0
		NRPL40000[K]=0
		NRPL100000[K]=0 #22678
	for K in range(1,100):
		NEPL1[K]=0
		NEPL10[K]=0
		NEPL100[K]=0
	for K in range(1,1000):
		MELEC[K]=0
		MELEC3[K]=0
		MELEC10[K]=0
		MELEC30[K]=0
		MELEC100[K]=0
		MELEC300[K]=0 #22689
	# C ZERO ARRAYS
	for KS in range(1,100000):
		XAV[KS]=0.0
		YAV[KS]=0.0
		ZAV[KS]=0.0
		TAV[KS]=0.0
		XYAV[KS]=0.0
		XYZAV[KS]=0.0
		DX[KS]=0.0
		DY[KS]=0.0
		DZ[KS]=0.0
		DT[KS]=0.0
		DXY[KS]=0.0
		DXYZ[KS]=0.0
		FARX1[KS]=0.0
		FARY1[KS]=0.0
		FARZ1[KS]=0.0
		FARXY1[KS]=0.0
		RMAX1[KS]=0.0
		TSUM[KS]=0.0
		XNEG[KS]=0.0
		YNEG[KS]=0.0
		ZNEG[KS]=0.0
		EDELTA[KS]=0.0
		EDELTA2[KS]=0.0
		NCL[KS]=0
		NCLEXC[KS]=0 ##22716 #22915
	# ----------------------------------------------------  
	# IF NSEED = 0 : USE STANDARD SEED VALUE =54217137
	if(NSEED != 0):
		RM48(NSEED,0,0)                           
	#-----------------------------------------------      
	#
	CORR=ABZERO*TORR/(ATMOS*(ABZERO+TEMPC)*100.00)                    #check precision
	AKT=(ABZERO+TEMPC)*BOLTZ
	AN1=FRAC[1]CORR*ALOSCH                                           
	AN2=FRAC[2]CORR*ALOSCH                                           
	AN3=FRAC[3]CORR*ALOSCH                                           
	AN4=FRAC[4]CORR*ALOSCH
	AN5=FRAC[5]CORR*ALOSCH
	AN6=FRAC[6]CORR*ALOSCH                                           
	AN=float(100.00*CORR*ALOSCH)
	AN=100.00*CORR*ALOSCH                                            
	#     VAN1=FRAC[1]*CORR*CONST4*1.0D15                                   
	#     VAN2=FRAC(2)*CORR*CONST4*1.0D15                                   
	#     VAN3=FRAC(3)*CORR*CONST4*1.0D15                                   
	#     VAN4=FRAC(4)*CORR*CONST4*1.0D15
	#     VAN5=FRAC(5)*CORR*CONST4*1.0D15
	#     VAN6=FRAC(6)*CORR*CONST4*1.0D15                                   
	#     VAN=100.00*CORR*CONST4*1.0D15
	VAN1=FRAC[1]*CORR*ALOSCH*VC                                   
	VAN2=FRAC[2]*CORR*ALOSCH*VC                                   
	VAN3=FRAC[3]*CORR*ALOSCH*VC                                  
	VAN4=FRAC[4]*CORR*ALOSCH*VC
	VAN5=FRAC[5]*CORR*ALOSCH*VC
	VAN6=FRAC[6]*CORR*ALOSCH*VC                                  
	VAN=float(100.00*CORR*ALOSCH*VC)    #22745 #22945
	# CALCULATE AND STORE ENERGY GRID FOR XRAYS BETAS OR PARTICLES
	 
	if(EFINAL <= 20000.0):
		ESTEP=float(EFINAL/float(NSTEP))
		EHALF=float(ESTEP/2.00)
		E[1]=EHALF
		GAM[1]=(EMS+E[1])/EMS
		BET[1]=math.sqrt(1.00-1.00/(GAM[1]*GAM[1]))  #ifcontinues
		for I in range(2,20000):                      #ifcontinues
			AJ=float(I-1)
			E[I]=EHALF+ESTEP*AJ
			GAM[I]=(EMS+E[I])/EMS
			BET[I]=math.sqrt(1.00-1.00/(GAM[I]*GAM[I]))
	else if(EFINAL > 20000.0 and EFINAL <= 140000.) :
		ESTEP=1.0
		EHALF=0.5
		E[1]=EHALF
		GAM[1]=(EMS+E[1])/EMS
		BET[1]=math.sqrt(1.00-1.00/(GAM[1]*GAM[1]))
		for i in range(2,16000):
			AJ=float(I-1)
			E[I]=EHALF+ESTEP*AJ
			GAM[I]=(EMS+E[I])/EMS
			BET[I]=math.sqrt(1.00-1.00/(GAM[I]*GAM[I]))   #22768 #22968  
		ESTEP1=(EFINAL-16000.0)/float(4000)
		for I in range(16001,2000):
			AJ=float(I-16000)
			E[I]=16000.0+AJ*ESTEP1
			GAM[I]=(EMS+E[I])/EMS
			BET[I]=math.sqrt(1.00-1.00/(GAM[I]*GAM[I]))
	else:
		ESTEP=1.0
		EHALF=0.5
		E[1]=EHALF
		GAM[1]=(EMS+E[1])/EMS
		BET[1]=math.sqrt(1.00-1.00/(GAM[1]*GAM[1]))
		for I in range(2,12000):
			AJ=float(I-1)
			E[I]=EHALF+ESTEP*AJ
			GAM[I]=(EMS+E[I])/EMS
			BET[I]math.sqrt(1.00-1.00/(GAM[I]*GAM[I]))
		ESTEP1=20.0
		for I in range(12001,16000):
			AJ=float(I-12000)
			E[I]=12000.0+AJ*ESTEP1
			GAM[I]=(EMS+E[I])/EMS
			BET[I]math.sqrt(1.00-1.00/(GAM[I]*GAM[I]))
		ESTEP2=(EFINAL-92000.0)/float(4000)
		for I in range(16001,20000):
			AJ=float(I-16000)
			E[I]=92000.0+AJ*ESTEP2
			GAM[I]=(EMS+E[I])/EMS
			BET[I]math.sqrt(1.00-1.00/(GAM[I]*GAM[I]))
	# endif
	#  RADIANS PER PICOSECOND                                        
	WB=AWB*BMAG*1.0*(10**-12 )
	#   METRES PER PICOSECOND
	if(BMAG == 0.00):
		RETURN
	EOVB=EFIELD*1*(10**-9)/BMAG
	RETURN
	print(' ERROR IN GAS INPUT : NGAS=',NGAS,'\n')
	for J in range(1,6):
		print(' N=',J,' NGAS=',NGASN[J],' FRAC=',FRAC[J])
	LAST=1                                                            
	RETURN                                                            
	# end                                                               
def OUTPUT:   
	#IMPLICIT #real*8 (A-H,O-Z)
	#IMPLICIT #integer*8 (I-N) 
	global KGAS,LGAS,DETEFF,EXCWGHT                             
	global NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
	global TMAX,SMALL,API,ESTART,THETA,PHI,TCFMAX=[0 for x in range(10)]
	global TCFMAX1,RSTART,EFIELD,ECUT,ETHRM,NDELTA,IMIP,IWRITE        
	global EOVB,WB,BTHETA,BMAG    
	global CF=[[0 for x in range(20000)] for y in range(512)]
	global EIN=[0 for x in range(512)]
	global TCF=[0 for x in range(20000)]
	global IARRY=[0 for x in range(512)]
	global RGAS=[0 for x in range(512)],IPN=[0 for x in range(512)]
	global WPL=[0 for x in range(512)],IZBR=[0 for x in range(512)]
	global LAST,NPLAST
	global PENFRA=[[0 for x in range(3)] for y in range(512)]
	global CFN=[[0 for x in range(20000)] for y in range(60)]
	global TCFN=[0 for x in range(20000)]
	global SCLENUL=[0 for x in range(60)]
	global ICOLL=[0 for x in range(30)]
	global NETOT,NPRIME,TMAX1,NNULL,NITOT
	global TIME=[0 for x in range(300)]
	global ICOLN=[0 for x in range(512)],ICOLNN=[0 for x in range(60)],NREAL,NEXCTOT
	global AFAN1,AFAN2,AFAN3,AFAN4,ASKEW,AKURT,AFAN1EXC,AFAN2EXC,AFAN3EXC,AFAN4EXC,ASKEWEXC,AKURTEXC,AFAN1TOT,AFAN2TOT,AFAN3TOT,AFAN4TOT,ASKEWTOT,AKURTTOT,AFAN1TOF,AFAN2TOF,AFAN3TOF,AFAN4TOF,ASKEWTOF,AKURTTOF
	global AFAN1E,AFAN2E,AFAN3E,AFAN4E,ASKEWE,AKURTE,AFAN1EXCE,AFAN2EXCE,AFAN3EXCE,AFAN4EXCE,ASKEWEXCE,AKURTEXCE,AFAN1TOTE,AFAN2TOTE,AFAN3TOTE,AFAN4TOTE,ASKEWTOTE,AKURTTOTE,AFAN1TOFE,AFAN2TOFE,AFAN3TOFE,AFAN4TOFE,ASKEWTOFE,AKURTTOFE,NFE
	global XBAR,YBAR,ZBAR,TBAR,XYBAR,XYZBAR,DXBAR,DYBAR,DZBAR,DTBAR,DXYBAR,DXYZBAR,XMAX,YMAX,ZMAX,XYMAX,RMAX,SUMTT,XNEG1,YNEG1,ZNEG1,FARXBAR,FARYBAR,FARZBAR,FARXYBAR,RMAXBAR,EBAR,EBAR2       
	global NXPL10=[0 for x in range(31)],NYPL10=[0 for x in range(31)],NZPL10=[0 for x in range(31)],NXPL40=[0 for x in range(31)],NYPL40=[0 for x in range(31)],NZPL40=[0 for x in range(31)],NXPL100=[0 for x in range(31)],NYPL100=[0 for x in range(31)],NZPL100=[0 for x in range(31)],NXPL400=[0 for x in range(31)],NYPL400=[0 for x in range(31)],NZPL400=[0 for x in range(31)],NXPL1000=[0 for x in range(31)],NYPL1000=[0 for x in range(31)],NZPL1000=[0 for x in range(31)],NXPL2=[0 for x in range(31)],NYPL2=[0 for x in range(31)],NZPL2=[0 for x in range(31)],NXPL4000=[0 for x in range(31)],NYPL4000=[0 for x in range(31)],NZPL4000=[0 for x in range(31)],NXPL10000=[0 for x in range(31)],NYPL10000=[0 for x in range(31)],NZPL10000=[0 for x in range(31)],NXPL40000=[0 for x in range(31)],NYPL40000=[0 for x in range(31)],NZPL40000=[0 for x in range(31)],NXPL100000=[0 for x in range(31)],NYPL100000=[0 for x in range(31)],NZPL100000=[0 for x in range(31)],NRPL2=[0 for x in range(31)],NRPL10=[0 for x in range(31)],NRPL40=[0 for x in range(31)],NRPL100=[0 for x in range(31)],NRPL400=[0 for x in range(31)],NRPL1000=[0 for x in range(31)],NRPL4000=[0 for x in range(31)],NRPL10000=[0 for x in range(31)],NRPL40000=[0 for x in range(31)],NRPL100000=[0 for x in range(31)],NEPL1(100),NEPL10(100),NEPL100(100),MELEC(1000),MELEC3(1000),MELEC10(1000),MELEC30(1000),MELEC100(1000),MELEC300(1000)
	global ANPRELA,ANPRATT,ANPREXC,ANPRION,ANPREXCI,ANPRBRM
	global ELOSS,ELOSEX,ELOSION,ESUM,BETAGAM,TCFHIGH,VELC,EMAXDEL,ELOSIONC,CUTIONFRC,ELOSEXI,ELOSBREM,NREJECT
	global EBRGAM=[0 for x in range(10)]
	global BRDCOSX=[0 for x in range(10)]
	global BRDCOSY=[0 for x in range(10)],BRDCOSZ=[0 for x in range(10)],BRX=[0 for x in range(10)]
	global BRY=[0 for x in range(10)],BRZ=[0 for x in range(10)],BRT=[0 for x in range(10)],EBRTOT=[0 for x in range(6)],NBREM=[0 for x in range(6)]
	global LCMP,LCFLG,LRAY,LRFLG,LPAP,LPFLG,LBRM,LBFLG,LPEFLG
	global AVRAYL,AVCOMP,AVPAIR,AVPHOTO 
	global CMPDST=[0 for x in range(10)],RYLDST=[0 for x in range(10)]
	global NJHIGH,ABSXRAY
	global NAMEG=[0 for x in range(6)]
	global DSCRPT=[0 for x in range=[0 for x in range(512)]],DSCRPTN=[0 for x in range(60)]
	BIN100000=[0 for x in range(31)]
	BIN2=[0 for x in range(31)],BIN4000=[0 for x in range(31)],BIN10000=[0 for x in range(31)],BIN40000=[0 for x in range(31)]
	BIN10=[0 for x in range(31)],BIN40=[0 for x in range(31)],BIN100=[0 for x in range(31)],BIN400=[0 for x in range(31)],BIN1000=[0 for x in range(31)]
	DSCRPT=DSCRPTN=""  #50 character
	NAMEG="" #25
	FREQEL=[0 for x in range(6)],FREQSP=[0 for x in range(6)],FREINE=[0 for x in range(6)],FREATT=[0 for x in range(6)],FREION=[0 for x in range(6)]     
	                                                     
	print('-----------------------------------------------------------------------------')
	print('-----------------------------------------------------------------------------')
	print('CALCULATED MAX. COLLISION TIME =',TMAX1,' PICOSECONDS.','NO.OF NULL COLLISIONS =',NNULL,'NO.OF #real COLLISIONS =',NREAL,'\n')     
	print('  NUMBER OF PRIMARIES =',NPRIME,'\n','NUMBER OF NEGATIVE IONS =',NITOT,'\n','TOTAL OF PRIMARIES AND SECONDARIES =',NETOT,'\n')
	KTOT=NJHIGH+NPRIME
	FRACPS=100.0*float(NPRIME)/float(KTOT)
	if(IMIP == 3):
		print(' NUMBER OF EVENTS WITH MORE THAN 9 COMPTONS=',NJHIGH,'\n',' FRACTION OF EVENTS PASSING 9 COMPTON CUT =','%.3f' % FRACPS,'%','\n')
	if(IMIP == 3):
		print('  X-RAY ENERGY =','%.2f' % EBAR,' EV.')
	if(IMIP == 3):
		print(2('\n'),' XRAY INTERACTION LENGTH IN MICRONS = ','%.5f' % ABSXRAY,'\n',' THE FOLLOWING ARE AVERAGE NO PER PRIMARY GAMMA :-\n',' NO OF RAYLEIGH      =','%.3f' % AVRAYL,'\n',' NO OF COMPTONS      =','%.3f' % AVCOMP,'\n',' NO OF PAIRS         =','%.3f' % AVPAIR,'\n',' NO OF PHOTOELECTRIC =','%.3f' % AVPHOTO,'\n')
	if(IMIP == 3):
	print('-----------------------------------------------------------------------------')
	if(IMIP == 3):
		print(' RAYLEIGH COLLISION NUMBER DISTRIBUTION PER EVENT (1 TO 10)')
		for I in range(1,10):
			print('\n','%.4f' % RYLDST[I],'\n')
	if(IMIP == 3):
		print(' COMPTON COLLISION NUMBER DISTRIBUTION PER EVENT ( 1 TO 10)')
		for I in range(1,10):
			print('\n','%.4f' % CMPDST[I])
	print('-----------------------------------------------------------------------------')
	#
	# CALCULATE STATISTICAL ERROR ON NETOT AND EV/ION PAIR 
	#
	if(IMIP == 1):
		ANTOTIP=ANPREXCI+ANPRION
		print('\n\n DE/DX ELASTIC       =','%.4f' % ELOSS,'\n DE/DX EXCITATION    =', '%.4f' % ELOSEX,'\n DE/DX IONISATION    =','%.4f' % ELOSION,'\n',' DE/DX BREMSSTRAHLUNG=','%.4f' % ELOSBREM,'\n',' DE/DX TOTAL (EV/CM) =','%.4f' % ESUM,'\n \n DE/DX (IONISATION ONLY) WITH TOTAL ENERGY CUT =','%.4f' % ELOSIONC,'\n DE/DX FROM PENNING TRANSFER =','%.4f' % ELOSEXI,'\n\n        BETAGAMMA   =','%.4f' % BETAGAMA,/,'   PRIMARY COLL/SEC =','%.4f' % TCFHIGH,'\n    VELOCITY CM/SEC =','%.4f' % VELC,'\n\n  ELASTIC COLL/CM=','%.4f' % ANPRELA,'\nATTACHMENT COLL/CM=','%.4f' % ANPRATT,'\nEXCITATION COLL/CM=','%.4f' % ANPREXC,'\nIONISATION  COLL/CM=','%.4f' % ANPRION,'\n BREMSSTRAHLUNG COLL/CM=','%.4f' % ANPRBRM,'\n\n  PENNING  COLL/CM=','%.4f' % ANPREXCI,'\n\n PRIMARY (PENNING + IONISATION) COLLISIONS/CM  =','%.4f' % ANTOTIP,' COLL/CM\n\n',' FRACTION OF EVENTS PASSING CUT =','%.4f' % CUTIONFRC,'\n\n MAXIMUM ALLOWED TOTAL ENERGY IN EVENT (CUT) =','%.4f' % EMAXDEL,'\n')
		print('\n AVERAGE DELTA WITH ENERGY CUT AT','%.3f' % EMAXDEL,' EV. =','%.3f' % EBAR,' EV.')
	# endif
	if(IMIP == 2):
		print('  DELTA ENERGY =','%.3f' % EBAR,' EV.\n')
	if(IMIP == 4):
		print('  BETA DECAY ENERGY =','%.2f' % EBAR,' EV.\n')
	if(IMIP == 5):
		print('  DOUBLE BETA DECAY ENERGY =  2 TIMES','%.2f' % EBAR,' EV\n')
		# INCREASE EBAR IF DOUBLE BETA DECAY TO ALLOW FOR TWO ELECTRONS 
		EBAR=EBAR*2.0 
		EBAR2=EBAR2*2.0  
	# endif
	if(IMIP == 1):
		GO TO 110 
	ERFRAC1=math.sqrt(float(NETOT))/float(NETOT)
	ERFRAC2=math.sqrt(float(NEXCTOT))/float(NEXCTOT)
	NEXCT1=int(float(NEXCTOT)*DETEFF*0.01) 
	ERFRAC3=math.sqrt(float(NEXCT1+NETOT))/float(NEXCT1+NETOT)
	ERFRAC4=math.sqrt(float(NEXCTOT+NETOT))/float(NEXCTOT+NETOT)
	DAFAN1=AFAN1*ERFRAC1 
	DAFAN1EXC=AFAN1EXC*ERFRAC2 
	DAFAN1TOT=AFAN1TOT*ERFRAC3           
	DAFAN1TOF=AFAN1TOF*ERFRAC4
	#     FAN1=ESTART/AFAN1 
	FAN1=EBAR/AFAN1
	FAN1EXC=EBAR/AFAN1EXC
	FAN1TOT=EBAR/AFAN1TOT
	FAN1TOF=EBAR/AFAN1TOF
	DFAN1=FAN1*ERFRAC1   
	DFAN1EXC=FAN1EXC*ERFRAC2 
	DFAN1TOT=FAN1TOT*ERFRAC3      
	DFAN1TOF=FAN1TOF*ERFRAC4     
	FAN2=AFAN2*AFAN2/AFAN1
	FAN2EXC=AFAN2EXC*AFAN2EXC/AFAN1EXC
	FAN2TOT=AFAN2TOT*AFAN2TOT/AFAN1TOT
	FAN2TOF=AFAN2TOF*AFAN2TOF/AFAN1TOF
	# ION OUT
	print(' MAIN PEAK FANO CALCULATIONS :-\n')
	print('\nNUMBER OF ION PAIRS PER EVENT =','%.4f' % AFAN1,' +- ','%.4f' % DAFAN1)
	print('\nFANO1, ENERGY PER ION PAIR =','%.4f' % FAN1,'+-','%.4f' % DFAN1,' EV.\n','FANO2, FLUCTUATION WIDTH   = ','%.4f' % FAN2,'\n')
	print('HIGHER FANO FACTORS :\n','FANO3 =','%.3f' % AFAN3,'      SKEW =','%.3f' % AASKEW,'\n  FANO4 =','%.3f' % AFAN4,'  KURTOSIS =','%.3f' % AKURT)
	#  EXC OUT

	print('\n  NUMBER OF EXCITATIONS PER EVENT =','%.4f' % AFAN1EXC,' +- ','%.4f' % DAFAN1EXC)
	print('\n  FANO1, ENERGY PER EXCITATION =','%.4f' % FAN1EXC,'+-','%.4f' % DFAN1EXC,' EV.\n  FANO2, FLUCTUATION WIDTH   = ','%.4f' % FAN2EXC,'\n')
	print(2X,'HIGHER FANO FACTORS :\n','  FANO3 =','%.3f' % AFAN3EXC,'      SKEW =','%.3f' % ASKEWEXC,'\n  FANO4 =','%.3f' % AFAN4EXC,'KURTOSIS =','%.3f' % AKURTEXC)
	#    EXC + ION OUTPUT WITH EXCITATION DETECTION EFFICIENCY =DETEFF

	print('\n  FANO CALCS FOR PHOTON DETECTION EFFICIENCY =','%.3f' % DETEFF,'%')
	print('\n  NUMBER OF (WEIGHTED EXCITATIONS + IONS) PER EVENT =','%.4f' % AFAN1TOT,' +- ','%.4f' % DAFAN1TOT)
	print('\n  FANO1, ENERGY PER EXC+ION    =','%.4f' % FAN1TOT,'+-','%.4f' % DFAN1TOT,' EV.','\n  FANO2, FLUCTUATION WIDTH   = ','%.4f' % FAN2TOT,'\n')
	print('  HIGHER FANO FACTORS :','\n  FANO3 =','%.3f' % AFAN3TOT,'      SKEW =','%.3f' % ASKEWTOT,'\n  FANO4 =','%.3f' % AFAN4TOT,'  KURTOSIS =','%.3f' % AKURTTOT)
	#  COMBINED EXCITATION  AND ION OUTPUT  
	print('\n  FANO CALCS FOR PHOTON DETECTION EFFICIENCY = 100 %') 
	print('\n  NUMBER OF (WEIGHTED EXCITATIONS + IONS) PER EVENT =','%.4f' % AFAN1TOF,' +- ','%.4f' % DAFAN1TOF)
	print('\n  FANO1, ENERGY PER EXC+ION    =','%.4f' % FAN1TOF,'+-','%.4f' % DFAN1TOF,' EV.','\n  FANO2, FLUCTUATION WIDTH   = ','%.4f' % FAN2TOF,'\n')
	print('  HIGHER FANO FACTORS :','\n  FANO3 =','%.3f' % AFAN3TOF,'      SKEW =','%.3f' % ASKEWTOF,'\n  FANO4 =','%.3f' % AFAN4TOF,'  KURTOSIS =','%.3f' % AKURTTOF)
	if(NFE > 1):
	# CALCULATE ESCAPE PEAK FANO FACTORS
	EBARE=EBAR-2.0*510998.928
	ANETOTE=float(NETOT*NFE/(NDELTA-NFE))*EBARE/EBAR
	ERFRAC1E=math.sqrt(ANETOTE)/ANETOTE
	ANEXCTOTE=float(NEXCTOT*NFE/(NDELTA-NFE))*EBARE/EBAR
	ERFRAC2E=math.sqrt(ANEXCTOTE)/ANEXCTOTE
	ANEXCT1E=ANEXCTOTE*DETEFF*0.01 
	ERFRAC3E=math.sqrt(ANEXCT1E+ANETOTE)/(ANEXCT1E+ANETOTE)
	ERFRAC4E=math.sqrt(ANEXCTOTE+ANETOTE)/(ANEXCTOTE+ANETOTE)
	DAFAN1E=AFAN1E*ERFRAC1E 
	DAFAN1EXCE=AFAN1EXCE*ERFRAC2E 
	DAFAN1TOTE=AFAN1TOTE*ERFRAC3E           
	DAFAN1TOFE=AFAN1TOFE*ERFRAC4E
	#     FAN1=ESTART/AFAN1
	FAN1E=EBARE/AFAN1E
	FAN1EXCE=EBARE/AFAN1EXCE
	FAN1TOTE=EBARE/AFAN1TOTE
	FAN1TOFE=EBARE/AFAN1TOFE
	DFAN1E=FAN1E*ERFRAC1E   
	DFAN1EXCE=FAN1EXCE*ERFRAC2E 
	DFAN1TOTE=FAN1TOTE*ERFRAC3E      
	DFAN1TOFE=FAN1TOFE*ERFRAC4E     
	FAN2E=AFAN2E*AFAN2E/AFAN1E
	FAN2EXCE=AFAN2EXCE*AFAN2EXCE/AFAN1EXCE
	FAN2TOTE=AFAN2TOTE*AFAN2TOTE/AFAN1TOTE
	FAN2TOFE=AFAN2TOFE*AFAN2TOFE/AFAN1TOFE
	# ION OUT
	print('-----------------------------------------------------------------------------') 
	print('\n\n DOUBLE ESCAPE PEAK FANO CALCULATIONS:-\n')
	print('\n  NUMBER OF ION PAIRS PER EVENT =','%.4f' % AFAN1E,' +- ','%.4f' % DAFAN1E)
	print('\n  FANO1, ENERGY PER ION PAIR =','%.4f' % FAN1E,'+-','%.4f' % DFAN1E,' EV.','\n  FANO2, FLUCTUATION WIDTH   = ','%.4f' % FAN2E,'\n')
	print('  HIGHER FANO FACTORS :','\n  FANO3 =','%.3f' % AFAN3E,'      SKEW =','%.3f' % ASKEWE,'\n  FANO4 =','%.3f' % AFAN4E,'  KURTOSIS =','%.3f' % AKURTE)
	print('\n  NUMBER OF EXCITATIONS PER EVENT =','%.4f' %  AFAN1EXCE,' +- ','%.4f' %  DAFAN1EXCE)
	print('\n  FANO1, ENERGY PER EXCITATION =','%.4f' % FAN1EXCE,'+-','%.4f' % DFAN1EXCE,' EV.\n\n','  FANO2, FLUCTUATION WIDTH   = ','%.4f' % FAN2EXCE)
	print('  HIGHER FANO FACTORS :','\n  FANO3 =','%.3f' % AFAN3EXCE,'      SKEW =\n','%.3f' % ASKEWEXCE,'\n FANO4 =','%.3f' % AFAN4EXCE,'  KURTOSIS =','%.3f' % AKURTEXCE)
	FORMAT('\n  FANO CALCS FOR PHOTON DETECTION EFFICIENCY =','%.3f' % DETEFF,'     /%')
	FORMAT('\n  NUMBER OF (WEIGHTED EXCITATIONS + IONS) PER EVENT =','%.4f' % AFAN1TOTE,' +- ','%.4f' % DAFAN1TOTE)
	FORMAT('\n  FANO1, ENERGY PER EXC+ION    =','%.4f' % FAN1TOTE,'+-','%.4f' % DFAN1TOTE,' EV.','\n  FANO2, FLUCTUATION WIDTH   = ','%.4f' % FAN2TOTE)
	FORMAT('  HIGHER FANO FACTORS :\n\n','  FANO3 =','%.3f' % AFAN3TOTE,'      SKEW =\n','%.3f' % ASKEWTOTE,'\n  FANO4 =','%.3f' % AFAN4TOTE,'  KURTOSIS =','%.3f' % AKURTTOTE)
	FORMAT('\n  FANO CALCS FOR PHOTON DETECTION EFFICIENCY = 100 %') #1016
	FORMAT('\n  NUMBER OF (WEIGHTED EXCITATIONS + IONS) PER EVENT =\n','%.4f' % AFAN1TOFE,' +- ','%.4f' % DAFAN1TOFE)
	FORMAT('\n  FANO1, ENERGY PER EXC+ION    =','%.4f' % FAN1TOFE,'+-','%.4f' % DFAN1TOFE,' EV.','\n  FANO2, FLUCTUATION WIDTH   = ','%.4f' % FAN2TOFE)
	FORMAT('  HIGHER FANO FACTORS :',/,2X,'FANO3 =','%.3f' % AFAN3TOFE,'      SKEW =','%.3f' % ASKEWTOFE,'\n  FANO4 =','%.3f' % AFAN4TOFE,'  KURTOSIS =','%.3f' % AKURTTOFE)
	# endif
	print('-----------------------------------------------------------------------------')                    
	print('-----------------------------------------------------------------------------')                    
	print('\n RANGE PARAMETERS FROM AVERAGES OVER ',NDELTA,' EVENTS IN MICRONS AND PICOSECONDS') 
	print('-----------------------------------------------------------------------------')                                                       
	print('   XBAR =','%.3f' % XBAR,'   XWIDTH =','%.3f' % DXBAR,' NEGATIVE FRAC =','%.4f' % XNEG1)
	print('   YBAR =','%.3f' % YBAR,'   YWIDTH =','%.3f' % DYBAR,' NEGATIVE FRAC =','%.4f' % YNEG1)
	print('   ZBAR =','%.3f' % ZBAR,'   ZWIDTH =','%.3f' % DZBAR,' NEGATIVE FRAC =','%.4f' % ZNEG1)
	print('  XYBAR =','%.3f' % XYBAR,'  XYWIDTH =','%.3f' % DXYBAR)
	print(' XYZBAR =','%.3f' % XYZBAR,' XYZWIDTH =','%.3f' % DXYZBAR)
	print('-----------------------------------------------------------------------------')                    
	print(' THERMALISATION TIME =','%.3f' % TBAR,' PICOSECS','\n TIME SPREAD != ','%.3f' % DTBAR,' PICOSECS') 
	print('-----------------------------------------------------------------------------')
	
	print(' MAXIMUM ELECTRON RANGE AVERAGED OVER ',NDELTA,' EVENTS')
	print(' AV.MAX. RANGE IN  X =','%.3f' %FARXBAR,'\n AV.MAX. RANGE IN  Y =','%.3f' % FARYBAR,'\n AV.MAX. RANGE IN  Z =','%.3f' % FARZBAR,'\n AV.MAX. RANGE IN XY =','%.3f' % FARXYBAR,'\n AV.MAX. RANGE IN XYZ=','%.3f' % RMAXBAR) 
	print('-----------------------------------------------------------------------------')
	print(' MAXIMUM ELECTRON RANGE FOUND IN TOTAL SAMPLE OF ',NDELTA,' EVENTS')
	print(' MAX. RANGE IN   X      =','%.3f' % XMAX,'\n MAX. RANGE IN   Y      =','%.3f' % YMAX,'\n MAX. RANGE IN   Z      =','%.3f' % ZMAX,'\n MAX. RANGE IN XY PLANE =','%.3f' % XYMAX,'\n MAX. RANGE IN  XYZ     =','%.3f' % RMAX)
	# CALCULATE PLOT AXIS AND OUTPUT PLOTS IN X Y Z AND R
	print('-----------------------------------------------------------------------------')
	BIN2[1]=-30.0
	BIN10[1]=-150.0
	BIN40[1]=-600.0
	BIN100[1]=-1500.0
	BIN400[1]=-6000.0
	BIN1000[1]=-15000.0
	BIN4000[1]=-60000.0
	BIN10000[1]=-150000.0
	BIN40000[1]=-600000.0
	BIN100000[1]=-1500000.0
	for K in range(2,31):
		BIN2[K]=BIN2[K-1]+2.0
		BIN10[K]=BIN10[K-1]+10.0
		BIN40[K]=BIN40[K-1]+40.0
		BIN100[K]=BIN100[K-1]+100.0
		BIN400[K]=BIN400[K-1]+400.0 
		BIN1000[K]=BIN1000[K-1]+1000.0
		BIN4000[K]=BIN4000[K-1]+4000.0
		BIN10000[K]=BIN10000[K-1]+10000.0
		BIN40000[K]=BIN40000[K-1]+40000.0
		BIN100000[K]=BIN100000[K-1]+100000.0
	M=NDELTA  
	IPLOT=0
	print(F10.1,4I12)  #124  # yet to be 
	print(' NOTE FIRST AND LAST BINS CONTAIN OVER/UNDER FLOWS')
	if(NRPL2(16)< NRPL2(31)):
		pass
	else:
		print(' DISTRIBUTION IN X,Y,Z AND R FOR  2 MICRON BINS','\n','   POSITION        X         Y         Z         R','\n')
		WRITE(6,124) (BIN2[K],NXPL2[K],NYPL2[K],NZPL2[K],NRPL2[K], K=1,31)
		for K in range(1,31):
			print('%.1f' % BIN2[K],NXPL2[K],NYPL2[K],NZPL2[K],NRPL2[K])
		print('-----------------------------------------------------------------------------')
	if(NRPL10(16) < NRPL10(31)):
		pass
	else:
		print(' DISTRIBUTION IN X,Y,Z AND R FOR 10 MICRON BINS','\n','   POSITION        X         Y         Z         R','\n')
		for K in range(1,31):
			print('%.1f' % BIN10[K],NXPL10[K],NYPL10[K],NZPL10[K],NRPL10[K])
		print('-----------------------------------------------------------------------------')
	1224 if(NRPL40(16) < NRPL40(31)) GO TO 1225
	WRITE(6,126) 
	126 print(' DISTRIBUTION IN X,Y,Z AND R FOR 40 MICRON BINS','\n','   POSITION        X         Y         Z         R','\n')
	for K in range(1,31):
		print('%.1f' %BIN40[K],NXPL40[K],NYPL40[K],NZPL40[K],NRPL40[K])
	print('-----------------------------------------------------------------------------')
	if(NRPL100(16) < NRPL100(31)):
		pass
	else:
		WRITE(6,127) 
		127 print(' DISTRIBUTION IN X,Y,Z AND R FOR 100 MICRON BINS','\n','   POSITION        X         Y         Z         R','\n')
		for K in range(1,31):
			print('%.1f' %BIN100[K],NXPL100[K],NYPL100[K],NZPL100[K],NRPL100[K])
		print('-----------------------------------------------------------------------------')
	if(NRPL400(16) < NRPL400(31)):
		pass
	else:
		WRITE(6,128) 
		128 print(' DISTRIBUTION IN X,Y,Z AND R FOR 400 MICRON BINS','\n','   POSITION         X         Y         Z         R','\n')
		for K in range(1,31):
			print('%.1f' %BIN400[K],NXPL400[K],NYPL400[K],NZPL400[K],NRPL400[K])
		print('-----------------------------------------------------------------------------')
	if(NRPL1000(16) < NRPL1000(31)):
		pass
	else:
		WRITE(6,129) 
		129 print(' DISTRIBUTION IN X,Y,Z AND R FOR 1000 MICRON BINS','\n','   POSITION         X         Y         Z         R','\n')
		for K in range(1,31):
			print('%.1f' %BIN1000[K],NXPL1000[K],NYPL1000[K],NZPL1000[K],NRPL1000[K])
		print('-----------------------------------------------------------------------------')
	if(NRPL4000(16) < NRPL4000(31)):
		pass
	else:
		WRITE(6,130)
		130 print(' DISTRIBUTION IN X,Y,Z AND R FOR 4000 MICRON BINS','\n','   POSITION         X         Y         Z         R','\n')
		for K in range(1,31):
			print('%.1f' %BIN4000[K],NXPL4000[K],NYPL4000[K],NZPL4000[K],NRPL4000[K])
		print('-----------------------------------------------------------------------------')
	if(NRPL10000(16) < NRPL10000(31)):
		pass
	else:
		WRITE(6,131)
		131 print(' DISTRIBUTION IN X,Y,Z AND R FOR 10000 MICRON BINS','\n','   POSITION         X         Y         Z         R','\n')  
		for K in range(1,31):
			print('%.1f' %BIN10000[K],NXPL10000[K],NYPL10000[K],NZPL10000[K], NRPL10000[K]) 
		print('-----------------------------------------------------------------------------') 
	if(NRPL40000(20) == 0 and NRPL40000(21) == 0):
		pass
	else:
		WRITE(6,132) 
		132 print(' DISTRIBUTION IN X,Y,Z AND R FOR 40000 MICRON BINS','\n','   POSITION         X         Y         Z         R','\n')
		for K in range(1,31):
			print('%.1f' %BIN40000[K],NXPL40000[K],NYPL40000[K],NZPL40000[K],NRPL40000[K])
		print('-----------------------------------------------------------------------------') 
	if(NRPL100000(20) == 0 and NRPL100000(21) == 0):
		pass
	else:
		WRITE(6,133) 
		133 print(' DISTRIBUTION IN X,Y,Z AND R FOR 100000 MICRON BINS','\n','   POSITION         X         Y         Z         R','\n')
		for K in range(1,31):
			print('%.1f' %BIN100000[K],NXPL100000[K],NYPL100000[K],NZPL100000[K],NRPL100000[K])
	print('-----------------------------------------------------------------------------')
	CONTINUE
	if(IMIP != 1):
	GO TO 137
	WRITE(6,134) (K,NEPL1[K], K=1,100)
	134 print(' DISTRIBUTION IN ELECTRON ENERGY IN   1 EV BINS',/,100(I5,I10,/))
	WRITE(6,135) (K,NEPL10[K], K=1,100)
	135 print(' DISTRIBUTION IN ELECTRON ENERGY IN  10 EV BINS',/,100(I5,I10,/))
	WRITE(6,136) (K,NEPL100[K], K=1,100)
	136 print(' DISTRIBUTION IN ELECTRON ENERGY IN 100 EV BINS',/,100(I5,I10,/))
	137 NHIGH=NDELTA/10
	if(MELEC(1000):
	> NHIGH) GO TO 141
	WRITE(6,138) (K,MELEC[K], K=1,1000)
	138 print(' DISTRIBUTION IN CLUSTER SIZE IN UNIT BINS',/,1000(I5,I10,/))
	#     
	if(IMIP == 1):
	:
	NOVFL=0 
	DO 139 K=21,1000
	139  NOVFL=NOVFL+MELEC[K]
	WRITE(6,140) NOVFL
	140  print(' NO OF CLUSTERS GT 20 =',I6)
	# endif
	GO TO 143
	141 if(MELEC3(1000) > 0) GO TO 1421  
	WRITE(6,142) (K,MELEC3[K], K=1,1000)
	142 print(' DISTRIBUTION IN CLUSTER SIZE IN BINS OF 3',/,1000(I5,I10,/))
	GO TO 143
	1421 if(MELEC10(1000) > 0) GO TO 1423
	WRITE(6,1422) (K,MELEC10[K], K=1,1000)
	1422 print(' DISTRIBUTION IN CLUSTER SIZE IN BINS OF 10',/,1000(I5,I10,/))
	GO TO 143
	1423 if(MELEC30(1000) > 0) GO TO 1425
	WRITE(6,1424) (K,MELEC30[K], K=1,1000)
	1424 print(' DISTRIBUTION IN CLUSTER SIZE IN BINS OF 30',/,1000(I5,I10,/))
	GO TO 143
	1425 if(MELEC100(1000) > 0) GO TO 1427
	WRITE(6,1426) (K,MELEC100[K], K=1,1000)
	1426 print(' DISTRIBUTION IN CLUSTER SIZE IN BINS OF 100',/,1000(I5,I10,/))
	GO TO 143
	1427 WRITE(6,1428) (K,MELEC300[K], K=1,1000)
	1428 print(' DISTRIBUTION IN CLUSTER SIZE IN BINS OF 300',/,1000(I5,I10,/))
	143 NINEL=ICOLL(2)+ICOLL(3)+ICOLL(4)+ICOLL(5)+ICOLL(7)+ICOLL(8)+ICOLL(9)+ICOLL(10)+ICOLL(12)+ICOLL(13)+ICOLL(14)+ICOLL(15)+ICOLL(17)+ICOLL(18)+ICOLL(19)+ICOLL(20)+ICOLL(22)+ICOLL(23)+ICOLL(24)+ICOLL(25)+ICOLL(27)+ICOLL(28)+ICOLL(29)+ICOLL(30)                          
	NELA=ICOLL[1]+ICOLL(6)+ICOLL(11)+ICOLL(16)+ICOLL(21)+ICOLL(26)
	ANDELTA=float(NDELTA) 
	ERRNDEL=math.sqrt(ANDELTA)/ANDELTA
	FRTOND=float(NREAL)/ANDELTA         
	FRINOND=float(NINEL)/ANDELTA          
	FRELOND=float(NELA)/ANDELTA       
	WRITE(6,221) FRTOND,FRINOND,FRELOND                               
	221 print(/,7X,'NUMBER OF COLLISIONS PER DELTA =',F10.2,/,2X,'NUMBER OF INELASTIC COLL. PER DELTA =',F10.2,/,4X,'NUMBER OF ELASTIC COLL. PER DELTA =',F10.2)                           
	#     print('-----------------------------------------------------------------------------')                                                       
	#     ILAST=DINT(TMAX1)+1                                                
	#     IF(ILAST > 300) ILAST=300                                        
	#     WRITE(6,1010) (TIME[I],I=1,ILAST)                                 
	#1010 print(/,6X,'DISTRIBUTION OF COLLISION TIMES IN 1 PECOSECOND BINS'
	#    /,2(/),30(1X,10E10.3/))                                       
	print('-----------------------------------------------------------------------------')                                                       
	DO 1020 I=1,NGAS         
	FREQEL[I]=float(ICOLL((5*I)-4))/ANDELTA                          
	FREQSP[I]=float(ICOLL(5*I))/ANDELTA                              
	FREINE[I]=float(ICOLL((5*I)-1))/ANDELTA                          
	FREATT[I]=float(ICOLL((5*I)-2))/ANDELTA
	FREION[I]=float(ICOLL((5*I)-3))/ANDELTA
	1020 CONTINUE
	WRITE(6,1050) (NAMEG[I],FREQEL[I],FREQSP[I],FREINE[I],FREATT[I],FREION[I],I=1,NGAS)  
	1050 print(/,5X,'COLLISIONS PER DELTA SORTED ACCORDING TO GAS AND TYPE OF COLLISION',2(/),3X,'GASES USED',16X,'ELASTIC    SUPERELAS   INELASTIC  ATTACHMENT  IONISATION',2(/),6(1X,A25,1X,5(F10.2,2X),/)) 
	print('-----------------------------------------------------------------------------')      
	WRITE(6,1060)            
	1060 print(/,2X,'NUMBER OF COLLISIONS PER EVENT FOR EACH GAS :',/,/) 
	DO 1100 J=1,NGAS   
	WRITE(6,1065) NAMEG[J]   
	1065 print(/,3X,A25,/,'----------------------------',/)
	DO 1090 K=1,LAST
	if(IARRY[K]:
	<= (5*J) and IARRY[K] > (5*(J-1))) :
	ACLL=float(ICOLN[K])
	FRELV=ACLL/ANDELTA
	if(ICOLN[K]:
	== 0) :
	ERRFR=0.0
	else:
	ERRFR=100.0*math.sqrt(ACLL)/ACLL
	# endif  
	WRITE(6,1070) DSCRPT[K],FRELV,ERRFR
	1070 print(3X,A50,3X,'%.4f' %,' +-',F10.5,' %')
	# endif
	1090 CONTINUE
	if(LBRM == 0 or IMIP == 1):
	GO TO 1100
	if(NBREM[J]:
	== 0) :
	EBRCOL=0.0
	else:
	EBRCOL=EBRTOT[J]/float(NBREM[J])
	# endif
	WRITE(6,1091) EBRCOL
	1091 print(/,5X,' AVERAGE BREMSSTRAHLUNG EMISSION ENERGY =',D12.4,' EV.',/)
	EBREVE=EBRTOT[J]/ANDELTA
	if(LBRM == 1):
	WRITE(6,1103) EBREVE
	1103 print(5X,' AVERAGE BREMSSTRAHLUNG ENERGY LOSS PER EVENT    =',D12.4,' EV.',/)
	1100 CONTINUE
	print('-----------------------------------------------------------------------------')
	if(NPLAST == 0):
	RETURN
	WRITE(6,335) 
	335 print(/,2X,'NULL COLLISION PER EVENT FOR GAS MIXTURE',/,'  NB. OUTPUT CORRECTED FOR SCALING OF X-SECTIONS.',/,'------------------------------------------------')
	DO 1191 JJ=1,NPLAST
	ACLL=float(ICOLNN(JJ))
	FRELV=ACLL/ANDELTA
	if(FRELV == 0.0):
	:
	ERRFR=0.0
	else:
	ERRFR=100.0*math.sqrt(ACLL)/ACLL
	# endif
	1191 WRITE(6,1171) DSCRPTN(JJ),FRELV,ERRFR,JJ 
	1171 print(3X,A50,3X,'%.4f' %,' +-',F10.5,' %',5X,'ID=',I3)
	RETURN                                                            
      # end
def MIPCALC:
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,TCFMAX(10),TCFMAX1,RSTART,EFIELD,ETHRM,ECUT,NEVENT,IMIP,IWRITE  
      COMMON/SET2/DRXINIT,DRYINIT,DRZINIT
      COMMON/LARGE/CF(20000,512),EIN(512),TCF(20000),IARRY(512),RGAS(512),IPN(512),WPL(512),IZBR(512),IPLAST,PENFRA[3,512]
      COMMON/ANIS/PSCT(20000,512),ANGCT(20000,512),INDEX(512),NISO
      COMMON/RLTVY/BET[20]00),GAM(20000),VC,EMS
      COMMON/MIPCLC/ANPRELA,ANPRATT,ANPREXC,ANPRION,ANPREXCI,ANPRBRM
      COMMON/DEDX/ELOSS,ELOSEX,ELOSION,ESUM,BETAGAM,TCFHIGH,VELC,EMAXDEL,ELOSIONC,CUTIONFRC,ELOSEXI,ELOSBREM,NREJECT
      COMMON/COMP/LCMP,LCFLG,LRAY,LRFLG,LPAP,LPFLG,LBRM,LBFLG,LPEFLG
      COMMON/MIPOUT/ENM(100000,20),XS(100000,20),YS(100000,20),ZS(100000,20),DIRX(100000,20),DIRY(100000,20),DIRZ[100000,20],TS(100000,20),IEVENT(100000)
      COMMON/IONFL/NC0(512),EC0(512),NG1(512),EG1(512),NG2(512),EG2(512),WKLM(512),DSTFL(512)
      COMMON/IONMOD/ESPLIT(512,20),IONMODEL(512) 
      DIMENSION CFTEMP(512),PSTEMP(512),ANTEMP(512)
# CALCULATE DE/DX AND DISTANCE BETWEEN PRIMARY CLUSTERS AND ALSO
# PRIMARY ELECTRON ENERGY AND VACANCY FOR INPUT TO THERMALISATION
# ALSO ADDS EXCITATION CLUSTERS WHICH HAVE PENNING FRACTIONS GT 0.0
#
# USE VELOCITY IN METRES/PICOSECOND
      VV=2.99792458D-4 
# MAXIMUM DELTA ELECTRON ENERGY ALLOWED IN EVENT OUTPUT SECTION= EMAXDEL
# NOTE NO LIMIT ON GLOBAL DE/DX CALCULATION
#
      EMAXDEL=ECUT      
      NREJECT=0
      NCUT=0
      NCUTT=0
#
      IEVMAX=100000  
      NPMAX=0    
      API=numpy.arccos(-1.00)
      TWOPI=2.00*API
      ANPRELA=0.00
      ANPRATT=0.00
      ANPREXC=0.00
      ANPREXCI=0.00
      ANPRION=0.00
      ANPRBRM=0.00
      ELOSS=0.00
      ELOSEX=0.00
      ELOSEXI=0.00
      ELOSION=0.00
      ELOSIONC=0.00
      ELOSBREM=0.00
      DO 1 I=1,IPLAST
      CFTEMP[I]=CF(20000,I)
      PSTEMP[I]=PSCT(20000,I)
      ANTEMP[I]=ANGCT(20000,I)
      TCFF=TCF(20000)
      BETA=BET[20]00)
      GAMM=GAM(20000)
    1 CONTINUE
      VEL=BETA*VC
      DO 2 J=1,IPLAST
      IA=IARRY[J]
      if(IA == 4 or IA == 5 or IA == 9 or IA == 10 or IA == 14 or IA == 15 or IA == 19 or IA == 20 or IA == 24 or IA == 25 or IA == 29 or IA == 30) :
# BREMSSTRAHLUNG EXCITATION OR SUPERELASTIC
       if(J != 1):
 CFT=TCFF*(CFTEMP[J]-CFTEMP(J-1))
       if(J == 1):
 CFT=TCFF*CFTEMP[J]
# CHECK IF BREMSSTRAHLUNG
       if(LBRM == 1 and IZBR[J]:
 != 0) :
# BREMSSTRAHLUNG
# FIND AVERAGE BREMSSTRAHLUNG ENERGY LOSS OVER 10000 EVENTS
        IATOMNO=IZBR[J]
        E=ESTART
        ESUMBR=0.0
        WRITE(6,997) E
  997   print(' ENERGY=',D12.4)
        DO 111 K=1,10000
       CALL BREMS(IATOMNO,E,DCX2,DCY2,DCZ2,EOUT,EDCX,EDCY,EDCZ,EGAMMA,GDCX,GDCY,GDCZ)
        ESUMBR=ESUMBR+EGAMMA
  111   CONTINUE
        ELBRM=ESUMBR/10000.0
        WRITE(6,998) ELBRM
  998   print(' ELBRM=',D12.4)
        ANPRBRM=ANPRBRM+CFT/VEL
        ELOSBREM=ELOSBREM+CFT*ELBRM/VEL
       # endif
       if(LBRM == 1 and IZBR[J]:
 != 0) GO TO 5
# EXCITATION OR SUPERELASTIC
        ANPREXC=ANPREXC+CFT/VEL
        ELOSEX=ELOSEX+CFT*EIN[J]*RGAS[J]/VEL
        if(IPEN == 1 and PENFRA[1,J] > 0.0):
 :
# PENNING TRANSFER OF EXCITATION TO IONISATION
         ANPREXCI=ANPREXCI+PENFRA[1,J]*CFT/VEL
         ELOSEXI=ELOSEXI+PENFRA[1,J]*CFT*EIN[J]*RGAS[J]/VEL
        # endif
    5 CONTINUE
      else if(IA == 1 or IA == 6 or IA == 11 or IA == 16 or IA == 21 or IA == 26) :
# ELASTIC ENERGY LOSS
       if(J != 1):
 CFT=TCFF*(CFTEMP[J]-CFTEMP(J-1))
       if(J == 1):
 CFT=TCFF*CFTEMP[J]
       ANPRELA=ANPRELA+CFT/VEL
# CALCULATE ELASTIC ENERGY LOSS AVERAGED OVER NE EVENTS
# USE ANISOTROPIC SCATTERING
       NE=10000
       ELAS=0.00
       RFAC=1.00+GAMM*(RGAS[J]-1.00)
       RFAC=(RFAC-1.00)/(RFAC*RFAC)
       DO 66 K=1,NE
       R3=DRAND48(RDUM)
       if(INDEX[J]:
 == 1) :
        R31=DRAND48(RDUM)
        F3=1.00-R3*ANTEMP[J]
        if(R31 > PSTEMP[J]):
        	F3=-F3
       else if(INDEX[J] == 2) :
        EPSI=PSTEMP[J]
        F3=1.00-(2.00*R3*(1.00-EPSI)/(1.00+EPSI*(1.00-2.00*R3)))
       else:
# ISOTROPIC SCATTERING
        F3=1.00-2.00*R3
       # endif
       ELAS=ELAS+(1.00-F3)
   66  CONTINUE
       ELOSS=CFT*2.00*RFAC*EFINAL*ELAS/VEL
       ELOSS=ELOSS/float(NE)
      else if(IA == 3 or IA == 8 or IA == 13 or IA == 18 or IA == 23 or IA == 28) :
# ATTACHMENT
      ANPRATT=ANPRATT+TCFF*(CFTEMP[J]-CFTEMP(J-1))/VEL
      else if(IA == 2 or IA == 7 or IA == 12 or IA == 17 or IA == 22 or IA == 27) :
# IONISATION
      ANPRION=ANPRION+TCFF*(CFTEMP[J]-CFTEMP(J-1))/VEL
      else: 
       WRITE(6,99)
   99  print(' WARNING NO COLLISION TYPE IN def MIPCALC')    
      # endif
    2 CONTINUE
# CALCULATE ENERGY LOSS TO IONISATION AVERAGED OVER NEV EVENTS
      NEV=10000000
      ETEMP=0.0
      ETEMPC=0.0
      DO 3 J=1,IPLAST
      IA=IARRY[J]
      if(IA == 2 or IA == 7 or IA == 12 or IA == 17 or IA == 22 or IA.EQ.27) :
       if(EFINAL < EIN[J]:
) GO TO 3
#  NEV = NO OF IONISATION EVENTS TO AVERAGE
       DO 4 K=1,NEV
       if(IONMODEL[J]:
 > 0) :
# CALCULATE SECONDARY ENERGY ,ESEC, IN IONISATION COLLISION USING
# FIVE DIFFERENT POSSIBLE MODELS
         CALL IONSPLIT(J,ESTART,EIN[J],ETEMP1)
         GO TO  644
        # endif
       R9=DRAND48(RDUM)
       ETEMP1=WPL[J]*TAN(R9*ATAN((ESTART-EIN[J])/(2.00*WPL[J]))) 
       ETEMP1=WPL[J]*(ETEMP1/WPL[J])**0.9524
  644  CONTINUE    
       ETEMP=ETEMP+ETEMP1+EIN[J]*RGAS[J]
       NCUTT=NCUTT+1
       if((ETEMP1+EIN[J]:
*RGAS[J]) < EMAXDEL) :
        ETEMPC=ETEMPC+ETEMP1+EIN[J]*RGAS[J]
        NCUT=NCUT+1
       # endif
    4  CONTINUE
       if(J != 1):
 CFT=TCFF*(CFTEMP[J]-CFTEMP(J-1))
       if(J == 1):
 CFT=TCFF*CFTEMP[J]
       ETEMP=CFT*ETEMP/VEL
       ETEMPC=CFT*ETEMPC/VEL
       ETEMP=ETEMP/float(NEV)
       ETEMPC=ETEMPC/float(NEV)
       ELOSION=ELOSION+ETEMP
       ELOSIONC=ELOSIONC+ETEMPC
       else:
      # endif
    3 CONTINUE
      BETAGAM=BETA*GAMM
# CONVERT TO EV/CM
      ELOSS=ELOSS*1.D10
      ELOSEX=ELOSEX*1.D10
      ELOSEXI=ELOSEXI*1.D10
      ELOSION=ELOSION*1.D10
      ELOSIONC=ELOSIONC*1.D10
      ELOSBREM=ELOSBREM*1.D10
# CONVERT COLLISIONS/CM
      ANPRELA=ANPRELA*1.D10
      ANPRATT=ANPRATT*1.D10
      ANPREXC=ANPREXC*1.D10
      ANPREXCI=ANPREXCI*1.D10
      ANPRION=ANPRION*1.D10
      ANPRBRM=ANPRBRM*1.D10
      ESUM=ELOSS+ELOSEX+ELOSION+ELOSBREM
      VELC=VEL*100.
      TCFHIGH=TCF(20000)*1.D12
      CUTIONFRC=float(NCUT)/float(NCUTT)
# 
#  LOAD EVENT ARRAYS WITH ELECTRON ENERGY AND DIRECTION COSINES
#  ADDS ELECTRONS FROM PENNING EXCITATION IF ALLOWED
      DO 100 K=1,NEVENT 
      if(K > IEVMAX):
 :
      WRITE(6,999) IEVMAX
  999 print(' WARNING MAXIMUM NUMBER OF EVENTS=',I6,' def STOPPED')
      # endif
      NP=0
#
# DETERMINE COLLISION TYPE   
#
   10 R1=DRAND48(RDUM)
      I=0
   11 I=I+1 
      if(CFTEMP[I]:
 < R1) GO TO 11
# FIND TYPE OF INTERACTION
      IA=IARRY[I]
      if(IA == 2 or IA == 7 or IA == 12 or IA == 17 or IA == 22 or IA.EQ.27) :
#  IONISATION
#-----------------------------------------------------------------
   12  R9=DRAND48(RDUM)
       ESEC=WPL[I]*TAN(R9*ATAN((ESTART-EIN[I])/(2.00*WPL[I]))) 
       ESEC=WPL[I]*(ESEC/WPL[I])**0.9524
       if(ESEC > EMAXDEL):
 :
        NREJECT=NREJECT+1
        GO TO 12
       # endif
# CALCULATE PRIMARY SCATTERING ANGLE 
# ANISOTROPIC SCATTERING
       R3=DRAND48(RDUM)
       if(INDEX[I]:
 == 1) :
        R31=DRAND48(RDUM)
        F3=1.00-R3*ANTEMP[I]
        if(R31 > PSTEMP[I]:
) F3=-F3
       else if(INDEX[I] == 2) :
        EPSI=PSTEMP[I] 
        F3=1.00-(2.00*R3*(1.00-EPSI)/(1.00+EPSI*(1.00-2.00*R3)))
       else: 
# ISOTROPIC SCATTERING
        F3=1.00-2.00*R3
       # endif
       THETAP=numpy.arccos(F3)
       F5P=DSIN(THETAP)
       GAMSEC=(EMS+ESEC)/EMS
# CALCULATE SECONDARY RECOIL ANGLE FROM FREE KINEMATICS
       F5S=F5P*math.sqrt(ESTART/ESEC)*GAMM/GAMSEC
       if(F5S > 1.0):
 F5S=1.0
       THETAS=DASIN(F5S)
       R1=DRAND48(RDUM)
       PHIS=TWOPI*R1
# CALCULATE NEW DIRECTION COSINES FROM INITIAL VALUES AND SCAT. ANGLES
       CALL DRCOS(DRXINIT,DRYINIT,DRZINIT,THETAS,PHIS,DRXX,DRYY,DRZZ)
# LOAD SECONDARY ELECTRON DATA  
       NP=NP+1
       if(NP > NPMAX):
 NPMAX=NP
       if(NP > 20):
 WRITE(6,991)
  991  print(' EVENT WITH N0 OF PRIMARIES GT 20 IN MIPCALC STOPPED PROGRAM')
       if(NP > 20):
 STOP
       ENM(K,NP)=ESEC
       DIRX(K,NP)=DRXX 
       DIRY(K,NP)=DRYY 
       DIRZ[K,NP]=DRZZ
       XS(K,NP)=0.0
       YS(K,NP)=0.0
       ZS(K,NP)=0.0
       TS(K,NP)=0.0
       IEVENT[K]=NP
# CALCULATE POSSIBLE SHELL EMISSIONS: AUGER OR FLUORESCENCE
       ifLTST=0:
       if(WKLM[I]:
 > 0.0) :
        R9=DRAND48(RDUM)
        if(R9 < WKLM[I]:
) ifLTST=1
       # endif
       if(ifLTST == 0):
 :
# AUGER EMISSION WITHOUT FLUORESCENCE
        NAUG=NC0[I]
        EAVAUG=EC0[I]/float(NAUG)
        DO 700 JFL=1,NC0[I]
        NP=NP+1
        if(NP > NPMAX):
 NPMAX=NP
        if(NP > 20):
 WRITE(6,991)
        if(NP > 20):
 STOP
        ENM(K,NP)=EAVAUG
# RANDOM EMISSION ANGLE
        R3=DRAND48(RDUM)
        F3=1.00-2.00*R3
        THETAS=numpy.arccos(F3)
        F6=DCOS(THETAS)
        F5=DSIN(THETAS)
        R4=DRAND48(RDUM)
        PHIS=TWOPI*R4
        F8=DSIN(PHIS)
        F9=DCOS(PHIS)
        DIRX(K,NP)=F9*F5
        DIRY(K,NP)=F8*F5
        DIRZ[K,NP]=F6
        XS(K,NP)=0.0
        YS(K,NP)=0.0
        ZS(K,NP)=0.0
        TS(K,NP)=0.0
  700   CONTINUE
        IEVENT[K]=NP
       else: 
# AUGER EMISSION AND FLUORESCENCE
        if(NG2[I]:
 == 0) GO TO 702
        NAUG=NG2[I]
        EAVAUG=EG2[I]/float(NAUG)
        DO 701 JFL=1,NG2[I]
        NP=NP+1
        if(NP > NPMAX):
 NPMAX=NP
        if(NP > 20):
 WRITE(6,991)
        if(NP > 20):
 STOP
        ENM(K,NP)=EAVAUG
# RANDOM EMISSION ANGLE
        R3=DRAND48(RDUM)
        THETAS=numpy.arccos(1.0-2.0*R3)
        F6=DCOS(THETAS)
        F5=DSIN(THETAS)
        R4=DRAND48(RDUM)
        PHIS=TWOPI*R4
        F8=DSIN(PHIS)
        F9=DCOS(PHIS)
        DIRX(K,NP)=F9*F5
        DIRY(K,NP)=F8*F5
        DIRZ[K,NP]=F6
        XS(K,NP)=0.0
        YS(K,NP)=0.0
        ZS(K,NP)=0.0
        TS(K,NP)=0.0
  701   CONTINUE
        IEVENT[K]=NP
  702   if(NG1[I] == 0) GO TO 704
        NAUG=NG1[I]
        EAVAUG=EG1[I]/float(NAUG)
        R9=DRAND48(RDUM)
# FLUORESCENCE ABSORPTION DISTANCE
        DFL=-math.log(R9)*DSTFL[I]
        DO 703 JFL=1,NG1[I]
        NP=NP+1
        if(NP > NPMAX):
 NPMAX=NP
        if(NP > 20):
 WRITE(6,991)
        if(NP > 20):
 STOP
        ENM(K,NP)=EAVAUG
# RANDOM EMISSION ANGLE
        R3=DRAND48(RDUM)
        THETAS=numpy.arccos(1.0-2.0*R3)
        F6=DCOS(THETAS)
        F5=DSIN(THETAS)
        R4=DRAND48(RDUM)
        PHIS=TWOPI*R4
        F8=DSIN(PHIS)
        F9=DCOS(PHIS)
        DIRX(K,NP)=F9*F5
        DIRY(K,NP)=F8*F5
        DIRZ[K,NP]=F6
        R3=DRAND48(RDUM)
        THEFL=numpy.arccos(1.0-2.0*R3) 
        R4=DRAND48(RDUM)
        PHifL=TWOPI*R4
        XS(K,NP)=DFL*DSIN(THEFL)*DCOS(PHifL)
        YS(K,NP)=DFL*DSIN(THEFL)*DSIN(PHifL)
        ZS(K,NP)=DFL*DCOS(THEFL)  
        TS(K,NP)=DFL/VV
  703   CONTINUE
        IEVENT[K]=NP
  704   CONTINUE   
       # endif
      else if(IA == 4 or IA == 9 or IA == 14 or IA == 14 or IA == 19.OR.IA == 24 or IA == 29) :
# EXCITATION
#----------------------------------------------------------------
       if(PENFRA[1,I] == 0.0 or IPEN == 0):
 GO TO 10
# POSSIBLE PENNING TRANSFER
       R9=DRAND48(RDUM)
       if(R9 < PENFRA[1,I]):
 :
# PENNING TRANSFER
        NP=NP+1
        if(NP > NPMAX):
 NPMAX=NP
        if(NP > 20):
 WRITE(6,991)
        if(NP > 20):
 STOP
# FINITE PENNING FIXED ELECTRON ENERGY TO 4.0EV
        ENM(K,NP)=4.0
# RANDOM EMISSION ANGLE
        R3=DRAND48(RDUM)
        THETAS=numpy.arccos(1.0-2.0*R3)
        F6=DCOS(THETAS)
        F5=DSIN(THETAS)
        R4=DRAND48(RDUM)
        PHIS=TWOPI*R4
        F8=DSIN(PHIS)
        F9=DCOS(PHIS)
        DIRX(K,NP)=F9*F5
        DIRY(K,NP)=F8*F5
        DIRZ[K,NP]=F6
# PENNING TRANSFER DISTANCE
        ASIGN=1.00
        R1=DRAND48(RDUM)
        if(R1 < 0.5):
ASIGN=-ASIGN
        R9=DRAND48(RDUM)
        XS(K,NP)=-math.log(R9)*PENFRA[2,I]*1.D-6*ASIGN
        R1=DRAND48(RDUM)
        if(R1 < 0.5):
ASIGN=-ASIGN
        R9=DRAND48(RDUM)
        YS(K,NP)=-math.log(R9)*PENFRA[2,I]*1.D-6*ASIGN
        R1=DRAND48(RDUM)
        if(R1 < 0.5):
ASIGN=-ASIGN
        R9=DRAND48(RDUM)
        ZS(K,NP)=-math.log(R9)*PENFRA[2,I]*1.D-6*ASIGN
        R9=DRAND48(RDUM)
        TS(K,NP)=-math.log(R9)*PENFRA[3,I]
        IEVENT[K]=NP
       else:
        GO TO 10
       # endif  
      else:
# ELASTIC
#-----------------------------------------------------------------
       GO TO 10
      # endif
  100 CONTINUE
      WRITE(6,888) NPMAX
  888 print(' NPMAX=',I3)
      RETURN
      # end
      def CASSTOREB[NVAC,X,Y,Z]:
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/CALCASB/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      COMMON/RESB/IONSM(10),ifLSM(10),ESTOR(10,28),EPHOT(10,28),X0(10,28),Y0(10,28),Z0(10,28),DRX0(10,28),DRY0(10,28),DRZ0(10,28)
      COMMON/GEN01/X01(10),Y01(10),Z01(10)
# STORE EVENT DATA 
      IONSM(NVAC)=IONSUM(NVAC)
      ifLSM(NVAC):
=ifLSUM(NVAC)
      if(IONSUM(NVAC):
 > 28 or ifLSUM(NVAC) > 28) :
       WRITE(6,888) IONSUM(NVAC),ifLSUM(NVAC)
  888  print(' IONSUM OR ifLSUM GT.28 IONSUM=',I3,'  ifSUM=',I3,' NVAC=',I3)
       STOP
      # endif
      DO 11 J=1,ifLSUM(NVAC)
   11 EPHOT(NVAC,J)=EPHOTON(NVAC,J)
      DO 1 J=1,IONSUM(NVAC)
      ESTOR(NVAC,J)=ESTORE(NVAC,J)
      X0(NVAC,J)=X
      Y0(NVAC,J)=Y
      Z0(NVAC,J)=Z
      X01(NVAC)=X0(NVAC,J)
      Y01(NVAC)=Y0(NVAC,J)
      Z01(NVAC)=Z0(NVAC,J)
      DRX0(NVAC,J)=DRXE(NVAC,J)
      DRY0(NVAC,J)=DRYE(NVAC,J)
      DRZ0(NVAC,J)=DRZE(NVAC,J)
    1 CONTINUE
      RETURN
      # end
      def CSSTFB1(NVAC,L1,DIST1):           
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/CALCASB/IONSUM0(10),ifLSUM0(10),ESTORE0(10,28),EPHOTON0(10,28),DRXE0(10,28),DRYE0(10,28),DRZE0(10,28),DRX0(10,28),DRY0(10,28),DRZ0(10,28)
      COMMON/CALCAS1B/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      COMMON/GENB1/IONF1(10),ESTF1(10,28),X1(10,28),Y1(10,28),Z1(10,28),DRXS(10,28),DRYS(10,28),DRZS(10,28)
      COMMON/GEN11/X11(10,28),Y11(10,28),Z11(10,28)
      COMMON/GEN01/X01(10),Y01(10),Z01(10)
#
      if(L1 == 0):
 :
# ZERO COUNTER
       IONF1(NVAC)=0
       DO 11 K=1,28
   11  ESTF1(NVAC,K)=0.0
       RETURN
      # endif
# STORE EVENT DATA FOR FIRST GENERATION FLUORESCENCE
      if(IONSUM(NVAC):
 > 28) :
       WRITE(6,99) IONSUM(NVAC),NVAC
  99   print(' WARNING FIRST GENERATION CONVERTED FLUORESCENCE HAS AN EVENT WITH',I3,' IONS.',/,' COMPTON BRANCH NO=',I3,/)
       STOP
      # endif
      IONF1(NVAC)=IONSUM(NVAC)
      DO 1 J=1,IONSUM(NVAC)
      ESTF1(NVAC,J)=ESTORE(NVAC,J)
      X1(NVAC,J)=X01(NVAC)+DIST1*DRX0(NVAC,L1)
      Y1(NVAC,J)=Y01(NVAC)+DIST1*DRY0(NVAC,L1)
      Z1(NVAC,J)=Z01(NVAC)+DIST1*DRZ0(NVAC,L1)
      X11(NVAC,L1)=X1(NVAC,J)
      Y11(NVAC,L1)=Y1(NVAC,J)
      Z11(NVAC,L1)=Z1(NVAC,J)
      DRXS(NVAC,J)=DRXE(NVAC,J)
      DRYS(NVAC,J)=DRYE(NVAC,J)
      DRZS(NVAC,J)=DRZE(NVAC,J)
    1 CONTINUE
      RETURN
      # end
      def CSSTFB2(NVAC,L1,DIST1):               
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/CALCAS1B/IONSUM0(10),ifLSUM0(10),ESTORE0(10,28),EPHOTON0(10,28),DRXE0(10,28),DRYE0(10,28),DRZE0(10,28),DRX0(10,28),DRY0(10,28),DRZ0(10,28)
      COMMON/CALCAS2B/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      COMMON/GENB2/IONF2(10),ESTF2(10,28),X2(10,28),Y2(10,28),Z2(10,28),DRXS(10,28),DRYS(10,28),DRZS(10,28)
      COMMON/GEN21/X21(10,28),Y21(10,28),Z21(10,28)
      COMMON/GEN11/X11(10,28),Y11(10,28),Z11(10,28)
#
      if(L1 == 0):
 :
# ZERO COUNTER
       IONF2(NVAC)=0
       DO 11 K=1,28
   11  ESTF2(NVAC,K)=0.0
       RETURN
      # endif
# STORE EVENT DATA FOR FIRST GENERATION FLUORESCENCE
# STORE EVENT DATA FOR SECOND GENERATION FLUORESCENCE
      if(IONSUM(NVAC):
 > 28) :
       WRITE(6,99) IONSUM(NVAC),NVAC
  99   print(' WARNING SECOND GENERATION CONVERTED FLUORESCENCE HAS AN  EVENT WITH',I3,' IONS.',/,' COMPTON BRANCH NO=',I3,/)
       STOP
      # endif
      IONF2(NVAC)=IONSUM(NVAC)
      DO 1 J=1,IONSUM(NVAC)
      ESTF2(NVAC,J)=ESTORE(NVAC,J)
      X2(NVAC,J)=X11(NVAC,L1)+DIST1*DRX0(NVAC,L1)
      Y2(NVAC,J)=Y11(NVAC,L1)+DIST1*DRY0(NVAC,L1)
      Z2(NVAC,J)=Z11(NVAC,L1)+DIST1*DRZ0(NVAC,L1)
      X21(NVAC,L1)=X2(NVAC,J)
      Y21(NVAC,L1)=Y2(NVAC,J)
      Z21(NVAC,L1)=Z2(NVAC,J)
      DRXS(NVAC,J)=DRXE(NVAC,J)
      DRYS(NVAC,J)=DRYE(NVAC,J)
      DRZS(NVAC,J)=DRZE(NVAC,J)
    1 CONTINUE
      RETURN
      # end
      def CSSTFB3(NVAC,L1,DIST1):
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/CALCAS2B/IONSUM0(10),ifLSUM0(10),ESTORE0(10,28),EPHOTON0(10,28),DRXE0(10,28),DRYE0(10,28),DRZE0(10,28),DRX0(10,28),DRY0(10,28),DRZ0(10,28)
      COMMON/CALCAS3B/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      COMMON/GENB3/IONF3(10),ESTF3(10,15),X3(10,15),Y3(10,15),Z3(10,15),DRXS(10,15),DRYS(10,15),DRZS(10,15)
      COMMON/GEN31/X31(10,28),Y31(10,28),Z31(10,28)
      COMMON/GEN21/X21(10,28),Y21(10,28),Z21(10,28)
#
      if(L1 == 0):
 :
# ZERO COUNTER
       IONF3(NVAC)=0
       DO 11 K=1,15
   11  ESTF3(NVAC,K)=0.0
       RETURN
      # endif
# STORE EVENT DATA FOR THIRD GENERATION FLUORESCENCE
      if(IONSUM(NVAC):
 > 15) :
       WRITE(6,99) IONSUM(NVAC),NVAC
  99   print(' WARNING THIRD GENERATION CONVERTED FLUORESCENCE HAS AN  EVENT WITH',I3,' IONS.',/,' COMPTON BRANCH NO=',I3,/)
       STOP
      # endif
      IONF3(NVAC)=IONSUM(NVAC)
      DO 1 J=1,IONSUM(NVAC)
      ESTF3(NVAC,J)=ESTORE(NVAC,J)
      X3(NVAC,J)=X21(NVAC,L1)+DIST1*DRX0(NVAC,L1)
      Y3(NVAC,J)=Y21(NVAC,L1)+DIST1*DRY0(NVAC,L1)
      Z3(NVAC,J)=Z21(NVAC,L1)+DIST1*DRZ0(NVAC,L1)
      X31(NVAC,L1)=X3(NVAC,J)
      Y31(NVAC,L1)=Y3(NVAC,J)
      Z31(NVAC,L1)=Z3(NVAC,J)
      DRXS(NVAC,J)=DRXE(NVAC,J)
      DRYS(NVAC,J)=DRYE(NVAC,J)
      DRZS(NVAC,J)=DRZE(NVAC,J)
    1 CONTINUE
      RETURN
      # end
      def CSSTFB4(NVAC,L1,DIST1):
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/CALCAS3B/IONSUM0(10),ifLSUM0(10),ESTORE0(10,28),EPHOTON0(10,28),DRXE0(10,28),DRYE0(10,28),DRZE0(10,28),DRX0(10,28),DRY0(10,28),DRZ0(10,28)
      COMMON/CALCAS4B/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      COMMON/GENB4/IONF4(10),ESTF4(10,12),X4(10,12),Y4(10,12),Z4(10,12),DRXS(10,12),DRYS(10,12),DRZS(10,12)
      COMMON/GEN31/X31(10,28),Y31(10,28),Z31(10,28)
      COMMON/GEN41/X41(10,28),Y41(10,28),Z41(10,28)
#
      if(L1 == 0):
 :
# ZERO COUNTER
       IONF4(NVAC)=0
       DO 11 K=1,12
   11  ESTF4(NVAC,K)=0.0
       RETURN
      # endif
# STORE EVENT DATA FOR FOURTH GENERATION FLUORESCENCE
      if(IONSUM(NVAC):
 > 12) :
       WRITE(6,99) IONSUM(NVAC),NVAC
  99   print(' WARNING FOURTH GENERATION CONVERTED FLUORESCENCE HAS AN  EVENT WITH',I3,' IONS.',/,' COMPTON BRANCH NO=',I3,/)
       STOP
      # endif
      IONF4(NVAC)=IONSUM(NVAC)
      DO 1 J=1,IONSUM(NVAC)
      ESTF4(NVAC,J)=ESTORE(NVAC,J)
      X4(NVAC,J)=X31(NVAC,L1)+DIST1*DRX0(NVAC,L1)
      Y4(NVAC,J)=Y31(NVAC,L1)+DIST1*DRY0(NVAC,L1)
      Z4(NVAC,J)=Z31(NVAC,L1)+DIST1*DRZ0(NVAC,L1)
      X41(NVAC,L1)=X4(NVAC,J)
      Y41(NVAC,L1)=Y4(NVAC,J)
      Z41(NVAC,L1)=Z4(NVAC,J)
      DRXS(NVAC,J)=DRXE(NVAC,J)
      DRYS(NVAC,J)=DRYE(NVAC,J)
      DRZS(NVAC,J)=DRZE(NVAC,J)
    1 CONTINUE
      RETURN
      # end
      def CSSTFB5(NVAC,L1,DIST1):
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/CALCAS4B/IONSUM0(10),ifLSUM0(10),ESTORE0(10,28),EPHOTON0(10,28),DRXE0(10,28),DRYE0(10,28),DRZE0(10,28),DRX0(10,28),DRY0(10,28),DRZ0(10,28)
      COMMON/CALCAS5B/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      COMMON/GENB5/IONF5(10),ESTF5(10,5),X5(10,5),Y5(10,5),Z5(10,5),DRXS(10,5),DRYS(10,5),DRZS(10,5)
      COMMON/GEN41/X41(10,28),Y41(10,28),Z41(10,28)
      COMMON/GEN51/X51(10,28),Y51(10,28),Z51(10,28)
#
      if(L1 == 0):
 :
# ZERO COUNTER
       IONF5(NVAC)=0
       DO 11 K=1,5
   11  ESTF5(NVAC,K)=0.0
       RETURN
      # endif
# STORE EVENT DATA FOR FIFTH GENERATION FLUORESCENCE
      if(IONSUM(NVAC):
 > 5) :
       WRITE(6,99) IONSUM(NVAC),NVAC
  99   print(' WARNING FifTH GENERATION CONVERTED FLUORESCENCE HAS AN  EVENT WITH',I3,' IONS.',/,' COMPTON BRANCH NO=',I3,/)
       STOP
      # endif
      IONF5(NVAC)=IONSUM(NVAC)
      DO 1 J=1,IONSUM(NVAC)
      ESTF5(NVAC,J)=ESTORE(NVAC,J)
      X5(NVAC,J)=X41(NVAC,L1)+DIST1*DRX0(NVAC,L1)
      Y5(NVAC,J)=Y41(NVAC,L1)+DIST1*DRY0(NVAC,L1)
      Z5(NVAC,J)=Z41(NVAC,L1)+DIST1*DRZ0(NVAC,L1)
      X51(NVAC,L1)=X5(NVAC,J)
      Y51(NVAC,L1)=Y5(NVAC,J)
      Z51(NVAC,L1)=Z5(NVAC,J)
      DRXS(NVAC,J)=DRXE(NVAC,J)
      DRYS(NVAC,J)=DRYE(NVAC,J)
      DRZS(NVAC,J)=DRZE(NVAC,J)
    1 CONTINUE
      RETURN
      # end
      def COMPRESS(IDBG,ENSUM):
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/PRIM4/MSUM1,MCOMP1,MRAYL1,MPAIR1,MPHOT1,MVAC1
      COMMON/RESB/IONSM(10),ifLSM(10),ESTOR(10,28),EPHOT(10,28),X(10,28),Y(10,28),Z[10,28],DRX0(10,28),DRY0(10,28),DRZ0(10,28)
      COMMON/GENB1/IONF1(10),ESTF1(10,28),X1(10,28),Y1(10,28),Z1(10,28),DRX1(10,28),DRY1(10,28),DRZ1(10,28)
      COMMON/GENB2/IONF2(10),ESTF2(10,28),X2(10,28),Y2(10,28),Z2(10,28),DRX2(10,28),DRY2(10,28),DRZ2(10,28)
      COMMON/GENB3/IONF3(10),ESTF3(10,15),X3(10,15),Y3(10,15),Z3(10,15),DRX3(10,15),DRY3(10,15),DRZ3(10,15)
      COMMON/GENB4/IONF4(10),ESTF4(10,12),X4(10,12),Y4(10,12),Z4(10,12),DRX4(10,12),DRY4(10,12),DRZ4(10,12)
      COMMON/GENB5/IONF5(10),ESTF5(10,5),X5(10,5),Y5(10,5),Z5(10,5),DRX5(10,5),DRY5(10,5),DRZ5(10,5)
      COMMON/INTHRMB1/NPTPE,ET(10,50),XT(10,50),YT(10,50),ZT(10,50),DRX(10,50),DRY(10,50),DRZ[10,50],NJFLR(10,50),IEVENTL(10) 
      COMMON/PPSTRB/NPTP,EPPST(2),XPP(2),YPP(2),ZPP(2),DRXPP(2),DRYPP(2),DRZPP(2)
      DIMENSION ESTOT(10) 
      NPTPE=MVAC1
      DO 1 I=1,10
    1 ESTOT[I]=0.0
#     IF(IDBG == 1) :
#     WRITE(6,66) MVAC1
#  66 print(' IN COMPRESS MVAC1=',I4)
#     DO 67 KK=1,MVAC1
#     WRITE(6,68) IONSM(KK),IONF1(KK),IONF2(KK),IONF3(KK),IONF4(KK),
#    /IONF5(KK)
#  68 print(' IONSUM 0-5=',6I4)
#     WRITE(6,69) (ESTOR(KK,KKK),KKK=1,28)
#  69 print(' ESTOR=',4(7D12.4,/))
#     WRITE(6,70) (ESTF1(KK,KKK),KKK=1,28)
#  70 print(' ESTF1=',4(7D12.4,/))
#  67 CONTINUE
#     # endIF
#      
#  STORE CASCADE DATA INTO COMMON/INTHRMB1/
      DO 12 K=1,MVAC1
      ITOT=IONSM[K]+IONF1[K]+IONF2[K]+IONF3[K]+IONF4[K]+IONF5[K]
      IEVENTL[K]=ITOT
      if(ITOT > 50):
 : 
       WRITE(6,811) J
  811 print(' NEVENT=',I5,' ITOT OVERFLOW IN OUTPUTBC')
       STOP       
      # endif
# STORE EVENT FOR INPUT TO THERMALISATION
      DO 6 M=1,IONSM[K]
      ET(K,M)=ESTOR(K,M)
      XT(K,M)=X(K,M)
      YT(K,M)=Y(K,M)
      ZT(K,M)=Z[K,M]
      DRX(K,M)=DRX0(K,M)
      DRY(K,M)=DRY0(K,M)
      DRZ[K,M]=DRZ0(K,M)
      NJFLR(K,M)=0
      ESTOT[K]=ESTOT[K]+ESTOR(K,M)
    6 CONTINUE
      if(IONF1[K]:
 == 0) GO TO 17
      DO 7 M=1,IONF1[K]
      M1=M+IONSM[K]
      ET(K,M1)=ESTF1(K,M)   
      XT(K,M1)=X1(K,M)
      YT(K,M1)=Y1(K,M)
      ZT(K,M1)=Z1(K,M)
      DRX(K,M1)=DRX1(K,M)
      DRY(K,M1)=DRY1(K,M)
      DRZ[K,M1]=DRZ1(K,M)
      ESTOT[K]=ESTOT[K]+ESTF1(K,M)
      NJFLR(K,M1)=1
    7 CONTINUE
   17 if(IONF2[K] == 0) GO TO 18
      DO 8 M=1,IONF2[K]
      M2=M+IONSM[K]+IONF1[K]
      ET(K,M2)=ESTF2(K,M)
      XT(K,M2)=X2(K,M)
      YT(K,M2)=Y2(K,M)
      ZT(K,M2)=Z2(K,M)
      DRX(K,M2)=DRX2(K,M)
      DRY(K,M2)=DRY2(K,M)
      DRZ[K,M2]=DRZ2(K,M)
      ESTOT[K]=ESTOT[K]+ESTF2(K,M)
      NJFLR(K,M2)=2
    8 CONTINUE
   18 if(IONF3[K] == 0) GO TO 19
      DO 9 M=1,IONF3[K]
      M3=M+IONSM[K]+IONF1[K]+IONF2[K]
      ET(K,M3)=ESTF3(K,M)
      XT(K,M3)=X3(K,M)
      YT(K,M3)=Y3(K,M)
      ZT(K,M3)=Z3(K,M)
      DRX(K,M3)=DRX3(K,M)
      DRY(K,M3)=DRY3(K,M)
      DRZ[K,M3]=DRZ3(K,M)
      ESTOT[K]=ESTOT[K]+ESTF3(K,M)
      NJFLR(K,M3)=3
    9 CONTINUE
   19 if(IONF4[K] == 0) GO TO 20
      DO 10 M=1,IONF4[K]
      M4=M+IONSM[K]+IONF1[K]+IONF2[K]+IONF3[K]
      ET(K,M4)=ESTF4(K,M)
      XT(K,M4)=X4(K,M)
      YT(K,M4)=Y4(K,M)
      ZT(K,M4)=Z4(K,M)
      DRX(K,M4)=DRX4(K,M)
      DRY(K,M4)=DRY4(K,M)
      DRZ[K,M4]=DRZ4(K,M)
      ESTOT[K]=ESTOT[K]+ESTF4(K,M)
      NJFLR(K,M4)=4
   10 CONTINUE
   20 if(IONF5[K] == 0) GO TO 21
      DO 11 M=1,IONF5[K]
      M5=M+IONSM[K]+IONF1[K]+IONF2[K]+IONF3[K]+IONF4[K]
      ET(K,M5)=ESTF5(K,M)
      XT(K,M5)=X5(K,M)
      YT(K,M5)=Y5(K,M)
      ZT(K,M5)=Z5(K,M)
      DRX(K,M5)=DRX5(K,M)
      DRY(K,M5)=DRY5(K,M)
      DRZ[K,M5]=DRZ5(K,M)
      ESTOT[K]=ESTOT[K]+ESTF5(K,M)
      NJFLR(K,M5)=5
   11 CONTINUE
   21 CONTINUE
# PRINT SOME RAW DATA
#     IF(J <= 525) :
#     EDUM=0.0
#     DO 666 JJ=1,IEVENTL[J]
# 666 EDUM=EDUM+ET(JJ,J)
#     WRITE(6,232) J
#     WRITE(6,2321) EDUM
#2321 print(' TOT ENERGY=','%.3f' %)
# 232 print(' DATA FOR EVENT=',I3)
#     DO 234 M=1,IEVENTL[J]
#     WRITE(6,233) ET(M,J),XT(M,J),YT(M,J),ZT(M,J),TH(M,J),PH(M,J)
# 233 print(' E=','%.3f' %,' X=','%.3f' %,' Y=','%.3f' %,' Z=','%.3f' %,' THETA=',
#    /'%.3f' %,' PHI=','%.3f' %)
# 234 CONTINUE
#     # endIF
      EDUM=0.0
   12 CONTINUE
      DO 30 K=1,MVAC1
      EDUM=EDUM+ESTOT[K]
   30 CONTINUE
      EDUM=EDUM+EPPST[1]+EPPST(2)
      ENSUM=EDUM
      if(EDUM > (EFINAL+0.1):
) :
       WRITE(6,999) EDUM
  999 print(' ETOT =',D12.5,'EV.    BAD EVENT IN COMPRESS',/)
       IBAD=1
       STOP
      # endif
      RETURN     
      # end         
      def BREMSCASC(J11,EGAMMA,X0,Y0,Z0,T0,GDCX,GDCY,GDCZ,ILOW):
      IMPLICIT #real*8(A-H,O-Z)
      IMPLICIT #integer*8(I-N)
      CHARACTER*6 SCR(17),SCR1(17)
      COMMON/COMP/LCMP,LCFLG,LRAY,LRFLG,LPAP,LPFLG,LBRM,LBFLG,LPEFLG
      COMMON/COMPTOUT/EGAM,EELEC,THETAG,THETAE
      COMMON/PRIM4/MSUM1,MCOMP1,MRAYL1,MPAIR1,MPHOT1,MVAC1
      COMMON/GENCAS/ELEV[17,79],NSDEG(17),AA[17],BB[17],SCR,SCR1
      COMMON/MIXC/PRSH(6,3,17,17),ESH(6,3,17),AUG(6,3,17,17,17),RAD[6,3,17,17],PRSHBT(6,3,17),IZ[6,3],INIOCC(6,3,17),ISHLMX(6,3),AMZ[6,3]
      COMMON/UPD/NOCC(6,3,17),AUGR(6,3,17,17,17),RADR(6,3,17,17)
      COMMON/CALCASB/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      COMMON/CALCAS1B/IONSUM1(10),ifLSUM1(10),ESTOR1(10,28),EPHOTG1(10,28),DRXE1(10,28),DRYE1(10,28),DRZE1(10,28),DRX1(10,28),DRY1(10,28),DRZ1(10,28)
      COMMON/CALCAS2B/IONSUM2(10),ifLSUM2(10),ESTOR2(10,28),EPHOTG2(10,28),DRXE2(10,28),DRYE2(10,28),DRZE2(10,28),DRX2(10,28),DRY2(10,28),DRZ2(10,28)
      COMMON/CALCAS3B/IONSUM3(10),ifLSUM3(10),ESTOR3(10,28),EPHOTG3(10,28),DRXE3(10,28),DRYE3(10,28),DRZE3(10,28),DRX3(10,28),DRY3(10,28),DRZ3(10,28)
      COMMON/CALCAS4B/IONSUM4(10),ifLSUM4(10),ESTOR4(10,28),EPHOTG4(10,28),DRXE4(10,28),DRYE4(10,28),DRZE4(10,28),DRX4(10,28),DRY4(10,28),DRZ4(10,28)
      COMMON/CALCAS5B/IONSUM5(10),ifLSUM5(10),ESTOR5(10,28),EPHOTG5(10,28),DRXE5(10,28),DRYE5(10,28),DRZE5(10,28),DRX5(10,28),DRY5(10,28),DRZ5(10,28)
      COMMON/RESB/IONSM(10),ifLSM(10),ESTOR(10,28),EPHOT(10,28),X10(10,28),Y10(10,28),Z10(10,28),DRX01(10,28),DRY01(10,28),DRZ01(10,28)
      COMMON/GENB1/IONF1(10),ESTF1(10,28),X11(10,28),Y11(10,28),Z11(10,28),DRX11(10,28),DRY11(10,28),DRZ11(10,28)
      COMMON/GENB2/IONF2(10),ESTF2(10,28),X21(10,28),Y21(10,28),Z21(10,28),DRX21(10,28),DRY21(10,28),DRZ21(10,28)
      COMMON/GENB3/IONF3(10),ESTF3(10,15),X31(10,15),Y31(10,15),Z31(10,15),DRX31(10,15),DRY31(10,15),DRZ31(10,15)
      COMMON/GENB4/IONF4(10),ESTF4(10,12),X41(10,12),Y41(10,12),Z41(10,12),DRX41(10,12),DRY41(10,12),DRZ41(10,12)
      COMMON/GENB5/IONF5(10),ESTF5(10,5),X51(10,5),Y51(10,5),Z51(10,5),DRX51(10,5),DRY51(10,5),DRZ51(10,5)
      COMMON/COUTE/ECMP(10),ECDRX(10),ECDRY(10),ECDRZ[10],XCPOS(10),YCPOS(10),ZCPOS(10),KCGAS(10),LCGAS(10),ICSHELL(10)
      COMMON/COUTTB/TT(10),TTP
      COMMON/PPSTRB/NPTP,EPPST(2),XPP(2),YPP(2),ZPP(2),DRXPP(2),DRYPP(2),DRZPP(2)
#----------------------------------------------------------------------
# BREMSSTRAHLUNG CASCADE TREE:
#   SET OR ZERO SOME VARIABLES 
#   CREATE INTERACTION TREE FOR PE COMPTON RAYLEIGH AND PAIR PRODUCTION
#   STORE ELECTRON ENERGY DIRECTION COSINES AND POSITION WITH SHELL
#   LEVEL AND GAS IDENTITY IN COMMON/COUT/ FOR EACH COMPTON AND PE EVENT
#   STORE PAIR PRODUCTION ELECTRON AND POSITRON DATA IN COMMON/PPSTR/
#   STORE FINAL CASCADE RESULTS IN COMMON/CASRSB/
#----------------------------------------------------------------------
      API=numpy.arccos(-1.00)
      TWOPI=2.00*API
      IDBG=0
#     IF(J11 == 2) IDBG=1
   5  ILOW=0
# USE VELOCITY IN METRES/PICOSECONDS
      VV=2.99792458D-4 
#  
      LFIX=0
# ALLOW FLUORESCENCE CALCULATION
  123 ICONPH=1
#  PHOTON ORIGIN
      X=X0
      Y=Y0
      Z=Z0
      TSUM=T0
#  LOAD INITIAL DIRECTION COSINES BEFORE INTERACTION 
      DRXS=GDCX
      DRYS=GDCY
      DRZS=GDCZ
#   INITIAL ENERGY
      ENERGY=EGAMMA
#
# ZERO SOME ARRAYS
      EPPST[1]=0.00
      EPPST(2)=0.00
      DO 11 K=1,10
      DO 1 J=1,28
      EPHOTON(K,J)=0.0
      EPHOTG1(K,J)=0.0
      EPHOTG2(K,J)=0.0
      EPHOTG3(K,J)=0.0
      EPHOTG4(K,J)=0.0
      EPHOTG5(K,J)=0.0
      ESTORE(K,J)=0.0
      ESTOR1(K,J)=0.0
      ESTOR2(K,J)=0.0
      ESTOR3(K,J)=0.0
      ESTOR4(K,J)=0.0
      ESTOR5(K,J)=0.0
      ESTOR(K,J)=0.0
      ESTF1(K,J)=0.0
      ESTF2(K,J)=0.0
   1  CONTINUE
      DO 120 J=1,15
  120 ESTF3(K,J)=0.0
      DO 121 J=1,12
  121 ESTF4(K,J)=0.0
      DO 122 J=1,5
  122 ESTF5(K,J)=0.0
      ifLSUM[K]:
=0
      ifLSUM1[K]:
=0
      ifLSUM2[K]:
=0
      ifLSUM3[K]:
=0
      ifLSUM4[K]:
=0
      ifLSUM5[K]:
=0
      IONSUM[K]=0
      IONSUM1[K]=0
      IONSUM2[K]=0
      IONSUM3[K]=0
      IONSUM4[K]=0
      IONSUM5[K]=0
      IONSM[K]=0
      IONF1[K]=0
      IONF2[K]=0
      IONF3[K]=0
      IONF4[K]=0
      IONF5[K]=0
      KCGAS[K]=0
      LCGAS[K]=0
      ICSHELL[K]=0
      ECMP[K]=0.0
   11 CONTINUE
      NCOMP=0
      NRAYL=0
      NPAIR=0
      NPHOT=0
      NVAC=0
      NPTP=0
#    
      ifIRST=1:
      ISECOND=2
    2 NTOTI=NCOMP+NRAYL+NPAIR+NPHOT
# PHOTONS
      CALL ABSO(ifIRST,ENERGY,ISHELL,KGAS,LGAS,DIST)
#     IF(IDBG == 1) :
#     WRITE(6,888) ENERGY,ISHELL,J11
# 888 print(' AFTER ABSO ENERGY=',D12.5,' ISHELL=',I3,' EVENT NO=',I4)
#     # endIF
      if(ISHELL == -1):
 :
# BREMSSTRAHLUNG GAMMA TOO LOW IN ENERGY TO IONISE
       ILOW=1
       RETURN
      # endif
#  
#  CREATE INTERACTION TREE
      if(LPEFLG == 1):
 GO TO 100
      if(LCFLG == 1):
 GO TO 10
      if(LRFLG == 1):
 GO TO 20
      if(LPFLG == 1):
 GO TO 30
# COMPTON SCATTERING
   10 CALL COMPTON(KGAS,LGAS,ENERGY)
      NCOMP=NCOMP+1
      NVAC=NVAC+1
      if(NVAC > 10):
 :
# MAXIMUM OF 10 PRIMARY INTERACTIONS
#      NJHIGH=NJHIGH+1
       GO TO 123
      # endif
c RANDOMISE ANGLE PHI
      R3=DRAND48(RDUM)
      PHI=TWOPI*R3
# CALCULATE COMPTON ELECTRON DIRECTION COSINES USING THETAE AND PHI
      CALL DRCOS(DRXS,DRYS,DRZS,THETAE,PHI,DRXX,DRYY,DRZZ)
# FOR COMPTON EFFECT STORE ELECTRON DIRECTION COSINES
      ECDRX(NVAC)=DRXX
      ECDRY(NVAC)=DRYY
      ECDRZ[NVAC]=DRZZ
# CALCULATE WHICH SHELL HAS VACANCY FROM COMPTON EVENT
      CALL CVAC(KGAS,LGAS,EELEC,KSHELL,KBAD)
# REJECT EVENT WITHOUT SUFFICIENT ENERGY TO IONISE SHELLS
      if(KBAD == 1):
 GO TO 123
# STORE ELECTRON ENERGY SHELL VACANCY ISHELL KGAS LGAS POSITION 
      ECMP(NVAC)=EELEC
      ICSHELL(NVAC)=KSHELL
      KCGAS(NVAC)=KGAS
      LCGAS(NVAC)=LGAS
# INTERACTION POSITIONS
      XCPOS(NVAC)=X+DIST*DRXS
      YCPOS(NVAC)=Y+DIST*DRYS
      ZCPOS(NVAC)=Z+DIST*DRZS
      TT(NVAC)=TSUM+DIST/VV 
# UPDATE PHOTON STARTING ENERGY POSITION AND ANGLES
       ENERGY=EGAM
       X=XCPOS(NVAC)
       Y=YCPOS(NVAC)
       Z=ZCPOS(NVAC)
       PHIG=PHI+API
       if(PHIG >= TWOPI):
 PHIG=PHI-API
       CALL DRCOS(DRXS,DRYS,DRZS,THETAG,PHIG,DRXX,DRYY,DRZZ)
# NEW DIRECTION COSINES
       DRXS=DRXX
       DRYS=DRYY
       DRZS=DRZZ
# LOOP BACK 
      GO TO 2
# RAYLEIGH SCATTERING
   20 CALL RAYLEIGH(KGAS,LGAS,ENERGY,THETAR)
      NRAYL=NRAYL+1
#  CALCULATE ENERGY LOSS IN RAYLEIGH SCATTERING
      CALL RAYLOS(KGAS,LGAS,ENERGY,THETAR,ELRAY)
#     IF(IDBG == 1) WRITE(6,776) ENERGY,ELRAY
# 776 print(' AFTER RAYLOS ENERGY=',D12.4,' ELRAY=',D12.4)
# UPDATE X-RAY STARTING ENERGY POSITION AND ANGLES
      ENERGY=ENERGY-ELRAY
      X=X+DIST*DRXS
      Y=Y+DIST*DRYS
      Z=Z+DIST*DRZS
      TSUM=TSUM+DIST/VV
c RANDOMISE ANGLE PHI
      R3=DRAND48(RDUM)
      PHIR=TWOPI*R3
      CALL DRCOS(DRXS,DRYS,DRZS,THETAR,PHIR,DRXX,DRYY,DRZZ)
      DRXS=DRXX
      DRYS=DRYY
      DRZS=DRZZ
# LOOP BACK
      GO TO 2
# PAIR PRODUCTION
   30 CALL PAIR(KGAS,LGAS,ENERGY,E1,E2,THET1,PHI1,THET2,PHI2)
      NPAIR=NPAIR+1
      if(NPAIR > 2):
 :
       WRITE(6,991) NPAIR,J11
  991  print(' ERROR NPAIR GT 2 =',I6,' IN BREMSCASC EVENT NO =',I6)
       STOP
      # endif
      NPTP=NPAIR
# STORE ELECTRON AND POSITRON ENERGY POSITION AND ANGLES
      EPPST[1]=E1
      EPPST(2)=E2
      if(NVAC == 0):
 :
# FIRST INTERACTION IS PAIR PRODUCTION
       XPP[1]=X
       YPP[1]=Y
       ZPP[1]=Z
       XPP(2)=X
       YPP(2)=Y
       ZPP(2)=Z
       TTP=TSUM
       GO TO 40       
      # endif
      XPP[1]=X+DIST*DRXS
      YPP[1]=Y+DIST*DRYS
      ZPP[1]=Z+DIST*DRZS
      XPP(2)=XPP[1]
      YPP(2)=YPP[1]
      ZPP(2)=ZPP[1]
      TTP=TSUM+DIST/VV
   40 CALL DRCOS(DRXS,DRYS,DRZS,THET1,PHI1,DRXX,DRYY,DRZZ)
      DRXPP[1]=DRXX
      DRYPP[1]=DRYY
      DRZPP[1]=DRZZ
      CALL DRCOS(DRXS,DRYS,DRZS,THET2,PHI2,DRXX,DRYY,DRZZ)
      DRXPP(2)=DRXX
      DRYPP(2)=DRYY
      DRZPP(2)=DRZZ
      GO TO 200
# PHOTOELECTRIC ABSORPTION
#  STORE ENERGY ISHELL KGAS
  100 NVAC=NVAC+1
      if(NVAC > 10):
 :
# ONLY ALLOW MAXIMUM OF 10 PRIMARY INTERACTIONS
       GO TO 123
      STOP
      # endif
      NPHOT=NPHOT+1
# ECMP= TOTAL ENERGY= EGAMMA = ELECTRON KINETIC ENERGY+ VACANCY ENERGY
      ECMP(NVAC)=ENERGY
      ICSHELL(NVAC)=ISHELL
      XCPOS(NVAC)=X+DIST*DRXS
      YCPOS(NVAC)=Y+DIST*DRYS
      ZCPOS(NVAC)=Z+DIST*DRZS
      TT(NVAC)=TSUM+DIST/VV
      KCGAS(NVAC)=KGAS
      LCGAS(NVAC)=LGAS
# FOR PE EFFECT STORE PHOTON INCIDENT ANGLE
      ECDRX(NVAC)=DRXS
      ECDRY(NVAC)=DRYS
      ECDRZ[NVAC]=DRZS
# LOOP OVER SHELL VACANCIES
  200 CONTINUE
# STORE NUMBER AND TYPE OF PRIMARY INTERACTIONS
      MSUM1=NTOTI
      MCOMP1=NCOMP
      MRAYL1=NRAYL
      MPAIR1=NPAIR
      MPHOT1=NPHOT
      MVAC1=NVAC
# LOOP OVER SHELL INTERACTIONS
#     IF(IDBG == 1) :
#     WRITE(6,54) NVAC
#  54 print(' NVAC=',I3)
#     DO 56 M1=1,NVAC
#     WRITE(6,55) M1, (ESTORE(M1,K1),K1=1,28)
#  55 print(' M1=',I3,/,' ESTORE(M1,K)=',4(7D12.4,/))
#  56 CONTINUE
#     DO 58 M1=1,NVAC
#     WRITE(6,57) (EPHOTON(M1,K1),K1=1,28)
#  57 print(' EPHOTON=',4(7D12.4,/))
#  58 CONTINUE 
#     # endIF
      DO 900 K=1,NVAC
      CALL CONTROLB[IDBG,K]
  900 CONTINUE
#  COMPRESS AUGER AND FLUORESCENCE DATA INTO BLOCKS
      CALL COMPRESS(IDBG,ENSUM)
# CATCH DROPPED KSHELL FLUORESCENCE
      if(abs(ENSUM-EGAMMA):
 > 2200.) :
       Dif=ENSUM-EGAMMA
       if(IDBG == 1):
 WRITE(6,945) Dif,J11
  945  print(/,' Dif=',D14.6,' J11=',I5,/) 
       GO TO 5  
      # endif
# ADD PAIR DATA AND LOAD INTO COMMON/CASRSB/
      CALL CASRESB
      RETURN
      # end
      def CONTROLB[IDBG,NVAC]:
      IMPLICIT #real*8(A-H,O-Z)
      IMPLICIT #integer*8(I-N)
      CHARACTER*6 SCR(17),SCR1(17)
#     COMMON/INPT2/KGAS,LGAS,DETEFF,EXCWGHT
      COMMON/COMP/LCMP,LCFLG,LRAY,LRFLG,LPAP,LPFLG,LBRM,LBFLG,LPEFLG
      COMMON/GENCAS/ELEV[17,79],NSDEG(17),AA[17],BB[17],SCR,SCR1
      COMMON/MIXC/PRSH(6,3,17,17),ESH(6,3,17),AUG(6,3,17,17,17),RAD[6,3,17,17],PRSHBT(6,3,17),IZ[6,3],INIOCC(6,3,17),ISHLMX(6,3),AMZ[6,3]
      COMMON/UPD/NOCC(6,3,17),AUGR(6,3,17,17,17),RADR(6,3,17,17)
      COMMON/CALCASB/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      COMMON/CALCAS1B/IONSUM1(10),ifLSUM1(10),ESTOR1(10,28),EPHOTG1(10,28),DRXE1(10,28),DRYE1(10,28),DRZE1(10,28),DRX1(10,28),DRY1(10,28),DRZ1(10,28)
      COMMON/CALCAS2B/IONSUM2(10),ifLSUM2(10),ESTOR2(10,28),EPHOTG2(10,28),DRXE2(10,28),DRYE2(10,28),DRZE2(10,28),DRX2(10,28),DRY2(10,28),DRZ2(10,28)
      COMMON/CALCAS3B/IONSUM3(10),ifLSUM3(10),ESTOR3(10,28),EPHOTG3(10,28),DRXE3(10,28),DRYE3(10,28),DRZE3(10,28),DRX3(10,28),DRY3(10,28),DRZ3(10,28)
      COMMON/CALCAS4B/IONSUM4(10),ifLSUM4(10),ESTOR4(10,28),EPHOTG4(10,28),DRXE4(10,28),DRYE4(10,28),DRZE4(10,28),DRX4(10,28),DRY4(10,28),DRZ4(10,28)
      COMMON/CALCAS5B/IONSUM5(10),ifLSUM5(10),ESTOR5(10,28),EPHOTG5(10,28),DRXE5(10,28),DRYE5(10,28),DRZE5(10,28),DRX5(10,28),DRY5(10,28),DRZ5(10,28)
      COMMON/COUTE/ECMP(10),ECDRX(10),ECDRY(10),ECDRZ[10],XCPOS(10),YCPOS(10),ZCPOS(10),KCGAS(10),LCGAS(10),ICSHELL(10)
#
#  CALCULATES AUGER AND FLUORESCENCE CASCADE FOR VACANCY IN ICSHELL
#
      ifIRST=1:
      ISECOND=2
      ICONPH=1
      X0=XCPOS(NVAC)
      Y0=YCPOS(NVAC)
      Z0=ZCPOS(NVAC)
      DRXE(NVAC,1)=ECDRX(NVAC)
      DRYE(NVAC,1)=ECDRY(NVAC)
      DRZE(NVAC,1)=ECDRZ[NVAC]
      KDUM=KCGAS(NVAC)
      LDUM=LCGAS(NVAC)
      EDUM=ECMP(NVAC)
      IDUM=ICSHELL(NVAC)
# 
# CALCULATE CASCADE EVENT
      CALL CALCB[NVAC,KDUM,LDUM,EDUM,IDUM]
#     IF(IDBG == 1) :
#     DO 67 M1=1,NVAC
#     WRITE(6,66) EDUM,M1,(ESTORE(M1,KK),KK=1,28)
#  66 print(' IN CONTROLB EDUM=',D12.4,' M1=',I3,/,' ESTORE(M1,K)=',
#    /4(7D12.4,/))
#  67 CONTINUE
#     WRITE(6,68) (IFLSUM(KK),KK=1,10)
#  68 print(' IFLSUM=',10I4)
#     DO 70 M1=1,NVAC
#     WRITE(6,69) (EPHOTON(M1,KK),KK=1,28)
#  69 print(' EPHOTON=',4(7D12.4,/))
#  70 CONTINUE   
#C    # endIF
# STORE EVENT 
#     Z0=DIST
      CALL CASSTOREB[NVAC,X0,Y0,Z0]
# IF INCLUDE PHOTOABSORPTION OF FLUORESENCE : 
      if(ICONPH == 1):
 :
       if(ifLSUM(NVAC):
 == 0) :
# ZERO COUNTER
         L1=0
         CALL CSSTFB1(NVAC,L1,DIST1)
         GO TO 91
        # endif
# LOOP AROUND FIRST GEN FLUORESCENCE
       ifLLOW=0:
       ifL1=ifLSUM(NVAC):
       DO 9 L1=1,ifL1
       EPH=EPHOTON(NVAC,L1)
#
# CALC ABSORPTION POSITION X1,Y1,Z1 FOR FLUORESENCE PHOTON OF ENERGY EPH
# WITH ABSORPTION IN SHELL ISHELL1 IN GAS KGAS1 COMPONENT LGAS1 
       CALL ABSO(ISECOND,EPH,ISHELL1,KGAS1,LGAS1,DIST1)
#      IF(IDBG == 1) :
#      WRITE(6,72) EPH,ISHELL1
#  72  print('IN CONTROLB EPH=',D12.4,' ISHELL1=',I4)
#      # endIF
# LOW ENERGY PHOTON
       if(ISHELL1 == -1):
 :
        ifLSUM(NVAC):
=ifLSUM(NVAC)-1
        GO TO 9
       # endif
#
# CALCULATE CASCADE IN GAS 
#      IF(IDBG == 1) :
#      WRITE(6,445) L1,ISHELL1,EPH
# 445  print(' CALLING CALCB1 L1=',I3,' ISHELL1=',I3,' EPH=',D12.4)
#      # endIF
       CALL CALCB1(NVAC,KGAS1,LGAS1,EPH,ISHELL1,L1)
# STORE EVENT
       CALL CSSTFB1(NVAC,L1,DIST1) 
    9  CONTINUE 
   91  CONTINUE
# 
# SECOND GENERATION FLUORESCENCE
        if(ifLSUM1(NVAC):
 == 0) :    
# ZERO COUNTER
         L2=0
         CALL CSSTFB2(NVAC,L2,DIST)
         GO TO 81        
        # endif 
# LOOP AROUND SECOND GEN FLUORESCENCE
       ifL2=ifLSUM1(NVAC):
       DO 8 L2=1,ifL2
       EPH=EPHOTG1(NVAC,L2)
#
# CALC ABSORPTION POSITION X2,Y2,Z2 FOR FLUORESENCE PHOTON OF ENERGY EPH
# WITH ABSORPTION IN SHELL ISHELL2 IN GAS KGAS2 COMPONENT LGAS2
       CALL ABSO(ISECOND,EPH,ISHELL2,KGAS2,LGAS2,DIST2)
# LOW ENERGY PHOTON
       if(ISHELL2 == -1):
 GO TO 8
#
# CALCULATE CASCADE IN GAS 
       CALL CALCB2(NVAC,KGAS2,LGAS2,EPH,ISHELL2,L2)
# STORE EVENT
       CALL CSSTFB2(NVAC,L2,DIST2)               
    8  CONTINUE 
   81  CONTINUE   
# 
# THIRD GENERATION FLUORESCENCE
       if(ifLSUM2(NVAC):
 == 0) :     
# ZERO COUNTER
         L3=0
         CALL CSSTFB3(NVAC,L3,DIST) 
         GO TO 71
        # endif
# LOOP AROUND THIRD GEN FLUORESCENCE
       ifL3=ifLSUM2(NVAC):
       DO 7 L3=1,ifL3
       EPH=EPHOTG2(NVAC,L3)
#
# CALC ABSORPTION POSITION X3,Y3,Z3 FOR FLUORESENCE PHOTON OF ENERGY EPH
# WITH ABSORPTION IN SHELL ISHELL3 IN GAS KGAS3 COMPONENT LGAS3
       CALL ABSO(ISECOND,EPH,ISHELL3,KGAS3,LGAS3,DIST3)
# LOW ENERGY PHOTON
       if(ISHELL3 == -1):
 GO TO 7
#
# CALCULATE CASCADE IN GAS 
       CALL CALCB3(NVAC,KGAS3,LGAS3,EPH,ISHELL3,L3)
# STORE EVENT
       CALL CSSTFB3(NVAC,L3,DIST3)               
    7  CONTINUE 
   71  CONTINUE     
# 
# FOURTH GENERATION FLUORESCENCE
      if(ifLSUM3(NVAC):
 == 0) :    
# ZERO COUNTER
         L4=0
         CALL CSSTFB4(NVAC,L4,DIST)
         GO TO 61
        # endif
# LOOP AROUND FOURTH GEN FLUORESCENCE
       ifL4=ifLSUM3(NVAC):
       DO 6 L4=1,ifL4
       EPH=EPHOTG3(NVAC,L4)
#
# CALC ABSORPTION POSITION X4,Y4,Z4 FOR FLUORESENCE PHOTON OF ENERGY EPH
# WITH ABSORPTION IN SHELL ISHELL4 IN GAS KGAS4 COMPONENT LGAS4
       CALL ABSO(ISECOND,EPH,ISHELL4,KGAS4,LGAS4,DIST4)
# LOW ENERGY PHOTON
       if(ISHELL4 == -1):
 GO TO 6
#
# CALCULATE CASCADE IN GAS 
       CALL CALCB4(NVAC,KGAS4,LGAS4,EPH,ISHELL4,L4)
# STORE EVENT
       CALL CSSTFB4(NVAC,L4,DIST4)                    
    6  CONTINUE 
   61  CONTINUE      
# 
# FIFTH GENERATION FLUORESCENCE
       if(ifLSUM4(NVAC):
 == 0) :     
# ZERO COUNTER
         L5=0
         CALL CSSTFB5(NVAC,L5,DIST)
         GO TO 51
        # endif
# LOOP AROUND FIFTH GEN FLUORESCENCE
       ifL5=ifLSUM5(NVAC):
       DO 5 L5=1,ifL5
       EPH=EPHOTG4(NVAC,L5)
#
# CALC ABSORPTION POSITION X5,Y5,Z5 FOR FLUORESENCE PHOTON OF ENERGY EPH
# WITH ABSORPTION IN SHELL ISHELL5 IN GAS KGAS5 COMPONENT LGAS5
       CALL ABSO(ISECOND,EPH,ISHELL5,KGAS5,LGAS5,DIST5)
# LOW ENERGY PHOTON
       if(ISHELL5 == -1):
 GO TO 5
#
# CALCULATE CASCADE IN GAS 
       CALL CALCB5(NVAC,KGAS5,LGAS5,EPH,ISHELL5,L5)
# STORE EVENT
       CALL CSSTFB5(NVAC,L5,DIST5)               
       if(ifLSUM5(NVAC):
 >= 1) WRITE(6,89) ifLSUM5
   89  print(' WARNING SIXTH GENERATION EXISTS ifLSUM5=',I3)
    5  CONTINUE
   51  CONTINUE
      # endif
   10 CONTINUE
#     IF(IDBG == 1) :
#     DO 666 KKK=1,NVAC
#     WRITE(6,777) (ESTORE(KKK,K),K=1,28)
# 777 print(' ESTORE=',4(7D12.4,/))
#     WRITE(6,778) (ESTOR1(KKK,K),K=1,28)
# 778 print(' ESTOR1=',4(7D12.4,/))
#     WRITE(6,779) IONSUM(KKK),IONSUM1(KKK),IONSUM2(KKK),IONSUM3(KKK),
#    /IONSUM4(KKK),IONSUM5(KKK)
# 779 print(' IONSUM 0-5=',6I4)
#     WRITE(6,780) IFLSUM(KKK),IFLSUM1(KKK),IFLSUM2(KKK),IFLSUM3(KKK),
#    /IFLSUM4(KKK),IFLSUM5(KKK)
# 780 print(' IFLSUM 0-5=',6I4)
# 666 CONTINUE
#     # endIF
      RETURN 
      # end
      def CALCB[NVAC,KGAS,LGAS,ELECEN,ISHELL]:
      IMPLICIT #real*8(A-H,O-Z)
      IMPLICIT #integer*8(I-N)
      CHARACTER*6 SCR(17),SCR1(17)
      COMMON/PRIM4/MSUM1,MCOMP1,MRAYL1,MPAIR1,MPHOT1,MVAC1
      COMMON/GENCAS/ELEV[17,79],NSDEG(17),AA[17],BB[17],SCR,SCR1
      COMMON/MIXC/PRSH(6,3,17,17),ESH(6,3,17),AUG(6,3,17,17,17),RAD[6,3,17,17],PRSHBT(6,3,17),IZ[6,3],INIOCC(6,3,17),ISHLMX(6,3),AMZ[6,3]
      COMMON/UPD/NOCC(6,3,17),AUGR(6,3,17,17,17),RADR(6,3,17,17)
      COMMON/CALCASB/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      DIMENSION TEMP(17),TEMP1(289)
#
# CALCULATE CASCADE IN GAS KGAS AND MOLECULAR COMPONENT LGAS
# WITH INTIAL ENERGY DEPOSIT ELECEN AND SHELL VACANCY CREATED AT ISHELL
#
# INITIAL PHOTON DIRECTION  DRX, DRY AND DRZ
      DRXINIT=DRXE(NVAC,1)
      DRYINIT=DRYE(NVAC,1)
      DRZINIT=DRZE(NVAC,1)
      ISHELLST=ISHELL
  100 ELEFT=ELECEN
      ISHELL=ISHELLST
      API=numpy.arccos(-1.00)
      TWOPI=2.00*API
      ISECOND=1
      ifIRST=0:
# SET STARTING ARRAY NOCC EQUAL TO INIOCC
      DO 1 I=1,17
      NOCC(KGAS,LGAS,I)=INIOCC(KGAS,LGAS,I)
    1 CONTINUE
# PHOTONS
      IONSUM(NVAC)=1
      ifLSUM(NVAC):
=0
# STORE INITIAL PHOTOELECTRON ENERGY AND ANGLE
      ESTORE(NVAC,1)=ELECEN-ELEV[ISHELL,IZ[KGAS,LGAS]]
      ELECN=ESTORE(NVAC,1)
      ELEFT=ELEFT-ESTORE(NVAC,1)
      NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)-1  
#    ENTRY FOR COMPTON ELECTRON.....
      if(NVAC <= MCOMP1):
 :
#    IF COMPTON EVENT ELECTRON ANGLE FROM COMPTON (ALREADY STORED)
       GO TO 4
      # endif
# USE PHOTOELCTRON ANGULAR DISTRIBUTION
      APE=AA[ISHELL]
      BPE=BB[ISHELL]
      CALL ANGGEN(APE,BPE,THET)
      if(THET < 0.0):
 THET=THET+API
      R3=DRAND48(RDUM)
      PHI=TWOPI*R3
# INITIAL PHOTON DIRECTION  DRXINIT, DRYINIT AND DRZINIT
      CALL DRCOS(DRXINIT,DRYINIT,DRZINIT,THET,PHI,DRXX,DRYY,DRZZ)
      DRXE(NVAC,1)=DRXX
      DRYE(NVAC,1)=DRYY
      DRZE(NVAC,1)=DRZZ
    4 CONTINUE
# CHECK FOR ELECTRON SHAKEOFF
      ICON=1
      ifIRST=ifIRST+1:
      if(ifIRST > 1):
 ELECN=ESTORE(NVAC,IONSUM(NVAC))
      CALL SHAKE(ISHELL,ELECN,KGAS,LGAS,ESHK,ICON,ifIRST,JVAC)
#  CALCULATE ENERGY OF ELECTRON
      if(JVAC == 0):
 GO TO 2
      if(ifIRST == 1):
 :
# INITIAL ELECTRON + SHAKEOFF
       ELECN=ELECN-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
# PRIMARY ELECTRON
       ESTORE(NVAC,IONSUM(NVAC))=ELECN
      # endif
      if(ifIRST != 1):
 :
       ESTORE(NVAC,IONSUM(NVAC))=ESTORE(NVAC,IONSUM(NVAC))-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      # endif
      IONSUM(NVAC)=IONSUM(NVAC)+1
# MAXIMUM ION CHARGE STATE =28
      if(IONSUM(NVAC):
 > 28) :
       WRITE(6,99) IONSUM(NVAC) 
   99  print(' WARNING ION CHARGE LIMITED TO 28+ IN THIS VERSION') 
       STOP
      # endif
# SHAKE ELECTRON
      ESTORE(NVAC,IONSUM(NVAC))=ESHK
      ELEFT=ELEFT-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
      R3=DRAND48(RDUM)
      THET=numpy.arccos(1.0-2.0*R3)
      R3=DRAND48(RDUM)
      PHI=TWOPI*R3
      DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
      DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
      DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
    2 CONTINUE                                     
      CALL UPDATE(KGAS,LGAS,ISHELL)
#  CHOOSE FLUORESCENCE OR AUGER TRANSITION
      TSUM=0.0
      DO 10 I=1,17
      TSUM=TSUM+RADR(KGAS,LGAS,ISHELL,I)
      DO 10 J=1,17
      TSUM=TSUM+AUGR(KGAS,LGAS,ISHELL,I,J)
   10 CONTINUE
# NO MORE TRANSITIONS POSSIBLE
      if(TSUM == 0.0):
 RETURN  
# NORMALISE TO 1.0
      DO 11 I=1,17
      RADR(KGAS,LGAS,ISHELL,I)=RADR(KGAS,LGAS,ISHELL,I)/TSUM
      DO 11 J=1,17
      AUGR(KGAS,LGAS,ISHELL,I,J)=AUGR(KGAS,LGAS,ISHELL,I,J)/TSUM
   11 CONTINUE
# CREATE CUMULATIVE SUM ARRAY
      TEMP[1]=RADR(KGAS,LGAS,ISHELL,1)
      DO 12 I=2,17
      TEMP[I]=RADR(KGAS,LGAS,ISHELL,I)+TEMP(I-1)
   12 CONTINUE
      TEMP1[1]=AUGR(KGAS,LGAS,ISHELL,1,1)
      DO 13 I=2,17
      TEMP1[I]=AUGR(KGAS,LGAS,ISHELL,I,1)+TEMP1(I-1)
   13 CONTINUE
      DO 14 J=1,16
      DO 14 I=1,17
      TEMP1(I+(J*17))=AUGR(KGAS,LGAS,ISHELL,I,(J+1))+TEMP1(I+(J*17)-1)
   14 CONTINUE
# FIND FLUORESCENCE OR AUGER TRANSITION
      R1=DRAND48(RDUM)
      DO 16 I=1,17
      if(R1 < TEMP[I]:
) :
# STORE PHOTON ENERGY AND ANGLE : UPDATE NOCC
       ifLSUM(NVAC):
=ifLSUM(NVAC)+1
       EPHOTON(NVAC,ifLSUM(NVAC))=ELEV[ISHELL,IZ[KGAS,LGAS]]-ELEV[I,IZ[KGAS,LGAS]]
       ELEFT=ELEFT-abs(EPHOTON(NVAC,ifLSUM(NVAC)))
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R3=DRAND48(RDUM)
       PHI=TWOPI*R3
# CALC DIRECTION COSINES OF FLUORESCENCE
       DRX(NVAC,ifLSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRY(NVAC,ifLSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZ[NVAC,ifLSUM(NVAC)]=DCOS(THET)
#   
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
        RETURN    
       # endif
       GO TO 2  
      # endif 
   16 CONTINUE
  116 CONTINUE
      R2=R1-TEMP(17)
      DO 27 J=1,17
      DO 27 I=1,17
      if(R2 < TEMP1(I+((J-1):
*17))) :
# AUGER OR COSTER KRONIG  
# STORE EJECTED ELECTRON AND UPDATE NOCC
       ETEMP=ELEV[ISHELL,IZ[KGAS,LGAS]]-(ELEV[I,IZ[KGAS,LGAS]]+ELEV[I,IZ[KGAS,LGAS]+1])*0.5-(ELEV[J,IZ[KGAS,LGAS]]+ELEV[J,IZ[KGAS,LGAS]+1])*0.5
       if(ETEMP < 0.0):
 :
# DO NOT ALLOW NEGATIVE ENERGY TRANSITIONS
  117   R1=DRAND48(RDUM)
        if(R1 < TEMP(17):
) GO TO 117
        GO TO 116
       # endif
       IONSUM(NVAC)=IONSUM(NVAC)+1
       if(IONSUM(NVAC):
 > 28) : 
        WRITE(6,887) IONSUM(NVAC)
  887   print(' IONSUM LIMITED TO 28 IN THIS VERSION IONSUM=',I3,' IN CALCB')
        STOP
       # endif
       ESTORE(NVAC,IONSUM(NVAC))=ETEMP
       ELEFT=ELEFT-abs(ETEMP)
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R3=DRAND48(RDUM)
       PHI=TWOPI*R3
       DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
       NOCC(KGAS,LGAS,J)=NOCC(KGAS,LGAS,J)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
        RETURN
       # endif
       GO TO 4 
      # endif
   27 CONTINUE
      WRITE(6,88) 
   88 print(' ERROR IN CASCADE 0 def CALCB') 
      STOP 
      # end
      def CALCB1(NVAC,KGAS,LGAS,ELECEN,ISHELL,L1):
      IMPLICIT #real*8(A-H,O-Z)
      IMPLICIT #integer*8(I-N)
      CHARACTER*6 SCR(17),SCR1(17)
      COMMON/GENCAS/ELEV[17,79],NSDEG(17),AA[17],BB[17],SCR,SCR1
      COMMON/MIXC/PRSH(6,3,17,17),ESH(6,3,17),AUG(6,3,17,17,17),RAD[6,3,17,17],PRSHBT(6,3,17),IZ[6,3],INIOCC(6,3,17),ISHLMX(6,3),AMZ[6,3]
      COMMON/UPD/NOCC(6,3,17),AUGR(6,3,17,17,17),RADR(6,3,17,17)
      COMMON/CALCASB/IONSUM0(10),ifLSUM0(10),ESTORE0(10,28),EPHOTON0(10,28),DRXE0(10,28),DRYE0(10,28),DRZE0(10,28),DRX0(10,28),DRY0(10,28),DRZ0(10,28)
      COMMON/CALCAS1B/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      DIMENSION TEMP(17),TEMP1(289)
#
# CALCULATE CASCADE IN GAS KGAS AND MOLECULAR COMPONENT LGAS 
# WITH INTIAL ENERGY DEPOSIT ELECEN AND SHELL VACANCY CREATED AT ISHELL
#
      ISTART=IONSUM(NVAC)
      ISTARTF=ifLSUM(NVAC)
      ISHELLST=ISHELL
      API=numpy.arccos(-1.00)
      TWOPI=2.00*API
  100 ELEFT=ELECEN
      ISHELL=ISHELLST
      INIT=1
# SET STARTING ARRAY NOCC EQUAL TO INIOCC
      DO 1 I=1,17
      NOCC(KGAS,LGAS,I)=INIOCC(KGAS,LGAS,I)
    1 CONTINUE
      IONSUM(NVAC)=ISTART+1
      ifLSUM(NVAC):
=ISTARTF
# STORE PHOTOELECTRON ENERGY AND ANGLE
      ESTORE(NVAC,IONSUM(NVAC))=ELECEN-ELEV[ISHELL,IZ[KGAS,LGAS]]
      ELECN=ESTORE(NVAC,IONSUM(NVAC))
      ELEFT=ELEFT-ELECN
      NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)-1  
# USE PHOTELECTRON ANGULAR DISTRIBUTION
      APE=AA[ISHELL]
      BPE=BB[ISHELL]
      CALL ANGGEN(APE,BPE,THET)
      if(THET < 0.0):
 THET=THET+API
      R3=DRAND48(RDUM)
      PHI=TWOPI*R3
      CALL DRCOS(DRX0(NVAC,L1),DRY0(NVAC,L1),DRZ0(NVAC,L1),THET,PHI,DRXX,DRYY,DRZZ)
      DRXE(NVAC,IONSUM(NVAC))=DRXX
      DRYE(NVAC,IONSUM(NVAC))=DRYY
      DRZE(NVAC,IONSUM(NVAC))=DRZZ
# LOOP AROUND CASCADE
    4 CONTINUE
# CHECK FOR ELECTRON SHAKEOFF
      IDUM=1
      if(INIT > 1):
 ELECN=ESTORE(NVAC,IONSUM(NVAC))
      INSUM=IONSUM(NVAC)
      CALL SHAKE(ISHELL,ELECN,KGAS,LGAS,ESHK,IDUM,INSUM,JVAC)
#  CALCULATE ENERGY OF ELECTRON
      if(JVAC == 0):
 GO TO 2
#  ELECTRON + SHAKEOFF
      ELECN=ELECN-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      ESTORE(NVAC,IONSUM(NVAC))=ELECN
      IONSUM(NVAC)=IONSUM(NVAC)+1
# MAXIMUM ION CHARGE STATE =28
      if(IONSUM(NVAC):
 > 28) : 
       WRITE(6,99) IONSUM(NVAC)  
  99   print(' 1ST GEN LIMITED TO 28 IN THIS VERSION IONSUM=',I3)  
       STOP        
      # endif 
      ESTORE(NVAC,IONSUM(NVAC))=ESHK 
      ELEFT=ELEFT-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION 
      R3=DRAND48(RDUM)
      THET=numpy.arccos(1.0-2.0*R3)
      R4=DRAND48(RDUM)
      PHI=TWOPI*R4
      DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
      DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
      DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
    2 CALL UPDATE(KGAS,LGAS,ISHELL)
      INIT=2
# CHOOSE FLUORESCENCE OR AUGER TRANSITION
      TSUM=0.0
      DO 10 I=1,17
      TSUM=TSUM+RADR(KGAS,LGAS,ISHELL,I)
      DO 10 J=1,17
      TSUM=TSUM+AUGR(KGAS,LGAS,ISHELL,I,J)
   10 CONTINUE
# NO MORE TRANSITIONS POSSIBLE
      if(TSUM == 0.0):
 RETURN  
# NORMALISE TO 1.0
      DO 11 I=1,17
      RADR(KGAS,LGAS,ISHELL,I)=RADR(KGAS,LGAS,ISHELL,I)/TSUM
      DO 11 J=1,17
      AUGR(KGAS,LGAS,ISHELL,I,J)=AUGR(KGAS,LGAS,ISHELL,I,J)/TSUM
   11 CONTINUE
# CREATE CUMULATIVE SUM ARRAY
      TEMP[1]=RADR(KGAS,LGAS,ISHELL,1)
      DO 12 I=2,17
      TEMP[I]=RADR(KGAS,LGAS,ISHELL,I)+TEMP(I-1)
   12 CONTINUE
      TEMP1[1]=AUGR(KGAS,LGAS,ISHELL,1,1)
      DO 13 I=2,17
      TEMP1[I]=AUGR(KGAS,LGAS,ISHELL,I,1)+TEMP1(I-1)
   13 CONTINUE
      DO 14 J=1,16
      DO 14 I=1,17
      TEMP1(I+(J*17))=AUGR(KGAS,LGAS,ISHELL,I,(J+1))+TEMP1(I+(J*17)-1)
   14 CONTINUE
# FIND FLUORESCENCE OR AUGER TRANSITION
      R1=DRAND48(RDUM)
      DO 16 I=1,17
      if(R1 < TEMP[I]:
) :
# STORE PHOTON ENERGY AND ANGLE : UPDATE NOCC
       ifLSUM(NVAC):
=ifLSUM(NVAC)+1
       EPHOTON(NVAC,ifLSUM(NVAC))=ELEV[ISHELL,IZ[KGAS,LGAS]]-ELEV[I,IZ[KGAS,LGAS]]
       ELEFT=ELEFT-abs(EPHOTON(NVAC,ifLSUM(NVAC)))
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R4=DRAND48(RDUM)       
       PHI=TWOPI*R4
       DRX(NVAC,ifLSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRY(NVAC,ifLSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZ[NVAC,ifLSUM(NVAC)]=DCOS(THET)
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
        RETURN    
       # endif
       GO TO 2  
      # endif 
   16 CONTINUE
  116 CONTINUE
      R2=R1-TEMP(17)
      DO 17 J=1,17
      DO 17 I=1,17
      if(R2 < TEMP1(I+((J-1):
*17))) :
# AUGER OR COSTER KRONIG  
# STORE EJECTED ELECTRON AND UPDATE NOCC
       ETEMP=ELEV[ISHELL,IZ[KGAS,LGAS]]-(ELEV[I,IZ[KGAS,LGAS]]+ELEV[I,IZ[KGAS,LGAS]+1])*0.5-(ELEV[J,IZ[KGAS,LGAS]]+ELEV[J,IZ[KGAS,LGAS]+1])*0.5
       if(ETEMP < 0.0):
 :
# DO NOT ALLOW NEGATIVE ENERGY TRANSITIONS
  117   R1=DRAND48(RDUM)
        if(R1 < TEMP(17):
) GO TO 117
        GO TO 116
       # endif
       IONSUM(NVAC)=IONSUM(NVAC)+1
       if(IONSUM(NVAC):
 > 28) :
        WRITE(6,99) IONSUM(NVAC)
        STOP
       # endif
       ESTORE(NVAC,IONSUM(NVAC))=ETEMP
       ELEFT=ELEFT-abs(ETEMP)
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R4=DRAND48(RDUM)
       PHI=TWOPI*R4
       DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
       NOCC(KGAS,LGAS,J)=NOCC(KGAS,LGAS,J)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
        RETURN
       # endif
       GO TO 4 
      # endif
   17 CONTINUE
      WRITE(6,88) 
   88 print(' ERROR IN CASCADE B1') 
      STOP 
      # end
      def CALCB2(NVAC,KGAS,LGAS,ELECEN,ISHELL,L1):
      IMPLICIT #real*8(A-H,O-Z)
      IMPLICIT #integer*8(I-N)
      CHARACTER*6 SCR(17),SCR1(17)
      COMMON/GENCAS/ELEV[17,79],NSDEG(17),AA[17],BB[17],SCR,SCR1
      COMMON/MIXC/PRSH(6,3,17,17),ESH(6,3,17),AUG(6,3,17,17,17),RAD[6,3,17,17],PRSHBT(6,3,17),IZ[6,3],INIOCC(6,3,17),ISHLMX(6,3),AMZ[6,3]
      COMMON/UPD/NOCC(6,3,17),AUGR(6,3,17,17,17),RADR(6,3,17,17)
      COMMON/CALCAS1B/IONSUM0(10),ifLSUM0(10),ESTORE0(10,28),EPHOTON0(10,28),DRXE0(10,28),DRYE0(10,28),DRZE0(10,28),DRX0(10,28),DRY0(10,28),DRZ0(10,28)
      COMMON/CALCAS2B/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      DIMENSION TEMP(17),TEMP1(289)
#
# CALCULATE CASCADE IN GAS KGAS AND MOLECULAR COMPONENT LGAS
# WITH INTIAL ENERGY DEPOSIT ELECEN AND SHELL VACANCY CREATED AT ISHELL
#
      ISTART=IONSUM(NVAC)
      ISTARTF=ifLSUM(NVAC)
      ISHELLST=ISHELL
      API=numpy.arccos(-1.00)
      TWOPI=2.00*API
  100 ELEFT=ELECEN
      ISHELL=ISHELLST
      INIT=1
# SET STARTING ARRAY NOCC EQUAL TO INIOCC
      DO 1 I=1,17
      NOCC(KGAS,LGAS,I)=INIOCC(KGAS,LGAS,I)
    1 CONTINUE
      IONSUM(NVAC)=ISTART+1
      ifLSUM(NVAC):
=ISTARTF
# STORE INITIAL PHOTELECTRON AND ANGLE
      ESTORE(NVAC,IONSUM(NVAC))=ELECEN-ELEV[ISHELL,IZ[KGAS,LGAS]]
      ELECN=ESTORE(NVAC,IONSUM(NVAC))
      ELEFT=ELEFT-ELECN
      NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)-1  
# USE PHOTOELECTRON ANGULAR DISTRIBUTION
      APE=AA[ISHELL]
      BPE=BB[ISHELL]
      CALL ANGGEN(APE,BPE,THET)
      if(THET < 0.0):
 THET=THET+API
      R3=DRAND48(RDUM)
      PHI=TWOPI*R3
      CALL DRCOS(DRX0(NVAC,L1),DRY0(NVAC,L1),DRZ0(NVAC,L1),THET,PHI,DRXX,DRYY,DRZZ)
      DRXE(NVAC,IONSUM(NVAC))=DRXX
      DRYE(NVAC,IONSUM(NVAC))=DRYY
      DRZE(NVAC,IONSUM(NVAC))=DRZZ
# LOOP AROUND CASCADE
    4 CONTINUE
# CHECK FOR ELECTRON SHAKEOFF
      IDUM=1
      if(INIT > 1):
 ELECN=ESTORE(NVAC,IONSUM(NVAC))
      INSUM=IONSUM(NVAC)
      CALL SHAKE(ISHELL,ELECN,KGAS,LGAS,ESHK,IDUM,INSUM,JVAC)
#  CALCULATE ENERGY OF ELECTRON
      if(JVAC == 0):
 GO TO 2
#  ELECTRON + SHAKEOFF
      ELECN=ELECN-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      ESTORE(NVAC,IONSUM(NVAC))=ELECN
      IONSUM(NVAC)=IONSUM(NVAC)+1
# MAXIMUM ION CHARGE STATE =28
      if(IONSUM(NVAC):
 > 28) :
       WRITE(6,99) IONSUM(NVAC)
   99  print(' 2ND GEN IONS LIMITED TO 28 IN THIS VERSION IONSUM=',I3) 
       STOP
      # endif
      ESTORE(NVAC,IONSUM(NVAC))=ESHK
      ELEFT=ELEFT-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
      R3=DRAND48(RDUM)
      THET=numpy.arccos(1.0-2.0*R3)
      R4=DRAND48(RDUM)
      PHI=TWOPI*R4
      DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
      DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
      DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
    2 CALL UPDATE(KGAS,LGAS,ISHELL)
      INIT=2
# CHOOSE FLUORESCENCE OR AUGER TRANSITION
      TSUM=0.0
      DO 10 I=1,17
      TSUM=TSUM+RADR(KGAS,LGAS,ISHELL,I)
      DO 10 J=1,17
      TSUM=TSUM+AUGR(KGAS,LGAS,ISHELL,I,J)
   10 CONTINUE
# NO MORE TRANSITIONS POSSIBLE
      if(TSUM == 0.0):
 RETURN  
# NORMALISE TO 1.0
      DO 11 I=1,17
      RADR(KGAS,LGAS,ISHELL,I)=RADR(KGAS,LGAS,ISHELL,I)/TSUM
      DO 11 J=1,17
      AUGR(KGAS,LGAS,ISHELL,I,J)=AUGR(KGAS,LGAS,ISHELL,I,J)/TSUM
   11 CONTINUE
# CREATE CUMULATIVE SUM ARRAY
      TEMP[1]=RADR(KGAS,LGAS,ISHELL,1)
      DO 12 I=2,17
      TEMP[I]=RADR(KGAS,LGAS,ISHELL,I)+TEMP(I-1)
   12 CONTINUE
      TEMP1[1]=AUGR(KGAS,LGAS,ISHELL,1,1)
      DO 13 I=2,17
      TEMP1[I]=AUGR(KGAS,LGAS,ISHELL,I,1)+TEMP1(I-1)
   13 CONTINUE
      DO 14 J=1,16
      DO 14 I=1,17
      TEMP1(I+(J*17))=AUGR(KGAS,LGAS,ISHELL,I,(J+1))+TEMP1(I+(J*17)-1)
   14 CONTINUE
# FIND FLUORESCENCE OR AUGER TRANSITION
      R1=DRAND48(RDUM)
      DO 16 I=1,17
      if(R1 < TEMP[I]:
) :
# STORE PHOTON ENERGY AND UPDATE NOCC
       ifLSUM(NVAC):
=ifLSUM(NVAC)+1
       EPHOTON(NVAC,ifLSUM(NVAC))=ELEV[ISHELL,IZ[KGAS,LGAS]]-ELEV[I,IZ[KGAS,LGAS]]
       ELEFT=ELEFT-abs(EPHOTON(NVAC,ifLSUM(NVAC)))
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R4=DRAND48(RDUM)
       PHI=TWOPI*R4
       DRX(NVAC,ifLSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRY(NVAC,ifLSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZ[NVAC,ifLSUM(NVAC)]=DCOS(THET)
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
        RETURN    
       # endif
       GO TO 2  
      # endif 
   16 CONTINUE
  116 CONTINUE
      R2=R1-TEMP(17)
      DO 17 J=1,17
      DO 17 I=1,17
      if(R2 < TEMP1(I+((J-1):
*17))) :
# AUGER OR COSTER KRONIG  
# STORE EJECTED ELECTRON AND UPDATE NOCC
       ETEMP=ELEV[ISHELL,IZ[KGAS,LGAS]]-(ELEV[I,IZ[KGAS,LGAS]]+ELEV[I,IZ[KGAS,LGAS]+1])*0.5-(ELEV[J,IZ[KGAS,LGAS]]+ELEV[J,IZ[KGAS,LGAS]+1])*0.5
       if(ETEMP < 0.0):
 :
# DO NOT ALLOW NEGATIVE ENERGY TRANSITIONS
  117   R1=DRAND48(RDUM)
        if(R1 < TEMP(17):
) GO TO 117
        GO TO 116
       # endif
       IONSUM(NVAC)=IONSUM(NVAC)+1
       if(IONSUM(NVAC):
 > 28) :
        WRITE(6,99) IONSUM(NVAC)
        STOP
       # endif
       ESTORE(NVAC,IONSUM(NVAC))=ETEMP
       ELEFT=ELEFT-abs(ETEMP)
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R4=DRAND48(RDUM)
       PHI=TWOPI*R4
       DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
       NOCC(KGAS,LGAS,J)=NOCC(KGAS,LGAS,J)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
        RETURN
       # endif
       GO TO 4 
      # endif
   17 CONTINUE
      WRITE(6,88) 
   88 print(' ERROR IN CASCADE B2') 
      STOP 
      # end
      def CALCB3(NVAC,KGAS,LGAS,ELECEN,ISHELL,L1):
      IMPLICIT #real*8(A-H,O-Z)
      IMPLICIT #integer*8(I-N)
      CHARACTER*6 SCR(17),SCR1(17)
      COMMON/GENCAS/ELEV[17,79],NSDEG(17),AA[17],BB[17],SCR,SCR1
      COMMON/MIXC/PRSH(6,3,17,17),ESH(6,3,17),AUG(6,3,17,17,17),RAD[6,3,17,17],PRSHBT(6,3,17),IZ[6,3],INIOCC(6,3,17),ISHLMX(6,3),AMZ[6,3]
      COMMON/UPD/NOCC(6,3,17),AUGR(6,3,17,17,17),RADR(6,3,17,17)
      COMMON/CALCAS2B/IONSUM0(10),ifLSUM0(10),ESTORE0(10,28),EPHOTON0(10,28),DRXE0(10,28),DRYE0(10,28),DRZE0(10,28),DRX0(10,28),DRY0(10,28),DRZ0(10,28)
      COMMON/CALCAS3B/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      DIMENSION TEMP(17),TEMP1(289)
#
# CALCULATE CASCADE IN GAS KGAS AND MOLECULAR COMPONENT LGAS
# WITH INTIAL ENERGY DEPOSIT ELECEN AND SHELL VACANCY CREATED AT ISHELL
#
      ISTART=IONSUM(NVAC)
      ISTARTF=ifLSUM(NVAC)
      ISHELLST=ISHELL
      API=numpy.arccos(-1.00)
      TWOPI=2.00*API
  100 ELEFT=ELECEN
      ISHELL=ISHELLST
      INIT=1
# SET STARTING ARRAY NOCC EQUAL TO INIOCC
      DO 1 I=1,17
      NOCC(KGAS,LGAS,I)=INIOCC(KGAS,LGAS,I)
    1 CONTINUE
      IONSUM(NVAC)=ISTART+1
      ifLSUM(NVAC):
=ISTARTF
# STORE PHOTOELECTRON ENERGY AND ANGLE
      ESTORE(NVAC,IONSUM(NVAC))=ELECEN-ELEV[ISHELL,IZ[KGAS,LGAS]]
      ELECN=ESTORE(NVAC,IONSUM(NVAC))
      ELEFT=ELEFT-ELECN
      NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)-1  
# USE PHOTOELECTRON ANGULAR DISTRIBUTION
      APE=AA[ISHELL]
      BPE=BB[ISHELL]
      CALL ANGGEN(APE,BPE,THET)
      if(THET < 0.0):
 THET=THET+API
      R3=DRAND48(RDUM)
      PHI=TWOPI*R3
      CALL DRCOS(DRX0(NVAC,L1),DRY0(NVAC,L1),DRZ0(NVAC,L1),THET,PHI,DRXX,DRYY,DRZZ)
      DRXE(NVAC,IONSUM(NVAC))=DRXX
      DRYE(NVAC,IONSUM(NVAC))=DRYY
      DRZE(NVAC,IONSUM(NVAC))=DRZZ
# LOOP AROUND CASCADE
    4 CONTINUE
# CHECK FOR ELECTRON SHAKEOFF
      IDUM=1
      if(INIT > 1):
 ELECN=ESTORE(NVAC,IONSUM(NVAC))
      INSUM=IONSUM(NVAC)
      CALL SHAKE(ISHELL,ELECN,KGAS,LGAS,ESHK,IDUM,INSUM,JVAC)
#  CALCULATE ENERGY OF ELECTRON
      if(JVAC == 0):
 GO TO 2
#  ELECTRON + SHAKEOFF
      ELECN=ELECN-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      ESTORE(NVAC,IONSUM(NVAC))=ELECN
      IONSUM(NVAC)=IONSUM(NVAC)+1
# MAXIMUM ION CHARGE STATE =28
      if(IONSUM(NVAC):
 > 28) :
       WRITE(6,99) IONSUM(NVAC) 
   99  print(' 3RD GEN ION CHARGE LIMITED TO 28  IONSUM=',I3) 
       STOP
      # endif
      ESTORE(NVAC,IONSUM(NVAC))=ESHK
      ELEFT=ELEFT-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION ANGLE
      R3=DRAND48(RDUM)
      THET=numpy.arccos(1.0-2.0*R3)
      R4=DRAND48(RDUM)
      PHI=TWOPI*R4
      DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
      DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
      DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
    2 CALL UPDATE(KGAS,LGAS,ISHELL)
      INIT=2
# CHOOSE FLUORESCENCE OR AUGER TRANSITION
      TSUM=0.0
      DO 10 I=1,17
      TSUM=TSUM+RADR(KGAS,LGAS,ISHELL,I)
      DO 10 J=1,17
      TSUM=TSUM+AUGR(KGAS,LGAS,ISHELL,I,J)
   10 CONTINUE
# NO MORE TRANSITIONS POSSIBLE
      if(TSUM == 0.0):
 RETURN  
# NORMALISE TO 1.0
      DO 11 I=1,17
      RADR(KGAS,LGAS,ISHELL,I)=RADR(KGAS,LGAS,ISHELL,I)/TSUM
      DO 11 J=1,17
      AUGR(KGAS,LGAS,ISHELL,I,J)=AUGR(KGAS,LGAS,ISHELL,I,J)/TSUM
   11 CONTINUE
# CREATE CUMULATIVE SUM ARRAY
      TEMP[1]=RADR(KGAS,LGAS,ISHELL,1)
      DO 12 I=2,17
      TEMP[I]=RADR(KGAS,LGAS,ISHELL,I)+TEMP(I-1)
   12 CONTINUE
      TEMP1[1]=AUGR(KGAS,LGAS,ISHELL,1,1)
      DO 13 I=2,17
      TEMP1[I]=AUGR(KGAS,LGAS,ISHELL,I,1)+TEMP1(I-1)
   13 CONTINUE
      DO 14 J=1,16
      DO 14 I=1,17
      TEMP1(I+(J*17))=AUGR(KGAS,LGAS,ISHELL,I,(J+1))+TEMP1(I+(J*17)-1)
   14 CONTINUE
# FIND FLUORESCENCE OR AUGER TRANSITION
      R1=DRAND48(RDUM)
      DO 16 I=1,17
      if(R1 < TEMP[I]:
) :
# STORE PHOTON ENERGY AND UPDATE NOCC
       ifLSUM(NVAC):
=ifLSUM(NVAC)+1
       EPHOTON(NVAC,ifLSUM(NVAC))=ELEV[ISHELL,IZ[KGAS,LGAS]]-ELEV[I,IZ[KGAS,LGAS]]
       ELEFT=ELEFT-abs(EPHOTON(NVAC,ifLSUM(NVAC)))
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R4=DRAND48(RDUM)
       PHI=TWOPI*R4
       DRX(NVAC,ifLSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRY(NVAC,ifLSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZ[NVAC,ifLSUM(NVAC)]=DCOS(THET)
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
        RETURN    
       # endif
       GO TO 2  
      # endif 
   16 CONTINUE
  116 CONTINUE
      R2=R1-TEMP(17)
      DO 17 J=1,17
      DO 17 I=1,17
      if(R2 < TEMP1(I+((J-1):
*17))) :
# AUGER OR COSTER KRONIG  
# STORE EJECTED ELECTRON AND UPDATE NOCC
       ETEMP=ELEV[ISHELL,IZ[KGAS,LGAS]]-(ELEV[I,IZ[KGAS,LGAS]]+ELEV[I,IZ[KGAS,LGAS]+1])*0.5-(ELEV[J,IZ[KGAS,LGAS]]+ELEV[J,IZ[KGAS,LGAS]+1])*0.5
       if(ETEMP < 0.0):
 :
# DO NOT ALLOW NEGATIVE ENERGY TRANSITIONS
  117   R1=DRAND48(RDUM)
        if(R1 < TEMP(17):
) GO TO 117
        GO TO 116
       # endif
       IONSUM(NVAC)=IONSUM(NVAC)+1
       if(IONSUM(NVAC):
 > 28) :
        WRITE(6,99) IONSUM(NVAC)
        STOP
       # endif
       ESTORE(NVAC,IONSUM(NVAC))=ETEMP
       ELEFT=ELEFT-abs(ETEMP)
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R4=DRAND48(RDUM)
       PHI=TWOPI*R4
       DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
       NOCC(KGAS,LGAS,J)=NOCC(KGAS,LGAS,J)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
        RETURN
       # endif
       GO TO 4 
      # endif
   17 CONTINUE
      WRITE(6,88) 
   88 print(' ERROR IN CASCADE B3') 
      STOP 
      # end
      def CALCB4(NVAC,KGAS,LGAS,ELECEN,ISHELL,L1):
      IMPLICIT #real*8(A-H,O-Z)
      IMPLICIT #integer*8(I-N)
      CHARACTER*6 SCR(17),SCR1(17)
      COMMON/GENCAS/ELEV[17,79],NSDEG(17),AA[17],BB[17],SCR,SCR1
      COMMON/MIXC/PRSH(6,3,17,17),ESH(6,3,17),AUG(6,3,17,17,17),RAD[6,3,17,17],PRSHBT(6,3,17),IZ[6,3],INIOCC(6,3,17),ISHLMX(6,3),AMZ[6,3]
      COMMON/UPD/NOCC(6,3,17),AUGR(6,3,17,17,17),RADR(6,3,17,17)
      COMMON/CALCAS3B/IONSUM0(10),ifLSUM0(10),ESTORE0(10,28),EPHOTON0(10,28),DRXE0(10,28),DRYE0(10,28),DRZE0(10,28),DRX0(10,28),DRY0(10,28),DRZ0(10,28)
      COMMON/CALCAS4B/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      DIMENSION TEMP(17),TEMP1(289)
#
# CALCULATE CASCADE IN GAS KGAS AND MOLECULAR COMPONENT LGAS
# WITH INTIAL ENERGY DEPOSIT ELECEN AND SHELL VACANCY CREATED AT ISHELL
#
      ISTART=IONSUM(NVAC)
      ISTARTF=ifLSUM(NVAC)
      ISHELLST=ISHELL
      API=numpy.arccos(-1.00)
      TWOPI=2.00*API
  100 ELEFT=ELECEN
      ISHELL=ISHELLST
      INIT=1
# SET STARTING ARRAY NOCC EQUAL TO INIOCC
      DO 1 I=1,17
      NOCC(KGAS,LGAS,I)=INIOCC(KGAS,LGAS,I)
    1 CONTINUE
      IONSUM(NVAC)=ISTART+1
      ifLSUM(NVAC):
=ISTARTF
# STORE PHOTOELECTRON ENERGY AND ANGLE
      ESTORE(NVAC,IONSUM(NVAC))=ELECEN-ELEV[ISHELL,IZ[KGAS,LGAS]]
      ELECN=ESTORE(NVAC,IONSUM(NVAC))
      ELEFT=ELEFT-ELECN
      NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)-1  
# USE PHOTOELECTRON ANGULAR DISTRIBUTION
      APE=AA[ISHELL]
      BPE=BB[ISHELL]
      CALL ANGGEN(APE,BPE,THET)
      if(THET < 0.0):
 THET=THET+API
      R3=DRAND48(RDUM)
      PHI=TWOPI*R3
      CALL DRCOS(DRX0(NVAC,L1),DRY0(NVAC,L1),DRZ0(NVAC,L1),THET,PHI,DRXX,DRYY,DRZZ)
      DRXE(NVAC,IONSUM(NVAC))=DRXX
      DRYE(NVAC,IONSUM(NVAC))=DRYY
      DRZE(NVAC,IONSUM(NVAC))=DRZZ
# LOOP AROUND CASCADE
    4 CONTINUE
# CHECK FOR ELECTRON SHAKEOFF
      IDUM=1
      if(INIT > 1):
 ELECN=ESTORE(NVAC,IONSUM(NVAC))
      INSUM=IONSUM(NVAC)
      CALL SHAKE(ISHELL,ELECN,KGAS,LGAS,ESHK,IDUM,INSUM,JVAC)
#  CALCULATE ENERGY OF ELECTRON
      if(JVAC == 0):
 GO TO 2
#  ELECTRON + SHAKEOFF
      ELECN=ELECN-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      ESTORE(NVAC,IONSUM(NVAC))=ELECN
      IONSUM(NVAC)=IONSUM(NVAC)+1
# MAXIMUM ION CHARGE STATE =28
      if(IONSUM(NVAC):
 > 28) :
       WRITE(6,99) IONSUM(NVAC)
   99  print(' 4TH GEN ION CHARGE LIMITED TO 28 IONSUM=',I3) 
       STOP
      # endif
      ESTORE(NVAC,IONSUM(NVAC))=ESHK
      ELEFT=ELEFT-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION ANGLE
      R3=DRAND48(RDUM)
      THET=numpy.arccos(1.0-2.0*R3)
      R4=DRAND48(RDUM)
      PHI=TWOPI*R4
      DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
      DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
      DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
    2 CALL UPDATE(KGAS,LGAS,ISHELL)
      INIT=2
# CHOOSE FLUORESCENCE OR AUGER TRANSITION
      TSUM=0.0
      DO 10 I=1,17
      TSUM=TSUM+RADR(KGAS,LGAS,ISHELL,I)
      DO 10 J=1,17
      TSUM=TSUM+AUGR(KGAS,LGAS,ISHELL,I,J)
   10 CONTINUE
# NO MORE TRANSITIONS POSSIBLE
      if(TSUM == 0.0):
 RETURN  
# NORMALISE TO 1.0
      DO 11 I=1,17
      RADR(KGAS,LGAS,ISHELL,I)=RADR(KGAS,LGAS,ISHELL,I)/TSUM
      DO 11 J=1,17
      AUGR(KGAS,LGAS,ISHELL,I,J)=AUGR(KGAS,LGAS,ISHELL,I,J)/TSUM
   11 CONTINUE
# CREATE CUMULATIVE SUM ARRAY
      TEMP[1]=RADR(KGAS,LGAS,ISHELL,1)
      DO 12 I=2,17
      TEMP[I]=RADR(KGAS,LGAS,ISHELL,I)+TEMP(I-1)
   12 CONTINUE
      TEMP1[1]=AUGR(KGAS,LGAS,ISHELL,1,1)
      DO 13 I=2,17
      TEMP1[I]=AUGR(KGAS,LGAS,ISHELL,I,1)+TEMP1(I-1)
   13 CONTINUE
      DO 14 J=1,16
      DO 14 I=1,17
      TEMP1(I+(J*17))=AUGR(KGAS,LGAS,ISHELL,I,(J+1))+TEMP1(I+(J*17)-1)
   14 CONTINUE
# FIND FLUORESCENCE OR AUGER TRANSITION
      R1=DRAND48(RDUM)
      DO 16 I=1,17
      if(R1 < TEMP[I]:
) :
# STORE PHOTON ENERGY AND UPDATE NOCC
       ifLSUM(NVAC):
=ifLSUM(NVAC)+1
       EPHOTON(NVAC,ifLSUM(NVAC))=ELEV[ISHELL,IZ[KGAS,LGAS]]-ELEV[I,IZ[KGAS,LGAS]]
       ELEFT=ELEFT-abs(EPHOTON(NVAC,ifLSUM(NVAC)))
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R4=DRAND48(RDUM)
       PHI=TWOPI*R4
       DRX(NVAC,ifLSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRY(NVAC,ifLSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZ[NVAC,ifLSUM(NVAC)]=DCOS(THET)
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
        RETURN    
       # endif
       GO TO 2  
      # endif 
   16 CONTINUE
  116 CONTINUE
      R2=R1-TEMP(17)
      DO 17 J=1,17
      DO 17 I=1,17
      if(R2 < TEMP1(I+((J-1):
*17))) :
# AUGER OR COSTER KRONIG  
# STORE EJECTED ELECTRON AND UPDATE NOCC
       ETEMP=ELEV[ISHELL,IZ[KGAS,LGAS]]-(ELEV[I,IZ[KGAS,LGAS]]+ELEV[I,IZ[KGAS,LGAS]+1])*0.5-(ELEV[J,IZ[KGAS,LGAS]]+ELEV[J,IZ[KGAS,LGAS]+1])*0.5
       if(ETEMP < 0.0):
 :
# DO NOT ALLOW NEGATIVE ENERGY TRANSITIONS
  117   R1=DRAND48(RDUM)
        if(R1 < TEMP(17):
) GO TO 117
        GO TO 116
       # endif
       IONSUM(NVAC)=IONSUM(NVAC)+1
       if(IONSUM(NVAC):
 > 28) :
        WRITE(6,99) IONSUM(NVAC)
        STOP
       # endif
       ESTORE(NVAC,IONSUM(NVAC))=ETEMP
       ELEFT=ELEFT-abs(ETEMP)
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R4=DRAND48(RDUM)
       PHI=TWOPI*R4
       DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
       NOCC(KGAS,LGAS,J)=NOCC(KGAS,LGAS,J)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
        RETURN
       # endif
       GO TO 4 
      # endif
   17 CONTINUE
      WRITE(6,88) 
   88 print(' ERROR IN CASCADE B4') 
      STOP 
      # end
      def CALCB5(NVAC,KGAS,LGAS,ELECEN,ISHELL,L1):
      IMPLICIT #real*8(A-H,O-Z)
      IMPLICIT #integer*8(I-N)
      CHARACTER*6 SCR(17),SCR1(17)
      COMMON/GENCAS/ELEV[17,79],NSDEG(17),AA[17],BB[17],SCR,SCR1
      COMMON/MIXC/PRSH(6,3,17,17),ESH(6,3,17),AUG(6,3,17,17,17),RAD[6,3,17,17],PRSHBT(6,3,17),IZ[6,3],INIOCC(6,3,17),ISHLMX(6,3),AMZ[6,3]
      COMMON/UPD/NOCC(6,3,17),AUGR(6,3,17,17,17),RADR(6,3,17,17)
      COMMON/CALCAS4B/IONSUM0(10),ifLSUM0(10),ESTORE0(10,28),EPHOTON0(10,28),DRXE0(10,28),DRYE0(10,28),DRZE0(10,28),DRX0(10,28),DRY0(10,28),DRZ0(10,28)
      COMMON/CALCAS5B/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      DIMENSION TEMP(17),TEMP1(289)
#
# CALCULATE CASCADE IN GAS KGAS AND MOLECULAR COMPONENT LGAS
# WITH INTIAL ENERGY DEPOSIT ELECEN AND SHELL VACANCY CREATED AT ISHELL
#
      ISTART=IONSUM(NVAC)
      ISTARTF=ifLSUM(NVAC)
      ISHELLST=ISHELL
      API=numpy.arccos(-1.00)
      TWOPI=2.00*API
  100 ELEFT=ELECEN
      ISHELL=ISHELLST
      INIT=1
# SET STARTING ARRAY NOCC EQUAL TO INIOCC
      DO 1 I=1,17
      NOCC(KGAS,LGAS,I)=INIOCC(KGAS,LGAS,I)
    1 CONTINUE
      IONSUM(NVAC)=ISTART+1
      ifLSUM(NVAC):
=ISTARTF
      ESTORE(NVAC,IONSUM(NVAC))=ELECEN-ELEV[ISHELL,IZ[KGAS,LGAS]]
      ELECN=ESTORE(NVAC,IONSUM(NVAC))
      ELEFT=ELEFT-ELECN
      NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)-1  
# USE PHOTOELECTRON ANGULAR DISTRIBUTION
      APE=AA[ISHELL]
      BPE=BB[ISHELL]
      CALL ANGGEN(APE,BPE,THET)
      if(THET < 0.0):
 THET=THET+API
      R3=DRAND48(RDUM)
      PHI=TWOPI*R3
      CALL DRCOS(DRX0(NVAC,L1),DRY0(NVAC,L1),DRZ0(NVAC,L1),THET,PHI,DRXX,DRYY,DRZZ)
      DRXE(NVAC,IONSUM(NVAC))=DRXX
      DRYE(NVAC,IONSUM(NVAC))=DRYY
      DRZE(NVAC,IONSUM(NVAC))=DRZZ
# LOOP AROUND CASCADE
    4 CONTINUE
# CHECK FOR ELECTRON SHAKEOFF
      IDUM=1
      if(INIT > 1):
 ELECN=ESTORE(NVAC,IONSUM(NVAC))
      INSUM=IONSUM(NVAC)
      CALL SHAKE(ISHELL,ELECN,KGAS,LGAS,ESHK,IDUM,INSUM,JVAC)
#  CALCULATE ENERGY OF ELECTRON
      if(JVAC == 0):
 GO TO 2
#  ELECTRON + SHAKEOFF
      ELECN=ELECN-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      ESTORE(NVAC,IONSUM(NVAC))=ELECN
      IONSUM(NVAC)=IONSUM(NVAC)+1
# MAXIMUM ION CHARGE STATE =28
      if(IONSUM(NVAC):
 > 28) :
       WRITE(6,99) IONSUM(NVAC)
   99  print(' 5TH GEN ION CHARGE LIMITED TO 28  IONSUM=',I3)
       STOP 
      # endif
      ESTORE(NVAC,IONSUM(NVAC))=ESHK
      ELEFT=ELEFT-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION ANGLE
      R3=DRAND48(RDUM)
      THET=numpy.arccos(1.0-2.0*R3)
      R4=DRAND48(RDUM)
      PHI=TWOPI*R4
      DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
      DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
      DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
    2 CALL UPDATE(KGAS,LGAS,ISHELL)
      INIT=2
# CHOOSE FLUORESCENCE OR AUGER TRANSITION
      TSUM=0.0
      DO 10 I=1,17
      TSUM=TSUM+RADR(KGAS,LGAS,ISHELL,I)
      DO 10 J=1,17
      TSUM=TSUM+AUGR(KGAS,LGAS,ISHELL,I,J)
   10 CONTINUE
# NO MORE TRANSITIONS POSSIBLE
      if(TSUM == 0.0):
 RETURN  
# NORMALISE TO 1.0
      DO 11 I=1,17
      RADR(KGAS,LGAS,ISHELL,I)=RADR(KGAS,LGAS,ISHELL,I)/TSUM
      DO 11 J=1,17
      AUGR(KGAS,LGAS,ISHELL,I,J)=AUGR(KGAS,LGAS,ISHELL,I,J)/TSUM
   11 CONTINUE
# CREATE CUMULATIVE SUM ARRAY
      TEMP[1]=RADR(KGAS,LGAS,ISHELL,1)
      DO 12 I=2,17
      TEMP[I]=RADR(KGAS,LGAS,ISHELL,I)+TEMP(I-1)
   12 CONTINUE
      TEMP1[1]=AUGR(KGAS,LGAS,ISHELL,1,1)
      DO 13 I=2,17
      TEMP1[I]=AUGR(KGAS,LGAS,ISHELL,I,1)+TEMP1(I-1)
   13 CONTINUE
      DO 14 J=1,16
      DO 14 I=1,17
      TEMP1(I+(J*17))=AUGR(KGAS,LGAS,ISHELL,I,(J+1))+TEMP1(I+(J*17)-1)
   14 CONTINUE
# FIND FLUORESCENCE OR AUGER TRANSITION
      R1=DRAND48(RDUM)
      DO 16 I=1,17
      if(R1 < TEMP[I]:
) :
# STORE PHOTON ENERGY AND UPDATE NOCC
       ifLSUM(NVAC):
=ifLSUM(NVAC)+1
       EPHOTON(NVAC,ifLSUM(NVAC))=ELEV[ISHELL,IZ[KGAS,LGAS]]-ELEV[I,IZ[KGAS,LGAS]]
       ELEFT=ELEFT-abs(EPHOTON(NVAC,ifLSUM(NVAC)))
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R4=DRAND48(RDUM)
       PHI=TWOPI*R4
       DRX(NVAC,ifLSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRY(NVAC,ifLSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZ[NVAC,ifLSUM(NVAC)]=DCOS(THET)
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
        RETURN    
       # endif
       GO TO 2  
      # endif 
   16 CONTINUE
  116 CONTINUE
      R2=R1-TEMP(17)
      DO 17 J=1,17
      DO 17 I=1,17
      if(R2 < TEMP1(I+((J-1):
*17))) :
# AUGER OR COSTER KRONIG  
# STORE EJECTED ELECTRON AND UPDATE NOCC
       ETEMP=ELEV[ISHELL,IZ[KGAS,LGAS]]-(ELEV[I,IZ[KGAS,LGAS]]+ELEV[I,IZ[KGAS,LGAS]+1])*0.5-(ELEV[J,IZ[KGAS,LGAS]]+ELEV[J,IZ[KGAS,LGAS]+1])*0.5
       if(ETEMP < 0.0):
 :
# DO NOT ALLOW NEGATIVE ENERGY TRANSITIONS
  117   R1=DRAND48(RDUM)
        if(R1 < TEMP(17):
) GO TO 117
        GO TO 116
       # endif
       IONSUM(NVAC)=IONSUM(NVAC)+1
       if(IONSUM(NVAC):
 > 28) :
        WRITE(6,99) IONSUM(NVAC)
        STOP
       # endif
       ESTORE(NVAC,IONSUM(NVAC))=ETEMP
       ELEFT=ELEFT-abs(ETEMP)
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R4=DRAND48(RDUM)
       PHI=TWOPI*R4
       DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
       NOCC(KGAS,LGAS,J)=NOCC(KGAS,LGAS,J)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
        RETURN
       # endif
       GO TO 4 
      # endif
   17 CONTINUE
      WRITE(6,88) 
   88 print(' ERROR IN CASCADE B5') 
      STOP 
      # end
      def CASCADEE(J11,KGAS,LGAS,X0,Y0,Z0,T0,EINIT,ISHELL):
      IMPLICIT #real*8(A-H,O-Z)
      IMPLICIT #integer*8(I-N)
      CHARACTER*6 SCR(17),SCR1(17)
      COMMON/COMP/LCMP,LCFLG,LRAY,LRFLG,LPAP,LPFLG,LBRM,LBFLG,LPEFLG
      COMMON/GENCAS/ELEV[17,79],NSDEG(17),AA[17],BB[17],SCR,SCR1
      COMMON/MIXC/PRSH(6,3,17,17),ESH(6,3,17),AUG(6,3,17,17,17),RAD[6,3,17,17],PRSHBT(6,3,17),IZ[6,3],INIOCC(6,3,17),ISHLMX(6,3),AMZ[6,3]
      COMMON/UPD/NOCC(6,3,17),AUGR(6,3,17,17,17),RADR(6,3,17,17)
      COMMON/CALCASE/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      COMMON/CALCAS1E/IONSUM1(10),ifLSUM1(10),ESTOR1(10,28),EPHOTG1(10,28),DRXE1(10,28),DRYE1(10,28),DRZE1(10,28),DRX1(10,28),DRY1(10,28),DRZ1(10,28)
      COMMON/CALCAS2E/IONSUM2(10),ifLSUM2(10),ESTOR2(10,28),EPHOTG2(10,28),DRXE2(10,28),DRYE2(10,28),DRZE2(10,28),DRX2(10,28),DRY2(10,28),DRZ2(10,28)
      COMMON/CALCAS3E/IONSUM3(10),ifLSUM3(10),ESTOR3(10,28),EPHOTG3(10,28),DRXE3(10,28),DRYE3(10,28),DRZE3(10,28),DRX3(10,28),DRY3(10,28),DRZ3(10,28)
      COMMON/CALCAS4E/IONSUM4(10),ifLSUM4(10),ESTOR4(10,28),EPHOTG4(10,28),DRXE4(10,28),DRYE4(10,28),DRZE4(10,28),DRX4(10,28),DRY4(10,28),DRZ4(10,28)
      COMMON/CALCAS5E/IONSUM5(10),ifLSUM5(10),ESTOR5(10,28),EPHOTG5(10,28),DRXE5(10,28),DRYE5(10,28),DRZE5(10,28),DRX5(10,28),DRY5(10,28),DRZ5(10,28)
      COMMON/RESE/IONSM(10),ifLSM(10),ESTOR(10,28),EPHOT(10,28),XN(10,28),YN(10,28),ZN(10,28),DRX0(10,28),DRY0(10,28),DRZ0(10,28),TN(10,28)
      COMMON/GENE1/IONF1(10),ESTF1(10,28),X1(10,28),Y1(10,28),Z1(10,28),DRXS1(10,28),DRYS1(10,28),DRZS1(10,28),T1(10,28)
      COMMON/GENE2/IONF2(10),ESTF2(10,28),X2(10,28),Y2(10,28),Z2(10,28),DRXS2(10,28),DRYS2(10,28),DRZS2(10,28),T2(10,28)
      COMMON/GENE3/IONF3(10),ESTF3(10,15),X3(10,15),Y3(10,15),Z3(10,15),DRXS3(10,15),DRYS3(10,15),DRZS3(10,15),T3(10,15)
      COMMON/GENE4/IONF4(10),ESTF4(10,12),X4(10,12),Y4(10,12),Z4(10,12),DRXS4(10,12),DRYS4(10,12),DRZS4(10,12),T4(10,12)
      COMMON/GENE5/IONF5(10),ESTF5(10,5),X5(10,5),Y5(10,5),Z5(10,5),DRXS5(10,5),DRYS5(10,5),DRZS5(10,5),T5(10,5)
#     COMMON/NSIZE/NJHIGH
#----------------------------------------------------------------------
# CALCULATE CASCADE FROM A VACANCY= ISHELL  IN KGAS LGAS 
# ENERGY OF ESCAPE ELECTRON FROM VACANCY =EINIT ( NEEDED FOR SHAKE OFF)
# ESCAPE ELECTRON NOT INCLUDED IN CASCADE SUM
#----------------------------------------------------------------------
#   SET OR ZERO SOME VARIABLES 
#----------------------------------------------------------------------
#     WRITE(6,77) J11,KGAS,LGAS,X0,Y0,Z0,T0,EINIT,ISHELL
      KGASST=KGAS
      LGASST=LGAS
      EINITST=EINIT
      ISHELLST=ISHELL
  10  API=numpy.arccos(-1.00)
      NJHIGH=0
      KGAS=KGASST
      LGAS=LGASST
      EINIT=EINITST
      ISHELL=ISHELLST
#  
# ZERO SOME ARRAYS
      DO 11 K=1,10
      DO 1 J=1,28
      EPHOTON(K,J)=0.0
      EPHOTG1(K,J)=0.0
      EPHOTG2(K,J)=0.0
      EPHOTG3(K,J)=0.0
      EPHOTG4(K,J)=0.0
      EPHOTG5(K,J)=0.0
      ESTORE(K,J)=0.0
      ESTOR1(K,J)=0.0
      ESTOR2(K,J)=0.0
      ESTOR3(K,J)=0.0
      ESTOR4(K,J)=0.0
      ESTOR5(K,J)=0.0
      ESTOR(K,J)=0.0
      ESTF1(K,J)=0.0
      ESTF2(K,J)=0.0
   1  CONTINUE
      ifLSUM[K]:
=0
      ifLSUM1[K]:
=0
      ifLSUM2[K]:
=0
      ifLSUM3[K]:
=0
      ifLSUM4[K]:
=0
      ifLSUM5[K]:
=0
      IONSUM[K]=0
      IONSUM1[K]=0
      IONSUM2[K]=0
      IONSUM3[K]=0
      IONSUM4[K]=0
      IONSUM5[K]=0
      IONSM[K]=0
      IONF1[K]=0
      IONF2[K]=0
      IONF3[K]=0
      IONF4[K]=0
      IONF5[K]=0
   11 CONTINUE
# INITIAL ENERGY IN SHELL
      ESHSTART=ELEV[ISHELL,IZ[KGAS,LGAS]]   
# LOOP OVER SHELL VACANCIES
      CALL CONTROLE(KGAS,LGAS,X0,Y0,Z0,T0,EINIT,ISHELL)
# COMPRESS AUGER AND FLUORESCENCE DATA INTO BLOCKS
      CALL COMPRESSE(ETOT)
#  REPEAT FOR POSSIBLE K-SHELLROUNDING ERROR
        if((ESHSTART-ETOT):
 > 2200.) GO TO 10
# LOAD INTO COMMON/CASRSE/
      CALL CASRESE
#     WRITE(6,77) J11,KGAS,LGAS,X0,Y0,Z0,T0,EINIT,ISHELL
# 77  print(' J11=',I6,' KGAS=',I3,' LGAS=',I3,' X0=',D12.4,' Y0=',
#    /D12.4,' Z0=',D12.4,' T0=',D12.4,/,' EINIT=',D12.4,' ISHELL=',I3) 
      RETURN
      # end
      def CASRESE:
      IMPLICIT #real*8(A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/INTHRMB2/NPTPE,ET(10,50),XT(10,50),YT(10,50),ZT(10,50),TT(10,50),DRX(10,50),DRY(10,50),DRZ[10,50],NJFLR(10,50),IEVENTL(10) 
      COMMON/CASRSE/E(400),X(400),Y(400),Z[400],DRX1(400),DRY1(400),DRZ1(400),T(400),NFLGF(400),NFLGPP(400),IEVENT
# LOADS AUGER CASCADE ELECTRONS POSITIONS ANGLES AND ENERGY FOR EACH 
# EVENT INTO COMMON BLOCK/CASRSE/
# ONLY FOR ELECTRON IONISATION DEEP LEVELS
      K=0
      ESM=0.0
      DO 1 I=1,NPTPE
      DO 1 J=1,IEVENTL[I]
      K=K+1
      E[K]=ET(I,J)
      X[K]=XT(I,J)
      Y[K]=YT(I,J)
      Z[K]=ZT(I,J)
      T[K]=TT(I,J)
      ESM=ESM+E[K]
      DRX1[K]=DRX(I,J)
      DRY1[K]=DRY(I,J)
      DRZ1[K]=DRZ[I,J]
      NFLGF[K]=NJFLR(I,J)
      NFLGPP[K]=0
    1 CONTINUE
      IEVENT=K
c     WRITE(6,98) ESM
# 98  print(' ESM=',D12.4)
      if(K > 400):
 :
       WRITE(6,99) K
  99   print(' ARRAY TOO LARGE IN CASRESE K=',I4)
       STOP
      # endif       
      RETURN
      # end
      def CONTROLE(KGAS,LGAS,X,Y,Z,T,EINIT,ISHELL):
      IMPLICIT #real*8(A-H,O-Z)
      IMPLICIT #integer*8(I-N)
      CHARACTER*6 SCR(17),SCR1(17)
      COMMON/COMP/LCMP,LCFLG,LRAY,LRFLG,LPAP,LPFLG,LBRM,LBFLG,LPEFLG
      COMMON/GENCAS/ELEV[17,79],NSDEG(17),AA[17],BB[17],SCR,SCR1
      COMMON/MIXC/PRSH(6,3,17,17),ESH(6,3,17),AUG(6,3,17,17,17),RAD[6,3,17,17],PRSHBT(6,3,17),IZ[6,3],INIOCC(6,3,17),ISHLMX(6,3),AMZ[6,3]
      COMMON/UPD/NOCC(6,3,17),AUGR(6,3,17,17,17),RADR(6,3,17,17)
      COMMON/CALCASE/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      COMMON/CALCAS1E/IONSUM1(10),ifLSUM1(10),ESTOR1(10,28),EPHOTG1(10,28),DRXE1(10,28),DRYE1(10,28),DRZE1(10,28),DRX1(10,28),DRY1(10,28),DRZ1(10,28)
      COMMON/CALCAS2E/IONSUM2(10),ifLSUM2(10),ESTOR2(10,28),EPHOTG2(10,28),DRXE2(10,28),DRYE2(10,28),DRZE2(10,28),DRX2(10,28),DRY2(10,28),DRZ2(10,28)
      COMMON/CALCAS3E/IONSUM3(10),ifLSUM3(10),ESTOR3(10,28),EPHOTG3(10,28),DRXE3(10,28),DRYE3(10,28),DRZE3(10,28),DRX3(10,28),DRY3(10,28),DRZ3(10,28)
      COMMON/CALCAS4E/IONSUM4(10),ifLSUM4(10),ESTOR4(10,28),EPHOTG4(10,28),DRXE4(10,28),DRYE4(10,28),DRZE4(10,28),DRX4(10,28),DRY4(10,28),DRZ4(10,28)
      COMMON/CALCAS5E/IONSUM5(10),ifLSUM5(10),ESTOR5(10,28),EPHOTG5(10,28),DRXE5(10,28),DRYE5(10,28),DRZE5(10,28),DRX5(10,28),DRY5(10,28),DRZ5(10,28)
c
#
#  CALCULATES AUGER AND FLUORESCENCE CASCADE FOR VACANCY IN ICSHELL
#
      ifIRST=1:
      ISECOND=2
      ICONPH=1
      NVAC=1
      X0=X
      Y0=Y
      Z0=Z
      T0=T
      IZERO=0
      IONE=1
      ADIST=0.0
# 
# CALCULATE CASCADE EVENT
c     WRITE(6,991) NVAC,KGAS,LGAS,EINIT,ISHELL
# 991 print(' NVAC=',I3,' KGAS=',I3,' LGAS=',I3,' EINIT=',D12.4,' 
#    /ISHELL=',I3)
      CALL CALCE(NVAC,KGAS,LGAS,EINIT,ISHELL)
# STORE EVENT 
#     Z0=DIST
      CALL CASSTOREE(NVAC,X0,Y0,Z0,T0)
# IF INCLUDE PHOTOABSORPTION OF FLUORESENCE : 
      if(ICONPH == 1):
 :
       if(ifLSUM(NVAC):
 == 0) : 
# ZERO COUNTER
        L1=0
        CALL CSSTF1E(NVAC,L1,ADIST)
        GO TO 91
       # endif
# LOOP AROUND FIRST GEN FLUORESCENCE
       ifL1=ifLSUM(NVAC):
       DO 9 L1=1,ifL1
       EPH=EPHOTON(NVAC,L1)
#
# CALC ABSORPTION POSITION X1,Y1,Z1 FOR FLUORESENCE PHOTON OF ENERGY EPH
# WITH ABSORPTION IN SHELL ISHELL1 IN GAS KGAS1 COMPONENT LGAS1 
       CALL ABSO(ISECOND,EPH,ISHELL1,KGAS1,LGAS1,DIST1)
# LOW ENERGY PHOTON
       if(ISHELL1 == -1):
 :
         ifLSUM(NVAC):
=ifLSUM(NVAC)-1
        GO TO 9
       # endif
#
# CALCULATE CASCADE IN GAS 
       CALL CALC1E(NVAC,KGAS1,LGAS1,EPH,ISHELL1,L1)
# STORE EVENT
       CALL CSSTF1E(NVAC,L1,DIST1) 
    9  CONTINUE 
   91  CONTINUE
#
# SECOND GENERATION FLUORESCENCE
       if(ifLSUM1(NVAC):
 == 0) :
# ZERO COUNTER
        L2=0
        CALL CSSTF2E(NVAC,L2,ADIST)
        GO TO 81
       # endif 
# LOOP AROUND SECOND GEN FLUORESCENCE
       ifL2=ifLSUM1(NVAC):
       DO 8 L2=1,ifL2
       EPH=EPHOTG1(NVAC,L2)
#
# CALC ABSORPTION POSITION X2,Y2,Z2 FOR FLUORESENCE PHOTON OF ENERGY EPH
# WITH ABSORPTION IN SHELL ISHELL2 IN GAS KGAS2 COMPONENT LGAS2
       CALL ABSO(ISECOND,EPH,ISHELL2,KGAS2,LGAS2,DIST2)
# LOW ENERGY PHOTON
       if(ISHELL2 == -1):
 :
        ifLSUM1(NVAC):
=ifLSUM1(NVAC)-1
        GO TO 8
       # endif
#
# CALCULATE CASCADE IN GAS 
       CALL CALC2E(NVAC,KGAS2,LGAS2,EPH,ISHELL2,L2)
# STORE EVENT
       CALL CSSTF2E(NVAC,L2,DIST2)               
    8  CONTINUE    
   81  CONTINUE
# 
# THIRD GENERATION FLUORESCENCE
       if(ifLSUM2(NVAC):
 == 0) :
# ZERO COUNTER
        L3=0
        CALL CSSTF3E(NVAC,L3,ADIST)
        GO TO 71
       # endif
# LOOP AROUND THIRD GEN FLUORESCENCE
       ifL3=ifLSUM2(NVAC):
       DO 7 L3=1,ifL3
       EPH=EPHOTG2(NVAC,L3)
#
# CALC ABSORPTION POSITION X3,Y3,Z3 FOR FLUORESENCE PHOTON OF ENERGY EPH
# WITH ABSORPTION IN SHELL ISHELL3 IN GAS KGAS3 COMPONENT LGAS3
       CALL ABSO(ISECOND,EPH,ISHELL3,KGAS3,LGAS3,DIST3)
# LOW ENERGY PHOTON
       if(ISHELL3 == -1):
 :
        ifLSUM2(NVAC):
=ifLSUM2(NVAC)-1
        GO TO 7
       # endif
#
# CALCULATE CASCADE IN GAS 
       CALL CALC3E(NVAC,KGAS3,LGAS3,EPH,ISHELL3,L3)
# STORE EVENT
       CALL CSSTF3E(NVAC,L3,DIST3)               
    7  CONTINUE 
   71  CONTINUE     
# 
# FOURTH GENERATION FLUORESCENCE
       if(ifLSUM3(NVAC):
 == 0) :
# ZERO COUNTER
        L4=0
        CALL CSSTF4E(NVAC,L4,ADIST)
        GO TO 61
       # endif
# LOOP AROUND FOURTH GEN FLUORESCENCE
       ifL4=ifLSUM3(NVAC):
       DO 6 L4=1,ifL4
       EPH=EPHOTG3(NVAC,L4)
#
# CALC ABSORPTION POSITION X4,Y4,Z4 FOR FLUORESENCE PHOTON OF ENERGY EPH
# WITH ABSORPTION IN SHELL ISHELL4 IN GAS KGAS4 COMPONENT LGAS4
       CALL ABSO(ISECOND,EPH,ISHELL4,KGAS4,LGAS4,DIST4)
# LOW ENERGY PHOTON
       if(ISHELL4 == -1):
 :
        ifLSUM3(NVAC):
=ifLSUM3(NVAC)-1
        GO TO 6
       # endif
#
# CALCULATE CASCADE IN GAS 
       CALL CALC4E(NVAC,KGAS4,LGAS4,EPH,ISHELL4,L4)
# STORE EVENT
       CALL CSSTF4E(NVAC,L4,DIST4)                    
    6  CONTINUE  
   61  CONTINUE     
# 
# FIFTH GENERATION FLUORESCENCE
       if(ifLSUM4(NVAC):
 == 0) :
# ZERO COUNTER
        L5=0
        CALL CSSTF5E(NVAC,L5,ADIST)
        GO TO 51
       # endif
# LOOP AROUND FIFTH GEN FLUORESCENCE
       ifL5=ifLSUM5(NVAC):
       DO 5 L5=1,ifL5
       EPH=EPHOTG4(NVAC,L5)
#
# CALC ABSORPTION POSITION X5,Y5,Z5 FOR FLUORESENCE PHOTON OF ENERGY EPH
# WITH ABSORPTION IN SHELL ISHELL5 IN GAS KGAS5 COMPONENT LGAS5
       CALL ABSO(ISECOND,EPH,ISHELL5,KGAS5,LGAS5,DIST5)
# LOW ENERGY PHOTON
       if(ISHELL5 == -1):
 :
         ifLSUM5(NVAC):
=ifLSUM(NVAC)-1
        GO TO 5
       # endif
#
# CALCULATE CASCADE IN GAS 
       CALL CALC5E(NVAC,KGAS5,LGAS5,EPH,ISHELL5,L5)
# STORE EVENT
       CALL CSSTF5E(NVAC,L5,DIST5)               
       if(ifLSUM5(NVAC):
 >= 1) WRITE(6,89) ifLSUM5
   89  print(' WARNING SIXTH GENERATION EXISTS ifLSUM5=',I3)
    5  CONTINUE
   51  CONTINUE
      # endif
   10 CONTINUE
      RETURN 
      # end
      def CALCE(NVAC,KGAS,LGAS,ELECEN,ISHELL):
      IMPLICIT #real*8(A-H,O-Z)
      IMPLICIT #integer*8(I-N)
      CHARACTER*6 SCR(17),SCR1(17)
      COMMON/GENCAS/ELEV[17,79],NSDEG(17),AA[17],BB[17],SCR,SCR1
      COMMON/MIXC/PRSH(6,3,17,17),ESH(6,3,17),AUG(6,3,17,17,17),RAD[6,3,17,17],PRSHBT(6,3,17),IZ[6,3],INIOCC(6,3,17),ISHLMX(6,3),AMZ[6,3]
      COMMON/UPD/NOCC(6,3,17),AUGR(6,3,17,17,17),RADR(6,3,17,17)
      COMMON/CALCASE/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      DIMENSION TEMP(17),TEMP1(289)
#
# CALCULATE CASCADE IN GAS KGAS AND MOLECULAR COMPONENT LGAS
# WITH INTIAL ELECTRON ESCAPE ENERGY ELECEN FROM 
# SHELL VACANCY CREATED AT ISHELL
#
      API=numpy.arccos(-1.00)
      TWOPI=2.00*API
      ICON=1
      ISHELLST=ISHELL
  100 ISHELL=ISHELLST
      ELECN=ELECEN
      ELEFT=ELEV[ISHELL,IZ[KGAS,LGAS]]
      ISECOND=1
      ifIRST=0:
# SET STARTING ARRAY NOCC EQUAL TO INIOCC
      DO 1 I=1,17
      NOCC(KGAS,LGAS,I)=INIOCC(KGAS,LGAS,I)
    1 CONTINUE
c initial vacancy
      NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)-1
#
      IONSUM(NVAC)=1
      ifLSUM(NVAC):
=0
# LOOP AROUND CASCADE
    4 CONTINUE
#%%%%%%%%%%%%%%%%%%%%
      GO TO 2
#$$$$$$$$$$$$$$$$$$$$
# CHECK FOR ELECTRON SHAKEOFF
      ifIRST=ifIRST+1:
      if(ifIRST > 1):
 ELECN=ESTORE(NVAC,IONSUM(NVAC))
      CALL SHAKE(ISHELL,ELECN,KGAS,LGAS,ESHK,ICON,ifIRST,JVAC)
#  CALCULATE ENERGY OF ELECTRON
      if(JVAC == 0):
 GO TO 2
      if(ifIRST > 1):
 :
       ESTORE(NVAC,IONSUM(NVAC))=ESTORE(NVAC,IONSUM(NVAC))-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      # endif
      IONSUM(NVAC)=IONSUM(NVAC)+1
# MAXIMUM ION CHARGE STATE =28
      if(IONSUM(NVAC):
 > 28) :
       WRITE(6,99) IONSUM(NVAC) 
   99  print(' WARNING ION CHARGE LIMITED TO 28+ IN THIS VERSION') 
       STOP
      # endif
# STORE SHAKE ELECTRON
      ESTORE(NVAC,IONSUM(NVAC))=ESHK
      ELEFT=ELEFT-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
      R3=DRAND48(RDUM)
      THET=numpy.arccos(1.0-2.0*R3)
      R3=DRAND48(RDUM)
      PHI=TWOPI*R3
      DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
      DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
      DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
    2 CONTINUE 
# RENORMALISE FLUORESCENCE AND AUGER RATES FOR NEW OCCUPANCY
      CALL UPDATE(KGAS,LGAS,ISHELL)
#  CHOOSE FLUORESCENCE OR AUGER TRANSITION
      TSUM=0.0
      DO 10 I=1,17
      TSUM=TSUM+RADR(KGAS,LGAS,ISHELL,I)
      DO 10 J=1,17
      TSUM=TSUM+AUGR(KGAS,LGAS,ISHELL,I,J)
   10 CONTINUE
# NO MORE TRANSITIONS POSSIBLE
      if(TSUM == 0.0):
 : 
       ISHELL=ISHELLST
       RETURN  
      # endif
# NORMALISE TO 1.0
      DO 11 I=1,17
      RADR(KGAS,LGAS,ISHELL,I)=RADR(KGAS,LGAS,ISHELL,I)/TSUM
      DO 11 J=1,17
      AUGR(KGAS,LGAS,ISHELL,I,J)=AUGR(KGAS,LGAS,ISHELL,I,J)/TSUM
   11 CONTINUE
# CREATE CUMULATIVE SUM ARRAY
      TEMP[1]=RADR(KGAS,LGAS,ISHELL,1)
      DO 12 I=2,17
      TEMP[I]=RADR(KGAS,LGAS,ISHELL,I)+TEMP(I-1)
   12 CONTINUE
      TEMP1[1]=AUGR(KGAS,LGAS,ISHELL,1,1)
      DO 13 I=2,17
      TEMP1[I]=AUGR(KGAS,LGAS,ISHELL,I,1)+TEMP1(I-1)
   13 CONTINUE
      DO 14 J=1,16
      DO 14 I=1,17
      TEMP1(I+(J*17))=AUGR(KGAS,LGAS,ISHELL,I,(J+1))+TEMP1(I+(J*17)-1)
   14 CONTINUE
# FIND FLUORESCENCE OR AUGER TRANSITION
   15 R1=DRAND48(RDUM)
      DO 16 I=1,17
      if(R1 < TEMP[I]:
) :
# STORE PHOTON ENERGY AND ANGLE : UPDATE NOCC
       ifLSUM(NVAC):
=ifLSUM(NVAC)+1
       EPHOTON(NVAC,ifLSUM(NVAC))=ELEV[ISHELL,IZ[KGAS,LGAS]]-ELEV[I,IZ[KGAS,LGAS]]
      if(EPHOTON(NVAC,ifLSUM(NVAC):
) < 0.0) WRITE(6,545) EPHOTON(NVAC,ifLSUM(NVAC)),ifLSUM(NVAC),KGAS,LGAS,IZ[KGAS,LGAS],NVAC
 545  print(' PHOTON ENERGY=','%.3f' %,' ifLSUM=',I6,' KGAS=',I3,' LGAS=',I3,' IZ=',I4,' NVAC=',I2,' IN CALCE')
       ELEFT=ELEFT-abs(EPHOTON(NVAC,ifLSUM(NVAC)))
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R3=DRAND48(RDUM)
       PHI=TWOPI*R3
# CALC DIRECTION COSINES OF FLUORESCENCE
       DRX(NVAC,ifLSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRY(NVAC,ifLSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZ[NVAC,ifLSUM(NVAC)]=DCOS(THET)
#   
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
       ISHELL=ISHELLST
        RETURN    
       # endif
       GO TO 2  
      # endif 
   16 CONTINUE
  116 CONTINUE
      R2=R1-TEMP(17)
      DO 27 J=1,17
      DO 27 I=1,17
      if(R2 < TEMP1(I+((J-1):
*17))) :
# AUGER OR COSTER KRONIG  
# STORE EJECTED ELECTRON AND UPDATE NOCC
       ETEMP=ELEV[ISHELL,IZ[KGAS,LGAS]]-(ELEV[I,IZ[KGAS,LGAS]]+ELEV[I,IZ[KGAS,LGAS]+1])*0.5-(ELEV[J,IZ[KGAS,LGAS]]+ELEV[J,IZ[KGAS,LGAS]+1])*0.5
       if(ETEMP < 0.0):
 :
# DO NOT ALLOW NEGATIVE ENERGY TRANSITIONS
  117   R1=DRAND48(RDUM)
        if(R1 < TEMP(17):
) GO TO 117
        GO TO 116
       # endif
       IONSUM(NVAC)=IONSUM(NVAC)+1
       if(IONSUM(NVAC):
 > 28) : 
        WRITE(6,887) IONSUM(NVAC)
  887   print(' IONSUM LIMITED TO 28 IN THIS VERSION IONSUM=',I3,' IN CALCE')
        STOP
       # endif
       ESTORE(NVAC,IONSUM(NVAC))=ETEMP
       ELEFT=ELEFT-abs(ETEMP)
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R3=DRAND48(RDUM)
       PHI=TWOPI*R3
       DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
       NOCC(KGAS,LGAS,J)=NOCC(KGAS,LGAS,J)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
        ISHELL=ISHELLST
        RETURN
       # endif
       GO TO 4 
      # endif
   27 CONTINUE
      WRITE(6,88) 
   88 print(' ERROR IN CASCADE E0') 
      STOP 
      # end
      def CALC1E(NVAC,KGAS,LGAS,ELECEN,ISHELL,L1):
      IMPLICIT #real*8(A-H,O-Z)
      IMPLICIT #integer*8(I-N)
      CHARACTER*6 SCR(17),SCR1(17)
      COMMON/GENCAS/ELEV[17,79],NSDEG(17),AA[17],BB[17],SCR,SCR1
      COMMON/MIXC/PRSH(6,3,17,17),ESH(6,3,17),AUG(6,3,17,17,17),RAD[6,3,17,17],PRSHBT(6,3,17),IZ[6,3],INIOCC(6,3,17),ISHLMX(6,3),AMZ[6,3]
      COMMON/UPD/NOCC(6,3,17),AUGR(6,3,17,17,17),RADR(6,3,17,17)
      COMMON/CALCASE/IONSUM0(10),ifLSUM0(10),ESTORE0(10,28),EPHOTON0(10,28),DRXE0(10,28),DRYE0(10,28),DRZE0(10,28),DRX0(10,28),DRY0(10,28),DRZ0(10,28)
      COMMON/CALCAS1E/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      DIMENSION TEMP(17),TEMP1(289)
#
# CALCULATE CASCADE IN GAS KGAS AND MOLECULAR COMPONENT LGAS 
# WITH INTIAL ENERGY DEPOSIT ELECEN AND SHELL VACANCY CREATED AT ISHELL
#
      ISTART=IONSUM(NVAC)
      ISTARTF=ifLSUM(NVAC)
      ISHELLST=ISHELL
      API=numpy.arccos(-1.00)
      TWOPI=2.00*API
  100 ELEFT=ELECEN
      ISHELL=ISHELLST
      INIT=1
# SET STARTING ARRAY NOCC EQUAL TO INIOCC
      DO 1 I=1,17
      NOCC(KGAS,LGAS,I)=INIOCC(KGAS,LGAS,I)
    1 CONTINUE
      IONSUM(NVAC)=ISTART+1
      ifLSUM(NVAC):
=ISTARTF
# STORE PHOTOELECTRON ENERGY AND ANGLE
      ESTORE(NVAC,IONSUM(NVAC))=ELECEN-ELEV[ISHELL,IZ[KGAS,LGAS]]
      ELECN=ESTORE(NVAC,IONSUM(NVAC))
      ELEFT=ELEFT-ELECN
      NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)-1  
# USE PHOTELECTRON ANGULAR DISTRIBUTION
      APE=AA[ISHELL]
      BPE=BB[ISHELL]
      CALL ANGGEN(APE,BPE,THET)
      if(THET < 0.0):
 THET=THET+API
      R3=DRAND48(RDUM)
      PHI=TWOPI*R3
      CALL DRCOS(DRX0(NVAC,L1),DRY0(NVAC,L1),DRZ0(NVAC,L1),THET,PHI,DRXX,DRYY,DRZZ)
      DRXE(NVAC,IONSUM(NVAC))=DRXX
      DRYE(NVAC,IONSUM(NVAC))=DRYY
      DRZE(NVAC,IONSUM(NVAC))=DRZZ
# LOOP AROUND CASCADE
    4 CONTINUE
# CHECK FOR ELECTRON SHAKEOFF
      IDUM=1
      if(INIT > 1):
 ELECN=ESTORE(NVAC,IONSUM(NVAC))
      INSUM=IONSUM(NVAC)
      CALL SHAKE(ISHELL,ELECN,KGAS,LGAS,ESHK,IDUM,INSUM,JVAC)
#  CALCULATE ENERGY OF ELECTRON
      if(JVAC == 0):
 GO TO 2
#  ELECTRON + SHAKEOFF
      ELECN=ELECN-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      ESTORE(NVAC,IONSUM(NVAC))=ELECN
      IONSUM(NVAC)=IONSUM(NVAC)+1
# MAXIMUM ION CHARGE STATE =28
      if(IONSUM(NVAC):
 > 28) : 
       WRITE(6,99) IONSUM(NVAC)  
  99   print(' 1ST GEN LIMITED TO 28 IN THIS VERSION IONSUM=',I3)  
       STOP        
      # endif 
      ESTORE(NVAC,IONSUM(NVAC))=ESHK 
      ELEFT=ELEFT-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION 
      R3=DRAND48(RDUM)
      THET=numpy.arccos(1.0-2.0*R3)
      R4=DRAND48(RDUM)
      PHI=TWOPI*R4
      DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
      DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
      DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
    2 CALL UPDATE(KGAS,LGAS,ISHELL)
      INIT=2
# CHOOSE FLUORESCENCE OR AUGER TRANSITION
      TSUM=0.0
      DO 10 I=1,17
      TSUM=TSUM+RADR(KGAS,LGAS,ISHELL,I)
      DO 10 J=1,17
      TSUM=TSUM+AUGR(KGAS,LGAS,ISHELL,I,J)
   10 CONTINUE
# NO MORE TRANSITIONS POSSIBLE
      if(TSUM == 0.0):
 RETURN  
# NORMALISE TO 1.0
      DO 11 I=1,17
      RADR(KGAS,LGAS,ISHELL,I)=RADR(KGAS,LGAS,ISHELL,I)/TSUM
      DO 11 J=1,17
      AUGR(KGAS,LGAS,ISHELL,I,J)=AUGR(KGAS,LGAS,ISHELL,I,J)/TSUM
   11 CONTINUE
# CREATE CUMULATIVE SUM ARRAY
      TEMP[1]=RADR(KGAS,LGAS,ISHELL,1)
      DO 12 I=2,17
      TEMP[I]=RADR(KGAS,LGAS,ISHELL,I)+TEMP(I-1)
   12 CONTINUE
      TEMP1[1]=AUGR(KGAS,LGAS,ISHELL,1,1)
      DO 13 I=2,17
      TEMP1[I]=AUGR(KGAS,LGAS,ISHELL,I,1)+TEMP1(I-1)
   13 CONTINUE
      DO 14 J=1,16
      DO 14 I=1,17
      TEMP1(I+(J*17))=AUGR(KGAS,LGAS,ISHELL,I,(J+1))+TEMP1(I+(J*17)-1)
   14 CONTINUE
# FIND FLUORESCENCE OR AUGER TRANSITION
      R1=DRAND48(RDUM)
      DO 16 I=1,17
      if(R1 < TEMP[I]:
) :
# STORE PHOTON ENERGY AND ANGLE : UPDATE NOCC
       ifLSUM(NVAC):
=ifLSUM(NVAC)+1
       EPHOTON(NVAC,ifLSUM(NVAC))=ELEV[ISHELL,IZ[KGAS,LGAS]]-ELEV[I,IZ[KGAS,LGAS]]
       ELEFT=ELEFT-abs(EPHOTON(NVAC,ifLSUM(NVAC)))
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R4=DRAND48(RDUM)       
       PHI=TWOPI*R4
       DRX(NVAC,ifLSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRY(NVAC,ifLSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZ[NVAC,ifLSUM(NVAC)]=DCOS(THET)
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
        RETURN    
       # endif
       GO TO 2  
      # endif 
   16 CONTINUE
  116 CONTINUE
      R2=R1-TEMP(17)
      DO 17 J=1,17
      DO 17 I=1,17
      if(R2 < TEMP1(I+((J-1):
*17))) :
# AUGER OR COSTER KRONIG  
# STORE EJECTED ELECTRON AND UPDATE NOCC
       ETEMP=ELEV[ISHELL,IZ[KGAS,LGAS]]-(ELEV[I,IZ[KGAS,LGAS]]+ELEV[I,IZ[KGAS,LGAS]+1])*0.5-(ELEV[J,IZ[KGAS,LGAS]]+ELEV[J,IZ[KGAS,LGAS]+1])*0.5
       if(ETEMP < 0.0):
 :
# DO NOT ALLOW NEGATIVE ENERGY TRANSITIONS
  117   R1=DRAND48(RDUM)
        if(R1 < TEMP(17):
) GO TO 117
        GO TO 116
       # endif
       IONSUM(NVAC)=IONSUM(NVAC)+1
       if(IONSUM(NVAC):
 > 28) :
        WRITE(6,99) IONSUM(NVAC)
        STOP
       # endif
       ESTORE(NVAC,IONSUM(NVAC))=ETEMP
       ELEFT=ELEFT-abs(ETEMP)
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R4=DRAND48(RDUM)
       PHI=TWOPI*R4
       DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
       NOCC(KGAS,LGAS,J)=NOCC(KGAS,LGAS,J)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
        RETURN
       # endif
       GO TO 4 
      # endif
   17 CONTINUE
      WRITE(6,88) 
   88 print(' ERROR IN CASCADE 1') 
      STOP 
      # end
      def CALC2E(NVAC,KGAS,LGAS,ELECEN,ISHELL,L1):
      IMPLICIT #real*8(A-H,O-Z)
      IMPLICIT #integer*8(I-N)
      CHARACTER*6 SCR(17),SCR1(17)
      COMMON/GENCAS/ELEV[17,79],NSDEG(17),AA[17],BB[17],SCR,SCR1
      COMMON/MIXC/PRSH(6,3,17,17),ESH(6,3,17),AUG(6,3,17,17,17),RAD[6,3,17,17],PRSHBT(6,3,17),IZ[6,3],INIOCC(6,3,17),ISHLMX(6,3),AMZ[6,3]
      COMMON/UPD/NOCC(6,3,17),AUGR(6,3,17,17,17),RADR(6,3,17,17)
      COMMON/CALCAS1E/IONSUM0(10),ifLSUM0(10),ESTORE0(10,28),EPHOTON0(10,28),DRXE0(10,28),DRYE0(10,28),DRZE0(10,28),DRX0(10,28),DRY0(10,28),DRZ0(10,28)
      COMMON/CALCAS2E/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      DIMENSION TEMP(17),TEMP1(289)
#
# CALCULATE CASCADE IN GAS KGAS AND MOLECULAR COMPONENT LGAS
# WITH INTIAL ENERGY DEPOSIT ELECEN AND SHELL VACANCY CREATED AT ISHELL
#
      ISTART=IONSUM(NVAC)
      ISTARTF=ifLSUM(NVAC)
      ISHELLST=ISHELL
      API=numpy.arccos(-1.00)
      TWOPI=2.00*API
  100 ELEFT=ELECEN
      ISHELL=ISHELLST
      INIT=1
# SET STARTING ARRAY NOCC EQUAL TO INIOCC
      DO 1 I=1,17
      NOCC(KGAS,LGAS,I)=INIOCC(KGAS,LGAS,I)
    1 CONTINUE
      IONSUM(NVAC)=ISTART+1
      ifLSUM(NVAC):
=ISTARTF
# STORE INITIAL PHOTELECTRON AND ANGLE
      ESTORE(NVAC,IONSUM(NVAC))=ELECEN-ELEV[ISHELL,IZ[KGAS,LGAS]]
      ELECN=ESTORE(NVAC,IONSUM(NVAC))
      ELEFT=ELEFT-ELECN
      NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)-1  
# USE PHOTOELECTRON ANGULAR DISTRIBUTION
      APE=AA[ISHELL]
      BPE=BB[ISHELL]
      CALL ANGGEN(APE,BPE,THET)
      if(THET < 0.0):
 THET=THET+API
      R3=DRAND48(RDUM)
      PHI=TWOPI*R3
      CALL DRCOS(DRX0(NVAC,L1),DRY0(NVAC,L1),DRZ0(NVAC,L1),THET,PHI,DRXX,DRYY,DRZZ)
      DRXE(NVAC,IONSUM(NVAC))=DRXX
      DRYE(NVAC,IONSUM(NVAC))=DRYY
      DRZE(NVAC,IONSUM(NVAC))=DRZZ
# LOOP AROUND CASCADE
    4 CONTINUE
# CHECK FOR ELECTRON SHAKEOFF
      IDUM=1
      if(INIT > 1):
 ELECN=ESTORE(NVAC,IONSUM(NVAC))
      INSUM=IONSUM(NVAC)
      CALL SHAKE(ISHELL,ELECN,KGAS,LGAS,ESHK,IDUM,INSUM,JVAC)
#  CALCULATE ENERGY OF ELECTRON
      if(JVAC == 0):
 GO TO 2
#  ELECTRON + SHAKEOFF
      ELECN=ELECN-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      ESTORE(NVAC,IONSUM(NVAC))=ELECN
      IONSUM(NVAC)=IONSUM(NVAC)+1
# MAXIMUM ION CHARGE STATE =28
      if(IONSUM(NVAC):
 > 28) :
       WRITE(6,99) IONSUM(NVAC)
   99  print(' 2ND GEN IONS LIMITED TO 28 IN THIS VERSION IONSUM=',I3) 
       STOP
      # endif
      ESTORE(NVAC,IONSUM(NVAC))=ESHK
      ELEFT=ELEFT-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
      R3=DRAND48(RDUM)
      THET=numpy.arccos(1.0-2.0*R3)
      R4=DRAND48(RDUM)
      PHI=TWOPI*R4
      DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
      DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
      DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
    2 CALL UPDATE(KGAS,LGAS,ISHELL)
      INIT=2
# CHOOSE FLUORESCENCE OR AUGER TRANSITION
      TSUM=0.0
      DO 10 I=1,17
      TSUM=TSUM+RADR(KGAS,LGAS,ISHELL,I)
      DO 10 J=1,17
      TSUM=TSUM+AUGR(KGAS,LGAS,ISHELL,I,J)
   10 CONTINUE
# NO MORE TRANSITIONS POSSIBLE
      if(TSUM == 0.0):
 RETURN  
# NORMALISE TO 1.0
      DO 11 I=1,17
      RADR(KGAS,LGAS,ISHELL,I)=RADR(KGAS,LGAS,ISHELL,I)/TSUM
      DO 11 J=1,17
      AUGR(KGAS,LGAS,ISHELL,I,J)=AUGR(KGAS,LGAS,ISHELL,I,J)/TSUM
   11 CONTINUE
# CREATE CUMULATIVE SUM ARRAY
      TEMP[1]=RADR(KGAS,LGAS,ISHELL,1)
      DO 12 I=2,17
      TEMP[I]=RADR(KGAS,LGAS,ISHELL,I)+TEMP(I-1)
   12 CONTINUE
      TEMP1[1]=AUGR(KGAS,LGAS,ISHELL,1,1)
      DO 13 I=2,17
      TEMP1[I]=AUGR(KGAS,LGAS,ISHELL,I,1)+TEMP1(I-1)
   13 CONTINUE
      DO 14 J=1,16
      DO 14 I=1,17
      TEMP1(I+(J*17))=AUGR(KGAS,LGAS,ISHELL,I,(J+1))+TEMP1(I+(J*17)-1)
   14 CONTINUE
# FIND FLUORESCENCE OR AUGER TRANSITION
      R1=DRAND48(RDUM)
      DO 16 I=1,17
      if(R1 < TEMP[I]:
) :
# STORE PHOTON ENERGY AND UPDATE NOCC
       ifLSUM(NVAC):
=ifLSUM(NVAC)+1
       EPHOTON(NVAC,ifLSUM(NVAC))=ELEV[ISHELL,IZ[KGAS,LGAS]]-ELEV[I,IZ[KGAS,LGAS]]
       if(EPHOTON(NVAC,ifLSUM(NVAC):
) < 0.0) WRITE(6,554) EPHOTON(NVAC,ifLSUM(NVAC)),NVAC
  554 print(' EPHOTON=','%.3f' %,' NVAC=',I2,' IN CALC2')
       ELEFT=ELEFT-abs(EPHOTON(NVAC,ifLSUM(NVAC)))
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R4=DRAND48(RDUM)
       PHI=TWOPI*R4
       DRX(NVAC,ifLSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRY(NVAC,ifLSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZ[NVAC,ifLSUM(NVAC)]=DCOS(THET)
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
        RETURN    
       # endif
       GO TO 2  
      # endif 
   16 CONTINUE
  116 CONTINUE
      R2=R1-TEMP(17)
      DO 17 J=1,17
      DO 17 I=1,17
      if(R2 < TEMP1(I+((J-1):
*17))) :
# AUGER OR COSTER KRONIG  
# STORE EJECTED ELECTRON AND UPDATE NOCC
       ETEMP=ELEV[ISHELL,IZ[KGAS,LGAS]]-(ELEV[I,IZ[KGAS,LGAS]]+ELEV[I,IZ[KGAS,LGAS]+1])*0.5-(ELEV[J,IZ[KGAS,LGAS]]+ELEV[J,IZ[KGAS,LGAS]+1])*0.5
       if(ETEMP < 0.0):
 :
# DO NOT ALLOW NEGATIVE ENERGY TRANSITIONS
  117   R1=DRAND48(RDUM)
        if(R1 < TEMP(17):
) GO TO 117
        GO TO 116
       # endif
       IONSUM(NVAC)=IONSUM(NVAC)+1
       if(IONSUM(NVAC):
 > 28) :
        WRITE(6,99) IONSUM(NVAC)
        STOP
       # endif
       ESTORE(NVAC,IONSUM(NVAC))=ETEMP
       ELEFT=ELEFT-abs(ETEMP)
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R4=DRAND48(RDUM)
       PHI=TWOPI*R4
       DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
       NOCC(KGAS,LGAS,J)=NOCC(KGAS,LGAS,J)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
        RETURN
       # endif
       GO TO 4 
      # endif
   17 CONTINUE
      WRITE(6,88) 
   88 print(' ERROR IN CASCADE 2') 
      STOP 
      # end
      def CALC3E(NVAC,KGAS,LGAS,ELECEN,ISHELL,L1):
      IMPLICIT #real*8(A-H,O-Z)
      IMPLICIT #integer*8(I-N)
      CHARACTER*6 SCR(17),SCR1(17)
      COMMON/GENCAS/ELEV[17,79],NSDEG(17),AA[17],BB[17],SCR,SCR1
      COMMON/MIXC/PRSH(6,3,17,17),ESH(6,3,17),AUG(6,3,17,17,17),RAD[6,3,17,17],PRSHBT(6,3,17),IZ[6,3],INIOCC(6,3,17),ISHLMX(6,3),AMZ[6,3]
      COMMON/UPD/NOCC(6,3,17),AUGR(6,3,17,17,17),RADR(6,3,17,17)
      COMMON/CALCAS2E/IONSUM0(10),ifLSUM0(10),ESTORE0(10,28),EPHOTON0(10,28),DRXE0(10,28),DRYE0(10,28),DRZE0(10,28),DRX0(10,28),DRY0(10,28),DRZ0(10,28)
      COMMON/CALCAS3E/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      DIMENSION TEMP(17),TEMP1(289)
#
# CALCULATE CASCADE IN GAS KGAS AND MOLECULAR COMPONENT LGAS
# WITH INTIAL ENERGY DEPOSIT ELECEN AND SHELL VACANCY CREATED AT ISHELL
#
      ISTART=IONSUM(NVAC)
      ISTARTF=ifLSUM(NVAC)
      ISHELLST=ISHELL
      API=numpy.arccos(-1.00)
      TWOPI=2.00*API
  100 ELEFT=ELECEN
      ISHELL=ISHELLST
      INIT=1
# SET STARTING ARRAY NOCC EQUAL TO INIOCC
      DO 1 I=1,17
      NOCC(KGAS,LGAS,I)=INIOCC(KGAS,LGAS,I)
    1 CONTINUE
      IONSUM(NVAC)=ISTART+1
      ifLSUM(NVAC):
=ISTARTF
# STORE PHOTOELECTRON ENERGY AND ANGLE
      ESTORE(NVAC,IONSUM(NVAC))=ELECEN-ELEV[ISHELL,IZ[KGAS,LGAS]]
      ELECN=ESTORE(NVAC,IONSUM(NVAC))
      ELEFT=ELEFT-ELECN
      NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)-1  
# USE PHOTOELECTRON ANGULAR DISTRIBUTION
      APE=AA[ISHELL]
      BPE=BB[ISHELL]
      CALL ANGGEN(APE,BPE,THET)
      if(THET < 0.0):
 THET=THET+API
      R3=DRAND48(RDUM)
      PHI=TWOPI*R3
      CALL DRCOS(DRX0(NVAC,L1),DRY0(NVAC,L1),DRZ0(NVAC,L1),THET,PHI,DRXX,DRYY,DRZZ)
      DRXE(NVAC,IONSUM(NVAC))=DRXX
      DRYE(NVAC,IONSUM(NVAC))=DRYY
      DRZE(NVAC,IONSUM(NVAC))=DRZZ
# LOOP AROUND CASCADE
    4 CONTINUE
# CHECK FOR ELECTRON SHAKEOFF
      IDUM=1
      if(INIT > 1):
 ELECN=ESTORE(NVAC,IONSUM(NVAC))
      INSUM=IONSUM(NVAC)
      CALL SHAKE(ISHELL,ELECN,KGAS,LGAS,ESHK,IDUM,INSUM,JVAC)
#  CALCULATE ENERGY OF ELECTRON
      if(JVAC == 0):
 GO TO 2
#  ELECTRON + SHAKEOFF
      ELECN=ELECN-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      ESTORE(NVAC,IONSUM(NVAC))=ELECN
      IONSUM(NVAC)=IONSUM(NVAC)+1
# MAXIMUM ION CHARGE STATE =28
      if(IONSUM(NVAC):
 > 28) :
       WRITE(6,99) IONSUM(NVAC) 
   99  print(' 3RD GEN ION CHARGE LIMITED TO 28  IONSUM=',I3) 
       STOP
      # endif
      ESTORE(NVAC,IONSUM(NVAC))=ESHK
      ELEFT=ELEFT-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION ANGLE
      R3=DRAND48(RDUM)
      THET=numpy.arccos(1.0-2.0*R3)
      R4=DRAND48(RDUM)
      PHI=TWOPI*R4
      DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
      DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
      DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
    2 CALL UPDATE(KGAS,LGAS,ISHELL)
      INIT=2
# CHOOSE FLUORESCENCE OR AUGER TRANSITION
      TSUM=0.0
      DO 10 I=1,17
      TSUM=TSUM+RADR(KGAS,LGAS,ISHELL,I)
      DO 10 J=1,17
      TSUM=TSUM+AUGR(KGAS,LGAS,ISHELL,I,J)
   10 CONTINUE
# NO MORE TRANSITIONS POSSIBLE
      if(TSUM == 0.0):
 RETURN  
# NORMALISE TO 1.0
      DO 11 I=1,17
      RADR(KGAS,LGAS,ISHELL,I)=RADR(KGAS,LGAS,ISHELL,I)/TSUM
      DO 11 J=1,17
      AUGR(KGAS,LGAS,ISHELL,I,J)=AUGR(KGAS,LGAS,ISHELL,I,J)/TSUM
   11 CONTINUE
# CREATE CUMULATIVE SUM ARRAY
      TEMP[1]=RADR(KGAS,LGAS,ISHELL,1)
      DO 12 I=2,17
      TEMP[I]=RADR(KGAS,LGAS,ISHELL,I)+TEMP(I-1)
   12 CONTINUE
      TEMP1[1]=AUGR(KGAS,LGAS,ISHELL,1,1)
      DO 13 I=2,17
      TEMP1[I]=AUGR(KGAS,LGAS,ISHELL,I,1)+TEMP1(I-1)
   13 CONTINUE
      DO 14 J=1,16
      DO 14 I=1,17
      TEMP1(I+(J*17))=AUGR(KGAS,LGAS,ISHELL,I,(J+1))+TEMP1(I+(J*17)-1)
   14 CONTINUE
# FIND FLUORESCENCE OR AUGER TRANSITION
      R1=DRAND48(RDUM)
      DO 16 I=1,17
      if(R1 < TEMP[I]:
) :
# STORE PHOTON ENERGY AND UPDATE NOCC
       ifLSUM(NVAC):
=ifLSUM(NVAC)+1
       EPHOTON(NVAC,ifLSUM(NVAC))=ELEV[ISHELL,IZ[KGAS,LGAS]]-ELEV[I,IZ[KGAS,LGAS]]
       ELEFT=ELEFT-abs(EPHOTON(NVAC,ifLSUM(NVAC)))
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R4=DRAND48(RDUM)
       PHI=TWOPI*R4
       DRX(NVAC,ifLSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRY(NVAC,ifLSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZ[NVAC,ifLSUM(NVAC)]=DCOS(THET)
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
        RETURN    
       # endif
       GO TO 2  
      # endif 
   16 CONTINUE
  116 CONTINUE
      R2=R1-TEMP(17)
      DO 17 J=1,17
      DO 17 I=1,17
      if(R2 < TEMP1(I+((J-1):
*17))) :
# AUGER OR COSTER KRONIG  
# STORE EJECTED ELECTRON AND UPDATE NOCC
       ETEMP=ELEV[ISHELL,IZ[KGAS,LGAS]]-(ELEV[I,IZ[KGAS,LGAS]]+ELEV[I,IZ[KGAS,LGAS]+1])*0.5-(ELEV[J,IZ[KGAS,LGAS]]+ELEV[J,IZ[KGAS,LGAS]+1])*0.5
       if(ETEMP < 0.0):
 :
# DO NOT ALLOW NEGATIVE ENERGY TRANSITIONS
  117   R1=DRAND48(RDUM)
        if(R1 < TEMP(17):
) GO TO 117
        GO TO 116
       # endif
       IONSUM(NVAC)=IONSUM(NVAC)+1
       if(IONSUM(NVAC):
 > 28) :
        WRITE(6,99) IONSUM(NVAC)
        STOP
       # endif
       ESTORE(NVAC,IONSUM(NVAC))=ETEMP
       ELEFT=ELEFT-abs(ETEMP)
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R4=DRAND48(RDUM)
       PHI=TWOPI*R4
       DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
       NOCC(KGAS,LGAS,J)=NOCC(KGAS,LGAS,J)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
        RETURN
       # endif
       GO TO 4 
      # endif
   17 CONTINUE
      WRITE(6,88) 
   88 print(' ERROR IN CASCADE 3') 
      STOP 
      # end
      def CALC4E(NVAC,KGAS,LGAS,ELECEN,ISHELL,L1):
      IMPLICIT #real*8(A-H,O-Z)
      IMPLICIT #integer*8(I-N)
      CHARACTER*6 SCR(17),SCR1(17)
      COMMON/GENCAS/ELEV[17,79],NSDEG(17),AA[17],BB[17],SCR,SCR1
      COMMON/MIXC/PRSH(6,3,17,17),ESH(6,3,17),AUG(6,3,17,17,17),RAD[6,3,17,17],PRSHBT(6,3,17),IZ[6,3],INIOCC(6,3,17),ISHLMX(6,3),AMZ[6,3]
      COMMON/UPD/NOCC(6,3,17),AUGR(6,3,17,17,17),RADR(6,3,17,17)
      COMMON/CALCAS3E/IONSUM0(10),ifLSUM0(10),ESTORE0(10,28),EPHOTON0(10,28),DRXE0(10,28),DRYE0(10,28),DRZE0(10,28),DRX0(10,28),DRY0(10,28),DRZ0(10,28)
      COMMON/CALCAS4E/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      DIMENSION TEMP(17),TEMP1(289)
#
# CALCULATE CASCADE IN GAS KGAS AND MOLECULAR COMPONENT LGAS
# WITH INTIAL ENERGY DEPOSIT ELECEN AND SHELL VACANCY CREATED AT ISHELL
#
      ISTART=IONSUM(NVAC)
      ISTARTF=ifLSUM(NVAC)
      ISHELLST=ISHELL
      API=numpy.arccos(-1.00)
      TWOPI=2.00*API
  100 ELEFT=ELECEN
      ISHELL=ISHELLST
      INIT=1
# SET STARTING ARRAY NOCC EQUAL TO INIOCC
      DO 1 I=1,17
      NOCC(KGAS,LGAS,I)=INIOCC(KGAS,LGAS,I)
    1 CONTINUE
      IONSUM(NVAC)=ISTART+1
      ifLSUM(NVAC):
=ISTARTF
# STORE PHOTOELECTRON ENERGY AND ANGLE
      ESTORE(NVAC,IONSUM(NVAC))=ELECEN-ELEV[ISHELL,IZ[KGAS,LGAS]]
      ELECN=ESTORE(NVAC,IONSUM(NVAC))
      ELEFT=ELEFT-ELECN
      NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)-1  
# USE PHOTOELECTRON ANGULAR DISTRIBUTION
      APE=AA[ISHELL]
      BPE=BB[ISHELL]
      CALL ANGGEN(APE,BPE,THET)
      if(THET < 0.0):
 THET=THET+API
      R3=DRAND48(RDUM)
      PHI=TWOPI*R3
      CALL DRCOS(DRX0(NVAC,L1),DRY0(NVAC,L1),DRZ0(NVAC,L1),THET,PHI,DRXX,DRYY,DRZZ)
      DRXE(NVAC,IONSUM(NVAC))=DRXX
      DRYE(NVAC,IONSUM(NVAC))=DRYY
      DRZE(NVAC,IONSUM(NVAC))=DRZZ
# LOOP AROUND CASCADE
    4 CONTINUE
# CHECK FOR ELECTRON SHAKEOFF
      IDUM=1
      if(INIT > 1):
 ELECN=ESTORE(NVAC,IONSUM(NVAC))
      INSUM=IONSUM(NVAC)
      CALL SHAKE(ISHELL,ELECN,KGAS,LGAS,ESHK,IDUM,INSUM,JVAC)
#  CALCULATE ENERGY OF ELECTRON
      if(JVAC == 0):
 GO TO 2
#  ELECTRON + SHAKEOFF
      ELECN=ELECN-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      ESTORE(NVAC,IONSUM(NVAC))=ELECN
      IONSUM(NVAC)=IONSUM(NVAC)+1
# MAXIMUM ION CHARGE STATE =28
      if(IONSUM(NVAC):
 > 28) :
       WRITE(6,99) IONSUM(NVAC)
   99  print(' 4TH GEN ION CHARGE LIMITED TO 28 IONSUM=',I3) 
       STOP
      # endif
      ESTORE(NVAC,IONSUM(NVAC))=ESHK
      ELEFT=ELEFT-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION ANGLE
      R3=DRAND48(RDUM)
      THET=numpy.arccos(1.0-2.0*R3)
      R4=DRAND48(RDUM)
      PHI=TWOPI*R4
      DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
      DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
      DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
    2 CALL UPDATE(KGAS,LGAS,ISHELL)
      INIT=2
# CHOOSE FLUORESCENCE OR AUGER TRANSITION
      TSUM=0.0
      DO 10 I=1,17
      TSUM=TSUM+RADR(KGAS,LGAS,ISHELL,I)
      DO 10 J=1,17
      TSUM=TSUM+AUGR(KGAS,LGAS,ISHELL,I,J)
   10 CONTINUE
# NO MORE TRANSITIONS POSSIBLE
      if(TSUM == 0.0):
 RETURN  
# NORMALISE TO 1.0
      DO 11 I=1,17
      RADR(KGAS,LGAS,ISHELL,I)=RADR(KGAS,LGAS,ISHELL,I)/TSUM
      DO 11 J=1,17
      AUGR(KGAS,LGAS,ISHELL,I,J)=AUGR(KGAS,LGAS,ISHELL,I,J)/TSUM
   11 CONTINUE
# CREATE CUMULATIVE SUM ARRAY
      TEMP[1]=RADR(KGAS,LGAS,ISHELL,1)
      DO 12 I=2,17
      TEMP[I]=RADR(KGAS,LGAS,ISHELL,I)+TEMP(I-1)
   12 CONTINUE
      TEMP1[1]=AUGR(KGAS,LGAS,ISHELL,1,1)
      DO 13 I=2,17
      TEMP1[I]=AUGR(KGAS,LGAS,ISHELL,I,1)+TEMP1(I-1)
   13 CONTINUE
      DO 14 J=1,16
      DO 14 I=1,17
      TEMP1(I+(J*17))=AUGR(KGAS,LGAS,ISHELL,I,(J+1))+TEMP1(I+(J*17)-1)
   14 CONTINUE
# FIND FLUORESCENCE OR AUGER TRANSITION
      R1=DRAND48(RDUM)
      DO 16 I=1,17
      if(R1 < TEMP[I]:
) :
# STORE PHOTON ENERGY AND UPDATE NOCC
       ifLSUM(NVAC):
=ifLSUM(NVAC)+1
       EPHOTON(NVAC,ifLSUM(NVAC))=ELEV[ISHELL,IZ[KGAS,LGAS]]-ELEV[I,IZ[KGAS,LGAS]]
       ELEFT=ELEFT-abs(EPHOTON(NVAC,ifLSUM(NVAC)))
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R4=DRAND48(RDUM)
       PHI=TWOPI*R4
       DRX(NVAC,ifLSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRY(NVAC,ifLSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZ[NVAC,ifLSUM(NVAC)]=DCOS(THET)
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
        RETURN    
       # endif
       GO TO 2  
      # endif 
   16 CONTINUE
  116 CONTINUE
      R2=R1-TEMP(17)
      DO 17 J=1,17
      DO 17 I=1,17
      if(R2 < TEMP1(I+((J-1):
*17))) :
# AUGER OR COSTER KRONIG  
# STORE EJECTED ELECTRON AND UPDATE NOCC
       ETEMP=ELEV[ISHELL,IZ[KGAS,LGAS]]-(ELEV[I,IZ[KGAS,LGAS]]+ELEV[I,IZ[KGAS,LGAS]+1])*0.5-(ELEV[J,IZ[KGAS,LGAS]]+ELEV[J,IZ[KGAS,LGAS]+1])*0.5
       if(ETEMP < 0.0):
 :
# DO NOT ALLOW NEGATIVE ENERGY TRANSITIONS
  117   R1=DRAND48(RDUM)
        if(R1 < TEMP(17):
) GO TO 117
        GO TO 116
       # endif
       IONSUM(NVAC)=IONSUM(NVAC)+1
       if(IONSUM(NVAC):
 > 28) :
        WRITE(6,99) IONSUM(NVAC)
        STOP
       # endif
       ESTORE(NVAC,IONSUM(NVAC))=ETEMP
       ELEFT=ELEFT-abs(ETEMP)
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R4=DRAND48(RDUM)
       PHI=TWOPI*R4
       DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
       NOCC(KGAS,LGAS,J)=NOCC(KGAS,LGAS,J)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
        RETURN
       # endif
       GO TO 4 
      # endif
   17 CONTINUE
      WRITE(6,88) 
   88 print(' ERROR IN CASCADE 4') 
      STOP 
      # end
      def CALC5E(NVAC,KGAS,LGAS,ELECEN,ISHELL,L1):
      IMPLICIT #real*8(A-H,O-Z)
      IMPLICIT #integer*8(I-N)
      CHARACTER*6 SCR(17),SCR1(17)
      COMMON/GENCAS/ELEV[17,79],NSDEG(17),AA[17],BB[17],SCR,SCR1
      COMMON/MIXC/PRSH(6,3,17,17),ESH(6,3,17),AUG(6,3,17,17,17),RAD[6,3,17,17],PRSHBT(6,3,17),IZ[6,3],INIOCC(6,3,17),ISHLMX(6,3),AMZ[6,3]
      COMMON/UPD/NOCC(6,3,17),AUGR(6,3,17,17,17),RADR(6,3,17,17)
      COMMON/CALCAS4E/IONSUM0(10),ifLSUM0(10),ESTORE0(10,28),EPHOTON0(10,28),DRXE0(10,28),DRYE0(10,28),DRZE0(10,28),DRX0(10,28),DRY0(10,28),DRZ0(10,28)
      COMMON/CALCAS5E/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      DIMENSION TEMP(17),TEMP1(289)
#
# CALCULATE CASCADE IN GAS KGAS AND MOLECULAR COMPONENT LGAS
# WITH INTIAL ENERGY DEPOSIT ELECEN AND SHELL VACANCY CREATED AT ISHELL
#
      ISTART=IONSUM(NVAC)
      ISTARTF=ifLSUM(NVAC)
      ISHELLST=ISHELL
      API=numpy.arccos(-1.00)
      TWOPI=2.00*API
  100 ELEFT=ELECEN
      ISHELL=ISHELLST
      INIT=1
# SET STARTING ARRAY NOCC EQUAL TO INIOCC
      DO 1 I=1,17
      NOCC(KGAS,LGAS,I)=INIOCC(KGAS,LGAS,I)
    1 CONTINUE
      IONSUM(NVAC)=ISTART+1
      ifLSUM(NVAC):
=ISTARTF
      ESTORE(NVAC,IONSUM(NVAC))=ELECEN-ELEV[ISHELL,IZ[KGAS,LGAS]]
      ELECN=ESTORE(NVAC,IONSUM(NVAC))
      ELEFT=ELEFT-ELECN
      NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)-1  
# USE PHOTOELECTRON ANGULAR DISTRIBUTION
      APE=AA[ISHELL]
      BPE=BB[ISHELL]
      CALL ANGGEN(APE,BPE,THET)
      if(THET < 0.0):
 THET=THET+API
      R3=DRAND48(RDUM)
      PHI=TWOPI*R3
      CALL DRCOS(DRX0(NVAC,L1),DRY0(NVAC,L1),DRZ0(NVAC,L1),THET,PHI,DRXX,DRYY,DRZZ)
      DRXE(NVAC,IONSUM(NVAC))=DRXX
      DRYE(NVAC,IONSUM(NVAC))=DRYY
      DRZE(NVAC,IONSUM(NVAC))=DRZZ
# LOOP AROUND CASCADE
    4 CONTINUE
# CHECK FOR ELECTRON SHAKEOFF
      IDUM=1
      if(INIT > 1):
 ELECN=ESTORE(NVAC,IONSUM(NVAC))
      INSUM=IONSUM(NVAC)
      CALL SHAKE(ISHELL,ELECN,KGAS,LGAS,ESHK,IDUM,INSUM,JVAC)
#  CALCULATE ENERGY OF ELECTRON
      if(JVAC == 0):
 GO TO 2
#  ELECTRON + SHAKEOFF
      ELECN=ELECN-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      ESTORE(NVAC,IONSUM(NVAC))=ELECN
      IONSUM(NVAC)=IONSUM(NVAC)+1
# MAXIMUM ION CHARGE STATE =28
      if(IONSUM(NVAC):
 > 28) :
       WRITE(6,99) IONSUM(NVAC)
   99  print(' 5TH GEN ION CHARGE LIMITED TO 28  IONSUM=',I3)
       STOP 
      # endif
      ESTORE(NVAC,IONSUM(NVAC))=ESHK
      ELEFT=ELEFT-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION ANGLE
      R3=DRAND48(RDUM)
      THET=numpy.arccos(1.0-2.0*R3)
      R4=DRAND48(RDUM)
      PHI=TWOPI*R4
      DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
      DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
      DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
    2 CALL UPDATE(KGAS,LGAS,ISHELL)
      INIT=2
# CHOOSE FLUORESCENCE OR AUGER TRANSITION
      TSUM=0.0
      DO 10 I=1,17
      TSUM=TSUM+RADR(KGAS,LGAS,ISHELL,I)
      DO 10 J=1,17
      TSUM=TSUM+AUGR(KGAS,LGAS,ISHELL,I,J)
   10 CONTINUE
# NO MORE TRANSITIONS POSSIBLE
      if(TSUM == 0.0):
 RETURN  
# NORMALISE TO 1.0
      DO 11 I=1,17
      RADR(KGAS,LGAS,ISHELL,I)=RADR(KGAS,LGAS,ISHELL,I)/TSUM
      DO 11 J=1,17
      AUGR(KGAS,LGAS,ISHELL,I,J)=AUGR(KGAS,LGAS,ISHELL,I,J)/TSUM
   11 CONTINUE
# CREATE CUMULATIVE SUM ARRAY
      TEMP[1]=RADR(KGAS,LGAS,ISHELL,1)
      DO 12 I=2,17
      TEMP[I]=RADR(KGAS,LGAS,ISHELL,I)+TEMP(I-1)
   12 CONTINUE
      TEMP1[1]=AUGR(KGAS,LGAS,ISHELL,1,1)
      DO 13 I=2,17
      TEMP1[I]=AUGR(KGAS,LGAS,ISHELL,I,1)+TEMP1(I-1)
   13 CONTINUE
      DO 14 J=1,16
      DO 14 I=1,17
      TEMP1(I+(J*17))=AUGR(KGAS,LGAS,ISHELL,I,(J+1))+TEMP1(I+(J*17)-1)
   14 CONTINUE 
# FIND FLUORESCENCE OR AUGER TRANSITION
      R1=DRAND48(RDUM)
      DO 16 I=1,17
      if(R1 < TEMP[I]:
) :
# STORE PHOTON ENERGY AND UPDATE NOCC
       ifLSUM(NVAC):
=ifLSUM(NVAC)+1
       EPHOTON(NVAC,ifLSUM(NVAC))=ELEV[ISHELL,IZ[KGAS,LGAS]]-ELEV[I,IZ[KGAS,LGAS]]
       ELEFT=ELEFT-abs(EPHOTON(NVAC,ifLSUM(NVAC)))
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R4=DRAND48(RDUM)
       PHI=TWOPI*R4
       DRX(NVAC,ifLSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRY(NVAC,ifLSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZ[NVAC,ifLSUM(NVAC)]=DCOS(THET)
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
        RETURN    
       # endif
       GO TO 2  
      # endif 
   16 CONTINUE
  116 CONTINUE
      R2=R1-TEMP(17)
      DO 17 J=1,17
      DO 17 I=1,17
      if(R2 < TEMP1(I+((J-1):
*17))) :
# AUGER OR COSTER KRONIG  
# STORE EJECTED ELECTRON AND UPDATE NOCC
       ETEMP=ELEV[ISHELL,IZ[KGAS,LGAS]]-(ELEV[I,IZ[KGAS,LGAS]]+ELEV[I,IZ[KGAS,LGAS]+1])*0.5-(ELEV[J,IZ[KGAS,LGAS]]+ELEV[J,IZ[KGAS,LGAS]+1])*0.5
       if(ETEMP < 0.0):
 :
# DO NOT ALLOW NEGATIVE ENERGY TRANSITIONS
  117   R1=DRAND48(RDUM)
        if(R1 < TEMP(17):
) GO TO 117
        GO TO 116
       # endif
       IONSUM(NVAC)=IONSUM(NVAC)+1
       if(IONSUM(NVAC):
 > 28) :
        WRITE(6,99) IONSUM(NVAC)
        STOP
       # endif
       ESTORE(NVAC,IONSUM(NVAC))=ETEMP
       ELEFT=ELEFT-abs(ETEMP)
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R4=DRAND48(RDUM)
       PHI=TWOPI*R4
       DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
       NOCC(KGAS,LGAS,J)=NOCC(KGAS,LGAS,J)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
        RETURN
       # endif
       GO TO 4 
      # endif
   17 CONTINUE
      WRITE(6,88) 
   88 print(' ERROR IN CASCADE 5') 
      STOP 
      # end
      def CASSTOREE(NVAC,X,Y,Z,T):
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/CALCASE/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      COMMON/RESE/IONSM(10),ifLSM(10),ESTOR(10,28),EPHOT(10,28),X0(10,28),Y0(10,28),Z0(10,28),DRX0(10,28),DRY0(10,28),DRZ0(10,28),T0(10,28)
      COMMON/GEN101/X01(10),Y01(10),Z01(10),T01(10)
# STORE EVENT DATA 
      IONSM(NVAC)=IONSUM(NVAC)
      ifLSM(NVAC):
=ifLSUM(NVAC)
      if(IONSUM(NVAC):
 > 28 or ifLSUM(NVAC) > 28) :
       WRITE(6,888) IONSUM(NVAC),ifLSUM(NVAC)
  888  print(' IONSUM OR ifLSUM GT.28 IONSUM=',I3,'  ifSUM=',I3,' NVAC=',I3)
       STOP
      # endif
      DO 11 J=1,ifLSUM(NVAC)
   11 EPHOT(NVAC,J)=EPHOTON(NVAC,J)
      DO 1 J=1,IONSUM(NVAC)
      ESTOR(NVAC,J)=ESTORE(NVAC,J)
      X0(NVAC,J)=X
      Y0(NVAC,J)=Y
      Z0(NVAC,J)=Z
      T0(NVAC,J)=T
      X01(NVAC)=X0(NVAC,J)
      Y01(NVAC)=Y0(NVAC,J)
      Z01(NVAC)=Z0(NVAC,J)
      T01(NVAC)=T0(NVAC,J)
      DRX0(NVAC,J)=DRXE(NVAC,J)
      DRY0(NVAC,J)=DRYE(NVAC,J)
      DRZ0(NVAC,J)=DRZE(NVAC,J)
    1 CONTINUE
      RETURN
      # end
      def CSSTF1E(NVAC,L1,DIST1):           
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/CALCASE/IONSUM0(10),ifLSUM0(10),ESTORE0(10,28),EPHOTON0(10,28),DRXE0(10,28),DRYE0(10,28),DRZE0(10,28),DRX0(10,28),DRY0(10,28),DRZ0(10,28)
      COMMON/CALCAS1E/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      COMMON/GENE1/IONF1(10),ESTF1(10,28),X1(10,28),Y1(10,28),Z1(10,28),DRXS(10,28),DRYS(10,28),DRZS(10,28),T1(10,28)
      COMMON/GEN111/X11(10,28),Y11(10,28),Z11(10,28),T11(10,28)
      COMMON/GEN101/X01(10),Y01(10),Z01(10),T01(10)
      if(L1 == 0):
 :
# ZERO COUNTER
       IONF1(NVAC)=0
       DO 11 K=1,28
   11  ESTF1(NVAC,K)=0.0
       RETURN
      # endif
# STORE EVENT DATA FOR FIRST GENERATION FLUORESCENCE
      if(IONSUM(NVAC):
 > 28) :
       WRITE(6,99) IONSUM(NVAC),NVAC
  99   print(' WARNING FIRST GENERATION CONVERTED FLUORESCENCE HAS AN EVENT WITH',I3,' IONS.',/,' COMPTON BRANCH NO=',I3,/)
       STOP
      # endif
# VEL IN METRES/PICOSECOND
      VV=2.99792458D-4
      IONF1(NVAC)=IONSUM(NVAC)
      DO 1 J=1,IONSUM(NVAC)
      ESTF1(NVAC,J)=ESTORE(NVAC,J)
      X1(NVAC,J)=X01(NVAC)+DIST1*DRX0(NVAC,L1)
      Y1(NVAC,J)=Y01(NVAC)+DIST1*DRY0(NVAC,L1)
      Z1(NVAC,J)=Z01(NVAC)+DIST1*DRZ0(NVAC,L1)
      T1(NVAC,J)=T01(NVAC)+DIST1/VV
      X11(NVAC,L1)=X1(NVAC,J)
      Y11(NVAC,L1)=Y1(NVAC,J)
      Z11(NVAC,L1)=Z1(NVAC,J)
      T11(NVAC,L1)=T1(NVAC,J)
      DRXS(NVAC,J)=DRXE(NVAC,J)
      DRYS(NVAC,J)=DRYE(NVAC,J)
      DRZS(NVAC,J)=DRZE(NVAC,J)
    1 CONTINUE
      RETURN
      # end
      def CSSTF2E(NVAC,L1,DIST1):               
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/CALCAS1E/IONSUM0(10),ifLSUM0(10),ESTORE0(10,28),EPHOTON0(10,28),DRXE0(10,28),DRYE0(10,28),DRZE0(10,28),DRX0(10,28),DRY0(10,28),DRZ0(10,28)
      COMMON/CALCAS2E/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      COMMON/GENE2/IONF2(10),ESTF2(10,28),X2(10,28),Y2(10,28),Z2(10,28),DRXS(10,28),DRYS(10,28),DRZS(10,28),T2(10,28)
      COMMON/GEN121/X21(10,28),Y21(10,28),Z21(10,28),T21(10,28)
      COMMON/GEN111/X11(10,28),Y11(10,28),Z11(10,28),T11(10,28)
      if(L1 == 0):
 :
# ZERO COUNTER
       IONF2(NVAC)=0
       DO 11 K=1,28
   11  ESTF2(NVAC,K)=0.0
       RETURN
      # endif
# STORE EVENT DATA FOR SECOND GENERATION FLUORESCENCE
      if(IONSUM(NVAC):
 > 28) :
       WRITE(6,99) IONSUM(NVAC),NVAC
  99   print(' WARNING SECOND GENERATION CONVERTED FLUORESCENCE HAS AN  EVENT WITH',I3,' IONS.',/,' COMPTON BRANCH NO=',I3,/)
       STOP
      # endif
# VEL IN METRES/PICOSECOND
      VV=2.99792458D-4
      IONF2(NVAC)=IONSUM(NVAC)
      DO 1 J=1,IONSUM(NVAC)
      ESTF2(NVAC,J)=ESTORE(NVAC,J)
      X2(NVAC,J)=X11(NVAC,L1)+DIST1*DRX0(NVAC,L1)
      Y2(NVAC,J)=Y11(NVAC,L1)+DIST1*DRY0(NVAC,L1)
      Z2(NVAC,J)=Z11(NVAC,L1)+DIST1*DRZ0(NVAC,L1)
      T2(NVAC,J)=T11(NVAC,L1)+DIST1/VV
      X21(NVAC,L1)=X2(NVAC,J)
      Y21(NVAC,L1)=Y2(NVAC,J)
      Z21(NVAC,L1)=Z2(NVAC,J)
      T21(NVAC,L1)=T2(NVAC,J)
      DRXS(NVAC,J)=DRXE(NVAC,J)
      DRYS(NVAC,J)=DRYE(NVAC,J)
      DRZS(NVAC,J)=DRZE(NVAC,J)
    1 CONTINUE
      RETURN
      # end
      def CSSTF3E(NVAC,L1,DIST1):
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/CALCAS2E/IONSUM0(10),ifLSUM0(10),ESTORE0(10,28),EPHOTON0(10,28),DRXE0(10,28),DRYE0(10,28),DRZE0(10,28),DRX0(10,28),DRY0(10,28),DRZ0(10,28)
      COMMON/CALCAS3E/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      COMMON/GENE3/IONF3(10),ESTF3(10,15),X3(10,15),Y3(10,15),Z3(10,15),DRXS(10,15),DRYS(10,15),DRZS(10,15),T3(10,15)
      COMMON/GEN131/X31(10,28),Y31(10,28),Z31(10,28),T31(10,28)
      COMMON/GEN121/X21(10,28),Y21(10,28),Z21(10,28),T21(10,28)
#
      if(L1 == 0):
 :
# ZERO COUNTER
       IONF3(NVAC)=0
       DO 11 K=1,15
   11  ESTF3(NVAC,K)=0.0
       RETURN
      # endif
# STORE EVENT DATA FOR THIRD GENERATION FLUORESCENCE
      if(IONSUM(NVAC):
 > 15) :
       WRITE(6,99) IONSUM(NVAC),NVAC
  99   print(' WARNING THIRD GENERATION CONVERTED FLUORESCENCE HAS AN  EVENT WITH',I3,' IONS.',/,' COMPTON BRANCH NO=',I3,/)
       STOP
      # endif
# VEL IN METRES/PICOSECOND
      VV=2.99792458D-4
      IONF3(NVAC)=IONSUM(NVAC)
      DO 1 J=1,IONSUM(NVAC)
      ESTF3(NVAC,J)=ESTORE(NVAC,J)
      X3(NVAC,J)=X21(NVAC,L1)+DIST1*DRX0(NVAC,L1)
      Y3(NVAC,J)=Y21(NVAC,L1)+DIST1*DRY0(NVAC,L1)
      Z3(NVAC,J)=Z21(NVAC,L1)+DIST1*DRZ0(NVAC,L1)
      T3(NVAC,J)=T21(NVAC,L1)+DIST1/VV
      X31(NVAC,L1)=X3(NVAC,J)
      Y31(NVAC,L1)=Y3(NVAC,J)
      Z31(NVAC,L1)=Z3(NVAC,J)
      T31(NVAC,L1)=T3(NVAC,J)
      DRXS(NVAC,J)=DRXE(NVAC,J)
      DRYS(NVAC,J)=DRYE(NVAC,J)
      DRZS(NVAC,J)=DRZE(NVAC,J)
    1 CONTINUE
      RETURN
      # end
      def CSSTF4E(NVAC,L1,DIST1):
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/CALCAS3E/IONSUM0(10),ifLSUM0(10),ESTORE0(10,28),EPHOTON0(10,28),DRXE0(10,28),DRYE0(10,28),DRZE0(10,28),DRX0(10,28),DRY0(10,28),DRZ0(10,28)
      COMMON/CALCAS4E/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      COMMON/GENE4/IONF4(10),ESTF4(10,12),X4(10,12),Y4(10,12),Z4(10,12),DRXS(10,12),DRYS(10,12),DRZS(10,12),T4(10,12)
      COMMON/GEN131/X31(10,28),Y31(10,28),Z31(10,28),T31(10,28)
      COMMON/GEN141/X41(10,28),Y41(10,28),Z41(10,28),T41(10,28)
#
      if(L1 == 0):
 :
# ZERO COUNTER
       IONF4(NVAC)=0
       DO 11 K=1,12
   11  ESTF4(NVAC,K)=0.0
       RETURN
      # endif
# STORE EVENT DATA FOR FOURTH GENERATION FLUORESCENCE
      if(IONSUM(NVAC):
 > 12) :
       WRITE(6,99) IONSUM(NVAC),NVAC
  99   print(' WARNING FOURTH GENERATION CONVERTED FLUORESCENCE HAS AN  EVENT WITH',I3,' IONS.',/,' COMPTON BRANCH NO=',I3,/)
       STOP
      # endif
# VEL IN METRES/PICOSECOND
      VV=2.99792458D-4
      IONF4(NVAC)=IONSUM(NVAC)
      DO 1 J=1,IONSUM(NVAC)
      ESTF4(NVAC,J)=ESTORE(NVAC,J)
      X4(NVAC,J)=X31(NVAC,L1)+DIST1*DRX0(NVAC,L1)
      Y4(NVAC,J)=Y31(NVAC,L1)+DIST1*DRY0(NVAC,L1)
      Z4(NVAC,J)=Z31(NVAC,L1)+DIST1*DRZ0(NVAC,L1)
      T4(NVAC,J)=T31(NVAC,L1)+DIST1/VV
      X41(NVAC,L1)=X4(NVAC,J)
      Y41(NVAC,L1)=Y4(NVAC,J)
      Z41(NVAC,L1)=Z4(NVAC,J)
      T41(NVAC,L1)=T4(NVAC,J)
      DRXS(NVAC,J)=DRXE(NVAC,J)
      DRYS(NVAC,J)=DRYE(NVAC,J)
      DRZS(NVAC,J)=DRZE(NVAC,J)
    1 CONTINUE
      RETURN
      # end
      def CSSTF5E(NVAC,L1,DIST1):
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/CALCAS4E/IONSUM0(10),ifLSUM0(10),ESTORE0(10,28),EPHOTON0(10,28),DRXE0(10,28),DRYE0(10,28),DRZE0(10,28),DRX0(10,28),DRY0(10,28),DRZ0(10,28)
      COMMON/CALCAS5E/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      COMMON/GENE5/IONF5(10),ESTF5(10,5),X5(10,5),Y5(10,5),Z5(10,5),DRXS(10,5),DRYS(10,5),DRZS(10,5),T5(10,5)
      COMMON/GEN141/X41(10,28),Y41(10,28),Z41(10,28),T41(10,28)
      COMMON/GEN151/X51(10,28),Y51(10,28),Z51(10,28),T51(10,28)
      if(L1 == 0):
 :
# ZERO COUNTER
       IONF5(NVAC)=0
       DO 11 K=1,5
   11  ESTF5(NVAC,K)=0.0
       RETURN
      # endif
# STORE EVENT DATA FOR FIFTH GENERATION FLUORESCENCE
      if(IONSUM(NVAC):
 > 5) :
       WRITE(6,99) IONSUM(NVAC),NVAC
  99   print(' WARNING FifTH GENERATION CONVERTED FLUORESCENCE HAS AN  EVENT WITH',I3,' IONS.',/,' COMPTON BRANCH NO=',I3,/)
       STOP
      # endif
# VEL IN METRES/PICOSECOND
      VV=2.99792458D-4
      IONF5(NVAC)=IONSUM(NVAC)
      DO 1 J=1,IONSUM(NVAC)
      ESTF5(NVAC,J)=ESTORE(NVAC,J)
      X5(NVAC,J)=X41(NVAC,L1)+DIST1*DRX0(NVAC,L1)
      Y5(NVAC,J)=Y41(NVAC,L1)+DIST1*DRY0(NVAC,L1)
      Z5(NVAC,J)=Z41(NVAC,L1)+DIST1*DRZ0(NVAC,L1)
      T5(NVAC,J)=T41(NVAC,L1)+DIST1/VV
      X51(NVAC,L1)=X5(NVAC,J)
      Y51(NVAC,L1)=Y5(NVAC,J)
      Z51(NVAC,L1)=Z5(NVAC,J)
      T51(NVAC,L1)=T5(NVAC,J)
      DRXS(NVAC,J)=DRXE(NVAC,J)
      DRYS(NVAC,J)=DRYE(NVAC,J)
      DRZS(NVAC,J)=DRZE(NVAC,J)
    1 CONTINUE
      RETURN
      # end
      def COMPRESSE(ETOT):
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/RESE/IONSM(10),ifLSM(10),ESTOR(10,28),EPHOT(10,28),X(10,28),Y(10,28),Z[10,28],DRX0(10,28),DRY0(10,28),DRZ0(10,28),T00(10,28)
      COMMON/GENE1/IONF1(10),ESTF1(10,28),X1(10,28),Y1(10,28),Z1(10,28),DRX1(10,28),DRY1(10,28),DRZ1(10,28),T01(10,28)
      COMMON/GENE2/IONF2(10),ESTF2(10,28),X2(10,28),Y2(10,28),Z2(10,28),DRX2(10,28),DRY2(10,28),DRZ2(10,28),T02(10,28)
      COMMON/GENE3/IONF3(10),ESTF3(10,15),X3(10,15),Y3(10,15),Z3(10,15),DRX3(10,15),DRY3(10,15),DRZ3(10,15),T03(10,15)
      COMMON/GENE4/IONF4(10),ESTF4(10,12),X4(10,12),Y4(10,12),Z4(10,12),DRX4(10,12),DRY4(10,12),DRZ4(10,12),T04(10,12)
      COMMON/GENE5/IONF5(10),ESTF5(10,5),X5(10,5),Y5(10,5),Z5(10,5),DRX5(10,5),DRY5(10,5),DRZ5(10,5),T05(10,5)   
      COMMON/INTHRMB2/NPTPE,ET(10,50),XT(10,50),YT(10,50),ZT(10,50),TT(10,50),DRX(10,50),DRY(10,50),DRZ[10,50],NJFLR(10,50),IEVENTL(10) 
      COMMON/PPSTRB/NPTP,EPPST(2),XPP(2),YPP(2),ZPP(2),DRXPP(2),DRYPP(2),DRZPP(2)
      DIMENSION ESTOT(10) 
      NPTPE=1
      IVAC=1
#      
#  STORE CASCADE DATA INTO COMMON/INTHRMB2/
      DO 12 K=1,IVAC
      ESTOT[K]=0.0
      ITOT=IONSM[K]+IONF1[K]+IONF2[K]+IONF3[K]+IONF4[K]+IONF5[K]
      IEVENTL[K]=ITOT
      if(ITOT > 50):
 : 
       WRITE(6,811) J
  811 print(' NEVENT=',I5,' ITOT OVERFLOW IN OUTPUTBC')
       STOP       
      # endif
# STORE EVENT FOR INPUT TO THERMALISATION
      DO 6 M=1,IONSM[K]
      ET(K,M)=ESTOR(K,M)
      XT(K,M)=X(K,M)
      YT(K,M)=Y(K,M)
      ZT(K,M)=Z[K,M]
      TT(K,M)=T00(K,M)
      DRX(K,M)=DRX0(K,M)
      DRY(K,M)=DRY0(K,M)
      DRZ[K,M]=DRZ0(K,M)
      ESTOT[K]=ESTOT[K]+ESTOR(K,M)
      NJFLR(K,M)=0
    6 CONTINUE
      if(IONF1[K]:
 == 0) GO TO 17
      DO 7 M=1,IONF1[K]
      M1=M+IONSM[K]
      ET(K,M1)=ESTF1(K,M)   
      XT(K,M1)=X1(K,M)
      YT(K,M1)=Y1(K,M)
      ZT(K,M1)=Z1(K,M)
      TT(K,M)=T01(K,M)
      DRX(K,M1)=DRX1(K,M)
      DRY(K,M1)=DRY1(K,M)
      DRZ[K,M1]=DRZ1(K,M)
      ESTOT[K]=ESTOT[K]+ESTF1(K,M)
      NJFLR(K,M1)=1
    7 CONTINUE
   17 if(IONF2[K] == 0) GO TO 18
      DO 8 M=1,IONF2[K]
      M2=M+IONSM[K]+IONF1[K]
      ET(K,M2)=ESTF2(K,M)
      XT(K,M2)=X2(K,M)
      YT(K,M2)=Y2(K,M)
      ZT(K,M2)=Z2(K,M)
      TT(K,M2)=T02(K,M)
      DRX(K,M2)=DRX2(K,M)
      DRY(K,M2)=DRY2(K,M)
      DRZ[K,M2]=DRZ2(K,M)
      ESTOT[K]=ESTOT[K]+ESTF2(K,M)
      NJFLR(K,M2)=2
    8 CONTINUE
   18 if(IONF3[K] == 0) GO TO 19
      DO 9 M=1,IONF3[K]
      M3=M+IONSM[K]+IONF1[K]+IONF2[K]
      ET(K,M3)=ESTF3(K,M)
      XT(K,M3)=X3(K,M)
      YT(K,M3)=Y3(K,M)
      ZT(K,M3)=Z3(K,M)
      TT(K,M3)=T03(K,M)
      DRX(K,M3)=DRX3(K,M)
      DRY(K,M3)=DRY3(K,M)
      DRZ[K,M3]=DRZ3(K,M)
      ESTOT[K]=ESTOT[K]+ESTF3(K,M)
      NJFLR(K,M3)=3
    9 CONTINUE
   19 if(IONF4[K] == 0) GO TO 20
      DO 10 M=1,IONF4[K]
      M4=M+IONSM[K]+IONF1[K]+IONF2[K]+IONF3[K]
      ET(K,M4)=ESTF4(K,M)
      XT(K,M4)=X4(K,M)
      YT(K,M4)=Y4(K,M)
      ZT(K,M4)=Z4(K,M)
      TT(K,M4)=T04(K,M)
      DRX(K,M4)=DRX4(K,M)
      DRY(K,M4)=DRY4(K,M)
      DRZ[K,M4]=DRZ4(K,M)
      ESTOT[K]=ESTOT[K]+ESTF4(K,M)
      NJFLR(K,M4)=4
   10 CONTINUE
   20 if(IONF5[K] == 0) GO TO 21
      DO 11 M=1,IONF5[K]
      M5=M+IONSM[K]+IONF1[K]+IONF2[K]+IONF3[K]+IONF4[K]
      ET(K,M5)=ESTF5(K,M)
      XT(K,M5)=X5(K,M)
      YT(K,M5)=Y5(K,M)
      ZT(K,M5)=Z5(K,M)
      TT(K,M5)=T05(K,M)
      DRX(K,M5)=DRX5(K,M)
      DRY(K,M5)=DRY5(K,M)
      DRZ[K,M5]=DRZ5(K,M)
      ESTOT[K]=ESTOT[K]+ESTF5(K,M)
      NJFLR(K,M5)=5
   11 CONTINUE
   21 CONTINUE
# PRINT SOME RAW DATA
#     IF(J <= 525) :
#     EDUM=0.0
#     DO 666 JJ=1,IEVENTL[J]
# 666 EDUM=EDUM+ET(JJ,J)
#     WRITE(6,232) J
#     WRITE(6,2321) EDUM
#2321 print(' TOT ENERGY=','%.3f' %)
# 232 print(' DATA FOR EVENT=',I3)
#     DO 234 M=1,IEVENTL[J]
#     WRITE(6,233) ET(M,J),XT(M,J),YT(M,J),ZT(M,J),TH(M,J),PH(M,J)
# 233 print(' E=','%.3f' %,' X=','%.3f' %,' Y=','%.3f' %,' Z=','%.3f' %,' THETA=',
#    /'%.3f' %,' PHI=','%.3f' %)
# 234 CONTINUE
#     # endIF
      EDUM=0.0
   12 CONTINUE
      DO 30 K=1,IVAC
      EDUM=EDUM+ESTOT[K]
   30 CONTINUE
      ETOT=EDUM
      if(EDUM > (EFINAL+0.1):
) :
       WRITE(6,999) EDUM
  999 print(' ETOT =',D12.5,'EV.    BAD EVENT IN COMPRESSE',/)
       IBAD=1
       STOP
      # endif
      RETURN     
      # end         
      def IONSPLIT(I,E,EI,ESEC):
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/IONMOD/ESPLIT(512,20),IONMODEL(512)
# def CALLS UP TO 5 POSSIBLE MODELS OF ENERGY SPLITTING IN
# IONISATION COLLISIONS 
# CALLS def WITH ARRAY POSITION I , INCIDENT ENERGY E , 
# AND IONISATION ENERGY LOSS EI, : OUTPUTS SECONDARY ENERGY ESEC
      if(IONMODEL[I]:
 == 1) :
       CALL SPLIT1(I,E,EI,ESEC)
      else if(IONMODEL[I] == 2) :
       CALL SPLIT2(I,E,EI,ESEC)
      else if(IONMODEL[I] == 3) :
       CALL SPLIT3(I,E,EI,ESEC)
      else if(IONMODEL[I] == 4) : 
       CALL SPLIT4(I,E,EI,ESEC)
      else if(IONMODEL[I] == 5) :
       CALL SPLIT5(I,E,EI,ESEC) 
      else:
       WRITE(6,99) I,IONMODEL[I]
  99   print(' BAD ENERGY SPLITTING MODEL I=',I6,' IONMDOLE=',I6)
       STOP
      # endif
      RETURN 
      # end  
      def SPLIT1(I,E,EI,ESEC):
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/IONMOD/ESPLIT(512,20),IONMODEL(512)
# MODIFIED OPAL BEATY WITH ENERGY DEP# endANT SPLITTING def
# MODEL ASSUMES CONSTANT SPLITTING def BETWEEN EI AND 10 KEV
# : LOGARTHMIC CHANGE WITH ENERGY UP TO A CONSTANT VALUE AT
# MINIMUM IONISING ,1 MEV , AND ABOVE 
      WPLLOW=ESPLIT(I,1)
      WPLHIGH=ESPLIT(I,2)
      if(E <= 1.D4):
 :
       WPL=WPLLOW
       GO TO 1
      else if(E >= 1.D6) :
       WPL=WPLHIGH
       GO TO 1
      else:
#  LOG INTERPOLATE AT ENERGY E 
       A=(WPLHIGH-WPLLOW)*0.21714724095
       B=-(9.21034037198*WPLHIGH-13.815510558*WPLLOW)*0.21714724095
       WPL=A*math.log(E)+B
      # endif
    1 R1=DRAND48(RDUM)
      ESEC=WPL*TAN(R1*ATAN((E-EI)/(2.0*WPL))) 
      ESEC=WPL*(ESEC/WPL)**0.9524
      RETURN
      # end 
      def SPLIT2(I,E,EI,ESEC):
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/IONMOD/ESPLIT(512,20),IONMODEL(512)
# POSSIBLE ENERGY SPLITTING def
      RETURN
      # end 
      def SPLIT3(I,E,EI,ESEC):
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/IONMOD/ESPLIT(512,20),IONMODEL(512)
# POSSIBLE ENERGY SPLITTING def
      RETURN
      # end 
      def SPLIT4(I,E,EI,ESEC):
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/IONMOD/ESPLIT(512,20),IONMODEL(512)
# POSSIBLE ENERGY SPLITTING def
      RETURN
      # end 
      def SPLIT5(I,E,EI,ESEC):
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/IONMOD/ESPLIT(512,20),IONMODEL(512)
# POSSIBLE ENERGY SPLITTING def
      RETURN
      # end 
      def MONTEFE                                                :
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/INPT1/NDVEC
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,TCFMAX(10),TCFMAX1,RSTART,EFIELD,ETHRM,ECUT,NDELTA,IMIP,IWRITE                    
      COMMON/LARGE/CF(20000,512),EIN(512),TCF(20000),IARRY(512),RGAS(512),IPN(512),WPL(512),IZBR(512),IPLAST,PENFRA[3,512]
      COMMON/LARGEN/CFN(20000,60),TCFN(20000),SCLENUL(60),NPLAST
      COMMON/OUTPT/ICOLL(30),NETOT,NPRIME,TMAX1,TIME(300),NNULL,NITOT,ICOLN(512),ICOLNN(60),NREAL,NEXCTOT 
      COMMON/RLTVY/BET[20]00),GAM(20000),VC,EMS
      COMMON/STTS/XST(150000),YST(150000),ZST(150000),TST(150000),TTIME(150000),NFGF(150000),NFGPP(150000),NFGBR(150000),NELEC,NEGION,EST1,EST2
      COMMON/STEXC/XSTEXC(150000),YSTEXC(150000),ZSTEXC(150000),TSTEXC(150000),NSTEXC
      COMMON/STEXCNUL/XSTN(150000),YSTN(150000),ZSTN(150000),TSTN(150000),IDNUL(150000),NEXCNUL
      COMMON/IONC/DOUBLE(6,20000),CMINIXSC(6),CMINEXSC(6),ECLOSS(6),WPLN(6),ICOUNT,AVPFRAC(3,6) 
      COMMON/IONFL/NC0(512),EC0(512),NG1(512),EG1(512),NG2(512),EG2(512),WKLM(512),DSTFL(512)
      COMMON/IONMOD/ESPLIT(512,20),IONMODEL(512)
      COMMON/ANIS/PSCT(20000,512),ANGCT(20000,512),INDEX(512),NISO
      COMMON/CASRS/ECAS(400),XCAS(400),YCAS(400),ZCAS(400),DRXS(400),DRYS(400),DRZS(400),TT1(400),NFLGF(400),NFLGPP(400),IEVNTL
      COMMON/COMP/LCMP,LCFLG,LRAY,LRFLG,LPAP,LPFLG,LBRM,LBFLG,LPEFLG
      COMMON/BREMG/EBRGAM(10),BRDCOSX(10),BRDCOSY(10),BRDCOSZ[10],BRX(10),BRY(10),BRZ[10],BRT(10),EBRTOT(6),NBREM(6)
      COMMON/CASRSB/ECASB[400],XCASB[400],YCASB[400],ZCASB[400],DRXB[400],DRYB[400],DRZB[400],TTB1(400),NFLGFB[400],NFLGPPB[400],IEVNTLB
      COMMON/CASRSE/ECASE(400),XCASE(400),YCASE(400),ZCASE(400),DRXCE(400),DRYCE(400),DRZCE(400),TCASE(400),NFLGFE(400),NFLGPPE(400),IEVENTE
      COMMON/ECASC/NEGAS(512),LEGAS(512),IESHELL(512),IECASC
      COMMON/IDEXC/NGEXC1,NGEXC2,NGEXC3,NGEXC4,NGEXC5,NGEXC6,IDG1,IDG2,IDG3,IDG4,IDG5,IDG6
      DIMENSION XS(150000),YS(150000),ZS(150000),TS(150000),ES(150000),DCX(150000),DCY(150000),DCZ[150000],NFLGFC(150000),NFLGPPC(150000),NFLGBRMC(150000)
      DIMENSION TEMP(20000)
#     DIMENSION ETEMP(1000)
# ----------------------------------------------------------------------
#      RELATIVISTIC VERSION SEPTEMBER 2013
#      ELECTRIC FIELD ALONG Z AXIS. NO MAGNETIC FIELD. 
#      TRACKS DELTA ELECTRONS AND UPDATES ARRAYS CONTAINING POSITION AND
#      TIME OF THERMALISED ELECTRONS.
#     CALCULATES NUMBER OF PRODUCED ELECTRONS PER PRIMARY AND OTHER
#     HIGHER FANO FACTORS. 
#     RANGE IS ACCURATE ONLY FOR ANISOTROPIC X-SECTIONS              
# ----------------------------------------------------------------------
# VARYING ENERGY STEPS
      if(EFINAL <= 140000.):
 :
        ESTEP1=(EFINAL-16000.0)/float(4000)
      else:
        ESTEP1=20.0
        ESTEP2=(EFINAL-92000.0)/float(4000)
      # endif
      NPRINT=0
      J20000=20000 
      J300=300
      API=numpy.arccos(-1.00)
      SMALL=1.0D-20                                                     
      TMAX1=0.00 
      EMAX=0.00                                                      
      RDUM=RSTART                                                       
      CONST9=CONST3*0.010
      DO 25 I=1,300
   25 TIME[I]=0.00
      DO 26 I=1,30
   26 ICOLL[I]=0
      DO 27 I=1,512
   27 ICOLN[I]=0
      NREAL=0
      NNULL=0
      NETOT=0
      NEXCTOT=0
      NITOT=0
      NMXADD=0
      NTMPFLG=0
      BP=EFIELD*EFIELD*CONST1                                           
      F1=EFIELD*CONST2                                                  
      F2=EFIELD*CONST3                                                  
      F4=2.00*API
      THETA1=THETA
      PHI1=PHI
# CALCULATE MAXIMUM COLLISION FREQUENCY    
      TLIM=0.0 
      DO 111 J=1,20000 
      TEMP[J]=TCFN[J]+TCF[J] 
      if(TLIM < TEMP[J]:
) TLIM=TEMP[J] 
  111 CONTINUE
      NEOVFL=0
      J1=0
# START OF PRIMARY EVENT LOOP 
      DO 210 J11=1,NDELTA
      J1=J1+1
      NPRIME=J1
      NGEXC1=0
      NGEXC2=0
      NGEXC3=0
      NGEXC4=0
      NGEXC5=0
      NGEXC6=0
#     INITIAL DIRECTION COSINES FOR ELECTRON BEAM                    
      DCZ1=DCOS(THETA1)
      DCX1=DSIN(THETA1)*DCOS(PHI1)                                      
      DCY1=DSIN(THETA1)*DSIN(PHI1)
      NFLGFF=0
      NFLGPPP=0
      NFLGBRMM=0
      NFLGHIGH=0
      EST1=ESTART
      E1=ESTART
      X=0.00
      Y=0.00
      Z=0.00
      K1=0
      KEXC=0
      NSTEXC=0
      NEXCNUL=0
      NCLUS=0
      NELEC=0
      NEGION=0
      TLAST=0.00
      ST=0.00
      TDASH=0.00
      if(IMIP == 2):
 GO TO 1
      if(IMIP > 2):
 :
# READIN FIRST ELECTRON FROM BETA DECAY OR XRAY UNTHERMALISED CLUSTERS
       CALL CASRES(J11,IBADTOT,IBAD1)
#  SKIP IF BAD EVENT
       if(IBAD1 == 1):
 :
        J1=J1-1
        GO TO 210
       # endif 
      else if(IMIP == 1) :
# READ IN FIRST ELECTRON FROM MIP INTERACTION
        CALL CASREM(J11)
        EST1=ECAS[1]
        EST2=EST1
      # endif
      X=XCAS[1]
      Y=YCAS[1]
      Z=ZCAS[1]
      ST=TT1[1]
      TS[1]=TT1[1]
      E1=ECAS[1]
      DCZ1=DRZS[1]
      DCY1=DRYS[1]
      DCX1=DRXS[1]
      NFLGFF=NFLGF[1]
      NFLGPPP=NFLGPP[1]
      NFLGBRMM=0
      NFLGHIGH=NFLGFF
# PUT REMAINDER OF ELECTRONS INTO CLUSTER STORE
      ISDUM=0
      DO 35 IST=2,IEVNTL
      ISDUM=ISDUM+1
      XS(ISDUM)=XCAS(IST)
      YS(ISDUM)=YCAS(IST)
      ZS(ISDUM)=ZCAS(IST)
      TS(ISDUM)=TT1(IST)
      ES(ISDUM)=ECAS(IST)
      DCX(ISDUM)=DRXS(IST)
      DCY(ISDUM)=DRYS(IST)
      DCZ[ISDUM]=DRZS(IST)
      NFLGFC(ISDUM)=NFLGF(IST)
      NFLGPPC(ISDUM)=NFLGPP(IST)
      NFLGBRMC(ISDUM)=0
      NCLUS=ISDUM
      if(NFLGF(IST):
 > NFLGHIGH) NFLGHIGH=NFLGF(IST)
   35 CONTINUE
      
# START OF LOOP FOR NEWLY CREATED ELECTRONS
    1 CONTINUE                                                          
      R1=DRAND48(RDUM)
      T=-math.log(R1)/TLIM+TDASH
      TDASH=T
#     AP=DCZ1*F2*math.sqrt(E1)
      GAM1=(EMS+E1)/EMS
      BET1=math.sqrt(1.00-1.00/(GAM1*GAM1))
      AP=DCZ1*EFIELD*BET1*VC*1.0D-10
      BP1=BP/GAM1              
      E=E1+(AP+BP1*T)*T
      if(E < 0.00):
 :
       E=0.0010
      # endif    
# INSERT NEW ALGORITHM TO FIND IE FOR VARYING ENERGY STEP          
      if(IMIP == 1):
 :                                     
       IE=DINT(E/ESTEP)+1                                               
      else:
       if(EFINAL <= 20000.):
 :
        IE=DINT(E/ESTEP)+1
       else if(EFINAL <= 140000.) :
        if(E <= 16000.):
 :
         IE=DINT(E)+1
        else:
         IE=16000+DINT((E-16000.)/ESTEP1)
        # endif
       else:
        if(E <= 12000.):
 :
         IE=DINT(E)+1
        else if(E <= 92000.) :
         IE=12000+DINT((E-12000.)/ESTEP1)
        else:
         IE=16000+DINT((E-92000.)/ESTEP2)
        # endif
       # endif
      # endif 
      IE=DMIN0(IE,J20000)                                            
#                                                                       
#     TEST FOR #real OR NULL COLLISION                                   
#                                                                       
      R5=DRAND48(RDUM)
      TEST1=TCF(IE)/TLIM                                               
      if(R5 <= TEST1):
 GO TO 137                                        
      NNULL=NNULL+1                          
      TEST2=TEMP(IE)/TLIM
      if(R5 < TEST2):
 :
# TEST FOR NULL LEVELS
       if(NPLAST == 0):
 GO TO 1
       R2=DRAND48(RDUM) 
       I=0
  888  I=I+1
       if(CFN(IE,I):
 < R2) GO TO 888
# INCREMENT NULL LEVEL SUM
       NEXCNUL=NEXCNUL+1
       ICOLNN[I]=ICOLNN[I]+1
# STORE X Y Z T ID FOR MOLECULAR LIGHT EMISSION FROM NULL EXCITATION
# NOTE:  SMALL APPROX USED POSITION OF PREVIOUS #real COLLISION
       XSTN(NEXCNUL)=X
       YSTN(NEXCNUL)=Y
       ZSTN(NEXCNUL)=Z
       TSTN(NEXCNUL)=ST
       IDNUL(NEXCNUL)=I      
       GO TO 1                          
      else:
# NULL 
       GO TO 1
      # endif    
#                                                                       
#  CALCULATE DIRECTION COSINES AND POSITIONS AT INSTANT BEFORE COLLISION
  137 T2=T*T
      if(E > EMAX):
 EMAX=E
      if(T > TMAX1):
 TMAX1=T
      TDASH=0.00
      NREAL=NREAL+1                                                     
#     CONST6=math.sqrt(E1/E)
      GAM2=(EMS+E)/EMS
      GAM12=(GAM1+GAM2)/2.00
      BET2=math.sqrt(1.00-1.00/(GAM2*GAM2))   
      CONST6=BET1/BET2                                             
      DCX2=DCX1*CONST6                                                  
      DCY2=DCY1*CONST6                                                  
#     DCZ2=DCZ1*CONST6+EFIELD*T*CONST5/math.sqrt(E) 
      DCZ2=DCZ1*CONST6+EFIELD*T*2.0D10*CONST1/(VC*BET2)
#     CONST7=CONST9*math.sqrt(E1)  
      CONST7=VC*BET1*1.0D-12                          
      A=T*CONST7                                                        
      X=X+DCX1*A                                                        
      Y=Y+DCY1*A
      Z=Z+DCZ1*A+T2*F1/GAM12
#     Z=Z+DCZ1*A+T2*F1     
      ST=ST+T
      IT=DINT(T+1.00)                                                  
      IT=DMIN0(IT,J300)                                               
      TIME(IT)=TIME(IT)+1.00                                           
# --------------------------------------------------------------------- 
#     DETERMINATION OF #real COLLISION TYPE                              
# --------------------------------------------------------------------- 
      R2=DRAND48(RDUM)
      I=0                                                               
  140 I=I+1                                                             
      if(CF(IE,I):
 < R2) GO TO 140    
#************************************************************
# CHECK IF BREMSSTRAHLUNG
      if(IZBR[I]:
 != 0 and LBRM == 1) :
       NFLGBRMM=1
       IPT=IARRY[I]
       ICOLL(IPT)=ICOLL(IPT)+1
       ICOLN[I]=ICOLN[I]+1
       DO 141 KNGS=1,NGAS
       if(IPT == (KNGS*5):
-1) GO TO 142
  141  CONTINUE
  142  IATOMNO=IZBR[I] 
       CALL BREMS(IATOMNO,E,DCX2,DCY2,DCZ2,EOUT,EDCX,EDCY,EDCZ,EGAMMA,GDCX,GDCY,GDCZ)
       NBREM(KNGS)=NBREM(KNGS)+1
       EBRTOT(KNGS)=EBRTOT(KNGS)+EGAMMA
# GET  NEW DRCOS DRCOSY DRCOSX AND ENERGY OF ELECTRON
       E1=EOUT
       DCX1=EDCX
       DCY1=EDCY
       DCZ1=EDCZ
# RUN BREMSSTRAHLUNG GAMMA THROUGH CASCADE : STORE CONVERTED 
# ELECTRONS IN COMMON/CASRSB/
#
       CALL BREMSCASC(J11,EGAMMA,X,Y,Z,ST,GDCX,GDCY,GDCZ,ILOW)
# BREMSSTRAHLUNG ENERGY TOO LOW TO IONISE
       if(ILOW == 1):
 GO TO 190
#    
#  STORE BREMSSTRAHLUNG DATA IN CLUSTER STORE
# 
       ETSUM=0.0     
       DO 890 KBR=1,IEVNTLB
       NCLUS=NCLUS+1
       if(NCLUS > 150000):
 : 
        WRITE(6,546) NCLUS,NREAL
        STOP
       # endif    
       ES(NCLUS)=ECASB[KBR]
       ETSUM=ETSUM+ES(NCLUS)
       XS(NCLUS)=XCASB[KBR]
       YS(NCLUS)=YCASB[KBR]
       ZS(NCLUS)=ZCASB[KBR]
       TS(NCLUS)=TTB1(KBR)
       DCX(NCLUS)=DRXB[KBR]
       DCY(NCLUS)=DRYB[KBR]
       DCZ[NCLUS]=DRZB[KBR]
       NFLGFC(NCLUS)=NFLGFB[KBR]+NFLGHIGH
       NFLGPPC(NCLUS)=NFLGPPB[KBR]
       NFLGBRMC(NCLUS)=2
  890  CONTINUE 
       if(NFLGFC(NCLUS):
 > NFLGHIGH) NFLGHIGH=NFLGFC(NCLUS)
       GO TO 190
      # endif                
  891 CONTINUE  
#*****************************************************************
#     S1=RGAS[I]   
      S1=1.00+GAM2*(RGAS[I]-1.00)                                    
      EI=EIN[I]
#     WRITE(6,8890) EIN[I],I
#8890 print(' EIN=',D12.4,' I=',I3)
      if(E < EI):
 :
      EI=E-0.00010
      # endif                                                          
      if(IPN[I]:
 == 0) GO TO 666
# ATTACHMENT       
      if(IPN[I]:
 == -1) :
       NETOT=NETOT+1
       NITOT=NITOT+1
       NELEC=NELEC+1
       NEGION=NEGION+1
       IPT=IARRY[I]
       ICOLL(IPT)=ICOLL(IPT)+1
       ICOLN[I]=ICOLN[I]+1 
       IT=DINT(T+1.00)
       IT=DMIN0(IT,J300)
       TIME(IT)=TIME(IT)+1.00
       GO TO 335
      # endif
      EISTR=EI
      if(IONMODEL[I]:
 > 0) : 
# CALCULATE SECONDARY ENERGY,ESEC,IN IONISATION COLLISION USING
# FIVE DIFFERENT MODELS
       CALL IONSPLIT(I,E,EI,ESEC)
       GO TO 544
      # endif
      R9=DRAND48(RDUM)
#    USE OPAL PETERSON AND BEATY SPLITTING FACTOR.
      ESEC=WPL[I]*TAN(R9*ATAN((E-EI)/(2.00*WPL[I])))
      ESEC=WPL[I]*(ESEC/WPL[I])**0.9524
  544 CONTINUE
      EI=ESEC+EI 
# STORE POSITION ,ENERGY, DIRECTION COSINES AND TIME OF GENERATION
# OF SECONDARY IONISATION ELECTRONS
      NCLUS=NCLUS+1
      NMXADD=MAX(NCLUS,NMXADD)
      if(NCLUS > 150000):
 : 
      WRITE(6,546) NCLUS,NREAL
 546  print(2X,' def STOPPED . NCLUS=',I7,' NREAL=',I10)
      STOP
      # endif     
      XS(NCLUS)=X       
      YS(NCLUS)=Y
      ZS(NCLUS)=Z
      TS(NCLUS)=ST
      ES(NCLUS)=ESEC   
      NFLGFC(NCLUS)=NFLGFF
      NFLGPPC(NCLUS)=NFLGPPP
      NFLGBRMC(NCLUS)=NFLGBRMM
      NTMPFLG=1
      NCLTMP=NCLUS
#     ES(NCLUS)=ESEC
# RANDOMISE SECONDARY ELECTRON DIRECTION
#     R3=drand48(RDUM)
#     F3=1.0-2.00*R3
#     THETA0=DACOS(F3)
#     F6=DCOS(THETA0)
#     F5=DSIN(THETA0)
#     R4=drand48(RDUM)
#     PHI0=F4*R4
#     F8=DSIN(PHI0)
#     F9=DCOS(PHI0)               
#     DCX(NCLUS)=F9*F5
#     DCY(NCLUS)=F8*F5
#     DCZ[NCLUS]=F6   
#*********************************************************
      if(IECASC == 0):
GO TO 333
      if(LEGAS[I]:
 == 0) GO TO 333
# USE COMPLETE CASCADE FOR ELECTRON IONISATION
      KG1=NEGAS[I]
      LG1=LEGAS[I]
      IGSHEL=IESHELL[I]
      CALL CASCADEE(J11,KG1,LG1,X,Y,Z,ST,ESEC,IGSHEL)
#
# STORE CASCADE IN CLUSTER STORE
#
      ETSUM=0.0
      DO 844 KBR=1,IEVENTE
      NCLUS=NCLUS+1
      if(NCLUS > 150000):
 :
       WRITE(6,546) NCLUS,NREAL
       STOP
      # endif
      ES(NCLUS)=ECASE(KBR)
      ETSUM=ETSUM+ES(NCLUS)
      XS(NCLUS)=XCASE(KBR)
      YS(NCLUS)=YCASE(KBR)
      ZS(NCLUS)=ZCASE(KBR)
      TS(NCLUS)=TCASE(KBR)
      DCX(NCLUS)=DRXCE(KBR)
      DCY(NCLUS)=DRYCE(KBR)
      DCZ[NCLUS]=DRZCE(KBR)
      NFLGFC(NCLUS)=NFLGFE(KBR)+NFLGHIGH
      NFLGPPC(NCLUS)=NFLGPPE(KBR)
      NFLGBRMC(NCLUS)=NFLGBRMM
  844 CONTINUE
      if(NFLGFC(NCLUS):
 > NFLGHIGH) NFLGHIGH=NFLGFC(NCLUS)
      GO TO 666
#*********************************************************
# STORE POSSIBLE SHELL EMISSIONS AUGER OR FLUORESCENCE 
  333 if(EISTR > 30.0) :
#      WRITE(6,8891) EISTR
#8891  print(' EISTR=',D12.4)
# TEST IF FLUORESCENCE EMISSION
       ifLTST=0:
       if(WKLM[I]:
 > 0.0) :
        R9=DRAND48(RDUM)
        if(R9 < WKLM[I]:
) ifLTST=1
       # endif
       if(ifLTST == 0):
 :
# AUGER EMISSION WITHOUT FLUORESCENCE
        NAUG=NC0[I]
        EAVAUG=EC0[I]/float(NAUG)
        DO 700 JFL=1,NC0[I]
        NCLUS=NCLUS+1
        XS(NCLUS)=X
        YS(NCLUS)=Y
        ZS(NCLUS)=Z
        TS(NCLUS)=ST
        NFLGFC(NCLUS)=NFLGFF
        NFLGPPC(NCLUS)=NFLGPPP
        NFLGBRMC(NCLUS)=NFLGBRMM
        ES(NCLUS)=EAVAUG
        R3=DRAND48(RDUM)
        F3=1.0-2.00*R3
        THETA0=numpy.arccos(F3)
        F6=DCOS(THETA0)
        F5=DSIN(THETA0)
        R4=DRAND48(RDUM)
        PHI0=F4*R4
        F8=DSIN(PHI0)
        F9=DCOS(PHI0)               
        DCX(NCLUS)=F9*F5
        DCY(NCLUS)=F8*F5
        DCZ[NCLUS]=F6
  700   CONTINUE 
       else:
# AUGER EMISSION AND FLUORESENCE 
        if(NG2[I]:
 == 0) GO TO 702
        NAUG=NG2[I]
        EAVAUG=EG2[I]/float(NAUG)
        DO 701 JFL=1,NG2[I]
        NCLUS=NCLUS+1
        XS(NCLUS)=X
        YS(NCLUS)=Y
        ZS(NCLUS)=Z
        NFLGFC(NCLUS)=NFLGFF
        NFLGPPC(NCLUS)=NFLGPPP
        NFLGBRMC(NCLUS)=NFLGBRMM
        TS(NCLUS)=ST
        ES(NCLUS)=EAVAUG
        R3=DRAND48(RDUM)
        F3=1.0-2.00*R3
        THETA0=numpy.arccos(F3)
        F6=DCOS(THETA0)
        F5=DSIN(THETA0)
        R4=DRAND48(RDUM)
        PHI0=F4*R4
        F8=DSIN(PHI0)
        F9=DCOS(PHI0)               
        DCX(NCLUS)=F9*F5
        DCY(NCLUS)=F8*F5
        DCZ[NCLUS]=F6
  701   CONTINUE
  702   if(NG1[I] == 0) GO TO 704
        NAUG=NG1[I]
        EAVAUG=EG1[I]/float(NAUG)
        R9=DRAND48(RDUM)
        DFL=-math.log(R9)*DSTFL[I]
        DO 703 JFL=1,NG1[I]
        NCLUS=NCLUS+1
        R3=DRAND48(RDUM)
        THEFL=numpy.arccos(1.0-2.00*R3)
        R4=DRAND48(RDUM)
        PHifL=F4*R4
        XS(NCLUS)=X+DFL*DSIN(THEFL)*DCOS(PHifL)
        YS(NCLUS)=Y+DFL*DSIN(THEFL)*DSIN(PHifL)
        ZS(NCLUS)=Z+DFL*DCOS(THEFL)
        NFLGFC(NCLUS)=NFLGHIGH+1
        NFLGPPC(NCLUS)=NFLGPPP
        NFLGBRMC(NCLUS)=NFLGBRMM
        TS(NCLUS)=ST
        ES(NCLUS)=EAVAUG
        R3=DRAND48(RDUM)
        F3=1.0-2.00*R3
        THETA0=numpy.arccos(F3)
        F6=DCOS(THETA0)
        F5=DSIN(THETA0)
        R4=DRAND48(RDUM)
        PHI0=F4*R4
        F8=DSIN(PHI0)
        F9=DCOS(PHI0)               
        DCX(NCLUS)=F9*F5
        DCY(NCLUS)=F8*F5
        DCZ[NCLUS]=F6
        NFLGHIGH=NFLGFC(NCLUS)
  703   CONTINUE
  704   CONTINUE
       # endif
      # endif
#                                                                       
#  GENERATE SCATTERING ANGLES AND UPDATE  LABORATORY COSINES AFTER      
#   COLLISION ALSO UPDATE ENERGY OF ELECTRON.                           
#
  666 IPT=IARRY[I]
      ICOLL(IPT)=ICOLL(IPT)+1 
      ICOLN[I]=ICOLN[I]+1 
# IF EXCITATION : ADD PROBABILITY ,PENFRA(1,I),OF TRANSFER TO GIVE   
# IONISATION OF THE OTHER GASES IN MIXTURE
      if(IPEN == 0 or NGAS == 1):
 GO TO 5 
      if(PENFRA[1,I] != 0.0):
 :      
       RAN=DRAND48(RDUM)
       if(RAN > PENFRA[1,I]):
 GO TO 5
       NCLUS=NCLUS+1  
# ENTER HERE POSSIBLE DELOCALISATION LENGTH FOR PENNING TRANSFER
       if(PENFRA[2,I] == 0.0):
 :
        XS(NCLUS)=X
        YS(NCLUS)=Y      
        ZS(NCLUS)=Z             
        NFLGFC(NCLUS)=NFLGFF
        NFLGPPC(NCLUS)=NFLGPPP
        NFLGBRMC(NCLUS)=NFLGBRMM
        GO TO 667
       # endif
       ASIGN=1.0
       RAN=DRAND48(RDUM)
       RAN1=DRAND48(RDUM)
       if(RAN1 < 0.5):
 ASIGN=-ASIGN
       XS(NCLUS)=X-math.log(RAN)*PENFRA[2,I]*ASIGN
       RAN=DRAND48(RDUM)
       RAN1=DRAND48(RDUM)
       if(RAN1 < 0.5):
 ASIGN=-ASIGN
       YS(NCLUS)=Y-math.log(RAN)*PENFRA[2,I]*ASIGN
       RAN=DRAND48(RDUM)
       RAN1=DRAND48(RDUM)
       if(RAN1 < 0.5):
 ASIGN=-ASIGN
       ZS(NCLUS)=Z-math.log(RAN)*PENFRA[2,I]*ASIGN
  667  RAN=DRAND48(RDUM)
       TS(NCLUS)=ST-math.log(RAN)*PENFRA[3,I]
# ASSIGN EXCESS ENERGY OF 1EV TO PENNING CREATED ELECTRON
       ES(NCLUS)=1.0
       DCX(NCLUS)=DCX1
       DCY(NCLUS)=DCY1
       DCZ[NCLUS]=DCZ1
       GO TO 6
      # endif 
#      GO TO 6 
# CALCULATE SUM OF EXCITATION PER CLUSTER AND STORE EXCITATION X Y Z T
   5  if(IPN[I] == 0) :
       if((RGAS[I]:
*EIN[I]) > 4.0) :
        KEXC=KEXC+1
        if(KEXC > 150000):
 :
         WRITE(6,548) KEXC
 548     print(2X,' def STOPPED . KEXC=',I7)
         STOP
        # endif
# FIND GAS IN WHICH EXCITATION OCCURED AND INCREMENT COUNTER
        if(I <= IDG1):
 : 
         NGEXC1=NGEXC1+1
        else if(I <= IDG2) :
         NGEXC2=NGEXC2+1
        else if(I <= IDG3) :
         NGEXC3=NGEXC3+1
        else if(I <= IDG4) :
         NGEXC4=NGEXC4+1
        else if(I <= IDG5) :
         NGEXC5=NGEXC5+1
        else if(I <= IDG6) :
         NGEXC6=NGEXC6+1
        else:
         WRITE(6,9911) 
 9911    print(' def STOPPED BAD GAS ID IN MONTE')
         STOP
        # endif
        NEXCTOT=NEXCTOT+1
        NSTEXC=NSTEXC+1
        XSTEXC(KEXC)=X
        YSTEXC(KEXC)=Y
        ZSTEXC(KEXC)=Z
        TSTEXC(KEXC)=ST
       # endif
      # endif 
   6  S2=(S1*S1)/(S1-1.00) 
#   ANISOTROPIC SCATTERING
      R3=DRAND48(RDUM)
      if(INDEX[I]:
 == 1) :
       R31=DRAND48(RDUM)
       F3=1.00-R3*ANGCT(IE,I)          
       if(R31 > PSCT(IE,I):
)  F3=-F3
      else if(INDEX[I] == 2) :
       EPSI=PSCT(IE,I)
       F3=1.00-(2.00*R3*(1.00-EPSI)/(1.00+EPSI*(1.00-2.00*R3))) 
      else: 
# ISOTROPIC SCATTERING                                             
       F3=1.00-2.00*R3
      # endif
      THETA0=numpy.arccos(F3)
      R4=DRAND48(RDUM)
      PHI0=F4*R4                                                        
      F8=DSIN(PHI0)                                                     
      F9=DCOS(PHI0)                                                     
      if(E < EI):
 EI=0.00                                              
      ARG1=1.00-S1*EI/E                                                
      ARG1=DMAX1(ARG1,SMALL)                                            
      D=1.00-F3*math.sqrt(ARG1)                                            
      E1=E*(1.00-EI/(S1*E)-2.00*D/S2) 
      E1=DMAX1(E1,SMALL)                                                
      Q=math.sqrt((E/E1)*ARG1)/S1                                           
      Q=DMIN1(Q,1.00)                                                  
      THETA=DASIN(Q*DSIN(THETA0))                                       
      F6=DCOS(THETA)                                                    
      U=(S1-1.00)*(S1-1.00)/ARG1                                      
      CSQD=F3*F3                                                        
      if(F3 < 0.00 and CSQD > U):
 F6=-1.00*F6                        
      F5=DSIN(THETA)                                                    
      DCZ2=DMIN1(DCZ2,1.00)                                            
      ARGZ=math.sqrt(DCX2*DCX2+DCY2*DCY2)
      if(ARGZ == 0.00):
 :
       DCZ1=F6         
       DCX1=F9*F5                             
       DCY1=F8*F5 
       if(NTMPFLG == 1):
 :
# USE FREE KINEMATICS FOR IONISATION SECONDARY ANGLES
        F5S=F5*math.sqrt(E1/ES(NCLTMP))
        if(F5S > 1.0):
 F5S=1.0
        THSEC=DASIN(F5S)
        F5S=DSIN(THSEC)
        F6S=DCOS(THSEC)
        if(F6 < 0.0):
 F6S=-F6S
        PHIS=PHI0+API   
        if(PHIS > F4):
 PHIS=PHI0-F4
        F8S=DSIN(PHIS)
        F9S=DCOS(PHIS)
        DCZ[NCLTMP]=F6S
        DCX(NCLTMP)=F9S*F5S
        DCY(NCLTMP)=F8S*F5S
        NTMPFLG=0
       # endif
       GO TO 190
      # endif                                            
      DCZ1=DCZ2*F6+ARGZ*F5*F8                                           
      DCY1=DCY2*F6+(F5/ARGZ)*(DCX2*F9-DCY2*DCZ2*F8)                     
      DCX1=DCX2*F6-(F5/ARGZ)*(DCY2*F9+DCX2*DCZ2*F8)
      if(NTMPFLG == 1):
 :
# USE FREE KINEMATICS FOR IONISATION SECONDARY ANGLES
       F5S=F5*math.sqrt(E1/ES(NCLTMP))
       if(F5S > 1.0):
 F5S=1.0            
       THSEC=DASIN(F5S)
       F5S=DSIN(THSEC)
       F6S=DCOS(THSEC)
       if(F6 < 0.0):
 F6S=-F6S
       PHIS=PHI0+API   
       if(PHIS > F4):
 PHIS=PHI0-F4
       F8S=DSIN(PHIS)
       F9S=DCOS(PHIS)
       DCZ[NCLTMP]=DCZ2*F6S+ARGZ*F5S*F8S                               
       DCY(NCLTMP)=DCY2*F6S+(F5S/ARGZ)*(DCX2*F9S-DCY2*DCZ2*F8S)        
       DCX(NCLTMP)=DCX2*F6S-(F5S/ARGZ)*(DCY2*F9S+DCX2*DCZ2*F8S)
       NTMPFLG=0
      # endif 
  190 CONTINUE 
# TEST IF ELECTRON IS THERMALISED
      if(E1 > ETHRM):
 GO TO 1  
# STORE POSITION AND TIME OF ELECTRON AND COLLISION HISTORY
  191 CONTINUE
      K1=K1+1
      XST(K1)=X
      YST(K1)=Y
      ZST(K1)=Z
      TST(K1)=ST
      NFGF(K1)=NFLGFF
      NFGPP(K1)=NFLGPPP
      NFGBR(K1)=NFLGBRMM
      TTIME(K1)=ST-TLAST
      NELEC=NELEC+1
      NETOT=NETOT+1
 335  if(K1 == 150000) GO TO 889
# CATCH SINGLE ELECTRON CLUSTER THAT WAS ATTACHED.
c     if(NELEC == 1 and NCLUS == 0) GO TO 210 
#
        if(NELEC == (NCLUS+1):
) :
#       WRITE(6,884) NELEC,NCLUS,NEGION,J11
# 884 print(' NELEC=',I6,' NCLUS=',I6,' NEGION=',I3,' J11=',I6)
# LAST ELECTRON IN CLUSTER DO STATISTICS OVER PRIMARY CLUSTER
        CALL STATS(J11,J1)
        GO TO 210
       # endif
      if(NELEC < (NCLUS+1):
) :
# GET NEW IONISATION ELECTRON FROM STORE
       X=XS(NELEC)
       Y=YS(NELEC)
       Z=ZS(NELEC)
       ST=TS(NELEC)
       NFLGFF=NFLGFC(NELEC)
       NFLGPPP=NFLGPPC(NELEC)
       NFLGBRMM=NFLGBRMC(NELEC)
       TLAST=TS(NELEC)
       E1=ES(NELEC)
       DCX1=DCX(NELEC)
       DCY1=DCY(NELEC)
       DCZ1=DCZ[NELEC]
       if(E1 < ETHRM):
 GO TO 191                       
       GO TO 1   
      # endif
#  MAIN LOOP # end    
  210 CONTINUE
# RESET NUMBER OF EVENTS FOR BAD EVENTS
      if(IMIP > 2):
 NDELTA=NDELTA-IBADTOT
#
      WRITE(6,887) EMAX,NEOVFL
  887 print(' EMAX=',D12.7,' NEOVFL=',I5)  
      if(EMAX > EFINAL):
 :
      WRITE(6,989) EFINAL,EMAX
  989 print('INCREASE ENERGY LIMIT FROM',D12.6,' EV TO AT LEAST',D12.6,' EV.')
      STOP
      # endif                                         
      RETURN 
  889 NLEFT=NCLUS-NELEC
      WRITE(6,992) NPRIME,NLEFT,NCLUS
  992 print(3(/),' WARNING STOPPED AFTER NPRIME=',I6,' LAST PRIMARY HASAT LEAST ',I6,' SECONDARIES LEFT TO TRACK OUT OF ',I6,' ELECTRONS ALREADY IN CLUSTER') 
      STOP                      
      RETURN                                                            
      # end
      def MONTEFA                                               :
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/INPT1/NDVEC
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,TCFMAX(10),TCFMAX1,RSTART,EFIELD,ETHRM,ECUT,NDELTA,IMIP,IWRITE   
      COMMON/BFLD/EOVB,WB,BTHETA,BMAG                                   
      COMMON/LARGE/CF(20000,512),EIN(512),TCF(20000),IARRY(512),    RGAS(512),IPN(512),WPL(512),IZBR(512),IPLAST,PENFRA[3,512]
      COMMON/LARGEN/CFN(20000,60),TCFN(20000),SCLENUL(60),NPLAST
      COMMON/OUTPT/ICOLL(30),NETOT,NPRIME,TMAX1,TIME(300),NNULL,NITOT,ICOLN(512),ICOLNN(60),NREAL,NEXCTOT 
      COMMON/RLTVY/BET[20]00),GAM(20000),VC,EMS
      COMMON/STTS/XST(150000),YST(150000),ZST(150000),TST(150000),TTIME(150000),NFGF(150000),NFGPP(150000),NFGBR(150000),NELEC,NEGION,EST1,EST2 
      COMMON/STEXC/XSTEXC(150000),YSTEXC(150000),ZSTEXC(150000),TSTEXC(150000),NSTEXC
      COMMON/STEXCNUL/XSTN(150000),YSTN(150000),ZSTN(150000),TSTN(150000),IDNUL(150000),NEXCNUL
      COMMON/IONC/DOUBLE(6,20000),CMINIXSC(6),CMINEXSC(6),ECLOSS(6),WPLN(6),ICOUNT,AVPFRAC(3,6)
      COMMON/IONFL/NC0(512),EC0(512),NG1(512),EG1(512),NG2(512),EG2(512),WKLM(512),DSTFL(512)
      COMMON/IONMOD/ESPLIT(512,20),IONMODEL(512) 
      COMMON/ANIS/PSCT(20000,512),ANGCT(20000,512),INDEX(512),NISO
      COMMON/CASRS/ECAS(400),XCAS(400),YCAS(400),ZCAS(400),DRXS(400),DRYS(400),DRZS(400),TT1(400),NFLGF(400),NFLGPP(400),IEVNTL
      COMMON/COMP/LCMP,LCFLG,LRAY,LRFLG,LPAP,LPFLG,LBRM,LBFLG,LPEFLG
      COMMON/BREMG/EBRGAM(10),BRDCOSX(10),BRDCOSY(10),BRDCOSZ[10],BRX(10),BRY(10),BRZ[10],BRT(10),EBRTOT(6),NBREM(6)
      COMMON/CASRSB/ECASB[400],XCASB[400],YCASB[400],ZCASB[400],DRXB[400],DRYB[400],DRZB[400],TTB1(400),NFLGFB[400],NFLGPPB[400],IEVNTLB
      COMMON/CASRSE/ECASE(400),XCASE(400),YCASE(400),ZCASE(400),DRXCE(400),DRYCE(400),DRZCE(400),TCASE(400),NFLGFE(400),NFLGPPE(400),IEVENTE
      COMMON/ECASC/NEGAS(512),LEGAS(512),IESHELL(512),IECASC
      COMMON/IDEXC/NGEXC1,NGEXC2,NGEXC3,NGEXC4,NGEXC5,NGEXC6,IDG1,IDG2,IDG3,IDG4,IDG5,IDG6
      DIMENSION XS(150000),YS(150000),ZS(150000),TS(150000),ES(150000),DCX(150000),DCY(150000),DCZ[150000],NFLGFC(150000),NFLGPPC(150000),NFLGBRMC(150000)
      DIMENSION TEMP(20000)
# ----------------------------------------------------------------------   
#   RELATIVISTIC KINEMATICS
#   ELECTRIC AND MAGNETIC FIELDS  PARALLEL TO Z-AXIS      
#   TRACKS DELTA ELECTRONS AND UPDATES ARRAYS CONTAINING POSITION AND 
#   TIME OF THERMALISED ELECTRONS.
#   CALCULATES NUMBER OF PRODUCED ELECTRONS PER PRIMARY DELTA AND OTHER
#   HIGHER FANO FACTORS
#   RANGE CALCULATION IS ACCURATE ONLY FOR ANISOTROPIC X-SECTIONS.
# ----------------------------------------------------------------------
# VARYING ENERGY STEPS
      if(EFINAL <= 140000.):
 :
        ESTEP1=(EFINAL-16000.0)/float(4000)
      else:
        ESTEP1=20.0
        ESTEP2=(EFINAL-92000.0)/float(4000)
      # endif
      NPRINT=0 
      J300=300
      J20000=20000
      API=numpy.arccos(-1.00)
      SMALL=1.0D-20
      EMAX=0.00
      TMAX1=0.00
      RDUM=RSTART
      CONST9=CONST3*0.010
      DO 25 I=1,300
   25 TIME[I]=0.00
      DO 26 I=1,30
   26 ICOLL[I]=0
      DO 27 I=1,512
   27 ICOLN[I]=0
      NREAL=0                                                           
      NNULL=0                                                           
      NETOT=0
      NEXCTOT=0
      NITOT=0
      NMXADD=0
      NTMPFLG=0
      BP=EFIELD*EFIELD*CONST1                                           
      F1=EFIELD*CONST2                                                  
      F2=EFIELD*CONST3
      F4=2.00*API
      THETA1=THETA
      PHI1=PHI
      NEOVFL=0
# CALCULATE MAXIMUM COLLISION FREQUENCY
      TLIM=0.0
      DO 111 J=1,20000
      TEMP[J]=TCFN[J]+TCF[J]
      if(TLIM < TEMP[J]:
) TLIM=TEMP[J] 
  111 CONTINUE
# START OF PRIMARY DELTA LOOP
      J1=0
      DO 210 J11=1,NDELTA 
      J1=J1+1
      NPRIME=J1      
      NGEXC1=0
      NGEXC2=0
      NGEXC3=0
      NGEXC4=0
      NGEXC5=0
      NGEXC6=0
#     INITIAL DIRECTION COSINES FOR ELECTRON BEAM                
      DCZ1=DCOS(THETA1) 
      DCX1=DSIN(THETA1)*DCOS(PHI1)                                      
      DCY1=DSIN(THETA1)*DSIN(PHI1)
      NFLGFF=0
      NFLGPPP=0
      NFLGBRMM=0
      NFLGHIGH=0
      EST1=ESTART
# INITIAL VELOCITY
      E1=ESTART
#     VTOT=CONST9*math.sqrt(E1)
      GAM1=(EMS+E1)/EMS
      GAM12=GAM1
      BET1=math.sqrt(1.00-1.00/(GAM1*GAM1))
      VTOT=BET1*VC*1.0D-12
      CX1=DCX1*VTOT
      CY1=DCY1*VTOT
      CZ1=DCZ1*VTOT      
      X=0.00    
      Y=0.00    
      Z=0.00                                           
      K1=0   
      KEXC=0
      NSTEXC=0
      NEXCNUL=0
      NCLUS=0
      NELEC=0
      NEGION=0
      TLAST=0.00
      ST=0.00
      TDASH=0.00
      if(IMIP == 2):
 GO TO 1
      if(IMIP > 2):
 :
# READIN FIRST ELECTRON FROM BETA DECAY OR XRAY UNTHERMALISED CLUSTERS
       CALL CASRES(J11,IBADTOT,IBAD1)
#  SKIP IF BAD EVENT
       if(IBAD1 == 1):
 :
        J1=J1-1
        GO TO 210
       # endif
      else if(IMIP == 1) :
# READ IN FIRST ELECTRON FROM MIP INTERACTION
        CALL CASREM(J11)
        EST1=ECAS[1]
        EST2=EST1
      # endif
      X=XCAS[1]
      Y=YCAS[1]
      Z=ZCAS[1]
      ST=TT1[1]
      TS[1]=TT1[1]
      E1=ECAS[1]
      DCZ1=DRZS[1]
      DCY1=DRYS[1]
      DCX1=DRXS[1]
      NFLGFF=NFLGF[1]
      NFLGPPP=NFLGPP[1]
      NFLGBRMM=0
      NFLGHIGH=NFLGFF
      GAM1=(EMS+E1)/EMS
      BET1=math.sqrt(1.00-1.00/(GAM1*GAM1))
#     VTOT=CONST9*math.sqrt(E1)
      VTOT=BET1*VC*1.0D-12
#
      CX1=DCX1*VTOT
      CY1=DCY1*VTOT
      CZ1=DCZ1*VTOT
# PUT REMAINDER OF ELECTRONS INTO CLUSTER STORE
      ISDUM=0
      DO 35 IST=2,IEVNTL
      ISDUM=ISDUM+1
      XS(ISDUM)=XCAS(IST)
      YS(ISDUM)=YCAS(IST)
      ZS(ISDUM)=ZCAS(IST)
      TS(ISDUM)=TT1(IST)
      ES(ISDUM)=ECAS(IST)
      DCX(ISDUM)=DRXS(IST)
      DCY(ISDUM)=DRYS(IST)
      DCZ[ISDUM]=DRZS(IST)
      NFLGFC(ISDUM)=NFLGF(IST)
      NFLGPPC(ISDUM)=NFLGPP(IST)
      NFLGBRMC(ISDUM)=0
      NCLUS=ISDUM
      if(NFLGF(IST):
 > NFLGHIGH) NFLGHIGH=NFLGF(IST)
   35 CONTINUE
      GAM12=GAM1
# START OF LOOP FOR NEWLY CREATED ELECTRONS                             
    1 CONTINUE 
      R1=DRAND48(RDUM)
      T=-math.log(R1)/TLIM+TDASH
      TDASH=T
#     AP=DCZ1*F2*math.sqrt(E1)
      GAM1=(EMS+E1)/EMS
      BET1=math.sqrt(1.00-1.00/(GAM1*GAM1))
      AP=DCZ1*EFIELD*BET1*VC*1.0D-10
      BP1=BP/GAM1
 913  print(3X,' AFTER STORE NREAL=',I10,' E1=',E12.3,' T=',E12.3,' AP=',E12.3,' BP=',E12.3,' DCZ1=',E12.3)
#     E=E1+(AP+BP*T)*T       
      E=E1+(AP+BP1*T)*T
      if(E < 0.00):
 :
       if(NPRINT == 0):
 WRITE(6,913)NREAL,E1,T,AP,BP,DCZ1 
       NPRINT=1
       E=0.0010
      # endif                                                   
# INSERT NEW ALGORITHM TO FIND IE FOR VARYING ENERGY STEP          
      if(IMIP == 1):
 :                                     
       IE=DINT(E/ESTEP)+1                                               
      else:
       if(EFINAL <= 20000.):
 :
        IE=DINT(E/ESTEP)+1
       else if(EFINAL <= 140000.) :
        if(E <= 16000.):
 :
         IE=DINT(E)+1
        else:
         IE=16000+DINT((E-16000.)/ESTEP1)
        # endif
       else:
        if(E <= 12000.):
 :
         IE=DINT(E)+1
        else if(E <= 92000.) :
         IE=12000+DINT((E-12000.)/ESTEP1)
        else:
         IE=16000+DINT((E-92000.)/ESTEP2)
        # endif
       # endif
      # endif 
      IE=DMIN0(IE,J20000)                                            
#                                                                       
#     TEST FOR #real OR NULL COLLISION                                   
#                                                                       
      R5=DRAND48(RDUM)
      TEST1=TCF(IE)/TLIM                                                
      if(R5 <= TEST1):
 GO TO 137                                         
      NNULL=NNULL+1                
      TEST2=TEMP(IE)/TLIM
      if(R5 < TEST2):
 :
# TEST FOR NULL LEVELS
       if(NPLAST == 0):
 GO TO 1
       R2=DRAND48(RDUM) 
       I=0
  888  I=I+1
       if(CFN(IE,I):
 < R2) GO TO 888  
# INCREMENT NULL LEVEL SUM
       NEXCNUL=NEXCNUL+1
       ICOLNN[I]=ICOLNN[I]+1
# STORE X Y Z T ID FOR MOLECULAR LIGHT EMISSION AND DISSOCIATION FROM 
#    NULL EXCITATION  
# NOTE: SMALL APPROX USED POSITION OF PREVIOUS COLLISION
       XSTN(NEXCNUL)=X
       YSTN(NEXCNUL)=Y
       ZSTN(NEXCNUL)=Z
       TSTN(NEXCNUL)=ST
       IDNUL(NEXCNUL)=I
       GO TO 1       
      else:
# NULL
       GO TO 1
      # endif                                                   
#                                                                       
#  CALCULATE DIRECTION COSINES AND POSITIONS AT INSTANT BEFORE COLLISION
  137 T2=T*T
      GAM2=(EMS+E)/EMS
      BET2=math.sqrt(1.00-1.00/(GAM2*GAM2))
      GAM12=(GAM1+GAM2)/2.00
      if(E > EMAX):
 EMAX=E
      if(T > TMAX1):
 TMAX1=T
      TDASH=0.00  
      NREAL=NREAL+1
      WBT=WB*T/GAM12
#     WBT=WB*T      
      WBR=WB/GAM12
      COSWT=DCOS(WBT)
      SINWT=DSIN(WBT)                                                   
#     CONST6=math.sqrt(E1/E)
      CONST6=BET1/BET2
      CX2=CX1*COSWT-CY1*SINWT
      CY2=CY1*COSWT+CX1*SINWT
#     VTOT=CONST9*math.sqrt(E)
      VTOT=VC*BET2*1.0D-12                    
      DCX2=CX2/VTOT                                                     
      DCY2=CY2/VTOT                                                     
#     DCZ2=DCZ1*CONST6+EFIELD*T*CONST5/math.sqrt(E) 
      DCZ2=DCZ1*CONST6+EFIELD*T*2.0D10*CONST1/(VC*BET2)
#     CONST7=CONST9*math.sqrt(E1)   
      CONST7=VC*BET1*1.0D-12            
      A=T*CONST7                                                        
#     DX=(CX1*SINWT-CY1*(1.00-COSWT))/WB 
      DX=(CX1*SINWT-CY1*(1.00-COSWT))/WBR                              
      X=X+DX           
#     DY=(CY1*SINWT+CX1*(1.00-COSWT))/WB                               
      DY=(CY1*SINWT+CX1*(1.00-COSWT))/WBR                              
      Y=Y+DY    
#     Z=Z+DCZ1*A+T2*F1
      Z=Z+DCZ1*A+T2*F1/GAM12
      ST=ST+T
      IT=DINT(T+1.00)                                                  
      IT=DMIN0(IT,J300)                                                
      TIME(IT)=TIME(IT)+1.00                                           
# --------------------------------------------------------------------- 
#     DETERMINATION OF #real COLLISION TYPE                              
# --------------------------------------------------------------------- 
      R2=DRAND48(RDUM)
      I=0                                                               
  140 I=I+1 
      if(I <= 0 or I > 512):
 :
      WRITE(6,945) I
  945 print(' BAD  SELECTION I=',I8)
      STOP
      # endif
      if(CF(IE,I):
 < R2) GO TO 140        
#************************************************************
# CHECK IF BREMSSTRAHLUNG
      if(IZBR[I]:
 != 0 and LBRM == 1) :
       NFLGBRMM=1
       IPT=IARRY[I]
       ICOLL(IPT)=ICOLL(IPT)+1
       ICOLN[I]=ICOLN[I]+1
       DO 141 KNGS=1,NGAS
       if(IPT == (KNGS*5):
-1) GO TO 142
  141  CONTINUE
  142  IATOMNO=IZBR[I] 
       CALL BREMS(IATOMNO,E,DCX2,DCY2,DCZ2,EOUT,EDCX,EDCY,EDCZ,EGAMMA,GDCX,GDCY,GDCZ)
       NBREM(KNGS)=NBREM(KNGS)+1
       EBRTOT(KNGS)=EBRTOT(KNGS)+EGAMMA
#      WRITE(6,668) EGAMMA,J11   
# 668 print(' BREM EGAMMA=',D12.4,' EVENT NO=',I5)
# GET  NEW DRCOS DRCOSY DRCOSX AND ENERGY OF ELECTRON
       E1=EOUT
       DCX1=EDCX
       DCY1=EDCY
       DCZ1=EDCZ
# RUN BREMSSTRAHLUNG GAMMA THROUGH CASCADE : STORE CONVERTED 
# ELECTRONS IN COMMON/CASRSB/
#              
       CALL BREMSCASC(J11,EGAMMA,X,Y,Z,ST,GDCX,GDCY,GDCZ,ILOW)
# BREMSSTRAHLUNG ENERGY TOO LOW TO IONISE
       if(ILOW == 1):
 GO TO 190
# 
# STORE BREMSSTRAHLUNG DATA IN CLUSTER STORE
#
       DO 890 KBR=1,IEVNTLB
       NCLUS=NCLUS+1
       if(NCLUS > 150000):
 : 
        WRITE(6,546) NCLUS,NREAL
        STOP
       # endif     
       ES(NCLUS)=ECASB[KBR]
       XS(NCLUS)=XCASB[KBR]
       YS(NCLUS)=YCASB[KBR]
       ZS(NCLUS)=ZCASB[KBR]
       TS(NCLUS)=TTB1(KBR)
       DCX(NCLUS)=DRXB[KBR]
       DCY(NCLUS)=DRYB[KBR]
       DCZ[NCLUS]=DRZB[KBR]
       NFLGFC(NCLUS)=NFLGFB[KBR]+NFLGHIGH
       NFLGPPC(NCLUS)=NFLGPPB[KBR]
       NFLGBRMC(NCLUS)=2
  890  CONTINUE
       if(NFLGFC(NCLUS):
 > NFLGHIGH) NFLGHIGH=NFLGFC(NCLUS)
       GO TO 190
      # endif
  891 CONTINUE
#****************************************************************
#     S1=RGAS[I]  
      S1=1.00+GAM2*(RGAS[I]-1.00)                                    
      EI=EIN[I]
      if(E < EI):
 :
      EI=E-0.00010
      # endif                                                          
      if(IPN[I]:
 == 0) GO TO 666
# ATTACHMENT       
      if(IPN[I]:
 == -1) :
       NETOT=NETOT+1
       NITOT=NITOT+1
       NELEC=NELEC+1
       NEGION=NEGION+1
       IPT=IARRY[I]
       ICOLL(IPT)=ICOLL(IPT)+1
       ICOLN[I]=ICOLN[I]+1 
       IT=DINT(T+1.00)
       IT=DMIN0(IT,J300)
       TIME(IT)=TIME(IT)+1.00
       GO TO 335
      # endif   
      EISTR=EI
      if(IONMODEL[I]:
 > 0) :
# CALCULATE SECONDARY ENERGY,ESEC,IN IONISATION COLLISION USING
# FIVE DIFFERENT MODELS
       CALL IONSPLIT(I,E,EI,ESEC) 
       GO TO 544
      # endif
      R9=DRAND48(RDUM)
#    USE OPAL PETERSON AND BEATY SPLITTING FACTOR.
      ESEC=WPL[I]*TAN(R9*ATAN((E-EI)/(2.00*WPL[I]))) 
      ESEC=WPL[I]*(ESEC/WPL[I])**0.9524
  544 CONTINUE
      EI=ESEC+EI 
# STORE POSITION ,ENERGY, DIRECTION COSINES AND TIME OF GENERATION
# OF SECONDARY IONISATION ELECTRON
      NCLUS=NCLUS+1
      NMXADD=MAX(NCLUS,NMXADD)
      if(NCLUS > 150000):
 : 
       WRITE(6,546) NCLUS,NREAL 
 546   print(2X,' def STOPPED . NCLUS=',I7,' NREAL =',I10)
       STOP
      # endif     
      XS(NCLUS)=X       
      YS(NCLUS)=Y
      ZS(NCLUS)=Z
      TS(NCLUS)=ST
      ES(NCLUS)=ESEC        
      NFLGFC(NCLUS)=NFLGFF
      NFLGPPC(NCLUS)=NFLGPPP
      NFLGBRMC(NCLUS)=NFLGBRMM
      NTMPFLG=1
      NCLTMP=NCLUS
# RANDOMISE SECONDARY ELECTRON DIRECTION
#     R3=drand48(RDUM)
#     F3=1.0-2.00*R3
#     THETA0=DACOS(F3)
#     F6=DCOS(THETA0)
#     F5=DSIN(THETA0)
#     R4=drand48(RDUM)
#     PHI0=F4*R4
#     F8=DSIN(PHI0)
#     F9=DCOS(PHI0)               
#     DCX(NCLUS)=F9*F5
#     DCY(NCLUS)=F8*F5
#     DCZ[NCLUS]=F6     
#*********************************************************
      if(IECASC == 0):
GO TO 333
      if(LEGAS[I]:
 == 0) GO TO 333
# USE COMPLETE CASCADE FOR ELECTRON IONISATION
      KG1=NEGAS[I]
      LG1=LEGAS[I]
      IGSHEL=IESHELL[I]
      CALL CASCADEE(J11,KG1,LG1,X,Y,Z,ST,ESEC,IGSHEL)
#
# STORE CASCADE IN CLUSTER STORE
#
      ETSUM=0.0
      DO 844 KBR=1,IEVENTE
      NCLUS=NCLUS+1
      if(NCLUS > 150000):
 :
       WRITE(6,546) NCLUS,NREAL
       STOP
      # endif
      ES(NCLUS)=ECASE(KBR)
      ETSUM=ETSUM+ES(NCLUS)
      XS(NCLUS)=XCASE(KBR)
      YS(NCLUS)=YCASE(KBR)
      ZS(NCLUS)=ZCASE(KBR)
      TS(NCLUS)=TCASE(KBR)
      DCX(NCLUS)=DRXCE(KBR)
      DCY(NCLUS)=DRYCE(KBR)
      DCZ[NCLUS]=DRZCE(KBR)
      NFLGFC(NCLUS)=NFLGFE(KBR)+NFLGHIGH
      NFLGPPC(NCLUS)=NFLGPPE(KBR)
      NFLGBRMC(NCLUS)=NFLGBRMM
  844 CONTINUE
      if(NFLGFC(NCLUS):
 > NFLGHIGH) NFLGHIGH=NFLGFC(NCLUS)
      GO TO 666
#*********************************************************
# STORE POSSIBLE SHELL EMISSSIONS BY AUGER OR FLUORESCENCE
  333 if (EISTR > 30.0) :
# TEST IF FLUORESCENCE EMISSION
       ifLTST=0:
       if(WKLM[I]:
 > 0.0) :
        R9=DRAND48(RDUM)
        if(R9 < WKLM[I]:
) ifLTST=1
       # endif
       if(ifLTST == 0):
 :
# AUGER EMISSION WITHOUT FLUORESCENCE
        NAUG=NC0[I]
        EAVAUG=EC0[I]/float(NAUG)
        DO 700 JFL=1,NC0[I]
        NCLUS=NCLUS+1
        XS(NCLUS)=X
        YS(NCLUS)=Y
        ZS(NCLUS)=Z
        TS(NCLUS)=ST
        NFLGFC(NCLUS)=NFLGFF
        NFLGPPC(NCLUS)=NFLGPPP
        NFLGBRMC(NCLUS)=NFLGBRMM
        ES(NCLUS)=EAVAUG
        R3=DRAND48(RDUM)
        F3=1.0-2.00*R3
        THETA0=numpy.arccos(F3)
        F6=DCOS(THETA0)
        F5=DSIN(THETA0)      
        R4=DRAND48(RDUM)
        PHI0=F4*R4
        F8=DSIN(PHI0)
        F9=DCOS(PHI0)
        DCX(NCLUS)=F9*F5
        DCY(NCLUS)=F8*F5
        DCZ[NCLUS]=F6
  700   CONTINUE
       else:
# AUGER EMISSION AND FLUORESCENCE
        if(NG2[I]:
 == 0) GO TO 702
        NAUG=NG2[I]
        EAVAUG=EG2[I]/float(NAUG)
        DO 701 JFL=1,NG2[I]
        NCLUS=NCLUS+1
        XS(NCLUS)=X
        YS(NCLUS)=Y
        ZS(NCLUS)=Z
        NFLGFC(NCLUS)=NFLGFF
        NFLGPPC(NCLUS)=NFLGPPP
        NFLGBRMC(NCLUS)=NFLGBRMM
        TS(NCLUS)=ST
        ES(NCLUS)=EAVAUG
        R3=DRAND48(RDUM)
        F3=1.0-2.00*R3
        THETA0=numpy.arccos(F3)
        F6=DCOS(THETA0)
        F5=DSIN(THETA0)
        R4=DRAND48(RDUM)
        PHI0=F4*R4
        F8=DSIN(PHI0)
        F9=DCOS(PHI0)
        DCX(NCLUS)=F9*F5
        DCY(NCLUS)=F8*F5
        DCZ[NCLUS]=F6
  701   CONTINUE
  702   if(NG1[I] == 0) GO TO 704
        NAUG=NG1[I]
        EAVAUG=EG1[I]/float(NAUG)
        R9=DRAND48(RDUM)
        DFL=-math.log(R9)*DSTFL[I]
        DO 703 JFL=1,NG1[I]
        NCLUS=NCLUS+1
        R3=DRAND48(RDUM)
        THEFL=numpy.arccos(1.0-2.00*R3)
        R4=DRAND48(RDUM)
        PHifL=F4*R4
        XS(NCLUS)=X+DFL*DSIN(THEFL)*DCOS(PHifL)
        YS(NCLUS)=Y+DFL*DSIN(THEFL)*DSIN(PHifL)
        ZS(NCLUS)=Z+DFL*DCOS(THEFL)
        NFLGFC(NCLUS)=NFLGHIGH+1
        NFLGPPC(NCLUS)=NFLGPPP
        NFLGBRMC(NCLUS)=NFLGBRMM
        TS(NCLUS)=ST
        ES(NCLUS)=EAVAUG
        R3=DRAND48(RDUM)
        F3=1.0-2.00*R3
        THETA0=numpy.arccos(F3)
        F6=DCOS(THETA0)
        F5=DSIN(THETA0)
        R4=DRAND48(RDUM)
        PHI0=F4*R4
        F8=DSIN(PHI0)
        F9=DCOS(PHI0)
        DCX(NCLUS)=F9*F5
        DCY(NCLUS)=F8*F5
        DCZ[NCLUS]=F6
        NFLGHIGH=NFLGFC(NCLUS)
  703   CONTINUE
  704   CONTINUE
       # endif
      # endif 
#                                                                       
#  GENERATE SCATTERING ANGLES AND UPDATE  LABORATORY COSINES AFTER      
#   COLLISION ALSO UPDATE ENERGY OF ELECTRON.                           
#
  666 IPT=IARRY[I]
      ICOLL(IPT)=ICOLL(IPT)+1 
      ICOLN[I]=ICOLN[I]+1   
# IF EXCITATION : ADD PROBABILITY,PENFRA(1,I), OF TRANSFER TO GIVE   
# IONISATION OF THE OTHER GASES IN MIXTURE 
      if(IPEN == 0 or NGAS == 1):
 GO TO 5          
      if(PENFRA[1,I] != 0.0):
 :
       RAN=DRAND48(RDUM)
       if(RAN > PENFRA[1,I]):
 GO TO 5
       NCLUS=NCLUS+1  
# ENTER HERE POSSIBLE DELOCALISATION LENGTH FOR PENNING TRANSFER
       if(PENFRA[2,I] == 0.0):
 :
        XS(NCLUS)=X      
        YS(NCLUS)=Y
        ZS(NCLUS)=Z   
        NFLGFC(NCLUS)=NFLGFF
        NFLGPPC(NCLUS)=NFLGPPP
        NFLGBRMC(NCLUS)=NFLGBRMM
        GO TO 667
       # endif
       ASIGN=1.0
       RAN=DRAND48(RDUM)
       RAN1=DRAND48(RDUM)
       if(RAN1 < 0.5):
 ASIGN=-ASIGN
       XS(NCLUS)=X-math.log(RAN)*PENFRA[2,I]*ASIGN
       RAN=DRAND48(RDUM)
       RAN1=DRAND48(RDUM)
       if(RAN1 < 0.5):
 ASIGN=-ASIGN
       YS(NCLUS)=Y-math.log(RAN)*PENFRA[2,I]*ASIGN
       RAN=DRAND48(RDUM)
       RAN1=DRAND48(RDUM)
       if(RAN1 < 0.5):
 ASIGN=-ASIGN
       ZS(NCLUS)=Z-math.log(RAN)*PENFRA[2,I]*ASIGN
  667  RAN=DRAND48(RDUM)           
       TS(NCLUS)=ST-math.log(RAN)*PENFRA[3,I] 
# ASSIGN EXCESS ENERGY OF 1EV TO PENNING CREATED ELECTRON
       ES(NCLUS)=1.0
       DCX(NCLUS)=DCX1
       DCY(NCLUS)=DCY1
       DCZ[NCLUS]=DCZ1
       GO TO 6
      # endif
#     GO TO 6 
# CALCULATE SUM OF EXCITATION PER CLUSTER AND STORE EXCITATION X Y Z T
   5  if(IPN[I] == 0) :
       if((RGAS[I]:
*EIN[I]) > 4.0) :
        KEXC=KEXC+1
        if(KEXC > 150000):
 : 
         WRITE(6,548) KEXC 
 548     print(2X,' def STOPPED . KEXC=',I7)
         STOP
        # endif
# FIND GAS IN WHICH EXCITATION OCCURED AND INCREMENT COUNTER
        if(I <= IDG1):
 : 
         NGEXC1=NGEXC1+1
        else if(I <= IDG2) :
         NGEXC2=NGEXC2+1
        else if(I <= IDG3) :
         NGEXC3=NGEXC3+1
        else if(I <= IDG4) :
         NGEXC4=NGEXC4+1
        else if(I <= IDG5) :
         NGEXC5=NGEXC5+1
        else if(I <= IDG6) :
         NGEXC6=NGEXC6+1
        else:
         WRITE(6,9911) 
 9911    print(' def STOPPED BAD GAS ID IN MONTE')
         STOP
        # endif
        NEXCTOT=NEXCTOT+1
        NSTEXC=NSTEXC+1
        XSTEXC(KEXC)=X
        YSTEXC(KEXC)=Y
        ZSTEXC(KEXC)=Z
        TSTEXC(KEXC)=ST
       # endif
      # endif 
   6  S2=(S1*S1)/(S1-1.00) 
# ANISOTROPIC SCATTERING
      R3=DRAND48(RDUM)     
      if(INDEX[I]:
 == 1) :
       R31=DRAND48(RDUM)
       F3=1.00-R3*ANGCT(IE,I)        
       if(R31 > PSCT(IE,I):
) F3=-F3     
      else if (INDEX[I] == 2) :
       EPSI=PSCT(IE,I)
       F3=1.00-(2.00*R3*(1.00-EPSI)/(1.00+EPSI*(1.00-2.00*R3)))  
      else:     
# ISOTROPIC SCATTERING                                                 
       F3=1.00-2.00*R3  
      # endif
      THETA0=numpy.arccos(F3)                                                  
      R4=DRAND48(RDUM)
      PHI0=F4*R4                                                        
      F8=DSIN(PHI0)                                                     
      F9=DCOS(PHI0)                                                     
      if(E < EI):
 EI=0.00                                              
      ARG1=1.00-S1*EI/E                                                
      ARG1=DMAX1(ARG1,SMALL)                                            
      D=1.00-F3*math.sqrt(ARG1)                                            
      E1=E*(1.00-EI/(S1*E)-2.00*D/S2) 
      E1=DMAX1(E1,SMALL)                                                
      Q=math.sqrt((E/E1)*ARG1)/S1                                           
      Q=DMIN1(Q,1.00)                                                  
      THETA=DASIN(Q*DSIN(THETA0))                                       
      F6=DCOS(THETA)                                                    
      U=(S1-1.00)*(S1-1.00)/ARG1                                      
      CSQD=F3*F3                                                        
      if(F3 < 0.00 and CSQD > U):
 F6=-1.00*F6                        
      F5=DSIN(THETA)                                                    
      DCZ2=DMIN1(DCZ2,1.00)   
      ARGZ=math.sqrt(DCX2*DCX2+DCY2*DCY2)
      if(ARGZ == 0.00):
 :
       DCZ1=F6         
       DCX1=F9*F5                             
       DCY1=F8*F5
       if(NTMPFLG == 1):
 :
# USE FREE KINEMATICS FOR IONISATION SECONDARY ANGLES
        F5S=F5*math.sqrt(E1/ES(NCLTMP))
        if(F5S >= 1.0):
 F5S=0.999
        THSEC=DASIN(F5S)
        F5S=DSIN(THSEC)
        F6S=DCOS(THSEC)
        if(F6 < 0.0):
 F6S=-F6S
        PHIS=PHI0+API   
        if(PHIS > F4):
 PHIS=PHI0-F4
        F8S=DSIN(PHIS)
        F9S=DCOS(PHIS)
        DCZ[NCLTMP]=F6S
        DCX(NCLTMP)=F9S*F5S
        DCY(NCLTMP)=F8S*F5S
        NTMPFLG=0
       # endif
       GO TO 190
      # endif      
      DCZ1=DCZ2*F6+ARGZ*F5*F8   
      DCY1=DCY2*F6+(F5/ARGZ)*(DCX2*F9-DCY2*DCZ2*F8)                     
      DCX1=DCX2*F6-(F5/ARGZ)*(DCY2*F9+DCX2*DCZ2*F8) 
      if(NTMPFLG == 1):
 :
# USE FREE KINEMATICS FOR IONISATION SECONDARY ANGLES
       F5S=F5*math.sqrt(E1/ES(NCLTMP))
       if(F5S >= 1.0):
 F5S=0.999          
       THSEC=DASIN(F5S)
       F5S=DSIN(THSEC)
       F6S=DCOS(THSEC)
       if(F6 < 0.0):
 F6S=-F6S
       PHIS=PHI0+API   
       if(PHIS > F4):
 PHIS=PHI0-F4
       F8S=DSIN(PHIS)
       F9S=DCOS(PHIS)
       DCZ[NCLTMP]=DCZ2*F6S+ARGZ*F5S*F8S                               
       DCY(NCLTMP)=DCY2*F6S+(F5S/ARGZ)*(DCX2*F9S-DCY2*DCZ2*F8S)        
       DCX(NCLTMP)=DCX2*F6S-(F5S/ARGZ)*(DCY2*F9S+DCX2*DCZ2*F8S)
       NTMPFLG=0
      # endif 
  190 CONTINUE  
#     VTOT=CONST9*math.sqrt(E1)
      GAM1=(EMS+E1)/EMS
      BET1=math.sqrt(1.00-1.00/(GAM1*GAM1))
      VTOT=BET1*VC*1.0D-12
      CX1=DCX1*VTOT
      CY1=DCY1*VTOT
      CZ1=DCZ1*VTOT
# TEST IF ELECTRON IS THERMALISED
      if(E1 > ETHRM):
 GO TO 1
# STORE POSITION AND TIME OF THERMALISED ELECTRON
  191 CONTINUE
      K1=K1+1
      XST(K1)=X
      YST(K1)=Y
      ZST(K1)=Z
      TST(K1)=ST
      NFGF(K1)=NFLGFF
      NFGPP(K1)=NFLGPPP
      NFGBR(K1)=NFLGBRMM
      TTIME(K1)=ST-TLAST
      NELEC=NELEC+1
      NETOT=NETOT+1
#     WRITE(6,777) XST(K1),YST(K1),ZST(K1),TST(K1),NFGF(K1),NFGPP(K1),
#    /NFGBR(K1),NELEC,NETOT,K1
# 777 print(' XST=',D12.4,' YST=',D12.4,' ZST=',D12.4,' TST=',D12.4,/,
#    /' NFGF=',I4,' NFGPP=',I4,' NFGBR=',I4,' NELEC=',I4,' NETOT=',I4,
#    /' K1=',I4)
  335 if(K1 == 150000) GO TO 889
      if(NELEC == (NCLUS+1):
) :
# LAST ELECTRON IN CLUSTER, DO STATISTICS ON PRIMARY
       CALL STATS(J11,J1)
       GO TO 210 
      # endif
# GET NEW IONISATION ELECTRON FROM STORE
      X=XS(NELEC)
      Y=YS(NELEC)
      Z=ZS(NELEC)
      ST=TS(NELEC)
      NFLGFF=NFLGFC(NELEC)
      NFLGPPP=NFLGPPC(NELEC)
      NFLGBRMM=NFLGBRMC(NELEC)
      TLAST=TS(NELEC)
      E1=ES(NELEC)
      DCX1=DCX(NELEC)
      DCY1=DCY(NELEC)
      DCZ1=DCZ[NELEC] 
#     IF(NELEC > 94) WRITE(6,766) X,Y,Z,ST,E1,DCX1,DCY1,DCZ1,NELEC
# 766 print(' X=',D12.4,' Y=',D12.4,' Z=',D12.4,' T=',D12.4,/,' E=',
#    /D12.4,' DCX=',D12.4,' DCY=',D12.4,' DCZ=',D12.4,' NELEC=',I6,/)
# STORE ALREADY THERMALISED ELECTRONS
      if(E1 < ETHRM):
 GO TO 191 
      GO TO 1  
# MAIN LOOP # end   
  210 CONTINUE
# RESET NUMBER OF EVENTS FOR BAD EVENTS
      if(IMIP > 2):
 NDELTA=NDELTA-IBADTOT
#
      WRITE(6,887) EMAX,NEOVFL
  887 print(' EMAX=',D12.7,' NEOVFL =',I5)
      if(EMAX > EFINAL):
 :
      WRITE(6,989) EFINAL,EMAX
  989 print('INCREASE ENERGY LIMIT FROM',D12.6,' EV TO AT LEAST',D12.6,' EV.')
      STOP
      # endif                                         
      RETURN 
  889 NLEFT=NCLUS-NELEC
      WRITE(6,992) NPRIME,NLEFT,NCLUS
  992 print(3(/),' WARNING STOPPED AFTER NPRIME=',I6,' LAST PRIMARY HAS AT LEAST ',I6,' SECONDARIES LEFT TO TRACK, OUT OF ',I6,' ELECTRONS ALREADY IN CLUSTER')
      STOP
      RETURN
      # end
      def MONTEFB                                                :
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/INPT1/NDVEC
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,TCFMAX(10),TCFMAX1,RSTART,EFIELD,ETHRM,ECUT,NDELTA,IMIP,IWRITE 
      COMMON/BFLD/EOVB,WB,BTHETA,BMAG                                   
      COMMON/LARGE/CF(20000,512),EIN(512),TCF(20000),IARRY(512),    RGAS(512),IPN(512),WPL(512),IZBR(512),IPLAST,PENFRA[3,512]
      COMMON/LARGEN/CFN(20000,60),TCFN(20000),SCLENUL(60),NPLAST
      COMMON/OUTPT/ICOLL(30),NETOT,NPRIME,TMAX1,TIME(300),NNULL, NITOT,ICOLN(512),ICOLNN(60),NREAL,NEXCTOT  
      COMMON/RLTVY/BET[20]00),GAM(20000),VC,EMS
      COMMON/STTS/XST(150000),YST(150000),ZST(150000),TST(150000),TTIME(150000),NFGF(150000),NFGPP(150000),NFGBR(150000),NELEC,NEGION,EST1,EST2
      COMMON/STEXC/XSTEXC(150000),YSTEXC(150000),ZSTEXC(150000),TSTEXC(150000),NSTEXC
      COMMON/STEXCNUL/XSTN(150000),YSTN(150000),ZSTN(150000),TSTN(150000),IDNUL(150000),NEXCNUL
      COMMON/IONC/DOUBLE(6,20000),CMINIXSC(6),CMINEXSC(6),ECLOSS(6),WPLN(6),ICOUNT,AVPFRAC(3,6)
      COMMON/IONFL/NC0(512),EC0(512),NG1(512),EG1(512),NG2(512),EG2(512),WKLM(512),DSTFL(512)
      COMMON/IONMOD/ESPLIT(512,20),IONMODEL(512) 
      COMMON/ANIS/PSCT(20000,512),ANGCT(20000,512),INDEX(512),NISO 
      COMMON/CASRS/ECAS(400),XCAS(400),YCAS(400),ZCAS(400),DRXS(400),DRYS(400),DRZS(400),TT1(400),NFLGF(400),NFLGPP(400),IEVNTL
      COMMON/COMP/LCMP,LCFLG,LRAY,LRFLG,LPAP,LPFLG,LBRM,LBFLG,LPEFLG
      COMMON/BREMG/EBRGAM(10),BRDCOSX(10),BRDCOSY(10),BRDCOSZ[10],BRX(10),BRY(10),BRZ[10],BRT(10),EBRTOT(6),NBREM(6)
      COMMON/CASRSB/ECASB[400],XCASB[400],YCASB[400],ZCASB[400],DRXB[400],DRYB[400],DRZB[400],TTB1(400),NFLGFB[400],NFLGPPB[400],IEVNTLB
      COMMON/CASRSE/ECASE(400),XCASE(400),YCASE(400),ZCASE(400),DRXCE(400),DRYCE(400),DRZCE(400),TCASE(400),NFLGFE(400),NFLGPPE(400),IEVENTE
      COMMON/ECASC/NEGAS(512),LEGAS(512),IESHELL(512),IECASC
      COMMON/IDEXC/NGEXC1,NGEXC2,NGEXC3,NGEXC4,NGEXC5,NGEXC6,IDG1,IDG2,IDG3,IDG4,IDG5,IDG6
      DIMENSION XS(150000),YS(150000),ZS(150000),TS(150000),ES(150000),DCX(150000),DCY(150000),DCZ[150000],NFLGFC(150000),NFLGPPC(150000),NFLGBRMC(150000)           
      DIMENSION TEMP(20000)   
# -------------------------------------------------------------------  
#  RELATIVISTIC VERSION
#  ELECTRIC FIELD ALONG Z-AXIS MAGNETIC FIELD ALONG  X-AXIS.
#  TRACKS DELTA ELECTRONS AND UPDATES ARRAYS CONTAINING POSITION AND
#  TIME OF THERMALISED ELECTRONS.
#  CALCULATES NUMBER OF PRODUCED ELECTRONS PER PRIMARY DELTA AND OTHER
#  HIGHER FANO FACTORS .
# ------------------------------------------------------------------- 
# VARYING ENERGY STEPS
      if(EFINAL <= 140000.):
 :
        ESTEP1=(EFINAL-16000.0)/float(4000)
      else:
        ESTEP1=20.0
        ESTEP2=(EFINAL-92000.0)/float(4000)
      # endif
      NPRINT=0
      J20000=20000
      J300=300
      API=numpy.arccos(-1.00)
      SMALL=1.0D-20         
      EMAX=0.00                                            
      TMAX1=0.00                                                       
      RDUM=RSTART                                                       
      CONST9=CONST3*0.010
      DO 25 I=1,300
   25 TIME[I]=0.00
      DO 26 I=1,30
   26 ICOLL[I]=0
      DO 27 I=1,512
   27 ICOLN[I]=0
      NREAL=0                                                           
      NNULL=0
      NETOT=0
      NEXCTOT=0
      NITOT=0
      NMXADD=0
      NTMPFLG=0
      THETA1=THETA
      PHI1=PHI
      F4=2.00*API
      NEOVFL=0
# CALCULATE MAXIMUM COLLISION FREQUENCY
      TLIM=0.0
      DO 111 J=1,20000
      TEMP[J]=TCFN[J]+TCF[J]
      if(TLIM < TEMP[J]:
) TLIM=TEMP[J] 
  111 CONTINUE
      J1=0
# START OF PRIMARY EVENT LOOP
      DO 210 J11=1,NDELTA
      J1=J1+1
      NPRIME=J1   
      NGEXC1=0
      NGEXC2=0
      NGEXC3=0
      NGEXC4=0
      NGEXC5=0
      NGEXC6=0
#     INITIAL DIRECTION COSINES                                         
      DCZ1=DCOS(THETA1) 
      DCX1=DSIN(THETA1)*DCOS(PHI1)                                      
      DCY1=DSIN(THETA1)*DSIN(PHI1) 
      NFLGFF=0
      NFLGPPP=0
      NFLGBRMM=0
      NFLGHIGH=0
      EST1=ESTART
# INITIAL VELOCITY,TIME AND POSITION
      E1=ESTART
      GAM1=(EMS+E1)/EMS
      GAM12=GAM1
      BET1=math.sqrt(1.00-1.00/(GAM1*GAM1))
      VTOT=BET1*VC*1.0D-12
#     VTOT=CONST9*math.sqrt(E1)       
      CX1=DCX1*VTOT
      CY1=DCY1*VTOT
      CZ1=DCZ1*VTOT      
      X=0.00
      Y=0.00
      Z=0.00 
      K1=0
      KEXC=0
      NSTEXC=0
      NEXCNUL=0
      NCLUS=0
      NELEC=0
      NEGION=0
      TLAST=0.00
      ST=0.00
      TDASH=0.00
      if(IMIP == 2):
 GO TO 1
      if(IMIP > 2):
 :
# READ IN FIRST ELECTRON FROM BETA DECAY OR XRAY UNTHERMALISED CLUSTERS
       CALL CASRES(J11,IBADTOT,IBAD1)
#  SKIP IF BAD EVENT
       if(IBAD1 == 1):
 :
        J1=J1-1
        GO TO 210
       # endif 
      else if(IMIP == 1) :
# READ IN FIRST ELECTRON FROM MIP INTERACTION
       CALL CASREM(J11)
       EST1=ECAS[1]
       EST2=EST1
      # endif
      X=XCAS[1]
      Y=YCAS[1]
      Z=ZCAS[1]
      ST=TT1[1]
      TS[1]=TT1[1]
      E1=ECAS[1]
      DCZ1=DRZS[1]
      DCY1=DRYS[1]
      DCX1=DRXS[1]
      NFLGFF=NFLGF[1]
      NFLGPPP=NFLGPP[1]
      NFLGBRMM=0
      NFLGHIGH=NFLGFF
      GAM1=(EMS+E1)/EMS
      BET1=math.sqrt(1.00-1.00/(GAM1*GAM1))
      VTOT=VC*BET1*1.0D-12
#     VTOT=CONST9*math.sqrt(E1)
      CX1=DCX1*VTOT
      CY1=DCY1*VTOT
      CZ1=DCZ1*VTOT
# PUT REMAINDER OF ELECTRONS INTO CLUSTER STORE
      ISDUM=0
      DO 35 IST=2,IEVNTL
      ISDUM=ISDUM+1
      XS(ISDUM)=XCAS(IST)
      YS(ISDUM)=YCAS(IST)
      ZS(ISDUM)=ZCAS(IST)
      TS(ISDUM)=TT1(IST)
      ES(ISDUM)=ECAS(IST)
      DCX(ISDUM)=DRXS(IST)
      DCY(ISDUM)=DRYS(IST)
      DCZ[ISDUM]=DRZS(IST)
      NFLGFC(ISDUM)=NFLGF(IST)
      NFLGPPC(ISDUM)=NFLGPP(IST)
      NFLGBRMC(ISDUM)=0
      NCLUS=ISDUM
      if(NFLGFC(IST):
 > NFLGHIGH) NFLGHIGH=NFLGFC(IST)
   35 CONTINUE
      GAM12=GAM1
# START OF LOOP FOR NEWLY CREATED ELECTRONS                             
    1 CONTINUE                                                          
      R1=DRAND48(RDUM)
      T=-math.log(R1)/TLIM+TDASH
      TDASH=T
      WBT=WB*T/GAM12
#     WBT=WB*T
      COSWT=DCOS(WBT)
      SINWT=DSIN(WBT)
      DZ=GAM12*(CZ1*SINWT+(EOVB-CY1)*(1.00-COSWT))/WB
#     DZ=(CZ1*SINWT+(EOVB-CY1)*(1.00-COSWT))/WB 
      E=E1+DZ*EFIELD*100.00
      GAM2=(EMS+E)/EMS
      BET2=math.sqrt(1.00-1.00/(GAM2*GAM2))
#913  print(3X,' AFTER STORE NREAL=',I10,' DZ=','%.3f' %,'E1=','%.3f' %,' COS
#    /WT=','%.3f' %,' SINWT=','%.3f' %,' WBT=','%.3f' %,' CY1=','%.3f' %)   
      if(E < 0.00):
 :
#      IF(NPRINT == 0) WRITE(6,913)NREAL,DZ,E1,COSWT,SINWT,WBT,CY1
#      NPRINT=1  
       E=0.0010
      # endif                                                   
# INSERT NEW ALGORITHM TO FIND IE FOR VARYING ENERGY STEP          
      if(IMIP == 1):
 :                                     
       IE=DINT(E/ESTEP)+1                                               
      else:
       if(EFINAL <= 20000.):
 :
        IE=DINT(E/ESTEP)+1
       else if(EFINAL <= 140000.) :
        if(E <= 16000.):
 :
         IE=DINT(E)+1
        else:
         IE=16000+DINT((E-16000.)/ESTEP1)
        # endif
       else:
        if(E <= 12000.):
 :
         IE=DINT(E)+1
        else if(E <= 92000.) :
         IE=12000+DINT((E-12000.)/ESTEP1)
        else:
         IE=16000+DINT((E-92000.)/ESTEP2)
        # endif
       # endif
      # endif 
      IE=DMIN0(IE,J20000)                                            
#                                                                       
#     TEST FOR #real OR NULL COLLISION                                   
#                                                                       
      R5=DRAND48(RDUM)
      TEST1=TCF(IE)/TLIM                                                
      if(R5 <= TEST1):
 GO TO 137                                        
      NNULL=NNULL+1                     
      TEST2=TEMP(IE)/TLIM
      if(R5 < TEST2):
 :
# TEST FOR NULL LEVELS
       if(NPLAST == 0):
 GO TO 1
       R2=DRAND48(RDUM) 
       I=0
  888  I=I+1
       if(CFN(IE,I):
 < R2) GO TO 888
# INCREMENT NULL LEVEL SUM
       NEXCNUL=NEXCNUL+1
       ICOLNN[I]=ICOLNN[I]+1
# STORE X Y Z T ID FOR MOLECULAR LIGHT EMISSION AND DISSOCIATION FROM 
#    NULL EXCITATION
# NOTE: SMALL APPROX USED POSITION OF PREVIOUS #real COLLISION
       XSTN(NEXCNUL)=X
       YSTN(NEXCNUL)=Y
       ZSTN(NEXCNUL)=Z
       TSTN(NEXCNUL)=ST
       IDNUL(NEXCNUL)=I                            
       GO TO 1     
      else:
# NULL
       GO TO 1
      # endif                                                     
#                                                                       
#  CALCULATE DIRECTION COSINES AND POSITIONS AT INSTANT BEFORE COLLISION
  137 T2=T*T
      if(E > EMAX):
 EMAX=E
      if(T > TMAX1):
 TMAX1=T
      TDASH=0.00 
      NREAL=NREAL+1
# CALC VELOCITY
      CX2=CX1
      CY2=(CY1-EOVB)*COSWT+CZ1*SINWT+EOVB
      CZ2=CZ1*COSWT-(CY1-EOVB)*SINWT
# CALC DIRECTION COSINES
      VTOT=math.sqrt(CX2*CX2+CY2*CY2+CZ2*CZ2)
      DCX2=CX2/VTOT
      DCY2=CY2/VTOT
      DCZ2=CZ2/VTOT                                                     
# CALC NEW POSITION                                                
      X=X+CX1*T                                                         
      Y=Y+EOVB*T+GAM12*((CY1-EOVB)*SINWT+CZ1*(1.00-COSWT))/WB
      Z=Z+DZ 
      GAM12=(GAM1+GAM2)/2.00         
      ST=ST+T
      IT=DINT(T+1.00)                                                  
      IT=DMIN0(IT,J300)                                               
      TIME(IT)=TIME(IT)+1.00                                           
# --------------------------------------------------------------------- 
#     DETERMINATION OF #real COLLISION TYPE                              
# --------------------------------------------------------------------- 
      R2=DRAND48(RDUM)
      I=0                                                               
  140 I=I+1                                                             
      if(CF(IE,I):
 < R2) GO TO 140      
#************************************************************
# CHECK IF BREMSSTRAHLUNG
      if(IZBR[I]:
 != 0 and LBRM == 1) :
       NFLGBRMM=1
       IPT=IARRY[I]
       ICOLL(IPT)=ICOLL(IPT)+1
       ICOLN[I]=ICOLN[I]+1
       DO 141 KNGS=1,NGAS
       if(IPT == (KNGS*5):
-1) GO TO 142
  141  CONTINUE
  142  IATOMNO=IZBR[I] 
       CALL BREMS(IATOMNO,E,DCX2,DCY2,DCZ2,EOUT,EDCX,EDCY,EDCZ,EGAMMA,GDCX,GDCY,GDCZ)
       NBREM(KNGS)=NBREM(KNGS)+1
       EBRTOT(KNGS)=EBRTOT(KNGS)+EGAMMA
#      WRITE(6,668) EGAMMA,J11   
# 668 print(' BREM EGAMMA=',D12.4,' EVENT NO=',I5)
# GET  NEW DRCOS DRCOSY DRCOSX AND ENERGY OF ELECTRON
       E1=EOUT
       DCX1=EDCX
       DCY1=EDCY
       DCZ1=EDCZ
# RUN BREMSSTRAHLUNG GAMMA THROUGH CASCADE : STORE CONVERTED
# ELECTRONS IN COMMON/CASRSB/
# 
       CALL BREMSCASC(J11,EGAMMA,X,Y,Z,ST,GDCX,GDCY,GDCZ,ILOW)
# BREMSSTRAHLUNG ENERGY TOO LOW TO IONISE
       if(ILOW == 1):
 GO TO 190
# 
# STORE BREMSSTARHLUNG DATA IN CLUSTER STORE
#
       DO 890 KBR=1,IEVNTLB
       NCLUS=NCLUS+1
       if(NCLUS > 150000):
 : 
        WRITE(6,546) NCLUS,NREAL
        STOP
       # endif     
       ES(NCLUS)=ECASB[KBR]
       XS(NCLUS)=XCASB[KBR]
       YS(NCLUS)=YCASB[KBR]
       ZS(NCLUS)=ZCASB[KBR]
       TS(NCLUS)=TTB1(KBR)
       DCX(NCLUS)=DRXB[KBR]
       DCY(NCLUS)=DRYB[KBR]
       DCZ[NCLUS]=DRZB[KBR]
       NFLGFC(NCLUS)=NFLGFB[KBR]+NFLGHIGH
       NFLGPPC(NCLUS)=NFLGPPB[KBR]
       NFLGBRMC(NCLUS)=2
  890  CONTINUE
       if(NFLGFC(NCLUS):
 > NFLGHIGH) NFLGHIGH=NFLGFC(NCLUS)
       GO TO 190
      # endif
  891 CONTINUE
#****************************************************************
#     S1=RGAS[I]                   
      S1=1.00+GAM2*(RGAS[I]-1.00)  
      EI=EIN[I]
      if(E < EI):
 :
      EI=E-0.00010
      # endif                                                          
      if(IPN[I]:
 == 0) GO TO 666
# ATTACHMENT       
      if(IPN[I]:
 == -1) :
       NETOT=NETOT+1
       NITOT=NITOT+1
       NELEC=NELEC+1
       NEGION=NEGION+1
       IPT=IARRY[I]
       ICOLL(IPT)=ICOLL(IPT)+1
       ICOLN[I]=ICOLN[I]+1 
       IT=DINT(T+1.00)
       IT=DMIN0(IT,J300)
       TIME(IT)=TIME(IT)+1.00
       GO TO 335
      # endif   
      EISTR=EI
      if(IONMODEL[I]:
 > 0) :
# CALCULATE SECONDARY ENERGY,ESEC,IN IONISATION COLLISION USING
# FIVE DIFFERENT MODELS
       CALL IONSPLIT(I,E,EI,ESEC)
       GO TO 544
      # endif
      R9=DRAND48(RDUM)
#    USE OPAL PETERSON AND BEATY SPLITTING FACTOR.
      ESEC=WPL[I]*TAN(R9*ATAN((E-EI)/(2.00*WPL[I]))) 
      ESEC=WPL[I]*(ESEC/WPL[I])**0.9524
  544 CONTINUE
      EI=ESEC+EI 
# STORE POSITION ,ENERGY, DIRECTION COSINES AND TIME OF GENERATION
# OF SECONDARY IONISATION ELECTRON 
      NCLUS=NCLUS+1
      NMXADD=MAX(NCLUS,NMXADD)
      if(NCLUS > 150000):
 : 
       WRITE(6,546) NCLUS,NREAL
 546   print(2X,' def STOPPED . NCLUS=',I7,' NREAL=',I10)
       STOP
      # endif     
      XS(NCLUS)=X       
      YS(NCLUS)=Y
      ZS(NCLUS)=Z
      TS(NCLUS)=ST
      ES(NCLUS)=ESEC 
      NFLGFC(NCLUS)=NFLGFF
      NFLGPPC(NCLUS)=NFLGPPP
      NFLGBRMC(NCLUS)=NFLGBRMM
      NTMPFLG=1
      NCLTMP=NCLUS
# RANDOMISE SECONDARY ELECTRON DIRECTION
#     R3=drand48(RDUM)
#     F3=1.0-2.00*R3
#     THETA0=DACOS(F3)
#     F6=DCOS(THETA0)
#     F5=DSIN(THETA0)
#     R4=drand48(RDUM)
#     PHI0=F4*R4
#     F8=DSIN(PHI0)
#     F9=DCOS(PHI0)               
#     DCX(NCLUS)=F9*F5
#     DCY(NCLUS)=F8*F5
#     DCZ[NCLUS]=F6    
#*********************************************************
      if(IECASC == 0):
GO TO 333
      if(LEGAS[I]:
 == 0) GO TO 333
# USE COMPLETE CASCADE FOR ELECTRON IONISATION
      KG1=NEGAS[I]
      LG1=LEGAS[I]
      IGSHEL=IESHELL[I]
      CALL CASCADEE(J11,KG1,LG1,X,Y,Z,ST,ESEC,IGSHEL)
#
# STORE CASCADE IN CLUSTER STORE
#
      ETSUM=0.0
      DO 844 KBR=1,IEVENTE
      NCLUS=NCLUS+1
      if(NCLUS > 150000):
 :
       WRITE(6,546) NCLUS,NREAL
       STOP
      # endif
      ES(NCLUS)=ECASE(KBR)
      ETSUM=ETSUM+ES(NCLUS)
      XS(NCLUS)=XCASE(KBR)
      YS(NCLUS)=YCASE(KBR)
      ZS(NCLUS)=ZCASE(KBR)
      TS(NCLUS)=TCASE(KBR)
      DCX(NCLUS)=DRXCE(KBR)
      DCY(NCLUS)=DRYCE(KBR)
      DCZ[NCLUS]=DRZCE(KBR)
      NFLGFC(NCLUS)=NFLGFE(KBR)+NFLGHIGH
      NFLGPPC(NCLUS)=NFLGPPE(KBR)
      NFLGBRMC(NCLUS)=NFLGBRMM
  844 CONTINUE
      if(NFLGFC(NCLUS):
 > NFLGHIGH) NFLGHIGH=NFLGFC(NCLUS)
      GO TO 666
#*********************************************************
# STORE POSSIBLE SHELL EMISSIONS AUGER OR FLUORESCENCE 
  333 if(EISTR > 30.0) :
# TEST IF FLUORESCENCE EMISSION
       ifLTST=0:
       if(WKLM[I]:
 > 0.0) :
        R9=DRAND48(RDUM)
        if(R9 < WKLM[I]:
) ifLTST=1
       # endif
       if(ifLTST == 0):
 :
# AUGER EMISSION WITHOUT FLUORESCENCE
        NAUG=NC0[I]
        EAVAUG=EC0[I]/float(NAUG)
        DO 700 JFL=1,NC0[I]
        NCLUS=NCLUS+1
        XS(NCLUS)=X
        YS(NCLUS)=Y
        ZS(NCLUS)=Z
        TS(NCLUS)=ST
        NFLGFC(NCLUS)=NFLGFF
        NFLGPPC(NCLUS)=NFLGPPP
        NFLGBRMC(NCLUS)=NFLGBRMM
        ES(NCLUS)=EAVAUG
        R3=DRAND48(RDUM)
        F3=1.0-2.00*R3
        THETA0=numpy.arccos(F3)
        F6=DCOS(THETA0)
        F5=DSIN(THETA0)
        R4=DRAND48(RDUM)
        PHI0=F4*R4
        F8=DSIN(PHI0)
        F9=DCOS(PHI0)               
        DCX(NCLUS)=F9*F5
        DCY(NCLUS)=F8*F5
        DCZ[NCLUS]=F6
  700   CONTINUE 
       else:
# AUGER EMISSION AND FLUORESENCE 
        if(NG2[I]:
 == 0) GO TO 702
        NAUG=NG2[I]
        EAVAUG=EG2[I]/float(NAUG)
        DO 701 JFL=1,NG2[I]
        NCLUS=NCLUS+1
        XS(NCLUS)=X
        YS(NCLUS)=Y
        ZS(NCLUS)=Z
        NFLGFC(NCLUS)=NFLGFF
        NFLGPPC(NCLUS)=NFLGPPP
        NFLGBRMC(NCLUS)=NFLGBRMM
        TS(NCLUS)=ST
        ES(NCLUS)=EAVAUG
        R3=DRAND48(RDUM)
        F3=1.0-2.00*R3
        THETA0=numpy.arccos(F3)
        F6=DCOS(THETA0)
        F5=DSIN(THETA0)
        R4=DRAND48(RDUM)
        PHI0=F4*R4
        F8=DSIN(PHI0)
        F9=DCOS(PHI0)               
        DCX(NCLUS)=F9*F5
        DCY(NCLUS)=F8*F5
        DCZ[NCLUS]=F6
  701   CONTINUE
  702   if(NG1[I] == 0) GO TO 704
        NAUG=NG1[I]
        EAVAUG=EG1[I]/float(NAUG)
        R9=DRAND48(RDUM)
        DFL=-math.log(R9)*DSTFL[I]
        DO 703 JFL=1,NG1[I]
        NCLUS=NCLUS+1
        R3=DRAND48(RDUM)
        THEFL=numpy.arccos(1.0-2.00*R3)
        R4=DRAND48(RDUM)
        PHifL=F4*R4
        XS(NCLUS)=X+DFL*DSIN(THEFL)*DCOS(PHifL)
        YS(NCLUS)=Y+DFL*DSIN(THEFL)*DSIN(PHifL)
        ZS(NCLUS)=Z+DFL*DCOS(THEFL)
        NFLGFC(NCLUS)=NFLGHIGH+1
        NFLGPPC(NCLUS)=NFLGPPP
        NFLGBRMC(NCLUS)=NFLGBRMM
        TS(NCLUS)=ST
        ES(NCLUS)=EAVAUG
        R3=DRAND48(RDUM)
        F3=1.0-2.00*R3
        THETA0=numpy.arccos(F3)
        F6=DCOS(THETA0)
        F5=DSIN(THETA0)
        R4=DRAND48(RDUM)
        PHI0=F4*R4
        F8=DSIN(PHI0)
        F9=DCOS(PHI0)               
        DCX(NCLUS)=F9*F5
        DCY(NCLUS)=F8*F5
        DCZ[NCLUS]=F6
        NFLGHIGH=NFLGFC(NCLUS)
  703   CONTINUE
  704   CONTINUE
       # endif
      # endif
#                                                                       
#  GENERATE SCATTERING ANGLES AND UPDATE  LABORATORY COSINES AFTER      
#   COLLISION ALSO UPDATE ENERGY OF ELECTRON.                           
#
  666 IPT=IARRY[I]
      ICOLL(IPT)=ICOLL(IPT)+1 
      ICOLN[I]=ICOLN[I]+1      
# IF EXCITATION : ADD PROBABILITY ,PENFRA(1,I), OF TRANSFER TO GIVE 
# IONISATION OF THE OTHER GASES IN MIXTURE              
      if(IPEN == 0 or NGAS == 1):
 GO TO 5          
      if(PENFRA[1,I] != 0.0):
 :
       RAN=DRAND48(RDUM) 
       if(RAN > PENFRA[1,I]):
 GO TO 5
       NCLUS=NCLUS+1    
# ENTER HERE POSSIBLE DELOCALISATION LENGTH FOR PENNING TRANSFER
       if(PENFRA[2,I] == 0.0):
 :
        XS(NCLUS)=X  
        YS(NCLUS)=Y    
        ZS(NCLUS)=Z
        NFLGFC(NCLUS)=NFLGFF
        NFLGPPC(NCLUS)=NFLGPPP
        NFLGBRMC(NCLUS)=NFLGBRMM
        GO TO 667
       # endif
       ASIGN=1.0
       RAN=DRAND48(RDUM)
       RAN1=DRAND48(RDUM)
       if(RAN1 < 0.5):
 ASIGN=-ASIGN
       XS(NCLUS)=X-math.log(RAN)*PENFRA[2,I]*ASIGN
       RAN=DRAND48(RDUM)
       RAN1=DRAND48(RDUM)
       if(RAN1 < 0.5):
 ASIGN=-ASIGN
       YS(NCLUS)=Y-math.log(RAN)*PENFRA[2,I]*ASIGN
       RAN=DRAND48(RDUM)
       RAN1=DRAND48(RDUM)
       if(RAN1 < 0.5):
 ASIGN=-ASIGN
       ZS(NCLUS)=Z-math.log(RAN)*PENFRA[2,I]*ASIGN
  667  RAN=DRAND48(RDUM)
       TS(NCLUS)=ST-math.log(RAN)*PENFRA[3,I]
# ASSIGN EXCESS ENERGY OF 1EV TO PENNING CREATED ELECTRON
       ES(NCLUS)=1.0 
       DCX(NCLUS)=DCX1
       DCY(NCLUS)=DCY1
       DCZ[NCLUS]=DCZ1
       GO TO 6
      # endif
#     GO TO 6
# CALCULATE SUM OF EXCITATION PER CLUSTER AND STORE EXCITATION X Y Z T
   5  if(IPN[I] == 0) :
       if((RGAS[I]:
*EIN[I]) > 4.0) :
        KEXC=KEXC+1
        if(KEXC > 150000):
 : 
         WRITE(6,548) KEXC
 548     print(2X,' def STOPPED . KEXC=',I7)
         STOP
        # endif
# FIND GAS IN WHICH EXCITATION OCCURED AND INCREMENT COUNTER
        if(I <= IDG1):
 : 
         NGEXC1=NGEXC1+1
        else if(I <= IDG2) :
         NGEXC2=NGEXC2+1
        else if(I <= IDG3) :
         NGEXC3=NGEXC3+1
        else if(I <= IDG4) :
         NGEXC4=NGEXC4+1
        else if(I <= IDG5) :
         NGEXC5=NGEXC5+1
        else if(I <= IDG6) :
         NGEXC6=NGEXC6+1
        else:
         WRITE(6,9911) 
 9911    print(' def STOPPED BAD GAS ID IN MONTE')
         STOP
        # endif
        NEXCTOT=NEXCTOT+1
        NSTEXC=NSTEXC+1
        XSTEXC(KEXC)=X
        YSTEXC(KEXC)=Y
        ZSTEXC(KEXC)=Z
        TSTEXC(KEXC)=ST
       # endif
      # endif 
   6  S2=(S1*S1)/(S1-1.00) 
#  ANISOTROPIC SCATTERING
      R3=DRAND48(RDUM) 
      if(INDEX[I]:
 == 1) :
       R31=DRAND48(RDUM)
       F3=1.00-R3*ANGCT(IE,I)      
       if(R31 > PSCT(IE,I):
)  F3=-F3
      else if(INDEX[I] == 2) :
       EPSI=PSCT(IE,I)
       F3=1.00-(2.00*R3*(1.00-EPSI)/(1.00+EPSI*(1.00-2.00*R3)))
      else: 
# ISOTROPIC SCATTERING                   
       F3=1.00-2.00*R3  
      # endif
      THETA0=numpy.arccos(F3)                                                  
      R4=DRAND48(RDUM)
      PHI0=F4*R4                                                        
      F8=DSIN(PHI0)                                                     
      F9=DCOS(PHI0)                                                     
      if(E < EI):
 EI=0.00                                              
      ARG1=1.00-S1*EI/E                                                
      ARG1=DMAX1(ARG1,SMALL)                                            
      D=1.00-F3*math.sqrt(ARG1)                                            
      E1=E*(1.00-EI/(S1*E)-2.00*D/S2) 
      E1=DMAX1(E1,SMALL)                                                
      Q=math.sqrt((E/E1)*ARG1)/S1                                           
      Q=DMIN1(Q,1.00)                                                  
      THETA=DASIN(Q*DSIN(THETA0))                                       
      F6=DCOS(THETA)                                                    
      U=(S1-1.00)*(S1-1.00)/ARG1                                      
      CSQD=F3*F3                                                        
      if(F3 < 0.00 and CSQD > U):
 F6=-1.00*F6                        
      F5=DSIN(THETA)                                                    
      DCZ2=DMIN1(DCZ2,1.00)                                            
      ARGZ=math.sqrt(DCX2*DCX2+DCY2*DCY2)
      if(ARGZ == 0.00):
 :
       DCZ1=F6         
       DCX1=F9*F5                             
       DCY1=F8*F5 
       if(NTMPFLG == 1):
 :
# USE FREE KINEMATICS FOR IONISATION SECONDARY ANGLES
        F5S=F5*math.sqrt(E1/ES(NCLTMP))
        if(F5S > 1.0):
 F5S=1.0
        THSEC=DASIN(F5S)
        F5S=DSIN(THSEC)
        F6S=DCOS(THSEC)
        if(F6 < 0.0):
 F6S=-F6S
        PHIS=PHI0+API   
        if(PHIS > F4):
 PHIS=PHI0-F4
        F8S=DSIN(PHIS)
        F9S=DCOS(PHIS)
        DCZ[NCLTMP]=F6S
        DCX(NCLTMP)=F9S*F5S
        DCY(NCLTMP)=F8S*F5S
        NTMPFLG=0
       # endif
       GO TO 190
      # endif                                            
      DCZ1=DCZ2*F6+ARGZ*F5*F8                                           
      DCY1=DCY2*F6+(F5/ARGZ)*(DCX2*F9-DCY2*DCZ2*F8)                     
      DCX1=DCX2*F6-(F5/ARGZ)*(DCY2*F9+DCX2*DCZ2*F8) 
      if(NTMPFLG == 1):
 :
# USE FREE KINEMATICS FOR IONISATION SECONDARY ANGLES
       F5S=F5*math.sqrt(E1/ES(NCLTMP))
       if(F5S > 1.0):
 F5S=1.0            
       THSEC=DASIN(F5S)
       F5S=DSIN(THSEC)
       F6S=DCOS(THSEC)
       if(F6 < 0.0):
 F6S=-F6S
       PHIS=PHI0+API   
       if(PHIS > F4):
 PHIS=PHI0-F4
       F8S=DSIN(PHIS)
       F9S=DCOS(PHIS)
       DCZ[NCLTMP]=DCZ2*F6S+ARGZ*F5S*F8S                               
       DCY(NCLTMP)=DCY2*F6S+(F5S/ARGZ)*(DCX2*F9S-DCY2*DCZ2*F8S)        
       DCX(NCLTMP)=DCX2*F6S-(F5S/ARGZ)*(DCY2*F9S+DCX2*DCZ2*F8S)
       NTMPFLG=0
      # endif 
  190 CONTINUE 
      GAM1=(EMS+E1)/EMS
      BET1=math.sqrt(1.00-1.00/(GAM1*GAM1))
      VTOT=BET1*VC*1.D-12 
#     VTOT=CONST9*math.sqrt(E1)
      CX1=DCX1*VTOT
      CY1=DCY1*VTOT
      CZ1=DCZ1*VTOT
# TEST IF ELECTRON IS THERMALISED
      if(E1 > ETHRM):
 GO TO 1
# STORE POSITION AND TIME OF THERMALISED ELECTRON
  191 CONTINUE
      K1=K1+1
      XST(K1)=X
      YST(K1)=Y
      ZST(K1)=Z
      TST(K1)=ST
      NFGF(K1)=NFLGFF
      NFGPP(K1)=NFLGPPP
      NFGBR(K1)=NFLGBRMM
      TTIME(K1)=ST-TLAST
      NELEC=NELEC+1
      NETOT=NETOT+1
  335 if(K1 == 150000) GO TO 889
      if(NELEC == (NCLUS+1):
) :
# LAST ELECTRON IN CLUSTER , DO STATISTICS ON CLUSTER  
       CALL STATS(J11,J1)
       GO TO 210
      # endif 
# GET NEW IONISATION ELECTRON FROM STORE
      X=XS(NELEC)
      Y=YS(NELEC)
      Z=ZS(NELEC)
      ST=TS(NELEC)
      NFLGFF=NFLGFC(NELEC)
      NFLGPPP=NFLGPPC(NELEC)
      NFLGBRMM=NFLGBRMC(NELEC)
      TLAST=TS(NELEC) 
      E1=ES(NELEC)
      DCX1=DCX(NELEC)
      DCY1=DCY(NELEC)
      DCZ1=DCZ[NELEC]  
      if(E1 < ETHRM):
 GO TO 191  
      GAM1=(EMS+E1)/EMS
      BET1=math.sqrt(1.00-1.00/(GAM1*GAM1))
      VTOT=BET1*VC*1.D-12 
      CX1=DCX1*VTOT
      CY1=DCY1*VTOT
      CZ1=DCZ1*VTOT
      GO TO 1                                    
#  MAIN LOOP # end 
  210 CONTINUE
# RESET NUMBER OF EVENTS FOR BAD EVENTS
      if(IMIP > 2):
 NDELTA=NDELTA-IBADTOT
#
      WRITE(6,887) EMAX,NEOVFL
  887 print(' EMAX=',D12.7,' NEOVFL =',I5)
      if(EMAX > EFINAL):
 :
      WRITE(6,989) EFINAL,EMAX
  989 print('INCREASE ENERGY LIMIT FROM',D12.6,' EV TO AT LEAST',D12.6,' EV.')
      STOP
      # endif                                         
      RETURN 
  889 NLEFT=NCLUS-NELEC
      WRITE(6,992) NPRIME,NLEFT,NCLUS
  992 print(3(/),' WARNING STOPPED AFTER NPRIME=',I6,' LAST PRIMARY HAS AT LEAST ',I6,' SECONDARIES LEFT TO TRACK,OUT OF ',I6,' ELECTRONS ALREADY IN CLUSTER')
      STOP
      RETURN
      # end                                                   
      def MONTEFC                                                :
      IMPLICIT #real*8 (A-H,O-Z) 
      IMPLICIT #integer*8 (I-N)                                        
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/INPT1/NDVEC
      COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5                  
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,TCFMAX(10),TCFMAX1,RSTART,EFIELD,ETHRM,ECUT,NDELTA,IMIP,IWRITE  
      COMMON/BFLD/EOVB,WB,BTHETA,BMAG
      COMMON/LARGE/CF(20000,512),EIN(512),TCF(20000),IARRY(512),    RGAS(512),IPN(512),WPL(512),IZBR(512),IPLAST,PENFRA[3,512]
      COMMON/LARGEN/CFN(20000,60),TCFN(20000),SCLENUL(60),NPLAST
      COMMON/OUTPT/ICOLL(30),NETOT,NPRIME,TMAX1,TIME(300),NNULL, NITOT,ICOLN(512),ICOLNN(60),NREAL,NEXCTOT  
      COMMON/RLTVY/BET[20]00),GAM(20000),VC,EMS
      COMMON/STTS/XST(150000),YST(150000),ZST(150000),TST(150000),TTIME(150000),NFGF(150000),NFGPP(150000),NFGBR(150000),NELEC,NEGION,EST1,EST2
      COMMON/STEXC/XSTEXC(150000),YSTEXC(150000),ZSTEXC(150000),TSTEXC(150000),NSTEXC
      COMMON/STEXCNUL/XSTN(150000),YSTN(150000),ZSTN(150000),TSTN(150000),IDNUL(150000),NEXCNUL
      COMMON/IONC/DOUBLE(6,20000),CMINIXSC(6),CMINEXSC(6),ECLOSS(6),WPLN(6),ICOUNT,AVPFRAC(3,6)
      COMMON/IONFL/NC0(512),EC0(512),NG1(512),EG1(512),NG2(512),EG2(512),WKLM(512),DSTFL(512)
      COMMON/IONMOD/ESPLIT(512,20),IONMODEL(512) 
      COMMON/ANIS/PSCT(20000,512),ANGCT(20000,512),INDEX(512),NISO
      COMMON/CASRS/ECAS(400),XCAS(400),YCAS(400),ZCAS(400),DRXS(400),DRYS(400),DRZS(400),TT1(400),NFLGF(400),NFLGPP(400),IEVNTL     
      COMMON/COMP/LCMP,LCFLG,LRAY,LRFLG,LPAP,LPFLG,LBRM,LBFLG,LPEFLG
      COMMON/BREMG/EBRGAM(10),BRDCOSX(10),BRDCOSY(10),BRDCOSZ[10],BRX(10),BRY(10),BRZ[10],BRT(10),EBRTOT(6),NBREM(6) 
      COMMON/CASRSB/ECASB[400],XCASB[400],YCASB[400],ZCASB[400],DRXB[400],DRYB[400],DRZB[400],TTB1(400),NFLGFB[400],NFLGPPB[400],IEVNTLB
      COMMON/CASRSE/ECASE(400),XCASE(400),YCASE(400),ZCASE(400),DRXCE(400),DRYCE(400),DRZCE(400),TCASE(400),NFLGFE(400),NFLGPPE(400),IEVENTE     
      COMMON/ECASC/NEGAS(512),LEGAS(512),IESHELL(512),IECASC
      COMMON/IDEXC/NGEXC1,NGEXC2,NGEXC3,NGEXC4,NGEXC5,NGEXC6,IDG1,IDG2,IDG3,IDG4,IDG5,IDG6
      DIMENSION XS(150000),YS(150000),ZS(150000),TS(150000),ES(150000),DCX(150000),DCY(150000),DCZ[150000],NFLGFC(150000),NFLGPPC(150000),NFLGBRMC(150000)           
      DIMENSION TEMP(20000) 
# ------------------------------------------------------------------- 
#   RELATIVISTIC VERSION  
#   CALCULATES COLLISION EVENTS AND UPDATES DIFFUSION AND VELOCITY.
#   THIS ROUTINE HANDLES TERMINATIONS AT FIXED DRIFT TIMES. 
#   SOLVES MOTION IN COORDINATE SYSTEM WITH BFIELD ALIGNED TO X-AXIS
#   ELECTRIC FIELD AT AN ANGLE BTHETA IN THE X-Z PLANE.
#   THE RESULTS FOR THE VELOCITY VECTORS  ARE : 
#   ROTATED INTO THE STANDARD COORDINATE FRAME WITH THE ELECTRIC FIELD 
#   ALONG THE Z-AXIS AND THE BFIELD AT AN ANGLE BTHETA TO THE ELECTRIC
#   FIELD IN THE X-Z PLANE  
# -------------------------------------------------------------------
# VARYING ENERGY STEPS
      if(EFINAL <= 140000.):
 :
        ESTEP1=(EFINAL-16000.0)/float(4000)
      else:
        ESTEP1=20.0
        ESTEP2=(EFINAL-92000.0)/float(4000)
      # endif
      NPRINT=0 
      J20000=20000
      J300=300
      API=numpy.arccos(-1.00)
      SMALL=1.0D-20
      EMAX=0.00
      TMAX1=0.00
      RDUM=RSTART
      CONST9=CONST3*0.010
      DO 25 I=1,300
   25 TIME[I]=0.00
      DO 26 I=1,30
   26 ICOLL[I]=0
      DO 27 I=1,512
   27 ICOLN[I]=0
      NREAL=0           
      NNULL=0                                                           
      NETOT=0 
      NEXCTOT=0
      NITOT=0
      NMXADD=0
      NTMPFLG=0
# CALC ROTATION MATRIX ANGLES
      RCS=DCOS((BTHETA-90.00)*API/180.00)
      RSN=DSIN((BTHETA-90.00)*API/180.00)
# 
      RTHETA=BTHETA*API/180.00
      EFZ100=EFIELD*100.00*DSIN(RTHETA)
      EFX100=EFIELD*100.00*DCOS(RTHETA)
      F1=EFIELD*CONST2*DCOS(RTHETA)
      F4=2.00*API
      EOVBR=EOVB*DSIN(RTHETA)
      THETA1=THETA
      PHI1=PHI
# CALCULATE MAXIMUM COLLISION FREQUENCY
      TLIM=0.0
      DO 111 J=1,20000
      TEMP[J]=TCFN[J]+TCF[J] 
      if(TLIM < TEMP[J]:
) TLIM=TEMP[J] 
  111 CONTINUE
      NEOVFL=0
      J1=0
# START OF PRIMARY EVENT LOOP
      DO 210 J11=1,NDELTA
      J1=J1+1
      NPRIME=J1
      NGEXC1=0
      NGEXC2=0
      NGEXC3=0
      NGEXC4=0
      NGEXC5=0
      NGEXC6=0
#     INITIAL DIRECTION COSINES 
      if(THETA1 == (API/2.0):
 or NDVEC != 1) :
#  ONLY ALLOW CASE WHERE DELTA IS ALONG E-FIELD DIRECTION
       WRITE(6,22) 
   22  print(2(/),3X,'def STOPPED ONLY ALLOWED TO HAVE DELTA ELECTRON PRALLEL TO E-FIELD IN CASE WITH ARBITRARY ANGLE FOR B-FIELD')  
       STOP
      # endif
# FIX DELTA TO E - FIELD DIRECTION
      PHI1=0.00
      THETA1=(API/2.0)-RTHETA
      DCZ1=DCOS(THETA1)                                                 
      DCX1=DSIN(THETA1)*DCOS(PHI1)                                      
      DCY1=DSIN(THETA1)*DSIN(PHI1) 
      NFLGFF=0
      NFLGPPP=0
      NFLGBRMM=0
      NFLGHIGH=0
      EST1=ESTART
# INITIAL VELOCITY
      E1=ESTART
      GAM1=(EMS+E1)/EMS
      GAM12=GAM1
      BET1=math.sqrt(1.00-1.00/(GAM1*GAM1))
      VTOT=BET1*VC*1.0D-12
#     VTOT=CONST9*math.sqrt(E1)
      CX1=DCX1*VTOT
      CY1=DCY1*VTOT
      CZ1=DCZ1*VTOT 
      X=0.00
      Y=0.00
      Z=0.00
      K1=0
      KEXC=0
      NSTEXC=0
      NEXCNUL=0
      NCLUS=0
      NELEC=0
      NEGION=0
      TLAST=0.00
      ST=0.00
      TDASH=0.00  
      if(IMIP == 2):
 GO TO 1
      if(IMIP > 2):
 :
# READIN FIRST ELECTRON FROM BETA DECAY OR X-RAY UNTHERMALISED CLUSTERS
       CALL CASRES(J11,IBADTOT,IBAD1)
#  SKIP BAD EVENT
       if(IBAD1 == 1):
 :
        J1=J1-1
        GO TO 210
       # endif
      else if(IMIP == 1) :
# READ IN FIRST ELECTRON FROM MIP INTERACTION
       CALL CASREM(J11)
       EST1=ECAS[1]
       EST2=EST1
      # endif
      X=XCAS[1]
      Y=YCAS[1]
      Z=ZCAS[1]
      ST=TT1[1]
      TS[1]=TT1[1]
      E1=ECAS[1]
      DCZ1=DRZS[1]
      DCY1=DRYS[1]
      DCX1=DRXS[1]
      NFLGFF=NFLGF[1]
      NFLGPPP=NFLGPP[1]
      NFLGBRMM=0
      NFLGHIGH=NFLGFF
      GAM1=(EMS+E1)/EMS
      BET1=math.sqrt(1.00-1.00/(GAM1*GAM1))
      VTOT=BET1*VC*1.0D-12
#     VTOT=CONST9*math.sqrt(E1)
      CX1=DCX1*VTOT
      CY1=DCY1*VTOT
      CZ1=DCZ1*VTOT
# PUT REMAINDER OF ELECTRONS INTO CLUSTER STORE
      ISDUM=0
      DO 35 IST=2,IEVNTL
      ISDUM=ISDUM+1
      XS(ISDUM)=XCAS(IST)
      YS(ISDUM)=YCAS(IST)
      ZS(ISDUM)=ZCAS(IST)
      TS(ISDUM)=TT1(IST)
      ES(ISDUM)=ECAS(IST)
      DCX(ISDUM)=DRXS(IST)
      DCY(ISDUM)=DRYS(IST)
      DCZ[ISDUM]=DRZS(IST)
      NFLGFC(ISDUM)=NFLGF(IST)
      NFLGPPC(ISDUM)=NFLGPP(IST)
      NFLGBRMC(ISDUM)=0
      NCLUS=ISDUM
      if(NFLGFC(IST):
 > NFLGHIGH) NFLGHIGH=NFLGFC(IST)
   35 CONTINUE
      GAM12=GAM1
# START OF LOOP FOR NEW ELECTRONS                                       
    1 CONTINUE 
      R1=DRAND48(RDUM)
      T=-math.log(R1)/TLIM+TDASH
      TDASH=T
      WBT=WB*T/GAM12
#     WBT=WB*T
      COSWT=DCOS(WBT)
      SINWT=DSIN(WBT)
      DZ=GAM12*(CZ1*SINWT+(EOVBR-CY1)*(1.00-COSWT))/WB
#     DZ=(CZ1*SINWT+(EOVBR-CY1)*(1.00-COSWT))/WB
      DX=CX1*T+F1*T*T/GAM12
#     DX=CX1*T+F1*T*T
      E=E1+DZ*EFZ100+DX*EFX100
      GAM2=(EMS+E)/EMS
      BET2=math.sqrt(1.00-1.00/(GAM2+GAM2))
      if(E < 0.00):
 :
       E=0.0010
      # endif                                                   
# INSERT NEW ALGORITHM TO FIND IE FOR VARYING ENERGY STEP          
      if(IMIP == 1):
 :                                     
       IE=DINT(E/ESTEP)+1                                               
      else:
       if(EFINAL <= 20000.):
 :
        IE=DINT(E/ESTEP)+1
       else if(EFINAL <= 140000.) :
        if(E <= 16000.):
 :
         IE=DINT(E)+1
        else:
         IE=16000+DINT((E-16000.)/ESTEP1)
        # endif
       else:
        if(E <= 12000.):
 :
         IE=DINT(E)+1
        else if(E <= 92000.) :
         IE=12000+DINT((E-12000.)/ESTEP1)
        else:
         IE=16000+DINT((E-92000.)/ESTEP2)
        # endif
       # endif
      # endif 
      IE=DMIN0(IE,J20000)                                            
#                                                                       
#     TEST FOR #real OR NULL COLLISION                                   
#                                                                       
      R5=DRAND48(RDUM)
      TEST1=TCF(IE)/TLIM                                                
      if(R5 <= TEST1):
 GO TO 137                                         
      NNULL=NNULL+1       
      TEST2=TEMP(IE)/TLIM                      
      if(R5 < TEST2):
 :
# TEST FOR NULL LEVELS
       if(NPLAST == 0):
 GO TO 1
       R2=DRAND48(RDUM) 
       I=0
  888  I=I+1
       if(CFN(IE,I):
 < R2) GOTO 888
# INCREMENT NULL LEVEL SUM
       NEXCNUL=NEXCNUL+1
       ICOLNN[I]=ICOLNN[I]+1
# STORE X Y Z T ID FOR MOLECULAR LIGHT EMISSION AND DISSOCIATION FROM 
#   NULL EXCITATION
# NOTE: SMALL APPROX USED POSITION OF PREVIOUS #real COLLISION
       XSTN(NEXCNUL)=X
       YSTN(NEXCNUL)=Y
       ZSTN(NEXCNUL)=Z
       TSTN(NEXCNUL)=ST
       IDNUL(NEXCNUL)=I               
       GO TO 1         
      else:
# NULL
       GO TO 1
      # endif                                                 
#                                                                       
#  CALCULATE DIRECTION COSINES AND POSITIONS AT INSTANT BEFORE COLLISION
  137 T2=T*T
      if(E > EMAX):
 EMAX=E
      if(T > TMAX1):
 TMAX1=T
      TDASH=0.00
      NREAL=NREAL+1  
# CALC VELOCITY
#     CX2=CX1+2.0*F1*T        
      CX2=CX1+2.0*F1*T/GAM12
      CY2=(CY1-EOVBR)*COSWT+CZ1*SINWT+EOVBR
      CZ2=CZ1*COSWT-(CY1-EOVBR)*SINWT
# CALC DIRECTION COSINES
      VTOT=math.sqrt(CX2*CX2+CY2*CY2+CZ2*CZ2)
      DCX2=CX2/VTOT
      DCY2=CY2/VTOT
      DCZ2=CZ2/VTOT                                                     
# CALC NEW POSITION                                                
      X=X+DX                                                            
      Y=Y+EOVBR*T+GAM12*((CY1-EOVBR)*SINWT+CZ1*(1.00-COSWT))/WB
#     Y=Y+EOVBR*T+((CY1-EOVBR)*SINWT+CZ1*(1.00-COSWT))/WB
      Z=Z+DZ          
      GAM12=(GAM1+GAM2)/2.00
      ST=ST+T
      IT=DINT(T+1.00)                                                  
      IT=DMIN0(IT,J300)                                               
      TIME(IT)=TIME(IT)+1.00                                           
# --------------------------------------------------------------------- 
#     DETERMINATION OF #real COLLISION TYPE                              
# --------------------------------------------------------------------- 
      R2=DRAND48(RDUM)
      I=0                                                               
  140 I=I+1                                                             
      if(CF(IE,I):
 < R2) GO TO 140     
#************************************************************
# CHECK IF BREMSSTRAHLUNG
      if(IZBR[I]:
 != 0 and LBRM == 1) :
       NFLGBRMM=1
       IPT=IARRY[I]
       ICOLL(IPT)=ICOLL(IPT)+1
       ICOLN[I]=ICOLN[I]+1
       DO 141 KNGS=1,NGAS
       if(IPT == (KNGS*5):
-1) GO TO 142
  141  CONTINUE
  142  IATOMNO=IZBR[I] 
       CALL BREMS(IATOMNO,E,DCX2,DCY2,DCZ2,EOUT,EDCX,EDCY,EDCZ,EGAMMA,GDCX,GDCY,GDCZ)
       NBREM(KNGS)=NBREM(KNGS)+1
       EBRTOT(KNGS)=EBRTOT(KNGS)+EGAMMA
#      WRITE(6,668) EGAMMA,J11   
# 668 print(' BREM EGAMMA=',D12.4,' EVENT NO=',I5)
# GET  NEW DRCOS DRCOSY DRCOSX AND ENERGY OF ELECTRON
       E1=EOUT
       DCX1=EDCX
       DCY1=EDCY
       DCZ1=EDCZ
# RUN BREMSSTRAHLUNG GAMMA THROUGH CASCADE : STORE CONVERTED
# ELECTRONS IN COMMON/CASRSB/
# 
       CALL BREMSCASC(J11,EGAMMA,X,Y,Z,ST,GDCX,GDCY,GDCZ,ILOW)
# BREMSSTRAHLUNG ENERGY TOO LOW TO IONISE
       if(ILOW == 1):
 GO TO 190
# 
# STORE BREMSSTRAHLUNG DATA IN CLUSTER STORE
       DO 890 KBR=1,IEVNTLB
       NCLUS=NCLUS+1
       if(NCLUS > 150000):
 : 
        WRITE(6,546) NCLUS,NREAL
        STOP
       # endif     
       ES(NCLUS)=ECASB[KBR]
       XS(NCLUS)=XCASB[KBR]
       YS(NCLUS)=YCASB[KBR]
       ZS(NCLUS)=ZCASB[KBR]
       TS(NCLUS)=TTB1(KBR)
       DCX(NCLUS)=DRXB[KBR]
       DCY(NCLUS)=DRYB[KBR]
       DCZ[NCLUS]=DRZB[KBR]
       NFLGFC(NCLUS)=NFLGFB[KBR]+NFLGHIGH
       NFLGPPC(NCLUS)=NFLGPPB[KBR]
       NFLGBRMC(NCLUS)=2
  890  CONTINUE
       if(NFLGFC(NCLUS):
 > NFLGHIGH) NFLGHIGH=NFLGFC(NCLUS)
       GO TO 190
      # endif
  891 CONTINUE
#****************************************************************
#     S1=RGAS[I]                                                        
      S1=1.00+GAM2*(RGAS[I]-1.00)                                     
      EI=EIN[I]
      if(E < EI):
 :
      EI=E-0.00010
      # endif                                                          
      if(IPN[I]:
 == 0) GO TO 666
# ATTACHMENT       
      if(IPN[I]:
 == -1) :
       NETOT=NETOT+1
       NITOT=NITOT+1
       NELEC=NELEC+1
       NEGION=NEGION+1
       IPT=IARRY[I]
       ICOLL(IPT)=ICOLL(IPT)+1
       ICOLN[I]=ICOLN[I]+1 
       IT=DINT(T+1.00)
       IT=DMIN0(IT,J300)
       TIME(IT)=TIME(IT)+1.00
       GO TO 335
      # endif    
      EISTR=EI                                   
      if(IONMODEL[I]:
 > 0) :
# CALCULATE SECONDARY ENERGY,ESEC,IN IONISATION COLLISION USING
# FIVE DIFFERENT MODELS
       CALL IONSPLIT(I,E,EI,ESEC) 
       GO TO 544
      # endif               
      R9=DRAND48(RDUM)
#    USE OPAL PETERSON AND BEATY SPLITTING FACTOR.
      ESEC=WPL[I]*TAN(R9*ATAN((E-EI)/(2.00*WPL[I]))) 
      ESEC=WPL[I]*(ESEC/WPL[I])**0.9524
  544 CONTINUE
      EI=ESEC+EI 
# STORE POSITION ,ENERGY, DIRECTION COSINES AND TIME OF GENERATION
# OF SECONDARY IONISATION ELECTRON 
      NCLUS=NCLUS+1
      NMXADD=MAX(NCLUS,NMXADD)
      if(NCLUS > 150000):
 : 
       WRITE(6,546) NCLUS,NREAL 
 546   print(2X,' def STOPPED . NCLUS=',I7,' NREAL=',I10)
       STOP
      # endif     
      XS(NCLUS)=X       
      YS(NCLUS)=Y
      ZS(NCLUS)=Z
      TS(NCLUS)=ST
      ES(NCLUS)=ESEC 
      NFLGFC(NCLUS)=NFLGFF
      NFLGPPC(NCLUS)=NFLGPPP
      NFLGBRMC(NCLUS)=NFLGBRMM         
      NTMPFLG=1
      NCLTMP=NCLUS
# RANDOMISE SECONDARY ELECTRON DIRECTION
#     R3=drand48(RDUM)
#     F3=1.0-2.00*R3
#     THETA0=DACOS(F3)
#     F6=DCOS(THETA0)
#     F5=DSIN(THETA0)
#     R4=drand48(RDUM)
#     PHI0=F4*R4
#     F8=DSIN(PHI0)
#     F9=DCOS(PHI0)               
#     DCX(NCLUS)=F9*F5
#     DCY(NCLUS)=F8*F5
#     DCZ[NCLUS]=F6    
#*********************************************************
      if(IECASC == 0):
GO TO 333
      if(LEGAS[I]:
 == 0) GO TO 333
# USE COMPLETE CASCADE FOR ELECTRON IONISATION
      KG1=NEGAS[I]
      LG1=LEGAS[I]
      IGSHEL=IESHELL[I]
      CALL CASCADEE(J11,KG1,LG1,X,Y,Z,ST,ESEC,IGSHEL)
#
# STORE CASCADE IN CLUSTER STORE
#
      ETSUM=0.0
      DO 844 KBR=1,IEVENTE
      NCLUS=NCLUS+1
      if(NCLUS > 150000):
 :
       WRITE(6,546) NCLUS,NREAL
       STOP
      # endif
      ES(NCLUS)=ECASE(KBR)
      ETSUM=ETSUM+ES(NCLUS)
      XS(NCLUS)=XCASE(KBR)
      YS(NCLUS)=YCASE(KBR)
      ZS(NCLUS)=ZCASE(KBR)
      TS(NCLUS)=TCASE(KBR)
      DCX(NCLUS)=DRXCE(KBR)
      DCY(NCLUS)=DRYCE(KBR)
      DCZ[NCLUS]=DRZCE(KBR)
      NFLGFC(NCLUS)=NFLGFE(KBR)+NFLGHIGH
      NFLGPPC(NCLUS)=NFLGPPE(KBR)
      NFLGBRMC(NCLUS)=NFLGBRMM
  844 CONTINUE
      if(NFLGFC(NCLUS):
 > NFLGHIGH) NFLGHIGH=NFLGFC(NCLUS)
      GO TO 666
#*********************************************************
# STORE POSSIBLE SHELL EMISSIONS AUGER OR FLUORESCENCE 
  333 if(EISTR > 30.0) :
# TEST IF FLUORESCENCE EMISSION
       ifLTST=0:
       if(WKLM[I]:
 > 0.0) :
        R9=DRAND48(RDUM)
        if(R9 < WKLM[I]:
) ifLTST=1
       # endif
       if(ifLTST == 0):
 :
# AUGER EMISSION WITHOUT FLUORESCENCE
        NAUG=NC0[I]
        EAVAUG=EC0[I]/float(NAUG)
        DO 700 JFL=1,NC0[I]
        NCLUS=NCLUS+1
        XS(NCLUS)=X
        YS(NCLUS)=Y
        ZS(NCLUS)=Z
        TS(NCLUS)=ST
        NFLGFC(NCLUS)=NFLGFF
        NFLGPPC(NCLUS)=NFLGPPP
        NFLGBRMC(NCLUS)=NFLGBRMM
        ES(NCLUS)=EAVAUG
        R3=DRAND48(RDUM)
        F3=1.0-2.00*R3
        THETA0=numpy.arccos(F3)
        F6=DCOS(THETA0)
        F5=DSIN(THETA0)
        R4=DRAND48(RDUM)
        PHI0=F4*R4
        F8=DSIN(PHI0)
        F9=DCOS(PHI0)               
        DCX(NCLUS)=F9*F5
        DCY(NCLUS)=F8*F5
        DCZ[NCLUS]=F6
  700   CONTINUE 
       else:
# AUGER EMISSION AND FLUORESENCE 
        if(NG2[I]:
 == 0) GO TO 702
        NAUG=NG2[I]
        EAVAUG=EG2[I]/float(NAUG)
        DO 701 JFL=1,NG2[I]
        NCLUS=NCLUS+1
        XS(NCLUS)=X
        YS(NCLUS)=Y
        ZS(NCLUS)=Z
        NFLGFC(NCLUS)=NFLGFF
        NFLGPPC(NCLUS)=NFLGPPP
        NFLGBRMC(NCLUS)=NFLGBRMM
        TS(NCLUS)=ST
        ES(NCLUS)=EAVAUG
        R3=DRAND48(RDUM)
        F3=1.0-2.00*R3
        THETA0=numpy.arccos(F3)
        F6=DCOS(THETA0)
        F5=DSIN(THETA0)
        R4=DRAND48(RDUM)
        PHI0=F4*R4
        F8=DSIN(PHI0)
        F9=DCOS(PHI0)               
        DCX(NCLUS)=F9*F5
        DCY(NCLUS)=F8*F5
        DCZ[NCLUS]=F6
  701   CONTINUE
  702   if(NG1[I] == 0) GO TO 704
        NAUG=NG1[I]
        EAVAUG=EG1[I]/float(NAUG)
        R9=DRAND48(RDUM)
        DFL=-math.log(R9)*DSTFL[I]
        DO 703 JFL=1,NG1[I]
        NCLUS=NCLUS+1
        R3=DRAND48(RDUM)
        THEFL=numpy.arccos(1.0-2.00*R3)
        R4=DRAND48(RDUM)
        PHifL=F4*R4
        XS(NCLUS)=X+DFL*DSIN(THEFL)*DCOS(PHifL)
        YS(NCLUS)=Y+DFL*DSIN(THEFL)*DSIN(PHifL)
        ZS(NCLUS)=Z+DFL*DCOS(THEFL)
        NFLGFC(NCLUS)=NFLGHIGH+1
        NFLGPPC(NCLUS)=NFLGPPP
        NFLGBRMC(NCLUS)=NFLGBRMM
        TS(NCLUS)=ST
        ES(NCLUS)=EAVAUG
        R3=DRAND48(RDUM)
        F3=1.0-2.00*R3
        THETA0=numpy.arccos(F3)
        F6=DCOS(THETA0)
        F5=DSIN(THETA0)
        R4=DRAND48(RDUM)
        PHI0=F4*R4
        F8=DSIN(PHI0)
        F9=DCOS(PHI0)               
        DCX(NCLUS)=F9*F5
        DCY(NCLUS)=F8*F5
        DCZ[NCLUS]=F6
        NFLGHIGH=NFLGFC(NCLUS)
  703   CONTINUE
  704   CONTINUE
       # endif
      # endif
#
#  GENERATE SCATTERING ANGLES AND UPDATE  LABORATORY COSINES AFTER      
#   COLLISION ALSO UPDATE ENERGY OF ELECTRON.                           
#
  666 IPT=IARRY[I]
      ICOLL(IPT)=ICOLL(IPT)+1 
      ICOLN[I]=ICOLN[I]+1   
# IF EXCITATION : ADD PROBABILITY ,PENFRA(1,I), OF TRANSFER TO GIVE 
# IONISATION OF THE OTHER GASES IN MIXTURE            
      if(IPEN == 0 or NGAS == 1):
 GO TO 5                
      if(PENFRA[1,I] != 0.0):
 :
       RAN=DRAND48(RDUM)
       if(RAN > PENFRA[1,I]):
 GO TO 5
       NCLUS=NCLUS+1
# ENTER HERE POSSIBLE DELOCALISATION LENGTH FOR PENNING TRANSFER
       if(PENFRA[2,I] == 0.0):
 :
        XS(NCLUS)=X             
        YS(NCLUS)=Y    
        ZS(NCLUS)=Z
        NFLGFC(NCLUS)=NFLGFF
        NFLGPPC(NCLUS)=NFLGPPP
        NFLGBRMC(NCLUS)=NFLGBRMM
        GO TO 667
       # endif
       ASIGN=1.0
       RAN=DRAND48(RDUM)
       RAN1=DRAND48(RDUM)
       if(RAN1 < 0.5):
 ASIGN=-ASIGN  
       XS(NCLUS)=X-math.log(RAN)*PENFRA[2,I]*ASIGN
       RAN=DRAND48(RDUM)
       RAN1=DRAND48(RDUM)
       if(RAN1 < 0.5):
 ASIGN=-ASIGN 
       YS(NCLUS)=Y-math.log(RAN)*PENFRA[2,I]*ASIGN 
       RAN=DRAND48(RDUM)
       RAN1=DRAND48(RDUM)
       if(RAN1 < 0.5):
 ASIGN=-ASIGN  
       ZS(NCLUS)=Z-math.log(RAN)*PENFRA[2,I]*ASIGN
  667  RAN=DRAND48(RDUM)
       TS(NCLUS)=ST-math.log(RAN)*PENFRA[3,I]
# ASSIGN EXCESS ENERGY OF 1EV TO PENNING CREATED ELECTRON
       ES(NCLUS)=1.0
       DCX(NCLUS)=DCX1
       DCY(NCLUS)=DCY1
       DCZ[NCLUS]=DCZ1
       GO TO 6
      # endif
#     GO TO 6 
# CALCULATE SUM OF EXCITATION PER CLUSTER AND STORE EXCITATION X Y Z T
   5  if(IPN[I] == 0) :
       if((RGAS[I]:
*EIN[I]) > 4.0) :
        KEXC=KEXC+1
        if(KEXC > 150000):
 : 
         WRITE(6,548) KEXC
 548     print(2X,' def STOPPED . KEXC=',I7)
         STOP
        # endif
# FIND GAS IN WHICH EXCITATION OCCURED AND INCREMENT COUNTER
        if(I <= IDG1):
 : 
         NGEXC1=NGEXC1+1
        else if(I <= IDG2) :
         NGEXC2=NGEXC2+1
        else if(I <= IDG3) :
         NGEXC3=NGEXC3+1
        else if(I <= IDG4) :
         NGEXC4=NGEXC4+1
        else if(I <= IDG5) :
         NGEXC5=NGEXC5+1
        else if(I <= IDG6) :
         NGEXC6=NGEXC6+1
        else:
         WRITE(6,9911) 
 9911    print(' def STOPPED BAD GAS ID IN MONTE')
         STOP
        # endif
        NEXCTOT=NEXCTOT+1
        NSTEXC=NSTEXC+1
        XSTEXC(KEXC)=X
        YSTEXC(KEXC)=Y
        ZSTEXC(KEXC)=Z
        TSTEXC(KEXC)=ST
       # endif
      # endif 
   6  S2=(S1*S1)/(S1-1.00) 
#  ANISOTROPIC SCATTERING 
      R3=DRAND48(RDUM)
      if(INDEX[I]:
 == 1) :
       R31=DRAND48(RDUM)
       F3=1.00-R3*ANGCT(IE,I)       
       if(R31 > PSCT(IE,I):
) F3=-F3   
      else if(INDEX[I] == 2) :
       EPSI=PSCT(IE,I)
       F3=1.00-(2.00*R3*(1.00-EPSI)/(1.00+EPSI*(1.00-2.00*R3)))   
      else:
# ISOTROPIC SCATTERING        
       F3=1.00-2.00*R3  
      # endif
      THETA0=numpy.arccos(F3)                                                  
      R4=DRAND48(RDUM)
      PHI0=F4*R4                                                        
      F8=DSIN(PHI0)                                                     
      F9=DCOS(PHI0)                                                     
      if(E < EI):
 EI=0.00                                              
      ARG1=1.00-S1*EI/E                                                
      ARG1=DMAX1(ARG1,SMALL)                                            
      D=1.00-F3*math.sqrt(ARG1)                                            
      E1=E*(1.00-EI/(S1*E)-2.00*D/S2) 
      E1=DMAX1(E1,SMALL)                                                
      Q=math.sqrt((E/E1)*ARG1)/S1                                           
      Q=DMIN1(Q,1.00)                                                  
      THETA=DASIN(Q*DSIN(THETA0))                                       
      F6=DCOS(THETA)                                                    
      U=(S1-1.00)*(S1-1.00)/ARG1                                      
      CSQD=F3*F3                                                        
      if(F3 < 0.00 and CSQD > U):
 F6=-1.00*F6                        
      F5=DSIN(THETA)                                                    
      DCZ2=DMIN1(DCZ2,1.00)                                            
      ARGZ=math.sqrt(DCX2*DCX2+DCY2*DCY2)
      if(ARGZ == 0.00):
 :
       DCZ1=F6         
       DCX1=F9*F5                             
       DCY1=F8*F5 
       if(NTMPFLG == 1):
 :
# USE FREE KINEMATICS FOR IONISATION SECONDARY ANGLES
        F5S=F5*math.sqrt(E1/ES(NCLTMP))
        if(F5S > 1.0):
 F5S=1.0
        THSEC=DASIN(F5S)
        F5S=DSIN(THSEC)
        F6S=DCOS(THSEC)
        if(F6 < 0.0):
 F6S=-F6S
        PHIS=PHI0+API   
        if(PHIS > F4):
 PHIS=PHI0-F4
        F8S=DSIN(PHIS)
        F9S=DCOS(PHIS)
        DCZ[NCLTMP]=F6S
        DCX(NCLTMP)=F9S*F5S
        DCY(NCLTMP)=F8S*F5S
        NTMPFLG=0
       # endif
       GO TO 190
      # endif                                            
      DCZ1=DCZ2*F6+ARGZ*F5*F8                                           
      DCY1=DCY2*F6+(F5/ARGZ)*(DCX2*F9-DCY2*DCZ2*F8)                     
      DCX1=DCX2*F6-(F5/ARGZ)*(DCY2*F9+DCX2*DCZ2*F8) 
      if(NTMPFLG == 1):
 :
# USE FREE KINEMATICS FOR IONISATION SECONDARY ANGLES
       F5S=F5*math.sqrt(E1/ES(NCLTMP))
       if(F5S > 1.0):
 F5S=1.0            
       THSEC=DASIN(F5S)
       F5S=DSIN(THSEC)
       F6S=DCOS(THSEC)
       if(F6 < 0.0):
 F6S=-F6S
       PHIS=PHI0+API   
       if(PHIS > F4):
 PHIS=PHI0-F4
       F8S=DSIN(PHIS)
       F9S=DCOS(PHIS)
       DCZ[NCLTMP]=DCZ2*F6S+ARGZ*F5S*F8S                               
       DCY(NCLTMP)=DCY2*F6S+(F5S/ARGZ)*(DCX2*F9S-DCY2*DCZ2*F8S)        
       DCX(NCLTMP)=DCX2*F6S-(F5S/ARGZ)*(DCY2*F9S+DCX2*DCZ2*F8S)
       NTMPFLG=0
      # endif 
  190 CONTINUE  
      GAM1=(EMS+E1)/EMS
      BET1=math.sqrt(1.00-1.00/(GAM1*GAM1))
      VTOT=BET1*VC*1.D-12
#     VTOT=CONST9*math.sqrt(E1)
      CX1=DCX1*VTOT
      CY1=DCY1*VTOT
      CZ1=DCZ1*VTOT
# TEST IF ELECTRON IS THERMALISED
      if(E1 > ETHRM):
 GO TO 1
  191 CONTINUE
# STORE POSITION AND TIME OF THERMALISED ELECTRONS
      K1=K1+1
# ROTATE INTO COORDINATE SYSTEM WITH EFIELD ALONG Z
      ZR=Z*RCS-X*RSN
      YR=Y
      XR=Z*RSN+X*RCS          
      XST(K1)=XR
      YST(K1)=YR
      ZST(K1)=ZR
      TST(K1)=ST
      NFGF(K1)=NFLGFF
      NFGPP(K1)=NFLGPPP
      NFGBR(K1)=NFLGBRMM
      TTIME(K1)=ST-TLAST
      NELEC=NELEC+1
      NETOT=NETOT+1
  335 if(K1 == 150000) GO TO 889
      if(NELEC == (NCLUS+1):
) :
# LAST ELECTRON IN CLUSTER. DO STATISTICS ON CLUSTER
       CALL STATS(J11,J1) 
       GO TO 210      
      # endif
# GET NEW IONISATION ELECTRON FROM STORE
      X=XS(NELEC)
      Y=YS(NELEC)
      Z=ZS(NELEC)
      ST=TS(NELEC)
      NFLGFF=NFLGFC(NELEC)
      NFLGPPP=NFLGPPC(NELEC)
      NFLGBRMM=NFLGBRMC(NELEC)
      TLAST=TS(NELEC)
      E1=ES(NELEC)
      DCX1=DCX(NELEC)
      DCY1=DCY(NELEC)
      DCZ1=DCZ[NELEC]
      if(E1 < ETHRM):
 GO TO 191
      GAM1=(EMS+E1)/EMS
      BET1=math.sqrt(1.00-1.00/(GAM1*GAM1))
      VTOT=BET1*VC*1.D-12
      CX1=DCX1*VTOT
      CY1=DCY1*VTOT
      CZ1=DCZ1*VTOT
      GO TO 1  
# MAIN LOOP # end
  210 CONTINUE
# RESET NUMBER OF EVENTS FOR BAD EVENTS
      if(IMIP > 2):
 NDELTA=NDELTA-IBADTOT
      WRITE(6,887) EMAX,NEOVFL
  887 print(' EMAX=',D12.7,' NEOVFL =',I5)
      if(EMAX > EFINAL):
 :
      WRITE(6,989) EFINAL,EMAX
  989 print('INCREASE ENERGY LIMIT FROM',D12.6,' EV TO AT LEAST',D12.6,' EV.')
      STOP
      # endif                                         
      RETURN
  889 NLEFT=NCLUS-NELEC
      WRITE(6,992) NPRIME,NLEFT,NCLUS
  992 print(3(/),' WARNING STOPPED AFTER NPRIME=',I6,' LAST PRIMARY HAS AT LEAST ',I6,' SECONDARIES LEFT TO TRACK. OUT OF ',I6,' ELECTRONS ALREADY IN CLUSTER')
      STOP
      RETURN
      # end                                                  
      def STATS(NEVENT,NGOOD):
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,TCFMAX(10),TCFMAX1,RSTART,EFIELD,ETHRM,ECUT,NDELTA,IMIP,IWRITE  
      COMMON/IDEXC/NGEXC1,NGEXC2,NGEXC3,NGEXC4,NGEXC5,NGEXC6,IDG1,IDG2,IDG3,IDG4,IDG5,IDG6
      COMMON/PRIM3/MSUM(10000),MCOMP(10000),MRAYL(10000),MPAIR(10000),MPHOT(10000),MVAC(10000)
      COMMON/STTS/XST(150000),YST(150000),ZST(150000),TIME(150000),TTIME(150000),NFGF(150000),NFGPP(150000),NFGBR(150000),NELEC,NEGION,EST1,EST2
      COMMON/STEXC/XSTEXC(150000),YSTEXC(150000),ZSTEXC(150000),TSTEXC(150000),NSTEXC
      COMMON/STEXCNUL/XSTN(150000),YSTN(150000),ZSTN(150000),TSTN(150000),IDNUL(150000),NEXCNUL
      COMMON/CLUS/XAV[100000],YAV[100000],ZAV[100000],TAV[100000],XYAV[100000],XYZAV[100000],DX(100000),DY(100000),DZ[100000],DT(100000),DXY(100000),DXYZ[100000],NCL(100000),FARX1(100000),FARY1(100000),FARZ1(100000),FARXY1(100000),RMAX1(100000),TSUM(100000),XNEG(100000), YNEG(100000),ZNEG(100000),EDELTA[100000],EDELTA2(100000),NCLEXC(100000)
      COMMON/PLOT/NXPL10(31),NYPL10(31),NZPL10(31),NXPL40(31),NYPL40(31),NZPL40(31),NXPL100(31),NYPL100(31),NZPL100(31),NXPL400(31),NYPL400(31),NZPL400(31),NXPL1000(31),NYPL1000(31),NZPL1000(31),NXPL2(31),NYPL2(31),NZPL2(31),NXPL4000(31),NYPL4000(31),NZPL4000(31),NXPL10000(31),NYPL10000(31),NZPL10000(31),NXPL40000(31),NYPL40000(31),NZPL40000(31),NXPL100000(31),NYPL100000(31),NZPL100000(31),NRPL2(31),NRPL10(31),NRPL40(31),NRPL100(31),NRPL400(31),NRPL1000(31),NRPL4000(31),NRPL10000(31),NRPL40000(31),NRPL100000(31),NEPL1(100),NEPL10(100),NEPL100(100),MELEC(1000),MELEC3(1000),MELEC10(1000),MELEC30(1000),MELEC100(1000),MELEC300(1000)                 
#-----------------------------------------------------------------------
#  NEVENT IS EVENT EVENT POINTER. NGOOD IS GOOD EVENT POINTER
#  FORMS AVERAGES OVER EACH DELTA AND DOES SOME STATISTICS
#  LOADS PLOT ARRAYS XPLOT YPLOT AND ZPLOT (SCALED BY 1 10 AND 100)
#  OUTPUTS RAW DATA TO FILE IF IWRITE CONTROL GT  0
#  OUTPUTS THERMALISED ELECTRON X,Y,Z AND T IF  IWRITE EQ 1
#  OUTPUTS ALSO X,Y,Z AND T FOR EACH  EXCITATION IF 
#  IWRITE EQ 2        
# ----------------------------------------------------------------------
      if(NGOOD <= 0):
 :
       WRITE(6,990) NEVENT,NGOOD
  990  print(' IN STATS NEVENT=',I6,' NGOOD=',I3)
      # endif
      NCLUS=NELEC-NEGION
      if(NCLUS > 150000):
 GO TO 99
      SUMX=0.00
      SUMX2=0.00
      SUMY=0.00
      SUMY2=0.00
      SUMZ=0.00
      SUMZ2=0.00
      SUMRXY=0.00
      SUMRXY2=0.00
      SUMRXYZ=0.00
      SUMRXYZ2=0.00
      SUMT=0.00
      SUMT2=0.00
      FARX=0.00
      FARY=0.00
      FARZ=0.00
      FARXY=0.00
      RMAX=0.00
      SUMTT=0.00
      NXNEG=0
      NYNEG=0
      NZNEG=0
      ESUM=0.0
      ATOTR=0.0
      ATOTC=0.0
      ATOTP=0.0
      ATOTPE=0.0
#
      DO 400 IS=1,NCLUS
      XST(IS)=XST(IS)*1.D6
      X=XST(IS)
      if(X < 0.0):
 :
       NXNEG=NXNEG+1
       I1=DINT(X/2.0-0.5)
       I2=DINT(X/10.0-0.5)
       I3=DINT(X/40.0-0.5)
       I4=DINT(X/100.0-0.5)
       I5=DINT(X/400.0-0.5)
       I6=DINT(X/1000.0-0.5)
       I7=DINT(X/4000.0-0.5)
       I8=DINT(X/10000.0-0.5)
       I9=DINT(X/40000.0-0.5)
       I10=DINT(X/100000.0-0.5)
      else: 
       I1=DINT(X/2.0+0.5)
       I2=DINT(X/10.0+0.5)
       I3=DINT(X/40.0+0.5)
       I4=DINT(X/100.0+0.5)
       I5=DINT(X/400.0+0.5)
       I6=DINT(X/1000.0+0.5)
       I7=DINT(X/4000.0+0.5) 
       I8=DINT(X/10000.0+0.5)
       I9=DINT(X/40000.0+0.5)
       I10=DINT(X/100000.0+0.5)
      # endif
      I1=I1+16
      I2=I2+16
      I3=I3+16
      I4=I4+16
      I5=I5+16
      I6=I6+16
      I7=I7+16
      I8=I8+16
      I9=I9+16
      I10=I10+16
      if(I1 < 1):
 I1=1
      if(I1 > 31):
 I1=31
      if(I2 < 1):
 I2=1
      if(I2 > 31):
 I2=31
      if(I3 < 1):
 I3=1
      if(I3 > 31):
 I3=31
      if(I4 < 1):
 I4=1
      if(I4 > 31):
 I4=31
      if(I5 < 1):
 I5=1
      if(I5 > 31):
 I5=31
      if(I6 < 1):
 I6=1
      if(I6 > 31):
 I6=31
      if(I7 < 1):
 I7=1
      if(I7 > 31):
 I7=31
      if(I8 < 1):
 I8=1
      if(I8 > 31):
 I8=31
      if(I9 < 1):
 I9=1
      if(I9 > 31):
 I9=31
      if(I10 < 1):
 I10=1
      if(I10 > 31):
 I10=31
      NXPL2(I1)=NXPL2(I1)+1
      NXPL10(I2)=NXPL10(I2)+1
      NXPL40(I3)=NXPL40(I3)+1
      NXPL100(I4)=NXPL100(I4)+1
      NXPL400(I5)=NXPL400(I5)+1
      NXPL1000(I6)=NXPL1000(I6)+1
      NXPL4000(I7)=NXPL4000(I7)+1
      NXPL10000(I8)=NXPL10000(I8)+1
      NXPL40000(I9)=NXPL40000(I9)+1
      NXPL100000(I10)=NXPL100000(I10)+1
      X2=X*X
      SUMX=SUMX+X
      SUMX2=SUMX2+X2
      if(abs(X):
 > abs(FARX)) FARX=abs(X)
      YST(IS)=YST(IS)*1.D6
      Y=YST(IS)
      if(Y < 0.0):
 :
       NYNEG=NYNEG+1
       I1=DINT(Y/2.0-0.5)
       I2=DINT(Y/10.0-0.5)
       I3=DINT(Y/40.0-0.5)
       I4=DINT(Y/100.0-0.5)
       I5=DINT(Y/400.0-0.5)
       I6=DINT(Y/1000.0-0.5)
       I7=DINT(Y/4000.0-0.5)
       I8=DINT(Y/10000.0-0.5)
       I9=DINT(Y/40000.0-0.5)
       I10=DINT(Y/100000.0-0.5)
      else: 
       I1=DINT(Y/2.0+0.5)
       I2=DINT(Y/10.0+0.5)
       I3=DINT(Y/40.0+0.5)
       I4=DINT(Y/100.0+0.5)
       I5=DINT(Y/400.0+0.5)
       I6=DINT(Y/1000.0+0.5)
       I7=DINT(Y/4000.0+0.5) 
       I8=DINT(Y/10000.0+0.5)
       I9=DINT(Y/40000.0+0.5)
       I10=DINT(Y/100000.0+0.5)
      # endif
      I1=I1+16
      I2=I2+16
      I3=I3+16
      I4=I4+16
      I5=I5+16
      I6=I6+16
      I7=I7+16
      I8=I8+16
      I9=I9+16
      I10=I10+16
      if(I1 < 1):
 I1=1
      if(I1 > 31):
 I1=31
      if(I2 < 1):
 I2=1
      if(I2 > 31):
 I2=31
      if(I3 < 1):
 I3=1
      if(I3 > 31):
 I3=31
      if(I4 < 1):
 I4=1
      if(I4 > 31):
 I4=31
      if(I5 < 1):
 I5=1
      if(I5 > 31):
 I5=31
      if(I6 < 1):
 I6=1
      if(I6 > 31):
 I6=31
      if(I7 < 1):
 I7=1
      if(I7 > 31):
 I7=31
      if(I8 < 1):
 I8=1
      if(I8 > 31):
 I8=31
      if(I9 < 1):
 I9=1
      if(I9 > 31):
 I9=31
      if(I10 < 1):
 I10=1
      if(I10 > 31):
 I10=31
      NYPL2(I1)=NYPL2(I1)+1
      NYPL10(I2)=NYPL10(I2)+1
      NYPL40(I3)=NYPL40(I3)+1
      NYPL100(I4)=NYPL100(I4)+1
      NYPL400(I5)=NYPL400(I5)+1
      NYPL1000(I6)=NYPL1000(I6)+1
      NYPL4000(I7)=NYPL4000(I7)+1
      NYPL10000(I8)=NYPL10000(I8)+1
      NYPL40000(I9)=NYPL40000(I9)+1
      NYPL100000(I10)=NYPL100000(I10)+1
      Y2=Y*Y
      SUMY=SUMY+Y
      SUMY2=SUMY2+Y2 
      if(abs(Y):
 > abs(FARY)) FARY=abs(Y)
      ZST(IS)=ZST(IS)*1.D6
      Z=ZST(IS)
      if(Z < 0.0):
 :
       NZNEG=NZNEG+1
       I1=DINT(Z/2.0-0.5)
       I2=DINT(Z/10.0-0.5)
       I3=DINT(Z/40.0-0.5)
       I4=DINT(Z/100.0-0.5)
       I5=DINT(Z/400.0-0.5)
       I6=DINT(Z/1000.0-0.5)
       I7=DINT(Z/4000.0-0.5)
       I8=DINT(Z/10000.0-0.5)
       I9=DINT(Z/40000.0-0.5)
       I10=DINT(Z/100000.0-0.5)
      else: 
       I1=DINT(Z/2.0+0.5)
       I2=DINT(Z/10.0+0.5)
       I3=DINT(Z/40.0+0.5)
       I4=DINT(Z/100.0+0.5)
       I5=DINT(Z/400.0+0.5) 
       I6=DINT(Z/1000.0+0.5)
       I7=DINT(Z/4000.0+0.5)
       I8=DINT(Z/10000.0+0.5)
       I9=DINT(Z/40000.0+0.5)
       I10=DINT(Z/100000.0+0.5)
      # endif
      I1=I1+16
      I2=I2+16
      I3=I3+16
      I4=I4+16
      I5=I5+16
      I6=I6+16
      I7=I7+16
      I8=I8+16
      I9=I9+16
      I10=I10+16
      if(I1 < 1):
 I1=1
      if(I1 > 31):
 I1=31
      if(I2 < 1):
 I2=1
      if(I2 > 31):
 I2=31
      if(I3 < 1):
 I3=1
      if(I3 > 31):
 I3=31
      if(I4 < 1):
 I4=1
      if(I4 > 31):
 I4=31
      if(I5 < 1):
 I5=1
      if(I5 > 31):
 I5=31
      if(I6 < 1):
 I6=1
      if(I6 > 31):
 I6=31
      if(I7 < 1):
 I7=1
      if(I7 > 31):
 I7=31
      if(I8 < 1):
 I8=1
      if(I8 > 31):
 I8=31
      if(I9 < 1):
 I9=1
      if(I9 > 31):
 I9=31
      if(I10 < 1):
 I10=1
      if(I10 > 31):
 I10=31
      NZPL2(I1)=NZPL2(I1)+1
      NZPL10(I2)=NZPL10(I2)+1
      NZPL40(I3)=NZPL40(I3)+1
      NZPL100(I4)=NZPL100(I4)+1
      NZPL400(I5)=NZPL400(I5)+1
      NZPL1000(I6)=NZPL1000(I6)+1
      NZPL4000(I7)=NZPL4000(I7)+1
      NZPL10000(I8)=NZPL10000(I8)+1
      NZPL40000(I9)=NZPL40000(I9)+1
      NZPL100000(I10)=NZPL100000(I10)+1
      Z=ZST(IS)
      R=math.sqrt(X*X+Y*Y+Z*Z)
      I1=DINT(R/2.0+0.5)
      I2=DINT(R/10.0+0.5)
      I3=DINT(R/40.0+0.5)
      I4=DINT(R/100.0+0.5)
      I5=DINT(R/400.0+0.5) 
      I6=DINT(R/1000.0+0.5)
      I7=DINT(R/4000.0+0.5)
      I8=DINT(R/10000.0+0.5)
      I9=DINT(R/40000.0+0.5)
      I10=DINT(R/100000.0+0.5)
      I1=I1+16
      I2=I2+16
      I3=I3+16
      I4=I4+16
      I5=I5+16
      I6=I6+16
      I7=I7+16
      I8=I8+16
      I9=I9+16
      I10=I10+16
      if(I1 > 31):
 I1=31
      if(I2 > 31):
 I2=31
      if(I3 > 31):
 I3=31
      if(I4 > 31):
 I4=31
      if(I5 > 31):
 I5=31
      if(I6 > 31):
 I6=31
      if(I7 > 31):
 I7=31
      if(I8 > 31):
 I8=31
      if(I9 > 31):
 I9=31
      if(I10 > 31):
 I10=31
      if(I1 < 1):
 I1=1
      if(I2 < 1):
 I2=1
      if(I3 < 1):
 I3=1
      if(I4 < 1):
 I4=1
      if(I5 < 1):
 I5=1
      if(I6 < 1):
 I6=1
      if(I7 < 1):
 I7=1
      if(I8 < 1):
 I8=1
      if(I9 < 1):
 I9=1
      if(I10 < 1):
 I10=1
      NRPL2(I1)=NRPL2(I1)+1
      NRPL10(I2)=NRPL10(I2)+1
      NRPL40(I3)=NRPL40(I3)+1
      NRPL100(I4)=NRPL100(I4)+1
      NRPL400(I5)=NRPL400(I5)+1
      NRPL1000(I6)=NRPL1000(I6)+1
      NRPL4000(I7)=NRPL4000(I7)+1
      NRPL10000(I8)=NRPL10000(I8)+1
      NRPL40000(I9)=NRPL40000(I9)+1
      NRPL100000(I10)=NRPL100000(I10)+1
      Z2=Z*Z
      SUMZ=SUMZ+Z
      SUMZ2=SUMZ2+Z2 
      if(abs(Z):
 > abs(FARZ)) FARZ=abs(Z)
      RXY=math.sqrt(X2+Y2)
      RXYZ=math.sqrt(X2+Y2+Z2)
      SUMRXY=SUMRXY+RXY
      SUMRXY2=SUMRXY2+RXY*2 
      SUMRXYZ=SUMRXYZ+RXYZ
      SUMRXYZ2=SUMRXYZ2+RXYZ*2
      if(RXY > FARXY):
 FARXY=RXY
      if(RXYZ > RMAX):
 RMAX=RXYZ   
      T=TIME(IS)
      SUMT=SUMT+T 
      SUMT2=SUMT2+T*T
      SUMTT=SUMTT+TTIME(IS)
#
      XSTEXC(IS)=XSTEXC(IS)*1.D6
      YSTEXC(IS)=YSTEXC(IS)*1.D6
      ZSTEXC(IS)=ZSTEXC(IS)*1.D6
  400 CONTINUE
# OUTPUT THERMAL ELECTRON POSITIONS AND TIME 
      if(IWRITE == 1):
 : 
#      ITEST=123456
#      WRITE(50,*) ITEST
       WRITE(50,*) NGOOD,NCLUS,NSTEXC,NGEXC1,NGEXC2,NGEXC3,NGEXC4,NGEXC5,NGEXC6,MCOMP(NEVENT),MPAIR(NEVENT),NEXCNUL
#      DO 8876 IPR=1,NCLUS
#      WRITE(50,*) IPR,XST(IPR),YST(IPR),ZST(IPR),TIME(IPR),NFGF(IPR),
#    /NFGPP(IPR),NFGBR(IPR)
#8876 CONTINUE
       WRITE(50,*) (XST(IPR),YST(IPR),ZST(IPR),TIME(IPR),NFGF(IPR),NFGPP(IPR),NFGBR(IPR),IPR=1,NCLUS)
      # endif
# OUTPUT EXCITATION CLOUD COORDINATES HERE  
      if(IWRITE == 2):
 : 
#      ITEST=123456
#      WRITE(50,*) ITEST
       WRITE(50,*) NGOOD,NCLUS,NSTEXC,NGEXC1,NGEXC2,NGEXC3,NGEXC4,NGEXC5,NGEXC6,MCOMP(NEVENT),MPAIR(NEVENT),NEXCNUL
#      DO 8877 IPR=1,NCLUS
#      WRITE(50,*) IPR,XST(IPR),YST(IPR),ZST(IPR),TIME(IPR),NFGF(IPR),
#    /NFGPP(IPR),NFGBR(IPR)
#8877 CONTINUE
       WRITE(50,*) (XST(IPR),YST(IPR),ZST(IPR),TIME(IPR),NFGF(IPR),NFGPP(IPR),NFGBR(IPR),IPR=1,NCLUS)
#       DO 8878 IPR=1,NSTEXC
#       WRITE(50,*) IPR,XSTEXC(IPR),YSTEXC(IPR),ZSTEXC(IPR),TSTEXC(IPR)
# 8878 CONTINUE
       WRITE(50,*) (XSTEXC(IPR),YSTEXC(IPR),ZSTEXC(IPR),TSTEXC(IPR),IPR=1,NSTEXC)
       if(NEXCNUL > 0):
 :
        WRITE(50,*) (XSTN(IPR),YSTN(IPR),ZSTN(IPR),TSTN(IPR),IDNUL(IPR),IPR=1,NEXCNUL)
        else:
# WRITE BLANK LINE
        WRITE(50,*) 0.0,0.0,0.0,0.0,0 
       # endif      
      # endif
#---------------------------------------------------
      I1=DINT(EST1+1.0)
      I2=DINT(EST1/10.0+1.0)
      I3=DINT(EST1/100.0+1.0)
      if(I1 > 100):
 I1=100
      if(I2 > 100):
 I2=100
      if(I3 > 100):
 I3=100
      NEPL1(I1)=NEPL1(I1)+1
      NEPL10(I2)=NEPL10(I2)+1
      NEPL100(I3)=NEPL100(I3)+1
      KDUM=NELEC
      KDUM3=1+(NELEC/3)
      KDUM10=1+(NELEC/10)
      KDUM30=1+(NELEC/30)
      KDUM100=1+(NELEC/100)
      KDUM300=1+(NELEC/300)
      if(KDUM > 1000):
 KDUM=1000
      MELEC(KDUM)=MELEC(KDUM)+1
      if(KDUM3 > 1000):
 KDUM3=1000
      MELEC3(KDUM3)=MELEC3(KDUM3)+1
      if(KDUM10 > 1000):
 KDUM10=1000
      MELEC10(KDUM10)=MELEC10(KDUM10)+1
      if(KDUM30 > 1000):
 KDUM30=1000
      MELEC30(KDUM30)=MELEC30(KDUM30)+1
      if(KDUM100 > 1000):
 KDUM100=1000
      MELEC100(KDUM100)=MELEC100(KDUM100)+1
      if(KDUM300 > 1000):
 KDUM300=1000
      MELEC300(KDUM300)=MELEC300(KDUM300)+1
# 
# STORE AVERAGES AND WIDTHS FOR EACH DELTA
#
      if(NCLUS == 0):
 RETURN
      ACLUS=float(NCLUS)
      XAV[NGOOD]=SUMX/ACLUS
      YAV[NGOOD]=SUMY/ACLUS
      ZAV[NGOOD]=SUMZ/ACLUS
      TAV[NGOOD]=SUMT/ACLUS
      XYAV[NGOOD]=SUMRXY/ACLUS
      XYZAV[NGOOD]=SUMRXYZ/ACLUS
#  IONISATION CLUSTER SIZE
      NCL(NGOOD)=NCLUS
# EXCITATION CLUSTER SIZE
      NCLEXC(NGOOD)=NSTEXC
#
      FARX1(NGOOD)=FARX
      FARY1(NGOOD)=FARY
      FARZ1(NGOOD)=FARZ
      FARXY1(NGOOD)=FARXY
      RMAX1(NGOOD)=RMAX
      TSUM(NGOOD)=SUMTT
      XNEG(NGOOD)=float(NXNEG)/ACLUS
      YNEG(NGOOD)=float(NYNEG)/ACLUS
      ZNEG(NGOOD)=float(NZNEG)/ACLUS
      EDELTA[NGOOD]=EST1
      EDELTA2(NGOOD)=EST2
      if(NCLUS > 1):
 :    
       NC2=NCLUS*NCLUS-NCLUS
       ANC2=float(NC2)
       DX(NGOOD)=math.sqrt(ABS((ACLUS*SUMX2-SUMX*SUMX)/ANC2))
       DY(NGOOD)=math.sqrt(ABS((ACLUS*SUMY2-SUMY*SUMY)/ANC2))
       DZ[NGOOD]=math.sqrt(ABS((ACLUS*SUMZ2-SUMZ*SUMZ)/ANC2))
       DT(NGOOD)=math.sqrt(ABS((ACLUS*SUMT2-SUMT*SUMT)/ANC2))
       DXY(NGOOD)=math.sqrt(ABS((ACLUS*SUMRXY2-SUMRXY*SUMRXY)/ANC2))
       DXYZ[NGOOD]=math.sqrt(ABS((ACLUS*SUMRXYZ2-SUMRXYZ*SUMRXYZ)/ANC2))
      else:
       DX(NGOOD)=0.0
       DY(NGOOD)=0.0
       DZ[NGOOD]=0.0
       DZ[NGOOD]=0.0
       DT(NGOOD)=0.0
       DXY(NGOOD)=0.0
       DXYZ[NGOOD]=0.0
      # endif
      RETURN
   99 WRITE(6,991) NCLUS
  991 print(3(/),' WARNING OVERFLOW IN ARRAYS IN def STATS. NCLUS =',I6,' STOPPED def')
      STOP
      # end
      def STATS2:
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)   
      COMMON/INPT2/KGAS,LGAS,DETEFF,EXCWGHT                            
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,TCFMAX(10),TCFMAX1,RSTART,EFIELD,ETHRM,ECUT,NDELTA,IMIP,IWRITE  
      COMMON/CLUS/XAV[100000],YAV[100000],ZAV[100000],TAV[100000],XYAV[100000],XYZAV[100000],DX(100000),DY(100000),DZ[100000],DT(100000),DXY(100000),DXYZ[100000],NCL(100000),FARX1(100000),FARY1(100000),FARZ1(100000),FARXY1(100000),RMAX1(100000),TSUM(100000),XNEG(100000),YNEG(100000),ZNEG(100000),EDELTA[100000],EDELTA2(100000),NCLEXC(100000)
      COMMON/PRIM3/MSUM(10000),MCOMP(10000),MRAYL(10000),MPAIR(10000),MPHOT(10000),MVAC(10000)
      COMMON/FANO/AFAN1,AFAN2,AFAN3,AFAN4,ASKEW,AKURT,AFAN1EXC,AFAN2EXC,AFAN3EXC,AFAN4EXC,ASKEWEXC,AKURTEXC,AFAN1TOT,AFAN2TOT,AFAN3TOT,AFAN4TOT,ASKEWTOT,AKURTTOT,AFAN1TOF,AFAN2TOF,AFAN3TOF,AFAN4TOF,ASKEWTOF,AKURTTOF
      COMMON/FANOE/AFAN1E,AFAN2E,AFAN3E,AFAN4E,ASKEWE,AKURTE,AFAN1EXCE,AFAN2EXCE,AFAN3EXCE,AFAN4EXCE,ASKEWEXCE,AKURTEXCE,AFAN1TOTE,AFAN2TOTE,AFAN3TOTE,AFAN4TOTE,ASKEWTOTE,AKURTTOTE,AFAN1TOFE,AFAN2TOFE,AFAN3TOFE,AFAN4TOFE,ASKEWTOFE,AKURTTOFE,NFE
      COMMON/RNGE/XBAR,YBAR,ZBAR,TBAR,XYBAR,XYZBAR,DXBAR,DYBAR,DZBAR,DTBAR,DXYBAR,DXYZBAR,XMAX,YMAX,ZMAX,XYMAX,RMAX,SUMTT,XNEG1,YNEG1,ZNEG1,FARXBAR,FARYBAR,FARZBAR,FARXYBAR,RMAXBAR,EBAR,EBAR2    
      COMMON/PRIM1/AVRAYL,AVCOMP,AVPAIR,AVPHOTO
      COMMON/PRIM2/CMPDST(10),RYLDST(10)
#      
#-----------------------------------------------------------------------
#   CALCULATES AVERAGES OVER TOTAL NUMBER OF DELTAS
#   CALCULATES FANO FACTORS FO,F1,F2 AND F3
#  CALCULATES FANO FACTORS FOR EXCITATION 
#  INCLUDED MODIFICATION TO CALCULATE ESCAPE PEAK FANO FACTORS 
#-----------------------------------------------------------------------
# 
      ANCL1=0.00
      ANCL2=0.00
      ANCL3=0.00
      ANCL4=0.00
      ANCL1E=0.00
      ANCL2E=0.00
      ANCL3E=0.00
      ANCL4E=0.00
      ANCL1EXC=0.00
      ANCL2EXC=0.00
      ANCL3EXC=0.00
      ANCL4EXC=0.00
      ANCL1EXCE=0.00
      ANCL2EXCE=0.00
      ANCL3EXCE=0.00
      ANCL4EXCE=0.00
      ANCL1TOT=0.00
      ANCL2TOT=0.00
      ANCL3TOT=0.00
      ANCL4TOT=0.00
      ANCL1TOTE=0.00
      ANCL2TOTE=0.00
      ANCL3TOTE=0.00
      ANCL4TOTE=0.00
      ANCL1TOF=0.00
      ANCL2TOF=0.00
      ANCL3TOF=0.00
      ANCL4TOF=0.00
      ANCL1TOFE=0.00
      ANCL2TOFE=0.00
      ANCL3TOFE=0.00
      ANCL4TOFE=0.00
      ATOTR=0.00
      ATOTC=0.00
      ATOTP=0.00
      ATOTPE=0.00
      NF=0
      NFE=0
      DETFRAC=DETEFF*0.01
      if(DETEFF == 0.0):
 :
       WRITE(6,99) 
   99  print(2/,' WARNING EXCITATION DETECTION EFFICIENCY WAS ZERO NOW  SET TO 1.0 % ',2/)
       DETFRAC=0.01
      # endif
      DO 10 I=1,NDELTA
      NCLUS=NCL[I]
      NEXC=NCLEXC[I]
      if(IMIP == 1):
 GO TO 11 
      if(MPAIR[I]:
 > 2) :
       WRITE(6,991) MPAIR[I],I
  991 print(' ERROR IN STATS2 MPAIR GT 2 =',I9,' EVENT NO=',I6)
       STOP
      # endif
      if(MPAIR[I]:
 > 0) GO TO 5
#  REMOVE EXTRA ELECTRON FOR CONSISTENCY IN CLUSTER DEF FOR DELTAS      
   11 NCLUS1=NCLUS   
      if(IMIP == 2):
 NCLUS1=NCLUS-1
      ANC1=float(NCLUS1)
      ANCL1=ANCL1+ANC1
      ANCL2=ANCL2+ANC1*ANC1
      ANCL3=ANCL3+ANC1*ANC1*ANC1
      ANCL4=ANCL4+ANC1*ANC1*ANC1*ANC1
      NTEMP=0
      DO 1 K=1,NEXC
      R1=DRAND48(RDUM)
      if(R1 < DETFRAC):
 NTEMP=NTEMP+1
    1 CONTINUE
      ANC1EXC=float(NEXC)
      ANCL1EXC=ANCL1EXC+ANC1EXC
      ANCL2EXC=ANCL2EXC+ANC1EXC*ANC1EXC
      ANCL3EXC=ANCL3EXC+ANC1EXC*ANC1EXC*ANC1EXC
      ANCL4EXC=ANCL4EXC+ANC1EXC*ANC1EXC*ANC1EXC*ANC1EXC
      ANCTOT=ANC1+float(NTEMP)*EXCWGHT
      ANCL1TOT=ANCL1TOT+ANCTOT
      ANCL2TOT=ANCL2TOT+ANCTOT*ANCTOT
      ANCL3TOT=ANCL3TOT+ANCTOT*ANCTOT*ANCTOT
      ANCL4TOT=ANCL4TOT+ANCTOT*ANCTOT*ANCTOT*ANCTOT
      ANCTOF=ANC1+float(NEXC)*EXCWGHT
      ANCL1TOF=ANCL1TOF+ANCTOF
      ANCL2TOF=ANCL2TOF+ANCTOF*ANCTOF
      ANCL3TOF=ANCL3TOF+ANCTOF*ANCTOF*ANCTOF
      ANCL4TOF=ANCL4TOF+ANCTOF*ANCTOF*ANCTOF*ANCTOF
      NF=NF+1
      GO TO 8
#  REMOVE EXTRA ELECTRON FOR CONSISTENCY IN CLUSTER DEF FOR DELTAS      
    5 NCLUS1=NCLUS   
      if(IMIP == 2):
 NCLUS1=NCLUS-1
      ANC1=float(NCLUS1)
      ANCL1E=ANCL1E+ANC1
      ANCL2E=ANCL2E+ANC1*ANC1
      ANCL3E=ANCL3E+ANC1*ANC1*ANC1
      ANCL4E=ANCL4E+ANC1*ANC1*ANC1*ANC1
      NTEMP=0
      DO 6 K=1,NEXC
      R1=DRAND48(RDUM)
      if(R1 < DETFRAC):
 NTEMP=NTEMP+1
    6 CONTINUE
      ANC1EXC=float(NEXC)
      ANCL1EXCE=ANCL1EXCE+ANC1EXC
      ANCL2EXCE=ANCL2EXCE+ANC1EXC*ANC1EXC
      ANCL3EXCE=ANCL3EXCE+ANC1EXC*ANC1EXC*ANC1EXC
      ANCL4EXCE=ANCL4EXCE+ANC1EXC*ANC1EXC*ANC1EXC*ANC1EXC
      ANCTOT=ANC1+float(NTEMP)*EXCWGHT
      ANCL1TOTE=ANCL1TOTE+ANCTOT
      ANCL2TOTE=ANCL2TOTE+ANCTOT*ANCTOT
      ANCL3TOTE=ANCL3TOTE+ANCTOT*ANCTOT*ANCTOT
      ANCL4TOTE=ANCL4TOTE+ANCTOT*ANCTOT*ANCTOT*ANCTOT
      ANCTOF=ANC1+float(NEXC)*EXCWGHT
      ANCL1TOFE=ANCL1TOFE+ANCTOF
      ANCL2TOFE=ANCL2TOFE+ANCTOF*ANCTOF
      ANCL3TOFE=ANCL3TOFE+ANCTOF*ANCTOF*ANCTOF
      ANCL4TOFE=ANCL4TOFE+ANCTOF*ANCTOF*ANCTOF*ANCTOF
      NFE=NFE+1
    8 if(IMIP == 3) :
      ATOTR=ATOTR+MRAYL[I]
      ATOTC=ATOTC+MCOMP[I]
      ATOTP=ATOTP+MPAIR[I]
      ATOTPE=ATOTPE+MPHOT[I]
      # endif
   10 CONTINUE
# CALCULATE FANO FACTORS
      ANF=float(NF)
      ANF1=ANF*ANF
      if(ANF1 == 0.0):
 ANF1=1.00
      AFAN1=ANCL1/ANF
      AFAN1EXC=ANCL1EXC/ANF
      AFAN1TOT=ANCL1TOT/ANF
      AFAN1TOF=ANCL1TOF/ANF
      AFAN2=math.sqrt((ANF*ANCL2-ANCL1*ANCL1)/ANF1)
      AFAN2EXC=math.sqrt((ANF*ANCL2EXC-ANCL1EXC*ANCL1EXC)/ANF1)
      AFAN2TOT=math.sqrt((ANF*ANCL2TOT-ANCL1TOT*ANCL1TOT)/ANF1)
      AFAN2TOF=math.sqrt((ANF*ANCL2TOF-ANCL1TOF*ANCL1TOF)/ANF1)
      AFAN3=(ANCL3-3.00*AFAN1*ANCL2+2.00*ANCL1*AFAN1*AFAN1)/ANF
      AFAN3EXC=(ANCL3EXC-3.00*AFAN1EXC*ANCL2EXC+2.00*ANCL1EXC*AFAN1EXC*AFAN1EXC)/ANF
      AFAN3TOT=(ANCL3TOT-3.00*AFAN1TOT*ANCL2TOT+2.00*ANCL1TOT*AFAN1TOT*AFAN1TOT)/ANF
      AFAN3TOF=(ANCL3TOF-3.00*AFAN1TOF*ANCL2TOF+2.00*ANCL1TOF*AFAN1TOF*AFAN1TOF)/ANF
      AFAN4=(ANCL4-4.00*AFAN1*ANCL3+6.00*AFAN1*AFAN1*ANCL2-3.00*AFAN1*AFAN1*AFAN1*ANCL1)/ANF
      AFAN4=AFAN4-3.00*AFAN2*AFAN2*AFAN2*AFAN2
      AFAN4EXC=(ANCL4EXC-4.00*AFAN1EXC*ANCL3EXC+6.00*AFAN1EXC*AFAN1EXC*ANCL2EXC-3.00*AFAN1EXC*AFAN1EXC*AFAN1EXC*ANCL1EXC)/ANF
      AFAN4EXC=AFAN4EXC-3.00*AFAN2EXC*AFAN2EXC*AFAN2EXC*AFAN2EXC
      AFAN4TOT=(ANCL4TOT-4.00*AFAN1TOT*ANCL3TOT+6.00*AFAN1TOT*AFAN1TOT*ANCL2TOT-3.00*AFAN1TOT*AFAN1TOT*AFAN1TOT*ANCL1TOT)/ANF
      AFAN4TOT=AFAN4TOT-3.00*AFAN2TOT*AFAN2TOT*AFAN2TOT*AFAN2TOT
      AFAN4TOF=(ANCL4TOF-4.00*AFAN1TOF*ANCL3TOF+6.00*AFAN1TOF*AFAN1TOF*ANCL2TOF-3.00*AFAN1TOF*AFAN1TOF*AFAN1TOF*ANCL1TOF)/ANF
      AFAN4TOF=AFAN4TOF-3.00*AFAN2TOF*AFAN2TOF*AFAN2TOF*AFAN2TOF
      ASKEW=AFAN3/(AFAN2**3)
      AKURT=AFAN4/(AFAN2**4)
      AFAN3=AFAN3/AFAN1
      AFAN4=AFAN4/AFAN1
      ASKEWEXC=AFAN3EXC/(AFAN2EXC**3)
      AKURTEXC=AFAN4EXC/(AFAN2EXC**4)
      AFAN3EXC=AFAN3EXC/AFAN1EXC
      AFAN4EXC=AFAN4EXC/AFAN1EXC
      ASKEWTOT=AFAN3TOT/(AFAN2TOT**3)
      AKURTTOT=AFAN4TOT/(AFAN2TOT**4)
      AFAN3TOT=AFAN3TOT/AFAN1TOT
      AFAN4TOT=AFAN4TOT/AFAN1TOT
      ASKEWTOF=AFAN3TOF/(AFAN2TOF**3)
      AKURTTOF=AFAN4TOF/(AFAN2TOF**4)
      AFAN3TOF=AFAN3TOF/AFAN1TOF
      AFAN4TOF=AFAN4TOF/AFAN1TOF
# CALCULATE FANO FACTORS FOR ESCAPE PEAK
      ANFE=float(NFE)
      ANF1E=ANFE*ANFE
      if(ANF1E == 0.0):
 ANF1E=1.00
      AFAN1E=ANCL1E/ANFE
      AFAN1EXCE=ANCL1EXCE/ANFE
      AFAN1TOTE=ANCL1TOTE/ANFE
      AFAN1TOFE=ANCL1TOFE/ANFE
      AFAN2E=math.sqrt((ANFE*ANCL2E-ANCL1E*ANCL1E)/ANF1E)
      AFAN2EXCE=math.sqrt((ANFE*ANCL2EXCE-ANCL1EXCE*ANCL1EXCE)/ANF1E)
      AFAN2TOTE=math.sqrt((ANFE*ANCL2TOTE-ANCL1TOTE*ANCL1TOTE)/ANF1E)
      AFAN2TOFE=math.sqrt((ANFE*ANCL2TOFE-ANCL1TOFE*ANCL1TOFE)/ANF1E)
      AFAN3E=(ANCL3E-3.00*AFAN1E*ANCL2E+2.00*ANCL1E*AFAN1E*AFAN1E)/ANFE
      AFAN3EXCE=(ANCL3EXCE-3.00*AFAN1EXCE*ANCL2EXCE+2.00*ANCL1EXCE*AFAN1EXCE*AFAN1EXCE)/ANFE
      AFAN3TOTE=(ANCL3TOTE-3.00*AFAN1TOTE*ANCL2TOTE+2.00*ANCL1TOTE*AFAN1TOTE*AFAN1TOTE)/ANFE
      AFAN3TOFE=(ANCL3TOFE-3.00*AFAN1TOFE*ANCL2TOFE+2.00*ANCL1TOFE*AFAN1TOFE*AFAN1TOFE)/ANFE
      AFAN4E=(ANCL4E-4.00*AFAN1E*ANCL3E+6.00*AFAN1E*AFAN1E*ANCL2E-3.00*AFAN1E*AFAN1E*AFAN1E*ANCL1E)/ANFE
      AFAN4E=AFAN4E-3.00*AFAN2E*AFAN2E*AFAN2E*AFAN2E
      AFAN4EXCE=(ANCL4EXCE-4.00*AFAN1EXCE*ANCL3EXCE+6.00*AFAN1EXCE*AFAN1EXCE*ANCL2EXCE-3.00*AFAN1EXCE*AFAN1EXCE*AFAN1EXCE*ANCL1EXCE)/ANFE
      AFAN4EXCE=AFAN4EXCE-3.00*AFAN2EXCE*AFAN2EXCE*AFAN2EXCE*AFAN2EXCE
      AFAN4TOTE=(ANCL4TOTE-4.00*AFAN1TOTE*ANCL3TOTE+6.00*AFAN1TOTE*AFAN1TOTE*ANCL2TOTE-3.00*AFAN1TOTE*AFAN1TOTE*AFAN1TOTE*ANCL1TOTE)/ANFE
      AFAN4TOTE=AFAN4TOTE-3.00*AFAN2TOTE*AFAN2TOTE*AFAN2TOTE*AFAN2TOTE
      AFAN4TOFE=(ANCL4TOFE-4.00*AFAN1TOFE*ANCL3TOFE+6.00*AFAN1TOFE*AFAN1TOFE*ANCL2TOFE-3.00*AFAN1TOFE*AFAN1TOFE*AFAN1TOFE*ANCL1TOFE)/ANFE
      AFAN4TOFE=AFAN4TOFE-3.00*AFAN2TOFE*AFAN2TOFE*AFAN2TOFE*AFAN2TOFE
      ASKEWE=AFAN3E/(AFAN2E**3)
      AKURTE=AFAN4E/(AFAN2E**4)
      AFAN3E=AFAN3E/AFAN1E
      AFAN4E=AFAN4E/AFAN1E
      ASKEWEXCE=AFAN3EXCE/(AFAN2EXCE**3)
      AKURTEXCE=AFAN4EXCE/(AFAN2EXCE**4)
      AFAN3EXCE=AFAN3EXCE/AFAN1EXCE
      AFAN4EXCE=AFAN4EXCE/AFAN1EXCE
      ASKEWTOTE=AFAN3TOTE/(AFAN2TOTE**3)
      AKURTTOTE=AFAN4TOTE/(AFAN2TOTE**4)
      AFAN3TOTE=AFAN3TOTE/AFAN1TOTE
      AFAN4TOTE=AFAN4TOTE/AFAN1TOTE
      ASKEWTOFE=AFAN3TOFE/(AFAN2TOFE**3)
      AKURTTOFE=AFAN4TOFE/(AFAN2TOFE**4)
      AFAN3TOFE=AFAN3TOFE/AFAN1TOFE
      AFAN4TOFE=AFAN4TOFE/AFAN1TOFE
# CALCULATE AVERAGES OVER TOTAL NUMBER OF DELTAS 
      XBAR=0.00
      YBAR=0.00
      ZBAR=0.00 
      TBAR=0.00
      XYBAR=0.00
      XYZBAR=0.00
      DXBAR=0.00
      DYBAR=0.00
      DZBAR=0.00
      DTBAR=0.00
      DXYBAR=0.00
      DXYZBAR=0.00
      FARXBAR=0.00
      FARYBAR=0.00
      FARZBAR=0.00
      FARXYBAR=0.00
      RMAXBAR=0.00
      XMAX=0.00
      YMAX=0.00
      ZMAX=0.00
      XYMAX=0.00
      RMAX=0.00
      SUMTT=0.00
      XNEGSUM=0.00
      YNEGSUM=0.00
      ZNEGSUM=0.00
      EBAR=0.00
      EBAR2=0.00
      DO 20 I=1,NDELTA
      XBAR=XBAR+XAV[I]
      YBAR=YBAR+YAV[I]
      ZBAR=ZBAR+ZAV[I]
      TBAR=TBAR+TAV[I]
      XYBAR=XYBAR+XYAV[I]
      XYZBAR=XYZBAR+XYZAV[I]
      DXBAR=DXBAR+DX[I]
      DYBAR=DYBAR+DY[I]
      DZBAR=DZBAR+DZ[I]
      DTBAR=DTBAR+DT[I]
      DXYBAR=DXYBAR+DXY[I]
      DXYZBAR=DXYZBAR+DXYZ[I]
      SUMTT=SUMTT+TSUM[I]
      FARXBAR=FARXBAR+FARX1[I]
      if(FARX1[I]:
 > XMAX) XMAX=FARX1[I]
      FARYBAR=FARYBAR+FARY1[I]
      if(FARY1[I]:
 > YMAX) YMAX=FARY1[I]
      FARZBAR=FARZBAR+FARZ1[I]
      if(FARZ1[I]:
 > ZMAX) ZMAX=FARZ1[I]
      FARXYBAR=FARXYBAR+FARXY1[I]
      if(FARXY1[I]:
 > XYMAX) XYMAX=FARXY1[I]
      RMAXBAR=RMAXBAR+RMAX1[I]
      if(RMAX1[I]:
 > RMAX) RMAX=RMAX1[I]
      XNEGSUM=XNEGSUM+XNEG[I]
      YNEGSUM=YNEGSUM+YNEG[I]
      ZNEGSUM=ZNEGSUM+ZNEG[I]
      EBAR=EBAR+EDELTA[I]
      EBAR2=EBAR2+EDELTA2[I]
   20 CONTINUE
      ANDELTA=float(NDELTA)
      XBAR=XBAR/ANDELTA
      YBAR=YBAR/ANDELTA
      ZBAR=ZBAR/ANDELTA
      TBAR=TBAR/ANDELTA
      XYBAR=XYBAR/ANDELTA
      XYZBAR=XYZBAR/ANDELTA
      DXBAR=DXBAR/ANDELTA
      DYBAR=DYBAR/ANDELTA
      DZBAR=DZBAR/ANDELTA
      DTBAR=DTBAR/ANDELTA
      DXYBAR=DXYBAR/ANDELTA
      DXYZBAR=DXYZBAR/ANDELTA
      FARXBAR=FARXBAR/ANDELTA
      FARYBAR=FARYBAR/ANDELTA
      FARZBAR=FARZBAR/ANDELTA
      FARXYBAR=FARXYBAR/ANDELTA
      RMAXBAR=RMAXBAR/ANDELTA
      XNEG1=XNEGSUM/ANDELTA
      YNEG1=YNEGSUM/ANDELTA
      ZNEG1=ZNEGSUM/ANDELTA
      EBAR=EBAR/ANDELTA
      EBAR2=EBAR2/ANDELTA
      if(IMIP == 3):
 :
      AVRAYL=ATOTR/ANDELTA
      AVCOMP=ATOTC/ANDELTA
      AVPAIR=ATOTP/ANDELTA
      AVPHOTO=ATOTPE/ANDELTA
      # endif
      if(IMIP == 3):
 :
       DO 29 I=1,10
       RYLDST[I]=0.0
       CMPDST[I]=0.0
   29  CONTINUE
       DO 32 I=1,NDELTA
       if(MRAYL[I]:
 >= 10 or MRAYL[I] < 1) GO TO 30
       RYLDST(MRAYL[I])=RYLDST(MRAYL[I])+1.0
   30  CONTINUE
       if(MCOMP[I]:
 >= 10 or MCOMP[I] < 1) GO TO 31
       CMPDST(MCOMP[I])=CMPDST(MCOMP[I])+1.0
   31  CONTINUE
   32  CONTINUE
       DO 33 I=1,10
       RYLDST[I]=RYLDST[I]/ANDELTA
       CMPDST[I]=CMPDST[I]/ANDELTA
   33  CONTINUE
      # endif
      RETURN
      # end
      DOUBLE PRECISION def DMAX0(IA,IB)
      #integer *8 IA,IB
      if(IA < IB):
 :
       DMAX0=IB
      else:
       DMAX0=IA
      # endif
      RETURN
      # end
      DOUBLE PRECISION def DMIN0(IA,IB)
      #integer*8 IA,IB,IONE
      IONE=1
      if(IA > IB):
 :
       DMIN0=IB
      else if(IA < IONE) :
       DMIN0=IONE
      else: 
       DMIN0=IA
      # endif
      RETURN
      # end 
      DOUBLE PRECISION def DRAND48(DUMMY)
*-----------------------------------------------------------------------
*   RNDM2  - Returns double precision random numbers by calling RM48.
*   (Last changed on  5/ 2/00.)
*-----------------------------------------------------------------------
       implicit none
       #integer NVEC
       PARAMETER(NVEC=1000)
       DOUBLE PRECISION RVEC(NVEC),DUMMY
       #integer IVEC
       DATA IVEC/0/
       SAVE RVEC,IVEC
*** Now generate random number between 0 and one.
       if(IVEC == 0 or IVEC >= NVEC):
            CALL RM48(RVEC,NVEC)
            IVEC=1
       else:
            IVEC=IVEC+1
       # endif
*** Assign result.
       DRAND48=RVEC(IVEC)
       # end
#CCCCCCC
*0
* $Id: rm48.F,v 1.2 1996/12/12 16:32:06 cernlib Exp $
*
* $Log: rm48.F,v $
* Revision 1.2  1996/12/12 16:32:06  cernlib
* Variables ONE and ZERO added to SAVE statement, courtesy R.Veenhof
*
* Revision 1.1.1.1  1996/04/01 15:02:55  mclareni
* Mathlib gen
*
*
*#include "gen/pilot.h"
      def RM48(RVEC,LENV):
#     Double-precision version of
# Universal random number generator proposed by Marsaglia and Zaman
# in report FSU-SCRI-87-50
#        based on RANMAR, modified by F. James, to generate vectors
#        of pseudorandom numbers RVEC of length LENV, where the numbers
#        in RVEC are numbers with at least 48-bit mantissas.
#   Input and output entry points: RM48IN, RM48UT.
#### ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
####  Calling sequences for RM48:                                    ++
####      CALL RM48 (RVEC, LEN)     returns a vector RVEC of LEN     ++
####                   64-bit random floating point numbers between  ++
####                   zero and one.                                 ++
####      CALL RM48IN(I1,N1,N2)   initializes the generator from one ++
####                   64-bit #integer I1, and number counts N1,N2    ++
####                  (for initializing, set N1=N2=0, but to restart ++
####                    a previously generated sequence, use values  ++ 
####                    output by RM48UT)                            ++ 
####      CALL RM48UT(I1,N1,N2)   outputs the value of the original  ++
####                  seed and the two number counts, to be used     ++
####                  for restarting by initializing to I1 and       ++  
####                  skipping N2*100000000+N1 numbers.              ++
#### ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# for 32-bit machines, use IMPLICIT DOUBLE PRECISION
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION RVEC(*)
      COMMON/R48ST1/U(97),C,I97,J97
      PARAMETER (MODCNS=1000000000)
      SAVE CD, CM, TWOM24, NTOT, NTOT2, IJKL,TWOM49, ONE, ZERO
      DATA NTOT,NTOT2,IJKL/-1,0,0/
#
      if (NTOT  >=  0):
  GO TO 50
#
#        Default initialization. User has called RM48 without RM48IN.
      IJKL = 54217137
      NTOT = 0
      NTOT2 = 0
      KALLED = 0
      GO TO 1
#
      ENTRY      RM48IN(IJKLIN, NTOTIN,NTOT2N)
#         Initializing routine for RM48, may be called before
#         generating pseudorandom numbers with RM48.   The input
#         values should be in the ranges:  0<=IJKLIN<=900 OOO OOO
#                                          0<=NTOTIN<=999 999 999
#                                          0<=NTOT2N<<999 999 999#
# To get the standard values in Marsaglia's paper, IJKLIN=54217137
#                                            NTOTIN,NTOT2N=0
      IJKL = IJKLIN
      NTOT = MAX(NTOTIN,0)
      NTOT2= MAX(NTOT2N,0)
      KALLED = 1
#          always come here to initialize
    1 CONTINUE
      IJ = IJKL/30082
      KL = IJKL - 30082*IJ
      I = MOD[IJ/177, 177] + 2
      J = MOD[IJ, 177]     + 2
      K = MOD[KL/169, 178] + 1
      L = MOD[KL, 169]
#     WRITE(6,'(A,I10,2X,2I10)') ' RM48 INITIALIZED:',IJKL,NTOT,NTOT2
#CC      PRINT '(A,4I10)', '   I,J,K,L= ',I,J,K,L
      ONE = 1.
      HALF = 0.5
      ZERO = 0.
      DO 2 II= 1, 97
      S = 0.
      T = HALF
      DO 3 JJ= 1, 48
         M = MOD[MOD[I*J,179]*K, 179]
         I = J
         J = K
         K = M
         L = MOD[53*L+1, 169]
         if (MOD[L*M,64]  >=  32):
  S = S+T
    3    T = HALF*T
    2 U(II) = S
      TWOM49 = T
      TWOM24 = ONE
      DO 4 I24= 1, 24
    4 TWOM24 = HALF*TWOM24
      C  =   362436.*TWOM24
      CD =  7654321.*TWOM24
      CM = 16777213.*TWOM24
      I97 = 97
      J97 = 33
#       Complete initialization by skipping
#            (NTOT2*MODCNS + NTOT) random numbers
      DO 45 LOOP2= 1, NTOT2+1
      NOW = MODCNS
      if (LOOP2  ==  NTOT2+1):
  NOW=NTOT
      if (NOW  >  0):
  :
      WRITE(6,'(A,I15)') ' RM48IN SKIPPING OVER ',NOW
          DO 40 IDUM = 1, NTOT
          UNI = U(I97)-U(J97)
          if (UNI  <  ZERO):
  UNI=UNI+ONE
          U(I97) = UNI
          I97 = I97-1
          if (I97  ==  0):
  I97=97
          J97 = J97-1
          if (J97  ==  0):
  J97=97
          C = C - CD
          if (C  <  ZERO):
  C=C+CM
   40     CONTINUE
      # endif
   45 CONTINUE
      if (KALLED  ==  1):
  RETURN
#
#          Normal entry to generate LENV random numbers
   50 CONTINUE
      DO 100 IVEC= 1, LENV
      UNI = U(I97)-U(J97)
      if (UNI  <  ZERO):
  UNI=UNI+ONE
      U(I97) = UNI
      I97 = I97-1
      if (I97  ==  0):
  I97=97
      J97 = J97-1
      if (J97  ==  0):
  J97=97
      C = C - CD
      if (C  <  ZERO):
  C=C+CM
      UNI = UNI-C
      if (UNI  <  ZERO):
 UNI=UNI+ONE
      RVEC(IVEC) = UNI
#             Replace exact zeros by 2**-49
         if (UNI  ==  ZERO):
  :
            RVEC(IVEC) = TWOM49
         # endif
  100 CONTINUE
      NTOT = NTOT + LENV
         if (NTOT  >=  MODCNS):
  :
         NTOT2 = NTOT2 + 1
         NTOT = NTOT - MODCNS
         # endif
      RETURN
#           Entry to output current status
      ENTRY RM48UT(IJKLUT,NTOTUT,NTOT2T)
      IJKLUT = IJKL
      NTOTUT = NTOT
      NTOT2T = NTOT2
      RETURN
      # end
      def CASSTORE(NEV,NVAC,X,Y,Z):
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/CALCAS/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      COMMON/RES/IONSM(10,10000),ifLSM(10,10000),ESTOR(10,28,10000),EPHOT(10,28,10000),X0(10,28,10000),Y0(10,28,10000),Z0(10,28,10000),DRX0(10,28,10000),DRY0(10,28,10000),DRZ0(10,28,10000)
      COMMON/GEN01/X01(10),Y01(10),Z01(10)
# STORE EVENT DATA 
      IONSM(NVAC,NEV)=IONSUM(NVAC)
      ifLSM(NVAC,NEV):
=ifLSUM(NVAC)
      if(IONSUM(NVAC):
 > 28 or ifLSUM(NVAC) > 28) :
       WRITE(6,888) IONSUM(NVAC),ifLSUM(NVAC)
  888  print(' IONSUM OR ifLSUM GT.28 IONSUM=',I3,'  ifSUM=',I3,' NVAC=',I3)
       STOP
      # endif
      DO 11 J=1,ifLSUM(NVAC)
   11 EPHOT(NVAC,J,NEV)=EPHOTON(NVAC,J)
      DO 1 J=1,IONSUM(NVAC)
      ESTOR(NVAC,J,NEV)=ESTORE(NVAC,J)
      X0(NVAC,J,NEV)=X
      Y0(NVAC,J,NEV)=Y
      Z0(NVAC,J,NEV)=Z
      X01(NVAC)=X0(NVAC,J,NEV)
      Y01(NVAC)=Y0(NVAC,J,NEV)
      Z01(NVAC)=Z0(NVAC,J,NEV)
      DRX0(NVAC,J,NEV)=DRXE(NVAC,J)
      DRY0(NVAC,J,NEV)=DRYE(NVAC,J)
      DRZ0(NVAC,J,NEV)=DRZE(NVAC,J)
    1 CONTINUE
      RETURN
      # end
      def CSSTF1(NEV,NVAC,L1,DIST1):           
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/CALCAS/IONSUM0(10),ifLSUM0(10),ESTORE0(10,28),EPHOTON0(10,28),DRXE0(10,28),DRYE0(10,28),DRZE0(10,28),DRX0(10,28),DRY0(10,28),DRZ0(10,28)
      COMMON/CALCAS1/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      COMMON/GEN1/IONF1(10,10000),ESTF1(10,28,10000),X1(10,28,10000),Y1(10,28,10000),Z1(10,28,10000),DRXS(10,28,10000),DRYS(10,28,10000),DRZS(10,28,10000)
      COMMON/GEN11/X11(10,28),Y11(10,28),Z11(10,28)
      COMMON/GEN01/X01(10),Y01(10),Z01(10)
# STORE EVENT DATA FOR FIRST GENERATION FLUORESCENCE
      if(IONSUM(NVAC):
 > 28) :
       WRITE(6,99) IONSUM(NVAC),NVAC,NEV
  99   print(' WARNING FIRST GENERATION CONVERTED FLUORESCENCE HAS AN EVENT WITH',I3,' IONS.',/,' COMPTON BRANCH NO=',I3,/,' PRIMARY INTERACTION NUMBER =',I3)
       STOP
      # endif
      IONF1(NVAC,NEV)=IONSUM(NVAC)
      DO 1 J=1,IONSUM(NVAC)
      ESTF1(NVAC,J,NEV)=ESTORE(NVAC,J)
      X1(NVAC,J,NEV)=X01(NVAC)+DIST1*DRX0(NVAC,L1)
      Y1(NVAC,J,NEV)=Y01(NVAC)+DIST1*DRY0(NVAC,L1)
      Z1(NVAC,J,NEV)=Z01(NVAC)+DIST1*DRZ0(NVAC,L1)
      X11(NVAC,L1)=X1(NVAC,J,NEV)
      Y11(NVAC,L1)=Y1(NVAC,J,NEV)
      Z11(NVAC,L1)=Z1(NVAC,J,NEV)
      DRXS(NVAC,J,NEV)=DRXE(NVAC,J)
      DRYS(NVAC,J,NEV)=DRYE(NVAC,J)
      DRZS(NVAC,J,NEV)=DRZE(NVAC,J)
    1 CONTINUE
      RETURN
      # end
      def CSSTF2(NEV,NVAC,L1,DIST1):               
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/CALCAS1/IONSUM0(10),ifLSUM0(10),ESTORE0(10,28),EPHOTON0(10,28),DRXE0(10,28),DRYE0(10,28),DRZE0(10,28),DRX0(10,28),DRY0(10,28),DRZ0(10,28)
      COMMON/CALCAS2/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      COMMON/GEN2/IONF2(10,10000),ESTF2(10,28,10000),X2(10,28,10000),Y2(10,28,10000),Z2(10,28,10000),DRXS(10,28,10000),DRYS(10,28,10000),DRZS(10,28,10000)
      COMMON/GEN21/X21(10,28),Y21(10,28),Z21(10,28)
      COMMON/GEN11/X11(10,28),Y11(10,28),Z11(10,28)
# STORE EVENT DATA FOR SECOND GENERATION FLUORESCENCE
      if(IONSUM(NVAC):
 > 28) :
       WRITE(6,99) IONSUM(NVAC),NVAC,NEV
  99   print(' WARNING SECOND GENERATION CONVERTED FLUORESCENCE HAS AN  EVENT WITH',I3,' IONS.',/,' COMPTON BRANCH NO=',I3,/,' PRIMARY INTERACTION NUMBER =',I3)
       STOP
      # endif
      IONF2(NVAC,NEV)=IONSUM(NVAC)
      DO 1 J=1,IONSUM(NVAC)
      ESTF2(NVAC,J,NEV)=ESTORE(NVAC,J)
      X2(NVAC,J,NEV)=X11(NVAC,L1)+DIST1*DRX0(NVAC,L1)
      Y2(NVAC,J,NEV)=Y11(NVAC,L1)+DIST1*DRY0(NVAC,L1)
      Z2(NVAC,J,NEV)=Z11(NVAC,L1)+DIST1*DRZ0(NVAC,L1)
      X21(NVAC,L1)=X2(NVAC,J,NEV)
      Y21(NVAC,L1)=Y2(NVAC,J,NEV)
      Z21(NVAC,L1)=Z2(NVAC,J,NEV)
      DRXS(NVAC,J,NEV)=DRXE(NVAC,J)
      DRYS(NVAC,J,NEV)=DRYE(NVAC,J)
      DRZS(NVAC,J,NEV)=DRZE(NVAC,J)
    1 CONTINUE
      RETURN
      # end
      def CSSTF3(NEV,NVAC,L1,DIST1):
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/CALCAS2/IONSUM0(10),ifLSUM0(10),ESTORE0(10,28),EPHOTON0(10,28),DRXE0(10,28),DRYE0(10,28),DRZE0(10,28),DRX0(10,28),DRY0(10,28),DRZ0(10,28)
      COMMON/CALCAS3/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      COMMON/GEN3/IONF3(10,10000),ESTF3(10,15,10000),X3(10,15,10000),Y3(10,15,10000),Z3(10,15,10000),DRXS(10,15,10000),DRYS(10,15,10000),DRZS(10,15,10000)
      COMMON/GEN31/X31(10,28),Y31(10,28),Z31(10,28)
      COMMON/GEN21/X21(10,28),Y21(10,28),Z21(10,28)
# STORE EVENT DATA FOR THIRD GENERATION FLUORESCENCE
      if(IONSUM(NVAC):
 > 15) :
       WRITE(6,99) IONSUM(NVAC),NVAC,NEV
  99   print(' WARNING THIRD GENERATION CONVERTED FLUORESCENCE HAS AN  EVENT WITH',I3,' IONS.',/,' COMPTON BRANCH NO=',I3,/,' PRIMARY INTERACTION NUMBER =',I3)
       STOP
      # endif
      IONF3(NVAC,NEV)=IONSUM(NVAC)
      DO 1 J=1,IONSUM(NVAC)
      ESTF3(NVAC,J,NEV)=ESTORE(NVAC,J)
      X3(NVAC,J,NEV)=X21(NVAC,L1)+DIST1*DRX0(NVAC,L1)
      Y3(NVAC,J,NEV)=Y21(NVAC,L1)+DIST1*DRY0(NVAC,L1)
      Z3(NVAC,J,NEV)=Z21(NVAC,L1)+DIST1*DRZ0(NVAC,L1)
      X31(NVAC,L1)=X3(NVAC,J,NEV)
      Y31(NVAC,L1)=Y3(NVAC,J,NEV)
      Z31(NVAC,L1)=Z3(NVAC,J,NEV)
      DRXS(NVAC,J,NEV)=DRXE(NVAC,J)
      DRYS(NVAC,J,NEV)=DRYE(NVAC,J)
      DRZS(NVAC,J,NEV)=DRZE(NVAC,J)
    1 CONTINUE
      RETURN
      # end
      def CSSTF4(NEV,NVAC,L1,DIST1):
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/CALCAS3/IONSUM0(10),ifLSUM0(10),ESTORE0(10,28),EPHOTON0(10,28),DRXE0(10,28),DRYE0(10,28),DRZE0(10,28),DRX0(10,28),DRY0(10,28),DRZ0(10,28)
      COMMON/CALCAS4/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      COMMON/GEN4/IONF4(10,10000),ESTF4(10,12,10000),X4(10,12,10000),Y4(10,12,10000),Z4(10,12,10000),DRXS(10,12,10000),DRYS(10,12,10000),DRZS(10,12,10000)
      COMMON/GEN31/X31(10,28),Y31(10,28),Z31(10,28)
      COMMON/GEN41/X41(10,28),Y41(10,28),Z41(10,28)
# STORE EVENT DATA FOR FOURTH GENERATION FLUORESCENCE
      if(IONSUM(NVAC):
 > 12) :
       WRITE(6,99) IONSUM(NVAC),NVAC,NEV
  99   print(' WARNING FOURTH GENERATION CONVERTED FLUORESCENCE HAS AN  EVENT WITH',I3,' IONS.',/,' COMPTON BRANCH NO=',I3,/,' PRIMARY INTERACTION NUMBER =',I3)
       STOP
      # endif
      IONF4(NVAC,NEV)=IONSUM(NVAC)
      DO 1 J=1,IONSUM(NVAC)
      ESTF4(NVAC,J,NEV)=ESTORE(NVAC,J)
      X4(NVAC,J,NEV)=X31(NVAC,L1)+DIST1*DRX0(NVAC,L1)
      Y4(NVAC,J,NEV)=Y31(NVAC,L1)+DIST1*DRY0(NVAC,L1)
      Z4(NVAC,J,NEV)=Z31(NVAC,L1)+DIST1*DRZ0(NVAC,L1)
      X41(NVAC,L1)=X4(NVAC,J,NEV)
      Y41(NVAC,L1)=Y4(NVAC,J,NEV)
      Z41(NVAC,L1)=Z4(NVAC,J,NEV)
      DRXS(NVAC,J,NEV)=DRXE(NVAC,J)
      DRYS(NVAC,J,NEV)=DRYE(NVAC,J)
      DRZS(NVAC,J,NEV)=DRZE(NVAC,J)
    1 CONTINUE
      RETURN
      # end
      def CSSTF5(NEV,NVAC,L1,DIST1): 
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/CALCAS4/IONSUM0(10),ifLSUM0(10),ESTORE0(10,28),EPHOTON0(10,28),DRXE0(10,28),DRYE0(10,28),DRZE0(10,28),DRX0(10,28),DRY0(10,28),DRZ0(10,28)
      COMMON/CALCAS5/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      COMMON/GEN5/IONF5(10,10000),ESTF5(10,5,10000),X5(10,5,10000),Y5(10,5,10000),Z5(10,5,10000),DRXS(10,5,10000),DRYS(10,5,10000),DRZS(10,5,10000)
      COMMON/GEN41/X41(10,28),Y41(10,28),Z41(10,28)
      COMMON/GEN51/X51(10,28),Y51(10,28),Z51(10,28)
# STORE EVENT DATA FOR FIFTH GENERATION FLUORESCENCE
      if(IONSUM(NVAC):
 > 5) :
       WRITE(6,99) IONSUM(NVAC),NVAC,NEV
  99   print(' WARNING FifTH GENERATION CONVERTED FLUORESCENCE HAS AN  EVENT WITH',I3,' IONS.',/,' COMPTON BRANCH NO=',I3,/,' PRIMARY INTERACTION NUMBER=',I3)
       STOP
      # endif
      IONF5(NVAC,NEV)=IONSUM(NVAC)
      DO 1 J=1,IONSUM(NVAC)
      ESTF5(NVAC,J,NEV)=ESTORE(NVAC,J)
      X5(NVAC,J,NEV)=X41(NVAC,L1)+DIST1*DRX0(NVAC,L1)
      Y5(NVAC,J,NEV)=Y41(NVAC,L1)+DIST1*DRY0(NVAC,L1)
      Z5(NVAC,J,NEV)=Z41(NVAC,L1)+DIST1*DRZ0(NVAC,L1)
      X51(NVAC,L1)=X5(NVAC,J,NEV)
      Y51(NVAC,L1)=Y5(NVAC,J,NEV)
      Z51(NVAC,L1)=Z5(NVAC,J,NEV)
      DRXS(NVAC,J,NEV)=DRXE(NVAC,J)
      DRYS(NVAC,J,NEV)=DRYE(NVAC,J)
      DRZS(NVAC,J,NEV)=DRZE(NVAC,J)
    1 CONTINUE
      RETURN
      # end
      def CASREM(NEVENT):
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/MIPOUT/EN(100000,20),XS(100000,20),YS(100000,20),ZS(100000,20),DIRX(100000,20),DIRY(100000,20),DIRZ[100000,20],TS(100000,20),IEVENTL(100000)
      COMMON/CASRS/E(400),X(400),Y(400),Z[400],DRX(400),DRY(400),DRZ[400],T(400),NFLGF(400),NFLGPP(400),IEVENT
# LOADS MIP EVENT DATA INTO COMMON BLOCK/CASRS/
# EVENT INTO THE COMMON BLOCK/CASRS/
      K=0
      DO 1 I=1,IEVENTL(NEVENT)
      K=K+1
      E[K]=EN(NEVENT,I) 
      X[K]=XS(NEVENT,I)
      Y[K]=YS(NEVENT,I)
      Z[K]=ZS(NEVENT,I)
      DRX[K]=DIRX(NEVENT,I)
      DRY[K]=DIRY(NEVENT,I)
      DRZ[K]=DIRZ[NEVENT,I]
      T[K]=TS(NEVENT,I)
    1 CONTINUE 
      IEVENT=K
      RETURN
      # end
      def CASRESB:
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/PPSTRB/NPTP,EPPST(2),XPP(2),YPP(2),ZPP(2),DRXPP(2),DRYPP(2),DRZPP(2)
      COMMON/INTHRMB1/NPTPE,ET(10,50),XT(10,50),YT(10,50),ZT(10,50),DRXX(10,50),DRYY(10,50),DRZZ[10,50],NJFLR(10,50),IEVENTL(10)
      COMMON/COUTTB/TT(10),TTP
      COMMON/CASRSB/E(400),X(400),Y(400),Z[400],DRX(400),DRY(400),DRZ[400],T(400),NFLGF(400),NFLGPP(400),IEVENT
# LOADS AUGER CASCADE ELECTRON POSITIONS,ANGLES AND ENERGY FOR EACH
# EVENT INTO THE COMMON BLOCK/CASRSB/ 
# ONLY FOR BREMSSTRAHLUNG EVENTS
      K=0
      ESM=0.0
      DO 1 I=1,NPTPE
      DO 1 J=1,IEVENTL[I]
      K=K+1
      E[K]=ET(I,J) 
      X[K]=XT(I,J)
      Y[K]=YT(I,J)
      Z[K]=ZT(I,J)
      ESM=ESM+E[K]
      DRX[K]=DRXX(I,J)
      DRY[K]=DRYY(I,J)
      DRZ[K]=DRZZ[I,J]
      NFLGF[K]=NJFLR(I,J)
      NFLGPP[K]=0
      T[K]=TT[I]
    1 CONTINUE 
# LOAD PAIR PRODUCTION
      if(NPTP == 0):
 GO TO 3
      DO 2 I=1,NPTP
      K=K+1
      E[K]=EPPST[I]
      X[K]=XPP[I]
      Y[K]=YPP[I]
      Z[K]=ZPP[I]
      NFLGF[K]=0
      NFLGPP[K]=1
      T[K]=TTP
      DRX[K]=DRXPP[I]
      DRY[K]=DRYPP[I]
      DRZ[K]=DRZPP[I]
      K=K+1
      E[K]=EPPST(I+1)
      X[K]=XPP(I+1)
      Y[K]=YPP(I+1)
      Z[K]=ZPP(I+1)
      NFLGF[K]=0
      NFLGPP[K]=2
      T[K]=TTP
      DRX[K]=DRXPP(I+1)
      DRY[K]=DRYPP(I+1)
      DRZ[K]=DRZPP(I+1)
    2 CONTINUE
    3 CONTINUE
      IEVENT=K
      if(K > 400):
 :
       WRITE(6,99) K
  99   print(' ARRAY TOO LARGE IN CASRESB K=',I6)
       STOP
      # endif
      RETURN
      # end
      def CASRES(NEVENT,IBADTT1,IBAD1):
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/PPSTR/NPTP(10000),EPPST(2,10000),XPP(2,10000),YPP(2,10000),ZPP(2,10000),DRXPP(2,10000),DRYPP(2,10000),DRZPP(2,10000)
      COMMON/INTHRM1/NPTPE(10000),ET(10,50,10000),XT(10,50,10000),YT(10,50,10000),ZT(10,50,10000),DRXX(10,50,10000),DRYY(10,50,10000),DRZZ[10,50,10000],NJFLR(10,50,10000),IEVENTL(10,10000),IBAD[10000],IBADTOT
      COMMON/COUTT/TT(10,10000),TTP(10000)
      COMMON/CASRS/E(400),X(400),Y(400),Z[400],DRX(400),DRY(400),DRZ[400],T(400),NFLGF(400),NFLGPP(400),IEVENT
# LOADS AUGER CASCADE ELECTRON POSITIONS,ANGLES AND ENERGY FOR EACH
# EVENT INTO THE COMMON BLOCK/CASRS/
      K=0
      ESM=0.0
      DO 1 I=1,NPTPE(NEVENT)
      DO 1 J=1,IEVENTL(I,NEVENT)
      K=K+1
      E[K]=ET(I,J,NEVENT) 
      X[K]=XT(I,J,NEVENT)
      Y[K]=YT(I,J,NEVENT)
      Z[K]=ZT(I,J,NEVENT)
      ESM=ESM+E[K]
      DRX[K]=DRXX(I,J,NEVENT)
      DRY[K]=DRYY(I,J,NEVENT)
      DRZ[K]=DRZZ[I,J,NEVENT]
      NFLGF[K]=NJFLR(I,J,NEVENT)
      NFLGPP[K]=0
      T[K]=TT(I,NEVENT)
    1 CONTINUE 
# LOAD PAIR PRODUCTION
      if(NPTP(NEVENT):
 == 0) GO TO 3
      DO 2 I=1,NPTP(NEVENT)
      K=K+1
      E[K]=EPPST(I,NEVENT)
      X[K]=XPP(I,NEVENT)
      Y[K]=YPP(I,NEVENT)
      Z[K]=ZPP(I,NEVENT)
      NFLGF[K]=0
      NFLGPP[K]=1
      T[K]=TTP(NEVENT)
      DRX[K]=DRXPP(I,NEVENT)
      DRY[K]=DRYPP(I,NEVENT)
      DRZ[K]=DRZPP(I,NEVENT)
      K=K+1
      E[K]=EPPST(I+1,NEVENT)
      X[K]=XPP(I+1,NEVENT)
      Y[K]=YPP(I+1,NEVENT)
      Z[K]=ZPP(I+1,NEVENT)
      NFLGF[K]=0
      NFLGPP[K]=2
      T[K]=TTP(NEVENT)
      DRX[K]=DRXPP(I+1,NEVENT)
      DRY[K]=DRYPP(I+1,NEVENT) 
      DRZ[K]=DRZPP(I+1,NEVENT)
    2 CONTINUE
    3 IBAD1=IBAD[NEVENT]
      IEVENT=K
      IBADTT1=IBADTOT
      if(K > 400):
 :
       WRITE(6,99) K
   99  print(' ARRAY TOO LARGE IN CASRES K=',I6) 
       STOP
      # endif
      RETURN
      # end
      def OUTPUTC(NEVENT,IMIP):
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/PRIM3/MSUM(10000),MCOMP(10000),MRAYL(10000),MPAIR(10000),MPHOT(10000),MVAC(10000)
      COMMON/RES/IONSM(10,10000),ifLSM(10,10000),ESTOR(10,28,10000),EPHOT(10,28,10000),X(10,28,10000),Y(10,28,10000),Z[10,28,10000],DRX0(10,28,10000),DRY0(10,28,10000),DRZ0(10,28,10000)
      COMMON/GEN1/IONF1(10,10000),ESTF1(10,28,10000),X1(10,28,10000),Y1(10,28,10000),Z1(10,28,10000),DRX1(10,28,10000),DRY1(10,28,10000),DRZ1(10,28,10000)
      COMMON/GEN2/IONF2(10,10000),ESTF2(10,28,10000),X2(10,28,10000),Y2(10,28,10000),Z2(10,28,10000),DRX2(10,28,10000),DRY2(10,28,10000),DRZ2(10,28,10000)
      COMMON/GEN3/IONF3(10,10000),ESTF3(10,15,10000),X3(10,15,10000),Y3(10,15,10000),Z3(10,15,10000),DRX3(10,15,10000),DRY3(10,15,10000),DRZ3(10,15,10000)
      COMMON/GEN4/IONF4(10,10000),ESTF4(10,12,10000),X4(10,12,10000),Y4(10,12,10000),Z4(10,12,10000),DRX4(10,12,10000),DRY4(10,12,10000),DRZ4(10,12,10000)
      COMMON/GEN5/IONF5(10,10000),ESTF5(10,5,10000),X5(10,5,10000),Y5(10,5,10000),Z5(10,5,10000),DRX5(10,5,10000),DRY5(10,5,10000),DRZ5(10,5,10000)
      COMMON/PPSTOR/EPPST(2,10000),XPP(2,10000),YPP(2,10000),ZPP(2,10000),DRXPP(2,10000),DRYPP(2,10000),DRZPP(2,10000)
      COMMON/OUTCS/AIONFRQ(28),AifLFRQ(28),EAV,EPHAV,ETOTAV,AIONAV
      COMMON/INTHRM1/NPTPE(10000),ET(10,50,10000),XT(10,50,10000),YT(10,50,10000),ZT(10,50,10000),DRX(10,50,10000),DRY(10,50,10000),DRZ[10,50,10000],NJFLR(10,50,10000),IEVENTL(10,10000),IBAD[10000],IBADTOT
      DIMENSION EST(10,10000),EPH(10,10000),EPSM(10,10000),ESTOT(10,10000)
      DIMENSION AIGEN1F(28),AIGEN2F(28),AIGEN3F(28),AIGEN4F(28),AIGEN5F(28),AITOT(50),AITOTS(50)
#      
#
      DO 1 L=1,28
      AIONFRQ(L)=0.0
      AIGEN1F(L)=0.0
      AIGEN2F(L)=0.0
      AIGEN3F(L)=0.0
      AIGEN4F(L)=0.0
      AIGEN5F(L)=0.0
    1 CONTINUE
      DO 76 L=1,50
      AITOT(L)=0.0
   76 CONTINUE
      IONG0=0
      IONG1=0
      IONG2=0
      IONG3=0
      IONG4=0
      IONG5=0
      IONGSUM=0
      NTOT=0
      IPR=0
      DO 300 I=1,10000
      IPR=IPR+MCOMP[I]+MPAIR[I]
  300 CONTINUE
# FIND AVERAGES OVER EVENTS FOR EACH GAS 
      DO 12 J=1,NEVENT
      NPTPE[J]=MVAC[J]
      DO 12 K=1,MVAC[J]
      EST(K,J)=0.0
      EPH(K,J)=0.0
      EPSM(K,J)=0.0
      ESTOT(K,J)=0.0
      NTOT=NTOT+1
      if(IONG0 < IONSM(K,J):
) IONG0=IONSM(K,J)
      if(IONG1 < IONF1(K,J):
) IONG1=IONF1(K,J)
      if(IONG2 < IONF2(K,J):
) IONG2=IONF2(K,J)
      if(IONG3 < IONF3(K,J):
) IONG3=IONF3(K,J)
      if(IONG4 < IONF4(K,J):
) IONG4=IONF4(K,J)
      if(IONG5 < IONF5(K,J):
) IONG5=IONF5(K,J)
      ITOT=IONSM(K,J)+IONF1(K,J)+IONF2(K,J)+IONF3(K,J)+IONF4(K,J)+IONF5(K,J)
      if(ITOT > 50):
 : 
       WRITE(6,811) J
  811 print(' NEVENT=',I5,' ITOT OVERFLOW IN OUTPUT')
       ITOT=50
      # endif
      if(IONGSUM < ITOT):
 IONGSUM=ITOT
      if(IONSM(K,J):
 <= 0) GO TO 101
      AIONFRQ(IONSM(K,J))=AIONFRQ(IONSM(K,J))+1.0
  101 if(IONF1(K,J) <= 0) GO TO 102
      AIGEN1F(IONF1(K,J))=AIGEN1F(IONF1(K,J))+1.0
  102 if(IONF2(K,J) <= 0) GO TO 103
      AIGEN2F(IONF2(K,J))=AIGEN2F(IONF2(K,J))+1.0
  103 if(IONF3(K,J) <= 0) GO TO 104
      AIGEN3F(IONF3(K,J))=AIGEN3F(IONF3(K,J))+1.0
  104 if(IONF4(K,J) <= 0) GO TO 105
      AIGEN4F(IONF4(K,J))=AIGEN4F(IONF4(K,J))+1.0
  105 if(IONF5(K,J) <= 0) GO TO 106
      AIGEN5F(IONF5(K,J))=AIGEN5F(IONF5(K,J))+1.0
  106 if(ITOT <= 0) GO TO 107
      AITOT(ITOT)=AITOT(ITOT)+1.0
  107 if(ifLSM(K,J) == 0) GO TO 2
      AifLFRQ(ifLSM(K,J))=AifLFRQ(ifLSM(K,J))+1.0
    2 CONTINUE
      DO 4 L=1,28
      EST(K,J)=EST(K,J)+ESTOR(K,L,J)
      EPH(K,J)=EPH(K,J)+EPHOT(K,L,J)
    4 CONTINUE
      ESTOT(K,J)=EST(K,J)
      EPSM(K,J)=EPH(K,J)+EST(K,J)
      IEVENTL(K,J)=IONSM(K,J)+IONF1(K,J)+IONF2(K,J)+IONF3(K,J)+IONF4(K,J)+IONF5(K,J)
      if(IEVENTL(K,J):
 > 50) :
       WRITE(6,99) IEVENTL(K,J),K,J
   99  print(' IEVENTL GT 50 , IEVENTL=',I3,' PRIMARY NUMBER=',I3,' EVENT NUMBER =',I6)
       STOP
      # endif
# PRINT SOME RAW DATA
# STORE EVENT FOR INPUT TO THERMALISATION
      DO 6 M=1,IONSM(K,J)
      ET(K,M,J)=ESTOR(K,M,J)
      XT(K,M,J)=X(K,M,J)
      YT(K,M,J)=Y(K,M,J)
      ZT(K,M,J)=Z[K,M,J]
      DRX(K,M,J)=DRX0(K,M,J)
      DRY(K,M,J)=DRY0(K,M,J)
      DRZ[K,M,J]=DRZ0(K,M,J)
      NJFLR(K,M,J)=0
    6 CONTINUE
      if(IONF1(K,J):
 == 0) GO TO 17
      DO 7 M=1,IONF1(K,J)
      M1=M+IONSM(K,J)
      ET(K,M1,J)=ESTF1(K,M,J)   
      XT(K,M1,J)=X1(K,M,J)
      YT(K,M1,J)=Y1(K,M,J)
      ZT(K,M1,J)=Z1(K,M,J)
      DRX(K,M1,J)=DRX1(K,M,J)
      DRY(K,M1,J)=DRY1(K,M,J)
      DRZ[K,M1,J]=DRZ1(K,M,J)
      ESTOT(K,J)=ESTOT(K,J)+ESTF1(K,M,J)
      NJFLR(K,M1,J)=M
    7 CONTINUE
   17 if(IONF2(K,J) == 0) GO TO 18
      DO 8 M=1,IONF2(K,J)
      M2=M+IONSM(K,J)+IONF1(K,J)
      ET(K,M2,J)=ESTF2(K,M,J)
      XT(K,M2,J)=X2(K,M,J)
      YT(K,M2,J)=Y2(K,M,J)
      ZT(K,M2,J)=Z2(K,M,J)
      DRX(K,M2,J)=DRX2(K,M,J)
      DRY(K,M2,J)=DRY2(K,M,J)
      DRZ[K,M2,J]=DRZ2(K,M,J)
      ESTOT(K,J)=ESTOT(K,J)+ESTF2(K,M,J)
      NJFLR(K,M2,J)=2
    8 CONTINUE
   18 if(IONF3(K,J) == 0) GO TO 19
      DO 9 M=1,IONF3(K,J)
      M3=M+IONSM(K,J)+IONF1(K,J)+IONF2(K,J)
      ET(K,M3,J)=ESTF3(K,M,J)
      XT(K,M3,J)=X3(K,M,J)
      YT(K,M3,J)=Y3(K,M,J)
      ZT(K,M3,J)=Z3(K,M,J)
      DRX(K,M3,J)=DRX3(K,M,J)
      DRY(K,M3,J)=DRY3(K,M,J)
      DRZ[K,M3,J]=DRZ3(K,M,J)
      ESTOT(K,J)=ESTOT(K,J)+ESTF3(K,M,J)
      NJFLR(K,M3,J)=3
    9 CONTINUE
   19 if(IONF4(K,J) == 0) GO TO 20
      DO 10 M=1,IONF4(K,J)
      M4=M+IONSM(K,J)+IONF1(K,J)+IONF2(K,J)+IONF3(K,J)
      ET(K,M4,J)=ESTF4(K,M,J)
      XT(K,M4,J)=X4(K,M,J)
      YT(K,M4,J)=Y4(K,M,J)
      ZT(K,M4,J)=Z4(K,M,J)
      DRX(K,M4,J)=DRX4(K,M,J)
      DRY(K,M4,J)=DRY4(K,M,J)
      DRZ[K,M4,J]=DRZ4(K,M,J)
      ESTOT(K,J)=ESTOT(K,J)+ESTF4(K,M,J)
      NJFLR(K,M4,J)=4
   10 CONTINUE
   20 if(IONF5(K,J) == 0) GO TO 21
      DO 11 M=1,IONF5(K,J)
      M5=M+IONSM(K,J)+IONF1(K,J)+IONF2(K,J)+IONF3(K,J)+IONF4(K,J)
      ET(K,M5,J)=ESTF5(K,M,J)
      XT(K,M5,J)=X5(K,M,J)
      YT(K,M5,J)=Y5(K,M,J)
      ZT(K,M5,J)=Z5(K,M,J)
      DRX(K,M5,J)=DRX5(K,M,J)
      DRY(K,M5,J)=DRY5(K,M,J)
      DRZ[K,M5,J]=DRZ5(K,M,J)
      ESTOT(K,J)=ESTOT(K,J)+ESTF5(K,M,J)
      NJFLR(K,M5,J)=5
   11 CONTINUE
   21 CONTINUE
# PRINT SOME RAW DATA
#     IF(J <= 525) :
#     EDUM=0.0
#     DO 666 JJ=1,IEVENTL[J]
# 666 EDUM=EDUM+ET(JJ,J)
#     WRITE(6,232) J
#     WRITE(6,2321) EDUM
#2321 print(' TOT ENERGY=','%.3f' %)
# 232 print(' DATA FOR EVENT=',I3)
#     DO 234 M=1,IEVENTL[J]
#     WRITE(6,233) ET(M,J),XT(M,J),YT(M,J),ZT(M,J),TH(M,J),PH(M,J)
# 233 print(' E=','%.3f' %,' X=','%.3f' %,' Y=','%.3f' %,' Z=','%.3f' %,' THETA=',
#    /'%.3f' %,' PHI=','%.3f' %)
# 234 CONTINUE
#     # endIF
   12 CONTINUE
      AIONAV=0.0
      DO 22 I=1,28
      AIONFRQ[I]=AIONFRQ[I]/float(NTOT)
      AIGEN1F[I]=AIGEN1F[I]/float(NTOT)
      AIGEN2F[I]=AIGEN2F[I]/float(NTOT)
      AIGEN3F[I]=AIGEN3F[I]/float(NTOT)
      AIGEN4F[I]=AIGEN4F[I]/float(NTOT)
      AIGEN5F[I]=AIGEN5F[I]/float(NTOT)
      AifLFRQ[I]=AifLFRQ[I]/float(NTOT)
      AIONAV=AIONAV+float[I]*AIONFRQ[I]
   22 CONTINUE
      AITOTAV=0.0
      AITOTSUM=0.0
      DO 77 I=1,50
      AITOT[I]=AITOT[I]/float(NTOT)
      AITOTSUM=AITOTSUM+AITOT[I]
      AITOTAV=AITOTAV+float[I]*AITOT[I]
   77 CONTINUE
      DO 78 I=1,50
   78 AITOTS[I]=AITOT[I]/AITOTSUM
      DO 79 I=2,50
   79 AITOTS[I]=AITOTS[I]+AITOTS(I-1)
      EAV=0.0
      EPHAV=0.0
      ETOTAV=0.0
      IBADTOT=0
      DO 35 J=1,NEVENT
      EDUM=0.0
      IBAD[J]=0
      DO 30 K=1,MVAC[J]
      EAV=EAV+EST(K,J)
      EPHAV=EPHAV+EPH(K,J)
      ETOTAV=ETOTAV+ESTOT(K,J)
      EDUM=EDUM+ESTOT(K,J)
   30 CONTINUE
      EAV=EAV+EPPST(1,J)+EPPST(2,J)
      ETOTAV=ETOTAV+EPPST(1,J)+EPPST(2,J)
      EDUM=EDUM+EPPST(1,J)+EPPST(2,J)
      if(IMIP == 5):
 GO TO 33
      if(EDUM > (EFINAL+0.1):
) :
       WRITE(6,999) J,EDUM
  999 print(' EVENT NO =',I7,' ETOT =',D12.5,'EV.    BAD EVENT',/)
       IBAD[J]=1
       IBADTOT=IBADTOT+1
      # endif
      GO TO 35
   33 if(EDUM > (2.0*EFINAL+0.1)) :
       WRITE(6,999) J,EDUM
       IBAD[J]=1
       IBADTOT=IBADTOT+1
      # endif
   35 CONTINUE
      EAV=EAV/float(NEVENT)
      EPHAV=EPHAV/float(NEVENT)
      ETOTAV=ETOTAV/float(NEVENT)
# DO NOT PRINT ION ANALYSIS IF COMPTON OR PAIR PRODUCTION USED
      if(IPR > 0):
 RETURN  
      DO 40 I=1,28
      WRITE(6,88) I,AIONFRQ[I],I,AifLFRQ[I]
   88 print(' FREQ FOR',I3,' CHARGE IONS =',D12.4,' FREQUENCY FOR',I3,' PHOTONS=',D12.4)
   40 CONTINUE
      WRITE(6,89) EAV,EPHAV,AIONAV
   89 print(2(/),' AVERAGE ELECTRON ENERGY (GENERATION 0) =',D12.6,/,' AVERAGE PHOTON ENERGY (GENERATION 0) =',D12.6,/,' AVERAGE IONIC CHARGE (GENERATION 0) =','%.3f' %,/,/)
      WRITE(6,90)
   90 print(' ION FREQENCIES FOR IST SECOND THIRD AND FOURTH GENERATION PHOTON ABSORPTION')
      DO 50 I=1,28
      WRITE(6,91) I,AIGEN1F[I],AIGEN2F[I],AIGEN3F[I],AIGEN4F[I],AIGEN5F(I)
   91 print(' FREQ FOR',I3,' IST GEN IONS=',D12.4,' 2ND GEN=','%.3f' %,' 3RD GEN=','%.3f' %,' 4TH GEN=','%.3f' %,' 5TH GEN=','%.3f' %) 
   50 CONTINUE
      DO 60 I=1,50
      WRITE(6,92) I,AITOT[I],AITOTS[I]
   92 print(' TOTAL FREQ FOR',I3,' ELECTRONS=',D12.4,' NORMALISED INTEGRAL PROB=',D12.4) 
   60 CONTINUE  
      WRITE(6,93) IONG0,IONG1,IONG2,IONG3,IONG4,IONG5,IONGSUM,AITOTAV,ETOTAV
   93 print(' MAX IONS GEN 0 =',I2,/,' MAX IONS GEN 1 =',I2,/,' MAX IONS GEN 2 =',I2,/,' MAX IONS GEN 3 =',I2,/,' MAX IONS GEN 4 =',I2,/,' MAX IONS GEN 5 =',I2,/,' MAX NO. OF ELECTRONS AFTER PHOTON ABSORPTION =',I2,/,' AVERAGE NO. OF ELECTRONS =','%.3f' %,/,' AVERAGE TOTAL ELECTRON ENERGY =',D12.6,/,/) 
      RETURN     
      # end         
      def VACANCY(KGAS,LGAS,I,ILAST):            
      IMPLICIT #real*8 (A-H,O-Z)     
      IMPLICIT #integer*8 (I-N)       
      CHARACTER*6 SCR(17),SCR1(17) 
      COMMON/GENCAS/ELEV[17,79],NSDEG(17),AA[17],BB[17],SCR,SCR1    
      COMMON/MIXC/PRSH(6,3,17,17),ESH(6,3,17),AUG(6,3,17,17,17), RAD[6,3,17,17],PRSHBT(6,3,17),IZ[6,3],INIOCC(6,3,17),ISHLMX(6,3), AMZ[6,3]  
      COMMON/UPD/NOCC(6,3,17),AUGR(6,3,17,17,17),RADR(6,3,17,17) 
      DIMENSION IVAC(6,3,17)
# IF NO MORE TRANSITIONS POSSIBLE : SET ILAST=1
# FIND LOWEST VACANCY AT SHELL ADDRESS = I
      ILAST=0  
      DO 1 I=1,17 
      IVAC(KGAS,LGAS,I)=INIOCC(KGAS,LGAS,I)-NOCC(KGAS,LGAS,I) 
    1 CONTINUE   
      DO 3 I=1,16                            
# CHECK TO SEE IF VACANCY  
      if(IVAC(KGAS,LGAS,I):
 > 0) :  
# CHECK TO SEE IF THERE IS ANY HIGHER OCCUPIED ORBITALS 
       K=I+1  
       DO 2 J=K,17 
# FOUND LOWEST VACANCY 
       if(NOCC(KGAS,LGAS,J):
 > 0) RETURN  
    2  CONTINUE 
      # endif 
    3 CONTINUE 
# NO MORE TRANSITIONS POSSIBLE
      ILAST=1      
      RETURN 
      # end 
      def FLDIST:
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/IONFL/NC0(512),EC0(512),NG1(512),EG1(512),NG2(512),EG2(512),WKLM(512),EFL(512)
# CALCULATE FLUORESCENCE AVERAGE ABSORPTION DISTANCE AND LOAD INTO ARRAY
      DO 1 I=1,512
      EPH=EFL[I]
      if(EPH == 0.0):
 GO TO 1
      JF=3
      CALL ABSO(JF,EPH,IDUM,KDUM,LDUM,DIST)
      EFL[I]=DIST
    1 CONTINUE
      RETURN
      # end
      def ABSO(JF,EPH,ISHELL,KGAS,LGAS,DIST):
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      COMMON/RATIO/AN1,AN2,AN3,AN4,AN5,AN6,AN,FRAC(6)  
      COMMON/COMP/LCMP,LCFLG,LRAY,LRFLG,LPAP,LPFLG,LBRM,LBFLG,LPEFLG
      COMMON/ABBS/ABSXRAY             
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIXC/PRSH(6,3,17,17),ESH(6,3,17),AUG(6,3,17,17,17),RAD[6,3,17,17],PRSHBT(6,3,17),IZ[6,3],INIOCC(6,3,17),ISHLMX(6,3),AMZ[6,3]
      COMMON/MIXPE/XPE(6,3,17,60),YPE(6,3,17,60)
      COMMON/MIXCN/XEN(6,3,54),YRY(6,3,54),YCP(6,3,54),YPP(6,3,54)
      DIMENSION XSEC(306),XSECC(18),XSECR(18),XSECP(18),ANGAS(6),ABSL(306),ABSLC(18),ABSLR(18),ABSLP(18),XSUM(360)
#******************************************************************
# FOR PHOTON ENERGY EPH CALCULATES INTERACTION DISTANCE WITH
#  GAS IDENTITY,KGAS . IF MOLECULAR GAS ALSO IDENTIFIES THE 
#  ATOMIC COMPONENT OF THE MOLECULE  LGAS. 
#  IF PHOTOELECTRIC ABSORPTION CALCULATES ABSORPTION SHELL, ISHELL
# AND SETS PHOTOELECTRIC FLAG,LPEFLG=1. 
# IF COMPTON RAYLEIGH OR PAIR PRODUCTION ALLOWED : CALCULATES
# KGAS , LGAS AND SETS COMPTON RAYLEIGH OR PAIR PRODUCTION FLAGS.
#****************************************************************** 
      ANGAS[1]=AN1
      ANGAS(2)=AN2
      ANGAS(3)=AN3
      ANGAS(4)=AN4
      ANGAS(5)=AN5
      ANGAS(6)=AN6
      LCFLG=0
      LRFLG=0
      LPFLG=0
      LPEFLG=0
# CALCULATE PE X-SECTION FOR EACH GAS AND FIND ABS LENGTH 
      EPHLG=math.log(EPH)
      IPT=0
      DO 1 I=1,NGAS
      DO 1 J1=1,3
      DO 1 J=1,17
      IPT=IPT+1
      XSEC(IPT)=0.0
      ABSL(IPT)=0.0
      if(J > ISHLMX(I,J1):
) GO TO 1
      if(EPHLG < XPE(I,J1,J,1):
) GO TO 1
      DO 11 K=2,60 
      if(EPHLG <= XPE(I,J1,J,K):
) :
       A=(YPE(I,J1,J,K)-YPE(I,J1,J,K-1))/(XPE(I,J1,J,K)-XPE(I,J1,J,K-1))
       B=(XPE(I,J1,J,K-1)*YPE(I,J1,J,K)-XPE(I,J1,J,K)*YPE(I,J1,J,K-1))/(XPE(I,J1,J,K-1)-XPE(I,J1,J,K))
       XSEC(IPT)=math.exp(A*EPHLG+B)
       ABSL(IPT)=XSEC(IPT)*ANGAS[I]
       GO TO 1
      # endif
   11 CONTINUE
    1 CONTINUE
# CALCULATE COMPTON X-SECTION FOR EACH GAS AND FIND ABS LENGTH
      IPT=0
      DO 30 I=1,NGAS
      DO 30 J1=1,3   
      IPT=IPT+1
      XSECC(IPT)=0.0
      ABSLC(IPT)=0.0
# USE ONLY PE X-SECTION FOR SECOND STAGE FLUORESCENCE 
      if(JF == 3 or JF == 2):
 GO TO 30
# ONLY USE PE X-SECTION
      if(LCMP != 1):
 GO TO 30
      if(EPHLG < XEN(I,J1,1):
) GO TO 30
      DO 29 K=2,54
      if(EPHLG <= XEN(I,J1,K):
) :
       A=(YCP(I,J1,K)-YCP(I,J1,K-1))/(XEN(I,J1,K)-XEN(I,J1,K-1))
       B=(XEN(I,J1,K-1)*YCP(I,J1,K)-XEN(I,J1,K)*YCP(I,J1,K-1))/(XEN(I,J1,K-1)-XEN(I,J1,K))
       XSECC(IPT)=math.exp(A*EPHLG+B)
       ABSLC(IPT)=XSECC(IPT)*ANGAS[I]
       GO TO 30 
      # endif
   29 CONTINUE
   30 CONTINUE
# CALCULATE RAYLEIGH X-SECTION FOR EACH GAS AND FIND ABS LENGTH
      IPT=0
      DO 40 I=1,NGAS
      DO 40 J1=1,3   
      IPT=IPT+1
      XSECR(IPT)=0.0
      ABSLR(IPT)=0.0
# USE ONLY PE X-SECTION FOR SECOND STAGE FLUORESCENCE 
      if(JF == 3 or JF == 2):
 GO TO 40
      if(LRAY != 1):
 GO TO 40
      if(EPHLG < XEN(I,J1,1):
) GO TO 40
      DO 39 K=2,54
      if(EPHLG <= XEN(I,J1,K):
) :
       A=(YRY(I,J1,K)-YRY(I,J1,K-1))/(XEN(I,J1,K)-XEN(I,J1,K-1))
       B=(XEN(I,J1,K-1)*YRY(I,J1,K)-XEN(I,J1,K)*YRY(I,J1,K-1))/(XEN(I,J1,K-1)-XEN(I,J1,K))
       XSECR(IPT)=math.exp(A*EPHLG+B)
       ABSLR(IPT)=XSECR(IPT)*ANGAS[I]
       GO TO 40
      # endif
   39 CONTINUE
   40 CONTINUE   
# CALCULATE PAIR PRODUCTION X-SECTION FOR EACH GAS AND FIND ABS LENGTH 
      IPT=0
      DO 50 I=1,NGAS
      DO 50 J1=1,3
      IPT=IPT+1
      XSECP(IPT)=0.0
      ABSLP(IPT)=0.0
# USE ONLY PE X-SECTION FOR SECOND STAGE FLUORESCENCE 
      if(JF == 3 or JF == 2):
 GO TO 50
      if(LPAP != 1):
 GO TO 50
      if(EPHLG < XEN(I,J1,1):
) GO TO 50
      DO 49 K=2,54
      if(EPHLG <= XEN(I,J1,K):
) :
       A=(YPP(I,J1,K)-YPP(I,J1,K-1))/(XEN(I,J1,K)-XEN(I,J1,K-1))
       B=(XEN(I,J1,K-1)*YPP(I,J1,K)-XEN(I,J1,K)*YPP(I,J1,K-1))/(XEN(I,J1,K-1)-XEN(I,J1,K))
       XSECP(IPT)=math.exp(A*EPHLG+B)
       ABSLP(IPT)=XSECP(IPT)*ANGAS[I]
       GO TO 50
      # endif
   49 CONTINUE
   50 CONTINUE   
# FORM CUMULATIVE SUMS 
      ifIN=NGAS*17*3:
      DO 2 J=2,ifIN
      XSEC[J]=XSEC[J]+XSEC(J-1)
      ABSL[J]=ABSL[J]+ABSL(J-1)
    2 CONTINUE 
      ifINR=NGAS*3:
      DO 110 J=2,ifINR
      XSECC[J]=XSECC[J]+XSECC(J-1)
      ABSLC[J]=ABSLC[J]+ABSLC(J-1)
      XSECR[J]=XSECR[J]+XSECR(J-1)
      ABSLR[J]=ABSLR[J]+ABSLR(J-1)
      XSECP[J]=XSECP[J]+XSECP(J-1)
      ABSLP[J]=ABSLP[J]+ABSLP(J-1)
  110 CONTINUE 
# TOTAL X-SECTION
      XSECT=XSEC(ifIN)+XSECC(ifINR)+XSECR(ifINR)+XSECP(ifINR)
# TOTAL ABS LENGTH
      ABSTOT=ABSL(ifIN)+ABSLR(ifINR)+ABSLC(ifINR)+ABSLP(ifINR)
# CALCULATE ABSORPTION DISTANCE IN METRES AND RETURN
      if(JF == 3):
 :
       DIST=1.0/(ABSTOT*100.0)
       RETURN
      # endif
# CALCULATE ABSORPTION DISTANCE IN MICRONS
      if(JF == -1):
 : 
       if(ABSTOT > 0.0):
 ABSXRAY=1.0D4/ABSTOT
       if(ABSTOT == 0.0):
 ABSXRAY=1.0D15
       RETURN
      # endif
      if(ABSTOT == 0.0):
 :
# PHOTON TOO LOW ENERGY TO IONISE SET ISHELL=-1
       ISHELL=-1
       RETURN
      # endif
# NORMALISE TO 1 
      DO 3 J=1,ifIN
      XSEC[J]=XSEC[J]/XSECT
    3 CONTINUE
      DO 120 J=1,ifINR
      XSECC[J]=XSECC[J]/XSECT
      XSECR[J]=XSECR[J]/XSECT
      XSECP[J]=XSECP[J]/XSECT
  120 CONTINUE
# FORM SUM X-SECTION FOR SAMPLING ARRAY 
# P.E.
      DO 130 J=1,ifIN
      XSUM[J]=XSEC[J]
  130 CONTINUE
      I# end=ifIN
      if(LCMP != 1):
 GO TO 145 
# COMPTON
      ISTART=ifIN+1
      I# end=ifIN+IFINR
      DO 140 J=ISTART,I# end
      XSUM[J]=XSUM(ISTART-1)+XSECC(J-ISTART+1) 
  140 CONTINUE
  145 if(LRAY != 1) GO TO 155
# RAYLEIGH
      if(LCMP == 0):
 : 
       ISTART=ifIN+1
       I# end=ifIN+IFINR
       else if(LCMP == 1) :
       ISTART=ifIN+ifINR+1
       I# end=ifIN+IFINR+IFINR
      # endif
      DO 150 J=ISTART,I# end
      XSUM[J]=XSUM(ISTART-1)+XSECR(J-ISTART+1)
  150 CONTINUE
  155 if(LPAP != 1) GO TO 165
# PAIR PRODUCTION
      if(LCMP == 0 and LRAY == 0):
 :
       ISTART=ifIN+1
       I# end=ifIN+IFINR
      else if(LCMP == 0 and LRAY == 1) :
       ISTART=ifIN+ifINR+1
       I# end=ifIN+IFINR+IFINR
      else if(LCMP == 1 and LRAY == 0) :
       ISTART=ifIN+ifINR+1
       I# end=ifIN+IFINR+IFINR
      else if(LCMP == 1 and LRAY == 1) :
       ISTART=ifIN+ifINR+ifINR+1
       I# end=ISTART+ifINR+IFINR+IFINR
      else: 
       WRITE(6,998)
  998  print(' ERROR IN def ABSO FLAG NOT CORRECT')
       STOP
      # endif
      DO 160 J=ISTART,I# end
      XSUM[J]=XSUM(ISTART-1)+XSECP(J-ISTART+1)
  160 CONTINUE
  165 CONTINUE 
# FIND GAS AND SHELL
      R1=DRAND48(RDUM)
      DO 4 J=1,I# end
      if(XSUM[J]:
 < R1) GO TO 4
       ID=J
       GO TO 5
    4 CONTINUE
# LOCATE GAS AND SHELL
    5 IPET=NGAS*3*17
      if(ID > IPET):
 GO TO 22
# PHOTO ELECTRIC
      LPEFLG=1
      if(ID <= 51):
 :
       KGAS=1
       if(ID <= 17):
 :
        LGAS=1
        ISHELL=ID
       else if(ID <= 34) :
        LGAS=2
        ISHELL=ID-17
       else:
        LGAS=3
        ISHELL=ID-34
       # endif
       GO TO 12
      else if(ID <= 102) :
       KGAS=2
       if(ID <= 68):
 :
        LGAS=1
        ISHELL=ID-51
       else if(ID <= 85) :
        LGAS=2
        ISHELL=ID-68
       else:
        LGAS=3
        ISHELL=ID-85
       # endif
       GO TO 12
      else if(ID <= 153) :
       KGAS=3
       if(ID <= 119):
 :
        LGAS=1
        ISHELL=ID-102
       else if(ID <= 136) :
        LGAS=2
        ISHELL=ID-119
       else:
        LGAS=3
        ISHELL=ID-136
       # endif
       GO TO 12
      else if(ID <= 204) :
       KGAS=4
       if(ID <= 170):
 :
        LGAS=1
        ISHELL=ID-153
       else if(ID <= 187) :
        LGAS=2
        ISHELL=ID-170
       else:
        LGAS=3
        ISHELL=ID-187
       # endif
       GO TO 12
      else if(ID <= 255) :
       KGAS=5
       if(ID <= 221):
 :
        LGAS=1
        ISHELL=ID-204
       else if(ID <= 238) :
        LGAS=2
        ISHELL=ID-221
       else:
        LGAS=3
        ISHELL=ID-238
       # endif
       GO TO 12
      else: 
       KGAS=6
       if(ID <= 272):
 :
        LGAS=1
        ISHELL=ID-255
       else if(ID <= 289) :
        LGAS=2
        ISHELL=ID-272
       else:
        LGAS=3
        ISHELL=ID-289
       # endif
      # endif
   12 CONTINUE
      GO TO 200
# COMPTON RAYLEIGH OR PAIR PRODUCTION
   22 ISHELL=0
      if(ID <= (IPET+ifINR):
) :
# COMPTON RAYLEIGH OR PAIR PRODUCTION.   SET :  FLAG KGAS LGAS
       if(LCMP == 1):
 LCFLG=1
       if(LCMP == 0 and LRAY == 1):
 LRFLG=1
       if(LCMP == 0 and LRAY == 0):
 LPFLG=1
       if(ID <= IPET+3):
 :
        KGAS=1
        LGAS=ID-IPET
       else if(ID <= IPET+6) :
        KGAS=2
        LGAS=ID-IPET-3
       else if(ID <= IPET+9) : 
        KGAS=3
        LGAS=ID-IPET-6 
       else if(ID <= IPET+12) :
        KGAS=4
        LGAS=ID-IPET-9
       else if(ID <= IPET+15) :
        KGAS=5
        LGAS=ID-IPET-12
       else:
        KGAS=6
        LGAS=ID-IPET-15
       # endif
      else if (ID <= IPET+2*ifINR) :
       if(LRAY == 1):
 LRFLG=1
       if(LRAY == 0 and LPAP == 1):
 LPFLG=1
       if(ID <= IPET+ifINR+3):
 :
        KGAS=1
        LGAS=ID-IPET-ifINR
       else if(ID <= IPET+ifINR+6) :
        KGAS=2
        LGAS=ID-IPET-ifINR-3
       else if(ID <= IPET+ifINR+9) : 
        KGAS=3
        LGAS=ID-IPET-ifINR-6
       else if(ID <= IPET+ifINR+12) :
        KGAS=4
        LGAS=ID-IPET-ifINR-9
       else if(ID <= IPET+ifINR+15) :
        KGAS=5
        LGAS=ID-IPET-ifINR-12
       else:
        KGAS=6
        LGAS=ID-IPET-ifINR-15
       # endif
      else: 
       LPFLG=1
       if(ID <= IPET+3*ifINR):
 :
        KGAS=1
        LGAS=ID-IPET-ifINR-ifINR
       else if(ID <= IPET+ifINR+ifINR+6) :
        KGAS=2
        LGAS=ID-IPET-ifINR-ifINR-3
       else if(ID <= IPET+ifINR+ifINR+9) : 
        KGAS=3
        LGAS=ID-IPET-ifINR-ifINR-6
       else if(ID <= IPET+ifINR+ifINR+12) :
        KGAS=4
        LGAS=ID-IPET-ifINR-ifINR-9
       else if(ID <= IPET+ifINR+ifINR+15) :
        KGAS=5
        LGAS=ID-IPET-ifINR-ifINR-12
       else:
        KGAS=6
        LGAS=ID-IPET-ifINR-ifINR-15
       # endif
      # endif
      if(ID > (IPET+54):
) :
       WRITE(6,999) ID
  999 print(' IDENTifIER IN def ABSO IS GT LIMIT ID=',I5,/,'    def STOPPED')
       STOP
      # endif
  200 CONTINUE
# CALCULATE ABSORPTION DISTANCE PER EVENT IN METRES
      R1=DRAND48(RDUM)  
      DIST=-math.log(R1)/(ABSTOT*100.0)
      RETURN
      # end
      def DRCOS(DRX,DRY,DRZ,THETA,PHI,DRXX,DRYY,DRZZ):
      IMPLICIT #real*8 (A-H,O-Z)
#  GIVEN INCIDENT DIRECTION COSINES DRX,DRY,DRZ AND SCATTERING BY ANGLE 
#  THETA AND PHI : CALCULATES NEW DIRECTION COSINES DRXX,DRYY,DRZZ
      CT=DCOS(THETA)
      SP=DSIN(PHI)
      CP=DCOS(PHI)
      if(abs(DRZ):
 == 1.00) GO TO 1
      FAC=math.sqrt((1.00-CT*CT)/(1.00-DRZ*DRZ))
      DRXX=DRX*CT+FAC*(DRX*DRZ*CP-DRY*SP)
      DRYY=DRY*CT+FAC*(DRY*DRZ*CP+DRX*SP)
      DRZZ=DRZ*CT-FAC*(1.00-DRZ*DRZ)*CP
      RETURN
    1 CONTINUE
      FAC=math.sqrt(1.00-CT*CT)
      DRXX=FAC*CP
      DRYY=FAC*SP
      DRZZ=CT*DRZ/abs(DRZ)
      RETURN
      # end
      def CONTROL0(NEVENT,EINIT,ICON):
      IMPLICIT #real*8(A-H,O-Z)
      IMPLICIT #integer*8(I-N)
      CHARACTER*6 SCR(17),SCR1(17)
      COMMON/INPT2/KGAS,LGAS,DETEFF,EXCWGHT
      COMMON/INPT1/NDVEC
      COMMON/SET2/DRXINIT,DRYINIT,DRZINIT
      COMMON/COMP/LCMP,LCFLG,LRAY,LRFLG,LPAP,LPFLG,LBRM,LBFLG,LPEFLG
      COMMON/COMPTOUT/EGAM,EELEC,THETAG,THETAE
      COMMON/PRIM3/MSUM(10000),MCOMP(10000),MRAYL(10000),MPAIR(10000),MPHOT(10000),MVAC(10000)
      COMMON/GENCAS/ELEV[17,79],NSDEG(17),AA[17],BB[17],SCR,SCR1
      COMMON/MIXC/PRSH(6,3,17,17),ESH(6,3,17),AUG(6,3,17,17,17),RAD[6,3,17,17],PRSHBT(6,3,17),IZ[6,3],INIOCC(6,3,17),ISHLMX(6,3),AMZ[6,3]
      COMMON/UPD/NOCC(6,3,17),AUGR(6,3,17,17,17),RADR(6,3,17,17)
      COMMON/CALCAS/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      COMMON/CALCAS1/IONSUM1(10),ifLSUM1(10),ESTOR1(10,28),EPHOTG1(10,28),DRXE1(10,28),DRYE1(10,28),DRZE1(10,28),DRX1(10,28),DRY1(10,28),DRZ1(10,28)
      COMMON/CALCAS2/IONSUM2(10),ifLSUM2(10),ESTOR2(10,28),EPHOTG2(10,28),DRXE2(10,28),DRYE2(10,28),DRZE2(10,28),DRX2(10,28),DRY2(10,28),DRZ2(10,28)
      COMMON/CALCAS3/IONSUM3(10),ifLSUM3(10),ESTOR3(10,28),EPHOTG3(10,28),DRXE3(10,28),DRYE3(10,28),DRZE3(10,28),DRX3(10,28),DRY3(10,28),DRZ3(10,28)
      COMMON/CALCAS4/IONSUM4(10),ifLSUM4(10),ESTOR4(10,28),EPHOTG4(10,28),DRXE4(10,28),DRYE4(10,28),DRZE4(10,28),DRX4(10,28),DRY4(10,28),DRZ4(10,28)
      COMMON/CALCAS5/IONSUM5(10),ifLSUM5(10),ESTOR5(10,28),EPHOTG5(10,28),DRXE5(10,28),DRYE5(10,28),DRZE5(10,28),DRX5(10,28),DRY5(10,28),DRZ5(10,28)
      COMMON/COUT/ECMP(10),ECDRX(10),ECDRY(10),ECDRZ[10],XCPOS(10),YCPOS(10),ZCPOS(10),KCGAS(10),LCGAS(10),ICSHELL(10)
      COMMON/COUTT/TT(10,10000),TTP(10000)
      COMMON/PPSTR/NPTP(10000),EPPST(2,10000),XPP(2,10000),YPP(2,10000),ZPP(2,10000),DRXPP(2,10000),DRYPP(2,10000),DRZPP(2,10000)
      COMMON/NSIZE/NJHIGH
      COMMON/TEMPS/THETAS,PHIS
#----------------------------------------------------------------------
#   SET OR ZERO SOME VARIABLES 
#   CREATE INTERACTION TREE FOR PE COMPTON RAYLEIGH AND PAIR PRODUCTION
#   STORE ELECTRON ENERGY DIRECTION COSINES AND POSITION WITH SHELL
#   LEVEL AND GAS IDENTITY IN COMMON/COUT/ FOR EACH COMPTON AND PE EVENT
#   STORE PAIR PRODUCTION ELECTRON AND POSITRON DATA IN COMMON/PPSTR/
#   CALL CONTROL FOR EACH PRIMARY PHOTON INTERACTION
#   FOR BETA DECAY STORE ENERGY POSITION AND GAS IDENTITY 
#----------------------------------------------------------------------
      API=numpy.arccos(-1.00)
      TWOPI=2.00*API
      NJHIGH=0
# USE VELOCITY IN METRES/PICOSECONDS
      VV=2.99792458D-4 
      JF=-1
      if(ICON == 1):
 CALL ABSO(JF,EINIT,ISHELL,KGAS,LGAS,DIST)
#
      IODD=0  
#  LOOP FOR NUMBER OF EVENTS
      DO 1000 I=1,NEVENT
      IODD=IODD+1
# *********************************************************************
# OPTION TO FIX ABSORPTION ON A SHELL,ISHELL IN KGAS, COMPONENT LGAS 
# USE LFIX=1 AND COMMENT OR DECOMMENT LINES BELOW
#     ISHELL=1
#     KGAS=1
#     LGAS=1
#     LFIX=1
      LFIX=0
#*********************************************************************
# ALLOW FLUORESCENCE CALCULATION
  123 ICONPH=1
# FIX INITIAL INTERACTION AT 0,0,0
      X=0.0
      Y=0.0
      Z=0.0
      TSUM=0.0
#  INITIAL DIRECTION COSINES BEFORE INTERACTION AT 0,0,0
      if(NDVEC == 1):
 :
       PHI=0.00
       THETA=0.00
       if(ICON == 3 and IODD == 2):
 :
# FOR DOUBLE BETA DECAY REVERSE COORDINATES FOR EACH SECOND EVENT
        THETA=API
        PHI=0.00
        IODD=0
       # endif
      else if (NDVEC == -1) :
       PHI=0.00
       THETA=API
       if(ICON == 3 and IODD == 2):
 :
# FOR DOUBLE BETA DECAY REVERSE COORDINATES FOR EACH SECOND EVENT
        THETA=0.00
        PHI=0.00
        IODD=0
       # endif
      else if(NDVEC == 0) :
       R3=DRAND48(RDUM)
       PHI=TWOPI*R3
       THETA=API/2.0  
       if(IODD == 1):
 PHIS=PHI
       if(ICON == 3 and IODD == 2):
 :
# FOR DOUBLE BETA DECAY REVERSE COORDINATES FOR EACH SECOND EVENT
        PHI=PHIS+API
        if(PHI > 2.0*API):
 PHI=PHI-2.0*API
        THETA=API/2.0
        IODD=0
       # endif
      else if(NDVEC == 2) :
       R3=DRAND48(RDUM)
       PHI=TWOPI*R3
       R4=DRAND48(RDUM)
       THETA=numpy.arccos(1.00-2.00*R4)  
       if(IODD == 1):
 PHIS=PHI
       if(IODD == 1):
 THETAS=THETA
       if(ICON == 3 and IODD == 2):
 :
# FOR DOUBLE BETA DECAY REVERSE COORDINATES FOR EACH SECOND EVENT
        PHI=PHIS+API
        if(PHI > 2.0*API):
 PHI=PHI-2.0*API
        THETA=THETAS+API
        if(THETA > API):
 THETA=THETA-2.0*API
        IODD=0
       # endif
      else: 
       WRITE(6,992) NDVEC
  992  print(/,2X,'DIRECTION OF DELTA NOT DEFINED NDVEC =',I5)
       STOP      
      # endif
# INITIAL DIRECTION COSINES FOR CASCADE CALCULATION
      DRZINIT=DCOS(THETA)
      DRXINIT=DSIN(THETA)*DCOS(PHI)
      DRYINIT=DSIN(THETA)*DSIN(PHI)
#  LOAD INITIAL DIRECTION COSINES BEFORE INTERACTION AT 0,0,0
      DRXS=DRXINIT
      DRYS=DRYINIT
      DRZS=DRZINIT
#   INITIAL ENERGY
      ENERGY=EINIT
#
# ZERO SOME ARRAYS
      EPPST(1,I)=0.00
      EPPST(2,I)=0.00
      DO 11 K=1,10
      DO 1 J=1,28
      EPHOTON(K,J)=0.0
      EPHOTG1(K,J)=0.0
      EPHOTG2(K,J)=0.0
      EPHOTG3(K,J)=0.0
      EPHOTG4(K,J)=0.0
      EPHOTG5(K,J)=0.0
      ESTORE(K,J)=0.0
      ESTOR1(K,J)=0.0
      ESTOR2(K,J)=0.0
      ESTOR3(K,J)=0.0
      ESTOR4(K,J)=0.0
      ESTOR5(K,J)=0.0
   1  CONTINUE
      ifLSUM[K]:
=0
      ifLSUM1[K]:
=0
      ifLSUM2[K]:
=0
      ifLSUM3[K]:
=0
      ifLSUM4[K]:
=0
      ifLSUM5[K]:
=0
      IONSUM[K]=0
      IONSUM1[K]=0
      IONSUM2[K]=0
      IONSUM3[K]=0
      IONSUM4[K]=0
      IONSUM5[K]=0
   11 CONTINUE
      NCOMP=0
      NRAYL=0
      NPAIR=0
      NPHOT=0
      NVAC=0
      NPTP[I]=0
#    
      ifIRST=1:
      ISECOND=2
      if(LFIX == 1):
 :
# FIXED SHELL VACANCY SEE ABOVE
       NVAC=1
       ECMP(NVAC)=ENERGY
       ICSHELL(NVAC)=ISHELL
       XCPOS(NVAC)=X
       YCPOS(NVAC)=Y
       ZCPOS(NVAC)=Z
       KCGAS(NVAC)=KGAS
       LCGAS(NVAC)=LGAS
       TT(NVAC,I)=0.0
       GO TO 200
      # endif
# BETA DECAY
      if(ICON == 2 or ICON == 3):
 :
       NVAC=1
       ECMP(NVAC)=ENERGY
       XCPOS(NVAC)=X
       YCPOS(NVAC)=Y
       ZCPOS(NVAC)=Z
       KCGAS(NVAC)=KGAS
       LCGAS(NVAC)=LGAS
       TT(NVAC,I)=0.0
       GO TO 200
      # endif
    2 NTOTI=NCOMP+NRAYL+NPAIR+NPHOT
# PHOTONS
      if(ICON == 1):
 CALL ABSO(ifIRST,ENERGY,ISHELL,KGAS,LGAS,DIST)
#  
#  CREATE INTERACTION TREE
      if(LPEFLG == 1):
 GO TO 100
      if(LCFLG == 1):
 GO TO 10
      if(LRFLG == 1):
 GO TO 20
      if(LPFLG == 1):
 GO TO 30
# COMPTON SCATTERING
   10 CALL COMPTON(KGAS,LGAS,ENERGY)
      NCOMP=NCOMP+1
      NVAC=NVAC+1
      if(NVAC > 10):
 :
# MAXIMUM OF 10 PRIMARY INTERACTIONS
       NJHIGH=NJHIGH+1
       GO TO 123
      # endif
c RANDOMISE ANGLE PHI
      R3=DRAND48(RDUM)
      PHI=TWOPI*R3
# CALCULATE COMPTON ELECTRON DIRECTION COSINES USING THETAE AND PHI
      CALL DRCOS(DRXS,DRYS,DRZS,THETAE,PHI,DRXX,DRYY,DRZZ)
# FOR COMPTON EFFECT STORE ELECTRON DIRECTION COSINES
      ECDRX(NVAC)=DRXX
      ECDRY(NVAC)=DRYY
      ECDRZ[NVAC]=DRZZ
# CALCULATE WHICH SHELL HAS VACANCY FROM COMPTON EVENT
      CALL CVAC(KGAS,LGAS,EELEC,KSHELL,KBAD)
# REJECT EVENT WITHOUT SUFFICIENT ENERGY TO IONISE SHELLS
#     IF(KBAD == 1) WRITE(6,445) EELEC,I 
# 445 print(' COMPTON ELECTRON ENERGY =',D12.4,' TOO LOW IN ENERGY. EVE
#    /NT NO=',I5)  
      if(KBAD == 1):
 GO TO 123
# STORE ELECTRON ENERGY SHELL VACANCY ISHELL KGAS LGAS POSITION 
      ECMP(NVAC)=EELEC
      ICSHELL(NVAC)=KSHELL
      KCGAS(NVAC)=KGAS
      LCGAS(NVAC)=LGAS
# INITIAL INTERACTION
      if(NTOTI == 0):
 :
       XCPOS(NVAC)=X
       YCPOS(NVAC)=Y
       ZCPOS(NVAC)=Z
       TT(NVAC,I)=0.0
      else:
# LATER INTERACTIONS
       XCPOS(NVAC)=X+DIST*DRXS
       YCPOS(NVAC)=Y+DIST*DRYS
       ZCPOS(NVAC)=Z+DIST*DRZS
       TSUM=TSUM+DIST/VV
       TT(NVAC,I)=TSUM
      # endif
# UPDATE PHOTON STARTING ENERGY POSITION AND ANGLES
       ENERGY=EGAM
       X=XCPOS(NVAC)
       Y=YCPOS(NVAC)
       Z=ZCPOS(NVAC)
       PHIG=PHI+API
       if(PHIG >= TWOPI):
 PHIG=PHI-API
       CALL DRCOS(DRXS,DRYS,DRZS,THETAG,PHIG,DRXX,DRYY,DRZZ)
# NEW DIRECTION COSINES
       DRXS=DRXX
       DRYS=DRYY
       DRZS=DRZZ
# LOOP BACK 
      GO TO 2
# RAYLEIGH SCATTERING
   20 CALL RAYLEIGH(KGAS,LGAS,ENERGY,THETAR)
      NRAYL=NRAYL+1
#  CALCULATE ENERGY LOSS IN RAYLEIGH SCATTERING
      CALL RAYLOS(KGAS,LGAS,ENERGY,THETAR,ELRAY)
# UPDATE X-RAY STARTING ENERGY POSITION AND ANGLES
      ENERGY=ENERGY-ELRAY
      X=X+DIST*DRXS
      Y=Y+DIST*DRYS
      Z=Z+DIST*DRZS
      TSUM=TSUM+DIST/VV
c RANDOMISE ANGLE PHI
      R3=DRAND48(RDUM)
      PHIR=TWOPI*R3
      CALL DRCOS(DRXS,DRYS,DRZS,THETAR,PHIR,DRXX,DRYY,DRZZ)
      DRXS=DRXX
      DRYS=DRYY
      DRZS=DRZZ
# LOOP BACK
      GO TO 2
# PAIR PRODUCTION
   30 CALL PAIR(KGAS,LGAS,ENERGY,E1,E2,THET1,PHI1,THET2,PHI2)
      NPAIR=NPAIR+1
      NPTP[I]=NPAIR
# STORE ELECTRON AND POSITRON ENERGY POSITION AND ANGLES
      EPPST(1,I)=E1
      EPPST(2,I)=E2
      if(NVAC == 0):
 :
# FIRST INTERACTION IS PAIR PRODUCTION
       XPP(1,I)=X
       YPP(1,I)=Y
       ZPP(1,I)=Z
       XPP(2,I)=X
       YPP(2,I)=Y
       ZPP(2,I)=Z
       TTP[I]=0.0
       GO TO 40       
      # endif
      XPP(1,I)=X+DIST*DRXS
      YPP(1,I)=Y+DIST*DRYS
      ZPP(1,I)=Z+DIST*DRZS
      XPP(2,I)=XPP(1,I)
      YPP(2,I)=YPP(1,I)
      ZPP(2,I)=ZPP(1,I)
      TSUM=TSUM+DIST/VV
      TTP[I]=TSUM
   40 CALL DRCOS(DRXS,DRYS,DRZS,THET1,PHI1,DRXX,DRYY,DRZZ)
      DRXPP(1,I)=DRXX
      DRYPP(1,I)=DRYY
      DRZPP(1,I)=DRZZ
      CALL DRCOS(DRXS,DRYS,DRZS,THET2,PHI2,DRXX,DRYY,DRZZ)
      DRXPP(2,I)=DRXX
      DRYPP(2,I)=DRYY
      DRZPP(2,I)=DRZZ
      GO TO 200
# PHOTOELECTRIC ABSORPTION
#  STORE ENERGY ISHELL KGAS
  100 NVAC=NVAC+1
      if(NVAC > 10):
 :
# ONLY ALLOW MAXIMUM OF 10 PRIMARY INTERACTIONS
       NJHIGH=NJHIGH+1
       GO TO 123
      STOP
      # endif
      NPHOT=NPHOT+1
# ECMP= TOTAL ENERGY= EGAMMA = ELECTRON KINETIC ENERGY+ VACANCY ENERGY
      ECMP(NVAC)=ENERGY
      ICSHELL(NVAC)=ISHELL
      if(NTOTI == 0):
 :
       XCPOS(NVAC)=X
       YCPOS(NVAC)=Y
       ZCPOS(NVAC)=Z
       TT(NVAC,I)=0.0
      else:
       XCPOS(NVAC)=X+DIST*DRXS
       YCPOS(NVAC)=Y+DIST*DRYS
       ZCPOS(NVAC)=Z+DIST*DRZS
       TSUM=TSUM+DIST/VV
       TT(NVAC,I)=TSUM
      # endif
      KCGAS(NVAC)=KGAS
      LCGAS(NVAC)=LGAS
# FOR PE EFFECT STORE PHOTON INCIDENT ANGLE
      ECDRX(NVAC)=DRXS
      ECDRY(NVAC)=DRYS
      ECDRZ[NVAC]=DRZS
# LOOP OVER SHELL VACANCIES
  200 CONTINUE
# STORE NUMBER AND TYPE OF PRIMARY INTERACTIONS
      MSUM[I]=NTOTI
      MCOMP[I]=NCOMP
      MRAYL[I]=NRAYL
      MPAIR[I]=NPAIR
      MPHOT[I]=NPHOT
      MVAC[I]=NVAC
# LOOP OVER SHELL VACANCIES
      DO 900 K=1,NVAC
      CALL CONTROL(I,K,ICON)
  900 CONTINUE
# LOOP OVER EXTRA ELECTRONS FROM COMPTON AND PAIR PRODUCTION AND LOAD 
# INTO COMPTON ELECTRON STORE AND PAIR STORE
 1000 CONTINUE
      RETURN
      # end
      def RAYLOS(KGAS,LGAS,EGAMMA,THETA,ELRAY):
      IMPLICIT #real*8(A-H,O-Z)
      IMPLICIT #integer*8(I-N)
      COMMON/MIXC/PRSH(6,3,17,17),ESH(6,3,17),AUG(6,3,17,17,17),RAD[6,3,17,17],PRSHBT(6,3,17),IZ[6,3],INIOCC(6,3,17),ISHLMX(6,3),AMZ[6,3]
# EGAMMA IS THE PHOTON ENERGY
# KGAS AND LGAS IDENTIFY ATOM MASS USED IN RAYLEIGH SCATTERING
# THETA IS THE SCATTERED PHOTON ANGLE
# ELRAY IS THE CALCULATED ELASTIC ENERGY LOSS
      AMASS=0.0
      AMU=931494028.00
      NOBLE=0
      IDENT=0
      ICF4=0
      ICH4=0
      IC4H10=0
      ICO2=0
      ISF6=0
      ITMA=0
      IC2H6=0
      IC3H8=0
      IH2O=0
# IDENTIFY NOBLE GASES
      if(IZ[KGAS,LGAS] == 2 or IZ[KGAS,LGAS] == 10 or IZ[KGAS,LGAS] == 18 or IZ[KGAS,LGAS] == 36 or IZ[KGAS,LGAS] == 54) :
       NOBLE=1
       AMASS=AMZ[KGAS,LGAS]
       GO TO 10
      # endif
# IDENTIFY MOLECULAR GASES
      if(IZ[KGAS,2] == 0):
 :
# NITROGEN , HYDROGEN ETC MOLECULES WITH IDENTICAL ATOMS
       IDENT=1
       AMASS=AMZ[KGAS,LGAS]
       GO TO 10
      # endif  
      if(AMZ[KGAS,2] == 75.9936):
 :
# CF4
       AMASS=AMZ[KGAS,1]+AMZ[KGAS,2]
       ICF4=1
       GO TO 10
      # endif
      if(AMZ[KGAS,2] == 4.03176):
 :
# CH4
       AMASS=AMZ[KGAS,1]+AMZ[KGAS,2]
       ICH4=1
       GO TO 10
      # endif
      if(AMZ[KGAS,2] == 6.04764):
 :
# C2H6
       AMASS=AMZ[KGAS,1]+AMZ[KGAS,2]
       IC2H6=1
       GO TO 10
      # endif
      if(AMZ[KGAS,2] == 8.06352):
 :
# C3H8
       AMASS=AMZ[KGAS,1]+AMZ[KGAS,2]
       IC3H8=1
       GO TO 10
      # endif
      if(AMZ[KGAS,2] == 10.0794):
 :
# C4H10
       AMASS=AMZ[KGAS,1]+AMZ[KGAS,2]
       IC4H10=1
       GO TO 10
      # endif
      if(AMZ[KGAS,2] == 31.9988):
 :
# CO2
       AMASS=AMZ[KGAS,1]+AMZ[KGAS,2]
       ICO2=1
       GO TO 10
      # endif
      if(AMZ[KGAS,2] == 113.9904):
 :
# SF6
       AMASS=AMZ[KGAS,1]+AMZ[KGAS,2]
       ISF6=1
       GO TO 10
      # endif
      if(AMZ[KGAS,2] == 14.0067):
 :
# TMA C3NH9
       AMASS=AMZ[KGAS,1]+AMZ[KGAS,2]+AMZ[KGAS,3]
       ITMA=1
       GO TO 10
      # endif
      if(AMZ[KGAS,2] == 2.015808 and AMZ[KGAS,1] == 15.9994):
 :
# H2O
       AMASS=AMZ[KGAS,1]+AMZ[KGAS,2]
       IH2O=1
       GO TO 10
      # endif 
# CALCULATE ENERGY LOSS
  10  if(AMASS == 0.0) :
       WRITE(6,98) AMASS
  98   print(' ERROR IN def RAYLOS AMASS=','%.3f' %)
       WRITE(6,97) KGAS,LGAS,AMZ[KGAS,1],AMZ[KGAS,2],AMZ[KGAS,3]
  97   print(' KGAS=',I3,' LGAS=',I3,/,' AMZ[KGAS,1]=',D13.6,/,' AMZ[KGAS,2]=',D13.6,/,' AMZ[KGAS,3]=',D13.6)
       STOP
      # endif
      ELRAY=EGAMMA*EGAMMA*(1.00-DCOS(THETA))/(AMASS*AMU)
      if(ELRAY > 0.1 and NOBLE != 1):
 :
# IF ENERGY LOSS IS GREATER THAN 0.1 ELECTRON VOLTS : ASSUME
# MOLECULE IS EXCITED TO VIBRATIONAL LEVELS (RAMAN)
# AND THEREFORE USE ATOMIC MASS OF CONSTITUENT RATHER THAN MOLECULE
       ELRAY=EGAMMA*EGAMMA*(1.00-DCOS(THETA))/(AMZ[KGAS,LGAS]*AMU)
       if(IDENT == 1):
 :
        ELRAY=ELRAY*2.00
        GO TO 20
       else if (ICF4 == 1) :
        if(LGAS == 2):
 ELRAY=ELRAY*4.00
       else if (ICH4 == 1) : 
        if(LGAS == 2):
 ELRAY=ELRAY*4.00
       else if (ICO2 == 1) :
        if(LGAS == 2):
 ELRAY=ELRAY*2.00
       else if (IC4H10 == 1) :
        if(LGAS == 1):
 ELRAY=ELRAY*4.00
        if(LGAS == 2):
 ELRAY=ELRAY*10.00
       else if(ISF6 == 1) :
        if(LGAS == 2):
 ELRAY=ELRAY*6.00
       else if(ITMA == 1) :
        if(LGAS == 1):
 ELRAY=ELRAY*3.00
        if(LGAS == 3):
 ELRAY=ELRAY*9.00
       else if(IC2H6 == 1) :
        if(LGAS == 1):
 ELRAY=ELRAY*2.00
        if(LGAS == 2):
 ELRAY=ELRAY*6.00
       else if(IC3H8 == 1) :
        if(LGAS == 1):
 ELRAY=ELRAY*3.00
        if(LGAS == 2):
 ELRAY=ELRAY*8.00
       else if(IH2O == 1) :
        if(LGAS == 2):
 ELRAY=ELRAY*2.00
       else:
        WRITE(6,99)
  99    print(' WARNING DID NOT RECOGNISE GAS IN def RAYLOS')
        STOP
       # endif
      # endif
   20 CONTINUE
      RETURN
      # end
      def COMPTON(KGAS,LGAS,EGAMMA):
      IMPLICIT #real*8(A-H,O-Z)
      IMPLICIT #integer*8(I-N)
      COMMON/COMPTIN/FORMFAR(6,3,45),FORMFAC(6,3,45)
      COMMON/COMPTOUT/EGAM,EELEC,THETAG,THETAE
      DIMENSION XMT(45)
      DATA XMT/0.0,.005,.010,.015,.020,.025,.030,.040,.050,.070,.090,0.10,.125,0.15,.175,0.20,0.25,0.30,0.40,0.50,0.60,0.70,0.80,0.90,1.00,1.25,1.50,2.00,2.50,3.00,3.50,4.00,5.00,6.00,7.00,8.00,10.0,15.0,20.0,50.0,80.0,100.,1000.,1000000.,1000000000./
# FORMFAC IS COMPTON FORM FACTOR
# EGAMMA IS INCIDENT PHOTON ENERGY
# KGAS AND LGAS ARE POINTERS IN FORMFAC(KGAS,LGAS,45)
# EGAM IS CALCULATED SCATTERED PHOTON ENERGY EV
# EELEC IS CALCULATED SCATTERED ELECTRON ENERGY IN EV
# THETAG IS CALCULATED SCATTERED PHOTON ANGLE
# THETAE IS CALCULATED SCATTERED ELECTRON ANGLE
#
      EMASS=510998.9280
    1 AA=EGAMMA/EMASS
      CALL GENERATOR(AA,THETA)
# CALCULATE XMT ( USE SAME CONVERSION FACTOR AS HUBBEL ET AL)
      XMTE=DSIN(THETA/2.0)*EGAMMA/12398.520
# CHECK TO SEE IF PASSES FORM FACTOR TEST
      DO 2 K=2,45
      if(XMTE <= XMT[K]:
) GO TO 3
    2 CONTINUE
      K=45
    3 Y1=math.log(FORMFAC(KGAS,LGAS,K))
      Y2=math.log(FORMFAC(KGAS,LGAS,K-1))
      X1=math.log(XMT[K])
      X2=math.log(XMT[K-1])
      A=(Y1-Y2)/(X1-X2)
      B=(X2*Y1-X1*Y2)/(X2-X1)
      YTEST=math.exp(A*math.log(XMTE)+B)
      RN=DRAND48(RDUM)
      if(RN > YTEST):
  GO TO 1
# GOOD FORM FACTOR 
      THETAG=THETA
      EGAM=EGAMMA/(1.00+AA*(1.00-DCOS(THETAG)))
#     EELEC=AA*EN*(1.00-DCOS(THETAG))/(1.00+AA*(1.00-DCOS(THETAG)))
      EELEC=EGAMMA-EGAM
      THETAE=DATAN(1.00/((1.00+AA)*DTAN(0.50*THETAG)))
      RETURN
      # end
      def GENERATOR(aa,theta):
      implicit none
      double precision aa, theta, x, y, pi, xmc, dmc, ymc,
     -   xnewton, ynewton,dvec[1], eps, dx, acut
      double complex a
      #integer i,j,nmc
      logical ldebug
      parameter(ldebug =  False )
      parameter (nmc = 10)
      parameter (pi = 3.141592653589793238462643383)
      parameter (eps = 1.0d-4)
      parameter (acut = 0.025)
*   Transfer
      a = dcmplx(aa,0.00)
*   Check input (return 0 if values are not permitted).
      if (aa <= 0):
         theta = 0
         return
      # endif
*   Draw a uniform random number
      call rm48(dvec,1)
      y = dvec[1]
#      y = 0.82
      if(ldebug)print *,' Target y = ',y
*   Find a starting value by scanning or MC.
      dmc = 2.00
      for 10 i in range(0, nmc):
         x = pi*(dblE[I]-0.5)/dble(nmc)
         if(aa > acut):
            ymc=(-(-2-8*a-5*a**2+2*a*(1+2*a)+
     -         cmplx(0,2)*(-2-2*a+a**2)*pi)/
     -         (2*a**3)+(-2*a*cos(x)+(-2-6*a-5*a**2+2*a*(1+2*a)*cos(x))/
     -         (1+a-a*cos(x))**2+2*(-2-2*a+a**2)*log(-1-a+a*cos(x)))/
     -         (2*a**3))/(-(-2-8*a-5*a**2+2*a*(1+2*a)+cmplx(0,2)*
     -         (-2-2*a+a**2)*pi)/(2*a**3)+
     -         (2*a+(-2-6*a-5*a**2-2*a*(1+2*a))/(1+2*a)**2+
     -         2*(-2-2*a+a**2)*log(-1-2*a))/(2*a**3))
         else:
            ymc = 0.5 - (15*Cos(x))/32. - Cos(3*x)/32.
         # endif
         if(ldebug)print *,' Try  MC: x = ',x,
     -      ', y = ',ymc, ', dist = ',dmc
         if (i == 1 or  abs(y-ymc) < dmc):
            xmc = x
            dmc = abs(y-ymc)
         # endif
 10   continue
      if(ldebug)print *,' Best MC: x = ',xmc, ', dist = ',dmc
*   Iterate a bit to find a better value
      xnewton = xmc
      if(aa > acut):
         ynewton = (-(-2-8*a-5*a**2+2*a*(1+2*a)+
     -      cmplx(0,2)*(-2-2*a+a**2)*pi)/(2*a**3)+(-2*a*cos(xnewton)+
     -      (-2-6*a-5*a**2+2*a*(1+2*a)*cos(xnewton))/
     -      (1+a-a*cos(xnewton))**2+
     -      2*(-2-2*a+a**2)*log(-1-a+a*cos(xnewton)))/
     -      (2*a**3))/(-(-2-8*a-5*a**2+2*a*(1+2*a)+cmplx(0,2)*
     -      (-2-2*a+a**2)*pi)/(2*a**3)+
     -      (2*a+(-2-6*a-5*a**2-2*a*(1+2*a))/(1+2*a)**2+
     -      2*(-2-2*a+a**2)*log(-1-2*a))/(2*a**3))
      else:
            ynewton = 0.5 - (15*Cos(xnewton))/32. - Cos(3*xnewton)/32.
      # endif
      for 20 i in range(0, 20):
         if(aa > acut):
            dx = (y-ynewton)/(((1/(1+a*(1-cos(xnewton)))+
     -         a*(1-cos(xnewton))+cos(xnewton)**2)*sin(xnewton))/
     -         ((1+a*(1-cos(xnewton)))**2*(-(-2-8*a-5*a**2+2*a*(1+2*a)+
     -         cmplx(0,2)*(-2-2*a+a**2)*pi)/(2.*a**3)+
     -         (2*a+(-2-6*a-5*a**2-2*a*(1+2*a))/(1+2*a)**2+
     -         2*(-2-2*a+a**2)*log(-1-2*a))/(2.*a**3))))
         else:
            dx = (y-ynewton)/(3*(5*sin(xnewton)+sin(3*xnewton))/32)
         # endif
         for 30 j in range(0, 5):
            if(aa > acut):
               if (abs((-(-2-8*a-5*a**2+2*a*(1+2*a)+
     -            cmplx(0,2)*(-2-2*a+a**2)*pi)/(2*a**3)+
     -            (-2*a*cos(xnewton+dx)+
     -            (-2-6*a-5*a**2+2*a*(1+2*a)*cos(xnewton+dx))/
     -            (1+a-a*cos(xnewton+dx))**2+
     -            2*(-2-2*a+a**2)*log(-1-a+a*cos(xnewton+dx)))/
     -            (2*a**3))/(-(-2-8*a-5*a**2+2*a*(1+2*a)+cmplx(0,2)*
     -            (-2-2*a+a**2)*pi)/(2*a**3)+
     -            (2*a+(-2-6*a-5*a**2-2*a*(1+2*a))/(1+2*a)**2+
     -            2*(-2-2*a+a**2)*log(-1-2*a))/(2*a**3))-y) > 
     -            abs(ynewton-y) or 
     -            xnewton+dx > pi or xnewton+dx < 0):
                  if(ldebug)print *,' Reducing'
                  dx = dx/2
               else:
                  goto 40
               # endif
            else:
               if (abs(0.5-(15*Cos(xnewton))/32-Cos(3*xnewton)/32-
     -            y) > abs(ynewton-y) or 
     -            xnewton+dx > pi or xnewton+dx < 0):
                  if(ldebug)print *,' Reducing'
                  dx = dx/2
               else:
                  goto 40
               # endif
            # endif
 30      continue
 40      continue
         xnewton = xnewton + dx
#         if(xnewton > pi or xnewton < 0)print *,' x out of range'
         if(xnewton > pi)xnewton = 0.9999*pi
         if(xnewton < 0)xnewton = 0.0001*pi
         if(aa > acut):
            ynewton = (-(-2-8*a-5*a**2+2*a*(1+2*a)+
     -         cmplx(0,2)*(-2-2*a+a**2)*pi)/(2*a**3)+(-2*a*cos(xnewton)+
     -         (-2-6*a-5*a**2+2*a*(1+2*a)*cos(xnewton))/
     -         (1+a-a*cos(xnewton))**2+
     -         2*(-2-2*a+a**2)*log(-1-a+a*cos(xnewton)))/
     -         (2*a**3))/(-(-2-8*a-5*a**2+2*a*(1+2*a)+cmplx(0,2)*
     -         (-2-2*a+a**2)*pi)/(2*a**3)+
     -         (2*a+(-2-6*a-5*a**2-2*a*(1+2*a))/(1+2*a)**2+
     -         2*(-2-2*a+a**2)*log(-1-2*a))/(2*a**3))
         else:
            ynewton = 0.5 - (15*Cos(xnewton))/32. - Cos(3*xnewton)/32.
         # endif
         if(ldebug)print *,' Try  NR: x = ',xnewton, ', y = ',ynewton,
     -   ', dist = ',y-ynewton
         if (abs(dx) < eps) :
            if(ldebug)print *,' Best NR: x = ',xnewton,
     -           ', y = ',ynewton,', dist = ',y-ynewton
            theta = xnewton
            return
         # endif
 20   continue
*   Return value
      theta = xnewton
      if(ldebug)print *,' ### Did not converge, returning ',theta
      if(ldebug)print *,' Returning: x = ',xnewton, ', y_tgt = ',y,
     -   ', y_NR = ',ynewton,
     -   ', dist = ',y-ynewton
      # end
      def RAYLEIGH(KGAS,LGAS,EGAMMA,THETAR):
      IMPLICIT #real*8(A-H,O-Z)
      IMPLICIT #integer*8(I-N)
      COMMON/COMPTIN/FORMFAR(6,3,45),FORMFAC(6,3,45)
      DIMENSION XMT(45)
      DATA XMT/0.0,.005,.010,.015,.020,.025,.030,.040,.050,.070,.090,0.10,.125,0.15,.175,0.20,0.25,0.30,0.40,0.50,0.60,0.70,0.80,0.90,1.00,1.25,1.50,2.00,2.50,3.00,3.50,4.00,5.00,6.00,7.00,8.00,10.0,15.0,20.0,50.0,80.0,100.,1000.,1000000.,1000000000./
# FORMFAR IS RAYLEIGH FORM FACTOR
# EGAMMA IS THE INCIDENT PHOTON ENERGY
# KGAS AND LGAS ARE POINTERS IN FORMFAR(KGAS,LGAS,45)
# THETAR IS CALCULATED SCATTERED PHOTON ANGLE
    1 CALL GENRAYL(THETA)
      THETAR=THETA
# CALCULATE XMT ( USE SAME CONVERSION FACTOR AS HUBBEL ET AL)
      XMTE=DSIN(THETA/2.0)*EGAMMA/12398.520
# CHECK TO SEE IF PASSES FORM FACTOR TEST
      DO 2 K=2,45
      if(XMTE <= XMT[K]:
) GO TO 3
    2 CONTINUE
      K=45
    3 Y1=math.log(FORMFAR(KGAS,LGAS,K))
      Y2=math.log(FORMFAR(KGAS,LGAS,K-1))
      X1=math.log(XMT[K])
      X2=math.log(XMT[K-1])
      A=(Y1-Y2)/(X1-X2)
      B=(X2*Y1-X1*Y2)/(X2-X1)
      YTEST=math.exp(A*math.log(XMTE)+B)
# USE F**2 (DEFINITION IN HUBBEL)
      YTEST2=YTEST*YTEST
      RN=DRAND48(RDUM)
      if(RN > YTEST2):
  GO TO 1
# GOOD FORM FACTOR 
      RETURN
      # end
      def GENRAYL(theta):
      implicit none
      double precision x, y, pi, xmc, dmc, ymc,
     -     xnewton, ynewton, dvec[1], eps, dx, theta
      #integer i,j,nmc
      logical ldebug
      parameter(ldebug =  False )
      parameter (nmc = 10)
      parameter (pi = 3.141592653589793238462643383)
      parameter (eps = 1.0d-4)
c
# ROBS 1+COS*COS RANDOM GENERATOR
c
*     Draw a uniform random number
      call rm48(dvec,1)
      y = dvec[1]
      if(ldebug)print *,' Target y = ',y
*     Find a starting value by scanning or MC.
      dmc = 2.00
      for 10 i in range(0, nmc):
         x = pi*(dblE[I]-0.5)/dble(nmc)
         ymc=(x+sin(2*x)/6)/pi
         if (i == 1 or  abs(y-ymc) < dmc):
            xmc = x
            dmc = abs(y-ymc)
         # endif
         if(ldebug)print *,' Try  MC: x = ',x,
     -        ', y = ',ymc, ', dist = ',dmc
 10   continue
      if(ldebug)print *,' Best MC: x = ',xmc, ', dist = ',dmc
*     Iterate a bit to find a better value
      xnewton = xmc
      ynewton = (xnewton+sin(2*xnewton)/6)/pi
      for 20 i in range(0, 20):
         dx = (y-ynewton)*pi/(1+cos(2*xnewton)/3)
         for 30 j in range(0, 5):
            if (abs((xnewton+dx+sin(2*xnewton+2*dx)/6)/pi-y) > 
     -           abs(ynewton-y) or 
     -           xnewton+dx > pi or 
     -           xnewton+dx < 0):
               if(ldebug)print *,' Reducing: ',
     -              (xnewton+dx+sin(2*xnewton+2*dx)/6)/pi, y
               dx = dx/2
            else:
               goto 40
            # endif
 30      continue
 40      continue
         xnewton = xnewton + dx
#     if(xnewton > pi or xnewton < 0)print *,' x out of range'
         if(xnewton > pi)xnewton = 0.9999*pi
         if(xnewton < 0)xnewton = 0.0001*pi
         ynewton = (xnewton+sin(2*xnewton)/6)/pi
         if(ldebug)print *,' Try  NR: x = ',xnewton, ', y = ',ynewton,
     -        ', dist = ',y-ynewton
         if (abs(dx) < eps) :
            if(ldebug)print *,' Best NR: x = ',xnewton,
     -           ', y = ',ynewton,', dist = ',y-ynewton
            theta = xnewton
            return
         # endif
 20   continue
*     Return value
      theta = xnewton
      if(ldebug)print *,' ### Did not converge, returning ',theta
      if(ldebug)print *,' Returning: x = ',xnewton, ', y_tgt = ',y,
     -     ', y_NR = ',ynewton,
     -     ', dist = ',y-ynewton
      # end
      def PAIR(KGAS,LGAS,EGAMMA,E1,E2,THET1,PHI1,THET2,PHI2):
      IMPLICIT #real*8(A-H,O-Z)
      IMPLICIT #integer*8(I-N)
# EGAMMA IS INCIDENT PHOTON ENERGY
# E1 AND E2 ARE CALCULATED ELECTRON AND POSITRON ENERGIES
# THET1 AND THET2 ARE CALCULATED SCATTERING ANGLES
# USE FLAT DISTRIBUTION FOR ENERGIES 
      TWOPI=2.00*numpy.arccos(-1.00)
      EMASS=510998.9280
      ETOT=EGAMMA-2.00*EMASS
      R1=DRAND48(RDUM)
      E1=ETOT*R1
      E2=ETOT-E1
# USE BETHE AND HEITLER AVERAGE ANGLE
      THET1=EMASS/(EMASS+E1)
      THET2=EMASS/(EMASS+E2)
# RANDOM PHI ANGLE WITH PI BETWEEN PHI ANGLES
      R2=DRAND48(RDUM)
      PHI1=TWOPI*R3
      PHI2=PHI1+API
      if(PHI2 > TWOPI):
 PHI2=PHI2-TWOPI 
      RETURN
      # end      
      def CONTROL(I,NVAC,ICON):
      IMPLICIT #real*8(A-H,O-Z)
      IMPLICIT #integer*8(I-N)
      CHARACTER*6 SCR(17),SCR1(17)
      COMMON/INPT2/KGAS,LGAS,DETEFF,EXCWGHT
      COMMON/COMP/LCMP,LCFLG,LRAY,LRFLG,LPAP,LPFLG,LBRM,LBFLG,LPEFLG
      COMMON/GENCAS/ELEV[17,79],NSDEG(17),AA[17],BB[17],SCR,SCR1
      COMMON/MIXC/PRSH(6,3,17,17),ESH(6,3,17),AUG(6,3,17,17,17),RAD[6,3,17,17],PRSHBT(6,3,17),IZ[6,3],INIOCC(6,3,17),ISHLMX(6,3),AMZ[6,3]
      COMMON/UPD/NOCC(6,3,17),AUGR(6,3,17,17,17),RADR(6,3,17,17)
      COMMON/CALCAS/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      COMMON/CALCAS1/IONSUM1(10),ifLSUM1(10),ESTOR1(10,28),EPHOTG1(10,28),DRXE1(10,28),DRYE1(10,28),DRZE1(10,28),DRX1(10,28),DRY1(10,28),DRZ1(10,28)
      COMMON/CALCAS2/IONSUM2(10),ifLSUM2(10),ESTOR2(10,28),EPHOTG2(10,28),DRXE2(10,28),DRYE2(10,28),DRZE2(10,28),DRX2(10,28),DRY2(10,28),DRZ2(10,28)
      COMMON/CALCAS3/IONSUM3(10),ifLSUM3(10),ESTOR3(10,28),EPHOTG3(10,28),DRXE3(10,28),DRYE3(10,28),DRZE3(10,28),DRX3(10,28),DRY3(10,28),DRZ3(10,28)
      COMMON/CALCAS4/IONSUM4(10),ifLSUM4(10),ESTOR4(10,28),EPHOTG4(10,28),DRXE4(10,28),DRYE4(10,28),DRZE4(10,28),DRX4(10,28),DRY4(10,28),DRZ4(10,28)
      COMMON/CALCAS5/IONSUM5(10),ifLSUM5(10),ESTOR5(10,28),EPHOTG5(10,28),DRXE5(10,28),DRYE5(10,28),DRZE5(10,28),DRX5(10,28),DRY5(10,28),DRZ5(10,28)
      COMMON/COUT/ECMP(10),ECDRX(10),ECDRY(10),ECDRZ[10],XCPOS(10),YCPOS(10),ZCPOS(10),KCGAS(10),LCGAS(10),ICSHELL(10)
c
#
#  CALCULATES AUGER AND FLUORESCENCE CASCADE FOR VACANCY IN ICSHELL
#
      ifIRST=1:
      ISECOND=2
      ICONPH=1
      X0=XCPOS(NVAC)
      Y0=YCPOS(NVAC)
      Z0=ZCPOS(NVAC)
      DRXE(NVAC,1)=ECDRX(NVAC)
      DRYE(NVAC,1)=ECDRY(NVAC)
      DRZE(NVAC,1)=ECDRZ[NVAC]
# 
# CALCULATE CASCADE EVENT
      IDUM1=KCGAS(NVAC)
      IDUM2=LCGAS(NVAC)
      IDUM3=ICSHELL(NVAC)
      ADUM1=ECMP(NVAC)
      CALL CALC(I,NVAC,IDUM1,IDUM2,ADUM1,IDUM3,ICON)
# STORE EVENT 
#     Z0=DIST
      CALL CASSTORE(I,NVAC,X0,Y0,Z0)
# IF INCLUDE PHOTOABSORPTION OF FLUORESENCE : 
      if(ICONPH == 1):
 :
       if(ifLSUM(NVAC):
 == 0) GO TO 10
# LOOP AROUND FIRST GEN FLUORESCENCE
       ifL1=ifLSUM(NVAC):
       DO 9 L1=1,ifL1
       EPH=EPHOTON(NVAC,L1)
#
# CALC ABSORPTION POSITION X1,Y1,Z1 FOR FLUORESENCE PHOTON OF ENERGY EPH
# WITH ABSORPTION IN SHELL ISHELL1 IN GAS KGAS1 COMPONENT LGAS1 
       CALL ABSO(ISECOND,EPH,ISHELL1,KGAS1,LGAS1,DIST1)
# LOW ENERGY PHOTON
       if(ISHELL1 == -1):
 GO TO 9
#
# CALCULATE CASCADE IN GAS 
       CALL CALC1(I,NVAC,KGAS1,LGAS1,EPH,ISHELL1,L1)
# STORE EVENT
       CALL CSSTF1(I,NVAC,L1,DIST1) 
    9  CONTINUE 
#
# SECOND GENERATION FLUORESCENCE
       if(ifLSUM1(NVAC):
 == 0) GO TO 10 
# LOOP AROUND SECOND GEN FLUORESCENCE
       ifL2=ifLSUM1(NVAC):
       DO 8 L2=1,ifL2
       EPH=EPHOTG1(NVAC,L2)
#
# CALC ABSORPTION POSITION X2,Y2,Z2 FOR FLUORESENCE PHOTON OF ENERGY EPH
# WITH ABSORPTION IN SHELL ISHELL2 IN GAS KGAS2 COMPONENT LGAS2
       CALL ABSO(ISECOND,EPH,ISHELL2,KGAS2,LGAS2,DIST2)
# LOW ENERGY PHOTON
       if(ISHELL2 == -1):
 GO TO 8
#
# CALCULATE CASCADE IN GAS 
       CALL CALC2(I,NVAC,KGAS2,LGAS2,EPH,ISHELL2,L2)
# STORE EVENT
       CALL CSSTF2(I,NVAC,L2,DIST2)               
    8  CONTINUE    
# 
# THIRD GENERATION FLUORESCENCE
       if(ifLSUM2(NVAC):
 == 0) GO TO 10
# LOOP AROUND THIRD GEN FLUORESCENCE
       ifL3=ifLSUM2(NVAC):
       DO 7 L3=1,ifL3
       EPH=EPHOTG2(NVAC,L3)
#
# CALC ABSORPTION POSITION X3,Y3,Z3 FOR FLUORESENCE PHOTON OF ENERGY EPH
# WITH ABSORPTION IN SHELL ISHELL3 IN GAS KGAS3 COMPONENT LGAS3
       CALL ABSO(ISECOND,EPH,ISHELL3,KGAS3,LGAS3,DIST3)
# LOW ENERGY PHOTON
       if(ISHELL3 == -1):
 GO TO 7
#
# CALCULATE CASCADE IN GAS 
       CALL CALC3(NVAC,KGAS3,LGAS3,EPH,ISHELL3,L3)
# STORE EVENT
       CALL CSSTF3(I,NVAC,L3,DIST3)               
    7  CONTINUE      
# 
# FOURTH GENERATION FLUORESCENCE
       if(ifLSUM3(NVAC):
 == 0) GO TO 10
# LOOP AROUND FOURTH GEN FLUORESCENCE
       ifL4=ifLSUM3(NVAC):
       DO 6 L4=1,ifL4
       EPH=EPHOTG3(NVAC,L4)
#
# CALC ABSORPTION POSITION X4,Y4,Z4 FOR FLUORESENCE PHOTON OF ENERGY EPH
# WITH ABSORPTION IN SHELL ISHELL4 IN GAS KGAS4 COMPONENT LGAS4
       CALL ABSO(ISECOND,EPH,ISHELL4,KGAS4,LGAS4,DIST4)
# LOW ENERGY PHOTON
       if(ISHELL4 == -1):
 GO TO 6
#
# CALCULATE CASCADE IN GAS 
       CALL CALC4(NVAC,KGAS4,LGAS4,EPH,ISHELL4,L4)
# STORE EVENT
       CALL CSSTF4(I,NVAC,L4,DIST4)                    
    6  CONTINUE       
# 
# FIFTH GENERATION FLUORESCENCE
       if(ifLSUM4(NVAC):
 == 0) GO TO 10
# LOOP AROUND FIFTH GEN FLUORESCENCE
       ifL5=ifLSUM5(NVAC):
       DO 5 L5=1,ifL5
       EPH=EPHOTG4(NVAC,L5)
#
# CALC ABSORPTION POSITION X5,Y5,Z5 FOR FLUORESENCE PHOTON OF ENERGY EPH
# WITH ABSORPTION IN SHELL ISHELL5 IN GAS KGAS5 COMPONENT LGAS5
       CALL ABSO(ISECOND,EPH,ISHELL5,KGAS5,LGAS5,DIST5)
# LOW ENERGY PHOTON
       if(ISHELL5 == -1):
 GO TO 5
#
# CALCULATE CASCADE IN GAS 
       CALL CALC5(NVAC,KGAS5,LGAS5,EPH,ISHELL5,L5)
# STORE EVENT
       CALL CSSTF5(I,NVAC,L5,DIST5)               
       if(ifLSUM5(NVAC):
 >= 1) WRITE(6,89) ifLSUM5
   89  print(' WARNING SIXTH GENERATION EXISTS ifLSUM5=',I3)
    5  CONTINUE
      # endif
   10 CONTINUE
      RETURN 
      # end
      def CALC(IPN,NVAC,KGAS,LGAS,ELECEN,ISHELL,ICON):
      IMPLICIT #real*8(A-H,O-Z)
      IMPLICIT #integer*8(I-N)
      CHARACTER*6 SCR(17),SCR1(17)
      COMMON/INPT1/NDVEC
      COMMON/PRIM3/MSUM(10000),MCOMP(10000),MRAYL(10000),MPAIR(10000),MPHOT(10000),MVAC(10000)
      COMMON/GENCAS/ELEV[17,79],NSDEG(17),AA[17],BB[17],SCR,SCR1
      COMMON/MIXC/PRSH(6,3,17,17),ESH(6,3,17),AUG(6,3,17,17,17),RAD[6,3,17,17],PRSHBT(6,3,17),IZ[6,3],INIOCC(6,3,17),ISHLMX(6,3),AMZ[6,3]
      COMMON/UPD/NOCC(6,3,17),AUGR(6,3,17,17,17),RADR(6,3,17,17)
      COMMON/CALCAS/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      DIMENSION TEMP(17),TEMP1(289)
#
# CALCULATE CASCADE IN GAS KGAS AND MOLECULAR COMPONENT LGAS
# WITH INTIAL ENERGY DEPOSIT ELECEN AND SHELL VACANCY CREATED AT ISHELL
#
# INITIAL PHOTON DIRECTION  DRX, DRY AND DRZ
      DRXINIT=DRXE(NVAC,1)
      DRYINIT=DRYE(NVAC,1)
      DRZINIT=DRZE(NVAC,1)
      ISHELLST=ISHELL
  100 ELEFT=ELECEN
      ISHELL=ISHELLST
      API=numpy.arccos(-1.00)
      TWOPI=2.00*API
      ISECOND=1
      ifIRST=0:
# SET STARTING ARRAY NOCC EQUAL TO INIOCC
      DO 1 I=1,17
      NOCC(KGAS,LGAS,I)=INIOCC(KGAS,LGAS,I)
    1 CONTINUE
# PHOTONS
      if(ICON == 1):
 :
       IONSUM(NVAC)=1
       ifLSUM(NVAC):
=0
# STORE INITIAL PHOTOELECTRON ENERGY AND ANGLE
       ESTORE(NVAC,1)=ELECEN-ELEV[ISHELL,IZ[KGAS,LGAS]]
       ELECN=ESTORE(NVAC,1)
       ELEFT=ELEFT-ESTORE(NVAC,1)
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)-1  
#    ENTRY FOR COMPTON ELECTRON.....
       if(NVAC <= MCOMP(IPN):
) :
#    IF COMPTON EVENT ELECTRON ANGLE FROM COMPTON (ALREADY STORED)
        GO TO 4
       # endif
# USE PHOTOELCTRON ANGULAR DISTRIBUTION
       APE=AA[ISHELL]
       BPE=BB[ISHELL]
       CALL ANGGEN(APE,BPE,THET)
       if(THET < 0.0):
 THET=THET+API
       R3=DRAND48(RDUM)
       PHI=TWOPI*R3
# INITIAL PHOTON DIRECTION  DRXINIT, DRYINIT AND DRZINIT
       CALL DRCOS(DRXINIT,DRYINIT,DRZINIT,THET,PHI,DRXX,DRYY,DRZZ)
       DRXE(NVAC,1)=DRXX
       DRYE(NVAC,1)=DRYY
       DRZE(NVAC,1)=DRZZ
       GO TO 4
      # endif
      if(ICON == 2):
 :
# BETA DECAY
       IONSUM(NVAC)=1
       ifLSUM(NVAC):
=0
       ISHELL=0
       ELECN=ELECEN
       ESTORE(NVAC,1)=ELECN
       if(NDVEC == 2):
 :
# RANDOM EMISSION DIRECTION
        R3=DRAND48(RDUM)
        THET=numpy.arccos(1.0-2.0*R3)
       else if(NDVEC == 0) :
# RANDOM EMISSION IN THE X-Y PLANE
        THET=API/2.0
       else if(NDVEC == 1) :
# EMISSION ALONG Z AXIS
        THET=0.00
       else if(NDVEC == -1) :
# EMISSION ALONG -Z AXIS
        THET=numpy.arccos(-1.00)
       else:
        WRITE(6,950)
  950   print(' ERROR NDVEC NOT CORRECT def STOPPED')
        STOP
       # endif
       R3=DRAND48(RDUM)
       PHI=TWOPI*R3
       DRXE(NVAC,1)=DSIN(THET)*DCOS(PHI)
       DRYE(NVAC,1)=DSIN(THET)*DSIN(PHI)
       DRZE(NVAC,1)=DCOS(THET)
      # endif
# DOUBLE BETA DECAY
      if(ICON == 3):
 :
       IONSUM(NVAC)=1
       ifLSUM(NVAC):
=0
       ISHELL=0
       ELECN=ELECEN
       ESTORE(NVAC,1)=ELECN
       ESECOND=ELECN
       if(NDVEC == 2):
 :
# RANDOM EMISSION DIRECTION
        R3=DRAND48(RDUM)
        THET=numpy.arccos(1.0-2.0*R3)
       else if(NDVEC == 0) :
# RANDOM EMISSION IN THE X-Y PLANE
        THET=API/2.0
       else if(NDVEC == 1) :
# EMISSION ALONG Z AXIS
        THET=0.00
       else if(NDVEC == -1) :
# EMISSION ALONG -Z AXIS
        THET=numpy.arccos(-1.00)
       else:
        WRITE(6,950)
        STOP
       # endif
       R3=DRAND48(RDUM)
       PHI=TWOPI*R3
       DRXE(NVAC,1)=DSIN(THET)*DCOS(PHI)
       DRYE(NVAC,1)=DSIN(THET)*DSIN(PHI)
       DRZE(NVAC,1)=DCOS(THET)
      # endif
#
      THESEC=API-THET
      if(PHI < API):
 : 
       PHISEC=API+PHI
      else:
       PHISEC=PHI-API
      # endif
      GO TO 4
   66 IONSUM(NVAC)=IONSUM(NVAC)+1
      ESTORE(NVAC,IONSUM(NVAC))=ESECOND
      DRXE(NVAC,IONSUM(NVAC))=DSIN(THESEC)*DCOS(PHISEC)
      DRYE(NVAC,IONSUM(NVAC))=DSIN(THESEC)*DSIN(PHISEC)
      DRZE(NVAC,IONSUM(NVAC))=DCOS(THESEC)
      ELECN=ESECOND
      ISECOND=2
      ISHELL=0
      ifIRST=0:
# LOOP AROUND CASCADE
    4 CONTINUE
# CHECK FOR ELECTRON SHAKEOFF
      ifIRST=ifIRST+1:
      if(ifIRST > 1):
 ELECN=ESTORE(NVAC,IONSUM(NVAC))
      CALL SHAKE(ISHELL,ELECN,KGAS,LGAS,ESHK,ICON,ifIRST,JVAC)
#  CALCULATE ENERGY OF ELECTRON
      if(JVAC == 0):
 GO TO 2
      if(ifIRST == 1):
 :
# INITIAL ELECTRON + SHAKEOFF
       if(ICON == 1):
 ELECN=ELECN-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
       if(ICON == 2):
 ELECN=ELECN-ESHK-ELEV[JVAC,(IZ[KGAS,LGAS]+1)]
       if(ICON == 2 or ICON == 3):
 ISHELL=JVAC
       if(ICON == 3):
 ELECN=ELECN-ESHK-ELEV[JVAC,(IZ[KGAS,LGAS]+2)]
# PRIMARY ELECTRON
       ESTORE(NVAC,IONSUM(NVAC))=ELECN
      # endif
      if(ICON == 1 and ifIRST != 1):
 :
       ESTORE(NVAC,IONSUM(NVAC))=ESTORE(NVAC,IONSUM(NVAC))-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      # endif
      IONSUM(NVAC)=IONSUM(NVAC)+1
# MAXIMUM ION CHARGE STATE =28
      if(IONSUM(NVAC):
 > 28) :
       WRITE(6,99) IONSUM(NVAC) 
   99  print(' WARNING ION CHARGE LIMITED TO 28+ IN THIS VERSION') 
       STOP
      # endif
# SHAKE ELECTRON
      ESTORE(NVAC,IONSUM(NVAC))=ESHK
      if(ICON == 1):
 ELEFT=ELEFT-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      if(ICON == 2):
 ELEFT=ELEFT-ESHK-ELEV[JVAC,(IZ[KGAS,LGAS]+1)]
      if(ICON == 3):
 ELEFT=ELEFT-ESHK-ELEV[JVAC,(IZ[KGAS,LGAS]+2)]
      if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
      R3=DRAND48(RDUM)
      THET=numpy.arccos(1.0-2.0*R3)
      R3=DRAND48(RDUM)
      PHI=TWOPI*R3
      DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
      DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
      DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
# RETURN IF NO SHAKE OFF WITH BETA DECAY
    2 if(ICON == 2 and IONSUM(NVAC) == 1) RETURN
# GO INTO SECOND BETA LOOP
      if(ICON == 3 and IONSUM(NVAC):
 == 1 and ISECOND == 1) GO TO 66
      if(ICON == 3 and ifIRST == 1 and JVAC == 0 and ISECOND == 2):
RETURN
#
      CALL UPDATE(KGAS,LGAS,ISHELL)
#  CHOOSE FLUORESCENCE OR AUGER TRANSITION
      TSUM=0.0
      DO 10 I=1,17
      TSUM=TSUM+RADR(KGAS,LGAS,ISHELL,I)
      DO 10 J=1,17
      TSUM=TSUM+AUGR(KGAS,LGAS,ISHELL,I,J)
   10 CONTINUE
# NO MORE TRANSITIONS POSSIBLE
      if(TSUM == 0.0 and ICON == 3 and ISECOND == 1):
 GO TO 66
      if(TSUM == 0.0):
 RETURN  
# NORMALISE TO 1.0
      DO 11 I=1,17
      RADR(KGAS,LGAS,ISHELL,I)=RADR(KGAS,LGAS,ISHELL,I)/TSUM
      DO 11 J=1,17
      AUGR(KGAS,LGAS,ISHELL,I,J)=AUGR(KGAS,LGAS,ISHELL,I,J)/TSUM
   11 CONTINUE
# CREATE CUMULATIVE SUM ARRAY
      TEMP[1]=RADR(KGAS,LGAS,ISHELL,1)
      DO 12 I=2,17
      TEMP[I]=RADR(KGAS,LGAS,ISHELL,I)+TEMP(I-1)
   12 CONTINUE
      TEMP1[1]=AUGR(KGAS,LGAS,ISHELL,1,1)
      DO 13 I=2,17
      TEMP1[I]=AUGR(KGAS,LGAS,ISHELL,I,1)+TEMP1(I-1)
   13 CONTINUE
      DO 14 J=1,16
      DO 14 I=1,17
      TEMP1(I+(J*17))=AUGR(KGAS,LGAS,ISHELL,I,(J+1))+TEMP1(I+(J*17)-1)
   14 CONTINUE
# FIND FLUORESCENCE OR AUGER TRANSITION
   15 R1=DRAND48(RDUM)
      DO 16 I=1,17
      if(R1 < TEMP[I]:
) :
# STORE PHOTON ENERGY AND ANGLE : UPDATE NOCC
       ifLSUM(NVAC):
=ifLSUM(NVAC)+1
       EPHOTON(NVAC,ifLSUM(NVAC))=ELEV[ISHELL,IZ[KGAS,LGAS]]-ELEV[I,IZ[KGAS,LGAS]]
       if(ICON == 2):
  EPHOTON(NVAC,ifLSUM(NVAC))=ELEV[ISHELL,IZ[KGAS,LGAS]+1]-ELEV[I,IZ[KGAS,LGAS]+1]
       if(ICON == 3):
 EPHOTON(NVAC,ifLSUM(NVAC))=ELEV[ISHELL,IZ[KGAS,LGAS]+2]-ELEV[I,IZ[KGAS,LGAS]+2]
      if(EPHOTON(NVAC,ifLSUM(NVAC):
) < 0.0) WRITE(6,545) EPHOTON(NVAC,ifLSUM(NVAC)),ifLSUM(NVAC),NVAC
 545  print(' PHOTON ENERGY=','%.3f' %,'NVAC=',I2,' ifLSUM=',I6,' IN CALC')
       ELEFT=ELEFT-abs(EPHOTON(NVAC,ifLSUM(NVAC)))
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R3=DRAND48(RDUM)
       PHI=TWOPI*R3
# CALC DIRECTION COSINES OF FLUORESCENCE
       DRX(NVAC,ifLSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRY(NVAC,ifLSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZ[NVAC,ifLSUM(NVAC)]=DCOS(THET)
#   
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
#  SECOND ELECTRON IN DOUBLE BETA DECAY
        if(ICON == 3 and ISECOND == 1):
 GO TO 66
        RETURN    
       # endif
       GO TO 2  
      # endif 
   16 CONTINUE
  116 CONTINUE
      R2=R1-TEMP(17)
      DO 27 J=1,17
      DO 27 I=1,17
      if(R2 < TEMP1(I+((J-1):
*17))) :
# AUGER OR COSTER KRONIG  
# STORE EJECTED ELECTRON AND UPDATE NOCC
       ETEMP=ELEV[ISHELL,IZ[KGAS,LGAS]]-(ELEV[I,IZ[KGAS,LGAS]]+ELEV[I,IZ[KGAS,LGAS]+1])*0.5-(ELEV[J,IZ[KGAS,LGAS]]+ELEV[J,IZ[KGAS,LGAS]+1])*0.5
       if(ICON == 2):
 ETEMP=ELEV[ISHELL,IZ[KGAS,LGAS]+1]-(ELEV[I,IZ[KGAS,LGAS]+1]+ELEV[I,IZ[KGAS,LGAS]+2])*0.5-(ELEV[J,IZ[KGAS,LGAS]+1]+ELEV[J,IZ[KGAS,LGAS]+2])*0.5
       if(ICON == 3):
 ETEMP=ELEV[ISHELL,IZ[KGAS,LGAS]+2]-(ELEV[I,IZ[KGAS,LGAS]+2]+ELEV[I,IZ[KGAS,LGAS]+3])*0.5-(ELEV[J,IZ[KGAS,LGAS]+2]+ELEV[J,IZ[KGAS,LGAS]+3])*0.5
       if(ETEMP < 0.0):
 :
# DO NOT ALLOW NEGATIVE ENERGY TRANSITIONS
  117   R1=DRAND48(RDUM)
        if(R1 < TEMP(17):
) GO TO 117
        GO TO 116
       # endif
       IONSUM(NVAC)=IONSUM(NVAC)+1
       if(IONSUM(NVAC):
 > 28) : 
        WRITE(6,887) IONSUM(NVAC)
  887   print(' IONSUM LIMITED TO 28 IN THIS VERSION IONSUM=',I3,' IN CALC')
        STOP
       # endif
       ESTORE(NVAC,IONSUM(NVAC))=ETEMP
       ELEFT=ELEFT-ETEMP
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R3=DRAND48(RDUM)
       PHI=TWOPI*R3
       DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
       NOCC(KGAS,LGAS,J)=NOCC(KGAS,LGAS,J)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
#  SECOND ELECTRON IN DOUBLE BETA DECAY
        if(ICON == 3 and ISECOND == 1):
 GO TO 66
        RETURN
       # endif
       GO TO 4 
      # endif
   27 CONTINUE
      WRITE(6,88) 
   88 print(' ERROR IN CASCADE 0') 
      STOP 
      # end
      def CALC1(IPN,NVAC,KGAS,LGAS,ELECEN,ISHELL,L1):
      IMPLICIT #real*8(A-H,O-Z)
      IMPLICIT #integer*8(I-N)
      CHARACTER*6 SCR(17),SCR1(17)
      COMMON/GENCAS/ELEV[17,79],NSDEG(17),AA[17],BB[17],SCR,SCR1
      COMMON/MIXC/PRSH(6,3,17,17),ESH(6,3,17),AUG(6,3,17,17,17),RAD[6,3,17,17],PRSHBT(6,3,17),IZ[6,3],INIOCC(6,3,17),ISHLMX(6,3),AMZ[6,3]
      COMMON/UPD/NOCC(6,3,17),AUGR(6,3,17,17,17),RADR(6,3,17,17)
      COMMON/CALCAS/IONSUM0(10),ifLSUM0(10),ESTORE0(10,28),EPHOTON0(10,28),DRXE0(10,28),DRYE0(10,28),DRZE0(10,28),DRX0(10,28),DRY0(10,28),DRZ0(10,28)
      COMMON/CALCAS1/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      DIMENSION TEMP(17),TEMP1(289)
#
# CALCULATE CASCADE IN GAS KGAS AND MOLECULAR COMPONENT LGAS 
# WITH INTIAL ENERGY DEPOSIT ELECEN AND SHELL VACANCY CREATED AT ISHELL
#
       ISTART=IONSUM(NVAC)
       ISTARTF=ifLSUM(NVAC)
      API=numpy.arccos(-1.00)
      TWOPI=2.00*API
  100 ELEFT=ELECEN
      INIT=1
# SET STARTING ARRAY NOCC EQUAL TO INIOCC
      DO 1 I=1,17
      NOCC(KGAS,LGAS,I)=INIOCC(KGAS,LGAS,I)
    1 CONTINUE
      IONSUM(NVAC)=ISTART+1
      ifLSUM(NVAC):
=ISTARTF
# STORE PHOTOELECTRON ENERGY AND ANGLE
      ESTORE(NVAC,IONSUM(NVAC))=ELECEN-ELEV[ISHELL,IZ[KGAS,LGAS]]
      ELECN=ESTORE(NVAC,IONSUM(NVAC))
      ELEFT=ELEFT-ELECN
      NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)-1  
# USE PHOTELECTRON ANGULAR DISTRIBUTION
      APE=AA[ISHELL]
      BPE=BB[ISHELL]
      CALL ANGGEN(APE,BPE,THET)
      if(THET < 0.0):
 THET=THET+API
      R3=DRAND48(RDUM)
      PHI=TWOPI*R3
      CALL DRCOS(DRX0(NVAC,L1),DRY0(NVAC,L1),DRZ0(NVAC,L1),THET,PHI,DRXX,DRYY,DRZZ)
      DRXE(NVAC,IONSUM(NVAC))=DRXX
      DRYE(NVAC,IONSUM(NVAC))=DRYY
      DRZE(NVAC,IONSUM(NVAC))=DRZZ
# LOOP AROUND CASCADE
    4 CONTINUE
# CHECK FOR ELECTRON SHAKEOFF
      IDUM=1
      if(INIT > 1):
 ELECN=ESTORE(NVAC,IONSUM(NVAC))
      INSUM=IONSUM(NVAC)
      CALL SHAKE(ISHELL,ELECN,KGAS,LGAS,ESHK,IDUM,INSUM,JVAC)
#  CALCULATE ENERGY OF ELECTRON
      if(JVAC == 0):
 GO TO 2
#  ELECTRON + SHAKEOFF
      ELECN=ELECN-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      ESTORE(NVAC,IONSUM(NVAC))=ELECN
      IONSUM(NVAC)=IONSUM(NVAC)+1
# MAXIMUM ION CHARGE STATE =28
      if(IONSUM(NVAC):
 > 28) : 
       WRITE(6,99) IONSUM(NVAC)  
  99   print(' 1ST GEN LIMITED TO 28 IN THIS VERSION IONSUM=',I3)  
       STOP        
      # endif 
      ESTORE(NVAC,IONSUM(NVAC))=ESHK 
      ELEFT=ELEFT-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION 
      R3=DRAND48(RDUM)
      THET=numpy.arccos(1.0-2.0*R3)
      R4=DRAND48(RDUM)
      PHI=TWOPI*R4
      DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
      DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
      DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
    2 CALL UPDATE(KGAS,LGAS,ISHELL)
      INIT=2
# CHOOSE FLUORESCENCE OR AUGER TRANSITION
      TSUM=0.0
      DO 10 I=1,17
      TSUM=TSUM+RADR(KGAS,LGAS,ISHELL,I)
      DO 10 J=1,17
      TSUM=TSUM+AUGR(KGAS,LGAS,ISHELL,I,J)
   10 CONTINUE
# NO MORE TRANSITIONS POSSIBLE
      if(TSUM == 0.0):
 RETURN  
# NORMALISE TO 1.0
      DO 11 I=1,17
      RADR(KGAS,LGAS,ISHELL,I)=RADR(KGAS,LGAS,ISHELL,I)/TSUM
      DO 11 J=1,17
      AUGR(KGAS,LGAS,ISHELL,I,J)=AUGR(KGAS,LGAS,ISHELL,I,J)/TSUM
   11 CONTINUE
# CREATE CUMULATIVE SUM ARRAY
      TEMP[1]=RADR(KGAS,LGAS,ISHELL,1)
      DO 12 I=2,17
      TEMP[I]=RADR(KGAS,LGAS,ISHELL,I)+TEMP(I-1)
   12 CONTINUE
      TEMP1[1]=AUGR(KGAS,LGAS,ISHELL,1,1)
      DO 13 I=2,17
      TEMP1[I]=AUGR(KGAS,LGAS,ISHELL,I,1)+TEMP1(I-1)
   13 CONTINUE
      DO 14 J=1,16
      DO 14 I=1,17
      TEMP1(I+(J*17))=AUGR(KGAS,LGAS,ISHELL,I,(J+1))+TEMP1(I+(J*17)-1)
   14 CONTINUE
# FIND FLUORESCENCE OR AUGER TRANSITION
      R1=DRAND48(RDUM)
      DO 16 I=1,17
      if(R1 < TEMP[I]:
) :
# STORE PHOTON ENERGY AND ANGLE : UPDATE NOCC
       ifLSUM(NVAC):
=ifLSUM(NVAC)+1
       EPHOTON(NVAC,ifLSUM(NVAC))=ELEV[ISHELL,IZ[KGAS,LGAS]]-ELEV[I,IZ[KGAS,LGAS]]
       ELEFT=ELEFT-EPHOTON(NVAC,ifLSUM(NVAC))
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R4=DRAND48(RDUM)       
       PHI=TWOPI*R4
       DRX(NVAC,ifLSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRY(NVAC,ifLSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZ[NVAC,ifLSUM(NVAC)]=DCOS(THET)
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
        RETURN    
       # endif
       GO TO 2  
      # endif 
   16 CONTINUE
  116 CONTINUE
      R2=R1-TEMP(17)
      DO 17 J=1,17
      DO 17 I=1,17
      if(R2 < TEMP1(I+((J-1):
*17))) :
# AUGER OR COSTER KRONIG  
# STORE EJECTED ELECTRON AND UPDATE NOCC
       ETEMP=ELEV[ISHELL,IZ[KGAS,LGAS]]-(ELEV[I,IZ[KGAS,LGAS]]+ELEV[I,IZ[KGAS,LGAS]+1])*0.5-(ELEV[J,IZ[KGAS,LGAS]]+ELEV[J,IZ[KGAS,LGAS]+1])*0.5
       if(ETEMP < 0.0):
 :
# DO NOT ALLOW NEGATIVE ENERGY TRANSITIONS
  117   R1=DRAND48(RDUM)
        if(R1 < TEMP(17):
) GO TO 117
        GO TO 116
       # endif
       IONSUM(NVAC)=IONSUM(NVAC)+1
       if(IONSUM(NVAC):
 > 28) :
        WRITE(6,99) IONSUM(NVAC)
        STOP
       # endif
       ESTORE(NVAC,IONSUM(NVAC))=ETEMP
       ELEFT=ELEFT-ETEMP
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R4=DRAND48(RDUM)
       PHI=TWOPI*R4
       DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
       NOCC(KGAS,LGAS,J)=NOCC(KGAS,LGAS,J)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
        RETURN
       # endif
       GO TO 4 
      # endif
   17 CONTINUE
      WRITE(6,88) 
   88 print(' ERROR IN CASCADE 1') 
      STOP 
      # end
      def CALC2(IPN,NVAC,KGAS,LGAS,ELECEN,ISHELL,L1):
      IMPLICIT #real*8(A-H,O-Z)
      IMPLICIT #integer*8(I-N)
      CHARACTER*6 SCR(17),SCR1(17)
      COMMON/GENCAS/ELEV[17,79],NSDEG(17),AA[17],BB[17],SCR,SCR1
      COMMON/MIXC/PRSH(6,3,17,17),ESH(6,3,17),AUG(6,3,17,17,17),RAD[6,3,17,17],PRSHBT(6,3,17),IZ[6,3],INIOCC(6,3,17),ISHLMX(6,3),AMZ[6,3]
      COMMON/UPD/NOCC(6,3,17),AUGR(6,3,17,17,17),RADR(6,3,17,17)
      COMMON/CALCAS1/IONSUM0(10),ifLSUM0(10),ESTORE0(10,28),EPHOTON0(10,28),DRXE0(10,28),DRYE0(10,28),DRZE0(10,28),DRX0(10,28),DRY0(10,28),DRZ0(10,28)
      COMMON/CALCAS2/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      DIMENSION TEMP(17),TEMP1(289)
#
# CALCULATE CASCADE IN GAS KGAS AND MOLECULAR COMPONENT LGAS
# WITH INTIAL ENERGY DEPOSIT ELECEN AND SHELL VACANCY CREATED AT ISHELL
#
      ISTART=IONSUM(NVAC)
      ISTARTF=ifLSUM(NVAC)
      API=numpy.arccos(-1.00)
      TWOPI=2.00*API
  100 ELEFT=ELECEN
      INIT=1
# SET STARTING ARRAY NOCC EQUAL TO INIOCC
      DO 1 I=1,17
      NOCC(KGAS,LGAS,I)=INIOCC(KGAS,LGAS,I)
    1 CONTINUE
      IONSUM(NVAC)=ISTART+1
      ifLSUM(NVAC):
=ISTARTF
# STORE INITIAL PHOTELECTRON AND ANGLE
      ESTORE(NVAC,IONSUM(NVAC))=ELECEN-ELEV[ISHELL,IZ[KGAS,LGAS]]
      ELECN=ESTORE(NVAC,IONSUM(NVAC))
      ELEFT=ELEFT-ELECN
      NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)-1  
# USE PHOTOELECTRON ANGULAR DISTRIBUTION
      APE=AA[ISHELL]
      BPE=BB[ISHELL]
      CALL ANGGEN(APE,BPE,THET)
      if(THET < 0.0):
 THET=THET+API
      R3=DRAND48(RDUM)
      PHI=TWOPI*R3
      CALL DRCOS(DRX0(NVAC,L1),DRY0(NVAC,L1),DRZ0(NVAC,L1),THET,PHI,DRXX,DRYY,DRZZ)
      DRXE(NVAC,IONSUM(NVAC))=DRXX
      DRYE(NVAC,IONSUM(NVAC))=DRYY
      DRZE(NVAC,IONSUM(NVAC))=DRZZ
# LOOP AROUND CASCADE
    4 CONTINUE
# CHECK FOR ELECTRON SHAKEOFF
      IDUM=1
      if(INIT > 1):
 ELECN=ESTORE(NVAC,IONSUM(NVAC))
      INSUM=IONSUM(NVAC)
      CALL SHAKE(ISHELL,ELECN,KGAS,LGAS,ESHK,IDUM,INSUM,JVAC)
#  CALCULATE ENERGY OF ELECTRON
      if(JVAC == 0):
 GO TO 2
#  ELECTRON + SHAKEOFF
      ELECN=ELECN-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      ESTORE(NVAC,IONSUM(NVAC))=ELECN
      IONSUM(NVAC)=IONSUM(NVAC)+1
# MAXIMUM ION CHARGE STATE =28
      if(IONSUM(NVAC):
 > 28) :
       WRITE(6,99) IONSUM(NVAC)
   99  print(' 2ND GEN IONS LIMITED TO 28 IN THIS VERSION IONSUM=',I3) 
       STOP
      # endif
      ESTORE(NVAC,IONSUM(NVAC))=ESHK
      ELEFT=ELEFT-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
      R3=DRAND48(RDUM)
      THET=numpy.arccos(1.0-2.0*R3)
      R4=DRAND48(RDUM)
      PHI=TWOPI*R4
      DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
      DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
      DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
    2 CALL UPDATE(KGAS,LGAS,ISHELL)
      INIT=2
# CHOOSE FLUORESCENCE OR AUGER TRANSITION
      TSUM=0.0
      DO 10 I=1,17
      TSUM=TSUM+RADR(KGAS,LGAS,ISHELL,I)
      DO 10 J=1,17
      TSUM=TSUM+AUGR(KGAS,LGAS,ISHELL,I,J)
   10 CONTINUE
# NO MORE TRANSITIONS POSSIBLE
      if(TSUM == 0.0):
 RETURN  
# NORMALISE TO 1.0
      DO 11 I=1,17
      RADR(KGAS,LGAS,ISHELL,I)=RADR(KGAS,LGAS,ISHELL,I)/TSUM
      DO 11 J=1,17
      AUGR(KGAS,LGAS,ISHELL,I,J)=AUGR(KGAS,LGAS,ISHELL,I,J)/TSUM
   11 CONTINUE
# CREATE CUMULATIVE SUM ARRAY
      TEMP[1]=RADR(KGAS,LGAS,ISHELL,1)
      DO 12 I=2,17
      TEMP[I]=RADR(KGAS,LGAS,ISHELL,I)+TEMP(I-1)
   12 CONTINUE
      TEMP1[1]=AUGR(KGAS,LGAS,ISHELL,1,1)
      DO 13 I=2,17
      TEMP1[I]=AUGR(KGAS,LGAS,ISHELL,I,1)+TEMP1(I-1)
   13 CONTINUE
      DO 14 J=1,16
      DO 14 I=1,17
      TEMP1(I+(J*17))=AUGR(KGAS,LGAS,ISHELL,I,(J+1))+TEMP1(I+(J*17)-1)
   14 CONTINUE
# FIND FLUORESCENCE OR AUGER TRANSITION
      R1=DRAND48(RDUM)
      DO 16 I=1,17
      if(R1 < TEMP[I]:
) :
# STORE PHOTON ENERGY AND UPDATE NOCC
       ifLSUM(NVAC):
=ifLSUM(NVAC)+1
       EPHOTON(NVAC,ifLSUM(NVAC))=ELEV[ISHELL,IZ[KGAS,LGAS]]-ELEV[I,IZ[KGAS,LGAS]]
       if(EPHOTON(NVAC,ifLSUM(NVAC):
) < 0.0) WRITE(6,554) EPHOTON(NVAC,ifLSUM(NVAC)),NVAC
  554 print(' EPHOTON=','%.3f' %,' NVAC=',I2,' IN CALC2')
       ELEFT=ELEFT-EPHOTON(NVAC,ifLSUM(NVAC))
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R4=DRAND48(RDUM)
       PHI=TWOPI*R4
       DRX(NVAC,ifLSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRY(NVAC,ifLSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZ[NVAC,ifLSUM(NVAC)]=DCOS(THET)
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
        RETURN    
       # endif
       GO TO 2  
      # endif 
   16 CONTINUE
  116 CONTINUE
      R2=R1-TEMP(17)
      DO 17 J=1,17
      DO 17 I=1,17
      if(R2 < TEMP1(I+((J-1):
*17))) :
# AUGER OR COSTER KRONIG  
# STORE EJECTED ELECTRON AND UPDATE NOCC
       ETEMP=ELEV[ISHELL,IZ[KGAS,LGAS]]-(ELEV[I,IZ[KGAS,LGAS]]+ELEV[I,IZ[KGAS,LGAS]+1])*0.5-(ELEV[J,IZ[KGAS,LGAS]]+ELEV[J,IZ[KGAS,LGAS]+1])*0.5
       if(ETEMP < 0.0):
 :
# DO NOT ALLOW NEGATIVE ENERGY TRANSITIONS
  117   R1=DRAND48(RDUM)
        if(R1 < TEMP(17):
) GO TO 117
        GO TO 116
       # endif
       IONSUM(NVAC)=IONSUM(NVAC)+1
       if(IONSUM(NVAC):
 > 28) :
        WRITE(6,99) IONSUM(NVAC)
        STOP
       # endif
       ESTORE(NVAC,IONSUM(NVAC))=ETEMP
       ELEFT=ELEFT-ETEMP
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R4=DRAND48(RDUM)
       PHI=TWOPI*R4
       DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
       NOCC(KGAS,LGAS,J)=NOCC(KGAS,LGAS,J)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
        RETURN
       # endif
       GO TO 4 
      # endif
   17 CONTINUE
      WRITE(6,88) 
   88 print(' ERROR IN CASCADE 2') 
      STOP 
      # end
      def CALC3(NVAC,KGAS,LGAS,ELECEN,ISHELL,L1):
      IMPLICIT #real*8(A-H,O-Z)
      IMPLICIT #integer*8(I-N)
      CHARACTER*6 SCR(17),SCR1(17)
      COMMON/GENCAS/ELEV[17,79],NSDEG(17),AA[17],BB[17],SCR,SCR1
      COMMON/MIXC/PRSH(6,3,17,17),ESH(6,3,17),AUG(6,3,17,17,17),RAD[6,3,17,17],PRSHBT(6,3,17),IZ[6,3],INIOCC(6,3,17),ISHLMX(6,3),AMZ[6,3]
      COMMON/UPD/NOCC(6,3,17),AUGR(6,3,17,17,17),RADR(6,3,17,17)
      COMMON/CALCAS2/IONSUM0(10),ifLSUM0(10),ESTORE0(10,28),EPHOTON0(10,28),DRXE0(10,28),DRYE0(10,28),DRZE0(10,28),DRX0(10,28),DRY0(10,28),DRZ0(10,28)
      COMMON/CALCAS3/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      DIMENSION TEMP(17),TEMP1(289)
#
# CALCULATE CASCADE IN GAS KGAS AND MOLECULAR COMPONENT LGAS
# WITH INTIAL ENERGY DEPOSIT ELECEN AND SHELL VACANCY CREATED AT ISHELL
#
      ISTART=IONSUM(NVAC)
      ISTARTF=ifLSUM(NVAC)
      API=numpy.arccos(-1.00)
      TWOPI=2.00*API
  100 ELEFT=ELECEN
      INIT=1
# SET STARTING ARRAY NOCC EQUAL TO INIOCC
      DO 1 I=1,17
      NOCC(KGAS,LGAS,I)=INIOCC(KGAS,LGAS,I)
    1 CONTINUE
      IONSUM(NVAC)=ISTART+1
      ifLSUM(NVAC):
=ISTARTF
# STORE PHOTOELECTRON ENERGY AND ANGLE
      ESTORE(NVAC,IONSUM(NVAC))=ELECEN-ELEV[ISHELL,IZ[KGAS,LGAS]]
      ELECN=ESTORE(NVAC,IONSUM(NVAC))
      ELEFT=ELEFT-ELECN
      NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)-1  
# USE PHOTOELECTRON ANGULAR DISTRIBUTION
      APE=AA[ISHELL]
      BPE=BB[ISHELL]
      CALL ANGGEN(APE,BPE,THET)
      if(THET < 0.0):
 THET=THET+API
      R3=DRAND48(RDUM)
      PHI=TWOPI*R3
      CALL DRCOS(DRX0(NVAC,L1),DRY0(NVAC,L1),DRZ0(NVAC,L1),THET,PHI,DRXX,DRYY,DRZZ)
      DRXE(NVAC,IONSUM(NVAC))=DRXX
      DRYE(NVAC,IONSUM(NVAC))=DRYY
      DRZE(NVAC,IONSUM(NVAC))=DRZZ
# LOOP AROUND CASCADE
    4 CONTINUE
# CHECK FOR ELECTRON SHAKEOFF
      IDUM=1
      if(INIT > 1):
 ELECN=ESTORE(NVAC,IONSUM(NVAC))
      INSUM=IONSUM(NVAC)
      CALL SHAKE(ISHELL,ELECN,KGAS,LGAS,ESHK,IDUM,INSUM,JVAC)
#  CALCULATE ENERGY OF ELECTRON
      if(JVAC == 0):
 GO TO 2
#  ELECTRON + SHAKEOFF
      ELECN=ELECN-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      ESTORE(NVAC,IONSUM(NVAC))=ELECN
      IONSUM(NVAC)=IONSUM(NVAC)+1
# MAXIMUM ION CHARGE STATE =28
      if(IONSUM(NVAC):
 > 28) :
       WRITE(6,99) IONSUM(NVAC) 
   99  print(' 3RD GEN ION CHARGE LIMITED TO 28  IONSUM=',I3) 
       STOP
      # endif
      ESTORE(NVAC,IONSUM(NVAC))=ESHK
      ELEFT=ELEFT-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION ANGLE
      R3=DRAND48(RDUM)
      THET=numpy.arccos(1.0-2.0*R3)
      R4=DRAND48(RDUM)
      PHI=TWOPI*R4
      DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
      DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
      DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
    2 CALL UPDATE(KGAS,LGAS,ISHELL)
      INIT=2
# CHOOSE FLUORESCENCE OR AUGER TRANSITION
      TSUM=0.0
      DO 10 I=1,17
      TSUM=TSUM+RADR(KGAS,LGAS,ISHELL,I)
      DO 10 J=1,17
      TSUM=TSUM+AUGR(KGAS,LGAS,ISHELL,I,J)
   10 CONTINUE
# NO MORE TRANSITIONS POSSIBLE
      if(TSUM == 0.0):
 RETURN  
# NORMALISE TO 1.0
      DO 11 I=1,17
      RADR(KGAS,LGAS,ISHELL,I)=RADR(KGAS,LGAS,ISHELL,I)/TSUM
      DO 11 J=1,17
      AUGR(KGAS,LGAS,ISHELL,I,J)=AUGR(KGAS,LGAS,ISHELL,I,J)/TSUM
   11 CONTINUE
# CREATE CUMULATIVE SUM ARRAY
      TEMP[1]=RADR(KGAS,LGAS,ISHELL,1)
      DO 12 I=2,17
      TEMP[I]=RADR(KGAS,LGAS,ISHELL,I)+TEMP(I-1)
   12 CONTINUE
      TEMP1[1]=AUGR(KGAS,LGAS,ISHELL,1,1)
      DO 13 I=2,17
      TEMP1[I]=AUGR(KGAS,LGAS,ISHELL,I,1)+TEMP1(I-1)
   13 CONTINUE
      DO 14 J=1,16
      DO 14 I=1,17
      TEMP1(I+(J*17))=AUGR(KGAS,LGAS,ISHELL,I,(J+1))+TEMP1(I+(J*17)-1)
   14 CONTINUE
# FIND FLUORESCENCE OR AUGER TRANSITION
      R1=DRAND48(RDUM)
      DO 16 I=1,17
      if(R1 < TEMP[I]:
) :
# STORE PHOTON ENERGY AND UPDATE NOCC
       ifLSUM(NVAC):
=ifLSUM(NVAC)+1
       EPHOTON(NVAC,ifLSUM(NVAC))=ELEV[ISHELL,IZ[KGAS,LGAS]]-ELEV[I,IZ[KGAS,LGAS]]
       ELEFT=ELEFT-EPHOTON(NVAC,ifLSUM(NVAC))
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R4=DRAND48(RDUM)
       PHI=TWOPI*R4
       DRX(NVAC,ifLSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRY(NVAC,ifLSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZ[NVAC,ifLSUM(NVAC)]=DCOS(THET)
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
        RETURN    
       # endif
       GO TO 2  
      # endif 
   16 CONTINUE
  116 CONTINUE
      R2=R1-TEMP(17)
      DO 17 J=1,17
      DO 17 I=1,17
      if(R2 < TEMP1(I+((J-1):
*17))) :
# AUGER OR COSTER KRONIG  
# STORE EJECTED ELECTRON AND UPDATE NOCC
       ETEMP=ELEV[ISHELL,IZ[KGAS,LGAS]]-(ELEV[I,IZ[KGAS,LGAS]]+ELEV[I,IZ[KGAS,LGAS]+1])*0.5-(ELEV[J,IZ[KGAS,LGAS]]+ELEV[J,IZ[KGAS,LGAS]+1])*0.5
       if(ETEMP < 0.0):
 :
# DO NOT ALLOW NEGATIVE ENERGY TRANSITIONS
  117   R1=DRAND48(RDUM)
        if(R1 < TEMP(17):
) GO TO 117
        GO TO 116
       # endif
       IONSUM(NVAC)=IONSUM(NVAC)+1
       if(IONSUM(NVAC):
 > 28) :
        WRITE(6,99) IONSUM(NVAC)
        STOP
       # endif
       ESTORE(NVAC,IONSUM(NVAC))=ETEMP
       ELEFT=ELEFT-ETEMP
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R4=DRAND48(RDUM)
       PHI=TWOPI*R4
       DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
       NOCC(KGAS,LGAS,J)=NOCC(KGAS,LGAS,J)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
        RETURN
       # endif
       GO TO 4 
      # endif
   17 CONTINUE
      WRITE(6,88) 
   88 print(' ERROR IN CASCADE 3') 
      STOP 
      # end
      def CALC4(NVAC,KGAS,LGAS,ELECEN,ISHELL,L1):
      IMPLICIT #real*8(A-H,O-Z)
      IMPLICIT #integer*8(I-N)
      CHARACTER*6 SCR(17),SCR1(17)
      COMMON/GENCAS/ELEV[17,79],NSDEG(17),AA[17],BB[17],SCR,SCR1
      COMMON/MIXC/PRSH(6,3,17,17),ESH(6,3,17),AUG(6,3,17,17,17),RAD[6,3,17,17],PRSHBT(6,3,17),IZ[6,3],INIOCC(6,3,17),ISHLMX(6,3),AMZ[6,3]
      COMMON/UPD/NOCC(6,3,17),AUGR(6,3,17,17,17),RADR(6,3,17,17)
      COMMON/CALCAS3/IONSUM0(10),ifLSUM0(10),ESTORE0(10,28),EPHOTON0(10,28),DRXE0(10,28),DRYE0(10,28),DRZE0(10,28),DRX0(10,28),DRY0(10,28),DRZ0(10,28)
      COMMON/CALCAS4/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      DIMENSION TEMP(17),TEMP1(289)
#
# CALCULATE CASCADE IN GAS KGAS AND MOLECULAR COMPONENT LGAS
# WITH INTIAL ENERGY DEPOSIT ELECEN AND SHELL VACANCY CREATED AT ISHELL
#
       ISTART=IONSUM(NVAC)
       ISTARTF=ifLSUM(NVAC)
      API=numpy.arccos(-1.00)
      TWOPI=2.00*API
  100 ELEFT=ELECEN
      INIT=1
# SET STARTING ARRAY NOCC EQUAL TO INIOCC
      DO 1 I=1,17
      NOCC(KGAS,LGAS,I)=INIOCC(KGAS,LGAS,I)
    1 CONTINUE
      IONSUM(NVAC)=ISTART+1
      ifLSUM(NVAC):
=ISTARTF
# STORE PHOTOELECTRON ENERGY AND ANGLE
      ESTORE(NVAC,IONSUM(NVAC))=ELECEN-ELEV[ISHELL,IZ[KGAS,LGAS]]
      ELECN=ESTORE(NVAC,IONSUM(NVAC))
      ELEFT=ELEFT-ELECN
      NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)-1  
# USE PHOTOELECTRON ANGULAR DISTRIBUTION
      APE=AA[ISHELL]
      BPE=BB[ISHELL]
      CALL ANGGEN(APE,BPE,THET)
      if(THET < 0.0):
 THET=THET+API
      R3=DRAND48(RDUM)
      PHI=TWOPI*R3
      CALL DRCOS(DRX0(NVAC,L1),DRY0(NVAC,L1),DRZ0(NVAC,L1),THET,PHI,DRXX,DRYY,DRZZ)
      DRXE(NVAC,IONSUM(NVAC))=DRXX
      DRYE(NVAC,IONSUM(NVAC))=DRYY
      DRZE(NVAC,IONSUM(NVAC))=DRZZ
# LOOP AROUND CASCADE
    4 CONTINUE
# CHECK FOR ELECTRON SHAKEOFF
      IDUM=1
      if(INIT > 1):
 ELECN=ESTORE(NVAC,IONSUM(NVAC))
      INSUM=IONSUM(NVAC)
      CALL SHAKE(ISHELL,ELECN,KGAS,LGAS,ESHK,IDUM,INSUM,JVAC)
#  CALCULATE ENERGY OF ELECTRON
      if(JVAC == 0):
 GO TO 2
#  ELECTRON + SHAKEOFF
      ELECN=ELECN-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      ESTORE(NVAC,IONSUM(NVAC))=ELECN
      IONSUM(NVAC)=IONSUM(NVAC)+1
# MAXIMUM ION CHARGE STATE =28
      if(IONSUM(NVAC):
 > 28) :
       WRITE(6,99) IONSUM(NVAC)
   99  print(' 4TH GEN ION CHARGE LIMITED TO 28 IONSUM=',I3) 
       STOP
      # endif
      ESTORE(NVAC,IONSUM(NVAC))=ESHK
      ELEFT=ELEFT-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION ANGLE
      R3=DRAND48(RDUM)
      THET=numpy.arccos(1.0-2.0*R3)
      R4=DRAND48(RDUM)
      PHI=TWOPI*R4
      DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
      DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
      DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
    2 CALL UPDATE(KGAS,LGAS,ISHELL)
      INIT=2
# CHOOSE FLUORESCENCE OR AUGER TRANSITION
      TSUM=0.0
      DO 10 I=1,17
      TSUM=TSUM+RADR(KGAS,LGAS,ISHELL,I)
      DO 10 J=1,17
      TSUM=TSUM+AUGR(KGAS,LGAS,ISHELL,I,J)
   10 CONTINUE
# NO MORE TRANSITIONS POSSIBLE
      if(TSUM == 0.0):
 RETURN  
# NORMALISE TO 1.0
      DO 11 I=1,17
      RADR(KGAS,LGAS,ISHELL,I)=RADR(KGAS,LGAS,ISHELL,I)/TSUM
      DO 11 J=1,17
      AUGR(KGAS,LGAS,ISHELL,I,J)=AUGR(KGAS,LGAS,ISHELL,I,J)/TSUM
   11 CONTINUE
# CREATE CUMULATIVE SUM ARRAY
      TEMP[1]=RADR(KGAS,LGAS,ISHELL,1)
      DO 12 I=2,17
      TEMP[I]=RADR(KGAS,LGAS,ISHELL,I)+TEMP(I-1)
   12 CONTINUE
      TEMP1[1]=AUGR(KGAS,LGAS,ISHELL,1,1)
      DO 13 I=2,17
      TEMP1[I]=AUGR(KGAS,LGAS,ISHELL,I,1)+TEMP1(I-1)
   13 CONTINUE
      DO 14 J=1,16
      DO 14 I=1,17
      TEMP1(I+(J*17))=AUGR(KGAS,LGAS,ISHELL,I,(J+1))+TEMP1(I+(J*17)-1)
   14 CONTINUE
# FIND FLUORESCENCE OR AUGER TRANSITION
      R1=DRAND48(RDUM)
      DO 16 I=1,17
      if(R1 < TEMP[I]:
) :
# STORE PHOTON ENERGY AND UPDATE NOCC
       ifLSUM(NVAC):
=ifLSUM(NVAC)+1
       EPHOTON(NVAC,ifLSUM(NVAC))=ELEV[ISHELL,IZ[KGAS,LGAS]]-ELEV[I,IZ[KGAS,LGAS]]
       ELEFT=ELEFT-EPHOTON(NVAC,ifLSUM(NVAC))
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R4=DRAND48(RDUM)
       PHI=TWOPI*R4
       DRX(NVAC,ifLSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRY(NVAC,ifLSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZ[NVAC,ifLSUM(NVAC)]=DCOS(THET)
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
        RETURN    
       # endif
       GO TO 2  
      # endif 
   16 CONTINUE
  116 CONTINUE
      R2=R1-TEMP(17)
      DO 17 J=1,17
      DO 17 I=1,17
      if(R2 < TEMP1(I+((J-1):
*17))) :
# AUGER OR COSTER KRONIG  
# STORE EJECTED ELECTRON AND UPDATE NOCC
       ETEMP=ELEV[ISHELL,IZ[KGAS,LGAS]]-(ELEV[I,IZ[KGAS,LGAS]]+ELEV[I,IZ[KGAS,LGAS]+1])*0.5-(ELEV[J,IZ[KGAS,LGAS]]+ELEV[J,IZ[KGAS,LGAS]+1])*0.5
       if(ETEMP < 0.0):
 :
# DO NOT ALLOW NEGATIVE ENERGY TRANSITIONS
  117   R1=DRAND48(RDUM)
        if(R1 < TEMP(17):
) GO TO 117
        GO TO 116
       # endif
       IONSUM(NVAC)=IONSUM(NVAC)+1
       if(IONSUM(NVAC):
 > 28) :
        WRITE(6,99) IONSUM(NVAC)
        STOP
       # endif
       ESTORE(NVAC,IONSUM(NVAC))=ETEMP
       ELEFT=ELEFT-ETEMP
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R4=DRAND48(RDUM)
       PHI=TWOPI*R4
       DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
       NOCC(KGAS,LGAS,J)=NOCC(KGAS,LGAS,J)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
        RETURN
       # endif
       GO TO 4 
      # endif
   17 CONTINUE
      WRITE(6,88) 
   88 print(' ERROR IN CASCADE 4') 
      STOP 
      # end
      def CALC5(NVAC,KGAS,LGAS,ELECEN,ISHELL,L1):
      IMPLICIT #real*8(A-H,O-Z)
      IMPLICIT #integer*8(I-N)
      CHARACTER*6 SCR(17),SCR1(17)
      COMMON/GENCAS/ELEV[17,79],NSDEG(17),AA[17],BB[17],SCR,SCR1
      COMMON/MIXC/PRSH(6,3,17,17),ESH(6,3,17),AUG(6,3,17,17,17),RAD[6,3,17,17],PRSHBT(6,3,17),IZ[6,3],INIOCC(6,3,17),ISHLMX(6,3),AMZ[6,3]
      COMMON/UPD/NOCC(6,3,17),AUGR(6,3,17,17,17),RADR(6,3,17,17)
      COMMON/CALCAS4/IONSUM0(10),ifLSUM0(10),ESTORE0(10,28),EPHOTON0(10,28),DRXE0(10,28),DRYE0(10,28),DRZE0(10,28),DRX0(10,28),DRY0(10,28),DRZ0(10,28)
      COMMON/CALCAS5/IONSUM(10),ifLSUM(10),ESTORE(10,28),EPHOTON(10,28),DRXE(10,28),DRYE(10,28),DRZE(10,28),DRX(10,28),DRY(10,28),DRZ[10,28]
      DIMENSION TEMP(17),TEMP1(289)
#
# CALCULATE CASCADE IN GAS KGAS AND MOLECULAR COMPONENT LGAS
# WITH INTIAL ENERGY DEPOSIT ELECEN AND SHELL VACANCY CREATED AT ISHELL
#
      ISTART=IONSUM(NVAC)
      ISTARTF=ifLSUM(NVAC)
      API=numpy.arccos(-1.00)
      TWOPI=2.00*API
  100 ELEFT=ELECEN
      INIT=1
# SET STARTING ARRAY NOCC EQUAL TO INIOCC
      DO 1 I=1,17
      NOCC(KGAS,LGAS,I)=INIOCC(KGAS,LGAS,I)
    1 CONTINUE
      IONSUM(NVAC)=ISTART+1
      ifLSUM(NVAC):
=ISTARTF
      ESTORE(NVAC,IONSUM(NVAC))=ELECEN-ELEV[ISHELL,IZ[KGAS,LGAS]]
      ELECN=ESTORE(NVAC,IONSUM(NVAC))
      ELEFT=ELEFT-ELECN
      NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)-1  
# USE PHOTOELECTRON ANGULAR DISTRIBUTION
      APE=AA[ISHELL]
      BPE=BB[ISHELL]
      CALL ANGGEN(APE,BPE,THET)
      if(THET < 0.0):
 THET=THET+API
      R3=DRAND48(RDUM)
      PHI=TWOPI*R3
      CALL DRCOS(DRX0(NVAC,L1),DRY0(NVAC,L1),DRZ0(NVAC,L1),THET,PHI,DRXX,DRYY,DRZZ)
      DRXE(NVAC,IONSUM(NVAC))=DRXX
      DRYE(NVAC,IONSUM(NVAC))=DRYY
      DRZE(NVAC,IONSUM(NVAC))=DRZZ
# LOOP AROUND CASCADE
    4 CONTINUE
# CHECK FOR ELECTRON SHAKEOFF
      IDUM=1
      if(INIT > 1):
 ELECN=ESTORE(NVAC,IONSUM(NVAC))
      INSUM=IONSUM(NVAC)
      CALL SHAKE(ISHELL,ELECN,KGAS,LGAS,ESHK,IDUM,INSUM,JVAC)
#  CALCULATE ENERGY OF ELECTRON
      if(JVAC == 0):
 GO TO 2
#  ELECTRON + SHAKEOFF
      ELECN=ELECN-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      ESTORE(NVAC,IONSUM(NVAC))=ELECN
      IONSUM(NVAC)=IONSUM(NVAC)+1
# MAXIMUM ION CHARGE STATE =28
      if(IONSUM(NVAC):
 > 28) :
       WRITE(6,99) IONSUM(NVAC)
   99  print(' 5TH GEN ION CHARGE LIMITED TO 28  IONSUM=',I3)
       STOP 
      # endif
      ESTORE(NVAC,IONSUM(NVAC))=ESHK
      ELEFT=ELEFT-ESHK-ELEV[JVAC,IZ[KGAS,LGAS]]
      if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION ANGLE
      R3=DRAND48(RDUM)
      THET=numpy.arccos(1.0-2.0*R3)
      R4=DRAND48(RDUM)
      PHI=TWOPI*R4
      DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
      DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
      DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
    2 CALL UPDATE(KGAS,LGAS,ISHELL)
      INIT=2
# CHOOSE FLUORESCENCE OR AUGER TRANSITION
      TSUM=0.0
      DO 10 I=1,17
      TSUM=TSUM+RADR(KGAS,LGAS,ISHELL,I)
      DO 10 J=1,17
      TSUM=TSUM+AUGR(KGAS,LGAS,ISHELL,I,J)
   10 CONTINUE
# NO MORE TRANSITIONS POSSIBLE
      if(TSUM == 0.0):
 RETURN  
# NORMALISE TO 1.0
      DO 11 I=1,17
      RADR(KGAS,LGAS,ISHELL,I)=RADR(KGAS,LGAS,ISHELL,I)/TSUM
      DO 11 J=1,17
      AUGR(KGAS,LGAS,ISHELL,I,J)=AUGR(KGAS,LGAS,ISHELL,I,J)/TSUM
   11 CONTINUE
# CREATE CUMULATIVE SUM ARRAY
      TEMP[1]=RADR(KGAS,LGAS,ISHELL,1)
      DO 12 I=2,17
      TEMP[I]=RADR(KGAS,LGAS,ISHELL,I)+TEMP(I-1)
   12 CONTINUE
      TEMP1[1]=AUGR(KGAS,LGAS,ISHELL,1,1)
      DO 13 I=2,17
      TEMP1[I]=AUGR(KGAS,LGAS,ISHELL,I,1)+TEMP1(I-1)
   13 CONTINUE
      DO 14 J=1,16
      DO 14 I=1,17
      TEMP1(I+(J*17))=AUGR(KGAS,LGAS,ISHELL,I,(J+1))+TEMP1(I+(J*17)-1)
   14 CONTINUE
# FIND FLUORESCENCE OR AUGER TRANSITION
      R1=DRAND48(RDUM)
      DO 16 I=1,17
      if(R1 < TEMP[I]:
) :
# STORE PHOTON ENERGY AND UPDATE NOCC
       ifLSUM(NVAC):
=ifLSUM(NVAC)+1
       EPHOTON(NVAC,ifLSUM(NVAC))=ELEV[ISHELL,IZ[KGAS,LGAS]]-ELEV[I,IZ[KGAS,LGAS]]
       ELEFT=ELEFT-EPHOTON(NVAC,ifLSUM(NVAC))
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R4=DRAND48(RDUM)
       PHI=TWOPI*R4
       DRX(NVAC,ifLSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRY(NVAC,ifLSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZ[NVAC,ifLSUM(NVAC)]=DCOS(THET)
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
        RETURN    
       # endif
       GO TO 2  
      # endif 
   16 CONTINUE
  116 CONTINUE
      R2=R1-TEMP(17)
      DO 17 J=1,17
      DO 17 I=1,17
      if(R2 < TEMP1(I+((J-1):
*17))) :
# AUGER OR COSTER KRONIG  
# STORE EJECTED ELECTRON AND UPDATE NOCC
       ETEMP=ELEV[ISHELL,IZ[KGAS,LGAS]]-(ELEV[I,IZ[KGAS,LGAS]]+ELEV[I,IZ[KGAS,LGAS]+1])*0.5-(ELEV[J,IZ[KGAS,LGAS]]+ELEV[J,IZ[KGAS,LGAS]+1])*0.5
       if(ETEMP < 0.0):
 :
# DO NOT ALLOW NEGATIVE ENERGY TRANSITIONS
  117   R1=DRAND48(RDUM)
        if(R1 < TEMP(17):
) GO TO 117
        GO TO 116
       # endif
       IONSUM(NVAC)=IONSUM(NVAC)+1
       if(IONSUM(NVAC):
 > 28) :
        WRITE(6,99) IONSUM(NVAC)
        STOP
       # endif
       ESTORE(NVAC,IONSUM(NVAC))=ETEMP
       ELEFT=ELEFT-ETEMP
       if(ELEFT < 0.0):
 GO TO 100
# RANDOM EMISSION DIRECTION
       R3=DRAND48(RDUM)
       THET=numpy.arccos(1.0-2.0*R3)
       R4=DRAND48(RDUM)
       PHI=TWOPI*R4
       DRXE(NVAC,IONSUM(NVAC))=DSIN(THET)*DCOS(PHI)
       DRYE(NVAC,IONSUM(NVAC))=DSIN(THET)*DSIN(PHI)
       DRZE(NVAC,IONSUM(NVAC))=DCOS(THET)
       NOCC(KGAS,LGAS,ISHELL)=NOCC(KGAS,LGAS,ISHELL)+1
       NOCC(KGAS,LGAS,I)=NOCC(KGAS,LGAS,I)-1
       NOCC(KGAS,LGAS,J)=NOCC(KGAS,LGAS,J)-1
# FIND LOWEST VACANCY
       CALL VACANCY(KGAS,LGAS,ISHELL,ILAST)
       if(ILAST == 1):
 :
# NO MORE TRANSITIONS POSSIBLE
        RETURN
       # endif
       GO TO 4 
      # endif
   17 CONTINUE
      WRITE(6,88) 
   88 print(' ERROR IN CASCADE 5') 
      STOP 
      # end
      def UPDATE(KGAS,LGAS,ISHELL):
      IMPLICIT #real*8(A-H,O-Z)
      IMPLICIT #integer*8(I-N)
      COMMON/MIXC/PRSH(6,3,17,17),ESH(6,3,17),AUG(6,3,17,17,17),RAD[6,3,17,17],PRSHBT(6,3,17),IZ[6,3],INIOCC(6,3,17),ISHLMX(6,3),AMZ[6,3]
      COMMON/UPD/NOCC(6,3,17),AUGR(6,3,17,17,17),RADR(6,3,17,17)
# RENORMALISE AUGER AND RADIATIVE WIDTH FOR ISHELL DUE TO VACANCIES
#
# RENORMALISE RADIATIVE RATES
      DO 1 I=1,17
      RADR(KGAS,LGAS,ISHELL,I)=0.0
      if(I < (ISHELL+1):
) GO TO 1
      if(INIOCC(KGAS,LGAS,I):
 == 0) GO TO 1 
      RADR(KGAS,LGAS,ISHELL,I)=RAD[KGAS,LGAS,ISHELL,I]*float(NOCC(KGAS,LGAS,I)/INIOCC(KGAS,LGAS,I))
    1 CONTINUE  
# RENORMALISE AUGER AND COSTER KRONIG RATES
      DO 2 I=1,17
      DO 2 J=1,17
      AUGR(KGAS,LGAS,ISHELL,I,J)=0.0
      if(I < ISHELL+1):
 GO TO 2
      if(J < ISHELL+1):
 GO TO 2
      if(INIOCC(KGAS,LGAS,I):
 == 0) GO TO 2
      if(INIOCC(KGAS,LGAS,J):
 == 0) GO TO 2
      AUGR(KGAS,LGAS,ISHELL,I,J)=AUG(KGAS,LGAS,ISHELL,I,J)*float(NOCC(KGAS,LGAS,I)*NOCC(KGAS,LGAS,J))/float(INIOCC(KGAS,LGAS,I)*INIOCC(KGAS,LGAS,J))
      if(I == J):
 :
      if((INIOCC(KGAS,LGAS,J):
-1) == 0) GO TO 2
      AUGR(KGAS,LGAS,ISHELL,I,J)=AUG(KGAS,LGAS,ISHELL,I,J)*float(NOCC(KGAS,LGAS,I)*(NOCC(KGAS,LGAS,J)-1))/float(INIOCC(KGAS,LGAS,I)*(INIOCC(KGAS,LGAS,J)-1)) 
      # endif
    2 CONTINUE 
      RETURN
      # end
      def SHAKE(ISHELL,EN,KGAS,LGAS,ESHK,ICON,ifIRST,JVAC):
      IMPLICIT #real*8(A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      CHARACTER*6 SCR(17),SCR1(17)
      COMMON/GENCAS/ELEV[17,79],NSDEG(17),AA[17],BB[17],SCR,SCR1
      COMMON/MIXC/PRSH(6,3,17,17),ESH(6,3,17),AUG(6,3,17,17,17),RAD[6,3,17,17],PRSHBT(6,3,17),IZ[6,3],INIOCC(6,3,17),ISHLMX(6,3),AMZ[6,3]
      COMMON/UPD/NOCC(6,3,17),AUGR(6,3,17,17,17),RADR(6,3,17,17)
      DIMENSION PRSH1(17),PRSH2(17)
#
# SHAKE OFF IN SHELL (JVAC) WITH ENERGY OF SHAKE OFF ESHK
# INITIAL VACANCY IN ISHELL WITH ELECTRON EMISSION OF ENERGY EN. 
#     
# CORRECTION TO PROBABILITIES FOR SHELL OCCUPANCIES
# AND THRESHOLDS FROM SUDDEN APPROXIMATION
# THRESHOLD FROM SUDDEN APPROXIMATION SET AT 3.0 TIMES SHELL
# BINDING ENERGY
      PRSUM=0.0
      if(ISHELL == 0):
 GO TO 10
      if(ICON == 1 or ifIRST > 1):
 :
      DO 1 J=1,17
      PRSH1[J]=0.0
      if(INIOCC(KGAS,LGAS,J):
 == 0) GO TO 1
      CORR=float(NOCC(KGAS,LGAS,J))/float(INIOCC(KGAS,LGAS,J))
      if(EN < 1.5*(ELEV[J,IZ[KGAS,LGAS]]+ELEV[J,IZ[KGAS,LGAS]+1]):
) GO TO 1
      PRSH1[J]=PRSH(KGAS,LGAS,ISHELL,J)*CORR
      PRSUM=PRSUM+PRSH1[J]
    1 CONTINUE
      GO TO 6 
      # endif
# INITIAL BETA DECAY ELECTRON EJECTION
   10 if(ICON == 2 or ICON == 3) :
       DO 5 J=1,17
       PRSH1[J]=0.0
       if(EN < 1.5*(ELEV[J,IZ[KGAS,LGAS]]+ELEV[J,IZ[KGAS,LGAS]+1]):
) GOTO 5
       PRSH1[J]=PRSHBT(KGAS,LGAS,J)
       PRSUM=PRSUM+PRSH1[J]
    5  CONTINUE  
      # endif
    6 R1=DRAND48(RDUM)
      if(R1 >= PRSUM):
 :
# NO SHAKE OFF OCCURS
       JVAC=0
       ESHK=0.0
       RETURN
      # endif
# SHAKE OFF NOW FIND SHELL OF ORIGIN
      DO 2 J=1,17
      PRSH1[J]=PRSH1[J]/PRSUM
    2 CONTINUE
      PRSH2[1]=PRSH1[1]
      DO 3 J=2,17
      PRSH2[J]=PRSH1[J]+PRSH2(J-1)
    3 CONTINUE
      R1=DRAND48(RDUM)
      DO 4 J=1,17
      if(R1 < PRSH2[J]:
) :
       JVAC=J
       ESHK=ESH(KGAS,LGAS,J)
# UPDATE SHELL OCCUPANCY
       NOCC(KGAS,LGAS,JVAC)=NOCC(KGAS,LGAS,JVAC)-1
       RETURN
      # endif
    4 CONTINUE
      RETURN
      # end     
      def CVAC(KGAS,LGAS,EELEC,KSHELL,IBAD):
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      CHARACTER*6 SCR(17),SCR1(17)
      COMMON/GENCAS/ELEV[17,79],NSDEG(17),AA[17],BB[17],SCR,SCR1
      COMMON/MIXC/PRSH(6,3,17,17),ESH(6,3,17),AUG(6,3,17,17,17),RAD[6,3,17,17],PRSHBT(6,3,17),IZ[6,3],INIOCC(6,3,17),ISHLMX(6,3),AMZ[6,3]
      DIMENSION IOK(17)
# CALCULATE THE SHELL ,KSHELL, FROM WHICH THE COMPTON ELECTRON
# ORIGINATES.
# RANDOMLY CHOOSE ELECTRON FROM THE (ENERGY) ALLOWED SHELLS
      DO 1 J=1,17
# FIND ENERGY LEVELS THAT HAVE LOWER ENERGY THAN THE RECOIL ELECTRON
      IOK[J]=1
      if(EELEC < ELEV[J,IZ[KGAS,LGAS]] or ELEV[J,IZ[KGAS,LGAS]] == 0.0):
 :
       IOK[J]=0
      # endif
    1 CONTINUE
      IBAD=0  
      NTOT=0
      DO 2 J=1,17
# FIND TOTAL NUMBER OF AVAILABLE ELECTRONS IN KGAS,LGAS
      if(IOK[J]:
 == 0) GO TO 2
      NTOT=NTOT+INIOCC(KGAS,LGAS,J)
    2 CONTINUE
      KSHELL=0
      ANTOT=float(NTOT)
      R1=DRAND48(RDUM)
      ANSUM=0.0
      DO 3 J=1,17
      if(IOK[J]:
 == 0) GO TO 3
      ANSUM=ANSUM+float(INIOCC(KGAS,LGAS,J))/ANTOT
      if(R1 < ANSUM):
 :
       KSHELL=J
       GO TO 4
      # endif
    3 CONTINUE
    4 if(KSHELL == 0) :
       IBAD=1
      # endif
      RETURN
      # end
      def CASCDAT:
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      CHARACTER*6 SCRPT(17),SCRPT1(17),SCR(17),SCR1(17)
      COMMON/GENCAS/ELEV[17,79],NSDEG(17),AA[17],BB[17],SCR,SCR1
      DIMENSION NSD[17]
# GENERAL ATOMIC DATA
      DATA NSD/2,2,2,4,2,2,4,4,6,2,2,4,4,6,2,2,4/
      DATA SCRPT/' K  ',' L1 ',' L2 ',' L3 ',' M1',' M2 ',' M3 ',' M4 ',' M5 ',' N1 ',' N2 ',' N3 ',' N4 ',' N5 ',' O1 ',' O2 ',' O3 '/
      DATA SCRPT1/' 1s ',' 2s ',' 2p1/2',' 2p3/2',' 3s ',' 3p1/2',' 3p3/2',' 3d3/2',' 3d5/2',' 4s ',' 4p1/2',' 4p3/2',' 4d3/2',' 4d5/2',' 5s ',' 5p1/2',' 5p3/2'/
      DATA AA/0.0,0.0,0.25,0.25,0.0,0.25,0.25,0.50,0.50,0.0,0.25,0.25,0.50,0.50,0.0,0.25,0.25/
      DATA BB/1.5,1.5,1.25,1.25,1.5,1.25,1.25,0.75,0.75,1.5,1.25,1.25,0.75,0.75,1.5,1.25,1.25/
      DATA ELEV/13.598,16*0.0,24.587,16*0.0,54.7,5.4,15*0.0,111.5,9.3,15*0.0,188.0,12.6,4.70,14*0.0,
# CARBON284.2,18.0,6.40,14*0.0,401.6,24.4,14.534,14.524,13*0.0,532.0,28.5,13.618,13.618,13*0.0,685.4,34.0,16.000,16.000,13*0.0,
# NEON870.2,48.475,21.661,21.565,13*0.0,1070.8,63.5,30.65,30.81,5.1,12*0.0,1303.0,88.7,49.78,49.50,7.6,12*0.0,1559.6,117.8,72.95,72.55,10.6,6.0,11*0.0,1839.0,149.7,99.82,99.42,13.5,8.1,11*0.0,2145.5,189.0,136.0,135.0,16.1,10.5,11*0.0,2472.0,230.9,163.6,162.5,20.2,10.4,11*0.0,2822.4,270.0,202.0,200.0,24.5,12.9,11*0.0,
# ARGON3205.9,326.3,250.6,248.4,29.239,15.937,15.760,10*0.0,3608.4,378.6,297.3,294.6,34.8,18.3,18.2,10*0.0,4038.5,438.4,349.7,346.2,44.3,25.4,25.3,10*0.0,4492.0,498.0,403.6,398.7,51.1,28.3,28.2,10*0.0,4966.0,560.9,460.2,453.8,58.7,32.6,32.5,10*0.0,5465.0,626.7,519.8,512.1,66.3,37.2,37.1,10*0.0,5989.0,696.0,583.8,574.1,74.1,42.2,42.1,10*0.0,6539.0,769.1,649.9,638.7,82.3,47.2,47.1,10*0.0,7112.0,844.6,719.9,706.8,91.3,52.7,52.6,10*0.0,7709.0,925.1,793.2,778.1,101.0,59.8,58.9,10*0.0,8333.0,1008.6,870.0,852.7,110.8,68.0,66.2,10*0.0,8979.0,1096.7,952.3,932.7,122.5,77.3,75.1,10*0.0,9659.0,1196.2,1044.9,1021.8,139.8,91.4,88.6,10.2,10.1,8*0.0,
# Z=3110367.,1299.0,1143.2,1116.4,159.5,103.5,100.0,18.7,18.6,8*0.0,11103.,1414.6,1248.1,1217.0,180.1,124.9,120.8,29.8,29.2,14.3,7.9,6*0.0,11867.,1527.0,1359.1,1323.6,204.7,146.2,141.2,41.7,41.7,17.0,9.8,6*0.0,12658.,1652.0,1474.3,1433.9,229.6,166.5,160.7,55.5,54.6,20.1,9.8,6*0.0,13474.,1782.0,1596.0,1550.0,257.0,189.0,182.0,70.0,69.0,23.8,11.8,6*0.0,
# KR14327.26,1921.0,1730.9,1678.4,292.8,222.2,214.4,95.0,93.8,27.5,14.666,13.9996,5*0.0,15200.,2065.,1864.0,1804.0,326.7,248.7,239.1,113.0,112.,30.5,16.3,15.3,5*0.0,16105.,2216.,2007.,1940.0,358.7,280.3,270.0,136.0,134.2,38.9,21.3,20.1,5*0.0,17038.,2373.,2156.,2080.0,392.0,310.6,298.8,157.7,155.8,43.8,24.4,23.1,5*0.0,17998.,2532.,2307.,2223.0,430.3,343.5,329.8,181.1,178.8,50.6,28.5,27.1,5*0.0,
# Z=4118986.,2698.,2465.,2371.0,466.6,376.1,360.6,205.0,202.3,56.4,32.6,30.8,5*0.0,20000.,2866.,2625.,2520.0,506.3,411.6,394.0,231.1,227.9,63.2,37.6,35.5,5*0.0,21044.,3043.,2793.,2677.0,544.0,447.6,417.7,257.6,253.9,69.5,42.3,39.9,5*0.0,22117.,3224.,2967.,2838.0,586.1,483.5,461.4,284.2,280.0,75.0,46.3,43.2,5*0.0,23220.,3412.,3146.,3004.0,628.1,521.3,496.5,311.9,307.2,81.4,50.5,47.3,5*0.0,24350.,3604.,3330.,3173.0,671.6,559.9,532.3,340.5,335.2,87.1,55.7,50.9,5*0.0,25514.,3806.,3524.,3351.0,719.0,603.8,573.0,374.0,368.3,97.0,63.7,58.3,5*0.0,26711.,4018.,3727.,3538.,772.0,652.6,618.4,411.9,405.2,109.8,63.9,63.8,11.7,10.7,3*0.0,27940.,4238.,3938.,3730.,827.2,703.2,665.3,451.4,443.9,122.9,73.6,73.5,17.7,16.9,3*0.0,29200.,4465.,4156.,3929.,884.7,756.5,714.6,493.2,484.9,137.1,83.6,83.5,24.9,23.9,3*0.0,
# Z=5130491.,4698.,4380.,4132.,946.0,812.7,766.4,537.5,528.2,153.2,95.6,95.5,33.3,32.1,3*0.0,31814.,4939.,4612.,4341.,1006.,870.8,820.0,583.4,573.,169.4,103.3,103.2,41.9,40.4,3*0.0,33169.,5188.,4852.,4557.,1072.,931.0,875.0,630.8,619.3,186.,123.0,122.9,50.6,48.9,3*0.0,
# XE34561.,5453.,5107.,4786.,1148.7,1002.1,940.6,689.0,676.4,213.2,146.7,145.5,69.5,67.5,23.3,13.43,12.129843,35985.,5714.,5359.,5012.,1211.,1071.0,1003.0,740.5,726.6,232.3,172.4,161.3,79.8,77.5,23.7,14.2,12.6,37441.,5989.,5624.,5247.,1293.,1137.0,1063.0,795.7,780.5,253.5,192.0,178.6,92.6,89.9,30.3,17.0,14.8,38925.,6266.,5891.,5483.,1362.,1209.0,1128.0,853.0,836.0,274.7,205.8,196.0,105.3,102.5,34.3,19.3,16.8,40443.,6549.,6164.,5723.,1436.,1274.0,1187.0,902.4,883.8,291.0,223.2,206.5,109.0,107.0,37.2,19.8,17.0,41991.,6835.,6440.,5964.,1511.,1337.0,1242.0,948.3,928.8,304.5,236.3,217.6,115.1,115.0,37.4,21.0,20.9,43569.,7126.,6722.,6208.,1575.,1403.,1297.0,1003.3,980.4,319.2,243.3,224.6,120.5,120.4,37.5,21.1,21.0,
# Z=6145184.,7428.,7013.,6459.,1650.,1471.,1357.,1052.0,1027.0,332.0,251.,231.,124.,123.,37.6,21.4,21.3,46834.,7737.,7312.,6716.,1723.,1541.,1420.,1110.9,1083.4,347.2,265.6,247.4,128.,127.,37.7,21.4,21.3,48519.,8052.,7617.,6977.,1800.,1614.,1481.,1158.6,1127.5,360.0,284.0,257.0,132.,127.7,37.8,22.0,21.9,50239.,8376.,7930.,7243.,1881.,1688.,1544.,1221.9,1189.6,378.6,286.0,271.0,143.,142.6,36.0,28.0,22.0,51996.,8708.,8252.,7514.,1968.,1768.,1611.,1276.9,1241.1,396.0,322.4,284.1,150.5,150.4,45.6,28.7,22.6,53789.,9046.,8581.,7790.,2047.,1842.,1676.,1333.,1292.6,414.2,333.5,293.2,153.6,153.5,48.9,29.5,23.3,55618.,9394.,8918.,8071.,2128.,1923.,1741.,1392.,1351.,432.4,343.5,308.2,160.1,160.0,49.3,30.8,24.1,57486.,9751.,9264.,8358.,2207.,2006.,1812.,1453.,1409.,449.8,366.2,320.2,167.6,167.5,50.6,31.4,24.7,59390.,10116.,9617.,8648.,2307.,2090.,1885.,1515.,1468.,470.9,385.9,332.6,175.5,175.4,54.7,31.8,25.0,61332.,10486.,9978.,8944.,2398.,2173.,1950.,1576.,1528.,480.5,388.7,339.7,191.2,182.4,55.0,32.5,25.8,
# Z=7163314.,10870.,10349.,9244.,2491.,2264.,2024.,1639.,1589.,506.8,412.4,359.2,206.1,196.3,57.3,33.6,26.7,65351.,11271.,10739.,9561.,2601.,2365.,2108.,1716.,1662.,538.0,438.2,380.7,220.0,211.5,64.2,38.0,29.9,67416.,11682.,11136.,9881.,2708.,2469.,2194.,1793.,1735.,563.4,463.4,400.9,237.9,226.4,69.7,42.2,32.7,69525.,12100.,11544.,10207.,2820.,2575.,2281.,1872.,1809.,594.1,490.4,423.6,255.9,243.5,75.6,45.3,36.8,71676.,12527.,11959.,10535.,2932.,2682.,2367.,1949.,1883.,625.4,518.7,446.8,273.9,260.5,83.0,45.6,38.0,73871.,12968.,12385.,10871.,3049.,2792.,2457.,2031.,1960.,658.2,549.1,470.7,293.1,278.5,84.0,58.0,45.0,76111.,13419.,12824.,11215.,3174.,2909.,2551.,2116.,2040.,691.1,577.8,495.8,311.9,296.3,95.2,63.0,49.0,78395.,13880.,13273.,11564.,3296.,3027.,2645.,2202.,2122.,725.4,609.1,519.4,331.6,314.6,101.7,65.3,52.0,80725.,14353.,13734.,11919.,3425.,3148.,2743.,2291.,2206.,762.1,642.7,546.3,353.2,335.1,107.2,74.2,57.2/
# LOAD GENERAL DATA FOR CASCADE CALCULATIONS
      DO 1 I=1,17
      NSDEG[I]=NSD[I]
      SCR[I]=SCRPT[I]
      SCR1[I]=SCRPT1[I]
      DO 1 J=1,79
    1 ELEV[I,J]=ELEV[I,J]
      RETURN 
      # end
      def PRINTER                                              :
      IMPLICIT #real*8 (A-H,O-Z) 
      IMPLICIT #integer*8 (I-N)   
      #integer*4 NSEED                                     
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/INPT2/KGAS,LGAS,DETEFF,EXCWGHT
      COMMON/INPT1/NDVEC
      COMMON/COMP/LCMP,LCFLG,LRAY,LRFLG,LPAP,LPFLG,LBRM,LBFLG,LPEFLG 
      COMMON/RATIO/AN1,AN2,AN3,AN4,AN5,AN6,AN,FRAC(6)              
      COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,TCFMAX(10),TCFMAX1,RSTART,EFIELD,ETHRM,ECUT,NDELTA,IMIP,IWRITE                      
      COMMON/BFLD/EOVB,WB,BTHETA,BMAG  
      COMMON/IONC/DOUBLE(6,20000),CMINIXSC(6),CMINEXSC(6),ECLOSS(6),WPLN(6),ICOUNT,AVPFRAC(3,6)
      COMMON/LARGE/CF(20000,512),EIN(512),TCF(20000),IARRY(512),    RGAS(512),IPN(512),WPL(512),IZBR(512),IPLAST,PENFRA[3,512]   
      COMMON/NAMES/NAMEG(6)  
      COMMON/KSEED/NSEED 
      COMMON/ECASC/NEGAS(512),LEGAS(512),IESHELL(512),IECASC  
      CHARACTER*25 NAMEG                                  
      WRITE(6,1)     
    1 print(2/,10X,' DEGRAD VERSION 3.3  ',/,6X,'-----------------------------',2/)      
      if(IMIP == 1):
 WRITE(6,2)
      if(IMIP == 2):
 WRITE(6,3)    
      if(IMIP == 3):
 WRITE(6,4)   
      if(IMIP == 4):
 WRITE(6,5)       
      if(IMIP == 5):
 WRITE(6,6)
      WRITE(6,245)
      if(LCMP == 0):
 WRITE(6,7)
      if(LCMP == 1):
 WRITE(6,8)
      if(LRAY == 0):
 WRITE(6,9)
      if(LRAY == 1):
 WRITE(6,11)
      if(LPAP == 0):
 WRITE(6,12)
      if(LPAP == 1):
 WRITE(6,13)
      if(LBRM == 0):
 WRITE(6,14)
      if(LBRM == 1):
 print('-----------------------------------------------------------------------------')
      if(IECASC == 0):
 WRITE(6,16)
      if(IECASC == 1):
 WRITE(6,17)
      WRITE(6,245) 
  245 print('----------------------------------',2(/))
    2 print(2X,' MIP AND DE/DX SIMULATION')
    3 print(2X,' ELECTRON BEAM SIMULATION')
    4 print(2X,' X-RAY SIMULATION')
    5 print(2X,' BETA DECAY SIMULATION')
    6 print(2X,' DOUBLE BETA DECAY SIMULATION')
    7 print(2X,' SIMULATION WITHOUT COMPTON SCATTERING')  
    8 print(2X,' SIMULATION WITH COMPTON SCATTERING')
    9 print(2X,' SIMULATION WITHOUT RAYLEIGH SCATTERING')
   11 print(2X,' SIMULATION WITH RAYLEIGH SCATTERING')
   12 print(2X,' SIMULATION WITHOUT PAIR PRODUCTION')
   13 print(2X,' SIMULATION WITH PAIR PRODUCTION')
   14 print(2X,' SIMULATION WITHOUT BREMSSTRAHLUNG')
   15 print(2X,' SIMULATION WITH BREMSSTRAHLUNG')
   16 print(2X,' SIMULATION WITH PARAMETERISED SHELL CASCADE')
   17 print(2X,' SIMULATION WITH COMPLETE SHELL CASCADE')
      WRITE(6,10) NGAS                                                  
   10 print(3X,'MONTE CARLO SOLUTION FOR MIXTURE OF ',I2,' GASES.',/,3X,'DEGRADATION CALCULATION ALL TIMES IN PICOSECS, DISTANCE IN MICRONS',/,3X,'-----------------------------------------------------------------')
      WRITE(6,30) (NAMEG[J],FRAC[J], J=1,NGAS)                          
  30  print(/,5X,'  GASES  USED ',15X,' PERCENTAGE USED ',2(/),6(6X,A25,5X,'%.4f' %,/))                    
      WRITE(6,50) TEMPC,TORR                                            
   50 print(/,2X,'GAS TEMPERATURE =',F6.1,' DEGREES CENTIGRADE.',/,2X,'GAS PRESSURE = ',F7.1,' TORR.')
      if(NSEED != 0):
 WRITE(6,51) NSEED
   51 print(2(/),' RANDOM NUMBER SEED =',I10)
      if(NSEED == 0):
 WRITE(6,52) 
   52 print(2(/),' STANDARD RANDOM NUMBER SEED = 54217137')
      if(IPEN == 0):
 WRITE(6,55)
   55 print(2(/),2X,' PENNING IONISATION NOT ALLOWED')
      if(IPEN == 1):
 WRITE(6,56)                              
   56 print(2(/),2X,' PENNING IONISATION ALLOWED')
      WRITE(6,60) EFINAL,NSTEP                                          
  60  print(1(/),2X,'INTEGRATION FROM 0.0 TO ',F11.1,' EV.  IN ',I5,' STEPS. ') 
      WRITE(6,90) EFIELD,BMAG,BTHETA,WB                                 
  90  print(1(/),'  ELECTRIC FIELD =','%.4f' %,' VOLTS/CM.',/'  MAGNETIC FIELD =','%.4f' %,' KILOGAUSS.',/,'  ANGLE BETWEEN ELECTRIC AND MAGNETIC FIELD =','%.3f' % ,' DEGREES.',/,'  CYCLOTRON FREQ. =',E12.3,' RADIANS/PICOSECOND')
      WRITE(6,43)
  43  print(/,' USED ANISOTROPIC X-SECTIONS (OKHRIMOVSKYY ET AL) ')
      if(ICOUNT == 1):
 :
      WRITE(6,34) 
  34  print(' USED COUNTING IONISATION X-SECTIONS')
      else:
      WRITE(6,35)
  35  print(' USE GROSS IONISATION X-SECTIONS')
      # endif
      WRITE(6,91) ESTART,NDELTA,ETHRM 
  91  print(1(/),'  INITIAL ELECTRON OR X-RAY ENERGY =',F11.1,' EV.',/,9X,'NUMBER OF EVENTS =',I9,/,4X,'THERMALISATION ENERGY =',F6.2,' EV.',/)
      WRITE(6,911) DETEFF,EXCWGHT
  911 print(' PHOTON DETECTION EFFICIENCY USED IN FANO CALCULATION =','%.3f' % ,' %',/,7X,'WEIGHT GIVEN TO EXCITATION IN FANO CALCULATION =','%.3f' % ,/) 
      if(IMIP == 4 or IMIP == 5):
 :
       if(KGAS <= 0 or KGAS > NGAS):
 :
        WRITE(6,990) KGAS
  990   print(' ERROR IN INPUT: BETA DECAY IDENTifIER KGAS=',I3,'  PROGRAM STOPPED')
        STOP
       # endif
       if(LGAS <= 0 or LGAS > 3):
 :
        WRITE(6,991) LGAS
  991   print(' ERROR IN INPUT: BETA DECAY IDENTifIER LGAS=',I3,'  PROGRAM STOPPED')
        STOP 
       # endif
       WRITE(6,88) KGAS,LGAS
   88  print(/,'  BETA DECAY IN GAS NO =',I2,/,'  if MOLECULE : BETA DECAY IN ATOMIC COMPONENT =',I2,/)
      # endif
      if(NDVEC == 2):
 :
       WRITE(6,915)
  915  print('  BETA OR X-RAY IN RANDOM DIRECTION TO E-FIELD')
       GO TO 95
      # endif
      if(abs(DCOS(THETA):
) < 1.D-9 and IMIP > 2) WRITE(6,92)
      if(abs(DCOS(THETA):
) < 1.D-9 and IMIP == 2) WRITE(6,922)
      if(DCOS(THETA):
 == 1.0) WRITE(6,93)
      if(DCOS(THETA):
 == -1.0) WRITE(6,94)
 922  print('  ELECTRON BEAM ALONG X DIRECTION')
  92  print('  BETA OR X-RAY PERP# endICULAR TO E-FIELD IN X-Y PLANE')  
  93  print('  E-BEAM,BETA OR X-RAY ALONG Z-AXIS IN E-FIELD DIRECTION')
  94  print('  E-BEAM,BETA OR X-RAY ALONG Z-AXIS OPPOSITE TO E-FIELD DIRECTION')    
  95  WRITE(6,96) TCFMAX1 
  96  print(/,2X,'NULL COLLISION FREQUENCY =','%.3f' %,' *(10**12/SEC)',/)
      WRITE(6,111)  (TCF(L),L=500,9500,1000)                            
  111 print(2X,'#real COLLISION FREQUENCY AT 10 EQUALLY SPACED ENERGY INTERVALS (*10**12/SEC)',/,2(5(3X,'%.3f' %)/))                   
      RETURN                                                            
      # end                                                               
      def MIXERC :
      IMPLICIT #real*8 (A-H,O-Z) 
      IMPLICIT #integer*8 (I-N)
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIXC/PRSH(6,3,17,17),ESH(6,3,17),AUG(6,3,17,17,17),RAD[6,3,17,17],PRSHBT(6,3,17),IZ[6,3],INIOCC(6,3,17),ISHLMX(6,3),AMZ[6,3] 
      COMMON/MIXPE/XPE(6,3,17,60),YPE(6,3,17,60)
      COMMON/MIXCN/XCP(6,3,54),YRY(6,3,54),YCP(6,3,54),YPP(6,3,54)
      COMMON/COMPTIN/FRMFR(6,3,45),FRMFC(6,3,45)
      COMMON/GASN/NGASN(6)
      DIMENSION PRSH1(3,17,17),PRSH2(3,17,17),PRSH3(3,17,17),PRSH4(3,17,17),PRSH5(3,17,17),PRSH6(3,17,17)
      DIMENSION PRSHBT1(3,17),PRSHBT2(3,17),PRSHBT3(3,17),PRSHBT4(3,17),PRSHBT5(3,17),PRSHBT6(3,17)
      DIMENSION ESH1(3,17),ESH2(3,17),ESH3(3,17),ESH4(3,17),ESH5(3,17),ESH6(3,17)
      DIMENSION AUG1(3,17,17,17),AUG2(3,17,17,17),AUG3(3,17,17,17),AUG4(3,17,17,17),AUG5(3,17,17,17),AUG6(3,17,17,17)
      DIMENSION RA'%.3f' %,17,17),RA'%.3f' %,17,17),RA'%.3f' %,17,17),RA'%.3f' %,17,17),RA'%.3f' %,17,17),RA'%.3f' %,17,17)
      DIMENSION INIOCC1(3,17),INIOCC2(3,17),INIOCC3(3,17),INIOCC4(3,17),INIOCC5(3,17),INIOCC6(3,17)
      DIMENSION XP1(3,17,60),YP1(3,17,60),XP2(3,17,60),YP2(3,17,60),XP3(3,17,60),YP3(3,17,60),XP4(3,17,60),YP4(3,17,60),XP5(3,17,60),YP5(3,17,60),XP6(3,17,60),YP6(3,17,60)
      DIMENSION XC1(3,54),YR1(3,54),YC1(3,54),YPP1(3,54),XC2(3,54),YR2(3,54),YC2(3,54),YPP2(3,54),XC3(3,54),YR3(3,54),YC3(3,54),YPP3(3,54),XC4(3,54),YR4(3,54),YC4(3,54),YPP4(3,54),XC5(3,54),YR5(3,54),YC5(3,54),YPP5(3,54),XC6(3,54),YR6(3,54),YC6(3,54),YPP6(3,54)
      DIMENSION FFAC1(3,45),FFAC2(3,45),FFAC3(3,45),FFAC4(3,45),FFAC5(3,45),FFAC6(3,45)
      DIMENSION FFAR1(3,45),FFAR2(3,45),FFAR3(3,45),FFAR4(3,45),FFAR5(3,45),FFAR6(3,45)
      DIMENSION IZ1(3),IZ2(3),IZ3(3),IZ4(3),IZ5(3),IZ6(3)
      DIMENSION AMZ1(3),AMZ2(3),AMZ3(3),AMZ4(3),AMZ5(3),AMZ6(3)
# LOAD PHOTOELECTRIC AND COMPTON X-SECS
# LOAD INITIAL SHELL OCCUPANCIES FOR EACH GAS
# LOAD ENERGY LEVELS
# LOAD TRANSITION PROBABILITIES AUGER AND RADIATIVE
# LOAD SHAKE OFF PROBABILITIES AND ENERGIES
      DO 1 I=1,6
      DO 1 M=1,3
      IZ[I,M]=0
      AMZ[I,M]=0.00
      DO 1 J=1,17
      ESH(I,M,J)=0.0
      INIOCC(I,M,J)=0
      PRSHBT(I,M,J)=0.0
      DO 1 K=1,17
      PRSH(I,M,J,K)=0.0
      RAD[I,M,J,K]=0.0
      DO 1 L=1,17
      AUG(I,M,J,K,L)=0.0
    1 CONTINUE  
      CALL GASMIXC(NGASN[1],PRSH1,PRSHBT1,ESH1,AUG1,RAD1,XP1,YP1,XC1,YR1,YC1,YPP1,FFAR1,FFAC1,IZ1,AMZ1,INIOCC1)
      if(NGAS == 1):
 GO TO 10
      CALL GASMIXC(NGASN(2),PRSH2,PRSHBT2,ESH2,AUG2,RAD2,XP2,YP2,XC2,YR2,YC2,YPP2,FFAR2,FFAC2,IZ2,AMZ2,INIOCC2)
      if(NGAS == 2):
 GO TO 10
      CALL GASMIXC(NGASN(3),PRSH3,PRSHBT3,ESH3,AUG3,RAD3,XP3,YP3,XC3,YR3,YC3,YPP3,FFAR3,FFAC3,IZ3,AMZ3,INIOCC3)
      if(NGAS == 3):
 GO TO 10
      CALL GASMIXC(NGASN(4),PRSH4,PRSHBT4,ESH4,AUG4,RAD4,XP4,YP4,XC4,YR4,YC4,YPP4,FFAR4,FFAC4,IZ4,AMZ4,INIOCC4)
      if(NGAS == 4):
 GO TO 10
      CALL GASMIXC(NGASN(5),PRSH5,PRSHBT5,ESH5,AUG5,RAD5,XP5,YP5,XC5,YR5,YC5,YPP5,FFAR5,FFAC5,IZ5,AMZ5,INIOCC5)
      if(NGAS == 5):
 GO TO 10
      CALL GASMIXC(NGASN(6),PRSH6,PRSHBT6,ESH6,AUG6,RAD6,XP6,YP6,XC6,YR6,YC6,YPP6,FFAR6,FFAC6,IZ6,AMZ6,INIOCC6)
      if(NGAS == 6):
 GO TO 10
   10 CONTINUE
      I=1
      DO 30 J1=1,3
      IZ[I,J1]=IZ1(J1)
      AMZ[I,J1]=AMZ1(J1)
      DO 30 J=1,17
      DO 20 M=1,60
      XPE(1,J1,J,M)=XP1(J1,J,M)
      YPE(1,J1,J,M)=YP1(J1,J,M)
   20 CONTINUE
      ESH(I,J1,J)=ESH1(J1,J)
      INIOCC(I,J1,J)=INIOCC1(J1,J)
      if(INIOCC1(J1,J):
 != 0) ISHLMX(1,J1)=J
      PRSHBT(I,J1,J)=PRSHBT1(J1,J)
      DO 30 K=1,17
      PRSH(I,J1,J,K)=PRSH1(J1,J,K)
      RAD[I,J1,J,K]=RAD1(J1,J,K)
      DO 30 L=1,17
      AUG(I,J1,J,K,L)=AUG1(J1,J,K,L)
   30 CONTINUE
      DO 35 J=1,3
      DO 35 M=1,54
      XCP(1,J,M)=XC1(J,M)
      YRY(1,J,M)=YR1(J,M)
      YCP(1,J,M)=YC1(J,M)
      YPP(1,J,M)=YPP1(J,M)
   35 CONTINUE
      DO 40 J=1,3
      DO 40 K=1,45
      FRMFR(1,J,K)=FFAR1(J,K)
   40 FRMFC(1,J,K)=FFAC1(J,K)
      if(NGAS == 1):
 GO TO 1000
      I=2
      DO 60 J1=1,3
      IZ[I,J1]=IZ2(J1)
      AMZ[I,J1]=AMZ2(J1)
      DO 60 J=1,17
      DO 50 M=1,60
      XPE(2,J1,J,M)=XP2(J1,J,M)
      YPE(2,J1,J,M)=YP2(J1,J,M)
   50 CONTINUE
      ESH(I,J1,J)=ESH2(J1,J)
      INIOCC(I,J1,J)=INIOCC2(J1,J)
      if(INIOCC2(J1,J):
 != 0) ISHLMX(2,J1)=J
      PRSHBT(I,J1,J)=PRSHBT2(J1,J)
      DO 60 K=1,17
      PRSH(I,J1,J,K)=PRSH2(J1,J,K)
      RAD[I,J1,J,K]=RAD2(J1,J,K)
      DO 60 L=1,17
      AUG(I,J1,J,K,L)=AUG2(J1,J,K,L)
   60 CONTINUE
      DO 65 J=1,3
      DO 65 M=1,54
      XCP(2,J,M)=XC2(J,M)
      YRY(2,J,M)=YR2(J,M)
      YCP(2,J,M)=YC2(J,M)
      YPP(2,J,M)=YPP2(J,M)
   65 CONTINUE
      DO 70 J=1,3
      DO 70 K=1,45
      FRMFR(2,J,K)=FFAR2(J,K)
   70 FRMFC(2,J,K)=FFAC2(J,K)
      if(NGAS == 2):
 GO TO 1000
      I=3
      DO 90 J1=1,3
      IZ[I,J1]=IZ3(J1)
      AMZ[I,J1]=AMZ3(J1)
      DO 90 J=1,17
      DO 80 M=1,60
      XPE(3,J1,J,M)=XP3(J1,J,M)
      YPE(3,J1,J,M)=YP3(J1,J,M)
   80 CONTINUE
      ESH(I,J1,J)=ESH3(J1,J)
      INIOCC(I,J1,J)=INIOCC3(J1,J)
      if(INIOCC3(J1,J):
 != 0) ISHLMX(3,J1)=J
      PRSHBT(I,J1,J)=PRSHBT3(J1,J)
      DO 90 K=1,17
      PRSH(I,J1,J,K)=PRSH3(J1,J,K)
      RAD[I,J1,J,K]=RAD3(J1,J,K)
      DO 90 L=1,17
      AUG(I,J1,J,K,L)=AUG3(J1,J,K,L)
   90 CONTINUE
      DO 95 J=1,3
      DO 95 M=1,54
      XCP(3,J,M)=XC3(J,M)
      YRY(3,J,M)=YR3(J,M)
      YCP(3,J,M)=YC3(J,M)
      YPP(3,J,M)=YPP3(J,M)
   95 CONTINUE
      DO 100 J=1,3
      DO 100 K=1,45
      FRMFR(3,J,K)=FFAR3(J,K)
  100 FRMFC(3,J,K)=FFAC3(J,K)
      if(NGAS == 3):
 GO TO 1000
      I=4
      DO 120 J1=1,3
      IZ[I,J1]=IZ4(J1)
      AMZ[I,J1]=AMZ4(J1)
      DO 120 J=1,17
      DO 110 M=1,60
      XPE(4,J1,J,M)=XP4(J1,J,M)
      YPE(4,J1,J,M)=YP4(J1,J,M)
  110 CONTINUE
      ESH(I,J1,J)=ESH4(J1,J)
      INIOCC(I,J1,J)=INIOCC4(J1,J)
      if(INIOCC4(J1,J):
 != 0) ISHLMX(4,J1)=J
      PRSHBT(I,J1,J)=PRSHBT4(J1,J)
      DO 120 K=1,17
      PRSH(I,J1,J,K)=PRSH4(J1,J,K)
      RAD[I,J1,J,K]=RAD4(J1,J,K)
      DO 120 L=1,17
      AUG(I,J1,J,K,L)=AUG4(J1,J,K,L)
  120 CONTINUE
      DO 125 J=1,3
      DO 125 M=1,54
      XCP(4,J,M)=XC4(J,M)
      YRY(4,J,M)=YR4(J,M)
      YCP(4,J,M)=YC4(J,M)
      YPP(4,J,M)=YPP4(J,M)
  125 CONTINUE
      DO 130 J=1,3
      DO 130 K=1,45
      FRMFR(4,J,K)=FFAR4(J,K)
  130 FRMFC(4,J,K)=FFAC4(J,K)
      if(NGAS == 4):
 GO TO 1000
      I=5
      DO 150 J1=1,3
      IZ[I,J1]=IZ5(J1)
      AMZ[I,J1]=AMZ5(J1)
      DO 150 J=1,17
      DO 140 M=1,60
      XPE(5,J1,J,M)=XP5(J1,J,M)
      YPE(5,J1,J,M)=YP5(J1,J,M)
  140 CONTINUE
      ESH(I,J1,J)=ESH5(J1,J)
      INIOCC(I,J1,J)=INIOCC5(J1,J)
      if(INIOCC5(J1,J):
 != 0) ISHLMX(5,J1)=J
      PRSHBT(I,J1,J)=PRSHBT5(J1,J)
      DO 150 K=1,17
      PRSH(I,J1,J,K)=PRSH5(J1,J,K)
      RAD[I,J1,J,K]=RAD5(J1,J,K)
      DO 150 L=1,17
      AUG(I,J1,J,K,L)=AUG5(J1,J,K,L)
  150 CONTINUE
      DO 155 J=1,3
      DO 155 M=1,54
      XCP(5,J,M)=XC5(J,M)
      YRY(5,J,M)=YR5(J,M)
      YCP(5,J,M)=YC5(J,M)
      YPP(5,J,M)=YPP5(J,M) 
  155 CONTINUE
      DO 160 J=1,3
      DO 160 K=1,45
      FRMFR(5,J,K)=FFAR5(J,K)
  160 FRMFC(5,J,K)=FFAC5(J,K)
      if(NGAS == 5):
 GO TO 1000
      I=6
      DO 180 J1=1,3
      IZ[I,J1]=IZ6(J1)
      AMZ[I,J1]=AMZ6(J1)
      DO 180 J=1,17
      DO 170 M=1,60
      XPE(6,J1,J,M)=XP6(J1,J,M)
      YPE(6,J1,J,M)=YP6(J1,J,M)
  170 CONTINUE
      ESH(I,J1,J)=ESH6(J1,J)
      INIOCC(I,J1,J)=INIOCC6(J1,J)
      if(INIOCC6(J1,J):
 != 0) ISHLMX(6,J1)=J
      PRSHBT(I,J1,J)=PRSHBT6(J1,J)
      DO 180 K=1,17
      PRSH(I,J1,J,K)=PRSH6(J1,J,K)
      RAD[I,J1,J,K]=RAD6(J1,J,K)
      DO 180 L=1,17
      AUG(I,J1,J,K,L)=AUG6(J1,J,K,L)
  180 CONTINUE 
      DO 185 J=1,3
      DO 185 M=1,54
      XCP(6,J,M)=XC6(J,M)
      YRY(6,J,M)=YR6(J,M)
      YCP(6,J,M)=YC6(J,M)
      YPP(6,J,M)=YPP6(J,M)
  185 CONTINUE
      DO 190 J=1,3
      DO 190 K=1,45
      FRMFR(6,J,K)=FFAR6(J,K)
  190 FRMFC(6,J,K)=FFAC6(J,K)
      if(NGAS > 6):
 :
       WRITE(6,99) NGAS
   99 print(' def STOPPED NGAS=',I3,' IN MIXERC')
       STOP
      # endif
 1000 CONTINUE
      RETURN
      # end
      def GASMIXC(NGS,PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION INIOCC(3,17),PRSH(3,17,17),ESH(3,17),PRSHBT(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFR(3,45),FFC(3,45),IZ[3],AMZ[3]
#
# ZERO ARRAYS 
      DO 100 K=1,3
      IZ[K]=0
      AMZ[K]=0.0
      DO 97 M=1,54
      XCP(K,M)=0.0
      YRY(K,M)=0.0
      YCP(K,M)=0.0
      YPP(K,M)=0.0
   97 CONTINUE
      DO 98 N=1,45
      FFR(K,N)=0.0
      FFC(K,N)=0.0
   98 CONTINUE 
      DO 100 J=1,17
      PRSHBT(K,J)=0.0
      ESH(K,J)=0.0
      INIOCC(K,J)=0
      DO 99 KK=1,60
      XPE(K,J,KK)=0.0
      YPE(K,J,KK)=0.0
   99 CONTINUE
      DO 100 I=1,17
      RAD[K,J,I]=0.0
      PRSH(K,J,I)=0.0
      DO 100 L=1,17
      AUG(K,J,I,L)=0.0
  100 CONTINUE
#
      GO TO (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,    61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80) NGS
    1 CALL CGAS1(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
    2 CALL CGAS2(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
    3 CALL CGAS3(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
    4 CALL CGAS4(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
    5 CALL CGAS5(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
    6 CALL CGAS6(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
    7 CALL CGAS7(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
    8 CALL CGAS8(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
    9 CALL CGAS9(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   10 CALL CGAS10(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   11 CALL CGAS11(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   12 CALL CGAS12(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   13 CALL CGAS13(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   14 CALL CGAS14(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   15 CALL CGAS15(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   16 CALL CGAS16(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   17 CALL CGAS17(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   18 CALL CGAS18(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   19 CALL CGAS19(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   20 CALL CGAS20(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   21 CALL CGAS21(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   22 CALL CGAS22(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   23 CALL CGAS23(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   24 CALL CGAS24(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   25 CALL CGAS25(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   26 CALL CGAS26(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   27 CALL CGAS27(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   28 CALL CGAS28(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   29 CALL CGAS29(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   30 CALL CGAS30(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   31 CALL CGAS31(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   32 CALL CGAS32(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   33 CALL CGAS33(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   34 CALL CGAS34(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   35 CALL CGAS35(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   36 CALL CGAS36(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   37 CALL CGAS37(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   38 CALL CGAS38(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   39 CALL CGAS39(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   40 CALL CGAS40(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   41 CALL CGAS41(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   42 CALL CGAS42(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   43 CALL CGAS43(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   44 CALL CGAS44(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   45 CALL CGAS45(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   46 CALL CGAS46(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   47 CALL CGAS47(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   48 CALL CGAS48(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   49 CALL CGAS49(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   50 CALL CGAS50(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   51 CALL CGAS51(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   52 CALL CGAS52(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   53 CALL CGAS53(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   54 CALL CGAS54(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   55 CALL CGAS55(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   56 CALL CGAS56(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   57 CALL CGAS57(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   58 CALL CGAS58(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   59 CALL CGAS59(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   60 CALL CGAS60(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   61 CALL CGAS61(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   62 CALL CGAS62(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   63 CALL CGAS63(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   64 CALL CGAS64(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   65 CALL CGAS65(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   66 CALL CGAS66(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   67 CALL CGAS67(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   68 CALL CGAS68(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   69 CALL CGAS69(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   70 CALL CGAS70(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   71 CALL CGAS71(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   72 CALL CGAS72(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   73 CALL CGAS73(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   74 CALL CGAS74(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   75 CALL CGAS75(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   76 CALL CGAS76(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   77 CALL CGAS77(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   78 CALL CGAS78(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   79 CALL CGAS79(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
   80 CALL CGAS80(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFR,FFC,IZ,AMZ,INIOCC)
      RETURN   
      # end   
      def ANGGEN(a, b, theta):
      implicit none
      double precision a, b, theta, x, y, pi, xmc, dmc, ymc,
     -   xnewton, ynewton,dvec[1], eps, dx
      #integer i,j,nmc
      parameter (nmc = 10)
      parameter (pi = 3.141592653589793238462643383)
      parameter (eps = 1.0d-6)
# ROB VEENHOFS ROUTINE DEC 2012
*   Check input (return 0 if values are not permitted).
      if (a < 0  or  b < 0  or  2.00*a+b == 0):
         theta = 0
         return
      # endif
*   Draw a uniform random number
      call rm48(dvec,1)
      y = dvec[1]-0.5
*   Special treatment for A = 0 and y close to 0
      if(abs(a) < eps*b):
         if (y  ==  0) :
            theta = 0
            return
         else:if (y > 0  and  y  <  eps) :
            theta = (3.00*pi*y/2.00)**(1.00/3.00)
            return
         else:if (y < 0  and  y  >  -eps) :
            theta = -(-3.00*pi*y/2.00)**(1.00/3.00)
            return
         # endif
      # endif
*   Find a starting value by MC.
      dmc = 2.00
      for 10 i in range(0, nmc):
         x = -pi/2+pi*(dblE[I]-1)/dble(nmc-1)
         ymc = (2.00/pi)*(a*x + b*x/2.00 - b*sin(2.00*x)/4.00)/
     -      (2.00*a + b)
         if (i == 1 or  abs(y-ymc) < dmc):
            xmc = x
            dmc = abs(y-ymc)
         # endif
 10   continue
*   Iterate a bit to find a better value
      xnewton = xmc
      ynewton = (2.00/pi)*(a*xnewton + b*xnewton/2.00 - 
     -     b*sin(2.00*xnewton)/4.00)/(2.00*a + b)
      for 20 i in range(0, 10):
         dx = (y-ynewton)/((2.00/pi)*(A + B*sin(xnewton)**2)/
     -      (2.00*a + b))
         for 30 j in range(0, 5):
            if (abs((2.00/pi)*(a*(xnewton+dx) + b*(xnewton+dx)/2.00 - 
     -         b*sin(2.00*(xnewton+dx))/4.00)/(2.00*a + b)-y) > 
     -         abs(ynewton-y) or abs(xnewton+dx) > pi/2):
               dx = dx/2
            else:
               goto 40
            # endif
 30      continue
 40      continue
         xnewton = xnewton + dx
         if(xnewton > pi/2)xnewton = 0.9*pi/2
         if(xnewton < -pi/2)xnewton = -0.9*pi/2
         ynewton = (2.00/pi)*(a*xnewton + b*xnewton/2.00 - 
     -      b*sin(2.00*xnewton)/4.00)/(2.00*a + b)
         if (abs(dx) < eps) :
            theta = xnewton
            return
         # endif
 20   continue
*   Return value
      theta = xnewton
      print *,' ### Did not converge, returning ',theta
      # end
      def CGAS1(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
      DIMENSION INIOC(17),PRBSH(17,17),ES(17),R(17,17),A[17,17,17],PRBSHBT(17)
      DIMENSION INIOCF(17),PRBSHF(17,17),ESF(17),RF(17,17),AF(17,17,17),PRBSHBTF(17) 
      DIMENSION XPEK(49),YPEK(49),XPEL1(54),YPEL1(54),XPEL2(54),YPEL2(54),XCOMC(54),YRAYC(54),YCOMC(54),YPAPC(54),FFRC(45),FFCC(45)
      DIMENSION XPEKF(45),YPEKF(45),XPEL1F(53),YPEL1F(53),XPEL2F(55),YPEL2F(55),XPEL3F(55),YPEL3F(55),XCOMF(54),YRAYF(54),YCOMF(54),YPAPF(54),FFRF(45),FFCF(45)
# 
# CF4 DATA FOR CASCADE CALCULATIONS
#
#  CARBON  DATA
# LEVEL OCCUPANCY FOR GROUND STATE
      DATA INIOC/2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0/
# AVERAGE SHAKE OFF ELECTRON ENERGY
      DATA ES/10.00,2.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
# SHAKE OFF DATA :  CARLSON AND NESTOR PHYS REV A8(1973)2887
# % PROBABILITY OF J SHELL SHAKE OFF FROM VACANCY IN SHELL I PROBSH(I,J)
      DATA PRBSH/0.20,3.00,9.00,0.0,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.80,3.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.50,2.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,238*0.0/
# SHAKE OFF DATA : CARLSON,NESTOR ET AL PHYS REV 169(1968)27
# % PROBABILITY OF J SHELL SHAKE OFF FROM BETA DECAY PRSHBT[J]
      DATA PRBSHBT/2.74,12.0,12.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
#
# AUGER AND COSTER-KRONIG TRANSITION RATES FOR K AND L SHELLS 
#  WALTERS AND BHALLA (1971)
# K SHELL RATE (MILLIATOMIC UNITS) TO GET TO EV *0.0272105
      DATA A[1,2,2]/0.858/,A[1,2,3]/0.824/,A[1,3,3]/0.378/
# RADIATIVE TRANSITIONS SCOFIELD ANDT 14(1974)121
# DIPOLE AND HIGHER MULTIPOLES , RELATIVISTIC CALC. UNITS 1.519E15/SEC
# K-SHELL
      DATA R(1,2)/1.50E-14/,R(1,3)/3.45E-5/,R(1,4)/6.88E-5/
# L1 SHELL
      DATA R(2,3)/1.20E-7/,R(2,4)/2.41E-7/
# L2 SHELL
      DATA R(3,4)/1.55E-21/
# 
# PHOTOELECTRIC ABSORPTION X-SECTIONS FOR EACH SHELL: 
#    UNITS BARNS/ATOM AND ENERGIES IN EV
#  ASSEMBLED FROM: BAND ET AL.            ANDT 23(1979)443
#                : SCOFIELD               UCRL-51326
#                : VIEGELE                ATOMIC DATA 5(1973)50
# K  SHELL 1S 1/2
      DATA YPEK/9.26E5,7.98E5,4.81E5,2.35E5,1.21E5,8.42E4,6.57E4,5.09E4,4.20E4,1.33E4,5.73E3,1.70E3,707.,354.,200.,80.4,39.3,10.6,4.12,1.08,.415,.197,.107,.0411,.0195,.00512,.00201,5.64E-4,2.41E-4,1.29E-4,8.05E-5,4.06E-5,2.52E-5,1.19E-5,7.51E-6,4.21E-6,2.90E-6,2.20E-6,1.77E-6,1.27E-6,9.93E-7,6.39E-7,4.71E-7,3.08E-7,2.29E-7,1.82E-7,1.51E-7,1.13E-7,9.01E-8/
      DATA XPEK/285.0,300.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# L1 SHELL 2S 1/2
      DATA YPEL1/1.35E7,1.50E6,4.00E5,2.21E5,1.70E5,1.14E5,4.58E4,2.07E4,1.02E4,5.34E3,3.76E3,2.97E3,2.32E3,1.93E3,635.,280.,85.1,35.7,18.0,10.3,4.16,2.05,.554,.217,.0571,.0220,.0105,.00570,.00218,.00104,   2.72E-4,1.07E-4,3.00E-5,1.28E-5,6.88E-6,4.28E-6,2.16E-6,1.34E-6,6.37E-7,4.02E-7,2.26E-7,1.55E-7,1.18E-7,9.49E-8,6.82E-8,5.32E-8,3.42E-8,2.52E-8,1.65E-8,1.23E-8,9.75E-9,8.10E-9,6.05E-9,4.82E-9/
      DATA XPEL1/18.0,50.0,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/          
# L2 SHELL 2P 1/2
      DATA YPEL2/1.35E7,9.0E5,1.50E5,7.81E4,5.15E4,2.79E4,7.59E3,2.49E3,924.,383.,239.,173.,124.,94.6,20.7,6.75,1.36,.432,.176,.0841,  .0259,.0103,.00189,5.64E-4,1.02E-4,3.06E-5,1.20E-5,5.63E-6,1.72E-6,6.96E-7,1.40E-7,4.69E-8,1.10E-8,4.26E-9,2.16E-9,1.29E-9,6.20E-10,3.76E-10,1.82E-10,1.15E-10,6.45E-11,4.44E-11,3.37E-11,2.71E-11,1.95E-11,1.52E-11,9.77E-12,7.20E-12,4.71E-12,3.50E-12,2.79E-12,2.31E-12,1.73E-12,1.38E-12/
      DATA XPEL2/6.40,50.0,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# RAYLEIGH COMPTON AND PAIR PRODUCTION DATA
# HUBBEL J.PHYS.CHEM.REF.DATA 4(1975)471
# HUBBEL NIST XCOM WEB SITE
# STORM AND ISRAEL NUCL.DATA TABLES A7(1970)565
      DATA XCOMC/100.,150.,200.,300.,400.,500.,600.,800.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.022D6,1.25D6,1.5D6,2.0D6,2.044'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
      DATA YRAYC/23.94,23.90,24.85,23.72,23.53,23.31,23.03,22.37,21.52,19.12,16.59,12.22,9.179,7.170,5.819,4.181,3.232,1.952,1.292,.6711,      .4079,.2734,.1956,.1139,.07418,.03360,.01903,8.504D-3,4.792D-3,   3.070D-3,                  2.133D-3,1.200D-3,7.682D-4,7.355D-4,4.917D-4,3.415D-4,1.921D-4,1.839D-4,8.539D-5,4.803D-5,3.074D-5,2.135D-5,1.568D-5,1.201D-5,9.488D-6,7.685D-6,3.415D-6,1.921D-6,8.537D-7,4.802D-7,3.073D-7,2.134D-7,1.200D-7,7.682D-8/  
      DATA YCOMC/3.044D-3,6.469D-3,.01140,.02518,.04448,.06870,.09764, .1680,.2519,.5001,                  .7702,1.278,1.685,1.984,2.202,2.497,2.697,3.012,3.182,3.300,3.296,3.250,3.188,3.054,2.924,2.647,2.431,2.118,1.899,1.735,1.605,1.410,1.268,1.255,1.134,1.031,.8795,.8687,.6920,.5772,.4985,.4406,.3960,.3604,.3313,.3069,.2272,.1823,.1327,.1055,    .08805,.07586,.05983,.04966/  
# TOTAL PAIR PRODUCTION NUCLEAR + ELECTRON
      DATA YPAPC/34*1.D-20,2.870D-4,1.594D-3,6.356D-3,6.852D-3,.01844,  .03054,   .04163,.05178,.06095,.06928,.07690,.08388,.1108,.1310,.1597,.1802,.1958,.2080,.2263,.2401/   
# NORMALISED RAYLEIGH FORM FACTOR  Hubbel
      DATA FFRC/1.0,.99957,.99830,.9962,.9932,.9895,.9848,.9735,.9590,.9228,.8783,.8538,.7902,.7218,.6562,.5962,.4935,.4170,.3252,.2810,.2558,.2375,.2202,.2027,.1853,.1441,.1094,.0620,.03577,.02147,.01341,.008705,.004055,.002108,.001191,7.198D-4,3.06D-4,6.295D-5, 2.027D-5,5.398D-7,8.455D-8,3.52D-8,5.993D-12,2.767D-21,2.80D-30/
# NORMALISED COMPTON FORM FACTOR  Hubbel
      DATA FFCC/1.7D-21,6.317D-4,.002165,.004922,.008607,.01341,.01928,.03358,.05143,.0948,.1459,.1732,.2413,.3110,.3755,.4340,.5330,.6072,.6973,.7463,.7817,.8130,.8418,.8680,.8913,.9358,.9635,.9883,.9962,.9987,.99947,.99977,.99995,.99998,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0/
# CARBON ATOMIC NUMBER
      IZ[1]=6
      AMZ[1]=12.0107
# 
# ATOMIC FLOURINE DATA FOR CASCADE CALCULATIONS
#
# LEVEL OCCUPANCY FOR GROUND STATE
      DATA INIOCF/2,2,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0/
# AVERAGE SHAKE OFF ELECTRON ENERGY
      DATA ESF/14.0,2.5,2.5,2.5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
# SHAKE OFF DATA :  CARLSON AND NESTOR PHYS REV A8(1973)2887
# % PROBABILITY OF J SHELL SHAKE OFF FROM VACANCY IN SHELL I PROBSH(I,J)
      DATA PRBSHF/0.08,2.00,6.00,8.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.20,1.20,3.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.40,1.00,2.50,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.40,1.20,2.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,221*0.0/
# SHAKE OFF DATA : CARLSON,NESTOR ET AL PHYS REV 169(1968)27
# % PROBABILITY OF J SHELL SHAKE OFF FROM BETA DECAY PRSHBT[J]
      DATA PRBSHBTF/1.29,5.5,7.0,11.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
#
# AUGER AND COSTER-KRONIG TRANSITION RATES FOR K AND L SHELLS 
#  WALTERS AND BHALLA (1971)
# K SHELL RATE (MILLIATOMIC UNITS) TO GET TO EV *0.0272105
      DATA AF(1,2,2)/0.838/,AF(1,2,3)/0.816/,AF(1,3,3)/0.377/
      DATA AF(1,2,4)/0.216/,AF(1,3,4)/0.104/
# RADIATIVE TRANSITIONS SCOFIELD ANDT 14(1974)121
# DIPOLE AND HIGHER MULTIPOLES , RELATIVISTIC CALC. UNITS 1.519E15/SEC
# K-SHELL
      DATA RF(1,2)/1.17E-12/,RF(1,3)/5.88E-4/,RF(1,4)/1.17E-3/
# L1 SHELL
      DATA RF(2,3)/1.27E-6/,RF(2,4)/2.57E-6/
# L2 SHELL
      DATA RF(3,4)/1.69E-18/
# 
# PHOTOELECTRIC ABSORPTION X-SECTIONS FOR EACH SHELL: 
#    UNITS BARNS/ATOM AND ENERGIES IN EV
#  ASSEMBLED FROM: BAND ET AL.            ANDT 23(1979)443
#                : SCOFIELD               UCRL-51326
#                : VIEGELE                ATOMIC DATA 5(1973)50
# K  SHELL 1S 1/2
      DATA YPEKF/4.3E5,3.20E5,2.53E5,2.02E5,1.68E5,5.89E4,2.70E4,8.58E3,3.72E3,1.92E3,1.11E3,462.,232.,65.2,26.1,7.07,2.77,1.34,.734,.285,.137,.0364,.0144,.00409,.00176,9.47E-4,5.90E-4,2.98E-4,1.85E-4,8.73E-5,5.48E-5,3.06E-5,2.09E-5,1.59E-5,1.28E-5,9.13E-6,7.11E-6,5.99E-6,3.36E-6,2.19E-6,1.63E-6,1.30E-6,1.08E-6,8.03E-7,6.41E-7/
      DATA XPEKF/685.4,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# L1 SHELL 2S 1/2
      DATA YPEL1F/3.70E6,6.60E5,4.17E5,3.46E5,2.56E5,1.26E5,6.41E4,3.46E4,1.97E4,1.44E4,1.16E4,9.24E3,7.76E3,2.80E3,1.32E3,438.,194.,102.,59.7,25.2,12.8,3.64,1.47,.402,.158,.0765,.0421,.0164,.00789,.00210,8.35E-4,2.37E-4,1.02E-4,5.48E-5,3.41E-5,1.72E-5,1.07E-5,5.06E-6,3.18E-6,1.77E-6,1.21E-6,9.20E-7,7.39E-7,5.29E-7,4.12E-7,2.64E-7,1.95E-7,1.27E-7,9.45E-8,7.51E-8,6.24E-8,4.66E-8,3.71E-8/
      DATA XPEL1F/34.0,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/          
# L2 SHELL 2P 1/2
      DATA YPEL2F/1.0E7,1.00E7,3.2E6,6.93E5,3.73E5,2.65E5,1.59E5,4.99E4,1.78E4,7.22E3,3.19E3,2.03E3,1.50E3,1.09E3,860.,212.,75.7,17.0,5.71,2.40,1.17,.375,.154,.0300,.00931,.00177,5.46E-4,2.19E-4,1.05E-4,3.29E-5,1.36E-5,2.82E-6,9.63E-7,2.29E-7,8.82E-8,4.40E-8,2.58E-8,1.18E-8,6.74E-9,2.75E-9,1.73E-9,9.63E-10,6.60E-10,5.00E-10,4.02E-10,2.88E-10,2.24E-10,1.44E-10,1.06E-10,6.91E-11,5.14E-11,4.08E-11,3.39E-11,2.53E-11,2.02E-11/
      DATA XPEL2F/16.0,25.0,50.0,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# L3 SHELL 2P 3/2
      DATA YPEL3F/2.00E7,2.0E7,6.4E6,1.39E6,7.43E5,5.30E5,3.18E5,9.98E4,3.57E4,1.43E4,6.32E3,4.03E3,2.97E3,2.16E3,1.70E3,419.,149.,33.5,11.2,4.71,2.30,.731,.298,.0578,.0178,.00335,.00102,4.07E-4,1.92E-4,5.95E-5,2.42E-5,4.90E-6,1.65E-6,3.91E-7,1.53E-7,7.86E-8,4.75E-8,2.33E-8,1.43E-8,6.69E-9,4.20E-9,2.34E-9,1.60E-9,1.22E-9,9.77E-10,7.00E-10,5.44E-10,3.50E-10,2.57E-10,1.68E-10,1.25E-10,9.93E-11,8.25E-11,6.16E-11,4.91E-11/
      DATA XPEL3F/16.0,25.0,50.0,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# RAYLEIGH COMPTON AND PAIR PRODUCTION DATA
      DATA XCOMF/100.,150.,200.,300.,400.,500.,600.,800.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.022D6,1.25D6,1.5D6,2.0D6,2.044'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
      DATA YRAYF/53.87,53.82,53.77,53.62,53.42,53.16,52.85,52.07,51.11,48.01,44.27,36.25,29.02,23.25,18.86,13.07,9.647,5.470,3.611,1.921,      1.181,.7966,.5731,.3370,.2212,.1013,.05764,.02585,.01459,.009349, 6.498D-3,3.658D-3,2.342D-3,2.242D-3,1.499D-3,1.041D-3,5.858D-4,5.609D-4,2.604D-4,1.465D-4,9.374D-5,6.510D-5,4.783D-5,3.662D-5,2.893D-5,2.344D-5,1.046D-5,5.883D-6,2.614D-6,1.471D-6,9.412D-7,6.535D-7,3.677D-7,2.353D-7/  
      DATA YCOMF/1.935D-3,4.736D-3,8.533D-3,.01925,.03410,.05298,.07579,.1325,.2029,.4270,                  .6987,1.293,1.861,2.354,2.762,3.353,3.735,4.257,4.524,4.760,4.808,4.775,4.706,4.533,4.354,3.955,3.637,3.172,2.846,2.600,2.406,2.115,1.902,1.882,1.701,1.546,1.319,1.303,1.038,.8658,.7477,.6609,.5940,.5406,.4969,.4604,.3408,.2735,.1991,.1582,    .1321,.1138,.08974,.07449/    
# TOTAL PAIR PRODUCTION NUCLEAR + ELECTRON
      DATA YPAPF/34*1.D-20,6.506D-4,3.60D-3,.01434,.01546,.04137,.06799,.09219,.1141,.1339,.1518,.1680,.1829,.2403,.2830,.3451,.3893,     .4199,.4463,.4852,.5119/   
# NORMALISED RAYLEIGH FORM FACTOR  Hubbel
      DATA FFRF/1.0,.99973,.99910,.9981,.9967,.9948,.9926,.9868,.9794,.9604,.9362,.9223,.8833,.8398,.7931,.7451,.6497,.5611,.4172,.3189,.2562,.2172,.1926,.1762,.1646,.1430,.1243,.08978,.06246,.04616,.02986,.02354,.01091,.006078,.003611,.002744,.001011,2.268D-4,7.432D-5,2.042D-6, 3.244D-7,1.362D-7,2.758D-11,1.59D-20,1.63D-29/
# NORMALISED COMPTON FORM FACTOR  Hubbel
      DATA FFCF/1.1D-21,2.22D-4,.00111,.002489,.004411,.006878,.009867,.01739,.02689,.05122,.08166,.09867,.1453,.1957,.2474,.2990,.3966,.4830,.6169,.7043,.7591,.7946,.8196,.8391,.8559,.8916,.9209,.9609,.9816,.9914,.99590,.99800,.99946,.99983,.99994,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0/
# FLOURINE ATOMIC NUMBER
      IZ[2]=9
      AMZ[2]=75.9936
# CONVERT SHAKE OFF FROM A % TO A PROBABILITY
      DO 1 I=1,17
      PRSHBT(1,I)=PRBSHBT[I]/100.0
      PRSHBT(2,I)=PRBSHBTF[I]/100.0
      DO 1 J=1,17
      PRBSH(I,J)=PRBSH(I,J)/100.0
      PRBSHF(I,J)=PRBSHF(I,J)/100.0
    1 CONTINUE  
# SWAP INDICES AND DO CHECK SUM
      DO 2 I=1,17
      PRSUM=0.0
      PRSUMF=0.0
      DO 2 J=1,17
      PRSH(1,I,J)=PRBSH[J][I]
      PRSH(2,I,J)=PRBSHF[J][I]
#     PRSUMF=PRSUMF+PRSH(2,I,J)
#     PRSUM=PRSUM+PRSH(1,I,J)
#     WRITE(6,888) I,PRSUM,PRSUMF
# 888 print(' I=',I3,' PRSUM=','%.3f' %,' PRSUM=','%.3f' %)
    2 CONTINUE
# LOAD SKAKE OFF ENERGIES AND LEVEL OCCUPATIONS
      DO 3 I=1,17
      ESH(1,I)=ES[I]
      ESH(2,I)=ESF[I]
      INIOCC(1,I)=INIOC[I]
      INIOCC(2,I)=INIOCF[I]
    3 CONTINUE
#
# AUGER PROBABILITIES IN ARRAY AUG(I,J,K) INITIAL VACANCY IN SHELL I,
# WITH TRANSITION TO SHELLS J,K
# LOAD OUTPUT ARRAYS AND CONVERT TO EV
      DO 4 I=1,4
      DO 4 J=1,17
      DO 4 K=1,17 
      AUG(1,I,J,K)=A[I,J,K]*0.0272105
    4 AUG(2,I,J,K)=AF(I,J,K)*0.0272105  
      DO 5 I=5,17
      DO 5 J=1,17
      DO 5 K=1,17
      AUG(1,I,J,K)=A[I,J,K]*0.00272105
    5 AUG(2,I,J,K)=AF(I,J,K)*0.00272105
# CHECK AUGER LEVEL SUMS
# CHECK AUGER LEVEL SUMS
#     DO 7 I=1,17
#     ASUM=0.0
#     DO 6 J=1,17
#     DO 6 K=1,17
#   6 ASUM=ASUM+AUG(I,J,K)
#     WRITE(6,887) I,ASUM
# 887 print(' I=',I3,' ASUM=','%.3f' %)
#   7 CONTINUE
#  
# CONVERT RADIATIVE RATES IN M AND N SHELL TO EV 
      DO 12 I=5,17
      DO 12 J=6,17
      R(I,J)=R(I,J)*6.582119D-16
   12 RF(I,J)=RF(I,J)*6.582119D-16
# LOAD OUTPUT ARRAY
# LOAD OUTPUT ARRAY
      DO 13 I=1,17
      DO 13 J=1,17
      RAD[1,I,J]=R(I,J)
   13 RAD[2,I,J]=RF(I,J)
#  
# PRINTOUT CHECK SUM
#     DO 15 I=1,17
#     RSUM=0.0
#     DO 14 J=1,17
#  14 RSUM=RSUM+R(I,J)
#     WRITE(6,100) I,RSUM
# 100 print(' SHELL =',I3,' RAD RATE EV=','%.3f' %)
#  15 CONTINUE
#
# LOAD CARBON PHOTOELECTRIC DATA
      DO 21 J=1,49
      XPE(1,1,J)=math.log(XPEK[J])
      YPE(1,1,J)=math.log(YPEK[J]*1.D-24)
   21 CONTINUE
      DO 22 J=1,54
      XPE(1,2,J)=math.log(XPEL1[J])
      YPE(1,2,J)=math.log(YPEL1[J]*1.D-24)
   22 CONTINUE 
      DO 23 J=1,54 
      XPE(1,3,J)=math.log(XPEL2[J])
      YPE(1,3,J)=math.log(YPEL2[J]*1.D-24)
   23 CONTINUE
# LOAD FLUORINE PHOTOELECTRIC DATA
# SCALE BY 4 SINCE 4 ATOMS PER CARBON
      DO 24 J=1,45
      XPE(2,1,J)=math.log(XPEKF[J])
      YPE(2,1,J)=math.log(YPEKF[J]*4.0*1.D-24)
   24 CONTINUE
      DO 25 J=1,53
      XPE(2,2,J)=math.log(XPEL1F[J])
      YPE(2,2,J)=math.log(YPEL1F[J]*4.0*1.D-24)
   25 CONTINUE 
      DO 26 J=1,55 
      XPE(2,3,J)=math.log(XPEL2F[J])
      YPE(2,3,J)=math.log(YPEL2F[J]*4.0*1.D-24)
   26 CONTINUE
      DO 27 J=1,55 
      XPE(2,4,J)=math.log(XPEL3F[J])
      YPE(2,4,J)=math.log(YPEL3F[J]*4.0*1.D-24)
   27 CONTINUE
# LOAD RAYLEIGH COMPTON AND PAIR PRODUCTION X-SEC
      DO 28 J=1,54
      XCP(1,J)=math.log(XCOMC[J])
      XCP(2,J)=math.log(XCOMF[J])
      YRY(1,J)=math.log(YRAYC[J]*1.D-24)
      YRY(2,J)=math.log(YRAYF[J]*4.0*1.D-24)
      YCP(1,J)=math.log(YCOMC[J]*1.D-24)
      YCP(2,J)=math.log(YCOMF[J]*4.0*1.D-24)
      YPP(1,J)=math.log(YPAPC[J]*1.D-24)
      YPP(2,J)=math.log(YPAPF[J]*4.0*1.D-24)
   28 CONTINUE
# LOAD RAYLEIGH AND COMPTON FORM FACTOR
      DO 29 J=1,45
      FFAR(1,J)=FFRC[J]
      FFAR(2,J)=FFRF[J]
      FFAC(1,J)=FFCC[J]
      FFAC(2,J)=FFCF[J]
   29 CONTINUE
      RETURN
      # end
      def CGAS2(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
      DIMENSION INIOC(17),PRBSH(17,17),ES(17),R(17,17),A[17,17,17],PRBSHBT(17)
      DIMENSION XPEK(38),YPEK(38),XPEL1(54),YPEL1(54),XPEL2(56),YPEL2(56),XPEL3(56),YPEL3(56),XPEM1(59),YPEM1(59),XPEM2(60),YPEM2(60),XPEM3(60),YPEM3(60),XENE(54),YRAY(54),YCOM(54),YPAP(54),FFR(45),FFC(45)
# 
# ARGON DATA FOR CASCADE CALCULATIONS
#
# LEVEL OCCUPANCY FOR GROUND STATE
      DATA INIOC/2,2,2,4,2,2,4,0,0,0,0,0,0,0,0,0,0/
# AVERAGE SHAKE OFF ELECTRON ENERGY
      DATA ES/22.5,9.10,9.90,9.90,2.20,1.60,1.60,0.00,0.00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
# SHAKE OFF DATA :  CARLSON AND NESTOR PHYS REV A8(1973)2887
# % PROBABILITY OF J SHELL SHAKE OFF FROM VACANCY IN SHELL I PROBSH(I,J)
      DATA PRBSH/.001,0.30,0.54,1.07,2.47,5.86,11.45,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,.017,.056,0.11,1.66,4.18,8.33,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,.049,.043,0.17,1.73,4.41,8.71,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,.050,.080,0.13,1.73,4.37,8.72,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.16,1.37,2.82,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.25,0.57,2.33,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.25,1.12,1.74,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,170*0.0/
# SHAKE OFF DATA : CARLSON,NESTOR ET AL PHYS REV 169(1968)27
# % PROBABILITY OF J SHELL SHAKE OFF FROM BETA DECAY PRSHBT[J]
      DATA PRBSHBT/.264,.914,.703,1.41,4.24,5.92,11.84,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00/
#
# AUGER AND COSTER-KRONIG TRANSITION RATES FOR K L M AND N SHELLS 
#  CHEN+CRASEMANN,ANDT 24(1979)13,  FOR K AND L SHELLS 
#  MCGUIRE,SANDIA REPORTS,          FOR M AND N SHELLS 
# K SHELL RATE (MILLIATOMIC UNITS) TO GET TO EV *0.0272105
      DATA A[1,2,2]/1.456/,A[1,2,3]/1.604/,A[1,2,4]/3.072/,A[1,2,5]/0.324/,A[1,2,6]/0.151/,A[1,2,7]/0.288/
      DATA A[1,3,3]/0.294/,A[1,3,4]/7.277/,A[1,3,5]/0.156/,A[1,3,6]/0.053/,A[1,3,7]/0.607/
      DATA A[1,4,4]/4.132/,A[1,4,5]/0.299/,A[1,4,6]/0.607/,A[1,4,7]/0.697/
      DATA A[1,5,5]/0.018/,A[1,5,6]/0.015/,A[1,5,7]/0.028/
      DATA A[1,6,7]/0.202/,A[1,7,7]/0.030/
# L1 SHELL RATE (MILLIATOMIC UNITS)
      DATA A[2,3,5]/17.780/,A[2,3,6]/7.404/,A[2,3,7]/7.482/
      DATA A[2,4,5]/34.607/,A[2,4,6]/7.308/,A[2,4,7]/20.792/
      DATA A[2,5,5]/0.767/,A[2,5,6]/1.203/,A[2,5,7]/2.380/
      DATA A[2,6,7]/0.007/A[2,7,7]/0.068/
# L2 AUGER SHELL RATE (MILLIATOMIC UNITS)
# L3 AUGER SHELL RATE (MILLIATOMIC UNITS)
      DATA A[4,5,5]/0.062/,A[4,5,6]/0.041/,A[4,5,7]/1.293/
      DATA A[4,6,7]/1.719/,A[4,7,7]/2.548/
# RADIATIVE TRANSITIONS SCOFIELD ANDT 14(1974)121
# DIPOLE AND HIGHER MULTIPOLES , RELATIVISTIC CALC. UNITS 1.519E15/SEC
# K-SHELL
      DATA R(1,2)/2.34E-9/,R(1,3)/.02226/,R(1,4)/.044/,R(1,5)/3.36E-10/,R(1,6)/1.822E-3/,R(1,7)/3.60E-3/
# L1 SHELL
      DATA R(2,3)/8.75E-6/,R(2,4)/1.97E-5/,R(2,5)/7.22E-14/,R(2,6)/7.18E-5/,R(2,7)/1.378E-4/
# L2 SHELL
      DATA R(3,4)/7.88E-14/,R(3,5)/2.43E-5/,R(3,6)/1.21E-14/,R(3,7)/1.05E-8/
# L3 SHELL
      DATA R(4,5)/2.48E-5/,R(4,6)/5.29E-9/,R(4,7)/5.19E-9/
# RADIATIVE TRANSITIONS MANSON AND KENNEDY ANDT 14(1974)111
# DIPOLE ONLY NON-RELATIVISTIC CALC.  UNITS   1/SEC
# M1 SHELL
      DATA R(5,6)/2.0708E9/,R(5,7)/4.1416E9/
# 
# PHOTOELECTRIC ABSORPTION X-SECTIONS FOR EACH SHELL: 
#    UNITS BARNS/ATOM AND ENERGIES IN EV
#  ASSEMBLED FROM: BAND ET AL.            ANDT 23(1979)443
#                : KENNEDY AND MANSON     PHYS REV A5(1972)227
#                : SCOFIELD               UCRL-51326
#                : SAMSON AND STOLTE      J.ELEC.SPEC. 123(2002)265
#                : CHAN ET AL             PHYS REV A46(1992)149
#                : MARR AND WEST          ANDT 18(1976)497
#                : VIEGELE                ATOMIC DATA 5(1973)50
# KSHELL 1S 1/2
      DATA YPEK/7.53E4,4.51E4,2.53E4,1.55E4,7.06E3,3.77E3,1.17E3,498.,146.,60.2,30.0,17.0,6.85,3.38,.938,.382,.111,.0485,.0264,.0165,.00839,.00522,.00244,.00152,8.31E-4,5.64E-4,4.24E-4,3.39E-4,2.41E-4,1.87E-4,1.19E-4,8.75E-5,5.70E-5,4.23E-5,3.36E-5,2.79E-5,2.08E-5,1.66E-5/
      DATA XPEK/3205.9,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# L1 SHELL 2S 1/2
      DATA YPEL1/3.20E5,3.38E5,3.35E5,3.26E5,3.15E5,2.92E5,2.72E5,2.62E5,1.77E5,1.19E5,9.46E4,8.06E4,6.79E4,5.89E4,2.64E4,1.43E4,5.71E3,2.86E3,1.64E3,1.03E3,483.,264.,84.9,37.0,11.1,4.66,2.35,1.34,.544,.270,.0755,.0308,.00903,.00394,.00215,.00135,6.83E-4,4.25E-4,1.99E-4,1.24E-4,6.78E-5,4.60E-5,3.46E-5,2.77E-5,1.97E-5,1.52E-5,9.73E-6,7.14E-6,4.65E-6,3.45E-6,2.74E-6,2.27E-6,1.69E-6,1.35E-6/
      DATA XPEL1/326.3,333.1,339.9,346.7,353.5,367.1,380.7,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# L2 SHELL 2P 1/2
      DATA YPEL2/1.80E6,1.31E6,9.57E5,8.67E5,8.37E5,8.17E5,7.80E5,6.87E5,6.10E5,5.40E5,2.65E5,1.36E5,9.40E4,7.28E4,5.60E4,4.56E4,1.37E4,5.61E3,1.51E3,577.,268.,142.,50.7,22.5,5.00,1.68,.354,.116,.0488,.0241,.00793,.00338,7.46E-4,2.63E-4,6.51E-5,2.57E-5,1.31E-5,7.72E-6,3.59E-6,2.08E-6,8.63E-7,5.36E-7,2.94E-7,2.00E-7,1.50E-7,1.20E-7,8.54E-8,6.61E-8,4.22E-8,3.09E-8,2.02E-8,1.50E-8,1.19E-8,9.86E-9,7.35E-9,5.86E-9/
      DATA XPEL2/250.6,257.4,264.2,271.0,277.8,291.4,305.0,332.2,359.4,386.6,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# L3 SHELL 2P 3/2
      DATA YPEL3/3.60E6,2.63E6,1.91E6,1.73E6,1.67E6,1.63E6,1.56E6,1.37E6,1.22E6,1.08E6,5.21E5,2.67E5,1.84E5,1.43E5,1.09E5,8.93E4,2.67E4,1.09E4,2.93E3,1.11E3,514.,271.,96.4,42.6,9.36,3.12,.647,.209,.0869,.0424,.0137,.00575,.00122,4.23E-4,1.03E-4,4.07E-5,2.10E-5,1.27E-5,6.22E-6,3.79E-6,1.72E-6,1.07E-6,5.86E-7,3.98E-7,2.99E-7,2.39E-7,1.70E-7,1.32E-7,8.41E-8,6.17E-8,4.02E-8,2.98E-8,2.37E-8,1.96E-8,1.46E-8,1.17E-8/
      DATA XPEL3/248.4,255.2,262.0,268.8,275.6,289.2,302.8,330.0,357.2,384.4,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# M1 SHELL 3S 1/2
      DATA YPEM1/5.6E4,1.87E5,2.62E5,3.07E5,3.27E5,3.27E5,3.07E5,2.54E5,2.08E5,1.79E5,1.36E5,7.16E4,4.04E4,2.39E4,1.49E4,1.15E4,9.67E3,8.05E3,7.00E3,3.04E3,1.62E3,639.,320.,183.,115.,54.1,29.6,9.53,4.17,1.26,.527,.266,.151,.0616,.0306,.00856,.00350,.00102,4.47E-4,2.44E-4,1.53E-4,7.75E-5,4.82E-5,2.26E-5,1.40E-5,7.70E-6,5.23E-6,3.93E-6,3.14E-6,2.24E-6,1.73E-6,1.10E-6,8.10E-7,5.28E-7,3.92E-7,3.11E-7,2.58E-7,1.92E-7,1.53E-8/
      DATA XPEM1/29.239,36.0,42.8,49.6,56.4,70.0,83.6,110.8,138.0,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# M2 SHELL 3P 1/2
      DATA YPEM2/10.3E6,11.9E6,11.3E6,7.23E6,3.33E6,8.83E5,2.43E5,1.67E5,2.25E5,2.81E5,3.24E5,3.58E5,3.77E5,3.80E5,3.79E5,3.69E5,3.45E5,3.25E5,2.97E5,2.80E5,2.38E5,2.00E5,1.67E5,1.40E5,1.09E5,7.40E4,3.58E4,1.81E4,9.65E3,6.82E3,5.37E3,4.19E3,3.44E3,1.09E3,458.,127.,49.4,23.3,12.4,4.49,2.01,.450,.152,.0322,.0106,.00446,.00221,7.29E-4,3.11E-4,6.85E-5,2.42E-5,5.98E-6,2.36E-6,1.20E-6,7.07E-7,3.27E-7,1.89E-7,7.82E-8,4.86E-8,5.31E-10/
      DATA XPEM2/15.937,20.0,25.0,30.0,35.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,100.,110.,120.,130.,150.,170.,190.,210.,245.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,1.0E8/
# M3 SHELL 3P 3/2
      DATA YPEM3/20.5E6,23.8E6,22.5E6,14.5E6,6.67E6,1.77E6,4.87E5,3.33E5,4.50E5,5.62E5,6.49E5,7.15E5,7.53E5,7.60E5,7.57E5,7.37E5,6.89E5,6.51E5,5.95E5,5.60E5,4.76E5,4.00E5,3.33E5,2.80E5,2.17E5,1.47E5,7.06E4,3.55E4,1.89E4,1.34E4,1.05E4,8.19E3,6.73E3,2.12E3,889.,246.,95.1,44.6,23.7,8.50,3.78,.839,.281,.0587,.0190,.00792,.00387,.00125,5.26E-4,1.12E-4,3.88E-5,9.43E-6,3.75E-6,1.94E-6,1.17E-6,5.75E-7,3.51E-7,1.62E-7,1.01E-7,1.10E-9/
      DATA XPEM3/15.760,20.0,25.0,30.0,35.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,100.,110.,120.,130.,150.,170.,190.,210.,245.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,1.0E8/
#  RAYLEIGH, COMPTON AND PAIR PR0DUCTION 
# HUBBEL J.PHYS.CHEM.REF.DATA 4(1975)471
# HUBBEL  NIST XCOM WEB SITE
# STORM AND ISRAEL NUCL.DATA TABLES A7(1970)565
      DATA XENE/100.,150.,200.,300.,400.,500.,600.,800.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.022D6,1.25D6,1.5D6,2.0D6,2.044'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
      DATA YRAY/215.5,215.2,215.0,214.2,213.2,211.9,210.3,206.5,201.7,187.2,170.5,138.2,112.4,93.45,79.70,61.33,49.16,30.22,20.01,10.72,      6.776,4.690,3.435,2.061,1.369,.6390,.3681,.1671,.09475,.06089,    .04238,.02389,.01531,.01466,9.804D-3,6.811D-3,3.833D-3,3.669D-3,1.704D-3,9.585D-4,         6.135D-4,4.260D-4,3.130D-4,2.397D-4,1.894D-4,1.534D-4,6.788D-5,3.818D-5,1.697D-5,9.545D-6,6.109D-6,4.242D-6,2.386D-6,1.527D-6/  
      DATA YCOM/5.185D-3,.01168,.02080,.04655,.08210,.1270,.1806,.3117,.4696,.9421,                        1.462,2.466,3.332,4.046,4.624,5.501,6.161,7.330,8.048,8.727,8.961,9.013,8.975,8.767,8.493,7.800,7.209,6.314,5.674,5.189,4.805,4.225,3.801,3.761,3.400,3.090,2.638,2.605,2.076,1.731,1.495,1.322,1.188,1.081,.9938,.9208,.6815,.5470,.3982,.3164,    .2641,.2276,.1795,.1490/      
# TOTAL PAIR PRODUCTION NUCLEAR + ELECTRON
      DATA YPAP/34*1.D-20,2.826D-3,.01507,.05880,.06336,.1665,.2700,    .3627,.4462,.5208,.5882,.6493,.7049,.9170,1.072,1.296,1.446,      1.563,1.650,1.779,1.876/   
# NORMALISED RAYLEIGH FORM FACTOR  Hubbel
      DATA FFR/1.0,.99967,.99889,.99761,.99578,.99339,.99056,.98333,.9744,.9506,  .9217,.9050,.8606,.8078,.7656,.7189,.6350,.5667,.4746,.4202,.3814,.3465,.3122,.2787,.2468,.1796,.1343,.08906,.07183,.06278,.05371,.04672,.03272,.02292,.01596,.0126,.005872,.001555,5.553D-4,1.744D-5,2.907D-6,1.250D-6,3.693D-10,2.99D-19,3.37D-28/  
      DATA FFC/5.6D-22,3.33D-4,.00133,.003011,.005328,.008283,.01185,.02073,.03172,.05906,  .09133,.1087,.1533,.1977,.2400,.2796,.3502,.4098,.4999,.5617,.6094,.6517,.6900,.7256,.7572,.8189,.8606,.9067,.9328,.9517,.9661,.9761,.9889,.9950,.99756,.99878,.99967,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0/
# ARGON ATOMIC NUMBER
      IZ[1]=18
      AMZ[1]=39.948
# CONVERT SHAKE OFF FROM A % TO A PROBABILITY
      DO 1 I=1,17
      PRSHBT(1,I)=PRBSHBT[I]/100.0
      DO 1 J=1,17
      PRBSH(I,J)=PRBSH(I,J)/100.0
    1 CONTINUE  
# SWAP INDICES AND DO CHECK SUM
      DO 2 I=1,17
      PRSUM=0
      DO 2 J=1,17
      PRSH(1,I,J)=PRBSH[J][I]
#     PRSUM=PRSUM+PRSH(I,J)
#     WRITE(6,888) I,PRSUM
# 888 print(' I=',I3,' PRSUM=','%.3f' %)
    2 CONTINUE
# LOAD SKAKE OFF ENERGIES AND LEVEL OCCUPATIONS
      DO 3 I=1,17
      ESH(1,I)=ES[I]
      INIOCC(1,I)=INIOC[I]
    3 CONTINUE
#
# AUGER PROBABILITIES IN ARRAY AUG(I,J,K) INITIAL VACANCY IN SHELL I,
# WITH TRANSITION TO SHELLS J,K
# LOAD OUTPUT ARRAYS AND CONVERT TO EV
      DO 4 I=1,4
      DO 4 J=1,17
      DO 4 K=1,17 
    4 AUG(1,I,J,K)=A[I,J,K]*0.0272105  
      DO 5 I=5,17
      DO 5 J=1,17
      DO 5 K=1,17
    5 AUG(1,I,J,K)=A[I,J,K]*0.00272105
# CHECK AUGER LEVEL SUMS
#     DO 7 I=1,17
#     ASUM=0.0
#     DO 6 J=1,17
#     DO 6 K=1,17
#   6 ASUM=ASUM+AUG(I,J,K)
#     WRITE(6,887) I,ASUM
# 887 print(' I=',I3,' ASUM=','%.3f' %)
#   7 CONTINUE
#  
# CONVERT RADIATIVE RATES IN M AND N SHELL TO EV 
      DO 12 I=5,17
      DO 12 J=6,17
   12 R(I,J)=R(I,J)*6.582119D-16
# LOAD OUTPUT ARRAY
      DO 13 I=1,17
      DO 13 J=1,17
   13 RAD[1,I,J]=R(I,J)
# PRINTOUT CHECK SUM
#     DO 15 I=1,17
#     RSUM=0.0
#     DO 14 J=1,17
#  14 RSUM=RSUM+R(I,J)
#     WRITE(6,100) I,RSUM
# 100 print(' SHELL =',I3,' RAD RATE EV=','%.3f' %)
#  15 CONTINUE
# LOAD PHOTOELECTRIC DATA
      DO 21 J=1,38
      XPE(1,1,J)=math.log(XPEK[J])
      YPE(1,1,J)=math.log(YPEK[J]*1.D-24)
   21 CONTINUE
      DO 22 J=1,54
      XPE(1,2,J)=math.log(XPEL1[J])
      YPE(1,2,J)=math.log(YPEL1[J]*1.D-24)
   22 CONTINUE 
      DO 23 J=1,55
      XPE(1,3,J)=math.log(XPEL2[J])
      YPE(1,3,J)=math.log(YPEL2[J]*1.D-24)
   23 CONTINUE 
      DO 24 J=1,55
      XPE(1,4,J)=math.log(XPEL3[J])
      YPE(1,4,J)=math.log(YPEL3[J]*1.D-24)
   24 CONTINUE 
      DO 25 J=1,59
      XPE(1,5,J)=math.log(XPEM1[J])
      YPE(1,5,J)=math.log(YPEM1[J]*1.D-24)
   25 CONTINUE 
      DO 26 J=1,60
      XPE(1,6,J)=math.log(XPEM2[J])
      YPE(1,6,J)=math.log(YPEM2[J]*1.D-24)
   26 CONTINUE 
      DO 27 J=1,60
      XPE(1,7,J)=math.log(XPEM3[J])
      YPE(1,7,J)=math.log(YPEM3[J]*1.D-24)
   27 CONTINUE 
# LOAD RAYLEIGH COMPTON AND PAIR PRODUCTION DATA
      DO 28 J=1,54
      XCP(1,J)=math.log(XENE[J])
      YRY(1,J)=math.log(YRAY[J]*1.D-24)
      YCP(1,J)=math.log(YCOM[J]*1.D-24)
      YPP(1,J)=math.log(YPAP[J]*1.D-24)
   28 CONTINUE
# LOAD RAYLEIGH AND COMPTON FORM FACTORS
      DO 29 J=1,45
      FFAR(1,J)=FFR[J]
      FFAC(1,J)=FFC[J]
   29 CONTINUE
      RETURN 
      # end
      def CGAS3(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
      DIMENSION INIOC(17),PRBSH(17,17),ES(17),R(17,17),A[17,17,17],PRBSHBT(17)
      DIMENSION XPEK(60),YPEK(60),XENE(54),YRAY(54),YCOM(54),YPAP(54),FFR(45),FFC(45)
# 
# HELIUM DATA FOR CASCADE CALCULATIONS
#
# LEVEL OCCUPANCY FOR GROUND STATE
      DATA INIOC/2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/
# AVERAGE SHAKE OFF ELECTRON ENERGY
      DATA ES/0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
# % PROBABILITY OF J SHELL SHAKE OFF FROM VACANCY IN SHELL I PROBSH(I,J)
      DATA PRBSH/289*0.0/
# SHAKE OFF DATA : CARLSON,NESTOR ET AL PHYS REV 169(1968)27
# % PROBABILITY OF J SHELL SHAKE OFF FROM BETA DECAY PRSHBT[J]
      DATA PRBSHBT/26.9,0.0,0.0,0.0,0.0,0.0,0.0,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00/
# AUGER RATES 
      DATA A/4913*0.0/
# RADIATIVE RATES 
      DATA R/289*0.0/
# 
# PHOTOELECTRIC ABSORPTION X-SECTIONS FOR EACH SHELL: 
#    UNITS BARNS/ATOM AND ENERGIES IN EV
#  ASSEMBLED FROM: BAND ET AL.            ANDT 23(1979)443
#                : SCOFIELD               UCRL-51326
#                : SAMSON AND STOLTE      J.ELEC.SPEC. 123(2002)265
# KSHELL 1S 1/2
      DATA YPEK/7.40E6,6.40E6,5.38E6,4.57E6,3.88E6,3.16E6,2.48E6,2.02E6,1.67E6,1.56E6,1.15E6,9.75E5,8.13E5,6.93E5,5.95E5,5.16E5,4.50E5,3.93E5,3.06E5,2.46E5,1.73E5,1.21E5,7.15E4,2.23E4,7.98E3,3.23E3,1.44E3,926.,688.,507.,402.,109.,43.2,11.2,4.23,2.03,1.10,.411,.194,.0487,.0183,.00457,.00171,7.95E-4,4.26E-4,1.60E-4,7.48E-5,1.92E-5,7.43E-6,2.05E-6,8.66E-7,4.64E-7,2.88E-7,1.45E-7,9.03E-8,4.14E-8,2.63E-8,1.49E-8,1.03E-8,3.28E-10/
      DATA XPEK/24.587,27.0,30.0,33.0,36.0,40.0,45.0,50.0,55.0,59.0,66.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,110.,120.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,1.0E8/
# RAYLEIGH COMPTON AND PAIR PRODUCTION X-SEC
# HUBBEL    J.PHYS CHEM REF DATA 4(1975)471
# HUBBEL    NIST XCOM WEB SITE
# STORM AND ISRAEL      NUCL DATA TABLES A7(1970)565
      DATA XENE/100.,150.,200.,300.,400.,500.,600.,800.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.022D6,1.25D6,1.5D6,2.0D6,2.044'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
      DATA YRAY/2.660,2.658,2.655,2.648,2.637,2.624,2.608,2.567,2.517,2.356,2.162,1.743,1.369,1.072,.8492,.5592,.3921,.1962,.1166,.05432,     .03113,.02010,.01403,7.933D-3,5.089D-3,2.267D-3,1.276D-3,5.676D-4,3.194D-4,2.044D-4,         1.420D-4,7.986D-5,5.111D-5,4.894D-5,3.272D-5,2.272D-5,1.278D-5,1.224D-5,5.680D-6,3.195D-6,2.045D-6,1.420D-6,1.043D-6,7.988D-7,6.312D-7,5.112D-7,2.272D-7,1.278D-7,5.679D-8,3.194D-8,2.044D-8,1.420D-8,7.984D-9,5.109D-9/  
      DATA YCOM/1.524D-3,2.559D-3,3.793D-3,7.081D-3,1.183D-2,1.796D-2,2.543D-2,4.426D-2,6.759D-2,0.1419,.2317,.4230,.5948,.7328,.8385,.9785,1.059,1.145,1.168,1.163,1.139,1.111,1.083,1.030,.9825,.8860,.8124,.7068,.6334,.5785,.5352,.4702,.4228,.4183,.3780,.3436,.2932,.2896,.2307,.1924,.1662,.1469,.1320,.1201,.1104,.1023,.07573,.06078,.04425,.03516,.02935,.02529,.01994,.01655/  
# TOTAL PAIR PRODUCTION NUCLEAR + ELECTRON
      DATA YPAP/34*1.D-20,3.127D-5,1.755D-4,7.034D-4,7.584D-4,2.101D-3,3.611D-3,5.061D-3,6.427D-3,7.681D-3,8.838D-3,9.906D-3,1.089D-2,1.473D-2,1.792D-2,.0222,.0253,      .0277,.0296,.0326,.0351/                  
# NORMALISED RAYLEIGH FORM FACTOR  Hubbel
      DATA FFR/1.0,.99975,.99910,.9980,.9965,.9945,.9920,.9860,.9785,.9585,.9330,.9180,.8775,.8305,.7800,.7290,.6260,.5295,.3690,.2547,.1771,.1247,.8930,.06495,.04806,.02420,.01326,4.82D-3,2.098D-3,1.046D-3,5.770D-4,3.428D-4,1.427D-4,6.945D-5,3.770D-5,2.218D-5,9.130D-6,1.813D-6,5.755D-7,1.487D-8,2.289D-9,9.425D-10,1.173D-13,2.56D-23,2.56D-32/
# NORMALISED COMPTON FORM FACTOR  Hubbel
      DATA FFC/5.D-21,.00105,.00250,.00440,.00705,.01029,.01495,.02595,.04027,.07675,.1225,.1478,.2161,.2917,.3680,.4403,.5730,.6810,.8285,.9090,.9510,.9735,.9850,.9915,.99495,.99855,.99950,.99995,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0/
# HELIUM ATOMIC NUMBER
      IZ[1]=2 
      AMZ[1]=4.002602
# CONVERT SHAKE OFF FROM A % TO A PROBABILITY
      DO 1 I=1,17
      PRSHBT(1,I)=PRBSHBT[I]/100.0
      DO 1 J=1,17
      PRBSH(I,J)=PRBSH(I,J)/100.0
    1 CONTINUE  
# SWAP INDICES AND DO CHECK SUM
      DO 2 I=1,17
      PRSUM=0
      DO 2 J=1,17
      PRSH(1,I,J)=PRBSH[J][I]
#     PRSUM=PRSUM+PRSH(I,J)
#     WRITE(6,888) I,PRSUM
# 888 print(' I=',I3,' PRSUM=','%.3f' %)
    2 CONTINUE
# LOAD SKAKE OFF ENERGIES AND LEVEL OCCUPATIONS
      DO 3 I=1,17
      ESH(1,I)=ES[I]
      INIOCC(1,I)=INIOC[I]
    3 CONTINUE
#
# AUGER PROBABILITIES IN ARRAY AUG(I,J,K) INITIAL VACANCY IN SHELL I,
# WITH TRANSITION TO SHELLS J,K
# LOAD OUTPUT ARRAYS AND CONVERT TO EV
      DO 4 I=1,4
      DO 4 J=1,17
      DO 4 K=1,17 
    4 AUG(1,I,J,K)=A[I,J,K]*0.0272105  
      DO 5 I=5,17
      DO 5 J=1,17
      DO 5 K=1,17
    5 AUG(1,I,J,K)=A[I,J,K]*0.00272105
# CHECK AUGER LEVEL SUMS
#     DO 7 I=1,17
#     ASUM=0.0
#     DO 6 J=1,17
#     DO 6 K=1,17
#   6 ASUM=ASUM+AUG(I,J,K)
#     WRITE(6,887) I,ASUM
# 887 print(' I=',I3,' ASUM=','%.3f' %)
#   7 CONTINUE
#  
# CONVERT RADIATIVE RATES IN M AND N SHELL TO EV 
      DO 12 I=5,17
      DO 12 J=6,17
   12 R(I,J)=R(I,J)*6.582119D-16
# LOAD OUTPUT ARRAY
      DO 13 I=1,17
      DO 13 J=1,17
   13 RAD[1,I,J]=R(I,J)
# PRINTOUT CHECK SUM
#     DO 15 I=1,17
#     RSUM=0.0
#     DO 14 J=1,17
#  14 RSUM=RSUM+R(I,J)
#     WRITE(6,100) I,RSUM
# 100 print(' SHELL =',I3,' RAD RATE EV=','%.3f' %)
#  15 CONTINUE
# LOAD PHOTOELECTRIC DATA
      DO 21 J=1,60
      XPE(1,1,J)=math.log(XPEK[J])
      YPE(1,1,J)=math.log(YPEK[J]*1.D-24)
   21 CONTINUE
# LOAD RAYLEIGH COMPTON AND PAIR PRODUCTION X-SEC
      DO 22 J=1,54
      XCP(1,J)=math.log(XENE[J])
      YRY(1,J)=math.log(YRAY[J]*1.D-24)
      YCP(1,J)=math.log(YCOM[J]*1.D-24)
      YPP(1,J)=math.log(YPAP[J]*1.D-24)
   22 CONTINUE
# LOAD RAYLEIGH AND COMPTON FORM FACTORS
      DO 23 J=1,45
      FFAR(1,J)=FFR[J]
      FFAC(1,J)=FFC[J]
   23 CONTINUE
      RETURN 
      # end
      def CGAS4(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
      DIMENSION INIOC(17),PRBSH(17,17),ES(17),R(17,17),A[17,17,17],PRBSHBT(17)
      DIMENSION XPEK(60),YPEK(60),XENE(54),YRAY(54),YCOM(54),YPAP(54),FFR(45),FFC(45)  
# 
# HELIUM DATA FOR CASCADE CALCULATIONS
#
# LEVEL OCCUPANCY FOR GROUND STATE
      DATA INIOC/2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/
# AVERAGE SHAKE OFF ELECTRON ENERGY
      DATA ES/0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
# % PROBABILITY OF J SHELL SHAKE OFF FROM VACANCY IN SHELL I PROBSH(I,J)
      DATA PRBSH/289*0.0/
# SHAKE OFF DATA : CARLSON,NESTOR ET AL PHYS REV 169(1968)27
# % PROBABILITY OF J SHELL SHAKE OFF FROM BETA DECAY PRSHBT[J]
      DATA PRBSHBT/26.9,0.0,0.0,0.0,0.0,0.0,0.0,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00/
# AUGER RATES 
      DATA A/4913*0.0/
# RADIATIVE RATES 
      DATA R/289*0.0/
# 
# PHOTOELECTRIC ABSORPTION X-SECTIONS FOR EACH SHELL: 
#    UNITS BARNS/ATOM AND ENERGIES IN EV
#  ASSEMBLED FROM: BAND ET AL.            ANDT 23(1979)443
#                : SCOFIELD               UCRL-51326
#                : SAMSON AND STOLTE      J.ELEC.SPEC. 123(2002)265
# KSHELL 1S 1/2
      DATA YPEK/7.40E6,6.40E6,5.38E6,4.57E6,3.88E6,3.16E6,2.48E6,2.02E6,1.67E6,1.56E6,1.15E6,9.75E5,8.13E5,6.93E5,5.95E5,5.16E5,4.50E5,3.93E5,3.06E5,2.46E5,1.73E5,1.21E5,7.15E4,2.23E4,7.98E3,3.23E3,1.44E3,926.,688.,507.,402.,109.,43.2,11.2,4.23,2.03,1.10,.411,.194,.0487,.0183,.00457,.00171,7.95E-4,4.26E-4,1.60E-4,7.48E-5,1.92E-5,7.43E-6,2.05E-6,8.66E-7,4.64E-7,2.88E-7,1.45E-7,9.03E-8,4.14E-8,2.63E-8,1.49E-8,1.03E-8,3.28E-10/
      DATA XPEK/24.587,27.0,30.0,33.0,36.0,40.0,45.0,50.0,55.0,59.0,66.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,110.,120.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,1.0E8/
# RAYLEIGH COMPTON AND PAIR PRODUCTION X-SEC DATA
# HUBBEL        J.PHYS.CHEM.REF.DATA  4(1975)471
# HUBBEL        NIST XCOM  WEB SITE
# STORM AND ISRAEL    NUCL DATA TABLES A7(1970)565
      DATA XENE/100.,150.,200.,300.,400.,500.,600.,800.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.022D6,1.25D6,1.5D6,2.0D6,2.044'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
      DATA YRAY/2.660,2.658,2.655,2.648,2.637,2.624,2.608,2.567,2.517,2.356,2.162,1.743,1.369,1.072,.8492,.5592,.3921,.1962,.1166,.05432,     .03113,.02010,.01403,7.933D-3,5.089D-3,2.267D-3,1.276D-3,5.676D-4,3.194D-4,2.044D-4,         1.420D-4,7.986D-5,5.111D-5,4.894D-5,3.272D-5,2.272D-5,1.278D-5,1.224D-5,5.680D-6,3.195D-6,2.045D-6,1.420D-6,1.043D-6,7.988D-7,6.312D-7,5.112D-7,2.272D-7,1.278D-7,5.679D-8,3.194D-8,2.044D-8,1.420D-8,7.984D-9,5.109D-9/  
      DATA YCOM/1.524D-3,2.559D-3,3.793D-3,7.081D-3,1.183D-2,1.796D-2,2.543D-2,4.426D-2,6.759D-2,0.1419,.2317,.4230,.5948,.7328,.8385,.9785,1.059,1.145,1.168,1.163,1.139,1.111,1.083,1.030,.9825,.8860,.8124,.7068,.6334,.5785,.5352,.4702,.4228,.4183,.3780,.3436,.2932,.2896,.2307,.1924,.1662,.1469,.1320,.1201,.1104,.1023,.07573,.06078,.04425,.03516,.02935,.02529,.01994,.01655/  
# TOTAL PAIR PRODUCTION NUCLEAR + ELECTRON
      DATA YPAP/34*1.D-20,3.127D-5,1.755D-4,7.034D-4,7.584D-4,2.101D-3,3.611D-3,5.061D-3,6.427D-3,7.681D-3,8.838D-3,9.906D-3,1.089D-2,1.473D-2,1.792D-2,.0222,.0253,      .0277,.0296,.0326,.0351/                  
# NORMALISED RAYLEIGH FORM FACTOR  Hubbel
      DATA FFR/1.0,.99975,.99910,.9980,.9965,.9945,.9920,.9860,.9785,.9585,.9330,.9180,.8775,.8305,.7800,.7290,.6260,.5295,.3690,.2547,.1771,.1247,.8930,.06495,.04806,.02420,.01326,4.82D-3,2.098D-3,1.046D-3,5.770D-4,3.428D-4,1.427D-4,6.945D-5,3.770D-5,2.218D-5,9.130D-6,1.813D-6,5.755D-7,1.487D-8,2.289D-9,9.425D-10,1.173D-13,2.56D-23,2.56D-32/
# NORMALISED COMPTON FORM FACTOR  Hubbel
      DATA FFC/5.D-21,.00105,.00250,.00440,.00705,.01029,.01495,.02595,.04027,.07675,.1225,.1478,.2161,.2917,.3680,.4403,.5730,.6810,.8285,.9090,.9510,.9735,.9850,.9915,.99495,.99855,.99950,.99995,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0/
# HELIUM ATOMIC NUMBER
      IZ[1]=2 
      AMZ[1]=3.01600  
# CONVERT SHAKE OFF FROM A % TO A PROBABILITY
      DO 1 I=1,17
      PRSHBT(1,I)=PRBSHBT[I]/100.0
      DO 1 J=1,17
      PRBSH(I,J)=PRBSH(I,J)/100.0
    1 CONTINUE  
# SWAP INDICES AND DO CHECK SUM
      DO 2 I=1,17
      PRSUM=0
      DO 2 J=1,17
      PRSH(1,I,J)=PRBSH[J][I]
#     PRSUM=PRSUM+PRSH(I,J)
#     WRITE(6,888) I,PRSUM
# 888 print(' I=',I3,' PRSUM=','%.3f' %)
    2 CONTINUE
# LOAD SKAKE OFF ENERGIES AND LEVEL OCCUPATIONS
      DO 3 I=1,17
      ESH(1,I)=ES[I]
      INIOCC(1,I)=INIOC[I]
    3 CONTINUE
#
# AUGER PROBABILITIES IN ARRAY AUG(I,J,K) INITIAL VACANCY IN SHELL I,
# WITH TRANSITION TO SHELLS J,K
# LOAD OUTPUT ARRAYS AND CONVERT TO EV
      DO 4 I=1,4
      DO 4 J=1,17
      DO 4 K=1,17 
    4 AUG(1,I,J,K)=A[I,J,K]*0.0272105  
      DO 5 I=5,17
      DO 5 J=1,17
      DO 5 K=1,17
    5 AUG(1,I,J,K)=A[I,J,K]*0.00272105
# CHECK AUGER LEVEL SUMS
#     DO 7 I=1,17
#     ASUM=0.0
#     DO 6 J=1,17
#     DO 6 K=1,17
#   6 ASUM=ASUM+AUG(I,J,K)
#     WRITE(6,887) I,ASUM
# 887 print(' I=',I3,' ASUM=','%.3f' %)
#   7 CONTINUE
#  
# CONVERT RADIATIVE RATES IN M AND N SHELL TO EV 
      DO 12 I=5,17
      DO 12 J=6,17
   12 R(I,J)=R(I,J)*6.582119D-16
# LOAD OUTPUT ARRAY
      DO 13 I=1,17
      DO 13 J=1,17
   13 RAD[1,I,J]=R(I,J)
# PRINTOUT CHECK SUM
#     DO 15 I=1,17
#     RSUM=0.0
#     DO 14 J=1,17
#  14 RSUM=RSUM+R(I,J)
#     WRITE(6,100) I,RSUM
# 100 print(' SHELL =',I3,' RAD RATE EV=','%.3f' %)
#  15 CONTINUE
# LOAD PHOTOELECTRIC DATA
      DO 21 J=1,60
      XPE(1,1,J)=math.log(XPEK[J])
      YPE(1,1,J)=math.log(YPEK[J]*1.D-24)
   21 CONTINUE
# LOAD RAYLEIGH COMPTON AND PAIR PRODUCTION X-SEC
      DO 22 J=1,54
      XCP(1,J)=math.log(XENE[J])
      YRY(1,J)=math.log(YRAY[J]*1.D-24)
      YCP(1,J)=math.log(YCOM[J]*1.D-24)
      YPP(1,J)=math.log(YPAP[J]*1.D-24)
   22 CONTINUE
# LOAD RAYLEIGH AND COMPTON FORM FACTORS
      DO 23 J=1,45
      FFAR(1,J)=FFR[J]
      FFAC(1,J)=FFC[J]
   23 CONTINUE
      RETURN 
      # end
      def CGAS5(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
      DIMENSION INIOC(17),PRBSH(17,17),ES(17),R(17,17),A[17,17,17],PRBSHBT(17)
      DIMENSION XPEK(42),YPEK(42),XPEL1(58),YPEL1(58),XPEL2(60),YPEL2(60),XPEL3(60),YPEL3(60),XENE(54),YRAY(54),YCOM(54),YPAP(54),FFR(45),FFC(45)
# 
# NEON  DATA FOR CASCADE CALCULATIONS
#
# LEVEL OCCUPANCY FOR GROUND STATE
      DATA INIOC/2,2,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0/
# AVERAGE SHAKE OFF ELECTRON ENERGY
      DATA ES/15.9,3.40,3.20,3.20,0.00,0.00,0.00,0.00,0.00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
# SHAKE OFF DATA :  CARLSON AND NESTOR PHYS REV A8(1973)2887
# % PROBABILITY OF J SHELL SHAKE OFF FROM VACANCY IN SHELL I PROBSH(I,J)
      DATA PRBSH/.030,1.71,5.44,10.63,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.16,1.48,2.98,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.34,0.78,3.14,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.34,1.55,2.35,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,221*0.0/
# SHAKE OFF DATA : CARLSON,NESTOR ET AL PHYS REV 169(1968)27
# % PROBABILITY OF J SHELL SHAKE OFF FROM BETA DECAY PRSHBT[J]
      DATA PRBSHBT/1.03,4.77,5.55,11.10,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00/
#
# AUGER AND COSTER-KRONIG TRANSITION RATES FOR K AND L SHELLS 
#  WALTERS AND BHALLA (1971)
# K SHELL RATE (MILLIATOMIC UNITS) TO GET TO EV *0.0272105
      DATA A[1,2,2]/0.820/,A[1,2,3]/0.8315/,A[1,2,4]/1.5925/
      DATA A[1,3,3]/0.140/,A[1,3,4]/3.47/
      DATA A[1,4,4]/1.97/
# RADIATIVE TRANSITIONS SCOFIELD ANDT 14(1974)121
# DIPOLE AND HIGHER MULTIPOLES , RELATIVISTIC CALC. UNITS 1.519E15/SEC
# K-SHELL
      DATA R(1,2)/3.55E-12/,R(1,3)/.001128/,R(1,4)/.002242/
# L1 SHELL
      DATA R(2,3)/2.23E-6/,R(2,4)/4.54E-6/
# L2 SHELL
      DATA R(3,4)/8.70E-18/
# 
# PHOTOELECTRIC ABSORPTION X-SECTIONS FOR EACH SHELL: 
#    UNITS BARNS/ATOM AND ENERGIES IN EV
#  ASSEMBLED FROM: BAND ET AL.            ANDT 23(1979)443
#                : KENNEDY AND MANSON     PHYS REV A5(1972)227
#                : SCOFIELD               UCRL-51326
#                : SAMSON AND STOLTE      J.ELEC.SPEC. 123(2002)265
#                : CHAN ET AL             PHYS REV A45(1992)1420
#                : VIEGELE                ATOMIC DATA 5(1973)50
#                : BIZAU ET AL            J.ELEC.SPEC. 71(1995)205
# K  SHELL 1S 1/2
      DATA YPEK/3.60E5,2.32E5,8.40E4,3.92E4,1.28E4,5.61E3,2.92E3,1.70E3,717.,363.,103.,41.6,11.4,4.49,2.17,1.20,.468,.225,.0602,.0240,.00680,.00293,.00158,9.86E-4,4.98E-4,3.10E-4,1.46E-4,9.16E-5,5.09E-5,3.49E-5,2.64E-5,2.12E-5,1.52E-5,1.18E-5,7.57E-6,5.57E-6,3.64E-6,2.70E-6,2.15E-6,1.78E-6,1.33E-6,1.06E-6/
      DATA XPEK/870.2,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# L1 SHELL 2S 1/2
      DATA YPEL1/2.69E5,4.04E5,5.03E5,5.48E5,6.21E5,5.60E5,5.24E5,4.38E5,3.76E5,2.90E5,1.51E5,8.05E4,4.47E4,2.61E4,1.93E4,1.57E4,1.26E4,1.06E4,3.95E3,
     1.90E3,643.,290.,154.,91.2,39.1,20.0,5.78,2.35,.651,.258,.125,.0693,.0271,.0131,.00351,.00140,3.98E-4,1.71E-4,9.24E-5,5.76E-5,2.91E-5,1.81E-5,8.52E-6,5.34E-6,2.97E-6,2.03E-6,1.54E-6,1.24E-6,8.85E-7,6.88E-7,4.42E-7,3.25E-7,2.12E-7,1.58E-7,1.25E-7,1.04E-7,7.77E-8,6.19E-8/
      DATA XPEL1/48.475,55.3,62.1,68.3,75.7,89.3,102.9,132.3,151.3,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/          
# L2 SHELL 2P 1/2
      DATA YPEL2/2.13E6,2.57E6,2.87E6,2.98E6,2.98E6,2.87E6,2.50E6,2.14E6,1.82E6,1.57E6,1.35E6,1.14E6,9.49E5,7.91E5,6.35E5,4.43E5,2.86E5,9.54E4,3.52E4,1.46E4,6.60E3,4.25E3,3.15E3,2.32E3,1.82E3,459.,167.,38.5,13.2,5.64,2.78,.901,.372,.0734,.0230,.00444,.00138,5.57E-4,2.67E-4,8.43E-5,3.49E-5,7.30E-6,2.50E-6,5.98E-7,2.31E-7,1.16E-7,6.78E-8,3.10E-8,1.78E-8,7.27E-9,4.56E-9,2.54E-9,1.74E-9,1.31E-9,1.06E-9,7.55E-10,5.87E-10,3.77E-10,2.77E-10,5.28E-11/
      DATA XPEL2/21.661,24.0,27.0,30.0,35.0,40.0,50.0,60.0,70.0,80.0,90.0,100.,110.,120.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,1.0E8/
# L3 SHELL 2P 3/2
      DATA YPEL3/4.25E6,5.14E6,5.73E6,5.97E6,2.98E6,2.87E6,5.00E6,4.29E6,3.64E6,3.13E6,2.69E6,2.28E6,1.90E6,1.58E6,1.26E6,9.20E5,5.68E5,1.89E5,6.98E4,2.89E4,1.30E4,8.41E3,6.23E3,4.57E3,3.60E3,903.,328.,75.6,25.8,11.0,5.43,1.75,.720,.141,.0439,.00837,.00257,.00103,4.88E-4,1.52E-4,6.19E-5,1.26E-5,4.26E-6,1.01E-6,3.96E-7,2.04E-7,1.23E-7,6.04E-8,3.70E-8,1.72E-8,1.08E-8,6.00E-9,4.11E-9,3.11E-9,2.50E-9,1.79E-9,1.39E-9,8.91E-10,6.56E-10,1.25E-10/
      DATA XPEL3/21.565,24.0,27.0,30.0,35.0,40.0,50.0,60.0,70.0,80.0,90.0,100.,110.,120.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,1.0E8/
# RAYLEIGH COMPTON AND PAIR PRODUCTION  DATA
# HUBBEL        J.PHYS.CHEM.REF.DATA 4(1975)471
# HUBBEL        NIST XCOM WEB SITE
# STORM AND ISRAEL     NUCL.DATA TABLES A7(1970)565
      DATA XENE/100.,150.,200.,300.,400.,500.,600.,800.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.022D6,1.25D6,1.5D6,2.0D6,2.044'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
      DATA YRAY/66.51,66.46,66.41,66.26,66.05,65.79,65.47,64.67,63.67,60.42,56.40,47.42,38.86,31.65,25.94,18.11,13.35,7.460,4.877,2.590,      1.596,1.078,.7754,.4563,.2998,.1376,.07840,.03519,.01987,.01274,  8.853D-3,4.985D-3,3.191D-3,3.056D-3,2.043D-3,1.419D-3,7.983D-4,7.643D-4,3.549D-4,1.996D-4,1.278D-4,8.872D-5,6.518D-5,4.991D-5,3.943D-5,3.194D-5,1.425D-5,8.017D-6,3.563D-6,2.004D-6,1.283D-6,8.905D-7,5.011D-7,3.206D-7/  
      DATA YCOM/1.835D-3,4.309D-3,7.696D-3,.01731,.03067,.04770,.06825,.1196,.1836,.3902,                  .6452,1.221,1.796,2.320,2.774,3.473,3.949,4.603,4.926,5.214,5.287,5.264,5.198,5.017,4.823,4.388,4.038,3.523,3.161,2.889,2.673,2.350,2.113,2.091,1.889,1.718,1.466,1.448,1.153,.9620,.8308,.7343,.6600,.6006,.5521,.5116,.3786,.3039,.2212,.1758,    .1467,.1264,.09972,.08276/    
# TOTAL PAIR PRODUCTION NUCLEAR + ELECTRON
      DATA YPAP/34*1.D-20,8.090D-4,4.464D-3,.01775,.01913,.05108,.08379,.1135,.1403,.1644,.1863,.2062,.2244,.2942,.3473,.4212,.4730,      .5120,.5417,.5872,.6210/   
# NORMALISED RAYLEIGH FORM FACTOR  Hubbel
      DATA FFR/1.,.99978,.99926,.9984,.9972,.9957,.9938,.9891,.9830,.9672,.9468,.9352,.9019,.8643,.8233,.7803,.6925,.6076,.4614,.3531,.2786,.2293,.1969,.1754,.1607,.1379,.1217,.09266,.06781,.05136,   .03491,.02782,.01363,.007790,.004690,.003580,.001360,.0003075,.0001015,2.822D-6,4.507D-7,1.897D-7,4.044D-11,2.45D-20,2.54D-29/
# NORMALISED COMPTON FORM FACTOR  Hubbel
      DATA FFC/1.D-21,.000200,.00090,.00201,.00357,.00556,.00799,.01410,.02180,.04177, .06694,.08120,.1205,.1637,.2088,.2547,.3442,.4269,.5644,.6640,.7320,.7774,.8085,.8312,.8490,.8836,.9113,.9517,.9752,.9875,.99368,.99670,.99906,.99969,.99989,1.,1.,1.,1.,1.,1.,1.,1.,1.,1./
# NEON ATOMIC NUMBER
      IZ[1]=10
      AMZ[1]=20.1797
# CONVERT SHAKE OFF FROM A % TO A PROBABILITY
      DO 1 I=1,17
      PRSHBT(1,I)=PRBSHBT[I]/100.0
      DO 1 J=1,17
      PRBSH(I,J)=PRBSH(I,J)/100.0
    1 CONTINUE  
# SWAP INDICES AND DO CHECK SUM
      DO 2 I=1,17
      PRSUM=0
      DO 2 J=1,17
      PRSH(1,I,J)=PRBSH[J][I]
#     PRSUM=PRSUM+PRSH(I,J)
#     WRITE(6,888) I,PRSUM
# 888 print(' I=',I3,' PRSUM=','%.3f' %)
    2 CONTINUE
# LOAD SKAKE OFF ENERGIES AND LEVEL OCCUPATIONS
      DO 3 I=1,17
      ESH(1,I)=ES[I]
      INIOCC(1,I)=INIOC[I]
    3 CONTINUE
#
# AUGER PROBABILITIES IN ARRAY AUG(I,J,K) INITIAL VACANCY IN SHELL I,
# WITH TRANSITION TO SHELLS J,K
# LOAD OUTPUT ARRAYS AND CONVERT TO EV
      DO 4 I=1,4
      DO 4 J=1,17
      DO 4 K=1,17 
    4 AUG(1,I,J,K)=A[I,J,K]*0.0272105  
      DO 5 I=5,17
      DO 5 J=1,17
      DO 5 K=1,17
    5 AUG(1,I,J,K)=A[I,J,K]*0.00272105
# CHECK AUGER LEVEL SUMS
#     DO 7 I=1,17
#     ASUM=0.0
#     DO 6 J=1,17
#     DO 6 K=1,17
#   6 ASUM=ASUM+AUG(I,J,K)
#     WRITE(6,887) I,ASUM
# 887 print(' I=',I3,' ASUM=','%.3f' %)
#   7 CONTINUE
#  
# CONVERT RADIATIVE RATES IN M AND N SHELL TO EV 
      DO 12 I=5,17
      DO 12 J=6,17
   12 R(I,J)=R(I,J)*6.582119D-16
# LOAD OUTPUT ARRAY
      DO 13 I=1,17
      DO 13 J=1,17
   13 RAD[1,I,J]=R(I,J)
# PRINTOUT CHECK SUM
#     DO 15 I=1,17
#     RSUM=0.0
#     DO 14 J=1,17
#  14 RSUM=RSUM+R(I,J)
#     WRITE(6,100) I,RSUM
# 100 print(' SHELL =',I3,' RAD RATE EV=','%.3f' %)
#  15 CONTINUE
# LOAD PHOTOELECTRIC DATA
      DO 21 J=1,42
      XPE(1,1,J)=math.log(XPEK[J])
      YPE(1,1,J)=math.log(YPEK[J]*1.D-24)
   21 CONTINUE
      DO 22 J=1,58
      XPE(1,2,J)=math.log(XPEL1[J])
      YPE(1,2,J)=math.log(YPEL1[J]*1.D-24)
   22 CONTINUE 
      DO 23 J=1,60 
      XPE(1,3,J)=math.log(XPEL2[J])
      YPE(1,3,J)=math.log(YPEL2[J]*1.D-24)
   23 CONTINUE 
      DO 24 J=1,60
      XPE(1,4,J)=math.log(XPEL3[J])
      YPE(1,4,J)=math.log(YPEL3[J]*1.D-24)
   24 CONTINUE 
# LOAD RAYLEIGH COMPTON AND PAIR PRODUCTION X-SEC
      DO 25 J=1,54
      XCP(1,J)=math.log(XENE[J])
      YRY(1,J)=math.log(YRAY[J]*1.D-24)
      YCP(1,J)=math.log(YCOM[J]*1.D-24)
      YPP(1,J)=math.log(YPAP[J]*1.D-24)
   25 CONTINUE
# LOAD RAYLEIGH AND COMPTON FORM FACTORS
      DO 26 J=1,45
      FFAR(1,J)=FFR[J]
      FFAC(1,J)=FFC[J]
   26 CONTINUE
      RETURN 
      # end
      def CGAS6(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
      DIMENSION INIOC(17),PRBSH(17,17),ES(17),R(17,17),A[17,17,17],PRBSHBT(17)
      DIMENSION XPEK(33),YPEK(33),XPEL1(40),YPEL1(40),XPEL2(40),YPEL2(40),XPEL3(40),YPEL3(40),XPEM1(48),YPEM1(48),XPEM2(49),YPEM2(49),XPEM3(49),YPEM3(49),XPEM4(59),YPEM4(59),XPEM5(59),YPEM5(59),XPEN1(59),YPEN1(59),XPEN2(60),YPEN2(60),XPEN3(60),YPEN3(60),XENE(54),YRAY(54),YCOM(54),YPAP(54),FFR(45),FFC(45)
# 
# KRYPTON DATA FOR CASCADE CALCULATIONS
#
# LEVEL OCCUPANCY FOR GROUND STATE
      DATA INIOC/2,2,2,4,2,2,4,4,6,2,2,4,0,0,0,0,0/
# AVERAGE SHAKE OFF ELECTRON ENERGY
      DATA ES/33.4,17.7,19.2,19.3,7.80,7.80,7.70,7.80,7.70,2.0,1.4,1.3,0.0,0.0,0.0,0.0,0.0/
# SHAKE OFF DATA :  CARLSON AND NESTOR PHYS REV A8(1973)2887
# % PROBABILITY OF J SHELL SHAKE OFF FROM VACANCY IN SHELL I PROBSH(I,J)
      DATA PRBSH/.002,.060,.089,.180,.220,0.38,0.75,1.43,2.13,1.80,4.39,9.06,0.00,0.00,0.00,0.00,0.00,0.00,.002,.007,.014,.089,.150,.310,1.36,2.04,1.50,3.78,7.97,0.00,0.00,0.00,0.00,0.00,0.00,.008,.006,.026,.099,.180,.360,1.42,2.14,1.53,3.86,8.13,0.00,0.00,0.00,0.00,0.00,0.00,.008,.011,.018,.097,.170,.360,1.41,2.12,1.52,3.84,8.10,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,.006,.020,.045,0.32,0.50,1.22,3.26,6.97,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,.012,.010,.048,0.33,0.51,1.21,3.26,6.96,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,.011,.020,.034,0.31,0.48,1.20,3.24,6.95,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,.012,.023,.050,0.27,0.55,1.19,3.22,6.88,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,.012,.022,.049,0.35,0.45,1.18,3.21,6.87,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,.003,.004,0.14,1.33,3.02,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,.001,.002,0.20,0.50,2.31,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,.001,.001,0.18,0.96,1.66,0.00,0.00,0.00,0.00,0.00,85*0.0/
# SHAKE OFF DATA : CARLSON,NESTOR ET AL PHYS REV 169(1968)27
# % PROBABILITY OF J SHELL SHAKE OFF FROM BETA DECAY PRSHBT[J]
      DATA PRBSHBT/.0723,.185,.124,.230,.438,.446,.852,1.32,1.96,2.39,4.53,9.23,0.00,0.00,0.00,0.00,0.00/
#
# AUGER AND COSTER-KRONIG TRANSITION RATES FOR K L M AND N SHELLS 
#  CHEN+CRASEMANN,ANDT 24(1979)13,  FOR K AND L SHELLS 
#  MCGUIRE,SANDIA REPORTS,          FOR M AND N SHELLS 
# K SHELL RATE (MILLIATOMIC UNITS) TO GET TO EV *0.0272105
      DATA A[1,2,2]/2.402/,A[1,2,3]/2.697/,A[1,2,4]/4.434/,A[1,2,5]/0.713/,A[1,2,6]/0.406/,A[1,2,7]/0.663/,A[1,2,8]/0.031/,A[1,2,9]/0.039/,A[1,2,10]/0.092/,A[1,2,11]/0.040/,A[1,2,12]/0.065/
      DATA A[1,3,3]/0.455/,A[1,3,4]/10.384/,A[1,3,5]/0.338/,A[1,3,6]/0.126/,A[1,3,7]/1.318/,A[1,3,8]/0.041/,A[1,3,9]/0.147/,A[1,3,10]/0.043/,A[1,3,11]/0.013/,A[1,3,12]/0.128/ 
      DATA A[1,4,4]/5.730/,A[1,4,5]/0.611/,A[1,4,6]/1.457/,A[1,4,7]/1.597/,A[1,4,8]/0.214/,A[1,4,9]/0.217/,A[1,4,10]/0.098/,A[1,4,11]/0.202/,A[1,4,12]/0.222/
      DATA A[1,5,5]/0.064/,A[1,5,6]/0.064/,A[1,5,7]/0.099/,A[1,5,10]/0.021/,A[1,5,11]/0.009/,A[1,5,12]/0.014/,A[1,6,7]/0.202/,A[1,6,10]/0.010/,A[1,6,12]/0.028/,A[1,7,7]/0.113/,A[1,7,8]/0.024/,A[1,7,9]/0.024/,A[1,7,10]/0.016/,A[1,7,11]/0.028/,A[1,7,12]/0.031/
# L1 SHELL RATE (MILLIATOMIC UNITS)
      DATA A[2,3,8]/19.581/,A[2,3,9]/31.107/,A[2,3,10]/3.203/,A[2,3,11]/1.665/,A[2,3,12]/2.200/
      DATA A[2,4,7]/54.196/,A[2,4,8]/57.773/,A[2,4,9]/82.495/,A[2,4,10]/5.370/,A[2,4,11]/1.833/,A[2,4,12]/3.926/
      DATA A[2,5,5]/1.173/,A[2,5,6]/2.236/,A[2,5,7]/4.300/,A[2,5,8]/3.017/,A[2,5,9]/4.422/,A[2,5,10]/0.266/,A[2,5,11]/0.218/,A[2,5,12]/0.415/
      DATA A[2,6,7]/0.092/,A[2,6,8]/0.054/,A[2,6,9]/0.974/,A[2,6,10]/0.216/
      DATA A[2,7,7]/0.103/,A[2,7,8]/0.916/,A[2,7,9]/0.652/,A[2,7,10]/0.415/,A[2,7,12]/0.017/
      DATA A[2,8,8]/0.125/,A[2,8,9]/5.685/,A[2,8,10]/0.282/,A[2,8,11]/0.007/,A[2,8,12]/0.085/
      DATA A[2,9,9]/1.580/,A[2,9,10]/0.411/,A[2,9,11]/0.088/,A[2,9,12]/0.062/
      DATA A[2,10,10]/0.015/,A[2,10,11]/0.021/,A[2,10,12]/0.041/
# L2 AUGER SHELL RATE (MILLIATOMIC UNITS)
      DATA A[3,4,10]/0.874/,A[3,4,11]/2.468/,A[3,4,12]/0.978/
      DATA A[3,5,5]/0.093/,A[3,5,6]/1.876/,A[3,5,7]/0.160/,A[3,5,8]/0.111/,A[3,5,9]/0.252/,A[3,5,11]/0.141/,A[3,5,12]/0.014/
      DATA A[3,6,6]/1.724/,A[3,6,7]/5.804/,A[3,6,8]/2.741/,A[3,6,9]/5.061/,A[3,6,10]/0.245/,A[3,6,11]/0.301/,A[3,6,12]/0.551/
      DATA A[3,7,7]/0.160/,A[3,7,8]/3.285/,A[3,7,9]/0.460/,A[3,7,10]/0.019/,A[3,7,11]/0.449/,A[3,7,12]/0.027/
      DATA A[3,8,8]/2.818/,A[3,8,9]/12.528/,A[3,8,10]/0.014/
      DATA A[3,9,9]/0.592/,A[3,9,11]/0.362/,A[3,9,12]/0.040/
      DATA A[3,10,11]/0.019/,A[3,11,11]/0.019/,A[3,11,12]/0.043/
# L3 AUGER SHELL RATE (MILLIATOMIC UNITS)
      DATA A[4,5,5]/0.099/,A[4,5,6]/0.071/,A[4,5,7]/1.974/,A[4,5,8]/0.176/,A[4,5,9]/0.206/,A[4,5,12]/0.148/
      DATA A[4,6,7]/3.189/,A[4,6,8]/0.190/,A[4,6,9]/1.737/,A[4,6,12]/0.244/
      DATA A[4,7,7]/4.617/,A[4,7,8]/4.052/,A[4,7,9]/6.153/,A[4,7,10]/0.256/,A[4,7,11]/0.300/,A[4,7,12]/0.793/
      DATA A[4,8,8]/0.512/,A[4,8,9]/10.126/,A[4,8,10]/0.021/,A[4,8,11]/0.018/,A[4,8,12]/0.297/
      DATA A[4,9,9]/6.885/,A[4,9,10]/0.025/,A[4,9,11]/0.159/,A[4,9,12]/0.485/
      DATA A[4,10,12]/0.019/,A[4,11,12]/0.023/,A[4,12,12]/0.034/
# M SHELL AUGER RATE (10**-4 ATOMIC UNITS)
      DATA A[5,6,10]/127.3/,A[5,6,11]/145.0/,A[5,6,12]/336.5/
      DATA A[5,7,10]/254.6/,A[5,7,11]/336.5/,A[5,7,12]/626.1/
      DATA A[5,8,10]/104.4/,A[5,8,11]/15.3/,A[5,8,12]/5.30/
      DATA A[5,9,10]/156.6/,A[5,9,11]/1.95/,A[5,9,12]/29.1/
      DATA A[5,10,10]/5.00/A[5,10,11]/9.22/,A[5,10,12]/18.4/
      DATA A[5,11,11]/0.346/,A[5,11,12]/0.656/,A[5,12,12]/1.02/
      DATA A[6,10,10]/1.04/,A[6,10,11]/5.01/,A[6,10,12]/1.38/
      DATA A[6,11,11]/3.41/,A[6,11,12]/12.3/,A[6,12,12]/0.32/
      DATA A[7,8,8]/29.2/,A[7,8,9]/364.0/,A[7,8,10]/23.9/,A[7,8,11]/23.6/,A[7,8,12]/143.2/
      DATA A[7,9,9]/294.0/,A[7,9,10]/105.7/,A[7,9,11]/164.4/,A[7,9,12]/361.8/
      DATA A[7,10,10]/1.04/,A[7,10,11]/0.69/,A[7,10,12]/5.69/
      DATA A[7,11,11]/0.06/,A[7,11,12]/6.37/,A[7,12,12]/9.62/
      DATA A[8,10,10]/2.22/,A[8,10,11]/8.35/,A[8,10,12]/10.83/
      DATA A[8,11,11]/2.65/,A[8,11,12]/6.62/,A[8,12,12]/2.34/
      DATA A[9,10,10]/2.22/,A[9,10,11]/5.09/,A[9,10,12]/14.09/
      DATA A[9,11,11]/0.50/,A[9,11,12]/3.96/,A[9,12,12]/7.15/
# RADIATIVE TRANSITIONS SCOFIELD ANDT 14(1974)121
# DIPOLE AND HIGHER MULTIPOLES , RELATIVISTIC CALC. UNITS 1.519E15/SEC
# K-SHELL
      DATA R(1,2)/3.88E-6/,R(1,3)/0.499/,R(1,4)/0.962/,R(1,5)/8.60E-7/,R(1,6)/0.0702/,R(1,7)/0.1369/,R(1,8)/2.046E-4/,R(1,9)/2.931E-4/,R(1,10)/1.11E-7/,R(1,11)/6.17E-3/,R(1,12)/.01187/
# L1 SHELL
      DATA R(2,3)/3.24E-5/,R(2,4)/1.536E-4/,R(2,5)/4.85E-10/,R(2,6)/5.43E-3/,R(2,7)/9.66E-3/,R(2,8)/3.19E-5/,R(2,9)/4.75E-5/,R(2,10)/8.62E-11/,R(2,11)/5.09E-4/R(2,12)/9.00E-4/
# L2 SHELL
      DATA R(3,4)/1.02E-9/,R(3,5)/8.69E-4/,R(3,6)/1.26E-10/,R(3,7)/4.40E-6/,R(3,8)/.02374/,R(3,9)/2.80E-8/,R(3,10)/1.082E-4/,R(3,11)/1.47E-11/,R(3,12)/4.11E-7/
# L3 SHELL
      DATA R(4,5)/9.62E-4/,R(4,6)/2.22E-6/,R(4,7)/2.12E-6/,R(4,8)/2.326E-3/,R(4,9)/.02067/,R(4,10)/1.192E-4/,R(4,11)/2.07E-7/,R(4,12)/1.97E-7/
# RADIATIVE TRANSITIONS MANSON AND KENNEDY ANDT 14(1974)111
# DIPOLE ONLY NON-RELATIVISTIC CALC.  UNITS   1/SEC
# M1 SHELL
      DATA R(5,6)/2.2759E10/,R(5,7)/4.5517E10/,R(5,11)/4.5243E10/,R(5,12)/9.0487E10/
      DATA R(6,8)/3.43988E10/,R(6,9)/5.15982E10/,R(6,10)/1.5818E10/,R(6,11)/1.4049E9/,R(6,12)/2.8099E9/
      DATA R(7,8)/6.8797E10/,R(7,9)/1.03196E11/,R(7,10)/3.1636E10/,R(7,11)/2.1074E9/,R(7,12)/4.2148E9/
      DATA R(10,11)/2.3294E9/,R(10,12)/4.6589E9/
# PHOTOELECTRIC ABSORPTION X-SECTIONS FOR EACH SHELL: 
#    UNITS BARNS/ATOM AND ENERGIES IN EV
#  ASSEMBLED FROM: BAND ET AL.            ANDT 23(1979)443
#                : SHANTHI ET AL.         PHYS REV A37(1988)4720
#                : KENNEDY AND MANSON     PHYS REV A5(1972)227
#                : SCOFIELD               UCRL-51326
#                : SAMSON AND STOLTE      J.ELEC.SPEC. 123(2002)265
#                : CHAN ET AL             PHYS REV A46(1992)149
#                : VIEGELE                ATOMIC DATA 5(1973)50
# KSHELL
      DATA YPEK/1.54E4,1.38E4,6.61E3,2.2E3,979.,517.,304.,131.,67.3,20.,8.50,2.61,1.17,.650,.412,.211,.131,.0611,.0374,.0201,.0135,.0100,.00795,.00559,.00430,.00272,.00198,.00129,9.50E-4,7.54E-4,6.24E-4,4.65E-4,3.70E-4/
      DATA XPEK/14326.,1.5E4,2.0E4,3.0E4,4.E4,5.E4,6.E4,8.E4,1.E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# L1 SHELL
      DATA YPEL1/6.48E4,6.43E4,3.31E4,1.95E4,1.26E4,8.66E3,4.66E3,2.82E3,1.08E3,527.,184.,84.7,45.7,27.4,12.0,6.31,1.92,.828,.258,.117,.0649,.0412,.0211,.0132,.00611,.00374,.00201,.00135,.00100,7.95E-4,5.59E-4,4.30E-4,2.72E-4,1.98E-4,1.29E-4,9.50E-5,7.54E-5,6.24E-5,4.65E-5,3.70E-5/
      DATA XPEL1/1921.,2000.,3000.,4000.,5000.,6000.,8000.,1.E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# L2 SHELL
      DATA YPEL2/1.89E5,1.24E5,4.22E4,1.88E4,9.77E3,5.65E3,2.32E3,1.14E3,303.,115.,28.6,10.4,4.74,2.48,.892,.404,.0978,.0366,.00970,.00399,.00207,.00125,5.96E-4,3.51E-4,1.48E-4,9.07E-5,4.87E-5,3.26E-5,2.43E-5,1.93E-5,1.36E-5,1.04E-5,6.59E-6,4.80E-6,3.11E-6,2.30E-6,1.83E-6,1.51E-6,1.13E-6,8.97E-7/
      DATA XPEL2/1730.9,2000.,3000.,4000.,5000.,6000.,8000.,1.E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# L3 SHELL
      DATA YPEL3/3.96E5,2.37E5,7.91E4,3.47E4,1.79E4,1.03E4,4.17E3,2.03E3,528.,197.,47.6,17.0,7.57,3.90,1.36,.602,.139,.0504,.0129,.00525,.00274,.00167,8.18E-4,4.95E-4,2.23E-4,1.37E-4,7.34E-5,4.91E-5,3.66E-5,2.90E-5,2.04E-5,1.57E-5,9.92E-6,7.24E-6,4.69E-6,3.47E-6,2.75E-6,2.28E-6,1.70E-6,1.35E-6/
      DATA XPEL3/1678.4,2000.,3000.,4000.,5000.,6000.,8000.,1.E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# M1 SHELL
      DATA YPEM1/2.05E5,1.53E5,1.11E5,7.89E4,6.48E4,5.65E4,4.89E4,4.34E4,2.20E4,1.31E4,6.07E3,3.40E3,2.14E3,1.45E3,764.,459.,174.,85.1,29.7,13.7,7.42,4.45,1.96,1.03,.315,.136,.0423,.0192,.0107,.00677,.00347,.00216,.00100,6.13E-4,3.29E-4,2.20E-4,1.64E-4,1.30E-4,9.16E-5,7.04E-5,4.45E-5,3.25E-5,2.10E-5,1.56E-5,1.23E-5,1.02E-5,7.61E-6,6.06E-6/
      DATA XPEM1/292.8,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# M2 SHELL
      DATA YPEM2/2.00E5,1.96E5,1.92E5,1.49E5,1.07E5,8.72E4,7.52E4,6.41E4,5.62E4,2.53E4,1.34E4,4.99E3,2.35E3,1.27E3,760.,326.,165.,45.8,17.8,4.53,1.68,.769,.405,.147,.0668,.0163,.00613,.00163,6.72E-4,3.51E-4,2.11E-4,1.01E-4,5.91E-5,2.50E-5,1.53E-5,8.23E-6,5.51E-6,4.10E-6,3.25E-6,2.29E-6,1.76E-6,1.11E-6,8.11E-7,5.26E-7,3.89E-7,3.08E-7,2.56E-7,1.90E-7,1.52E-7/   
      DATA XPEM2/222.2,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# M3 SHELL
      DATA YPEM3/4.90E5,4.54E5,4.11E5,3.07E5,2.16E5,1.74E5,1.49E5,1.27E5,1.11E5,4.88E4,2.55E4,9.36E3,4.36E3,2.34E3,1.38E3,586.,294.,79.8,30.5,7.55,2.73,1.23,.636,.224,.0995,.0231,.00842,.00216,8.81E-4,4.61E-4,2.81E-4,1.38E-4,8.36E-5,3.76E-5,2.30E-5,1.24E-5,8.28E-6,6.17E-6,4.89E-6,3.44E-6,2.65E-6,1.67E-6,1.22E-6,7.91E-7,5.85E-7,4.64E-7,3.84E-7,2.86E-7,2.28E-7/  
      DATA XPEM3/214.4,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# M4 SHELL
      DATA YPEM4/2.17E5,2.89E5,3.62E5,5.68E5,8.00E5,1.17E6,1.44E6,1.71E6,1.74E6,1.68E6,1.37E6,1.06E6,8.07E5,4.04E5,2.08E5,1.42E5,1.09E5,8.31E4,6.73E4,1.88E4,7.16E3,1.71E3,588.,251.,123.,38.9,15.6,2.82,.819,.140,.0394,.0147,.00659,.00187,.000710,.000127,3.91E-5,8.04E-6,2.82E-6,1.30E-6,7.15E-7,2.99E-7,1.62E-7,6.33E-8,3.88E-8,2.08E-8,1.39E-8,1.04E-8,8.24E-9,5.80E-9,4.46E-9,2.82E-9,2.05E-9,1.33E-9,9.84E-10,7.81E-10,6.47E-10,4.82E-10,3.84E-10/
      DATA XPEM4/95.0,101.8,108.6,115.4,122.2,135.8,149.,176.,203.,230.,298.,366.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# M5 SHELL
      DATA YPEM5/3.25E5,4.34E5,5.43E5,8.52E5,1.20E6,1.76E6,2.16E6,2.56E6,2.61E6,2.53E6,2.06E6,1.58E6,1.19E6,5.96E5,3.05E5,2.08E5,1.60E5,1.22E5,9.83E4,2.73E4,1.04E4,2.46E3,843.,358.,175.,55.0,21.9,3.92,1.12,.189,.0525,.0193,.00853,.00237,.000889,.000156,4.78E-5,9.95E-6,3.57E-6,1.73E-6,1.01E-6,4.51E-7,2.63E-7,1.09E-7,6.68E-8,3.59E-8,2.40E-8,1.79E-8,1.42E-8,1.04E-8,7.68E-9,4.85E-9,3.54E-9,2.29E-9,1.69E-9,1.35E-9,1.11E-9,8.29E-10,6.61E-10/
      DATA XPEM5/93.8,100.6,107.4,114.2,121.0,134.6,149.,176.,203.,230.,298.,366.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# N1 SHELL
      DATA YPEN1/3.4E3,2.75E4,8.9E4,1.29E5,1.53E5,1.72E5,1.62E5,1.42E5,1.19E5,1.02E5,8.0E4,4.52E4,2.70E4,1.71E4,1.13E4,9.07E3,7.78E3,6.64E3,5.88E3,2.86E3,1.67E3,760.,423.,265.,179.,94.3,56.5,21.5,10.5,3.66,1.69,.915,.549,.242,.127,.0389,.0168,.00523,.00237,.00132,8.36E-4,4.29E-4,2.67E-4,1.24E-4,7.60E-5,4.08E-5,2.73E-5,2.03E-5,1.61E-5,1.14E-5,8.73E-6,5.52E-6,4.03E-6,2.61E-6,1.93E-6,1.53E-6,1.27E-6,9.44E-7,7.52E-7/
      DATA XPEN1/27.5,34.3,41.1,47.9,54.7,68.3,81.7,109.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# N2 SHELL
      DATA YPEN2/1.47E7,1.51E7,1.48E7,1.37E7,1.07E7,8.87E6,5.80E6,3.17E6,1.56E6,8.33E5,4.93E5,3.30E5,2.49E5,2.08E5,1.75E5,1.42E5,9.00E4,5.2E4,4.80E4,4.16E4,3.33E4,2.28E4,1.50E4,1.01E4,8.01E3,6.81E3,5.74E3,5.00E3,2.19E3,1.15E3,431.,204.,111.,66.2,28.7,14.6,4.06,1.58,.404,.150,.0688,.0363,.0132,.00600,.00146,5.51E-4,1.46E-4,6.03E-5,3.14E-5,1.90E-5,9.01E-6,5.30E-6,2.24E-6,1.37E-6,7.38E-7,4.93E-7,3.67E-7,2.91E-7,2.05E-7,1.36E-8/
      DATA XPEN2/14.666,16.0,18.0,20.0,24.0,26.0,30.0,35.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,80.0,96.0,132.,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E8/
# N3 SHELL
      DATA YPEN3/29.5E7,3.02E7,2.95E7,2.73E7,2.15E7,1.77E7,1.16E7,6.33E6,3.11E6,1.67E6,9.87E5,6.59E5,4.99E5,4.15E5,3.50E5,2.84E5,1.8E5,1.04E5,9.6E4,8.32E4,6.67E4,4.60E4,2.99E4,1.98E4,1.56E4,1.32E4,1.11E4,9.67E3,4.18E3,2.17E3,801.,374.,202.,119.,50.7,25.5,6.95,2.67,.662,.240,.108,.0560,.0198,.00879,.00205,7.45E-4,1.91E-4,7.81E-5,4.09E-5,2.49E-5,1.22E-5,7.44E-6,3.37E-6,2.07E-6,1.11E-6,7.42E-7,5.53E-7,4.38E-7,3.09E-7,2.04E-8/
      DATA XPEN3/13.9996,16.0,18.0,20.0,24.0,26.0,30.0,35.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,80.0,96.0,132.,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E8/ 
# RAYLEIGH COMPTON AND PAIR PRODUCTION DATA
# HUBBEL           J.PHYS.CHEM.REF.DATA 4(1975)471
# HUBBEL           NIST  XCOM WEB SITE
# STORM AND ISRAEL   NUCL.DATA TABLES   A7(1970)565
      DATA XENE/100.,150.,200.,300.,400.,500.,600.,800.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.022D6,1.25D6,1.5D6,2.0D6,2.044'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
      DATA YRAY/861.9,861.2,860.4,858.1,855.0,851.0,846.3,834.6,820.7,776.6,726.0,625.3,539.9,471.2,415.0,327.3,261.5,159.7,108.7,61.54,      39.47,27.32,20.06,12.24,8.281,3.975,2.319,1.068,.6111,.3949,      .2758,.1561,.1002,.09596,.06426,.04467,.02516,.02409,.01119,    6.296D-3,                  4.030D-3,2.799D-3,2.056D-3,1.574D-3,1.244D-3,1.008D-3,4.366D-4,2.456D-4,1.092D-4,6.141D-5,3.930D-5,2.729D-5,1.535D-5,9.825D-6/  
      DATA YCOM/7.696D-3,.01705,.03005,.06694,.1178,.1818,.2579,.4424, .6620,1.304,                        1.995,3.334,4.548,5.610,6.532,8.078,9.364,11.81,13.46,15.33,16.23,16.64,16.77,16.63,16.27,15.17,14.14,12.49,11.26,10.32,9.572,8.429,7.588,7.508,6.790,6.175,5.272,5.207,4.149,3.462,2.990,2.643,2.375,2.162,1.987,1.841,1.363,1.094,.7964,.6329,    .5283,.4552,.3590,.2979/      
# TOTAL PAIR PRODUCTION NUCLEAR + ELECTRON
      DATA YPAP/34*1.D-20,1.437D-2,.07008,.2552,.2737,.6887,1.089,      1.443,1.753,2.031,2.281,2.510,2.718,3.486,4.074,4.911,5.470,5.863,6.215,6.672,7.015/        
# NORMALISED RAYLEIGH FORM FACTOR  Hubbel
      DATA FFR/1.0,.99972,.99914,.99819,.99678,.99497,.9928,.9872,.9806,.9628,    .9411,.9289,.8961,.8614,.8264,.7925,.7306,.6775,.5925,.5228,.4594,.4008,.3489,.3044,.2682,.2076,.1751,.1385,.1086,.0860,.06344,.05469,.03719,.03106,.02684,.02350,.01682,.007156,.003261,1.552D-4,2.919D-5,1.323D-5,6.572D-9,8.97D-18,1.46D-16/      
# NORMALISED COMPTON FORM FACTOR  Hubbel
      DATA FFC/2.8D-22,2.5D-4,9.7D-4,.002164,.003825,.005942,.008489,.01480,.02256,.04151, .0635,.07508,.1046,.1335,.1613,.1878,.2374,.2822,.3564,.4158,.4681,.5156,.5589,.5983,.6333,.7056,.7586,.8297,.8758,.9072,.9281,.9422,.9600,.9717,.9800,.9861,.9936,.99903,.99983,1.0,1.0,1.0,1.0,1.0,1.0/
# KRYPTON ATOMIC NUMBER
      IZ[1]=36
      AMZ[1]=83.798
# CONVERT SHAKE OFF FROM A % TO A PROBABILITY
      DO 1 I=1,17
      PRSHBT(1,I)=PRBSHBT[I]/100.0
      DO 1 J=1,17
      PRBSH(I,J)=PRBSH(I,J)/100.0
    1 CONTINUE  
# SWAP INDICES AND DO CHECK SUM
      DO 2 I=1,17
      PRSUM=0
      DO 2 J=1,17
      PRSH(1,I,J)=PRBSH[J][I]
#     PRSUM=PRSUM+PRSH(I,J)
#     WRITE(6,888) I,PRSUM
# 888 print(' I=',I3,' PRSUM=','%.3f' %)
    2 CONTINUE
# LOAD SKAKE OFF ENERGIES AND LEVEL OCCUPATIONS
      DO 3 I=1,17
      ESH(1,I)=ES[I]
      INIOCC(1,I)=INIOC[I]
    3 CONTINUE
#
# AUGER PROBABILITIES IN ARRAY AUG(I,J,K) INITIAL VACANCY IN SHELL I,
# WITH TRANSITION TO SHELLS J,K
# LOAD OUTPUT ARRAYS AND CONVERT TO EV
      DO 4 I=1,4
      DO 4 J=1,17
      DO 4 K=1,17 
    4 AUG(1,I,J,K)=A[I,J,K]*0.0272105  
      DO 5 I=5,17
      DO 5 J=1,17
      DO 5 K=1,17
    5 AUG(1,I,J,K)=A[I,J,K]*0.00272105
# CHECK AUGER LEVEL SUMS
#     DO 7 I=1,17
#     ASUM=0.0
#     DO 6 J=1,17
#     DO 6 K=1,17
#   6 ASUM=ASUM+AUG(I,J,K)
#     WRITE(6,887) I,ASUM
# 887 print(' I=',I3,' ASUM=','%.3f' %)
#   7 CONTINUE
#  
# CONVERT RADIATIVE RATES IN M AND N SHELL TO EV 
      DO 12 I=5,17
      DO 12 J=6,17
   12 R(I,J)=R(I,J)*6.582119D-16
# LOAD OUTPUT ARRAY
      DO 13 I=1,17
      DO 13 J=1,17
   13 RAD[1,I,J]=R(I,J)
# PRINTOUT CHECK SUM
#     DO 15 I=1,17
#     RSUM=0.0
#     DO 14 J=1,17
#  14 RSUM=RSUM+R(I,J)
#     WRITE(6,100) I,RSUM
# 100 print(' SHELL =',I3,' RAD RATE EV=','%.3f' %)
#  15 CONTINUE
# LOAD PHOTOELECTRIC DATA
      DO 21 J=1,33
      XPE(1,1,J)=math.log(XPEK[J])
      YPE(1,1,J)=math.log(YPEK[J]*1.D-24)
   21 CONTINUE
      DO 22 J=1,40
      XPE(1,2,J)=math.log(XPEL1[J])
      YPE(1,2,J)=math.log(YPEL1[J]*1.D-24)
   22 CONTINUE 
      DO 23 J=1,40 
      XPE(1,3,J)=math.log(XPEL2[J])
      YPE(1,3,J)=math.log(YPEL2[J]*1.D-24)
   23 CONTINUE 
      DO 24 J=1,40
      XPE(1,4,J)=math.log(XPEL3[J])
      YPE(1,4,J)=math.log(YPEL3[J]*1.D-24)
   24 CONTINUE 
      DO 25 J=1,48
      XPE(1,5,J)=math.log(XPEM1[J])
      YPE(1,5,J)=math.log(YPEM1[J]*1.D-24)
   25 CONTINUE
      DO 26 J=1,49
      XPE(1,6,J)=math.log(XPEM2[J])
      YPE(1,6,J)=math.log(YPEM2[J]*1.D-24)
   26 CONTINUE 
      DO 27 J=1,49 
      XPE(1,7,J)=math.log(XPEM3[J])
      YPE(1,7,J)=math.log(YPEM3[J]*1.D-24)
   27 CONTINUE 
      DO 28 J=1,59
      XPE(1,8,J)=math.log(XPEM4[J])
      YPE(1,8,J)=math.log(YPEM4[J]*1.D-24)
   28 CONTINUE 
      DO 29 J=1,59
      XPE(1,9,J)=math.log(XPEM5[J])
      YPE(1,9,J)=math.log(YPEM5[J]*1.D-24)
   29 CONTINUE
      DO 30 J=1,59
      XPE(1,10,J)=math.log(XPEN1[J])
      YPE(1,10,J)=math.log(YPEN1[J]*1.D-24)
   30 CONTINUE 
      DO 31 J=1,60 
      XPE(1,11,J)=math.log(XPEN2[J])
      YPE(1,11,J)=math.log(YPEN2[J]*1.D-24)
   31 CONTINUE 
      DO 32 J=1,60
      XPE(1,12,J)=math.log(XPEN3[J])
      YPE(1,12,J)=math.log(YPEN3[J]*1.D-24)
   32 CONTINUE 
# LOAD RAYLEIGH COMPTON AND PAIR PRODUCTION X-SEC
      DO 33 J=1,54
      XCP(1,J)=math.log(XENE[J])
      YRY(1,J)=math.log(YRAY[J]*1.D-24)
      YCP(1,J)=math.log(YCOM[J]*1.D-24)
      YPP(1,J)=math.log(YPAP[J]*1.D-24)
   33 CONTINUE
# LOAD RAYLEIGH AND COMPTON FORM FACTORS
      DO 34 J=1,45
      FFAR(1,J)=FFR[J]
      FFAC(1,J)=FFC[J]
   34 CONTINUE
      RETURN
      # end 
      def CGAS7(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
      DIMENSION INIOC(17),PRBSH(17,17),ES(17),R(17,17),A[17,17,17],PRBSHBT(17)
      DIMENSION XPEK(30),YPEK(30),XPEL1(36),YPEL1(36),XPEL2(37),YPEL2(37),XPEL3(37),YPEL3(37),XPEM1(41),YPEM1(41),XPEM2(41),YPEM2(41),XPEM3(42),YPEM3(42),XPEM4(45),YPEM4(45),XPEM5(45),YPEM5(45),XPEN1(49),YPEN1(49),XPEN2(50),YPEN2(50),XPEN3(51),YPEN3(51),XPEN4(59),YPEN4(59),XPEN5(59),YPEN5(59),XPEO1(59),YPEO1(59),XPEO2(60),YPEO2(60),XPEO3(60),YPEO3(60),XENE(54),YRAY(54),YCOM(54),YPAP(54),FFR(45),FFC(45)
# 
# XENON DATA FOR CASCADE CALCULATIONS
#
# LEVEL OCCUPANCY FOR GROUND STATE
      DATA INIOC/2,2,2,4,2,2,4,4,6,2,2,4,4,6,2,2,4/
# AVERAGE SHAKE OFF ELECTRON ENERGY
      DATA ES/43.6,23.7,26.2,25.4,11.7,12.1,11.7,12.8,12.6,6.0,5.8,5.6,5.0,4.9,1.7,1.2,1.0/
# SHAKE OFF DATA :  CARLSON AND NESTOR PHYS REV A8(1973)2887
# % PROBABILITY OF J SHELL SHAKE OFF FROM VACANCY IN SHELL I PROBSH(I,J)
      DATA PRBSH/.001,.023,.032,.061,.073,0.11,0.22,0.22,0.32,0.23,0.37,0.73,1.65,2.46,1.67,3.73,8.39,0.00,.001,.002,.005,.028,.038,.082,0.16,0.24,0.14,0.22,0.36,1.63,2.46,1.48,3.36,7.76,0.00,.003,.002,.009,.032,.052,0.10,0.18,0.27,0.15,0.24,0.50,1.67,2.51,1.50,3.41,7.86,0.00,.003,.003,.006,.030,.045,.099,0.17,0.26,0.15,0.23,0.48,1.66,2.50,1.49,3.39,7.83,0.00,0.00,0.00,0.00,.001,.004,.009,.017,.027,.075,0.11,0.25,1.05,1.62,1.36,3.12,7.31,0.00,0.00,0.00,0.00,.003,.002,.011,.020,.032,.075,0.12,0.26,1.08,1.66,1.36,3.14,7.33,0.00,0.00,0.00,0.00,.003,.004,.007,.017,.028,.072,0.11,0.25,1.05,1.61,1.36,3.12,7.31,0.00,0.00,0.00,0.00,.004,.005,.014,.023,.047,.079,0.12,0.27,1.15,1.75,1.37,3.15,7.35,0.00,0.00,0.00,0.00,.004,.006,.013,.028,.037,.078,0.12,0.27,1.13,1.75,1.37,3.14,7.35,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,.005,.017,.043,0.33,0.53,1.09,2.70,6.45,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,.008,.008,.039,0.31,0.49,1.06,2.57,6.39,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,.007,.014,.025,0.28,0.45,1.04,2.63,6.34,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,.005,.010,.025,0.17,0.36,0.96,2.51,6.09,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,.004,.009,.024,0.21,0.29,0.95,2.50,6.06,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,.006,.010,0.14,1.13,3.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,.002,.004,0.19,0.43,2.35,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,.002,.003,0.17,0.76,1.60/
# SHAKE OFF DATA : CARLSON,NESTOR ET AL PHYS REV 169(1968)27
# % PROBABILITY OF J SHELL SHAKE OFF FROM BETA DECAY PRSHBT[J]
      DATA PRBSHBT/.0348,.0791,.0494,.0819,.160,.144,.258,.205,.300,.376,.417,.784,1.56,2.32,2.09,3.88,8.51/
#
# AUGER AND COSTER-KRONIG TRANSITION RATES FOR K L M AND N SHELLS 
#  CHEN+CRASEMANN,ANDT 24(1979)13,  FOR K AND L SHELLS 
#  MCGUIRE,SANDIA REPORTS,          FOR M AND N SHELLS 
# K SHELL RATE (MILLIATOMIC UNITS) TO GET TO EV *0.0272105
      DATA A[1,2,2]/3.740/,A[1,2,3]/4.524/,A[1,2,4]/5.393/,A[1,2,5]/1.340/,A[1,2,6]/0.867/,A[1,2,7]/1.046/,A[1,2,8]/0.074/,A[1,2,9]/0.078/,A[1,2,10]/0.293/,A[1,2,11]/0.179/,A[1,2,12]/0.215/,A[1,2,15]/0.045/,A[1,2,16]/0.022/,A[1,2,17]/0.025/
      DATA A[1,3,3]/0.558/,A[1,3,4]/11.635/,A[1,3,5]/0.673/,A[1,3,6]/0.191/,A[1,3,7]/1.874/,A[1,3,8]/0.088/,A[1,3,9]/0.287/,A[1,3,10]/0.142/,A[1,3,11]/0.039/,A[1,3,12]/0.372/,A[1,3,14]/0.053/,A[1,3,15]/0.021/,A[1,3,17]/0.043/ 
      DATA A[1,4,4]/5.864/,A[1,4,5]/0.797/,A[1,4,6]/1.842/,A[1,4,7]/1.943/,A[1,4,8]/0.311/,A[1,4,9]/0.318/,A[1,4,10]/0.167/,A[1,4,11]/0.367/,A[1,4,12]/0.388/,A[1,4,13]/0.058/,A[1,4,14]/0.059/,A[1,4,15]/0.026/,A[1,4,16]/0.044/,A[1,4,17]/0.045/
      DATA A[1,5,5]/0.119/,A[1,5,6]/0.131/,A[1,5,7]/0.154/,A[1,5,10]/0.052/,A[1,5,11]/0.027/,A[1,5,12]/0.032/,A[1,6,7]/0.301/,A[1,6,10]/0.028/,A[1,6,12]/0.060/,A[1,7,7]/0.163/,A[1,7,8]/0.041/,A[1,7,9]/0.041/,A[1,7,10]/0.033/,A[1,7,11]/0.061/,A[1,7,12]/0.065/
# L1 SHELL RATE (MILLIATOMIC UNITS)
      DATA A[2,3,10]/7.052/,A[2,3,11]/5.055/,A[2,3,12]/6.396/,A[2,3,13]/1.751/,A[2,3,14]/2.869/,A[2,3,15]/1.038/,A[2,3,16]/0.556/,A[2,3,17]/0.686/
      DATA A[2,4,10]/9.422/,A[2,4,11]/4.167/,A[2,4,12]/7.694/,A[2,4,13]/8.024/,A[2,4,14]/10.40/,A[2,4,15]/1.385/,A[2,4,16]/0.473/,A[2,4,17]/0.880/
      DATA A[2,5,5]/1.715/,A[2,5,6]/3.423/,A[2,5,7]/6.315/,A[2,5,8]/4.969/,A[2,5,9]/7.119/,A[2,5,10]/0.636/,A[2,5,11]/0.688/,A[2,5,12]/1.261/,A[2,5,13]/0.793/,A[2,5,14]/1.132/,A[2,5,15]/0.097/,A[2,5,16]/0.084/,A[2,5,17]/0.149/
      DATA A[2,6,7]/0.136/,A[2,6,8]/0.147/,A[2,6,9]/1.890/,A[2,6,10]/0.508/,A[2,6,13]/0.024/,A[2,6,14]/0.197/,A[2,6,15]/0.073/
      DATA A[2,7,7]/0.143/,A[2,7,8]/1.290/,A[2,7,9]/0.891/,A[2,7,10]/0.937/,A[2,7,12]/0.044/,A[2,7,13]/0.116/,A[2,7,15]/0.135/
      DATA A[2,8,8]/0.285/,A[2,8,9]/10.175/,A[2,8,10]/0.712/,A[2,8,11]/0.038/,A[2,8,12]/0.255/,A[2,8,13]/0.090/,A[2,8,14]/1.191/,A[2,8,15]/0.102/
      DATA A[2,9,9]/2.873/,A[2,9,10]/1.011/,A[2,9,11]/0.342/,A[2,9,12]/0.185/,A[2,9,13]/1.138/,A[2,9,14]/0.703/,A[2,9,15]/0.146/,A[2,9,16]/0.041/
      DATA A[2,10,10]/0.056/,A[2,10,11]/0.103/,A[2,10,12]/0.189/,A[2,10,13]/0.112/,A[2,10,14]/0.160/,A[2,10,17]/0.022/
      DATA A[2,11,14]/0.038/,A[2,11,17]/0.027/,A[2,13,14]/0.147/,A[2,14,14]/0.046/
# L2 AUGER SHELL RATE (MILLIATOMIC UNITS)
      DATA A[3,4,10]/1.260/,A[3,4,11]/5.499/,A[3,4,12]/1.934/,A[3,4,13]/7.131/,A[3,4,14]/2.659/,A[3,4,15]/0.176/,A[3,4,16]/0.645/,A[3,4,17]/0.228/
      DATA A[3,5,5]/0.113/,A[3,5,6]/2.762/,A[3,5,7]/0.258/,A[3,5,8]/0.228/,A[3,5,9]/0.388/,A[3,5,11]/0.382/,A[3,5,12]/0.046/,A[3,5,13]/0.025/,A[3,5,16]/0.044/
      DATA A[3,6,6]/2.718/,A[3,6,7]/8.442/,A[3,6,8]/4.636/,A[3,6,9]/7.878/,A[3,6,10]/0.612/,A[3,6,11]/0.939/,A[3,6,12]/1.656/,A[3,6,13]/0.738/,A[3,6,14]/1.253/,A[3,6,15]/0.095/,A[3,6,16]/0.112/,A[3,6,17]/0.195/
      DATA A[3,7,7]/0.223/,A[3,7,8]/5.422/,A[3,7,9]/0.727/,A[3,7,10]/0.050/,A[3,7,11]/1.221/,A[3,7,12]/0.074/,A[3,7,13]/0.746/,A[3,7,14]/0.094/,A[3,7,16]/0.141/
      DATA A[3,8,8]/5.092/,A[3,8,9]/21.648/,A[3,8,10]/0.050/,A[3,8,11]/0.664/,A[3,8,12]/1.008/,A[3,8,13]/1.384/,A[3,8,14]/3.146/,A[3,8,16]/0.077/,A[3,8,17]/0.118/
      DATA A[3,9,9]/1.031/,A[3,9,11]/1.005/,A[3,9,12]/0.125/,A[3,9,13]/2.513/,A[3,9,14]/0.274/,A[3,9,16]/0.114/
      DATA A[3,10,11]/0.086/,A[3,11,11]/0.078/,A[3,11,12]/0.239/,A[3,11,13]/0.105/,A[3,11,14]/0.162/,A[3,12,13]/0.140/,A[3,13,13]/0.379/
# L3 AUGER SHELL RATE (MILLIATOMIC UNITS)
      DATA A[4,5,5]/0.135/,A[4,5,6]/0.092/,A[4,5,7]/2.942/,A[4,5,8]/0.300/,A[4,5,9]/0.343/,A[4,5,12]/0.407/
      DATA A[4,6,7]/4.935/,A[4,6,8]/0.327/,A[4,6,9]/2.893/,A[4,6,12]/0.705/,A[4,6,14]/0.376/
      DATA A[4,7,7]/6.897/,A[4,7,8]/7.051/,A[4,7,9]/10.607/,A[4,7,10]/0.645/,A[4,7,11]/0.943/,A[4,7,12]/2.335/,A[4,7,13]/1.084/,A[4,7,14]/1.611/,A[4,7,15]/0.101/,A[4,7,16]/0.114/,A[4,7,17]/0.270/
      DATA A[4,8,8]/1.037/,A[4,8,9]/19.841/,A[4,8,10]/0.060/,A[4,8,11]/0.064/,A[4,8,12]/0.944/,A[4,8,13]/0.282/,A[4,8,14]/2.322/,A[4,8,17]/0.105/
      DATA A[4,9,9]/13.486/,A[4,9,10]/0.072/,A[4,9,11]/0.523/,A[4,9,12]/1.592/,A[4,9,13]/2.728/,A[4,9,14]/3.516/,A[4,9,16]/0.063/,A[4,9,17]/0.181/
      DATA A[4,10,12]/0.090/,A[4,11,12]/0.137/,A[4,11,14]/0.070/,A[4,12,12]/0.193/,A[4,12,13]/0.146/,A[4,12,14]/0.240/,A[4,12,17]/0.044/,A[4,13,14]/0.333/,A[4,14,14]/0.233/
# M SHELL AUGER RATE (10**-4 ATOMIC UNITS)
      DATA A[5,6,13]/300.0/,A[5,6,14]/453.0/,A[5,6,15]/38.0/,A[5,6,16]/33.6/,A[5,6,17]/68.7/
      DATA A[5,7,11]/396.0/,A[5,7,12]/732.0/,A[5,7,13]/213.0/,A[5,7,14]/337.0/,A[5,7,15]/59.1/,A[5,7,16]/55.3/,A[5,7,17]/108.0/
      DATA A[5,8,10]/155.0/,A[5,8,11]/23.4/,A[5,8,12]/13.0/,A[5,8,13]/39.3/,A[5,8,14]/55.9/,A[5,8,15]/15.5/,A[5,8,16]/2.67/,A[5,8,17]/1.60/
      DATA A[5,9,10]/233.0/,A[5,9,11]/6.96/,A[5,9,12]/47.6/,A[5,9,13]/55.9/,A[5,9,14]/86.9/,A[5,9,15]/23.3/,A[5,9,16]/0.88/,A[5,9,17]/5.52/
      DATA A[5,10,10]/20.7/A[5,10,11]/18.2/,A[5,10,12]/36.4/,A[5,10,13]/30.8/,A[5,10,14]/46.1/,A[5,10,15]/3.06/,A[5,10,16]/2.39/,A[5,10,17]/4.78/
      DATA A[5,11,11]/0.92/,A[5,11,12]/2.22/,A[5,11,13]/1.34/,A[5,11,14]/0.84/,A[5,11,15]/1.92/,A[5,11,16]/0.20/,A[5,11,17]/0.24/
      DATA A[5,12,12]/2.95/,A[5,12,13]/1.28/,A[5,12,14]/3.09/,A[5,12,15]/3.84/,A[5,12,16]/0.24/,A[5,12,17]/0.65/
      DATA A[5,13,13]/0.34/,A[5,13,14]/2.36/,A[5,13,15]/3.43/,A[5,13,16]/0.13/,A[5,13,17]/0.13/
      DATA A[5,14,14]/1.10/,A[5,14,15]/5.14/,A[5,14,16]/0.091/,A[5,14,17]/0.30/
      DATA A[5,15,15]/0.43/,A[5,15,16]/0.26/,A[5,15,17]/0.53/,A[5,16,16]/0.011/,A[5,16,17]/0.024/,A[5,17,17]/0.035/
      DATA A[6,7,15]/16.8/,A[6,7,16]/16.4/,A[6,7,17]/21.0/
      DATA A[6,8,10]/188.0/,A[6,8,11]/224.0/,A[6,8,12]/407.0/,A[6,8,13]/77.4/,A[6,8,14]/81.7/,A[6,8,15]/31.5/,A[6,8,16]/25.8/,A[6,8,17]/49.5/
      DATA A[6,9,10]/45.1/,A[6,9,11]/277.0/,A[6,9,12]/34.8/,A[6,9,13]/5.43/,A[6,9,14]/14.0/,A[6,9,15]/5.05/,A[6,9,16]/27.7/,A[6,9,17]/4.08/
      DATA A[6,10,10]/1.59/,A[6,10,11]/18.2/,A[6,10,12]/3.51/,A[6,10,13]/0.77/,A[6,10,14]/2.36/,A[6,10,15]/0.38/,A[6,10,16]/1.37/,A[6,10,17]/0.38/
      DATA A[6,11,11]/13.5/,A[6,11,12]/45.7/,A[6,11,13]/31.6/,A[6,11,14]/54.4/,A[6,11,15]/3.08/,A[6,11,16]/2.80/,A[6,11,17]/5.51/
      DATA A[6,12,12]/1.07/,A[6,12,13]/4.10/,A[6,12,14]/2.76/,A[6,12,15]/0.35/,A[6,12,16]/3.91/,A[6,12,17]/0.21/
      DATA A[6,13,13]/1.13/,A[6,13,14]/3.67/,A[6,13,15]/0.097/,A[6,13,16]/2.94/,A[6,13,17]/0.39/
      DATA A[6,14,14]/0.82/,A[6,14,15]/0.279/,A[6,14,16]/5.17/,A[6,14,17]/0.26/
      DATA A[6,15,15]/0.026/,A[6,15,16]/0.301/,A[6,15,17]/0.046/,A[6,16,16]/0.15/,A[6,16,17]/0.53/,A[6,17,17]/0.023/
      DATA A[7,8,10]/57.2/,A[7,8,11]/36.6/,A[7,8,12]/236.0/,A[7,8,13]/29.4/,A[7,8,14]/17.7/,A[7,8,15]/7.45/,A[7,8,16]/4.82/,A[7,8,17]/27.0/
      DATA A[7,9,10]/222.0/,A[7,9,11]/223.0/,A[7,9,12]/555.0/,A[7,9,13]/81.9/,A[7,9,14]/162.0/,A[7,9,15]/37.4/,A[7,9,16]/30.4/,A[7,9,17]/77.5/
      DATA A[7,10,10]/1.59/,A[7,10,11]/1.76/,A[7,10,12]/19.9/,A[7,10,13]/1.49/,A[7,10,14]/1.63/,A[7,10,15]/0.38/,A[7,10,16]/0.19/,A[7,10,17]/1.56/
      DATA A[7,11,11]/0.38/,A[7,11,12]/23.1/,A[7,11,13]/0.61/,A[7,11,14]/2.82/,A[7,11,15]/0.17/,A[7,11,16]/0.075/,A[7,11,17]/1.99/
      DATA A[7,12,12]/36.7/,A[7,12,13]/37.2/,A[7,12,14]/52.2/,A[7,12,15]/3.25/,A[7,12,16]/2.78/,A[7,12,17]/7.59/
      DATA A[7,13,13]/0.33/,A[7,13,14]/3.11/,A[7,13,15]/0.177/,A[7,13,16]/0.057/,A[7,13,17]/3.53/
      DATA A[7,14,14]/2.17/,A[7,14,15]/0.198/,A[7,14,16]/0.26/,A[7,14,17]/4.90/
      DATA A[7,15,15]/0.026/,A[7,15,16]/0.023/,A[7,15,17]/0.324/,A[7,16,16]/0.004/,A[7,16,17]/0.266/,A[7,17,17]/0.421/
      DATA A[8,10,10]/0.012/,A[8,10,11]/1.25/,A[8,10,12]/0.88/,A[8,10,13]/20.5/,A[8,10,14]/2.96/,A[8,10,15]/0.009/,A[8,10,16]/0.123/,A[8,10,17]/0.065/
      DATA A[8,11,11]/0.56/,A[8,11,12]/4.25/,A[8,11,13]/17.8/,A[8,11,14]/2.16/,A[8,11,15]/0.133/,A[8,11,16]/0.079/,A[8,11,17]/0.297/
      DATA A[8,12,12]/1.55/,A[8,12,13]/43.0/,A[8,12,14]/2.02/,A[8,12,15]/0.090/,A[8,12,16]/0.398/,A[8,12,17]/0.284/
      DATA A[8,13,13]/36.8/,A[8,13,14]/86.3/,A[8,13,15]/4.70/,A[8,13,16]/3.10/,A[8,13,17]/7.24/
      DATA A[8,14,14]/13.5/,A[8,14,15]/0.35/,A[8,14,16]/0.24/,A[8,14,17]/0.25/
      DATA A[8,15,15]/0.0008/,A[8,15,16]/0.015/,A[8,15,17]/0.008/,A[8,16,16]/0.0072/,A[8,16,17]/0.0479/,A[8,17,17]/0.0169/
      DATA A[9,10,10]/0.012/,A[9,10,11]/0.35/,A[9,10,12]/1.78/,A[9,10,13]/1.97/,A[9,10,14]/21.5/,A[9,10,15]/0.009/,A[9,10,16]/0.022/,A[9,10,17]/0.166/
      DATA A[9,11,11]/0.025/,A[9,11,12]/3.46/,A[9,11,13]/0.36/,A[9,11,14]/22.4/,A[9,11,15]/0.035/,A[9,11,16]/0.003/,A[9,11,17]/0.334/
      DATA A[9,12,12]/2.88/,A[9,12,13]/2.42/,A[9,12,14]/3.98/,A[9,12,15]/0.188/,A[9,12,16]/0.266/,A[9,12,17]/0.455/
      DATA A[9,13,13]/5.90/,A[9,13,14]/63.7/,A[9,13,15]/0.23/,A[9,13,16]/0.051/,A[9,13,17]/0.274/
      DATA A[9,14,14]/66.9/,A[9,14,15]/4.82/,A[9,14,16]/3.74/,A[9,14,17]/6.76/
      DATA A[9,15,15]/0.0008/,A[9,15,16]/0.003/,A[9,15,17]/0.021/,A[9,16,16]/0.0003/,A[9,16,17]/0.0380/,A[9,17,17]/0.0388/
# N SHELL AUGER RATES (10**-4 ATOMIC UNITS)
      DATA A[10,11,15]/98.5/,A[10,11,16]/80.3/,A[10,11,17]/229.0/
      DATA A[10,12,15]/197.0/,A[10,12,16]/229.0/,A[10,12,17]/389.0/
      DATA A[10,13,13]/11.6/,A[10,13,14]/295.0/,A[10,13,15]/74.7/,A[10,13,16]/12.4/,A[10,13,17]/64.2/
      DATA A[10,14,14]/91.4/,A[10,14,15]/112.0/,A[10,14,16]/51.4/,A[10,14,17]/63.5/
      DATA A[10,15,15]/5.72/,A[10,15,16]/5.83/,A[10,15,17]/11.7/
      DATA A[10,16,16]/0.53/,A[10,16,17]/1.95/,A[10,17,17]/2.04/
      DATA A[11,13,15]/171.0/,A[11,13,16]/152.0/,A[11,13,17]/394.0/
      DATA A[11,14,15]/25.2/,A[11,14,16]/139.0/,A[11,14,17]/35.9/
      DATA A[11,15,15]/0.390/,A[11,15,16]/8.04/,A[11,15,17]/1.05/
      DATA A[11,16,16]/4.14/,A[11,16,17]/13.7/,A[11,17,17]/0.42/
      DATA A[12,13,15]/32.2/,A[12,13,16]/26.9/,A[12,13,17]/133.0/
      DATA A[12,14,15]/164.0/,A[12,14,16]/188.0/,A[12,14,17]/374.0/
      DATA A[12,15,15]/0.390/,A[12,15,16]/0.53/,A[12,15,17]/8.56/
      DATA A[12,16,16]/0.15/,A[12,16,17]/6.98/,A[12,17,17]/11.1/
      DATA A[13,15,15]/6.00/,A[13,15,16]/2.69/,A[13,15,17]/3.41/
      DATA A[13,16,16]/3.13/,A[13,16,17]/10.7/,A[13,17,17]/4.21/
      DATA A[14,15,15]/6.00/,A[14,15,16]/1.60/,A[14,15,17]/4.50/
      DATA A[14,16,16]/0.59/,A[14,16,17]/7.55/,A[14,17,17]/9.90/
# RADIATIVE TRANSITIONS SCOFIELD ANDT 14(1974)121
# DIPOLE AND HIGHER MULTIPOLES , RELATIVISTIC CALC. UNITS 1.519E15/SEC
# K-SHELL
      DATA R(1,2)/2.88E-4/,R(1,3)/2.842/,R(1,4)/5.26/,R(1,5)/7.93E-5/,R(1,6)/0.494/,R(1,7)/0.958/,R(1,8)/4.87E-3/,R(1,9)/6.66E-3/,R(1,10)/1.86E-5/,R(1,11)/.0986/,R(1,12)/.1916/,R(1,13)/8.588E-4/,R(1,14)/1.2882E-3/,R(1,16)/.01057/,R(1,17)/.02113/
# L1 SHELL
      DATA R(2,3)/7.12E-5/,R(2,4)/1.341E-3/,R(2,5)/6.67E-8/,R(2,6)/.0498/,R(2,7)/.0785/,R(2,8)/7.42E-4/,R(2,9)/1.109E-3/,R(2,10)/2.37E-8/,R(2,11)/.01074/R(2,12)/.01737/,R(2,13)/9.03E-5/,R(2,14)/1.372E-4/,R(2,15)/3.87E-9/,R(2,16)/1.221E-3/,R(2,17)/1.897E-3/
# L2 SHELL
      DATA R(3,4)/2.17E-7/,R(3,5)/6.49E-3/,R(3,6)/1.84E-8/,R(3,7)/1.001E-4/,R(3,8)/.2312/,R(3,9)/1.92E-6/,R(3,10)/1.431E-3/,R(3,11)/5.58E-9/,R(3,12)/2.22E-5/,R(3,13)/.0345/,R(3,14)/3.13E-7/,R(3,15)/2.146E-4/,R(3,16)/6.70E-10/,R(3,17)/2.43E-6/
# L3 SHELL
      DATA R(4,5)/8.22E-3/,R(4,6)/4.98E-5/,R(4,7)/4.63E-5/,R(4,8)/.02188/,R(4,9)/.1939/,R(4,10)/1.789E-3/,R(4,11)/1.04E-5/,R(4,12)/9.99E-6/,R(4,13)/3.18E-3/,R(4,14)/.02838/,R(4,15)/2.677E-4/,R(4,16)/1.18E-6/,R(4,17)/1.09E-6/
# RADIATIVE TRANSITIONS MANSON AND KENNEDY ANDT 14(1974)111
# DIPOLE ONLY NON-RELATIVISTIC CALC.  UNITS   1/SEC
# M1 SHELL
      DATA R(5,6)/6.3377E10/,R(5,7)/1.26753E11/,R(5,11)/1.8393E12/,R(5,12)/3.6785E12/,R(5,16)/2.2512E11/,R(5,17)/4.5023E11/
      DATA R(6,8)/8.8395E10/,R(6,9)/1.3259E11/,R(6,10)/2.8247E11/,R(6,13)/5.7349E11/,R(6,14)/8.6023E11/,R(6,15)/4.2237E10/
      DATA R(7,8)/1.7679E11/,R(7,9)/2.6518E11/,R(7,10)/5.6494E11/,R(7,13)/1.1470E12/,R(7,14)/1.7205E12/,R(7,15)/8.4473E10/
      DATA R(8,11)/4.6363E10/,R(8,12)/9.2725E10/,R(8,16)/4.9477E9/,R(8,17)/9.8955E9/
      DATA R(9,11)/6.9544E10/,R(9,12)/1.3909E11/,R(9,16)/7.4216E9/,R(9,17)/1.4843E10/
      DATA R(10,11)/1.7296E10/,R(10,12)/3.4593E10/,R(10,16)/1.8626E10/,R(10,17)/3.7251E10/
      DATA R(11,13)/2.6747E10/,R(11,14)/4.012E10/,R(11,15)/1.2116E10/
      DATA R(12,13)/5.3493E10/,R(12,14)/8.024E10/,R(12,15)/2.4233E10/
      DATA R(13,16)/1.5247E9/,R(13,17)/3.0493E9/,R(14,16)/2.287E9/,R(14,17)/4.574E9/,R(15,16)/1.5316E9/,R(15,17)/3.0633E9/
# PHOTOELECTRIC ABSORPTION X-SECTIONS FOR EACH SHELL: 
#    UNITS BARNS/ATOM AND ENERGIES IN EV
#  ASSEMBLED FROM: BAND ET AL.            ANDT 23(1979)443
#                : KUTZNER ET AL          PHYS REV A40(1989)5052
#                : KENNEDY AND MANSON     PHYS REV A5(1972)227
#                : SCOFIELD               UCRL-51326
#                : WEST AND MORTON        ANDT 22(1978)103
#                : SAMSON AND STOLTE      J.ELEC.SPEC. 123(2002)265
#                : CHAN ET AL             PHYS REV A46(1992)149
# KSHELL
      DATA YPEK/5920.,4040.,2262.,1381.,626.,335.,106.,46.7,15.1,6.95,3.93,2.52,1.31,.817,.378,.231,.123,.0816,.0607,.0479,.0335,.0259,.0160,.0117,.00749,.00553,.00438,.00363,.00271,.00215/
      DATA XPEK/34561.,4.0E4,5.0E4,6.0E4,8.E4,1.E5,1.5E5,2.E5,3.E5,4.E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
      DATA YPEL1/2.34E4,1.97E4,1.19E4,7.80E3,3.42E3,1.82E3,712.,353.,202.,126.,59.1,32.4,10.7,4.82,1.59,.746,.424,.273,.142,.0887,.0409,.0250,.0133,.00883,.00657,.00518,.00362,.00280,.00174,.00126,.000810,.000598,.000474,.000393,.000293,.000232/
      DATA XPEL1/5453.,6.0E3,8.0E3,1.E4,1.5E4,2.E4,3.E4,4.E4,5.E4,6.E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
      DATA YPEL2/4.62E4,4.10E4,3.25E4,1.49E4,7.91E3,2.40E3,999.,279.,111.,53.4,29.3,11.3,5.42,1.43,.567,.160,.0686,.0367,.0225,.0109,.00653,.00282,.00172,.000916,.000609,.000453,.000357,.000250,.000193,.000120,8.70E-5,5.59E-5,4.12E-5,3.27E-5,2.71E-5,2.02E-5,1.60E-5/
      DATA XPEL2/5107.,5455.,6000.,8000.,1.E4,1.5E4,2.E4,3.E4,4.E4,5.E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
      DATA YPEL3/9.85E4,9.25E4,5.74E4,2.53E4,1.32E4,3.86E3,1.56E3,417.,160.,75.0,40.2,14.9,6.89,1.71,.645,.173,.072,.0381,.0233,.0114,.0069,.00306,.00187,.000994,.000660,.000491,.000388,.000271,.000209,.000130,9.44E-5,6.06E-5,4.47E-5,3.55E-5,2.94E-5,2.19E-5,1.74E-5/
      DATA XPEL3/4786.,5000.,6000.,8000.,1.E4,1.5E4,2.E4,3.E4,4.E4,5.E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,  1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
      DATA YPEM1/6.72E4,4.87E4,3.22E4,1.65E4,9.91E3,6.55E3,4.62E3,2.61E3,1.65E3,692.,363.,140.,69.3,39.5,24.7,11.6,6.38,2.11,.956,.317,.148,.0844,.0543,.0283,.0177,.00814,.00497,.00264,.00176,.00131,.00103,7.21E-4,5.57E-4,3.46E-4,2.51E-4,1.61E-4,1.19E-4,9.44E-5,7.82E-5,5.84E-5,4.63E-5/
      DATA XPEM1/1148.7,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
      DATA YPEM2/1.20E5,6.99E4,4.49E4,2.12E4,1.16E4,7.05E3,4.58E3,2.24E3,1.25E3,411.,179.,52.7,21.5,10.6,5.89,2.32,1.12,.301,.120,.0343,.0147,.0079,.00486,.00237,.00141,6.11E-4,3.73E-4,1.98E-4,1.32E-4,9.81E-5,7.74E-5,5.42E-5,4.18E-5,2.59E-5,1.89E-5,1.21E-5,8.93E-6,7.09E-6,5.87E-6,4.38E-6,3.47E-6/
      DATA XPEM2/1002.1,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
      DATA YPEM3/2.85E5,2.58E5,1.48E5,9.05E4,4.06E4,2.16E4,1.28E4,8.17E3,3.89E3,2.13E3,672.,284.,80.0,31.5,15.1,8.19,3.09,1.44,.364,.139,.0375,.0157,.00830,.00509,.00249,.00151,6.67E-4,4.07E-4,2.17E-4,1.44E-4,1.07E-4,8.45E-5,5.91E-5,4.57E-5,2.83E-5,2.06E-5,1.32E-5,9.75E-6,7.74E-6,6.41E-6,4.78E-6,3.79E-6/
      DATA XPEM3/940.6,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
      DATA YPEM4/1.37E6,1.02E6,8.11E5,6.60E5,5.58E5,2.01E5,8.88E4,2.59E4,1.02E4,4.81E3,2.56E3,915.,402.,85.5,27.5,5.35,1.64,.649,.305,.0924,.0368,.00713,.00230,.000501,.000181,8.53E-5,4.78E-5,2.04E-5,1.10E-5,4.20E-6,2.56E-6,1.36E-6,9.06E-7,6.75E-7,5.32E-7,3.72E-7,2.87E-7,1.78E-7,1.30E-7,8.32E-8,6.14E-8,4.87E-8,4.06E-8,3.01E-8,2.39E-8/
      DATA XPEM4/689.,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
      DATA YPEM5/2.20E6,1.48E6,1.19E6,9.68E5,8.15E5,2.90E5,1.27E5,3.66E4,1.43E4,6.70E3,3.54E3,1.25E3,547.,114.,36.3,6.88,2.07,.806,.373,.110,.0433,.00815,.00259,.000561,.000208,.000102,5.86E-5,2.66E-5,1.57E-5,6.43E-6,3.92E-6,2.09E-6,1.39E-6,1.03E-6,8.15E-7,5.70E-7,4.40E-7,2.73E-7,1.98E-7,1.27E-7,9.40E-8,7.46E-8,6.18E-8,4.61E-8,3.66E-8/
      DATA XPEM5/676.4,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
      DATA YPEN1/1.65E5,1.33E5,9.75E4,6.86E4,4.85E4,3.97E4,3.46E4,2.99E4,2.67E4,1.37E4,8.27E3,3.97E3,2.31E3,1.50E3,1.05E3,585.,367.,153.,79.7,30.7,15.2,8.66,5.42,2.55,1.40,.463,.210,.0696,.0326,.0186,.0119,.00622,.00388,.00179,.00109,5.81E-4,3.86E-4,2.87E-4,2.27E-4,1.59E-4,1.23E-4,7.60E-5,5.52E-5,3.55E-5,2.62E-5,2.08E-5,1.72E-5,1.28E-5,1.02E-5/
      DATA XPEN1/213.2,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
      DATA YPEN2/1.29E5,1.23E5,1.06E5,8.97E4,6.97E4,5.24E4,4.41E4,3.89E4,3.41E4,3.08E4,1.60E4,9.50E3,4.27E3,2.31E3,1.39E3,905.,443.,248.,82.2,36.0,10.7,4.38,2.16,1.21,.477,.231,.0623,.0249,.00713,.00306,.00164,.00101,4.93E-4,2.94E-4,1.27E-4,7.75E-5,4.12E-5,2.74E-5,2.04E-5,1.61E-5,1.13E-5,8.69E-6,5.39E-6,3.92E-6,2.52E-6,1.86E-6,1.47E-6,1.22E-6,9.10E-7,7.22E-7/
      DATA XPEN2/146.7,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
      DATA YPEN3/3.85E5,3.75E5,3.37E5,2.86E5,2.21E5,1.61E5,1.16E5,9.58E4,8.36E4,7.23E4,6.46E4,3.21E4,1.85E4,8.03E3,4.23E3,2.50E3,1.60E3,766.,421.,134.,56.9,16.2,6.41,3.08,1.67,.633,.296,.0748,.0286,.00774,.00324,.00172,.00105,5.17E-4,3.12E-4,1.38E-4,8.42E-5,4.48E-5,2.98E-5,2.22E-5,1.75E-5,1.22E-5,9.45E-6,5.86E-6,4.26E-6,2.73E-6,2.02E-6,1.60E-6,1.33E-6,9.89E-7,7.84E-7/
      DATA XPEN3/145.5,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
      DATA YPEN4/5.08E5,4.60E5,5.00E6,8.00E6,9.60E6,8.60E6,4.60E6,9.20E5,2.94E5,1.02E5,2.48E5,3.12E5,3.00E5,2.14E5,1.43E5,1.12E5,9.32E4,7.69E4,6.60E4,2.56E4,1.21E4,3.81E3,1.58E3,769.,418.,154.,69.1,15.2,4.96,.981,.303,.121,.0570,.0174,.00696,.00135,4.38E-4,9.55E-5,3.45E-5,1.63E-5,9.14E-6,3.88E-6,2.11E-6,7.87E-7,4.80E-7,2.56E-7,1.70E-7,1.26E-7,9.97E-8,6.98E-8,5.39E-8,3.34E-8,2.43E-8,1.56E-8,1.15E-8,9.13E-9,7.56E-9,5.64E-9,4.47E-9/
      DATA XPEN4/69.5,76.3,83.1,89.9,96.7,110.3,123.9,151.1,178.3,205.5,273.5,341.5,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
      DATA YPEN5/7.62E5,6.90E5,7.50E6,1.20E7,1.44E7,1.29E7,6.90E7,1.38E6,4.40E5,1.53E5,3.72E5,4.67E5,4.54E5,3.19E5,2.11E5,1.64E5,1.36E5,1.12E5,9.63E4,3.68E4,1.72E4,5.38E3,2.21E3,1.07E3,577.,211.,93.6,20.2,6.51,1.26,.380,.149,.0692,.0206,.00810,.00153,4.90E-4,1.07E-4,3.94E-5,1.93E-5,1.12E-5,5.12E-6,2.94E-6,1.24E-6,7.57E-7,4.03E-7,2.68E-7,1.99E-7,1.57E-7,1.10E-7,8.49E-8,5.35E-8,3.83E-8,2.46E-8,1.81E-8,1.44E-8,1.19E-8,8.89E-9,7.05E-9/
      DATA XPEN5/67.5,74.3,81.1,87.9,94.7,108.3,121.9,149.1,176.3,203.5,271.5,339.5,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E8,1.0E8/
      DATA YPEO1/5.00E5,1.80E5,6.00E4,2.00E5,5.00E5,7.50E5,8.50E5,6.00E5,4.00E4,7.00E3,2.00E4,2.50E4,1.88E4,1.22E4,8.20E3,6.58E3,5.67E3,4.85E3,4.33E3,2.14E3,1.28E3,604.,349.,226.,157.,87.5,54.8,22.9,12.0,4.61,2.28,1.30,.813,.382,.210,.0695,.0315,.0105,.00490,.00279,.00179,9.33E-4,5.84E-4,2.69E-4,1.64E-4,8.74E-5,5.81E-5,4.32E-5,3.41E-5,2.38E-5,1.84E-5,1.14E-5,8.30E-6,5.33E-6,3.93E-6,3.12E-6,2.58E-6,1.93E-6,1.53E-6/
      DATA XPEO1/23.3,30.0,40.0,50.0,70.0,80.0,90.0,100.0,130.0,160.0,190.,250.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
      DATA YPEO2/2.20E7,1.20E7,2.5E6,6.5E5,4.0E5,2.2E5,3.3E5,6.0E5,5.5E5,6.0E4,2.5E4,2.71E4,1.87E4,1.30E4,9.15E3,6.54E3,5.37E3,4.69E3,4.07E3,3.63E3,1.82E3,1.07E3,475.,255.,154.,102.,49.8,28.0,9.26,4.06,1.21,.495,.245,.137,.054,.0262,.00704,.00282,8.06E-4,3.47E-4,1.86E-4,1.14E-4,5.57E-5,3.33E-5,1.44E-5,8.79E-6,4.68E-6,3.11E-6,2.31E-6,1.82E-6,1.28E-6,9.86E-7,6.11E-7,4.44E-7,2.85E-7,2.11E-7,1.67E-7,1.38E-7,1.03E-7,8.18E-8/
      DATA XPEO2/13.43,20.0,30.0,40.0,50.0,60.0,80.0,90.0,100.,130.,150.,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
      DATA YPEO3/4.40E7,2.40E7,5.0E6,1.3E6,8.0E5,4.4E5,6.6E5,1.2E6,1.1E6,1.2E5,5.0E4,5.42E4,3.74E4,2.60E4,1.83E4,1.33E4,1.07E4,9.38E3,8.14E3,7.26E3,3.64E3,2.14E3,950.,510.,308.,204.,99.6,56.0,18.5,8.12,2.42,.990,.490,.274,.108,.0524,.01408,.00564,1.62E-3,6.94E-4,3.72E-4,2.28E-4,1.12E-4,6.66E-5,2.88E-5,1.76E-5,9.35E-6,6.22E-6,4.63E-6,3.65E-6,2.55E-6,1.97E-6,1.22E-6,8.89E-7,5.71E-7,4.21E-7,3.34E-7,2.77E-7,2.06E-7,1.64E-7/
      DATA XPEO3/12.129843,20.0,30.0,40.0,50.0,60.0,80.0,90.0,100.,130.,150.,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# RAYLEIGH COMPTON AND PAIR PRODUCTION DATA DATA
# HUBBEL          J.PHYS.CHEM.REF.DATA  4(1975)471
# HUBBEL          NIST XCOM WEB SITE
# STORM AND ISRAEL   NUCL DATA TABLES A7(1970)565
      DATA XENE/100.,150.,200.,300.,400.,500.,600.,800.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.022D6,1.25D6,1.5D6,2.0D6,2.044'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
      DATA YRAY/1939.,1938.,1936.,1930.,1923.,1914.,1902.,1877.,1844.,1744.,1631.,1413.,1229.,1078.,952.3,755.3,613.6,403.8,288.3,164.5,      107.1,76.13,56.90,35.05,23.74,11.55,6.836,3.192,1.839,1.193,      .8365,.4755,.3061,.2932,.1967,.1369,.07712,.07390,.03436,.01934,.01238,8.599D-3,6.318D-3,4.838D-3,3.823D-3,3.096D-3,1.292D-3,  7.268D-4,3.229D-4,1.817D-4,1.163D-4,8.073D-5,4.542D-5,2.906D-5/  
      DATA YCOM/.01126,.02527,.04472,.09970,.1751,.2695,.3812,.6491,   .9629,1.858,                        2.801,4.628,6.265,7.664,8.876,10.96,12.75,16.22,18.50,21.21,22.64,23.40,23.78,23.90,23.57,22.22,20.83,18.52,16.76,15.40,14.30,12.61,11.36,11.24,10.17,9.252,7.902,7.805,6.222,5.191,4.484,3.964,3.563,3.243,2.981,2.762,2.044,1.641,1.195,.9493,    .7924,.6828,.5385,.4469/      
# TOTAL PAIR PRODUCTION NUCLEAR + ELECTRON
      DATA YPAP/34*1.D-20,4.173D-2,.19300,.6478,.6918,1.628,2.496,      3.247,3.895,4.472,4.993,5.465,5.899,7.429,8.685,10.46,11.59,12.51,13.23,14.25,14.97/        
# NORMALISED RAYLEIGH FORM FACTOR  Hubbel
      DATA FFR/1.0,.99978,.99913,.99809,.99661,.99470,.9924,.9867,.9794,.9613,    .9391,.9267,.8941,.8604,.8270,.7950,.7372,.6872,.6026,.5298,.4676,.4169,.3772,.3463,.3215,.2715,.2265,.1533,.1126,.09657,.08052,.07033,.04998,.03619,.02807,.02498,.01881,.01213,.006993,5.581D-4,  1.226D-4,5.913D-5,4.711D-8,1.29D-16,3.96D-25/       
# NORMALISED COMPTON FORM FACTOR  Hubbel
      DATA FFC/1.9D-22,2.41D-4,9.63D-4,.002152,.003802,.005894,.008406,.01458,.02211,.04015,.06054,.07113,.09769,.1236,.1487,.1730,.2180,.2572,.3206,.3735,.4228,.4689,.5115,.5496,.5831,.6485,.6969,.7681,.8189,.8565,.8856,.9080,.9383,.9559,.9667,.9739,.9837,.9954,.9987,.99998,1.0,1.0,1.0,1.0,1.0/
# XENON ATOMIC NUMBER
      IZ[1]=54
      AMZ[1]=131.293
# CONVERT SHAKE OFF FROM  % TO  PROBABILITY
      DO 1 I=1,17
      PRSHBT(1,I)=PRBSHBT[I]/100.0
      DO 1 J=1,17
      PRBSH(I,J)=PRBSH(I,J)/100.0
    1 CONTINUE  
# SWAP INDICES AND DO CHECK SUM
      DO 2 I=1,17
      PRSUM=0
      DO 2 J=1,17
      PRSH(1,I,J)=PRBSH[J][I]
#     PRSUM=PRSUM+PRSH(I,J)
#     WRITE(6,888) I,PRSUM
# 888 print(' I=',I3,' PRSUM=','%.3f' %)
    2 CONTINUE
# LOAD SKAKE OFF ENERGIES AND LEVEL OCCUPATIONS
      DO 3 I=1,17
      ESH(1,I)=ES[I]
      INIOCC(1,I)=INIOC[I]
    3 CONTINUE
#
# AUGER PROBABILITIES IN ARRAY AUG(I,J,K) INITIAL VACANCY IN SHELL I,
# WITH TRANSITION TO SHELLS J,K
# LOAD OUTPUT ARRAYS AND CONVERT TO EV
      DO 4 I=1,4
      DO 4 J=1,17
      DO 4 K=1,17 
    4 AUG(1,I,J,K)=A[I,J,K]*0.0272105  
      DO 5 I=5,17
      DO 5 J=1,17
      DO 5 K=1,17
    5 AUG(1,I,J,K)=A[I,J,K]*0.00272105
# CHECK AUGER LEVEL SUMS
#     DO 7 I=1,17
#     ASUM=0.0
#     DO 6 J=1,17
#     DO 6 K=1,17
#   6 ASUM=ASUM+AUG(I,J,K)
#     WRITE(6,887) I,ASUM
# 887 print(' I=',I3,' ASUM=','%.3f' %)
#   7 CONTINUE
#  
# CONVERT RADIATIVE RATES IN M AND N SHELL TO EV 
      DO 12 I=5,17
      DO 12 J=6,17
   12 R(I,J)=R(I,J)*6.582119D-16
# LOAD OUTPUT ARRAY
      DO 13 I=1,17
      DO 13 J=1,17
   13 RAD[1,I,J]=R(I,J)
# PRINTOUT CHECK SUM
#     DO 15 I=1,17
#     RSUM=0.0
#     DO 14 J=1,17
#  14 RSUM=RSUM+R(I,J)
#     WRITE(6,100) I,RSUM
# 100 print(' SHELL =',I3,' RAD RATE EV=','%.3f' %)
#  15 CONTINUE
# LOAD PHOTOELECTRIC DATA 
      DO 21 J=1,30
      XPE(1,1,J)=math.log(XPEK[J])
      YPE(1,1,J)=math.log(YPEK[J]*1.D-24)
   21 CONTINUE
      DO 22 J=1,36
      XPE(1,2,J)=math.log(XPEL1[J])
      YPE(1,2,J)=math.log(YPEL1[J]*1.D-24)
   22 CONTINUE 
      DO 23 J=1,37 
      XPE(1,3,J)=math.log(XPEL2[J])
      YPE(1,3,J)=math.log(YPEL2[J]*1.D-24)
   23 CONTINUE 
      DO 24 J=1,37
      XPE(1,4,J)=math.log(XPEL3[J])
      YPE(1,4,J)=math.log(YPEL3[J]*1.D-24)
   24 CONTINUE 
      DO 25 J=1,41
      XPE(1,5,J)=math.log(XPEM1[J])
      YPE(1,5,J)=math.log(YPEM1[J]*1.D-24)
   25 CONTINUE
      DO 26 J=1,41
      XPE(1,6,J)=math.log(XPEM2[J])
      YPE(1,6,J)=math.log(YPEM2[J]*1.D-24)
   26 CONTINUE 
      DO 27 J=1,42 
      XPE(1,7,J)=math.log(XPEM3[J])
      YPE(1,7,J)=math.log(YPEM3[J]*1.D-24)
   27 CONTINUE 
      DO 28 J=1,45
      XPE(1,8,J)=math.log(XPEM4[J])
      YPE(1,8,J)=math.log(YPEM4[J]*1.D-24)
   28 CONTINUE 
      DO 29 J=1,45
      XPE(1,9,J)=math.log(XPEM5[J])
      YPE(1,9,J)=math.log(YPEM5[J]*1.D-24)
   29 CONTINUE
      DO 30 J=1,49
      XPE(1,10,J)=math.log(XPEN1[J])
      YPE(1,10,J)=math.log(YPEN1[J]*1.D-24)
   30 CONTINUE 
      DO 31 J=1,50 
      XPE(1,11,J)=math.log(XPEN2[J])
      YPE(1,11,J)=math.log(YPEN2[J]*1.D-24)
   31 CONTINUE 
      DO 32 J=1,51
      XPE(1,12,J)=math.log(XPEN3[J])
      YPE(1,12,J)=math.log(YPEN3[J]*1.D-24)
   32 CONTINUE 
      DO 33 J=1,59
      XPE(1,13,J)=math.log(XPEN4[J])
      YPE(1,13,J)=math.log(YPEN4[J]*1.D-24)
   33 CONTINUE 
      DO 34 J=1,59 
      XPE(1,14,J)=math.log(XPEN5[J])
      YPE(1,14,J)=math.log(YPEN5[J]*1.D-24)
   34 CONTINUE 
      DO 35 J=1,59
      XPE(1,15,J)=math.log(XPEO1[J])
      YPE(1,15,J)=math.log(YPEO1[J]*1.D-24)
   35 CONTINUE 
      DO 36 J=1,60 
      XPE(1,16,J)=math.log(XPEO2[J])
      YPE(1,16,J)=math.log(YPEO2[J]*1.D-24)
   36 CONTINUE 
      DO 37 J=1,60
      XPE(1,17,J)=math.log(XPEO3[J])
      YPE(1,17,J)=math.log(YPEO3[J]*1.D-24)
   37 CONTINUE 
# LOAD RAYLEIGH COMPTON AND PAIR PRODUCTION X-SEC
      DO 38 J=1,54
      XCP(1,J)=math.log(XENE[J])
      YRY(1,J)=math.log(YRAY[J]*1.D-24)
      YCP(1,J)=math.log(YCOM[J]*1.D-24)
      YPP(1,J)=math.log(YPAP[J]*1.D-24)
   38 CONTINUE
# LOAD RAYLEIGH AND COMPTON FORM FACTORS
      DO 39 J=1,45
      FFAR(1,J)=FFR[J]
      FFAC(1,J)=FFC[J]
   39 CONTINUE
      # end
      def CGAS8(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
      DIMENSION INIOC(17),PRBSH(17,17),ES(17),R(17,17),A[17,17,17],PRBSHBT(17)
      DIMENSION INIOCH(17),PRBSHH(17,17),ESHH(17),RH(17,17),AH(17,17,17),PRBSHBTH(17)  
      DIMENSION XPEK(49),YPEK(49),XPEL1(54),YPEL1(54),XPEL2(54),YPEL2(54),XCOMC(54),YRAYC(54),YCOMC(54),YPAPC(54),FFRC(45),FFCC(45)
      DIMENSION XPEKH(54),YPEKH(54),XCOMH(54),YRAYH(54),YCOMH(54),YPAPH(54),FFRH(45),FFCH(45)
# 
# 
#  CH4 DATA FOR CASCADE CALCULATIONS
#
# CARBON DATA 
#
# LEVEL OCCUPANCY FOR GROUND STATE
      DATA INIOC/2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0/
# AVERAGE SHAKE OFF ELECTRON ENERGY
      DATA ES/10.00,2.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
# SHAKE OFF DATA :  CARLSON AND NESTOR PHYS REV A8(1973)2887
# % PROBABILITY OF J SHELL SHAKE OFF FROM VACANCY IN SHELL I PROBSH(I,J)
      DATA PRBSH/0.20,3.00,9.00,0.0,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.80,3.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.50,2.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,238*0.0/
# SHAKE OFF DATA : CARLSON,NESTOR ET AL PHYS REV 169(1968)27
# % PROBABILITY OF J SHELL SHAKE OFF FROM BETA DECAY PRSHBT[J]
      DATA PRBSHBT/2.74,12.0,12.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
#
# AUGER AND COSTER-KRONIG TRANSITION RATES FOR K AND L SHELLS 
#  WALTERS AND BHALLA (1971)
# K SHELL RATE (MILLIATOMIC UNITS) TO GET TO EV *0.0272105
      DATA A[1,2,2]/0.858/,A[1,2,3]/0.824/,A[1,3,3]/0.378/
# RADIATIVE TRANSITIONS SCOFIELD ANDT 14(1974)121
# DIPOLE AND HIGHER MULTIPOLES , RELATIVISTIC CALC. UNITS 1.519E15/SEC
# K-SHELL
      DATA R(1,2)/1.50E-14/,R(1,3)/3.45E-5/,R(1,4)/6.88E-5/
# L1 SHELL
      DATA R(2,3)/1.20E-7/,R(2,4)/2.41E-7/
# L2 SHELL
      DATA R(3,4)/1.55E-21/
# 
# PHOTOELECTRIC ABSORPTION X-SECTIONS FOR EACH SHELL: 
#    UNITS BARNS/ATOM AND ENERGIES IN EV
#  ASSEMBLED FROM: BAND ET AL.            ANDT 23(1979)443
#                : SCOFIELD               UCRL-51326
#                : VIEGELE                ATOMIC DATA 5(1973)50
# K  SHELL 1S 1/2
      DATA YPEK/9.26E5,7.98E5,4.81E5,2.35E5,1.21E5,8.42E4,6.57E4,5.09E4,4.20E4,1.33E4,5.73E3,1.70E3,707.,354.,200.,80.4,39.3,10.6,4.12,1.08,.415,.197,.107,.0411,.0195,.00512,.00201,5.64E-4,2.41E-4,1.29E-4,8.05E-5,4.06E-5,2.52E-5,1.19E-5,7.51E-6,4.21E-6,2.90E-6,2.20E-6,1.77E-6,1.27E-6,9.93E-7,6.39E-7,4.71E-7,3.08E-7,2.29E-7,1.82E-7,1.51E-7,1.13E-7,9.01E-8/
      DATA XPEK/285.0,300.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# L1 SHELL 2S 1/2
      DATA YPEL1/1.35E7,1.50E6,4.00E5,2.21E5,1.70E5,1.14E5,4.58E4,2.07E4,1.02E4,5.34E3,3.76E3,2.97E3,2.32E3,1.93E3,635.,280.,85.1,35.7,18.0,10.3,4.16,2.05,.554,.217,.0571,.0220,.0105,.00570,.00218,.00104,   2.72E-4,1.07E-4,3.00E-5,1.28E-5,6.88E-6,4.28E-6,2.16E-6,1.34E-6,6.37E-7,4.02E-7,2.26E-7,1.55E-7,1.18E-7,9.49E-8,6.82E-8,5.32E-8,3.42E-8,2.52E-8,1.65E-8,1.23E-8,9.75E-9,8.10E-9,6.05E-9,4.82E-9/
      DATA XPEL1/18.0,50.0,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/          
# L2 SHELL 2P 1/2
      DATA YPEL2/1.35E7,9.0E5,1.50E5,7.81E4,5.15E4,2.79E4,7.59E3,2.49E3,924.,383.,239.,173.,124.,94.6,20.7,6.75,1.36,.432,.176,.0841,  .0259,.0103,.00189,5.64E-4,1.02E-4,3.06E-5,1.20E-5,5.63E-6,1.72E-6,6.96E-7,1.40E-7,4.69E-8,1.10E-8,4.26E-9,2.16E-9,1.29E-9,6.20E-10,3.76E-10,1.82E-10,1.15E-10,6.45E-11,4.44E-11,3.37E-11,2.71E-11,1.95E-11,1.52E-11,9.77E-12,7.20E-12,4.71E-12,3.50E-12,2.79E-12,2.31E-12,1.73E-12,1.38E-12/
      DATA XPEL2/6.40,50.0,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# RAYLEIGH COMPTON AND PAIR PRODUCTION DATA
# RAYLEIGH      COMPTON AND PAIR PRODUCTION DATA
# HUBBEL        J.PHYS.CHEM.REF.DATA 4(1975)471
# HUBBEL        NIST XCOM WEB SITE
      DATA XCOMC/100.,150.,200.,300.,400.,500.,600.,800.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.022D6,1.25D6,1.5D6,2.0D6,2.044'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
      DATA YRAYC/23.94,23.90,24.85,23.72,23.53,23.31,23.03,22.37,21.52,19.12,16.59,12.22,9.179,7.170,5.819,4.181,3.232,1.952,1.292,.6711,      .4079,.2734,.1956,.1139,.07418,.03360,.01903,8.504D-3,4.792D-3,   3.070D-3,                  2.133D-3,1.200D-3,7.682D-4,7.355D-4,4.917D-4,3.415D-4,1.921D-4,1.839D-4,8.539D-5,4.803D-5,3.074D-5,2.135D-5,1.568D-5,1.201D-5,9.488D-6,7.685D-6,3.415D-6,1.921D-6,8.537D-7,4.802D-7,3.073D-7,2.134D-7,1.200D-7,7.682D-8/  
      DATA YCOMC/3.044D-3,6.469D-3,.01140,.02518,.04448,.06870,.09764, .1680,.2519,.5001,                  .7702,1.278,1.685,1.984,2.202,2.497,2.697,3.012,3.182,3.300,3.296,3.250,3.188,3.054,2.924,2.647,2.431,2.118,1.899,1.735,1.605,1.410,1.268,1.255,1.134,1.031,.8795,.8687,.6920,.5772,.4985,.4406,.3960,.3604,.3313,.3069,.2272,.1823,.1327,.1055,    .08805,.07586,.05983,.04966/  
# TOTAL PAIR PRODUCTION NUCLEAR + ELECTRON
      DATA YPAPC/34*1.D-20,2.870D-4,1.594D-3,6.356D-3,6.852D-3,.01844, .03054,   .04163,.05178,.06095,.06928,.07690,.08388,.1108,.1310,.1597,.1802,.1958,.2080,.2263,.2401/   
# NORMALISED RAYLEIGH FORM FACTOR  Hubbel
      DATA FFRC/1.0,.99957,.99830,.9962,.9932,.9895,.9848,.9735,.9590,.9228,.8783,.8538,.7902,.7218,.6562,.5962,.4935,.4170,.3252,.2810,.2558,.2375,.2202,.2027,.1853,.1441,.1094,.0620,.03577,.02147,.01341,.008705,.004055,.002108,.001191,7.198D-4,3.06D-4,6.295D-5, 2.027D-5,5.398D-7,8.455D-8,3.52D-8,5.993D-12,2.767D-21,2.80D-30/
# NORMALISED COMPTON FORM FACTOR  Hubbel
      DATA FFCC/1.7D-21,6.317D-4,.002165,.004922,.008607,.01341,.01928,.03358,.05143,.0948,.1459,.1732,.2413,.3110,.3755,.4340,.5330,.6072,.6973,.7463,.7817,.8130,.8418,.8680,.8913,.9358,.9635,.9883,.9962,.9987,.99947,.99977,.99995,.99998,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0/
# CARBON ATOMIC NUMBER
      IZ[1]=6
      AMZ[1]=12.0107
# 
# ATOMIC HYDROGEN DATA
#
# LEVEL OCCUPANCY FOR GROUND STATE
      DATA INIOCH/1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/
# AVERAGE SHAKE OFF ELECTRON ENERGY
      DATA ESHH/17*0.0/ 
# SHAKE OFF DATA :  CARLSON AND NESTOR PHYS REV A8(1973)2887
# % PROBABILITY OF J SHELL SHAKE OFF FROM VACANCY IN SHELL I PROBSH(I,J)
      DATA PRBSHH/289*0.0/
# SHAKE OFF DATA : CARLSON,NESTOR ET AL PHYS REV 169(1968)27
# % PROBABILITY OF J SHELL SHAKE OFF FROM BETA DECAY PRSHBT[J]
      DATA PRBSHBTH/17*0.0/
#
# PHOTOELECTRIC ABSORPTION X-SECTIONS FOR EACH SHELL: 
#    UNITS BARNS/ATOM AND ENERGIES IN EV
#  ASSEMBLED FROM: BAND ET AL.            ANDT 23(1979)443
#                : SCOFIELD               UCRL-51326
#                : VIEGELE                ATOMIC DATA 5(1973)50
# K  SHELL 1S 1/2
      DATA YPEKH/6.41E6,2.18E6,1.93E4,8.10E3,5.31E3,2.86E3,765.,251.,96.6,41.9,26.7,19.7,14.4,11.4,2.93,1.11,.281,.105,.0491,.0263,.00982,.00456,.00113,4.18E-4,1.03E-4,3.82E-5,1.77E-5,9.46E-6,3.52E-6,1.64E-6,4.18E-7,1.61E-7,4.41E-8,1.86E-8,9.93E-9,6.16E-9,3.12E-9,1.96E-9,9.73E-10,6.20E-10,3.52E-10,2.44E-10,1.87E-10,1.51E-10,1.09E-10,8.50E-11,5.49E-11,4.06E-11,2.66E-11,1.98E-11,1.58E-11,1.31E-11,9.79E-12,7.81E-12/
      DATA XPEKH/13.598,20.,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# RAYLEIGH      COMPTON AND PAIR PRODUCTION DATA
# HUBBEL        J.PHYS.CHEM.REF.DATA 4(1975)471
# HUBBEL        NIST XCOM WEB SITE
# STORM AND ISRAEL    NUCL.DATA TABLES  A7(1970)565
      DATA XCOMH/100.,150.,200.,300.,400.,500.,600.,800.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.022D6,1.25D6,1.5D6,2.0D6,2.044'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
      DATA YCOMH/9.552D-4,2.144D-3,3.802D-3,8.494D-3,1.496D-2,2.310D-2,3.279D-2,5.629D-2,8.424D-2,0.1650,.2478,.3822,.4675,.5187,.5503,.5840,.5993,.6095,.6068,.5924,.5759,.5597,.5444,.5166,.4923,.4435,.4064,.3535,.3168,.2893,.2676,.2351,.2114,.2092,.1890,.1718,.1466,.1448,.1153,.0962,.08308,.07343,.0660,.06007,.05522,.05116,.03786,.03039,.02212,.01758,.01467,.01264,.009972,.008276/
      DATA YRAYH/.6650,.6635,.6617,.6569,.6503,.6421,.6323,.6087,.5806,.4984,.4142,.2764,.1881,.1341,.09987,.06126,.04121,.01943,.01119,.005062,.002866,.001840,.001280,7.211D-4,4.619D-4,2.054D-4,1.156D-4,5.138D-5,2.890D-5,1.850D-5,1.285D-5,7.226D-6,4.625D-6,4.428D-6,2.960D-6,2.056D-6,1.156D-6,1.107D-6,5.139D-7,2.891D-7,1.850D-7,1.285D-7,9.439D-8,7.227D-8,5.710D-8,4.625D-8,2.056D-8,1.156D-8,5.139D-9,2.890D-9,1.850D-9,1.284D-9,7.222D-10,4.620D-10/
# TOTAL PAIR PRODUCTION NUCLEAR + ELECTRON
      DATA YPAPH/34*1.D-20,7.805D-6,4.385D-5,1.758D-4,1.895D-4,5.451D-4,9.849D-4,1.430D-3,1.859D-3,2.260D-3,2.634D-3,2.984D-3,3.308D-3,4.61D-3,5.61D-3,7.08D-3,8.13D-3,8.98D-3,9.65D-3,1.074D-2,1.161D-2/
# RAYLEIGH FORM FACTOR  Hubbel
      DATA FFRH/1.0,.9994,.9978,.9950,.9912,.9863,.9804,.9655,.9469,.8999,.8424,.8108,.7271,.6413,.5581,.4808,.3497,.2513,.1304,.07059,.04032,.02429,.01533,.01009,.006881,.002995,.001494,4.890D-4,2.035D-4,9.902D-5,5.373D-5,3.160D-5,1.300D-5,6.282D-6,3.395D-6,1.992D-6,8.168D-7,1.615D-7,5.112D-8,1.309D-9,1.998D-10,8.182D-11,8.182D-15,8.182D-27,8.182D-39/
# COMPTON FORM FACTOR  Hubbel
      DATA FFCH/1.D-20,.001105,.004410,.009888,.01749,.02717,.03883,.06773,.1033,.1902,.2904,.3426,.4713,.5887,.6885,.7689,.8777,.9369,.9830,.9950,.9984,.9994,.9998,.9999,.99995,.99999,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0/
# HYDROGEN ATOMIC NUMBER
      IZ[2]=1
      AMZ[2]=4.03176
#
# CONVERT SHAKE OFF FROM A % TO A PROBABILITY
      DO 1 I=1,17
      PRSHBT(1,I)=PRBSHBT[I]/100.0
      PRSHBT(2,I)=PRBSHBTH[I]/100.0
      DO 1 J=1,17
      PRBSH(I,J)=PRBSH(I,J)/100.0
      PRBSHH(I,J)=PRBSHH(I,J)/100.0
    1 CONTINUE  
# SWAP INDICES AND DO CHECK SUM
      DO 2 I=1,17
      PRSUM=0.0
      PRSUMH=0.0
      DO 2 J=1,17
      PRSH(1,I,J)=PRBSH[J][I]
      PRSH(2,I,J)=PRBSHH[J][I]
#     PRSUMH=PRSUMH+PRSH(2,I,J)
#     PRSUM=PRSUM+PRSH(1,I,J)
#     WRITE(6,888) I,PRSUM,PRSUMH
# 888 print(' I=',I3,' PRSUM=','%.3f' %,' PRSUM=','%.3f' %)
    2 CONTINUE
# LOAD SKAKE OFF ENERGIES AND LEVEL OCCUPATIONS
      DO 3 I=1,17
      ESH(1,I)=ES[I]
      ESH(2,I)=ESHH[I]
      INIOCC(1,I)=INIOC[I]
      INIOCC(2,I)=INIOCH[I]
    3 CONTINUE
#
# AUGER PROBABILITIES IN ARRAY AUG(I,J,K) INITIAL VACANCY IN SHELL I,
# WITH TRANSITION TO SHELLS J,K
# LOAD OUTPUT ARRAYS AND CONVERT TO EV
      DO 4 I=1,4
      DO 4 J=1,17
      DO 4 K=1,17 
      AUG(1,I,J,K)=A[I,J,K]*0.0272105  
    4 AUG(2,I,J,K)=AH(I,J,K)*0.0272105  
      DO 5 I=5,17
      DO 5 J=1,17
      DO 5 K=1,17
      AUG(1,I,J,K)=A[I,J,K]*0.00272105
    5 AUG(2,I,J,K)=AH(I,J,K)*0.00272105
# CHECK AUGER LEVEL SUMS
#     DO 7 I=1,17
#     ASUM=0.0
#     DO 6 J=1,17
#     DO 6 K=1,17
#   6 ASUM=ASUM+AUG(I,J,K)
#     WRITE(6,887) I,ASUM
# 887 print(' I=',I3,' ASUM=','%.3f' %)
#   7 CONTINUE
#  
# CONVERT RADIATIVE RATES IN M AND N SHELL TO EV 
      DO 12 I=5,17
      DO 12 J=6,17
      R(I,J)=R(I,J)*6.582119D-16
   12 RH(I,J)=RH(I,J)*6.582119D-16
# LOAD OUTPUT ARRAY
      DO 13 I=1,17
      DO 13 J=1,17
      RAD[1,I,J]=R(I,J)
   13 RAD[2,I,J]=RH(I,J)
# PRINTOUT CHECK SUM
#     DO 15 I=1,17
#     RSUM=0.0
#     DO 14 J=1,17
#  14 RSUM=RSUM+R(I,J)
#     WRITE(6,100) I,RSUM
# 100 print(' SHELL =',I3,' RAD RATE EV=','%.3f' %)
#  15 CONTINUE
#
# LOAD CARBON PHOTOELECTRIC AND COMPTON DATA
      DO 21 J=1,49
      XPE(1,1,J)=math.log(XPEK[J])
      YPE(1,1,J)=math.log(YPEK[J]*1.D-24)
   21 CONTINUE
      DO 22 J=1,54
      XPE(1,2,J)=math.log(XPEL1[J])
      YPE(1,2,J)=math.log(YPEL1[J]*1.D-24)
   22 CONTINUE 
      DO 23 J=1,54 
      XPE(1,3,J)=math.log(XPEL2[J])
      YPE(1,3,J)=math.log(YPEL2[J]*1.D-24)
   23 CONTINUE
# LOAD HYDROGEN PHOTOELECTRIC AND COMPTON DATA
      DO 24 J=1,54
      XPE(2,1,J)=math.log(XPEKH[J])
# ALLOW FOR 4 HYDROGEN ATOMS
      YPE(2,1,J)=math.log(YPEKH[J]*4.0*1.D-24)
   24 CONTINUE
# LOAD RAYLEIGH COMPTON AND PAIR PRODUCTION X-SEC
      DO 25 J=1,54
      XCP(1,J)=math.log(XCOMC[J])
      XCP(2,J)=math.log(XCOMH[J])
      YRY(1,J)=math.log(YRAYC[J]*1.D-24)
      YRY(2,J)=math.log(YRAYH[J]*4.0*1.D-24)
      YCP(1,J)=math.log(YCOMC[J]*1.D-24)
      YCP(2,J)=math.log(YCOMH[J]*4.0*1.D-24)
      YPP(1,J)=math.log(YPAPC[J]*1.D-24)
      YPP(2,J)=math.log(YPAPH[J]*4.0*1.D-24)
   25 CONTINUE
# LOAD RAYLEIGH AND COMPTON FORM FACTORS
      DO 29 J=1,45
      FFAR(1,J)=FFRC[J]
      FFAR(2,J)=FFRH[J]
      FFAC(1,J)=FFCC[J]
      FFAC(2,J)=FFCH[J]
   29 CONTINUE
      RETURN 
      # end
      def CGAS9(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
      DIMENSION INIOC(17),PRBSH(17,17),ES(17),R(17,17),A[17,17,17],PRBSHBT(17)
      DIMENSION INIOCH(17),PRBSHH(17,17),ESHH(17),RH(17,17),AH(17,17,17),PRBSHBTH(17)  
      DIMENSION XPEK(49),YPEK(49),XPEL1(54),YPEL1(54),XPEL2(54),YPEL2(54),XCOMC(54),YRAYC(54),YCOMC(54),YPAPC(54),FFRC(45),FFCC(45)
      DIMENSION XPEKH(54),YPEKH(54),XCOMH(54),YRAYH(54),YCOMH(54),YPAPH(54),FFRH(45),FFCH(45)
#
# 
#  C2H6 DATA FOR CASCADE CALCULATION
# 
# CARBON DATA
#
# LEVEL OCCUPANCY FOR GROUND STATE
      DATA INIOC/2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0/
# AVERAGE SHAKE OFF ELECTRON ENERGY
      DATA ES/10.00,2.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
# SHAKE OFF DATA :  CARLSON AND NESTOR PHYS REV A8(1973)2887
# % PROBABILITY OF J SHELL SHAKE OFF FROM VACANCY IN SHELL I PROBSH(I,J)
      DATA PRBSH/0.20,3.00,9.00,0.0,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.80,3.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.50,2.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,238*0.0/
# SHAKE OFF DATA : CARLSON,NESTOR ET AL PHYS REV 169(1968)27
# % PROBABILITY OF J SHELL SHAKE OFF FROM BETA DECAY PRSHBT[J]
      DATA PRBSHBT/2.74,12.0,12.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
#
# AUGER AND COSTER-KRONIG TRANSITION RATES FOR K AND L SHELLS 
#  WALTERS AND BHALLA (1971)
# K SHELL RATE (MILLIATOMIC UNITS) TO GET TO EV *0.0272105
      DATA A[1,2,2]/0.858/,A[1,2,3]/0.824/,A[1,3,3]/0.378/
# RADIATIVE TRANSITIONS SCOFIELD ANDT 14(1974)121
# DIPOLE AND HIGHER MULTIPOLES , RELATIVISTIC CALC. UNITS 1.519E15/SEC
# K-SHELL
      DATA R(1,2)/1.50E-14/,R(1,3)/3.45E-5/,R(1,4)/6.88E-5/
# L1 SHELL
      DATA R(2,3)/1.20E-7/,R(2,4)/2.41E-7/
# L2 SHELL
      DATA R(3,4)/1.55E-21/
# 
# PHOTOELECTRIC ABSORPTION X-SECTIONS FOR EACH SHELL: 
#    UNITS BARNS/ATOM AND ENERGIES IN EV
#  ASSEMBLED FROM: BAND ET AL.            ANDT 23(1979)443
#                : SCOFIELD               UCRL-51326
#                : VIEGELE                ATOMIC DATA 5(1973)50
# K  SHELL 1S 1/2
      DATA YPEK/9.26E5,7.98E5,4.81E5,2.35E5,1.21E5,8.42E4,6.57E4,5.09E4,4.20E4,1.33E4,5.73E3,1.70E3,707.,354.,200.,80.4,39.3,10.6,4.12,1.08,.415,.197,.107,.0411,.0195,.00512,.00201,5.64E-4,2.41E-4,1.29E-4,8.05E-5,4.06E-5,2.52E-5,1.19E-5,7.51E-6,4.21E-6,2.90E-6,2.20E-6,1.77E-6,1.27E-6,9.93E-7,6.39E-7,4.71E-7,3.08E-7,2.29E-7,1.82E-7,1.51E-7,1.13E-7,9.01E-8/
      DATA XPEK/285.0,300.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# L1 SHELL 2S 1/2
      DATA YPEL1/1.35E7,1.50E6,4.00E5,2.21E5,1.70E5,1.14E5,4.58E4,2.07E4,1.02E4,5.34E3,3.76E3,2.97E3,2.32E3,1.93E3,635.,280.,85.1,35.7,18.0,10.3,4.16,2.05,.554,.217,.0571,.0220,.0105,.00570,.00218,.00104,   2.72E-4,1.07E-4,3.00E-5,1.28E-5,6.88E-6,4.28E-6,2.16E-6,1.34E-6,6.37E-7,4.02E-7,2.26E-7,1.55E-7,1.18E-7,9.49E-8,6.82E-8,5.32E-8,3.42E-8,2.52E-8,1.65E-8,1.23E-8,9.75E-9,8.10E-9,6.05E-9,4.82E-9/
      DATA XPEL1/18.0,50.0,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/          
# L2 SHELL 2P 1/2
      DATA YPEL2/1.35E7,9.0E5,1.50E5,7.81E4,5.15E4,2.79E4,7.59E3,2.49E3,924.,383.,239.,173.,124.,94.6,20.7,6.75,1.36,.432,.176,.0841,  .0259,.0103,.00189,5.64E-4,1.02E-4,3.06E-5,1.20E-5,5.63E-6,1.72E-6,6.96E-7,1.40E-7,4.69E-8,1.10E-8,4.26E-9,2.16E-9,1.29E-9,6.20E-10,3.76E-10,1.82E-10,1.15E-10,6.45E-11,4.44E-11,3.37E-11,2.71E-11,1.95E-11,1.52E-11,9.77E-12,7.20E-12,4.71E-12,3.50E-12,2.79E-12,2.31E-12,1.73E-12,1.38E-12/
      DATA XPEL2/6.40,50.0,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# RAYLEIGH COMPTON AND PAIR PRODUCTION DATA
# RAYLEIGH      COMPTON AND PAIR PRODUCTION DATA
# HUBBEL        J.PHYS.CHEM.REF.DATA 4(1975)471
# HUBBEL        NIST XCOM WEB SITE
      DATA XCOMC/100.,150.,200.,300.,400.,500.,600.,800.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.022D6,1.25D6,1.5D6,2.0D6,2.044'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
      DATA YRAYC/23.94,23.90,24.85,23.72,23.53,23.31,23.03,22.37,21.52,19.12,16.59,12.22,9.179,7.170,5.819,4.181,3.232,1.952,1.292,.6711,      .4079,.2734,.1956,.1139,.07418,.03360,.01903,8.504D-3,4.792D-3,   3.070D-3,                  2.133D-3,1.200D-3,7.682D-4,7.355D-4,4.917D-4,3.415D-4,1.921D-4,1.839D-4,8.539D-5,4.803D-5,3.074D-5,2.135D-5,1.568D-5,1.201D-5,9.488D-6,7.685D-6,3.415D-6,1.921D-6,8.537D-7,4.802D-7,3.073D-7,2.134D-7,1.200D-7,7.682D-8/  
      DATA YCOMC/3.044D-3,6.469D-3,.01140,.02518,.04448,.06870,.09764, .1680,.2519,.5001,                  .7702,1.278,1.685,1.984,2.202,2.497,2.697,3.012,3.182,3.300,3.296,3.250,3.188,3.054,2.924,2.647,2.431,2.118,1.899,1.735,1.605,1.410,1.268,1.255,1.134,1.031,.8795,.8687,.6920,.5772,.4985,.4406,.3960,.3604,.3313,.3069,.2272,.1823,.1327,.1055,    .08805,.07586,.05983,.04966/  
# TOTAL PAIR PRODUCTION NUCLEAR + ELECTRON
      DATA YPAPC/34*1.D-20,2.870D-4,1.594D-3,6.356D-3,6.852D-3,.01844, .03054,   .04163,.05178,.06095,.06928,.07690,.08388,.1108,.1310,.1597,.1802,.1958,.2080,.2263,.2401/   
# NORMALISED RAYLEIGH FORM FACTOR  Hubbel
      DATA FFRC/1.0,.99957,.99830,.9962,.9932,.9895,.9848,.9735,.9590,.9228,.8783,.8538,.7902,.7218,.6562,.5962,.4935,.4170,.3252,.2810,.2558,.2375,.2202,.2027,.1853,.1441,.1094,.0620,.03577,.02147,.01341,.008705,.004055,.002108,.001191,7.198D-4,3.06D-4,6.295D-5, 2.027D-5,5.398D-7,8.455D-8,3.52D-8,5.993D-12,2.767D-21,2.80D-30/
# NORMALISED COMPTON FORM FACTOR  Hubbel
      DATA FFCC/1.7D-21,6.317D-4,.002165,.004922,.008607,.01341,.01928,.03358,.05143,.0948,.1459,.1732,.2413,.3110,.3755,.4340,.5330,.6072,.6973,.7463,.7817,.8130,.8418,.8680,.8913,.9358,.9635,.9883,.9962,.9987,.99947,.99977,.99995,.99998,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0/
# CARBON ATOMIC NUMBER
      IZ[1]=6
      AMZ[1]=24.0214
# 
# ATOMIC HYDROGEN DATA
#
# LEVEL OCCUPANCY FOR GROUND STATE
      DATA INIOCH/1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/
# AVERAGE SHAKE OFF ELECTRON ENERGY
      DATA ESHH/17*0.0/ 
# SHAKE OFF DATA :  CARLSON AND NESTOR PHYS REV A8(1973)2887
# % PROBABILITY OF J SHELL SHAKE OFF FROM VACANCY IN SHELL I PROBSH(I,J)
      DATA PRBSHH/289*0.0/
# SHAKE OFF DATA : CARLSON,NESTOR ET AL PHYS REV 169(1968)27
# % PROBABILITY OF J SHELL SHAKE OFF FROM BETA DECAY PRSHBT[J]
      DATA PRBSHBTH/17*0.0/
#
# PHOTOELECTRIC ABSORPTION X-SECTIONS FOR EACH SHELL: 
#    UNITS BARNS/ATOM AND ENERGIES IN EV
#  ASSEMBLED FROM: BAND ET AL.            ANDT 23(1979)443
#                : SCOFIELD               UCRL-51326
#                : VIEGELE                ATOMIC DATA 5(1973)50
# K  SHELL 1S 1/2
      DATA YPEKH/6.41E6,2.18E6,1.93E4,8.10E3,5.31E3,2.86E3,765.,251.,96.6,41.9,26.7,19.7,14.4,11.4,2.93,1.11,.281,.105,.0491,.0263,.00982,.00456,.00113,4.18E-4,1.03E-4,3.82E-5,1.77E-5,9.46E-6,3.52E-6,1.64E-6,4.18E-7,1.61E-7,4.41E-8,1.86E-8,9.93E-9,6.16E-9,3.12E-9,1.96E-9,9.73E-10,6.20E-10,3.52E-10,2.44E-10,1.87E-10,1.51E-10,1.09E-10,8.50E-11,5.49E-11,4.06E-11,2.66E-11,1.98E-11,1.58E-11,1.31E-11,9.79E-12,7.81E-12/
      DATA XPEKH/13.598,20.,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# RAYLEIGH      COMPTON AND PAIR PRODUCTION DATA
# HUBBEL        J.PHYS.CHEM.REF.DATA 4(1975)471
# HUBBEL        NIST XCOM WEB SITE
# STORM AND ISRAEL    NUCL.DATA TABLES  A7(1970)565
      DATA XCOMH/100.,150.,200.,300.,400.,500.,600.,800.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.022D6,1.25D6,1.5D6,2.0D6,2.044'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
      DATA YCOMH/9.552D-4,2.144D-3,3.802D-3,8.494D-3,1.496D-2,2.310D-2,3.279D-2,5.629D-2,8.424D-2,0.1650,.2478,.3822,.4675,.5187,.5503,.5840,.5993,.6095,.6068,.5924,.5759,.5597,.5444,.5166,.4923,.4435,.4064,.3535,.3168,.2893,.2676,.2351,.2114,.2092,.1890,.1718,.1466,.1448,.1153,.0962,.08308,.07343,.0660,.06007,.05522,.05116,.03786,.03039,.02212,.01758,.01467,.01264,.009972,.008276/
      DATA YRAYH/.6650,.6635,.6617,.6569,.6503,.6421,.6323,.6087,.5806,.4984,.4142,.2764,.1881,.1341,.09987,.06126,.04121,.01943,.01119,.005062,.002866,.001840,.001280,7.211D-4,4.619D-4,2.054D-4,1.156D-4,5.138D-5,2.890D-5,1.850D-5,1.285D-5,7.226D-6,4.625D-6,4.428D-6,2.960D-6,2.056D-6,1.156D-6,1.107D-6,5.139D-7,2.891D-7,1.850D-7,1.285D-7,9.439D-8,7.227D-8,5.710D-8,4.625D-8,2.056D-8,1.156D-8,5.139D-9,2.890D-9,1.850D-9,1.284D-9,7.222D-10,4.620D-10/
# TOTAL PAIR PRODUCTION NUCLEAR + ELECTRON
      DATA YPAPH/34*1.D-20,7.805D-6,4.385D-5,1.758D-4,1.895D-4,5.451D-4,9.849D-4,1.430D-3,1.859D-3,2.260D-3,2.634D-3,2.984D-3,3.308D-3,4.61D-3,5.61D-3,7.08D-3,8.13D-3,8.98D-3,9.65D-3,1.074D-2,1.161D-2/
# RAYLEIGH FORM FACTOR  Hubbel
      DATA FFRH/1.0,.9994,.9978,.9950,.9912,.9863,.9804,.9655,.9469,.8999,.8424,.8108,.7271,.6413,.5581,.4808,.3497,.2513,.1304,.07059,.04032,.02429,.01533,.01009,.006881,.002995,.001494,4.890D-4,2.035D-4,9.902D-5,5.373D-5,3.160D-5,1.300D-5,6.282D-6,3.395D-6,1.992D-6,8.168D-7,1.615D-7,5.112D-8,1.309D-9,1.998D-10,8.182D-11,8.182D-15,8.182D-27,8.182D-39/
# COMPTON FORM FACTOR  Hubbel
      DATA FFCH/1.D-20,.001105,.004410,.009888,.01749,.02717,.03883,.06773,.1033,.1902,.2904,.3426,.4713,.5887,.6885,.7689,.8777,.9369,.9830,.9950,.9984,.9994,.9998,.9999,.99995,.99999,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0/
# HYDROGEN ATOMIC NUMBER
      IZ[2]=1
      AMZ[2]=6.04764
#
# CONVERT SHAKE OFF FROM A % TO A PROBABILITY
      DO 1 I=1,17
      PRSHBT(1,I)=PRBSHBT[I]/100.0
      PRSHBT(2,I)=PRBSHBTH[I]/100.0
      DO 1 J=1,17
      PRBSH(I,J)=PRBSH(I,J)/100.0
      PRBSHH(I,J)=PRBSHH(I,J)/100.0
    1 CONTINUE  
# SWAP INDICES AND DO CHECK SUM
      DO 2 I=1,17
      PRSUM=0.0
      PRSUMH=0.0
      DO 2 J=1,17
      PRSH(1,I,J)=PRBSH[J][I]
      PRSH(2,I,J)=PRBSHH[J][I]
#     PRSUMH=PRSUMH+PRSH(2,I,J)
#     PRSUM=PRSUM+PRSH(1,I,J)
#     WRITE(6,888) I,PRSUM,PRSUMH
# 888 print(' I=',I3,' PRSUM=','%.3f' %,' PRSUM=','%.3f' %)
    2 CONTINUE
# LOAD SKAKE OFF ENERGIES AND LEVEL OCCUPATIONS
      DO 3 I=1,17
      ESH(1,I)=ES[I]
      ESH(2,I)=ESHH[I]
      INIOCC(1,I)=INIOC[I]
      INIOCC(2,I)=INIOCH[I]
    3 CONTINUE
#
# AUGER PROBABILITIES IN ARRAY AUG(I,J,K) INITIAL VACANCY IN SHELL I,
# WITH TRANSITION TO SHELLS J,K
# LOAD OUTPUT ARRAYS AND CONVERT TO EV
      DO 4 I=1,4
      DO 4 J=1,17
      DO 4 K=1,17 
      AUG(1,I,J,K)=A[I,J,K]*0.0272105  
    4 AUG(2,I,J,K)=AH(I,J,K)*0.0272105  
      DO 5 I=5,17
      DO 5 J=1,17
      DO 5 K=1,17
      AUG(1,I,J,K)=A[I,J,K]*0.00272105
    5 AUG(2,I,J,K)=AH(I,J,K)*0.00272105
# CHECK AUGER LEVEL SUMS
#     DO 7 I=1,17
#     ASUM=0.0
#     DO 6 J=1,17
#     DO 6 K=1,17
#   6 ASUM=ASUM+AUG(I,J,K)
#     WRITE(6,887) I,ASUM
# 887 print(' I=',I3,' ASUM=','%.3f' %)
#   7 CONTINUE
#  
# CONVERT RADIATIVE RATES IN M AND N SHELL TO EV 
      DO 12 I=5,17
      DO 12 J=6,17
      R(I,J)=R(I,J)*6.582119D-16
   12 RH(I,J)=RH(I,J)*6.582119D-16
# LOAD OUTPUT ARRAY
      DO 13 I=1,17
      DO 13 J=1,17
      RAD[1,I,J]=R(I,J)
   13 RAD[2,I,J]=RH(I,J)
# PRINTOUT CHECK SUM
#     DO 15 I=1,17
#     RSUM=0.0
#     DO 14 J=1,17
#  14 RSUM=RSUM+R(I,J)
#     WRITE(6,100) I,RSUM
# 100 print(' SHELL =',I3,' RAD RATE EV=','%.3f' %)
#  15 CONTINUE
#
# LOAD CARBON PHOTOELECTRIC AND COMPTON DATA
# ALLOW FOR 2 CARBON ATOMS
      DO 21 J=1,49
      XPE(1,1,J)=math.log(XPEK[J])
      YPE(1,1,J)=math.log(YPEK[J]*2.0*1.D-24)
   21 CONTINUE
      DO 22 J=1,54
      XPE(1,2,J)=math.log(XPEL1[J])
      YPE(1,2,J)=math.log(YPEL1[J]*2.0*1.D-24)
   22 CONTINUE 
      DO 23 J=1,54 
      XPE(1,3,J)=math.log(XPEL2[J])
      YPE(1,3,J)=math.log(YPEL2[J]*2.0*1.D-24)
   23 CONTINUE
# LOAD HYDROGEN PHOTOELECTRIC AND COMPTON DATA
      DO 24 J=1,54
      XPE(2,1,J)=math.log(XPEKH[J])
# ALLOW FOR 6 HYDROGEN ATOMS
      YPE(2,1,J)=math.log(YPEKH[J]*6.0*1.D-24)
   24 CONTINUE
# LOAD RAYLEIGH COMPTON AND PAIR PRODUCTION X-SEC
      DO 25 J=1,54
      XCP(1,J)=math.log(XCOMC[J])
      XCP(2,J)=math.log(XCOMH[J])
      YRY(1,J)=math.log(YRAYC[J]*2.0*1.D-24)
      YRY(2,J)=math.log(YRAYH[J]*6.0*1.D-24)
      YCP(1,J)=math.log(YCOMC[J]*2.0*1.D-24)
      YCP(2,J)=math.log(YCOMH[J]*6.0*1.D-24)
      YPP(1,J)=math.log(YPAPC[J]*2.0*1.D-24)
      YPP(2,J)=math.log(YPAPH[J]*6.0*1.D-24)
   25 CONTINUE
# LOAD RAYLEIGH AND COMPTON FORM FACTORS
      DO 29 J=1,45
      FFAR(1,J)=FFRC[J]
      FFAR(2,J)=FFRH[J]
      FFAC(1,J)=FFCC[J]
      FFAC(2,J)=FFCH[J]
   29 CONTINUE
      RETURN 
      # end
      def CGAS10(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
      DIMENSION INIOC(17),PRBSH(17,17),ES(17),R(17,17),A[17,17,17],PRBSHBT(17)
      DIMENSION INIOCH(17),PRBSHH(17,17),ESHH(17),RH(17,17),AH(17,17,17),PRBSHBTH(17)  
      DIMENSION XPEK(49),YPEK(49),XPEL1(54),YPEL1(54),XPEL2(54),YPEL2(54),XCOMC(54),YRAYC(54),YCOMC(54),YPAPC(54),FFRC(45),FFCC(45)
      DIMENSION XPEKH(54),YPEKH(54),XCOMH(54),YRAYH(54),YCOMH(54),YPAPH(54),FFRH(45),FFCH(45)
# 
# 
#  C3H8 DATA FOR CASCADE CALCULATIONS
#
# CARBON DATA 
#
# LEVEL OCCUPANCY FOR GROUND STATE
      DATA INIOC/2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0/
# AVERAGE SHAKE OFF ELECTRON ENERGY
      DATA ES/10.00,2.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
# SHAKE OFF DATA :  CARLSON AND NESTOR PHYS REV A8(1973)2887
# % PROBABILITY OF J SHELL SHAKE OFF FROM VACANCY IN SHELL I PROBSH(I,J)
      DATA PRBSH/0.20,3.00,9.00,0.0,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.80,3.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.50,2.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,238*0.0/
# SHAKE OFF DATA : CARLSON,NESTOR ET AL PHYS REV 169(1968)27
# % PROBABILITY OF J SHELL SHAKE OFF FROM BETA DECAY PRSHBT[J]
      DATA PRBSHBT/2.74,12.0,12.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
#
# AUGER AND COSTER-KRONIG TRANSITION RATES FOR K AND L SHELLS 
#  WALTERS AND BHALLA (1971)
# K SHELL RATE (MILLIATOMIC UNITS) TO GET TO EV *0.0272105
      DATA A[1,2,2]/0.858/,A[1,2,3]/0.824/,A[1,3,3]/0.378/
# RADIATIVE TRANSITIONS SCOFIELD ANDT 14(1974)121
# DIPOLE AND HIGHER MULTIPOLES , RELATIVISTIC CALC. UNITS 1.519E15/SEC
# K-SHELL
      DATA R(1,2)/1.50E-14/,R(1,3)/3.45E-5/,R(1,4)/6.88E-5/
# L1 SHELL
      DATA R(2,3)/1.20E-7/,R(2,4)/2.41E-7/
# L2 SHELL
      DATA R(3,4)/1.55E-21/
# 
# PHOTOELECTRIC ABSORPTION X-SECTIONS FOR EACH SHELL: 
#    UNITS BARNS/ATOM AND ENERGIES IN EV
#  ASSEMBLED FROM: BAND ET AL.            ANDT 23(1979)443
#                : SCOFIELD               UCRL-51326
#                : VIEGELE                ATOMIC DATA 5(1973)50
# K  SHELL 1S 1/2
      DATA YPEK/9.26E5,7.98E5,4.81E5,2.35E5,1.21E5,8.42E4,6.57E4,5.09E4,4.20E4,1.33E4,5.73E3,1.70E3,707.,354.,200.,80.4,39.3,10.6,4.12,1.08,.415,.197,.107,.0411,.0195,.00512,.00201,5.64E-4,2.41E-4,1.29E-4,8.05E-5,4.06E-5,2.52E-5,1.19E-5,7.51E-6,4.21E-6,2.90E-6,2.20E-6,1.77E-6,1.27E-6,9.93E-7,6.39E-7,4.71E-7,3.08E-7,2.29E-7,1.82E-7,1.51E-7,1.13E-7,9.01E-8/
      DATA XPEK/285.0,300.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# L1 SHELL 2S 1/2
      DATA YPEL1/1.35E7,1.50E6,4.00E5,2.21E5,1.70E5,1.14E5,4.58E4,2.07E4,1.02E4,5.34E3,3.76E3,2.97E3,2.32E3,1.93E3,635.,280.,85.1,35.7,18.0,10.3,4.16,2.05,.554,.217,.0571,.0220,.0105,.00570,.00218,.00104,   2.72E-4,1.07E-4,3.00E-5,1.28E-5,6.88E-6,4.28E-6,2.16E-6,1.34E-6,6.37E-7,4.02E-7,2.26E-7,1.55E-7,1.18E-7,9.49E-8,6.82E-8,5.32E-8,3.42E-8,2.52E-8,1.65E-8,1.23E-8,9.75E-9,8.10E-9,6.05E-9,4.82E-9/
      DATA XPEL1/18.0,50.0,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/          
# L2 SHELL 2P 1/2
      DATA YPEL2/1.35E7,9.0E5,1.50E5,7.81E4,5.15E4,2.79E4,7.59E3,2.49E3,924.,383.,239.,173.,124.,94.6,20.7,6.75,1.36,.432,.176,.0841,  .0259,.0103,.00189,5.64E-4,1.02E-4,3.06E-5,1.20E-5,5.63E-6,1.72E-6,6.96E-7,1.40E-7,4.69E-8,1.10E-8,4.26E-9,2.16E-9,1.29E-9,6.20E-10,3.76E-10,1.82E-10,1.15E-10,6.45E-11,4.44E-11,3.37E-11,2.71E-11,1.95E-11,1.52E-11,9.77E-12,7.20E-12,4.71E-12,3.50E-12,2.79E-12,2.31E-12,1.73E-12,1.38E-12/
      DATA XPEL2/6.40,50.0,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# RAYLEIGH COMPTON AND PAIR PRODUCTION DATA
# RAYLEIGH      COMPTON AND PAIR PRODUCTION DATA
# HUBBEL        J.PHYS.CHEM.REF.DATA 4(1975)471
# HUBBEL        NIST XCOM WEB SITE
      DATA XCOMC/100.,150.,200.,300.,400.,500.,600.,800.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.022D6,1.25D6,1.5D6,2.0D6,2.044'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
      DATA YRAYC/23.94,23.90,24.85,23.72,23.53,23.31,23.03,22.37,21.52,19.12,16.59,12.22,9.179,7.170,5.819,4.181,3.232,1.952,1.292,.6711,      .4079,.2734,.1956,.1139,.07418,.03360,.01903,8.504D-3,4.792D-3,   3.070D-3,                  2.133D-3,1.200D-3,7.682D-4,7.355D-4,4.917D-4,3.415D-4,1.921D-4,1.839D-4,8.539D-5,4.803D-5,3.074D-5,2.135D-5,1.568D-5,1.201D-5,9.488D-6,7.685D-6,3.415D-6,1.921D-6,8.537D-7,4.802D-7,3.073D-7,2.134D-7,1.200D-7,7.682D-8/  
      DATA YCOMC/3.044D-3,6.469D-3,.01140,.02518,.04448,.06870,.09764, .1680,.2519,.5001,                  .7702,1.278,1.685,1.984,2.202,2.497,2.697,3.012,3.182,3.300,3.296,3.250,3.188,3.054,2.924,2.647,2.431,2.118,1.899,1.735,1.605,1.410,1.268,1.255,1.134,1.031,.8795,.8687,.6920,.5772,.4985,.4406,.3960,.3604,.3313,.3069,.2272,.1823,.1327,.1055,    .08805,.07586,.05983,.04966/  
# TOTAL PAIR PRODUCTION NUCLEAR + ELECTRON
      DATA YPAPC/34*1.D-20,2.870D-4,1.594D-3,6.356D-3,6.852D-3,.01844, .03054,   .04163,.05178,.06095,.06928,.07690,.08388,.1108,.1310,.1597,.1802,.1958,.2080,.2263,.2401/   
# NORMALISED RAYLEIGH FORM FACTOR  Hubbel
      DATA FFRC/1.0,.99957,.99830,.9962,.9932,.9895,.9848,.9735,.9590,.9228,.8783,.8538,.7902,.7218,.6562,.5962,.4935,.4170,.3252,.2810,.2558,.2375,.2202,.2027,.1853,.1441,.1094,.0620,.03577,.02147,.01341,.008705,.004055,.002108,.001191,7.198D-4,3.06D-4,6.295D-5, 2.027D-5,5.398D-7,8.455D-8,3.52D-8,5.993D-12,2.767D-21,2.80D-30/
# NORMALISED COMPTON FORM FACTOR  Hubbel
      DATA FFCC/1.7D-21,6.317D-4,.002165,.004922,.008607,.01341,.01928,.03358,.05143,.0948,.1459,.1732,.2413,.3110,.3755,.4340,.5330,.6072,.6973,.7463,.7817,.8130,.8418,.8680,.8913,.9358,.9635,.9883,.9962,.9987,.99947,.99977,.99995,.99998,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0/
# CARBON ATOMIC NUMBER
      IZ[1]=6
      AMZ[1]=36.0321
# 
# ATOMIC HYDROGEN DATA
#
# LEVEL OCCUPANCY FOR GROUND STATE
      DATA INIOCH/1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/
# AVERAGE SHAKE OFF ELECTRON ENERGY
      DATA ESHH/17*0.0/ 
# SHAKE OFF DATA :  CARLSON AND NESTOR PHYS REV A8(1973)2887
# % PROBABILITY OF J SHELL SHAKE OFF FROM VACANCY IN SHELL I PROBSH(I,J)
      DATA PRBSHH/289*0.0/
# SHAKE OFF DATA : CARLSON,NESTOR ET AL PHYS REV 169(1968)27
# % PROBABILITY OF J SHELL SHAKE OFF FROM BETA DECAY PRSHBT[J]
      DATA PRBSHBTH/17*0.0/
#
# PHOTOELECTRIC ABSORPTION X-SECTIONS FOR EACH SHELL: 
#    UNITS BARNS/ATOM AND ENERGIES IN EV
#  ASSEMBLED FROM: BAND ET AL.            ANDT 23(1979)443
#                : SCOFIELD               UCRL-51326
#                : VIEGELE                ATOMIC DATA 5(1973)50
# K  SHELL 1S 1/2
      DATA YPEKH/6.41E6,2.18E6,1.93E4,8.10E3,5.31E3,2.86E3,765.,251.,96.6,41.9,26.7,19.7,14.4,11.4,2.93,1.11,.281,.105,.0491,.0263,.00982,.00456,.00113,4.18E-4,1.03E-4,3.82E-5,1.77E-5,9.46E-6,3.52E-6,1.64E-6,4.18E-7,1.61E-7,4.41E-8,1.86E-8,9.93E-9,6.16E-9,3.12E-9,1.96E-9,9.73E-10,6.20E-10,3.52E-10,2.44E-10,1.87E-10,1.51E-10,1.09E-10,8.50E-11,5.49E-11,4.06E-11,2.66E-11,1.98E-11,1.58E-11,1.31E-11,9.79E-12,7.81E-12/
      DATA XPEKH/13.598,20.,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# RAYLEIGH      COMPTON AND PAIR PRODUCTION DATA
# HUBBEL        J.PHYS.CHEM.REF.DATA 4(1975)471
# HUBBEL        NIST XCOM WEB SITE
# STORM AND ISRAEL    NUCL.DATA TABLES  A7(1970)565
      DATA XCOMH/100.,150.,200.,300.,400.,500.,600.,800.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.022D6,1.25D6,1.5D6,2.0D6,2.044'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
      DATA YCOMH/9.552D-4,2.144D-3,3.802D-3,8.494D-3,1.496D-2,2.310D-2,3.279D-2,5.629D-2,8.424D-2,0.1650,.2478,.3822,.4675,.5187,.5503,.5840,.5993,.6095,.6068,.5924,.5759,.5597,.5444,.5166,.4923,.4435,.4064,.3535,.3168,.2893,.2676,.2351,.2114,.2092,.1890,.1718,.1466,.1448,.1153,.0962,.08308,.07343,.0660,.06007,.05522,.05116,.03786,.03039,.02212,.01758,.01467,.01264,.009972,.008276/
      DATA YRAYH/.6650,.6635,.6617,.6569,.6503,.6421,.6323,.6087,.5806,.4984,.4142,.2764,.1881,.1341,.09987,.06126,.04121,.01943,.01119,.005062,.002866,.001840,.001280,7.211D-4,4.619D-4,2.054D-4,1.156D-4,5.138D-5,2.890D-5,1.850D-5,1.285D-5,7.226D-6,4.625D-6,4.428D-6,2.960D-6,2.056D-6,1.156D-6,1.107D-6,5.139D-7,2.891D-7,1.850D-7,1.285D-7,9.439D-8,7.227D-8,5.710D-8,4.625D-8,2.056D-8,1.156D-8,5.139D-9,2.890D-9,1.850D-9,1.284D-9,7.222D-10,4.620D-10/
# TOTAL PAIR PRODUCTION NUCLEAR + ELECTRON
      DATA YPAPH/34*1.D-20,7.805D-6,4.385D-5,1.758D-4,1.895D-4,5.451D-4,9.849D-4,1.430D-3,1.859D-3,2.260D-3,2.634D-3,2.984D-3,3.308D-3,4.61D-3,5.61D-3,7.08D-3,8.13D-3,8.98D-3,9.65D-3,1.074D-2,1.161D-2/
# RAYLEIGH FORM FACTOR  Hubbel
      DATA FFRH/1.0,.9994,.9978,.9950,.9912,.9863,.9804,.9655,.9469,.8999,.8424,.8108,.7271,.6413,.5581,.4808,.3497,.2513,.1304,.07059,.04032,.02429,.01533,.01009,.006881,.002995,.001494,4.890D-4,2.035D-4,9.902D-5,5.373D-5,3.160D-5,1.300D-5,6.282D-6,3.395D-6,1.992D-6,8.168D-7,1.615D-7,5.112D-8,1.309D-9,1.998D-10,8.182D-11,8.182D-15,8.182D-27,8.182D-39/
# COMPTON FORM FACTOR  Hubbel
      DATA FFCH/1.D-20,.001105,.004410,.009888,.01749,.02717,.03883,.06773,.1033,.1902,.2904,.3426,.4713,.5887,.6885,.7689,.8777,.9369,.9830,.9950,.9984,.9994,.9998,.9999,.99995,.99999,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0/
# HYDROGEN ATOMIC NUMBER
      IZ[2]=1
      AMZ[2]=8.06352
#
# CONVERT SHAKE OFF FROM A % TO A PROBABILITY
      DO 1 I=1,17
      PRSHBT(1,I)=PRBSHBT[I]/100.0
      PRSHBT(2,I)=PRBSHBTH[I]/100.0
      DO 1 J=1,17
      PRBSH(I,J)=PRBSH(I,J)/100.0
      PRBSHH(I,J)=PRBSHH(I,J)/100.0
    1 CONTINUE  
# SWAP INDICES AND DO CHECK SUM
      DO 2 I=1,17
      PRSUM=0.0
      PRSUMH=0.0
      DO 2 J=1,17
      PRSH(1,I,J)=PRBSH[J][I]
      PRSH(2,I,J)=PRBSHH[J][I]
#     PRSUMH=PRSUMH+PRSH(2,I,J)
#     PRSUM=PRSUM+PRSH(1,I,J)
#     WRITE(6,888) I,PRSUM,PRSUMH
# 888 print(' I=',I3,' PRSUM=','%.3f' %,' PRSUM=','%.3f' %)
    2 CONTINUE
# LOAD SKAKE OFF ENERGIES AND LEVEL OCCUPATIONS
      DO 3 I=1,17
      ESH(1,I)=ES[I]
      ESH(2,I)=ESHH[I]
      INIOCC(1,I)=INIOC[I]
      INIOCC(2,I)=INIOCH[I]
    3 CONTINUE
#
# AUGER PROBABILITIES IN ARRAY AUG(I,J,K) INITIAL VACANCY IN SHELL I,
# WITH TRANSITION TO SHELLS J,K
# LOAD OUTPUT ARRAYS AND CONVERT TO EV
      DO 4 I=1,4
      DO 4 J=1,17
      DO 4 K=1,17 
      AUG(1,I,J,K)=A[I,J,K]*0.0272105  
    4 AUG(2,I,J,K)=AH(I,J,K)*0.0272105  
      DO 5 I=5,17
      DO 5 J=1,17
      DO 5 K=1,17
      AUG(1,I,J,K)=A[I,J,K]*0.00272105
    5 AUG(2,I,J,K)=AH(I,J,K)*0.00272105
# CHECK AUGER LEVEL SUMS
#     DO 7 I=1,17
#     ASUM=0.0
#     DO 6 J=1,17
#     DO 6 K=1,17
#   6 ASUM=ASUM+AUG(I,J,K)
#     WRITE(6,887) I,ASUM
# 887 print(' I=',I3,' ASUM=','%.3f' %)
#   7 CONTINUE
#  
# CONVERT RADIATIVE RATES IN M AND N SHELL TO EV 
      DO 12 I=5,17
      DO 12 J=6,17
      R(I,J)=R(I,J)*6.582119D-16
   12 RH(I,J)=RH(I,J)*6.582119D-16
# LOAD OUTPUT ARRAY
      DO 13 I=1,17
      DO 13 J=1,17
      RAD[1,I,J]=R(I,J)
   13 RAD[2,I,J]=RH(I,J)
# PRINTOUT CHECK SUM
#     DO 15 I=1,17
#     RSUM=0.0
#     DO 14 J=1,17
#  14 RSUM=RSUM+R(I,J)
#     WRITE(6,100) I,RSUM
# 100 print(' SHELL =',I3,' RAD RATE EV=','%.3f' %)
#  15 CONTINUE
#
# LOAD CARBON PHOTOELECTRIC AND COMPTON DATA
      DO 21 J=1,49
      XPE(1,1,J)=math.log(XPEK[J])
      YPE(1,1,J)=math.log(YPEK[J]*3.0*1.D-24)
   21 CONTINUE
      DO 22 J=1,54
      XPE(1,2,J)=math.log(XPEL1[J])
      YPE(1,2,J)=math.log(YPEL1[J]*3.0*1.D-24)
   22 CONTINUE 
      DO 23 J=1,54 
      XPE(1,3,J)=math.log(XPEL2[J])
      YPE(1,3,J)=math.log(YPEL2[J]*3.0*1.D-24)
   23 CONTINUE
# LOAD HYDROGEN PHOTOELECTRIC AND COMPTON DATA
      DO 24 J=1,54
      XPE(2,1,J)=math.log(XPEKH[J])
# ALLOW FOR 4 HYDROGEN ATOMS
      YPE(2,1,J)=math.log(YPEKH[J]*8.0*1.D-24)
   24 CONTINUE
# LOAD RAYLEIGH COMPTON AND PAIR PRODUCTION X-SEC
      DO 25 J=1,54
      XCP(1,J)=math.log(XCOMC[J])
      XCP(2,J)=math.log(XCOMH[J])
      YRY(1,J)=math.log(YRAYC[J]*3.0*1.D-24)
      YRY(2,J)=math.log(YRAYH[J]*8.0*1.D-24)
      YCP(1,J)=math.log(YCOMC[J]*3.0*1.D-24)
      YCP(2,J)=math.log(YCOMH[J]*8.0*1.D-24)
      YPP(1,J)=math.log(YPAPC[J]*3.0*1.D-24)
      YPP(2,J)=math.log(YPAPH[J]*8.0*1.D-24)
   25 CONTINUE
# LOAD RAYLEIGH AND COMPTON FORM FACTORS
      DO 29 J=1,45
      FFAR(1,J)=FFRC[J]
      FFAR(2,J)=FFRH[J]
      FFAC(1,J)=FFCC[J]
      FFAC(2,J)=FFCH[J]
   29 CONTINUE
      RETURN 
      # end
      def CGAS11(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
      DIMENSION INIOC(17),PRBSH(17,17),ES(17),R(17,17),A[17,17,17],PRBSHBT(17)
      DIMENSION INIOCH(17),PRBSHH(17,17),ESHH(17),RH(17,17),AH(17,17,17),PRBSHBTH(17)  
      DIMENSION XPEK(49),YPEK(49),XPEL1(54),YPEL1(54),XPEL2(54),YPEL2(54),XCOMC(54),YRAYC(54),YCOMC(54),YPAPC(54),FFRC(45),FFCC(45)
      DIMENSION XPEKH(54),YPEKH(54),XCOMH(54),YRAYH(54),YCOMH(54),YPAPH(54),FFRH(45),FFCH(45)
# 
# 
#  C4H10 DATA FOR CASCADE CALCULATIONS
#
# CARBON DATA 
#
# LEVEL OCCUPANCY FOR GROUND STATE
      DATA INIOC/2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0/
# AVERAGE SHAKE OFF ELECTRON ENERGY
      DATA ES/10.00,2.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
# SHAKE OFF DATA :  CARLSON AND NESTOR PHYS REV A8(1973)2887
# % PROBABILITY OF J SHELL SHAKE OFF FROM VACANCY IN SHELL I PROBSH(I,J)
      DATA PRBSH/0.20,3.00,9.00,0.0,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.80,3.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.50,2.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,238*0.0/
# SHAKE OFF DATA : CARLSON,NESTOR ET AL PHYS REV 169(1968)27
# % PROBABILITY OF J SHELL SHAKE OFF FROM BETA DECAY PRSHBT[J]
      DATA PRBSHBT/2.74,12.0,12.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
#
# AUGER AND COSTER-KRONIG TRANSITION RATES FOR K AND L SHELLS 
#  WALTERS AND BHALLA (1971)
# K SHELL RATE (MILLIATOMIC UNITS) TO GET TO EV *0.0272105
      DATA A[1,2,2]/0.858/,A[1,2,3]/0.824/,A[1,3,3]/0.378/
# RADIATIVE TRANSITIONS SCOFIELD ANDT 14(1974)121
# DIPOLE AND HIGHER MULTIPOLES , RELATIVISTIC CALC. UNITS 1.519E15/SEC
# K-SHELL
      DATA R(1,2)/1.50E-14/,R(1,3)/3.45E-5/,R(1,4)/6.88E-5/
# L1 SHELL
      DATA R(2,3)/1.20E-7/,R(2,4)/2.41E-7/
# L2 SHELL
      DATA R(3,4)/1.55E-21/
# 
# PHOTOELECTRIC ABSORPTION X-SECTIONS FOR EACH SHELL: 
#    UNITS BARNS/ATOM AND ENERGIES IN EV
#  ASSEMBLED FROM: BAND ET AL.            ANDT 23(1979)443
#                : SCOFIELD               UCRL-51326
#                : VIEGELE                ATOMIC DATA 5(1973)50
# K  SHELL 1S 1/2
      DATA YPEK/9.26E5,7.98E5,4.81E5,2.35E5,1.21E5,8.42E4,6.57E4,5.09E4,4.20E4,1.33E4,5.73E3,1.70E3,707.,354.,200.,80.4,39.3,10.6,4.12,1.08,.415,.197,.107,.0411,.0195,.00512,.00201,5.64E-4,2.41E-4,1.29E-4,8.05E-5,4.06E-5,2.52E-5,1.19E-5,7.51E-6,4.21E-6,2.90E-6,2.20E-6,1.77E-6,1.27E-6,9.93E-7,6.39E-7,4.71E-7,3.08E-7,2.29E-7,1.82E-7,1.51E-7,1.13E-7,9.01E-8/
      DATA XPEK/285.0,300.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# L1 SHELL 2S 1/2
      DATA YPEL1/1.35E7,1.50E6,4.00E5,2.21E5,1.70E5,1.14E5,4.58E4,2.07E4,1.02E4,5.34E3,3.76E3,2.97E3,2.32E3,1.93E3,635.,280.,85.1,35.7,18.0,10.3,4.16,2.05,.554,.217,.0571,.0220,.0105,.00570,.00218,.00104,   2.72E-4,1.07E-4,3.00E-5,1.28E-5,6.88E-6,4.28E-6,2.16E-6,1.34E-6,6.37E-7,4.02E-7,2.26E-7,1.55E-7,1.18E-7,9.49E-8,6.82E-8,5.32E-8,3.42E-8,2.52E-8,1.65E-8,1.23E-8,9.75E-9,8.10E-9,6.05E-9,4.82E-9/
      DATA XPEL1/18.0,50.0,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/          
# L2 SHELL 2P 1/2
      DATA YPEL2/1.35E7,9.0E5,1.50E5,7.81E4,5.15E4,2.79E4,7.59E3,2.49E3,924.,383.,239.,173.,124.,94.6,20.7,6.75,1.36,.432,.176,.0841,  .0259,.0103,.00189,5.64E-4,1.02E-4,3.06E-5,1.20E-5,5.63E-6,1.72E-6,6.96E-7,1.40E-7,4.69E-8,1.10E-8,4.26E-9,2.16E-9,1.29E-9,6.20E-10,3.76E-10,1.82E-10,1.15E-10,6.45E-11,4.44E-11,3.37E-11,2.71E-11,1.95E-11,1.52E-11,9.77E-12,7.20E-12,4.71E-12,3.50E-12,2.79E-12,2.31E-12,1.73E-12,1.38E-12/
      DATA XPEL2/6.40,50.0,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# LOAD RAYLEIGH COMPTON AND PAIR PRODUCTION DATA
# HUBBEL          J.PHYS.CHEM.REF.DATA 4(1975)471
# HUBBEL          NIST XCOM WEB SITE
# STORM AND ISRAEL   NUCL DATA TABLES A7(1970)565
      DATA XCOMC/100.,150.,200.,300.,400.,500.,600.,800.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.022D6,1.25D6,1.5D6,2.0D6,2.044'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
      DATA YRAYC/23.94,23.90,24.85,23.72,23.53,23.31,23.03,22.37,21.52,19.12,16.59,12.22,9.179,7.170,5.819,4.181,3.232,1.952,1.292,.6711,      .4079,.2734,.1956,.1139,.07418,.03360,.01903,8.504D-3,4.792D-3,   3.070D-3,                  2.133D-3,1.200D-3,7.682D-4,7.355D-4,4.917D-4,3.415D-4,1.921D-4,1.839D-4,8.539D-5,4.803D-5,3.074D-5,2.135D-5,1.568D-5,1.201D-5,9.488D-6,7.685D-6,3.415D-6,1.921D-6,8.537D-7,4.802D-7,3.073D-7,2.134D-7,1.200D-7,7.682D-8/  
      DATA YCOMC/3.044D-3,6.469D-3,.01140,.02518,.04448,.06870,.09764, .1680,.2519,.5001,                  .7702,1.278,1.685,1.984,2.202,2.497,2.697,3.012,3.182,3.300,3.296,3.250,3.188,3.054,2.924,2.647,2.431,2.118,1.899,1.735,1.605,1.410,1.268,1.255,1.134,1.031,.8795,.8687,.6920,.5772,.4985,.4406,.3960,.3604,.3313,.3069,.2272,.1823,.1327,.1055,    .08805,.07586,.05983,.04966/  
# TOTAL PAIR PRODUCTION NUCLEAR + ELECTRON
      DATA YPAPC/34*1.D-20,2.870D-4,1.594D-3,6.356D-3,6.852D-3,.01844, .03054,   .04163,.05178,.06095,.06928,.07690,.08388,.1108,.1310,.1597,.1802,.1958,.2080,.2263,.2401/   
# NORMALISED RAYLEIGH FORM FACTOR  Hubbel
      DATA FFRC/1.0,.99957,.99830,.9962,.9932,.9895,.9848,.9735,.9590,.9228,.8783,.8538,.7902,.7218,.6562,.5962,.4935,.4170,.3252,.2810,.2558,.2375,.2202,.2027,.1853,.1441,.1094,.0620,.03577,.02147,.01341,.008705,.004055,.002108,.001191,7.198D-4,3.06D-4,6.295D-5, 2.027D-5,5.398D-7,8.455D-8,3.52D-8,5.993D-12,2.767D-21,2.80D-30/
# NORMALISED COMPTON FORM FACTOR  Hubbel
      DATA FFCC/1.7D-21,6.317D-4,.002165,.004922,.008607,.01341,.01928,.03358,.05143,.0948,.1459,.1732,.2413,.3110,.3755,.4340,.5330,.6072,.6973,.7463,.7817,.8130,.8418,.8680,.8913,.9358,.9635,.9883,.9962,.9987,.99947,.99977,.99995,.99998,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0/
# CARBON ATOMIC NUMBER
      IZ[1]=6
      AMZ[1]=48.0428
# 
# ATOMIC HYDROGEN DATA
#
# LEVEL OCCUPANCY FOR GROUND STATE
      DATA INIOCH/1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/
# AVERAGE SHAKE OFF ELECTRON ENERGY
      DATA ESHH/17*0.0/ 
# SHAKE OFF DATA :  CARLSON AND NESTOR PHYS REV A8(1973)2887
# % PROBABILITY OF J SHELL SHAKE OFF FROM VACANCY IN SHELL I PROBSH(I,J)
      DATA PRBSHH/289*0.0/
# SHAKE OFF DATA : CARLSON,NESTOR ET AL PHYS REV 169(1968)27
# % PROBABILITY OF J SHELL SHAKE OFF FROM BETA DECAY PRSHBT[J]
      DATA PRBSHBTH/17*0.0/
#
# PHOTOELECTRIC ABSORPTION X-SECTIONS FOR EACH SHELL: 
#    UNITS BARNS/ATOM AND ENERGIES IN EV
#  ASSEMBLED FROM: BAND ET AL.            ANDT 23(1979)443
#                : SCOFIELD               UCRL-51326
#                : VIEGELE                ATOMIC DATA 5(1973)50
# K  SHELL 1S 1/2
      DATA YPEKH/6.41E6,2.18E6,1.93E4,8.10E3,5.31E3,2.86E3,765.,251.,96.6,41.9,26.7,19.7,14.4,11.4,2.93,1.11,.281,.105,.0491,.0263,.00982,.00456,.00113,4.18E-4,1.03E-4,3.82E-5,1.77E-5,9.46E-6,3.52E-6,1.64E-6,4.18E-7,1.61E-7,4.41E-8,1.86E-8,9.93E-9,6.16E-9,3.12E-9,1.96E-9,9.73E-10,6.20E-10,3.52E-10,2.44E-10,1.87E-10,1.51E-10,1.09E-10,8.50E-11,5.49E-11,4.06E-11,2.66E-11,1.98E-11,1.58E-11,1.31E-11,9.79E-12,7.81E-12/
      DATA XPEKH/13.598,20.,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# LOAD RAYLEIGH COMPTON AND PAIR PRODUCTION DATA
      DATA XCOMH/100.,150.,200.,300.,400.,500.,600.,800.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.022D6,1.25D6,1.5D6,2.0D6,2.044'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
      DATA YCOMH/9.552D-4,2.144D-3,3.802D-3,8.494D-3,1.496D-2,2.310D-2,3.279D-2,5.629D-2,8.424D-2,0.1650,.2478,.3822,.4675,.5187,.5503,.5840,.5993,.6095,.6068,.5924,.5759,.5597,.5444,.5166,.4923,.4435,.4064,.3535,.3168,.2893,.2676,.2351,.2114,.2092,.1890,.1718,.1466,.1448,.1153,.0962,.08308,.07343,.0660,.06007,.05522,.05116,.03786,.03039,.02212,.01758,.01467,.01264,.009972,.008276/
      DATA YRAYH/.6650,.6635,.6617,.6569,.6503,.6421,.6323,.6087,.5806,.4984,.4142,.2764,.1881,.1341,.09987,.06126,.04121,.01943,.01119,.005062,.002866,.001840,.001280,7.211D-4,4.619D-4,2.054D-4,1.156D-4,5.138D-5,2.890D-5,1.850D-5,1.285D-5,7.226D-6,4.625D-6,4.428D-6,2.960D-6,2.056D-6,1.156D-6,1.107D-6,5.139D-7,2.891D-7,1.850D-7,1.285D-7,9.439D-8,7.227D-8,5.710D-8,4.625D-8,2.056D-8,1.156D-8,5.139D-9,2.890D-9,1.850D-9,1.284D-9,7.222D-10,4.620D-10/
# TOTAL PAIR PRODUCTION NUCLEAR + ELECTRON
      DATA YPAPH/34*1.D-20,7.805D-6,4.385D-5,1.758D-4,1.895D-4,5.451D-4,9.849D-4,1.430D-3,1.859D-3,2.260D-3,2.634D-3,2.984D-3,3.308D-3,4.61D-3,5.61D-3,7.08D-3,8.13D-3,8.98D-3,9.65D-3,1.074D-2,1.161D-2/
# RAYLEIGH FORM FACTOR  Hubbel
      DATA FFRH/1.0,.9994,.9978,.9950,.9912,.9863,.9804,.9655,.9469,.8999,.8424,.8108,.7271,.6413,.5581,.4808,.3497,.2513,.1304,.07059,.04032,.02429,.01533,.01009,.006881,.002995,.001494,4.890D-4,2.035D-4,9.902D-5,5.373D-5,3.160D-5,1.300D-5,6.282D-6,3.395D-6,1.992D-6,8.168D-7,1.615D-7,5.112D-8,1.309D-9,1.998D-10,8.182D-11,8.182D-15,8.182D-27,8.182D-39/
# COMPTON FORM FACTOR  Hubbel
      DATA FFCH/1.D-20,.001105,.004410,.009888,.01749,.02717,.03883,.06773,.1033,.1902,.2904,.3426,.4713,.5887,.6885,.7689,.8777,.9369,.9830,.9950,.9984,.9994,.9998,.9999,.99995,.99999,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0/
# HYDROGEN ATOMIC NUMBER
      IZ[2]=1
      AMZ[2]=10.0794
#
# CONVERT SHAKE OFF FROM A % TO A PROBABILITY
      DO 1 I=1,17
      PRSHBT(1,I)=PRBSHBT[I]/100.0
      PRSHBT(2,I)=PRBSHBTH[I]/100.0
      DO 1 J=1,17
      PRBSH(I,J)=PRBSH(I,J)/100.0
      PRBSHH(I,J)=PRBSHH(I,J)/100.0
    1 CONTINUE  
# SWAP INDICES AND DO CHECK SUM
      DO 2 I=1,17
      PRSUM=0.0
      PRSUMH=0.0
      DO 2 J=1,17
      PRSH(1,I,J)=PRBSH[J][I]
      PRSH(2,I,J)=PRBSHH[J][I]
#     PRSUMH=PRSUMH+PRSH(2,I,J)
#     PRSUM=PRSUM+PRSH(1,I,J)
#     WRITE(6,888) I,PRSUM,PRSUMH
# 888 print(' I=',I3,' PRSUM=','%.3f' %,' PRSUM=','%.3f' %)
    2 CONTINUE
# LOAD SKAKE OFF ENERGIES AND LEVEL OCCUPATIONS
      DO 3 I=1,17
      ESH(1,I)=ES[I]
      ESH(2,I)=ESHH[I]
      INIOCC(1,I)=INIOC[I]
      INIOCC(2,I)=INIOCH[I]
    3 CONTINUE
#
# AUGER PROBABILITIES IN ARRAY AUG(I,J,K) INITIAL VACANCY IN SHELL I,
# WITH TRANSITION TO SHELLS J,K
# LOAD OUTPUT ARRAYS AND CONVERT TO EV
      DO 4 I=1,4
      DO 4 J=1,17
      DO 4 K=1,17 
      AUG(1,I,J,K)=A[I,J,K]*0.0272105  
    4 AUG(2,I,J,K)=AH(I,J,K)*0.0272105  
      DO 5 I=5,17
      DO 5 J=1,17
      DO 5 K=1,17
      AUG(1,I,J,K)=A[I,J,K]*0.00272105
    5 AUG(2,I,J,K)=AH(I,J,K)*0.00272105
# CHECK AUGER LEVEL SUMS
#     DO 7 I=1,17
#     ASUM=0.0
#     DO 6 J=1,17
#     DO 6 K=1,17
#   6 ASUM=ASUM+AUG(I,J,K)
#     WRITE(6,887) I,ASUM
# 887 print(' I=',I3,' ASUM=','%.3f' %)
#   7 CONTINUE
#  
# CONVERT RADIATIVE RATES IN M AND N SHELL TO EV 
      DO 12 I=5,17
      DO 12 J=6,17
      R(I,J)=R(I,J)*6.582119D-16
   12 RH(I,J)=RH(I,J)*6.582119D-16
# LOAD OUTPUT ARRAY
      DO 13 I=1,17
      DO 13 J=1,17
      RAD[1,I,J]=R(I,J)
   13 RAD[2,I,J]=RH(I,J)
# PRINTOUT CHECK SUM
#     DO 15 I=1,17
#     RSUM=0.0
#     DO 14 J=1,17
#  14 RSUM=RSUM+R(I,J)
#     WRITE(6,100) I,RSUM
# 100 print(' SHELL =',I3,' RAD RATE EV=','%.3f' %)
#  15 CONTINUE
#
# LOAD CARBON PHOTOELECTRIC AND COMPTON DATA
# SCALE TO 4 ATOMS PER MOLECULE
      DO 21 J=1,49
      XPE(1,1,J)=math.log(XPEK[J])
      YPE(1,1,J)=math.log(YPEK[J]*4.0*1.D-24)
   21 CONTINUE
      DO 22 J=1,54
      XPE(1,2,J)=math.log(XPEL1[J])
      YPE(1,2,J)=math.log(YPEL1[J]*4.0*1.D-24)
   22 CONTINUE 
      DO 23 J=1,54 
      XPE(1,3,J)=math.log(XPEL2[J])
      YPE(1,3,J)=math.log(YPEL2[J]*4.0*1.D-24)
   23 CONTINUE
# LOAD HYDROGEN PHOTOELECTRIC AND COMPTON DATA
      DO 24 J=1,54
      XPE(2,1,J)=math.log(XPEKH[J])
# SCALE TO 10 HYDROGEN ATOMS PER MOLECULE
      YPE(2,1,J)=math.log(YPEKH[J]*10.0*1.D-24)
   24 CONTINUE
# LOAD RAYLEIGH COMPTON AND PAIR PRODUCTION X-SEC
      DO 25 J=1,54
      XCP(1,J)=math.log(XCOMC[J])
      XCP(2,J)=math.log(XCOMH[J])
      YRY(1,J)=math.log(YRAYC[J]*4.0*1.D-24)
      YRY(2,J)=math.log(YRAYH[J]*10.0*1.D-24)
      YCP(1,J)=math.log(YCOMC[J]*4.0*1.D-24)
      YCP(2,J)=math.log(YCOMH[J]*10.0*1.D-24)
      YPP(1,J)=math.log(YPAPC[J]*4.0*1.D-24)
      YPP(2,J)=math.log(YPAPH[J]*10.0*1.D-24)
   25 CONTINUE
# LOAD RAYLEIGH AND COMPTON FORM FACTORS
      DO 26 J=1,45
      FFAR(1,J)=FFRC[J]
      FFAR(2,J)=FFRH[J]
      FFAC(1,J)=FFCC[J]
      FFAC(2,J)=FFCH[J]
   26 CONTINUE
      RETURN 
      # end
      def CGAS12(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
      DIMENSION INIOC(17),PRBSH(17,17),ES(17),R(17,17),A[17,17,17],PRBSHBT(17)
      DIMENSION INIOCO(17),PRBSHO(17,17),ESO(17),RO(17,17),AO(17,17,17),PRBSHBTO(17)  
      DIMENSION XPEK(49),YPEK(49),XPEL1(54),YPEL1(54),XPEL2(54),YPEL2(54),XCOMC(54),YRAYC(54),YCOMC(54),YPAPC(54),FFRC(45),FFCC(45)
      DIMENSION XPEKO(46),YPEKO(46),XPEL1O(53),YPEL1O(53),XPEL2O(55),YPEL2O(55),XPEL3O(55),YPEL3O(55),XCOMO(54),YRAYO(54),YCOMO(54),YPAPO(54),FFRO(45),FFCO(45)
#
#  CO2 DATA 
# 
# CARBON DATA FOR CASCADE CALCULATIONS
#
# LEVEL OCCUPANCY FOR GROUND STATE
      DATA INIOC/2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0/
# AVERAGE SHAKE OFF ELECTRON ENERGY
      DATA ES/10.00,2.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
# SHAKE OFF DATA :  CARLSON AND NESTOR PHYS REV A8(1973)2887
# % PROBABILITY OF J SHELL SHAKE OFF FROM VACANCY IN SHELL I PROBSH(I,J)
      DATA PRBSH/0.20,3.00,9.00,0.0,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.80,3.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.50,2.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,238*0.0/
# SHAKE OFF DATA : CARLSON,NESTOR ET AL PHYS REV 169(1968)27
# % PROBABILITY OF J SHELL SHAKE OFF FROM BETA DECAY PRSHBT[J]
      DATA PRBSHBT/2.74,12.0,12.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
#
# AUGER AND COSTER-KRONIG TRANSITION RATES FOR K AND L SHELLS 
#  WALTERS AND BHALLA (1971)
# K SHELL RATE (MILLIATOMIC UNITS) TO GET TO EV *0.0272105
      DATA A[1,2,2]/0.858/,A[1,2,3]/0.824/,A[1,3,3]/0.378/
# RADIATIVE TRANSITIONS SCOFIELD ANDT 14(1974)121
# DIPOLE AND HIGHER MULTIPOLES , RELATIVISTIC CALC. UNITS 1.519E15/SEC
# K-SHELL
      DATA R(1,2)/1.50E-14/,R(1,3)/3.45E-5/,R(1,4)/6.88E-5/
# L1 SHELL
      DATA R(2,3)/1.20E-7/,R(2,4)/2.41E-7/
# L2 SHELL
      DATA R(3,4)/1.55E-21/
# 
# PHOTOELECTRIC ABSORPTION X-SECTIONS FOR EACH SHELL: 
#    UNITS BARNS/ATOM AND ENERGIES IN EV
#  ASSEMBLED FROM: BAND ET AL.            ANDT 23(1979)443
#                : SCOFIELD               UCRL-51326
#                : VIEGELE                ATOMIC DATA 5(1973)50
# K  SHELL 1S 1/2
      DATA YPEK/9.26E5,7.98E5,4.81E5,2.35E5,1.21E5,8.42E4,6.57E4,5.09E4,4.20E4,1.33E4,5.73E3,1.70E3,707.,354.,200.,80.4,39.3,10.6,4.12,1.08,.415,.197,.107,.0411,.0195,.00512,.00201,5.64E-4,2.41E-4,1.29E-4,8.05E-5,4.06E-5,2.52E-5,1.19E-5,7.51E-6,4.21E-6,2.90E-6,2.20E-6,1.77E-6,1.27E-6,9.93E-7,6.39E-7,4.71E-7,3.08E-7,2.29E-7,1.82E-7,1.51E-7,1.13E-7,9.01E-8/
      DATA XPEK/285.0,300.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# L1 SHELL 2S 1/2
      DATA YPEL1/1.35E7,1.50E6,4.00E5,2.21E5,1.70E5,1.14E5,4.58E4,2.07E4,1.02E4,5.34E3,3.76E3,2.97E3,2.32E3,1.93E3,635.,280.,85.1,35.7,18.0,10.3,4.16,2.05,.554,.217,.0571,.0220,.0105,.00570,.00218,.00104,   2.72E-4,1.07E-4,3.00E-5,1.28E-5,6.88E-6,4.28E-6,2.16E-6,1.34E-6,6.37E-7,4.02E-7,2.26E-7,1.55E-7,1.18E-7,9.49E-8,6.82E-8,5.32E-8,3.42E-8,2.52E-8,1.65E-8,1.23E-8,9.75E-9,8.10E-9,6.05E-9,4.82E-9/
      DATA XPEL1/18.0,50.0,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/          
# L2 SHELL 2P 1/2
      DATA YPEL2/1.35E7,9.0E5,1.50E5,7.81E4,5.15E4,2.79E4,7.59E3,2.49E3,924.,383.,239.,173.,124.,94.6,20.7,6.75,1.36,.432,.176,.0841,  .0259,.0103,.00189,5.64E-4,1.02E-4,3.06E-5,1.20E-5,5.63E-6,1.72E-6,6.96E-7,1.40E-7,4.69E-8,1.10E-8,4.26E-9,2.16E-9,1.29E-9,6.20E-10,3.76E-10,1.82E-10,1.15E-10,6.45E-11,4.44E-11,3.37E-11,2.71E-11,1.95E-11,1.52E-11,9.77E-12,7.20E-12,4.71E-12,3.50E-12,2.79E-12,2.31E-12,1.75E-12,1.38E-12/
      DATA XPEL2/6.40,50.0,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# LOAD RAYLEIGH COMPTON AND PAIR PRODUCTION DATA
# HUBBEL         J.PHYS.CHEM.REF DATA 4(1975)471
# HUBBEL         NIST XCOM WEB SITE
# STORM AND ISRAEL   NUCL.DATA TABLES  A7(1970)565
      DATA XCOMC/100.,150.,200.,300.,400.,500.,600.,800.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.022D6,1.25D6,1.5D6,2.0D6,2.044'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
      DATA YRAYC/23.94,23.90,24.85,23.72,23.53,23.31,23.03,22.37,21.52,19.12,16.59,12.22,9.179,7.170,5.819,4.181,3.232,1.952,1.292,.6711,      .4079,.2734,.1956,.1139,.07418,.03360,.01903,8.504D-3,4.792D-3,   3.070D-3,                  2.133D-3,1.200D-3,7.682D-4,7.355D-4,4.917D-4,3.415D-4,1.921D-4,1.839D-4,8.539D-5,4.803D-5,3.074D-5,2.135D-5,1.568D-5,1.201D-5,9.488D-6,7.685D-6,3.415D-6,1.921D-6,8.537D-7,4.802D-7,3.073D-7,2.134D-7,1.200D-7,7.682D-8/  
      DATA YCOMC/3.044D-3,6.469D-3,.01140,.02518,.04448,.06870,.09764, .1680,.2519,.5001,                  .7702,1.278,1.685,1.984,2.202,2.497,2.697,3.012,3.182,3.300,3.296,3.250,3.188,3.054,2.924,2.647,2.431,2.118,1.899,1.735,1.605,1.410,1.268,1.255,1.134,1.031,.8795,.8687,.6920,.5772,.4985,.4406,.3960,.3604,.3313,.3069,.2272,.1823,.1327,.1055,    .08805,.07586,.05983,.04966/  
# TOTAL PAIR PRODUCTION NUCLEAR + ELECTRON
      DATA YPAPC/34*1.D-20,2.870D-4,1.594D-3,6.356D-3,6.852D-3,.01844,.03054,   .04163,.05178,.06095,.06928,.07690,.08388,.1108,.1310,.1597,.1802,.1958,.2080,.2263,.2401/   
# NORMALISED RAYLEIGH FORM FACTOR  Hubbel
      DATA FFRC/1.0,.99957,.99830,.9962,.9932,.9895,.9848,.9735,.9590,.9228,.8783,.8538,.7902,.7218,.6562,.5962,.4935,.4170,.3252,.2810,.2558,.2375,.2202,.2027,.1853,.1441,.1094,.0620,.03577,.02147,.01341,.008705,.004055,.002108,.001191,7.198D-4,3.06D-4,6.295D-5, 2.027D-5,5.398D-7,8.455D-8,3.52D-8,5.993D-12,2.767D-21,2.80D-30/
# NORMALISED COMPTON FORM FACTOR  Hubbel
      DATA FFCC/1.7D-21,6.317D-4,.002165,.004922,.008607,.01341,.01928,.03358,.05143,.0948,.1459,.1732,.2413,.3110,.3755,.4340,.5330,.6072,.6973,.7463,.7817,.8130,.8418,.8680,.8913,.9358,.9635,.9883,.9962,.9987,.99947,.99977,.99995,.99998,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0/
# CARBON ATOMIC NUMBER
      IZ[1]=6
      AMZ[1]=12.0107
# 
# ATOMIC OXYGEN DATA 
#
# LEVEL OCCUPANCY FOR GROUND STATE
      DATA INIOCO/2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0/
# AVERAGE SHAKE OFF ELECTRON ENERGY
      DATA ESO/12.0,2.0,2.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
# SHAKE OFF DATA :  CARLSON AND NESTOR PHYS REV A8(1973)2887
# % PROBABILITY OF J SHELL SHAKE OFF FROM VACANCY IN SHELL I PROBSH(I,J)
      DATA PRBSHO/0.10,2.50,6.00,6.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.30,2.00,1.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.50,1.00,2.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.50,1.00,1.20,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,221*0.0/
# SHAKE OFF DATA : CARLSON,NESTOR ET AL PHYS REV 169(1968)27
# % PROBABILITY OF J SHELL SHAKE OFF FROM BETA DECAY PRSHBT[J]
      DATA PRBSHBTO/1.56,6.0,8.0,12.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
#
# AUGER AND COSTER-KRONIG TRANSITION RATES FOR K AND L SHELLS 
#  WALTERS AND BHALLA (1971)
# K SHELL RATE (MILLIATOMIC UNITS) TO GET TO EV *0.0272105
      DATA AO(1,2,2)/0.856/,AO(1,2,3)/0.824/,AO(1,3,3)/0.382/
      DATA AO(1,2,4)/0.140/,AO(1,3,4)/0.068/
# RADIATIVE TRANSITIONS SCOFIELD ANDT 14(1974)121
# DIPOLE AND HIGHER MULTIPOLES , RELATIVISTIC CALC. UNITS 1.519E15/SEC
# K-SHELL
      DATA RO(1,2)/3.36E-13/,RO(1,3)/2.752E-4/,RO(1,4)/5.48E-4/
# L1 SHELL
      DATA RO(2,3)/6.62E-7/,RO(2,4)/1.34E-6/
# L2 SHELL
      DATA RO(3,4)/2.55E-19/
# 
# PHOTOELECTRIC ABSORPTION X-SECTIONS FOR EACH SHELL: 
#    UNITS BARNS/ATOM AND ENERGIES IN EV
#  ASSEMBLED FROM: BAND ET AL.            ANDT 23(1979)443
#                : SCOFIELD               UCRL-51326
#                : VIEGELE                ATOMIC DATA 5(1973)50
# K  SHELL 1S 1/2
      DATA YPEKO/5.75E5,3.06E5,2.21E5,1.76E5,1.39E5,1.16E5,3.9E4,1.75E4,5.44E3,2.32E3,1.19E3,682.,281.,140.,38.8,15.4,4.13,1.61,.771,.423,.163,.0782,.0207,.00817,.00231,9.89E-4,5.33E-4,3.32E-4,1.68E-4,1.04E-4,4.91E-5,3.09E-5,1.73E-5,1.18E-5,8.98E-6,7.22E-6,5.18E-6,4.03E-6,2.59E-6,1.91E-6,1.25E-6,9.26E-7,7.36E-7,6.11E-7,4.56E-7,3.64E-7/
      DATA XPEKO/532.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# L1 SHELL 2S 1/2
      DATA YPEL1O/5.60E6,6.00E5,3.67E5,2.96E5,2.12E5,9.79E4,4.78E4,2.51E4,1.39E4,1.00E4,8.00E3,6.36E3,5.32E3,1.87E3,863.,279.,122.,63.1,36.6,15.3,7.67,2.15,.859,.232,.0906,.0436,.0239,.00926,.00444,.00118,4.66E-4,1.31E-4,5.63E-5,3.03E-5,1.89E-5,9.54E-6,5.93E-6,2.80E-6,1.76E-6,9.84E-7,6.75E-7,5.12E-7,4.12E-7,2.95E-7,2.30E-7,1.48E-7,1.09E-7,7.11E-8,5.28E-8,4.20E-8,3.49E-8,2.60E-8,2.08E-8/
      DATA XPEL1O/28.5,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/          
# L2 SHELL 2P 1/2
      DATA YPEL2O/2.0E7,2.00E7,2.4E6,3.25E5,1.93E5,1.34E5,7.80E4,2.29E4,7.93E3,3.13E3,1.35E3,853.,626.,455.,357.,85.7,30.0,6.51,2.13,.884,.428,.136,.0552,.0106,.00325,6.11E-4,1.87E-4,7.46E-5,3.55E-5,1.11E-5,4.55E-6,9.39E-7,3.20E-7,7.55E-8,2.91E-8,1.45E-8,8.47E-9,3.86E-9,2.21E-9,9.07E-10,5.71E-10,3.19E-10,2.19E-10,1.66E-10,1.33E-10,9.56E-11,7.44E-11,4.78E-11,3.52E-11,2.30E-11,1.71E-11,1.36E-11,1.13E-11,8.43E-12,6.72E-12/
      DATA XPEL2O/13.8,25.0,50.0,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# L3 SHELL 2P 3/2
      DATA YPEL3O/4.0E7,4.00E7,4.8E6,6.50E5,3.84E5,2.67E5,1.55E5,4.55E4,1.58E4,6.23E3,2.69E3,1.69E3,1.24E3,900.,708.,170.,59.3,12.8,4.20,1.74,.841,.265,.107,.0205,.00625,.00116,3.51E-4,1.39E-4,6.55E-5,2.01E-5,8.16E-6,1.65E-6,5.52E-7,1.30E-7,5.10E-8,2.62E-8,1.58E-8,7.76E-9,4.77E-9,2.25E-9,1.42E-9,7.91E-10,5.42E-10,4.12E-10,3.31E-10,2.37E-10,1.85E-10,1.19E-10,8.73E-11,5.71E-11,4.24E-11,3.37E-11,2.80E-11,2.09E-11,1.67E-11/
      DATA XPEL3O/13.8,25.0,50.0,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# RAYLEIGH COMPTON AND PAIR PRODUCTION DATA
      DATA XCOMO/100.,150.,200.,300.,400.,500.,600.,800.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.022D6,1.25D6,1.5D6,2.0D6,2.044'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
      DATA YRAYO/42.56,42.52,42.46,42.32,42.12,41.87,41.57,40.82,39.89,36.98,33.56,26.63,20.81,16.42,13.23,9.157,6.814,3.948,2.627,1.394,      .8541,.5755,.4138,.2428,.1591,.07264,.04128,.01849,.01043,        .006684,                   4.645D-3,2.615D-3,1.674D-3,1.603D-3,1.072D-3,7.442D-4,4.187D-4,4.008D-4,1.861D-4,1.047D-4,6.699D-5,4.652D-5,3.418D-5,2.617D-5,2.068D-5,1.675D-5,7.474D-6,4.204D-6,1.868D-6,1.051D-6,6.726D-7,4.670D-7,2.628D-7,1.681D-7/  
      DATA YCOMO/2.479D-3,5.433D-3,9.695D-3,.02175,.03847,.05970,.08522,.1484,.2262,.4697,                  .7560,1.352,1.886,2.323,2.665,3.139,3.439,3.864,4.092,4.286,4.315,4.275,4.207,4.044,3.880,3.521,3.236,2.821,2.530,2.312,2.139,1.880,1.691,1.673,1.512,1.374,1.173,1.158,.9226,.7696,.6646,.5874,.5280,.4805,.4417,.4093,.3029,.2431,.1770,.1406,    .1174,.1012,.07977,.06621/    
# TOTAL PAIR PRODUCTION NUCLEAR + ELECTRON
      DATA YPAPO/34*1.D-20,5.159D-4,2.85D-3,.01134,.01222,.03273,.05388,.07314,.09067,.1064,.1207,.1338,.1457,.1915,.2267,.2749,.3085,    .3339,.3549,.3862,.4086/   
# NORMALISED RAYLEIGH FORM FACTOR  Hubbel
      DATA FFRO/1.0,.99967,.99890,.9976,.9959,.9935,.9907,.9836,.9746,.9515,.9221,.9055,.8594,.8087,.7559,.7025,.6006,.5107,.3754,.2919,.2430,.2141,.1959,.1827,.1720,.1477,.1245,.0840,.05521,.0398,.02439,.01905,.008362,.004562,.002637,.001975,6.5D-4,1.609D-4,5.239D-5,1.424D-6,  2.251D-7,9.421D-8,1.809D-11,9.77D-21,1.0D-29/
# NORMALISED COMPTON FORM FACTOR  Hubbel
      DATA FFCO/1.2D-21,3.7D-4,.00137,.00316,.00560,.00872,.0125,.02201,.03387,.06421,.1015,.1221,.1775,.2356,.2937,.3499,.4516,.5366,.6571,.7285,.7719,.8014,.8245,.8444,.8626,.9020,.9327,.9705,.9875,.9946,.99759,.99887,.99971,.99991,.99997,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0/
# OXYGEN ATOMIC NUMBER
      IZ[2]=8
      AMZ[2]=31.9988
# CONVERT SHAKE OFF FROM A % TO A PROBABILITY
      DO 1 I=1,17
      PRSHBT(1,I)=PRBSHBT[I]/100.0
      PRSHBT(2,I)=PRBSHBTO[I]/100.0
      DO 1 J=1,17
      PRBSH(I,J)=PRBSH(I,J)/100.0
      PRBSHO(I,J)=PRBSHO(I,J)/100.0
    1 CONTINUE  
# SWAP INDICES AND DO CHECK SUM
      DO 2 I=1,17
      PRSUM=0.0
      PRSUMO=0.0
      DO 2 J=1,17
      PRSH(1,I,J)=PRBSH[J][I]
      PRSH(2,I,J)=PRBSHO[J][I]
#     PRSUM=PRSUM+PRSH(1,I,J)
#     PRSUMO=PRSUMO+PRSH(2,I,J)
#     WRITE(6,888) I,PRSUM,PRSUMO
# 888 print(' I=',I3,' PRSUM=','%.3f' %,' PRSUMO=','%.3f' %)
    2 CONTINUE
# LOAD SKAKE OFF ENERGIES AND LEVEL OCCUPATIONS
      DO 3 I=1,17
      ESH(1,I)=ES[I]
      ESH(2,I)=ESO[I]
      INIOCC(1,I)=INIOC[I]
      INIOCC(2,I)=INIOCO[I]
    3 CONTINUE
#
# AUGER PROBABILITIES IN ARRAY AUG(I,J,K) INITIAL VACANCY IN SHELL I,
# WITH TRANSITION TO SHELLS J,K
# LOAD OUTPUT ARRAYS AND CONVERT TO EV
      DO 4 I=1,4
      DO 4 J=1,17
      DO 4 K=1,17 
      AUG(1,I,J,K)=A[I,J,K]*0.0272105
    4 AUG(2,I,J,K)=AO(I,J,K)*0.0272105  
      DO 5 I=5,17
      DO 5 J=1,17
      DO 5 K=1,17
      AUG(1,I,J,K)=A[I,J,K]*0.00272105
    5 AUG(2,I,J,K)=AO(I,J,K)*0.00272105
# CHECK AUGER LEVEL SUMS
#     DO 7 I=1,17
#     ASUM=0.0
#     DO 6 J=1,17
#     DO 6 K=1,17
#   6 ASUM=ASUM+AUG(I,J,K)
#     WRITE(6,887) I,ASUM
# 887 print(' I=',I3,' ASUM=','%.3f' %)
#   7 CONTINUE
#  
# CONVERT RADIATIVE RATES IN M AND N SHELL TO EV 
      DO 12 I=5,17
      DO 12 J=6,17
      R(I,J)=R(I,J)*6.582119D-16
   12 RO(I,J)=RO(I,J)*6.582119D-16
# LOAD OUTPUT ARRAY
      DO 13 I=1,17
      DO 13 J=1,17
      RAD[1,I,J]=R(I,J)
   13 RAD[2,I,J]=RO(I,J)
# PRINTOUT CHECK SUM
#     DO 15 I=1,17
#     RSUM=0.0
#     DO 14 J=1,17
#  14 RSUM=RSUM+R(I,J)
#     WRITE(6,100) I,RSUM
# 100 print(' SHELL =',I3,' RAD RATE EV=','%.3f' %)
#  15 CONTINUE
#
# LOAD CARBON PHOTOELECTRIC AND COMPTON  DATA
      DO 21 J=1,49
      XPE(1,1,J)=math.log(XPEK[J])
      YPE(1,1,J)=math.log(YPEK[J]*1.D-24)
   21 CONTINUE
      DO 22 J=1,54
      XPE(1,2,J)=math.log(XPEL1[J])
      YPE(1,2,J)=math.log(YPEL1[J]*1.D-24)
   22 CONTINUE 
      DO 23 J=1,54 
      XPE(1,3,J)=math.log(XPEL2[J])
      YPE(1,3,J)=math.log(YPEL2[J]*1.D-24)
   23 CONTINUE
# LOAD OXYGEN PHOTOELECTRIC AND COMPTON DATA DATA
# SCALE BY TWO FOR OXYGEN ATOMS
      DO 24 J=1,46
      XPE(2,1,J)=math.log(XPEKO[J])
      YPE(2,1,J)=math.log(YPEKO[J]*2.0*1.D-24)
   24 CONTINUE
      DO 25 J=1,53
      XPE(2,2,J)=math.log(XPEL1O[J])
      YPE(2,2,J)=math.log(YPEL1O[J]*2.0*1.D-24)
   25 CONTINUE 
      DO 26 J=1,55 
      XPE(2,3,J)=math.log(XPEL2O[J])
      YPE(2,3,J)=math.log(YPEL2O[J]*2.0*1.D-24)
   26 CONTINUE
      DO 27 J=1,55 
      XPE(2,4,J)=math.log(XPEL3O[J])
      YPE(2,4,J)=math.log(YPEL3O[J]*2.0*1.D-24)
   27 CONTINUE
# LOAD RAYLEIGH COMPTON AND PAIR PRODUCTION X-SEC
      DO 28 J=1,54
      XCP(1,J)=math.log(XCOMC[J])
      XCP(2,J)=math.log(XCOMO[J])
      YRY(1,J)=math.log(YRAYC[J]*1.D-24)
      YRY(2,J)=math.log(YRAYO[J]*2.0*1.D-24)
      YCP(1,J)=math.log(YCOMC[J]*1.D-24)
      YCP(2,J)=math.log(YCOMO[J]*2.0*1.D-24)
      YPP(1,J)=math.log(YPAPC[J]*1.D-24)
      YPP(2,J)=math.log(YPAPO[J]*2.0*1.D-24)
   28 CONTINUE
# LOAD RAYLEIGH AND COMPTON FORM FACTORS
      DO 29 J=1,45
      FFAR(1,J)=FFRC[J]
      FFAR(2,J)=FFRO[J]
      FFAC(1,J)=FFCC[J]
      FFAC(2,J)=FFCO[J]
   29 CONTINUE
      RETURN 
      # end
      def CGAS13(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS14(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
      DIMENSION INIOCO(17),PRBSHO(17,17),ESO(17),RO(17,17),AO(17,17,17),PRBSHBTO(17)  
      DIMENSION XPEKO(46),YPEKO(46),XPEL1O(53),YPEL1O(53),XPEL2O(55),YPEL2O(55),XPEL3O(55),YPEL3O(55),XCOMO(54),YRAYO(54),YCOMO(54),YPAPO(54),FFRO(45),FFCO(45)
      DIMENSION INIOCH(17),PRBSHH(17,17),ESHH(17),RH(17,17),AH(17,17,17),PRBSHBTH(17)  
      DIMENSION XPEKH(54),YPEKH(54),XCOMH(54),YRAYH(54),YCOMH(54),YPAPH(54),FFRH(45),FFCH(45)
# 
# ATOMIC OXYGEN DATA 
#
# LEVEL OCCUPANCY FOR GROUND STATE
      DATA INIOCO/2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0/
# AVERAGE SHAKE OFF ELECTRON ENERGY
      DATA ESO/12.0,2.0,2.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
# SHAKE OFF DATA :  CARLSON AND NESTOR PHYS REV A8(1973)2887
# % PROBABILITY OF J SHELL SHAKE OFF FROM VACANCY IN SHELL I PROBSH(I,J)
      DATA PRBSHO/0.10,2.50,6.00,6.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.30,2.00,1.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.50,1.00,2.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.50,1.00,1.20,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,221*0.0/
# SHAKE OFF DATA : CARLSON,NESTOR ET AL PHYS REV 169(1968)27
# % PROBABILITY OF J SHELL SHAKE OFF FROM BETA DECAY PRSHBT[J]
      DATA PRBSHBTO/1.56,6.0,8.0,12.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
#
# AUGER AND COSTER-KRONIG TRANSITION RATES FOR K AND L SHELLS 
#  WALTERS AND BHALLA (1971)
# K SHELL RATE (MILLIATOMIC UNITS) TO GET TO EV *0.0272105
      DATA AO(1,2,2)/0.856/,AO(1,2,3)/0.824/,AO(1,3,3)/0.382/
      DATA AO(1,2,4)/0.140/,AO(1,3,4)/0.068/
# RADIATIVE TRANSITIONS SCOFIELD ANDT 14(1974)121
# DIPOLE AND HIGHER MULTIPOLES , RELATIVISTIC CALC. UNITS 1.519E15/SEC
# K-SHELL
      DATA RO(1,2)/3.36E-13/,RO(1,3)/2.752E-4/,RO(1,4)/5.48E-4/
# L1 SHELL
      DATA RO(2,3)/6.62E-7/,RO(2,4)/1.34E-6/
# L2 SHELL
      DATA RO(3,4)/2.55E-19/
# 
# PHOTOELECTRIC ABSORPTION X-SECTIONS FOR EACH SHELL: 
#    UNITS BARNS/ATOM AND ENERGIES IN EV
#  ASSEMBLED FROM: BAND ET AL.            ANDT 23(1979)443
#                : SCOFIELD               UCRL-51326
#                : VIEGELE                ATOMIC DATA 5(1973)50
# K  SHELL 1S 1/2
      DATA YPEKO/5.75E5,3.06E5,2.21E5,1.76E5,1.39E5,1.16E5,3.9E4,1.75E4,5.44E3,2.32E3,1.19E3,682.,281.,140.,38.8,15.4,4.13,1.61,.771,.423,.163,.0782,.0207,.00817,.00231,9.89E-4,5.33E-4,3.32E-4,1.68E-4,1.04E-4,4.91E-5,3.09E-5,1.73E-5,1.18E-5,8.98E-6,7.22E-6,5.18E-6,4.03E-6,2.59E-6,1.91E-6,1.25E-6,9.26E-7,7.36E-7,6.11E-7,4.56E-7,3.64E-7/
      DATA XPEKO/532.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# L1 SHELL 2S 1/2
      DATA YPEL1O/5.60E6,6.00E5,3.67E5,2.96E5,2.12E5,9.79E4,4.78E4,2.51E4,1.39E4,1.00E4,8.00E3,6.36E3,5.32E3,1.87E3,863.,279.,122.,63.1,36.6,15.3,7.67,2.15,.859,.232,.0906,.0436,.0239,.00926,.00444,.00118,4.66E-4,1.31E-4,5.63E-5,3.03E-5,1.89E-5,9.54E-6,5.93E-6,2.80E-6,1.76E-6,9.84E-7,6.75E-7,5.12E-7,4.12E-7,2.95E-7,2.30E-7,1.48E-7,1.09E-7,7.11E-8,5.28E-8,4.20E-8,3.49E-8,2.60E-8,2.08E-8/
      DATA XPEL1O/28.5,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/          
# L2 SHELL 2P 1/2
      DATA YPEL2O/2.0E7,2.00E7,2.4E6,3.25E5,1.93E5,1.34E5,7.80E4,2.29E4,7.93E3,3.13E3,1.35E3,853.,626.,455.,357.,85.7,30.0,6.51,2.13,.884,.428,.136,.0552,.0106,.00325,6.11E-4,1.87E-4,7.46E-5,3.55E-5,1.11E-5,4.55E-6,9.39E-7,3.20E-7,7.55E-8,2.91E-8,1.45E-8,8.47E-9,3.86E-9,2.21E-9,9.07E-10,5.71E-10,3.19E-10,2.19E-10,1.66E-10,1.33E-10,9.56E-11,7.44E-11,4.78E-11,3.52E-11,2.30E-11,1.71E-11,1.36E-11,1.13E-11,8.43E-12,6.72E-12/
      DATA XPEL2O/13.8,25.0,50.0,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# L3 SHELL 2P 3/2
      DATA YPEL3O/4.0E7,4.00E7,4.8E6,6.50E5,3.84E5,2.67E5,1.55E5,4.55E4,1.58E4,6.23E3,2.69E3,1.69E3,1.24E3,900.,708.,170.,59.3,12.8,4.20,1.74,.841,.265,.107,.0205,.00625,.00116,3.51E-4,1.39E-4,6.55E-5,2.01E-5,8.16E-6,1.65E-6,5.52E-7,1.30E-7,5.10E-8,2.62E-8,1.58E-8,7.76E-9,4.77E-9,2.25E-9,1.42E-9,7.91E-10,5.42E-10,4.12E-10,3.31E-10,2.37E-10,1.85E-10,1.19E-10,8.73E-11,5.71E-11,4.24E-11,3.37E-11,2.80E-11,2.09E-11,1.67E-11/
      DATA XPEL3O/13.8,25.0,50.0,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# RAYLEIGH COMPTON AND PAIR PRODUCTION DATA
      DATA XCOMO/100.,150.,200.,300.,400.,500.,600.,800.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.022D6,1.25D6,1.5D6,2.0D6,2.044'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
      DATA YRAYO/42.56,42.52,42.46,42.32,42.12,41.87,41.57,40.82,39.89,36.98,33.56,26.63,20.81,16.42,13.23,9.157,6.814,3.948,2.627,1.394,      .8541,.5755,.4138,.2428,.1591,.07264,.04128,.01849,.01043,        .006684,                   4.645D-3,2.615D-3,1.674D-3,1.603D-3,1.072D-3,7.442D-4,4.187D-4,4.008D-4,1.861D-4,1.047D-4,6.699D-5,4.652D-5,3.418D-5,2.617D-5,2.068D-5,1.675D-5,7.474D-6,4.204D-6,1.868D-6,1.051D-6,6.726D-7,4.670D-7,2.628D-7,1.681D-7/  
      DATA YCOMO/2.479D-3,5.433D-3,9.695D-3,.02175,.03847,.05970,.08522,.1484,.2262,.4697,                  .7560,1.352,1.886,2.323,2.665,3.139,3.439,3.864,4.092,4.286,4.315,4.275,4.207,4.044,3.880,3.521,3.236,2.821,2.530,2.312,2.139,1.880,1.691,1.673,1.512,1.374,1.173,1.158,.9226,.7696,.6646,.5874,.5280,.4805,.4417,.4093,.3029,.2431,.1770,.1406,    .1174,.1012,.07977,.06621/    
# TOTAL PAIR PRODUCTION NUCLEAR + ELECTRON
      DATA YPAPO/34*1.D-20,5.159D-4,2.85D-3,.01134,.01222,.03273,.05388,.07314,.09067,.1064,.1207,.1338,.1457,.1915,.2267,.2749,.3085,    .3339,.3549,.3862,.4086/   
# NORMALISED RAYLEIGH FORM FACTOR  Hubbel
      DATA FFRO/1.0,.99967,.99890,.9976,.9959,.9935,.9907,.9836,.9746,.9515,.9221,.9055,.8594,.8087,.7559,.7025,.6006,.5107,.3754,.2919,.2430,.2141,.1959,.1827,.1720,.1477,.1245,.0840,.05521,.0398,.02439,.01905,.008362,.004562,.002637,.001975,6.5D-4,1.609D-4,5.239D-5,1.424D-6,  2.251D-7,9.421D-8,1.809D-11,9.77D-21,1.0D-29/
# NORMALISED COMPTON FORM FACTOR  Hubbel
      DATA FFCO/1.2D-21,3.7D-4,.00137,.00316,.00560,.00872,.0125,.02201,.03387,.06421,.1015,.1221,.1775,.2356,.2937,.3499,.4516,.5366,.6571,.7285,.7719,.8014,.8245,.8444,.8626,.9020,.9327,.9705,.9875,.9946,.99759,.99887,.99971,.99991,.99997,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0/
# OXYGEN ATOMIC NUMBER
      IZ[1]=8
      AMZ[1]=15.9994
# 
# ATOMIC HYDROGEN DATA FOR CASCADE CALCULATIONS SCALED TO
# MOLECULAR HYDROGEN
#  
#
# LEVEL OCCUPANCY FOR GROUND STATE
      DATA INIOCH/1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/
# AVERAGE SHAKE OFF ELECTRON ENERGY
      DATA ESHH/17*0.0/ 
# SHAKE OFF DATA :  CARLSON AND NESTOR PHYS REV A8(1973)2887
# % PROBABILITY OF J SHELL SHAKE OFF FROM VACANCY IN SHELL I PROBSH(I,J)
      DATA PRBSHH/289*0.0/
# SHAKE OFF DATA : CARLSON,NESTOR ET AL PHYS REV 169(1968)27
# % PROBABILITY OF J SHELL SHAKE OFF FROM BETA DECAY PRSHBT[J]
      DATA PRBSHBTH/17*0.0/
#
# PHOTOELECTRIC ABSORPTION X-SECTIONS FOR EACH SHELL: 
#    UNITS BARNS/ATOM AND ENERGIES IN EV
#  ASSEMBLED FROM: BAND ET AL.            ANDT 23(1979)443
#                : SCOFIELD               UCRL-51326
#                : VIEGELE                ATOMIC DATA 5(1973)50
# K  SHELL 1S 1/2
      DATA YPEKH/6.41E6,2.18E6,1.93E4,8.10E3,5.31E3,2.86E3,765.,251.,96.6,41.9,26.7,19.7,14.4,11.4,2.93,1.11,.281,.105,.0491,.0263,.00982,.00456,.00113,4.18E-4,1.03E-4,3.82E-5,1.77E-5,9.46E-6,3.52E-6,1.64E-6,4.18E-7,1.61E-7,4.41E-8,1.86E-8,9.93E-9,6.16E-9,3.12E-9,1.96E-9,9.73E-10,6.20E-10,3.52E-10,2.44E-10,1.87E-10,1.51E-10,1.09E-10,8.50E-11,5.49E-11,4.06E-11,2.66E-11,1.98E-11,1.58E-11,1.31E-11,9.79E-12,7.81E-12/
      DATA XPEKH/13.598,20.,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/ 
# RAYLEIGH COMPTON AND PAIR PRODUCTION DATA
# HUBBEL                J.PHYS.CHEM.REF.DATA 4(1975)471
# HUBBEL                NIST XCOM WEB SITE
# STORM AND ISRAEL        NUCL DATA TABLES A7(1970)565
      DATA XCOMH/100.,150.,200.,300.,400.,500.,600.,800.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.022D6,1.25D6,1.5D6,2.0D6,2.044'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
      DATA YCOMH/9.552D-4,2.144D-3,3.802D-3,8.494D-3,1.496D-2,2.310D-2,3.279D-2,5.629D-2,8.424D-2,0.1650,.2478,.3822,.4675,.5187,.5503,.5840,.5993,.6095,.6068,.5924,.5759,.5597,.5444,.5166,.4923,.4435,.4064,.3535,.3168,.2893,.2676,.2351,.2114,.2092,.1890,.1718,.1466,.1448,.1153,.0962,.08308,.07343,.0660,.06007,.05522,.05116,.03786,.03039,.02212,.01758,.01467,.01264,.009972,.008276/
      DATA YRAYH/.6650,.6635,.6617,.6569,.6503,.6421,.6323,.6087,.5806,.4984,.4142,.2764,.1881,.1341,.09987,.06126,.04121,.01943,.01119,.005062,.002866,.001840,.001280,7.211D-4,4.619D-4,2.054D-4,1.156D-4,5.138D-5,2.890D-5,1.850D-5,1.285D-5,7.226D-6,4.625D-6,4.428D-6,2.960D-6,2.056D-6,1.156D-6,1.107D-6,5.139D-7,2.891D-7,1.850D-7,1.285D-7,9.439D-8,7.227D-8,5.710D-8,4.625D-8,2.056D-8,1.156D-8,5.139D-9,2.890D-9,1.850D-9,1.284D-9,7.222D-10,4.620D-10/
# TOTAL PAIR PRODUCTION NUCLEAR + ELECTRON
      DATA YPAPH/34*1.D-20,7.805D-6,4.385D-5,1.758D-4,1.895D-4,5.451D-4,9.849D-4,1.430D-3,1.859D-3,2.260D-3,2.634D-3,2.984D-3,3.308D-3,4.61D-3,5.61D-3,7.08D-3,8.13D-3,8.98D-3,9.65D-3,1.074D-2,1.161D-2/
# RAYLEIGH FORM FACTOR  Hubbel
      DATA FFRH/1.0,.9994,.9978,.9950,.9912,.9863,.9804,.9655,.9469,.8999,.8424,.8108,.7271,.6413,.5581,.4808,.3497,.2513,.1304,.07059,.04032,.02429,.01533,.01009,.006881,.002995,.001494,4.890D-4,2.035D-4,9.902D-5,5.373D-5,3.160D-5,1.300D-5,6.282D-6,3.395D-6,1.992D-6,8.168D-7,1.615D-7,5.112D-8,1.309D-9,1.998D-10,8.182D-11,8.182D-15,8.182D-27,8.182D-39/
# COMPTON FORM FACTOR  Hubbel
      DATA FFCH/1.D-20,.001105,.004410,.009888,.01749,.02717,.03883,.06773,.1033,.1902,.2904,.3426,.4713,.5887,.6885,.7689,.8777,.9369,.9830,.9950,.9984,.9994,.9998,.9999,.99995,.99999,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0/
# HYDROGEN ATOMIC NUMBER
      IZ[2]=1
      AMZ[2]=2.015808
# CONVERT SHAKE OFF FROM A % TO A PROBABILITY
      DO 1 I=1,17
      PRSHBT(1,I)=PRBSHBTO[I]/100.0
      PRSHBT(2,I)=PRBSHBTH[I]/100.0
      DO 1 J=1,17
      PRBSHO(I,J)=PRBSHO(I,J)/100.0
      PRBSHH(I,J)=PRBSHH(I,J)/100.0
    1 CONTINUE  
# SWAP INDICES AND DO CHECK SUM
      DO 2 I=1,17
      PRSUMO=0.0
      PRSUMH=0.0
      DO 2 J=1,17
      PRSH(1,I,J)=PRBSHO[J][I]
      PRSH(2,I,J)=PRBSHH[J][I]
#     PRSUMO=PRSUMO+PRSH(1,I,J)
#     PRSUMH=PRSUMH+PRSH(2,I,J)
#     WRITE(6,888) I,PRSUMO,PRSUMH
# 888 print(' I=',I3,' PRSUMO=','%.3f' %,' PRSUMH=','%.3f' %)
    2 CONTINUE
# LOAD SKAKE OFF ENERGIES AND LEVEL OCCUPATIONS
      DO 3 I=1,17
      ESH(1,I)=ESO[I]
      ESH(2,I)=ESHH[I]
      INIOCC(1,I)=INIOCO[I]
      INIOCC(2,I)=INIOCH[I]
    3 CONTINUE
#
# AUGER PROBABILITIES IN ARRAY AUG(I,J,K) INITIAL VACANCY IN SHELL I,
# WITH TRANSITION TO SHELLS J,K
# LOAD OUTPUT ARRAYS AND CONVERT TO EV
      DO 4 I=1,4
      DO 4 J=1,17
      DO 4 K=1,17 
      AUG(1,I,J,K)=AO(I,J,K)*0.0272105
    4 AUG(2,I,J,K)=AH(I,J,K)*0.0272105  
      DO 5 I=5,17
      DO 5 J=1,17
      DO 5 K=1,17
      AUG(1,I,J,K)=AO(I,J,K)*0.00272105
    5 AUG(2,I,J,K)=AH(I,J,K)*0.00272105
# CHECK AUGER LEVEL SUMS
#     DO 7 I=1,17
#     ASUM=0.0
#     DO 6 J=1,17
#     DO 6 K=1,17
#   6 ASUM=ASUM+AUG(I,J,K)
#     WRITE(6,887) I,ASUM
# 887 print(' I=',I3,' ASUM=','%.3f' %)
#   7 CONTINUE
#  
# CONVERT RADIATIVE RATES IN M AND N SHELL TO EV 
      DO 12 I=5,17
      DO 12 J=6,17
      RO(I,J)=RO(I,J)*6.582119D-16
   12 RH(I,J)=RH(I,J)*6.582119D-16
# LOAD OUTPUT ARRAY
      DO 13 I=1,17
      DO 13 J=1,17
      RAD[1,I,J]=RO(I,J)
   13 RAD[2,I,J]=RH(I,J)
# PRINTOUT CHECK SUM
#     DO 15 I=1,17
#     RSUM=0.0
#     DO 14 J=1,17
#  14 RSUM=RSUM+R(I,J)
#     WRITE(6,100) I,RSUM
# 100 print(' SHELL =',I3,' RAD RATE EV=','%.3f' %)
#  15 CONTINUE
#
# LOAD HYDROGEN PHOTOELECTRIC AND COMPTON  DATA\
# SCALE BY 2 HYDROGEN ATOMS
      DO 21 J=1,54
      XPE(2,1,J)=math.log(XPEKH[J])
      YPE(2,1,J)=math.log(YPEKH[J]*2.D-24)
   21 CONTINUE
# LOAD OXYGEN PHOTOELECTRIC AND COMPTON DATA DATA
      DO 24 J=1,46
      XPE(1,1,J)=math.log(XPEKO[J])
      YPE(1,1,J)=math.log(YPEKO[J]*1.D-24)
   24 CONTINUE
      DO 25 J=1,53
      XPE(1,2,J)=math.log(XPEL1O[J])
      YPE(1,2,J)=math.log(YPEL1O[J]*1.D-24)
   25 CONTINUE 
      DO 26 J=1,55 
      XPE(1,3,J)=math.log(XPEL2O[J])
      YPE(1,3,J)=math.log(YPEL2O[J]*1.D-24)
   26 CONTINUE
      DO 27 J=1,55 
      XPE(1,4,J)=math.log(XPEL3O[J])
      YPE(1,4,J)=math.log(YPEL3O[J]*1.D-24)
   27 CONTINUE
# LOAD RAYLEIGH COMPTON AND PAIR PRODUCTION X-SEC
      DO 28 J=1,54
      XCP(1,J)=math.log(XCOMO[J])
      XCP(2,J)=math.log(XCOMH[J])
      YRY(1,J)=math.log(YRAYO[J]*1.D-24)
      YRY(2,J)=math.log(YRAYH[J]*2.0*1.D-24)
      YCP(1,J)=math.log(YCOMO[J]*1.D-24)
      YCP(2,J)=math.log(YCOMH[J]*2.0*1.D-24)
      YPP(1,J)=math.log(YPAPO[J]*1.D-24)
      YPP(2,J)=math.log(YPAPH[J]*2.0*1.D-24)
   28 CONTINUE
# LOAD RAYLEIGH AND COMPTON FORM FACTORS
      DO 29 J=1,45
      FFAR(1,J)=FFRO[J]
      FFAR(2,J)=FFRH[J]
      FFAC(1,J)=FFCO[J]
      FFAC(2,J)=FFCH[J]
   29 CONTINUE
      RETURN 
      # end
      def CGAS15(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
      DIMENSION INIOC(17),PRBSH(17,17),ES(17),R(17,17),A[17,17,17],PRBSHBT(17)
      DIMENSION XPEK(46),YPEK(46),XPEL1(53),YPEL1(53),XPEL2(55),YPEL2(55),XPEL3(55),YPEL3(55),XCOMO(54),YRAYO(54),YCOMO(54),YPAPO(54),FFRO(45),FFCO(45)
# 
# ATOMIC OXYGEN DATA FOR CASCADE CALCULATIONS SCALED LATER TO 
#  MOLECULAR OXYGEN
#
# LEVEL OCCUPANCY FOR GROUND STATE
      DATA INIOC/2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0/
# AVERAGE SHAKE OFF ELECTRON ENERGY
      DATA ES/12.0,2.0,2.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
# SHAKE OFF DATA :  CARLSON AND NESTOR PHYS REV A8(1973)2887
# % PROBABILITY OF J SHELL SHAKE OFF FROM VACANCY IN SHELL I PROBSH(I,J)
      DATA PRBSH/0.10,2.50,6.00,6.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.30,2.00,1.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.50,1.00,2.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.50,1.00,1.20,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,221*0.0/
# SHAKE OFF DATA : CARLSON,NESTOR ET AL PHYS REV 169(1968)27
# % PROBABILITY OF J SHELL SHAKE OFF FROM BETA DECAY PRSHBT[J]
      DATA PRBSHBT/1.56,6.0,8.0,12.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
#
# AUGER AND COSTER-KRONIG TRANSITION RATES FOR K AND L SHELLS 
#  WALTERS AND BHALLA (1971)
# K SHELL RATE (MILLIATOMIC UNITS) TO GET TO EV *0.0272105
      DATA A[1,2,2]/0.856/,A[1,2,3]/0.824/,A[1,3,3]/0.382/
      DATA A[1,2,4]/0.140/,A[1,3,4]/0.068/
# RADIATIVE TRANSITIONS SCOFIELD ANDT 14(1974)121
# DIPOLE AND HIGHER MULTIPOLES , RELATIVISTIC CALC. UNITS 1.519E15/SEC
# K-SHELL
      DATA R(1,2)/3.36E-13/,R(1,3)/2.752E-4/,R(1,4)/5.48E-4/ 
# L1 SHELL
      DATA R(2,3)/6.62E-7/,R(2,4)/1.34E-6/
# L2 SHELL
      DATA R(3,4)/2.55E-19/
# 
# PHOTOELECTRIC ABSORPTION X-SECTIONS FOR EACH SHELL: 
#    UNITS BARNS/ATOM AND ENERGIES IN EV
#  ASSEMBLED FROM: BAND ET AL.            ANDT 23(1979)443
#                : SCOFIELD               UCRL-51326
#                : VIEGELE                ATOMIC DATA 5(1973)50
# K  SHELL 1S 1/2
      DATA YPEK/5.75E5,3.06E5,2.21E5,1.76E5,1.39E5,1.16E5,3.9E4,1.75E4,5.44E3,2.32E3,1.19E3,682.,281.,140.,38.8,15.4,4.13,1.61,.771,.423,.163,.0782,.0207,.00817,.00231,9.89E-4,5.33E-4,3.32E-4,1.68E-4,1.04E-4,4.91E-5,3.09E-5,1.73E-5,1.18E-5,8.98E-6,7.22E-6,5.18E-6,4.03E-6,2.59E-6,1.91E-6,1.25E-6,9.26E-7,7.36E-7,6.11E-7,4.56E-7,3.64E-7/
      DATA XPEK/532.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# L1 SHELL 2S 1/2
      DATA YPEL1/5.60E6,6.00E5,3.67E5,2.96E5,2.12E5,9.79E4,4.78E4,2.51E4,1.39E4,1.00E4,8.00E3,6.36E3,5.32E3,1.87E3,863.,279.,122.,63.1,36.6,15.3,7.67,2.15,.859,.232,.0906,.0436,.0239,.00926,.00444,.00118,4.66E-4,1.31E-4,5.63E-5,3.03E-5,1.89E-5,9.54E-6,5.93E-6,2.80E-6,1.76E-6,9.84E-7,6.75E-7,5.12E-7,4.12E-7,2.95E-7,2.30E-7,1.48E-7,1.09E-7,7.11E-8,5.28E-8,4.20E-8,3.49E-8,2.60E-8,2.08E-8/
      DATA XPEL1/28.5,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/          
# L2 SHELL 2P 1/2
      DATA YPEL2/2.0E7,2.00E7,2.4E6,3.25E5,1.93E5,1.34E5,7.80E4,2.29E4,7.93E3,3.13E3,1.35E3,853.,626.,455.,357.,85.7,30.0,6.51,2.13,.884,.428,.136,.0552,.0106,.00325,6.11E-4,1.87E-4,7.46E-5,3.55E-5,1.11E-5,4.55E-6,9.39E-7,3.20E-7,7.55E-8,2.91E-8,1.45E-8,8.47E-9,3.86E-9,2.21E-9,9.07E-10,5.71E-10,3.19E-10,2.19E-10,1.66E-10,1.33E-10,9.56E-11,7.44E-11,4.78E-11,3.52E-11,2.30E-11,1.71E-11,1.36E-11,1.13E-11,8.43E-12,6.72E-12/
      DATA XPEL2/13.8,25.0,50.0,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# L3 SHELL 2P 3/2
      DATA YPEL3/4.0E7,4.00E7,4.8E6,6.50E5,3.84E5,2.67E5,1.55E5,4.55E4,1.58E4,6.23E3,2.69E3,1.69E3,1.24E3,900.,708.,170.,59.3,12.8,4.20,1.74,.841,.265,.107,.0205,.00625,.00116,3.51E-4,1.39E-4,6.55E-5,2.01E-5,8.16E-6,1.65E-6,5.52E-7,1.30E-7,5.10E-8,2.62E-8,1.58E-8,7.76E-9,4.77E-9,2.25E-9,1.42E-9,7.91E-10,5.42E-10,4.12E-10,3.31E-10,2.37E-10,1.85E-10,1.19E-10,8.73E-11,5.71E-11,4.24E-11,3.37E-11,2.80E-11,2.09E-11,1.67E-11/
      DATA XPEL3/13.8,25.0,50.0,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# LOAD RAYLEIGH COMPTON AND PAIR PRODUCTION DATA
# HUBBEL           J.PHYS.CHEM.REF.DATA    4(1975)471
# HUBBEL           NIST XCOM WEB SITE
# STORM AND ISRAEL   NUCL.DATA TABLES  A7(1970)565
      DATA XCOMO/100.,150.,200.,300.,400.,500.,600.,800.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.022D6,1.25D6,1.5D6,2.0D6,2.044'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
      DATA YRAYO/42.56,42.52,42.46,42.32,42.12,41.87,41.57,40.82,39.89,36.98,33.56,26.63,20.81,16.42,13.23,9.157,6.814,3.948,2.627,1.394,      .8541,.5755,.4138,.2428,.1591,.07264,.04128,.01849,.01043,        .006684,                   4.645D-3,2.615D-3,1.674D-3,1.603D-3,1.072D-3,7.442D-4,4.187D-4,4.008D-4,1.861D-4,1.047D-4,6.699D-5,4.652D-5,3.418D-5,2.617D-5,2.068D-5,1.675D-5,7.474D-6,4.204D-6,1.868D-6,1.051D-6,6.726D-7,4.670D-7,2.628D-7,1.681D-7/  
      DATA YCOMO/2.479D-3,5.433D-3,9.695D-3,.02175,.03847,.05970,.08522,.1484,.2262,.4697,                  .7560,1.352,1.886,2.323,2.665,3.139,3.439,3.864,4.092,4.286,4.315,4.275,4.207,4.044,3.880,3.521,3.236,2.821,2.530,2.312,2.139,1.880,1.691,1.673,1.512,1.374,1.173,1.158,.9226,.7696,.6646,.5874,.5280,.4805,.4417,.4093,.3029,.2431,.1770,.1406,    .1174,.1012,.07977,.06621/    
# TOTAL PAIR PRODUCTION NUCLEAR + ELECTRON
      DATA YPAPO/34*1.D-20,5.159D-4,2.85D-3,.01134,.01222,.03273,.05388,.07314,.09067,.1064,.1207,.1338,.1457,.1915,.2267,.2749,.3085,    .3339,.3549,.3862,.4086/   
# NORMALISED RAYLEIGH FORM FACTOR  Hubbel
      DATA FFRO/1.0,.99967,.99890,.9976,.9959,.9935,.9907,.9836,.9746,.9515,.9221,.9055,.8594,.8087,.7559,.7025,.6006,.5107,.3754,.2919,.2430,.2141,.1959,.1827,.1720,.1477,.1245,.0840,.05521,.0398,.02439,.01905,.008362,.004562,.002637,.001975,6.5D-4,1.609D-4,5.239D-5,1.424D-6,  2.251D-7,9.421D-8,1.809D-11,9.77D-21,1.0D-29/
# NORMALISED COMPTON FORM FACTOR  Hubbel
      DATA FFCO/1.2D-21,3.7D-4,.00137,.00316,.00560,.00872,.0125,.02201,.03387,.06421,.1015,.1221,.1775,.2356,.2937,.3499,.4516,.5366,.6571,.7285,.7719,.8014,.8245,.8444,.8626,.9020,.9327,.9705,.9875,.9946,.99759,.99887,.99971,.99991,.99997,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0/
# OXYGEN ATOMIC NUMBER
      IZ[1]=8
      AMZ[1]=31.9988 
# CONVERT SHAKE OFF FROM A % TO A PROBABILITY
      DO 1 I=1,17
      PRSHBT(1,I)=PRBSHBT[I]/100.0
      DO 1 J=1,17
      PRBSH(I,J)=PRBSH(I,J)/100.0
    1 CONTINUE  
# SWAP INDICES AND DO CHECK SUM
      DO 2 I=1,17
      PRSUM=0.0
      DO 2 J=1,17
      PRSH(1,I,J)=PRBSH[J][I]
#     PRSUM=PRSUM+PRSH(I,J)
#     WRITE(6,888) I,PRSUM
# 888 print(' I=',I3,' PRSUM=','%.3f' %)
    2 CONTINUE
# LOAD SKAKE OFF ENERGIES AND LEVEL OCCUPATIONS
      DO 3 I=1,17
      ESH(1,I)=ES[I]
      INIOCC(1,I)=INIOC[I]
    3 CONTINUE
#
# AUGER PROBABILITIES IN ARRAY AUG(I,J,K) INITIAL VACANCY IN SHELL I,
# WITH TRANSITION TO SHELLS J,K
# LOAD OUTPUT ARRAYS AND CONVERT TO EV
      DO 4 I=1,4
      DO 4 J=1,17
      DO 4 K=1,17 
    4 AUG(1,I,J,K)=A[I,J,K]*0.0272105  
      DO 5 I=5,17
      DO 5 J=1,17
      DO 5 K=1,17
    5 AUG(1,I,J,K)=A[I,J,K]*0.00272105
# CHECK AUGER LEVEL SUMS
#     DO 7 I=1,17
#     ASUM=0.0
#     DO 6 J=1,17
#     DO 6 K=1,17
#   6 ASUM=ASUM+AUG(I,J,K)
#     WRITE(6,887) I,ASUM
# 887 print(' I=',I3,' ASUM=','%.3f' %)
#   7 CONTINUE
#  
# CONVERT RADIATIVE RATES IN M AND N SHELL TO EV 
      DO 12 I=5,17
      DO 12 J=6,17
   12 R(I,J)=R(I,J)*6.582119D-16
# LOAD OUTPUT ARRAY
      DO 13 I=1,17
      DO 13 J=1,17
   13 RAD[1,I,J]=R(I,J)
# PRINTOUT CHECK SUM
#     DO 15 I=1,17
#     RSUM=0.0
#     DO 14 J=1,17
#  14 RSUM=RSUM+R(I,J)
#     WRITE(6,100) I,RSUM
# 100 print(' SHELL =',I3,' RAD RATE EV=','%.3f' %)
#  15 CONTINUE
# LOAD PHOTOELECTRIC AND COMPTON DATA
# SCALE BY TWO FOR MOLECULE
      DO 21 J=1,46
      XPE(1,1,J)=math.log(XPEK[J])
      YPE(1,1,J)=math.log(YPEK[J]*2.0*1.D-24)
   21 CONTINUE
      DO 22 J=1,53
      XPE(1,2,J)=math.log(XPEL1[J])
      YPE(1,2,J)=math.log(YPEL1[J]*2.0*1.D-24)
   22 CONTINUE 
      DO 23 J=1,55 
      XPE(1,3,J)=math.log(XPEL2[J])
      YPE(1,3,J)=math.log(YPEL2[J]*2.0*1.D-24)
   23 CONTINUE
      DO 24 J=1,55 
      XPE(1,4,J)=math.log(XPEL3[J])
      YPE(1,4,J)=math.log(YPEL3[J]*2.0*1.D-24)
   24 CONTINUE
# LOAD RAYLEIGH COMPTON AND PAIR PRODUCTION X-SEC
      DO 25 J=1,54
      XCP(1,J)=math.log(XCOMO[J])
      YRY(1,J)=math.log(YRAYO[J]*2.0*1.D-24)
      YCP(1,J)=math.log(YCOMO[J]*2.0*1.D-24)
      YPP(1,J)=math.log(YPAPO[J]*2.0*1.D-24)
   25 CONTINUE
# LOAD RAYLEIGH AND COMPTON FORM FACTORS
      DO 26 J=1,45
      FFAR(1,J)=FFRO[J]
      FFAC(1,J)=FFCO[J]
   26 CONTINUE
      RETURN 
      # end
      def CGAS16(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
      DIMENSION INIOC(17),PRBSH(17,17),ES(17),R(17,17),A[17,17,17],PRBSHBT(17)
      DIMENSION XPEK(47),YPEK(47),XPEL1(53),YPEL1(53),XPEL2(55),YPEL2(55),XPEL3(55),YPEL3(55),XCOMN(54),YRAYN(54),YCOMN(54),YPAPN(54),FFRN(45),FFCN(45)
# 
# ATOMIC NITROGEN DATA FOR CASCADE CALCULATIONS SCALED LATER TO 
#  MOLECULAR NITROGEN
#
# LEVEL OCCUPANCY FOR GROUND STATE
      DATA INIOC/2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0/
# AVERAGE SHAKE OFF ELECTRON ENERGY
      DATA ES/11.00,2.0,2.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
# SHAKE OFF DATA :  CARLSON AND NESTOR PHYS REV A8(1973)2887
# % PROBABILITY OF J SHELL SHAKE OFF FROM VACANCY IN SHELL I PROBSH(I,J)
      DATA PRBSH/0.12,2.50,8.00,4.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.30,2.00,1.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.50,1.00,2.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.50,2.00,0.50,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,221*0.0/
# SHAKE OFF DATA : CARLSON,NESTOR ET AL PHYS REV 169(1968)27
# % PROBABILITY OF J SHELL SHAKE OFF FROM BETA DECAY PRSHBT[J]
      DATA PRBSHBT/2.2,6.0,8.0,10.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
#
# AUGER AND COSTER-KRONIG TRANSITION RATES FOR K AND L SHELLS 
#  WALTERS AND BHALLA (1971)
# K SHELL RATE (MILLIATOMIC UNITS) TO GET TO EV *0.0272105
      DATA A[1,2,2]/0.842/,A[1,2,3]/0.828/,A[1,3,3]/0.380/
      DATA A[1,2,4]/0.072/,A[1,3,4]/0.035/
# RADIATIVE TRANSITIONS SCOFIELD ANDT 14(1974)121
# DIPOLE AND HIGHER MULTIPOLES , RELATIVISTIC CALC. UNITS 1.519E15/SEC
# K-SHELL
      DATA R(1,2)/8.04E-14/,R(1,3)/1.104E-4/,R(1,4)/2.201E-4/
# L1 SHELL
      DATA R(2,3)/3.09E-7/,R(2,4)/6.23E-7/
# L2 SHELL
      DATA R(3,4)/2.65E-20/
# 
# PHOTOELECTRIC ABSORPTION X-SECTIONS FOR EACH SHELL: 
#    UNITS BARNS/ATOM AND ENERGIES IN EV
#  ASSEMBLED FROM: BAND ET AL.            ANDT 23(1979)443
#                : SCOFIELD               UCRL-51326
#                : VIEGELE                ATOMIC DATA 5(1973)50
# K  SHELL 1S 1/2
      DATA YPEK/7.0E5,3.78E5,2.03E5,1.43E5,1.13E5,8.83E5,7.32E4,2.39E4,1.05E4,3.20E3,1.35E3,681.,388.,158.,78.2,21.3,8.39,2.22,.861,.411,.225,.0863,.0412,.0108,.00428,.00120,5.14E-4,2.77E-4,1.72E-4,8.69E-5,5.40E-5,2.55E-5,1.61E-5,8.99E-6,6.18E-6,4.69E-6,3.77E-6,2.71E-6,2.11E-6,1.36E-6,9.99E-7,6.54E-7,4.86E-7,3.86E-7,3.21E-7,2.39E-7,1.91E-7/
      DATA XPEK/401.6,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# L1 SHELL 2S 1/2
      DATA YPEL1/4.50E6,4.80E5,2.98E5,2.35E5,1.63E5,7.04E4,3.31E4,1.68E4,9.06E3,6.45E3,5.12E3,4.03E3,3.38E3,1.15E3,522.,164.,70.0,35.8,20.6,8.46,
     .4.21,1.16,.459,.122,.0475,.0227,.0124,.00478,.00229,6.02E-4,2.37E-4,6.68E-5,2.86E-5,1.54E-5,9.57E-6,4.83E-6,3.00E-6,1.42E-6,8.94E-7,5.01E-7,3.44E-7,2.61E-7,2.10E-7,1.51E-7,1.17E-7,7.55E-8,5.56E-8,3.64E-8,2.70E-8,2.15E-8,1.79E-8,1.33E-8,1.06E-8/
      DATA XPEL1/24.4,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/          
# L2 SHELL 2P 1/2
      DATA YPEL2/3.20E6,4.00E6,4.00E6,1.8E5,8.45E4,5.70E4,3.19E4,8.90E3,2.95E3,1.14E3,482.,301.,220.,160.,124.,28.4,9.73,2.02,.647,.266,.128,.0402,.0162,.00306,9.27E-4,1.72E-4,5.20E-5,2.07E-5,9.78E-6,3.03E-6,1.24E-6,2.55E-7,8.63E-8,2.03E-8,7.78E-9,3.88E-9,2.25E-9,1.02E-9,5.85E-10,2.44E-10,1.54E-10,8.60E-11,5.91E-11,4.49E-11,3.61E-11,2.59E-11,2.02E-11,1.30E-11,9.56E-12,6.25E-12,4.65E-12,3.70E-12,3.07E-12,2.29E-12,1.83E-12/
      DATA XPEL2/14.534,20.0,25.0,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# L3 SHELL 2P 3/2
      DATA YPEL3/6.40E6,8.00E6,8.00E6,3.6E5,1.68E5,1.14E5,6.38E4,1.78E4,5.90E3,2.29E3,964.,603.,440.,319.,246.,56.4,19.3,4.00,1.28,.524,.252,.0787,.0317,.00593,.00179,3.27E-4,9.82E-5,3.87E-5,1.82E-5,5.55E-6,2.25E-6,4.50E-7,1.51E-7,3.54E-8,1.39E-8,7.10E-9,4.32E-9,2.12E-9,1.31E-9,6.29E-10,3.96E-10,2.22E-10,1.52E-10,1.16E-10,9.31E-11,6.68E-11,5.20E-11,3.34E-11,2.46E-11,1.61E-11,1.20E-11,9.53E-12,7.91E-12,5.91E-12,4.71E-12/
      DATA XPEL3/14.524,20.0,25.0,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# LOAD RAYLEIGH COMPTON AND PAIR PRODUCTION DATA
# HUBBEL           J.PHYS.CHEM.REF.DATA    4(1975)471
# HUBBEL           NIST XCOM WEB SITE
# STORM AND ISRAEL   NUCL.DATA TABLES  A7(1970)565
      DATA XCOMN/100.,150.,200.,300.,400.,500.,600.,800.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.022D6,1.25D6,1.5D6,2.0D6,2.044'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
      DATA YRAYN/32.55,32.51,32.47,32.34,32.15,31.91,31.62,30.90,30.03,27.34,24.32,18.61,14.21,11.10,8.927,6.246,4.722,2.805,1.870,.9839,      .6009,.4042,.2901,.1697,.1109,.05046,.02863,.01281,.007221,       .004626,                   3.215D-3,1.809D-3,1.158D-3,1.109D-3,7.414D-4,5.149D-4,2.897D-4,2.773D-4,1.287D-4,7.243D-5,4.635D-5,3.219D-5,2.365D-5,1.811D-5,1.431D-5,1.159D-5,5.164D-6,2.905D-6,1.291D-6,7.263D-7,4.648D-7,3.227D-7,1.816D-7,1.162D-7/  
      DATA YCOMN/2.698D-3,6.260D-3,.01180,.02508,.04428,.06856,.09770, .1692,.2560,.5198,                  .8165,1.392,1.866,2.225,2.494,2.858,3.093,3.449,3.645,3.800,3.811,3.766,3.700,3.551,3.403,3.085,2.834,2.470,2.215,2.023,1.872,1.645,1.479,1.464,1.323,1.202,1.026,1.013,.8073,.6734,.5815,.5140,.4620,.4205,.3865,.3581,.2650,.2127,.1549,.1231,    .1027,.08851,.06980,.05793/   
# TOTAL PAIR PRODUCTION NUCLEAR + ELECTRON
      DATA YPAPN/34*1.D-20,3.931D-4,2.177D-3,8.667D-3,9.343D-3,.02507,.04138,   .05628,.06989,.08213,.09326,.1034,.1127,.1487,.1753,.2138,.2397,  .2609,.2763,.3012,.3193/   
# NORMALISED RAYLEIGH FORM FACTOR  Hubbel
      DATA FFRN/1.0,.99911,.99814,.9970,.9947,.9919,.9897,.9793,.9680,.9391,.9031,.8834,.8280,.7696,.7099,.6514,.5464,.4597,.3420,.2769,.2421,.2217,.2066,.1931,.1803,.1307,.1197,.07481,.0462,.0325,.01881,.01457,.006071,.003214,.001871,.001443,5.857D-4,1.087D-4,3.519D-5,9.463D-7,1.490D-7,6.217D-8,1.127D-11,5.67D-21,5.77D-30/
# NORMALISED COMPTON FORM FACTOR  Hubbel
      DATA FFCN/1.4D-21,4.3D-4,.00186,.00417,.00739,.01149,.01644,.02881,.04429,.08257,.1292,.1543,.2200,.2861,.3496,.4083,.5084,.5853,.6846,.7403,.7767,.8050,.8299,.8526,.8733,.9166,.9471,.9800,.9924,.9970,.99876,.99943,.99987,.99997,.99999,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0/
# NITROGEN ATOMIC NUMBER
      IZ[1]=7
      AMZ[1]=28.0134
# CONVERT SHAKE OFF FROM A % TO A PROBABILITY
      DO 1 I=1,17
      PRSHBT(1,I)=PRBSHBT[I]/100.0
      DO 1 J=1,17
      PRBSH(I,J)=PRBSH(I,J)/100.0
    1 CONTINUE  
# SWAP INDICES AND DO CHECK SUM
      DO 2 I=1,17
      PRSUM=0.0
      DO 2 J=1,17
      PRSH(1,I,J)=PRBSH[J][I]
#     PRSUM=PRSUM+PRSH(I,J)
#     WRITE(6,888) I,PRSUM
# 888 print(' I=',I3,' PRSUM=','%.3f' %)
    2 CONTINUE
# LOAD SKAKE OFF ENERGIES AND LEVEL OCCUPATIONS
      DO 3 I=1,17
      ESH(1,I)=ES[I]
      INIOCC(1,I)=INIOC[I]
    3 CONTINUE
#
# AUGER PROBABILITIES IN ARRAY AUG(I,J,K) INITIAL VACANCY IN SHELL I,
# WITH TRANSITION TO SHELLS J,K
# LOAD OUTPUT ARRAYS AND CONVERT TO EV
      DO 4 I=1,4
      DO 4 J=1,17
      DO 4 K=1,17 
    4 AUG(1,I,J,K)=A[I,J,K]*0.0272105  
      DO 5 I=5,17
      DO 5 J=1,17
      DO 5 K=1,17
    5 AUG(1,I,J,K)=A[I,J,K]*0.00272105
# CHECK AUGER LEVEL SUMS
#     DO 7 I=1,17
#     ASUM=0.0
#     DO 6 J=1,17
#     DO 6 K=1,17
#   6 ASUM=ASUM+AUG(I,J,K)
#     WRITE(6,887) I,ASUM
# 887 print(' I=',I3,' ASUM=','%.3f' %)
#   7 CONTINUE
#  
# CONVERT RADIATIVE RATES IN M AND N SHELL TO EV 
      DO 12 I=5,17
      DO 12 J=6,17
   12 R(I,J)=R(I,J)*6.582119D-16
# LOAD OUTPUT ARRAY
      DO 13 I=1,17
      DO 13 J=1,17
   13 RAD[1,I,J]=R(I,J)
# PRINTOUT CHECK SUM
#     DO 15 I=1,17
#     RSUM=0.0
#     DO 14 J=1,17
#  14 RSUM=RSUM+R(I,J)
#     WRITE(6,100) I,RSUM
# 100 print(' SHELL =',I3,' RAD RATE EV=','%.3f' %)
#  15 CONTINUE
# LOAD PHOTOELECTRIC AND COMPTON DATA
# SCALE BY TWO FOR MOLECULE
      DO 21 J=1,47
      XPE(1,1,J)=math.log(XPEK[J])
      YPE(1,1,J)=math.log(YPEK[J]*2.0*1.D-24)
   21 CONTINUE
      DO 22 J=1,53
      XPE(1,2,J)=math.log(XPEL1[J])
      YPE(1,2,J)=math.log(YPEL1[J]*2.0*1.D-24)
   22 CONTINUE 
      DO 23 J=1,55 
      XPE(1,3,J)=math.log(XPEL2[J])
      YPE(1,3,J)=math.log(YPEL2[J]*2.0*1.D-24)
   23 CONTINUE
      DO 24 J=1,55 
      XPE(1,4,J)=math.log(XPEL3[J])
      YPE(1,4,J)=math.log(YPEL3[J]*2.0*1.D-24)
   24 CONTINUE
# LOAD RAYLEIGH COMPTON AND PAIR PRODUCTION X-SEC
      DO 25 J=1,54
      XCP(1,J)=math.log(XCOMN[J])
      YRY(1,J)=math.log(YRAYN[J]*2.0*1.D-24)
      YCP(1,J)=math.log(YCOMN[J]*2.0*1.D-24)
      YPP(1,J)=math.log(YPAPN[J]*2.0*1.D-24)
   25 CONTINUE
# LOAD RAYLEIGH AND COMPTON FORM FACTORS
      DO 26 J=1,45
      FFAR(1,J)=FFRN[J]
      FFAC(1,J)=FFCN[J]
   26 CONTINUE
      RETURN 
      # end
      def CGAS17(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS18(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS19(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS20(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS21(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
      DIMENSION INIOC(17),PRBSH(17,17),ES(17),R(17,17),A[17,17,17],PRBSHBT(17)
      DIMENSION XPEK(54),YPEK(54),XCOMH(54),YRAYH(54),YCOMH(54),YPAPH(54),FFRH(45),FFCH(45)
# 
# ATOMIC HYDROGEN DATA FOR CASCADE CALCULATIONS SCALED TO
# MOLECULAR HYDROGEN
#  
#
# LEVEL OCCUPANCY FOR GROUND STATE
      DATA INIOC/1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/
# AVERAGE SHAKE OFF ELECTRON ENERGY
      DATA ES/17*0.0/ 
# SHAKE OFF DATA :  CARLSON AND NESTOR PHYS REV A8(1973)2887
# % PROBABILITY OF J SHELL SHAKE OFF FROM VACANCY IN SHELL I PROBSH(I,J)
      DATA PRBSH/289*0.0/
# SHAKE OFF DATA : CARLSON,NESTOR ET AL PHYS REV 169(1968)27
# % PROBABILITY OF J SHELL SHAKE OFF FROM BETA DECAY PRSHBT[J]
      DATA PRBSHBT/17*0.0/
#
# PHOTOELECTRIC ABSORPTION X-SECTIONS FOR EACH SHELL: 
#    UNITS BARNS/ATOM AND ENERGIES IN EV
#  ASSEMBLED FROM: BAND ET AL.            ANDT 23(1979)443
#                : SCOFIELD               UCRL-51326
#                : VIEGELE                ATOMIC DATA 5(1973)50
# K  SHELL 1S 1/2
      DATA YPEK/6.41E6,2.18E6,1.93E4,8.10E3,5.31E3,2.86E3,765.,251.,96.6,41.9,26.7,19.7,14.4,11.4,2.93,1.11,.281,.105,.0491,.0263,.00982,.00456,.00113,4.18E-4,1.03E-4,3.82E-5,1.77E-5,9.46E-6,3.52E-6,1.64E-6,4.18E-7,1.61E-7,4.41E-8,1.86E-8,9.93E-9,6.16E-9,3.12E-9,1.96E-9,9.73E-10,6.20E-10,3.52E-10,2.44E-10,1.87E-10,1.51E-10,1.09E-10,8.50E-11,5.49E-11,4.06E-11,2.66E-11,1.98E-11,1.58E-11,1.31E-11,9.79E-12,7.81E-12/
      DATA XPEK/13.598,20.,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/ 
# RAYLEIGH COMPTON AND PAIR PRODUCTION DATA
# HUBBEL                J.PHYS.CHEM.REF.DATA 4(1975)471
# HUBBEL                NIST XCOM WEB SITE
# STORM AND ISRAEL        NUCL DATA TABLES A7(1970)565
      DATA XCOMH/100.,150.,200.,300.,400.,500.,600.,800.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.022D6,1.25D6,1.5D6,2.0D6,2.044'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
      DATA YCOMH/9.552D-4,2.144D-3,3.802D-3,8.494D-3,1.496D-2,2.310D-2,3.279D-2,5.629D-2,8.424D-2,0.1650,.2478,.3822,.4675,.5187,.5503,.5840,.5993,.6095,.6068,.5924,.5759,.5597,.5444,.5166,.4923,.4435,.4064,.3535,.3168,.2893,.2676,.2351,.2114,.2092,.1890,.1718,.1466,.1448,.1153,.0962,.08308,.07343,.0660,.06007,.05522,.05116,.03786,.03039,.02212,.01758,.01467,.01264,.009972,.008276/
      DATA YRAYH/.6650,.6635,.6617,.6569,.6503,.6421,.6323,.6087,.5806,.4984,.4142,.2764,.1881,.1341,.09987,.06126,.04121,.01943,.01119,.005062,.002866,.001840,.001280,7.211D-4,4.619D-4,2.054D-4,1.156D-4,5.138D-5,2.890D-5,1.850D-5,1.285D-5,7.226D-6,4.625D-6,4.428D-6,2.960D-6,2.056D-6,1.156D-6,1.107D-6,5.139D-7,2.891D-7,1.850D-7,1.285D-7,9.439D-8,7.227D-8,5.710D-8,4.625D-8,2.056D-8,1.156D-8,5.139D-9,2.890D-9,1.850D-9,1.284D-9,7.222D-10,4.620D-10/
# TOTAL PAIR PRODUCTION NUCLEAR + ELECTRON
      DATA YPAPH/34*1.D-20,7.805D-6,4.385D-5,1.758D-4,1.895D-4,5.451D-4,9.849D-4,1.430D-3,1.859D-3,2.260D-3,2.634D-3,2.984D-3,3.308D-3,4.61D-3,5.61D-3,7.08D-3,8.13D-3,8.98D-3,9.65D-3,1.074D-2,1.161D-2/
# RAYLEIGH FORM FACTOR  Hubbel
      DATA FFRH/1.0,.9994,.9978,.9950,.9912,.9863,.9804,.9655,.9469,.8999,.8424,.8108,.7271,.6413,.5581,.4808,.3497,.2513,.1304,.07059,.04032,.02429,.01533,.01009,.006881,.002995,.001494,4.890D-4,2.035D-4,9.902D-5,5.373D-5,3.160D-5,1.300D-5,6.282D-6,3.395D-6,1.992D-6,8.168D-7,1.615D-7,5.112D-8,1.309D-9,1.998D-10,8.182D-11,8.182D-15,8.182D-27,8.182D-39/
# COMPTON FORM FACTOR  Hubbel
      DATA FFCH/1.D-20,.001105,.004410,.009888,.01749,.02717,.03883,.06773,.1033,.1902,.2904,.3426,.4713,.5887,.6885,.7689,.8777,.9369,.9830,.9950,.9984,.9994,.9998,.9999,.99995,.99999,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0/
# HYDROGEN ATOMIC NUMBER
      IZ[1]=1
      AMZ[1]=2.015808
# CONVERT SHAKE OFF FROM A % TO A PROBABILITY
      DO 1 I=1,17
      PRSHBT(1,I)=PRBSHBT[I]/100.0
      DO 1 J=1,17
      PRBSH(I,J)=PRBSH(I,J)/100.0
    1 CONTINUE  
# SWAP INDICES AND DO CHECK SUM
      DO 2 I=1,17
      PRSUM=0.0
      DO 2 J=1,17
      PRSH(1,I,J)=PRBSH[J][I]
#     PRSUM=PRSUM+PRSH(1,I,J)
#     WRITE(6,888) I,PRSUM
# 888 print(' I=',I3,' PRSUM=','%.3f' %)
    2 CONTINUE
# LOAD SKAKE OFF ENERGIES AND LEVEL OCCUPATIONS
      DO 3 I=1,17
      ESH(1,I)=ES[I]
      INIOCC(1,I)=INIOC[I]
    3 CONTINUE
#
# AUGER PROBABILITIES IN ARRAY AUG(I,J,K) INITIAL VACANCY IN SHELL I,
# WITH TRANSITION TO SHELLS J,K
# LOAD OUTPUT ARRAYS AND CONVERT TO EV
      DO 4 I=1,4
      DO 4 J=1,17
      DO 4 K=1,17 
    4 AUG(1,I,J,K)=A[I,J,K]*0.0272105  
      DO 5 I=5,17
      DO 5 J=1,17
      DO 5 K=1,17
    5 AUG(1,I,J,K)=A[I,J,K]*0.00272105
# CHECK AUGER LEVEL SUMS
#     DO 7 I=1,17
#     ASUM=0.0
#     DO 6 J=1,17
#     DO 6 K=1,17
#   6 ASUM=ASUM+AUG(I,J,K)
#     WRITE(6,887) I,ASUM
# 887 print(' I=',I3,' ASUM=','%.3f' %)
#   7 CONTINUE
#  
# CONVERT RADIATIVE RATES IN M AND N SHELL TO EV 
      DO 12 I=5,17
      DO 12 J=6,17
   12 R(I,J)=R(I,J)*6.582119D-16
# LOAD OUTPUT ARRAY
      DO 13 I=1,17
      DO 13 J=1,17
   13 RAD[1,I,J]=R(I,J)
# PRINTOUT CHECK SUM
#     DO 15 I=1,17
#     RSUM=0.0
#     DO 14 J=1,17
#  14 RSUM=RSUM+R(I,J)
#     WRITE(6,100) I,RSUM
# 100 print(' SHELL =',I3,' RAD RATE EV=','%.3f' %)
#  15 CONTINUE
# LOAD PHOTOELECTRIC AND COMPTON DATA
      DO 21 J=1,54
      XPE(1,1,J)=math.log(XPEK[J])
# SCALED TO MOLECULAR HYDROGEN
      YPE(1,1,J)=math.log(YPEK[J]*2.0*1.D-24)
   21 CONTINUE
# LOAD RAYLEIGH COMPTON AND PAIR PRODUCTION X-SEC
      DO 22 J=1,54
      XCP(1,J)=math.log(XCOMH[J])
      YRY(1,J)=math.log(YRAYH[J]*2.0*1.D-24)
      YCP(1,J)=math.log(YCOMH[J]*2.0*1.D-24)
      YPP(1,J)=math.log(YPAPH[J]*2.0*1.D-24)
   22 CONTINUE
# LOAD RAYLEIGH AND COMPTON FORM FACTORS
      DO 23 J=1,45
      FFAR(1,J)=FFRH[J]
      FFAC(1,J)=FFCH[J]
   23 CONTINUE
      RETURN 
      # end
      def CGAS22(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS23(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS24(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS25(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS26(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS27(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS28(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS29(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS30(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
      DIMENSION INIOCS(17),PRBSHS(17,17),ESS(17),RS(17,17),AS(17,17,17),PRBSHBTS(17)
      DIMENSION INIOCF(17),PRBSHF(17,17),ESF(17),RF(17,17),AF(17,17,17),PRBSHBTF(17) 
      DIMENSION XPEKS(42),YPEKS(42),XPEL1S(53),YPEL1S(53),XPEL2S(54),YPEL2S(54),XPEL3S(54),YPEL3S(54),XPEM1S(60),YPEM1S(60),XPEM2S(60),YPEM2S(60),XPEM3S(60),YPEM3S(60),XCOMS(54),YRAYS(54),YCOMS(54),YPAPS(54),FFRS(45),FFCS(45)
      DIMENSION XPEKF(45),YPEKF(45),XPEL1F(53),YPEL1F(53),XPEL2F(55),YPEL2F(55),XPEL3F(55),YPEL3F(55),XCOMF(54),YRAYF(54),YCOMF(54),YPAPF(54),FFRF(45),FFCF(45)
# 
# SF6 DATA FOR CASCADE CALCULATIONS
#
#  SULFUR  DATA
# LEVEL OCCUPANCY FOR GROUND STATE
      DATA INIOCS/2,2,2,4,2,2,2,0,0,0,0,0,0,0,0,0,0/
# AVERAGE SHAKE OFF ELECTRON ENERGY
      DATA ESS/19.0,7.5,7.5,7.5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
# SHAKE OFF DATA :  CARLSON AND NESTOR PHYS REV A8(1973)2887
# % PROBABILITY OF J SHELL SHAKE OFF FROM VACANCY IN SHELL I PROBSH(I,J)
      DATA PRBSHS/0.001,0.38,0.69,1.37,3.16,7.50,7.33,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,.022,.072,0.14,2.12,5.35,5.33,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,.063,.055,0.22,2.21,5.64,5.57,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,.064,0.10,0.17,2.21,5.59,5.58,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,221*0.0/
# SHAKE OFF DATA : CARLSON,NESTOR ET AL PHYS REV 169(1968)27
# % PROBABILITY OF J SHELL SHAKE OFF FROM BETA DECAY PRSHBT[J]
      DATA PRBSHBTS/0.337,1.25,1.01,2.04,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
#
# AUGER AND COSTER-KRONIG TRANSITION RATES FOR K AND L SHELLS 
#  WALTERS AND BHALLA (1971)
# K SHELL RATE (MILLIATOMIC UNITS) TO GET TO EV *0.0272105
      DATA AS(1,2,2)/1.250/,AS(1,2,3)/1.384/,AS(1,2,4)/2.768/,AS(1,2,5)/0.252/,AS(1,3,3)/0.26/,AS(1,3,4)/6.55/,AS(1,3,5)/0.118/,AS(1,4,4)/3.72/,AS(1,4,5)/0.237/
# L1 SHELL RATE
      DATA AS(2,3,5)/10.56/,AS(2,4,5)/21.1/,AS(2,5,5)/0.210/
# L3 SHELL RATE
      DATA AS(4,5,5)/0.017/
# RADIATIVE TRANSITIONS SCOFIELD ANDT 14(1974)121
# DIPOLE AND HIGHER MULTIPOLES , RELATIVISTIC CALC. UNITS 1.519E15/SEC
# K-SHELL
      DATA RS(1,2)/6.51D-10/,RS(1,3)/0.01276/,RS(1,4)/0.02527/,RS(1,5)/8.30D-11/,RS(1,6)/5.95D-4/,RS(1,7)/1.179D-3/
# L1 SHELL
      DATA RS(2,3)/6.84D-6/,RS(2,4)/1.48D-5/,RS(2,5)/1.37D-14/,RS(2,6)/1.91D-5/,RS(2,7)/3.69D-5/
# L2 SHELL
      DATA RS(3,4)/1.45D-14/,RS(3,5)/1.21D-5/,RS(3,6)/1.31D-15/,RS(3,7)/2.02D-9/
# L3 SHELL
      DATA RS(4,5)/1.23D-5/,RS(4,6)/1.02D-9/,RS(4,7)/1.00D-9/
# M1 SHELL
      DATA RS(5,6)/1.235D9/,RS(5,7)/1.2351D9/
# 
# PHOTOELECTRIC ABSORPTION X-SECTIONS FOR EACH SHELL: 
#    UNITS BARNS/ATOM AND ENERGIES IN EV
#  ASSEMBLED FROM: BAND ET AL.            ANDT 23(1979)443
#                : SCOFIELD               UCRL-51326
#                : VIEGELE                ATOMIC DATA 5(1973)50
# K  SHELL 1S 1/2
      DATA YPEKS/9.86D4,6.45'%.3f' %.07D4,1.69D4,1.03D4,4.58D3,2.41D3,7.32'%.3f' %.08D2,8.89'%.3f' %6.3,18.0,10.1,4.05,1.99,.546,.221,6.40D-2,2.78D-2,1.51D-2,9.45D-3,4.79D-3,2.98D-3,1.39D-3,8.59D-4,4.73D-4,3.21D-4,2.42D-4,1.94D-4,1.61D-4,1.38D-4,1.21D-4,1.07D-4,8.73D-5,6.84D-5,5.02D-5,3.27D-5,2.43D-5,1.93D-5,1.60D-5,1.19D-5,9.52D-6/
      DATA XPEKS/2472.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.5D6,2.0'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.2D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
# L1 SHELL 2S 1/2
      DATA YPEL1S/4.06'%.3f' %.42D5,2.24D5,1.44D5,9.30D4,7.25D4,6.11D4,5.11D4,4.42D4,1.91D4,1.01D4,6.16'%.3f' %.88D3,1.90D3,1.07D3,6.63'%.3f' %.05D2,1.64D2,51.6,22.1,6.53,2.70,1.35,.761,.307,.151,.0419,.0170,4.94D-3,2.15D-3,1.17D-3,7.32D-4,3.71D-4,2.31D-4,1.07D-4,6.65D-5,3.66D-5,2.49D-5,1.87D-5,1.50D-5,1.25D-5,1.07D-5,9.34D-6,8.28D-6,6.76D-6,5.29D-6,3.88D-6,2.53D-6,1.88D-6,1.49D-6,1.24D-6,9.24D-7,7.37D-7/
      DATA XPEL1S/230.9,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,2472.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.5D6,2.0'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.2D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/      
# L2 SHELL 2P 1/2
      DATA YPEL2S/1.70D6,1.48D6,7.45'%.3f' %.37D5,1.59D5,7.96D4,5.43D4,4.18'%.3f' %.18D4,2.60D4,7.52'%.3f' %.01D3,1.50D3,784.,292.,133.,69.3,24.3,10.6,2.30,.760,.156,5.05D-2,2.11D-2,1.03D-2,3.37D-3,1.43D-3,3.11D-4,1.09D-4,2.67D-5,1.05D-5,5.33D-6,3.14D-6,1.46D-6,8.41D-7,3.89D-7,2.42D-7,1.33D-7,9.07D-8,6.83D-8,5.47D-8,4.55D-8,3.89D-8,3.40D-8,3.02D-8,2.46D-8,1.93D-8,1.42D-8,9.24D-9,6.85D-9,5.44D-9,4.52D-9,3.37D-9,2.69D-9/
      DATA XPEL2S/163.6,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,2472.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.5D6,2.0'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.2D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
# L3 SHELL 2P 3/2
      DATA YPEL3S/3.20D6,2.89D6,1.48D6,6.65'%.3f' %.13D5,1.56D5,1.07D5,8.19D4,6.23D4,5.10D4,1.47D4,5.86D3,2.91D3,1.52D3,564.,257.,133.,46.6,20.3,4.34,1.42,.288,9.20D-2,3.79D-2,1.84D-2,5.89D-3,2.45D-3,5.16D-4,1.78D-4,4.29D-5,1.70D-5,8.72D-6,5.29D-6,2.58D-6,1.58D-6,7.30D-7,4.54D-7,2.50D-7,1.70D-7,1.28D-7,1.03D-7,8.54D-8,7.30D-8,6.38D-8,5.66D-8,4.62D-8,3.62D-8,2.66D-8,1.73D-8,1.29D-8,1.02D-8,8.47D-9,6.32D-9,5.04D-9/
      DATA XPEL3S/162.5,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,2472.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.5D6,2.0'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.2D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
# M1 SHELL 3S 1/2
      DATA YPEM1S/1.60D6,1.59D6,1.21D6,9.98D5,5.23D5,2.82D5,1.62D5,1.33D5,9.84D4,5.03D4,2.77D4,1.62D4,1.01D4,7.75D3,6.47D3,5.36D3,4.65D3,1.96D3,1024.,624.,392.,192.,108.,67.1,30.9,16.7,5.24,2.26,.666,.276,.138,.0778,.0314,.0155,4.29D-3,1.74D-3,5.06D-4,2.20D-4,1.20D-4,7.50D-5,3.80D-5,2.36D-5,1.10D-5,6.82D-6,3.75D-6,2.55D-6,1.92D-6,1.54D-6,1.28D-6,1.10D-6,8.50D-7,6.93D-7,5.43D-7,3.98D-7,2.60D-7,1.93D-7,1.53D-7,1.27D-7,9.48D-8,7.56D-8/
      DATA XPEM1S/22.0,25.0,30.0,40.0,70.0,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,2472.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.5D6,2.0'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,1.0D7,1.2D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
# M2 SHELL 3P 1/2
      DATA YPEM2S/1.30D6,1.27D6,1.76D6,1.34D6,1.11D6,5.81'%.3f' %.13D5,1.80D5,1.44D5,1.01D5,4.39D4,2.01D4,9.84D3,5.13'%.3f' %.55D3,2.76D3,2.13D3,1.16'%.3f' %48.,142.,71.8,38.0,14.4,6.60,3.46,1.22,5.39,.117,.0389,8.03D-3,2.60D-3,1.09D-3,5.33D-4,1.74D-4,7.39D-5,1.60D-5,5.63D-6,1.48D-6,5.40D-7,2.73D-7,1.61D-7,7.43D-8,4.29D-8,1.99D-8,1.24D-8,6.80D-9,4.62D-9,3.48D-9,2.79D-9,2.32D-9,1.99D-9,1.54D-9,1.26D-9,9.84D-10,7.22D-10,4.71D-10,3.49D-10,2.30D-10,1.72D-10,1.37D-10/
      DATA XPEM2S/16.0,20.0,25.0,30.0,40.0,70.0,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,2472.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.5D6,2.0'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,1.0D7,1.2D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,6.0D7,8.0D7,1.0D8/
# M3 SHELL 3P 3/2
      DATA YPEM3S/2.60D6,2.54'%.3f' %.52D6,2.68D6,2.21D6,1.16D6,6.25'%.3f' %.59D5,2.87D5,2.01D5,8.70'%.3f' %.97D4,1.94D4,1.01D4,6.98D3,5.15'%.3f' %.750D3,2.28D3,680.,277.,140.,73.7,27.7,12.7,6.64,2.34,1.02,.220,.0725,.0148,4.72D-3,1.95D-3,9.45D-4,3.03D-4,1.27D-4,2.67D-5,9.18D-6,2.22D-6,8.78D-7,4.54D-7,2.75D-7,1.35D-7,8.26D-8,3.83D-8,2.38D-8,1.31D-8,8.91D-9,6.71D-9,5.37D-9,4.47D-9,3.83D-9,2.97D-9,2.42D-9,1.90D-9,1.39D-9,9.07D-10,6.73D-10,4.44D-10,3.31D-10,2.64D-10/
      DATA XPEM3S/15.67,20.0,25.0,30.0,40.0,70.0,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,2472.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.5D6,2.0'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,1.0D7,1.2D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,6.0D7,8.0D7,1.0D8/
# RAYLEIGH COMPTON AND PAIR PRODUCTION DATA
# HUBBEL J.PHYS.CHEM.REF.DATA 4(1975)471
# HUBBEL NIST XCOM WEB SITE
# STORM AND ISRAEL NUCL.DATA TABLES A7(1970)565
      DATA XCOMS/100.,150.,200.,300.,400.,500.,600.,800.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.022D6,1.25D6,1.5D6,2.0D6,2.044'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
      DATA YRAYS/170.2,170.0,169.7,169.0,168.0,166.7,165.1,161.4,156.9,143.5,129.2,103.8,85.21,72.06,62.38,48.50,38.49,22.90,15.02,8.049,5.082,3.503,2.554,1.523,1.009,.4698,.2700,.1222,.06924,.04447,.03094,.01744,.01117,.01070,7.153D-3,4.969D-3,2.796D-3,2.677D-3,1.243D-3,6.992D-4,4.475D-4,3.108D-4,2.283D-4,1.748D-4,1.381D-4,1.119D-4,4.972D-5,2.797D-5,1.243D-5,6.992D-6,4.475D-6,3.108D-6,1.748D-6,1.119D-6/
      DATA YCOMS/6.17D-3,1.402D-2,2.485D-2,5.543D-2,9.741D-2,.150,.2124,.3623,.5383,1.039,1.553,2.469,3.196,3.766,4.231,4.983,5.592,6.677,7.306,7.874,8.065,8.099,8.053,7.848,7.590,6.956,6.421,5.618,5.047,4.615,4.273,3.757,3.379,3.343,3.022,2.747,2.345,2.316,1.845,1.539,1.329,1.175,1.056,.9610,.8834,.8185,.6058,.4862,.3540,.2813,.2348,.2023,.1595,.1324/
# TOTAL PAIR PRODUCTION NUCLEAR + ELECTRON
      DATA YPAPS/34*1.D-20,2.188D-3,1.177D-2,4.614D-2,4.973D-2,.1313,.2134,.2871,.3537,.4132,.4669,.5157,.5601,.7341,.8602,1.037,1.161,1.252,1.325,1.432,1.509/
# NORMALISED RAYLEIGH FORM FACTOR  Hubbel
      DATA FFRS/1.0,.99962,.99862,.99700,.99463,.99162,.98800,.97900,.96769,.93919,.90462,.88575,.83612,.78588,.73781,.69369,.61976,.56428,.49048,.43821,.39011,.34307,.29846,.25789,.22239,.15750,.12050,.087775,.073556,.063131,.052706,.044881,.029237,.019362,.013112,.010256,4.537D-3,1.141D-3,3.982D-4,1.208D-5,1.991D-6,8.514D-7,2.342D-10,1.78D-19,1.96D-28/
# NORMALISED COMPTON FORM FACTOR  Hubbel
      DATA FFCS/1.7D-21,4.37D-4,1.812D-3,4.04D-3,7.1375D-3,.011062,.015787,.027425,.041625,.075794,.11446,.13444,.18373,.23000,.27216,.31000,.37400,.42469,.50012,.56000,.61431,.66412,.70850,.74700,.77950,.83837,.87438,.91506,.94069,.95944,.97294,.98225,.99250,.99675,.99856,.99931,.99981,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0/
# SULFUR ATOMIC NUMBER
      IZ[1]=16
      AMZ[1]=32.065
# 
# ATOMIC FLOURINE DATA FOR CASCADE CALCULATIONS
#
# LEVEL OCCUPANCY FOR GROUND STATE
      DATA INIOCF/2,2,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0/
# AVERAGE SHAKE OFF ELECTRON ENERGY
      DATA ESF/14.0,2.5,2.5,2.5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
# SHAKE OFF DATA :  CARLSON AND NESTOR PHYS REV A8(1973)2887
# % PROBABILITY OF J SHELL SHAKE OFF FROM VACANCY IN SHELL I PROBSH(I,J)
      DATA PRBSHF/0.08,2.00,6.00,8.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.20,1.20,3.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.40,1.00,2.50,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.40,1.20,2.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,221*0.0/
# SHAKE OFF DATA : CARLSON,NESTOR ET AL PHYS REV 169(1968)27
# % PROBABILITY OF J SHELL SHAKE OFF FROM BETA DECAY PRSHBT[J]
      DATA PRBSHBTF/1.29,5.5,7.0,11.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
#
# AUGER AND COSTER-KRONIG TRANSITION RATES FOR K AND L SHELLS 
#  WALTERS AND BHALLA (1971)
# K SHELL RATE (MILLIATOMIC UNITS) TO GET TO EV *0.0272105
#     DATA AF(1,2,2)/0.838/,AF(1,2,3)/0.816/,AF(1,3,3)/0.377/
#     DATA AF(1,2,4)/0.216/,AF(1,3,4)/0.104/
      DATA AF(1,2,2)/0.838/,AF(1,2,3)/0.816/,AF(1,3,3)/0.754/
      DATA AF(1,2,4)/1.224/,AF(1,3,4)/2.262/,AF(1,4,4)/2.262/
# RADIATIVE TRANSITIONS SCOFIELD ANDT 14(1974)121
# DIPOLE AND HIGHER MULTIPOLES , RELATIVISTIC CALC. UNITS 1.519E15/SEC
# K-SHELL
      DATA RF(1,2)/1.17D-12/,RF(1,3)/5.88D-4/,RF(1,4)/1.17D-3/
# L1 SHELL
      DATA RF(2,3)/1.27D-6/,RF(2,4)/2.57D-6/
# L2 SHELL
      DATA RF(3,4)/1.69D-18/
# 
# PHOTOELECTRIC ABSORPTION X-SECTIONS FOR EACH SHELL: 
#    UNITS BARNS/ATOM AND ENERGIES IN EV
#  ASSEMBLED FROM: BAND ET AL.            ANDT 23(1979)443
#                : SCOFIELD               UCRL-51326
#                : VIEGELE                ATOMIC DATA 5(1973)50
# K  SHELL 1S 1/2
      DATA YPEKF/4.3'%.3f' %.20D5,2.53D5,2.02D5,1.68D5,5.89D4,2.70D4,8.58'%.3f' %.72D3,1.92D3,1.11D3,462.,232.,65.2,26.1,7.07,2.77,1.34,.734,.285,.137,.0364,.0144,.00409,.00176,9.47D-4,5.90D-4,2.98D-4,1.85D-4,8.73D-5,5.48D-5,3.06D-5,2.09D-5,1.59D-5,1.28D-5,9.13D-6,7.11D-6,5.99D-6,3.36D-6,2.19D-6,1.63D-6,1.30D-6,1.08D-6,8.03D-7,6.41D-7/
      DATA XPEKF/685.4,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.5D6,2.0'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,8.0D6,1.0D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
# L1 SHELL 2S 1/2
      DATA YPEL1F/3.70D6,6.60D5,4.17'%.3f' %.46D5,2.56D5,1.26D5,6.41'%.3f' %.46D4,1.97D4,1.44D4,1.16D4,9.24D3,7.76D3,2.80D3,1.32D3,438.,194.,102.,59.7,25.2,12.8,3.64,1.47,.402,.158,.0765,.0421,.0164,.00789,.00210,8.35D-4,2.37D-4,1.02D-4,5.48D-5,3.41D-5,1.72D-5,1.07D-5,5.06D-6,3.18D-6,1.77D-6,1.21D-6,9.20D-7,7.39D-7,5.29D-7,4.12D-7,2.64D-7,1.95D-7,1.27D-7,9.45D-8,7.51D-8,6.24D-8,4.66D-8,3.71D-8/
      DATA XPEL1F/34.0,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.5D6,2.0'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,8.0D6,1.0D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/          
# L2 SHELL 2P 1/2
      DATA YPEL2F/1.0D7,1.00'%.3f' %.2D6,6.93'%.3f' %.73D5,2.65D5,1.59D5,4.99D4,1.78D4,7.22'%.3f' %.19D3,2.03D3,1.50D3,1.09D3,860.,212.,75.7,17.0,5.71,2.40,1.17,.375,.154,.0300,.00931,.00177,5.46D-4,2.19D-4,1.05D-4,3.29D-5,1.36D-5,2.82D-6,9.63D-7,2.29D-7,8.82D-8,4.40D-8,2.58D-8,1.18D-8,6.74D-9,2.75D-9,1.73D-9,9.63D-10,6.60D-10,5.00D-10,4.02D-10,2.88D-10,2.24D-10,1.44D-10,1.06D-10,6.91D-11,5.14D-11,4.08D-11,3.39D-11,2.53D-11,2.02D-11/
      DATA XPEL2F/16.0,25.0,50.0,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.5D6,2.0'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,8.0D6,1.0D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
# L3 SHELL 2P 3/2
      DATA YPEL3F/2.0D7,2.0D7,6.4D6,1.39D6,7.43D5,5.30'%.3f' %.18D5,9.98'%.3f' %.57D4,1.43D4,6.32D3,4.03D3,2.97D3,2.16D3,1.70D3,419.,149.,33.5,11.2,4.71,2.30,.731,.298,.0578,.0178,.00335,.00102,4.07D-4,1.92D-4,5.95D-5,2.42D-5,4.90D-6,1.65D-6,3.91D-7,1.53D-7,7.86D-8,4.75D-8,2.33D-8,1.43D-8,6.69D-9,4.20D-9,2.34D-9,1.60D-9,1.22D-9,9.77D-10,7.00D-10,5.44D-10,3.50D-10,2.57D-10,1.68D-10,1.25D-10,9.93D-11,8.25D-11,6.16D-11,4.91D-11/
      DATA XPEL3F/16.0,25.0,50.0,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.5D6,2.0'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,8.0D6,1.0D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
# RAYLEIGH COMPTON AND PAIR PRODUCTION DATA
      DATA XCOMF/100.,150.,200.,300.,400.,500.,600.,800.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.022D6,1.25D6,1.5D6,2.0D6,2.044'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
      DATA YRAYF/53.87,53.82,53.77,53.62,53.42,53.16,52.85,52.07,51.11,48.01,44.27,36.25,29.02,23.25,18.86,13.07,9.647,5.470,3.611,1.921,      1.181,.7966,.5731,.3370,.2212,.1013,.05764,.02585,.01459,.009349, 6.498D-3,3.658D-3,2.342D-3,2.242D-3,1.499D-3,1.041D-3,5.858D-4,5.609D-4,2.604D-4,1.465D-4,9.374D-5,6.510D-5,4.783D-5,3.662D-5,2.893D-5,2.344D-5,1.046D-5,5.883D-6,2.614D-6,1.471D-6,9.412D-7,6.535D-7,3.677D-7,2.353D-7/  
      DATA YCOMF/1.935D-3,4.736D-3,8.533D-3,.01925,.03410,.05298,.07579,.1325,.2029,.4270,                  .6987,1.293,1.861,2.354,2.762,3.353,3.735,4.257,4.524,4.760,4.808,4.775,4.706,4.533,4.354,3.955,3.637,3.172,2.846,2.600,2.406,2.115,1.902,1.882,1.701,1.546,1.319,1.303,1.038,.8658,.7477,.6609,.5940,.5406,.4969,.4604,.3408,.2735,.1991,.1582,    .1321,.1138,.08974,.07449/    
# TOTAL PAIR PRODUCTION NUCLEAR + ELECTRON
      DATA YPAPF/34*1.D-20,6.506D-4,3.60D-3,.01434,.01546,.04137,.06799,.09219,.1141,.1339,.1518,.1680,.1829,.2403,.2830,.3451,.3893,     .4199,.4463,.4852,.5119/   
# NORMALISED RAYLEIGH FORM FACTOR  Hubbel
      DATA FFRF/1.0,.99973,.99910,.9981,.9967,.9948,.9926,.9868,.9794,.9604,.9362,.9223,.8833,.8398,.7931,.7451,.6497,.5611,.4172,.3189,.2562,.2172,.1926,.1762,.1646,.1430,.1243,.08978,.06246,.04616,.02986,.02354,.01091,.006078,.003611,.002744,.001011,2.268D-4,7.432D-5,2.042D-6, 3.244D-7,1.362D-7,2.758D-11,1.59D-20,1.63D-29/
# NORMALISED COMPTON FORM FACTOR  Hubbel
      DATA FFCF/1.1D-21,2.22D-4,.00111,.002489,.004411,.006878,.009867,.01739,.02689,.05122,.08166,.09867,.1453,.1957,.2474,.2990,.3966,.4830,.6169,.7043,.7591,.7946,.8196,.8391,.8559,.8916,.9209,.9609,.9816,.9914,.99590,.99800,.99946,.99983,.99994,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0/
# FLOURINE ATOMIC NUMBER
      IZ[2]=9
      AMZ[2]=113.9904
# CONVERT SHAKE OFF FROM A % TO A PROBABILITY
      DO 1 I=1,17
      PRSHBT(1,I)=PRBSHBTS[I]/100.0
      PRSHBT(2,I)=PRBSHBTF[I]/100.0
      DO 1 J=1,17
      PRBSHS(I,J)=PRBSHS(I,J)/100.0
      PRBSHF(I,J)=PRBSHF(I,J)/100.0
    1 CONTINUE  
# SWAP INDICES AND DO CHECK SUM
      DO 2 I=1,17
      PRSUMS=0.0
      PRSUMF=0.0
      DO 2 J=1,17
      PRSH(1,I,J)=PRBSHS[J][I]
      PRSH(2,I,J)=PRBSHF[J][I]
#     PRSUMF=PRSUMF+PRSH(2,I,J)
#     PRSUMS=PRSUMS+PRSH(1,I,J)
#     WRITE(6,888) I,PRSUMS,PRSUMF
# 888 print(' I=',I3,' PRSUMS=','%.3f' %,' PRSUMF=','%.3f' %)
    2 CONTINUE
# LOAD SKAKE OFF ENERGIES AND LEVEL OCCUPATIONS
      DO 3 I=1,17
      ESH(1,I)=ESS[I]
      ESH(2,I)=ESF[I]
      INIOCC(1,I)=INIOCS[I]
      INIOCC(2,I)=INIOCF[I]
    3 CONTINUE
#
# AUGER PROBABILITIES IN ARRAY AUG(I,J,K) INITIAL VACANCY IN SHELL I,
# WITH TRANSITION TO SHELLS J,K
# LOAD OUTPUT ARRAYS AND CONVERT TO EV
      DO 4 I=1,4
      DO 4 J=1,17
      DO 4 K=1,17 
      AUG(1,I,J,K)=AS(I,J,K)*0.0272105
    4 AUG(2,I,J,K)=AF(I,J,K)*0.0272105  
      DO 5 I=5,17
      DO 5 J=1,17
      DO 5 K=1,17
      AUG(1,I,J,K)=AS(I,J,K)*0.00272105
    5 AUG(2,I,J,K)=AF(I,J,K)*0.00272105
# CHECK AUGER LEVEL SUMS
# CHECK AUGER LEVEL SUMS
#     DO 7 I=1,17
#     ASUM=0.0
#     DO 6 J=1,17
#     DO 6 K=1,17
#   6 ASUM=ASUM+AUG(I,J,K)
#     WRITE(6,887) I,ASUM
# 887 print(' I=',I3,' ASUM=','%.3f' %)
#   7 CONTINUE
#  
# CONVERT RADIATIVE RATES IN M AND N SHELL TO EV 
      DO 12 I=5,17
      DO 12 J=6,17
      RS(I,J)=RS(I,J)*6.582119D-16
   12 RF(I,J)=RF(I,J)*6.582119D-16
# LOAD OUTPUT ARRAY
# LOAD OUTPUT ARRAY
      DO 13 I=1,17
      DO 13 J=1,17
      RAD[1,I,J]=RS(I,J)
   13 RAD[2,I,J]=RF(I,J)
#  
# PRINTOUT CHECK SUM
#     DO 15 I=1,17
#     RSUM=0.0
#     DO 14 J=1,17
#  14 RSUM=RSUM+R(I,J)
#     WRITE(6,100) I,RSUM
# 100 print(' SHELL =',I3,' RAD RATE EV=','%.3f' %)
#  15 CONTINUE
#
# LOAD SULFUR PHOTOELECTRIC DATA
      DO 21 J=1,42
      XPE(1,1,J)=math.log(XPEKS[J])
      YPE(1,1,J)=math.log(YPEKS[J]*1.D-24)
   21 CONTINUE
      DO 22 J=1,53
      XPE(1,2,J)=math.log(XPEL1S[J])
      YPE(1,2,J)=math.log(YPEL1S[J]*1.D-24)
   22 CONTINUE 
      DO 23 J=1,54 
      XPE(1,3,J)=math.log(XPEL2S[J])
      YPE(1,3,J)=math.log(YPEL2S[J]*1.D-24)
      XPE(1,4,J)=math.log(XPEL3S[J])
      YPE(1,4,J)=math.log(YPEL3S[J]*1.D-24)
   23 CONTINUE
      DO 231 J=1,60
      XPE(1,5,J)=math.log(XPEM1S[J])
      YPE(1,5,J)=math.log(YPEM1S[J]*1.D-24)
      XPE(1,6,J)=math.log(XPEM2S[J])
      YPE(1,6,J)=math.log(YPEM2S[J]*1.D-24)
      XPE(1,7,J)=math.log(XPEM3S[J])
      YPE(1,7,J)=math.log(YPEM3S[J]*1.D-24)
  231 CONTINUE 
# LOAD FLUORINE PHOTOELECTRIC DATA
# SCALE BY 6 SINCE 6 ATOMS PER SULFUR
      DO 24 J=1,45
      XPE(2,1,J)=math.log(XPEKF[J])
      YPE(2,1,J)=math.log(YPEKF[J]*6.0*1.D-24)
   24 CONTINUE
      DO 25 J=1,53
      XPE(2,2,J)=math.log(XPEL1F[J])
      YPE(2,2,J)=math.log(YPEL1F[J]*6.0*1.D-24)
   25 CONTINUE 
      DO 26 J=1,55 
      XPE(2,3,J)=math.log(XPEL2F[J])
      YPE(2,3,J)=math.log(YPEL2F[J]*6.0*1.D-24)
   26 CONTINUE
      DO 27 J=1,55 
      XPE(2,4,J)=math.log(XPEL3F[J])
      YPE(2,4,J)=math.log(YPEL3F[J]*6.0*1.D-24)
   27 CONTINUE
# LOAD RAYLEIGH COMPTON AND PAIR PRODUCTION X-SEC
      DO 28 J=1,54
      XCP(1,J)=math.log(XCOMS[J])
      XCP(2,J)=math.log(XCOMF[J])
      YRY(1,J)=math.log(YRAYS[J]*1.D-24)
      YRY(2,J)=math.log(YRAYF[J]*6.0*1.D-24)
      YCP(1,J)=math.log(YCOMS[J]*1.D-24)
      YCP(2,J)=math.log(YCOMF[J]*6.0*1.D-24)
      YPP(1,J)=math.log(YPAPS[J]*1.D-24)
      YPP(2,J)=math.log(YPAPF[J]*6.0*1.D-24)
   28 CONTINUE
# LOAD RAYLEIGH AND COMPTON FORM FACTOR
      DO 29 J=1,45
      FFAR(1,J)=FFRS[J]
      FFAR(2,J)=FFRF[J]
      FFAC(1,J)=FFCS[J]
      FFAC(2,J)=FFCF[J]
   29 CONTINUE
      RETURN
      # end
      def CGAS31(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS32(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS33(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS34(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS35(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS36(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS37(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS38(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS39(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS40(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS41(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS42(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS43(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS44(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
      DIMENSION INIOC(17),PRBSH(17,17),ES(17),R(17,17),A[17,17,17],PRBSHBT(17)
      DIMENSION INIOCN(17),PRBSHN(17,17),ESN(17),RN(17,17),AN(17,17,17),PRBSHBTN(17)
      DIMENSION INIOCH(17),PRBSHH(17,17),ESHH(17),RH(17,17),AH(17,17,17),PRBSHBTH(17)  
      DIMENSION XPEK(49),YPEK(49),XPEL1(54),YPEL1(54),XPEL2(54),YPEL2(54),XCOMC(54),YRAYC(54),YCOMC(54),YPAPC(54),FFRC(45),FFCC(45)
      DIMENSION XPEKN(47),YPEKN(47),XPEL1N(53),YPEL1N(53),XPEL2N(55),YPEL2N(55),XPEL3N(55),YPEL3N(55),XCOMN(54),YRAYN(54),YCOMN(54),YPAPN(54),FFRN(45),FFCN(45)
      DIMENSION XPEKH(54),YPEKH(54),XCOMH(54),YRAYH(54),YCOMH(54),YPAPH(54),FFRH(45),FFCH(45)
# 
# TRIMETHYL AMINE  TMA
#  C3NH9  DATA FOR CASCADE CALCULATIONS
#
# CARBON DATA 
#
# LEVEL OCCUPANCY FOR GROUND STATE
      DATA INIOC/2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0/
# AVERAGE SHAKE OFF ELECTRON ENERGY
      DATA ES/10.00,2.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
# SHAKE OFF DATA :  CARLSON AND NESTOR PHYS REV A8(1973)2887
# % PROBABILITY OF J SHELL SHAKE OFF FROM VACANCY IN SHELL I PROBSH(I,J)
      DATA PRBSH/0.20,3.00,9.00,0.0,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.80,3.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.50,2.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,238*0.0/
# SHAKE OFF DATA : CARLSON,NESTOR ET AL PHYS REV 169(1968)27
# % PROBABILITY OF J SHELL SHAKE OFF FROM BETA DECAY PRSHBT[J]
      DATA PRBSHBT/2.74,12.0,12.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
#
# AUGER AND COSTER-KRONIG TRANSITION RATES FOR K AND L SHELLS 
#  WALTERS AND BHALLA (1971)
# K SHELL RATE (MILLIATOMIC UNITS) TO GET TO EV *0.0272105
      DATA A[1,2,2]/0.858/,A[1,2,3]/0.824/,A[1,3,3]/0.378/
# RADIATIVE TRANSITIONS SCOFIELD ANDT 14(1974)121
# DIPOLE AND HIGHER MULTIPOLES , RELATIVISTIC CALC. UNITS 1.519E15/SEC
# K-SHELL
      DATA R(1,2)/1.50E-14/,R(1,3)/3.45E-5/,R(1,4)/6.88E-5/
# L1 SHELL
      DATA R(2,3)/1.20E-7/,R(2,4)/2.41E-7/
# L2 SHELL
      DATA R(3,4)/1.55E-21/
# 
# PHOTOELECTRIC ABSORPTION X-SECTIONS FOR EACH SHELL: 
#    UNITS BARNS/ATOM AND ENERGIES IN EV
#  ASSEMBLED FROM: BAND ET AL.            ANDT 23(1979)443
#                : SCOFIELD               UCRL-51326
#                : VIEGELE                ATOMIC DATA 5(1973)50
# K  SHELL 1S 1/2
      DATA YPEK/9.26E5,7.98E5,4.81E5,2.35E5,1.21E5,8.42E4,6.57E4,5.09E4,4.20E4,1.33E4,5.73E3,1.70E3,707.,354.,200.,80.4,39.3,10.6,4.12,1.08,.415,.197,.107,.0411,.0195,.00512,.00201,5.64E-4,2.41E-4,1.29E-4,8.05E-5,4.06E-5,2.52E-5,1.19E-5,7.51E-6,4.21E-6,2.90E-6,2.20E-6,1.77E-6,1.27E-6,9.93E-7,6.39E-7,4.71E-7,3.08E-7,2.29E-7,1.82E-7,1.51E-7,1.13E-7,9.01E-8/
      DATA XPEK/285.0,300.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# L1 SHELL 2S 1/2
      DATA YPEL1/1.35E7,1.50E6,4.00E5,2.21E5,1.70E5,1.14E5,4.58E4,2.07E4,1.02E4,5.34E3,3.76E3,2.97E3,2.32E3,1.93E3,635.,280.,85.1,35.7,18.0,10.3,4.16,2.05,.554,.217,.0571,.0220,.0105,.00570,.00218,.00104,   2.72E-4,1.07E-4,3.00E-5,1.28E-5,6.88E-6,4.28E-6,2.16E-6,1.34E-6,6.37E-7,4.02E-7,2.26E-7,1.55E-7,1.18E-7,9.49E-8,6.82E-8,5.32E-8,3.42E-8,2.52E-8,1.65E-8,1.23E-8,9.75E-9,8.10E-9,6.05E-9,4.82E-9/
      DATA XPEL1/18.0,50.0,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/          
# L2 SHELL 2P 1/2
      DATA YPEL2/1.35E7,9.0E5,1.50E5,7.81E4,5.15E4,2.79E4,7.59E3,2.49E3,924.,383.,239.,173.,124.,94.6,20.7,6.75,1.36,.432,.176,.0841,  .0259,.0103,.00189,5.64E-4,1.02E-4,3.06E-5,1.20E-5,5.63E-6,1.72E-6,6.96E-7,1.40E-7,4.69E-8,1.10E-8,4.26E-9,2.16E-9,1.29E-9,6.20E-10,3.76E-10,1.82E-10,1.15E-10,6.45E-11,4.44E-11,3.37E-11,2.71E-11,1.95E-11,1.52E-11,9.77E-12,7.20E-12,4.71E-12,3.50E-12,2.79E-12,2.31E-12,1.73E-12,1.38E-12/
      DATA XPEL2/6.40,50.0,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# RAYLEIGH COMPTON AND PAIR PRODUCTION DATA
# RAYLEIGH      COMPTON AND PAIR PRODUCTION DATA
# HUBBEL        J.PHYS.CHEM.REF.DATA 4(1975)471
# HUBBEL        NIST XCOM WEB SITE
      DATA XCOMC/100.,150.,200.,300.,400.,500.,600.,800.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.022D6,1.25D6,1.5D6,2.0D6,2.044'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
      DATA YRAYC/23.94,23.90,24.85,23.72,23.53,23.31,23.03,22.37,21.52,19.12,16.59,12.22,9.179,7.170,5.819,4.181,3.232,1.952,1.292,.6711,      .4079,.2734,.1956,.1139,.07418,.03360,.01903,8.504D-3,4.792D-3,   3.070D-3,                  2.133D-3,1.200D-3,7.682D-4,7.355D-4,4.917D-4,3.415D-4,1.921D-4,1.839D-4,8.539D-5,4.803D-5,3.074D-5,2.135D-5,1.568D-5,1.201D-5,9.488D-6,7.685D-6,3.415D-6,1.921D-6,8.537D-7,4.802D-7,3.073D-7,2.134D-7,1.200D-7,7.682D-8/  
      DATA YCOMC/3.044D-3,6.469D-3,.01140,.02518,.04448,.06870,.09764, .1680,.2519,.5001,                  .7702,1.278,1.685,1.984,2.202,2.497,2.697,3.012,3.182,3.300,3.296,3.250,3.188,3.054,2.924,2.647,2.431,2.118,1.899,1.735,1.605,1.410,1.268,1.255,1.134,1.031,.8795,.8687,.6920,.5772,.4985,.4406,.3960,.3604,.3313,.3069,.2272,.1823,.1327,.1055,    .08805,.07586,.05983,.04966/  
# TOTAL PAIR PRODUCTION NUCLEAR + ELECTRON
      DATA YPAPC/34*1.D-20,2.870D-4,1.594D-3,6.356D-3,6.852D-3,.01844, .03054,   .04163,.05178,.06095,.06928,.07690,.08388,.1108,.1310,.1597,.1802,.1958,.2080,.2263,.2401/   
# NORMALISED RAYLEIGH FORM FACTOR  Hubbel
      DATA FFRC/1.0,.99957,.99830,.9962,.9932,.9895,.9848,.9735,.9590,.9228,.8783,.8538,.7902,.7218,.6562,.5962,.4935,.4170,.3252,.2810,.2558,.2375,.2202,.2027,.1853,.1441,.1094,.0620,.03577,.02147,.01341,.008705,.004055,.002108,.001191,7.198D-4,3.06D-4,6.295D-5, 2.027D-5,5.398D-7,8.455D-8,3.52D-8,5.993D-12,2.767D-21,2.80D-30/
# NORMALISED COMPTON FORM FACTOR  Hubbel
      DATA FFCC/1.7D-21,6.317D-4,.002165,.004922,.008607,.01341,.01928,.03358,.05143,.0948,.1459,.1732,.2413,.3110,.3755,.4340,.5330,.6072,.6973,.7463,.7817,.8130,.8418,.8680,.8913,.9358,.9635,.9883,.9962,.9987,.99947,.99977,.99995,.99998,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0/
# CARBON ATOMIC NUMBER
      IZ[1]=6
      AMZ[1]=36.0321    
# 
# ATOMIC NITROGEN DATA 
#
# LEVEL OCCUPANCY FOR GROUND STATE
      DATA INIOCN/2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0/
# AVERAGE SHAKE OFF ELECTRON ENERGY
      DATA ESN/11.00,2.0,2.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
# SHAKE OFF DATA :  CARLSON AND NESTOR PHYS REV A8(1973)2887
# % PROBABILITY OF J SHELL SHAKE OFF FROM VACANCY IN SHELL I PROBSH(I,J)
      DATA PRBSHN/0.12,2.50,8.00,4.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.30,2.00,1.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.50,1.00,2.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.50,2.00,0.50,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,221*0.0/
# SHAKE OFF DATA : CARLSON,NESTOR ET AL PHYS REV 169(1968)27
# % PROBABILITY OF J SHELL SHAKE OFF FROM BETA DECAY PRSHBT[J]
      DATA PRBSHBTN/2.2,6.0,8.0,10.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0/
#
# AUGER AND COSTER-KRONIG TRANSITION RATES FOR K AND L SHELLS 
#  WALTERS AND BHALLA (1971)
# K SHELL RATE (MILLIATOMIC UNITS) TO GET TO EV *0.0272105
      DATA AN(1,2,2)/0.842/,AN(1,2,3)/0.828/,AN(1,3,3)/0.380/
      DATA AN(1,2,4)/0.072/,AN(1,3,4)/0.035/
# RADIATIVE TRANSITIONS SCOFIELD ANDT 14(1974)121
# DIPOLE AND HIGHER MULTIPOLES , RELATIVISTIC CALC. UNITS 1.519E15/SEC
# K-SHELL
      DATA RN(1,2)/8.04E-14/,RN(1,3)/1.104E-4/,RN(1,4)/2.201E-4/
# L1 SHELL
      DATA RN(2,3)/3.09E-7/,RN(2,4)/6.23E-7/
# L2 SHELL
      DATA RN(3,4)/2.65E-20/
# 
# PHOTOELECTRIC ABSORPTION X-SECTIONS FOR EACH SHELL: 
#    UNITS BARNS/ATOM AND ENERGIES IN EV
#  ASSEMBLED FROM: BAND ET AL.            ANDT 23(1979)443
#                : SCOFIELD               UCRL-51326
#                : VIEGELE                ATOMIC DATA 5(1973)50
# K  SHELL 1S 1/2
      DATA YPEKN/7.0E5,3.78E5,2.03E5,1.43E5,1.13E5,8.83E5,7.32E4,2.39E4,1.05E4,3.20E3,1.35E3,681.,388.,158.,78.2,21.3,8.39,2.22,.861,.411,.225,.0863,.0412,.0108,.00428,.00120,5.14E-4,2.77E-4,1.72E-4,8.69E-5,5.40E-5,2.55E-5,1.61E-5,8.99E-6,6.18E-6,4.69E-6,3.77E-6,2.71E-6,2.11E-6,1.36E-6,9.99E-7,6.54E-7,4.86E-7,3.86E-7,3.21E-7,2.39E-7,1.91E-7/
      DATA XPEKN/401.6,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# L1 SHELL 2S 1/2
      DATA YPEL1N/4.50E6,4.80E5,2.98E5,2.35E5,1.63E5,7.04E4,3.31E4,1.68E4,9.06E3,6.45E3,5.12E3,4.03E3,3.38E3,1.15E3,522.,164.,70.0,35.8,20.6,8.46,
     .4.21,1.16,.459,.122,.0475,.0227,.0124,.00478,.00229,6.02E-4,2.37E-4,6.68E-5,2.86E-5,1.54E-5,9.57E-6,4.83E-6,3.00E-6,1.42E-6,8.94E-7,5.01E-7,3.44E-7,2.61E-7,2.10E-7,1.51E-7,1.17E-7,7.55E-8,5.56E-8,3.64E-8,2.70E-8,2.15E-8,1.79E-8,1.33E-8,1.06E-8/
      DATA XPEL1N/24.4,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/          
# L2 SHELL 2P 1/2
      DATA YPEL2N/3.20E6,4.00E6,4.00E6,1.8E5,8.45E4,5.70E4,3.19E4,8.90E3,2.95E3,1.14E3,482.,301.,220.,160.,124.,28.4,9.73,2.02,.647,.266,.128,.0402,.0162,.00306,9.27E-4,1.72E-4,5.20E-5,2.07E-5,9.78E-6,3.03E-6,1.24E-6,2.55E-7,8.63E-8,2.03E-8,7.78E-9,3.88E-9,2.25E-9,1.02E-9,5.85E-10,2.44E-10,1.54E-10,8.60E-11,5.91E-11,4.49E-11,3.61E-11,2.59E-11,2.02E-11,1.30E-11,9.56E-12,6.25E-12,4.65E-12,3.70E-12,3.07E-12,2.29E-12,1.83E-12/
      DATA XPEL2N/14.534,20.0,25.0,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# L3 SHELL 2P 3/2
      DATA YPEL3N/6.40E6,8.00E6,8.00E6,3.6E5,1.68E5,1.14E5,6.38E4,1.78E4,5.90E3,2.29E3,964.,603.,440.,319.,246.,56.4,19.3,4.00,1.28,.524,.252,.0787,.0317,.00593,.00179,3.27E-4,9.82E-5,3.87E-5,1.82E-5,5.55E-6,2.25E-6,4.50E-7,1.51E-7,3.54E-8,1.39E-8,7.10E-9,4.32E-9,2.12E-9,1.31E-9,6.29E-10,3.96E-10,2.22E-10,1.52E-10,1.16E-10,9.31E-11,6.68E-11,5.20E-11,3.34E-11,2.46E-11,1.61E-11,1.20E-11,9.53E-12,7.91E-12,5.91E-12,4.71E-12/
      DATA XPEL3N/14.524,20.0,25.0,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# LOAD RAYLEIGH COMPTON AND PAIR PRODUCTION DATA
# HUBBEL           J.PHYS.CHEM.REF.DATA    4(1975)471
# HUBBEL           NIST XCOM WEB SITE
# STORM AND ISRAEL   NUCL.DATA TABLES  A7(1970)565
      DATA XCOMN/100.,150.,200.,300.,400.,500.,600.,800.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.022D6,1.25D6,1.5D6,2.0D6,2.044'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
      DATA YRAYN/32.55,32.51,32.47,32.34,32.15,31.91,31.62,30.90,30.03,27.34,24.32,18.61,14.21,11.10,8.927,6.246,4.722,2.805,1.870,.9839,      .6009,.4042,.2901,.1697,.1109,.05046,.02863,.01281,.007221,       .004626,                   3.215D-3,1.809D-3,1.158D-3,1.109D-3,7.414D-4,5.149D-4,2.897D-4,2.773D-4,1.287D-4,7.243D-5,4.635D-5,3.219D-5,2.365D-5,1.811D-5,1.431D-5,1.159D-5,5.164D-6,2.905D-6,1.291D-6,7.263D-7,4.648D-7,3.227D-7,1.816D-7,1.162D-7/  
      DATA YCOMN/2.698D-3,6.260D-3,.01180,.02508,.04428,.06856,.09770, .1692,.2560,.5198,                  .8165,1.392,1.866,2.225,2.494,2.858,3.093,3.449,3.645,3.800,3.811,3.766,3.700,3.551,3.403,3.085,2.834,2.470,2.215,2.023,1.872,1.645,1.479,1.464,1.323,1.202,1.026,1.013,.8073,.6734,.5815,.5140,.4620,.4205,.3865,.3581,.2650,.2127,.1549,.1231,    .1027,.08851,.06980,.05793/   
# TOTAL PAIR PRODUCTION NUCLEAR + ELECTRON
      DATA YPAPN/34*1.D-20,3.931D-4,2.177D-3,8.667D-3,9.343D-3,.02507,.04138,   .05628,.06989,.08213,.09326,.1034,.1127,.1487,.1753,.2138,.2397,  .2609,.2763,.3012,.3193/   
# NORMALISED RAYLEIGH FORM FACTOR  Hubbel
      DATA FFRN/1.0,.99911,.99814,.9970,.9947,.9919,.9897,.9793,.9680,.9391,.9031,.8834,.8280,.7696,.7099,.6514,.5464,.4597,.3420,.2769,.2421,.2217,.2066,.1931,.1803,.1307,.1197,.07481,.0462,.0325,.01881,.01457,.006071,.003214,.001871,.001443,5.857D-4,1.087D-4,3.519D-5,9.463D-7,1.490D-7,6.217D-8,1.127D-11,5.67D-21,5.77D-30/
# NORMALISED COMPTON FORM FACTOR  Hubbel
      DATA FFCN/1.4D-21,4.3D-4,.00186,.00417,.00739,.01149,.01644,.02881,.04429,.08257,.1292,.1543,.2200,.2861,.3496,.4083,.5084,.5853,.6846,.7403,.7767,.8050,.8299,.8526,.8733,.9166,.9471,.9800,.9924,.9970,.99876,.99943,.99987,.99997,.99999,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0/
# NITROGEN ATOMIC NUMBER
      IZ[2]=7
      AMZ[2]=14.0067
# 
# ATOMIC HYDROGEN DATA
#
# LEVEL OCCUPANCY FOR GROUND STATE
      DATA INIOCH/1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/
# AVERAGE SHAKE OFF ELECTRON ENERGY
      DATA ESHH/17*0.0/ 
# SHAKE OFF DATA :  CARLSON AND NESTOR PHYS REV A8(1973)2887
# % PROBABILITY OF J SHELL SHAKE OFF FROM VACANCY IN SHELL I PROBSH(I,J)
      DATA PRBSHH/289*0.0/
# SHAKE OFF DATA : CARLSON,NESTOR ET AL PHYS REV 169(1968)27
# % PROBABILITY OF J SHELL SHAKE OFF FROM BETA DECAY PRSHBT[J]
      DATA PRBSHBTH/17*0.0/
#
# PHOTOELECTRIC ABSORPTION X-SECTIONS FOR EACH SHELL: 
#    UNITS BARNS/ATOM AND ENERGIES IN EV
#  ASSEMBLED FROM: BAND ET AL.            ANDT 23(1979)443
#                : SCOFIELD               UCRL-51326
#                : VIEGELE                ATOMIC DATA 5(1973)50
# K  SHELL 1S 1/2
      DATA YPEKH/6.41E6,2.18E6,1.93E4,8.10E3,5.31E3,2.86E3,765.,251.,96.6,41.9,26.7,19.7,14.4,11.4,2.93,1.11,.281,.105,.0491,.0263,.00982,.00456,.00113,4.18E-4,1.03E-4,3.82E-5,1.77E-5,9.46E-6,3.52E-6,1.64E-6,4.18E-7,1.61E-7,4.41E-8,1.86E-8,9.93E-9,6.16E-9,3.12E-9,1.96E-9,9.73E-10,6.20E-10,3.52E-10,2.44E-10,1.87E-10,1.51E-10,1.09E-10,8.50E-11,5.49E-11,4.06E-11,2.66E-11,1.98E-11,1.58E-11,1.31E-11,9.79E-12,7.81E-12/
      DATA XPEKH/13.598,20.,100.,132.3,151.4,184.,278.,392.,525.,676.5,775.,849.,932.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0E4,1.5E4,2.0E4,3.0E4,4.0E4,5.0E4,6.0E4,8.0E4,1.0E5,1.5E5,2.0E5,3.0E5,4.0E5,5.0E5,6.0E5,8.0E5,1.0E6,1.5E6,2.0E6,3.0E6,4.0E6,5.0E6,6.0E6,8.0E6,1.0E7,1.5E7,2.0E7,3.0E7,4.0E7,5.0E7,6.0E7,8.0E7,1.0E8/
# RAYLEIGH      COMPTON AND PAIR PRODUCTION DATA
# HUBBEL        J.PHYS.CHEM.REF.DATA 4(1975)471
# HUBBEL        NIST XCOM WEB SITE
# STORM AND ISRAEL    NUCL.DATA TABLES  A7(1970)565
      DATA XCOMH/100.,150.,200.,300.,400.,500.,600.,800.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.5D5,2.0'%.3f' %.0D5,4.0D5,5.0D5,6.0D5,8.0D5,1.0D6,1.022D6,1.25D6,1.5D6,2.0D6,2.044'%.3f' %.0D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.5D7,2.0'%.3f' %.0D7,4.0D7,5.0D7,6.0D7,8.0D7,1.0D8/
      DATA YCOMH/9.552D-4,2.144D-3,3.802D-3,8.494D-3,1.496D-2,2.310D-2,3.279D-2,5.629D-2,8.424D-2,0.1650,.2478,.3822,.4675,.5187,.5503,.5840,.5993,.6095,.6068,.5924,.5759,.5597,.5444,.5166,.4923,.4435,.4064,.3535,.3168,.2893,.2676,.2351,.2114,.2092,.1890,.1718,.1466,.1448,.1153,.0962,.08308,.07343,.0660,.06007,.05522,.05116,.03786,.03039,.02212,.01758,.01467,.01264,.009972,.008276/
      DATA YRAYH/.6650,.6635,.6617,.6569,.6503,.6421,.6323,.6087,.5806,.4984,.4142,.2764,.1881,.1341,.09987,.06126,.04121,.01943,.01119,.005062,.002866,.001840,.001280,7.211D-4,4.619D-4,2.054D-4,1.156D-4,5.138D-5,2.890D-5,1.850D-5,1.285D-5,7.226D-6,4.625D-6,4.428D-6,2.960D-6,2.056D-6,1.156D-6,1.107D-6,5.139D-7,2.891D-7,1.850D-7,1.285D-7,9.439D-8,7.227D-8,5.710D-8,4.625D-8,2.056D-8,1.156D-8,5.139D-9,2.890D-9,1.850D-9,1.284D-9,7.222D-10,4.620D-10/
# TOTAL PAIR PRODUCTION NUCLEAR + ELECTRON
      DATA YPAPH/34*1.D-20,7.805D-6,4.385D-5,1.758D-4,1.895D-4,5.451D-4,9.849D-4,1.430D-3,1.859D-3,2.260D-3,2.634D-3,2.984D-3,3.308D-3,4.61D-3,5.61D-3,7.08D-3,8.13D-3,8.98D-3,9.65D-3,1.074D-2,1.161D-2/
# RAYLEIGH FORM FACTOR  Hubbel
      DATA FFRH/1.0,.9994,.9978,.9950,.9912,.9863,.9804,.9655,.9469,.8999,.8424,.8108,.7271,.6413,.5581,.4808,.3497,.2513,.1304,.07059,.04032,.02429,.01533,.01009,.006881,.002995,.001494,4.890D-4,2.035D-4,9.902D-5,5.373D-5,3.160D-5,1.300D-5,6.282D-6,3.395D-6,1.992D-6,8.168D-7,1.615D-7,5.112D-8,1.309D-9,1.998D-10,8.182D-11,8.182D-15,8.182D-27,8.182D-39/
# COMPTON FORM FACTOR  Hubbel
      DATA FFCH/1.D-20,.001105,.004410,.009888,.01749,.02717,.03883,.06773,.1033,.1902,.2904,.3426,.4713,.5887,.6885,.7689,.8777,.9369,.9830,.9950,.9984,.9994,.9998,.9999,.99995,.99999,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0/
# HYDROGEN ATOMIC NUMBER
      IZ[3]=1
      AMZ[3]=9.07146    
#
# CONVERT SHAKE OFF FROM A % TO A PROBABILITY
      DO 1 I=1,17
      PRSHBT(1,I)=PRBSHBT[I]/100.0
      PRSHBT(2,I)=PRBSHBTN[I]/100.0
      PRSHBT(3,I)=PRBSHBTH[I]/100.0
      DO 1 J=1,17
      PRBSH(I,J)=PRBSH(I,J)/100.0
      PRBSHN(I,J)=PRBSHN(I,J)/100.0
      PRBSHH(I,J)=PRBSHH(I,J)/100.0
    1 CONTINUE  
# SWAP INDICES AND DO CHECK SUM
      DO 2 I=1,17
      PRSUM=0.0
      PRSUMN=0.0
      PRSUMH=0.0
      DO 2 J=1,17
      PRSH(1,I,J)=PRBSH[J][I]
      PRSH(2,I,J)=PRBSHN[J][I]
      PRSH(3,I,J)=PRBSHH[J][I]
#     PRSUMH=PRSUMH+PRSH(2,I,J)
#     PRSUM=PRSUM+PRSH(1,I,J)
#     WRITE(6,888) I,PRSUM,PRSUMH
# 888 print(' I=',I3,' PRSUM=','%.3f' %,' PRSUM=','%.3f' %)
    2 CONTINUE
# LOAD SKAKE OFF ENERGIES AND LEVEL OCCUPATIONS
      DO 3 I=1,17
      ESH(1,I)=ES[I]
      ESH(2,I)=ESN[I]
      ESH(3,I)=ESHH[I]
      INIOCC(1,I)=INIOC[I]
      INIOCC(2,I)=INIOCN[I]
      INIOCC(3,I)=INIOCH[I]
    3 CONTINUE
#
# AUGER PROBABILITIES IN ARRAY AUG(I,J,K) INITIAL VACANCY IN SHELL I,
# WITH TRANSITION TO SHELLS J,K
# LOAD OUTPUT ARRAYS AND CONVERT TO EV
      DO 4 I=1,4
      DO 4 J=1,17
      DO 4 K=1,17 
      AUG(1,I,J,K)=A[I,J,K]*0.0272105 
      AUG(2,I,J,K)=AN(I,J,K)*0.0272105 
    4 AUG(3,I,J,K)=AH(I,J,K)*0.0272105  
      DO 5 I=5,17
      DO 5 J=1,17
      DO 5 K=1,17
      AUG(1,I,J,K)=A[I,J,K]*0.00272105
      AUG(2,I,J,K)=AN(I,J,K)*0.00272105
    5 AUG(3,I,J,K)=AH(I,J,K)*0.00272105
# CHECK AUGER LEVEL SUMS
#     DO 7 I=1,17
#     ASUM=0.0
#     DO 6 J=1,17
#     DO 6 K=1,17
#   6 ASUM=ASUM+AUG(I,J,K)
#     WRITE(6,887) I,ASUM
# 887 print(' I=',I3,' ASUM=','%.3f' %)
#   7 CONTINUE
#  
# CONVERT RADIATIVE RATES IN M AND N SHELL TO EV 
      DO 12 I=5,17
      DO 12 J=6,17
      R(I,J)=R(I,J)*6.582119D-16
      RN(I,J)=RN(I,J)*6.582119D-16
   12 RH(I,J)=RH(I,J)*6.582119D-16
# LOAD OUTPUT ARRAY
      DO 13 I=1,17
      DO 13 J=1,17
      RAD[1,I,J]=R(I,J)
      RAD[2,I,J]=RN(I,J)
   13 RAD[3,I,J]=RH(I,J)
# PRINTOUT CHECK SUM
#     DO 15 I=1,17
#     RSUM=0.0
#     DO 14 J=1,17
#  14 RSUM=RSUM+R(I,J)
#     WRITE(6,100) I,RSUM
# 100 print(' SHELL =',I3,' RAD RATE EV=','%.3f' %)
#  15 CONTINUE
#
# LOAD CARBON PHOTOELECTRIC AND COMPTON DATA
# ALLOW FOR 3 CARBON ATOMS
      DO 21 J=1,49
      XPE(1,1,J)=math.log(XPEK[J])
      YPE(1,1,J)=math.log(YPEK[J]*3.D-24)
   21 CONTINUE
      DO 22 J=1,54
      XPE(1,2,J)=math.log(XPEL1[J])
      YPE(1,2,J)=math.log(YPEL1[J]*3.D-24)
   22 CONTINUE 
      DO 23 J=1,54 
      XPE(1,3,J)=math.log(XPEL2[J])
      YPE(1,3,J)=math.log(YPEL2[J]*3.D-24)
   23 CONTINUE
# LOAD NITROGEN PHOTOELECTRIC AND COMPTON DATA
      DO 24 J=1,47
      XPE(2,1,J)=math.log(XPEKN[J])
      YPE(2,1,J)=math.log(YPEKN[J]*1.D-24)
   24 CONTINUE
      DO 25 J=1,53
      XPE(2,2,J)=math.log(XPEL1N[J])
      YPE(2,2,J)=math.log(YPEL1N[J]*1.D-24)
   25 CONTINUE 
      DO 26 J=1,55
      XPE(2,3,J)=math.log(XPEL2N[J])
      YPE(2,3,J)=math.log(YPEL2N[J]*1.D-24)
   26 CONTINUE
      DO 27 J=1,55
      XPE(2,4,J)=math.log(XPEL3N[J])
      YPE(2,4,J)=math.log(YPEL3N[J]*1.D-24)
   27 CONTINUE
# LOAD HYDROGEN PHOTOELECTRIC AND COMPTON DATA
      DO 28 J=1,54
      XPE(3,1,J)=math.log(XPEKH[J])
# ALLOW FOR 9 HYDROGEN ATOMS
      YPE(3,1,J)=math.log(YPEKH[J]*9.0*1.D-24)
   28 CONTINUE
# LOAD RAYLEIGH COMPTON AND PAIR PRODUCTION X-SEC
      DO 29 J=1,54
      XCP(1,J)=math.log(XCOMC[J])
      XCP(2,J)=math.log(XCOMN[J])
      XCP(3,J)=math.log(XCOMH[J])
      YRY(1,J)=math.log(YRAYC[J]*3.0D-24)
      YRY(2,J)=math.log(YRAYN[J]*1.0D-24)
      YRY(3,J)=math.log(YRAYH[J]*9.0D-24)
      YCP(1,J)=math.log(YCOMC[J]*3.0D-24)
      YCP(2,J)=math.log(YCOMN[J]*1.0D-24)
      YCP(3,J)=math.log(YCOMH[J]*9.0D-24)
      YPP(1,J)=math.log(YPAPC[J]*3.0D-24)
      YPP(2,J)=math.log(YPAPN[J]*1.0D-24)
      YPP(3,J)=math.log(YPAPH[J]*9.0D-24)
   29 CONTINUE
# LOAD RAYLEIGH AND COMPTON FORM FACTORS
      DO 39 J=1,45
      FFAR(1,J)=FFRC[J]
      FFAR(2,J)=FFRN[J]
      FFAR(3,J)=FFRH[J]
      FFAC(1,J)=FFCC[J]
      FFAC(2,J)=FFCN[J]
      FFAC(3,J)=FFCH[J]
   39 CONTINUE
      RETURN 
      # end
      def CGAS45(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS46(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS47(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS48(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS49(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS50(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS51(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS52(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS53(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS54(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS55(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS56(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS57(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS58(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS59(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS60(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS61(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS62(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS63(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS64(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS65(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS66(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS67(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS68(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS69(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS70(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS71(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS72(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS73(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS74(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS75(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS76(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS77(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS78(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS79(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def CGAS80(PRSH,PRSHBT,ESH,AUG,RAD,XPE,YPE,XCP,YRY,YCP,YPP,FFAR,FFAC,IZ,AMZ,INIOCC)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)
      DIMENSION PRSH(3,17,17),PRSHBT(3,17),ESH(3,17),AUG(3,17,17,17),RAD[3,17,17],XPE(3,17,60),YPE(3,17,60),XCP(3,54),YRY(3,54),YCP(3,54),YPP(3,54),FFAR(3,45),FFAC(3,45),IZ[3],AMZ[3],INIOCC(3,17)
# 
      RETURN
      # end
      def GAS1(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY   ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,
#    /NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,SCRPT)QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000)
      COMMON/DENS/DEN(20000)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6)
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30) 
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]  
      DIMENSION XEN(163),YELM(163),YELT(163),YEPS(163),XVBV4(11),YVBV4(11),XVBV1(11),YVBV1(11),XVBV3(11),YVBV3(11),XVIB5(12),YVIB5(12),XVIB6(12),YVIB6(12),XTR1(12),YTR1(12),XTR2(11),YTR2(11),XTR3(11),YTR3(11),XC'%.3f' % 7),YC'%.3f' % 7),XC'%.3f' % 1),YC'%.3f' % 1),XCF1(28),YCF1(28),XCF32(25),YCF32(25),XCF0(27),YCF0(27),XC0F(27),YC0F(27),XCF22(25),YCF22(25),XCF(22),YCF(22),XCFF(24),YCFF(24),XCF2F(25),YCF2F(25),XCF3F(26),YCF3F(26),XATT(11),YATT(11),XKSHC(81),YKSHC(81),XKSHF(79),YKSHF(79),IOFFN(46),IOFFION(12)
      DIMENSION Z6T(25),Z9T(25),EBRM(25)
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      DATA XEN/0.0,.001,.002,.003,.004,.005,.006,.007,.008,.009,        0.01,.012,.014,.016,.018,0.02,.025,0.03,.035,0.04,                .045,0.05,.055,0.06,.065,0.07,.075,0.08,.085,0.09,                0.10,0.12,0.14,0.17,0.20,0.24,0.30,0.40,0.50,0.60,                0.80,1.00,1.20,1.40,1.70,2.00,3.00,5.00,6.00,7.00,8.00,9.00,10.0,12.0,15.0,20.0,25.0,30.0,40.0,50.0, 60.0,80.0,100.,125.,150.,200.,250.,300.,400.,500.,600.,700.,800.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,10000.,1.25D4,1.50D4,1.75D4,2.0D4,2.5'%.3f' %.0'%.3f' %.5D4,4.0D4,4.5D4,5.0D4,6.0D4,7.0D4,8.0D4,9.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5'%.3f' %.0'%.3f' %.5D5,4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,2.0D6,2.5'%.3f' %.0'%.3f' %.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5'%.3f' %.0'%.3f' %.5D7,4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,1.0D8,1.25D8,1.5D8,1.75D8,2.0D8,2.5'%.3f' %.0'%.3f' %.5D8,4.0D8,4.5D8,5.0D8,6.0D8,7.0D8,8.0D8,9.0D8,1.0D9/
# ELASTIC MOMENTUM TRANSFER X-SECTION
      DATA YELM/12.5,8.70,7.00,5.95,5.20,4.70,4.30,3.95,3.65,3.40,3.20,2.85,2.58,2.37,2.19,2.04,1.77,1.57,1.41,1.30,    1.20,1.12,1.05,0.99,0.93,0.88,0.84,0.80,0.76,0.72,0.65,0.48,0.35,0.29,0.29,0.34,0.47,0.87,1.35,1.85,2.95,4.00,4.75,5.15,5.45,5.65,5.80,6.00,6.10,6.30,6.50,6.80,7.20,8.30,9.50,10.1,9.60,8.80,7.85,6.72,5.90,5.06,4.16,3.57,2.99,1.92,1.53,1.20,0.88,0.66,.525,0.43,0.37,0.30,.228,.169,.131,.104,.0711,.0519, .0397,.0314,.0212,.0153,.0117,.00918,.00743,.00615,.00412,.00297,2.25D-3,1.77D-3,1.18D-3,8.51D-4,6.45D-4,5.08D-4,4.12D-4,3.41D-4,2.47D-4,1.88D-4,1.49D-4,1.21D-4,1.01D-4,6.88D-5,5.05D-5,3.90D-5,3.13D-5,2.17D-5,1.62D-5,1.27D-5,1.03D-5,8.56D-6,7.27D-6,5.49D-6,4.34D-6,3.54D-6,2.96D-6,2.52D-6,1.81D-6,1.36D-6,1.07D-6,8.68D-7,6.08D-7,4.53D-7,3.51D-7,2.82D-7,2.31D-7,1.93D-7,1.42D-7,1.08D-7,8.59D-8,6.98D-8,5.79D-8,3.89D-8,2.80D-8,2.12D-8,1.66D-8,1.10D-8,7.86D-9,5.90D-9,4.59D-9,3.68D-9,3.01D-9,2.13D-9,1.58D-9,1.22D-9,9.75D-10,7.92D-10,5.10D-10,3.56D-10,2.62D-10,2.01D-10,1.29D-10,8.95D-11,6.58D-11,5.04D-11,3.98D-11,3.23D-11,2.24D-11,1.65D-11,1.26D-11,9.96D-12,8.07D-12/
# ELASTIC X-SECTION ASSUMED ISOTROPIC BELOW 0.6 EV
      DATA YELT/12.5,8.70,7.00,5.95,5.20,4.70,4.30,3.95,3.65,3.40,3.20,2.85,2.58,2.37,2.19,2.04,1.77,1.57,1.41,1.30,    1.20,1.12,1.05,0.99,0.93,0.88,0.84,0.80,0.76,0.72,0.65,0.48,0.35,0.29,0.29,0.34,0.47,0.87,1.35,1.85,3.77,4.89,5.66,6.43,7.43,8.34,10.6,12.5,11.6,11.0,11.0,11.7,12.9,14.5,16.8,17.6,18.1,17.2,15.9,14.9,14.3,13.0,11.7,10.5,9.65,8.10,6.83,6.02,5.02,4.36,3.83,3.40,3.08,2.65,2.17,1.89,1.55,1.40,1.19,1.11,.921,.822,.696,.568,.492,.435,.390,.353,.286,.241,.209,.185,.150,.127,.111,.0984,.0888,.0810,.0694,.0611,.0522,.050,.0461,.0391,.0344,.0311,.0287,.0253,.0230,.0214,.0202,.0193,.0186,.0176,.0169,.0164,.0160,.0157,.0152,.0148,.0146,.0145,.0143,.0142,.0141,.0141,.0140,.0140,.0140,.0139,.0139,.0139,.0139,.0139,.01389,.01389,.01389,26*.01388/
# EPSILON FOR ELASTIC ANGULAR DISTRIBUTION
# EPSILON =1-YEPS
      DATA YEPS/40*1.0,.68056,.73101,.76161,.70664,.61270,.53797,.37888,.30604,.35505,.40830,.42979,.41826,.39140,.40794,.39986,.40963,.36006,.33951,.32037,.27671,.23985,.21859,.18948,.17666,.15292,.10180,.09358,.07880,.06538,.05301,.04608,.04117,.03833,.03532,.03188,.02561,.02374,.019986,.015005,.010925,.009845,.008442,.006348,.005446,.004667,.004028,.003554,.003186,.002530,.002096,.001783,.001549,.001228,.001016,.000859,.000749,.000661,.000590,.000486,.000411,3.53D-4,3.12D-4,2.78D-4,2.17D-4,1.76D-4,1.47D-4,1.26D-4,9.61D-5,7.68D-5,6.32D-5,5.32D-5,4.56D-5,3.97D-5,3.10D-5,2.30D-5,2.07D-5,1.74D-5,1.49D-5,1.07D-5,8.04D-6,6.28D-6,5.05D-6,3.47D-6,2.54D-6,1.94D-6,1.53D-6,1.24D-6,1.02D-6,7.33D-7,5.51D-7,4.30D-7,3.44D-7,2.82D-7,1.84D-7,1.30D-7,9.62D-8,7.42D-8,4.80D-8,3.35D-8,2.47D-8,1.89D-8,1.50D-8,1.21D-8,8.388D-9,6.133D-9,4.669D-9,3.666D-9,2.950D-9,1.858D-9,1.271D-9,9.21D-10,6.97D-10,4.37D-10,2.98D-10,2.16D-10,1.63D-10,1.28D-10,1.02D-10,7.00D-11,5.10D-11,3.80D-11,3.00D-11,2.40D-11/
#  VIBRATION V4 (RESONANCE ONLY) SCALED BY 1/E**3 ABOVE 50EV 
      DATA XVBV4/0.0783,4.00,5.00,6.00,7.00,8.00,9.00,10.0,15.0,20.0,50.0/           
      DATA YVBV4/0.0,0.0,0.05,0.35,1.06,1.40,1.26,0.97,0.07,.022,      1.D-3/        
#  VIBRATION V1 (RESONANCE ONLY) SCALED BY 1/E**3 ABOVE 50EV
      DATA XVBV1/0.1126,4.00,5.00,6.00,7.00,8.00,9.00,10.0,15.0,20.0,   50.0/                 
      DATA YVBV1/0.0,0.0,.016,.118,0.36,0.47,0.42,0.33,.023,.007,     3.D-4/    
#  VIBRATION V3 (RESONANCE ONLY) SCALED BY 1/E**3 ABOVE 50EV
      DATA XVBV3/0.1588,4.00,5.00,6.00,7.00,8.00,9.00,10.0,15.0,20.0,   50.0/         
      DATA YVBV3/0.0,0.0,0.15,1.05,3.19,4.20,3.78,2.90,0.20,.067,     3.D-3/         
#  VIBRATION HARMONIC 2(V3) SCALED BY 1/E ABOVE 50EV
      DATA XVIB5/0.3176,1.00,4.00,5.00,6.00,7.00,8.00,9.00,10.0,15.0,   20.0,50.0/             
      DATA YVIB5/0.0,.001,0.01,.031,0.23,0.67,0.87,0.79,0.60,.042,      .014,.0006/ 
# VIBRATION HARMONIC (3(V3) + ALL OTHER HARMONICS)
#  SCALED BY 1/E ABOVE 50 EV
      DATA XVIB6/0.4764,1.00,4.00,5.00,6.00,7.00,8.00,9.00,10.0,15.0,   20.0,50.0/          
      DATA YVIB6/0.0,.0009,.045,.117,.774,2.32,3.06,2.75,2.12,.138,     .037,.0018/ 
#
#  DISSOCATIVE IONISATION :
#  WEIGHTED AVERAGE OF SIEGLAFF AND NISHIMURA FOR SINGLE IONISATION AND
#  DOUBLE IONISATION.
#  FOR DOUBLE IONISATION WITH BREAKUP :  BRUCE ET AL CPL 190(1992)285 
#  NB.  (USED NISHIMURA ONLY BELOW 30EV)
#
# CF3 +
      DATA XCF3/15.7,16.0,17.0,18.0,19.0,20.0,22.0,24.0,26.0,28.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,                120.,140.,160.,200.,250.,300.,400.,500.,600.,800.,         1000.,1250.,1500.,1750.,2000.,2500.,3000./
      DATA YCF3/0.0,.032,.075,.128,.191,.276,.448,.610,.866,1.08,      1.26,1.72,2.05,2.35,2.62,2.94,3.13,3.24,3.32,3.35,              3.38,3.34,3.27,3.17,3.00,2.81,2.54,2.28,2.09,1.77,1.56,1.32,1.15,1.05,.937,.804,.692/
# CF2+
      DATA XCF2/21.47,24.0,26.0,28.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,                120.,140.,160.,200.,250.,300.,400.,500.,600.,800.,         1000.,1250.,1500.,1750.,2000.,2500.,3000./
      DATA YCF2/0.00,.003,.010,.032,.060,.131,.148,.162,.192,.221,.234,.243,.256,.263,.266,.260,.257,.240,.233,.212,.186,.169,.152,.131,.113,.0961,.0834,.0763,.0681,.0585,.0503/
# CF+ 
      DATA XCF1/29.14,                  30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,                120.,140.,160.,200.,250.,300.,400.,500.,600.,800.,         1000.,1250.,1500.,1750.,2000.,2500.,3000./
      DATA YCF1/0.00,                  .0024,.0145,.0583,.107,.156,.185,.226,.239,.238,.266,.274,.259,.261,.234,.227,.186,.146,.122,.113,.0909,.0820,.0695,.0603,.0552,.0493,.0423,.0364/
# DATA CF3 2+
      DATA XC'%.4f' %1.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,120.,140.,160.,200.,250.,300.,400.,500.,600.,800.,1000.,1250.,1500.,1750.,2000.,2500.,3000./
      DATA YCF32/0.00,.0053,.0083,.0104,.0135,.0154,.0164,.0187,.0208,.0198,.0208,.0198,.0187,.0167,.0135,.0114,.0101,.0079,.0065,.0055,.0048,.0044,.0039,.0033,.0029/
# C+ 
      DATA XC'%.3f' % 4.77,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,120.,140.,160.,200.,250.,300.,400.,500.,600.,800.,         1000.,1250.,1500.,1750.,2000.,2500.,3000./
      DATA YCF0/0.0,.0005,.0093,.0426,.0884,.134,.172,.193,.207,.228,.245,.246,.249,.236,.222,.191,.166,.144,.134,.104,.0895,.0759,.0658,.0602,.0538,.0462,.0397/ 
# F+ 
      DATA XC0F/34.5,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,120.,140.,160.,200.,250.,300.,400.,500.,600.,800.,         1000.,1250.,1500.,1750.,2000.,2500.,3000./
      DATA YC0F/0.0,.0019,.0085,.0271,.0561,.1051,.154,.1937,.212,.289,.363,.408,.439,.461,.440,.378,.316,.264,.227,.174,.170,.144,.125,.114,.102,.0874,.0753/   
# CF2 2+
      DATA XC'%.4f' %2.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,120.,140.,160.,200.,250.,300.,400.,500.,600.,800.,1000.,1250.,1500.,1750.,2000.,2500.,3000./
      DATA YCF22/0.0,.0002,.0033,.0095,.0194,.0287,.0348,.0409,.0483,.0521,.0522,.0517,.0467,.0458,.0367,.0303,.0280,.0218,.0164,.0139,.0120,.0110,.0098,.0084,.0073/ 
# ION PAIRS:
#   (C+ , F+)
      DATA XCF/63.0,70.0,80.0,90.0,100.,120.,140.,160.,200.,250.,300.,400.,500.,600.,800.,1000.,1250.,1500.,1750.,2000.,2500.,3000./
      DATA YCF/0.0,.002,.009,.020,.025,.038,.048,.056,.062,.059,.068,.049,.043,.036,.025,.019,.016,.014,.012,.011,.0096,.0082/
#   (CF+ , F+)
      DATA XCFF/43.0,50.0,60.0,70.0,80.0,90.0,100.,120.,140.,160.,200.,250.,300.,400.,500.,600.,800.,1000.,1250.,1500.,1750.,2000.,2500.,3000./
      DATA YCFF/0.0,.001,.009,.028,.049,.077,.084,.111,.125,.136,.139,.126,.133,.109,.095,.078,.059,.040,.034,.030,.027,.024,.021,.018/
#   (CF2 + , F+)
      DATA XCF2F/40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,120.,140.,160.,200.,250.,300.,400.,500.,600.,800.,1000.,1250.,1500.,1750.,2000.,2500.,3000./
      DATA YCF2F/0.0,.001,.004,.013,.024,.034,.043,.046,.053,.054,.057,.056,.049,.050,.042,.036,.030,.023,.015,.013,.011,.0104,.0093,.0080,.0069/
#   (CF3 + , F+)
      DATA XCF3F/36.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,120.,140.,160.,200.,250.,300.,400.,500.,600.,800.,1000.,1250.,1500.,1750.,2000.,2500.,3000./
      DATA YCF3F/0.0,.001,.003,.006,.014,.023,.030,.037,.038,.042,.041,.044,.045,.040,.038,.033,.028,.023,.018,.012,.0105,.0091,.0083,.0074,.0064,.0055/    
# CARBON K-SHELL IONISATION X-SECTION
      DATA XKSHC/285.,298.,307.,316.,325.,335.,345.,365.,398.,422.,447.,473.,501.,531.,613.,668.,708.,750.,817.,917.,1000.,1122.,1296.,1496.,1679.,1884.,2054.,2238.,2512.,2985.,3981.,5012.,7079.,1.0D4,1.50D4,2.05D4,2.51'%.3f' %.07D4,4.10D4,5.01D4,6.13D4,7.08D4,8.18D4,1.0D5,1.54D5,2.05D5,2.99D5,4.10D5,5.01D5,6.13D5,7.08D5,8.18D5,1.0D6,1.25D6,1.5D6,2.05'%.3f' %.07D6,4.10D6,5.01D6,6.13D6,7.08D6,8.18D6,1.0D7,1.5D7,2.05'%.3f' %.07D7,4.10D7,5.01D7,6.13D7,7.08D7,8.18D7,1.0D8,1.5D8,2.05'%.3f' %.07D8,4.10D8,5.01D8,6.13D8,7.08D8,8.18D8,1.0D9/
      DATA YKSHC/0.00,1.66D-4,3.48D-4,5.25D-4,6.96D-4,8.63D-4,1.02D-3,1.33D-3,1.75D-3,2.01D-3,2.24D-3,2.46D-3,2.66D-3,2.84D-3,3.21D-3,3.38D-3,3.47D-3,3.55D-3,3.65D-3,3.72D-3,3.75D-3,3.74D-3,3.68D-3,3.57D-3,3.45D-3,3.31D-3,3.19D-3,3.07D-3,2.91D-3,2.66D-3,2.25D-3,1.95D-3,1.55D-3,1.21D-3,8.97D-4,7.07D-4,6.07D-4,5.21D-4,4.21D-4,3.63D-4,3.14D-4,2.84D-4,2.57D-4,2.25D-4,1.74D-4,1.50D-4,1.28D-4,1.15D-4,1.09D-4,1.05D-4,1.03D-4,1.02D-4,1.01D-4,1.005D-4,1.01D-4,1.03D-4,1.07D-4,1.11D-4,1.14D-4,1.17D-4,1.20D-4,1.22D-4,1.25D-4,1.32D-4,1.38D-4,1.45D-4,1.50D-4,1.54D-4,1.58D-4,1.60D-4,1.63D-4,1.67D-4,1.74D-4,1.80D-4,1.87D-4,1.92D-4,1.96D-4,2.00D-4,2.02D-4,2.05D-4,2.09D-4/
# FLUORINE K-SHELL IONISATION X-SECTION
      DATA XKSHF/685.4,705.,726.,747.,770.,792.,816.,840.,865.,890.,916.,944.,1000.,1090.,1188.,1296.,1496.,1679.,1884.,2054.,2238.,2512.,2985.,3758.,4467.,5158.,5957.,7079.,1.0D4,1.26D4,1.50D4,2.05D4,2.51'%.3f' %.07D4,4.10D4,5.01D4,6.13D4,7.08D4,8.18D4,1.0D5,1.50D5,2.05D5,2.99D5,4.10D5,5.01D5,6.13D5,7.08D5,8.18D5,1.00D6,1.26D6,1.50D6,2.05'%.3f' %.07D6,4.10D6,5.01D6,6.13D6,7.08D6,8.18D6,1.00D7,1.26D7,1.50D7,2.05'%.3f' %.07D7,4.10D7,5.01D7,6.13D7,7.08D7,8.18D7,1.00D8,1.26D8,1.50D8,2.05'%.3f' %.07D8,4.10D8,5.01D8,6.13D8,7.08D8,8.18D8,1.00D9/
      DATA YKSHF/0.00,3.39D-5,6.77D-5,1.00D-4,1.32D-4,1.63D-4,1.92D-4,2.21D-4,2.48D-4,2.75D-4,3.00D-4,3.25D-4,3.71D-4,4.33D-4,4.87D-4,5.34D-4,5.96D-4,6.32D-4,6.57D-4,6.69D-4,6.77D-4,6.79D-4,6.68D-4,6.33D-4,5.97D-4,5.62D-4,5.25D-4,4.80D-4,3.93D-4,3.41D-4,3.04D-4,2.45D-4,2.13D-4,1.85D-4,1.51D-4,1.31D-4,1.14D-4,1.04D-4,9.46D-5,8.32D-5,6.58D-5,5.60D-5,4.80D-5,4.35D-5,4.15D-5,4.00D-5,3.93D-5,3.89D-5,3.85D-5,3.86D-5,3.89D-5,3.98D-5,4.17D-5,4.33D-5,4.45D-5,4.58D-5,4.68D-5,4.78D-5,4.92D-5,5.09D-5,5.21D-5,5.45D-5,5.75D-5,5.96D-5,6.12D-5,6.27D-5,6.38D-5,6.49D-5,6.64D-5,6.82D-5,6.95D-5,7.19D-5,7.50D-5,7.72D-5,7.88D-5,8.03D-5,8.14D-5,8.25D-5,8.40D-5/
# ATTACHMENT              
      DATA XATT/4.00,4.10,5.00,6.00,7.00,8.00,9.00,10.0,11.0,           12.0,100./                                                        
      DATA YATT/.0,.00001,.00087,.0062,.0125,.0134,.0047,.0009,.0004,   .00001,.0000001/                                                  
#
#  NEUTRAL DISSOCIATION 
#      DIPOLE NEUTRAL DISSOCIATION GIVEN ANALYTICALLY
#      NON-DIPOLE  NEUTRAL DISSOCIATION :  
      DATA XTR1/11.5,12.5,14.0,15.0,16.0,17.0,19.0,21.0,24.0,27.0,31.0,34.0/
      DATA YTR1/0.00,.005,.017,.026,.029,.031,.035,.035,.031,.026,.019,.015/
      DATA XTR2/12.5,14.0,15.0,16.0,17.0,19.0,21.0,24.0,27.0,31.0,34.0/
      DATA YTR2/0.00,.030,.056,.064,.068,.075,.077,.068,.057,.042,.033/
      DATA XTR3/14.0,15.0,16.0,17.0,19.0,21.0,24.0,27.0,31.0,34.0,39.0/
      DATA YTR3/0.00,.087,.180,.210,.237,.250,.250,.237,.187,.145,.107/
# BREMSTRAHLUNG X-SECTION WITH CUT OFF      
      DATA Z6T/298.,178.,85.2,47.5,26.3,12.2,7.06,4.45,3.06,2.82,2.89,2.99,3.08,3.13,3.18,3.25,3.31,3.39,3.44,3.49,3.52,3.54,3.55,3.57,3.57/
      DATA Z9T/573.,358.,179.,101.6,57.3,26.5,15.4,9.63,6.52,5.92,6.01,6.18,6.35,6.43,6.52,6.65,6.75,6.87,6.95,7.02,7.07,7.10,7.12,7.13,7.14/
      DATA EBRM/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,4.E7,5.E7,6.E7,8.E7,1.E8/
# ----------------------------------------------------------------------
# 2015: UPDATE INCLUDES NEW OSCILATOR STRENGTH TO EXCITATIONS WHICH
#       ARE ALL DISSOCIATIVE. INTRODUCED ALL DISSOCIATIVE IONISATION 
#       CHANNELS FROM THE 3 GROUPS:  LINDSAY , NISHIMURA AND BONHAM
#       USED WEIGHTED AVERAGE TO GET CONSISTENT COUNTING AND GROSS 
#       IONISATIONS.
# 
# 2012: UPDATE INCLUDES CARBON AND FLUORINE K-SHELL IONISATION X-SECS.     
#   NEW ANALYSIS UPDATED TO MARCH  2008
#   ALLOWS SUPERELASTIC SCATTERING TO V2,V4,V1 AND V3 VIBRATIONAL LEVELS
#   BORN ANGULAR DISTRIBUTION FOR  V4 AND V3 VIBRATIONAL LEVELS
#   INCLUDED NEW IONISATION X-SECTIONS BY NISHIMURA AND READJUSTED
#   DISSOCIATION X-SECTION TO FIT TOWNS# end MEASUREMENTS.
#   ELASTIC X-SECTION BELOW 0.6 EV ASSUMED ISOTROPIC SINCE NO ACCURATE 
#   DATA EXIST ON ELASTIC SCATTERING AT THE RAMSAUER MINIMUM.
#   THE ELASTIC X-SECTION BETWEEN 0.0 AND 0.6 EV IS NOT SENSITIVE
#   ENOUGH TO DRIFT AND DIFFUSION TO ACCURATELY PREDICT THE 
#   POSITION OF THE RAMSAUER MINIMUM. THE ABSOLUTE VALUE OF THE ELASTIC
#   X-SECTION BELOW THE RAMSAUER MINIMUM ( LESS THAN 0.18 EV) SEEMS TO 
#   BE LOWER THAN PREDICTIONS BY MANN AND LINDER OR FIELD ET AL.  
#    THE TEMPERATURE DEP# endENCE OF THE LOW FIELD MOBILITY CF GEE AND 
#   FREEMAN WHICH IS REPRODUCED BY THIS X-SECTION SET SEEMS ALSO TO 
#   EXCLUDE HIGHER ELASTIC X-SECTIONS IN THE REGION BETWEEN 0.02 AND 
#   0.1 EV.
#   THE DATA BASE NOW FITS NAKAMURAS DRIFT VELOCITY IN CF4 AND CF4 ARGON
#   MIXTURES TO WITHIN EXPERIMENTAL ERRORS . NAKAMURAS DATA IS MUCH MORE 
#   ACCURATE THAN HUNTERS DATA SO WE REJECT HUNTERS DATA IN THE NEW 
#   ANALYSIS.
#   THE TOWNS# end IONISATION AND ATTACHMENT RATES AGREE WELL WITH THE 
#   PUBLISHED DATA .
# ---------------------------------------------------------------
      if(NANISO == 0):
 :
       NAME=' CF4 ISOTROPIC     2015  '
      else:
       NAME=' CF4 ANISOTROPIC   2015  '
      # endif 
#--------------------------------------------------------------------
#      
      EMASS2=1021997.804
      API=numpy.arccos(-1.00)
      A0=0.52917720859D-8
      RY=13.60569193
      BBCONST=16.0*API*A0*A0*RY*RY/EMASS2
#
# BORN BETHE VALUES FOR IONISATION
      CONST=1.873884D-20
      AM2=9.50
      C=100.9
#
      NC'%.3f' % 7
      NC'%.3f' % 1
      NCF1=28
      NCF32=25
      NCF0=27
      NC0F=27
      NCF22=25
      NCF=22
      NCFF=24
      NCF2F=25
      NCF3F=26
#
      NION=12
      NATT=1
      NIN=46
      NNULL=0
      IONMODEL=0  
#
# ARRAY SIZE
      NASIZE=20000
#
      NBREM=25
      DO 3 J=1,NIN  
      IZBR[J]=0
    3 CONTINUE     
      IZBR(47)=6
      IZBR(48)=9
c
      DO 1 J=1,6
    1 KEL[J]=NANISO
# ASSUME CAPITELLI LONGO TYPE OF ANGULAR DISTRIBUTION FOR 
#  ALL VIBRATIONAL LEVELS AND THE SUM OF HIGHER HARMONICS 
      DO 2 J=1,10
    2 KIN[J]=1
# ANGULAR DISTRIBUTION FOR DISS.EXCITATION IS GIVEN BY OKHRIMOVSKKY
      DO 4 J=11,NIN
    4 KIN[J]=NANISO  
# RATIO OF MOMENTUM TRANSFER TO TOTAL X-SEC FOR RESONANCE
# PART OF VIBRATIONAL X-SECTIONS
      RAT=0.75
#
      NDATA=163                                                       
      NVBV4=11                                
      NVBV1=11                                                          
      NVBV3=11                                                          
      NVIB5=12                                                          
      NVIB6=12
      NATT1=11                                                         
      NTR1=12
      NTR2=11
      NTR3=11
      NKSHC=81
      NKSHF=79
#                                                          
      E[1]=0.0                                                          
      E(2)=2.0*EMASS/(88.0043*AMU)                                      
      E(3)=15.90
      E(4)=0.0
      E(5)=0.0                    
      E(6)=0.0
#
      EION[1]=15.7
      EION(2)=21.47
      EION(3)=29.14
      EION(4)=34.5
      EION(5)=34.77
      EION(6)=36.0
      EION(7)=40.0
      EION(8)=41.0
      EION(9)=43.0
      EION(10)=63.0 
      EION(11)=285.0
      EION(12)=685.4
#  OPAL BEATY IONISATION ENERGY SPLITTING 
      DO 6 J=1,10
    6 EOBY[J]=0.58*EION[J] 
# OPAL BEATY SPLITTING FACTOR FOR SHELLS
      EOBY(11)=210.0    
      EOBY(12)=510.0    
      DO 28 J=1,10
      LEGAS[J]=0  
   28 ISHELL[J]=0   
      LEGAS(11)=1   
      LEGAS(12)=2  
      ISHELL(11)=1 
      ISHELL(12)=1 
# SINGLE IONISATION DATA
      DO 30 J=1,5
      NC0[J]=0
      EC0[J]=0.0
      WKLM[J]=0.0
      EFL[J]=0.0
      NG1[J]=0
      EG1[J]=0.0
      NG2[J]=0
   30 EG2[J]=0.0
# DOUBLE IONISATION DATA
      DO 31 J=6,10
      NC0[J]=1.0
      EC0[J]=1.0
      WKLM[J]=0.0
      EFL[J]=0.0
      NG1[J]=0
      EG1[J]=0.0
      NG2[J]=0
   31 EG2[J]=0.0
# K SHELL DATA INCLUDING FLUORESCENCE
      NC0(11)=2
      EC0(11)=253.0
      WKLM(11)=0.0026
      EFL(11)=273.0
      NG1(11)=1
      EG1(11)=253.0
      NG2(11)=1
      EG2(11)=5.0
      NC0(12)=3
      EC0(12)=625.2
      WKLM(12)=0.010
      EFL(12)=668.
      NG1(12)=2
      EG1(12)=625.2
      NG2(12)=1
      EG2(12)=5.0
#
      DO 776 J=1,NION
      DO 777 I=1,NASIZE
      if(EG[I]:
 > EION[J]) :
       IOFFION[J]=I-1
       GO TO 776
      # endif
  777 CONTINUE
  776 CONTINUE
#
      EIN[1]=-0.0539
      EIN(2)=0.0539
      EIN(3)=-0.0783                                                    
      EIN(4)=0.0783 
      EIN(5)=-0.1126                                                    
      EIN(6)=0.1126
      EIN(7)=-0.1588
      EIN(8)=0.1588                                                     
      EIN(9)=0.3176                                                     
      EIN(10)=0.4764
      EIN(11)=11.5
      EIN(12)=11.63
      EIN(13)=11.88
      EIN(14)=12.13
      EIN(15)=12.38
      EIN(16)=12.50
      EIN(17)=12.63
      EIN(18)=12.88
      EIN(19)=13.13
      EIN(20)=13.38
      EIN(21)=13.63
      EIN(22)=13.88
      EIN(23)=14.00
      EIN(24)=14.13
      EIN(25)=14.38
      EIN(26)=14.63
      EIN(27)=14.88
      EIN(28)=15.13
      EIN(29)=15.38
      EIN(30)=15.63
      EIN(31)=15.88
      EIN(32)=16.13
      EIN(33)=16.38
      EIN(34)=16.63
      EIN(35)=16.88
      EIN(36)=17.13
      EIN(37)=17.38
      EIN(38)=17.63
      EIN(39)=17.88
      EIN(40)=18.13
      EIN(41)=18.38
      EIN(42)=18.63
      EIN(43)=18.88
      EIN(44)=19.13
      EIN(45)=19.38
      EIN(46)=19.63
      EIN(47)=0.0
      EIN(48)=0.0
# OFFSET ENERGY FOR DISSOCIATION ANGULAR DISTRIBUTION
      DO 5 NL=11,46
      DO 651 I=1,NASIZE
      if(EG[I]:
 > abs(EIN(NL))) :
       IOFFN(NL)=I-1
       GO TO 5
      # endif
  651 CONTINUE
    5 CONTINUE
#***********************************************************************
# ENTER PENNING TRANSFER FRACTION FOR EACH LEVEL
# ONLY DISSOCIATION X-SECTION (LEVEL 11) HAS ENOUGH ENERGY TO GIVE 
#  POSSIBLE PENNING TRANSFER
      DO 7 K=1,46
      DO 7 L=1,3
    7 PENFRA[L,K]=0.0  
# PENNING TRANSFER FRACTION FOR LEVEL 11
      PENFRA[1,K]=0.0
# PENNING TRANSFER DISTANCE IN MICRONS
      PENFRA[2,K]=1.0
# PENNING TRANSFER TIME IN PICOSECONDS
      PENFRA[3,K]=1.0
      if(IPEN == 0):
 GO TO 8 
      if(PENFRA[1,11] == 0.0):
 GO TO 8
      WRITE(6,999) NAME,EIN(11),PENFRA[1,11],PENFRA[2,11],PENFRA[3,11]
  999 print(' GAS = ',A15,' ENERGY LEVEL = ','%.4f' %,' EV.',/,' PENNING PROBABILITY = ','%.3f' % ,' ABS.LENGTH = ',F7.2,' DECAY TIME = ',F7.1,/)
    8 CONTINUE 
#*********************************************************************** 
      SCRPT[1]='                                                  '
      SCRPT(2)=' ELASTIC  ANISOTROPIC            CF4              '
      if(NANISO == 0):
 :
       SCRPT(2)=' ELASTIC  ISOTROPIC             CF4              '
      # endif
      SCRPT(3)=' ION  CF3 +                      ELOSS=   15.70   '
      SCRPT(4)=' ION  CF2 +                      ELOSS=   21.47   '
      SCRPT(5)=' ION  CF +                       ELOSS=   29.14   '
      SCRPT(6)=' ION  F +                        ELOSS=   34.5    '
      SCRPT(7)=' ION  C +                        ELOSS=   34.77   '
      SCRPT(8)=' DOUBLE ION    CF3 + , F +       ELOSS=   36.0    '
      SCRPT(9)=' DOUBLE ION    CF2 + , F +       ELOSS=   40.0    '
      SCRPT(10)=' IONS  CF3 ++ OR CF2 ++          ELOSS=   41.0    '
      SCRPT(11)=' DOUBLE ION    CF +  , F +       ELOSS=   43.0    '
      SCRPT(12)=' DOUBLE ION    C  +  , F +       ELOSS=   63.0    '
      SCRPT(13)=' IONISATION   CARBON K-SHELL     ELOSS=  285.0    '
      SCRPT(14)=' IONISATION FLUORINE K-SHELL     ELOSS=  685.4    '
      SCRPT(15)=' ATTACHMENT                                       '
      SCRPT(16)='                                                  '
      SCRPT(17)='                                                  '
      SCRPT(18)=' VIB  V2           ANISOTROPIC   ELOSS=   -0.0539 '
      SCRPT(19)=' VIB  V2           ANISOTROPIC   ELOSS=    0.0539 '
      SCRPT(20)=' VIB  V4           ANISOTROPIC   ELOSS=   -0.0783 '
      SCRPT(21)=' VIB  V4           ANISOTROPIC   ELOSS=    0.0783 '
      SCRPT(22)=' VIB  V1           ANISOTROPIC   ELOSS=   -0.1126 '
      SCRPT(23)=' VIB  V1           ANISOTROPIC   ELOSS=    0.1126 '
      SCRPT(24)=' VIB  V3           ANISOTROPIC   ELOSS=   -0.1588 '
      SCRPT(25)=' VIB  V3           ANISOTROPIC   ELOSS=    0.1588 '
      SCRPT(26)=' VIB 2V3           ANISOTROPIC   ELOSS=    0.3176 '
      SCRPT(27)=' VIB HARMONIC      ANISOTROPIC   ELOSS=    0.4764 '
      SCRPT(28)=' NEUTRAL DISS      NON-DIPOLE    ELOSS=   11.5    '
      SCRPT(29)=' NEUTRAL DISS DIPOLE F=0.000189  ELOSS=   11.63   '
      SCRPT(30)=' NEUTRAL DISS DIPOLE F=0.001085  ELOSS=   11.88   '
      SCRPT(31)=' NEUTRAL DISS DIPOLE F=0.004807  ELOSS=   12.13   '
      SCRPT(32)=' NEUTRAL DISS DIPOLE F=0.008819  ELOSS=   12.38   '
      SCRPT(33)=' NEUTRAL DISS      NON-DIPOLE    ELOSS=   12.50   '
      SCRPT(34)=' NEUTRAL DISS DIPOLE F=0.008918  ELOSS=   12.63   '
      SCRPT(35)=' NEUTRAL DISS DIPOLE F=0.008420  ELOSS=   12.88   '
      SCRPT(36)=' NEUTRAL DISS DIPOLE F=0.02531   ELOSS=   13.13   '
      SCRPT(37)=' NEUTRAL DISS DIPOLE F=0.09553   ELOSS=   13.38   '
      SCRPT(38)=' NEUTRAL DISS DIPOLE F=0.11193   ELOSS=   13.63   '
      SCRPT(39)=' NEUTRAL DISS DIPOLE F=0.10103   ELOSS=   13.88   '
      SCRPT(40)=' NEUTRAL DISS      NON-DIPOLE    ELOSS=   14.00   '
      SCRPT(41)=' NEUTRAL DISS DIPOLE F=0.06902   ELOSS=   14.13   '
      SCRPT(42)=' NEUTRAL DISS DIPOLE F=0.03968   ELOSS=   14.38   '
      SCRPT(43)=' NEUTRAL DISS DIPOLE F=0.02584   ELOSS=   14.63   '
      SCRPT(44)=' NEUTRAL DISS DIPOLE F=0.02071   ELOSS=   14.88   '
      SCRPT(45)=' NEUTRAL DISS DIPOLE F=0.03122   ELOSS=   15.13   '
      SCRPT(46)=' NEUTRAL DISS DIPOLE F=0.05580   ELOSS=   15.38   '
      SCRPT(47)=' NEUTRAL DISS DIPOLE F=0.10187   ELOSS=   15.63   '
      SCRPT(48)=' NEUTRAL DISS DIPOLE F=0.09427   ELOSS=   15.88   '
      SCRPT(49)=' NEUTRAL DISS DIPOLE F=0.05853   ELOSS=   16.13   '
      SCRPT(50)=' NEUTRAL DISS DIPOLE F=0.06002   ELOSS=   16.38   '
      SCRPT(51)=' NEUTRAL DISS DIPOLE F=0.05647   ELOSS=   16.63   '
      SCRPT(52)=' NEUTRAL DISS DIPOLE F=0.04885   ELOSS=   16.88   '
      SCRPT(53)=' NEUTRAL DISS DIPOLE F=0.04036   ELOSS=   17.13   '
      SCRPT(54)=' NEUTRAL DISS DIPOLE F=0.03298   ELOSS=   17.38   '
      SCRPT(55)=' NEUTRAL DISS DIPOLE F=0.02593   ELOSS=   17.63   '
      SCRPT(56)=' NEUTRAL DISS DIPOLE F=0.01802   ELOSS=   17.88   '
      SCRPT(57)=' NEUTRAL DISS DIPOLE F=0.01287   ELOSS=   18.13   '
      SCRPT(58)=' NEUTRAL DISS DIPOLE F=0.00830   ELOSS=   18.38   '
      SCRPT(59)=' NEUTRAL DISS DIPOLE F=0.00698   ELOSS=   18.63   '
      SCRPT(60)=' NEUTRAL DISS DIPOLE F=0.00581   ELOSS=   18.88   '
      SCRPT(61)=' NEUTRAL DISS DIPOLE F=0.00502   ELOSS=   19.13   '
      SCRPT(62)=' NEUTRAL DISS DIPOLE F=0.00398   ELOSS=   19.38   '
      SCRPT(63)=' NEUTRAL DISS DIPOLE F=0.00189   ELOSS=   19.63   '
      SCRPT(64)=' BREMSSTRAHLUNG FROM CARBON ATOM                  '
      SCRPT(65)=' BREMSSTRAHLUNG FROM FLUORINE ATOMS               '
#  VIBRATIONAL DEGENERACY
      DEGV4=3.0
      DEGV3=3.0
      DEGV2=2.0
      DEGV1=1.0  
# CALC VIB LEVEL POPULATIONS
      APOPV2=DEGV2*math.exp(EIN[1]/AKT)
      APOPV4=DEGV4*math.exp(EIN(3)/AKT)
      APOPV1=DEGV1*math.exp(EIN(5)/AKT)
      APOPV3=DEGV3*math.exp(EIN(7)/AKT)
      APOPGS=1.0
      APOPSUM=APOPGS+APOPV2+APOPV4+APOPV1+APOPV3
      APOPGS=1.0/APOPSUM
      APOPV2=APOPV2/APOPSUM
      APOPV4=APOPV4/APOPSUM
      APOPV1=APOPV1/APOPSUM
      APOPV3=APOPV3/APOPSUM
# RENORMALISE GROUND STATE TO ALLOW FOR EXCITATION X-SEC FROM
# EXCITED VIBRATIONAL STATES (EXACT APPROX IF THE HOT TRANSITIONS HAVE
# EQUAL X-SEC TO THE GROUND STATE TRANSITIONS)
# 
      APOPGS=1.0
#
#     EN=-ESTEP/2.0                                      
      DO 9000 I=1,NSTEP   
      EN=EG[I]                              
#     EN=EN+ESTEP                                
      GAMMA1=(EMASS2+2.00*EN)/EMASS2
      GAMMA2=GAMMA1*GAMMA1
      BETA=math.sqrt(1.00-1.00/GAMMA2)
      BETA2=BETA*BETA
#                       
      DO 10 J=2,NDATA                                                   
      if(EN <= XEN[J]:
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA                                                           
   20 A=(YELM[J]-YELM(J-1))/(XEN[J]-XEN(J-1))                         
      B=(XEN(J-1)*YELM[J]-XEN[J]*YELM(J-1))/(XEN(J-1)-XEN[J]) 
      QMOM=(A*EN+B)*1.D-16  
      A=(YELT[J]-YELT(J-1))/(XEN[J]-XEN(J-1))                         
      B=(XEN(J-1)*YELT[J]-XEN[J]*YELT(J-1))/(XEN(J-1)-XEN[J]) 
      QELA=(A*EN+B)*1.D-16
      A=(YEPS[J]-YEPS(J-1))/(XEN[J]-XEN(J-1))
      B=(XEN(J-1)*YEPS[J]-XEN[J]*YEPS(J-1))/(XEN(J-1)-XEN[J])
      PQ2=(A*EN+B)
# EPS CORRECTED FOR 1-EPS
      PQ2=1.0-PQ2
      PQ1=0.5+(QELA-QMOM)/QELA
      if(NANISO == 0):
 PEQEL(2,I)=0.5
      if(NANISO == 1):
 PEQEL(2,I)=PQ1
      if(NANISO == 2):
 PEQEL(2,I)=PQ2
      Q(2,I)=QELA
      if(NANISO == 0):
 Q(2,I)=QMOM
#  DISSOCIATIVE IONISATION
#  ION  =  CF3 +
      QION(1,I)=0.0
      PEQION(1,I)=0.5
      if(NANISO == 2):
 PEQION(1,I)=0.0                             
      if(EN <= EION[1]:
) GO TO 45
      if(EN > XCF3(NCF3):
) GO TO 43                                
      DO 41 J=2,NCF3                                                  
      if(EN <= XCF3[J]:
) GO TO 42                                       
   41 CONTINUE                                                          
      J=NCF3                                                           
   42 A=(YCF3[J]-YCF3(J-1))/(XCF3[J]-XCF3(J-1))                         
      B=(XCF3(J-1)*YCF3[J]-XCF3[J]*YCF3(J-1))/(XCF3(J-1)-XCF3[J])       
      QION(1,I)=(A*EN+B)*1.D-16
      GO TO 44
# USE BORN BETHE X-SECTION ABOVE XCF3(NCF3) EV
   43 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(1,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.7344
   44 CONTINUE
      if(EN <= (2.0*EION[1]:
)) GO TO 45
      PEQION(1,I)=PEQEL(2,(I-IOFFION[1]))     
#  ION = CF2 +
   45 QION(2,I)=0.0
      PEQION(2,I)=0.5
      if(NANISO == 2):
 PEQION(2,I)=0.0                             
      if(EN <= EION(2):
) GO TO 50
      if(EN > XCF2(NCF2):
) GO TO 48                                
      DO 46 J=2,NCF2                                                  
      if(EN <= XCF2[J]:
) GO TO 47                                       
   46 CONTINUE                                                          
      J=NCF2                                                           
   47 A=(YCF2[J]-YCF2(J-1))/(XCF2[J]-XCF2(J-1))                         
      B=(XCF2(J-1)*YCF2[J]-XCF2[J]*YCF2(J-1))/(XCF2(J-1)-XCF2[J])       
      QION(2,I)=(A*EN+B)*1.D-16
      GO TO 49
# USE BORN BETHE X-SECTION ABOVE XCF2(NCF2) EV
   48 QION(2,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.0534
   49 CONTINUE
      if(EN <= (2.0*EION(2):
)) GO TO 50
      PEQION(2,I)=PEQEL(2,(I-IOFFION(2)))     
#  ION = CF +
   50 QION(3,I)=0.0
      PEQION(3,I)=0.5
      if(NANISO == 2):
 PEQION(3,I)=0.0                             
      if(EN <= EION(3):
) GO TO 55
      if(EN > XCF1(NCF1):
) GO TO 53                                
      DO 51 J=2,NCF1                                                  
      if(EN <= XCF1[J]:
) GO TO 52                                       
   51 CONTINUE                                                          
      J=NCF1                                                           
   52 A=(YCF1[J]-YCF1(J-1))/(XCF1[J]-XCF1(J-1))                         
      B=(XCF1(J-1)*YCF1[J]-XCF1[J]*YCF1(J-1))/(XCF1(J-1)-XCF1[J])       
      QION(3,I)=(A*EN+B)*1.D-16
      GO TO 54
# USE BORN BETHE X-SECTION ABOVE XCF1(NCF1) EV
   53 QION(3,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.0386
   54 CONTINUE
      if(EN <= (2.0*EION(3):
)) GO TO 55
      PEQION(3,I)=PEQEL(2,(I-IOFFION(3)))     
#  ION = F +
   55 QION(4,I)=0.0
      PEQION(4,I)=0.5
      if(NANISO == 2):
 PEQION(4,I)=0.0                             
      if(EN <= EION(4):
) GO TO 60
      if(EN > XC0F(NC0F):
) GO TO 58                                
      DO 56 J=2,NC0F                                                  
      if(EN <= XC0F[J]:
) GO TO 57                                       
   56 CONTINUE                                                          
      J=NC0F                                                           
   57 A=(YC0F[J]-YC0F(J-1))/(XC0F[J]-XC0F(J-1))                         
      B=(XC0F(J-1)*YC0F[J]-XC0F[J]*YC0F(J-1))/(XC0F(J-1)-XC0F[J])       
      QION(4,I)=(A*EN+B)*1.D-16
      GO TO 59
# USE BORN BETHE X-SECTION ABOVE XC0F(NC0F) EV
   58 QION(4,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.0799
   59 CONTINUE
      if(EN <= (2.0*EION(4):
)) GO TO 60
      PEQION(4,I)=PEQEL(2,(I-IOFFION(4)))     
#  ION = C +
   60 QION(5,I)=0.0
      PEQION(5,I)=0.5
      if(NANISO == 2):
 PEQION(5,I)=0.0                             
      if(EN <= EION(5):
) GO TO 65
      if(EN > XCF0(NCF0):
) GO TO 63                                
      DO 61 J=2,NCF0                                                  
      if(EN <= XCF0[J]:
) GO TO 62                                       
   61 CONTINUE                                                          
      J=NCF0                                                           
   62 A=(YCF0[J]-YCF0(J-1))/(XCF0[J]-XCF0(J-1))                         
      B=(XCF0(J-1)*YCF0[J]-XCF0[J]*YCF0(J-1))/(XCF0(J-1)-XCF0[J])       
      QION(5,I)=(A*EN+B)*1.D-16
      GO TO 64
# USE BORN BETHE X-SECTION ABOVE XCF0(NCF0) EV
   63 QION(5,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.0422
   64 CONTINUE
      if(EN <= (2.0*EION(5):
)) GO TO 65
      PEQION(5,I)=PEQEL(2,(I-IOFFION(5)))     
#  DOUBLE IONS  CF3 +  AND F +
   65 QION(6,I)=0.0
      PEQION(6,I)=0.5
      if(NANISO == 2):
 PEQION(6,I)=0.0                             
      if(EN <= EION(6):
) GO TO 70 
      if(EN > XCF3F(NCF3F):
) GO TO 68                               
      DO 66 J=2,NCF3F                                                
      if(EN <= XCF3F[J]:
) GO TO 67                                    
   66 CONTINUE                                                          
      J=NCF3F                                                        
   67 A=(YCF3F[J]-YCF3F(J-1))/(XCF3F[J]-XCF3F(J-1))                     
      B=(XCF3F(J-1)*YCF3F[J]-XCF3F[J]*YCF3F(J-1))/(XCF3F(J-1)-XCF3F[J])
      QION(6,I)=(A*EN+B)*1.D-16
      GO TO 69
# USE BORN BETHE X-SECTION ABOVE XCF3F(NCF3F) EV
   68 QION(6,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.0058
   69 CONTINUE
      if(EN <= (2.0*EION(6):
)) GO TO 70
      PEQION(6,I)=PEQEL(2,(I-IOFFION(6)))     
#  DOUBLE IONS  CF2 +  AND F +
   70 QION(7,I)=0.0
      PEQION(7,I)=0.5
      if(NANISO == 2):
 PEQION(7,I)=0.0                             
      if(EN <= EION(7):
) GO TO 75 
      if(EN > XCF2F(NCF2F):
) GO TO 73                               
      DO 71 J=2,NCF2F                                                
      if(EN <= XCF2F[J]:
) GO TO 72                                    
   71 CONTINUE                                                          
      J=NCF2F                                                        
   72 A=(YCF2F[J]-YCF2F(J-1))/(XCF2F[J]-XCF2F(J-1))                     
      B=(XCF2F(J-1)*YCF2F[J]-XCF2F[J]*YCF2F(J-1))/(XCF2F(J-1)-XCF2F[J])
      QION(7,I)=(A*EN+B)*1.D-16
      GO TO 74
# USE BORN BETHE X-SECTION ABOVE XCF2F(NCF2F) EV
   73 QION(7,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.0073
   74 CONTINUE
      if(EN <= (2.0*EION(7):
)) GO TO 75
      PEQION(7,I)=PEQEL(2,(I-IOFFION(7)))     
#  DOUBLE CHARGED ION  CF3 ++
   75 QION(8,I)=0.0
      PEQION(8,I)=0.5
      if(NANISO == 2):
 PEQION(8,I)=0.0                             
      if(EN <= EION(8):
) GO TO 80 
      if(EN > XCF32(NCF32):
) GO TO 78                               
      DO 76 J=2,NCF32                                                
      if(EN <= XCF32[J]:
) GO TO 77                                    
   76 CONTINUE                                                          
      J=NCF32                                                        
   77 A=(YCF32[J]-YCF32(J-1))/(XCF32[J]-XCF32(J-1))                     
      B=(XCF32(J-1)*YCF32[J]-XCF32[J]*YCF32(J-1))/(XCF32(J-1)-XCF32[J])
      QION(8,I)=(A*EN+B)*1.D-16
      GO TO 79
# USE BORN BETHE X-SECTION ABOVE XCF32(NCF32) EV
   78 QION(8,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.0031
   79 CONTINUE
      if(EN <= (2.0*EION(8):
)) GO TO 80
      PEQION(8,I)=PEQEL(2,(I-IOFFION(8)))     
#  DOUBLE CHARGED ION  CF2 ++
#
#  ADD INTO CF3 ++
#                            
   80 if(EN <= XCF22[1]) GO TO 85 
      if(EN > XCF22(NCF22):
) GO TO 83                               
      DO 81 J=2,NCF22                                                
      if(EN <= XCF22[J]:
) GO TO 82                                    
   81 CONTINUE                                                          
      J=NCF22                                                        
   82 A=(YCF22[J]-YCF22(J-1))/(XCF22[J]-XCF22(J-1))                     
      B=(XCF22(J-1)*YCF22[J]-XCF22[J]*YCF22(J-1))/(XCF22(J-1)-XCF22[J])
      QION(8,I)=QION(8,I)+(A*EN+B)*1.D-16
      GO TO 85
# USE BORN BETHE X-SECTION ABOVE XCF22(NCF22) EV
   83 QION(8,I)=QION(8,I)+CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.0077  
#  DOUBLE IONS    CF +  AND F +
   85 QION(9,I)=0.0
      PEQION(9,I)=0.5
      if(NANISO == 2):
 PEQION(9,I)=0.0                             
      if(EN <= EION(9):
) GO TO 90 
      if(EN > XCFF(NCFF):
) GO TO 88                               
      DO 86 J=2,NCFF                                                
      if(EN <= XCFF[J]:
) GO TO 87                                    
   86 CONTINUE                                                          
      J=NCFF                                                       
   87 A=(YCFF[J]-YCFF(J-1))/(XCFF[J]-XCFF(J-1))                     
      B=(XCFF(J-1)*YCFF[J]-XCFF[J]*YCFF(J-1))/(XCFF(J-1)-XCFF[J])
      QION(9,I)=(A*EN+B)*1.D-16
      GO TO 89
# USE BORN BETHE X-SECTION ABOVE XCFF(NCFF) EV
   88 QION(9,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.0189
   89 CONTINUE
      if(EN <= (2.0*EION(9):
)) GO TO 90
      PEQION(9,I)=PEQEL(2,(I-IOFFION(9)))     
#  DOUBLE IONS    C +  AND F +
   90 QION(10,I)=0.0
      PEQION(10,I)=0.5
      if(NANISO == 2):
 PEQION(10,I)=0.0                             
      if(EN <= EION(10):
) GO TO 95 
      if(EN > XCF(NCF):
) GO TO 93                               
      DO 91 J=2,NCF                                                
      if(EN <= XCF[J]:
) GO TO 92                                    
   91 CONTINUE                                                          
      J=NCF                                                       
   92 A=(YCF[J]-YCF(J-1))/(XCF[J]-XCF(J-1))                     
      B=(XCF(J-1)*YCF[J]-XCF[J]*YCF(J-1))/(XCF(J-1)-XCF[J])
      QION(10,I)=(A*EN+B)*1.D-16
      GO TO 94
# USE BORN BETHE X-SECTION ABOVE XCF(NCF) EV
   93 QION(10,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.0087
   94 CONTINUE
      if(EN <= (2.0*EION(10):
)) GO TO 95
      PEQION(10,I)=PEQEL(2,(I-IOFFION(10)))     
# CARBON K-SHELL IONISATION
   95 QION(11,I)=0.0
      PEQION(11,I)=0.5
      if(NANISO == 2):
 PEQION(11,I)=0.0                             
      if(EN <= EION(11):
) GO TO 135
      DO 130 J=2,NKSHC                                                  
      if(EN <= XKSHC[J]:
) GO TO 131                                      
  130 CONTINUE                                                          
      J=NKSHC                                                           
  131 A=(YKSHC[J]-YKSHC(J-1))/(XKSHC[J]-XKSHC(J-1))                  
      B=(XKSHC(J-1)*YKSHC[J]-XKSHC[J]*YKSHC(J-1))/(XKSHC(J-1)-XKSHC[J])
      QION(11,I)=(A*EN+B)*1.D-16
      if(EN <= (2.0*EION(11):
)) GO TO 135
      PEQION(11,I)=PEQEL(2,(I-IOFFION(11)))  
# FLUORINE K-SHELL IONISATION                          
  135 QION(12,I)=0.0
      PEQION(12,I)=0.5
      if(NANISO == 2):
 PEQION(12,I)=0.0                             
      if(EN <= EION(12):
) GO TO 145
      DO 140 J=2,NKSHF                                                  
      if(EN <= XKSHF[J]:
) GO TO 141                                      
  140 CONTINUE                                                          
      J=NKSHF                                                           
  141 A=(YKSHF[J]-YKSHF(J-1))/(XKSHF[J]-XKSHF(J-1))                  
      B=(XKSHF(J-1)*YKSHF[J]-XKSHF[J]*YKSHF(J-1))/(XKSHF(J-1)-XKSHF[J])
# FACTOR OF 4 FROM NUMBER OF FLUORINE ATOMS IN MOLECULE
      QION(12,I)=4.0*(A*EN+B)*1.D-16
      if(EN <= (2.0*EION(12):
)) GO TO 145
      PEQION(12,I)=PEQEL(2,(I-IOFFION(12)))
#    
# ATTACHMENT                                   
  145 Q(4,I)=0.0                                                        
      if(EN <= XATT[1]:
) GO TO 250                                       
      if(EN > XATT(NATT1):
) GO TO 250                                   
      DO 210 J=2,NATT1                                                  
      if(EN <= XATT[J]:
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NATT1                                                           
  220 A=(YATT[J]-YATT(J-1))/(XATT[J]-XATT(J-1))                         
      B=(XATT(J-1)*YATT[J]-XATT[J]*YATT(J-1))/(XATT(J-1)-XATT[J])       
      Q(4,I)=(A*EN+B)*1.D-16  
#                                           
  250 Q(5,I)=0.0                                                        
      Q(6,I)=0.0
# SCALE FACTOR FOR VIBRATIONAL DIPOLE V3 ABOVE 0.4EV
      VDSC=1.0
      if(EN > 0.4):
 :
       EPR=EN
       if(EN > 5.0):
 EPR=5.0
       VDSC=(14.4-EPR)/14.0
      # endif 
#           
# SUPERELASTIC OF VIBRATION V2 ISOTROPIC  BELOW 100EV                             
#
      QIN(1,I)=0.0 
      PEQIN(1,I)=0.5
      if(EN <= 0.0):
 GO TO 350
      EFAC=math.sqrt(1.0-(EIN[1]/EN))
      QIN(1,I)=0.007*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      QIN(1,I)=QIN(1,I)*APOPV2*1.D-16/DEGV2
      if(EN > 100.0):
 PEQIN(1,I)=PQ1
  350 CONTINUE
# VIBRATION V2 ISOTROPIC BELOW 100EV
      QIN(2,I)=0.0
      PEQIN(2,I)=0.5                                                   
      if(EN <= EIN(2):
) GO TO 400                                        
      EFAC=math.sqrt(1.0-(EIN(2)/EN))
      QIN(2,I)=0.007*math.log((1.0+EFAC)/(1.0-EFAC))/EN    
      QIN(2,I)=QIN(2,I)*APOPGS*1.D-16
      if(EN > 100.0):
 PEQIN(2,I)=PQ1
  400 CONTINUE                                                          
#           
# SUPERELASTIC OF VIBRATION V4 ISOTROPIC BELOW 100EV                              
#
      QIN(3,I)=0.0
      PEQIN(3,I)=0.5
      if(EN <= 0.0):
 GO TO 450
      if((EN-EIN(3):
) > XVBV4(NVBV4)) GO TO 424
      DO 410 J=2,NVBV4
      if((EN-EIN(3):
) <= XVBV4[J]) GO TO 420
  410 CONTINUE
      J=NVBV4
  420 A=(YVBV4[J]-YVBV4(J-1))/(XVBV4[J]-XVBV4(J-1))
      B=(XVBV4(J-1)*YVBV4[J]-XVBV4[J]*YVBV4(J-1))/(XVBV4(J-1)-XVBV4[J])
      QIN(3,I)=(EN-EIN(3))*(A*(EN-EIN(3))+B)/EN
      GO TO 425
  424 QIN(3,I)=YVBV4(NVBV4)*(XVBV4(NVBV4)/(EN*(EN-EIN(3)))**2)
  425 CONTINUE
      EFAC=math.sqrt(1.0-(EIN(3)/EN))
      QIN(3,I)=QIN(3,I)+0.0500*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      QIN(3,I)=QIN(3,I)*APOPV4*1.D-16/DEGV4
      if(EN > 100.0):
 PEQIN(3,I)=PQ1
  450 CONTINUE
# VIBRATION V4 ANISOTROPIC
      QIN(4,I)=0.0
      PEQIN(4,I)=0.5                                                   
      if(EN <= EIN(4):
) GO TO 500
      if(EN > XVBV4(NVBV4):
) GO TO 474                                
      DO 460 J=2,NVBV4                                                 
      if(EN <= XVBV4[J]:
) GO TO 470                                      
  460 CONTINUE                                                          
      J=NVBV4                                                          
  470 A=(YVBV4[J]-YVBV4(J-1))/(XVBV4[J]-XVBV4(J-1))                     
      B=(XVBV4(J-1)*YVBV4[J]-XVBV4[J]*YVBV4(J-1))/(XVBV4(J-1)-XVBV4[J])
      QIN(4,I)=A*EN+B
      GO TO 475
  474 QIN(4,I)=YVBV4(NVBV4)*(XVBV4(NVBV4)/EN)**3
  475 CONTINUE 
      EFAC=math.sqrt(1.0-(EIN(4)/EN))
      ADIP=0.0500*math.log((1.0+EFAC)/(1.0-EFAC))/EN    
      ELF=EN-EIN(4)
      FWD=math.log((EN+ELF)/(EN+ELF-2.0*math.sqrt(EN*ELF)))
      BCK=math.log((EN+ELF+2.0*math.sqrt(EN*ELF))/(EN+ELF))
# RATIO OF MT TO TOTAL X-SECT FOR RESONANCE PART = RAT
      XMT=((1.5-FWD/(FWD+BCK))*ADIP+RAT*QIN(4,I))*APOPGS*1.D-16
      QIN(4,I)=(QIN(4,I)+ADIP)*APOPGS*1.D-16
      if(EN <= 100.0):
 PEQIN(4,I)=0.5+(QIN(4,I)-XMT)/QIN(4,I)
      if(EN > 100.0):
 PEQIN(4,I)=PQ1
  500 CONTINUE                                                          
# SUPERELASTIC OF VIBRATION V1 ISOTROPIC BELOW 100EV
      QIN(5,I)=0.0
      PEQIN(5,I)=0.5                                                  
      if(EN <= 0.0):
 GO TO 550
      if((EN-EIN(5):
) > XVBV1(NVBV1)) GO TO 524                         
      DO 510 J=2,NVBV1                                                 
      if((EN-EIN(5):
) <= XVBV1[J]) GO TO 520                             
  510 CONTINUE                                                          
      J=NVBV1                                                          
  520 A=(YVBV1[J]-YVBV1(J-1))/(XVBV1[J]-XVBV1(J-1))                     
      B=(XVBV1(J-1)*YVBV1[J]-XVBV1[J]*YVBV1(J-1))/(XVBV1(J-1)-XVBV1[J])
      QIN(5,I)=(EN-EIN(5))*(A*(EN-EIN(5))+B)/EN
      GO TO 525
  524 QIN(5,I)=YVBV1(NVBV1)*(XVBV1(NVBV1)/(EN*(EN-EIN(5)))**2)
  525 CONTINUE 
      EFAC=math.sqrt(1.0-(EIN(5)/EN))
      QIN(5,I)=QIN(5,I)+0.0224*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      QIN(5,I)=QIN(5,I)*APOPV1*1.D-16/DEGV1  
      if(EN > 100.0):
 PEQIN(5,I)=PQ1
  550 CONTINUE                                                          
#  VIBRATION V1  ISOTROPIC BELOW 100EV
      QIN(6,I)=0.0        
      PEQIN(6,I)=0.5                          
      if(EN <= EIN(6):
) GO TO 600   
      if(EN > XVBV1(NVBV1):
) GO TO 574                                
      DO 560 J=2,NVBV1                                                 
      if(EN <= XVBV1[J]:
) GO TO 570                                      
  560 CONTINUE                                                          
      J=NVBV1                                                          
  570 A=(YVBV1[J]-YVBV1(J-1))/(XVBV1[J]-XVBV1(J-1))                     
      B=(XVBV1(J-1)*YVBV1[J]-XVBV1[J]*YVBV1(J-1))/(XVBV1(J-1)-XVBV1[J]) 
      QIN(6,I)=A*EN+B
      GO TO 575
  574 QIN(6,I)=YVBV1(NVBV1)*(XVBV1(NVBV1)/EN)**3
  575 CONTINUE
      EFAC=math.sqrt(1.0-(EIN(6)/EN))
      QIN(6,I)=QIN(6,I)+0.0224*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      QIN(6,I)=QIN(6,I)*APOPGS*1.D-16
      if(EN > 100.0):
 PEQIN(6,I)=PQ1
  600 CONTINUE
# SUPERELASTIC OF VIBRATION V3 ISOTROPIC BELOW 100EV
      QIN(7,I)=0.0
      PEQIN(7,I)=0.5
      if(EN <= 0.0):
 GO TO 650        
      if((EN-EIN(7):
) > XVBV3(NVBV3)) GO TO 624                        
      DO 610 J=2,NVBV3                                                 
      if((EN-EIN(7):
) <= XVBV3[J]) GO TO 620                             
  610 CONTINUE                                                          
      J=NVBV3                                                          
  620 A=(YVBV3[J]-YVBV3(J-1))/(XVBV3[J]-XVBV3(J-1))                     
      B=(XVBV3(J-1)*YVBV3[J]-XVBV3[J]*YVBV3(J-1))/(XVBV3(J-1)-XVBV3[J]) 
      QIN(7,I)=(EN-EIN(7))*(A*(EN-EIN(7))+B)/EN
      GO TO 625
  624 QIN(7,I)=YVBV3(NVBV3)*(XVBV3(NVBV3)/(EN*(EN-EIN(7)))**2)
  625 CONTINUE
      EFAC=math.sqrt(1.0-(EIN(7)/EN))
      QIN(7,I)=QIN(7,I)+VDSC*1.610*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      QIN(7,I)=QIN(7,I)*APOPV3*1.D-16/DEGV3
      if(EN > 100.0):
 PEQIN(7,I)=PQ1
  650 CONTINUE                    
# VIBRATION V3 ANISOTROPIC
      QIN(8,I)=0.0
      PEQIN(8,I)=0.5
      if(EN <= EIN(8):
) GO TO 700   
      if(EN > XVBV3(NVBV3):
) GO TO 674                                 
      DO 660 J=2,NVBV3                                              
      if(EN <= XVBV3[J]:
) GO TO 670                                      
  660 CONTINUE                                                          
      J=NVBV3                                                          
  670 A=(YVBV3[J]-YVBV3(J-1))/(XVBV3[J]-XVBV3(J-1))                     
      B=(XVBV3(J-1)*YVBV3[J]-XVBV3[J]*YVBV3(J-1))/(XVBV3(J-1)-XVBV3[J]) 
      QIN(8,I)=A*EN+B
      GO TO 675
  674 QIN(8,I)=YVBV3(NVBV3)*(XVBV3(NVBV3)/EN)**3
  675 CONTINUE
      EFAC=math.sqrt(1.0-(EIN(8)/EN))
      ADIP=VDSC*1.610*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      ELF=EN-EIN(8)
      FWD=math.log((EN+ELF)/(EN+ELF-2.0*math.sqrt(EN*ELF)))
      BCK=math.log((EN+ELF+2.0*math.sqrt(EN*ELF))/(EN+ELF))
#   ASSUME RATIO MOM T./ TOT X-SECT FOR RESONANCE PART = RAT 
      XMT=((1.5-FWD/(FWD+BCK))*ADIP+RAT*QIN(8,I))*APOPGS*1.D-16
      QIN(8,I)=(QIN(8,I)+ADIP)*APOPGS*1.D-16
      if(EN <= 100.0):
 PEQIN(8,I)=0.5+(QIN(8,I)-XMT)/QIN(8,I)
      if(EN > 100.0):
 PEQIN(8,I)=PQ1
  700 CONTINUE                    
# VIBRATION HARMONIC 2V3
      QIN(9,I)=0.0
      PEQIN(9,I)=0.5
      if(EN <= EIN(9):
) GO TO 800 
      if(EN > XVIB5(NVIB5):
) GO TO 724                             
      DO 710 J=2,NVIB5                                                  
      if(EN <= XVIB5[J]:
) GO TO 720                                      
  710 CONTINUE                                                          
      J=NVIB5                                                           
  720 A=(YVIB5[J]-YVIB5(J-1))/(XVIB5[J]-XVIB5(J-1))                     
      B=(XVIB5(J-1)*YVIB5[J]-XVIB5[J]*YVIB5(J-1))/(XVIB5(J-1)-XVIB5[J]) 
      QIN(9,I)=(A*EN+B)
      GO TO 725
  724 QIN(9,I)=YVIB5(NVIB5)*(XVIB5(NVIB5)/EN)
  725 CONTINUE
      QIN(9,I)=QIN(9,I)*APOPGS*1.D-16
      if(EN <= 100.0):
 PEQIN(9,I)=0.5+(1.0-RAT)
      if(EN > 100.0):
 PEQIN(9,I)=PQ1                 
  800 CONTINUE                                                          
# VIBRATION HARMONIC 3V3 
      QIN(10,I)=0.0
      PEQIN(10,I)=0.5                                                 
      if(EN <= EIN(10):
) GO TO 900            
      if(EN > XVIB6(NVIB6):
) GO TO 824 
      DO 810 J=2,NVIB6                                                  
      if(EN <= XVIB6[J]:
) GO TO 820                                      
  810 CONTINUE                                                          
      J=NVIB6                                                           
  820 A=(YVIB6[J]-YVIB6(J-1))/(XVIB6[J]-XVIB6(J-1))                     
      B=(XVIB6(J-1)*YVIB6[J]-XVIB6[J]*YVIB6(J-1))/(XVIB6(J-1)-XVIB6[J]) 
      QIN(10,I)=(A*EN+B)
      GO TO 825
  824 QIN(10,I)=YVIB6(NVIB6)*(XVIB6(NVIB6)/EN)
  825 CONTINUE
      QIN(10,I)=QIN(10,I)*APOPGS*1.D-16
      if(EN <= 100.0):
 PEQIN(10,I)=0.5+(1.0-RAT)
      if(EN > 100.0):
 PEQIN(10,I)=PQ1                      
  900 CONTINUE                                                          
#                                                                       
# TRIPLET NEUTRAL DISSOCIATION ELOSS=11.5 EV
      QIN(11,I)=0.0  
      PEQIN(11,I)=0.0                       
      if(EN <= EIN(11):
) GO TO 903                
      if(EN > XTR1(NTR1):
) GO TO 9025                      
      DO 901 J=2,NTR1                                                 
      if(EN <= XTR1[J]:
) GO TO 902                                       
  901 CONTINUE                                                          
      J=NTR1                                                           
  902 A=(YTR1[J]-YTR1(J-1))/(XTR1[J]-XTR1(J-1))                         
      B=(XTR1(J-1)*YTR1[J]-XTR1[J]*YTR1(J-1))/(XTR1(J-1)-XTR1[J])       
      QIN(11,I)=(A*EN+B)*1.D-16
      GO TO 9026
 9025 QIN(11,I)=YTR1(NTR1)*(XTR1(NTR1)/EN)**2*1.D-16
 9026 if(EN <= (3.0*EIN(11))) GO TO 903
      PEQIN(11,I)=PEQEL(2,(I-IOFFN(11)))                              
# SINGLET NEUTRAL DISSOCIATION  ELOSS=11.63 EV     F=0.0001893
  903 QIN(12,I)=0.0
      PEQIN(12,I)=0.0
      if(EN <= EIN(12):
) GO TO 904
      QIN(12,I)=.0001893/(EIN(12)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(12)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(12)+E(3))*1.0107
      if(QIN(12,I):
 < 0.0) QIN(12,I)=0.0       
      if(EN <= (3.0*EIN(12):
)) GO TO 904
      PEQIN(12,I)=PEQEL(2,(I-IOFFN(12)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=11.88 EV     F=0.001085
  904 QIN(13,I)=0.0
      PEQIN(13,I)=0.0
      if(EN <= EIN(13):
) GO TO 905
      QIN(13,I)=0.001085/(EIN(13)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(13)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(13)+E(3))*1.0105
      if(QIN(13,I):
 < 0.0) QIN(13,I)=0.0       
      if(EN <= (3.0*EIN(13):
)) GO TO 905
      PEQIN(13,I)=PEQEL(2,(I-IOFFN(13)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=12.13 EV     F=0.004807
  905 QIN(14,I)=0.0
      PEQIN(14,I)=0.0
      if(EN <= EIN(14):
) GO TO 906
      QIN(14,I)=0.004807/(EIN(14)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(14)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(14)+E(3))*1.0103
      if(QIN(14,I):
 < 0.0) QIN(14,I)=0.0       
      if(EN <= (3.0*EIN(14):
)) GO TO 906
      PEQIN(14,I)=PEQEL(2,(I-IOFFN(14)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=12.38 EV     F=0.008819
  906 QIN(15,I)=0.0
      PEQIN(15,I)=0.0
      if(EN <= EIN(15):
) GO TO 907
      QIN(15,I)=0.008819/(EIN(15)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(15)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(15)+E(3))*1.0101
      if(QIN(15,I):
 < 0.0) QIN(15,I)=0.0       
      if(EN <= (3.0*EIN(15):
)) GO TO 907
      PEQIN(15,I)=PEQEL(2,(I-IOFFN(15)))
# TRIPLET NEUTRAL DISSOCIATION ELOSS=12.5 EV
  907 QIN(16,I)=0.0  
      PEQIN(16,I)=0.0                       
      if(EN <= EIN(16):
) GO TO 910                
      if(EN > XTR2(NTR2):
) GO TO 9095                      
      DO 908 J=2,NTR2                                                   
      if(EN <= XTR2[J]:
) GO TO 909                                       
  908 CONTINUE                                                          
      J=NTR2                                                            
  909 A=(YTR2[J]-YTR2(J-1))/(XTR2[J]-XTR2(J-1))                         
      B=(XTR2(J-1)*YTR2[J]-XTR2[J]*YTR2(J-1))/(XTR2(J-1)-XTR2[J])       
      QIN(16,I)=(A*EN+B)*1.D-16
      GO TO 9096
 9095 QIN(16,I)=YTR2(NTR2)*(XTR2(NTR2)/EN)**2*1.D-16
 9096 if(EN <= (3.0*EIN(16))) GO TO 910
      PEQIN(16,I)=PEQEL(2,(I-IOFFN(16)))                              
# SINGLET NEUTRAL DISSOCIATION   ELOSS=12.63 EV     F=0.008918
  910 QIN(17,I)=0.0
      PEQIN(17,I)=0.0
      if(EN <= EIN(17):
) GO TO 911
      QIN(17,I)=0.008918/(EIN(17)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(17)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(17)+E(3))*1.0099
      if(QIN(17,I):
 < 0.0) QIN(17,I)=0.0       
      if(EN <= (3.0*EIN(17):
)) GO TO 911
      PEQIN(17,I)=PEQEL(2,(I-IOFFN(17)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=12.88 EV     F=0.008420
  911 QIN(18,I)=0.0
      PEQIN(18,I)=0.0
      if(EN <= EIN(18):
) GO TO 912
      QIN(18,I)=0.008420/(EIN(18)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(18)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(18)+E(3))*1.0097
      if(QIN(18,I):
 < 0.0) QIN(18,I)=0.0       
      if(EN <= (3.0*EIN(18):
)) GO TO 912
      PEQIN(18,I)=PEQEL(2,(I-IOFFN(18)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=13.13 EV     F=0.02531 
  912 QIN(19,I)=0.0
      PEQIN(19,I)=0.0
      if(EN <= EIN(19):
) GO TO 913
      QIN(19,I)=0.02531/(EIN(19)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(19)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(19)+E(3))*1.0095
      if(QIN(19,I):
 < 0.0) QIN(19,I)=0.0       
      if(EN <= (3.0*EIN(19):
)) GO TO 913
      PEQIN(19,I)=PEQEL(2,(I-IOFFN(19)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=13.38 EV     F=0.09553 
  913 QIN(20,I)=0.0
      PEQIN(20,I)=0.0
      if(EN <= EIN(20):
) GO TO 914
      QIN(20,I)=0.09553/(EIN(20)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(20)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(20)+E(3))*1.0093
      if(QIN(20,I):
 < 0.0) QIN(20,I)=0.0       
      if(EN <= (3.0*EIN(20):
)) GO TO 914
      PEQIN(20,I)=PEQEL(2,(I-IOFFN(20)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=13.63 EV     F=0.11193 
  914 QIN(21,I)=0.0
      PEQIN(21,I)=0.0
      if(EN <= EIN(21):
) GO TO 915
      QIN(21,I)=0.11193/(EIN(21)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(21)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(21)+E(3))*1.0092
      if(QIN(21,I):
 < 0.0) QIN(21,I)=0.0       
      if(EN <= (3.0*EIN(21):
)) GO TO 915
      PEQIN(21,I)=PEQEL(2,(I-IOFFN(21)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=13.88 EV     F=0.10103 
  915 QIN(22,I)=0.0
      PEQIN(22,I)=0.0
      if(EN <= EIN(22):
) GO TO 916
      QIN(22,I)=0.10103/(EIN(22)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(22)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(22)+E(3))*1.0090
      if(QIN(22,I):
 < 0.0) QIN(22,I)=0.0       
      if(EN <= (3.0*EIN(22):
)) GO TO 916
      PEQIN(22,I)=PEQEL(2,(I-IOFFN(22)))
# TRIPLET NEUTRAL DISSOCIATION ELOSS=14.0 EV
  916 QIN(23,I)=0.0  
      PEQIN(23,I)=0.0                       
      if(EN <= EIN(23):
) GO TO 919                
      if(EN > XTR3(NTR3):
) GO TO 9185                      
      DO 917 J=2,NTR3                                                   
      if(EN <= XTR3[J]:
) GO TO 918                                       
  917 CONTINUE                                                          
      J=NTR3                                                            
  918 A=(YTR3[J]-YTR3(J-1))/(XTR3[J]-XTR3(J-1))                         
      B=(XTR3(J-1)*YTR3[J]-XTR3[J]*YTR3(J-1))/(XTR3(J-1)-XTR3[J])       
      QIN(23,I)=(A*EN+B)*1.D-16
      GO TO 9186
 9185 QIN(23,I)=YTR3(NTR3)*(XTR3(NTR3)/EN)**2*1.D-16
 9186 if(EN <= (3.0*EIN(23))) GO TO 919
      PEQIN(23,I)=PEQEL(2,(I-IOFFN(23)))                              
# SINGLET NEUTRAL DISSOCIATION   ELOSS=14.13 EV     F=0.06902 
  919 QIN(24,I)=0.0
      PEQIN(24,I)=0.0
      if(EN <= EIN(24):
) GO TO 920
      QIN(24,I)=0.06902/(EIN(24)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(24)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(24)+E(3))*1.0088
      if(QIN(24,I):
 < 0.0) QIN(24,I)=0.0       
      if(EN <= (3.0*EIN(24):
)) GO TO 920
      PEQIN(24,I)=PEQEL(2,(I-IOFFN(24)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=14.38 EV     F=0.03968 
  920 QIN(25,I)=0.0
      PEQIN(25,I)=0.0
      if(EN <= EIN(25):
) GO TO 921
      QIN(25,I)=0.03968/(EIN(25)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(25)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(25)+E(3))*1.0087
      if(QIN(25,I):
 < 0.0) QIN(25,I)=0.0       
      if(EN <= (3.0*EIN(25):
)) GO TO 921
      PEQIN(25,I)=PEQEL(2,(I-IOFFN(25)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=14.63 EV     F=0.02584 
  921 QIN(26,I)=0.0
      PEQIN(26,I)=0.0
      if(EN <= EIN(26):
) GO TO 922
      QIN(26,I)=0.02584/(EIN(26)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(26)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(26)+E(3))*1.0085
      if(QIN(26,I):
 < 0.0) QIN(26,I)=0.0       
      if(EN <= (3.0*EIN(26):
)) GO TO 922
      PEQIN(26,I)=PEQEL(2,(I-IOFFN(26)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=14.88 EV     F=0.02071 
  922 QIN(27,I)=0.0
      PEQIN(27,I)=0.0
      if(EN <= EIN(27):
) GO TO 923
      QIN(27,I)=0.02071/(EIN(27)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(27)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(27)+E(3))*1.0084
      if(QIN(27,I):
 < 0.0) QIN(27,I)=0.0       
      if(EN <= (3.0*EIN(27):
)) GO TO 923
      PEQIN(27,I)=PEQEL(2,(I-IOFFN(27)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=15.13 EV     F=0.03122 
  923 QIN(28,I)=0.0
      PEQIN(28,I)=0.0
      if(EN <= EIN(28):
) GO TO 924
      QIN(28,I)=0.03122/(EIN(28)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(28)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(28)+E(3))*1.0083
      if(QIN(28,I):
 < 0.0) QIN(28,I)=0.0       
      if(EN <= (3.0*EIN(28):
)) GO TO 924
      PEQIN(28,I)=PEQEL(2,(I-IOFFN(28)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=15.38 EV     F=0.05580 
  924 QIN(29,I)=0.0
      PEQIN(29,I)=0.0
      if(EN <= EIN(29):
) GO TO 925
      QIN(29,I)=0.05580/(EIN(29)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(29)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(29)+E(3))*1.0081
      if(QIN(29,I):
 < 0.0) QIN(29,I)=0.0       
      if(EN <= (3.0*EIN(29):
)) GO TO 925
      PEQIN(29,I)=PEQEL(2,(I-IOFFN(29)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=15.63 EV     F=0.10187 
  925 QIN(30,I)=0.0
      PEQIN(30,I)=0.0
      if(EN <= EIN(30):
) GO TO 926
      QIN(30,I)=0.10187/(EIN(30)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(30)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(30)+E(3))*1.0080
      if(QIN(30,I):
 < 0.0) QIN(30,I)=0.0       
      if(EN <= (3.0*EIN(30):
)) GO TO 926
      PEQIN(30,I)=PEQEL(2,(I-IOFFN(30)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=15.88 EV     F=0.09427 
  926 QIN(31,I)=0.0
      PEQIN(31,I)=0.0
      if(EN <= EIN(31):
) GO TO 927
      QIN(31,I)=0.09427/(EIN(31)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(31)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(31)+E(3))*1.0079
      if(QIN(31,I):
 < 0.0) QIN(31,I)=0.0       
      if(EN <= (3.0*EIN(31):
)) GO TO 927
      PEQIN(31,I)=PEQEL(2,(I-IOFFN(31)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=16.13 EV     F=0.05853 
  927 QIN(32,I)=0.0
      PEQIN(32,I)=0.0
      if(EN <= EIN(32):
) GO TO 928
      QIN(32,I)=0.05853/(EIN(32)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(32)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(32)+E(3))*1.0077
      if(QIN(32,I):
 < 0.0) QIN(32,I)=0.0       
      if(EN <= (3.0*EIN(32):
)) GO TO 928
      PEQIN(32,I)=PEQEL(2,(I-IOFFN(32)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=16.38 EV     F=0.06002 
  928 QIN(33,I)=0.0
      PEQIN(33,I)=0.0
      if(EN <= EIN(33):
) GO TO 929
      QIN(33,I)=0.06002/(EIN(33)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(33)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(33)+E(3))*1.0076
      if(QIN(33,I):
 < 0.0) QIN(33,I)=0.0       
      if(EN <= (3.0*EIN(33):
)) GO TO 929
      PEQIN(33,I)=PEQEL(2,(I-IOFFN(33)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=16.63 EV     F=0.05647 
  929 QIN(34,I)=0.0
      PEQIN(34,I)=0.0
      if(EN <= EIN(34):
) GO TO 930
      QIN(34,I)=0.05647/(EIN(34)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(34)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(34)+E(3))*1.0075
      if(QIN(34,I):
 < 0.0) QIN(34,I)=0.0       
      if(EN <= (3.0*EIN(34):
)) GO TO 930
      PEQIN(34,I)=PEQEL(2,(I-IOFFN(34)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=16.88 EV     F=0.04885 
  930 QIN(35,I)=0.0
      PEQIN(35,I)=0.0
      if(EN <= EIN(35):
) GO TO 931
      QIN(35,I)=0.04885/(EIN(35)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(35)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(35)+E(3))*1.0074
      if(QIN(35,I):
 < 0.0) QIN(35,I)=0.0       
      if(EN <= (3.0*EIN(35):
)) GO TO 931
      PEQIN(35,I)=PEQEL(2,(I-IOFFN(35)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=17.13 EV     F=0.04036 
  931 QIN(36,I)=0.0
      PEQIN(36,I)=0.0
      if(EN <= EIN(36):
) GO TO 932
      QIN(36,I)=0.04036/(EIN(36)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(36)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(36)+E(3))*1.0073
      if(QIN(36,I):
 < 0.0) QIN(36,I)=0.0       
      if(EN <= (3.0*EIN(36):
)) GO TO 932
      PEQIN(36,I)=PEQEL(2,(I-IOFFN(36)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=17.38 EV     F=0.03298 
  932 QIN(37,I)=0.0
      PEQIN(37,I)=0.0
      if(EN <= EIN(37):
) GO TO 933
      QIN(37,I)=0.03298/(EIN(37)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(37)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(37)+E(3))*1.0072
      if(QIN(37,I):
 < 0.0) QIN(37,I)=0.0       
      if(EN <= (3.0*EIN(37):
)) GO TO 933
      PEQIN(37,I)=PEQEL(2,(I-IOFFN(37)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=17.63 EV     F=0.02593 
  933 QIN(38,I)=0.0
      PEQIN(38,I)=0.0
      if(EN <= EIN(38):
) GO TO 934
      QIN(38,I)=0.02593/(EIN(38)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(38)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(38)+E(3))*1.0071
      if(QIN(38,I):
 < 0.0) QIN(38,I)=0.0       
      if(EN <= (3.0*EIN(38):
)) GO TO 934
      PEQIN(38,I)=PEQEL(2,(I-IOFFN(38)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=17.88 EV     F=0.01802 
  934 QIN(39,I)=0.0
      PEQIN(39,I)=0.0
      if(EN <= EIN(39):
) GO TO 935
      QIN(39,I)=0.01802/(EIN(39)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(39)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(39)+E(3))*1.0070
      if(QIN(39,I):
 < 0.0) QIN(39,I)=0.0       
      if(EN <= (3.0*EIN(39):
)) GO TO 935
      PEQIN(39,I)=PEQEL(2,(I-IOFFN(39)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=18.13 EV     F=0.01287 
  935 QIN(40,I)=0.0
      PEQIN(40,I)=0.0
      if(EN <= EIN(40):
) GO TO 936
      QIN(40,I)=0.01287/(EIN(40)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(40)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(40)+E(3))*1.0069
      if(QIN(40,I):
 < 0.0) QIN(40,I)=0.0       
      if(EN <= (3.0*EIN(40):
)) GO TO 936
      PEQIN(40,I)=PEQEL(2,(I-IOFFN(40)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=18.38 EV     F=0.00830 
  936 QIN(41,I)=0.0
      PEQIN(41,I)=0.0
      if(EN <= EIN(41):
) GO TO 937
      QIN(41,I)=0.00830/(EIN(41)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(41)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(41)+E(3))*1.0068
      if(QIN(41,I):
 < 0.0) QIN(41,I)=0.0       
      if(EN <= (3.0*EIN(41):
)) GO TO 937
      PEQIN(41,I)=PEQEL(2,(I-IOFFN(41)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=18.63 EV     F=0.00698 
  937 QIN(42,I)=0.0
      PEQIN(42,I)=0.0
      if(EN <= EIN(42):
) GO TO 938
      QIN(42,I)=0.00698/(EIN(42)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(42)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(42)+E(3))*1.0067
      if(QIN(42,I):
 < 0.0) QIN(42,I)=0.0       
      if(EN <= (3.0*EIN(42):
)) GO TO 938
      PEQIN(42,I)=PEQEL(2,(I-IOFFN(42)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=18.88 EV     F=0.00581 
  938 QIN(43,I)=0.0
      PEQIN(43,I)=0.0
      if(EN <= EIN(43):
) GO TO 939
      QIN(43,I)=0.00581/(EIN(43)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(43)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(43)+E(3))*1.0066
      if(QIN(43,I):
 < 0.0) QIN(43,I)=0.0       
      if(EN <= (3.0*EIN(43):
)) GO TO 939
      PEQIN(43,I)=PEQEL(2,(I-IOFFN(43)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=19.13 EV     F=0.00502 
  939 QIN(44,I)=0.0
      PEQIN(44,I)=0.0
      if(EN <= EIN(44):
) GO TO 940
      QIN(44,I)=0.00502/(EIN(44)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(44)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(44)+E(3))*1.0065
      if(QIN(44,I):
 < 0.0) QIN(44,I)=0.0       
      if(EN <= (3.0*EIN(44):
)) GO TO 940
      PEQIN(44,I)=PEQEL(2,(I-IOFFN(44)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=19.38 EV     F=0.00398 
  940 QIN(45,I)=0.0
      PEQIN(45,I)=0.0
      if(EN <= EIN(45):
) GO TO 941
      QIN(45,I)=0.00398/(EIN(45)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(45)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(45)+E(3))*1.0064
      if(QIN(45,I):
 < 0.0) QIN(45,I)=0.0       
      if(EN <= (3.0*EIN(45):
)) GO TO 941
      PEQIN(45,I)=PEQEL(2,(I-IOFFN(45)))
# SINGLET NEUTRAL DISSOCIATION   ELOSS=19.63 EV     F=0.00189 
  941 QIN(46,I)=0.0
      PEQIN(46,I)=0.0
      if(EN <= EIN(46):
) GO TO 942
      QIN(46,I)=0.00198/(EIN(46)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(46)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(46)+E(3))*1.0064
      if(QIN(46,I):
 < 0.0) QIN(46,I)=0.0       
      if(EN <= (3.0*EIN(46):
)) GO TO 942
      PEQIN(46,I)=PEQEL(2,(I-IOFFN(46)))
  942 CONTINUE
# LOAD BREMSSTRAHLUNG X-SECTIONS
      QIN(47,I)=0.0
      QIN(48,I)=0.0
      if(EN <= 1000.):
 GO TO 1000 
      DO 952 J=2,NBREM 
      if(EN <= EBRM[J]:
) GO TO 953
  952 CONTINUE
      J=NBREM
  953 A=(math.log(Z6T[J])-math.log(Z6T(J-1)))/(EBRM[J]-EBRM(J-1))
      B=(math.log(Z6T[J])*EBRM(J-1)-math.log(Z6T(J-1))*EBRM[J])/(EBRM(J-1)-EBRM[J])
      A1=(math.log(Z9T[J])-math.log(Z9T(J-1)))/(EBRM[J]-EBRM(J-1))
      B1=(math.log(Z9T[J])*EBRM(J-1)-math.log(Z9T(J-1))*EBRM[J])/(EBRM(J-1)-EBRM[J])
      QIN(47,I)=math.exp(A*EN+B)*1.D-24
      QIN(48,I)=math.exp(A1*EN+B1)*4.D-24 
 1000 CONTINUE                                              
#  
# COUNTING IONISATION SUM
      QIONSUM=0.0                    
      DO 1001 J=1,12
 1001 QIONSUM=QIONSUM+QION[J][I] 
      QSNGLSUM=0.0
      DO 1002 J=11,46
# SKIP TRIPLETS
      if(J == 11 or J == 16 or J == 23):
 GO TO 1002
      QSNGLSUM=QSNGLSUM+QIN[J][I]
 1002 CONTINUE
      QTRIPSUM=QIN(11,I)+QIN(16,I)+QIN(23,I) 
# VIBRATION SUM
      VSUM=0.0
      DO 1003 J=1,10 
 1003 VSUM=VSUM+QIN[J][I] 
# GROSS IONISATION SUM 
      QIONG=QIONSUM
      DO 1004 J=6,12
 1004 QIONG=QIONG+QION[J][I]
      
#      
      DISTOT=QSNGLSUM+QTRIPSUM+QIONSUM               
      Q(1,I)=Q(2,I)+Q(4,I)+VSUM+DISTOT
#     WRITE(6,444) EN,Q(1,I),Q(2,I),VSUM,QSNGLSUM,QTRIPSUM,QIONSUM,
#    /QIONG,DISTOT
# 444 print(' EN=',D12.6,' TOT=',D12.4,' ELAS=',D12.4,' VIB SUM=',
#    /D12.4,/,' NEUTRAL DIP. DISS=',D12.4,' TRIPLET DISS=',D12.4,/,
#    /' COUNT IONISATION=',D12.4,/' GROSS IONISATION=',D12.4,/,
#    /' DISTOT=',D12.4)
 9000 CONTINUE                                                          
#  SAVE COMPUTE TIME 
      if(EFINAL > 1000.):
 NIN=48
      DO 9001 J=11,46
      if(EFINAL <= EIN[J]:
) :
       NIN=J-1
       GO TO 9002
      # endif
 9001 CONTINUE   
 9002 CONTINUE                                     
      RETURN                                                            
      # end 
      def GAS2(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN) 
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000)
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]  
      DIMENSION XEN(117),YSEC(117),YEL(117),XEPS(217),YEPS(217),XENI(75),YENI(75),YENC(75),YEN1(75),XEN2(47),YEN2(47),XEN3(36),YEN3(36),XKSH(89),YKSH(89),XL1S(101),YL1S(101),XL2S(104),YL2S(104),XL3S(104),YL3S(104),X1S5(71),Y1S5(71),YEPS1(71),X1S4(79),Y1S4(79),YEPS2(79),X1S3(70),Y1S3(70),YEPS3(70),X1S2(70),Y1S2(70),YEPS4(70),X2P10(54),Y2P10(54),YEP2P10(54),X2P9(17),Y2P9(17),YEP2P9(17),X2P8(15),Y2P8(15),YEP2P8(15),X2P7(17),Y2P7(17),YEP2P7(17),X2P6(16),Y2P6(16),YEP2P6(16),X2P5(17),Y2P5(17),YEP2P5(17),X2P4(17),Y2P4(17),YEP2P4(17),X2P3(17),Y2P3(17),YEP2P3(17),X2P2(16),Y2P2(16),YEP2P2(16),X2P1(17),Y2P1(17),YEP2P1(17),X3D6(19),Y3D6(19),YEP3D6(19),X3D5(26),Y3D5(26),YEP3D5(26),X3D4P(20),Y3D4P(20),YEP3D4P(20),X3D4(23),Y3D4(23),YEP3D4(23),X3D3(20),Y3D3(20),YEP3D3(20),X3D1PP(19),Y3D1PP(19),YEP3D1PP(19),X3D1P(16),Y3D1P(16),YEP3D1P(16),X3S1PPPP(21),Y3S1PPPP(21),YEP3S1PPPP(21),X3S1PPP(16),Y3S1PPP(16),YEP3S1PPP(16),X3S1PP(21),Y3S1PP(21),YEP3S1PP(21),X2S5(19),Y2S5(19),YEP2S5(19),X2S3(19),Y2S3(19),YEP2S3(19),IOFFN(44),IOFFION(30)
      DIMENSION Z18T(25),EBRM(25)
      CHARACTER*50 SCRPT(300),SCRPTN(10)                          
      CHARACTER*25 NAME                
#  ENERGY                                       
      DATA XEN/1.00,1.20,1.50,1.70,2.00,2.50,3.00,4.00,5.00,6.00,7.00,8.00,9.00,10.0,11.0,12.0,13.0,14.0,15.0,16.0,18.0,20.0,25.0,30.0,40.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,200.,250.,300.,350.,400.,500.,600.,700.,800.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,10000.,15000.,20000.,40000.,60000.,80000.,1.D5,1.25D5,1.5D5,1.75D5,2.D5,2.5'%.3f' %.'%.3f' %.5D5,4.D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,2.0D6,2.5'%.3f' %.0'%.3f' %.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5'%.3f' %.0'%.3f' %.5D7,4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,1.0D8,1.25D8,1.5D8,1.75D8,2.0D8,2.5'%.3f' %.0'%.3f' %.5D8,4.0D8,4.5D8,5.0D8,6.0D8,7.0D8,8.0D8,9.0D8,1.0D9/
# ELASTIC MOMENTUM TRANSFER
      DATA YSEC/1.3913,1.66,2.05,2.33,2.70,3.43,4.20,5.70,7.60,9.60,11.5,13.1,14.7,16.2,16.8,16.6,15.9,15.1,14.2,13.3,11.5,10.0,7.75,6.25,4.45,3.50,2.80,2.25,2.00,1.70,1.50,1.22,1.00,0.78,0.64,0.55,0.48,0.43,.355,0.30,0.26,0.22,0.16,.095,.063,.033,.021,.0146,.0108,.00708,.00484,.00240,.00145,4.3D-4,2.1D-4,1.26D-4,8.64D-5,5.91D-5,4.35D-5,3.36D-5,2.70D-5,1.88D-5,1.41D-5,1.10D-5,8.94D-6,7.45D-6,6.34D-6,4.80D-6,3.80D-6,3.10D-6,2.59D-6,2.21D-6,1.56D-6,1.18D-6,9.32D-7,7.56D-7,5.30D-7,3.95D-7,3.07D-7,2.46D-7,2.02D-7,1.69D-7,1.24D-7,9.49D-8,7.52D-8,6.12D-8,5.08D-8,3.41D-8,2.46D-8,1.86D-8,1.46D-8,9.65D-9,6.88D-9,5.16D-9,4.01D-9,3.21D-9,2.62D-9,1.85D-9,1.37D-9,1.06D-9,8.37D-10,6.80D-10,4.37D-10,3.04D-10,2.23D-10,1.71D-10,1.10D-10,7.61D-11,5.59D-11,4.28D-11,3.38D-11,2.74D-11,1.90D-11,1.40D-11,1.07D-11,8.45D-12,6.84D-12/
# ELASTIC           
      DATA YEL/1.4945,1.80,2.25,2.63,3.20,4.15,5.10,7.05,8.90,11.1,13.4,15.8,18.1,20.3,21.9,23.0,23.4,23.5,23.2,22.2,19.4,17.0,13.3,11.0,8.44,7.16,6.28,5.78,5.25,4.89,4.50,3.95,3.51,3.03,2.70,2.48,2.30,2.10,1.90,1.72,1.58,1.47,1.27,0.98,.818,.620,.510,.434,.380,.313,.250,.180,.138,.076,.056,.045,.0378,.0322,.0284,.0257,.0237,.0209,.0190,.0177,.0168,.0160,.0155,.0146,.0140,.0136,.0132,.0130,.0126,.0123,.0121,.0120,.0119,.0118,.0117,.0117,.0116,.0116,.0116,.0116,.0116,.0116,.0115,.0115,.0115,.0115,27*.0115/
# EPSILON FOR ELASTIC ANGULAR DISTRIBUTION
      DATA XEPS/.0,.0001,.0002,.0003,.0004,.0006,.0008,.001,.0012,.0014,.0017,.002,.0025,.003,.004,.005,.006,.008,.010,.012,.014,.017,.020,.025,.030,.035,.040,.045,.050,.055,.060,.065,.070,.075,.080,.085,.090,.095,.100,.110,0.12,0.13,0.14,0.15,0.16,0.17,0.18,0.19,0.20,0.21,0.22,0.23,0.24,0.25,0.26,0.27,0.28,0.29,0.30,0.31,0.32,0.33,0.34,0.35,0.36,0.37,0.38,0.39,0.40,0.41,0.42,0.43,0.44,0.45,0.46,0.47,0.48,0.49,0.50,0.51,0.52,0.53,0.54,0.55,0.56,0.57,0.58,0.59,0.60,0.61,0.62,0.63,0.65,0.67,0.70,0.75,0.80,0.85,0.90,0.95,1.00,1.20,1.50,1.70,2.00,2.50,3.00,4.00,5.00,6.00,7.00,8.00,9.00,10.0,11.0,12.0,13.0,14.0,15.0,16.0,18.0,20.0,25.0,30.0,40.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,200.,250.,300.,350.,400.,500.,600.,700.,800.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,10000.,15000.,20000.,40000.,60000.,80000.,1.D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5'%.3f' %.0'%.3f' %.5D5,4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,2.0D6,2.5'%.3f' %.0'%.3f' %.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5'%.3f' %.0'%.3f' %.5D7,4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,1.0D8,1.25D8,1.5D8,1.75D8,2.0D8,2.5'%.3f' %.0'%.3f' %.5D8,4.0D8,4.5D8,5.0D8,6.0D8,7.0D8,8.0D8,9.0D8,1.0D9/
# EPSILON =1-YEPS
      DATA YEPS/1.0,.987,.9814,.977,.9734,.9673,.9619,.9572,.9530,.9492,.9433,.9384,.9304,.9234,.9103,.8988,.8879,.8681,.8501,.8332,.8173,.7947,.7727,.7395,.7071,.6770,.6469,.6187,.5909,.5642,.5379,.5119,.4866,.4623,.4384,.4154,.3932,.3716,.3505,.3108,.2745,.2414,.2118,.1859,.1637,.1452,.1304,.1195,.1123,.1089,.1093,.1140,.1231,.1369,.1559,.1802,.2104,.2465,.2882,.3353,     .3872,.4434,.5019,.5620,.6222,.6818,.7400,.7957,.8477,.8970,.9414,.982,1.019,1.0521,1.0812,1.107,1.1293,1.1487,1.1654,1.1796,1.191,1.2014,1.208,1.2137,1.2179,1.2205,1.222,1.222,1.2213,1.2194,1.2165,1.213,1.2035,1.192,1.171,1.1296,1.0836,1.0358,.9876,.9411,.8966,.8836,.8671,.8299,.7682,.7432,.7390,.7174,.7830,.7989,.7892,.7470,.7226,.7025,.6590,.5967,.5406,.4932,.4554,.4396,.4320,.4266,.4200,.4030,.3564,.3152,.3716,.2186,.2113,.1829,.1713,.1522,.1344,.1152,.1018,.0922,.0843,.0820,.0717,.0649, .0597,.0522,.0409,.0286,.0210,.0129,.0093,.0072,.0058,.0044,.0035,.0023,.00173,8.3D-4,5.1D-4,3.73D-4,2.919D-4,2.274D-4,1.847D-4,1.546D-4,1.322D-4,1.012D-4,8.095D-5,6.673D-5,5.621D-5,4.823D-5,4.197D-5,3.279D-5,2.647D-5,2.191D-5,1.848D-5,1.582D-5,1.123D-5,8.449D-6,7.602D-6,5.315D-6,3.660D-6,2.682D-6,2.050D-6,1.617D-6,1.310D-6,1.083D-6,7.762D-7,5.840D-7,4.551D-7,3.648D-7,2.990D-7,2.254D-7,1.376D-7,1.021D-7,7.88D-8,5.08D-8,3.55D-8,2.61D-8,2.00D-8,1.58D-8,1.28D-8,8.79D-9,6.41D-9,4.86D-9,3.81D-9,3.06D-9,1.92D-9,1.31D-9,9.50D-10,7.2D-10,4.5D-10,3.1D-10,2.2D-10,1.7D-10,1.31D-10,1.05D-10,7.2D-11,5.2D-11,3.9D-11,3.1D-11,2.5D-11/
# IONISATION ( VALUES ABOVE 20KEV GENERATED BY BORN BETHE IN SUB)
      DATA XENI/15.75961,16.0,16.5,17.0,17.5,18.0,18.5,19.0,19.5,20.0,20.5,21.0,21.5,22.0,22.5,23.0,23.5,24.0,24.5,25.0,                25.5,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,110.,120.,130.,140.,150.,160.,180.,200.,250.,                300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,               1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,8000.,10000.,14000.,20000./  
# GROSS IONISATION      
      DATA YENI/0.00,.031,.094,.163,.235,.310,.386,.465,.546,.627,.713,.787,.858,.933,.994,1.06,1.12,1.18,1.24,1.30,                1.35,1.41,1.60,1.80,1.96,2.11,2.24,2.33,2.39,2.49,                2.53,2.60,2.66,2.73,2.77,2.82,2.84,2.85,2.86,2.86,          2.85,2.83,2.81,2.76,2.73,2.68,2.62,2.52,2.39,2.17,                1.97,1.80,1.67,1.54,1.44,1.28,1.15,1.04,.971,.898,                .768,.688,.638,.576,.526,.446,.384,.340,.302,.255,                .220,.172,.144,.110,.0825/ 
# COUNTING IONISATION
      DATA YENC/0.00,.031,.094,.163,.235,.310,.386,.465,.546,.627,.713,.787,.858,.933,.994,1.06,1.12,1.18,1.24,1.30,1.35,1.41,1.60,1.80,1.96,2.11,2.24,2.33,2.39,2.49,2.52,2.56,2.58,2.62,2.63,2.67,2.68,2.68,2.69,2.69,2.68,2.66,2.64,2.59,2.56,2.52,2.46,2.37,2.24,2.04,1.85,1.69,1.57,1.45,1.35,1.21,1.08,.981,.912,.843,.721,.646,.599,.540,.494,.419,.361,.319,.283,.239,.206,.162,.136,.104,.0775/ 
# IONISATION FOR CHARGE STATE = 1
      DATA YEN1/0.00,.031,.094,.163,.235,.310,.386,.465,.546,.627,.713,.787,.858,.933,.994,1.06,1.12,1.18,1.24,1.30,1.35,1.41,1.60,1.80,1.96,2.11,2.24,2.33,2.39,2.49,2.51,2.52,2.50,2.50,2.50,2.52,2.52,2.52,2.52,2.50,2.49,2.47,2.45,2.41,2.38,2.33,2.29,2.20,2.10,1.91,1.74,1.59,1.48,1.37,1.28,1.14,1.02,.925,.863,.798,.682,.612,.567,.511,.468,.397,.342,.302,.268,.226,.195,.153,.129,.0984,.0734/
# IONISATION FOR CHARGE STATE = 2
      DATA XEN2/43.38928,45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,110.,120.,130.,140.,150.,160.,180.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,8000.,10000.,14000.,20000./  
      DATA YEN2/0.00,.00045,.012,.0391,.0803,.114,.136,.148,.159,.165,.172,.175,.179,.180,.180,.176,.172,.167,.161,.153,.138,.121,.106,.093,.085,.076,.0667,.0568,.0518,.0453,.0418,.0375,.0321,.0287,.0266,.0240,.0234,.0186,.0161,.0142,.0126,.0106,.00916,.00681,.00574,.00438,.00326/
# IONISATION FOR CHARGE STATE =3
      DATA XEN3/84.124,100.,110.,120.,130.,140.,150.,160.,180.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,8000.,10000.,14000.,20000./  
      DATA YEN3/0.0,.000972,.00209,.00311,.00400,.00481,.00520,.00541,.00552,.00532,.00504,.00489,.00607,.00673,.00751,.00823,.00903,.00890,.00887,.00825,.00832,.00711,.00636,.00590,.00532,.00486,.00413,.00355,.00314,.00278,.00236,.00203,.00160,.00134,.001024,.000764/
# K-SHELL IONISATION
      DATA XKSH/3205.9,3283.,3378.,3475.,3576.,3680.,3786.,3896.,4009.,4125.,4368.,4625.,4898.,5186.,5492.,5816.,6159.,6522.,6907.,7314.,7971.,8688.,9468.,1.03D4,1.09D4,1.19D4,1.30D4,1.42D4,1.54D4,1.68D4,1.89D4,2.12D4,2.37D4,2.66D4,2.99'%.3f' %.45'%.3f' %.98D4,4.60D4,5.31D4,6.13D4,7.29D4,8.66D4,1.00D5,1.19D5,1.41D5,1.68D5,2.00D5,2.37D5,2.82'%.3f' %.35D5,4.10D5,5.01D5,6.13D5,7.50D5,8.91D5,1.00D6,1.22D6,1.50D6,1.83D6,2.30D6,2.90'%.3f' %.65D6,4.60D6,5.79D6,7.50D6,8.66D6,1.00D7,1.22D7,1.50D7,1.83D7,2.24D7,2.74'%.3f' %.55D7,4.60D7,5.79D7,7.50D7,8.66D7,1.00D8,1.22D8,1.50D8,1.83D8,2.24D8,2.74'%.3f' %.55D8,4.60D7,5.79D8,7.50D8,8.66D8,1.00D9/
      DATA YKSH/0.0,1.59D-6,3.44D-6,5.20D-6,6.89D-6,8.51D-6,1.01D-5,1.15D-5,1.29D-5,1.43D-5,1.68D-5,1.91D-5,2.11D-5,2.30D-5,2.46D-5,2.61D-5,2.74D-5,2.85D-5,2.95D-5,3.04D-5,3.14D-5,3.21D-5,3.25D-5,3.27D-5,3.27D-5,3.26D-5,3.23D-5,3.18D-5,3.12D-5,3.04D-5,2.93D-5,2.81D-5,2.68D-5,2.54D-5,2.40D-5,2.23D-5,2.07D-5,1.92D-5,1.77D-5,1.63D-5,1.48D-5,1.39D-5,1.24D-5,1.13D-5,1.04D-5,9.53D-6,8.82D-6,8.22D-6,7.72D-6,7.32D-6,6.94D-6,6.67D-6,6.48D-6,6.37D-6,6.33D-6,6.33D-6,6.36D-6,6.45D-6,6.57D-6,6.75D-6,6.97D-6,7.21D-6,7.47D-6,7.75D-6,8.08D-6,8.27D-6,8.46D-6,8.73D-6,9.01D-6,9.28D-6,9.56D-6,9.85D-6,1.02D-5,1.06D-5,1.09D-5,1.13D-5,1.15D-5,1.17D-5,1.20D-5,1.23D-5,1.25D-5,1.28D-5,1.31D-5,1.35D-5,1.39D-5,1.42D-5,1.46D-5,1.48D-5,1.50D-5/
# L1 SHELL IONISATION
      DATA XL1S/326.3,329.0,338.3,347.8,357.5,367.6,378.0,388.6,399.6,410.9,422.5,447.,473.,500.,529.,559.,592.,626.,662.,701.,742.,807.,879.,957.,1013.,1103.,1203.,1313.,1423.,1553.,1693.,1893.,2123.,2383.,2673.,3003.,3463.,3993.,4613.,5323.,6143.,7303.,8673.,1.00D4,1.19D4,1.41D4,1.68D4,2.00D4,2.37D4,2.82'%.3f' %.35D4,4.10D4,5.01D4,6.13D4,7.50D4,8.91D4,1.00D5,1.22D5,1.50D5,1.83D5,2.30D5,2.90'%.3f' %.65D5,4.60D5,5.79D5,7.50D5,8.66D5,1.00D6,1.22D6,1.50D6,1.83D6,2.30D6,2.90'%.3f' %.65D6,4.60D6,5.79D6,7.50D6,8.66D6,1.00D7,1.22D7,1.50D7,1.83D7,2.30D7,2.90'%.3f' %.65D7,4.60D7,5.79D7,7.50D7,8.66D7,1.00D8,1.22D8,1.50D8,1.83D8,2.30D8,2.90'%.3f' %.65D8,4.60D8,5.79D8,7.50D8,8.66D8,1.00D9/
      DATA YL1S/0.0,5.83D-5,2.39D-4,4.07D-4,5.63D-4,7.08D-4,8.43D-4,9.71D-4,1.09D-3,1.20D-3,1.31D-3,1.50D-3,1.68D-3,1.84D-3,1.98D-3,2.11D-3,2.22D-3,2.32D-3,2.41D-3,2.49D-3,2.55D-3,2.63D-3,2.68D-3,2.72D-3,2.73D-3,2.72D-3,2.71D-3,2.67D-3,2.62D-3,2.56D-3,2.49D-3,2.38D-3,2.27D-3,2.14D-3,2.02D-3,1.89D-3,1.74D-3,1.59D-3,1.44D-3,1.31D-3,1.19D-3,1.05D-3,9.22D-4,8.28D-4,7.26D-4,6.36D-4,5.57D-4,4.87D-4,4.26D-4,3.72D-4,3.26D-4,2.79D-4,2.40D-4,2.07D-4,1.79D-4,1.59D-4,1.48D-4,1.30D-4,1.15D-4,1.03D-4,9.19D-5,8.32D-5,7.66D-5,7.16D-5,6.81D-5,6.55D-5,6.45D-5,6.40D-5,6.36D-5,6.38D-5,6.44D-5,6.54D-5,6.67D-5,6.84D-5,7.02D-5,7.22D-5,7.45D-5,7.59D-5,7.72D-5,7.92D-5,8.12D-5,8.32D-5,8.55D-5,8.79D-5,9.03D-5,9.26D-5,9.50D-5,9.77D-5,9.92D-5,1.01D-4,1.03D-4,1.05D-4,1.07D-4,1.09D-4,1.12D-4,1.14D-4,1.17D-4,1.19D-4,1.22D-4,1.23D-4,1.25D-4/
# L2 SHELL IONISATION
      DATA XL2S/250.6,252.3,260.3,267.3,275.3,283.3,291.3,300.3,308.3,317.3,326.3,346.3,366.3,388.3,411.3,435.3,461.3,488.3,517.3,547.3,580.3,614.3,650.3,689.3,751.3,819.3,892.3,1001.,1121.,1261.,1411.,1581.,1781.,1941.,2181.,2441.,2741.,3071.,3451.,3871.,4471.,5161.,5961.,6881.,7941.,8911.,1.00D4,1.19D4,1.41D4,1.68D4,2.05D4,2.44D4,2.90'%.3f' %.45D4,4.10D4,4.87D4,5.79D4,6.88D4,8.18D4,1.00D5,1.22D5,1.50D5,1.83D5,2.24D5,2.74'%.3f' %.35D5,4.10D5,5.01D5,6.13D5,7.50D5,1.00D6,1.22D6,1.50D6,1.83D6,2.30D6,2.90'%.3f' %.65D6,4.60D6,5.79D6,7.50D6,8.66D6,1.00D7,1.22D7,1.50D7,1.83D7,2.30D7,2.90'%.3f' %.65D7,4.60D7,5.79D7,7.50D7,8.66D7,1.00D8,1.22D8,1.50D8,1.83D8,2.30D8,2.90'%.3f' %.65D8,4.60D8,5.79D8,7.50D8,8.66D8,1.00D9/
      DATA YL2S/0.00,9.77D-5,4.86D-4,8.50D-4,1.19D-3,1.51D-3,1.81D-3,2.10D-3,2.36D-3,2.62D-3, 2.85D-3,3.29D-3,3.67D-3,4.01D-3,4.32D-3,4.59D-3,4.83D-3,5.04D-3,5.22D-3,5.38D-3,5.52D-3,5.63D-3,5.72D-3,5.79D-3,5.86D-3,5.89D-3,5.88D-3,5.82D-3,5.70D-3,5.55D-3,5.36D-3,5.14D-3,4.90D-3,4.72D-3,4.46D-3,4.21D-3,3.95D-3,3.70D-3,3.47D-3,3.24D-3,2.96D-3,2.70D-3,2.46D-3,2.23D-3,2.01D-3,1.86D-3,1.71D-3,1.51D-3,1.33D-3,1.17D-3,1.01D-3,8.83D-4,7.77D-4,6.83D-4,6.02D-4,5.31D-4,4.69D-4,4.16D-4,3.70D-4,3.25D-4,2.87D-4,2.56D-4,2.30D-4,2.09D-4,1.92D-4,1.78D-4,1.68D-4,1.60D-4,1.54D-4,1.50D-4,1.48D-4,1.48D-4,1.49D-4,1.51D-4,1.54D-4,1.58D-4,1.63D-4,1.68D-4,1.73D-4,1.80D-4,1.83D-4,1.87D-4,1.93D-4,1.98D-4,2.04D-4,2.10D-4,2.16D-4,2.23D-4,2.29D-4,2.36D-4,2.43D-4,2.47D-4,2.52D-4,2.57D-4,2.63D-4,2.69D-4,2.75D-4,2.82D-4,2.89D-4,2.95D-4,3.02D-4,3.09D-4,3.13D-4,3.17D-4/
# L3 SHELL IONISATION
      DATA XL3S/248.4,252.5,260.5,267.5,275.5,283.5,291.5,300.5,308.5,317.5,326.5,346.5,366.5,388.5,411.5,435.5,461.5,488.5,517.5,547.5,580.5,614.5,650.5,689.5,751.5,819.5,892.5,1001.,1121.,1261.,1411.,1581.,1781.,1941.,2181.,2441.,2741.,3071.,3451.,3871.,4471.,5161.,5961.,6881.,7941.,8911.,1.00D4,1.19D4,1.41D4,1.68D4,2.05D4,2.44D4,2.90'%.3f' %.45D4,4.10D4,4.87D4,5.79D4,6.88D4,8.18D4,1.00D5,1.22D5,1.50D5,1.83D5,2.24D5,2.74'%.3f' %.35D5,4.10D5,5.01D5,6.13D5,7.50D5,1.00D6,1.22D6,1.50D6,1.83D6,2.30D6,2.90'%.3f' %.65D6,4.60D6,5.79D6,7.50D6,8.66D6,1.00D7,1.22D7,1.50D7,1.83D7,2.30D7,2.90'%.3f' %.65D7,4.60D7,5.79D7,7.50D7,8.66D7,1.00D8,1.22D8,1.50D8,1.83D8,2.30D8,2.90'%.3f' %.65D8,4.60D8,5.79D8,7.50D8,8.66D8,1.00D9/
      DATA YL3S/0.0,4.71D-4,1.25D-3,1.98D-3,2.67D-3,3.31D-3,3.92D-3,4.48D-3,5.02D-3,5.52D-3,6.00D-3,6.86D-3,7.63D-3,8.32D-3,8.93D-3,9.47D-3,9.95D-3,1.04D-2,1.07D-2,1.10D-2,1.13D-2,1.15D-2,1.17D-2,1.18D-2,1.20D-2,1.20D-2,1.20D-2,1.19D-2,1.16D-2,1.13D-2,1.09D-2,1.05D-2,9.97D-3,9.59D-3,9.07D-3,8.55D-3,8.03D-3,7.53D-3,7.04D-3,6.58D-3,6.02D-3,5.49D-3,4.99D-3,4.52D-3,4.09D-3,3.77D-3,3.47D-3,3.06D-3,2.69D-3,2.37D-3,2.04D-3,1.79D-3,1.58D-3,1.39D-3,1.22D-3,1.08D-3,9.52D-4,8.44D-4,7.51D-4,6.59D-4,5.82D-4,5.19D-4,4.66D-4,4.23D-4,3.89D-4,3.61D-4,3.40D-4,3.24D-4,3.12D-4,3.05D-4,3.00D-4,3.00D-4,3.02D-4,3.06D-4,3.12D-4,3.20D-4,3.30D-4,3.40D-4,3.51D-4,3.64D-4,3.72D-4,3.79D-4,3.90D-4,4.01D-4,4.13D-4,4.25D-4,4.39D-4,4.52D-4,4.65D-4,4.78D-4,4.93D-4,5.01D-4,5.10D-4,5.21D-4,5.33D-4,5.45D-4,5.58D-4,5.71D-4,5.85D-4,5.98D-4,6.11D-4,6.26D-4,6.35D-4,6.43D-4/
# 1S5 METASTABLE SCALE BY 1/E**3 ABOVE 100 EV 
      DATA X1S5/11.548,11.60,11.63,11.64,11.66,11.70,11.75,11.80,11.82,11.83,11.84,11.86,11.88,11.90,11.93,12.00,12.10,12.20,12.30,12.40,12.50,12.60,12.70,12.80,12.83,12.86,12.90,12.91,12.93,12.96,13.00,13.03,13.05,13.08,13.10,13.12,13.15,13.18,13.20,13.26,13.28,13.29,13.35,13.40,13.45,13.47,13.50,13.60,13.70,13.80,14.0,14.5,15.0,16.0,17.0,18.0,20.0,22.0,24.0,26.0,28.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100./                                               
# UNITS 10-18 CM**2
      DATA Y1S5/0.00,0.70,1.22,1.22,1.01,0.88,0.83,0.90,1.13,1.69,2.27,1.64,1.13,1.04,0.99,1.10,1.31,1.64,2.05,2.47,2.86,3.20,3.40,3.40,3.33,3.19,2.77,3.28,2.56,2.27,2.27,3.89,5.20,3.89,2.72,2.14,1.75,1.96,1.69,1.53,2.03,1.76,1.94,2.09,2.18,2.52,2.36,2.56,2.80,3.10,3.85,4.40,4.94,5.58,6.16,6.44,6.20,4.90,3.80,3.20,2.50,2.00,1.15,0.80,0.52,0.37,0.24,.135,.088,.060,.042/                                                           
      DATA YEPS1/71*0.0/
# 1S4 RESONANCE RADIATION 106.66 NM WAVELENGTH
# USE BEF SCALING ABOVE 1000EV  F=0.058
      DATA X1S4/11.624,11.65,11.66,11.67,11.68,11.69,11.70,11.74,11.75,11.77,11.79,11.82,11.84,11.87,11.88,11.90,11.95,12.00,12.05,12.10,12.20,12.30,12.40,12.50,12.60,12.70,12.80,12.85,12.90,12.905,12.91,12.93,12.97,13.00,13.03,13.05,13.06,13.07,13.09,13.10,13.15,13.18,13.20,13.21,13.23,13.26,13.30,13.35,13.40,13.45,13.47,13.49,13.60,13.70,13.80,14.0,15.0,16.0,17.0,18.0,19.0,20.0,24.0,27.0,30.0,40.0,50.0,60.0,80.0,100.,140.,200.,250.,300.,400.,500.,600.,800.,1000./       
# UNITS 10**-18 CM**2
      DATA Y1S4/0.00,0.90,1.48,1.57,1.57,1.55,1.48,1.10,1.05,1.14,1.22,1.30,1.42,0.90,0.81,.742,.761,.788,0.86,0.92,1.12,1.55,1.64,1.91,2.16,2.32,2.38,2.34,2.12,2.02,2.29,2.00,1.87,1.93,2.38,3.28,3.49,3.20,2.21,2.05,1.76,2.27,2.11,2.36,2.11,1.98,1.89,1.82,1.87,1.94,2.16,2.07,2.23,2.40,2.55,2.90,5.02,6.23,6.86,7.43,8.00,8.05,8.05,8.00,7.80,7.30,6.80,6.30,5.60,5.00,4.30,3.60,3.30,3.00,2.50,2.15,1.92,1.60,1.41/       
      DATA YEPS2/79*0.0/
# 1S3 METASTABLE SCALE BY 1/E**3 ABOVE 100 EV
      DATA X1S3/11.723,11.75,11.76,11.78,11.79,11.80,11.84,11.86,11.90,11.95,12.00,12.10,12.20,12.30,12.40,12.50,12.60,12.70,12.80,12.85,12.90,12.91,12.92,12.94,12.98,12.99,13.00,13.01,13.04,13.05,13.06,13.08,13.10,13.15,13.18,13.20,13.21,13.23,13.25,13.27,13.30,13.35,13.40,13.45,13.47,13.49,13.60,13.70,13.80,14.0,14.5,15.0,16.0,17.0,18.0,20.0,22.0,24.0,26.0,28.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100./
# UNITS 10**-18 CM**2
      DATA Y1S3/0.00,.176,0.38,0.45,0.45,0.43,0.23,0.23,.176,.155,.155,.171,.211,.259,.317,.389,.454,.509,.542,.535,.479,.373,.567,.486,.437,.639,.518,.461,.518,.752,.979,.873,.706,.535,.535,.826,1.12,.891,.720,.616,.461,.236,.243,.252,.445,.356,.405,.454,.486,0.56,0.80,0.99,1.12,1.23,1.29,1.24,0.98,0.76,0.64,0.50,0.40,0.23,0.16,.104,.074,.048,.027,.0176,.0120,.0084/
      DATA YEPS3/70*0.0/
# 1S2 RESONANCE RADIATION 104.82 NM WAVELENGTH
# USE BEF SCALING ABOVE 400 EV F=0.2214
      DATA X1S2/11.828,11.85,11.86,11.88,11.90,11.93,11.96,12.00,12.05,12.10,12.20,12.30,12.40,12.50,12.60,12.70,12.80,12.85,12.90,12.91,12.93,12.95,13.00,13.02,13.06,13.10,13.13,13.15,13.17,13.20,13.21,13.23,13.25,13.27,13.30,13.35,13.40,13.45,13.46,13.48,13.50,13.60,13.70,13.80,14.0,15.0,16.0,17.0,18.0,19.0,20.0,22.0,24.0,26.0,28.0,30.0,35.0,40.0,50.0,60.0,80.0,100.,120.,140.,170.,200.,250.,300.,350.,400./
# UNITS 10**-18 CM**2
      DATA Y1S2/0.00,1.55,1.94,1.76,1.58,1.37,1.24,1.19,1.19,1.21,1.30,1.44,1.64,1.91,2.25,2.52,2.75,2.83,2.86,3.46,3.04,2.95,2.93,3.08,4.18,3.29,3.17,3.02,2.99,3.60,4.21,3.78,3.53,3.17,3.02,2.74,2.92,3.29,3.40,3.24,3.33,3.71,3.94,4.20,4.80,7.20,9.43,11.7,14.0,16.0,17.2,18.8,19.8,20.6,21.3,22.0,23.6,24.7,25.5,25.3,24.0,22.3,20.7,19.3,17.5,16.0,14.0,12.5,11.3,10.3/
      DATA YEPS4/70*0.0/
# 2P10 J=1  SCALED BY 1/E**2 ABOVE 100 EV
      DATA X2P10/12.907,12.912,12.922,12.934,12.949,12.966,13.00,13.012,13.035,13.042,13.053,13.064,13.068,13.075,13.089,13.107,13.141,13.154,13.162,13.170,13.180,13.190,13.202,13.214,13.220,13.234,13.239,13.265,13.271,13.276,13.300,13.400,13.445,13.458,13.467,13.480,13.50,13.60,14.0,15.0,16.0,18.0,19.0,20.0,21.0,22.0,25.0,30.0,35.0,40.0,50.0,60.0,80.0,100./                                
      DATA Y2P10/0.00,0.76,0.40,0.57,0.53,0.61,0.95,1.40,1.78,1.88,1.74,1.18,0.70,0.34,0.13,0.21,0.39,0.70,1.01,1.07,1.33,1.17,1.43,0.70,0.36,0.14,0.11,0.11,0.25,0.18,0.19,0.21,0.22,0.34,0.51,0.34,0.32,0.31,0.39,0.77,1.13,1.82,2.03,2.16,2.20,2.17,1.89,1.20,0.81,0.58,0.33,0.21,0.11,.065/                                  
      DATA YEP2P10/54*0.0/
# 2P9 J=3  SCALED BY 1/E**2 ABOVE 100 EV
      DATA X2P9/13.076,14.0,15.0,16.0,18.0,19.0,20.0,21.0,22.0,25.0,30.0,35.0,40.0,50.0,60.0,80.0,100./
      DATA Y2P9/0.00,0.55,1.23,1.90,2.75,2.94,3.00,2.98,2.92,2.55,1.73,1.19,0.85,0.50,0.32,0.17,0.11/               
      DATA YEP2P9/17*0.0/
# 2P8 J=2  SCALED BY 1/E ABOVE 100 EV
      DATA X2P8/13.095,14.0,15.0,16.0,18.0,20.0,22.0,25.0,30.0,35.0,40.0,50.0,60.0,80.0,100./
      DATA Y2P8/0.00,0.38,0.85,1.25,1.85,2.10,2.30,2.35,2.40,2.36,2.20,1.80,1.50,1.13,0.90/
      DATA YEP2P8/15*0.0/
# 2P7 J=1  SCALED BY 1/E**2 ABOVE 100 EV
      DATA X2P7/13.153,14.0,15.0,16.0,18.0,19.0,20.0,21.0,22.0,25.0,30.0,35.0,40.0,50.0,60.0,80.0,100./
      DATA Y2P7/0.00,0.20,0.56,0.92,1.56,1.74,1.81,1.81,1.76,1.60,1.25,1.00,0.84,0.61,0.44,0.27,0.19/
      DATA YEP2P7/17*0.0/
# 2P6 J=2  SCALED BY 1/E ABOVE 100 EV
      DATA X2P6/13.172,14.0,15.0,16.0,18.0,19.0,20.0,22.0,25.0,30.0,35.0,40.0,50.0,60.0,80.0,100./
      DATA Y2P6/0.00,0.36,0.81,1.24,1.84,2.04,2.10,2.20,2.18,1.95,1.80,1.65,1.42,1.27,1.04,0.87/ 
      DATA YEP2P6/16*0.0/
# 2P5 J=0  SCALED BY 1/E ABOVE 100 EV
      DATA X2P5/13.273,14.0,15.0,16.0,18.0,19.0,20.0,21.0,22.0,25.0,30.0,35.0,40.0,50.0,60.0,80.0,100./
      DATA Y2P5/0.00,0.09,0.28,0.47,0.83,0.97,1.08,1.16,1.20,1.26,1.25,1.23,1.20,1.08,0.96,0.75,0.60/
      DATA YEP2P5/17*0.0/
# 2P4 J=1  SCALED BY 1/E**2 ABOVE 100 EV
      DATA X2P4/13.283,14.0,15.0,16.0,18.0,19.0,20.0,21.0,22.0,25.0,30.0,35.0,40.0,50.0,60.0,80.0,100./
      DATA Y2P4/0.00,0.18,0.55,0.90,1.53,1.71,1.77,1.77,1.72,1.57,1.23,0.98,0.82,0.60,0.43,0.26,0.18/
      DATA YEP2P4/17*0.0/
# 2P3 J=2  SCALED BY 1/E ABOVE 100 EV
      DATA X2P3/13.302,14.0,15.0,16.0,18.0,19.0,20.0,21.0,22.0,25.0,30.0,35.0,40.0,50.0,60.0,80.0,100./
      DATA Y2P3/0.00,.155,0.39,0.62,1.11,1.34,1.51,1.62,1.70,1.82,1.85,1.76,1.62,1.33,1.10,0.82,0.66/
      DATA YEP2P3/17*0.0/
# 2P2 J=1  SCALED BY 1/E**2 ABOVE 100 EV
      DATA X2P2/13.328,14.0,15.0,16.0,18.0,19.0,20.0,22.0,25.0,30.0,35.0,40.0,50.0,60.0,80.0,100./
      DATA Y2P2/0.00,0.20,0.46,0.60,0.74,0.77,.785,0.78,0.73,0.62,0.53,0.44,0.33,0.25,0.15,0.10/ 
      DATA YEP2P2/16*0.0/
# 2P1 J=0  SCALED BY 1/E ABOVE 100 EV
      DATA X2P1/13.480,14.0,15.0,16.0,18.0,19.0,20.0,21.0,22.0,25.0,30.0,35.0,40.0,50.0,60.0,80.0,100./
      DATA Y2P1/0.00,0.29,0.94,1.58,2.75,3.22,3.60,3.85,4.00,4.20,4.15,4.10,4.00,3.60,3.20,2.50,2.00/
      DATA YEP2P1/17*0.0/
# 3D6 J=0 SCALED BY 1/E**3 ABOVE 100 EV
      DATA X3D6/13.845,14.0,15.0,16.0,17.0,18.0,19.0,20.0,22.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,100./
      DATA Y3D6/0.00,0.11,0.64,0.92,1.05,1.10,1.10,1.07,0.97,0.79,0.56,0.39,0.28,0.21,0.16,.099,.065,.045,.024/
      DATA YEP3D6/19*0.0/
# 3D5 J=1 DIPOLE ALLOWED BEF SCALING USE BEF ABOVE 400EV F=0.0010
      DATA X3D5/13.864,14.0,15.0,16.0,17.0,18.0,19.0,20.0,22.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,100.,120.,140.,170.,200.,250.,300.,400./
#     DATA Y3D5/0.00,0.40,3.00,4.50,5.25,5.50,5.50,5.35,4.90,4.00,
#    /2.80,2.05,1.50,1.15,0.98,0.65,0.46,0.35,0.19,0.14,
#    /.115,.095,.077,.065,.054,.037/
      DATA Y3D5/0.00,0.32,2.40,3.60,4.20,4.40,4.40,4.28,3.92,3.20,2.24,1.64,1.20,0.92,0.78,0.52,0.37,0.28,0.15,.112,.092,.076,.062,.052,.045,.037/
      DATA YEP3D5/26*0.0/
# 3D4' J=4 SCALED BY 1/E**3 ABOVE 100 EV
      DATA X3D4P/13.979,15.0,16.0,17.0,18.0,19.0,20.0,22.0,25.0,30.0,35.0,40.0,45.0,50.0,55.0,60.0,70.0,80.0,90.0,100./
      DATA Y3D4P/0.00,2.16,3.31,3.88,4.11,4.14,4.04,3.68,3.03,2.12,1.50,1.09,.813,.619,.482,.381,.251,.173,.125,.092/
      DATA YEP3D4P/20*0.0/
# 3D4  J=3  SCALED BY 1/E**2 ABOVE 100 EV
      DATA X3D4/14.013,15.0,16.0,17.0,18.0,19.0,20.0,21.0,22.0,25.0,30.0,35.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,90.0,100./                                   
      DATA Y3D4/0.00,0.63,1.05,1.31,1.48,1.57,1.62,1.63,1.62,1.52,1.28,1.06,0.88,0.73,0.62,0.53,0.46,0.40,0.35,0.31,0.28,.225,.186/                                      
      DATA YEP3D4/23*0.0/
# 3D3 J=2 SCALE BY 1/E**3 ABOVE 100 EV
      DATA X3D3/13.903,14.0,15.0,16.0,17.0,18.0,19.0,20.0,22.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100./
      DATA Y3D3/0.00,0.15,1.60,3.00,3.70,4.30,4.50,4.40,4.20,3.60,2.63,1.86,1.35,1.00,0.76,0.47,0.31,0.21,0.15,.114/
      DATA YEP3D3/20*0.0/
# 3D1'' J=2 (ALSO 2S5 J=1 ) SCALE BY 1/E**2 ABOVE 100 EV
      DATA X3D1PP/14.063,15.0,16.0,17.0,18.0,19.0,20.0,22.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100./     
      DATA Y3D1PP/0.00,0.60,1.10,1.50,1.70,1.80,1.85,1.85,1.65,1.35,1.00,0.73,0.57,0.45,0.32,0.23,0.18,.145,.120/      
      DATA YEP3D1PP/19*0.0/
# 3D1'  J=3 SCALE BY 1/E ABOVE 100 EV
      DATA X3D1P/14.099,15.0,16.0,18.0,19.0,20.0,21.0,22.0,25.0,30.0,35.0,40.0,50.0,60.0,80.0,100./                       
      DATA Y3D1P/0.00,0.08,0.18,0.33,0.40,0.45,0.48,0.50,0.54,0.55,0.52,0.48,0.40,0.33,0.24,0.20/                       
      DATA YEP3D1P/16*0.0/
# 3S1''''  J=2  SCALE BY 1/E**3 ABOVE 100 EV
      DATA X3S1PPPP/14.214,15.0,16.0,17.0,18.0,19.0,20.0,22.0,24.0,27.0,30.0,35.0,40.0,45.0,50.0,55.0,60.0,70.0,80.0,90.0,100./                                                          
      DATA Y3S1PPPP/0.00,0.80,1.65,2.10,2.30,2.35,2.32,2.15,1.89,1.54,1.25,0.89,0.65,0.48,0.37,0.29,0.23,0.15,.103,.074,.055/                                                       
      DATA YEP3S1PPPP/21*0.0/
# 3S1'''  J=3  SCALE BY 1/E ABOVE 100 EV
      DATA X3S1PPP/14.236,15.0,16.0,18.0,19.0,20.0,21.0,22.0,25.0,30.0,35.0,40.0,50.0,60.0,80.0,100./                       
      DATA Y3S1PPP/0.00,0.12,0.27,0.50,0.60,0.68,0.72,0.75,0.81,0.82,0.78,0.72,0.60,0.52,0.36,0.30/                                  
      DATA YEP3S1PPP/16*0.0/
# 3S1''  J=2  SCALE BY 1/E**3 ABOVE 100 EV
      DATA X3S1PP/14.234,15.0,16.0,17.0,18.0,19.0,20.0,21.0,22.0,25.0,30.0,35.0,40.0,45.0,50.0,55.0,60.0,70.0,80.0,90.0,100./                                                
      DATA Y3S1PP/0.00,0.55,1.06,1.31,1.42,1.44,1.42,1.37,1.31,1.09,0.77,0.55,0.40,0.30,0.23,0.18,0.14,.0918,.0635,.0456,.0339/                                                          
      DATA YEP3S1PP/21*0.0/
# 2S5  J=2  SCALE BY 1/E**2  ABOVE 100 EV
      DATA X2S5/14.068,15.0,16.0,17.0,18.0,19.0,20.0,22.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100./      
      DATA Y2S5/0.00,0.60,1.10,1.50,1.70,1.80,1.85,1.85,1.65,1.35,1.00,0.73,0.57,0.45,0.32,0.23,0.18,.145,.120/      
      DATA YEP2S5/19*0.0/
# 2S3  J=0  SCALE BY 1/E**2  ABOVE 100 EV
      DATA X2S3/14.241,15.0,16.0,17.0,18.0,19.0,20.0,22.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100./       
      DATA Y2S3/0.00,0.12,0.22,0.30,0.34,0.36,0.37,0.37,0.33,0.27,0.20,.146,.114,.090,.064,.046,.036,.029,.024/     
      DATA YEP2S3/19*0.0/
# BREMSSTRAHLUNG X-SECTION WITH CUT OFF
# UNITS 10**-24 CM**2
      DATA Z18T/1518.,1035.,582.,355.,207.,99.5,58.9,37.1,24.7,21.9,21.9,22.3,22.6,22.9,23.1,23.4,23.7,24.0,24.2,24.4,24.6,24.7,24.7,24.8,24.9/
      DATA EBRM/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,4.E7,5.E7,6.E7,8.E7,1.E8/
#----------------------------------------------------------------------
#     NANISO=0
      if(NANISO == 0):
 :
       NAME='ARGON ISOTROPIC      2014'       
      else:
       NAME='ARGON ANISOTROPIC    2014'
      # endif                                         
# ----------------------------------------------------------------      
#  MULTI-TERM CROSS-SECTION.                                            
#  FOR PURE ARGON:                                                      
#  ACCURACY OF DERIVED VELOCITY AND DIFFUSION COEFFICIENTS 0.5% BELOW   
#  3000VOLTS . BELOW 20000VOLTS ACCURACY 1.0%. IONISATION COEFFICIENT   
#  AND DRIFT VELOCITY ACCURACY BETTER THAN  5% BELOW 1,000,000 VOLTS
#  ANISOTROPIC ELASTIC SCATTERING VERSION  
#  2007:INCREASED DATA BASE UPPER ENERGY TO 2MEV
#  2007:INCLUDED NEW ANISTROPIC SCATTERING def
#  2007:INCLUDED POSSIBLE PENNING TRANSFER FRACTION 
#  2009:SPLIT EXCITATION X-SECTION INTO 44 LEVELS AND MODIFIED
#       ELASTIC X-SECTION.  
#  2011:INCREASED SCALING FACTOR FOR S LEVELS AT THRESHOLD FROM 
#       0.5 TO 0.81 x (BARTSCHAT AND ZATSARINNY BSR MODEL)
#       EXCITATION RATE STILL WITHIN 1 SIGMA OF TACHIBANAS MEASURED
#       RATES FOR THE 1S LEVELS 
#       AND SMALL INCREASE IN MOMENTUM TRANSFER X-SECTION AT THE
#       PEAK( 11 EV) TO FIT DRIFT VELOCITY. 
#  2013: INCLUDED K AND L SHELL IONISATIONS AND CHARGE STATES 1 2 AND 3    
#  2014: UPDATE TO CORRECT THE BEF SCALING FORMULA 
#-----------------------------------------------------------------------
#        TOTAL OSCILLATOR SUM FOR EXCITED STATES F=0.860           
#-----------------------------------------------------------------      
#                                                                       
#  PARAMETERS OF PHASE SHIFT ANALYSIS.                                  
#                                                                       
      APOL=11.08                                                        
      LMAX=100                                                          
      AA=-1.459                                                         
      DD=68.93                                                          
      FF=-97.0                                                          
      A1=8.69       
      API=numpy.arccos(-1.00)
      A0=0.52917720859D-8
      RY=13.60569193 
      CONST=1.873884D-20
      EMASS2=1021997.804
      BBCONST=16.0*API*A0*A0*RY*RY/EMASS2
      CONST=1.873884D-20
#
      AM2=3.593
      C=39.70  
#
      PSCALE=0.90 
#     
#  AVERAGE AUGER EMISSIONS FROM EACH SHELL
      AUGL3=2.0
      AUGL2=1.0
      AUGL1=2.63
      AUGK=3.39
#
      NION=7                
      NATT=1
      NIN=44
      NNULL=0 
      IONMODEL=0
#
      NBREM=25
      DO 6 J=1,NIN
      IZBR[J]=0
    6 CONTINUE
      IZBR(45)=18
#
      DO 1 J=1,6
    1 KEL[J]=NANISO
      DO 2 J=1,NIN
    2 KIN[J]=NANISO
#      
      NDATA=117
      NEPSI=217               
      NIDATA=75
      NION2=47
      NION3=36
      NKSH=89
      NL1S=101
      NL2S=104
      NL3S=104
      N1S5=71
      N1S4=79
      N1S3=70 
      N1S2=70
      N2P10=54
      N2P9=17 
      N2P8=15            
      N2P7=17            
      N2P6=16
      N2P5=17
      N2P4=17
      N2P3=17
      N2P2=16            
      N2P1=17
      N3D6=19
      N3D5=26
      N3D3=20
      N3D4P=20  
      N3D4=23   
      N3D1PP=19
      N2S5=19   
      N3D1P=16 
      N3S1PPPP=21 
      N3S1PP=21
      N3S1PPP=16
      N2S3=19
#
      E[1]=0.0                                                          
      E(2)=2.0*EMASS/(39.948*AMU)                                       
      E(3)=15.75961
# EXCITATION X-SECTION AT 1.5MEV                                        
      E(4)=0.18D-18
# IONISING X-SECTION AT 1.5MEV             
      E(5)=0.9204D-18   
# OPAL BEATY FOR MINIMUM IONISING PARTICLE                              
      E(6)=15.0
# OPAL BEATY AT LOW ENERGY
      EOBY[1]=9.5  
      EOBY(2)=18.0    
      EOBY(3)=34.0    
# OPAL BEATY SPLITTING FOR SHELLS
      EOBY(4)=110.      
      EOBY(5)=110.0       
      EOBY(6)=150.0     
      EOBY(7)=1800.0        
#
      EION[1]=15.75961
      EION(2)=43.38928
      EION(3)=84.124
      EION(4)=248.4
      EION(5)=250.6
      EION(6)=326.3
      EION(7)=3205.9
      LEGAS[1]=0
      LEGAS(2)=0
      LEGAS(3)=0
      LEGAS(4)=1
      LEGAS(5)=1
      LEGAS(6)=1
      LEGAS(7)=1
      ISHELL[1]=0
      ISHELL(2)=0
      ISHELL(3)=0
      ISHELL(4)=4
      ISHELL(5)=3
      ISHELL(6)=2
      ISHELL(7)=1
# FLUORESCENCE AND AUGER DATA
      NC0[1]=0
      EC0[1]=0.0
      WKLM[1]=0.0
      EFL[1]=0.0
      NG1[1]=0
      EG1[1]=0.0
      NG2[1]=0
      EG2[1]=0.0
      NC0(2)=1
      EC0(2)=6.0 
      WKLM(2)=0.0
      EFL(2)=0.0
      NG1(2)=0
      EG1(2)=0.0
      NG2(2)=0
      EG2(2)=0.0
      NC0(3)=2
      EC0(3)=12.0
      WKLM(3)=0.0
      EFL(3)=0.0
      NG1(3)=0
      EG1(3)=0.0
      NG2(3)=0
      NG2(3)=0.0
      NC0(4)=2
      EC0(4)=210.5
      WKLM(4)=0.00147
      EFL(4)=232.
      NG1(4)=1
      EG1(4)=210.5
      NG2(4)=1
      EG2(4)=5.0
      NC0(5)=2
      EC0(5)=202.2
      WKLM(5)=0.00147
      EFL(5)=235.
      NG1(5)=1
      EG1(5)=202.2
      NG2(5)=1
      EG2(5)=5.0
      NC0(6)=3
      EC0(6)=240.8
      WKLM(6)=0.00147
      EFL(6)=310.
      NG1(6)=2
      EG1(6)=240.8
      NG2(6)=1
      EG2(6)=5.0
      NC0(7)=4
      EC0(7)=3071.
      WKLM(7)=0.12
      EFL(7)=2957.
      NG1(7)=3
      EG1(7)=2850.
      NG2(7)=2
      EG2(7)=220.
#
      DO 776 J=1,NION
      DO 777 I=1,20000
      if(EG[I]:
 > EION[J]) :
       IOFFION[J]=I-1
       GO TO 776
      # endif
  777 CONTINUE
  776 CONTINUE
#
      EIN[1]=11.548
      EIN(2)=11.624
      EIN(3)=11.723
      EIN(4)=11.828
      EIN(5)=12.907
      EIN(6)=13.076
      EIN(7)=13.095
      EIN(8)=13.153
      EIN(9)=13.172
      EIN(10)=13.273
      EIN(11)=13.283
      EIN(12)=13.302
      EIN(13)=13.328
      EIN(14)=13.480
      EIN(15)=13.845
      EIN(16)=13.864
      EIN(17)=13.903
      EIN(18)=13.979
      EIN(19)=14.013
      EIN(20)=14.063
      EIN(21)=14.068
      EIN(22)=14.090
      EIN(23)=14.099
      EIN(24)=14.153
      EIN(25)=14.214
      EIN(26)=14.234
      EIN(27)=14.236
      EIN(28)=14.241
      EIN(29)=14.255
      EIN(30)=14.304
      EIN(31)=14.711
      EIN(32)=14.848
      EIN(33)=14.859
      EIN(34)=15.004
      EIN(35)=15.022
      EIN(36)=15.118
      EIN(37)=15.186
      EIN(38)=15.190
      EIN(39)=15.308
      EIN(40)=15.351
      EIN(41)=15.360
      EIN(42)=15.366
      EIN(43)=15.374
      EIN(44)=15.660
      EIN(45)=0.0
#**********************************************************************
# ENTER PENNING TRANSFER FRACTION FOR EACH LEVEL
# USE TRANSFER FRACTION IN RANGE BETWEEN 0.0 AND 0.2 FOR MOST MIXTURES
      DO 50 NL=1,NIN
      PENFRA[1,NL]=0.2
# PENNING TRANSFER DISTANCE MICRONS
      PENFRA[2,NL]=1.0
# PENNING TRANSFER TIME PICOSECONDS
   50 PENFRA[3,NL]=1.0
#**********************************************************************
      if(IPEN == 0):
 GO TO 4 
      DO 3 KDUM=1,NIN
      if(PENFRA[1,KDUM] == 0.0):
 GO TO 3
      WRITE(6,999) NAME,EIN(KDUM),PENFRA[1,KDUM],PENFRA[2,KDUM],PENFRA[3,KDUM]
  999 print(' GAS = ',A15,' ENERGY LEVEL = ','%.4f' %,' EV.',/,' PENNING PROBABILITY =','%.3f' % ,' ABS.LENGTH =',F7.2,' DECAY TIME =',F7.1,/)    
    3 CONTINUE
    4 DO 5 NL=1,NIN
      DO 651 I=1,20000
      if(EG[I]:
 > EIN(NL)) :
       IOFFN(NL)=I-1 
       GO TO 5
      # endif
  651 CONTINUE
    5 CONTINUE
#
      SCRPT[1]='                                                  '
      SCRPT(2)=' ELASTIC ANISOTROPIC       ARGON                  '
      if(NANISO == 0):
 :
      SCRPT(2)=' ELASTIC ISOTROPIC         ARGON                  '
      # endif
      SCRPT(3)=' IONISATION CHARGE STATE =1      ELOSS=   15.75961'
      SCRPT(4)=' IONISATION CHARGE STATE =2      ELOSS=   43.38928'
      SCRPT(5)=' IONISATION CHARGE STATE =3      ELOSS=   84.124  '
      SCRPT(6)=' IONISATION L3 SHELL             ELOSS=  248.4    '
      SCRPT(7)=' IONISATION L2 SHELL             ELOSS=  250.6    '
      SCRPT(8)=' IONISATION L1 SHELL             ELOSS=  326.3    '
      SCRPT(9)=' IONISATION K  SHELL             ELOSS= 3205.9    '
      SCRPT(10)=' ATTACHMENT                                       '
      SCRPT(11)='                                                  ' 
      SCRPT(12)='                                                  '
      SCRPT(13)=' EXC 1S5    J=2 METASTABLE         ELEVEL= 11.548 '
      SCRPT(14)=' EXC 1S4    J=1 RESONANT           ELEVEL= 11.624 '
      SCRPT(15)=' EXC 1S3    J=0 METASTABLE         ELEVEL= 11.723 '
      SCRPT(16)=' EXC 1S2    J=1 RESONANT           ELEVEL= 11.828 '
      SCRPT(17)=' EXC 2P10   J=1                    ELEVEL= 12.907 '
      SCRPT(18)=' EXC 2P9    J=3                    ELEVEL= 13.076 ' 
      SCRPT(19)=' EXC 2P8    J=2                    ELEVEL= 13.095 '
      SCRPT(20)=' EXC 2P7    J=1                    ELEVEL= 13.153 ' 
      SCRPT(21)=' EXC 2P6    J=2                    ELEVEL= 13.172 '
      SCRPT(22)=' EXC 2P5    J=0                    ELEVEL= 13.273 ' 
      SCRPT(23)=' EXC 2P4    J=1                    ELEVEL= 13.283 '
      SCRPT(24)=' EXC 2P3    J=2                    ELEVEL= 13.302 ' 
      SCRPT(25)=' EXC 2P2    J=1                    ELEVEL= 13.328 '
      SCRPT(26)=' EXC 2P1    J=0                    ELEVEL= 13.480 ' 
      SCRPT(27)=' EXC 3D6    J=0                    ELEVEL= 13.845 '
      SCRPT(28)=' EXC 3D5    J=1 RESONANT           ELEVEL= 13.864 ' 
      SCRPT(29)=' EXC 3D3    J=2                    ELEVEL= 13.903 ' 
      SCRPT(30)=' EXC 3D4#   J=4                    ELEVEL= 13.979 '
      SCRPT(31)=' EXC 3D4    J=3                    ELEVEL= 14.013 ' 
      SCRPT(32)=' EXC 3D1##  J=2                    ELEVEL= 14.063 '
      SCRPT(33)=' EXC 2S5    J=2                    ELEVEL= 14.068 '
      SCRPT(34)=' EXC 2S4    J=1 RESONANT           ELEVEL= 14.090 '
      SCRPT(35)=' EXC 3D1#   J=3                    ELEVEL= 14.099 '
      SCRPT(36)=' EXC 3D2    J=1 RESONANT           ELEVEL= 14.153 '
      SCRPT(37)=' EXC 3S1####J=2                    ELEVEL= 14.214 '
      SCRPT(38)=' EXC 3S1##  J=2                    ELEVEL= 14.234 '
      SCRPT(39)=' EXC 3S1### J=3                    ELEVEL= 14.236 '
      SCRPT(40)=' EXC 2S3    J=0                    ELEVEL= 14.241 '
      SCRPT(41)=' EXC 2S2    J=1 RESONANT           ELEVEL= 14.255 '
      SCRPT(42)=' EXC 3S1#   J=1 RESONANT           ELEVEL= 14.304 '
      SCRPT(43)=' EXC 4D5    J=1 RESONANT           ELEVEL= 14.711 '
      SCRPT(44)=' EXC 3S4    J=1 RESONANT           ELEVEL= 14.848 ' 
      SCRPT(45)=' EXC 4D2    J=1 RESONANT           ELEVEL= 14.859 '
      SCRPT(46)=' EXC 4S1#   J=1 RESONANT           ELEVEL= 15.004 '
      SCRPT(47)=' EXC 3S2    J=1 RESONANT           ELEVEL= 15.022 '
      SCRPT(48)=' EXC 5D5    J=1 RESONANT           ELEVEL= 15.118 '
      SCRPT(49)=' EXC 4S4    J=1 RESONANT           ELEVEL= 15.186 ' 
      SCRPT(50)=' EXC 5D2    J=1 RESONANT           ELEVEL= 15.190 '
      SCRPT(51)=' EXC 6D5    J=1 RESONANT           ELEVEL= 15.308 '
      SCRPT(52)=' EXC 5S1#   J=1 RESONANT           ELEVEL= 15.351 '
      SCRPT(53)=' EXC 4S2    J=1 RESONANT           ELEVEL= 15.360 '
      SCRPT(54)=' EXC 5S4    J=1 RESONANT           ELEVEL= 15.366 ' 
      SCRPT(55)=' EXC 6D2    J=1 RESONANT           ELEVEL= 15.374 '
      SCRPT(56)=' EXC HIGH   J=1 RESONANT           ELEVEL= 15.660 '
      SCRPT(57)=' BREMSSTRAHLUNG FROM ARGON ATOM                   '
#
#     EN=-ESTEP/2.0   
      DO 900 I=1,NSTEP
      EN=EG[I]
#     EN=EN+ESTEP
      if(EN > EIN[1]:
) :
       GAMMA1=(EMASS2+2.00*EN)/EMASS2
       GAMMA2=GAMMA1*GAMMA1
       BETA=math.sqrt(1.00-1.00/GAMMA2)
       BETA2=BETA*BETA
      # endif
      if(EN > 1.0):
 GO TO 100                                           
      if(EN == 0.0):
 QELA=7.491D-16
      if(EN == 0.0):
 QMOM=7.491D-16
      if(EN == 0.0):
 GO TO 200                                           
      AK=math.sqrt(EN/ARY)
      AK2=AK*AK
      AK3=AK2*AK  
      AK4=AK3*AK                                                
      AN0=-AA*AK*(1.0+(4.0*APOL/3.0)*AK2*math.log(AK))-(API*APOL/3.0)*AK2+ DD*AK3+FF*AK4                                                     
      AN1=(API/15.0)*APOL*AK2-A1*AK3                                    
      AN2=API*APOL*AK2/105.0                                            
      AN0=DATAN(AN0)                                                    
      AN1=DATAN(AN1)                                                    
      AN2=DATAN(AN2)
      ANHIGH=AN2                                                    
      SUM=(DSIN(AN0-AN1))**2                                            
      SUM=SUM+2.0*(DSIN(AN1-AN2))**2
      SIGEL=(DSIN(AN0))**2+3.0*(DSIN(AN1))**2                           
      DO 10 J=2,LMAX-1
      ANLOW=ANHIGH                                                  
      SUMI=6.0/((2.0*J+5.0)*(2.0*J+3.0)*(2.0*J+1.0)*(2.0*J-1.0))        
      SUM=SUM+(J+1.0)*(DSIN(DATAN(API*APOL*AK2*SUMI)))**2
      ANHIGH=DATAN(API*APOL*AK2/((2.0*J+5.0)*(2.0*J+3.0)*(2.0*J+1.0)))
      SIGEL=SIGEL+(2.0*J+1.0)*(DSIN(ANLOW))**2             
   10 CONTINUE 
      QELA=SIGEL*4.0*PIR2/AK2                                           
      QMOM=SUM*4.0*PIR2/AK2   
      GO TO 200                                                         
  100 CONTINUE             
      DO 110 J=2,NDATA
      if(EN <= XEN[J]:
) GO TO 120
  110 CONTINUE
      J=NDATA
  120 A=(YEL[J]-YEL(J-1))/(XEN[J]-XEN(J-1))
      B=(XEN(J-1)*YEL[J]-XEN[J]*YEL(J-1))/(XEN(J-1)-XEN[J])
      QELA=(A*EN+B)*1.0D-16                             
      A=(YSEC[J]-YSEC(J-1))/(XEN[J]-XEN(J-1))                         
      B=(XEN(J-1)*YSEC[J]-XEN[J]*YSEC(J-1))/(XEN(J-1)-XEN[J])         
      QMOM=(A*EN+B)*1.0D-16  
  200 CONTINUE                                         
      PQ1=0.5+(QELA-QMOM)/QELA
      DO 201 J=2,NEPSI
      if(EN <= XEPS[J]:
) GO TO 202
  201 CONTINUE
      J=NEPSI
  202 A=(YEPS[J]-YEPS(J-1))/(XEPS[J]-XEPS(J-1))
      B=(XEPS(J-1)*YEPS[J]-XEPS[J]*YEPS(J-1))/(XEPS(J-1)-XEPS[J])
      PQ2=A*EN+B
# EPSILON =1-PQ2
      PQ2=1.00-PQ2
      if(NANISO == 0):
 PEQEL(2,I)=0.5
      if(NANISO == 1):
 PEQEL(2,I)=PQ1
      if(NANISO == 2):
 PEQEL(2,I)=PQ2
      Q(2,I)=QELA
      if(NANISO == 0):
 Q(2,I)=QMOM
#   IONISATION FOR CHARGE =1                                               
      QION(1,I)=0.0
      PEQION(1,I)=0.50 
      if(NANISO == 2):
 PEQION(1,I)=0.00                            
      if(EN <= EION[1]:
) GO TO 223  
      if(EN > XENI(NIDATA):
) GO TO 221                                 
      DO 210 J=2,NIDATA                                                 
      if(EN <= XENI[J]:
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NIDATA                                                          
  220 A=(YEN1[J]-YEN1(J-1))/(XENI[J]-XENI(J-1))                       
      B=(XENI(J-1)*YEN1[J]-XENI[J]*YEN1(J-1))/(XENI(J-1)-XENI[J])     
      QION(1,I)=(A*EN+B)*1.0D-16
      GO TO 222
# USE BORN-BETHE X-SECTION ABOVE XENI(NIDATA) EV     
  221 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(1,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.9466
  222 CONTINUE                        
# USE ANISOTROPIC SCATTERING FOR PRIMARY IONISATION ELECTRON FOR
# ENERGIES ABOVE 2 * IONISATION ENERGY
# ANISOTROPIC ANGULAR DISTRIBUTION SAME AS ELASTIC AT ENERGY OFFSET BY
# IONISATION ENERGY
      if(EN <= (2.0*EION[1]:
)) GO TO 223
      PEQION(1,I)=PEQEL(2,(I-IOFFION[1]))
#
# IONISATION FOR CHARGE =2
  223 QION(2,I)=0.0
      PEQION(2,I)=0.50 
      if(NANISO == 2):
 PEQION(2,I)=0.00                            
      if(EN <= EION(2):
) GO TO 3223  
      if(EN > XEN2(NION2):
) GO TO 3221                                 
      DO 3210 J=2,NION2                                               
      if(EN <= XEN2[J]:
) GO TO 3220                                      
 3210 CONTINUE                                                          
      J=NION2                                                          
 3220 A=(YEN2[J]-YEN2(J-1))/(XEN2[J]-XEN2(J-1))                       
      B=(XEN2(J-1)*YEN2[J]-XEN2[J]*YEN2(J-1))/(XEN2(J-1)-XEN2[J])     
      QION(2,I)=(A*EN+B)*1.0D-16
      if(QION(2,I):
 < 0.0) QION(2,I)=0.0
      GO TO 3222
# USE BORN-BETHE X-SECTION ABOVE XEN2(NION2) EV     
 3221 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(2,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.04448
 3222 CONTINUE                        
# USE ANISOTROPIC SCATTERING FOR PRIMARY IONISATION ELECTRON FOR
# ENERGIES ABOVE 2 * IONISATION ENERGY
# ANISOTROPIC ANGULAR DISTRIBUTION SAME AS ELASTIC AT ENERGY OFFSET BY
# IONISATION ENERGY
      if(EN <= (2.0*EION(2):
)) GO TO 3223
      PEQION(2,I)=PEQEL(2,(I-IOFFION(2)))
#
# IONISATION FOR CHARGE =3
 3223 QION(3,I)=0.0
      PEQION(3,I)=0.50 
      if(NANISO == 2):
 PEQION(3,I)=0.00                            
      if(EN <= EION(3):
) GO TO 4223  
      if(EN > XEN3(NION3):
) GO TO 4221                                 
      DO 4210 J=2,NION3                                                
      if(EN <= XEN3[J]:
) GO TO 4220                                      
 4210 CONTINUE                                                          
      J=NION3                                                          
 4220 A=(YEN3[J]-YEN3(J-1))/(XEN3[J]-XEN3(J-1))                       
      B=(XEN3(J-1)*YEN3[J]-XEN3[J]*YEN3(J-1))/(XEN3(J-1)-XEN3[J])     
      QION(3,I)=(A*EN+B)*1.0D-16
      if(QION(3,I):
 < 0.0) QION(3,I)=0.0
      GO TO 4222
# USE BORN-BETHE X-SECTION ABOVE XEN3(NION3) EV     
 4221 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(3,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.00987 
 4222 CONTINUE                        
# USE ANISOTROPIC SCATTERING FOR PRIMARY IONISATION ELECTRON FOR
# ENERGIES ABOVE 2 * IONISATION ENERGY
# ANISOTROPIC ANGULAR DISTRIBUTION SAME AS ELASTIC AT ENERGY OFFSET BY
# IONISATION ENERGY
      if(EN <= (2.0*EION(3):
)) GO TO 4223
      PEQION(3,I)=PEQEL(2,(I-IOFFION(3)))
# CALCULATE L3 SHELL IONISATION
 4223 QION(4,I)=0.00
      PEQION(4,I)=0.5
      if(NANISO == 2):
 PEQION(4,I)=0.0
      if(EN <= EION(4):
) GO TO 224
      DO 2231 J=2,NL3S
      if(EN <= XL3S[J]:
) GO TO 2232
 2231 CONTINUE
      J=NL3S
 2232 A=(YL3S[J]-YL3S(J-1))/(XL3S[J]-XL3S(J-1))
      B=(XL3S(J-1)*YL3S[J]-XL3S[J]*YL3S(J-1))/(XL3S(J-1)-XL3S[J])
      QION(4,I)=(A*EN+B)*1.D-16
      PEQION(4,I)=PEQEL(2,(I-IOFFION(4)))
# CALCULATE L2 SHELL IONISATION
  224 QION(5,I)=0.00
      PEQION(5,I)=0.5
      if(NANISO == 2):
 PEQION(5,I)=0.0
      if(EN <= EION(5):
) GO TO 225
      DO 2241 J=2,NL2S
      if(EN <= XL2S[J]:
) GO TO 2242
 2241 CONTINUE
      J=NL2S
 2242 A=(YL2S[J]-YL2S(J-1))/(XL2S[J]-XL2S(J-1))
      B=(XL2S(J-1)*YL2S[J]-XL2S[J]*YL2S(J-1))/(XL2S(J-1)-XL2S[J])
      QION(5,I)=(A*EN+B)*1.D-16
      PEQION(5,I)=PEQEL(2,(I-IOFFION(5)))
# CALCULATE L1 SHELL IONISATION
  225 QION(6,I)=0.00
      PEQION(6,I)=0.5
      if(NANISO == 2):
 PEQION(6,I)=0.0
      if(EN <= EION(6):
) GO TO 226
      DO 2251 J=2,NL1S
      if(EN <= XL1S[J]:
) GO TO 2252
 2251 CONTINUE
      J=NL1S
 2252 A=(YL1S[J]-YL1S(J-1))/(XL1S[J]-XL1S(J-1))
      B=(XL1S(J-1)*YL1S[J]-XL1S[J]*YL1S(J-1))/(XL1S(J-1)-XL1S[J])
      QION(6,I)=(A*EN+B)*1.D-16
      PEQION(6,I)=PEQEL(2,(I-IOFFION(6)))
# CALCULATE K  SHELL IONISATION
  226 QION(7,I)=0.00
      PEQION(7,I)=0.5
      if(NANISO == 2):
 PEQION(7,I)=0.0
      if(EN <= EION(7):
) GO TO 227   
      DO 2261 J=2,NKSH
      if(EN <= XKSH[J]:
) GO TO 2262
 2261 CONTINUE
      J=NKSH
 2262 A=(YKSH[J]-YKSH(J-1))/(XKSH[J]-XKSH(J-1))
      B=(XKSH(J-1)*YKSH[J]-XKSH[J]*YKSH(J-1))/(XKSH(J-1)-XKSH[J])
      QION(7,I)=(A*EN+B)*1.D-16
      PEQION(7,I)=PEQEL(2,(I-IOFFION(7)))
# ATTACHMENT
  227 Q(4,I)=0.0    
# COUNTING IONISATION        
      Q(5,I)=0.0            
      PEQEL(5,I)=0.50
      if(NANISO == 2):
 PEQEL(5,I)=0.00
      if(EN <= E(3):
) GO TO 250
      if(EN > XENI(NIDATA):
) GO TO 241
      DO 231 J=2,NIDATA
      if(EN <= XENI[J]:
) GO TO 240
  231 CONTINUE
      J=NIDATA
  240 A=(YENC[J]-YENC(J-1))/(XENI[J]-XENI(J-1))
      B=(XENI(J-1)*YENC[J]-XENI[J]*YENC(J-1))/(XENI(J-1)-XENI[J])
      Q(5,I)=(A*EN+B)*1.0D-16
      GO TO 250
# USE BORN-BETHE X-SECTION ABOVE XENI(NIDATA) EV
  241 Q(5,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)         
  250 CONTINUE
# CORRECTION TO CHARGE STATE 1 2 AND 3 X-SECTION FOR K AND L SHELLS
# GIVES TOTAL IONISATION EQUAL TO OSCILLATOR SUM
      QTEMP=QION(4,I)+QION(5,I)+QION(6,I)+QION(7,I)
      if(Q(5,I):
 == 0.0) :
       QCORR=1.0
      else:
       QCORR=(Q(5,I)-QTEMP)/Q(5,I)
      # endif
      QION(1,I)=QION(1,I)*QCORR
      QION(2,I)=QION(2,I)*QCORR
      QION(3,I)=QION(3,I)*QCORR 
#      
      Q(6,I)=0.0                                                        
#                                                                       
      DO 251 NL=1,NIN
      QIN(NL,I)=0.0
      PEQIN(NL,I)=0.50
      if(NANISO == 2):
 :
       PEQIN(NL,I)=0.00
      # endif
  251 CONTINUE
# 1S5
      if(EN <= EIN[1]:
) GO TO 413   
      if(EN > X1S5(N1S5):
) GO TO 3111                                
      DO 310 J=2,N1S5                                                   
      if(EN <= X1S5[J]:
) GO TO 311                                      
  310 CONTINUE                                                          
      J=N1S5                                                            
  311 A=(Y1S5[J]-Y1S5(J-1))/(X1S5[J]-X1S5(J-1))                         
      B=(X1S5(J-1)*Y1S5[J]-X1S5[J]*Y1S5(J-1))/(X1S5(J-1)-X1S5[J])      
      QIN(1,I)=(A*EN+B)*1.0D-18
      GO TO 3112
# IF ENERGY GT X1S5(N1S5) EV SCALE BY 1/E**3
 3111 QIN(1,I)=Y1S5(N1S5)*(X1S5(N1S5)/EN)**3*1.0D-18     
 3112 if(EN <= (2.0*EIN[1])) GO TO 312
      PEQIN(1,I)=PEQEL(2,(I-IOFFN[1]))
# 1S4 F=0.0580
  312 if(EN <= EIN(2)) GO TO 413
      if(EN > X1S4(N1S4):
) GO TO 3141
      DO 313 J=2,N1S4                                                   
      if(EN <= X1S4[J]:
) GO TO 314                                      
  313 CONTINUE                                                          
      J=N1S4                                                            
  314 A=(Y1S4[J]-Y1S4(J-1))/(X1S4[J]-X1S4(J-1))                         
      B=(X1S4(J-1)*Y1S4[J]-X1S4[J]*Y1S4(J-1))/(X1S4(J-1)-X1S4[J])      
      QIN(2,I)=(A*EN+B)*1.0D-18
      GO TO 3142
 3141 QIN(2,I)=0.0580/(EIN(2)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(2)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(2))
 3142 if(EN <= (2.0*EIN(2))) GO TO 315
      PEQIN(2,I)=PEQEL(2,(I-IOFFN(2)))
# 1S3
  315 if(EN <= EIN(3)) GO TO 413
      if(EN > X1S3(N1S3):
) GO TO 3171
      DO 316 J=2,N1S3                                                   
      if(EN <= X1S3[J]:
) GO TO 317                                      
  316 CONTINUE                                                          
      J=N1S3                                                            
  317 A=(Y1S3[J]-Y1S3(J-1))/(X1S3[J]-X1S3(J-1))                         
      B=(X1S3(J-1)*Y1S3[J]-X1S3[J]*Y1S3(J-1))/(X1S3(J-1)-X1S3[J])      
      QIN(3,I)=(A*EN+B)*1.0D-18
      GO TO 3172
# IF ENERGY GT X1S3(N1S3) EV SCALE BY 1/E**3
 3171 QIN(3,I)=Y1S3(N1S3)*(X1S3(N1S3)/EN)**3*1.D-18
 3172 if(EN <= (2.0*EIN(3))) GO TO 318
      PEQIN(3,I)=PEQEL(2,(I-IOFFN(3)))
# 1S2  F=0.2260
  318 if(EN <= EIN(4)) GO TO 413
      if(EN > X1S2(N1S2):
) GO TO 3201
      DO 319 J=2,N1S2                                                   
      if(EN <= X1S2[J]:
) GO TO 320                                      
  319 CONTINUE                                                          
      J=N1S2                                                            
  320 A=(Y1S2[J]-Y1S2(J-1))/(X1S2[J]-X1S2(J-1))                         
      B=(X1S2(J-1)*Y1S2[J]-X1S2[J]*Y1S2(J-1))/(X1S2(J-1)-X1S2[J])      
      QIN(4,I)=(A*EN+B)*1.0D-18
      GO TO 3202
 3201 QIN(4,I)=0.2260/(EIN(4)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(4)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(4))
 3202 if(EN <= (2.0*EIN(4))) GO TO 321
      PEQIN(4,I)=PEQEL(2,(I-IOFFN(4)))
#         
# P STATES
#
# 2P10
  321 if(EN <= EIN(5)) GO TO 413
      if(EN > X2P10(N2P10):
) GO TO 3231
      DO 322 J=2,N2P10
      if(EN <= X2P10[J]:
) GO TO 323
  322 CONTINUE
      J=N2P10
  323 A=(Y2P10[J]-Y2P10(J-1))/(X2P10[J]-X2P10(J-1))                    
      B=(X2P10(J-1)*Y2P10[J]-X2P10[J]*Y2P10(J-1))/(X2P10(J-1)-X2P10[J])
      QIN(5,I)=(A*EN+B)*1.D-18*PSCALE
      GO TO 3232
# IF ENERGY GT X2P10(N2P10) EV SCALE BY 1/E**2
 3231 QIN(5,I)=Y2P10(N2P10)*(X2P10(N2P10)/EN)**2*1.0D-18*PSCALE
 3232 if(EN <= (2.0*EIN(5))) GO TO 324
      PEQIN(5,I)=PEQEL(2,(I-IOFFN(5)))
# 2P9
  324 if(EN <= EIN(6)) GO TO 413
      if(EN > X2P9(N2P9):
) GO TO 3261
      DO 325 J=2,N2P9
      if(EN <= X2P9[J]:
) GO TO 326
  325 CONTINUE
      J=N2P9
  326 A=(Y2P9[J]-Y2P9(J-1))/(X2P9[J]-X2P9(J-1))                    
      B=(X2P9(J-1)*Y2P9[J]-X2P9[J]*Y2P9(J-1))/(X2P9(J-1)-X2P9[J])
      QIN(6,I)=(A*EN+B)*1.D-18*PSCALE
      GO TO 3262
# IF ENERGY GT X2P9(N2P9) EV SCALE BY 1/E**2
 3261 QIN(6,I)=Y2P9(N2P9)*(X2P9(N2P9)/EN)**2*1.0D-18*PSCALE
 3262 if(EN <= (2.0*EIN(6))) GO TO 327
      PEQIN(6,I)=PEQEL(2,(I-IOFFN(6)))
# 2P8
  327 if(EN <= EIN(7)) GO TO 413
      if(EN > X2P8(N2P8):
) GO TO 3291
      DO 328 J=2,N2P8
      if(EN <= X2P8[J]:
) GO TO 329
  328 CONTINUE
      J=N2P8
  329 A=(Y2P8[J]-Y2P8(J-1))/(X2P8[J]-X2P8(J-1))                    
      B=(X2P8(J-1)*Y2P8[J]-X2P8[J]*Y2P8(J-1))/(X2P8(J-1)-X2P8[J])
      QIN(7,I)=(A*EN+B)*1.D-18*PSCALE
      GO TO 3292
# IF ENERGY GT X2P8(N2P8) EV SCALE BY 1/E
 3291 QIN(7,I)=Y2P8(N2P8)*(X2P8(N2P8)/EN)*1.0D-18*PSCALE
 3292 if(EN <= (2.0*EIN(7))) GO TO 330
      PEQIN(7,I)=PEQEL(2,(I-IOFFN(7)))
# 2P7
  330 if(EN <= EIN(8)) GO TO 413
      if(EN > X2P7(N2P7):
) GO TO 3321
      DO 331 J=2,N2P7
      if(EN <= X2P7[J]:
) GO TO 332
  331 CONTINUE
      J=N2P7
  332 A=(Y2P7[J]-Y2P7(J-1))/(X2P7[J]-X2P7(J-1))                    
      B=(X2P7(J-1)*Y2P7[J]-X2P7[J]*Y2P7(J-1))/(X2P7(J-1)-X2P7[J])
      QIN(8,I)=(A*EN+B)*1.D-18*PSCALE
      GO TO 3322
# IF ENERGY GT X2P7(N2P7) EV SCALE BY 1/E**2
 3321 QIN(8,I)=Y2P7(N2P7)*(X2P7(N2P7)/EN)**2*1.0D-18*PSCALE
 3322 if(EN <= (2.0*EIN(8))) GO TO 333
      PEQIN(8,I)=PEQEL(2,(I-IOFFN(8)))
# 2P6
  333 if(EN <= EIN(9)) GO TO 413
      if(EN > X2P6(N2P6):
) GO TO 3351
      DO 334 J=2,N2P6
      if(EN <= X2P6[J]:
) GO TO 335
  334 CONTINUE
      J=N2P6
  335 A=(Y2P6[J]-Y2P6(J-1))/(X2P6[J]-X2P6(J-1))                    
      B=(X2P6(J-1)*Y2P6[J]-X2P6[J]*Y2P6(J-1))/(X2P6(J-1)-X2P6[J])
      QIN(9,I)=(A*EN+B)*1.D-18*PSCALE
      GO TO 3352
# IF ENERGY GT X2P6(N2P6) EV SCALE BY 1/E
 3351 QIN(9,I)=Y2P6(N2P6)*(X2P6(N2P6)/EN)*1.0D-18*PSCALE
 3352 if(EN <= (2.0*EIN(9))) GO TO 336
      PEQIN(9,I)=PEQEL(2,(I-IOFFN(9)))
# 2P5
  336 if(EN <= EIN(10)) GO TO 413
      if(EN > X2P5(N2P5):
) GO TO 3381
      DO 337 J=2,N2P5
      if(EN <= X2P5[J]:
) GO TO 338
  337 CONTINUE
      J=N2P5
  338 A=(Y2P5[J]-Y2P5(J-1))/(X2P5[J]-X2P5(J-1))                    
      B=(X2P5(J-1)*Y2P5[J]-X2P5[J]*Y2P5(J-1))/(X2P5(J-1)-X2P5[J])
      QIN(10,I)=(A*EN+B)*1.D-18*PSCALE
      GO TO 3382
# IF ENERGY GT X2P5(N2P5) EV SCALE BY 1/E
 3381 QIN(10,I)=Y2P5(N2P5)*(X2P5(N2P5)/EN)*1.0D-18*PSCALE
 3382 if(EN <= (2.0*EIN(10))) GO TO 339
      PEQIN(10,I)=PEQEL(2,(I-IOFFN(10)))
# 2P4
  339 if(EN <= EIN(11)) GO TO 413
      if(EN > X2P4(N2P4):
) GO TO 3411
      DO 340 J=2,N2P4
      if(EN <= X2P4[J]:
) GO TO 341
  340 CONTINUE
      J=N2P4
  341 A=(Y2P4[J]-Y2P4(J-1))/(X2P4[J]-X2P4(J-1))                    
      B=(X2P4(J-1)*Y2P4[J]-X2P4[J]*Y2P4(J-1))/(X2P4(J-1)-X2P4[J])
      QIN(11,I)=(A*EN+B)*1.D-18*PSCALE
      GO TO 3412
# IF ENERGY GT X2P4(N2P4) EV SCALE BY 1/E**2
 3411 QIN(11,I)=Y2P4(N2P4)*(X2P4(N2P4)/EN)**2*1.0D-18*PSCALE
 3412 if(EN <= (2.0*EIN(11))) GO TO 342
      PEQIN(11,I)=PEQEL(2,(I-IOFFN(11)))
# 2P3
  342 if(EN <= EIN(12)) GO TO 413
      if(EN > X2P3(N2P3):
) GO TO 3441
      DO 343 J=2,N2P3
      if(EN <= X2P3[J]:
) GO TO 344
  343 CONTINUE
      J=N2P3
  344 A=(Y2P3[J]-Y2P3(J-1))/(X2P3[J]-X2P3(J-1))                    
      B=(X2P3(J-1)*Y2P3[J]-X2P3[J]*Y2P3(J-1))/(X2P3(J-1)-X2P3[J])
      QIN(12,I)=(A*EN+B)*1.D-18*PSCALE
      GO TO 3442
# IF ENERGY GT X2P3(N2P3) EV SCALE BY 1/E
 3441 QIN(12,I)=Y2P3(N2P3)*(X2P3(N2P3)/EN)*1.0D-18*PSCALE
 3442 if(EN <= (2.0*EIN(12))) GO TO 345
      PEQIN(12,I)=PEQEL(2,(I-IOFFN(12)))
# 2P2
  345 if(EN <= EIN(13)) GO TO 413
      if(EN > X2P2(N2P2):
) GO TO 3471
      DO 346 J=2,N2P2
      if(EN <= X2P2[J]:
) GO TO 347
  346 CONTINUE
      J=N2P2
  347 A=(Y2P2[J]-Y2P2(J-1))/(X2P2[J]-X2P2(J-1))                    
      B=(X2P2(J-1)*Y2P2[J]-X2P2[J]*Y2P2(J-1))/(X2P2(J-1)-X2P2[J])
      QIN(13,I)=(A*EN+B)*1.D-18*PSCALE
      GO TO 3472
# IF ENERGY GT X2P2(N2P2) EV SCALE BY 1/E**2
 3471 QIN(13,I)=Y2P2(N2P2)*(X2P2(N2P2)/EN)**2*1.0D-18*PSCALE
 3472 if(EN <= (2.0*EIN(13))) GO TO 348
      PEQIN(13,I)=PEQEL(2,(I-IOFFN(13)))
# 2P1
  348 if(EN <= EIN(14)) GO TO 413
      if(EN > X2P1(N2P1):
) GO TO 3501
      DO 349 J=2,N2P1
      if(EN <= X2P1[J]:
) GO TO 350
  349 CONTINUE
      J=N2P1
  350 A=(Y2P1[J]-Y2P1(J-1))/(X2P1[J]-X2P1(J-1))                    
      B=(X2P1(J-1)*Y2P1[J]-X2P1[J]*Y2P1(J-1))/(X2P1(J-1)-X2P1[J])
      QIN(14,I)=(A*EN+B)*1.D-18*PSCALE
      GO TO 3502
# IF ENERGY GT X2P1(N2P1) EV SCALE BY 1/E
 3501 QIN(14,I)=Y2P1(N2P1)*(X2P1(N2P1)/EN)*1.0D-18*PSCALE
 3502 if(EN <= (2.0*EIN(14))) GO TO 351
      PEQIN(14,I)=PEQEL(2,(I-IOFFN(14)))
# 3D6
  351 if(EN <= EIN(15)) GO TO 413
      if(EN > X3D6(N3D6):
) GO TO 3531
      DO 352 J=2,N3D6
      if(EN <= X3D6[J]:
) GO TO 353
  352 CONTINUE
      J=N3D6
  353 A=(Y3D6[J]-Y3D6(J-1))/(X3D6[J]-X3D6(J-1))                    
      B=(X3D6(J-1)*Y3D6[J]-X3D6[J]*Y3D6(J-1))/(X3D6(J-1)-X3D6[J])
      QIN(15,I)=(A*EN+B)*1.D-18
      GO TO 3532
# IF ENERGY GT X3D6(N3D6) EV SCALE BY 1/E**3
 3531 QIN(15,I)=Y3D6(N3D6)*(X3D6(N3D6)/EN)**3*1.0D-18
 3532 if(EN <= (2.0*EIN(15))) GO TO 354
      PEQIN(15,I)=PEQEL(2,(I-IOFFN(15)))
# 3D5 F=0.0010 
  354 if(EN <= EIN(16)) GO TO 413
      if(EN > X3D5(N3D5):
) GO TO 3561
      DO 355 J=2,N3D5
      if(EN <= X3D5[J]:
) GO TO 356
  355 CONTINUE
      J=N3D5
  356 A=(Y3D5[J]-Y3D5(J-1))/(X3D5[J]-X3D5(J-1))                    
      B=(X3D5(J-1)*Y3D5[J]-X3D5[J]*Y3D5(J-1))/(X3D5(J-1)-X3D5[J])
      QIN(16,I)=(A*EN+B)*1.D-18
      GO TO 3562
 3561 QIN(16,I)=0.0010/(EIN(16)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(16)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(16))
      if(QIN(16,I):
 < 0.0) QIN(16,I)=0.0
 3562 if(EN <= (2.0*EIN(16))) GO TO 357
      PEQIN(16,I)=PEQEL(2,(I-IOFFN(16)))
# 3D3
  357 if(EN <= EIN(17)) GO TO 413
      if(EN > X3D3(N3D3):
) GO TO 3591
      DO 358 J=2,N3D3
      if(EN <= X3D3[J]:
) GO TO 359
  358 CONTINUE
      J=N3D3
  359 A=(Y3D3[J]-Y3D3(J-1))/(X3D3[J]-X3D3(J-1))                    
      B=(X3D3(J-1)*Y3D3[J]-X3D3[J]*Y3D3(J-1))/(X3D3(J-1)-X3D3[J])
      QIN(17,I)=(A*EN+B)*1.D-18
      GO TO 3592
# IF ENERGY GT X3D3(N3D3) EV SCALE BY 1/E**3
 3591 QIN(17,I)=Y3D3(N3D3)*(X3D3(N3D3)/EN)**3*1.0D-18
 3592 if(EN <= (2.0*EIN(17))) GO TO 360
      PEQIN(17,I)=PEQEL(2,(I-IOFFN(17)))
# 3D4'
  360 if(EN <= EIN(18)) GO TO 413
      if(EN > X3D4P(N3D4P):
) GO TO 3621
      DO 361 J=2,N3D4P
      if(EN <= X3D4P[J]:
) GO TO 362
  361 CONTINUE
      J=N3D4P
  362 A=(Y3D4P[J]-Y3D4P(J-1))/(X3D4P[J]-X3D4P(J-1))                    
      B=(X3D4P(J-1)*Y3D4P[J]-X3D4P[J]*Y3D4P(J-1))/(X3D4P(J-1)-X3D4P[J])
      QIN(18,I)=(A*EN+B)*1.D-18
      GO TO 3622
# IF ENERGY GT X3D4P(N3D4P) EV SCALE BY 1/E**3
 3621 QIN(18,I)=Y3D4P(N3D4P)*(X3D4P(N3D4P)/EN)**3*1.0D-18
 3622 if(EN <= (2.0*EIN(18))) GO TO 363
      PEQIN(18,I)=PEQEL(2,(I-IOFFN(18)))
# 3D4 
  363 if(EN <= EIN(19)) GO TO 413
      if(EN > X3D4(N3D4):
) GO TO 3651
      DO 364 J=2,N3D4
      if(EN <= X3D4[J]:
) GO TO 365
  364 CONTINUE
      J=N3D4
  365 A=(Y3D4[J]-Y3D4(J-1))/(X3D4[J]-X3D4(J-1))                    
      B=(X3D4(J-1)*Y3D4[J]-X3D4[J]*Y3D4(J-1))/(X3D4(J-1)-X3D4[J])
      QIN(19,I)=(A*EN+B)*1.D-18
      GO TO 3652
# IF ENERGY GT X3D4(N3D4) EV SCALE BY 1/E**2
 3651 QIN(19,I)=Y3D4(N3D4)*(X3D4(N3D4)/EN)**2*1.0D-18
 3652 if(EN <= (2.0*EIN(19))) GO TO 366
      PEQIN(19,I)=PEQEL(2,(I-IOFFN(19)))
# 3D1''
  366 if(EN <= EIN(20)) GO TO 413
      if(EN > X3D1PP(N3D1PP):
) GO TO 3681
      DO 367 J=2,N3D1PP
      if(EN <= X3D1PP[J]:
) GO TO 368
  367 CONTINUE
      J=N3D1PP
  368 A=(Y3D1PP[J]-Y3D1PP(J-1))/(X3D1PP[J]-X3D1PP(J-1))               
      B=(X3D1PP(J-1)*Y3D1PP[J]-X3D1PP[J]*Y3D1PP(J-1))/(X3D1PP(J-1)-X3D1PP[J])
      QIN(20,I)=(A*EN+B)*1.D-18
      GO TO 3682
# IF EN GT X3D1PP(N3D1PP) EV  SCALE BY 1/E**2
 3681 QIN(20,I)=Y3D1PP(N3D1PP)*(X3D1PP(N3D1PP)/EN)**2*1.0D-18
 3682 if(EN <= (2.0*EIN(20))) GO TO 369
      PEQIN(20,I)=PEQEL(2,(I-IOFFN(20)))
# 2S5 
  369 if(EN <= EIN(21)) GO TO 413
      if(EN > X2S5(N2S5):
) GO TO 3711
      DO 370 J=2,N2S5
      if(EN <= X2S5[J]:
) GO TO 371
  370 CONTINUE
      J=N2S5
  371 A=(Y2S5[J]-Y2S5(J-1))/(X2S5[J]-X2S5(J-1))                    
      B=(X2S5(J-1)*Y2S5[J]-X2S5[J]*Y2S5(J-1))/(X2S5(J-1)-X2S5[J])
      QIN(21,I)=(A*EN+B)*1.D-18
      GO TO 3712
# IF EN GT X2S5(N2S5) EV   SCALE BY 1/E**2
 3711 QIN(21,I)=Y2S5(N2S5)*(X2S5(N2S5)/EN)**2*1.0D-18
 3712 if(EN <= (2.0*EIN(21))) GO TO 372
      PEQIN(21,I)=PEQEL(2,(I-IOFFN(21)))
# 2S4 F=0.0257
  372 if(EN <= EIN(22)) GO TO 413
      QIN(22,I)=0.0257/(EIN(22)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(22)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(22))
      if(QIN(22,I):
 < 0.0) QIN(22,I)=0.0
      if(EN <= (2.0*EIN(22):
)) GO TO 375
      PEQIN(22,I)=PEQEL(2,(I-IOFFN(22)))
# 3D1' 
  375 if(EN <= EIN(23)) GO TO 413
      if(EN > X3D1P(N3D1P):
) GO TO 3771
      DO 376 J=2,N3D1P
      if(EN <= X3D1P[J]:
) GO TO 377
  376 CONTINUE
      J=N3D1P
  377 A=(Y3D1P[J]-Y3D1P(J-1))/(X3D1P[J]-X3D1P(J-1))                    
      B=(X3D1P(J-1)*Y3D1P[J]-X3D1P[J]*Y3D1P(J-1))/(X3D1P(J-1)-X3D1P[J])
      QIN(23,I)=(A*EN+B)*1.D-18
      GO TO 3772
# IF EN GT X3D1P(N3D1P) EV  SCALE BY 1/E
 3771 QIN(23,I)=Y3D1P(N3D1P)*(X3D1P(N3D1P)/EN)*1.0D-18
 3772 if(EN <= (2.0*EIN(23))) GO TO 378
      PEQIN(23,I)=PEQEL(2,(I-IOFFN(23)))
# 3D2  F=0.074
  378 if(EN <= EIN(24)) GO TO 413
      QIN(24,I)=0.0740/(EIN(24)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(24)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(24))
      if(QIN(24,I):
 < 0.0) QIN(24,I)=0.0
      if(EN <= (2.0*EIN(24):
)) GO TO 381
      PEQIN(24,I)=PEQEL(2,(I-IOFFN(24)))
# 3S1''''
  381 if(EN <= EIN(25)) GO TO 413
      if(EN > X3S1PPPP(N3S1PPPP):
) GO TO 3831
      DO 382 J=2,N3S1PPPP 
      if(EN <= X3S1PPPP[J]:
) GO TO 383
  382 CONTINUE
      J=N3S1PPPP
  383 A=(Y3S1PPPP[J]-Y3S1PPPP(J-1))/(X3S1PPPP[J]-X3S1PPPP(J-1))         
      B=(X3S1PPPP(J-1)*Y3S1PPPP[J]-X3S1PPPP[J]*Y3S1PPPP(J-1))/(X3S1PPPP(J-1)-X3S1PPPP[J])
      QIN(25,I)=(A*EN+B)*1.D-18
      GO TO 3832
# IF EN GT X3S1PPPP(N3S1PPPP) EV  SCALE BY 1/E**3
 3831 QIN(25,I)=Y3S1PPPP(N3S1PPPP)*(X3S1PPPP(N3S1PPPP)/EN)**3*1.0D-18
 3832 if(EN <= (2.0*EIN(25))) GO TO 384
      PEQIN(25,I)=PEQEL(2,(I-IOFFN(25)))
# 3S1''  
  384 if(EN <= EIN(26)) GO TO 413
      if(EN > X3S1PP(N3S1PP):
) GO TO 3861
      DO 385 J=2,N3S1PP 
      if(EN <= X3S1PP[J]:
) GO TO 386
  385 CONTINUE
      J=N3S1PP
  386 A=(Y3S1PP[J]-Y3S1PP(J-1))/(X3S1PP[J]-X3S1PP(J-1))         
      B=(X3S1PP(J-1)*Y3S1PP[J]-X3S1PP[J]*Y3S1PP(J-1))/(X3S1PP(J-1)-X3S1PP[J])
      QIN(26,I)=(A*EN+B)*1.D-18
      GO TO 3862
# IF EN GT X3S1PP(N3S1PP) EV  SCALE BY 1/E**3
 3861 QIN(26,I)=Y3S1PP(N3S1PP)*(X3S1PP(N3S1PP)/EN)**3*1.0D-18
 3862 if(EN <= (2.0*EIN(26))) GO TO 387
      PEQIN(26,I)=PEQEL(2,(I-IOFFN(26)))
# 3S1'''
  387 if(EN <= EIN(27)) GO TO 413
      if(EN > X3S1PPP(N3S1PPP):
) GO TO 3891
      DO 388 J=2,N3S1PPP 
      if(EN <= X3S1PPP[J]:
) GO TO 389
  388 CONTINUE
      J=N3S1PPP
  389 A=(Y3S1PPP[J]-Y3S1PPP(J-1))/(X3S1PPP[J]-X3S1PPP(J-1))         
      B=(X3S1PPP(J-1)*Y3S1PPP[J]-X3S1PPP[J]*Y3S1PPP(J-1))/(X3S1PPP(J-1)-X3S1PPP[J])
      QIN(27,I)=(A*EN+B)*1.D-18
      GO TO 3892
# IF EN GT X3S1PPP(N3S1PPP) EV  SCALE BY 1/E
 3891 QIN(27,I)=Y3S1PPP(N3S1PPP)*(X3S1PPP(N3S1PPP)/EN)*1.0D-18
 3892 if(EN <= (2.0*EIN(27))) GO TO 390
      PEQIN(27,I)=PEQEL(2,(I-IOFFN(27)))
# 2S3 
  390 if(EN <= EIN(28)) GO TO 413
      if(EN > X2S3(N2S3):
) GO TO 3921
      DO 391 J=2,N2S3
      if(EN <= X2S3[J]:
) GO TO 392
  391 CONTINUE
      J=N2S3
  392 A=(Y2S3[J]-Y2S3(J-1))/(X2S3[J]-X2S3(J-1))                    
      B=(X2S3(J-1)*Y2S3[J]-X2S3[J]*Y2S3(J-1))/(X2S3(J-1)-X2S3[J])
      QIN(28,I)=(A*EN+B)*1.D-18
      GO TO 3922
# IF EN GT X2S3(N2S3) EV  SCALE BY 1/E**2
 3921 QIN(28,I)=Y2S3(N2S3)*(X2S3(N2S3)/EN)**2*1.0D-18
 3922 if(EN <= (2.0*EIN(28))) GO TO 393
      PEQIN(28,I)=PEQEL(2,(I-IOFFN(28)))
# 2S2  F=0.011
  393 if(EN <= EIN(29)) GO TO 413
      QIN(29,I)=0.0110/(EIN(29)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(29)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(29))
      if(QIN(29,I):
 < 0.0) QIN(29,I)=0.0
      if(EN <= (2.0*EIN(29):
)) GO TO 396
      PEQIN(29,I)=PEQEL(2,(I-IOFFN(29)))
# 3S1' F=0.092
  396 if(EN <= EIN(30)) GO TO 413
      QIN(30,I)=0.0920/(EIN(30)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(30)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(30))
      if(QIN(30,I):
 < 0.0) QIN(30,I)=0.0
      if(EN <= (2.0*EIN(30):
)) GO TO 399
      PEQIN(30,I)=PEQEL(2,(I-IOFFN(30)))
# 4D5 F=0.0019
  399 if(EN <= EIN(31)) GO TO 413
      QIN(31,I)=0.0019/(EIN(31)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(31)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(31))
      if(QIN(31,I):
 < 0.0) QIN(31,I)=0.0
      if(EN <= (2.0*EIN(31):
)) GO TO 400
      PEQIN(31,I)=PEQEL(2,(I-IOFFN(31)))
# 3S4 F=0.0144
  400 if(EN <= EIN(32)) GO TO 413
      QIN(32,I)=0.0144/(EIN(32)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(32)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(32))
      if(QIN(32,I):
 < 0.0) QIN(32,I)=0.0
      if(EN <= (2.0*EIN(32):
)) GO TO 401
      PEQIN(32,I)=PEQEL(2,(I-IOFFN(32)))
# 4D2 F=0.0484
  401 if(EN <= EIN(33)) GO TO 413
      QIN(33,I)=0.0484/(EIN(33)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(33)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(33))
      if(QIN(33,I):
 < 0.0) QIN(33,I)=0.0
      if(EN <= (2.0*EIN(33):
)) GO TO 402
      PEQIN(33,I)=PEQEL(2,(I-IOFFN(33)))
# 4S1' F=0.0209
  402 if(EN <= EIN(34)) GO TO 413
      QIN(34,I)=0.0209/(EIN(34)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(34)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(34))
      if(QIN(34,I):
 < 0.0) QIN(34,I)=0.0
      if(EN <= (2.0*EIN(34):
)) GO TO 403
      PEQIN(34,I)=PEQEL(2,(I-IOFFN(34)))
# 3S2  F=0.0220
  403 if(EN <= EIN(35)) GO TO 413
      QIN(35,I)=0.0220/(EIN(35)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(35)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(35))
      if(QIN(35,I):
 < 0.0) QIN(35,I)=0.0
      if(EN <= (2.0*EIN(35):
)) GO TO 404
      PEQIN(35,I)=PEQEL(2,(I-IOFFN(35)))
# 5D5  F=0.0041
  404 if(EN <= EIN(36)) GO TO 413
      QIN(36,I)=0.0041/(EIN(36)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(36)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(36))
      if(QIN(36,I):
 < 0.0) QIN(36,I)=0.0
      if(EN <= (2.0*EIN(36):
)) GO TO 405
      PEQIN(36,I)=PEQEL(2,(I-IOFFN(36)))
# 4S4  F=0.0426
  405 if(EN <= EIN(37)) GO TO 413
      QIN(37,I)=0.0426/(EIN(37)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(37)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(37))
      if(QIN(37,I):
 < 0.0) QIN(37,I)=0.0
      if(EN <= (2.0*EIN(37):
)) GO TO 406
      PEQIN(37,I)=PEQEL(2,(I-IOFFN(37)))
# 5D2  F=0.0426
  406 if(EN <= EIN(38)) GO TO 413
      QIN(38,I)=0.0426/(EIN(38)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(38)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(38))
      if(QIN(38,I):
 < 0.0) QIN(38,I)=0.0
      if(EN <= (2.0*EIN(38):
)) GO TO 407
      PEQIN(38,I)=PEQEL(2,(I-IOFFN(38)))
# 6D5  F=0.00075
  407 if(EN <= EIN(39)) GO TO 413
      QIN(39,I)=.00075/(EIN(39)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(39)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(39))
      if(QIN(39,I):
 < 0.0) QIN(39,I)=0.0
      if(EN <= (2.0*EIN(39):
)) GO TO 408
      PEQIN(39,I)=PEQEL(2,(I-IOFFN(39)))
# 5S1' F=0.00051
  408 if(EN <= EIN(40)) GO TO 413
      QIN(40,I)=.00051/(EIN(40)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(40)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(40))
      if(QIN(40,I):
 < 0.0) QIN(40,I)=0.0
      if(EN <= (2.0*EIN(40):
)) GO TO 409
      PEQIN(40,I)=PEQEL(2,(I-IOFFN(40)))
# 4S2  F=0.00074
  409 if(EN <= EIN(41)) GO TO 413
      QIN(41,I)=.00074/(EIN(41)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(41)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(41))
      if(QIN(41,I):
 < 0.0) QIN(41,I)=0.0
      if(EN <= (2.0*EIN(41):
)) GO TO 410
      PEQIN(41,I)=PEQEL(2,(I-IOFFN(41)))
# 5S4  F=0.0130 
  410 if(EN <= EIN(42)) GO TO 413
      QIN(42,I)=0.0130/(EIN(42)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(42)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(42))
      if(QIN(42,I):
 < 0.0) QIN(42,I)=0.0
      if(EN <= (2.0*EIN(42):
)) GO TO 411
      PEQIN(42,I)=PEQEL(2,(I-IOFFN(42)))
# 6D2  F=0.0290 
  411 if(EN <= EIN(43)) GO TO 413 
      QIN(43,I)=0.0290/(EIN(43)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(43)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(43))
      if(QIN(43,I):
 < 0.0) QIN(43,I)=0.0
      if(EN <= (2.0*EIN(43):
)) GO TO 412
      PEQIN(43,I)=PEQEL(2,(I-IOFFN(43)))
# SUM HIGHER J=1 STATES F=0.1315
  412 if(EN <= EIN(44)) GO TO 413
      QIN(44,I)=0.1315/(EIN(44)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(44)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(44))
      if(QIN(44,I):
 < 0.0) QIN(44,I)=0.0
      if(EN <= (2.0*EIN(44):
)) GO TO 413
      PEQIN(44,I)=PEQEL(2,(I-IOFFN(44)))
  413 CONTINUE
# BREMSSTRAHLUNG X-SECTION
      QIN(45,I)=0.0
      if(EN <= 1000.):
 GO TO 450
      DO 414 J=2,NBREM
      if(EN <= EBRM[J]:
) GO TO 415
  414 CONTINUE
      J=NBREM
  415 A=(math.log(Z18T[J])-math.log(Z18T(J-1)))/(EBRM[J]-EBRM(J-1))
      B=(math.log(Z18T[J])*EBRM(J-1)-math.log(Z18T(J-1))*EBRM[J])/(EBRM(J-1)-EBRM[J])
      QIN(45,I)=math.exp(A*EN+B)*1.D-24
  450 CONTINUE     
      Q1SSUM=QIN(1,I)+QIN(2,I)+QIN(3,I)+QIN(4,I) 
      QPSSUM=QIN(5,I)+QIN(6,I)+QIN(7,I)+QIN(8,I)+QIN(9,I)+QIN(10,I)+QIN(11,I)+QIN(12,I)+QIN(13,I)+QIN(14,I)   
      QDSSUM=QIN(17,I)+QIN(18,I)+QIN(19,I)+QIN(20,I)+QIN(21,I)+QIN(22,I)+QIN(23,I)+QIN(24,I)+QIN(25,I)+QIN(26,I)+QIN(27,I)+QIN(28,I)+QIN(29,I)+QIN(30,I)+QIN(31,I)+QIN(32,I)+QIN(33,I)+QIN(34,I)+QIN(35,I)+QIN(36,I)+QIN(37,I)+QIN(38,I)+QIN(39,I)+QIN(40,I)+QIN(41,I)+QIN(42,I)+QIN(43,I)+QIN(44,I)+QIN(15,I)+QIN(16,I)
      TOTSUM=Q1SSUM+QPSSUM+QDSSUM    
#     WRITE(6,997) EN,QIN(1,I),QIN(2,I),QIN(3,I),QIN(4,I),Q1SSUM,QPSSUM,
#    /QDSSUM,TOTSUM
# 997 print(' EN =',D12.5,' Q1S5 =','%.3f' %,' Q1S4 =','%.3f' %,' Q1S3 =',
#    /'%.3f' %,' Q1S2 =','%.3f' %,/,'S1 =','%.3f' %,' P2=','%.3f' %,' D3 =','%.3f' %,
#    /' QTOT=','%.3f' %)  
#  TOTAL X-SECTION
      Q(1,I)=QELA+Q1SSUM+QPSSUM+QDSSUM+QION(1,I)+QION(2,I)+QION(3,I)+QION(4,I)+QION(5,I)+QION(6,I)+QION(7,I)+QIN(45,I)
  900 CONTINUE                                                          
# SAVE COMPUTE TIME
      DO 910 K=1,NIN
      if(EFINAL <= EIN[K]:
) :
       NIN=K-1
       GO TO 911
      # endif
  910 CONTINUE
  911 CONTINUE
      if(EFINAL > 1000.):
 NIN=45
#                                                                       
      RETURN                                                            
      # end 
      def GAS3(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY  ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN) 
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000)
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6)  
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)    
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)  
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]  
      DIMENSION XEN(144),YEM(144),YEL(144),YEPS(144),XION(90),YION(90),YINC(90),X23S(139),Y23S(139),X21S(128),Y21S(128),X23P(128),Y23P(128),X21P(125),Y21P(125),X33S(106),Y33S(106),X31S(87),Y31S(87),X33P(91),Y33P(91),X33D[108],Y33D[108],X31D[94],Y31D[94],X31P(114),Y31P(114),X43S(59),Y43S(59),X41S(55),Y41S(55),X43P(76),Y43P(76),X43D[65],Y43D[65],X41D[53],Y41D[53],X43F(40),Y43F(40),X41F(57),Y41F(57),X41P(96),Y41P(96),IOFFN(49),IOFFION(2)  
      DIMENSION Z2T(25),EBRM(25) 
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME  
# ELASTIC                            
      DATA XEN/0.00,.008,.009,0.01,.013,.017,.020,.025,0.03,0.04, 0.05,0.06,0.07,0.08,0.09,0.10,0.12,0.15,0.18,0.20,                0.25,0.30,0.40,0.50,0.60,0.70,0.80,0.90,1.00,1.20,                1.50,1.80,2.00,2.50,3.00,4.00,5.00,6.00,7.00,8.00,                9.00,10.0,11.0,12.0,14.0,16.0,18.0,20.0,25.0,30.0,                35.0,40.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,200.,250.,300.,400.,500.,600.,800.,1000.,1500.,2000.,3000.,4000.,6000.,8000.,10000.,1.25D4,1.5D4,2.0D4,2.5'%.3f' %.0D4,4.0D4,6.0D4,8.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5'%.3f' %.0'%.3f' %.5D5,4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,2.0D6,2.5'%.3f' %.0'%.3f' %.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5'%.3f' %.0'%.3f' %.5D7,4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,1.0D8,1.25D8,1.5D8,1.75D8,2.0D8,2.5'%.3f' %.0'%.3f' %.5D8,4.0D8,4.5D8,5.0D8,6.0D8,7.0D8,8.0D8,9.0D8,1.0D9/
# ELASTIC MOMENTUM TRANSFER           
      DATA YEM/4.89,5.18,5.19,5.21,5.26,5.31,5.35,5.41,5.46,5.54,     5.62,5.68,5.74,5.79,5.83,5.86,5.94,6.04,6.12,6.16,                6.27,6.35,6.49,6.59,6.66,6.73,6.77,6.82,6.85,6.91,                6.96,6.98,6.99,6.96,6.89,6.62,6.31,6.00,5.68,5.35,                5.03,4.72,4.45,4.20,3.68,3.28,2.95,2.64,2.05,1.63,                1.33,1.09,.785,.590,.465,.375,.309,.262,.179,.132,.0807,.0549,.0400,.0242,.0164,.0119,.00716,.00482,.00234,.0014,.000676,4.03D-4,1.93D-4,1.15D-4,7.65D-5,5.10D-5,3.66D-5,2.17D-5,1.45D-5,1.04D-5,6.18D-6,2.99D-6,1.71D-6,1.21D-6,8.26D-7,6.05D-7,4.66D-7,3.73D-7,2.58D-7,1.92D-7,1.50D-7,1.22D-7,1.01D-7,8.59D-8,6.48D-8,5.11D-8,4.17D-8,3.48D-8,2.96D-8,2.10D-8,1.58D-8,1.24D-8,1.01D-8,7.05D-9,5.24D-9,4.07D-9,3.25D-9,2.67D-9,2.23D-9,1.63D-9,1.25D-9,9.89D-10,8.04D-10,6.67D-10,4.47D-10,3.22D-10,2.43D-10,1.91D-10,1.27D-10,9.04D-11,6.79D-11,5.29D-11,4.24D-11,3.48D-11,2.46D-11,1.84D-11,1.42D-11,1.13D-11,9.26D-12,6.00D-12,4.20D-12,3.10D-12,2.38D-12,1.53D-12,1.06D-12,7.82D-13,5.99D-13,4.74D-13,3.84D-13,2.67D-13,1.96D-13,1.50D-13,1.19D-13,9.62D-14/  
# ELASTIC TOTAL                                 
      DATA YEL/4.89,5.19,5.20,5.21,5.26,5.29,5.33,5.37,5.41,5.47,5.53,5.58,5.62,5.66,5.69,5.70,5.76,5.83,5.88,5.90,5.96,6.01,6.08,6.12,6.14,6.16,6.16,6.17,6.16,6.16,6.14,6.11,6.09,6.01,5.90,5.60,5.36,5.10,4.91,4.70,4.51,4.32,4.21,4.10,3.75,3.49,3.27,3.03,2.54,2.14,1.83,1.61,1.27,1.06,.884,.746,.652,.580,.460,.355,.244,.194,.150,.117,.087,.071,.052,.041,.028,.022,.014,.0108,.00722,.00544,.00437,.00352,.00295,.00224,.00182,.00154,.00118,.000830,.000654,.000550,.000466,.000411,.000371,.000342,.000301,.000274,.000255,.000241,.000230,.000222,.000209,.000201,.000195,.000190,.000186,.000180,.000177,.000174,.000172,.000170,.000169,.000168,.000167,.000167,.000167,.000166,.000166,.000166,.000166,.000166,30*.000165/
# ANGULAR DISTRIBUTION PARAMETER EPSILON
# EPSILON = 1.0-YEPS
      DATA YEPS/1.0,.99711,.99712,1.0,1.0,1.00562,1.00565,1.01118,1.01386,1.01920,1.02440,1.02688,1.03202,1.03445,1.03689,1.04209,1.04686,1.05400,1.06119,1.06604,1.07792,1.08474,1.10094,1.11490,1.12663,1.13826,1.14789,1.15724,1.16707,1.18142,1.19873,1.21165,1.21951,1.23447,1.24855,1.26918,1.26215,1.26104,1.23265,1.20568,1.17192,1.13835,1.08539,1.03657,.97200,.90989,.85384,.80836,.71541,.65146,.60355,.53739,.46277,.38963,.35522,.32989,.29979,.27742,.21850,.20332,.16921,.13304,.12155,.08318,.07263,.06130,.04637,.03720,.02338,.016295,.011386,.008195,.005394,.004037,.003205,.002548,.002113,.001572,.001246,.001044,7.61D-4,4.925D-4,3.404D-4,2.803D-4,2.179D-4,1.766D-4,1.475D-4,1.258D-4,9.60D-5,7.65D-5,6.29D-5,5.29D-5,4.53D-5,3.93D-5,3.07D-5,2.47D-5,2.04D-5,1.72D-5,1.47D-5,1.05D-5,7.84D-6,6.12D-6,4.91D-6,3.373D-6,2.463D-6,1.881D-6,1.483D-6,1.200D-6,9.91D-7,7.09D-7,5.322D-7,4.146D-7,3.319D-7,2.718D-7,1.775D-7,1.249D-7,9.27D-8,7.15D-8,4.62D-8,3.23D-8,2.382D-8,1.828D-8,1.447D-8,1.173D-8,8.14D-9,5.97D-9,4.56D-9,3.59D-9,2.90D-9,1.83D-9,1.26D-9,9.10D-10,6.90D-10,4.40D-10,3.00D-10,2.16D-10,1.63D-10,1.27D-10,1.02D-10,7.0D-11,5.1D-11,3.8D-11,3.0D-11,2.4D-11/
#  IONISATION (VALUES ABOVE 20KEV GENERATED BY BORN-BETHE IN SUB)
      DATA XION/24.58739,25.0,25.5,26.0,26.5,27.0,27.5,28.0,28.5,29.0,29.5,30.0,30.5,31.0,31.5,32.0,32.5,33.0,33.5,34.0,    36.0,38.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,105.,110.,115.,120.,125.,130.,135.,140.,145.,150.,160.,170.,180.,190.,200., 225.,250.,275.,300.,350.,400.,450.,500.,550.,600.,               650.,700.,750.,800.,850.,900.,950.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,1.0D4,1.2D4,1.4D4,1.6D4,1.8D4,2.0D4/
# GROSS IONISATION 
      DATA YION/.0,.0038,.0094,.0155,.0218,.0279,.0336,.0392,.0446,.0504,.0561,.0612,.0667,.0722,.0773,.0826,.0878,.0929,.0981,.103,.121,.138,.154,.188,.219,.242,.262,.276,.290,.301,.311,.319,.326,.333,.336,.338,.340,.341,.342,.342,.343,.342,.341,.340,.338,.335,.332,.326,.322,.316, .302,.290,.279,.268,.246,.231,.216,.203,.191,.180,              
     ..171,.163,.155,.148,.142,.136,.130,.125,.109,.097,.0872,.0795,.0729,.0608,.0524,.0458,.0410,.0368,.0336,.0311,.0293,.0255,.0229,.0206,.0192,.0164,.0147,.0130,.0119,.0108/
# COUNTING IONISATION      
      DATA YINC/.0,.0038,.0094,.0155,.0218,.0279,.0336,.0392,.0446,.0504,.0561,.0612,.0667,.0722,.0773,.0826,.0878,.0929,.0981,.103,.121,.138,.154,.188,.219,.242,.262,.276,.290,.301,.311,.319,.326,.333,.336,.338,.340,.341,.341,.341,.342,.341,.340,.339,.337,.334,.331,.325,.321,.315,.301,.289,.278,.267,.245,.230,.215,.202,.190,.179,           .170,.162,.154,.147,.141,.135,.129,.124,.108,.096,.0867,.0791,.0725,.0605,.0522,.0456,.0408,.0367,.0335,.0310,.0292,.0254,.0228,.0205,.0191,.0163,.0146,.0129,.0118,.0107/
#  ALL EXCITATIONS IN UNITS OF 10**-18
#  2 3S J=1 METASTABLE
      DATA X23S/19.81961,19.83,19.85,19.88,19.9,19.95,20.0,20.05,20.1,20.15,20.2,20.25,20.3,20.35,20.4,20.45,20.50,20.55,20.6,20.63,20.66,20.7,20.75,20.8,20.85,20.90,20.94,20.97,21.0,21.05,21.1,21.15,21.2,21.25,21.3,21.4,21.5,22.0,22.2,22.25,22.3,22.35,22.4,22.42,22.44,22.46,22.48,22.5,22.52,22.55,22.6,22.62,22.64,22.66,22.68,22.7,22.71,22.72,22.75,22.8,22.85,22.88,22.9,22.95,22.97,23.0,23.05,23.1,23.3,23.4,23.5,23.6,23.8,24.0,24.5,25.0,26.0,27.0,28.0,29.0,30.0,31.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,100.,110.,120.,130.,140.,150.,160.,180.,200.,220.,240.,260.,280.,300.,340.,380.,420.,460.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000.,1100.,1200.,1300.,1400.,1500.,1600.,1700.,1800.,1900.,2000./
      DATA Y23S/0.00,.780,1.16,1.64,1.98,2.81,3.53,4.13,4.61,4.96,5.20,5.35,5.41,5.36,5.21,4.95,4.63,4.23,3.66,3.16,3.04,3.13,3.41,3.77,4.14,4.44,4.54,4.43,4.27,3.96,3.69,3.48,3.32,3.21,3.15,3.08,3.06,3.09,3.08,3.04,2.97,2.84,2.25,1.58,1.83,4.91,4.45,4.13,3.95,3.79,3.60,3.51,3.07,2.45,2.61,2.67,2.36,2.97,3.01,2.96,2.87,2.61,3.04,2.75,3.16,3.06,2.90,2.79,2.81,2.86,2.75,2.80,2.71,2.65,2.58,2.48,2.39,2.30,2.19,2.09,1.98,1.84,1.73,1.53,1.36,1.22,1.09,.985,.892,.812,.742,.680,.555,.461,.389,.332,.287,.250,.220,.194,.154,.125,.103,.0861,.0726,.0617,.0529,.0397,.0305,.0239,.0191,.0154,.0126,.0105,.00740,.00542,.00407,.00314,.00247,.00187,.00145,.00115,9.23D-4,7.53D-4,6.22D-4,5.20D-4,4.39D-4,3.74D-4,3.21D-4,2.42D-4,1.86D-4,1.47D-4,1.18D-4,9.57D-5,7.89D-5,6.58D-5,5.54D-5,4.71D-5,4.04D-5/
# 2 1S J=0 METASTABLE
      DATA X21S/20.61577,20.62,20.63,20.65,20.67,20.69,20.72,20.75,20.80,20.85,20.90,20.96,20.98,21.0,21.05,21.1,21.15,21.2,21.22,21.25,21.3,21.4,21.5,21.6,21.7,21.8,21.9,22.0,22.1,22.2,22.25,22.3,22.35,22.4,22.42,22.44,22.46,22.48,22.5,22.55,22.59,22.6,22.61,22.62,22.63,22.64,22.65,22.68,22.7,22.71,22.72,22.73,22.75,22.78,22.8,22.85,22.87,22.88,22.89,22.9,22.91,22.92,22.93,22.94,22.95,22.96,22.97,22.98,22.99,23.0,23.01,23.05,23.1,23.2,23.3,23.4,23.5,23.6,23.8,24.0,24.2,24.4,24.7,25.0,26.0,28.0,30.0,32.0,35.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,80.0,90.0,100.,110.,120.,140.,170.,200.,240.,280.,320.,360.,400.,450.,500.,550.,600.,650.,700.,800.,900.,1000.,1100.,1200.,1400.,1600.,1800.,2000.,2200.,2400.,2700.,3000./
      DATA Y21S/0.00,.406,.477,.664,.820,.946,1.10,1.24,1.47,1.72,2.03,2.52,2.40,2.39,2.39,2.42,2.46,2.53,2.55,2.53,2.52,2.53,2.57,2.59,2.62,2.64,2.65,2.65,2.65,2.62,2.59,2.53,2.42,2.14,1.86,2.17,3.35,3.01,2.79,2.34,1.80,1.88,2.53,3.37,3.64,3.55,3.42,3.23,2.95,2.45,1.84,2.32,2.49,2.60,2.62,2.57,2.40,2.57,2.59,2.32,1.73,2.55,2.36,2.35,2.32,2.23,2.50,2.64,2.61,1.86,2.28,2.53,2.35,2.39,2.44,2.51,2.48,2.45,2.44,2.49,2.57,2.63,2.56,2.54,2.53,2.51,2.45,2.35,2.21,2.05,1.88,1.75,1.65,1.56,1.48,1.41,1.30,1.21,1.14,1.08,1.03,.948,.850,.771,.686,.617,.560,.512,.471,.428,.392,.361,.335,.312,.292,.259,.233,.211,.193,.178,.154,.136,.121,.109,.0997,.0916,.0817,.0737/
# 2 3P J=2,1,0 
      DATA X23P/20.96409,20.97,21.0,21.05,21.1,21.15,21.2,21.25,21.3,21.35,21.4,21.5,21.6,21.7,21.8,21.9,22.0,22.1,22.2,22.3,22.4,22.45,22.5,22.55,22.6,22.61,22.62,22.63,22.64,22.65,22.66,22.67,22.68,22.69,22.7,22.71,22.72,22.73,22.75,22.77,22.8,22.85,22.88,22.9,22.91,22.92,22.93,22.96,22.97,22.99,23.0,23.04,23.06,23.07,23.08,23.1,23.2,23.3,23.4,23.5,23.6,23.7,23.8,23.9,24.0,24.2,24.4,24.6,25.0,26.0,27.0,28.0,29.0,30.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,110.,120.,130.,140.,150.,160.,170.,180.,190.,200.,220.,240.,260.,280.,300.,340.,380.,420.,460.,500.,550.,600.,700.,800.,900.,1000.,1200.,1400.,1600.,1800.,2000.,2300.,2600.,3000./
      DATA Y23P/0.00,.0936,.241,.442,.611,.761,.912,1.03,1.10,1.17,1.23,1.32,1.40,1.47,1.54,1.60,1.66,1.73,1.80,1.87,1.94,2.05,2.07,2.09,2.22,2.48,2.68,2.60,2.27,1.78,1.45,1.43,1.52,1.59,1.60,1.45,1.47,1.70,1.83,1.91,1.95,1.93,2.32,1.98,1.72,2.23,2.09,2.12,2.07,2.17,1.82,2.18,1.80,1.82,1.94,1.94,1.90,1.88,1.89,2.00,2.16,2.21,2.14,2.08,2.09,2.03,2.16,2.26,2.29,2.41,2.47,2.48,2.47,2.43,2.30,2.15,2.00,1.84,1.69,1.55,1.43,1.31,1.21,1.11,.907,.748,.622,.522,.441,.375,.322,.277,.241,.210,.162,.127,.101,.0812,.0663,.0547,.0455,.0382,.0324,.0277,.0206,.0156,.0121,.00961,.00772,.00518,.00363,.00264,.00197,.00151,.00118,8.48D-4,5.21D-4,3.42D-4,2.37D-4,1.70D-4,9.65D-5,5.99D-5,3.96D-5,2.76D-5,2.00D-5,1.30D-5,8.94D-6,5.78D-6/
# 2 1P RESONANCE RADIATION J=1   58.434 NM       OSC STRENGTH F=0.27608  
      DATA X21P/21.21802,21.23,21.25,21.3,21.4,21.5,21.6,21.7,21.8,21.9,22.0,22.1,22.2,22.3,22.35,22.4,22.42,22.44,22.46,22.48,22.5,22.55,22.57,22.59,22.6,22.61,22.62,22.63,22.64,22.65,22.66,22.68,22.7,22.71,22.72,22.73,22.75,22.8,22.85,22.87,22.88,22.9,22.91,22.94,22.96,22.97,22.98,22.99,23.0,23.01,23.05,23.1,23.2,23.3,23.4,23.5,23.6,23.7,23.8,23.9,24.0,24.2,24.4,24.6,24.8,25.0,26.0,27.0,28.0,29.0,30.0,31.0,32.0,33.0,34.0,35.0,36.0,37.0,38.0,39.0,40.0,42.0,44.0,46.0,48.0,50.0,52.0,54.0,56.0,58.0,60.0,64.0,68.0,72.0,76.0,80.0,85.0,90.0,95.0,100.,110.,120.,130.,140.,160.,180.,200.,240.,280.,320.,360.,400.,450.,500.,550.,600.,650.,700.,800.,900.,1000.,1100.,1200.,1300.,1400./
      DATA Y21P/0.00,.0519,.0884,.163,.290,.397,.493,.582,.666,.748,.831,.914,.994,1.06,1.09,1.10,1.10,1.36,1.46,1.35,1.32,1.30,1.28,1.19,1.07,.943,.922,.941,.872,.751,.737,.959,1.13,1.17,.920,1.03,1.12,1.23,1.35,1.27,1.18,1.22,1.03,1.14,1.12,1.38,1.29,1.25,1.38,1.24,1.12,1.13,1.11,1.12,1.16,1.30,1.41,1.44,1.41,1.37,1.39,1.42,1.52,1.70,1.80,1.89,2.16,2.42,2.69,2.96,3.24,3.53,3.82,4.12,4.42,4.71,5.00,5.29,5.57,5.85,6.12,6.63,7.10,7.53,7.93,8.28,8.61,8.90,9.16,9.39,9.60,9.95,10.2,10.4,10.6,10.7,10.7,10.8,10.8,10.7,10.6,10.4,10.2,10.0,9.57,9.13,8.71,7.96,7.33,6.79,6.32,5.92,5.50,5.13,4.82,4.54,4.30,4.08,3.72,3.41,3.16,2.95,2.76,2.60,2.46/
# 3 3S J=1 
      DATA X33S/22.71847,22.72,22.73,22.74,22.75,22.78,22.8,22.83,22.85,22.86,22.87,22.88,22.89,22.9,22.91,22.912,22.914,22.916,22.92,22.94,22.96,22.98,23.0,23.02,23.05,23.1,23.2,23.25,23.3,23.35,23.4,23.44,23.48,23.52,23.57,23.59,23.62,23.65,23.7,23.75,23.82,23.89,23.93,24.0,24.4,25.0,26.0,27.0,28.0,29.0,30.0,31.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,54.0,58.0,62.0,66.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,110.,120.,130.,140.,150.,160.,170.,180.,200.,220.,240.,260.,280.,300.,340.,380.,420.,460.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000.,1100.,1200.,1300.,1400./
      DATA Y33S/0.00,.800,1.15,1.03,.985,.854,.812,.752,.644,.503,.277,1.79,1.17,1.06,1.32,1.51,1.57,1.37,.896,.848,.907,.816,.838,.656,.872,.859,.890,.900,.860,.750,.620,.810,.770,.960,.870,.870,.730,.710,.710,.730,.770,.690,.760,.742,.725,.694,.665,.635,.605,.577,.550,.524,.499,.452,.409,.370,.336,.305,.278,.253,.231,.212,.178,.151,.130,.112,.0968,.0817,.0696,.0597,.0516,.0449,.0393,.0306,.0242,.0195,.0160,.0132,.0111,.00938,.00800,.00596,.00456,.00356,.00284,.00230,.00188,.00131,9.53D-4,7.13D-4,5.47D-4,4.29D-4,3.25D-4,2.52D-4,1.99D-4,1.60D-4,1.31D-4,1.08D-4,9.02D-5,7.62D-5,6.49D-5,5.58D-5,4.20D-5,3.25D-5,2.56D-5,2.06D-5/
# 3 1S J=0
      DATA X31S/22.92032,22.96,22.985,23.02,23.05,23.07,23.1,23.15,23.2,23.25,23.3,23.33,23.36,23.39,23.41,23.45,23.48,23.51,23.54,23.56,23.59,23.62,23.65,23.68,23.73,23.82,23.88,23.94,24.0,25.0,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,44.0,48.0,52.0,56.0,60.0,65.0,70.0,75.0,80.0,90.0,100.,110.,120.,130.,140.,160.,180.,200.,220.,240.,260.,280.,300.,340.,380.,420.,460.,500.,550.,600.,650.,700.,750.,800.,900.,1000.,1100.,1200.,1300.,1400.,1500.,1600.,1800.,2000.,2400.,2800.,3200.,3600.,4000./
      DATA Y31S/0.00,.535,.457,.587,.490,.490,.478,.491,.506,.512,.501,.470,.418,.374,.351,.371,.520,.681,.520,.467,.496,.410,.442,.429,.416,.455,.377,.444,.422,.426,.428,.429,.425,.419,.412,.402,.396,.387,.370,.354,.338,.324,.311,.296,.283,.271,.260,.242,.226,.213,.203,.193,.185,.172,.161,.152,.144,.137,.131,.125,.120,.111,.103,.0957,.0894,.0839,.0778,.0725,.0678,.0636,.0599,.0566,.0509,.0462,.0423,.0389,.0361,.0336,.0315,.0296,.0264,.0238,.0199,.0171,.0150,.0133,.0120/
# 3 3P J=2,1,0
      DATA X33P/23.00707,23.02,23.03,23.04,23.05,23.06,23.07,23.08,23.1,23.2,23.3,23.4,23.5,23.55,23.6,23.65,23.7,23.8,23.9,24.0,24.1,24.2,24.3,24.4,24.6,24.8,25.0,26.0,27.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,44.0,48.0,52.0,56.0,60.0,64.0,68.0,72.0,76.0,80.0,85.0,90.0,95.0,100.,110.,120.,130.,140.,150.,160.,170.,180.,200.,220.,240.,260.,280.,300.,340.,380.,420.,460.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000.,1100.,1200.,1300.,1400.,1600.,1800.,2000.,2200.,2400.,2600.,2800.,3000./
      DATA Y33P/0.00,.387,.410,.179,.148,.335,.381,.282,.280,.309,.332,.359,.411,.416,.405,.448,.438,.467,.485,.493,.500,.515,.517,.513,.503,.508,.512,.516,.515,.524,.544,.539,.523,.500,.474,.446,.392,.342,.297,.259,.226,.197,.173,.152,.134,.118,.102,.0878,.0762,.0665,.0512,.0401,.0318,.0255,.0208,.0171,.0142,.0119,.00854,.00632,.00479,.00371,.00292,.00234,.00157,.00109,7.93D-4,5.92D-4,4.53D-4,3.34D-4,2.53D-4,1.96D-4,1.55D-4,1.24D-4,1.01D-4,8.37D-5,6.99D-5,5.89D-5,5.02D-5,3.72D-5,2.83D-5,2.21D-5,1.75D-5,1.16D-5,8.05D-6,5.82D-6,4.34D-6,3.32D-6,2.60D-6,2.07D-6,1.68D-6/
# 3 3D J=3,2,1
      DATA X33D/23.07365,23.1,23.15,23.2,23.25,23.3,23.35,23.4,23.45,23.5,23.55,23.6,23.66,23.7,23.75,23.8,23.85,23.9,23.95,24.0,24.05,24.1,24.15,24.2,24.25,24.3,24.35,24.4,24.45,24.5,24.55,24.6,24.65,24.7,24.8,24.9,25.0,26.0,27.0,28.0,29.0,30.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,52.0,54.0,56.0,58.0,60.0,64.0,68.0,72.0,76.0,80.0,85.0,90.0,95.0,100.,110.,120.,130.,140.,150.,160.,180.,200.,220.,240.,260.,280.,300.,320.,340.,360.,380.,400.,440.,480.,520.,560.,600.,650.,700.,750.,800.,850.,900.,1000.,1100.,1200.,1300.,1400.,1600.,1800.,2000.,2200.,2400.,2600.,2800.,3000./
      DATA Y33D/0.00,.00956,.0236,.0401,.0602,.0861,.120,.166,.222,.229,.238,.197,.123,.118,.110,.112,.104,.110,.099,.0985,.113,.107,.109,.114,.118,.119,.118,.116,.113,.105,.112,.116,.118,.119,.120,.120,.119,.115,.118,.121,.121,.120,.113,.105,.0958,.0867,.0780,.0701,.0628,.0563,.0505,.0453,.0407,.0366,.0330,.0298,.0269,.0221,.0183,.0152,.0127,.0107,.00868,.00712,.00588,.00490,.00347,.00252,.00188,.00142,.00110,8.64D-4,5.56D-4,3.76D-4,2.64D-4,1.92D-4,1.44D-4,1.10D-4,8.60D-5,6.84D-5,5.53D-5,4.53D-5,3.76D-5,3.15D-5,2.28D-5,1.70D-5,1.30D-5,1.02D-5,8.12D-6,6.25D-6,4.92D-6,3.94D-6,3.21D-6,2.64D-6,2.21D-6,1.58D-6,1.17D-6,8.95D-7,6.98D-7,5.55D-7,3.67D-7,2.56D-7,1.85D-7,1.38D-7,1.06D-7,8.32D-8,6.64D-8,5.38D-8/
# 3 1D J=2
      DATA X31D/23.07407,23.08,23.1,23.15,23.2,23.25,23.3,23.35,23.4,23.45,23.5,23.55,23.6,23.66,23.7,23.75,23.8,23.85,23.9,23.95,24.0,24.05,24.1,24.15,24.2,24.25,24.3,24.35,24.4,24.45,24.5,24.6,24.7,24.8,25.0,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,54.0,58.0,62.0,66.0,70.0,75.0,80.0,90.0,100.,110.,120.,140.,160.,180.,200.,220.,240.,260.,280.,300.,320.,340.,370.,400.,440.,480.,520.,560.,600.,650.,700.,800.,900.,1000.,1100.,1200.,1300.,1400.,1600.,1800.,2000.,2200.,2400.,2600.,2800.,3000./
      DATA Y31D/0.00,.097,.0973,.110,.126,.148,.175,.200,.221,.237,.235,.198,.185,.192,.168,.181,.189,.172,.193,.184,.190,.209,.206,.211,.214,.215,.212,.206,.199,.191,.174,.177,.179,.180,.181,.180,.180,.188,.198,.209,.217,.224,.229,.232,.234,.235,.234,.233,.228,.222,.215,.207,.199,.190,.180,.163,.148,.135,.124,.105,.0913,.0803,.0715,.0643,.0584,.0534,.0492,.0456,.0424,.0397,.0361,.0332,.0299,.0272,.0249,.0230,.0213,.0196,.0181,.0156,.0138,.0124,.0112,.0102,.00938,.00868,.00756,.00669,.00600,.00544,.00497,.00458,.00425,.00396/
# 3 1P  RESONANCE RADIATION J=1  53.703 NM     OSC STRENGTH F=0.07342
      DATA X31P/23.08702,23.1,23.15,23.2,23.25,23.3,23.35,23.4,23.45,23.5,23.54,23.56,23.60,23.64,23.68,23.7,23.75,23.80,23.88,23.9,23.95,24.0,24.05,24.1,24.15,24.2,24.3,24.4,24.5,24.6,24.7,24.8,25.0,25.2,25.4,25.6,26.0,27.0,28.0,29.0,30.0,31.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,52.0,54.0,56.0,58.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,110.,120.,130.,140.,160.,180.,200.,220.,240.,260.,280.,300.,340.,380.,420.,460.,500.,550.,600.,650.,700.,750.,800.,900.,1000.,1100.,1200.,1300.,1400.,1600.,1800.,2000.,2200.,2400.,2600.,2800.,3000.,3400.,3800.,4200.,4600.,5000.,5500.,6000.,6500.,7000.,8000.,9000.,10000./
      DATA Y31P/0.00,.114,.129,.137,.137,.134,.131,.130,.128,.129,.117,.127,.122,.163,.146,.150,.191,.180,.226,.224,.218,.230,.245,.253,.265,.274,.294,.308,.330,.360,.373,.382,.397,.409,.418,.423,.434,.469,.516,.577,.648,.723,.808,.941,1.07,1.20,1.32,1.43,1.54,1.64,1.74,1.82,1.90,1.97,2.04,2.10,2.15,2.27,2.35,2.42,2.47,2.50,2.52,2.53,2.53,2.52,2.50,2.47,2.42,2.33,2.24,2.14,2.06,1.97,1.90,1.82,1.76,1.64,1.53,1.44,1.36,1.29,1.21,1.15,1.08,1.03,.982,.938,.862,.799,.745,.699,.658,.623,.563,.514,.474,.440,.411,.386,.364,.344,.312,.285,.263,.244,.228,.211,.197,.184,.173,.155,.140,.128/
# 4 3S J=1
      DATA X43S/23.59396,23.62,23.65,23.7,23.8,23.9,24.0,25.0,26.0,27.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,52.0,54.0,56.0,58.0,60.0,64.0,68.0,72.0,76.0,80.0,85.0,90.0,95.0,100.,110.,120.,130.,140.,150.,160.,180.,200.,220.,240.,260.,280.,300.,320.,340.,360.,380.,400.,440.,480.,520.,560.,600./
      DATA Y43S/0.0,.314,.304,.292,.276,.266,.260,.243,.238,.234,.227,.212,.195,.178,.162,.147,.133,.121,.110,.100,.0911,.0832,.0761,.0697,.0640,.0589,.0543,.0464,.0399,.0346,.0301,.0264,.0225,.0194,.0168,.0147,.0113,.00894,.00718,.00585,.00483,.00403,.00289,.00214,.00164,.00127,.00101,8.17D-4,6.69D-4,5.55D-4,4.66D-4,3.94D-4,3.37D-4,2.90D-4,2.19D-4,1.70D-4,1.34D-4,1.08D-4,8.81D-5/
# 4 1S J=0
      DATA X41S/23.67357,23.7,23.8,23.9,24.0,25.0,26.0,27.0,28.0,29.0,30.0,32.0,34.0,36.0,38.0,40.0,44.0,48.0,52.0,56.0,60.0,65.0,70.0,75.0,80.0,90.0,100.,110.,120.,130.,140.,160.,180.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1200.,1400.,1600.,1800.,2000.,2200.,2400.,2600.,2800.,3000./
      DATA Y41S/0.0,.109,.110,.111,.112,.121,.128,.133,.138,.141,.143,.146,.148,.147,.146,.144,.139,.134,.129,.123,.118,.113,.108,.103,.0990,.0922,.0868,.0823,.0786,.0753,.0725,.0677,.0636,.0601,.0527,.0469,.0422,.0382,.0349,.0322,.0277,.0243,.0216,.0195,.0177,.0150,.0130,.0114,.0102,.00925,.00845,.00777,.00719,.00669,.00626/
# 4 3P J=2,1,0
      DATA X43P/23.70789,23.75,23.8,24.0,25.0,26.0,27.0,28.0,29.0,30.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,54.0,58.0,62.0,66.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,110.,120.,130.,140.,150.,160.,170.,180.,190.,200.,220.,240.,260.,280.,300.,320.,340.,360.,380.,400.,440.,480.,520.,560.,600.,650.,700.,750.,800.,850.,900.,950.,1000.,1100.,1200.,1300.,1400.,1600.,1800.,2000.,2200.,2400.,2600.,2800.,3000./
      DATA Y43P/0.0,.085,.110,.118,.152,.177,.194,.205,.211,.215,.215,.209,.200,.189,.178,.167,.156,.146,.136,.127,.110,.0962,.0840,.0736,.0647,.0553,.0475,.0410,.0356,.0310,.0271,.0210,.0165,.0132,.0106,.00865,.00713,.00593,.00498,.00421,.00359,.00266,.00202,.00156,.00123,9.88D-4,8.03D-4,6.60D-4,5.49D-4,4.61D-4,3.90D-4,2.87D-4,2.17D-4,1.67D-4,1.32D-4,1.06D-4,8.18D-5,6.46D-5,5.18D-5,4.22D-5,3.48D-5,2.90D-5,2.45D-5,2.08D-5,1.54D-5,1.17D-5,9.13D-6,7.25D-6,4.78D-6,3.32D-6,2.39D-6,1.78D-6,1.36D-6,1.07D-6,8.50D-7,6.88D-7/
# 4 3D J=3,2,1
      DATA X43D/23.73609,23.8,23.9,24.0,25.0,26.0,27.0,28.0,29.0,30.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,54.0,58.0,62.0,66.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,110.,120.,130.,140.,150.,160.,180.,200.,220.,240.,260.,280.,300.,340.,380.,420.,460.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000.,1100.,1200.,1300.,1400.,1500.,1600./
      DATA Y43D/.0,.0288,.0363,.0407,.0575,.0646,.0681,.0692,.069,.0675,.0629,.0573,.0516,.0461,.0411,.0365,.0325,.0290,.0258,.0231,.0186,.0151,.0123,.0102,.00847,.00681,.00554,.00455,.00378,.00316,.00267,.00194,.00145,.00111,8.61D-4,6.81D-4,5.47D-4,3.66D-4,2.55D-4,1.84D-4,1.37D-4,1.04D-4,8.08D-5,6.39D-5,4.18D-5,2.87D-5,2.05D-5,1.51D-5,1.14D-5,8.32D-6,6.24D-6,4.79D-6,3.75D-6,3.00D-6,2.43D-6,1.99D-6,1.65D-6,1.39D-6,1.18D-6,8.66D-7,6.55D-7,5.08D-7,4.01D-7,3.22D-7,2.63D-7/
# 4 1D J=2
      DATA X41D/23.73633,23.8,24.0,25.0,26.0,27.0,28.0,29.0,30.0,32.0,34.0,36.0,38.0,40.0,44.0,48.0,52.0,56.0,60.0,64.0,68.0,72.0,76.0,80.0,85.0,90.0,95.0,100.,110.,120.,130.,140.,160.,180.,200.,220.,240.,260.,300.,340.,380.,420.,460.,500.,550.,600.,650.,700.,800.,900.,1000.,1100.,1200./
      DATA Y41D/0.0,.0791,.0799,.0846,.0902,.0959,.102,.107,.112,.120,.127,.131,.134,.136,.136,.134,.131,.126,.121,.116,.112,.107,.102,.0978,.0927,.0880,.0836,.0796,.0724,.0663,.0610,.0564,.0489,.0430,.0384,.0346,.0314,.0288,.0246,.0215,.0190,.0171,.0155,.0142,.0128,.0117,.0107,.00990,.00860,.00760,.00681,.00616,.00563/
# 4 3F J=3,4,2
      DATA X43F/23.73701,23.8,23.9,24.0,25.0,26.0,27.0,28.0,29.0,30.0,31.0,32.0,33.0,34.0,35.0,36.0,37.0,38.0,39.0,40.0,42.0,44.0,46.0,48.0,50.0,54.0,58.0,62.0,66.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,110.,120.,130.,140./
      DATA Y43F/0.0,.0357,.0318,.0289,.0161,.0117,.00922,.00760,.00642,.00550,.00478,.00418,.00369,.00327,.00291,.00261,.00234,.00211,.00191,.00173,.00144,.00121,.00102,8.68D-4,7.44D-4,5.57D-4,4.25D-4,3.30D-4,2.61D-4,2.09D-4,1.61D-4,1.26D-4,9.98D-5,8.03D-5,6.53D-5,5.36D-5,3.72D-5,2.66D-5,1.96D-5,1.47D-5/
# 4 1F J=3
      DATA X41F/23.73701,23.8,24.0,25.0,26.0,27.0,28.0,29.0,30.0,31.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,54.0,58.0,62.0,66.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,110.,120.,130.,140.,150.,160.,180.,200.,220.,240.,260.,280.,300.,340.,380.,420.,460.,500.,550.,600.,650.,700.,750.,800.,900.,1000./
      DATA Y41F/0.0,.0175,.0172,.0160,.0149,.0139,.0130,.0122,.0114,.0108,.0102,.00909,.00819,.00742,.00677,.00619,.00569,.00525,.00487,.00452,.00393,.00346,.00307,.00274,.00246,.00217,.00193,.00173,.00156,.00142,.00129,.00108,9.24D-4,7.99D-4,6.99D-4,6.17D-4,5.50D-4,4.47D-4,3.73D-4,3.19D-4,2.77D-4,2.45D-4,2.19D-4,1.99D-4,1.67D-4,1.45D-4,1.28D-4,1.15D-4,1.04D-4,9.39D-5,8.55D-5,7.86D-5,7.27D-5,6.78D-5,6.35D-5,5.63D-5,5.07D-5/
# 4 1P RESONANCE RADIATION J=1   52.222 NM    OSC STRENGTH F=0.02986
      DATA X41P/23.74207,23.8,23.9,24.0,25.0,26.0,27.0,28.0,29.0,30.0,31.0,32.0,33.0,34.0,35.0,36.0,37.0,38.0,39.0,40.0,42.0,44.0,46.0,48.0,50.0,52.0,54.0,56.0,58.0,60.0,64.0,68.0,72.0,76.0,80.0,85.0,90.0,95.0,100.,110.,120.,130.,140.,150.,160.,180.,200.,220.,240.,260.,280.,300.,320.,340.,360.,380.,400.,440.,480.,520.,560.,600.,640.,680.,720.,760.,800.,850.,900.,950.,1000.,1100.,1200.,1300.,1400.,1600.,1800.,2000.,2200.,2400.,2600.,2800.,3000.,3400.,3800.,4200.,4600.,5000.,5500.,6000.,6500.,7000.,7500.,8000.,9000.,10000./
      DATA Y41P/0.00,.0147,.0242,.0334,.107,.158,.196,.227,.255,.281,.307,.333,.360,.387,.414,.442,.470,.498,.526,.553,.606,.657,.704,.748,.789,.826,.860,.891,.919,.944,.986,1.02,1.05,1.06,1.08,1.09,1.10,1.10,1.10,1.09,1.07,1.05,1.03,1.01,.985,.939,.896,.855,.817,.783,.751,.722,.695,.670,.646,.625,.605,.569,.537,.509,.484,.461,.441,.423,.406,.390,.376,.360,.345,.332,.320,.298,.279,.263,.248,.224,.205,.189,.175,.163,.153,.145,.137,.124,.113,.104,.0969,.0905,.0837,.0779,.0729,.0686,.0648,.0614,.0556,.0510/
# 5 1P RESONANCE  RADIATION J=1  51.562 NM      F=0.01504
# 6 1P RESONANCE  RADIATION J=1  51.210 NM      F=0.00863
# 7 1P RESONANCE  RADIATION J=1  51.000 NM      F=0.00540
# 8 1P RESONANCE  RADIATION J=1  50.865 NM      F=0.00362
# 9 1P RESONANCE  RADIATION J=1  50.772 NM      F=0.00253
# 10 1P RESONANCE RADIATION J=1  50.706 NM      F=0.00184
# 11 1P RESONANCE RADIATION J=1  50.657 NM      F=0.00138
# 12 1P RESONANCE RADIATION J=1  50.620 NM      F=0.00106
# SUM HIGHER 1P LEVELS RESONANCE RADIATION J=1  F=0.00440
# TOTAL SUM OSCILLATOR STRENGTH = 0.42326
#
# BREMSSTRAHLUNG X-SECTION WITH CUT OFF 
      DATA Z2T/42.1,23.5,10.7,5.88,3.25,1.50,.886,.582,.437,.429,.460,.484,.502,.515,.525,.540,.550,.566,.575,.585,.592,.596,.597,.598,.598/
# UNITS 10**-24
      DATA EBRM/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,4.E7,5.E7,6.E7,8.E7,1.E8/

# --------------------------------------------------------------------
      if(NANISO == 0):
 :
       NAME='HE4  ISOTROPIC   2014    '   
      else: 
       NAME='HE4 ANISOTROPIC  2014    '
      # endif                                         
# --------------------------------------------------------------------  
#  HELIUM 4 BEST KNOWN GAS USED AS STANDARD ACCURACY BETTER THAN 0.2%   
#  AT ALL FIELDS.
#  2002: UPDATED 1997 DATA TO INCLUDE ANISOTROPIC ELASTIC SCATTTERING
#  2007: INCREASED DATA FILE UP TO 10 MEV 
#  2007: NEW ANISTROPIC SCATTERING def INTRODUCED
#  2007: PENNING FRACTION INTRODUCED
#  2010: SPLIT EXCITATION INTO 49 LEVELS.
#  2014: UPDATED IONISATION TO BE CONSISTENT WITH FURSA AND BRAY CCC
# USED MAINLY THE FOLLOWING THEORETICAL EXCITATION X-SECTIONS:
# AT RESONANCE ENERGIES USED RMPS CALCULATIONS OF 
#  BARTSCHAT   J.PHYS B31(1998)L469
# AT HIGHER ENERGIES USED RALCHENKO AT.DATA NUCL DATA TABLES 94(2008)603
# AT HIGHEST ENERGIES FOR RESONANCE DIPOLE TRANSITIONS USED BEF SCALING
# 2013: INTRODUCED IONISATION WITH CAHRGE STATE =2
# -------------------------------------------------------------------- 
#
# BORN-BETHE VALUES FOR IONISATION
      CONST=1.873884D-20
      EMASS2=1021997.804
      API=numpy.arccos(-1.00)
      A0=0.52917720859D-8
      RY=13.60569193
      BBCONST=16.0*API*A0*A0*RY*RY/EMASS2
#
      AM2=0.489
      C=5.50 
#
      NION=2
      NATT=1
      NIN=49
      NNULL=0
      IONMODEL=0
#    
      NBREM=25
      DO 6 J=1,NIN
      IZBR[J]=0
    6 CONTINUE
      IZBR(50)=2
#
      DO 1 J=1,6
    1 KEL[J]=NANISO
      DO 2 J=1,NIN
    2 KIN[J]=NANISO
      NDATA=144
      NIOND=90                                                         
      N23S=139          
      N21S=128
      N23P=128          
      N21P=125                            
      N33S=106
      N31S=87
      N33P=91
      N33D=108
      N31D=94
      N31P=114
      N43S=59
      N41S=55
      N43P=76
      N43D=65
      N41D=53
      N43F=40
      N41F=57
      N41P=96
      E[1]=0.0                                                          
      E(2)=2.0*EMASS/(4.00260*AMU)                                      
      E(3)=24.58739
# ENTER EXCITATION X-SECTION AT 1.4MEV                                   
      E(4)=0.5841D-19
# ENTER IONISING X-SECTION AT 1.4MEV                            
      E(5)=0.1271D-18
# ENTER EOBY FOR MINIMUM IONISING PARTICLE         
      E(6)=10.5
# IONISATION ENERGIES
      EION[1]=24.58739
      EION(2)=79.00515
      LEGAS[1]=0
      LEGAS(2)=0
      ISHELL[1]=0
      ISHELL(2)=0
# EOBY AT LOW ENERGY
      EOBY[1]=12.0       
      EOBY(2)=65.0       
# FLUORESCENCE DATA
      NC0[1]=0
      EC0[1]=0.0
      WKLM[1]=0.0
      EFL[1]=0.0
      NG1[1]=0
      EG1[1]=0.0
      NG2[1]=0
      EG2[1]=0.0
      NC0(2)=1
      EC0(2)=10.0
      WKLM(2)=0.0
      EFL(2)=0.0
      NG1(2)=0
      EG1(2)=0.0
      NG2(2)=0
      EG2(2)=0.0
#
      DO 776 J=1,NION
      DO 777 I=1,20000
      if(EG[I]:
 > EION[J]) :
       IOFFION[J]=I-1
       GO TO 776
      # endif
  777 CONTINUE
  776 CONTINUE
#
      EIN[1]=19.81961                                                   
      EIN(2)=20.61577
      EIN(3)=20.96409
      EIN(4)=21.21802
      EIN(5)=22.71847
      EIN(6)=22.92032
      EIN(7)=23.00707
      EIN(8)=23.07365
      EIN(9)=23.07407
      EIN(10)=23.08702
      EIN(11)=23.59396
      EIN(12)=23.67357
      EIN(13)=23.70789
      EIN(14)=23.73609
      EIN(15)=23.73633
      EIN(16)=23.73701
      EIN(17)=23.73701
      EIN(18)=23.74207
      EIN(19)=23.97197
      EIN(20)=24.01121
      EIN(21)=24.02822
      EIN(22)=24.04266
      EIN(23)=24.04280
      EIN(24)=24.04315
      EIN(25)=24.04315
      EIN(26)=24.04580
      EIN(27)=24.16900
      EIN(28)=24.19116
      EIN(29)=24.20081
      EIN(30)=24.20916
      EIN(31)=24.20925
      EIN(32)=24.21100
      EIN(33)=24.28456
      EIN(34)=24.29828
      EIN(35)=24.30429
      EIN(36)=24.30954
      EIN(37)=24.30960
      EIN(38)=24.31071
      EIN(39)=24.35810
      EIN(40)=24.36718
      EIN(41)=24.37116
      EIN(42)=24.37468
      EIN(43)=24.37472
      EIN(44)=24.37547
      EIN(45)=24.41989
      EIN(46)=24.45168
      EIN(47)=24.47518
      EIN(48)=24.49308
      EIN(49)=24.50708
      EIN(50)=0.0
#***********************************************************************
# ENTER PENNING FRACTION FOR EACH LEVEL
# PENNING FRACTION BETWEEN 0.9 AND 1.0 FOR ALL MIXTURES
      DO 50 NL=1,NIN
      PENFRA[1,NL]=1.00
#  PENNING TRANSFER DISTANCE MICRONS
      PENFRA[2,NL]=1.0  
# PENNING TRANSFER TIME PICOSECONDS
   50 PENFRA[3,NL]=1.0
# HORNBECK MOLNAR MOD 
# IF PURE GAS SET TO : 0 FOR FIRST 6 LEVELS 0.25 FOR OTHER LEVELS
#     PENFRA(1,1)=0.0
#     PENFRA(1,2)=0.0
#     PENFRA(1,3)=0.0
#     PENFRA(1,4)=0.0
#     PENFRA(1,5)=0.0
#     PENFRA(1,6)=0.0
#***********************************************************************
      if(IPEN == 0):
 GO TO 4 
      DO 3 KDUM=1,NIN
      if(PENFRA[1,KDUM] == 0.0):
 GO TO 3
      WRITE(6,999) NAME,EIN(KDUM),PENFRA[1,KDUM],PENFRA[2,KDUM],PENFRA[3,KDUM]
  999 print(' GAS = ',A15,' ENERGY LEVEL = ','%.4f' %,' EV.',/,' PENNING PROBABILITY =','%.3f' % ,' ABS.LENGTH =',F7.2,' DECAY TIME =',F7.1,/)    
    3 CONTINUE
    4 DO 5 NL=1,NIN
      DO 651 I=1,20000
      if(EG[I]:
 > EIN(NL)) :
       IOFFN(NL)=I-1 
       GO TO 5
      # endif
  651 CONTINUE
    5 CONTINUE
      SCRPT[1]='                                                  '
      SCRPT(2)=' ELASTIC  ANISOTROPIC            HELIUM 4         '
      if(NANISO == 0):
 :
       SCRPT(2)=' ELASTIC   ISOTROPIC            HELIUM 4         '
      # endif
      SCRPT(3)=' IONISATION CHARGE STATE=1         ELOSS= 24.58739'
      SCRPT(4)=' IONISATION CHARGE STATE=2         ELOSS= 79.00515'
      SCRPT(5)=' ATTACHMENT                                       '
      SCRPT(6)='                                                  ' 
      SCRPT(7)='                                                  '
      SCRPT(8)=' EXC  23S J=1    METASTABLE        ELOSS= 19.81961'
      SCRPT(9)=' EXC  21S J=0    METASTABLE        ELOSS= 20.61577'
      SCRPT(10)=' EXC  23P J=2,1,0                  ELOSS= 20.96409'
      SCRPT(11)=' EXC  21P J=1    RESONANT          ELOSS= 21.21802'
      SCRPT(12)=' EXC  33S J=1                      ELOSS= 22.71847'
      SCRPT(13)=' EXC  31S J=0                      ELOSS= 22.92032'
      SCRPT(14)=' EXC  33P J=2,1,0                  ELOSS= 23.00707'
      SCRPT(15)=' EXC  33D J=3,2,1                  ELOSS= 23.07365'
      SCRPT(16)=' EXC  31D J=2                      ELOSS= 23.07407'
      SCRPT(17)=' EXC  31P J=1    RESONANT          ELOSS= 23.08702'
      SCRPT(18)=' EXC  43S J=1                      ELOSS= 23.59396'
      SCRPT(19)=' EXC  41S J=0                      ELOSS= 23.67357'
      SCRPT(20)=' EXC  43P J=2,1,0                  ELOSS= 23.70789'
      SCRPT(21)=' EXC  43D J=3,2,1                  ELOSS= 23.73609'
      SCRPT(22)=' EXC  41D J=2                      ELOSS= 23.73633'
      SCRPT(23)=' EXC  43F J=3,4,2                  ELOSS= 23.73701'
      SCRPT(24)=' EXC  41F J=3                      ELOSS= 23.73701'
      SCRPT(25)=' EXC  41P J=1    RESONANT          ELOSS= 23.74207'
      SCRPT(26)=' EXC  53S J=1                      ELOSS= 23.97197'
      SCRPT(27)=' EXC  51S J=0                      ELOSS= 24.01121'
      SCRPT(28)=' EXC  53P J=2,1,0                  ELOSS= 24.02822'
      SCRPT(29)=' EXC  53D J=3,2,1                  ELOSS= 24.04266'
      SCRPT(30)=' EXC  51D J=2                      ELOSS= 24.04280'
      SCRPT(31)=' EXC  53F J=3,4,2                  ELOSS= 24.04315'
      SCRPT(32)=' EXC  513 J=3                      ELOSS= 24.04315'
      SCRPT(33)=' EXC  51P J=1    RESONANT          ELOSS= 24.04580'
      SCRPT(34)=' EXC  63S J=1                      ELOSS= 24.16900'
      SCRPT(35)=' EXC  61S J=0                      ELOSS= 24.19116'
      SCRPT(36)=' EXC  63P J=2,1,0                  ELOSS= 24.20081'
      SCRPT(37)=' EXC  63D J=3,2,1                  ELOSS= 24.20916'
      SCRPT(38)=' EXC  61D J=2                      ELOSS= 24.20925'
      SCRPT(39)=' EXC  61P J=1    RESONANT          ELOSS= 24.21100'
      SCRPT(40)=' EXC  73S J=1                      ELOSS= 24.28456'
      SCRPT(41)=' EXC  71S J=0                      ELOSS= 24.29828'
      SCRPT(42)=' EXC  73P J=2,1,0                  ELOSS= 24.30429'
      SCRPT(43)=' EXC  73D J=3,2,1                  ELOSS= 24.30954'
      SCRPT(44)=' EXC  71D J=2                      ELOSS= 24.30960'
      SCRPT(45)=' EXC  71P J=1    RESONANT          ELOSS= 24.31071'
      SCRPT(46)=' EXC  N3S SUM HIGH                 ELOSS= 24.35810'
      SCRPT(47)=' EXC  N1S SUM HIGH                 ELOSS= 24.36718'
      SCRPT(48)=' EXC  N3P SUM HIGH                 ELOSS= 24.37116' 
      SCRPT(49)=' EXC  N3D SUM HIGH                 ELOSS= 24.37468'
      SCRPT(50)=' EXC  N1D SUM HIGH                 ELOSS= 24.37472'
      SCRPT(51)=' EXC  81P J=1    RESONANT          ELOSS= 24.37547'
      SCRPT(52)=' EXC  91P J=1    RESONANT          ELOSS= 24.41989'
      SCRPT(53)=' EXC 101P J=1    RESONANT          ELOSS= 24.45168'
      SCRPT(54)=' EXC 111P J=1    RESONANT          ELOSS= 24.47518'
      SCRPT(55)=' EXC 121P J=1    RESONANT          ELOSS= 24.49308'
      SCRPT(56)=' EXC  N1P SUM HI RESONANT          ELOSS= 24.50708'
      SCRPT(57)=' BREMSSTRAHLUNG FROM HELIUM ATOM                  '
#     EN=-ESTEP/2.00   
      DO 9000 I=1,NSTEP    
      EN=EG[I]                                            
#     EN=EN+ESTEP 
      if(EN > EIN[1]:
) :
       GAMMA1=(EMASS2+2.00*EN)/EMASS2
       GAMMA2=GAMMA1*GAMMA1
       BETA=math.sqrt(1.00-1.00/GAMMA2)
       BETA2=BETA*BETA
      # endif
      DO 10 J=2,NDATA                                                   
      if(EN <= XEN[J]:
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA                                                           
   20 A=(YEL[J]-YEL(J-1))/(XEN[J]-XEN(J-1))                         
      B=(XEN(J-1)*YEL[J]-XEN[J]*YEL(J-1))/(XEN(J-1)-XEN[J])
      QELA=(A*EN+B)*1.0D-16
#
      A=(YEM[J]-YEM(J-1))/(XEN[J]-XEN(J-1))                         
      B=(XEN(J-1)*YEM[J]-XEN[J]*YEM(J-1))/(XEN(J-1)-XEN[J]) 
      QMOM=(A*EN+B)*1.0D-16
      PQ1=0.5+(QELA-QMOM)/QELA
#
      A=(YEPS[J]-YEPS(J-1))/(XEN[J]-XEN(J-1))
      B=(XEN(J-1)*YEPS[J]-XEN[J]*YEPS(J-1))/(XEN(J-1)-XEN[J])
      PQ2=A*EN+B
# EPSILON=1-PQ2
      PQ2=1.00-PQ2
#
      if(NANISO == 1):
 PEQEL(2,I)=PQ1
      if(NANISO == 2):
 PEQEL(2,I)=PQ2
      Q(2,I)=QELA
      if(NANISO == 0):
 :
       Q(2,I)=QMOM
       PEQEL(2,I)=0.5
      # endif
# GROSS IONISATION                                                      
      QION(1,I)=0.00
      PEQION(1,I)=0.50  
      if(NANISO == 2):
 PEQION(1,I)=0.00                               
      if(EN <= EION[1]:
) GO TO 200 
      if(EN > XION(NIOND):
) GO TO 121     
      DO 110 J=2,NIOND                                                  
      if(EN <= XION[J]:
) GO TO 120                                       
  110 CONTINUE                                                          
      J=NIOND                                                           
  120 A=(YION[J]-YION(J-1))/(XION[J]-XION(J-1))                         
      B=(XION(J-1)*YION[J]-XION[J]*YION(J-1))/(XION(J-1)-XION[J])       
      QION(1,I)=(A*EN+B)*1.D-16 
      GO TO 122
# USE BORN-BETHE X-SECTION ABOVE XION(NIOND) EV
  121 AX2=1.00/BETA2
      AX1=AX2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(1,I)=CONST*(AM2*(AX1-DEN[I]/2.0)+C*AX2)/0.995
  122 CONTINUE
# USE ANISOTROPIC SCATTERING FOR PRIMARY IONISATION ELECTRON FOR
# ENERGIES ABOVE 2 * IONISATION ENERGY 
# ANISOTROPIC ANGULAR DISTRIBUTION SAME AS ELASTIC AT ENERGY OFFSET BY 
# IONISATION ENERGY
      if(EN <= (2.0*EION[1]:
)) GO TO 200
      PEQION(1,I)=PEQEL(2,(I-IOFFION[1]))                               
# ATTACHMENT                                                            
  200 Q(4,I)=0.00 
# COUNTING IONISATION
      Q(5,I)=0.00
      PEQION(2,I)=0.50
      if(NANISO == 2):
 PEQION(2,I)=0.00
      if(EN <= EION[1]:
) GO TO 250
      if(EN > XION(NIOND):
) GO TO 241
      DO 230 J=2,NIOND
      if(EN <= XION[J]:
) GO TO 240
  230 CONTINUE
      J=NIOND
  240 A=(YINC[J]-YINC(J-1))/(XION[J]-XION(J-1))
      B=(XION(J-1)*YINC[J]-XION[J]*YINC(J-1))/(XION(J-1)-XION[J])      
      Q(5,I)=(A*EN+B)*1.0D-16
      GO TO 242
# USE BORN-BETHE X-SECTION ABOVE XION(NIOND) EV
  241 Q(5,I)=CONST*(AM2*(AX1-DEN[I]/2.0)+C*AX2)
  242 CONTINUE  
      if(EN <= (2.00*EION(2):
)) GO TO 250
      PEQION(2,I)=PEQEL(2,(I-IOFFION(2)))
  250 Q(6,I)=0.00
# CALCULATE CHARGE STATE 1 AND 2 FROM COUNT AND GROSS
      QTEMP1=2.00*Q(5,I)-QION(1,I)
      QTEMP2=QION(1,I)-Q(5,I)
      QION(1,I)=QTEMP1
      QION(2,I)=QTEMP2
      if(QION(2,I):
 < 0.0) QION(2,I)=0.0
#
      DO 251 NL=1,NIN+1
      QIN(NL,I)=0.00
      PEQIN(NL,I)=0.50
      if(NANISO == 2):
 :
       PEQIN(NL,I)=0.00
      # endif
  251 CONTINUE
#
# 2 3S 
      if(EN <= EIN[1]:
) GO TO 2000  
      if(EN > X23S(N23S):
) GO TO 311                                  
      DO 300 J=2,N23S                                                   
      if(EN <= X23S[J]:
) GO TO 310                                       
  300 CONTINUE                                                          
      J=N23S                                                            
  310 A=(Y23S[J]-Y23S(J-1))/(X23S[J]-X23S(J-1))                         
      B=(X23S(J-1)*Y23S[J]-X23S[J]*Y23S(J-1))/(X23S(J-1)-X23S[J])       
      QIN(1,I)=(A*EN+B)*1.D-18 
      GO TO 312
# IF ENERGY GT X23S(N23S) EV SCALE BY 1/E**3 
  311 QIN(1,I)=Y23S(N23S)*(X23S(N23S)/EN)**3*1.D-18
  312 if(EN <= (2.0*EIN[1])) GO TO 320   
      PEQIN(1,I)=PEQEL(2,(I-IOFFN[1])) 
#
# 2 1S                                                                  
  320 if(EN <= EIN(2)) GO TO 2000
      if(EN > X21S(N21S):
) GO TO 341                         
      DO 330 J=2,N21S                                                   
      if(EN <= X21S[J]:
) GO TO 340                                       
  330 CONTINUE                                                          
      J=N21S                                                            
  340 A=(Y21S[J]-Y21S(J-1))/(X21S[J]-X21S(J-1))                         
      B=(X21S(J-1)*Y21S[J]-X21S[J]*Y21S(J-1))/(X21S(J-1)-X21S[J])       
      QIN(2,I)=(A*EN+B)*1.D-18
      GO TO 342
# IF ENERGY GT X21S(N21S) EV SCALE BY 1/E
  341 QIN(2,I)=Y21S(N21S)*(X21S(N21S)/EN)*1.D-18   
  342 if(EN <= (2.0*EIN(2))) GO TO 350
      PEQIN(2,I)=PEQEL(2,(I-IOFFN(2)))
#
# 2 3P
  350 if(EN <= EIN(3)) GO TO 2000
      if(EN > X23P(N23P):
) GO TO 371
      DO 360 J=2,N23P
      if(EN <= X23P[J]:
) GO TO 370
  360 CONTINUE
      J=N23P
  370 A=(Y23P[J]-Y23P(J-1))/(X23P[J]-X23P(J-1))                         
      B=(X23P(J-1)*Y23P[J]-X23P[J]*Y23P(J-1))/(X23P(J-1)-X23P[J])       
      QIN(3,I)=(A*EN+B)*1.D-18
      GO TO 372
# IF ENERGY GT X23P(N23P) EV SCALE BY 1/E**3
  371 QIN(3,I)=Y23P(N23P)*(X23P(N23P)/EN)**3*1.D-18   
  372 if(EN <= (2.0*EIN(3))) GO TO 380
      PEQIN(3,I)=PEQEL(2,(I-IOFFN(3)))
#
# 2 1P        OSC STRENGTH  F=0.27608
  380 if(EN <= EIN(4)) GO TO 2000
      if(EN > X21P(N21P):
) GO TO 401
      DO 390 J=2,N21P
      if(EN <= X21P[J]:
) GO TO 400
  390 CONTINUE
      J=N21P
  400 A=(Y21P[J]-Y21P(J-1))/(X21P[J]-X21P(J-1))                         
      B=(X21P(J-1)*Y21P[J]-X21P[J]*Y21P(J-1))/(X21P(J-1)-X21P[J])       
      QIN(4,I)=(A*EN+B)*1.D-18
      GO TO 402
# IF ENERGY GT X21P(N21P) EV : USE BEF SCALING
  401 QIN(4,I)=0.27608/(EIN(4)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(4)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(4)+E(3))
  402 if(EN <= (2.0*EIN(4))) GO TO 410
      PEQIN(4,I)=PEQEL(2,(I-IOFFN(4)))
#
# 3 3S
  410 if(EN <= EIN(5)) GO TO 2000
      if(EN > X33S(N33S):
) GO TO 431
      DO 420 J=2,N33S
      if(EN <= X33S[J]:
) GO TO 430
  420 CONTINUE
      J=N33S
  430 A=(Y33S[J]-Y33S(J-1))/(X33S[J]-X33S(J-1))                         
      B=(X33S(J-1)*Y33S[J]-X33S[J]*Y33S(J-1))/(X33S(J-1)-X33S[J])       
      QIN(5,I)=(A*EN+B)*1.D-18
      GO TO 432
# IF ENERGY GT X33S(N33S) EV SCALE BY 1/E**3
  431 QIN(5,I)=Y33S(N33S)*(X33S(N33S)/EN)**3*1.D-18   
  432 if(EN <= (2.0*EIN(5))) GO TO 440
      PEQIN(5,I)=PEQEL(2,(I-IOFFN(5)))
#
# 3 1S
  440 if(EN <= EIN(6)) GO TO 2000
      if(EN > X31S(N31S):
) GO TO 461
      DO 450 J=2,N31S
      if(EN <= X31S[J]:
) GO TO 460
  450 CONTINUE
      J=N31S
  460 A=(Y31S[J]-Y31S(J-1))/(X31S[J]-X31S(J-1))                         
      B=(X31S(J-1)*Y31S[J]-X31S[J]*Y31S(J-1))/(X31S(J-1)-X31S[J])       
      QIN(6,I)=(A*EN+B)*1.D-18
      GO TO 462
# IF ENERGY GT X31S(N31S) EV SCALE BY 1/E   
  461 QIN(6,I)=Y31S(N31S)*(X31S(N31S)/EN)*1.D-18   
  462 if(EN <= (2.0*EIN(6))) GO TO 470
      PEQIN(6,I)=PEQEL(2,(I-IOFFN(6)))
#
# 3 3P
  470 if(EN <= EIN(7)) GO TO 2000
      if(EN > X33P(N33P):
) GO TO 491
      DO 480 J=2,N33P
      if(EN <= X33P[J]:
) GO TO 490
  480 CONTINUE
      J=N33P
  490 A=(Y33P[J]-Y33P(J-1))/(X33P[J]-X33P(J-1))                         
      B=(X33P(J-1)*Y33P[J]-X33P[J]*Y33P(J-1))/(X33P(J-1)-X33P[J])       
      QIN(7,I)=(A*EN+B)*1.D-18
      GO TO 492
# IF ENERGY GT X33P(N33P) EV SCALE BY 1/E**3
  491 QIN(7,I)=Y33P(N33P)*(X33P(N33P)/EN)*1.D-18   
  492 if(EN <= (2.0*EIN(7))) GO TO 500
      PEQIN(7,I)=PEQEL(2,(I-IOFFN(7)))
#
# 3 3D
  500 if(EN <= EIN(8)) GO TO 2000
      if(EN > X33D[N33D]):
 GO TO 521
      DO 510 J=2,N33D
      if(EN <= X33D[J]):
 GO TO 520
  510 CONTINUE
      J=N33D
  520 A=(Y33D[J]-Y33D[J-1])/(X33D[J]-X33D[J-1])                         
      B=(X33D[J-1]*Y33D[J]-X33D[J]*Y33D[J-1])/(X33D[J-1]-X33D[J])       
      QIN(8,I)=(A*EN+B)*1.D-18
      GO TO 522
# IF ENERGY GT X33D[N33D] EV SCALE BY 1/E**3
  521 QIN(8,I)=Y33D[N33D]*(X33D[N33D]/EN)*1.D-18   
  522 if(EN <= (2.0*EIN(8))) GO TO 530
      PEQIN(8,I)=PEQEL(2,(I-IOFFN(8)))
#
# 3 1D
  530 if(EN <= EIN(9)) GO TO 2000
      if(EN > X31D[N31D]):
 GO TO 551
      DO 540 J=2,N31D
      if(EN <= X31D[J]):
 GO TO 550
  540 CONTINUE
      J=N31D
  550 A=(Y31D[J]-Y31D[J-1])/(X31D[J]-X31D[J-1])                         
      B=(X31D[J-1]*Y31D[J]-X31D[J]*Y31D[J-1])/(X31D[J-1]-X31D[J])       
      QIN(9,I)=(A*EN+B)*1.D-18
      GO TO 552
# IF ENERGY GT X31D[N31D] EV SCALE BY 1/E   
  551 QIN(9,I)=Y31D[N31D]*(X31D[N31D]/EN)*1.D-18   
  552 if(EN <= (2.0*EIN(9))) GO TO 560
      PEQIN(9,I)=PEQEL(2,(I-IOFFN(9)))
#
# 3 1P        OSC STRENGTH F=0.07342
  560 if(EN <= EIN(10)) GO TO 2000
      if(EN > X31P(N31P):
) GO TO 581
      DO 570 J=2,N31P
      if(EN <= X31P[J]:
) GO TO 580
  570 CONTINUE
      J=N31P
  580 A=(Y31P[J]-Y31P(J-1))/(X31P[J]-X31P(J-1))                         
      B=(X31P(J-1)*Y31P[J]-X31P[J]*Y31P(J-1))/(X31P(J-1)-X31P[J])       
      QIN(10,I)=(A*EN+B)*1.D-18
      GO TO 582
# IF ENERGY GT X31P(N31P) EV : USE BEF SCALING
  581 QIN(10,I)=0.07342/(EIN(10)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(10)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(10)+E(3))
  582 if(EN <= (2.0*EIN(10))) GO TO 590
      PEQIN(10,I)=PEQEL(2,(I-IOFFN(10)))
#
# 4 3S
  590 if(EN <= EIN(11)) GO TO 2000
      if(EN > X43S(N43S):
) GO TO 611
      DO 600 J=2,N43S
      if(EN <= X43S[J]:
) GO TO 610
  600 CONTINUE
      J=N43S
  610 A=(Y43S[J]-Y43S(J-1))/(X43S[J]-X43S(J-1))                         
      B=(X43S(J-1)*Y43S[J]-X43S[J]*Y43S(J-1))/(X43S(J-1)-X43S[J])       
      QIN(11,I)=(A*EN+B)*1.D-18
      GO TO 612
# IF ENERGY GT X43S(N43S) EV SCALE BY 1/E**3
  611 QIN(11,I)=Y43S(N43S)*(X43S(N43S)/EN)**3*1.D-18
  612 if(EN <= (2.0*EIN(11))) GO TO 620
      PEQIN(11,I)=PEQEL(2,(I-IOFFN(11)))
#
# 4 1S
  620 if(EN <= EIN(12)) GO TO 2000
      if(EN > X41S(N41S):
) GO TO 641
      DO 630 J=2,N41S
      if(EN <= X41S[J]:
) GO TO 640
  630 CONTINUE
      J=N41S
  640 A=(Y41S[J]-Y41S(J-1))/(X41S[J]-X41S(J-1))                         
      B=(X41S(J-1)*Y41S[J]-X41S[J]*Y41S(J-1))/(X41S(J-1)-X41S[J])       
      QIN(12,I)=(A*EN+B)*1.D-18
      GO TO 642
# IF ENERGY GT X41S(N41S) EV SCALE BY 1/E     
  641 QIN(12,I)=Y41S(N41S)*(X41S(N41S)/EN)*1.D-18
  642 if(EN <= (2.0*EIN(12))) GO TO 650
      PEQIN(12,I)=PEQEL(2,(I-IOFFN(12)))
#
# 4 3P
  650 if(EN <= EIN(13)) GO TO 2000
      if(EN > X43P(N43P):
) GO TO 671
      DO 660 J=2,N43P
      if(EN <= X43P[J]:
) GO TO 670
  660 CONTINUE
      J=N43P
  670 A=(Y43P[J]-Y43P(J-1))/(X43P[J]-X43P(J-1))                         
      B=(X43P(J-1)*Y43P[J]-X43P[J]*Y43P(J-1))/(X43P(J-1)-X43P[J])       
      QIN(13,I)=(A*EN+B)*1.D-18
      GO TO 672
# IF ENERGY GT X43P(N43P) EV SCALE BY 1/E**3  
  671 QIN(13,I)=Y43P(N43P)*(X43P(N43P)/EN)**3*1.D-18
  672 if(EN <= (2.0*EIN(13))) GO TO 680
      PEQIN(13,I)=PEQEL(2,(I-IOFFN(13)))
#
# 4 3D
  680 if(EN <= EIN(14)) GO TO 2000
      if(EN > X43D[N43D]):
 GO TO 701
      DO 690 J=2,N43D
      if(EN <= X43D[J]):
 GO TO 700
  690 CONTINUE
      J=N43P
  700 A=(Y43D[J]-Y43D[J-1])/(X43D[J]-X43D[J-1])                         
      B=(X43D[J-1]*Y43D[J]-X43D[J]*Y43D[J-1])/(X43D[J-1]-X43D[J])       
      QIN(14,I)=(A*EN+B)*1.D-18
      GO TO 702
# IF ENERGY GT X43D[N43D] EV SCALE BY 1/E**3  
  701 QIN(14,I)=Y43D[N43D]*(X43D[N43D]/EN)**3*1.D-18
  702 if(EN <= (2.0*EIN(14))) GO TO 710
      PEQIN(14,I)=PEQEL(2,(I-IOFFN(14)))
#
# 4 1D
  710 if(EN <= EIN(15)) GO TO 2000
      if(EN > X41D[N41D]):
 GO TO 731
      DO 720 J=2,N41D
      if(EN <= X41D[J]):
 GO TO 730
  720 CONTINUE
      J=N41D
  730 A=(Y41D[J]-Y41D[J-1])/(X41D[J]-X41D[J-1])                         
      B=(X41D[J-1]*Y41D[J]-X41D[J]*Y41D[J-1])/(X41D[J-1]-X41D[J])       
      QIN(15,I)=(A*EN+B)*1.D-18
      GO TO 732
# IF ENERGY GT X41D[N41D] EV SCALE BY 1/E     
  731 QIN(15,I)=Y41D[N41D]*(X41D[N41D]/EN)*1.D-18
  732 if(EN <= (2.0*EIN(15))) GO TO 740
      PEQIN(15,I)=PEQEL(2,(I-IOFFN(15)))
#
# 4 3F
  740 if(EN <= EIN(16)) GO TO 2000
      if(EN > X43F(N43F):
) GO TO 761
      DO 750 J=2,N43F
      if(EN <= X43F[J]:
) GO TO 760
  750 CONTINUE
      J=N43F
  760 A=(Y43F[J]-Y43F(J-1))/(X43F[J]-X43F(J-1))                         
      B=(X43F(J-1)*Y43F[J]-X43F[J]*Y43F(J-1))/(X43F(J-1)-X43F[J])       
      QIN(16,I)=(A*EN+B)*1.D-18
      GO TO 762
# IF ENERGY GT X43F(N43F) EV SCALE BY 1/E**4  
  761 QIN(16,I)=Y43F(N43F)*(X43F(N43F)/EN)**4*1.D-18
  762 if(EN <= (2.0*EIN(16))) GO TO 770
      PEQIN(16,I)=PEQEL(2,(I-IOFFN(16)))
#
# 4 1F
  770 if(EN <= EIN(17)) GO TO 2000
      if(EN > X41F(N41F):
) GO TO 791
      DO 780 J=2,N41F
      if(EN <= X41F[J]:
) GO TO 790
  780 CONTINUE
      J=N41F
  790 A=(Y41F[J]-Y41F(J-1))/(X41F[J]-X41F(J-1))                         
      B=(X41F(J-1)*Y41F[J]-X41F[J]*Y41F(J-1))/(X41F(J-1)-X41F[J])       
      QIN(17,I)=(A*EN+B)*1.D-18
      GO TO 792
# IF ENERGY GT X41F(N41F) EV SCALE BY 1/E     
  791 QIN(17,I)=Y41F(N41F)*(X41F(N41F)/EN)*1.D-18
  792 if(EN <= (2.0*EIN(17))) GO TO 800
      PEQIN(17,I)=PEQEL(2,(I-IOFFN(17)))
#
# 4 1P       OSC STRENGTH  F=0.02986
  800 if(EN <= EIN(18)) GO TO 2000
      if(EN > X41P(N41P):
) GO TO 821
      DO 810 J=2,N41P
      if(EN <= X41P[J]:
) GO TO 820
  810 CONTINUE
      J=N41P
  820 A=(Y41P[J]-Y41P(J-1))/(X41P[J]-X41P(J-1))                         
      B=(X41P(J-1)*Y41P[J]-X41P[J]*Y41P(J-1))/(X41P(J-1)-X41P[J])       
      QIN(18,I)=(A*EN+B)*1.D-18
      GO TO 822
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
  821 QIN(18,I)=0.02986/(EIN(18)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(18)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(18)+E(3))
  822 if(EN <= (2.0*EIN(18))) GO TO 830
      PEQIN(18,I)=PEQEL(2,(I-IOFFN(18)))
#
# 5 3S SCALED FROM 4 3S
  830 if(EN <= EIN(19)) GO TO 2000
      ER=EIN(19)/EIN(11)
      ENP=EN/ER
      if(ENP > X43S(N43S):
) GO TO 851
      DO 840 J=2,N43S
      if(ENP <= X43S[J]:
) GO TO 850
  840 CONTINUE
      J=N43S
  850 A=(Y43S[J]-Y43S(J-1))/(X43S[J]-X43S(J-1))                         
      B=(X43S(J-1)*Y43S[J]-X43S[J]*Y43S(J-1))/(X43S(J-1)-X43S[J])       
      QIN(19,I)=0.512*(A*ENP+B)*1.D-18
      GO TO 852
# IF ENERGY GT X43S(N43S) EV SCALE BY 1/E**3
  851 QIN(19,I)=0.512*Y43S(N43S)*(X43S(N43S)/ENP)**3*1.D-18
  852 if(EN <= (2.0*EIN(19))) GO TO 860
      PEQIN(19,I)=PEQEL(2,(I-IOFFN(19)))
#
# 5 1S SCALED FROM 4 1S
  860 if(EN <= EIN(20)) GO TO 2000
      ER=EIN(20)/EIN(12)
      ENP=EN/ER
      if(ENP > X41S(N41S):
) GO TO 881
      DO 870 J=2,N41S
      if(ENP <= X41S[J]:
) GO TO 880
  870 CONTINUE
      J=N41S
  880 A=(Y41S[J]-Y41S(J-1))/(X41S[J]-X41S(J-1))                         
      B=(X41S(J-1)*Y41S[J]-X41S[J]*Y41S(J-1))/(X41S(J-1)-X41S[J])       
      QIN(20,I)=0.512*(A*ENP+B)*1.D-18
      GO TO 882
# IF ENERGY GT X41S(N41S) EV SCALE BY 1/E     
  881 QIN(20,I)=0.512*Y41S(N41S)*(X41S(N41S)/ENP)*1.D-18
  882 if(EN <= (2.0*EIN(20))) GO TO 890
      PEQIN(20,I)=PEQEL(2,(I-IOFFN(20)))
#
# 5 3P SCALED FROM 4 3P
  890 if(EN <= EIN(21)) GO TO 2000
      ER=EIN(21)/EIN(13)
      ENP=EN/ER
      if(ENP > X43P(N43P):
) GO TO 911
      DO 900 J=2,N43P
      if(ENP <= X43P[J]:
) GO TO 910
  900 CONTINUE
      J=N43P
  910 A=(Y43P[J]-Y43P(J-1))/(X43P[J]-X43P(J-1))                         
      B=(X43P(J-1)*Y43P[J]-X43P[J]*Y43P(J-1))/(X43P(J-1)-X43P[J])       
      QIN(21,I)=0.512*(A*ENP+B)*1.D-18
      GO TO 912
# IF ENERGY GT X43P(N43P) EV SCALE BY 1/E**3  
  911 QIN(21,I)=0.512*Y43P(N43P)*(X43P(N43P)/ENP)**3*1.D-18
  912 if(EN <= (2.0*EIN(21))) GO TO 920
      PEQIN(21,I)=PEQEL(2,(I-IOFFN(21)))
#
# 5 3D SCALED FROM 4 3D
  920 if(EN <= EIN(22)) GO TO 2000
      ER=EIN(22)/EIN(14)
      ENP=EN/ER
      if(ENP > X43D[N43D]):
 GO TO 941
      DO 930 J=2,N43D
      if(ENP <= X43D[J]):
 GO TO 940
  930 CONTINUE
      J=N43P
  940 A=(Y43D[J]-Y43D[J-1])/(X43D[J]-X43D[J-1])                         
      B=(X43D[J-1]*Y43D[J]-X43D[J]*Y43D[J-1])/(X43D[J-1]-X43D[J])       
      QIN(22,I)=0.512*(A*ENP+B)*1.D-18
      GO TO 942
# IF ENERGY GT X43D[N43D] EV SCALE BY 1/E**3  
  941 QIN(22,I)=0.512*Y43D[N43D]*(X43D[N43D]/ENP)**3*1.D-18
  942 if(EN <= (2.0*EIN(22))) GO TO 950
      PEQIN(22,I)=PEQEL(2,(I-IOFFN(22)))
#
# 5 1D SCALED FROM 4 1D
  950 if(EN <= EIN(23)) GO TO 2000
      ER=EIN(23)/EIN(15)
      ENP=EN/ER
      if(ENP > X41D[N41D]):
 GO TO 971
      DO 960 J=2,N41D
      if(ENP <= X41D[J]):
 GO TO 970
  960 CONTINUE
      J=N41D
  970 A=(Y41D[J]-Y41D[J-1])/(X41D[J]-X41D[J-1])                         
      B=(X41D[J-1]*Y41D[J]-X41D[J]*Y41D[J-1])/(X41D[J-1]-X41D[J])       
      QIN(23,I)=0.512*(A*ENP+B)*1.D-18
      GO TO 972
# IF ENERGY GT X41D[N41D] EV SCALE BY 1/E     
  971 QIN(23,I)=0.512*Y41D[N41D]*(X41D[N41D]/ENP)*1.D-18
  972 if(EN <= (2.0*EIN(23))) GO TO 980
      PEQIN(23,I)=PEQEL(2,(I-IOFFN(23)))
#
# 5 3F SCALED FROM 4 3F
  980 if(EN <= EIN(24)) GO TO 2000
      ER=EIN(24)/EIN(16)
      ENP=EN/ER
      if(ENP > X43F(N43F):
) GO TO 1001
      DO 990 J=2,N43F
      if(ENP <= X43F[J]:
) GO TO 1000
  990 CONTINUE
      J=N43F
 1000 A=(Y43F[J]-Y43F(J-1))/(X43F[J]-X43F(J-1))                         
      B=(X43F(J-1)*Y43F[J]-X43F[J]*Y43F(J-1))/(X43F(J-1)-X43F[J])       
      QIN(24,I)=0.512*(A*ENP+B)*1.D-18
      GO TO 1002
# IF ENERGY GT X43F(N43F) EV SCALE BY 1/E**4  
 1001 QIN(24,I)=0.512*Y43F(N43F)*(X43F(N43F)/ENP)**4*1.D-18
 1002 if(EN <= (2.0*EIN(24))) GO TO 1010
      PEQIN(24,I)=PEQEL(2,(I-IOFFN(24)))
#
# 5 1F SCALED FROM 4 1F
 1010 if(EN <= EIN(25)) GO TO 2000
      ER=EIN(25)/EIN(17)
      ENP=EN/ER
      if(ENP > X41F(N41F):
) GO TO 1031
      DO 1020 J=2,N41F
      if(ENP <= X41F[J]:
) GO TO 1030
 1020 CONTINUE
      J=N41F
 1030 A=(Y41F[J]-Y41F(J-1))/(X41F[J]-X41F(J-1))                         
      B=(X41F(J-1)*Y41F[J]-X41F[J]*Y41F(J-1))/(X41F(J-1)-X41F[J])       
      QIN(25,I)=0.512*(A*ENP+B)*1.D-18
      GO TO 1032
# IF ENERGY GT X41F(N41F) EV SCALE BY 1/E     
 1031 QIN(25,I)=0.512*Y41F(N41F)*(X41F(N41F)/ENP)*1.D-18
 1032 if(EN <= (2.0*EIN(25))) GO TO 1040
      PEQIN(25,I)=PEQEL(2,(I-IOFFN(25)))
#
# 5 1P   SCALED FROM 4 1P   OSC STRENGTH  F=0.01504
 1040 if(EN <= EIN(26)) GO TO 2000
      ER=EIN(26)/EIN(18)
      ENP=EN/ER
      if(ENP > X41P(N41P):
) GO TO 1061
      DO 1050 J=2,N41P
      if(ENP <= X41P[J]:
) GO TO 1060
 1050 CONTINUE
      J=N41P
 1060 A=(Y41P[J]-Y41P(J-1))/(X41P[J]-X41P(J-1))                         
      B=(X41P(J-1)*Y41P[J]-X41P[J]*Y41P(J-1))/(X41P(J-1)-X41P[J])       
      QIN(26,I)=0.01504/0.02986*(A*ENP+B)*1.D-18
      GO TO 1062
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1061 QIN(26,I)=0.01504/(EIN(26)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(26)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(26)+E(3))
 1062 if(EN <= (2.0*EIN(26))) GO TO 1070
      PEQIN(26,I)=PEQEL(2,(I-IOFFN(26)))
#
# 6 3S SCALED FROM 4 3S
 1070 if(EN <= EIN(27)) GO TO 2000
      ER=EIN(27)/EIN(11)
      ENP=EN/ER
      if(ENP > X43S(N43S):
) GO TO 1091
      DO 1080 J=2,N43S
      if(ENP <= X43S[J]:
) GO TO 1090
 1080 CONTINUE
      J=N43S
 1090 A=(Y43S[J]-Y43S(J-1))/(X43S[J]-X43S(J-1))                         
      B=(X43S(J-1)*Y43S[J]-X43S[J]*Y43S(J-1))/(X43S(J-1)-X43S[J])       
      QIN(27,I)=0.296*(A*ENP+B)*1.D-18
      GO TO 1092
# IF ENERGY GT X43S(N43S) EV SCALE BY 1/E**3
 1091 QIN(27,I)=0.296*Y43S(N43S)*(X43S(N43S)/ENP)**3*1.D-18
 1092 if(EN <= (2.0*EIN(27))) GO TO 1100
      PEQIN(27,I)=PEQEL(2,(I-IOFFN(27)))
#
# 6 1S SCALED FROM 4 1S
 1100 if(EN <= EIN(28)) GO TO 2000
      ER=EIN(28)/EIN(12)
      ENP=EN/ER
      if(ENP > X41S(N41S):
) GO TO 1121
      DO 1110 J=2,N41S
      if(ENP <= X41S[J]:
) GO TO 1120
 1110 CONTINUE
      J=N41S
 1120 A=(Y41S[J]-Y41S(J-1))/(X41S[J]-X41S(J-1))                         
      B=(X41S(J-1)*Y41S[J]-X41S[J]*Y41S(J-1))/(X41S(J-1)-X41S[J])       
      QIN(28,I)=0.296*(A*ENP+B)*1.D-18
      GO TO 1122
# IF ENERGY GT X41S(N41S) EV SCALE BY 1/E     
 1121 QIN(28,I)=0.296*Y41S(N41S)*(X41S(N41S)/ENP)*1.D-18
 1122 if(EN <= (2.0*EIN(28))) GO TO 1130
      PEQIN(28,I)=PEQEL(2,(I-IOFFN(28)))
#
# 6 3P SCALED FROM 4 3P
 1130 if(EN <= EIN(29)) GO TO 2000
      ER=EIN(29)/EIN(13)
      ENP=EN/ER
      if(ENP > X43P(N43P):
) GO TO 1151
      DO 1140 J=2,N43P
      if(ENP <= X43P[J]:
) GO TO 1150
 1140 CONTINUE
      J=N43P
 1150 A=(Y43P[J]-Y43P(J-1))/(X43P[J]-X43P(J-1))                         
      B=(X43P(J-1)*Y43P[J]-X43P[J]*Y43P(J-1))/(X43P(J-1)-X43P[J])       
      QIN(29,I)=0.296*(A*ENP+B)*1.D-18
      GO TO 1152
# IF ENERGY GT X43P(N43P) EV SCALE BY 1/E**3  
 1151 QIN(29,I)=0.296*Y43P(N43P)*(X43P(N43P)/ENP)**3*1.D-18
 1152 if(EN <= (2.0*EIN(29))) GO TO 1160
      PEQIN(29,I)=PEQEL(2,(I-IOFFN(29)))
#
# 6 3D SCALED FROM 4 3D
 1160 if(EN <= EIN(30)) GO TO 2000
      ER=EIN(30)/EIN(14)
      ENP=EN/ER
      if(ENP > X43D[N43D]):
 GO TO 1181
      DO 1170 J=2,N43D
      if(ENP <= X43D[J]):
 GO TO 1180
 1170 CONTINUE
      J=N43P
 1180 A=(Y43D[J]-Y43D[J-1])/(X43D[J]-X43D[J-1])                         
      B=(X43D[J-1]*Y43D[J]-X43D[J]*Y43D[J-1])/(X43D[J-1]-X43D[J])       
      QIN(30,I)=0.296*(A*ENP+B)*1.D-18
      GO TO 1182
# IF ENERGY GT X43D[N43D] EV SCALE BY 1/E**3  
 1181 QIN(30,I)=0.296*Y43D[N43D]*(X43D[N43D]/ENP)**3*1.D-18
 1182 if(EN <= (2.0*EIN(30))) GO TO 1190
      PEQIN(30,I)=PEQEL(2,(I-IOFFN(30)))
#
# 6 1D SCALED FROM 4 1D
 1190 if(EN <= EIN(31)) GO TO 2000
      ER=EIN(31)/EIN(15)
      ENP=EN/ER
      if(ENP > X41D[N41D]):
 GO TO 1211
      DO 1200 J=2,N41D
      if(ENP <= X41D[J]):
 GO TO 1210
 1200 CONTINUE
      J=N41D
 1210 A=(Y41D[J]-Y41D[J-1])/(X41D[J]-X41D[J-1])                         
      B=(X41D[J-1]*Y41D[J]-X41D[J]*Y41D[J-1])/(X41D[J-1]-X41D[J])       
      QIN(31,I)=0.296*(A*ENP+B)*1.D-18
      GO TO 1212
# IF ENERGY GT X41D[N41D] EV SCALE BY 1/E     
 1211 QIN(31,I)=0.296*Y41D[N41D]*(X41D[N41D]/ENP)*1.D-18
 1212 if(EN <= (2.0*EIN(31))) GO TO 1220
      PEQIN(31,I)=PEQEL(2,(I-IOFFN(31)))
#
# 6 1P  SCALED FROM 4 1P    OSC STRENGTH  F=0.00863 
 1220 if(EN <= EIN(32)) GO TO 2000
      ER=EIN(32)/EIN(18)
      ENP=EN/ER
      if(ENP > X41P(N41P):
) GO TO 1241
      DO 1230 J=2,N41P
      if(ENP <= X41P[J]:
) GO TO 1240
 1230 CONTINUE
      J=N41P
 1240 A=(Y41P[J]-Y41P(J-1))/(X41P[J]-X41P(J-1))                         
      B=(X41P(J-1)*Y41P[J]-X41P[J]*Y41P(J-1))/(X41P(J-1)-X41P[J])       
      QIN(32,I)=0.00863/0.02986*(A*ENP+B)*1.D-18
      GO TO 1242
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1241 QIN(32,I)=0.00863/(EIN(32)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(32)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(32)+E(3))
 1242 if(EN <= (2.0*EIN(32))) GO TO 1250 
      PEQIN(32,I)=PEQEL(2,(I-IOFFN(32)))
#
# 7 3S SCALED FROM 4 3S
 1250 if(EN <= EIN(33)) GO TO 2000
      ER=EIN(33)/EIN(11)
      ENP=EN/ER
      if(ENP > X43S(N43S):
) GO TO 1271
      DO 1260 J=2,N43S
      if(ENP <= X43S[J]:
) GO TO 1270
 1260 CONTINUE
      J=N43S
 1270 A=(Y43S[J]-Y43S(J-1))/(X43S[J]-X43S(J-1))                         
      B=(X43S(J-1)*Y43S[J]-X43S[J]*Y43S(J-1))/(X43S(J-1)-X43S[J])       
      QIN(33,I)=0.187*(A*ENP+B)*1.D-18
      GO TO 1272
# IF ENERGY GT X43S(N43S) EV SCALE BY 1/E**3
 1271 QIN(33,I)=0.187*Y43S(N43S)*(X43S(N43S)/ENP)**3*1.D-18
 1272 if(EN <= (2.0*EIN(33))) GO TO 1280
      PEQIN(33,I)=PEQEL(2,(I-IOFFN(33)))
#
# 7 1S SCALED FROM 4 1S
 1280 if(EN <= EIN(34)) GO TO 2000
      ER=EIN(34)/EIN(12)
      ENP=EN/ER
      if(ENP > X41S(N41S):
) GO TO 1301
      DO 1290 J=2,N41S
      if(ENP <= X41S[J]:
) GO TO 1300
 1290 CONTINUE
      J=N41S
 1300 A=(Y41S[J]-Y41S(J-1))/(X41S[J]-X41S(J-1))                         
      B=(X41S(J-1)*Y41S[J]-X41S[J]*Y41S(J-1))/(X41S(J-1)-X41S[J])       
      QIN(34,I)=0.187*(A*ENP+B)*1.D-18
      GO TO 1302
# IF ENERGY GT X41S(N41S) EV SCALE BY 1/E     
 1301 QIN(34,I)=0.187*Y41S(N41S)*(X41S(N41S)/ENP)*1.D-18
 1302 if(EN <= (2.0*EIN(34))) GO TO 1310
      PEQIN(34,I)=PEQEL(2,(I-IOFFN(34)))
#
# 7 3P SCALED FROM 4 3P
 1310 if(EN <= EIN(35)) GO TO 2000
      ER=EIN(35)/EIN(13)
      ENP=EN/ER
      if(ENP > X43P(N43P):
) GO TO 1331
      DO 1320 J=2,N43P
      if(ENP <= X43P[J]:
) GO TO 1330
 1320 CONTINUE
      J=N43P
 1330 A=(Y43P[J]-Y43P(J-1))/(X43P[J]-X43P(J-1))                         
      B=(X43P(J-1)*Y43P[J]-X43P[J]*Y43P(J-1))/(X43P(J-1)-X43P[J])       
      QIN(35,I)=0.187*(A*ENP+B)*1.D-18
      GO TO 1332
# IF ENERGY GT X43P(N43P) EV SCALE BY 1/E**3  
 1331 QIN(35,I)=0.187*Y43P(N43P)*(X43P(N43P)/ENP)**3*1.D-18
 1332 if(EN <= (2.0*EIN(35))) GO TO 1340
      PEQIN(35,I)=PEQEL(2,(I-IOFFN(35)))
#
# 7 3D SCALED FROM 4 3D
 1340 if(EN <= EIN(36)) GO TO 2000
      ER=EIN(36)/EIN(14)
      ENP=EN/ER
      if(ENP > X43D[N43D]):
 GO TO 1361
      DO 1350 J=2,N43D
      if(ENP <= X43D[J]):
 GO TO 1360
 1350 CONTINUE
      J=N43P
 1360 A=(Y43D[J]-Y43D[J-1])/(X43D[J]-X43D[J-1])                         
      B=(X43D[J-1]*Y43D[J]-X43D[J]*Y43D[J-1])/(X43D[J-1]-X43D[J])       
      QIN(36,I)=0.187*(A*ENP+B)*1.D-18
      GO TO 1362
# IF ENERGY GT X43D[N43D] EV SCALE BY 1/E**3  
 1361 QIN(36,I)=0.187*Y43D[N43D]*(X43D[N43D]/ENP)**3*1.D-18
 1362 if(EN <= (2.0*EIN(36))) GO TO 1370
      PEQIN(36,I)=PEQEL(2,(I-IOFFN(36)))
#
# 7 1D SCALED FROM 4 1D
 1370 if(EN <= EIN(37)) GO TO 2000
      ER=EIN(37)/EIN(15)
      ENP=EN/ER
      if(ENP > X41D[N41D]):
 GO TO 1391
      DO 1380 J=2,N41D
      if(ENP <= X41D[J]):
 GO TO 1390
 1380 CONTINUE
      J=N41D
 1390 A=(Y41D[J]-Y41D[J-1])/(X41D[J]-X41D[J-1])                         
      B=(X41D[J-1]*Y41D[J]-X41D[J]*Y41D[J-1])/(X41D[J-1]-X41D[J])       
      QIN(37,I)=0.187*(A*ENP+B)*1.D-18
      GO TO 1392
# IF ENERGY GT X41D[N41D] EV SCALE BY 1/E     
 1391 QIN(37,I)=0.187*Y41D[N41D]*(X41D[N41D]/ENP)*1.D-18
 1392 if(EN <= (2.0*EIN(37))) GO TO 1400
      PEQIN(37,I)=PEQEL(2,(I-IOFFN(37)))
#
# 7 1P  SCALED FROM 4 1P   OSC STRENGTH  F=0.00540 
 1400 if(EN <= EIN(38)) GO TO 2000
      ER=EIN(38)/EIN(18)
      ENP=EN/ER
      if(ENP > X41P(N41P):
) GO TO 1421
      DO 1410 J=2,N41P
      if(ENP <= X41P[J]:
) GO TO 1420
 1410 CONTINUE
      J=N41P
 1420 A=(Y41P[J]-Y41P(J-1))/(X41P[J]-X41P(J-1))                         
      B=(X41P(J-1)*Y41P[J]-X41P[J]*Y41P(J-1))/(X41P(J-1)-X41P[J])       
      QIN(38,I)=0.00540/0.02986*(A*ENP+B)*1.D-18
      GO TO 1422
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1421 QIN(38,I)=0.00540/(EIN(38)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(38)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(38)+E(3))
 1422 if(EN <= (2.0*EIN(38))) GO TO 1430 
      PEQIN(38,I)=PEQEL(2,(I-IOFFN(38)))
#
# SUM 3S LEVELS FROM 8 3S HIGHER AND SCALED FROM 4 3S
 1430 if(EN <= EIN(39)) GO TO 2000
      ER=EIN(39)/EIN(11)
      ENP=EN/ER
      if(ENP > X43S(N43S):
) GO TO 1451
      DO 1440 J=2,N43S
      if(ENP <= X43S[J]:
) GO TO 1450
 1440 CONTINUE
      J=N43S
 1450 A=(Y43S[J]-Y43S(J-1))/(X43S[J]-X43S(J-1))                         
      B=(X43S(J-1)*Y43S[J]-X43S[J]*Y43S(J-1))/(X43S(J-1)-X43S[J])       
      QIN(39,I)=0.553*(A*ENP+B)*1.D-18
      GO TO 1452
# IF ENERGY GT X43S(N43S) EV SCALE BY 1/E**3
 1451 QIN(39,I)=0.553*Y43S(N43S)*(X43S(N43S)/ENP)**3*1.D-18
 1452 if(EN <= (2.0*EIN(39))) GO TO 1460
      PEQIN(39,I)=PEQEL(2,(I-IOFFN(39)))
#
# SUM 1S LEVELS FROM 8 1S HIGHER AND SCALED FROM 4 1S
 1460 if(EN <= EIN(40)) GO TO 2000
      ER=EIN(40)/EIN(12)
      ENP=EN/ER
      if(ENP > X41S(N41S):
) GO TO 1481
      DO 1470 J=2,N41S
      if(ENP <= X41S[J]:
) GO TO 1480
 1470 CONTINUE
      J=N41S
 1480 A=(Y41S[J]-Y41S(J-1))/(X41S[J]-X41S(J-1))                         
      B=(X41S(J-1)*Y41S[J]-X41S[J]*Y41S(J-1))/(X41S(J-1)-X41S[J])       
      QIN(40,I)=0.553*(A*ENP+B)*1.D-18
      GO TO 1482
# IF ENERGY GT X41S(N41S) EV SCALE BY 1/E     
 1481 QIN(40,I)=0.553*Y41S(N41S)*(X41S(N41S)/ENP)*1.D-18
 1482 if(EN <= (2.0*EIN(40))) GO TO 1490
      PEQIN(40,I)=PEQEL(2,(I-IOFFN(40)))
#
# SUM 3P LEVELS FROM  8 3P HIGHER AND SCALED FROM 4 3P
 1490 if(EN <= EIN(41)) GO TO 2000
      ER=EIN(41)/EIN(13)
      ENP=EN/ER
      if(ENP > X43P(N43P):
) GO TO 1511
      DO 1500 J=2,N43P
      if(ENP <= X43P[J]:
) GO TO 1510
 1500 CONTINUE
      J=N43P
 1510 A=(Y43P[J]-Y43P(J-1))/(X43P[J]-X43P(J-1))                         
      B=(X43P(J-1)*Y43P[J]-X43P[J]*Y43P(J-1))/(X43P(J-1)-X43P[J])       
      QIN(41,I)=0.553*(A*ENP+B)*1.D-18
      GO TO 1512
# IF ENERGY GT X43P(N43P) EV SCALE BY 1/E**3  
 1511 QIN(41,I)=0.553*Y43P(N43P)*(X43P(N43P)/ENP)**3*1.D-18
 1512 if(EN <= (2.0*EIN(41))) GO TO 1520
      PEQIN(41,I)=PEQEL(2,(I-IOFFN(41)))
#
# SUM 3D LEVELS FROM 8 3D HIGHER AND SCALED FROM 4 3D
 1520 if(EN <= EIN(42)) GO TO 2000
      ER=EIN(42)/EIN(14)
      ENP=EN/ER
      if(ENP > X43D[N43D]):
 GO TO 1541
      DO 1530 J=2,N43D
      if(ENP <= X43D[J]):
 GO TO 1540
 1530 CONTINUE
      J=N43P
 1540 A=(Y43D[J]-Y43D[J-1])/(X43D[J]-X43D[J-1])                         
      B=(X43D[J-1]*Y43D[J]-X43D[J]*Y43D[J-1])/(X43D[J-1]-X43D[J])       
      QIN(42,I)=0.553*(A*ENP+B)*1.D-18
      GO TO 1542
# IF ENERGY GT X43D[N43D] EV SCALE BY 1/E**3  
 1541 QIN(42,I)=0.553*Y43D[N43D]*(X43D[N43D]/ENP)**3*1.D-18
 1542 if(EN <= (2.0*EIN(42))) GO TO 1550
      PEQIN(42,I)=PEQEL(2,(I-IOFFN(42)))
#
# SUM 1D LEVELS FROM 8 1D HIGHER AND SCALED FROM 4 1D
 1550 if(EN <= EIN(43)) GO TO 2000
      ER=EIN(43)/EIN(15)
      ENP=EN/ER
      if(ENP > X41D[N41D]):
 GO TO 1571
      DO 1560 J=2,N41D
      if(ENP <= X41D[J]):
 GO TO 1570
 1560 CONTINUE
      J=N41D
 1570 A=(Y41D[J]-Y41D[J-1])/(X41D[J]-X41D[J-1])                         
      B=(X41D[J-1]*Y41D[J]-X41D[J]*Y41D[J-1])/(X41D[J-1]-X41D[J])       
      QIN(43,I)=0.553*(A*ENP+B)*1.D-18
      GO TO 1572
# IF ENERGY GT X41D[N41D] EV SCALE BY 1/E     
 1571 QIN(43,I)=0.553*Y41D[N41D]*(X41D[N41D]/ENP)*1.D-18
 1572 if(EN <= (2.0*EIN(43))) GO TO 1580
      PEQIN(43,I)=PEQEL(2,(I-IOFFN(43)))
#
# 8 1P SCALED FROM 4 1P   OSC STRENGTH  F=0.00362 
 1580 if(EN <= EIN(44)) GO TO 2000
      ER=EIN(44)/EIN(18)
      ENP=EN/ER
      if(ENP > X41P(N41P):
) GO TO 1601
      DO 1590 J=2,N41P
      if(ENP <= X41P[J]:
) GO TO 1600
 1590 CONTINUE
      J=N41P
 1600 A=(Y41P[J]-Y41P(J-1))/(X41P[J]-X41P(J-1))                         
      B=(X41P(J-1)*Y41P[J]-X41P[J]*Y41P(J-1))/(X41P(J-1)-X41P[J])       
      QIN(44,I)=0.00362/0.02986*(A*ENP+B)*1.D-18
      GO TO 1602
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1601 QIN(44,I)=0.00362/(EIN(44)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(44)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(44)+E(3))
 1602 if(EN <= (2.0*EIN(44))) GO TO 1610 
      PEQIN(44,I)=PEQEL(2,(I-IOFFN(44)))
#
# 9 1P SCALED FROM 4 1P   OSC STRENGTH  F=0.00253 
 1610 if(EN <= EIN(45)) GO TO 2000
      ER=EIN(45)/EIN(18)
      ENP=EN/ER
      if(ENP > X41P(N41P):
) GO TO 1631
      DO 1620 J=2,N41P
      if(ENP <= X41P[J]:
) GO TO 1630
 1620 CONTINUE
      J=N41P
 1630 A=(Y41P[J]-Y41P(J-1))/(X41P[J]-X41P(J-1))                         
      B=(X41P(J-1)*Y41P[J]-X41P[J]*Y41P(J-1))/(X41P(J-1)-X41P[J])       
      QIN(45,I)=0.00253/0.02986*(A*ENP+B)*1.D-18
      GO TO 1632
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1631 QIN(45,I)=0.00253/(EIN(45)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(45)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(45)+E(3))
 1632 if(EN <= (2.0*EIN(45))) GO TO 1640 
      PEQIN(45,I)=PEQEL(2,(I-IOFFN(45)))
#
# 10 1P SCALED FROM 4 1P    OSC STRENGTH F=0.00184
 1640 if(EN <= EIN(46)) GO TO 2000
      ER=EIN(46)/EIN(18)
      ENP=EN/ER
      if(ENP > X41P(N41P):
) GO TO 1661
      DO 1650 J=2,N41P
      if(ENP <= X41P[J]:
) GO TO 1660
 1650 CONTINUE
      J=N41P
 1660 A=(Y41P[J]-Y41P(J-1))/(X41P[J]-X41P(J-1))                         
      B=(X41P(J-1)*Y41P[J]-X41P[J]*Y41P(J-1))/(X41P(J-1)-X41P[J])       
      QIN(46,I)=0.00184/0.02986*(A*ENP+B)*1.D-18
      GO TO 1662
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1661 QIN(46,I)=0.00184/(EIN(46)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(46)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(46)+E(3))
 1662 if(EN <= (2.0*EIN(46))) GO TO 1670 
      PEQIN(46,I)=PEQEL(2,(I-IOFFN(46)))
#
# 11 1P SCALED FROM 4 1P   OSC STRENGTH F=0.00138
 1670 if(EN <= EIN(47)) GO TO 2000
      ER=EIN(47)/EIN(18)
      ENP=EN/ER
      if(ENP > X41P(N41P):
) GO TO 1691
      DO 1680 J=2,N41P
      if(ENP <= X41P[J]:
) GO TO 1690
 1680 CONTINUE
      J=N41P
 1690 A=(Y41P[J]-Y41P(J-1))/(X41P[J]-X41P(J-1))                         
      B=(X41P(J-1)*Y41P[J]-X41P[J]*Y41P(J-1))/(X41P(J-1)-X41P[J])       
      QIN(47,I)=0.00138/0.02986*(A*ENP+B)*1.D-18
      GO TO 1692
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1691 QIN(47,I)=0.00138/(EIN(47)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(47)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(47)+E(3))
 1692 if(EN <= (2.0*EIN(47))) GO TO 1700 
      PEQIN(47,I)=PEQEL(2,(I-IOFFN(47)))
#
# 12 1P SCALED FROM 4 1P   OSC STRENGTH F=0.00106
 1700 if(EN <= EIN(48)) GO TO 2000
      ER=EIN(48)/EIN(18)
      ENP=EN/ER
      if(ENP > X41P(N41P):
) GO TO 1721
      DO 1710 J=2,N41P
      if(ENP <= X41P[J]:
) GO TO 1720
 1710 CONTINUE
      J=N41P
 1720 A=(Y41P[J]-Y41P(J-1))/(X41P[J]-X41P(J-1))                         
      B=(X41P(J-1)*Y41P[J]-X41P[J]*Y41P(J-1))/(X41P(J-1)-X41P[J])       
      QIN(48,I)=0.00106/0.02986*(A*ENP+B)*1.D-18
      GO TO 1722
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1721 QIN(48,I)=0.00106/(EIN(48)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(48)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(48)+E(3))
 1722 if(EN <= (2.0*EIN(48))) GO TO 1730 
      PEQIN(48,I)=PEQEL(2,(I-IOFFN(48)))
#
# SUM HIGHER 1P LEVELS     OSC STRENGTH F=0.00440
 1730 if(EN <= EIN(49)) GO TO 2000
      ER=EIN(49)/EIN(18)
      ENP=EN/ER
      if(ENP > X41P(N41P):
) GO TO 1751
      DO 1740 J=2,N41P
      if(ENP <= X41P[J]:
) GO TO 1750
 1740 CONTINUE
      J=N41P
 1750 A=(Y41P[J]-Y41P(J-1))/(X41P[J]-X41P(J-1))                         
      B=(X41P(J-1)*Y41P[J]-X41P[J]*Y41P(J-1))/(X41P(J-1)-X41P[J])       
      QIN(49,I)=0.00440/0.02986*(A*ENP+B)*1.D-18
      GO TO 1752
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1751 QIN(49,I)=0.00440/(EIN(49)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(49)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(49)+E(3))
 1752 if(EN <= (2.0*EIN(49))) GO TO 1760 
      PEQIN(49,I)=PEQEL(2,(I-IOFFN(49)))
 1760 CONTINUE
#  LOAD BREMSSTRAHLUNG X-SECTIONS
      if(EN <= 1000.):
 GO TO 2000
      DO 1780 J=2,NBREM
      if(EN <= EBRM[J]:
) GO TO 1790
 1780 CONTINUE
      J=NBREM
 1790 A=(math.log(Z2T[J])-math.log(Z2T(J-1)))/(EBRM[J]-EBRM(J-1))
      B=(math.log(Z2T[J])*EBRM(J-1)-math.log(Z2T(J-1))*EBRM[J])/(EBRM(J-1)-EBRM[J])
      QIN(50,I)=math.exp(A*EN+B)*1.D-24
#
 2000 CONTINUE                                                          
#     
      QMET=QIN(1,I)+QIN(2,I)
      QDIP=QIN(4,I)+QIN(10,I)+QIN(18,I)+QIN(26,I)+QIN(32,I)+QIN(38,I)+QIN(44,I)+QIN(45,I)+QIN(46,I)+QIN(47,I)+QIN(48,I)+QIN(49,I)
      QTRP=QIN(1,I)+QIN(3,I)+QIN(5,I)+QIN(7,I)+QIN(8,I)+QIN(11,I)+QIN(13,I)+QIN(14,I)+QIN(16,I)+QIN(19,I)+QIN(21,I)+QIN(22,I)+QIN(24,I)+QIN(27,I)+QIN(29,I)+QIN(30,I)+QIN(33,I)+QIN(35,I)+QIN(36,I)+QIN(39,I)+QIN(41,I)+QIN(42,I) 
      QSNG=QIN(2,I)+QIN(4,I)+QIN(6,I)+QIN(9,I)+QIN(10,I)+QIN(12,I)+QIN(15,I)+QIN(17,I)+QIN(18,I)+QIN(20,I)+QIN(23,I)+QIN(25,I)+QIN(26,I)+QIN(28,I)+QIN(31,I)+QIN(32,I)+QIN(34,I)+QIN(37,I)+QIN(38,I)+QIN(40,I)+QIN(43,I)+QIN(44,I)+QIN(45,I)+QIN(46,I)+QIN(47,I)+QIN(48,I)+QIN(49,I)
      QINEL=QSNG+QTRP+QION(1,I)+QION(2,I)
      Q(1,I)=QELA+QINEL+QIN(50,I)                            
# EXAMINE X-SECTION DATA 
#     WRITE(6,986) EN,QIN(4,I),QIN(10,I),QIN(18,I),QIN(26,I),QIN(32,I),
#    /QIN(38,I),QIN(44,I),QIN(45,I),QIN(46,I),QIN(47,I),QIN(48,I),
#    /QIN(49,I) 
# 986 print(' EN=',D11.5,' 21P=','%.3f' %,' 31P=','%.3f' %,' 41P=','%.3f' %,' 51
#    /P=','%.3f' %,' 61P=','%.3f' %,' 71P=','%.3f' %,/,8X,' 81P=','%.3f' %,' 91P=',D
#    /11.3,' 101P=','%.3f' %,' 111P=','%.3f' %,' 121P=','%.3f' %,' HIP=','%.3f' %)
#     WRITE(6,987) EN,QMET,QDIP,QSNG,QTRP,QINEL,Q(1,I)
# 987 print(' EN=',D12.5,' QMET=','%.3f' %,' QDIP=','%.3f' %,' QSNG=','%.3f' %,
#    /'QTRP=','%.3f' %,' QINL=',D11.4,' QTOT=',D11.4) 
 9000 CONTINUE                                                          
#  SAVE COMPUTE TIME                                                    
      DO 9001 K=1,NIN
      if(EFINAL <= EIN[K]:
) :                                        
       NIN=K-1
       GO TO 9011
      # endif
 9001 CONTINUE
 9011 CONTINUE 
      if(EN > 1000.):
 NIN=50                                         
      RETURN                                                            
      # end
      def GAS4(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY  ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN) 
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000)
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6)  
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)    
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]  
      DIMENSION XEN(144),YEM(144),YEL(144),YEPS(144),XION(90),YION(90),YINC(90),X23S(139),Y23S(139),X21S(128),Y21S(128),X23P(128),Y23P(128),X21P(125),Y21P(125),X33S(106),Y33S(106),X31S(87),Y31S(87),X33P(91),Y33P(91),X33D[108],Y33D[108],X31D[94],Y31D[94],X31P(114),Y31P(114),X43S(59),Y43S(59),X41S(55),Y41S(55),X43P(76),Y43P(76),X43D[65],Y43D[65],X41D[53],Y41D[53],X43F(40),Y43F(40),X41F(57),Y41F(57),X41P(96),Y41P(96),IOFFN(49),IOFFION(2)   
      DIMENSION Z2T(25),EBRM(25)
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME  
# ELASTIC                            
      DATA XEN/0.00,.008,.009,0.01,.013,.017,.020,.025,0.03,0.04, 0.05,0.06,0.07,0.08,0.09,0.10,0.12,0.15,0.18,0.20,                0.25,0.30,0.40,0.50,0.60,0.70,0.80,0.90,1.00,1.20,                1.50,1.80,2.00,2.50,3.00,4.00,5.00,6.00,7.00,8.00,                9.00,10.0,11.0,12.0,14.0,16.0,18.0,20.0,25.0,30.0,                35.0,40.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,200.,250.,300.,400.,500.,600.,800.,1000.,1500.,2000.,3000.,4000.,6000.,8000.,10000.,1.25D4,1.5D4,2.0D4,2.5'%.3f' %.0D4,4.0D4,6.0D4,8.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5'%.3f' %.0'%.3f' %.5D5,4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,2.0D6,2.5'%.3f' %.0'%.3f' %.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5'%.3f' %.0'%.3f' %.5D7,4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,1.0D8,1.25D8,1.5D8,1.75D8,2.0D8,2.5'%.3f' %.0'%.3f' %.5D8,4.0D8,4.5D8,5.0D8,6.0D8,7.0D8,8.0D8,9.0D8,1.0D9/
# ELASTIC MOMENTUM TRANSFER           
      DATA YEM/4.89,5.18,5.19,5.21,5.26,5.31,5.35,5.41,5.46,5.54,     5.62,5.68,5.74,5.79,5.83,5.86,5.94,6.04,6.12,6.16,                6.27,6.35,6.49,6.59,6.66,6.73,6.77,6.82,6.85,6.91,                6.96,6.98,6.99,6.96,6.89,6.62,6.31,6.00,5.68,5.35,                5.03,4.72,4.45,4.20,3.68,3.28,2.95,2.64,2.05,1.63,                1.33,1.09,.785,.590,.465,.375,.309,.262,.179,.132,.0807,.0549,.0400,.0242,.0164,.0119,.00716,.00482,.00234,.0014,.000676,4.03D-4,1.93D-4,1.15D-4,7.65D-5,5.10D-5,3.66D-5,2.17D-5,1.45D-5,1.04D-5,6.18D-6,2.99D-6,1.71D-6,1.21D-6,8.26D-7,6.05D-7,4.66D-7,3.73D-7,2.58D-7,1.92D-7,1.50D-7,1.22D-7,1.01D-7,8.59D-8,6.48D-8,5.11D-8,4.17D-8,3.48D-8,2.96D-8,2.10D-8,1.58D-8,1.24D-8,1.01D-8,7.05D-9,5.24D-9,4.07D-9,3.25D-9,2.67D-9,2.23D-9,1.63D-9,1.25D-9,9.89D-10,8.04D-10,6.67D-10,4.47D-10,3.22D-10,2.43D-10,1.91D-10,1.27D-10,9.04D-11,6.79D-11,5.29D-11,4.24D-11,3.48D-11,2.46D-11,1.84D-11,1.42D-11,1.13D-11,9.26D-12,6.00D-12,4.20D-12,3.10D-12,2.38D-12,1.53D-12,1.06D-12,7.82D-13,5.99D-13,4.74D-13,3.84D-13,2.67D-13,1.96D-13,1.50D-13,1.19D-13,9.62D-14/  
# ELASTIC TOTAL                                 
      DATA YEL/4.89,5.19,5.20,5.21,5.26,5.29,5.33,5.37,5.41,5.47,5.53,5.58,5.62,5.66,5.69,5.70,5.76,5.83,5.88,5.90,5.96,6.01,6.08,6.12,6.14,6.16,6.16,6.17,6.16,6.16,6.14,6.11,6.09,6.01,5.90,5.60,5.36,5.10,4.91,4.70,4.51,4.32,4.21,4.10,3.75,3.49,3.27,3.03,2.54,2.14,1.83,1.61,1.27,1.06,.884,.746,.652,.580,.460,.355,.244,.194,.150,.117,.087,.071,.052,.041,.028,.022,.014,.0108,.00722,.00544,.00437,.00352,.00295,.00224,.00182,.00154,.00118,.000830,.000654,.000550,.000466,.000411,.000371,.000342,.000301,.000274,.000255,.000241,.000230,.000222,.000209,.000201,.000195,.000190,.000186,.000180,.000177,.000174,.000172,.000170,.000169,.000168,.000167,.000167,.000167,.000166,.000166,.000166,.000166,.000166,30*.000165/
# ANGULAR DISTRIBUTION PARAMETER EPSILON
# EPSILON = 1.0-YEPS
      DATA YEPS/1.0,.99711,.99712,1.0,1.0,1.00562,1.00565,1.01118,1.01386,1.01920,1.02440,1.02688,1.03202,1.03445,1.03689,1.04209,1.04686,1.05400,1.06119,1.06604,1.07792,1.08474,1.10094,1.11490,1.12663,1.13826,1.14789,1.15724,1.16707,1.18142,1.19873,1.21165,1.21951,1.23447,1.24855,1.26918,1.26215,1.26104,1.23265,1.20568,1.17192,1.13835,1.08539,1.03657,.97200,.90989,.85384,.80836,.71541,.65146,.60355,.53739,.46277,.38963,.35522,.32989,.29979,.27742,.21850,.20332,.16921,.13304,.12155,.08318,.07263,.06130,.04637,.03720,.02338,.016295,.011386,.008195,.005394,.004037,.003205,.002548,.002113,.001572,.001246,.001044,7.61D-4,4.925D-4,3.404D-4,2.803D-4,2.179D-4,1.766D-4,1.475D-4,1.258D-4,9.60D-5,7.65D-5,6.29D-5,5.29D-5,4.53D-5,3.93D-5,3.07D-5,2.47D-5,2.04D-5,1.72D-5,1.47D-5,1.05D-5,7.84D-6,6.12D-6,4.91D-6,3.373D-6,2.463D-6,1.881D-6,1.483D-6,1.200D-6,9.91D-7,7.09D-7,5.322D-7,4.146D-7,3.319D-7,2.718D-7,1.775D-7,1.249D-7,9.27D-8,7.15D-8,4.62D-8,3.23D-8,2.382D-8,1.828D-8,1.447D-8,1.173D-8,8.14D-9,5.97D-9,4.56D-9,3.59D-9,2.90D-9,1.83D-9,1.26D-9,9.10D-10,6.90D-10,4.40D-10,3.00D-10,2.16D-10,1.63D-10,1.27D-10,1.02D-10,7.0D-11,5.1D-11,3.8D-11,3.0D-11,2.4D-11/
#  IONISATION (VALUES ABOVE 20KEV GENERATED BY BORN-BETHE IN SUB)
      DATA XION/24.58739,25.0,25.5,26.0,26.5,27.0,27.5,28.0,28.5,29.0,29.5,30.0,30.5,31.0,31.5,32.0,32.5,33.0,33.5,34.0,    36.0,38.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,105.,110.,115.,120.,125.,130.,135.,140.,145.,150.,160.,170.,180.,190.,200., 225.,250.,275.,300.,350.,400.,450.,500.,550.,600.,               650.,700.,750.,800.,850.,900.,950.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,1.0D4,1.2D4,1.4D4,1.6D4,1.8D4,2.0D4/
# GROSS IONISATION 
      DATA YION/.0,.0038,.0094,.0155,.0218,.0279,.0336,.0392,.0446,.0504,.0561,.0612,.0667,.0722,.0773,.0826,.0878,.0929,.0981,.103,.121,.138,.154,.188,.219,.242,.262,.276,.290,.301,.311,.319,.326,.333,.336,.338,.340,.341,.342,.342,.343,.342,.341,.340,.338,.335,.332,.326,.322,.316, .302,.290,.279,.268,.246,.231,.216,.203,.191,.180,              
     ..171,.163,.155,.148,.142,.136,.130,.125,.109,.097,.0872,.0795,.0729,.0608,.0524,.0458,.0410,.0368,.0336,.0311,.0293,.0255,.0229,.0206,.0192,.0164,.0147,.0130,.0119,.0108/
# COUNTING IONISATION      
      DATA YINC/.0,.0038,.0094,.0155,.0218,.0279,.0336,.0392,.0446,.0504,.0561,.0612,.0667,.0722,.0773,.0826,.0878,.0929,.0981,.103,.121,.138,.154,.188,.219,.242,.262,.276,.290,.301,.311,.319,.326,.333,.336,.338,.340,.341,.341,.341,.342,.341,.340,.339,.337,.334,.331,.325,.321,.315,.301,.289,.278,.267,.245,.230,.215,.202,.190,.179,           .170,.162,.154,.147,.141,.135,.129,.124,.108,.096,.0867,.0791,.0725,.0605,.0522,.0456,.0408,.0367,.0335,.0310,.0292,.0254,.0228,.0205,.0191,.0163,.0146,.0129,.0118,.0107/
#  ALL EXCITATIONS IN UNITS OF 10**-18
#  2 3S J=1 METASTABLE
      DATA X23S/19.81961,19.83,19.85,19.88,19.9,19.95,20.0,20.05,20.1,20.15,20.2,20.25,20.3,20.35,20.4,20.45,20.50,20.55,20.6,20.63,20.66,20.7,20.75,20.8,20.85,20.90,20.94,20.97,21.0,21.05,21.1,21.15,21.2,21.25,21.3,21.4,21.5,22.0,22.2,22.25,22.3,22.35,22.4,22.42,22.44,22.46,22.48,22.5,22.52,22.55,22.6,22.62,22.64,22.66,22.68,22.7,22.71,22.72,22.75,22.8,22.85,22.88,22.9,22.95,22.97,23.0,23.05,23.1,23.3,23.4,23.5,23.6,23.8,24.0,24.5,25.0,26.0,27.0,28.0,29.0,30.0,31.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,100.,110.,120.,130.,140.,150.,160.,180.,200.,220.,240.,260.,280.,300.,340.,380.,420.,460.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000.,1100.,1200.,1300.,1400.,1500.,1600.,1700.,1800.,1900.,2000./
      DATA Y23S/0.00,.780,1.16,1.64,1.98,2.81,3.53,4.13,4.61,4.96,5.20,5.35,5.41,5.36,5.21,4.95,4.63,4.23,3.66,3.16,3.04,3.13,3.41,3.77,4.14,4.44,4.54,4.43,4.27,3.96,3.69,3.48,3.32,3.21,3.15,3.08,3.06,3.09,3.08,3.04,2.97,2.84,2.25,1.58,1.83,4.91,4.45,4.13,3.95,3.79,3.60,3.51,3.07,2.45,2.61,2.67,2.36,2.97,3.01,2.96,2.87,2.61,3.04,2.75,3.16,3.06,2.90,2.79,2.81,2.86,2.75,2.80,2.71,2.65,2.58,2.48,2.39,2.30,2.19,2.09,1.98,1.84,1.73,1.53,1.36,1.22,1.09,.985,.892,.812,.742,.680,.555,.461,.389,.332,.287,.250,.220,.194,.154,.125,.103,.0861,.0726,.0617,.0529,.0397,.0305,.0239,.0191,.0154,.0126,.0105,.00740,.00542,.00407,.00314,.00247,.00187,.00145,.00115,9.23D-4,7.53D-4,6.22D-4,5.20D-4,4.39D-4,3.74D-4,3.21D-4,2.42D-4,1.86D-4,1.47D-4,1.18D-4,9.57D-5,7.89D-5,6.58D-5,5.54D-5,4.71D-5,4.04D-5/
# 2 1S J=0 METASTABLE
      DATA X21S/20.61577,20.62,20.63,20.65,20.67,20.69,20.72,20.75,20.80,20.85,20.90,20.96,20.98,21.0,21.05,21.1,21.15,21.2,21.22,21.25,21.3,21.4,21.5,21.6,21.7,21.8,21.9,22.0,22.1,22.2,22.25,22.3,22.35,22.4,22.42,22.44,22.46,22.48,22.5,22.55,22.59,22.6,22.61,22.62,22.63,22.64,22.65,22.68,22.7,22.71,22.72,22.73,22.75,22.78,22.8,22.85,22.87,22.88,22.89,22.9,22.91,22.92,22.93,22.94,22.95,22.96,22.97,22.98,22.99,23.0,23.01,23.05,23.1,23.2,23.3,23.4,23.5,23.6,23.8,24.0,24.2,24.4,24.7,25.0,26.0,28.0,30.0,32.0,35.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,80.0,90.0,100.,110.,120.,140.,170.,200.,240.,280.,320.,360.,400.,450.,500.,550.,600.,650.,700.,800.,900.,1000.,1100.,1200.,1400.,1600.,1800.,2000.,2200.,2400.,2700.,3000./
      DATA Y21S/0.00,.406,.477,.664,.820,.946,1.10,1.24,1.47,1.72,2.03,2.52,2.40,2.39,2.39,2.42,2.46,2.53,2.55,2.53,2.52,2.53,2.57,2.59,2.62,2.64,2.65,2.65,2.65,2.62,2.59,2.53,2.42,2.14,1.86,2.17,3.35,3.01,2.79,2.34,1.80,1.88,2.53,3.37,3.64,3.55,3.42,3.23,2.95,2.45,1.84,2.32,2.49,2.60,2.62,2.57,2.40,2.57,2.59,2.32,1.73,2.55,2.36,2.35,2.32,2.23,2.50,2.64,2.61,1.86,2.28,2.53,2.35,2.39,2.44,2.51,2.48,2.45,2.44,2.49,2.57,2.63,2.56,2.54,2.53,2.51,2.45,2.35,2.21,2.05,1.88,1.75,1.65,1.56,1.48,1.41,1.30,1.21,1.14,1.08,1.03,.948,.850,.771,.686,.617,.560,.512,.471,.428,.392,.361,.335,.312,.292,.259,.233,.211,.193,.178,.154,.136,.121,.109,.0997,.0916,.0817,.0737/
# 2 3P J=2,1,0 
      DATA X23P/20.96409,20.97,21.0,21.05,21.1,21.15,21.2,21.25,21.3,21.35,21.4,21.5,21.6,21.7,21.8,21.9,22.0,22.1,22.2,22.3,22.4,22.45,22.5,22.55,22.6,22.61,22.62,22.63,22.64,22.65,22.66,22.67,22.68,22.69,22.7,22.71,22.72,22.73,22.75,22.77,22.8,22.85,22.88,22.9,22.91,22.92,22.93,22.96,22.97,22.99,23.0,23.04,23.06,23.07,23.08,23.1,23.2,23.3,23.4,23.5,23.6,23.7,23.8,23.9,24.0,24.2,24.4,24.6,25.0,26.0,27.0,28.0,29.0,30.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,110.,120.,130.,140.,150.,160.,170.,180.,190.,200.,220.,240.,260.,280.,300.,340.,380.,420.,460.,500.,550.,600.,700.,800.,900.,1000.,1200.,1400.,1600.,1800.,2000.,2300.,2600.,3000./
      DATA Y23P/0.00,.0936,.241,.442,.611,.761,.912,1.03,1.10,1.17,1.23,1.32,1.40,1.47,1.54,1.60,1.66,1.73,1.80,1.87,1.94,2.05,2.07,2.09,2.22,2.48,2.68,2.60,2.27,1.78,1.45,1.43,1.52,1.59,1.60,1.45,1.47,1.70,1.83,1.91,1.95,1.93,2.32,1.98,1.72,2.23,2.09,2.12,2.07,2.17,1.82,2.18,1.80,1.82,1.94,1.94,1.90,1.88,1.89,2.00,2.16,2.21,2.14,2.08,2.09,2.03,2.16,2.26,2.29,2.41,2.47,2.48,2.47,2.43,2.30,2.15,2.00,1.84,1.69,1.55,1.43,1.31,1.21,1.11,.907,.748,.622,.522,.441,.375,.322,.277,.241,.210,.162,.127,.101,.0812,.0663,.0547,.0455,.0382,.0324,.0277,.0206,.0156,.0121,.00961,.00772,.00518,.00363,.00264,.00197,.00151,.00118,8.48D-4,5.21D-4,3.42D-4,2.37D-4,1.70D-4,9.65D-5,5.99D-5,3.96D-5,2.76D-5,2.00D-5,1.30D-5,8.94D-6,5.78D-6/
# 2 1P RESONANCE RADIATION J=1   58.434 NM       OSC STRENGTH F=0.27608  
      DATA X21P/21.21802,21.23,21.25,21.3,21.4,21.5,21.6,21.7,21.8,21.9,22.0,22.1,22.2,22.3,22.35,22.4,22.42,22.44,22.46,22.48,22.5,22.55,22.57,22.59,22.6,22.61,22.62,22.63,22.64,22.65,22.66,22.68,22.7,22.71,22.72,22.73,22.75,22.8,22.85,22.87,22.88,22.9,22.91,22.94,22.96,22.97,22.98,22.99,23.0,23.01,23.05,23.1,23.2,23.3,23.4,23.5,23.6,23.7,23.8,23.9,24.0,24.2,24.4,24.6,24.8,25.0,26.0,27.0,28.0,29.0,30.0,31.0,32.0,33.0,34.0,35.0,36.0,37.0,38.0,39.0,40.0,42.0,44.0,46.0,48.0,50.0,52.0,54.0,56.0,58.0,60.0,64.0,68.0,72.0,76.0,80.0,85.0,90.0,95.0,100.,110.,120.,130.,140.,160.,180.,200.,240.,280.,320.,360.,400.,450.,500.,550.,600.,650.,700.,800.,900.,1000.,1100.,1200.,1300.,1400./
      DATA Y21P/0.00,.0519,.0884,.163,.290,.397,.493,.582,.666,.748,.831,.914,.994,1.06,1.09,1.10,1.10,1.36,1.46,1.35,1.32,1.30,1.28,1.19,1.07,.943,.922,.941,.872,.751,.737,.959,1.13,1.17,.920,1.03,1.12,1.23,1.35,1.27,1.18,1.22,1.03,1.14,1.12,1.38,1.29,1.25,1.38,1.24,1.12,1.13,1.11,1.12,1.16,1.30,1.41,1.44,1.41,1.37,1.39,1.42,1.52,1.70,1.80,1.89,2.16,2.42,2.69,2.96,3.24,3.53,3.82,4.12,4.42,4.71,5.00,5.29,5.57,5.85,6.12,6.63,7.10,7.53,7.93,8.28,8.61,8.90,9.16,9.39,9.60,9.95,10.2,10.4,10.6,10.7,10.7,10.8,10.8,10.7,10.6,10.4,10.2,10.0,9.57,9.13,8.71,7.96,7.33,6.79,6.32,5.92,5.50,5.13,4.82,4.54,4.30,4.08,3.72,3.41,3.16,2.95,2.76,2.60,2.46/
# 3 3S J=1 
      DATA X33S/22.71847,22.72,22.73,22.74,22.75,22.78,22.8,22.83,22.85,22.86,22.87,22.88,22.89,22.9,22.91,22.912,22.914,22.916,22.92,22.94,22.96,22.98,23.0,23.02,23.05,23.1,23.2,23.25,23.3,23.35,23.4,23.44,23.48,23.52,23.57,23.59,23.62,23.65,23.7,23.75,23.82,23.89,23.93,24.0,24.4,25.0,26.0,27.0,28.0,29.0,30.0,31.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,54.0,58.0,62.0,66.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,110.,120.,130.,140.,150.,160.,170.,180.,200.,220.,240.,260.,280.,300.,340.,380.,420.,460.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000.,1100.,1200.,1300.,1400./
      DATA Y33S/0.00,.800,1.15,1.03,.985,.854,.812,.752,.644,.503,.277,1.79,1.17,1.06,1.32,1.51,1.57,1.37,.896,.848,.907,.816,.838,.656,.872,.859,.890,.900,.860,.750,.620,.810,.770,.960,.870,.870,.730,.710,.710,.730,.770,.690,.760,.742,.725,.694,.665,.635,.605,.577,.550,.524,.499,.452,.409,.370,.336,.305,.278,.253,.231,.212,.178,.151,.130,.112,.0968,.0817,.0696,.0597,.0516,.0449,.0393,.0306,.0242,.0195,.0160,.0132,.0111,.00938,.00800,.00596,.00456,.00356,.00284,.00230,.00188,.00131,9.53D-4,7.13D-4,5.47D-4,4.29D-4,3.25D-4,2.52D-4,1.99D-4,1.60D-4,1.31D-4,1.08D-4,9.02D-5,7.62D-5,6.49D-5,5.58D-5,4.20D-5,3.25D-5,2.56D-5,2.06D-5/
# 3 1S J=0
      DATA X31S/22.92032,22.96,22.985,23.02,23.05,23.07,23.1,23.15,23.2,23.25,23.3,23.33,23.36,23.39,23.41,23.45,23.48,23.51,23.54,23.56,23.59,23.62,23.65,23.68,23.73,23.82,23.88,23.94,24.0,25.0,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,44.0,48.0,52.0,56.0,60.0,65.0,70.0,75.0,80.0,90.0,100.,110.,120.,130.,140.,160.,180.,200.,220.,240.,260.,280.,300.,340.,380.,420.,460.,500.,550.,600.,650.,700.,750.,800.,900.,1000.,1100.,1200.,1300.,1400.,1500.,1600.,1800.,2000.,2400.,2800.,3200.,3600.,4000./
      DATA Y31S/0.00,.535,.457,.587,.490,.490,.478,.491,.506,.512,.501,.470,.418,.374,.351,.371,.520,.681,.520,.467,.496,.410,.442,.429,.416,.455,.377,.444,.422,.426,.428,.429,.425,.419,.412,.402,.396,.387,.370,.354,.338,.324,.311,.296,.283,.271,.260,.242,.226,.213,.203,.193,.185,.172,.161,.152,.144,.137,.131,.125,.120,.111,.103,.0957,.0894,.0839,.0778,.0725,.0678,.0636,.0599,.0566,.0509,.0462,.0423,.0389,.0361,.0336,.0315,.0296,.0264,.0238,.0199,.0171,.0150,.0133,.0120/
# 3 3P J=2,1,0
      DATA X33P/23.00707,23.02,23.03,23.04,23.05,23.06,23.07,23.08,23.1,23.2,23.3,23.4,23.5,23.55,23.6,23.65,23.7,23.8,23.9,24.0,24.1,24.2,24.3,24.4,24.6,24.8,25.0,26.0,27.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,44.0,48.0,52.0,56.0,60.0,64.0,68.0,72.0,76.0,80.0,85.0,90.0,95.0,100.,110.,120.,130.,140.,150.,160.,170.,180.,200.,220.,240.,260.,280.,300.,340.,380.,420.,460.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000.,1100.,1200.,1300.,1400.,1600.,1800.,2000.,2200.,2400.,2600.,2800.,3000./
      DATA Y33P/0.00,.387,.410,.179,.148,.335,.381,.282,.280,.309,.332,.359,.411,.416,.405,.448,.438,.467,.485,.493,.500,.515,.517,.513,.503,.508,.512,.516,.515,.524,.544,.539,.523,.500,.474,.446,.392,.342,.297,.259,.226,.197,.173,.152,.134,.118,.102,.0878,.0762,.0665,.0512,.0401,.0318,.0255,.0208,.0171,.0142,.0119,.00854,.00632,.00479,.00371,.00292,.00234,.00157,.00109,7.93D-4,5.92D-4,4.53D-4,3.34D-4,2.53D-4,1.96D-4,1.55D-4,1.24D-4,1.01D-4,8.37D-5,6.99D-5,5.89D-5,5.02D-5,3.72D-5,2.83D-5,2.21D-5,1.75D-5,1.16D-5,8.05D-6,5.82D-6,4.34D-6,3.32D-6,2.60D-6,2.07D-6,1.68D-6/
# 3 3D J=3,2,1
      DATA X33D/23.07365,23.1,23.15,23.2,23.25,23.3,23.35,23.4,23.45,23.5,23.55,23.6,23.66,23.7,23.75,23.8,23.85,23.9,23.95,24.0,24.05,24.1,24.15,24.2,24.25,24.3,24.35,24.4,24.45,24.5,24.55,24.6,24.65,24.7,24.8,24.9,25.0,26.0,27.0,28.0,29.0,30.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,52.0,54.0,56.0,58.0,60.0,64.0,68.0,72.0,76.0,80.0,85.0,90.0,95.0,100.,110.,120.,130.,140.,150.,160.,180.,200.,220.,240.,260.,280.,300.,320.,340.,360.,380.,400.,440.,480.,520.,560.,600.,650.,700.,750.,800.,850.,900.,1000.,1100.,1200.,1300.,1400.,1600.,1800.,2000.,2200.,2400.,2600.,2800.,3000./
      DATA Y33D/0.00,.00956,.0236,.0401,.0602,.0861,.120,.166,.222,.229,.238,.197,.123,.118,.110,.112,.104,.110,.099,.0985,.113,.107,.109,.114,.118,.119,.118,.116,.113,.105,.112,.116,.118,.119,.120,.120,.119,.115,.118,.121,.121,.120,.113,.105,.0958,.0867,.0780,.0701,.0628,.0563,.0505,.0453,.0407,.0366,.0330,.0298,.0269,.0221,.0183,.0152,.0127,.0107,.00868,.00712,.00588,.00490,.00347,.00252,.00188,.00142,.00110,8.64D-4,5.56D-4,3.76D-4,2.64D-4,1.92D-4,1.44D-4,1.10D-4,8.60D-5,6.84D-5,5.53D-5,4.53D-5,3.76D-5,3.15D-5,2.28D-5,1.70D-5,1.30D-5,1.02D-5,8.12D-6,6.25D-6,4.92D-6,3.94D-6,3.21D-6,2.64D-6,2.21D-6,1.58D-6,1.17D-6,8.95D-7,6.98D-7,5.55D-7,3.67D-7,2.56D-7,1.85D-7,1.38D-7,1.06D-7,8.32D-8,6.64D-8,5.38D-8/
# 3 1D J=2
      DATA X31D/23.07407,23.08,23.1,23.15,23.2,23.25,23.3,23.35,23.4,23.45,23.5,23.55,23.6,23.66,23.7,23.75,23.8,23.85,23.9,23.95,24.0,24.05,24.1,24.15,24.2,24.25,24.3,24.35,24.4,24.45,24.5,24.6,24.7,24.8,25.0,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,54.0,58.0,62.0,66.0,70.0,75.0,80.0,90.0,100.,110.,120.,140.,160.,180.,200.,220.,240.,260.,280.,300.,320.,340.,370.,400.,440.,480.,520.,560.,600.,650.,700.,800.,900.,1000.,1100.,1200.,1300.,1400.,1600.,1800.,2000.,2200.,2400.,2600.,2800.,3000./
      DATA Y31D/0.00,.097,.0973,.110,.126,.148,.175,.200,.221,.237,.235,.198,.185,.192,.168,.181,.189,.172,.193,.184,.190,.209,.206,.211,.214,.215,.212,.206,.199,.191,.174,.177,.179,.180,.181,.180,.180,.188,.198,.209,.217,.224,.229,.232,.234,.235,.234,.233,.228,.222,.215,.207,.199,.190,.180,.163,.148,.135,.124,.105,.0913,.0803,.0715,.0643,.0584,.0534,.0492,.0456,.0424,.0397,.0361,.0332,.0299,.0272,.0249,.0230,.0213,.0196,.0181,.0156,.0138,.0124,.0112,.0102,.00938,.00868,.00756,.00669,.00600,.00544,.00497,.00458,.00425,.00396/
# 3 1P  RESONANCE RADIATION J=1  53.703 NM     OSC STRENGTH F=0.07342
      DATA X31P/23.08702,23.1,23.15,23.2,23.25,23.3,23.35,23.4,23.45,23.5,23.54,23.56,23.60,23.64,23.68,23.7,23.75,23.80,23.88,23.9,23.95,24.0,24.05,24.1,24.15,24.2,24.3,24.4,24.5,24.6,24.7,24.8,25.0,25.2,25.4,25.6,26.0,27.0,28.0,29.0,30.0,31.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,52.0,54.0,56.0,58.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,110.,120.,130.,140.,160.,180.,200.,220.,240.,260.,280.,300.,340.,380.,420.,460.,500.,550.,600.,650.,700.,750.,800.,900.,1000.,1100.,1200.,1300.,1400.,1600.,1800.,2000.,2200.,2400.,2600.,2800.,3000.,3400.,3800.,4200.,4600.,5000.,5500.,6000.,6500.,7000.,8000.,9000.,10000./
      DATA Y31P/0.00,.114,.129,.137,.137,.134,.131,.130,.128,.129,.117,.127,.122,.163,.146,.150,.191,.180,.226,.224,.218,.230,.245,.253,.265,.274,.294,.308,.330,.360,.373,.382,.397,.409,.418,.423,.434,.469,.516,.577,.648,.723,.808,.941,1.07,1.20,1.32,1.43,1.54,1.64,1.74,1.82,1.90,1.97,2.04,2.10,2.15,2.27,2.35,2.42,2.47,2.50,2.52,2.53,2.53,2.52,2.50,2.47,2.42,2.33,2.24,2.14,2.06,1.97,1.90,1.82,1.76,1.64,1.53,1.44,1.36,1.29,1.21,1.15,1.08,1.03,.982,.938,.862,.799,.745,.699,.658,.623,.563,.514,.474,.440,.411,.386,.364,.344,.312,.285,.263,.244,.228,.211,.197,.184,.173,.155,.140,.128/
# 4 3S J=1
      DATA X43S/23.59396,23.62,23.65,23.7,23.8,23.9,24.0,25.0,26.0,27.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,52.0,54.0,56.0,58.0,60.0,64.0,68.0,72.0,76.0,80.0,85.0,90.0,95.0,100.,110.,120.,130.,140.,150.,160.,180.,200.,220.,240.,260.,280.,300.,320.,340.,360.,380.,400.,440.,480.,520.,560.,600./
      DATA Y43S/0.0,.314,.304,.292,.276,.266,.260,.243,.238,.234,.227,.212,.195,.178,.162,.147,.133,.121,.110,.100,.0911,.0832,.0761,.0697,.0640,.0589,.0543,.0464,.0399,.0346,.0301,.0264,.0225,.0194,.0168,.0147,.0113,.00894,.00718,.00585,.00483,.00403,.00289,.00214,.00164,.00127,.00101,8.17D-4,6.69D-4,5.55D-4,4.66D-4,3.94D-4,3.37D-4,2.90D-4,2.19D-4,1.70D-4,1.34D-4,1.08D-4,8.81D-5/
# 4 1S J=0
      DATA X41S/23.67357,23.7,23.8,23.9,24.0,25.0,26.0,27.0,28.0,29.0,30.0,32.0,34.0,36.0,38.0,40.0,44.0,48.0,52.0,56.0,60.0,65.0,70.0,75.0,80.0,90.0,100.,110.,120.,130.,140.,160.,180.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1200.,1400.,1600.,1800.,2000.,2200.,2400.,2600.,2800.,3000./
      DATA Y41S/0.0,.109,.110,.111,.112,.121,.128,.133,.138,.141,.143,.146,.148,.147,.146,.144,.139,.134,.129,.123,.118,.113,.108,.103,.0990,.0922,.0868,.0823,.0786,.0753,.0725,.0677,.0636,.0601,.0527,.0469,.0422,.0382,.0349,.0322,.0277,.0243,.0216,.0195,.0177,.0150,.0130,.0114,.0102,.00925,.00845,.00777,.00719,.00669,.00626/
# 4 3P J=2,1,0
      DATA X43P/23.70789,23.75,23.8,24.0,25.0,26.0,27.0,28.0,29.0,30.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,54.0,58.0,62.0,66.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,110.,120.,130.,140.,150.,160.,170.,180.,190.,200.,220.,240.,260.,280.,300.,320.,340.,360.,380.,400.,440.,480.,520.,560.,600.,650.,700.,750.,800.,850.,900.,950.,1000.,1100.,1200.,1300.,1400.,1600.,1800.,2000.,2200.,2400.,2600.,2800.,3000./
      DATA Y43P/0.0,.085,.110,.118,.152,.177,.194,.205,.211,.215,.215,.209,.200,.189,.178,.167,.156,.146,.136,.127,.110,.0962,.0840,.0736,.0647,.0553,.0475,.0410,.0356,.0310,.0271,.0210,.0165,.0132,.0106,.00865,.00713,.00593,.00498,.00421,.00359,.00266,.00202,.00156,.00123,9.88D-4,8.03D-4,6.60D-4,5.49D-4,4.61D-4,3.90D-4,2.87D-4,2.17D-4,1.67D-4,1.32D-4,1.06D-4,8.18D-5,6.46D-5,5.18D-5,4.22D-5,3.48D-5,2.90D-5,2.45D-5,2.08D-5,1.54D-5,1.17D-5,9.13D-6,7.25D-6,4.78D-6,3.32D-6,2.39D-6,1.78D-6,1.36D-6,1.07D-6,8.50D-7,6.88D-7/
# 4 3D J=3,2,1
      DATA X43D/23.73609,23.8,23.9,24.0,25.0,26.0,27.0,28.0,29.0,30.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,54.0,58.0,62.0,66.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,110.,120.,130.,140.,150.,160.,180.,200.,220.,240.,260.,280.,300.,340.,380.,420.,460.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000.,1100.,1200.,1300.,1400.,1500.,1600./
      DATA Y43D/.0,.0288,.0363,.0407,.0575,.0646,.0681,.0692,.069,.0675,.0629,.0573,.0516,.0461,.0411,.0365,.0325,.0290,.0258,.0231,.0186,.0151,.0123,.0102,.00847,.00681,.00554,.00455,.00378,.00316,.00267,.00194,.00145,.00111,8.61D-4,6.81D-4,5.47D-4,3.66D-4,2.55D-4,1.84D-4,1.37D-4,1.04D-4,8.08D-5,6.39D-5,4.18D-5,2.87D-5,2.05D-5,1.51D-5,1.14D-5,8.32D-6,6.24D-6,4.79D-6,3.75D-6,3.00D-6,2.43D-6,1.99D-6,1.65D-6,1.39D-6,1.18D-6,8.66D-7,6.55D-7,5.08D-7,4.01D-7,3.22D-7,2.63D-7/
# 4 1D J=2
      DATA X41D/23.73633,23.8,24.0,25.0,26.0,27.0,28.0,29.0,30.0,32.0,34.0,36.0,38.0,40.0,44.0,48.0,52.0,56.0,60.0,64.0,68.0,72.0,76.0,80.0,85.0,90.0,95.0,100.,110.,120.,130.,140.,160.,180.,200.,220.,240.,260.,300.,340.,380.,420.,460.,500.,550.,600.,650.,700.,800.,900.,1000.,1100.,1200./
      DATA Y41D/0.0,.0791,.0799,.0846,.0902,.0959,.102,.107,.112,.120,.127,.131,.134,.136,.136,.134,.131,.126,.121,.116,.112,.107,.102,.0978,.0927,.0880,.0836,.0796,.0724,.0663,.0610,.0564,.0489,.0430,.0384,.0346,.0314,.0288,.0246,.0215,.0190,.0171,.0155,.0142,.0128,.0117,.0107,.00990,.00860,.00760,.00681,.00616,.00563/
# 4 3F J=3,4,2
      DATA X43F/23.73701,23.8,23.9,24.0,25.0,26.0,27.0,28.0,29.0,30.0,31.0,32.0,33.0,34.0,35.0,36.0,37.0,38.0,39.0,40.0,42.0,44.0,46.0,48.0,50.0,54.0,58.0,62.0,66.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,110.,120.,130.,140./
      DATA Y43F/0.0,.0357,.0318,.0289,.0161,.0117,.00922,.00760,.00642,.00550,.00478,.00418,.00369,.00327,.00291,.00261,.00234,.00211,.00191,.00173,.00144,.00121,.00102,8.68D-4,7.44D-4,5.57D-4,4.25D-4,3.30D-4,2.61D-4,2.09D-4,1.61D-4,1.26D-4,9.98D-5,8.03D-5,6.53D-5,5.36D-5,3.72D-5,2.66D-5,1.96D-5,1.47D-5/
# 4 1F J=3
      DATA X41F/23.73701,23.8,24.0,25.0,26.0,27.0,28.0,29.0,30.0,31.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,54.0,58.0,62.0,66.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,110.,120.,130.,140.,150.,160.,180.,200.,220.,240.,260.,280.,300.,340.,380.,420.,460.,500.,550.,600.,650.,700.,750.,800.,900.,1000./
      DATA Y41F/0.0,.0175,.0172,.0160,.0149,.0139,.0130,.0122,.0114,.0108,.0102,.00909,.00819,.00742,.00677,.00619,.00569,.00525,.00487,.00452,.00393,.00346,.00307,.00274,.00246,.00217,.00193,.00173,.00156,.00142,.00129,.00108,9.24D-4,7.99D-4,6.99D-4,6.17D-4,5.50D-4,4.47D-4,3.73D-4,3.19D-4,2.77D-4,2.45D-4,2.19D-4,1.99D-4,1.67D-4,1.45D-4,1.28D-4,1.15D-4,1.04D-4,9.39D-5,8.55D-5,7.86D-5,78.27D-5,6.78D-5,6.35D-5,5.63D-5,5.07D-5/
# 4 1P RESONANCE RADIATION J=1   52.222 NM    OSC STRENGTH F=0.02986
      DATA X41P/23.74207,23.8,23.9,24.0,25.0,26.0,27.0,28.0,29.0,30.0,31.0,32.0,33.0,34.0,35.0,36.0,37.0,38.0,39.0,40.0,42.0,44.0,46.0,48.0,50.0,52.0,54.0,56.0,58.0,60.0,64.0,68.0,72.0,76.0,80.0,85.0,90.0,95.0,100.,110.,120.,130.,140.,150.,160.,180.,200.,220.,240.,260.,280.,300.,320.,340.,360.,380.,400.,440.,480.,520.,560.,600.,640.,680.,720.,760.,800.,850.,900.,950.,1000.,1100.,1200.,1300.,1400.,1600.,1800.,2000.,2200.,2400.,2600.,2800.,3000.,3400.,3800.,4200.,4600.,5000.,5500.,6000.,6500.,7000.,7500.,8000.,9000.,10000./
      DATA Y41P/0.00,.0147,.0242,.0334,.107,.158,.196,.227,.255,.281,.307,.333,.360,.387,.414,.442,.470,.498,.526,.553,.606,.657,.704,.748,.789,.826,.860,.891,.919,.944,.986,1.02,1.05,1.06,1.08,1.09,1.10,1.10,1.10,1.09,1.07,1.05,1.03,1.01,.985,.939,.896,.855,.817,.783,.751,.722,.695,.670,.646,.625,.605,.569,.537,.509,.484,.461,.441,.423,.406,.390,.376,.360,.345,.332,.320,.298,.279,.263,.248,.224,.205,.189,.175,.163,.153,.145,.137,.124,.113,.104,.0969,.0905,.0837,.0779,.0729,.0686,.0648,.0614,.0556,.0510/
# 5 1P RESONANCE  RADIATION J=1  51.562 NM      F=0.01504
# 6 1P RESONANCE  RADIATION J=1  51.210 NM      F=0.00863
# 7 1P RESONANCE  RADIATION J=1  51.000 NM      F=0.00540
# 8 1P RESONANCE  RADIATION J=1  50.865 NM      F=0.00362
# 9 1P RESONANCE  RADIATION J=1  50.772 NM      F=0.00253
# 10 1P RESONANCE RADIATION J=1  50.706 NM      F=0.00184
# 11 1P RESONANCE RADIATION J=1  50.657 NM      F=0.00138
# 12 1P RESONANCE RADIATION J=1  50.620 NM      F=0.00106
# SUM HIGHER 1P LEVELS RESONANCE RADIATION J=1  F=0.00440
# TOTAL SUM OSCILLATOR STRENGTH = 0.42326
#
# BREMSSTRAHLUNG X-SECTION WITH CUT OFF
      DATA Z2T/42.1,23.5,10.7,5.88,3.25,1.50,.886,.582,.437,.429,.460,.484,.502,.515,.525,.540,.550,.566,.575,.585,.592,.596,.597,.598,.598/
# UNITS 10**-24
      DATA EBRM/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,4.E7,5.E7,6.E7,8.E7,1.E8/
# --------------------------------------------------------------------
      if(NANISO == 0):
 :
       NAME='HE3    ISOTROPIC   2014  '   
      else: 
       NAME='HE3  ANISOTROPIC   2014  '
      # endif                                         
# --------------------------------------------------------------------  
#  HELIUM 3 USES SAME X-SECTIONS AS HE 4 WITH CORRECT ATOMIC MASS
#  HELIUM 4 BEST KNOWN GAS USED AS STANDARD ACCURACY BETTER THAN 0.2%   
#  AT ALL FIELDS.
#  2002: UPDATED 1997 DATA TO INCLUDE ANISOTROPIC ELASTIC SCATTTERING
#  2007: INCREASED DATA FILE UP TO 10 MEV 
#  2007: NEW ANISTROPIC SCATTERING def INTRODUCED
#  2007: PENNING FRACTION INTRODUCED
#  2010: SPLIT EXCITATION INTO 49 LEVELS.
#  2014: UPDATED IONISATION TO BE CONSISTENT WITH FURSA AND BRAY CCC
# USED MAINLY THE FOLLOWING THEORETICAL EXCITATION X-SECTIONS:
# AT RESONANCE ENERGIES USED RMPS CALCULATIONS OF 
#  BARTSCHAT   J.PHYS B31(1998)L469
# AT HIGHER ENERGIES USED RALCHENKO AT.DATA NUCL DATA TABLES 94(2008)603
# AT HIGHEST ENERGIES FOR RESONANCE DIPOLE TRANSITIONS USED BEF SCALING
# 2013: INTRODUCED IONISATION WITH CHARGE STATE =2
# -------------------------------------------------------------------- 
#
# BORN-BETHE VALUES FOR IONISATION
      CONST=1.873884D-20
      EMASS2=1021997.804
      API=numpy.arccos(-1.00)
      A0=0.52917720859D-8
      RY=13.60569193
      BBCONST=16.0*API*A0*A0*RY*RY/EMASS2
#
      AM2=0.489
      C=5.50 
#
      NION=2 
      NATT=1 
      NIN=49 
      NNULL=0   
      IONMODEL=0
#
      NBREM=25
      DO 6 J=1,NIN
      IZBR[J]=0
    6 CONTINUE
      IZBR(50)=2
#
      DO 1 J=1,6
    1 KEL[J]=NANISO
      DO 2 J=1,NIN
    2 KIN[J]=NANISO
      NDATA=144
      NIOND=90                                                          
      N23S=139          
      N21S=128
      N23P=128          
      N21P=125                            
      N33S=106
      N31S=87
      N33P=91
      N33D=108
      N31D=94
      N31P=114
      N43S=59
      N41S=55
      N43P=76
      N43D=65
      N41D=53
      N43F=40
      N41F=57
      N41P=96
      E[1]=0.0                                                          
      E(2)=2.0*EMASS/(3.01600*AMU)                                      
      E(3)=24.58739
# ENTER EXCITATION X-SECTION AT 1.4MEV                                   
      E(4)=0.5841D-19
# ENTER IONISING X-SECTION AT 1.4MEV                            
      E(5)=0.1271D-18
# ENTER EOBY FOR MINIMUM IONISING PARTICLE         
      E(6)=10.5
# EOBY AT LOW ENERGY
      EOBY[1]=12.0    
      EOBY(2)=65.0    
# IONISATION ENERGIES 
      EION[1]=24.58739
      EION(2)=79.00515
      LEGAS[1]=0
      LEGAS(2)=0
      ISHELL[1]=0
      ISHELL(2)=0
# AUGER AND FLUORESCENCE DATA
      NC0[1]=0
      EC0[1]=0.0
      WKLM[1]=0.0
      EFL[1]=0.0
      NG1[1]=0
      EG1[1]=0.0
      NG2[1]=0
      EG2[1]=0.0
      NC0(2)=1
      EC0(2)=10.0
      WKLM(2)=0.0
      EFL(2)=0.0
      NG1(2)=0
      EG1(2)=0.0
      NG2(2)=0
      EG2(2)=0.0
#
      DO 776 J=1,NION
      DO 777 I=1,20000
      if(EG[I]:
 > EION[J]) :
       IOFFION[J]=I-1
       GO TO 776
      # endif
  777 CONTINUE
  776 CONTINUE
#
      EIN[1]=19.81961                                                   
      EIN(2)=20.61577
      EIN(3)=20.96409
      EIN(4)=21.21802
      EIN(5)=22.71847
      EIN(6)=22.92032
      EIN(7)=23.00707
      EIN(8)=23.07365
      EIN(9)=23.07407
      EIN(10)=23.08702
      EIN(11)=23.59396
      EIN(12)=23.67357
      EIN(13)=23.70789
      EIN(14)=23.73609
      EIN(15)=23.73633
      EIN(16)=23.73701
      EIN(17)=23.73701
      EIN(18)=23.74207
      EIN(19)=23.97197
      EIN(20)=24.01121
      EIN(21)=24.02822
      EIN(22)=24.04266
      EIN(23)=24.04280
      EIN(24)=24.04315
      EIN(25)=24.04315
      EIN(26)=24.04580
      EIN(27)=24.16900
      EIN(28)=24.19116
      EIN(29)=24.20081
      EIN(30)=24.20916
      EIN(31)=24.20925
      EIN(32)=24.21100
      EIN(33)=24.28456
      EIN(34)=24.29828
      EIN(35)=24.30429
      EIN(36)=24.30954
      EIN(37)=24.30960
      EIN(38)=24.31071
      EIN(39)=24.35810
      EIN(40)=24.36718
      EIN(41)=24.37116
      EIN(42)=24.37468
      EIN(43)=24.37472
      EIN(44)=24.37547
      EIN(45)=24.41989
      EIN(46)=24.45168
      EIN(47)=24.47518
      EIN(48)=24.49308
      EIN(49)=24.50708
      EIN(50)=0.0
#***********************************************************************
# ENTER PENNING FRACTION FOR EACH LEVEL
# PENNING FRACTION BETWEEN 0.9 AND 1.0 FOR ALL MIXTURES
      DO 50 NL=1,NIN
      PENFRA[1,NL]=1.00
#  PENNING TRANSFER DISTANCE MICRONS
      PENFRA[2,NL]=1.0  
# PENNING TRANSFER TIME PICOSECONDS
   50 PENFRA[3,NL]=1.0
# HORNBECK MOLNAR MOD 
# IF PURE GAS SET TO : 0 FOR FIRST 6 LEVELS 0.25 FOR OTHER LEVELS
#     PENFRA(1,1)=0.0
#     PENFRA(1,2)=0.0
#     PENFRA(1,3)=0.0
#     PENFRA(1,4)=0.0
#     PENFRA(1,5)=0.0
#     PENFRA(1,6)=0.0
#***********************************************************************
      if(IPEN == 0):
 GO TO 4 
      DO 3 KDUM=1,NIN
      if(PENFRA[1,KDUM] == 0.0):
 GO TO 3
      WRITE(6,999) NAME,EIN(KDUM),PENFRA[1,KDUM],PENFRA[2,KDUM],PENFRA[3,KDUM]
  999 print(' GAS = ',A15,' ENERGY LEVEL = ','%.4f' %,' EV.',/,' PENNING PROBABILITY =','%.3f' % ,' ABS.LENGTH =',F7.2,' DECAY TIME =',F7.1,/)    
    3 CONTINUE
    4 DO 5 NL=1,NIN
      DO 651 I=1,20000
      if(EG[I]:
 > EIN(NL)) :
       IOFFN(NL)=I-1
       GO TO 5
      # endif
  651 CONTINUE
    5 CONTINUE
      SCRPT[1]='                                                  '
      SCRPT(2)=' ELASTIC  ANISOTROPIC        HELIUM 3             '
      if(NANISO == 0):
 :
      SCRPT(2)=' ELASTIC   ISOTROPIC         HELIUM 3             '
      # endif
      SCRPT(3)=' IONISATION CHARGE STATE=1         ELOSS= 24.58739'
      SCRPT(4)=' IONISATION CHARGE STATE=2         ELOSS= 79.00515'
      SCRPT(5)=' ATTACHMENT                                       '
      SCRPT(6)='                                                  ' 
      SCRPT(7)='                                                  '
      SCRPT(8)=' EXC  23S J=1    METASTABLE        ELOSS= 19.81961'
      SCRPT(9)=' EXC  21S J=0    METASTABLE        ELOSS= 20.61577'
      SCRPT(10)=' EXC  23P J=2,1,0                  ELOSS= 20.96409'
      SCRPT(11)=' EXC  21P J=1    RESONANT          ELOSS= 21.21802'
      SCRPT(12)=' EXC  33S J=1                      ELOSS= 22.71847'
      SCRPT(13)=' EXC  31S J=0                      ELOSS= 22.92032'
      SCRPT(14)=' EXC  33P J=2,1,0                  ELOSS= 23.00707'
      SCRPT(15)=' EXC  33D J=3,2,1                  ELOSS= 23.07365'
      SCRPT(16)=' EXC  31D J=2                      ELOSS= 23.07407'
      SCRPT(17)=' EXC  31P J=1    RESONANT          ELOSS= 23.08702'
      SCRPT(18)=' EXC  43S J=1                      ELOSS= 23.59396'
      SCRPT(19)=' EXC  41S J=0                      ELOSS= 23.67357'
      SCRPT(20)=' EXC  43P J=2,1,0                  ELOSS= 23.70789'
      SCRPT(21)=' EXC  43D J=3,2,1                  ELOSS= 23.73609'
      SCRPT(22)=' EXC  41D J=2                      ELOSS= 23.73633'
      SCRPT(23)=' EXC  43F J=3,4,2                  ELOSS= 23.73701'
      SCRPT(24)=' EXC  41F J=3                      ELOSS= 23.73701'
      SCRPT(25)=' EXC  41P J=1    RESONANT          ELOSS= 23.74207'
      SCRPT(26)=' EXC  53S J=1                      ELOSS= 23.97197'
      SCRPT(27)=' EXC  51S J=0                      ELOSS= 24.01121'
      SCRPT(28)=' EXC  53P J=2,1,0                  ELOSS= 24.02822'
      SCRPT(29)=' EXC  53D J=3,2,1                  ELOSS= 24.04266'
      SCRPT(30)=' EXC  51D J=2                      ELOSS= 24.04280'
      SCRPT(31)=' EXC  53F J=3,4,2                  ELOSS= 24.04315'
      SCRPT(32)=' EXC  513 J=3                      ELOSS= 24.04315'
      SCRPT(33)=' EXC  51P J=1    RESONANT          ELOSS= 24.04580'
      SCRPT(34)=' EXC  63S J=1                      ELOSS= 24.16900'
      SCRPT(35)=' EXC  61S J=0                      ELOSS= 24.19116'
      SCRPT(36)=' EXC  63P J=2,1,0                  ELOSS= 24.20081'
      SCRPT(37)=' EXC  63D J=3,2,1                  ELOSS= 24.20916'
      SCRPT(38)=' EXC  61D J=2                      ELOSS= 24.20925'
      SCRPT(39)=' EXC  61P J=1    RESONANT          ELOSS= 24.21100'
      SCRPT(40)=' EXC  73S J=1                      ELOSS= 24.28456'
      SCRPT(41)=' EXC  71S J=0                      ELOSS= 24.29828'
      SCRPT(42)=' EXC  73P J=2,1,0                  ELOSS= 24.30429'
      SCRPT(43)=' EXC  73D J=3,2,1                  ELOSS= 24.30954'
      SCRPT(44)=' EXC  71D J=2                      ELOSS= 24.30960'
      SCRPT(45)=' EXC  71P J=1    RESONANT          ELOSS= 24.31071'
      SCRPT(46)=' EXC  N3S SUM HIGH                 ELOSS= 24.35810'
      SCRPT(47)=' EXC  N1S SUM HIGH                 ELOSS= 24.36718'
      SCRPT(48)=' EXC  N3P SUM HIGH                 ELOSS= 24.37116' 
      SCRPT(49)=' EXC  N3D SUM HIGH                 ELOSS= 24.37468'
      SCRPT(50)=' EXC  N1D SUM HIGH                 ELOSS= 24.37472'
      SCRPT(51)=' EXC  81P J=1    RESONANT          ELOSS= 24.37547'
      SCRPT(52)=' EXC  91P J=1    RESONANT          ELOSS= 24.41989'
      SCRPT(53)=' EXC 101P J=1    RESONANT          ELOSS= 24.45168'
      SCRPT(54)=' EXC 111P J=1    RESONANT          ELOSS= 24.47518'
      SCRPT(55)=' EXC 121P J=1    RESONANT          ELOSS= 24.49308'
      SCRPT(56)=' EXC  N1P SUM HI RESONANT          ELOSS= 24.50708'
      SCRPT(57)=' BREMSSTRAHLUNG FROM HELIUM ATOM                  '
#      EN=-ESTEP/2.00    
      DO 9000 I=1,NSTEP   
      EN=EG[I]                                             
#      EN=EN+ESTEP 
      if(EN > EIN[1]:
) :
       GAMMA1=(EMASS2+2.00*EN)/EMASS2
       GAMMA2=GAMMA1*GAMMA1
       BETA=math.sqrt(1.00-1.00/GAMMA2)
       BETA2=BETA*BETA
      # endif
      DO 10 J=2,NDATA                                                   
      if(EN <= XEN[J]:
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA                                                           
   20 A=(YEL[J]-YEL(J-1))/(XEN[J]-XEN(J-1))                         
      B=(XEN(J-1)*YEL[J]-XEN[J]*YEL(J-1))/(XEN(J-1)-XEN[J])
      QELA=(A*EN+B)*1.0D-16
#
      A=(YEM[J]-YEM(J-1))/(XEN[J]-XEN(J-1))                         
      B=(XEN(J-1)*YEM[J]-XEN[J]*YEM(J-1))/(XEN(J-1)-XEN[J]) 
      QMOM=(A*EN+B)*1.0D-16
      PQ1=0.5+(QELA-QMOM)/QELA
#
      A=(YEPS[J]-YEPS(J-1))/(XEN[J]-XEN(J-1))
      B=(XEN(J-1)*YEPS[J]-XEN[J]*YEPS(J-1))/(XEN(J-1)-XEN[J])
      PQ2=A*EN+B
# EPSILON = 1-YEPS
      PQ2=1.00-PQ2
#
      if(NANISO == 1):
 PEQEL(2,I)=PQ1
      if(NANISO == 2):
 PEQEL(2,I)=PQ2
      Q(2,I)=QELA
      if(NANISO == 0):
 :
       Q(2,I)=QMOM
       PEQEL(2,I)=0.5
      # endif
# GROSS IONISATION                                                      
      QION(1,I)=0.00
      PEQION(1,I)=0.50  
      if(NANISO == 2):
 PEQION(1,I)=0.00                               
      if(EN <= EION[1]:
) GO TO 200 
      if(EN > XION(NIOND):
) GO TO 121     
      DO 110 J=2,NIOND                                                  
      if(EN <= XION[J]:
) GO TO 120                                       
  110 CONTINUE                                                          
      J=NIOND                                                           
  120 A=(YION[J]-YION(J-1))/(XION[J]-XION(J-1))                         
      B=(XION(J-1)*YION[J]-XION[J]*YION(J-1))/(XION(J-1)-XION[J])       
      QION(1,I)=(A*EN+B)*1.D-16 
      GO TO 122
# USE BORN-BETHE X-SECTION ABOVE XION(NIOND) EV
  121 AX2=1.00/BETA2
      AX1=AX2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(1,I)=CONST*(AM2*(AX1-DEN[I]/2.0)+C*AX2)/0.995
  122 CONTINUE
# USE ANISOTROPIC SCATTERING FOR PRIMARY IONISATION ELECTRON FOR
# ENERGIES ABOVE 2 * IONISATION ENERGY 
# ANISOTROPIC ANGULAR DISTRIBUTION SAME AS ELASTIC AT ENERGY OFFSET BY 
# IONISATION ENERGY
      if(EN <= (2.0*EION[1]:
)) GO TO 200
      PEQION(1,I)=PEQEL(2,(I-IOFFION[1]))                               
# ATTACHMENT                                                            
  200 Q(4,I)=0.00 
# COUNTING IONISATION
      Q(5,I)=0.00
      PEQION(2,I)=0.50
      if(NANISO == 2):
 PEQION(2,I)=0.00
      if(EN <= EION[1]:
) GO TO 250
      if(EN > XION(NIOND):
) GO TO 241
      DO 230 J=2,NIOND
      if(EN <= XION[J]:
) GO TO 240
  230 CONTINUE
      J=NIOND
  240 A=(YINC[J]-YINC(J-1))/(XION[J]-XION(J-1))
      B=(XION(J-1)*YINC[J]-XION[J]*YINC(J-1))/(XION(J-1)-XION[J])      
      Q(5,I)=(A*EN+B)*1.0D-16
      GO TO 242
# USE BORN-BETHE X-SECTION ABOVE XION(NIOND) EV
  241 Q(5,I)=CONST*(AM2*(AX1-DEN[I]/2.0)+C*AX2)
  242 CONTINUE  
      if(EN <= (2.00*EION(2):
)) GO TO 250
      PEQION(2,I)=PEQEL(2,(I-IOFFION(2)))
  250 Q(6,I)=0.00                                                      
#
      QTEMP1=2.0*Q(5,I)-QION(1,I)
      QTEMP2=QION(1,I)-Q(5,I)
      QION(1,I)=QTEMP1
      QION(2,I)=QTEMP2
      if(QION(2,I):
 < 0.0) QION(2,I)=0.0
#
      DO 251 NL=1,NIN+1
      QIN(NL,I)=0.00
      PEQIN(NL,I)=0.50
      if(NANISO == 2):
 :
       PEQIN(NL,I)=0.00
      # endif
  251 CONTINUE
#
# 2 3S 
      if(EN <= EIN[1]:
) GO TO 2000  
      if(EN > X23S(N23S):
) GO TO 311                                  
      DO 300 J=2,N23S                                                   
      if(EN <= X23S[J]:
) GO TO 310                                       
  300 CONTINUE                                                          
      J=N23S                                                            
  310 A=(Y23S[J]-Y23S(J-1))/(X23S[J]-X23S(J-1))                         
      B=(X23S(J-1)*Y23S[J]-X23S[J]*Y23S(J-1))/(X23S(J-1)-X23S[J])       
      QIN(1,I)=(A*EN+B)*1.D-18 
      GO TO 312
# IF ENERGY GT X23S(N23S) EV SCALE BY 1/E**3 
  311 QIN(1,I)=Y23S(N23S)*(X23S(N23S)/EN)**3*1.D-18
  312 if(EN <= (2.0*EIN[1])) GO TO 320   
      PEQIN(1,I)=PEQEL(2,(I-IOFFN[1])) 
#
# 2 1S                                                                  
  320 if(EN <= EIN(2)) GO TO 2000
      if(EN > X21S(N21S):
) GO TO 341                         
      DO 330 J=2,N21S                                                   
      if(EN <= X21S[J]:
) GO TO 340                                       
  330 CONTINUE                                                          
      J=N21S                                                            
  340 A=(Y21S[J]-Y21S(J-1))/(X21S[J]-X21S(J-1))                         
      B=(X21S(J-1)*Y21S[J]-X21S[J]*Y21S(J-1))/(X21S(J-1)-X21S[J])       
      QIN(2,I)=(A*EN+B)*1.D-18
      GO TO 342
# IF ENERGY GT X21S(N21S) EV SCALE BY 1/E
  341 QIN(2,I)=Y21S(N21S)*(X21S(N21S)/EN)*1.D-18   
  342 if(EN <= (2.0*EIN(2))) GO TO 350
      PEQIN(2,I)=PEQEL(2,(I-IOFFN(2)))
#
# 2 3P
  350 if(EN <= EIN(3)) GO TO 2000
      if(EN > X23P(N23P):
) GO TO 371
      DO 360 J=2,N23P
      if(EN <= X23P[J]:
) GO TO 370
  360 CONTINUE
      J=N23P
  370 A=(Y23P[J]-Y23P(J-1))/(X23P[J]-X23P(J-1))                         
      B=(X23P(J-1)*Y23P[J]-X23P[J]*Y23P(J-1))/(X23P(J-1)-X23P[J])       
      QIN(3,I)=(A*EN+B)*1.D-18
      GO TO 372
# IF ENERGY GT X23P(N23P) EV SCALE BY 1/E**3
  371 QIN(3,I)=Y23P(N23P)*(X23P(N23P)/EN)**3*1.D-18   
  372 if(EN <= (2.0*EIN(3))) GO TO 380
      PEQIN(3,I)=PEQEL(2,(I-IOFFN(3)))
#
# 2 1P        OSC STRENGTH  F=0.27608
  380 if(EN <= EIN(4)) GO TO 2000
      if(EN > X21P(N21P):
) GO TO 401
      DO 390 J=2,N21P
      if(EN <= X21P[J]:
) GO TO 400
  390 CONTINUE
      J=N21P
  400 A=(Y21P[J]-Y21P(J-1))/(X21P[J]-X21P(J-1))                         
      B=(X21P(J-1)*Y21P[J]-X21P[J]*Y21P(J-1))/(X21P(J-1)-X21P[J])       
      QIN(4,I)=(A*EN+B)*1.D-18
      GO TO 402
# IF ENERGY GT X21P(N21P) EV : USE BEF SCALING
  401 QIN(4,I)=0.27608/(EIN(4)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(4)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(4)+E(3))
  402 if(EN <= (2.0*EIN(4))) GO TO 410
      PEQIN(4,I)=PEQEL(2,(I-IOFFN(4)))
#
# 3 3S
  410 if(EN <= EIN(5)) GO TO 2000
      if(EN > X33S(N33S):
) GO TO 431
      DO 420 J=2,N33S
      if(EN <= X33S[J]:
) GO TO 430
  420 CONTINUE
      J=N33S
  430 A=(Y33S[J]-Y33S(J-1))/(X33S[J]-X33S(J-1))                         
      B=(X33S(J-1)*Y33S[J]-X33S[J]*Y33S(J-1))/(X33S(J-1)-X33S[J])       
      QIN(5,I)=(A*EN+B)*1.D-18
      GO TO 432
# IF ENERGY GT X33S(N33S) EV SCALE BY 1/E**3
  431 QIN(5,I)=Y33S(N33S)*(X33S(N33S)/EN)**3*1.D-18   
  432 if(EN <= (2.0*EIN(5))) GO TO 440
      PEQIN(5,I)=PEQEL(2,(I-IOFFN(5)))
#
# 3 1S
  440 if(EN <= EIN(6)) GO TO 2000
      if(EN > X31S(N31S):
) GO TO 461
      DO 450 J=2,N31S
      if(EN <= X31S[J]:
) GO TO 460
  450 CONTINUE
      J=N31S
  460 A=(Y31S[J]-Y31S(J-1))/(X31S[J]-X31S(J-1))                         
      B=(X31S(J-1)*Y31S[J]-X31S[J]*Y31S(J-1))/(X31S(J-1)-X31S[J])       
      QIN(6,I)=(A*EN+B)*1.D-18
      GO TO 462
# IF ENERGY GT X31S(N31S) EV SCALE BY 1/E   
  461 QIN(6,I)=Y31S(N31S)*(X31S(N31S)/EN)*1.D-18   
  462 if(EN <= (2.0*EIN(6))) GO TO 470
      PEQIN(6,I)=PEQEL(2,(I-IOFFN(6)))
#
# 3 3P
  470 if(EN <= EIN(7)) GO TO 2000
      if(EN > X33P(N33P):
) GO TO 491
      DO 480 J=2,N33P
      if(EN <= X33P[J]:
) GO TO 490
  480 CONTINUE
      J=N33P
  490 A=(Y33P[J]-Y33P(J-1))/(X33P[J]-X33P(J-1))                         
      B=(X33P(J-1)*Y33P[J]-X33P[J]*Y33P(J-1))/(X33P(J-1)-X33P[J])       
      QIN(7,I)=(A*EN+B)*1.D-18
      GO TO 492
# IF ENERGY GT X33P(N33P) EV SCALE BY 1/E**3
  491 QIN(7,I)=Y33P(N33P)*(X33P(N33P)/EN)*1.D-18   
  492 if(EN <= (2.0*EIN(7))) GO TO 500
      PEQIN(7,I)=PEQEL(2,(I-IOFFN(7)))
#
# 3 3D
  500 if(EN <= EIN(8)) GO TO 2000
      if(EN > X33D[N33D]):
 GO TO 521
      DO 510 J=2,N33D
      if(EN <= X33D[J]):
 GO TO 520
  510 CONTINUE
      J=N33D
  520 A=(Y33D[J]-Y33D[J-1])/(X33D[J]-X33D[J-1])                         
      B=(X33D[J-1]*Y33D[J]-X33D[J]*Y33D[J-1])/(X33D[J-1]-X33D[J])       
      QIN(8,I)=(A*EN+B)*1.D-18
      GO TO 522
# IF ENERGY GT X33D[N33D] EV SCALE BY 1/E**3
  521 QIN(8,I)=Y33D[N33D]*(X33D[N33D]/EN)*1.D-18   
  522 if(EN <= (2.0*EIN(8))) GO TO 530
      PEQIN(8,I)=PEQEL(2,(I-IOFFN(8)))
#
# 3 1D
  530 if(EN <= EIN(9)) GO TO 2000
      if(EN > X31D[N31D]):
 GO TO 551
      DO 540 J=2,N31D
      if(EN <= X31D[J]):
 GO TO 550
  540 CONTINUE
      J=N31D
  550 A=(Y31D[J]-Y31D[J-1])/(X31D[J]-X31D[J-1])                         
      B=(X31D[J-1]*Y31D[J]-X31D[J]*Y31D[J-1])/(X31D[J-1]-X31D[J])       
      QIN(9,I)=(A*EN+B)*1.D-18
      GO TO 552
# IF ENERGY GT X31D[N31D] EV SCALE BY 1/E   
  551 QIN(9,I)=Y31D[N31D]*(X31D[N31D]/EN)*1.D-18   
  552 if(EN <= (2.0*EIN(9))) GO TO 560
      PEQIN(9,I)=PEQEL(2,(I-IOFFN(9)))
#
# 3 1P        OSC STRENGTH F=0.07342
  560 if(EN <= EIN(10)) GO TO 2000
      if(EN > X31P(N31P):
) GO TO 581
      DO 570 J=2,N31P
      if(EN <= X31P[J]:
) GO TO 580
  570 CONTINUE
      J=N31P
  580 A=(Y31P[J]-Y31P(J-1))/(X31P[J]-X31P(J-1))                         
      B=(X31P(J-1)*Y31P[J]-X31P[J]*Y31P(J-1))/(X31P(J-1)-X31P[J])       
      QIN(10,I)=(A*EN+B)*1.D-18
      GO TO 582
# IF ENERGY GT X31P(N31P) EV : USE BEF SCALING
  581 QIN(10,I)=0.07342/(EIN(10)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(10)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(10)+E(3))
  582 if(EN <= (2.0*EIN(10))) GO TO 590
      PEQIN(10,I)=PEQEL(2,(I-IOFFN(10)))
#
# 4 3S
  590 if(EN <= EIN(11)) GO TO 2000
      if(EN > X43S(N43S):
) GO TO 611
      DO 600 J=2,N43S
      if(EN <= X43S[J]:
) GO TO 610
  600 CONTINUE
      J=N43S
  610 A=(Y43S[J]-Y43S(J-1))/(X43S[J]-X43S(J-1))                         
      B=(X43S(J-1)*Y43S[J]-X43S[J]*Y43S(J-1))/(X43S(J-1)-X43S[J])       
      QIN(11,I)=(A*EN+B)*1.D-18
      GO TO 612
# IF ENERGY GT X43S(N43S) EV SCALE BY 1/E**3
  611 QIN(11,I)=Y43S(N43S)*(X43S(N43S)/EN)**3*1.D-18
  612 if(EN <= (2.0*EIN(11))) GO TO 620
      PEQIN(11,I)=PEQEL(2,(I-IOFFN(11)))
#
# 4 1S
  620 if(EN <= EIN(12)) GO TO 2000
      if(EN > X41S(N41S):
) GO TO 641
      DO 630 J=2,N41S
      if(EN <= X41S[J]:
) GO TO 640
  630 CONTINUE
      J=N41S
  640 A=(Y41S[J]-Y41S(J-1))/(X41S[J]-X41S(J-1))                         
      B=(X41S(J-1)*Y41S[J]-X41S[J]*Y41S(J-1))/(X41S(J-1)-X41S[J])       
      QIN(12,I)=(A*EN+B)*1.D-18
      GO TO 642
# IF ENERGY GT X41S(N41S) EV SCALE BY 1/E     
  641 QIN(12,I)=Y41S(N41S)*(X41S(N41S)/EN)*1.D-18
  642 if(EN <= (2.0*EIN(12))) GO TO 650
      PEQIN(12,I)=PEQEL(2,(I-IOFFN(12)))
#
# 4 3P
  650 if(EN <= EIN(13)) GO TO 2000
      if(EN > X43P(N43P):
) GO TO 671
      DO 660 J=2,N43P
      if(EN <= X43P[J]:
) GO TO 670
  660 CONTINUE
      J=N43P
  670 A=(Y43P[J]-Y43P(J-1))/(X43P[J]-X43P(J-1))                         
      B=(X43P(J-1)*Y43P[J]-X43P[J]*Y43P(J-1))/(X43P(J-1)-X43P[J])       
      QIN(13,I)=(A*EN+B)*1.D-18
      GO TO 672
# IF ENERGY GT X43P(N43P) EV SCALE BY 1/E**3  
  671 QIN(13,I)=Y43P(N43P)*(X43P(N43P)/EN)**3*1.D-18
  672 if(EN <= (2.0*EIN(13))) GO TO 680
      PEQIN(13,I)=PEQEL(2,(I-IOFFN(13)))
#
# 4 3D
  680 if(EN <= EIN(14)) GO TO 2000
      if(EN > X43D[N43D]):
 GO TO 701
      DO 690 J=2,N43D
      if(EN <= X43D[J]):
 GO TO 700
  690 CONTINUE
      J=N43P
  700 A=(Y43D[J]-Y43D[J-1])/(X43D[J]-X43D[J-1])                         
      B=(X43D[J-1]*Y43D[J]-X43D[J]*Y43D[J-1])/(X43D[J-1]-X43D[J])       
      QIN(14,I)=(A*EN+B)*1.D-18
      GO TO 702
# IF ENERGY GT X43D[N43D] EV SCALE BY 1/E**3  
  701 QIN(14,I)=Y43D[N43D]*(X43D[N43D]/EN)**3*1.D-18
  702 if(EN <= (2.0*EIN(14))) GO TO 710
      PEQIN(14,I)=PEQEL(2,(I-IOFFN(14)))
#
# 4 1D
  710 if(EN <= EIN(15)) GO TO 2000
      if(EN > X41D[N41D]):
 GO TO 731
      DO 720 J=2,N41D
      if(EN <= X41D[J]):
 GO TO 730
  720 CONTINUE
      J=N41D
  730 A=(Y41D[J]-Y41D[J-1])/(X41D[J]-X41D[J-1])                         
      B=(X41D[J-1]*Y41D[J]-X41D[J]*Y41D[J-1])/(X41D[J-1]-X41D[J])       
      QIN(15,I)=(A*EN+B)*1.D-18
      GO TO 732
# IF ENERGY GT X41D[N41D] EV SCALE BY 1/E     
  731 QIN(15,I)=Y41D[N41D]*(X41D[N41D]/EN)*1.D-18
  732 if(EN <= (2.0*EIN(15))) GO TO 740
      PEQIN(15,I)=PEQEL(2,(I-IOFFN(15)))
#
# 4 3F
  740 if(EN <= EIN(16)) GO TO 2000
      if(EN > X43F(N43F):
) GO TO 761
      DO 750 J=2,N43F
      if(EN <= X43F[J]:
) GO TO 760
  750 CONTINUE
      J=N43F
  760 A=(Y43F[J]-Y43F(J-1))/(X43F[J]-X43F(J-1))                         
      B=(X43F(J-1)*Y43F[J]-X43F[J]*Y43F(J-1))/(X43F(J-1)-X43F[J])       
      QIN(16,I)=(A*EN+B)*1.D-18
      GO TO 762
# IF ENERGY GT X43F(N43F) EV SCALE BY 1/E**4  
  761 QIN(16,I)=Y43F(N43F)*(X43F(N43F)/EN)**4*1.D-18
  762 if(EN <= (2.0*EIN(16))) GO TO 770
      PEQIN(16,I)=PEQEL(2,(I-IOFFN(16)))
#
# 4 1F
  770 if(EN <= EIN(17)) GO TO 2000
      if(EN > X41F(N41F):
) GO TO 791
      DO 780 J=2,N41F
      if(EN <= X41F[J]:
) GO TO 790
  780 CONTINUE
      J=N41F
  790 A=(Y41F[J]-Y41F(J-1))/(X41F[J]-X41F(J-1))                         
      B=(X41F(J-1)*Y41F[J]-X41F[J]*Y41F(J-1))/(X41F(J-1)-X41F[J])       
      QIN(17,I)=(A*EN+B)*1.D-18
      GO TO 792
# IF ENERGY GT X41F(N41F) EV SCALE BY 1/E     
  791 QIN(17,I)=Y41F(N41F)*(X41F(N41F)/EN)*1.D-18
  792 if(EN <= (2.0*EIN(17))) GO TO 800
      PEQIN(17,I)=PEQEL(2,(I-IOFFN(17)))
#
# 4 1P       OSC STRENGTH  F=0.02986
  800 if(EN <= EIN(18)) GO TO 2000
      if(EN > X41P(N41P):
) GO TO 821
      DO 810 J=2,N41P
      if(EN <= X41P[J]:
) GO TO 820
  810 CONTINUE
      J=N41P
  820 A=(Y41P[J]-Y41P(J-1))/(X41P[J]-X41P(J-1))                         
      B=(X41P(J-1)*Y41P[J]-X41P[J]*Y41P(J-1))/(X41P(J-1)-X41P[J])       
      QIN(18,I)=(A*EN+B)*1.D-18
      GO TO 822
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
  821 QIN(18,I)=0.02986/(EIN(18)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(18)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(18)+E(3))
  822 if(EN <= (2.0*EIN(18))) GO TO 830
      PEQIN(18,I)=PEQEL(2,(I-IOFFN(18)))
#
# 5 3S SCALED FROM 4 3S
  830 if(EN <= EIN(19)) GO TO 2000
      ER=EIN(19)/EIN(11)
      ENP=EN/ER
      if(ENP > X43S(N43S):
) GO TO 851
      DO 840 J=2,N43S
      if(ENP <= X43S[J]:
) GO TO 850
  840 CONTINUE
      J=N43S
  850 A=(Y43S[J]-Y43S(J-1))/(X43S[J]-X43S(J-1))                         
      B=(X43S(J-1)*Y43S[J]-X43S[J]*Y43S(J-1))/(X43S(J-1)-X43S[J])       
      QIN(19,I)=0.512*(A*ENP+B)*1.D-18
      GO TO 852
# IF ENERGY GT X43S(N43S) EV SCALE BY 1/E**3
  851 QIN(19,I)=0.512*Y43S(N43S)*(X43S(N43S)/ENP)**3*1.D-18
  852 if(EN <= (2.0*EIN(19))) GO TO 860
      PEQIN(19,I)=PEQEL(2,(I-IOFFN(19)))
#
# 5 1S SCALED FROM 4 1S
  860 if(EN <= EIN(20)) GO TO 2000
      ER=EIN(20)/EIN(12)
      ENP=EN/ER
      if(ENP > X41S(N41S):
) GO TO 881
      DO 870 J=2,N41S
      if(ENP <= X41S[J]:
) GO TO 880
  870 CONTINUE
      J=N41S
  880 A=(Y41S[J]-Y41S(J-1))/(X41S[J]-X41S(J-1))                         
      B=(X41S(J-1)*Y41S[J]-X41S[J]*Y41S(J-1))/(X41S(J-1)-X41S[J])       
      QIN(20,I)=0.512*(A*ENP+B)*1.D-18
      GO TO 882
# IF ENERGY GT X41S(N41S) EV SCALE BY 1/E     
  881 QIN(20,I)=0.512*Y41S(N41S)*(X41S(N41S)/ENP)*1.D-18
  882 if(EN <= (2.0*EIN(20))) GO TO 890
      PEQIN(20,I)=PEQEL(2,(I-IOFFN(20)))
#
# 5 3P SCALED FROM 4 3P
  890 if(EN <= EIN(21)) GO TO 2000
      ER=EIN(21)/EIN(13)
      ENP=EN/ER
      if(ENP > X43P(N43P):
) GO TO 911
      DO 900 J=2,N43P
      if(ENP <= X43P[J]:
) GO TO 910
  900 CONTINUE
      J=N43P
  910 A=(Y43P[J]-Y43P(J-1))/(X43P[J]-X43P(J-1))                         
      B=(X43P(J-1)*Y43P[J]-X43P[J]*Y43P(J-1))/(X43P(J-1)-X43P[J])       
      QIN(21,I)=0.512*(A*ENP+B)*1.D-18
      GO TO 912
# IF ENERGY GT X43P(N43P) EV SCALE BY 1/E**3  
  911 QIN(21,I)=0.512*Y43P(N43P)*(X43P(N43P)/ENP)**3*1.D-18
  912 if(EN <= (2.0*EIN(21))) GO TO 920
      PEQIN(21,I)=PEQEL(2,(I-IOFFN(21)))
#
# 5 3D SCALED FROM 4 3D
  920 if(EN <= EIN(22)) GO TO 2000
      ER=EIN(22)/EIN(14)
      ENP=EN/ER
      if(ENP > X43D[N43D]):
 GO TO 941
      DO 930 J=2,N43D
      if(ENP <= X43D[J]):
 GO TO 940
  930 CONTINUE
      J=N43P
  940 A=(Y43D[J]-Y43D[J-1])/(X43D[J]-X43D[J-1])                         
      B=(X43D[J-1]*Y43D[J]-X43D[J]*Y43D[J-1])/(X43D[J-1]-X43D[J])       
      QIN(22,I)=0.512*(A*ENP+B)*1.D-18
      GO TO 942
# IF ENERGY GT X43D[N43D] EV SCALE BY 1/E**3  
  941 QIN(22,I)=0.512*Y43D[N43D]*(X43D[N43D]/ENP)**3*1.D-18
  942 if(EN <= (2.0*EIN(22))) GO TO 950
      PEQIN(22,I)=PEQEL(2,(I-IOFFN(22)))
#
# 5 1D SCALED FROM 4 1D
  950 if(EN <= EIN(23)) GO TO 2000
      ER=EIN(23)/EIN(15)
      ENP=EN/ER
      if(ENP > X41D[N41D]):
 GO TO 971
      DO 960 J=2,N41D
      if(ENP <= X41D[J]):
 GO TO 970
  960 CONTINUE
      J=N41D
  970 A=(Y41D[J]-Y41D[J-1])/(X41D[J]-X41D[J-1])                         
      B=(X41D[J-1]*Y41D[J]-X41D[J]*Y41D[J-1])/(X41D[J-1]-X41D[J])       
      QIN(23,I)=0.512*(A*ENP+B)*1.D-18
      GO TO 972
# IF ENERGY GT X41D[N41D] EV SCALE BY 1/E     
  971 QIN(23,I)=0.512*Y41D[N41D]*(X41D[N41D]/ENP)*1.D-18
  972 if(EN <= (2.0*EIN(23))) GO TO 980
      PEQIN(23,I)=PEQEL(2,(I-IOFFN(23)))
#
# 5 3F SCALED FROM 4 3F
  980 if(EN <= EIN(24)) GO TO 2000
      ER=EIN(24)/EIN(16)
      ENP=EN/ER
      if(ENP > X43F(N43F):
) GO TO 1001
      DO 990 J=2,N43F
      if(ENP <= X43F[J]:
) GO TO 1000
  990 CONTINUE
      J=N43F
 1000 A=(Y43F[J]-Y43F(J-1))/(X43F[J]-X43F(J-1))                         
      B=(X43F(J-1)*Y43F[J]-X43F[J]*Y43F(J-1))/(X43F(J-1)-X43F[J])       
      QIN(24,I)=0.512*(A*ENP+B)*1.D-18
      GO TO 1002
# IF ENERGY GT X43F(N43F) EV SCALE BY 1/E**4  
 1001 QIN(24,I)=0.512*Y43F(N43F)*(X43F(N43F)/ENP)**4*1.D-18
 1002 if(EN <= (2.0*EIN(24))) GO TO 1010
      PEQIN(24,I)=PEQEL(2,(I-IOFFN(24)))
#
# 5 1F SCALED FROM 4 1F
 1010 if(EN <= EIN(25)) GO TO 2000
      ER=EIN(25)/EIN(17)
      ENP=EN/ER
      if(ENP > X41F(N41F):
) GO TO 1031
      DO 1020 J=2,N41F
      if(ENP <= X41F[J]:
) GO TO 1030
 1020 CONTINUE
      J=N41F
 1030 A=(Y41F[J]-Y41F(J-1))/(X41F[J]-X41F(J-1))                         
      B=(X41F(J-1)*Y41F[J]-X41F[J]*Y41F(J-1))/(X41F(J-1)-X41F[J])       
      QIN(25,I)=0.512*(A*ENP+B)*1.D-18
      GO TO 1032
# IF ENERGY GT X41F(N41F) EV SCALE BY 1/E     
 1031 QIN(25,I)=0.512*Y41F(N41F)*(X41F(N41F)/ENP)*1.D-18
 1032 if(EN <= (2.0*EIN(25))) GO TO 1040
      PEQIN(25,I)=PEQEL(2,(I-IOFFN(25)))
#
# 5 1P   SCALED FROM 4 1P   OSC STRENGTH  F=0.01504
 1040 if(EN <= EIN(26)) GO TO 2000
      ER=EIN(26)/EIN(18)
      ENP=EN/ER
      if(ENP > X41P(N41P):
) GO TO 1061
      DO 1050 J=2,N41P
      if(ENP <= X41P[J]:
) GO TO 1060
 1050 CONTINUE
      J=N41P
 1060 A=(Y41P[J]-Y41P(J-1))/(X41P[J]-X41P(J-1))                         
      B=(X41P(J-1)*Y41P[J]-X41P[J]*Y41P(J-1))/(X41P(J-1)-X41P[J])       
      QIN(26,I)=0.01504/0.02986*(A*ENP+B)*1.D-18
      GO TO 1062
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1061 QIN(26,I)=0.01504/(EIN(26)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(26)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(26)+E(3))
 1062 if(EN <= (2.0*EIN(26))) GO TO 1070
      PEQIN(26,I)=PEQEL(2,(I-IOFFN(26)))
#
# 6 3S SCALED FROM 4 3S
 1070 if(EN <= EIN(27)) GO TO 2000
      ER=EIN(27)/EIN(11)
      ENP=EN/ER
      if(ENP > X43S(N43S):
) GO TO 1091
      DO 1080 J=2,N43S
      if(ENP <= X43S[J]:
) GO TO 1090
 1080 CONTINUE
      J=N43S
 1090 A=(Y43S[J]-Y43S(J-1))/(X43S[J]-X43S(J-1))                         
      B=(X43S(J-1)*Y43S[J]-X43S[J]*Y43S(J-1))/(X43S(J-1)-X43S[J])       
      QIN(27,I)=0.296*(A*ENP+B)*1.D-18
      GO TO 1092
# IF ENERGY GT X43S(N43S) EV SCALE BY 1/E**3
 1091 QIN(27,I)=0.296*Y43S(N43S)*(X43S(N43S)/ENP)**3*1.D-18
 1092 if(EN <= (2.0*EIN(27))) GO TO 1100
      PEQIN(27,I)=PEQEL(2,(I-IOFFN(27)))
#
# 6 1S SCALED FROM 4 1S
 1100 if(EN <= EIN(28)) GO TO 2000
      ER=EIN(28)/EIN(12)
      ENP=EN/ER
      if(ENP > X41S(N41S):
) GO TO 1121
      DO 1110 J=2,N41S
      if(ENP <= X41S[J]:
) GO TO 1120
 1110 CONTINUE
      J=N41S
 1120 A=(Y41S[J]-Y41S(J-1))/(X41S[J]-X41S(J-1))                         
      B=(X41S(J-1)*Y41S[J]-X41S[J]*Y41S(J-1))/(X41S(J-1)-X41S[J])       
      QIN(28,I)=0.296*(A*ENP+B)*1.D-18
      GO TO 1122
# IF ENERGY GT X41S(N41S) EV SCALE BY 1/E     
 1121 QIN(28,I)=0.296*Y41S(N41S)*(X41S(N41S)/ENP)*1.D-18
 1122 if(EN <= (2.0*EIN(28))) GO TO 1130
      PEQIN(28,I)=PEQEL(2,(I-IOFFN(28)))
#
# 6 3P SCALED FROM 4 3P
 1130 if(EN <= EIN(29)) GO TO 2000
      ER=EIN(29)/EIN(13)
      ENP=EN/ER
      if(ENP > X43P(N43P):
) GO TO 1151
      DO 1140 J=2,N43P
      if(ENP <= X43P[J]:
) GO TO 1150
 1140 CONTINUE
      J=N43P
 1150 A=(Y43P[J]-Y43P(J-1))/(X43P[J]-X43P(J-1))                         
      B=(X43P(J-1)*Y43P[J]-X43P[J]*Y43P(J-1))/(X43P(J-1)-X43P[J])       
      QIN(29,I)=0.296*(A*ENP+B)*1.D-18
      GO TO 1152
# IF ENERGY GT X43P(N43P) EV SCALE BY 1/E**3  
 1151 QIN(29,I)=0.296*Y43P(N43P)*(X43P(N43P)/ENP)**3*1.D-18
 1152 if(EN <= (2.0*EIN(29))) GO TO 1160
      PEQIN(29,I)=PEQEL(2,(I-IOFFN(29)))
#
# 6 3D SCALED FROM 4 3D
 1160 if(EN <= EIN(30)) GO TO 2000
      ER=EIN(30)/EIN(14)
      ENP=EN/ER
      if(ENP > X43D[N43D]):
 GO TO 1181
      DO 1170 J=2,N43D
      if(ENP <= X43D[J]):
 GO TO 1180
 1170 CONTINUE
      J=N43P
 1180 A=(Y43D[J]-Y43D[J-1])/(X43D[J]-X43D[J-1])                         
      B=(X43D[J-1]*Y43D[J]-X43D[J]*Y43D[J-1])/(X43D[J-1]-X43D[J])       
      QIN(30,I)=0.296*(A*ENP+B)*1.D-18
      GO TO 1182
# IF ENERGY GT X43D[N43D] EV SCALE BY 1/E**3  
 1181 QIN(30,I)=0.296*Y43D[N43D]*(X43D[N43D]/ENP)**3*1.D-18
 1182 if(EN <= (2.0*EIN(30))) GO TO 1190
      PEQIN(30,I)=PEQEL(2,(I-IOFFN(30)))
#
# 6 1D SCALED FROM 4 1D
 1190 if(EN <= EIN(31)) GO TO 2000
      ER=EIN(31)/EIN(15)
      ENP=EN/ER
      if(ENP > X41D[N41D]):
 GO TO 1211
      DO 1200 J=2,N41D
      if(ENP <= X41D[J]):
 GO TO 1210
 1200 CONTINUE
      J=N41D
 1210 A=(Y41D[J]-Y41D[J-1])/(X41D[J]-X41D[J-1])                         
      B=(X41D[J-1]*Y41D[J]-X41D[J]*Y41D[J-1])/(X41D[J-1]-X41D[J])       
      QIN(31,I)=0.296*(A*ENP+B)*1.D-18
      GO TO 1212
# IF ENERGY GT X41D[N41D] EV SCALE BY 1/E     
 1211 QIN(31,I)=0.296*Y41D[N41D]*(X41D[N41D]/ENP)*1.D-18
 1212 if(EN <= (2.0*EIN(31))) GO TO 1220
      PEQIN(31,I)=PEQEL(2,(I-IOFFN(31)))
#
# 6 1P  SCALED FROM 4 1P    OSC STRENGTH  F=0.00863 
 1220 if(EN <= EIN(32)) GO TO 2000
      ER=EIN(32)/EIN(18)
      ENP=EN/ER
      if(ENP > X41P(N41P):
) GO TO 1241
      DO 1230 J=2,N41P
      if(ENP <= X41P[J]:
) GO TO 1240
 1230 CONTINUE
      J=N41P
 1240 A=(Y41P[J]-Y41P(J-1))/(X41P[J]-X41P(J-1))                         
      B=(X41P(J-1)*Y41P[J]-X41P[J]*Y41P(J-1))/(X41P(J-1)-X41P[J])       
      QIN(32,I)=0.00863/0.02986*(A*ENP+B)*1.D-18
      GO TO 1242
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1241 QIN(32,I)=0.00863/(EIN(32)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(32)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(32)+E(3))
 1242 if(EN <= (2.0*EIN(32))) GO TO 1250 
      PEQIN(32,I)=PEQEL(2,(I-IOFFN(32)))
#
# 7 3S SCALED FROM 4 3S
 1250 if(EN <= EIN(33)) GO TO 2000
      ER=EIN(33)/EIN(11)
      ENP=EN/ER
      if(ENP > X43S(N43S):
) GO TO 1271
      DO 1260 J=2,N43S
      if(ENP <= X43S[J]:
) GO TO 1270
 1260 CONTINUE
      J=N43S
 1270 A=(Y43S[J]-Y43S(J-1))/(X43S[J]-X43S(J-1))                         
      B=(X43S(J-1)*Y43S[J]-X43S[J]*Y43S(J-1))/(X43S(J-1)-X43S[J])       
      QIN(33,I)=0.187*(A*ENP+B)*1.D-18
      GO TO 1272
# IF ENERGY GT X43S(N43S) EV SCALE BY 1/E**3
 1271 QIN(33,I)=0.187*Y43S(N43S)*(X43S(N43S)/ENP)**3*1.D-18
 1272 if(EN <= (2.0*EIN(33))) GO TO 1280
      PEQIN(33,I)=PEQEL(2,(I-IOFFN(33)))
#
# 7 1S SCALED FROM 4 1S
 1280 if(EN <= EIN(34)) GO TO 2000
      ER=EIN(34)/EIN(12)
      ENP=EN/ER
      if(ENP > X41S(N41S):
) GO TO 1301
      DO 1290 J=2,N41S
      if(ENP <= X41S[J]:
) GO TO 1300
 1290 CONTINUE
      J=N41S
 1300 A=(Y41S[J]-Y41S(J-1))/(X41S[J]-X41S(J-1))                         
      B=(X41S(J-1)*Y41S[J]-X41S[J]*Y41S(J-1))/(X41S(J-1)-X41S[J])       
      QIN(34,I)=0.187*(A*ENP+B)*1.D-18
      GO TO 1302
# IF ENERGY GT X41S(N41S) EV SCALE BY 1/E     
 1301 QIN(34,I)=0.187*Y41S(N41S)*(X41S(N41S)/ENP)*1.D-18
 1302 if(EN <= (2.0*EIN(34))) GO TO 1310
      PEQIN(34,I)=PEQEL(2,(I-IOFFN(34)))
#
# 7 3P SCALED FROM 4 3P
 1310 if(EN <= EIN(35)) GO TO 2000
      ER=EIN(35)/EIN(13)
      ENP=EN/ER
      if(ENP > X43P(N43P):
) GO TO 1331
      DO 1320 J=2,N43P
      if(ENP <= X43P[J]:
) GO TO 1330
 1320 CONTINUE
      J=N43P
 1330 A=(Y43P[J]-Y43P(J-1))/(X43P[J]-X43P(J-1))                         
      B=(X43P(J-1)*Y43P[J]-X43P[J]*Y43P(J-1))/(X43P(J-1)-X43P[J])       
      QIN(35,I)=0.187*(A*ENP+B)*1.D-18
      GO TO 1332
# IF ENERGY GT X43P(N43P) EV SCALE BY 1/E**3  
 1331 QIN(35,I)=0.187*Y43P(N43P)*(X43P(N43P)/ENP)**3*1.D-18
 1332 if(EN <= (2.0*EIN(35))) GO TO 1340
      PEQIN(35,I)=PEQEL(2,(I-IOFFN(35)))
#
# 7 3D SCALED FROM 4 3D
 1340 if(EN <= EIN(36)) GO TO 2000
      ER=EIN(36)/EIN(14)
      ENP=EN/ER
      if(ENP > X43D[N43D]):
 GO TO 1361
      DO 1350 J=2,N43D
      if(ENP <= X43D[J]):
 GO TO 1360
 1350 CONTINUE
      J=N43P
 1360 A=(Y43D[J]-Y43D[J-1])/(X43D[J]-X43D[J-1])                         
      B=(X43D[J-1]*Y43D[J]-X43D[J]*Y43D[J-1])/(X43D[J-1]-X43D[J])       
      QIN(36,I)=0.187*(A*ENP+B)*1.D-18
      GO TO 1362
# IF ENERGY GT X43D[N43D] EV SCALE BY 1/E**3  
 1361 QIN(36,I)=0.187*Y43D[N43D]*(X43D[N43D]/ENP)**3*1.D-18
 1362 if(EN <= (2.0*EIN(36))) GO TO 1370
      PEQIN(36,I)=PEQEL(2,(I-IOFFN(36)))
#
# 7 1D SCALED FROM 4 1D
 1370 if(EN <= EIN(37)) GO TO 2000
      ER=EIN(37)/EIN(15)
      ENP=EN/ER
      if(ENP > X41D[N41D]):
 GO TO 1391
      DO 1380 J=2,N41D
      if(ENP <= X41D[J]):
 GO TO 1390
 1380 CONTINUE
      J=N41D
 1390 A=(Y41D[J]-Y41D[J-1])/(X41D[J]-X41D[J-1])                         
      B=(X41D[J-1]*Y41D[J]-X41D[J]*Y41D[J-1])/(X41D[J-1]-X41D[J])       
      QIN(37,I)=0.187*(A*ENP+B)*1.D-18
      GO TO 1392
# IF ENERGY GT X41D[N41D] EV SCALE BY 1/E     
 1391 QIN(37,I)=0.187*Y41D[N41D]*(X41D[N41D]/ENP)*1.D-18
 1392 if(EN <= (2.0*EIN(37))) GO TO 1400
      PEQIN(37,I)=PEQEL(2,(I-IOFFN(37)))
#
# 7 1P  SCALED FROM 4 1P   OSC STRENGTH  F=0.00540 
 1400 if(EN <= EIN(38)) GO TO 2000
      ER=EIN(38)/EIN(18)
      ENP=EN/ER
      if(ENP > X41P(N41P):
) GO TO 1421
      DO 1410 J=2,N41P
      if(ENP <= X41P[J]:
) GO TO 1420
 1410 CONTINUE
      J=N41P
 1420 A=(Y41P[J]-Y41P(J-1))/(X41P[J]-X41P(J-1))                         
      B=(X41P(J-1)*Y41P[J]-X41P[J]*Y41P(J-1))/(X41P(J-1)-X41P[J])       
      QIN(38,I)=0.00540/0.02986*(A*ENP+B)*1.D-18
      GO TO 1422
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1421 QIN(38,I)=0.00540/(EIN(38)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(38)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(38)+E(3))
 1422 if(EN <= (2.0*EIN(38))) GO TO 1430 
      PEQIN(38,I)=PEQEL(2,(I-IOFFN(38)))
#
# SUM 3S LEVELS FROM 8 3S HIGHER AND SCALED FROM 4 3S
 1430 if(EN <= EIN(39)) GO TO 2000
      ER=EIN(39)/EIN(11)
      ENP=EN/ER
      if(ENP > X43S(N43S):
) GO TO 1451
      DO 1440 J=2,N43S
      if(ENP <= X43S[J]:
) GO TO 1450
 1440 CONTINUE
      J=N43S
 1450 A=(Y43S[J]-Y43S(J-1))/(X43S[J]-X43S(J-1))                         
      B=(X43S(J-1)*Y43S[J]-X43S[J]*Y43S(J-1))/(X43S(J-1)-X43S[J])       
      QIN(39,I)=0.553*(A*ENP+B)*1.D-18
      GO TO 1452
# IF ENERGY GT X43S(N43S) EV SCALE BY 1/E**3
 1451 QIN(39,I)=0.553*Y43S(N43S)*(X43S(N43S)/ENP)**3*1.D-18
 1452 if(EN <= (2.0*EIN(39))) GO TO 1460
      PEQIN(39,I)=PEQEL(2,(I-IOFFN(39)))
#
# SUM 1S LEVELS FROM 8 1S HIGHER AND SCALED FROM 4 1S
 1460 if(EN <= EIN(40)) GO TO 2000
      ER=EIN(40)/EIN(12)
      ENP=EN/ER
      if(ENP > X41S(N41S):
) GO TO 1481
      DO 1470 J=2,N41S
      if(ENP <= X41S[J]:
) GO TO 1480
 1470 CONTINUE
      J=N41S
 1480 A=(Y41S[J]-Y41S(J-1))/(X41S[J]-X41S(J-1))                         
      B=(X41S(J-1)*Y41S[J]-X41S[J]*Y41S(J-1))/(X41S(J-1)-X41S[J])       
      QIN(40,I)=0.553*(A*ENP+B)*1.D-18
      GO TO 1482
# IF ENERGY GT X41S(N41S) EV SCALE BY 1/E     
 1481 QIN(40,I)=0.553*Y41S(N41S)*(X41S(N41S)/ENP)*1.D-18
 1482 if(EN <= (2.0*EIN(40))) GO TO 1490
      PEQIN(40,I)=PEQEL(2,(I-IOFFN(40)))
#
# SUM 3P LEVELS FROM  8 3P HIGHER AND SCALED FROM 4 3P
 1490 if(EN <= EIN(41)) GO TO 2000
      ER=EIN(41)/EIN(13)
      ENP=EN/ER
      if(ENP > X43P(N43P):
) GO TO 1511
      DO 1500 J=2,N43P
      if(ENP <= X43P[J]:
) GO TO 1510
 1500 CONTINUE
      J=N43P
 1510 A=(Y43P[J]-Y43P(J-1))/(X43P[J]-X43P(J-1))                         
      B=(X43P(J-1)*Y43P[J]-X43P[J]*Y43P(J-1))/(X43P(J-1)-X43P[J])       
      QIN(41,I)=0.553*(A*ENP+B)*1.D-18
      GO TO 1512
# IF ENERGY GT X43P(N43P) EV SCALE BY 1/E**3  
 1511 QIN(41,I)=0.553*Y43P(N43P)*(X43P(N43P)/ENP)**3*1.D-18
 1512 if(EN <= (2.0*EIN(41))) GO TO 1520
      PEQIN(41,I)=PEQEL(2,(I-IOFFN(41)))
#
# SUM 3D LEVELS FROM 8 3D HIGHER AND SCALED FROM 4 3D
 1520 if(EN <= EIN(42)) GO TO 2000
      ER=EIN(42)/EIN(14)
      ENP=EN/ER
      if(ENP > X43D[N43D]):
 GO TO 1541
      DO 1530 J=2,N43D
      if(ENP <= X43D[J]):
 GO TO 1540
 1530 CONTINUE
      J=N43P
 1540 A=(Y43D[J]-Y43D[J-1])/(X43D[J]-X43D[J-1])                         
      B=(X43D[J-1]*Y43D[J]-X43D[J]*Y43D[J-1])/(X43D[J-1]-X43D[J])       
      QIN(42,I)=0.553*(A*ENP+B)*1.D-18
      GO TO 1542
# IF ENERGY GT X43D[N43D] EV SCALE BY 1/E**3  
 1541 QIN(42,I)=0.553*Y43D[N43D]*(X43D[N43D]/ENP)**3*1.D-18
 1542 if(EN <= (2.0*EIN(42))) GO TO 1550
      PEQIN(42,I)=PEQEL(2,(I-IOFFN(42)))
#
# SUM 1D LEVELS FROM 8 1D HIGHER AND SCALED FROM 4 1D
 1550 if(EN <= EIN(43)) GO TO 2000
      ER=EIN(43)/EIN(15)
      ENP=EN/ER
      if(ENP > X41D[N41D]):
 GO TO 1571
      DO 1560 J=2,N41D
      if(ENP <= X41D[J]):
 GO TO 1570
 1560 CONTINUE
      J=N41D
 1570 A=(Y41D[J]-Y41D[J-1])/(X41D[J]-X41D[J-1])                         
      B=(X41D[J-1]*Y41D[J]-X41D[J]*Y41D[J-1])/(X41D[J-1]-X41D[J])       
      QIN(43,I)=0.553*(A*ENP+B)*1.D-18
      GO TO 1572
# IF ENERGY GT X41D[N41D] EV SCALE BY 1/E     
 1571 QIN(43,I)=0.553*Y41D[N41D]*(X41D[N41D]/ENP)*1.D-18
 1572 if(EN <= (2.0*EIN(43))) GO TO 1580
      PEQIN(43,I)=PEQEL(2,(I-IOFFN(43)))
#
# 8 1P SCALED FROM 4 1P   OSC STRENGTH  F=0.00362 
 1580 if(EN <= EIN(44)) GO TO 2000
      ER=EIN(44)/EIN(18)
      ENP=EN/ER
      if(ENP > X41P(N41P):
) GO TO 1601
      DO 1590 J=2,N41P
      if(ENP <= X41P[J]:
) GO TO 1600
 1590 CONTINUE
      J=N41P
 1600 A=(Y41P[J]-Y41P(J-1))/(X41P[J]-X41P(J-1))                         
      B=(X41P(J-1)*Y41P[J]-X41P[J]*Y41P(J-1))/(X41P(J-1)-X41P[J])       
      QIN(44,I)=0.00362/0.02986*(A*ENP+B)*1.D-18
      GO TO 1602
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1601 QIN(44,I)=0.00362/(EIN(44)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(44)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(44)+E(3))
 1602 if(EN <= (2.0*EIN(44))) GO TO 1610 
      PEQIN(44,I)=PEQEL(2,(I-IOFFN(44)))
#
# 9 1P SCALED FROM 4 1P   OSC STRENGTH  F=0.00253 
 1610 if(EN <= EIN(45)) GO TO 2000
      ER=EIN(45)/EIN(18)
      ENP=EN/ER
      if(ENP > X41P(N41P):
) GO TO 1631
      DO 1620 J=2,N41P
      if(ENP <= X41P[J]:
) GO TO 1630
 1620 CONTINUE
      J=N41P
 1630 A=(Y41P[J]-Y41P(J-1))/(X41P[J]-X41P(J-1))                         
      B=(X41P(J-1)*Y41P[J]-X41P[J]*Y41P(J-1))/(X41P(J-1)-X41P[J])       
      QIN(45,I)=0.00253/0.02986*(A*ENP+B)*1.D-18
      GO TO 1632
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1631 QIN(45,I)=0.00253/(EIN(45)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(45)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(45)+E(3))
 1632 if(EN <= (2.0*EIN(45))) GO TO 1640 
      PEQIN(45,I)=PEQEL(2,(I-IOFFN(45)))
#
# 10 1P SCALED FROM 4 1P    OSC STRENGTH F=0.00184
 1640 if(EN <= EIN(46)) GO TO 2000
      ER=EIN(46)/EIN(18)
      ENP=EN/ER
      if(ENP > X41P(N41P):
) GO TO 1661
      DO 1650 J=2,N41P
      if(ENP <= X41P[J]:
) GO TO 1660
 1650 CONTINUE
      J=N41P
 1660 A=(Y41P[J]-Y41P(J-1))/(X41P[J]-X41P(J-1))                         
      B=(X41P(J-1)*Y41P[J]-X41P[J]*Y41P(J-1))/(X41P(J-1)-X41P[J])       
      QIN(46,I)=0.00184/0.02986*(A*ENP+B)*1.D-18
      GO TO 1662
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1661 QIN(46,I)=0.00184/(EIN(46)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(46)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(46)+E(3))
 1662 if(EN <= (2.0*EIN(46))) GO TO 1670 
      PEQIN(46,I)=PEQEL(2,(I-IOFFN(46)))
#
# 11 1P SCALED FROM 4 1P   OSC STRENGTH F=0.00138
 1670 if(EN <= EIN(47)) GO TO 2000
      ER=EIN(47)/EIN(18)
      ENP=EN/ER
      if(ENP > X41P(N41P):
) GO TO 1691
      DO 1680 J=2,N41P
      if(ENP <= X41P[J]:
) GO TO 1690
 1680 CONTINUE
      J=N41P
 1690 A=(Y41P[J]-Y41P(J-1))/(X41P[J]-X41P(J-1))                         
      B=(X41P(J-1)*Y41P[J]-X41P[J]*Y41P(J-1))/(X41P(J-1)-X41P[J])       
      QIN(47,I)=0.00138/0.02986*(A*ENP+B)*1.D-18
      GO TO 1692
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1691 QIN(47,I)=0.00138/(EIN(47)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(47)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(47)+E(3))
 1692 if(EN <= (2.0*EIN(47))) GO TO 1700 
      PEQIN(47,I)=PEQEL(2,(I-IOFFN(47)))
#
# 12 1P SCALED FROM 4 1P   OSC STRENGTH F=0.00106
 1700 if(EN <= EIN(48)) GO TO 2000
      ER=EIN(48)/EIN(18)
      ENP=EN/ER
      if(ENP > X41P(N41P):
) GO TO 1721
      DO 1710 J=2,N41P
      if(ENP <= X41P[J]:
) GO TO 1720
 1710 CONTINUE
      J=N41P
 1720 A=(Y41P[J]-Y41P(J-1))/(X41P[J]-X41P(J-1))                         
      B=(X41P(J-1)*Y41P[J]-X41P[J]*Y41P(J-1))/(X41P(J-1)-X41P[J])       
      QIN(48,I)=0.00106/0.02986*(A*ENP+B)*1.D-18
      GO TO 1722
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1721 QIN(48,I)=0.00106/(EIN(48)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(48)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(48)+E(3))
 1722 if(EN <= (2.0*EIN(48))) GO TO 1730 
      PEQIN(48,I)=PEQEL(2,(I-IOFFN(48)))
#
# SUM HIGHER 1P LEVELS     OSC STRENGTH F=0.00440
 1730 if(EN <= EIN(49)) GO TO 2000
      ER=EIN(49)/EIN(18)
      ENP=EN/ER
      if(ENP > X41P(N41P):
) GO TO 1751
      DO 1740 J=2,N41P
      if(ENP <= X41P[J]:
) GO TO 1750
 1740 CONTINUE
      J=N41P
 1750 A=(Y41P[J]-Y41P(J-1))/(X41P[J]-X41P(J-1))                         
      B=(X41P(J-1)*Y41P[J]-X41P[J]*Y41P(J-1))/(X41P(J-1)-X41P[J])       
      QIN(49,I)=0.00440/0.02986*(A*ENP+B)*1.D-18
      GO TO 1752
# IF ENERGY GT X41P(N41P) EV USE BEF SCALING  
 1751 QIN(49,I)=0.00440/(EIN(49)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(49)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(49)+E(3))
 1752 if(EN <= (2.0*EIN(49))) GO TO 1760 
      PEQIN(49,I)=PEQEL(2,(I-IOFFN(49)))
 1760 CONTINUE
# LOAD BREMSSTRAHLUNG X-SECTION
      if(EN <= 1000.):
 GO TO 2000
      DO 1780 J=2,NBREM
      if(EN <= EBRM[J]:
) GO TO 1790
 1780 CONTINUE
      J=NBREM
 1790 A=(math.log(Z2T[J])-math.log(Z2T(J-1)))/(EBRM[J]-EBRM(J-1))
      B=(math.log(Z2T[J])*EBRM(J-1)-math.log(Z2T(J-1))*EBRM[J])/(EBRM(J-1)-EBRM[J])  
      QIN(50,I)=math.exp(A*EN+B)*1.D-24
#
 2000 CONTINUE                                                          
#     
      QMET=QIN(1,I)+QIN(2,I)
      QDIP=QIN(4,I)+QIN(10,I)+QIN(18,I)+QIN(26,I)+QIN(32,I)+QIN(38,I)+QIN(44,I)+QIN(45,I)+QIN(46,I)+QIN(47,I)+QIN(48,I)+QIN(49,I)
      QTRP=QIN(1,I)+QIN(3,I)+QIN(5,I)+QIN(7,I)+QIN(8,I)+QIN(11,I)+QIN(13,I)+QIN(14,I)+QIN(16,I)+QIN(19,I)+QIN(21,I)+QIN(22,I)+QIN(24,I)+QIN(27,I)+QIN(29,I)+QIN(30,I)+QIN(33,I)+QIN(35,I)+QIN(36,I)+QIN(39,I)+QIN(41,I)+QIN(42,I) 
      QSNG=QIN(2,I)+QIN(4,I)+QIN(6,I)+QIN(9,I)+QIN(10,I)+QIN(12,I)+QIN(15,I)+QIN(17,I)+QIN(18,I)+QIN(20,I)+QIN(23,I)+QIN(25,I)+QIN(26,I)+QIN(28,I)+QIN(31,I)+QIN(32,I)+QIN(34,I)+QIN(37,I)+QIN(38,I)+QIN(40,I)+QIN(43,I)+QIN(44,I)+QIN(45,I)+QIN(46,I)+QIN(47,I)+QIN(48,I)+QIN(49,I)
      QINEL=QSNG+QTRP+QION(1,I)+QION(2,I)
      Q(1,I)=QELA+QINEL+QIN(50,I)                            
# EXAMINE X-SECTION DATA 
#     WRITE(6,986) EN,QIN(4,I),QIN(10,I),QIN(18,I),QIN(26,I),QIN(32,I),
#    /QIN(38,I),QIN(44,I),QIN(45,I),QIN(46,I),QIN(47,I),QIN(48,I),
#    /QIN(49,I) 
# 986 print(' EN=',D11.5,' 21P=','%.3f' %,' 31P=','%.3f' %,' 41P=','%.3f' %,' 51
#    /P=','%.3f' %,' 61P=','%.3f' %,' 71P=','%.3f' %,/,8X,' 81P=','%.3f' %,' 91P=',D
#    /11.3,' 101P=','%.3f' %,' 111P=','%.3f' %,' 121P=','%.3f' %,' HIP=','%.3f' %)
#     WRITE(6,987) EN,QMET,QDIP,QSNG,QTRP,QINEL,Q(1,I)
# 987 print(' EN=',D12.5,' QMET=','%.3f' %,' QDIP=','%.3f' %,' QSNG=','%.3f' %,
#    /'QTRP=','%.3f' %,' QINL=',D11.4,' QTOT=',D11.4) 
 9000 CONTINUE                                                          
#  SAVE COMPUTE TIME                                                    
      DO 9001 K=1,NIN
      if(EFINAL <= EIN[K]:
) :                                        
       NIN=K-1
       GO TO 9011
      # endif
 9001 CONTINUE
 9011 CONTINUE  
      if(EFINAL > 1000.):
 NIN=50                                        
      RETURN                                                            
      # end
      def GAS5(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN) 
      IMPLICIT #real*8 (A-H,O-Z)                                         
      IMPLICIT #integer*8 (I-N)
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000)
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)  
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)     
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]  
      DIMENSION XEN(125),YXSEC(125),XEL(120),YEL(120),XEPS(196),YEPS(196),XION(74),YION(74),YINC(74),YIN1(74),XIN2(49),YIN2(49),XIN3(41),YIN3(41),XKSH(99),YKSH(99),X1S5(111),Y1S5(111),X1S4(137),Y1S4(137),X1S3(117),Y1S3(117),X1S2(119),Y1S2(119),X2P10(73),Y2P10(73),X2P9(70),Y2P9(70),X2P8(72),Y2P8(72),X2P7(65),Y2P7(65),X2P6(59),Y2P6(59),X2P5(63),Y2P5(63),X2P4(66),Y2P4(66),X2P3(62),Y2P3(62),X2P2(62),Y2P2(62),X2P1(59),Y2P1(59),X2S5(19),Y2S5(19),X2S3(19),Y2S3(19),X3D6(12),Y3D6(12),X3D4P(12),Y3D4P(12),X3D4(12),Y3D4(12),X3D3(12),Y3D3(12),X3D1PP(12),Y3D1PP(12),X3D1P(12),Y3D1P(12),X3S1PPPP(12),Y3S1PPPP(12),X3S1PPP(12),Y3S1PPP(12),X3S1PP(12),Y3S1PP(12),X3P106(16),Y3P106(16),X3P52(16),Y3P52(16),X3P1(16),Y3P1(16),IOFFN(45),IOFFION(10)
      DIMENSION Z10T(25),EBRM(25)
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME  
# ELASTIC MOMENTUM TRANSFER                          
      DATA XEN/1.00,1.20,1.50,1.80,2.00,2.50,3.00,4.00,5.00,6.00,       7.00,8.00,8.71,9.00,10.0,11.0,13.6,15.0,16.5,19.6,                20.0,30.0,40.0,50.0,60.0,70.0,77.0,100.,130.,150.,                170.,200.,250.,300.,350.,400.,500.,600.,700.,800.,900.,1000.,1500.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,1.0D4,1.5D4,2.0D4,2.5'%.3f' %.0D4,4.0D4,5.0D4,  6.0D4,7.0D4,8.0D4,9.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5'%.3f' %.0'%.3f' %.5D5,4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,2.0D6,2.5'%.3f' %.0'%.3f' %.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5'%.3f' %.0'%.3f' %.5D7,4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,1.0D8,1.25D8,1.5D8,1.75D8,2.0D8,2.5'%.3f' %.0'%.3f' %.5D8,4.0D8,4.5D8,5.0D8,6.0D8,7.0D8,8.0D8,9.0D8,1.0D9/
      DATA YXSEC/1.6178,1.69,1.75,1.79,1.82,1.86,1.91,1.98,2.07,2.14,   2.21,2.29,2.35,2.37,2.44,2.51,2.66,2.71,2.76,2.83,                2.84,2.84,2.78,2.58,2.30,2.12,2.03,1.53,1.21,1.03,                0.90,.756,.585,.474,.385,.321,.234,.180,.143,.117,.0977,.0830,.0435,.0271,.0187,.0137,.0105,.00833,.00565,.00410, .00312,.00246,.0020,.00166,.0008,.000478,.00032,.000231,.000138,9.28D-5,  6.72D-5,5.12D-5,4.05D-5,3.30D-5,2.75D-5,1.88D-5,1.38D-5,1.06D-5,8.54D-6,5.9D-6,4.43D-6,3.46D-6,2.81D-6,2.34D-6,1.99D-6,1.50D-6,1.19D-6,9.71D-7,8.12D-7,6.91D-7,4.95D-7,3.74D-7,2.94D-7,2.38D-7,1.67D-7,1.24D-7,9.66D-8,7.74D-8,6.35D-8,5.31D-8,3.89D-8,2.98D-8,2.36D-8,1.92D-8,1.59D-8,1.07D-8,7.71D-9,5.83D-9,4.57D-9,3.03D-9,2.16D-9,1.62D-9,1.26D-9,1.01D-9,8.29D-10,5.86D-10,4.36D-10,3.36D-10,2.67D-10,2.18D-10,1.40D-10,9.78D-11,7.20D-11,5.52D-11,3.54D-11,2.46D-11,1.81D-11,1.38D-11,1.09D-11,8.86D-12,6.15D-12,4.52D-12,3.46D-12,2.73D-12,2.21D-12/
# ELASTIC TOTAL
      DATA XEL/1.00,1.20,1.50,1.80,2.00,2.50,3.00,4.00,5.00,6.00,       8.00,10.0,12.0,14.0,16.0,18.0,20.0,25.0,30.0,40.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,200.,250.,                300.,350.,400.,500.,600.,700.,800.,900.,1000.,1200.,              1500.,2000.,2500.,3000.,4000.,5000.,6000.,7000.,8000.,9000.,1.0D4,1.5D4,2.0D4,2.5'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,7.0D4,8.0D4,9.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5'%.3f' %.0'%.3f' %.5D5,4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,2.0D6,2.5'%.3f' %.0'%.3f' %.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5'%.3f' %.0'%.3f' %.5D7,4.0D7,5.0D7,6.0D7,8.0D7,9.0D7,1.0D8,1.25D8,1.5D8,1.75D8,2.0D8,2.5'%.3f' %.0'%.3f' %.5D8,4.0D8,4.5D8,5.0D8,6.0D8,7.0D8,8.0D8,9.0D8,1.0D9/
      DATA YEL/1.5667,1.68,1.82,1.94,2.01,2.16,2.30,2.55,2.80,2.98,3.23,3.39,3.54,3.63,3.67,3.68,3.69,3.61,3.50,3.27,3.09,2.90,2.72,2.54,2.40,2.25,1.96,1.74,1.39,1.21,1.06,.997,.893,.799,.693,.640,.565,.545,.483,.433,.359,.284,.223,.191,.156,.125,.109,.096,.0850,.0770,.0710,.0500,.0389,.0317,.0269,.0208,.0172,.0147,.0129,.0116,.0106,.00977,.00829,.00731,.00661,.00608,.00536,.00488,.00455,.00430,.00411,.00396,.00374,.00358,.00347,.00339,.00333,.00322,.00315,.00310,.00307,.00303,.00301,.00299,.00298,.00298,.00297,.00296,.00296,.00296,.00295,.00295,28*.002945/
# ANGULAR DISTRIBUTION PARAMETER EPSILON
      DATA XEPS/0.0,.0001,.0002,.0003,.0004,.0005,.0006,.0008,.001,.0012,.0014,.0016,.0018,.0020,.0024,.0028,.0032,.0036,.0040,.0045,.0050,.0055,.0060,.0070,.0080,.0090,.0100,.0120,.0140,.0160,.0180,.0200,.0240,.0280,.0320,.0360,.0400,.0450,.0500,.0550,0.060,0.070,0.080,0.090,0.100,0.120,0.140,0.160,0.180,0.200,0.24,0.28,0.32,0.36,0.40,0.45,0.50,0.55,0.60,0.70,0.80,0.90,1.00,1.20,1.50,1.80,2.00,2.50,3.00,4.00,5.00,6.00,7.00,8.00,8.71,9.00,10.0,11.0,12.0,13.6,14.0,15.0,16.0,16.5,18.0,19.6,20.0,25.0,30.0,40.0,50.0,60.0,70.0,77.0,80.0,90.0,100.,125.,130.,150.,170.,200.,250.,300.,350.,400.,500.,600.,700.,800.,900.,1000.,1200.,1500.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,1.0D4,1.5D4,2.0D4,2.5'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,7.0D4,8.0D4,9.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5'%.3f' %.0'%.3f' %.5D5,4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,2.0D6,2.5'%.3f' %.0'%.3f' %.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5'%.3f' %.0'%.3f' %.5D7,4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,1.0D8,1.25D8,1.5D8,1.75D8,2.0D8,2.5'%.3f' %.0'%.3f' %.5D8,4.0D8,4.5D8,5.0D8,6.0D8,7.0D8,8.0D8,9.0D8,1.0D9/
# ELASTIC ANGULAR DISTRIBUTION PARAMETER EPSILON
# EPSILON =1.0-YEPS
      DATA YEPS/1.0,1.02100,1.02805,1.03494,1.03914,1.04259,1.04678,1.05337,1.05831,1.06325,1.06804,1.07208,1.07522,1.07761,1.08388,1.09015,1.09478,1.09866,1.10254,1.10730,1.11177,1.11579,1.11891,1.12531,1.13154,1.13659,1.14163,1.14918,1.15613,1.16248,1.16779,1.17310,1.18075,1.18722,1.19324,1.19778,1.20202,1.20656,1.21006,1.21313,1.21604,1.22041,1.22362,1.22580,1.22725,1.22929,1.22929,1.22856,1.22711,1.22478,1.21852,1.21196,1.20422,1.19734,1.18766,1.17649,1.16544,1.15332,1.14133,1.11787,1.09463,1.07058,1.04888,1.00900,0.94235,0.88434,0.85878,0.79346,0.74891,0.67211,.62059,.59185,.58330,.57958,.58757,.58901,.59407,.60031,.60172,.61669,.61697,.62494,.63173,.63741,.64807,.65936,.66256,.68649,.72161,.77748,.75543,.69554,.67623,.68068,.66811,.60509,.54128,.49618,.47938,.43104,.39642,.37516,.30964,.27292,.21586,.19276,.14022,.11680,.09323,.08333,.06753,.06353,.05492,.03879,.02796,.02349,.01908,.01656,.01297,.01046,.00828,.00689,.00595,.00520,.00457,.00287,.00209,.001374,.001360,.000953,7.88D-4,6.50D-4,5.51D-4,4.75D-4,4.16D-4,3.71D-4,2.89D-4,2.34D-4,1.96D-4,1.67D-4,1.278D-4,1.020D-4,8.40D-5,7.07D-5,6.06D-5,5.27D-5,4.11D-5,3.33D-5,2.74D-5,2.31D-5,1.975D-5,1.418D-5,1.065D-5,8.32D-6,6.69D-6,4.60D-6,3.36D-6,2.57D-6,2.03D-6,1.64D-6,1.355D-6,9.70D-7,7.29D-7,5.68D-7,4.55D-7,3.73D-7,2.43D-7,1.71D-7,1.27D-7,9.80D-8,6.33D-8,4.42D-8,3.26D-8,2.49D-8,1.97D-8,1.60D-8,1.10D-8,8.10D-9,6.14D-9,4.82D-9,3.88D-9,2.44D-9,1.67D-9,1.21D-9,9.1D-10,5.7D-10,3.9D-10,2.8D-10,2.1D-10,1.7D-10,1.3D-10,9.1D-11,6.6D-11,5.0D-11,3.9D-11,3.1D-11/
# IONISATION (VALUES ABOVE 20KEV GENERATED BY BORN-BETHE IN SUB)  
      DATA XION/21.56454,22.0,22.5,23.0,23.5,24.0,24.5,25.0,25.5,26.0, 26.5,27.0,27.5,28.0,29.0,30.0,32.0,34.0,36.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,90.0,100.,110.,120.,130.,140.,150.,160.,170.,180.,190.,200.,225.,250.,275.,300.,350.,400.,500.,600.,700.,800.,900.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,10000.,12000.,14000.,16000.,18000.,20000./               
# GROSS IONISATION
      DATA YION/0.00,.0031,.0085,.0139,.0192,.0248,.0306,.0362,.0417,.0474,  .0540,.0602,.0664,.0726,.0847,.0971,.122,.147,.170,.217,.269,.322,.372,.414,.454,.490,.521,.549,.598,.635,.667,.690,.707,.721,.735,.746,.747,.748,.746,.745,.737,.723,.703,.682,.648,.607,.549,.501,.457,.420,.387,.363,.320,.287,.261,.239,.222,.186,.163,.143,.130,.117,.108,.100,.0937,.0826,.0742,.0678,.0623,.0540, .0475,.0426,.0389,.0357/            
# COUNTING IONISATION
      DATA YINC/0.00,.0031,.0085,.0139,.0192,.0248,.0306,.0362,.0417,.0474,  .0540,.0602,.0664,.0726,.0847,.0971,.122,.147,.170,.217,.269,.322,.372,.414,.454,.490,.521,.548,.595,.630,.657,.678,.692,.703,.714,.721,.721,.720,.717,.715,.705,.690,.670,.650,.616,.577,.522,.476,.435,.400,.369,.345,.305,.273,.248,.228,.211,.177,.155,.136,.124,.111,.103,.0951,.0891,.0786,.0706,.0645,.0592,.0513, .0451,.0406,.0370,.0340/   
# IONISATION FOR CHARGE STATE =1
      DATA YIN1/0.00,.0031,.0085,.0139,.0192,.0248,.0306,.0362,.0417,.0474,  .0540,.0602,.0664,.0726,.0847,.0971,.122,.147,.170,.217,.269,.322,.372,.414,.454,.490,.521,.547,.592,.624,.648,.666,.677,.684,.693,.698,.696,.693,.689,.685,.673,.658,.637,.619,.586,.548,.496,.454,.416,.383,.354,.331,.293,.262,.238,.219,.202,.170,.149,.130,.119,.106,.0988,.0912,.0855,.0754,.0677,.0619,.0568,.0492, .0433,.0390,.0355,.0326/   
# IONISATION FOR CHARGE STATE =2
      DATA XIN2/62.5275,75.0,80.0,90.0,100.,110.,120.,130.,140.,150.,160.,170.,180.,190.,200.,225.,250.,275.,300.,350.,400.,500.,600.,700.,800.,900.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,10000.,12000.,14000.,16000.,18000.,20000./      
      DATA YIN2/0.0,.0005,.00127,.00319,.00586,.0094,.0121,.0155,.0187,.0214,.0240,.0254,.0272,.0280,.0294,.0316,.0315,.0315,.0301,.0291,.0269,.0243,.0212,.0185,.0164,.0148,.0134,.0118,.0106,.00962,.00885,.00819,.00687,.00601,.00528,.00481,.00431,.0040,.00369,.00346,.00305,.00274,.0025,.0023,.0020,.00175,.00158,.00144,.00132/   
# IONISATION FOR CHARGE STATE =3
      DATA XIN3/125.9508,150.,160.,170.,180.,190.,200.,225.,250.,275.,300.,350.,400.,500.,600.,700.,800.,900.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,10000.,12000.,14000.,16000.,18000.,20000./               
      DATA YIN3/0.00,.00005,.000118,.000173,.000263,.000377,.000476,.00072,.00104,.00126,.00138,.00156,.00158,.00143,.00132,.00121,.00103,.000852,.000741,.000656,.000587,.000533,.000490,.000454,.000381,.000333,.000292,.000267,.000239,.000221,.000204,.000192,.000169,.000146,.000139,.000127,.000110,.0000970,.0000873,.0000796,.0000731/   
# K-SHELL IONISATION X-SECTION
      DATA XKSH/870.2,874.7,900.,926.,953.,981.,1009.,1038.,1068.,1099.,1131.,1164.,1232.,1305.,1381.,1463.,1594.,1737.,1948.,2122.,2313.,2521.,2747.,2994.,3264.,3557.,3877.,4226.,4606.,5021.,5473.,5966.,6503.,7088.,7727.,8423.,9182.,1.0D4,1.12D4,1.26D4,1.41D4,1.59D4,1.78D4,2.00D4,2.24D4,2.51D4,2.82'%.3f' %.16'%.3f' %.55'%.3f' %.98D4,4.47D4,5.01D4,5.62D4,6.31D4,7.08D4,7.94D4,8.91D4,1.00D5,1.12D5,1.30D5,1.50D5,1.73D5,2.00D5,2.30D5,2.66'%.3f' %.07'%.3f' %.55D5,4.22D5,5.01D5,6.13D5,7.50D5,1.00D6,1.22D6,1.45D6,1.73D6,2.00D6,2.51'%.3f' %.07D6,4.00D6,5.01D6,6.13D6,8.18D6,1.00D7,1.50D7,2.05'%.3f' %.07'%.3f' %.98D7,5.01D7,6.13D7,8.18D7,1.00D8,1.50D8,2.05'%.3f' %.07'%.3f' %.98D8,5.01D8,6.13D8,8.18D8,1.00D9/
      DATA YKSH/0.0,7.15D-6,2.96D-5,5.13D-5,7.23D-5,9.26D-5,1.12D-4,1.31D-4,1.49D-4,1.67D-4,1.84D-4,2.00D-4,2.31D-4,2.59D-4,2.84D-4,3.08D-4,3.39D-4,3.65D-4,3.94D-4,4.10D-4,4.22D-4,4.31D-4,4.36D-4,4.38D-4,4.37D-4,4.34D-4,4.28D-4,4.20D-4,4.11D-4,4.00D-4,3.88D-4,3.75D-4,3.61D-4,3.47D-4,3.33D-4,3.18D-4,3.04D-4,2.90D-4,2.71D-4,2.53D-4,2.36D-4,2.19D-4,2.04D-4,1.89D-4,1.75D-4,1.62D-4,1.50D-4,1.38D-4,1.28D-4,1.18D-4,1.09D-4,1.01D-4,9.32D-5,8.63D-5,8.00D-5,7.43D-5,6.90D-5,6.43D-5,6.00D-5,5.51D-5,5.09D-5,4.73D-5,4.41D-5,4.13D-5,3.89D-5,3.69D-5,3.52D-5,3.36D-5,3.23D-5,3.12D-5,3.05D-5,3.01D-5,3.01D-5,3.04D-5,3.07D-5,3.11D-5,3.19D-5,3.27D-5,3.39D-5,3.50D-5,3.60D-5,3.76D-5,3.87D-5,4.11D-5,4.30D-5,4.54D-5,4.69D-5,4.83D-5,4.96D-5,5.13D-5,5.25D-5,5.50D-5,5.69D-5,5.94D-5,6.10D-5,6.24D-5,6.36D-5,6.54D-5,6.66D-5/
#            
# 1S5 METASTABLE J=2  UNITS 10**-18 SCALED BY 1/E**3 ABOVE 50 EV
      DATA X1S5/16.61907,16.625,16.63,16.64,16.65,16.66,16.67,16.68,16.69,16.70,16.71,16.73,16.75,16.79,16.80,16.81,16.82,16.84,16.85,16.86,16.87,16.88,16.89,16.90,16.91,16.92,16.93,16.94,16.95,16.96,16.97,16.98,16.99,17.00,17.02,17.04,17.06,17.08,17.10,17.20,17.30,17.40,17.50,17.60,17.70,17.80,17.90,18.00,18.10,18.20,18.30,18.40,18.41,18.43,18.45,18.47,18.50,18.53,18.55,18.56,18.57,18.58,18.59,18.60,18.61,18.62,18.625,18.63,18.64,18.65,18.66,18.67,18.68,18.69,18.70,18.71,18.72,18.73,18.75,18.78,18.80,18.90,18.96,18.97,18.98,18.99,19.00,19.05,19.10,19.20,19.50,19.58,19.60,19.61,19.63,19.65,19.70,19.80,19.90,20.00,21.0,22.0,23.0,24.0,26.0,28.0,30.0,35.0,40.0,45.0,50.0/
      DATA Y1S5/0.0,.114,.142,.190,.228,.256,.275,.304,.342,.399,.446,.532,.598,.646,.665,.674,.693,.750,.788,.845,.902,1.09,1.27,1.47,1.59,1.65,1.65,1.59,1.52,1.44,1.35,1.28,1.20,1.16,1.03,.988,.931,.893,.864,.807,.807,.826,.864,.912,.978,1.03,1.11,1.19,1.26,1.34,1.40,1.42,1.30,1.21,1.15,1.12,1.07,1.02,1.24,1.55,2.13,2.02,1.64,1.23,1.12,1.56,1.70,1.55,1.10,1.28,1.58,1.72,1.65,1.42,1.25,1.10,.988,.959,.883,.827,.817,.836,.779,.931,1.21,1.14,1.02,1.01,1.04,1.08,1.15,1.07,1.01,1.33,1.27,1.23,1.21,1.17,1.14,1.03,1.04,1.04,1.03,1.02,.998,.959,.902,.760,.608,.475,.361/
# 1S4 RESONANCE LEVEL J=1 F=0.0118  UNITS 10**-18  74.3724 NM.
      DATA X1S4/16.67083,16.675,16.68,16.69,16.70,16.71,16.72,16.73,16.74,16.75,16.76,16.77,16.78,16.79,16.80,16.81,16.82,16.83,16.84,16.85,16.86,16.87,16.88,16.89,16.90,16.91,16.92,16.93,16.94,16.95,16.96,16.97,16.98,16.99,17.00,17.02,17.04,17.06,17.08,17.10,17.20,17.30,17.40,17.50,17.60,17.70,17.80,17.90,18.00,18.10,18.20,18.30,18.40,18.41,18.42,18.43,18.44,18.45,18.47,18.50,18.52,18.525,18.53,18.54,18.55,18.56,18.57,18.58,18.59,18.60,18.61,18.62,18.63,18.64,18.65,18.66,18.67,18.68,18.69,18.70,18.71,18.72,18.73,18.74,18.75,18.76,18.78,18.80,18.90,18.94,18.96,18.98,18.99,19.00,19.05,19.10,19.20,19.30,19.40,19.50,19.7,19.9,20.0,21.0,22.0,23.0,24.0,25.0,26.0,27.0,28.0,30.0,32.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,120.,140.,170.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000./
      DATA Y1S4/0.,.082,.109,.149,.192,.239,.295,.364,.439,.510,.572,.623,.665,.697,.728,.762,.798,.845,.900,.959,1.04,1.13,1.21,1.23,1.23,1.18,1.11,1.04,.978,.918,.852,.824,.784,.750,.722,.674,.646,.608,.598,.580,.541,.541,.551,.570,.598,.627,.665,.712,.760,.807,.855,.893,.893,.855,.836,.807,.798,.798,.779,.760,.760,.874,.770,.788,.836,.978,1.26,1.29,.978,.760,.788,1.08,.864,.770,.940,1.19,1.41,1.33,1.16,1.04,.959,.931,.827,.779,.732,.693,.646,.617,.589,.560,.570,.817,.712,.684,.693,.712,.741,.760,.779,.798,.817,.808,.770,.810,.850,.890,.920,.940,.960,.990,1.00,1.02,1.04,1.05,1.06,1.06,1.05,1.04,1.02,.990,.950,.880,.800,.730,.670,.600,.530,.460,.410,.370,.338,.310,.270,.239,.217,.198,.184/
# 1S3 METASTABLE LEVEL  J=0   UNITS 10**-18 SCALED BY 1/E**3 ABOVE 50 EV
      DATA X1S3/16.71538,16.72,16.73,16.74,16.75,16.76,16.77,16.78,16.79,16.80,16.81,16.82,16.83,16.84,16.85,16.86,16.87,16.88,16.89,16.90,16.91,16.92,16.93,16.94,16.95,16.96,16.97,16.98,17.00,17.02,17.04,17.06,17.08,17.10,17.12,17.14,17.16,17.18,17.20,17.22,17.26,17.34,17.40,17.45,17.50,17.60,17.70,17.80,17.90,18.00,18.10,18.20,18.30,18.40,18.41,18.43,18.45,18.47,18.50,18.52,18.525,18.53,18.54,18.55,18.56,18.57,18.58,18.59,18.60,18.61,18.62,18.63,18.64,18.65,18.66,18.67,18.68,18.69,18.70,18.71,18.72,18.73,18.74,18.75,18.76,18.78,18.80,18.82,18.84,18.86,18.88,18.90,18.92,18.94,18.95,18.96,18.97,18.98,18.99,19.00,19.05,19.10,19.20,19.30,19.40,19.50,19.60,19.65,19.70,19.80,19.9,20.0,25.0,30.0,35.0,40.0,50.0/
      DATA Y1S3/0.,.025,.038,.046,.054,.063,.078,.095,.117,.144,.175,.205,.238,.274,.311,.350,.387,.415,.420,.408,.387,.361,.341,.319,.298,.284,.268,.251,.229,.201,.197,.186,.176,.170,.165,.161,.159,.157,.155,.153,.152,.152,.154,.157,.161,.168,.178,.190,.203,.217,.231,.243,.256,.255,.244,.229,.226,.225,.218,.210,.335,.220,.218,.226,.253,.343,.427,.315,.230,.235,.325,.260,.223,.247,.376,.537,.524,.457,.402,.365,.328,.299,.274,.251,.229,.201,.179,.166,.158,.154,.150,.146,.141,.130,.126,.134,.214,.249,.199,.189,.188,.194,.204,.212,.218,.223,.226,.219,.213,.232,.228,.221,.210,.175,.145,.125,.085/
# 1S2 RESONANCE LEVEL J=1 F=0.159   UNITS 10**-18  73.5901 NM.
      DATA X1S2/16.84805,16.86,16.87,16.88,16.89,16.90,16.91,16.92,16.93,16.94,16.95,16.96,16.98,17.00,17.05,17.10,17.20,17.30,17.40,17.50,17.60,17.70,17.80,17.90,18.00,18.10,18.20,18.30,18.40,18.42,18.44,18.46,18.49,18.51,18.53,18.54,18.55,18.56,18.57,18.58,18.59,18.60,18.61,18.62,18.63,18.64,18.65,18.66,18.67,18.68,18.69,18.70,18.71,18.72,18.73,18.74,18.76,18.78,18.80,18.85,18.90,18.92,18.94,18.95,18.96,18.97,18.98,19.00,19.05,19.10,19.20,19.30,19.40,19.50,19.60,19.70,19.80,19.90,20.00,20.50,21.0,21.5,22.0,23.0,24.0,25.0,26.0,27.0,28.0,29.0,30.0,31.0,32.0,33.0,34.0,35.0,36.0,37.0,38.0,39.0,40.0,41.0,42.0,43.0,45.0,50.0,60.0,70.0,80.0,100.,120.,150.,180.,200.,240.,280.,320.,360.,400./
      DATA Y1S2/0.,.230,.513,.864,1.23,1.59,1.83,2.00,2.10,2.16,2.18,2.15,2.12,2.04,1.86,1.73,1.57,1.49,1.46,1.45,1.46,1.50,1.54,1.60,1.67,1.75,1.82,1.89,1.99,2.01,2.03,2.05,2.06,2.11,2.05,1.97,2.06,2.15,2.14,2.01,1.96,2.02,2.00,1.98,1.94,2.03,2.25,2.37,2.30,2.21,2.13,2.09,2.04,2.01,1.99,1.95,1.91,1.88,1.88,1.91,2.01,2.11,2.27,2.29,1.96,1.86,1.93,1.96,1.99,2.01,2.06,2.10,2.15,2.18,2.25,2.29,2.28,2.32,2.36,2.56,2.66,2.80,3.07,3.63,4.22,4.88,5.45,6.00,6.57,7.07,7.52,7.90,8.28,8.60,8.87,9.10,9.30,9.48,9.63,9.76,9.87,9.96,10.0,10.1,10.2,10.3,10.4,10.3,10.0,9.45,9.00,8.00,7.20,6.80,6.10,5.50,5.05,4.73,4.45/
# 2P10 J=1   UNITS 10**-18   SCALE 1/E**2 ABOVE 100 EV
      DATA X2P10/18.38162,18.39,18.40,18.42,18.43,18.44,18.46,18.47,18.48,18.49,18.50,18.509,18.51,18.52,18.53,18.54,18.55,18.56,18.57,18.58,18.59,18.60,18.61,18.62,18.63,18.64,18.65,18.66,18.67,18.68,18.69,18.70,18.71,18.72,18.74,18.80,18.90,18.92,18.95,18.96,18.97,19.00,19.10,19.20,19.30,19.40,19.50,19.56,19.57,19.58,19.59,19.60,19.70,19.80,19.90,20.0,21.0,22.0,23.0,24.0,25.0,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,50.0,60.0,75.0,100./
      DATA Y2P10/0.00,.060,.091,.201,.261,.287,.310,.328,.354,.389,.440,.589,.394,.574,.716,.960,1.23,1.03,.440,.229,.481,1.16,.777,.606,.863,1.03,1.08,.690,.346,.191,.117,.085,.081,.074,.068,.062,.064,.095,.597,.580,.278,.164,.143,.138,.136,.135,.136,.147,.163,.201,.142,.135,.123,.120,.142,.153,.200,.237,.275,.294,.309,.318,.328,.332,.328,.323,.313,.304,.285,.200,.140,.090,.049/
# 2P9 J=3  UNITS 10**-18    SCALE 1/E**2 ABOVE 100 EV
      DATA X2P9/18.55511,18.56,18.57,18.58,18.59,18.60,18.61,18.62,18.63,18.64,18.65,18.66,18.67,18.68,18.69,18.70,18.71,18.72,18.73,18.74,18.75,18.77,18.80,18.82,18.85,18.88,18.90,18.92,18.94,18.96,18.97,18.98,18.99,19.00,19.10,19.20,19.30,19.40,19.50,19.55,19.59,19.60,19.70,19.80,19.90,20.00,20.10,20.20,20.30,20.40,20.6,20.8,21.0,22.0,24.0,26.0,28.0,30.0,32.0,34.0,38.0,42.0,46.0,50.0,55.0,60.0,70.0,80.0,90.0,100./
      DATA Y2P9/0.0,.093,.157,.233,.183,.114,.092,.132,.102,.116,.164,.322,.472,.392,.286,.218,.175,.148,.133,.123,.119,.116,.120,.124,.131,.139,.147,.163,.193,.300,.320,.180,.128,.131,.135,.142,.151,.159,.171,.179,.213,.143,.178,.195,.215,.205,.222,.242,.257,.268,.286,.307,.328,.418,.465,.503,.513,.503,.484,.456,.404,.332,.285,.256,.204,.171,.128,.097,.078,.062/
# 2P8 J=2  UNITS 10**-18    SCALE BY 1/E ABOVE 60 EV
      DATA X2P8/18.57583,18.58,18.59,18.60,18.61,18.62,18.63,18.64,18.65,18.66,18.67,18.68,18.69,18.70,18.71,18.72,18.74,18.76,18.78,18.80,18.82,18.84,18.86,18.88,18.90,18.92,18.94,18.96,18.98,19.00,19.05,19.10,19.20,19.30,19.40,19.50,19.58,19.60,19.62,19.65,19.68,19.70,19.80,19.90,20.00,20.10,20.20,20.40,20.60,20.80,21.0,22.0,23.0,24.0,25.0,26.0,27.0,28.0,29.0,30.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,55.0,60.0/
      DATA Y2P8/0.0,.142,.198,.206,.250,.193,.158,.172,.403,.506,.467,.420,.381,.353,.326,.308,.275,.249,.229,.214,.201,.195,.192,.192,.194,.200,.215,.271,.206,.177,.177,.179,.185,.192,.200,.207,.205,.243,.228,.224,.228,.192,.218,.239,.260,.272,.289,.315,.339,.364,.385,.437,.475,.513,.537,.546,.551,.551,.546,.532,.513,.494,.475,.456,.437,.423,.408,.394,.385,.370,.337,.313/
# 2P7 J=1  UNITS 10**-18    SCALE BY 1/E**2 ABOVE 60 EV
      DATA X2P7/18.61270,18.62,18.63,18.64,18.65,18.66,18.67,18.68,18.69,18.70,18.71,18.72,18.74,18.76,18.80,18.85,18.90,18.92,18.93,18.94,18.95,18.96,18.97,18.98,18.99,19.00,19.05,19.10,19.20,19.30,19.50,19.60,19.68,18.70,19.80,19.90,20.00,20.10,20.20,20.30,20.4,20.6,20.8,21.0,21.5,22.0,23.0,24.0,25.0,26.0,27.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,54.0,60.0/
      DATA Y2P7/0.0,.123,.127,.095,.145,.153,.126,.104,.091,.085,.080,.077,.072,.067,.061,.060,.066,.071,.076,.082,.096,.118,.112,.074,.066,.067,.070,.075,.084,.088,.099,.101,.115,.101,.114,.122,.126,.117,.124,.134,.141,.154,.164,.177,.198,.215,.232,.244,.252,.252,.250,.248,.243,.233,.218,.201,.184,.169,.156,.144,.134,.124,.117,.103,.081/
# 2P6 J=2  UNITS 10**-18   SCALE BY 1/E ABOVE 60 EV
      DATA X2P6/18.63679,18.64,18.65,18.66,18.67,18.68,18.69,18.70,18.71,18.72,18.74,18.76,18.78,18.80,18.82,18.84,18.86,18.90,18.94,18.96,19.00,19.05,19.10,19.20,19.30,19.40,19.50,19.60,19.70,19.80,19.90,20.00,20.10,20.20,20.30,20.40,20.60,20.80,21.00,21.50,22.0,23.0,24.0,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,52.0,54.0,60.0/
      DATA Y2P6/0.0,.113,.103,.135,.310,.442,.466,.449,.441,.436,.434,.432,.427,.419,.410,.401,.391,.376,.368,.374,.333,.319,.317,.321,.330,.339,.349,.388,.369,.362,.388,.404,.423,.437,.447,.466,.489,.513,.532,.556,.579,.603,.622,.646,.656,.656,.646,.632,.617,.603,.589,.575,.561,.546,.532,.518,.503,.489,.475/
# 2P5 J=1  UNITS 10**-18   SCALE BY 1/E**2 ABOVE 60 EV
      DATA X2P5/18.69336,18.70,18.71,18.72,18.73,18.74,18.75,18.76,18.78,18.80,18.82,18.84,18.86,18.88,18.90,18.92,18.94,18.96,18.98,19.00,19.05,19.10,19.20,19.30,19.40,19.50,19.60,19.67,19.70,19.80,19.9,20.0,20.1,20.2,20.3,20.4,20.5,20.6,20.8,21.0,21.5,22.0,23.0,24.0,25.0,26.0,27.0,28.0,29.0,30.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,52.0,54.0,60.0/
      DATA Y2P5/0.0,.029,.045,.054,.061,.066,.067,.069,.068,.067,.066,.066,.067,.068,.071,.074,.081,.095,.078,.079,.087,.096,.112,.125,.134,.142,.156,.161,.146,.163,.174,.175,.168,.168,.174,.182,.192,.201,.219,.233,.237,.239,.242,.242,.239,.235,.229,.228,.228,.228,.224,.211,.204,.196,.187,.181,.173,.166,.159,.151,.144,.138,.117/
# 2P4 J=2  UNITS 10**-18   SCALE BY 1/E ABOVE 60 EV
      DATA X2P4/18.70407,18.71,18.72,18.73,18.74,18.75,18.76,18.77,18.78,18.79,18.80,18.82,18.84,18.86,18.88,18.90,18.92,18.94,18.96,18.98,19.00,19.02,19.10,19.20,19.30,19.40,19.50,19.58,19.60,19.68,19.70,19.80,19.90,20.00,20.10,20.20,20.30,20.40,20.60,20.80,21.0,21.5,22.0,22.5,23.0,24.0,25.0,26.0,27.0,28.0,29.0,30.0,31.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,52.0,54.0,60.0/
      DATA Y2P4/0.0,.140,.180,.208,.229,.247,.263,.278,.291,.302,.313,.318,.332,.333,.332,.330,.329,.336,.371,.313,.287,.275,.263,.264,.270,.278,.289,.312,.291,.293,.326,.310,.326,.343,.363,.380,.404,.419,.447,.476,.504,.532,.551,.570,.580,.599,.608,.614,.612,.605,.594,.580,.564,.546,.513,.485,.461,.440,.423,.408,.395,.384,.374,.366,.358,.323/
# 2P3 J=0  UNITS 10**-18   SCALE BY 1/E ABOVE 60 EV
      DATA X2P3/18.71138,18.72,18.73,18.74,18.75,18.76,18.77,18.78,18.79,18.80,18.82,18.84,18.86,18.88,18.90,18.92,18.94,18.95,18.96,18.97,18.98,19.00,19.10,19.20,19.30,19.40,19.50,19.60,19.70,19.80,19.9,20.0,20.1,20.2,20.3,20.4,20.6,20.8,21.0,21.5,22.0,23.0,24.0,25.0,26.0,27.0,28.0,29.0,30.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,52.0,54.0,60.0/
      DATA Y2P3/0.0,.028,.037,.046,.054,.062,.068,.073,.078,.082,.087,.090,.092,.095,.098,.104,.124,.139,.142,.083,.064,.068,.065,.066,.069,.072,.076,.078,.086,.087,.097,.095,.101,.110,.116,.119,.125,.133,.139,.143,.149,.152,.153,.151,.150,.149,.146,.142,.137,.127,.120,.112,.107,.104,.100,.097,.094,.091,.088,.085,.081,.072/
# 2P2 J=1  UNITS 10**-18   SCALE BY 1/E**2 ABOVE 60 EV
      DATA X2P2/18.72638,18.73,18.74,18.75,18.76,18.77,18.78,18.79,18.80,18.82,18.84,18.86,18.88,18.90,18.92,18.94,18.95,18.96,18.97,18.98,19.00,19.10,19.20,19.30,19.40,19.50,19.58,19.60,19.70,19.80,19.9,20.0,20.1,20.2,20.3,20.4,20.6,20.8,21.0,21.5,22.0,23.0,24.0,25.0,26.0,27.0,28.0,29.0,30.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,52.0,54.0,60.0/
      DATA Y2P2/0.0,.006,.025,.046,.063,.078,.090,.099,.109,.122,.128,.131,.133,.137,.134,.143,.154,.179,.163,.137,.125,.128,.140,.150,.159,.166,.183,.163,.187,.187,.198,.201,.204,.203,.204,.207,.209,.211,.215,.223,.228,.233,.238,.238,.235,.226,.219,.214,.207,.192,.178,.163,.150,.140,.129,.122,.115,.108,.103,.096,.090,.078/
# 2P1 J=0 UNITS 10**-18   SCALE BY 1/E ABOVE 100 EV
      DATA X2P1/18.96595,18.97,18.98,18.99,19.00,19.01,19.02,19.03,19.04,19.06,19.08,19.10,19.15,19.20,19.30,19.40,19.50,19.57,19.58,19.60,19.66,19.70,19.80,19.90,20.00,20.10,20.20,20.30,20.40,20.60,20.8,21.0,21.5,22.0,23.0,24.0,25.0,26.0,27.0,28.0,29.0,30.0,32.0,34.0,36.0,38.0,40.0,42.0,44.0,46.0,48.0,50.0,52.0,54.0,60.0,70.0,80.0,90.0,100./
      DATA Y2P1/0.0,.134,.170,.194,.206,.216,.223,.230,.235,.243,.250,.256,.269,.280,.303,.327,.345,.279,.437,.411,.342,.352,.371,.394,.418,.442,.461,.480,.499,.541,         .580,.618,.722,.826,.969,1.17,1.35,1.48,1.60,1.73,1.81,1.90,1.97,1.98,1.99,1.99,1.98,1.97,1.97,1.96,1.95,1.94,1.92,1.90,1.86,1.75,1.61,1.48,1.38/
#                                                      
# 2S5 J=2  UNITS 10**-18    SCALE BY 1/E**2 ABOVE 50 EV
      DATA X2S5/19.66403,19.8,19.9,20.0,20.5,21.0,22.0,23.0,24.0,25.0,26.0,27.0,28.0,30.0,32.0,36.0,40.0,44.0,50.0/
      DATA Y2S5/0.0,.0217,.0374,.0526,.121,.178,.263,.319,.355,.376,.387,.390,.388,.375,.355,.309,.266,.229,.184/
# 2S4 J=1  RESONANCE LEVEL  USE BEF SCALING     F=0.0128     62.9743 NM 
#
# 2S3 J=0  UNITS 10**-18    SCALE BY 1/E**2 ABOVE 50 EV 
      DATA X2S3/19.76060,19.8,19.9,20.0,20.5,21.0,22.0,23.0,24.0,25.0,26.0,27.0,28.0,30.0,32.0,36.0,40.0,44.0,50.0/
      DATA Y2S3/0.0,.0088,.0245,.0376,.0870,.122,.168,.195,.209,.215,.216,.214,.209,.196,.181,.151,.126,.105,.081/
# 2S2 J=1  RESONANCE LEVEL  USE BEF SCALING     F=0.0166     62.6827 NM
#
# 3D6 J=0  UNITS 10**-18   SCALE BY 1/E**2 ABOVE 50 EV 
      DATA X3D6/20.02464,22.0,24.0,26.0,28.0,30.0,32.0,34.0,36.0,40.0,45.0,50.0/
      DATA Y3D6/0.0,.013,.022,.029,.032,.033,.032,.030,.025,.020,.016,.011/
# 3D5 J=1 RESONANCE LEVEL  USE BEF SCALING      F=0.0048     61.9106 NM
#
# 3D4# J=4  UNITS 10**-18   SCALE BY 1/E**2 ABOVE 50 EV
      DATA X3D4P/20.03465,22.0,24.0,26.0,28.0,30.0,32.0,34.0,36.0,40.0,45.0,50.0/
      DATA Y3D4P/0.0,.013,.022,.029,.032,.033,.032,.030,.025,.020,.016,.011/
# 3D4  J=3  UNITS 10**-18   SCALE BY 1/E**2 ABOVE 50 EV
      DATA X3D4/20.03487,22.0,24.0,26.0,28.0,30.0,32.0,34.0,36.0,40.0,45.0,50.0/
      DATA Y3D4/0.0,.013,.022,.029,.032,.033,.032,.030,.025,.020,.016,.011/
# 3D3  J=2  UNITS 10**-18  SCALE BY 1/E**2 ABOVE  50 EV
      DATA X3D3/20.03675,22.0,24.0,26.0,28.0,30.0,32.0,34.0,36.0,40.0,45.0,50.0/
      DATA Y3D3/0.0,.013,.022,.029,.032,.033,.032,.030,.025,.020,.016,.011/
# 3D2 J=1 RESONANCE LEVEL   USE BEF SCALING      F=0.0146    61.8676 NM
#
# 3D1## J=2  UNITS 10**-18  SCALE BY 1/E**2 ABOVE 50 EV
      DATA X3D1PP/20.04820,22.0,24.0,26.0,28.0,30.0,32.0,34.0,36.0,40.0,45.0,50.0/
      DATA Y3D1PP/0.0,.013,.022,.029,.032,.033,.032,.030,.025,.020,.016,.011/
# 3D1# J=3  UNITS 10**-18  SCALE BY 1/E**2 ABOVE 50 EV
      DATA X3D1P/20.04842,22.0,24.0,26.0,28.0,30.0,32.0,34.0,36.0,40.0,45.0,50.0/
      DATA Y3D1P/0.0,.013,.022,.029,.032,.033,.032,.030,.025,.020,.016,.011/
# 3S1#### J=2  UNITS 10**-18 SCALE BY 1/E**2 ABOVE 50 EV
      DATA X3S1PPPP/20.13611,22.,24.,26.0,28.0,30.0,32.0,34.0,36.0,40.0,45.0,50.0/
      DATA Y3S1PPPP/0.0,.013,.022,.029,.032,.033,.032,.030,.025,.020,.016,.011/
# 3S1### J=3   UNITS 10**-18 SCALE BY 1/E**2 ABOVE 50 EV
      DATA X3S1PPP/20.13629,22.,24.,26.0,28.0,30.0,32.0,34.0,36.0,40.0,45.0,50.0/
      DATA Y3S1PPP/0.0,.013,.022,.029,.032,.033,.032,.030,.025,.020,.016,.011/
# 3S1## J=2    UNITS 10**-18 SCALE BY 1/E**2 ABOVE 50 EV
      DATA X3S1PP/20.13751,22.,24.,26.0,28.0,30.0,32.0,34.0,36.0,40.0,45.0,50.0/
      DATA Y3S1PP/0.0,.013,.022,.029,.032,.033,.032,.030,.025,.020,.016,.011/
# 3S1# J=1 RESONANCE LEVEL  USE BEF SCALING      F=0.00676   61.5632 NM
#
# 3P SUM 3P10-3P6  UNITS 10**-18  SCALE BY 1/E**1.5  ABOVE 50 EV
      DATA X3P106/20.14965,21.0,22.0,23.0,24.0,25.0,26.0,27.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,50.0/
      DATA Y3P106/0.0,.110,.178,.242,.275,.320,.363,.418,.450,.500,.500,.480,.460,.440,.410,.330/
# 3P SUM 3P5-3P2  UNITS 10**-18  SCALE BY 1/E**1.5  ABOVE 50 EV
      DATA X3P52/20.25918,21.0,22.0,23.0,24.0,25.0,26.0,27.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,50.0/
      DATA Y3P52/0.0,.088,.142,.194,.220,.256,.290,.335,.360,.400,.400,.380,.370,.350,.330,.270/
# 3P1 J=0  UNITS 10**-18   SCALE 1/E  BY ABOVE 50 EV
      DATA X3P1/20.36885,21.0,22.0,23.0,24.0,25.0,26.0,27.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,50.0/
      DATA Y3P1/0.0,.050,.100,.125,.145,.165,.175,.185,.192,.200,.205,.207,.207,.205,.205,.190/
#  HIGH RESONANCE LEVELS :
#
# 3S4  J=1  RESONANCE LEVEL  USE BEF SCALING     F=0.00635   60.2730 NM 
# 3S2  J=1  RESONANCE LEVEL  USE BEF SCALING     F=0.0044    60.0041 NM
# 4D5  J=1  RESONANCE LEVEL  USE BEF SCALING     F=0.00705   59.8895 NM
# 4D2  J=1  RESONANCE LEVEL  USE BEF SCALING     F=0.00235   59.8710 NM
# 4S1# J=1  RESONANCE LEVEL  USE BEF SCALING     F=0.00435   59.5924 NM
# 4S4  J=1  RESONANCE LEVEL  USE BEF SCALING     F=0.00325   59.1834 NM
# 5D5  J=1  RESONANCE LEVEL  USE BEF SCALING     F=0.00383   59.0015 NM
# 5D2  J=1  RESONANCE LEVEL  USE BEF SCALING     F=0.00127   58.9915 NM
# 4S2  J=1  RESONANCE LEVEL  USE BEF SCALING     F=0.00165   58.9183 NM
# 5S1# J=1  RESONANCE LEVEL  USE BEF SCALING     F=0.0025    58.7217 NM
# SUM S STATES 5-INFINITY USE BEF SCALING        F=0.00962
# SUM D STATES 6-INFINITY USE BEF SCALING        F=0.01695  
#  TOTAL OSCILLATOR SUM  F = 0.2926
#
# BREMSSTRAHLUNG X-SECTION WITH CUT OFF
      DATA Z10T/671.,424.,215.,123.,69.3,32.5,18.8,11.8,7.95,7.19,7.27,7.42,7.59,7.71,7.80,7.94,8.05,8.19,8.29,8.40,8.47,8.51,8.52,8.56,8.57/
# UNITS 10**-24
      DATA EBRM/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,4.E7,5.E7,6.E7,8.E7,1.E8/
# ---------------------------------------------------------------------
      if(NANISO == 0):
 :
       NAME='NEON ISOTROPIC     2013  '       
      else:     
       NAME='NEON ANISOTROPIC   2013  '      
      # endif
# ---------------------------------------------------------------------
# UPDATE OF 2002 FILE USES MORE DETAILED EXCITATION X-SECTIONS FOR USE
# IN PENNING CALCULATIONS. 
# SHAPE 0F EXCITATION defS CLOSE TO THRESHOLD GUIDED BY 
# ZEMAN AND BARTSCHAT J.PHYS. B 30(1997)4609
# ALL X-SECTIONS CONSISTENT WITH PUBLISHED ELECTRON SCATTERING DATA UP 
# TO 2003
# FIT TO RATE COEFICIENTS OF :
#  TACHIBANA AN PHELPS : PHYS REV.A36(1987)999
#  TACHIBANA AND HARIMA J.PHYS.B 17(1984)879
# GOOD FIT TO DRIFT DIFFUSION DATA OF ROBERTSON AND ALSO DATA OF
#  LUCAS AND SAELEE . CLOSE FIT TO TOWNS# end DATA OF CHANIN AND RORK 
# 2007: INCREASED DATA BASE UP TO 10MEV ENERGY                       
# 2007: INTRODUCED NEW ANGULAR DISTRIBUTION def
# 2007: INTRODUCED PENNING TRANSFER FRACTION
# 2010: INTRODUCED MORE DETAILED RMPS CALCULATION OF ZATSARINNY AND
#       BARTSCHAT FROM THRESHOLD TO 20EV FOR THE FIRST S AND P STATES
#       WHICH ARE IN AGREEMENT WITH ALLANS PRECISE MEASUREMENTS
#       J.PHYS.B 42(2009)044009
#       SCALED ZATSARINNY AND BARTSCHAT BY 0.95 TO BRING INTO EXACT 
#       AGREEMENT WITH ALLANS MEASUREMENTS
#       NOW CLEAR EVIDENCE THAT THE TOWNS# end EXPERIMENTS ARE 
#       INACCURATE ESPECIALLY AT LOW FIELDS DUE TO PENNING TRANFERS
#       TO IMPURITIES AT THE LEVEL OF 30PPM . NEED MODERN EXPERIMENTS
#       WITH LESS THAN 1PPM IMPURITIES TO GIVE ACCURATE TOWNS# end COEF.
# 2013: INTRODUCED K-SHELL IONISATION AND CHARGE STATES 1 2 AND 3
#
# ---------------------------------------------------------------------
# 
# BORN BETHE VALUES FOR IONISATION
      CONST=1.873884D-20
      EMASS2=1021997.804
      API=numpy.arccos(-1.00)
      A0=0.52917720859D-8
      RY=13.60569193
      BBCONST=16.0*API*A0*A0*RY*RY/EMASS2
#
      AM2=1.69 
      C=17.80  
# AVERAGE AUGER EMISSION FOR EACH SHELL
      AUGK=1.99
#
      NION=4                             
      NATT=1              
      NIN=45
      NNULL=0 
      IONMODEL=0
#
      NBREM=25
      DO 55 J=1,NIN
      IZBR[J]=0
   55 CONTINUE
      IZBR(46)=10
#
      DO 1 J=1,6
    1 KEL[J]=NANISO 
      DO 2 J=1,NIN
    2 KIN[J]=NANISO
#       
      NEL=120                                                       
      NDATA=125 
      NEPSI=196                                                        
      NIOND=74 
      NION2=49
      NION3=41
      NKSH=99             
      N1S5=111
      N1S4=137
      N1S3=117
      N1S2=119
      N2P10=73
      N2P9=70
      N2P8=72
      N2P7=65
      N2P6=59
      N2P5=63
      N2P4=66
      N2P3=62
      N2P2=62
      N2P1=59
      N2S5=19
      N2S3=19
      N3D6=12
      N3D4P=12
      N3D4=12
      N3D3=12
      N3D1PP=12
      N3D1P=12
      N3S1PPPP=12
      N3S1PPP=12
      N3S1PP=12
      N3P106=16
      N3P52=16
      N3P1=16
#
      E[1]=0.0                                                          
      E(2)=2.0*EMASS/(20.1797*AMU)                                     
      E(3)=21.56454
# EXCITATION X=SECTION AT 1.3MEV                                    
      E(4)=0.492D-19
# ENTER IONISING X-SECTION AT 1.3MEV         
      E(5)=0.415D-18
# ENTER EOBY FOR MINIMUM IONISING PARTICLE          
      E(6)=19.5
# OPAL BEATY AT LOW ENERGY
      EOBY[1]=17.4      
      EOBY(2)=36.0     
      EOBY(3)=73.0     
# OPAL BEATY SPLITTING FOR K SHELL
      EOBY(4)=500.0       
#
      EION[1]=21.56454
      EION(2)=62.5275
      EION(3)=125.9508
      EION(4)=870.2
      LEGAS[1]=0
      LEGAS(2)=0
      LEGAS(3)=0
      LEGAS(4)=1
      ISHELL[1]=0
      ISHELL(2)=0
      ISHELL(3)=0
      ISHELL(4)=1
# AUGER AND FLUORESCENCE DATA
      NC0[1]=0
      EC0[1]=0.0
      WKLM[1]=0.0
      EFL[1]=0.0
      NG1[1]=0
      EG1[1]=0.0
      NG2[1]=0
      EG2[1]=0.0
      NC0(2)=1 
      EC0(2)=5.0
      WKLM(2)=0.0
      EFL(2)=0.0
      NG1(2)=0
      EG1(2)=0.0
      NG2(2)=0
      EG2(2)=0.0
      NC0(3)=2
      EC0(3)=10.0
      WKLM(3)=0.0
      EFL(3)=0.0
      NG1(3)=0
      EG1(3)=0.0
      NG2(3)=0
      EG2(3)=0.0
      NC0(4)=2
      EC0(4)=806.6
      WKLM(4)=0.015
      EFL(4)=849.
      NG1(4)=2
      EG1(4)=801.
      NG2(4)=1
      EG2(4)=5.0
#
      DO 776 J=1,NION
      DO 777 I=1,20000
      if(EG[I]:
 > EION[J]) :
       IOFFION[J]=I-1
       GO TO 776
      # endif
  777 CONTINUE
  776 CONTINUE
#
      EIN[1]=16.61907
      EIN(2)=16.67083
      EIN(3)=16.71538
      EIN(4)=16.84805
      EIN(5)=18.38162
      EIN(6)=18.55511
      EIN(7)=18.57583
      EIN(8)=18.61270
      EIN(9)=18.63679
      EIN(10)=18.69336
      EIN(11)=18.70407
      EIN(12)=18.71138
      EIN(13)=18.72638
      EIN(14)=18.96595
      EIN(15)=19.66403
      EIN(16)=19.68819
      EIN(17)=19.76060
      EIN(18)=19.77977
      EIN(19)=20.02464
      EIN(20)=20.02644
      EIN(21)=20.03465
      EIN(22)=20.03487
      EIN(23)=20.03675
      EIN(24)=20.04039
      EIN(25)=20.04820
      EIN(26)=20.04842
      EIN(27)=20.13611
      EIN(28)=20.13629
      EIN(29)=20.13751
      EIN(30)=20.13946
      EIN(31)=20.14965
      EIN(32)=20.25918
      EIN(33)=20.36885
      EIN(34)=20.57056
      EIN(35)=20.66277
      EIN(36)=20.70230
      EIN(37)=20.70871
      EIN(38)=20.80551
      EIN(39)=20.94928
      EIN(40)=21.01388
      EIN(41)=21.01743
      EIN(42)=21.04354
      EIN(43)=21.11401
      EIN(44)=21.14638
      EIN(45)=21.18286
      EIN(46)=0.0
#*****************************************************************
# ENTER PENNING TRANSFER FRACTION FOR EACH LEVEL
# PENNING TRANSFER EFFICIENCY IN NEON MIXTURES BETWEEN 0.3 AND 0.6
      DO 50 NL=1,NIN
      PENFRA[1,NL]=0.5
# PENNING TRANSFER DISTANCE IN MICRONS
      PENFRA[2,NL]=1.0
# PENNING TRANSFER TIME IN PICOSECONDS
   50 PENFRA[3,NL]=1.0
#----------------------------------------------------------------
# HORNBECK MOLNAR MOD  (THRESHOLD 20.3 EV)
# IF PURE GAS SET TO 0.0 FOR FIRST 32 LEVELS 0.3 FOR OTHER LEVELS
#     DO 51 NL=1,32  
#  51 PENFRA(1,NL)=0.0
#*****************************************************************
      if(IPEN == 0):
 GO TO 4 
      DO 3 KDUM=1,NIN
      if(PENFRA[1,KDUM] == 0.0):
 GO TO 3
      WRITE(6,999) NAME,EIN(KDUM),PENFRA[1,KDUM],PENFRA[2,KDUM],PENFRA[3,KDUM]
  999 print(' GAS = ',A15,' ENERGY LEVEL = ','%.4f' %,' EV.',/,' PENNING PROBABILITY =','%.3f' % ,' ABS.LENGTH =',F7.2,' DECAY TIME =',F7.1,/)    
    3 CONTINUE
#*****************************************************************
    4 DO 5 NL=1,NIN
      DO 651 I=1,20000
      if(EG[I]:
 > EIN(NL)) :
       IOFFN(NL)=I-1
       GO TO 5
      # endif
  651 CONTINUE
    5 CONTINUE
      SCRPT[1]='                                                  '
      SCRPT(2)=' ELASTIC    ANISOTROPIC         NEON              '     
      if(NANISO == 0):
 :
       SCRPT(2)=' ELASTIC   ISOTROPIC           NEON              '     
      # endif
      SCRPT(3)=' IONISATION CHARGE STATE=1         ELOSS= 21.56454'
      SCRPT(4)=' IONISATION CHARGE STATE=2         ELOSS= 62.5275 '
      SCRPT(5)=' IONISATION CHARGE STATE=3         ELOSS=125.9508 '
      SCRPT(6)=' IONISATION   NEON   K-SHELL       ELOSS=870.2    '
      SCRPT(7)=' ATTACHMENT                                       ' 
      SCRPT(8)='                                                  '
      SCRPT(9)='                                                  '
      SCRPT(10)='EX   1S5      J=2    METASTABLE     ELVL= 16.61907'
      SCRPT(11)='EX   1S4      J=1    RESONANT       ELVL= 16.67083'
      SCRPT(12)='EX   1S3      J=0    METASTABLE     ELVL= 16.71538'
      SCRPT(13)='EX   1S2      J=1    RESONANT       ELVL= 16.84805'
      SCRPT(14)='EX   2P10     J=1                   ELVL= 18.38162'
      SCRPT(15)='EX   2P9      J=3                   ELVL= 18.55511'
      SCRPT(16)='EX   2P8      J=2                   ELVL= 18.57583'
      SCRPT(17)='EX   2P7      J=1                   ELVL= 18.61270'
      SCRPT(18)='EX   2P6      J=2                   ELVL= 18.63679'
      SCRPT(19)='EX   2P5      J=1                   ELVL= 18.69336'
      SCRPT(20)='EX   2P4      J=2                   ELVL= 18.70407'
      SCRPT(21)='EX   2P3      J=0                   ELVL= 18.71138'
      SCRPT(22)='EX   2P2      J=1                   ELVL= 18.72638'
      SCRPT(23)='EX   2P1      J=0                   ELVL= 18.96595'
      SCRPT(24)='EX   2S5      J=2                   ELVL= 19.66403'
      SCRPT(25)='EX   2S4      J=1   RESONANT        ELVL= 19.68819'
      SCRPT(26)='EX   2S3      J=0                   ELVL= 19.76060'
      SCRPT(27)='EX   2S2      J=1   RESONANT        ELVL= 19.77977'
      SCRPT(28)='EX   3D6      J=0                   ELVL= 20.02464'
      SCRPT(29)='EX   3D5      J=1   RESONANT        ELVL= 20.02644'
      SCRPT(30)='EX   3D4#     J=4                   ELVL= 20.03465'
      SCRPT(31)='EX   3D4      J=3                   ELVL= 20.03487'
      SCRPT(32)='EX   3D3      J=2                   ELVL= 20.03675'
      SCRPT(33)='EX   3D2      J=1   RESONANT        ELVL= 20.04039'
      SCRPT(34)='EX   3D1##    J=2                   ELVL= 20.04820'
      SCRPT(35)='EX   3D1#     J=3                   ELVL= 20.04842'
      SCRPT(36)='EX   3S1####  J=2                   ELVL= 20.13611'
      SCRPT(37)='EX   3S1###   J=3                   ELVL= 20.13629'
      SCRPT(38)='EX   3S1##    J=2                   ELVL= 20.13751'
      SCRPT(39)='EX   3S1#     J=1   RESONANT        ELVL= 20.13946'
      SCRPT(40)='EX SUM OF  3P10-6                   ELVL= 20.14965'
      SCRPT(41)='EX SUM OF  3P5-2                    ELVL= 20.25918'
      SCRPT(42)='EX   3P1      J=0                   ELVL= 20.36885'
      SCRPT(43)='EX   3S4      J=1   RESONANT        ELVL= 20.57056'
      SCRPT(44)='EX   3S2      J=1   RESONANT        ELVL= 20.66277'
      SCRPT(45)='EX   4D5      J=1   RESONANT        ELVL= 20.70230'
      SCRPT(46)='EX   4D2      J=1   RESONANT        ELVL= 20.70871'
      SCRPT(47)='EX   4S1#     J=1   RESONANT        ELVL= 20.80551'
      SCRPT(48)='EX   4S4      J=1   RESONANT        ELVL= 20.94928'
      SCRPT(49)='EX   5D5      J=1   RESONANT        ELVL= 21.01388'
      SCRPT(50)='EX   5D2      J=1   RESONANT        ELVL= 21.01743'
      SCRPT(51)='EX   4S2      J=1   RESONANT        ELVL= 21.04354'
      SCRPT(52)='EX   5S1#     J=1   RESONANT        ELVL= 21.11401'
      SCRPT(53)='EX SUM HIGHER S     RESONANT        ELVL= 21.14638'
      SCRPT(54)='EX SUM HIGHER D     RESONANT        ELVL= 21.18286'
      SCRPT(55)=' BREMSSTRAHLUNG FROM NEON ATOM                    '
# PARAMETERS OF PHASE SHIFT ANALYSIS                         
      APOL=2.672                                                        
      LMAX=100                                                          
      AA=0.2135                                                         
      DD=3.86                                                           
      FF=-2.656                                                         
      A1=1.846                                                          
      B1=3.29                                                           
      A2=-0.037
#       
#     EN=-ESTEP/2.00                                    
      DO 9000 I=1,NSTEP 
      EN=EG[I]                                                
#     EN=EN+ESTEP
      if(EN > EIN[1]:
) :
       GAMMA1=(EMASS2+2.00*EN)/EMASS2
       GAMMA2=GAMMA1*GAMMA1
       BETA=math.sqrt(1.00-1.00/GAMMA2)
       BETA2=BETA*BETA
      # endif                                                       
      if(EN > 1.0):
 GO TO 7                                           
      if(EN == 0.0):
 QELA=0.161D-16                                    
      if(EN == 0.0):
 QMOM=0.161D-16                                    
      if(EN == 0.0):
 GO TO 12                                            
      AK=math.sqrt(EN/ARY)
      AK2=AK*AK
      AK3=AK2*AK
      AK4=AK3*AK
      AK5=AK4*AK                                                   
      AN0=-AA*AK*(1.0+(4.0*APOL/3.0)*AK2*math.log(AK))-(API*APOL/3.0)*AK2+DD*AK3+FF*AK4                                               
      AN1=((API/15.0)*APOL*AK2-A1*AK3)/(1.0+B1*AK2)
      AN2=API*APOL*AK2/105.0-A2*AK5                
      ANHIGH=AN2      
      SUM=(DSIN(AN0-AN1))**2                                            
      SUM=SUM+2.0*(DSIN(AN1-AN2))**2               
      SIGEL=(DSIN(AN0))**2+3.0*(DSIN(AN1))**2                      
      DO 6 J=2,LMAX-1                             
      ANLOW=ANHIGH
      ANHIGH=API*APOL*AK2/((2.*J+5.0)*(2.*J+3.0)*(2.*J+1.0))            
      SUMI=6.0/((2.0*J+5.0)*(2.0*J+3.0)*(2.0*J+1.0)*(2.0*J-1.0))        
      SUM=SUM+(J+1.0)*(DSIN(API*APOL*AK2*SUMI))**2 
      SIGEL=SIGEL+(2.0*J+1.0)*(DSIN(ANLOW))**2                    
    6 CONTINUE
      QELA=SIGEL*4.0*PIR2/AK2                                           
      QMOM=SUM*4.0*PIR2/AK2                                       
      GO TO 12   
    7 CONTINUE
      DO 8 J=2,NEL                                                    
      if(EN <= XEL[J]:
) GO TO 9                                        
    8 CONTINUE                                                          
      J=NEL                                                             
    9 A=(YEL[J]-YEL(J-1))/(XEL[J]-XEL(J-1))                         
      B=(XEL(J-1)*YEL[J]-XEL[J]*YEL(J-1))/(XEL(J-1)-XEL[J])         
      QELA=(A*EN+B)*1.0D-16                                           
      DO 10 J=2,NDATA                                                  
      if(EN <= XEN[J]:
) GO TO 11                                        
   10 CONTINUE                                                          
      J=NDATA                                                           
   11 A=(YXSEC[J]-YXSEC(J-1))/(XEN[J]-XEN(J-1))                         
      B=(XEN(J-1)*YXSEC[J]-XEN[J]*YXSEC(J-1))/(XEN(J-1)-XEN[J])         
      QMOM=(A*EN+B)*1.0D-16                                           
   12 CONTINUE         
      PQ1=0.5+(QELA-QMOM)/QELA
      DO 13 J=2,NEPSI
      if(EN <= XEPS[J]:
) GO TO 14
   13 CONTINUE
      J=NEPSI
   14 A=(YEPS[J]-YEPS(J-1))/(XEPS[J]-XEPS(J-1))
      B=(XEPS(J-1)*YEPS[J]-XEPS[J]*YEPS(J-1))/(XEPS(J-1)-XEPS[J])
      PQ2=A*EN+B
# EPSILON =1.0-YEPS
      PQ2=1.00-PQ2
      if(NANISO == 1):
 PEQEL(2,I)=PQ1
      if(NANISO == 2):
 PEQEL(2,I)=PQ2
      Q(2,I)=QELA                   
      if(NANISO == 0):
 :
       Q(2,I)=QMOM
       PEQEL(2,I)=0.5
      # endif   
#
# IONISATION FOR CHARGE STATE =1
      QION(1,I)=0.00    
      PEQION(1,I)=0.50   
      if(NANISO == 2):
 PEQION(1,I)=0.00                                
      if(EN <= EION[1]:
) GO TO 129 
      if(EN > XION(NIOND):
) GO TO 121 
      DO 110 J=2,NIOND                                                  
      if(EN <= XION[J]:
) GO TO 120                                       
  110 CONTINUE                                                          
      J=NIOND                                                           
  120 A=(YIN1[J]-YIN1(J-1))/(XION[J]-XION(J-1))                         
      B=(XION(J-1)*YIN1[J]-XION[J]*YIN1(J-1))/(XION(J-1)-XION[J])       
      QION(1,I)=(A*EN+B)*1.0D-16               
      GO TO 122
# USE BORN BETHE X-SECTION ABOVE XION(NIOND) EV
  121 AX2=1.00/BETA2
      AX1=AX2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(1,I)=CONST*(AM2*(AX1-DEN[I]/2.0)+C*AX2)*0.9594
  122 CONTINUE                     
# USE ANISOTROPIC SCATTERING FOR PRIMARY IONISATION ELECTRON FOR
# ENERGIES ABOVE 2 * IONISATION ENERGY
# ANISOTROPIC ANGULAR DISTRIBUTION SAME AS ELASTIC AT ENERGY OFF SET BY
# THE IONISATION ENERGY
      if(EN <= (2.0*EION[1]:
)) GO TO 129
      PEQION(1,I)=PEQEL(2,(I-IOFFION[1]))
#
# IONISATION FOR CHARGE STATE =2
  129 QION(2,I)=0.00    
      PEQION(2,I)=0.50   
      if(NANISO == 2):
 PEQION(2,I)=0.00                                
      if(EN <= EION(2):
) GO TO 149 
      if(EN > XIN2(NION2):
) GO TO 141 
      DO 130 J=2,NION2                                                  
      if(EN <= XIN2[J]:
) GO TO 140                                       
  130 CONTINUE                                                          
      J=NION2                                                           
  140 A=(YIN2[J]-YIN2(J-1))/(XIN2[J]-XIN2(J-1))                         
      B=(XIN2(J-1)*YIN2[J]-XIN2[J]*YIN2(J-1))/(XIN2(J-1)-XIN2[J])       
      QION(2,I)=(A*EN+B)*1.0D-16               
      GO TO 142
# USE BORN BETHE X-SECTION ABOVE XIN2(NION2) EV
  141 AX2=1.00/BETA2
      AX1=AX2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(2,I)=CONST*(AM2*(AX1-DEN[I]/2.0)+C*AX2)*0.0388
  142 CONTINUE                     
# USE ANISOTROPIC SCATTERING FOR PRIMARY IONISATION ELECTRON FOR
# ENERGIES ABOVE 2 * IONISATION ENERGY
# ANISOTROPIC ANGULAR DISTRIBUTION SAME AS ELASTIC AT ENERGY OFF SET BY
# THE IONISATION ENERGY
      if(EN <= (2.0*EION(2):
)) GO TO 149
      PEQION(2,I)=PEQEL(2,(I-IOFFION(2)))
#
# IONISATION FOR CHARGE STATE =3
  149 QION(3,I)=0.00    
      PEQION(3,I)=0.50   
      if(NANISO == 2):
 PEQION(3,I)=0.00                                
      if(EN <= EION(3):
) GO TO 169 
      if(EN > XIN3(NION3):
) GO TO 161 
      DO 150 J=2,NION3                                                  
      if(EN <= XIN3[J]:
) GO TO 160                                       
  150 CONTINUE                                                          
      J=NION3                                                           
  160 A=(YIN3[J]-YIN3(J-1))/(XIN3[J]-XIN3(J-1))                         
      B=(XIN3(J-1)*YIN3[J]-XIN3[J]*YIN3(J-1))/(XIN3(J-1)-XIN3[J])       
      QION(3,I)=(A*EN+B)*1.0D-16               
      GO TO 162
# USE BORN BETHE X-SECTION ABOVE XIN3(NION3) EV
  161 AX2=1.00/BETA2
      AX1=AX2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(3,I)=CONST*(AM2*(AX1-DEN[I]/2.0)+C*AX2)*0.00215
  162 CONTINUE                     
# USE ANISOTROPIC SCATTERING FOR PRIMARY IONISATION ELECTRON FOR
# ENERGIES ABOVE 2 * IONISATION ENERGY
# ANISOTROPIC ANGULAR DISTRIBUTION SAME AS ELASTIC AT ENERGY OFF SET BY
# THE IONISATION ENERGY
      if(EN <= (2.0*EION(3):
)) GO TO 169
      PEQION(3,I)=PEQEL(2,(I-IOFFION(3)))
#
# CALCULATE K-SHELL IONISATION
  169 QION(4,I)=0.00
      PEQION(4,I)=0.50
      if(NANISO == 2):
 PEQION(4,I)=0.0
      if(EN <= EION(4):
) GO TO 198
      DO 192 J=2,NKSH
      if(EN <= XKSH[J]:
) GO TO 193
  192 CONTINUE
      J=NKSH
  193 A=(YKSH[J]-YKSH(J-1))/(XKSH[J]-XKSH(J-1))
      B=(XKSH(J-1)*YKSH[J]-XKSH[J]*YKSH(J-1))/(XKSH(J-1)-XKSH[J])
      QION(4,I)=(A*EN+B)*1.D-16
      PEQION(4,I)=PEQEL(2,(I-IOFFION(4)))
  198 CONTINUE
# ATTACHMENT             
      Q(4,I)=0.00 
# COUNTING IONISATION                                                     
      Q(5,I)=0.00   
      PEQEL(5,I)=0.50
      if(NANISO == 2):
 PEQEL(5,I)=0.00
      if(EN <= E(3):
) GO TO 242
      if(EN > XION(NIOND):
) GO TO 241
      DO 230 J=2,NIOND
      if(EN <= XION[J]:
) GO TO 240
  230 CONTINUE
      J=NIOND
  240 A=(YINC[J]-YINC(J-1))/(XION[J]-XION(J-1))
      B=(XION(J-1)*YINC[J]-XION[J]*YINC(J-1))/(XION(J-1)-XION[J])
      Q(5,I)=(A*EN+B)*1.0D-16
      GO TO 242
# USE BORN BETHE X-SECTION ABOVE XION(NIOND) EV
  241 Q(5,I)=CONST*(AM2*(AX1-DEN[I]/2.0)+C*AX2)
  242 CONTINUE  
# CORRECTION TO CHARGE STATE 1 2 AND 3 X-SECTION FOR K SHELL 
# GIVES TOTAL IONISATION EQUAL TO OSCILLATOR SUM
      if(Q(5,I):
 == 0.0) :
       QCORR=1.0
      else:
       QCORR=(Q(5,I)-QION(4,I))/Q(5,I)
      # endif                           
      QION(1,I)=QION(1,I)*QCORR
      QION(2,I)=QION(2,I)*QCORR
      QION(3,I)=QION(3,I)*QCORR 
#                     
      Q(6,I)=0.00     
#
      DO 251 NL=1,NIN+1
      QIN(NL,I)=0.00
      PEQIN(NL,I)=0.50
      if(NANISO == 2):
 :
       PEQIN(NL,I)=0.00
      # endif
  251 CONTINUE
#                                                 
# 1S5 METASTABLE LEVEL                                                      
      if(EN <= EIN[1]:
) GO TO 2000  
      if(EN > X1S5(N1S5):
) GO TO 311                                 
      DO 300 J=2,N1S5                                                  
      if(EN <= X1S5[J]:
) GO TO 310                                       
  300 CONTINUE                                                          
      J=N1S5                                                           
  310 A=(Y1S5[J]-Y1S5(J-1))/(X1S5[J]-X1S5(J-1))                         
      B=(X1S5(J-1)*Y1S5[J]-X1S5[J]*Y1S5(J-1))/(X1S5(J-1)-X1S5[J])       
      QIN(1,I)=(A*EN+B)*1.0D-18
      GO TO 312 
# IF ENERGY GT X1S5(N1S5) EV SCALE BY 1/E**3
  311 QIN(1,I)=Y1S5(N1S5)*(X1S5(N1S5)/EN)**3*1.0D-18  
  312 if(EN <= (2.0*EIN[1])) GO TO 320
      PEQIN(1,I)=PEQEL(2,(I-IOFFN[1]))
#
# 1S4 RESONANCE LEVEL  F=0.0118
  320 if(EN <= EIN(2)) GO TO 2000  
      if(EN > X1S4(N1S4):
) GO TO 341                                   
      DO 330 J=2,N1S4                                                 
      if(EN <= X1S4[J]:
) GO TO 340                                       
  330 CONTINUE                                                          
      J=N1S4                                                           
  340 A=(Y1S4[J]-Y1S4(J-1))/(X1S4[J]-X1S4(J-1))                         
      B=(X1S4(J-1)*Y1S4[J]-X1S4[J]*Y1S4(J-1))/(X1S4(J-1)-X1S4[J])       
      QIN(2,I)=(A*EN+B)*1.0D-18
      GO TO 342
# IF ENERGY GT X1S4(N1S4) EV USE BEF SCALING
  341 QIN(2,I)=0.0118/(EIN(2)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(2)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(2)+E(3))   
      QIN(2,I)=abs(QIN(2,I))
  342 if(EN <= (2.0*EIN(2))) GO TO 350 
      PEQIN(2,I)=PEQEL(2,(I-IOFFN(2)))                         
# 1S3 METASTABLE LEVEL
  350 if(EN <= EIN(3)) GO TO 2000 
      if(EN > X1S3(N1S3):
) GO TO 371  
      DO 360 J=2,N1S3                                                   
      if(EN <= X1S3[J]:
) GO TO 370                                       
  360 CONTINUE                                                          
      J=N1S3                                                           
  370 A=(Y1S3[J]-Y1S3(J-1))/(X1S3[J]-X1S3(J-1))                         
      B=(X1S3(J-1)*Y1S3[J]-X1S3[J]*Y1S3(J-1))/(X1S3(J-1)-X1S3[J])       
      QIN(3,I)=(A*EN+B)*1.0D-18
      GO TO 372
# IF ENERGY GT X1S3(N1S3) EV SCALE BY 1/E**3
  371 QIN(3,I)=Y1S3(N1S3)*(X1S3(N1S3)/EN)**3*1.D-18 
  372 if(EN <= (2.0*EIN(3))) GO TO 380
      PEQIN(3,I)=PEQEL(2,(I-IOFFN(3)))    
# 1S2 RESONANCE LEVEL F=0.159
  380 if(EN <= EIN(4)) GO TO 2000 
      if(EN > X1S2(N1S2):
) GO TO 401
      DO 390 J=2,N1S2                                                   
      if(EN <= X1S2[J]:
) GO TO 400                                       
  390 CONTINUE                                                          
      J=N1S2                                                           
  400 A=(Y1S2[J]-Y1S2(J-1))/(X1S2[J]-X1S2(J-1))                         
      B=(X1S2(J-1)*Y1S2[J]-X1S2[J]*Y1S2(J-1))/(X1S2(J-1)-X1S2[J])       
      QIN(4,I)=(A*EN+B)*1.0D-18
      GO TO 402
# IF ENERGY GT X1S2(N1S2) EV USE BEF SCALING
  401 QIN(4,I)=0.1590/(EIN(4)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(4)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(4)+E(3))  
      QIN(4,I)=abs(QIN(4,I))
  402 if(EN <= (2.0*EIN(4))) GO TO 410
      PEQIN(4,I)=PEQEL(2,(I-IOFFN(4)))                                
# 2P10 
  410 if(EN <= EIN(5)) GO TO 2000   
      if(EN > X2P10(N2P10):
) GO TO 431
      DO 420 J=2,N2P10                                                  
      if(EN <= X2P10[J]:
) GO TO 430                                 
  420 CONTINUE                                                          
      J=N2P10                                                           
  430 A=(Y2P10[J]-Y2P10(J-1))/(X2P10[J]-X2P10(J-1))                   
      B=(X2P10(J-1)*Y2P10[J]-X2P10[J]*Y2P10(J-1))/(X2P10(J-1)-X2P10[J])
      QIN(5,I)=(A*EN+B)*1.0D-18       
      GO TO 432
# IF ENERGY GT X2P10(N2P10) EV SCALE BY 1/E**2
  431 QIN(5,I)=Y2P10(N2P10)*(X2P10(N2P10)/EN)**2*1.D-18       
  432 if(EN <= (2.0*EIN(5))) GO TO 440
      PEQIN(5,I)=PEQEL(2,(I-IOFFN(5)))                          
# 2P9
  440 if(EN <= EIN(6)) GO TO 2000  
      if(EN > X2P9(N2P9):
) GO TO 461                           
      DO 450 J=2,N2P9                                                  
      if(EN <= X2P9[J]:
) GO TO 460                                       
  450 CONTINUE                                                          
      J=N2P9                                                           
  460 A=(Y2P9[J]-Y2P9(J-1))/(X2P9[J]-X2P9(J-1))                         
      B=(X2P9(J-1)*Y2P9[J]-X2P9[J]*Y2P9(J-1))/(X2P9(J-1)-X2P9[J])       
      QIN(6,I)=(A*EN+B)*1.0D-18        
      GO TO 462
# IF ENERGY GT X2P9(N2P9) EV  SCALE BY 1/E**2
  461 QIN(6,I)=Y2P9(N2P9)*(X2P9(N2P9)/EN)**2*1.D-18       
  462 if(EN <= (2.0*EIN(6))) GO TO 470
      PEQIN(6,I)=PEQEL(2,(I-IOFFN(6)))                               
# 2P8
  470 if(EN <= EIN(7)) GO TO 2000 
      if(EN > X2P8(N2P8):
) GO TO 491                                   
      DO 480 J=2,N2P8                                                  
      if(EN <= X2P8[J]:
) GO TO 490                                      
  480 CONTINUE                                                          
      J=N2P8                                                          
  490 A=(Y2P8[J]-Y2P8(J-1))/(X2P8[J]-X2P8(J-1))                         
      B=(X2P8(J-1)*Y2P8[J]-X2P8[J]*Y2P8(J-1))/(X2P8(J-1)-X2P8[J])       
      QIN(7,I)=(A*EN+B)*1.0D-18          
      GO TO 492
# IF ENERGY GT X2P8(N2P8) EV  SCALE BY 1/E
  491 QIN(7,I)=Y2P8(N2P8)*(X2P8(N2P8)/EN)*1.D-18       
  492 if(EN <= (2.0*EIN(7))) GO TO 500 
      PEQIN(7,I)=PEQEL(2,(I-IOFFN(7)))                    
# 2P7
  500 if(EN <= EIN(8)) GO TO 2000 
      if(EN > X2P7(N2P7):
) GO TO 521                                  
      DO 510 J=2,N2P7                                                  
      if(EN <= X2P7[J]:
) GO TO 520                                       
  510 CONTINUE                                                          
      J=N2P7                                                           
  520 A=(Y2P7[J]-Y2P7(J-1))/(X2P7[J]-X2P7(J-1))                         
      B=(X2P7(J-1)*Y2P7[J]-X2P7[J]*Y2P7(J-1))/(X2P7(J-1)-X2P7[J])       
      QIN(8,I)=(A*EN+B)*1.0D-18           
      GO TO 522
# IF ENERGY GT X2P7(N2P7) EV SCALE BY 1/E**2
  521 QIN(8,I)=Y2P7(N2P7)*(X2P7(N2P7)/EN)**2*1.D-18          
  522 if(EN <= (2.0*EIN(8))) GO TO 530
      PEQIN(8,I)=PEQEL(2,(I-IOFFN(8)))                                
# 2P6
  530 if(EN <= EIN(9)) GO TO 2000   
      if(EN > X2P6(N2P6):
) GO TO 551                                 
      DO 540 J=2,N2P6                                                  
      if(EN <= X2P6[J]:
) GO TO 550                                       
  540 CONTINUE                                                          
      J=N2P6                                                           
  550 A=(Y2P6[J]-Y2P6(J-1))/(X2P6[J]-X2P6(J-1))                         
      B=(X2P6(J-1)*Y2P6[J]-X2P6[J]*Y2P6(J-1))/(X2P6(J-1)-X2P6[J])       
      QIN(9,I)=(A*EN+B)*1.0D-18          
      GO TO 552
# IF ENERGY GT X2P6(N2P6) EV   SCALE BY 1/E
  551 QIN(9,I)=Y2P6(N2P6)*(X2P6(N2P6)/EN)*1.D-18         
  552 if(EN <= (2.0*EIN(9))) GO TO 560
      PEQIN(9,I)=PEQEL(2,(I-IOFFN(9)))                                  
# 2P5
  560 if(EN <= EIN(10)) GO TO 2000   
      if(EN > X2P5(N2P5):
) GO TO 581                                 
      DO 570 J=2,N2P5                                                  
      if(EN <= X2P5[J]:
) GO TO 580                                       
  570 CONTINUE                                                          
      J=N2P5                                                           
  580 A=(Y2P5[J]-Y2P5(J-1))/(X2P5[J]-X2P5(J-1))                         
      B=(X2P5(J-1)*Y2P5[J]-X2P5[J]*Y2P5(J-1))/(X2P5(J-1)-X2P5[J])       
      QIN(10,I)=(A*EN+B)*1.0D-18         
      GO TO 582
# IF ENERGY GT X2P5(N2P5) EV   SCALE BY 1/E**2
  581 QIN(10,I)=Y2P5(N2P5)*(X2P5(N2P5)/EN)**2*1.D-18         
  582 if(EN <= (2.0*EIN(10))) GO TO 590
      PEQIN(10,I)=PEQEL(2,(I-IOFFN(10)))                                
# 2P4 
  590 if(EN <= EIN(11)) GO TO 2000   
      if(EN > X2P4(N2P4):
) GO TO 611                                 
      DO 600 J=2,N2P4                                                  
      if(EN <= X2P4[J]:
) GO TO 610                                       
  600 CONTINUE                                                          
      J=N2P4                                                           
  610 A=(Y2P4[J]-Y2P4(J-1))/(X2P4[J]-X2P4(J-1))                         
      B=(X2P4(J-1)*Y2P4[J]-X2P4[J]*Y2P4(J-1))/(X2P4(J-1)-X2P4[J])       
      QIN(11,I)=(A*EN+B)*1.0D-18          
      GO TO 612
# IF ENERGY GT X2P4(N2P4) EV   SCALE BY 1/E   
  611 QIN(11,I)=Y2P4(N2P4)*(X2P4(N2P4)/EN)*1.D-18           
  612 if(EN <= (2.0*EIN(11))) GO TO 620
      PEQIN(11,I)=PEQEL(2,(I-IOFFN(11)))                                
# 2P3 
  620 if(EN <= EIN(12)) GO TO 2000   
      if(EN > X2P3(N2P3):
) GO TO 641                                 
      DO 630 J=2,N2P3                                                  
      if(EN <= X2P3[J]:
) GO TO 640                                       
  630 CONTINUE                                                          
      J=N2P3                                                           
  640 A=(Y2P3[J]-Y2P3(J-1))/(X2P3[J]-X2P3(J-1))                         
      B=(X2P3(J-1)*Y2P3[J]-X2P3[J]*Y2P3(J-1))/(X2P3(J-1)-X2P3[J])       
      QIN(12,I)=(A*EN+B)*1.0D-18          
      GO TO 642
# IF ENERGY GT X2P3(N2P3) EV   SCALE BY 1/E   
  641 QIN(12,I)=Y2P3(N2P3)*(X2P3(N2P3)/EN)*1.D-18         
  642 if(EN <= (2.0*EIN(12))) GO TO 650
      PEQIN(12,I)=PEQEL(2,(I-IOFFN(12)))                                
# 2P2 
  650 if(EN <= EIN(13)) GO TO 2000   
      if(EN > X2P2(N2P2):
) GO TO 671                                 
      DO 660 J=2,N2P2                                                  
      if(EN <= X2P2[J]:
) GO TO 670                                       
  660 CONTINUE                                                          
      J=N2P2                                                           
  670 A=(Y2P2[J]-Y2P2(J-1))/(X2P2[J]-X2P2(J-1))                         
      B=(X2P2(J-1)*Y2P2[J]-X2P2[J]*Y2P2(J-1))/(X2P2(J-1)-X2P2[J])       
      QIN(13,I)=(A*EN+B)*1.0D-18            
      GO TO 672
# IF ENERGY GT X2P2(N2P2) EV   SCALE BY 1/E**2
  671 QIN(13,I)=Y2P2(N2P2)*(X2P2(N2P2)/EN)**2*1.D-18         
  672 if(EN <= (2.0*EIN(13))) GO TO 680
      PEQIN(13,I)=PEQEL(2,(I-IOFFN(13)))                                
# 2P1 
  680 if(EN <= EIN(14)) GO TO 2000   
      if(EN > X2P1(N2P1):
) GO TO 701                                 
      DO 690 J=2,N2P1                                                  
      if(EN <= X2P1[J]:
) GO TO 700                                       
  690 CONTINUE                                                          
      J=N2P1                                                           
  700 A=(Y2P1[J]-Y2P1(J-1))/(X2P1[J]-X2P1(J-1))                         
      B=(X2P1(J-1)*Y2P1[J]-X2P1[J]*Y2P1(J-1))/(X2P1(J-1)-X2P1[J])       
      QIN(14,I)=(A*EN+B)*1.0D-18           
      GO TO 702
# IF ENERGY GT X2P1(N2P1) EV   SCALE BY 1/E   
  701 QIN(14,I)=Y2P1(N2P1)*(X2P1(N2P1)/EN)*1.D-18          
  702 if(EN <= (2.0*EIN(14))) GO TO 710
      PEQIN(14,I)=PEQEL(2,(I-IOFFN(14)))                                
# 2S5  
  710 if(EN <= EIN(15)) GO TO 2000   
      if(EN > X2S5(N2S5):
) GO TO 731                                 
      DO 720 J=2,N2S5                                                  
      if(EN <= X2S5[J]:
) GO TO 730                                       
  720 CONTINUE                                                          
      J=N2S5                                                           
  730 A=(Y2S5[J]-Y2S5(J-1))/(X2S5[J]-X2S5(J-1))                         
      B=(X2S5(J-1)*Y2S5[J]-X2S5[J]*Y2S5(J-1))/(X2S5(J-1)-X2S5[J])       
      QIN(15,I)=(A*EN+B)*1.0D-18
      GO TO 732
# IF ENERGY GT X2S5(N2S5) EV   SCALE BY 1/E**2
  731 QIN(15,I)=Y2S5(N2S5)*(X2S5(N2S5)/EN)**2*1.D-18
  732 if(EN <= (2.0*EIN(15))) GO TO 740
      PEQIN(15,I)=PEQEL(2,(I-IOFFN(15)))                                
# 2S4   BEF SCALING
  740 if(EN <= EIN(16)) GO TO 2000
      QIN(16,I)=0.0128/(EIN(16)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(16)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(16)+E(3))   
      QIN(16,I)=abs(QIN(16,I))
      if(EN <= (2.0*EIN(16):
)) GO TO 750 
      PEQIN(16,I)=PEQEL(2,(I-IOFFN(16)))
# 2S3
  750 if(EN <= EIN(17)) GO TO 2000   
      if(EN > X2S3(N2S3):
) GO TO 771                                 
      DO 760 J=2,N2S3                                                  
      if(EN <= X2S3[J]:
) GO TO 770                                       
  760 CONTINUE                                                          
      J=N2S3                                                           
  770 A=(Y2S3[J]-Y2S3(J-1))/(X2S3[J]-X2S3(J-1))                         
      B=(X2S3(J-1)*Y2S3[J]-X2S3[J]*Y2S3(J-1))/(X2S3(J-1)-X2S3[J])       
      QIN(17,I)=(A*EN+B)*1.0D-18
      GO TO 772
# IF ENERGY GT X2S3(N2S3) EV   SCALE BY 1/E**2
  771 QIN(17,I)=Y2S3(N2S3)*(X2S3(N2S3)/EN)**2*1.D-18
  772 if(EN <= (2.0*EIN(17))) GO TO 780
      PEQIN(17,I)=PEQEL(2,(I-IOFFN(17)))                                
# 2S2   BEF SCALING
  780 if(EN <= EIN(18)) GO TO 2000
      QIN(18,I)=0.0166/(EIN(18)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(18)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(18)+E(3)) 
      QIN(18,I)=abs(QIN(18,I))  
      if(EN <= (2.0*EIN(18):
)) GO TO 790 
      PEQIN(18,I)=PEQEL(2,(I-IOFFN(18)))
# 3D6
  790 if(EN <= EIN(19)) GO TO 2000   
      if(EN > X3D6(N3D6):
) GO TO 811                                 
      DO 800 J=2,N3D6                                                  
      if(EN <= X3D6[J]:
) GO TO 810                                       
  800 CONTINUE                                                          
      J=N3D6                                                           
  810 A=(Y3D6[J]-Y3D6(J-1))/(X3D6[J]-X3D6(J-1))                         
      B=(X3D6(J-1)*Y3D6[J]-X3D6[J]*Y3D6(J-1))/(X3D6(J-1)-X3D6[J])       
      QIN(19,I)=(A*EN+B)*1.0D-18
      GO TO 812
# IF ENERGY GT X3D6(N3D6) EV   SCALE BY 1/E**2
  811 QIN(19,I)=Y3D6(N3D6)*(X3D6(N3D6)/EN)**2*1.D-18
  812 if(EN <= (2.0*EIN(19))) GO TO 820
      PEQIN(19,I)=PEQEL(2,(I-IOFFN(19)))                                
# 3D5   BEF SCALING
  820 if(EN <= EIN(20)) GO TO 2000
      QIN(20,I)=0.0048/(EIN(20)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(20)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(20)+E(3)) 
      QIN(20,I)=abs(QIN(20,I))  
      if(EN <= (2.0*EIN(20):
)) GO TO 830 
      PEQIN(20,I)=PEQEL(2,(I-IOFFN(20)))
# 3D4#
  830 if(EN <= EIN(21)) GO TO 2000   
      if(EN > X3D4P(N3D4P):
) GO TO 851                                 
      DO 840 J=2,N3D4P                                                  
      if(EN <= X3D4P[J]:
) GO TO 850                                    
  840 CONTINUE                                                          
      J=N3D4P                                                           
  850 A=(Y3D4P[J]-Y3D4P(J-1))/(X3D4P[J]-X3D4P(J-1))                    
      B=(X3D4P(J-1)*Y3D4P[J]-X3D4P[J]*Y3D4P(J-1))/(X3D4P(J-1)-X3D4P[J])
      QIN(21,I)=(A*EN+B)*1.0D-18
      GO TO 852
# IF ENERGY GT X3D4P(N3D4P) EV   SCALE BY 1/E**2
  851 QIN(21,I)=Y3D4P(N3D4P)*(X3D4P(N3D4P)/EN)**2*1.D-18
  852 if(EN <= (2.0*EIN(21))) GO TO 860
      PEQIN(21,I)=PEQEL(2,(I-IOFFN(21)))                                
# 3D4
  860 if(EN <= EIN(22)) GO TO 2000   
      if(EN > X3D4(N3D4):
) GO TO 881                                 
      DO 870 J=2,N3D4                                                  
      if(EN <= X3D4[J]:
) GO TO 880                                    
  870 CONTINUE                                                          
      J=N3D4                                                           
  880 A=(Y3D4[J]-Y3D4(J-1))/(X3D4[J]-X3D4(J-1))                    
      B=(X3D4(J-1)*Y3D4[J]-X3D4[J]*Y3D4(J-1))/(X3D4(J-1)-X3D4[J])
      QIN(22,I)=(A*EN+B)*1.0D-18
      GO TO 882
# IF ENERGY GT X3D4(N3D4) EV   SCALE BY 1/E**2
  881 QIN(22,I)=Y3D4(N3D4)*(X3D4(N3D4)/EN)**2*1.D-18
  882 if(EN <= (2.0*EIN(22))) GO TO 890
      PEQIN(22,I)=PEQEL(2,(I-IOFFN(22)))                                
# 3D3
  890 if(EN <= EIN(23)) GO TO 2000   
      if(EN > X3D3(N3D3):
) GO TO 911                                 
      DO 900 J=2,N3D3                                                  
      if(EN <= X3D3[J]:
) GO TO 910                                    
  900 CONTINUE                                                          
      J=N3D3                                                           
  910 A=(Y3D3[J]-Y3D3(J-1))/(X3D3[J]-X3D3(J-1))                    
      B=(X3D3(J-1)*Y3D3[J]-X3D3[J]*Y3D3(J-1))/(X3D3(J-1)-X3D3[J])
      QIN(23,I)=(A*EN+B)*1.0D-18
      GO TO 912
# IF ENERGY GT X3D3(N3D3) EV   SCALE BY 1/E**2
  911 QIN(23,I)=Y3D3(N3D3)*(X3D3(N3D3)/EN)**2*1.D-18
  912 if(EN <= (2.0*EIN(23))) GO TO 920
      PEQIN(23,I)=PEQEL(2,(I-IOFFN(23)))                                
# 3D2     BEF SCALING
  920 if(EN <= EIN(24)) GO TO 2000
      QIN(24,I)=0.0146/(EIN(24)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(24)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(24)+E(3)) 
      QIN(24,I)=abs(QIN(24,I))  
      if(EN <= (2.0*EIN(24):
)) GO TO 930 
      PEQIN(24,I)=PEQEL(2,(I-IOFFN(24)))
# 3D1##
  930 if(EN <= EIN(25)) GO TO 2000   
      if(EN > X3D1PP(N3D1PP):
) GO TO 951                           
      DO 940 J=2,N3D1PP                                                
      if(EN <= X3D1PP[J]:
) GO TO 950                                    
  940 CONTINUE                                                          
      J=N3D1PP                                                         
  950 A=(Y3D1PP[J]-Y3D1PP(J-1))/(X3D1PP[J]-X3D1PP(J-1))                
      B=(X3D1PP(J-1)*Y3D1PP[J]-X3D1PP[J]*Y3D1PP(J-1))/(X3D1PP(J-1)-X3D1PP[J])
      QIN(25,I)=(A*EN+B)*1.0D-18
      GO TO 952
# IF ENERGY GT X3D1PP(N3D1PP) EV   SCALE BY 1/E**2
  951 QIN(25,I)=Y3D1PP(N3D1PP)*(X3D1PP(N3D1PP)/EN)**2*1.D-18
  952 if(EN <= (2.0*EIN(25))) GO TO 960
      PEQIN(25,I)=PEQEL(2,(I-IOFFN(25)))                                
# 3D1#
  960 if(EN <= EIN(26)) GO TO 2000   
      if(EN > X3D1P(N3D1P):
) GO TO 981                           
      DO 970 J=2,N3D1P                                                
      if(EN <= X3D1P[J]:
) GO TO 980                                    
  970 CONTINUE                                                          
      J=N3D1P                                                         
  980 A=(Y3D1P[J]-Y3D1P(J-1))/(X3D1P[J]-X3D1P(J-1))                
      B=(X3D1P(J-1)*Y3D1P[J]-X3D1P[J]*Y3D1P(J-1))/(X3D1P(J-1)-X3D1P[J])
      QIN(26,I)=(A*EN+B)*1.0D-18
      GO TO 982
# IF ENERGY GT X3D1P(N3D1P) EV   SCALE BY 1/E**2
  981 QIN(26,I)=Y3D1P(N3D1P)*(X3D1P(N3D1P)/EN)**2*1.D-18
  982 if(EN <= (2.0*EIN(26))) GO TO 990
      PEQIN(26,I)=PEQEL(2,(I-IOFFN(26)))                                
# 3S1####
  990 if(EN <= EIN(27)) GO TO 2000   
      if(EN > X3S1PPPP(N3S1PPPP):
) GO TO 1011                      
      DO 1000 J=2,N3S1PPPP                                              
      if(EN <= X3S1PPPP[J]:
) GO TO 1010                                  
 1000 CONTINUE                                                          
      J=N3S1PPPP                                                       
 1010 A=(Y3S1PPPP[J]-Y3S1PPPP(J-1))/(X3S1PPPP[J]-X3S1PPPP(J-1))       
      B=(X3S1PPPP(J-1)*Y3S1PPPP[J]-X3S1PPPP[J]*Y3S1PPPP(J-1))/(X3S1PPPP(J-1)-X3S1PPPP[J])
      QIN(27,I)=(A*EN+B)*1.0D-18
      GO TO 1012
# IF ENERGY GT X3S1PPPP(N3S1PPPP) EV   SCALE BY 1/E**2
 1011 QIN(27,I)=Y3S1PPPP(N3S1PPPP)*(X3S1PPPP(N3S1PPPP)/EN)**2*1.D-18
 1012 if(EN <= (2.0*EIN(27))) GO TO 1020
      PEQIN(27,I)=PEQEL(2,(I-IOFFN(27)))                                
# 3S1###
 1020 if(EN <= EIN(28)) GO TO 2000   
      if(EN > X3S1PPP(N3S1PPP):
) GO TO 1041                           
      DO 1030 J=2,N3S1PPP                                             
      if(EN <= X3S1PPP[J]:
) GO TO 1040                                 
 1030 CONTINUE                                                          
      J=N3S1PPP                                                         
 1040 A=(Y3S1PPP[J]-Y3S1PPP(J-1))/(X3S1PPP[J]-X3S1PPP(J-1))            
      B=(X3S1PPP(J-1)*Y3S1PPP[J]-X3S1PPP[J]*Y3S1PPP(J-1))/(X3S1PPP(J-1)-X3S1PPP[J])
      QIN(28,I)=(A*EN+B)*1.0D-18
      GO TO 1042
# IF ENERGY GT X3S1PPP(N3S1PPP) EV   SCALE BY 1/E**2
 1041 QIN(28,I)=Y3S1PPP(N3S1PPP)*(X3S1PPP(N3S1PPP)/EN)**2*1.D-18
 1042 if(EN <= (2.0*EIN(28))) GO TO 1050
      PEQIN(28,I)=PEQEL(2,(I-IOFFN(28)))                                
# 3S1##
 1050 if(EN <= EIN(29)) GO TO 2000   
      if(EN > X3S1PP(N3S1PP):
) GO TO 1071                           
      DO 1060 J=2,N3S1PP                                              
      if(EN <= X3S1PP[J]:
) GO TO 1070                                    
 1060 CONTINUE                                                          
      J=N3S1PP                                                         
 1070 A=(Y3S1PP[J]-Y3S1PP(J-1))/(X3S1PP[J]-X3S1PP(J-1))                
      B=(X3S1PP(J-1)*Y3S1PP[J]-X3S1PP[J]*Y3S1PP(J-1))/(X3S1PP(J-1)-X3S1PP[J])
      QIN(29,I)=(A*EN+B)*1.0D-18
      GO TO 1072
# IF ENERGY GT X3S1PP(N3S1PP) EV   SCALE BY 1/E**2
 1071 QIN(29,I)=Y3S1PP(N3S1PP)*(X3S1PP(N3S1PP)/EN)**2*1.D-18
 1072 if(EN <= (2.0*EIN(29))) GO TO 1080
      PEQIN(29,I)=PEQEL(2,(I-IOFFN(29)))                                
# 3S1#   BEF SCALING
 1080 if(EN <= EIN(30)) GO TO 2000
      QIN(30,I)=0.00676/(EIN(30)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(30)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(30)+E(3))  
      QIN(30,I)=abs(QIN(30,I)) 
      if(EN <= (2.0*EIN(30):
)) GO TO 1090 
      PEQIN(30,I)=PEQEL(2,(I-IOFFN(30)))
# SUM 3P10--3P6
 1090 if(EN <= EIN(31)) GO TO 2000   
      if(EN > X3P106(N3P106):
) GO TO 1111                              
      DO 1100 J=2,N3P106                                               
      if(EN <= X3P106[J]:
) GO TO 1110                                  
 1100 CONTINUE                                                          
      J=N3P106                                                          
 1110 A=(Y3P106[J]-Y3P106(J-1))/(X3P106[J]-X3P106(J-1))                
      B=(X3P106(J-1)*Y3P106[J]-X3P106[J]*Y3P106(J-1))/(X3P106(J-1)-X3P106[J])       
      QIN(31,I)=(A*EN+B)*1.0D-18
      GO TO 1112
# IF ENERGY GT X3P106(N3P106) EV   SCALE BY 1/E**1.5   
 1111 QIN(31,I)=Y3P106(N3P106)*(X3P106(N3P106)/EN)**1.5*1.D-18
 1112 if(EN <= (2.0*EIN(31))) GO TO 1120
      PEQIN(31,I)=PEQEL(2,(I-IOFFN(31)))                                
# SUM 3P5--3P2
 1120 if(EN <= EIN(32)) GO TO 2000   
      if(EN > X3P52(N3P52):
) GO TO 1141                              
      DO 1130 J=2,N3P52                                               
      if(EN <= X3P52[J]:
) GO TO 1140                                  
 1130 CONTINUE                                                          
      J=N3P52                                                          
 1140 A=(Y3P52[J]-Y3P52(J-1))/(X3P52[J]-X3P52(J-1))                
      B=(X3P52(J-1)*Y3P52[J]-X3P52[J]*Y3P52(J-1))/(X3P52(J-1)-X3P52[J])
      QIN(32,I)=(A*EN+B)*1.0D-18
      GO TO 1142
# IF ENERGY GT X3P52(N3P52) EV   SCALE BY 1/E**1.5   
 1141 QIN(32,I)=Y3P52(N3P52)*(X3P52(N3P52)/EN)**1.5*1.D-18
 1142 if(EN <= (2.0*EIN(32))) GO TO 1150
      PEQIN(32,I)=PEQEL(2,(I-IOFFN(32)))                                
# 3P1
 1150 if(EN <= EIN(33)) GO TO 2000   
      if(EN > X3P1(N3P1):
) GO TO 1171                              
      DO 1160 J=2,N3P1                                               
      if(EN <= X3P1[J]:
) GO TO 1170                                  
 1160 CONTINUE                                                          
      J=N3P1                                                          
 1170 A=(Y3P1[J]-Y3P1(J-1))/(X3P1[J]-X3P1(J-1))                
      B=(X3P1(J-1)*Y3P1[J]-X3P1[J]*Y3P1(J-1))/(X3P1(J-1)-X3P1[J])
      QIN(33,I)=(A*EN+B)*1.0D-18
      GO TO 1172
# IF ENERGY GT X3P1(N3P1) EV   SCALE BY 1/E   
 1171 QIN(33,I)=Y3P1(N3P1)*(X3P1(N3P1)/EN)*1.D-18
 1172 if(EN <= (2.0*EIN(33))) GO TO 1180
      PEQIN(33,I)=PEQEL(2,(I-IOFFN(33)))                                
# 3S4     BEF SCALING
 1180 if(EN <= EIN(34)) GO TO 2000
      QIN(34,I)=0.00635/(EIN(34)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(34)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(34)+E(3))   
      QIN(34,I)=abs(QIN(34,I))
      if(EN <= (2.0*EIN(34):
)) GO TO 1190
      PEQIN(34,I)=PEQEL(2,(I-IOFFN(34)))
# 3S2     BEF SCALING
 1190 if(EN <= EIN(35)) GO TO 2000
      QIN(35,I)=0.00440/(EIN(35)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(35)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(35)+E(3))
      QIN(35,I)=abs(QIN(35,I))   
      if(EN <= (2.0*EIN(35):
)) GO TO 1200
      PEQIN(35,I)=PEQEL(2,(I-IOFFN(35)))
# 4D5     BEF SCALING
 1200 if(EN <= EIN(36)) GO TO 2000
      QIN(36,I)=0.00705/(EIN(36)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(36)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(36)+E(3))
      QIN(36,I)=abs(QIN(36,I))   
      if(EN <= (2.0*EIN(36):
)) GO TO 1210
      PEQIN(36,I)=PEQEL(2,(I-IOFFN(36)))
# 4D2     BEF SCALING
 1210 if(EN <= EIN(37)) GO TO 2000
      QIN(37,I)=0.00235/(EIN(37)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(37)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(37)+E(3)) 
      QIN(37,I)=abs(QIN(37,I))  
      if(EN <= (2.0*EIN(37):
)) GO TO 1220
      PEQIN(37,I)=PEQEL(2,(I-IOFFN(37)))
# 4S1#    BEF SCALING
 1220 if(EN <= EIN(38)) GO TO 2000
      QIN(38,I)=0.00435/(EIN(38)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(38)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(38)+E(3)) 
      QIN(38,I)=abs(QIN(38,I))  
      if(EN <= (2.0*EIN(38):
)) GO TO 1230
      PEQIN(38,I)=PEQEL(2,(I-IOFFN(38)))
# 4S4     BEF SCALING
 1230 if(EN <= EIN(39)) GO TO 2000
      QIN(39,I)=0.00325/(EIN(39)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(39)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(39)+E(3))
      QIN(39,I)=abs(QIN(39,I))   
      if(EN <= (2.0*EIN(39):
)) GO TO 1240
      PEQIN(39,I)=PEQEL(2,(I-IOFFN(39)))
# 5D5     BEF SCALING
 1240 if(EN <= EIN(40)) GO TO 2000
      QIN(40,I)=0.00383/(EIN(40)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(40)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(40)+E(3)) 
      QIN(40,I)=abs(QIN(40,I))  
      if(EN <= (2.0*EIN(40):
)) GO TO 1250
      PEQIN(40,I)=PEQEL(2,(I-IOFFN(40)))
# 5D2     BEF SCALING
 1250 if(EN <= EIN(41)) GO TO 2000
      QIN(41,I)=0.00127/(EIN(41)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(41)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(41)+E(3)) 
      QIN(41,I)=abs(QIN(41,I))  
      if(EN <= (2.0*EIN(41):
)) GO TO 1260
      PEQIN(41,I)=PEQEL(2,(I-IOFFN(41)))
# 4S2     BEF SCALING
 1260 if(EN <= EIN(42)) GO TO 2000
      QIN(42,I)=0.00165/(EIN(42)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(42)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(42)+E(3)) 
      QIN(42,I)=abs(QIN(42,I))  
      if(EN <= (2.0*EIN(42):
)) GO TO 1270
      PEQIN(42,I)=PEQEL(2,(I-IOFFN(42)))
# 5S1#    BEF SCALING
 1270 if(EN <= EIN(43)) GO TO 2000
      QIN(43,I)=0.00250/(EIN(43)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(43)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(43)+E(3))   
      QIN(43,I)=abs(QIN(43,I))
      if(EN <= (2.0*EIN(43):
)) GO TO 1280
      PEQIN(43,I)=PEQEL(2,(I-IOFFN(43)))
# SUM HIGHER RESONANCE S STATES
 1280 if(EN <= EIN(44)) GO TO 2000
      QIN(44,I)=0.00962/(EIN(44)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(44)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(44)+E(3))  
      QIN(44,I)=abs(QIN(44,I)) 
      if(EN <= (2.0*EIN(44):
)) GO TO 1290
      PEQIN(44,I)=PEQEL(2,(I-IOFFN(44)))
# SUM HIGHER RESONANCE S STATES
 1290 if(EN <= EIN(45)) GO TO 2000
      QIN(45,I)=0.01695/(EIN(45)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(45)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(45)+E(3))   
      QIN(45,I)=abs(QIN(45,I))
      if(EN <= (2.0*EIN(45):
)) GO TO 2000
      PEQIN(45,I)=PEQEL(2,(I-IOFFN(45)))
# LOAD BREMSSTRAHLUNG X-SECTIONS
      if(EN < 1000.):
 GO TO 2000
      DO 1300 J=2,NBREM
      if(EN <= EBRM[J]:
) GO TO 1310
 1300 CONTINUE
      J=NBREM
 1310 A=(math.log(Z10T[J])-math.log(Z10T(J-1)))/(EBRM[J]-EBRM(J-1))
      B=(math.log(Z10T[J])*EBRM(J-1)-math.log(Z10T(J-1))*EBRM[J])/(EBRM(J-1)-EBRM[J])
      QIN(46,I)=math.exp(A*EN+B)*1.D-24
 2000 CONTINUE 
      QINEL=0.0
      DO 8000 ILVL=1,NIN
 8000 QINEL=QINEL+QIN(ILVL,I)
      Q(1,I)=QELA+QION(1,I)+QION(2,I)+QION(3,I)+QION(4,I)+QINEL+QIN(46,I)
# WRITE TOTAL, COUNTING IONISATION, INELASTIC AND ELASTIC X-SECTIONS
#     WRITE(6,8001) EN,Q(1,I),Q(5,I),QINEL,QELA
#8001 print(3X,' EN=',D12.4,' QTOT=',D12.4,' QION=',D12.4,' QINEL=',
#    /D12.4,' QELA=',D12.4)
 9000 CONTINUE
#  SAVE COMPUTING TIME
      DO 9001 K=1,NIN
      if(EFINAL <= EIN[K]:
) :
       NIN=K-1
       GO TO 9011
      # endif
 9001 CONTINUE
 9011 CONTINUE
      if(EFINAL > 1000.):
 NIN=46
      RETURN                                                            
      # end
      def GAS6(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000)
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]  
      DIMENSION XEN(162),YXSEC(162),XEL(151),YEL(151),XEPS(186),YEPS(186),XION(65),YION(65),YINC(65),YIN1(65),XIN2(41),YIN2(41),XIN3(35),YIN3(35),XIN4(32),YIN4(32),XKSH(74),YKSH(74),XL1S(83),YL1S(83),XL2S(82),YL2S(82),XL3S(84),YL3S(84),XM1S(91),YM1S(91),XM2S(98),YM2S(98),XM3S(99),YM3S(99),XM4S(105),YM4S(105),XM5S(106),YM5S(106),XEXC1(105),YEXC1(105),XEXC2(86),YEXC2(86),X1S5(169),Y1S5(169),YP1S5(169),X1S4(130),Y1S4(130),YP1S4(130),X1S3(168),Y1S3(168),YP1S3(168),X1S2(150),Y1S2(150),YP1S2(150),X2P10(142),Y2P10(142),YP2P10(142),X2P9(117),Y2P9(117),YP2P9(117),X2P8(120),Y2P8(120),YP2P8(120),X2P7(111),Y2P7(111),YP2P7(111),X2P6(100),Y2P6(100),YP2P6(100),X2P5(102),Y2P5(102),YP2P5(102),X3D6(69),Y3D6(69),YP3D6(69),X3D5(75),Y3D5(75),YP3D5(75),X2P4(64),Y2P4(64),YP2P4(64),X3D3(74),Y3D3(74),YP3D3(74),X3D4P(73),Y3D4P(73),YP3D4P(73),X2P3(73),Y2P3(73),YP2P3(73),X2P2(75),Y2P2(75),YP2P2(75),X3D4(59),Y3D4(59),YP3D4(59),X2P1(51),Y2P1(51),YP2P1(51),X3D1PP(48),Y3D1PP(48),YP3D1PP(48),X3D1P(41),Y3D1P(41),YP3D1P(41),X2S5(44),Y2S5(44),YP2S5(44),X3P10(20),Y3P10(20),YP3P10(20),X3P9(20),Y3P9(20),YP3P9(20),X3P8(20),Y3P8(20),YP3P8(20),X3S1PP(20),Y3S1PP(20),YP3S1PP(20),X3P7(20),Y3P7(20),YP3P7(20),X3P6(20),Y3P6(20),YP3P6(20),X3S1PPPP(20),Y3S1PPPP(20),YP3S1PPPP(20),X3S1PPP(20),Y3S1PPP(20),YP3S1PPP(20),X3P5(20),Y3P5(20),YP3P5(20),X4D6(20),Y4D6(20),YP4D6(20),X4D4P(20),Y4D4P(20),YP4D4P(20),X4D4(19),Y4D4(19),YP4D4(19),X4D3(19),Y4D3(19),YP4D3(19),X2S3(19),Y2S3(19),YP2S3(19),X4D1PP(19),Y4D1PP(19),YP4D1PP(19),X4D1P(19),Y4D1P(19),YP4D1P(19),X3S5(19),Y3S5(19),YP3S5(19),X4FS(19),Y4FS(19),YP4FS(19),IOFFN(51),IOFFION(11)   
      DIMENSION Z36T(25),EBRM(25)
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME 
# ELASTIC MOMENTUM TRANSFER                                       
      DATA XEN/1.D-6,.001,.003,.005,.007,0.01,.015,0.02,0.03,0.04,      0.05,0.06,0.07,0.08,0.09,0.10,0.12,0.14,0.17,0.20,                0.25,0.30,0.35,0.40,0.45,0.50,0.52,0.54,0.56,0.60, 0.70,0.80,0.90,1.00,1.20,1.40,1.75,2.00,2.50,3.00,               3.30,3.60,4.00,4.40,4.80,5.20,5.60,6.00,6.50,7.00,      7.50,8.00,8.50,9.00,10.0,11.0,12.0,13.0,14.0,15.0,16.0,20.0,30.0,40.0,50.0,60.0,75.0,100.,150.,200.,300.,400.,500.,700.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,6000.,7000.,8000.,9000.,1.0D4,1.25D4,1.5D4,1.75D4,2.0D4,2.5'%.3f' %.0'%.3f' %.5D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5'%.3f' %.0'%.3f' %.5D5,4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,2.0D6,2.5'%.3f' %.0'%.3f' %.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5'%.3f' %.0'%.3f' %.5D7,4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,1.0D8,1.25D8,1.5D8,1.75D8,2.0D8,2.5'%.3f' %.0'%.3f' %.5D8,4.0D8,4.5D8,5.0D8,6.0D8,7.0D8,8.0D8,9.0D8,1.0D9/
# ELFORD UP TO 2.0 EV : FIT TO NAKAMURA DRIFT VELOCITY
      DATA YXSEC/37.4,33.1,30.0,27.9,26.2,24.2,21.6,19.5,16.3,13.9,     12.1,10.6,9.30,8.27,7.29,6.55,5.27,4.30,3.18,2.37,                1.47,.908,.548,.321,.184,.111,.0956,.0870,.0844,.0945,.187,.339,.525,.729,1.15,1.63,2.60,3.38,4.75,6.35,                7.32,8.28,9.51,10.7,11.9,13.2,14.3,15.3,16.6,17.7,      18.6,19.0,18.9,18.7,18.1,17.1,15.7,14.2,12.7,11.1,9.60,6.50,2.95,1.95,1.40,1.25,1.20,1.18,0.94,0.80,0.64,0.54,0.48,0.41,.340,.270,.222,.183,.154,.113,.0881,.0711,.0591,.0501,.0432,.033,.026,.0212,.0176,.0149,.0104,.00778,.00605,.00486,.00336,.00248,.00192,.00153,.00105,.000773,4.76D-4,3.28D-4,2.26D-4,1.68D-4,1.30D-4,1.05D-4,7.35D-5,5.51D-5,4.33D-5,3.53D-5,2.94D-5,2.51D-5,1.90D-5,1.51D-5,1.23D-5,1.03D-5,8.81D-6,6.19D-6,4.68D-6,3.69D-6,2.99D-6,2.10D-6,1.57D-6,1.22D-6,9.76D-7,8.02D-7,6.71D-7,4.92D-7,3.77D-7,2.99D-7,2.43D-7,2.02D-7,1.35D-7,9.74D-8,7.36D-8,5.76D-8,3.81D-8,2.71D-8,2.02D-8,1.57D-8,1.25D-8,1.02D-8,7.13D-9,5.26D-9,4.03D-9,3.19D-9,2.58D-9,1.65D-9,1.14D-9,8.40D-10,6.43D-10,4.11D-10,2.85D-10,2.09D-10,1.60D-10,1.26D-10,1.02D-10,7.10D-11,5.21D-11,3.99D-11,3.15D-11,2.55D-11/
# ELASTIC   CONSISTENT WITHIN 1% OF TOTAL X-SECTION SUM
      DATA XEL/1.D-6,.001,.003,.005,.007,0.01,.015,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.10,0.12,0.14,0.17,0.20,0.25,0.30,0.35,0.40,0.45,0.50,0.55,0.60,0.65,0.70,0.72,0.74,0.76,0.80,0.85,0.90,0.95,1.00,1.10,1.20,1.30,1.40,1.50,1.75,2.00,2.25,2.50,3.00,3.50,4.00,5.00,6.00,7.00,8.00,9.00,10.0,11.0,12.0,13.0,14.0,15.0,16.0,18.0,20.0,22.5,25.0,27.5,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,300.,400.,500.,600.,700.,800.,1000.,1200.,1500.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,6.0D3,7.0D3,8.0D3,1.0D4,1.25D4,1.5D4,1.75D4,2.0D4,2.5'%.3f' %.0'%.3f' %.5D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5'%.3f' %.0'%.3f' %.5D5,4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,2.0D6,2.5'%.3f' %.0'%.3f' %.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,1.D9/
      DATA YEL/37.4,34.6,31.8,29.9,28.4,26.6,24.1,22.2,19.1,16.8,14.9,13.4,12.1,11.0,10.0,9.15,7.71,6.56,5.21,4.38,3.22,2.31,1.75,1.30,1.04,0.83,0.65,0.60,0.58,0.58,0.59,0.60,0.62,0.66,0.73,0.81,0.90,0.98,1.17,1.41,1.66,1.96,2.25,3.14,3.99,4.74,5.62,7.66,9.59,12.0,16.0,20.1,23.0,25.9,27.2,28.1,28.2,28.2,27.5,26.6,25.7,24.2,22.0,20.5,19.3,17.4,15.8,14.9,12.9,11.7,10.8,9.88,8.85,8.00,7.12,6.44,5.84,5.08,4.38,4.15,3.70,3.56,3.15,2.90,2.62,2.44,2.25,2.20,1.92,1.72,1.61,1.41,1.40,1.28,1.13,1.06,.951,.895,.826,.798,.744,.668,.617,.526,.450,.396,.354,.321,.272,.237,
# SMOOTH JOIN TO SALVAT BETWEEN E=10**5 AND 2*10**5 EV.211,.191,.161,.141,.114,.0973,.0817,.0709,.0630,.0568,.0504,.0461,.0430,.0408,.0390,.0376,.0356,.0342,.0332,.0324,.0318,.0308,.0301,.0297,.0294,.0290,.0288,.0286,.0285,.0284,.0284,.0283,.0283,.0283,.0282,.0282,.0282,.0282,.0282,.0282,.0282/
# ELASTIC ANGULAR DISTRIBUTION (EPSILON)
      DATA XEPS/0.00,.001,.003,.005,.007,.010,.015,.020,.030,.040,0.05,0.06,0.07,0.08,0.09,0.10,0.12,0.14,0.17,0.20,0.25,0.30,0.35,0.40,0.45,0.50,0.52,0.54,0.55,0.56,0.60,0.65,0.70,0.72,0.74,0.76,0.80,0.85,0.90,0.95,1.00,1.10,1.20,1.30,1.40,1.50,1.75,2.00,2.25,2.50,3.00,3.50,4.00,5.20,5.60,6.00,6.50,7.00,7.50,8.00,9.00,10.0,11.0,12.0,13.0,14.0,15.0,16.0,18.0,20.0,22.5,25.0,27.5,30.0,35.0,40.0,45.0,50.0,60.0,70.0,75.0,80.0,90.0,100.,125.,150.,175.,200.,250.,300.,400.,500.,600.,700.,800.,1000.,1200.,1250.,1500.,1750.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,1.0D4,1.25D4,1.5D4,1.75D4,2.0D4,2.5'%.3f' %.0'%.3f' %.5D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5'%.3f' %.0'%.3f' %.5D5,4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,2.0D6,2.5'%.3f' %.0'%.3f' %.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5'%.3f' %.0'%.3f' %.5D7,4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,1.0D8,1.25D8,1.5D8,1.75D8,2.0D8,2.5'%.3f' %.0'%.3f' %.5D8,4.0D8,4.5D8,5.0D8,6.0D8,7.0D8,8.0D8,9.0D8,1.0D9/
# ELASTIC ANGULAR DISTRIBUTION PARAMETER EPSILON
# EPSILON= 1.0-YEPS
      DATA YEPS/1.,.935,.9152,.8999,.8841,.8652,.8452,.8187,.7822,.7445,.7225,.6926,.6611,.6378,.6066,.5887,.5459,.5096,.4533,.3720,.2822,.2221,.1554,.1082,.0662,.0445,.0416,.0417,.0432,.0442,.0561,.0948,.1626,.1941,.2313,.2662,.3416,.4243,.5002,.5662,.6269,.6968,.7276,.7502,.7506,.7627,.7454,.7730,.7714,.7703, .7468,.7483,.6947,.6838,.6672,.6508,.6610,.6625,.6480,.6128,.5511,.4952,.4485,.3897,.3447,.3034,.2581,.2253,.1925,.1585,.1198,.1009,.0890,.0780,.0712,.0608,.0537,.0483,.0480,.0536,   .0567,.0618,.0706,.0804,.0796,.0878,.0848,.0888,.0784,.0810,.0713,.0697,.0695,.0691,.0694,.0663,.0578,.0560,.0481,.0407, .0394,.0346,.0244,.0213,.0177,.0157,.0139,.0126,.0110,.0090,  .0086,.0074,.0065,.0058,.0045,.0037,.0031,.0027,.0023,.0017,.0015,.00126,9.84D-4,8.03D-4,5.85D-4,4.56D-4,3.64D-4,3.04D-4,2.60D-4,2.28D-4,1.746D-4,1.395D-4,1.149D-4,9.68D-5,8.30D-5,7.22D-5,5.64D-5,4.55D-5,3.76D-5,3.17D-5,2.72D-5,1.91D-5,1.43D-5,1.12D-5,9.02D-6,6.21D-6,4.54D-6,3.47D-6,2.74D-6,2.22D-6,1.83D-6,1.31D-6,9.90D-7,7.67D-7,6.15D-7,5.03D-7,3.28D-7,2.31D-7,1.71D-7,1.32D-7,8.46D-8,5.88D-8,4.31D-8,3.29D-8,2.58D-8,2.08D-8,1.43D-8,1.03D-8,7.80D-9,6.10D-9,4.87D-9,3.04D-9,2.07D-9,1.49D-9,1.12D-9,7.0D-10,4.8D-10,3.5D-10,2.6D-10,2.0D-10,1.6D-10,1.1D-10,8.1D-11,6.1D-11,4.7D-11,3.8D-11/
# IONISATION ( VALUES ABOVE 1OKEV GENERATED BY BORN BETHE IN SUB)        
      DATA XION/13.9996,14.5,15.0,15.5,16.0,16.5,17.0,17.5,18.0,18.5,   19.0,19.5,20.0,21.0,22.0,23.0,24.0,26.0,28.0,30.0,                32.0,34.0,36.0,38.0,40.0,45.0,50.0,55.0,60.0,65.0,                70.0,80.0,90.0,100.,120.,140.,160.,180.,200.,250.,                300.,400.,500.,600.,700.,800.,900.,1000.,1200.,1400.,             1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,10000./                                   
# GROSS IONISATION
      DATA YION/0.00,.078,.160,.255,.360,.450,.552,.655,.766,.878,      .980,1.09,1.20,1.34,1.53,1.63,1.84,2.19,2.43,2.66,                2.86,3.02,3.15,3.27,3.37,3.55,3.73,3.86,3.96,4.06,                4.09,4.15,4.13,4.09,3.97,3.79,3.63,3.47,3.34,3.02,                2.76,2.37,2.07,1.86,1.69,1.53,1.42,1.31,1.15,1.03,                .930,.854,.781,.667,.579,.510,.458,.415,.387,.356,.332,.293,.264,.240,.219/
# COUNTING IONISATION 
      DATA YINC/0.00,.078,.160,.255,.360,.450,.552,.655,.766,.878,      .980,1.09,1.20,1.34,1.53,1.63,1.84,2.19,2.43,2.66,                2.86,3.02,3.15,3.27,3.37,3.53,3.64,3.72,3.77,3.83,                3.83,3.84,3.81,3.76,3.62,3.46,3.31,3.17,3.05,2.75,                2.50,2.12,1.84,1.65,1.49,1.34,1.25,1.14,.995,.886,                .795,.726,.664,.567,.492,.434,.389,.353,.329,.303,.282,.249,.224,.204,.186/
# IONISATION CHARGE STATE =1
      DATA YIN1/0.00,.078,.160,.255,.360,.450,.552,.655,.766,.878,      .980,1.09,1.20,1.34,1.53,1.63,1.84,2.19,2.43,2.66,                2.86,3.02,3.15,3.27,3.37,3.51,3.55,3.58,3.57,3.60,                3.57,3.53,3.49,3.44,3.30,3.16,3.02,2.90,2.79,2.51,                2.29,1.93,1.67,1.49,1.34,1.21,1.12,1.03,.896,.798,                .716,.654,.598,.511,.443,.391,.350,.318,.296,.273,.254,.224,.202,.184,.168/
# IONISATION CHARGE STATE =2
      DATA XIN2/38.35944,45.0,50.0,55.0,60.0,65.0,70.0,80.0,90.0,100.,120.,140.,160.,180.,200.,250.,300.,400.,500.,600.,700.,800.,900.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,10000./                                   
      DATA YIN2/0.0,.0256,.0850,.141,.194,.233,.262,.307,.315,.318,.311,.283,.265,.246,.230,.197,.173,.143,.120,.106,.0958,.0850,.0790,.0699,.0610,.0543,.0487,.0445,.0407,.0348,.0302,.0266,.0238,.0216,.0202,.0186,.0173,.0153,.0137,.0125,.0114/
# IONISATION CHARGE STATE =3
      DATA XIN3/74.029,80.0,90.0,100.,120.,140.,160.,180.,200.,250.,    300.,400.,500.,600.,700.,800.,900.,1000.,1200.,1400.,             1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,10000./                                   
      DATA YIN3/0.0,.001,.0036,.0071,.0168,.0216,.0258,.0287,.0303,.0343,.0364,.0390,.0393,.0383,.0382,.0360,.0351,.0332,.0290,.0258,     .0231,.0211,.0193,.0165,.0143,.0126,.0113,.0103,.00957,.00882,.00821,.00725,.00652,.00594,.00541/
# IONISATION CHARGE STATE =4
      DATA XIN4/124.88,140.,160.,180.,190.,200.,250.,300.,400.,500.,600.,700.,800.,900.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,10000./                                   
      DATA YIN4/0.0,.000001,.0001,.0004,.00083,.00123,.00332,.00506,.00835,.00938,.0102,.0101,.00991,.00984,.00940,.00816,.00727,.00652,.00595,.00544,.00465,.00403,.00356,.00319,.00289,.00270,.00248,.00231,.00204,.00184,.00167,.00153/
# K-SHELL IONISATION
      DATA XKSH/14327.26,14585.,15010.,15447.,15896.,16360.,16835.,17325.,17830.,18349.,18882.,19432.,2.00D4,2.06D4,2.18D4,2.31D4,2.45D4,2.59D4,2.74D4,2.91'%.3f' %.08'%.3f' %.26'%.3f' %.55'%.3f' %.87D4,4.22D4,4.60D4,5.02D4,5.47D4,6.13D4,6.88D4,7.72D4,8.66D4,1.00D5,1.15D5,1.33D5,1.54D5,1.78D5,2.05D5,2.37D5,2.74'%.3f' %.16'%.3f' %.76D5,4.47D5,5.31D5,7.08D5,8.17D5,1.00D6,1.22D6,1.45D6,1.73D6,2.00D6,2.51'%.3f' %.07D6,4.00D6,5.01D6,6.13D6,8.18D6,1.00D7,1.45D7,2.05D7,2.99D7,4.10D7,5.01D7,6.13D7,8.18D7,1.00D8,1.45D8,2.05D8,2.99D8,4.10D8,5.01D8,6.13D8,8.18D8,1.00D9/
      DATA YKSH/0.0,6.61D-8,1.68D-7,2.66D-7,3.58D-7,4.46D-7,5.30D-7,6.10D-7,6.86D-7,7.57D-7,8.26D-7,8.91D-7,9.52D-7,1.01D-6,1.12D-6,1.21D-6,1.30D-6,1.37D-6,1.44D-6,1.50D-6,1.55D-6,1.59D-6,1.64D-6,1.68D-6,1.71D-6,1.72D-6,1.73D-6,1.72D-6,1.70D-6,1.67D-6,1.64D-6,1.60D-6,1.54D-6,1.47D-6,1.41D-6,1.35D-6,1.29D-6,1.24D-6,1.19D-6,1.15D-6,1.11D-6,1.08D-6,1.05D-6,1.03D-6,1.02D-6,1.02D-6,1.03D-6,1.04D-6,1.06D-6,1.09D-6,1.11D-6,1.16D-6,1.20D-6,1.25D-6,1.31D-6,1.36D-6,1.43D-6,1.48D-6,1.58D-6,1.68D-6,1.78D-6,1.87D-6,1.92D-6,1.98D-6,2.06D-6,2.11D-6,2.22D-6,2.31D-6,2.41D-6,2.50D-6,2.56D-6,2.61D-6,2.69D-6,2.75D-6/
# L1-SHELL IONISATION
      DATA XL1S/1921.0,1956.6,2013.2,2071.4,2131.4,2193.,2256.,2322.,2389.,2458.,2530.,2680.,2837.,3004.,3181.,3369.,3567.,3777.,4000.,4236.,4616.,5031.,5483.,5976.,6513.,7098.,7737.,8433.,9192.,1.00D4,1.15D4,1.33D4,1.54D4,1.78D4,2.05D4,2.44D4,2.90'%.3f' %.45D4,4.10D4,5.01D4,6.13D4,7.50D4,8.91D4,1.00D5,1.22D5,1.50D5,1.83D5,2.24D5,2.82'%.3f' %.55D5,4.47D5,5.79D5,7.50D5,1.00D6,1.22D6,1.45D6,1.73D6,2.00D6,2.51'%.3f' %.07D6,4.00D6,5.01D6,6.13D6,8.18D6,1.00D7,1.50D7,2.05D7,2.51'%.3f' %.07D7,4.10D7,5.16D7,6.13D7,8.18D7,1.00D8,1.50D8,2.05D8,2.51'%.3f' %.07D8,4.10D8,5.16D8,6.13D8,8.18D8,1.00D9/
      DATA YL1S/0.0,3.47D-6,8.56D-6,1.34D-5,1.80D-5,2.23D-5,2.65D-5,3.04D-5,3.41D-5,3.76D-5,4.10D-5,4.71D-5,5.27D-5,5.76D-5,6.19D-5,6.58D-5,6.91D-5,7.20D-5,7.44D-5,7.65D-5,7.88D-5,8.04D-5,8.12D-5,8.15D-5,8.11D-5,8.03D-5,7.90D-5,7.74D-5,7.55D-5,7.33D-5,6.93D-5,6.49D-5,6.04D-5,5.59D-5,5.14D-5,4.64D-5,4.17D-5,3.74D-5,3.35D-5,2.94D-5,2.59D-5,2.28D-5,2.05D-5,1.91D-5,1.70D-5,1.52D-5,1.38D-5,1.26D-5,1.14D-5,1.06D-5,9.97D-6,9.49D-6,9.21D-6,9.08D-6,9.10D-6,9.16D-6,9.27D-6,9.39D-6,9.62D-6,9.86D-6,1.02D-5,1.05D-5,1.09D-5,1.13D-5,1.17D-5,1.24D-5,1.29D-5,1.33D-5,1.36D-5,1.42D-5,1.46D-5,1.49D-5,1.54D-5,1.58D-5,1.65D-5,1.71D-5,1.74D-5,1.78D-5,1.83D-5,1.88D-5,1.91D-5,1.96D-5,2.00D-5/
# L2-SHELL IONISATION
      DATA XL2S/1730.9,1780.7,1832.6,1886.,1941.,1998.,2056.,2116.,2178.,2241.,2306.,2373.,2443.,2514.,2663.,2820.,2987.,3164.,3352.,3550.,3870.,4219.,4734.,5311.,5959.,6685.,7500.,8660.,1.00D4,1.15D4,1.33D4,1.54D4,1.78D4,2.05D4,2.44D4,2.90'%.3f' %.45D4,4.10D4,5.01D4,6.13D4,7.50D4,8.91D4,1.00D5,1.22D5,1.50D5,1.83D5,2.24D5,2.82'%.3f' %.55D5,4.47D5,5.79D5,7.50D5,1.00D6,1.22D6,1.45D6,1.73D6,2.00D6,2.51'%.3f' %.07D6,4.00D6,5.01D6,6.13D6,8.18D6,1.00D7,1.45D7,2.05D7,2.51'%.3f' %.07D7,4.10D7,5.01D7,6.13D7,8.18D7,1.00D8,1.45D8,2.05D8,2.51'%.3f' %.07D8,4.10D8,5.01D8,6.13D8,8.18D8,1.00D9/
      DATA YL2S/0.0,9.21D-6,1.81D-5,2.65D-5,3.45D-5,4.20D-5,4.92D-5,5.59D-5,6.22D-5,6.81D-5,7.36D-5,7.88D-5,8.37D-5,8.82D-5,9.63D-5,1.03D-4,1.09D-4,1.14D-4,1.18D-4,1.22D-4,1.26D-4,1.28D-4,1.30D-4,1.30D-4,1.29D-4,1.26D-4,1.23D-4,1.17D-4,1.11D-4,1.04D-4,9.74D-5,9.04D-5,8.35D-5,7.69D-5,6.95D-5,6.27D-5,5.64D-5,5.06D-5,4.46D-5,3.93D-5,3.47D-5,3.12D-5,2.92D-5,2.60D-5,2.33D-5,2.11D-5,1.93D-5,1.77D-5,1.64D-5,1.55D-5,1.48D-5,1.44D-5,1.42D-5,1.43D-5,1.44D-5,1.46D-5,1.48D-5,1.52D-5,1.57D-5,1.63D-5,1.69D-5,1.74D-5,1.82D-5,1.88D-5,1.99D-5,2.09D-5,2.15D-5,2.21D-5,2.30D-5,2.36D-5,2.43D-5,2.51D-5,2.58D-5,2.69D-5,2.80D-5,2.86D-5,2.92D-5,3.01D-5,3.08D-5,3.14D-5,3.23D-5,3.29D-5/
# L3-SHELL IONISATION
      DATA XL3S/1678.4,1684.5,1733.6,1784.,1836.,1889.,1944.,2001.,2059.,2119.,2181.,2244.,2310.,2377.,2447.,2518.,2667.,2824.,2991.,3168.,3356.,3554.,3874.,4223.,4738.,5315.,5963.,6689.,7506.,8666.,1.00D4,1.15D4,1.33D4,1.54D4,1.78D4,2.05D4,2.44D4,2.90'%.3f' %.45D4,4.10D4,5.01D4,6.13D4,7.50D4,8.91D4,1.00D5,1.22D5,1.50D5,1.83D5,2.24D5,2.82'%.3f' %.55D5,4.47D5,5.79D5,7.50D5,1.00D6,1.22D6,1.45D6,1.73D6,2.00D6,2.51'%.3f' %.07D6,4.00D6,5.01D6,6.13D6,8.18D6,1.00D7,1.50D7,2.05D7,2.51'%.3f' %.07D7,4.10D7,5.16D7,6.31D7,8.18D7,1.00D8,1.50D8,2.05D8,2.51'%.3f' %.07D8,4.10D8,5.16D8,6.31D8,8.18D8,1.00D9/
      DATA YL3S/0.0,2.31D-6,2.23D-5,4.13D-5,5.91D-5,7.64D-5,9.25D-5,1.08D-4,1.22D-4,1.36D-4,1.48D-4,1.60D-4,1.71D-4,1.82D-4,1.91D-4,2.00D-4,2.16D-4,2.30D-4,2.42D-4,2.52D-4,2.60D-4,2.66D-4,2.73D-4,2.78D-4,2.80D-4,2.79D-4,2.75D-4,2.69D-4,2.61D-4,2.49D-4,2.35D-4,2.21D-4,2.06D-4,1.91D-4,1.76D-4,1.62D-4,1.46D-4,1.32D-4,1.18D-4,1.06D-4,9.34D-5,8.22D-5,7.25D-5,6.53D-5,6.10D-5,5.43D-5,4.88D-5,4.41D-5,4.03D-5,3.69D-5,3.42D-5,3.22D-5,3.08D-5,2.99D-5,2.96D-5,2.97D-5,3.00D-5,3.04D-5,3.08D-5,3.17D-5,3.25D-5,3.38D-5,3.50D-5,3.61D-5,3.77D-5,3.89D-5,4.13D-5,4.33D-5,4.46D-5,4.58D-5,4.77D-5,4.91D-5,5.04D-5,5.21D-5,5.34D-5,5.59D-5,5.80D-5,5.93D-5,6.06D-5,6.24D-5,6.39D-5,6.52D-5,6.68D-5,6.81D-5/
# M1-SHELL IONISATION
      DATA XM1S/292.8,295.7,303.9,312.4,321.1,330.1,339.3,348.8,358.6,368.7,389.7,412.0,435.5,460.5,487.0,515.0,544.7,576.1,609.5,644.8,682.0,742.0,808.0,880.0,1014.,1164.,1344.,1554.,1794.,2064.,2454.,2914.,3464.,4234.,5174.,6324.,7514.,8674.,1.00D4,1.22D4,1.50D4,1.88D4,2.37D4,2.99'%.3f' %.87D4,4.87D4,5.96D4,7.08D4,8.66D4,1.00D5,1.22D5,1.50D5,1.88D5,2.37D5,2.99'%.3f' %.87D5,4.87D5,5.96D5,7.08D5,8.66D5,1.00D6,1.22D6,1.50D6,1.88D6,2.37D6,2.99'%.3f' %.87D6,4.87D6,5.96D6,7.08D6,8.66D6,1.00D7,1.22D7,1.63D7,2.05D7,2.51'%.3f' %.07D7,4.10D7,5.16D7,6.31D7,8.66D7,1.00D8,1.50D8,2.05D8,2.51'%.3f' %.07D8,4.10D8,5.16D8,6.31D8,8.66D8,1.00D9/
      DATA YM1S/0.0,3.29D-5,1.10D-4,1.89D-4,2.72D-4,3.57D-4,4.44D-4,5.32D-4,6.20D-4,7.09D-4,8.86D-4,1.06D-3,1.23D-3,1.39D-3,1.54D-3,1.67D-3,1.80D-3,1.91D-3,2.02D-3,2.10D-3,2.18D-3,2.27D-3,2.33D-3,2.37D-3,2.38D-3,2.35D-3,2.27D-3,2.17D-3,2.04D-3,1.91D-3,1.75D-3,1.58D-3,1.42D-3,1.25D-3,1.09D-3,9.49D-4,8.38D-4,7.53D-4,6.77D-4,5.80D-4,4.96D-4,4.15D-4,3.46D-4,2.89D-4,2.37D-4,1.99D-4,1.71D-4,1.51D-4,1.31D-4,1.19D-4,1.05D-4,9.27D-5,8.16D-5,7.29D-5,6.60D-5,6.02D-5,5.65D-5,5.41D-5,5.26D-5,5.15D-5,5.09D-5,5.06D-5,5.07D-5,5.11D-5,5.19D-5,5.29D-5,5.43D-5,5.57D-5,5.70D-5,5.82D-5,5.96D-5,6.07D-5,6.22D-5,6.43D-5,6.61D-5,6.76D-5,6.92D-5,7.14D-5,7.32D-5,7.48D-5,7.72D-5,7.84D-5,8.15D-5,8.40D-5,8.56D-5,8.72D-5,8.95D-5,9.13D-5,9.29D-5,9.54D-5,9.65D-5/
# M2-SHELL IONISATION
      DATA XM2S/222.2,224.1,230.5,237.0,243.7,250.7,257.8,265.1,272.7,280.5,288.4,305.1,322.8,341.6,361.4,382.4,404.7,428.3,453.3,479.8,508.0,553.0,602.0,656.0,715.0,778.0,848.0,924.0,1007.,1157.,1337.,1547.,1787.,2057.,2377.,2747.,3167.,3767.,4607.,5627.,6687.,7727.,8667.,1.00D4,1.22D4,1.50D4,1.83D4,2.37D4,2.90'%.3f' %.76D4,5.01D4,6.49D4,7.72D4,8.66D4,1.00D5,1.22D5,1.50D5,1.78D5,2.05D5,2.37D5,2.74'%.3f' %.25'%.3f' %.98D5,4.87D5,5.96D5,7.29D5,8.66D5,1.00D6,1.22D6,1.50D6,2.05D6,2.99'%.3f' %.87D6,4.87D6,5.96D6,7.08D6,8.66D6,1.00D7,1.22D7,1.50D7,2.05D7,2.99'%.3f' %.87D7,4.87D7,5.96D7,7.08D7,8.66D7,1.00D8,1.22D8,1.50D8,2.05D8,2.99'%.3f' %.87D8,4.87D8,5.96D8,7.08D8,8.66D8,1.00D9/
      DATA YM2S/0.0,4.89D-5,1.82D-4,3.18D-4,4.56D-4,5.95D-4,7.35D-4,8.75D-4,1.01D-3,1.15D-3,1.29D-3,1.56D-3,1.82D-3,2.07D-3,2.31D-3,2.53D-3,2.74D-3,2.93D-3,3.11D-3,3.27D-3,3.41D-3,3.59D-3,3.74D-3,3.84D-3,3.92D-3,3.96D-3,3.97D-3,3.96D-3,3.92D-3,3.81D-3,3.65D-3,3.46D-3,3.25D-3,3.02D-3,2.80D-3,2.57D-3,2.35D-3,2.10D-3,1.83D-3,1.58D-3,1.39D-3,1.25D-3,1.14D-3,1.02D-3,8.74D-4,7.46D-4,6.36D-4,5.18D-4,4.42D-4,3.61D-4,2.90D-4,2.39D-4,2.12D-4,1.95D-4,1.77D-4,1.56D-4,1.38D-4,1.25D-4,1.16D-4,1.08D-4,1.02D-4,9.52D-5,8.89D-5,8.42D-5,8.06D-5,7.82D-5,7.68D-5,7.60D-5,7.56D-5,7.57D-5,7.68D-5,7.91D-5,8.13D-5,8.34D-5,8.54D-5,8.72D-5,8.94D-5,9.10D-5,9.32D-5,9.55D-5,9.91D-5,1.04D-4,1.07D-4,1.09D-4,1.12D-4,1.14D-4,1.16D-4,1.18D-4,1.20D-4,1.23D-4,1.26D-4,1.31D-4,1.34D-4,1.37D-4,1.39D-4,1.41D-4,1.44D-4,1.45D-4/
# M3-SHELL IONISATION
      DATA XM3S/214.4,218.8,225.0,231.3,237.9,244.6,251.5,258.6,266.0,273.5,281.3,289.3,306.0,323.7,342.4,362.3,383.3,405.6,429.2,454.2,481.0,509.0,554.0,603.0,657.0,715.0,779.0,849.0,925.0,1007.,1157.,1337.,1547.,1787.,2057.,2377.,2747.,3167.,3767.,4607.,5627.,6687.,7727.,8667.,1.00D4,1.22D4,1.50D4,1.83D4,2.37D4,2.90'%.3f' %.76D4,5.01D4,6.49D4,7.72D4,8.66D4,1.00D5,1.22D5,1.50D5,1.78D5,2.05D5,2.37D5,2.74'%.3f' %.25'%.3f' %.98D5,4.87D5,5.96D5,7.29D5,8.66D5,1.00D6,1.22D6,1.50D6,2.05D6,2.99'%.3f' %.87D6,4.87D6,5.96D6,7.08D6,8.66D6,1.00D7,1.22D7,1.50D7,2.05D7,2.99'%.3f' %.87D7,4.87D7,5.96D7,7.08D7,8.66D7,1.00D8,1.22D8,1.50D8,2.05D8,2.99'%.3f' %.87D8,4.87D8,5.96D8,7.08D8,8.66D8,1.00D9/
      DATA YM3S/0.0,2.05D-4,4.91D-4,7.83D-4,1.08D-3,1.38D-3,1.68D-3,1.98D-3,2.28D-3,2.58D-3,2.87D-3,3.17D-3,3.74D-3,4.29D-3,4.81D-3,5.31D-3,5.78D-3,6.21D-3,6.61D-3,6.98D-3,7.31D-3,7.60D-3,7.97D-3,8.27D-3,8.48D-3,8.62D-3,8.70D-3,8.71D-3,8.66D-3,8.56D-3,8.30D-3,7.94D-3,7.51D-3,7.04D-3,6.55D-3,6.04D-3,5.55D-3,5.08D-3,4.53D-3,3.94D-3,3.40D-3,3.00D-3,2.69D-3,2.46D-3,2.20D-3,1.88D-3,1.61D-3,1.37D-3,1.12D-3,9.53D-4,7.79D-4,6.26D-4,5.17D-4,4.57D-4,4.22D-4,3.83D-4,3.37D-4,2.98D-4,2.71D-4,2.52D-4,2.35D-4,2.20D-4,2.06D-4,1.93D-4,1.82D-4,1.75D-4,1.69D-4,1.66D-4,1.65D-4,1.64D-4,1.64D-4,1.67D-4,1.72D-4,1.77D-4,1.81D-4,1.86D-4,1.90D-4,1.95D-4,1.98D-4,2.03D-4,2.08D-4,2.16D-4,2.26D-4,2.32D-4,2.38D-4,2.44D-4,2.48D-4,2.54D-4,2.57D-4,2.63D-4,2.68D-4,2.76D-4,2.86D-4,2.93D-4,2.99D-4,3.04D-4,3.09D-4,3.14D-4,3.18D-4/
# M4-SHELL IONISATION
      DATA XM4S/95.0,96.83,99.67,102.6,105.6,108.7,111.9,115.2,118.5,122.0,125.6,133.0,141.0,149.3,158.2,167.5,177.5,188.0,199.2,211.0,223.5,243.7,265.7,289.8,315.9,344.4,375.5,409.4,446.4,486.7,546.1,612.8,687.6,771.5,866.0,1000.,1150.,1330.,1540.,1780.,2050.,2370.,2740.,3160.,3760.,4600.,5620.,6680.,7720.,8660.,1.00D4,1.22D4,1.50D4,1.83D4,2.37D4,2.90'%.3f' %.76D4,5.01D4,6.49D4,7.72D4,8.66D4,1.00D5,1.22D5,1.50D5,1.78D5,2.05D5,2.37D5,2.74'%.3f' %.25'%.3f' %.98D5,4.87D5,5.96D5,7.29D5,8.66D5,1.00D6,1.22D6,1.50D6,2.05D6,2.99'%.3f' %.87D6,4.87D6,5.96D6,7.08D6,8.66D6,1.00D7,1.22D7,1.50D7,2.05D7,2.99'%.3f' %.87D7,4.87D7,5.96D7,7.08D7,8.66D7,1.00D8,1.22D8,1.50D8,2.05D8,2.99'%.3f' %.87D8,4.87D8,5.96D8,7.08D8,8.66D8,1.00D9/
      DATA YM4S/0.0,1.08D-3,2.62D-3,4.04D-3,5.37D-3,6.62D-3,7.79D-3,8.90D-3,9.96D-3,1.10D-2,1.20D-2,1.38D-2,1.56D-2,1.73D-2,1.90D-2,2.06D-2,2.22D-2,2.37D-2,2.52D-2,2.67D-2,2.80D-2,3.00D-2,3.18D-2,3.34D-2,3.47D-2,3.58D-2,3.66D-2,3.72D-2,3.76D-2,3.77D-2,3.74D-2,3.69D-2,3.60D-2,3.48D-2,3.35D-2,3.17D-2,2.98D-2,2.78D-2,2.58D-2,2.39D-2,2.20D-2,2.02D-2,1.85D-2,1.68D-2,1.49D-2,1.30D-2,1.12D-2,9.90D-3,8.90D-3,8.16D-3,7.32D-3,6.28D-3,5.38D-3,4.60D-3,3.77D-3,3.23D-3,2.66D-3,2.15D-3,1.79D-3,1.58D-3,1.47D-3,1.33D-3,1.18D-3,1.05D-3,9.54D-4,8.87D-4,8.30D-4,7.82D-4,7.33D-4,6.88D-4,6.54D-4,6.29D-4,6.12D-4,6.03D-4,5.99D-4,5.99D-4,6.02D-4,6.15D-4,6.39D-4,6.60D-4,6.81D-4,6.99D-4,7.16D-4,7.37D-4,7.52D-4,7.73D-4,7.94D-4,8.28D-4,8.69D-4,8.98D-4,9.24D-4,9.46D-4,9.65D-4,9.88D-4,1.00D-3,1.03D-3,1.05D-3,1.08D-3,1.13D-3,1.16D-3,1.18D-3,1.20D-3,1.22D-3,1.25D-3,1.26D-3/
# M5-SHELL IONISATION
      DATA XM5S/93.8,94.3,97.0,99.9,102.8,105.8,108.9,112.1,115.3,118.7,122.2,125.8,133.2,141.1,149.5,158.4,167.8,177.7,188.2,199.4,211.2,223.7,243.9,266.0,290.0,316.0,345.0,376.0,410.0,446.0,487.0,546.0,613.0,688.0,772.0,866.0,1000.,1150.,1330.,1540.,1780.,2050.,2370.,2740.,3160.,3760.,4600.,5620.,6680.,7720.,8660.,1.00D4,1.22D4,1.50D4,1.83D4,2.37D4,2.90'%.3f' %.76D4,5.01D4,6.49D4,7.72D4,8.66D4,1.00D5,1.22D5,1.50D5,1.78D5,2.05D5,2.37D5,2.74'%.3f' %.25'%.3f' %.98D5,4.87D5,5.96D5,7.29D5,8.66D5,1.00D6,1.22D6,1.50D6,2.05D6,2.99'%.3f' %.87D6,4.87D6,5.96D6,7.08D6,8.66D6,1.00D7,1.22D7,1.50D7,2.05D7,2.99'%.3f' %.87D7,4.87D7,5.96D7,7.08D7,8.66D7,1.00D8,1.22D8,1.50D8,2.05D8,2.99'%.3f' %.87D8,4.87D8,5.96D8,7.08D8,8.66D8,1.00D9/
      DATA YM5S/0.0,4.52D-4,2.91D-3,5.18D-3,7.29D-3,9.26D-3,1.11D-2,1.29D-2,1.45D-2,1.61D-2,1.76D-2,1.91D-2,2.19D-2,2.46D-2,2.72D-2,2.97D-2,3.22D-2,3.46D-2,3.69D-2,3.92D-2,4.14D-2,4.35D-2,4.65D-2,4.92D-2,5.15D-2,5.35D-2,5.52D-2,5.64D-2,5.73D-2,5.77D-2,5.78D-2,5.74D-2,5.65D-2,5.51D-2,5.33D-2,5.13D-2,4.85D-2,4.55D-2,4.25D-2,3.95D-2,3.66D-2,3.37D-2,3.08D-2,2.82D-2,2.56D-2,2.28D-2,1.98D-2,1.71D-2,1.51D-2,1.36D-2,1.24D-2,1.11D-2,9.56D-3,8.19D-3,7.01D-3,5.74D-3,4.92D-3,4.05D-3,3.27D-3,2.72D-3,2.41D-3,2.23D-3,2.03D-3,1.79D-3,1.59D-3,1.45D-3,1.35D-3,1.26D-3,1.19D-3,1.11D-3,1.05D-3,9.94D-4,9.56D-4,9.31D-4,9.18D-4,9.12D-4,9.10D-4,9.16D-4,9.36D-4,9.72D-4,1.00D-3,1.03D-3,1.06D-3,1.09D-3,1.12D-3,1.14D-3,1.17D-3,1.21D-3,1.26D-3,1.32D-3,1.37D-3,1.40D-3,1.44D-3,1.47D-3,1.50D-3,1.53D-3,1.56D-3,1.59D-3,1.65D-3,1.71D-3,1.76D-3,1.80D-3,1.83D-3,1.86D-3,1.89D-3,1.92D-3/
# 1S5  METASTABLE   E=9.91523166 EV  J=2
#      SHAPE def BELOW 50 EV FROM BARTSCHAT AND ZATSARINNY
#      ABOVE 50 EV SCALED BY 1/E**3
      DATA X1S5/9.9152,9.932,9.959,9.973,9.987,10.000,10.027,10.034,10.041,10.048,10.055,10.068,10.082,10.095,10.109,10.123,10.136,10.150,10.163,10.177,10.184,10.191,10.204,10.218,10.231,10.245,10.259,10.313,10.367,10.422,10.476,10.531,10.585,10.612,10.640,10.646,10.653,10.667,10.680,10.694,10.708,10.816,10.925,11.034,11.089,11.143,11.197,11.225,11.252,11.263,11.265,11.268,11.271,11.272,11.274,11.275,11.276,11.279,11.282,11.284,11.287,11.293,11.295,11.298,11.301,11.306,11.309,11.313,11.320,11.327,11.334,11.340,11.347,11.354,11.361,11.367,11.374,11.381,11.388,11.395,11.402,11.415,11.429,11.442,11.456,11.470,11.483,11.497,11.510,11.524,11.538,11.551,11.565,11.578,11.592,11.606,11.619,11.626,11.633,11.640,11.644,11.646,11.649,11.653,11.660,11.665,11.674,11.701,11.755,11.796,11.851,11.905,11.959,11.973,11.976,11.980,11.984,11.986,11.989,11.993,12.000,12.007,12.014,12.017,12.021,12.027,12.041,12.068,12.095,12.150,12.204,12.259,12.304,12.367,12.422,12.476,12.531,12.585,12.640,12.694,12.748,12.803,12.871,12.925,12.993,13.075,13.197,13.334,13.470,13.578,13.742,14.014,14.558,15.102,15.646,16.191,16.735,17.279,17.959,19.048,20.0,21.0,22.0,24.0,27.0,30.0,35.0,40.0,50.0/
      DATA Y1S5/0.00,1.10,2.18,2.87,3.63,4.38,5.69,6.09,6.58,4.84,3.88,3.18,2.69,2.46,2.40,2.44,2.62,3.01,4.01,6.71,7.86,6.60,3.55,2.67,2.42,2.35,2.35,2.54,2.84,3.19,3.58,4.02,4.42,4.70,5.05,5.19,5.39,5.33,5.29,5.42,5.54,6.42,7.20,7.63,7.68,7.57,7.21,6.83,6.10,5.64,5.66,6.12,7.67,8.69,9.58,9.36,9.07,8.29,7.66,7.20,6.87,6.53,6.64,7.25,8.85,9.99,8.47,7.04,5.99,5.69,5.16,5.23,5.49,6.00,6.85,8.06,9.28,9.92,9.98,9.87,9.62,8.49,7.26,6.26,5.51,4.81,4.19,3.61,3.03,2.59,2.39,3.10,3.69,3.90,3.97,3.97,3.95,4.03,4.40,5.31,5.79,5.91,5.89,5.71,5.34,5.01,4.83,4.93,5.11,5.21,5.28,5.30,5.04,4.80,4.81,5.16,5.83,5.86,5.72,5.48,5.13,4.97,5.85,6.50,7.12,7.16,6.71,6.28,5.89,5.52,5.65,5.63,5.67,5.41,5.29,5.41,5.60,5.77,5.95,6.00,5.83,5.56,5.55,5.74,5.91,5.94,5.99,6.06,6.11,6.16,6.14,6.01,5.80,6.07,6.73,7.37,7.84,8.23,8.57,8.64,8.20,7.60,7.00,6.04,4.70,3.60,2.30,1.45,0.70/
      DATA YP1S5/169*0.0/
# 1S4  E=10.032400 EV  J=1    RESONANCE RADIATION  123.585 NM 
#     USED  BEF SCALING ABOVE  20 EV    OSC STRENGTH=0.203 
#     SHAPE def BELOW 20 EV FROM BARTSCHAT AND ZATSARINNY
      DATA X1S4/10.0324,10.034,10.041,10.048,10.055,10.068,10.082,10.095,10.109,10.123,10.136,10.150,10.163,10.204,10.218,10.231,10.245,10.259,10.286,10.354,10.422,10.490,10.558,10.626,10.680,10.748,10.816,10.884,10.953,11.021,11.089,11.157,11.238,11.252,11.265,11.271,11.274,11.276,11.282,11.287,11.295,11.301,11.306,11.309,11.313,11.320,11.334,11.347,11.361,11.374,11.381,11.388,11.395,11.402,11.415,11.429,11.442,11.456,11.483,11.510, 11.538,11.565,11.592,11.619,11.633,11.644,11.649,11.660,11.674,11.701,11.728,11.755,11.776,11.796,11.823,11.851,11.878,11.905,11.932,11.959,11.976,11.984,11.989,12.000,12.014,12.021,12.041,12.068,12.095,12.191,12.245,12.300,12.354,12.408,12.463,12.517,12.572,12.626,12.680,12.735,12.803,12.871,12.925,12.966,13.061,13.157,13.225,13.279,13.347,13.402,13.497,13.606,13.878,14.150,14.422,14.694,14.966,15.238,15.510,15.783,16.055,16.327,16.599,16.871,17.143,17.415,17.687,17.959,19.048,20.000/
      DATA Y1S4/0.00,0.69,2.81,5.49,8.19,6.82,5.53,5.15,5.23,5.74,6.94,9.75,17.4,17.8,9.03,5.97,4.62,3.93,3.42,2.97,3.07,3.35,3.74,4.37,4.81,5.24,5.75,6.37,6.89,7.33,7.66,7.83,7.61,7.46,7.20,7.79,8.62,8.45,8.03,7.78,7.78,8.89,9.48,8.73,8.03,7.38,7.09,7.08,7.79,9.35,9.77,9.75,9.60,9.37,8.58,7.64,6.70,6.56,6.73,6.48,6.23,7.15,7.57,7.95,8.35,8.28,8.02,7.80,7.88,8.06,8.16,8.25,8.31,8.36,8.43,8.49,8.55,8.59,8.62,8.60,9.09,9.57,9.09,8.89,10.0,10.2,9.21,8.96,8.70,9.02,9.25,9.71,9.84,9.76,9.75,9.90,10.1,10.3,10.4,10.8,10.6,10.8,10.8,10.8,10.7,11.0,11.2,11.4,11.5,11.6,11.6,11.8,11.7,11.5,11.4,11.6,12.0,12.5,13.1,13.8,14.5,15.2,15.8,16.4,17.0,17.9,18.9,20.1,22.4,23.7/
      DATA YP1S4/130*0.0/
# 1S3  METASTABLE E=10.56241436 EV J=0 
#      SHAPE def BELOW  50 EV FROM BARTSCHAT AND ZATSARINNY
#      SCALED BY 1/E**3 ABOVE 50 EV
      DATA X1S3/10.5624,10.572,10.585,10.599,10.612,10.626,10.640,10.646,10.653,10.667,10.680,10.694,10.708,10.735,10.762,10.789,10.816,10.844,10.871,10.898,10.925,10.953,10.980,11.007,11.034,11.061,11.089,11.116,11.143,11.170,11.197,11.225,11.252,11.263,11.265,11.268,11.271,11.272,11.274,11.275,11.276,11.279,11.282,11.284,11.287,11.293,11.295,11.298,11.301,11.306,11.309,11.313,11.320,11.327,11.334,11.340,11.347,11.354,11.361,11.367,11.374,11.381,11.388,11.395,11.402,11.415,11.429,11.442,11.456,11.470,11.483,11.497,11.510,11.524,11.538,11.551,11.578,11.606,11.619,11.626,11.633,11.640,11.644,11.646,11.649,11.653,11.660,11.665,11.674,11.701,11.728,11.755,11.776,11.796,11.823,11.851,11.878,11.905,11.932,11.959,11.980,11.993,12.000,12.007,12.014,12.017,12.021,12.027,12.041,12.055,12.068,12.082,12.095,12.110,12.150,12.163,12.177,12.204,12.231,12.259,12.286,12.313,12.340,12.354,12.381,12.435,12.490,12.544,12.599,12.653,12.708,12.762,12.803,12.871,12.993,13.089,13.157,13.225,13.279,13.347,13.374,13.388,13.402,13.415,13.429,13.470,13.497,13.551,13.878,14.422,14.966,15.510,16.055,16.599,17.143,17.687,19.048,20.408,21.089,22.177,23.130,24.490,26.123,28.572,32.654,38.096,43.538,50.0/ 
      DATA Y1S3/0.00,.255,.560,.671,.508,.377,.265,.211,.263,.459,.428,.360,.330,.316,.320,.330,.344,.362,.375,.392,.411,.428,.448,.468,.488,.509,.529,.547,.564,.577,.581,.568,.511,.555,.674,1.01,1.74,2.09,2.21,2.11,1.91,1.53,1.27,1.11,1.00,.875,.848,.865,.979,1.17,1.07,.944,.815,.921,.792,.744,.718,.702,.698,.717,.780,.891,1.04,1.18,1.28,1.31,1.22,1.14,1.10,1.11,1.13,1.15,1.18,1.24,1.29,1.30,1.27,1.28,1.29,1.29,1.26,1.19,1.16,1.15,1.16,1.18,1.21,1.24,1.24,1.25,1.25,1.25,1.25,1.25,1.24,1.23,1.21,1.18,1.13,1.06,.978,.885,.806,.806,1.15,1.36,1.52,1.47,1.26,1.15,1.04,.937,.816,.706,.412,.403,.444,.520,.609,.644,.686,.687,.729,.782,.840,.889,.919,.939,.951,.934,.915,.916,.921,.969,.993,.914,.919,.956,.989,1.02,1.04,1.05,1.06,1.05,1.02,.936,.938,.947,1.00,1.07,1.07,1.12,1.23,1.30,1.38,1.57,1.86,1.77,1.68,1.54,1.41,1.25,1.10,.906,.656,.422,.275,.172/
      DATA YP1S3/168*0.0/
# 1S2  E=10.6436342 EV  J=1   RESONANCE RADIATION  116.487 NM  
#      USED BEF SCALING ABOVE 20 EV      OSC STRENGTH=0.182    
#      SHAPE def BELOW 20 EV FROM BARTSCHAT AND ZATSARINNY
      DATA X1S2/10.6436,10.646,10.653,10.667,10.680,10.694,10.708,10.721,10.748,10.816,10.884,10.953,11.021,11.089,11.157,11.225,11.238,11.252,11.263,11.265,11.268,11.271,11.272,11.274,11.275,11.276,11.279,11.282,11.284,11.287,11.293,11.295,11.298,11.301,11.306,11.309,11.313,11.334,11.367,11.381,11.388,11.395,11.402,11.415,11.429,11.456,11.483,11.510,11.538,11.565,11.592,11.619,11.626,11.633,11.640,11.644,11.646,11.649,11.653,11.660,11.665,11.674,11.687,11.714,11.742,11.762,11.783,11.810,11.837,11.864,11.891,11.918,11.946,11.973,11.980,11.986,11.993,12.000,12.007,12.014,12.017,12.021,12.027,12.041,12.055,12.068,12.082,12.095,12.109,12.150,12.163,12.177,12.191,12.204,12.286,12.340,12.395,12.449,12.504,12.558,12.612,12.667,12.721,12.735,12.748,12.762,12.769,12.776,12.789,12.803,12.871,12.884,12.898,12.912,12.925,12.966,12.993,13.061,13.075,13.089,13.129,13.170,13.197,13.238,13.265,13.293,13.334,13.361,13.388,13.402,13.415,13.429,13.470,13.497,13.551,13.606,13.878,14.150,14.422,14.694,14.966,15.238,15.510,15.783,16.055,16.327,16.599,17.959,19.048,20.000/ 
      DATA Y1S2/0.00,.367,1.32,4.25,3.25,2.45,2.09,1.91,1.74,1.66,1.70,1.81,1.98,2.20,2.45,2.72,2.79,2.89,3.35,3.81,4.80,6.47,7.04,6.96,6.49,5.87,4.90,4.36,4.08,3.94,3.91,4.02,4.24,4.53,3.87,3.48,3.28,3.18,3.37,3.58,3.84,4.15,4.40,4.50,4.37,4.26,4.48,4.70,5.09,5.29,5.41,5.58,5.61,5.57,5.35,5.21,5.18,5.18,5.23,5.35,5.46,5.52,5.58,5.66,5.74,5.79,5.83,5.88,5.91,5.91,5.89,5.83,5.69,5.45,5.36,5.18,5.04,4.81,4.67,5.39,5.96,6.52,6.55,6.08,5.77,5.48,5.14,4.66,4.28,3.67,3.80,4.01,4.29,4.50,5.24,5.49,5.77,5.97,6.14,6.27,6.37,6.45,6.53,6.55,6.47,6.32,6.27,6.22,6.16,6.33,6.39,6.50,6.79,6.95,6.97,6.99,6.88,6.76,6.71,6.74,6.86,6.98,7.06,7.18,7.26,7.35,7.49,7.54,7.65,7.68,7.67,7.54,7.44,7.45,7.52,7.58,7.87,8.18,8.29,8.28,8.35,8.58,8.97,9.50,10.1,10.7,11.2,14.3,16.8,18.0/
      DATA YP1S2/150*0.0/
# 2P10 E=11.3034545 EV  J=1
# SHAPE def FROM B  AND Z ABOVE 30 EV SCALED BY 1/E**3
      DATA X2P10/11.3035,11.306,11.309,11.313,11.320,11.327,11.333,11.340,11.347,11.354,11.361,11.367,11.374,11.381,11.388,11.395,11.402,11.415,11.429,11.442,11.456,11.470,11.483,11.497,11.510,11.524,11.538,11.551,11.565,11.578,11.592,11.606,11.619,11.626,11.633,11.640,11.644,11.646,11.649,11.653,11.660,11.665,11.674,11.687,11.701,11.714,11.728,11.742,11.755,11.762,11.776,11.782,11.796,11.810,11.823,11.837,11.850,11.864,11.878,11.891,11.905,11.919,11.932,11.946,11.959,11.973,11.976,11.980,11.984,11.987,11.989,11.993,12.000,12.007,12.014,12.016,12.021,12.027,12.041,12.055,12.068,12.082,12.095,12.109,12.150,12.163,12.177,12.191,12.204,12.218,12.231,12.245,12.259,12.272,12.286,12.299,12.313,12.327,12.340,12.354,12.367,12.381,12.395,12.408,12.422,12.436,12.449,12.463,12.476,12.490,12.504,12.558,12.612,12.653,12.708,12.748,12.803,12.912,12.966,13.061,13.129,13.252,13.347,13.606,14.014,14.558,14.966,15.510,16.055,16.463,17.007,17.551,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.0/
      DATA Y2P10/0.00,0.64,0.96,1.18,1.48,1.74,2.14,2.61,3.13,3.72,4.35,4.87,5.00,4.66,4.16,3.59,2.85,1.39,0.71,0.58,0.52,0.54,0.57,0.62,0.69,0.76,0.78,0.78,0.76,0.75,0.76,0.80,0.92,1.11,1.54,2.19,2.35,2.27,2.12,1.86,1.52,1.29,1.20,1.15,1.11,1.08,1.06,1.04,1.03,1.03,1.02,1.02,1.02,1.01,1.01,1.01,1.02,1.02,1.03,1.04,1.05,1.06,1.08,1.12,1.22,1.70,1.75,1.63,1.22,1.11,1.13,1.22,1.44,1.75,1.84,1.62,1.21,0.87,0.82,0.86,0.91,0.95,1.02,1.12,1.18,1.17,1.14,1.08,1.05,1.06,1.10,1.15,1.15,1.17,1.17,1.18,1.16,1.14,1.12,1.17,1.14,1.13,1.05,1.01,1.01,1.01,1.02,1.04,1.05,1.06,1.07,1.09,1.10,1.16,1.44,1.11,1.11,1.13,1.07,1.16,1.20,1.25,1.29,1.21,1.23,1.60,1.91,2.64,3.57,4.38,5.45,6.53,7.73,8.54,8.17,7.21,6.26,5.26,4.25,3.39,2.45,2.05/
      DATA YP2P10/142*0.0/
# 2P9 E=11.4430466 EV J=3
# SHAPE def FROM B  AND Z ABOVE 30 EV SCALED BY 1/E**3
      DATA X2P9/11.4430,11.456,11.470,11.483,11.497,11.510,11.524,11.538,11.551,11.565,11.578,11.592,11.606,11.619,11.626,11.633,11.640,11.644,11.646,11.649,11.653,11.660,11.665,11.674,11.687,11.701,11.714,11.728,11.742,11.755,11.762,11.776,11.782,11.796,11.810,11.823,11.837,11.850,11.864,11.878,11.891,11.905,11.919,11.932,11.946,11.959,11.973,11.976,11.980, 11.984,11.987,11.989,11.993,12.000,12.007,12.014,12.016,12.021,12.027,12.041,12.055,12.068,12.082,12.095,12.109,12.150,12.163,12.177,12.191,12.204,12.218,12.231,12.245,12.259,12.272,12.286,12.299,12.313,12.327,12.340,12.354,12.367,12.381,12.395,12.408,12.422,12.436,12.449,12.463,12.476,12.490,12.504,12.558,12.612,12.653,12.748,12.803,12.898,13.061,13.157,13.252,13.497,13.742,14.014,14.996,16.055,17.007,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.000/
      DATA Y2P9/0.00,0.42,0.67,0.75,0.78,0.83,0.95,1.03,1.09,1.02,1.00,1.02,1.08,1.23,1.38,1.59,1.69,1.54,1.40,1.26,1.10,0.97,0.93,0.96,0.99,1.01,1.02,1.04,1.05,1.06,1.06,1.07,1.07,1.08,1.09,1.10,1.11,1.12,1.13,1.14,1.17,1.16,1.18,1.19,1.21,1.23,1.32,1.35,1.39,1.42,1.44,1.47,1.56,1.90,2.82,4.49,4.71,4.20,3.05,2.15,1.92,1.84,1.82,1.80,1.74,1.98,1.94,1.60,1.64,1.73,1.79,1.86,1.85,1.86,1.84,1.80,1.86,1.96,2.05,2.19,1.86,1.68,1.61,1.60,1.57,1.57,1.58,1.60,1.62,1.64,1.66,1.68,1.76,1.82,1.80,1.76,2.00,1.93,1.92,2.08,2.12,2.13,2.16,2.22,3.50,5.50,6.90,7.83,8.15,7.72,6.77,5.84,4.92,4.03,3.31,2.47,2.11/
      DATA YP2P9/117*0.0/
# 2P8 E=11.4446556 EV J=2
# SHAPE def FROM B  AND Z ABOVE 30 EV SCALED BY 1/E
      DATA X2P8/11.4447,11.456,11.470,11.483,11.497,11.510,11.524,11.538,11.551,11.565,11.578,11.592,11.606,11.619,11.626,11.633,11.640,11.644,11.646,11.649,11.653,11.660,11.665,11.674,11.687,11.701,11.714,11.728,11.742,11.755,11.762,11.776,11.782,11.796,11.810,11.823,11.837,11.850,11.864,11.878,11.891,11.905,11.919,11.932,11.946,11.959,11.973,11.976,11.980,11.984,11.987,11.989,11.993,12.000,12.007,12.014,12.016,12.021,12.027,12.041,12.055,12.068,12.082,12.095,12.109,12.150,12.163,12.177,12.191,12.204,12.218,12.231,12.245,12.259,12.272,12.286,12.299,12.313,12.327,12.340,12.354,12.367,12.381,12.395,12.408,12.422,12.436,12.449,12.463,12.476,12.490,12.504,12.558,12.599,12.653,12.708,12.762,12.803,12.898,12.993,13.252,13.497,13.742,14.014,14.558,14.966,15.510,16.055,16.463,17.007,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.0/
      DATA Y2P8/0.00,0.36,0.72,1.01,1.22,1.36,1.45,1.43,1.35,1.29,1.30,1.33,1.38,1.45,1.50,1.59,1.64,1.61,1.57,1.53,1.48,1.44,1.42,1.41,1.43,1.45,1.47,1.48,1.50,1.52,1.53,1.54,1.55,1.57,1.58,1.60,1.61,1.63,1.64,1.66,1.73,1.68,1.69,1.69,1.70,1.71,1.55,1.67,2.20,2.64,2.50,2.31,2.11,1.98,2.05,2.34,2.44,2.45,2.30,2.15,2.09,2.06,2.04,2.06,2.07,1.97,1.97,1.92,1.92,1.95,2.00,2.07,2.12,2.09,2.12,2.16,2.21,2.25,2.33,2.49,2.26,2.08,2.02,2.03,2.02,1.99,1.97,1.96,1.95,1.96,1.97,1.98,2.03,2.06,1.97,2.43,2.30,2.22,2.24,2.36,2.34,2.43,2.51,2.61,3.01,3.52,4.27,4.97,5.45,5.98,6.96,7.70,7.85,7.66,7.37,7.03,6.65,6.30,5.82,5.55/
      DATA YP2P8/120*0.0/
# 2P7 E=11.5261152 EV J=1
# SHAPE def FROM B  AND Z ABOVE 30 EV SCALED BY 1/E**3
      DATA X2P7/11.5261,11.538,11.551,11.565,11.578,11.592,11.606,11.619,11.626,11.633,11.640,11.644,11.646,11.649,11.653,11.660,11.665,11.674,11.687,11.701,11.714,11.728,11.742,11.755,11.762,11.776,11.782,11.796,11.810,11.823,11.837,11.850,11.864,11.878,11.891,11.905,11.919,11.932,11.946,11.959,11.973,11.976,11.980,11.984,11.987,11.989,11.993,12.000,12.007,12.014,12.016,12.021,12.027,12.041,12.055,12.068,12.082,12.095,12.109,12.150,12.163,12.177,12.191,12.204,12.218,12.231,12.245,12.259,12.272,12.286,12.299,12.313,12.327,12.340,12.354,12.367,12.381,12.395,12.408,12.422,12.463,12.504,12.558,12.612,12.653,12.694,12.708,12.735,12.762,12.993,13.197,13.293,13.497,13.742,14.014,14.558,14.966,15.510,16.055,16.599,17.007,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.0/
      DATA Y2P7/0.00,0.21,0.44,0.45,0.45,0.45,0.46,0.49,0.51,0.55,0.57,0.55,0.53,0.51,0.50,0.49,0.50,0.52,0.57,0.60,0.62,0.65,0.66,0.67,0.68,0.68,0.69,0.69,0.70,0.70,0.71,0.71,0.72,0.72,0.72,0.73,0.74,0.74,0.75,0.73,0.78,0.92,1.00,0.80,0.68,0.64,0.62,0.60,0.53,0.51,0.56,0.66,0.74,0.75,0.76,0.74,0.70,0.65,0.81,0.88,0.98,1.20,1.16,1.18,1.23,1.28,1.35,1.31,1.24,1.15,1.10,1.02,0.99,0.99,0.97,0.94,0.88,0.91,0.88,0.86,0.82,0.83,0.87,0.91,0.95,1.05,1.48,1.17,0.99,1.07,1.03,1.06,1.06,1.09,1.19,1.50,1.81,2.33,2.78,3.11,3.25,3.32,3.08,2.76,2.38,2.07,1.80,1.54,1.31,1.03,0.90/ 
      DATA YP2P7/111*0.0/
# 2P6 E=11.5458220 EV J=2
# SHAPE def FROM B  AND Z   SCALED BY 1/E  ABOVE  30 EV
      DATA X2P6/11.5458,11.551,11.565,11.578,11.592,11.606,11.619,11.626,11.633,11.640,11.644,11.646,11.649,11.653,11.660,11.665,11.674,11.687,11.701,11.714,11.728,11.742,11.755,11.762,11.776,11.837,11.905,11.959,11.973,11.976,11.987,12.000,12.007,12.014,12.016,12.021,12.027,12.041,12.055,12.068,12.082,12.095,12.109,12.150,12.163,12.177,12.191,12.204,12.218,12.231,12.245,12.259,12.272,12.286,12.299,12.313,12.327,12.340,12.354,12.367,12.381,12.395,12.408,12.422,12.436,12.449,12.463,12.476,12.490,12.504,12.558,12.599,12.653,12.708,12.762,12.803,12.898,12.993,13.129,13.252,13.497,13.742,14.014,14.558,14.966,15.510,16.055,16.599,17.007,17.415,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.000/
      DATA Y2P6/0.00,0.27,0.84,1.06,1.15,1.20,1.23,1.25,1.28,1.29,1.29,1.28,1.27,1.26,1.26,1.25,1.24,1.23,1.23,1.24,1.25,1.25,1.26,1.26,1.27,1.28,1.27,1.24,1.52,1.49,1.50,1.36,1.45,1.80,1.93,1.97,1.83,1.68,1.62,1.60,1.65,1.91,2.49,2.06,2.00,1.94,1.82,1.75,1.69,1.59,1.51,1.54,1.64,1.83,1.83,1.84,1.80,1.78,1.73,1.68,1.62,1.63,1.60,1.58,1.56,1.53,1.51,1.49,1.48,1.47,1.46,1.49,1.54,1.50,1.66,1.57,1.50,1.45,1.47,1.46,1.39,1.39,1.45,1.70,1.84,2.17,2.53,2.83,3.05,3.16,3.25,3.21,3.07,3.01,2.97,2.93,2.86,2.76,2.55,2.43/
      DATA YP2P6/100*0.0/  
# 2P5 E=11.6660274 EV J=0
# SHAPE def FROM B  AND Z   SCALED BY 1/E ABOVE 108.84 EV
      DATA X2P5/11.6660,11.674,11.687,11.701,11.714,11.728,11.742,11.755,11.762,11.776,11.782,11.796,11.810,11.823,11.837,11.850,11.864,11.878,11.891,11.905,11.919,11.932,11.946,11.959,11.973,11.976,11.980,11.984,11.987,11.989,11.993,12.000,12.007,12.014,12.016,12.021,12.027,12.041,12.055,12.068,12.082,12.095,12.109,12.150,12.163,12.177,12.191,12.204,12.218,12.231,12.245,12.259,12.272,12.286,12.299,12.313,12.327,12.340,12.354,12.367,12.381,12.395,12.408,12.422,12.504,12.558,12.599,12.694,12.708,12.748,12.803,12.912,12.993,13.089,13.252,13.497,13.742,14.014,14.558,14.966,15.510,16.055,16.599,17.007,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.000,32.653,38.096,43.538,54.422,68.028,81.634,95.239,108.84/
      DATA Y2P5/0.00,0.52,0.75,0.87,0.94,0.99,1.03,1.06,1.08,1.11,1.12,1.14,1.16,1.18,1.21,1.23,1.25,1.27,1.30,1.32,1.35,1.38,1.42,1.46,1.33,1.30,1.28,1.43,1.57,1.66,1.76,1.96,2.22,2.24,2.02,1.66,1.40,1.42,1.48,1.54,1.60,1.67,1.89,2.24,2.28,2.26,2.25,2.26,2.25,2.19,2.12,2.16,2.11,2.02,1.86,1.66,1.59,1.74,2.21,2.19,2.18,2.12,2.09,2.10,2.14,2.19,2.24,2.03,2.21,2.74,2.71,2.65,2.52,2.98,2.93,2.87,3.09,3.48,4.86,6.32,8.30,9.88,10.9,10.7,10.7,9.74,8.95,8.27,7.85,7.76,7.21,6.91,6.59,6.42,6.19,5.82,5.54,5.00,4.42,3.92,3.51,3.16/
      DATA YP2P5/102*0.0/
# 3D6 E=11.998135 J=0
#  SHAPE def FRONM B AND Z SCALED BY 1/E**3 ABOVE 54.422 EV
      DATA X3D6/11.9981,12.014,12.068,12.082,12.095,12.109,12.150,12.163,12.177,12.191,12.204,12.218,12.231,12.245,12.259,12.272,12.286,12.299,12.313,12.327,12.340,12.354,12.367,12.381,12.395,12.408,12.449,12.463,12.476,12.490,12.504,12.517,12.558,12.599,12.626,12.640,12.653,12.694,12.748,12.871,12.993,13.129,13.197,13.293,13.402,13.524,13.606,14.014,14.422,14.966,15.510,16.055,16.599,17.007,17.551,17.959,19.048,20.000,21.089,22.041,23.130,24.490,25.851,28.572,30.000,32.653,38.096,43.538,54.422/
      DATA Y3D6/0.00,.053,.058,.069,.088,.119,.155,.155,.157,.136,.135,.136,.149,.118,.112,.113,.117,.120,.120,.117,.126,.147,.140,.136,.126,.123,.123,.122,.121,.119,.118,.117,.117,.118,.117,.113,.107,.124,.157,.151,.163,.194,.230,.245,.248,.265,.280,.344,.442,.548,.802,1.09,1.38,1.61,1.87,2.25,2.53,2.55,2.45,2.33,2.16,1.94,1.79,1.48,1.35,1.14,.765,.539,.269/
      DATA YP3D6/69*0.0/ 
# 3D5 E=12.037029 J=1  RESONANCE RADIATION  103.003 NM   F=0.0053
# SHAPE def FROM B AND Z UP TO 68 EV 
# ABOVE  68 EV USE BEF SCALING 
      DATA X3D5/12.0370,12.041,12.055,12.068,12.082,12.095,12.109,12.150,12.163,12.177,12.191,12.204,12.218,12.231,12.245,12.259,12.272,12.286,12.299,12.313,12.327,12.340,12.354,12.367,12.381,12.395,12.408,12.422,12.436,12.449,12.463,12.476,12.490,12.504,12.558,12.612,12.653,12.708,12.762,12.803,12.898,13.061,13.252,13.524,13.742,14.014,14.286,14.558,14.830,14.966,15.238,15.510,15.783,16.055,16.327,16.599,16.871,17.007,17.279,17.551,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.000,32.653,38.096,43.538,54.422,68.028/                            
      DATA Y3D5/0.00,.084,.113,.139,.173,.216,.238,.352,.381,.395,.409,.439,.505,.568,.427,.392,.403,.407,.390,.348,.353,.369,.431,.417,.412,.393,.397,.406,.414,.420,.423,.425,.426,.427,.429,.434,.416,.476,.492,.548,.581,.646,.773,.851,.955,1.08,1.27,1.50,1.67,1.80,2.16,2.53,2.88,3.27,3.74,4.17,4.63,4.79,5.23,5.61,6.40,7.40,7.54,7.31,6.96,6.48,5.90,5.37,4.63,4.25,3.66,2.73,2.05,1.28,.812/                         
      DATA YP3D5/75*0.0/    
# 2P4 E=12.1003506  J=1
#  SHAPE def FROM B AND Z  SCALED BY 1/E**3 ABOVE 30.0 EV
      DATA X2P4/12.1004,12.109,12.150,12.163,12.177,12.191,12.204,12.218,12.231,12.245,12.259,12.272,12.286,12.299,12.313,12.327,12.340,12.354,12.367,12.381,12.395,12.408,12.449,12.463,12.476,12.490,12.504,12.517,12.531,12.544,12.558,12.599,12.653,12.708,12.762,12.803,12.898,12.993,13.089,13.197,13.293,13.402,13.497,13.606,13.878,14.014,14.558,14.966,15.238,15.510,15.919,16.463,17.007,17.551,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.0/
      DATA Y2P4/0.00,.121,.308,.308,.320,.339,.352,.369,.395,.408,.435,.454,.453,.456,.473,.510,.552,.531,.482,.459,.463,.465,.467,.469,.471,.475,.479,.483,.488,.493,.499,.519,.571,.625,.633,.617,.822,.739,.627,.671,.706,.800,.781,.785,.831,.854,.904,1.09,1.26,1.50,1.80,2.27,2.62,2.88,3.20,3.49,3.48,3.15,2.76,2.34,1.93,1.54,1.17,1.00/
      DATA YP2P4/64*0.0/
# 3D3 E=12.111740 J=2
# SHAPE def FROM B AND Z  SCALED BY 1/E**3 ABOVE 95.239 EV
      DATA X3D3/12.1117,12.150,12.163,12.177,12.191,12.204,12.218,12.231,12.245,12.259,12.272,12.286,12.299,12.313,12.327,12.340,12.354,12.367,12.381,12.395,12.408,12.422,12.436,12.449,12.463,12.476,12.490,12.504,12.517,12.531,12.558,12.572,12.612,12.626,12.640,12.653,12.667,12.694,12.748,12.803,12.898,12.993,13.061,13.129,13.197,13.293,13.402,13.606,13.878,14.150,14.558,14.966,15.510,16.055,16.599,17.007,17.551,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.000,32.653,38.096,43.538,54.422,68.028,81.634,95.239/
      DATA Y3D3/0.00,.573,.543,.494,.395,.352,.346,.389,.400,.364,.352,.345,.335,.318,.269,.246,.325,.343,.389,.413,.420,.432,.447,.460,.472,.480,.486,.490,.492,.494,.496,.496,.495,.493,.488,.482,.476,.447,.584,.610,.616,.578,.663,.735,.815,.860,.870,.949,1.12,1.33,1.85,2.49,3.35,4.06,4.96,5.51,6.45,7.54,8.83,9.11,8.82,8.32,7.70,6.95,6.18,5.19,4.70,3.89,2.63,1.79,.876,.409,.215,.126/
      DATA YP3D3/74*0.0/
# 3D4# E=12.125317  J=4
# SHAPE def FROM B AND Z  SCALED BY 1/E**3 ABOVE  81.634 EV
      DATA X3D4P/12.1253,12.150,12.163,12.177,12.191,12.204,12.218,12.231,12.245,12.259,12.272,12.286,12.299,12.313,12.327,12.340,12.354,12.367,12.381,12.395,12.408,12.422,12.436,12.449,12.463,12.476,12.490,12.504,12.517,12.531,12.558,12.572,12.612,12.626,12.640,12.653,12.667,12.694,12.748,12.803,12.898,12.993,13.061,13.129,13.197,13.293,13.402,13.606,13.878,14.150,14.558,14.966,15.510,16.055,16.599,17.007,17.551,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.000,32.653,38.096,43.538,54.422,68.028,81.634/
      DATA Y3D4P/0.00,.057,.081,.179,.137,.150,.184,.210,.245,.290,.328,.327,.324,.305,.285,.303,.318,.296,.313,.330,.334,.349,.363,.373,.380,.385,.390,.393,.397,.401,.408,.412,.424,.427,.430,.447,.498,.525,.571,.713,.691,.640,.702,.790,.836,.889,.944,1.02,1.20,1.47,1.99,2.69,3.74,4.77,5.64,6.27,7.23,7.37,8.24,8.35,7.91,7.30,6.58,5.73,4.92,3.88,3.41,2.69,1.68,1.09,.508,.232,.122/
      DATA YP3D4P/73*0.0/
# 2P3 E=12.1404262  J=1
# SHAPE def FROM B AND Z  SCALED BY 1/E**3 ABOVE  81.634 EV
      DATA X2P3/12.1404,12.150,12.163,12.177,12.191,12.204,12.218,12.231,12.245,12.259,12.272,12.286,12.299,12.313,12.327,12.340,12.354,12.367,12.381,12.395,12.408,12.422,12.436,12.449,12.463,12.476,12.490,12.504,12.517,12.531,12.558,12.572,12.612,12.626,12.640,12.653,12.667,12.694,12.748,12.803,12.898,12.993,13.061,13.129,13.197,13.293,13.402,13.606,13.878,14.150,14.558,14.966,15.510,16.055,16.599,17.007,17.551,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.000,32.653,38.096,43.538,54.422,68.028,81.634/
      DATA Y2P3/0.00,.108,.284,.400,.456,.485,.496,.544,.568,.536,.506,.485,.484,.495,.509,.559,.593,.581,.576,.562,.559,.551,.543,.537,.533,.532,.532,.534,.536,.540,.551,.557,.580,.586,.591,.613,.729,.777,.646,.678,.873,.725,.672,.632,.644,.667,.723,.657,.690,.652,.676,.818,1.07,1.26,1.74,2.23,2.61,2.94,3.35,3.27,2.86,2.50,2.40,1.75,1.42,1.05,.890,.665,.384,.249,.138,.080,.048/
      DATA YP2P3/73*0.0/
# 2P2 E=12.1436522  J=2
# SHAPE def FROM B AND Z  SCALED BY 1/E  ABOVE  108.84 EV
      DATA X2P2/12.1437,12.150,12.163,12.177,12.191,12.204,12.218,12.231,12.245,12.259,12.272,12.286,12.299,12.313,12.327,12.340,12.354,12.367,12.381,12.395,12.408,12.422,12.436,12.449,12.463,12.476,12.490,12.504,12.517,12.531,12.558,12.572,12.612,12.626,12.640,12.653,12.667,12.694,12.748,12.803,12.898,12.993,13.061,13.129,13.197,13.293,13.402,13.606,13.878,14.150,14.558,14.966,15.510,16.055,16.599,17.007,17.551,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.000,32.653,38.096,43.538,54.422,68.028,81.634,95.239,108.84/
      DATA Y2P2/0.00,.181,.402,.577,.690,.760,.798,.852,.876,.915,.965,1.01,1.02,1.05,1.09,1.17,1.17,1.15,1.15,1.14,1.12,1.11,1.11,1.11,1.12,1.12,1.14,1.15,1.16,1.18,1.21,1.22,1.27,1.28,1.29,1.29,1.35,1.49,1.43,1.66,1.53,1.76,1.52,1.45,1.50,1.56,1.75,1.70,1.64,1.71,1.91,2.24,2.93,3.26,3.79,4.23,4.62,5.05,5.59,5.74,5.62,5.34,5.00,4.65,4.29,3.88,3.66,3.31,2.76,2.38,1.90,1.53,1.28,1.10,.962/
      DATA YP2P2/75*0.0/
# 3D4 E=12.178504  J=3
# SHAPE def FROM B AND Z  SCALED  BY 1/E  ABOVE 108.84 EV
      DATA X3D4/12.1785,12.191,12.204,12.218,12.231,12.245,12.259,12.272,12.286,12.299,12.313,12.327,12.340,12.354,12.367,12.381,12.395,12.408,12.422,12.436,12.449,12.463,12.476,12.558,12.653,12.748,12.803,12.993,13.089,13.388,13.606,14.014,14.286,14.558,14.830,15.102,15.510,15.919,16.463,17.007,17.551,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.000,32.653,38.096,43.538,54.422,68.028,81.634,95.239,108.84/
      DATA Y3D4/0.00,.363,.381,.395,.437,.491,.560,.630,.684,.700,.655,.613,.672,.717,.706,.725,.735,.718,.702,.693,.691,.691,.693,.717,.890,.870,.844,.734,.831,.857,.864,.976,1.20,1.52,1.88,2.20,2.69,3.08,3.67,3.93,4.10,4.36,4.66,4.67,4.50,4.26,3.97,3.62,3.28,2.84,2.63,2.31,1.83,1.52,1.21,1.01,.878,.781,.704/
      DATA YP3D4/59*0.0/
# 2P1 E=12.2564658  J=0
# SHAPE def FROM B AND Z  SCALED BY 1/E ABOVE 108.84 EV
      DATA X2P1/12.2565,12.272,12.286,12.299,12.313,12.327,12.340,12.354,12.367,12.381,12.463,12.504,12.558,12.612,12.653,12.708,12.762,12.803,12.898,12.966,13.061,13.197,13.402,13.551,13.742,14.014,14.558,14.966,15.510,16.055,16.463,17.007,17.551,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.000,32.653,38.096,43.538,54.422,68.028,81.634,95.239,108.84/
      DATA Y2P1/0.00,.200,.261,.282,.298,.321,.378,.554,.540,.517,.478,.489,.518,.560,.508,.642,.789,.647,1.01,.822,.922,.866,.995,1.06,1.11,1.20,1.59,2.23,3.27,4.28,4.85,5.41,5.75,5.98,5.74,5.35,4.96,4.70,4.49,4.30,4.14,3.95,3.86,3.73,3.53,3.38,3.09,2.75,2.46,2.20,2.00/
      DATA YP2P1/51*0.0/   
# 3D1## E=12.257998  J=2  
# SHAPE def FROM B AND Z  SCALED BY 1/E**3 ABOVE 68.028 EV
      DATA X3D1PP/12.2580,12.272,12.286,12.299,12.313,12.327,12.340,12.354,12.367,12.381,12.463,12.504,12.558,12.612,12.653,12.708,12.762,12.803,12.898,12.966,13.061,13.197,13.402,13.551,13.742,14.014,14.558,14.966,15.510,16.055,16.463,17.007,17.551,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.000,32.653,38.096,43.538,54.422,68.028/
      DATA Y3D1PP/0.00,.038,.055,.073,.093,.107,.125,.158,.178,.204,.231,.253,.283,.319,.380,.368,.399,.473,.318,.348,.450,.455,.524,.516,.552,.631,.926,1.24,1.54,1.75,1.99,2.41,2.63,2.60,2.66,2.63,2.50,2.35,2.18,1.97,1.79,1.48,1.33,1.08,.689,.444,.221,.116/
      DATA YP3D1PP/48*0.0/
# 3D1# E=12.284275  J=3
# SHAPE def FROM B AND Z  SCALED BY 1/E ABOVE  38 EV
      DATA X3D1P/12.2843,12.327,12.340,12.354,12.367,12.381,12.463,12.504,12.558,12.612,12.653,12.708,12.762,12.803,12.898,12.966,13.061,13.197,13.402,13.551,13.742,14.014,14.558,14.966,15.510,16.055,16.463,17.007,17.551,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.000,32.653,38.096/
      DATA Y3D1P/0.00,.313,.357,.448,.451,.465,.527,.568,.604,.637,.685,.742,.625,.781,.553,.538,.588,.591,.606,.566,.535,.529,.688,.891,1.24,1.50,1.53,1.59,1.78,1.68,1.56,1.47,1.42,1.41,1.40,1.40,1.37,1.29,1.23,1.11,.913/
      DATA YP3D1P/41*0.0/
# 2S5 E=12.352158  J=2
# SHAPE def FROM B AND Z  SCALED BY 1/E**3 ABOVE 68  EV
      DATA X2S5/12.3522,12.367,12.381,12.395,12.408,12.422,12.463,12.504,12.558,12.612,12.653,12.708,12.762,12.803,12.898,12.966,13.061,13.197,13.402,13.551,13.742,14.014,14.558,14.966,15.510,16.055,16.463,17.007,17.551,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.000,32.653,38.096,43.538,54.422,68.028/
      DATA Y2S5/0.00,.235,.250,.475,.598,.674,.773,.845,.945,1.04,1.06,1.18,.748,.861,1.05,1.05,1.17,1.14,1.12,1.07,1.03,.989,1.09,1.22,1.49,1.76,1.85,1.93,1.98,2.03,1.89,1.73,1.55,1.41,1.28,1.12,.995,.812,.725,.586,.377,.246,.119,.058/
      DATA YP2S5/44*0.0/
# 3D2 E=12.354555  J=1 RESONANCE RADIATION  100.356 NM  F=0.082
#       USE BEF SCALING
#
# 2S4 E=12.3852827 J=1 RESONANCE RADIATION  100.107 NM  F=0.154
#        USE BEF SCALING
#
# 3P10 E=12.7563854 EV J=1  
#       SHAPE def FROM B AND Z SCALED BY 1/E**3 ABOVE 68 EV
      DATA X3P10/12.7564,12.993,14.014,14.966,16.055,17.007,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,68.028/
      DATA Y3P10/0.00,.459,.956,1.41,2.20,2.55,3.05,2.96,2.74,2.38,2.04,1.70,1.36,1.07,0.75,0.61,0.23,0.14,.078,.046/
      DATA YP3P10/20*0.0/
# 3P9  E=12.7847085 EV J=3  
#       SHAPE def FROM B AND Z SCALED BY 1/E**3 ABOVE 68 EV
      DATA X3P9/12.7847,12.993,14.014,14.966,16.055,17.007,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,68.028/
      DATA Y3P9/0.00,.511,1.48,2.40,3.02,3.44,3.57,3.57,3.36,2.94,2.54,2.12,1.72,1.40,1.02,0.86,0.38,0.24,.122,.061/
      DATA YP3P9/20*0.0/
# 3P8  E=12.7853913 EV J=2  
#       SHAPE def FROM B AND Z SCALED BY 1/EN  ABOVE 68 EV
      DATA X3P8/12.7854,12.993,14.014,14.966,16.055,17.007,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,68.028/
      DATA Y3P8/0.00,.575,1.19,2.00,2.64,2.86,3.08,3.11,3.06,2.91,2.74,2.56,2.36,2.17,1.95,1.83,1.38,1.19,0.94,0.75/
      DATA YP3P8/20*0.0/
# 3S1PP E=12.8033935 EV J=2 
#        SHAPE def FROM B AND Z SCALED BY 1/EN**3 ABOVE 68 EV
      DATA X3S1PP/12.8034,12.993,14.014,14.966,16.055,17.007,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,68.028/
      DATA Y3S1PP/0.00,.328,0.84,1.39,2.05,3.41,4.82,6.11,6.68,6.68,6.40,5.94,5.36,4.81,4.05,3.69,2.14,1.49,0.76,0.36/
      DATA YP3S1PP/20*0.0/
# 3P7 E=12.8092373 EV J=1 
#        SHAPE def FROM B AND Z SCALED BY 1/EN**3 ABOVE 68 EV
      DATA X3P7/12.8092,12.993,14.014,14.966,16.055,17.007,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,68.028/
      DATA Y3P7/0.00,0.29,0.64,1.05,1.31,1.26,1.27,1.10,0.96,0.81,0.70,0.60,0.51,0.44,0.35,0.31,0.17,0.12,.088,.067/
      DATA YP3P7/20*0.0/
# 3P6 E=12.8153298 EV J=2 
#        SHAPE def FROM B AND Z SCALED BY 1/EN ABOVE 68 EV
      DATA X3P6/12.8153,12.993,14.014,14.966,16.055,17.007,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,68.028/
      DATA Y3P6/0.00,0.33,1.18,1.44,1.73,1.98,1.95,1.71,1.50,1.34,1.23,1.14,1.04,0.95,0.81,0.75,0.51,0.42,0.32,0.25/
      DATA YP3P6/20*0.0/
# 3S1PPPP E=12.8252582 EV J=2 
#        SHAPE def FROM B AND Z SCALED BY 1/EN**3 ABOVE 68 EV
      DATA X3S1PPPP/12.8253,12.993,14.014,14.966,16.055,17.007,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,68.028/
      DATA Y3S1PPPP/0.00,0.16,0.41,0.83,1.71,2.50,3.10,3.56,3.83,3.78,3.57,3.26,2.89,2.45,1.97,1.75,0.89,0.58,0.27,0.13/
      DATA YP3S1PPPP/20*0.0/
# 3S1PPP E=12.8573390 EV J=3 
#        SHAPE def FROM B AND Z SCALED BY 1/EN ABOVE 68 EV
      DATA X3S1PPP/12.8573,12.993,14.014,14.966,16.055,17.007,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,68.028/
      DATA Y3S1PPP/0.00,0.29,0.54,0.99,2.02,2.69,3.38,3.90,4.10,4.05,3.84,3.55,3.20,2.80,2.33,2.11,1.27,0.98,0.67,0.50/
      DATA YP3S1PPP/20*0.0/
# 3P5 E=12.8648022 EV J=0 
#        SHAPE def FROM B AND Z SCALED BY 1/EN ABOVE 68 EV
      DATA X3P5/12.8648,12.993,14.014,14.966,16.055,17.007,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,68.028/
      DATA Y3P5/0.00,0.56,2.30,4.54,6.23,6.30,6.01,5.23,4.62,4.10,3.79,3.71,3.29,3.07,2.86,2.75,2.39,2.25,2.02,1.79/
      DATA YP3P5/20*0.0/
# 4D5 E=12.8698 EV J=1 RESONANCE RADIATION   96.3338NM  F=0.0140
#       USE BEF SCALING
# 4D6 E=12.9034651 EV J=0 
#        SHAPE def FROM B AND Z SCALED BY 1/EN**3 ABOVE 68 EV
      DATA X4D6/12.9035,12.993,14.014,14.966,16.055,17.007,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,68.028/
      DATA Y4D6/0.00,0.07,0.21,0.32,0.57,0.76,1.09,1.24,1.30,1.28,1.22,1.12,0.98,0.90,0.74,0.67,0.34,0.25,0.12,.056/
      DATA YP4D6/20*0.0/
# 4D4P E=12.972537 EV J=4
#        SHAPE def FROM B AND Z SCALED BY 1/EN**3 ABOVE 68 EV
      DATA X4D4P/12.9725,12.993,14.014,14.966,16.055,17.007,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,68.028/
      DATA Y4D4P/0.00,0.14,0.89,1.48,2.18,3.01,3.72,4.15,4.25,4.08,3.81,3.48,3.07,2.64,2.09,1.84,0.92,0.60,0.28,0.13/
      DATA YP4D4P/20*0.0/
# 3S1P E=13.0043688 EV J=1 RESONANCE RADIATION 95.341 NM F=0.0435
#       USE BEF SCALING
# 
# 4D4 E=13.0079847 EV J=3
#        SHAPE def FROM B AND Z SCALED BY 1/EN  ABOVE 68 EV
      DATA X4D4/13.0080,14.014,14.966,16.055,17.007,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,68.028/
      DATA Y4D4/0.00,1.10,1.37,1.85,2.26,2.34,2.14,1.95,1.78,1.67,1.56,1.46,1.38,1.26,1.20,0.95,0.90,0.84,0.78/
      DATA YP4D4/19*0.0/
# 4D3 E=13.0192383 EV J=2
#        SHAPE def FROM B AND Z SCALED BY 1/EN**3  ABOVE 68 EV
      DATA X4D3/13.0192,14.014,14.966,16.055,17.007,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,68.028/
      DATA Y4D3/0.00,0.65,1.06,1.66,2.16,2.15,2.16,2.08,1.91,1.74,1.58,1.41,1.29,1.05,0.94,0.48,0.32,0.16,0.09/
      DATA YP4D3/19*0.0/
# 2S3 E=13.029666  EV J=0
#        SHAPE def FROM B AND Z SCALED BY 1/EN**3  ABOVE 68 EV
      DATA X2S3/13.0297,14.014,14.966,16.055,17.007,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,68.028/
      DATA Y2S3/0.00,0.13,0.13,0.17,0.27,0.29,0.29,0.27,0.25,0.23,0.21,0.19,0.17,0.15,0.14,.073,.054,.028,.015/
      DATA YP2S3/19*0.0/
# 2S2  E=13.036483  EV J=1 RESONANCE RADIATION 95.106 NM F=0.0105
#       USE BEF SCALING
# 
# 4D1PP E=13.0386113  J=2
#        SHAPE def FROM B AND Z SCALED BY 1/EN**3  ABOVE 68 EV
      DATA X4D1PP/13.0386,14.014,14.966,16.055,17.007,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,68.028/
      DATA Y4D1PP/0.00,0.50,0.80,1.12,1.46,1.64,1.49,1.40,1.29,1.19,1.17,1.02,0.94,0.80,0.73,0.32,0.22,.109,.059/
      DATA YP4D1PP/19*0.0/
# 4D1P E=13.0441877  J=3
#        SHAPE def FROM B AND Z SCALED BY 1/EN**3  ABOVE 68 EV
      DATA X4D1P/13.0442,14.014,14.966,16.055,17.007,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,68.028/
      DATA Y4D1P/0.00,0.63,0.92,1.47,1.58,1.70,1.50,1.30,1.13,1.02,0.95,0.88,0.84,0.71,0.64,0.33,0.22,.123,.084/
      DATA YP4D1P/19*0.0/
# 3S5  E=13.0986140  J=2
#        SHAPE def FROM B AND Z SCALED BY 1/EN**3  ABOVE 68 EV
      DATA X3S5/13.0986,14.014,14.966,16.055,17.007,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,68.028/
      DATA Y3S5/0.00,0.88,1.56,1.89,1.82,2.08,2.37,2.40,2.21,1.96,1.65,1.30,1.02,0.69,0.57,0.22,0.13,.058,.027/
      DATA YP3S5/19*0.0/
# 4D2  E=13.0987356 EV J=1 RESONANCE RADIATION 94.654 NM F=0.0970
#       USE BEF SCALING
#
# 3S4  E=13.1138948 EV J=1 RESONANCE RADIATION 94.545 NM F=0.0808
#       USE BEF SCALING
#
# SUM 4F STATES   E=13.14  J=1,2,5,4,3,2,4,4
#        SHAPE def FROM B AND Z SCALED BY 1/EN  ABOVE 68 EV
      DATA X4FS/13.14,14.014,14.966,16.055,17.007,17.959,19.048,20.000,21.089,22.041,23.130,24.490,26.123,28.572,30.000,38.096,43.538,54.422,68.028/
      DATA Y4FS/0.00,1.58,3.51,4.86,4.89,4.50,3.60,2.89,2.24,1.85,1.49,1.19,0.93,0.69,0.59,0.32,0.25,0.18,0.14/
      DATA YP4FS/19*0.0/
# 5D5  E=13.3501402 EV J=1 RESONANCE RADIATION 92.872 NM F=0.0015
#       USE BEF SCALING
#
# 5D2  E=13.4223741 EV J=1 RESONANCE RADIATION 92.372 NM F=0.0439
#         USE BEF SCALING
#
# 4S4  E=13.4365439 EV J=1 RESONANCE RADIATION 92.274 NM F=0.0203
#         USE BEF SCALING
#
# HIGH E=13.6 EV  SUM OF HIGHER DIPOLE STATES            F=0.168
#         USE BEF SCALING 
# 
#    TOTAL OSCILLATOR STRENGTH =1.1258 1.1058
#
#  BREMSSTRAHLUNG X-SECTION WITH CUT OFF UNITS 10**-24
      DATA Z36T/3500.,2633.,1689.,1126.,708.,367.,226.,146.,97.2,84.6,82.1,82.5,83.1,83.6,84.0,84.5,85.1,86.0,86.5,87.3,87.4,87.8,88.0,88.3,88.4/
      DATA EBRM/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,4.E7,5.E7,6.E7,8.E7,1.E8/
#----------------------------------------------------------------------
#     NANISO=0
      if(NANISO == 0):
 :                                         
       NAME='KRYPTON 2013   ISOTROPIC '
      else:
       NAME='KRYPTON 2013  ANISOTROPIC'
      # endif
#                                                                       
# --------------------------------------------------------------------  
#  DATA ON KRYPTON NOT AS GOOD AS ARGON . FIT TO HUNTERS DRIFT VELOCITY 
#  AND DIFFUSION OF KOZUMI .TOWNS# end COEFFICIENT                        
#   OF KRUITOFF,HEYLEN AND BHATTACHYRA CONSISENT SO AVERAGED AND GOOD   
#   AGREEMENT OBTAINED WITH CALCULATED VALUES.
# 2007: INCREASED UPPER ENERGY LIMIT TO 2MEV
# 2007: INCLUDED NEW ANGULAR DISTRIBUTION def
# 2007: INCLUDED PENNING TRANSFER FRACTION 
# 2011: 51 EXCITATION LEVELS : USED BEF SCALED VALUES FOR DIPOLE STATES
#       THE 1S2 AND 1S4 DIPOLE STATES INCLUDE THE RESONANCE STRUCTURE 
#       CALCULATED BY BARTSCHAT AND ZATSARINNY DBSR MODEL SCALED BY 0.87
#       THE 2P AND HIGHER TRIPLET STATES CALCULATED IN THE DBSR MODEL 
#       ARE ALSO SCALED TO AGREE WITH ELECTRON SCATTERING AND FIT TO THE 
#       TO THE TOWNS# end GAIN MEASUREMENTS. 
#       DRIFT VELOCITY DATA AT HIGH FIELD FROM NAKAMURA IS FIITED BY THE
#       MOMENTUM TRANSFER X-SECTION. 
#       EXPERIMENTAL AND TOTAL X-SECTIONS AGREE TO 1%.
#       THE DRIFT VELOCITY FIT IS BETTER THAN 1% .
#       TOWNS# end CALC IS IN GOOD AGREEMENT WITH JACQUES ET AL AT LOW
#       ELECTRIC FIELD BUT NOW ABOUT 8% BELOW KRUITOFF AT HIGH FIELD.  
# 2013: INTRODUCED K,L AND M SHELL AND CHARGE 1 2 3 AND 4 IONISATIONS
# --------------------------------------------------------------------  
#
#  BORN BETHE VALUES FOR IONISATION
      CONST=1.873884D-20
      EMASS2=1021997.804
      AM2=4.65 
      C=52.7 
# BORN BETHE CONSTANT
      A0=0.52917720859D-8
      RY=13.60569193
      API=numpy.arccos(-1.00)
      BBCONST=16.0*API*A0*A0*RY*RY/EMASS2
# SCALING CONSTANTS 
      AN1S=0.87
      AN2P10=0.4 
      AN2P5=0.4 
      AN2P1=0.4 
      AN2P=0.75
      AN3P=0.60
      AN3P5=0.4 
      AN3D=0.65
      AN4D=0.4
# AVERAGE AUGER EMISSIONS FROM EACH SHELL
      AUGM5=2.0
      AUGM4=2.0
      AUGM3=3.43
      AUGM2=2.0
      AUGM1=3.81
      AUGL3=4.85
      AUGL2=4.41
      AUGL1=6.47
      AUGK=5.91
#
      NION=11
      NATT=1 
      NIN=51
      NNULL=0 
      IONMODEL=0
#
      NBREM=25
      DO 6 J=1,NIN
      IZBR[J]=0
    6 CONTINUE
      IZBR(52)=36
#
      DO 1 J=1,6
    1 KEL[J]=NANISO
      DO 2 J=1,NIN
    2 KIN[J]=NANISO
#                              
      NEL=151                      
      NDATA=162 
      NEPSI=186                                                        
      NIONG=65
      NION2=41
      NION3=35
      NION4=32 
      NKSH=74
      NL1S=83
      NL2S=82
      NL3S=84
      NM1S=91
      NM2S=98
      NM3S=99
      NM4S=105
      NM5S=106
      N1S5=169
      N1S4=130
      N1S3=168
      N1S2=150
      N2P10=142
      N2P9=117
      N2P8=120
      N2P7=111
      N2P6=100
      N2P5=102
      N3D6=69
      N3D5=75
      N2P4=64
      N3D3=74
      N3D4P=73
      N2P3=73
      N2P2=75
      N3D4=59
      N2P1=51
      N3D1PP=48
      N3D1P=41
      N2S5=44
      N3P10=20
      N3P9=20
      N3P8=20
      N3S1PP=20
      N3P7=20
      N3P6=20
      N3S1PPPP=20
      N3S1PPP=20
      N3P5=20
      N4D6=20
      N4D4P=20
      N4D4=19
      N4D3=19
      N2S3=19
      N4D1PP=19
      N4D1P=19
      N3S5=19
      N4FS=19
#
      E[1]=0.0                                                      
      E(2)=2.0*EMASS/(83.798*AMU)                                     
      E(3)=13.9996  
# EXCITATION X-SECTION AT 1.4MEV                   
      E(4)=0.296D-18
#  IONISING X-SECTION AT 1.4MEV                                 
      E(5)=0.1217D-17
# EOBY AT MINIMUM IONISING                          
      E(6)=23.0
# EOBY AT LOW ENERGY
      EOBY[1]=10.0
      EOBY(2)=30.0
      EOBY(3)=60.0
      EOBY(4)=100.
# EOBY FOR SHELLS
      EOBY(5)=175.0
      EOBY(6)=180.0
      EOBY(7)=250.0
      EOBY(8)=1678.4
      EOBY(9)=1730.9
      EOBY(10)=1921.0
      EOBY(11)=14327.26
# AUGER AND FLUORESCENCE DATA
      NC0[1]=0
      EC0[1]=0.0
      WKLM[1]=0.0
      EFL[1]=0.0
      NG1[1]=0
      EG1[1]=0.0
      NG2[1]=0
      EG2[1]=0.0
      NC0(2)=1
      EC0(2)=5.0
      WKLM(2)=0.0
      EFL(2)=0.0
      NG1(2)=0
      EG1(2)=0.0
      NG2(2)=0
      EG2(2)=0.0
      NC0(3)=2
      EC0(3)=10.0
      WKLM(3)=0.0
      EFL(3)=0.0
      NG1(3)=0
      EG1(3)=0.0
      NG2(3)=0
      EG2(3)=0.0
      NC0(4)=3
      EC0(4)=15.
      WKLM(4)=0.0
      EFL(4)=0.0
      NG1(4)=0
      EG1(4)=0.0
      NG2(4)=0
      EG2(4)=0.0
      NC0(5)=3
      EC0(5)=135.1
      WKLM(5)=0.0
      EFL(5)=0.0
      NG1(5)=0
      EG1(5)=0.0
      NG2(5)=0
      EG2(5)=0.0
      NC0(6)=2
      EC0(6)=186.8
      WKLM(6)=0.0
      EFL(6)=0.0
      NG1(6)=0
      EG1(6)=0.0
      NG2(6)=0
      EG2(6)=0.0
      NC0(7)=4
      EC0(7)=200.9
      WKLM(7)=0.0
      EFL(7)=0.0
      NG1(7)=0
      EG1(7)=0.0
      NG2(7)=0
      EG2(7)=0.0
      NC0(8)=5
      EC0(8)=1555.
      WKLM(8)=0.0216
      EFL(8)=1584.
      NG1(8)=3
      EG1(8)=1490.
      NG2(8)=2
      EG2(8)=54.
      NC0(9)=4
      EC0(9)=1619.9
      WKLM(9)=0.0211
      EFL(9)=1636.
      NG1(9)=3
      EG1(9)=1580.
      NG2(9)=2
      EG2(9)=60.
      NC0(10)=7
      EC0(10)=1698.4
      WKLM(10)=0.0022
      EFL(10)=1700.
      NG1(10)=5
      EG1(10)=1538.
      NG2(10)=2
      EG2(10)=160.
      NC0(11)=10
      EC0(11)=13993.
      WKLM(11)=0.65
      EFL(11)=12649.
      NG1(11)=5
      EG1(11)=12438.
      NG2(11)=5
      EG2(11)=1555.
#
      EION[1]=13.99960
      EION(2)=38.35944
      EION(3)=74.029
      EION(4)=124.88
      EION(5)=214.4
      EION(6)=222.2
      EION(7)=292.8
      EION(8)=1678.4
      EION(9)=1730.9
      EION(10)=1921.0
      EION(11)=14327.26
      LEGAS[1]=0
      LEGAS(2)=0
      LEGAS(3)=0
      LEGAS(4)=0
      LEGAS(5)=1
      LEGAS(6)=1
      LEGAS(7)=1
      LEGAS(8)=1
      LEGAS(9)=1
      LEGAS(10)=1
      LEGAS(11)=1
      ISHELL[1]=0
      ISHELL(2)=0
      ISHELL(3)=0
      ISHELL(4)=0
      ISHELL(5)=7
      ISHELL(6)=6
      ISHELL(7)=5
      ISHELL(8)=4
      ISHELL(9)=3
      ISHELL(10)=2
      ISHELL(11)=1
#
      DO 776 J=1,NION
      DO 777 I=1,20000
      if(EG[I]:
 > EION[J]) :
       IOFFION[J]=I-1
       GO TO 776
      # endif
  777 CONTINUE
  776 CONTINUE
#                                   
      EIN[1]=9.9152
      EIN(2)=10.0324
      EIN(3)=10.5624
      EIN(4)=10.6436
      EIN(5)=11.3035
      EIN(6)=11.4430
      EIN(7)=11.4447
      EIN(8)=11.5261
      EIN(9)=11.5458
      EIN(10)=11.6660
      EIN(11)=11.9981
      EIN(12)=12.0370
      EIN(13)=12.1004
      EIN(14)=12.1117
      EIN(15)=12.1253
      EIN(16)=12.1404
      EIN(17)=12.1437
      EIN(18)=12.1785
      EIN(19)=12.2565
      EIN(20)=12.2580
      EIN(21)=12.2843
      EIN(22)=12.3522
      EIN(23)=12.3546
      EIN(24)=12.3853
      EIN(25)=12.7564
      EIN(26)=12.7847
      EIN(27)=12.7854
      EIN(28)=12.8034
      EIN(29)=12.8092
      EIN(30)=12.8153
      EIN(31)=12.8253
      EIN(32)=12.8573
      EIN(33)=12.8648
      EIN(34)=12.8698
      EIN(35)=12.9035
      EIN(36)=12.9725
      EIN(37)=13.0044
      EIN(38)=13.0080
      EIN(39)=13.0192
      EIN(40)=13.0297
      EIN(41)=13.0365
      EIN(42)=13.0386
      EIN(43)=13.0442
      EIN(44)=13.0986
      EIN(45)=13.0987
      EIN(46)=13.1139
      EIN(47)=13.14
      EIN(48)=13.3501
      EIN(49)=13.4224
      EIN(50)=13.4365
      EIN(51)=13.6
      EIN(52)=0.0
#**********************************************************************
# ENTER PENNING TRANSFER FRACTION FOR EACH LEVEL
# USE PENNING TRANSFER FRACTION BETWEEN 0.0 AND 0.2 
      DO 50 NL=1,NIN
      PENFRA[1,NL]=0.0
# PENNING TRANSFER DISTANCE MICRONS
      PENFRA[2,NL]=1.0
# PENNING TRANSFER TIME
   50 PENFRA[3,NL]=1.0
#**********************************************************************
      if(IPEN == 0):
 GO TO 4 
      DO 3 KDUM=1,NIN
      if(PENFRA[1,KDUM] == 0.0):
 GO TO 3
      WRITE(6,999) NAME,EIN(KDUM),PENFRA[1,KDUM],PENFRA[2,KDUM],PENFRA[3,KDUM]
  999 print(' GAS = ',A15,' ENERGY LEVEL = ','%.4f' %,' EV.',/,' PENNING PROBABILITY =','%.3f' % ,' ABS.LENGTH =',F7.2,' DECAY TIME =',F7.1,/)    
    3 CONTINUE
    4 DO 5 NL=1,NIN
      DO 651 I=1,20000
      if(EG[I]:
 > EIN(NL)) :
       IOFFN(NL)=I-1
       GO TO 5
      # endif
  651 CONTINUE
    5 CONTINUE
      SCRPT[1]='                                                  '
      SCRPT(2)=' ELASTIC ANISOTROPIC        KRYPTON               '
      if(NANISO == 0):
 :
      SCRPT(2)=' ELASTIC ISOTROPIC          KRYPTON               '
      # endif
      SCRPT(3)=' IONISATION CHARGE STATE=1      ELOSS=    13.99960'
      SCRPT(4)=' IONISATION CHARGE STATE=2      ELOSS=    38.35944'
      SCRPT(5)=' IONISATION CHARGE STATE=3      ELOSS=    74.029  '
      SCRPT(6)=' IONISATION CHARGE STATE=4      ELOSS=   124.88   '
      SCRPT(7)=' IONISATION    M3 SHELL         ELOSS=   214.4    '
      SCRPT(8)=' IONISATION    M2 SHELL         ELOSS=   222.2    '
      SCRPT(9)=' IONISATION    M1 SHELL         ELOSS=   292.8    '
      SCRPT(10)=' IONISATION    L3 SHELL         ELOSS=  1678.4    '
      SCRPT(11)=' IONISATION    L2 SHELL         ELOSS=  1730.9    '
      SCRPT(12)=' IONISATION    L1 SHELL         ELOSS=  1921.0    '
      SCRPT(13)=' IONISATION    K  SHELL         ELOSS= 14327.26   '
      SCRPT(14)=' ATTACHMENT                                       ' 
      SCRPT(15)='                                                  '
      SCRPT(16)='                                                  '
      SCRPT(17)=' EXC 1S5     J=2 METASTABLE       ELEVEL=   9.9152'
      SCRPT(18)=' EXC 1S4     J=1 RESONANT         ELEVEL=  10.0324'
      SCRPT(19)=' EXC 1S3     J=0 METASTABLE       ELEVEL=  10.5624'
      SCRPT(20)=' EXC 1S2     J=1 RESONANT         ELEVEL=  10.6436'
      SCRPT(21)=' EXC 2P10    J=1                  ELEVEL=  11.3035'
      SCRPT(22)=' EXC 2P9     J=3                  ELEVEL=  11.4430'
      SCRPT(23)=' EXC 2P8     J=2                  ELEVEL=  11.4447'
      SCRPT(24)=' EXC 2P7     J=1                  ELEVEL=  11.5261'
      SCRPT(25)=' EXC 2P6     J=2                  ELEVEL=  11.5458'
      SCRPT(26)=' EXC 2P5     J=0                  ELEVEL=  11.6660'
      SCRPT(27)=' EXC 3D6     J=0                  ELEVEL=  11.9981'
      SCRPT(28)=' EXC 3D5     J=1 RESONANT         ELEVEL=  12.0370'
      SCRPT(29)=' EXC 2P4     J=1                  ELEVEL=  12.1004'
      SCRPT(30)=' EXC 3D3     J=2                  ELEVEL=  12.1117'
      SCRPT(31)=' EXC 3D4#    J=4                  ELEVEL=  12.1253'
      SCRPT(32)=' EXC 2P3     J=1                  ELEVEL=  12.1404'
      SCRPT(33)=' EXC 2P2     J=2                  ELEVEL=  12.1437'
      SCRPT(34)=' EXC 3D4     J=3                  ELEVEL=  12.1785'
      SCRPT(35)=' EXC 2P1     J=0                  ELEVEL=  12.2565'
      SCRPT(36)=' EXC 3D1##   J=2                  ELEVEL=  12.2580'
      SCRPT(37)=' EXC 3D1#    J=3                  ELEVEL=  12.2843'
      SCRPT(38)=' EXC 2S5     J=2                  ELEVEL=  12.3522'
      SCRPT(39)=' EXC 3D2     J=1 RESONANT         ELEVEL=  12.3546'
      SCRPT(40)=' EXC 2S4     J=1 RESONANT         ELEVEL=  12.3853'
      SCRPT(41)=' EXC 3P10    J=1                  ELEVEL=  12.7564'
      SCRPT(42)=' EXC 3P9     J=3                  ELEVEL=  12.7847'
      SCRPT(43)=' EXC 3P8     J=2                  ELEVEL=  12.7854'
      SCRPT(44)=' EXC 3S1##   J=2                  ELEVEL=  12.8034'
      SCRPT(45)=' EXC 3P7     J=1                  ELEVEL=  12.8092'
      SCRPT(46)=' EXC 3P6     J=2                  ELEVEL=  12.8153'
      SCRPT(47)=' EXC 3S1#### J=2                  ELEVEL=  12.8253'
      SCRPT(48)=' EXC 3S1###  J=3                  ELEVEL=  12.8573'
      SCRPT(49)=' EXC 3P5     J=0                  ELEVEL=  12.8648'
      SCRPT(50)=' EXC 4D5     J=1 RESONANT         ELEVEL=  12.8698'
      SCRPT(51)=' EXC 4D6     J=0                  ELEVEL=  12.9035'
      SCRPT(52)=' EXC 4D4#    J=4                  ELEVEL=  12.9725'
      SCRPT(53)=' EXC 3S1#    J=1 RESONANT         ELEVEL=  13.0044'
      SCRPT(54)=' EXC 4D4     J=3                  ELEVEL=  13.0080'
      SCRPT(55)=' EXC 4D3     J=2                  ELEVEL=  13.0192'
      SCRPT(56)=' EXC 2S3     J=0                  ELEVEL=  13.0297'
      SCRPT(57)=' EXC 3S2     J=1 RESONANT         ELEVEL=  13.0365'
      SCRPT(58)=' EXC 4D1##   J=2                  ELEVEL=  13.0386'
      SCRPT(59)=' EXC 4D1#    J=3                  ELEVEL=  13.0442'
      SCRPT(60)=' EXC 3S5     J=2                  ELEVEL=  13.0986'
      SCRPT(61)=' EXC 4D2     J=1 RESONANT         ELEVEL=  13.0987'
      SCRPT(62)=' EXC 3S4     J=1 RESONANT         ELEVEL=  13.1139'
      SCRPT(63)=' EXC 4F   SUM                     ELEVEL=  13.14  '
      SCRPT(64)=' EXC 5D5     J=1 RESONANT         ELEVEL=  13.3501'
      SCRPT(65)=' EXC 5D2     J=1 RESONANT         ELEVEL=  13.4224'
      SCRPT(66)=' EXC 4S4     J=1 RESONANT         ELEVEL=  13.4365'
      SCRPT(67)=' EXC HIGH    J=1 RESONANT         ELEVEL=  13.6   '
      SCRPT(68)=' BREMSSTRAHLUNG FROM KRYPTON ATOM                 '
#      EN=-ESTEP/2.0
      DO 900 I=1,NSTEP      
      EN=EG[I]                           
#      EN=EN+ESTEP
      if(EN > EIN[1]:
) :
       GAMMA1=(EMASS2+2.00*EN)/EMASS2
       GAMMA2=GAMMA1*GAMMA1
       BETA=math.sqrt(1.00-1.00/GAMMA2)
       BETA2=BETA*BETA
      # endif                                                       
      if(EN == 0.0):
 :
       QELA=37.8D-16
       QMOM=37.8D-16        
       GO TO 200
      # endif 
      DO 110 J=2,NEL                                                    
      if(EN <= XEL[J]:
) GO TO 120                                        
  110 CONTINUE                                                          
      J=NEL      
# USE LOG INTERPOLATION 
  120 Y1=math.log(YEL(J-1))
      Y2=math.log(YEL[J])       
      X1=math.log(XEL(J-1))
      X2=math.log(XEL[J])                                                   
      A=(Y2-Y1)/(X2-X1)                         
      B=(X1*Y2-X2*Y1)/(X1-X2)   
      QELA=math.exp((A*math.log(EN)+B))*1.0D-16
      DO 150 J=2,NDATA                                                  
      if(EN <= XEN[J]:
) GO TO 160                                        
  150 CONTINUE                                                          
      J=NDATA
# USE LOG INTERPOLATION 
  160 Y1=math.log(YXSEC(J-1))
      Y2=math.log(YXSEC[J])       
      X1=math.log(XEN(J-1))
      X2=math.log(XEN[J])                                                   
      A=(Y2-Y1)/(X2-X1)                         
      B=(X1*Y2-X2*Y1)/(X1-X2)   
      QMOM=math.exp((A*math.log(EN)+B))*1.0D-16
  200 CONTINUE
      PQ1=0.5+(QELA-QMOM)/QELA
      DO 201 J=2,NEPSI
      if(EN <= XEPS[J]:
) GO TO 202
  201 CONTINUE
      J=NEPSI
  202 A=(YEPS[J]-YEPS(J-1))/(XEPS[J]-XEPS(J-1))
      B=(XEPS(J-1)*YEPS[J]-XEPS[J]*YEPS(J-1))/(XEPS(J-1)-XEPS[J])
      PQ2=A*EN+B
# EPSILON =1.0-YEPS
      PQ2=1.00-PQ2
      if(NANISO == 1):
 PEQEL(2,I)=PQ1
      if(NANISO == 2):
 PEQEL(2,I)=PQ2
      Q(2,I)=QELA
      if(NANISO == 0):
 :
       Q(2,I)=QMOM
       PEQEL(2,I)=0.5
      # endif
# IONISATION FOR CHARGE =1                                      
      QION(1,I)=0.0 
      PEQION(1,I)=0.50
      if(NANISO == 2):
 PEQION(1,I)=0.00                                 
      if(EN <= EION[1]:
) GO TO 225
      if(EN > XION(NIONG):
) GO TO 221                               
      DO 210 J=2,NIONG                                                  
      if(EN <= XION[J]:
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NIONG                                                           
  220 A=(YIN1[J]-YIN1(J-1))/(XION[J]-XION(J-1))                         
      B=(XION(J-1)*YIN1[J]-XION[J]*YIN1(J-1))/(XION(J-1)-XION[J])       
      QION(1,I)=(A*EN+B)*1.0D-16
      GO TO 222
# USE BORN BETHE ABOVE XION(NIONG) EV.
  221 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(1,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.9009 
  222 CONTINUE
# USE ANISOTROPIC SCATTERING FOR PRIMARY IONISATION ELECTRON FOR
# ENERGIES ABOVE 2 * IONISATION ENERGY
# ANISOTROPIC DISTRIBUTION SAME AS ELASTIC AT ENERGY OFFSET BY
# IONISATION ENERGY
      if(EN <= (2.0*EION[1]:
)) GO TO 225
      PEQION(1,I)=PEQEL(2,(I-IOFFION[1]))
# IONISATION FOR CHARGE =2
  225 QION(2,I)=0.00
      PEQION(2,I)=0.50
      if(NANISO == 2):
 PEQION(2,I)=0.00
      if(EN <= EION(2):
) GO TO 2253
      if(EN > XIN2(NION2):
) GO TO 1251
      DO 2251 J=2,NION2
      if(EN <= XIN2[J]:
) GO TO 2252
 2251 CONTINUE
      J=NION2
 2252 A=(YIN2[J]-YIN2(J-1))/(XIN2[J]-XIN2(J-1))
      B=(XIN2(J-1)*YIN2[J]-XIN2[J]*YIN2(J-1))/(XIN2(J-1)-XIN2[J])
      QION(2,I)=(A*EN+B)*1.D-16
      GO TO 1252
# USE BORN BETHE ABOVE XIN2(NION2)
 1251 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(2,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.0613
 1252 CONTINUE
      if(EN <= (2.0*EION(2):
)) GO TO 2253
      PEQION(2,I)=PEQEL(2,(I-IOFFION(2)))
# IONISATION FOR CHARGE =3
 2253 QION(3,I)=0.00
      PEQION(3,I)=0.50
      if(NANISO == 2):
 PEQION(3,I)=0.00
      if(EN <= EION(3):
) GO TO 3256
      if(EN > XIN3(NION3):
) GO TO 1253
      DO 2254 J=2,NION3
      if(EN <= XIN3[J]:
) GO TO 2255
 2254 CONTINUE
      J=NION3
 2255 A=(YIN3[J]-YIN3(J-1))/(XIN3[J]-XIN3(J-1))
      B=(XIN3(J-1)*YIN3[J]-XIN3[J]*YIN3(J-1))/(XIN3(J-1)-XIN3[J])
      QION(3,I)=(A*EN+B)*1.D-16
      GO TO 1254
# USE BORN BETHE ABOVE XIN3(NION3) EV
 1253 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(3,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.0291 
 1254 CONTINUE
      if(EN <= (2.0*EION(3):
)) GO TO 3256
      PEQION(3,I)=PEQEL(2,(I-IOFFION(3)))
# IONISATION FOR CHARGE STATE =4
 3256 QION(4,I)=0.00
      PEQION(4,I)=0.50
      if(NANISO == 2):
 PEQION(4,I)=0.00
      if(EN <= EION(4):
) GO TO 2256
      if(EN > XIN4(NION4):
) GO TO 3253
      DO 3254 J=2,NION4
      if(EN <= XIN4[J]:
) GO TO 3255
 3254 CONTINUE
      J=NION4
 3255 A=(YIN4[J]-YIN4(J-1))/(XIN4[J]-XIN4(J-1))
      B=(XIN4(J-1)*YIN4[J]-XIN4[J]*YIN4(J-1))/(XIN4(J-1)-XIN4[J])
      QION(4,I)=(A*EN+B)*1.D-16
      GO TO 1255
# USE BORN BETHE ABOBVE XIN4(NION4) EV
 3253 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(4,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.0082 
 1255 CONTINUE
      if(EN <= (2.0*EION(4):
)) GO TO 2256
      PEQION(4,I)=PEQEL(2,(I-IOFFION(4)))
#
# M3 SHELL IONISATION
 2256 QION(5,I)=0.00
      PEQION(5,I)=0.50
      if(NANISO == 2):
 PEQION(5,I)=0.00
      if(EN <= EION(5):
) GO TO 2259
      DO 2257 J=2,NM3S
      if(EN <= XM3S[J]:
) GO TO 2258
 2257 CONTINUE
      J=NM3S
 2258 A=(YM3S[J]-YM3S(J-1))/(XM3S[J]-XM3S(J-1))
      B=(XM3S(J-1)*YM3S[J]-XM3S[J]*YM3S(J-1))/(XM3S(J-1)-XM3S[J])
      QION(5,I)=(A*EN+B)*1.D-16
      PEQION(5,I)=PEQEL(2,(I-IOFFION(5)))
# M2 SHELL IONISATION
 2259 QION(6,I)=0.00
      PEQION(6,I)=0.50
      if(NANISO == 2):
 PEQION(6,I)=0.00
      if(EN <= EION(6):
) GO TO 2262
      DO 2260 J=2,NM2S
      if(EN <= XM2S[J]:
) GO TO 2261
 2260 CONTINUE
      J=NM2S
 2261 A=(YM2S[J]-YM2S(J-1))/(XM2S[J]-XM2S(J-1))
      B=(XM2S(J-1)*YM2S[J]-XM2S[J]*YM2S(J-1))/(XM2S(J-1)-XM2S[J])
      QION(6,I)=(A*EN+B)*1.D-16
      PEQION(6,I)=PEQEL(2,(I-IOFFION(6)))
# M1 SHELL IONISATION
 2262 QION(7,I)=0.00
      PEQION(7,I)=0.50
      if(NANISO == 2):
 PEQION(7,I)=0.00
      if(EN <= EION(7):
) GO TO 2265
      DO 2263 J=2,NM1S
      if(EN <= XM1S[J]:
) GO TO 2264
 2263 CONTINUE
      J=NM1S
 2264 A=(YM1S[J]-YM1S(J-1))/(XM1S[J]-XM1S(J-1))
      B=(XM1S(J-1)*YM1S[J]-XM1S[J]*YM1S(J-1))/(XM1S(J-1)-XM1S[J])
      QION(7,I)=(A*EN+B)*1.D-16
      PEQION(7,I)=PEQEL(2,(I-IOFFION(7)))
# L3 SHELL IONISATION
 2265 QION(8,I)=0.00
      PEQION(8,I)=0.50
      if(NANISO == 2):
 PEQION(8,I)=0.00
      if(EN <= EION(8):
) GO TO 2268
      DO 2266 J=2,NL3S
      if(EN <= XL3S[J]:
) GO TO 2267
 2266 CONTINUE
      J=NL3S
 2267 A=(YL3S[J]-YL3S(J-1))/(XL3S[J]-XL3S(J-1))
      B=(XL3S(J-1)*YL3S[J]-XL3S[J]*YL3S(J-1))/(XL3S(J-1)-XL3S[J])
      QION(8,I)=(A*EN+B)*1.D-16
      PEQION(8,I)=PEQEL(2,(I-IOFFION(8)))
# L2 SHELL IONISATION
 2268 QION(9,I)=0.00
      PEQION(9,I)=0.50
      if(NANISO == 2):
 PEQION(9,I)=0.00
      if(EN <= EION(9):
) GO TO 2271
      DO 2269 J=2,NL2S
      if(EN <= XL2S[J]:
) GO TO 2270
 2269 CONTINUE
      J=NL2S
 2270 A=(YL2S[J]-YL2S(J-1))/(XL2S[J]-XL2S(J-1))
      B=(XL2S(J-1)*YL2S[J]-XL2S[J]*YL2S(J-1))/(XL2S(J-1)-XL2S[J])
      QION(9,I)=(A*EN+B)*1.D-16
      PEQION(9,I)=PEQEL(2,(I-IOFFION(9)))
# L1 SHELL IONISATION
 2271 QION(10,I)=0.00
      PEQION(10,I)=0.50
      if(NANISO == 2):
 PEQION(10,I)=0.00
      if(EN <= EION(10):
) GO TO 2274
      DO 2272 J=2,NL1S
      if(EN <= XL1S[J]:
) GO TO 2273
 2272 CONTINUE
      J=NL1S
 2273 A=(YL1S[J]-YL1S(J-1))/(XL1S[J]-XL1S(J-1))
      B=(XL1S(J-1)*YL1S[J]-XL1S[J]*YL1S(J-1))/(XL1S(J-1)-XL1S[J])
      QION(10,I)=(A*EN+B)*1.D-16
      PEQION(10,I)=PEQEL(2,(I-IOFFION(10)))
#  K SHELL IONISATION
 2274 QION(11,I)=0.00
      PEQION(11,I)=0.50
      if(NANISO == 2):
 PEQION(11,I)=0.00
      if(EN <= EION(11):
) GO TO 2277
      DO 2275 J=2,NKSH
      if(EN <= XKSH[J]:
) GO TO 2276
 2275 CONTINUE
      J=NKSH
 2276 A=(YKSH[J]-YKSH(J-1))/(XKSH[J]-XKSH(J-1))
      B=(XKSH(J-1)*YKSH[J]-XKSH[J]*YKSH(J-1))/(XKSH(J-1)-XKSH[J])
      QION(11,I)=(A*EN+B)*1.D-16
      PEQION(11,I)=PEQEL(2,(I-IOFFION(11)))
#  ATTACHMENT                                                    
 2277 Q(4,I)=0.0
# COUNTING IONISATION                                         
      Q(5,I)=0.0
      PEQEL(5,I)=0.50
      if(NANISO == 2):
 PEQEL(5,I)=0.00
      if(EN <= E(3):
) GO TO 242
      if(EN > XION(NIONG):
) GO TO 241
      DO 231 J=2,NIONG
      if(EN <= XION[J]:
) GO TO 240
  231 CONTINUE
      J=NIONG
  240 A=(YINC[J]-YINC(J-1))/(XION[J]-XION(J-1))
      B=(XION(J-1)*YINC[J]-XION[J]*YINC(J-1))/(XION(J-1)-XION[J])
      Q(5,I)=(A*EN+B)*1.D-16
      GO TO 242
# USE BORN BETHE X-SECTION ABOVE XION(NIONG) EV.
  241 Q(5,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2) 
  242 CONTINUE                                                       
# CORRECTION TO SHARGE STATE 1 2 3 AND 4 X-SECTION FOR K L AND M SHELLS
# GIVES TOTAL IONISATION EQUAL TO OSCILLATOR SUM
      QTEMP=QION(5,I)+QION(6,I)+QION(7,I)+QION(8,I)+QION(9,I)+QION(10,I)+QION(11,I)
      if(Q(5,I):
 == 0.0) :
       QCORR=1.0
      else:
       QCORR=(Q(5,I)-QTEMP)/Q(5,I)
      # endif
      QION(1,I)=QION(1,I)*QCORR
      QION(2,I)=QION(2,I)*QCORR
      QION(3,I)=QION(3,I)*QCORR
      QION(4,I)=QION(4,I)*QCORR
#
      Q(6,I)=0.0 
#
      DO 251 NL=1,NIN+1
      QIN(NL,I)=0.00
      PEQIN(NL,I)=0.50
      if(NANISO == 2):
 :
       PEQIN(NL,I)=0.00
      # endif
  251 CONTINUE                                                
# 1S5                                
      if(EN <= EIN[1]:
) GO TO 899
      if(EN > X1S5(N1S5):
) GO TO 352                                
      DO 350 J=2,N1S5                                                  
      if(EN <= X1S5[J]:
) GO TO 351                                      
  350 CONTINUE                                                          
      J=N1S5                                                           
  351 A=(Y1S5[J]-Y1S5(J-1))/(X1S5[J]-X1S5(J-1))                     
      B=(X1S5(J-1)*Y1S5[J]-X1S5[J]*Y1S5(J-1))/(X1S5(J-1)-X1S5[J]) 
      QIN(1,I)=(A*EN+B)*1.0D-18*AN1S
      GO TO 353
# SCALED X-SECTION ABOVE X1S5(N1S5) EV BY 1/E**3
  352 QIN(1,I)=Y1S5(N1S5)*(X1S5(N1S5)/EN)**3*1.0D-18*AN1S
  353 if(EN <= (2.0*EIN[1])) GO TO 354
      PEQIN(1,I)=PEQEL(2,(I-IOFFN[1]))
# 1S4                                                 F=0.203
  354 if(EN <= EIN(2)) GO TO 899
      if(EN > X1S4(N1S4):
) GO TO 357
      DO 355 J=2,N1S4
      if(EN <= X1S4[J]:
) GO TO 356
  355 CONTINUE
      J=N1S4
  356 A=(Y1S4[J]-Y1S4(J-1))/(X1S4[J]-X1S4(J-1))                     
      B=(X1S4(J-1)*Y1S4[J]-X1S4[J]*Y1S4(J-1))/(X1S4(J-1)-X1S4[J]) 
      QIN(2,I)=(A*EN+B)*1.0D-18*AN1S
      GO TO 358
  357 QIN(2,I)=0.203/(EIN(2)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(2)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(2)+E(3))
  358 if(EN <= (2.0*EIN(2))) GO TO 359
      PEQIN(2,I)=PEQEL(2,(I-IOFFN(2)))
# 1S3
  359 if(EN <= EIN(3)) GO TO 899
      if(EN > X1S3(N1S3):
) GO TO 362                                
      DO 360 J=2,N1S3                                                  
      if(EN <= X1S3[J]:
) GO TO 361                                      
  360 CONTINUE                                                          
      J=N1S3                                                           
  361 A=(Y1S3[J]-Y1S3(J-1))/(X1S3[J]-X1S3(J-1))                     
      B=(X1S3(J-1)*Y1S3[J]-X1S3[J]*Y1S3(J-1))/(X1S3(J-1)-X1S3[J]) 
      QIN(3,I)=(A*EN+B)*1.0D-18*AN1S
      GO TO 363
# SCALED X-SECTION ABOVE X1S3(N1S3) EV BY 1/E**3
  362 QIN(3,I)=Y1S3(N1S3)*(X1S3(N1S3)/EN)**3*1.0D-18*AN1S
  363 if(EN <= (2.0*EIN(3))) GO TO 364
      PEQIN(3,I)=PEQEL(2,(I-IOFFN(3)))
# 1S2                                                 F=0.182
  364 if(EN <= EIN(4)) GO TO 899
      if(EN > X1S2(N1S2):
) GO TO 367
      DO 365 J=2,N1S2
      if(EN <= X1S2[J]:
) GO TO 366
  365 CONTINUE
      J=N1S2
  366 A=(Y1S2[J]-Y1S2(J-1))/(X1S2[J]-X1S2(J-1))                     
      B=(X1S2(J-1)*Y1S2[J]-X1S2[J]*Y1S2(J-1))/(X1S2(J-1)-X1S2[J]) 
      QIN(4,I)=(A*EN+B)*1.0D-18*AN1S
      GO TO 368
  367 QIN(4,I)=0.182/(EIN(4)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(4)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(4)+E(3))
  368 if(EN <= (2.0*EIN(4))) GO TO 369
      PEQIN(4,I)=PEQEL(2,(I-IOFFN(4)))
# 2P10
  369 if(EN <= EIN(5)) GO TO 899
      if(EN > X2P10(N2P10):
) GO TO 372                                
      DO 370 J=2,N2P10                                                  
      if(EN <= X2P10[J]:
) GO TO 371                                      
  370 CONTINUE                                                          
      J=N2P10                                                           
  371 A=(Y2P10[J]-Y2P10(J-1))/(X2P10[J]-X2P10(J-1))                     
      B=(X2P10(J-1)*Y2P10[J]-X2P10[J]*Y2P10(J-1))/(X2P10(J-1)-X2P10[J]) 
      QIN(5,I)=(A*EN+B)*1.0D-18*AN2P10
      GO TO 373
# SCALED X-SECTION ABOVE X2P10(N2P10) EV BY 1/E**3
  372 QIN(5,I)=Y2P10(N2P10)*(X2P10(N2P10)/EN)**3*1.0D-18*AN2P10
  373 if(EN <= (2.0*EIN(5))) GO TO 374
      PEQIN(5,I)=PEQEL(2,(I-IOFFN(5)))
# 2P9
  374 if(EN <= EIN(6)) GO TO 899
      if(EN > X2P9(N2P9):
) GO TO 377                                
      DO 375 J=2,N2P9                                                  
      if(EN <= X2P9[J]:
) GO TO 376                                      
  375 CONTINUE                                                          
      J=N2P9                                                           
  376 A=(Y2P9[J]-Y2P9(J-1))/(X2P9[J]-X2P9(J-1))                     
      B=(X2P9(J-1)*Y2P9[J]-X2P9[J]*Y2P9(J-1))/(X2P9(J-1)-X2P9[J]) 
      QIN(6,I)=(A*EN+B)*1.0D-18*AN2P
      GO TO 378
# SCALED X-SECTION ABOVE X2P9(N2P9) EV BY 1/E**3
  377 QIN(6,I)=Y2P9(N2P9)*(X2P9(N2P9)/EN)**3*1.0D-18*AN2P
  378 if(EN <= (2.0*EIN(6))) GO TO 379
      PEQIN(6,I)=PEQEL(2,(I-IOFFN(6)))
# 2P8
  379 if(EN <= EIN(7)) GO TO 899
      if(EN > X2P8(N2P8):
) GO TO 382                                
      DO 380 J=2,N2P8                                                  
      if(EN <= X2P8[J]:
) GO TO 381                                      
  380 CONTINUE                                                          
      J=N2P8                                                           
  381 A=(Y2P8[J]-Y2P8(J-1))/(X2P8[J]-X2P8(J-1))                     
      B=(X2P8(J-1)*Y2P8[J]-X2P8[J]*Y2P8(J-1))/(X2P8(J-1)-X2P8[J]) 
      QIN(7,I)=(A*EN+B)*1.0D-18*AN2P
      GO TO 383
# SCALED X-SECTION ABOVE X2P8(N2P8) EV BY 1/E   
  382 QIN(7,I)=Y2P8(N2P8)*(X2P8(N2P8)/EN)*1.0D-18*AN2P
  383 if(EN <= (2.0*EIN(7))) GO TO 384
      PEQIN(7,I)=PEQEL(2,(I-IOFFN(7)))
# 2P7
  384 if(EN <= EIN(8)) GO TO 899
      if(EN > X2P7(N2P7):
) GO TO 387                                
      DO 385 J=2,N2P7                                                  
      if(EN <= X2P7[J]:
) GO TO 386                                      
  385 CONTINUE                                                          
      J=N2P7                                                           
  386 A=(Y2P7[J]-Y2P7(J-1))/(X2P7[J]-X2P7(J-1))                     
      B=(X2P7(J-1)*Y2P7[J]-X2P7[J]*Y2P7(J-1))/(X2P7(J-1)-X2P7[J]) 
      QIN(8,I)=(A*EN+B)*1.0D-18*AN2P
      GO TO 388
# SCALED X-SECTION ABOVE X2P7(N2P7) EV BY 1/E**3
  387 QIN(8,I)=Y2P7(N2P7)*(X2P7(N2P7)/EN)**3*1.0D-18*AN2P
  388 if(EN <= (2.0*EIN(8))) GO TO 389
      PEQIN(8,I)=PEQEL(2,(I-IOFFN(8)))
# 2P6
  389 if(EN <= EIN(9)) GO TO 899
      if(EN > X2P6(N2P6):
) GO TO 392                                
      DO 390 J=2,N2P6                                                  
      if(EN <= X2P6[J]:
) GO TO 391                                      
  390 CONTINUE                                                          
      J=N2P6                                                           
  391 A=(Y2P6[J]-Y2P6(J-1))/(X2P6[J]-X2P6(J-1))                     
      B=(X2P6(J-1)*Y2P6[J]-X2P6[J]*Y2P6(J-1))/(X2P6(J-1)-X2P6[J]) 
      QIN(9,I)=(A*EN+B)*1.0D-18*AN2P
      GO TO 393
# SCALED X-SECTION ABOVE X2P6(N2P6) EV BY 1/E   
  392 QIN(9,I)=Y2P6(N2P6)*(X2P6(N2P6)/EN)*1.0D-18*AN2P
  393 if(EN <= (2.0*EIN(9))) GO TO 394
      PEQIN(9,I)=PEQEL(2,(I-IOFFN(9)))
# 2P5
  394 if(EN <= EIN(10)) GO TO 899
      if(EN > X2P5(N2P5):
) GO TO 397                                
      DO 395 J=2,N2P5                                                  
      if(EN <= X2P5[J]:
) GO TO 396                                      
  395 CONTINUE                                                          
      J=N2P5                                                           
  396 A=(Y2P5[J]-Y2P5(J-1))/(X2P5[J]-X2P5(J-1))                     
      B=(X2P5(J-1)*Y2P5[J]-X2P5[J]*Y2P5(J-1))/(X2P5(J-1)-X2P5[J]) 
      QIN(10,I)=(A*EN+B)*1.0D-18*AN2P5
      GO TO 398
# SCALED X-SECTION ABOVE X2P5(N2P5) EV BY 1/E   
  397 QIN(10,I)=Y2P5(N2P5)*(X2P5(N2P5)/EN)*1.0D-18*AN2P5
  398 if(EN <= (2.0*EIN(10))) GO TO 399
      PEQIN(10,I)=PEQEL(2,(I-IOFFN(10)))
# 3D6
  399 if(EN <= EIN(11)) GO TO 899
      if(EN > X3D6(N3D6):
) GO TO 402                                
      DO 400 J=2,N3D6                                                  
      if(EN <= X3D6[J]:
) GO TO 401                                      
  400 CONTINUE                                                          
      J=N3D6                                                           
  401 A=(Y3D6[J]-Y3D6(J-1))/(X3D6[J]-X3D6(J-1))                     
      B=(X3D6(J-1)*Y3D6[J]-X3D6[J]*Y3D6(J-1))/(X3D6(J-1)-X3D6[J]) 
      QIN(11,I)=(A*EN+B)*1.0D-18*AN3D
      GO TO 403
# SCALED X-SECTION ABOVE X3D6(N3D6) EV BY 1/E**3
  402 QIN(11,I)=Y3D6(N3D6)*(X3D6(N3D6)/EN)**3*1.0D-18*AN3D
  403 if(EN <= (2.0*EIN(11))) GO TO 404
      PEQIN(11,I)=PEQEL(2,(I-IOFFN(11)))
# 3D5
  404 if(EN <= EIN(12)) GO TO 899
      if(EN > X3D5(N3D5):
) GO TO 407                                
      DO 405 J=2,N3D5                                                  
      if(EN <= X3D5[J]:
) GO TO 406                                      
  405 CONTINUE                                                          
      J=N3D5                                                           
  406 A=(Y3D5[J]-Y3D5(J-1))/(X3D5[J]-X3D5(J-1))                     
      B=(X3D5(J-1)*Y3D5[J]-X3D5[J]*Y3D5(J-1))/(X3D5(J-1)-X3D5[J]) 
      QIN(12,I)=(A*EN+B)*1.0D-18*AN3D
      GO TO 408
# USE BEF SCALING ABOVE X3D5(N3D5) EV                      F=0.0053
  407 QIN(12,I)=0.0053/(EIN(12)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(12)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(12)+E(3))     
      if(QIN(12,I):
 < 0.0) QIN(12,I)=0.00
  408 if(EN <= (2.0*EIN(12))) GO TO 409
      PEQIN(12,I)=PEQEL(2,(I-IOFFN(12)))
# 2P4
  409 if(EN <= EIN(13)) GO TO 899
      if(EN > X2P4(N2P4):
) GO TO 412                                
      DO 410 J=2,N2P4                                                  
      if(EN <= X2P4[J]:
) GO TO 411                                      
  410 CONTINUE                                                          
      J=N2P4                                                           
  411 A=(Y2P4[J]-Y2P4(J-1))/(X2P4[J]-X2P4(J-1))                     
      B=(X2P4(J-1)*Y2P4[J]-X2P4[J]*Y2P4(J-1))/(X2P4(J-1)-X2P4[J]) 
      QIN(13,I)=(A*EN+B)*1.0D-18*AN2P
      GO TO 413
# SCALED X-SECTION ABOVE X2P4(N2P4) EV BY 1/E**3
  412 QIN(13,I)=Y2P4(N2P4)*(X2P4(N2P4)/EN)**3*1.0D-18*AN2P
  413 if(EN <= (2.0*EIN(13))) GO TO 414
      PEQIN(13,I)=PEQEL(2,(I-IOFFN(13)))
# 3D3
  414 if(EN <= EIN(14)) GO TO 899
      if(EN > X3D3(N3D3):
) GO TO 417                                
      DO 415 J=2,N3D3                                                  
      if(EN <= X3D3[J]:
) GO TO 416                                      
  415 CONTINUE                                                          
      J=N3D3                                                           
  416 A=(Y3D3[J]-Y3D3(J-1))/(X3D3[J]-X3D3(J-1))                     
      B=(X3D3(J-1)*Y3D3[J]-X3D3[J]*Y3D3(J-1))/(X3D3(J-1)-X3D3[J]) 
      QIN(14,I)=(A*EN+B)*1.0D-18*AN3D
      GO TO 418
# SCALED X-SECTION ABOVE X3D3(N3D3) EV BY 1/E**3
  417 QIN(14,I)=Y3D3(N3D3)*(X3D3(N3D3)/EN)**3*1.0D-18*AN3D
  418 if(EN <= (2.0*EIN(14))) GO TO 419
      PEQIN(14,I)=PEQEL(2,(I-IOFFN(14)))
# 3D4P
  419 if(EN <= EIN(15)) GO TO 899
      if(EN > X3D4P(N3D4P):
) GO TO 422                                
      DO 420 J=2,N3D4P                                                  
      if(EN <= X3D4P[J]:
) GO TO 421                                      
  420 CONTINUE                                                          
      J=N3D4P                                                           
  421 A=(Y3D4P[J]-Y3D4P(J-1))/(X3D4P[J]-X3D4P(J-1))                     
      B=(X3D4P(J-1)*Y3D4P[J]-X3D4P[J]*Y3D4P(J-1))/(X3D4P(J-1)-X3D4P[J]) 
      QIN(15,I)=(A*EN+B)*1.0D-18*AN3D
      GO TO 423
# SCALED X-SECTION ABOVE X3D4P(N3D4P) EV BY 1/E**3
  422 QIN(15,I)=Y3D4P(N3D4P)*(X3D4P(N3D4P)/EN)**3*1.0D-18*AN3D
  423 if(EN <= (2.0*EIN(15))) GO TO 424
      PEQIN(15,I)=PEQEL(2,(I-IOFFN(15)))
# 2P3 
  424 if(EN <= EIN(16)) GO TO 899
      if(EN > X2P3(N2P3):
) GO TO 427                                
      DO 425 J=2,N2P3                                                  
      if(EN <= X2P3[J]:
) GO TO 426                                      
  425 CONTINUE                                                          
      J=N2P3                                                           
  426 A=(Y2P3[J]-Y2P3(J-1))/(X2P3[J]-X2P3(J-1))                     
      B=(X2P3(J-1)*Y2P3[J]-X2P3[J]*Y2P3(J-1))/(X2P3(J-1)-X2P3[J]) 
      QIN(16,I)=(A*EN+B)*1.0D-18*AN2P
      GO TO 428
# SCALED X-SECTION ABOVE X2P3(N2P3) EV BY 1/E**3
  427 QIN(16,I)=Y2P3(N2P3)*(X2P3(N2P3)/EN)**3*1.0D-18*AN2P
  428 if(EN <= (2.0*EIN(16))) GO TO 429
      PEQIN(16,I)=PEQEL(2,(I-IOFFN(16)))
# 2P2 
  429 if(EN <= EIN(17)) GO TO 899
      if(EN > X2P2(N2P2):
) GO TO 432                                
      DO 430 J=2,N2P2                                                  
      if(EN <= X2P2[J]:
) GO TO 431                                      
  430 CONTINUE                                                          
      J=N2P2                                                           
  431 A=(Y2P2[J]-Y2P2(J-1))/(X2P2[J]-X2P2(J-1))                     
      B=(X2P2(J-1)*Y2P2[J]-X2P2[J]*Y2P2(J-1))/(X2P2(J-1)-X2P2[J]) 
      QIN(17,I)=(A*EN+B)*1.0D-18*AN2P
      GO TO 433
# SCALED X-SECTION ABOVE X2P2(N2P2) EV BY 1/E   
  432 QIN(17,I)=Y2P2(N2P2)*(X2P2(N2P2)/EN)*1.0D-18*AN2P
  433 if(EN <= (2.0*EIN(17))) GO TO 434
      PEQIN(17,I)=PEQEL(2,(I-IOFFN(17)))
# 3D4 
  434 if(EN <= EIN(18)) GO TO 899
      if(EN > X3D4(N3D4):
) GO TO 437                                
      DO 435 J=2,N3D4                                                  
      if(EN <= X3D4[J]:
) GO TO 436                                      
  435 CONTINUE                                                          
      J=N3D4                                                           
  436 A=(Y3D4[J]-Y3D4(J-1))/(X3D4[J]-X3D4(J-1))                     
      B=(X3D4(J-1)*Y3D4[J]-X3D4[J]*Y3D4(J-1))/(X3D4(J-1)-X3D4[J]) 
      QIN(18,I)=(A*EN+B)*1.0D-18*AN3D
      GO TO 438
# SCALED X-SECTION ABOVE X3D4(N3D4) EV BY 1/E   
  437 QIN(18,I)=Y3D4(N3D4)*(X3D4(N3D4)/EN)*1.0D-18*AN3D
  438 if(EN <= (2.0*EIN(18))) GO TO 439
      PEQIN(18,I)=PEQEL(2,(I-IOFFN(18)))
# 2P1 
  439 if(EN <= EIN(19)) GO TO 899
      if(EN > X2P1(N2P1):
) GO TO 442                                
      DO 440 J=2,N2P1                                                  
      if(EN <= X2P1[J]:
) GO TO 441                                      
  440 CONTINUE                                                          
      J=N2P1                                                           
  441 A=(Y2P1[J]-Y2P1(J-1))/(X2P1[J]-X2P1(J-1))                     
      B=(X2P1(J-1)*Y2P1[J]-X2P1[J]*Y2P1(J-1))/(X2P1(J-1)-X2P1[J]) 
      QIN(19,I)=(A*EN+B)*1.0D-18*AN2P1
      GO TO 443
# SCALED X-SECTION ABOVE X2P1(N2P1) EV BY 1/E   
  442 QIN(19,I)=Y2P1(N2P1)*(X2P1(N2P1)/EN)*1.0D-18*AN2P1
  443 if(EN <= (2.0*EIN(19))) GO TO 444
      PEQIN(19,I)=PEQEL(2,(I-IOFFN(19)))
# 3D1PP
  444 if(EN <= EIN(20)) GO TO 899
      if(EN > X3D1PP(N3D1PP):
) GO TO 447                                
      DO 445 J=2,N3D1PP                                                
      if(EN <= X3D1PP[J]:
) GO TO 446
  445 CONTINUE                                    
      J=N3D1PP                                                         
  446 A=(Y3D1PP[J]-Y3D1PP(J-1))/(X3D1PP[J]-X3D1PP(J-1))                
      B=(X3D1PP(J-1)*Y3D1PP[J]-X3D1PP[J]*Y3D1PP(J-1))/(X3D1PP(J-1)-X3D1PP[J]) 
      QIN(20,I)=(A*EN+B)*1.0D-18*AN3D
      GO TO 448
# SCALED X-SECTION ABOVE X3D1PP(N3D1PP) EV BY 1/E**3   
  447 QIN(20,I)=Y3D1PP(N3D1PP)*(X3D1PP(N3D1PP)/EN)**3*1.0D-18*AN3D
  448 if(EN <= (2.0*EIN(20))) GO TO 449
      PEQIN(20,I)=PEQEL(2,(I-IOFFN(20)))
# 3D1P 
  449 if(EN <= EIN(21)) GO TO 899
      if(EN > X3D1P(N3D1P):
) GO TO 452                                
      DO 450 J=2,N3D1P                                                
      if(EN <= X3D1P[J]:
) GO TO 451
  450 CONTINUE                                    
      J=N3D1P                                                         
  451 A=(Y3D1P[J]-Y3D1P(J-1))/(X3D1P[J]-X3D1P(J-1))                
      B=(X3D1P(J-1)*Y3D1P[J]-X3D1P[J]*Y3D1P(J-1))/(X3D1P(J-1)-X3D1P[J]) 
      QIN(21,I)=(A*EN+B)*1.0D-18*AN3D
      GO TO 453
# SCALED X-SECTION ABOVE X3D1P(N3D1P) EV BY 1/E  
  452 QIN(21,I)=Y3D1P(N3D1P)*(X3D1P(N3D1P)/EN)*1.0D-18*AN3D
  453 if(EN <= (2.0*EIN(21))) GO TO 454
      PEQIN(21,I)=PEQEL(2,(I-IOFFN(21)))
# 2S5  
  454 if(EN <= EIN(22)) GO TO 899
      if(EN > X2S5(N2S5):
) GO TO 457                                
      DO 455 J=2,N2S5                                                
      if(EN <= X2S5[J]:
) GO TO 456
  455 CONTINUE                                    
      J=N2S5                                                         
  456 A=(Y2S5[J]-Y2S5(J-1))/(X2S5[J]-X2S5(J-1))                
      B=(X2S5(J-1)*Y2S5[J]-X2S5[J]*Y2S5(J-1))/(X2S5(J-1)-X2S5[J]) 
      QIN(22,I)=(A*EN+B)*1.0D-18*AN1S    
      GO TO 458
# SCALED X-SECTION ABOVE X2S5(N2S5) EV BY 1/E**3  
  457 QIN(22,I)=Y2S5(N2S5)*(X2S5(N2S5)/EN)**3*1.0D-18*AN1S
  458 if(EN <= (2.0*EIN(22))) GO TO 459
      PEQIN(22,I)=PEQEL(2,(I-IOFFN(22)))
# 3D2  BEF SCALED                                         F=0.082
  459 if(EN <= EIN(23)) GO TO 899
      QIN(23,I)=0.082/(EIN(23)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(23)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(23)+E(3))
      if(QIN(23,I):
 < 0.0) QIN(23,I)=0.00
      if(EN <= (2.0*EIN(23):
)) GO TO 460
      PEQIN(23,I)=PEQEL(2,(I-IOFFN(23)))
# 2S4  BEF SCALED                                         F=0.154
  460 if(EN <= EIN(24)) GO TO 899
      QIN(24,I)=0.154/(EIN(24)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(24)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(24)+E(3))
      if(QIN(24,I):
 < 0.0) QIN(24,I)=0.0
      if(EN <= (2.0*EIN(24):
)) GO TO 461
      PEQIN(24,I)=PEQEL(2,(I-IOFFN(24)))
# 3P10 
  461 if(EN <= EIN(25)) GO TO 899
      if(EN > X3P10(N3P10):
) GO TO 464                                
      DO 462 J=2,N3P10                                                
      if(EN <= X3P10[J]:
) GO TO 463
  462 CONTINUE                                    
      J=N3P10                                                         
  463 A=(Y3P10[J]-Y3P10(J-1))/(X3P10[J]-X3P10(J-1))                
      B=(X3P10(J-1)*Y3P10[J]-X3P10[J]*Y3P10(J-1))/(X3P10(J-1)-X3P10[J]) 
      QIN(25,I)=(A*EN+B)*1.0D-18*AN3P
      GO TO 465
# SCALED X-SECTION ABOVE X3P10(N3P10) EV BY 1/E**3  
  464 QIN(25,I)=Y3P10(N3P10)*(X3P10(N3P10)/EN)**3*1.0D-18*AN3P
  465 if(EN <= (2.0*EIN(25))) GO TO 466
      PEQIN(25,I)=PEQEL(2,(I-IOFFN(25)))
# 3P9  
  466 if(EN <= EIN(26)) GO TO 899
      if(EN > X3P9(N3P9):
) GO TO 469                                
      DO 467 J=2,N3P9                                                
      if(EN <= X3P9[J]:
) GO TO 468
  467 CONTINUE                                    
      J=N3P9                                                         
  468 A=(Y3P9[J]-Y3P9(J-1))/(X3P9[J]-X3P9(J-1))                
      B=(X3P9(J-1)*Y3P9[J]-X3P9[J]*Y3P9(J-1))/(X3P9(J-1)-X3P9[J]) 
      QIN(26,I)=(A*EN+B)*1.0D-18*AN3P
      GO TO 470
# SCALED X-SECTION ABOVE X3P9(N3P9) EV BY 1/E**3  
  469 QIN(26,I)=Y3P9(N3P9)*(X3P9(N3P9)/EN)**3*1.0D-18*AN3P
  470 if(EN <= (2.0*EIN(26))) GO TO 471
      PEQIN(26,I)=PEQEL(2,(I-IOFFN(26)))
# 3P8  
  471 if(EN <= EIN(27)) GO TO 899
      if(EN > X3P8(N3P8):
) GO TO 474                                
      DO 472 J=2,N3P8                                                
      if(EN <= X3P8[J]:
) GO TO 473
  472 CONTINUE                                    
      J=N3P8                                                         
  473 A=(Y3P8[J]-Y3P8(J-1))/(X3P8[J]-X3P8(J-1))                
      B=(X3P8(J-1)*Y3P8[J]-X3P8[J]*Y3P8(J-1))/(X3P8(J-1)-X3P8[J]) 
      QIN(27,I)=(A*EN+B)*1.0D-18*AN3P
      GO TO 475
# SCALED X-SECTION ABOVE X3P8(N3P8) EV BY 1/E     
  474 QIN(27,I)=Y3P8(N3P8)*(X3P8(N3P8)/EN)*1.0D-18*AN3P
  475 if(EN <= (2.0*EIN(27))) GO TO 476
      PEQIN(27,I)=PEQEL(2,(I-IOFFN(27)))
# 3S1PP  
  476 if(EN <= EIN(28)) GO TO 899
      if(EN > X3S1PP(N3S1PP):
) GO TO 479                                
      DO 477 J=2,N3S1PP                                                
      if(EN <= X3S1PP[J]:
) GO TO 478
  477 CONTINUE                                    
      J=N3S1PP                                                        
  478 A=(Y3S1PP[J]-Y3S1PP(J-1))/(X3S1PP[J]-X3S1PP(J-1))                
      B=(X3S1PP(J-1)*Y3S1PP[J]-X3S1PP[J]*Y3S1PP(J-1))/(X3S1PP(J-1)-X3S1PP[J]) 
      QIN(28,I)=(A*EN+B)*1.0D-18*AN3D
      GO TO 480
# SCALED X-SECTION ABOVE X3S1PP(N3S1PP) EV BY 1/E**3     
  479 QIN(28,I)=Y3S1PP(N3S1PP)*(X3S1PP(N3S1PP)/EN)**3*1.0D-18*AN3D
  480 if(EN <= (2.0*EIN(28))) GO TO 481
      PEQIN(28,I)=PEQEL(2,(I-IOFFN(28)))
# 3P7    
  481 if(EN <= EIN(29)) GO TO 899
      if(EN > X3P7(N3P7):
) GO TO 484                                
      DO 482 J=2,N3P7                                                
      if(EN <= X3P7[J]:
) GO TO 483
  482 CONTINUE                                    
      J=N3P7                                                        
  483 A=(Y3P7[J]-Y3P7(J-1))/(X3P7[J]-X3P7(J-1))                
      B=(X3P7(J-1)*Y3P7[J]-X3P7[J]*Y3P7(J-1))/(X3P7(J-1)-X3P7[J]) 
      QIN(29,I)=(A*EN+B)*1.0D-18*AN3P
      GO TO 485
# SCALED X-SECTION ABOVE X3P7(N3P7) EV BY 1/E**3     
  484 QIN(29,I)=Y3P7(N3P7)*(X3P7(N3P7)/EN)**3*1.0D-18*AN3P
  485 if(EN <= (2.0*EIN(29))) GO TO 486
      PEQIN(29,I)=PEQEL(2,(I-IOFFN(29)))
# 3P6    
  486 if(EN <= EIN(30)) GO TO 899
      if(EN > X3P6(N3P6):
) GO TO 489                                
      DO 487 J=2,N3P6                                                
      if(EN <= X3P6[J]:
) GO TO 488
  487 CONTINUE                                    
      J=N3P6                                                        
  488 A=(Y3P6[J]-Y3P6(J-1))/(X3P6[J]-X3P6(J-1))                
      B=(X3P6(J-1)*Y3P6[J]-X3P6[J]*Y3P6(J-1))/(X3P6(J-1)-X3P6[J]) 
      QIN(30,I)=(A*EN+B)*1.0D-18*AN3P
      GO TO 490
# SCALED X-SECTION ABOVE X3P6(N3P6) EV BY 1/E        
  489 QIN(30,I)=Y3P6(N3P6)*(X3P6(N3P6)/EN)*1.0D-18*AN3P
  490 if(EN <= (2.0*EIN(30))) GO TO 491
      PEQIN(30,I)=PEQEL(2,(I-IOFFN(30)))
# 3S1PPPP    
  491 if(EN <= EIN(31)) GO TO 899
      if(EN > X3S1PPPP(N3S1PPPP):
) GO TO 494                            
      DO 492 J=2,N3S1PPPP                                            
      if(EN <= X3S1PPPP[J]:
) GO TO 493
  492 CONTINUE                                    
      J=N3S1PPPP                                                        
  493 A=(Y3S1PPPP[J]-Y3S1PPPP(J-1))/(X3S1PPPP[J]-X3S1PPPP(J-1))       
      B=(X3S1PPPP(J-1)*Y3S1PPPP[J]-X3S1PPPP[J]*Y3S1PPPP(J-1))/(X3S1PPPP(J-1)-X3S1PPPP[J]) 
      QIN(31,I)=(A*EN+B)*1.0D-18*AN3D
      GO TO 495
# SCALED X-SECTION ABOVE X3S1PPPP(N3S1PPPP) EV BY 1/E**3        
  494 QIN(31,I)=Y3S1PPPP(N3S1PPPP)*(X3S1PPPP(N3S1PPPP)/EN)**3*1.0D-18*AN3D
  495 if(EN <= (2.0*EIN(31))) GO TO 496
      PEQIN(31,I)=PEQEL(2,(I-IOFFN(31)))
# 3S1PPP    
  496 if(EN <= EIN(32)) GO TO 899
      if(EN > X3S1PPP(N3S1PPP):
) GO TO 499                            
      DO 497 J=2,N3S1PPP                                            
      if(EN <= X3S1PPP[J]:
) GO TO 498
  497 CONTINUE                                    
      J=N3S1PPP                                                        
  498 A=(Y3S1PPP[J]-Y3S1PPP(J-1))/(X3S1PPP[J]-X3S1PPP(J-1))       
      B=(X3S1PPP(J-1)*Y3S1PPP[J]-X3S1PPP[J]*Y3S1PPP(J-1))/(X3S1PPP(J-1)-X3S1PPP[J]) 
      QIN(32,I)=(A*EN+B)*1.0D-18*AN3D
      GO TO 500
# SCALED X-SECTION ABOVE X3S1PPP(N3S1PPP) EV BY 1/E        
  499 QIN(32,I)=Y3S1PPP(N3S1PPP)*(X3S1PPP(N3S1PPP)/EN)*1.0D-18*AN3D
  500 if(EN <= (2.0*EIN(32))) GO TO 501
      PEQIN(32,I)=PEQEL(2,(I-IOFFN(32)))
# 3P5    
  501 if(EN <= EIN(33)) GO TO 899
      if(EN > X3P5(N3P5):
) GO TO 504                            
      DO 502 J=2,N3P5                                            
      if(EN <= X3P5[J]:
) GO TO 503
  502 CONTINUE                                    
      J=N3P5                                                        
  503 A=(Y3P5[J]-Y3P5(J-1))/(X3P5[J]-X3P5(J-1))       
      B=(X3P5(J-1)*Y3P5[J]-X3P5[J]*Y3P5(J-1))/(X3P5(J-1)-X3P5[J]) 
      QIN(33,I)=(A*EN+B)*1.0D-18*AN3P5
      GO TO 505
# SCALED X-SECTION ABOVE X3P5(N3P5) EV BY 1/E        
  504 QIN(33,I)=Y3P5(N3P5)*(X3P5(N3P5)/EN)*1.0D-18*AN3P5
  505 if(EN <= (2.0*EIN(33))) GO TO 506
      PEQIN(33,I)=PEQEL(2,(I-IOFFN(33)))
# 4D5  BEF SCALED                                          F=0.0140
  506 if(EN <= EIN(34)) GO TO 899
      QIN(34,I)=0.014/(EIN(34)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(34)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(34)+E(3))
      if(QIN(34,I):
 < 0.0) QIN(34,I)=0.00
      if(EN <= (2.0*EIN(34):
)) GO TO 507
      PEQIN(34,I)=PEQEL(2,(I-IOFFN(34)))
# 4D6    
  507 if(EN <= EIN(35)) GO TO 899
      if(EN > X4D6(N4D6):
) GO TO 510                            
      DO 508 J=2,N4D6                                            
      if(EN <= X4D6[J]:
) GO TO 509
  508 CONTINUE                                    
      J=N4D6                                                        
  509 A=(Y4D6[J]-Y4D6(J-1))/(X4D6[J]-X4D6(J-1))       
      B=(X4D6(J-1)*Y4D6[J]-X4D6[J]*Y4D6(J-1))/(X4D6(J-1)-X4D6[J]) 
      QIN(35,I)=(A*EN+B)*1.0D-18*AN4D
      GO TO 511
# SCALED X-SECTION ABOVE X4D6(N4D6) EV BY 1/E**3     
  510 QIN(35,I)=Y4D6(N4D6)*(X4D6(N4D6)/EN)**3*1.0D-18*AN4D
  511 if(EN <= (2.0*EIN(35))) GO TO 512
      PEQIN(35,I)=PEQEL(2,(I-IOFFN(35)))
# 4D4P   
  512 if(EN <= EIN(36)) GO TO 899
      if(EN > X4D4P(N4D4P):
) GO TO 515                            
      DO 513 J=2,N4D4P                                            
      if(EN <= X4D4P[J]:
) GO TO 514
  513 CONTINUE                                    
      J=N4D4P                                                       
  514 A=(Y4D4P[J]-Y4D4P(J-1))/(X4D4P[J]-X4D4P(J-1))       
      B=(X4D4P(J-1)*Y4D4P[J]-X4D4P[J]*Y4D4P(J-1))/(X4D4P(J-1)-X4D4P[J]) 
      QIN(36,I)=(A*EN+B)*1.0D-18*AN4D
      GO TO 516
# SCALED X-SECTION ABOVE X4D4P(N4D4P) EV BY 1/E**3     
  515 QIN(36,I)=Y4D4P(N4D4P)*(X4D4P(N4D4P)/EN)**3*1.0D-18*AN4D
  516 if(EN <= (2.0*EIN(36))) GO TO 517
      PEQIN(36,I)=PEQEL(2,(I-IOFFN(36)))
# 3S1P        BEF SCALED                                     F=0.0435
  517 if(EN <= EIN(37)) GO TO 899
      QIN(37,I)=0.0435/(EIN(37)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(37)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(37)+E(3))
      if(QIN(37,I):
 < 0.0) QIN(37,I)=0.00
      if(EN <= (2.0*EIN(37):
)) GO TO 518
      PEQIN(37,I)=PEQEL(2,(I-IOFFN(37)))
# 4D4    
  518 if(EN <= EIN(38)) GO TO 899
      if(EN > X4D4(N4D4):
) GO TO 521                          
      DO 519 J=2,N4D4                                            
      if(EN <= X4D4[J]:
) GO TO 520
  519 CONTINUE                                    
      J=N4D4                                                       
  520 A=(Y4D4[J]-Y4D4(J-1))/(X4D4[J]-X4D4(J-1))       
      B=(X4D4(J-1)*Y4D4[J]-X4D4[J]*Y4D4(J-1))/(X4D4(J-1)-X4D4[J]) 
      QIN(38,I)=(A*EN+B)*1.0D-18*AN4D
      GO TO 522
# SCALED X-SECTION ABOVE X4D4(N4D4) EV BY 1/E     
  521 QIN(38,I)=Y4D4(N4D4)*(X4D4(N4D4)/EN)*1.0D-18*AN4D
  522 if(EN <= (2.0*EIN(38))) GO TO 523
      PEQIN(38,I)=PEQEL(2,(I-IOFFN(38)))
# 4D3    
  523 if(EN <= EIN(39)) GO TO 899
      if(EN > X4D3(N4D3):
) GO TO 526                            
      DO 524 J=2,N4D3                                            
      if(EN <= X4D3[J]:
) GO TO 525
  524 CONTINUE                                    
      J=N4D3                                                       
  525 A=(Y4D3[J]-Y4D3(J-1))/(X4D3[J]-X4D3(J-1))       
      B=(X4D3(J-1)*Y4D3[J]-X4D3[J]*Y4D3(J-1))/(X4D3(J-1)-X4D3[J]) 
      QIN(39,I)=(A*EN+B)*1.0D-18*AN4D
      GO TO 527
# SCALED X-SECTION ABOVE X4D3(N4D3) EV BY 1/E**3  
  526 QIN(39,I)=Y4D3(N4D3)*(X4D3(N4D3)/EN)**3*1.0D-18*AN4D
  527 if(EN <= (2.0*EIN(39))) GO TO 528
      PEQIN(39,I)=PEQEL(2,(I-IOFFN(39)))
# 2S3    
  528 if(EN <= EIN(40)) GO TO 899
      if(EN > X2S3(N2S3):
) GO TO 531                        
      DO 529 J=2,N2S3                                            
      if(EN <= X2S3[J]:
) GO TO 530
  529 CONTINUE                                    
      J=N2S3                                                       
  530 A=(Y2S3[J]-Y2S3(J-1))/(X2S3[J]-X2S3(J-1))       
      B=(X2S3(J-1)*Y2S3[J]-X2S3[J]*Y2S3(J-1))/(X2S3(J-1)-X2S3[J]) 
      QIN(40,I)=(A*EN+B)*1.0D-18*AN1S     
      GO TO 532
# SCALED X-SECTION ABOVE X2S3(N2S3) EV BY 1/E**3  
  531 QIN(40,I)=Y2S3(N2S3)*(X2S3(N2S3)/EN)**3*1.0D-18*AN1S
  532 if(EN <= (2.0*EIN(40))) GO TO 533
      PEQIN(40,I)=PEQEL(2,(I-IOFFN(40)))
# 2S2         BEF SCALED                                 F=0.0105
  533 if(EN <= EIN(41)) GO TO 899
      QIN(41,I)=0.0105/(EIN(41)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(41)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(41)+E(3))
      if(QIN(41,I):
 < 0.0) QIN(41,I)=0.00
      if(EN <= (2.0*EIN(41):
)) GO TO 534
      PEQIN(41,I)=PEQEL(2,(I-IOFFN(41)))
# 4D1PP    
  534 if(EN <= EIN(42)) GO TO 899
      if(EN > X4D1PP(N4D1PP):
) GO TO 537                            
      DO 535 J=2,N4D1PP                                            
      if(EN <= X4D1PP[J]:
) GO TO 536
  535 CONTINUE                                    
      J=N4D1PP                                                       
  536 A=(Y4D1PP[J]-Y4D1PP(J-1))/(X4D1PP[J]-X4D1PP(J-1))       
      B=(X4D1PP(J-1)*Y4D1PP[J]-X4D1PP[J]*Y4D1PP(J-1))/(X4D1PP(J-1)-X4D1PP[J]) 
      QIN(42,I)=(A*EN+B)*1.0D-18*AN4D
      GO TO 538
# SCALED X-SECTION ABOVE X4D1PP(N4D1PP) EV BY 1/E**3  
  537 QIN(42,I)=Y4D1PP(N4D1PP)*(X4D1PP(N4D1PP)/EN)**3*1.0D-18*AN4D
  538 if(EN <= (2.0*EIN(42))) GO TO 539
      PEQIN(42,I)=PEQEL(2,(I-IOFFN(42)))
# 4D1P   
  539 if(EN <= EIN(43)) GO TO 899
      if(EN > X4D1P(N4D1P):
) GO TO 542                            
      DO 540 J=2,N4D1P                                            
      if(EN <= X4D1P[J]:
) GO TO 541
  540 CONTINUE                                    
      J=N4D1P                                                       
  541 A=(Y4D1P[J]-Y4D1P(J-1))/(X4D1P[J]-X4D1P(J-1))       
      B=(X4D1P(J-1)*Y4D1P[J]-X4D1P[J]*Y4D1P(J-1))/(X4D1P(J-1)-X4D1P[J]) 
      QIN(43,I)=(A*EN+B)*1.0D-18*AN4D
      GO TO 543
# SCALED X-SECTION ABOVE X4D1P(N4D1P) EV BY 1/E**3  
  542 QIN(43,I)=Y4D1P(N4D1P)*(X4D1P(N4D1P)/EN)**3*1.0D-18*AN4D
  543 if(EN <= (2.0*EIN(43))) GO TO 544
      PEQIN(43,I)=PEQEL(2,(I-IOFFN(43)))
# 3S5    
  544 if(EN <= EIN(44)) GO TO 899
      if(EN > X3S5(N3S5):
) GO TO 547                            
      DO 545 J=2,N3S5                                           
      if(EN <= X3S5[J]:
) GO TO 546
  545 CONTINUE                                    
      J=N3S5                                                       
  546 A=(Y3S5[J]-Y3S5(J-1))/(X3S5[J]-X3S5(J-1))       
      B=(X3S5(J-1)*Y3S5[J]-X3S5[J]*Y3S5(J-1))/(X3S5(J-1)-X3S5[J]) 
      QIN(44,I)=(A*EN+B)*1.0D-18*AN1S
      GO TO 548
# SCALED X-SECTION ABOVE X3S5(N3S5) EV BY 1/E**3  
  547 QIN(44,I)=Y3S5(N3S5)*(X3S5(N3S5)/EN)**3*1.0D-18*AN1S
  548 if(EN <= (2.0*EIN(44))) GO TO 549
      PEQIN(44,I)=PEQEL(2,(I-IOFFN(44)))
# 4D2         BEF SCALED                                   F=0.0970
  549 if(EN <= EIN(45)) GO TO 899
      QIN(45,I)=0.0970/(EIN(45)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(45)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(45)+E(3))
      if(QIN(45,I):
 < 0.0) QIN(45,I)=0.00
      if(EN <= (2.0*EIN(45):
)) GO TO 550
      PEQIN(45,I)=PEQEL(2,(I-IOFFN(45)))
# 3S4         BEF SCALED                                   F=0.0808
  550 if(EN <= EIN(46)) GO TO 899
      QIN(46,I)=0.0808/(EIN(46)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(46)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(46)+E(3))
      if(QIN(46,I):
 < 0.0) QIN(46,I)=0.00
      if(EN <= (2.0*EIN(46):
)) GO TO 551 
      PEQIN(46,I)=PEQEL(2,(I-IOFFN(46)))
# 4FS   
  551 if(EN <= EIN(47)) GO TO 899
      if(EN > X4FS(N4FS):
) GO TO 554                            
      DO 552 J=2,N4FS                                           
      if(EN <= X4FS[J]:
) GO TO 553
  552 CONTINUE                                    
      J=N4FS                                                       
  553 A=(Y4FS[J]-Y4FS(J-1))/(X4FS[J]-X4FS(J-1))       
      B=(X4FS(J-1)*Y4FS[J]-X4FS[J]*Y4FS(J-1))/(X4FS(J-1)-X4FS[J]) 
      QIN(47,I)=(A*EN+B)*1.0D-18*AN4D
      GO TO 555
# SCALED X-SECTION ABOVE X4FS(N4FS) EV BY 1/E  
  554 QIN(47,I)=Y4FS(N4FS)*(X4FS(N4FS)/EN)*1.0D-18*AN4D
  555 if(EN <= (2.0*EIN(47))) GO TO 556
      PEQIN(47,I)=PEQEL(2,(I-IOFFN(47)))
# 5D5         BEF SCALED                                  F=0.0015
  556 if(EN <= EIN(48)) GO TO 899
      QIN(48,I)=0.0015/(EIN(48)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(48)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(48)+E(3))
      if(QIN(48,I):
 < 0.0) QIN(48,I)=0.00
      if(EN <= (2.0*EIN(48):
)) GO TO 557
      PEQIN(48,I)=PEQEL(2,(I-IOFFN(48)))
# 5D2         BEF SCALED                                   F=0.0439
  557 if(EN <= EIN(49)) GO TO 899
      QIN(49,I)=0.0439/(EIN(49)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(49)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(49)+E(3))
      if(QIN(49,I):
 < 0.0) QIN(49,I)=0.00
      if(EN <= (2.0*EIN(49):
)) GO TO 558
      PEQIN(49,I)=PEQEL(2,(I-IOFFN(49)))
# 4S4         BEF SCALED                                   F=0.0203
  558 if(EN <= EIN(50)) GO TO 899
      QIN(50,I)=0.0203/(EIN(50)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(50)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(50)+E(3))
      if(QIN(50,I):
 < 0.0) QIN(50,I)=0.00
      if(EN <= (2.0*EIN(50):
)) GO TO 559
      PEQIN(50,I)=PEQEL(2,(I-IOFFN(50)))
# SUM OF HIGHER DIPOLE STATES       BEF SCALED              F=0.1680
  559 if(EN <= EIN(51)) GO TO 899
      QIN(51,I)=0.1680/(EIN(51)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(51)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(51)+E(3))
      if(QIN(51,I):
 < 0.0) QIN(51,I)=0.00
      if(EN <= (2.0*EIN(51):
)) GO TO 899
      PEQIN(51,I)=PEQEL(2,(I-IOFFN(51)))
# LOAD BREMSSTRAHLUNG X-SECTIONS
      if(EN <= 1000.):
 GO TO 899
      DO 600 J=2,NBREM
      if(EN <= EBRM[J]:
) GO TO 610
  600 CONTINUE
      J=NBREM
  610 A=(math.log(Z36T[J])-math.log(Z36T(J-1)))/(EBRM[J]-EBRM(J-1))
      B=(math.log(Z36T[J])*EBRM(J-1)-math.log(Z36T(J-1))*EBRM[J])/(EBRM(J-1)-EBRM[J])
      QIN(52,I)=math.exp(A*EN+B)*1.D-24
  899 CONTINUE  
# 
# CALCULATE TOTAL X-SECTION                           
      Q1SUM=QIN(1,I)+QIN(2,I)+QIN(3,I)+QIN(4,I) 
      Q2SUM=QIN(5,I)+QIN(6,I)+QIN(7,I)+QIN(8,I)+QIN(9,I)+QIN(10,I)
      Q3SUM=0.0
      Q4SUM=0.0
      DO 700 JK=11,24
  700 Q3SUM=Q3SUM+QIN(JK,I)
      DO 701 JK=25,51
  701 Q4SUM=Q4SUM+QIN(JK,I)
      QINEL=Q1SUM+Q2SUM+Q3SUM+Q4SUM
      Q(1,I)=QELA+QINEL+QION(1,I)+QION(2,I)+QION(3,I)+QION(4,I)+QION(5,I)+QION(6,I)+QION(7,I)+QION(8,I)+QION(9,I)+QION(10,I)+QION(11,I)+QIN(52,I)
#     WRITE(6,8976) EN,Q1SUM,Q2SUM,Q3SUM,Q4SUM,QINEL
#8976 print(' EN=',F9.1,' Q1=','%.3f' %,' Q2=','%.3f' %,' Q3=','%.3f' %,' Q4=',
#    /'%.3f' %,' QSUM=','%.3f' %)       
  900 CONTINUE  
#  SAVE COMPUTE TIME 
      DO 910 K=1,NIN
      if(EFINAL <= EIN[K]:
) :
       NIN=K-1
       GO TO 911
      # endif 
  910 CONTINUE
  911 CONTINUE
      if(EFINAL > 1000.):
 NIN=52
      RETURN                                                            
      # end
      def GAS7(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN) 
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000)
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6)         
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)   
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION XEN(182),YMOM(182),XEL(153),YEL(153),XEPS(182),YEPS(182)
      DIMENSION XION(76),YION(76),YINC(76),YIN1(76),XIN2(54),YIN2(54),XIN3(47),YIN3(47),XIN4(42),YIN4(42),XIN5(37),YIN5(37),XIN6(35),YIN6(35),XKSH(60),YKSH(60),XL1S(76),YL1S(76),XL2S(76),YL2S(76),XL3S(76),YL3S(76),XM1S(79),YM1S(79),XM2S(80),YM2S(80),XM3S(80),YM3S(80),XM4S(82),YM4S(82),XM5S(83),YM5S(83)
      DIMENSION X1S5(70),Y1S5(70),YP1S5(70),X1S4(38),Y1S4(38),YP1S4(38),X1S3(46),Y1S3(46),YP1S3(46),X1S2(20),Y1S2(20),YP1S2(20),X2P10(22),Y2P10(22),YP2P10(22),X2P9(21),Y2P9(21),YP2P9(21),X2P8(22),Y2P8(22),YP2P8(22),X2P7(22),Y2P7(22),YP2P7(22),X2P6(22),Y2P6(22),YP2P6(22),X3D6(24),Y3D6(24),YP3D6(24),X2P5(15),Y2P5(15),YP2P5(15),X3D4P(24),Y3D4P(24),YP3D4P(24),X3D3(24),Y3D3(24),YP3D3(24),X3D4(26),Y3D4(26),YP3D4(26),X3D1PP(23),Y3D1PP(23),YP3D1PP(23),X3D1P(22),Y3D1P(22),YP3D1P(22),X2S5(18),Y2S5(18),YP2S5(18),X3P105(18),Y3P105(18),YP3P105(18),X2P4(14),Y2P4(14),YP2P4(14),X4DSUM(16),Y4DSUM(16),YP4DSUM(16),X2P3(14),Y2P3(14),YP2P3(14),X2P2(14),Y2P2(14),YP2P2(14),X2P1(15),Y2P1(15),YP2P1(15),IOFFN(50),IOFFION(12) 
      DIMENSION Z54T(25),EBRM(25)
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
#   ELASTIC MOMENTUM TRANSFER                                           
      DATA XEN/0.00,.001,.005,.007,0.01,.015,0.02,.025,0.03,0.04,0.05,0.06,0.07,0.08,0.10,0.12,0.14,0.17,0.20,0.25, 0.27,0.30,0.32,0.35,0.37,0.40,0.42,0.44,0.46,0.48,0.50,0.51,0.52,0.53,0.54,0.55,0.56,0.57,0.58,0.59,0.60,0.61,0.62,0.63,0.64,0.65,0.66,0.67,0.68,0.69,0.70,.715,0.73,0.75,0.77,0.80,0.83,0.85,0.87,0.90,1.00,1.08,1.14,1.20,1.30,1.40,1.50,1.70,2.00,2.50,  3.00,3.50,4.00,4.50,5.00,5.50,6.00,6.50,7.00,8.00,                9.00,10.0,12.0,15.0,18.0,20.0,25.0,30.0,40.0,50.0,                60.0,70.0,80.0,90.0,100.,125.,150.,200.,250.,300.,                400.,500.,600.,700.,800.,1000.,1500.,2000.,3000.,4000.,           5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,     8.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5'%.3f' %.0'%.3f' %.5D5,4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,2.0D6,2.5'%.3f' %.0'%.3f' %.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5'%.3f' %.0'%.3f' %.5D7,4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,1.0D8,1.25D8,1.5D8,1.75D8,2.0D8,2.5'%.3f' %.0'%.3f' %.5D8,4.0D8,4.5D8,5.0D8,6.0D8,7.0D8,8.0D8,9.0D8,1.0D9/
      DATA YMOM/131.,115.,97.0,91.1,83.9,74.6,67.3,61.2,56.1,47.9,41.4,36.2,31.8,28.2,22.5,18.1,14.8,11.1,8.36,5.33,4.47,3.43,2.88,2.22,1.86,1.43,1.20,1.01,.844,.708,.596,.548,.504,.465,.430,.399,.372,.348,.328,.310,.296,.285,.276,.270,.266,.265,.266,.270,.276,.287,.306,.341,.377,.427,.479,.562,.651,.713,.778,.880,1.26,1.62,1.92,2.25,2.85,3.51,4.22,5.73,7.97,11.8,15.8,20.4,24.4,28.0,30.7,31.5,32.3,31.6,31.0,27.8,                23.5,19.8,15.0,10.9,8.40,7.25,5.65,5.00,4.50,3.10,                2.42,2.17,2.00,1.89,1.80,1.73,1.65,1.50,1.39,1.26,                1.09,0.94,0.84,0.75,0.68,0.56,0.38,0.26,.155,.105,                .076,.059,.038,.027,.0148,.0094,.0050,.0031,.0022,.00163,.001024,.000714,.000498,.000372,.000291,.000236,.000166,.000125,9.90D-5,8.08D-5,6.76D-5,5.77D-5,4.38D-5,3.48D-5,2.85D-5,2.39D-5,2.04D-5,1.43D-5,1.08D-5,8.52D-6,6.91D-6,4.85D-6,3.62D-6,2.81D-6,2.25D-6,1.85D-6,1.55D-6,1.13D-6,8.67D-7,6.86D-7,5.58D-7,4.63D-7,3.10D-7,2.23D-7,1.68D-7,1.31D-7,8.64D-8,6.11D-8,4.54D-8,3.51D-8,2.78D-8,2.26D-8,1.57D-8,1.15D-8,8.79D-9,6.93D-9,5.60D-9,3.57D-9,2.47D-9,1.81D-9,1.38D-9,8.82D-10,6.11D-10,4.48D-10,3.43D-10,2.71D-10,2.19D-10,1.52D-10,1.12D-10,8.55D-11,6.75D-11,5.47D-11/
# ELASTIC TOTAL
      DATA XEL/0.00,.001,.005,.007,0.01,.015,0.02,.025,0.03,0.04,0.05,0.06,0.07,0.08,0.10,0.12,0.14,0.17,0.20,0.25, 0.27,0.30,0.32,0.35,0.37,0.40,0.42,0.44,0.46,0.48,0.50,0.51,0.52,0.53,0.54,0.55,0.56,0.57,0.58,0.59,0.60,0.61,0.62,0.63,0.64,0.65,0.66,0.67,0.68,0.69,0.70,0.75,0.80,0.85,0.90,1.00,1.20,1.50,1.75,2.00,2.50,2.75,3.00,3.75,4.00,4.50,5.00,5.50,6.00,6.50,7.00,8.00,9.00,10.0,12.0,15.0,18.0,20.0,25.0,30.0,                40.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,200.,                250.,300.,400.,500.,600.,700.,800.,1000.,1500.,2000.,             3000.,4000.,5000.,6000.,8000.,1.0D4,1.5D4,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5'%.3f' %.0'%.3f' %.5D5,4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,2.0D6,2.5'%.3f' %.0'%.3f' %.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5'%.3f' %.0'%.3f' %.5D7,7.0D7,1.D9/  
      DATA YEL/131.,117.,101.,95.4,88.8,80.1,73.3,67.5,62.6,54.7,48.4,43.2,38.8,35.2,29.4,24.7,21.2,17.1,14.0,10.3,9.10,7.75,6.94,5.95,5.40,4.50,4.25,3.95,3.65,3.45,3.20,3.11,3.00,2.90,2.79,2.69,2.59,2.48,2.37,2.25,2.14,2.02,1.92,1.80,1.69,1.58,1.48,1.40,1.32,1.28,1.26,1.24,1.30,1.45,1.50,1.87,2.80,4.76,6.68,8.85,13.7,16.3,18.7,24.5,29.0,32.7,36.8,39.3,41.7,41.7,41.8,41.8,41.0,40.0,37.4,34.2,32.4,30.8,21.9,14.1,                8.58,6.78,5.97,5.49,5.29,5.21,5.10,4.66,4.58,4.67,                4.53,4.35,4.12,3.77,3.58,3.30,3.12,2.80,2.36,2.07,                1.72,1.52,1.34,1.13,.937,.817,.632,.523,.397,.326,.279,.246,.203,.175,.152,.136,.124,.116,.103,.0946,.0886,.0841,.0807,.0779,.0739,.0711,.0690,.0674,.0662,.0640,.0627,.0618,.0612,.0604,.0599,.0596,.0594,.0593,.0592,.0590,.0589,.0589,.0588,.0588,.0587,.0587,.0587,.0587,.0587,.05867,.05866,.05865,.05865/
# ELASTIC ANGULAR DISTRIBUTION ( EPSILON) 
      DATA XEPS/0.00,.001,.005,.007,.010,.015,.020,.025,.030,.040,0.05,0.06,0.07,0.08,0.10,0.12,0.14,0.17,0.20,0.25,0.27,0.30,0.32,0.35,0.37,0.40,0.42,0.44,0.46,0.48,0.50,0.51,0.52,0.53,0.54,0.55,0.56,0.57,0.58,0.59,0.60,0.61,0.62,0.63,0.64,0.65,0.66,0.67,0.68,0.69,0.70,0.71,0.72,0.73,0.75,0.77,0.80,0.83,0.85,0.87,0.90,1.00,1.10,1.20,1.30,1.40,1.50,1.70,2.00,2.50,3.00,3.50,4.00,4.50,5.00,5.50,6.00,6.50,7.00,8.00,9.00,10.0,12.0,15.0,18.0,20.0,25.0,30.0,40.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,200.,250.,300.,400.,500.,600.,700.,800.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,10000.,15000.,2.0'%.3f' %.0D4,4.0D4,5.0D4,6.0D4,8.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5'%.3f' %.0'%.3f' %.5D5,4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,2.0D6,2.5'%.3f' %.0'%.3f' %.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5'%.3f' %.0'%.3f' %.5D7,4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,1.0D8,1.25D8,1.5D8,1.75D8,2.0D8,2.5'%.3f' %.0'%.3f' %.5D8,4.0D8,4.5D8,5.0D8,6.0D8,7.0D8,8.0D8,9.0D8,1.0D9/
# ELASTIC ANGULAR DISTRIBUTION PARAMETER EPSILON
#  YEPS=1.0-EPSILON
      DATA YEPS/1.,.9744,.9406,.9325,.9173,.8972,.8776,.8606,.845,.8148,.7851,.7598,.7333,.7069,.6565,.6117,.5651,.5015,.4373,.3459,.3177,.2684,.2421,.2044,.1803,.1590,.1326,.1141,.0981,.0822,.0714,.0659,.0615,.0575,.0544,.0515,.0492,.0476,.0467,.0464,.0467,.0480,.0493,.0523,.0560,.0614,.0678,.0751,.0845,.0937,.1056,.1183,.1321,.1471,.1802,.2095,.2585,.2944,.3183,.3588,.4247,.5332,.6259,.7104,.7648,.8047,.8308,.8717,.8515,.7938,.7699,.7682,.7647,.7864,.7544,.7075,.6695,.6461,.6238,.5219,.4088,.3217,.2293,.1597,.1165,.1011,.1156,.1887,.3535,.2829,.2332,.2240,.2087,.1956,.1873,.2028,.1934,.1617,.1506,.1379,.1201,.1098,.1003,.0956,.0899,.0792,.0579,.0408,.0259,.0182,.0140,.0126,.0091,.0070,.0046,.00331,.00215,.00154,.00123,.00100,7.30D-4,5.69D-4,4.42D-4,3.59D-4,3.00D-4,2.56D-4,1.96D-4,1.57D-4,1.29D-4,1.09D-4,9.34D-5,8.12D-5,6.34D-5,5.12D-5,4.23D-5,3.563D-5,3.048D-5,2.134D-5,1.607D-5,1.255D-5,1.009D-5,6.944D-6,5.077D-6,3.875D-6,3.056D-6,2.473D-6,2.043D-6,1.461D-6,1.097D-6,8.531D-7,6.826D-7,5.583D-7,3.635D-7,2.550D-7,1.885D-7,1.447D-7,9.266D-8,6.407D-8,4.674D-8,3.548D-8,2.775D-8,2.224D-8,1.512D-8,1.089D-8,8.19D-9,6.36D-9,5.08D-9,3.16D-8,2.14D-9,1.54D-9,1.163D-9,7.25D-10,4.93D-10,3.56D-10,2.69D-10,2.10D-10,1.68D-10,1.15D-10,8.3D-11,6.3D-11,4.9D-11,3.9D-11/
# IONISATION (VALUES ABOVE 20KEV GENERATED BY BORN BETHE IN SUB)  
      DATA XION/12.129843,12.5,13.0,13.5,14.0,14.5,15.0,15.5,16.0,16.5,17.0,18.0,19.0,20.0,21.0,22.0,23.0,24.0,26.0,28.0,                30.0,32.0,34.0,36.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,80.0,90.0,100.,110.,120.,130.,140.,150.,160.,                180.,200.,250.,300.,350.,400.,450.,500.,550.,600.,700.,800.,900.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,         3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,10000.,12000.,14000.,16000.,18000.,20000./        
# GROSS IONISATION
      DATA YION/0.00,.137,.344,.549,.748,.939,1.12,1.29,1.46,1.62,      1.77,2.04,2.30,2.52,2.73,2.93,3.10,3.27,3.56,3.82,                4.06,4.27,4.42,4.53,4.73,4.94,5.11,5.21,5.31,5.36,5.40,5.46,5.56,5.68,5.75,5.75,5.70,5.58,5.48,5.35,                5.11,4.83,4.36,4.02,3.72,3.46,3.24,3.06,2.87,2.72,2.49,2.26,2.10,1.94,1.68,1.48,1.35,1.23,1.13,.964,                .836,.736,.663,.602,.555,.515,.480,.424,.382,.346,.319,.273,.242,.218,.200,.186/      
# COUNTING IONISATION
      DATA YINC/0.00,.137,.344,.549,.748,.939,1.12,1.29,1.46,1.62, 1.77,2.04,2.30,2.52,2.73,2.93,3.10,3.27,3.56,3.82,                4.06,4.27,4.42,4.53,4.66,4.77,4.84,4.89,4.95,4.99,5.02,5.04,5.03,5.02,4.98,4.90,4.80,4.69,4.60,4.49,4.27,4.01,3.58,3.27,3.00,2.76,2.57,2.41,2.25,2.12,1.93,1.75,1.62,1.49,1.28,1.12,1.03,.923,.855,.731,.632,.557,.501,.455,.420,.389,.364,.320,.289,.262,.241,.206,.183,.165,.152,.141/
# IONISATION CHARGE STATE =1
      DATA YIN1/0.00,.137,.344,.549,.748,.939,1.12,1.29,1.46,1.62, 1.77,2.04,2.30,2.52,2.73,2.93,3.10,3.27,3.56,3.82,                4.06,4.27,4.42,4.51,4.59,4.60,4.58,4.60,4.62,4.64,4.67,4.64,4.53,4.44,4.33,4.21,4.08,4.01,3.93,3.85,3.65,3.44,3.06,2.77,2.48,2.31,2.15,2.00,1.87,1.75,1.58,1.42,1.32,1.21,1.03,.903,.830,.744,.689,.589,.509,.449,.404,.367,.339,.314,.293,.258,.233,.211,.194,.166,.148,.133,.123,.114/
# IONISATION CHARGE STATE =2
      DATA XIN2/33.105,36.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,80.0,90.0,100.,110.,120.,130.,140.,150.,160.,180.,200.,250.,300.,350.,400.,450.,500.,550.,600.,700.,800.,900.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,10000.,12000.,14000.,16000.,18000.,20000./        
      DATA YIN2/0.0,0.02,.0688,.174,.257,.318,.363,.376,.386,.398,.461,.503,.534,.533,.521,.495,.470,.447,.405,.373,.325,.305,.294,.267,.253,.240,.230,.220,.204,.190,.175,.170,.145,.127,.117,.105,.0969,.0828,.0716,.0631,.0568,.0516,.0476,.0441,.0412,.0363,.0327,.0297,.0220,.0188,.0176,.0151,.0139,.0129/
# IONISATION CHARGE STATE =3
      DATA XIN3/64.15,70.0,80.0,90.0,100.,110.,120.,130.,140.,150.,160.,180.,200.,250.,300.,350.,400.,450.,500.,550.,600.,700.,800.,900.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,10000.,12000.,14000.,16000.,18000.,20000./        
      DATA YIN3/0.0,.001,.010,.0324,.0764,.122,.159,.184,.190,.189,.180,.169,.158,.142,.140,.137,.129,.123,.118,.112,.107,.102,.0921,.0844,.0825,.0703,.0616,.0566,.0507,.0470,.0402,.0347,.0306,.0275,.0250,.0231,.0214,.0200,.0176,.0159,.0144,.0132,.0113,.0101,.00907,.00835,.00775/
# IONISATION CHARGE STATE =4
      DATA XIN4/106.35,120.,130.,140.,150.,160.,180.,200.,250.,300.,350.,400.,450.,500.,550.,600.,700.,800.,900.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,10000.,12000.,14000.,16000.,18000.,20000./        
      DATA YIN4/0.0,.0002,.00098,.0033,.0103,.0157,.0279,.0426,.0483,.0421,.0425,.0409,.0402,.0395,.0382,.0369,.0348,.0339,.0319,.0294,.0251,.0219,.0202,.0181,.0167,.0143,.0124,.0109,.00981,.00891,.00823,.00762,.00713,.00627,.00566,.00513,.00472,.00404,.00358,.00323,.00298,.00276/
# IONISATION CHARGE STATE =5
      DATA XIN5/160.45,180.,200.,250.,300.,350.,400.,450.,500.,550.,600.,700.,800.,900.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,10000.,12000.,14000.,16000.,18000.,20000./        
      DATA YIN5/0.0,.00013,.0018,.0062,.0101,.0113,.0106,.0108,.0109,.0104,.0098,.0089,.0078,.0073,.0069,.059,.051,.0047,.0042,.0039,.0034,.0029,.0026,.0023,.0021,.00193,.00179,.00167,.00147,.00133,.00120,.00111,.00095,.00084,.00076,.00070,.00065/
# IONISATION CHARGE STATE =6
      DATA XIN6/227.2,250.,300.,350.,400.,450.,500.,550.,600.,700.,800.,900.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,10000.,12000.,14000.,16000.,18000.,20000./        
      DATA YIN6/0.0,.00005,.00036,.00082,.00128,.00140,.00153,.00162,.00171,.00188,.00182,.00191,.00188,.00160,.00140,.00129,.00116,.00107,.00092,.00079,.00070,.00063,.00057,.00053,.00049,.00046,.00040,.00036,.00033,.00030,.00026,.00023,.00021,.00019,.00018/
# K-SHELL IONISATION
      DATA XKSH/34561.,35490.,36526.,37592.,38690.,39819.,40982.,42178.,43410.,45981.,48706.,51591.,54648.,57885.,64947.,72871.,81761.,1.00D5,1.22D5,1.50D5,1.83D5,2.24D5,2.82'%.3f' %.65D5,4.87D5,6.49D5,8.66D5,1.00D6,1.22D6,1.50D6,1.83D6,2.24D6,2.82'%.3f' %.65D6,4.87D6,6.49D6,8.66D6,1.00D7,1.22D7,1.50D7,2.05D7,2.51'%.3f' %.07D7,4.10D7,5.16D7,6.31D7,7.50D7,8.66D7,1.00D8,1.22D8,1.50D8,2.05D8,2.51'%.3f' %.07D8,4.10D8,5.16D8,6.31D8,7.50D8,8.66D8,1.00D9/ 
      DATA YKSH/0.0,1.74D-8,3.56D-8,5.30D-8,6.98D-8,8.58D-8,1.01D-7,1.16D-7,1.29D-7,1.55D-7,1.78D-7,1.99D-7,2.17D-7,2.34D-7,2.62D-7,2.84D-7,3.00D-7,3.20D-7,3.31D-7,3.35D-7,3.34D-7,3.31D-7,3.26D-7,3.21D-7,3.20D-7,3.23D-7,3.29D-7,3.34D-7,3.43D-7,3.55D-7,3.68D-7,3.83D-7,4.01D-7,4.23D-7,4.50D-7,4.77D-7,5.05D-7,5.20D-7,5.40D-7,5.61D-7,5.93D-7,6.14D-7,6.35D-7,6.65D-7,6.89D-7,7.10D-7,7.28D-7,7.43D-7,7.58D-7,7.79D-7,7.99D-7,8.32D-7,8.53D-7,8.74D-7,9.03D-7,9.27D-7,9.47D-7,9.65D-7,9.79D-7,9.94D-7/
# L1-SHELL IONISATION
      DATA XL1S/5453.,5499.2,5658.7,5823.,5992.,6166.,6345.,6529.,6719.,6914.,7321.,7753.,8210.,8695.,9208.,1.00D4,1.09D4,1.19D4,1.30D4,1.41D4,1.58D4,1.78D4,2.00D4,2.24D4,2.51D4,2.90'%.3f' %.35'%.3f' %.87D4,4.47D4,5.16D4,6.13D4,7.29D4,8.66D4,1.00D5,1.22D5,1.54D5,2.00D5,2.59'%.3f' %.35D5,4.47D5,5.96D5,8.66D5,1.00D6,1.22D6,1.50D6,1.83D6,2.30D6,2.90'%.3f' %.65D6,4.60D6,5.79D6,7.50D6,8.66D6,1.00D7,1.22D7,1.50D7,1.83D7,2.30D7,2.90'%.3f' %.65D7,4.60D7,5.79D7,7.29D7,8.66D7,1.00D8,1.22D8,1.50D8,1.83D8,2.30D8,2.90'%.3f' %.65D8,4.60D8,5.79D8,7.29D8,8.66D8,1.00D9/
      DATA YL1S/0.0,2.21D-7,9.39D-7,1.62D-6,2.26D-6,2.86D-6,3.43D-6,3.96D-6,4.47D-6,4.95D-6,5.82D-6,6.59D-6,7.26D-6,7.86D-6,8.37D-6,9.02D-6,9.52D-6,9.89D-6,1.02D-5,1.03D-5,1.04D-5,1.04D-5,1.02D-5,9.98D-6,9.68D-6,9.23D-6,8.73D-6,8.20D-6,7.66D-6,7.14D-6,6.53D-6,5.97D-6,5.46D-6,5.06D-6,4.57D-6,4.08D-6,3.64D-6,3.30D-6,3.04D-6,2.84D-6,2.71D-6,2.64D-6,2.64D-6,2.66D-6,2.69D-6,2.74D-6,2.82D-6,2.90D-6,3.00D-6,3.11D-6,3.23D-6,3.36D-6,3.44D-6,3.52D-6,3.63D-6,3.74D-6,3.85D-6,3.98D-6,4.12D-6,4.25D-6,4.38D-6,4.51D-6,4.65D-6,4.75D-6,4.83D-6,4.95D-6,5.06D-6,5.18D-6,5.32D-6,5.45D-6,5.58D-6,5.72D-6,5.85D-6,5.99D-6,6.09D-6,6.17D-6/
# L2-SHELL IONISATION
      DATA XL2S/5107.,5160.6,5311.3,5466.,5626.,5790.,5959.,6133.,6312.,6686.,7081.,7501.,7945.,8416.,9175.,1.00D4,1.09D4,1.19D4,1.30D4,1.41D4,1.58D4,1.78D4,2.00D4,2.24D4,2.51D4,2.90'%.3f' %.35'%.3f' %.87D4,4.47D4,5.16D4,6.13D4,7.29D4,8.66D4,1.00D5,1.22D5,1.54D5,2.00D5,2.59'%.3f' %.35D5,4.47D5,5.96D5,8.66D5,1.00D6,1.22D6,1.50D6,1.83D6,2.30D6,2.90'%.3f' %.65D6,4.60D6,5.79D6,7.50D6,8.66D6,1.00D7,1.22D7,1.50D7,2.05D7,2.59'%.3f' %.16D7,4.10D7,5.16D7,6.31D7,7.50D7,8.66D7,1.00D8,1.22D8,1.50D8,2.05D8,2.59'%.3f' %.16D8,4.10D8,5.16D8,6.31D8,7.50D8,8.66D8,1.00D9/
      DATA YL2S/0.0,4.47D-7,1.62D-6,2.72D-6,3.76D-6,4.73D-6,5.64D-6,6.49D-6,7.28D-6,8.71D-6,9.94D-6,1.10D-5,1.19D-5,1.27D-5,1.36D-5,1.43D-5,1.47D-5,1.50D-5,1.52D-5,1.52D-5,1.51D-5,1.49D-5,1.45D-5,1.41D-5,1.36D-5,1.29D-5,1.21D-5,1.13D-5,1.06D-5,9.81D-6,8.97D-6,8.20D-6,7.49D-6,6.96D-6,6.29D-6,5.63D-6,5.03D-6,4.55D-6,4.19D-6,3.92D-6,3.75D-6,3.66D-6,3.66D-6,3.69D-6,3.74D-6,3.82D-6,3.93D-6,4.06D-6,4.20D-6,4.36D-6,4.52D-6,4.72D-6,4.83D-6,4.94D-6,5.10D-6,5.26D-6,5.52D-6,5.71D-6,5.88D-6,6.09D-6,6.28D-6,6.45D-6,6.59D-6,6.71D-6,6.83D-6,7.00D-6,7.17D-6,7.43D-6,7.63D-6,7.79D-6,8.01D-6,8.20D-6,8.37D-6,8.51D-6,8.63D-6,8.75D-6/
# L3-SHELL IONISATION
      DATA XL3S/4786.,4881.6,5023.7,5170.,5321.,5476.,5635.,5800.,5968.,6321.,6695.,7091.,7511.,8187.,8924.,1.00D4,1.09D4,1.19D4,1.30D4,1.41D4,1.58D4,1.78D4,2.00D4,2.24D4,2.51D4,2.90'%.3f' %.35'%.3f' %.87D4,4.47D4,5.16D4,6.13D4,7.29D4,8.66D4,1.00D5,1.22D5,1.54D5,2.00D5,2.59'%.3f' %.35D5,4.47D5,5.96D5,8.66D5,1.00D6,1.22D6,1.50D6,1.83D6,2.30D6,2.90'%.3f' %.65D6,4.60D6,5.79D6,7.50D6,8.66D6,1.00D7,1.22D7,1.50D7,1.83D7,2.30D7,2.90'%.3f' %.65D7,4.60D7,5.79D7,7.50D7,8.66D7,1.00D8,1.22D8,1.50D8,1.83D8,2.30D8,2.90'%.3f' %.65D8,4.60D8,5.79D8,7.50D8,8.66D8,1.00D9/
      DATA YL3S/0.0,1.94D-6,4.64D-6,7.17D-6,9.54D-6,1.18D-5,1.38D-5,1.58D-5,1.76D-5,2.08D-5,2.36D-5,2.60D-5,2.80D-5,3.05D-5,3.23D-5,3.40D-5,3.48D-5,3.52D-5,3.54D-5,3.53D-5,3.48D-5,3.41D-5,3.31D-5,3.19D-5,3.06D-5,2.86D-5,2.70D-5,2.52D-5,2.34D-5,2.17D-5,1.98D-5,1.81D-5,1.65D-5,1.53D-5,1.38D-5,1.23D-5,1.09D-5,9.89D-6,9.10D-6,8.49D-6,8.10D-6,7.90D-6,7.89D-6,7.93D-6,8.04D-6,8.19D-6,8.41D-6,8.67D-6,8.97D-6,9.29D-6,9.63D-6,1.00D-5,1.03D-5,1.05D-5,1.08D-5,1.12D-5,1.15D-5,1.19D-5,1.23D-5,1.27D-5,1.31D-5,1.35D-5,1.39D-5,1.42D-5,1.45D-5,1.48D-5,1.52D-5,1.55D-5,1.59D-5,1.63D-5,1.67D-5,1.71D-5,1.75D-5,1.80D-5,1.82D-5,1.85D-5/
# M1-SHELL IONISATION
      DATA XM1S/1148.7,1180.9,1214.7,1249.4,1285.1,1321.8,1359.7,1398.6,1438.7,1479.9,1566.,1657.,1754.,1856.,1965.,2140.,2330.,2538.,2765.,3012.,3376.,3784.,4243.,4758.,5335.,6157.,7105.,8201.,1.00D4,1.22D4,1.50D4,1.88D4,2.37'%.3f' %.00'%.3f' %.76D4,4.87D4,6.31D4,8.41D4,1.00D5,1.22D5,1.50D5,1.88D5,2.37'%.3f' %.00'%.3f' %.76D5,4.87D5,6.31D5,8.41D5,1.00D6,1.22D6,1.50D6,1.88D6,2.37'%.3f' %.00'%.3f' %.76D6,4.87D6,6.31D6,8.41D6,1.00D7,1.22D7,1.50D7,1.88D7,2.37D7,2.99'%.3f' %.76D7,4.87D7,6.31D7,8.41D7,1.00D8,1.22D8,1.50D8,1.88D8,2.37D8,2.99'%.3f' %.76D8,4.87D8,6.31D8,8.41D8,1.00D9/ 
      DATA YM1S/0.0,2.13D-5,4.08D-5,5.85D-5,7.47D-5,8.95D-5,1.03D-4,1.16D-4,1.27D-4,1.37D-4,1.56D-4,1.71D-4,1.84D-4,1.95D-4,2.04D-4,2.15D-4,2.23D-4,2.28D-4,2.30D-4,2.31D-4,2.29D-4,2.24D-4,2.18D-4,2.10D-4,2.01D-4,1.88D-4,1.75D-4,1.62D-4,1.44D-4,1.27D-4,1.12D-4,9.60D-5,8.20D-5,6.83D-5,5.92D-5,4.93D-5,4.11D-5,3.38D-5,3.03D-5,2.67D-5,2.38D-5,2.10D-5,1.88D-5,1.71D-5,1.58D-5,1.47D-5,1.40D-5,1.35D-5,1.34D-5,1.33D-5,1.34D-5,1.35D-5,1.37D-5,1.40D-5,1.44D-5,1.48D-5,1.53D-5,1.59D-5,1.62D-5,1.66D-5,1.70D-5,1.75D-5,1.80D-5,1.85D-5,1.90D-5,1.96D-5,2.01D-5,2.08D-5,2.11D-5,2.16D-5,2.20D-5,2.25D-5,2.30D-5,2.35D-5,2.40D-5,2.46D-5,2.52D-5,2.58D-5,2.62D-5/
# M2-SHELL IONISATION
      DATA XM2S/1002.1,1012.5,1041.7,1071.7,1102.6,1134.5,1167.2,1201.,1236.,1271.,1346.,1425.,1509.,1597.,1691.,1843.,2008.,2188.,2384.,2598.,2913.,3267.,3664.,4109.,4744.,5635.,6695.,7730.,8925.,1.00D4,1.22D4,1.50D4,1.88D4,2.37'%.3f' %.00'%.3f' %.76D4,4.87D4,6.31D4,8.41D4,1.00D5,1.22D5,1.50D5,1.88D5,2.37'%.3f' %.00'%.3f' %.76D5,4.87D5,6.31D5,8.41D5,1.00D6,1.22D6,1.50D6,1.88D6,2.37'%.3f' %.00'%.3f' %.76D6,4.87D6,6.31D6,8.41D6,1.00D7,1.22D7,1.50D7,1.88D7,2.37D7,2.99'%.3f' %.76D7,4.87D7,6.31D7,8.41D7,1.00D8,1.22D8,1.50D8,1.88D8,2.37D8,2.99'%.3f' %.76D8,4.87D8,6.31D8,8.41D8,1.00D9/
      DATA YM2S/0.0,1.17D-5,4.18D-5,6.88D-5,9.29D-5,1.15D-4,1.34D-4,1.52D-4,1.68D-4,1.83D-4,2.08D-4,2.30D-4,2.49D-4,2.64D-4,2.78D-4,2.95D-4,3.09D-4,3.19D-4,3.27D-4,3.31D-4,3.34D-4,3.32D-4,3.27D-4,3.19D-4,3.06D-4,2.86D-4,2.64D-4,2.45D-4,2.26D-4,2.11D-4,1.86D-4,1.63D-4,1.39D-4,1.19D-4,1.01D-4,8.55D-5,7.12D-5,5.94D-5,4.90D-5,4.38D-5,3.87D-5,3.45D-5,3.05D-5,2.74D-5,2.50D-5,2.31D-5,2.16D-5,2.06D-5,1.99D-5,1.98D-5,1.97D-5,1.98D-5,2.01D-5,2.05D-5,2.10D-5,2.16D-5,2.23D-5,2.31D-5,2.40D-5,2.46D-5,2.52D-5,2.59D-5,2.67D-5,2.75D-5,2.83D-5,2.91D-5,3.00D-5,3.09D-5,3.20D-5,3.26D-5,3.33D-5,3.40D-5,3.48D-5,3.56D-5,3.65D-5,3.73D-5,3.82D-5,3.91D-5,4.01D-5,4.08D-5/
# M3-SHELL IONISATION
      DATA XM3S/940.6,958.1,985.7,1014.1,1043.3,1073.3,1104.3,1136.1,1168.9,1202.6,1273.,1348.,1427.,1510.,1599.,1693.,1844.,2009.,2189.,2385.,2599.,2915.,3269.,3666.,4111.,4746.,5637.,6697.,7732.,8927.,1.00D4,1.22D4,1.50D4,1.88D4,2.37'%.3f' %.00'%.3f' %.76D4,4.87D4,6.31D4,8.41D4,1.00D5,1.22D5,1.50D5,1.88D5,2.37'%.3f' %.00'%.3f' %.76D5,4.87D5,6.31D5,8.41D5,1.00D6,1.22D6,1.88D6,2.37'%.3f' %.00'%.3f' %.76D6,4.87D6,6.31D6,8.41D6,1.00D7,1.22D7,1.50D7,1.88D7,2.37D7,2.99'%.3f' %.76D7,4.87D7,6.31D7,8.41D7,1.00D8,1.22D8,1.50D8,1.88D8,2.37D8,2.99'%.3f' %.76D8,4.87D8,6.31D8,8.41D8,1.00D9/
      DATA YM3S/0.0,5.19D-5,1.24D-4,1.88D-4,2.44D-4,2.95D-4,3.40D-4,3.81D-4,4.18D-4,4.51D-4,5.10D-4,5.59D-4,6.01D-4,6.37D-4,6.68D-4,6.96D-4,7.29D-4,7.56D-4,7.75D-4,7.88D-4,7.96D-4,7.96D-4,7.88D-4,7.72D-4,7.50D-4,7.15D-4,6.66D-4,6.12D-4,5.66D-4,5.20D-4,4.85D-4,4.27D-4,3.74D-4,3.19D-4,2.72D-4,2.31D-4,1.96D-4,1.63D-4,1.36D-4,1.12D-4,1.00D-4,8.86D-5,7.89D-5,6.99D-5,6.27D-5,5.71D-5,5.29D-5,4.94D-5,4.71D-5,4.57D-5,4.53D-5,4.52D-5,4.61D-5,4.71D-5,4.82D-5,4.96D-5,5.13D-5,5.31D-5,5.52D-5,5.65D-5,5.81D-5,5.97D-5,6.15D-5,6.34D-5,6.53D-5,6.71D-5,6.93D-5,7.14D-5,7.38D-5,7.52D-5,7.69D-5,7.86D-5,8.05D-5,8.24D-5,8.43D-5,8.62D-5,8.84D-5,9.05D-5,9.29D-5,9.43D-5/
# M4-SHELL IONISATION
      DATA XM4S/689.0,706.2,726.8,748.1,770.0,792.6,815.7,839.6,864.2,889.5,942.3,998.2,1057.,1120.,1187.,1294.,1411.,1538.,1677.,1828.,2052.,2302.,2583.,2899.,3253.,3756.,4338.,5010.,5786.,6681.,7716.,8911.,1.00D4,1.22D4,1.50D4,1.88D4,2.37'%.3f' %.00'%.3f' %.76D4,4.87D4,6.31D4,8.41D4,1.00D5,1.22D5,1.50D5,1.88D5,2.37'%.3f' %.00'%.3f' %.76D5,4.87D5,6.31D5,8.41D5,1.00D6,1.22D6,1.88D6,2.37'%.3f' %.00'%.3f' %.76D6,4.87D6,6.31D6,8.41D6,1.00D7,1.22D7,1.50D7,1.88D7,2.37D7,2.99'%.3f' %.76D7,4.87D7,6.31D7,8.41D7,1.00D8,1.22D8,1.50D8,1.88D8,2.37D8,2.99'%.3f' %.76D8,4.87D8,6.31D8,8.41D8,1.00D9/
      DATA YM4S/0.0,1.79D-4,3.69D-4,5.38D-4,6.89D-4,8.24D-4,9.45D-4,1.05D-3,1.15D-3,1.24D-3,1.39D-3,1.52D-3,1.62D-3,1.71D-3,1.79D-3,1.88D-3,1.95D-3,2.00D-3,2.03D-3,2.05D-3,2.06D-3,2.05D-3,2.01D-3,1.97D-3,1.91D-3,1.82D-3,1.72D-3,1.61D-3,1.50D-3,1.39D-3,1.29D-3,1.18D-3,1.11D-3,9.84D-4,8.68D-4,7.49D-4,6.43D-4,5.51D-4,4.71D-4,3.96D-4,3.33D-4,2.77D-4,2.50D-4,2.22D-4,1.99D-4,1.77D-4,1.60D-4,1.47D-4,1.37D-4,1.29D-4,1.24D-4,1.21D-4,1.21D-4,1.21D-4,1.25D-4,1.29D-4,1.33D-4,1.38D-4,1.43D-4,1.49D-4,1.56D-4,1.61D-4,1.66D-4,1.71D-4,1.77D-4,1.83D-4,1.89D-4,1.96D-4,2.03D-4,2.10D-4,2.18D-4,2.22D-4,2.28D-4,2.33D-4,2.40D-4,2.46D-4,2.52D-4,2.58D-4,2.65D-4,2.73D-4,2.80D-4,2.85D-4/
# M5-SHELL IONISATION
      DATA XM5S/676.4,686.9,707.0,727.7,748.9,770.8,793.4,816.6,840.4,865.0,916.3,970.7,1028.,1089.,1154.,1258.,1372.,1495.,1630.,1777.,1994.,2238.,2511.,2817.,3161.,3651.,4216.,4869.,5622.,6493.,7717.,8911.,1.00D4,1.22D4,1.50D4,1.88D4,2.37'%.3f' %.00'%.3f' %.76D4,4.87D4,6.31D4,8.41D4,1.00D5,1.22D5,1.50D5,1.88D5,2.37'%.3f' %.00'%.3f' %.76D5,4.87D5,6.31D5,8.41D5,1.00D6,1.22D6,1.50D6,1.88D6,2.37'%.3f' %.00'%.3f' %.76D6,4.87D6,6.31D6,8.41D6,1.00D7,1.22D7,1.50D7,1.88D7,2.37D7,2.99'%.3f' %.76D7,4.87D7,6.31D7,8.41D7,1.00D8,1.22D8,1.50D8,1.88D8,2.37D8,2.99'%.3f' %.76D8,4.87D8,6.31D8,8.41D8,1.00D9/
      DATA YM5S/0.0,1.84D-4,4.98D-4,7.77D-4,1.02D-3,1.25D-3,1.44D-3,1.62D-3,1.78D-3,1.92D-3,2.16D-3,2.37D-3,2.53D-3,2.67D-3,2.79D-3,2.93D-3,3.04D-3,3.12D-3,3.18D-3,3.21D-3,3.23D-3,3.21D-3,3.16D-3,3.09D-3,2.99D-3,2.86D-3,2.70D-3,2.53D-3,2.36D-3,2.19D-3,1.99D-3,1.83D-3,1.71D-3,1.52D-3,1.34D-3,1.16D-3,9.92D-4,8.50D-4,7.27D-4,6.10D-4,5.14D-4,4.28D-4,3.85D-4,3.42D-4,3.06D-4,2.73D-4,2.47D-4,2.26D-4,2.11D-4,1.98D-4,1.91D-4,1.86D-4,1.86D-4,1.87D-4,1.89D-4,1.93D-4,1.98D-4,2.04D-4,2.11D-4,2.20D-4,2.29D-4,2.40D-4,2.47D-4,2.55D-4,2.63D-4,2.72D-4,2.81D-4,2.91D-4,3.00D-4,3.11D-4,3.22D-4,3.34D-4,3.41D-4,3.50D-4,3.58D-4,3.68D-4,3.77D-4,3.87D-4,3.97D-4,4.08D-4,4.18D-4,4.31D-4,4.38D-4/
#
# EXCITATION  UNITS OF 10**-18CM**2
# 
# 1S5 METASTABLE E=8.3153155 EV  J=2        
# SHAPE def BELOW 11EV FROM BARTSCHAT AND ZATSARINNY
# ABOVE 100EV SCALED BY 1/E**3
      DATA X1S5/8.3153,8.35,8.40,8.44,8.48,8.52,8.56,8.60,8.65,8.70,8.75,8.80,8.85,8.90,8.95,9.00,9.05,9.10,9.15,9.20,9.25,9.30,9.35,9.40,9.45,9.50,9.516,9.52,9.525,9.53,9.54,9.545,9.55,9.555,9.56,9.57,9.58,9.59,9.60,9.61,9.615,9.62,9.625,9.63,9.64,9.65,9.66,9.67,9.68,9.70,9.75,10.0,10.5,11.0,11.5,12.0,12.5,13.0,14.0,15.0,16.0,18.0,20.0,25.0,30.0,40.0,50.0,60.0,80.0,100./
      DATA Y1S5/0.00,2.38,4.93,6.41,3.42,2.84,3.00,3.33,3.89,4.59,5.45,6.48,7.72,9.05,10.4,11.5,12.3,12.2,10.8,9.45,8.84,9.04,9.18,9.18,9.11,9.32,23.6,15.7,12.1,10.7,9.79,11.4,15.8,18.0,15.9,13.1,13.6,12.6,10.4,12.1,14.9,20.5,21.5,18.5,17.2,16.9,15.9,13.8,12.4,11.1,10.1,10.0,9.90,9.80,9.70,9.60,9.30,8.80,8.10,7.45,6.80,5.50,4.40,2.20,1.10,.500,.230,.150,.065,.034/
      DATA YP1S5/70*0.0/
# 1S4 E=8.4365236 EV J=1  RESONANCE RADIATION 146.96 NM       F=0.260 
#    USED BEF SCALING ABOVE 11.0EV
# SHAPE def BELOW 11EV FROM BARTSCHAT AND ZATSARINNY        
      DATA X1S4/8.4365,8.45,8.46,8.47,8.48,8.49,8.50,8.52,8.54,8.56,8.60,8.65,8.70,8.75,8.80,8.85,8.90,8.95,9.00,9.05,9.10,9.15,9.20,9.25,9.30,9.35,9.40,9.45,9.50,9.55,9.60,9.62,9.65,9.70,9.75,9.80,10.0,11.0/
      DATA Y1S4/0.00,2.60,5.60,6.09,5.50,4.72,4.27,3.70,3.42,3.24,3.10,3.02,3.34,3.70,4.25,5.03,6.00,7.23,8.70,9.67,10.3,10.1,9.37,9.00,8.70,8.55,8.62,8.77,9.00,10.1,10.5,10.7,10.2,9.22,9.40,9.60,10.8,16.87/
      DATA YP1S4/38*0.0/
# 1S3  METASTABLE   E=9.4471945 EV J=0 
# SHAPE def BELOW 11EV FROM BARTSCAT AND ZATSARINNY
# ABOVE 100EV SCALED BY 1/E**3
      DATA X1S3/9.4472,9.45,9.47,9.48,9.49,9.50,9.506,9.51,9.52,9.525,9.53,9.54,9.55,9.555,9.56,9.57,9.58,9.60,9.62,9.64,9.67,9.68,9.69,9.70,9.71,9.72,9.73,9.74,9.75,9.80,10.0,11.0,12.0,13.0,14.0,15.0,16.0,18.0,20.0,24.0,30.0,40.0,50.0,60.0,80.0,100./
      DATA Y1S3/0.00,.313,.324,.230,.360,1.67,3.78,2.57,1.26,1.71,1.80,1.78,2.23,2.70,2.43,.635,1.14,1.04,1.49,1.59,1.62,2.77,3.89,6.21,9.38,8.28,6.75,4.29,3.97,.556,0.77,3.30,4.30,4.50,4.30,3.70,3.30,2.65,2.25,1.50,0.80,0.32,0.17,0.10,.040,.021/
      DATA YP1S3/46*0.0/
# 1S2 E=9.5697248 EV J=1 RESONANCE RADIATION 129.56 NM        F=0.183
#   USED BEF SCALING ABOVE 11.0EV
# SHAPE def BELOW 11EV FROM BARTSCHAT AND ZATSARINNY
      DATA X1S2/9.5697,9.58,9.59,9.60,9.61,9.62,9.63,9.64,9.65,9.67,9.68,9.69,9.70,9.75,9.77,9.80,9.85,9.90,10.0,11.0/
      DATA Y1S2/0.00,1.21,1.32,1.41,1.41,1.30,1.88,2.00,2.02,2.02,2.83,2.11,2.07,1.78,2.10,1.96,1.75,1.87,2.17,5.305/
      DATA YP1S2/20*0.0/
# 2P10 E=9.5801524 EV  J=1 
# ABOVE 100EV SCALED BY 1/E**3
      DATA X2P10/9.5802,9.80,10.0,10.5,11.0,11.5,12.0,12.5,13.0,14.0,15.0,16.0,18.0,20.0,25.0,30.0,35.0,40.0,50.0,60.0,80.0,100./
      DATA Y2P10/0.00,0.69,1.23,2.34,3.15,3.73,4.14,4.41,4.59,4.76,4.74,4.63,4.26,3.84,2.91,2.23,1.75,1.40,0.95,0.69,.406,.267/
      DATA YP2P10/22*0.0/
# 2P9 E=9.6856199 EV  J=2
# ABOVE 100EV SCALED BY 1/E
      DATA X2P9/9.6856,10.0,10.5,11.0,11.5,12.0,12.5,13.0,14.0,15.0,16.0,18.0,20.0,25.0,30.0,35.0,40.0,50.0,60.0,80.0,100./
      DATA Y2P9/0.00,1.50,3.37,4.49,5.47,6.04,6.48,6.91,7.41,7.49,7.41,6.98,6.26,5.04,4.17,3.52,3.09,2.52,2.08,1.58,1.22/
      DATA YP2P9/21*0.0/
# 2P8 E=9.7207401 EV  J=3
# ABOVE 100EV SCALED BY 1/E**3
      DATA X2P8/9.7207,10.0,10.5,11.0,11.5,12.0,12.5,13.0,13.5,14.0,15.0,16.0,18.0,20.0,25.0,30.0,35.0,40.0,50.0,60.0,80.0,100./
      DATA Y2P8/0.00,1.16,2.78,3.88,4.86,5.44,5.83,6.02,6.35,6.41,6.48,6.33,4.89,3.24,1.51,0.72,0.43,0.26,0.11,.061,.021,.0093/
      DATA YP2P8/22*0.0/
# 2P7 E=9.7892996 EV  J=1
# ABOVE 100EV SCALED BY 1/E**2
      DATA X2P7/9.7893,10.0,10.5,11.0,11.5,12.0,12.5,13.0,13.5,14.0,15.0,16.0,18.0,20.0,25.0,30.0,35.0,40.0,50.0,60.0,80.0,100./
      DATA Y2P7/0.00,0.66,1.68,2.52,3.12,3.48,3.72,3.90,4.02,4.14,4.20,4.20,3.90,3.48,2.64,1.80,1.26,0.96,0.63,0.42,0.24,0.15/
      DATA YP2P7/22*0.0/
# 2P6 E=9.8210934 EV  J=2
# ABOVE 100EV SCALED BY 1/E
      DATA X2P6/9.8211,10.0,10.5,11.0,11.5,12.0,12.5,13.0,13.5,14.0,15.0,16.0,18.0,20.0,25.0,30.0,35.0,40.0,50.0,60.0,80.0,100./
      DATA Y2P6/0.00,0.26,1.05,1.47,1.92,2.19,2.32,2.43,2.53,2.62,2.64,2.88,3.06,2.94,2.70,2.10,1.68,1.53,1.26,1.02,0.78,0.60/
      DATA YP2P6/22*0.0/
# 3D6 E=9.8903760 EV  J=0
# ABOVE 100EV SCALED BY 1/E**1.5
      DATA X3D6/9.8904,10.0,10.5,11.0,11.5,12.0,12.5,13.0,13.5,14.0,14.5,15.0,16.0,17.0,18.0,20.0,22.0,25.0,30.0,40.0,50.0,60.0,80.0,100./
      DATA Y3D6/0.00,0.23,0.83,1.50,2.17,2.77,3.22,3.60,3.90,4.20,4.42,4.65,4.80,5.02,5.02,4.80,4.50,3.90,2.78,1.87,1.35,1.01,0.66,0.48/
      DATA YP3D6/24*0.0/
#
# 3D5 E=9.9170761 EV J=1 RESONACE RADIATION 125.02 NM         F=0.010
#
# 2P5 E=9.9334847 EV  J=0 
# ABOVE 100EV SCALED BY 1/E
      DATA X2P5/9.9335,13.0,16.0,17.5,20.0,24.0,26.0,28.0,30.0,35.0,40.0,50.0,60.0,80.0,100./
      DATA Y2P5/0.00,1.60,2.16,2.70,4.26,7.32,8.46,8.88,8.70,8.40, 7.50,5.70,4.80,3.60,3.00/
      DATA YP2P5/15*0.0/
# 3D4# E=9.9431141 EV  J=4
# ABOVE 100EV SCALED BY 1/E**1.5
      DATA X3D4P/9.9431,10.0,10.5,11.0,11.5,12.0,12.5,13.0,13.5,14.0,14.5,15.0,16.0,17.0,18.0,20.0,22.0,25.0,30.0,40.0,50.0,60.0,80.0,100./
      DATA Y3D4P/0.00,0.45,1.65,3.00,4.35,5.55,6.45,7.20,7.80,8.40,8.85,9.30,9.60,10.1,10.1,9.60,9.00,7.80,5.77,3.75,2.70,2.03,1.32,0.96/
      DATA YP3D4P/24*0.0/
# 3D3 E=9.9587506 EV  J=2
# ABOVE 100EV SCALED BY 1/E**1.5
      DATA X3D3/9.9588,10.0,10.5,11.0,11.5,12.0,12.5,13.0,13.5,14.0,14.5,15.0,16.0,17.0,18.0,20.0,22.0,25.0,30.0,40.0,50.0,60.0,80.0,100./
      DATA Y3D3/0.00,0.48,1.76,3.20,4.64,5.92,6.88,7.68,8.32,8.96,9.44,9.92,10.2,10.7,10.7,10.2,9.60,8.32,5.92,4.00,2.88,2.16,1.41,1.03/
      DATA YP3D3/24*0.0/
# 3D4 E=10.039054 EV  J=3
# ABOVE 100EV SCALED BY 1/E**2
      DATA X3D4/10.0391,10.2,10.5,10.7,11.0,11.2,11.5,12.0,12.5,13.0,13.5,14.0,14.5,15.0,16.0,18.0,20.0,22.0,25.0,30.0,35.0,40.0,50.0,60.0,80.0,100./
      DATA Y3D4/0.00,0.50,1.50,2.20,3.30,4.00,5.00,6.90,8.70,10.7,12.2,13.3,13.6,13.6,12.8,10.2,9.00,7.30,5.70,3.40,2.90,2.20,1.45,1.00,0.56,0.36/
      DATA YP3D4/26*0.0/
# 3D1## E=10.157469 EV  J=2
# ABOVE 100EV SCALED BY 1/E**3
      DATA X3D1PP/10.1575,10.5,10.7,11.0,11.5,12.0,12.5,13.0,13.5,14.0,14.5,15.0,16.0,18.0,20.0,22.0,25.0,30.0,40.0,50.0,60.0,80.0,100./
      DATA Y3D1PP/0.00,0.70,1.30,2.00,3.20,4.50,5.70,6.80,7.80,8.30,8.50,8.50,8.20,6.70,5.30,3.80,2.90,1.55,0.67,0.35,0.20,.085,.044/
      DATA YP3D1PP/23*0.0/
# 3D1# E=10.220042  J=3
# ABOVE 100EV SCALED BY 1/E
      DATA X3D1P/10.2200,10.7,11.0,11.5,12.0,12.5,13.0,13.5,14.0,14.5,15.0,16.0,18.0,20.0,22.0,25.0,30.0,40.0,50.0,60.0,80.0,100./
      DATA Y3D1P/0.00,0.60,1.04,1.83,2.39,3.00,3.39,3.65,3.83,3.94,4.00,4.00,3.95,3.85,3.70,3.45,2.90,2.15,1.70,1.45,1.08,.875/
      DATA YP3D1P/22*0.0/
#
# 3D2 E=10.401030  J=1 RESONANCE RADIATION  119.20 NM         F=0.379
#
# 2S5  E=10.562062 EV  J=2 NOT OBSERVED  USE 1S5 SCALED BY 0.25
# ABOVE 100EV SCALED BY 1/E**3
      DATA X2S5/10.5621,11.0,11.5,12.0,12.5,13.0,14.0,15.0,16.0,18.0,20.0,25.0,30.0,40.0,50.0,60.0,80.0,100./
      DATA Y2S5/0.00,0.10,0.25,0.50,1.00,1.50,2.02,1.75,1.70,1.37,1.10,.550,.275,.125,.057,.037,.016,.0085/
      DATA YP2S5/18*0.0/
#
# 2S4  E=10.593211 EV  J=1  RESONANCE RADIATION 117.04 NM     F=0.086  
#
# 3P10+3P9+3P8+3P7+3P6+3P5  E=10.9016 EV SCALED SUM OF 2P10--2P5 BY 0.25
# ABOVE 100EV SCALED BY 1/E
      DATA X3P105/10.9016,11.50,12.0,12.5,13.0,14.0,15.0,16.0,18.0,20.0,25.0,30.0,35.0,40.0,50.0,60.0,80.0,100./
      DATA Y3P105/0.00,1.00,2.70,3.42,4.20,5.10,5.70,5.94,5.93,5.52,5.31,4.71,4.09,3.54,2.68,2.18,1.59,1.26/
      DATA YP3P105/18*0.0/
# 2P4 E=10.957614 J=1 
# ABOVE 100EV SCALED BY 1/E**2
      DATA X2P4/10.9576,13.0,14.0,15.0,16.0,18.0,20.0,25.0,30.0,40.0,50.0,60.0,80.0,100./
      DATA Y2P4/0.00,0.75,1.10,1.20,1.10,0.75,0.60,0.38,0.25,.145,.095,.065,.037,.025/
      DATA YP2P4/14*0.0/
# 4D6+4D3+4D4#+4D4+4D1##+4D1#  SUM 4D  E=10.9715
#       SHAPE FROM PETROV NORMALISED TO HAYASHI TOTAL
# ABOVE 100EV SCALED BY 1/E**3
      DATA X4DSUM/10.9715,12.0,13.0,14.0,15.0,16.0,18.0,20.0,25.0,30.0,35.0,40.0,50.0,60.0,80.0,100./
      DATA Y4DSUM/0.00,1.50,4.35,4.65,4.50,4.05,3.00,2.25,0.96,0.57,0.36,0.21,.099,.060,.024,.011/
      DATA YP4DSUM/16*0.0/
#
# 4D5 E=10.978772 J=1 RESONANCE RADIATION AT 112.93 NM        F=0.001
# 
# 2P3 E=11.054723  J=2
# ABOVE 100 EV SCALED BY 1/E
      DATA X2P3/11.0547,13.0,14.0,15.0,16.0,18.0,20.0,25.0,30.0,40.0,50.0,60.0,80.0,100./
      DATA Y2P3/0.00,2.20,3.00,3.50,3.60,3.50,3.20,2.60,2.20,1.65,1.35,1.10,0.83,0.65/
      DATA YP2P3/14*0.0/
# 2P2 E=11.069148  J=1
# ABOVE 100EV SCALED BY 1/E**2
      DATA X2P2/11.0691,13.0,14.0,15.0,16.0,18.0,20.0,25.0,30.0,40.0,50.0,60.0,80.0,100./
      DATA Y2P2/0.00,0.75,1.00,1.08,1.08,0.97,0.85,0.56,0.40,0.22,.145,.100,.054,.035/
      DATA YP2P2/14*0.0/
# 2P1 E=11.141221  J=0
# ABOVE 100EV SCALED BY 1/E
      DATA X2P1/11.1412,13.0,14.0,15.0,16.0,18.0,20.0,25.0,30.0,35.0,40.0,50.0,60.0,80.0,100./
      DATA Y2P1/0.00,0.80,1.50,1.90,1.90,1.80,1.60,1.30,1.05,0.91,0.77,0.64,0.52,0.39,0.31/
      DATA YP2P1/15*0.0/
#                          
# 4D2 E=11.162564 EV  J=1 RESONANCE RADIATION AT 111.07 NM    F=0.0835
# 3S4 E=11.274184 EV  J=1 RESONANCE RADIATION AT 109.97 NM    F=0.0225
# 5D5 E=11.422451 EV  J=1 RESONANCE RADIATION AT 108.55 NM    F=0.0227 
# 5D2 E=11.495075 EV  J=1 RESONANCE RADIATION AT 107.86 NM    F=0.002  
# 4S4 E=11.582864 EV  J=1 RESONANCE RADIATION AT 107.04 NM    F=0.0005 
# 3S1# E=11.60718 EV  J=1 RESONANCE RADIATION AT 106.82 NM    F=0.1910
# 6D5 E=11.682783 EV  J=1 RESONANCE RADIATION AT 106.13 NM    F=0.0088 
# 6D2 E=11.739501 EV  J=1 RESONANCE RADIATION AT 105.61 NM    F=0.0967
# 5S4 E=11.752100 EV  J=1 RESONANCE RADIATION AT 105.50 NM    F=0.0288
# 7D5 E=11.806816 EV  J=1 RESONANCE RADIATION AT 105.01 NM    F=0.0042 
# 7D2 E=11.84030  EV  J=1 RESONANCE RADIATION AT 104.71 NM    F=0.0625
# 6S4 E=11.85177  EV  J=1 RESONANCE RADIATION AT 104.61 NM    F=0.0025 
# 2S2 E=11.877758 EV  J=1 RESONANCE RADIATION AT 104.38 NM    F=0.029  
# 8D5 E=11.891681 EV  J=1 RESONANCE RADIATION AT 104.26 NM    F=0.0035 
# 8D2 E=11.90816  EV  J=1 RESONANCE RADIATION AT 104.12 NM    F=0.0386 
# 7S4 E=11.91770  EV  J=1 RESONANCE RADIATION AT 104.03 NM    F=0.005 
# 9D5 E=11.94156  EV  J=1 RESONANCE RADIATION AT 103.83 NM    F=0.0005 
# 9D2 E=11.95502  EV  J=1 RESONANCE RADIATION AT 103.71 NM    F=0.025  
# 8S4 E=11.96207  EV  J=1 RESONANCE RADIATION AT 103.64 NM    F=0.0023 
# 10D5 E=11.978893 EV J=1 RESONANCE RADIATION AT 103.50 NM    F=0.0005 
# 10D2 E=11.98858 EV  J=1 RESONANCE RADIATION AT 103.42 NM    F=0.0164     
# 9S4 E=11.993947 EV  J=1 RESONANCE RADIATION AT 103.37 NM    F=0.0014  
# SUM HIGHER STATES E=12.0 EV                                 F=0.0831 
#
# TOTAL OSCILLATOR SUM =1.650
#
# BREMSSTRAHLUNG X-SECTION WITH CUT OFF UNITS 10**-24
      DATA Z54T/4948.,4086.,2921.,2088.,1396.,776.,492.,328.,220.,189.,179.7,178.6,179.0,179.3,179.6,180.2,180.3,181.5,182.1,182.7,183.6,184.4,184.7,185.5,185.7/
      DATA EBRM/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,4.E7,5.E7,6.E7,8.E7,1.E8/
#-----------------------------------------------------------------------
      if(NANISO == 0):
 :                                
       NAME='XENON 2013     ISOTROPIC '
      else:
       NAME='XENON 2013   ANISOTROPIC '
      # endif                                            
#                                                                       
# --------------------------------------------------------------------  
# DATA ON XENON NOT AS GOOD AS ARGON . 
# USED MOMENTUM TRANSFER X-SECTION FROM SCHMIDT UP TO 2 EV. 
# FIT TO TOWNS# end COEFFICIENT OF JACQUES ET AL J.PHYS D19(1986)1731
# AND KRUITHOF TO OBTAIN INELASTIC X-SECTIONS. 
# 2013: INCLUDED SHELL IONISATION X-SECTIONS
# 2010: UPDATED IONISATION X-SECTIONS
# 2009: INCLUDED ALL RESONANCE STATES AND SOME P AND D STATES
# 2007: INCREASED ENERGY RANGE TO 2MEV
# 2007: INCLUDED NEW ANGULAR DISTRIBUTION
# 2007: INCLUDED PENNING TRANSFER FRACTION
# 2013: INTRODUCED K L AND M SHELL AND CHARGE 1 2 AND (3+4+5) IONISATION
# --------------------------------------------------------------------  
#                                                                       
#  BORN BETHE VALUES FOR IONISATION                               
      CONST=1.873884D-20
      EMASS2=1021997.804
      API=numpy.arccos(-1.00)
      A0=0.52917720859D-8
      RY=13.60569193
      BBCONST=16.0*API*A0*A0*RY*RY/EMASS2
#
      AM2=8.04
      C=75.25
#   
# AVERAGE AUGER EMISSIONS FROM EACH SHELL
      AUGM5=4.34
      AUGM4=4.43
      AUGM3=6.79
      AUGM2=6.85
      AUGM1=7.94
      AUGL3=8.21
      AUGL2=8.45
      AUGL1=9.39
      AUGK=8.49
      IONMODEL=0
#
      NION=12
      NATT=1
      NIN=50
      NNULL=0 
#
      NBREM=25
      DO 6 J=1,NIN
      IZBR[J]=0
    6 CONTINUE
      IZBR(51)=54
#
      DO 1 J=1,6
    1 KEL[J]=NANISO
      DO 2 J=1,NIN
    2 KIN[J]=NANISO   
#                                                                      
      NDATA=182 
      NEL=153  
      NEPSI=182                                                       
      NIONG=76
      NION2=54
      NION3=47
      NION4=42
      NION5=37
      NION6=35
      NIONK=60
      NIONL1=76
      NIONL2=76
      NIONL3=76
      NIONM1=79
      NIONM2=80
      NIONM3=80
      NIONM4=82
      NIONM5=83
      N1S5=70
      N1S4=38
      N1S3=46
      N1S2=20
      N2P10=22
      N2P9=21
      N2P8=22
      N2P7=22
      N2P6=22
      N3D6=24
      N2P5=15
      N3D4P=24
      N3D3=24
      N3D4=26
      N3D1PP=23
      N3D1P=22
      N2S5=18
      N3PSUM=18
      N2P4=14
      N4DSUM=16
      N2P3=14
      N2P2=14
      N2P1=15  
#                                                         
      E[1]=0.0                                                          
      E(2)=2.0*EMASS/(131.30*AMU)                                       
      E(3)=12.129843
# EXCITATION X-SECTION AT 1.3 MEV                                      
      E(4)=0.511D-18
# IONISING X-SECTION AT 1.3 MEV      
      E(5)=0.1782D-17      
# EOBY FOR MINIMUM IONISING PARTICLE
      E(6)=23.7
# EOBY AT LOW ENERGY
      EOBY[1]=8.7
      EOBY(2)=20.0 
      EOBY(3)=38.0
# EOBY FOR SHELLS
      EOBY(4)=400.             
      EOBY(5)=410.             
      EOBY(6)=750.0  
      EOBY(7)=800.0 
      EOBY(8)=920.0 
      EOBY(9)=3850.
      EOBY(10)=4100.
      EOBY(11)=4400.
      EOBY(12)=34561.
# 
      EION[1]=12.129843
      EION(2)=33.105
      EION(3)=64.155
      EION(4)=676.4 
      EION(5)=689.0 
      EION(6)=940.6 
      EION(7)=1002.1
      EION(8)=1148.7
      EION(9)=4786. 
      EION(10)=5107.
      EION(11)=5453. 
      EION(12)=34561.
      LEGAS[1]=0
      LEGAS(2)=0
      LEGAS(3)=0
      LEGAS(4)=1
      LEGAS(5)=1
      LEGAS(6)=1
      LEGAS(7)=1
      LEGAS(8)=1
      LEGAS(9)=1
      LEGAS(10)=1
      LEGAS(11)=1
      LEGAS(12)=1
      ISHELL[1]=0
      ISHELL(2)=0
      ISHELL(3)=0
      ISHELL(4)=9
      ISHELL(5)=8
      ISHELL(6)=7
      ISHELL(7)=6
      ISHELL(8)=5
      ISHELL(9)=4
      ISHELL(10)=3
      ISHELL(11)=2
      ISHELL(12)=1
# FLUORESCENCE DATA
      NC0[1]=0
      EC0[1]=0.0
      WKLM[1]=0.0
      EFL[1]=0.0
      NG1[1]=0
      EG1[1]=0.0
      NG2[1]=0
      EG2[1]=0.0
      NC0(2)=1
      EC0(2)=5.0
      WKLM(2)=0.0
      EFL(2)=0.0
      NG1(2)=0
      EG1(2)=0.0
      NG2(2)=0
      EG2(2)=0.0
      NC0(3)=2
      EC0(3)=10.0
      WKLM(3)=0.0
      EFL(3)=0.0
      NG1(3)=0
      EG1(3)=0.0
      NG2(3)=0
      EG2(3)=0.0
      NC0(4)=4
      EC0(4)=593.7
      WKLM(4)=0.0
      EFL(4)=0.0
      NG1(4)=0
      EG1(4)=0.0
      NG2(4)=0
      EG2(4)=0.0
      NC0(5)=4
      EC0(5)=604.0
      WKLM(5)=0.0
      EFL(5)=0.0
      NG1(5)=0
      EG1(5)=0.0
      NG2(5)=0
      EG2(5)=0.0
      NC0(6)=7
      EC0(6)=782.2
      WKLM(6)=0.0
      EFL(6)=0.0
      NG1(6)=0
      EG1(6)=0.0
      NG2(6)=0
      EG2(6)=0.0
      NC0(7)=7
      EC0(7)=839.7
      WKLM(7)=0.0
      EFL(7)=0.0
      NG1(7)=0
      EG1(7)=0.0
      NG2(7)=0
      EG2(7)=0.0
      NC0(8)=8
      EC0(8)=911.4
      WKLM(8)=0.0
      EFL(8)=0.0
      NG1(8)=0
      EG1(8)=0.0
      NG2(8)=0
      EG2(8)=0.0
      NC0(9)=9
      EC0(9)=4494.3
      WKLM(9)=0.0942
      EFL(9)=4106.
      NG1(9)=5
      EG1(9)=3900.
      NG2(9)=4
      EG2(9)=594.
      NC0(10)=9
      EC0(10)=4774.8
      WKLM(10)=0.093
      EFL(10)=4427.
      NG1(10)=5
      EG1(10)=4181.
      NG2(10)=4
      EG2(10)=594.
      NC0(11)=10
      EC0(11)=5015.2
      WKLM(11)=0.0475
      EFL(11)=4483.
      NG1(11)=5
      EG1(11)=4233.
      NG2(11)=6
      EG2(11)=782.
      NC0(12)=17
      EC0(12)=33900.
      WKLM(12)=0.89
      EFL(12)=29775.
      NG1(12)=8
      EG1(12)=29406.
      NG2(12)=9
      EG2(12)=4494.
#
      DO 776 J=1,NION
      DO 777 I=1,20000
      if(EG[I]:
 > EION[J]) :
       IOFFION[J]=I-1
      GO TO 776
      # endif
  777 CONTINUE
  776 CONTINUE  
#                               
      EIN[1]=8.3153 
      EIN(2)=8.4365
      EIN(3)=9.4472
      EIN(4)=9.5697
      EIN(5)=9.5802
      EIN(6)=9.6856
      EIN(7)=9.7207
      EIN(8)=9.7893
      EIN(9)=9.8211
      EIN(10)=9.8904
      EIN(11)=9.9171
      EIN(12)=9.9335
      EIN(13)=9.9431
      EIN(14)=9.9588
      EIN(15)=10.0391
      EIN(16)=10.1575
      EIN(17)=10.2200
      EIN(18)=10.4010
      EIN(19)=10.5621
      EIN(20)=10.5932
      EIN(21)=10.9016
      EIN(22)=10.9576
      EIN(23)=10.9715
      EIN(24)=10.9788
      EIN(25)=11.0547
      EIN(26)=11.0691
      EIN(27)=11.1412
      EIN(28)=11.1626
      EIN(29)=11.2742
      EIN(30)=11.4225
      EIN(31)=11.4951
      EIN(32)=11.5829
      EIN(33)=11.6072
      EIN(34)=11.6828
      EIN(35)=11.7395
      EIN(36)=11.7521
      EIN(37)=11.8068
      EIN(38)=11.8403
      EIN(39)=11.8518
      EIN(40)=11.8778
      EIN(41)=11.8917
      EIN(42)=11.9082
      EIN(43)=11.9177
      EIN(44)=11.9416
      EIN(45)=11.9550
      EIN(46)=11.9621
      EIN(47)=11.9789
      EIN(48)=11.9886
      EIN(49)=11.9939
      EIN(50)=12.0
      EIN(51)=0.0
#***********************************************************************
# ENTER PENNING TRANSFER FRACTION FOR EACH LEVEL
# USE TRANSFER FRACTION BETWEEN 0.0 AND 0.1 FOR XENON
      DO 50 NL=1,NIN
      PENFRA[1,NL]=0.0
# PENNING TRANSFER DISTANCE MICRONS
      PENFRA[2,NL]=1.0
# PENNING TRANSFER TIME PICOSECONDS
   50 PENFRA[3,NL]=1.0
#***********************************************************************  
      if(IPEN == 0):
 GO TO 4 
      DO 3 KDUM=1,NIN
      if(PENFRA[1,KDUM] == 0.0):
 GO TO 3
      WRITE(6,999) NAME,EIN(KDUM),PENFRA[1,KDUM],PENFRA[2,KDUM],PENFRA[3,KDUM]
  999 print(' GAS = ',A15,' ENERGY LEVEL = ','%.4f' %,' EV.',/,' PENNING PROBABILITY =','%.3f' % ,' ABS.LENGTH =',F7.2,' DECAY TIME =',F7.1,/)    
    3 CONTINUE
    4 DO 5 NL=1,NIN
      DO 555 I=1,20000
      if(EG[I]:
 > EIN(NL)) :
       IOFFN(NL)=I-1
       GO TO 5
      # endif
  555 CONTINUE
    5 CONTINUE
#  
      SCRPT[1]='                                                  '
      SCRPT(2)='ELASTIC ANISOTROPIC      XENON                    '
      if(NANISO == 0):
 :
      SCRPT(2)='ELASTIC ISOTROPIC        XENON                    '
      # endif
      SCRPT(3)='IONISATION CHARGE STATE=1       ELOSS=    12.12984'
      SCRPT(4)='IONISATION CHARGE STATE=2       ELOSS=    33.105  '
      SCRPT(5)='IONISATION CHARGE STATE=3+4+5+6 ELOSS=    64.155  '
      SCRPT(6)='IONISATION  M5-SHELL            ELOSS=   676.4    '
      SCRPT(7)='IONISATION  M4-SHELL            ELOSS=   689.0    '
      SCRPT(8)='IONISATION  M3-SHELL            ELOSS=   940.6    '
      SCRPT(9)='IONISATION  M2-SHELL            ELOSS=  1002.1    '
      SCRPT(10)='IONISATION  M1-SHELL            ELOSS=  1148.7    '
      SCRPT(11)='IONISATION  L3-SHELL            ELOSS=  4786.     '
      SCRPT(12)='IONISATION  L2-SHELL            ELOSS=  5107.     '
      SCRPT(13)='IONISATION  L1-SHELL            ELOSS=  5453.     '
      SCRPT(14)='IONISATION   K-SHELL            ELOSS= 34561.     '
      SCRPT(15)='ATTACHMENT                                        '
      SCRPT(16)='                                                  ' 
      SCRPT(17)='                                                  '
      SCRPT(18)=' EXC  1S5      J=2 METASTABLE   ELOSS=     8.3153 '
      SCRPT(19)=' EXC  1S4      J=1 RESONANT     ELOSS=     8.4365 '
      SCRPT(20)=' EXC  1S3      J=0 METASTABLE   ELOSS=     9.4472 '
      SCRPT(21)=' EXC  1S2      J=1 RESONANT     ELOSS=     9.5697 '
      SCRPT(22)=' EXC  2P10     J=1              ELOSS=     9.5802 '
      SCRPT(23)=' EXC  2P9      J=2              ELOSS=     9.6856 '
      SCRPT(24)=' EXC  2P8      J=3              ELOSS=     9.7207 '
      SCRPT(25)=' EXC  2P7      J=1              ELOSS=     9.7893 '
      SCRPT(26)=' EXC  2P6      J=2              ELOSS=     9.8211 '
      SCRPT(27)=' EXC  3D6      J=0              ELOSS=     9.8904 '
      SCRPT(28)=' EXC  3D5      J=1 RESONANT     ELOSS=     9.9171 '
      SCRPT(29)=' EXC  2P5      J=0              ELOSS=     9.9335 '
      SCRPT(30)=' EXC  3D4#     J=4              ELOSS=     9.9431 '
      SCRPT(31)=' EXC  3D3      J=2              ELOSS=     9.9588 '
      SCRPT(32)=' EXC  3D4      J=3              ELOSS=    10.0391 '
      SCRPT(33)=' EXC  3D1##    J=2              ELOSS=    10.1575 '
      SCRPT(34)=' EXC  3D1#     J=3              ELOSS=    10.2200 '
      SCRPT(35)=' EXC  3D2      J=1 RESONANT     ELOSS=    10.4010 '
      SCRPT(36)=' EXC  2S5      J=2              ELOSS=    10.5621 '
      SCRPT(37)=' EXC  2S4      J=1 RESONANT     ELOSS=    10.5932 '
      SCRPT(38)=' EXC  SUM 3P10-5                ELOSS=    10.9016 '
      SCRPT(39)=' EXC  2P4      J=1              ELOSS=    10.9576 '
      SCRPT(40)=' EXC  SUM 4D                    ELOSS=    10.9715 '
      SCRPT(41)=' EXC  4D5      J=1 RESONANT     ELOSS=    10.9788 '
      SCRPT(42)=' EXC  2P3      J=2              ELOSS=    11.0547 '
      SCRPT(43)=' EXC  2P2      J=1              ELOSS=    11.0691 '
      SCRPT(44)=' EXC  2P1      J=0              ELOSS=    11.1412 '
      SCRPT(45)=' EXC  4D2      J=1 RESONANT     ELOSS=    11.1626 '
      SCRPT(46)=' EXC  3S4      J=1 RESONANT     ELOSS=    11.2742 '
      SCRPT(47)=' EXC  5D5      J=1 RESONANT     ELOSS=    11.4225 '
      SCRPT(48)=' EXC  5D2      J=1 RESONANT     ELOSS=    11.4951 '
      SCRPT(49)=' EXC  4S4      J=1 RESONANT     ELOSS=    11.5829 '
      SCRPT(50)=' EXC  3S1#     J=1 RESONANT     ELOSS=    11.6072 '
      SCRPT(51)=' EXC  6D5      J=1 RESONANT     ELOSS=    11.6828 '
      SCRPT(52)=' EXC  6D2      J=1 RESONANT     ELOSS=    11.7395 '
      SCRPT(53)=' EXC  5S4      J=1 RESONANT     ELOSS=    11.7521 '
      SCRPT(54)=' EXC  7D5      J=1 RESONANT     ELOSS=    11.8068 '
      SCRPT(55)=' EXC  7D2      J=1 RESONANT     ELOSS=    11.8403 '
      SCRPT(56)=' EXC  6S4      J=1 RESONANT     ELOSS=    11.8518 '
      SCRPT(57)=' EXC  2S2      J=1 RESONANT     ELOSS=    11.8778 '
      SCRPT(58)=' EXC  8D5      J=1 RESONANT     ELOSS=    11.8917 '
      SCRPT(59)=' EXC  8D2      J=1 RESONANT     ELOSS=    11.9082 '
      SCRPT(60)=' EXC  7S4      J=1 RESONANT     ELOSS=    11.9177 '
      SCRPT(61)=' EXC  9D5      J=1 RESONANT     ELOSS=    11.9416 '
      SCRPT(62)=' EXC  9D2      J=1 RESONANT     ELOSS=    11.9550 '
      SCRPT(63)=' EXC  8S4      J=1 RESONANT     ELOSS=    11.9621 '
      SCRPT(64)=' EXC  10D5     J=1 RESONANT     ELOSS=    11.9789 '
      SCRPT(65)=' EXC  10D2     J=1 RESONANT     ELOSS=    11.9886 '
      SCRPT(66)=' EXC  9S4      J=1 RESONANT     ELOSS=    11.9939 '
      SCRPT(67)=' EXC  HIGH     J=1 RESONANT     ELOSS=    12.0    '
      SCRPT(68)=' BREMSSTRAHLUNG FROM XENON ATOM                   '
#     EN=-ESTEP/2.0  
      DO 900 I=1,NSTEP    
      EN=EG[I]                                           
#     EN=EN+ESTEP  
      if(EN > EIN[1]:
) :
       GAMMA1=(EMASS2+2.00*EN)/EMASS2
       GAMMA2=GAMMA1*GAMMA1
       BETA=math.sqrt(1.00-1.00/GAMMA2)
       BETA2=BETA*BETA
      # endif                                                     
      if(EN <= XEN(2):
) : 
       QELA=122.D-16  
       QMOM=122.D-16      
       GO TO 200
      # endif 
      DO 110 J=2,NEL                                                    
      if(EN <= XEL[J]:
) GO TO 120                                        
  110 CONTINUE                                                          
      J=NEL   
  120 YXJ=math.log(YEL[J])
      YXJ1=math.log(YEL(J-1))
      XNJ=math.log(XEL[J])
      XNJ1=math.log(XEL(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QELA=math.exp(A*math.log(EN)+B)*1.D-16                                    
      DO 150 J=2,NDATA                                                  
      if(EN <= XEN[J]:
) GO TO 160                                        
  150 CONTINUE                                                          
      J=NDATA 
  160 YXJ=math.log(YMOM[J])
      YXJ1=math.log(YMOM(J-1))
      XNJ=math.log(XEN[J])
      XNJ1=math.log(XEN(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QMOM=math.exp(A*math.log(EN)+B)*1.D-16                                    
  200 CONTINUE
      PQ1=0.5+(QELA-QMOM)/QELA
      DO 201 J=2,NEPSI                                                  
      if(EN <= XEPS[J]:
) GO TO 202                                       
  201 CONTINUE                                                          
      J=NEPSI                                                           
  202 A=(YEPS[J]-YEPS(J-1))/(XEPS[J]-XEPS(J-1))                         
      B=(XEPS(J-1)*YEPS[J]-XEPS[J]*YEPS(J-1))/(XEPS(J-1)-XEPS[J])       
      PQ2=A*EN+B
# EPSILON =1.0-YEPS
      PQ2=1.00-PQ2
      if(NANISO == 0):
 PEQEL(2,I)=0.5
      if(NANISO == 1):
 PEQEL(2,I)=PQ1
      if(NANISO == 2):
 PEQEL(2,I)=PQ2 
      Q(2,I)=QELA       
      if(NANISO == 0):
 Q(2,I)=QMOM
# IONISATION CHARGE STATE =1                          
      QION(1,I)=0.0
      PEQION(1,I)=0.50
      if(NANISO == 2):
 PEQION(1,I)=0.00                            
      if(EN <= EION[1]:
) GO TO 3200
      if(EN > XION(NIONG):
) GO TO 221                                   
      DO 210 J=2,NIONG                                                  
      if(EN <= XION[J]:
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NIONG                                                           
  220 A=(YIN1[J]-YIN1(J-1))/(XION[J]-XION(J-1))                         
      B=(XION(J-1)*YIN1[J]-XION[J]*YIN1(J-1))/(XION(J-1)-XION[J])       
      QION(1,I)=(A*EN+B)*1.0D-16           
      GO TO 222
# USE BORN-BETHE X-SECTION ABOVE XION(NIONG) EV
  221 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(1,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.8061
  222 CONTINUE  
# USE ANISOTROPIC SCATTERING FOR PRIMARY IONISATION ELECTRON FOR
# ENERGIES ABOVE 2 * IONISATION ENERGY  
# ANISOTROPIC ANGULAR DISTRIBUTION SAME AS ELASTIC AT ENERGY OFF SET BY
# IONISATION ENERGY
      if(EN <= (2.0*EION[1]:
)) GO TO 3200
      PEQION(1,I)=PEQEL(2,(I-IOFFION[1]))
# IONISATION CHARGE STATE =2                          
 3200 QION(2,I)=0.0
      PEQION(2,I)=0.50
      if(NANISO == 2):
 PEQION(2,I)=0.00                            
      if(EN <= EION(2):
) GO TO 3350    
      if(EN > XIN2(NION2):
) GO TO 3221                                 
      DO 3210 J=2,NION2                                                 
      if(EN <= XIN2[J]:
) GO TO 3220                                      
 3210 CONTINUE                                                          
      J=NION2                                                           
 3220 A=(YIN2[J]-YIN2(J-1))/(XIN2[J]-XIN2(J-1))                         
      B=(XIN2(J-1)*YIN2[J]-XIN2[J]*YIN2(J-1))/(XIN2(J-1)-XIN2[J])       
      QION(2,I)=(A*EN+B)*1.0D-16           
      GO TO 3222
# USE BORN-BETHE X-SECTION ABOVE XIN2(NION2) EV
 3221 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(2,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.1133
 3222 CONTINUE  
# USE ANISOTROPIC SCATTERING FOR PRIMARY IONISATION ELECTRON FOR
# ENERGIES ABOVE 2 * IONISATION ENERGY  
# ANISOTROPIC ANGULAR DISTRIBUTION SAME AS ELASTIC AT ENERGY OFF SET BY
# IONISATION ENERGY
      if(EN <= (2.0*EION(2):
)) GO TO 3250
      PEQION(2,I)=PEQEL(2,(I-IOFFION(2)))
# IONISATION CHARGE STATE =3                          
 3250 QION(3,I)=0.0
      PEQION(3,I)=0.50
      if(NANISO == 2):
 PEQION(3,I)=0.00                            
      if(EN <= EION(3):
) GO TO 3300    
      if(EN > XIN3(NION3):
) GO TO 3271                                 
      DO 3265 J=2,NION3                                                 
      if(EN <= XIN3[J]:
) GO TO 3270                                      
 3265 CONTINUE                                                          
      J=NION3                                                           
 3270 A=(YIN3[J]-YIN3(J-1))/(XIN3[J]-XIN3(J-1))                         
      B=(XIN3(J-1)*YIN3[J]-XIN3[J]*YIN3(J-1))/(XIN3(J-1)-XIN3[J])       
      QION(3,I)=(A*EN+B)*1.0D-16           
      GO TO 3272
# USE BORN-BETHE X-SECTION ABOVE XIN3(NION3) EV
 3271 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(3,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.05496
 3272 CONTINUE  
# USE ANISOTROPIC SCATTERING FOR PRIMARY IONISATION ELECTRON FOR
# ENERGIES ABOVE 2 * IONISATION ENERGY  
# ANISOTROPIC ANGULAR DISTRIBUTION SAME AS ELASTIC AT ENERGY OFF SET BY
# IONISATION ENERGY
      if(EN <= (2.0*EION(3):
)) GO TO 3300
      PEQION(3,I)=PEQEL(2,(I-IOFFION(3)))
# GROSS SUM OF IONISATION STATE =4+5+6
 3300 Q456=0.0
      if(EN <= 106.35):
 GO TO 3350
      if(EN > XIN4(NION4):
) GO TO 3349
      DO 3310 J=2,NION4
      if(EN <= XIN4[J]:
) GO TO 3325
 3310 CONTINUE
      J=NION4
 3325 A=(YIN4[J]-YIN4(J-1))/(XIN4[J]-XIN4(J-1))                         
      B=(XIN4(J-1)*YIN4[J]-XIN4[J]*YIN4(J-1))/(XIN4(J-1)-XIN4[J])       
      Q456=(A*EN+B)*1.0D-16 
      Q456=Q456*4.0/3.0
      if(EN <= 160.45):
 GO TO 3350
      if(EN > XIN5(NION5):
) GO TO 3349
      DO 3377 J=2,NION5
      if(EN <= XIN5[J]:
) GO TO 3322
 3377 CONTINUE
      J=NION5
 3322 A=(YIN5[J]-YIN5(J-1))/(XIN5[J]-XIN5(J-1))                         
      B=(XIN5(J-1)*YIN5[J]-XIN5[J]*YIN5(J-1))/(XIN5(J-1)-XIN5[J])       
      Q456=Q456+(A*EN+B)*1.0D-16*5.0/3.0
      if(EN <= 227.2):
 GO TO 3350
      if(EN > XIN6(NION6):
) GO TO 3349
      DO 3323 J=2,NION6
      if(EN <= XIN6[J]:
) GO TO 3324
 3323 CONTINUE
      J=NION6
 3324 A=(YIN6[J]-YIN6(J-1))/(XIN6[J]-XIN6(J-1))                         
      B=(XIN6(J-1)*YIN6[J]-XIN6[J]*YIN6(J-1))/(XIN6(J-1)-XIN6[J])       
      Q456=Q456+(A*EN+B)*1.0D-16*6.0/3.0
      GO TO 3350   
# USE BORN BETHE X-SECTION ABOVE XIN4(NION4) EV
 3349 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
# 0.3629 = .01959*4/3 + .004597*5/3  + .002504*6/3
      Q456=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.03629
# SUM 3 + 456
 3350 QION(3,I)=QION(3,I)+Q456     
# M5-SHELL IONISATION      
      QION(4,I)=0.00
      PEQION(4,I)=0.50
      if(NANISO == 2):
 PEQION(4,I)=0.00                            
      if(EN <= EION(4):
) GO TO 2233
      DO 2231 J=2,NIONM5
      if(EN <= XM5S[J]:
) GO TO 2232
 2231 CONTINUE
      J=NIONM5
 2232 A=(YM5S[J]-YM5S(J-1))/(XM5S[J]-XM5S(J-1))
      B=(XM5S(J-1)*YM5S[J]-XM5S[J]*YM5S(J-1))/(XM5S(J-1)-XM5S[J])
      QION(4,I)=(A*EN+B)*1.D-16
      PEQION(4,I)=PEQEL(2,(I-IOFFION(4)))
# M4-SHELL IONISATION
 2233 QION(5,I)=0.00
      PEQION(5,I)=0.50
      if(NANISO == 2):
 PEQION(5,I)=0.00                            
      if(EN <= EION(5):
) GO TO 2236
      DO 2234 J=2,NIONM4
      if(EN <= XM4S[J]:
) GO TO 2235
 2234 CONTINUE
      J=NIONM4
 2235 A=(YM4S[J]-YM4S(J-1))/(XM4S[J]-XM4S(J-1))
      B=(XM4S(J-1)*YM4S[J]-XM4S[J]*YM4S(J-1))/(XM4S(J-1)-XM4S[J])
      QION(5,I)=(A*EN+B)*1.D-16
      PEQION(5,I)=PEQEL(2,(I-IOFFION(5)))
# M3-SHELL IONISATION
 2236 QION(6,I)=0.00
      PEQION(6,I)=0.50
      if(NANISO == 2):
 PEQION(6,I)=0.00                            
      if(EN <= EION(6):
) GO TO 2239
      DO 2237 J=2,NIONM3
      if(EN <= XM3S[J]:
) GO TO 2238
 2237 CONTINUE
      J=NIONM3
 2238 A=(YM3S[J]-YM3S(J-1))/(XM3S[J]-XM3S(J-1))
      B=(XM3S(J-1)*YM3S[J]-XM3S[J]*YM3S(J-1))/(XM3S(J-1)-XM3S[J])
      QION(6,I)=(A*EN+B)*1.D-16
      PEQION(6,I)=PEQEL(2,(I-IOFFION(6)))
# M2-SHELL IONISATION
 2239 QION(7,I)=0.00
      PEQION(7,I)=0.50
      if(NANISO == 2):
 PEQION(7,I)=0.00                            
      if(EN <= EION(7):
) GO TO 2242
      DO 2240 J=2,NIONM2
      if(EN <= XM2S[J]:
) GO TO 2241
 2240 CONTINUE
      J=NIONM2
 2241 A=(YM2S[J]-YM2S(J-1))/(XM2S[J]-XM2S(J-1))
      B=(XM2S(J-1)*YM2S[J]-XM2S[J]*YM2S(J-1))/(XM2S(J-1)-XM2S[J])
      QION(7,I)=(A*EN+B)*1.D-16
      PEQION(7,I)=PEQEL(2,(I-IOFFION(7)))
# M1-SHELL IONISATION
 2242 QION(8,I)=0.00
      PEQION(8,I)=0.50
      if(NANISO == 2):
 PEQION(8,I)=0.00                            
      if(EN <= EION(8):
) GO TO 2245
      DO 2243 J=2,NIONM1
      if(EN <= XM1S[J]:
) GO TO 2244
 2243 CONTINUE
      J=NIONM1
 2244 A=(YM1S[J]-YM1S(J-1))/(XM1S[J]-XM1S(J-1))
      B=(XM1S(J-1)*YM1S[J]-XM1S[J]*YM1S(J-1))/(XM1S(J-1)-XM1S[J])
      QION(8,I)=(A*EN+B)*1.D-16
      PEQION(8,I)=PEQEL(2,(I-IOFFION(8)))
# L3-SHELL IONISATION
 2245 QION(9,I)=0.00
      PEQION(9,I)=0.50
      if(NANISO == 2):
 PEQION(9,I)=0.00                            
      if(EN <= EION(9):
) GO TO 2248
      DO 2246 J=2,NIONL3
      if(EN <= XL3S[J]:
) GO TO 2247
 2246 CONTINUE
      J=NIONL3
 2247 A=(YL3S[J]-YL3S(J-1))/(XL3S[J]-XL3S(J-1))
      B=(XL3S(J-1)*YL3S[J]-XL3S[J]*YL3S(J-1))/(XL3S(J-1)-XL3S[J])
      QION(9,I)=(A*EN+B)*1.D-16
      PEQION(9,I)=PEQEL(2,(I-IOFFION(9)))
# L2-SHELL IONISATION
 2248 QION(10,I)=0.00
      PEQION(10,I)=0.50
      if(NANISO == 2):
 PEQION(10,I)=0.00                            
      if(EN <= EION(10):
) GO TO 2251
      DO 2249 J=2,NIONL2
      if(EN <= XL2S[J]:
) GO TO 2250
 2249 CONTINUE
      J=NIONL2
 2250 A=(YL2S[J]-YL2S(J-1))/(XL2S[J]-XL2S(J-1))
      B=(XL2S(J-1)*YL2S[J]-XL2S[J]*YL2S(J-1))/(XL2S(J-1)-XL2S[J])
      QION(10,I)=(A*EN+B)*1.D-16
      PEQION(10,I)=PEQEL(2,(I-IOFFION(10)))
# L1-SHELL IONISATION
 2251 QION(11,I)=0.00
      PEQION(11,I)=0.50
      if(NANISO == 2):
 PEQION(11,I)=0.00                            
      if(EN <= EION(11):
) GO TO 2254
      DO 2252 J=2,NIONL1
      if(EN <= XL1S[J]:
) GO TO 2253
 2252 CONTINUE
      J=NIONL1
 2253 A=(YL1S[J]-YL1S(J-1))/(XL1S[J]-XL1S(J-1))
      B=(XL1S(J-1)*YL1S[J]-XL1S[J]*YL1S(J-1))/(XL1S(J-1)-XL1S[J])
      QION(11,I)=(A*EN+B)*1.D-16
      PEQION(11,I)=PEQEL(2,(I-IOFFION(11)))
#  K-SHELL IONISATION
 2254 QION(12,I)=0.00
      PEQION(12,I)=0.50
      if(NANISO == 2):
 PEQION(12,I)=0.00                            
      if(EN <= EION(12):
) GO TO 2257
      DO 2255 J=2,NIONK 
      if(EN <= XKSH[J]:
) GO TO 2256
 2255 CONTINUE
      J=NIONK 
 2256 A=(YKSH[J]-YKSH(J-1))/(XKSH[J]-XKSH(J-1))
      B=(XKSH(J-1)*YKSH[J]-XKSH[J]*YKSH(J-1))/(XKSH(J-1)-XKSH[J])
      QION(12,I)=(A*EN+B)*1.D-16
      PEQION(12,I)=PEQEL(2,(I-IOFFION(12)))
 2257 CONTINUE
# ATTACHMENT
      Q(4,I)=0.0
# COUNTING IONISATION                                   
      Q(5,I)=0.0     
      PEQEL(5,I)=0.50
      if(NANISO == 2):
 PEQEL(5,I)=0.00                                  
      if(EN <= EION[1]:
) GO TO 242     
      if(EN > XION(NIONG):
) GO TO 241                                
      DO 231 J=2,NIONG                                                 
      if(EN <= XION[J]:
) GO TO 240                                       
  231 CONTINUE                                                          
      J=NIONG                                                          
  240 A=(YINC[J]-YINC(J-1))/(XION[J]-XION(J-1))                         
      B=(XION(J-1)*YINC[J]-XION[J]*YINC(J-1))/(XION(J-1)-XION[J])       
      Q(5,I)=(A*EN+B)*1.0D-16 
      GO TO 242
# USE BORN-BETHE X-SECTION ABOVE XION(NION) EV
  241 Q(5,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)
  242 CONTINUE   
# CORRECTION TO CHARGE STATE 1 2 3+4+5+6 X-SECTION FOR K L AND M SHELLS
# CORRECTION GIVES TOTAL IONISATION EQUAL TO OSCILLATOR SUM
      QTEMP=QION(4,I)+QION(5,I)+QION(6,I)+QION(7,I)+QION(8,I)+QION(9,I)+QION(10,I)+QION(11,I)+QION(12,I)
      if(Q(5,I):
 == 0.0) :
       QCORR=1.0
      else:
       QCORR=(Q(5,I)-QTEMP)/Q(5,I)
      # endif
      QION(1,I)=QION(1,I)*QCORR
      QION(2,I)=QION(2,I)*QCORR
      QION(3,I)=QION(3,I)*QCORR
#
      Q(6,I)=0.0                                                        
#     
      DO 251 NL=1,NIN+1
      QIN(NL,I)=0.0
      PEQIN(NL,I)=0.50
      if(NANISO == 2):
 :
       PEQIN(NL,I)=0.00
      # endif
  251 CONTINUE 
# 1S5                                                    
      if(EN <= EIN[1]:
) GO TO 413     
      if(EN > X1S5(N1S5):
) GO TO 3110                                   
      DO 310 J=2,N1S5                                                   
      if(EN <= X1S5[J]:
) GO TO 311                                      
  310 CONTINUE                                                          
      J=N1S5                                                           
  311 A=(Y1S5[J]-Y1S5(J-1))/(X1S5[J]-X1S5(J-1))                     
      B=(X1S5(J-1)*Y1S5[J]-X1S5[J]*Y1S5(J-1))/(X1S5(J-1)-X1S5[J]) 
      QIN(1,I)=(A*EN+B)*1.0D-18 
      GO TO 3111
 3110 QIN(1,I)=Y1S5(N1S5)*(X1S5(N1S5)/EN)**3*1.0D-18
 3111 if(EN <= (2.0*EIN[1])) GO TO 312
      PEQIN(1,I)=PEQEL(2,(I-IOFFN[1]))       
# 1S4 F=0.260                   
  312 if(EN <= EIN(2)) GO TO 413                    
      if(EN > X1S4(N1S4):
) GO TO 3141                    
      DO 313 J=2,N1S4                                                  
      if(EN <= X1S4[J]:
) GO TO 314
  313 CONTINUE                                                          
      J=N1S4                                                           
  314 A=(Y1S4[J]-Y1S4(J-1))/(X1S4[J]-X1S4(J-1))                     
      B=(X1S4(J-1)*Y1S4[J]-X1S4[J]*Y1S4(J-1))/(X1S4(J-1)-X1S4[J]) 
      QIN(2,I)=(A*EN+B)*1.0D-18
      GO TO 3142
 3141 QIN(2,I)=0.260/(EIN(2)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(2)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(2)+E(3))
 3142 if(EN <= (2.0*EIN(2))) GO TO 315
      PEQIN(2,I)=PEQEL(2,(I-IOFFN(2)))   
# 1S3                                  
  315 if(EN <= EIN(3)) GO TO 413  
      if(EN > X1S3(N1S3):
) GO TO 3170                              
      DO 316 J=2,N1S3                                                  
      if(EN <= X1S3[J]:
) GO TO 317                                      
  316 CONTINUE                                                          
      J=N1S3                                                           
  317 A=(Y1S3[J]-Y1S3(J-1))/(X1S3[J]-X1S3(J-1))                     
      B=(X1S3(J-1)*Y1S3[J]-X1S3[J]*Y1S3(J-1))/(X1S3(J-1)-X1S3[J]) 
      QIN(3,I)=(A*EN+B)*1.0D-18  
      GO TO 3171
 3170 QIN(3,I)=Y1S3(N1S3)*(X1S3(N1S3)/EN)**3*1.0D-18
 3171 if(EN <= (2.0*EIN(3))) GO TO 318
      PEQIN(3,I)=PEQEL(2,(I-IOFFN(3)))   
# 1S2 F=0.183                   
  318 if(EN <= EIN(4)) GO TO 413                
      if(EN > X1S2(N1S2):
) GO TO 3201       
      DO 319 J=2,N1S2                                                  
      if(EN <= X1S2[J]:
) GO TO 320                               
  319 CONTINUE                                                          
      J=N1S2                                                           
  320 A=(Y1S2[J]-Y1S2(J-1))/(X1S2[J]-X1S2(J-1))                     
      B=(X1S2(J-1)*Y1S2[J]-X1S2[J]*Y1S2(J-1))/(X1S2(J-1)-X1S2[J]) 
      QIN(4,I)=(A*EN+B)*1.0D-18
      GO TO 3202
 3201 QIN(4,I)=0.183/(EIN(4)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(4)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(4)+E(3))
 3202 if(EN <= (2.0*EIN(4))) GO TO 321
      PEQIN(4,I)=PEQEL(2,(I-IOFFN(4)))
#
# P STATES
#
# 2P10    
  321 if(EN <= EIN(5)) GO TO 413 
      if(EN > X2P10(N2P10):
) GO TO 3230                                
      DO 322 J=2,N2P10                                                 
      if(EN <= X2P10[J]:
) GO TO 323                                      
  322 CONTINUE                                                          
      J=N2P10                                                           
  323 A=(Y2P10[J]-Y2P10(J-1))/(X2P10[J]-X2P10(J-1))                     
      B=(X2P10(J-1)*Y2P10[J]-X2P10[J]*Y2P10(J-1))/(X2P10(J-1)-X2P10[J]) 
      QIN(5,I)=(A*EN+B)*1.0D-18         
      GO TO 3231
 3230 QIN(5,I)=Y2P10(N2P10)*(X2P10(N2P10)/EN)**3*1.0D-18 
 3231 if(EN <= (2.0*EIN(5))) GO TO 324
      PEQIN(5,I)=PEQEL(2,(I-IOFFN(5)))
# 2P9    
  324 if(EN <= EIN(6)) GO TO 413                        
      if(EN > X2P9(N2P9):
) GO TO 3260                
      DO 325 J=2,N2P9                                                 
      if(EN <= X2P9[J]:
) GO TO 326                                      
  325 CONTINUE                                                          
      J=N2P9                                                           
  326 A=(Y2P9[J]-Y2P9(J-1))/(X2P9[J]-X2P9(J-1))                     
      B=(X2P9(J-1)*Y2P9[J]-X2P9[J]*Y2P9(J-1))/(X2P9(J-1)-X2P9[J]) 
      QIN(6,I)=(A*EN+B)*1.0D-18      
      GO TO 3261
 3260 QIN(6,I)=Y2P9(N2P9)*(X2P9(N2P9)/EN)*1.0D-18
 3261 if(EN <= (2.0*EIN(6))) GO TO 327
      PEQIN(6,I)=PEQEL(2,(I-IOFFN(6)))
# 2P8    
  327 if(EN <= EIN(7)) GO TO 413                 
      if(EN > X2P8(N2P8):
) GO TO 3290                       
      DO 328 J=2,N2P8                                                 
      if(EN <= X2P8[J]:
) GO TO 329                                      
  328 CONTINUE                                                          
      J=N2P8                                                           
  329 A=(Y2P8[J]-Y2P8(J-1))/(X2P8[J]-X2P8(J-1))                     
      B=(X2P8(J-1)*Y2P8[J]-X2P8[J]*Y2P8(J-1))/(X2P8(J-1)-X2P8[J]) 
      QIN(7,I)=(A*EN+B)*1.0D-18      
      GO TO 3291  
 3290 QIN(7,I)=Y2P8(N2P8)*(X2P8(N2P8)/EN)**3*1.0D-18  
 3291 if(EN <= (2.0*EIN(7))) GO TO 330
      PEQIN(7,I)=PEQEL(2,(I-IOFFN(7)))
# 2P7    
  330 if(EN <= EIN(8)) GO TO 413                    
      if(EN > X2P7(N2P7):
) GO TO 3320                    
      DO 331 J=2,N2P7                                                 
      if(EN <= X2P7[J]:
) GO TO 332                                      
  331 CONTINUE                                                          
      J=N2P7                                                           
  332 A=(Y2P7[J]-Y2P7(J-1))/(X2P7[J]-X2P7(J-1))                     
      B=(X2P7(J-1)*Y2P7[J]-X2P7[J]*Y2P7(J-1))/(X2P7(J-1)-X2P7[J]) 
      QIN(8,I)=(A*EN+B)*1.0D-18      
      GO TO 3321 
 3320 QIN(8,I)=Y2P7(N2P7)*(X2P7(N2P7)/EN)**2*1.0D-18   
 3321 if(EN <= (2.0*EIN(8))) GO TO 333
      PEQIN(8,I)=PEQEL(2,(I-IOFFN(8)))
# 2P6    
  333 if(EN <= EIN(9)) GO TO 413                    
      if(EN > X2P6(N2P6):
) GO TO 3355                    
      DO 334 J=2,N2P6                                                 
      if(EN <= X2P6[J]:
) GO TO 335                                      
  334 CONTINUE                                                          
      J=N2P6                                                           
  335 A=(Y2P6[J]-Y2P6(J-1))/(X2P6[J]-X2P6(J-1))                     
      B=(X2P6(J-1)*Y2P6[J]-X2P6[J]*Y2P6(J-1))/(X2P6(J-1)-X2P6[J]) 
      QIN(9,I)=(A*EN+B)*1.0D-18      
      GO TO 3356   
 3355 QIN(9,I)=Y2P6(N2P6)*(X2P6(N2P6)/EN)*1.0D-18
 3356 if(EN <= (2.0*EIN(9))) GO TO 336
      PEQIN(9,I)=PEQEL(2,(I-IOFFN(9)))
# 3D6    
  336 if(EN <= EIN(10)) GO TO 413                
      if(EN > X3D6(N3D6):
) GO TO 3380                    
      DO 337 J=2,N3D6                                                 
      if(EN <= X3D6[J]:
) GO TO 338                                      
  337 CONTINUE                                                          
      J=N3D6                                                           
  338 A=(Y3D6[J]-Y3D6(J-1))/(X3D6[J]-X3D6(J-1))                     
      B=(X3D6(J-1)*Y3D6[J]-X3D6[J]*Y3D6(J-1))/(X3D6(J-1)-X3D6[J]) 
      QIN(10,I)=(A*EN+B)*1.0D-18     
      GO TO 3381  
 3380 QIN(10,I)=Y3D6(N3D6)*(X3D6(N3D6)/EN)**1.5*1.0D-18 
 3381 if(EN <= (2.0*EIN(10))) GO TO 339
      PEQIN(10,I)=PEQEL(2,(I-IOFFN(10)))
# 3D5 J=1 F=0.0100   
  339 if(EN <= EIN(11)) GO TO 413 
      QIN(11,I)=0.0100/(EIN(11)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(11)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(11)+E(3))
      if(QIN(11,I):
 < 0.0) QIN(11,I)=0.0
      if(EN <= (2.0*EIN(11):
)) GO TO 340
      PEQIN(11,I)=PEQEL(2,(I-IOFFN(11)))
# 2P5 
  340 if(EN <= EIN(12)) GO TO 413
      if(EN > X2P5(N2P5):
) GO TO 3420
      DO 341 J=2,N2P5                                                 
      if(EN <= X2P5[J]:
) GO TO 342                                      
  341 CONTINUE                                                          
      J=N2P5                                                           
  342 A=(Y2P5[J]-Y2P5(J-1))/(X2P5[J]-X2P5(J-1))                     
      B=(X2P5(J-1)*Y2P5[J]-X2P5[J]*Y2P5(J-1))/(X2P5(J-1)-X2P5[J]) 
      QIN(12,I)=(A*EN+B)*1.0D-18     
      GO TO 3421
 3420 QIN(12,I)=Y2P5(N2P5)*(X2P5(N2P5)/EN)*1.0D-18   
 3421 if(EN <= (2.0*EIN(12))) GO TO 343
      PEQIN(12,I)=PEQEL(2,(I-IOFFN(12)))
# 3D4#
  343 if(EN <= EIN(13)) GO TO 413
      if(EN > X3D4P(N3D4P):
) GO TO 3450
      DO 344 J=2,N3D4P                                                
      if(EN <= X3D4P[J]:
) GO TO 345                                      
  344 CONTINUE                                                          
      J=N3D4P                                                           
  345 A=(Y3D4P[J]-Y3D4P(J-1))/(X3D4P[J]-X3D4P(J-1))                     
      B=(X3D4P(J-1)*Y3D4P[J]-X3D4P[J]*Y3D4P(J-1))/(X3D4P(J-1)-X3D4P[J]) 
      QIN(13,I)=(A*EN+B)*1.0D-18       
      GO TO 3451 
 3450 QIN(13,I)=Y3D4P(N3D4P)*(X3D4P(N3D4P)/EN)**1.5*1.0D-18 
 3451 if(EN <= (2.0*EIN(13))) GO TO 346
      PEQIN(13,I)=PEQEL(2,(I-IOFFN(13)))
# 3D3 
  346 if(EN <= EIN(14)) GO TO 413
      if(EN > X3D3(N3D3):
) GO TO 3480
      DO 347 J=2,N3D3                                                
      if(EN <= X3D3[J]:
) GO TO 348                                      
  347 CONTINUE                                                          
      J=N3D3                                                           
  348 A=(Y3D3[J]-Y3D3(J-1))/(X3D3[J]-X3D3(J-1))                     
      B=(X3D3(J-1)*Y3D3[J]-X3D3[J]*Y3D3(J-1))/(X3D3(J-1)-X3D3[J]) 
      QIN(14,I)=(A*EN+B)*1.0D-18     
      GO TO 3481
 3480 QIN(14,I)=Y3D3(N3D3)*(X3D3(N3D3)/EN)**1.5*1.0D-18    
 3481 if(EN <= (2.0*EIN(14))) GO TO 349
      PEQIN(14,I)=PEQEL(2,(I-IOFFN(14)))
# 3D4 
  349 if(EN <= EIN(15)) GO TO 413
      if(EN > X3D4(N3D4):
) GO TO 3510
      DO 350 J=2,N3D4                                                
      if(EN <= X3D4[J]:
) GO TO 351                                      
  350 CONTINUE                                                          
      J=N3D4                                                           
  351 A=(Y3D4[J]-Y3D4(J-1))/(X3D4[J]-X3D4(J-1))                     
      B=(X3D4(J-1)*Y3D4[J]-X3D4[J]*Y3D4(J-1))/(X3D4(J-1)-X3D4[J]) 
      QIN(15,I)=(A*EN+B)*1.0D-18  
      GO TO 3511
 3510 QIN(15,I)=Y3D4(N3D4)*(X3D4(N3D4)/EN)**2*1.0D-18
 3511 if(EN <= (2.0*EIN(15))) GO TO 352
      PEQIN(15,I)=PEQEL(2,(I-IOFFN(15)))
# 3D1##
  352 if(EN <= EIN(16)) GO TO 413
      if(EN > X3D1PP(N3D1PP):
) GO TO 3540
      DO 353 J=2,N3D1PP                                              
      if(EN <= X3D1PP[J]:
) GO TO 354                                
  353 CONTINUE                                                          
      J=N3D1PP                                                        
  354 A=(Y3D1PP[J]-Y3D1PP(J-1))/(X3D1PP[J]-X3D1PP(J-1))               
      B=(X3D1PP(J-1)*Y3D1PP[J]-X3D1PP[J]*Y3D1PP(J-1))/(X3D1PP(J-1)-X3D1PP[J]) 
      QIN(16,I)=(A*EN+B)*1.0D-18  
      GO TO 3541
 3540 QIN(16,I)=Y3D1PP(N3D1PP)*(X3D1PP(N3D1PP)/EN)**3*1.0D-18
 3541 if(EN <= (2.0*EIN(16))) GO TO 355
      PEQIN(16,I)=PEQEL(2,(I-IOFFN(16)))
# 3D1#
  355 if(EN <= EIN(17)) GO TO 413
      if(EN > X3D1P(N3D1P):
) GO TO 3570
      DO 356 J=2,N3D1P                                              
      if(EN <= X3D1P[J]:
) GO TO 357                                
  356 CONTINUE                                                          
      J=N3D1P                                                        
  357 A=(Y3D1P[J]-Y3D1P(J-1))/(X3D1P[J]-X3D1P(J-1))               
      B=(X3D1P(J-1)*Y3D1P[J]-X3D1P[J]*Y3D1P(J-1))/(X3D1P(J-1)-X3D1P[J]) 
      QIN(17,I)=(A*EN+B)*1.0D-18  
      GO TO 3571
 3570 QIN(17,I)=Y3D1P(N3D1P)*(X3D1P(N3D1P)/EN)*1.0D-18
 3571 if(EN <= (2.0*EIN(17))) GO TO 358
      PEQIN(17,I)=PEQEL(2,(I-IOFFN(17)))
# 3D2 J=1 F=0.379
  358 if(EN <= EIN(18)) GO TO 413 
      QIN(18,I)=0.3790/(EIN(18)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(18)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(18)+E(3))
      if(QIN(18,I):
 < 0.0) QIN(18,I)=0.0
      if(EN <= (2.0*EIN(18):
)) GO TO 359
      PEQIN(18,I)=PEQEL(2,(I-IOFFN(18)))
# 2S5
  359 if(EN <= EIN(19)) GO TO 413
      if(EN > X2S5(N2S5):
) GO TO 3610
      DO 360 J=2,N2S5                                               
      if(EN <= X2S5[J]:
) GO TO 361                                
  360 CONTINUE                                                          
      J=N2S5                                                        
  361 A=(Y2S5[J]-Y2S5(J-1))/(X2S5[J]-X2S5(J-1))               
      B=(X2S5(J-1)*Y2S5[J]-X2S5[J]*Y2S5(J-1))/(X2S5(J-1)-X2S5[J]) 
      QIN(19,I)=(A*EN+B)*1.0D-18  
      GO TO 3611
 3610 QIN(19,I)=Y2S5(N2S5)*(X2S5(N2S5)/EN)**3*1.0D-18
 3611 if(EN <= (2.0*EIN(19))) GO TO 362
      PEQIN(19,I)=PEQEL(2,(I-IOFFN(19)))
# 2S4 J=1 F=0.086
  362 if(EN <= EIN(20)) GO TO 413 
      QIN(20,I)=0.086/(EIN(20)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(20)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(20)+E(3))
      if(QIN(20,I):
 < 0.0) QIN(20,I)=0.0
      if(EN <= (2.0*EIN(20):
)) GO TO 363
      PEQIN(20,I)=PEQEL(2,(I-IOFFN(20)))
# SUM 3P10+3P9+3P8+3P7+3P6+3P5
  363 if(EN <= EIN(21)) GO TO 413
      if(EN > X3P105(N3PSUM):
) GO TO 3650
      DO 364 J=2,N3PSUM                                             
      if(EN <= X3P105[J]:
) GO TO 365                                
  364 CONTINUE                                                          
      J=N3PSUM                                                      
  365 A=(Y3P105[J]-Y3P105(J-1))/(X3P105[J]-X3P105(J-1))               
      B=(X3P105(J-1)*Y3P105[J]-X3P105[J]*Y3P105(J-1))/(X3P105(J-1)-X3P105[J]) 
      QIN(21,I)=(A*EN+B)*1.0D-18
      GO TO 3651
 3650 QIN(21,I)=Y3P105(N3PSUM)*(X3P105(N3PSUM)/EN)*1.0D-18
 3651 if(EN <= (2.0*EIN(21))) GO TO 366
      PEQIN(21,I)=PEQEL(2,(I-IOFFN(21)))
# 2P4                           
  366 if(EN <= EIN(22)) GO TO 413
      if(EN > X2P4(N2P4):
) GO TO 3680
      DO 367 J=2,N2P4                                               
      if(EN <= X2P4[J]:
) GO TO 368                                
  367 CONTINUE                                                          
      J=N2P4                                                      
  368 A=(Y2P4[J]-Y2P4(J-1))/(X2P4[J]-X2P4(J-1))               
      B=(X2P4(J-1)*Y2P4[J]-X2P4[J]*Y2P4(J-1))/(X2P4(J-1)-X2P4[J]) 
      QIN(22,I)=(A*EN+B)*1.0D-18  
      GO TO 3681
 3680 QIN(22,I)=Y2P4(N2P4)*(X2P4(N2P4)/EN)**2*1.0D-18
 3681 if(EN <= (2.0*EIN(22))) GO TO 369
      PEQIN(22,I)=PEQEL(2,(I-IOFFN(22)))
# SUM 4D6+4D3+4D4P+4D4+4D1PP+4D1P
  369 if(EN <= EIN(23)) GO TO 413
      if(EN > X4DSUM(N4DSUM):
) GO TO 3710
      DO 370 J=2,N4DSUM                                              
      if(EN <= X4DSUM[J]:
) GO TO 371                                
  370 CONTINUE                                                          
      J=N4DSUM                                                      
  371 A=(Y4DSUM[J]-Y4DSUM(J-1))/(X4DSUM[J]-X4DSUM(J-1))               
      B=(X4DSUM(J-1)*Y4DSUM[J]-X4DSUM[J]*Y4DSUM(J-1))/(X4DSUM(J-1)-X4DSUM[J]) 
      QIN(23,I)=(A*EN+B)*1.0D-18
      GO TO 3711
 3710 QIN(2,I)=Y4DSUM(N4DSUM)*(X4DSUM(N4DSUM)/EN)**3*1.0D-18
 3711 if(EN <= (2.0*EIN(23))) GO TO 372
      PEQIN(23,I)=PEQEL(2,(I-IOFFN(23)))
# 4D5 J=1 F=0.0010
  372 if(EN <= EIN(24)) GO TO 413 
      QIN(24,I)=0.0010/(EIN(24)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(24)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(24)+E(3))
      if(QIN(24,I):
 < 0.0) QIN(24,I)=0.0
      if(EN <= (2.0*EIN(24):
)) GO TO 373
      PEQIN(24,I)=PEQEL(2,(I-IOFFN(24)))
# 2P3                           
  373 if(EN <= EIN(25)) GO TO 413
      if(EN > X2P3(N2P3):
) GO TO 3750
      DO 374 J=2,N2P3                                               
      if(EN <= X2P3[J]:
) GO TO 375                                
  374 CONTINUE                                                          
      J=N2P3                                                      
  375 A=(Y2P3[J]-Y2P3(J-1))/(X2P3[J]-X2P3(J-1))               
      B=(X2P3(J-1)*Y2P3[J]-X2P3[J]*Y2P3(J-1))/(X2P3(J-1)-X2P3[J]) 
      QIN(25,I)=(A*EN+B)*1.0D-18  
      GO TO 3751
 3750 QIN(25,I)=Y2P3(N2P3)*(X2P3(N2P3)/EN)*1.D-18
 3751 if(EN <= (2.0*EIN(25))) GO TO 376
# 2P2                           
  376 if(EN <= EIN(26)) GO TO 413
      if(EN > X2P2(N2P2):
) GO TO 3780
      DO 377 J=2,N2P2                                               
      if(EN <= X2P2[J]:
) GO TO 378                                
  377 CONTINUE                                                          
      J=N2P2                                                      
  378 A=(Y2P2[J]-Y2P2(J-1))/(X2P2[J]-X2P2(J-1))               
      B=(X2P2(J-1)*Y2P2[J]-X2P2[J]*Y2P2(J-1))/(X2P2(J-1)-X2P2[J]) 
      QIN(26,I)=(A*EN+B)*1.0D-18  
      GO TO 3781
 3780 QIN(26,I)=Y2P2(N2P2)*(X2P2(N2P2)/EN)**2*1.0D-18
 3781 if(EN <= (2.0*EIN(26))) GO TO 379
# 2P1                           
  379 if(EN <= EIN(27)) GO TO 413
      if(EN > X2P1(N2P1):
) GO TO 3810
      DO 380 J=2,N2P1                                               
      if(EN <= X2P1[J]:
) GO TO 381                                
  380 CONTINUE                                                          
      J=N2P1                                                      
  381 A=(Y2P1[J]-Y2P1(J-1))/(X2P1[J]-X2P1(J-1))               
      B=(X2P1(J-1)*Y2P1[J]-X2P1[J]*Y2P1(J-1))/(X2P1(J-1)-X2P1[J]) 
      QIN(27,I)=(A*EN+B)*1.0D-18  
      GO TO 3811
 3810 QIN(27,I)=Y2P1(N2P1)*(X2P1(N2P1)/EN)*1.D-18
 3811 if(EN <= (2.0*EIN(27))) GO TO 382
# 4D2 J=1 F=0.0835
  382 if(EN <= EIN(28)) GO TO 413 
      QIN(28,I)=0.0835/(EIN(28)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(28)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(28)+E(3))
      if(QIN(28,I):
 < 0.0) QIN(28,I)=0.0
      if(EN <= (2.0*EIN(28):
)) GO TO 383
      PEQIN(28,I)=PEQEL(2,(I-IOFFN(28)))
# 3S4 J=1 F=0.0225
  383 if(EN <= EIN(29)) GO TO 413 
      QIN(29,I)=0.0225/(EIN(29)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(29)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(29)+E(3))
      if(QIN(29,I):
 < 0.0) QIN(29,I)=0.0
      if(EN <= (2.0*EIN(29):
)) GO TO 384
      PEQIN(29,I)=PEQEL(2,(I-IOFFN(29)))
# 5D5 J=1 F=0.0227
  384 if(EN <= EIN(30)) GO TO 413 
      QIN(30,I)=0.0227/(EIN(30)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(30)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(30)+E(3))
      if(QIN(30,I):
 < 0.0) QIN(30,I)=0.0
      if(EN <= (2.0*EIN(30):
)) GO TO 385
      PEQIN(30,I)=PEQEL(2,(I-IOFFN(30)))
# 5D2 J=1 F=0.0020
  385 if(EN <= EIN(31)) GO TO 413 
      QIN(31,I)=0.0020/(EIN(31)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(31)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(31)+E(3))
      if(QIN(31,I):
 < 0.0) QIN(31,I)=0.0
      if(EN <= (2.0*EIN(31):
)) GO TO 386
      PEQIN(31,I)=PEQEL(2,(I-IOFFN(31)))
# 4S4 J=1 F=0.0005
  386 if(EN <= EIN(32)) GO TO 413 
      QIN(32,I)=0.0005/(EIN(32)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(32)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(32)+E(3))
      if(QIN(32,I):
 < 0.0) QIN(32,I)=0.0
      if(EN <= (2.0*EIN(32):
)) GO TO 387
      PEQIN(32,I)=PEQEL(2,(I-IOFFN(32)))
# 3S1# J=1 F=0.1910
  387 if(EN <= EIN(33)) GO TO 413 
      QIN(33,I)=0.1910/(EIN(33)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(33)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(33)+E(3))
      if(QIN(33,I):
 < 0.0) QIN(33,I)=0.0
      if(EN <= (2.0*EIN(33):
)) GO TO 388
      PEQIN(33,I)=PEQEL(2,(I-IOFFN(33)))
# 6D5 J=1 F=0.0088 
  388 if(EN <= EIN(34)) GO TO 413 
      QIN(34,I)=0.0088/(EIN(34)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(34)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(34)+E(3))
      if(QIN(34,I):
 < 0.0) QIN(34,I)=0.0
      if(EN <= (2.0*EIN(34):
)) GO TO 389
      PEQIN(34,I)=PEQEL(2,(I-IOFFN(34)))
# 6D2 J=1 F=0.0967 
  389 if(EN <= EIN(35)) GO TO 413 
      QIN(35,I)=0.0967/(EIN(35)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(35)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(35)+E(3))
      if(QIN(35,I):
 < 0.0) QIN(35,I)=0.0
      if(EN <= (2.0*EIN(35):
)) GO TO 390
      PEQIN(35,I)=PEQEL(2,(I-IOFFN(35)))
# 5S4 J=1 F=0.0288 
  390 if(EN <= EIN(36)) GO TO 413 
      QIN(36,I)=0.0288/(EIN(36)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(36)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(36)+E(3))
      if(QIN(36,I):
 < 0.0) QIN(36,I)=0.0
      if(EN <= (2.0*EIN(36):
)) GO TO 391
      PEQIN(36,I)=PEQEL(2,(I-IOFFN(36)))
# 7D5 J=1 F=0.0042 
  391 if(EN <= EIN(37)) GO TO 413 
      QIN(37,I)=0.0042/(EIN(37)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(37)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(37)+E(3))
      if(QIN(37,I):
 < 0.0) QIN(37,I)=0.0
      if(EN <= (2.0*EIN(37):
)) GO TO 392
      PEQIN(37,I)=PEQEL(2,(I-IOFFN(37)))
# 7D2 J=1 F=0.0625 
  392 if(EN <= EIN(38)) GO TO 413 
      QIN(38,I)=0.0625/(EIN(38)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(38)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(38)+E(3))
      if(QIN(38,I):
 < 0.0) QIN(38,I)=0.0
      if(EN <= (2.0*EIN(38):
)) GO TO 393
      PEQIN(38,I)=PEQEL(2,(I-IOFFN(38)))
# 6S4 J=1 F=0.0025 
  393 if(EN <= EIN(39)) GO TO 413 
      QIN(39,I)=0.0025/(EIN(39)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(39)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(39)+E(3))
      if(QIN(39,I):
 < 0.0) QIN(39,I)=0.0
      if(EN <= (2.0*EIN(39):
)) GO TO 394
      PEQIN(39,I)=PEQEL(2,(I-IOFFN(39)))
# 2S2 J=1 F=0.0290 
  394 if(EN <= EIN(40)) GO TO 413 
      QIN(40,I)=0.0290/(EIN(40)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(40)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(40)+E(3))
      if(QIN(40,I):
 < 0.0) QIN(40,I)=0.0
      if(EN <= (2.0*EIN(40):
)) GO TO 395
      PEQIN(40,I)=PEQEL(2,(I-IOFFN(40)))
# 8D5 J=1 F=0.0035 
  395 if(EN <= EIN(41)) GO TO 413 
      QIN(41,I)=0.0035/(EIN(41)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(41)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(41)+E(3))
      if(QIN(41,I):
 < 0.0) QIN(41,I)=0.0
      if(EN <= (2.0*EIN(41):
)) GO TO 396
      PEQIN(41,I)=PEQEL(2,(I-IOFFN(41)))
# 8D2 J=1 F=0.0386 
  396 if(EN <= EIN(42)) GO TO 413 
      QIN(42,I)=0.0386/(EIN(42)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(42)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(42)+E(3))
      if(QIN(42,I):
 < 0.0) QIN(42,I)=0.0
      if(EN <= (2.0*EIN(42):
)) GO TO 397
      PEQIN(42,I)=PEQEL(2,(I-IOFFN(42)))
# 7S4 J=1 F=0.0050 
  397 if(EN <= EIN(43)) GO TO 413 
      QIN(43,I)=0.0050/(EIN(43)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(43)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(43)+E(3))
      if(QIN(43,I):
 < 0.0) QIN(43,I)=0.0
      if(EN <= (2.0*EIN(43):
)) GO TO 398
      PEQIN(43,I)=PEQEL(2,(I-IOFFN(43)))
# 9D5 J=1 F=0.0005 
  398 if(EN <= EIN(44)) GO TO 413 
      QIN(44,I)=0.0005/(EIN(44)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(44)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(44)+E(3))
      if(QIN(44,I):
 < 0.0) QIN(44,I)=0.0
      if(EN <= (2.0*EIN(44):
)) GO TO 399
      PEQIN(44,I)=PEQEL(2,(I-IOFFN(44)))
# 9D2 J=1 F=0.0250 
  399 if(EN <= EIN(45)) GO TO 413 
      QIN(45,I)=0.0250/(EIN(45)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(45)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(45)+E(3))
      if(QIN(45,I):
 < 0.0) QIN(45,I)=0.0
      if(EN <= (2.0*EIN(45):
)) GO TO 400
      PEQIN(45,I)=PEQEL(2,(I-IOFFN(45)))
# 8S4 J=1 F=0.0023 
  400 if(EN <= EIN(46)) GO TO 413 
      QIN(46,I)=0.0023/(EIN(46)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(46)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(46)+E(3))
      if(QIN(46,I):
 < 0.0) QIN(46,I)=0.0
      if(EN <= (2.0*EIN(46):
)) GO TO 401
      PEQIN(46,I)=PEQEL(2,(I-IOFFN(46)))
# 10D5 J=1 F=0.0005 
  401 if(EN <= EIN(47)) GO TO 413 
      QIN(47,I)=0.0005/(EIN(47)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(47)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(47)+E(3))
      if(QIN(47,I):
 < 0.0) QIN(47,I)=0.0
      if(EN <= (2.0*EIN(47):
)) GO TO 402
      PEQIN(47,I)=PEQEL(2,(I-IOFFN(47)))
# 10D2 J=1 F=0.0164 
  402 if(EN <= EIN(48)) GO TO 413 
      QIN(48,I)=0.0164/(EIN(48)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(48)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(48)+E(3))
      if(QIN(48,I):
 < 0.0) QIN(48,I)=0.0
      if(EN <= (2.0*EIN(48):
)) GO TO 403
      PEQIN(48,I)=PEQEL(2,(I-IOFFN(48)))
# 9S4  J=1 F=0.0014 
  403 if(EN <= EIN(49)) GO TO 413 
      QIN(49,I)=0.0014/(EIN(49)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(49)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(49)+E(3))
      if(QIN(49,I):
 < 0.0) QIN(49,I)=0.0
      if(EN <= (2.0*EIN(49):
)) GO TO 404
      PEQIN(49,I)=PEQEL(2,(I-IOFFN(49)))
# HIGH J=1 F=0.0831
  404 if(EN <= EIN(50)) GO TO 413 
      QIN(50,I)=0.0831/(EIN(50)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(50)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(50)+E(3))
      if(QIN(50,I):
 < 0.0) QIN(50,I)=0.0
      if(EN <= (2.0*EIN(50):
)) GO TO 405
      PEQIN(50,I)=PEQEL(2,(I-IOFFN(50)))
  405 CONTINUE
      if(EN <= 1000.):
 GO TO 413
      DO 500 J=2,NBREM
      if(EN <= EBRM(2):
) GO TO 510
  500 CONTINUE
      J=NBREM
  510 A=(math.log(Z54T[J])-math.log(Z54T(J-1)))/(EBRM[J]-EBRM(J-1))
      B=(math.log(Z54T[J])*EBRM(J-1)-math.log(Z54T(J-1))*EBRM[J])/(EBRM(J-1)-EBRM[J])
      QIN(51,I)=math.exp(A*EN+B)*1.D-24
#
# CALCULATE TOTAL X-SECTION
  413 QEXC=0.0
      DO 414 NLEV=1,NIN
  414 QEXC=QEXC+QIN(NLEV,I) 
      Q(1,I)=QELA+QION(1,I)+QION(2,I)+QION(3,I)+QION(4,I)+QION(5,I)+QION(6,I)+QION(7,I)+QION(8,I)+QION(9,I)+QION(10,I)+QION(11,I)+QION(12,I)+QEXC+QIN(51,I)
#
#     WRITE(6,997) EN,Q(1,I),QEXC,Q(5,I),QELA
# 997 print(' EN =',D12.4,' QTOT =','%.3f' %,' QEXC =','%.3f' %,' QION =',D12
#    /.3,' QELA = ','%.3f' %)  
#
  900 CONTINUE       
# SAVE COMPUTE TIME
      DO 910 K=1,NIN
      if(EFINAL <= EIN[K]:
) :
       NIN=K-1
       GO TO 911
      # endif
  910 CONTINUE
  911 CONTINUE
      if(EFINAL > 1000.):
 NIN=51
      RETURN                                                            
      # end 
      def GAS8(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY  ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN) 
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000)
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6)
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]  
      DIMENSION XEN(153),YELM(153),YELT(153),YEPS(153),XATT(6),YATT(6), XVBV4(26),YVBV4(26),XVBV2(29),YVBV2(29),XVBV1(30),YVBV1(30),XVBV3(25),YVBV3(25),XVBH1(14),YVBH1(14),XVBH2(14),YVBH2(14),XION(70),YION(70),YINC(70),XINF(70),YINF(70),XINF1(68),YINF1(68),XINF2(66),YINF2(66),XINF3(53),YINF3(53),XINF4(51),YINF4(51),XINF5(50),YINF5(50),XIN'%.4f' %8),YIN'%.4f' %8),XINPP(49),YINPP(49),XDET(9),YDET(9),XTR1(12),YTR1(12),XTR2(11),YTR2(11),XTR3(11),YTR3(11),XCHD[32],YCHD[32],XCHB[35],YCHB[35],XHAL(34),YHAL(34),XHBE(34),YHBE(34),XKSH(83),YKSH(83),IOFFN(34),IOFFION(10)
      DIMENSION Z1T(25),Z6T(25),EBRM(25)
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      DATA XEN/0.00,.0001,.001,.002,.004,.007,0.01,.012,.014,.017,0.02,.025,0.03,.035,0.04,0.05,0.06,0.07,0.08,0.09,0.10,0.12,0.14,0.17,0.20,0.24,0.28,0.32,0.36,0.40,0.45,0.50,0.60,0.70,0.80,1.00,1.20,1.40,1.70,2.00,2.50,3.00,3.50,4.00,5.00,6.00,7.00,8.00,9.00,10.0,12.0,15.0,20.0,25.0,30.0,40.0,50.0,60.0,80.0,100.,150.,200.,300.,400.,500.,600.,800.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,7000.,8000.,9000.,1.D4,1.25D4,1.5D4,1.75D4,2.0D4,2.5'%.3f' %.0'%.3f' %.5D4,4.0D4,4.5D4,5.0D4,6.0D4,7.0D4,8.0D4,9.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5'%.3f' %.0'%.3f' %.5D5,4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,2.0D6,2.5'%.3f' %.0'%.3f' %.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5'%.3f' %.0'%.3f' %.5D7,4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,1.0D8,1.25D8,1.5D8,1.75D8,2.0D8,2.5'%.3f' %.0'%.3f' %.5D8,4.0D8,4.5D8,5.0D8,6.0D8,7.0D8,8.0D9,9.0D8,1.0D9/
# ELASTIC MOMENTUM TRANSFER X-SECTION     
      DATA YELM/26.7,25.4,22.6,21.0,18.8,16.5,14.8,13.9,13.0,12.0,11.2,10.05,9.05,8.20,7.50,6.25,5.30,4.60,3.88,3.22,2.60,1.74,1.19,0.70,.440,.290,.270,.270,.325,.410,.540,.645,.850,1.08,1.30,1.75,2.25,2.70,3.50,4.35,6.00,7.70,9.70,11.7,14.9,17.0,18.4,18.6,18.6,17.7,14.6,10.6,6.90,4.80,3.90,2.75,2.15,1.75,1.24,0.96,0.59,.400,.235,0.16,.115,0.09,0.06,.045,.0223,.0134,.00654,.0039,.00261,.00188,.00142,.00112,9.01D-4,7.44D-4,4.96D-4,3.56D-4,2.69D-4,2.11D-4,1.41D-4,1.01D-4,7.67D-5,6.03D-5,4.88D-5,4.04D-5,2.92D-5,2.22D-5,1.76D-5,1.43D-5,1.19D-5,8.09D-6,5.93D-6,4.57D-6,3.66D-6,2.54D-6,1.89D-6,1.48D-6,1.20D-6,9.96D-7,8.45D-7,6.38D-7,5.04D-7,4.11D-7,3.43D-7,2.92D-7,2.09D-7,1.58D-7,1.24D-7,1.00D-7,7.01D-8,5.21D-8,4.04D-8,3.24D-8,2.66D-8,2.22D-8,1.62D-8,1.24D-8,9.84D-9,8.00D-9,6.64D-9,4.45D-9,3.20D-9,2.42D-9,1.90D-9,1.26D-9,8.98D-10,6.74D-10,5.25D-10,4.21D-10,3.45D-10,2.44D-10,1.82D-10,1.40D-10,1.12D-10,9.11D-11,5.89D-11,4.11D-11,3.03D-11,2.32D-11,1.49D-11,1.04D-11,7.63D-12,5.84D-12,4.62D-12,3.74D-12,2.60D-12,1.91D-12,1.46D-12,1.16D-12,9.36D-13/
# ELASTIC TOTAL X-SECTION               
      DATA YELT/26.7,25.6,23.3,22.0,19.9,17.9,16.4,15.5,14.8,13.8,12.9,11.6,10.6,9.67,8.89,7.60,6.57,5.70,4.90,4.20,3.70,2.80,2.20,1.62,1.23,0.95,0.82,0.75,0.72,0.71,0.73,0.77,0.95,1.10,1.28,1.72,2.25,3.00,3.96,5.05,6.93,8.93,11.2,13.4,17.9,21.5,23.3,24.0,24.1,24.0,22.2,19.9,16.0,13.4,11.6,8.94,7.57,6.46,5.11,4.24,2.79,2.21,1.56,1.06,0.80,0.63,0.50,0.40,0.31,.252,.202,.167,.147,.123,.106,.093,.083,.075,.060,.051,.044,.039,.0315,.0266,.0231,.0205,.0185,.0169,.0144,.0127,.0117,.0104,.00957,.00812,.00715,.00647,.00595,.00524,.00477,.00444,.00420,.00401,.00387,.00365,.00350,.00340,.00331,.00325,.00314,.00308,.00303,.00300,.00296,.00294,.00293,.00292,.00291,.00290,.00290,.00289,.00289,.00289,.00289,.00288,.00288,.00288,.00288,26*.002879/
# EPSILON FOR ELASTIC ANGULAR DISTRIBUTION  
#  EPSILON=1.0-YEPS
      DATA YEPS/1.00,.9883,.9550,.9319,.9172,.8830,.8543,.8459,.8188,.8058,.8039,.8012,.7827,.7743,.7680,.7373,.7149,.7153,.6937,.6584,.5712,.4669,.3718,.2583,.1913,.1495,.1680,.1932,.2771,.4139,.6212,.7594,.8429,.9727,1.0234,1.0262,1.000,.8507,.8268,.7939,.8003,.7951,.8007,.8111,.7518,.6921,.6907,.6700,.6655,.6181,.5124,.3626,.2575,.1917,.1736,.1512,.1338,.1245,.1054,.0951,.0859,.0685,.0526,.0528,.0493,.0488,.0383,.0350,.0192,.0129,.0069,.0046,.00326,.00272,.00232,.00204,.00180,.00162,.00130,.00107,.00091,.000791,.000634,.000523,.000448,.000390,.000344,.000307,.000254,.000215,1.81D-4,1.63D-4,1.46D-4,1.14D-4,9.23D-5,7.71D-5,6.60D-5,5.06D-5,4.04D-5,3.33D-5,2.81D-5,2.41D-5,2.09D-5,1.63D-5,1.32D-5,1.09D-5,9.17D-6,7.85D-6,5.64D-6,4.24D-6,3.31D-6,2.66D-6,1.83D-6,1.37D-6,1.03D-6,8.09D-7,6.55D-7,5.41D-7,3.88D-7,2.92D-7,2.27D-7,1.82D-7,1.49D-7,9.75D-8,6.87D-8,5.10D-8,3.93D-8,2.54D-8,1.78D-8,1.31D-8,1.01D-8,7.97D-9,6.46D-9,4.48D-9,3.28D-9,2.50D-9,1.97D-9,1.59D-9,1.00D-9,6.86D-10,4.98D-10,3.77D-10,2.37D-10,1.62D-10,1.17D-10,8.90D-11,6.90D-11,5.60D-11,3.80D-11,2.70D-11,2.10D-11,1.60D-11,1.30D-11/
# V4 DIPOLE PART AS ANALYTIC def IN def
# ABOVE 100 EV SCALED BY 1/E**2 
      DATA XVBV4/.1625135,0.20,0.30,0.40,0.50,0.60,0.80,1.00,1.50,2.00,3.00,5.00,6.00,7.00,8.00,9.00,10.0,12.5,15.0,20.0,30.0,40.0,50.0,60.0,80.0,100./
      DATA YVBV4/0.00,.0001,.060,.057,.055,.050,.040,.035,.041,.056,.082,.278,.406,0.47,0.44,.383,.323,.266,.201,.126,.056,.031,.020,.014,.0079,.005/ 
# V2       
      DATA XVBV2/.1901087,.195,0.20,0.21,0.22,0.23,0.24,0.26,0.28,0.30,0.40,0.50,0.60,0.80,1.00,1.50,2.00,3.00,5.00,6.00,7.00,8.00,9.00,10.0,12.5,15.0,20.0,30.0,40.0/
      DATA YVBV2/0.00,.028,.038,.051,.060,.066,.071,.075,.076,.077,  .080,.081,.082,.082,.083,.084,.086,.118,.308,.446,0.49,0.46,.403,.333,.217,.171,.102,.045,.025/
# V1  
      DATA XVBV1/.3615974,.363,.365,.367,0.37,.375,0.38,0.39,0.40,0.42,0.45,0.50,0.60,0.70,0.80,1.00,1.50,2.00,3.00,5.00,6.00,7.00,8.00,9.00,10.0,12.5,15.0,20.0,30.0,40.0/
      DATA YVBV1/.0,.0028,.0043,.0054,.0066,.0083,.0095,.0115,.013,.015,.017,.019,0.02,0.02,.021,.022,.023,.025,.042,.157,.226,.260,.260,.215,.190,.151,.120,.085,.038,.021/
# V3 DIPOLE PART AS ANALYTIC def
      DATA XVBV3/.3743690,0.40,0.50,0.60,0.70,0.80,1.00,1.50,2.00,3.00,5.00,6.00,7.00,8.00,9.00,10.0,12.5,15.0,20.0,30.0,40.0,50.0,60.0,80.0,100./
      DATA YVBV3/.0,.004,0.01,.011,.011,.011,.011,.015,.019,.105,.458,.596,.680,.680,.593,.433,.300,.241,.142,.063,.0355,.0227,.0158,.0089,.0057/
# VIBRATION HARMONIC 
      DATA XVBH1/.544,1.00,2.00,3.00,5.00,6.00,7.00,8.00,9.00,10.0,12.5,15.0,17.5,20.0/
      DATA YVBH1/0.00,.0007,.0028,.014,.053,.068,.075,.075,.061,.044,.031,.021,.015,.011/
# VIBRATION HARMONIC
      DATA XVBH2/.736,1.00,2.00,3.00,5.00,6.00,7.00,8.00,9.00,10.0,12.5,15.0,17.5,20.0/
      DATA YVBH2/0.00,.0005,.0022,.0135,.044,.058,.064,.064,.053,.039,.024,.014,.010,.006/
# IONISATION  X-SECTION ABOVE 1KEV GIVEN BY BORN-BETHE         
      DATA XION/12.65,13.5,14.0,14.5,15.0,15.5,16.0,16.5,17.0,17.5,     18.0,18.5,19.0,19.5,21.0,21.5,22.0,22.5,23.0,23.5,24.0,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,105.,110.,115.,120.,125.,130.,135.,140.,145.,150.,160.,180.,200.,250.,300.,350.,400.,450.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000./
# GROSS IONISATION  WEIGHTED AVERAGE OF: RAP AND ENGLANDER, 
#                LINDSAY AND STEBBINGS, AND NISHIMURA
      DATA YION/0.00,.035,.075,.132,.201,.282,.366,.451,.538,.625,      .715,.803,.892,.990,1.26,1.36,1.44,1.52,1.60,1.68,1.75,2.00,2.23,2.41,2.58,2.72,2.83,2.95,3.06,3.25,3.41,3.52,3.61,3.66,3.71,3.73,3.74,3.75,3.74,3.73,3.71,3.68,3.66,3.63,3.60,3.57,3.53,3.50,3.46,3.42,3.36,3.27,3.12,3.00,2.69,2.40,2.22,2.04,1.88,1.74,1.64,1.53,1.44,1.36,1.30,1.25,1.19,1.15,1.10,1.053/
# COUNTING IONISATION
      DATA YINC/0.00,.035,.075,.132,.201,.282,.366,.451,.538,.625,      .715,.803,.892,.990,1.26,1.36,1.44,1.52,1.60,1.68,1.75,2.00,2.22,2.40,2.57,2.71,2.82,2.93,3.04,3.23,3.38,3.49,3.57,3.62,3.67,3.69,3.70,3.71,3.70,3.69,3.67,3.64,3.62,3.59,3.56,3.53,3.49,3.46,3.43,3.39,3.33,3.24,3.09,2.97,2.66,2.38,2.20,2.02,1.86,1.72,1.62,1.52,1.43,1.35,1.29,1.24,1.18,1.14,1.09,1.042/
# IONISATION TO DOUBLE CHARGE FINAL STATES
      DATA XINPP/27.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,105.,110.,115.,120.,125.,130.,135.,140.,145.,150.,160.,180.,200.,250.,300.,350.,400.,450.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000./
      DATA YINPP/0.00,.005,.005,.005,.005,.005,0.01,0.01,0.01,.015,.015,0.02,0.02,0.02,0.02,0.02,0.02,0.02,0.02,0.02,0.02,0.02,0.02,0.02,0.02,0.02,0.02,.015,.015,.015,.015,.015,.015,.015,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01/
# IONISATION TO CH4 +
      DATA XINF/12.65,13.5,14.0,14.5,15.0,15.5,16.0,16.5,17.0,17.5,18.0,18.5,19.0,19.5,21.0,21.5,22.0,22.5,23.0,23.5,24.0,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,105.,110.,115.,120.,125.,130.,135.,140.,145.,150.,160.,180.,200.,250.,300.,350.,400.,450.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000./
      DATA YINF/0.0,.035,.075,.119,.169,.228,.284,.335,.383,.425,.479,.529,.579,.632,.773,.824,.862,.899,.938,.976,1.008,1.114,1.199,1.254,1.308,1.342,1.363,1.389,1.412,1.443,1.477,1.497,1.502,1.508,1.514,1.514,1.510,1.508,1.499,1.494,1.485,1.470,1.459,1.446,1.434,1.422,1.409,1.401,1.392,1.380,1.359,1.325,1.269,1.227,1.119,1.016,.9535,.8886,.8206,.7609,.7199,.6785,.6419,.6094,.5824,.5599,.5355,.5200,.4990,.4787/
# IONISATION TO CH3 +
      DATA XINF1/14.25,14.5,15.0,15.5,16.0,16.5,17.0,17.5,18.0,18.5,19.0,19.5,21.0,21.5,22.0,22.5,23.0,23.5,24.0,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,105.,110.,115.,120.,125.,130.,135.,140.,145.,150.,160.,180.,200.,250.,300.,350.,400.,450.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000./
      DATA YINF1/0.0,.013,.032,.054,.081,.114,.152,.195,.230,.267,.304,.347,.471,.517,.557,.598,.633,.668,.700,.808,.896,.968,1.017,1.052,1.073,1.092,1.110,1.145,1.178,1.205,1.221,1.227,1.233,1.232,1.227,1.230,1.226,1.220,1.211,1.201,1.194,1.188,1.181,1.175,1.163,1.153,1.144,1.132,1.113,1.088,1.047,1.011,.9249,.8351,.7766,.7171,.6676,.6240,.5890,.5539,.5237,.4968,.4769,.4605,.4381,.4232,.4048,.3872/
# IONISATION TO CH2 +
      DATA XINF2/15.2,15.5,16.0,16.5,17.0,17.5,18.0,18.5,19.0,19.5,21.0,21.5,22.0,22.5,23.0,23.5,24.0,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,105.,110.,115.,120.,125.,130.,135.,140.,145.,150.,160.,180.,200.,250.,300.,350.,400.,450.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000./
      DATA YINF2/0.0,.0004,.0010,.0019,.0030,.0044,.0058,.0073,.0089,.0108,.0166,.0189,.0209,.0231,.0273,.0318,.0363,.0593,.0888,.1208,.1499,.1797,.2034,.2220,.2415,.2684,.2781,.2866,.2926,.2953,.2980,.3008,.3029,.3001,.2958,.2968,.2969,.2949,.2937,.2902,.2868,.2834,.2790,.2755,.2720,.2677,.2619,.2528,.2381,.2286,.1971,.1729,.1554,.1386,.1268,.1164,.1091,.1019,.0942,.0874,.0839,.0809,.0764,.0732,.0694,.0658/
# IONISATION TO H +
      DATA XINF3/22.2,23.0,23.5,24.0,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,105.,110.,115.,120.,125.,130.,135.,140.,145.,150.,160.,180.,200.,250.,300.,350.,400.,450.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000./
      DATA YINF3/0.0,.00104,.00218,.00341,.00962,.0176,.0265,.0419,.0585,.0782,.1016,.1266,.1885,.2404,.2799,.3187,.3435,.3688,.3845,.3992,.4088,.4166,.4188,.4198,.4193,.4200,.4154,.4112,.4067,.4003,.3951,.3896,.3834,.3750,.3622,.3405,.3219,.2655,.2247,.2000,.1765,.1570,.1398,.1291,.1187,.1083,.0990,.0933,.0883,.0824,.0780,.0735,.0692/
# IONISATION TO CH+ NOTE THRESHOLD INCREASED FROM 22.3 DUE TO EXC. STATE
      DATA XINF4/23.5,24.0,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,105.,110.,115.,120.,125.,130.,135.,140.,145.,150.,160.,180.,200.,250.,300.,350.,400.,450.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000./
      DATA YINF4/0.0,.00112,.00758,.0166,.0269,.0438,.0621,.0785,.0933,.1090,.1308,.1391,.1490,.1579,.1629,.1679,.1680,.1675,.1689,.1693,.1665,.1631,.1611,.1596,.1570,.1545,.1520,.1491,.1467,.1443,.1415,.1378,.1320,.1220,.1138,.0971,.0824,.0730,.0641,.0573,.0513,.0471,.0430,.0399,.0370,.0349,.0332,.0315,.0304,.0289,.0274/
# IONISATION TO C +
      DATA XINF5/25.2,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,105.,110.,115.,120.,125.,130.,135.,140.,145.,150.,160.,180.,200.,250.,300.,350.,400.,450.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000./
      DATA YINF5/0.0,.00092,.0018,.0028,.0068,.0112,.0160,.0212,.0267,.0331,.0412,.0446,.0477,.0508,.0539,.0561,.0581,.0581,.0578,.0579,.0578,.0581,.0585,.0581,.0576,.0571,.0561,.0553,.0546,.0536,.0524,.0501,.0463,.0436,.0352,.0303,.0256,.0213,.0188,.0166,.0154,.0142,.0131,.0122,.0106,.0099,.0095,.0093,.0088,.0083/
# IONISATION TO H2 +
      DATA XINF6/27.9,30.0,32.0,34.0,36.0,38.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,105.,110.,115.,120.,125.,130.,135.,140.,145.,150.,160.,180.,200.,250.,300.,350.,400.,450.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000./
      DATA YINF6/0.0,.0010,.0028,.0047,.0074,.0109,.0146,.0214,.0259,.0286,.0311,.0326,.0342,.0349,.0354,.0359,.0361,.0361,.0360,.0356,.0352,.0348,.0344,.0341,.0336,.0332,.0328,.0324,.0317,.0300,.0272,.0248,.0212,.0185,.0160,.0138,.0122,.0109,.0103,.0098,.0089,.0082,.0077,.0073,.0065,.0059,.0057,.0054/
# K-SHELL IONISATION X-SECTION CARBON  
      DATA XKSH/285.,298.,307.,316.,325.,335.,345.,365.,398.,422.,447.,473.,501.,531.,613.,668.,708.,750.,817.,917.,1000.,1122.,1296.,1496.,1679.,1884.,2054.,2238.,2512.,2985.,3981.,5012.,7079.,1.0D4,1.50D4,2.05D4,2.51'%.3f' %.07D4,4.10D4,5.01D4,6.13D4,7.08D4,8.18D4,1.0D5,1.54D5,2.05D5,2.99D5,4.10D5,5.01D5,6.13D5,7.08D5,8.18D5,1.0D6,1.26D6,1.5D6,2.05'%.3f' %.07D6,4.10D6,5.01D6,6.13D6,7.08D6,8.18D6,1.0D7,1.26D7,1.5D7,2.05'%.3f' %.07D7,4.10D7,5.01D7,6.13D7,7.08D7,8.18D7,1.0D8,1.26D8,1.5D8,2.05'%.3f' %.07D8,4.10D8,5.01D8,6.13D8,7.08D8,8.18D8,1.0D9/
      DATA YKSH/0.00,1.66D-4,3.48D-4,5.25D-4,6.96D-4,8.63D-4,1.02D-3,1.33D-3,1.75D-3,2.01D-3,2.24D-3,2.46D-3,2.66D-3,2.84D-3,3.21D-3,3.38D-3,3.47D-3,3.55D-3,3.65D-3,3.72D-3,3.75D-3,3.74D-3,3.68D-3,3.57D-3,3.45D-3,3.31D-3,3.19D-3,3.07D-3,2.91D-3,2.66D-3,2.25D-3,1.95D-3,1.55D-3,1.21D-3,8.97D-4,7.07D-4,6.07D-4,5.21D-4,4.21D-4,3.63D-4,3.14D-4,2.84D-4,2.57D-4,2.25D-4,1.74D-4,1.50D-4,1.28D-4,1.15D-4,1.09D-4,1.05D-4,1.03D-4,1.02D-4,1.01D-4,1.005D-4,1.01D-4,1.03D-4,1.07D-4,1.11D-4,1.14D-4,1.17D-4,1.20D-4,1.22D-4,1.25D-4,1.29D-4,1.32D-4,1.38D-4,1.45D-4,1.50D-4,1.54D-4,1.58D-4,1.60D-4,1.63D-4,1.67D-4,1.71D-4,1.74D-4,1.80D-4,1.87D-4,1.92D-4,1.96D-4,2.00D-4,2.02D-4,2.05D-4,2.09D-4/
# ATTACHMENT  - DEATTACHMENT VIA H- 9.8 EV RESONANCE (RAWAT ET AL)
      DATA XDET/7.80,8.00,9.00,9.80,10.0,11.0,12.0,13.0,14.0/
      DATA YDET/0.00,.0049,.0134,.0153,.0150,.0113,.0038,.0095,0.00/
# ATTACHMENT  VIA CH2- ONLY (RAWAT ET AL)
      DATA XATT/9.00,10.0,10.4,11.0,12.0,13.0/                          
      DATA YATT/0.00,0.00092,.00112,.00089,.00027,0.00/                 
# DISSOCIATION TRIPLET + SINGLETS ( SINGLETS GIVEN ANALYTICALLY)
# TRIPLETS  
      DATA XTR1/7.50,8.50,10.0,11.0,12.0,13.0,15.0,17.0,20.0,23.0,27.0,30.0/
      DATA YTR1/0.00,.015,.050,.075,.084,.090,.098,.100,.090,.075,.055,.043/
      DATA XTR2/8.50,10.0,11.0,12.0,13.0,15.0,17.0,20.0,23.0,27.0,30.0/
      DATA YTR2/0.00,.088,.161,.185,.198,.216,.220,.198,.165,.121,.095/
      DATA XTR3/10.0,11.0,12.0,13.0,15.0,17.0,20.0,23.0,27.0,30.0,35.0/
      DATA YTR3/0.00,.245,.504,.588,.665,.700,.700,.665,.525,.406,.301/
# LIGHT EMISSION FROM CH(A2DELTA TO X2PI) 
      DATA XCHD/13.4,13.5,14.5,18.5,20.6,21.6,22.5,23.6,27.7,31.8,33.5,33.9,35.4,37.5,39.2,40.0,44.0,49.1,55.6,58.3,60.1,63.2,67.0,71.3,76.3,80.3,100.,150.,200.,400.,700.,1000./
      DATA YCHD/0.00,.0041,.0065,.0116,.0169,.0205,.0232,.0261,.0299,.0327,.0339,.0355,.0363,.0392,.0411,.0441,.0462,.0469,.0476,.0479,.0481,.0485,.0489,.0491,.0487,.0477,.0403,.0292,.0232,.0131,.0082,.0060/
# LIGHT EMISSION FROM CH(B2SIGMA- TO X2PI)
      DATA XCHB/13.7,13.8,14.8,18.8,20.9,21.9,22.8,23.9,28.0,32.1,33.8,34.2,35.7,37.8,39.5,42.1,43.4,44.3,49.4,56.0,58.6,60.4,63.5,67.3,71.6,76.6,80.6,100.,150.,200.,400.,700.,1000.,1500.,2000./
      DATA YCHB/0.00,2.44D-4,3.91D-4,6.96D-4,.00102,.00123,.0014,.00157,.0018,.00197,.00204,.00214,.00219,.00236,.00248,.00259,.00265,.00278,.00283,.00286,.00289,.00290,.00292,.00295,.00296,.00293,.00287,.00242,.00176,.00139,7.88D-4,4.93D-4,3.63D-4,2.57D-4,2.00D-4/
# LIGHT EMISSION FROM H(ALPHA)
      DATA XHAL/16.14,16.3,16.6,16.9,17.2,18.1,19.2,20.0,20.8,22.6,25.2,30.0,40.0,50.0,60.0,70.0,80.0,90.0,100.,144.,185.,200.,224.,245.,284.,364.,453.,500.,600.,700.,800.,1000.,1500.,2000./
      DATA YHAL/0.00,2.54D-4,3.80D-4,5.05D-4,6.60D-4,.00101,.00142,.00175,.00209,.00288,.00431,.00686,.01225,.0156,.0181,.0195,.0204,.0203,.0200,.0181,.0148,.0134,.0127,.0119,.0103,.00789,.00598,.00529,.00425,.00357,.00309,.00227,.0016,.00125/
# LIGHT EMISSION FROM H(BETA)
      DATA XHBE/16.8,18.0,21.9,23.4,24.5,25.5,26.4,28.2,30.0,33.7,37.2,40.0,50.0,57.7,80.0,100.,141.,169.,200.,226.,247.,284.,340.,363.,398.,455.,500.,550.,654.,700.,800.,999.,1500.,2000./
      DATA YHBE/0.00,1.53D-4,5.44D-4,7.19D-4,8.85D-4,.00114,.00128,.00159,.00194,.00228,.00269,.00316,.00374,.00419,.00481,.00463,.00419,.00374,.00314,.00288,.00269,.00227,.00194,.00179,.00160,.00140,.00128,.00114,9.5D-4,8.85D-4,7.19D-4,5.45D-4,3.84D-4,3.00D-4/
# BREMSSTRAHLUNG X-SECTION WITH CUT UNITS 10**-24
      DATA Z1T/11.3,6.18,2.80,1.54,.858,.407,.251,.176,.145,.150,.167,.178,.187,.193,.198,.205,.210,.218,.222,.228,.231,.233,.234,.235,.235/
      DATA Z6T/298.,178.,85.2,47.5,26.3,12.2,7.06,4.45,3.06,2.82,2.89,2.99,3.08,3.13,3.18,3.25,3.31,3.39,3.44,3.49,3.52,3.54,3.55,3.57,3.57/
      DATA EBRM/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,4.E7,5.E7,6.E7,8.E7,1.E8/
#-----------------------------------------------------------------------
# 2015: INCLUDED IMPLICIT IONISATION DISSOCIATION CHANNELS AND
#        REMOVED IONISATION-EXCITATION (DISSOCIATION) CHANNEL.
#        ADDED ENERGY LOSS TO EXCITED ION LEVELS AS AN 
#        APPROXIMATE CROSS SECTION WITH ENERGY LOSS 16 EV
#-----------------------------------------------------------------------
# 2013: UPDATE INCLUDES USE OF OSCILLATOR STRENGTHS FOR DIPOLE SINGLET
#       DISSOCIATION X-SECTION. USED OSCILLATOR STRENGTH FROM 
#       AN AVERAGE OF BRION AND KATEMA WITH HIGH ENERGY VALUES FROM 
#       BERKOWITZ. 1-2% SCALING FACTOR AT # end OF BEF FORMULA IS FROM
#       INCREASED ENERGY LOSS FROM THRESHOLD ENERGY TO AVERAGE ENERGY 
#       FOR THE DIPOLE STATES. 
#       3 TRIPLET STATE DISSOCIATION X-SECTIONS ALLOWED TO VARY IN ORDER
#       TO GIVE FIT TO TOWNS# end COEFICIENT AT LOW FIELD.
#       INTRODUCED DISSOCIATIVE IONISATION X-SECTION OF APPROXIMATELY
#       50% OF TOTAL IONISATION X-SECTION .  AGREES WITH EXPERIMENTAL 
#       FRAGMENT YIELD FROM LINDSAY AND IMPROVES AGREEMENT WITH WINTERS 
#       TOTAL DISSOCIATION X-SECTION.
#       K-SHELL IONISATION INTRODUCED FOR DE/DX AND FANO CALCULATIONS. 
# ---------------------------------------------------------------------
# 2007: UPDATE OF 2004 DATABASE 
# NOW SPLIT V24 AND V13 VIBRATIONS INTO V1 V2 V3 AND V4 X-SECTIONS
#  SHAPE OF VIBRATIONS GIVEN BY SHAPE defS FROM THEORETICAL 
#  PREDICTIONS BY GIANTURCO ET AL. AND EXPERIMENT BY ALLAN.
#  VIBRATION ANGULAR DISTRIBUTIONS MODELLED BY MODIFIED CAPITELLI/LONGO
#  ELASTIC ANGULAR DISTRIBUTIONS CAN BE EITHER ISOTROPIC OR MODELLED
#  BY OKHRIMOVSKYY ET AL ALGORITHM
# IONISATION AND DISSOCIATION ANGULAR DISTRIBUTIONS GIVEN BY ELASTIC 
# ANGULAR DISTRIBUTION WITH ENERGY OFFSET GIVEN BY THRESHOLD ENERGY.
#  DATABASE EXT# endED TO MIP REGION.
# NOW INCLUDES LIGHT EMISSION X-SECTIONS FROM 
# SASIC ,PETROVIC ET AL NEW JOURNAL OF PHYSICS 6(2004)74
#----------------------------------------------------------------------
# ATTACHMENT CROSS-SECTION OF RAWAT ET AL : JOURNAL OF PHYSICS:
# CONFERENCE SERIES 80(2007)012018 NOW USED INSTEAD OF SHARP AND DOWELL
# DE-ATTACHMENT FOR PART OF ATTACHMENT TO H- ION ASSUMED DUE TO 
# HIGH COLLISIONAL ENERGY printION.
# --------------------------------------------------------------------- 
#  FIT TO METHANE DRIFT VELOCITY OF HADDAD AND SCHMIDT AT LOW FIELD 
#  AND HUNTER AND KLINE AND YOSHIDA AT HIGH FIELD.
#  CALCULATED DRIFT VELOCITY IS WITHIN 1% AT ALL FIELDS UP TO 1000 TD 
#  TRANSVERSE AND LONGITUDINAL DIFFUSION WITHIN 3% AT ALL FIELDS
#  TOWNS# end COEFICIENT WITHIN 3% AT ALL FIELDS  
# REPRODUCES DRIFT VELOCITY AND LORENTZ ANGLES IN ARGON METHANE MIXTURES
# LORENTZ ANGLE ACCURACY LESS THAN 1 DEGREE IN ARGON MIXTURES
# DRIFT VELOCITY BETTER THAN 0.75% IN ARGON MIXTURES.
# ALL ENERGY DEP# endENT FANO FACTORS WITHIN EXPERIMENTAL ERRORS OF 5%  
#-----------------------------------------------------------------------
#     NANISO=0
      if(NANISO == 0):
 :
       NAME=' CH4 2015    ISOTROPIC  '
      else:
       NAME=' CH4 2015  ANISOTROPIC  '
      # endif
#-----------------------------------------------------------------------
# BORN BETHE CONSTANTS
      A0=0.52917720859D-08
      RY=13.60569193
      CONST=1.873884D-20
      EMASS2=1021997.804
      API=numpy.arccos(-1.00)
      BBCONST=16.00*API*A0*A0*RY*RY/EMASS2
#
# BORN BETHE VALUES FOR IONISATION
      AM2=3.75
      C=42.5 
# BORN BETHE FOR EXCITATION
      AM2EXC=1.40
      CEXC=19.0 
#  ARRAY SIZE
      NASIZE=20000
# 
      NION=9
      NATT=1
      NIN=34
      NNULL=0 
      IONMODEL=0
#
      NBREM=25
      DO 8 J=1,NIN
      IZBR[J]=0
    8 CONTINUE
      IZBR(35)=6
      IZBR(36)=1
#
      DO 1 J=1,6
    1 KEL[J]=NANISO
# SUPERELASTIC, V2 V1 AND HARMONIC VIBRATIONS ASSUMED ISOTROPIC
      KIN[1]=0
      KIN(3)=0
      KIN(4)=0
      KIN(5)=0
      KIN(7)=0
      KIN(8)=0
# V4 AND V3 VIBRATIONS ANISOTROPIC ( CAPITELLI-LONGO)
      KIN(2)=1
      KIN(6)=1
# ANGULAR DISTRIBUTION FOR DISSOCIATIVE EXCITATION IS OKHRIMOVSKYY TYPE 
      DO 2 J=9,NIN
    2 KIN[J]=2
#
#  RAT IS MOMENTUM TRANSFER TO TOTAL RATIO FOR VIBRATIONS IN THE
#  RESONANCE REGION AND ALSO FOR THE VIBRATIONS V1 AND V2 .     
#  USED DIPOLE ANGULAR DISTRIBUTION FOR V3 AND V4 NEAR THRESHOLD.
      RAT=1.0  
#                                                         
      NDATA=153 
      NVIBV4=26
      NVIBV2=29
      NVIBV1=30
      NVIBV3=25
      NVIBH1=14
      NVIBH2=14                                                        
      NIOND=70
      NIONF=70
      NIONF1=68
      NIONF2=66
      NIONF3=53
      NIONF4=51
      NIONF5=50
      NION'%.4f' %8
      NIONPP=49
      NKSH=83                                                        
      NATT1=6    
      NDET=9   
      NTRP1=12
      NTRP2=11
      NTRP3=11                                                    
      NCHD=32
      NCHB=35
      NHAL=34
      NHBE=34
# VIBRATIONAL DEGENERACY
      DEGV4=3.0
      DEGV2=2.0
      DEGV1=1.0
      DEGV3=3.0
#
      E[1]=0.0                                                          
      E(2)=2.0*EMASS/(16.0426*AMU)                                      
      E(3)=12.65                      
      E(4)=0.0                                      
      E(5)=0.0                                            
      E(6)=0.0 
# 
      EION[1]=12.65
      EION(2)=14.25
      EION(3)=15.2
      EION(4)=22.2
      EION(5)=23.5
      EION(6)=25.2
      EION(7)=27.0
      EION(8)=27.9
      EION(9)=285.0
# OPAL BEATY 
      SCLOBY=0.475      
      EOBY[1]=EION[1]*SCLOBY
      EOBY(2)=EION(2)*SCLOBY
      EOBY(3)=EION(3)*SCLOBY
      EOBY(4)=EION(4)*SCLOBY
      EOBY(5)=EION(5)*SCLOBY
      EOBY(6)=EION(6)*SCLOBY
      EOBY(7)=EION(7)*SCLOBY
      EOBY(8)=EION(8)*SCLOBY
      EOBY(9)=EION(9)*0.63
#
      DO 44 JK=1,8
      LEGAS(JK)=0
      ISHELL(JK)=0
      NC0(JK)=0
      EC0(JK)=0.0
      WKLM(JK)=0.0
      EFL(JK)=0.0
      NG1(JK)=0
      EG1(JK)=0.0
      NG2(JK)=0
      EG2(JK)=0.0
   44 CONTINUE
# DOUBLE CAHRGED IONS STATES (EXTRA ELECTRON)
      NC0(7)=1
      EC0(7)=6.0
# FLUORESCENCE DATA
      LEGAS(9)=1
      ISHELL(9)=1
      NC0(9)=2
      EC0(9)=253.
      WKLM(9)=0.0026
      EFL(9)=273.
      NG1(9)=1
      EG1(9)=253.
      NG2(9)=2
      EG2(9)=5.
# OFFSET ENERGY FOR IONISATION ELECTRON ANGULAR DISTRIBUTION
      DO 776 J=1,NION
      DO 777 I=1,NASIZE
      if(EG[I]:
 > EION[J]) :
       IOFFION[J]=I-1
       GO TO 776
      # endif
  777 CONTINUE
  776 CONTINUE
#
      EIN[1]=-0.1625135 
      EIN(2)=0.1625135
      EIN(3)=-0.1901087
      EIN(4)=0.1901087
      EIN(5)=0.3615974 
      EIN(6)=0.3743690
      EIN(7)=0.544
      EIN(8)=0.736
      EIN(9)=7.50  
      EIN(10)=7.80                                               
      EIN(11)=8.50                                                      
      EIN(12)=8.75
      EIN(13)=9.25
      EIN(14)=9.75
      EIN(15)=10.0
      EIN(16)=10.25
      EIN(17)=10.75
      EIN(18)=11.25
      EIN(19)=11.75
      EIN(20)=12.25
      EIN(21)=12.75
      EIN(22)=13.25
      EIN(23)=13.4 
      EIN(24)=13.7  
      EIN(25)=13.75
      EIN(26)=14.25
      EIN(27)=14.75
      EIN(28)=15.25
      EIN(29)=15.75
      EIN(30)=16.0
      EIN(31)=16.14
      EIN(32)=16.8
      EIN(33)=20.5
      EIN(34)=22.0
      EIN(35)=0.0
      EIN(36)=0.0
# OFFSET ENERGY FOR EXCITATION LEVELS ANGULAR DISTRIBUTION
      DO 3 NL=1,NIN
      DO 651 I=1,NASIZE
      if(EG[I]:
 > abs(EIN(NL))) :
       IOFFN(NL)=I-1
       GO TO 3
      # endif
  651 CONTINUE
    3 CONTINUE
#***********************************************************************
# ENTER PENNING TRANSFER FRACTION FOR EACH LEVEL 
# LEVELS ARE DISSOCIATIVE SO DO NOT  GIVE PENNING TRANSFERS
      DO 4 K=1,34
      DO 4 L=1,3
    4 PENFRA[L,K]=0.0
      if(IPEN == 0):
 GO TO 6
      DO 5 KDUM=10,14
      if(PENFRA[1,KDUM] == 0.0):
 GO TO 5
      WRITE(6,999) NAME,EIN(KDUM),PENFRA[1,KDUM],PENFRA[2,KDUM],PENFRA[3,KDUM]
  999 print(' GAS = ',A15,' ENERGY LEVEL = ','%.4f' %,' EV.',/,' PENNING PROBABILITY =','%.3f' % ,' ABS.LENGTH =',F7.2,' DECAY TIME =',F7.1,/)
    5 CONTINUE
#***********************************************************************
#
    6 SCRPT[1]='                                                  '
      SCRPT(2)=' ELASTIC   ANISOTROPIC      METHANE               '
      if(NANISO == 0):
 :
      SCRPT(2)=' ELASTIC     ISOTROPIC      METHANE               '
      # endif
      SCRPT(3)=' IONISATION   CH4 +                ELOSS= 12.65   '
      SCRPT(4)=' IONISATION   CH3 +                ELOSS= 14.25   '
      SCRPT(5)=' IONISATION   CH2 +                ELOSS= 15.2    '
      SCRPT(6)=' IONISATION   H   +                ELOSS= 22.2    '
      SCRPT(7)=' IONISATION   CH  +                ELOSS= 23.5    '
      SCRPT(8)=' IONISATION   C   +                ELOSS= 25.2    '
      SCRPT(9)=' IONISATION     2(+)               ELOSS= 27.0    '
      SCRPT(10)=' IONISATION   H2  +                ELOSS= 27.9    '
      SCRPT(11)=' IONISATION CARBON K-SHELL         ELOSS=285.0    '
      SCRPT(12)=' ATTACHMENT (CH2- ION  ONLY)                      '
      SCRPT(13)='                                                  ' 
      SCRPT(14)='                                                  ' 
      SCRPT(15)=' VIBRATION V4 SUPERELASTIC         ELOSS=-0.162513'
      SCRPT(16)=' VIBRATION V4                      ELOSS= 0.162513'
      SCRPT(17)=' VIBRATION V2 SUPERELASTIC         ELOSS=-0.190109'
      SCRPT(18)=' VIBRATION V2                      ELOSS= 0.190109'
      SCRPT(19)=' VIBRATION V1                      ELOSS= 0.361597'
      SCRPT(20)=' VIBRATION V3                      ELOSS= 0.374369'
      SCRPT(21)=' VIBRATION  HARMONICS NV1+NV3      ELOSS=  0.544  '
      SCRPT(22)=' VIBRATION  HARMONICS NV2+NV3      ELOSS=  0.736  '
      SCRPT(23)=' EXCITATION TRIPLET  DISSOCIATION  ELOSS=  7.5    '
      SCRPT(24)=' ATTACHMENT - DEATTACHMENT         ELOSS=  7.8    '
      SCRPT(25)=' EXCITATION TRIPLET  DISSOCIATION  ELOSS=  8.5    '  
      SCRPT(26)=' EXCITATION SINGLET  DISSOCIATION  ELOSS=  8.75   '
      SCRPT(27)=' EXCITATION SINGLET  DISSOCIATION  ELOSS=  9.25   '
      SCRPT(28)=' EXCITATION SINGLET  DISSOCIATION  ELOSS=  9.75   '
      SCRPT(29)=' EXCITATION TRIPLET  DISSOCIATION  ELOSS= 10.0    '
      SCRPT(30)=' EXCITATION SINGLET  DISSOCIATION  ELOSS= 10.25   '
      SCRPT(31)=' EXCITATION SINGLET  DISSOCIATION  ELOSS= 10.75   '
      SCRPT(32)=' EXCITATION SINGLET  DISSOCIATION  ELOSS= 11.25   '
      SCRPT(33)=' EXCITATION SINGLET  DISSOCIATION  ELOSS= 11.75   '
      SCRPT(34)=' EXCITATION SINGLET  DISSOCIATION  ELOSS= 12.25   '
      SCRPT(35)=' EXCITATION SINGLET  DISSOCIATION  ELOSS= 12.75   '
      SCRPT(36)=' EXCITATION SINGLET  DISSOCIATION  ELOSS= 13.25   '
      SCRPT(37)=' EXCITATION A2D TO GROUND STATE.   ELOSS= 13.4    '
      SCRPT(38)=' EXCITATION B2PI TO GROUND STATE   ELOSS= 13.7    '
      SCRPT(39)=' EXCITATION SINGLET  DISSOCIATION  ELOSS= 13.75   '
      SCRPT(40)=' EXCITATION SINGLET  DISSOCIATION  ELOSS= 14.25   '
      SCRPT(41)=' EXCITATION SINGLET  DISSOCIATION  ELOSS= 14.75   '
      SCRPT(42)=' EXCITATION SINGLET  DISSOCIATION  ELOSS= 15.25   '
      SCRPT(43)=' EXCITATION SINGLET  DISSOCIATION  ELOSS= 15.75   '
      SCRPT(44)=' EXC. OF POSITIVE ION LEVELS       ELOSS= 16.0    '
      SCRPT(45)=' EXCITATION  H(ALPHA)              ELOSS= 16.14   '
      SCRPT(46)=' EXCITATION  H(BETA)               ELOSS= 16.8    '
      SCRPT(47)=' EXCITATION SINGLET  DISSOCIATION  ELOSS= 20.25   '
      SCRPT(48)=' EXCITATION SINGLET  DISSOCIATION  ELOSS= 22.0    '
      SCRPT(49)=' BREMSSTRAHLUNG FROM CARBON ATOM                  '
      SCRPT(50)=' BREMSSTRAHLUNG FROM HYDROGEN ATOM                '
# CALC LEVEL POPULATIONS
      APOPV4=DEGV4*math.exp(EIN[1]/AKT)
      APOPV2=DEGV2*math.exp(EIN(3)/AKT)
      APOPGS=1.0
      APOPSUM=APOPGS+APOPV4+APOPV2
      APOPGS=1.0/APOPSUM
      APOPV4=APOPV4/APOPSUM
      APOPV2=APOPV2/APOPSUM
#  RENORMALISE GROUND STATE TO ALLOW FOR INCREASED EXCITATION X-SEC 
#  FROM EXCITED VIBRATIONAL STATE ( EXACT FOR TWICE GROUND STATE XSEC) 
      APOPGS=1.0
#
#     EN=-ESTEP/2.0  
      DO 1000 I=1,NSTEP 
      EN=EG[I]                                             
#     EN=EN+ESTEP   
      GAMMA1=(EMASS2+2.00*EN)/EMASS2
      GAMMA2=GAMMA1*GAMMA1
      BETA=math.sqrt(1.00-1.00/GAMMA2)
      BETA2=BETA*BETA
# USE LOG INTERPOLATION FOR ELASTIC      
      if(EN <= XEN(2):
) : 
       QELA=26.7D-16
       QMOM=26.7D-16
       PQ2=0.0
       GO TO 30 
      # endif                                                    
      DO 10 J=2,NDATA 
      if(EN <= XEN[J]:
) GO TO 11                                        
   10 CONTINUE                                                          
      J=NDATA                                                           
   11 YXJ=math.log(YELT[J])
      YXJ1=math.log(YELT(J-1))
      XNJ=math.log(XEN[J])
      XNJ1=math.log(XEN(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QELA=math.exp(A*math.log(EN)+B)*1.D-16
      YXJ=math.log(YELM[J])
      YXJ1=math.log(YELM(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QMOM=math.exp(A*math.log(EN)+B)*1.D-16
# 
      YXJ=math.log(YEPS[J])
      YXJ1=math.log(YEPS(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      PQ2=math.exp(A*math.log(EN)+B)
#  EPSILON =1-YEPS
      PQ2=1.00-PQ2
   30 CONTINUE
      PQ1=0.5+(QELA-QMOM)/QELA
      if(NANISO == 0):
 PEQEL(2,I)=0.5
      if(NANISO == 1):
 PEQEL(2,I)=PQ1
      if(NANISO == 2):
 PEQEL(2,I)=PQ2
      Q(2,I)=QELA 
      if(NANISO == 0):
 Q(2,I)=QMOM
# IONISATION TO CH4 +                                                     
      QION(1,I)=0.0             
      PEQION(1,I)=0.5   
      if(NANISO == 2):
 PEQION(1,I)=0.0                                   
      if(EN < EION[1]:
) GO TO 110   
      if(EN > XINF(NIONF):
) GO TO 103                                   
      DO 101 J=2,NIONF                                                  
      if(EN <= XINF[J]:
) GO TO 102                                       
  101 CONTINUE                                                          
      J=NIONF                                                  
  102 A=(YINF[J]-YINF(J-1))/(XINF[J]-XINF(J-1))                         
      B=(XINF(J-1)*YINF[J]-XINF[J]*YINF(J-1))/(XINF(J-1)-XINF[J])       
      QION(1,I)=(A*EN+B)*1.D-16
      GO TO 104
# USE BORN BETHE X-SECTION ABOVE XINF(NIONF) EV
  103 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(1,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.4594
  104 CONTINUE        
      if(EN <= (2.0*EION[1]:
)) GO TO 110
      PEQION(1,I)=PEQEL(2,(I-IOFFION[1]))
# IONISATION TO CH3 +                                                     
  110 QION(2,I)=0.0             
      PEQION(2,I)=0.5   
      if(NANISO == 2):
 PEQION(2,I)=0.0                                   
      if(EN < EION(2):
) GO TO 120   
      if(EN > XINF1(NIONF1):
) GO TO 113                               
      DO 111 J=2,NIONF1                                                 
      if(EN <= XINF1[J]:
) GO TO 112                                     
  111 CONTINUE                                                          
      J=NIONF1                                                  
  112 A=(YINF1[J]-YINF1(J-1))/(XINF1[J]-XINF1(J-1))                    
      B=(XINF1(J-1)*YINF1[J]-XINF1[J]*YINF1(J-1))/(XINF1(J-1)-XINF1[J])
      QION(2,I)=(A*EN+B)*1.D-16
      GO TO 114
# USE BORN BETHE X-SECTION ABOVE XINF1(NIONF1) EV
  113 QION(2,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.3716
  114 CONTINUE        
      if(EN <= (2.0*EION(2):
)) GO TO 120
      PEQION(2,I)=PEQEL(2,(I-IOFFION(2)))
# IONISATION TO CH2 +                                                     
  120 QION(3,I)=0.0             
      PEQION(3,I)=0.5   
      if(NANISO == 2):
 PEQION(3,I)=0.0                                   
      if(EN < EION(3):
) GO TO 130   
      if(EN > XINF2(NIONF2):
) GO TO 123                               
      DO 121 J=2,NIONF2                                                 
      if(EN <= XINF2[J]:
) GO TO 122                                     
  121 CONTINUE                                                          
      J=NIONF2                                                  
  122 A=(YINF2[J]-YINF2(J-1))/(XINF2[J]-XINF2(J-1))                    
      B=(XINF2(J-1)*YINF2[J]-XINF2[J]*YINF2(J-1))/(XINF2(J-1)-XINF2[J])
      QION(3,I)=(A*EN+B)*1.D-16
      GO TO 124
# USE BORN BETHE X-SECTION ABOVE XINF2(NIONF2) EV
  123 QION(3,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.06312
  124 CONTINUE        
      if(EN <= (2.0*EION(3):
)) GO TO 130
      PEQION(3,I)=PEQEL(2,(I-IOFFION(3)))
# IONISATION TO H +                                                         
  130 QION(4,I)=0.0             
      PEQION(4,I)=0.5   
      if(NANISO == 2):
 PEQION(4,I)=0.0                                   
      if(EN < EION(4):
) GO TO 140   
      if(EN > XINF3(NIONF3):
) GO TO 133                               
      DO 131 J=2,NIONF3                                                
      if(EN <= XINF3[J]:
) GO TO 132                                     
  131 CONTINUE                                                          
      J=NIONF3                                                  
  132 A=(YINF3[J]-YINF3(J-1))/(XINF3[J]-XINF3(J-1))                    
      B=(XINF3(J-1)*YINF3[J]-XINF3[J]*YINF3(J-1))/(XINF3(J-1)-XINF3[J])
      QION(4,I)=(A*EN+B)*1.D-16
      GO TO 134
# USE BORN BETHE X-SECTION ABOVE XINF3(NIONF3) EV
  133 QION(4,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.0664
  134 CONTINUE        
      if(EN <= (2.0*EION(4):
)) GO TO 140
      PEQION(4,I)=PEQEL(2,(I-IOFFION(4)))
# IONISATION TO CH +                                                         
  140 QION(5,I)=0.0             
      PEQION(5,I)=0.5   
      if(NANISO == 2):
 PEQION(5,I)=0.0                                   
      if(EN < EION(5):
) GO TO 150   
      if(EN > XINF4(NIONF4):
) GO TO 143                               
      DO 141 J=2,NIONF4                                                
      if(EN <= XINF4[J]:
) GO TO 142                                     
  141 CONTINUE                                                          
      J=NIONF4                                                 
  142 A=(YINF4[J]-YINF4(J-1))/(XINF4[J]-XINF4(J-1))                    
      B=(XINF4(J-1)*YINF4[J]-XINF4[J]*YINF4(J-1))/(XINF4(J-1)-XINF4[J])
      QION(5,I)=(A*EN+B)*1.D-16
      GO TO 144
# USE BORN BETHE X-SECTION ABOVE XINF4(NIONF4) EV
  143 QION(5,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.02625
  144 CONTINUE        
      if(EN <= (2.0*EION(5):
)) GO TO 150
      PEQION(5,I)=PEQEL(2,(I-IOFFION(5)))
# IONISATION TO C +                                                         
  150 QION(6,I)=0.0             
      PEQION(6,I)=0.5   
      if(NANISO == 2):
 PEQION(6,I)=0.0                                   
      if(EN < EION(6):
) GO TO 160   
      if(EN > XINF5(NIONF5):
) GO TO 153                               
      DO 151 J=2,NIONF5                                                
      if(EN <= XINF5[J]:
) GO TO 152                                     
  151 CONTINUE                                                          
      J=NIONF5                                                 
  152 A=(YINF5[J]-YINF5(J-1))/(XINF5[J]-XINF5(J-1))                    
      B=(XINF5(J-1)*YINF5[J]-XINF5[J]*YINF5(J-1))/(XINF5(J-1)-XINF5[J])
      QION(6,I)=(A*EN+B)*1.D-16
      GO TO 154
# USE BORN BETHE X-SECTION ABOVE XINF5(NIONF5) EV
  153 QION(6,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.00798
  154 CONTINUE        
      if(EN <= (2.0*EION(6):
)) GO TO 160
      PEQION(6,I)=PEQEL(2,(I-IOFFION(6)))
# IONISATION TO DOUBLY POSITIVE CHARGED FINAL STATES             
  160 QION(7,I)=0.0             
      PEQION(7,I)=0.5   
      if(NANISO == 2):
 PEQION(7,I)=0.0                                   
      if(EN < EION(7):
) GO TO 170   
      if(EN > XINPP(NIONPP):
) GO TO 163                               
      DO 161 J=2,NIONPP                                                
      if(EN <= XINPP[J]:
) GO TO 162                                     
  161 CONTINUE                                                          
      J=NIONPP                                                 
  162 A=(YINPP[J]-YINPP(J-1))/(XINPP[J]-XINPP(J-1))                    
      B=(XINPP(J-1)*YINPP[J]-XINPP[J]*YINPP(J-1))/(XINPP(J-1)-XINPP[J])
      QION(7,I)=(A*EN+B)*1.D-16
      GO TO 164
# USE BORN BETHE X-SECTION ABOVE XINPP(NIONPP) EV
  163 QION(7,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.0095969
  164 CONTINUE        
      if(EN <= (2.0*EION(7):
)) GO TO 170
      PEQION(7,I)=PEQEL(2,(I-IOFFION(7)))
# IONISATION TO H2 +          
  170 QION(8,I)=0.0             
      PEQION(8,I)=0.5   
      if(NANISO == 2):
 PEQION(8,I)=0.0                                   
      if(EN < EION(8):
) GO TO 180   
      if(EN > XINF6(NIONF6):
) GO TO 173                               
      DO 171 J=2,NIONF6                                                
      if(EN <= XINF6[J]:
) GO TO 172                                     
  171 CONTINUE                                                          
      J=NIONF6                                                 
  172 A=(YINF6[J]-YINF6(J-1))/(XINF6[J]-XINF6(J-1))                    
      B=(XINF6(J-1)*YINF6[J]-XINF6[J]*YINF6(J-1))/(XINF6(J-1)-XINF6[J])
      QION(8,I)=(A*EN+B)*1.D-16
      GO TO 174
# USE BORN BETHE X-SECTION ABOVE XINF6(NIONF6) EV
  173 QION(8,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.00523
  174 CONTINUE        
      if(EN <= (2.0*EION(8):
)) GO TO 180
      PEQION(8,I)=PEQEL(2,(I-IOFFION(8)))
# CALCULATE K-SHELL IONISATION
  180 QION(9,I)=0.00
      PEQION(9,I)=0.5   
      if(NANISO == 2):
 PEQION(9,I)=0.0                                   
      if(EN <= EION(9):
) GO TO 200     
      DO 192 J=2,NKSH                                                   
      if(EN <= XKSH[J]:
) GO TO 193                                       
  192 CONTINUE                                                          
      J=NKSH                                                   
  193 A=(YKSH[J]-YKSH(J-1))/(XKSH[J]-XKSH(J-1))                         
      B=(XKSH(J-1)*YKSH[J]-XKSH[J]*YKSH(J-1))/(XKSH(J-1)-XKSH[J])       
      QION(9,I)=(A*EN+B)*1.D-16     
      if(EN <= (2.0*EION(9):
)) GO TO 194
      PEQION(9,I)=PEQEL(2,(I-IOFFION(9)))
# COORECT IONISATION FOR SPLIT INTO K-SHELL
  194 QSUM=0.0
      DO 195 L=1,8
  195 QSUM=QSUM+QION(L,I)
      if(QSUM == 0.0):
 GO TO 200
      FAC=(QSUM-QION(9,I))/QSUM
      DO 196 L=1,8
  196 QION(L,I)=QION(L,I)*FAC
#                                      
# ATTACHMENT                                               
  200 Q(4,I)=0.0                                                        
      if(EN < XATT[1]:
) GO TO 250                                       
      if(EN > XATT(NATT1):
) GO TO 250                                   
      DO 210 J=2,NATT1                                                  
      if(EN <= XATT[J]:
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NATT1                                                          
  220 A=(YATT[J]-YATT(J-1))/(XATT[J]-XATT(J-1))                         
      B=(XATT(J-1)*YATT[J]-XATT[J]*YATT(J-1))/(XATT(J-1)-XATT[J])       
      Q(4,I)=(A*EN+B)*1.D-16 
# COUNTING IONISATION                                           
  250 Q(5,I)=0.0     
#     PEQEL(5,I)=0.5
#     IF(NANISO == 2) PEQEL(5,I)=0.0                              
#     IF(EN <= E(3)) GO TO 300
#     IF(EN > XION(NIOND)) GO TO 280 
#     DO 260 J=2,NIOND
#     IF(EN <= XION[J]) GO TO 270
# 260 CONTINUE
#     J=NIOND
# 270 A=(YINC[J]-YINC(J-1))/(XION[J]-XION(J-1))
#     B=(XION(J-1)*YINC[J]-XION[J]*YINC(J-1))/(XION(J-1)-XION[J])
#     Q(5,I)=(A*EN+B)*1.D-16
#     GO TO 290
# USE BORN-BETHE X-SECTION ABOVE XION(NIOND) EV
# 280 Q(5,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)
# 290 CONTINUE
#     IF(EN <= (2.0*E(3))) GO TO 295
#     PEQEL(5,I)=PEQEL(2,(I-IOFFION[1]))
# 295 CONTINUE      
# 
  300 Q(6,I)=0.0                                                        
# V4  SUPERELASTIC ISOTROPIC
      QIN(1,I)=0.0
      PEQIN(1,I)=0.50
      if(EN <= 0.0):
 GO TO 350    
      if((EN+EIN(2):
) > XVBV4(NVIBV4)) GO TO 325                        
      DO 310 J=2,NVIBV4                                                 
      if((EN+EIN(2):
) <= XVBV4[J]) GO TO 320                             
  310 CONTINUE                                                          
      J=NVIBV4                                                          
  320 A=(YVBV4[J]-YVBV4(J-1))/(XVBV4[J]-XVBV4(J-1))                     
      B=(XVBV4(J-1)*YVBV4[J]-XVBV4[J]*YVBV4(J-1))/(XVBV4(J-1)-XVBV4[J])
      QIN(1,I)=(EN+EIN(2))*(A*(EN+EIN(2))+B)/EN
      GO TO 326
  325 QIN(1,I)=YVBV4(NVIBV4)*(XVBV4(NVIBV4)/(EN+EIN(2)))**2
  326 EFAC=math.sqrt(1.0-(EIN[1]/EN))
      QIN(1,I)=QIN(1,I)+0.076*math.log((EFAC+1.0)/(EFAC-1.0))/EN  
      QIN(1,I)=QIN(1,I)*APOPV4*1.D-16 
      QIN(1,I)=QIN(1,I)/DEGV4         
  350 CONTINUE                                                          
# V4   ANISOTROPIC                                                    
      QIN(2,I)=0.0   
       PEQIN(2,I)=0.50                                              
      if(EN <= EIN(2):
) GO TO 400 
      if(EN > XVBV4(NVIBV4):
) GO TO 375                         
      DO 360 J=2,NVIBV4                                                
      if(EN <= XVBV4[J]:
) GO TO 370                                      
  360 CONTINUE                                                          
      J=NVIBV4                                                         
  370 A=(YVBV4[J]-YVBV4(J-1))/(XVBV4[J]-XVBV4(J-1))                     
      B=(XVBV4(J-1)*YVBV4[J]-XVBV4[J]*YVBV4(J-1))/(XVBV4(J-1)-XVBV4[J])
      QIN(2,I)=A*EN+B
      GO TO 376
  375 QIN(2,I)=YVBV4(NVIBV4)*(XVBV4(NVIBV4)/EN)**2 
  376 EFAC=math.sqrt(1.0-(EIN(2)/EN))
      ADIP=0.076*math.log((1.0+EFAC)/(1.0-EFAC))/EN     
      ELF=EN-EIN(2)
      FWD=math.log((EN+ELF)/(EN+ELF-2.0*math.sqrt(EN*ELF)))
      BCK=math.log((EN+ELF+2.0*math.sqrt(EN*ELF))/(EN+ELF))
# RATIO OF MT TO TOTAL X-SECT FOR RESONANCE PART =RAT
      XMT=((1.5-FWD/(FWD+BCK))*ADIP+RAT*QIN(2,I))*APOPGS*1.D-16
      QIN(2,I)=(QIN(2,I)+ADIP)*APOPGS*1.D-16      
       PEQIN(2,I)=0.5+(QIN(2,I)-XMT)/QIN(2,I)
# V2 SUPERELASTIC ISOTROPIC
  400 QIN(3,I)=0.0
      PEQIN(3,I)=0.50
      if(EN <= 0.0):
 GO TO 450
      if((EN+EIN(4):
) > XVBV2(NVIBV2)) GO TO 421
      DO 410 J=2,NVIBV2
      if((EN+EIN(4):
) <= XVBV2[J]) GO TO 420
  410 CONTINUE
      J=NVIBV2
  420 A=(YVBV2[J]-YVBV2(J-1))/(XVBV2[J]-XVBV2(J-1))                     
      B=(XVBV2(J-1)*YVBV2[J]-XVBV2[J]*YVBV2(J-1))/(XVBV2(J-1)-XVBV2[J])
      QIN(3,I)=(EN+EIN(4))*(A*(EN+EIN(4))+B)/EN
      QIN(3,I)=QIN(3,I)*APOPV2*1.D-16
      QIN(3,I)=QIN(3,I)/DEGV2
      GO TO 450
# SCALE BY 1/E**2 ABOVE XVBV2(NVIBV2) EV
  421 QIN(3,I)=YVBV2(NVIBV2)*(XVBV2(NVIBV2)/(EN+EIN(4)))**2*APOPV2*1.D-16/DEGV2
# V2 ISOTROPIC
  450 QIN(4,I)=0.0
      PEQIN(4,I)=0.50
      if(EN <= EIN(4):
) GO TO 500
      if(EN > XVBV2(NVIBV2):
) GO TO 471
      DO 460 J=2,NVIBV2
      if(EN <= XVBV2[J]:
) GO TO 470
  460 CONTINUE
      J=NVIBV2
  470 A=(YVBV2[J]-YVBV2(J-1))/(XVBV2[J]-XVBV2(J-1))                     
      B=(XVBV2(J-1)*YVBV2[J]-XVBV2[J]*YVBV2(J-1))/(XVBV2(J-1)-XVBV2[J]) 
      QIN(4,I)=(A*EN+B)*APOPGS*1.D-16
      GO TO 500
# SCALE BY 1/E**2 ABOVE XVBV2(NVIBV2) EV
  471 QIN(4,I)=YVBV2(NVIBV2)*(XVBV2(NVIBV2)/EN)**2*APOPGS*1.D-16
# V1  ISOTROPIC                                                        
  500 QIN(5,I)=0.0
      PEQIN(5,I)=0.50                                                 
      if(EN <= EIN(5):
) GO TO 550
      if(EN > XVBV1(NVIBV1):
) GO TO 521                               
      DO 510 J=2,NVIBV1                                                 
      if(EN <= XVBV1[J]:
) GO TO 520                                      
  510 CONTINUE                                                          
      J=NVIBV1                                                          
  520 A=(YVBV1[J]-YVBV1(J-1))/(XVBV1[J]-XVBV1(J-1))                     
      B=(XVBV1(J-1)*YVBV1[J]-XVBV1[J]*YVBV1(J-1))/(XVBV1(J-1)-XVBV1[J])
      QIN(5,I)=(A*EN+B)*1.D-16
      GO TO 550 
# SCALE BY 1/E**2 ABOVE XVBV1(NVIBV1) EV
  521 QIN(5,I)=YVBV1(NVIBV1)*(XVBV1(NVIBV1)/EN)**2*1.D-16 
# V3  ANISOTROPIC                                                       
  550 QIN(6,I)=0.0    
      PEQIN(6,I)=0.50                
#     PEQIN(6,I)=0.00                                  
      if(EN <= EIN(6):
) GO TO 600     
      if(EN > XVBV3(NVIBV3):
) GO TO 575                               
      DO 560 J=2,NVIBV3                                                 
      if(EN <= XVBV3[J]:
) GO TO 570                                      
  560 CONTINUE                                                          
      J=NVIBV3                                                          
  570 A=(YVBV3[J]-YVBV3(J-1))/(XVBV3[J]-XVBV3(J-1))                     
      B=(XVBV3(J-1)*YVBV3[J]-XVBV3[J]*YVBV3(J-1))/(XVBV3(J-1)-XVBV3[J])
      QIN(6,I)=A*EN+B
      GO TO 576
  575 QIN(6,I)=YVBV3(NVIBV3)*(XVBV3(NVIBV3)/EN)**2
  576 EFAC=math.sqrt(1.0-(EIN(6)/EN))
      ADIP=0.076*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      ELF=EN-EIN(6)
      FWD=math.log((EN+ELF)/(EN+ELF-2.0*math.sqrt(EN*ELF)))
      BCK=math.log((EN+ELF+2.0*math.sqrt(EN*ELF))/(EN+ELF))
# RATIO OF MT TO TOTAL X-SECT FOR RESONANCE PART =RAT
      XMT=((1.5-FWD/(FWD+BCK))*ADIP+RAT*QIN(6,I))*1.D-16
      QIN(6,I)=(ADIP+QIN(6,I))*1.D-16      
      PEQIN(6,I)=0.5+(QIN(6,I)-XMT)/QIN(6,I)
#  VIBRATION HARMONICS 1 ISOTROPIC                                    
  600 QIN(7,I)=0.0
      PEQIN(7,I)=0.50               
      if(EN <= EIN(7):
) GO TO 650    
      if(EN > XVBH1(NVIBH1):
) GO TO 621
      DO 610 J=2,NVIBH1                                                 
      if(EN <= XVBH1[J]:
) GO TO 620                                      
  610 CONTINUE                                                          
      J=NVIBH1                                                          
  620 A=(YVBH1[J]-YVBH1(J-1))/(XVBH1[J]-XVBH1(J-1))                     
      B=(XVBH1(J-1)*YVBH1[J]-XVBH1[J]*YVBH1(J-1))/(XVBH1(J-1)-XVBH1[J]) 
      QIN(7,I)=(A*EN+B)*1.D-16   
      GO TO 650
# SCALE BY 1/E**2 ABOVE XVBH1(NVBH1) EV
  621 QIN(7,I)=YVBH1(NVIBH1)*(XVBH1(NVIBH1)/EN)**2*1.D-16
#  VIBRATION HARMONICS 2  ISOTROPIC                                     
  650 QIN(8,I)=0.0                   
      PEQIN(8,I)=0.50                                  
      if(EN <= EIN(8):
) GO TO 700    
      if(EN > XVBH2(NVIBH2):
) GO TO 671                                
      DO 660 J=2,NVIBH2                                                 
      if(EN <= XVBH2[J]:
) GO TO 670                                      
  660 CONTINUE                                                          
      J=NVIBH2                                                          
  670 A=(YVBH2[J]-YVBH2(J-1))/(XVBH2[J]-XVBH2(J-1))                     
      B=(XVBH2(J-1)*YVBH2[J]-XVBH2[J]*YVBH2(J-1))/(XVBH2(J-1)-XVBH2[J]) 
      QIN(8,I)=(A*EN+B)*1.D-16 
      GO TO 700
# SCALE BY 1/E**2 ABOVE XVBH2(NVIBH2) EV
  671 QIN(8,I)=YVBH2(NVIBH2)*(XVBH2(NVIBH2)/EN)**2*1.D-16
# TRIPLET DISSOCIATION 7.5EV
  700 QIN(9,I)=0.0
      PEQIN(9,I)=0.0
      if(EN <= EIN(9):
) GO TO 705
      if(EN > XTR1(NTRP1):
) GO TO 703
      DO 701 J=2,NTRP1
      if(EN <= XTR1[J]:
) GO TO 702
  701 CONTINUE
      J=NTRP1
  702 A=(YTR1[J]-YTR1(J-1))/(XTR1[J]-XTR1(J-1))
      B=(XTR1(J-1)*YTR1[J]-XTR1[J]*YTR1(J-1))/(XTR1(J-1)-XTR1[J])
      QIN(9,I)=(A*EN+B)*1.D-16
      GO TO 704
# SCALE BY 1/E**2 ABOVE XTR1(NTRP1) EV
  703 QIN(9,I)=YTR1(NTRP1)*(XTR1(NTRP1)/EN)**2*1.D-16
  704 if(EN <= (3.0*EIN(9))) GO TO 705
      PEQIN(9,I)=PEQEL(2,(I-IOFFN(9)))                                 
# ATTACHMENT - DEATTACHMENT RESONANCE VIA H- AT 9.8EV RESONANCE
  705 QIN(10,I)=0.0
      PEQIN(10,I)=0.0
      if(EN <= EIN(10):
) GO TO 708
      if(EN > XDET(NDET):
) GO TO 708
      DO 706 J=2,NDET
      if(EN <= XDET[J]:
) GO TO 707
  706 CONTINUE
      J=NDET
  707 A=(YDET[J]-YDET(J-1))/(XDET[J]-XDET(J-1))
      B=(XDET(J-1)*YDET[J]-XDET[J]*YDET(J-1))/(XDET(J-1)-XDET[J])
      QIN(10,I)=(A*EN+B)*1.D-16
      if(EN <= (3.0*EIN(10):
)) GO TO 708
      PEQIN(10,I)=PEQEL(2,(I-IOFFN(10)))
# TRIPLET DISSOCIATION  AT 8.5 EV
  708 QIN(11,I)=0.0
      PEQIN(11,I)=0.0
      if(EN <= EIN(11):
) GO TO 713
      if(EN > XTR2(NTRP2):
) GO TO 711
      DO 709 J=2,NTRP2
      if(EN <= XTR2[J]:
) GO TO 710
  709 CONTINUE
      J=NTRP2
  710 A=(YTR2[J]-YTR2(J-1))/(XTR2[J]-XTR2(J-1))
      B=(XTR2(J-1)*YTR2[J]-XTR2[J]*YTR2(J-1))/(XTR2(J-1)-XTR2[J])
      QIN(11,I)=(A*EN+B)*1.D-16
      GO TO 712
# SCALE BY 1/E**2 ABOVE XTR2(NTRP2) EV
  711 QIN(11,I)=YTR2(NTRP2)*(XTR2(NTRP2)/EN)**2*1.D-16
  712 if(EN <= (3.0*EIN(11))) GO TO 713
      PEQIN(11,I)=PEQEL(2,(I-IOFFN(11)))                               
# SINGLET DISSOCIATION AT 8.75 EV USE BEF SCALING WITH F=0.0271
  713 QIN(12,I)=0.0
      PEQIN(12,I)=0.0
      if(EN <= EIN(12):
) GO TO 714
      QIN(12,I)=0.0271/(EIN(12)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(12)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(12)+E(3))*1.029
      if(QIN(12,I):
 < 0.0) QIN(12,I)=0.0       
      if(EN <= (3.0*EIN(12):
)) GO TO 714
      PEQIN(12,I)=PEQEL(2,(I-IOFFN(12)))
# SINGLET DISSOCIATION AT 9.25 EV USE BEF SCALING WITH F=0.0442
  714 QIN(13,I)=0.0
      PEQIN(13,I)=0.0
      if(EN <= EIN(13):
) GO TO 715
      QIN(13,I)=0.0442/(EIN(13)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(13)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(13)+E(3))*1.027
      if(QIN(13,I):
 < 0.0) QIN(13,I)=0.0       
      if(EN <= (3.0*EIN(13):
)) GO TO 715
      PEQIN(13,I)=PEQEL(2,(I-IOFFN(13)))
# SINGLET DISSOCIATION AT 9.75 EV USE BEF SCALING WITH F=0.0859
  715 QIN(14,I)=0.0
      PEQIN(14,I)=0.0
      if(EN <= EIN(14):
) GO TO 716
      QIN(14,I)=0.0859/(EIN(14)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(14)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(14)+E(3))*1.026
      if(QIN(14,I):
 < 0.0) QIN(14,I)=0.0       
      if(EN <= (3.0*EIN(14):
)) GO TO 716
      PEQIN(14,I)=PEQEL(2,(I-IOFFN(14)))
# TRIPLET DISSOCIATION  AT 10.0EV
  716 QIN(15,I)=0.0
      PEQIN(15,I)=0.0
      if(EN <= EIN(15):
) GO TO 721
      if(EN > XTR3(NTRP3):
) GO TO 719
      DO 717 J=2,NTRP3
      if(EN <= XTR3[J]:
) GO TO 718
  717 CONTINUE
      J=NTRP3
  718 A=(YTR3[J]-YTR3(J-1))/(XTR3[J]-XTR3(J-1))
      B=(XTR3(J-1)*YTR3[J]-XTR3[J]*YTR3(J-1))/(XTR3(J-1)-XTR3[J])
      QIN(15,I)=(A*EN+B)*1.D-16
      GO TO 720
# SCALE BY 1/E**2 ABOVE XTR3(NTRP3) EV
  719 QIN(15,I)=YTR3(NTRP3)*(XTR3(NTRP3)/EN)**2*1.D-16
  720 if(EN <= (3.0*EIN(15))) GO TO 721
      PEQIN(15,I)=PEQEL(2,(I-IOFFN(15)))                               
# SINGLET DISSOCIATION AT 10.25 EV USE BEF SCALING WITH F=0.0906
  721 QIN(16,I)=0.00
      PEQIN(16,I)=0.0
      if(EN <= EIN(16):
) GO TO 722
      QIN(16,I)=0.0906/(EIN(16)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(16)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(16)+E(3))*1.024
      if(QIN(16,I):
 < 0.0) QIN(16,I)=0.0       
      if(EN <= (3.0*EIN(16):
)) GO TO 722
      PEQIN(16,I)=PEQEL(2,(I-IOFFN(16)))
# SINGLET DISSOCIATION AT 10.75 EV USE BEF SCALING WITH F=0.0841
  722 QIN(17,I)=0.0
      PEQIN(17,I)=0.0
      if(EN <= EIN(17):
) GO TO 723
      QIN(17,I)=0.0841/(EIN(17)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(17)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(17)+E(3))*1.023
      if(QIN(17,I):
 < 0.0) QIN(17,I)=0.0       
      if(EN <= (3.0*EIN(17):
)) GO TO 723
      PEQIN(17,I)=PEQEL(2,(I-IOFFN(17)))
# SINGLET DISSOCIATION AT 11.25 EV USE BEF SCALING WITH F=0.1036
  723 QIN(18,I)=0.0
      PEQIN(18,I)=0.0
      if(EN <= EIN(18):
) GO TO 724
      QIN(18,I)=0.1036/(EIN(18)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(18)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(18)+E(3))*1.022
      if(QIN(18,I):
 < 0.0) QIN(18,I)=0.0       
      if(EN <= (3.0*EIN(18):
)) GO TO 724
      PEQIN(18,I)=PEQEL(2,(I-IOFFN(18)))
# SINGLET DISSOCIATION AT 11.75 EV USE BEF SCALING WITH F=0.1460
  724 QIN(19,I)=0.0
      PEQIN(19,I)=0.0
      if(EN <= EIN(19):
) GO TO 725
      QIN(19,I)=0.1460/(EIN(19)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(19)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(19)+E(3))*1.021
      if(QIN(19,I):
 < 0.0) QIN(19,I)=0.0       
      if(EN <= (3.0*EIN(19):
)) GO TO 725
      PEQIN(19,I)=PEQEL(2,(I-IOFFN(19)))
# SINGLET DISSOCIATION AT 12.25 EV USE BEF SCALING WITH F=0.1548
  725 QIN(20,I)=0.0
      PEQIN(20,I)=0.0
      if(EN <= EIN(20):
) GO TO 726
      QIN(20,I)=0.1548/(EIN(20)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(20)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(20)+E(3))*1.020
      if(QIN(20,I):
 < 0.0) QIN(20,I)=0.0       
      if(EN <= (3.0*EIN(20):
)) GO TO 726
      PEQIN(20,I)=PEQEL(2,(I-IOFFN(20)))
# SINGLET DISSOCIATION AT 12.75 EV USE BEF SCALING WITH F=0.1927
  726 QIN(21,I)=0.0
      PEQIN(21,I)=0.0
      if(EN <= EIN(21):
) GO TO 727
      QIN(21,I)=0.1927/(EIN(21)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(21)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(21)+E(3))*1.020
      if(QIN(21,I):
 < 0.0) QIN(21,I)=0.0       
      if(EN <= (3.0*EIN(21):
)) GO TO 727
      PEQIN(21,I)=PEQEL(2,(I-IOFFN(21)))
# SINGLET DISSOCIATION AT 13.25 EV USE BEF SCALING WITH F=0.1981
  727 QIN(22,I)=0.0
      PEQIN(22,I)=0.0
      if(EN <= EIN(22):
) GO TO 728
      QIN(22,I)=0.1981/(EIN(22)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(22)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(22)+E(3))*1.019
      if(QIN(22,I):
 < 0.0) QIN(22,I)=0.0       
      if(EN <= (3.0*EIN(22):
)) GO TO 728
      PEQIN(22,I)=PEQEL(2,(I-IOFFN(22)))
#  DISSOCIATIVE EXC TO STATES DECAYING VIA CH(A2DELTA TO G.S.)           
  728 QIN(23,I)=0.0
      PEQIN(23,I)=0.0                             
      if(EN <= EIN(23):
) GO TO 731 
      if(EN > XCHD[NCHD]):
 GO TO 7311                                   
      DO 729 J=2,NCHD                                                  
      if(EN <= XCHD[J]):
 GO TO 730                                      
  729 CONTINUE                                                          
      J=NCHD                                                            
  730 A=(YCHD[J]-YCHD[J-1])/(XCHD[J]-XCHD[J-1])                     
      B=(XCHD[J-1]*YCHD[J]-XCHD[J]*YCHD[J-1])/(XCHD[J-1]-XCHD[J]) 
      QIN(23,I)=(A*EN+B)*1.D-16 
      GO TO 7312
# ABOVE XCHD[NCHD] EV SCALE BY 1/E
 7311 QIN(23,I)=YCHD[NCHD]*(XCHD[NCHD]/EN)*1.D-16
 7312 if(EN <= (3.0*EIN(23))) GO TO 731
      PEQIN(23,I)=PEQEL(2,(I-IOFFN(23)))                               
#  DISSOCIATIVE EXC TO STATES DECAYING VIA CH(B2SIGMA- TO G.S.)          
  731 QIN(24,I)=0.0
      PEQIN(24,I)=0.0                               
      if(EN <= EIN(24):
) GO TO 734  
      if(EN > XCHB[NCHB]):
 GO TO 7341                                   
      DO 732  J=2,NCHB                                                  
      if(EN <= XCHB[J]):
 GO TO 733                                      
  732 CONTINUE                                                          
      J=NCHB                                                            
  733 A=(YCHB[J]-YCHB[J-1])/(XCHB[J]-XCHB[J-1])                     
      B=(XCHB[J-1]*YCHB[J]-XCHB[J]*YCHB[J-1])/(XCHB[J-1]-XCHB[J]) 
      QIN(24,I)=(A*EN+B)*1.D-16
      GO TO 7342
# ABOVE XCHB[NCHB] EV SCALE BY 1/E
 7341 QIN(24,I)=YCHB[NCHB]*(XCHB[NCHB]/EN)*1.0D-16
 7342 if(EN <= (3.0*EIN(24))) GO TO 734 
      PEQIN(24,I)=PEQEL(2,(I-IOFFN(24)))                                
# SINGLET DISSOCIATION AT 13.75 EV USE BEF SCALING WITH F=0.1628
  734 QIN(25,I)=0.0
       PEQIN(25,I)=0.0
      if(EN <= EIN(25):
) GO TO 735
      QIN(25,I)=0.1628/(EIN(25)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(25)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(25)+E(3))*1.018
      if(QIN(25,I):
 < 0.0) QIN(25,I)=0.0       
      if(EN <= (3.0*EIN(25):
)) GO TO 735
      PEQIN(25,I)=PEQEL(2,(I-IOFFN(25)))
# SINGLET DISSOCIATION AT 14.25 EV USE BEF SCALING WITH F=0.1093
  735 QIN(26,I)=0.0
      PEQIN(26,I)=0.0
      if(EN <= EIN(26):
) GO TO 736
      QIN(26,I)=0.1093/(EIN(26)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(26)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(26)+E(3))*1.018
      if(QIN(26,I):
 < 0.0) QIN(26,I)=0.0       
      if(EN <= (3.0*EIN(26):
)) GO TO 736
      PEQIN(26,I)=PEQEL(2,(I-IOFFN(26)))
# SINGLET DISSOCIATION AT 14.75 EV USE BEF SCALING WITH F=0.0628
  736 QIN(27,I)=0.0
      PEQIN(27,I)=0.0
      if(EN <= EIN(27):
) GO TO 737
      QIN(27,I)=0.0628/(EIN(27)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(27)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(27)+E(3))*1.017
      if(QIN(27,I):
 < 0.0) QIN(27,I)=0.0       
      if(EN <= (3.0*EIN(27):
)) GO TO 737
      PEQIN(27,I)=PEQEL(2,(I-IOFFN(27)))
# SINGLET DISSOCIATION AT 15.25 EV USE BEF SCALING WITH F=0.0297
  737 QIN(28,I)=0.0
      PEQIN(28,I)=0.0
      if(EN <= EIN(28):
) GO TO 738
      QIN(28,I)=0.0297/(EIN(28)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(28)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(28)+E(3))*1.016
      if(QIN(28,I):
 < 0.0) QIN(28,I)=0.0       
      if(EN <= (3.0*EIN(28):
)) GO TO 738
      PEQIN(28,I)=PEQEL(2,(I-IOFFN(28)))
# SINGLET DISSOCIATION AT 15.75 EV USE BEF SCALING WITH F=0.0074
  738 QIN(29,I)=0.0
      PEQIN(29,I)=0.0
      if(EN <= EIN(29):
) GO TO 7381
      QIN(29,I)=0.0074/(EIN(29)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(29)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(29)+E(3))*1.016
      if(QIN(29,I):
 < 0.0) QIN(29,I)=0.0       
      if(EN <= (3.0*EIN(29):
)) GO TO 7381
      PEQIN(29,I)=PEQEL(2,(I-IOFFN(29)))
# ENERGY LOSS TO EXCITED POSITIVE IONS NOT ALREADY INCLUDED
 7381 QIN(30,I)=0.0
      PEQIN(30,I)=0.0
      if(EN <= EIN(30):
) GO TO 739      
      QIN(30,I)=0.5000/(EIN(30)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(30)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(30)+E(3))
      if(QIN(30,I):
 < 0.0) QIN(30,I)=0.0
      if(EN <= (3.0*EIN(30):
)) GO TO 739
      PEQIN(30,I)=PEQEL(2,(I-IOFFN(30))) 
#  DISSOCIATIVE EXC TO STATES DECAYING VIA H(ALPHA) 
  739 QIN(31,I)=0.0  
      PEQIN(31,I)=0.0                       
      if(EN <= EIN(31):
) GO TO 742    
      if(EN > XHAL(NHAL):
) GO TO 7421                                   
      DO 740  J=2,NHAL                                                  
      if(EN <= XHAL[J]:
) GO TO 741                                      
  740 CONTINUE                                                          
      J=NHAL                                                            
  741 A=(YHAL[J]-YHAL(J-1))/(XHAL[J]-XHAL(J-1))                     
      B=(XHAL(J-1)*YHAL[J]-XHAL[J]*YHAL(J-1))/(XHAL(J-1)-XHAL[J]) 
      QIN(31,I)=(A*EN+B)*1.D-16
      GO TO 7422
# ABOVE XHAL(NHAL) EV SCALE BY 1/E
 7421 QIN(31,I)=YHAL(NHAL)*(XHAL(NHAL)/EN)*1.D-16
 7422 if(EN <= (3.0*EIN(31))) GO TO 742 
      PEQIN(31,I)=PEQEL(2,(I-IOFFN(31)))                               
#  DISSOCIATIVE EXC TO STATES DECAYING VIA H(BETA)                     
  742 QIN(32,I)=0.0                               
      PEQIN(32,I)=0.0            
      if(EN <= EIN(32):
) GO TO 745  
      if(EN > XHBE(NHBE):
) GO TO 7451                                  
      DO 743  J=2,NHBE                                                  
      if(EN <= XHBE[J]:
) GO TO 744                                      
  743 CONTINUE                                                          
      J=NHBE                                                            
  744 A=(YHBE[J]-YHBE(J-1))/(XHBE[J]-XHBE(J-1))                     
      B=(XHBE(J-1)*YHBE[J]-XHBE[J]*YHBE(J-1))/(XHBE(J-1)-XHBE[J]) 
      QIN(32,I)=(A*EN+B)*1.D-16  
      GO TO 7452
# ABOVE XHBE(NHBE) EV SCALE BY 1/E
 7451 QIN(32,I)=YHBE(NHBE)*(XHBE(NHBE)/EN)*1.0D-16
 7452 if(EN <= (3.0*EIN(32))) GO TO 745  
      PEQIN(32,I)=PEQEL(2,(I-IOFFN(32)))      
# SINGLET DISSOCIATION AT 20.50 EV USE BEF SCALING WITH F=0.0045
  745 QIN(33,I)=0.0
      PEQIN(33,I)=0.0
      if(EN <= EIN(33):
) GO TO 746
      QIN(33,I)=0.0045/(EIN(33)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(33)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(33)+E(3))*1.037
      if(QIN(33,I):
 < 0.0) QIN(33,I)=0.0       
      if(EN <= (3.0*EIN(33):
)) GO TO 746
      PEQIN(33,I)=PEQEL(2,(I-IOFFN(33)))
# SINGLET DISSOCIATION AT 22.00 EV USE BEF SCALING WITH F=0.0045
  746 QIN(34,I)=0.0
      PEQIN(34,I)=0.0
      if(EN <= EIN(34):
) GO TO 747
      QIN(34,I)=0.0045/(EIN(34)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(34)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(34)+E(3))*1.034
      if(QIN(34,I):
 < 0.0) QIN(34,I)=0.0       
      if(EN <= (3.0*EIN(34):
)) GO TO 747
      PEQIN(34,I)=PEQEL(2,(I-IOFFN(34)))
  747 CONTINUE
# LOAD BREMSSTRAHLUNG X-SECTIONS
      QIN(35,I)=0.0
      QIN(36,I)=0.0
      if(EN <= 1000.):
 GO TO 800
      DO 780 J=2,NBREM
      if(EN <= EBRM[J]:
) GO TO 790
  780 CONTINUE
      J=NBREM
  790 A=(math.log(Z6T[J])-math.log(Z6T(J-1)))/(EBRM[J]-EBRM(J-1))
      B=(math.log(Z6T[J])*EBRM(J-1)-math.log(Z6T(J-1))*EBRM[J])/(EBRM(J-1)-EBRM[J])
      A1=(math.log(Z1T[J])-math.log(Z1T(J-1)))/(EBRM[J]-EBRM(J-1))
      B1=(math.log(Z1T[J])*EBRM(J-1)-math.log(Z1T(J-1))*EBRM[J])/(EBRM(J-1)-EBRM[J])
      QIN(35,I)=math.exp(A*EN+B)*1.D-24
      QIN(36,I)=math.exp(A1*EN+B1)*4.D-24
  800 CONTINUE
#     WRITE(6,881) EN
# 881 print('EN=',D14.6)
#     WRITE(6,882) QIN(1,I),QIN(2,I),QIN(3,I),QIN(4,I),QIN(5,I)
#     WRITE(6,882) QIN(6,I),QIN(7,I),QIN(8,I),QIN(9,I),QIN(10,I)
#     WRITE(6,882) QIN(11,I),QIN(12,I),QIN(13,I),QIN(14,I),QIN(15,I)
#     WRITE(6,882) QIN(16,I),QIN(17,I),QIN(18,I),QIN(19,I),QIN(20,I)
#     WRITE(6,882) QIN(21,I),QIN(22,I),QIN(23,I),QIN(24,I),QIN(25,I)
#     WRITE(6,882) QIN(26,I),QIN(27,I),QIN(28,I),QIN(29,I),QIN(30,I)
#     WRITE(6,882) QIN(31,I),QIN(32,I),QIN(33,I),QIN(34,I),QIN(35,I)
# 882 print(' QIN ',5D12.4)
#     WRITE(6,883) Q(2,I),Q(3,I),Q(4,I),Q(5,I)
# 883 print(' Q 2 3 4 5',4D12.4)
#     WRITE(6,884) QION(1,I),QION(2,I),QION(3,I)
# 884 print('QION 1 2 3 ',3D12.4)
#
      QSUP=QIN(1,I)+QIN(3,I)
      QVIB=QIN(2,I)+QIN(4,I)+QIN(5,I)+QIN(6,I)+QIN(7,I)+QIN(8,I)
      QDATT=QIN(10,I)
      QSING=QIN(12,I)+QIN(13,I)+QIN(14,I)+QIN(16,I)+QIN(17,I)+QIN(18,I)+QIN(19,I)+QIN(20,I)+QIN(21,I)+QIN(22,I)+QIN(25,I)+QIN(26,I)+QIN(27,I)+QIN(28,I)+QIN(29,I)+QIN(30,I)+QIN(33,I)+QIN(34,I)
      QTRIP=QIN(9,I)+QIN(11,I)+QIN(15,I)
      QEXC=QIN(23,I)+QIN(24,I)+QIN(31,I)+QIN(32,I) 
      QTTT=QEXC+QTRIP+QSING+QDATT  
      QWINT=QION(2,I)+QTTT
      QINEL=QSUP+QVIB+QDATT+QSING+QTRIP+QEXC+Q(5,I)+Q(4,I)      
      Q(1,I)=Q(2,I)+Q(5,I)+Q(4,I)+QTTT+QSUP+QVIB 
      QIONSUM=QION(1,I)+QION(2,I)+QION(3,I)+QION(4,I)+QION(5,I)+QION(6,I)+QION(7,I)+QION(8,I)+QION(8,I)+QION(9,I)               
#     Q(1,I)=Q(2,I)+Q(5,I)+Q(4,I)+QTTT+QSUP+QVIB+QIN(34,I)+QIN(35,I)
#     WRITE(6,767) EN,Q(1,I),QSUP,QVIB,QDATT,QSING,QTRIP,QEXC,QTTT,QINEL
#767  print(' EN=',F9.2,' QTOT=','%.3f' %,' QSUP=','%.3f' %,' QVIB=','%.3f' %,/,
#    /' QDATT=','%.3f' %,' QSING=','%.3f' %,' QTRIP=','%.3f' %,' QEXC=','%.3f' %,/,
#    /' QTTT=','%.3f' %,' QINELSUM=','%.3f' %,/)
c     WRITE(6,768) EN,QIONSUM
c 768 print(' EN=',F9.2,' QIONSUM=','%.3f' %)
# 
 1000 CONTINUE
#  SAVE COMPUTE TIME
      DO 1010 K=1,NIN
      if(EFINAL <= EIN[K]:
) :
       NIN=K-1
       GO TO 1011
      # endif
 1010 CONTINUE
 1011 CONTINUE
      if(EFINAL > 1000.):
 NIN=36
#
      RETURN
      # end    
      def GAS9(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)  
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      DIMENSION XEN(164),YMT(164),YEL(164),YEPS(164),XATT1(11),YATT1(11),XATT2(9),YATT2(9),XVIB1(29),YVIB1(29),XVIB2(28),YVIB2(28),XVIB3(28),YVIB3(28),XVIB4(46),YVIB4(46),XVIB5(16),YVIB5(16),XTR1(12),YTR1(12),XTR2(11),YTR2(11),XTR3(11),YTR3(11),IOFFN(250)
      DIMENSION XNUL1(25),YNUL1(25),XNUL2(13),YNUL2(13),XNUL3(14),YNUL3(14)
      DIMENSION XION1(31),YION1(31),XION2(31),YION2(31),XION3(31),YION3(31),XION4(30),YION4(30),XION5(29),YION5(29),XION6(29),YION6(29),XION7(26),YION7(26),XION8(26),YION8(26),XION9(25),YION9(25),XION10(24),YION10(24),XION11(24),YION11(24),XION12(24),YION12(24),XION13(23),YION13(23),XION14(21),YION14(21),XION15(21),YION15(21),XION16(83),YION16(83),XION(50),YIONG(50),YIONC(50),IOFFION(16)
      DIMENSION Z1T(25),Z6T(25),EBRM(25)  
      CHARACTER*50 SCRPT(300),SCRPTN(10)       
      CHARACTER*25 NAME                                                 
      DATA XEN/0.00,.001,.002,.003,.004,.005,.007,0.01,.014,0.02,.025,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.10,0.11,0.12,                0.13,0.14,0.16,0.18,0.20,0.25,0.30,0.35,0.40,0.50,0.60,0.70,0.80,1.00,1.50,2.00,2.50,3.00,4.00,5.00,6.00,7.00,8.00,9.00,10.0,12.0,14.0,16.0,18.0,20.0,25.0,30.0,40.0,50.0,60.0,70.0,80.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,6000.,7000.,8000.,9000.,1.0D4,1.25D4,1.5D4,1.75D4,2.0D4,2.5'%.3f' %.0'%.3f' %.5D4,4.0D4,4.5D4,5.0D4,6.0D4,7.0D4,8.0D4,9.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5'%.3f' %.0'%.3f' %.5D5,4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,2.0D6,2.5'%.3f' %.0'%.3f' %.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5'%.3f' %.0'%.3f' %.5D7,4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,1.0D8,1.25D8,1.5D8,1.75D8,2.0D8,2.5'%.3f' %.0'%.3f' %.5D8,4.0D8,4.5D8,5.0D8,6.0D8,7.0D8,8.0D8,9.0D8,1.0D9/
      DATA YMT/32.0,31.0,29.0,27.0,26.0,25.0,23.0,20.0,17.6,15.2,13.0,11.2,7.25,4.70,3.25,2.40,1.80,1.40,1.15,1.10,1.08, 1.08,1.10,1.25,1.50,1.85,2.40,3.15,4.10,4.85,6.10,6.90,7.15,7.30,7.70,8.45,9.10,10.3,11.6,13.9,17.8,20.7,21.4,21.3,20.0,17.6,13.9,11.3,9.40,8.00,7.20,5.75,4.90,3.76,3.00,2.50,2.15,1.80,1.41,1.10,0.91,.770,.680,.540,.440,.370,.325,.280,.252,.200,.159,          .127,.104,.0870,.0592,.0431,.0329,.0260,.0175,.0127,.00961,.00756,.00612,.00506,.00364,.00276,.00216,.00175,.00144,9.62D-4,6.91D-4,5.22D-4,4.10D-4,2.74D-4,1.97D-4,1.49D-4,1.17D-4,9.48D-5,7.85D-5,5.67D-5,4.31D-5,3.41D-5,2.77D-5,2.31D-5,1.57D-5,1.15D-5,8.88D-6,7.11D-6,4.93D-6,3.67D-6,2.87D-6,2.33D-6,1.94D-6,1.64D-6,1.24D-6,9.79D-7,7.98D-7,6.67D-7,5.68D-7,4.06D-7,3.06D-7,2.41D-7,1.95D-7,1.36D-7,1.01D-7,7.87D-8,6.30D-8,5.17D-8,4.32D-8,3.16D-8,2.42D-8,1.92D-8,1.56D-8,1.29D-8,8.67D-9,6.23D-9,4.71D-9,3.69D-9,2.45D-9,1.75D-9,1.31D-9,1.02D-9,8.19D-10,6.71D-10,4.75D-10,3.53D-10,2.73D-10,2.18D-10,1.77D-10,1.14D-10,7.99D-11,5.89D-11,4.52D-11,2.90D-11,2.02D-11,1.48D-11,1.14D-11,8.98D-12,7.28D-12,5.06D-12,3.71D-12,2.85D-12,2.25D-12,1.82D-12/
# ASSUME ELASTIC = MOMENTUM TRANSFER UP TO 3.0 EV (NO GOOD ELASTIC DATA)
      DATA YEL/32.0,31.0,29.0,27.0,26.0,25.0,23.0,20.0,17.6,15.2,13.0,11.2,7.25,4.70,3.25,2.40,1.80,1.40,1.15,1.10,1.08, 1.08,1.10,1.25,1.50,1.85,2.40,3.15,4.10,4.85,6.10,6.90,7.15,7.30,7.70,8.45,9.10,10.3,15.2,18.9,23.4,27.2,29.6,31.9,31.0,30.1,27.7,25.9,24.1,23.3,22.1,20.0,17.3,13.4,11.9,10.7,9.85,9.02,7.40,6.25,5.50,4.95,4.50,3.90,3.43,3.04,2.74,2.49,2.29,1.97,1.73,1.54,1.39,1.27,1.04,.877,.760,.671,.544,.458,.395,.348,.311,.281,.235,.203,.178,.159,.144,.116,.0978,.0845,.0745,.0605,.0512,.0445,.0395,.0356,.0325,.0278,.0244,.0226,.0200,.0184,.0156,.0138,.0124,.0115,.0101,.00918,.00855,.00808,.00772,.00744,.00702,.00674,.00653,.00637,.00625,.00605,.00592,.00584,.00578,.00570,.00566,.00563,.00561,.00560,.00559,.00557,.00556,.00556,.00555,.00555,.00555,29*.00554/
      DATA YEPS/38*1.0,.65352,.61534,.65007,.65056,.59839,.52532,.49651,.42242,.32895,.26232,.21931,.17939,.16529,.13630,.13322,.13133,.11165,.09963,.09005,.07893,.07377,.06576,.06017,.05510,.05287,.04673,.04198,.03896,.03770,.03497,.03403,.03050,.02667,.02302,.02024,.01805,.01418,.01167,.00990,.00860,.00681,.00563,.00480,.00418,.00370,.00332,.00276,.00235,.00205,.00182,.00163,.00130,.00108,.000924,.000806,.000641,.000531,.000452,.000393,.000348,3.11D-4,2.56D-4,2.17D-4,1.82D-4,1.65D-4,1.47D-4,1.15D-4,9.32D-5,7.80D-5,6.67D-5,5.10D-5,4.08D-5,3.36D-5,2.83D-5,2.43D-5,2.11D-5,1.65D-5,1.33D-5,1.10D-5,9.27D-6,7.94D-6,5.71D-6,4.29D-6,3.35D-6,2.69D-6,1.86D-6,1.36D-6,1.04D-6,8.19D-7,6.63D-7,5.48D-7,3.93D-7,2.95D-7,2.30D-7,1.84D-7,1.57D-7,9.87D-8,6.96D-8,5.16D-8,3.98D-8,2.58D-8,1.80D-8,1.33D-8,1.02D-8,8.06D-9,6.54D-9,4.53D-9,3.32D-9,2.53D-9,1.99D-9,1.61D-9,1.01D-9,6.94D-10,5.04D-10,3.82D-10,2.40D-10,1.64D-10,1.19D-10,9.0D-11,7.00D-11,5.6D-11,3.8D-11,2.8D-11,2.1D-11,1.6D-11,1.3D-11/
#
      DATA XVIB1/.117,0.13,0.15,0.17,0.20,0.23,0.25,0.30,0.40,0.50,0.60,0.70,0.85,1.00,1.50,2.00,2.50,3.00,3.50,4.00,5.00,6.00,7.50,8.50,10.0,15.0,20.0,30.0,40.0/                   
      DATA YVIB1/0.00,.070,.105,.126,.135,.140,.140,.129,.105,.082,.067,.057,.049,.049,.064,.087,.108,.129,.152,.187,.246,.316,.433,.433,.351,.246,.164,.073,.042/                     
      DATA XVIB2/.148,0.16,0.17,0.20,0.23,0.25,0.30,0.40,0.50,0.60,0.70,0.85,1.00,1.50,2.00,2.50,3.00,3.50,4.00,5.00,6.00,7.50,8.50,10.0,15.0,20.0,30.0,40.0/                    
      DATA YVIB2/0.00,.044,.077,.108,.115,.123,.123,.108,.092,.077,.065,.055,.054,.062,.077,.096,.115,.139,.169,.223,.293,.370,.370,.308,.216,.142,.065,.037/                    
      DATA XVIB3/.182,0.19,0.20,0.23,0.25,0.30,0.35,0.40,0.50,0.60,0.70,0.85,1.00,1.50,2.00,2.50,3.00,3.50,4.00,5.00,6.00,7.50,8.50,10.0,15.0,20.0,30.0,40.0/                
      DATA YVIB3/0.00,.070,.091,.189,.231,.259,.266,.259,.224,.182,.164,.154,.157,.171,.189,.210,.252,.301,.364,.490,.623,.805,.805,.665,.434,.294,.133,.077/                       
      DATA XVIB4/.366,.367,.368,.370,.375,.380,.385,.390,.395,.400,.410,.420,.430,.440,.450,.460,.480,.500,.520,.550,.600,.650,.700,.800,.900,1.00,1.10,1.20,1.30,1.40,1.50,1.70,2.00,2.50,3.00,3.50,4.00,5.00,6.00,7.50,8.50,10.0,15.0,20.0,30.0,40.0/               
      DATA YVIB4/0.00,.03782,.05336,.07494,.1107,.1361,.1561,.1727,.1864,.2002,.2210,.2382,.2520,.2641,.2728,.2814,.2952,.3056,.3125,.3194,.3246,.3246,.3229,.3143,.3026,.3026,.3048,.3071,.3115,.3160,.320,.329,.343,.387,.472,.570,.694,.908,1.16,1.32,1.16,.935,.507,.289,.129,.715/               
      DATA XVIB5/.548,1.00,1.50,2.00,3.00,3.50,4.00,5.00,6.00,7.50,8.50,10.0,15.0,20.0,30.0,40.0/               
      DATA YVIB5/0.00,.001,.002,.003,.0055,.011,.044,.094,.134,.143,.134,.116,.068,.0383,.0171,.0096/   
# GROSS IONISATION X-SECTION  AVERAGE OF TIAN AND VIDAL AND 
# NISHIMURA AND TAWARA  (WITHIN 4% OF EACH OTHER) TYPICALLY REDUCE 
# NISHIMURA BY 2% ...
# BELOW 20 EV USE AVERAGE OVER ALL DATA 
# ABOVE 3 KEV USE SCALED SCHRAM TO 60 KEV : SMOOTH JOIN 
# TO MATRIX ELEMENT FIT OF DATA BY  RIEKE AND PREPJCHAL      
      DATA XION/11.52,12.0,12.5,13.0,14.0,15.0,16.0,17.0,18.0,19.0,     20.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,4000.,7000.,10000.,60000./
# GROSS IONISATION 
      DATA YIONG/0.00,.017,.038,.061,.270,.518,0.87,1.28,1.62,1.95,     2.24,3.48,4.45,4.96,5.54,5.87,6.09,6.63,6.80,6.78,                6.82,6.83,6.46,6.18,5.86,5.57,5.31,4.96,4.71,4.51,4.08,3.80,3.44,3.28,3.13,2.94,2.66,2.33,2.21,1.99,1.72,1.49,1.34,1.20,1.06,.881,.657,.411,.290,.0599/
# COUNTING IONISATION
      DATA YIONC/0.0,.017,.038,.061,.270,.518,0.87,1.28,1.62,1.95,2.24,3.48,4.45,4.94,5.47,5.65,5.78,6.27,6.42,6.39,6.44,6.45,6.07,5.79,5.47,5.18,4.94,4.61,4.38,4.19,3.80,3.53,3.20,3.05,2.91,2.74,2.47,2.17,2.06,1.85,1.60,1.39,1.25,1.12,.986,.820,.611,.382,.270,.0557/
# ALL INDIVIDUAL BREAKUP CHANNELS FROM TIAN AND VIDAL
# CORRECTED BY WANG AND VIDAL FOR DISSOCIATION OF C2H6++ 
#
#   C2H6+   
      DATA XION1/11.52,13.0,14.0,15.0,17.5,20.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600./
      DATA YION1/0.0,.055,.095,.130,.215,.366,.566,.664,.684,.747,.734,.724,.773,.768,.758,.749,.751,.717,.692,.665,.642,.618,.583,.560,.544,.499,.473,.430,.417,.401,.377/
#  C2H4+
      DATA XION2/12.05,13.0,14.0,15.0,17.5,20.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600./
      DATA YION2/.0,.005,.140,.290,.672,1.068,1.705,2.240,2.350,2.461,2.481,2.473,2.607,2.568,2.517,2.510,2.492,2.346,2.273,2.179,2.103,2.031,1.925,1.841,1.777,1.635,1.542,1.408,1.352,1.301,1.226/
# C2H5+
      DATA XION3/12.65,13.0,14.0,15.0,17.5,20.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600./
      DATA YION3/0.0,.001,.034,.070,.156,.266,.412,.507,.556,.568,.569,.565,.597,.603,.589,.595,.588,.566,.546,.529,.514,.490,.468,.451,.432,.401,.381,.349,.337,.321,.302/
#  CH3+
      DATA XION4/13.65,14.0,15.0,17.5,20.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600./
      DATA YION4/0.0,.001,.018,.051,.070,.083,.095,.104,.120,.114,.130,.176,.203,.216,.218,.218,.197,.178,.159,.138,.130,.114,.106,.099,.084,.071,.063,.058,.051,.047/
#  C2H3+
      DATA XION5/14.8,15.0,17.5,20.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600./
      DATA YION5/0.0,.005,.175,.294,.432,.553,.709,.814,.836,.827,.882,.889,.862,.855,.847,.786,.746,.702,.658,.630,.586,.564,.540,.489,.455,.415,.391,.373,.351/
#  C2H2+
      DATA XION6/14.8,15.0,17.5,20.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600./
      DATA YION6/0.0,.005,.118,.174,.268,.322,.394,.503,.550,.578,.614,.626,.611,.609,.600,.543,.500,.459,.426,.396,.364,.338,.324,.289,.259,.232,.217,.206,.192/
#  H+
      DATA XION7/20.5,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600./
      DATA YION7/0.0,.011,.041,.053,.055,.001,.001,.001,.062,.111,.166,.189,.189,.166,.135,.094,.080,.063,.046,.035,.014,.004,.001,.0003,.0001,.00003/
#  H2+
      DATA XION8/21.5,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600./
      DATA YION8/0.0,.002,.007,.013,.015,.020,.008,.023,.039,.041,.048,.050,.042,.034,.028,.023,.020,.014,.012,.010,.006,.004,.003,.002,.0015,.001/
#  CH2+
      DATA XION9/25.8,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600./
      DATA YION9/0.0,.020,.036,.056,.054,.065,.098,.109,.110,.117,.117,.106,.094,.083,.069,.064,.057,.051,.048,.040,.034,.026,.023,.020,.018/
#  C2H+
      DATA XION10/26.2,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600./
      DATA YION10/0.0,.021,.044,.059,.074,.096,.109,.113,.114,.116,.105,.092,.081,.070,.064,.053,.050,.043,.036,.031,.025,.022,.019,.017/
#  C2H6++
      DATA XION11/32.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600./
      DATA YION11/0.0,.019,.074,.219,.313,.360,.380,.385,.383,.384,.385,.390,.390,.389,.370,.347,.331,.315,.285,.265,.240,.228,.217,.204/
#  H3+
      DATA XION12/32.5,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600./
      DATA YION12/0.0,.001,.002,.001,.001,.011,.012,.017,.015,.015,.013,.011,.008,.006,.005,.003,.002,.001,.0005,.00025,.00013,.000062,.000045,.00003/
#  CH+
      DATA XION13/36.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600./
      DATA YION13/0.0,.006,.012,.016,.026,.038,.041,.046,.047,.043,.036,.029,.025,.023,.019,.015,.014,.010,.007,.005,.003,.002,.0015/
#  C2+
      DATA XION14/37.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600./
      DATA YION14/0.0,.001,.003,.007,.011,.014,.017,.017,.015,.013,.011,.009,.007,.006,.005,.003,.0017,.0007,.0003,.00017,.00009/
#  C+
      DATA XION15/37.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600./
      DATA YION15/0.0,.001,.004,.008,.011,.015,.016,.017,.015,.013,.011,.010,.008,.007,.006,.005,.004,.003,.0018,.0009,.0005/
# K-SHELL IONISATION X-SECTION CARBON (SCALED BY 2 IN def) 
      DATA XION16/285.,298.,307.,316.,325.,335.,345.,365.,398.,422.,447.,473.,501.,531.,613.,668.,708.,750.,817.,917.,1000.,1122.,1296.,1496.,1679.,1884.,2054.,2238.,2512.,2985.,3981.,5012.,7079.,1.0D4,1.50D4,2.05D4,2.51'%.3f' %.07D4,4.10D4,5.01D4,6.13D4,7.08D4,8.18D4,1.0D5,1.54D5,2.05D5,2.99D5,4.10D5,5.01D5,6.13D5,7.08D5,8.18D5,1.0D6,1.26D6,1.5D6,2.05'%.3f' %.07D6,4.10D6,5.01D6,6.13D6,7.08D6,8.18D6,1.0D7,1.26D7,1.5D7,2.05'%.3f' %.07D7,4.10D7,5.01D7,6.13D7,7.08D7,8.18D7,1.0D8,1.26D8,1.5D8,2.05'%.3f' %.07D8,4.10D8,5.01D8,6.13D8,7.08D8,8.18D8,1.0D9/
      DATA YION16/0.00,1.66D-4,3.48D-4,5.25D-4,6.96D-4,8.63D-4,1.02D-3,1.33D-3,1.75D-3,2.01D-3,2.24D-3,2.46D-3,2.66D-3,2.84D-3,3.21D-3,3.38D-3,3.47D-3,3.55D-3,3.65D-3,3.72D-3,3.75D-3,3.74D-3,3.68D-3,3.57D-3,3.45D-3,3.31D-3,3.19D-3,3.07D-3,2.91D-3,2.66D-3,2.25D-3,1.95D-3,1.55D-3,1.21D-3,8.97D-4,7.07D-4,6.07D-4,5.21D-4,4.21D-4,3.63D-4,3.14D-4,2.84D-4,2.57D-4,2.25D-4,1.74D-4,1.50D-4,1.28D-4,1.15D-4,1.09D-4,1.05D-4,1.03D-4,1.02D-4,1.01D-4,1.005D-4,1.01D-4,1.03D-4,1.07D-4,1.11D-4,1.14D-4,1.17D-4,1.20D-4,1.22D-4,1.25D-4,1.29D-4,1.32D-4,1.38D-4,1.45D-4,1.50D-4,1.54D-4,1.58D-4,1.60D-4,1.63D-4,1.67D-4,1.71D-4,1.74D-4,1.80D-4,1.87D-4,1.92D-4,1.96D-4,2.00D-4,2.02D-4,2.05D-4,2.09D-4/
# ATTACHMENT  H-  EXCLUDING ION PAIRS
      DATA XATT1/7.00,7.50,8.00,8.50,9.00,9.18,9.50,10.0,10.5,11.0,     11.5/                   
      DATA YATT1/0.00,7.65D-5,2.52D-4,8.42D-4,1.55D-3,1.70D-3,1.50D-3,8.33D-4,2.50D-4,7.65D-5,0.00/  
# ATTACHMENT CH2- EXCLUDING ION PAIRS
      DATA XATT2/7.90,8.40,8.90,9.40,9.90,10.1,10.4,10.9,11.4/          
      DATA YATT2/0.00,1.53D-5,5.04D-5,1.68D-4,3.10D-4,3.40D-4,3.00D-4,1.67D-4,0.0/                    
#                
# NON DIPOLE AT 6.85 EV
      DATA XTR1/6.85,8.00,9.00,10.0,11.0,12.0,14.0,16.0,19.0,22.0,26.0,30.0/                     
      DATA YTR1/0.00,.030,.042,.048,.054,.057,.060,.060,.054,.048,  .036,.026/
c NON DIPOLE AT 8.00 EV               
      DATA XTR2/8.00,9.50,10.5,11.5,12.5,14.5,16.5,19.5,22.5,26.5,30.0/
      DATA YTR2/0.00,.205,.295,.336,.353,.369,.369,.344,.295,.230,.181/
c NON DIPOLE AT 10.0 EV                        
      DATA XTR3/10.0,11.0,12.0,13.0,14.0,17.0,20.0,23.0,27.0,30.0,35.0/                             
      DATA YTR3/0.00,.331,.680,.794,.898,.945,.945,.898,.777,.675,.513/
#                                      
# BREMSSTRAHLUNG X-SECTION WITH CUT UNITS 10**-24
      DATA Z1T/11.3,6.18,2.80,1.54,.858,.407,.251,.176,.145,.150,.167,.178,.187,.193,.198,.205,.210,.218,.222,.228,.231,.233,.234,.235,.235/
      DATA Z6T/298.,178.,85.2,47.5,26.3,12.2,7.06,4.45,3.06,2.82,2.89,2.99,3.08,3.13,3.18,3.25,3.31,3.39,3.44,3.49,3.52,3.54,3.55,3.57,3.57/
      DATA EBRM/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,4.E7,5.E7,6.E7,8.E7,1.E8/
# WINTERS CHEM.PHYS.36(1979)353  (NULL COLLISION)  
#   REDUCED  BY 0.9 IN def
      DATA XNUL1/8.4,10.3,15.0,20.0,25.0,30.0,40.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,550.,600./
      DATA YNUL1/0.0,0.20,1.30,3.20,4.00,5.60,6.40,7.00,7.40,7.60,7.65,7.60,7.50,7.30,7.10,6.90,6.70,6.40,6.00,5.60,5.30,4.90,4.60,4.30,4.10/
# LIGHT EMISSION FROM H ALPHA     
#  MOHLMANN  CHEM PHYS 19(1977)233
      DATA XNUL2/20.0,40.0,60.0,80.0,100.,150.,200.,300.,500.,1000.,1300.,1700.,2000./
      DATA YNUL2/0.0,.0116,.0196,.0241,.0250,.0222,.0186,.0121,.007,.0034,.0026,.0020,.0017/
# LIGHT EMISSION FROM CH2(A2DELTA -X2PI)
#  MOHLMANN  CHEM PHYS 19(1977)233
      DATA XNUL3/16.0,20.0,40.0,60.0,80.0,100.,150.,200.,300.,500.,1000.,1300.,1700.,2000./
      DATA YNUL3/0.0,.0011,.0041,.0057,.0062,.0061,.0050,.0041,.0028,.0017,.0008,.0006,.0005,.0004/
# --------------------------------------------------------------------- 
# UPDATED TO DEC 1994 . INCLUDES LATEST ELECTRON SCATTERING RESULTS     
# GIVES BETTER FIT THAN PREVIOUS DATA SET
# 1999 MOD USES VIBRATION AT 35.8 MV AND ALSO SUPER ELASTICS.
#          ALSO MOD TO ELASTIC AT LOW ENERGY BELOW 20 MV
# ---------------------------------------------------------------------
c     NANISO=0
      if(NANISO == 0):
 :
       NAME=' C2H6 2016   ISOTROPIC  '
      else:
       NAME=' C2H6 2016  ANISOTROPIC '
      # endif 
#-----------------------------------------------------------------------
# BORN-BETHE CONSTANTS
      A0=0.52917720859D-08
      RY=13.60569193
      CONST=1.873884D-20
      EMASS2=1021997.804
      API=numpy.arccos(-1.00)
      BBCONST=16.00*API*A0*A0*RY*RY/EMASS2
#
# BORN BETHE FOR IONISATION 
      AM2=7.21
      C=70.5
#
# ARRAY SIZE
      NASIZE=20000
#
      NION=16
      NATT=2
      NIN=55  
      NNULL=3
      IONMODEL=1
#
      NBREM=25
      DO 8 J=1,NIN
      IZBR[J]=0
    8 CONTINUE
      IZBR(NIN+1)=6
      IZBR(NIN+2)=1
#
      DO 1 J=1,6
    1 KEL[J]=NANISO
#  SET VIBRATIONAL ANGULAR DISTRIBUTIONS TO ANISOTROPIC
      DO 2 J=1,10
    2 KIN[J]=NANISO
# SET ANG DISTRIBUTION FOR DISSOCIATIVE EXCITATIONS TO OKHRIMOVSKYY TYPE
      DO 31 J=11,NIN
   31 KIN[J]=2
                                                     
      NDATA=164
#                                                        
      NIOND=50
      NION1=31
      NION2=31
      NION3=31
      NION4=30
      NION5=29
      NION6=29
      NION7=26
      NION8=26
      NION9=25
      NION10=24
      NION11=24
      NION12=24
      NION13=23
      NION14=21
      NION15=21
      NION16=83
#
      NATT1=11
      NATT2=9                                                         
      NVIB1=29                                                         
      NVIB2=28                                                          
      NVIB3=28
      NVIB4=46
      NVIB5=16
      NTR1=12                                                         
      NTR2=11                                                          
      NTR3=11
      NUL1=25
      NUL2=13
      NUL3=14
# SCALING OF NULL CROSS-SECTIONS
      SCLN[1]=1.0 
      SCLN(2)=1.0  
      SCLN(3)=1.0      
#
#
      E[1]=0.0                                                          
      E(2)=2.0*EMASS/(30.06964*AMU)                                     
      E(3)=11.52                                                        
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
#
      EION[1]=11.52
      EION(2)=12.05
      EION(3)=12.65
      EION(4)=13.65
      EION(5)=14.8
      EION(6)=14.8
      EION(7)=20.5
      EION(8)=21.5
      EION(9)=25.8
      EION(10)=26.2
      EION(11)=32.0
      EION(12)=32.5
      EION(13)=36.0
      EION(14)=37.0
      EION(15)=37.0
      EION(16)=285.0
# OPAL BEATY
      SCLOBY=0.6
      SCLOBY=1.0
#     SCLOBY=1.0
      DO 33 J=1,NION
      EOBY[J]=EION[J]*SCLOBY
   33 CONTINUE
      EOBY(NION)=EION(NION)*0.63
#
      ESPLIT(1,1)=0.99*EION(2)
      ESPLIT(1,2)=0.76*EION(2) 
#
      DO 44 JK=1,15
      LEGAS(JK)=0
      ISHELL(JK)=0
      NC0(JK)=0
      EC0(JK)=0.0
      WKLM(JK)=0.0
      EFL(JK)=0.0
      NG1(JK)=0
      EG1(JK)=0.0
      NG2(JK)=0
      EG2(JK)=0.0
   44 CONTINUE
# DOUBLE CHARGE , ++ ION STATES ( EXTRA ELECTRON )
      NC0(11)=1
      EC0(11)=6.0
# FLUORESCENCE DATA  (KSHELL)
      LEGAS(16)=1
      ISHELL(16)=1
      NC0(16)=2
      EC0(16)=253.
      WKLM(16)=0.0026
      EFL(16)=273.
      NG1(16)=1
      EG1(16)=253.
      NG2(16)=2
      EG2(16)=5.
# OFFSET ENERGY FOR IONISATION ELECTRON ANGULAR DISTRIBUTION
      DO 776 J=1,NION
      DO 777 I=1,NASIZE
      if(EG[I]:
 > EION[J]) :
       IOFFION[J]=I-1
       GO TO 776
      # endif
  777 CONTINUE
  776 CONTINUE
#
      EIN[1]=-0.0358
      EIN(2)=0.0358 
      EIN(3)=-0.117                                                     
      EIN(4)=0.117
      EIN(5)=-0.148                      
      EIN(6)=0.148 
      EIN(7)=-0.182                                                     
      EIN(8)=0.182
      EIN(9)=0.366                                                      
      EIN(10)=0.548
      EIN(11)=6.85
      EIN(12)=7.93
      EIN(13)=8.00
      EIN(14)=8.15
      EIN(15)=8.48
      EIN(16)=8.723
      EIN(17)=8.865
      EIN(18)=9.007
      EIN(19)=9.149
      EIN(20)=9.291
      EIN(21)=9.433
      EIN(22)=9.575
      EIN(23)=9.717
      EIN(24)=9.859
      EIN(25)=10.0
      EIN(26)=10.115
      EIN(27)=10.45
      EIN(28)=10.672
      EIN(29)=10.816
      EIN(30)=10.960
      EIN(31)=11.104
      EIN(32)=11.248
      EIN(33)=11.392
      EIN(34)=11.732
      EIN(35)=12.4
      EIN(36)=13.0
      EIN(37)=13.5
      EIN(38)=14.1
      EIN(39)=14.7
      EIN(40)=15.3
      EIN(41)=15.9
      EIN(42)=16.5
      EIN(43)=17.1
      EIN(44)=17.7
      EIN(45)=18.5
      EIN(46)=19.5
      EIN(47)=20.5
      EIN(48)=21.5
      EIN(49)=22.5
      EIN(50)=23.5
      EIN(51)=24.5
      EIN(52)=25.5
      EIN(53)=26.5
      EIN(54)=27.5
      EIN(55)=28.5
      EIN(56)=0.0
      EIN(57)=0.0
# OFFSET ENERGY FOR EXCITATION LEVELS ANGULAR DISTRIBUTION
      DO 3 NL=1,NIN
      DO 651 I=1,NASIZE
      if(EG[I]:
 > abs(EIN(NL))) : 
       IOFFN(NL)=I-1
       GO TO 3
      # endif
  651 CONTINUE
    3 CONTINUE 
#*****************************************************************
# ENTER PENNING TRANSFER FRACTION FOR EACH LEVEL
# LEVELS THAT ARE DISSOCIATIVE DO NOT GIVE PENNING TRANSFERS
      DO 4 K=1,NIN
      DO 4 L=1,3
    4 PENFRA[L,K]=0.0
# ENTER PENNING CONSTANTS IN PREVIOUS LINE
      if(IPEN == 0):
 GO TO 6
# PRINT OUT PENNING CONSTANTS
      DO 5 KDUM=10,NIN
      if(PENFRA[1,KDUM] == 0.0):
 GO TO 5
      WRITE(6,999) NAME,EIN(KDUM),PENFRA[1,KDUM],PENFRA[2,KDUM],PENFRA[3,KDUM]
  999 print(' GAS = ',A25,' ENERGY LEVEL = ','%.4f' %,' EV.',/,' PENNING PROBABILITY =','%.3f' % ,' ABS.LENGTH =',F7.2,' DECAY TIME =',F7.1,/)
    5 CONTINUE
#********************************************************************* 
#
    6 SCRPT[1]='                                                  '
      SCRPT(2)=' ELASTIC   ANISOTROPIC   ETHANE 2016              '
      if(NANISO == 0):
 :
      SCRPT(2)=' ELASTIC     ISOTROPIC   ETHANE 2016              '
      # endif
      SCRPT(3)=' IONISATION     C2H6+               ELOSS= 11.52  '
      SCRPT(4)=' IONISATION     C2H4+               ELOSS= 12.05  ' 
      SCRPT(5)=' IONISATION     C2H5+               ELOSS= 12.65  '
      SCRPT(6)=' IONISATION     CH3+                ELOSS= 13.65  ' 
      SCRPT(7)=' IONISATION     C2H3+               ELOSS= 14.8   '
      SCRPT(8)=' IONISATION     C2H2+               ELOSS= 14.8   ' 
      SCRPT(9)=' IONISATION     H+                  ELOSS= 20.5   '
      SCRPT(10)=' IONISATION     H2+                 ELOSS= 21.5   ' 
      SCRPT(11)=' IONISATION     CH2+                ELOSS= 25.8   ' 
      SCRPT(12)=' IONISATION     C2H+                ELOSS= 26.2   ' 
      SCRPT(13)=' ION-DISS       C2H6++ (100% DISS)  ELOSS= 32.0   ' 
      SCRPT(14)=' IONISATION     H3+                 ELOSS= 32.5   ' 
      SCRPT(15)=' IONISATION     CH+                 ELOSS= 36.0   ' 
      SCRPT(16)=' IONISATION     C2+                 ELOSS= 37.0   '
      SCRPT(17)=' IONISATION     C+                  ELOSS= 37.0   '
      SCRPT(18)=' IONISATION   CARBON K-SHELL        ELOSS=285.0   ' 
      SCRPT(19)=' ATTACHMENT H-                                    '
      SCRPT(20)=' ATTACHMENT CH2-                                  ' 
      SCRPT(21)='                                                  ' 
      SCRPT(22)='                                                  '
      SCRPT(23)=' TORSION V4     SUPERELASTIC       ELOSS= -0.0358 ' 
      SCRPT(24)=' TORSION V4                        ELOSS=  0.0358 ' 
      SCRPT(25)=' V12+V3 ROCKING SUPERELASTIC       ELOSS= -0.117  ' 
      SCRPT(26)=' V12+V3 ROCKING VIBRATIONS         ELOSS=  0.117  '
      SCRPT(27)=' V9 ROCKING     SUPERELASTIC       ELOSS= -0.148  '
      SCRPT(28)=' V9 ROCKING                        ELOSS=  0.148  '
      SCRPT(29)=' V2+V6+V8+V11  SUPERELASTIC        ELOSS= -0.182  '
      SCRPT(30)=' V2+V6+V8+V11  B# end    VIBRATION   ELOSS=  0.182  '
      SCRPT(31)=' V1+V5+V7+V10  STRETCH VIBRATION   ELOSS=  0.366  '
      SCRPT(32)=' VIBRATION    HARMONICS            ELOSS=  0.548  '
      SCRPT(33)=' TRIPLET DISSOCIATION              ELOSS=  6.85   '
      SCRPT(34)=' SINGLET DISSOC.    F = 0.000136   ELOSS=  7.93   '
      SCRPT(35)=' TRIPLET DISSOCIATION              ELOSS=  8.00   '
      SCRPT(36)=' SINGLET DISSOC.    F = 0.001744   ELOSS=  8.15   '
      SCRPT(37)=' SINGLET DISSOC.    F = 0.008187   ELOSS=  8.48   '
      SCRPT(38)=' SINGLET DISSOC.    F = 0.006312   ELOSS=  8.723  '
      SCRPT(39)=' SINGLET DISSOC.    F = 0.011877   ELOSS=  8.865  '
      SCRPT(40)=' SINGLET DISSOC.    F = 0.020856   ELOSS=  9.007  '
      SCRPT(41)=' SINGLET DISSOC.    F = 0.031444   ELOSS=  9.149  '
      SCRPT(42)=' SINGLET DISSOC.    F = 0.039549   ELOSS=  9.291  '
      SCRPT(43)=' SINGLET DISSOC.    F = 0.042350   ELOSS=  9.433  '
      SCRPT(44)=' SINGLET DISSOC.    F = 0.041113   ELOSS=  9.575  '
      SCRPT(45)=' SINGLET DISSOC.    F = 0.038256   ELOSS=  9.717  '
      SCRPT(46)=' SINGLET DISSOC.    F = 0.036556   ELOSS=  9.859  '
      SCRPT(47)=' TRIPLET DISSOCIATION              ELOSS= 10.0    '
      SCRPT(48)=' SINGLET DISSOC.    F = 0.096232   ELOSS= 10.115  '
      SCRPT(49)=' SINGLET DISSOC.    F = 0.083738   ELOSS= 10.450  '
      SCRPT(50)=' SINGLET DISSOC.    F = 0.043456   ELOSS= 10.672  '
      SCRPT(51)=' SINGLET DISSOC.    F = 0.047436   ELOSS= 10.816  '
      SCRPT(52)=' SINGLET DISSOC.    F = 0.047800   ELOSS= 10.960  '
      SCRPT(53)=' SINGLET DISSOC.    F = 0.048914   ELOSS= 11.104  '
      SCRPT(54)=' SINGLET DISSOC.    F = 0.054353   ELOSS= 11.248  '
      SCRPT(55)=' SINGLET DISSOC.    F = 0.061019   ELOSS= 11.392  '
      SCRPT(56)=' SINGLET DISSOC.    F = 0.24443    ELOSS= 11.732  '
      SCRPT(57)=' SINGLET DISSOC.    F = 0.28479    ELOSS= 12.4    '
      SCRPT(58)=' SINGLET DISSOC.    F = 0.095973   ELOSS= 13.0    '
      SCRPT(59)=' SINGLET DISSOC.    F = 0.090728   ELOSS= 13.5    '
      SCRPT(60)=' SINGLET DISSOC.    F = 0.071357   ELOSS= 14.1    '
      SCRPT(61)=' SINGLET DISSOC.    F = 0.074875   ELOSS= 14.7    '
      SCRPT(62)=' SINGLET DISSOC.    F = 0.054542   ELOSS= 15.3    '
      SCRPT(63)=' SINGLET DISSOC.    F = 0.022479   ELOSS= 15.9    '
      SCRPT(64)=' SINGLET DISSOC.    F = 0.008585   ELOSS= 16.5    '
      SCRPT(65)=' SINGLET DISSOC.    F = 0.004524   ELOSS= 17.1    '
      SCRPT(66)=' SINGLET DISSOC.    F = 0.004982   ELOSS= 17.7    '
      SCRPT(67)=' SINGLET DISSOC.    F = 0.01013    ELOSS= 18.5    '
      SCRPT(68)=' SINGLET DISSOC.    F = 0.01332    ELOSS= 19.5    '
      SCRPT(69)=' SINGLET DISSOC.    F = 0.01331    ELOSS= 20.5    '
      SCRPT(70)=' SINGLET DISSOC.    F = 0.01076    ELOSS= 21.5    '
      SCRPT(71)=' SINGLET DISSOC.    F = 0.009797   ELOSS= 22.5    '
      SCRPT(72)=' SINGLET DISSOC.    F = 0.009198   ELOSS= 23.5    '
      SCRPT(73)=' SINGLET DISSOC.    F = 0.008312   ELOSS= 24.5    '
      SCRPT(74)=' SINGLET DISSOC.    F = 0.007139   ELOSS= 25.5    '
      SCRPT(75)=' SINGLET DISSOC.    F = 0.004715   ELOSS= 26.5    '
      SCRPT(76)=' SINGLET DISSOC.    F = 0.002137   ELOSS= 27.5    '
      SCRPT(77)=' SINGLET DISSOC.    F = 0.000662   ELOSS= 28.5    '
      SCRPT(78)=' BREMSSTRAHLUNG FROM CARBON ATOM                  '
      SCRPT(79)=' BREMSSTRAHLUNG FROM HYDROGEN ATOM                '
# NULL COLLISIONS
      SCRPTN[1]=' C2H6:DISSOCIATION : WINTERS CHEM.PHYS 36(1979)353'
      SCRPTN(2)=' C2H6: LIGHT EMISSION: Halpha                     '
      SCRPTN(3)=' C2H6: LIGHT EMISSION: CH2(A2DELTA - X2PI)        '
#
# CALC LEVEL POPULATIONS
      APOP1=math.exp(EIN[1]/AKT)
      APOP2=math.exp(EIN(3)/AKT)
      APOP3=math.exp(EIN(5)/AKT)
      APOP4=math.exp(EIN(7)/AKT)
# 
#
#     EN=-ESTEP/2.0                                      
      DO 1000 I=1,NSTEP 
      EN=EG[I]
      ENLG=math.log(EN)                                             
#     EN=EN+ESTEP    
      GAMMA1=(EMASS2+2.00*EN)/EMASS2
      GAMMA2=GAMMA1*GAMMA1
      BETA=math.sqrt(1.00-1.00/GAMMA2)
      BETA2=BETA*BETA
#                                                   
      DO 10 J=2,NDATA       
      if(EN > 10.0):
 GO TO 21                                           
      if(EN <= XEN[J]:
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA                                                           
   20 A=(YMT[J]-YMT(J-1))/(XEN[J]-XEN(J-1))                         
      B=(XEN(J-1)*YMT[J]-XEN[J]*YMT(J-1))/(XEN(J-1)-XEN[J])   
      QMT=(A*EN+B)*1.D-16
      A=(YEL[J]-YEL(J-1))/(XEN[J]-XEN(J-1))
      B=(XEN(J-1)*YEL[J]-XEN[J]*YEL(J-1))/(XEN(J-1)-XEN[J])
      QEL=(A*EN+B)*1.D-16
      A=(YEPS[J]-YEPS(J-1))/(XEN[J]-XEN(J-1))
      B=(XEN(J-1)*YEPS[J]-XEN[J]*YEPS(J-1))/(XEN(J-1)-XEN[J])
      PQ2=A*EN+B
      GO TO 30
# USE LOG INTERPOLATION ABOVE 10 EV
   21 DO 22 J=2,NDATA
      if(EN <= XEN[J]:
) GO TO 23
   22 CONTINUE
      J=NDATA
   23 YXJ=math.log(YEL[J])
      YXJ1=math.log(YEL(J-1))
      XNJ=math.log(XEN[J])
      XNJ1=math.log(XEN(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QEL=math.exp(A*math.log(EN)+B)*1.D-16
      YXJ=math.log(YMT[J])
      YXJ1=math.log(YMT(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QMT=math.exp(A*math.log(EN)+B)*1.D-16
      YXJ=math.log(YEPS[J])
      YXJ1=math.log(YEPS(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      PQ2=math.exp(A*math.log(EN)+B)
   30 CONTINUE
# EPSILON= 1-YEPS
      PQ2=1.00-PQ2 
      PQ1=0.5+(QEL-QMT)/QEL 
# CALCULATE PQ1 AND PQ2
      if(NANISO == 0):
 PEQEL(2,I)=0.5
      if(NANISO == 1):
 PEQEL(2,I)=PQ1
      if(NANISO == 2):
 PEQEL(2,I)=PQ2
      Q(2,I)=QEL
      if(NANISO == 0):
 Q(2,I)=QMT 
#
# IONISATION 
#
      Q(3,I)=0.0 
      DO 100 J=L,NION
      QION(L,I)=0.00
      PEQION(L,I)=0.5
      if(NANISO == 2):
 PEQION(L,I)=0.0
  100 CONTINUE
#  C2H6+                                                                     
      if(EN <= EION[1]:
) GO TO 110         
      if(EN > XION1(NION1):
) GO TO 103
      DO 101 J=2,NION1                                                  
      if(EN <= XION1[J]:
) GO TO 102                                     
  101 CONTINUE                                                          
      J=NION1                                                           
  102 A=(YION1[J]-YION1(J-1))/(XION1[J]-XION1(J-1))                    
      B=(XION1(J-1)*YION1[J]-XION1[J]*YION1(J-1))/(XION1(J-1)-XION1[J]) 
      QION(1,I)=(A*EN+B)*1.D-16               
      GO TO 107 
  103 if(EN > XION(NIOND)) GO TO 106
# USE FRACTION OF COUNTING IONISATION ABOVE 600 EV
# USE LOG INTERPOLATION 
      DO 104 J=2,NIOND
      if(EN <= XION[J]:
) GO TO 105
  104 CONTINUE
      J=NIOND
  105 YXJ=math.log(YIONC[J])
      YXJ1=math.log(YIONC(J-1))
      XNJ=math.log(XION[J])
      XNJ1=math.log(XION(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QCOUNT=math.exp(A*math.log(EN)+B)*1.D-16
# FRACTION OF QCOUNT
      QION(1,I)=QCOUNT*0.1378
      GO TO 107
# USE BORN BETHE ABOVE XION(NIOND) EV
  106 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QBB=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)
      QION(1,I)=QBB*0.1378
  107 CONTINUE
      if(EN < (2.0*EION[1]:
)) GO TO 110
      PEQION(1,I)=PEQEL(2,(I-IOFFION[1]))
# C2H4+ 
  110 if(EN <= EION(2)) GO TO 120         
      if(EN > XION2(NION2):
) GO TO 113
      DO 111 J=2,NION2                                                  
      if(EN <= XION2[J]:
) GO TO 112                                     
  111 CONTINUE                                                          
      J=NION2                                                           
  112 A=(YION2[J]-YION2(J-1))/(XION2[J]-XION2(J-1))                    
      B=(XION2(J-1)*YION2[J]-XION2[J]*YION2(J-1))/(XION2(J-1)-XION2[J]) 
      QION(2,I)=(A*EN+B)*1.D-16               
      GO TO 117 
  113 if(EN > XION(NIOND)) GO TO 116
# USE FRACTION OF COUNTING IONISATION ABOVE 600 EV
# FRACTION OF QCOUNT
      QION(2,I)=QCOUNT*0.4481
      GO TO 117
# USE BORN BETHE ABOVE XION(NIOND) EV
  116 QION(2,I)=QBB*0.4481
  117 CONTINUE
      if(EN < (2.0*EION(2):
)) GO TO 120
      PEQION(2,I)=PEQEL(2,(I-IOFFION(2)))
# C2H5+ 
  120 if(EN <= EION(3)) GO TO 130         
      if(EN > XION3(NION3):
) GO TO 123
      DO 121 J=2,NION3                                                  
      if(EN <= XION3[J]:
) GO TO 122                                     
  121 CONTINUE                                                          
      J=NION3                                                           
  122 A=(YION3[J]-YION3(J-1))/(XION3[J]-XION3(J-1))                    
      B=(XION3(J-1)*YION3[J]-XION3[J]*YION3(J-1))/(XION3(J-1)-XION3[J]) 
      QION(3,I)=(A*EN+B)*1.D-16               
      GO TO 127 
  123 if(EN > XION(NIOND)) GO TO 126
# USE FRACTION OF COUNTING IONISATION ABOVE 600 EV
# FRACTION OF QCOUNT
      QION(3,I)=QCOUNT*0.1104
      GO TO 127
# USE BORN BETHE ABOVE XION(NIOND) EV
  126 QION(3,I)=QBB*0.1104
  127 CONTINUE
      if(EN < (2.0*EION(3):
)) GO TO 130
      PEQION(3,I)=PEQEL(2,(I-IOFFION(3)))
# CH3+ 
  130 if(EN <= EION(4)) GO TO 140         
      if(EN > XION4(NION4):
) GO TO 133
      DO 131 J=2,NION4                                                  
      if(EN <= XION4[J]:
) GO TO 132                                     
  131 CONTINUE                                                          
      J=NION4                                                           
  132 A=(YION4[J]-YION4(J-1))/(XION4[J]-XION4(J-1))                    
      B=(XION4(J-1)*YION4[J]-XION4[J]*YION4(J-1))/(XION4(J-1)-XION4[J]) 
      QION(4,I)=(A*EN+B)*1.D-16               
      GO TO 137 
  133 if(EN > XION(NIOND)) GO TO 136
# USE FRACTION OF COUNTING IONISATION ABOVE 600 EV
# FRACTION OF QCOUNT
      QION(4,I)=QCOUNT*0.01718
      GO TO 137
# USE BORN BETHE ABOVE XION(NIOND) EV
  136 QION(4,I)=QBB*0.01718
  137 CONTINUE
      if(EN < (2.0*EION(4):
)) GO TO 140
      PEQION(4,I)=PEQEL(2,(I-IOFFION(4)))
# C2H3+ 
  140 if(EN <= EION(5)) GO TO 150         
      if(EN > XION5(NION5):
) GO TO 143
      DO 141 J=2,NION5                                                  
      if(EN <= XION5[J]:
) GO TO 142                                     
  141 CONTINUE                                                          
      J=NION5                                                           
  142 A=(YION5[J]-YION5(J-1))/(XION5[J]-XION5(J-1))                    
      B=(XION5(J-1)*YION5[J]-XION5[J]*YION5(J-1))/(XION5(J-1)-XION5[J]) 
      QION(5,I)=(A*EN+B)*1.D-16               
      GO TO 147 
  143 if(EN > XION(NIOND)) GO TO 146
# USE FRACTION OF COUNTING IONISATION ABOVE 600 EV
# FRACTION OF QCOUNT
      QION(5,I)=QCOUNT*0.1283 
      GO TO 147
# USE BORN BETHE ABOVE XION(NIOND) EV
  146 QION(5,I)=QBB*0.1283 
  147 CONTINUE
      if(EN < (2.0*EION(5):
)) GO TO 150
      PEQION(5,I)=PEQEL(2,(I-IOFFION(5)))
# C2H2+ 
  150 if(EN <= EION(6)) GO TO 160         
      if(EN > XION6(NION6):
) GO TO 153
      DO 151 J=2,NION6                                                  
      if(EN <= XION6[J]:
) GO TO 152                                     
  151 CONTINUE                                                          
      J=NION6                                                           
  152 A=(YION6[J]-YION6(J-1))/(XION6[J]-XION6(J-1))                    
      B=(XION6(J-1)*YION6[J]-XION6[J]*YION6(J-1))/(XION6(J-1)-XION6[J]) 
      QION(6,I)=(A*EN+B)*1.D-16               
      GO TO 157 
  153 if(EN > XION(NIOND)) GO TO 156
# USE FRACTION OF COUNTING IONISATION ABOVE 600 EV
# FRACTION OF QCOUNT
      QION(6,I)=QCOUNT*0.0700 
      GO TO 157
# USE BORN BETHE ABOVE XION(NIOND) EV
  156 QION(6,I)=QBB*0.0700 
  157 CONTINUE
      if(EN < (2.0*EION(6):
)) GO TO 160
      PEQION(6,I)=PEQEL(2,(I-IOFFION(6)))
# H+ 
  160 if(EN <= EION(7)) GO TO 170         
      if(EN > XION7(NION7):
) GO TO 163
      DO 161 J=2,NION7                                                  
      if(EN <= XION7[J]:
) GO TO 162                                     
  161 CONTINUE                                                          
      J=NION7                                                           
  162 A=(YION7[J]-YION7(J-1))/(XION7[J]-XION7(J-1))                    
      B=(XION7(J-1)*YION7[J]-XION7[J]*YION7(J-1))/(XION7(J-1)-XION7[J]) 
      QION(7,I)=(A*EN+B)*1.D-16               
      GO TO 167 
  163 if(EN > XION(NIOND)) GO TO 166
# USE FRACTION OF COUNTING IONISATION ABOVE 600 EV
# FRACTION OF QCOUNT
      QION(7,I)=QCOUNT*0.000011
      GO TO 167
# USE BORN BETHE ABOVE XION(NIOND) EV
  166 QION(7,I)=QBB*0.000011
  167 CONTINUE
      if(EN < (2.0*EION(7):
)) GO TO 170
      PEQION(7,I)=PEQEL(2,(I-IOFFION(7)))
# H2+ 
  170 if(EN <= EION(8)) GO TO 180         
      if(EN > XION8(NION8):
) GO TO 173
      DO 171 J=2,NION8                                                  
      if(EN <= XION8[J]:
) GO TO 172                                     
  171 CONTINUE                                                          
      J=NION8                                                           
  172 A=(YION8[J]-YION8(J-1))/(XION8[J]-XION8(J-1))                    
      B=(XION8(J-1)*YION8[J]-XION8[J]*YION8(J-1))/(XION8(J-1)-XION8[J]) 
      QION(8,I)=(A*EN+B)*1.D-16               
      GO TO 177 
  173 if(EN > XION(NIOND)) GO TO 176
# USE FRACTION OF COUNTING IONISATION ABOVE 600 EV
# FRACTION OF QCOUNT
      QION(8,I)=QCOUNT*0.00036  
      GO TO 177
# USE BORN BETHE ABOVE XION(NIOND) EV
  176 QION(8,I)=QBB*0.00036 
  177 CONTINUE
      if(EN < (2.0*EION(8):
)) GO TO 180
      PEQION(8,I)=PEQEL(2,(I-IOFFION(8)))
# CH2+ 
  180 if(EN <= EION(9)) GO TO 190         
      if(EN > XION9(NION9):
) GO TO 183
      DO 181 J=2,NION9                                                  
      if(EN <= XION9[J]:
) GO TO 182                                     
  181 CONTINUE                                                          
      J=NION9                                                           
  182 A=(YION9[J]-YION9(J-1))/(XION9[J]-XION9(J-1))                    
      B=(XION9(J-1)*YION9[J]-XION9[J]*YION9(J-1))/(XION9(J-1)-XION9[J]) 
      QION(9,I)=(A*EN+B)*1.D-16               
      GO TO 187 
  183 if(EN > XION(NIOND)) GO TO 186
# USE FRACTION OF COUNTING IONISATION ABOVE 600 EV
# FRACTION OF QCOUNT
      QION(9,I)=QCOUNT*0.0066  
      GO TO 187
# USE BORN BETHE ABOVE XION(NIOND) EV
  186 QION(9,I)=QBB*0.0066
  187 CONTINUE
      if(EN < (2.0*EION(9):
)) GO TO 190
      PEQION(9,I)=PEQEL(2,(I-IOFFION(9)))
# C2H+
  190 if(EN <= EION(10)) GO TO 200         
      if(EN > XION10(NION10):
) GO TO 193
      DO 191 J=2,NION10                                                 
      if(EN <= XION10[J]:
) GO TO 192                                     
  191 CONTINUE                                                          
      J=NION10                                                          
  192 A=(YION10[J]-YION10(J-1))/(XION10[J]-XION10(J-1))                
      B=(XION10(J-1)*YION10[J]-XION10[J]*YION10(J-1))/(XION10(J-1)-XION10[J]) 
      QION(10,I)=(A*EN+B)*1.D-16               
      GO TO 197 
  193 if(EN > XION(NIOND)) GO TO 196
# USE FRACTION OF COUNTING IONISATION ABOVE 600 EV
# FRACTION OF QCOUNT
      QION(10,I)=QCOUNT*0.0062
      GO TO 197
# USE BORN BETHE ABOVE XION(NIOND) EV
  196 QION(10,I)=QBB*0.0062    
  197 CONTINUE
      if(EN < (2.0*EION(10):
)) GO TO 200
      PEQION(10,I)=PEQEL(2,(I-IOFFION(10)))
# C2H6++
  200 if(EN <= EION(11)) GO TO 210         
      if(EN > XION11(NION11):
) GO TO 203
      DO 201 J=2,NION11                                                 
      if(EN <= XION11[J]:
) GO TO 202                                     
  201 CONTINUE                                                          
      J=NION11                                                          
  202 A=(YION11[J]-YION11(J-1))/(XION11[J]-XION11(J-1))                
      B=(XION11(J-1)*YION11[J]-XION11[J]*YION11(J-1))/(XION11(J-1)-XION11[J]) 
      QION(11,I)=(A*EN+B)*1.D-16               
      GO TO 207 
  203 if(EN > XION(NIOND)) GO TO 206
# USE FRACTION OF COUNTING IONISATION ABOVE 600 EV
# FRACTION OF QCOUNT
      QION(11,I)=QCOUNT*0.0745
      GO TO 207
# USE BORN BETHE ABOVE XION(NIOND) EV
  206 QION(11,I)=QBB*0.0745  
  207 CONTINUE
      if(EN < (2.0*EION(11):
)) GO TO 210
      PEQION(11,I)=PEQEL(2,(I-IOFFION(11)))
# H3+
  210 if(EN <= EION(12)) GO TO 220         
      if(EN > XION12(NION12):
) GO TO 213
      DO 211 J=2,NION12                                                 
      if(EN <= XION12[J]:
) GO TO 212                                     
  211 CONTINUE                                                          
      J=NION12                                                          
  212 A=(YION12[J]-YION12(J-1))/(XION12[J]-XION12(J-1))                
      B=(XION12(J-1)*YION12[J]-XION12[J]*YION12(J-1))/(XION12(J-1)-XION12[J]) 
      QION(12,I)=(A*EN+B)*1.D-16               
      GO TO 217 
  213 if(EN > XION(NIOND)) GO TO 216
# USE FRACTION OF COUNTING IONISATION ABOVE 600 EV
# FRACTION OF QCOUNT
      QION(12,I)=QCOUNT*0.0000055
      GO TO 217
# USE BORN BETHE ABOVE XION(NIOND) EV
  216 QION(12,I)=QBB*0.0000055   
  217 CONTINUE
      if(EN < (2.0*EION(12):
)) GO TO 220
      PEQION(12,I)=PEQEL(2,(I-IOFFION(12)))
# CH+
  220 if(EN <= EION(13)) GO TO 230         
      if(EN > XION13(NION13):
) GO TO 223
      DO 221 J=2,NION13                                                 
      if(EN <= XION13[J]:
) GO TO 222                                     
  221 CONTINUE                                                          
      J=NION13                                                          
  222 A=(YION13[J]-YION13(J-1))/(XION13[J]-XION13(J-1))                
      B=(XION13(J-1)*YION13[J]-XION13[J]*YION13(J-1))/(XION13(J-1)-XION13[J]) 
      QION(13,I)=(A*EN+B)*1.D-16               
      GO TO 227 
  223 if(EN > XION(NIOND)) GO TO 226
# USE FRACTION OF COUNTING IONISATION ABOVE 600 EV
# FRACTION OF QCOUNT
      QION(13,I)=QCOUNT*0.00037
      GO TO 227
# USE BORN BETHE ABOVE XION(NIOND) EV
  226 QION(13,I)=QBB*0.00037
  227 CONTINUE
      if(EN < (2.0*EION(13):
)) GO TO 230
      PEQION(13,I)=PEQEL(2,(I-IOFFION(13)))
# C2+
  230 if(EN <= EION(14)) GO TO 240         
      if(EN > XION14(NION14):
) GO TO 233
      DO 231 J=2,NION14                                                 
      if(EN <= XION14[J]:
) GO TO 232                                     
  231 CONTINUE                                                          
      J=NION14                                                          
  232 A=(YION14[J]-YION14(J-1))/(XION14[J]-XION14(J-1))                
      B=(XION14(J-1)*YION14[J]-XION14[J]*YION14(J-1))/(XION14(J-1)-XION14[J]) 
      QION(14,I)=(A*EN+B)*1.D-16               
      GO TO 237 
  233 if(EN > XION(NIOND)) GO TO 236
# USE FRACTION OF COUNTING IONISATION ABOVE 600 EV
# FRACTION OF QCOUNT
      QION(14,I)=QCOUNT*0.000022
      GO TO 237
# USE BORN BETHE ABOVE XION(NIOND) EV
  236 QION(14,I)=QBB*0.000022
  237 CONTINUE
      if(EN < (2.0*EION(14):
)) GO TO 240
      PEQION(14,I)=PEQEL(2,(I-IOFFION(14)))
# C+ 
  240 if(EN <= EION(15)) GO TO 250         
      if(EN > XION15(NION15):
) GO TO 243
      DO 241 J=2,NION15                                                 
      if(EN <= XION15[J]:
) GO TO 242                                     
  241 CONTINUE                                                          
      J=NION15                                                          
  242 A=(YION15[J]-YION15(J-1))/(XION15[J]-XION15(J-1))                
      B=(XION15(J-1)*YION15[J]-XION15[J]*YION15(J-1))/(XION15(J-1)-XION15[J]) 
      QION(15,I)=(A*EN+B)*1.D-16               
      GO TO 247 
  243 if(EN > XION(NIOND)) GO TO 246
# USE FRACTION OF COUNTING IONISATION ABOVE 600 EV
# FRACTION OF QCOUNT
      QION(15,I)=QCOUNT*0.00011 
      GO TO 247
# USE BORN BETHE ABOVE XION(NIOND) EV
  246 QION(15,I)=QBB*0.00011 
  247 CONTINUE
      if(EN < (2.0*EION(15):
)) GO TO 250
      PEQION(15,I)=PEQEL(2,(I-IOFFION(15)))
# CARBON K-SHELL 
  250 if(EN <= EION(16)) GO TO 260         
      DO 251 J=2,NION16                                                 
      if(EN <= XION16[J]:
) GO TO 252                                     
  251 CONTINUE                                                          
      J=NION16                                                          
  252 A=(YION16[J]-YION16(J-1))/(XION16[J]-XION16(J-1))                
      B=(XION16(J-1)*YION16[J]-XION16[J]*YION16(J-1))/(XION16(J-1)-XION16[J]) 
      QION(16,I)=(A*EN+B)*1.D-16               
      if(EN < (2.0*EION(16):
)) GO TO 255
      PEQION(16,I)=PEQEL(2,(I-IOFFION(16)))
# CORRECTION TO INISATION FOR SPLIT OFF KSHELL
  255 QSUM=0.00
      DO 256 L=1,15
  256 QSUM=QSUM+QION(L,I)
      if(QSUM == 0.0):
 GO TO 260
      FAC=(QSUM-QION(16,I))/QSUM
      DO 257 L=1,15
  257 QION(L,I)=QION(L,I)*FAC
# 
# ATTACHMENT TO H-
# 
  260 Q(4,I)=0.0
      QATT(1,I)=0.0
      if(EN < XATT1[1]:
) GO TO 290                                      
      if(EN >= XATT1(NATT1):
) GO TO 290                                
      DO 270 J=2,NATT1                                                  
      if(EN <= XATT1[J]:
) GO TO 280                                     
  270 CONTINUE                                                          
      J=NATT1                                                          
  280 A=(YATT1[J]-YATT1(J-1))/(XATT1[J]-XATT1(J-1))                     
      B=(XATT1(J-1)*YATT1[J]-XATT1[J]*YATT1(J-1))/(XATT1(J-1)-XATT1[J])
      QATT(1,I)=(A*EN+B)*1.D-16  
# ATTACHMENT TO CH2- 
  290 QATT(2,I)=0.0
      if(EN < XATT2[1]:
) GO TO 300                                      
      if(EN >= XATT2(NATT2):
) GO TO 300                                
      DO 291 J=2,NATT2                                                  
      if(EN <= XATT2[J]:
) GO TO 292                                     
  291 CONTINUE                                                          
      J=NATT2                                                          
  292 A=(YATT2[J]-YATT2(J-1))/(XATT2[J]-XATT2(J-1))                     
      B=(XATT2(J-1)*YATT2[J]-XATT2[J]*YATT2(J-1))/(XATT2(J-1)-XATT2[J])
      QATT(2,I)=(A*EN+B)*1.D-16  
#                                     
  300 Q(5,I)=0.0
      Q(6,I)=0.0
# SET ZEROS
      DO 310 L=1,NIN
      QIN(L,I)=0.00
  310 PEQIN(L,I)=0.00
#
# SUPERELASTIC VIBRATION-TORSION         ANISOTROPIC ABOVE 10 EV
      if(EN <= 0.0):
 GO TO 350
      EFAC=math.sqrt(1.0-(EIN[1]/EN))
      QIN(1,I)=0.0045*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      QIN(1,I)=QIN(1,I)*APOP1/(1.0+APOP1)*1.D-16
      if(EN > 10.0):
 PEQIN(1,I)=PEQEL(2,(I-IOFFN[1]))
#
# VIBRATION-TORSION                      ANISOTROPIC ABOVE 10 EV
  350 if(EN <= EIN(2)) GO TO 351
      EFAC=math.sqrt(1.0-(EIN(2)/EN))
      QIN(2,I)=0.0045*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      QIN(2,I)=QIN(2,I)*1.0/(1.0+APOP1)*1.D-16
      if(EN > 10.0):
 PEQIN(2,I)=PEQEL(2,(I-IOFFN(2)))
#
# SUPERELASTIC VIB1                     ANISOTROPIC ABOVE 10 EV
  351 if(EN <= 0.0) GO TO 356
      if((EN+EIN(4):
) > XVIB1(NVIB1)) GO TO 354
      DO 352 J=2,NVIB1
      if((EN+EIN(4):
) <= XVIB1[J]) GO TO 353
  352 CONTINUE
      J=NVIB1
  353 A=(YVIB1[J]-YVIB1(J-1))/(XVIB1[J]-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1[J]-XVIB1[J]*YVIB1(J-1))/(XVIB1(J-1)-XVIB1[J])
      QIN(3,I)=(EN+EIN(4))*(A*(EN+EIN(4))+B)/EN
      GO TO 355
  354 QIN(3,I)=YVIB1(NVIB1)*(XVIB1(NVIB1)/(EN+EIN(4)))**2
  355 QIN(3,I)=QIN(3,I)*APOP2/(1.0+APOP2)*1.D-16
      if(EN > 10.0):
 PEQIN(3,I)=PEQEL(2,(I-IOFFN(3)))
#  VIB1                           ANISOTROPIC ABOVE 10 EV               
  356 if(EN <= EIN(4)) GO TO 361  
      if(EN > XVIB1(NVIB1):
) GO TO 359
      DO 357 J=2,NVIB1                                                  
      if(EN <= XVIB1[J]:
) GO TO 358                                      
  357 CONTINUE                                                          
      J=NVIB1                                                           
  358 A=(YVIB1[J]-YVIB1(J-1))/(XVIB1[J]-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1[J]-XVIB1[J]*YVIB1(J-1))/(XVIB1(J-1)-XVIB1[J]) 
      QIN(4,I)=(A*EN+B)
      GO TO 360 
  359 QIN(4,I)=YVIB1(NVIB1)*(XVIB1(NVIB1)/EN)**2
  360 QIN(4,I)=QIN(4,I)/(1.0+APOP2)*1.D-16   
      if(EN > 10.0):
 PEQIN(4,I)=PEQEL(2,(I-IOFFN(4)))  
# SUPERELASTIC VIB2                       ANISOTROPIC ABOVE 10 EV
  361 if(EN <= 0.0) GO TO 366
      if((EN+EIN(6):
) > XVIB2(NVIB2)) GO TO 364
      DO 362 J=2,NVIB2
      if((EN+EIN(6):
) <= XVIB2[J]) GO TO 363  
  362 CONTINUE
      J=NVIB2
  363 A=(YVIB2[J]-YVIB2(J-1))/(XVIB2[J]-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2[J]-XVIB2[J]*YVIB2(J-1))/(XVIB2(J-1)-XVIB2[J])
      QIN(5,I)=(EN+EIN(6))*(A*(EN+EIN(6))+B)/EN
      GO TO 365
  364 QIN(5,I)=YVIB2(NVIB2)*(XVIB2(NVIB2)/(EN+EIN(6)))**2
  365 QIN(5,I)=QIN(5,I)*APOP3/(1.0+APOP3)*1.D-16
      if(EN > 10.0):
 PEQIN(5,I)=PEQEL(2,(I-IOFFN(5)))
# VIB2                                  ANISOTROPIC ABOVE 10 EV
  366 if(EN <= EIN(6)) GO TO 371
      if(EN > XVIB2(NVIB2):
) GO TO 369                                 
      DO 367 J=2,NVIB2                                                  
      if(EN <= XVIB2[J]:
) GO TO 368                                      
  367 CONTINUE                                                          
      J=NVIB2                                                           
  368 A=(YVIB2[J]-YVIB2(J-1))/(XVIB2[J]-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2[J]-XVIB2[J]*YVIB2(J-1))/(XVIB2(J-1)-XVIB2[J]) 
      QIN(6,I)=(A*EN+B)
      GO TO 370
  369 QIN(6,I)=YVIB2(NVIB2)*(XVIB2(NVIB2)/EN)**2
  370 QIN(6,I)=QIN(6,I)/(1.0+APOP3)*1.D-16
      if(EN > 10.0):
 PEQIN(6,I)=PEQEL(2,(I-IOFFN(6)))       
# SUPERELASTIC VIB3                       ANISOTROPIC ABOVE 10 EV
  371 if(EN <= 0.0) GO TO 376
      if((EN+EIN(8):
) > XVIB3(NVIB3)) GO TO 374
      DO 372 J=2,NVIB3
      if((EN+EIN(8):
) <= XVIB3[J]) GO TO 373  
  372 CONTINUE
      J=NVIB3
  373 A=(YVIB3[J]-YVIB3(J-1))/(XVIB3[J]-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3[J]-XVIB3[J]*YVIB3(J-1))/(XVIB3(J-1)-XVIB3[J])
      QIN(7,I)=(EN+EIN(8))*(A*(EN+EIN(8))+B)/EN
      GO TO 375
  374 QIN(7,I)=YVIB3(NVIB3)*(XVIB3(NVIB3)/(EN+EIN(8)))**2
  375 QIN(7,I)=QIN(7,I)*APOP4/(1.0+APOP4)*1.D-16
      if(EN > 10.0):
 PEQIN(7,I)=PEQEL(2,(I-IOFFN(7)))
# VIB3                                  ANISOTROPIC ABOBE 10 EV
  376 if(EN <= EIN(8)) GO TO 381   
      if(EN > XVIB3(NVIB3):
) GO TO 379
      DO 377 J=2,NVIB3                                                  
      if(EN <= XVIB3[J]:
) GO TO 378                                      
  377 CONTINUE                                                          
      J=NVIB3                                                           
  378 A=(YVIB3[J]-YVIB3(J-1))/(XVIB3[J]-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3[J]-XVIB3[J]*YVIB3(J-1))/(XVIB3(J-1)-XVIB3[J]) 
      QIN(8,I)=(A*EN+B)
      GO TO 380
  379 QIN(8,I)=YVIB3(NVIB3)*(XVIB3(NVIB3)/EN)**2    
  380 QIN(8,I)=QIN(8,I)/(1.0+APOP4)*1.D-16
      if(EN > 10.0):
 PEQIN(8,I)=PEQEL(2,(I-IOFFN(8)))    
# VIB4                                      ANISOTROPIC ABOVE 10 EV
  381 if(EN <= EIN(9)) GO TO 386 
      if(EN > XVIB4(NVIB4):
) GO TO 384        
      DO 382 J=2,NVIB4                                                  
      if(EN <= XVIB4[J]:
) GO TO 383                                      
  382 CONTINUE                                                          
      J=NVIB4                                                           
  383 A=(YVIB4[J]-YVIB4(J-1))/(XVIB4[J]-XVIB4(J-1))                     
      B=(XVIB4(J-1)*YVIB4[J]-XVIB4[J]*YVIB4(J-1))/(XVIB4(J-1)-XVIB4[J]) 
      QIN(9,I)=(A*EN+B)*1.D-16
      GO TO 385
  384 QIN(9,I)=YVIB4(NVIB4)*(XVIB4(NVIB4)/EN)**2*1.D-16
  385 if(EN > 10.0) PEQIN(9,I)=PEQEL(2,(I-IOFFN(9)))     
# VIB HARMONICS                           ANISOTROPIC ABOVE 10 EV   
  386 if(EN <= EIN(10)) GO TO 391   
      if(EN > XVIB5(NVIB5):
) GO TO 389    
      DO 387 J=2,NVIB5                                                  
      if(EN <= XVIB5[J]:
) GO TO 388                                      
  387 CONTINUE                                                          
      J=NVIB5                                                           
  388 A=(YVIB5[J]-YVIB5(J-1))/(XVIB5[J]-XVIB5(J-1))                     
      B=(XVIB5(J-1)*YVIB5[J]-XVIB5[J]*YVIB5(J-1))/(XVIB5(J-1)-XVIB5[J]) 
      QIN(10,I)=(A*EN+B)*1.D-16 
      GO TO 390 
  389 QIN(10,I)=YVIB5(NVIB5)*(XVIB5(NVIB5)/EN)**2*1.D-16        
  390 if(EN > 10.0) PEQIN(10,I)=PEQEL(2,(I-IOFFN(10)))
  391 CONTINUE 
#  
# EXCITATION TO TRIPLET AND SINGLET LEVELS
#
# FIRST TRIPLET AT  6.85 EV
      if(EN <= EIN(11):
) GO TO 405
      if(EN > XTR1(NTR1):
) GO TO 403                                   
      DO 401 J=2,NTR1                                              
      if(EN <= XTR1[J]:
) GO TO 402                                  
  401 CONTINUE                                                          
      J=NTR1                                       
  402 A=(YTR1[J]-YTR1(J-1))/(XTR1[J]-XTR1(J-1))                    
      B=(XTR1(J-1)*YTR1[J]-XTR1[J]*YTR1(J-1))/(XTR1(J-1)-XTR1[J])       
      QIN(11,I)=(A*EN+B)*1.D-16     
      GO TO 404
# SCALE BY 1/E**2 ABOVE XTR1(NTR1) EV
  403 QIN(11,I)=YTR1(NTR1)*(XTR1(NTR1)/EN)**2*1.D-16
  404 if(EN <= (3.0*EIN(11))) GO TO 405
      PEQIN(11,I)=PEQEL(2,(I-IOFFN(11)))
#
# SINGLET DISSOCIATION AT  7.93  EV     BEF SCALING F=.000136          
  405 if(EN <= (EIN(12))) GO TO 406
      QIN(12,I)=0.000136/(EIN(12)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(12)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(12)+E(3))
      if(QIN(12,I):
 < 0.0) QIN(12,I)=0.0
      if(EN <= (3.0*EIN(12):
)) GO TO 406
      PEQIN(12,I)=PEQEL(2,(I-IOFFN(12)))
# 
# SECOND TRIPLET AT  8.00 EV                                   
  406 if(EN <= EIN(13)) GO TO 411
      if(EN > XTR2(NTR2):
) GO TO 409  
      DO 407 J=2,NTR2                                                  
      if(EN <= XTR2[J]:
) GO TO 408                                      
  407 CONTINUE                                                          
      J=NTR2                                                           
  408 A=(YTR2[J]-YTR2(J-1))/(XTR2[J]-XTR2(J-1))                     
      B=(XTR2(J-1)*YTR2[J]-XTR2[J]*YTR2(J-1))/(XTR2(J-1)-XTR2[J]) 
      QIN(13,I)=(A*EN+B)*1.D-16
      GO TO 410
# SCALE BY 1/E**2 ABOVE XTR2(NTR2) EV
  409 QIN(13,I)=YTR2(NTR2)*(XTR2(NTR2)/EN)**2*1.D-16
  410 if(EN <= (3.0*EIN(13))) GO TO 411
      PEQIN(13,I)=PEQEL(2,(I-IOFFN(13)))
#
# SINGLET DISSOCIATION AT  8.15  EV     BEF SCALING F=.001744
  411 if(EN <= (EIN(14))) GO TO 412
      QIN(14,I)=0.001744/(EIN(14)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(14)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(14)+E(3))
      if(QIN(14,I):
 < 0.0) QIN(14,I)=0.0
      if(EN <= (3.0*EIN(14):
)) GO TO 412
      PEQIN(14,I)=PEQEL(2,(I-IOFFN(14)))
# SINGLET DISSOCIATION AT  8.48  EV     BEF SCALING F=.008187
  412 if(EN <= (EIN(15))) GO TO 413
      QIN(15,I)=0.008187/(EIN(15)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(15)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(15)+E(3))
      if(QIN(15,I):
 < 0.0) QIN(15,I)=0.0
      if(EN <= (3.0*EIN(15):
)) GO TO 413
      PEQIN(15,I)=PEQEL(2,(I-IOFFN(15)))
# SINGLET DISSOCIATION AT  8.723 EV     BEF SCALING F=.006312
  413 if(EN <= (EIN(16))) GO TO 414
      QIN(16,I)=0.006312/(EIN(16)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(16)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(16)+E(3))
      if(QIN(16,I):
 < 0.0) QIN(16,I)=0.0
      if(EN <= (3.0*EIN(16):
)) GO TO 414
      PEQIN(16,I)=PEQEL(2,(I-IOFFN(16)))
# SINGLET DISSOCIATION AT  8.865 EV     BEF SCALING F=.011877
  414 if(EN <= (EIN(17))) GO TO 415
      QIN(17,I)=0.011877/(EIN(17)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(17)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(17)+E(3))
      if(QIN(17,I):
 < 0.0) QIN(17,I)=0.0
      if(EN <= (3.0*EIN(17):
)) GO TO 415
      PEQIN(17,I)=PEQEL(2,(I-IOFFN(17)))
# SINGLET DISSOCIATION AT  9.007 EV     BEF SCALING F=.020856
  415 if(EN <= (EIN(18))) GO TO 416
      QIN(18,I)=0.020856/(EIN(18)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(18)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(18)+E(3))
      if(QIN(18,I):
 < 0.0) QIN(18,I)=0.0
      if(EN <= (3.0*EIN(18):
)) GO TO 416
      PEQIN(18,I)=PEQEL(2,(I-IOFFN(18)))
# SINGLET DISSOCIATION AT  9.149 EV     BEF SCALING F=.031444
  416 if(EN <= (EIN(19))) GO TO 417
      QIN(19,I)=0.031444/(EIN(19)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(19)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(19)+E(3))
      if(QIN(19,I):
 < 0.0) QIN(19,I)=0.0
      if(EN <= (3.0*EIN(19):
)) GO TO 417
      PEQIN(19,I)=PEQEL(2,(I-IOFFN(19)))
# SINGLET DISSOCIATION AT  9.291 EV     BEF SCALING F=.039549
  417 if(EN <= (EIN(21))) GO TO 418
      QIN(20,I)=0.039549/(EIN(20)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(20)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(20)+E(3))
      if(QIN(20,I):
 < 0.0) QIN(20,I)=0.0
      if(EN <= (3.0*EIN(20):
)) GO TO 418
      PEQIN(20,I)=PEQEL(2,(I-IOFFN(20)))
# SINGLET DISSOCIATION AT  9.433 EV     BEF SCALING F=.042350
  418 if(EN <= (EIN(21))) GO TO 419
      QIN(21,I)=0.042350/(EIN(21)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(21)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(21)+E(3))
      if(QIN(21,I):
 < 0.0) QIN(21,I)=0.0
      if(EN <= (3.0*EIN(21):
)) GO TO 419
      PEQIN(21,I)=PEQEL(2,(I-IOFFN(21)))
# SINGLET DISSOCIATION AT  9.575 EV     BEF SCALING F=.041113
  419 if(EN <= (EIN(22))) GO TO 420
      QIN(22,I)=0.041113/(EIN(22)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(22)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(22)+E(3))
      if(QIN(22,I):
 < 0.0) QIN(22,I)=0.0
      if(EN <= (3.0*EIN(22):
)) GO TO 420
      PEQIN(22,I)=PEQEL(2,(I-IOFFN(22)))
# SINGLET DISSOCIATION AT  9.717 EV     BEF SCALING F=.038256
  420 if(EN <= (EIN(23))) GO TO 421
      QIN(23,I)=0.038256/(EIN(23)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(23)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(23)+E(3))
      if(QIN(23,I):
 < 0.0) QIN(23,I)=0.0
      if(EN <= (3.0*EIN(23):
)) GO TO 421
      PEQIN(23,I)=PEQEL(2,(I-IOFFN(23)))
# SINGLET DISSOCIATION AT  9.859 EV     BEF SCALING F=.036556
  421 if(EN <= (EIN(24))) GO TO 422
      QIN(24,I)=0.036556/(EIN(24)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(24)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(24)+E(3))
      if(QIN(24,I):
 < 0.0) QIN(24,I)=0.0
      if(EN <= (3.0*EIN(24):
)) GO TO 422
      PEQIN(24,I)=PEQEL(2,(I-IOFFN(24)))
#
# THIRD TRIPLET AT 10.0 EV                                   
  422 if(EN <= EIN(25)) GO TO 427
      if(EN > XTR3(NTR3):
) GO TO 425  
      DO 423 J=2,NTR3                                                  
      if(EN <= XTR3[J]:
) GO TO 424                                      
  423 CONTINUE                                                          
      J=NTR3                                                           
  424 A=(YTR3[J]-YTR3(J-1))/(XTR3[J]-XTR3(J-1))                     
      B=(XTR3(J-1)*YTR3[J]-XTR3[J]*YTR3(J-1))/(XTR3(J-1)-XTR3[J]) 
      QIN(25,I)=(A*EN+B)*1.D-16
      GO TO 426
# SCALE BY 1/E**2 ABOVE XTR2(NTR2) EV
  425 QIN(25,I)=YTR3(NTR3)*(XTR3(NTR3)/EN)**2*1.D-16
  426 if(EN <= (3.0*EIN(25))) GO TO 427
      PEQIN(25,I)=PEQEL(2,(I-IOFFN(25)))
#
# SINGLET DISSOCIATION AT 10.115 EV     BEF SCALING F=.096232
  427 if(EN <= (EIN(26))) GO TO 428
      QIN(26,I)=0.096232/(EIN(26)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(26)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(26)+E(3))
      if(QIN(26,I):
 < 0.0) QIN(26,I)=0.0
      if(EN <= (3.0*EIN(26):
)) GO TO 428
      PEQIN(26,I)=PEQEL(2,(I-IOFFN(26)))
# SINGLET DISSOCIATION AT 10.45  EV     BEF SCALING F=.083738
  428 if(EN <= (EIN(27))) GO TO 429
      QIN(27,I)=0.083738/(EIN(27)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(27)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(27)+E(3))
      if(QIN(27,I):
 < 0.0) QIN(27,I)=0.0
      if(EN <= (3.0*EIN(27):
)) GO TO 429
      PEQIN(27,I)=PEQEL(2,(I-IOFFN(27)))
# SINGLET DISSOCIATION AT 10.672 EV     BEF SCALING F=.043456
  429 if(EN <= (EIN(28))) GO TO 430
      QIN(28,I)=0.043456/(EIN(28)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(28)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(28)+E(3))
      if(QIN(28,I):
 < 0.0) QIN(28,I)=0.0
      if(EN <= (3.0*EIN(28):
)) GO TO 430
      PEQIN(28,I)=PEQEL(2,(I-IOFFN(28)))
# SINGLET DISSOCIATION AT 10.816 EV     BEF SCALING F=.047436
  430 if(EN <= (EIN(29))) GO TO 431
      QIN(29,I)=0.047436/(EIN(29)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(29)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(29)+E(3))
      if(QIN(29,I):
 < 0.0) QIN(29,I)=0.0
      if(EN <= (3.0*EIN(29):
)) GO TO 431
      PEQIN(29,I)=PEQEL(2,(I-IOFFN(29)))
# SINGLET DISSOCIATION AT 10.960 EV     BEF SCALING F=.047800
  431 if(EN <= (EIN(30))) GO TO 432
      QIN(30,I)=0.047800/(EIN(30)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(30)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(30)+E(3))
      if(QIN(30,I):
 < 0.0) QIN(30,I)=0.0
      if(EN <= (3.0*EIN(30):
)) GO TO 432
      PEQIN(30,I)=PEQEL(2,(I-IOFFN(30)))
# SINGLET DISSOCIATION AT 11.104 EV     BEF SCALING F=.048914
  432 if(EN <= (EIN(31))) GO TO 433
      QIN(31,I)=0.048914/(EIN(31)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(31)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(31)+E(3))
      if(QIN(31,I):
 < 0.0) QIN(31,I)=0.0
      if(EN <= (3.0*EIN(31):
)) GO TO 433
      PEQIN(31,I)=PEQEL(2,(I-IOFFN(31)))
# SINGLET DISSOCIATION AT 11.248 EV     BEF SCALING F=.054353
  433 if(EN <= (EIN(32))) GO TO 434
      QIN(32,I)=0.054353/(EIN(32)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(32)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(32)+E(3))
      if(QIN(32,I):
 < 0.0) QIN(32,I)=0.0
      if(EN <= (3.0*EIN(32):
)) GO TO 434
      PEQIN(32,I)=PEQEL(2,(I-IOFFN(32)))
# SINGLET DISSOCIATION AT 11.392 EV     BEF SCALING F=.061019
  434 if(EN <= (EIN(33))) GO TO 435
      QIN(33,I)=0.061019/(EIN(33)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(33)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(33)+E(3))
      if(QIN(33,I):
 < 0.0) QIN(33,I)=0.0
      if(EN <= (3.0*EIN(33):
)) GO TO 435
      PEQIN(33,I)=PEQEL(2,(I-IOFFN(33)))
# SINGLET DISSOCIATION AT 11.732 EV     BEF SCALING F=.244430
  435 if(EN <= (EIN(34))) GO TO 436
      QIN(34,I)=0.244430/(EIN(34)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(34)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(34)+E(3))
      if(QIN(34,I):
 < 0.0) QIN(34,I)=0.0
      if(EN <= (3.0*EIN(34):
)) GO TO 436
      PEQIN(34,I)=PEQEL(2,(I-IOFFN(34)))
# SINGLET DISSOCIATION AT 12.4   EV     BEF SCALING F=.284790
  436 if(EN <= (EIN(35))) GO TO 437
      QIN(35,I)=0.284790/(EIN(35)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(35)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(35)+E(3))
      if(QIN(35,I):
 < 0.0) QIN(35,I)=0.0
      if(EN <= (2.0*EIN(35):
)) GO TO 437
      PEQIN(35,I)=PEQEL(2,(I-IOFFN(35)))
# SINGLET DISSOCIATION AT 13.0   EV     BEF SCALING F=.095973
  437 if(EN <= (EIN(36))) GO TO 438
      QIN(36,I)=0.095973/(EIN(36)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(36)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(36)+E(3))
      if(QIN(36,I):
 < 0.0) QIN(36,I)=0.0
      if(EN <= (2.0*EIN(36):
)) GO TO 438
      PEQIN(36,I)=PEQEL(2,(I-IOFFN(36)))
# SINGLET DISSOCIATION AT 13.5   EV     BEF SCALING F=.090728
  438 if(EN <= (EIN(37))) GO TO 439
      QIN(37,I)=0.090728/(EIN(37)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(37)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(37)+E(3))
      if(QIN(37,I):
 < 0.0) QIN(37,I)=0.0
      if(EN <= (2.0*EIN(37):
)) GO TO 439
      PEQIN(37,I)=PEQEL(2,(I-IOFFN(37)))
# SINGLET DISSOCIATION AT 14.1   EV     BEF SCALING F=.071357
  439 if(EN <= (EIN(38))) GO TO 440
      QIN(38,I)=0.071357/(EIN(38)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(38)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(38)+E(3))
      if(QIN(38,I):
 < 0.0) QIN(38,I)=0.0
      if(EN <= (2.0*EIN(38):
)) GO TO 440
      PEQIN(38,I)=PEQEL(2,(I-IOFFN(38)))
# SINGLET DISSOCIATION AT 14.7   EV     BEF SCALING F=.074875
  440 if(EN <= (EIN(39))) GO TO 441
      QIN(39,I)=0.074875/(EIN(39)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(39)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(39)+E(3))
      if(QIN(39,I):
 < 0.0) QIN(39,I)=0.0
      if(EN <= (2.0*EIN(39):
)) GO TO 441
      PEQIN(39,I)=PEQEL(2,(I-IOFFN(39)))
# SINGLET DISSOCIATION AT 15.3   EV     BEF SCALING F=.054542
  441 if(EN <= (EIN(40))) GO TO 442
      QIN(40,I)=0.054542/(EIN(40)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(40)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(40)+E(3))
      if(QIN(40,I):
 < 0.0) QIN(40,I)=0.0
      if(EN <= (2.0*EIN(40):
)) GO TO 442
      PEQIN(40,I)=PEQEL(2,(I-IOFFN(40)))
# SINGLET DISSOCIATION AT 15.9   EV     BEF SCALING F=.022479
  442 if(EN <= (EIN(41))) GO TO 443
      QIN(41,I)=0.022479/(EIN(41)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(41)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(41)+E(3))
      if(QIN(41,I):
 < 0.0) QIN(41,I)=0.0
      if(EN <= (2.0*EIN(41):
)) GO TO 443
      PEQIN(41,I)=PEQEL(2,(I-IOFFN(41)))
# SINGLET DISSOCIATION AT 16.5   EV     BEF SCALING F=.008585
  443 if(EN <= (EIN(42))) GO TO 444
      QIN(42,I)=0.008585/(EIN(42)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(42)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(42)+E(3))
      if(QIN(42,I):
 < 0.0) QIN(42,I)=0.0
      if(EN <= (2.0*EIN(42):
)) GO TO 444
      PEQIN(42,I)=PEQEL(2,(I-IOFFN(42)))
# SINGLET DISSOCIATION AT 17.1   EV     BEF SCALING F=.004524
  444 if(EN <= (EIN(43))) GO TO 445
      QIN(43,I)=0.004524/(EIN(43)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(43)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(43)+E(3))
      if(QIN(43,I):
 < 0.0) QIN(43,I)=0.0
      if(EN <= (2.0*EIN(43):
)) GO TO 445
      PEQIN(43,I)=PEQEL(2,(I-IOFFN(43)))
# SINGLET DISSOCIATION AT 17.7   EV     BEF SCALING F=.004982
  445 if(EN <= (EIN(44))) GO TO 446
      QIN(44,I)=0.004982/(EIN(44)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(44)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(44)+E(3))
      if(QIN(44,I):
 < 0.0) QIN(44,I)=0.0
      if(EN <= (2.0*EIN(44):
)) GO TO 446
      PEQIN(44,I)=PEQEL(2,(I-IOFFN(44)))
# SINGLET DISSOCIATION AT 18.5   EV     BEF SCALING F=.010130
  446 if(EN <= (EIN(45))) GO TO 447
      QIN(45,I)=0.010130/(EIN(45)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(45)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(45)+E(3))
      if(QIN(45,I):
 < 0.0) QIN(45,I)=0.0
      if(EN <= (2.0*EIN(45):
)) GO TO 447
      PEQIN(45,I)=PEQEL(2,(I-IOFFN(45)))
# SINGLET DISSOCIATION AT 19.5   EV     BEF SCALING F=.013320
  447 if(EN <= (EIN(46))) GO TO 448
      QIN(46,I)=0.013320/(EIN(46)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(46)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(46)+E(3))
      if(QIN(46,I):
 < 0.0) QIN(46,I)=0.0
      if(EN <= (2.0*EIN(46):
)) GO TO 448
      PEQIN(46,I)=PEQEL(2,(I-IOFFN(46)))
# SINGLET DISSOCIATION AT 20.5   EV     BEF SCALING F=.013310
  448 if(EN <= (EIN(47))) GO TO 449
      QIN(47,I)=0.013310/(EIN(47)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(47)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(47)+E(3))
      if(QIN(47,I):
 < 0.0) QIN(47,I)=0.0
      if(EN <= (2.0*EIN(47):
)) GO TO 449
      PEQIN(47,I)=PEQEL(2,(I-IOFFN(47)))
# SINGLET DISSOCIATION AT 21.5   EV     BEF SCALING F=.010760
  449 if(EN <= (EIN(48))) GO TO 450
      QIN(48,I)=0.010760/(EIN(48)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(48)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(48)+E(3))
      if(QIN(48,I):
 < 0.0) QIN(48,I)=0.0
      if(EN <= (2.0*EIN(48):
)) GO TO 450
      PEQIN(48,I)=PEQEL(2,(I-IOFFN(48)))
# SINGLET DISSOCIATION AT 22.5   EV     BEF SCALING F=.009797
  450 if(EN <= (EIN(49))) GO TO 451
      QIN(49,I)=0.009797/(EIN(49)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(49)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(49)+E(3))
      if(QIN(49,I):
 < 0.0) QIN(49,I)=0.0
      if(EN <= (2.0*EIN(49):
)) GO TO 451
      PEQIN(49,I)=PEQEL(2,(I-IOFFN(49)))
# SINGLET DISSOCIATION AT 23.5   EV     BEF SCALING F=.009198
  451 if(EN <= (EIN(50))) GO TO 452
      QIN(50,I)=0.009198/(EIN(50)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(50)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(50)+E(3))
      if(QIN(50,I):
 < 0.0) QIN(50,I)=0.0
      if(EN <= (2.0*EIN(50):
)) GO TO 452
      PEQIN(50,I)=PEQEL(2,(I-IOFFN(50)))
# SINGLET DISSOCIATION AT 24.5   EV     BEF SCALING F=.008312
  452 if(EN <= (EIN(51))) GO TO 453
      QIN(51,I)=0.008312/(EIN(51)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(51)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(51)+E(3))
      if(QIN(51,I):
 < 0.0) QIN(51,I)=0.0
      if(EN <= (2.0*EIN(51):
)) GO TO 453
      PEQIN(51,I)=PEQEL(2,(I-IOFFN(51)))
# SINGLET DISSOCIATION AT 25.5   EV     BEF SCALING F=.007139
  453 if(EN <= (EIN(52))) GO TO 454
      QIN(52,I)=0.007139/(EIN(52)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(52)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(52)+E(3))
      if(QIN(52,I):
 < 0.0) QIN(52,I)=0.0
      if(EN <= (2.0*EIN(52):
)) GO TO 454
      PEQIN(52,I)=PEQEL(2,(I-IOFFN(52)))
# SINGLET DISSOCIATION AT 26.5   EV     BEF SCALING F=.004715
  454 if(EN <= (EIN(53))) GO TO 455
      QIN(53,I)=0.004715/(EIN(53)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(53)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(53)+E(3))
      if(QIN(53,I):
 < 0.0) QIN(53,I)=0.0
      if(EN <= (2.0*EIN(53):
)) GO TO 455
      PEQIN(53,I)=PEQEL(2,(I-IOFFN(53)))
# SINGLET DISSOCIATION AT 27.5   EV     BEF SCALING F=.002137
  455 if(EN <= (EIN(54))) GO TO 456
      QIN(54,I)=0.002137/(EIN(54)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(54)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(54)+E(3))
      if(QIN(54,I):
 < 0.0) QIN(54,I)=0.0
      if(EN <= (2.0*EIN(54):
)) GO TO 456
      PEQIN(54,I)=PEQEL(2,(I-IOFFN(54)))
# SINGLET DISSOCIATION AT 28.5   EV     BEF SCALING F=.000662
  456 if(EN <= (EIN(55))) GO TO 457
      QIN(55,I)=0.000662/(EIN(55)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(55)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(55)+E(3))
      if(QIN(55,I):
 < 0.0) QIN(55,I)=0.0
      if(EN <= (2.0*EIN(55):
)) GO TO 457
      PEQIN(55,I)=PEQEL(2,(I-IOFFN(55)))
  457 CONTINUE
# LOAD BREMSSTRAHLUNG X-SECTION
      QIN(56,I)=0.0
      QIN(57,I)=0.0
      if(EN <= 1000.):
 GO TO 800
      DO 780 J=2,NBRM
      if(EN <= EBRM[J]:
) GO TO 790
  780 CONTINUE
      J=NBREM
  790 A=(math.log(Z6T[J])-math.log(Z6T(J-1)))/(EBRM[J]-EBRM(J-1))
      B=(math.log(Z6T[J])*EBRM(J-1)-math.log(Z6T(J-1))*EBRM[J])/(EBRM(J-1)-EBRM[J])
      A1=(math.log(Z1T[J])-math.log(Z1T(J-1)))/(EBRM[J]-EBRM(J-1))
      B1=(math.log(Z1T[J])*EBRM(J-1)-math.log(Z1T(J-1))*EBRM[J])/(EBRM(J-1)-EBRM[J])
      QIN(56,I)=math.exp(A*EN+B)*2.D-24
      QIN(57,I)=math.exp(A1*EN+B1)*6.D-24
  800 CONTINUE
#
#  LOAD NULL COLLISIONS
#
# WINTERS DISSOCIATION X-SECTION       REDUCED BY * 0.9
c WINTERS  CHEM.PHYS. 36(1979)353
      QNULL(1,I)=0.0
      if(EN <= XNUL1[1]:
) GO TO 805
      if(EN > XNUL1(NUL1):
) GO TO 803
      DO 801 J=2,NUL1
      if(EN <= XNUL1[J]:
) GO TO 802
  801 CONTINUE
      J=NUL1
  802 A=(YNUL1[J]-YNUL1(J-1))/(XNUL1[J]-XNUL1(J-1))
      B=(XNUL1(J-1)*YNUL1[J]-XNUL1[J]*YNUL1(J-1))/(XNUL1(J-1)-XNUL1[J])
      QNULL(1,I)=(A*EN+B)*1.D-16*0.9*SCLN[1]    
      GO TO 805
# SCALE BY 1/E ABOVE XNUL1(NUL1)) EV
  803 QNULL(1,I)=YNUL1(NUL1)*(XNUL1(NUL1)/EN)*1.D-16*0.9*SCLN[1]    
#
# LIGHT EMISSION FROM H ALPHA   
#  MOHLMANN AND DE HEER  CHEM.PHYS.19(1979)233 
#  
  805 QNULL(2,I)=0.0
      if(EN <= XNUL2[1]:
) GO TO 810
      if(EN > XNUL2(NUL2):
) GO TO 808
      DO 806 J=2,NUL2
      if(EN <= XNUL2[J]:
) GO TO 807
  806 CONTINUE
      J=NUL2
  807 A=(YNUL2[J]-YNUL2(J-1))/(XNUL2[J]-XNUL2(J-1))
      B=(XNUL2(J-1)*YNUL2[J]-XNUL2[J]*YNUL2(J-1))/(XNUL2(J-1)-XNUL2[J])
      QNULL(2,I)=(A*EN+B)*1.D-16*SCLN(2)
      GO TO 810
# SCALE BY 1/E ABOVE XNUL2(NUL2)) EV
  808 QNULL(2,I)=YNUL2(NUL2)*(XNUL2(NUL2)/EN)*1.D-16*SCLN(2)  
#  
# LIGHT EMISSION FROM CH2(A2DELTA - X2PI)
#  MOHLMANN AND DE HEER  CHEM.PHYS.19(1979)233 
#  
  810 QNULL(3,I)=0.0
      if(EN <= XNUL3[1]:
) GO TO 815
      if(EN > XNUL3(NUL3):
) GO TO 813
      DO 811 J=2,NUL3
      if(EN <= XNUL3[J]:
) GO TO 812
  811 CONTINUE
      J=NUL3
  812 A=(YNUL3[J]-YNUL3(J-1))/(XNUL3[J]-XNUL3(J-1))
      B=(XNUL3(J-1)*YNUL3[J]-XNUL3[J]*YNUL3(J-1))/(XNUL3(J-1)-XNUL3[J])
      QNULL(3,I)=(A*EN+B)*1.D-16*SCLN(3)
      GO TO 815
# SCALE BY 1/E ABOVE XNUL3(NUL3)) EV
  813 QNULL(3,I)=YNUL3(NUL3)*(XNUL3(NUL3)/EN)*1.D-16*SCLN(3)    
#
  815 CONTINUE
      SUMEXC=0.0
      DO 850 J=1,NIN
  850 SUMEXC=SUMEXC+QIN[J][I]
      SUMION=0.0
      DO 851 J=1,NION
  851 SUMION=SUMION+QION[J][I]
      SUMATT=0.0
#     DO 852 J=1,NATT
# 852 SUMATT=SUMATT+QATT[J][I]
      SUMINEL=SUMEXC+SUMION+SUMATT
c     WRITE(6,888) EN,SUMEXC,SUMION,SUMINEL
c 888 print(' EN=','%.3f' %,' SUMEXC=','%.3f' %,' SUMION=','%.3f' %,'SUMINEL=',
c    /'%.3f' %)
 1000 CONTINUE                                                          
#  SAVE COMPUTE TIME 
      DO 1010 K=1,NIN
      if(EFINAL <= EIN[K]:
) :
       NIN=K-1
       GO TO 1011
      # endif
 1010 CONTINUE
 1011 CONTINUE
      if(EFINAL > 1000.):
 NIN=57
#                                      
      RETURN  
      # end  
      def GAS10(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000)
      COMMON/DENS/DEN(20000)
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6)  
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)       
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]  
#
      DIMENSION XEN(166),YMT(166),YEL(166),YEPS(166),XION(45),YIONG(45),YIONC(45),XION1(45),YION1(45),XION2(45),YION2(45),XION3(45),YION3(45),XION4(45),YION4(45),XION5(45),YION5(45),XION6(44),YION6(44),XION7(44),YION7(44),XION8(44),YION8(44),XION9(44),YION9(44),XION10(44),YION10(44),XION11(43),YION11(43),XION12(41),YION12(41),XION13(41),YION13(41),XION14(40),YION14(40),XION15(39),YION15(39),XION16(39),YION16(39),XION17(39),YION17(39),XION18(38),YION18(38),XION19(39),YION19(39),XION20(38),YION20(38),XION21(36),YION21(36),XION22(36),YION22(36),XION23(36),YION23(36),XION24(83),YION24(83),XATT1(9),YATT1(9),XATT2(9),YATT2(9),  XVIB1(25),YVIB1(25),XVIB2(24),YVIB2(24),XVIB3(25),YVIB3(25),      XVIB4(17),YVIB4(17),XTR1(14),YTR1(14),XTR2(11),YTR2(11),XTR3(11),YTR3(11),XTR4(11),YTR4(11),IOFFION(24),IOFFN(250)
      DIMENSION XNUL1(14),YNUL1(14),XNUL2(14),YNUL2(14)
      DIMENSION Z1T(25),Z6T(25),EBRM(25)
      CHARACTER*50 SCRPT(300),SCRPTN(10)
      CHARACTER*25 NAME                                                 
      DATA XEN/0.00,0.001,0.002,0.003,0.004,0.005,0.007,0.01,0.014,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.10,0.11,0.12,                0.13,0.14,0.16,0.18,0.20,0.22,0.24,0.27,0.30,0.35,0.40,0.50,0.60,0.80,1.00,1.40,2.00,2.50,3.00,3.50,4.00,5.00,6.00,7.00,7.50,8.50,10.0,12.5,15.0,17.5,20.0,25.0,30.0,35.0,40.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,6000.,7000.,8000.,9000.,1.0D4,1.25D4,1.5D4,1.75D4,2.0D4,2.5'%.3f' %.0'%.3f' %.5D4,4.0D4,4.5D4,5.0D4,6.0D4,7.0D4,8.0D4,9.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5'%.3f' %.0'%.3f' %.5D5,4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,2.0D6,2.5'%.3f' %.0'%.3f' %.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5'%.3f' %.0'%.3f' %.5D7,4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,1.0D8,1.25D8,1.5D8,1.75D8,2.0D8,2.5'%.3f' %.0'%.3f' %.5D8,4.0D8,4.5D8,5.0D8,6.0D8,7.0D8,8.0D8,9.0D8,1.0D9/
# ELASTIC MT : ABOVE 250EV FROM THEORY
#              BELOW 250EV FIT TO TRANSPORT DATA
      DATA YMT/50.9,50.9,42.6,37.0,33.3,29.6,25.5,20.8,18.0,15.3,13.1,11.6,10.4,9.08,7.79,6.36,5.03,3.61,2.85,2.52,2.47,2.47,2.75,3.23,3.94,4.80,5.40,6.45,7.35,8.35,9.07,10.05,10.9,11.8,12.3,12.8,13.6,14.4,15.7,17.5,19.5,23.3,27.2,29.0,29.0,28.0,25.5,21.5,18.5,17.0,15.5,12.8,11.0,9.50,8.40,6.90,5.80,5.00,4.40,4.00,3.60,2.85,2.27,1.85,1.59,1.22,.921,.725,.587,.486,.410,.304,.236,.188,.154,.129,.0878,.0639,.0488,.0386,.0260,.0188,.0143,.0112,9.08D-3,7.51D-3,5.41D-3,4.09D-3,3.21D-3,2.59D-3,2.14D-3,1.43D-3,1.03D-3,7.76D-4,6.08D-4,4.06D-4,2.92D-4,2.21D-4,1.74D-4,1.41D-4,1.17D-4,8.42D-5,6.41D-5,5.06D-5,4.12D-5,3.43D-5,2.33D-5,1.71D-5,1.32D-5,1.06D-5,7.32D-6,5.45D-6,4.26D-6,3.46D-6,2.87D-6,2.44D-6,1.84D-6,1.45D-6,1.19D-6,9.91D-7,8.44D-7,6.04D-7,4.55D-7,3.58D-7,2.90D-7,2.03D-7,1.51D-7,1.17D-7,9.36D-8,7.68D-8,6.42D-8,4.70D-8,3.60D-8,2.85D-8,2.31D-8,1.92D-8,1.29D-8,9.27D-9,7.01D-9,5.49D-9,3.64D-9,2.60D-9,1.95D-9,1.52D-9,1.22D-9,9.98D-10,7.06D-10,5.25D-10,4.06D-10,3.23D-10,2.63D-10,1.70D-10,1.19D-10,8.76D-11,6.72D-11,4.31D-11,3.00D-11,2.20D-11,1.69D-11,1.33D-11,1.08D-11,7.51D-12,5.52D-12,4.23D-12,3.34D-12,2.71D-12/
# ELASTIC: ABOVE 150EV FROM THEORY 
#            BETWEEN 0.5 AND 150 EV FROM CONSISTENCY IN TOTAL X-SECTION
#           BELOW 0.5EV SIMILAR TO MERZ AND  LINDER
      DATA YEL/50.9,50.9,42.6,37.0,33.0,29.6,25.5,20.8,18.4,16.4,14.2,12.6,11.4,10.5,9.70,9.00,8.30,7.70,7.10,6.60,6.20,5.80,5.50,6.15,6.85,7.60,8.20,9.00,9.70,10.5,11.3,12.1,12.7,13.1,14.1,15.5,17.4,18.7,20.5,22.0,24.6,30.8,37.7,41.2,42.9,44.6,42.8,38.5,35.8,33.4,31.3,27.5,24.7,22.8,21.3,19.1,17.2,15.5,14.0,13.0,11.9,9.90,8.50,7.57,6.86,5.80,5.05,4.48,4.03,3.67,3.37,2.90,2.55,2.27,2.05,1.87,1.53,1.30,1.12,.993,.805,.677,.585,.515,.460,.416,.349,.301,.264,.236,.213,.172,.145,.125,.110,.0896,.0758,.0659,.0585,.0527,.0480,.0411,.0362,.0334,.0296,.0273,.0231,.0204,.0184,.0169,.0149,.0136,.0127,.0120,.0114,.0110,.0104,.00997,.00970,.00944,.00926,.00895,.00877,.00864,.00855,.00844,.00838,.00833,.00831,.00829,.00827,.00825,.00824,.00823,.00822,.00822,.00821,.00821,.00821,.00820,.00820,.00820,.00820,23*0.00820/
      DATA YEPS/1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,.96740,.89959,.88412,.88129,.86888,.79880,.70972,.57649,.44800,.29459,.22957,.21203,.22682,.25233,.32703,.35433,.41118,.47945,.51353,.58989,.64598,.69856,.70909,.74912,.78931,.85180,.80991,.74224,.67932,.66312,.65727,.69887,.69494,.66427,.59639,.57278,.53606,.47475,.43564,.39174,.34508,.33665,.32195,.29117,.27113,.24366,.22319,.19428,.17440,.16276,.15632,.15128,.14738,.13657,.12181,.10656,.09845,.08527,.06923,.05829,.05019,.04390,.039014,.031780,.026828,.023104,.020285,.018120,.014236,.011650,9.981D-3,8.631D-3,6.832D-3,5.656D-3,4.828D-3,4.180D-3,3.711D-3,3.327D-3,2.765D-3,2.358D-3,2.063D-3,1.824D-3,1.642D-3,1.311D-3,1.089D-3,9.288D-4,8.106D-4,6.428D-4,5.323D-4,4.534D-4,3.948D-4,3.495D-4,3.140D-4,2.573D-4,2.179D-4,1.824D-4,1.657D-4,1.475D-4,1.151D-4,9.342D-5,7.843D-5,6.746D-5,5.133D-5,4.090D-5,3.356D-5,2.837D-5,2.439D-5,2.122D-5,1.653D-5,1.332D-5,1.105D-5,9.308D-6,7.972D-6,5.738D-6,4.306D-6,3.371D-6,2.711D-6,1.867D-6,1.365D-6,1.043D-6,8.219D-7,6.658D-7,5.504D-7,3.946D-7,2.968D-7,2.313D-7,1.849D-7,1.517D-7,9.933D-8,6.983D-8,5.185D-8,4.003D-8,2.586D-8,1.810D-8,1.334D-8,1.025D-8,8.120D-9,6.566D-9,4.555D-9,3.332D-9,2.541D-9,1.997D-9,1.608D-9,1.016D-9,6.98D-10,5.06D-10,3.83D-10,2.40D-10,1.64D-10,1.19D-10,9.0D-11,7.0D-11,5.6D-11,3.8D-11,2.8D-11,2.1D-11,1.6D-11,1.3D-11/
# GROSS IONISATION X-SECTION AVERAGE OF 1) WANG AND VIDAL 
#  And 2) TAWARA AND NISHIMURA
# ABOVE 2KEV USE SCHRAM NORMALISED TO 2KEV DATA POINT OF TAWARA
# ABOVE 10KEV USE UPDATED FIT TO RIEKE AND PREPJCHAL WITH CORRECTED
# IONISATION OSCILLATOR STRENGTH
#  
      DATA XION/11.12,12.0,15.0,17.5,20.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,10000./
# GROSS IONISATION
      DATA YIONG/0.00,.206,1.14,2.30,3.31,5.21,6.47,7.37,8.00,8.54,9.22,9.79,10.09,10.20,10.24,10.23,9.90,9.36,8.84,8.35,7.80,6.84,6.25,5.78,5.26,4.93,4.33,3.99,3.67,3.27,3.05,2.64,2.27,2.06,1.88,1.57,1.35,1.19,1.06,.887,.764,.673,.603,.548,.5024/
# COUNTING IONISATION
      DATA YIONC/0.00,.206,1.14,2.30,3.31,5.21,6.47,7.32,7.81,8.00,8.43,8.83,9.019,9.118,9.154,9.145,8.85,8.37,7.90,7.46,6.97,6.11,5.59,5.17,4.70,4.41,3.87,3.57,3.28,2.92,2.73,2.36,2.03,1.84,1.68,1.40,1.21,1.06,.952,.793,.683,.602,.539,.490,.4491/
# BREAKUP CHANNELS FROM SCALED WANG AND VIDAL CORRECTED FOR DISSOCIATION
# FROM ++ STATES
#
#  C3H8+
      DATA XION1/11.11,12.0,15.0,17.5,20.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,10000./
      DATA YION1/0.00,.055,.213,.337,.456,.722,.854,.877,.960,.920,.931,.964,.936,.945,.949,.948,.917,.867,.819,.773,.722,.634,.579,.535,.487,.457,.401,.370,.340,.303,.282,.245,.210,.191,.174,.145,.125,.110,.0987,.0822,.0708,.0624,.0559,.0508,.0465/
#  C3H7+
      DATA XION2/11.55,12.0,15.0,17.5,20.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,10000./
      DATA YION2/0.00,.020,.126,.219,.295,.468,.579,.634,.649,.634,.646,.662,.666,.673,.675,.675,.653,.617,.583,.551,.514,.451,.412,.381,.347,.325,.286,.263,.242,.216,.201,.174,.150,.136,.124,.103,.0893,.0782,.0702,.0585,.0504,.0444,.0398,.0361,.0331/
#  C3H6+ 
      DATA XION3/11.75,12.0,15.0,17.5,20.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,10000./
      DATA YION3/0.00,.003,.031,.051,.071,.113,.140,.153,.157,.153,.156,.160,.161,.162,.163,.163,.157,.149,.140,.133,.124,.109,.0993,.0919,.0836,.0784,.0688,.0634,.0583,.0520,.0485,.0420,.0361,.0327,.0299,.0249,.0215,.0188,.0169,.0141,.0121,.0107,.00958,.00871,.00798/
#  C2H4+
      DATA XION4/11.75,12.0,15.0,17.5,20.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,10000./
      DATA YION4/0.00,.027,.257,.444,.604,.957,1.188,1.298,1.330,1.300,1.324,1.356,1.366,1.379,1.385,1.383,1.339,1.266,1.195,1.129,1.055,.9248,.8451,.7816,.7112,.6666,.5855,.5396,.4963,.4421,.4123,.3570,.3069,.2785,.2543,.2118,.1830,.1603,.1440,.1200,.1033,.0911,.0815,.0741,.0679/
#  C2H5+
      DATA XION5/11.91,12.0,15.0,17.5,20.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,10000./
      DATA YION5/0.00,.016,.394,.684,.954,1.512,1.877,2.050,2.100,2.053,2.091,2.141,2.156,2.178,2.186,2.184,2.114,1.998,1.887,1.783,1.665,1.460,1.334,1.234,1.123,1.053,.9245,.8519,.7836,.6981,.6511,.5637,.4846,.4397,.4015,.3344,.2890,.2532,.2274,.1894,.1631,.1438,.1287,.1170,.1073/
#  C3H5+
      DATA XION6/13.48,15.0,17.5,20.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,10000./
      DATA YION6/0.00,.044,.107,.163,.259,.321,.351,.359,.351,.358,.366,.369,.373,.374,.374,.362,.342,.323,.305,.285,.250,.228,.211,.192,.180,.158,.146,.134,.119,.111,.0964,.0829,.0752,.0687,.0572,.0494,.0433,.0389,.0324,.0279,.0246,.0220,.0200,.0184/
#  CH3+ 
      DATA XION7/13.65,15.0,17.5,20.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,10000./
      DATA YION7/0.00,.019,.049,.078,.123,.153,.167,.171,.167,.170,.174,.175,.177,.177,.177,.171,.162,.153,.145,.135,.118,.108,.100,.0911,.0854,.0750,.0691,.0636,.0566,.0528,.0457,.0393,.0357,.0326,.0271,.0234,.0205,.0184,.0154,.0132,.0117,.0104,.00949,.00870/
#  C3H4+
      DATA XION8/13.79,15.0,17.5,20.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,10000./
      DATA YION8/0.00,.0061,.0171,.0270,.0406,.0525,.0670,.0672,.0674,.0686,.0702,.0708,.0715,.0718,.0717,.0694,.0656,.0620,.0585,.0547,.0479,.0438,.0405,.0369,.0346,.0304,.0280,.0257,.0229,.0214,.0185,.0159,.0144,.0132,.0110,.00949,.00831,.00747,.00622,.00536,.00472,.00423,.00384,.00352/
#  C2H2+
      DATA XION9/14.1,15.0,17.5,20.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,10000./
      DATA YION9/0.00,.013,.047,.078,.117,.151,.193,.223,.223,.226,.234,.229,.231,.232,.232,.224,.212,.200,.189,.177,.155,.142,.131,.119,.112,.0981,.0904,.0832,.0741,.0691,.0598,.0514,.0467,.0426,.0355,.0307,.0269,.0241,.0201,.173,.0153,.0137,.0124,.0114/
#  C2H3+
      DATA XION10/14.5,15.0,17.5,20.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,10000./
      DATA YION10/0.00,.038,.219,.387,.582,.742,.964,.987,.965,.983,1.006,1.013,1.024,1.028,1.027,.9934,.9392,.8870,.8379,.7826,.6863,.6272,.5800,.5278,.4947,.4345,.4004,.3683,.3281,.3060,.2649,.2278,.2067,.1887,.1572,.1358,.1190,.1069,.0890,.0767,.0676,.0605,.0550,.0504/
#  C3H3+
      DATA XION11/16.5,17.5,20.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,10000./
      DATA YION11/0.00,.125,.197,.312,.387,.423,.434,.424,.432,.442,.446,.450,.452,.451,.437,.413,.390,.368,.344,.302,.276,.255,.232,.218,.191,.176,.162,.144,.135,.116,.1001,.0909,.0830,.0691,.0597,.0523,.0470,.0391,.0337,.0297,.0266,.0242,.0222/
#  H+
      DATA XION12/20.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,10000./
      DATA YION12/0.00,.00175,.00656,.00845,.00879,.00016,.00016,.00016,.0093,.0172,.0173,.0173,.0167,.0158,.0149,.0141,.0131,.0115,.0105,.00973,.00886,.00830,.00729,.00672,.00618,.00551,.00514,.00445,.00382,.00347,.00317,.00264,.00228,.00200,.00179,.00149,.00129,.00113,.00102,.000923,.000846/
#  H2+ AND H3+
      DATA XION13/21.5,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,10000./
      DATA YION13/0.00,.00070,.00246,.00455,.00527,.00685,.00710,.00784,.00916,.00925,.00929,.00928,.00898,.00849,.00802,.00758,.00708,.00621,.00567,.00524,.00477,.00447,.00393,.00362,.00333,.00297,.00277,.00240,.00206,.00187,.00171,.00142,.00123,.00108,.000966,.000805,.000693,.000611,.000547,.000497,.000456/
#  CH2+
      DATA XION14/25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,10000./
      DATA YION14/0.00,.0146,.0262,.0409,.0385,.0475,.0527,.0573,.0578,.0581,.0580,.0561,.0531,.0501,.0473,.0442,.0388,.0354,.0328,.0298,.0279,.0245,.0226,.0208,.0185,.0173,.0150,.0129,.0117,.0107,.00888,.00767,.00672,.00604,.00503,.00433,.00382,.00342,.00311,.00285/
#  C3H2+
      DATA XION15/26.5,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,10000./
      DATA YION15/0.00,.032,.067,.088,.113,.116,.121,.128,.123,.123,.119,.112,.106,.100,.0934,.0819,.0749,.0692,.0630,.0591,.0519,.0478,.0440,.0392,.0365,.0316,.0272,.0247,.0225,.0188,.0162,.0142,.0128,.0106,.00915,.00807,.00722,.00657,.00602/
#  C3H+
      DATA XION16/29.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,10000./
      DATA YION16/0.00,.0196,.0412,.0539,.0694,.0724,.0744,.0751,.0754,.0754,.0729,.0689,.0651,.0615,.0574,.0504,.0460,.0426,.0387,.0363,.0319,.0294,.0270,.0241,.0225,.0194,.0167,.0152,.0139,.0115,.00997,.00873,.00784,.00653,.00563,.00496,.00444,.00404,.00370/
#  C2H+
      DATA XION17/30.4,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,10000./
      DATA YION17/0.00,.0048,.0121,.0131,.0169,.0176,.0181,.0183,.0183,.0183,.0177,.0168,.0158,.0150,.0140,.0123,.0112,.0104,.00942,.00883,.00776,.00715,.00658,.00586,.00546,.00473,.00407,.00369,.00337,.00281,.00242,.00212,.00191,.00159,.00137,.00121,.00108,.000982,.000900/
# ALL STABLE  ++ STATES
      DATA XION18/32.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,10000./
      DATA YION18/0.00,.0062,.0178,.0262,.0321,.0369,.0372,.0374,.0374,.0362,.0342,.0323,.0305,.0285,.0250,.0228,.0211,.0192,.0180,.0158,.0146,.0134,.0119,.0111,.00964,.00829,.00752,.00687,.00572,.00494,.00433,.00389,.00324,.00279,.00246,.00220,.00200,.00183/
#  ALL DISSOCIATING ++ STATES
      DATA XION19/32.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,10000./
      DATA YION19/0.00,.0460,.1797,.5189,.7608,.9316,1.0718,1.0824,1.0867,1.0856,1.0506,.9933,.9381,.8861,.8277,.7258,.6633,.6134,.5582,.5232,.4595,.4235,.3895,.3470,.3236,.2802,.2409,.2186,.1996,.1662,.1436,.1258,.1130,.0941,.0811,.0715,.0640,.0582,.0533/
#  CH+
      DATA XION20/36.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,10000./
      DATA YION20/0.00,.0040,.0077,.0106,.0145,.0187,.0189,.0189,.0189,.0183,.0173,.0164,.0155,.0144,.0127,.0116,.0107,.00973,.00912,.00801,.00738,.00679,.00605,.00564,.00489,.00420,.00381,.00348,.00290,.00250,.00219,.00197,.00164,.00141,.00125,.00112,.00101,.000930/
#  C+
      DATA XION21/39.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,10000./
      DATA YION21/0.00,.00080,.00388,.00756,.00763,.00766,.00765,.00741,.00700,.00661,.00625,.00584,.00512,.00468,.00432,.00394,.00369,.00324,.00299,.00275,.00245,.00228,.00198,.00170,.00154,.00141,.00117,.00101,.000887,.000797,.000664,.000572,.000504,.000451,.000410,.000376/
#  C2+
      DATA XION22/39.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,10000./
      DATA YION22/0.00,.000054,.000264,.000515,.000520,.000522,.000521,.000504,.000477,.000450,.000425,.000397,.000348,.000318,.000295,.000268,.000251,.000221,.000203,.000187,.000167,.000155,.000135,.000116,.000105,.000096,.000080,.000069,.000060,.000054,.000045,.000039,.000034,.000031,.000028,.0000256/
#  C3+ 
      DATA XION23/39.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,10000./
      DATA YION23/0.00,.00099,.00481,.00934,.00943,.00947,.00946,.00915,.00865,.00817,.00772,.00721,.00632,.00578,.00534,.00486,.00456,.00400,.00369,.00339,.00302,.00282,.00244,.00210,.00190,.00174,.00145,.00125,.00110,.00098,.00082,.00071,.00062,.00056,.00051,.000464/
# K-SHELL IONISATION X-SECTION CARBON (SCALED BY 3 IN def) 
      DATA XION24/285.,298.,307.,316.,325.,335.,345.,365.,398.,422.,447.,473.,501.,531.,613.,668.,708.,750.,817.,917.,1000.,1122.,1296.,1496.,1679.,1884.,2054.,2238.,2512.,2985.,3981.,5012.,7079.,1.0D4,1.50D4,2.05D4,2.51'%.3f' %.07D4,4.10D4,5.01D4,6.13D4,7.08D4,8.18D4,1.0D5,1.54D5,2.05D5,2.99D5,4.10D5,5.01D5,6.13D5,7.08D5,8.18D5,1.0D6,1.26D6,1.5D6,2.05'%.3f' %.07D6,4.10D6,5.01D6,6.13D6,7.08D6,8.18D6,1.0D7,1.26D7,1.5D7,2.05'%.3f' %.07D7,4.10D7,5.01D7,6.13D7,7.08D7,8.18D7,1.0D8,1.26D8,1.5D8,2.05'%.3f' %.07D8,4.10D8,5.01D8,6.13D8,7.08D8,8.18D8,1.0D9/
      DATA YION24/0.00,1.66D-4,3.48D-4,5.25D-4,6.96D-4,8.63D-4,1.02D-3,1.33D-3,1.75D-3,2.01D-3,2.24D-3,2.46D-3,2.66D-3,2.84D-3,3.21D-3,3.38D-3,3.47D-3,3.55D-3,3.65D-3,3.72D-3,3.75D-3,3.74D-3,3.68D-3,3.57D-3,3.45D-3,3.31D-3,3.19D-3,3.07D-3,2.91D-3,2.66D-3,2.25D-3,1.95D-3,1.55D-3,1.21D-3,8.97D-4,7.07D-4,6.07D-4,5.21D-4,4.21D-4,3.63D-4,3.14D-4,2.84D-4,2.57D-4,2.25D-4,1.74D-4,1.50D-4,1.28D-4,1.15D-4,1.09D-4,1.05D-4,1.03D-4,1.02D-4,1.01D-4,1.005D-4,1.01D-4,1.03D-4,1.07D-4,1.11D-4,1.14D-4,1.17D-4,1.20D-4,1.22D-4,1.25D-4,1.29D-4,1.32D-4,1.38D-4,1.45D-4,1.50D-4,1.54D-4,1.58D-4,1.60D-4,1.63D-4,1.67D-4,1.71D-4,1.74D-4,1.80D-4,1.87D-4,1.92D-4,1.96D-4,2.00D-4,2.02D-4,2.05D-4,2.09D-4/
#
# CH3-  ATTACHMENT
      DATA XATT1/7.60,8.00,8.50,9.00,9.50,10.0,10.5,11.0,11.5/
      DATA YATT1/0.00,2.4D-6,1.1D-5,5.1D-5,6.0D-5,5.1D-5,1.1D-5,2.4D-6,0.0/
# H- ATTACHMENT
      DATA XATT2/7.80,8.00,8.50,9.00,9.50,10.0,10.5,11.0,11.5/
      DATA YATT2/0.00,1.6D-5,7.2D-5,2.8D-4,4.0D-4,2.8D-4,7.2D-5,1.6D-5,0.0/
#
      DATA XVIB1/.108,.125,0.14,0.15,.175,0.20,.225,0.25,0.30,0.40,0.50,0.70,1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.50,8.50,10.0,12.5,15.0,20.0/             
      DATA YVIB1/0.00,.137,.222,.265,.312,.359,.368,.368,.333,.282,.248,.205,.162,.162,.197,.291,.432,.567,.731,.957,1.02,.787,.585,.475,.325/              
      DATA XVIB2/.173,0.18,0.19,0.20,.215,0.23,0.25,0.30,0.40,0.50,0.70,1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.50,8.50,10.0,12.5,15.0,20.0/               
      DATA YVIB2/0.00,.085,.180,.248,.299,.325,.351,.368,.351,.325,.274,.222,.205,.214,.332,.493,.647,.835,1.09,1.16,.898,.665,.531,.370/                 
      DATA XVIB3/.363,0.38,0.40,.425,0.45,.475,0.50,0.55,0.60,0.65,0.70,0.80,1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.00,8.50,10.0,12.5,15.0,20.0/                                   
      DATA YVIB3/0.00,.226,.314,.379,.420,.446,.465,.485,.493,.493,.489,.474,.437,.418,.456,.665,.950,1.23,1.65,2.00,1.70,1.32,1.02,0.80,0.56/                              
      DATA XVIB4/.519,1.00,1.25,1.50,2.00,2.50,3.00,3.50,4.00,5.00,6.00,7.50,8.50,10.0,12.5,15.0,20.0/             
      DATA YVIB4/0.00,.000,.005,.0075,.0163,.030,.0513,.080,.118,.218,.363,.613,.625,.500,.350,.269,.175/
# EFFECTIVE TRIPLET LEVELS
# NON DIPOLE LEVEL AT 6.60 EV
      DATA XTR1/6.60,7.15,7.70,8.00,8.70,9.70,10.7,11.7,13.7,15.7,18.7,21.7,25.7,29.7/
      DATA YTR1/0.00,.072,.216,.304,.384,.409,.424,.432,.424,.408,.352,.296,.216,.160/ 
# NON DIPOLE LEVEL AT 7.70 EV
      DATA XTR2/7.70,9.20,10.2,11.2,12.2,14.2,16.2,19.2,22.2,26.2,29.7/
      DATA YTR2/0.00,.164,.236,.265,.282,.295,.295,.275,.235,.175,.140/
# NON DIPOLE LEVEL AT 9.60 EV
      DATA XTR3/9.60,10.6,11.6,12.6,13.6,16.6,19.6,22.6,26.6,29.6,34.6/
      DATA YTR3/0.00,.298,.614,.716,.810,.853,.853,.810,.702,.610,.464/    
# NON DIPOLE LEVEL AT 26.0 EV
      DATA XTR4/26.0,27.0,28.0,29.0,30.0,33.0,36.0,39.0,43.0,46.0,51.0/
      DATA YTR4/0.00,1.43,2.95,3.44,3.89,4.08,4.08,3.89,3.37,2.93,2.22/    
#                                      
# BREMSSTRAHLUNG X-SECTION WITH CUT UNITS 10**-24
      DATA Z1T/11.3,6.18,2.80,1.54,.858,.407,.251,.176,.145,.150,.167,.178,.187,.193,.198,.205,.210,.218,.222,.228,.231,.233,.234,.235,.235/
      DATA Z6T/298.,178.,85.2,47.5,26.3,12.2,7.06,4.45,3.06,2.82,2.89,2.99,3.08,3.13,3.18,3.25,3.31,3.39,3.44,3.49,3.52,3.54,3.55,3.57,3.57/
      DATA EBRM/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,4.E7,5.E7,6.E7,8.E7,1.E8/
# LIGHT EMISSION FROM H ALPHA     
#  MOHLMANN  CHEM PHYS 19(1977)233
      DATA XNUL1/18.0,20.0,40.0,60.0,80.0,100.,150.,200.,300.,500.,1000.,1300.,1700.,2000./
      DATA YNUL1/0.0,.0019,.0073,.0140,.0162,.0178,.0181,.0144,.0093,.0053,.0025,.0019,.0014,.0012/
# LIGHT EMISSION FROM CH2(A2DELTA -X2PI)
#  MOHLMANN  CHEM PHYS 19(1977)233
      DATA XNUL2/16.0,20.0,40.0,60.0,80.0,100.,150.,200.,300.,500.,1000.,1300.,1700.,2000./
      DATA YNUL2/0.0,.000,.0037,.0054,.0056,.0053,.0048,.0041,.0028,.0016,.0007,.0005,.0004,.0003/
# --------------------------------------------------------------------- 
# ----------------------------------------------------------------------
# UPDATE OF PROPANE TO INCLUDE DISSOCIATIVE IONISATION AND
# OSCILLATOR STRENGTH FOR NEUTRAL DISSOCIATION .
# EXT# endED DATA BASE TO HIGH ENERGY TO ALLOW USE IN DEGRAD
# 
#     NANISO=0
      if(NANISO == 0):
 :                                           
       NAME=' C3H8 2017   ISOTROPIC   '  
      else:
       NAME=' C3H8 2017  ANISOTROPIC  '
      # endif                  
# ---------------------------------------------------------------------
# BORN-BETHE CONSTANTS
      A0=0.52917720859D-08
      RY=13.60569193
      CONST=1.873884D-20
      EMASS2=1021997.804
      API=numpy.arccos(-1.00)
      BBCONST=16.00*API*A0*A0*RY*RY/EMASS2
#
# BORN BETHE FOR IONISATION
      AM2=10.52
      C=125.50
# ARRAY SIZE
      NASIZE=4000
#
      NION=24 
      NATT=2 
      NIN=64
      NNULL=2
      IONMODEL=1
#
      NBREM=25
      DO 8 J=1,NIN
      IZBR[J]=0
    8 CONTINUE
      IZBR(NIN+1)=6
      IZBR(NIN+2)=1
#
      DO 1 J=1,6
    1 KEL[J]=NANISO
# SET VIBRATIONAL ANGULAR DISTRIBUTIONS TO ANISOTROPIC
      DO 2 J=1,8
    2 KIN[J]=NANISO      
# SET ANG DITRIBUTIONS FOR DISSOCIATIVE EXCITATIONS TO OKHRIMOVSKYY TYPE
      DO 31 J=9,NIN
   31 KIN[J]=2
#
      NDATA=166                             
      NIONG=46  
      NION1=45
      NION2=45
      NION3=45
      NION4=45
      NION5=45
      NION6=44
      NION7=44
      NION8=44
      NION9=44
      NION10=44
      NION11=43
      NION12=41
      NION13=41
      NION14=40
      NION15=39
      NION16=39
      NION17=39
      NION18=38
      NION19=39
      NION20=38
      NION21=36
      NION22=36
      NION23=36
      NION24=83
#                                                        
      NATT1=9 
      NATT2=9                                             
      NVIB1=25                                                          
      NVIB2=24                                                          
      NVIB3=25
      NVIB4=17
      NTR1=14
      NTR2=11
      NTR3=11                             
      NTR4=11                             
      NUL1=14
      NUL2=14      
# SCALING OF NULL CROSS-SECTION
      SCLN[1]=1.0
      SCLN(2)=1.0
#
      E[1]=0.0                                                          
      E(2)=2.0*EMASS/(44.09652*AMU)                                     
      E(3)=11.05                                                      
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
#
      EION[1]=11.11
      EION(2)=11.55
      EION(3)=11.75
      EION(4)=11.75
      EION(5)=11.91
      EION(6)=13.48
      EION(7)=13.65
      EION(8)=13.79
      EION(9)=14.1
      EION(10)=14.5
      EION(11)=16.5
      EION(12)=20.0
      EION(13)=21.5
      EION(14)=25.0
      EION(15)=26.5
      EION(16)=29.0
      EION(17)=30.4
      EION(18)=32.0
      EION(19)=32.0
      EION(20)=36.0
      EION(21)=39.0
      EION(22)=39.0
      EION(23)=39.0
      EION(24)=285.0
# OPAL BEATY
      SCLOBY=1.0
      DO 33 J=1,NION
       EOBY[J]=EION[J]*SCLOBY
   33 CONTINUE
      EOBY(NION)=EOBY(NION)*0.63
#
      ESPLIT(1,1)=0.80*EION(2)
      ESPLIT(1,2)=0.58*EION(2)
#
      DO 44 JK=1,23
       LEGAS(JK)=0
       ISHELL(JK)=0
       NC0(JK)=0
       EC0(JK)=0.0
       WKLM(JK)=0.0
       EFL(JK)=0.0
       NG1(JK)=0
       EG1(JK)=0.0
       NG2(JK)=0
       EG2(JK)=0.0
   44 CONTINUE
# DOUBLE CHARGE , ++ ION STATES ( EXTRA ELECTRON )
       NC0(18)=1
       EC0(18)=4.0
       NC0(19)=1
       EC0(19)=4.0 
# FLUORESCENCE DATA (KSHELL)
      LEGAS(24)=1
      ISHELL(24)=1
      NC0(24)=2
      EC0(24)=253.0
      WKLM(24)=0.0026
      EFL(24)=273.0
      NG1(24)=1
      EG1(24)=253.0
      NG2(24)=2
      EG2(24)=5.
# OFFSET ENERGY FOR IONISATION ELECTRON ANGULAR DISTRIBUTION
      DO 776 J=1,NION
      DO 777 I=1,NASIZE
      if(EG[I]:
 > EION[J]) :
       IOFFION[J]=I-1
       GO TO 776
      # endif
  777 CONTINUE
  776 CONTINUE      
#
      EIN[1]=-0.036
      EIN(2)=0.036
      EIN(3)=-0.108                                            
      EIN(4)=0.108    
      EIN(5)=-0.173                                                  
      EIN(6)=0.173                                                      
      EIN(7)=0.363
      EIN(8)=0.519
      EIN(9)=6.60                                                      
      EIN(10)=7.65                                                      
      EIN(11)=7.70
      EIN(12)=7.95
      EIN(13)=8.25                                                      
      EIN(14)=8.55
      EIN(15)=8.85
      EIN(16)=9.15                                                      
      EIN(17)=9.45
      EIN(18)=9.60
      EIN(19)=9.75                                                      
      EIN(20)=10.05
      EIN(21)=10.35
      EIN(22)=10.65
      EIN(23)=10.9 
      EIN(24)=11.1 
      EIN(25)=11.3 
      EIN(26)=11.5 
      EIN(27)=11.7 
      EIN(28)=11.9 
      EIN(29)=12.1 
      EIN(30)=12.3
      EIN(31)=12.5
      EIN(32)=12.7
      EIN(33)=12.9
      EIN(34)=13.1
      EIN(35)=13.3
      EIN(36)=13.5
      EIN(37)=13.7
      EIN(38)=13.9
      EIN(39)=14.1
      EIN(40)=14.3
      EIN(41)=14.5
      EIN(42)=14.7
      EIN(43)=14.9
      EIN(44)=15.2
      EIN(45)=15.6
      EIN(46)=16.0
      EIN(47)=16.4
      EIN(48)=16.8
      EIN(49)=17.25
      EIN(50)=17.75
      EIN(51)=18.25
      EIN(52)=18.75
      EIN(53)=19.25
      EIN(54)=19.75
      EIN(55)=20.25
      EIN(56)=20.75
      EIN(57)=21.5
      EIN(58)=22.5 
      EIN(59)=23.5 
      EIN(60)=24.5 
      EIN(61)=25.5
      EIN(62)=26.0 
      EIN(63)=26.5 
      EIN(64)=27.5
      EIN(65)=0.0
      EIN(66)=0.0
# OFFSET ENERGY FOR EXCITATION LEVELS ANGULAR DISTRIBUTION
      DO 3 NL=1,NIN
      DO 651 I=1,NASIZE
      if(EG[I]:
 > abs(EIN(NL))) :
       IOFFN(NL)=I-1
       GO TO 3
      # endif
  651 CONTINUE
    3 CONTINUE
#***********************************************************************
# ENTER PENNING TRANSFER FRACTION FOR EACH LEVEL
# LEVELS THAT ARE DISSOCIATIVE DO NOT GIVE PENNING TRANSFERS
      DO 4 K=1,NIN
      DO 4 L=1,3
    4 PENFRA[L,K]=0.0
# ENTER PENNING CONSTANTS IN PREVIOUS LINE
      if(IPEN == 0):
 GO TO 6
# PRINT OUT PENNING CONSTANTS
      DO 5 KDUM=1,NIN
      if(PENFRA[1,KDUM] == 0.0):
 GO TO 5
      WRITE(6,999) NAME,EIN(KDUM),PENFRA[1,KDUM],PENFRA[2,KDUM],PENFRA[3,KDUM]
  999 print(' GAS = ',A25,' ENERGY LEVEL = ','%.4f' %,' EV.',/,' PENNING PROBABILITY =','%.3f' % ,' ABS.LENGTH =',F7.2,' DECAY TIME =',F7.1,/) 
    5 CONTINUE 
#***********************************************************************
#

    6 SCRPT[1]='                                                  '
      SCRPT(2)=' ELASTIC      ANISOTROPIC   PROPANE 2017          '
      if(NANISO == 0):
 :
      SCRPT(2)=' ELASTIC        ISOTROPIC   PROPANE 2017          '
      # endif
      SCRPT(3)=' IONISATION    C3H8+               ELOSS=11.11    '
      SCRPT(4)=' IONISATION    C3H7+               ELOSS=11.55    '
      SCRPT(5)=' IONISATION    C3H6+               ELOSS=11.75    '
      SCRPT(6)=' IONISATION    C2H4+               ELOSS=11.75    '
      SCRPT(7)=' IONISATION    C2H5+               ELOSS=11.91    '
      SCRPT(8)=' IONISATION    C3H5+               ELOSS=13.48    '
      SCRPT(9)=' IONISATION    CH3+                ELOSS=13.65    '
      SCRPT(10)=' IONISATION    C3H4+               ELOSS=13.79    '
      SCRPT(11)=' IONISATION    C2H2+               ELOSS=14.1     '
      SCRPT(12)=' IONISATION    C2H3+               ELOSS=14.5     '
      SCRPT(13)=' IONISATION    C3H3+               ELOSS=16.5     '
      SCRPT(14)=' IONISATION    H+                  ELOSS=20.0     '
      SCRPT(15)=' IONISATION    H2+ AND H3+         ELOSS=21.5     '
      SCRPT(16)=' IONISATION    CH2+                ELOSS=25.0     '
      SCRPT(17)=' IONISATION    C3H2+               ELOSS=26.5     '
      SCRPT(18)=' IONISATION    C3H+                ELOSS=29.0     '
      SCRPT(19)=' IONISATION    C2H+                ELOSS=30.4     '
      SCRPT(20)=' IONISATION    ++ STATES STABLE    ELOSS=32.0     '
      SCRPT(21)=' IONISATION    ++ STATES DISSOC.   ELOSS=32.0     '
      SCRPT(22)=' IONISATION    CH+                 ELOSS=36.0     '
      SCRPT(23)=' IONISATION    C+                  ELOSS=39.0     '
      SCRPT(24)=' IONISATION    C2+                 ELOSS=39.0     '
      SCRPT(25)=' IONISATION    C3+                 ELOSS=39.0     '
      SCRPT(26)=' IONISATION  CARBON K-SHELL        ELOSS=285.0    ' 
      SCRPT(27)=' ATTACHMENT CH3-                                  '
      SCRPT(28)=' ATTACHMENT H-                                    '
      SCRPT(29)='                                                  '
      SCRPT(30)='                                                  '
      SCRPT(31)=' TORSION              SUPERELASTIC ELOSS= -0.036  '
      SCRPT(32)=' TORSION                           ELOSS=  0.036  '
      SCRPT(33)=' VIB ROCK AND STRETCH SUPERELASTIC ELOSS= -0.108  '
      SCRPT(34)=' VIB ROCK AND STRETCH              ELOSS=  0.108  '
      SCRPT(35)=' VIB DEprintION      SUPERELASTIC ELOSS= -0.173  '
      SCRPT(36)=' VIB DEprintION                   ELOSS=  0.173  '
      SCRPT(37)=' VIB STRETCH                       ELOSS=  0.363  '
      SCRPT(38)=' VIB HARMONICS                     ELOSS=  0.519  '
      SCRPT(39)=' TRIPLET DISSOCIATION              ELOSS=  6.60   '
      SCRPT(40)=' SINGLET DISSOC.    F=0.000339     ELOSS=  7.65   ' 
      SCRPT(41)=' TRIPLET DISSOCIATION              ELOSS=  7.70   '
      SCRPT(42)=' SINGLET DISSOC.    F=0.004660     ELOSS=  7.95   '
      SCRPT(43)=' SINGLET DISSOC.    F=0.012816     ELOSS=  8.25   '
      SCRPT(44)=' SINGLET DISSOC.    F=0.037747     ELOSS=  8.55   '
      SCRPT(45)=' SINGLET DISSOC.    F=0.081783     ELOSS=  8.85   '
      SCRPT(46)=' SINGLET DISSOC.    F=0.084248     ELOSS=  9.15   '
      SCRPT(47)=' SINGLET DISSOC.    F=0.090347     ELOSS=  9.45   '
      SCRPT(48)=' TRIPLET DISSOCIATION              ELOSS=  9.60   '
      SCRPT(49)=' SINGLET DISSOC.    F=0.098580     ELOSS=  9.75   '
      SCRPT(50)=' SINGLET DISSOC.    F=0.10415      ELOSS= 10.05   '
      SCRPT(51)=' SINGLET DISSOC.    F=0.11379      ELOSS= 10.35   '
      SCRPT(52)=' SINGLET DISSOC.    F=0.12674      ELOSS= 10.65   '
      SCRPT(53)=' SINGLET DISSOC.    F=0.096356     ELOSS= 10.9    '
      SCRPT(54)=' SINGLET DISSOC.    F=0.10387      ELOSS= 11.1    '
      SCRPT(55)=' SINGLET DISSOC.    F=0.10183      ELOSS= 11.3    '
      SCRPT(56)=' SINGLET DISSOC.    F=0.096718     ELOSS= 11.5    '
      SCRPT(57)=' SINGLET DISSOC.    F=0.090149     ELOSS= 11.7    '
      SCRPT(58)=' SINGLET DISSOC.    F=0.086661     ELOSS= 11.9    '
      SCRPT(59)=' SINGLET DISSOC.    F=0.086097     ELOSS= 12.1    '
      SCRPT(60)=' SINGLET DISSOC.    F=0.083324     ELOSS= 12.3    '
      SCRPT(61)=' SINGLET DISSOC.    F=0.079943     ELOSS= 12.5    '
      SCRPT(62)=' SINGLET DISSOC.    F=0.077210     ELOSS= 12.7    '
      SCRPT(63)=' SINGLET DISSOC.    F=0.070368     ELOSS= 12.9    '
      SCRPT(64)=' SINGLET DISSOC.    F=0.061365     ELOSS= 13.1    '
      SCRPT(65)=' SINGLET DISSOC.    F=0.053208     ELOSS= 13.3    '
      SCRPT(66)=' SINGLET DISSOC.    F=0.046320     ELOSS= 13.5    '
      SCRPT(67)=' SINGLET DISSOC.    F=0.042827     ELOSS= 13.7    '
      SCRPT(68)=' SINGLET DISSOC.    F=0.038898     ELOSS= 13.9    '
      SCRPT(69)=' SINGLET DISSOC.    F=0.035930     ELOSS= 14.1    '
      SCRPT(70)=' SINGLET DISSOC.    F=0.033632     ELOSS= 14.3    '
      SCRPT(71)=' SINGLET DISSOC.    F=0.030562     ELOSS= 14.5    '
      SCRPT(72)=' SINGLET DISSOC.    F=0.028559     ELOSS= 14.7    '
      SCRPT(73)=' SINGLET DISSOC.    F=0.027052     ELOSS= 14.9    '
      SCRPT(74)=' SINGLET DISSOC.    F=0.048051     ELOSS= 15.2    '
      SCRPT(75)=' SINGLET DISSOC.    F=0.036375     ELOSS= 15.6    '
      SCRPT(76)=' SINGLET DISSOC.    F=0.020165     ELOSS= 16.0    '
      SCRPT(77)=' SINGLET DISSOC.    F=0.010038     ELOSS= 16.4    '
      SCRPT(78)=' SINGLET DISSOC.    F=0.0054441    ELOSS= 16.8    '
      SCRPT(79)=' SINGLET DISSOC.    F=0.0050790    ELOSS= 17.25   '
      SCRPT(80)=' SINGLET DISSOC.    F=0.0057699    ELOSS= 17.75   '
      SCRPT(81)=' SINGLET DISSOC.    F=0.0072715    ELOSS= 18.25   '
      SCRPT(82)=' SINGLET DISSOC.    F=0.010296     ELOSS= 18.75   '
      SCRPT(83)=' SINGLET DISSOC.    F=0.014152     ELOSS= 19.25   '
      SCRPT(84)=' SINGLET DISSOC.    F=0.013698     ELOSS= 19.75   '
      SCRPT(85)=' SINGLET DISSOC.    F=0.010362     ELOSS= 20.25   '
      SCRPT(86)=' SINGLET DISSOC.    F=0.0088401    ELOSS= 20.75   '
      SCRPT(87)=' SINGLET DISSOC.    F=0.022195     ELOSS= 21.5    '
      SCRPT(88)=' SINGLET DISSOC.    F=0.0191721    ELOSS= 22.5    '
      SCRPT(89)=' SINGLET DISSOC.    F=0.011553     ELOSS= 23.5    '
      SCRPT(90)=' SINGLET DISSOC.    F=0.0089679    ELOSS= 24.5    '
      SCRPT(91)=' SINGLET DISSOC.    F=0.0064815    ELOSS= 25.5    '
      SCRPT(92)=' TRIPLET DISSOCIATION              ELOSS= 26.0    '
      SCRPT(93)=' SINGLET DISSOC.    F=0.0035484    ELOSS= 26.5    '
      SCRPT(94)=' SINGLET DISSOC.    F=0.0010872    ELOSS= 27.5    '
      SCRPT(95)=' BREMSSTRAHLUNG FROM CARBON ATOM                  '
      SCRPT(96)=' BREMSSTRAHLUNG FROM HYDROGEN ATOM                '
# NULL COLLISIONS
      SCRPTN[1]=' C3H8: LIGHT EMISSION : Halpha                    '
      SCRPTN(2)=' C3H8: LIGHT EMISSION : CH2(A2DELTA-X2PI)         '
#
# CALC LEVEL POPULATIONS
      APOP1=math.exp(EIN[1]/AKT)
      APOP2=math.exp(EIN(3)/AKT)
      APOP3=math.exp(EIN(5)/AKT)  
#
#     EN=-ESTEP/2.0                                      
      DO 1000 I=1,NSTEP
      EN=EG[I]
      ENLG=math.log(EN)                                              
#     EN=EN+ESTEP    
      GAMMA1=(EMASS2+2.00*EN)/EMASS2
      GAMMA2=GAMMA1*GAMMA1
      BETA=math.sqrt(1.00-1.00/GAMMA2)           
      BETA2=BETA*BETA
#                   
      DO 10 J=2,NDATA        
      if(EN > 10.0):
 GO TO 21                                           
      if(EN <= XEN[J]:
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA                                                           
   20 A=(YMT[J]-YMT(J-1))/(XEN[J]-XEN(J-1))                         
      B=(XEN(J-1)*YMT[J]-XEN[J]*YMT(J-1))/(XEN(J-1)-XEN[J])
      QMT=(A*EN+B)*1.D-16
      A=(YEL[J]-YEL(J-1))/(XEN[J]-XEN(J-1))                         
      B=(XEN(J-1)*YEL[J]-XEN[J]*YEL(J-1))/(XEN(J-1)-XEN[J])
      QEL=(A*EN+B)*1.D-16
      A=(YEPS[J]-YEPS(J-1))/(XEN[J]-XEN(J-1))                         
      B=(XEN(J-1)*YEPS[J]-XEN[J]*YEPS(J-1))/(XEN(J-1)-XEN[J])
      PQ2=A*EN+B
      GO TO 30
# USE LOG INTERPOLATION ABOVE 10 EV
   21 DO 22 J=2,NDATA
      if(EN <= XEN[J]:
) GO TO 23
   22 CONTINUE
      J=NDATA
   23 YXJ=math.log(YEL[J])
      YXJ1=math.log(YEL(J-1))
      XNJ=math.log(XEN[J])
      XNJ1=math.log(XEN(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QEL=math.exp(A*math.log(EN)+B)*1.D-16
      YXJ=math.log(YMT[J])
      YXJ1=math.log(YMT(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QMT=math.exp(A*math.log(EN)+B)*1.D-16
      YXJ=math.log(YEPS[J])
      YXJ1=math.log(YEPS(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      PQ2=math.exp(A*math.log(EN)+B)
   30 CONTINUE
# EPSILON = 1-YEPS
      PQ2=1.00-PQ2
      PQ1=0.5+(QEL-QMT)/QEL
# CALCULATE PQ1 AND PQ2
      if(NANISO == 0):
 PEQEL(2,I)=0.5
      if(NANISO == 1):
 PEQEL(2,I)=PQ1
      if(NANISO == 2):
 PEQEL(2,I)=PQ2
      Q(2,I)=QEL  
      if(NANISO == 0):
 Q(2,I)=QMT  
#
# IONISATION 
# 
      Q(3,I)=0.0
      DO 40 L=1,NION
      QION(L,I)=0.00
      PEQION(L,I)=0.5
      if(NANISO == 2):
 PEQION(L,I)=0.0
   40 CONTINUE
# CALCULATE GROSS AND COUNTING IONISATIONS
# NOT USED: ONLY FOR COMPARISON TO TOTAL OF SUMMED IONISATION CHANNELS
#
#     GROSS AND COUNTING IONISATIONS:
#
      if(EN <= EION[1]:
) GO TO 50
      if(EN > XION(NIONG):
) GO TO 43
      DO 41 J=2,NIONG
      if(EN <= XION[J]:
) GO TO 42
   41 CONTINUE
      J=NION
   42 A=(YIONG[J]-YIONG(J-1))/(XION[J]-XION(J-1))
      B=(XION(J-1)*YIONG[J]-XION[J]*YIONG(J-1))/(XION(J-1)-XION[J])
      QIONG=(A*EN+B)*1.D-16
      A=(YIONC[J]-YIONC(J-1))/(XION[J]-XION(J-1))
      B=(XION(J-1)*YIONC[J]-XION[J]*YIONC(J-1))/(XION(J-1)-XION[J])
      QIONC=(A*EN+B)*1.D-16
      GO TO 50
# USE BORN-BETHE ABOVE XION(NIONG) EV
   43 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QBB=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)
      QIONC=QBB
      QIONG=QIONC/0.8939
   50 CONTINUE
#
#  C3H8+                                                                     
      if(EN <= EION[1]:
) GO TO 65         
      if(EN > XION1(NION1):
) GO TO 63
      DO 61 J=2,NION1                                                  
      if(EN <= XION1[J]:
) GO TO 62                                     
   61 CONTINUE                                                          
      J=NION1                                                           
   62 A=(YION1[J]-YION1(J-1))/(XION1[J]-XION1(J-1))                    
      B=(XION1(J-1)*YION1[J]-XION1[J]*YION1(J-1))/(XION1(J-1)-XION1[J]) 
      QION(1,I)=(A*EN+B)*1.D-16               
      GO TO 64 
# USE BORN BETHE ABOVE XION1(NION1) EV
   63 QION(1,I)=QIONC*0.103628
   64 CONTINUE
      if(EN < (2.0*EION[1]:
)) GO TO 65
      PEQION(1,I)=PEQEL(2,(I-IOFFION[1]))
# C3H7+ 
   65 if(EN <= EION(2)) GO TO 70         
      if(EN > XION2(NION2):
) GO TO 68
      DO 66 J=2,NION2                                                  
      if(EN <= XION2[J]:
) GO TO 67                                     
   66 CONTINUE                                                          
      J=NION2                                                           
   67 A=(YION2[J]-YION2(J-1))/(XION2[J]-XION2(J-1))                    
      B=(XION2(J-1)*YION2[J]-XION2[J]*YION2(J-1))/(XION2(J-1)-XION2[J]) 
      QION(2,I)=(A*EN+B)*1.D-16               
      GO TO 69
# USE BORN BETHE ABOVE XION2(NION2) EV
   68 QION(2,I)=QIONC*0.073774
   69 CONTINUE
      if(EN < (2.0*EION(2):
)) GO TO 70
      PEQION(2,I)=PEQEL(2,(I-IOFFION(2)))
# C3H6+ 
   70 if(EN <= EION(3)) GO TO 75         
      if(EN > XION3(NION3):
) GO TO 73
      DO 71 J=2,NION3                                                  
      if(EN <= XION3[J]:
) GO TO 72                                     
   71 CONTINUE                                                          
      J=NION3                                                           
   72 A=(YION3[J]-YION3(J-1))/(XION3[J]-XION3(J-1))                    
      B=(XION3(J-1)*YION3[J]-XION3[J]*YION3(J-1))/(XION3(J-1)-XION3[J]) 
      QION(3,I)=(A*EN+B)*1.D-16               
      GO TO 74
# USE BORN BETHE ABOVE XION3(NION3) EV
   73 QION(3,I)=QIONC*0.017780
   74 CONTINUE
      if(EN < (2.0*EION(3):
)) GO TO 75
      PEQION(3,I)=PEQEL(2,(I-IOFFION(3)))
# C2H4+ 
   75 if(EN <= EION(4)) GO TO 80         
      if(EN > XION4(NION4):
) GO TO 78
      DO 76 J=2,NION4                                                  
      if(EN <= XION4[J]:
) GO TO 77                                     
   76 CONTINUE                                                          
      J=NION4                                                           
   77 A=(YION4[J]-YION4(J-1))/(XION4[J]-XION4(J-1))                    
      B=(XION4(J-1)*YION4[J]-XION4[J]*YION4(J-1))/(XION4(J-1)-XION4[J]) 
      QION(4,I)=(A*EN+B)*1.D-16               
      GO TO 79
# USE BORN BETHE ABOVE XION4(NION4) EV
   78 QION(4,I)=QIONC*0.151263
   79 CONTINUE
      if(EN < (2.0*EION(4):
)) GO TO 80
      PEQION(4,I)=PEQEL(2,(I-IOFFION(4)))
# C2H5+ 
   80 if(EN <= EION(5)) GO TO 85         
      if(EN > XION5(NION5):
) GO TO 83
      DO 81 J=2,NION5                                                  
      if(EN <= XION5[J]:
) GO TO 82                                     
   81 CONTINUE                                                          
      J=NION5                                                           
   82 A=(YION5[J]-YION5(J-1))/(XION5[J]-XION5(J-1))                    
      B=(XION5(J-1)*YION5[J]-XION5[J]*YION5(J-1))/(XION5(J-1)-XION5[J]) 
      QION(5,I)=(A*EN+B)*1.D-16
      GO TO 84               
# USE BORN BETHE ABOVE XION5(NION5) EV
   83 QION(5,I)=QIONC*0.238836
   84 CONTINUE
      if(EN < (2.0*EION(5):
)) GO TO 85
      PEQION(5,I)=PEQEL(2,(I-IOFFION(5)))
# C3H5+ 
   85 if(EN <= EION(6)) GO TO 90         
      if(EN > XION6(NION6):
) GO TO 88
      DO 86 J=2,NION6                                                  
      if(EN <= XION6[J]:
) GO TO 87                                     
   86 CONTINUE                                                          
      J=NION6                                                           
   87 A=(YION6[J]-YION6(J-1))/(XION6[J]-XION6(J-1))                    
      B=(XION6(J-1)*YION6[J]-XION6[J]*YION6(J-1))/(XION6(J-1)-XION6[J]) 
      QION(6,I)=(A*EN+B)*1.D-16               
      GO TO 89
# USE BORN BETHE ABOVE XION6(NION6) EV
   88 QION(6,I)=QIONC*0.040867 
   89 CONTINUE
      if(EN < (2.0*EION(6):
)) GO TO 90
      PEQION(6,I)=PEQEL(2,(I-IOFFION(6)))
# CH3+
   90 if(EN <= EION(7)) GO TO 95         
      if(EN > XION7(NION7):
) GO TO 93
      DO 91 J=2,NION7                                                  
      if(EN <= XION7[J]:
) GO TO 92                                     
   91 CONTINUE                                                          
      J=NION7                                                           
   92 A=(YION7[J]-YION7(J-1))/(XION7[J]-XION7(J-1))                    
      B=(XION7(J-1)*YION7[J]-XION7[J]*YION7(J-1))/(XION7(J-1)-XION7[J]) 
      QION(7,I)=(A*EN+B)*1.D-16               
      GO TO 94
# USE BORN BETHE ABOVE XION7(NION7) EV
   93 QION(7,I)=QIONC*0.019372
   94 CONTINUE
      if(EN < (2.0*EION(7):
)) GO TO 95
      PEQION(7,I)=PEQEL(2,(I-IOFFION(7)))
# C3H4+
   95 if(EN <= EION(8)) GO TO 100         
      if(EN > XION8(NION8):
) GO TO 98
      DO 96 J=2,NION8                                                  
      if(EN <= XION8[J]:
) GO TO 97                                     
   96 CONTINUE                                                          
      J=NION8                                                           
   97 A=(YION8[J]-YION8(J-1))/(XION8[J]-XION8(J-1))                    
      B=(XION8(J-1)*YION8[J]-XION8[J]*YION8(J-1))/(XION8(J-1)-XION8[J]) 
      QION(8,I)=(A*EN+B)*1.D-16               
      GO TO 99
# USE BORN BETHE ABOVE XION8(NION8) EV
   98 QION(8,I)=QIONC*0.007842
   99 CONTINUE
      if(EN < (2.0*EION(8):
)) GO TO 100
      PEQION(8,I)=PEQEL(2,(I-IOFFION(8)))
# C2H2+ 
  100 if(EN <= EION(9)) GO TO 105         
      if(EN > XION9(NION9):
) GO TO 103
      DO 101 J=2,NION9                                                  
      if(EN <= XION9[J]:
) GO TO 102                                     
  101 CONTINUE                                                          
      J=NION9                                                           
  102 A=(YION9[J]-YION9(J-1))/(XION9[J]-XION9(J-1))                    
      B=(XION9(J-1)*YION9[J]-XION9[J]*YION9(J-1))/(XION9(J-1)-XION9[J]) 
      QION(9,I)=(A*EN+B)*1.D-16               
      GO TO 104
# USE BORN BETHE ABOVE XION9(NION9) EV
  103 QION(9,I)=QIONC*0.025343
  104 CONTINUE
      if(EN < (2.0*EION(9):
)) GO TO 105
      PEQION(9,I)=PEQEL(2,(I-IOFFION(9)))
# C2H3+
  105 if(EN <= EION(10)) GO TO 110         
      if(EN > XION10(NION10):
) GO TO 108
      DO 106 J=2,NION10                                                 
      if(EN <= XION10[J]:
) GO TO 107                                     
  106 CONTINUE                                                          
      J=NION10                                                          
  107 A=(YION10[J]-YION10(J-1))/(XION10[J]-XION10(J-1))                
      B=(XION10(J-1)*YION10[J]-XION10[J]*YION10(J-1))/(XION10(J-1)-XION10[J]) 
      QION(10,I)=(A*EN+B)*1.D-16               
      GO TO 109
# USE BORN BETHE ABOVE XION10(NION10) EV
  108 QION(10,I)=QIONC*0.112253    
  109 CONTINUE
      if(EN < (2.0*EION(10):
)) GO TO 110
      PEQION(10,I)=PEQEL(2,(I-IOFFION(10)))
# C3H3+
  110 if(EN <= EION(11)) GO TO 115         
      if(EN > XION11(NION11):
) GO TO 113
      DO 111 J=2,NION11                                                 
      if(EN <= XION11[J]:
) GO TO 112                                     
  111 CONTINUE                                                          
      J=NION11                                                          
  112 A=(YION11[J]-YION11(J-1))/(XION11[J]-XION11(J-1))                
      B=(XION11(J-1)*YION11[J]-XION11[J]*YION11(J-1))/(XION11(J-1)-XION11[J]) 
      QION(11,I)=(A*EN+B)*1.D-16               
      GO TO 114
# USE BORN BETHE ABOVE XION11(NION11) EV
  113 QION(11,I)=QIONC*0.049359
  114 CONTINUE
      if(EN < (2.0*EION(11):
)) GO TO 115
      PEQION(11,I)=PEQEL(2,(I-IOFFION(11)))
# H+
  115 if(EN <= EION(12)) GO TO 120         
      if(EN > XION12(NION12):
) GO TO 118
      DO 116 J=2,NION12                                                 
      if(EN <= XION12[J]:
) GO TO 117                                     
  116 CONTINUE                                                          
      J=NION12                                                          
  117 A=(YION12[J]-YION12(J-1))/(XION12[J]-XION12(J-1))                
      B=(XION12(J-1)*YION12[J]-XION12[J]*YION12(J-1))/(XION12(J-1)-XION12[J]) 
      QION(12,I)=(A*EN+B)*1.D-16               
      GO TO 119
# USE BORN BETHE ABOVE XION12(NION12) EV
  118 QION(12,I)=QIONC*0.001884
  119 CONTINUE
      if(EN < (2.0*EION(12):
)) GO TO 120
      PEQION(12,I)=PEQEL(2,(I-IOFFION(12)))
# H2+  AND H3+
  120 if(EN <= EION(13)) GO TO 125         
      if(EN > XION13(NION13):
) GO TO 123
      DO 121 J=2,NION13                                                 
      if(EN <= XION13[J]:
) GO TO 122                                     
  121 CONTINUE                                                          
      J=NION13                                                          
  122 A=(YION13[J]-YION13(J-1))/(XION13[J]-XION13(J-1))                
      B=(XION13(J-1)*YION13[J]-XION13[J]*YION13(J-1))/(XION13(J-1)-XION13[J]) 
      QION(13,I)=(A*EN+B)*1.D-16               
      GO TO 124
# USE BORN BETHE ABOVE XION13(NION13) EV
  123 QION(13,I)=QIONC*0.001015
  124 CONTINUE
      if(EN < (2.0*EION(13):
)) GO TO 125
      PEQION(13,I)=PEQEL(2,(I-IOFFION(13)))
# CH2+
  125 if(EN <= EION(14)) GO TO 130         
      if(EN > XION14(NION14):
) GO TO 128
      DO 126 J=2,NION14                                                 
      if(EN <= XION14[J]:
) GO TO 127                                     
  126 CONTINUE                                                          
      J=NION14                                                          
  127 A=(YION14[J]-YION14(J-1))/(XION14[J]-XION14(J-1))                
      B=(XION14(J-1)*YION14[J]-XION14[J]*YION14(J-1))/(XION14(J-1)-XION14[J]) 
      QION(14,I)=(A*EN+B)*1.D-16               
      GO TO 129
# USE BORN BETHE ABOVE XION14(NION14) EV
  128 QION(14,I)=QIONC*0.006342
  129 CONTINUE
      if(EN < (2.0*EION(14):
)) GO TO 130
      PEQION(14,I)=PEQEL(2,(I-IOFFION(14)))
# C3H2+
  130 if(EN <= EION(15)) GO TO 135         
      if(EN > XION15(NION15):
) GO TO 133
      DO 131 J=2,NION15                                                 
      if(EN <= XION15[J]:
) GO TO 132                                     
  131 CONTINUE                                                          
      J=NION15                                                          
  132 A=(YION15[J]-YION15(J-1))/(XION15[J]-XION15(J-1))                
      B=(XION15(J-1)*YION15[J]-XION15[J]*YION15(J-1))/(XION15(J-1)-XION15[J]) 
      QION(15,I)=(A*EN+B)*1.D-16               
      GO TO 134
# USE BORN BETHE ABOVE XION15(NION15) EV
  133 QION(15,I)=QIONC*0.013401
  134 CONTINUE
      if(EN < (2.0*EION(15):
)) GO TO 135
      PEQION(15,I)=PEQEL(2,(I-IOFFION(15)))
# C3H+
  135 if(EN <= EION(16)) GO TO 140         
      if(EN > XION16(NION16):
) GO TO 138
      DO 136 J=2,NION16                                                 
      if(EN <= XION16[J]:
) GO TO 137                                     
  136 CONTINUE                                                          
      J=NION16                                                          
  137 A=(YION16[J]-YION16(J-1))/(XION16[J]-XION16(J-1))                
      B=(XION16(J-1)*YION16[J]-XION16[J]*YION16(J-1))/(XION16(J-1)-XION16[J]) 
      QION(16,I)=(A*EN+B)*1.D-16               
      GO TO 139
# USE BORN BETHE ABOVE XION16(NION16) EV
  138 QION(16,I)=QIONC*0.008240
  139 CONTINUE
      if(EN < (2.0*EION(16):
)) GO TO 140
      PEQION(16,I)=PEQEL(2,(I-IOFFION(16)))
# C2H+
  140 if(EN <= EION(17)) GO TO 145         
      if(EN > XION17(NION17):
) GO TO 143
      DO 141 J=2,NION17                                                 
      if(EN <= XION17[J]:
) GO TO 142                                     
  141 CONTINUE                                                          
      J=NION17                                                          
  142 A=(YION17[J]-YION17(J-1))/(XION17[J]-XION17(J-1))                
      B=(XION17(J-1)*YION17[J]-XION17[J]*YION17(J-1))/(XION17(J-1)-XION17[J]) 
      QION(17,I)=(A*EN+B)*1.D-16               
      GO TO 144
# USE BORN BETHE ABOVE XION17(NION17) EV
  143 QION(17,I)=QIONC*0.002004
  144 CONTINUE
      if(EN < (2.0*EION(17):
)) GO TO 145
      PEQION(17,I)=PEQEL(2,(I-IOFFION(17)))
# ++ DOUBLE CHARGED STABLE IONS
  145 if(EN <= EION(18)) GO TO 150         
      if(EN > XION18(NION18):
) GO TO 148
      DO 146 J=2,NION18                                                 
      if(EN <= XION18[J]:
) GO TO 147                                     
  146 CONTINUE                                                          
      J=NION18                                                          
  147 A=(YION18[J]-YION18(J-1))/(XION18[J]-XION18(J-1))                
      B=(XION18(J-1)*YION18[J]-XION18[J]*YION18(J-1))/(XION18(J-1)-XION18[J]) 
      QION(18,I)=(A*EN+B)*1.D-16               
      GO TO 149
# USE BORN BETHE ABOVE XION18(NION18) EV
  148 QION(18,I)=QIONC*0.004085
  149 CONTINUE
      if(EN < (2.0*EION(18):
)) GO TO 150
      PEQION(18,I)=PEQEL(2,(I-IOFFION(18)))
# ++ DOUBLE CHARGED UNSTABLE IONS (DISSOCIATIVE)
  150 if(EN <= EION(19)) GO TO 155         
      if(EN > XION19(NION19):
) GO TO 153
      DO 151 J=2,NION19                                                 
      if(EN <= XION19[J]:
) GO TO 152                                     
  151 CONTINUE                                                          
      J=NION19                                                         
  152 A=(YION19[J]-YION19(J-1))/(XION19[J]-XION19(J-1))                
      B=(XION19(J-1)*YION19[J]-XION19[J]*YION19(J-1))/(XION19(J-1)-XION19[J]) 
      QION(19,I)=(A*EN+B)*1.D-16               
      GO TO 154
# USE BORN BETHE ABOVE XION19(NION19) EV
  153 QION(19,I)=QIONC*0.118714
  154 CONTINUE
      if(EN < (2.0*EION(19):
)) GO TO 155
      PEQION(19,I)=PEQEL(2,(I-IOFFION(19)))
# CH+
  155 if(EN <= EION(20)) GO TO 160         
      if(EN > XION20(NION20):
) GO TO 158
      DO 156 J=2,NION20                                                 
      if(EN <= XION20[J]:
) GO TO 157                                     
  156 CONTINUE                                                          
      J=NION20                                                         
  157 A=(YION20[J]-YION20(J-1))/(XION20[J]-XION20(J-1))                
      B=(XION20(J-1)*YION20[J]-XION20[J]*YION20(J-1))/(XION20(J-1)-XION20[J]) 
      QION(20,I)=(A*EN+B)*1.D-16               
      GO TO 159
# USE BORN BETHE ABOVE XION20(NION20) EV
  158 QION(20,I)=QIONC*0.002070
  159 CONTINUE
      if(EN < (2.0*EION(20):
)) GO TO 160
      PEQION(20,I)=PEQEL(2,(I-IOFFION(20)))
# C+ 
  160 if(EN <= EION(21)) GO TO 165         
      if(EN > XION21(NION21):
) GO TO 163
      DO 161 J=2,NION21                                                 
      if(EN <= XION21[J]:
) GO TO 162                                     
  161 CONTINUE                                                          
      J=NION21                                                         
  162 A=(YION21[J]-YION21(J-1))/(XION21[J]-XION21(J-1))                
      B=(XION21(J-1)*YION21[J]-XION21[J]*YION21(J-1))/(XION21(J-1)-XION21[J]) 
      QION(21,I)=(A*EN+B)*1.D-16               
      GO TO 164
# USE BORN BETHE ABOVE XION21(NION21) EV
  163 QION(21,I)=QIONC*0.000837
  164 CONTINUE
      if(EN < (2.0*EION(21):
)) GO TO 165
      PEQION(21,I)=PEQEL(2,(I-IOFFION(21)))
# C2+
  165 if(EN <= EION(22)) GO TO 170         
      if(EN > XION22(NION22):
) GO TO 168
      DO 166 J=2,NION22                                                 
      if(EN <= XION22[J]:
) GO TO 167                                     
  166 CONTINUE                                                          
      J=NION22                                                         
  167 A=(YION22[J]-YION22(J-1))/(XION22[J]-XION22(J-1))                
      B=(XION22(J-1)*YION22[J]-XION22[J]*YION22(J-1))/(XION22(J-1)-XION22[J]) 
      QION(22,I)=(A*EN+B)*1.D-16               
      GO TO 169
# USE BORN BETHE ABOVE XION22(NION22) EV
  168 QION(22,I)=QIONC*0.000057
  169 CONTINUE
      if(EN < (2.0*EION(22):
)) GO TO 170
      PEQION(22,I)=PEQEL(2,(I-IOFFION(22)))
# C3+
  170 if(EN <= EION(23)) GO TO 175         
      if(EN > XION23(NION23):
) GO TO 173
      DO 171 J=2,NION23                                                 
      if(EN <= XION23[J]:
) GO TO 172                                     
  171 CONTINUE                                                          
      J=NION23                                                         
  172 A=(YION23[J]-YION23(J-1))/(XION23[J]-XION23(J-1))                
      B=(XION23(J-1)*YION23[J]-XION23[J]*YION23(J-1))/(XION23(J-1)-XION23[J]) 
      QION(23,I)=(A*EN+B)*1.D-16               
      GO TO 174
# USE BORN BETHE ABOVE XION23(NION23) EV
  173 QION(23,I)=QIONC*0.001034
  174 CONTINUE
      if(EN < (2.0*EION(23):
)) GO TO 175
      PEQION(23,I)=PEQEL(2,(I-IOFFION(23)))
# CARBON K-SHELL 
  175 if(EN <= EION(24)) GO TO 180         
      DO 176 J=2,NION24                                                 
      if(EN <= XION24[J]:
) GO TO 177                                     
  176 CONTINUE                                                          
      J=NION24                                                          
  177 A=(YION24[J]-YION24(J-1))/(XION24[J]-XION24(J-1))                
      B=(XION24(J-1)*YION24[J]-XION24[J]*YION24(J-1))/(XION24(J-1)-XION24[J]) 
# FACTOR 3 FOR 3 CARBON ATOMS
      QION(24,I)=3.0*(A*EN+B)*1.D-16               
      if(EN < (2.0*EION(24):
)) GO TO 180
      PEQION(24,I)=PEQEL(2,(I-IOFFION(24)))
# CORRECTION TO TOTAL I0NISATION DUE TO SPLIT OFF KSHELL
  180 QSUM=0.00
      DO 181 L=1,23
  181 QSUM=QSUM+QION(L,I)
      if(QSUM == 0.0):
 GO TO 200
      FAC=(QSUM-QION(24,I))/QSUM
      DO 182 L=1,23
  182 QION(L,I)=QION(L,I)*FAC 
#
# DISSOCIATIVE ATTACHMENT TO CH3-
#
  200 Q(4,I)=0.0
      QATT(1,I)=0.0
      if(EN <= XATT1[1]:
) GO TO 230                                     
      if(EN >= XATT1(NATT1):
) GO TO 230                                  
      DO 210 J=2,NATT1                                                  
      if(EN <= XATT1[J]:
) GO TO 220                                     
  210 CONTINUE                                                          
      J=NATT1                                                          
  220 A=(YATT1[J]-YATT1(J-1))/(XATT1[J]-XATT1(J-1))                    
      B=(XATT1(J-1)*YATT1[J]-XATT1[J]*YATT1(J-1))/(XATT1(J-1)-XATT1[J]) 
      QATT(1,I)=(A*EN+B)*1.D-16
# DISSOCIATIVE ATTACHMENT  TO H-
  230 QATT(2,I)=0.0
      if(EN <= XATT2[1]:
) GO TO 300                                     
      if(EN >= XATT2(NATT2):
) GO TO 300                                  
      DO 240 J=2,NATT2                                                  
      if(EN <= XATT2[J]:
) GO TO 250                                     
  240 CONTINUE                                                          
      J=NATT2                                                          
  250 A=(YATT2[J]-YATT2(J-1))/(XATT2[J]-XATT2(J-1))                    
      B=(XATT2(J-1)*YATT2[J]-XATT2[J]*YATT2(J-1))/(XATT2(J-1)-XATT2[J]) 
      QATT(2,I)=(A*EN+B)*1.D-16
#                                    
  300 Q(5,I)=0.0                                                        
      Q(6,I)=0.0                                                        
# SET ZEROS 
      DO 301 L=1,NIN
      QIN(L,I)=0.00
  301 PEQIN(L,I)=0.00
#          
# SUPERELASTIC VIBRATION TORSION           ANISOTROPIC ABOVE 10EV
      if(EN <= 0.0):
 GO TO 302
      EFAC=math.sqrt(1.0-(EIN[1]/EN))
      QIN(1,I)=0.00536*math.log((EFAC+1.0)/(EFAC-1.0))/EN 
      QIN(1,I)=QIN(1,I)*APOP1/(1.0+APOP1)*1.D-16    
      if(EN > 10.0):
 PEQIN(1,I)=PEQEL(2,(I-IOFFN[1]))
#   VIBRATION TORSION                      ANISOTROPIC ABOVE 10EV
  302 if(EN <= EIN(2)) GO TO 303
      EFAC=math.sqrt(1.0-(EIN(2)/EN))
      QIN(2,I)=0.00536*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      QIN(2,I)=QIN(2,I)*1.0/(1.0+APOP1)*1.D-16    
      if(EN > 10.0):
 PEQIN(2,I)=PEQEL(2,(I-IOFFN(2)))
#
# VIBRATION SUPERELASTIC                   ANISOTROPIC ABOVE 10EV
  303 if(EN <= 0.0) GO TO 316
      if((EN+EIN(4):
) > XVIB1(NVIB1)) GO TO 314 
      DO 312 J=2,NVIB1
      if((EN+EIN(4):
) <= XVIB1[J]) GO TO 313
  312 CONTINUE
      J=NVIB1
  313 A=(YVIB1[J]-YVIB1(J-1))/(XVIB1[J]-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1[J]-XVIB1[J]*YVIB1(J-1))/(XVIB1(J-1)-XVIB1[J])
      QIN(3,I)=(EN+EIN(4))*(A*(EN+EIN(4))+B)/EN
      GO TO 315
  314 QIN(3,I)=YVIB1(NVIB1)*(XVIB1(NVIB1)/(EN+EIN(4)))**2
  315 QIN(3,I)=QIN(3,I)*APOP2/(1.0+APOP2)*1.D-16        
      if(EN > 10.0):
 PEQIN(3,I)=PEQEL(2,(I-IOFFN(3)))
#     
# VIBRATION INELASTIC                    ANISOTROPIC ABOVE 10EV 
  316 if(EN <= EIN(4)) GO TO 321                   
      if(EN > XVIB1(NVIB1):
) GO TO 319                      
      DO 317 J=2,NVIB1                                                  
      if(EN <= XVIB1[J]:
) GO TO 318                                     
  317 CONTINUE                                                          
      J=NVIB1                                                           
  318 A=(YVIB1[J]-YVIB1(J-1))/(XVIB1[J]-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1[J]-XVIB1[J]*YVIB1(J-1))/(XVIB1(J-1)-XVIB1[J]) 
      QIN(4,I)=(A*EN+B)
      GO TO 320
  319 QIN(4,I)=YVIB1(NVIB1)*(XVIB1(NVIB1)/EN)**2
  320 QIN(4,I)=QIN(4,I)/(1.0+APOP2)*1.D-16           
      if(EN > 10.0):
 PEQIN(4,I)=PEQEL(2,(I-IOFFN(4)))    
#               
#  SUPERELASTIC VIBRATION                  ANISOTROPIC ABOVE 10EV                          
  321 if(EN <= 0.0) GO TO 326   
      if((EN+EIN(6):
) > XVIB2(NVIB2)) GO TO 324                         
      DO 322 J=2,NVIB2
      if((EN+EIN(6):
) <= XVIB2[J]) GO TO 323                             
  322 CONTINUE                                                          
      J=NVIB2                                                           
  323 A=(YVIB2[J]-YVIB2(J-1))/(XVIB2[J]-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2[J]-XVIB2[J]*YVIB2(J-1))/(XVIB2(J-1)-XVIB2[J]) 
      QIN(5,I)=(EN+EIN(6))*(A*(EN+EIN(6))+B)/EN
      GO TO 325
  324 QIN(5,I)=YVIB2(NVIB2)*(XVIB2(NVIB2)/(EN+EIN(6)))**2
  325 QIN(5,I)=QIN(5,I)*APOP3/(1.0+APOP3)*1.D-16           
      if(EN > 10.0):
 PEQIN(5,I)=PEQEL(2,(I-IOFFN(5)))                 
#                                                       
#  VIBRATION                              ANISOTROPIC ABOVE 10EV                          
  326 if(EN <= EIN(6)) GO TO 331  
      if(EN > XVIB2(NVIB2):
) GO TO 329                                  
      DO 327 J=2,NVIB2                                                  
      if(EN <= XVIB2[J]:
) GO TO 328                                      
  327 CONTINUE                                                          
      J=NVIB2                                                           
  328 A=(YVIB2[J]-YVIB2(J-1))/(XVIB2[J]-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2[J]-XVIB2[J]*YVIB2(J-1))/(XVIB2(J-1)-XVIB2[J]) 
      QIN(6,I)=(A*EN+B)
      GO TO 330
  329 QIN(6,I)=YVIB2(NVIB2)*(XVIB2(NVIB2)/EN)**2
  330 QIN(6,I)=QIN(6,I)/(1.0+APOP3)*1.D-16          
      if(EN > 10.0):
 PEQIN(6,I)=PEQEL(2,(I-IOFFN(6)))             
#                                                          
# VIBRATION INELASTIC                 
  331 if(EN <= EIN(7)) GO TO 341 
      if(EN > XVIB3(NVIB3):
) GO TO 334 
      DO 332 J=2,NVIB3                                                  
      if(EN <= XVIB3[J]:
) GO TO 333                                      
  332 CONTINUE                                                          
      J=NVIB3                                                           
  333 A=(YVIB3[J]-YVIB3(J-1))/(XVIB3[J]-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3[J]-XVIB3[J]*YVIB3(J-1))/(XVIB3(J-1)-XVIB3[J]) 
      QIN(7,I)=(A*EN+B)        
      GO TO 335
  334 QIN(7,I)=YVIB3(NVIB3)*(XVIB3(NVIB3)/EN)**2
  335 QIN(7,I)=QIN(7,I)*1.D-16         
      if(EN > 10.0):
 PEQIN(7,I)=PEQEL(2,(I-IOFFN(7)))                   
#                                                                       
# VIBRATION INELASTIC                                               
  341 if(EN <= EIN(8)) GO TO 351    
      if(EN > XVIB4(NVIB4):
) GO TO 344
      DO 342 J=2,NVIB4                                                  
      if(EN <= XVIB4[J]:
) GO TO 343                                      
  342 CONTINUE                                                          
      J=NVIB4                                                           
  343 A=(YVIB4[J]-YVIB4(J-1))/(XVIB4[J]-XVIB4(J-1))                     
      B=(XVIB4(J-1)*YVIB4[J]-XVIB4[J]*YVIB4(J-1))/(XVIB4(J-1)-XVIB4[J]) 
      QIN(8,I)=(A*EN+B)           
      GO TO 345
  344 QIN(8,I)=YVIB4(NVIB4)*(XVIB4(NVIB4)/EN)**2
  345 QIN(8,I)=QIN(8,I)*1.D-16
      if(QIN(8,I):
 < 0.0) QIN(8,I)=0.0
      if(EN > 10.0):
 PEQIN(8,I)=PEQEL(2,(I-IOFFN(8))) 
  351 CONTINUE    
#
# EXCITATIONS
#
#  
# EXCITATION TO TRIPLET AND SINGLET LEVELS
#
# FIRST TRIPLET AT  6.57 EV
      if(EN <= EIN(9):
) GO TO 405
      if(EN > XTR1(NTR1):
) GO TO 403                                   
      DO 401 J=2,NTR1                                              
      if(EN <= XTR1[J]:
) GO TO 402                                  
  401 CONTINUE                                                          
      J=NTR1                                       
  402 A=(YTR1[J]-YTR1(J-1))/(XTR1[J]-XTR1(J-1))                    
      B=(XTR1(J-1)*YTR1[J]-XTR1[J]*YTR1(J-1))/(XTR1(J-1)-XTR1[J])       
      QIN(9,I)=(A*EN+B)*1.D-16     
      GO TO 404
# SCALE BY 1/E**2 ABOVE XTR1(NTR1) EV
  403 QIN(9,I)=YTR1(NTR1)*(XTR1(NTR1)/EN)**2*1.D-16
  404 if(EN <= (3.0*EIN(9))) GO TO 405
      PEQIN(9,I)=PEQEL(2,(I-IOFFN(9)))
#
# SINGLET DISSOCIATION AT  7.65  EV     BEF SCALING F=.000339          
  405 if(EN <= (EIN(10))) GO TO 406
      QIN(10,I)=0.000339/(EIN(10)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(10)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(10)+E(3))
      if(QIN(10,I):
 < 0.0) QIN(10,I)=0.0
      if(EN <= (3.0*EIN(10):
)) GO TO 406
      PEQIN(10,I)=PEQEL(2,(I-IOFFN(10)))
# 
# SECOND TRIPLET AT  7.67 EV                                   
  406 if(EN <= EIN(11)) GO TO 411
      if(EN > XTR2(NTR2):
) GO TO 409  
      DO 407 J=2,NTR2                                                  
      if(EN <= XTR2[J]:
) GO TO 408                                      
  407 CONTINUE                                                          
      J=NTR2                                                           
  408 A=(YTR2[J]-YTR2(J-1))/(XTR2[J]-XTR2(J-1))                     
      B=(XTR2(J-1)*YTR2[J]-XTR2[J]*YTR2(J-1))/(XTR2(J-1)-XTR2[J]) 
      QIN(11,I)=(A*EN+B)*1.D-16
      GO TO 410
# SCALE BY 1/E**2 ABOVE XTR2(NTR2) EV
  409 QIN(11,I)=YTR2(NTR2)*(XTR2(NTR2)/EN)**2*1.D-16
  410 if(EN <= (3.0*EIN(11))) GO TO 411
      PEQIN(11,I)=PEQEL(2,(I-IOFFN(11)))
#
# SINGLET DISSOCIATION AT  7.95  EV     BEF SCALING F=.004660
  411 if(EN <= (EIN(12))) GO TO 412
      QIN(12,I)=0.004660/(EIN(12)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(12)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(12)+E(3))
      if(QIN(12,I):
 < 0.0) QIN(12,I)=0.0
      if(EN <= (3.0*EIN(12):
)) GO TO 412
      PEQIN(12,I)=PEQEL(2,(I-IOFFN(12)))
# SINGLET DISSOCIATION AT  8.25  EV     BEF SCALING F=.012816
  412 if(EN <= (EIN(13))) GO TO 413
      QIN(13,I)=0.012816/(EIN(13)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(13)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(13)+E(3))
      if(QIN(13,I):
 < 0.0) QIN(13,I)=0.0
      if(EN <= (3.0*EIN(13):
)) GO TO 413
      PEQIN(13,I)=PEQEL(2,(I-IOFFN(13)))
# SINGLET DISSOCIATION AT  8.55  EV     BEF SCALING F=.037747
  413 if(EN <= (EIN(14))) GO TO 414
      QIN(14,I)=0.037747/(EIN(14)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(14)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(14)+E(3))
      if(QIN(14,I):
 < 0.0) QIN(14,I)=0.0
      if(EN <= (3.0*EIN(14):
)) GO TO 414
      PEQIN(14,I)=PEQEL(2,(I-IOFFN(14)))
# SINGLET DISSOCIATION AT  8.85  EV     BEF SCALING F=.081783
  414 if(EN <= (EIN(15))) GO TO 415
      QIN(15,I)=0.081783/(EIN(15)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(15)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(15)+E(3))
      if(QIN(15,I):
 < 0.0) QIN(15,I)=0.0
      if(EN <= (3.0*EIN(15):
)) GO TO 415
      PEQIN(15,I)=PEQEL(2,(I-IOFFN(15)))
# SINGLET DISSOCIATION AT  9.15  EV     BEF SCALING F=.084248
  415 if(EN <= (EIN(16))) GO TO 416
      QIN(16,I)=0.084248/(EIN(16)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(16)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(16)+E(3))
      if(QIN(16,I):
 < 0.0) QIN(16,I)=0.0
      if(EN <= (3.0*EIN(16):
)) GO TO 416
      PEQIN(16,I)=PEQEL(2,(I-IOFFN(16)))
# SINGLET DISSOCIATION AT  9.45  EV     BEF SCALING F=.090347
  416 if(EN <= (EIN(17))) GO TO 422
      QIN(17,I)=0.090347/(EIN(17)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(17)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(17)+E(3))
      if(QIN(17,I):
 < 0.0) QIN(17,I)=0.0
      if(EN <= (3.0*EIN(17):
)) GO TO 422
      PEQIN(17,I)=PEQEL(2,(I-IOFFN(17)))
#
# THIRD TRIPLET AT 9.59 EV                                   
  422 if(EN <= EIN(18)) GO TO 417
      if(EN > XTR3(NTR3):
) GO TO 425  
      DO 423 J=2,NTR3                                                  
      if(EN <= XTR3[J]:
) GO TO 424                                      
  423 CONTINUE                                                          
      J=NTR3                                                           
  424 A=(YTR3[J]-YTR3(J-1))/(XTR3[J]-XTR3(J-1))                     
      B=(XTR3(J-1)*YTR3[J]-XTR3[J]*YTR3(J-1))/(XTR3(J-1)-XTR3[J]) 
      QIN(18,I)=(A*EN+B)*1.D-16
      GO TO 426
# SCALE BY 1/E**2 ABOVE XTR3(NTR3) EV
  425 QIN(18,I)=YTR3(NTR3)*(XTR3(NTR3)/EN)**2*1.D-16     
  426 if(EN <= (3.0*EIN(18))) GO TO 417
      PEQIN(18,I)=PEQEL(2,(I-IOFFN(18)))
#
# SINGLET DISSOCIATION AT  9.75  EV     BEF SCALING F=.098580
  417 if(EN <= (EIN(19))) GO TO 418
      QIN(19,I)=0.098580/(EIN(19)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(19)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(19)+E(3))
      if(QIN(19,I):
 < 0.0) QIN(19,I)=0.0
      if(EN <= (3.0*EIN(19):
)) GO TO 418
      PEQIN(19,I)=PEQEL(2,(I-IOFFN(19)))
# SINGLET DISSOCIATION AT  10.05 EV     BEF SCALING F=.10415 
  418 if(EN <= (EIN(20))) GO TO 419
      QIN(20,I)=0.104150/(EIN(20)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(20)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(20)+E(3))
      if(QIN(20,I):
 < 0.0) QIN(20,I)=0.0
      if(EN <= (3.0*EIN(20):
)) GO TO 419
      PEQIN(20,I)=PEQEL(2,(I-IOFFN(20)))
# SINGLET DISSOCIATION AT  10.35 EV     BEF SCALING F=.11379 
  419 if(EN <= (EIN(21))) GO TO 420
      QIN(21,I)=0.113790/(EIN(21)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(21)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(21)+E(3))
      if(QIN(21,I):
 < 0.0) QIN(21,I)=0.0
      if(EN <= (3.0*EIN(21):
)) GO TO 420
      PEQIN(21,I)=PEQEL(2,(I-IOFFN(21)))
# SINGLET DISSOCIATION AT  10.65 EV     BEF SCALING F=.12674 
  420 if(EN <= (EIN(22))) GO TO 421
      QIN(22,I)=0.126740/(EIN(22)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(22)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(22)+E(3))
      if(QIN(22,I):
 < 0.0) QIN(22,I)=0.0
      if(EN <= (3.0*EIN(22):
)) GO TO 421
      PEQIN(22,I)=PEQEL(2,(I-IOFFN(22)))
# SINGLET DISSOCIATION AT  10.9  EV     BEF SCALING F=.096356
  421 if(EN <= (EIN(23))) GO TO 427
      QIN(23,I)=0.096356/(EIN(23)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(23)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(23)+E(3))
      if(QIN(23,I):
 < 0.0) QIN(23,I)=0.0
      if(EN <= (3.0*EIN(23):
)) GO TO 427
      PEQIN(23,I)=PEQEL(2,(I-IOFFN(23)))
# SINGLET DISSOCIATION AT 11.1   EV     BEF SCALING F=.10387 
  427 if(EN <= (EIN(24))) GO TO 428
      QIN(24,I)=0.103870/(EIN(24)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(24)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(24)+E(3))
      if(QIN(24,I):
 < 0.0) QIN(24,I)=0.0
      if(EN <= (3.0*EIN(24):
)) GO TO 428
      PEQIN(24,I)=PEQEL(2,(I-IOFFN(24)))
# SINGLET DISSOCIATION AT 11.3   EV     BEF SCALING F=.10183 
  428 if(EN <= (EIN(25))) GO TO 429
      QIN(25,I)=0.101830/(EIN(25)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(25)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(25)+E(3))
      if(QIN(25,I):
 < 0.0) QIN(25,I)=0.0
      if(EN <= (3.0*EIN(25):
)) GO TO 429
      PEQIN(25,I)=PEQEL(2,(I-IOFFN(25)))
# SINGLET DISSOCIATION AT 11.5   EV     BEF SCALING F=.096718
  429 if(EN <= (EIN(26))) GO TO 430
      QIN(26,I)=0.096718/(EIN(26)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(26)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(26)+E(3))
      if(QIN(26,I):
 < 0.0) QIN(26,I)=0.0
      if(EN <= (3.0*EIN(26):
)) GO TO 430
      PEQIN(26,I)=PEQEL(2,(I-IOFFN(26)))
# SINGLET DISSOCIATION AT 11.7   EV     BEF SCALING F=.090149
  430 if(EN <= (EIN(27))) GO TO 431
      QIN(27,I)=0.090149/(EIN(27)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(27)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(27)+E(3))
      if(QIN(27,I):
 < 0.0) QIN(27,I)=0.0
      if(EN <= (3.0*EIN(27):
)) GO TO 431
      PEQIN(27,I)=PEQEL(2,(I-IOFFN(27)))
# SINGLET DISSOCIATION AT 11.9   EV     BEF SCALING F=.086661
  431 if(EN <= (EIN(28))) GO TO 432
      QIN(28,I)=0.086661/(EIN(28)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(28)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(28)+E(3))
      if(QIN(28,I):
 < 0.0) QIN(28,I)=0.0
      if(EN <= (3.0*EIN(28):
)) GO TO 432
      PEQIN(28,I)=PEQEL(2,(I-IOFFN(28)))
# SINGLET DISSOCIATION AT 12.1   EV     BEF SCALING F=.086097
  432 if(EN <= (EIN(29))) GO TO 433
      QIN(29,I)=0.086097/(EIN(29)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(29)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(29)+E(3))
      if(QIN(29,I):
 < 0.0) QIN(29,I)=0.0
      if(EN <= (3.0*EIN(29):
)) GO TO 433
      PEQIN(29,I)=PEQEL(2,(I-IOFFN(29)))
# SINGLET DISSOCIATION AT 12.3   EV     BEF SCALING F=.083324
  433 if(EN <= (EIN(30))) GO TO 434
      QIN(30,I)=0.083324/(EIN(30)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(30)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(30)+E(3))
      if(QIN(30,I):
 < 0.0) QIN(30,I)=0.0
      if(EN <= (3.0*EIN(30):
)) GO TO 434
      PEQIN(30,I)=PEQEL(2,(I-IOFFN(30)))
# SINGLET DISSOCIATION AT 12.5   EV     BEF SCALING F=.079943
  434 if(EN <= (EIN(31))) GO TO 435
      QIN(31,I)=0.079943/(EIN(31)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(31)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(31)+E(3))
      if(QIN(31,I):
 < 0.0) QIN(31,I)=0.0
      if(EN <= (3.0*EIN(31):
)) GO TO 435
      PEQIN(31,I)=PEQEL(2,(I-IOFFN(31)))
# SINGLET DISSOCIATION AT 12.7   EV     BEF SCALING F=.077210
  435 if(EN <= (EIN(32))) GO TO 436
      QIN(32,I)=0.077210/(EIN(32)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(32)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(32)+E(3))
      if(QIN(32,I):
 < 0.0) QIN(32,I)=0.0
      if(EN <= (3.0*EIN(32):
)) GO TO 436
      PEQIN(32,I)=PEQEL(2,(I-IOFFN(32)))
# SINGLET DISSOCIATION AT 12.9   EV     BEF SCALING F=.070368
  436 if(EN <= (EIN(33))) GO TO 437
      QIN(33,I)=0.070368/(EIN(33)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(33)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(33)+E(3))
      if(QIN(33,I):
 < 0.0) QIN(33,I)=0.0
      if(EN <= (2.0*EIN(33):
)) GO TO 437
      PEQIN(33,I)=PEQEL(2,(I-IOFFN(33)))
# SINGLET DISSOCIATION AT 13.1   EV     BEF SCALING F=.061365
  437 if(EN <= (EIN(34))) GO TO 438
      QIN(34,I)=0.061365/(EIN(34)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(34)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(34)+E(3))
      if(QIN(34,I):
 < 0.0) QIN(34,I)=0.0
      if(EN <= (2.0*EIN(34):
)) GO TO 438
      PEQIN(34,I)=PEQEL(2,(I-IOFFN(34)))
# SINGLET DISSOCIATION AT 13.3   EV     BEF SCALING F=.053208
  438 if(EN <= (EIN(35))) GO TO 439
      QIN(35,I)=0.053208/(EIN(35)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(35)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(35)+E(3))
      if(QIN(35,I):
 < 0.0) QIN(35,I)=0.0
      if(EN <= (2.0*EIN(35):
)) GO TO 439
      PEQIN(35,I)=PEQEL(2,(I-IOFFN(35)))
# SINGLET DISSOCIATION AT 13.5   EV     BEF SCALING F=.046320
  439 if(EN <= (EIN(36))) GO TO 440
      QIN(36,I)=0.046320/(EIN(36)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(36)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(36)+E(3))
      if(QIN(36,I):
 < 0.0) QIN(36,I)=0.0
      if(EN <= (2.0*EIN(36):
)) GO TO 440
      PEQIN(36,I)=PEQEL(2,(I-IOFFN(36)))
# SINGLET DISSOCIATION AT 13.7   EV     BEF SCALING F=.042827
  440 if(EN <= (EIN(37))) GO TO 441
      QIN(37,I)=0.042827/(EIN(37)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(37)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(37)+E(3))
      if(QIN(37,I):
 < 0.0) QIN(37,I)=0.0
      if(EN <= (2.0*EIN(37):
)) GO TO 441
      PEQIN(37,I)=PEQEL(2,(I-IOFFN(37)))
# SINGLET DISSOCIATION AT 13.9   EV     BEF SCALING F=.038898
  441 if(EN <= (EIN(38))) GO TO 442
      QIN(38,I)=0.038898/(EIN(38)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(38)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(38)+E(3))
      if(QIN(38,I):
 < 0.0) QIN(38,I)=0.0
      if(EN <= (2.0*EIN(38):
)) GO TO 442
      PEQIN(38,I)=PEQEL(2,(I-IOFFN(38)))
# SINGLET DISSOCIATION AT 14.1   EV     BEF SCALING F=.035930
  442 if(EN <= (EIN(39))) GO TO 443
      QIN(39,I)=0.035930/(EIN(39)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(39)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(39)+E(3))
      if(QIN(39,I):
 < 0.0) QIN(39,I)=0.0
      if(EN <= (2.0*EIN(39):
)) GO TO 443
      PEQIN(39,I)=PEQEL(2,(I-IOFFN(39)))
# SINGLET DISSOCIATION AT 14.3   EV     BEF SCALING F=.033632
  443 if(EN <= (EIN(40))) GO TO 444
      QIN(40,I)=0.033632/(EIN(40)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(40)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(40)+E(3))
      if(QIN(40,I):
 < 0.0) QIN(40,I)=0.0
      if(EN <= (2.0*EIN(40):
)) GO TO 444
      PEQIN(40,I)=PEQEL(2,(I-IOFFN(40)))
# SINGLET DISSOCIATION AT 14.5   EV     BEF SCALING F=.030562
  444 if(EN <= (EIN(41))) GO TO 445
      QIN(41,I)=0.030562/(EIN(41)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(41)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(41)+E(3))
      if(QIN(41,I):
 < 0.0) QIN(41,I)=0.0
      if(EN <= (2.0*EIN(41):
)) GO TO 445
      PEQIN(41,I)=PEQEL(2,(I-IOFFN(41)))
# SINGLET DISSOCIATION AT 14.7   EV     BEF SCALING F=.028559
  445 if(EN <= (EIN(42))) GO TO 446
      QIN(42,I)=0.028559/(EIN(42)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(42)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(42)+E(3))
      if(QIN(42,I):
 < 0.0) QIN(42,I)=0.0
      if(EN <= (2.0*EIN(42):
)) GO TO 446
      PEQIN(42,I)=PEQEL(2,(I-IOFFN(42)))
# SINGLET DISSOCIATION AT 14.9   EV     BEF SCALING F=.027052
  446 if(EN <= (EIN(43))) GO TO 447
      QIN(43,I)=0.027052/(EIN(43)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(43)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(43)+E(3))
      if(QIN(43,I):
 < 0.0) QIN(43,I)=0.0
      if(EN <= (2.0*EIN(43):
)) GO TO 447
      PEQIN(43,I)=PEQEL(2,(I-IOFFN(43)))
# SINGLET DISSOCIATION AT 15.2   EV     BEF SCALING F=.048051
  447 if(EN <= (EIN(44))) GO TO 448
      QIN(44,I)=0.048051/(EIN(44)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(44)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(44)+E(3))
      if(QIN(44,I):
 < 0.0) QIN(44,I)=0.0
      if(EN <= (2.0*EIN(44):
)) GO TO 448
      PEQIN(44,I)=PEQEL(2,(I-IOFFN(44)))
# SINGLET DISSOCIATION AT 15.6   EV     BEF SCALING F=.036375
  448 if(EN <= (EIN(45))) GO TO 449
      QIN(45,I)=0.036375/(EIN(45)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(45)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(45)+E(3))
      if(QIN(45,I):
 < 0.0) QIN(45,I)=0.0
      if(EN <= (2.0*EIN(45):
)) GO TO 449
      PEQIN(45,I)=PEQEL(2,(I-IOFFN(45)))
# SINGLET DISSOCIATION AT 16.0   EV     BEF SCALING F=.020165
  449 if(EN <= (EIN(46))) GO TO 450
      QIN(46,I)=0.020165/(EIN(46)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(46)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(46)+E(3))
      if(QIN(46,I):
 < 0.0) QIN(46,I)=0.0
      if(EN <= (2.0*EIN(46):
)) GO TO 450
      PEQIN(46,I)=PEQEL(2,(I-IOFFN(46)))
# SINGLET DISSOCIATION AT 16.4   EV     BEF SCALING F=.010038
  450 if(EN <= (EIN(47))) GO TO 451
      QIN(47,I)=0.010038/(EIN(47)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(47)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(47)+E(3))
      if(QIN(47,I):
 < 0.0) QIN(47,I)=0.0
      if(EN <= (2.0*EIN(47):
)) GO TO 451
      PEQIN(47,I)=PEQEL(2,(I-IOFFN(47)))
# SINGLET DISSOCIATION AT 16.8   EV     BEF SCALING F=.0054441
  451 if(EN <= (EIN(48))) GO TO 452
      QIN(48,I)=0.0054441/(EIN(48)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(48)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(48)+E(3))
      if(QIN(48,I):
 < 0.0) QIN(48,I)=0.0
      if(EN <= (2.0*EIN(48):
)) GO TO 452
      PEQIN(48,I)=PEQEL(2,(I-IOFFN(48)))
# SINGLET DISSOCIATION AT 17.25   EV     BEF SCALING F=.0050790
  452 if(EN <= (EIN(49))) GO TO 453
      QIN(49,I)=0.0050790/(EIN(49)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(49)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(49)+E(3))
      if(QIN(49,I):
 < 0.0) QIN(49,I)=0.0
      if(EN <= (2.0*EIN(49):
)) GO TO 453
      PEQIN(49,I)=PEQEL(2,(I-IOFFN(49)))
# SINGLET DISSOCIATION AT 17.75   EV     BEF SCALING F=.0057699
  453 if(EN <= (EIN(50))) GO TO 454
      QIN(50,I)=0.0057699/(EIN(50)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(50)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(50)+E(3))
      if(QIN(50,I):
 < 0.0) QIN(50,I)=0.0
      if(EN <= (2.0*EIN(50):
)) GO TO 454
      PEQIN(50,I)=PEQEL(2,(I-IOFFN(50)))
# SINGLET DISSOCIATION AT 18.25   EV     BEF SCALING F=.0072715
  454 if(EN <= (EIN(51))) GO TO 455
      QIN(51,I)=0.0072715/(EIN(51)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(51)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(51)+E(3))
      if(QIN(51,I):
 < 0.0) QIN(51,I)=0.0
      if(EN <= (2.0*EIN(51):
)) GO TO 455
      PEQIN(51,I)=PEQEL(2,(I-IOFFN(51)))
# SINGLET DISSOCIATION AT 18.75   EV     BEF SCALING F=.010296
  455 if(EN <= (EIN(52))) GO TO 456
      QIN(52,I)=0.010296/(EIN(52)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(52)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(52)+E(3))
      if(QIN(52,I):
 < 0.0) QIN(52,I)=0.0
      if(EN <= (2.0*EIN(52):
)) GO TO 456
      PEQIN(52,I)=PEQEL(2,(I-IOFFN(52)))
# SINGLET DISSOCIATION AT 19.25   EV     BEF SCALING F=.014152
  456 if(EN <= (EIN(53))) GO TO 457
      QIN(53,I)=0.014152/(EIN(53)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(53)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(53)+E(3))
      if(QIN(53,I):
 < 0.0) QIN(53,I)=0.0
      if(EN <= (2.0*EIN(53):
)) GO TO 457
      PEQIN(53,I)=PEQEL(2,(I-IOFFN(53)))
# SINGLET DISSOCIATION AT 19.75   EV     BEF SCALING F=.013698
  457 if(EN <= (EIN(54))) GO TO 458
      QIN(54,I)=0.013698/(EIN(54)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(54)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(54)+E(3))
      if(QIN(54,I):
 < 0.0) QIN(54,I)=0.0
      if(EN <= (2.0*EIN(54):
)) GO TO 458
      PEQIN(54,I)=PEQEL(2,(I-IOFFN(54)))
# SINGLET DISSOCIATION AT 20.25   EV     BEF SCALING F=.010362
  458 if(EN <= (EIN(55))) GO TO 459
      QIN(55,I)=0.010362/(EIN(55)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(55)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(55)+E(3))
      if(QIN(55,I):
 < 0.0) QIN(55,I)=0.0
      if(EN <= (2.0*EIN(55):
)) GO TO 459
      PEQIN(55,I)=PEQEL(2,(I-IOFFN(55)))
# SINGLET DISSOCIATION AT 20.75   EV     BEF SCALING F=.0088401
  459 if(EN <= (EIN(56))) GO TO 460
      QIN(56,I)=0.0088401/(EIN(56)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(56)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(56)+E(3))
      if(QIN(56,I):
 < 0.0) QIN(56,I)=0.0
      if(EN <= (2.0*EIN(56):
)) GO TO 460
      PEQIN(56,I)=PEQEL(2,(I-IOFFN(56)))
# SINGLET DISSOCIATION AT 21.5    EV     BEF SCALING F=.022195
  460 if(EN <= (EIN(57))) GO TO 461
      QIN(57,I)=0.022195/(EIN(57)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(57)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(57)+E(3))
      if(QIN(57,I):
 < 0.0) QIN(57,I)=0.0
      if(EN <= (2.0*EIN(57):
)) GO TO 461
      PEQIN(57,I)=PEQEL(2,(I-IOFFN(57)))
# SINGLET DISSOCIATION AT 22.5    EV     BEF SCALING F=.019172
  461 if(EN <= (EIN(58))) GO TO 462
      QIN(58,I)=0.019172/(EIN(58)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(58)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(58)+E(3))
      if(QIN(58,I):
 < 0.0) QIN(58,I)=0.0
      if(EN <= (2.0*EIN(58):
)) GO TO 462
      PEQIN(58,I)=PEQEL(2,(I-IOFFN(58)))
# SINGLET DISSOCIATION AT 23.5    EV     BEF SCALING F=.011553
  462 if(EN <= (EIN(59))) GO TO 463
      QIN(59,I)=0.011553/(EIN(59)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(59)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(59)+E(3))
      if(QIN(59,I):
 < 0.0) QIN(59,I)=0.0
      if(EN <= (2.0*EIN(59):
)) GO TO 463
      PEQIN(59,I)=PEQEL(2,(I-IOFFN(59))) 
# SINGLET DISSOCIATION AT 24.5    EV     BEF SCALING F=.0089679
  463 if(EN <= (EIN(60))) GO TO 464
      QIN(60,I)=0.0089679/(EIN(60)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(60)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(60)+E(3))
      if(QIN(60,I):
 < 0.0) QIN(60,I)=0.0
      if(EN <= (2.0*EIN(60):
)) GO TO 464
      PEQIN(60,I)=PEQEL(2,(I-IOFFN(60))) 
# SINGLET DISSOCIATION AT 25.5    EV     BEF SCALING F=.0064815
  464 if(EN <= (EIN(61))) GO TO 465
      QIN(61,I)=0.0064815/(EIN(61)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(61)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(61)+E(3))
      if(QIN(61,I):
 < 0.0) QIN(61,I)=0.0
      if(EN <= (2.0*EIN(61):
)) GO TO 465
      PEQIN(61,I)=PEQEL(2,(I-IOFFN(61))) 
# 
# FOURTH TRIPLET AT  26.0 EV                                   
  465 if(EN <= EIN(62)) GO TO 470
      if(EN > XTR4(NTR4):
) GO TO 468  
      DO 466 J=2,NTR4                                                  
      if(EN <= XTR4[J]:
) GO TO 467                                      
  466 CONTINUE                                                          
      J=NTR4                                                           
  467 A=(YTR4[J]-YTR4(J-1))/(XTR4[J]-XTR4(J-1))                     
      B=(XTR4(J-1)*YTR4[J]-XTR4[J]*YTR4(J-1))/(XTR4(J-1)-XTR4[J]) 
      QIN(62,I)=(A*EN+B)*1.D-16
      GO TO 469
# SCALE BY 1/E**2 ABOVE XTR4(NTR4) EV
  468 QIN(62,I)=YTR4(NTR4)*(XTR4(NTR4)/EN)**2*1.D-16
  469 if(EN <= (3.0*EIN(62))) GO TO 470
      PEQIN(62,I)=PEQEL(2,(I-IOFFN(62)))
#
# SINGLET DISSOCIATION AT 26.5    EV     BEF SCALING F=.0035484
  470 if(EN <= (EIN(63))) GO TO 471
      QIN(63,I)=0.0035484/(EIN(63)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(63)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(63)+E(3))
      if(QIN(63,I):
 < 0.0) QIN(63,I)=0.0
      if(EN <= (2.0*EIN(63):
)) GO TO 471
      PEQIN(63,I)=PEQEL(2,(I-IOFFN(63))) 
# SINGLET DISSOCIATION AT 27.5    EV     BEF SCALING F=.0010872
  471 if(EN <= (EIN(64))) GO TO 472
      QIN(64,I)=0.0010872/(EIN(64)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(64)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(64)+E(3))
      if(QIN(64,I):
 < 0.0) QIN(64,I)=0.0
      if(EN <= (2.0*EIN(64):
)) GO TO 472
      PEQIN(64,I)=PEQEL(2,(I-IOFFN(64))) 
  472 CONTINUE
# LOAD BREMSSTRAHLUNG X-SECTION
      QIN(65,I)=0.0
      QIN(66,I)=0.0
      if(EN <= 1000.):
 GO TO 800
      DO 780 J=2,NBREM
      if(EN <= EBRM[J]:
) GO TO 790
  780 CONTINUE
      J=NBREM
  790 A=(math.log(Z6T[J])-math.log(Z6T(J-1)))/(EBRM[J]-EBRM(J-1))
      B=(math.log(Z6T[J])*EBRM(J-1)-math.log(Z6T(J-1))*EBRM[J])/(EBRM(J-1)-EBRM[J])
      A1=(math.log(Z1T[J])-math.log(Z1T(J-1)))/(EBRM[J]-EBRM(J-1))
      B1=(math.log(Z1T[J])*EBRM(J-1)-math.log(Z1T(J-1))*EBRM[J])/(EBRM(J-1)-EBRM[J])
      QIN(65,I)=math.exp(A*EN+B)*3.D-24
      QIN(66,I)=math.exp(A1*EN+B1)*8.D-24
  800 CONTINUE
#
#  LOAD NULL COLLISIONS
#
# LIGHT EMISSION FROM H ALPHA
# MOHLMANN AND DE HEER CHEM.PHYS.19(1979)233
      QNULL(1,I)=0.0
      if(EN <= XNUL1[1]:
) GO TO 805
      if(EN > XNUL1(NUL1):
) GO TO 803
      DO 801 J=2,NUL1
      if(EN <= XNUL1[J]:
) GO TO 802
  801 CONTINUE
      J=NUL1
  802 A=(YNUL1[J]-YNUL1(J-1))/(XNUL1[J]-XNUL1(J-1))
      B=(XNUL1(J-1)*YNUL1[J]-XNUL1[J]*YNUL1(J-1))/(XNUL1(J-1)-XNUL1[J])
      QNULL(1,I)=(A*EN+B)*1.D-16*SCLN[1]    
      GO TO 805
# SCALE BY 1/E ABOVE XNUL1(NUL1)) EV
  803 QNULL(1,I)=YNUL1(NUL1)*(XNUL1(NUL1)/EN)*1.D-16*SCLN[1]    
#
# LIGHT EMISSION FROM CH2(A2DELTA - X2PI)
#  MOHLMANN AND DE HEER  CHEM.PHYS.19(1979)233 
#  
  805 QNULL(2,I)=0.0
      if(EN <= XNUL2[1]:
) GO TO 810
      if(EN > XNUL2(NUL2):
) GO TO 808
      DO 806 J=2,NUL2
      if(EN <= XNUL2[J]:
) GO TO 807
  806 CONTINUE
      J=NUL2
  807 A=(YNUL2[J]-YNUL2(J-1))/(XNUL2[J]-XNUL2(J-1))
      B=(XNUL2(J-1)*YNUL2[J]-XNUL2[J]*YNUL2(J-1))/(XNUL2(J-1)-XNUL2[J])
      QNULL(2,I)=(A*EN+B)*1.D-16*SCLN(2)
      GO TO 810
# SCALE BY 1/E ABOVE XNUL2(NUL2)) EV
  808 QNULL(2,I)=YNUL2(NUL2)*(XNUL2(NUL2)/EN)*1.D-16*SCLN(2)  
#  
  810 CONTINUE
#
  815 CONTINUE
      SUMEXC=0.0
      DO 850 J=9,NIN
  850 SUMEXC=SUMEXC+QIN[J][I]
      SUMION=0.0
      DO 851 J=1,NION
  851 SUMION=SUMION+QION[J][I]
      SUMATT=0.0
      DO 852 J=1,NATT
  852 SUMATT=SUMATT+QATT[J][I]
      SUMVIB=0.0
      DO 853 J=1,8
  853 SUMVIB=SUMVIB+QIN[J][I]
      SUMELMT=QMT
      SUMEL=QEL
      SUMTOTM=SUMVIB+SUMEXC+SUMION+SUMATT+SUMELMT
      SUMTOT=SUMVIB+SUMEXC+SUMION+SUMATT+SUMEL
      SUMNONEL=SUMVIB+SUMEXC+SUMION+SUMATT
      SUMTRIPLET=QIN(9,I)+QIN(11,I)+QIN(18,I)+QIN(62,I)
      SUMDIPOLE=SUMEXC-SUMTRIPLET
#
#     WRITE(6,887) EN,QIN(1,I),QIN(2,I)
# 887 print(' EN = ',D12.4,' TORS SUP = ',D12.4,' TORSION = ',D12.4)
#     WRITE(6,888) EN,QMT,SUMVIB,SUMEXC,SUMION,SUMATT,SUMNONEL,SUMTOTM,
#    /SUMTRIPLET,SUMDIPOLE
# 888 print(' EN=',D12.4,' QMT =','%.3f' %,' SUMVIB=','%.3f' %,' SUMEXC =',
#    /'%.3f' %,' SUMION =','%.3f' %,' SUMATT =','%.3f' %,' SUMNONEL =','%.3f' %,
#    /' SUMTOTM =','%.3f' %,/,' SUMTRIPLET =','%.3f' %,' SUMDIPOLE =','%.3f' %) 
#
 1000 CONTINUE                                                          
#  SAVE COMPUTE TIME            
      DO 1010 K=1,NIN
      if(EFINAL <= EIN[K]:
) :
       NIN=K-1
       GO TO 1011
      # endif      
 1010 CONTINUE
 1011 CONTINUE
      if(EFINAL > 1000.):
 NIN=66
#                               
      RETURN                                                            
      # end
      def GAS11(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NCO,ECO,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000)
      COMMON/DENS/DEN(20000)
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6)    
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)     
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      DIMENSION XEN(157),YELM(157),YELT(157),YEPS(157),XION(42),YION(42),YINC(42),XATT(10),YATT(10),XKSH(83),YKSH(83),  XVIB1(30),YVIB1(30),XVIB2(24),YVIB2(24),XVIB3(24),YVIB3(24),      XVIB4(29),YVIB4(29),XVIB5(15),YVIB5(15),XEXC1(16),YEXC1(16),XEXC2(16),YEXC2(16),IOFFN(24),IOFFION(10)
      DIMENSION Z6T(25),Z1T(25),EBRM(25)
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME     
# ELASTIC                                          
      DATA XEN/0.00,0.001,0.002,0.003,0.004,0.005,0.007,0.01,0.014,0.02,.025,0.03,.035,0.04,0.05,0.06,0.07,0.08,0.09,0.10,0.11,0.12,0.13,0.14,0.16,0.18,0.20,0.23,0.26,0.30,0.35,0.40,0.50,0.60,0.80,1.00,1.40,2.00,3.00,4.00,5.00,6.00,7.00,8.00,9.00,10.0,12.5,15.0,20.0,25.0,30.0,40.0,50.0,60.0,70.0,80.0,100.,120.,140.,170.,200.,250.,300.,400.,500.,750.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,6000.,7000.,8000.,9000.,1.D4,1.25D4,1.5D4,1.75D4,2.D4,2.5'%.3f' %.'%.3f' %.5D4,4.D4,4.5D4,5.D4,6.D4,7.D4,8.D4,9.D4,1.D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5'%.3f' %.'%.3f' %.5D5,4.D5,4.5D5,5.D5,6.D5,7.D5,8.D5,9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,2.0D6,2.5'%.3f' %.0'%.3f' %.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5'%.3f' %.0'%.3f' %.5D7,4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,1.0D8,1.25D8,1.5D8,1.75D8,2.0D8,2.5'%.3f' %.0'%.3f' %.5D8,4.0D8,4.5D8,5.0D8,6.0D8,7.0D8,8.0D8,9.0D8,1.0D9/
# ELASTIC MOMENTUM TRANSFER X-SECTION
      DATA YELM/255.,255.,255.,255.,255.,210.,150.,105.,74.5,52.0,     41.4,34.5,29.6,25.9,20.7,17.2,14.8,13.0,11.7,10.8,10.0,9.30,8.60,8.00,7.00,5.50,3.50,3.60,4.80,7.50,9.60,11.2,12.9,13.8,14.7,15.3,16.1,17.3,19.8,23.2,27.8,32.3,35.0,35.0,33.0,30.0,25.0,21.5,17.0,13.7,11.5,9.00,7.30,6.10,5.20,4.50,3.50,2.80,2.21,1.72,1.40,1.10,0.87,0.61,0.47,0.28,.171,.116,.0848,.0648,.0505,.0345,.0249,.0189,.0149,.0120,.00996,.00717,.00542,.00426,.00344,.00284,.00190,.00136,.00103,.000807,.000539,.000387,.000293,.000231,1.87D-4,1.55D-4,1.12D-4,8.50D-5,6.72D-5,5.46D-5,4.55D-5,3.10D-5,2.27D-5,1.75D-5,1.40D-5,9.71D-6,7.24D-6,5.66D-6,4.59D-6,3.81D-6,3.24D-6,2.44D-6,1.93D-6,1.57D-6,1.31D-6,1.12D-6,8.01D-7,6.04D-7,4.75D-7,3.84D-7,2.69D-7,2.00D-7,1.55D-7,1.24D-7,1.02D-7,8.52D-8,6.23D-8,4.77D-8,3.78D-8,3.07D-8,2.55D-8,1.71D-8,1.23D-8,9.30D-9,7.28D-9,4.83D-9,3.45D-9,2.59D-9,2.02D-9,1.61D-9,1.32D-9,9.36D-10,6.97D-10,5.39D-10,4.29D-10,3.50D-10,2.26D-10,1.58D-10,1.16D-10,8.92D-11,5.72D-11,3.98D-11,2.92D-11,2.24D-11,1.77D-11,1.44D-11,9.97D-12,7.33D-12,5.61D-12,4.43D-12,3.59D-12/
# ELASTIC X-SECTION ASSUMED ISOTROPIC BELOW     2.0 EV
      DATA YELT/255.,255.,255.,255.,255.,210.,150.,105.,74.5,52.0,     41.4,34.5,29.6,25.9,20.7,17.2,14.8,13.0,11.7,10.8,10.0,9.30,8.60,8.00,7.00,5.50,3.50,3.60,4.80,7.50,9.60,11.2,12.9,13.8,14.7,15.3,16.1,17.3,25.0,32.0,39.0,43.0,46.0,48.0,48.0,46.0,43.5,41.5,37.0,32.0,27.5,22.5,19.0,16.5,14.7,13.3,11.0,9.60,8.40,7.20,6.40,5.30,4.60,3.65,3.05,2.20,1.72,1.42,1.21,1.08,0.96,0.80,.690,.600,.545,.490,.450,.385,.335,.305,.275,.250,.210,.180,.158,.142,.119,.100,.0873,.0774,.0698,.0636,.0545,.0479,.0443,.0392,.0361,.0306,.0270,.0244,.0225,.0198,.0180,.0168,.0158,.0151,.0146,.0138,.0132,.0128,.0125,.0123,.0119,.0116,.0114,.0113,.0112,.0111,.0110,.0110,.0110,.0110,.0109,.0109,.0109,.0109,.0109,30*.01086/
# EPSILON FOR ELASTIC ANGULAR DISTRIBUTION
# EPSILON=1.0-YEPS
      DATA YEPS/38*1.0,.6940,.6011,.5847,.6369,.6507,.6068,.5511,.5054,.4106,.3465,.2851,.2545,.2451,.2283,.2141,.2015,.1880,.1753,.1593,.1393,.1191,.1030,.0903,.0836,.0730,.0610,.0544,.0415,.0296,.0227,.0185,.0151,.01272,.00985,.00786,.00662,.00555,.00484,.00427,.00346,.00291,.00244,.00213,.00190,.001449,.001171,9.84D-4,8.38D-4,6.43D-4,5.35D-4,4.54D-4,3.97D-4,3.50D-4,3.14D-4,2.58D-4,2.19D-4,1.83D-4,1.658D-4,1.481D-4,1.157D-4,9.37D-5,7.84D-5,6.69D-5,5.12D-5,4.11D-5,3.37D-5,2.86D-5,2.45D-5,2.12D-5,1.65D-5,1.34D-5,1.11D-5,9.33D-6,7.99D-6,5.75D-6,4.32D-6,3.37D-6,2.71D-6,1.87D-6,1.37D-6,1.04D-6,8.24D-7,6.67D-7,5.52D-7,3.95D-7,2.97D-7,2.32D-7,1.86D-7,1.52D-7,9.94D-8,7.00D-8,5.20D-8,4.01D-8,2.59D-8,1.81D-8,1.34D-8,1.03D-8,8.12D-9,6.58D-9,4.56D-9,3.34D-9,2.55D-9,2.00D-9,1.62D-9,1.02D-9,7.00D-10,5.07D-10,3.84D-10,2.41D-10,1.65D-10,1.19D-10,9.00D-11,7.1D-11,5.7D-11,3.9D-11,2.8D-11,2.1D-11,1.6D-11,1.3D-11/
# IONISATION
      DATA XION/10.67,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0,19.0,20.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,75.0,85.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000./
# GROSS IONISATION
      DATA YION/0.00,.004,.070,0.18,0.37,0.59,0.84,1.10,1.60,2.20,3.00,5.11,6.71,8.00,8.82,9.51,10.0,10.5,10.7,10.8,10.7,10.5,10.0,9.41,8.87,8.33,7.29,6.51,5.90,5.40,4.99,4.65,4.36,4.11,3.88,3.69,3.52,3.36,3.22,3.09,2.98,2.872/
# K-SHELL IONISATION X-SECTION CARBON (MUTILPY BY 4 FOR MOLECULE)  
      DATA XKSH/285.,298.,307.,316.,325.,335.,345.,365.,398.,422.,447.,473.,501.,531.,613.,668.,708.,750.,817.,917.,1000.,1122.,1296.,1496.,1679.,1884.,2054.,2238.,2512.,2985.,3981.,5012.,7079.,1.0D4,1.50D4,2.05D4,2.51'%.3f' %.07D4,4.10D4,5.01D4,6.13D4,7.08D4,8.18D4,1.0D5,1.54D5,2.05D5,2.99D5,4.10D5,5.01D5,6.13D5,7.08D5,8.18D5,1.0D6,1.26D6,1.5D6,2.05'%.3f' %.07D6,4.10D6,5.01D6,6.13D6,7.08D6,8.18D6,1.0D7,1.26D7,1.5D7,2.05'%.3f' %.07D7,4.10D7,5.01D7,6.13D7,7.08D7,8.18D7,1.0D8,1.26D8,1.5D8,2.05'%.3f' %.07D8,4.10D8,5.01D8,6.13D8,7.08D8,8.18D8,1.0D9/
      DATA YKSH/0.00,1.66D-4,3.48D-4,5.25D-4,6.96D-4,8.63D-4,1.02D-3,1.33D-3,1.75D-3,2.01D-3,2.24D-3,2.46D-3,2.66D-3,2.84D-3,3.21D-3,3.38D-3,3.47D-3,3.55D-3,3.65D-3,3.72D-3,3.75D-3,3.74D-3,3.68D-3,3.57D-3,3.45D-3,3.31D-3,3.19D-3,3.07D-3,2.91D-3,2.66D-3,2.25D-3,1.95D-3,1.55D-3,1.21D-3,8.97D-4,7.07D-4,6.07D-4,5.21D-4,4.21D-4,3.63D-4,3.14D-4,2.84D-4,2.57D-4,2.25D-4,1.74D-4,1.50D-4,1.28D-4,1.15D-4,1.09D-4,1.05D-4,1.03D-4,1.02D-4,1.01D-4,1.005D-4,1.01D-4,1.03D-4,1.07D-4,1.11D-4,1.14D-4,1.17D-4,1.20D-4,1.22D-4,1.25D-4,1.29D-4,1.32D-4,1.38D-4,1.45D-4,1.50D-4,1.54D-4,1.58D-4,1.60D-4,1.63D-4,1.67D-4,1.71D-4,1.74D-4,1.80D-4,1.87D-4,1.92D-4,1.96D-4,2.00D-4,2.02D-4,2.05D-4,2.09D-4/
# COUNTING IONISATION
      DATA YINC/42*0.0/
# ATTACHMENT
      DATA XATT/10*0.0/         
      DATA YATT/10*0.0/ 
# VIBRATION/TORSION
# ABOVE 40EV SCALE BY 1/E                                   
      DATA XVIB1/.052,.055,.060,.065,.070,.075,0.08,0.10,0.12,0.14,     0.20,0.25,0.30,0.40,0.50,0.70,1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.00,8.00,10.0,15.0,20.0,30.0,40.0/                
      DATA YVIB1/0.00,.014,.021,.024,.026,.027,.028,.028,.027,.025,     .021,.018,.016,.014,.012,.009,.008,.012,.015,.024,.036,.047,.060,.079,.079,.065,.038,.025,.012,.008/
# VIBRATION                          
# ABOVE 40EV SCALE BY 1/E             
      DATA XVIB2/.108,.125,0.15,0.20,0.23,0.25,0.30,0.40,0.50,0.70,     1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.00,8.00,10.0,                15.0,20.0,30.0,40.0/               
      DATA YVIB2/0.00,0.27,0.52,0.71,0.73,0.73,0.66,0.56,0.49,0.41,     0.32,0.32,0.39,0.63,0.93,1.22,1.57,2.06,2.06,1.69,                1.00,0.66,0.35,0.22/
# VIBRATION              
# ABOVE 40EV SCALE BY 1/E         
      DATA XVIB3/.173,0.18,0.19,0.20,0.23,0.25,0.30,0.40,0.50,0.70,     1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.00,8.00,10.0,                15.0,20.0,30.0,40.0/               
      DATA YVIB3/0.00,0.13,0.27,0.38,0.49,0.53,0.56,0.53,0.49,0.42,     0.34,0.31,0.33,0.48,0.72,0.94,1.21,1.59,1.59,1.35,                0.80,0.52,0.28,.175/
# VIBRATION     
# ABOVE 40EV SCALE BY 1/E                  
      DATA XVIB4/.363,.365,0.37,0.38,0.39,0.40,0.42,0.45,0.50,0.55,0.60,0.70,0.80,0.90,1.00,1.20,1.50,2.00,3.00,4.00,5.00,6.00,7.00,8.00,10.0,15.0,20.0,30.0,40.0/            
      DATA YVIB4/0.00,.108,.198,.299,.366,.416,.487,.555,.615,.645,     .655,.650,.630,.605,.580,0.55,0.57,0.67,1.05,1.50,2.00,2.45,2.70,2.70,2.10,1.15,0.76,0.42,0.27/ 
# VIBRATION HARMONICS         
# ABOVE 40EV SCALE BY 1/E                             
      DATA XVIB5/.519,1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.00,8.00,     10.0,15.0,20.0,30.0,40.0/    
      DATA YVIB5/0.00,.001,0.01,.033,.085,0.16,0.20,0.27,0.30,0.30,     0.23,.125,.085,.047,.032/
# EXCITATION TRIPLET               
      DATA XEXC1/7.20,8.00,9.00,10.0,12.0,14.0,16.0,20.0,25.0,30.0,40.0,50.0,60.0,70.0,80.0,100./                  
      DATA YEXC1/0.00,0.10,0.30,0.45,0.52,0.55,0.51,0.45,0.30,0.20,0.10,0.06,.037,.026,.019,.011/                             
# EXCITATION  TRIPLET                                     
      DATA XEXC2/8.60,9.40,10.4,11.4,13.4,15.4,17.4,21.4,26.0,30.0,40.0,50.0,60.0,70.0,80.0,100./ 
      DATA YEXC2/0.00,0.10,0.30,0.45,0.52,0.55,0.51,0.45,0.30,0.20,0.10,0.06,.037,.026,.019,.011/ 
# BREMSSTRAHLUNG X-SECTION WITH CUT OFF  UNITS 10**-24 CM**2
      DATA Z6T/298.,178.,85.2,47.5,26.3,12.2,7.06,4.45,3.06,2.82,2.89,2.99,3.08,3.13,3.18,3.25,3.31,3.39,3.44,3.49,3.52,3.54,3.55,3.57,3.57/
      DATA Z1T/11.3,6.18,2.80,1.54,.858,.407,.251,.176,.145,.150,.167,.178,.187,.193,.198,.205,.210,.218,.222,.228,.231,.233,.234,.235,.235/
      DATA EBRM/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,4.E7,5.E7,6.E7,8.E7,1.E8/
#**********************************************************************
# 2014 UPDATE INCLUDES CORRECT OSCILLATOR STRENGTH AND FIT TO NEW 
#       TOWNS# end DATA
# 2012 UPDATE INCLUDES K-SHELL IONISATION
# 2009 UPDATE OF 1999 def
#      VERSION INCLUDES ANISOTROPIC SCATTERING. USED ISOTROPIC ELASTIC
#      SCATTERING BELOW 2 EV DUE TO LACK OF EXPERIMENTAL ELECTRON 
#      SCATTERING DATA.
#      ALSO INCLUDES BETTER TREATMENT OF TORSIONAL EXCITATION (USED A 
#      2-LEVEL APPROXIMATION FOR TORSION)
#      IMPROVED FANO FACTOR AND W FROM BETTER EXCITATION/DISSOCIATION
#      X-SECTIONS . PUBLISHED ELECTRON SCATTERING DATA UP TO 2009 IS
#      INCLUDED IN ANALYSIS. GOOD FIT +-1% TO SCHMIDTS HE/ISO DATA .
#      SCHMIDT AND MARTENS : HEIDELBERG PREPRINT :HD-PY 92/02
#      STILL SOME PROBLEMS WITH AR/ISO FITS +-2% BUT PROBABLY CAUSED
#      BY POOR QUALITY EXPERIMENTAL DRIFT VELOCITY DATA.
#      E.G. NO CONSISTANCY AT 3% LEVEL BETWEEN : 
#      FUJII ET AL:  NIM A245(1986)35
#      AND BECKER : HTTP://CYCLO.MIT.EDU/DRIFT/WWW 
#      FUTURE IMPROVEMENT: INCLUDE EFFECTIVE ROTATIONAL STATE AT 0.005EV
#***********************************************************************
#--------------------------------------------------------
      if(NANISO == 0):
 :
       NAME='ISO-C4H10 2014 ISOTROPIC '
      else:
       NAME='ISO-C4H10 2014 ANISOTRPIC'
      # endif                                            
# ---------------------------------------------------------------------
# 
      API=numpy.arccos(-1.00)
      A0=0.52917720859D-8
      RY=13.60569193
      CONST=1.873884D-20
      EMASS2=1021997.804
      BBCONST=16.0*API*A0*A0*RY*RY/EMASS2
#
# BORN BETHE VALUES FOR IONISATION
      AM2=14.8
      C=141.9
#
# AVERAGE AUGER EMISSIONS FROM K-SHELL
      AUGK=2.0
#
# ARRAY SIZE
      NASIZE=20000
# SCALE SINGLET X-SECTIONS TO ALLOW FOR INCREASED ENERGY LOSS DUE TO 5%
#   STEP IN ENERGY BETWEEN SINGLET LEVELS.
      ASING=1.02
#
      NION=3
      NATT=1
      NIN=24
      NNULL=0 
      IONMODEL=0
#     
      NBREM=25
      DO 18 J=1,NIN
      IZBR[J]=0
   18 CONTINUE
      IZBR(25)=6
      IZBR(26)=1
#
# USE NANISO=2 ONLY (OKHRIMOVSKY)
      DO 1 J=1,6 
    1 KEL[J]=NANISO
      DO 2 J=1,NIN
    2 KIN[J]=2
#                                                                  
      NDATA=157                                                         
      NIOND=42                                                       
      NATT1=10                                                         
      NVIB1=30
      NVIB2=24                                                          
      NVIB3=24                                                          
      NVIB4=29
      NVIB5=15
      NEXC1=16                                                         
      NEXC2=16                                                 
      NKSH=83
#
      E[1]=0.0                                                          
      E(2)=2.0*EMASS/(58.1234*AMU)                                      
      E(3)=10.67    
# EXCITATION X-SECTION AT 1.2 MEV          
      E(4)=0.0145D-16
# IONISATION X-SECTION AT 1.2 MEV                               
      E(5)=0.0374D-16
# OPAL BEATY IONISATION ENERGY SPLITTING AT 1.2 MEV                 
      E(6)=7.00 
# OPAL BEATY IONISATION  AT LOW ENERGY
      EOBY[1]=6.8  
# OPAL BEATY FOR DISSOCIATION AND K-SHELL
      EOBY(2)=6.8  
      EOBY(3)=180.0

#  
      EION[1]=10.67
      EION(2)=17.0
      EION(3)=285.0
      LEGAS[1]=0
      LEGAS(2)=0
      LEGAS(3)=1
      ISHELL[1]=0
      ISHELL(2)=0
      ISHELL(3)=1
# FLUORESCENCE DATA
      NC0[1]=0
      EC0[1]=0.0
      WKLM[1]=0.0
      EFL[1]=0.0
      NG1[1]=0
      EG1[1]=0.0
      NG2[1]=0
      EG2[1]=0.0
      NC0(2)=0
      EC0(2)=0.0
      WKLM(2)=0.0
      EFL(2)=0.0
      NG1(2)=0
      EG1(2)=0.0
      NG2(2)=0
      EG2(2)=0.0
      NC0(3)=2
      EC0(3)=253.
      WKLM(3)=0.0026
      EFL(3)=273.
      NG1(3)=1
      EG1(3)=253.
      NG2(3)=2
      EG2(3)=5.0
#
      EIN[1]=-0.032                                            
      EIN(2)=0.032 
      EIN(3)=-0.108
      EIN(4)=0.108  
      EIN(5)=-0.173                                                    
      EIN(6)=0.173
      EIN(7)=-0.363                                                    
      EIN(8)=0.363
      EIN(9)=0.519
      EIN(10)=7.2
      EIN(11)=8.6                                               
      EIN(12)=7.50                     
      EIN(13)=8.0
      EIN(14)=8.5
      EIN(15)=9.0
      EIN(16)=9.5
      EIN(17)=10.0
      EIN(18)=10.5
      EIN(19)=11.0
      EIN(20)=11.5
      EIN(21)=12.0
      EIN(22)=12.5
      EIN(23)=13.0
      EIN(24)=13.5
      EIN(25)=0.0
      EIN(26)=0.0
#  
      DO 776 J=1,NION
      DO 777 I=1,NASIZE
      if(EG[I]:
 > EION[J]) :
       IOFFION[J]=I-1
       GO TO 776
      # endif
  777 CONTINUE
  776 CONTINUE
#
      DO 652 NL=1,NIN
      DO 651 I=1,NASIZE
      if(EG[I]:
 > abs(EIN(NL))) :
       IOFFN(NL)=I-1
       GO TO 652
      # endif
  651 CONTINUE
  652 CONTINUE
#***********************************************************************
# PENNING TRANSFER FRACTION FOR EACH LEVEL
      DO 5 K=1,24 
      DO 5 L=1,3
    5 PENFRA[L,K]=0.0
      PENSUM=0.0
# PENNING TRANSFER FRACTION FOR EXCITATION LEVELS ONLY
      DO 555 K=10,24
      PENFRA[1,K]=0.0
      PENSUM=PENSUM+PENFRA[1,K]
# PENNING TRANSFER DISTANCE IN MICRONS
      PENFRA[2,K]=1.0
# PENNING TRANSFER TIME IN PICOSECONDS
      PENFRA[3,K]=1.0
  555 CONTINUE
      if(IPEN == 0):
 GO TO 8
      if((PENSUM):
 == 0.0) GO TO 8
      DO 6 K=10,24
    6 WRITE(6,999) NAME,EIN[K],PENFRA[1,K],PENFRA[2,K],PENFRA[3,K]
  999 print(' GAS = ',A15,' ENERGY LEVEL = ','%.4f' %,' EV.',/,' PENNING PROBABILITY = ','%.3f' % ,' ABS.LENGTH = ',F7.2,' DECAY TIME = ',F7.1,/)
    8 CONTINUE
#***********************************************************************
      SCRPT[1]='                                                  '
      SCRPT(2)=' ELASTIC  ANISOTROPIC      ISOBUTANE              '
      if(NANISO == 0):
 :
      SCRPT(2)=' ELASTIC  ISOTROPIC        ISOBUTANE              '
      # endif
      SCRPT(3)=' IONISATION                       ELOSS=  10.67   '
      SCRPT(4)=' IONISATION-EXCITATION (BREAKUP)  ELOSS=  17.0    '
      SCRPT(5)=' IONISATION  K-SHELL              ELOSS= 285.0    '
      SCRPT(6)=' ATTACHMENT                                       '
      SCRPT(7)='                                                  '
      SCRPT(8)='                                                  '
      SCRPT(9)=' TORSION                          ELOSS=  -0.032  '
      SCRPT(10)=' TORSION                          ELOSS=   0.032  '
      SCRPT(11)=' VIBRATION  B# end                  ELOSS=  -0.108  '
      SCRPT(12)=' VIBRATION  B# end                  ELOSS=   0.108  '
      SCRPT(13)=' VIBRATION  STRETCH               ELOSS=  -0.173  '
      SCRPT(14)=' VIBRATION  STRETCH               ELOSS=   0.173  '
      SCRPT(15)=' VIBRATION  STRETCH               ELOSS=  -0.363  '
      SCRPT(16)=' VIBRATION  STRETCH               ELOSS=   0.363  ' 
      SCRPT(17)=' VIBRATION  STRETCH               ELOSS=   0.519  '
      SCRPT(18)=' EXC.  TRIPLET                    ELOSS=   7.2    '
      SCRPT(19)=' EXC.  TRIPLET                    ELOSS=   8.6    '
      SCRPT(20)=' EXC. SINGLET         F=.0013     ELOSS=   7.5    '
      SCRPT(21)=' EXC. SINGLET         F=.0150     ELOSS=   8.0    '
      SCRPT(22)=' EXC. SINGLET         F=.1140     ELOSS=   8.5    '
      SCRPT(23)=' EXC. SINGLET         F=.1570     ELOSS=   9.0    '
      SCRPT(24)=' EXC. SINGLET         F=.1710     ELOSS=   9.5    '
      SCRPT(25)=' EXC. SINGLET         F=.1880     ELOSS=  10.0    '
      SCRPT(26)=' EXC. SINGLET         F=.2050     ELOSS=  10.5    '
      SCRPT(27)=' EXC. SINGLET         F=.1930     ELOSS=  11.0    '
      SCRPT(28)=' EXC. SINGLET         F=.1620     ELOSS=  11.5    '
      SCRPT(29)=' EXC. SINGLET         F=.1030     ELOSS=  12.0    '
      SCRPT(30)=' EXC. SINGLET         F=.0670     ELOSS=  12.5    '
      SCRPT(31)=' EXC. SINGLET         F=.0640     ELOSS=  13.0    '
      SCRPT(32)=' EXC. SINGLET         F=.0280     ELOSS=  13.5    '
      SCRPT(33)=' BREMSSTRAHLUNG FROM CARBON ATOM                  '
      SCRPT(34)=' BREMSSTRAHLUNG FROM HYDROGEN ATOM                '
# CALCULATE POPULATION OF TORSIONAL STATES
      APOP1=math.exp(EIN[1]/AKT)
      APOP2=math.exp(2.0*EIN[1]/AKT)
      APOP3=math.exp(3.0*EIN[1]/AKT)
      APOP4=math.exp(4.0*EIN[1]/AKT)
      APOP5=math.exp(5.0*EIN[1]/AKT)
      APOP6=math.exp(6.0*EIN[1]/AKT)
      APOP7=math.exp(7.0*EIN[1]/AKT)
      APOP8=math.exp(8.0*EIN[1]/AKT)
      APOP9=math.exp(9.0*EIN[1]/AKT)
      APOP10=math.exp(10.0*EIN[1]/AKT)
      APOPGST=1.0
      APOPSUM=APOPGST+APOP1+APOP2+APOP3+APOP4+APOP5+APOP6+APOP7+APOP8+APOP9+APOP10
      APOPGST=1.0/APOPSUM
      APOP1=APOP1/APOPSUM
      APOP2=APOP2/APOPSUM
      APOP3=APOP3/APOPSUM
      APOP4=APOP4/APOPSUM
      APOP5=APOP5/APOPSUM
      APOP6=APOP6/APOPSUM
      APOP7=APOP7/APOPSUM
      APOP8=APOP8/APOPSUM
      APOP9=APOP9/APOPSUM
      APOP10=APOP10/APOPSUM
#  USE 2 LEVEL APPROXIMATION FOR TORSION
      APOP1=APOP1+APOP2+APOP3+APOP4+APOP5+APOP6+APOP7+APOP8+APOP9+APOP10
      APOPGST=1.0 
# CALCULATE POPULATION  OF VIBRATIONAL STATES
# ASSUME ALL STATE DEGENERACIES ARE EQUAL
      APOPV2=math.exp(EIN(3)/AKT)
      APOPV3=math.exp(EIN(5)/AKT)
      APOPV4=math.exp(EIN(7)/AKT)
      APOPGS=1.0+APOPV2+APOPV3+APOPV4
      APOPV2=APOPV2/APOPGS
      APOPV3=APOPV3/APOPGS
      APOPV4=APOPV4/APOPGS
      APOPGS=1.0/APOPGS
# RENORMALISE GROUND STATE POPULATION ( GIVES CORRECTION THAT
# ALLOWS FOR VIBRATIONAL EXCITATION FROM EXCITED VIBRATIONAL STATES)
      APOPGS=1.0
#
#     EN=-ESTEP/2.0   
      DO 1000 I=1,NSTEP  
      EN=EG[I]                                            
#     EN=EN+ESTEP    
      GAMMA1=(EMASS2+2.00*EN)/EMASS2
      GAMMA2=GAMMA1*GAMMA1
      BETA=math.sqrt(1.00-1.00/GAMMA2)
      BETA2=BETA*BETA
#                                             
      DO 10 J=2,NDATA                                                   
      if(EN <= XEN[J]:
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA                                                           
   20 A=(YELM[J]-YELM(J-1))/(XEN[J]-XEN(J-1))                         
      B=(XEN(J-1)*YELM[J]-XEN[J]*YELM(J-1))/(XEN(J-1)-XEN[J])   
      QMOM=(A*EN+B)*1.D-16  
      A=(YELT[J]-YELT(J-1))/(XEN[J]-XEN(J-1))                         
      B=(XEN(J-1)*YELT[J]-XEN[J]*YELT(J-1))/(XEN(J-1)-XEN[J]) 
      QELA=(A*EN+B)*1.D-16
      A=(YEPS[J]-YEPS(J-1))/(XEN[J]-XEN(J-1))                         
      B=(XEN(J-1)*YEPS[J]-XEN[J]*YEPS(J-1))/(XEN(J-1)-XEN[J])
      PQ2=(A*EN+B)
# EPSILON = 1.0-YEPS
      PQ2=1.00-PQ2
      PQ1=0.5+(QELA-QMOM)/QELA
      if(NANISO == 0):
 PEQEL(2,I)=0.5
      if(NANISO == 1):
 PEQEL(2,I)=PQ1
      if(NANISO == 2):
 PEQEL(2,I)=PQ2
      Q(2,I)=QELA            
      if(NANISO == 0):
 Q(2,I)=QMOM
# GROSS IONISATION                                         
      QION(1,I)=0.0
      PEQION(1,I)=0.5
      if(NANISO == 2):
 PEQION(1,I)=0.0 
      if(EN < EION[1]:
) GO TO 150
      if(EN > XION(NIOND):
) GO TO 123                                
      DO 100 J=2,NIOND                                                  
      if(EN <= XION[J]:
) GO TO 110                                       
  100 CONTINUE                                                          
      J=NIOND                                                           
  110 A=(YION[J]-YION(J-1))/(XION[J]-XION(J-1))                         
      B=(XION(J-1)*YION[J]-XION[J]*YION(J-1))/(XION(J-1)-XION[J]) 
      QION(1,I)=(A*EN+B)*1.D-16 
      GO TO 124
# USE BORN BETHE X-SECTION ABOVE XION(NIOND) EV
  123 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(1,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)
  124 CONTINUE
# USE ANISOTROPIC SCATTERING FOR PRIMARY IONISATION ELECTRON AT
# ENERGIES ABOVE  2 * IONISATION ENERGY
# ANISOTROPIC ANGULAR DISTRIBUTION EQUAL TO ELASTIC ANGULAR DISTRIBUTION
# AT AN ENERGY OFFSET BY THE IONISATION ENERGY
      if(EN <= (2.0*EION[1]:
)) GO TO 150
      PEQION(1,I)=PEQEL(2,(I-IOFFION[1]))
# CALCULATE IONISATION-EXCITATION AND SPLIT IONISATION INTO
# IONISATION ONLY AND IONISATION +EXCITATION
  150 QION(2,I)=0.0
      PEQION(2,I)=0.50
      if(NANISO == 2):
 PEQIN(2,I)=0.0
      if(EN <= EION(2):
) GO TO 160
      QION(2,I)=12.00/(EION(2)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EION(2)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EION(2)+E(3))
      if(QION(2,I):
 < 0.0) QION(2,I)=0.0
# FIND IONISATION ONLY
      QION(1,I)=QION(1,I)-QION(2,I)
      if(EN <= (2.0*EION(2):
)) GO TO 160
      PEQION(2,I)=PEQEL(2,(I-IOFFION(2)))
# K-SHELL IONISATION
  160 QION(3,I)=0.0
      PEQION(3,I)=0.5
      if(NANISO == 2):
 PEQION(3,I)=0.0 
      if(EN < EION(3):
) GO TO 170
      DO 161 J=2,NKSH                                                  
      if(EN <= XKSH[J]:
) GO TO 162                                       
  161 CONTINUE                                                          
      J=NKSH                                                           
  162 A=(YKSH[J]-YKSH(J-1))/(XKSH[J]-XKSH(J-1))                         
      B=(XKSH(J-1)*YKSH[J]-XKSH[J]*YKSH(J-1))/(XKSH(J-1)-XKSH[J]) 
# FACTOR OF 4 FROM NUMBER OF ATOMS ON MOLECULE
      QION(3,I)=4.0*(A*EN+B)*1.D-16 
# USE ANISOTROPIC SCATTERING FOR PRIMARY IONISATION ELECTRON AT
# ENERGIES ABOVE  2 * IONISATION ENERGY
# ANISOTROPIC ANGULAR DISTRIBUTION EQUAL TO ELASTIC ANGULAR DISTRIBUTION
# AT AN ENERGY OFFSET BY THE IONISATION ENERGY
      if(EN <= (2.0*EION(3):
)) GO TO 170
      PEQION(3,I)=PEQEL(2,(I-IOFFION(3)))
# CORRECT DISSOCIATIVE IONISATION FOR SPLIT INTO K-SHELL
  170 QION(2,I)=QION(2,I)-QION(3,I)
# ATTACHMENT (NO ATTACHMENT)                                          
      Q(4,I)=0.0                                                        
# COUNTING IONISATION                                          
  200 Q(5,I)=0.0     
      PEQEL(5,I)=0.5
      if(NANISO == 2):
 PEQEL(5,I)=0.0
      if(EN <= E(3):
) GO TO 210
# SET COUNTING IONISATION = GROSS IONISATION (LACK OF EXPERIMENTAL DATA)
      Q(5,I)=QION(1,I)+AUGK*QION(3,I)
      Q(5,I)=Q(5,I)-QION(3,I)
      if(EN <= (2.0*E(3):
)) GO TO 210
      PEQEL(5,I)=PEQEL(2,(I-IOFFION[1]))
  210 CONTINUE
#**********************************************************************
# TEMPORARY MOD FOR RANGE PARAMETERS 
#      IF(EN > 1000.) QION(1,I)=Q(5,I)
#********************************************************************* 
      Q(6,I)=0.0                                                        
# SUPERELASTIC TORSION
      QIN(1,I)=0.0
      PEQIN(1,I)=0.5
      if(NANISO == 2):
 PEQIN(1,I)=0.0
      if(EN == 0.0):
 GO TO 305
      EFAC=math.sqrt(1.0-(EIN[1]/EN))
      QIN(1,I)=0.009*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      QIN(1,I)=APOP1*QIN(1,I)*1.D-16
      if(EN < (5.0*abs(EIN[1]:
))) GO TO 305
      if(NANISO == 2):
 PEQIN(1,I)=PEQEL(2,(I-IOFFN[1]))
# TORSION           
  305 QIN(2,I)=0.0
      PEQIN(2,I)=0.5  
      if(NANISO == 2):
 PEQIN(2,I)=0.0                               
      if(EN <= EIN(2):
) GO TO 400   
      EFAC=math.sqrt(1.0-(EIN(2)/EN))
      QIN(2,I)=0.009*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      QIN(2,I)=APOPGST*QIN(2,I)*1.D-16
      if(EN < (5.0*abs(EIN(2):
))) GO TO 400
      if(NANISO == 2):
 PEQIN(2,I)=PEQEL(2,(I-IOFFN(2)))
# SUPERELASTIC VIB B# end MODES
  400 QIN(3,I)=0.0
      PEQIN(3,I)=0.5
      if(NANISO == 2):
 PEQIN(3,I)=0.0
      if(EN == 0.0):
 GO TO 450 
      if((EN+EIN(4):
) > XVIB2(NVIB2)) GO TO 425
      DO 410 J=2,NVIB2
      if((EN+EIN(4):
) <= XVIB2[J]) GO TO 420
  410 CONTINUE
      J=NVIB2
  420 A=(YVIB2[J]-YVIB2(J-1))/(XVIB2[J]-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2[J]-XVIB2[J]*YVIB2(J-1))/(XVIB2(J-1)-XVIB2[J]) 
      QIN(3,I)=APOPV2*(EN+EIN(4))*(A*(EN+EIN(4))+B)*1.D-16/EN  
      GO TO 426
  425 QIN(3,I)=APOPV2*YVIB2(NVIB2)*(XVIB2(NVIB2)/EN)*1.D-16
  426 if(EN < (3.0*abs(EIN(3)))) GO TO 450
      if(NANISO == 2):
 PEQIN(3,I)=PEQEL(2,(I-IOFFN(3)))
# VIB B# end MODES 
  450 QIN(4,I)=0.0  
      PEQIN(4,I)=0.5                
      if(NANISO == 2):
 PEQIN(4,I)=0.0                                    
      if(EN <= EIN(4):
) GO TO 500                           
      if(EN > XVIB2(NVIB2):
) GO TO 475              
      DO 460 J=2,NVIB2                                                  
      if(EN <= XVIB2[J]:
) GO TO 470                                      
  460 CONTINUE                                                          
      J=NVIB2                                                           
  470 A=(YVIB2[J]-YVIB2(J-1))/(XVIB2[J]-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2[J]-XVIB2[J]*YVIB2(J-1))/(XVIB2(J-1)-XVIB2[J]) 
      QIN(4,I)=APOPGS*(A*EN+B)*1.D-16   
      GO TO 476 
  475 QIN(4,I)=APOPGS*YVIB2(NVIB2)*(XVIB2(NVIB2)/EN)*1.D-16
  476 if(EN < (3.0*abs(EIN(4)))) GO TO 500
      if(NANISO == 2):
 PEQIN(4,I)=PEQEL(2,(I-IOFFN(4)))
# SUPERELASTIC VIB STRETCH MODES
  500 CONTINUE 
      QIN(5,I)=0.0
      PEQIN(5,I)=0.5
      if(NANISO == 2):
 PEQIN(5,I)=0.0
      if(EN == 0.0):
 GO TO 550
      if((EN+EIN(6):
) > XVIB3(NVIB3)) GO TO 525
      DO 510  J=2,NVIB3
      if((EN+EIN(6):
) <= XVIB3[J]) GO TO 520 
  510 CONTINUE
      J=NVIB3
  520 A=(YVIB3[J]-YVIB3(J-1))/(XVIB3[J]-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3[J]-XVIB3[J]*YVIB3(J-1))/(XVIB3(J-1)-XVIB3[J]) 
      QIN(5,I)=APOPV3*(EN+EIN(6))*(A*(EN+EIN(6))+B)*1.D-16/EN  
      GO TO 526
  525 QIN(5,I)=APOPV3*YVIB3(NVIB3)*(XVIB3(NVIB3)/EN)*1.D-16
  526 if(EN < (3.0*abs(EIN(5)))) GO TO 550
      if(NANISO == 2):
 PEQIN(5,I)=PEQEL(2,(I-IOFFN(5)))
# VIB STRETCH MODES
  550 CONTINUE                                                          
      QIN(6,I)=0.0  
      PEQIN(6,I)=0.5
      if(NANISO == 2):
 PEQIN(6,I)=0.0                             
      if(EN <= EIN(6):
) GO TO 600                           
      if(EN > XVIB3(NVIB3):
) GO TO 575             
      DO 560 J=2,NVIB3                                                  
      if(EN <= XVIB3[J]:
) GO TO 570                                      
  560 CONTINUE                                                          
      J=NVIB3                                                           
  570 A=(YVIB3[J]-YVIB3(J-1))/(XVIB3[J]-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3[J]-XVIB3[J]*YVIB3(J-1))/(XVIB3(J-1)-XVIB3[J]) 
      QIN(6,I)=APOPGS*(A*EN+B)*1.D-16 
      GO TO 576 
  575 QIN(6,I)=APOPGS*YVIB3(NVIB3)*(XVIB3(NVIB3)/EN)*1.D-16  
  576 if(EN < (3.0*abs(EIN(6)))) GO TO 600
      if(NANISO == 2):
 PEQIN(6,I)=PEQEL(2,(I-IOFFN(6)))
# SUPERELASTIC VIB STRETCH MODES
  600 CONTINUE 
      QIN(7,I)=0.0
      PEQIN(7,I)=0.5
      if(NANISO == 2):
 PEQIN(7,I)=0.0
      if(EN == 0.0):
 GO TO 650
      if((EN+EIN(8):
) > XVIB4(NVIB4)) GO TO 625
      DO 610  J=2,NVIB4
      if((EN+EIN(8):
) <= XVIB4[J]) GO TO 620 
  610 CONTINUE
      J=NVIB4
  620 A=(YVIB4[J]-YVIB4(J-1))/(XVIB4[J]-XVIB4(J-1))                     
      B=(XVIB4(J-1)*YVIB4[J]-XVIB4[J]*YVIB4(J-1))/(XVIB4(J-1)-XVIB4[J]) 
      QIN(7,I)=APOPV4*(EN+EIN(8))*(A*(EN+EIN(8))+B)*1.D-16/EN 
      GO TO 626
  625 QIN(7,I)=APOPV4*YVIB4(NVIB4)*(XVIB4(NVIB4)/EN)*1.D-16
  626 if(EN < (3.0*abs(EIN(7)))) GO TO 650
      if(NANISO == 2):
 PEQIN(7,I)=PEQEL(2,(I-IOFFN(7)))
#  VIB STRETCH MODES         
  650 CONTINUE                                                          
      QIN(8,I)=0.0  
      PEQIN(8,I)=0.5 
      if(NANISO == 2):
 PEQIN(8,I)=0.0                         
      if(EN <= EIN(8):
) GO TO 700                           
      if(EN > XVIB4(NVIB4):
) GO TO 675           
      DO 660 J=2,NVIB4                                                  
      if(EN <= XVIB4[J]:
) GO TO 670                                      
  660 CONTINUE                                                          
      J=NVIB4                                                           
  670 A=(YVIB4[J]-YVIB4(J-1))/(XVIB4[J]-XVIB4(J-1))                     
      B=(XVIB4(J-1)*YVIB4[J]-XVIB4[J]*YVIB4(J-1))/(XVIB4(J-1)-XVIB4[J]) 
      QIN(8,I)=APOPGS*(A*EN+B)*1.D-16 
      GO TO 676   
  675 QIN(8,I)=APOPGS*YVIB4(NVIB4)*(XVIB4(NVIB4)/EN)*1.D-16             
  676 if(EN < (3.0*abs(EIN(8)))) GO TO 700
      if(NANISO == 2):
 PEQIN(8,I)=PEQEL(2,(I-IOFFN(8)))       
# HIGHER VIBRATIONAL MODES                                              
  700 QIN(9,I)=0.0  
      PEQIN(9,I)=0.5       
      if(NANISO == 2):
 PEQIN(9,I)=0.0                            
      if(EN <= EIN(9):
) GO TO 800                           
      if(EN > XVIB5(NVIB5):
) GO TO 725             
      DO 710 J=2,NVIB5                                                  
      if(EN <= XVIB5[J]:
) GO TO 720                                      
  710 CONTINUE                                                          
      J=NVIB5                                                           
  720 A=(YVIB5[J]-YVIB5(J-1))/(XVIB5[J]-XVIB5(J-1))                     
      B=(XVIB5(J-1)*YVIB5[J]-XVIB5[J]*YVIB5(J-1))/(XVIB5(J-1)-XVIB5[J]) 
      QIN(9,I)=(A*EN+B)*1.D-16
      GO TO 726
  725 QIN(9,I)=YVIB5(NVIB5)*(XVIB5(NVIB5)/EN)*1.D-16
  726 if(EN < (3.0*abs(EIN(9)))) GO TO 800
      if(NANISO == 2):
 PEQIN(9,I)=PEQEL(2,(I-IOFFN(9)))
# EXCITATION    TRIPLET  ABOVE XEXC1(NEXC1) SCALE BY 1/EN**3           
  800 QIN(10,I)=0.0 
      PEQIN(10,I)=0.5  
      if(NANISO == 2):
 PEQIN(10,I)=0.0                             
      if(EN <= EIN(10):
) GO TO 850     
      if(EN > XEXC1(NEXC1):
) GO TO 830                                  
      DO 810 J=2,NEXC1                                                  
      if(EN <= XEXC1[J]:
) GO TO 820                                      
  810 CONTINUE                                                          
      J=NEXC1                                                           
  820 A=(YEXC1[J]-YEXC1(J-1))/(XEXC1[J]-XEXC1(J-1))                     
      B=(XEXC1(J-1)*YEXC1[J]-XEXC1[J]*YEXC1(J-1))/(XEXC1(J-1)-XEXC1[J]) 
      QIN(10,I)=(A*EN+B)*1.D-16  
      GO TO 840
# SCALE BY 1/E**3
  830 QIN(10,I)=YEXC1(NEXC1)*(XEXC1(NEXC1)/EN)**3*1.D-16
  840 if(EN <= (2.0*EIN(10))) GO TO 850
      PEQIN(10,I)=PEQEL(2,(I-IOFFN(10)))
# EXCITATION  TRIPLET ABOVE XEXC2(NEXC2) SCALE BY 1/E**3
  850 QIN(11,I)=0.0 
      PEQIN(11,I)=0.5              
      if(NANISO == 2):
 PEQIN(11,I)=0.0                                   
      if(EN <= EIN(11):
) GO TO 900    
      if(EN > XEXC2(NEXC2):
) GO TO 880                                  
      DO 860 J=2,NEXC2                                                  
      if(EN <= XEXC2[J]:
) GO TO 870                                      
  860 CONTINUE                                                          
      J=NEXC2                                                           
  870 A=(YEXC2[J]-YEXC2(J-1))/(XEXC2[J]-XEXC2(J-1))                     
      B=(XEXC2(J-1)*YEXC2[J]-XEXC2[J]*YEXC2(J-1))/(XEXC2(J-1)-XEXC2[J]) 
      QIN(11,I)=(A*EN+B)*1.D-16
      GO TO 890                                         
#  SCALE BY 1/E**3
  880 QIN(11,I)=YEXC2(NEXC2)*(XEXC2(NEXC2)/EN)**3*1.D-16
  890 if(EN <= (2.0*EIN(11))) GO TO 900
      PEQIN(11,I)=PEQEL(2,(I-IOFFN(11)))   
# EXCITATION   F=0.00131                                      
  900 QIN(12,I)=0.0              
      PEQIN(12,I)=0.0                                   
      if(EN <= EIN(12):
) GO TO 905
      QIN(12,I)=.00131/(EIN(12)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(12)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(12))*ASING
      if(QIN(12,I):
 < 0.0) QIN(12,I)=0.0
      if(EN <= (2.0*EIN(12):
)) GO TO 905
      PEQIN(12,I)=PEQEL(2,(I-IOFFN(12)))     
# EXCITATION   F=0.0150                                       
  905 QIN(13,I)=0.0              
      PEQIN(13,I)=0.0                                   
      if(EN <= EIN(13):
) GO TO 910
      QIN(13,I)=.01500/(EIN(13)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(13)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(13))*ASING
      if(QIN(13,I):
 < 0.0) QIN(13,I)=0.0
      if(EN <= (2.0*EIN(13):
)) GO TO 910
      PEQIN(13,I)=PEQEL(2,(I-IOFFN(13)))     
# EXCITATION   F=0.11400                                      
  910 QIN(14,I)=0.0              
      PEQIN(14,I)=0.0                                   
      if(EN <= EIN(14):
) GO TO 915
      QIN(14,I)=.11400/(EIN(14)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(14)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(14))*ASING
      if(QIN(14,I):
 < 0.0) QIN(14,I)=0.0
      if(EN <= (2.0*EIN(14):
)) GO TO 915
      PEQIN(14,I)=PEQEL(2,(I-IOFFN(14)))     
# EXCITATION   F=0.15700                                      
  915 QIN(15,I)=0.0              
      PEQIN(15,I)=0.0                                   
      if(EN <= EIN(15):
) GO TO 920
      QIN(15,I)=.15700/(EIN(15)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(15)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(15))*ASING
      if(QIN(15,I):
 < 0.0) QIN(15,I)=0.0
      if(EN <= (2.0*EIN(15):
)) GO TO 920
      PEQIN(15,I)=PEQEL(2,(I-IOFFN(15)))
# EXCITATION   F=0.17100                                      
  920 QIN(16,I)=0.0              
      PEQIN(16,I)=0.0                                   
      if(EN <= EIN(16):
) GO TO 925
      QIN(16,I)=.17100/(EIN(16)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(16)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(16))*ASING
      if(QIN(16,I):
 < 0.0) QIN(16,I)=0.0
      if(EN <= (2.0*EIN(16):
)) GO TO 925
      PEQIN(16,I)=PEQEL(2,(I-IOFFN(16)))     
# EXCITATION   F=0.18800                                      
  925 QIN(17,I)=0.0              
      PEQIN(17,I)=0.0                                   
      if(EN <= EIN(17):
) GO TO 930
      QIN(17,I)=.18800/(EIN(17)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(17)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(17))*ASING
      if(QIN(17,I):
 < 0.0) QIN(17,I)=0.0
      if(EN <= (2.0*EIN(17):
)) GO TO 930
      PEQIN(17,I)=PEQEL(2,(I-IOFFN(17)))    
# EXCITATION   F=0.20500                                      
  930 QIN(18,I)=0.0              
      PEQIN(18,I)=0.0                                   
      if(EN <= EIN(18):
) GO TO 935
      QIN(18,I)=.20500/(EIN(18)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(18)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(18))*ASING
      if(QIN(18,I):
 < 0.0) QIN(18,I)=0.0
      if(EN <= (2.0*EIN(18):
)) GO TO 935
      PEQIN(18,I)=PEQEL(2,(I-IOFFN(18)))    
# EXCITATION   F=0.19300                                      
  935 QIN(19,I)=0.0              
      PEQIN(19,I)=0.0                                   
      if(EN <= EIN(19):
) GO TO 940
      QIN(19,I)=.19300/(EIN(19)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(19)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(19))*ASING
      if(QIN(19,I):
 < 0.0) QIN(19,I)=0.0
      if(EN <= (2.0*EIN(19):
)) GO TO 940
      PEQIN(19,I)=PEQEL(2,(I-IOFFN(19)))    
# EXCITATION   F=0.16200                                      
  940 QIN(20,I)=0.0              
      PEQIN(20,I)=0.0                                   
      if(EN <= EIN(20):
) GO TO 945
      QIN(20,I)=.16200/(EIN(20)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(20)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(20))*ASING
      if(QIN(20,I):
 < 0.0) QIN(20,I)=0.0
      if(EN <= (2.0*EIN(20):
)) GO TO 945
      PEQIN(20,I)=PEQEL(2,(I-IOFFN(20)))    
# EXCITATION   F=0.10300                                      
  945 QIN(21,I)=0.0              
      PEQIN(21,I)=0.0                                   
      if(EN <= EIN(21):
) GO TO 950
      QIN(21,I)=.10300/(EIN(21)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(21)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(21))*ASING
      if(QIN(21,I):
 < 0.0) QIN(21,I)=0.0
      if(EN <= (2.0*EIN(21):
)) GO TO 950
      PEQIN(21,I)=PEQEL(2,(I-IOFFN(21)))    
# EXCITATION   F=0.06700                                      
  950 QIN(22,I)=0.0              
      PEQIN(22,I)=0.0                                   
      if(EN <= EIN(22):
) GO TO 955
      QIN(22,I)=.06700/(EIN(22)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(22)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(22))*ASING
      if(QIN(22,I):
 < 0.0) QIN(22,I)=0.0
      if(EN <= (2.0*EIN(22):
)) GO TO 955
      PEQIN(22,I)=PEQEL(2,(I-IOFFN(22)))    
# EXCITATION   F=0.06400                                      
  955 QIN(23,I)=0.0              
      PEQIN(23,I)=0.0                                   
      if(EN <= EIN(23):
) GO TO 960
      QIN(23,I)=.06400/(EIN(23)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(23)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(23))*ASING
      if(QIN(23,I):
 < 0.0) QIN(23,I)=0.0
      if(EN <= (2.0*EIN(23):
)) GO TO 960
      PEQIN(23,I)=PEQEL(2,(I-IOFFN(23)))    
# EXCITATION   F=0.02800                                      
  960 QIN(24,I)=0.0              
      PEQIN(24,I)=0.0                                   
      if(EN <= EIN(24):
) GO TO 965
      QIN(24,I)=.02800/(EIN(24)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(24)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(24))*ASING
      if(QIN(24,I):
 < 0.0) QIN(24,I)=0.0
      if(EN <= (2.0*EIN(24):
)) GO TO 965
      PEQIN(24,I)=PEQEL(2,(I-IOFFN(24)))
  965 CONTINUE    
# LOAD BREMSSTRAHLUNG X-SECTIONS
      QIN(25,I)=0.0
      QIN(26,I)=0.0
      if(EN <= 1000.):
 GO TO 990
      DO 972 J=2,NBREM
      if(EN <= EBRM[J]:
) GO TO 973
  972 CONTINUE
      J=NBREM
  973 A=(math.log(Z6T[J])-math.log(Z6T(J-1)))/(EBRM[J]-EBRM(J-1))
      B=(math.log(Z6T[J])*EBRM(J-1)-math.log(Z6T(J-1))*EBRM[J])/(EBRM(J-1)-EBRM[J])            
      A1=(math.log(Z1T[J])-math.log(Z1T(J-1)))/(EBRM[J]-EBRM(J-1))
      B1=(math.log(Z1T[J])*EBRM(J-1)-math.log(Z1T(J-1))*EBRM[J])/(EBRM(J-1)-EBRM[J])                                
      QIN(25,I)=math.exp(A*EN+B)*4.0*1.D-24
      QIN(26,I)=math.exp(A1*EN+B1)*10.0*1.D-24
  990 CONTINUE
#
      QSNG=QIN(12,I)+QIN(13,I)+QIN(14,I)+QIN(15,I)+QIN(16,I)+QIN(17,I)+QIN(18,I)+QIN(19,I)+QIN(20,I)+QIN(21,I)+QIN(22,I)+QIN(23,I)+QIN(24,I)
      QTRP=QIN(10,I)+QIN(11,I) 
      QTOTEXC=QTRP+QSNG
      Q(1,I)=Q(2,I)+Q(5,I)+Q(4,I)+QIN(1,I)+QIN(2,I)+QIN(3,I)+QIN(4,I)+  QIN(5,I)+QIN(6,I)+QIN(7,I)+QIN(8,I)+QIN(9,I)+QEXCTOT
#    /QIN(5,I)+QIN(6,I)+QIN(7,I)+QIN(8,I)+QIN(9,I)+QEXCTOT+
#    /QIN(25,I)+QIN(26,I)
#     WRITE(6,991) EN,QTRP,QSNG,QTOTEXC
# 991 print(' EN=',D12.4,' QTRP=',D12.4,' QSNG=',D12.4,' QEXCTOT=',
#    /D12.4)
c     WRITE(6,992) EN,QION(1,I),QION(2,I),QION(3,I)
# 992 print(' EN=',D12.4,' ION1=',D12.4,' ION2=',D12.4,' ION3=',D12.4)
 1000 CONTINUE                                                          
#  SAVE COMPUTE TIME
      DO 997 K=14,NIN
      if(EFINAL <= EIN[K]:
) :
       NIN=K-1
       GO TO 998
      # endif
  997 CONTINUE
  998 CONTINUE
      if(EFINAL > 1000.):
 NIN=NIN+2 
      RETURN                                                            
      # end    
      def GAS12(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT, QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)     
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000)
      COMMON/DENS/DEN(20000)
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6)  
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250],PJ(220) 
      DIMENSION XEN(158),YMOM(158),YEL(158),YVBMOM(158),YVBEL(158),YEPS(158),XION1(63),YION1(63),XION2(66),YION2(66),XION3(66),YION3(66),XION4(41),YION4(41),XION5(41),YION5(41),XION6(40),YION6(40),XION7(37),YION7(37),XION8(30),YION8(30),XION9(27),YION9(27),XATT(68),YATT(68),XV2(17),YV2(17),X2V2(19),Y2V2(19),XV1(26),YV1(26),X3V2(11),Y3V2(11),XV3(11),YV3(11),XVPD3(14),YVPD3(14),XV130(12),YV130(12),XVPD4(14),YVPD4(14),XVPD5(11),YVPD5(11),XVPD6(11),YVPD6(11),XVPD7(11),YVPD7(11),XVPD8(11),YVPD8(11),XVPD9(11),YVPD9(11),XVPDH(9),YVPDH(9),      XTRP1(11),YTRP1(11),XTRP2(11),YTRP2(11),XKSHC(83),YKSHC(83),XKSHO(81),YKSHO(81),IOFFN(144),IOFFION(11)
      DIMENSION Z6T(25),Z8T(25),EBRM(25)
      CHARACTER*50 SCRPT(300),SCRPTN(10)                                
      CHARACTER*25 NAME 
# ELASTIC +ROTATIONAL                                                
      DATA XEN/1.D-6,.001,.002,.004,.007,.010,.014,.020,.030,.040,     0.05,0.06,0.08,0.10,.125,.150,.175,0.20,0.25,0.30,                0.35,0.40,0.50,0.60,0.70,0.85,1.00,1.25,1.50,1.70,                1.90,2.10,2.30,2.50,2.80,3.00,3.30,3.60,3.80,4.00,                4.50,5.00,5.50,6.00,7.00,8.00,10.0,12.0,15.0,17.0,                20.0,25.0,30.0,40.0,50.0,60.0,70.0,80.0,90.0,100.,120.,150.,170.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1500.,2000.,3000.,4000.,5000.,6000.,8000.,1.0D4,1.25D4,1.5D4,1.75D4,2.0D4,2.5'%.3f' %.0'%.3f' %.5D4,4.0D4,4.5D4,5.0D4,6.0D4,7.0D4,8.0D4,9.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5'%.3f' %.0'%.3f' %.5D5,4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,2.0D6,2.5'%.3f' %.0'%.3f' %.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5'%.3f' %.0'%.3f' %.5D7,4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,1.0D8,1.25D8,1.5D8,1.75D8,2.0D8,2.5'%.3f' %.0'%.3f' %.5D8,4.0D8,4.5D8,5.0D8,6.0D8,7.0D8,8.0D8,9.0D8,1.0D9/
# GROUND STATE AND B# end MODE ELASTIC + ROTATION.  MOMENTUM TRANSFER
#  AT 293.15 KELVIN     
      DATA YMOM/148.,148.,146.,141.,134.,128.,119.,109.,95.0,85.0,      76.5,69.5,59.0,52.5,47.5,41.0,36.0,30.0,22.0,16.2, 12.8,10.6,8.20,6.45,5.35,4.30,3.90,3.65,3.60,3.65,                3.75,3.85,4.00,4.20,4.60,4.90,5.30,5.80,6.00,6.00,                5.50,5.10,5.00,5.20,6.10,7.30,8.80,9.80,10.5,10.5,                9.80,8.50,7.00,5.10,4.00,3.50,3.10,2.90,2.70,2.50,2.20,1.88,1.67,1.50,1.25,1.04,.832,.682,.571,.486,.367,.287,.232,.192,.161,.0819,.0501,.0247,.0149,.0100, .00721,.00430,.00288,.00192,.00138,.00105,8.23D-4,5.5D-4,3.96D-4,3.0D-4,2.36D-4,1.91D-4,1.59D-4,1.15D-4,8.73D-5,6.90D-5,5.62D-5,4.68D-5,3.19D-5,2.34D-5,1.81D-5,1.45D-5,1.00D-5,7.48D-6,5.86D-6,4.75D-6,3.95D-6,3.36D-6,2.54D-6,2.00D-6,1.63D-6,1.37D-6,1.16D-6,8.32D-7,6.28D-7,4.94D-7,4.00D-7,2.80D-7,2.08D-7,1.62D-7,1.30D-7,1.06D-7,8.89D-8,6.51D-8,4.98D-8,3.95D-8,3.21D-8,2.66D-8,1.79D-8,1.29D-8,9.73D-9,7.63D-9,5.06D-9,3.61D-9,2.71D-9,2.11D-9,1.69D-9,1.38D-9,9.79D-10,7.28D-10,5.63D-10,4.48D-10,3.65D-10,2.35D-10,1.64D-10,1.21D-10,9.27D-11,5.95D-11,4.13D-11,3.04D-11,2.33D-11,1.84D-11,1.49D-11,1.03D-11,7.61D-12,5.83D-12,4.60D-12,3.73D-12/
# GROUND STATE AND B# end MODE ELASTIC + ROTATION.  AT 293.15 KELVIN     
      DATA YEL/148.,148.,146.,141.,135.,129.,120.,110.,96.0,86.0,      77.5,70.5,60.0,53.5,48.5,42.0,37.0,31.5,24.8,20.4, 17.4,15.5,13.0,10.7,9.20,7.50,6.30,5.30,4.65,4.46,                4.45,4.45,4.60,4.75,5.10,5.55,6.80,7.90,8.50,7.80,                6.25,6.15,6.60,7.10,8.20,9.60,11.5,13.1,14.0,14.2,                14.3,14.4,14.0,12.2,10.4,9.20,8.20,7.75,7.40,7.00,6.25,5.50,5.10,4.75,4.25,3.85,3.56,3.24,2.99,2.77,2.42,2.16,1.95,1.78,1.63,1.16,.907,.630,.484,.393,.331,.252,.204,.165,.139,.120,.106,.0865,.0731,.0636,.0565,.0509,.0465,.0398,.0350,.0317,.0286,.0264,.0224,.0197,.0178,.0164,.0145,.0132,.0123,.0116,.0111,.0107,.0101,.00967,.00937,.00915,.00897,.00868,.00849,.00837,.00829,.00818,.00812,.00808,.00805,.00803,.00801,.00799,.00798,.00797,.00797,.007965,.007957,.007954,.007951,.007951,.007948,.007948,.007948,.007948,.007946,.007945,20*.007945/
# ELASTIC FOR B# end MODE VIBRATIONS.   MOMENTUM TRANSFER     
      DATA YVBMOM/148.,148.,146.,141.,134.,128.,119.,109.,95.0,85.0,    76.5,69.5,59.0,53.5,50.0,46.5,45.5,45.0,43.0,37.0, 28.5,22.5,16.0,11.5,8.95,6.80,5.80,5.05,4.80,4.65,                4.65,4.70,4.80,5.00,5.35,5.65,6.00,6.20,6.20,6.10, 5.50,5.10,5.00,5.20,6.10,7.30,8.80,9.80,10.5,10.5,                9.80,8.50,7.00,5.10,4.00,3.50,3.10,2.90,2.70,2.50,2.20,1.88,1.67,1.50,1.25,1.04,.832,.682,.571,.486,.367,.287,.232,.192,.161,.0819,.0501,.0247,.0149,.0100, .00721,.00430,.00288,.00192,.00138,.00105,8.23D-4,5.5D-4,3.96D-4,3.0D-4,2.36D-4,1.91D-4,1.59D-4,1.15D-4,8.73D-5,6.90D-5,5.62D-5,4.68D-5,3.19D-5,2.34D-5,1.81D-5,1.45D-5,1.00D-5,7.48D-6,5.86D-6,4.75D-6,3.95D-6,3.36D-6,2.54D-6,2.00D-6,1.63D-6,1.37D-6,1.16D-6,8.32D-7,6.28D-7,4.94D-7,4.00D-7,2.80D-7,2.08D-7,1.62D-7,1.30D-7,1.06D-7,8.89D-8,6.51D-8,4.98D-8,3.95D-8,3.21D-8,2.66D-8,1.79D-8,1.29D-8,9.73D-9,7.63D-9,5.06D-9,3.61D-9,2.71D-9,2.11D-9,1.69D-9,1.38D-9,9.79D-10,7.28D-10,5.63D-10,4.48D-10,3.65D-10,2.35D-10,1.64D-10,1.21D-10,9.27D-11,5.95D-11,4.13D-11,3.04D-11,2.33D-11,1.84D-11,1.49D-11,1.03D-11,7.61D-12,5.83D-12,4.60D-12,3.73D-12/
# ELASTIC FOR B# end MODE VIBRATIONS.      
      DATA YVBEL/148.,148.,146.,141.,135.,129.,120.,110.,96.0,86.0,     77.5,70.5,60.0,54.5,51.1,47.6,46.8,47.2,48.5,46.6, 38.7,32.9,25.4,19.1,15.4,11.9,9.37,7.33,6.20,5.68,                5.52,5.43,5.52,5.65,5.93,6.40,7.70,8.44,8.78,7.93,     6.25,6.15,6.60,7.10,8.20,9.60,11.5,13.1,14.0,14.2,                14.3,14.4,14.0,12.2,10.4,9.20,8.20,7.75,7.40,7.00,6.25,5.50,5.10,4.75,4.25,3.85,3.56,3.24,2.99,2.77,2.42,2.16,1.95,1.78,1.63,1.16,.907,.630,.484,.393,.331,.252,.204,.165,.139,.120,.106,.0865,.0731,.0636,.0565,.0509,.0465,.0398,.0350,.0317,.0286,.0264,.0224,.0197,.0178,.0164,.0145,.0132,.0123,.0116,.0111,.0107,.0101,.00967,.00937,.00915,.00897,.00868,.00849,.00837,.00829,.00818,.00812,.00808,.00805,.00803,.00801,.00799,.00798,.00797,.00797,.007965,.007957,.007954,.007951,.007951,.007948,.007948,.007948,.007948,.007946,.007945,20*.007945/
# EPSILON FOR ELASTIC ANGULAR DISTRIBUTION
# EPSILON= 1.0-YEPS
      DATA YEPS/1.0,.99999,.9999,.999,.98889,.98838,.98751,.98637,.98437,.98256,.98065,.97873,.97500,.97197,.96908,.96429,.95947,.92864,.83162,.69698,.61559,.54634,.47845,.44409,.41864,.40901,.46393,.55266,.66891,.73158,.76665,.79940,.80584,.82736,.85357,.82540,.67623,.61361,.57544,.66197,.82116,.74722,.64577,.61117,.62691,.64971,.65638,.63267,.63530,.62080,.54823,.42904,.32703,.24494,.21449,.21081,.20872,.20537,.19735,.19081,.18652,.17814,.16660,.15748,.14114,.12395,.099839,.085294,.074236,.065563,.052933,.044215,.037873,.033074,.029321,.018575,.013522,.008720,.006419,.005074,.00419,.00311,.00247,.00196,.001619,.001393,.001209,.000954,7.917D-4,6.736D-4,5.847D-4,5.164D-4,4.637D-4,3.818D-4,3.224D-4,2.758D-4,2.454D-4,2.182D-4,1.701D-4,1.385D-4,1.162D-4,9.92D-5,7.50D-5,6.02D-5,4.96D-5,4.19D-5,3.58D-5,3.12D-5,2.44D-5,1.97D-5,1.63D-5,1.37D-5,1.17D-5,8.44D-6,6.34D-6,4.95D-6,3.98D-6,2.74D-6,2.00D-6,1.53D-6,1.21D-6,9.78D-7,8.09D-7,5.79D-7,4.36D-7,3.39D-7,2.72D-7,2.23D-7,1.46D-7,1.026D-7,7.610D-8,5.868D-8,3.796D-8,2.652D-8,1.955D-8,1.499D-8,1.186D-8,9.60D-9,6.65D-9,4.87D-9,3.71D-9,2.91D-9,2.35D-9,1.48D-9,1.01D-9,7.34D-10,5.55D-10,3.48D-10,2.38D-10,1.72D-10,1.30D-10,1.02D-10,8.2D-11,5.6D-11,4.0D-11,3.0D-11,2.4D-11,1.9D-11/
#      
# V[010]  B# end MODE  ( ANALYTICAL DIPOLE def AT THRESHOLD)
# ABOVE 70EV SCALED BY 1/E
      DATA XV2/.08275,2.00,2.50,3.00,3.50,3.80,4.00,4.50,5.00,6.00,     8.00,10.0,15.0,20.0,30.0,50.0,70.0/
      DATA YV2/0.00,0.00,0.24,0.48,1.29,1.70,1.70,1.17,0.74,0.42,0.01,0.08,0.05,0.08,0.12,0.07,.001/
# V[020]  B# end MODE HARMONIC  RESONANCE    ABOVE 70EV SCALED BY 1/E
      DATA X2V2/.15937,0.18,0.50,1.00,2.00,3.00,3.50,3.80,4.00,4.50,5.00,6.00,8.00,10.0,15.0,20.0,30.0,50.0,70.0/
      DATA Y2V2/0.00,0.02,0.01,.003,.025,0.09,0.31,0.44,0.56,0.49,     0.35,0.17,0.08,0.10,0.02,.008,.015,.008,.001/
# V[100] SYMMETRIC STRETCH                ABOVE 70EV SCALED BY 1/E   
      DATA XV1/.17211,0.18,0.20,0.23,0.25,0.30,0.40,0.50,0.60,1.00,2.00,2.50,3.00,3.50,3.80,4.00,4.50,5.00,6.00,8.00,10.0,15.0,20.0,30.0,50.0,70.0/
      DATA YV1/0.00,.475,.790,0.91,0.91,0.82,0.58,0.43,0.34,0.32,    0.38,0.66,0.89,1.27,1.32,1.04,0.53,0.18,.084,.075,                .077,.030,.009,.030,.008,.001/
# V[030] + V[110]                          ABOVE 10EV SCALED BY 1/E  
      DATA X3V2/.251,2.00,2.50,3.00,3.50,3.80,4.00,4.50,5.00,6.00, 10.0/                         
      DATA Y3V2/0.00,0.00,0.01,0.17,0.36,0.58,0.58,0.36,0.17,0.01,      .001/
# V[001] ASYMMETRIC STRETCH  (ANALYTICAL DIPOLE def AT THRESHOLD)
# ABOVE 10EV SCALED BY 1/E 
      DATA XV3/.29126,2.00,3.00,3.50,3.80,4.00,4.50,5.00,6.00,8.00,10.0/
      DATA YV3/0.00,0.00,.002,.005,.010,.005,.002,.001,.001,.001,.001/
# V[040] + V[120] + V[200]  POLYAD 3        ABOVE 10EV SCALED BY 1/E
      DATA XVPD3/.335,0.35,0.50,0.80,2.00,2.50,3.00,3.50,3.80,4.00,     4.50,5.00,6.00,10.0/
      DATA YVPD3/0.00,0.09,.035,0.02,0.02,0.02,0.21,0.43,0.70,0.70,     0.43,0.21,0.05,.020/
#  V[130] + V[210]                          ABOVE 20EV SCALED BY 1/E  
      DATA XV130/0.422,2.00,2.50,3.00,3.50,3.80,4.00,4.50,5.00,6.00,10.0,20.0/               
      DATA YV130/0.00,0.00,.005,0.10,0.22,0.35,0.35,0.22,0.10,.025,.005,.002/
#  POLYAD 4                                ABOVE 10EV SCALED BY 1/E
      DATA XVPD4/0.505,0.55,0.65,1.00,2.00,2.50,3.00,3.50,3.80,4.00,4.50,5.00,6.00,10.0/          
      DATA YVPD4/0.00,.0017,.0005,.0001,.0001,.005,0.12,0.24,0.40,0.40,0.24,0.13,0.01,.001/
#  POLYAD 5                                ABOVE 10EV SCALED BY 1/E 
      DATA XVPD5/0.685,2.00,2.50,3.00,3.50,3.80,4.00,4.50,5.00,6.00,10.0/                         
      DATA YVPD5/0.00,0.00,.003,0.07,0.14,0.24,0.24,0.14,0.08,.006,.001/
#  POLYAD 6                                ABOVE 10EV SCALED BY 1/E 
      DATA XVPD6/0.825,2.00,2.50,3.00,3.50,3.80,4.00,4.50,5.00,6.00,10.0/                         
      DATA YVPD6/0.00,0.00,.001,0.05,0.10,0.16,0.16,0.10,0.05,.004,.001/
#  POLYAD 7                                ABOVE 10EV SCALED BY 1/E
      DATA XVPD7/0.995,2.00,2.50,3.00,3.50,3.80,4.00,4.50,5.00,6.00,10.0/                         
      DATA YVPD7/0.00,0.00,.001,0.03,0.06,0.10,0.10,0.06,0.03,.003,.001/
#  POLYAD 8                                ABOVE 10EV SCALED BY 1/E
      DATA XVPD8/1.160,2.00,2.50,3.00,3.50,3.80,4.00,4.50,5.00,6.00,10.0/                         
      DATA YVPD8/0.00,0.00,.001,0.03,0.06,0.10,0.10,0.06,0.03,.003,.001/
#  POLYAD 9                                ABOVE 10EV SCALED BY 1/E
      DATA XVPD9/1.320,2.00,2.50,3.00,3.50,3.80,4.00,4.50,5.00,6.00,10.0/                         
      DATA YVPD9/0.00,0.00,.001,0.03,0.06,0.10,0.10,0.06,0.03,.003,.001/
#  SUM HIGHER POLYADS                      ABOVE 10EV SCALED BY 1/E
      DATA XVPDH/2.50,3.00,3.50,3.80,4.00,4.50,5.00,6.00,10.0/ 
      DATA YVPDH/0.00,0.01,0.36,0.58,0.58,0.36,0.16,.045,.001/
# DATA FROM RAP AND BRIGLIA ( SCALED BY 1.031 FROM INCREASE IN CO2
#                              IONISATION X-SEC)
# ABOVE 10EV SCALED BY 1/E**3
      DATA XATT/3.30,3.40,3.50,3.60,3.70,3.80,3.90,4.00,4.10,4.20,4.30,4.40,4.50,4.60,4.70,4.80,4.90,5.00,5.10,5.20,5.30,5.40,5.50,5.60,5.70,5.80,5.90,6.00,6.10,6.20,6.30,6.40,6.50,6.60,6.70,6.80,6.90,7.00,7.10,7.20,  7.30,7.40,7.50,7.60,7.70,7.80,7.90,8.00,8.10,8.20, 8.30,8.40,8.50,8.60,8.70,8.80,8.90,9.00,9.10,9.20, 9.30,9.40,9.50,9.60,9.70,9.80,9.90,10.0/
      DATA YATT/.0,1.81D-5,6.35D-5,1.45D-4,2.81D-4,5.44D-4,8.43D-4,1.09D-3,1.32D-3,1.45D-3,1.53D-3,1.40D-3,1.25D-3,1.01D-3,7.98D-4,6.17D-4,4.54D-4,2.91D-4,2.00D-4,1.36D-4,9.98D-5,6.35D-5,2.72D-5,1.81D-5,9.07D-6,1.00D-6,9.07D-6,1.81D-5,2.72D-5,4.54D-5,6.35D-5,1.09D-4,1.45D-4,2.08D-4,2.99D-4,3.99D-4,5.44D-4,9.25D-4,9.25D-4,1.18D-3,1.49D-3,1.84D-3,2.23D-3,2.75D-3,3.22D-3,3.68D-3,4.08D-3,4.37D-3,4.41D-3,4.26D-3,3.92D-3,3.46D-3,2.92D-3,2.22D-3,1.77D-3,1.40D-3,1.05D-3,8.07D-4,6.35D-4,4.99D-4,3.80D-4,2.99D-4,2.36D-4,1.81D-4,1.36D-4,1.09D-4,8.17D-5,1.00D-6/
# USE 1/EN**2 EXTRAPOLATION ABOVE 30EV
      DATA XTRP1/8.89,10.0,11.0,12.0,13.0,15.0,17.0,20.0,23.0,27.0,30.0/
      DATA YTRP1/0.00,.110,.201,.231,.248,.270,.275,.248,.206,.151,.122/
#  USE 1/E**2 EXTRAPOLATION ABOVE 36EV
      DATA XTRP2/11.3,12.0,13.0,14.0,16.0,18.0,21.0,24.0,28.0,31.0,36.0/
      DATA YTRP2/0.00,.322,.662,.772,.873,.919,.919,.873,.689,.562,.417/
# IONISATION VALUES ABOVE 1KEV GENERATED BY BORN BETHE IN SUB)   
# DATA FROM RAPP, LINDSAY AND RIEKE ALSO BB THEORY
#C    DATA XION/13.776,14.5,15.0,15.5,16.0,16.5,17.0,17.5,18.0,18.5,
#    /19.0,19.5,21.0,21.5,22.0,22.5,23.0,23.5,24.0,26.0,      
#    /28.0,30.0,32.0,34.0,36.0,38.0,40.0,45.0,50.0,55.0,
#    /60.0,65.0,70.0,75.0,80.0,85.0,90.0,100.,110.,130.,
#    /140.,160.,180.,200.,225.,250.,275.,300.,350.,400.,
#    /450.,500.,550.,600.,650.,700.,750.,800.,850.,900.,
#    /950.,1000./                                           
# GROSS IONISATION  
#     DATA YION/0.00,.055,.097,.135,.174,.215,.255,.293,.333,.373,
#    /.428,.452,.577,.623,.676,.727,.777,.828,.880,1.14,      
#    /1.37,1.54,1.70,1.84,1.96,2.07,2.19,2.45,2.67,2.84,         
#    /3.02,3.16,3.27,3.36,3.45,3.51,3.56,3.64,3.66,3.65,
#    /3.63,3.52,3.43,3.32,3.21,3.05,2.97,2.82,2.58,2.43,
#    /2.23,2.09,1.96,1.85,1.77,1.68,1.61,1.53,1.45,1.41,                
#    /1.36,1.30/                                      
# COUNTING IONISATION
#     DATA YINC/0.00,.055,.097,.135,.174,.215,.255,.293,.333,.373,
#    /.428,.452,.577,.623,.676,.727,.777,.828,.880,1.14,      
#    /1.37,1.54,1.70,1.84,1.96,2.07,2.19,2.45,2.67,2.84,         
#    /3.01,3.14,3.26,3.33,3.43,3.48,3.54,3.62,3.63,3.62,
#    /3.60,3.48,3.40,3.29,3.17,3.02,2.94,2.79,2.55,2.41,
#    /2.21,2.08,1.94,1.84,1.75,1.66,1.60,1.51,1.44,1.40,                
#    /1.35,1.29/ 
# 
# IONISATION VALUES ABOVE 1KEV GENERATED BY BORN BETHE IN SUB)   
# DATA FROM RAPP, LINDSAY AND RIEKE ALSO BB THEORY
      DATA XION1/13.776,14.5,15.0,15.5,16.0,16.5,17.0,17.5,18.0,18.5,19.0,19.5,21.0,21.5,22.0,22.5,23.0,23.5,24.0,26.0,      28.0,30.0,32.0,34.0,36.0,38.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,110.,120.,140.,160.,180.,200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000./                                           
# IONISATION CO2+ ( INCLUDING EXCITED STATES A2PIu and B2SIGMA+u )
      DATA YION1/0.00,.056,.100,.139,.179,.221,.263,.302,.343,.384,.441,.466,.594,.642,.696,.749,.800,.853,.906,1.05,1.21,1.32,1.40,1.47,1.55,1.63,1.70,1.84,1.94,2.00,2.06,2.10,2.13,2.15,2.19,2.20,2.22,2.23,2.25,2.23, 2.23,2.19,2.12,2.08,2.01,1.95,1.87,1.83,1.75,1.62,1.54,1.43,1.35,1.27,1.21,1.16,1.10,1.06,1.01,.964,.941,.909,.876/  
# IONISATION EXCITATION CO2+(A2PIu) 17.314ev
# ITIKAWA : SCALED CO2+ BY 38.5% ABOVE 400EV
      DATA XION2/17.314,18.8,19.9,21.1,22.4,23.7,25.1,26.6,28.2,29.8,31.6,33.5,35.4,37.5,39.8,42.1,44.6,47.2,50.0,53.0,56.1,59.5,63.0,66.7,70.7,74.8,79.3,88.9,94.2,99.8,106.,112.,119.,126.,133.,141.,149.,158.,167.,177.,188.,199.,211.,223.,236.,250.,265.,281.,298.,315.,334.,354.,375.,397.,450.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000./ 
      DATA YION2/0.0,.0314,.0494,.0682,.0873,.107,.128,.150,.168,.191,.214,.233,.256,.280,.304,.331,.356,.388,.416,.445,.476,.508,.541,.579,.615,.646,.675,.723,.740,.754,.767,.776,.784,.790,.796,.796,.798,.796,.796,.791,.784,.775,.763,.750,.734,.718,.702,.687,.671,.656,.640,.624,.609,.593,.551,.520,.489,.466,.447,.423,.408,.389,.371,.362,.350,.337/                            
c IONISATION EXCITATION CO2+(B2SIGMA+u) 18.077ev  
# ITIKAWA : SCALED CO2+ BY 22.0% ABOVE 400EV
      DATA XION3/18.077,18.8,19.9,21.1,22.4,23.7,25.1,26.6,28.2,29.8,31.6,33.5,35.4,37.5,39.8,42.1,44.6,47.2,50.0,53.0,56.1,59.5,63.0,66.7,70.7,74.8,79.3,88.9,94.2,99.8,106.,112.,119.,126.,133.,141.,149.,158.,167.,177.,188.,199.,211.,223.,236.,250.,265.,281.,298.,315.,334.,354.,375.,397.,450.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000./ 
      DATA YION3/0.0,.0121,.0247,.0384,.0517,.0653,.0797,.0932,.106,.120,.134,.147,.162,.176,.191,.207,.222,.239,.256,.272,.288,.304,.321,.337,.353,.371,.386,.415,.425,.434,.443,.451,.457,.462,.466,.468,.469,.467,.466,.462,.457,.449,.441,.432,.423,.414,.404,.395,.386,.377,.368,.357,.348,.339,.315,.297,.279,.266,.255,.242,.233,.222,.212,.207,.200,.193/                            
# IONISATION O+
      DATA XION4/19.07,25.0,30.0,35.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,110.,120.,140.,160.,180.,200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000./
      DATA YION4/0.0,.0419,.0986,.150,.195,.245,.299,.352,.407,.452,.485,.526,.556,.584,.606,.622,.640,.663,.671,.680,.670,.647,.631,.606,.572,.553,.524,.470,.433,.388,.361,.339,.311,.299,.283,.268,.252,.238,.229,.222,.209/
# IONISATION CO+
      DATA XION5/19.47,25.0,30.0,35.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,110.,120.,140.,160.,180.,200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000./
      DATA YION5/0.0,.0279,.139,.247,.281,.299,.319,.339,.362,.369,.379,.380,.386,.389,.390,.390,.389,.386,.378,.365,.340,.333,.314,.300,.278,.269,.250,.226,.211,.193,.178,.165,.154,.145,.139,.132,.124,.119,.113,.110,.103/
# IONISATION C+
      DATA XION6/27.82,30.0,35.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,110.,120.,140.,160.,180.,200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000./
      DATA YION6/0.0,.0024,.028,.0782,.121,.149,.178,.208,.229,.246,.261,.278,.285,.296,.306,.310,.322,.323,.331,.321,.309,.301,.288,.273,.260,.245,.215,.202,.183,.169,.154,.145,.136,.127,.123,.116,.108,.105,.101,.0964/
# IONISATION CO2++
      DATA XION7/37.4,45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,110.,120.,140.,160.,180.,200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000./
      DATA YION7/0.0,.00166,.00399,.00686,.0106,.0126,.0159,.0172,.0206,.0219,.0227,.0246,.0265,.0285,.0290,.0294,.0290,.0285,.0272,.0257,.0232,.0231,.0203,.0183,.0175,.0165,.0141,.0128,.0125,.0113,.0106,.00986,.00961,.00883,.00823,.00741,.00723/
# IONISATION C++
      DATA XION8/72.0,80.0,85.0,90.0,95.0,100.,110.,120.,140.,160.,180.,200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000./
      DATA YION8/0.0,.000179,.000215,.000311,.000506,.000520,.000751,.00108,.00157,.00186,.00249,.00279,.00256,.00291,.00247,.00252,.00216,.00224,.00198,.00177,.00184,.00145,.00169,.00147,.00157,.00139,.00129,.000965,.000897,.000984/
# IONISATION O++
      DATA XION9/74.0,95.0,100.,110.,120.,140.,160.,180.,200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000./
      DATA YION9/0.0,.000169,.000197,.000324,.000721,.00133,.00159,.00217,.00233,.00271,.00286,.00304,.00276,.00249,.00215,.00193,.00192,.00168,.00156,.00142,.00176,.00147,.00127,.00127,.00100,.00116,.00103/
# CARBON K-SHELL IONISATION X-SECTION  
      DATA XKSHC/285.,298.,307.,316.,325.,335.,345.,365.,398.,422.,447.,473.,501.,531.,613.,668.,708.,750.,817.,917.,1000.,1122.,1296.,1496.,1679.,1884.,2054.,2238.,2512.,2985.,3981.,5012.,7079.,1.0D4,1.50D4,2.05D4,2.51'%.3f' %.07D4,4.10D4,5.01D4,6.13D4,7.08D4,8.18D4,1.0D5,1.54D5,2.05D5,2.99D5,4.10D5,5.01D5,6.13D5,7.08D5,8.18D5,1.0D6,1.26D6,1.5D6,2.05'%.3f' %.07D6,4.10D6,5.01D6,6.13D6,7.08D6,8.18D6,1.0D7,1.26D7,1.5D7,2.05'%.3f' %.07D7,4.10D7,5.01D7,6.13D7,7.08D7,8.18D7,1.0D8,1.26D8,1.5D8,2.05'%.3f' %.07D8,4.10D8,5.01D8,6.13D8,7.08D8,8.18D8,1.0D9/
      DATA YKSHC/0.00,1.66D-4,3.48D-4,5.25D-4,6.96D-4,8.63D-4,1.02D-3,1.33D-3,1.75D-3,2.01D-3,2.24D-3,2.46D-3,2.66D-3,2.84D-3,3.21D-3,3.38D-3,3.47D-3,3.55D-3,3.65D-3,3.72D-3,3.75D-3,3.74D-3,3.68D-3,3.57D-3,3.45D-3,3.31D-3,3.19D-3,3.07D-3,2.91D-3,2.66D-3,2.25D-3,1.95D-3,1.55D-3,1.21D-3,8.97D-4,7.07D-4,6.07D-4,5.21D-4,4.21D-4,3.63D-4,3.14D-4,2.84D-4,2.57D-4,2.25D-4,1.74D-4,1.50D-4,1.28D-4,1.15D-4,1.09D-4,1.05D-4,1.03D-4,1.02D-4,1.01D-4,1.005D-4,1.01D-4,1.03D-4,1.07D-4,1.11D-4,1.14D-4,1.17D-4,1.20D-4,1.22D-4,1.25D-4,1.29D-4,1.32D-4,1.38D-4,1.45D-4,1.50D-4,1.54D-4,1.58D-4,1.60D-4,1.63D-4,1.67D-4,1.71D-4,1.74D-4,1.80D-4,1.87D-4,1.92D-4,1.96D-4,2.00D-4,2.02D-4,2.05D-4,2.09D-4/
# OXYGEN K-SHELL IONISATION X-SECTION (MULTIPLY BY 2 FOR MOLECULE)
      DATA XKSHO/532.,541.,557.,574.,591.,609.,627.,646.,665.,685.,706.,727.,749.,793.,841.,891.,944.,1000.,1090.,1188.,1296.,1496.,1679.,1884.,2054.,2238.,2512.,2985.,3981.,5012.,7079.,1.00D4,1.50D4,2.05D4,2.51'%.3f' %.07D4,4.10D4,5.01D4,6.13D4,7.08D4,8.18D4,1.00D5,1.54D5,2.05D5,2.99D5,4.10D5,5.01D5,6.13D5,7.08D5,8.18D5,1.00D6,1.25D6,1.50D6,2.05'%.3f' %.07D6,4.10D6,5.01D6,6.13D6,7.08D6,8.18D6,1.00D7,1.26D7,1.50D7,2.05'%.3f' %.07D7,4.10D7,5.01D7,6.13D7,7.08D7,8.18D7,1.00D8,1.26D8,1.50D8,2.05'%.3f' %.07D8,4.10D8,5.01D8,6.13D8,7.08D8,8.18D8,1.00D9/
      DATA YKSHO/0.00,3.31D-5,8.86D-5,1.42D-4,1.95D-4,2.45D-4,2.94D-4,3.41D-4,3.87D-4,4.31D-4,4.73D-4,5.14D-4,5.53D-4,6.27D-4,6.95D-4,7.56D-4,8.13D-4,8.63D-4,9.29D-4,9.84D-4,1.03D-3,1.08D-3,1.10D-3,1.11D-3,1.11D-3,1.10D-3,1.08D-3,1.03D-3,9.24D-4,8.27D-4,6.81D-4,5.49D-4,4.18D-4,3.35D-4,2.90D-4,2.50D-4,2.04D-4,1.77D-4,1.53D-4,1.39D-4,1.26D-4,1.11D-4,8.62D-5,7.45D-5,6.36D-5,5.75D-5,5.48D-5,5.29D-5,5.20D-5,5.13D-5,5.08D-5,5.08D-5,5.12D-5,5.24D-5,5.47D-5,5.68D-5,5.84D-5,6.00D-5,6.13D-5,6.26D-5,6.44D-5,6.65D-5,6.81D-5,7.11D-5,7.50D-5,7.78D-5,7.97D-5,8.17D-5,8.31D-5,8.45D-5,8.65D-5,8.87D-5,9.04D-5,9.36D-5,9.75D-5,1.00D-4,1.02D-4,1.04D-4,1.06D-4,1.07D-4,1.09D-4/
# BREMSSTRAHLUNG X-SECTION WITH CUT OFF UNITS 10**-24 CM**2
      DATA Z6T/298.,178.,85.2,47.5,26.3,12.2,7.06,4.45,3.06,2.82,2.89,2.99,3.08,3.13,3.18,3.25,3.31,3.39,3.44,3.49,3.52,3.54,3.55,3.57,3.57/
      DATA Z8T/477.,294.,145.,81.6,45.8,21.2,12.2,7.69,5.22,4.76,4.84,4.99,5.10,5.20,5.27,5.38,5.46,5.58,5.65,5.72,5.77,5.80,5.81,5.83,5.84/
      DATA EBRM/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,4.E7,5.E7,6.E7,8.E7,1.E8/
# ---------------------------------------------------------------------
# 2015: UPGRADE INCLUDES :
#      1) OSCILLATOR STRENGTH FROM ANALYSIS OF DATA FROM
#         BRION GROUP AND SHAW ET AL . OSCILLATOR SUM S(0)=21.9856
#         S(-1)i=5.372
#      2) USED STRAUB DATA FOR DISSOCIATIVE IONISATION ABOVE 30EV
#         AND   RAP AND ENGLADER-GOLDEN  AT LOW ENERGY
#      3) IONISATION-EXCITATION FROM ITIKAWA REVIEW
#
# ANGULAR DISTRIBUTION ONLY ALLOWED FOR ELASTIC , IONISATION AND 
# EXCITATION ABOVE 10EV. 
#  
# ---------------------------------------------------------------------
c     NANISO=0
      if(NANISO == 0):
 :
       NAME='CO2  2015   ISOTROPIC    '
      else:
       NAME='CO2  2015 ANISOTROPIC    '
      # endif
#  --------------------------------------------------------------------
# ---------------------------------------------------------------------
#    BORN-BETHE VALUES FOR IONISATION
      CONST=1.873884D-20
      EMASS2=1021997.804
      API=numpy.arccos(-1.00)
      A0=0.52917720859D-8
      RY=13.60569193
      BBCONST=16.0*API*A0*A0*RY*RY/EMASS2
#
      AM2=5.38
      C=57.0 
      EOBFAC=0.56
#     
# AVERAGE AUGER EMISSIONS FROM EACH SHELL
      AUGKC=2.0
      AUGKO=1.99
# ARRAY SIZE
      NASIZE=20000
#
      NION=11
      NATT=1 
      NIN=144 
      NNULL=0 
      IONMODEL=0  
#
      NBREM=25
      DO 11 J=1,NIN
      IZBR[J]=0
   11 CONTINUE
      IZBR(145)=6
      IZBR(146)=8
#
      DO 1 J=1,6
    1 KEL[J]=NANISO
      DO 2 J=1,NIN
      KIN[J]=NANISO
    2 CONTINUE
#                 
      NEL=158                                                           
      NV2=17                                                          
      N2V2=19                                                           
      NV1=26                                                            
      N3V2=11
      NV3=11
      NPD3=14                                                           
      NV130=12                                                          
      NPD4=14  
      NPD5=11
      NPD6=11
      NPD7=11
      NPD8=11
      NPD9=11
      NPDH=9                                                          
      NATT1=68
      NTRP1=11
      NTRP2=11
      NION1=63
      NION2=66
      NION3=66
      NION4=41
      NION5=41
      NION6=40
      NION7=37
      NION8=30
      NION9=27 
      NKSHC=83
      NKSHO=81 
#                                                     
      E[1]=0.0                                                          
      E(2)=2.0*EMASS/(44.0095*AMU)                                      
      E(3)=13.776                          
      E(4)=0.0                   
      E(5)=0.0 
      E(6)=0.0 
#     
      EION[1]=13.776
      EION(2)=17.314
      EION(3)=18.077
      EION(4)=19.07
      EION(5)=19.47
      EION(6)=27.82
      EION(7)=37.4
      EION(8)=72.0
      EION(9)=74.0
      EION(10)=285.0
      EION(11)=532.0
# OPAL AND BEATY       
#     DO 90 JK=1,9
      DO 90 JK=1,11
      EOBY(JK)=EION(JK)*EOBFAC
      EOBY(JK)=13.8
   90 CONTINUE
# OPAL BEATY FOR CARBON AND OXYGEN K-SHELLS
#     EOBY(10)=200.0
#     EOBY(11)=375.0
#
      DO 91 JK=1,9
      LEGAS(JK)=0
      ISHELL(JK)=0
      NC0(JK)=0
      EC0(JK)=0.0
      WKLM(JK)=0.0
      EFL(JK)=0.0
      NG1(JK)=0
      EG1(JK)=0.0
      NG2(JK)=0
      EG2(JK)=0.0
   91 CONTINUE
# DOUBLE CHARGE ++ ION STATES (EXTRA ELECTRON)
      NC0(7)=1
      EC0(7)=1.0
      NC0(8)=1
      EC0(8)=1.0
      NC0(9)=1
      EC0(9)=1.0  
# FLUORESCENCE DATA K SHELLS   
      LEGAS(10)=1
      LEGAS(11)=2
      ISHELL(10)=1
      ISHELL(11)=1
#
      NC0(10)=2
      EC0(10)=253.
      WKLM(10)=0.0026
      EFL(10)=273.
      NG1(10)=1
      EG1(10)=253.
      NG2(10)=2
      EG2(10)=5.
      NC0(11)=3
      EC0(11)=485.
      WKLM(11)=0.0069
      EFL(11)=518.
      NG1(11)=1
      EG1(11)=480.
      NG2(11)=2
      EG2(11)=5.0
#     
      DO 776 J=1,NION
      DO 777 I=1,NASIZE
      if(EG[I]:
 > EION[J]) :
       IOFFION[J]=I-1
       GO TO 776
      # endif 
  777 CONTINUE
  776 CONTINUE
# DIPOLE TRANSITION STRENGTH FOR VIBRATIONS V010 AND V001      
      AMPV2=0.1703
      AMPV3=0.3922
#-----------------------------------------------------------------------
#  B0 IS ROTATIONAL CONSTANT
#  QBQA IS QUADRUPOLE MOMENT       
      B0=4.838D-5
      A0=0.5291772083D-8
      QBQA=3.24
      QBK=1.67552*(QBQA*A0)**2
#--------------------------------------------------------------------- 
# CALC FRACTIONAL POPULATION DENSITY OF ROTATIONAL STATES
      PJ[1]=1.0
      DO 3 L=2,31  
      J=(2*L)-2
    3 PJ(L)=(2*J+1)*math.exp(-J*(J+1)*B0/AKT)
      SUM=0.0
      DO 4 L=1,31
    4 SUM=SUM+PJ(L)
      DO 5 L=1,31
    5 PJ(L)=PJ(L)/SUM
#--------------------------------------------------------------------- 
# CALC ROTATIONAL TRANSITION ENERGIES
      DO 6 K=1,59,2 
      EIN[K]=B0*(4*K+2)
    6 EIN(K+1)=-EIN[K]   
      EIN(61)  = -0.08275                                               
      EIN(62)  =  0.08275
      EIN(63)  = -0.15937                                               
      EIN(64)  =  0.15937 
      EIN(65)  = -0.17211
      EIN(66)  =  0.17211
      EIN(67)  = -0.251  
      EIN(68)  =  0.251 
      EIN(69)  = -0.29126
      EIN(70)  =  0.29126  
      EIN(71)  =  0.335                                                 
      EIN(72)  =  0.422                                                 
      EIN(73)  =  0.505 
      EIN(74)  =  0.685 
      EIN(75)  =  0.825
      EIN(76)  =  0.995
      EIN(77)  =  1.160
      EIN(78)  =  1.320                                                 
      EIN(79)  =  2.500                                                 
      EIN(80)  =  6.50                                                  
      EIN(81)  =  6.75
      EIN(82)  = 7.00
      EIN(83)  = 7.25
      EIN(84)  = 7.50
      EIN(85)  = 7.75
      EIN(86)  = 8.00
      EIN(87)  = 8.25
      EIN(88)  = 8.50
      EIN(89)  = 8.75
      EIN(90)  = 8.89                                                   
      EIN(91)  = 8.90 
      EIN(92)  = 9.15
      EIN(93)  = 9.40
      EIN(94)  = 9.65
      EIN(95)  = 9.90
      EIN(96)  =10.15
      EIN(97)  =10.7 
      EIN(98)  =11.048
      EIN(99)  =11.3
      EIN(100) =11.385                                                 
      EIN(101) =11.543
      EIN(102) =11.608
      EIN(103) =11.683
      EIN(104) =11.758
      EIN(105) =11.826
      EIN(106) =11.971
      EIN(107) =12.142
      EIN(108) =12.301
      EIN(109) =12.469
      EIN(110) =12.627                                                 
      EIN(111) =12.75 
      EIN(112) =12.901
      EIN(113) =13.01 
      EIN(114) =13.15 
      EIN(115) =13.28 
      EIN(116) =13.39 
      EIN(117) =13.51 
      EIN(118) =13.68 
      EIN(119) =13.78 
      EIN(120) =14.0                                                   
      EIN(121) =14.25 
      EIN(122) =14.5  
      EIN(123) =14.75 
      EIN(124) =15.0  
      EIN(125) =15.25 
      EIN(126) =15.5  
      EIN(127) =15.75 
      EIN(128) =16.0  
      EIN(129) =16.25 
      EIN(130) =16.5                                                   
      EIN(131) =16.75 
      EIN(132) =17.0  
      EIN(133) =17.25 
      EIN(134) =17.5  
      EIN(135) =17.75 
      EIN(136) =18.0
      EIN(137) =18.25
      EIN(138) =18.50
      EIN(139) =18.75
      EIN(140) =19.0
      EIN(141) =19.25
      EIN(142) =19.50
      EIN(143) =19.75
      EIN(144) =25.0
      EIN(145) = 0.0
      EIN(146) = 0.0      
#  OFFSET ENERGY FOR EXCITATION LEVELS ANGULAR DISTRIBUTION
      DO 551 NL=1,144
      DO 651 I=1,NASIZE
      if(EG[I]:
 > abs(EIN(NL))) :
       IOFFN(NL)=I-1
       GO TO 551
      # endif
  651 CONTINUE
  551 CONTINUE
#***********************************************************************
# ENTER PENNING TRANSFER FRACTION FOR EACH LEVEL
# FIRST 81 LEVELS UNLIKELY TO HAVE ENOUGH ENERGY
      DO 7 K=1,81
      DO 7 L=1,3
    7 PENFRA[L,K]=0.0
# PENNING TRANSFER FRACTION FOR LEVELS 
      DO 7000 K=82,NIN
      PENFRA[1,K]=0.0
# PENNING TRANSFER DISTANCE IN MICRONS
      PENFRA[2,K]=1.0
# PENNING TRANSFER TIME IN PICOSECONDS
      PENFRA[3,K]=1.0
 7000 CONTINUE
      if(IPEN == 0):
 GO TO 9
      DO 8 KDUM=82,NIN
      if(PENFRA[1,KDUM] == 0.0):
 GO TO 8
      WRITE(6,999) NAME,EIN(KDUM),PENFRA[1,KDUM],PENFRA[2,KDUM],PENFRA[3,KDUM]
 999  print(' GAS = ',A15,' ENERGY LEVEL = ','%.4f' %,' EV.',/,' PENNING PROBABILITY =','%.3f' % ,' ABS.LENGTH =',F7.2,' DECAY TIME =',F7.1,/)
    8 CONTINUE
#***********************************************************************
# 
# DEGENERACY OF VIBRATIONAL STATES
    9 DEGV1=1.0
      DEGV2=2.0
      DEGV3=1.0
      DEG2V2=3.0
# 3V2 === SUM (3V2 + V12) =   4+2
      DEG3V2=6.0 
#----------------------------------------------------         
# CALC POPULATION OF VIBRATIONAL STATES    
      SUM=0.0   
      APOPV2=DEGV2*math.exp(EIN(61)/AKT)   
      APOP2V2=DEG2V2*math.exp(EIN(63)/AKT)
      APOPV1=DEGV1*math.exp(EIN(65)/AKT)  
      APOP3V2=DEG3V2*math.exp(EIN(67)/AKT)
      APOPV3=DEGV3*math.exp(EIN(69)/AKT)
      SUM=1.0+APOPV2+APOP2V2+APOPV1+APOP3V2+APOPV3
      APOPGS=1.0/SUM
      APOPV2=APOPV2/SUM
      APOP2V2=APOP2V2/SUM
      APOPV1=APOPV1/SUM
      APOP3V2=APOP3V2/SUM
      APOPV3=APOPV3/SUM
      APB# end=APOPV2+APOP2V2+APOP3V2
#     WRITE(6,865) APOPGS,APOPV2,APOP2V2,APOPV1,APOP3V2,APOPV3,APB# end
# 865 print(' APOPGS=',F8.6,' APOPV2=',F8.6,' APOP2V2=',F8.6,' APOPV1='
#    /,F8.6,' APOP3V2=',F8.6,' APOPV3=',F8.6,/,' APB# end=',F12.10)
#     
# RENORMALISE VIBRATIONAL GROUND STATE POPULATION IN ORDER TO ACCOUNT 
# FOR EXCITATION FROM VIBRATIONALLY EXCITED STATES  
      APOPGS=1.0
# B# end MODE AND EFFECTIVE GROUND STATE POPULATION AT 293.15 KELVIN      
      AEXT20=7.51373753D-2
      AGST20=1.0-AEXT20  
#     WRITE(6,866) APOPGS,AEXT20 
# 866 print(' RENORMALISED GS POPULATION=', '%.4f' %,' AEXT20=',F12.10)  
#------------------------------------------------------            
      SCRPT[1]='                                                  '
      SCRPT(2)=' ELASTIC  ANISOTROPIC          CO2                '
      if(NANISO == 0):
 :
      SCRPT(2)=' ELASTIC    ISOTROPIC          CO2                '  
      # endif
      SCRPT(3)=' IONISATION        CO2+           ELOSS=  13.776  '
      SCRPT(4)=' IONISATION-EXC    CO2+(A2PIu)    ELOSS=  17.314  '
      SCRPT(5)=' IONISATION-EXC    CO2+(B2SIG+u)  ELOSS=  18.077  '
      SCRPT(6)=' DISSOCIATIVE ION  O+             ELOSS=  19.07   '
      SCRPT(7)=' DISSOCIATIVE ION  CO+            ELOSS=  19.47   '
      SCRPT(8)=' DISSOCIATIVE ION  C+             ELOSS=  27.82   '
      SCRPT(9)=' DISSOCIATIVE ION  CO2++          ELOSS=  37.4    '
      SCRPT(10)=' DISSOCIATIVE ION  C++            ELOSS=  72.0    '
      SCRPT(11)=' DISSOCIATIVE ION  O++            ELOSS=  74.0    '
      SCRPT(12)=' IONISATION CARBON K-SHELL        ELOSS= 285.0    '
      SCRPT(13)=' IONISATION OXYGEN K-SHELL        ELOSS= 532.0    '
      SCRPT(14)=' ATTACHMENT                                       '
      SCRPT(15)='                                                  '
      SCRPT(16)='                                                  '
      SCRPT(17)=' ROTATION  0-2                    ELOSS=  0.00029 '
      SCRPT(18)=' ROTATION  2-0                    ELOSS= -0.00029 '
      SCRPT(19)=' ROTATION  2-4                    ELOSS=  0.00068 '
      SCRPT(20)=' ROTATION  4-2                    ELOSS= -0.00068 '
      SCRPT(21)=' ROTATION  4-6                    ELOSS=  0.00106 '
      SCRPT(22)=' ROTATION  6-4                    ELOSS= -0.00106 '
      SCRPT(23)=' ROTATION  6-8                    ELOSS=  0.00145 '
      SCRPT(24)=' ROTATION  8-6                    ELOSS= -0.00145 '
      SCRPT(25)=' ROTATION  8-10                   ELOSS=  0.00184 '
      SCRPT(26)=' ROTATION 10-8                    ELOSS= -0.00184 '
      SCRPT(27)=' ROTATION 10-12                   ELOSS=  0.00223 '
      SCRPT(28)=' ROTATION 12-10                   ELOSS= -0.00223 '
      SCRPT(29)=' ROTATION 12-14                   ELOSS=  0.00261 '
      SCRPT(30)=' ROTATION 14-12                   ELOSS= -0.00261 '
      SCRPT(31)=' ROTATION 14-16                   ELOSS=  0.00300 '
      SCRPT(32)=' ROTATION 16-14                   ELOSS= -0.00300 '
      SCRPT(33)=' ROTATION 16-18                   ELOSS=  0.00339 '
      SCRPT(34)=' ROTATION 18-16                   ELOSS= -0.00339 '
      SCRPT(35)=' ROTATION 18-20                   ELOSS=  0.00377 '
      SCRPT(36)=' ROTATION 20-18                   ELOSS= -0.00377 '
      SCRPT(37)=' ROTATION 20-22                   ELOSS=  0.00416 '
      SCRPT(38)=' ROTATION 22-20                   ELOSS= -0.00416 '
      SCRPT(39)=' ROTATION 22-24                   ELOSS=  0.00455 '
      SCRPT(40)=' ROTATION 24-22                   ELOSS= -0.00455 '
      SCRPT(41)=' ROTATION 24-26                   ELOSS=  0.00493 '
      SCRPT(42)=' ROTATION 26-24                   ELOSS= -0.00493 '
      SCRPT(43)=' ROTATION 26-28                   ELOSS=  0.00532 '
      SCRPT(44)=' ROTATION 28-26                   ELOSS= -0.00532 '
      SCRPT(45)=' ROTATION 28-30                   ELOSS=  0.00571 '
      SCRPT(46)=' ROTATION 30-28                   ELOSS= -0.00571 '
      SCRPT(47)=' ROTATION 30-32                   ELOSS=  0.00610 '
      SCRPT(48)=' ROTATION 32-30                   ELOSS= -0.00610 '
      SCRPT(49)=' ROTATION 32-34                   ELOSS=  0.00648 '
      SCRPT(50)=' ROTATION 34-32                   ELOSS= -0.00648 '
      SCRPT(51)=' ROTATION 34-36                   ELOSS=  0.00687 '
      SCRPT(52)=' ROTATION 36-34                   ELOSS= -0.00687 '
      SCRPT(53)=' ROTATION 36-38                   ELOSS=  0.00726 '
      SCRPT(54)=' ROTATION 38-36                   ELOSS= -0.00726 '
      SCRPT(55)=' ROTATION 38-40                   ELOSS=  0.00764 '
      SCRPT(56)=' ROTATION 40-38                   ELOSS= -0.00764 '
      SCRPT(57)=' ROTATION 40-42                   ELOSS=  0.00803 '
      SCRPT(58)=' ROTATION 42-40                   ELOSS= -0.00803 '
      SCRPT(59)=' ROTATION 42-44                   ELOSS=  0.00842 '
      SCRPT(60)=' ROTATION 44-42                   ELOSS= -0.00842 '
      SCRPT(61)=' ROTATION 44-46                   ELOSS=  0.00881 '
      SCRPT(62)=' ROTATION 46-44                   ELOSS= -0.00881 '
      SCRPT(63)=' ROTATION 46-48                   ELOSS=  0.00919 '
      SCRPT(64)=' ROTATION 48-46                   ELOSS= -0.00919 '
      SCRPT(65)=' ROTATION 48-50                   ELOSS=  0.00958 '
      SCRPT(66)=' ROTATION 50-48                   ELOSS= -0.00958 '
      SCRPT(67)=' ROTATION 50-52                   ELOSS=  0.00997 '
      SCRPT(68)=' ROTATION 52-50                   ELOSS= -0.00997 '
      SCRPT(69)=' ROTATION 52-54                   ELOSS=  0.01035 '
      SCRPT(70)=' ROTATION 54-52                   ELOSS= -0.01035 '
      SCRPT(71)=' ROTATION 54-56                   ELOSS=  0.01074 '
      SCRPT(72)=' ROTATION 56-54                   ELOSS= -0.01074 '
      SCRPT(73)=' ROTATION 56-58                   ELOSS=  0.01113 '
      SCRPT(74)=' ROTATION 58-56                   ELOSS= -0.01113 '
      SCRPT(75)=' ROTATION 58-60                   ELOSS=  0.01151 '
      SCRPT(76)=' ROTATION 60-58                   ELOSS= -0.01151 '
      SCRPT(77)=' VIBRATION  (010)                 ELOSS= -0.08275 '
      SCRPT(78)=' VIBRATION (010)                  ELOSS=  0.08275 '
      SCRPT(79)=' VIBRATION (020)                  ELOSS= -0.15937 '
      SCRPT(80)=' VIBRATION (020)                  ELOSS=  0.15937 '
      SCRPT(81)=' VIBRATION (100)                  ELOSS= -0.17211 '
      SCRPT(82)=' VIBRATION (100)                  ELOSS=  0.17211 '
      SCRPT(83)=' VIBRATION (030)+(110)            ELOSS= -0.251   '
      SCRPT(84)=' VIBRATION (030)+(110)            ELOSS=  0.251   '
      SCRPT(85)=' VIBRATION (001)                  ELOSS= -0.29126 '
      SCRPT(86)=' VIBRATION (001)                  ELOSS=  0.29126 '
      SCRPT(87)=' VIBRATION  POLYAD 3              ELOSS=  0.335   '
      SCRPT(88)=' VIBRATION (130)+(210)            ELOSS=  0.422   '
      SCRPT(89)=' VIBRATION  POLYAD 4              ELOSS=  0.505   '
      SCRPT(90)=' VIBRATION  POLYAD 5              ELOSS=  0.685   '
      SCRPT(91)=' VIBRATION  POLYAD 6              ELOSS=  0.825   '
      SCRPT(92)=' VIBRATION  POLYAD 7              ELOSS=  0.995   '
      SCRPT(93)=' VIBRATION  POLYAD 8              ELOSS=  1.160   '
      SCRPT(94)=' VIBRATION  POLYAD 9              ELOSS=  1.320   '
      SCRPT(95)=' VIBRATION  POLYAD HIGH SUM       ELOSS=  2.50    '
      SCRPT(96)=' 1DEL DISSOC CO + O   F=.0000698  ELOSS=  6.50    '
      SCRPT(97)=' 1DEL DISSOC CO + 0   F=.0000630  ELOSS=  6.75    '
      SCRPT(98)=' 1DEL DISSOC CO + O   F=.0000758  ELOSS=  7.00    '
      SCRPT(99)=' 1DEL DISSOC CO + O   F=.0001638  ELOSS=  7.25    '
      SCRPT(100)=' 1DEL DISSOC CO + O   F=.0003356  ELOSS=  7.50    '
      SCRPT(101)=' 1DEL DISSOC CO + 0   F=.0007378  ELOSS=  7.75    '
      SCRPT(102)=' 1DEL DISSOC CO + 0   F=.001145   ELOSS=  8.00    '
      SCRPT(103)=' 1DEL DISSOC CO + O   F=.001409   ELOSS=  8.25    '
      SCRPT(104)=' 1DEL DISSOC CO + O   F=.001481   ELOSS=  8.50    '
      SCRPT(105)=' 1DEL DISSOC CO + O   F=.000859   ELOSS=  8.75    '
      SCRPT(106)=' TRIPLET                          ELOSS=  8.89    '
      SCRPT(107)=' 1PI  DISSOC CO + O   F=.001687   ELOSS=  8.90    '
      SCRPT(108)=' 1PI  DISSOC CO + O   F=.002115   ELOSS=  9.15    '
      SCRPT(109)=' 1PI  DISSOC CO + O   F=.001920   ELOSS=  9.40    '
      SCRPT(110)=' 1PI  DISSOC CO + O   F=.001180   ELOSS=  9.65    '
      SCRPT(111)=' 1PI  DISSOC CO + 0   F=.000683   ELOSS=  9.90    '
      SCRPT(112)=' 1PI  DISSOC CO + O   F=.000456   ELOSS= 10.15    '
      SCRPT(113)=' SOME RA:AU BANDS  F=.004361   ELOSS= 10.7     '
      SCRPT(114)=' 1SIG# + 1SIG + C#    F=.1718     ELOSS= 11.048   '
      SCRPT(115)=' TRIPLETS                         ELOSS= 11.3     '
      SCRPT(116)=' 1PIu                 F=.06242    ELOSS= 11.385   '
      SCRPT(117)=' RYDBERG      DIPOLE  F=.01852    ELOSS= 11.543   '
      SCRPT(118)=' RYDBERG      DIPOLE  F=.01125    ELOSS= 11.608   '
      SCRPT(119)=' RYDBERG      DIPOLE  F=.01535    ELOSS= 11.683   '
      SCRPT(120)=' RYDBERG      DIPOLE  F=.01009    ELOSS= 11.758   '
      SCRPT(121)=' RYDBERG      DIPOLE  F=.01940    ELOSS= 11.826   '
      SCRPT(122)=' RYDBERG      DIPOLE  F=.03817    ELOSS= 11.971   '
      SCRPT(123)=' RYDBERG      DIPOLE  F=.05814    ELOSS= 12.142   '
      SCRPT(124)=' RYDBERG      DIPOLE  F=.04769    ELOSS= 12.301   '
      SCRPT(125)=' RYDBERG      DIPOLE  F=.09315    ELOSS= 12.469   '
      SCRPT(126)=' RYDBERG      DIPOLE  F=.06305    ELOSS= 12.627   '
      SCRPT(127)=' CONTINUUM    DIPOLE  F=.02477    ELOSS= 12.75    '
      SCRPT(128)=' RYDBERG      DIPOLE  F=.06231    ELOSS= 12.901   '
      SCRPT(129)=' SUM RYDBERGS DIPOLE  F=.06696    ELOSS= 13.01    '
      SCRPT(130)=' SUM RYDBERGS DIPOLE  F=.09451    ELOSS= 13.15    '
      SCRPT(131)=' SUM RYDBERGS DIPOLE  F=.04986    ELOSS= 13.28    '
      SCRPT(132)=' SUM RYDBERGS DIPOLE  F=.09029    ELOSS= 13.39    '
      SCRPT(133)=' SUM RYDBERGS DIPOLE  F=.07431    ELOSS= 13.51    '
      SCRPT(134)=' SUM RYDBERGS DIPOLE  F=.15625    ELOSS= 13.68    '
      SCRPT(135)=' NEUTRAL DISS DIPOLE  F=.08084    ELOSS= 13.78    '
      SCRPT(136)=' NEUTRAL DISS DIPOLE  F=.02662    ELOSS= 14.00    '
      SCRPT(137)=' NEUTRAL DISS DIPOLE  F=.01062    ELOSS= 14.25    '
      SCRPT(138)=' NEUTRAL DISS DIPOLE  F=.00644    ELOSS= 14.50    '
      SCRPT(139)=' NEUTRAL DISS DIPOLE  F=.00484    ELOSS= 14.75    '
      SCRPT(140)=' NEUTRAL DISS DIPOLE  F=.00880    ELOSS= 15.00    '
      SCRPT(141)=' NEUTRAL DISS DIPOLE  F=.01522    ELOSS= 15.25    '
      SCRPT(142)=' NEUTRAL DISS DIPOLE  F=.01683    ELOSS= 15.50    '
      SCRPT(143)=' NEUTRAL DISS DIPOLE  F=.02135    ELOSS= 15.75    '
      SCRPT(144)=' NEUTRAL DISS DIPOLE  F=.03232    ELOSS= 16.00    '
      SCRPT(145)=' NEUTRAL DISS DIPOLE  F=.02534    ELOSS= 16.25    '
      SCRPT(146)=' NEUTRAL DISS DIPOLE  F=.01433    ELOSS= 16.50    '
      SCRPT(147)=' NEUTRAL DISS DIPOLE  F=.00965    ELOSS= 16.75    '
      SCRPT(148)=' NEUTRAL DISS DIPOLE  F=.01481    ELOSS= 17.00    '
      SCRPT(149)=' NEUTRAL DISS DIPOLE  F=.01148    ELOSS= 17.25    '
      SCRPT(150)=' NEUTRAL DISS DIPOLE  F=.00885    ELOSS= 17.50    '
      SCRPT(151)=' NEUTRAL DISS DIPOLE  F=.00931    ELOSS= 17.75    '
      SCRPT(152)=' NEUTRAL DISS DIPOLE  F=.00666    ELOSS= 18.00    '
      SCRPT(153)=' NEUTRAL DISS DIPOLE  F=.00443    ELOSS= 18.25    '
      SCRPT(154)=' NEUTRAL DISS DIPOLE  F=.00371    ELOSS= 18.50    '
      SCRPT(155)=' NEUTRAL DISS DIPOLE  F=.00344    ELOSS= 18.75    '
      SCRPT(156)=' NEUTRAL DISS DIPOLE  F=.00357    ELOSS= 19.00    '
      SCRPT(157)=' NEUTRAL DISS DIPOLE  F=.00530    ELOSS= 19.25    '
      SCRPT(158)=' NEUTRAL DISS DIPOLE  F=.00621    ELOSS= 19.50    '
      SCRPT(159)=' NEUTRAL DISS DIPOLE  F=.00619    ELOSS= 19.75    '
      SCRPT(160)=' SUM OF HIGH TRIPLETS             ELOSS= 25.00    '
      SCRPT(161)=' BREMSSTRAHLUNG FROM CARBON ATOM                  '
      SCRPT(162)=' BREMSSTRAHLUNG FROM OXYGEN ATOMS                 '
#     EN=-ESTEP/2.0
      DO 9000 I=1,NSTEP   
      EN=EG[I]                                                   
#     EN=EN+ESTEP 
      GAMMA1=(EMASS2+2.00*EN)/EMASS2
      GAMMA2=GAMMA1*GAMMA1
      BETA=math.sqrt(1.00-1.00/GAMMA2)
      BETA2=BETA*BETA
# ELASTIC USE LOG INTERPOLATION
      if(EN <= XEN[1]:
) : 
       QMOM=YMOM[1]*1.D-16
       QELA=YEL[1]*1.D-16
       QBMOM=QMOM
       QBELA=QELA
       PQ2=0.0
       GO TO 20
      # endif                                                             
      DO 10 J=2,NEL                                                    
      if(EN <= XEN[J]:
) GO TO 15                                        
   10 CONTINUE                                                          
      J=NEL 
   15 YXJ=math.log(YMOM[J])
      YXJ1=math.log(YMOM(J-1))
      XNJ=math.log(XEN[J])   
      XNJ1=math.log(XEN(J-1))                                               
      A=(YXJ-YXJ1)/(XNJ-XNJ1)                                           
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)                                  
      QMOM=math.exp(A*math.log(EN)+B)*1.D-16
      YXJ=math.log(YEL[J])
      YXJ1=math.log(YEL(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)                                           
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)                                  
      QELA=math.exp(A*math.log(EN)+B)*1.D-16
      YXJ=math.log(YVBMOM[J])
      YXJ1=math.log(YVBMOM(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)                                           
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)                                  
      QBMOM=math.exp(A*math.log(EN)+B)*1.D-16
      YXJ=math.log(YVBEL[J])
      YXJ1=math.log(YVBEL(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)                                           
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)                                  
      QBELA=math.exp(A*math.log(EN)+B)*1.D-16
      YXJ=math.log(YEPS[J])
      YXJ1=math.log(YEPS(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)                                           
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)                                  
      PQ2=math.exp(A*math.log(EN)+B)
# EPSILON=1.0-YEPS
      PQ2=1.00-PQ2
   20 CONTINUE
# CALC CHANGE IN ELASTIC CROSS SECTION DUE TO CHANGE IN ELASTIC
# SCATTERING FROM B# end MODES ( CHANGE RELATIVE TO X-SECTION AT 293.15K)
# B# end MODE POPULATION AT 293.15K == AEXT20,GROUND STATE POP. == AGST20
#
      QMOM=(1.0-APB# end)*(QMOM-AEXT20*QBMOM)/AGST20+APB# end*QBMOM 
      QELA=(1.0-APB# end)*(QELA-AEXT20*QBELA)/AGST20+APB# end*QBELA
      PQ1=0.5+(QELA-QMOM)/QELA
#                                      
      if(NANISO == 2):
 :
       Q(2,I)=QELA
       PEQEL(2,I)=PQ2
       if(EN < 10.0):
 PEQEL(2,I)=0.0
       if(EN < 10.0):
 Q(2,I)=QMOM
      # endif
      if(NANISO == 1):
 :
       Q(2,I)=QELA
       PEQEL(2,I)=PQ1
       if(EN < 10.0):
 PEQEL(2,I)=0.5
       if(EN < 10.0):
 Q(2,I)=QMOM
      # endif
      if(NANISO == 0):
 :
       PEQEL(2,I)=0.5
       Q(2,I)=QMOM
      # endif
#
#  IONISATION CO2+
      QION(1,I)=0.0 
      PEQION(1,I)=0.5  
      if(NANISO == 2):
 PEQION(1,I)=0.0                                   
      if(EN <= EION[1]:
) GO TO 1025
      if(EN > XION1(NION1):
) GO TO 23               
      DO 21 J=2,NION1                                                  
      if(EN <= XION1[J]:
) GO TO 22                                    
   21 CONTINUE                                                          
      J=NION1                                                           
   22 A=(YION1[J]-YION1(J-1))/(XION1[J]-XION1(J-1))                
      B=(XION1(J-1)*YION1[J]-XION1[J]*YION1(J-1))/(XION1(J-1)-XION1[J])
      QION(1,I)=1.0D-16*(A*EN+B) 
      GO TO 24
# USE BORN-BETHE X-SECTION ABOVE XION1(NION1) EV
   23 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(1,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.67716
   24 if(EN <= (2.0*EION[1])) GO TO 1025
      PEQION(1,I)=PEQEL(2,(I-IOFFION[1]))
#  IONISATION CO2+(A2PIu)
 1025 QION(2,I)=0.0 
      PEQION(2,I)=0.5  
      if(NANISO == 2):
 PEQION(2,I)=0.0                                   
      if(EN <= EION(2):
) GO TO 1030
      if(EN > XION2(NION2):
) GO TO 1028             
      DO 1026 J=2,NION2                                                
      if(EN <= XION2[J]:
) GO TO 1027                                    
 1026 CONTINUE                                                          
      J=NION2                                                           
 1027 A=(YION2[J]-YION2(J-1))/(XION2[J]-XION2(J-1))                
      B=(XION2(J-1)*YION2[J]-XION2[J]*YION2(J-1))/(XION2(J-1)-XION2[J])
      QION(2,I)=1.0D-16*(A*EN+B) 
      GO TO 1029
# USE BORN-BETHE X-SECTION ABOVE XION2(NION2) EV
 1028 QION(2,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.67716*0.385
 1029 if(EN <= (2.0*EION(2))) GO TO 1030
      PEQION(2,I)=PEQEL(2,(I-IOFFION(2)))
#  IONISATION CO2+(B2SIGMA+u)
 1030 QION(3,I)=0.0 
      PEQION(3,I)=0.5  
      if(NANISO == 2):
 PEQION(3,I)=0.0                                   
      if(EN <= EION(3):
) GO TO 1035
      if(EN > XION3(NION3):
) GO TO 1033             
      DO 1031 J=2,NION3                                                
      if(EN <= XION3[J]:
) GO TO 1032                                    
 1031 CONTINUE                                                          
      J=NION3                                                           
 1032 A=(YION3[J]-YION3(J-1))/(XION3[J]-XION3(J-1))                
      B=(XION3(J-1)*YION3[J]-XION3[J]*YION3(J-1))/(XION3(J-1)-XION3[J])
      QION(3,I)=1.0D-16*(A*EN+B) 
      GO TO 1034
# USE BORN-BETHE X-SECTION ABOVE XION3(NION3) EV
 1033 QION(3,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.67716*0.220
 1034 if(EN <= (2.0*EION(3))) GO TO 1035
      PEQION(3,I)=PEQEL(2,(I-IOFFION(3)))
#  DISSOCIATIVE IONISATION O+
 1035 QION(4,I)=0.0 
      PEQION(4,I)=0.5  
      if(NANISO == 2):
 PEQION(4,I)=0.0                                   
      if(EN <= EION(4):
) GO TO 1040
      if(EN > XION4(NION4):
) GO TO 1038             
      DO 1036 J=2,NION4                                                
      if(EN <= XION4[J]:
) GO TO 1037                                    
 1036 CONTINUE                                                          
      J=NION4                                                           
 1037 A=(YION4[J]-YION4(J-1))/(XION4[J]-XION4(J-1))                
      B=(XION4(J-1)*YION4[J]-XION4[J]*YION4(J-1))/(XION4(J-1)-XION4[J])
      QION(4,I)=1.0D-16*(A*EN+B) 
      GO TO 1039
# USE BORN-BETHE X-SECTION ABOVE XION4(NION4) EV
 1038 QION(4,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.16156
 1039 if(EN <= (2.0*EION(4))) GO TO 1040
      PEQION(4,I)=PEQEL(2,(I-IOFFION(4)))
#  DISSOCIATIVE IONISATION CO+
 1040 QION(5,I)=0.0 
      PEQION(5,I)=0.5  
      if(NANISO == 2):
 PEQION(5,I)=0.0                                   
      if(EN <= EION(5):
) GO TO 1045
      if(EN > XION5(NION5):
) GO TO 1043             
      DO 1041 J=2,NION5                                                
      if(EN <= XION5[J]:
) GO TO 1042                                    
 1041 CONTINUE                                                          
      J=NION5                                                           
 1042 A=(YION5[J]-YION5(J-1))/(XION5[J]-XION5(J-1))                
      B=(XION5(J-1)*YION5[J]-XION5[J]*YION5(J-1))/(XION5(J-1)-XION5[J])
      QION(5,I)=1.0D-16*(A*EN+B) 
      GO TO 1044
# USE BORN-BETHE X-SECTION ABOVE XION5(NION5) EV
 1043 QION(5,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.07962
 1044 if(EN <= (2.0*EION(5))) GO TO 1045
      PEQION(5,I)=PEQEL(2,(I-IOFFION(5)))
#  DISSOCIATIVE IONISATION C+ 
 1045 QION(6,I)=0.0 
      PEQION(6,I)=0.5  
      if(NANISO == 2):
 PEQION(6,I)=0.0                                   
      if(EN <= EION(6):
) GO TO 1050
      if(EN > XION6(NION6):
) GO TO 1048             
      DO 1046 J=2,NION6                                                
      if(EN <= XION6[J]:
) GO TO 1047                                    
 1046 CONTINUE                                                          
      J=NION6                                                           
 1047 A=(YION6[J]-YION6(J-1))/(XION6[J]-XION6(J-1))                
      B=(XION6(J-1)*YION6[J]-XION6[J]*YION6(J-1))/(XION6(J-1)-XION6[J])
      QION(6,I)=1.0D-16*(A*EN+B) 
      GO TO 1049
# USE BORN-BETHE X-SECTION ABOVE XION6(NION6) EV
 1048 QION(6,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.07452
 1049 if(EN <= (2.0*EION(6))) GO TO 1050
      PEQION(6,I)=PEQEL(2,(I-IOFFION(6)))
#   IONISATION CO2++ 
 1050 QION(7,I)=0.0 
      PEQION(7,I)=0.5  
      if(NANISO == 2):
 PEQION(7,I)=0.0                                   
      if(EN <= EION(7):
) GO TO 1055
      if(EN > XION7(NION7):
) GO TO 1053             
      DO 1051 J=2,NION7                                                
      if(EN <= XION7[J]:
) GO TO 1052                                    
 1051 CONTINUE                                                          
      J=NION7                                                           
 1052 A=(YION7[J]-YION7(J-1))/(XION7[J]-XION7(J-1))                
      B=(XION7(J-1)*YION7[J]-XION7[J]*YION7(J-1))/(XION7(J-1)-XION7[J])
      QION(7,I)=1.0D-16*(A*EN+B) 
      GO TO 1054
# USE BORN-BETHE X-SECTION ABOVE XION7(NION7) EV
 1053 QION(7,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.00559
 1054 if(EN <= (2.0*EION(7))) GO TO 1055
      PEQION(7,I)=PEQEL(2,(I-IOFFION(7)))
#   DISSOCIATIVE IONISATION C++ 
 1055 QION(8,I)=0.0 
      PEQION(8,I)=0.5  
      if(NANISO == 2):
 PEQION(8,I)=0.0                                   
      if(EN <= EION(8):
) GO TO 1060
      if(EN > XION8(NION8):
) GO TO 1058             
      DO 1056 J=2,NION8                                                
      if(EN <= XION8[J]:
) GO TO 1057                                    
 1056 CONTINUE                                                          
      J=NION8                                                           
 1057 A=(YION8[J]-YION8(J-1))/(XION8[J]-XION8(J-1))                
      B=(XION8(J-1)*YION8[J]-XION8[J]*YION8(J-1))/(XION8(J-1)-XION8[J])
      QION(8,I)=1.0D-16*(A*EN+B) 
      GO TO 1059
# USE BORN-BETHE X-SECTION ABOVE XION8(NION8) EV
 1058 QION(8,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.00076
 1059 if(EN <= (2.0*EION(8))) GO TO 1060
      PEQION(8,I)=PEQEL(2,(I-IOFFION(8)))
#   DISSOCIATIVE IONISATION O++ 
 1060 QION(9,I)=0.0 
      PEQION(9,I)=0.5  
      if(NANISO == 2):
 PEQION(9,I)=0.0                                   
      if(EN <= EION(9):
) GO TO 25
      if(EN > XION9(NION9):
) GO TO 1063             
      DO 1061 J=2,NION9                                                
      if(EN <= XION9[J]:
) GO TO 1062                                    
 1061 CONTINUE                                                          
      J=NION9                                                           
 1062 A=(YION9[J]-YION9(J-1))/(XION9[J]-XION9(J-1))                
      B=(XION9(J-1)*YION9[J]-XION9[J]*YION9(J-1))/(XION9(J-1)-XION9[J])
      QION(9,I)=1.0D-16*(A*EN+B) 
      GO TO 1064
# USE BORN-BETHE X-SECTION ABOVE XION9(NION9) EV
 1063 QION(9,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.00080
 1064 if(EN <= (2.0*EION(9))) GO TO 25
      PEQION(9,I)=PEQEL(2,(I-IOFFION(9)))
# CARBON K-SHELL IONISATION
   25 QION(10,I)=0.0 
      PEQION(10,I)=0.5  
      if(NANISO == 2):
 PEQION(10,I)=0.0                                  
      if(EN <= EION(10):
) GO TO 28
      DO 26 J=2,NKSHC                                                  
      if(EN <= XKSHC[J]:
) GO TO 27                                    
   26 CONTINUE                                                          
      J=NKSHC                                                           
   27 A=(YKSHC[J]-YKSHC(J-1))/(XKSHC[J]-XKSHC(J-1))                    
      B=(XKSHC(J-1)*YKSHC[J]-XKSHC[J]*YKSHC(J-1))/(XKSHC(J-1)-XKSHC[J])
      QION(10,I)=1.0D-16*(A*EN+B) 
      if(EN <= (2.0*EION(10):
)) GO TO 28
      PEQION(10,I)=PEQEL(2,(I-IOFFION(10)))
# OXYGEN K-SHELL IONISATION
   28 QION(11,I)=0.0 
      PEQION(11,I)=0.5  
      if(NANISO == 2):
 PEQION(11,I)=0.0                                  
      if(EN <= EION(11):
) GO TO 301
      DO 29 J=2,NKSHO                                                  
      if(EN <= XKSHO[J]:
) GO TO 30                                    
   29 CONTINUE                                                          
      J=NKSHO                                                           
   30 A=(YKSHO[J]-YKSHO(J-1))/(XKSHO[J]-XKSHO(J-1))                    
      B=(XKSHO(J-1)*YKSHO[J]-XKSHO[J]*YKSHO(J-1))/(XKSHO(J-1)-XKSHO[J])
# SCALING FACTOR 2 FOR NUMBER OF OXYGENS PER MOLECULE
      QION(11,I)=2.0D-16*(A*EN+B) 
      if(EN <= (2.0*EION(11):
)) GO TO 301
      PEQION(11,I)=PEQEL(2,(I-IOFFION(11)))
#
# FIX CO2+ X-SECTION FOR SPLIT INTO CO2+ EXCITED STATES
  301 QION(1,I)=QION(1,I)-QION(2,I)-QION(3,I)
# ATTACHMENT                                                            
      Q(4,I)=0.0                                                        
      if(EN <= XATT[1]:
) GO TO 40
      if(EN > XATT(NATT1):
) GO TO 33                                 
      DO 31  J=2,NATT1                                                  
      if(EN <= XATT[J]:
) GO TO 32                                        
   31 CONTINUE                                                          
      J=NATT1                                                          
   32 A=(YATT[J]-YATT(J-1))/(XATT[J]-XATT(J-1))                         
      B=(XATT(J-1)*YATT[J]-XATT[J]*YATT(J-1))/(XATT(J-1)-XATT[J])       
      Q(4,I)=1.0D-16*(A*EN+B)
      GO TO 40
   33 Q(4,I)=YATT(NATT1)*(XATT(NATT1)/EN)**3*1.D-16
#
   40 Q(5,I)=0.0                                                     
      Q(6,I)=0.0   
# ----------------------------------------------------------------------
#  QUADRUPOLE BORN ROTATIONAL STATES (GERJUOY AND STEIN)
# ----------------------------------------------------------------------
# SUPERELASTIC ROTATION
      DO 51 K=2,60,2
      AJ=float[K]
      L=(K/2)+1
      PEQIN(K,I)=0.5
      if(NANISO == 2):
 PEQIN(K,I)=0.0
      if(EN < (4.0*abs(EIN[K]:
))) GO TO 50
      if(NANISO > 0):
 PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
   50 CONTINUE
   51 QIN(K,I)=PJ(L)*QBK*math.sqrt(1.0-EIN[K]/EN)*AJ*(AJ-1.0)/((2.0*AJ+1.0)*(2.0*AJ-1.0))
# ROTATION                 
      DO 52 K=1,59,2
      QIN(K,I)=0.0
      PEQIN(K,I)=0.5
      if(NANISO == 2):
 PEQIN(K,I)=0.0
      if(EN <= EIN[K]:
) GO TO 52
      AJ=float[K-1]
      L=(K+1)/2
      QIN(K,I)=PJ(L)*QBK*math.sqrt(1.0-EIN[K]/EN)*(AJ+2.0)*(AJ+1.0)/((2.0*AJ+3.0)*(2.0*AJ+1.0))
      if(EN < (4.0*abs(EIN[K]:
))) GO TO 52
      if(NANISO > 0):
 PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
   52 CONTINUE
# BORN (1/E) FALL OFF IN ROTATONAL X-SEC ABOVE 6.0 EV .
      if(EN < 6.0):
 GO TO 80
      DO 70 K=1,60
      QIN(K,I)=QIN(K,I)*6.0/EN
   70 CONTINUE
   80 CONTINUE   
#                                                                        
#  SUPERELASTIC V2  B# end MODE                                            
      QIN(61,I)=0.0 
      PEQIN(61,I)=0.50
      if(NANISO == 2):
 PEQIN(61,I)=0.00
      if(EN <= 0.0):
 GO TO 150
      EFAC=math.sqrt(1.0-(EIN(61)/EN))
      QIN(61,I)=AMPV2*math.log((EFAC+1.0)/(EFAC-1.0))/EN 
      if((EN+EIN(62):
) > XV2(NV2)) GO TO 125                   
      DO 110 J=2,NV2                                                    
      if((EN+EIN(62):
) <= XV2[J]) GOTO 120                               
  110 CONTINUE                                                          
      J=NV2                                                             
  120 A=(YV2[J]-YV2(J-1))/(XV2[J]-XV2(J-1))                     
      B=(XV2(J-1)*YV2[J]-XV2[J]*YV2(J-1))/(XV2(J-1)-XV2[J]) 
      QIN(61,I)=QIN(61,I)+(EN+EIN(62))*(A*(EN+EIN(62))+B)/EN
      GO TO 126
  125 QIN(61,I)=QIN(61,I)+YV2(NV2)*XV2(NV2)*(EN+EIN(62))/(EN*EN)
  126 QIN(61,I)=QIN(61,I)*APOPV2/DEGV2*1.D-16
      if(EN < (3.0*abs(EIN(61):
))) GO TO 150
      if(NANISO > 0):
 PEQIN(61,I)=PEQEL(2,(I-IOFFN(61)))
# V2  B# end MODE                                                             
  150 QIN(62,I)=0.0                        
      PEQIN(62,I)=0.50
      if(NANISO == 2):
 PEQIN(62,I)=0.00
      if(EN <= EIN(62):
) GO TO 200 
      EFAC=math.sqrt(1.0-(EIN(62)/EN))
      QIN(62,I)=AMPV2*math.log((1.0+EFAC)/(1.0-EFAC))/EN
      if(EN > XV2(NV2):
) GO TO 175                    
      DO 160 J=2,NV2                                                    
      if(EN <= XV2[J]:
) GO TO 170                                      
  160 CONTINUE                                                          
      J=NV2                                                             
  170 A=(YV2[J]-YV2(J-1))/(XV2[J]-XV2(J-1))                     
      B=(XV2(J-1)*YV2[J]-XV2[J]*YV2(J-1))/(XV2(J-1)-XV2[J]) 
      QIN(62,I)=QIN(62,I)+(A*EN+B)
      GO TO 176
  175 QIN(62,I)=QIN(62,I)+YV2(NV2)*XV2(NV2)/EN
  176 QIN(62,I)=QIN(62,I)*APOPGS*1.D-16
      if(EN < (3.0*EIN(62):
)) GO TO 200
      if(NANISO > 0):
 PEQIN(62,I)=PEQEL(2,(I-IOFFN(62)))
#     
#  SUPERELASTIC 2V2 B# end MODE HARMONIC                                               
  200 CONTINUE                                                          
      QIN(63,I)=0.0  
      PEQIN(63,I)=0.50
      if(NANISO == 2):
 PEQIN(63,I)=0.00
      if(EN <= 0.0):
 GO TO 250                 
      if((EN+EIN(64):
) > X2V2(N2V2)) GO TO 225                       
      DO 210 J=2,N2V2                                                   
      if((EN+EIN(64):
) <= X2V2[J]) GOTO 220                              
  210 CONTINUE                                                          
      J=N2V2                                                            
  220 A=(Y2V2[J]-Y2V2(J-1))/(X2V2[J]-X2V2(J-1))                     
      B=(X2V2(J-1)*Y2V2[J]-X2V2[J]*Y2V2(J-1))/(X2V2(J-1)-X2V2[J]) 
      QIN(63,I)=(EN+EIN(64))*(A*(EN+EIN(64))+B)/EN
      GO TO 226
  225 QIN(63,I)=Y2V2(N2V2)*X2V2(N2V2)*(EN+EIN(64))/(EN*EN)
  226 QIN(63,I)=QIN(63,I)*APOP2V2/DEG2V2*1.D-16      
      if(EN < (3.0*abs(EIN(63):
))) GO TO 250
      if(NANISO > 0):
 PEQIN(63,I)=PEQEL(2,(I-IOFFN(63)))          
#  2V2 B# end MODE HARMONIC                                               
  250 CONTINUE                                                          
      QIN(64,I)=0.0  
      PEQIN(64,I)=0.50
      if(NANISO == 2):
 PEQIN(64,I)=0.00
      if(EN <= EIN(64):
) GO TO 300       
      if(EN > X2V2(N2V2):
) GO TO 275                                
      DO 260 J=2,N2V2                                                   
      if(EN <= X2V2[J]:
) GOTO 270                                       
  260 CONTINUE                                                          
      J=N2V2                                                            
  270 A=(Y2V2[J]-Y2V2(J-1))/(X2V2[J]-X2V2(J-1))                     
      B=(X2V2(J-1)*Y2V2[J]-X2V2[J]*Y2V2(J-1))/(X2V2(J-1)-X2V2[J]) 
      QIN(64,I)=(A*EN+B)
      GO TO 276
  275 QIN(64,I)=Y2V2(N2V2)*X2V2(N2V2)/EN  
  276 QIN(64,I)=QIN(64,I)*APOPGS*1.D-16  
      if(EN < (3.0*EIN(64):
)) GO TO 300
      if(NANISO > 0):
 PEQIN(64,I)=PEQEL(2,(I-IOFFN(64)))                
#  
# SUPERELASTIC V1 SYMMETRIC STRETCH                                
  300 CONTINUE                                                          
      QIN(65,I)=0.0  
      PEQIN(65,I)=0.50
      if(NANISO == 2):
 PEQIN(65,I)=0.00
      if(EN <= 0.0):
 GO TO 350   
      if((EN+EIN(66):
) > XV1(NV1)) GO TO 325                           
      DO 310 J=2,NV1                                                    
      if((EN+EIN(66):
) <= XV1[J]) GOTO 320                               
  310 CONTINUE                                                          
      J=NV1                                                             
  320 A=(YV1[J]-YV1(J-1))/(XV1[J]-XV1(J-1))                     
      B=(XV1(J-1)*YV1[J]-XV1[J]*YV1(J-1))/(XV1(J-1)-XV1[J]) 
      QIN(65,I)=(EN+EIN(66))*(A*(EN+EIN(66))+B)/EN
      GO TO 326
  325 QIN(65,I)=YV1(NV1)*XV1(NV1)*(EN+EIN(66))/(EN*EN)
  326 QIN(65,I)=QIN(65,I)*APOPV1/DEGV1*1.D-16   
      if(EN < (3.0*abs(EIN(65):
))) GO TO 350
      if(NANISO > 0):
 PEQIN(65,I)=PEQEL(2,(I-IOFFN(65)))               
# V1 SYMMETRIC STRETCH                                                 
  350 CONTINUE                                                          
      QIN(66,I)=0.0  
      PEQIN(66,I)=0.50
      if(NANISO == 2):
 PEQIN(66,I)=0.00
      if(EN <= EIN(66):
) GO TO 400              
      if(EN > XV1(NV1):
) GO TO 375                         
      DO 360 J=2,NV1                                                    
      if(EN <= XV1[J]:
) GOTO 370                                       
  360 CONTINUE                                                          
      J=NV1                                                             
  370 A=(YV1[J]-YV1(J-1))/(XV1[J]-XV1(J-1))                     
      B=(XV1(J-1)*YV1[J]-XV1[J]*YV1(J-1))/(XV1(J-1)-XV1[J]) 
      QIN(66,I)=(A*EN+B)
      GO TO 376 
  375 QIN(66,I)=YV1(NV1)*XV1(NV1)/EN
  376 QIN(66,I)=QIN(66,I)*APOPGS*1.D-16
      if(EN < (3.0*EIN(66):
)) GO TO 400
      if(NANISO > 0):
 PEQIN(66,I)=PEQEL(2,(I-IOFFN(66)))             
#  
# SUPERELASTIC 3V2 + V12                                                
  400 CONTINUE                                                          
      QIN(67,I)=0.0  
      PEQIN(67,I)=0.50
      if(NANISO == 2):
 PEQIN(67,I)=0.00
      if(EN <= 0.0):
 GO TO 450 
      if((EN+EIN(68):
) > X3V2(N3V2)) GO TO 425                         
      DO 410 J=2,N3V2                                                   
      if((EN+EIN(68):
) <= X3V2[J]) GOTO 420                              
  410 CONTINUE                                                          
      J=N3V2                                                            
  420 A=(Y3V2[J]-Y3V2(J-1))/(X3V2[J]-X3V2(J-1))                     
      B=(X3V2(J-1)*Y3V2[J]-X3V2[J]*Y3V2(J-1))/(X3V2(J-1)-X3V2[J])
      QIN(67,I)=(EN+EIN(68))*(A*(EN+EIN(68))+B)/EN
      GO TO 426
  425 QIN(67,I)=Y3V2(N3V2)*X3V2(N3V2)*(EN+EIN(68))/(EN*EN) 
  426 QIN(67,I)=QIN(67,I)*APOP3V2/DEG3V2*1.D-16  
      if(EN < (3.0*abs(EIN(68):
))) GO TO 450
      if(NANISO > 0):
 PEQIN(67,I)=PEQEL(2,(I-IOFFN(67)))                
# 3V2 + V12                                                             
  450 CONTINUE                                                          
      QIN(68,I)=0.0  
      PEQIN(68,I)=0.50
      if(NANISO == 2):
 PEQIN(68,I)=0.00
      if(EN <= EIN(68):
) GO TO 500
      if(EN > X3V2(N3V2):
) GO TO 475                              
      DO 460 J=2,N3V2                                                   
      if(EN <= X3V2[J]:
) GOTO 470                                       
  460 CONTINUE                                                          
      J=N3V2                                                            
  470 A=(Y3V2[J]-Y3V2(J-1))/(X3V2[J]-X3V2(J-1))                     
      B=(X3V2(J-1)*Y3V2[J]-X3V2[J]*Y3V2(J-1))/(X3V2(J-1)-X3V2[J]) 
      QIN(68,I)=(A*EN+B)  
      GO TO 476
  475 QIN(68,I)=Y3V2(N3V2)*X3V2(N3V2)/EN
  476 QIN(68,I)=QIN(68,I)*APOPGS*1.D-16
      if(EN < (3.0*EIN(68):
)) GO TO 500
      if(NANISO > 0):
 PEQIN(68,I)=PEQEL(2,(I-IOFFN(68)))               
#
#  SUPERELASTIC V3 ASYMMETRIC STRETCH                                                     
  500 QIN(69,I)=0.0  
      PEQIN(69,I)=0.50
      if(NANISO == 2):
 PEQIN(69,I)=0.00
      if(EN <= 0.0):
 GO TO 550
      EFAC=math.sqrt(1.0-(EIN(69)/EN))
      QIN(69,I)=AMPV3*math.log((EFAC+1.0)/(EFAC-1.0))/EN    
      if((EN+EIN(70):
) > XV3(NV3)) GO TO 525                
      DO 510 J=2,NV3                                                    
      if((EN+EIN(70):
) <= XV3[J]) GOTO 520                               
  510 CONTINUE                                                          
      J=NV3                                                             
  520 A=(YV3[J]-YV3(J-1))/(XV3[J]-XV3(J-1))                     
      B=(XV3(J-1)*YV3[J]-XV3[J]*YV3(J-1))/(XV3(J-1)-XV3[J]) 
      QIN(69,I)=QIN(69,I)+(EN+EIN(70))*(A*(EN+EIN(70))+B)/EN
      GO TO 526
  525 QIN(69,I)=QIN(69,I)+YV3(NV3)*XV3(NV3)*(EN+EIN(70))/(EN*EN)
  526 QIN(69,I)=QIN(69,I)*APOPV3/DEGV3*1.D-16
      if(EN < (3.0*abs(EIN(69):
)))  GO TO 550
      if(NANISO > 0):
 PEQIN(69,I)=PEQEL(2,(I-IOFFN(69)))
# V3  ASYMMETRIC STRETCH                                                    
  550 QIN(70,I)=0.0  
      PEQIN(70,I)=0.50
      if(NANISO == 2):
 PEQIN(70,I)=0.00
      if(EN <= EIN(70):
) GO TO 600 
      EFAC=math.sqrt(1.0-(EIN(70)/EN))
      QIN(70,I)=AMPV3*math.log((1.0+EFAC)/(1.0-EFAC))/EN  
      if(EN > XV3(NV3):
) GO TO 575                  
      DO 560 J=2,NV3                                                    
      if(EN <= XV3[J]:
) GO TO 570                                      
  560 CONTINUE                                                          
      J=NV3                                                             
  570 A=(YV3[J]-YV3(J-1))/(XV3[J]-XV3(J-1))                     
      B=(XV3(J-1)*YV3[J]-XV3[J]*YV3(J-1))/(XV3(J-1)-XV3[J]) 
      QIN(70,I)=QIN(70,I)+(A*EN+B)
      GO TO 576
  575 QIN(70,I)=QIN(70,I)+YV3(NV3)*XV3(NV3)/EN
  576 QIN(70,I)=QIN(70,I)*APOPGS*1.D-16
      if(EN < (3.0*EIN(70):
)) GO TO 600
      if(NANISO > 0):
 PEQIN(70,I)=PEQEL(2,(I-IOFFN(70)))
#     
#  4V2 + 2V1 + V12V2  POLYAD 3                                                 
  600 CONTINUE                                                          
      QIN(71,I)=0.0  
      PEQIN(71,I)=0.50
      if(NANISO == 2):
 PEQIN(71,I)=0.00
      if(EN <= EIN(71):
) GO TO 650 
      if(EN > XVPD3(NPD3):
) GO TO 625                                  
      DO 610 J=2,NPD3                                                   
      if(EN <= XVPD3[J]:
) GOTO 620                                       
  610 CONTINUE                                                          
      J=NPD3                                                           
  620 A=(YVPD3[J]-YVPD3(J-1))/(XVPD3[J]-XVPD3(J-1))                     
      B=(XVPD3(J-1)*YVPD3[J]-XVPD3[J]*YVPD3(J-1))/(XVPD3(J-1)-XVPD3[J]) 
      QIN(71,I)=(A*EN+B)*1.D-16             
      GO TO 626
  625 QIN(71,I)=YVPD3(NPD3)*XVPD3(NPD3)/EN*1.D-16       
  626 if(EN < (3.0*EIN(71))) GO TO 650
      if(NANISO > 0):
 PEQIN(71,I)=PEQEL(2,(I-IOFFN(71)))
#                                      
#       3V2V1  + 2V1V2                                                   
  650 CONTINUE                                                          
      QIN(72,I)=0.0  
      PEQIN(72,I)=0.50
      if(NANISO == 2):
 PEQIN(72,I)=0.00
      if(EN <= EIN(72):
) GO TO 700                         
      if(EN > XV130(NV130):
) GO TO 675              
      DO 660 J=2,NV130                                                  
      if(EN <= XV130[J]:
) GOTO 670                                       
  660 CONTINUE                                                          
      J=NV130                                                           
  670 A=(YV130[J]-YV130(J-1))/(XV130[J]-XV130(J-1))                     
      B=(XV130(J-1)*YV130[J]-XV130[J]*YV130(J-1))/(XV130(J-1)-XV130[J]) 
      QIN(72,I)=(A*EN+B)*1.D-16       
      GO TO 676
  675 QIN(72,I)=YV130(NV130)*XV130(NV130)/EN*1.D-16   
  676 if(EN < (3.0*EIN(72))) GO TO 700
      if(NANISO > 0):
 PEQIN(72,I)=PEQEL(2,(I-IOFFN(72)))
#                                      
#   POLYAD 4                                                                    
  700 CONTINUE                                                          
      QIN(73,I)=0.0  
      PEQIN(73,I)=0.50
      if(NANISO == 2):
 PEQIN(73,I)=0.00
      if(EN <= EIN(73):
) GO TO 750                   
      if(EN > XVPD4(NPD4):
) GO TO 725                    
      DO 710 J=2,NPD4                                                   
      if(EN <= XVPD4[J]:
) GOTO 720                                       
  710 CONTINUE                                                          
      J=NPD4                                                            
  720 A=(YVPD4[J]-YVPD4(J-1))/(XVPD4[J]-XVPD4(J-1))                     
      B=(XVPD4(J-1)*YVPD4[J]-XVPD4[J]*YVPD4(J-1))/(XVPD4(J-1)-XVPD4[J]) 
      QIN(73,I)=(A*EN+B)*1.D-16      
      GO TO 726
  725 QIN(73,I)=YVPD4(NPD4)*XVPD4(NPD4)/EN*1.D-16     
  726 if(EN < (3.0*EIN(73))) GO TO 750
      if(NANISO > 0):
 PEQIN(73,I)=PEQEL(2,(I-IOFFN(73)))
#
#  PLOYAD 5     
  750 CONTINUE                                                          
      QIN(74,I)=0.0  
      PEQIN(74,I)=0.50
      if(NANISO == 2):
 PEQIN(74,I)=0.00
      if(EN <= EIN(74):
) GO TO 800
      if(EN > XVPD5(NPD5):
) GO TO 775                          
      DO 760 J=2,NPD5                                                   
      if(EN <= XVPD5[J]:
) GOTO 770                                       
  760 CONTINUE                                                          
      J=NPD5                                                            
  770 A=(YVPD5[J]-YVPD5(J-1))/(XVPD5[J]-XVPD5(J-1))                     
      B=(XVPD5(J-1)*YVPD5[J]-XVPD5[J]*YVPD5(J-1))/(XVPD5(J-1)-XVPD5[J]) 
      QIN(74,I)=(A*EN+B)*1.D-16  
      GO TO 799
  775 QIN(74,I)=YVPD5(NPD5)*XVPD5(NPD5)/EN*1.D-16
  799 if(EN < (3.0*EIN(74))) GO TO 800
      if(NANISO > 0):
 PEQIN(74,I)=PEQEL(2,(I-IOFFN(74)))
#                                              
#   POLYAD 6                                                                    
  800 CONTINUE                                                          
      QIN(75,I)=0.0  
      PEQIN(75,I)=0.50
      if(NANISO == 2):
 PEQIN(75,I)=0.00
      if(EN <= EIN(75):
) GO TO 850                
      if(EN > XVPD6(NPD6):
) GO TO 825                       
      DO 810 J=2,NPD6                                                   
      if(EN <= XVPD6[J]:
) GOTO 820                                       
  810 CONTINUE                                                          
      J=NPD6                                                            
  820 A=(YVPD6[J]-YVPD6(J-1))/(XVPD6[J]-XVPD6(J-1))                     
      B=(XVPD6(J-1)*YVPD6[J]-XVPD6[J]*YVPD6(J-1))/(XVPD6(J-1)-XVPD6[J]) 
      QIN(75,I)=(A*EN+B)*1.D-16 
      GO TO 826
  825 QIN(75,I)=YVPD6(NPD6)*XVPD6(NPD6)/EN*1.D-16
  826 if(EN < (3.0*EIN(75)))  GO TO 850
      if(NANISO > 0):
 PEQIN(75,I)=PEQEL(2,(I-IOFFN(75)))
#                                             
#   POLYAD 7                                                                    
  850 CONTINUE                                                          
      QIN(76,I)=0.0  
      PEQIN(76,I)=0.50
      if(NANISO == 2):
 PEQIN(76,I)=0.00
      if(EN <= EIN(76):
) GO TO 900                
      if(EN > XVPD7(NPD7):
) GO TO 875                       
      DO 860 J=2,NPD7                                                   
      if(EN <= XVPD7[J]:
) GOTO 870                                       
  860 CONTINUE                                                          
      J=NPD7                                                            
  870 A=(YVPD7[J]-YVPD7(J-1))/(XVPD7[J]-XVPD7(J-1))                     
      B=(XVPD7(J-1)*YVPD7[J]-XVPD7[J]*YVPD7(J-1))/(XVPD7(J-1)-XVPD7[J]) 
      QIN(76,I)=(A*EN+B)*1.D-16 
      GO TO 876
  875 QIN(76,I)=YVPD7(NPD7)*XVPD7(NPD7)/EN*1.D-16
  876 if(EN < (3.0*EIN(76))) GO TO 900
      if(NANISO > 0):
 PEQIN(76,I)=PEQEL(2,(I-IOFFN(76)))
#                                              
#   POLYAD 8                                                                    
  900 CONTINUE                                                          
      QIN(77,I)=0.0  
      PEQIN(77,I)=0.50
      if(NANISO == 2):
 PEQIN(77,I)=0.00
      if(EN <= EIN(77):
) GO TO 950                
      if(EN > XVPD8(NPD8):
) GO TO 925                       
      DO 910 J=2,NPD8                                                   
      if(EN <= XVPD8[J]:
) GOTO 920                                       
  910 CONTINUE                                                          
      J=NPD8                                                            
  920 A=(YVPD8[J]-YVPD8(J-1))/(XVPD8[J]-XVPD8(J-1))                     
      B=(XVPD8(J-1)*YVPD8[J]-XVPD8[J]*YVPD8(J-1))/(XVPD8(J-1)-XVPD8[J]) 
      QIN(77,I)=(A*EN+B)*1.D-16
      GO TO 926
  925 QIN(77,I)=YVPD8(NPD8)*XVPD8(NPD8)/EN*1.D-16
  926 if(EN < (3.0*EIN(77)))  GO TO 950
      if(NANISO > 0):
 PEQIN(77,I)=PEQEL(2,(I-IOFFN(77)))
#                                               
#   POLYAD 9                                                                    
  950 CONTINUE                                                          
      QIN(78,I)=0.0  
      PEQIN(78,I)=0.50
      if(NANISO == 2):
 PEQIN(78,I)=0.00
      if(EN <= EIN(78):
) GO TO 1000               
      if(EN > XVPD9(NPD9):
) GO TO 975                       
      DO 960 J=2,NPD9                                                   
      if(EN <= XVPD9[J]:
) GOTO 970                                       
  960 CONTINUE                                                          
      J=NPD9                                                            
  970 A=(YVPD9[J]-YVPD9(J-1))/(XVPD9[J]-XVPD9(J-1))                     
      B=(XVPD9(J-1)*YVPD9[J]-XVPD9[J]*YVPD9(J-1))/(XVPD9(J-1)-XVPD9[J]) 
      QIN(78,I)=(A*EN+B)*1.D-16     
      GO TO 976 
  975 QIN(78,I)=YVPD9(NPD9)*XVPD9(NPD9)/EN*1.D-16
  976 if(EN < (3.0*EIN(78))) GO TO 1000
      if(NANISO > 0):
 PEQIN(78,I)=PEQEL(2,(I-IOFFN(78)))
#                                          
#   SUM OF HIGHER POLYADS                                                       
 1000 CONTINUE                                                          
      QIN(79,I)=0.0   
      PEQIN(79,I)=0.50
      if(NANISO == 2):
 PEQIN(79,I)=0.00
      if(EN <= EIN(79):
) GO TO 1080               
      if(EN > XVPDH(NPDH):
) GO TO 1005                       
      DO 1001 J=2,NPDH                                                  
      if(EN <= XVPDH[J]:
) GOTO 1002                                      
 1001 CONTINUE                                                          
      J=NPDH                                                            
 1002 A=(YVPDH[J]-YVPDH(J-1))/(XVPDH[J]-XVPDH(J-1))                     
      B=(XVPDH(J-1)*YVPDH[J]-XVPDH[J]*YVPDH(J-1))/(XVPDH(J-1)-XVPDH[J]) 
      QIN(79,I)=(A*EN+B)*1.D-16       
      GO TO 1006
 1005 QIN(79,I)=YVPDH(NPDH)*XVPDH(NPDH)/EN*1.D-16   
 1006 if(EN < (3.0*EIN(79))) GO TO 1080
      if(NANISO > 0):
 PEQIN(79,I)=PEQEL(2,(I-IOFFN(79)))
#  1DELu  6.50ev                      
 1080 CONTINUE                                                          
      QIN(80,I)=0.0  
      PEQIN(80,I)=0.5
      if(NANISO == 2):
 PEQIN(80,I)=0.0  
      if(EN <= EIN(80):
) GO TO 1081 
      QIN(80,I)=.0000698/(EIN(80)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(80)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(80)+E(3))*1.0192
      if(QIN(80,I):
 < 0.0) QIN(80,I)=0.0
      if(EN <= (2.0*EIN(80):
)) GO TO 1081  
      if(NANISO > 0):
 PEQIN(80,I)=PEQEL(2,(I-IOFFN(80)))               
# 1DELu 6.75 ev                                                        
 1081 CONTINUE                                                          
      QIN(81,I)=0.0   
      PEQIN(81,I)=0.5  
      if(NANISO == 2):
 PEQIN(81,I)=0.0                                  
      if(EN <= EIN(81):
) GO TO 1082                            
      QIN(81,I)=.0000630/(EIN(81)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(81)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(81)+E(3))*1.0185
      if(QIN(81,I):
 < 0.0) QIN(81,I)=0.0
      if(EN <= (2.0*EIN(81):
)) GO TO 1082
      if(NANISO > 0):
 PEQIN(81,I)=PEQEL(2,(I-IOFFN(81)))           
#   1DELu  7.00ev                                            
 1082 CONTINUE                                                          
      QIN(82,I)=0.0
      PEQIN(82,I)=0.5 
      if(NANISO == 2):
 PEQIN(82,I)=0.0                                 
      if(EN <= EIN(82):
) GO TO 1083
      QIN(82,I)=.0000758/(EIN(82)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(82)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(82)+E(3))*1.0179
      if(QIN(82,I):
 < 0.0) QIN(82,I)=0.0
      if(EN <= (2.0*EIN(82):
)) GO TO 1083
      if(NANISO > 0):
 PEQIN(82,I)=PEQEL(2,(I-IOFFN(82))) 
#   1DELu 7.25ev
 1083 CONTINUE                                                          
      QIN(83,I)=0.0
      PEQIN(83,I)=0.5
      if(NANISO == 2):
 PEQIN(83,I)=0.0                                  
      if(EN <= EIN(83):
) GO TO 1084
      QIN(83,I)=.0001638/(EIN(83)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(83)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(83)+E(3))*1.0172
      if(QIN(83,I):
 < 0.0) QIN(83,I)=0.0
      if(EN <= (2.0*EIN(83):
)) GO TO 1084
      if(NANISO > 0):
 PEQIN(83,I)=PEQEL(2,(I-IOFFN(83)))       
# 1DELu  7.5ev   
 1084 CONTINUE                                                          
      QIN(84,I)=0.0 
      PEQIN(84,I)=0.5
      if(NANISO == 2):
 PEQIN(84,I)=0.0                                  
      if(EN <= EIN(84):
) GO TO 1085
      QIN(84,I)=.0003356/(EIN(84)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(84)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(84)+E(3))*1.0167
      if(QIN(84,I):
 < 0.0) QIN(84,I)=0.0
      if(EN <= (2.0*EIN(84):
)) GO TO 1085   
      if(NANISO > 0):
 PEQIN(84,I)=PEQEL(2,(I-IOFFN(84)))           
#  1DELu 7.75ev                                
 1085 CONTINUE           
      QIN(85,I)=0.0
      PEQIN(85,I)=0.5
      if(NANISO == 2):
 PEQIN(85,I)=0.0                              
      if(EN <= EIN(85):
) GO TO 1086
      QIN(85,I)=.0007378/(EIN(85)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(85)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(85)+E(3))*1.0161
      if(QIN(85,I):
 < 0.0) QIN(85,I)=0.0
      if(EN <= (2.0*EIN(85):
)) GO TO 1086
      if(NANISO > 0):
 PEQIN(85,I)=PEQEL(2,(I-IOFFN(85))) 
#  1DELu 8.0ev   
 1086 CONTINUE                                                          
      QIN(86,I)=0.0
      PEQIN(86,I)=0.5
      if(NANISO == 2):
 PEQIN(86,I)=0.0                              
      if(EN <= EIN(86):
) GO TO 1087
      QIN(86,I)=.001145/(EIN(86)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(86)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(86)+E(3))*1.0156
      if(QIN(86,I):
 < 0.0) QIN(86,I)=0.0
      if(EN <= (2.0*EIN(86):
)) GO TO 1087
      if(NANISO > 0):
 PEQIN(86,I)=PEQEL(2,(I-IOFFN(86))) 
# 1DELu 8.25ev    
 1087 CONTINUE                                                          
      QIN(87,I)=0.0
      PEQIN(87,I)=0.5
      if(NANISO == 2):
 PEQIN(87,I)=0.0                              
      if(EN <= EIN(87):
) GO TO 1088
      QIN(87,I)=.001409/(EIN(87)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(87)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(87)+E(3))*1.0152
      if(QIN(85,I):
 < 0.0) QIN(87,I)=0.0
      if(EN <= (2.0*EIN(87):
)) GO TO 1088
      if(NANISO > 0):
 PEQIN(87,I)=PEQEL(2,(I-IOFFN(87))) 
#  1DELu 8.50ev   
 1088 CONTINUE                                                          
      QIN(88,I)=0.0
      PEQIN(88,I)=0.5
      if(NANISO == 2):
 PEQIN(88,I)=0.0                              
      if(EN <= EIN(88):
) GO TO 1089
      QIN(88,I)=.001481/(EIN(88)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(88)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(88)+E(3))*1.0147
      if(QIN(88,I):
 < 0.0) QIN(88,I)=0.0
      if(EN <= (2.0*EIN(88):
)) GO TO 1089
      if(NANISO > 0):
 PEQIN(88,I)=PEQEL(2,(I-IOFFN(88))) 
# 1DELu 8.75ev   
 1089 CONTINUE                                                          
      QIN(89,I)=0.0
      PEQIN(89,I)=0.5
      if(NANISO == 2):
 PEQIN(89,I)=0.0                              
      if(EN <= EIN(89):
) GO TO 1090
      QIN(89,I)=.000859/(EIN(89)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(89)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(89)+E(3))*1.0143
      if(QIN(89,I):
 < 0.0) QIN(89,I)=0.0
      if(EN <= (2.0*EIN(89):
)) GO TO 1090
      if(NANISO > 0):
 PEQIN(89,I)=PEQEL(2,(I-IOFFN(89))) 
# TRIPLET
 1090 CONTINUE                                                          
      QIN(90,I)=0.0
      PEQIN(90,I)=0.5
      if(NANISO == 2):
 PEQIN(90,I)=0.0                              
      if(EN <= EIN(90):
) GO TO 1091
      if(EN > XTRP1(NTRP1):
) GO TO 2083
      DO 2081 J=2,NTRP1
      if(EN <= (XTRP1[J]:
)) GO TO 2082
 2081 CONTINUE
      J=NTRP1
 2082 A=(YTRP1[J]-YTRP1(J-1))/(XTRP1[J]-XTRP1(J-1))
      B=(XTRP1(J-1)*YTRP1[J]-XTRP1[J]*YTRP1(J-1))/(XTRP1(J-1)-XTRP1[J])
      QIN(90,I)=(A*EN+B)*1.D-16                
      GO TO 2084
# SCALE BY 1/E**2 ABOVE XTRP1(NTRP1) EV
 2083 QIN(90,I)=YTRP1(NTRP1)*(XTRP1(NTRP1)/EN)**2*1.D-16                
 2084 if(EN <= (2.0*EIN(90))) GO TO 1091
      if(NANISO > 0):
 PEQIN(90,I)=PEQEL(2,(I-IOFFN(90))) 
#  1PIg  8.90ev                                            
 1091 CONTINUE                                                          
      QIN(91,I)=0.0
      PEQIN(91,I)=0.5
      if(NANISO == 2):
 PEQIN(91,I)=0.0                              
      if(EN <= EIN(91):
) GO TO 1092
      QIN(91,I)=.001687/(EIN(91)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(91)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(91)+E(3))*1.0140
      if(QIN(91,I):
 < 0.0) QIN(91,I)=0.0
      if(EN <= (2.0*EIN(91):
)) GO TO 1092
      if(NANISO > 0):
 PEQIN(91,I)=PEQEL(2,(I-IOFFN(91))) 
#  1PIg 9.15ev   
 1092 CONTINUE                                                          
      QIN(92,I)=0.0
      PEQIN(92,I)=0.5
      if(NANISO == 2):
 PEQIN(92,I)=0.0                              
      if(EN <= EIN(92):
) GO TO 1093
      QIN(92,I)=.002115/(EIN(92)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(92)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(92)+E(3))*1.0137
      if(QIN(92,I):
 < 0.0) QIN(92,I)=0.0
      if(EN <= (2.0*EIN(92):
)) GO TO 1093
      if(NANISO > 0):
 PEQIN(92,I)=PEQEL(2,(I-IOFFN(92))) 
#  1PIg  9.4ev   
 1093 CONTINUE                                                          
      QIN(93,I)=0.0
      PEQIN(93,I)=0.5
      if(NANISO == 2):
 PEQIN(93,I)=0.0                              
      if(EN <= EIN(93):
) GO TO 1094
      QIN(93,I)=.001920/(EIN(93)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(93)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(93)+E(3))*1.0133
      if(QIN(93,I):
 < 0.0) QIN(93,I)=0.0
      if(EN <= (2.0*EIN(93):
)) GO TO 1094
      if(NANISO > 0):
 PEQIN(93,I)=PEQEL(2,(I-IOFFN(93))) 
#  1PIg  9.65ev   
 1094 CONTINUE                                                          
      QIN(94,I)=0.0
      PEQIN(94,I)=0.5
      if(NANISO == 2):
 PEQIN(94,I)=0.0                              
      if(EN <= EIN(94):
) GO TO 1095
      QIN(94,I)=.001180/(EIN(94)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(94)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(94)+E(3))*1.0130
      if(QIN(94,I):
 < 0.0) QIN(94,I)=0.0
      if(EN <= (2.0*EIN(94):
)) GO TO 1095
      if(NANISO > 0):
 PEQIN(94,I)=PEQEL(2,(I-IOFFN(94))) 
#  1PIg  9.9ev   
 1095 CONTINUE                                                          
      QIN(95,I)=0.0
      PEQIN(95,I)=0.5
      if(NANISO == 2):
 PEQIN(95,I)=0.0                              
      if(EN <= EIN(95):
) GO TO 1096
      QIN(95,I)=.000683/(EIN(95)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(95)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(95)+E(3))*1.0126
      if(QIN(95,I):
 < 0.0) QIN(95,I)=0.0
      if(EN <= (2.0*EIN(95):
)) GO TO 1096
      if(NANISO > 0):
 PEQIN(95,I)=PEQEL(2,(I-IOFFN(95))) 
#  1PIg 10.15ev   
 1096 CONTINUE                                                          
      QIN(96,I)=0.0
      PEQIN(96,I)=0.5
      if(NANISO == 2):
 PEQIN(96,I)=0.0                              
      if(EN <= EIN(96):
) GO TO 1097
      QIN(96,I)=.000456/(EIN(96)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(96)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(96)+E(3))*1.0123
      if(QIN(96,I):
 < 0.0) QIN(96,I)=0.0
      if(EN <= (2.0*EIN(96):
)) GO TO 1097
      if(NANISO > 0):
 PEQIN(96,I)=PEQEL(2,(I-IOFFN(96))) 
#   RA:AU  10.7ev                                                     
 1097 CONTINUE                                                          
      QIN(97,I)=0.0
      PEQIN(97,I)=0.5
      if(NANISO == 2):
 PEQIN(97,I)=0.0                              
      if(EN <= EIN(97):
) GO TO 1098
      QIN(97,I)=.004361/(EIN(97)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(97)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(97)+E(3))
      if(QIN(97,I):
 < 0.0) QIN(97,I)=0.0
      if(EN <= (2.0*EIN(97):
)) GO TO 1098
      if(NANISO > 0):
 PEQIN(97,I)=PEQEL(2,(I-IOFFN(97))) 
#  1SIGu+'  1SIGu+  C'   11.048ev                               
 1098 CONTINUE                                                          
      QIN(98,I)=0.0
      PEQIN(98,I)=0.5
      if(NANISO == 2):
 PEQIN(98,I)=0.0                              
      if(EN <= EIN(98):
) GO TO 1099
      QIN(98,I)=.1718/(EIN(98)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(98)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(98)+E(3))
      if(QIN(98,I):
 < 0.0) QIN(98,I)=0.0
      if(EN <= (2.0*EIN(98):
)) GO TO 1099
      if(NANISO > 0):
 PEQIN(98,I)=PEQEL(2,(I-IOFFN(98))) 
#  TRIPLET                                                                
 1099 CONTINUE                                                          
      QIN(99,I)=0.0
      PEQIN(99,I)=0.5
      if(NANISO == 2):
 PEQIN(99,I)=0.0                              
      if(EN <= EIN(99):
) GO TO 1100
      if(EN > XTRP2(NTRP2):
) GO TO 2093
      DO 2091 J=2,NTRP2
      if(EN <= (XTRP2[J]:
)) GO TO 2092
 2091 CONTINUE
      J=NTRP2
 2092 A=(YTRP2[J]-YTRP2(J-1))/(XTRP2[J]-XTRP2(J-1))
      B=(XTRP2(J-1)*YTRP2[J]-XTRP2[J]*YTRP2(J-1))/(XTRP2(J-1)-XTRP2[J])
      QIN(99,I)=(A*EN+B)*1.D-16             
      GO TO 2094
# SCALE BY 1/E**2 ABOVE XTRP2(NTRP2) EV
 2093 QIN(99,I)=YTRP2(NTRP2)*(XTRP2(NTRP2)/EN)**2*1.D-16           
 2094 if(EN <= (2.0*EIN(99))) GO TO 1100
      if(NANISO > 0):
 PEQIN(99,I)=PEQEL(2,(I-IOFFN(99))) 
# 1PIu  11.385ev                                                  
 1100 CONTINUE                                                          
      QIN(100,I)=0.0
      PEQIN(100,I)=0.5
      if(NANISO == 2):
 PEQIN(100,I)=0.0                              
      if(EN <= EIN(100):
) GO TO 1101
      QIN(100,I)=.06242/(EIN(100)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(100)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(100)+E(3))
      if(QIN(100,I):
 < 0.0) QIN(100,I)=0.0
      if(EN <= (2.0*EIN(100):
)) GO TO 1101
      if(NANISO > 0):
 PEQIN(100,I)=PEQEL(2,(I-IOFFN(100))) 
#  RYDBERG  11.543ev                                                  
 1101 CONTINUE                                                          
      QIN(101,I)=0.0
      PEQIN(101,I)=0.5
      if(NANISO == 2):
 PEQIN(101,I)=0.0                              
      if(EN <= EIN(101):
) GO TO 1102 
      QIN(101,I)=.01852/(EIN(101)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(101)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(101)+E(3))
      if(QIN(101,I):
 < 0.0) QIN(101,I)=0.0
      if(EN <= (2.0*EIN(101):
)) GO TO 1102
      if(NANISO > 0):
 PEQIN(101,I)=PEQEL(2,(I-IOFFN(101))) 
#   RYDBERG 11.608ev                                               
 1102 CONTINUE                                                          
      QIN(102,I)=0.0
      PEQIN(102,I)=0.5
      if(NANISO == 2):
 PEQIN(102,I)=0.0                              
      if(EN <= EIN(102):
) GO TO 1103 
      QIN(102,I)=.01125/(EIN(102)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(102)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(102)+E(3))
      if(QIN(102,I):
 < 0.0) QIN(102,I)=0.0
      if(EN <= (2.0*EIN(102):
)) GO TO 1103
      if(NANISO > 0):
 PEQIN(102,I)=PEQEL(2,(I-IOFFN(102))) 
#   RYDBERG 11.683ev                    
 1103 CONTINUE                                                          
      QIN(103,I)=0.0
      PEQIN(103,I)=0.5
      if(NANISO == 2):
 PEQIN(103,I)=0.0                              
      if(EN <= EIN(103):
) GO TO 1104 
      QIN(103,I)=.01535/(EIN(103)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(103)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(103)+E(3))
      if(QIN(103,I):
 < 0.0) QIN(103,I)=0.0
      if(EN <= (2.0*EIN(103):
)) GO TO 1104
      if(NANISO > 0):
 PEQIN(103,I)=PEQEL(2,(I-IOFFN(103))) 
#   RYDBERG  11.758ev                                             
 1104 CONTINUE                                                          
      QIN(104,I)=0.0
      PEQIN(104,I)=0.5
      if(NANISO == 2):
 PEQIN(104,I)=0.0                              
      if(EN <= EIN(104):
) GO TO 1105 
      QIN(104,I)=.01009/(EIN(104)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(104)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(104)+E(3))
      if(QIN(104,I):
 < 0.0) QIN(104,I)=0.0
      if(EN <= (2.0*EIN(104):
)) GO TO 1105
      if(NANISO > 0):
 PEQIN(104,I)=PEQEL(2,(I-IOFFN(104))) 
#   RYDBERG  11.826ev                                               
 1105 CONTINUE                                                          
      QIN(105,I)=0.0
      PEQIN(105,I)=0.5
      if(NANISO == 2):
 PEQIN(105,I)=0.0                              
      if(EN <= EIN(105):
) GO TO 1106 
      QIN(105,I)=.01940/(EIN(105)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(105)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(105)+E(3))
      if(QIN(105,I):
 < 0.0) QIN(105,I)=0.0
      if(EN <= (2.0*EIN(105):
)) GO TO 1106
      if(NANISO > 0):
 PEQIN(105,I)=PEQEL(2,(I-IOFFN(105))) 
#   RYDBERG  11.971ev                                               
 1106 CONTINUE                                                          
      QIN(106,I)=0.0
      PEQIN(106,I)=0.5
      if(NANISO == 2):
 PEQIN(106,I)=0.0                              
      if(EN <= EIN(106):
) GO TO 1107 
      QIN(106,I)=.03817/(EIN(106)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(106)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(106)+E(3))
      if(QIN(106,I):
 < 0.0) QIN(106,I)=0.0
      if(EN <= (2.0*EIN(106):
)) GO TO 1107
      if(NANISO > 0):
 PEQIN(106,I)=PEQEL(2,(I-IOFFN(106))) 
#  RYDBERG  12.142ev                                                
 1107 CONTINUE                                                          
      QIN(107,I)=0.0
      PEQIN(107,I)=0.5
      if(NANISO == 2):
 PEQIN(107,I)=0.0                              
      if(EN <= EIN(107):
) GO TO 1108 
      QIN(107,I)=.05814/(EIN(107)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(107)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(107)+E(3))
      if(QIN(107,I):
 < 0.0) QIN(107,I)=0.0
      if(EN <= (2.0*EIN(107):
)) GO TO 1108
      if(NANISO > 0):
 PEQIN(107,I)=PEQEL(2,(I-IOFFN(107))) 
#  RYDBERG  12.301ev                                                 
 1108 CONTINUE                                                          
      QIN(108,I)=0.0
      PEQIN(108,I)=0.5
      if(NANISO == 2):
 PEQIN(108,I)=0.0                              
      if(EN <= EIN(108):
) GO TO 1109 
      QIN(108,I)=.04769/(EIN(108)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(108)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(108)+E(3))
      if(QIN(108,I):
 < 0.0) QIN(108,I)=0.0
      if(EN <= (2.0*EIN(108):
)) GO TO 1109
      if(NANISO > 0):
 PEQIN(108,I)=PEQEL(2,(I-IOFFN(108))) 
#  RYDBERG   12.469ev                                               
 1109 CONTINUE                                                          
      QIN(109,I)=0.0
      PEQIN(109,I)=0.5
      if(NANISO == 2):
 PEQIN(109,I)=0.0                              
      if(EN <= EIN(109):
) GO TO 1110 
      QIN(109,I)=.09315/(EIN(109)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(109)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(109)+E(3))
      if(QIN(109,I):
 < 0.0) QIN(109,I)=0.0
      if(EN <= (2.0*EIN(109):
)) GO TO 1110
      if(NANISO > 0):
 PEQIN(109,I)=PEQEL(2,(I-IOFFN(109))) 
#  RYDBERG 12.627ev                                                  
 1110 CONTINUE                                                          
      QIN(110,I)=0.0
      PEQIN(110,I)=0.5
      if(NANISO == 2):
 PEQIN(110,I)=0.0                              
      if(EN <= EIN(110):
) GO TO 1111 
      QIN(110,I)=.06305/(EIN(110)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(110)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(110)+E(3))
      if(QIN(110,I):
 < 0.0) QIN(110,I)=0.0
      if(EN <= (2.0*EIN(110):
)) GO TO 1111
      if(NANISO > 0):
 PEQIN(110,I)=PEQEL(2,(I-IOFFN(110))) 
#  CONTINUUM  12.75ev                                                   
 1111 CONTINUE                                                          
      QIN(111,I)=0.0
      PEQIN(111,I)=0.5
      if(NANISO == 2):
 PEQIN(111,I)=0.0                              
      if(EN <= EIN(111):
) GO TO 1112 
      QIN(111,I)=.02477/(EIN(111)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(111)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(111)+E(3))
      if(QIN(111,I):
 < 0.0) QIN(111,I)=0.0
      if(EN <= (2.0*EIN(111):
)) GO TO 1112
      if(NANISO > 0):
 PEQIN(111,I)=PEQEL(2,(I-IOFFN(111))) 
#  RYDBERG  12.901ev                                                      
 1112 CONTINUE                                                          
      QIN(112,I)=0.0
      PEQIN(112,I)=0.5
      if(NANISO == 2):
 PEQIN(112,I)=0.0                              
      if(EN <= EIN(112):
) GO TO 1113 
      QIN(112,I)=.06231/(EIN(112)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(112)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(112)+E(3))
      if(QIN(112,I):
 < 0.0) QIN(112,I)=0.0
      if(EN <= (2.0*EIN(112):
)) GO TO 1113
      if(NANISO > 0):
 PEQIN(112,I)=PEQEL(2,(I-IOFFN(112))) 
#  SUM RYDBERGS 13.01ev                                                    
 1113 CONTINUE                                                          
      QIN(113,I)=0.0
      PEQIN(113,I)=0.5
      if(NANISO == 2):
 PEQIN(113,I)=0.0                              
      if(EN <= EIN(113):
) GO TO 1114 
      QIN(113,I)=.06696/(EIN(113)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(113)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(113)+E(3))
      if(QIN(113,I):
 < 0.0) QIN(113,I)=0.0
      if(EN <= (2.0*EIN(113):
)) GO TO 1114
      if(NANISO > 0):
 PEQIN(113,I)=PEQEL(2,(I-IOFFN(113))) 
#  SUM RYDBERGS 13.15ev                                                    
 1114 CONTINUE                                                          
      QIN(114,I)=0.0
      PEQIN(114,I)=0.5
      if(NANISO == 2):
 PEQIN(114,I)=0.0                              
      if(EN <= EIN(114):
) GO TO 1115 
      QIN(114,I)=.09451/(EIN(114)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(114)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(114)+E(3))
      if(QIN(114,I):
 < 0.0) QIN(114,I)=0.0
      if(EN <= (2.0*EIN(114):
)) GO TO 1115
      if(NANISO > 0):
 PEQIN(114,I)=PEQEL(2,(I-IOFFN(114))) 
#  SUM RYDBERGS  13.28ev                                                   
 1115 CONTINUE                                                          
      QIN(115,I)=0.0
      PEQIN(115,I)=0.5
      if(NANISO == 2):
 PEQIN(115,I)=0.0                              
      if(EN <= EIN(115):
) GO TO 1116 
      QIN(115,I)=.04986/(EIN(115)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(115)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(115)+E(3))
      if(QIN(115,I):
 < 0.0) QIN(115,I)=0.0
      if(EN <= (2.0*EIN(115):
)) GO TO 1116
      if(NANISO > 0):
 PEQIN(115,I)=PEQEL(2,(I-IOFFN(115))) 
#  SUM RYDBERGS  13.39ev                                                  
 1116 CONTINUE                                                          
      QIN(116,I)=0.0
      PEQIN(116,I)=0.5
      if(NANISO == 2):
 PEQIN(116,I)=0.0                              
      if(EN <= EIN(116):
) GO TO 1117 
      QIN(116,I)=.09029/(EIN(116)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(116)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(116)+E(3))
      if(QIN(116,I):
 < 0.0) QIN(116,I)=0.0
      if(EN <= (2.0*EIN(116):
)) GO TO 1117
      if(NANISO > 0):
 PEQIN(116,I)=PEQEL(2,(I-IOFFN(116))) 
#  SUM RYDBERGS   13.51ev                                                 
 1117 CONTINUE                                                          
      QIN(117,I)=0.0
      PEQIN(117,I)=0.5
      if(NANISO == 2):
 PEQIN(117,I)=0.0                              
      if(EN <= EIN(117):
) GO TO 1118 
      QIN(117,I)=.07431/(EIN(117)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(117)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(117)+E(3))
      if(QIN(117,I):
 < 0.0) QIN(117,I)=0.0
      if(EN <= (2.0*EIN(117):
)) GO TO 1118
      if(NANISO > 0):
 PEQIN(117,I)=PEQEL(2,(I-IOFFN(117))) 
#  SUM RYDBERGS   13.68ev                                               
 1118 CONTINUE                                                          
      QIN(118,I)=0.0
      PEQIN(118,I)=0.5
      if(NANISO == 2):
 PEQIN(118,I)=0.0                              
      if(EN <= EIN(118):
) GO TO 1119 
      QIN(118,I)=.15625/(EIN(118)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(118)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(118)+E(3))
      if(QIN(118,I):
 < 0.0) QIN(118,I)=0.0
      if(EN <= (2.0*EIN(118):
)) GO TO 1119
      if(NANISO > 0):
 PEQIN(118,I)=PEQEL(2,(I-IOFFN(118))) 
#  NEUTRAL DISSOCIATION 13.78ev                                            
 1119 CONTINUE                                                          
      QIN(119,I)=0.0
      PEQIN(119,I)=0.5
      if(NANISO == 2):
 PEQIN(119,I)=0.0                              
      if(EN <= EIN(119):
) GO TO 1120 
      QIN(119,I)=.08084/(EIN(119)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(119)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(119)+E(3))*1.0075
      if(QIN(119,I):
 < 0.0) QIN(119,I)=0.0
      if(EN <= (2.0*EIN(119):
)) GO TO 1120
      if(NANISO > 0):
 PEQIN(119,I)=PEQEL(2,(I-IOFFN(119))) 
#  NEUTRAL DISSOCIATION  14.0ev                                            
 1120 CONTINUE                                                          
      QIN(120,I)=0.0
      PEQIN(120,I)=0.5
      if(NANISO == 2):
 PEQIN(120,I)=0.0                              
      if(EN <= EIN(120):
) GO TO 1121 
      QIN(120,I)=.02662/(EIN(120)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(120)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(120)+E(3))*1.0089
      if(QIN(120,I):
 < 0.0) QIN(120,I)=0.0
      if(EN <= (2.0*EIN(120):
)) GO TO 1121
      if(NANISO > 0):
 PEQIN(120,I)=PEQEL(2,(I-IOFFN(120))) 
#  NEUTRAL DISSOCIATION  14.25ev 
 1121 CONTINUE                                                          
      QIN(121,I)=0.0
      PEQIN(121,I)=0.5
      if(NANISO == 2):
 PEQIN(121,I)=0.0                              
      if(EN <= EIN(121):
) GO TO 1122 
      QIN(121,I)=.01062/(EIN(121)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(121)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(121)+E(3))*1.0088
      if(QIN(121,I):
 < 0.0) QIN(121,I)=0.0
      if(EN <= (2.0*EIN(121):
)) GO TO 1122
      if(NANISO > 0):
 PEQIN(121,I)=PEQEL(2,(I-IOFFN(121))) 
#   NEUTRAL DISSOCIATION  14.5ev 
 1122 CONTINUE                                                          
      QIN(122,I)=0.0
      PEQIN(122,I)=0.5
      if(NANISO == 2):
 PEQIN(122,I)=0.0                              
      if(EN <= EIN(122):
) GO TO 1123 
      QIN(122,I)=.00644/(EIN(122)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(122)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(122)+E(3))*1.0086
      if(QIN(122,I):
 < 0.0) QIN(122,I)=0.0
      if(EN <= (2.0*EIN(122):
)) GO TO 1123
      if(NANISO > 0):
 PEQIN(122,I)=PEQEL(2,(I-IOFFN(122))) 
#  NEUTRAL DISSOCIATION  14.75ev  
 1123 CONTINUE                                                          
      QIN(123,I)=0.0
      PEQIN(123,I)=0.5
      if(NANISO == 2):
 PEQIN(123,I)=0.0                              
      if(EN <= EIN(123):
) GO TO 1124 
      QIN(123,I)=.00485/(EIN(123)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(123)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(123)+E(3))*1.0085
      if(QIN(123,I):
 < 0.0) QIN(123,I)=0.0
      if(EN <= (2.0*EIN(123):
)) GO TO 1124
      if(NANISO > 0):
 PEQIN(123,I)=PEQEL(2,(I-IOFFN(123))) 
#  NEUTRAL DISSOCIATION  15.0ev 
 1124 CONTINUE                                                          
      QIN(124,I)=0.0
      PEQIN(124,I)=0.5
      if(NANISO == 2):
 PEQIN(124,I)=0.0                              
      if(EN <= EIN(124):
) GO TO 1125 
      QIN(124,I)=.00880/(EIN(124)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(124)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(124)+E(3))*1.0083
      if(QIN(124,I):
 < 0.0) QIN(124,I)=0.0
      if(EN <= (2.0*EIN(124):
)) GO TO 1125
      if(NANISO > 0):
 PEQIN(124,I)=PEQEL(2,(I-IOFFN(124))) 
#  NEUTRAL DISSOCIATION  15.25ev 
 1125 CONTINUE                                                          
      QIN(125,I)=0.0
      PEQIN(125,I)=0.5
      if(NANISO == 2):
 PEQIN(125,I)=0.0                              
      if(EN <= EIN(125):
) GO TO 1126 
      QIN(125,I)=.01522/(EIN(125)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(125)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(125)+E(3))*1.0082
      if(QIN(125,I):
 < 0.0) QIN(125,I)=0.0
      if(EN <= (2.0*EIN(125):
)) GO TO 1126
      if(NANISO > 0):
 PEQIN(125,I)=PEQEL(2,(I-IOFFN(125))) 
#  NEUTRAL DISSOCIATION  15.5ev 
 1126 CONTINUE                                                          
      QIN(126,I)=0.0
      PEQIN(126,I)=0.5
      if(NANISO == 2):
 PEQIN(126,I)=0.0                              
      if(EN <= EIN(126):
) GO TO 1127 
      QIN(126,I)=.01683/(EIN(126)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(126)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(126)+E(3))*1.0081
      if(QIN(126,I):
 < 0.0) QIN(126,I)=0.0
      if(EN <= (2.0*EIN(126):
)) GO TO 1127
      if(NANISO > 0):
 PEQIN(126,I)=PEQEL(2,(I-IOFFN(126))) 
#  NEUTRAL DISSOCIATION  15.75ev 
 1127 CONTINUE                                                          
      QIN(127,I)=0.0
      PEQIN(127,I)=0.5
      if(NANISO == 2):
 PEQIN(127,I)=0.0                              
      if(EN <= EIN(127):
) GO TO 1128 
      QIN(127,I)=.02135/(EIN(127)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(127)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(127)+E(3))*1.0079
      if(QIN(127,I):
 < 0.0) QIN(127,I)=0.0
      if(EN <= (2.0*EIN(127):
)) GO TO 1128
      if(NANISO > 0):
 PEQIN(127,I)=PEQEL(2,(I-IOFFN(127)))  
#  NEUTRAL DISSOCIATION  16.0ev 
 1128 CONTINUE                                                          
      QIN(128,I)=0.0
      PEQIN(128,I)=0.5
      if(NANISO == 2):
 PEQIN(128,I)=0.0                              
      if(EN <= EIN(128):
) GO TO 1129 
      QIN(128,I)=.03232/(EIN(128)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(128)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(128)+E(3))*1.0078
      if(QIN(128,I):
 < 0.0) QIN(128,I)=0.0
      if(EN <= (2.0*EIN(128):
)) GO TO 1129
      if(NANISO > 0):
 PEQIN(128,I)=PEQEL(2,(I-IOFFN(128))) 
# NEUTRAL DISSOCIATION  16.25ev 
 1129 CONTINUE                                                          
      QIN(129,I)=0.0
      PEQIN(129,I)=0.5
      if(NANISO == 2):
 PEQIN(129,I)=0.0                              
      if(EN <= EIN(129):
) GO TO 1130 
      QIN(129,I)=.02534/(EIN(129)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(129)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(129)+E(3))*1.0077
      if(QIN(129,I):
 < 0.0) QIN(129,I)=0.0
      if(EN <= (2.0*EIN(129):
)) GO TO 1130
      if(NANISO > 0):
 PEQIN(129,I)=PEQEL(2,(I-IOFFN(129))) 
#  NEUTRAL DISSOCIATION  16.5ev 
 1130 CONTINUE                                                          
      QIN(130,I)=0.0
      PEQIN(130,I)=0.5
      if(NANISO == 2):
 PEQIN(130,I)=0.0                              
      if(EN <= EIN(130):
) GO TO 1131 
      QIN(130,I)=.01433/(EIN(130)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(130)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(130)+E(3))*1.0076
      if(QIN(130,I):
 < 0.0) QIN(130,I)=0.0
      if(EN <= (2.0*EIN(130):
)) GO TO 1131
      if(NANISO > 0):
 PEQIN(130,I)=PEQEL(2,(I-IOFFN(130))) 
# NEUTRAL DISSOCIATION  16.75ev 
 1131 CONTINUE                                                          
      QIN(131,I)=0.0
      PEQIN(131,I)=0.5
      if(NANISO == 2):
 PEQIN(131,I)=0.0                              
      if(EN <= EIN(131):
) GO TO 1132 
      QIN(131,I)=.00965/(EIN(131)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(131)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(131)+E(3))*1.0075
      if(QIN(131,I):
 < 0.0) QIN(131,I)=0.0
      if(EN <= (2.0*EIN(131):
)) GO TO 1132
      if(NANISO > 0):
 PEQIN(131,I)=PEQEL(2,(I-IOFFN(131))) 
#  NEUTRAL DISSOCIATION  17.0ev 
 1132 CONTINUE                                                          
      QIN(132,I)=0.0
      PEQIN(132,I)=0.5
      if(NANISO == 2):
 PEQIN(132,I)=0.0                              
      if(EN <= EIN(132):
) GO TO 1133 
      QIN(132,I)=.01481/(EIN(132)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(132)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(132)+E(3))*1.0074
      if(QIN(132,I):
 < 0.0) QIN(132,I)=0.0
      if(EN <= (2.0*EIN(132):
)) GO TO 1133 
      if(NANISO > 0):
 PEQIN(132,I)=PEQEL(2,(I-IOFFN(132))) 
#  NEUTRAL DISSOCIATION  17.25ev 
 1133 CONTINUE                                                          
      QIN(133,I)=0.0
      PEQIN(133,I)=0.5
      if(NANISO == 2):
 PEQIN(133,I)=0.0                              
      if(EN <= EIN(133):
) GO TO 1134 
      QIN(133,I)=.01148/(EIN(133)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(133)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(133)+E(3))*1.0072
      if(QIN(133,I):
 < 0.0) QIN(133,I)=0.0
      if(EN <= (2.0*EIN(133):
)) GO TO 1134
      if(NANISO > 0):
 PEQIN(133,I)=PEQEL(2,(I-IOFFN(133))) 
#  NEUTRAL DISSOCIATION  17.5ev 
 1134 CONTINUE                                                          
      QIN(134,I)=0.0
      PEQIN(134,I)=0.5
      if(NANISO == 2):
 PEQIN(134,I)=0.0                              
      if(EN <= EIN(134):
) GO TO 1135 
      QIN(134,I)=.00885/(EIN(134)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(134)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(134)+E(3))*1.0071
      if(QIN(134,I):
 < 0.0) QIN(134,I)=0.0
      if(EN <= (2.0*EIN(134):
)) GO TO 1135
      if(NANISO > 0):
 PEQIN(134,I)=PEQEL(2,(I-IOFFN(134))) 
# NEUTRAL DISSOCIATION  17.75ev 
 1135 CONTINUE                                                          
      QIN(135,I)=0.0
      PEQIN(135,I)=0.5
      if(NANISO == 2):
 PEQIN(135,I)=0.0                              
      if(EN <= EIN(135):
) GO TO 1136 
      QIN(135,I)=.00931/(EIN(135)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(135)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(135)+E(3))*1.0070
      if(QIN(135,I):
 < 0.0) QIN(135,I)=0.0
      if(EN <= (2.0*EIN(135):
)) GO TO 1136
      if(NANISO > 0):
 PEQIN(135,I)=PEQEL(2,(I-IOFFN(135))) 
# NEUTRAL DISSOCIATION  18.00ev 
 1136 CONTINUE                                                          
      QIN(136,I)=0.0
      PEQIN(136,I)=0.5
      if(NANISO == 2):
 PEQIN(136,I)=0.0                              
      if(EN <= EIN(136):
) GO TO 1137 
      QIN(136,I)=.00666/(EIN(136)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(136)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(136)+E(3))*1.0069
      if(QIN(136,I):
 < 0.0) QIN(136,I)=0.0
      if(EN <= (2.0*EIN(136):
)) GO TO 1137
      if(NANISO > 0):
 PEQIN(136,I)=PEQEL(2,(I-IOFFN(136))) 
# NEUTRAL DISSOCIATION  18.25ev 
 1137 CONTINUE                                                          
      QIN(137,I)=0.0
      PEQIN(137,I)=0.5
      if(NANISO == 2):
 PEQIN(137,I)=0.0                              
      if(EN <= EIN(137):
) GO TO 1138 
      QIN(137,I)=.00443/(EIN(137)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(137)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(137)+E(3))*1.0068
      if(QIN(137,I):
 < 0.0) QIN(137,I)=0.0
      if(EN <= (2.0*EIN(137):
)) GO TO 1138
      if(NANISO > 0):
 PEQIN(137,I)=PEQEL(2,(I-IOFFN(137))) 
# NEUTRAL DISSOCIATION  18.50ev 
 1138 CONTINUE                                                          
      QIN(138,I)=0.0
      PEQIN(138,I)=0.5
      if(NANISO == 2):
 PEQIN(138,I)=0.0                              
      if(EN <= EIN(138):
) GO TO 1139 
      QIN(138,I)=.00371/(EIN(138)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(138)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(138)+E(3))*1.0068
      if(QIN(138,I):
 < 0.0) QIN(138,I)=0.0
      if(EN <= (2.0*EIN(138):
)) GO TO 1139
      if(NANISO > 0):
 PEQIN(138,I)=PEQEL(2,(I-IOFFN(138))) 
# NEUTRAL DISSOCIATION  18.75ev 
 1139 CONTINUE                                                          
      QIN(139,I)=0.0
      PEQIN(139,I)=0.5
      if(NANISO == 2):
 PEQIN(139,I)=0.0                              
      if(EN <= EIN(139):
) GO TO 1140 
      QIN(139,I)=.00344/(EIN(139)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(139)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(139)+E(3))*1.0067
      if(QIN(139,I):
 < 0.0) QIN(139,I)=0.0
      if(EN <= (2.0*EIN(139):
)) GO TO 1140
      if(NANISO > 0):
 PEQIN(139,I)=PEQEL(2,(I-IOFFN(139))) 
# NEUTRAL DISSOCIATION  19.00ev 
 1140 CONTINUE                                                          
      QIN(140,I)=0.0
      PEQIN(140,I)=0.5
      if(NANISO == 2):
 PEQIN(140,I)=0.0                              
      if(EN <= EIN(140):
) GO TO 1141 
      QIN(140,I)=.00356/(EIN(140)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(140)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(140)+E(3))*1.0066
      if(QIN(140,I):
 < 0.0) QIN(140,I)=0.0
      if(EN <= (2.0*EIN(140):
)) GO TO 1141
      if(NANISO > 0):
 PEQIN(140,I)=PEQEL(2,(I-IOFFN(140))) 
# NEUTRAL DISSOCIATION  19.25ev 
 1141 CONTINUE                                                          
      QIN(141,I)=0.0
      PEQIN(141,I)=0.5
      if(NANISO == 2):
 PEQIN(141,I)=0.0                              
      if(EN <= EIN(141):
) GO TO 1142 
      QIN(141,I)=.00530/(EIN(141)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(141)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(141)+E(3))*1.0065
      if(QIN(141,I):
 < 0.0) QIN(141,I)=0.0
      if(EN <= (2.0*EIN(141):
)) GO TO 1142
      if(NANISO > 0):
 PEQIN(141,I)=PEQEL(2,(I-IOFFN(141))) 
# NEUTRAL DISSOCIATION  19.50ev 
 1142 CONTINUE                                                          
      QIN(142,I)=0.0
      PEQIN(142,I)=0.5
      if(NANISO == 2):
 PEQIN(142,I)=0.0                              
      if(EN <= EIN(142):
) GO TO 1143 
      QIN(142,I)=.00621/(EIN(142)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(142)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(142)+E(3))*1.0064
      if(QIN(142,I):
 < 0.0) QIN(142,I)=0.0
      if(EN <= (2.0*EIN(142):
)) GO TO 1143
      if(NANISO > 0):
 PEQIN(142,I)=PEQEL(2,(I-IOFFN(142))) 
# NEUTRAL DISSOCIATION  19.75ev 
 1143 CONTINUE                                                          
      QIN(143,I)=0.0
      PEQIN(143,I)=0.5
      if(NANISO == 2):
 PEQIN(143,I)=0.0                              
      if(EN <= EIN(143):
) GO TO 1144 
      QIN(143,I)=.00619/(EIN(143)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(143)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(143)+E(3))*1.0070
      if(QIN(143,I):
 < 0.0) QIN(143,I)=0.0
      if(EN <= (2.0*EIN(143):
)) GO TO 1144
      if(NANISO > 0):
 PEQIN(143,I)=PEQEL(2,(I-IOFFN(143))) 
#  TRIPLET SUM OF HIGH LYING TRIPLETS                                         
 1144 CONTINUE                                                          
      QIN(144,I)=0.0
      PEQIN(144,I)=0.5
      if(NANISO == 2):
 PEQIN(144,I)=0.0                              
      if(EN <= EIN(144):
) GO TO 1145 
      QIN(144,I)=3.6000/(EIN(144)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(144)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(144)+E(3))      
      if(QIN(144,I):
 < 0.0) QIN(144,I)=0.0
      if(EN > 60.0):
 QIN(144,I)=QIN(144,I)*math.sqrt(60.0/EN)
      if(EN <= (2.0*EIN(144):
)) GO TO 1145
      if(NANISO > 0):
 PEQIN(144,I)=PEQEL(2,(I-IOFFN(144)))  
#
 1145 CONTINUE
# LOAD BREMSSTRAHLUNG X-SECTIONS
      QIN(145,I)=0.0
      QIN(146,I)=0.0
      if(EN <= 1000.):
 GO TO 1440
      DO 1410 J=2,NBREM
      if(EN <= EBRM[J]:
) GO TO 1420
 1410 CONTINUE
      J=NBREM
 1420 A=(math.log(Z6T[J])-math.log(Z6T(J-1)))/(EBRM[J]-EBRM(J-1))
      B=(math.log(Z6T[J])*EBRM(J-1)-math.log(Z6T(J-1))*EBRM[J])/(EBRM(J-1)-EBRM[J])
      A1=(math.log(Z8T[J])-math.log(Z8T(J-1)))/(EBRM[J]-EBRM(J-1))
      B1=(math.log(Z8T[J])*EBRM(J-1)-math.log(Z8T(J-1))*EBRM[J])/(EBRM(J-1)-EBRM[J])
      QIN(145,I)=math.exp(A*EN+B)*1.D-24
      QIN(146,I)=math.exp(A1*EN+B1)*2.D-24
 1440 CONTINUE
# SUM ROTATION 
      SUMR=0.0
      DO 1450 K=1,60
      SUMR=SUMR+QIN(K,I)
 1450 CONTINUE   
# SUM VIBRATION 
      SUMV=0.0
      DO 1455 K=61,79 
      SUMV=SUMV+QIN(K,I)
 1455 CONTINUE  
# SUM DIPOLE +TRIPLET EXCITATION  
      SUME=0.0
      DO 1460 K=80,144 
      SUME=SUME+QIN(K,I)
 1460 CONTINUE  
# SUM TRIPLET EXCITATION
      SUMTRP=QIN(90,I)+QIN(99,I)+QIN(144,I)
# GET SUM DIPOLE
      SUME=SUME-SUMTRP
      SUMEXC=SUME+SUMTRP
# SUM IONISATION
      SUMION=0.0
      DO 1470 K=1,11
      SUMION=SUMION+QION(K,I)
 1470 CONTINUE
# GET CORRECT ELASTIC X-SECTION
      Q(2,I)=Q(2,I)-SUMR
# Q(1,I) TOTAL USED FOR INprintION ONLY          
      Q(1,I)=QELA+Q(4,I)+SUMV+SUME+SUMTRP+SUMION    
#     WRITE(6,991) EN,SUME,SUMTRP,SUMEXC,SUMION,Q(1,I)  
# 991 print(' EN=',D12.4,' SUMDIPOLE=',D12.4,' SUM TRIPLT=',D12.4,
#    //,'    SUMEXC=',D12.4,' SUMION=',D12.4,' TOT=',D12.4)  
 9000 CONTINUE                                                          
#                                                                       
#     SAVE ON COMPUTING TIME                                            
#
      DO 2000 K=1,74                                                    
      J=145-K   
      if(EFINAL <= EIN[J]:
) NIN=J-1
 2000 CONTINUE
      if(EFINAL > 1000.):
 NIN=146
#                                                                
      RETURN                                                            
      # end     
      def GAS13(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000)
      COMMON/DENS/DEN(20000)
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end
      def GAS14(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY   ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000)
      COMMON/DENS/DEN(20000)
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)        
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250] 
      DIMENSION ELEV[100],AJL(100),PJ(100) 
      DIMENSION SALPHA[105],EROT(105),AJIN(210),IMAP(210)   
      DIMENSION XEL(159),YEL(159),XMT(156),YMT(156),XEPS(156),YEPS(156),XVIB1(17),YVIB1(17),XVIB2(18),YVIB2(18),XVIB3(12),YVIB3(12),XION(55),YIONC(55),YIONG(55),XION1(31),YION1(31),XION2(28),YION2(28),XION3(28),YION3(28),XION4(26),YION4(26),XION5(25),YION5(25),XION6(23),YION6(23),XION7(21),YION7(21),XION8(17),YION8(17),XKSH(81),YKSH(81),XATT1(38),YATT1(38),XATT2(30),YATT2(30),XATT3(28),YATT3(28),XTRP1(11),YTRP1(11),XTRP2(10),YTRP2(10),XTRP3(10),YTRP3(10),XTRP4(9),YTRP4(9),XNUL1(12),YNUL1(12),XNUL2(33),YNUL2(33),XNUL3(20),YNUL3(20),XNUL4(18),YNUL4(18),IOFFN(250),IOFFION(9),XSECDUM(210)
      DIMENSION ENROT(145),ENRTS(145),YEPSR(145),YMTRT(145)
      DIMENSION Z1T(25),Z8T(25),EBRM(25)
      CHARACTER*50 SCRPT(300),SCRPTN(10)             
      CHARACTER*25 NAME
# ENERGY LEVELS OF WATER ( UP TO J=9) IN MILLIVOLTS
      DATA ELEV/0.0,2.950,4.604,5.253,8.690,9.856,11.800,16.726,16.882,16.956,17.640,21.946,25.578,26.304,35.363,35.387,27.531,27.876,34.157,37.240,39.152,47.426,47.590,60.518,60.521,40.338,40.496,49.526,51.603,55.360,62.484,63.085,75.645,75.673,92.005,92.006,55.383,55.452,67.312,68.552,74.734,80.463,82.022,93.822,93.953,110.172,110.176,129.571,129.571,72.685,72.714,87.311,87.98,97.006,101.26,104.44,115.03,115.46,131.38,131.40,150.79,150.79,172.94,172.94,92.252,92.264,109.46,109.80,121.87,124.74,130.20,139.20,140.32,155.62,155.71,175.02,175.02,197.22,197.22,221.81,221.81,114.09,114.09,133.79,133.95,149.02,150.79,159.06,166.25,168.65,182.87,183.16,202.25,202.27,224.48,224.48,249.18,249.18,275.92,275.92/
#  J VALUE OF WATER LEVELS
      DATA AJL/0.0,1.0,1.0,1.0,2.0,2.0,2.0,2.0,2.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,7.0,7.0,7.0,7.0,7.0,7.0,7.0,7.0,7.0,7.0,7.0,7.0,7.0,7.0,7.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0/
#  TRANSITION AMPLITUDES FOR 210 TRANSITIONS
      DATA SALPHA/1.50,1.259,1.092,1.088,1.101,2.074,2.543,2.166,2.066,2.181,3.655,3.446,2.037,4.224,1.899,4.218,5.660,1.841,4.140,1.850,.8333,1.036,1.083,1.297,1.850,2.025,2.085,1.566,2.494,2.881,1.709,2.965,1.778,1.860,1.000,1.500,2.157,3.007,3.977,4.984,5.970,6.980,7.990,1.500,1.667,1.971,2.445,3.131,3.970,4.940,2.395,2.319,2.322,2.449,2.800,3.290,3.393,3.270,3.153,3.090,3.100,4.397,4.267,4.120,4.000,5.400,5.250,5.120,1.244,2.336,3.390,4.397,5.400,6.400,.9225,2.165,3.251,4.265,5.250,.6050,1.840,3.068,4.090,.3804,1.402,2.750,.2494,1.090,0.197,.7557,1.744,2.837,3.918,4.965,5.960,6.980,7.990,.3003,.8347,1.641,2.681,3.710,4.820,5.900,1.550/
# TRANSITION J(INITIAL) VALUES FOR 210 TRANSITIONS
      DATA AJIN/1.0,1.0,2.0,2.0,3.0,3.0,4.0,4.0,5.0,5.0,2.0,2.0,3.0,3.0,4.0,4.0,5.0,5.0,3.0,3.0,4.0,4.0,5.0,5.0,4.0,4.0,5.0,5.0,5.0,5.0,6.0,6.0,7.0,7.0,6.0,6.0,7.0,7.0,7.0,7.0,2.0,2.0,3.0,3.0,4.0,4.0,3.0,3.0,4.0,4.0,5.0,5.0,6.0,6.0,4.0,4.0,5.0,5.0,6.0,6.0,5.0,5.0,6.0,6.0,6.0,6.0,6.0,6.0,0.0,1.0,1.0,2.0,2.0,3.0,3.0,4.0,4.0,5.0,5.0,6.0,6.0,7.0,7.0,8.0,8.0,9.0,1.0,2.0,2.0,3.0,3.0,4.0,4.0,5.0,5.0,6.0,6.0,7.0,7.0,8.0,2.0,3.0,3.0,4.0,4.0,5.0,5.0,6.0,6.0,7.0,7.0,8.0,3.0,4.0,4.0,5.0,5.0,6.0,6.0,7.0,7.0,8.0,4.0,5.0,5.0,6.0,6.0,7.0,7.0,8.0,5.0,6.0,6.0,7.0,7.0,8.0,1.0,2.0,2.0,3.0,3.0,4.0,4.0,5.0,5.0,6.0,6.0,7.0,2.0,3.0,3.0,4.0,4.0,5.0,5.0,6.0,6.0,7.0,3.0,4.0,4.0,5.0,5.0,6.0,6.0,7.0,4.0,5.0,5.0,6.0,6.0,7.0,5.0,6.0,6.0,7.0,6.0,7.0,1.0,2.0,2.0,3.0,3.0,4.0,4.0,5.0,5.0,6.0,6.0,7.0,7.0,8.0,8.0,9.0,2.0,3.0,3.0,4.0,4.0,5.0,5.0,6.0,6.0,7.0,7.0,8.0,8.0,9.0,6.0,7.0/
# TRANSITION ENERGIES FOR 210 TRANSITIONS IN MILIVOLTS
      DATA EROT/2.303,5.082,9.083,12.93,16.33,3.110,4.809,8.439,12.59,4.538,4.994,7.724,6.626,5.834,9.188,7.423,7.433,11.93,9.695,14.63,6.869,9.785,13.09,7.938,10.19,13.16,16.35,9.364,10.88,13.36,11.11,11.91,13.10,17.54,4.604,6.906,8.950,10.92,12.97,15.11,17.33,19.58,21.84,11.47,13.78,15.75,17.45,19.03,20.67,22.49,18.48,21.12,23.33,25.10,26.52,27.74,25.13,28.05,30.74,33.00,34.76,31.48,34.50,37.43,40.16,37.56,40.61,43.62,12.28,18.66,25.16,31.49,37.57,43.36,16.45,22.01,28.25,34.53,40.62,21.51,25.84,31.47,37.58,27.48,30.42,35.00,34.24,35.89,41.55,4.086,7.100,9.891,12.46,14.89,17.23,19.54,21.82,4.769,8.579,12.29,15.71,18.76,21.48,23.99,16.54/
# MAP OF TRANSITION NO TO LEVEL POPULATION
      DATA IMAP/2,4,7,9,14,16,23,25,34,36,5,7,12,14,21,23,32,34,10,12,19,21,30,32,17,19,28,30,26,28,39,41,54,56,37,39,52,54,50,52,6,8,13,15,22,24,11,13,20,22,31,33,44,46,18,20,29,31,42,44,27,29,40,42,38,40,66,68,1,3,2,6,5,11,10,18,17,27,26,38,37,51,50,66,65,83,4,8,7,13,12,20,19,29,28,40,39,53,52,68,9,15,14,22,21,31,30,42,41,55,54,70,16,24,23,33,32,44,43,57,56,72,25,35,34,46,45,59,58,74,36,48,47,61,60,76,3,9,8,16,15,25,24,36,35,49,48,64,6,14,13,23,22,34,33,47,46,62,11,21,20,32,31,45,44,60,18,30,29,43,42,58,27,41,40,56,38,54,3,5,6,10,11,17,18,26,27,37,38,50,51,65,66,82,8,12,13,19,20,28,29,39,40,52,53,67,68,84,42,54/             
# ELASTIC MOMENTUM TRANSFER ( NO ROTATION EXCEPT ABOVE 2000EV)                       
      DATA XMT/.0001,.001,.002,.003,.004,.005,.006,.007,.008,.009,0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.10,0.15,0.20,0.25,0.30,0.40,0.50,0.60,0.70,0.80,0.90,1.00,1.30,1.50,2.00,2.50,3.00,4.00,5.00,6.00,7.00,8.00,9.00,10.0,12.0,15.0,20.0,25.0,30.0,40.0,60.0,80.0,100.,125.,150.,175.,200.,250.,300.,400.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,
# ABOVE 2000 EV USE SUM OF ROTATION AND ELASTIC 2000.0001,2500.,3000.,3500.,4000.,4500.,5000.,6000.,7000.,8000.,9000.,1.D4,1.25D4,1.5D4,1.75D4,2.D4,2.5'%.3f' %.'%.3f' %.5D4,4.D4,4.5D4,5.D4,6.D4,7.D4,8.D4,9.D4,1.D5,1.25D5,1.5D5,1.75D5,2.D5,2.5'%.3f' %.'%.3f' %.5D5,4.D5,4.5D5,5.D5,6.D5,7.D5,8.D5,9.D5,1.D6,1.25D6,1.5D6,1.75D6,2.D6,2.5'%.3f' %.'%.3f' %.5D6,4.D6,4.5D6,5.D6,6.D6,7.D6,8.D6,9.D6,1.D7,1.25D7,1.5D7,1.75D7,2.D7,2.5'%.3f' %.'%.3f' %.5D7,4.D7,4.5D7,5.D7,6.D7,7.D7,8.D7,9.D7,1.D8,1.25D8,1.5D8,1.75D8,2.D8,2.5'%.3f' %.'%.3f' %.5D8,4.D8,4.5D8,5.D8,6.D8,7.D8,8.D8,9.D8,1.D9/
      DATA YMT/38000.,35880.,17360.,11167.,8216.,6392.,5418.,4361.,3706.,3237.,2842.,1151.,671.,465.,353.,287.,224.,178.,146.,125.,70.6,45.2,31.0,22.0,12.8,8.30,6.00,3.80,2.70,2.00,1.50,0.85,0.85,1.02,1.45,1.95,2.80,3.60,4.30,4.85,5.30,5.65,5.95,6.20,5.95,5.15,4.55,4.00,3.30,2.35,1.88,1.47,1.21,.951,.772,.642,.466,.356,.228,.160,.118,.0908,.0718,.0581,.0479,.0314,.0219,.0159,.0119,
# ABOVE 2000EV USE SUM OF ROTATION AND ELASTIC.0200,.0136,.00990,.00755,.00596,.00484,.00401,.00290,.00220,.00173,.00140,.00116,7.74D-4,5.56D-4,4.21D-4,3.31D-4,2.21D-4,1.59D-4,1.21D-4,9.5D-5,7.70D-5,6.38D-5,4.61D-5,3.51D-5,2.78D-5,2.26D-5,1.88D-5,1.28D-5,9.41D-6,7.27D-6,5.82D-6,4.04D-6,3.01D-6,2.36D-6,1.91D-6,1.59D-6,1.35D-6,1.02D-6,8.06D-7,6.58D-7,5.50D-7,4.68D-7,3.35D-7,2.53D-7,1.99D-7,1.61D-7,1.13D-7,8.38D-8,6.51D-8,5.21D-8,4.27D-8,3.58D-8,2.62D-8,2.01D-8,1.59D-8,1.29D-8,1.07D-8,7.19D-9,5.18D-9,3.92D-9,3.07D-9,2.04D-9,1.45D-9,1.09D-9,8.49D-10,6.80D-10,5.57D-10,3.94D-10,2.93D-10,2.26D-10,1.80D-10,1.47D-10,9.46D-11,6.60D-11,4.86D-11,3.73D-11,2.39D-11,1.66D-11,1.22D-11,9.36D-12,7.40D-12,5.99D-12,4.16D-12,3.06D-12,2.34D-12,1.85D-12,1.50D-12/
# ELASTIC X-SECTION (WITHOUT ROTATION)
      DATA XEL/.0001,.001,.002,.003,.004,.005,.006,.007,.008,.009,0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.10,0.15,0.20,0.25,0.30,0.40,0.50,0.60,0.70,0.80,0.90,1.00,1.30,1.50,2.00,2.50,3.00,4.00,5.00,6.00,7.00,8.00,9.00,10.0,12.0,15.0,20.0,25.0,30.0,40.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,300.,400.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,
c ABOVE 2000EV USE ELASTIC + ROTATION2000.0001,2500.,3000.,3500.,4000.,4500.,5000.,6000.,7000.,8000.,9000.,1.D4,1.25D4,1.5D4,1.75D4,2.D4,2.5'%.3f' %.'%.3f' %.5D4,4.D4,4.5D4,5.D4,6.D4,7.D4,8.D4,9.D4,1.D5,1.25D5,1.5D5,1.75D5,2.D5,2.5'%.3f' %.'%.3f' %.5D5,4.D5,4.5D5,5.D5,6.D5,7.D5,8.D5,9.D5,1.D6,1.25D6,1.5D6,1.75D6,2.D6,2.5'%.3f' %.'%.3f' %.5D6,4.D6,4.5D6,5.D6,6.D6,7.D6,8.D6,9.D6,1.D7,1.25D7,1.5D7,1.75D7,2.D7,2.5'%.3f' %.'%.3f' %.5D7,4.D7,4.5D7,5.D7,6.D7,7.D7,8.D7,9.D7,1.D8,1.25D8,1.5D8,1.75D8,2.D8,2.5'%.3f' %.'%.3f' %.5D8,4.D8,4.5D8,5.D8,6.D8,7.D8,8.D8,9.D8,1.D9/
      DATA YEL/38000.,35880.,17360.,11200.,8700.,7000.,6000.,5000.,4300.,3800.,3600.,1630.,1010.,780.,640.,530.,460.,405.,365.,317.,215.,150.,112.,83.0,52.7,37.0,28.5,21.5,17.0,13.5,10.9,6.50,5.00,2.65,2.45,2.60,3.60,5.00,6.00,7.00,8.00,8.70,9.20,9.90,9.50,8.80,7.80,6.80,5.60,4.50,4.00,3.55,3.20,2.85,2.50,2.05,1.75,1.55,1.40,1.20,1.00,.795,.655,.570,.505,.450,.415,.385,.325,.285,.250,.226,
# ABOVE 2000EV USE ELASTIC + ROTATION.336,.275,.234,.203,.180,.161,.146,.123,.107,.0940,.0841,.0761,.0617,.0519,.0450,.0397,.0323,.0273,.0238,.0211,.0190,.0174,.0149,.0131,.0117,.0107,.00987,.00837,.00738,.00667,.00614,.00541,.00493,.00459,.00433,.00414,.00399,.00377,.00361,.00350,.00342,.00336,.00324,.00318,.00313,.00310,.00306,.00304,.00302,.00301,.00300,.00300,.00299,.00299,.00298,.00298,.00298,30*.00297/
#
#  OKHRIMOVSKY                 1.0 - EPSILON
#  ANGULAR DISTRIBUTION def FOR ELASTIC 
      DATA XEPS/.0001,.001,.002,.003,.004,.005,.006,.007,.008,.009,0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.10,0.15,0.20,0.25,0.30,0.40,0.50,0.60,0.70,0.80,0.90,1.00,1.30,1.50,2.00,2.50,3.00,4.00,5.00,6.00,7.00,8.00,9.00,10.0,12.0,15.0,20.0,25.0,30.0,40.0,60.0,80.0,100.,125.,150.,175.,200.,250.,300.,400.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,
#2000.0001,2500.,3000.,3500.,4000.,4500.,5000.,6000.,7000.,8000.,9000.,1.D4,1.25D4,1.5D4,1.75D4,2.D4,2.5'%.3f' %.'%.3f' %.5D4,4.D4,4.5D4,5.D4,6.D4,7.D4,8.D4,9.D4,1.D5,1.25D5,1.5D5,1.75D5,2.D5,2.5'%.3f' %.'%.3f' %.5D5,4.D5,4.5D5,5.D5,6.D5,7.D5,8.D5,9.D5,1.D6,1.25D6,1.5D6,1.75D6,2.D6,2.5'%.3f' %.'%.3f' %.5D6,4.D6,4.5D6,5.D6,6.D6,7.D6,8.D6,9.D6,1.D7,1.25D7,1.5D7,1.75D7,2.D7,2.5'%.3f' %.'%.3f' %.5D7,4.D7,4.5D7,5.D7,6.D7,7.D7,8.D7,9.D7,1.D8,1.25D8,1.5D8,1.75D8,2.D8,2.5'%.3f' %.'%.3f' %.5D8,4.D8,4.5D8,5.D8,6.D8,7.D8,8.D8,9.D8,1.D9/
      DATA YEPS/1.00,1.00,1.00,.99565,.91672,.87009,.85511,.80970,.79461,.77988,.69030,.57574,.52106,.43613,.38391,.37247,.31332,.26543,.22829,.22313,.16735,.14647,.12863,.12046,.10559,.09376,.08536,.06614,.05674,.05139,.04633,.04315,.06256,.21475,.43086,.63530,.67397,.59438,.58994,.55822,.51861,.50188,.49846,.47289,.47289,.42300,.42075,.42656,.42787,.42573,.42573,.42633,.42609,.37461,.32511,.28396,.21779,.18960,.13624,.10619,.08339,.06771,.05713,.04747,4.025D-2,2.844D-2,2.100D-2,1.628D-2,1.273D-2,
#1.497D-2,1.172D-2,9.620D-3,8.153D-3,7.066D-3,6.235D-3,5.577D-3,4.601D-3,3.914D-3,3.404D-3,3.011D-3,2.699D-3,2.141D-3,1.772D-3,1.510D-3,1.315D-3,1.043D-3,8.624D-4,7.336D-4,6.375D-4,5.631D-4,5.035D-4,4.143D-4,3.507D-4,3.035D-4,2.667D-4,2.374D-4,1.848D-4,1.501D-4,1.255D-4,1.073D-4,8.205D-5,6.555D-5,5.398D-5,4.540D-5,3.900D-5,3.390D-5,2.646D-5,2.135D-5,1.765D-5,1.487D-5,1.273D-5,9.143D-6,6.867D-6,5.363D-6,4.309D-6,2.967D-6,2.169D-6,1.656D-6,1.308D-6,1.059D-6,8.748D-7,6.267D-7,4.711D-7,3.671D-7,2.942D-7,2.408D-7,1.574D-7,1.109D-7,8.227D-8,6.344D-8,4.103D-8,2.866D-8,2.112D-8,1.620D-8,1.281D-8,1.038D-8,7.187D-9,5.257D-9,4.004D-9,3.147D-9,2.533D-9,1.596D-9,1.093D-9,7.92D-10,5.99D-10,3.76D-10,2.57D-10,1.86D-10,1.41D-10,1.10D-10,8.8D-11,6.0D-11,4.4D-11,3.3D-11,2.6D-11,2.1D-11/
# INELASTIC ANGULAR DISTRIBUTION  DIPOLE FORM
# ENERGY IN UNITS OF THE ROTATIONAL ENERGY LEVEL. 
# ENRTS FOR SUPER ELASTIC
# ENROT FOR NORMAL ELASTIC
      DATA ENRTS/0.00,0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.10,0.11,0.12,0.13,0.14,0.16,0.18,0.20,0.22,0.25,0.28,0.31,0.34,0.37,0.40,0.44,0.48,0.52,0.56,0.60,0.65,0.70,0.75,0.80,0.90,1.00,1.10,1.20,1.30,1.40,1.60,1.80,2.00,2.20,2.40,2.60,2.80,3.00,3.50,4.00,4.50,5.00,5.50,6.00,7.00,8.00,9.00,10.0,11.0,12.0,14.0,16.0,18.0,20.0,22.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,120.,140.,160.,180.,200.,250.,300.,350.,400.,500.,600.,700.,800.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,5000.,6000.,7000.,8000.,9000.,10000.,12000.,14000.,16000.,18000.,20000.,25000.,30000.,35000.,40000.,50000.,60000.,80000.,1.0D5,1.5D5,2.0D5,2.5'%.3f' %.0'%.3f' %.5D5,4.0D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.2D6,1.4D6,1.6D6,1.8D6,2.0D6,2.5'%.3f' %.0'%.3f' %.5D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7/
      DATA ENROT/1.0,1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.10,1.11,1.12,1.13,1.14,1.16,1.18,1.20,1.22,1.25,1.28,1.31,1.34,1.37,1.40,1.44,1.48,1.52,1.56,1.60,1.65,1.70,1.75,1.80,1.90,2.00,2.10,2.20,2.30,2.40,2.60,2.80,3.00,3.20,3.40,3.60,3.80,4.00,4.50,5.00,5.50,6.00,6.50,7.00,8.00,9.00,10.0,11.0,12.0,13.0,15.0,17.0,19.0,21.0,23.0,26.0,31.0,36.0,41.0,46.0,51.0,61.0,71.0,81.0,91.0,101.,121.,141.,161.,181.,201.,251.,301.,351.,401.,501.,601.,701.,801.,1001.,1201.,1401.,1601.,1801.,2001.,2501.,3001.,3501.,4001.,5001.,6001.,7001.,8001.,9001.,10001.,12001.,14001.,16001.,18001.,20001.,25001.,30001.,35001.,40001.,50001.,60001.,80001.,1.0D5,1.5D5,2.0D5,2.5'%.3f' %.0'%.3f' %.5D5,4.0D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.2D6,1.4D6,1.6D6,1.8D6,2.0D6,2.5'%.3f' %.0'%.3f' %.5D6,4.0D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7/
# OKRIMOVSKKY   1.0-EPSILON
      DATA YEPSR/1.0,.90060,.86030,.83000,.80486,.78309,.76390,.74641,.73054,.71571,.70205,.68931,.67720,.66584,.65510,.63516,.61705,.60056,.58510,.56417,.54521,.52802,.51233,.49782,.48448,.46818,.45320,.43962,.42704,.41555,.40221,.39009,.37891,.36854,.35015,.33409,.32004,.30760,.29649,.28657,.26933,.25493,.24266,.23212,.22286,.21483,.20763,.20114,.18760,.17674,.16791,.16044,.15403,.14857,.13951,.13226,.12637,.12143,.11718,.11346,.10742,.10255,.09859,.09519,.09234,.08867,.08387,.08017,.07716,.07465,.07252,.06913,.06641,.06426,.06240,.06087,.05833,.05628,.05467,.05327,.05208,.04973,.04794,.04652,.04534,.04347,.04210,.04096,.04001,.03854,.03740,.03648,.03570,.03506,.03450,.03336,.03248,.03173,.03115,.03021,.02946,.02886,.02835,.02792,.02754,.02692,.02641,.02597,.02561,.02529,.02463,.02411,.02369,.02334,.02277,.02232,.02165,.02115,.02030,.01973,.01931,.01898,.01870,.01847,.01810,.01780,.01756,.01735,.01718,.01702,.01675,.01654,.01635,.01620,.01606,.01576,.01553,.01534,.01518,.01490,.01472,.01456,.01440,.01427,.01418/
# RATIO OF MT/TOT
      DATA YMTRT/0.0,.9336,.9065,.8860,.8689,.8540,.8408,.8287,.8176,.8073,.7977,.7887,.7801,.7720,.7643,.7499,.7367,.7245,.7131,.6974,.6830,.6698,.6576,.6462,.6356,.6225,.6103,.5991,.5886,.5789, .5675,.5570,.5472,.5380,.5214,.5066,.4934,.4815,.4707,.4609,.4435,.4286,.4156,.4042,.3940,.3850,.3768,.3693,.3533,.3401,.3291,.3196,.3113,.3041,.2919,.2819,.2736,.2665,.2603,.2548,.2457,.2382,.2320,.2266,.2220,.2160,.2080,.2017,.1965,.1921,.1883,.1822,.1772,.1732,.1697,.1668,.1619,.1579,.1547,.1519,.1495,.1447,.1410,.1380,.1355,.1315,.1285,.1260,.1239,.1206,.1180,.1159,.1141,.1126,.1113,.1086,.1065,.1047,.1033,.1010,.09915,.09766,.09640,.09532,.09437,.09277,.09147,.09036,.08941,.08858,.08686,.08550,.08439,.08345,.08193,.08072,.07889,.07752,.07516,.07357,.07238,.07144,.07066,.07000,.06892,.06807,.06736,.06676,.06624,.06578,.06500,.06436,.06381,.06334,.06292,.06204,.06133,.06078,.06027,.05944,.05889,.05839,.05790,.05749,.05723/
# VIBRATION      
#  B# end MODE 010                                                 
      DATA XVIB1/.1977,0.30,0.34,0.39,0.60,0.86,1.00,2.00,2.20,3.00,4.00,5.00,6.00,8.00,10.0,15.0,20.0/                               
      DATA YVIB1/0.00,1.47,1.56,1.51,0.68,.344,.318,.172,.163,.138,    .129,.135,.140,.146,.155,.112,.086/                               
# SUM OF STRETCH MODES 001 AND 100                                
      DATA XVIB2/.4535,0.53,0.58,0.63,0.80,1.00,2.10,3.00,4.00,5.00,6.00,7.00,7.50,8.00,9.00,10.0,15.0,20.0/                     
      DATA YVIB2/0.00,1.93,2.00,1.95,.516,.430,.275,.267,.331,.370,.421,.447,.455,.426,.361,.280,.163,.069/                     
# SUM OF VIBRATION HARMONICS
      DATA XVIB3/.919,2.00,3.00,4.00,5.00,6.00,7.00,8.00,9.00,10.0,15.0,20.0/
      DATA YVIB3/0.00,.001,.009,.017,.034,.040,.042,.042,.039,.034,.017,.009/
# 
# IONISATION    ABOVE 5000 EV USE IONISATION OSCILLATOR STRENGTH
#
      DATA XION/12.617,13.5,15.0,17.5,20.0,22.5,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,110.,125.,150.,175.,200.,250.,300.,400.,500.,600.,700.,800.,900.,1000.,1100.,1200.,1300.,1400.,1500.,1600.,1700.,1800.,1900.,2000.,2100.,2200.,2300.,2400.,2500.,2600.,2700.,2800.,2900.,3000.,3500.,4000.,4500.,5000./
# COUNTING IONISATION
      DATA YIONC/0.0,.028,.124,.271,.427,.600,.752,1.017,1.248,1.431,1.577,1.701,1.865,1.964,2.052,2.082,2.104,2.094,2.069,1.994,1.931,1.860,1.691,1.534,1.315,1.138,1.005,0.893,0.811,0.744,0.681,0.634,0.595,0.559,0.528,0.501,0.476,0.454,0.434,0.416,0.399,0.384,0.369,0.356,0.344,0.333,0.323,0.313,0.304,0.295,0.287,0.253,0.226,0.205,0.1873/
# GROSS IONISATION
      DATA YIONG/0.0,.028,.124,.271,.427,.600,.752,1.017,1.248,1.431,1.579,1.705,1.875,1.981,2.076,2.111,2.138,2.132,2.111,2.037,1.975,1.903,1.732,1.571,1.346,1.163,1.028,0.913,0.829,0.761,0.696,0.648,0.608,0.571,0.540,0.512,0.486,0.464,0.444,0.425,0.408,0.392,0.377,0.364,0.352,0.340,0.330,0.320,0.311,0.301,0.293,0.259,0.231,0.210,0.1914/
# IONISATION TO H2O +           ELOSS=12.617 EV
      DATA XION1/12.617,13.5,15.0,17.5,20.0,22.5,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,110.,125.,150.,175.,200.,250.,300.,400.,500.,600.,700.,800.,900.,1000./
      DATA YION1/0.0,.028,.124,.271,.410,.542,.646,.811,.948,1.047,1.117,1.176,1.241,1.271,1.302,1.304,1.305,1.288,1.266,1.214,1.168,1.129,1.022,0.932,0.803,0.702,0.625,0.555,0.504,0.466,0.429/
# IONISATION TO OH +            ELOSS=18.1 EV
      DATA XION2/18.1,20.0,22.5,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,110.,125.,150.,175.,200.,250.,300.,400.,500.,600.,700.,800.,900.,1000./
      DATA YION2/0.0,.0145,.0493,.0847,.159,.220,.263,.298,.325,.355,.374,.388,.388,.392,.389,.384,.367,.358,.342,.315,.294,.253,.216,.191,.173,.159,.145,.132/
# IONISATION TO H +             ELOSS=18.72 EV
      DATA XION3/18.72,20.0,22.5,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,110.,125.,150.,175.,200.,250.,300.,400.,500.,600.,700.,800.,900.,1000./
      DATA YION3/.0,.0021,.0089,.0194,.0433,.0724,.1068,.1398,.169,.220,.255,.284,.301,.312,.317,.315,.309,.303,.291,.265,.229,.195,.165,.143,.124,.112,.0997,.0904/
# IONISATION TO O +             ELOSS=21.0 EV    
      DATA XION4/21.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,110.,125.,150.,175.,200.,250.,300.,400.,500.,600.,700.,800.,900.,1000./
      DATA YION4/0.0,.0022,.0037,.0069,.0132,.0206,.0273,.0383,.0456,.0538,.0587,.0594,.0619,.0617,.0596,.0576,.0550,.0481,.0418,.0332,.0282,.0237,.0203,.0181,.0165,.0145/
# IONISATION TO H2 +            ELOSS=23.0
      DATA XION5/23.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,110.,125.,150.,175.,200.,250.,300.,400.,500.,600.,700.,800.,900.,1000./ 
      DATA YION5/0.0,.00018,.00039,.00057,.00070,.00065,.00066,.00069,.00063,.00078,.00075,.00073,.00064,.00077,.00071,.00054,.00050,.00045,.00040,.00032,.00029,.00033,.00022,.00032,.00024/
# IONISATION TO (H + ,OH +)     ELOSS=35.4 EV  DOUBLE IONISATION
      DATA XION6/35.4,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,110.,125.,150.,175.,200.,250.,300.,400.,500.,600.,700.,800.,900.,1000./
      DATA YION6/0.0,.00045,.0013,.0034,.0091,.0145,.0188,.0216,.0244,.0254,.0268,.0266,.0258,.0244,.0226,.0211,.0182,.0155,.0137,.0124,.0114,.0105,.0095/
# IONISATION TO (H + ,O +)      ELOSS=45.0 EV  DOUBLE IONISATION
      DATA XION7/45.0,50.0,60.0,70.0,80.0,90.0,100.,110.,125.,150.,175.,200.,250.,300.,400.,500.,600.,700.,800.,900.,1000./
      DATA YION7/0.0,.0001,.0011,.0028,.0052,.0076,.0098,.0118,.0144,.0158,.0160,.0163,.0161,.0139,.0111,.0094,.0079,.0068,.0060,.0055,.0048/
# IONISATION TO O ++             ELOSS=70.0 EV  DOUBLE IONISATION
      DATA XION8/70.0,90.0,100.,110.,125.,150.,175.,200.,250.,300.,400.,500.,600.,700.,800.,900.,1000./
      DATA YION8/0.0,.00010,.00022,.00049,.00068,.00106,.00165,.00173,.00180,.00172,.00128,.00108,.00090,.00078,.00069,.00061,.00058/ 
# OXYGEN ATOM K-SHELL IONISATION X-SECTION 
      DATA XKSH/532.,541.,557.,574.,591.,609.,627.,646.,665.,685.,706.,727.,749.,793.,841.,891.,944.,1000.,1090.,1188.,1296.,1496.,1679.,1884.,2054.,2238.,2512.,2985.,3981.,5012.,7079.,1.00D4,1.50D4,2.05D4,2.51'%.3f' %.07D4,4.10D4,5.01D4,6.13D4,7.08D4,8.18D4,1.00D5,1.54D5,2.05D5,2.99D5,4.10D5,5.01D5,6.13D5,7.08D5,8.18D5,1.00D6,1.25D6,1.50D6,2.05'%.3f' %.07D6,4.10D6,5.01D6,6.13D6,7.08D6,8.18D6,1.00D7,1.26D7,1.50D7,2.05'%.3f' %.07D7,4.10D7,5.01D7,6.13D7,7.08D7,8.18D7,1.00D8,1.26D8,1.50D8,2.05'%.3f' %.07D8,4.10D8,5.01D8,6.13D8,7.08D8,8.18D8,1.00D9/
      DATA YKSH/0.00,3.31D-5,8.86D-5,1.42D-4,1.95D-4,2.45D-4,2.94D-4,3.41D-4,3.87D-4,4.31D-4,4.73D-4,5.14D-4,5.53D-4,6.27D-4,6.95D-4,7.56D-4,8.13D-4,8.63D-4,9.29D-4,9.84D-4,1.03D-3,1.08D-3,1.10D-3,1.11D-3,1.11D-3,1.10D-3,1.08D-3,1.03D-3,9.24D-4,8.27D-4,6.81D-4,5.49D-4,4.18D-4,3.35D-4,2.90D-4,2.50D-4,2.04D-4,1.77D-4,1.53D-4,1.39D-4,1.26D-4,1.11D-4,8.62D-5,7.45D-5,6.36D-5,5.75D-5,5.48D-5,5.29D-5,5.20D-5,5.13D-5,5.08D-5,5.08D-5,5.12D-5,5.24D-5,5.47D-5,5.68D-5,5.84D-5,6.00D-5,6.13D-5,6.26D-5,6.44D-5,6.65D-5,6.81D-5,7.11D-5,7.50D-5,7.78D-5,7.97D-5,8.17D-5,8.31D-5,8.45D-5,8.65D-5,8.87D-5,9.04D-5,9.36D-5,9.75D-5,1.00D-4,1.02D-4,1.04D-4,1.06D-4,1.07D-4,1.09D-4/
#
# ALL ATTACHMENT  SCALED BY 10(21)
#    H-  + OH     FEDOR DATA WITH THRESHOLD AT 5.6EV AND SCALED TO FIT 
#                   THE EXPERIMENTAL ATTACHMENT RATE 
      DATA XATT1/5.60,5.75,6.00,6.25,6.40,6.50,6.75,7.00,7.25,7.50,7.75,8.00,8.25,8.40,8.50,8.75,9.00,9.25,9.50,9.75,10.0,10.25,10.5,10.75,11.0,11.25,11.50,11.75,12.00,12.25,12.5,12.75,13.0,13.5,14.0,14.5,15.0,15.5/
      DATA YATT1/8.7,383.,2262.,5368.,5742.,5629.,4019.,2314.,1192.,655.,572.,727.,930.9,1018.,1001.,878.7,690.,435.,231.,127.,66.3,49.0,43.2,47.1,47.1,49.0,47.1,45.1,43.2,41.2,37.2,33.5,27.8,19.6,15.5,11.7,8.79,0.59/ 
# O-  + H  + H    FEDOR DATA SCALED TO MELTON AND CHRISTOPHOROU
      DATA XATT2/6.00,6.25,6.50,6.75,7.00,7.25,7.50,7.75,8.00,8.25,8.50,9.00,9.50,10.0,10.25,10.5,10.75,11.0,11.25,11.50,11.75,12.0,12.25,12.5,12.75,13.0,13.5,14.0,14.5,15.0/  
      DATA YATT2/2.50,7.20,17.8,35.0,59.0,45.0,16.8,11.5,22.1,46.5,80.0,142.,128.,113.,112.,141.,180.,213.,240.,260.,269.,268.,243.,221.,188.,151.,81.0,39.0,18.5,4.5/
#  OH-  +   H     FEDOR NORMALISED TO MELTON
      DATA XATT3/6.00,6.25,6.50,6.75,7.00,7.25,7.50,7.75,8.00,8.25,8.50,8.75,9.00,9.25,9.50,9.75,10.0,10.25,10.5,10.75,11.0,11.25,11.50,11.75,12.0,12.25,12.5,12.75/
      DATA YATT3/0.30,0.70,1.00,1.50,1.45,0.90,0.40,0.30,0.40,0.58,0.70,0.70,0.50,0.40,0.25,0.10,0.10,0.30,0.45,0.58,0.72,0.80,0.80,0.75,0.65,0.50,0.42,0.25/               
# TRIPLET EXCITATIONS
      DATA XTRP1/7.04,7.50,8.00,8.50,9.00,10.0,12.0,15.0,20.0,25.0,30.0/          
      DATA YTRP1/.0001,.075,0.15,0.24,0.33,0.23,0.16,0.14,0.11,.087,.070/       
      DATA XTRP2/9.10,10.0,11.0,12.0,15.0,20.0,25.0,30.0,40.0,50.0/   
      DATA YTRP2/.0001,0.06,0.12,0.16,0.18,0.15,.122,0.10,.075,.055/  
      DATA XTRP3/9.95,11.5,13.0,15.0,17.5,20.0,25.0,30.0,40.0,50.0/
      DATA YTRP3/.0001,0.10,.190,.235,.250,.235,.205,.170,.130,.100/
      DATA XTRP4/13.0,15.0,16.0,18.0,22.0,26.0,30.0,40.0,50.0/
      DATA YTRP4/.0002,.242,.420,.525,.557,.536,.504,.389,.284/
# BREMSSTRAHLUNG X-SECTION WITH CUT OFF UNITS 10**-24 CM**2
      DATA Z1T/11.3,6.18,2.80,1.54,.858,.407,.251,.176,.145,.150,.167,.178,.187,.193,.198,.205,.210,.218,.222,.228,.231,.233,.234,.235,.235/
      DATA Z8T/477.,294.,145.,81.6,45.8,21.2,12.2,7.69,5.22,4.76,4.84,4.99,5.10,5.20,5.27,5.38,5.46,5.58,5.65,5.72,5.77,5.80,5.81,5.83,5.84/
      DATA EBRM/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,4.E7,5.E7,6.E7,8.E7,1.E8/
# FOLLOWING ARE NULL COLLISIONS :
# OH PRODUCTION FROM HARB ET AL J.CHEM.PHYS. 115(2001)5507
      DATA XNUL1/6.60,10.0,15.0,20.0,30.0,50.0,75.0,100.,150.,200.,250.,300./
      DATA YNUL1/0.0,0.15,0.48,0.75,1.32,1.90,2.10,2.05,1.98,1.75,1.60,1.40/
# OH(A-X) 306-250 NM EMISSION  BEENAKKER ET AL CHEM.PHYS.6(1974)445
      DATA XNUL2/9.20,10.0,12.5,15.0,17.5,20.0,22.5,25.0,27.5,30.0,35.0,40.0,50.0,60.0,70.0,80.0,90.0,100.,120.,140.,170.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000./
      DATA YNUL2/0.00,.0187,.0733,.0919,.0932,.0911,.0845,.0797,.0767,.0745,.0698,.0663,.0603,.0566,.0535,.0508,.0483,.0464,.0432,.0400,.0364,.0339,.0297,.0266,.0240,.0224,.0206,.0196,.0179,.0158,.0149,.0131,.0121/
# H ALPHA 3-2   656.3 NM MOHLMANN AND DEHEER  CHEM.PHYS. 40(1979)157 
      DATA XNUL3/18.0,20.0,30.0,40.0,50.0,60.0,70.0,80.0,90.0,100.,150.,200.,300.,400.,500.,600.,700.,800.,900.,1000./
      DATA YNUL3/0.0,.00204,.0105,.0169,.0224,.0291,.0326,.0346,.0354,.0355,.0311,.0269,.0204,.0162,.0132,.0114,.0101,.00892,.00814,.00734/
# H ALPHA 2-1 121.6 NM ITIKAWA AND MASON J.PHYS.CHEM.REF.DATA 34 (2005)1
# MORGAN AND MENTAL USED BELOW 24 EV
      DATA XNUL4/15.4,15.6,24.0,25.0,37.5,50.0,62.5,75.0,87.5,100.,112.5,125.,137.5,150.,175.,200.,225.,250./
      DATA YNUL4/0.0,.0030,.0040,.00601,.0227,.0405,.059,.0727,.0823,.0845,.0839,.0829,.0812,.0799,.0764,.0733,.0698,.0665/
# ---------------------------------------------------------------------
#***********************************************************************
#                                 
      NAME='H2O  ANISOTRPIC     2017 '                              
#***********************************************************************
# --------------------------------------------------------------------  
#  EXPERIMENTAL DATA NOT ACCURATE IN WATER VAPOUR. ELECTRON SCATTERING  
#  DATA USED IN ANALYSIS REPRODUCES DRIFT VELOCITY AND DIFFUSION       
#  COEFFICIENTS TO AN  ACCURACY OF  2%.                               
# ---------------------------------------------------------------------
# BORN BETHE VALUES FOR IONISATION
      CONST=1.873884D-20
      EMASS2=1021997.804
      API=numpy.arccos(-1.00)
      A0=0.52917720859D-8
      RY=13.60569193
      BBCONST=16.0*API*A0*A0*RY*RY/EMASS2
#
# FIT OF IONISATION OSCILLATOR STRENGTH TO RIEKE AND PREJECHAL
      AM2=2.895
      C=30.7
# AVERAGE AUGER EMISSION FROM OXYGEN KSHELL
      AUGK=2.0
#
      AMPROT=0.98
      NION=9 
      NATT=3
      NIN=248
      NASIZE=20000
      NBREM=25
      NNULL=4
      IONMODEL=0
      NRTANG=145
# 
      DO 11 J=1,NIN
      IZBR[J]=0
   11 CONTINUE
      IZBR(NIN+1)=8
      IZBR(NIN+2)=1
#
# USE  OKHRIMOVSKKY TYPE ANGULAR DISTRIBUTION   
      DO 1 J=1,6
    1 KEL[J]=2
# USE OKRIMOVSKKY
      DO 2 J=1,NIN
    2 KIN[J]=2
#     
      NELA=159
      NMMT=156
      NEPS=156        
      NVIB1=17                                                          
      NVIB2=18
      NVIB3=12                                                          
      NIONC=55
      NION1=31
      NION2=28
      NION3=28
      NION4=26
      NION5=25
      NION6=23
      NION7=21
      NION8=17
      NKSH=81                                                         
      NATT1=38 
      NATT2=30
      NATT3=28                             
      NTRP1=11                                                          
      NTRP2=10                                                          
      NTRP3=10 
      NTRP4=9  
      NUL1=12
      NUL2=33
      NUL3=20
      NUL4=18
# SCALING OF NULL COLLISIONS
      SCLN[1]=1.0
      SCLN(2)=1.0
      SCLN(3)=1.0
      SCLN(4)=1.0
#
      E[1]=0.0                                                          
      E(2)=2.0*EMASS/(18.01528*AMU)                                     
      E(3)=12.617                                                      
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
# 
      EION[1]=12.617
      EION(2)=18.1
      EION(3)=18.72
      EION(4)=21.0
      EION(5)=23.0
      EION(6)=35.4
      EION(7)=45.0
      EION(8)=70.0
      EION(9)=532.0
#
#-----------------------------------------------------------------      
# DBA IS DIPOLE MOMENT 
# DRAT IS RATIO OF MOMENTUM TRANSFER TO TOTAL X-SECTION FOR DIPOLE      
# -----------------------------------------------------------------
      GPARA=1.0
      GORTHO=3.0
      DBA=0.728 
      DRAT=0.07  
      A0=0.5291772083D-8
      RY=13.60569172
      DBK=8.37758*RY*(DBA*A0)**2
#------------------------------------------------------------------      
# CALCULATE POPULATION DENSITIES OF ROTATIONAL LEVELS      
      DO 3 J=1,99,2
    3 PJ[J]=GPARA*(2.0*AJL[J]+1.0)*math.exp(-ELEV[J]*1.D-3/AKT)
      DO 4 J=2,100,2
    4 PJ[J]=GORTHO*(2.0*AJL[J]+1.0)*math.exp(-ELEV[J]*1.D-3/AKT)
      RSUM=0.0
      DO 5 J=1,100
    5 RSUM=RSUM+PJ[J]
      DO 6 J=1,100
    6 PJ[J]=PJ[J]/RSUM   
      DO 7 J=1,105  
      EIN(2*J-1)=EROT[J]*1.D-3
    7 EIN(2*J)=-EROT[J]*1.D-3
#
      EIN(211)=-0.1977     
      EIN(212)=0.1977                                                   
      EIN(213)=0.4535                                                   
      EIN(214)=0.919                                                    
      EIN(215)=7.04                                                 
      EIN(216)=6.8425
      EIN(217)=7.2675
      EIN(218)=7.7725
      EIN(219)=8.3575
      EIN(220)=9.1
      EIN(221)=8.91
      EIN(222)=9.43
      EIN(223)=9.95
      EIN(224)=10.47
      EIN(225)=9.95
      EIN(226)=9.994
      EIN(227)=10.172
      EIN(228)=10.39
      EIN(229)=10.575
      EIN(230)=10.78
      EIN(231)=11.01
      EIN(232)=11.122
      EIN(233)=11.377
      EIN(234)=11.525
      EIN(235)=11.75
      EIN(236)=11.94
      EIN(237)=12.08
      EIN(238)=12.24
      EIN(239)=12.34
      EIN(240)=12.45
      EIN(241)=13.0
      EIN(242)=13.117
      EIN(243)=14.117
      EIN(244)=15.117
      EIN(245)=16.117
      EIN(246)=17.117
      EIN(247)=18.438
      EIN(248)=20.316 
#  OPAL BEATY
#     SCLOBY=0.8
      DO 8 J=1,NION
#      EOBY[J]=EION[J]*SCLOBY
       EOBY[J]=EION[1]*0.93  
    8 CONTINUE
#
      DO 9 JK=1,NION
      LEGAS(JK)=0
      ISHELL(JK)=0
      NC0(JK)=0
      EC0(JK)=0.0
      WKLM(JK)=0.0
      EFL(JK)=0.0
      NG1(JK)=0
      EG1(JK)=0.0
      NG2(JK)=0
      EG2(JK)=0.0
    9 CONTINUE
# DOUBLE CHARGED STATES
      NC0(6)=1
      EC0(6)=6.0
      NC0(7)=1
      EC0(7)=6.0
      NC0(8)=1
      EC0(8)=6.0
# FLUORESCENCE DATA
      LEGAS(9)=1
      ISHELL(9)=1
      NC0(9)=3
      EC0(9)=485.
      WKLM(9)=0.0069
      EFL(9)=518.
      NG1(9)=1
      EG1(9)=480.
      NG2(9)=2
      EG2(9)=5.0
# OFFSET ENERGY FOR IONISATION ELECTRON ANGULAR DISTRIBUTION
      DO 12 J=1,NION
      DO 10 I=1,NASIZE
      if(EG[I]:
 > EION[J]) :
       IOFFION[J]=I-1
       GO TO 12
      # endif
   10 CONTINUE
   12 CONTINUE
# OFFSET ENERGY FOR EXCITATION ANGULAR DISTRIBUTION
      DO 14 NL=1,NIN
      DO 13 I=1,NASIZE
      if(EG[I]:
 > abs(EIN(NL))) :
       IOFFN(NL)=I-1
       GO TO 14
      # endif
   13 CONTINUE
   14 CONTINUE
#
#**********************************************************************
# ENTER PENNING TRANSFER FRACTION FOR EACH LEVEL
# SET PENNING TRANSFER FRACTION TO ZERO FOR LOW ENERGY LEVELS
      DO 21 K=1,NIN
      DO 21 L=1,3
       PENFRA[1,K]=0.0
   21 CONTINUE
#---------------------------------------
# PENNING TRANSFER FRACTION FOR LEVELS ABOVE 6.0EV
      DO 22 K=215,NIN
      PENFRA[1,K]=0.0
# PENNING TRANSFER DISTANCE IN MICRONS
      PENFRA[2,K]=1.0
# PENNING TRANSFER TIME IN PICOSECONDS
      PENFRA[3,K]=1.0
      if(IPEN == 0):
 GO TO 22
      WRITE(6,999) NAME,EIN[K],PENFRA[1,K],PENFRA[2,K],PENFRA[3,K]
  999 print(' GAS = ',A25,' ENERGY LEVEL = ','%.4f' %,' EV.',/,' PENNING PROBABILITY = ','%.3f' % ,' ABS.LENGTH = ',F7.2,' DECAY TIME = ',F7.1,/)
   22 CONTINUE
#**********************************************************************
#
      SCRPT[1]='                                                  '
      SCRPT(2)=' ELASTIC ANISOTROPIC     H2O                      '
      SCRPT(3)=' IONISATION   H2O+                  ELOSS= 12.617 '
      SCRPT(4)=' DISSOC ION    OH+                  ELOSS= 18.1   '
      SCRPT(5)=' DISSOC ION     H+                  ELOSS= 18.72  '
      SCRPT(6)=' DISSOC ION     O+                  ELOSS= 21.0   '
      SCRPT(7)=' DISSOC ION    H2+                  ELOSS= 23.0   '
      SCRPT(8)=' DISSOC ION     H+ + OH+            ELOSS= 35.4   '
      SCRPT(9)=' DISSOC ION     H+ + O+             ELOSS= 45.0   '
      SCRPT(10)=' DISSOC ION     O++                 ELOSS= 70.0   '
      SCRPT(11)=' IONISATION  O K-SHELL              ELOSS=532.0   ' 
      SCRPT(12)=' ATTACHMENT  H-                                   '
      SCRPT(13)=' ATTACHMENT  O-                                   '
      SCRPT(14)=' ATTACHMENT  OH-                                  '
      SCRPT(15)='                                                  ' 
      SCRPT(16)='                                                  ' 
      SCRPT(17)=' ROTATION   101--110               ELOSS= 0.002303'
      SCRPT(18)=' ROTATION   110--101               ELOSS=-0.002303'
      SCRPT(19)=' ROTATION   211--220               ELOSS= 0.005082'
      SCRPT(20)=' ROTATION   220--211               ELOSS=-0.005082'
      SCRPT(21)=' ROTATION   321--330               ELOSS= 0.009083'
      SCRPT(22)=' ROTATION   330--321               ELOSS=-0.009083'
      SCRPT(23)=' ROTATION   431--440               ELOSS= 0.01293 '
      SCRPT(24)=' ROTATION   440--431               ELOSS=-0.01293 '
      SCRPT(25)=' ROTATION   541--550               ELOSS= 0.01633 '
      SCRPT(26)=' ROTATION   550--541               ELOSS=-0.01633 '
      SCRPT(27)=' ROTATION   202--211               ELOSS= 0.00311 '
      SCRPT(28)=' ROTATION   211--202               ELOSS=-0.00311 '
      SCRPT(29)=' ROTATION   312--321               ELOSS= 0.004809'
      SCRPT(30)=' ROTATION   321--312               ELOSS=-0.004809'
      SCRPT(31)=' ROTATION   422--431               ELOSS= 0.008439'
      SCRPT(32)=' ROTATION   431--422               ELOSS=-0.008439'
      SCRPT(33)=' ROTATION   532--541               ELOSS= 0.01259 '
      SCRPT(34)=' ROTATION   541--532               ELOSS=-0.01259 '
      SCRPT(35)=' ROTATION   303--312               ELOSS= 0.004538'
      SCRPT(36)=' ROTATION   312--303               ELOSS=-0.004538'
      SCRPT(37)=' ROTATION   413--422               ELOSS= 0.004994'
      SCRPT(38)=' ROTATION   422--413               ELOSS=-0.004994'
      SCRPT(39)=' ROTATION   523--532               ELOSS= 0.007724'
      SCRPT(40)=' ROTATION   532--523               ELOSS=-0.007724'
      SCRPT(41)=' ROTATION   404--413               ELOSS= 0.006626'
      SCRPT(42)=' ROTATION   413--404               ELOSS=-0.006626'
      SCRPT(43)=' ROTATION   514--523               ELOSS= 0.005834'
      SCRPT(44)=' ROTATION   523--514               ELOSS=-0.005834'
      SCRPT(45)=' ROTATION   505--514               ELOSS= 0.009188'
      SCRPT(46)=' ROTATION   514--505               ELOSS=-0.009188'
      SCRPT(47)=' ROTATION   615--624               ELOSS= 0.007423'
      SCRPT(48)=' ROTATION   624--615               ELOSS=-0.007423'
      SCRPT(49)=' ROTATION   725--734               ELOSS= 0.007433'
      SCRPT(50)=' ROTATION   734--725               ELOSS=-0.007433'
      SCRPT(51)=' ROTATION   606--615               ELOSS= 0.01193 '
      SCRPT(52)=' ROTATION   615--606               ELOSS=-0.01193 '
      SCRPT(53)=' ROTATION   716--725               ELOSS= 0.009695'
      SCRPT(54)=' ROTATION   725--716               ELOSS=-0.009695'
      SCRPT(55)=' ROTATION   707--716               ELOSS= 0.01463 '
      SCRPT(56)=' ROTATION   716--707               ELOSS=-0.01463 '
      SCRPT(57)=' ROTATION   212--221               ELOSS= 0.006869'
      SCRPT(58)=' ROTATION   221--212               ELOSS=-0.006869'
      SCRPT(59)=' ROTATION   322--331               ELOSS= 0.009785'
      SCRPT(60)=' ROTATION   331--322               ELOSS=-0.009785'
      SCRPT(61)=' ROTATION   432--441               ELOSS= 0.01309 '
      SCRPT(62)=' ROTATION   441--432               ELOSS=-0.01309 '
      SCRPT(63)=' ROTATION   313--322               ELOSS= 0.007938'
      SCRPT(64)=' ROTATION   322--313               ELOSS=-0.007938'
      SCRPT(65)=' ROTATION   423--432               ELOSS= 0.01019 '
      SCRPT(66)=' ROTATION   432--423               ELOSS=-0.01019 '
      SCRPT(67)=' ROTATION   533--542               ELOSS= 0.01316 '
      SCRPT(68)=' ROTATION   542--533               ELOSS=-0.01316 '
      SCRPT(69)=' ROTATION   643--652               ELOSS= 0.01635 '
      SCRPT(70)=' ROTATION   652--643               ELOSS=-0.01635 '
      SCRPT(71)=' ROTATION   414--423               ELOSS= 0.009364'
      SCRPT(72)=' ROTATION   423--414               ELOSS=-0.009364'
      SCRPT(73)=' ROTATION   524--533               ELOSS= 0.01088 '
      SCRPT(74)=' ROTATION   533--524               ELOSS=-0.01088 '
      SCRPT(75)=' ROTATION   634--643               ELOSS= 0.01336 '
      SCRPT(76)=' ROTATION   643--634               ELOSS=-0.01336 '
      SCRPT(77)=' ROTATION   515--524               ELOSS= 0.01111 '
      SCRPT(78)=' ROTATION   524--515               ELOSS=-0.01111 '
      SCRPT(79)=' ROTATION   625--634               ELOSS= 0.01191 '
      SCRPT(80)=' ROTATION   634--625               ELOSS=-0.01191 '
      SCRPT(81)=' ROTATION   616--625               ELOSS= 0.01310 '
      SCRPT(82)=' ROTATION   625--616               ELOSS=-0.01310 '
      SCRPT(83)=' ROTATION   818--827               ELOSS= 0.01754 '
      SCRPT(84)=' ROTATION   827--818               ELOSS=-0.01754 '
      SCRPT(85)=' ROTATION   000--111               ELOSS= 0.004604'
      SCRPT(86)=' ROTATION   111--000               ELOSS=-0.004604'
      SCRPT(87)=' ROTATION   101--212               ELOSS= 0.006906'
      SCRPT(88)=' ROTATION   212--101               ELOSS=-0.006906'
      SCRPT(89)=' ROTATION   202--313               ELOSS= 0.008950'
      SCRPT(90)=' ROTATION   313--202               ELOSS=-0.008950'
      SCRPT(91)=' ROTATION   303--414               ELOSS= 0.01092 '
      SCRPT(92)=' ROTATION   414--303               ELOSS=-0.01092 '
      SCRPT(93)=' ROTATION   404--515               ELOSS= 0.01297 '
      SCRPT(94)=' ROTATION   515--404               ELOSS=-0.01297 '
      SCRPT(95)=' ROTATION   505--616               ELOSS= 0.01511 '
      SCRPT(96)=' ROTATION   616--505               ELOSS=-0.01511 '
      SCRPT(97)=' ROTATION   606--717               ELOSS= 0.01733 '
      SCRPT(98)=' ROTATION   717--606               ELOSS=-0.01733 '
      SCRPT(99)=' ROTATION   707--818               ELOSS= 0.01958 '
      SCRPT(100)=' ROTATION   818--707               ELOSS=-0.01958 '
      SCRPT(101)=' ROTATION   808--919               ELOSS= 0.02184 '
      SCRPT(102)=' ROTATION   919--808               ELOSS=-0.02184 '
      SCRPT(103)=' ROTATION   110--221               ELOSS= 0.01147 '
      SCRPT(104)=' ROTATION   221--110               ELOSS=-0.01147 '
      SCRPT(105)=' ROTATION   211--322               ELOSS= 0.01378 '
      SCRPT(106)=' ROTATION   322--211               ELOSS=-0.01378 '
      SCRPT(107)=' ROTATION   312--423               ELOSS= 0.01575 '
      SCRPT(108)=' ROTATION   423--312               ELOSS=-0.01575 '
      SCRPT(109)=' ROTATION   413--524               ELOSS= 0.01745 '
      SCRPT(110)=' ROTATION   524--413               ELOSS=-0.01745 '
      SCRPT(111)=' ROTATION   514--625               ELOSS= 0.01903 '
      SCRPT(112)=' ROTATION   625--514               ELOSS=-0.01903 '
      SCRPT(113)=' ROTATION   615--726               ELOSS= 0.02067 '
      SCRPT(114)=' ROTATION   726--615               ELOSS=-0.02067 '
      SCRPT(115)=' ROTATION   716--827               ELOSS= 0.02249 '
      SCRPT(116)=' ROTATION   827--716               ELOSS=-0.02249 '
      SCRPT(117)=' ROTATION   220--331               ELOSS= 0.01848 '
      SCRPT(118)=' ROTATION   331--220               ELOSS=-0.01848 '
      SCRPT(119)=' ROTATION   321--432               ELOSS= 0.02112 '
      SCRPT(120)=' ROTATION   432--321               ELOSS=-0.02112 '
      SCRPT(121)=' ROTATION   422--533               ELOSS= 0.02333 '
      SCRPT(122)=' ROTATION   533--422               ELOSS=-0.02333 '
      SCRPT(123)=' ROTATION   523--634               ELOSS= 0.02510 '
      SCRPT(124)=' ROTATION   634--523               ELOSS=-0.02510 '
      SCRPT(125)=' ROTATION   624--735               ELOSS= 0.02652 '
      SCRPT(126)=' ROTATION   735--624               ELOSS=-0.02652 '
      SCRPT(127)=' ROTATION   725--836               ELOSS= 0.02774 '
      SCRPT(128)=' ROTATION   836--725               ELOSS=-0.02774 '
      SCRPT(129)=' ROTATION   330--441               ELOSS= 0.02513 '
      SCRPT(130)=' ROTATION   441--330               ELOSS=-0.02513 '
      SCRPT(131)=' ROTATION   431--542               ELOSS= 0.02805 '
      SCRPT(132)=' ROTATION   542--431               ELOSS=-0.02805 '
      SCRPT(133)=' ROTATION   532--643               ELOSS= 0.03074 '
      SCRPT(134)=' ROTATION   643--532               ELOSS=-0.03074 '
      SCRPT(135)=' ROTATION   633--744               ELOSS= 0.03300 '
      SCRPT(136)=' ROTATION   744--633               ELOSS=-0.03300 '
      SCRPT(137)=' ROTATION   734--845               ELOSS= 0.03476 '
      SCRPT(138)=' ROTATION   845--734               ELOSS=-0.03476 '
      SCRPT(139)=' ROTATION   440--551               ELOSS= 0.03148 '
      SCRPT(140)=' ROTATION   551--440               ELOSS=-0.03148 '
      SCRPT(141)=' ROTATION   541--652               ELOSS= 0.03450 '
      SCRPT(142)=' ROTATION   652--541               ELOSS=-0.03450 '
      SCRPT(143)=' ROTATION   642--753               ELOSS= 0.03743 '
      SCRPT(144)=' ROTATION   753--642               ELOSS=-0.03743 '
      SCRPT(145)=' ROTATION   743--854               ELOSS= 0.04016 '
      SCRPT(146)=' ROTATION   854--743               ELOSS=-0.04016 '
      SCRPT(147)=' ROTATION   550--661               ELOSS= 0.03757 '
      SCRPT(148)=' ROTATION   661--550               ELOSS=-0.03757 '
      SCRPT(149)=' ROTATION   651--762               ELOSS= 0.04061 '
      SCRPT(150)=' ROTATION   762--651               ELOSS=-0.04061 '
      SCRPT(151)=' ROTATION   752--863               ELOSS= 0.04361 '
      SCRPT(152)=' ROTATION   863--752               ELOSS=-0.04361 '
      SCRPT(153)=' ROTATION   111--220               ELOSS= 0.01228 '
      SCRPT(154)=' ROTATION   220--111               ELOSS=-0.01228 '
      SCRPT(155)=' ROTATION   221--330               ELOSS= 0.01866 '
      SCRPT(156)=' ROTATION   330--221               ELOSS=-0.01866 '
      SCRPT(157)=' ROTATION   331--440               ELOSS= 0.02516 '
      SCRPT(158)=' ROTATION   440--331               ELOSS=-0.02516 '
      SCRPT(159)=' ROTATION   441--550               ELOSS= 0.03149 '
      SCRPT(160)=' ROTATION   550--441               ELOSS=-0.03149 '
      SCRPT(161)=' ROTATION   551--660               ELOSS= 0.03757 '
      SCRPT(162)=' ROTATION   660--551               ELOSS=-0.03757 '
      SCRPT(163)=' ROTATION   661--770               ELOSS= 0.04336 '
      SCRPT(164)=' ROTATION   770--661               ELOSS=-0.04336 '
      SCRPT(165)=' ROTATION   212--321               ELOSS= 0.01645 '
      SCRPT(166)=' ROTATION   321--212               ELOSS=-0.01645 '
      SCRPT(167)=' ROTATION   322--431               ELOSS= 0.02201 '
      SCRPT(168)=' ROTATION   431--322               ELOSS=-0.02201 '
      SCRPT(169)=' ROTATION   432--541               ELOSS= 0.02825 '
      SCRPT(170)=' ROTATION   541--432               ELOSS=-0.02825 '
      SCRPT(171)=' ROTATION   542--651               ELOSS= 0.03453 '
      SCRPT(172)=' ROTATION   651--542               ELOSS=-0.03453 '
      SCRPT(173)=' ROTATION   652--761               ELOSS= 0.04062 '
      SCRPT(174)=' ROTATION   761--652               ELOSS=-0.04062 '
      SCRPT(175)=' ROTATION   313--422               ELOSS= 0.02151 '
      SCRPT(176)=' ROTATION   422--313               ELOSS=-0.02151 '
      SCRPT(177)=' ROTATION   423--532               ELOSS= 0.02584 '
      SCRPT(178)=' ROTATION   532--423               ELOSS=-0.02584 '
      SCRPT(179)=' ROTATION   533--642               ELOSS= 0.03147 '
      SCRPT(180)=' ROTATION   642--533               ELOSS=-0.03147 '
      SCRPT(181)=' ROTATION   643--752               ELOSS= 0.03758 '
      SCRPT(182)=' ROTATION   752--643               ELOSS=-0.03758 '
      SCRPT(183)=' ROTATION   414--523               ELOSS= 0.02748 '
      SCRPT(184)=' ROTATION   523--414               ELOSS=-0.02748 '
      SCRPT(185)=' ROTATION   524--633               ELOSS= 0.03042 '
      SCRPT(186)=' ROTATION   633--524               ELOSS=-0.03042 '
      SCRPT(187)=' ROTATION   634--743               ELOSS= 0.03500 '
      SCRPT(188)=' ROTATION   743--634               ELOSS=-0.03500 '
      SCRPT(189)=' ROTATION   515--624               ELOSS= 0.03424 '
      SCRPT(190)=' ROTATION   624--515               ELOSS=-0.03424 '
      SCRPT(191)=' ROTATION   625--734               ELOSS= 0.03589 '
      SCRPT(192)=' ROTATION   734--625               ELOSS=-0.03589 '
      SCRPT(193)=' ROTATION   616--725               ELOSS= 0.04155 '
      SCRPT(194)=' ROTATION   725--616               ELOSS=-0.04155 '
      SCRPT(195)=' ROTATION   111--202               ELOSS= 0.004086'
      SCRPT(196)=' ROTATION   202--111               ELOSS=-0.004086'
      SCRPT(197)=' ROTATION   212--303               ELOSS= 0.007100'
      SCRPT(198)=' ROTATION   303--212               ELOSS=-0.007100'
      SCRPT(199)=' ROTATION   313--404               ELOSS= 0.009891'
      SCRPT(200)=' ROTATION   404--313               ELOSS=-0.009891'
      SCRPT(201)=' ROTATION   414--505               ELOSS= 0.01246 '
      SCRPT(202)=' ROTATION   505--414               ELOSS=-0.01246 '
      SCRPT(203)=' ROTATION   515--606               ELOSS= 0.01489 '
      SCRPT(204)=' ROTATION   606--515               ELOSS=-0.01489 '
      SCRPT(205)=' ROTATION   616--707               ELOSS= 0.01723 '
      SCRPT(206)=' ROTATION   707--616               ELOSS=-0.01723 '
      SCRPT(207)=' ROTATION   717--808               ELOSS= 0.01954 '
      SCRPT(208)=' ROTATION   808--717               ELOSS=-0.01954 '
      SCRPT(209)=' ROTATION   818--909               ELOSS= 0.02182 '
      SCRPT(210)=' ROTATION   909--818               ELOSS=-0.02182 '
      SCRPT(211)=' ROTATION   221--312               ELOSS= 0.004769'
      SCRPT(212)=' ROTATION   312--221               ELOSS=-0.004769'
      SCRPT(213)=' ROTATION   322--413               ELOSS= 0.008579'
      SCRPT(214)=' ROTATION   413--322               ELOSS=-0.008579'
      SCRPT(215)=' ROTATION   423--514               ELOSS= 0.01229 '
      SCRPT(216)=' ROTATION   514--423               ELOSS=-0.01229 '
      SCRPT(217)=' ROTATION   524--615               ELOSS= 0.01571 '
      SCRPT(218)=' ROTATION   615--524               ELOSS=-0.01571 '
      SCRPT(219)=' ROTATION   625--716               ELOSS= 0.01876 '
      SCRPT(220)=' ROTATION   716--625               ELOSS=-0.01876 '
      SCRPT(221)=' ROTATION   726--817               ELOSS= 0.02148 '
      SCRPT(222)=' ROTATION   817--726               ELOSS=-0.02148 '
      SCRPT(223)=' ROTATION   827--918               ELOSS= 0.02399 '
      SCRPT(224)=' ROTATION   918--827               ELOSS=-0.02399 '
      SCRPT(225)=' ROTATION   634--725               ELOSS= 0.01654 '
      SCRPT(226)=' ROTATION   725--634               ELOSS=-0.01654 '
      SCRPT(227)=' VIBRATION V2 B# end SUPERELASTIC    ELOSS=-0.1977  '
      SCRPT(228)=' VIBRATION  V2 B# end                ELOSS= 0.1977  '
      SCRPT(229)=' VIBRATION  V1+V3 STRETCH          ELOSS= 0.4535  '
      SCRPT(230)=' VIBRATION  HARMONICS NV1+NV2+NV3  ELOSS= 0.919   '
      SCRPT(231)=' TRIPLET 3B1                       ELOSS=  7.04   '
      SCRPT(232)=' DIPOLE  1B1 (PART1)  F=0.003437   ELOSS=  6.8425 '
      SCRPT(233)=' DIPOLE  1B1 (PART2)  F=0.017166   ELOSS=  7.2675 '
      SCRPT(234)=' DIPOLE  1B1 (PART3)  F=0.019703   ELOSS=  7.7725 '
      SCRPT(235)=' DIPOLE  1B1 (PART4)  F=0.005486   ELOSS=  8.3575 '
      SCRPT(236)=' TRIPLET SUM 3A2 + 1A2 + 3A1       ELOSS=  9.1    '
      SCRPT(237)=' DIPOLE  1A1 (PART1)  F=0.006609   ELOSS=  8.91   '
      SCRPT(238)=' DIPOLE  1A1 (PART2)  F=0.030025   ELOSS=  9.43   '
      SCRPT(239)=' DIPOLE  1A1 (PART3)  F=0.030025   ELOSS=  9.95   '
      SCRPT(240)=' DIPOLE  1A1 (PART4)  F=0.006609   ELOSS= 10.47   '
      SCRPT(241)=' TRIPLET 3B1                       ELOSS=  9.95   '
      SCRPT(242)=' DIPOLE  1B1 (3pa1)   F=0.005200   ELOSS=  9.994  '
      SCRPT(243)=' DIPOLE  1A1 (3pb1)   F=0.014000   ELOSS= 10.172  '
      SCRPT(244)=' DIPOLE  3pa1+3pb1    F=0.010700   ELOSS= 10.39   '
      SCRPT(245)=' DIPOLE  3pa1+3pb1    F=0.009200   ELOSS= 10.575  '
      SCRPT(246)=' DIPOLE 3pa1+3pb1     F=0.006900   ELOSS= 10.78   '
      SCRPT(247)=' DIPOLE 3da1+3sa2+3db1F=0.021800   ELOSS= 11.01   '
      SCRPT(248)=' DIPOLE 3da1          F=0.023900   ELOSS= 11.122  '
      SCRPT(249)=' DIPOLE 4pa1          F=0.013991   ELOSS= 11.377  '
      SCRPT(250)=' DIPOLE 4pb1          F=0.009905   ELOSS= 11.525  '
      SCRPT(251)=' DIPOLE 4da1+4db1     F=0.023551   ELOSS= 11.75   '
      SCRPT(252)=' DIPOLE 5p            F=0.007967   ELOSS= 11.94   '
      SCRPT(253)=' DIPOLE 5d            F=0.018315   ELOSS= 12.08   '
      SCRPT(254)=' DIPOLE 6d            F=0.011109   ELOSS= 12.24   '
      SCRPT(255)=' DIPOLE 7d            F=0.008591   ELOSS= 12.34   '
      SCRPT(256)=' DIPOLE 8d+9d+10d     F=0.028137   ELOSS= 12.50   '
      SCRPT(257)=' SUM HIGHER TRIPLETS               ELOSS= 13.0    '
      SCRPT(258)=' DIPOLE NEUTRAL DISS  F=0.119100   ELOSS= 13.117  '
      SCRPT(259)=' DIPOLE NEUTRAL DISS  F=0.097947   ELOSS= 14.117  '
      SCRPT(260)=' DIPOLE NEUTRAL DISS  F=0.039540   ELOSS= 15.117  '
      SCRPT(261)=' DIPOLE NEUTRAL DISS  F=0.042191   ELOSS= 16.117  '
      SCRPT(262)=' DIPOLE NEUTRAL DISS  F=0.059428   ELOSS= 17.117  '
      SCRPT(263)=' DIPOLE NEUTRAL DISS  F=0.077707   ELOSS= 18.438  '
      SCRPT(264)=' DIPOLE NEUTRAL DISS  F=0.013138   ELOSS= 20.316  '
      SCRPT(265)=' BREMSSTRAHLUNG FROM OXYGEN ATOM                  '
      SCRPT(266)=' BREMSSTRAHLUNG FROM HYDROGEN ATOMS               '
#  NULL COLLISIONS
      SCRPTN[1]=' H2O: OH(X)  GROUND STATE DISSOCIATION            '
      SCRPTN(2)=' H2O: OH(A-X) 306-350 NM EMISSION                 '
      SCRPTN(3)=' H2O: H ALPHA 3-2 (BALMER)  656.3 NM. EMISSION    '
      SCRPTN(4)=' H2O: H ALPHA 2-1 (LYMAN)   121.6 NM. EMISSION    '
# CALC POPULATION OF LOW ENERGY VIBRATIONAL STATE
      APOPV1=math.exp(EIN(211)/AKT)
      APOPGS=1.0
      APOPSUM=APOPGS+APOPV1
      APOPV1=APOPV1/APOPSUM
# KEEP APOPGS=1 TO ALLOW FOR EXCITATIONS FROM UPPER STATE   
#                                          
      DO 900 I=1,NSTEP                                               
      EN=EG[I]
      GAMMA1=(EMASS2+2.00*EN)/EMASS2
      GAMMA2=GAMMA1*GAMMA1
      BETA=math.sqrt(1.00-1.00/GAMMA2)
      BETA2=BETA*BETA
#
# ELASTIC
      if(EN <= XEL[1]:
) :
       QELA=YEL[1]*1.D-16
       GO TO 32
      # endif                                             
      DO 30 J=2,NELA                                                    
      if(EN <= XEL[J]:
) GO TO 31                                         
   30 CONTINUE                                                          
      J=NELA    
   31 Y1=math.log(YEL[J])
      Y2=math.log(YEL(J-1)) 
      X1=math.log(XEL[J])
      X2=math.log(XEL(J-1))                                                 
      A=(Y1-Y2)/(X1-X2)                                                 
      B=(X2*Y1-X1*Y2)/(X2-X1)                                           
      QELA=math.exp(A*math.log(EN)+B)*1.0D-16    
# MOMENTUM TRANSFER ELASTIC
   32 if(EN <= XMT[1]) :
       QMMT=YMT[1]*1.D-16
       GO TO 35
      # endif
      DO 33 J=2,NMMT
      if(EN <= XMT[J]:
) GO TO 34
   33 CONTINUE
      J=NMMT
   34 Y1=math.log(YMT[J])
      Y2=math.log(YMT(J-1))
      X1=math.log(XMT[J])
      X2=math.log(XMT(J-1))  
      A=(Y1-Y2)/(X1-X2)
      B=(X2*Y1-X1*Y2)/(X2-X1)
      QMMT=math.exp(A*math.log(EN)+B)*1.D-16
# ANGULAR DISTRIBUTION def OKHRIMOVSKY
   35 if(EN <= XEPS[1]) :
       EPS=YEPS[1]
       GO TO 38
      # endif
      DO 36 J=2,NEPS
      if(EN <= XEPS[J]:
) GO TO 37
   36 CONTINUE
      J=NEPS
   37 A=(YEPS[J]-YEPS(J-1))/(XEPS[J]-XEPS(J-1))
      B=(XEPS(J-1)*YEPS[J]-XEPS[J]*YEPS(J-1))/(XEPS(J-1)-XEPS[J])
      EPS=A*EN+B
# CONVERT TO  (1.0-EPS)
   38 EPS=1.0-EPS
# USE ELASTIC                  
      Q(2,I)=QELA         
      PEQEL(2,I)=EPS
#      
# IONISATION CALCULATION                                                                 
   40 DO 41 J=1,NION
      PEQION[J][I]=0.0
   41 QION[J][I]=0.0
# IF ENERGY LESS THAN 5KEV CALCULATE TOTAL COUNTING AND GROSS IONISATION
      if (EN > 5000.):
 GO TO 44 
      if(EN <= EION[1]:
) GO TO 90
      DO 42 J=2,NIONC
      if(EN <= XION[J]:
) GO TO 43
   42 CONTINUE
      J=NIONC
   43 A=(YIONC[J]-YIONC(J-1))/(XION[J]-XION(J-1))
      B=(XION(J-1)*YIONC[J]-XION[J]*YIONC(J-1))/(XION(J-1)-XION[J])
      QCOUNT=(A*EN+B)*1.D-16
      A=(YIONG[J]-YIONG(J-1))/(XION[J]-XION(J-1))
      B=(XION(J-1)*YIONG[J]-XION[J]*YIONG(J-1))/(XION(J-1)-XION[J])
      QGROSS=(A*EN+B)*1.D-16
      GO TO 45
# CALCULATE TOTAL COUNTING AND GROSS IONISATION FROM BORN BETHE FIT   
   44 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QCOUNT=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)
      QGROSS=QCOUNT*1.022
   45 CONTINUE
#
# IONISATION TO H2O+
      if(EN > XION1(NION1):
) GO TO 52
      if(EN <= XION1[1]:
) GO TO 90
      DO 50 J=2,NION1
      if(EN <= XION1[J]:
) GO TO 51
   50 CONTINUE
      J=NION1
   51 A=(YION1[J]-YION1(J-1))/(XION1[J]-XION1(J-1))
      B=(XION1(J-1)*YION1[J]-XION1[J]*YION1(J-1))/(XION1(J-1)-XION1[J])
      QION(1,I)=(A*EN+B)*1.D-16
      GO TO 53
   52 QION(1,I)=QCOUNT*0.62996
# IONISATION TO OH+
   53 if(EN > XION2(NION2)) GO TO 56
      if(EN <= XION2[1]:
) GO TO 90
      DO 54 J=2,NION2
      if(EN <= XION2[J]:
) GO TO 55
   54 CONTINUE
      J=NION2
   55 A=(YION2[J]-YION2(J-1))/(XION2[J]-XION2(J-1))
      B=(XION2(J-1)*YION2[J]-XION2[J]*YION2(J-1))/(XION2(J-1)-XION2[J])
      QION(2,I)=(A*EN+B)*1.D-16
      GO TO 57
   56 QION(2,I)=QCOUNT*0.19383
# IONISATION TO  H+
   57 if(EN > XION3(NION3)) GO TO 60
      if(EN <= XION3[1]:
) GO TO 90
      DO 58 J=2,NION3
      if(EN <= XION3[J]:
) GO TO 59
   58 CONTINUE
      J=NION3
   59 A=(YION3[J]-YION3(J-1))/(XION3[J]-XION3(J-1))
      B=(XION3(J-1)*YION3[J]-XION3[J]*YION3(J-1))/(XION3(J-1)-XION3[J])
      QION(3,I)=(A*EN+B)*1.D-16
      GO TO 61
   60 QION(3,I)=QCOUNT*0.13275
# IONISATION TO  O+
   61 if(EN > XION4(NION4)) GO TO 64
      if(EN <= XION4[1]:
) GO TO 90
      DO 62 J=2,NION4
      if(EN <= XION4[J]:
) GO TO 63
   62 CONTINUE
      J=NION4
   63 A=(YION4[J]-YION4(J-1))/(XION4[J]-XION4(J-1))
      B=(XION4(J-1)*YION4[J]-XION4[J]*YION4(J-1))/(XION4(J-1)-XION4[J])
      QION(4,I)=(A*EN+B)*1.D-16
      GO TO 65
   64 QION(4,I)=QCOUNT*0.02129
# IONISATION TO  H2+
   65 if(EN > XION5(NION5)) GO TO 68
      if(EN <= XION5[1]:
) GO TO 90
      DO 66 J=2,NION5
      if(EN <= XION5[J]:
) GO TO 67
   66 CONTINUE
      J=NION5
   67 A=(YION5[J]-YION5(J-1))/(XION5[J]-XION5(J-1))
      B=(XION5(J-1)*YION5[J]-XION5[J]*YION5(J-1))/(XION5(J-1)-XION5[J])
      QION(5,I)=(A*EN+B)*1.D-16
      GO TO 73
   68 QION(5,I)=QCOUNT*0.00035
# IONISATION TO  H+ + OH+
   73 if(EN > XION6(NION6)) GO TO 76
      if(EN <= XION6[1]:
) GO TO 90
      DO 74 J=2,NION6
      if(EN <= XION6[J]:
) GO TO 75
   74 CONTINUE
      J=NION6
   75 A=(YION6[J]-YION6(J-1))/(XION6[J]-XION6(J-1))
      B=(XION6(J-1)*YION6[J]-XION6[J]*YION6(J-1))/(XION6(J-1)-XION6[J])
      QION(6,I)=(A*EN+B)*1.D-16
      GO TO 77
   76 QION(6,I)=QCOUNT*0.01395
# IONISATION TO  H+ + O+
   77 if(EN > XION7(NION7)) GO TO 80
      if(EN <= XION7[1]:
) GO TO 90
      DO 78 J=2,NION7
      if(EN <= XION7[J]:
) GO TO 79
   78 CONTINUE
      J=NION7
   79 A=(YION7[J]-YION7(J-1))/(XION7[J]-XION7(J-1))
      B=(XION7(J-1)*YION7[J]-XION7[J]*YION7(J-1))/(XION7(J-1)-XION7[J])
      QION(7,I)=(A*EN+B)*1.D-16
      GO TO 81
   80 QION(7,I)=QCOUNT*0.00705
# IONISATION TO  O++
   81 if(EN > XION8(NION8)) GO TO 84
      if(EN <= XION8[1]:
) GO TO 90
      DO 82 J=2,NION8
      if(EN <= XION8[J]:
) GO TO 83
   82 CONTINUE
      J=NION8
   83 A=(YION8[J]-YION8(J-1))/(XION8[J]-XION8(J-1))
      B=(XION8(J-1)*YION8[J]-XION8[J]*YION8(J-1))/(XION8(J-1)-XION8[J])
      QION(8,I)=(A*EN+B)*1.D-16
      GO TO 85
   84 QION(8,I)=QCOUNT*0.00085
# IONISATION TO OXYGEN K-SHELL
   85 if(EN <= XKSH[1]) GO TO 90
      DO 86 J=2,NKSH 
      if(EN <= XKSH[J]:
) GO TO 87
   86 CONTINUE
      J=NKSH
   87 A=(YKSH[J]-YKSH(J-1))/(XKSH[J]-XKSH(J-1))
      B=(XKSH(J-1)*YKSH[J]-XKSH[J]*YKSH(J-1))/(XKSH(J-1)-XKSH[J])
      QION(9,I)=(A*EN+B)*1.D-16
#
   90 DO 98 J=1,NION     
      if(EN <= (2.0*EION[J]:
)) GO TO 98
      PEQION[J][I]=PEQEL(2,(I-IOFFION[J]))
   98 CONTINUE
#
#  ATTACHMENT    H-
      Q(4,I)=0.0                 
      QATT(1,I)=0.0                                       
      if(EN <= XATT1[1]:
 or EN >= XATT1(NATT1)) GO TO 103               
      DO 101  J=2,NATT1                                                
      if(EN <= XATT1[J]:
) GO TO 102                                      
  101 CONTINUE                                                          
      J=NATT1     
  102 YJ=math.log(YATT1[J])
      YJ1=math.log(YATT1(J-1))
      XJ=math.log(XATT1[J])
      XJ1=math.log(XATT1(J-1))                                             
      A=(YJ-YJ1)/(XJ-XJ1)                     
      B=(XJ1*YJ-XJ*YJ1)/(XJ1-XJ) 
      QATT(1,I)=math.exp(A*math.log(EN)+B)*1.D-21         
#  ATTACHMENT    O-
  103 QATT(2,I)=0.0
      if(EN <= XATT2[1]:
 or EN >= XATT2(NATT2)) GO TO 106               
      DO 104  J=2,NATT2                                                
      if(EN <= XATT2[J]:
) GO TO 105                                      
  104 CONTINUE                                                          
      J=NATT2     
  105 YJ=math.log(YATT2[J])
      YJ1=math.log(YATT2(J-1))
      XJ=math.log(XATT2[J])
      XJ1=math.log(XATT2(J-1))                                             
      A=(YJ-YJ1)/(XJ-XJ1)                     
      B=(XJ1*YJ-XJ*YJ1)/(XJ1-XJ) 
      QATT(2,I)=math.exp(A*math.log(EN)+B)*1.D-21  
#  ATTACHMENT    OH-
  106 QATT(3,I)=0.0
      if(EN <= XATT3[1]:
 or EN >= XATT3(NATT3)) GO TO 109               
      DO 107  J=2,NATT3                                                
      if(EN <= XATT3[J]:
) GO TO 108                                      
  107 CONTINUE                                                          
      J=NATT3     
  108 YJ=math.log(YATT3[J])
      YJ1=math.log(YATT3(J-1))
      XJ=math.log(XATT3[J])
      XJ1=math.log(XATT3(J-1))                                             
      A=(YJ-YJ1)/(XJ-XJ1)                     
      B=(XJ1*YJ-XJ*YJ1)/(XJ1-XJ) 
      QATT(3,I)=math.exp(A*math.log(EN)+B)*1.D-21  
#   
  109 Q(4,I)=0.0                                             
      Q(5,I)=0.0                                                        
      Q(6,I)=0.0 
#
#  ZERO INELASTIC ARRAYS
      DO 130 L=1,NIN
      QIN(L,I)=0.00
      PEQIN(L,I)=0.00
  130 CONTINUE
# ----------------------------------------------------------------      
#  DIPOLE BORN ROTATIONAL STATES                                 
#----------------------------------------------------------------
      ENRT=math.sqrt(EN)
#      
#  SUPER ELASTIC ROTATIONAL COLLISIONS
      DO 140 L=2,210,2
      AL=AJIN(L)
      L2=L/2
      QIN(L,I)=DBK*SALPHA[L2]*PJ(IMAP(L))*math.log((ENRT+math.sqrt(EN-EIN(L)))/(math.sqrt(EN-EIN(L))-ENRT))/((2.0*AL+1.0)*EN)*AMPROT       
# IF ENERGY GT 200OEV SET ROTATION TO 0.0 AND USE AS MOD ELASTIC
      if(EN > 2000.0):
 :
       QIN(L,I)=0.0
       GO TO 140
      # endif
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(L))
      if(EPOINT > ENRTS(NRTANG):
) :
       WRITE(6,922) EPOINT,ENRTS(NRTANG),EN
  922  print(' ENERGY ERROR IN ROT SUPER ANG CALC  EPOINT=',D12.4,' ENRTS=',D12.4,' EN=',D12.4)
      # endif
      DO 131 M=1,NRTANG
      if(EPOINT <= ENRTS(M):
) GO TO 132 
  131 CONTINUE
      M=NRTANG
  132 A=(YEPSR(M)-YEPSR(M-1))/(ENRTS(M)-ENRTS(M-1))
      B=(ENRTS(M-1)*YEPSR(M)-ENRTS(M)*YEPSR(M-1))/(ENRTS(M-1)-ENRTS(M))
      EPSIL=A*EPOINT+B
      PEQIN(L,I)=1.0-EPSIL
# CALCULATE USED MT XSEC
      A=(YMTRT(M)-YMTRT(M-1))/(ENRTS(M)-ENRTS(M-1))
      B=(ENRTS(M-1)*YMTRT(M)-ENRTS(M)*YMTRT(M-1))/(ENRTS(M-1)-ENRTS(M))
      XSECDUM(L)=A*EPOINT+B
      XSECDUM(L)=XSECDUM(L)*QIN(L,I)
  140 CONTINUE
# 
# ROTATIONAL COLLISIONS
      DO 150 L=1,209,2
      QIN(L,I)=0.0
      if(EN <= EIN(L):
) GO TO 150
      AL=AJIN(L)
      L2=(L+1)/2
      QIN(L,I)=DBK*SALPHA[L2]*PJ(IMAP(L))*math.log((ENRT+math.sqrt(EN-EIN(L)))/(ENRT-math.sqrt(EN-EIN(L))))/((2.0*AL+1.0)*EN)*AMPROT       
# IF ENERGY GT 2000EV SET TO 0.0 AND USE MOD ELASTIC
      if(EN > 2000.0):
 :
       QIN(L,I)=0.0
       GO TO 150
      # endif
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(L))
      if(EPOINT > ENROT(NRTANG):
) :
       WRITE(6,923) EPOINT,ENROT(NRTANG),EN
  923  print(' ENERGY ERROR IN ROT ANG CALC  EPOINT=',D12.4,' ENROT=',D12.4,' EN=',D12.4)
      # endif
      DO 141 M=1,NRTANG
      if(EPOINT <= ENROT(M):
) GO TO 142 
  141 CONTINUE
      M=NRTANG
  142 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(L,I)=1.0-EPSIL
# CALCULATE USED MT XSEC
      A=(YMTRT(M)-YMTRT(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YMTRT(M)-ENROT(M)*YMTRT(M-1))/(ENROT(M-1)-ENROT(M))
      XSECDUM(L)=A*EPOINT+B
      XSECDUM(L)=XSECDUM(L)*QIN(L,I)
  150 CONTINUE  
# CALCULATE TOTAL AND MT SUMS OVER ROTATIONS
#     QSUPTT=0.0
#     QSUPMT=0.0
#     DO 160 L=2,210,2
#     QSUPTT=QSUPTT+QIN(L,I)
#     QSUPMT=QSUPMT+XSECDUM(L)
# 160 CONTINUE
#     QTOTTT=0.0
#     QTOTMT=0.0
#     DO 161 L=1,209,2
#     QTOTTT=QTOTTT+QIN(L,I)
#     QTOTMT=QTOTMT+XSECDUM(L)
#     QTSMT=QSUPMT+QTOTMT
#     QTSEL=QSUPTT+QTOTTT
# 161 CONTINUE
#     WRITE(6,944) EN,QSUPTT,QSUPMT,QTOTTT,QTOTMT,QTSEL,QTSMT
# 944 print(' CROSS SECTION ROTATIONAL SUMS AT ENERGY =',D12.4,/,
#    /' TOTAL SUPER =',D12.4,'  MT SUPER =',D12.4,/,' TOTAL ROTAT =',
#    /D12.4,'  MT ROTAT =',D12.4,/,' TOT ROT=',D12.4,' TOT ROT MT=',
#    /D12.4)
# 
# VIBRATION B# end V2 SUPERELASTIC (DIPOLE 1/E FALL OFF ABOVE ENERGY OF
# XVIB1(NVIB1) EV ) 
      QIN(211,I)=0.0
      if(EN <= 0.0):
 GO TO 180
      if((EN+EIN(212):
) > XVIB1(NVIB1)) GO TO 173
      DO 171 J=2,NVIB1
      if((EN+EIN(212):
) <= XVIB1[J]) GO TO 172
  171 CONTINUE
      J=NVIB1
  172 A=(YVIB1[J]-YVIB1(J-1))/(XVIB1[J]-XVIB1(J-1))
      B=(XVIB1(J-1)*YVIB1[J]-XVIB1[J]*YVIB1(J-1))/(XVIB1(J-1)-XVIB1[J])
      QIN(211,I)=(EN+EIN(212))*(A*(EN+EIN(212))+B)/EN
      GOTO 174
  173 QIN(211,I)=YVIB1(NVIB1)*(XVIB1(NVIB1)/(EN+EIN(212)))/EN
  174 QIN(211,I)=QIN(211,I)*APOPV1*1.D-16        
      PEQIN(211,I)=PEQEL(2,(I-IOFFN(211)))
  180 CONTINUE
#  VIBRATION   B# end  V2 (DIPOLE 1/E FALL OFF ABOVE ENERGY OF
#  XVIB1(NVIB1) EV )
      QIN(212,I)=0.0                                                 
      if(EN <= EIN(212):
) GO TO 210   
      if(EN > XVIB1(NVIB1):
) GO TO 203                                
      DO 201 J=2,NVIB1                                                  
      if(EN <= XVIB1[J]:
) GO TO 202                                      
  201 CONTINUE                                                          
      J=NVIB1                                                           
  202 A=(YVIB1[J]-YVIB1(J-1))/(XVIB1[J]-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1[J]-XVIB1[J]*YVIB1(J-1))/(XVIB1(J-1)-XVIB1[J]) 
      QIN(212,I)=(A*EN+B)       
      GO TO 204
  203 QIN(212,I)=YVIB1(NVIB1)*(XVIB1(NVIB1)/EN)  
  204 QIN(212,I)=QIN(212,I)*APOPGS*1.D-16 
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(212))
      if(EPOINT > 500.):
 GO TO 2043
      DO 2041 M=1,NRTANG
      if(EPOINT <= ENROT(M):
) GO TO 2042
 2041 CONTINUE
      M=NRTANG
 2042 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(212,I)=1.0-EPSIL
      GO TO 210
 2043 PEQIN(212,I)=PEQEL(2,(I-IOFFN(212)))
  210 CONTINUE      
#  VIBRATION STRETCH V1+V3                                           
      QIN(213,I)=0.0                                                    
      if(EN <= EIN(213):
) GO TO 220                    
      if(EN > XVIB2(NVIB2):
) GO TO 213                  
      DO 211 J=2,NVIB2                                                  
      if(EN <= XVIB2[J]:
) GO TO 212                                      
  211 CONTINUE                                                          
      J=NVIB2                                                           
  212 A=(YVIB2[J]-YVIB2(J-1))/(XVIB2[J]-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2[J]-XVIB2[J]*YVIB2(J-1))/(XVIB2(J-1)-XVIB2[J]) 
      QIN(213,I)=(A*EN+B)*1.D-16 
      GO TO 214
  213 QIN(213,I)=YVIB2(NVIB2)*(XVIB2(NVIB2)/EN)**1.5*1.D-16   
  214 CONTINUE 
      if(EN < 1.5):
 :
# USE FLAT ANGULAR DISTRIBUTION AT THRESHOLD FOR STRETCH TRANSITION
       PEQIN(213,I)=0.0
       GO TO 220
      # endif    
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(213))
      if(EPOINT > 500.):
 GO TO 2143
      DO 2141 M=1,NRTANG
      if(EPOINT <= ENROT(M):
) GO TO 2142
 2141 CONTINUE
      M=NRTANG
 2142 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(213,I)=1.0-EPSIL
      GO TO 220
 2143 PEQIN(213,I)=PEQEL(2,(I-IOFFN(213)))
  220 CONTINUE                                                          
#  VIBRATION HARMONICS NV2 + NV1 +NV3                                                                     
      QIN(214,I)=0.0                                                    
      if(EN <= EIN(214):
) GO TO 230               
      if(EN > XVIB3(NVIB3):
) GO TO 223                       
      DO 221 J=2,NVIB3                                                  
      if(EN <= XVIB3[J]:
) GO TO 222                                      
  221 CONTINUE                                                          
      J=NVIB3                                                           
  222 A=(YVIB3[J]-YVIB3(J-1))/(XVIB3[J]-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3[J]-XVIB3[J]*YVIB3(J-1))/(XVIB3(J-1)-XVIB3[J]) 
      QIN(214,I)=(A*EN+B)*1.D-16 
      GO TO 224
  223 QIN(214,I)=YVIB3(NVIB3)*(XVIB3(NVIB3)/EN)**1.5*1.D-16
  224 CONTINUE
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(214))
      if(EPOINT > 500.):
 GO TO 2243
      DO 2241 M=1,NRTANG
      if(EPOINT <= ENROT(M):
) GO TO 2242
 2241 CONTINUE
      M=NRTANG
 2242 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(214,I)=1.0-EPSIL
      GO TO 230
 2243 PEQIN(214,I)=PEQEL(2,(I-IOFFN(214)))
  230 CONTINUE    
# TRIPLET 3B1                                    
      QIN(215,I)=0.0                                                    
      if(EN <= EIN(215):
) GO TO 310   
      if(EN > XTRP1(NTRP1):
) GO TO 302                                  
      DO 300 J=2,NTRP1                                           
      if(EN <= XTRP1[J]:
) GO TO 301                                      
  300 CONTINUE                                                          
      J=NTRP1                                                          
  301 Y1=math.log(YTRP1[J])
      Y2=math.log(YTRP1(J-1))
      X1=math.log(XTRP1[J])
      X2=math.log(XTRP1(J-1))
      A=(Y1-Y2)/(X1-X2)
      B=(X2*Y1-X1*Y2)/(X2-X1)                   
      QIN(215,I)=math.exp(A*math.log(EN)+B)*1.D-16            
      GO TO 303
  302 QIN(215,I)=YTRP1(NTRP1)*(XTRP1(NTRP1)/EN)**1.5*1.D-16          
  303 if(EN <= (2.0*EIN(215))) GO TO 310
      PEQIN(215,I)=PEQEL(2,(I-IOFFN(215)))
# EXCITATION  1B1 (7.48EV LEVEL SPLIT INTO 4 GROUPS)
  310 if(EN <= EIN(216)) GO TO 311
      QIN(216,I)=0.003437/(EIN(216)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(216)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(216))
      if(QIN(216,I):
 < 0.0) QIN(216,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(216))
      if(EPOINT > 500.):
 GO TO 3103
      DO 3101 M=1,NRTANG
      if(EPOINT <= ENROT(M):
) GO TO 3102
 3101 CONTINUE
      M=NRTANG
 3102 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(216,I)=1.0-EPSIL
      GO TO 311
 3103 PEQIN(216,I)=PEQEL(2,(I-IOFFN(216)))
# EXCITATION  1B1 (7.48EV LEVEL SPLIT INTO 4 GROUPS)
  311 if(EN <= EIN(217)) GO TO 312
      QIN(217,I)=0.017166/(EIN(217)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(217)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(217))
      if(QIN(217,I):
 < 0.0) QIN(217,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(217))
      if(EPOINT > 500.):
 GO TO 3113
      DO 3111 M=1,NRTANG
      if(EPOINT <= ENROT(M):
) GO TO 3112
 3111 CONTINUE
      M=NRTANG
 3112 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(217,I)=1.0-EPSIL
      GO TO 312
 3113 PEQIN(217,I)=PEQEL(2,(I-IOFFN(217)))
# EXCITATION  1B1 (7.48EV LEVEL SPLIT INTO 4 GROUPS)
  312 if(EN <= EIN(218)) GO TO 313
      QIN(218,I)=0.019703/(EIN(218)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(218)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(218))
      if(QIN(218,I):
 < 0.0) QIN(218,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(218))
      if(EPOINT > 500.):
 GO TO 3123
      DO 3121 M=1,NRTANG
      if(EPOINT <= ENROT(M):
) GO TO 3122
 3121 CONTINUE
      M=NRTANG
 3122 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(218,I)=1.0-EPSIL
      GO TO 313
 3123 PEQIN(218,I)=PEQEL(2,(I-IOFFN(218)))
# EXCITATION  1B1 (7.48EV LEVEL SPLIT INTO 4 GROUPS)
  313 if(EN <= EIN(219)) GO TO 314
      QIN(219,I)=0.005486/(EIN(219)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(219)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(219))
      if(QIN(219,I):
 < 0.0) QIN(219,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(219))
      if(EPOINT > 500.):
 GO TO 3133
      DO 3131 M=1,NRTANG
      if(EPOINT <= ENROT(M):
) GO TO 3132
 3131 CONTINUE
      M=NRTANG
 3132 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(219,I)=1.0-EPSIL
      GO TO 314
 3133 PEQIN(219,I)=PEQEL(2,(I-IOFFN(219)))
# TRIPLET ( 3A2 + 1A2 + 3A1) 9.1EV                                   
  314 QIN(220,I)=0.0                                                    
      if(EN <= EIN(220):
) GO TO 322   
      if(EN > XTRP2(NTRP2):
) GO TO 317                                 
      DO 315 J=2,NTRP2                                           
      if(EN <= XTRP2[J]:
) GO TO 316                                      
  315 CONTINUE                                                          
      J=NTRP2                                                          
  316 Y1=math.log(YTRP2[J])
      Y2=math.log(YTRP2(J-1))
      X1=math.log(XTRP2[J])
      X2=math.log(XTRP2(J-1))
      A=(Y1-Y2)/(X1-X2)
      B=(X2*Y1-X1*Y2)/(X2-X1)
      QIN(220,I)=math.exp(A*math.log(EN)+B)*1.D-16                 
      GO TO 318
  317 QIN(220,I)=YTRP2(NTRP2)*(XTRP2(NTRP2)/EN)**1.5*1.D-16          
  318 if(EN <= (2.0*EIN(220))) GO TO 322
      PEQIN(220,I)=PEQEL(2,(I-IOFFN(220)))             
# EXCITATION  1A1 (9.69EV LEVEL SPLIT INTO 4 GROUPS)
  322 if(EN <= EIN(221)) GO TO 323
      QIN(221,I)=0.006609/(EIN(221)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(221)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(221))
      if(QIN(221,I):
 < 0.0) QIN(221,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(221))
      if(EPOINT > 500.):
 GO TO 3223
      DO 3221 M=1,NRTANG
      if(EPOINT <= ENROT(M):
) GO TO 3222
 3221 CONTINUE
      M=NRTANG
 3222 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(221,I)=1.0-EPSIL
      GO TO 323
 3223 PEQIN(221,I)=PEQEL(2,(I-IOFFN(221)))
# EXCITATION  1A1 (9.69EV LEVEL SPLIT INTO 4 GROUPS)
  323 if(EN <= EIN(222)) GO TO 324
      QIN(222,I)=0.030025/(EIN(222)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(222)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(222))
      if(QIN(222,I):
 < 0.0) QIN(222,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(222))
      if(EPOINT > 500.):
 GO TO 3233
      DO 3231 M=1,NRTANG
      if(EPOINT <= ENROT(M):
) GO TO 3232
 3231 CONTINUE
      M=NRTANG
 3232 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(222,I)=1.0-EPSIL
      GO TO 324
 3233 PEQIN(222,I)=PEQEL(2,(I-IOFFN(222)))
# EXCITATION  1A1 (9.69EV LEVEL SPLIT INTO 4 GROUPS)
  324 if(EN <= EIN(223)) GO TO 325
      QIN(223,I)=0.030025/(EIN(223)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(223)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(223))
      if(QIN(223,I):
 < 0.0) QIN(223,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(223))
      if(EPOINT > 500.):
 GO TO 3243
      DO 3241 M=1,NRTANG
      if(EPOINT <= ENROT(M):
) GO TO 3242
 3241 CONTINUE
      M=NRTANG
 3242 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(223,I)=1.0-EPSIL
      GO TO 325
 3243 PEQIN(223,I)=PEQEL(2,(I-IOFFN(223)))
# EXCITATION  1A1 (9.69EV LEVEL SPLIT INTO 4 GROUPS)
  325 if(EN <= EIN(224)) GO TO 326
      QIN(224,I)=0.006609/(EIN(224)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(224)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(224))
      if(QIN(224,I):
 < 0.0) QIN(224,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(224))
      if(EPOINT > 500.):
 GO TO 3253
      DO 3251 M=1,NRTANG
      if(EPOINT <= ENROT(M):
) GO TO 3252
 3251 CONTINUE
      M=NRTANG
 3252 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(224,I)=1.0-EPSIL
      GO TO 326
 3253 PEQIN(224,I)=PEQEL(2,(I-IOFFN(224)))
# TRIPLET 3B1 9.95 EV                                                
  326 QIN(225,I)=0.0                                                    
      if(EN <= EIN(225):
) GO TO 332     
      if(EN > XTRP3(NTRP3):
) GO TO 329                                 
      DO 327 J=2,NTRP3                                           
      if(EN <= XTRP3[J]:
) GO TO 328                                      
  327 CONTINUE                                                          
      J=NTRP3                                                          
  328 Y1=math.log(YTRP3[J])
      Y2=math.log(YTRP3(J-1))
      X1=math.log(XTRP3[J])
      X2=math.log(XTRP3(J-1)) 
      A=(Y1-Y2)/(X1-X2)                     
      B=(X2*Y1-X1*Y2)/(X2-X1)
      QIN(225,I)=math.exp(A*math.log(EN)+B)*1.D-16              
      GO TO 330
  329 QIN(225,I)=YTRP3(NTRP3)*(XTRP3(NTRP3)/EN)**1.5*1.D-16          
  330 if(EN <= (2.0*EIN(225))) GO TO 332
      PEQIN(225,I)=PEQEL(2,(I-IOFFN(225)))
# EXCITATION   1B1 (3pa1)     9.994 EV                      
  332 if(EN <= EIN(226)) GO TO 333
      QIN(226,I)=0.005200/(EIN(226)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(226)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(226))
      if(QIN(226,I):
 < 0.0) QIN(226,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(226))
      if(EPOINT > 500.):
 GO TO 3323
      DO 3321 M=1,NRTANG
      if(EPOINT <= ENROT(M):
) GO TO 3322
 3321 CONTINUE
      M=NRTANG
 3322 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(226,I)=1.0-EPSIL
      GO TO 333
 3323 PEQIN(226,I)=PEQEL(2,(I-IOFFN(226)))
# EXCITATION   1A1 (3pa1+3pb1)  10.172 EV                      
  333 if(EN <= EIN(227)) GO TO 334
      QIN(227,I)=0.014000/(EIN(227)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(227)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(227))
      if(QIN(227,I):
 < 0.0) QIN(227,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(227))
      if(EPOINT > 500.):
 GO TO 3333
      DO 3331 M=1,NRTANG
      if(EPOINT <= ENROT(M):
) GO TO 3332
 3331 CONTINUE
      M=NRTANG
 3332 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(227,I)=1.0-EPSIL
      GO TO 334
 3333 PEQIN(227,I)=PEQEL(2,(I-IOFFN(227)))
# EXCITATION    3pa1+3pb1       10.39 EV                      
  334 if(EN <= EIN(228)) GO TO 335
      QIN(228,I)=0.010700/(EIN(228)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(228)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(228))
      if(QIN(228,I):
 < 0.0) QIN(228,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(228))
      if(EPOINT > 500.):
 GO TO 3343
      DO 3341 M=1,NRTANG
      if(EPOINT <= ENROT(M):
) GO TO 3342
 3341 CONTINUE
      M=NRTANG
 3342 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(228,I)=1.0-EPSIL
      GO TO 335
 3343 PEQIN(228,I)=PEQEL(2,(I-IOFFN(228)))
# EXCITATION    3pa1+3pb1       10.575EV                      
  335 if(EN <= EIN(229)) GO TO 336
      QIN(229,I)=0.009200/(EIN(229)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(229)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(229))
      if(QIN(229,I):
 < 0.0) QIN(229,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(229))
      if(EPOINT > 500.):
 GO TO 3353
      DO 3351 M=1,NRTANG
      if(EPOINT <= ENROT(M):
) GO TO 3352
 3351 CONTINUE
      M=NRTANG
 3352 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(229,I)=1.0-EPSIL
      GO TO 336
 3353 PEQIN(229,I)=PEQEL(2,(I-IOFFN(229)))
# EXCITATION    3pa1+3pb1       10.78 EV                      
  336 if(EN <= EIN(230)) GO TO 337
      QIN(230,I)=0.006900/(EIN(230)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(230)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(230))
      if(QIN(230,I):
 < 0.0) QIN(230,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(230))
      if(EPOINT > 500.):
 GO TO 3363
      DO 3361 M=1,NRTANG
      if(EPOINT <= ENROT(M):
) GO TO 3362
 3361 CONTINUE
      M=NRTANG
 3362 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(230,I)=1.0-EPSIL
      GO TO 337
 3363 PEQIN(230,I)=PEQEL(2,(I-IOFFN(230)))
# EXCITATION    3da1+3da2+3db1  11.01 EV                      
  337 if(EN <= EIN(231)) GO TO 338
      QIN(231,I)=0.021800/(EIN(231)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(231)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(231))
      if(QIN(231,I):
 < 0.0) QIN(231,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(231))
      if(EPOINT > 500.):
 GO TO 3373
      DO 3371 M=1,NRTANG
      if(EPOINT <= ENROT(M):
) GO TO 3372
 3371 CONTINUE
      M=NRTANG
 3372 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(231,I)=1.0-EPSIL
      GO TO 338
 3373 PEQIN(231,I)=PEQEL(2,(I-IOFFN(231)))
# EXCITATION    3da1  11.122 EV                     
  338 if(EN <= EIN(232)) GO TO 339
      QIN(232,I)=0.023900/(EIN(232)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(232)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(232))
      if(QIN(232,I):
 < 0.0) QIN(232,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(232))
      if(EPOINT > 500.):
 GO TO 3383
      DO 3381 M=1,NRTANG
      if(EPOINT <= ENROT(M):
) GO TO 3382
 3381 CONTINUE
      M=NRTANG
 3382 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(232,I)=1.0-EPSIL
      GO TO 339
 3383 PEQIN(232,I)=PEQEL(2,(I-IOFFN(232)))
# EXCITATION    4pa1  11.377 EV                     
  339 if(EN <= EIN(233)) GO TO 340
      QIN(233,I)=0.013991/(EIN(233)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(233)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(233))
      if(QIN(233,I):
 < 0.0) QIN(233,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(233))
      if(EPOINT > 500.):
 GO TO 3393
      DO 3391 M=1,NRTANG
      if(EPOINT <= ENROT(M):
) GO TO 3392
 3391 CONTINUE
      M=NRTANG
 3392 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(233,I)=1.0-EPSIL
      GO TO 340
 3393 PEQIN(233,I)=PEQEL(2,(I-IOFFN(233)))
# EXCITATION    4pb1  11.525 EV                     
  340 if(EN <= EIN(234)) GO TO 341
      QIN(234,I)=0.009905/(EIN(234)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(234)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(234))
      if(QIN(234,I):
 < 0.0) QIN(234,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(234))
      if(EPOINT > 500.):
 GO TO 3403
      DO 3401 M=1,NRTANG
      if(EPOINT <= ENROT(M):
) GO TO 3402
 3401 CONTINUE
      M=NRTANG
 3402 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(234,I)=1.0-EPSIL
      GO TO 341
 3403 PEQIN(234,I)=PEQEL(2,(I-IOFFN(234)))
# EXCITATION    4da1+4db1  11.75 EV                 
  341 if(EN <= EIN(235)) GO TO 342
      QIN(235,I)=0.023551/(EIN(235)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(235)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(235))
      if(QIN(235,I):
 < 0.0) QIN(235,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(235))
      if(EPOINT > 500.):
 GO TO 3413
      DO 3411 M=1,NRTANG
      if(EPOINT <= ENROT(M):
) GO TO 3412
 3411 CONTINUE
      M=NRTANG
 3412 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(235,I)=1.0-EPSIL
      GO TO 342
 3413 PEQIN(235,I)=PEQEL(2,(I-IOFFN(235)))
# EXCITATION    5p         11.94 EV                 
  342 if(EN <= EIN(236)) GO TO 343
      QIN(236,I)=0.007967/(EIN(236)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(236)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(236))
      if(QIN(236,I):
 < 0.0) QIN(236,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(236))
      if(EPOINT > 500.):
 GO TO 3423
      DO 3421 M=1,NRTANG
      if(EPOINT <= ENROT(M):
) GO TO 3422
 3421 CONTINUE
      M=NRTANG
 3422 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(236,I)=1.0-EPSIL
      GO TO 343
 3423 PEQIN(236,I)=PEQEL(2,(I-IOFFN(236)))
# EXCITATION    5d         12.08 EV                 
  343 if(EN <= EIN(237)) GO TO 344
      QIN(237,I)=0.018315/(EIN(237)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(237)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(237))
      if(QIN(237,I):
 < 0.0) QIN(237,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(237))
      if(EPOINT > 500.):
 GO TO 3433
      DO 3431 M=1,NRTANG
      if(EPOINT <= ENROT(M):
) GO TO 3432
 3431 CONTINUE
      M=NRTANG
 3432 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(237,I)=1.0-EPSIL
      GO TO 344
 3433 PEQIN(237,I)=PEQEL(2,(I-IOFFN(237)))
# EXCITATION    6d         12.24 EV                 
  344 if(EN <= EIN(238)) GO TO 345
      QIN(238,I)=0.011109/(EIN(238)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(238)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(238))
      if(QIN(238,I):
 < 0.0) QIN(238,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(238))
      if(EPOINT > 500.):
 GO TO 3443
      DO 3441 M=1,NRTANG
      if(EPOINT <= ENROT(M):
) GO TO 3442
 3441 CONTINUE
      M=NRTANG
 3442 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(238,I)=1.0-EPSIL
      GO TO 345
 3443 PEQIN(238,I)=PEQEL(2,(I-IOFFN(238)))
# EXCITATION    7d         12.34 EV                 
  345 if(EN <= EIN(239)) GO TO 346
      QIN(239,I)=0.008591/(EIN(239)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(239)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(239))
      if(QIN(239,I):
 < 0.0) QIN(239,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(239))
      if(EPOINT > 500.):
 GO TO 3453
      DO 3451 M=1,NRTANG
      if(EPOINT <= ENROT(M):
) GO TO 3452
 3451 CONTINUE
      M=NRTANG
 3452 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(239,I)=1.0-EPSIL
      GO TO 346
 3453 PEQIN(239,I)=PEQEL(2,(I-IOFFN(239)))
# EXCITATION    8d+9d+10d  12.50 EV                 
  346 if(EN <= EIN(240)) GO TO 347
      QIN(240,I)=0.028137/(EIN(240)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(240)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(240))
      if(QIN(240,I):
 < 0.0) QIN(240,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(240))
      if(EPOINT > 500.):
 GO TO 3463
      DO 3461 M=1,NRTANG
      if(EPOINT <= ENROT(M):
) GO TO 3462
 3461 CONTINUE
      M=NRTANG
 3462 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(240,I)=1.0-EPSIL
      GO TO 347
 3463 PEQIN(240,I)=PEQEL(2,(I-IOFFN(240)))
# TRIPLET SUM OF HIGHER TRIPLETS   13.0 EV                                            
  347 QIN(241,I)=0.0                                                    
      if(EN <= EIN(241):
) GO TO 353
      if(EN > XTRP4(NTRP4):
) GO TO 350                                
      DO 348 J=2,NTRP4                                           
      if(EN <= XTRP4[J]:
) GO TO 349                                      
  348 CONTINUE                                                          
      J=NTRP4                                                          
  349 Y1=math.log(YTRP4[J])
      Y2=math.log(YTRP4(J-1))
      X1=math.log(XTRP4[J])
      X2=math.log(XTRP4(J-1))
      A=(Y1-Y2)/(X1-X2)                     
      B=(X2*Y1-X1*Y2)/(X2-X1)
      QIN(241,I)=math.exp(A*math.log(EN)+B)*1.D-16         
      GO TO 351
  350 QIN(241,I)=YTRP4(NTRP4)*(XTRP4(NTRP4)/EN)**1.5*1.D-16            
  351 if(EN <= (2.0*EIN(241))) GO TO 353
      PEQIN(241,I)=PEQEL(2,(I-IOFFN(241)))
# EXCITATION    NEUTRAL DISSOCIATION   ELOSS=13.117 
  353 if(EN <= EIN(242)) GO TO 354
      QIN(242,I)=0.119100/(EIN(242)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(242)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(242))
      if(QIN(242,I):
 < 0.0) QIN(242,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(242))
      if(EPOINT > 500.):
 GO TO 3533
      DO 3531 M=1,NRTANG
      if(EPOINT <= ENROT(M):
) GO TO 3532
 3531 CONTINUE
      M=NRTANG
 3532 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(242,I)=1.0-EPSIL
      GO TO 354
 3533 PEQIN(242,I)=PEQEL(2,(I-IOFFN(242)))
# EXCITATION    NEUTRAL DISSOCIATION   ELOSS=14.117 
  354 if(EN <= EIN(243)) GO TO 355
      QIN(243,I)=0.097947/(EIN(243)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(243)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(243))
      if(QIN(243,I):
 < 0.0) QIN(243,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(243))
      if(EPOINT > 500.):
 GO TO 3543
      DO 3541 M=1,NRTANG
      if(EPOINT <= ENROT(M):
) GO TO 3542
 3541 CONTINUE
      M=NRTANG
 3542 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(243,I)=1.0-EPSIL
      GO TO 355
 3543 PEQIN(243,I)=PEQEL(2,(I-IOFFN(243)))
# EXCITATION    NEUTRAL DISSOCIATION   ELOSS=15.117 
  355 if(EN <= EIN(244)) GO TO 356 
      QIN(244,I)=0.039540/(EIN(244)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(244)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(244))
      if(QIN(244,I):
 < 0.0) QIN(244,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(244))
      if(EPOINT > 500.):
 GO TO 3553
      DO 3551 M=1,NRTANG
      if(EPOINT <= ENROT(M):
) GO TO 3552
 3551 CONTINUE
      M=NRTANG
 3552 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(244,I)=1.0-EPSIL
      GO TO 356
 3553 PEQIN(244,I)=PEQEL(2,(I-IOFFN(244)))
# EXCITATION    NEUTRAL DISSOCIATION   ELOSS=16.117 
  356 if(EN <= EIN(245)) GO TO 357 
      QIN(245,I)=0.042191/(EIN(245)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(245)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(245))
      if(QIN(245,I):
 < 0.0) QIN(245,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(245))
      if(EPOINT > 500.):
 GO TO 3563
      DO 3561 M=1,NRTANG 
      if(EPOINT <= ENROT(M):
) GO TO 3562
 3561 CONTINUE
      M=NRTANG
 3562 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(245,I)=1.0-EPSIL
      GO TO 357
 3563 PEQIN(245,I)=PEQEL(2,(I-IOFFN(245)))
# EXCITATION    NEUTRAL DISSOCIATION   ELOSS=17.117 
  357 if(EN <= EIN(246)) GO TO 358 
      QIN(246,I)=0.059428/(EIN(246)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(246)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(246))
      if(QIN(246,I):
 < 0.0) QIN(246,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(246))
      if(EPOINT > 500.):
 GO TO 3573
      DO 3571 M=1,NRTANG 
      if(EPOINT <= ENROT(M):
) GO TO 3572
 3571 CONTINUE
      M=NRTANG
 3572 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(246,I)=1.0-EPSIL
      GO TO 358
 3573 PEQIN(246,I)=PEQEL(2,(I-IOFFN(246)))
# EXCITATION    NEUTRAL DISSOCIATION   ELOSS=18.438 
  358 if(EN <= EIN(247)) GO TO 359 
      QIN(247,I)=0.077707/(EIN(247)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(247)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(247))
      if(QIN(247,I):
 < 0.0) QIN(247,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(247))
      if(EPOINT > 500.):
 GO TO 3583
      DO 3581 M=1,NRTANG 
      if(EPOINT <= ENROT(M):
) GO TO 3582
 3581 CONTINUE
      M=NRTANG
 3582 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(247,I)=1.0-EPSIL
      GO TO 359
 3583 PEQIN(247,I)=PEQEL(2,(I-IOFFN(247)))
# EXCITATION    NEUTRAL DISSOCIATION   ELOSS=20.316 
  359 if(EN <= EIN(248)) GO TO 360 
      QIN(248,I)=0.013838/(EIN(248)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(248)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+E(3)+EIN(248))
      if(QIN(248,I):
 < 0.0) QIN(248,I)=0.0
# CALCULATE DIPOLE ANGULAR DISTRIBUTION FACTOR FOR TRANSITION
      EPOINT=EN/abs(EIN(248))
      if(EPOINT > 500.):
 GO TO 3593
      DO 3591 M=1,NRTANG 
      if(EPOINT <= ENROT(M):
) GO TO 3592
 3591 CONTINUE
      M=NRTANG
 3592 A=(YEPSR(M)-YEPSR(M-1))/(ENROT(M)-ENROT(M-1))
      B=(ENROT(M-1)*YEPSR(M)-ENROT(M)*YEPSR(M-1))/(ENROT(M-1)-ENROT(M))
      EPSIL=A*EPOINT+B
      PEQIN(248,I)=1.0-EPSIL
      GO TO 360
 3593 PEQIN(248,I)=PEQEL(2,(I-IOFFN(248)))
  360 CONTINUE                                  
#
# LOAD BREMSSTRAHLUNG X-SECTION
      QIN(249,I)=0.0
      QIN(250,I)=0.0
      if(EN <= 1000.):
 GO TO 800
      DO 780 J=2,NBREM
      if(EN <= EBRM[J]:
) GO TO 790
  780 CONTINUE
      J=NBREM
  790 A=(math.log(Z8T[J])-math.log(Z8T(J-1)))/(EBRM[J]-EBRM(J-1))
      B=(math.log(Z8T[J])*EBRM(J-1)-math.log(Z8T(J-1))*EBRM[J])/(EBRM(J-1)-EBRM[J])
      QIN(249,I)=math.exp(A*EN+B)*1.D-24
      A=(math.log(Z1T[J])-math.log(Z1T(J-1)))/(EBRM[J]-EBRM(J-1))
      B=(math.log(Z1T[J])*EBRM(J-1)-math.log(Z1T(J-1))*EBRM[J])/(EBRM(J-1)-EBRM[J])
      QIN(250,I)=math.exp(A*EN+B)*2.D-24
  800 CONTINUE
#----------------------------------------------------------------------
# LOAD NULL COLLISIONS 
#  OH PRODUCTION FROM DISSOCIATION HARB ET AL J.CHEM.PHYS. 115(1001)5507
# SCALED ABOVE 200EV BY 1/ENERGY
      QNULL(1,I)=0.0
      if(EN <= XNUL1[1]:
) GO TO 805
      if(EN > XNUL1(NUL1):
) GO TO 803
      DO 801 J=2,NUL1
      if(EN <= XNUL1[J]:
) GO TO 802
  801 CONTINUE
      J=NUL1
  802 A=(YNUL1[J]-YNUL1(J-1))/(XNUL1[J]-XNUL1(J-1))
      B=(XNUL1(J-1)*YNUL1[J]-XNUL1[J]*YNUL1(J-1))/(XNUL1(J-1)-XNUL1[J])
      QNULL(1,I)=(A*EN+B)*1.D-16*SCLN[1]
      GO TO 805
# SCALE BY 1/E ABOVE XNUL1(NUL1) EV
  803 QNULL(1,I)=YNUL1(NUL1)*(XNUL1(NUL1)/EN)*1.D-16*SCLN[1]
#  LIGHT EMISSION FROM OH(A-X) MOHLMANN AND DEHEER CHEM.PHYS.19(1979)233 
  805 QNULL(2,I)=0.0
      if(EN <= XNUL2[1]:
) GO TO 810
      if(EN > XNUL2(NUL2):
) GO TO 808
      DO 806 J=2,NUL2
      if(EN <= XNUL2[J]:
) GO TO 807
  806 CONTINUE
      J=NUL2
  807 A=(YNUL2[J]-YNUL2(J-1))/(XNUL2[J]-XNUL2(J-1))
      B=(XNUL2(J-1)*YNUL2[J]-XNUL2[J]*YNUL2(J-1))/(XNUL2(J-1)-XNUL2[J])
      QNULL(2,I)=(A*EN+B)*1.D-16*SCLN(2)
      GO TO 810
# SCALE BY 1/E ABOVE XNUL2(NUL2) EV
  808 QNULL(2,I)=YNUL2(NUL2)*(XNUL2(NUL2)/EN)*1.D-16*SCLN(2)
#  LIGHT EMISSION FROM H(3-2)  MOHLMANN AND DEHEER CHEM.PHYS.19(1979)233 
  810 QNULL(3,I)=0.0
      if(EN <= XNUL3[1]:
) GO TO 815
      if(EN > XNUL3(NUL3):
) GO TO 813
      DO 811 J=2,NUL3
      if(EN <= XNUL3[J]:
) GO TO 812
  811 CONTINUE
      J=NUL3
  812 A=(YNUL3[J]-YNUL3(J-1))/(XNUL3[J]-XNUL3(J-1))
      B=(XNUL3(J-1)*YNUL3[J]-XNUL3[J]*YNUL3(J-1))/(XNUL3(J-1)-XNUL3[J])
      QNULL(3,I)=(A*EN+B)*1.D-16*SCLN(3)
      GO TO 815
# SCALE BY 1/E ABOVE XNUL3(NUL3) EV
  813 QNULL(3,I)=YNUL3(NUL3)*(XNUL3(NUL3)/EN)*1.D-16*SCLN(3)
#  LIGHT EMISSION FROM H(2-1)  MOHLMANN AND DEHEER CHEM.PHYS.19(1979)233 
  815 QNULL(4,I)=0.0
      if(EN <= XNUL4[1]:
) GO TO 820
      if(EN > XNUL4(NUL4):
) GO TO 818
      DO 816 J=2,NUL4
      if(EN <= XNUL4[J]:
) GO TO 817
  816 CONTINUE
      J=NUL4
  817 A=(YNUL4[J]-YNUL4(J-1))/(XNUL4[J]-XNUL4(J-1))
      B=(XNUL4(J-1)*YNUL4[J]-XNUL4[J]*YNUL4(J-1))/(XNUL4(J-1)-XNUL4[J])
      QNULL(4,I)=(A*EN+B)*1.D-16*SCLN(4)
      GO TO 820
# SCALE BY 1/E ABOVE XNUL4(NUL4) EV
  818 QNULL(4,I)=YNUL4(NUL4)*(XNUL4(NUL4)/EN)*1.D-16*SCLN(4)
#
  820 CONTINUE
# CALC  X-SEC SUMS
      SUMROT=0.0
      DO 850 K=1,210
      SUMROT=SUMROT+QIN(K,I)
  850 CONTINUE
      SUMVIB=0.0
      DO 851 K=211,214 
      SUMVIB=SUMVIB+QIN(K,I)
  851 CONTINUE
      SUMINEL=0.0
      DO 852 K=215,250
      SUMINEL=SUMINEL+QIN(K,I)
  852 CONTINUE
#
      SUMTRP=QIN(215,I)+QIN(220,I)+QIN(225,I)+QIN(230,I)
      SUMSNG=SUMINEL-SUMTRP
#
      SUMATT=0.0
      DO 855 K=1,NATT
      SUMATT=SUMATT+QATT(K,I)
  855 CONTINUE
      SUMION=0.0
      DO 856 K=1,NION
      SUMION=SUMION+QION(K,I)
  856 CONTINUE
      SUMTOT=SUMION+SUMSNG+SUMTRP+SUMATT+SUMVIB+SUMROT
#---------------------------------------------------------------------
#  print out some x-secs
#     WRITE(6,991) EN,SUMROT,SUMVIB,SUMATT,SUMTRP,SUMSNG,SUMION,SUMTOT
# 991 print(' EN=','%.3f' % ,' ROT=','%.3f' %,' VIB=','%.3f' %,' SUMATT=','%.3f' %,
#    /' SUMTRP=','%.3f' %,' SUMSNG=','%.3f' %,' SUMION=','%.3f' %,' SUMTOT=',
#    /'%.3f' %)         
#   
#-------------------------------------------------------------
# SET ELASTIC MT TO BE ISOTROPIC
#     PEQEL(2,I)=0.0
#----------------------------------------------------------------------
#
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      DO 1000 K=1,NIN            
      if(EFINAL <= EIN[K]:
) :
       NIN=K-1
       GO TO 1001
      # endif
 1000 CONTINUE   
 1001 CONTINUE
      if(EFINAL > 1000.):
 NIN=250    
#                                                                       
      RETURN  
      # end  
      def GAS15(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY  ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN) 
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000)
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6)  
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30) 
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      DIMENSION XELA[153],YELA[153],YMOM(153),YEPS(153),XROT13(63),YROT13(63),XROT35(55),YROT35(55),XROT57(55),YROT57(55),XROT79(50),YROT79(50),XROT911(48),YROT911(48),XROT1113(46),YROT1113(46),XROT1315(45),YROT1315(45),XROT1517(44),YROT1517(44),XROT1719(43),YROT1719(43),XROT1921(41),YROT1921(41),XROT2123(40),YROT2123(40),XROT2325(39),YROT2325(39),XROT2527(38),YROT2527(38),XROT2729(37),YROT2729(37),XROT2931(36),YROT2931(36),XROT3133(34),YROT3133(34),XROT3335(33),YROT3335(33),XROT3537(32),YROT3537(32),XROT3739(32),YROT3739(32),XROT3941(31),YROT3941(31),XROT4143(31),YROT4143(31),XROT4345(30),YROT4345(30),XROT4547(30),YROT4547(30),XROT4749(29),YROT4749(29),XVIB[60],YVIB1(60),YVIB2(60),YVIB3(60),YVIB4(60),YVIB5(60),YVIB6(60),YVIB7(60),YVIB8(60),YVIB9(60),YVIB10(60),YVIB11(60),YVIB12(60),YVIB13(60),YVIB14(60),YVIB15(60),YVIB16(60),YVIB17(60),YVIB18(60),YVIB19(60),YVIB20(60),YVIB21(60),X3ATT(32),Y3ATT(32),XATT(31),YATT(31),XEXC1(40),YEXC1(40),XEXC2(31),YEXC2(31),XEXC3(16),YEXC3(16),    XEXC4(15),YEXC4(15),XEXC5(14),YEXC5(14),XEXC6(14),YEXC6(14),      XEXC7(14),YEXC7(14),XEXC8(15),YEXC8(15),XEXC9(14),YEXC9(14),XROT(48),YROT(48),XIONC(85),YIONC(85),XION1(85),YION1(85),XION2(70),YION2(70),XION3(50),YION3(50),XION4(47),YION4(47),XION5(44),YION5(44),XKSH(81),YKSH(81),IOFFN(150),IOFFION(8),PJ(50)
      DIMENSION Z8T(25),EBRM(25)                          
      CHARACTER*50 SCRPT(300),SCRPTN(10)                          
      CHARACTER*25 NAME                                                 
#  ELASTIC  X-SECTIONS  ASSUMED ISOTROPIC BELOW 2.0EV
      DATA XELA/0.00,.001,.003,.005,.007,.010,.015,.020,.025,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.10,0.11,0.12,0.14,0.17,0.20,0.30,0.40,0.50,0.60,0.80,1.00,1.20,1.50,2.00,2.50,3.00,4.00,5.00,6.00,8.00,10.0,12.0,15.0,20.0,25.0,30.0,40.0,50.0,60.0,80.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,6000.,7000.,8000.,9000.,1.0D4,1.25D4,1.5D4,1.75D4,2.0D4,2.5'%.3f' %.0'%.3f' %.5D4,4.0D4,4.5D4,5.0D4,6.0D4,7.0D4,8.0D4,9.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5'%.3f' %.0'%.3f' %.5D5,4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,2.0D6,2.5'%.3f' %.0'%.3f' %.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5'%.3f' %.0'%.3f' %.5D7,4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,1.0D8,1.25D8,1.5D8,1.75D8,2.0D8,2.5'%.3f' %.0'%.3f' %.5D8,4.0D8,4.5D8,5.0D8,6.0D8,7.0D8,8.0D8,9.0D8,1.0D9/
# ELASTIC MOMENTUM TRANSFER
      DATA YMOM/0.15,0.17,0.18,0.19,0.21,0.24,0.31,0.45,0.70,1.20,2.35,3.00,3.40,3.60,3.65,3.70,3.73,3.77,3.79,3.83,3.86,3.90,3.95,4.00,4.02,4.21,4.86,5.74,6.44,6.80,6.58,6.37,6.05,5.80,5.70,5.65,5.60,5.55,5.50,5.45,5.40,5.30,5.15,4.85,4.50,4.10,3.55,3.05,2.43,1.94,1.60,1.34,.991,.768,.616,.507,.426,.364,.275,.216,.175,.145,.122,.0847,.0625,.0481,.0383,.0261,.0190,.0145,.0114,.00929,.00770,.00556,.00422,.00332,.00269,.00222,.00149,.00107,8.10D-4,6.37D-4,4.26D-4,3.07D-4,2.32D-4,1.83D-4,1.48D-4,1.23D-4,8.88D-5,6.77D-5,5.35D-5,4.36D-5,3.63D-5,2.47D-5,1.81D-5,1.40D-5,1.12D-5,7.79D-6,5.81D-6,4.55D-6,3.69D-6,3.07D-6,2.61D-6,1.97D-6,1.56D-6,1.27D-6,1.06D-6,9.04D-7,6.46D-7,4.88D-7,3.84D-7,3.11D-7,2.18D-7,1.62D-7,1.26D-7,1.01D-7,8.26D-8,6.91D-8,5.06D-8,3.88D-8,3.07D-8,2.50D-8,2.07D-8,1.39D-8,1.00D-8,7.57D-9,5.93D-9,3.94D-9,2.81D-9,2.11D-9,1.64D-9,1.31D-9,1.08D-9,7.61D-10,5.66D-10,4.38D-10,3.48D-10,2.83D-10,1.83D-10,1.27D-10,9.39D-11,7.20D-11,4.62D-11,3.21D-11,2.36D-11,1.81D-11,1.43D-11,1.16D-11,8.04D-12,5.91D-12,4.52D-12,3.57D-12,2.90D-12/
# ELASTIC 
      DATA YELA/0.15,0.17,0.18,0.19,0.21,0.24,0.31,0.45,0.70,1.20,2.35,3.00,3.40,3.60,3.65,3.70,3.73,3.77,3.79,3.83,3.86,3.90,3.95,4.00,4.02,4.21,4.86,5.74,6.44,6.80,6.58,6.37,6.21,6.58,7.03,7.48,7.96,8.82,9.31,9.34,9.11,9.36,9.15,8.46,7.66,6.85,5.96,5.20,4.50,3.92,3.56,3.27,2.84,2.53,2.29,2.09,1.93,1.80,1.59,1.42,1.29,1.18,1.09,.910,.784,.689,.614,.506,.430,.374,.331,.297,.269,.227,.197,.174,.155,.141,.114,.0961,.0832,.0735,.0598,.0506,.0440,.0391,.0352,.0322,.0275,.0242,.0217,.0198,.0183,.0155,.0137,.0124,.0114,.0100,.00913,.00850,.00803,.00767,.00739,.00698,.00670,.00649,.00634,.00622,.00601,.00588,.00580,.00574,.00567,.00562,.00560,.00558,.00556,.00555,.00554,.00553,.00552,.00552,.00552,.00551,.00551,.00551,.00551,.00551,.00551,.00551,.00551,22*.00550/
      DATA YEPS/30*1.0,1.0000,1.0000,.96137,.82331,.72073,.64268,.57229,.47655,.42962,.42099, .43201,.40075,.39681,.40896,.42569,.43895,.43546,.42459,.37079,.32162,.27516,.23726,.18398,.14816,.12316,.10538,.09155,.08026,.06441,.05351,.04563,.03969,.03507,.02705,.02196,.01844,.01587,.01240,.010154,.008595,.007441,.006561,.005865,.004834,.004110,.003572,.003159,.002830,.002244,.001857,.001582,.001378,.001092,.0009027,.0007678,.0006671,.0005892,5.269D-4,4.335D-4,3.669D-4,3.176D-4,2.790D-4,2.484D-4,1.933D-4,1.571D-4,1.313D-4,1.122D-4,8.584D-5,6.857D-5,5.647D-5,4.759D-5,4.079D-5,3.547D-5,2.768D-5,2.233D-5,1.847D-5,1.556D-5,1.331D-5,9.559D-6,7.186D-6,5.613D-6,4.510D-6,3.105D-6,2.270D-6,1.734D-6,1.369D-6,1.108D-6,9.156D-7,6.559D-7,4.931D-7,3.842D-7,3.079D-7,2.520D-7,1.648D-7,1.161D-7,8.6108D-8,6.6395D-8,4.2939D-8,2.9994D-8,2.2104D-8,1.6952D-8,1.3407D-8,1.0856D-8,7.519D-9,5.500D-9,4.188D-9,3.290D-9,2.648D-9,1.669D-9,1.142D-9,8.28D-10,6.26D-10,3.93D-10,2.68D-10,1.94D-10,1.47D-10,1.15D-10,9.1D-11,6.3D-11,4.5D-11,3.4D-11,2.7D-11,2.2D-11/
      DATA XROT13/.00178301,.001986,.002055,.002191,.002395,.002558,.002871,.003116,.003442,.003796,.004082,.004368,.004626,.004966,.005347,.005823,.006422,.007334,.008164,.009524,.01088,.01225,.01361,.01497,.01633,.01769,.01905,.02041,.02177,.02313,.02449,.02585,.02721,.02993,.03265,.03538,.03810,.04082,.04762,.05442,.06123,.06803,.08164,.09524,.1088,.1225,.1361,.1537,.1796,.2027,.2340,.2721,.3129,.3578,.4177,.4830,.5810,.6626,.7837,.9279,1.029,1.105,1.361/
# NOTE ALL ROTATIONAL X-SECTIONS IN DATA ARRAYS BELOW ARE  
#             SCALED BY 0.75 IN def
      DATA YROT13/1.D-5,.00476,.00505,.00536,.00545,.00550,.00550,.00545,.00524,.00505,.00485,.00462,.00481,.00550,.00677,.00944,.0129,.0191,.0235,.0308,.0392,.0462,.0532,.0616,.0728,.0826,.0924,.1022,.1148,.1260,.1400,.1540,.1680,.1904,.2184,.2464,.2856,.3304,.4200,.5180,.6160,.7140,.8960,1.064,1.232,1.358,1.498,1.646,1.826,1.957,2.055,2.204,2.248,2.299,2.299,2.220,2.094,1.982,1.851,1.728,1.610,1.534,1.263/
      DATA XROT35/.00320941,.003333,.003470,.004055,.004544,.005048,.005497,.005769,.006368,.007143,.008014,.009347,.01088,.01225,.01361,.01497,.01633,.01769,.01905,.02041,.02177,.02313,.02449,.02585,.02721,.02993,.03265,.03538,.03810,.04082,.04762,.05442,.06123,.06803,.08164,.09524,.1088,.1225,.1361,.1537,.1796,.2027,.2340,.2721,.3129,.3578,.4177,.4830,.5810,.6626,.7837,.9279,1.029,1.105,1.361/
      DATA YROT35/1.D-5,.00196,.00415,.00411,.00407,.00411,.00454,.00540,.00767,.01146,.01658,.02407,.02940,.03556,.04200,.04900,.05600,.06300,.07000,.07700,.08540,.09380,.1022,.1120,.1232,.1372,.1568,.1848,.2128,.2324,.2940,.3640,.4396,.5236,.6440,.7700,.8820,.9940,1.064,1.170,1.299,1.394,1.462,1.568,1.602,1.635,1.635,1.579,1.490,1.411,1.316,1.229,1.145,1.092,.8988/
      DATA XROT57/.00463581,.004762,.004898,.005170,.005442,.005783,.006123,.006803,.007483,.008164,.008844,.009524,.01088,.01225,.01361,.01497,.01633,.01769,.01905,.02041,.02177,.02313,.02449,.02585,.02721,.02993,.03265,.03538,.03810,.04082,.04762,.05442,.06123,.06803,.08164,.09524,.1088,.1225,.1361,.1537,.1796,.2027,.2340,.2721,.3129,.3578,.4177,.4830,.5810,.6626,.7837,.9279,1.029,1.105,1.361/
      DATA YROT57/1.D-5,.00280,.00286,.00308,.00330,.00356,.00420,.00588,.00812,.01092,.01344,.01680,.02296,.02884,.03416,.03920,.04536,.05180,.05880,.06580,.07280,.08120,.0882,.0952,.1036,.1232,.1400,.1596,.1932,.2100,.2839,.3500,.4144,.4844,.6048,.7196,.8316,.9184,1.011,1.112,1.235,1.322,1.389,1.490,1.520,1.554,1.554,1.501,1.414,1.338,1.252,1.168,1.089,1.036,.8540/
      DATA XROT79/.00606221,.006259,.006803,.007483,.008164,.008844,.009524,.01088,.01225,.01361,.01497,.01633,.01769,.01905,.02041,.02177,.02313,.02449,.02585,.02721,.02993,.03265,.03538,.03810,.04082,.04762,.05442,.06123,.06803,.08164,.09524,.1088,.1225,.1361,.1537,.1796,.2027,.2340,.2721,.3129,.3578,.4177,.4830,.5810,.6626,.7837,.9279,1.029,1.105,1.361/
      DATA YROT79/1.D-5,.00280,.00350,.00490,.00658,.00840,.01064,.01596,.02156,.02632,.03080,.03696,.04340,.04900,.05600,.06160,.06860,.07560,.08260,.0896,.1050,.1260,.1512,.1764,.1988,.2688,.3321,.3940,.4578,.5743,.6821,.7899,.8705,.9601,1.055,1.170,1.255,1.319,1.413,1.442,1.474,1.474,1.423,1.343,1.271,1.186,1.107,1.032,.9836,.8095/
      DATA XROT911/.00748861,.007619,.008164,.008844,.009524,.01088,.01225,.01361,.01497,.01633,.01769,.01905,.02041,.02177,.02313,.02449,.02585,.02721,.02993,.03265,.03538,.03810,.04082,.04762,.05442,.06123,.06803,.08164,.09524,.1088,.1225,.1361,.1537,.1796,.2027,.2340,.2721,.3129,.3578,.4177,.4830,.5810,.6626,.7837,.9279,1.029,1.105,1.361/
      DATA YROT911/1.D-5,.00280,.00336,.00420,.00546,.00910,.01316,.01764,.02100,.02632,.03136,.04077,.04200,.04760,.05600,.06160,.06720,.07560,.09240,.1148,.1344,.1568,.1820,.2436,.3136,.3780,.4379,.5496,.6524,.7557,.8330,.9190,1.010,1.120,1.201,1.261,1.352,1.379,1.410,1.410,1.362,1.285,1.216,1.135,1.060,.9878,.9411,.7748/
      DATA XROT1113/.00891501,.009456,.009524,.01088,.01225,.01361,.01497,.01633,.01769,.01905,.02041,.02177,.02313,.02449,.02585,.02721,.02993,.03265,.03538,.03810,.04082,.04762,.05442,.06123,.06803,.08164,.09524,.1088,.1225,.1361,.1537,.1796,.2027,.2340,.2721,.3129,.3578,.4177,.4830,.5810,.6626,.7837,.9279,1.029,1.105,1.361/
      DATA YROT1113/1.D-5,.00280,.00308,.00616,.01036,.01372,.01736,.02156,.02604,.03080,.03724,.04200,.04760,.05320,.06020,.06720,.08120,.1036,.1232,.1456,.1680,.2296,.2884,.3461,.4012,.5034,.5978,.6922,.7630,.8585,.9248,1.026,1.100,1.155,1.238,1.263,1.291,1.291,1.247,1.177,1.114,1.040,.9705,.9044,.8621,.7095/
      DATA XROT1315/.01034141,.01061,.01088,.01225,.01361,.01497,.01633,.01769,.01905,.02041,.02177,.02313,.02449,.02585,.02721,.02993,.03265,.03538,.03810,.04082,.04762,.05442,.06123,.06803,.08164,.09524,.1088,.1225,.1361,.1537,.1796,.2027,.2340,.2721,.3129,.3578,.4177,.4830,.5810,.6626,.7837,.9279,1.029,1.105,1.361/
      DATA YROT1315/1.D-5,.00280,.00364,.00700,.01036,.01344,.01708,.02100,.02576,.03024,.03500,.04060,.04620,.05096,.05712,.07420,.09240,.1120,.1316,.1512,.2100,.2660,.3192,.3699,.4642,.5513,.6384,.7036,.7762,.8532,.9458,1.014,1.065,1.142,1.165,1.191,1.191,1.151,1.085,1.027,.9590,.8952,.8341,.7949,.6544/
      DATA XROT1517/.01176781,.01197,.01225,.01361,.01497,.01633,.01769,.01905,.02041,.02177,.02313,.02449,.02585,.02721,.02993,.03265,.03538,.03810,.04082,.04762,.05442,.06123,.06803,.08164,.09524,.1088,.1225,.1361,.1537,.1796,.2027,.2340,.2721,.3129,.3578,.4177,.4830,.5810,.6626,.7837,.9279,1.029,1.105,1.361/
      DATA YROT1517/1.D-5,.00280,.00350,.00560,.00840,.01148,.01512,.02044,.02464,.02968,.03416,.03780,.04340,.04900,.06300,.08120,.09880,.1176,.1372,.1904,.2436,.2962,.3433,.4308,.5115,.5923,.6529,.7202,.7916,.8778,.9411,.9881,1.060,1.081,1.105,1.105,1.068,1.007,.9531,.8898,.8305,.7739,.7378,.6070/
      DATA XROT1719/.01319421,.01333,.01361,.01497,.01633,.01769,.01905,.02041,.02177,.02313,.02449,.02585,.02721,.02993,.03265,.03538,.03810,.04082,.04762,.05442,.06123,.06803,.08164,.09524,.1088,.1225,.1361,.1537,.1796,.2027,.2340,.2721,.3129,.3578,.4177,.4830,.5810,.6626,.7837,.9279,1.029,1.105,1.361/
      DATA YROT1719/1.D-5,.00280,.00336,.00518,.00770,.01022,.01400,.01764,.02128,.02548,.03080,.03556,.04200,.05460,.07000,.08680,.1064,.1274,.1736,.2226,.2762,.3202,.4018,.4771,.5525,.6090,.6717,.7383,.8187,.8777,.9216,.9881,1.008,1.031,1.031,.9957,.9392,.8890,.8299,.7747,.7220,.6881,.5663/
      DATA XROT1921/.01462061,.01497,.01633,.01769,.01905,.02041,.02177,.02313,.02449,.02585,.02721,.02993,.03265,.03538,.03810,.04082,.04762,.05442,.06123,.06803,.08164,.09524,.1088,.1225,.1361,.1537,.1796,.2027,.2340,.2721,.3129,.3578,.4177,.4830,.5810,.6626,.7837,.9279,1.029,1.105,1.361/
      DATA YROT1921/1.D-5,.00280,.00476,.00678,.01036,.01358,.01680,.01988,.02492,.03080,.03640,.04760,.06300,.07980,.09800,.1190,.1652,.2128,.2588,.3000,.3765,.4470,.5176,.5706,.6294,.6918,.7671,.8224,.8635,.9259,.9447,.9659,.9659,.9329,.8800,.8329,.7776,.7259,.6765,.6447,.5306/
      DATA XROT2123/.01604701,.01633,.01769,.01905,.02041,.02177,.02313,.02449,.02585,.02721,.02993,.03265,.03538,.03810,.04082,.04762,.05442,.06123,.06803,.08164,.09524,.1088,.1225,.1361,.1537,.1796,.2027,.2340,.2721,.3129,.3578,.4177,.4830,.5810,.6626,.7837,.9279,1.029,1.105,1.361/
      DATA YROT2123/1.D-5,.00280,.00448,.00700,.00980,.01288,.01624,.02016,.02464,.02940,.03920,.05320,.06720,.08960,.1106,.1554,.2017,.2435,.2822,.3541,.4206,.4869,.5368,.5921,.6507,.7216,.7736,.8123,.8711,.8887,.9086,.9086,.8775,.8280,.7834,.7316,.6829,.6364,.6065,.4992/
      DATA XROT2325/.01747341,.01769,.01905,.02041,.02177,.02313,.02449,.02585,.02721,.02993,.03265,.03538,.03810,.04082,.04762,.05442,.06123,.06803,.08164,.09524,.1088,.1225,.1361,.1537,.1796,.2027,.2340,.2721,.3129,.3578,.4177,.4830,.5810,.6626,.7837,.9279,1.029,1.105,1.361/
      DATA YROT2325/1.D-5,.00280,.00504,.00784,.01064,.01456,.01904,.02380,.02884,.03836,.05209,.06580,.08792,.1084,.1523,.1977,.2388,.2768,.3472,.4124,.4774,.5264,.5807,.6381,.7076,.7585,.7966,.8540,.8714,.8910,.8910,.8607,.8117,.7683,.7174,.6695,.6241,.5947,.4894/
      DATA XROT2527/.01889981,.01905,.02041,.02177,.02313,.02449,.02585,.02721,.02993,.03265,.03538,.03810,.04082,.04762,.05442,.06123,.06803,.08164,.09524,.1088,.1225,.1361,.1537,.1796,.2027,.2340,.2721,.3129,.3578,.4177,.4830,.5810,.6626,.7837,.9279,1.029,1.105,1.361/
      DATA YROT2527/1.D-5,.00280,.00504,.00868,.01288,.01568,.02072,.02576,.03752,.05096,.06468,.08624,.1064,.1495,.1939,.2342,.2715,.3408,.4046,.4684,.5163,.5696,.6261,.6941,.7442,.7815,.8378,.8548,.8742,.8742,.8442,.7963,.7538,.7036,.6569,.6121,.5835,.4802/
      DATA XROT2729/.02032621,.02041,.02177,.02313,.02449,.02585,.02721,.02993,.03265,.03538,.03810,.04082,.04762,.05442,.06123,.06803,.08164,.09524,.1088,.1225,.1361,.1537,.1796,.2027,.2340,.2721,.3129,.3578,.4177,.4830,.5810,.6626,.7837,.9279,1.029,1.105,1.361/
      DATA YROT2729/1.D-5,.00280,.00490,.00980,.01344,.01904,.02296,.03360,.04900,.06300,.08459,.1044,.1467,.1903,.2299,.2664,.3343,.3970,.4598,.5068,.5589,.6143,.6812,.7302,.7669,.8224,.8389,.8576,.8576,.8285,.7815,.7398,.6905,.6446,.6009,.5726,.4712/
      DATA XROT2931/.02175261,.02177,.02313,.02449,.02585,.02721,.02993,.03265,.03538,.03810,.04082,.04762,.05442,.06123,.06803,.08164,.09524,.1088,.1225,.1361,.1537,.1796,.2027,.2340,.2721,.3129,.3578,.4177,.4830,.5810,.6626,.7837,.9279,1.029,1.105,1.361/
      DATA YROT2931/1.D-5,.00280,.00378,.01008,.01456,.01904,.03136,.04704,.06104,.08305,.1025,.1440,.1868,.2257,.2615,.3282,.3898,.4514,.4976,.5488,.6031,.6686,.7168,.7529,.8072,.8235,.8420,.8420,.8134,.7672,.7260,.6779,.6328,.5897,.5620,.4626/
      DATA XROT3133/.02317901,.02449,.02585,.02721,.02993,.03265,.03538,.03810,.04082,.04762,.05442,.06123,.06803,.08164,.09524,.1088,.1225,.1361,.1537,.1796,.2027,.2340,.2721,.3129,.3578,.4177,.4830,.5810,.6626,.7837,.9279,1.029,1.105,1.361/
      DATA YROT3133/1.D-5,.00280,.00784,.01232,.03080,.04620,.05995,.08156,.1007,.1414,.1835,.2216,.2568,.3223,.3828,.4432,.4886,.5390,.5922,.6566,.7039,.7392,.7927,.8086,.8268,.8268,.7988,.7535,.7132,.6658,.6213,.5790,.5519,.4542/
      DATA XROT3335/.02460541,.02585,.02721,.02993,.03265,.03538,.03810,.04082,.04762,.05442,.06123,.06803,.08164,.09524,.1088,.1225,.1361,.1537,.1796,.2027,.2340,.2721,.3129,.3578,.4177,.4830,.5810,.6626,.7837,.9279,1.029,1.105,1.361/
      DATA YROT3335/1.D-5,.00280,.00518,.02800,.04480,.05656,.07700,.09887,.1389,.1802,.2177,.2523,.3167,.3760,.4355,.4799,.5258,.5818,.6451,.6916,.7263,.7787,.7944,.8123,.8123,.7846,.7400,.7006,.6541,.6104,.5690,.5421,.4463/
      DATA XROT3537/.02603181,.02721,.02993,.03265,.03538,.03810,.04082,.04762,.05442,.06123,.06803,.08164,.09524,.1088,.1225,.1361,.1537,.1796,.2027,.2340,.2721,.3129,.3578,.4177,.4830,.5810,.6626,.7837,.9279,1.029,1.105,1.361/
      DATA YROT3537/1.D-5,.00280,.02576,.04200,.05488,.07566,.09717,.1365,.1771,.2139,.2479,.3111,.3696,.4278,.4715,.5167,.5718,.6339,.6796,.7137,.7652,.7806,.7983,.7983,.7708,.7272,.6882,.6427,.5998,.5592,.5328,.4385/
      DATA XROT3739/.02745821,.02857,.02993,.03265,.03538,.03810,.04082,.04762,.05442,.06123,.06803,.08164,.09524,.1088,.1225,.1361,.1537,.1796,.2027,.2340,.2721,.3129,.3578,.4177,.4830,.5810,.6626,.7837,.9279,1.029,1.105,1.361/
      DATA YROT3739/1.D-5,.00280,.02532,.04127,.05396,.07437,.09551,.1342,.1741,.2103,.2437,.3058,.3632,.4206,.4634,.5079,.5620,.6230,.6681,.7014,.7521,.7675,.7846,.7846,.7577,.7148,.6765,.6317,.5897,.5494,.5236,.4309/
      DATA XROT3941/.02888461,.02993,.03265,.03538,.03810,.04082,.04762,.05442,.06123,.06803,.08164,.09524,.1088,.1225,.1361,.1537,.1796,.2027,.2340,.2721,.3129,.3578,.4177,.4830,.5810,.6626,.7837,.9279,1.029,1.105,1.361/
      DATA YROT3941/1.D-5,.00280,.03780,.05306,.07311,.09391,.1320,.1712,.2067,.2396,.3007,.3570,.4136,.4556,.4995,.5524,.6126,.6569,.6896,.7395,.7546,.7714,.7714,.7451,.7028,.6653,.6210,.5796,.5404,.5149,.4236/
      DATA XROT4143/.03031101,.03129,.03265,.03538,.03810,.04082,.04762,.05442,.06123,.06803,.08164,.09524,.1088,.1225,.1361,.1537,.1796,.2027,.2340,.2721,.3129,.3578,.4177,.4830,.5810,.6626,.7837,.9279,1.029,1.105,1.361/
      DATA YROT4143/1.D-5,.00280,.03500,.05219,.07190,.09237,.1298,.1683,.2033,.2357,.2957,.3511,.4068,.4480,.4914,.5435,.6026,.6460,.6782,.7272,.7420,.7588,.7588,.7328,.6913,.6544,.6110,.5701,.5314,.5065,.4166/
      DATA XROT4345/.03173741,.03265,.03538,.03810,.04082,.04762,.05442,.06123,.06803,.08164,.09524,.1088,.1225,.1361,.1537,.1796,.2027,.2340,.2721,.3129,.3578,.4177,.4830,.5810,.6626,.7837,.9279,1.029,1.105,1.361/
      DATA YROT4345/1.D-5,.00280,.05040,.07073,.09086,.1277,.1656,.2000,.2318,.2909,.3455,.4001,.4407,.4836,.5345,.5928,.6353,.6672,.7154,.7300,.7465,.7465,.7210,.6801,.6437,.6009,.5608,.5228,.4981,.4099/
      DATA XROT4547/.03316381,.03402,.03538,.03810,.04082,.04762,.05442,.06123,.06803,.08164,.09524,.1088,.1225,.1361,.1537,.1796,.2027,.2340,.2721,.3129,.3578,.4177,.4830,.5810,.6626,.7837,.9279,1.029,1.105,1.361/
      DATA YROT4547/1.D-5,.00280,.04760,.06961,.08940,.1256,.1630,.1968,.2281,.2862,.3399,.3937,.4337,.4757,.5261,.5832,.6252,.6566,.7039,.7182,.7344,.7344,.7095,.6692,.6334,.5914,.5519,.5144,.4903,.4035/
      DATA XROT4749/.03459021,.03538,.03810,.04082,.04762,.05442,.06123,.06803,.08164,.09524,.1088,.1225,.1361,.1537,.1796,.2027,.2340,.2721,.3129,.3578,.4177,.4830,.5810,.6626,.7837,.9279,1.029,1.105,1.361/
      DATA YROT4749/1.D-5,.00280,.04480,.08800,.1236,.1604,.1937,.2246,.2817,.3346,.3875,.4270,.4682,.5177,.5740,.6154,.6462,.6930,.7070,.7230,.7230,.6983,.6586,.6233,.5821,.5432,.5062,.4824,.3970/
      DATA XVIB/.193,0.20,0.21,0.23,0.32,0.33,0.35,0.44,0.45,0.47,0.56,0.57,0.59,0.68,0.69,0.71,0.79,0.80,0.82,0.90,           0.91,0.93,1.02,1.03,1.05,1.13,1.14,1.16,1.23,1.24,           1.26,1.34,1.35,1.37,1.44,1.45,1.47,1.54,1.55,1.57,           1.63,1.65,1.67,3.00,4.00,5.00,6.00,7.00,8.00,9.00,           9.50,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0/    
#       
      DATA YVIB1/0.00,.050,.050,0.00,0.00,.800,0.00,0.00,1.00,0.00,0.00,1.35,0.00,0.00,1.32,0.00,0.00,1.02,0.00,0.00,           .611,0.00,0.00,.290,0.00,0.00,.115,0.00,0.00,.049,           0.00,0.00,.017,0.00,0.00,.0056,0.00,0.00,.0019,0.00,         0.00,.0006,0.00,.027,.033,.055,.115,.220,.321,.412,          .458,.458,.366,.266,.179,.119,.078,.046,.023,.011/
      DATA YVIB2/0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,     0.00,.142,0.00,0.00,.422,0.00,0.00,.544,0.00,0.00,                .473,0.00,0.00,.321,0.00,0.00,.204,0.00,0.00,.097,                0.00,0.00,.041,0.00,0.00,.018,0.00,0.00,.008,0.00,                0.00,.003,0.00,.0110,.0128,.0220,.0458,.0879,.128,.165,.183,.183,.147,.106,.071,.048,.032,.018,.0092,.0046/             
      DATA YVIB3/0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,     0.00,0.00,0.00,0.00,.0038,0.00,0.00,.0219,0.0,0.0,                .092,0.00,0.00,.122,0.00,0.00,.117,0.00,0.00,.097,                0.00,0.00,.056,0.00,0.00,.031,0.00,0.00,.0168,0.00,               0.00,.008,0.00,.0043,.0063,.0108,.0224,.0429,.0627,.0806,       .090,.090,.0716,.0519,.0349,.0233,.0153,.0090,.0047,.0022/ 
      DATA YVIB4/0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,     0.00,0.00,0.00,0.00,0.00,0.00,0.00,.0015,0.00,0.0,                .0056,0.00,0.0,.0097,0.00,0.0,.0168,0.00,0.0,.0321,               0.00,0.00,.0341,0.0,0.00,.0290,0.00,0.0,.0219,0.00,               0.00,.0168,0.00,.00258,.00376,.00645,.0134,.0257,.0376,.0483,  .0537,.0537,.0429,.0311,.0210,.0139,.0092,.00537,.00269,.00134/  
      DATA YVIB5/40*0.0,0.00,0.00,0.00,.00172,.00250,.00429,.00895,.0172,.0250,.0323,.0358,.0358,.0287,.0208,.0139,.00931,.00608,.00358,.00179,.00090/
      DATA YVIB6/40*0.0,0.0,0.0,0.0,.00108,.00157,.00269,.00560,.0108,.0157,.0201,.0224,.0224,.0179,.0130,.00873,.00582,.00381,.00224,.00112,.00056/
      DATA YVIB7/40*0.0,0.0,0.0,0.0,.000738,.00108,.00184,.00385,.00738,.0108,.0138,.0154,.0154,.0123,.00891,.00599,.00400,.00261,.00154,.000768,.000385/
      DATA YVIB8/40*0.0,0.0,0.0,0.0,.000572,.000833,.00142,.00298,.00572,.00833,.0107,.0119,.0119,.00952,.00691,.00464,.00309,.00202,.00119,.000595,.000297/
      DATA YVIB9/40*0.0,0.0,0.0,0.0,.000459,.000670,.00115,.00239,.00459,.00670,.00858,.00956,.00956,.00765,.00555,.00373,.00248,.00163,.000956,.000478,.000239/
      DATA YVIB10/40*0.0,0.0,0.0,0.0,.000368,.000537,.000921,.00192,.00368,.00537,.00691,.00767,.00767,.00614,.00445,.00299,.00199,.00130,.000767,.000384,.000192/
      DATA YVIB11/40*0.0,0.0,0.0,0.0,.000209,.000304,.000521,.00109,.00209,.00304,.00391,.00434,.00434,.00348,.00252,.00170,.00113,.000739,.000434,.000218,.000109/
      DATA YVIB12/40*0.0,0.0,0.0,0.0,.000153,.000224,.000384,.000799,.00154,.00224,.00288,.00319,.00319,.00255,.00185,.00124,.000830,.000543,.000319,.000160,.0000799/
      DATA YVIB13/40*0.0,0.0,0.0,0.0,.000123,.000179,.000306,.000638,.00122,.00179,.00230,.00255,.00255,.00205,.00149,.000996,.000664,.000434,.000255,.000127,.0000639/
      DATA YVIB14/40*0.0,0.0,0.0,0.0,.000086,.000125,.000215,.000448,.000860,.00125,.00161,.00179,.00179,.00143,.00104,.000698,.000466,.000304,.000179,.000090,.000045/
      DATA YVIB15/40*0.0,.0,0.0,0.0,6.16D-5,8.97D-5,.000154,.000321,.000616,.000897,.00115,.00128,.00128,.00103,.000744,.000500,.000334,.000218,.000128,.000064,.0000321/
      DATA YVIB16/40*0.0,.0,0.0,0.0,5.51D-5,8.05D-5,.000138,.000287,.000551,.000805,.00104,.00115,.00115,.000920,.000666,.000449,.000299,.000195,.000115,.0000575,.0000288/
      DATA YVIB17/40*0.0,.0,.0,0.0,4.93D-5,7.19D-5,.000123,.000257,.000493,.000719,.000925,.00103,.00103,.000822,.000596,.000401,.000268,.000175,.000103,.0000514,.0000257/
      DATA YVIB18/40*0.0,.0,.0,0.0,4.34D-5,6.34D-5,.000109,.000227,.000434,.000634,.000815,.000906,.000906,.000724,.000525,.000353,.000235,.000154,.0000906,.0000453,.0000226/
      DATA YVIB19/40*0.0,.0,.0,0.0,3.66D-5,5.34D-5,9.16D-5,.000191,.000366,.000534,.000687,.000763,.000763,.000611,.000443,.000297,.000198,.000129,.0000763,.0000382,.0000191/
      DATA YVIB20/40*0.0,.0,.0,0.0,3.07D-5,4.49D-5,7.69D-5,.000160,.000307,.000449,.000577,.000641,.000641,.000513,.000371,.000250,.000167,.000109,.0000641,.0000321,.0000160/
      DATA YVIB21/40*0.0,0.0,0.0,0.0,.000116,.000170,.000292,.000607,.00117,.00170,.00219,.00243,.00243,.00194,.00141,.000948,.000632,.000413,.000243,.000121,.0000607/
# USED RAPP NORMALISED TO LINDSAY AT MAXIMUM (110EV)  : ABOVE
# MAXIMUM USED LINDSAY TO 1KEV : NORMALISED SCHRAM TO 16KEV
# : MATRIX ELEMENTS FROM RIEKE AND BERKOWITZ ANALYSIS 
# NB.ALL CROSS SECTIONS ADJUSTED TO GIVE COUNTING IONISATION. 
      DATA XIONC/12.071,12.5,13.0,13.5,14.0,14.5,15.0,15.5,16.0,16.5,   17.0,17.5,18.0,18.5,19.0,19.5,20.0,20.5,21.0,21.5,                22.0,24.0,26.0,28.0,30.0,32.0,34.0,36.0,40.0,45.0,                50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,108.,118.,138.,158.,178.,198.,223.,248.,273.,                298.,348.,398.,448.,498.,548.,598.,648.,698.,748.,  798.,848.,898.,948.,998.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,10000.,12000.,14000.,16000./ 
# COUNTING IONISATION   
      DATA YIONC/0.0,.0052,.0117,.024,.034,.047,.061,.073,.087,.105,    .124,.143,.164,.184,.205,.225,.247,.269,.290,.312,                .336,.435,.538,.641,.754,.873,.981,1.09,1.26,1.49,                1.69,1.84,1.97,2.07,2.16,2.23,2.28,2.34,2.37,2.40,2.42,2.45,2.45,2.42,2.40,2.34,2.28,2.19,2.12,2.01,1.94,1.80,1.68,1.56,1.46,1.38,1.30,1.24,1.19,1.12,1.06,1.03,.987,.950,.922,.805,.718,.645,.587,.540,                .457,.393,.347,.310,.284,.262,.240,.224,.196,.178,.162,.149,.127,.112,.101/    
# IONISATION TO O2+   ASYMPTOTIC 64.75% OF COUNTING IONISATION
      DATA XION1/12.071,12.5,13.0,13.5,14.0,14.5,15.0,15.5,16.0,16.5,  17.0,17.5,18.0,18.5,19.0,19.5,20.0,20.5,21.0,21.5,22.0,24.0,26.0,28.0,30.0,32.0,34.0,36.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,108.,118.,138.,158.,178.,198.,223.,248.,273.,                298.,348.,398.,448.,498.,548.,598.,648.,698.,748.,  798.,848.,898.,948.,998.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,10000.,12000.,14000.,16000./ 
      DATA YION1/0.0,.0052,.0117,.024,.034,.047,.061,.073,.087,.105,    .124,.143,.164,.184,.205,.225,.247,.269,.288,.306,   .326,.406,.486,.563,.640,.723,.795,.872,.980,1.12,                1.25,1.32,1.39,1.43,1.47,1.50,1.51,1.53,1.53,1.53,1.54,1.54,1.53,1.50,1.48,1.53,1.39,1.34,1.31,1.24,1.20,1.13,1.05,.983,.923,.882,.827,.800,.761,.720,.686,.671,.643,.617,.597,.522,.465,.418,.380,.350,.296,.255,.225,.201,.184,.170,.155,.145,.127,.115,                .105,.0965,.0823,.0726,.0654/
# SINGLE IONISATION TO O+ ASYMPTOTIC 29.93% OF COUNTING IONISATION
      DATA XION2/20.701,21.0,21.5,22.0,22.5,23.0,24.0,26.0,28.0,30.0,32.0,34.0,36.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,108.,118.,138.,158.,178.,198.,223.,248.,273.,298.,348.,398.,448.,498.,548.,598.,648.,698.,748.,798.,848.,898.,948.,998.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,10000.,12000.,14000.,16000./
      DATA YION2/0.0,.00218,.00582,.0094,.0131,.0167,.0287,.0531,.0781,.114,.151,.186,.222,.281,.353,.428,.486,.541,.593,.633,.661,.692,.723,.741,.758,.767,.785,.786,.780,.770,.759,.736,.709,.680,.648,.620,.570,.530,.490,.459,.426,.398,.376,.361,.338,.321,.309,.292,.284,.276,.241,.215,.193,.176,.162,.137,.118,.104,.0928,.0850,.0784,.0718,.0670,.0587,.0533,.0485,.0446,.0380,.0335,.0302/
# DOUBLE IONISATION TO O+ + O+ FROM  TIAN AND VIDAL 
# ASYMPTOTIC EXTENSION  4.46% OF COUNTING IONISATION.
      DATA XION3/38.46,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,10000.,12000.,14000.,16000./
      DATA YION3/0.0,.0099,.0207,.0409,.0615,.0793,.0966,.110,.129,.136,.132,.128,.121,.113,.106,.100,.0885,.0804,.0718,.0667,.0607,.0592,.0560,.0538,.0504,.0478,.0460,.0435,.0423,.0411,.0359,.0320,.0288,.0262,.0241,.0204,.0176,.0155,.0138,.0127,.0117,.0107,.00998,.00875,.00794,.00723,.00665,.00566,.00499,.00450/
# DOUBLE IONISATION TO O++ + O   FROM TIAN AND VIDAL AND LINDSAY
# ASYMTOTIC EXTENSION 0.61% OF COUNTING IONISATION
      DATA XION4/68.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,10000.,12000.,14000.,16000./
      DATA YION4/0.0,.000561,.00176,.00453,.00568,.0106,.0128,.0141,.0152,.0149,.0144,.0140,.0129,.0122,.0113,.0103,.00932,.00837,.00805,.00762,.00732,.00685,.00650,.00626,.00592,.00575,.00559,.00488,.00435,.00392,.00356,.00328,.00277,.00239,.00211,.00188,.00173,.00159,.00146,.00136,.00119,.00108,.000983,.000904,.000770,.000679,.000612/     
# TREBLE IONISATION TO  O++ + O+  FROM TIAN AND VIDAL
# ASYMPTOTIC EXTENSION 0.25% OF COUNTING IONISATION
      DATA XION5/90.0,100.,125.,150.,175.,200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,10000.,12000.,14000.,16000./
      DATA YION5/0.0,.000565,.00248,.00466,.00619,.00712,.00761,.00763,.00733,.00711,.00627,.00554,.00477,.00414,.00371,.00329,.00311,.00299,.00280,.00266,.00256,.00242,.00235,.00228,.00199,.00178,.00160,.00145,.00134,.00113,.000977,.000862,.000768,.000707,.000650,.000597,.000556,.000486,.000441,.000402,.000369,.000315,.000278,.000250/  
# OXYGEN K-SHELL IONISATION X-SECTION (MULTIPLY BY 2 FOR MOLECULE)
      DATA XKSH/532.,541.,557.,574.,591.,609.,627.,646.,665.,685.,706.,727.,749.,793.,841.,891.,944.,1000.,1090.,1188.,1296.,1496.,1679.,1884.,2054.,2238.,2512.,2985.,3981.,5012.,7079.,1.00D4,1.50D4,2.05D4,2.51'%.3f' %.07D4,4.10D4,5.01D4,6.13D4,7.08D4,8.18D4,1.00D5,1.54D5,2.05D5,2.99D5,4.10D5,5.01D5,6.13D5,7.08D5,8.18D5,1.00D6,1.25D6,1.50D6,2.05'%.3f' %.07D6,4.10D6,5.01D6,6.13D6,7.08D6,8.18D6,1.00D7,1.26D7,1.50D7,2.05'%.3f' %.07D7,4.10D7,5.01D7,6.13D7,7.08D7,8.18D7,1.00D8,1.26D8,1.50D8,2.05'%.3f' %.07D8,4.10D8,5.01D8,6.13D8,7.08D8,8.18D8,1.00D9/
      DATA YKSH/0.00,3.31D-5,8.86D-5,1.42D-4,1.95D-4,2.45D-4,2.94D-4,3.41D-4,3.87D-4,4.31D-4,4.73D-4,5.14D-4,5.53D-4,6.27D-4,6.95D-4,7.56D-4,8.13D-4,8.63D-4,9.29D-4,9.84D-4,1.03D-3,1.08D-3,1.10D-3,1.11D-3,1.11D-3,1.10D-3,1.08D-3,1.03D-3,9.24D-4,8.27D-4,6.81D-4,5.49D-4,4.18D-4,3.35D-4,2.90D-4,2.50D-4,2.04D-4,1.77D-4,1.53D-4,1.39D-4,1.26D-4,1.11D-4,8.62D-5,7.45D-5,6.36D-5,5.75D-5,5.48D-5,5.29D-5,5.20D-5,5.13D-5,5.08D-5,5.08D-5,5.12D-5,5.24D-5,5.47D-5,5.68D-5,5.84D-5,6.00D-5,6.13D-5,6.26D-5,6.44D-5,6.65D-5,6.81D-5,7.11D-5,7.50D-5,7.78D-5,7.97D-5,8.17D-5,8.31D-5,8.45D-5,8.65D-5,8.87D-5,9.04D-5,9.36D-5,9.75D-5,1.00D-4,1.02D-4,1.04D-4,1.06D-4,1.07D-4,1.09D-4/
# BREMSSTRAHLUNG X-SECTION WITH CUT OFF UNITS 10**-24 CM**2
      DATA Z8T/477.,294.,145.,81.6,45.8,21.2,12.2,7.69,5.22,4.76,4.84,4.99,5.10,5.20,5.27,5.38,5.46,5.58,5.65,5.72,5.77,5.80,5.81,5.83,5.84/
      DATA EBRM/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,4.E7,5.E7,6.E7,8.E7,1.E8/
#  THREE BODY ATTACHMENT 
#  TABLE IN UNITS OF 10**-16 FOR P=760 TORR AND T=20 CELSIUS               
      DATA X3ATT/0.058,.065,.073,.083,.089,.095,.103,.109,0.20,0.21,0.23,0.32,0.33,0.35,0.44,0.45,0.47,0.56,0.57,0.59,0.68,0.69,0.71,0.79,0.80,0.82,0.90,0.91,0.93,1.02,1.03,1.05/
      DATA Y3ATT/.000,.0704,.1394,.4477,.1042,.2091,.4477,.000,.000,.0934,.000,.000,.0602,.000,.000,.0380,.000,.000,.0288,.000,.000,.0210,.000,.000,.0184,.000,.000,.0144,.000,.000,.0110,.000/    
#  DISSOCIATIVE ATTACHMENT    RAPP AND BRIGLIA 
#    SCALED BY *0.72 AND ENERGY OFFSET BY -0.3EV
      DATA XATT/3.90,4.10,4.30,4.50,4.70,4.90,5.10,5.30,5.50,5.70,      5.90,6.00,6.10,6.20,6.30,6.40,6.50,6.70,6.90,7.10,                7.30,7.50,7.70,7.90,8.10,8.30,8.50,8.70,9.10,9.70,                11.7/                                                
      DATA YATT/0.00,.000187,.000504,.000950,.00158,.00259,.00386,.00538,.00690,.00821,                                            .00943,.00979,.01008,.01015,.01008,.00986,.00965,.00864,.00763,.00646,     .00531,.00411,.00323,.00240,.00171,.00120,.000886,.000634,.000382,.000202,.000072/                                  
#  EXCITATION TO VIBRATIONALLY SUMMED A1 DELTA G   ALLAN 1995
# SCALED BY 1/E**2 ABOVE 40 EV
      DATA XEXC1/.977,0.982,1.20,1.50,2.00,2.50,3.00,3.50,4.00,4.50,5.00,5.50,6.00,6.50,7.00,7.50,8.00,8.50,9.00,9.50,10.0,10.5,11.0,11.5,12.0,12.5,13.0,13.5,14.0,15.0,16.0,17.0,18.0,20.0,22.0,25.0,28.0,31.0,35.0,40.0/
      DATA YEXC1/0.00,.00102,.00407,.00712,.0122,.0168,.0265,.0397,.0539,.0661,.0783,.0906,.0977,.0997,.0987,.0967,.0936,.0906,.0865,.0834,.0794,.0763,.0743,.0722,.0692,.0682,.0651,.0621,.0605,.0539,.0488,.0448,.0407,.0346,.0305,.0249,.0214,.0188,.0153,.0122/
#  EXCITATION TO VIBRATIONALLY SUMMED  B1 SIGMA G+  ALLAN 1995  
# SCALED BY 1/E**2 ABOVE 17 EV     
      DATA XEXC2/1.627,1.640,2.00,2.50,3.00,3.50,4.00,4.50,5.00,5.50,6.00,6.50,7.00,7.50,8.00,8.50,9.00,9.50,10.0,10.5,11.0,12.0,13.0,14.0,15.0,17.0,20.0,25.0,30.0,35.0,40.0/
      DATA YEXC2/0.0,.00102,.00214,.00407,.00651,.00916,.0116,.0153,.0198,.0234,.0254,.0244,.0224,.0214,.0204,.0193,.0188,.0183,.0178,.0173,.0168,.0163,.0153,.0148,.0142,.0132,.0112,.00906,.00733,.00631,.00519/
# EXCITATION SUM OF C1SIGMA A#3DELTA AND A3SIGMA  HERZBERG CONTINUUM
# SPLIT INTO THREE ENERGY LOSSES AT 5.5 6.0 AND 6.5 EV
# PART1
      DATA XEXC3/5.50,6.00,6.50,7.00,7.50,8.00,9.00,10.0,11.0,12.0,14.0,16.0,18.0,20.0,30.0,45.0/
      DATA YEXC3/0.00,.0224,.0224,.0244,.0285,.0305,.0356,.0366,.0366,.0356,.0326,.0305,.0295,.0265,.0163,.0116/
# PART 2
      DATA XEXC4/6.00,6.50,7.00,7.50,8.00,9.00,10.0,11.0,12.0,14.0,16.0,18.0,20.0,30.0,45.0/
      DATA YEXC4/0.00,.0448,.0549,.0560,.0611,.0712,.0733,.0733,.0733,.0672,.0631,.0590,.0539,.0315,.0234/
# PART 3
      DATA XEXC5/6.50,7.00,7.50,8.00,9.00,10.0,11.0,12.0,14.0,16.0,18.0,20.0,30.0,45.0/
      DATA YEXC5/0.00,.0183,.0254,.0305,.0356,.0366,.0366,.0356,.0326,.0305,.0295,.0265,.0163,.0116/  
# SUM OF TRIPLET STATES AT 8.20 EV AND RESONANT PART OF S-R CONTINUUM
      DATA XEXC6/8.20,10.0,11.0,12.0,13.0,15.0,17.0,20.0,23.0,27.0,30.0,40.0,50.0,80.0/
      DATA YEXC6/0.00,0.21,0.36,0.46,0.50,0.52,0.52,0.46,0.39,0.32,0.29,0.24,.205,.135/
# RESONANT PART OF LONG BAND
      DATA XEXC7/9.972,11.0,12.0,14.0,16.0,18.0,20.0,24.0,28.0,32.0,36.0,40.0,60.0,80.0/
      DATA YEXC7/0.00,.022,.038,.050,.053,.055,.056,.051,.042,.035,.030,.026,.017,.013/
# TRIPLET STATE SUM BELOW IONISATION
      DATA XEXC8/10.6,12.0,13.0,14.0,16.0,18.0,20.0,24.0,28.0,32.0,36.0,40.0,50.0,60.0,80.0/         
      DATA YEXC8/0.0,.0878,.130,.145,.159,.169,.173,.156,.135,.111, .097,.087,.067,.055,.040/       
# TRIPLET STATE SUM ABOVE IONISATION
      DATA XEXC9/13.1,14.0,15.0,16.0,18.0,20.0,24.0,28.0,32.0,36.0,40.0,50.0,60.0,80.0/       
      DATA YEXC9/0.0,.0658,.122,.142,.157,.169,.174,.163,.146,.125,.111,.087,.073,.054/          
# ROTATIONAL RESONANCE FROM VIBRATIONS (PHELPS)                      
      DATA XROT/.020,.021,.025,0.07,0.08,0.10,0.20,0.21,0.22,0.32,0.33,0.35,0.44,0.45,0.47,0.56,0.57,0.59,0.68,0.69,0.71,0.79,0.80,0.82,0.90,0.91,0.93,1.02,1.03,1.05,1.13,1.14,1.16,1.23,1.24,1.26,1.34,1.35,1.37,1.44,1.45,1.47,1.54,1.55,1.57,1.64,1.65,1.67/                         
      DATA YROT/0.00,0.00,0.00,0.00,.0054,.00,0.00,.0216,.00,.000,.0384,.00,0.00,.054,0.00,0.00,.067,0.00,0.00,0.08,0.00,0.00,.094,0.00,0.00,.084,0.00,0.00,.072,0.00,0.00,.047,0.00,0.00,.040,0.00,0.00,.036,0.00,0.00,.024,0.00,0.00,.012,0.00,0.00,.0048,0.00/
# ----------------------------------------------------------------------
# 2005:
#--------
#  X-SECTIONS DERIVED FROM LAWTON AND PHELPS : J.CHEM.PHYS. 69(1978)1055
#  VIBRATIONAL X-SECTION ADJUSTED TO FIT ARGON MIXTURE DATA OF:
#  JEON AND NAKAMURA  J.APPL.PHYS D 31(1998) 2145-2150
#  ELASTIC X-SECTION DERIVED FROM FIT TO PURE OXYGEN DATA OF:
#  JEON AND NAKAMURA  (AS ABOVE)  AT HIGH FIELD ,
#  AND THE DATA AT LOW FIELD OF :
#  CROMPTON AND ELFORD AUST. J. PHYS. 26(1973)771-782
#  REID AND CROMPTON   AUST. J. PHYS. 33(1980)215-216  
#  N.B THE 3-BODY ATTACHMENT X-SECTION IS INCLUDED IN THE def.           
#  ------------------------------------------------------------------
# 2015:
#-------
#  UPDATED FIT TO ABOVE DATA NOW ALSO  INCLUDES TOWNS# end DATA UP TO 
#  2000TD FROM :
#  YOSHIDA ET AL  J.PHYS.D.29(1996)2124
#
#  ALSO USED OSCILLATOR STRENGTH FOR DIPOLE STATES FROM BRION DATA BASE
#  AND IONISATION EFFICIENCY FROM :
#  HOLLAND ET AL  CHEM. PHYS 173(1993)315
#
#  IN ORDER TO EXTRACT NEUTRAL DISSOCIATION X-SECTION FOR DIPOLE STATES.
#  THE 3-BODY X-SECTION SHAPE IS SIMILAR TO THAT USED IN 2005 FROM:
#  SPENCE AND SHULTZ  PHYS REV A5(1972)724 
#
#  THE FIT TO THE TOWNS# end REQUIRED THE INTRODUCTION OF TWO EFFECTIVE
#  NON DIPOLE STATES ABOVE AND BELOW THE IONISATION ENERGY THAT CONTAIN
#  THE SUM OF ALL NON DIPOLE STATES IN THESE ENERGY REGIONS.
#
# THE IONISATION HAS BEEN SPLIT INTO DISSOCIATIVE AND NON DISSOCIATIVE
# IONISATION CHANNELS. THE TOTAL IONISATION X-SECTION SUM IS MADE 
# CONSISTENT WITH :
# STRAUB ET AL : WEB SITE AND ALSO PHYS REV A54(1996)2146
# 
# THE TOTAL X-SECTION SUM IS WITHIN THE 1 TO 2% EXPERIMENTAL ENERGY
# MEASUREMENT ERRORS
#
# GENERALLY THE CALCULATED DRIFT VELOCITY AND DIFFUSION IS WITHIN
# 1 TO 2% OF THE EXPERIMENTAL VALUES IN PURE GAS AND ARGON MIXTURES.
# THE TOWNS# end IS WITHIN 5% OF THE MEASUREMENTS OF YOSHIDA UP TO 2000TD
#
# THE X-SECTION DATA BASE HAS BEEN EXT# endED TO 1 GEV. 
# ----------------------------------------------------------------------
# 2016:
#------
# REANALYSIS USING ROTATIONAL X-SECTION OF GELTMAN AND TAKAYANGI
#  NOTE : 
#     SCALED ESTIMATED X-SECTION OF GELTMAN AND TAKAYANGI
#     IN THE  def (ROTATIONAL DATA IN DATA ARRAYS NEED SCALED
#         BY 0.75 TO GIVE THE VALUES USED IN def)     
# ----------------------------------------------------------------------
#
#      NANISO=0  
      if(NANISO == 0):
 :
       NAME='OXYGEN  2016  ISOTROPIC  '
      else: 
       NAME='OXYGEN  2016 ANISOTROPIC ' 
      # endif
#----------------------------------------------------------------------
# BORN BETHE VALUES FOR IONISATION
      CONST=1.873884D-20
      EMASS2=1021997.804
      API=numpy.arccos(-1.00)
      A0=0.52917720859D-8
      RY=13.60569193
      BBCONST=16.0*API*A0*A0*RY*RY/EMASS2
# AVERAGE OF CORRECTED RIEKE AND (HOLLAND +BERKOWITZ) 
      AM2=4.00
      C=43.4
# AVERAGE AUGER EMISSION FROM KSHELL
      AUGK=2.0
# SCALE ROTATION X-SECTIONS BY ROTSCALE
      ROTSCALE=0.75
# CALC FRACTIONAL POPULATION DENSITY OF ROTATIONAL STATES
      B0=1.783D-4
# ROTATIONAL QUADRUPOLE MOMENT
      QBQA=0.90
      QBK=1.67552*(QBQA*A0)**2
      DO 103 K=2,48,2
      AK=float[K]
  103 PJ[K]=0.0
      DO 104 K=1,49,2
      AK=float[K]
  104 PJ[K]=3.0*(2.0*AK+1.0)*math.exp(-AK*(AK+1.0)*B0/AKT)
      ASUM=0.0
      DO 105 K=1,49
  105 ASUM=ASUM+PJ[K]
      DO 106 K=1,49
  106 PJ[K]=PJ[K]/ASUM
# CALC ROTATIONAL TRANSITION ENERGIES
      EIN[1]=-10.0*B0
      EIN(25)=-EIN[1]
      DO 107 K=2,24
      J=K-1
      AJ=float[J]
      EIN(K+24)=EIN(25)+AJ*8.0*B0
  107 EIN[K]=-EIN(K+24)
#  
      NION=8
      NATT=1
      NIN=148
      NNULL=0  
      IONMODEL=0
#
      NASIZE=20000
      NBREM=25
# 
      DO 11 J=1,NIN
      IZBR[J]=0
   11 CONTINUE
      IZBR(NIN+1)=8
#
      DO 1 J=1,6
    1 KEL[J]=NANISO
      DO 2 J=1,NIN
    2 KIN[J]=NANISO
#                                                          
      NROT=48
      NROT13=63
      NROT35=55
      NROT57=55
      NROT79=50
      NROT911=48
      NROT1113=46
      NROT1315=45
      NROT1517=44
      NROT1719=43
      NROT1921=41
      NROT2123=40
      NROT2325=39
      NROT2527=38
      NROT2729=37
      NROT2931=36
      NROT3133=34
      NROT3335=33
      NROT3537=32
      NROT3739=32
      NROT3941=31
      NROT4143=31
      NROT4345=30
      NROT4547=30
      NROT4749=29
      NELA=153                                          
      NVIB=60 
      NATT1=31   
      N3ATT=32                                                      
      NEXC1=40                                                          
      NEXC2=31                                                          
      NEXC3=16                                                          
      NEXC4=15                                                          
      NEXC5=14          
      NEXC6=14
      NEXC7=14  
      NEXC8=15
      NEXC9=14                          
      NIONC=85
      NION1=85
      NION2=70
      NION3=50
      NION4=47
      NION5=44  
      NKSH=81
#                                                        
      E[1]=0.0                                                          
      E(2)=2.0*EMASS/(31.9988*AMU)                                      
      E(3)=12.071                                                       
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
#
      EION[1]=12.071
      EION(2)=16.104
      EION(3)=18.171
      EION(4)=20.701
      EION(5)=38.46
      EION(6)=68.0
      EION(7)=90.0
      EION(8)=532.0
#
      EIN(49)=-0.193                                                  
      EIN(50)=0.193                                                     
      EIN(51)=0.385                                                     
      EIN(52)=0.568                                                    
      EIN(53)=0.749 
      EIN(54)=0.929                                                     
      EIN(55)=0.977
      EIN(56)=1.108
      EIN(57)=1.282      
      EIN(58)=1.458                                            
      EIN(59)=1.627 
      EIN(60)=1.629
      EIN(61)=1.798
      EIN(62)=1.965
      EIN(63)=2.127
      EIN(64)=2.283
      EIN(65)=2.430
      EIN(66)=2.585
      EIN(67)=2.739
      EIN(68)=2.883
      EIN(69)=3.023
      EIN(70)=3.168
      EIN(71)=3.316  
      EIN(72)=3.46                                                   
      EIN(73)=5.50
      EIN(74)=6.00
      EIN(75)=6.50
      EIN(76)=6.98               
      EIN(77)=7.08
      EIN(78)=7.25
      EIN(79)=7.35
      EIN(80)=7.45
      EIN(81)=7.55
      EIN(82)=7.65
      EIN(83)=7.75
      EIN(84)=7.85
      EIN(85)=7.95
      EIN(86)=8.05
      EIN(87)=8.15
      EIN(88)=8.20
      EIN(89)=8.25
      EIN(90)=8.35
      EIN(91)=8.45
      EIN(92)=8.55
      EIN(93)=8.65
      EIN(94)=8.75
      EIN(95)=8.85
      EIN(96)=8.95
      EIN(97)=9.05
      EIN(98)=9.15
      EIN(99)=9.25
      EIN(100)=9.35
      EIN(101)=9.45
      EIN(102)=9.55
      EIN(103)=9.675  
      EIN(104)=9.972
      EIN(105)=10.288
      EIN(106)=10.570
      EIN(107)=10.60
      EIN(108)=10.665
      EIN(109)=10.760
      EIN(110)=10.915
      EIN(111)=11.05
      EIN(112)=11.25
      EIN(113)=11.46
      EIN(114)=11.56
      EIN(115)=11.65
      EIN(116)=11.83
      EIN(117)=11.98
      EIN(118)=12.2
      EIN(119)=12.4
      EIN(120)=12.6
      EIN(121)=12.8
      EIN(122)=13.0
      EIN(123)=13.1
      EIN(124)=13.2
      EIN(125)=13.4
      EIN(126)=13.6
      EIN(127)=13.8
      EIN(128)=14.0
      EIN(129)=14.2
      EIN(130)=14.4
      EIN(131)=14.6
      EIN(132)=14.8
      EIN(133)=15.0
      EIN(134)=15.2
      EIN(135)=15.4
      EIN(136)=15.6
      EIN(137)=15.8
      EIN(138)=16.0
      EIN(139)=16.2
      EIN(140)=16.4
      EIN(141)=16.6
      EIN(142)=16.8
      EIN(143)=17.0
      EIN(144)=17.2
      EIN(145)=17.4
      EIN(146)=17.6
      EIN(147)=17.8
      EIN(148)=18.0
#
      DO 5 J=1,NION
      EOBY[J]=12.9
    5 CONTINUE
#
      DO 7 JK=1,NION
      LEGAS(JK)=0
      ISHELL(JK)=0
      NC0(JK)=0
      EC0(JK)=0.0
      WKLM(JK)=0.0
      EFL(JK)=0.0
      NG1(JK)=0
      EG1(JK)=0.0
      NG2(JK)=0
      EG2(JK)=0.0
    7 CONTINUE
# DOUBLE CHARGED STATES
      NC0(5)=1
      EC0(5)=6.0
      NC0(6)=1
      EC0(6)=6.0
# TRIPLE CHARGED STATES
      NC0(7)=2
      EC0(7)=6.0
# FLUORESCENCE DATA
      LEGAS(8)=1
      ISHELL(8)=1
      NC0(8)=3
      EC0(8)=485.
      WKLM(8)=0.0069
      EFL(8)=518.
      NG1(8)=1
      EG1(8)=480.
      NG2(8)=2
      EG2(8)=5.0
#
      DO 9 J=1,NION
      DO 8 I=1,NASIZE
      if(EG[I]:
 > EION[J]) :
       IOFFION[J]=I-1
       GO TO 9
      # endif
    8 CONTINUE
    9 CONTINUE
#
      DO 19 NL=1,NIN
      DO 18 I=1,NASIZE
      if(EG[I]:
 > abs(EIN(NL))) :
       IOFFN(NL)=I-1
       GO TO 19
      # endif
   18 CONTINUE
   19 CONTINUE
#
#**********************************************************************
# ENTER PENNING TRANSFER FRACTION FOR EACH LEVEL
# SET PENNING TRANSFER FRACTION TO ZERO FOR LOW ENERGY LEVELS
      DO 21 K=1,76
      DO 21 L=1,3
   21 CONTINUE
#---------------------------------------
# PENNING TRANSFER FRACTION FOR LEVELS ABOVE 6.0EV
      DO 22 K=76,NIN
      PENFRA[1,K]=0.0
# PENNING TRANSFER DISTANCE IN MICRONS
      PENFRA[2,K]=1.0
# PENNING TRANSFER TIME IN PICOSECONDS
      PENFRA[3,K]=1.0
      if(IPEN == 0):
 GO TO 22
      WRITE(6,999) NAME,EIN[K],PENFRA[1,K],PENFRA[2,K],PENFRA[3,K]
  999 print(' GAS = ',A25,' ENERGY LEVEL = ','%.4f' %,' EV.',/,' PENNING PROBABILITY = ','%.3f' % ,' ABS.LENGTH = ',F7.2,' DECAY TIME = ',F7.1,/)
   22 CONTINUE
#**********************************************************************
#
      SCRPT[1]='                                                  '
      if(NANISO == 0):
 :
       SCRPT(2)=' ELASTIC  ISOTROPIC      OXYGEN                   '
      else:
       SCRPT(2)=' ELASTIC ANISOTROPIC     OXYGEN                   '
      # endif
      SCRPT(3)=' IONISATION  O2+ X2PI              ELOSS= 12.072  '
      SCRPT(4)=' IONISATION  O2+ A4PI              ELOSS= 16.104  '
      SCRPT(5)=' IONISATION  O2+ B4SIGMA           ELOSS= 18.171  '
      SCRPT(6)=' DISSOC ION  O+  + O               ELOSS= 20.701  '
      SCRPT(7)=' DISSOC ION  O+  + O+              ELOSS= 38.46   '
      SCRPT(8)=' DISSOC ION  O++ + O               ELOSS= 68.0    '
      SCRPT(9)=' DISSOC ION  O++ + O+              ELOSS= 90.0    '
      SCRPT(10)=' IONISATION K-SHELL                ELOSS=532.0    '
      SCRPT(11)=' ATTACHMENT 2+3 BODY                              '
      SCRPT(12)='                                                  '
      SCRPT(13)='                                                  '
      SCRPT(14)=' ROTATION 3-1                    ELOSS= -0.0017830'
      SCRPT(15)=' ROTATION 5-3                    ELOSS= -0.0032094'
      SCRPT(16)=' ROTATION 7-5                    ELOSS= -0.0046358'
      SCRPT(17)=' ROTATION 9-7                    ELOSS= -0.0060622'
      SCRPT(18)=' ROTATION 11-9                   ELOSS= -0.0074886'
      SCRPT(19)=' ROTATION 13-11                  ELOSS= -0.0089150'
      SCRPT(20)=' ROTATION 15-13                  ELOSS= -0.0103414'
      SCRPT(21)=' ROTATION 17-15                  ELOSS= -0.0117678'
      SCRPT(22)=' ROTATION 19-17                  ELOSS= -0.0131942'
      SCRPT(23)=' ROTATION 21-19                  ELOSS= -0.0146206'
      SCRPT(24)=' ROTATION 23-21                  ELOSS= -0.0160470'
      SCRPT(25)=' ROTATION 25-23                  ELOSS= -0.0174734'
      SCRPT(26)=' ROTATION 27-25                  ELOSS= -0.0188998'
      SCRPT(27)=' ROTATION 29-27                  ELOSS= -0.0203262'
      SCRPT(28)=' ROTATION 31-29                  ELOSS= -0.0217526'
      SCRPT(29)=' ROTATION 33-31                  ELOSS= -0.0231790'
      SCRPT(30)=' ROTATION 35-33                  ELOSS= -0.0246054'
      SCRPT(31)=' ROTATION 37-35                  ELOSS= -0.0260318'
      SCRPT(32)=' ROTATION 39-37                  ELOSS= -0.0274582'
      SCRPT(33)=' ROTATION 41-39                  ELOSS= -0.0288846'
      SCRPT(34)=' ROTATION 43-41                  ELOSS= -0.0303110'
      SCRPT(35)=' ROTATION 45-43                  ELOSS= -0.0317374'
      SCRPT(36)=' ROTATION 47-45                  ELOSS= -0.0331638'
      SCRPT(37)=' ROTATION 49-47                  ELOSS= -0.0345902'
      SCRPT(38)=' ROTATION 1-3                    ELOSS=  0.0017830'
      SCRPT(39)=' ROTATION 3-5                    ELOSS=  0.0032094'
      SCRPT(40)=' ROTATION 5-7                    ELOSS=  0.0046358'
      SCRPT(41)=' ROTATION 7-9                    ELOSS=  0.0060622'
      SCRPT(42)=' ROTATION 9-11                   ELOSS=  0.0074886'
      SCRPT(43)=' ROTATION 11-13                  ELOSS=  0.0089150'
      SCRPT(44)=' ROTATION 13-15                  ELOSS=  0.0103414'
      SCRPT(45)=' ROTATION 15-17                  ELOSS=  0.0117678'
      SCRPT(46)=' ROTATION 17-19                  ELOSS=  0.0131942'
      SCRPT(47)=' ROTATION 19-21                  ELOSS=  0.0146206'
      SCRPT(48)=' ROTATION 21-23                  ELOSS=  0.0160470'
      SCRPT(49)=' ROTATION 23-25                  ELOSS=  0.0174734'
      SCRPT(50)=' ROTATION 25-27                  ELOSS=  0.0188998'
      SCRPT(51)=' ROTATION 27-29                  ELOSS=  0.0203262'
      SCRPT(52)=' ROTATION 29-31                  ELOSS=  0.0217526'
      SCRPT(53)=' ROTATION 31-33                  ELOSS=  0.0231790'
      SCRPT(54)=' ROTATION 33-35                  ELOSS=  0.0246054'
      SCRPT(55)=' ROTATION 35-37                  ELOSS=  0.0260318'
      SCRPT(56)=' ROTATION 37-39                  ELOSS=  0.0274582'
      SCRPT(57)=' ROTATION 39-41                  ELOSS=  0.0288846'
      SCRPT(58)=' ROTATION 41-43                  ELOSS=  0.0303110'
      SCRPT(59)=' ROTATION 43-45                  ELOSS=  0.0317374'
      SCRPT(60)=' ROTATION 45-47                  ELOSS=  0.0331638'
      SCRPT(61)=' ROTATION 47-49                  ELOSS=  0.0345902'
      SCRPT(62)=' VIB V1                            ELOSS= -0.193  '
      SCRPT(63)=' VIB V1                            ELOSS=  0.193  '
      SCRPT(64)=' VIB 2V1                           ELOSS=  0.385  '
      SCRPT(65)=' VIB 3V1                           ELOSS=  0.568  '
      SCRPT(66)=' VIB 4V1                           ELOSS=  0.749  '
      SCRPT(67)=' VIB 5V1                           ELOSS=  0.929  '
      SCRPT(68)=' A1(DEL)G VIB SUMMED               ELOSS=  0.977  '
      SCRPT(69)=' VIB 6V1                           ELOSS=  1.108  '
      SCRPT(70)=' VIB 7V1                           ELOSS=  1.282  '
      SCRPT(71)=' VIB 8V1                           ELOSS=  1.458  '
      SCRPT(72)=' B1(SIG)G VIB SUMMED               ELOSS=  1.627  '
      SCRPT(73)=' VIB 9V1                           ELOSS=  1.629  '
      SCRPT(74)=' VIB 10V1                          ELOSS=  1.798  '
      SCRPT(75)=' VIB 11V1                          ELOSS=  1.965  '
      SCRPT(76)=' VIB 12V1                          ELOSS=  2.127  '
      SCRPT(77)=' VIB 13V1                          ELOSS=  2.283  '
      SCRPT(78)=' VIB 14V1                          ELOSS=  2.430  '
      SCRPT(79)=' VIB 15V1                          ELOSS=  2.585  '
      SCRPT(80)=' VIB 16V1                          ELOSS=  2.739  '
      SCRPT(81)=' VIB 17V1                          ELOSS=  2.883  '
      SCRPT(82)=' VIB 18V1                          ELOSS=  3.023  '
      SCRPT(83)=' VIB 19V1                          ELOSS=  3.168  '
      SCRPT(84)=' VIB 20V1                          ELOSS=  3.316  '
      SCRPT(85)=' VIB SUM 21V1-30V1                 ELOSS=  3.46   '
      SCRPT(86)=' C1SIG + A#3DEL + A3SIG            ELOSS=  5.50   '
      SCRPT(87)=' C1SIG + A#3DEL + A3SIG            ELOSS=  6.00   '
      SCRPT(88)=' C1SIG + A#3DEL + A3SIG            ELOSS=  6.50   '
      SCRPT(89)=' B3SIG SUMMED V=7-20 F=.000262     EL0SS=  6.98   '
      SCRPT(90)=' DISSOCIATION  S-R  F=0.000408     ELOSS=  7.08   '
      SCRPT(91)=' DISSOCIATION  S-R  F=0.000623     ELOSS=  7.25   '
      SCRPT(92)=' DISSOCIATION  S-R  F=0.001016     ELOSS=  7.35   '
      SCRPT(93)=' DISSOCIATION  S-R  F=0.001562     ELOSS=  7.45   '
      SCRPT(94)=' DISSOCIATION  S-R  F=0.002312     ELOSS=  7.55   '
      SCRPT(95)=' DISSOCIATION  S-R  F=0.003234     ELOSS=  7.65   '
      SCRPT(96)=' DISSOCIATION  S-R  F=0.004362     ELOSS=  7.75   '
      SCRPT(97)=' DISSOCIATION  S-R  F=0.005573     ELOSS=  7.85   '
      SCRPT(98)=' DISSOCIATION  S-R  F=0.006930     ELOSS=  7.95   '
      SCRPT(99)=' DISSOCIATION  S-R  F=0.008342     ELOSS=  8.05   '
      SCRPT(100)=' DISSOCIATION  S-R  F=0.009692     ELOSS=  8.15   '
      SCRPT(101)=' DISSOCIATION  S-R NON-DIPOLE      ELOSS=  8.20   '
      SCRPT(102)=' DISSOCIATION  S-R  F=0.010816     ELOSS=  8.25   '
      SCRPT(103)=' DISSOCIATION  S-R  F=0.011839     ELOSS=  8.35   '
      SCRPT(104)=' DISSOCIATION  S-R  F=0.012580     ELOSS=  8.45   '
      SCRPT(105)=' DISSOCIATION  S-R  F=0.013160     ELOSS=  8.55   '
      SCRPT(106)=' DISSOCIATION  S-R  F=0.013432     ELOSS=  8.65   '
      SCRPT(107)=' DISSOCIATION  S-R  F=0.013571     ELOSS=  8.75   '
      SCRPT(108)=' DISSOCIATION  S-R  F=0.013425     ELOSS=  8.85   '
      SCRPT(109)=' DISSOCIATION  S-R  F=0.012948     ELOSS=  8.95   '
      SCRPT(110)=' DISSOCIATION  S-R  F=0.010892     ELOSS=  9.05   '
      SCRPT(111)=' DISSOCIATION  S-R  F=0.006688     ELOSS=  9.15   '
      SCRPT(112)=' DISSOCIATION  S-R  F=0.002784     ELOSS=  9.25   '
      SCRPT(113)=' DISSOCIATION  S-R  F=0.001767     ELOSS=  9.35   '
      SCRPT(114)=' DISSOCIATION  S-R  F=0.000633     ELOSS=  9.45   '
      SCRPT(115)=' DISSOCIATION  S-R  F=0.000438     ELOSS=  9.55   '
      SCRPT(116)=' DISSOCIATION  S-R  F=0.000465     ELOSS=  9.675  '
      SCRPT(117)=' DISSOC E3SIGMA V=0 F=0.008432     ELOSS=  9.972  '
      SCRPT(118)=' DISSOC E3SIGMA V=1 F=0.007598     ELOSS= 10.288  '
      SCRPT(119)=' DISSOC E3SIGMA V=2 F=0.000829     ELOSS= 10.570  '
      SCRPT(120)=' DISSOC TRIPLET SUM BELOW IP       ELOSS= 10.60   '
      SCRPT(121)=' DISSOC             F=0.000644     ELOSS= 10.665  '
      SCRPT(122)=' DISSOC             F=0.001460     ELOSS= 10.760  '
      SCRPT(123)=' DISSOC             F=0.000818     ELOSS= 10.915  '
      SCRPT(124)=' DISSOC             F=0.000736     ELOSS= 11.05   '
      SCRPT(125)=' DISSOC             F=0.000598     ELOSS= 11.25   '
      SCRPT(126)=' DISSOC             F=0.001482     ELOSS= 11.46   '
      SCRPT(127)=' DISSOC             F=0.000425     ELOSS= 11.56   '
      SCRPT(128)=' DISSOC             F=0.001669     ELOSS= 11.65   '
      SCRPT(129)=' DISSOC             F=0.001766     ELOSS= 11.83   '
      SCRPT(130)=' DISSOC             F=0.001613     ELOSS= 11.98   '
      SCRPT(131)=' DISSOC             F=0.001746     ELOSS= 12.20   '
      SCRPT(132)=' DISSOC             F=0.003329     ELOSS= 12.40   '
      SCRPT(133)=' DISSOC             F=0.006264     ELOSS= 12.60   '
      SCRPT(134)=' DISSOC             F=0.013580     ELOSS= 12.80   '
      SCRPT(135)=' DISSOC             F=0.011373     ELOSS= 13.00   '
      SCRPT(136)=' DISSOC TRIPLET SUM ABOVE IP       ELOSS= 13.1    '
      SCRPT(137)=' DISSOC             F=0.006052     ELOSS= 13.20   '
      SCRPT(138)=' DISSOC             F=0.006051     ELOSS= 13.40   '
      SCRPT(139)=' DISSOC             F=0.004993     ELOSS= 13.60   '
      SCRPT(140)=' DISSOC             F=0.005045     ELOSS= 13.80   '
      SCRPT(141)=' DISSOC             F=0.004962     ELOSS= 14.00   '
      SCRPT(142)=' DISSOC             F=0.006520     ELOSS= 14.20   '
      SCRPT(143)=' DISSOC             F=0.008432     ELOSS= 14.40   '
      SCRPT(144)=' DISSOC             F=0.011304     ELOSS= 14.60   '
      SCRPT(145)=' DISSOC             F=0.015172     ELOSS= 14.80   '
      SCRPT(146)=' DISSOC             F=0.022139     ELOSS= 15.00   '
      SCRPT(147)=' DISSOC             F=0.032682     ELOSS= 15.20   '
      SCRPT(148)=' DISSOC             F=0.039457     ELOSS= 15.40   '
      SCRPT(149)=' DISSOC             F=0.029498     ELOSS= 15.60   '
      SCRPT(150)=' DISSOC             F=0.018923     ELOSS= 15.80   '
      SCRPT(151)=' DISSOC             F=0.017762     ELOSS= 16.00   '
      SCRPT(152)=' DISSOC             F=0.015115     ELOSS= 16.20   '
      SCRPT(153)=' DISSOC             F=0.013220     ELOSS= 16.40   '
      SCRPT(154)=' DISSOC             F=0.009540     ELOSS= 16.60   '
      SCRPT(155)=' DISSOC             F=0.005854     ELOSS= 16.80   '
      SCRPT(156)=' DISSOC             F=0.008733     ELOSS= 17.00   '
      SCRPT(157)=' DISSOC             F=0.007914     ELOSS= 17.20   '
      SCRPT(158)=' DISSOC             F=0.008002     ELOSS= 17.40   '
      SCRPT(159)=' DISSOC             F=0.006519     ELOSS= 17.60   '
      SCRPT(160)=' DISSOC             F=0.003528     ELOSS= 17.80   '
      SCRPT(161)=' DISSOC             F=0.001469     ELOSS= 18.00   '
      SCRPT(162)=' BREMSSTRAHLUNG FROM OXYGEN ATOMS                 '
# CALCULATE DENSITY CORRECTION FOR THREE BODY ATTACHMENT CROSS-SECTION  
      FAC=273.15*TORR/((TEMPC+273.15)*760.0)                            
# FIRST VIBRATIONAL LEVEL POPULATION
      APOP2=math.exp(EIN(49)/AKT)                                           
#     EN=-ESTEP/2.0                                      
      DO 9900 I=1,NSTEP    
      EN=EG[I]                            
#     EN=EN+ESTEP   
      GAMMA1=(EMASS2+2.00*EN)/EMASS2
      GAMMA2=GAMMA1*GAMMA1
      BETA=math.sqrt(1.00-1.00/GAMMA2)
      BETA2=BETA*BETA
#
# ELASTIC
      DO 12 J=2,NELA
      if(EN <= XELA[J]):
 GO TO 23 
   12 CONTINUE
      J=NELA
   23 A=(YELA[J]-YELA[J-1])/(XELA[J]-XELA[J-1])
      B=(XELA[J-1]*YELA[J]-XELA[J]*YELA[J-1])/(XELA[J-1]-XELA[J])
# ELASTIC
      QELA=(A*EN+B)*1.D-16
      A=(YMOM[J]-YMOM(J-1))/(XELA[J]-XELA[J-1])
      B=(XELA[J-1]*YMOM[J]-XELA[J]*YMOM(J-1))/(XELA[J-1]-XELA[J])
# MOMENTUM TRANSFER
      QMOM=(A*EN+B)*1.D-16
      A=(YEPS[J]-YEPS(J-1))/(XELA[J]-XELA[J-1])
      B=(XELA[J-1]*YEPS[J]-XELA[J]*YEPS(J-1))/(XELA[J-1]-XELA[J])
# ANISOTROPY defS
      PQ2=A*EN+B
# EPSILON =1.0-YEPS
      PQ2=1.00-PQ2
      PQ1=0.5+(QELA-QMOM)/QELA
      if(NANISO == 0):
 PEQEL(2,I)=0.5
      if(NANISO == 1):
 PEQEL(2,I)=PQ1
      if(NANISO == 2):
 PEQEL(2,I)=PQ2
      Q(2,I)=QELA
      if(NANISO == 0):
 Q(2,I)=QMOM
#                                         
# IONISATION CALCULATION

      DO 50 J=1,NION
      PEQION[J][I]=0.5
      if(NANISO == 2):
 PEQION[J][I]=0.0
   50 QION[J][I]=0.0  
# IONISATION TO ALL CHANNELS WITH O2+
# IONISATION TO O2+ X2PI
      if(EN <= EION[1]:
) GO TO 54
      if(EN > XION1(NION1):
) GO TO 53 
      DO 51 J=2,NION1
      if(EN <= XION1[J]:
) GO TO 52
   51 CONTINUE
      J=NION1
   52 A=(YION1[J]-YION1(J-1))/(XION1[J]-XION1(J-1))
      B=(XION1(J-1)*YION1[J]-XION1[J]*YION1(J-1))/(XION1(J-1)-XION1[J])
      QION(1,I)=(A*EN+B)*1.D-16
      GO TO 54
# USE BORN BETHE ABOVE XION1(NION1) EV
   53 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(1,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.6475*0.558
# IONISATION TO O2+ A4PI
   54 if(EN <= EION(2)) GO TO 58
      if(EN > XION1(NION1):
) GO TO 57
      EOFF=EN-(EION(2)-EION[1])
      DO 55 J=1,NION1
      if(EOFF <= XION1[J]:
) GO TO 56
   55 CONTINUE
      J=NION1
   56 A=(YION1[J]-YION1(J-1))/(XION1[J]-XION1(J-1))
      B=(XION1(J-1)*YION1[J]-XION1[J]*YION1(J-1))/(XION1(J-1)-XION1[J])
      QION(2,I)=(A*EOFF+B)*1.D-16*0.308
# CORRECT QION(1,I)
      QION(1,I)=QION(1,I)-QION(2,I)
      GO TO 58
# USE BORN BETHE ABOVE XION1(NION1) EV
   57 QION(2,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.6475*0.308
# IONISATION TO O2+ B4SIGMA
   58 if(EN <= EION(3)) GO TO 62
      if(EN > XION1(NION1):
) GO TO 61
      EOFF=EN-(EION(3)-EION[1])
      DO 59 J=1,NION1
      if(EOFF <= XION1[J]:
) GO TO 60
   59 CONTINUE
      J=NION1
   60 A=(YION1[J]-YION1(J-1))/(XION1[J]-XION1(J-1))
      B=(XION1(J-1)*YION1[J]-XION1[J]*YION1(J-1))/(XION1(J-1)-XION1[J])
      QION(3,I)=(A*EOFF+B)*1.D-16*0.136
# CORRECT QION(1,I)
      QION(1,I)=QION(1,I)-QION(3,I)
      GO TO 62
# USE BORN BETHE ABOVE XION1(NION1) EV
   61 QION(3,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.6475*0.136
#
#  DISSOCIATIVE IONISATION TO O+ + O
   62 if(EN <= EION(4)) GO TO 66  
      if(EN > XION2(NION2):
) GO TO 65                                   
      DO 63 J=2,NION2                                                  
      if(EN <= XION2[J]:
) GO TO 64                                   
   63 CONTINUE                                                          
      J=NION2                                                         
   64 A=(YION2[J]-YION2(J-1))/(XION2[J]-XION2(J-1))                    
      B=(XION2(J-1)*YION2[J]-XION2[J]*YION2(J-1))/(XION2(J-1)-XION2[J])
      QION(4,I)=(A*EN+B)*1.D-16       
      GO TO 66                      
# USE BORN BETHE ABOVE XION2(NION2) EV    
   65 QION(4,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.2993
#
# DISSOCIATIVE DOUBLE IONISATION TO O+ + O+ 
   66 if(EN <= EION(5)) GO TO 70  
      if(EN > XION3(NION3):
) GO TO 69                                   
      DO 67 J=2,NION3                                                  
      if(EN <= XION3[J]:
) GO TO 68                                   
   67 CONTINUE                                                          
      J=NION3                                                        
   68 A=(YION3[J]-YION3(J-1))/(XION3[J]-XION3(J-1))                    
      B=(XION3(J-1)*YION3[J]-XION3[J]*YION3(J-1))/(XION3(J-1)-XION3[J])
      QION(5,I)=(A*EN+B)*1.D-16       
      GO TO 70                      
# USE BORN BETHE ABOVE XION3(NION3) EV    
   69 QION(5,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.0446
#
# DISSOCIATIVE DOUBLE IONISATION TO O++ + O 
   70 if(EN <= EION(6)) GO TO 74  
      if(EN > XION4(NION4):
) GO TO 73                                   
      DO 71 J=2,NION4                                                  
      if(EN <= XION4[J]:
) GO TO 72                                   
   71 CONTINUE                                                          
      J=NION4                                                        
   72 A=(YION4[J]-YION4(J-1))/(XION4[J]-XION4(J-1))                    
      B=(XION4(J-1)*YION4[J]-XION4[J]*YION4(J-1))/(XION4(J-1)-XION4[J])
      QION(6,I)=(A*EN+B)*1.D-16       
      GO TO 74                      
# USE BORN BETHE ABOVE XION4(NION4) EV    
   73 QION(6,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.0061
#
# DISSOCIATIVE TREBLE IONISATION TO O++ + O+ 
   74 if(EN <= EION(7)) GO TO 78  
      if(EN > XION5(NION5):
) GO TO 77                                   
      DO 75 J=2,NION5                                                  
      if(EN <= XION5[J]:
) GO TO 76                                   
   75 CONTINUE                                                          
      J=NION5                                                        
   76 A=(YION5[J]-YION5(J-1))/(XION5[J]-XION5(J-1))                    
      B=(XION5(J-1)*YION5[J]-XION5[J]*YION5(J-1))/(XION5(J-1)-XION5[J])
      QION(7,I)=(A*EN+B)*1.D-16       
      GO TO 78                      
# USE BORN BETHE ABOVE XION5(NION5) EV    
   77 QION(7,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.0025
#
# K-SHELL IONISATION
   78 if(EN <= EION(8)) GO TO 81  
      DO 79 J=2,NKSH                                                  
      if(EN <= XKSH[J]:
) GO TO 80                                   
   79 CONTINUE                                                          
      J=NKSH                                                       
   80 A=(YKSH[J]-YKSH(J-1))/(XKSH[J]-XKSH(J-1))                    
      B=(XKSH(J-1)*YKSH[J]-XKSH[J]*YKSH(J-1))/(XKSH(J-1)-XKSH[J])
# SCALE BY 2 ATMOS PER MOLECULE
      QION(8,I)=2.0*(A*EN+B)*1.D-16            
#
   81 DO 85 J=1,NION
      if(EN <= (2.0*EION[J]:
)) GO TO 85
      PEQION[J][I]=PEQEL(2,(I-IOFFION[J]))
   85 CONTINUE   
# CORRECTION TO IONISATION FOR AUGER EMISSION FROM KSHELL
      QION(1,I)=QION(1,I)-AUGK*QION(8,I) 
#
#  TWO BODY ATTACHMENT                                                       
      SINGLE=0.0       
# OFFSET FOR ENERGY SCALE
      if(EN < XATT[1]:
) GO TO 250                                
      if(EN > XATT(NATT1):
) GO TO 230                             
      DO 210 J=2,NATT1                                                 
      if(EN <= XATT[J]:
) GO TO 220                                
  210 CONTINUE                                                          
      J=NATT1                                                          
  220 A=(YATT[J]-YATT(J-1))/(XATT[J]-XATT(J-1))          
      B=(XATT(J-1)*YATT[J]-XATT[J]*YATT(J-1))/(XATT(J-1)-XATT[J])       
      SINGLE=(A*EN+B)*1.D-16                    
      GO TO 250
# SCALE BY 1/E**3 ABOVE XATT(NATT1)
  230 SINGLE=YATT(NATT1)*(XATT(NATT1)/EN)**3*1.D-16    
#
#  
#  THREE BODY ATTACHMENT    
# ***************************************************************
#  ENTER HERE SCALING FACTOR FOR THREE BODY ATTACHMENT IN MIXTURES:
#  FOR NORMAL SCALING T3B=1.0
      T3B=1.0
#    SCALING FACTOR NORMALLY PROPORTIONAL TO OXYGEN FRACTION 
#    IN RARE GAS MIXTURES
# 
#***********************************************************  
#              
  250 THREEB=0.0                                                    
      if(EN < X3ATT[1]:
) GO TO 300                                      
      if(EN > X3ATT(N3ATT):
) GO TO 300                                  
      DO 260 J=2,N3ATT                                                  
      if(EN <= X3ATT[J]:
) GO TO 270                                      
  260 CONTINUE                                                          
      J=N3ATT                                                           
  270 A=(Y3ATT[J]-Y3ATT(J-1))/(X3ATT[J]-X3ATT(J-1))
      B=(X3ATT(J-1)*Y3ATT[J]-X3ATT[J]*Y3ATT(J-1))/(X3ATT(J-1)-X3ATT[J])
      THREEB=FAC*(A*EN+B)*1.D-16*T3B  
  300 Q(4,I)=SINGLE+THREEB     
      Q(5,I)=0.0                                                        
      Q(6,I)=0.0
# SET ZERO
      DO 310 JK=1,NIN
      QIN(JK,I)=0.00
      PEQIN(JK,I)=0.50
      if(NANISO == 2):
 PEQIN(JK,I)=0.00         
  310 CONTINUE   
#                    
# SUPERELASTIC ROTATION   
      DO 311 K=1,24
# STATISTICAL FACTOR
      AK=float[K]
      SFAC=(4.0*AK-1.0)/(4.0*AK+3.0) 
      QIN(K,I)=0.0
      PEQIN(K,I)=0.50
      if(NANISO == 2):
 PEQIN(K,I)=0.00                      
      if(EN <= 0.0):
 GO TO 311 
#
      if(K == 1):
 :
      if((EN-EIN[K]:
) > XROT13(NROT13)) GO TO 3213
      DO 3211 J=2,NROT13
      if((EN-EIN[K]:
) <= XROT13[J]) GO TO 3212
 3211 CONTINUE
      J=NROT13
 3212 YXJ=math.log(YROT13[J])
      YXJ1=math.log(YROT13(J-1))
      XNJ=math.log(XROT13[J])
      XNJ1=math.log(XROT13(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN[K])*math.exp(A*math.log(EN-EIN[K])+B)/EN*1.D-16
      GO TO 3214
 3213 QIN(K,I)=PJ(2*K+1)*SFAC*YROT13(NROT13)*XROT13(NROT13)/(EN-EIN[K])*1.D-16
 3214 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
#
      else if (K == 2) :
      if((EN-EIN[K]:
) > XROT35(NROT35)) GO TO 3217
      DO 3215 J=2,NROT35
      if((EN-EIN[K]:
) <= XROT35[J]) GO TO 3216
 3215 CONTINUE
      J=NROT35
 3216 YXJ=math.log(YROT35[J])
      YXJ1=math.log(YROT35(J-1))
      XNJ=math.log(XROT35[J])
      XNJ1=math.log(XROT35(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN[K])*math.exp(A*math.log(EN-EIN[K])+B)/EN*1.D-16
      GO TO 3218
 3217 QIN(K,I)=PJ(2*K+1)*SFAC*YROT35(NROT35)*XROT35(NROT35)/(EN-EIN[K])*1.D-16      
 3218 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
#
      else if (K == 3) :
      if((EN-EIN[K]:
) > XROT57(NROT57)) GO TO 3221
      DO 3219 J=2,NROT57
      if((EN-EIN[K]:
) <= XROT57[J]) GO TO 3220
 3219 CONTINUE
      J=NROT57
 3220 YXJ=math.log(YROT57[J])
      YXJ1=math.log(YROT57(J-1))
      XNJ=math.log(XROT57[J])
      XNJ1=math.log(XROT57(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN[K])*math.exp(A*math.log(EN-EIN[K])+B)/EN*1.D-16
      GO TO 3222
 3221 QIN(K,I)=PJ(2*K+1)*SFAC*YROT57(NROT57)*XROT57(NROT57)/(EN-EIN[K])*1.D-16      
 3222 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
#
      else if (K == 4) :
      if((EN-EIN[K]:
) > XROT79(NROT79)) GO TO 3225
      DO 3223 J=2,NROT79
      if((EN-EIN[K]:
) <= XROT79[J]) GO TO 3224
 3223 CONTINUE
      J=NROT79
 3224 YXJ=math.log(YROT79[J])
      YXJ1=math.log(YROT79(J-1))
      XNJ=math.log(XROT79[J])
      XNJ1=math.log(XROT79(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN[K])*math.exp(A*math.log(EN-EIN[K])+B)/EN*1.D-16
      GO TO 3226
 3225 QIN(K,I)=PJ(2*K+1)*SFAC*YROT79(NROT79)*XROT79(NROT79)/(EN-EIN[K])*1.D-16      
 3226 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
#
      else if (K == 5) :
      if((EN-EIN[K]:
) > XROT911(NROT911)) GO TO 3229
      DO 3227 J=2,NROT911
      if((EN-EIN[K]:
) <= XROT911[J]) GO TO 3228
 3227 CONTINUE
      J=NROT911
 3228 YXJ=math.log(YROT911[J])
      YXJ1=math.log(YROT911(J-1))
      XNJ=math.log(XROT911[J])
      XNJ1=math.log(XROT911(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN[K])*math.exp(A*math.log(EN-EIN[K])+B)/EN*1.D-16
      GO TO 3230
 3229 QIN(K,I)=PJ(2*K+1)*SFAC*YROT911(NROT911)*XROT911(NROT911)/(EN-EIN[K])*1.D-16      
 3230 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
#
      else if (K == 6) :
      if((EN-EIN[K]:
) > XROT1113(NROT1113)) GO TO 3233
      DO 3231 J=2,NROT1113
      if((EN-EIN[K]:
) <= XROT1113[J]) GO TO 3232
 3231 CONTINUE
      J=NROT1113
 3232 YXJ=math.log(YROT1113[J])
      YXJ1=math.log(YROT1113(J-1))
      XNJ=math.log(XROT1113[J])
      XNJ1=math.log(XROT1113(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN[K])*math.exp(A*math.log(EN-EIN[K])+B)/EN*1.D-16
      GO TO 3234
 3233 QIN(K,I)=PJ(2*K+1)*SFAC*YROT1113(NROT1113)*XROT1113(NROT1113)/(EN-EIN[K])*1.D-16      
 3234 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
#
      else if (K == 7) :
      if((EN-EIN[K]:
) > XROT1315(NROT1315)) GO TO 3237
      DO 3235 J=2,NROT1315
      if((EN-EIN[K]:
) <= XROT1315[J]) GO TO 3236
 3235 CONTINUE
      J=NROT1315
 3236 YXJ=math.log(YROT1315[J])
      YXJ1=math.log(YROT1315(J-1))
      XNJ=math.log(XROT1315[J])
      XNJ1=math.log(XROT1315(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN[K])*math.exp(A*math.log(EN-EIN[K])+B)/EN*1.D-16
      GO TO 3238
 3237 QIN(K,I)=PJ(2*K+1)*SFAC*YROT1315(NROT1315)*XROT1315(NROT1315)/(EN-EIN[K])*1.D-16      
 3238 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
#
      else if (K == 8) :
      if((EN-EIN[K]:
) > XROT1517(NROT1517)) GO TO 3241
      DO 3239 J=2,NROT1517
      if((EN-EIN[K]:
) <= XROT1517[J]) GO TO 3240
 3239 CONTINUE
      J=NROT1517
 3240 YXJ=math.log(YROT1517[J])
      YXJ1=math.log(YROT1517(J-1))
      XNJ=math.log(XROT1517[J])
      XNJ1=math.log(XROT1517(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN[K])*math.exp(A*math.log(EN-EIN[K])+B)/EN*1.D-16
      GO TO 3242
 3241 QIN(K,I)=PJ(2*K+1)*SFAC*YROT1517(NROT1517)*XROT1517(NROT1517)/(EN-EIN[K])*1.D-16      
 3242 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
#
      else if (K == 9) :
      if((EN-EIN[K]:
) > XROT1719(NROT1719)) GO TO 3245
      DO 3243 J=2,NROT1719
      if((EN-EIN[K]:
) <= XROT1719[J]) GO TO 3244
 3243 CONTINUE
      J=NROT1719
 3244 YXJ=math.log(YROT1719[J])
      YXJ1=math.log(YROT1719(J-1))
      XNJ=math.log(XROT1719[J])
      XNJ1=math.log(XROT1719(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN[K])*math.exp(A*math.log(EN-EIN[K])+B)/EN*1.D-16
      GO TO 3246
 3245 QIN(K,I)=PJ(2*K+1)*SFAC*YROT1719(NROT1719)*XROT1719(NROT1719)/(EN-EIN[K])*1.D-16      
 3246 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
#
      else if (K == 10) :
      if((EN-EIN[K]:
) > XROT1921(NROT1921)) GO TO 3249
      DO 3247 J=2,NROT1921
      if((EN-EIN[K]:
) <= XROT1921[J]) GO TO 3248
 3247 CONTINUE
      J=NROT1921
 3248 YXJ=math.log(YROT1921[J])
      YXJ1=math.log(YROT1921(J-1))
      XNJ=math.log(XROT1921[J])
      XNJ1=math.log(XROT1921(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN[K])*math.exp(A*math.log(EN-EIN[K])+B)/EN*1.D-16
      GO TO 3250
 3249 QIN(K,I)=PJ(2*K+1)*SFAC*YROT1921(NROT1921)*XROT1921(NROT1921)/(EN-EIN[K])*1.D-16      
 3250 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
#
      else if (K == 11) :
      if((EN-EIN[K]:
) > XROT2123(NROT2123)) GO TO 3253
      DO 3251 J=2,NROT2123
      if((EN-EIN[K]:
) <= XROT2123[J]) GO TO 3252
 3251 CONTINUE
      J=NROT2123
 3252 YXJ=math.log(YROT2123[J])
      YXJ1=math.log(YROT2123(J-1))
      XNJ=math.log(XROT2123[J])
      XNJ1=math.log(XROT2123(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN[K])*math.exp(A*math.log(EN-EIN[K])+B)/EN*1.D-16
      GO TO 3254
 3253 QIN(K,I)=PJ(2*K+1)*SFAC*YROT2123(NROT2123)*XROT2123(NROT2123)/(EN-EIN[K])*1.D-16      
 3254 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
#
      else if (K == 12) :
      if((EN-EIN[K]:
) > XROT2325(NROT2325)) GO TO 3257
      DO 3255 J=2,NROT2325
      if((EN-EIN[K]:
) <= XROT2325[J]) GO TO 3256
 3255 CONTINUE
      J=NROT2325
 3256 YXJ=math.log(YROT2325[J])
      YXJ1=math.log(YROT2325(J-1))
      XNJ=math.log(XROT2325[J])
      XNJ1=math.log(XROT2325(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN[K])*math.exp(A*math.log(EN-EIN[K])+B)/EN*1.D-16
      GO TO 3258
 3257 QIN(K,I)=PJ(2*K+1)*SFAC*YROT2325(NROT2325)*XROT2325(NROT2325)/(EN-EIN[K])*1.D-16      
 3258 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
#
      else if (K == 13) :
      if((EN-EIN[K]:
) > XROT2527(NROT2527)) GO TO 3261
      DO 3259 J=2,NROT2527
      if((EN-EIN[K]:
) <= XROT2527[J]) GO TO 3260
 3259 CONTINUE
      J=NROT2527
 3260 YXJ=math.log(YROT2527[J])
      YXJ1=math.log(YROT2527(J-1))
      XNJ=math.log(XROT2527[J])
      XNJ1=math.log(XROT2527(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN[K])*math.exp(A*math.log(EN-EIN[K])+B)/EN*1.D-16
      GO TO 3262
 3261 QIN(K,I)=PJ(2*K+1)*SFAC*YROT2527(NROT2527)*XROT2527(NROT2527)/(EN-EIN[K])*1.D-16      
 3262 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
#
      else if (K == 14) :
      if((EN-EIN[K]:
) > XROT2729(NROT2729)) GO TO 3265
      DO 3263 J=2,NROT2729
      if((EN-EIN[K]:
) <= XROT2729[J]) GO TO 3264
 3263 CONTINUE
      J=NROT2729
 3264 YXJ=math.log(YROT2729[J])
      YXJ1=math.log(YROT2729(J-1))
      XNJ=math.log(XROT2729[J])
      XNJ1=math.log(XROT2729(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN[K])*math.exp(A*math.log(EN-EIN[K])+B)/EN*1.D-16
      GO TO 3266
 3265 QIN(K,I)=PJ(2*K+1)*SFAC*YROT2729(NROT2729)*XROT2729(NROT2729)/(EN-EIN[K])*1.D-16      
 3266 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
#
      else if (K == 15) :
      if((EN-EIN[K]:
) > XROT2931(NROT2931)) GO TO 3269
      DO 3267 J=2,NROT2931
      if((EN-EIN[K]:
) <= XROT2931[J]) GO TO 3268
 3267 CONTINUE
      J=NROT2931
 3268 YXJ=math.log(YROT2931[J])
      YXJ1=math.log(YROT2931(J-1))
      XNJ=math.log(XROT2931[J])
      XNJ1=math.log(XROT2931(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN[K])*math.exp(A*math.log(EN-EIN[K])+B)/EN*1.D-16
      GO TO 3270
 3269 QIN(K,I)=PJ(2*K+1)*SFAC*YROT2931(NROT2931)*XROT2931(NROT2931)/(EN-EIN[K])*1.D-16      
 3270 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
#
      else if (K == 16) :
      if((EN-EIN[K]:
) > XROT3133(NROT3133)) GO TO 3273
      DO 3271 J=2,NROT3133
      if((EN-EIN[K]:
) <= XROT3133[J]) GO TO 3272
 3271 CONTINUE
      J=NROT3133
 3272 YXJ=math.log(YROT3133[J])
      YXJ1=math.log(YROT3133(J-1))
      XNJ=math.log(XROT3133[J])
      XNJ1=math.log(XROT3133(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN[K])*math.exp(A*math.log(EN-EIN[K])+B)/EN*1.D-16
      GO TO 3274
 3273 QIN(K,I)=PJ(2*K+1)*SFAC*YROT3133(NROT3133)*XROT3133(NROT3133)/(EN-EIN[K])*1.D-16      
 3274 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
#
      else if (K == 17) :
      if((EN-EIN[K]:
) > XROT3335(NROT3335)) GO TO 3277
      DO 3275 J=2,NROT3335
      if((EN-EIN[K]:
) <= XROT3335[J]) GO TO 3276
 3275 CONTINUE
      J=NROT3335
 3276 YXJ=math.log(YROT3335[J])
      YXJ1=math.log(YROT3335(J-1))
      XNJ=math.log(XROT3335[J])
      XNJ1=math.log(XROT3335(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN[K])*math.exp(A*math.log(EN-EIN[K])+B)/EN*1.D-16
      GO TO 3278
 3277 QIN(K,I)=PJ(2*K+1)*SFAC*YROT3335(NROT3335)*XROT3335(NROT3335)/(EN-EIN[K])*1.D-16      
 3278 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
#
      else if (K == 18) :
      if((EN-EIN[K]:
) > XROT3537(NROT3537)) GO TO 3281
      DO 3279 J=2,NROT3537
      if((EN-EIN[K]:
) <= XROT3537[J]) GO TO 3280
 3279 CONTINUE
      J=NROT3537
 3280 YXJ=math.log(YROT3537[J])
      YXJ1=math.log(YROT3537(J-1))
      XNJ=math.log(XROT3537[J])
      XNJ1=math.log(XROT3537(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN[K])*math.exp(A*math.log(EN-EIN[K])+B)/EN*1.D-16
      GO TO 3282
 3281 QIN(K,I)=PJ(2*K+1)*SFAC*YROT3537(NROT3537)*XROT3537(NROT3537)/(EN-EIN[K])*1.D-16      
 3282 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
#
      else if (K == 19) :
      if((EN-EIN[K]:
) > XROT3739(NROT3739)) GO TO 3285
      DO 3283 J=2,NROT3739
      if((EN-EIN[K]:
) <= XROT3739[J]) GO TO 3284
 3283 CONTINUE
      J=NROT3739
 3284 YXJ=math.log(YROT3739[J])
      YXJ1=math.log(YROT3739(J-1))
      XNJ=math.log(XROT3739[J])
      XNJ1=math.log(XROT3739(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN[K])*math.exp(A*math.log(EN-EIN[K])+B)/EN*1.D-16
      GO TO 3286
 3285 QIN(K,I)=PJ(2*K+1)*SFAC*YROT3739(NROT3739)*XROT3739(NROT3739)/(EN-EIN[K])*1.D-16      
 3286 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
#
      else if (K == 20) :
      if((EN-EIN[K]:
) > XROT3941(NROT3941)) GO TO 3289
      DO 3287 J=2,NROT3941
      if((EN-EIN[K]:
) <= XROT3941[J]) GO TO 3288
 3287 CONTINUE
      J=NROT3941
 3288 YXJ=math.log(YROT3941[J])
      YXJ1=math.log(YROT3941(J-1))
      XNJ=math.log(XROT3941[J])
      XNJ1=math.log(XROT3941(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN[K])*math.exp(A*math.log(EN-EIN[K])+B)/EN*1.D-16
      GO TO 3290
 3289 QIN(K,I)=PJ(2*K+1)*SFAC*YROT3941(NROT3941)*XROT3941(NROT3941)/(EN-EIN[K])*1.D-16      
 3290 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
#
      else if (K == 21) :
      if((EN-EIN[K]:
) > XROT4143(NROT4143)) GO TO 3293
      DO 3291 J=2,NROT4143
      if((EN-EIN[K]:
) <= XROT4143[J]) GO TO 3292
 3291 CONTINUE
      J=NROT4143
 3292 YXJ=math.log(YROT4143[J])
      YXJ1=math.log(YROT4143(J-1))
      XNJ=math.log(XROT4143[J])
      XNJ1=math.log(XROT4143(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN[K])*math.exp(A*math.log(EN-EIN[K])+B)/EN*1.D-16
      GO TO 3294
 3293 QIN(K,I)=PJ(2*K+1)*SFAC*YROT4143(NROT4143)*XROT4143(NROT4143)/(EN-EIN[K])*1.D-16      
 3294 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
#
      else if (K == 22) :
      if((EN-EIN[K]:
) > XROT4345(NROT4345)) GO TO 3297
      DO 3295 J=2,NROT4345
      if((EN-EIN[K]:
) <= XROT4345[J]) GO TO 3296
 3295 CONTINUE
      J=NROT4345
 3296 YXJ=math.log(YROT4345[J])
      YXJ1=math.log(YROT4345(J-1))
      XNJ=math.log(XROT4345[J])
      XNJ1=math.log(XROT4345(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN[K])*math.exp(A*math.log(EN-EIN[K])+B)/EN*1.D-16
      GO TO 3298
 3297 QIN(K,I)=PJ(2*K+1)*SFAC*YROT4345(NROT4345)*XROT4345(NROT4345)/(EN-EIN[K])*1.D-16      
 3298 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
#
      else if (K == 23) :
      if((EN-EIN[K]:
) > XROT4547(NROT4547)) GO TO 3301
      DO 3299 J=2,NROT4547
      if((EN-EIN[K]:
) <= XROT4547[J]) GO TO 3300
 3299 CONTINUE
      J=NROT4547
 3300 YXJ=math.log(YROT4547[J])
      YXJ1=math.log(YROT4547(J-1))
      XNJ=math.log(XROT4547[J])
      XNJ1=math.log(XROT4547(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN[K])*math.exp(A*math.log(EN-EIN[K])+B)/EN*1.D-16
      GO TO 3302
 3301 QIN(K,I)=PJ(2*K+1)*SFAC*YROT4547(NROT4547)*XROT4547(NROT4547)/(EN-EIN[K])*1.D-16      
 3302 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
#
      else if (K == 24) :
      if((EN-EIN[K]:
) > XROT4749(NROT4749)) GO TO 3305
      DO 3303 J=2,NROT4749
      if((EN-EIN[K]:
) <= XROT4749[J]) GO TO 3304
 3303 CONTINUE
      J=NROT4749
 3304 YXJ=math.log(YROT4749[J])
      YXJ1=math.log(YROT4749(J-1))
      XNJ=math.log(XROT4749[J])
      XNJ1=math.log(XROT4749(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K+1)*SFAC*(EN-EIN[K])*math.exp(A*math.log(EN-EIN[K])+B)/EN*1.D-16
      GO TO 3306
 3305 QIN(K,I)=PJ(2*K+1)*SFAC*YROT4749(NROT4749)*XROT4749(NROT4749)/(EN-EIN[K])*1.D-16      
 3306 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
      else:
      WRITE(6,997) K
  997 print(' ERROR IN INDEX IN OXYGEN def K=',I3)
      # endif
# CALCULATE ENHANCEMENT OF ROTATION DUE TO VIBRATIONAL RESONANCES
      QRES1=0.0
      if((EN-EIN[K]:
) > XROT(NROT)) GO TO 3333
      if((EN-EIN[K]:
) <= XROT[1]) GO TO 3333
      DO 3331 L=1,NROT
      if((EN-EIN[K]:
) <= XROT(L)) GO TO 3332 
 3331 CONTINUE     
      L=NROT
 3332 A=(YROT(L)-YROT(L-1))/(XROT(L)-XROT(L-1))
      B=(XROT(L-1)*YROT(L)-XROT(L)*YROT(L-1))/(XROT(L-1)-XROT(L))
      QRES1=(EN-EIN[K])*(A*(EN-EIN[K])+B)/EN
      QRES1=QRES1*PJ(2*K+1)*1.D-16                        
 3333 QIN(K,I)=QIN(K,I)+QRES1
  311 CONTINUE 
# INELASTIC ROTATION
      DO 312 K=25,48
      QIN(K,I)=0.0
      PEQIN(K,I)=0.50
      if(NANISO == 2):
 PEQIN(K,I)=0.00
      if(EN <= 0.0):
 GO TO 312
      if(EN <= EIN[K]:
) GO TO 312
      if(K == 25):
 :
      if(EN < XROT13[1]:
) GO TO 312
      if(EN > XROT13(NROT13):
) GO TO 3336
      DO 3334 J=2,NROT13 
      if(EN <= XROT13[J]:
) GO TO 3335
 3334 CONTINUE    
      J=NROT13
 3335 YXJ=math.log(YROT13[J])
      YXJ1=math.log(YROT13(J-1))
      XNJ=math.log(XROT13[J])
      XNJ1=math.log(XROT13(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3337
 3336 QIN(K,I)=PJ(2*K-49)*YROT13(NROT13)*XROT13(NROT13)/EN*1.D-16     
 3337 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
# 
      else if(K == 26) :
      if(EN < XROT35[1]:
) GO TO 312
      if(EN > XROT35(NROT35):
) GO TO 3340
      DO 3338 J=2,NROT35 
      if(EN <= XROT35[J]:
) GO TO 3339
 3338 CONTINUE    
      J=NROT35
 3339 YXJ=math.log(YROT35[J])
      YXJ1=math.log(YROT35(J-1))
      XNJ=math.log(XROT35[J])
      XNJ1=math.log(XROT35(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3341
 3340 QIN(K,I)=PJ(2*K-49)*YROT35(NROT35)*XROT35(NROT35)/EN*1.D-16     
 3341 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
# 
      else if(K == 27) :
      if(EN < XROT57[1]:
) GO TO 312
      if(EN > XROT57(NROT57):
) GO TO 3344
      DO 3342 J=2,NROT57 
      if(EN <= XROT57[J]:
) GO TO 3343
 3342 CONTINUE    
      J=NROT57
 3343 YXJ=math.log(YROT57[J])
      YXJ1=math.log(YROT57(J-1))
      XNJ=math.log(XROT57[J])
      XNJ1=math.log(XROT57(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3345
 3344 QIN(K,I)=PJ(2*K-49)*YROT57(NROT57)*XROT57(NROT57)/EN*1.D-16     
 3345 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
# 
      else if(K == 28) :
      if(EN < XROT79[1]:
) GO TO 312
      if(EN > XROT79(NROT79):
) GO TO 3348
      DO 3346 J=2,NROT79 
      if(EN <= XROT79[J]:
) GO TO 3347
 3346 CONTINUE    
      J=NROT79
 3347 YXJ=math.log(YROT79[J])
      YXJ1=math.log(YROT79(J-1))
      XNJ=math.log(XROT79[J])
      XNJ1=math.log(XROT79(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3349
 3348 QIN(K,I)=PJ(2*K-49)*YROT79(NROT79)*XROT79(NROT79)/EN*1.D-16     
 3349 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
# 
      else if(K == 29) :
      if(EN < XROT911[1]:
) GO TO 312
      if(EN > XROT911(NROT911):
) GO TO 3352
      DO 3350 J=2,NROT911 
      if(EN <= XROT911[J]:
) GO TO 3351
 3350 CONTINUE    
      J=NROT911
 3351 YXJ=math.log(YROT911[J])
      YXJ1=math.log(YROT911(J-1))
      XNJ=math.log(XROT911[J])
      XNJ1=math.log(XROT911(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3353
 3352 QIN(K,I)=PJ(2*K-49)*YROT911(NROT911)*XROT911(NROT911)/EN*1.D-16   
 3353 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
# 
      else if(K == 30) :
      if(EN < XROT1113[1]:
) GO TO 312
      if(EN > XROT1113(NROT1113):
) GO TO 3356
      DO 3354 J=2,NROT1113 
      if(EN <= XROT1113[J]:
) GO TO 3355
 3354 CONTINUE    
      J=NROT1113
 3355 YXJ=math.log(YROT1113[J])
      YXJ1=math.log(YROT1113(J-1))
      XNJ=math.log(XROT1113[J])
      XNJ1=math.log(XROT1113(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3357
 3356 QIN(K,I)=PJ(2*K-49)*YROT1113(NROT1113)*XROT1113(NROT1113)/EN*1.D-16   
 3357 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
# 
      else if(K == 31) :
      if(EN < XROT1315[1]:
) GO TO 312
      if(EN > XROT1315(NROT1315):
) GO TO 3360
      DO 3358 J=2,NROT1315 
      if(EN <= XROT1315[J]:
) GO TO 3359
 3358 CONTINUE    
      J=NROT1315
 3359 YXJ=math.log(YROT1315[J])
      YXJ1=math.log(YROT1315(J-1))
      XNJ=math.log(XROT1315[J])
      XNJ1=math.log(XROT1315(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3361
 3360 QIN(K,I)=PJ(2*K-49)*YROT1315(NROT1315)*XROT1315(NROT1315)/EN*1.D-16   
 3361 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
# 
      else if(K == 32) :
      if(EN < XROT1517[1]:
) GO TO 312
      if(EN > XROT1517(NROT1517):
) GO TO 3364
      DO 3362 J=2,NROT1517 
      if(EN <= XROT1517[J]:
) GO TO 3363
 3362 CONTINUE    
      J=NROT1517
 3363 YXJ=math.log(YROT1517[J])
      YXJ1=math.log(YROT1517(J-1))
      XNJ=math.log(XROT1517[J])
      XNJ1=math.log(XROT1517(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3365
 3364 QIN(K,I)=PJ(2*K-49)*YROT1517(NROT1517)*XROT1517(NROT1517)/EN*1.D-16   
 3365 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
# 
      else if(K == 33) :
      if(EN < XROT1719[1]:
) GO TO 312
      if(EN > XROT1719(NROT1719):
) GO TO 3368
      DO 3366 J=2,NROT1719 
      if(EN <= XROT1719[J]:
) GO TO 3367
 3366 CONTINUE    
      J=NROT1719
 3367 YXJ=math.log(YROT1719[J])
      YXJ1=math.log(YROT1719(J-1))
      XNJ=math.log(XROT1719[J])
      XNJ1=math.log(XROT1719(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3369
 3368 QIN(K,I)=PJ(2*K-49)*YROT1719(NROT1719)*XROT1719(NROT1719)/EN*1.D-16   
 3369 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
# 
      else if(K == 34) :
      if(EN < XROT1921[1]:
) GO TO 312
      if(EN > XROT1921(NROT1921):
) GO TO 3372
      DO 3370 J=2,NROT1921 
      if(EN <= XROT1921[J]:
) GO TO 3371
 3370 CONTINUE    
      J=NROT1921
 3371 YXJ=math.log(YROT1921[J])
      YXJ1=math.log(YROT1921(J-1))
      XNJ=math.log(XROT1921[J])
      XNJ1=math.log(XROT1921(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3373
 3372 QIN(K,I)=PJ(2*K-49)*YROT1921(NROT1921)*XROT1921(NROT1921)/EN*1.D-16   
 3373 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
# 
      else if(K == 35) :
      if(EN < XROT2123[1]:
) GO TO 312
      if(EN > XROT2123(NROT2123):
) GO TO 3376
      DO 3374 J=2,NROT2123 
      if(EN <= XROT2123[J]:
) GO TO 3375
 3374 CONTINUE    
      J=NROT2123
 3375 YXJ=math.log(YROT2123[J])
      YXJ1=math.log(YROT2123(J-1))
      XNJ=math.log(XROT2123[J])
      XNJ1=math.log(XROT2123(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3377
 3376 QIN(K,I)=PJ(2*K-49)*YROT2123(NROT2123)*XROT2123(NROT2123)/EN*1.D-16   
 3377 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
# 
      else if(K == 36) :
      if(EN < XROT2325[1]:
) GO TO 312
      if(EN > XROT2325(NROT2325):
) GO TO 3380
      DO 3378 J=2,NROT2325 
      if(EN <= XROT2325[J]:
) GO TO 3379
 3378 CONTINUE    
      J=NROT2325
 3379 YXJ=math.log(YROT2325[J])
      YXJ1=math.log(YROT2325(J-1))
      XNJ=math.log(XROT2325[J])
      XNJ1=math.log(XROT2325(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3381
 3380 QIN(K,I)=PJ(2*K-49)*YROT2325(NROT2325)*XROT2325(NROT2325)/EN*1.D-16   
 3381 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
# 
      else if(K == 37) :
      if(EN < XROT2527[1]:
) GO TO 312
      if(EN > XROT2527(NROT2527):
) GO TO 3384
      DO 3382 J=2,NROT2527 
      if(EN <= XROT2527[J]:
) GO TO 3383
 3382 CONTINUE    
      J=NROT2527
 3383 YXJ=math.log(YROT2527[J])
      YXJ1=math.log(YROT2527(J-1))
      XNJ=math.log(XROT2527[J])
      XNJ1=math.log(XROT2527(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3385
 3384 QIN(K,I)=PJ(2*K-49)*YROT2527(NROT2527)*XROT2527(NROT2527)/EN*1.D-16   
 3385 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
# 
      else if(K == 38) :
      if(EN < XROT2729[1]:
) GO TO 312
      if(EN > XROT2729(NROT2729):
) GO TO 3388
      DO 3386 J=2,NROT2729 
      if(EN <= XROT2729[J]:
) GO TO 3387
 3386 CONTINUE    
      J=NROT2729
 3387 YXJ=math.log(YROT2729[J])
      YXJ1=math.log(YROT2729(J-1))
      XNJ=math.log(XROT2729[J])
      XNJ1=math.log(XROT2729(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3389
 3388 QIN(K,I)=PJ(2*K-49)*YROT2729(NROT2729)*XROT2729(NROT2729)/EN*1.D-16   
 3389 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
# 
      else if(K == 39) :
      if(EN < XROT2931[1]:
) GO TO 312
      if(EN > XROT2931(NROT2931):
) GO TO 3392
      DO 3390 J=2,NROT2931 
      if(EN <= XROT2931[J]:
) GO TO 3391
 3390 CONTINUE    
      J=NROT2931
 3391 YXJ=math.log(YROT2931[J])
      YXJ1=math.log(YROT2931(J-1))
      XNJ=math.log(XROT2931[J])
      XNJ1=math.log(XROT2931(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3393
 3392 QIN(K,I)=PJ(2*K-49)*YROT2931(NROT2931)*XROT2931(NROT2931)/EN*1.D-16   
 3393 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
# 
      else if(K == 40) :
      if(EN < XROT3133[1]:
) GO TO 312
      if(EN > XROT3133(NROT3133):
) GO TO 3396
      DO 3394 J=2,NROT3133 
      if(EN <= XROT3133[J]:
) GO TO 3395
 3394 CONTINUE    
      J=NROT3133
 3395 YXJ=math.log(YROT3133[J])
      YXJ1=math.log(YROT3133(J-1))
      XNJ=math.log(XROT3133[J])
      XNJ1=math.log(XROT3133(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3397
 3396 QIN(K,I)=PJ(2*K-49)*YROT3133(NROT3133)*XROT3133(NROT3133)/EN*1.D-16   
 3397 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
# 
      else if(K == 41) :
      if(EN < XROT3335[1]:
) GO TO 312
      if(EN > XROT3335(NROT3335):
) GO TO 3400
      DO 3398 J=2,NROT3335 
      if(EN <= XROT3335[J]:
) GO TO 3399
 3398 CONTINUE    
      J=NROT3335
 3399 YXJ=math.log(YROT3335[J])
      YXJ1=math.log(YROT3335(J-1))
      XNJ=math.log(XROT3335[J])
      XNJ1=math.log(XROT3335(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3401
 3400 QIN(K,I)=PJ(2*K-49)*YROT3335(NROT3335)*XROT3335(NROT3335)/EN*1.D-16   
 3401 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
# 
      else if(K == 42) :
      if(EN < XROT3537[1]:
) GO TO 312
      if(EN > XROT3537(NROT3537):
) GO TO 3404
      DO 3402 J=2,NROT3537 
      if(EN <= XROT3537[J]:
) GO TO 3403
 3402 CONTINUE    
      J=NROT3537
 3403 YXJ=math.log(YROT3537[J])
      YXJ1=math.log(YROT3537(J-1))
      XNJ=math.log(XROT3537[J])
      XNJ1=math.log(XROT3537(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3405
 3404 QIN(K,I)=PJ(2*K-49)*YROT3537(NROT3537)*XROT3537(NROT3537)/EN*1.D-16   
 3405 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
# 
      else if(K == 43) :
      if(EN < XROT3739[1]:
) GO TO 312
      if(EN > XROT3739(NROT3739):
) GO TO 3408
      DO 3406 J=2,NROT3739 
      if(EN <= XROT3739[J]:
) GO TO 3407 
 3406 CONTINUE    
      J=NROT3739
 3407 YXJ=math.log(YROT3739[J])
      YXJ1=math.log(YROT3739(J-1))
      XNJ=math.log(XROT3739[J])
      XNJ1=math.log(XROT3739(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3409
 3408 QIN(K,I)=PJ(2*K-49)*YROT3739(NROT3739)*XROT3739(NROT3739)/EN*1.D-16   
 3409 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
# 
      else if(K == 44) :
      if(EN < XROT3941[1]:
) GO TO 312
      if(EN > XROT3941(NROT3941):
) GO TO 3412
      DO 3410 J=2,NROT3941 
      if(EN <= XROT3941[J]:
) GO TO 3411 
 3410 CONTINUE    
      J=NROT3941
 3411 YXJ=math.log(YROT3941[J])
      YXJ1=math.log(YROT3941(J-1))
      XNJ=math.log(XROT3941[J])
      XNJ1=math.log(XROT3941(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3413
 3412 QIN(K,I)=PJ(2*K-49)*YROT3941(NROT3941)*XROT3941(NROT3941)/EN*1.D-16   
 3413 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
# 
      else if(K == 45) :
      if(EN < XROT4143[1]:
) GO TO 312
      if(EN > XROT4143(NROT4143):
) GO TO 3416
      DO 3414 J=2,NROT4143 
      if(EN <= XROT4143[J]:
) GO TO 3415 
 3414 CONTINUE    
      J=NROT4143
 3415 YXJ=math.log(YROT4143[J])
      YXJ1=math.log(YROT4143(J-1))
      XNJ=math.log(XROT4143[J])
      XNJ1=math.log(XROT4143(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3417
 3416 QIN(K,I)=PJ(2*K-49)*YROT4143(NROT4143)*XROT4143(NROT4143)/EN*1.D-16   
 3417 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
# 
      else if(K == 46) :
      if(EN < XROT4345[1]:
) GO TO 312
      if(EN > XROT4345(NROT4345):
) GO TO 3420
      DO 3418 J=2,NROT4345 
      if(EN <= XROT4345[J]:
) GO TO 3419 
 3418 CONTINUE    
      J=NROT4345
 3419 YXJ=math.log(YROT4345[J])
      YXJ1=math.log(YROT4345(J-1))
      XNJ=math.log(XROT4345[J])
      XNJ1=math.log(XROT4345(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3421
 3420 QIN(K,I)=PJ(2*K-49)*YROT4345(NROT4345)*XROT4345(NROT4345)/EN*1.D-16   
 3421 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
# 
      else if(K == 47) :
      if(EN < XROT4547[1]:
) GO TO 312
      if(EN > XROT4547(NROT4547):
) GO TO 3424
      DO 3422 J=2,NROT4547 
      if(EN <= XROT4547[J]:
) GO TO 3423 
 3422 CONTINUE    
      J=NROT4547
 3423 YXJ=math.log(YROT4547[J])
      YXJ1=math.log(YROT4547(J-1))
      XNJ=math.log(XROT4547[J])
      XNJ1=math.log(XROT4547(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3425
 3424 QIN(K,I)=PJ(2*K-49)*YROT4547(NROT4547)*XROT4547(NROT4547)/EN*1.D-16   
 3425 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
# 
      else if(K == 48) :
      if(EN < XROT4749[1]:
) GO TO 312
      if(EN > XROT4749(NROT4749):
) GO TO 3428
      DO 3426 J=2,NROT4749 
      if(EN <= XROT4749[J]:
) GO TO 3427 
 3426 CONTINUE    
      J=NROT4749
 3427 YXJ=math.log(YROT4749[J])
      YXJ1=math.log(YROT4749(J-1))
      XNJ=math.log(XROT4749[J])
      XNJ1=math.log(XROT4749(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QIN(K,I)=PJ(2*K-49)*math.exp(A*math.log(EN)+B)*1.D-16
      GO TO 3429
 3428 QIN(K,I)=PJ(2*K-49)*YROT4749(NROT4749)*XROT4749(NROT4749)/EN*1.D-16   
 3429 if(EN > 3.0) PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
      else:
      WRITE(6,997) K
      # endif
# CALCULATE ENHANCEMENT OF ROTATION DUE TO VIBRATIONAL RESONANCES
      QRES=0.0
      if(EN > XROT(NROT):
) GO TO 3113
      if(EN <= XROT[1]:
) GO TO 3113
      DO 3111 L=1,NROT
      if(EN <= XROT(L):
) GO TO 3112
 3111 CONTINUE
      L=NROT
 3112 A=(YROT(L)-YROT(L-1))/(XROT(L)-XROT(L-1))
      B=(XROT(L-1)*YROT(L)-XROT(L)*YROT(L-1))/(XROT(L-1)-XROT(L))
      QRES=(A*EN+B)*PJ(2*K-49)*1.D-16                          
 3113 QIN(K,I)=QIN(K,I)+QRES   
      QRSUM=QRSUM+QRES  
  312 CONTINUE
# FORCE ROTATIONAL X-SECTION TO FALL AS 1/E**2 ABOVE 3 EV
c NB 1/E ALREADY USED SO ONLY 1/E EXTRA
      if(EN < 3.0):
 GO TO 379
      DO 315 K=1,48
  315 QIN(K,I)=QIN(K,I)*(3.0/EN)
#
# SCALE ROTATIONAL X-SECTIONS BY ROTSCALE
  379 DO 3456 K=1,48
 3456 QIN(K,I)=QIN(K,I)*ROTSCALE
#  SUPERELASTIC V1
#  379 IF(EN == 0.0) GO TO 400
      if(EN == 0.0):
 GO TO 400
      if((EN+EIN(50):
) > XVIB[NVIB]) GO TO 382 
      DO 380 J=2,NVIB
      if((EN+EIN(50):
) <= XVIB[J]) GO TO 381
  380 CONTINUE
      J=NVIB
  381 A=(YVIB1[J]-YVIB1(J-1))/(XVIB[J]-XVIB[J-1])
      B=(XVIB[J-1]*YVIB1[J]-XVIB[J]*YVIB1(J-1))/(XVIB[J-1]-XVIB[J])
      QIN(49,I)=(A*(EN+EIN(50))+B)*(EN+EIN(50))/EN
      QIN(49,I)=QIN(49,I)*APOP2/(1.0+APOP2)*1.D-16
      GO TO 383
  382 QIN(49,I)=YVIB1(NVIB)*(XVIB[NVIB]/EN)*APOP2/(1.0+APOP2)*1.D-16
  383 if(EN > 6.0) PEQIN(49,I)=PEQEL(2,(I-IOFFN(49)))
#  VIB1                     
  400 if(EN <= EIN(50)) GO TO 450    
      if(EN > XVIB[NVIB]):
 GO TO 430                                
      DO 410 J=2,NVIB                                                  
      if(EN <= XVIB[J]):
 GO TO 420                                      
  410 CONTINUE                                                          
      J=NVIB                                                           
  420 A=(YVIB1[J]-YVIB1(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB1[J]-XVIB[J]*YVIB1(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(50,I)=(A*EN+B)/(1.0+APOP2)*1.D-16
      GO TO 440
# SCALE BY 1/E ABOVE XVIB[NVIB]
  430 QIN(50,I)=YVIB1(NVIB)*(XVIB[NVIB]/EN)/(1.0+APOP2)*1.D-16
  440 if(EN > 6.0) PEQIN(50,I)=PEQEL(2,(I-IOFFN(50))) 
#                                                                       
  450 if(EN <= EIN(51)) GO TO 500                     
      if(EN > XVIB[NVIB]):
 GO TO 480                   
      DO 460 J=2,NVIB                                                  
      if(EN <= XVIB[J]):
 GO TO 470                                      
  460 CONTINUE                                                          
      J=NVIB                                                           
  470 A=(YVIB2[J]-YVIB2(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB2[J]-XVIB[J]*YVIB2(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(51,I)=(A*EN+B)*1.D-16
      GO TO 490
# SCALE BY 1/E ABOVE XVIB[NVIB]
  480 QIN(51,I)=YVIB2(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  490 if(EN > 6.0) PEQIN(51,I)=PEQEL(2,(I-IOFFN(51)))              
#                                                                       
  500 if(EN <= EIN(52)) GO TO 550 
      if(EN > XVIB[NVIB]):
 GO TO 530                           
      DO 510 J=2,NVIB                                                  
      if(EN <= XVIB[J]):
 GO TO 520                                      
  510 CONTINUE                                                          
      J=NVIB                                                           
  520 A=(YVIB3[J]-YVIB3(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB3[J]-XVIB[J]*YVIB3(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(52,I)=(A*EN+B)*1.D-16    
      GO TO 540
# SCALE BY 1/E ABOVE XVIB[NVIB]
  530 QIN(52,I)=YVIB3(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  540 if(EN > 6.0) PEQIN(52,I)=PEQEL(2,(I-IOFFN(52)))
#                                                                       
  550 if(EN <= EIN(53)) GO TO 600   
      if(EN > XVIB[NVIB]):
 GO TO 580                                   
      DO 560 J=2,NVIB                                                 
      if(EN <= XVIB[J]):
 GO TO 570                                      
  560 CONTINUE                                                          
      J=NVIB                                                           
  570 A=(YVIB4[J]-YVIB4(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB4[J]-XVIB[J]*YVIB4(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(53,I)=(A*EN+B)*1.D-16   
      GO TO 590
# SCALE BY 1/E ABOVE XVIB[NVIB]
  580 QIN(53,I)=YVIB4(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  590 if(EN > 6.0) PEQIN(53,I)=PEQEL(2,(I-IOFFN(53)))     
#                                                                       
  600 if(EN <= EIN(54)) GO TO 605   
      if(EN > XVIB[NVIB]):
 GO TO 603                                   
      DO 601 J=2,NVIB                                                 
      if(EN <= XVIB[J]):
 GO TO 602                                      
  601 CONTINUE                                                          
      J=NVIB                                                           
  602 A=(YVIB5[J]-YVIB5(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB5[J]-XVIB[J]*YVIB5(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(54,I)=(A*EN+B)*1.D-16   
      GO TO 604
# SCALE BY 1/E ABOVE XVIB[NVIB]
  603 QIN(54,I)=YVIB5(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  604 if(EN > 6.0) PEQIN(54,I)=PEQEL(2,(I-IOFFN(54)))                  
# A1 DELTA                                                                   
  605 if(EN <= EIN(55)) GO TO 610
      if(EN > XEXC1(NEXC1):
) GO TO 608                                 
      DO 606 J=2,NEXC1                                                  
      if(EN <= XEXC1[J]:
) GO TO 607                                      
  606 CONTINUE                                                          
      J=NEXC1                                                           
  607 A=(YEXC1[J]-YEXC1(J-1))/(XEXC1[J]-XEXC1(J-1))                     
      B=(XEXC1(J-1)*YEXC1[J]-XEXC1[J]*YEXC1(J-1))/(XEXC1(J-1)-XEXC1[J]) 
      QIN(55,I)=(A*EN+B)*1.D-16     
      GO TO 609   
# SCALE BY 1/E**2 ABOVE XEXC1(NEXC1) EV                                       
  608 QIN(55,I)=YEXC1(NEXC1)*(XEXC1(NEXC1)/EN)**2*1.D-16        
  609 if(EN > 6.0) PEQIN(55,I)=PEQEL(2,(I-IOFFN(55))) 
#              
  610 if(EN <= EIN(56)) GO TO 615   
      if(EN > XVIB[NVIB]):
 GO TO 613                                   
      DO 611 J=2,NVIB                                                 
      if(EN <= XVIB[J]):
 GO TO 612                                      
  611 CONTINUE                                                          
      J=NVIB                                                           
  612 A=(YVIB6[J]-YVIB6(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB6[J]-XVIB[J]*YVIB6(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(56,I)=(A*EN+B)*1.D-16   
      GO TO 614
# SCALE BY 1/E ABOVE XVIB[NVIB]
  613 QIN(56,I)=YVIB6(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  614 if(EN > 6.0) PEQIN(56,I)=PEQEL(2,(I-IOFFN(56)))                 
#              
  615 if(EN <= EIN(57)) GO TO 620   
      if(EN > XVIB[NVIB]):
 GO TO 618                                   
      DO 616 J=2,NVIB                                                 
      if(EN <= XVIB[J]):
 GO TO 617                                      
  616 CONTINUE                                                          
      J=NVIB                                                           
  617 A=(YVIB7[J]-YVIB7(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB7[J]-XVIB[J]*YVIB7(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(57,I)=(A*EN+B)*1.D-16   
      GO TO 619
# SCALE BY 1/E ABOVE XVIB[NVIB]
  618 QIN(57,I)=YVIB7(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  619 if(EN > 6.0) PEQIN(57,I)=PEQEL(2,(I-IOFFN(57)))                 
#              
  620 if(EN <= EIN(58)) GO TO 625   
      if(EN > XVIB[NVIB]):
 GO TO 623                                   
      DO 621 J=2,NVIB                                                 
      if(EN <= XVIB[J]):
 GO TO 622                                      
  621 CONTINUE                                                          
      J=NVIB                                                           
  622 A=(YVIB8[J]-YVIB8(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB8[J]-XVIB[J]*YVIB8(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(58,I)=(A*EN+B)*1.D-16   
      GO TO 624
# SCALE BY 1/E ABOVE XVIB[NVIB]
  623 QIN(58,I)=YVIB8(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  624 if(EN > 6.0) PEQIN(58,I)=PEQEL(2,(I-IOFFN(58)))                 
# B1 SIGMA                                                                  
  625 if(EN <= EIN(59)) GO TO 630 
      if(EN > XEXC2(NEXC2):
) GO TO 628                  
      DO 626 J=2,NEXC2                                                  
      if(EN <= XEXC2[J]:
) GO TO 627                                      
  626 CONTINUE                                                          
      J=NEXC2                                                           
  627 A=(YEXC2[J]-YEXC2(J-1))/(XEXC2[J]-XEXC2(J-1))                     
      B=(XEXC2(J-1)*YEXC2[J]-XEXC2[J]*YEXC2(J-1))/(XEXC2(J-1)-XEXC2[J]) 
      QIN(59,I)=(A*EN+B)*1.D-16        
      GO TO 629   
# SCALE BY 1/E**2 ABOVE XEXC2(NEXC2) EV                                     
  628 QIN(59,I)=YEXC2(NEXC2)*(XEXC2(NEXC2)/EN)**2*1.D-16      
  629 if(EN > (3.0*EIN(59))) PEQIN(61,I)=PEQEL(2,(I-IOFFN(59)))  
#              
  630 if(EN <= EIN(60)) GO TO 635   
      if(EN > XVIB[NVIB]):
 GO TO 633                                   
      DO 631 J=2,NVIB                                                 
      if(EN <= XVIB[J]):
 GO TO 632                                      
  631 CONTINUE                                                          
      J=NVIB                                                           
  632 A=(YVIB9[J]-YVIB9(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB9[J]-XVIB[J]*YVIB9(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(60,I)=(A*EN+B)*1.D-16   
      GO TO 634
# SCALE BY 1/E ABOVE XVIB[NVIB]
  633 QIN(60,I)=YVIB9(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  634 if(EN > 6.0) PEQIN(60,I)=PEQEL(2,(I-IOFFN(60)))                 
#              
  635 if(EN <= EIN(61)) GO TO 640   
      if(EN > XVIB[NVIB]):
 GO TO 638                                   
      DO 636 J=2,NVIB                                                 
      if(EN <= XVIB[J]):
 GO TO 637                                      
  636 CONTINUE                                                          
      J=NVIB                                                           
  637 A=(YVIB10[J]-YVIB10(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB10[J]-XVIB[J]*YVIB10(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(61,I)=(A*EN+B)*1.D-16   
      GO TO 639
# SCALE BY 1/E ABOVE XVIB[NVIB]
  638 QIN(61,I)=YVIB10(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  639 if(EN > 6.0) PEQIN(61,I)=PEQEL(2,(I-IOFFN(61)))                 
#              
  640 if(EN <= EIN(62)) GO TO 645   
      if(EN > XVIB[NVIB]):
 GO TO 643                                   
      DO 641 J=2,NVIB                                                 
      if(EN <= XVIB[J]):
 GO TO 642                                      
  641 CONTINUE                                                          
      J=NVIB                                                           
  642 A=(YVIB11[J]-YVIB11(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB11[J]-XVIB[J]*YVIB11(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(62,I)=(A*EN+B)*1.D-16   
      GO TO 644
# SCALE BY 1/E ABOVE XVIB[NVIB]
  643 QIN(62,I)=YVIB11(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  644 if(EN > 6.0) PEQIN(62,I)=PEQEL(2,(I-IOFFN(62)))                 
#              
  645 if(EN <= EIN(63)) GO TO 650   
      if(EN > XVIB[NVIB]):
 GO TO 648                                   
      DO 646 J=2,NVIB                                                 
      if(EN <= XVIB[J]):
 GO TO 647                                      
  646 CONTINUE                                                          
      J=NVIB                                                           
  647 A=(YVIB12[J]-YVIB12(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB12[J]-XVIB[J]*YVIB12(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(63,I)=(A*EN+B)*1.D-16   
      GO TO 649
# SCALE BY 1/E ABOVE XVIB[NVIB]
  648 QIN(63,I)=YVIB12(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  649 if(EN > 6.0) PEQIN(63,I)=PEQEL(2,(I-IOFFN(63)))                 
#              
  650 if(EN <= EIN(64)) GO TO 655   
      if(EN > XVIB[NVIB]):
 GO TO 653                                   
      DO 651 J=2,NVIB                                                 
      if(EN <= XVIB[J]):
 GO TO 652                                      
  651 CONTINUE                                                          
      J=NVIB                                                           
  652 A=(YVIB13[J]-YVIB13(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB13[J]-XVIB[J]*YVIB13(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(64,I)=(A*EN+B)*1.D-16   
      GO TO 654
# SCALE BY 1/E ABOVE XVIB[NVIB]
  653 QIN(64,I)=YVIB13(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  654 if(EN > 6.0) PEQIN(64,I)=PEQEL(2,(I-IOFFN(64)))                 
#              
  655 if(EN <= EIN(65)) GO TO 660   
      if(EN > XVIB[NVIB]):
 GO TO 658                                   
      DO 656 J=2,NVIB                                                 
      if(EN <= XVIB[J]):
 GO TO 657                                      
  656 CONTINUE                                                          
      J=NVIB                                                           
  657 A=(YVIB14[J]-YVIB14(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB14[J]-XVIB[J]*YVIB14(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(65,I)=(A*EN+B)*1.D-16   
      GO TO 659
# SCALE BY 1/E ABOVE XVIB[NVIB]
  658 QIN(65,I)=YVIB14(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  659 if(EN > 6.0) PEQIN(65,I)=PEQEL(2,(I-IOFFN(65)))                 
#              
  660 if(EN <= EIN(66)) GO TO 665   
      if(EN > XVIB[NVIB]):
 GO TO 663                                   
      DO 661 J=2,NVIB                                                 
      if(EN <= XVIB[J]):
 GO TO 662                                      
  661 CONTINUE                                                          
      J=NVIB                                                           
  662 A=(YVIB15[J]-YVIB15(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB15[J]-XVIB[J]*YVIB15(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(66,I)=(A*EN+B)*1.D-16   
      GO TO 664
# SCALE BY 1/E ABOVE XVIB[NVIB]
  663 QIN(66,I)=YVIB15(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  664 if(EN > 6.0) PEQIN(66,I)=PEQEL(2,(I-IOFFN(66)))                 
#              
  665 if(EN <= EIN(67)) GO TO 670   
      if(EN > XVIB[NVIB]):
 GO TO 668                                   
      DO 666 J=2,NVIB                                                 
      if(EN <= XVIB[J]):
 GO TO 667                                      
  666 CONTINUE                                                          
      J=NVIB                                                           
  667 A=(YVIB16[J]-YVIB16(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB16[J]-XVIB[J]*YVIB16(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(67,I)=(A*EN+B)*1.D-16   
      GO TO 669
# SCALE BY 1/E ABOVE XVIB[NVIB]
  668 QIN(67,I)=YVIB16(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  669 if(EN > 6.0) PEQIN(67,I)=PEQEL(2,(I-IOFFN(67)))                 
#              
  670 if(EN <= EIN(68)) GO TO 675   
      if(EN > XVIB[NVIB]):
 GO TO 673                                   
      DO 671 J=2,NVIB                                                 
      if(EN <= XVIB[J]):
 GO TO 672                                      
  671 CONTINUE                                                          
      J=NVIB                                                           
  672 A=(YVIB17[J]-YVIB17(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB17[J]-XVIB[J]*YVIB17(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(68,I)=(A*EN+B)*1.D-16   
      GO TO 674
# SCALE BY 1/E ABOVE XVIB[NVIB]
  673 QIN(68,I)=YVIB17(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  674 if(EN > 6.0) PEQIN(68,I)=PEQEL(2,(I-IOFFN(68)))                 
#              
  675 if(EN <= EIN(69)) GO TO 680   
      if(EN > XVIB[NVIB]):
 GO TO 678                                   
      DO 676 J=2,NVIB                                                 
      if(EN <= XVIB[J]):
 GO TO 677                                      
  676 CONTINUE                                                          
      J=NVIB                                                           
  677 A=(YVIB18[J]-YVIB18(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB18[J]-XVIB[J]*YVIB18(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(69,I)=(A*EN+B)*1.D-16   
      GO TO 679
# SCALE BY 1/E ABOVE XVIB[NVIB]
  678 QIN(69,I)=YVIB18(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  679 if(EN > 6.0) PEQIN(69,I)=PEQEL(2,(I-IOFFN(69)))                 
#              
  680 if(EN <= EIN(70)) GO TO 685   
      if(EN > XVIB[NVIB]):
 GO TO 683                                   
      DO 681 J=2,NVIB                                                 
      if(EN <= XVIB[J]):
 GO TO 682                                      
  681 CONTINUE                                                          
      J=NVIB                                                           
  682 A=(YVIB19[J]-YVIB19(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB19[J]-XVIB[J]*YVIB19(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(70,I)=(A*EN+B)*1.D-16   
      GO TO 684
# SCALE BY 1/E ABOVE XVIB[NVIB]
  683 QIN(70,I)=YVIB19(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  684 if(EN > 6.0) PEQIN(70,I)=PEQEL(2,(I-IOFFN(70)))                 
#              
  685 if(EN <= EIN(71)) GO TO 690   
      if(EN > XVIB[NVIB]):
 GO TO 688                                   
      DO 686 J=2,NVIB                                                 
      if(EN <= XVIB[J]):
 GO TO 687                                      
  686 CONTINUE                                                          
      J=NVIB                                                           
  687 A=(YVIB20[J]-YVIB20(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB20[J]-XVIB[J]*YVIB20(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(71,I)=(A*EN+B)*1.D-16   
      GO TO 689
# SCALE BY 1/E ABOVE XVIB[NVIB]
  688 QIN(71,I)=YVIB20(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  689 if(EN > 6.0) PEQIN(71,I)=PEQEL(2,(I-IOFFN(71)))                 
#              
  690 if(EN <= EIN(72)) GO TO 1000  
      if(EN > XVIB[NVIB]):
 GO TO 693                                   
      DO 691 J=2,NVIB                                                 
      if(EN <= XVIB[J]):
 GO TO 692                                      
  691 CONTINUE                                                          
      J=NVIB                                                           
  692 A=(YVIB21[J]-YVIB21(J-1))/(XVIB[J]-XVIB[J-1])                     
      B=(XVIB[J-1]*YVIB21[J]-XVIB[J]*YVIB21(J-1))/(XVIB[J-1]-XVIB[J]) 
      QIN(72,I)=(A*EN+B)*1.D-16   
      GO TO 694
# SCALE BY 1/E ABOVE XVIB[NVIB]
  693 QIN(72,I)=YVIB20(NVIB)*(XVIB[NVIB]/EN)*1.D-16
  694 if(EN > 6.0) PEQIN(72,I)=PEQEL(2,(I-IOFFN(72)))                 
#  
#   HERZBERG CONTINUUM  C1SIG +A#3DEL + A3SIG 
# PART1                                                            
 1000 if(EN <= EIN(73)) GO TO 1030  
      if(EN > XEXC3(NEXC3):
) GO TO 1020                              
      DO 1010 J=2,NEXC3                                                 
      if(EN <= XEXC3[J]:
) GO TO 1015                                     
 1010 CONTINUE                                                          
      J=NEXC3                                                           
 1015 A=(YEXC3[J]-YEXC3(J-1))/(XEXC3[J]-XEXC3(J-1))                     
      B=(XEXC3(J-1)*YEXC3[J]-XEXC3[J]*YEXC3(J-1))/(XEXC3(J-1)-XEXC3[J]) 
      QIN(73,I)=(A*EN+B)*1.D-16                   
      GO TO 1021
# SCALE BY 1/E ABOVE XEXC3(NEXC3)                            
 1020 QIN(73,I)=YEXC3(NEXC3)*(XEXC3(NEXC3)/EN)*1.D-16         
 1021 if(EN > (2.0*EIN(73))) PEQIN(73,I)=PEQEL(2,(I-IOFFN(73)))       
# PART2                                                                      
 1030 if(EN <= EIN(74)) GO TO 1060
      if(EN > XEXC4(NEXC4):
) GO TO 1050                                
      DO 1040 J=2,NEXC4                                                 
      if(EN <= XEXC4[J]:
) GO TO 1045                                     
 1040 CONTINUE                                                          
      J=NEXC4                                                           
 1045 A=(YEXC4[J]-YEXC4(J-1))/(XEXC4[J]-XEXC4(J-1))                     
      B=(XEXC4(J-1)*YEXC4[J]-XEXC4[J]*YEXC4(J-1))/(XEXC4(J-1)-XEXC4[J]) 
      QIN(74,I)=(A*EN+B)*1.D-16                     
      GO TO 1060
# SCALE BY 1/E ABOVE XEXC4(NEXC4)                            
 1050 QIN(74,I)=YEXC4(NEXC4)*(XEXC4(NEXC4)/EN)*1.D-16           
 1060 if(EN > (2.0*EIN(74))) PEQIN(74,I)=PEQEL(2,(I-IOFFN(74)))
# PART3                                                                      
      if(EN <= EIN(75):
) GO TO 1100      
      if(EN > XEXC5(NEXC5):
) GO TO 1080                                
      DO 1070 J=2,NEXC5                                                 
      if(EN <= XEXC5[J]:
) GO TO 1075                                     
 1070 CONTINUE                                                          
      J=NEXC5                                                           
 1075 A=(YEXC5[J]-YEXC5(J-1))/(XEXC5[J]-XEXC5(J-1))                     
      B=(XEXC5(J-1)*YEXC5[J]-XEXC5[J]*YEXC5(J-1))/(XEXC5(J-1)-XEXC5[J]) 
      QIN(75,I)=(A*EN+B)*1.D-16              
      GO TO 1100
# SCALE BY 1/E ABOVE XEXC5(NEXC5)                              
 1080 QIN(75,I)=YEXC5(NEXC5)*(XEXC5(NEXC5)/EN)*1.D-16              
 1100 if(EN > (2.0*EIN(75))) PEQIN(75,I)=PEQEL(2,(I-IOFFN(75)))
# SUM OF TRANSITIONS TO B3SIGMA V=7 TO V=21
      if(EN <= EIN(76):
) GO TO 1150
# USE BEF SCALING
      QIN(76,I)=0.00026/(EIN(76)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(76)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(76)+E(3))
      if(QIN(76,I):
 < 0.0) QIN(76,I)=0.0  
      if(EN > (2.0*EIN(76):
)) PEQIN(76,I)=PEQEL(2,(I-IOFFN(76)))
#
# SCHUMANN-RUNGE CONTINUUM 
 1150 if(EN <= EIN(77)) GO TO 1151
# USE BEF SCALING
      QIN(77,I)=0.000408/(EIN(77)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(77)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(77)+E(3))
 1151 if(EN <= EIN(78)) GO TO 1152
      QIN(78,I)=0.000623/(EIN(78)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(78)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(78)+E(3))
 1152 if(EN <= EIN(79)) GO TO 1153
      QIN(79,I)=0.001016/(EIN(79)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(79)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(79)+E(3))
 1153 if(EN <= EIN(80)) GO TO 1154
      QIN(80,I)=0.001562/(EIN(80)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(80)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(80)+E(3))
 1154 if(EN <= EIN(81)) GO TO 1155
      QIN(81,I)=0.002312/(EIN(81)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(81)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(81)+E(3))
 1155 if(EN <= EIN(82)) GO TO 1156
      QIN(82,I)=0.003234/(EIN(82)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(82)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(82)+E(3))
 1156 if(EN <= EIN(83)) GO TO 1157
      QIN(83,I)=0.004362/(EIN(83)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(83)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(83)+E(3))
 1157 if(EN <= EIN(84)) GO TO 1158
      QIN(84,I)=0.005573/(EIN(84)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(84)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(84)+E(3))
 1158 if(EN <= EIN(85)) GO TO 1159
      QIN(85,I)=0.006930/(EIN(85)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(85)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(85)+E(3))
 1159 if(EN <= EIN(86)) GO TO 1160
      QIN(86,I)=0.008342/(EIN(86)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(86)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(86)+E(3))
 1160 if(EN <= EIN(87)) GO TO 1161
      QIN(87,I)=0.009692/(EIN(87)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(87)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(87)+E(3))
# SUM OF RESONANCES (NON-DIPOLE) IN S-R CONTINUUM AT 8.20EV
      if(EN <= EIN(88):
) GO TO 1161      
      if(EN > XEXC6(NEXC6):
) GO TO 963                                
      DO 961 J=2,NEXC6                                                 
      if(EN <= XEXC6[J]:
) GO TO 962                                     
  961 CONTINUE                                                          
      J=NEXC6                                                           
  962 A=(YEXC6[J]-YEXC6(J-1))/(XEXC6[J]-XEXC6(J-1))                     
      B=(XEXC6(J-1)*YEXC6[J]-XEXC6[J]*YEXC6(J-1))/(XEXC6(J-1)-XEXC6[J]) 
      QIN(88,I)=(A*EN+B)*1.D-16          
      GO TO 1161
# SCALE BY 1/E ABOVE XEXC6(NEXC6)                              
  963 QIN(88,I)=YEXC6(NEXC6)*(XEXC6(NEXC6)/EN)*1.D-16             
# MORE SCHUMANN RUNGE CONTINUUM
 1161 if(EN <= EIN(89)) GO TO 1162
      QIN(89,I)=0.010816/(EIN(89)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(89)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(89)+E(3))
 1162 if(EN <= EIN(90)) GO TO 1163
      QIN(90,I)=0.011839/(EIN(90)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(90)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(90)+E(3))
 1163 if(EN <= EIN(91)) GO TO 1164
      QIN(91,I)=0.012580/(EIN(91)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(91)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(91)+E(3))
 1164 if(EN <= EIN(92)) GO TO 1165
      QIN(92,I)=0.013160/(EIN(92)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(92)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(92)+E(3))
 1165 if(EN <= EIN(93)) GO TO 1166
      QIN(93,I)=0.013432/(EIN(93)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(93)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(93)+E(3))
 1166 if(EN <= EIN(94)) GO TO 1167
      QIN(94,I)=0.013571/(EIN(94)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(94)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(94)+E(3))
 1167 if(EN <= EIN(95)) GO TO 1168
      QIN(95,I)=0.013425/(EIN(95)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(95)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(95)+E(3))
 1168 if(EN <= EIN(96)) GO TO 1169
      QIN(96,I)=0.012948/(EIN(96)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(96)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(96)+E(3))
 1169 if(EN <= EIN(97)) GO TO 1170
      QIN(97,I)=0.010892/(EIN(97)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(97)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(97)+E(3))
 1170 if(EN <= EIN(98)) GO TO 1171
      QIN(98,I)=0.006688/(EIN(98)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(98)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(98)+E(3))
 1171 if(EN <= EIN(99)) GO TO 1172
      QIN(99,I)=0.002784/(EIN(99)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(99)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(99)+E(3))
 1172 if(EN <= EIN(100)) GO TO 1173
      QIN(100,I)=0.001767/(EIN(100)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(100)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(100)+E(3))
 1173 if(EN <= EIN(101)) GO TO 1174
      QIN(101,I)=0.000633/(EIN(101)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(101)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(101)+E(3))
 1174 if(EN <= EIN(102)) GO TO 1175
      QIN(102,I)=0.000438/(EIN(102)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(102)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(102)+E(3))
 1175 if(EN <= EIN(103)) GO TO 1176
      QIN(103,I)=0.000465/(EIN(103)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(103)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(103)+E(3))
#
# E3 SIGMA V=0 'LONGEST BAND'
 1176 if(EN <= EIN(104)) GO TO 1177
      QIN(104,I)=0.008432/(EIN(104)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(104)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(104)+E(3))
# ADD RESONANT COMPONENT TO LONG BAND
      if(EN > XEXC7(NEXC7):
) GO TO 966                                
      DO 964 J=2,NEXC7                                                
      if(EN <= XEXC7[J]:
) GO TO 965                                     
  964 CONTINUE                                                          
      J=NEXC7                                                           
  965 A=(YEXC7[J]-YEXC7(J-1))/(XEXC7[J]-XEXC7(J-1))                     
      B=(XEXC7(J-1)*YEXC7[J]-XEXC7[J]*YEXC7(J-1))/(XEXC7(J-1)-XEXC7[J]) 
      QIN(104,I)=QIN(104,I)+(A*EN+B)*1.D-16                       
      GO TO 1177
# SCALE BY 1/E ABOVE XEXC7(NEXC7)                            
  966 QIN(104,I)=QIN(104,I)+YEXC7(NEXC7)*(XEXC7(NEXC7)/EN)*1.D-16       
#
# E3 SIGMA V=1 'SECOND BAND'
 1177 if(EN <= EIN(105)) GO TO 1178
      QIN(105,I)=0.007598/(EIN(105)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(105)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(105)+E(3))
# E3 SIGMA V=2 'THIRD BAND'
 1178 if(EN <= EIN(106)) GO TO 1881
      QIN(106,I)=0.000829/(EIN(106)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(106)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(106)+E(3))
# 
# TRIPLET SUM BELOW IP
# 
 1881 if(EN <= EIN(107)) GO TO 1179
      if(EN > XEXC8(NEXC8):
) GO TO 1884                              
      DO 1882 J=2,NEXC8                                                
      if(EN <= XEXC8[J]:
) GO TO 1883                                     
 1882 CONTINUE                                                          
      J=NEXC8                                                           
 1883 A=(YEXC8[J]-YEXC8(J-1))/(XEXC8[J]-XEXC8(J-1))                     
      B=(XEXC8(J-1)*YEXC8[J]-XEXC8[J]*YEXC8(J-1))/(XEXC8(J-1)-XEXC8[J])
      QIN(107,I)=(A*EN+B)*1.D-16                 
      GO TO 1179
# SCALE BY 1/E**1.5 ABOVE XEXC8(NEXC8)
 1884 QIN(107,I)=YEXC8(NEXC8)*((XEXC8(NEXC8)/EN)**1.5)*1.D-16           
#  
 1179 if(EN <= EIN(108)) GO TO 1180
      QIN(108,I)=0.000644/(EIN(108)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(108)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(108)+E(3))
# 
 1180 if(EN <= EIN(109)) GO TO 1181
      QIN(109,I)=0.001460/(EIN(109)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(109)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(109)+E(3))
# 
 1181 if(EN <= EIN(110)) GO TO 1182
      QIN(110,I)=0.000818/(EIN(110)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(110)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(110)+E(3))
# 
 1182 if(EN <= EIN(111)) GO TO 1183
      QIN(111,I)=0.000736/(EIN(111)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(111)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(111)+E(3))
# 
 1183 if(EN <= EIN(112)) GO TO 1184
      QIN(112,I)=0.000598/(EIN(112)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(112)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(112)+E(3))
# 
 1184 if(EN <= EIN(113)) GO TO 1185
      QIN(113,I)=0.001482/(EIN(113)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(113)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(113)+E(3))
# 
 1185 if(EN <= EIN(114)) GO TO 1186
      QIN(114,I)=0.000425/(EIN(114)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(114)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(114)+E(3))
# 
 1186 if(EN <= EIN(115)) GO TO 1187
      QIN(115,I)=0.001669/(EIN(115)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(115)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(115)+E(3))
# 
 1187 if(EN <= EIN(116)) GO TO 1188
      QIN(116,I)=0.001766/(EIN(116)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(116)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(116)+E(3))
# 
 1188 if(EN <= EIN(117)) GO TO 1189
      QIN(117,I)=0.001613/(EIN(117)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(117)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(117)+E(3))
#
 1189 DO  1200 JK=77,117
      if(QIN(JK,I):
 <= 0.0) QIN(JK,I)=0.0
      if(EN <= (2.0*EIN(JK):
)) GO TO 1200
      PEQIN(JK,I)=PEQEL(2,(I-IOFFN(JK)))
 1200 CONTINUE
# NEUTRAL DISSOCIATION ABOVE IONISATION ENERGY
# 
      if(EN <= EIN(118):
) GO TO 1301
      QIN(118,I)=0.001746/(EIN(118)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(118)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(118)+E(3))
# 
 1301 if(EN <= EIN(119)) GO TO 1302
      QIN(119,I)=0.003329/(EIN(119)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(119)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(119)+E(3))
# 
 1302 if(EN <= EIN(120)) GO TO 1303
      QIN(120,I)=0.006264/(EIN(120)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(120)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(120)+E(3))
# 
 1303 if(EN <= EIN(121)) GO TO 1304
      QIN(121,I)=0.013513/(EIN(121)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(121)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(121)+E(3))
# 
 1304 if(EN <= EIN(122)) GO TO 1885
      QIN(122,I)=0.011373/(EIN(122)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(122)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(122)+E(3))
# 
# TRIPLET SUM ABOVE IP
# 
 1885 if(EN <= EIN(123)) GO TO 1305
      if(EN > XEXC9(NEXC9):
) GO TO 1888                              
      DO 1886 J=2,NEXC9                                                
      if(EN <= XEXC9[J]:
) GO TO 1887                                     
 1886 CONTINUE                                                          
      J=NEXC9                                                           
 1887 A=(YEXC9[J]-YEXC9(J-1))/(XEXC9[J]-XEXC9(J-1))                     
      B=(XEXC9(J-1)*YEXC9[J]-XEXC9[J]*YEXC9(J-1))/(XEXC9(J-1)-XEXC9[J]) 
      QIN(123,I)=(A*EN+B)*1.D-16                     
      GO TO 1305
# SCALE BY 1/E**1.5 ABOVE XEXC9(NEXC9)
 1888 QIN(123,I)=YEXC9(NEXC9)*(XEXC9(NEXC9)/EN)**1.5*1.D-16        
#  
 1305 if(EN <= EIN(124)) GO TO 1306
      QIN(124,I)=0.006052/(EIN(124)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(124)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(124)+E(3))
# 
 1306 if(EN <= EIN(125)) GO TO 1307
      QIN(125,I)=0.006051/(EIN(125)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(125)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(125)+E(3))
# 
 1307 if(EN <= EIN(126)) GO TO 1308
      QIN(126,I)=0.004993/(EIN(126)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(126)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(126)+E(3))
# 
 1308 if(EN <= EIN(127)) GO TO 1309
      QIN(127,I)=0.005045/(EIN(127)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(127)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(127)+E(3))
# 
 1309 if(EN <= EIN(128)) GO TO 1310
      QIN(128,I)=0.004962/(EIN(128)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(128)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(128)+E(3))
# 
 1310 if(EN <= EIN(129)) GO TO 1311
      QIN(129,I)=0.006520/(EIN(129)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(129)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(129)+E(3))
# 
 1311 if(EN <= EIN(130)) GO TO 1312
      QIN(130,I)=0.008432/(EIN(130)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(130)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(130)+E(3))
# 
 1312 if(EN <= EIN(131)) GO TO 1313
      QIN(131,I)=0.011304/(EIN(131)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(131)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(131)+E(3))
# 
 1313 if(EN <= EIN(132)) GO TO 1314
      QIN(132,I)=0.015172/(EIN(132)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(132)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(132)+E(3))
# 
 1314 if(EN <= EIN(133)) GO TO 1315
      QIN(133,I)=0.022139/(EIN(133)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(133)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(133)+E(3))
# 
 1315 if(EN <= EIN(134)) GO TO 1316
      QIN(134,I)=0.032682/(EIN(134)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(134)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(134)+E(3))
# 
 1316 if(EN <= EIN(135)) GO TO 1317
      QIN(135,I)=0.039457/(EIN(135)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(135)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(135)+E(3))
# 
 1317 if(EN <= EIN(136)) GO TO 1318
      QIN(136,I)=0.029498/(EIN(136)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(136)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(136)+E(3))
# 
 1318 if(EN <= EIN(137)) GO TO 1319
      QIN(137,I)=0.018923/(EIN(137)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(137)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(137)+E(3))
# 
 1319 if(EN <= EIN(138)) GO TO 1320
      QIN(138,I)=0.017762/(EIN(138)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(138)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(138)+E(3))
# 
 1320 if(EN <= EIN(139)) GO TO 1321
      QIN(139,I)=0.015115/(EIN(139)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(139)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(139)+E(3))
# 
 1321 if(EN <= EIN(140)) GO TO 1322
      QIN(140,I)=0.013220/(EIN(140)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(140)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(140)+E(3))
# 
 1322 if(EN <= EIN(141)) GO TO 1323
      QIN(141,I)=0.009540/(EIN(141)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(141)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(141)+E(3))
# 
 1323 if(EN <= EIN(142)) GO TO 1324
      QIN(142,I)=0.005854/(EIN(142)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(142)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(142)+E(3))
# 
 1324 if(EN <= EIN(143)) GO TO 1325
      QIN(143,I)=0.008733/(EIN(143)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(143)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(143)+E(3))
# 
 1325 if(EN <= EIN(144)) GO TO 1326
      QIN(144,I)=0.007914/(EIN(144)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(144)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(144)+E(3))
# 
 1326 if(EN <= EIN(145)) GO TO 1327
      QIN(145,I)=0.008002/(EIN(145)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(145)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(145)+E(3))
# 
 1327 if(EN <= EIN(146)) GO TO 1328
      QIN(146,I)=0.006519/(EIN(146)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(146)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(146)+E(3))
# 
 1328 if(EN <= EIN(147)) GO TO 1329
      QIN(147,I)=0.003528/(EIN(147)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(147)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(147)+E(3))
# 
 1329 if(EN <= EIN(148)) GO TO 1330
      QIN(148,I)=0.001469/(EIN(148)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(148)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(148)+E(3))
#
 1330 DO  1340 JK=118,148
      if(QIN(JK,I):
 <= 0.0) QIN(JK,I)=0.0
      if(EN <= (2.0*EIN(JK):
)) GO TO 1340
      PEQIN(JK,I)=PEQEL(2,(I-IOFFN(JK)))
 1340 CONTINUE
# LOAD BREMSSTRAHLUNG X-SECTION
      QIN(149,I)=0.0
      if(EN <= 1000.):
 GO TO 1350
      DO 1341 J=2,NBREM
      if(EN <= EBRM[J]:
) GO TO 1342
 1341 CONTINUE
      J=NBREM
 1342 A=(math.log(Z8T[J])-math.log(Z8T(J-1)))/(EBRM[J]-EBRM(J-1))
      B=(math.log(Z8T[J])*EBRM(J-1)-math.log(Z8T(J-1))*EBRM[J])/(EBRM(J-1)-EBRM[J])
      QIN(149,I)=math.exp(A*EN+B)*2.D-24
 1350 CONTINUE
# SCHUMANN RUNGE SUM
      SUMSR=0.0
      DO 1400 JK=77,103 
 1400 SUMSR=SUMSR+QIN(JK,I)
# DISS SUM ABOVE IONISATION ENERGY
      SUMDISI=0.0
      DO 1501 JK=118,148
 1501 SUMDISI=SUMDISI+QIN(JK,I)
# SUM DISS LOW
      SUMDISL=0.0
      DO 1502 JK=107,117 
 1502 SUMDISL=SUMDISL+QIN(JK,I)
# SUM ROT
      SUMROT=0.0
      DO 1508 JK=1,48
 1508 SUMROT=SUMROT+QIN(JK,I)
#     WRITE(6,8747) SUMROT,I,EN
#8747 print(' SUMROT=',D12.4,' I=',I5,' EN=',D12.4)
# SUMVIB
      SUMVIB=0.0
      DO 1506 JK=49,54 
 1506 SUMVIB=SUMVIB+QIN(JK,I)
      SUMVIB=SUMVIB+QIN(55,I)+QIN(56,I)+QIN(57,I)
      DO 1507 JK=60,72 
 1507 SUMVIB=SUMVIB+QIN(JK,I)
# SUM HERZBERG
      SUMHERZ=QIN(73,I)+QIN(74,I)+QIN(75,I)  
# SUM E3SIGMA
      SUME3=QIN(104,I)+QIN(105,I)+QIN(106,I)
# SUM ION
      SUMION=0.0
      DO 1503 JK=1,NION
 1503 SUMION=SUMION+QION(JK,I)
# SUM OF EXCITATIONS (NO ROTATIONS)
      SUMEXC=0.0
      DO 1504 JK=49,NIN   
 1504 SUMEXC=SUMEXC+QIN(JK,I)   
      SUMEXC=SUMEXC+Q(4,I)
      Q(1,I)=Q(2,I)+SUMION+SUMEXC
#     WRITE(6,889) EN,Q(2,I),SUMEXC,SUMION,Q(1,I),Q(4,I),I 
# 889 print(' EN=',D12.4,' ELAS=',D12.4,' EXC=',D12.4,' ION=',D12.4,
#    /' TOT=',D12.4,' Q4    =',D12.4,' I=',I5)
#     SUMINEL=SUMION+SUMEXC
#     WRITE(6,890) EN,SUMION,SUMEXC,SUMINEL
# 890 print(' EN=',D12.4,' SUMION=',D12.4,' SUMEXC=',D12.4,' SUMINEL=',
#    /D12.4)
 9900 CONTINUE                                                          
#  SAVE COMPUTE TIME 
      DO 2000 K=1,148
      J=149-K
      if(EFINAL <= EIN[J]:
) NIN=J-1
 2000 CONTINUE
      if(NIN < 52):
 NIN=52
      if(EFINAL > 1000.):
 NIN=149                                     
#                                                                       
      RETURN      
      # end 
      def GAS16(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY  ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)     
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000)
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6)         
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250],PJ(220) 
      DIMENSION XELA[216],YELA[216],YMOM(216),YEPS(216),XROT(70),YROT(70),XVB1(87),YVB1(87),XVB2(69),YVB2(69),XVB3(70),YVB3(70),XVB4(50),YVB4(50),XVB5(40),YVB5(40),XVB6(41),YVB6(41),XVB7(42),YVB7(42),XVB8(40),YVB8(40),XVB9(35),YVB9(35),XVB10(35),YVB10(35),XVB11(35),YVB11(35),XVB12(33),YVB12(33),XVB13(31),YVB13(31),XVB14(28),YVB14(28),XVB15(32),YVB15(32),XTRP1(23),YTRP1(23),YTP1M(23),XTRP2(23),YTRP2(23),YTP2M(23),XTRP3(21),YTRP3(21),YTP3M(21),XTRP4(22),YTRP4(22),YTP4M(22),XTRP5(23),YTRP5(23),YTP5M(23),XTRP6(21),YTRP6(21),YTP6M(21),XTRP7(21),YTRP7(21),YTP7M(21),XTRP8(21),YTRP8(21),YTP8M(21),XTRP9(20),YTRP9(20),YTP9M(20),XTRP10(20),YTRP10(20),YTP10M(20),XTRP11(19),YTRP11(19),YTP11M(19),XTRP12(22),YTRP12(22),YTP12M(22),XTRP13(10),YTRP13(10),YTP13M(10),XTRP14(10),YTRP14(10),YTP14M(10),XSNG1(19),YSNG1(19),YSG1M(19),XSNG2(17),YSNG2(17),YSG2M(17),XSNG3(17),YSNG3(17),YSG3M(17),XSNG4(19),YSNG4(19),YSG4M(19),XSNG5(17),YSNG5(17),YSG5M(17),XSNG6(16),YSNG6(16),YSG6M(16),XSNG7(12),YSNG7(12),YSG7M(12),XSNG8(8),YSNG8(8),YSG8M(8),XSNG9(16),YSNG9(16),YSG9M(16),XSNG10(8),YSNG10(8),YSG10M(8),XSNG11(8),YSNG11(8),YSG11M(8),XSNG12(8),YSNG12(8),YSG12M(8),XSNG13(8),YSNG13(8),YSG13M(8),XSNG14(8),YSNG14(8),YSG14M(8),XSNG15(8),YSNG15(8),YSG15M(8),XKSH(89),YKSH(89),XION(87),YION(87),XION1(87),YION1(87),XION2(63),YION2(63),XION3(48),YION3(48),XION4(54),YION4(54),IOFFN(127),IOFFION(12)
      DIMENSION Z7T(25),EBRM(25)
      CHARACTER*50 SCRPT(300),SCRPTN(10)       
      CHARACTER*25 NAME                                                 
      DATA XELA/0.00,.001,.0015,.0018,.002,.0025,.003,.004,.005,.006,.007,.008,.009,.010,.012,.015,.018,.020,.025,.030,0.04,0.05,0.06,0.07,0.08,0.09,0.10,0.12,0.15,0.18,    0.20,0.25,0.30,0.40,0.50,0.60,0.70,0.80,0.90,1.00,1.10,1.20,1.30,1.40,1.50,1.60,1.70,1.80,1.85,1.90,1.95,2.00,2.05,2.10,2.15,2.20,2.25,2.30,2.35,2.40,2.45,2.50,2.55,2.60,2.65,2.70,2.75,2.80,2.85,2.90,2.95,3.00,3.05,3.10,3.15,3.20,3.25,3.30,3.35,3.40,3.45,3.50,3.60,3.70,3.80,3.90,4.00,4.50,5.00,5.50,6.00,6.50,7.00,8.00,9.00,10.0,12.0,15.0,17.0,20.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,6000.,7000.,8000.,9000.,10000.,1.25D4,1.5D4,1.75D4,2.0D4,2.5'%.3f' %.0'%.3f' %.5D4,4.0D4,4.5D4,5.0D4,6.0D4,7.0D4,8.0D4,9.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5'%.3f' %.0'%.3f' %.5D5,4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,2.0D6,2.5'%.3f' %.0'%.3f' %.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5'%.3f' %.0'%.3f' %.5D7,4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,1.0D8,1.25D8,1.5D8,1.75D8,2.0D8,2.5'%.3f' %.0'%.3f' %.5D8,4.0D8,4.5D8,5.0D8,6.0D8,7.0D8,8.0D8,9.0D8,1.0D9/
# ELASTIC +ROTATION X-SECTION
      DATA YELA/1.12,1.377,1.446,1.484,1.510,1.570,1.640,1.738,1.830,1.928,2.020,2.082,2.151,2.210,2.362,2.570,2.780,2.900,3.170,3.430,3.850,4.170,4.480,4.750,5.000,5.250,5.450,5.850,6.300,6.800,      7.000,7.600,8.000,8.600,9.000,9.200,9.300,9.450,9.650,9.840, 10.00,10.24,10.48,10.67,11.05,11.71,12.90,14.90,16.10,17.60,17.40,17.10,16.30,17.10,20.30,24.10,21.70,18.80,17.90,22.20,24.90,21.70,18.00,16.80,20.90,22.45,20.30,17.00,16.80,18.70,18.70,16.50,15.30,15.70,16.00,15.40,14.60,14.50,14.70,14.30,13.50,13.80,13.60,13.30,13.15,13.00,12.90,11.90,11.60,11.40,11.20,11.10,11.10,10.90,10.80,11.20,11.40,11.80,11.80,11.30,10.70,9.660,8.740,8.090,7.530,7.130,6.380,5.840,5.330,4.940,4.650,4.100,3.600,3.300,2.990,2.620,2.320,2.100,1.930,1.780,1.660,1.470,1.300,1.200,1.110,1.030,0.870,0.765,0.670,0.600,0.496,0.420,0.364,0.321,0.288,0.261,0.219,0.189,0.167,0.149,0.135,0.109,.0919,.0795,.0702,.0570,.0483,.0420,.0372,.0336,.0306,.0262,.0231,.0207,.0189,.0174,.0148,.0130,.0118,.0108,.00953,.00868,.00808,.00764,.00730,.00703,.00664,.00637,.00617,.00602, .00591,.00572,.00560,.00552,.00546,.00539,.00535,.00532,.00530,.00529,.00528,.00527,.00525,.00525,.00525,.00524,.00524,.00524,.00524,.005236,26*.005234/
# ELASTIC+ROTATION MOMENTUM TRANSFER X-SECTION           
      DATA YMOM/1.12,1.377,1.446,1.484,1.510,1.570,1.640,1.738,1.830,1.928,2.020,2.082,2.151,2.210,2.362,2.570,2.780,2.900,3.170,3.430,      3.900,4.350,4.750,5.100,5.410,5.690,5.950,6.450,7.100,7.590,7.900,8.500,9.000,9.700,10.30,10.90,11.25,11.40,11.30,11.10,10.90,10.65,10.45,10.65,10.80,11.85,13.60,16.00,17.40,19.00,18.80,18.60,17.80,18.50,21.70,25.50,23.10,20.20,19.30,23.50,26.20,23.00,19.30,18.10,22.20,23.70,21.50,18.10,17.80,19.60,19.40,17.10,15.70,15.90,15.90,15.10,14.00,13.50,13.30,12.50,11.40,11.40,11.00,10.60,10.20,10.00,9.900,9.100,8.900,8.700,8.500,8.400,8.300,8.200,8.200,8.300,8.400,8.500,8.500,8.300,7.800,7.200,6.700,6.310,5.950,5.600,4.700,4.000,3.500,3.000,2.650,2.100,1.650,1.370,1.179,0.861,0.662,0.527,0.431,0.360,0.306,0.230,0.179,0.144,0.119,0.100,.0687,.0504,.0387,.0307,.0208,.0151,.0115,.00904,.00733,.00607,.00438,.00332,.00261,.00211,.00174,.00116,8.37D-4,6.33D-4,4.97D-4,3.32D-4,2.39D-4,1.81D-4,1.43D-4,1.15D-4,9.56D-5,6.91D-5,5.26D-5,4.16D-5,3.39D-5,2.82D-5,1.92D-5,1.41D-5,1.09D-5,8.71D-6,6.04D-6,4.50D-6,3.52D-6,2.86D-6,2.38D-6,2.02D-6,1.52D-6,1.20D-6,9.83D-7,8.21D-7,6.99D-7,5.00D-7,3.77D-7,2.97D-7,2.40D-7,1.68D-7,1.25D-7,9.72D-8,7.78D-8,6.38D-8,5.34D-8,3.91D-8,2.99D-8,2.37D-8,1.93D-8,1.60D-8,1.07D-8,7.73D-9,5.84D-9,4.58D-9,3.04D-9,2.17D-9,1.63D-9,1.27D-9,1.01D-9,8.31D-10,5.88D-10,4.37D-10,3.38D-10,2.69D-10,2.19D-10,1.41D-10,9.86D-11,7.27D-11,5.57D-11,3.57D-11,2.48D-11,1.83D-11,1.40D-11,1.11D-11,8.96D-12,6.22D-12,4.57D-12,3.50D-12,2.77D-12,2.24D-12/
# ELASTIC ANISOTROPY def EPSILON
# EPSILON=1.0-YEPS
      DATA YEPS/20*1.00,1.01974,1.06500,1.09085,1.11025,1.12263,1.12532,1.13709,1.15311,1.18909,1.17321,1.19143,1.17651,1.18619,1.19046,1.21464,1.27297,1.30840,1.30369,1.25314,1.19066,1.13451,1.06001,0.99571,0.99719,0.96607,1.01794,1.08128,1.11047,1.12077,1.11898,1.12034,1.13112,1.13750,1.12243,1.10323,1.08700,1.09660,1.11142,1.11699,1.08770,1.07822,1.08972,1.10807,1.11576,1.09314,1.08340,1.08852,1.09688,1.08914,1.07212,1.05611,1.05451,1.03920,1.01911,0.99063,0.97078,0.93840,0.89677,0.85772,0.81253,0.76918,0.74264,0.71789,0.70105,0.67098,0.66198,0.65948,0.65567,0.65920,0.65352,0.64764,0.64463,0.63220,0.63846,0.64810,0.62303,0.61725,0.59484,0.59484,0.61407,0.60653,0.62889,0.65829,0.67702,0.69139,0.68467,0.61702,0.54773,0.51113,0.44953,0.40500,0.34012,0.28400,0.24224,0.22315,0.16753,0.13474,0.11089,0.09315,0.08049,0.07031,0.05555,0.04637,0.03828,0.03277,0.02863,0.02168,0.01705,0.01436,0.01227,0.00951,0.00782,0.00665,0.00576,0.00508,0.00454,0.00377,0.00322,0.00279,0.00248,.002212,.001759,.001461,.001246,.001084,8.62D-4,7.12D-4,6.07D-4,5.31D-4,4.64D-4,4.18D-4,3.44D-4,2.91D-4,2.52D-4,2.21D-4,1.97D-4,1.53D-4,1.249D-4,1.042D-4,8.95D-5,6.83D-5,5.45D-5,4.49D-5,3.79D-5,3.25D-5,2.83D-5,2.20D-5,1.77D-5,1.47D-5,1.24D-5,1.062D-5,7.65D-6,5.73D-6,4.48D-6,3.60D-6,2.48D-6,1.81D-6,1.38D-6,1.09D-6,8.85D-7,7.32D-7,5.24D-7,3.94D-7,3.07D-7,2.46D-7,2.02D-7,1.32D-7,9.28D-8,6.89D-8,5.31D-8,3.44D-8,2.40D-8,1.77D-8,1.36D-8,1.07D-8,8.70D-9,6.03D-9,4.41D-9,3.36D-9,2.64D-9,2.13D-9,1.34D-9,9.19D-10,6.67D-10,5.04D-10,3.16D-10,2.16D-10,1.57D-10,1.18D-10,9.3D-11,7.4D-11,5.1D-11,3.7D-11,2.8D-11,2.2D-11,1.7D-11/
# ROTATIONAL RESONANCE def 
      DATA XROT/0.00,1.00,1.10,1.20,1.30,1.40,1.50,1.60,1.70,1.80,1.85,1.90,1.95,1.98,2.00,2.05,2.10,2.15,2.20,2.25,2.30,2.35,2.40,2.45,2.50,2.55,2.60,2.65,2.69,2.70,2.75,2.80,2.85,2.90,2.95,3.00,3.05,3.10,3.15,3.20,3.25,3.30,3.35,3.40,3.45,3.50,3.60,3.70,3.80,3.90,4.00,4.10,4.20,4.30,4.40,4.50,4.60,4.70,4.80,4.90,5.00,5.10,5.20,5.30,5.40,5.50,5.60,5.70,5.80,5.90/
      DATA YROT/0.00,0.00,0.00,0.10,0.20,0.30,0.40,1.10,2.30,4.30,5.50,7.00,6.80,7.10,6.50,5.70,6.50,9.70,13.5,11.1,8.20,7.30,11.6,14.3,11.1,7.40,6.20,10.2,12.0,11.8,9.60,6.30,6.10,8.00,8.00,5.80,4.60,5.00,5.30,4.70,3.90,3.80,4.00,3.50,2.70,3.00,2.80,2.50,2.40,2.20,2.10,1.90,1.70,1.50,1.20,1.00,0.80,0.70,0.60,0.50,0.40,0.30,0.20,0.10,0.00,0.00,0.00,0.00,0.00,0.00/
# ALLAN AND VICIC  FROM 1.6 EV TO 4.5 EV FOR VIBRATIONS           
      DATA XVB1/.2889,.289,.290,.292,.293,.295,.300,.310,.320,.330,.340,.360,.380,0.40,0.50,0.60,0.70,0.80,0.90,1.00,1.10,1.20,1.30,1.35,1.40,1.45,1.50,1.55,1.60,1.65,1.70,1.75,1.80,1.85,1.90,1.95,2.00,2.05,2.10,2.15,2.20,2.25,2.30,2.35,2.40,2.45,2.50,2.55,2.60,2.65,2.70,2.75,2.80,2.85,2.90,2.95,3.00,3.05,3.10,3.15,3.20,3.25,3.30,3.35,3.40,3.45,3.50,3.55,3.60,3.65,3.70,3.75,3.80,3.90,4.00,4.50,5.00,7.50,10.0,15.0,18.0,20.0,22.5,25.0,30.0,50.0,80.0/            
# V1                                            
      DATA YVB1/.00,.00018,.00045,.00072,.00082,.00099,.00131,.00174,.00203,.00225,.00242,.00267,.00283,.00294,.00340,.00360,.0039,.0044,.0054,.0066,.0086,.0125,.0182,.0230,.0295,.0370,.0475,.0580,.0750,.103,.178,.320,.600,1.20,2.40,4.35,4.40,2.71,1.67,2.40,3.62,4.90,4.46,3.31,2.26,1.74,2.90,4.15,4.25,2.95,1.61,1.97,2.95,3.43,2.30,1.41,1.63,2.30,2.01,1.54,1.12,1.27,1.37,1.27,0.96,0.84,.820,.768,.648,.600,.624,.528,.432,.390,.330,.230,.075,.025,.012,.031,.061,.156,.101,.066,.022,.012,.006/  
# V2              
      DATA XVB2/.5742,.600,.700,.800,.900,1.00,1.10,1.20,1.30,1.40,1.50,1.55,1.60,1.65,1.70,1.75,1.80,1.85,1.90,1.95,2.00,2.05,2.10,2.15,2.20,2.25,2.30,2.35,2.40,2.45,2.50,2.55,2.60,2.65,2.70,2.75,2.80,2.85,2.90,2.95,3.00,3.05,3.10,3.15,3.20,3.25,3.30,3.35,3.40,3.45,3.50,3.55,3.60,3.70,3.80,3.90,4.00,4.50,5.00,7.50,10.0,15.0,18.0,20.0,22.5,25.0,30.0,50.0,80.0/
      DATA YVB2/.0,1.D-5,4.D-5,9.D-5,1.5D-4,2.0D-4,2.8D-4,3.2D-4,5.D-4,8.1D-4,.0026,.0059,.0115,.026,.051,.123,.236,.491,0.94,2.26,2.90,2.55,2.20,1.45,.856,.682,1.33,2.40,3.05,2.78,1.70,.672,.800,1.48,1.61,1.25,.805,.501,.670,.890,.890,.650,.444,.428,.539,.491,.364,.225,.285,.238,.200,.168,.156,.127,.101,.085,.072,.042,.014,.004,.002,.006,.012,.030,.020,.012,.004,.002,.001/
# V3                        
      DATA XVB3/.8559,.900,1.00,1.10,1.20,1.30,1.40,1.50,1.60,1.65,1.70,1.75,1.80,1.85,1.90,1.95,2.00,2.05,2.10,2.15,2.16,2.20,2.25,2.30,2.35,2.40,2.45,2.50,2.55,2.60,2.65,2.70,2.75,2.80,2.85,2.90,2.95,3.00,3.05,3.10,3.15,3.20,3.25,3.30,3.35,3.40,3.45,3.50,3.55,3.60,3.65,3.70,3.75,3.80,3.85,3.90,3.95,4.00,4.50,5.00,7.50,10.0,15.0,18.0,20.0,22.5,25.0,30.0,50.0,80.0/
      DATA YVB3/.0,1.D-5,3.7D-5,7.D-5,9.8D-5,1.3D-4,1.8D-4,4.1D-4,.0021,.0050,.012,.028,.071,.160,.300,.807,1.30,1.87,2.11,2.55,2.57,2.35,1.52,.617,.438,.656,1.46,1.75,1.81,1.38,.630,.250,.409,.747,1.00,.682,.309,.144,.263,.412,.360,.212,.131,.148,.183,.200,.157,.114,.079,.101,.101,.079,.057,.053,.058,.053,.044,.035,.023,.008,.0023,.001,.003,.007,.017,.011,.006,.002,.001,.0005/
# V4
      DATA XVB4/1.1342,1.80,1.85,1.90,1.95,2.00,2.05,2.10,2.15,2.20,2.22,2.25,2.30,2.35,2.40,2.45,2.50,2.55,2.60,2.65,2.70,2.75,2.80,2.85,2.90,2.95,3.00,3.05,3.10,3.15,3.20,3.25,3.30,3.35,3.40,3.50,3.60,3.80,4.00,4.50,5.00,7.50,10.0,15.0,18.0,20.0,22.5,30.0,50.0,80.0/
      DATA YVB4/0.0,0.00,9.D-5,.064,.170,.269,.465,.743,1.29,1.76,1.79,1.72,1.41,1.04,.600,.234,.168,.439,.797,.994,.806,.474,.215,.104,.197,.385,.394,.260,.198,.063,.098,.151,.205,.089,.070,.078,.061,.044,.035,.026,.009,.0026,.00105,.0016,.003,.008,.005,.003,.001,.0005/
# V5               
      DATA XVB5/1.4088,1.90,1.95,2.00,2.05,2.10,2.15,2.20,2.25,2.30,2.35,2.40,2.45,2.50,2.55,2.60,2.65,2.70,2.75,2.80,     2.85,2.90,2.95,3.00,3.05,3.10,3.15,3.20,3.25,3.30,3.35,3.40,3.45,3.50,4.00,4.50,5.00,7.50,10.0,20.0/     
      DATA YVB5/0.00,0.00,.0009,.0118,.0531,.136,.313,.490,.655,.791,1.04,1.18,1.01,.631,.295,.101,.068,.195,.395,.502,.519,.313,.106,.024,.101,.195,.183,.112,.068,.018,.035,.065,.065,.024,.014,.0096,.0032,.00096,.00024,.00012/ 
# V6        
      DATA XVB6/1.6801,2.05,2.10,2.15,2.20,2.25,2.30,2.35,2.40,2.45,2.50,2.55,2.60,2.65,2.70,2.75,2.80,2.85,2.90,2.95,     3.00,3.05,3.10,3.15,3.20,3.25,3.30,3.35,3.40,3.45,3.50,3.55,3.60,3.65,3.70,4.00,4.50,5.00,7.50,10.0,20.0/                                     
      DATA YVB6/0.00,0.00,9.D-5,.0117,.0463,.124,.192,.344,.487,.602,.615,.602,.577,.527,.307,.124,.050,.103,.193,.270,.270,.180,.084,.0372,.0527,.103,.128,.096,.062,.0248,.0186,.0312,.0372,.0372,.0155,.010,.052,.017,.0052,.0021,   .00105/
# V7
      DATA XVB7/1.9475,2.25,2.30,2.35,2.40,2.45,2.50,2.55,2.60,2.65,2.68,2.70,2.75,2.80,2.85,2.90,2.95,3.00,3.05,3.10,3.15,3.20,3.25,3.30,3.35,3.40,3.45,3.50,3.55,3.60,3.65,3.70,3.75,3.80,3.85,3.90,4.00,4.50,5.00,7.50,10.0,20.0/
      DATA YVB7/0.00,0.00,.0009,.0255,.0526,.089,.133,.178,.232,.303,.318,.304,.231,.159,.119,.0542,.0239,.0255,.0796,.113,.108,.0812,.0413,.0112,.0064,.0207,.0334,.0366,.0224,.0128, .0128,.0157,.0183,.0166,.0096,.0074,.0057,.0039,.0013,.00039,.00015,.000075/
# V8
      DATA XVB8/2.2115,2.40,2.45,2.50,2.55,2.60,2.65,2.70,2.75,2.80,2.85,2.88,2.90,2.95,3.00,3.05,3.10,3.15,3.20,3.25,3.30,3.35,3.40,3.45,3.50,3.55,3.60,3.65,3.70,3.75,3.80,3.85,3.90,3.95,4.00,4.50,5.00,7.50,10.0,20.0/
      DATA YVB8/0.00,0.00,9.D-6,.003,.011,.017,.042,.0656,.0739,.098,.135,.140,.128,.084,.035,.014,.003,.007,.028,.0460,.0460,.028,.011,.003,.0018,.011,.0123,.0140,.0084,.0035,.0018,.0018,.0026,.0029,.0014,.0010,.0003,.00010,.00004,.00002/
# V9
      DATA XVB9/2.4718,2.65,2.70,2.75,2.80,2.85,2.90,2.95,3.00,3.05,3.07,3.10,3.15,3.20,3.25,3.30,3.35,3.40,3.45,3.50,3.55,3.60,3.65,3.70,3.75,3.80,3.85,3.90,3.95,4.00,4.50,5.00,7.50,10.0,20.0/
      DATA YVB9/0.00,.0011,.0028,.0069,.0132,.0264,.0412,.0474,.0438,.0496,.0528,.0438,.0247,.0739,.00295,.00581,.0159,.0232,.0264,.0206,.0116,.00296,.00296,.00581,.00739,.00739,.00528,.00295,.00147,.00070,.00039,.00013,.000039,.0000157,.0000079/
# V10
      DATA XVB10/2.7284,2.90,2.95,3.00,3.05,3.10,3.15,3.20,3.25,3.30,3.35,3.40,3.45,3.50,3.55,3.60,3.65,3.70,3.75,3.80,3.85,3.90,3.95,4.00,4.05,4.10,4.15,4.20,4.25,4.30,4.50,5.00,7.50,10.0,20.0/
      DATA YVB10/0.00,.000040,.00170,.00554,.0103,.0154,.0205,.0201,.0147,.0103,.00677,.00225,.00137,.00452,.00800,.0116,.0119,.00800,.00390,.00137,.00205,.00390,.00573,.00573,.00452,.00349,.00225,.00116,.00042,.00026,.00017,5.8D-5,1.7D-5,8.5D-6,4.2D-6/
# V11
      DATA XVB11/2.9815,3.10,3.15,3.20,3.25,3.30,3.35,3.40,3.45,3.50,3.55,3.60,3.65,3.70,3.75,3.80,3.85,3.90,3.95,4.00,4.05,4.10,4.15,4.20,4.25,4.30,4.35,4.40,4.45,4.50,4.60,5.00,7.50,10.0,20.0/
      DATA YVB11/0.00,3.29D-4,.00170,.00291,.00445,.00550,.00462,.00291,.00170,6.04D-4,2.20D-4,.00105,.00275,.00344,.00303,.00198,7.70D-4,1.65D-4,2.75D-4,4.40D-4,.00116,.00110,3.85D-4,5.50D-5,5.50D-5,3.30D-4,3.85D-4,3.30D-4,1.65D-4,8.70D-5,2.88D-5,9.60D-6,2.88D-6,1.16D-6,5.8D-7/
# V12
      DATA XVB12/3.2310,3.30,3.35,3.40,3.45,3.50,3.55,3.60,3.65,3.70,3.75,3.80,3.85,3.90,3.95,4.00,4.05,4.10,4.15,4.20,4.25,4.30,4.35,4.40,4.45,4.50,4.55,4.60,4.65,5.00,7.50,10.0,20.0/
      DATA YVB12/0.00,3.66D-5,3.78D-4,6.22D-4,.00107,.00119,.00092,4.40D-4,1.59D-4,1.10D-4,4.52D-4,8.06D-4,.00122,.00107,6.96D-4,3.17D-4,7.32D-5,8.55D-5,3.05D-4,3.78D-4,3.05D-4,1.53D-4,7.33D-5,1.22D-5,7.33D-5,1.46D-4,8.55D-5,1.22D-5,6.10D-6,2.04D-6,6.10D-7,2.44D-7,1.22D-7/
# V13
      DATA XVB13/3.4769,3.55,3.60,3.65,3.70,3.75,3.80,3.85,3.90,3.95,4.00,4.05,4.10,4.15,4.20,4.25,4.30,4.35,4.40,4.45,4.50,4.55,4.60,4.65,4.70,4.75,4.80,5.00,7.50,10.0,20.0/
      DATA YVB13/0.00,4.90D-5,1.02D-4,1.96D-4,2.16D-4,1.18D-4,3.92D-5,3.92D-5,1.46D-4,2.94D-4,3.68D-4,3.92D-4,2.72D-4,1.22D-4,2.75D-5,6.28D-5,9.77D-5,1.49D-4,1.18D-4,6.28D-5,1.57D-5,1.57D-5,2.35D-5,4.71D-5,3.14D-5,1.96D-5,3.93D-6,1.31D-6,3.93D-7,1.57D-7,7.8D-8/
# V14
      DATA XVB14/3.7191,3.80,3.85,3.90,3.95,4.00,4.05,4.10,4.15,4.20,4.25,4.30,4.35,4.40,4.45,4.50,4.55,4.60,4.65,4.70,4.75,4.80,4.85,4.90,4.95,7.50,10.0,20.0/
      DATA YVB14/0.00,9.07D-6,1.70D-5,1.70D-5,6.80D-6,7.94D-6,3.51D-5,7.83D-5,1.14D-4,1.09D-4,7.14D-5,3.51D-5,6.80D-6,9.07D-6,4.31D-5,5.44D-5,3.51D-5,1.70D-5,4.54D-6,6.80D-6,1.02D-5,1.70D-5,9.07D-6,5.67D-6,1.75D-6,1.75D-7,6.98D-8,3.5D-8/
# V15
      DATA XVB15/3.9576,4.05,4.10,4.15,4.20,4.25,4.30,4.35,4.40,4.45,4.50,4.55,4.60,4.65,4.70,4.75,4.80,4.85,4.90,4.95,5.00,5.05,5.10,5.15,5.20,5.25,5.30,5.40,5.50,7.50,10.0,20.0/
      DATA YVB15/0.00,9.42D-7,1.25D-6,2.51D-6,5.34D-6,1.94D-5,2.89D-5,3.14D-5,2.16D-5,1.10D-5,4.40D-6,5.96D-6,1.20D-5,1.98D-5,1.64D-5,9.07D-6,3.77D-6,3.77D-6,7.22D-6,7.22D-6,6.28D-6,3.77D-6,3.46D-6,4.39D-6,4.71D-6,4.71D-6,3.77D-6,2.18D-6,1.09D-6,1.09D-7,4.36D-8,2.2D-8/
# A3SIG(V=0-4) (V=0 ENERGY=6.169 EV)  AVERAGE ENERGY LOSS =6.725 EV
      DATA XTRP1/6.725,7.00,7.80,8.50,9.00,10.0,11.0,12.0,13.0,14.0,   16.0,17.0,18.0,20.0,22.0,24.0,26.0,30.0,34.0,40.0,                50.0,70.0,100./             
      DATA YTRP1/0.00,.0035,.0100,.0440,.0280,.0240,.022,.021,.020,.019,.016,.015,.014,.013,.0108,.0099,.0087,.0069,.0057,.0046,          .0033,.0019,.00094/
      DATA YTP1M/0.92,0.92,0.92,0.92,0.92,0.92,0.93,0.94,0.94,0.95,0.97,1.01,1.07,1.12,1.14,1.16,1.18,1.22,1.21,1.20,1.18,1.00,0.92/ 
# A3SIG(V=5-9) (V=5 ENERGY=7.023 EV) AVERAGE ENERGY LOSS =7.360 EV
      DATA XTRP2/7.360,7.50,7.80,8.50,9.00,10.0,11.0,12.0,13.0,14.0,16.0,17.0,18.0,20.0,22.0,24.0,26.0,30.0,34.0,40.0,50.0,70.0,100./
      DATA YTRP2/0.00,.0071,.0180,.072,.108,.096,.094,.092,.085,.081,.069,.064,.059,.054,.049,.043,.038,.029,.024,.020,.0136,.0076,.0040/   
      DATA YTP2M/0.92,0.92,0.92,0.92,0.92,0.92,0.93,0.94,0.94,0.95,0.97,1.01,1.07,1.12,1.14,1.16,1.18,1.22,1.21,1.20,1.18,1.00,0.92/ 
# B3PI(V=0-3) (V=0 ENERGY=7.353 EV) AVERAGE ENERGY LOSS =7.744 EV       
      DATA XTRP3/7.744,8.00,9.00,10.0,11.0,12.0,13.0,14.0,15.0,16.0,  17.0,18.0,20.0,22.0,26.0,30.0,34.0,40.0,50.0,70.0,                100./                  
      DATA YTRP3/.0,.018,.132,.194,.188,.173,.161,.150,.138,.128,.116,.108,.089,.077,.063,.053,.047,.035,.026,.0113,      .0039/
      DATA YTP3M/1.06,1.06,1.06,1.06,1.12,1.18,1.18,1.16,1.14,1.12,1.10,1.08,1.06,1.08,1.12,1.16,1.16,1.17,1.18,1.06,0.94/
# W3DEL(V=0-5) (V=0 ENERGY=7.362 EV) AVERAGE ENERGY LOSS = 8.050 EV    
      DATA XTRP4/8.050,8.50,9.00,10.0,11.0,12.0,14.0,15.0,16.0,17.0,18.0,20.0,22.0,24.0,26.0,28.0,30.0,34.0,40.0,50.0,70.0,100./
      DATA YTRP4/.0,.0010,.007,.016,.023,.030,.044,.050,.053,.053,.052,.047,.039,.032,.027,.023,.020,.015,.0112,.0073,.00366,.00183/
      DATA YTP4M/1.20,1.20,1.20,1.20,1.14,1.08,1.08,1.13,1.16,1.19,1.21,1.22,1.23,1.24,1.25,1.26,1.27,1.26,1.23,1.19,1.11,0.98/
# A3SIG(V=10-21) (V=10 ENERGY=7.790 EV) AVERAGE ENERGY LOSS=8.217 EV    
      DATA XTRP5/8.217,8.30,8.50,8.70,9.00,10.0,11.0,12.0,13.0,14.0,    16.0,17.0,18.0,20.0,22.0,24.0,26.0,30.0,34.0,40.0,                50.0,70.0,100./           
      DATA YTRP5/0.0,.0069,.0365,.0450,.055,.096,.100,.097,.091,.086,.073,.066,.060,.055,.050,.044,.038,.031,.024,.020,                .0145,.0080,.0043/
      DATA YTP5M/0.92,0.92,0.92,0.92,0.92,0.92,0.93,0.94,0.94,0.95,0.97,1.01,1.07,1.12,1.14,1.16,1.18,1.22,1.21,1.20,1.18,1.00,0.92/ 
# B3PI(V=4-16) (V=4 ENERGY=8.177 EV) AVERAGE ENERGY LOSS= 8.451 EV
      DATA XTRP6/8.451,8.50,9.00,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0,20.0,22.0,26.0,30.0,34.0,40.0,50.0,70.0,100./
      DATA YTRP6/.0,.011,.090,.133,.129,.119,.110,.102,.094,.088,.079,.074,.061,.053,.044,.037,.032,.023,.017,.0077, .0028/
      DATA YTP6M/1.06,1.06,1.06,1.06,1.12,1.18,1.18,1.16,1.14,1.12,1.10,1.08,1.06,1.08,1.12,1.16,1.16,1.17,1.18,1.06,0.94/
# W3DEL(V=6-10) (V=6 ENERGY=8.419 EV) AVERAGE ENERGY LOSS= 8.729 EV
      DATA XTRP7/8.729,9.00,10.0,11.0,12.0,14.0,15.0,16.0,17.0,18.0,20.0,22.0,24.0,26.0,28.0,30.0,34.0,40.0,50.0,70.0,100./
      DATA YTRP7/.0,0.004,.032,.048,.064,.092,.105,.110,.110,.108,.097,.082,.066,.056,.048,.041,.032,.023,.0153,.0076,.0038/
      DATA YTP7M/1.20,1.20,1.20,1.14,1.08,1.08,1.13,1.16,1.19,1.21,1.22,1.23,1.24,1.25,1.26,1.27,1.26,1.23,1.19,1.11,0.98/
# A1PI(V=0-3) (V=0 ENERGY=8.549 EV) AVERAGE ENERGY LOSS= 8.950 EV
      DATA XSNG1/8.950,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0,19.0,20.0,24.0,27.0,30.0,40.0,50.0,70.0,100./        
      DATA YSNG1/.0,.013,.025,.040,.059,.082,.101,.116,.123,.128,.130,.130,.125,.119,.112,.087,.071,.051,.036/  
      DATA YSG1M/0.80,0.80,0.75,0.70,0.66,0.60,0.55,0.53,0.51,0.50,0.49,0.48,0.50,0.52,0.54,0.48,0.41,0.34,0.24/
# B'3SIG(V=0-6) (V=0 ENERGY=8.165 EV) AVERAGE ENERGY LOSS= 8.974 EV
      DATA XTRP8/8.974,9.50,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0,19.0,20.0,22.0,26.0,30.0,34.0,40.0,50.0,70.0,100./
      DATA YTRP8/.0,.0002,.0010,.0032,.0081,.0136,.0203,.0252,.0274,.0274,.0264,.0250,.0236,.0209,.0151,.0114,.0089,.0064,.0041,.0020,.0010/
      DATA YTP8M/0.90,0.90,0.90,0.90,0.90,0.91,0.93,0.97,1.07,1.17,1.22,1.22,1.23,1.26,1.32,1.37,1.35,1.32,1.29,1.20,1.04/
# A'1SIG (V=0-6) (V=0 ENERGY=8.398 EV) AVERAGE ENERGY LOSS= 9.191 EV
      DATA XSNG2/9.191,10.2,12.0,13.0,14.0,15.0,16.0,17.0,18.0,19.0,20.0,24.0,30.0,40.0,50.0,70.0,100./
      DATA YSNG2/.0,.0013,.0071,.0106,.0139,.0146,.0145,.0143,.0139,.0135,.0132,.0105,.0072,.0045,.0031,.0017,.0010/
      DATA YSG2M/1.00,1.00,1.00,1.00,1.00,1.00,1.07,1.13,1.14,1.15,1.16,1.21,1.27,1.17,1.07,0.93,0.72/
# W3DEL(V=11-19) (V=11 ENERGY=9.220 EV) AVERAGE ENERGY LOSS= 9.562 EV
      DATA XTRP9/9.562,10.0,11.0,12.0,14.0,15.0,16.0,17.0,18.0,20.0,22.0,24.0,26.0,28.0,30.0,34.0,40.0,50.0,70.0,100./
      DATA YTRP9/.0,.012,.029,.038,.056,.063,.067,.067,.065,.058,.049,.040,.034,.029,.024,.019,.0141,.0092,.00461,.00230/
      DATA YTP9M/1.20,1.20,1.14,1.08,1.08,1.13,1.16,1.19,1.21,1.22,1.23,1.24,1.25,1.26,1.27,1.26,1.23,1.19,1.11,0.98/
# W1DEL(V=0-5) (V=0 ENERGY=8.895 EV) AVERAGE ENERGY LOSS= 9.590 EV 
      DATA XSNG3/9.590,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0,20.0,24.0,30.0,40.0,50.0,70.0,100./
      DATA YSNG3/.0,.0002,.003,.009,.0109,.0144,.0141,.0138,.0134,.013, .012,.0094,.0074,.0054,.0043,.0030,.0020/
      DATA YSG3M/1.08,1.08,1.08,1.08,1.05,1.00,0.08,0.97,0.96,0.95,0.92,0.90,0.86,0.76,0.66,0.55,0.36/
# A1PI(V=4-15) (V=4 ENERGY=9.355 EV) AVERAGE ENERGY LOSS= 9.665 EV
      DATA XSNG4/9.665,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0,19.0,20.0,24.0,27.0,30.0,40.0,50.0,70.0,100./        
      DATA YSNG4/.0,.009,.023,.039,.057,.077,.097,.109,.117,.121,.123,.124,.119,.112,.106,.083,.067,.048,.034/  
      DATA YSG4M/0.80,0.80,0.75,0.70,0.66,0.60,0.55,0.53,0.51,0.50,0.49,0.48,0.50,0.52,0.54,0.48,0.41,0.34,0.24/
# B'3SIG(V=7-18) (V=7 ENERGY=9.399 EV) AVERAGE ENERGY LOSS= 9.933 EV
      DATA XTRP10/9.933,10.2,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0,19.0,20.0,22.0,26.0,30.0,34.0,40.0,50.0,70.0,100./
      DATA YTRP10/.0,.0010,.0068,.0169,.0284,.0427,.0528,.0575,.0575,.0552,.0524,.0495,.0438,.0316,.0236,.0187,.0133,.0086,.0041,.0020/
      DATA YTP10M/0.90,0.90,0.90,0.90,0.90,0.91,0.93,0.97,1.07,1.17,1.22,1.22,1.23,1.26,1.32,1.37,1.35,1.32,1.29,1.20/       
# A'1SIG (V=7-19) (V=7 ENERGY=9.645 EV) AVERAGE ENERGY LOSS= 10.174 EV
      DATA XSNG5/10.174,10.5,12.0,13.0,14.0,15.0,16.0,17.0,18.0,19.0,20.0,24.0,30.0,40.0,50.0,70.0,100./
      DATA YSNG5/.0,.0013,.0129,.0194,.0252,.0267,.0265,.0260,.0253,.0247,.0240,.0192,.0133,.0081,.0055,.0032,.0017/
      DATA YSG5M/1.00,1.00,1.00,1.00,1.00,1.00,1.07,1.13,1.14,1.15,1.16,1.21,1.27,1.17,1.07,0.93,0.72/
# W1DEL(V=6-18) (V=6 ENERGY=9.994 EV) AVERAGE ENERGY LOSS= 10.536 EV
      DATA XSNG6/10.536,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0,20.0,24.0,30.0,40.0,50.0,70.0,100./
      DATA YSNG6/.0,.003,.009,.0242,.032,.032,.031,.030,.029,.026,.021,.0164,.0121,.0096,.0066,.0046/
      DATA YSG6M/1.08,1.08,1.08,1.05,1.00,0.08,0.97,0.96,0.95,0.92,0.90,0.86,0.76,0.66,0.55,0.36/
# C3PI(V=0-4) (V=0 ENERGY=11.032 EV) AVERAGE ENERGY LOSS= 11.188 EV   
      DATA XTRP11/11.188,12.0,12.5,13.0,13.5,14.0,14.5,15.0,16.0,17.0,18.0,19.0,20.0,24.0,30.0,40.0,50.0,70.0,100./           
      DATA YTRP11/.0,.057,.089,.130,.180,.225,.235,.225,.205,.190,.170,.155,.140,.105,.074,.044,.031,.015,.0057/ 
      DATA YTP11M/1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.02,1.01,1.00,0.99,0.99,1.06,1.14,1.11,1.09,0.93,0.70/    
# E3SIG  V=0         
      DATA XTRP12/11.875,11.9,11.95,12.0,12.5,13.0,14.0,15.0,16.0,17.0,18.0,19.0,20.0,21.0,25.0,30.0,35.0,40.0,45.0,50.0,70.0,100./   
      DATA YTRP12/.0,.157,.127,.101,.031,.021,.009,.003,.002,.004,.008,.011,.013,.013,.010,.008,.005,.0037,.0027,.002,.0010,.0004/ 
      DATA YTP12M/22*1.0/  
# A''1SIG(V=0-1) (V=0 ENERGY=12.255 EV)  AVERAGE ENERGY LOSS= 12.289 EV
      DATA XSNG7/12.289,13.0,14.0,15.0,17.5,20.0,24.0,30.0,40.0,50.0,70.0,100./
      DATA YSNG7/.0,.002,.005,.011,.022,.034,.037,.036,.031,.028,.020,.0125/
      DATA YSG7M/0.86,0.86,0.86,0.86,0.86,0.91,0.94,0.99,0.94,0.89,0.73,0.50/
# B1PI (V=0-6) (V=0 ENERGY=12.500 EV) AVERAGE ENERGY LOSS= 12.781 EV
#  USE BEF SCALING ABOVE 100EV                   F=0.1855
      DATA XSNG8/12.781,17.5,20.0,30.0,40.0,50.0,70.0,100./ 
      DATA YSNG8/0.0,.0640,.0855,.145,.160,.163,.160,.152/
      DATA YSG8M/0.76,0.76,0.67,0.46,0.34,0.22,0.13,0.05/
# C'1SIG (V=0-3) (V=0 ENERGY=12.934 EV) AVERAGE ENERGY LOSS= 13.000 EV
#  USE BEF SCALING ABOVE 500EV                  F=0.15
      DATA XSNG9/13.000,17.5,20.0,30.0,40.0,50.0,70.0,100.,150.,200.,250.,300.,350.,400.,450.,500./ 
      DATA YSNG9/0.0,.0300,.0440,.067,.086,.093,.102,.100,.091,.083,.075,.069,.063,.059,.054,.052/
      DATA YSG9M/0.72,0.72,0.47,0.41,0.32,0.23,0.13,0.05,0.04,0.03,.028,.025,.022,.020,.018,.016/ 
# G3 PI (V=0-3) (V=0 ENERGY=12.810 EV) AVERAGE ENERGY LOSS=13.001 EV         
      DATA XTRP13/13.001,17.5,20.0,23.0,26.0,30.0,40.0,50.0,70.0,100./
      DATA YTRP13/.0,.0133,.0178,.0204,.0207,.0199,.0174,.0152,.0115,.0065/ 
      DATA YTP13M/0.74,0.74,0.73,0.72,0.71,0.69,0.61,0.53,0.47,0.40/   
# C3 1PI ( V=0-3) V=0 ENERGY=12.912 AVERAGE ENERGY LOSS= 13.076 EV
#  USE BEF SCALING ABOVE 100EV        F=0.15
      DATA XSNG10/13.076,17.5,20.0,30.0,40.0,50.0,70.0,100./ 
      DATA YSNG10/0.0,.0470,.060,.100,.118,.124,.124,.118/
      DATA YSG10M/0.69,0.69,0.55,0.40,0.28,0.16,0.11,0.05/
# F3 PI (V=0-3) (V=0 ENERGY=12.985 EV) AVERAGE ENERGY LOSS=13.174 EV  
      DATA XTRP14/13.174,17.5,20.0,23.0,26.0,30.0,40.0,50.0,70.0,100./
      DATA YTRP14/.0,.0062,.0091,.0129,.0140,.0136,.0119,.0102,.0074,.0040/   
      DATA YTP14M/0.74,0.74,0.76,0.71,0.65,0.63,0.53,0.43,0.40,0.34/  
# B1PI (V=7-14) (V=7 ENERGY=13.156 EV) AVERAGE ENERGY LOSS= 13.338 EV
# USE BEF SCALING ABOVE 100EV      F=0.0663
      DATA XSNG11/13.338,17.5,20.0,30.0,40.0,50.0,70.0,100./ 
      DATA YSNG11/0.0,.0120,.0288,.047,.052,.055,.054,.0503/
      DATA YSG11M/0.76,0.76,0.67,0.46,0.34,0.22,0.13,0.05/
# B# 1SIG (V=0-10) V=0 ENERGY=12.854 AVERAGE ENERGY LOSS= 13.385 EV
#  USE BEF SCALING ABOVE 100EV             F=0.0601
      DATA XSNG12/13.385,17.5,20.0,30.0,40.0,50.0,70.0,100./ 
      DATA YSNG12/0.0,.0156,.027,.037,.046,.048,.048,.046/
      DATA YSG12M/0.81,0.81,0.71,0.47,0.33,0.20,0.15,0.09/
# O3 1PI (V=0-5) (V=0 ENERGY=13.103 EV) AVERAGE ENERGY LOSS= 13.628 EV
# USE BEF SCALING ABOVE 100EV      F=0.0828
      DATA XSNG13/13.628,17.5,20.0,30.0,40.0,50.0,70.0,100./ 
      DATA YSNG13/0.0,.0140,.028,.051,.060,.063,.065,.061/
      DATA YSG13M/0.86,0.86,0.77,0.60,0.45,0.30,0.19,0.08/
# C# 1SIG (V=4-6)  (V=4 ENERGY=13.982 EV)  AVERAGE ENERGY LOSS=14.090
# USE BEF SCALING ABOVE 100EV     F=0.139
      DATA XSNG14/14.090,17.5,20.0,30.0,40.0,50.0,70.0,100./
      DATA YSNG14/0.0,.030,.045,.081,.096,.102,.103,.097/
      DATA YSG14M/0.85,0.85,0.75,0.55,0.40,0.25,0.17,0.08/
# B# 1SIG (V=11-INF) (V=11 ENERGY=13.84 EV) 
#  AVERAGE ENERGY LOSS=14.232 EV      (CONSISTENT WITH BERKOWITZ)
#  USE BEF SCALING ABOVE 100EV            F=0.265  
#  TOTAL TRANSITION STRENGTH FOR B# 1SIG= 0.265 + 0.0601=0.3301 
      DATA XSNG15/14.232,17.5,20.0,30.0,40.0,50.0,70.0,100./ 
      DATA YSNG15/0.0,.055,.083,.151,.180,.191,.194,.182/
      DATA YSG15M/0.81,0.81,0.71,0.47,0.33,0.20,0.15,0.09/
#
# E# 1SIG  ENERGY LOSS=14.36EV        F=0.0108  (BERKOWITZ) 
#  USE BEF SCALING IN def
#
# E 1PI   ENERGY LOSS=14.45EV         F=0.0237   (BERKOWITZ)
# USE BEF SCALING IN def
#
# SINGLET  ENERGY LOSS=14.839EV       F=0.0117  (BERKOWITZ)
# USE BEF SCALING IN def
# 
#  SUM OF HIGH ENERGY SINGLETS   ENERGY LOSS=15.2  F=0.1152
# USE BEF SCALING IN def
#
# SUM OF EXCITATIONS TO EXCITED IONS AND MOLECULAR BREAKUP.
#    ENERGY LOSS=15.5EV    
# USE BEF SCALING                F=1.30
#           
# RAP UP TO 100 EV : LINDSAY TO 1KEV : SCHRAM TO 20KEV    
# ABOVE 20KEV USE MATRIX ELEMENTS COMPATIBLE WITH RIEKE AND BERKOWITZ   
      DATA XION/15.581,16.0,16.5,17.0,17.5,18.0,18.5,19.0,19.5,20.0,20.5,21.0,21.5,22.0,22.5,23.0,23.5,24.0,24.5,25.0,25.5,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,110.,120.,140.,160.,180.,200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,10000.,12000.,14000.,16000.,18000.,20000./
# COUNTING IONISATION
      DATA YION/0.00,.0211,.0466,.0713,.0985,.129,.164,.199,.230,.270,.308,.344,.380,.418,.455,.492,.528,.565,.603,.640,.677,.714,.875,1.03,1.15,1.27,1.38,1.49,1.57,1.78,1.94,2.07,2.18,2.27,2.33,2.39,2.44,2.46,2.49,2.51,2.51,2.50,2.48,2.45,2.36,2.28,2.19,2.08,1.98,1.89,1.82,1.68,1.56,1.45,1.36,1.28,1.20,1.12,1.07,1.01,.971,.936,.907,.879,.847,.728,.649,.585,.534,.491,.408,.351,.310,.280,.255,.233,.217,.200,.178,.159,.144,.132,.113,.0998,.0898,.0824,.0752/
# IONISATION TO N2+    ASYMPTOTIC 79.73% OF COUNTING IONISATION
      DATA XION1/15.581,16.0,16.5,17.0,17.5,18.0,18.5,19.0,19.5,20.0,20.5,21.0,21.5,22.0,22.5,23.0,23.5,24.0,24.5,25.0,25.5,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,110.,120.,140.,160.,180.,200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,10000.,12000.,14000.,16000.,18000.,20000./
      DATA YION1/0.00,.0211,.0466,.0713,.0985,.129,.164,.199,.230,.270,.308,.344,.380,.418,.455,.492,.528,.565,.603,.640,.677,.714,.865,.929,1.03,1.12,1.20,1.29,1.37,1.52,1.60,1.66,1.72,1.74,1.78,1.80,1.81,1.82,1.83,1.85,1.85,1.83,1.81,1.78,1.72,1.67,1.61,1.55,1.48,1.41,1.37,1.28,1.20,1.11,1.05,.998,.943,.880,.844,.796,.765,.738,.719,.698,.676,.580,.517,.466,.426,.391,.325,.280,.247,.223,.203,.186,.173,.159,.142,.127,.115,.105,.0901,.0796,.0716,.0657,.0600/
# IONISATION TO N+   ASYMPTOTIC 19.70% OF COUNTING IONISATION
      DATA XION2/24.294,28.0,30.0,35.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,110.,120.,140.,160.,180.,200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,10000.,12000.,14000.,16000.,18000.,20000./
      DATA YION2/0.0,.010,.0325,.0904,.166,.245,.319,.390,.438,.482,.523,.561,.587,.605,.632,.645,.656,.660,.661,.652,.633,.595,.566,.516,.493,.458,.438,.393,.351,.324,.299,.274,.248,.234,.217,.205,.200,.192,.183,.176,.167,.143,.128,.115,.105,.0967,.0804,.0691,.0611,.0552,.0502,.0459,.0427,.0394,.0351,.0313,.0284,.0260,.0223,.0197,.0177,.0162,.0148/
# IONISATION TO N+ + N+  NORMALISED TIAN AND VIDAL  
#  ASYMPTOTIC 3.38% OF COUNTING IONISATION
      DATA XION3/38.8,45.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600.,700.,800.,900.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,10000.,12000.,14000.,16000.,18000.,20000./
      DATA YION3/0.0,.00917,.0199,.0378,.0617,.0827,.0991,.109,.119,.117,.112,.105,.0982,.0917,.0842,.0778,.0676,.0596,.0533,.0475,.0439,.0426,.0373,.0343,.0314,.0287,.0246,.0220,.0197,.0180,.0166,.0138,.0119,.0105,.00948,.00862,.00788,.00733,.00676,.00603,.00537,.00488,.00446,.00383,.00338,.00304,.00278,.00254/
# IONISATION TO N++  ASYMPTOTIC  0.57% OF COUNTING IONISATION
      DATA XION4/65.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,110.,120.,140.,160.,180.,200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,10000.,12000.,14000.,16000.,18000.,20000./
      DATA YION4/0.0,.000171,.000658,.00122,.00204,.00328,.00439,.00495,.00725,.00927,.0122,.0137,.0154,.0154,.0154,.0142,.0141,.0128,.0117,.0103,.00940,.00808,.00796,.00760,.00701,.00649,.00587,.00594,.00543,.00522,.00505,.00485,.00415,.00370,.00333,.00304,.00280,.00233,.00200,.00177,.00160,.00145,.00133,.00124,.00114,.00101,.000906,.000821,.000752,.000644,.000569,.000512,.000470,.000429/
# NITROGEN K-SHELL IONISATION (MULTIPLY BY 2 FOR MOLECULE)
      DATA XKSH/401.6,407.,419.,431.,444.,457.,471.,485.,499.,515.,530.,546.,562.,596.,631.,668.,708.,750.,794.,841.,891.,944.,1000.,1090.,1188.,1296.,1496.,1679.,1884.,2054.,2238.,2512.,2985.,3758.,4467.,5158.,5957.,7079.,1.0D4,1.26D4,1.50D4,2.05D4,2.51'%.3f' %.07D4,4.10D4,5.01D4,6.13D4,7.08D4,8.18D4,1.0D5,1.54D5,2.05D5,2.99D5,4.10D5,5.01D5,6.13D5,7.08D5,8.18D5,1.00D6,1.25D6,1.50D6,2.05'%.3f' %.07D6,4.10D6,5.01D6,6.13D6,7.08D6,8.18D6,1.00D7,1.22D7,1.50D7,1.88D7,2.24D7,2.82'%.3f' %.76D7,4.87D7,6.31D7,8.66D7,1.00D8,1.22D8,1.50D8,1.88D8,2.24D8,2.82'%.3f' %.76D8,4.87D8,6.31D8,8.66D8,1.00D9/
      DATA YKSH/0.00,4.11D-5,1.38D-4,2.32D-4,3.23D-4,4.12D-4,4.98D-4,5.81D-4,6.61D-4,7.38D-4,8.13D-4,8.85D-4,9.54D-4,1.08D-3,1.20D-3,1.31D-3,1.41D-3,1.50D-3,1.58D-3,1.65D-3,1.72D-3,1.77D-3,1.82D-3,1.87D-3,1.91D-3,1.94D-3,1.95D-3,1.93D-3,1.89D-3,1.86D-3,1.81D-3,1.74D-3,1.63D-3,1.45D-3,1.32D-3,1.22D-3,1.12D-3,1.00D-3,7.95D-4,6.77D-4,5.98D-4,4.74D-4,4.09D-4,3.52D-4,2.85D-4,2.47D-4,2.14D-4,1.94D-4,1.76D-4,1.54D-4,1.19D-4,1.03D-4,8.77D-5,7.92D-5,7.54D-5,7.27D-5,7.14D-5,7.04D-5,6.97D-5,6.96D-5,7.00D-5,7.16D-5,7.47D-5,7.74D-5,7.95D-5,8.17D-5,8.34D-5,8.51D-5,8.75D-5,9.00D-5,9.25D-5,9.54D-5,9.76D-5,1.01D-4,1.04D-4,1.08D-4,1.11D-4,1.15D-4,1.17D-4,1.20D-4,1.22D-4,1.25D-4,1.27D-4,1.31D-4,1.34D-4,1.38D-4,1.41D-4,1.45D-4,1.47D-4/
# BREMSSTRAHLUNG X-SECTION WITH CUT OFF UNITS 10**-24 CM**2
      DATA Z7T/385.,234.,113.,63.5,35.5,16.4,9.48,5.96,4.07,3.73,3.81,3.93,4.04,4.11,4.18,4.26,4.33,4.42,4.48,4.55,4.59,4.61,4.63,4.64,4.65/
      DATA EBRM/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,4.E7,5.E7,6.E7,8.E7,1.E8/
#  *********************************************************************
# 2015 UPDATE INCLUDES DISSOCIATIVE IONISATION AND NEUTRAL DISSOCIATION
#      AT ENERGIES HIGHER THAN THE IONISATION ENERGY.
#-----------------------------------------------------------------
# REANALYSED SINGLET STATES TO MAKE CONSISTENT WITH OSCILLATOR SUM
# FROM BERKOWITZ  USED BEF SCALING TO GIVE X-SCTION AT HIGH ENERGY.
#  *********************************************************************
#  2013: INCLUDE K-SHELL IONISATION
# -----------------------------------
#  NITROGEN UPDATE 2008.
#  USED ELECTRON SCATTERING DATA PUBLISHED UP TO DECEMBER 2008.
#  VIBRATIONAL X-SECTIONS MAINLY FROM ALLAN AND ALSO VICIC
#  ALLAN    J.PHYS.B 18(1985) 4511
#  VICIC    J.PHYS.B 29(1996) 1273
#  ELASTIC FROM ALLAN , ITIKAWA(REVIEW) ,SUN AND ALSO MUSE 
#  ALLAN     J.PHYS.B 38(2005) 3655
#  ITIKAWA   J.PHYS.CHEM.REF DATA 35(2006)31
#  SUN       PHYS.REV 52A(1995)1229
#  MUSE      J.PHYS.B 41(2008)095203
# EXCITATION FROM ITIKAWA (REVIEW) AND KHAKOO
#  KHAKOO    PHYS.REV A 77(2008)012704
#  KHAKOO    PHYS.REV A 71(2005)062703
#  IONISATION FROM RAP , LINDSAY, SCHRAM, RIEKE AND BERKOWITZ
#  RAP       J.CHEM.PHYS 43(1965)1464
#  LINDSAY   LLANDOLT-BORNSTEIN I/17C
#  SCHRAM    PHYSICA 31(1965)94
#  RIEKE     PHYS REV 6A (1972)1507
#  BERKOWITZ PHOTOABSORPTION ,PHOTOIONISATION SPECTROSCOPY
# 
#  ROTATIONAL X-SECTIONS FROM QUADRUPOLE BORN APPROX. WITH TABULATED
#  VALUES FOR THE RESONANCE ENHANCEMENT.
#  INELASTIC X-SECTIONS ARE MAINLY FROM KHAKOO FOR LEVELS BELOW 14.0EV
# USED FRANK-CONDON FACTORS TO WEIGHT THE VIBRATION-EXCITATION LEVELS
# AND ADJUSTED THRESHOLDS TO GIVE CORRECT AVERAGE ENERGY LOSS.
#  THE REMAINING LEVEL STRENGTH IS IN THE EFFECTIVE SINGLET LEVEL
#  AT 14.2EV . THE 14.2 EV LEVEL WAS MADE TO BE CONSISTENT WITH
#  THE TOTAL LEVEL SUM FROM PITCHFORD AND PHELPS AND GIVES ACCURATE
#  FANO FACTORS
# THE TOTAL X-SECTION BELOW 50 EV IS WITHIN 1% OF THE EXPERIMENTAL VALUE
# OF KENNERLEY. ABOVE 50EV IS WITHIN 1% OF REVIEW BY ITIKAWA. 
# TOTAL ELASTIC AND ELASTIC MOMENTUM TRANSFER X-SECTION ARE ADJUSTED TO 
# FIT DATA IN MIXTURES:
#                    NEON /NITROGEN   VD                 ROBERTSON  
#                   ARGON /NITROGEN   VD                 HADDAD
#             PURE  NITROGEN          VD   DT  DL  AND ALPHA 
# LOW FIELD NITROGEN DATA  VD AND DT FROM LOWKE AND HUXLEY AND CROMPTON.
#
#   HIGH FIELD NITROGEN DATA VD AND DL FROM HASEGAWA
#  FIT TO DRIFT AND DIFFUSION DATA BETTER THAN 1% ACCURACY.
#  
#   TOWNS# end COEFICIENT FROM COMPILATION BY DUTTON.
#
#***********************************************************************      
#--------------------------------------------------------------------- 
      if(NANISO == 0):
 :
       NAME='NITROGEN 2015  ISOTROPIC '
      else: 
       NAME='NITROGEN 2015 ANISOTROPIC'
      # endif
#    -------------------------------------------------------------- 
# BORN BETHE VALUES FOR COUNTING IONISATION
      CONST=1.873884D-20
      EMASS2=1021997.804
      API=numpy.arccos(-1.00)
      A0=0.52917720859D-8
      RY=13.60569193
      BBCONST=16.0*API*A0*A0*RY*RY/EMASS2
#
      AM2=3.35
      C=38.1
#
# AVERAGE AUGER EMISSION FROM K-SHELL
      AUGK=1.99
#
      NION=12
      NATT=1 
      NIN=127
      NNULL=0 
      NASIZE=20000
      IONMODEL=0
#      
      NBREM=25
      DO 11 J=1,NIN
      IZBR[J]=0
   11 CONTINUE
      IZBR(NIN+1)=7
#
# ANGULAR DISTRIBUTIONS OF ELASTIC AND IONISATION CAN BE EITHER
# ISOTROPIC (KEL=0) OR
# CAPITELLI-LONGO (KEL =1)  OR OKHRIMOVSKKY TYPES (KEL=2)
# 
      DO 1 J=1,6
    1 KEL[J]=NANISO
# USE ANISOTROPIC SCATTERING FOR ROTATIONAL STATES
      DO 2 J=1,76 
    2 KIN[J]=2    
# USE ANISOTROPIC FOR SUPERELASTIC VIBRATION
      KIN(77)=2
# USE ANISOTROPIC SCATTERING FOR VIBRATIONAL AND EXCITED STATES .
# ANGULAR DISTRIBUTIONS ARE CAPITELLI-LONGO (FORWARD BACKWARD ASYMMETRY)
# OR OKRIMOVSKKY
      DO 20 J=78,NIN
   20 KIN[J]=NANISO
# 
      NELA=216                                                          
      NROT=70                                                          
      NVIB1=87                                                          
      NVIB2=69                                                          
      NVIB3=70                                                          
      NVIB4=50                                                          
      NVIB5=40                                                          
      NVIB6=41 
      NVIB7=42
      NVIB8=40 
      NVIB9=35
      NVIB10=35
      NVIB11=35
      NVIB12=33
      NVIB13=31
      NVIB14=28
      NVIB15=32
      NTRP1=23  
      NTRP2=23                                                        
      NTRP3=21
      NTRP4=22                                                          
      NTRP5=23
      NTRP6=21                                                          
      NTRP7=21                                                          
      NTRP8=21
      NTRP9=20
      NTRP10=20
      NTRP11=19
      NTRP12=22
      NTRP13=10
      NTRP14=10
      NSNG1=19                                                         
      NSNG2=17
      NSNG3=17
      NSNG4=19                                                          
      NSNG5=17
      NSNG6=16
      NSNG7=12
      NSNG8=8
      NSNG9=16 
      NSNG10=8
      NSNG11=8
      NSNG12=8
      NSNG13=8
      NSNG14=8
      NSNG15=8
      NIOND=87
      NION1=87
      NION2=63
      NION3=48
      NION4=54 
      NKSH=89
#                                                         
      E[1]=0.0                                                          
      E(2)=2.0*EMASS/(27.7940*AMU)                                      
      E(3)=15.581                                  
      E(4)=0.0                                   
      E(5)=0.0                   
      E(6)=0.0
#
      EION[1]=15.581
      EION(2)=15.855
      EION(3)=16.699
      EION(4)=16.935
      EION(5)=17.171
      EION(6)=18.751
      EION(7)=23.591
      EION(8)=24.294
      EION(9)=24.4  
      EION(10)=35.7
      EION(11)=38.8
      EION(12)=401.6
#
      EOBFRAC=0.68
      DO 14 J=1,12
#     EOBY[J]=EION[J]*EOBFRAC
      EOBY[J]=13.6 
   14 CONTINUE
#
      DO 17 JK=1,12
      LEGAS(JK)=0
      ISHELL(JK)=0
      NC0(JK)=0
      EC0(JK)=0.0
      WKLM(JK)=0.0
      EFL(JK)=0.0
      NG1(JK)=0
      EG1(JK)=0.0
      NG2(JK)=0
      EG2(JK)=0.0
   17 CONTINUE
# DOUBLY CHARGED STATES
      NC0(11)=1
      EC0(11)=6.0
# FLUORESENCE DATA
      LEGAS(12)=1
      ISHELL(12)=1
      NC0(12)=2
      EC0(12)=358.6
      WKLM(12)=0.0044
      EFL(12)=385.
      NG1(12)=1
      EG1(12)=353.
      NG2(12)=1
      EG2(12)=6.
#
      DO 776 J=1,NION
      DO 777 I=1,NASIZE
      if(EG[I]:
 > EION[J]) :
       IOFFION[J]=I-1
       GO TO 776
      # endif
  777 CONTINUE
  776 CONTINUE
# CALC FRACTIONAL POPULATION DENSITY FOR ROTATIONAL STATES
      B0=2.4668D-4
      A0=0.5291772083D-8
# ROTATIONAL QUADRUPOLE MOMENT
      QBQA=1.045
      QBK=1.67552*(QBQA*A0)**2
      DO 3 K=1,39,2 
      AK=float[K]
    3 PJ[K]=3.0*(2.0*AK+1.0)*math.exp(-AK*(AK+1.0)*B0/AKT)
      DO 4 K=2,38,2
      AK=float[K]
    4 PJ[K]=6.0*(2.0*AK+1.0)*math.exp(-AK*(AK+1.0)*B0/AKT)
      SUM=6.0
      DO 5 K=1,39
    5 SUM=SUM+PJ[K]
      FROT0=6.0/SUM
      DO 6 K=1,39
    6 PJ[K]=PJ[K]/SUM
# CALC ROTATIONAL TRANSITION ENERGIES
      DO 7 K=1,38  
      J=K-1
      AJ=float[J]
      EIN(K+38)=B0*(4.0*AJ+6.0)
    7 EIN[K]=-EIN(K+38)
      EIN(77)=-0.2889
      EIN(78)=0.2889
      EIN(79)=0.5742                                                    
      EIN(80)=0.8559                                                    
      EIN(81)=1.1342                                                    
      EIN(82)=1.4088                                                    
      EIN(83)=1.6801
      EIN(84)=1.9475
      EIN(85)=2.2115
      EIN(86)=2.4718
      EIN(87)=2.7284
      EIN(88)=2.9815
      EIN(89)=3.2310
      EIN(90)=3.4769
      EIN(91)=3.7191
      EIN(92)=3.9576
      EIN(93)=6.725
      EIN(94)=7.360                                                     
      EIN(95)=7.744
      EIN(96)=8.050                                                     
      EIN(97)=8.217
      EIN(98)=8.451
      EIN(99)=8.729
      EIN(100)=8.950
      EIN(101)=8.974                                                    
      EIN(102)=9.191
      EIN(103)=9.562
      EIN(104)=9.590
      EIN(105)=9.665
      EIN(106)=9.933
      EIN(107)=10.174 
      EIN(108)=10.536
      EIN(109)=11.188                                                   
      EIN(110)=11.875
      EIN(111)=12.289 
      EIN(112)=12.781
      EIN(113)=13.000
      EIN(114)=13.001
      EIN(115)=13.076
      EIN(116)=13.174
      EIN(117)=13.338
      EIN(118)=13.385
      EIN(119)=13.628
      EIN(120)=14.090
      EIN(121)=14.232                              
      EIN(122)=14.36
      EIN(123)=14.45
      EIN(124)=14.839
      EIN(125)=15.2
      EIN(126)=15.6 
      EIN(127)=16.6
      EIN(128)=0.0
#
#**********************************************************************
# ENTER PENNING TRANSFER FRACTION FOR EACH LEVEL
#  SET PENNING TRANSFER FRACTION TO ZERO FOR LOW ENERGY LEVELS
      DO 8 K=1,106
      DO 8 L=1,3
    8 PENFRA[L,K]=0.0
#-----------------------------------------------------------
# PENNING TRANSFER FRACTION FOR LEVELS ABOVE 10 EV
      DO 9 K=107,127
      PENFRA[1,K]=0.0
# PENNING TRANSFER DISTANCE IN MICRONS
      PENFRA[2,K]=1.0
# PENNING TRANSFER TIME IN PICOSECONDS
      PENFRA[3,K]=1.0
      if(IPEN == 0):
 GO TO 9
      WRITE(6,999) NAME,EIN[K],PENFRA[1,K],PENFRA[2,K],PENFRA[3,K]
  999 print(' GAS = ',A15,' ENERGY LEVEL = ','%.4f' %,' EV.',/,' PENNING PROBABILITY = ','%.3f' % ,' ABS.LENGTH = ',F7.2,' DECAY TIME = ',F7.1,/)
    9 CONTINUE
#********************************************************************** 
      DO 551 NL=1,NIN
      DO 651 I=1,NASIZE
      if(EG[I]:
 > abs(EIN(NL))) :
       IOFFN(NL)=I-1
       GO TO 551
      # endif 
  651 CONTINUE
  551 CONTINUE
#    
      SCRPT[1]='                                                  '
      if(NANISO == 0):
 :
       SCRPT(2)=' ELASTIC  ISOTROPIC           NITROGEN           '
      else:                  
       SCRPT(2)=' ELASTIC ANISOTROPIC          NITROGEN           '
      # endif
      SCRPT(3)=' IONISATION N2+ X2SIGMA VIB=0     ELOSS=  15.581  '
      SCRPT(4)=' IONISATION N2+ X2SIGMA VIB>0     ELOSS=  15.855  '
      SCRPT(5)=' IONISATION N2+ A2PI    VIB=0     ELOSS=  16.699  '
      SCRPT(6)=' IONISATION N2+ A2PI    VIB=1     ELOSS=  16.935  '
      SCRPT(7)=' IONISATION N2+ A2PI    VIB>1     ELOSS=  17.171  '
      SCRPT(8)=' IONISATION N2+ B2SIGMA           ELOSS=  18.751  '
      SCRPT(9)=' IONISATION N2+ C2SIGMA           ELOSS=  23.591  '
      SCRPT(10)=' DISSOC ION (N+,N)                ELOSS=  24.294  '
      SCRPT(11)=' DISSOC ION (N+,N*)               ELOSS=  24.4    '
      SCRPT(12)=' DISSOC ION (N+*,N)               ELOSS=  35.7    '
      SCRPT(13)=' DISSOC ION (N++,N) AND (N+,N+)   ELOSS=  38.8    '
      SCRPT(14)=' IONISATION K-SHELL               ELOSS= 401.6    '
      SCRPT(15)=' ATTACHMENT                                       '
      SCRPT(16)='                                                  '
      SCRPT(17)='                                                  '  
      SCRPT(18)=' ROTATION  2-0                    ELOSS=  -0.00148'
      SCRPT(19)=' ROTATION  3-1                    ELOSS=  -0.00247'
      SCRPT(20)=' ROTATION  4-2                    ELOSS=  -0.00345'
      SCRPT(21)=' ROTATION  5-3                    ELOSS=  -0.00444'
      SCRPT(22)=' ROTATION  6-4                    ELOSS=  -0.00543'
      SCRPT(23)=' ROTATION  7-5                    ELOSS=  -0.00641'
      SCRPT(24)=' ROTATION  8-6                    ELOSS=  -0.00740'
      SCRPT(25)=' ROTATION  9-7                    ELOSS=  -0.00839'
      SCRPT(26)=' ROTATION 10-8                    ELOSS=  -0.00937'
      SCRPT(27)=' ROTATION 11-9                    ELOSS=  -0.0104 '   
      SCRPT(28)=' ROTATION 12-10                   ELOSS=  -0.0113 '
      SCRPT(29)=' ROTATION 13-11                   ELOSS=  -0.0123 '
      SCRPT(30)=' ROTATION 14-12                   ELOSS=  -0.0133 '
      SCRPT(31)=' ROTATION 15-13                   ELOSS=  -0.0143 '
      SCRPT(32)=' ROTATION 16-14                   ELOSS=  -0.0153 '
      SCRPT(33)=' ROTATION 17-15                   ELOSS=  -0.0163 '   
      SCRPT(34)=' ROTATION 18-16                   ELOSS=  -0.0173 '
      SCRPT(35)=' ROTATION 19-17                   ELOSS=  -0.0183 '
      SCRPT(36)=' ROTATION 20-18                   ELOSS=  -0.0192 '
      SCRPT(37)=' ROTATION 21-19                   ELOSS=  -0.0202 '
      SCRPT(38)=' ROTATION 22-20                   ELOSS=  -0.0212 '
      SCRPT(39)=' ROTATION 23-21                   ELOSS=  -0.0222 '
      SCRPT(40)=' ROTATION 24-22                   ELOSS=  -0.0232 '
      SCRPT(41)=' ROTATION 25-23                   ELOSS=  -0.0242 '
      SCRPT(42)=' ROTATION 26-24                   ELOSS=  -0.0252 '
      SCRPT(43)=' ROTATION 27-25                   ELOSS=  -0.0261 '
      SCRPT(44)=' ROTATION 28-26                   ELOSS=  -0.0271 '
      SCRPT(45)=' ROTATION 29-27                   ELOSS=  -0.0281 '
      SCRPT(46)=' ROTATION 30-28                   ELOSS=  -0.0291 '
      SCRPT(47)=' ROTATION 31-29                   ELOSS=  -0.0301 '
      SCRPT(48)=' ROTATION 32-30                   ELOSS=  -0.0311 '
      SCRPT(49)=' ROTATION 33-31                   ELOSS=  -0.0321 '
      SCRPT(50)=' ROTATION 34-32                   ELOSS=  -0.0331 '
      SCRPT(51)=' ROTATION 35-33                   ELOSS=  -0.0340 '
      SCRPT(52)=' ROTATION 36-34                   ELOSS=  -0.0350 '
      SCRPT(53)=' ROTATION 37-35                   ELOSS=  -0.0360 '
      SCRPT(54)=' ROTATION 38-36                   ELOSS=  -0.0370 '
      SCRPT(55)=' ROTATION 39-37                   ELOSS=  -0.0380 '
      SCRPT(56)=' ROTATION 0-2                     ELOSS=   0.00148'
      SCRPT(57)=' ROTATION 1-3                     ELOSS=   0.00247'
      SCRPT(58)=' ROTATION 2-4                     ELOSS=   0.00345'
      SCRPT(59)=' ROTATION 3-5                     ELOSS=   0.00444'
      SCRPT(60)=' ROTATION 4-6                     ELOSS=   0.00543'   
      SCRPT(61)=' ROTATION 5-7                     ELOSS=   0.00641'
      SCRPT(62)=' ROTATION 6-8                     ELOSS=   0.00740'
      SCRPT(63)=' ROTATION 7-9                     ELOSS=   0.00839'
      SCRPT(64)=' ROTATION 8-10                    ELOSS=   0.00937'
      SCRPT(65)=' ROTATION 9-11                    ELOSS=   0.0104 '
      SCRPT(66)=' ROTATION 10-12                   ELOSS=   0.0113 '
      SCRPT(67)=' ROTATION 11-13                   ELOSS=   0.0123 '
      SCRPT(68)=' ROTATION 12-14                   ELOSS=   0.0133 '
      SCRPT(69)=' ROTATION 13-15                   ELOSS=   0.0143 '
      SCRPT(70)=' ROTATION 14-16                   ELOSS=   0.0153 '
      SCRPT(71)=' ROTATION 15-17                   ELOSS=   0.0163 '
      SCRPT(72)=' ROTATION 16-18                   ELOSS=   0.0173 '
      SCRPT(73)=' ROTATION 17-19                   ELOSS=   0.0183 '
      SCRPT(74)=' ROTATION 18-20                   ELOSS=   0.0192 '
      SCRPT(75)=' ROTATION 19-21                   ELOSS=   0.0202 '
      SCRPT(76)=' ROTATION 20-22                   ELOSS=   0.0212 '
      SCRPT(77)=' ROTATION 21-23                   ELOSS=   0.0222 '
      SCRPT(78)=' ROTATION 22-24                   ELOSS=   0.0232 '
      SCRPT(79)=' ROTATION 23-25                   ELOSS=   0.0242 '
      SCRPT(80)=' ROTATION 24-26                   ELOSS=   0.0252 '
      SCRPT(81)=' ROTATION 25-27                   ELOSS=   0.0261 '
      SCRPT(82)=' ROTATION 26-28                   ELOSS=   0.0271 '
      SCRPT(83)=' ROTATION 27-29                   ELOSS=   0.0281 '
      SCRPT(84)=' ROTATION 28-30                   ELOSS=   0.0291 '
      SCRPT(85)=' ROTATION 29-31                   ELOSS=   0.0301 '
      SCRPT(86)=' ROTATION 30-32                   ELOSS=   0.0311 '
      SCRPT(87)=' ROTATION 31-33                   ELOSS=   0.0321 '
      SCRPT(88)=' ROTATION 32-34                   ELOSS=   0.0331 '
      SCRPT(89)=' ROTATION 33-35                   ELOSS=   0.0340 '
      SCRPT(90)=' ROTATION 34-36                   ELOSS=   0.0350 '
      SCRPT(91)=' ROTATION 35-37                   ELOSS=   0.0360 '
      SCRPT(92)=' ROTATION 36-38                   ELOSS=   0.0370 '
      SCRPT(93)=' ROTATION 37-39                   ELOSS=   0.0380 '
      SCRPT(94)=' VIBRATION     V1                 ELOSS=  -0.2889 '
      SCRPT(95)=' VIBRATION     V1                 ELOSS=   0.2889 '
      SCRPT(96)=' VIBRATION    2V1                 ELOSS=   0.5742 '
      SCRPT(97)=' VIBRATION    3V1                 ELOSS=   0.8559 '
      SCRPT(98)=' VIBRATION    4V1                 ELOSS=   1.1342 '
      SCRPT(99)=' VIBRATION    5V1                 ELOSS=   1.4088 '
      SCRPT(100)=' VIBRATION    6V1                 ELOSS=   1.6801 '
      SCRPT(101)=' VIBRATION    7V1                 ELOSS=   1.9475 '
      SCRPT(102)=' VIBRATION    8V1                 ELOSS=   2.2115 '
      SCRPT(103)=' VIBRATION    9V1                 ELOSS=   2.4718 '
      SCRPT(104)=' VIBRATION   10V1                 ELOSS=   2.7284 '
      SCRPT(105)=' VIBRATION   11V1                 ELOSS=   2.9815 '
      SCRPT(106)=' VIBRATION   12V1                 ELOSS=   3.2310 '
      SCRPT(107)=' VIBRATION   13V1                 ELOSS=   3.4769 '
      SCRPT(108)=' VIBRATION   14V1                 ELOSS=   3.7191 '
      SCRPT(109)=' VIBRATION   15V1                 ELOSS=   3.9576 '
      SCRPT(110)=' A3SIG     V=0-4                  ELOSS=   6.725  '
      SCRPT(111)=' A3SIG     V=5-9                  ELOSS=   7.360  '
      SCRPT(112)=' B 3PI     V=0-3                  ELOSS=   7.744  '
      SCRPT(113)=' W3DEL     V=0-5                  ELOSS=   8.050  '
      SCRPT(114)=' A3SIG     V=10-21                ELOSS=   8.217  '
      SCRPT(115)=' B 3PI     V=4-16                 ELOSS=   8.451  '
      SCRPT(116)=' W3DEL     V=6-10                 ELOSS=   8.729  '
      SCRPT(117)=' A 1PI     V=0-3                  ELOSS=   8.950  '
      SCRPT(118)=' B#3SIG    V=0-6                  ELOSS=   8.974  '
      SCRPT(119)=' A#1SIG    V=0-6                  ELOSS=   9.191  '
      SCRPT(120)=' W3DEL     V=11-19                ELOSS=   9.562  '
      SCRPT(121)=' W 1DEL    V=0-5                  ELOSS=   9.590  '
      SCRPT(122)=' A 1PI     V=4-15                 ELOSS=   9.665  '
      SCRPT(123)=' B#3SIG    V=7-18                 ELOSS=   9.933  '
      SCRPT(124)=' A#1SIG    V=7-19                 ELOSS=  10.174  '
      SCRPT(125)=' W 1DEL    V=6-18                 ELOSS=  10.536  '
      SCRPT(126)=' C 3PI     V=0-4                  ELOSS=  11.188  '
      SCRPT(127)=' E 3SIG                           ELOSS=  11.875  '
      SCRPT(128)=' A##1SIG   V=0-1                  ELOSS=  12.289  '
      SCRPT(129)=' B 1PI     V=0-6     F=0.1855     ELOSS=  12.781  '
      SCRPT(130)=' C#1SIG    V=0-3     F=0.1500     ELOSS=  13.000  '
      SCRPT(131)=' G 3PI     V=0-3                  ELOSS=  13.001  '
      SCRPT(132)=' C3 1PI    V=0-3     F=0.1500     ELOSS=  13.076  '
      SCRPT(133)=' F 3PI     V=0-3                  ELOSS=  13.174  '
      SCRPT(134)=' B 1PI     V=7-14    F=0.0663     ELOSS=  13.338  '
      SCRPT(135)=' B#1SIG    V=0-10    F=0.0601     ELOSS=  13.385  '
      SCRPT(136)=' O3 1PI    V=0-3     F=0.0828     ELOSS=  13.628  '
      SCRPT(137)=' C#1SIG    V=4-6     F=0.1390     ELOSS=  14.090  '
      SCRPT(138)=' B#1SIG    V=11-24   F=0.2650     ELOSS=  14.232  '
      SCRPT(139)=' E#1SIG              F=0.0108     ELOSS=  14.36   '
      SCRPT(140)=' E 1PI               F=0.0237     ELOSS=  14.45   '
      SCRPT(141)=' SINGLET LEVEL       F=0.0117     ELOSS=  14.839  '
      SCRPT(142)=' SUM HIGH SINGLETS   F=0.1152     ELOSS=  15.2    '
      SCRPT(143)=' NEUTRAL DISS ABOVE IONIS. ENERGY ELOSS=  15.6    '
      SCRPT(144)=' NEUTRAL DISS ABOVE IONIS. ENERGY ELOSS=  16.6    '
      SCRPT(145)=' BREMSSTRAHLUNG  FROM NITROGEN ATOMS              '
# CALC VIBRATIONAL LEVEL V1 POPULATION
      APOPV1=math.exp(EIN(77)/AKT)
      APOPGS=1.0
      APOPSUM=APOPGS+APOPV1
      APOPV1=APOPV1/APOPSUM
      APOPGS=APOPGS/APOPSUM
#  RENORMALISE GROUND STATE TO ALLOW FOR EXCITATION FROM
#  THE EXCITED VIBRATIONAL STATE 
      APOPGS=1.0
#       
#     EN=-ESTEP/2.0   
      DO 900 I=1,NSTEP
      EN=EG[I]      
#     EN=EN+ESTEP 
      GAMMA1=(EMASS2+2.00*EN)/EMASS2
      GAMMA2=GAMMA1*GAMMA1
      BETA=math.sqrt(1.00-1.00/GAMMA2)
      BETA2=BETA*BETA
#        
# ELASTIC (+ROTATIONAL)                                                
      DO 10 J=2,NELA                                                    
      if(EN <= XELA[J]):
 GO TO 15                                        
   10 CONTINUE                                                          
      J=NELA                                                            
   15 A=(YELA[J]-YELA[J-1])/(XELA[J]-XELA[J-1])                         
      B=(XELA[J-1]*YELA[J]-XELA[J]*YELA[J-1])/(XELA[J-1]-XELA[J])
# ELASTIC
      QELA=(A*EN+B)*1.0D-16
      A=(YMOM[J]-YMOM(J-1))/(XELA[J]-XELA[J-1])                         
      B=(XELA[J-1]*YMOM[J]-XELA[J]*YMOM(J-1))/(XELA[J-1]-XELA[J])
#  MOMENTUM TRANSFER
      QMOM=(A*EN+B)*1.0D-16
      A=(YEPS[J]-YEPS(J-1))/(XELA[J]-XELA[J-1])
      B=(XELA[J-1]*YEPS[J]-XELA[J]*YEPS(J-1))/(XELA[J-1]-XELA[J])
# ANISOTROPY defS
      PQ2=(A*EN+B)
# EPSILON =1.0-YEPS
      PQ2=1.00-PQ2
      PQ1=0.5+(QELA-QMOM)/QELA
      if(NANISO == 0):
 PEQEL(2,I)=0.5
      if(NANISO == 1):
 PEQEL(2,I)=PQ1
      if(NANISO == 2):
 PEQEL(2,I)=PQ2
      Q(2,I)=QELA
      if(NANISO == 0):
 Q(2,I)=QMOM 
# IONISATION CALCULATION 
      DO 29 J=1,12
      PEQION[J][I]=0.5
      if(NANISO == 2):
 PEQION[J][I]=0.0
   29 QION[J][I]=0.0
#
# IONISATION TO ALL CHANNELS WITH N2+
      QN2PTOT=0.0
      if(EN <= EION[1]:
) GO TO 411   
      if(EN > XION1(NION1):
) GO TO 41                                 
      DO 30 J=2,NION1                                                   
      if(EN <= XION1[J]:
) GO TO 40                                       
   30 CONTINUE                                                          
      J=NION1                                                           
   40 A=(YION1[J]-YION1(J-1))/(XION1[J]-XION1(J-1))                   
      B=(XION1(J-1)*YION1[J]-XION1[J]*YION1(J-1))/(XION1(J-1)-XION1[J])
      QN2PTOT=(A*EN+B)*1.D-16                   
      GO TO 411
# USE BORN BETHE X-SECTION ABOVE  XION1(NION1) EV 
   41 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QN2PTOT=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.7973                  
#
  411 QION(1,I)=QN2PTOT
      if(EN > EION(2):
 and EN <= EION(3)) :
       QION(2,I)=QN2PTOT*0.2
       QION(1,I)=QN2PTOT*0.8
      else if(EN > EION(3) and EN <= EION(4)) :
       QION(3,I)=QN2PTOT*0.1986
       QION(2,I)=QN2PTOT*0.1603
       QION(1,I)=QN2PTOT*0.6411
      else if(EN > EION(4) and EN <= EION(5)) :
       QION(4,I)=QN2PTOT*0.2296
       QION(3,I)=QN2PTOT*0.1530
       QION(2,I)=QN2PTOT*0.1235
       QION(1,I)=QN2PTOT*0.4939
      else if(EN > EION(5) and EN <= EION(6)) :
       QION(5,I)=QN2PTOT*0.2765
       QION(4,I)=QN2PTOT*0.1659
       QION(3,I)=QN2PTOT*0.1106
       QION(2,I)=QN2PTOT*0.0894
       QION(1,I)=QN2PTOT*0.3576
      else if(EN > EION(6) and EN <= EION(7)) :
       QION(6,I)=QN2PTOT*0.1299
       QION(5,I)=QN2PTOT*0.2408
       QION(4,I)=QN2PTOT*0.1445
       QION(3,I)=QN2PTOT*0.0963
       QION(2,I)=QN2PTOT*0.0777
       QION(1,I)=QN2PTOT*0.3108
      else if(EN > EION(7)) :
       QION(7,I)=QN2PTOT*0.022
       QION(6,I)=QN2PTOT*0.127
       QION(5,I)=QN2PTOT*0.2355
       QION(4,I)=QN2PTOT*0.1413
       QION(3,I)=QN2PTOT*0.0942
       QION(2,I)=QN2PTOT*0.076
       QION(1,I)=QN2PTOT*0.304
      # endif
      if(EN > EION(8):
) :
#
# IONISATION TO ALL CHANNELS WITH N+
       QNPTOT=0.0   
       if(EN > XION2(NION2):
) GO TO 414                                 
       DO 412 J=2,NION2                                                
       if(EN <= XION2[J]:
) GO TO 413                                     
  412  CONTINUE                                                        
       J=NION2                                                         
  413  A=(YION2[J]-YION2(J-1))/(XION2[J]-XION2(J-1))                   
       B=(XION2(J-1)*YION2[J]-XION2[J]*YION2(J-1))/(XION2(J-1)-XION2[J])
       QNPTOT=(A*EN+B)*1.D-16                   
       GO TO 415
# USE BORN BETHE X-SECTION ABOVE  XION2(NION2) EV 
  414  QNPTOT=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.197                 
  415  CONTINUE 
       QION(8,I)=QNPTOT
       if(EN > EION(9):
 and EN < EION(10)) :
        if(EN < 110.):
 QION(9,I)=((EN-EION(9))/(110.-EION(9)))*0.095*1.D-16
        if(EN >= 110.):
 QION(9,I)=QION(8,I)*0.1439
        QION(8,I)=QION(8,I)-QION(9,I)
       else if(EN > EION(10)) :
        if(EN < 110.):
 QION(9,I)=((EN-EION(9))/(110.-EION(9)))*0.095*1.D-16
        if(EN >= 110.):
 QION(9,I)=QION(8,I)*0.1439
        if(EN < 120.):
 QION(10,I)=((EN-EION(10))/(120.-EION(10)))*0.037*1.D-16
        if(EN > 120.):
 QION(10,I)=QION(8,I)*0.0560
        QION(8,I)=QION(8,I)-QION(9,I)-QION(10,I)
       # endif
      # endif
#
      if(EN > EION(11):
) :
#  SUM OF DOUBLE IONISATION CHANNELS: N+,N+  AND N++,N
       QION(11,I)=0.0   
       if(EN > XION3(NION3):
) GO TO 418                                 
       DO 416 J=2,NION3                                                
       if(EN <= XION3[J]:
) GO TO 417                                     
  416  CONTINUE                                                        
       J=NION3                                                         
  417  A=(YION3[J]-YION3(J-1))/(XION3[J]-XION3(J-1))                   
       B=(XION3(J-1)*YION3[J]-XION3[J]*YION3(J-1))/(XION3(J-1)-XION3[J])
       QION(11,I)=(A*EN+B)*1.D-16                   
       GO TO 419
# USE BORN BETHE X-SECTION ABOVE  XION3(NION3) EV 
  418  QION(11,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.0338               
  419  CONTINUE 
#*************************************************
# CORRECTION TO STRAUB N+ FOR  (N+,N+) CHANNEL
       QION(8,I)=QION(8,I)-QION(11,I)
#***************************************************
      # endif
      if(EN > 65.0):
 :
       if(EN > XION4(NION4):
) GO TO 422                                 
       DO 420 J=2,NION4                                                
       if(EN <= XION4[J]:
) GO TO 421                                     
  420  CONTINUE                                                        
       J=NION4                                                         
  421  A=(YION4[J]-YION4(J-1))/(XION4[J]-XION4(J-1))                   
       B=(XION4(J-1)*YION4[J]-XION4[J]*YION4(J-1))/(XION4(J-1)-XION4[J])
       QION(11,I)=QION(11,I)+(A*EN+B)*1.D-16                   
       GO TO 423
# USE BORN BETHE X-SECTION ABOVE  XION4(NION4) EV 
  422  QION(11,I)=QION(11,I)+CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.0057   
  423  CONTINUE 
      # endif 
# K-SHELL IONISATION 
      if(EN < EION(12):
) GO TO 434  
      DO 432 J=2,NKSH                                                  
      if(EN <= XKSH[J]:
) GO TO 433                                       
  432 CONTINUE                                                          
      J=NKSH                                                           
  433 A=(YKSH[J]-YKSH(J-1))/(XKSH[J]-XKSH(J-1))                         
      B=(XKSH(J-1)*YKSH[J]-XKSH[J]*YKSH(J-1))/(XKSH(J-1)-XKSH[J]) 
# SCALING FACTOR OF 2 FOR NUMBER OF ATOMS IN MOLECULE      
      QION(12,I)=2.0*(A*EN+B)*1.D-16                   
#
  434 DO 435 J=1,12
      if(EN <= (2.0*EION[J]:
)) GO TO 435
      PEQION[J][I]=PEQEL(2,(I-IOFFION[J]))
  435 CONTINUE
#  
# CORRECTION TO IONISATION FOR AUGER EMISSION
      QION(1,I)=QION(1,I)-AUGK*QION(12,I)
#
      Q(4,I)=0.0  
      Q(5,I)=0.0
      Q(6,I)=0.0                                                        
#---------------------------------------------------------------------  
#  QUADRUPOLE BORN ROTATIONAL STATES  ( GERJUOY AND STEIN)              
#---------------------------------------------------------------------
# 
#  SUPERELASTIC ROTATION   
#     
      DO 53 K=1,38 
      QIN(K,I)=0.0
      if(EN <= 0.0):
 GO TO 53                                  
      AJ=float(K+1)
      QIN(K,I)=PJ(K+1)*QBK*math.sqrt(1.0-EIN[K]/EN)*AJ*(AJ-1.0)/((2.0*AJ+1.0)*(2.0*AJ-1.0))
# CALCULATE ENHANCEMENT OF ROTATIONAL XSEC IN THE RESONANCE REGION
      DO 51 L=1,NROT
      if((EN-EIN[K]:
) <= XROT(L)) GO TO 52
   51 CONTINUE
      L=NROT
   52 A=(YROT(L)-YROT(L-1))/(XROT(L)-XROT(L-1))                     
      B=(XROT(L-1)*YROT(L)-XROT(L)*YROT(L-1))/(XROT(L-1)-XROT(L)) 
      RESFAC=(EN-EIN[K])*(A*(EN-EIN[K])+B)/EN
# USE 30% FOR RESFAC
      RESFAC=RESFAC*0.3  
# BORN ROTATIONAL X-SEC SUM IN RESONANCE REGION = 0.249
      RESFAC=1.0+RESFAC/0.249 
# SET ROTATIONAL ANGULAR DISTRIBUTIONS 
      PEQIN(K,I)=0.50 
      if(NANISO == 2):
 PEQIN(K,I)=0.00 
   53 QIN(K,I)=QIN(K,I)*RESFAC    
#
#  INELASTIC ROTATION
#
# CALCULATE ENHANCEMENT OF ROTATIONAL XSEC IN THE RESONANCE REGION
      DO 55 K=39,76
   55 QIN(K,I)=0.0
      if(EN <= 0.0):
 GO TO 80
      DO 56 L=1,NROT
      if(EN <= XROT(L):
) GO TO 57 
   56 CONTINUE
      L=NROT
   57 A=(YROT(L)-YROT(L-1))/(XROT(L)-XROT(L-1))                     
      B=(XROT(L-1)*YROT(L)-XROT(L)*YROT(L-1))/(XROT(L-1)-XROT(L)) 
      RESFAC=A*EN+B
# USE 30% FOR RESFAC
      RESFAC=RESFAC*0.3  
# BORN ROTATIONAL X-SEC SUM IN RESONANCE REGION = 0.249
      RESFAC=1.0+RESFAC/0.249  
#  ROT 0-2
      if(EN <= EIN(39):
) GO TO 80
      QIN(39,I)=FROT0*QBK*math.sqrt(1.0-EIN(39)/EN)*2.0/3.0
      QIN(39,I)=QIN(39,I)*RESFAC
      PEQIN(39,I)=0.0
      if(NANISO == 2):
 PEQIN(39,I)=0.0
# ROT 1-3 AND HIGHER
      DO 58 K=40,76
      AJ=float(K-39) 
      if(EN <= EIN[K]:
) GO TO 80
      QIN(K,I)=PJ(K-39)*QBK*math.sqrt(1.0-EIN[K]/EN)*(AJ+2.0)*(AJ+1.0)/((2.0*AJ+3.0)*(2.0*AJ+1.0))
# SET ANGULAR  DISTRIBUTION ISOTROPIC
      PEQIN(K,I)=0.50
      if(NANISO == 2):
 PEQIN(K,I)=0.00
   58 QIN(K,I)=QIN(K,I)*RESFAC    
#  FORCE ROTATIONAL X-SEC TO FALL AT SAME RATE AS THE
#  ELASTIC X-SECTION ABOVE 5.0 EV
      if(EN < 5.0):
 GO TO 80
      ASCALE=QMOM/8.90D-16
      DO 70 K=1,76
   70 QIN(K,I)=QIN(K,I)*ASCALE
   80 CONTINUE
#---------------------------------------------------------------------  
#  VIBRATIONAL AND EXCITATION X-SECTIONS         
#--------------------------------------------------------------------- 
#  V1 SUPERELASTIC 
      QIN(77,I)=0.0
      PEQIN(77,I)=0.5
      if(NANISO == 2):
 PEQIN(77,I)=0.0
      if(EN <= 0.0):
 GO TO 87
      if((EN-EIN(77):
) > XVB1(NVIB1)) GO TO 861                    
      DO 85 J=2,NVIB1                                                   
      if((EN-EIN(77):
) <= XVB1[J]) GO TO 86                           
   85 CONTINUE                                                          
      J=NVIB1                                                           
   86 A=(YVB1[J]-YVB1(J-1))/(XVB1[J]-XVB1(J-1))                     
      B=(XVB1(J-1)*YVB1[J]-XVB1[J]*YVB1(J-1))/(XVB1(J-1)-XVB1[J]) 
      QIN(77,I)=(EN-EIN(77))*(A*(EN-EIN(77))+B)/EN
      GO TO 862
  861 QIN(77,I)=(EN-EIN(77))*YVB1(NVIB1)*(XVB1(NVIB1)/(EN*EN)) 
  862 QIN(77,I)=APOPV1*QIN(77,I)*1.D-16        
   87 CONTINUE
#  V1  
      QIN(78,I)=0.0                                                     
      if(EN <= EIN(78):
) GO TO 110
      if(EN > XVB1(NVIB1):
) GO TO 101                                
      DO 90 J=2,NVIB1                                                   
      if(EN <= XVB1[J]:
) GO TO 100                                      
   90 CONTINUE                                                          
      J=NVIB1                                                           
  100 A=(YVB1[J]-YVB1(J-1))/(XVB1[J]-XVB1(J-1))                     
      B=(XVB1(J-1)*YVB1[J]-XVB1[J]*YVB1(J-1))/(XVB1(J-1)-XVB1[J]) 
      QIN(78,I)=APOPGS*(A*EN+B)*1.D-16   
      GO TO 110
  101 QIN(78,I)=APOPGS*YVB1(NVIB1)*(XVB1(NVIB1)/EN)*1.D-16            
  110 CONTINUE
#  2V1                                                                  
      QIN(79,I)=0.0                                
      if(EN <= EIN(79):
) GO TO 140                           
      if(EN > XVB2(NVIB2):
) GO TO 131            
      DO 120 J=2,NVIB2                                                  
      if(EN <= XVB2[J]:
) GO TO 130                                      
  120 CONTINUE                                                          
      J=NVIB2                                                           
  130 A=(YVB2[J]-YVB2(J-1))/(XVB2[J]-XVB2(J-1))                     
      B=(XVB2(J-1)*YVB2[J]-XVB2[J]*YVB2(J-1))/(XVB2(J-1)-XVB2[J]) 
      QIN(79,I)=APOPGS*(A*EN+B)*1.D-16
      GO TO 140  
  131 QIN(79,I)=APOPGS*YVB2(NVIB2)*(XVB2(NVIB2)/EN)*1.D-16             
  140 CONTINUE                           
#  3V1                                                       
      QIN(80,I)=0.0                                                    
      if(EN <= EIN(80):
) GO TO 170                           
      if(EN > XVB3(NVIB3):
) GO TO 161            
      DO 150 J=2,NVIB3                                                  
      if(EN <= XVB3[J]:
) GO TO 160                                      
  150 CONTINUE                                                          
      J=NVIB3                                                           
  160 A=(YVB3[J]-YVB3(J-1))/(XVB3[J]-XVB3(J-1))                     
      B=(XVB3(J-1)*YVB3[J]-XVB3[J]*YVB3(J-1))/(XVB3(J-1)-XVB3[J]) 
      QIN(80,I)=APOPGS*(A*EN+B)*1.D-16
      GO TO 170
  161 QIN(80,I)=APOPGS*YVB3(NVIB3)*(XVB3(NVIB3)/EN)*1.D-16           
  170 CONTINUE                       
# 4V1                                                               
      QIN(81,I)=0.0                                           
      if(EN <= EIN(81):
) GO TO 200                               
      if(EN > XVB4(NVIB4):
) GO TO 191        
      DO 180 J=2,NVIB4                                                  
      if(EN <= XVB4[J]:
) GO TO 190                                      
  180 CONTINUE                                                          
      J=NVIB4                                                           
  190 A=(YVB4[J]-YVB4(J-1))/(XVB4[J]-XVB4(J-1))                     
      B=(XVB4(J-1)*YVB4[J]-XVB4[J]*YVB4(J-1))/(XVB4(J-1)-XVB4[J]) 
      QIN(81,I)=APOPGS*(A*EN+B)*1.D-16
      GO TO 200
  191 QIN(81,I)=APOPGS*YVB4(NVIB4)*(XVB4(NVIB4)/EN)*1.D-16            
  200 CONTINUE                               
# 5V1                                                                  
      QIN(82,I)=0.0                                          
      if(EN <= EIN(82):
) GO TO 230                              
      if(EN > XVB5(NVIB5):
) GO TO 221         
      DO 210 J=2,NVIB5                                                  
      if(EN <= XVB5[J]:
) GO TO 220                                      
  210 CONTINUE                                                          
      J=NVIB5                                                           
  220 A=(YVB5[J]-YVB5(J-1))/(XVB5[J]-XVB5(J-1))                     
      B=(XVB5(J-1)*YVB5[J]-XVB5[J]*YVB5(J-1))/(XVB5(J-1)-XVB5[J]) 
      QIN(82,I)=APOPGS*(A*EN+B)*1.D-16
      GO TO 230
  221 QIN(82,I)=APOPGS*YVB5(NVIB5)*(XVB5(NVIB5)/EN)*1.D-16           
  230 CONTINUE                       
# 6V1                                                                   
      QIN(83,I)=0.0                                                     
      if(EN <= EIN(83):
) GO TO 260                               
      if(EN > XVB6(NVIB6):
) GO TO 251        
      DO 240 J=2,NVIB6                                                  
      if(EN <= XVB6[J]:
) GO TO 250                                      
  240 CONTINUE                                                          
      J=NVIB6                                                           
  250 A=(YVB6[J]-YVB6(J-1))/(XVB6[J]-XVB6(J-1))                     
      B=(XVB6(J-1)*YVB6[J]-XVB6[J]*YVB6(J-1))/(XVB6(J-1)-XVB6[J]) 
      QIN(83,I)=APOPGS*(A*EN+B)*1.D-16
      GO TO 260
  251 QIN(83,I)=APOPGS*YVB6(NVIB6)*(XVB6(NVIB6)/EN)*1.D-16         
  260 CONTINUE 
# 7V1                                                                   
      QIN(84,I)=0.0                                                     
      if(EN <= EIN(84):
) GO TO 330                              
      if(EN > XVB7(NVIB7):
) GO TO 321         
      DO 310 J=2,NVIB7                                                  
      if(EN <= XVB7[J]:
) GO TO 320                                      
  310 CONTINUE                                                          
      J=NVIB7                                                           
  320 A=(YVB7[J]-YVB7(J-1))/(XVB7[J]-XVB7(J-1))                     
      B=(XVB7(J-1)*YVB7[J]-XVB7[J]*YVB7(J-1))/(XVB7(J-1)-XVB7[J]) 
      QIN(84,I)=APOPGS*(A*EN+B)*1.D-16
      GO TO 330
  321 QIN(84,I)=APOPGS*YVB7(NVIB7)*(XVB7(NVIB7)/EN)*1.D-16        
  330 CONTINUE                                                          
# 8V1                                                                   
      QIN(85,I)=0.0                                                     
      if(EN <= EIN(85):
) GO TO 360                                 
      if(EN > XVB8(NVIB8):
) GO TO 351      
      DO 340 J=2,NVIB8                                                  
      if(EN <= XVB8[J]:
) GO TO 350                                      
  340 CONTINUE                                                          
      J=NVIB8                                                           
  350 A=(YVB8[J]-YVB8(J-1))/(XVB8[J]-XVB8(J-1))                     
      B=(XVB8(J-1)*YVB8[J]-XVB8[J]*YVB8(J-1))/(XVB8(J-1)-XVB8[J]) 
      QIN(85,I)=APOPGS*(A*EN+B)*1.D-16
      GO TO 360
  351 QIN(85,I)=APOPGS*YVB8(NVIB8)*(XVB8(NVIB8)/EN)*1.D-16         
  360 CONTINUE 
# 9V1                                                                   
      QIN(86,I)=0.0                                                     
      if(EN <= EIN(86):
) GO TO 2030                              
      if(EN > XVB9(NVIB9):
) GO TO 2021        
      DO 2010 J=2,NVIB9                                           
      if(EN <= XVB9[J]:
) GO TO 2020                                     
 2010 CONTINUE                                                          
      J=NVIB9                                                           
 2020 A=(YVB9[J]-YVB9(J-1))/(XVB9[J]-XVB9(J-1))                     
      B=(XVB9(J-1)*YVB9[J]-XVB9[J]*YVB9(J-1))/(XVB9(J-1)-XVB9[J]) 
      QIN(86,I)=APOPGS*(A*EN+B)*1.D-16
      GO TO 2030
 2021 QIN(86,I)=APOPGS*YVB9(NVIB9)*(XVB9(NVIB9)/EN)*1.D-16        
 2030 CONTINUE 
# 10V1                                                                  
      QIN(87,I)=0.0                                                     
      if(EN <= EIN(87):
) GO TO 2060                               
      if(EN > XVB10(NVIB10):
) GO TO 2051       
      DO 2040 J=2,NVIB10                                              
      if(EN <= XVB10[J]:
) GO TO 2050                                     
 2040 CONTINUE                                                          
      J=NVIB10                                                          
 2050 A=(YVB10[J]-YVB10(J-1))/(XVB10[J]-XVB10(J-1))                     
      B=(XVB10(J-1)*YVB10[J]-XVB10[J]*YVB10(J-1))/(XVB10(J-1)-XVB10[J]) 
      QIN(87,I)=APOPGS*(A*EN+B)*1.D-16  
      GO TO 2060
 2051 QIN(87,I)=APOPGS*YVB10(NVIB10)*(XVB10(NVIB10)/EN)*1.D-16   
 2060 CONTINUE 
# 11V1                                                                  
      QIN(88,I)=0.0                                                     
      if(EN <= EIN(88):
) GO TO 2130                        
      if(EN > XVB11(NVIB11):
) GO TO 2121              
      DO 2110 J=2,NVIB11                                              
      if(EN <= XVB11[J]:
) GO TO 2120                                     
 2110 CONTINUE                                                          
      J=NVIB11                                                          
 2120 A=(YVB11[J]-YVB11(J-1))/(XVB11[J]-XVB11(J-1))                     
      B=(XVB11(J-1)*YVB11[J]-XVB11[J]*YVB11(J-1))/(XVB11(J-1)-XVB11[J]) 
      QIN(88,I)=APOPGS*(A*EN+B)*1.D-16  
      GO TO 2130
 2121 QIN(88,I)=APOPGS*YVB11(NVIB11)*(XVB11(NVIB11)/EN)*1.D-16    
 2130 CONTINUE 
# 12V1                                                           
      QIN(89,I)=0.0                                                     
      if(EN <= EIN(89):
) GO TO 2160                                
      if(EN > XVB12(NVIB12):
) GO TO 2151      
      DO 2140 J=2,NVIB12                                              
      if(EN <= XVB12[J]:
) GO TO 2150                                     
 2140 CONTINUE                                                          
      J=NVIB12                                                          
 2150 A=(YVB12[J]-YVB12(J-1))/(XVB12[J]-XVB12(J-1))                     
      B=(XVB12(J-1)*YVB12[J]-XVB12[J]*YVB12(J-1))/(XVB12(J-1)-XVB12[J]) 
      QIN(89,I)=APOPGS*(A*EN+B)*1.D-16  
      GO TO 2160
 2151 QIN(89,I)=APOPGS*YVB12(NVIB12)*(XVB12(NVIB12)/EN)*1.D-16   
 2160 CONTINUE 
# 13V1                                                                  
      QIN(90,I)=0.0                                                     
      if(EN <= EIN(90):
) GO TO 2230                               
      if(EN > XVB13(NVIB13):
) GO TO 2221       
      DO 2210 J=2,NVIB13                                              
      if(EN <= XVB13[J]:
) GO TO 2220                                     
 2210 CONTINUE                                                          
      J=NVIB13                                                          
 2220 A=(YVB13[J]-YVB13(J-1))/(XVB13[J]-XVB13(J-1))                     
      B=(XVB13(J-1)*YVB13[J]-XVB13[J]*YVB13(J-1))/(XVB13(J-1)-XVB13[J]) 
      QIN(90,I)=APOPGS*(A*EN+B)*1.D-16  
      GO TO 2230
 2221 QIN(90,I)=APOPGS*YVB13(NVIB13)*(XVB13(NVIB13)/EN)*1.D-16      
 2230 CONTINUE 
# 14V1                                                                  
      QIN(91,I)=0.0                                                     
      if(EN <= EIN(91):
) GO TO 2260                                  
      if(EN > XVB14(NVIB14):
) GO TO 2251    
      DO 2240 J=2,NVIB14                                              
      if(EN <= XVB14[J]:
) GO TO 2250                                     
 2240 CONTINUE                                                          
      J=NVIB14                                                          
 2250 A=(YVB14[J]-YVB14(J-1))/(XVB14[J]-XVB14(J-1))                     
      B=(XVB14(J-1)*YVB14[J]-XVB14[J]*YVB14(J-1))/(XVB14(J-1)-XVB14[J]) 
      QIN(91,I)=APOPGS*(A*EN+B)*1.D-16  
      GO TO 2260
 2251 QIN(91,I)=APOPGS*YVB14(NVIB14)*(XVB14(NVIB14)/EN)*1.D-16     
 2260 CONTINUE 
# 15V1                                                                  
      QIN(92,I)=0.0                                                     
      if(EN <= EIN(92):
) GO TO 2330                                 
      if(EN > XVB15(NVIB15):
) GO TO 2321     
      DO 2310 J=2,NVIB15                                              
      if(EN <= XVB15[J]:
) GO TO 2320                                     
 2310 CONTINUE                                                          
      J=NVIB15                                                          
 2320 A=(YVB15[J]-YVB15(J-1))/(XVB15[J]-XVB15(J-1))                     
      B=(XVB15(J-1)*YVB15[J]-XVB15[J]*YVB15(J-1))/(XVB15(J-1)-XVB15[J]) 
      QIN(92,I)=APOPGS*(A*EN+B)*1.D-16  
      GO TO 2330
 2321 QIN(92,I)=APOPGS*YVB15(NVIB15)*(XVB15(NVIB15)/EN)*1.D-16   
 2330 CONTINUE
# SET ROTATIONAL AND VIBRATIONAL ANGULAR DISTRIBUTIONS ( IF KIN NE 0 )
      DO 2440 K=1,92
      PEQIN(K,I)=0.5
      if(NANISO == 2):
 PEQIN(K,I)=0.0
      if(EN <= 3.0*abs(EIN[K]:
)) GO TO 2440
      if(NANISO > 0):
 PEQIN(K,I)=PEQEL(2,(I-IOFFN[K]))
 2440 CONTINUE
#  
# A3SIGMA (V=0-4)  
      QIN(93,I)=0.0 
      PEQIN(93,I)=0.5
      if(NANISO == 2):
 PEQIN(93,I)=0.0
      if(EN <= EIN(93):
) GO TO 450                      
      if(EN > XTRP1(NTRP1):
) GO TO 445                 
      DO 430 J=2,NTRP1                                                  
      if(EN <= XTRP1[J]:
) GO TO 440                                      
  430 CONTINUE                                                          
      J=NTRP1                                                           
  440 A=(YTRP1[J]-YTRP1(J-1))/(XTRP1[J]-XTRP1(J-1))                     
      B=(XTRP1(J-1)*YTRP1[J]-XTRP1[J]*YTRP1(J-1))/(XTRP1(J-1)-XTRP1[J]) 
      QIN(93,I)=(A*EN+B)*1.D-16
      A=(YTP1M[J]-YTP1M(J-1))/(XTRP1[J]-XTRP1(J-1))                     
      B=(XTRP1(J-1)*YTP1M[J]-XTRP1[J]*YTP1M(J-1))/(XTRP1(J-1)-XTRP1[J]) 
      RAT=A*EN+B
      GO TO 446
  445 QIN(93,I)=YTRP1(NTRP1)*(XTRP1(NTRP1)/EN)**2*1.D-16
      RAT=YTP1M(NTRP1)*(XTRP1(NTRP1)/EN)
  446 if(EN <= (3.0*EIN(93))) GO TO 450
      if(NANISO == 1):
 PEQIN(93,I)=1.5-RAT
      if(NANISO == 2):
 PEQIN(93,I)=PEQEL(2,(I-IOFFN(93)))
  450 CONTINUE                                                          
# A3SIGMA (V=5-9)                                     
      QIN(94,I)=0.0 
      PEQIN(94,I)=0.5 
      if(NANISO == 2):
 PEQIN(94,I)=0.0                         
      if(EN <= EIN(94):
) GO TO 480  
      if(EN > XTRP2(NTRP2):
) GO TO 475                               
      DO 460 J=2,NTRP2                                                  
      if(EN <= XTRP2[J]:
) GO TO 470                                      
  460 CONTINUE                                                          
      J=NTRP2                                                           
  470 A=(YTRP2[J]-YTRP2(J-1))/(XTRP2[J]-XTRP2(J-1))                     
      B=(XTRP2(J-1)*YTRP2[J]-XTRP2[J]*YTRP2(J-1))/(XTRP2(J-1)-XTRP2[J]) 
      QIN(94,I)=(A*EN+B)*1.D-16
      A=(YTP2M[J]-YTP2M(J-1))/(XTRP2[J]-XTRP2(J-1))                     
      B=(XTRP2(J-1)*YTP2M[J]-XTRP2[J]*YTP2M(J-1))/(XTRP2(J-1)-XTRP2[J]) 
      RAT=A*EN+B
      GO TO 476
  475 QIN(94,I)=YTRP2(NTRP2)*(XTRP2(NTRP2)/EN)**2*1.D-16
      RAT=YTP2M(NTRP2)*(XTRP2(NTRP2)/EN)
  476 if(EN <= (3.0*EIN(94))) GO TO 480
      if(NANISO == 1):
 PEQIN(94,I)=1.5-RAT
      if(NANISO == 2):
 PEQIN(94,I)=PEQEL(2,(I-IOFFN(94)))
  480 CONTINUE                                                          
# B3PI (V=0-3)                                  
      QIN(95,I)=0.0 
      PEQIN(95,I)=0.5                      
      if(NANISO == 2):
 PEQIN(95,I)=0.0                            
      if(EN <= EIN(95):
) GO TO 510
      if(EN > XTRP3(NTRP3):
) GO TO 505                             
      DO 490 J=2,NTRP3                                                  
      if(EN <= XTRP3[J]:
) GO TO 500                                      
  490 CONTINUE                                                          
      J=NTRP3                                                           
  500 A=(YTRP3[J]-YTRP3(J-1))/(XTRP3[J]-XTRP3(J-1))                     
      B=(XTRP3(J-1)*YTRP3[J]-XTRP3[J]*YTRP3(J-1))/(XTRP3(J-1)-XTRP3[J]) 
      QIN(95,I)=(A*EN+B)*1.D-16                     
      A=(YTP3M[J]-YTP3M(J-1))/(XTRP3[J]-XTRP3(J-1))                     
      B=(XTRP3(J-1)*YTP3M[J]-XTRP3[J]*YTP3M(J-1))/(XTRP3(J-1)-XTRP3[J]) 
      RAT=A*EN+B
      GO TO 506
  505 QIN(95,I)=YTRP3(NTRP3)*(XTRP3(NTRP3)/EN)**2*1.D-16
      RAT=YTP3M(NTRP3)*(XTRP3(NTRP3)/EN)
  506 if(EN <= (3.0*EIN(95))) GO TO 510
      if(NANISO == 1):
 PEQIN(95,I)=1.5-RAT
      if(NANISO == 2):
 PEQIN(95,I)=PEQEL(2,(I-IOFFN(95)))
  510 CONTINUE                                                          
# W3DELTA  (V=0-5)                    
      QIN(96,I)=0.0  
      PEQIN(96,I)=0.5 
      if(NANISO == 2):
 PEQIN(96,I)=0.0                            
      if(EN <= EIN(96):
) GO TO 540                       
      if(EN > XTRP4(NTRP4):
) GO TO 535                
      DO 520 J=2,NTRP4                                                  
      if(EN <= XTRP4[J]:
) GO TO 530                                      
  520 CONTINUE                                                          
      J=NTRP4                                                           
  530 A=(YTRP4[J]-YTRP4(J-1))/(XTRP4[J]-XTRP4(J-1))                     
      B=(XTRP4(J-1)*YTRP4[J]-XTRP4[J]*YTRP4(J-1))/(XTRP4(J-1)-XTRP4[J]) 
      QIN(96,I)=(A*EN+B)*1.D-16
      A=(YTP4M[J]-YTP4M(J-1))/(XTRP4[J]-XTRP4(J-1))                     
      B=(XTRP4(J-1)*YTP4M[J]-XTRP4[J]*YTP4M(J-1))/(XTRP4(J-1)-XTRP4[J]) 
      RAT=A*EN+B
      GO TO 536
  535 QIN(96,I)=YTRP4(NTRP4)*(XTRP4(NTRP4)/EN)**2*1.D-16
      RAT=YTP4M(NTRP4)*(XTRP4(NTRP4)/EN)
  536 if(EN <= (3.0*EIN(96))) GO TO 540
      if(NANISO == 1):
 PEQIN(96,I)=1.5-RAT
      if(NANISO == 2):
 PEQIN(96,I)=PEQEL(2,(I-IOFFN(96)))
  540 CONTINUE                                                          
# A3SIGMA  (V=10-21)                      
      QIN(97,I)=0.0      
      PEQIN(97,I)=0.5    
      if(NANISO == 2):
 PEQIN(97,I)=0.0                      
      if(EN <= EIN(97):
) GO TO 570       
      if(EN > XTRP5(NTRP5):
) GO TO 565                                
      DO 550 J=2,NTRP5                                                  
      if(EN <= XTRP5[J]:
) GO TO 560                                      
  550 CONTINUE                                                          
      J=NTRP5                                                           
  560 A=(YTRP5[J]-YTRP5(J-1))/(XTRP5[J]-XTRP5(J-1))                     
      B=(XTRP5(J-1)*YTRP5[J]-XTRP5[J]*YTRP5(J-1))/(XTRP5(J-1)-XTRP5[J]) 
      QIN(97,I)=(A*EN+B)*1.D-16                   
      A=(YTP5M[J]-YTP5M(J-1))/(XTRP5[J]-XTRP5(J-1))                     
      B=(XTRP5(J-1)*YTP5M[J]-XTRP5[J]*YTP5M(J-1))/(XTRP5(J-1)-XTRP5[J]) 
      RAT=A*EN+B
      GO TO 566
  565 QIN(97,I)=YTRP5(NTRP5)*(XTRP5(NTRP5)/EN)**2*1.D-16
      RAT=YTP5M(NTRP5)*(XTRP5(NTRP5)/EN)
  566 if(EN <= (3.0*EIN(97))) GO TO 570
      if(NANISO == 1):
 PEQIN(97,I)=1.5-RAT
      if(NANISO == 2):
 PEQIN(97,I)=PEQEL(2,(I-IOFFN(97)))
  570 CONTINUE                                                          
# B3PI (V=4-16)                              
      QIN(98,I)=0.0  
      PEQIN(98,I)=0.5  
      if(NANISO == 2):
 PEQIN(98,I)=0.0                              
      if(EN <= EIN(98):
) GO TO 600       
      if(EN > XTRP6(NTRP6):
) GO TO 595                                
      DO 580 J=2,NTRP6                                                  
      if(EN <= XTRP6[J]:
) GO TO 590                                      
  580 CONTINUE                                                          
      J=NTRP6                                                           
  590 A=(YTRP6[J]-YTRP6(J-1))/(XTRP6[J]-XTRP6(J-1))                     
      B=(XTRP6(J-1)*YTRP6[J]-XTRP6[J]*YTRP6(J-1))/(XTRP6(J-1)-XTRP6[J]) 
      QIN(98,I)=(A*EN+B)*1.D-16                               
      A=(YTP6M[J]-YTP6M(J-1))/(XTRP6[J]-XTRP6(J-1))                     
      B=(XTRP6(J-1)*YTP6M[J]-XTRP6[J]*YTP6M(J-1))/(XTRP6(J-1)-XTRP6[J]) 
      RAT=A*EN+B
      GO TO 596
  595 QIN(98,I)=YTRP6(NTRP6)*(XTRP6(NTRP6)/EN)**2*1.D-16
      RAT=YTP6M(NTRP6)*(XTRP6(NTRP6)/EN)
  596 if(EN <= (3.0*EIN(98))) GO TO 600
      if(NANISO == 1):
 PEQIN(98,I)=1.5-RAT
      if(NANISO == 2):
 PEQIN(98,I)=PEQEL(2,(I-IOFFN(98)))
  600 CONTINUE                                                          
# W3DEL (V=6-10)                             
      QIN(99,I)=0.0
      PEQIN(99,I)=0.5
      if(NANISO == 2):
 PEQIN(99,I)=0.0                              
      if(EN <= EIN(99):
) GO TO 603       
      if(EN > XTRP7(NTRP7):
) GO TO 6025                                
      DO 601 J=2,NTRP7                                                  
      if(EN <= XTRP7[J]:
) GO TO 602                                      
  601 CONTINUE                                                          
      J=NTRP7                                                           
  602 A=(YTRP7[J]-YTRP7(J-1))/(XTRP7[J]-XTRP7(J-1))                     
      B=(XTRP7(J-1)*YTRP7[J]-XTRP7[J]*YTRP7(J-1))/(XTRP7(J-1)-XTRP7[J]) 
      QIN(99,I)=(A*EN+B)*1.D-16                               
      A=(YTP7M[J]-YTP7M(J-1))/(XTRP7[J]-XTRP7(J-1))                     
      B=(XTRP7(J-1)*YTP7M[J]-XTRP7[J]*YTP7M(J-1))/(XTRP7(J-1)-XTRP7[J])
      RAT=A*EN+B
      GO TO 6026
 6025 QIN(99,I)=YTRP7(NTRP7)*(XTRP7(NTRP7)/EN)**2*1.D-16
      RAT=YTP7M(NTRP7)*(XTRP7(NTRP7)/EN)
 6026 if(EN <= (3.0*EIN(99))) GO TO 603
      if(NANISO == 1):
 PEQIN(99,I)=1.5-RAT
      if(NANISO == 2):
 PEQIN(99,I)=PEQEL(2,(I-IOFFN(99)))
  603 CONTINUE                                                          
# A1PI (V=0-3)                                  
      QIN(100,I)=0.0  
      PEQIN(100,I)=0.5    
      if(NANISO == 2):
 PEQIN(100,I)=0.0                                
      if(EN <= EIN(100):
) GO TO 630      
      if(EN > XSNG1(NSNG1):
) GO TO 625                                
      DO 610 J=2,NSNG1                                                  
      if(EN <= XSNG1[J]:
) GO TO 620                                      
  610 CONTINUE                                                          
      J=NSNG1                                                           
  620 A=(YSNG1[J]-YSNG1(J-1))/(XSNG1[J]-XSNG1(J-1))                     
      B=(XSNG1(J-1)*YSNG1[J]-XSNG1[J]*YSNG1(J-1))/(XSNG1(J-1)-XSNG1[J]) 
      QIN(100,I)=(A*EN+B)*1.D-16                           
      A=(YSG1M[J]-YSG1M(J-1))/(XSNG1[J]-XSNG1(J-1))                     
      B=(XSNG1(J-1)*YSG1M[J]-XSNG1[J]*YSG1M(J-1))/(XSNG1(J-1)-XSNG1[J]) 
      RAT=A*EN+B
      GO TO 626
  625 QIN(100,I)=YSNG1(NSNG1)*(XSNG1(NSNG1)/EN)**1.5*1.D-16
      RAT=YSG1M(NSNG1)*(XSNG1(NSNG1)/EN)
  626 if(EN <= (3.0*EIN(100))) GO TO 630
      if(NANISO == 1):
 PEQIN(100,I)=1.5-RAT
      if(NANISO == 2):
 PEQIN(100,I)=PEQEL(2,(I-IOFFN(100)))
  630 CONTINUE                                                          
# B#3SIG (V=0-6)                             
      QIN(101,I)=0.0  
      PEQIN(101,I)=0.5 
      if(NANISO == 2):
 PEQIN(101,I)=0.0                       
      if(EN <= EIN(101):
) GO TO 633  
      if(EN > XTRP8(NTRP8):
) GO TO 6325                        
      DO 631 J=2,NTRP8                                                  
      if(EN <= XTRP8[J]:
) GO TO 632                                      
  631 CONTINUE                                                          
      J=NTRP8                                                           
  632 A=(YTRP8[J]-YTRP8(J-1))/(XTRP8[J]-XTRP8(J-1))                     
      B=(XTRP8(J-1)*YTRP8[J]-XTRP8[J]*YTRP8(J-1))/(XTRP8(J-1)-XTRP8[J]) 
      QIN(101,I)=(A*EN+B)*1.D-16                                
      A=(YTP8M[J]-YTP8M(J-1))/(XTRP8[J]-XTRP8(J-1))                     
      B=(XTRP8(J-1)*YTP8M[J]-XTRP8[J]*YTP8M(J-1))/(XTRP8(J-1)-XTRP8[J]) 
      RAT=A*EN+B
      GO TO 6326
 6325 QIN(101,I)=YTRP8(NTRP8)*(XTRP8(NTRP8)/EN)**2*1.D-16
      RAT=YTP8M(NTRP8)*(XTRP8(NTRP8)/EN)
 6326 if(EN <= (3.0*EIN(101))) GO TO 633
      if(NANISO == 1):
 PEQIN(101,I)=1.5-RAT
      if(NANISO == 2):
 PEQIN(101,I)=PEQEL(2,(I-IOFFN(101)))
  633 CONTINUE                                                          
# A#1SIG (V=0-6)                      
      QIN(102,I)=0.0
      PEQIN(102,I)=0.5    
      if(NANISO == 2):
 PEQIN(102,I)=0.0                          
      if(EN <= EIN(102):
) GO TO 660      
      if(EN > XSNG2(NSNG2):
) GO TO 655                                
      DO 640 J=2,NSNG2                                                  
      if(EN <= XSNG2[J]:
) GO TO 650                                      
  640 CONTINUE                                                          
      J=NSNG2                                                           
  650 A=(YSNG2[J]-YSNG2(J-1))/(XSNG2[J]-XSNG2(J-1))                     
      B=(XSNG2(J-1)*YSNG2[J]-XSNG2[J]*YSNG2(J-1))/(XSNG2(J-1)-XSNG2[J]) 
      QIN(102,I)=(A*EN+B)*1.D-16                       
      A=(YSG2M[J]-YSG2M(J-1))/(XSNG2[J]-XSNG2(J-1))                     
      B=(XSNG2(J-1)*YSG2M[J]-XSNG2[J]*YSG2M(J-1))/(XSNG2(J-1)-XSNG2[J])
      RAT=A*EN+B
      GO TO 656
  655 QIN(102,I)=YSNG2(NSNG2)*(XSNG2(NSNG2)/EN)**1.5*1.D-16
      RAT=YSG2M(NSNG2)*(XSNG2(NSNG2)/EN)
  656 if(EN <= (3.0*EIN(102))) GO TO 660
      if(NANISO == 1):
 PEQIN(102,I)=1.5-RAT
      if(NANISO == 2):
 PEQIN(102,I)=PEQEL(2,(I-IOFFN(102)))
  660 CONTINUE                                                          
# W3DEL (V=11-19)                              
      QIN(103,I)=0.0      
      PEQIN(103,I)=0.5 
      if(NANISO == 2):
 PEQIN(103,I)=0.0                         
      if(EN <= EIN(103):
) GO TO 690      
      if(EN > XTRP9(NTRP9):
) GO TO 685                                
      DO 670 J=2,NTRP9                                                  
      if(EN <= XTRP9[J]:
) GO TO 680                                      
  670 CONTINUE                                                          
      J=NTRP9                                                           
  680 A=(YTRP9[J]-YTRP9(J-1))/(XTRP9[J]-XTRP9(J-1))                     
      B=(XTRP9(J-1)*YTRP9[J]-XTRP9[J]*YTRP9(J-1))/(XTRP9(J-1)-XTRP9[J]) 
      QIN(103,I)=(A*EN+B)*1.D-16                            
      A=(YTP9M[J]-YTP9M(J-1))/(XTRP9[J]-XTRP9(J-1))                     
      B=(XTRP9(J-1)*YTP9M[J]-XTRP9[J]*YTP9M(J-1))/(XTRP9(J-1)-XTRP9[J]) 
      RAT=A*EN+B
      GO TO 686
  685 QIN(103,I)=YTRP9(NTRP9)*(XTRP9(NTRP9)/EN)**2*1.D-16
      RAT=YTP9M(NTRP9)*(XTRP9(NTRP9)/EN)
  686 if(EN <= (3.0*EIN(103))) GO TO 690
      if(NANISO == 1):
 PEQIN(103,I)=1.5-RAT
      if(NANISO == 2):
 PEQIN(103,I)=PEQEL(2,(I-IOFFN(103)))
  690 CONTINUE                                                          
# W1DEL (V=0-5)                               
      QIN(104,I)=0.0
      PEQIN(104,I)=0.5 
      if(NANISO == 2):
 PEQIN(104,I)=0.0                             
      if(EN <= EIN(104):
) GO TO 720
      if(EN > XSNG3(NSNG3):
) GO TO 715                               
      DO 700 J=2,NSNG3                                                  
      if(EN <= XSNG3[J]:
) GO TO 710                                      
  700 CONTINUE                                                          
      J=NSNG3                                                           
  710 A=(YSNG3[J]-YSNG3(J-1))/(XSNG3[J]-XSNG3(J-1))                     
      B=(XSNG3(J-1)*YSNG3[J]-XSNG3[J]*YSNG3(J-1))/(XSNG3(J-1)-XSNG3[J]) 
      QIN(104,I)=(A*EN+B)*1.D-16                                  
      A=(YSG3M[J]-YSG3M(J-1))/(XSNG3[J]-XSNG3(J-1))                     
      B=(XSNG3(J-1)*YSG3M[J]-XSNG3[J]*YSG3M(J-1))/(XSNG3(J-1)-XSNG3[J])
      RAT=A*EN+B
      GO TO 716
  715 QIN(104,I)=YSNG3(NSNG3)*(XSNG3(NSNG3)/EN)**1.5*1.D-16
      RAT=YSG3M(NSNG3)*(XSNG3(NSNG3)/EN)
  716 if(EN <= (3.0*EIN(104))) GO TO 720
      if(NANISO == 1):
 PEQIN(104,I)=1.5-RAT
      if(NANISO == 2):
 PEQIN(104,I)=PEQEL(2,(I-IOFFN(104)))
  720 CONTINUE                                                          
# A1PI (V=4-15)                                 
      QIN(105,I)=0.0      
      PEQIN(105,I)=0.5 
      if(NANISO == 2):
 PEQIN(105,I)=0.0                         
      if(EN <= EIN(105):
) GO TO 723      
      if(EN > XSNG4(NSNG4):
) GO TO 7225                               
      DO 721 J=2,NSNG4                                                  
      if(EN <= XSNG4[J]:
) GO TO 722                                      
  721 CONTINUE                                                          
      J=NSNG4                                                           
  722 A=(YSNG4[J]-YSNG4(J-1))/(XSNG4[J]-XSNG4(J-1))                     
      B=(XSNG4(J-1)*YSNG4[J]-XSNG4[J]*YSNG4(J-1))/(XSNG4(J-1)-XSNG4[J]) 
      QIN(105,I)=(A*EN+B)*1.D-16                             
      A=(YSG4M[J]-YSG4M(J-1))/(XSNG4[J]-XSNG4(J-1))                     
      B=(XSNG4(J-1)*YSG4M[J]-XSNG4[J]*YSG4M(J-1))/(XSNG4(J-1)-XSNG4[J]) 
      RAT=A*EN+B
      GO TO 7226
 7225 QIN(105,I)=YSNG4(NSNG4)*(XSNG4(NSNG4)/EN)**1.5*1.D-16
      RAT=YSG4M(NSNG4)*(XSNG4(NSNG4)/EN)
 7226 if(EN <= (3.0*EIN(105))) GO TO 723
      if(NANISO == 1):
 PEQIN(105,I)=1.5-RAT
      if(NANISO == 2):
 PEQIN(105,I)=PEQEL(2,(I-IOFFN(105)))
  723 CONTINUE                                                          
# B#3SIG   (V=7-18)                             
      QIN(106,I)=0.0
      PEQIN(106,I)=0.5 
      if(NANISO == 2):
 PEQIN(106,I)=0.0                              
      if(EN <= EIN(106):
) GO TO 750      
      if(EN > XTRP10(NTRP10):
) GO TO 745                               
      DO 730 J=2,NTRP10                                               
      if(EN <= XTRP10[J]:
) GO TO 740                                  
  730 CONTINUE                                                          
      J=NTRP10                                                        
  740 A=(YTRP10[J]-YTRP10(J-1))/(XTRP10[J]-XTRP10(J-1))               
      B=(XTRP10(J-1)*YTRP10[J]-XTRP10[J]*YTRP10(J-1))/(XTRP10(J-1)-XTRP10[J]) 
      QIN(106,I)=(A*EN+B)*1.D-16                                 
      A=(YTP10M[J]-YTP10M(J-1))/(XTRP10[J]-XTRP10(J-1))               
      B=(XTRP10(J-1)*YTP10M[J]-XTRP10[J]*YTP10M(J-1))/(XTRP10(J-1)-XTRP10[J]) 
      RAT=A*EN+B
      GO TO 746
  745 QIN(106,I)=YTRP10(NTRP10)*(XTRP10(NTRP10)/EN)**2*1.D-16
      RAT=YTP10M(NTRP10)*(XTRP10(NTRP10)/EN)
  746 if(EN <= (3.0*EIN(106))) GO TO 750
      if(NANISO == 1):
 PEQIN(106,I)=1.5-RAT
      if(NANISO == 2):
 PEQIN(106,I)=PEQEL(2,(I-IOFFN(106)))
  750 CONTINUE                                                          
# A#1SIG (V=7-19)                                   
      QIN(107,I)=0.0
      PEQIN(107,I)=0.5   
      if(NANISO == 2):
 PEQIN(107,I)=0.0                                 
      if(EN <= EIN(107):
) GO TO 780          
      if(EN > XSNG5(NSNG5):
) GO TO 771                           
      DO 760 J=2,NSNG5                                                  
      if(EN <= XSNG5[J]:
) GO TO 770                                      
  760 CONTINUE                                                          
      J=NSNG5                                                           
  770 A=(YSNG5[J]-YSNG5(J-1))/(XSNG5[J]-XSNG5(J-1))                     
      B=(XSNG5(J-1)*YSNG5[J]-XSNG5[J]*YSNG5(J-1))/(XSNG5(J-1)-XSNG5[J]) 
      QIN(107,I)=(A*EN+B)*1.D-16                           
      A=(YSG5M[J]-YSG5M(J-1))/(XSNG5[J]-XSNG5(J-1))                     
      B=(XSNG5(J-1)*YSG5M[J]-XSNG5[J]*YSG5M(J-1))/(XSNG5(J-1)-XSNG5[J]) 
      RAT=A*EN+B
      GO TO 772
  771 QIN(107,I)=YSNG5(NSNG5)*(XSNG5(NSNG5)/EN)**1.5*1.D-16
      RAT=YSG5M(NSNG5)*(XSNG5(NSNG5)/EN)
  772 if(EN <= (3.0*EIN(107))) GO TO 780
      if(NANISO == 1):
 PEQIN(107,I)=1.5-RAT
      if(NANISO == 2):
 PEQIN(107,I)=PEQEL(2,(I-IOFFN(107)))
  780 CONTINUE                                                          
# W1DEL (V=6-18)                          
      QIN(108,I)=0.0
      PEQIN(108,I)=0.5     
      if(NANISO == 2):
 PEQIN(108,I)=0.0                              
      if(EN <= EIN(108):
) GO TO 783      
      if(EN > XSNG6(NSNG6):
) GO TO 7825                               
      DO 781 J=2,NSNG6                                               
      if(EN <= XSNG6[J]:
) GO TO 782                                  
  781 CONTINUE                                                          
      J=NSNG6                                                
  782 A=(YSNG6[J]-YSNG6(J-1))/(XSNG6[J]-XSNG6(J-1))               
      B=(XSNG6(J-1)*YSNG6[J]-XSNG6[J]*YSNG6(J-1))/(XSNG6(J-1)-XSNG6[J]) 
      QIN(108,I)=(A*EN+B)*1.D-16                                 
      A=(YSG6M[J]-YSG6M(J-1))/(XSNG6[J]-XSNG6(J-1))               
      B=(XSNG6(J-1)*YSG6M[J]-XSNG6[J]*YSG6M(J-1))/(XSNG6(J-1)-XSNG6[J]) 
      RAT=A*EN+B
      GO TO 7826
 7825 QIN(108,I)=YSNG6(NSNG6)*(XSNG6(NSNG6)/EN)**1.5*1.D-16
      RAT=YSG6M(NSNG6)*(XSNG6(NSNG6)/EN)
 7826 if(EN <= (3.0*EIN(108))) GO TO 783
      if(NANISO == 1):
 PEQIN(108,I)=1.5-RAT
      if(NANISO == 2):
 PEQIN(108,I)=PEQEL(2,(I-IOFFN(108)))
  783 CONTINUE                                                          
# C3PI (V=0-4)                     
      QIN(109,I)=0.0      
      PEQIN(109,I)=0.5     
      if(NANISO == 2):
 PEQIN(109,I)=0.0                     
      if(EN <= EIN(109):
) GO TO 786      
      if(EN > XTRP11(NTRP11):
) GO TO 7855                               
      DO 784 J=2,NTRP11                                               
      if(EN <= XTRP11[J]:
) GO TO 785                                  
  784 CONTINUE                                                          
      J=NTRP11                                                        
  785 A=(YTRP11[J]-YTRP11(J-1))/(XTRP11[J]-XTRP11(J-1))               
      B=(XTRP11(J-1)*YTRP11[J]-XTRP11[J]*YTRP11(J-1))/(XTRP11(J-1)-XTRP11[J]) 
      QIN(109,I)=(A*EN+B)*1.D-16                                 
      A=(YTP11M[J]-YTP11M(J-1))/(XTRP11[J]-XTRP11(J-1))               
      B=(XTRP11(J-1)*YTP11M[J]-XTRP11[J]*YTP11M(J-1))/(XTRP11(J-1)-XTRP11[J]) 
      RAT=A*EN+B
      GO TO 7856
 7855 QIN(109,I)=YTRP11(NTRP11)*(XTRP11(NTRP11)/EN)**2*1.D-16
      RAT=YTP11M(NTRP11)*(XTRP11(NTRP11)/EN)
 7856 if(EN <= (3.0*EIN(109))) GO TO 786
      if(NANISO == 1):
 PEQIN(109,I)=1.5-RAT
      if(NANISO == 2):
 PEQIN(109,I)=PEQEL(2,(I-IOFFN(109)))
  786 CONTINUE                                                          
# E3SIG                                  
      QIN(110,I)=0.0
      PEQIN(110,I)=0.5   
      if(NANISO == 2):
 PEQIN(110,I)=0.0                               
      if(EN <= EIN(110):
) GO TO 789          
      if(EN > XTRP12(NTRP12):
) GO TO 7885                            
      DO 787 J=2,NTRP12                                                
      if(EN <= XTRP12[J]:
) GO TO 788                                    
  787 CONTINUE                                                         
      J=NTRP12                                                         
  788 A=(YTRP12[J]-YTRP12(J-1))/(XTRP12[J]-XTRP12(J-1))                
      B=(XTRP12(J-1)*YTRP12[J]-XTRP12[J]*YTRP12(J-1))/(XTRP12(J-1)-XTRP12[J]) 
      QIN(110,I)=(A*EN+B)*1.D-16                           
      A=(YTP12M[J]-YTP12M(J-1))/(XTRP12[J]-XTRP12(J-1))                
      B=(XTRP12(J-1)*YTP12M[J]-XTRP12[J]*YTP12M(J-1))/(XTRP12(J-1)-XTRP12[J]) 
      RAT=A*EN+B
      GO TO 7886
 7885 QIN(110,I)=YTRP12(NTRP12)*(XTRP12(NTRP12)/EN)**2*1.D-16
      RAT=YTP12M(NTRP12)*(XTRP12(NTRP12)/EN)
 7886 if(EN <= (3.0*EIN(110))) GO TO 789
      if(NANISO == 1):
 PEQIN(110,I)=1.5-RAT
      if(NANISO == 2):
 PEQIN(110,I)=PEQEL(2,(I-IOFFN(110)))
  789 CONTINUE                                                          
# A##1SIG (V=0-1)                      
      QIN(111,I)=0.0
      PEQIN(111,I)=0.5 
      if(NANISO == 2):
 PEQIN(111,I)=0.0                                
      if(EN <= EIN(111):
) GO TO 792 
      if(EN > XSNG7(NSNG7):
) GO TO 7915                              
      DO 790 J=2,NSNG7                                               
      if(EN <= XSNG7[J]:
) GO TO 791                                  
  790 CONTINUE                                                          
      J=NSNG7                                                
  791 A=(YSNG7[J]-YSNG7(J-1))/(XSNG7[J]-XSNG7(J-1))               
      B=(XSNG7(J-1)*YSNG7[J]-XSNG7[J]*YSNG7(J-1))/(XSNG7(J-1)-XSNG7[J]) 
      QIN(111,I)=(A*EN+B)*1.D-16                                 
      A=(YSG7M[J]-YSG7M(J-1))/(XSNG7[J]-XSNG7(J-1))               
      B=(XSNG7(J-1)*YSG7M[J]-XSNG7[J]*YSG7M(J-1))/(XSNG7(J-1)-XSNG7[J])
      RAT=A*EN+B
      GO TO 7916
 7915 QIN(111,I)=YSNG7(NSNG7)*(XSNG7(NSNG7)/EN)**1.5*1.D-16
      RAT=YSG7M(NSNG7)*(XSNG7(NSNG7)/EN)
 7916 if(EN <= (3.0*EIN(111))) GO TO 792
      if(NANISO == 1):
 PEQIN(111,I)=1.5-RAT
      if(NANISO == 2):
 PEQIN(111,I)=PEQEL(2,(I-IOFFN(111)))
  792 CONTINUE                                                          
# B1PI  (V=0-6)                 F=0.1855           
      QIN(112,I)=0.0
      PEQIN(112,I)=0.5        
      if(NANISO == 2):
 PEQIN(112,I)=0.0    
      if(EN <= EIN(112):
) GO TO 795  
      if(EN > XSNG8(NSNG8):
) GO TO 7945                      
      DO 793 J=2,NSNG8                                               
      if(EN <= XSNG8[J]:
) GO TO 794                                  
  793 CONTINUE                                                          
      J=NSNG8                                                
  794 A=(YSNG8[J]-YSNG8(J-1))/(XSNG8[J]-XSNG8(J-1))               
      B=(XSNG8(J-1)*YSNG8[J]-XSNG8[J]*YSNG8(J-1))/(XSNG8(J-1)-XSNG8[J]) 
      QIN(112,I)=(A*EN+B)*1.D-16                                 
      A=(YSG8M[J]-YSG8M(J-1))/(XSNG8[J]-XSNG8(J-1))               
      B=(XSNG8(J-1)*YSG8M[J]-XSNG8[J]*YSG8M(J-1))/(XSNG8(J-1)-XSNG8[J])
      RAT=A*EN+B
      GO TO 7946
# USE BEF SCALING F=0.1855
 7945 QIN(112,I)=.1855/(EIN(112)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(112)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(112)+E(3))
      RAT=YSG8M(NSNG8)*(XSNG8(NSNG8)/EN)
 7946 if(EN <= (3.0*EIN(112))) GO TO 795
      if(NANISO == 1):
 PEQIN(112,I)=1.5-RAT
      if(NANISO == 2):
 PEQIN(112,I)=PEQEL(2,(I-IOFFN(112)))
  795 CONTINUE                                                          
# C#1SIG (V=0-3)                    F=0.150
      QIN(113,I)=0.0      
      PEQIN(113,I)=0.5  
      if(NANISO == 2):
 PEQIN(113,I)=0.0                        
      if(EN <= EIN(113):
) GO TO 798   
      if(EN > XSNG9(NSNG9):
) GO TO 7975                          
      DO 796 J=2,NSNG9                                               
      if(EN <= XSNG9[J]:
) GO TO 797                                  
  796 CONTINUE                                                          
      J=NSNG9                                               
  797 A=(YSNG9[J]-YSNG9(J-1))/(XSNG9[J]-XSNG9(J-1))               
      B=(XSNG9(J-1)*YSNG9[J]-XSNG9[J]*YSNG9(J-1))/(XSNG9(J-1)-XSNG9[J]) 
      QIN(113,I)=(A*EN+B)*1.D-16                                 
      A=(YSG9M[J]-YSG9M(J-1))/(XSNG9[J]-XSNG9(J-1))               
      B=(XSNG9(J-1)*YSG9M[J]-XSNG9[J]*YSG9M(J-1))/(XSNG9(J-1)-XSNG9[J])
      RAT=A*EN+B
      GO TO 7976
# USE BEF SCALING   F=0.15
 7975 QIN(113,I)=.15000/(EIN(113)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(113)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(113)+E(3))
      RAT=YSG9M(NSNG9)*(XSNG9(NSNG9)/EN)
 7976 if(EN <= (3.0*EIN(113))) GO TO 798
      if(NANISO == 1):
 PEQIN(113,I)=1.5-RAT
      if(NANISO == 2):
 PEQIN(113,I)=PEQEL(2,(I-IOFFN(113)))
  798 CONTINUE                                                          
# G 3PI (V=0-3)                          
      QIN(114,I)=0.0
      PEQIN(114,I)=0.5
      if(NANISO == 2):
 PEQIN(114,I)=0.0                                 
      if(EN <= EIN(114):
) GO TO 801      
      if(EN > XTRP13(NTRP13):
) GO TO 8005                              
      DO 799 J=2,NTRP13                                                
      if(EN <= XTRP13[J]:
) GO TO 800                                    
  799 CONTINUE                                                         
      J=NTRP13                                                         
  800 A=(YTRP13[J]-YTRP13(J-1))/(XTRP13[J]-XTRP13(J-1))                
      B=(XTRP13(J-1)*YTRP13[J]-XTRP13[J]*YTRP13(J-1))/(XTRP13(J-1)-XTRP13[J]) 
      QIN(114,I)=(A*EN+B)*1.D-16                           
      A=(YTP13M[J]-YTP13M(J-1))/(XTRP13[J]-XTRP13(J-1))                
      B=(XTRP13(J-1)*YTP13M[J]-XTRP13[J]*YTP13M(J-1))/(XTRP13(J-1)-XTRP13[J]) 
      RAT=A*EN+B
      GO TO 8006
 8005 QIN(114,I)=YTRP13(NTRP13)*(XTRP13(NTRP13)/EN)**1.5*1.D-16
      RAT=YTP13M(NTRP13)*(XTRP13(NTRP13)/EN)
 8006 if(EN <= (3.0*EIN(114))) GO TO 801
      if(NANISO == 1):
 PEQIN(114,I)=1.5-RAT
      if(NANISO == 2):
 PEQIN(114,I)=PEQEL(2,(I-IOFFN(114)))
  801 CONTINUE                                                          
# C3 1PI (V=0-3)                 F=0.15            
      QIN(115,I)=0.0
      PEQIN(115,I)=0.5  
      if(NANISO == 2):
 PEQIN(115,I)=0.0                              
      if(EN <= EIN(115):
) GO TO 804          
      if(EN > XSNG10(NSNG10):
) GO TO 8035                           
      DO 802 J=2,NSNG10                                              
      if(EN <= XSNG10[J]:
) GO TO 803                                  
  802 CONTINUE                                                          
      J=NSNG10                                               
  803 A=(YSNG10[J]-YSNG10(J-1))/(XSNG10[J]-XSNG10(J-1))               
      B=(XSNG10(J-1)*YSNG10[J]-XSNG10[J]*YSNG10(J-1))/(XSNG10(J-1)-XSNG10[J]) 
      QIN(115,I)=(A*EN+B)*1.D-16                                 
      A=(YSG10M[J]-YSG10M(J-1))/(XSNG10[J]-XSNG10(J-1))               
      B=(XSNG10(J-1)*YSG10M[J]-XSNG10[J]*YSG10M(J-1))/(XSNG10(J-1)-XSNG10[J]) 
      RAT=A*EN+B
      GO TO 8036
# USE BEF SCALING
 8035 QIN(115,I)=.1500/(EIN(115)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(115)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(115)+E(3))
      RAT=YSG10M(NSNG10)*(XSNG10(NSNG10)/EN) 
 8036 if(EN <= (3.0*EIN(115))) GO TO 804
      if(NANISO == 1):
 PEQIN(115,I)=1.5-RAT
      if(NANISO == 2):
 PEQIN(115,I)=PEQEL(2,(I-IOFFN(115)))
  804 CONTINUE                                                          
# F 3PI (V=0-3)                          
      QIN(116,I)=0.0      
      PEQIN(116,I)=0.5   
      if(NANISO == 2):
 PEQIN(116,I)=0.0                       
      if(EN <= EIN(116):
) GO TO 807                              
      if(EN > XTRP14(NTRP14):
) GO TO 8065        
      DO 805 J=2,NTRP14                                                
      if(EN <= XTRP14[J]:
) GO TO 806                                    
  805 CONTINUE                                                         
      J=NTRP14                                                         
  806 A=(YTRP14[J]-YTRP14(J-1))/(XTRP14[J]-XTRP14(J-1))                
      B=(XTRP14(J-1)*YTRP14[J]-XTRP14[J]*YTRP14(J-1))/(XTRP14(J-1)-XTRP14[J]) 
      QIN(116,I)=(A*EN+B)*1.D-16                           
      A=(YTP14M[J]-YTP14M(J-1))/(XTRP14[J]-XTRP14(J-1))                
      B=(XTRP14(J-1)*YTP14M[J]-XTRP14[J]*YTP14M(J-1))/(XTRP14(J-1)-XTRP14[J]) 
      RAT=A*EN+B
      GO TO 8066
 8065 QIN(116,I)=YTRP14(NTRP14)*(XTRP14(NTRP14)/EN)**1.5*1.D-16
      RAT=YTP14M(NTRP14)*(XTRP14(NTRP14)/EN)
 8066 if(EN <= (3.0*EIN(116))) GO TO 807
      if(NANISO == 1):
 PEQIN(116,I)=1.5-RAT
      if(NANISO == 2):
 PEQIN(116,I)=PEQEL(2,(I-IOFFN(116)))
  807 CONTINUE                                                          
# B1PI  (V=7-14)                      F=0.0663
      QIN(117,I)=0.0      
      PEQIN(117,I)=0.5 
      if(NANISO == 2):
 PEQIN(117,I)=0.0                         
      if(EN <= EIN(117):
) GO TO 810 
      if(EN > XSNG11(NSNG11):
) GO TO 8095                          
      DO 808 J=2,NSNG11                                              
      if(EN <= XSNG11[J]:
) GO TO 809                                  
  808 CONTINUE                                                          
      J=NSNG11                                               
  809 A=(YSNG11[J]-YSNG11(J-1))/(XSNG11[J]-XSNG11(J-1))               
      B=(XSNG11(J-1)*YSNG11[J]-XSNG11[J]*YSNG11(J-1))/(XSNG11(J-1)-XSNG11[J]) 
      QIN(117,I)=(A*EN+B)*1.D-16                                 
      A=(YSG11M[J]-YSG11M(J-1))/(XSNG11[J]-XSNG11(J-1))               
      B=(XSNG11(J-1)*YSG11M[J]-XSNG11[J]*YSG11M(J-1))/(XSNG11(J-1)-XSNG11[J]) 
      RAT=A*EN+B
      GO TO 8096
# USE BEF SCALING
 8095 QIN(117,I)=.0663/(EIN(117)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(117)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(117)+E(3))
      RAT=YSG11M(NSNG11)*(XSNG11(NSNG11)/EN) 
 8096 if(EN <= (3.0*EIN(117))) GO TO 810
      if(NANISO == 1):
 PEQIN(117,I)=1.5-RAT
      if(NANISO == 2):
 PEQIN(117,I)=PEQEL(2,(I-IOFFN(117)))
  810 CONTINUE                                                          
# B# 1SIG (V=0-10)                       F=.0601
      QIN(118,I)=0.0      
      PEQIN(118,I)=0.5 
      if(NANISO == 2):
 PEQIN(118,I)=0.0                         
      if(EN <= EIN(118):
) GO TO 813 
      if(EN > XSNG12(NSNG12):
) GO TO 8125                            
      DO 811 J=2,NSNG12                                              
      if(EN <= XSNG12[J]:
) GO TO 812                                  
  811 CONTINUE                                                          
      J=NSNG12                                               
  812 A=(YSNG12[J]-YSNG12(J-1))/(XSNG12[J]-XSNG12(J-1))               
      B=(XSNG12(J-1)*YSNG12[J]-XSNG12[J]*YSNG12(J-1))/(XSNG12(J-1)-XSNG12[J]) 
      QIN(118,I)=(A*EN+B)*1.D-16                                 
      A=(YSG12M[J]-YSG12M(J-1))/(XSNG12[J]-XSNG12(J-1))               
      B=(XSNG12(J-1)*YSG12M[J]-XSNG12[J]*YSG12M(J-1))/(XSNG12(J-1)-XSNG12[J]) 
      RAT=A*EN+B
      GO TO 8126
 8125 QIN(118,I)=.0601/(EIN(118)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(118)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(118)+E(3))
      RAT=YSG12M(NSNG12)*(XSNG12(NSNG12)/EN) 
 8126 if(EN <= (3.0*EIN(118))) GO TO 813
      if(NANISO == 1):
 PEQIN(118,I)=1.5-RAT
      if(NANISO == 2):
 PEQIN(118,I)=PEQEL(2,(I-IOFFN(118)))
  813 CONTINUE                                                          
# O3 1PI (V=0-3)                       F=0.0828
      QIN(119,I)=0.0
      PEQIN(119,I)=0.5  
      if(NANISO == 2):
 PEQIN(119,I)=0.0                               
      if(EN <= EIN(119):
) GO TO 816    
      if(EN > XSNG13(NSNG13):
) GO TO 8155                             
      DO 814 J=2,NSNG13                                              
      if(EN <= XSNG13[J]:
) GO TO 815                                  
  814 CONTINUE                                                          
      J=NSNG13                                               
  815 A=(YSNG13[J]-YSNG13(J-1))/(XSNG13[J]-XSNG13(J-1))               
      B=(XSNG13(J-1)*YSNG13[J]-XSNG13[J]*YSNG13(J-1))/(XSNG13(J-1)-XSNG13[J])  
      QIN(119,I)=(A*EN+B)*1.D-16                                 
      A=(YSG13M[J]-YSG13M(J-1))/(XSNG13[J]-XSNG13(J-1))               
      B=(XSNG13(J-1)*YSG13M[J]-XSNG13[J]*YSG13M(J-1))/(XSNG13(J-1)-XSNG13[J])  
      RAT=A*EN+B
      GO TO 8156
# USE BEF SCALING
 8155 QIN(119,I)=.0828/(EIN(119)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(119)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(119)+E(3))
      RAT=YSG13M(NSNG13)*(XSNG12(NSNG13)/EN) 
 8156 if(EN <= (3.0*EIN(119))) GO TO 816
      if(NANISO == 1):
 PEQIN(119,I)=1.5-RAT
      if(NANISO == 2):
 PEQIN(119,I)=PEQEL(2,(I-IOFFN(119)))
  816 CONTINUE   
# C# 1SIG  (SUM V=4-6) (AVERAGE E=14.090)  F=0.139
      QIN(120,I)=0.0
      PEQIN(120,I)=0.5  
      if(NANISO == 2):
 PEQIN(120,I)=0.0                            
      if(EN <= EIN(120):
) GO TO 819    
      if(EN > XSNG14(NSNG14):
) GO TO 8185                             
      DO 817 J=2,NSNG14                                              
      if(EN <= XSNG14[J]:
) GO TO 818                                  
  817 CONTINUE                                                          
      J=NSNG14                                               
  818 A=(YSNG14[J]-YSNG14(J-1))/(XSNG14[J]-XSNG14(J-1))               
      B=(XSNG14(J-1)*YSNG14[J]-XSNG14[J]*YSNG14(J-1))/(XSNG14(J-1)-XSNG14[J]) 
      QIN(120,I)=(A*EN+B)*1.D-16                                 
      A=(YSG14M[J]-YSG14M(J-1))/(XSNG14[J]-XSNG14(J-1))               
      B=(XSNG14(J-1)*YSG14M[J]-XSNG14[J]*YSG14M(J-1))/(XSNG14(J-1)-XSNG14[J]) 
      RAT=A*EN+B
      GO TO 8186
# USE BEF SCALING
 8185 QIN(120,I)=0.1390/(EIN(120)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(120)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(120)+E(3))
      RAT=YSG14M(NSNG14)*(XSNG14(NSNG14)/EN) 
 8186 if(EN <= (3.0*EIN(120))) GO TO 819
      if(NANISO == 1):
 PEQIN(120,I)=1.5-RAT
      if(NANISO == 2):
 PEQIN(120,I)=PEQEL(2,(I-IOFFN(120)))
  819 CONTINUE                                                          
#    
# B# 1SIG  (V=11-24)                 
      QIN(121,I)=0.0
      PEQIN(121,I)=0.5
      if(NANISO == 2):
 PEQIN(121,I)=0.0                                
      if(EN <= EIN(121):
) GO TO 829    
      if(EN > XSNG15(NSNG15):
) GO TO 8285                             
      DO 827 J=2,NSNG15                                             
      if(EN <= XSNG15[J]:
) GO TO 828                                  
  827 CONTINUE                                                          
      J=NSNG15                                               
  828 A=(YSNG15[J]-YSNG15(J-1))/(XSNG15[J]-XSNG15(J-1))               
      B=(XSNG15(J-1)*YSNG15[J]-XSNG15[J]*YSNG15(J-1))/(XSNG15(J-1)-XSNG15[J]) 
      QIN(121,I)=(A*EN+B)*1.D-16                                 
      A=(YSG15M[J]-YSG15M(J-1))/(XSNG15[J]-XSNG15(J-1))               
      B=(XSNG15(J-1)*YSG15M[J]-XSNG15[J]*YSG15M(J-1))/(XSNG15(J-1)-XSNG15[J]) 
      RAT=A*EN+B
      GO TO 8286
# USE BEF SCALING                           F=0.265
 8285 QIN(121,I)=0.2650/(EIN(121)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(121)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(121)+E(3))
      RAT=YSG15M(NSNG15)*(XSNG15(NSNG15)/EN) 
 8286 if(EN <= (3.0*EIN(121))) GO TO 829
      if(NANISO == 1):
 PEQIN(121,I)=1.5-RAT
      if(NANISO == 2):
 PEQIN(121,I)=PEQEL(2,(I-IOFFN(121)))
  829 CONTINUE                                                          
# E# 1SIG     ELOSS=14.36EV    F=0.0108   
      QIN(122,I)=0.0      
      PEQIN(122,I)=0.5  
      if(NANISO == 2):
 PEQIN(122,I)=0.0               
      if(EN <= EIN(122):
) GO TO 895    
# USE BEF SCALING
      QIN(122,I)=0.0108/(EIN(122)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(122)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(122)+E(3))
      if(QIN(122,I):
 < 0.0) QIN(122,I)=0.0
# 
      PEQIN(122,I)=PEQIN(121,I)
  895 CONTINUE
# E 1PI     ELOSS=14.45EV    F=0.0237   
      QIN(123,I)=0.0      
      PEQIN(123,I)=0.5                
      if(NANISO == 2):
 PEQIN(123,I)=0.0 
      if(EN <= EIN(123):
) GO TO 896    
# USE BEF SCALING
      QIN(123,I)=0.0237/(EIN(123)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(123)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(123)+E(3))
      if(QIN(123,I):
 < 0.0) QIN(123,I)=0.0
# 
      PEQIN(123,I)=PEQIN(121,I)
  896 CONTINUE
# SINGLET     ELOSS=14.839EV   F=0.0117   
      QIN(124,I)=0.0      
      PEQIN(124,I)=0.5                
      if(NANISO == 2):
 PEQIN(124,I)=0.0 
      if(EN <= EIN(124):
) GO TO 897    
# USE BEF SCALING
      QIN(124,I)=0.0117/(EIN(124)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(124)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(124)+E(3))
      if(QIN(124,I):
 < 0.0) QIN(124,I)=0.0
# 
      PEQIN(124,I)=PEQIN(121,I)
  897 CONTINUE
# SUM OF HIGH  ENERGY SINGLETS        ELOSS=15.20EV    F=0.1152   
      QIN(125,I)=0.0      
      PEQIN(125,I)=0.5                
      if(NANISO == 2):
 PEQIN(125,I)=0.0 
      if(EN <= EIN(125):
) GO TO 898    
# USE BEF SCALING
      QIN(125,I)=0.1152/(EIN(125)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(125)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(125)+E(3))
      if(QIN(125,I):
 < 0.0) QIN(125,I)=0.0
# 
      PEQIN(125,I)=PEQIN(121,I)
  898 CONTINUE
# SUM NEUTRAL BREAKUP ABOVE IONISATION ENERGY  F=0.160
      QIN(126,I)=0.0      
      PEQIN(126,I)=0.5                
      if(NANISO == 2):
 PEQIN(126,I)=0.0 
      if(EN <= EIN(126):
) GO TO 899    
# USE BORN SCALING AND FACTOR TO GIVE TRIPLET+DIPOLE CONTRIBUTION
      QIN(126,I)=0.1600/(EIN(126)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(126)))-BETA2-DEN[I]/2.0)*BBCONST*(EN+2.0*EIN(126))/EN 
      if(QIN(126,I):
 < 0.0) QIN(126,I)=0.0
      PEQIN(126,I)=PEQIN(121,I)
# SUM NEUTRAL BREAKUP ABOVE IONISATION ENERGY  F=0.090
  899 QIN(127,I)=0.0      
      PEQIN(127,I)=0.5                
      if(NANISO == 2):
 PEQIN(127,I)=0.0 
      if(EN <= EIN(127):
) GO TO 8999   
# USE BORN SCALING AND FACTOR TO GIVE TRIPLET+DIPOLE CONTRIBUTION
      QIN(127,I)=0.0900/(EIN(127)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(127)))-BETA2-DEN[I]/2.0)*BBCONST*(EN+2.0*EIN(127))/EN 
      if(QIN(127,I):
 < 0.0) QIN(127,I)=0.0
      PEQIN(127,I)=PEQIN(121,I)
 8999 CONTINUE
# LOAD BREMSSTRAHLUNG X-SECTION
      QIN(128,I)=0.0
      if(EN <= 1000.):
 GO TO 8969
      DO 8961 J=2,NBREM
      if(EN <= EBRM[J]:
) GO TO 8962
 8961 CONTINUE
      J=NBREM
 8962 A=(math.log(Z7T[J])-math.log(Z7T(J-1)))/(EBRM[J]-EBRM(J-1))
      B=(math.log(Z7T[J])*EBRM(J-1)-math.log(Z7T(J-1))*EBRM[J])/(EBRM(J-1)-EBRM[J])
      QIN(128,I)=math.exp(A*EN+B)*2.D-24
 8969 CONTINUE                                                          
# ROTATIONAL SUM                                                        
      SUMR=0.0                                                       
      DO 8990 K=1,76                                     
      SUMR=SUMR+QIN(K,I)                                              
 8990 CONTINUE 
#  VIBRATIONAL SUM
      SUMV=0
      DO 8991 K=77,92
      SUMV=SUMV+QIN(K,I)
 8991 CONTINUE
# EXCITATION SUM
      SUMEX=0.0
      DO 8992 K=93,111  
      SUMEX=SUMEX+QIN(K,I)   
 8992 CONTINUE                                                          
# EXCITATION SUM
      SUMEX1=0.0
      DO 8993  K=112,127
      SUMEX1=SUMEX1+QIN(K,I)   
 8993 CONTINUE                                                          
# GET CORRECT ELASTIC XSECTION BY SUBTRACTION OF ROTATION
      Q(2,I)=Q(2,I)-SUMR
# FOR VERY HIGH TEMPERATURES SOMETIMES SUMR BECOMES LARGER THAN
# THE ELASTIC+ROT (ONLY IN FIRST TWO ENERGY BINS) FIX GT 0
      if(Q(2,I):
 <= 0.0) :
       Q(2,I)=0.95D-16
      # endif
      Q(1,I)=Q(2,I)+Q(5,I)+QION(2,I)+SUMR+SUMV+SUMEX+SUMEX1           
#     Q(1,I)=Q(2,I)+Q(5,I)+QION(2,I)+SUMR+SUMV+SUMEX+SUMEX1+QIN(127,I)
# CAN PRINT OUT X-SECTION DATA
#     SUMR=SUMR*1.D16
#     SUMV=SUMV*1.D16
#     SUMEX=SUMEX*1.D16
#     SUMEX1=SUMEX1*1.D16
#     SUMVEX=SUMV+SUMEX+SUMEX1
#     SUMVEXI=SUMVEX+Q(5,I)*1.D16
#     WRITE(6,8769) EN,SUMR,SUMV,SUMEX,SUMEX1,SUMVEX,SUMVEXI
#8769 print(' EN=','%.3f' % ,' SUMR=','%.3f' % ,' SUMV=','%.3f' % ,' SUMEX=','%.3f' % ,' SU
#    /MEX1=','%.3f' % ,' SUMVEX=','%.3f' % ,' TOT=','%.3f' % )
#     WRITE(6,8770) EN,QION(1,I),QION(2,I),Q(5,I)
#8770 print(' EN=',D12.4,' QION1=',D12.4,' QION2=',D12.4,' Q5=',D12.4)
# PRINT IONISATION DATA
#     SUMN2P=QION(1,I)+QION(2,I)+QION(3,I)+QION(4,I)+QION(5,I)+QION(6,I)
#    /+QION(7,I)
#     SUMNP=QION(8,I)+QION(9,I)+QION(10,I)
#     SUMITOT=SUMNP+SUMN2P+QION(11,I)+QION(12,I)
#     WRITE(6,8771) EN,SUMN2P,SUMNP,QION(11,I),QION(12,I),SUMITOT
#8771 print(' EN=',D12.4,' N2+ =',D12.4,' N++ =',D12.4,' N+,N+=',D12.4,
#    /' KSHELL=',D12.4,' TOT=',D12.4) 
#     WRITE(6,8772) EN,( QION[J][I],J=1,12)
#8772 print(' EN=',D12.4,/,2X,6(D12.4,2X),/,2X,(6D12.4,2X))
  900 CONTINUE         
#     STOP                                                 
# SAVE COMPUTE TIME                                                     
      DO 1000 K=1,127                                                   
      J=128-K                                                           
      if(EFINAL <= EIN[J]:
) NIN=J-1                                      
 1000 CONTINUE
      if(NIN < 77):
 NIN=77 
      if(EFINAL > 1000.):
 NIN=128
#                                                                       
      RETURN                                                            
      # end                                                               
      def GAS17(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)     
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000)
      COMMON/DENS/DEN(20000)
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS18(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)     
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000)
      COMMON/DENS/DEN(20000)
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS19(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)     
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000)
      COMMON/DENS/DEN(20000)
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS20(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)     
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000)
      COMMON/DENS/DEN(20000)
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS21(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000)
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6)  
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      DIMENSION XELM(172),YELM(172),YELT(172),YEPS(172),XROT0(53),YROT0(53),XROT1(43),YROT1(43),XROT2(28),YROT2(28),XROT3(28),YROT3(28),XVIB1(43),YVIB1(43),XVIB2(42),YVIB2(42),XVIB3(13),YVIB3(13),XVIB4(12),YVIB4(12),XB3S1(3),YB3S1(3),XB3S2(6),YB3S2(6),XB3S3(5),YB3S3(5),XB3S4(8),YB3S4(8),XC3PI(5),YC3PI(5),XA3SG(5),YA3SG(5),XE3SG(5),YE3SG(5),XEFSG(34),YEFSG(34),XATT(18),YATT(18),XION(92),YION(92),XIOND[61],YIOND[61],IOFFN(107),IOFFION(2),PJ(7),ERLVL(7),BEF(10)
      DIMENSION DISLY(37),DISWR(14),DISD1P(16),DISB1S(9)
      DIMENSION Z1T(25),EBRM(25)
      CHARACTER*50 SCRPT(300),SCRPTN(10)                                
      CHARACTER*25 NAME 
# --------------------------------------------------------------      
# ELASTIC MT                                                   
      DATA XELM/0.00,.001,.0012,.0015,.0018,.002,.0025,.003,.004,.005,.006,.007,.008,.009,.010,.012,.015,.018,.020,.025,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.10,0.12,0.15,  0.18,0.20,0.25,0.30,0.40,0.50,0.60,0.70,0.80,0.90,1.00,1.20,1.50,1.80,2.00,2.50,3.00,4.00,5.00,6.00,7.00,8.00,9.00,10.0,12.0,15.0,18.0,20.0,25.0,30.0,40.0,50.0,60.0,70.0,80.0,90.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,6000.,7000.,8000.,9000.,1.0D4,1.25D4,1.5D4,1.75D4,2.0D4,2.5'%.3f' %.0'%.3f' %.5D4,4.0D4,4.5D4,5.0D4,6.0D4,7.0D4,8.0D4,9.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5'%.3f' %.0'%.3f' %.5D5,4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,2.0D6,2.5'%.3f' %.0'%.3f' %.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5'%.3f' %.0'%.3f' %.5D7,4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,1.0D8,1.25D8,1.5D8,1.75D8,2.0D8,2.5'%.3f' %.0'%.3f' %.5D8,4.0D8,4.5D8,5.0D8,6.0D8,7.0D8,8.0D8,9.0D8,1.0D9/  
      DATA YELM/7.24,7.25,7.26,7.26,7.27,7.28,7.30,7.35,7.38,7.45,7.48,7.54,7.59,7.64,7.70,7.78,7.90,8.04,8.14,8.33,8.56,8.93,9.27,9.54,9.79,10.04,10.25,10.47,10.86,11.35,11.78,12.02,12.54,13.00,13.81,14.52,15.16,15.66,16.17,16.58,17.01,17.70,18.05,18.05,17.70,16.60,15.35,12.85,10.90,9.450,8.20,7.20,6.30,5.60,4.45,3.275,2.529,2.154,1.476,1.100,.702,.505,.375,.295,.238,.195,.170,.116,.0868,.0662,.0524,.0353,.0256,.0195,.0154,.0125,.0103,.00747,.00567,.00446,.00361,.00299,.0020,.00144,.00109,8.53D-4,5.69D-4,4.08D-4,3.08D-4,2.41D-4,1.94D-4,1.60D-4,1.15D-4,8.65D-5,6.77D-5,5.45D-5,4.49D-5,2.98D-5,2.13D-5,1.60D-5,1.26D-5,8.34D-6,5.97D-6,4.51D-6,3.54D-6,2.86D-6,2.36D-6,1.70D-6,1.29D-6,1.02D-6,8.26D-7,6.86D-7,4.65D-7,3.40D-7,2.62D-7,2.09D-7,1.44D-7,1.07D-7,8.37D-8,6.76D-8,5.62D-8,4.76D-8,3.58D-8,2.82D-8,2.30D-8,1.92D-8,1.63D-8,1.15D-8,8.67D-9,6.80D-9,5.49D-9,3.83D-9,2.84D-9,2.20D-9,1.76D-9,1.44D-9,1.20D-9,8.79D-10,6.72D-10,5.31D-10,4.31D-10,3.57D-10,2.39D-10,1.72D-10,1.30D-10,1.02D-10,6.74D-11,4.81D-11,3.61D-11,2.81D-11,2.25D-11,1.85D-11,1.31D-11,9.76D-12,7.57D-12,6.04D-12,4.93D-12,3.20D-12,2.24D-12,1.66D-12,1.27D-12,8.18D-13,5.70D-13,4.19D-13,3.21D-13,2.54D-13,2.06D-13,1.43D-13,1.05D-13,8.06D-14,6.37D-14,5.16D-14/
# ELASTIC ANGULAR DISTRIBUTION def EPSILON
# EPSILON =1-YEPS
      DATA YEPS/1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.00204,1.00406,1.00403,1.00402,1.00799,1.01195,1.01587,1.01974,1.02548,1.03497,1.04613,1.05537,1.07162,1.09485,1.11355,1.13538,1.15360,1.16779,1.18516,1.19550,1.20711,1.22691,1.25186,1.27686,1.29241,1.29958,1.33194,1.36128,1.39254,1.42965,1.43614,1.42939,1.42749,1.44093,1.43942,1.39970,1.34691,1.29121,1.15375,1.03498,0.81607,0.68293,0.59997,0.53826,0.48433,0.43796,0.41063,0.36112,0.31690,0.28482,0.26105,0.20648,0.18652,0.14951,0.13589,0.11425,0.10223,0.09743,0.08175,0.08042,0.06877,0.06127,0.05204,0.04596,0.03674,0.02996,0.02695,0.02487,0.02173,0.01973,0.01733,0.01536,0.01371,.012395,.011378,.009183,.007832,.006527,.005948,.004772,.004142,.003545,.003086,.002742,.002452,.002049,.001748,.001525,.001351,.001215,.0009666,.0007993,.0006810,5.977D-4,4.724D-4,3.896D-4,3.326D-4,2.893D-4,2.544D-4,2.282D-4,1.866D-4,1.581D-4,1.370D-4,1.199D-4,1.066D-4,8.29D-5,6.72D-5,5.63D-5,4.80D-5,3.65D-5,2.91D-5,2.40D-5,2.02D-5,1.73D-5,1.50D-5,1.17D-5,9.40D-6,7.77D-6,6.54D-6,5.59D-6,3.98D-6,2.99D-6,2.33D-6,1.87D-6,1.28D-6,9.38D-7,7.15D-7,5.64D-7,4.56D-7,3.77D-7,2.70D-7,2.02D-7,1.57D-7,1.26D-7,1.03D-7,6.74D-8,4.74D-8,3.52D-8,2.72D-8,1.76D-8,1.23D-8,9.05D-9,6.95D-9,5.50D-9,4.46D-9,3.10D-9,2.28D-9,1.74D-9,1.37D-9,1.11D-9,7.04D-10,4.85D-10,3.53D-10,2.67D-10,1.68D-10,1.15D-10,8.3D-11,6.3D-11,4.9D-11,4.0D-11,2.7D-11,2.0D-11,1.5D-11,1.2D-11,9.0D-12/
# ELASTIC FROM 100EV
      DATA YELT/7.24,7.25,7.26,7.26,7.27,7.28,7.30,7.36,7.40,7.43,7.46,7.50,7.53,7.56,7.60,7.65,7.72,7.80,7.85,7.95,8.05,8.30,8.50,8.65,8.80,8.93,9.06,9.19,9.42,9.70,9.92,10.03,10.42,10.60,11.07,11.43,11.68,12.02,12.46,12.79,13.02,13.56,14.15,14.59,14.78,15.05,15.00,14.66,13.90,13.05,12.10,11.33,10.54,9.744,8.375,6.678,5.508,4.952,3.931,3.125,2.299,1.760,1.465,1.241,1.034,0.954,0.841,0.639,0.518,0.443,.383,.303,.255,.210,.176,.158,.140,.112,.0932,.0800,.070,.062,.049,.040,.035,.0295,.0235,.0189,.0162,.0142,.0126,.0114,.00951,.00817,.00717,.00639,.00576,.00464,.00390,.00336,.00296,.00240,.00203,.00176,.00156,.00141,.00128,.00110,9.66D-4,8.67D-4,7.90D-4,7.28D-4,6.17D-4,5.44D-4,4.91D-4,4.52D-4,3.98D-4,3.63D-4,3.38D-4,3.19D-4,3.05D-4,2.94D-4,2.77D-4,2.66D-4,2.58D-4,2.52D-4,2.47D-4,2.39D-4,2.34D-4,2.31D-4,2.28D-4,2.25D-4,2.23D-4,2.22D-4,2.22D-4,2.21D-4,2.21D-4,2.20D-4,2.20D-4,2.20D-4,2.19D-4,2.19D-4,2.19D-4,2.19D-4,2.19D-4,27*2.188D-4/      
#-----------------------------------------------------------------------
# ROTATION J=0-2
# SCALED BY 1/E ABOVE 20 EV IN def                    
      DATA XROT0/.043928,.046,.047,.048,.049,.050,.051,.054,.055,.060, .065,.070,.080,.090,0.10,0.11,0.12,0.13,0.14,0.15,0.20,0.25,0.30,0.35,0.40,0.45,0.50,0.55,0.60,0.65, 0.70,0.80,0.90,1.00,1.10,1.20,1.35,1.50,1.75,2.00,2.50,3.00,3.50,4.00,4.50,5.00,6.00,7.00,8.00,9.00,                10.0,15.0,20.0/                                                   
      DATA YROT0/0.00,.0206,.0276,.0286,.0297,.0308,.0310,.0330,.0340,.0394, .0452,.0507,.0614,.0680,.0740,.0790,.0835,.088,.0925,.0970,.115,.132,.152,.175,.200,.228,.260,.291,.323,.359, .394,.469,.555,.636,.716,.796,.916,1.036,1.203,1.370,1.585,1.704,1.755,1.758,1.732,1.689,1.579,1.462,1.350,1.248,      1.156,0.730,0.47/                                            
#-----------------------------------------------------------------------
# ROTATION J=1-3                                                        
# SCALED BY 1/E ABOVE 20 EV IN def                    
      DATA XROT1/0.072741,.075,.080,.085,.090,.095,0.10,0.11,0.12,0.13,0.15,0.20,0.25,0.30,0.35,0.40,0.45,0.50,0.56,0.60,                0.66,0.70,0.80,0.90,1.01,1.20,1.40,1.60,1.80,2.00,                2.50,3.00,3.50,4.00,4.50,5.00,6.00,7.00,8.00,9.00,                10.0,15.0,20.0/             
      DATA YROT1/0.00,.0085,.0149,.0203,.0238,.0266,.0282,.0351,.0403,  .0449,.0520,.0604,.0719,.0870,.1029,.1191,.1361,.1543,.1773,.1944,.2212,.2396,.2839,.3328,.3842,.489,.569,.658,.743,.818,           .952,1.020,1.046,1.050,1.036,1.011,.946,.876,.809,.748,           .694,.440,.288/                                                
#-----------------------------------------------------------------------
# ROTATION J=2-4                                         
# SCALED BY 1/E ABOVE 20 EV IN def                    
      DATA XROT2/0.10085,0.15,0.20,0.25,0.30,0.35,0.40,0.45,0.50,0.60, 0.70,0.80,0.90,1.00,1.50,2.00,2.50,3.00,3.50,4.00,                4.50,5.00,5.50,6.00,7.00,8.00,10.0,20.0/  
      DATA YROT2/0.00,.0249,.0367,.0475,.0577,.0694,.0834,.1003,.1192,  .145,.178,.216,.256,.299,.436,.543,.600,.649,.670,.672,           .662,.646,.627,.605,.561,.517,.444,0.20/
# ROTATION J=4-6 USE X-SECTION FOR J=2-4 SCALED BY 0.8
# ROTATION J=6-8 USE X-SECTION FOR J=2-4 SCALED BY 0.5               
#-----------------------------------------------------------------------
# ROTATION J=3-5                              
# SCALED BY 1/E ABOVE 20 EV IN def                    
      DATA XROT3/0.12797,0.15,0.20,0.25,0.30,0.35,0.40,0.45,0.50,0.60,0.70,0.80,0.90,1.00,1.50,2.00,2.50,3.00,3.50,4.00,                4.50,5.00,5.50,6.00,7.00,8.00,10.0,20.0/
      DATA YROT3/0.00,.019,.033,.043,.050,.058,.066,.075,.085,.104,     .128,.154,.185,.214,.334,.565,.700,.750,.825,.828,                .818,.797,.774,.747,.692,.640,.548,0.24/
# ROTATION J=5-7 USE X-SECTION FOR J=3-5 SCALED BY 0.8
# ROTATION J=7-9 USE X-SECTION FOR J=3-5 SCALED BY 0.5           
#-----------------------------------------------------------------------
# VIBRATION V=0-1 DELTAJ=0  ROTATIONALLY ELASTIC  
# SCALE AS 1/E ABOVE 100 EV                      
      DATA XVIB1/.515916,0.56,0.58,0.60,0.65,0.75,0.85,0.95,1.00,1.05, 1.10,1.15,1.20,1.30,1.40,1.60,1.80,2.20,2.40,2.60,                3.00,3.50,4.00,4.50,5.00,6.00,7.00,8.00,9.00,10.0,                11.0,12.0,13.0,14.0,15.0,20.0,25.0,30.0,40.0,50.0,60.0,80.0,100./          
      DATA YVIB1/0.00,.0005,.0031,.0064,.0071,.0106,.0170,.0279,.0342,  .0399,.0451,.0501,.0545,.0651,.0735,.0964,.1216,.1624,.1677,.1719,.1916,.2008,.1860,.1630,.1460,.1160,.0876,.0655,.0510,.0430,.0366,.0318,.0280,.0241,.0222,.0143,.0104,.0073,.0048,.00416,.00351,.00262,.00194/
#-----------------------------------------------------------------------
# VIBRATION V=0-1 DELTAJ=2  ROTATIONALLY INELASTIC 
# SCALE AS 1/E ABOVE 100 EV                     
      DATA XVIB2/.568,.575,0.60,0.65,0.75,0.85,0.95,1.00,1.05,1.10,1.15,1.20,1.30,1.40,1.60,1.80,2.20,2.40,2.60,3.00,                3.50,4.00,4.50,5.00,6.00,7.00,8.00,9.00,10.0,11.0,                12.0,13.0,14.0,15.0,20.0,25.0,30.0,40.0,50.0,60.0,80.0,100./               
      DATA YVIB2/0.00,.0002,.0016,.0028,.0058,.0110,.0204,.0264,.0316,.0369,.0423,.0477,.0602,.0697,.0994,.1334,.1910,.2008,.2141,.2494,.2672,.2540,.2270,.2040,.1640,.1224,.0905,.0690,.0570,.0484,      .0422,.0370,.0319,.0294,.0189,.0138,.0097,.0064,.00552,.00466,.00347,.00257/      
#-----------------------------------------------------------------------
#  VIBRATION V=0-2                                                      
      DATA XVIB3/1.00265,1.40,1.50,2.00,2.50,3.00,4.00,5.00,6.00,8.00,10.0,15.0,20.0/                             
      DATA YVIB3/0.00,.001,.002,.011,.025,.033,.035,.032,.027,.021,.016,.0092,.0066/                        
#-----------------------------------------------------------------------
#  VIBRATION V=0-3                                                      
      DATA XVIB4/1.46083,1.80,2.00,2.50,3.00,4.00,5.00,6.00,8.00,10.0,15.0,20.0/                                   
      DATA YVIB4/.0,.0003,.001,.0025,.0033,.0035,.0032,.0027,.0021,.0016,.00092,.00066/     
# B3 SIGMA+ 100% DISSOCIATIVE SPLIT INTO 4 ENERGY LOSSES
# SCALED BY1/E**3 ABOVE 50.0EV
      DATA XB3S1/8.00,9.20,9.20001/
      DATA YB3S1/0.00,.109,0.00/  
      DATA XB3S2/9.00,9.20,9.20001,10.2,12.2,12.20001/
      DATA YB3S2/0.00,0.00,.109,.187,.445,0.00/  
      DATA XB3S3/9.50,12.2,12.20001,15.2,15.20001/
      DATA YB3S3/0.00,0.00,.445,0.63,0.00/  
      DATA XB3S4/10.0,15.2,15.20001,17.2,20.2,30.0,40.0,50.0/
      DATA YB3S4/0.00,0.00,0.63,.516,.353,.153,.069,.035/
# C3 PI V=0-18 SUMMED VIBRATIONS METASTABLE LEVEL 
# SCALED BY 1/E**3 ABOVE 30 EV
      DATA XC3PI/11.779,15.0,17.5,20.0,30.0/
      DATA YC3PI/0.00,0.09,.126,.135,.072/
# A3 SIGMA V=0-17 SUMMED VIBRATIONS
# SCALED BY 1/E**3 ABOVE 30 EV
      DATA XA3SG/11.793,15.0,17.5,20.0,30.0/
      DATA YA3SG/0.00,.072,.081,0.09,.027/
# E3 SIGMA V=0-10 SUMMED VIBRATIONS
# SCALED BY 1/E**3 ABOVE 30 EV
      DATA XE3SG/13.253,15.0,17.5,20.0,30.0/
      DATA YE3SG/0.00,.0108,.018,.0225,.0117/
# EF1 SIGMA V=0-19 SUMMED VIBRATIONS
#  BORN SCALED ABOVE XEFSG(NEFSG)  EV
      DATA XEFSG/12.301,15.0,16.0,17.0,17.5,19.0,20.0,21.0,23.5,26.0,30.0,40.0,50.0,60.0,70.0,80.0,100.,120.,140.,160.,180.,200.,220.,240.,260.,280.,300.,400.,500.,600.,700.,800.,900.,1000./
      DATA YEFSG/0.00,.028,.033,.037,.038,.039,.040,.040,.040,.040,.040,.041,.041,.039,.036,.034,.029,.026,.024,.022,.021,.020,.019,.018,.017,.016,.015,.012,.0096,.0080,.0069,.0061,.0054,.0049/
# GROUND STATE CONTINUUM FRACTIONS FROM STEPHENS AND DALGARNO: 
# NEUTRAL DISSOCIATION FRACTION FOR LYMAN BAND - GROUND STATE CONTINUUM
      DATA DISLY/3.01D-9,6.58D-9,1.35D-5,1.16D-4,1.48D-3,.0171,.0309,.211,.291,.415,.410,.407,.523,.511,.542,.558,.554,.601,.608,.634,.637,.643,.651,.659,.677,.691,.712,.730,.753,.774,.795,.816,.842,.873,.911,.956,.995/
# NEUTRAL DISSOCIATION FRACTION FOR WERNER BAND - GROUND STATE CONTINUUM
      DATA DISWR/1.57D-11,1.10D-10,2.40D-9,2.03D-8,2.04D-6,7.44D-6,6.75D-4,1.45D-3,.0372,.0643,.377,.425,.642,.825/
# DISSOCIATION FRACTIONS FROM GLASS-MAUJEAN:
# B#1SIGMA 
      DATA DISB1S/1.41D-8,4.77D-8,5.82D-8,1.99D-7,1.05D-6,4.24D-5,.065,.152,.451/
#  D1PI
      DATA DISD1P/5.95D-9,1.39D-8,1.85D-8,3.96D-8,2.47D-6,2.02D-5,7.74D-4,.0039,.0371,.103,.357,.481,.527,.638,.859,.870/
#  
# NEUTRAL
# B1 SIGMA                  OSCILLATOR SUM V=0-36   F=0.310770
# C1 PI                     OSCILLATOR SUM V=0-13   F=0.355995
# B#1 SIGMA                 OSCILLATOR SUM V=0-8    F=0.044610
# D1 PI                     OSCILLATOR SUM V=0-15   F=0.074070
# B##1 SIGMA                OSCILLATOR SUM V=0-6    F=0.022300
# D#1 PI                    OSCILLATOR SUM V=0-3    F=0.014500
# B###1 SIGMA + D##1 PI     OSCILLATOR SUM          F=0.014500
# B####1 SIGMA + D###1 PI   OSCILLATOR SUM          F=0.010100
# B#####1 SIGMA + D####1 PI OSCILLATOR SUM          F=0.005000
# CONTINUUM EXCITATION                              F=0.026800
# PREDISSOCIATION                                   F=0.017000
#
#                 SUM EXCITATION OSCILLATOR         F=0.895645
#                 SUM IONISATION OSCILLATOR         F=1.1219
#           TOTAL OSCILLATOR SUM           F=2.017545
#-----------------------------------------------------------------------
#  ATTACHMENT GIVEN AS TABLES AND AS A TEMPERATURE DEP# endENT def
#
# TABLES FOR 2SIGMAg  ATTACHMENT 
      DATA XATT/7.00,7.50,8.00,8.50,9.00,9.50,10.0,10.4,11.0,11.5,12.0,12.5,13.0,13.5,14.0,14.5,15.0,15.5/
      DATA YATT/0.00,2.8D-6,1.18D-5,3.08D-5,5.88D-5,1.01D-4,1.18D-4,1.29D-4,1.18D-4,1.01D-4,7.28D-5,4.48D-5,2.66D-5,1.26D-5,6.72D-6,3.20D-6,8.0D-7,0.0/
# TOTAL IONISATION
# SEE NOTES BELOW ON DERIVATION OF TOTAL IONISATION X-SECTION                     
      DATA XION/15.418,16.0,16.5,17.0,17.5,18.0,18.5,19.0,19.5,20.0,    20.5,21.0,21.5,22.0,22.5,23.0,23.5,24.0,24.5,25.0,                25.5,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,45.0,                50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,                100.,105.,110.,115.,120.,125.,130.,135.,140.,145.,                150.,160.,180.,200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,10000.,12000.,14000.,16000./                
      DATA YION/0.00,.0295,.0598,.0910,.121,.154,.184,.217,.245,.276,   .305,.331,.357,.384,.407,.433,.454,.477,.498,.516,                .536,.555,.623,.678,.725,.765,.800,.828,.853,.900,                .927,.945,.954,.957,.957,.956,.950,.944,.934,.920,                .910,.902,.890,.878,.865,.851,.840,.832,.818,.809,                .801,.776,.725,.687,.645,.605,.565,.537,.484,.443,.404,.379,.343,.322,.307,.287,.276,.261,.251,.239,.226,.214,.199,.165,.146,.133,.121,.101,.0865,.0754,.0675,.0610,.0558,.0515,.0480,.0422,.0375,.0340,.0310,.0265,.0234,.0208/   
# DISSOCIATIVE IONISATION X-SECTION STRAUB WITH EXTENSION TO 16KEV
#  USE CONSTANT RATIO FOR H2+ AND H+ ABOVE 1KEV
      DATA XIOND/18.076,25.0,30.0,35.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,110.,120.,140.,160.,180.,200.,225.,250.,275.,300.,350.,400.,450.,500.,550.,600.,650.,700.,750.,800.,850.,900.,950.,1000.,1200.,1400.,1600.,1800.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,5500.,6000.,7000.,8000.,9000.,10000.,12000.,14000.,16000./
      DATA YIOND/0.00,.00422,.00856,.0176,.0287,.0408,.0482,.0572,.0625,.0682,.0705,.0737,.0739,.0751,.0754,.0761,.0759,.0744,.0724,.0671,.0639,.0592,.0545,.0505,.0450,.0412,.0392,.0339,.0294,.0260,.0241,.0211,.0197,.0181,.0171,.0159,.0149,.0137,.0135,.0125,.0117,.0109,.00902,.00798,.00727,.00662,.00552,.00473,.00412,.00369,.00333,.00305,.00282,.00262,.00231,.00205,.00186,.00169,.00145,.00128,.00114/
# BREMSSTRAHLUNG X-SECTION WITH CUT OFF  UNITS 10**-24
      DATA Z1T/11.3,6.18,2.80,1.54,.858,.407,.251,.176,.145,.150,.167,.178,.187,.193,.198,.205,.210,.218,.222,.228,.231,.233,.234,.235,.235/
      DATA EBRM/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,4.E7,5.E7,6.E7,8.E7,1.E8/
#***********************************************************************
# IONISATION FROM WEIGHTED AVERAGE OF RAPP AND STRAUB UP TO 180EV
#  NORMALISED STRAUB BETWEEN 180 AND 1000EV : NORMALISED SCHRAM
#  BETWEEN 1 AND 16KEV.
#  ABOVE 16KEV USED BORN-BETHE WITH M2=0.642 AND C=8.3 CLOSE FIT TO 
#  RIEKE AND PREPEJCHAL  AND CONSISTENT WITH BERKOWITZ
# USE ORTHO IONISATION ENERGY AT ROOM TEMPERATURE
# DISSOCIATION ENERGY 0=4.47806952 EV
# ORTHO PARA ENERGY DIFFERENCE J=0 - J=1 FOR GROUND STATE =0.01469049 EV
#
# OSCILLATOR STRENGTHS FROM BERKOWITZ WITH SMALL CORRECTIONS FOR NEW
# IMPROVED FRANCK-CONDON FACTORS FOR LYMAN (B1 SIGMA) AND WERNER (C1 PI)
# TRIPLET X-SECTIONS FROM PUBLISHED ELECTRON SCATTERING UP TO 2010.
# LOWEST TRIPLET DISSOCIATIVE STATE (B3 SIGMA) SPLIT INTO FOUR LEVELS IN
# ORDER TO BETTER SIMULATE VARYING ENERGY LOSS.
# TRIPLET X-SECTIONS SCALED BY 0.9 TO BETTER FIT TOWNS# end COEFICIENT. 
# TRIPLET SCALING FACTOR WITHIN EXPERIMENTAL MEASUREMENT ERRORS. 
# ATTACHMENT X-SECTION INCLUDES TEMPERATURE DEP# endENCE FROM ROTATIONAL 
# POPULATION SHOULD BE ACCURATE UP TO 1000 KELVIN.
# MOMENTUM TRANSFER ELASTIC X-SECTION FROM SCHMIDT UP TO 1.0 EV , ABOVE
# 1.0 EV X-SECTION FROM FIT TO DRIFT VELOCITY.
# FIT TO WITHIN EXPERIMENTAL ERRORS OF DRIFT VELOCITY AND DIFFUSION FROM
# TABLE 14.6 OF HUXLEY AND CROMPTON.
# SOME EVIDENCE OF ELECTRON RUNAWAY ABOVE 300 TOWNS# end FROM CALCULATION.
#-----------------------------------------------------------------------
# 2015 UPDATE INCLUDES DISSOCIATIVE IONISATION AND Q STATES TO NEUTRALS
#-----------------------------------------------------------------------
      if(NANISO == 0):
 :
       NAME=' H2  ISOTROPIC      2015 ' 
      else:
       NAME=' H2  ANISOTROPIC    2015 '
      # endif
# ----------------------------------------------------------------------
#                                      
      CONST=1.873884D-20  
      EMASS2=1021997.804
      API=numpy.arccos(-1.00)
      A0=0.52917720859D-8
      RY=13.60569193
      BBCONST=16.0*API*A0*A0*RY*RY/EMASS2
# BORN-BETHE CONSTANTS FOR IONISATION
      AM2=0.642
      C=8.30
#-----------------------------------------------------------------------
      NION=2
      NATT=1 
      NIN=107
      NNULL=0  
      IONMODEL=0
# ARRAY SIZE
      NASIZE=20000
#
      NBREM=25
      DO 11 J=1,NIN
      IZBR[J]=0
   11 CONTINUE
      IZBR(108)=1
#
      DO 1 J=1,6
    1 KEL[J]=NANISO
      DO 2 J=5,NIN
    2 KIN[J]=NANISO
# SET  SUPERELASTIC TO ISOTROPIC ( X-SEC ZERO ABOVE 20EV)
      DO 22 J=1,4
   22 KIN[J]=0
      NELM=172                                                         
      NROT0=53                                                          
      NROT1=43                                                          
      NROT2=28                                                          
      NROT3=28                                                          
      NVIB1=43                                                          
      NVIB2=42                                                          
      NVIB3=13                                                          
      NVIB4=12 
      NB3S1=3
      NB3S2=6
      NB3S3=5
      NB3S4=8
      NC3PI=5
      NA3SG=5
      NE3SG=5
      NEFSG=34 
      NIONG=92                                                        
      NIOND=61                                                          
      NATT1=18    
#                                                       
      E[1]=0.0                                                          
      E(2)=2.0*EMASS/(2.015650*AMU)   
# IONISATION ENERGY FOR PARA =15.42580155 EV
# IONISATION ENERGY FOR ORTHO=15.41833111 EV
# USE ORTHO ENERGY FOR ROOM TEMPERATURE GAS
      E(3)=15.418 
      EION[1]=E(3)
# DISSOCIATIVE IONISATION THRESHOLD
      EION(2)=18.076
#                                                     
      E(4)=0.0                                     
      E(5)=0.0                              
      E(6)=0.0 
# OPAL BEATY FOR LOW ENERGY
      ESCOBY=0.5
      EOBY[1]=EION[1]*ESCOBY
      EOBY(2)=EION(2)*ESCOBY
#     EOBY[1]=6.5 
# FLUORESENCE DATA
      DO 24 J=1,2
      LEGAS[J]=0
      ISHELL[J]=0
      NC0[J]=0
      EC0[J]=0.0
      WKLM[J]=0.0
      EFL[J]=0.0
      NG1[J]=0
      EG1[J]=0.0
      NG2[J]=0
      EG2[J]=0.0
   24 CONTINUE
# OFFSET ENERGY FOR IONISATION ANGULAR DISTRIBUTION
      DO 49 J=1,NION
      DO 48 I=1,NASIZE
      if(EG[I]:
 > EION[J]) :
       IOFFION[J]=I-1
       GO TO 49
      # endif
   48 CONTINUE
   49 CONTINUE
#
      EIN[1]=-.043928
      EIN(2)=-.072741
      EIN(3)=-.10085
      EIN(4)=-.12797
      EIN(5)=0.043928                                                   
      EIN(6)=0.072741                                                  
      EIN(7)=0.10085                                                    
      EIN(8)=0.12797                                                 
      EIN(9)=0.515916                                                   
      EIN(10)=0.568                                                     
      EIN(11)=1.00265                                                   
      EIN(12)=1.46083 
# b3 SIGMA+ DISSOCIATION SPLIT INTO 4 ENERGY LOSSES
      EIN(13)=8.0  
      EIN(14)=9.0 
      EIN(15)=9.5 
      EIN(16)=10.0
# B1 SIGMA+ LYMAN BANDS
      EIN(17)=11.189
      EIN(18)=11.353
      EIN(19)=11.512
      EIN(20)=11.666
      EIN(21)=11.817
      EIN(22)=11.963
      EIN(23)=12.105
      EIN(24)=12.244
      EIN(25)=12.378
      EIN(26)=12.509
      EIN(27)=12.636
      EIN(28)=12.759
      EIN(29)=12.878
      EIN(30)=12.994
      EIN(31)=13.106
      EIN(32)=13.215
      EIN(33)=13.320
      EIN(34)=13.422
      EIN(35)=13.521
      EIN(36)=13.617
      EIN(37)=13.709
      EIN(38)=13.798
      EIN(39)=13.884
      EIN(40)=13.967
      EIN(41)=14.047
      EIN(42)=14.124
      EIN(43)=14.197
      EIN(44)=14.268
      EIN(45)=14.335
      EIN(46)=14.399
      EIN(47)=14.458
      EIN(48)=14.514
      EIN(49)=14.564
      EIN(50)=14.608
      EIN(51)=14.644
      EIN(52)=14.668
      EIN(53)=14.678
# C1 PI WERNER BANDS
      EIN(54)=12.285
      EIN(55)=12.571
      EIN(56)=12.840
      EIN(57)=13.094
      EIN(58)=13.332
      EIN(59)=13.553
      EIN(60)=13.758
      EIN(61)=13.947
      EIN(62)=14.119
      EIN(63)=14.273
      EIN(64)=14.408
      EIN(65)=14.522
      EIN(66)=14.611
      EIN(67)=14.672
# C3 PI 
      EIN(68)=11.779
      EIN(69)=13.100
# A3 SIGMA
      EIN(70)=11.793
      EIN(71)=12.684
# E3 SIGMA
      EIN(72)=13.253
# EF1 SIGMA
      EIN(73)=12.301
      EIN(74)=12.841   
# B#1 SIGMA BANDS
      EIN(75)=13.698
      EIN(76)=13.931
      EIN(77)=14.144
      EIN(78)=14.333
      EIN(79)=14.494
      EIN(80)=14.613
      EIN(81)=14.651
      EIN(82)=14.664
      EIN(83)=14.672 
# D1 PI BANDS
      EIN(84)=13.994
      EIN(85)=14.270
      EIN(86)=14.530
      EIN(87)=14.775
      EIN(88)=15.003
      EIN(89)=15.218
      EIN(90)=15.418
      EIN(91)=15.602
      EIN(92)=15.772
      EIN(93)=15.928
      EIN(94)=16.068
      EIN(95)=16.191
      EIN(96)=16.299
      EIN(97)=16.390
      EIN(98)=16.462
      EIN(99)=16.516 
# B##1 SIGMA
      EIN(100)=14.491
# D#1 PI 
      EIN(101)=14.609 
# B###1 SIGMA  + D##1 PI
      EIN(102)=14.899   
# B####1 SIGMA + D###1 PI
      EIN(103)=15.060
# B#####1 SIGAM + D####1 PI
      EIN(104)=15.150
# CONTINUUM DISSOCIATIVE EXC 
      EIN(105)=15.300
# PREDISSOCIATION ABOVE IONISATION POTENTIAL
      EIN(106)=15.800
# Q1 + Q2 STATES SINGLETS TO NEUTRAL DISSOCIATION
      EIN(107)=32.0
      EIN(108)=0.0
# BEF SCALING :  BINDING ENERGIES
      BEF[1]=E(3)
      BEF(2)=E(3)
      BEF(3)=E(3)
      BEF(4)=E(3)
      BEF(5)=E(3)
# 
# ATTACHMENT THRESHOLD EV FOR 2 SIGMAu
      EATTTH=3.723
# ATTACHMENT WIDTH FOR 2 SIGMAu
      EATTWD=0.45
# ATTACHMENT AMPLITUDE FOR 2 SIGMAu
      AMPATT=3.0D-21
# ATTACHMENT THRESHOLD EV FOR 2 SIGMAg
      EATTTH1=13.922
# ATTACHMENT WIDTH FOR 2 SIGMAg
      EATTWD1=0.95
# ATTACHMENT AMPLITUDE FOR 2 SIGMAg
      AMPATT1=3.0D-20
#-----------------------------------------------------------------------
# ROTATIONAL ENERGY LEVELS: ERLVL(N)
#  PARA - ORTHO ENERGY DIFFERENCE ( J=0 - J=1 ROT LEVEL) = 0.01469049 EV
#  REF :ASTROPHYS J.  282(1984)L85
      ERLVL[1]=0.01469049
      ERLVL(2)=EIN(5)
      ERLVL(3)=0.01469049+EIN(6)
      ERLVL(4)=EIN(5)+EIN(7)
      ERLVL(5)=0.01469049+EIN(6)+EIN(8)
      ERLVL(6)=EIN(5)+EIN(7)+0.15381
      ERLVL(7)=0.01469049+EIN(6)+EIN(8)+0.1794
#**********************************************************************
# ENTER PENNING TRANSFER FRACTION FOR EACH LEVEL
# USE TRANSFER FRACTION IN RANGE BETWEEN 0.0 AND 0.2 FOR MOST MIXTURES
      DO 50 NL=1,NIN
      PENFRA[1,NL]=0.0
# PENNING TRANSFER DISTANCE MICRONS
      PENFRA[2,NL]=1.0
# PENNING TRANSFER TIME PICOSECONDS
   50 PENFRA[3,NL]=1.0
#**********************************************************************
      if(IPEN == 0):
 GO TO 4 
      DO 3 KDUM=1,NIN
      if(PENFRA[1,KDUM] == 0.0):
 GO TO 3
      WRITE(6,999) NAME,EIN(KDUM),PENFRA[1,KDUM],PENFRA[2,KDUM],PENFRA[3,KDUM]
  999 print(' GAS = ',A15,' ENERGY LEVEL = ','%.4f' %,' EV.',/,' PENNING PROBABILITY =','%.3f' % ,' ABS.LENGTH =',F7.2,' DECAY TIME =',F7.1,/)    
    3 CONTINUE
#
# OFFSET ENERGY FOR EXCITATION LEVELS ANGULAR DISTRIBUTION
    4 DO 5 NL=1,NIN
      DO 651 I=1,NASIZE
      if(EG[I]:
 > abs(EIN(NL))) :
       IOFFN(NL)=I-1
       GO TO 5
      # endif
  651 CONTINUE
    5 CONTINUE
#
# ROTATIONAL POPULATIONS
      DO 6 K=1,7,2
    6 PJ[K]=3*(2*K+1)*math.exp(-ERLVL[K]/AKT)
      DO 7 K=2,6,2
    7 PJ[K]=(2*K+1)*math.exp(-ERLVL[K]/AKT)
      SUM=1.0
      DO 8 K=1,7
    8 SUM=SUM+PJ[K]        
      FROT0=1.0/SUM                                                     
      FROT1=PJ[1]/SUM                                                   
      FROT2=PJ(2)/SUM                                                   
      FROT3=PJ(3)/SUM                                                   
      FROT4=PJ(4)/SUM                                                   
      FROT5=PJ(5)/SUM 
      FROT6=PJ(6)/SUM
      FROT7=PJ(7)/SUM 
#     WRITE(6,88) FROT0,FROT1,FROT2,FROT3,FROT4,FROT5,FROT6,FROT7
#  88 print(3X,' FROT0=',F9.6,' FROT1=',F9.6,' FROT2=',F9.6,' FROT3=',
#    /F9.6,' FROT4=',F9.6,' FROT5=',F9.6,' FROT6=',F9.6,' FROT7=',F9.6) 
#-----------------------------------------------------------------------        
#
      SCRPT[1]='                                                  '
      SCRPT(2)=' ELASTIC  ANISOTROPIC        HYDROGEN             '
      if(NANISO == 0):
 :
      SCRPT(2)=' ELASTIC    ISOTROPIC        HYDROGEN             '
      # endif
      SCRPT(3)=' IONISATION                       ELOSS= 15.418   '
      SCRPT(4)=' DISSOCIATIVE IONISATION          ELOSS= 18.076   '
      SCRPT(5)=' ATTACHMENT                                       '
      SCRPT(6)='                                                  '
      SCRPT(7)='                                                  '
      SCRPT(8)=' ROTATION   2-0                   ELOSS= -0.043928'
      SCRPT(9)=' ROTATION   3-1                   ELOSS= -0.072741'
      SCRPT(10)=' ROTATION   4-2                   ELOSS= -0.10085 '
      SCRPT(11)=' ROTATION   5-3                   ELOSS= -0.12797 '
      SCRPT(12)=' ROTATION   0-2                   ELOSS=  0.043928'
      SCRPT(13)=' ROTATION   1-3                   ELOSS=  0.072741'
      SCRPT(14)=' ROTATION   2-4 + 4-6 + 6-8       ELOSS=  0.10085 '
      SCRPT(15)=' ROTATION   3-5 + 5-7 + 7-9       ELOSS=  0.12797 ' 
      SCRPT(16)=' VIBRATION   V1 DJ=0              ELOSS=  0.515916'
      SCRPT(17)=' VIBRATION   V1 DJ=2              ELOSS=  0.568   '
      SCRPT(18)=' VIBRATION  2V1                   ELOSS=  1.00265 '
      SCRPT(19)=' VIBRATION  3V1                   ELOSS=  1.46083 '
      SCRPT(20)=' B3 SIG       DISSOCIATIVE        ELOSS=  8.00    '
      SCRPT(21)=' B3 SIG       DISSOCIATIVE        ELOSS=  9.00    '
      SCRPT(22)=' B3 SIG       DISSOCIATIVE        ELOSS=  9.50    '
      SCRPT(23)=' B3 SIG       DISSOCIATIVE        ELOSS= 10.00    '
      SCRPT(24)=' B1SIG V=0    LYMAN               ELOSS= 11.189   '
      SCRPT(25)=' B1SIG V=1    LYMAN               ELOSS= 11.353   '
      SCRPT(26)=' B1SIG V=2    LYMAN .001% DISSOC  ELOSS= 11.512   '
      SCRPT(27)=' B1SIG V=3    LYMAN 0.01% DISSOC  ELOSS= 11.666   '
      SCRPT(28)=' B1SIG V=4    LYMAN 0.15% DISSOC  ELOSS= 11.817   '
      SCRPT(29)=' B1SIG V=5    LYMAN 1.71% DISSOC  ELOSS= 11.963   '
      SCRPT(30)=' B1SIG V=6    LYMAN 3.09% DISSOC  ELOSS= 12.105   '
      SCRPT(31)=' B1SIG V=7    LYMAN 21.1% DISSOC  ELOSS= 12.244   '
      SCRPT(32)=' B1SIG V=8    LYMAN 29.1% DISSOC  ELOSS= 12.378   '
      SCRPT(33)=' B1SIG V=9    LYMAN 41.5% DISSOC  ELOSS= 12.509   '
      SCRPT(34)=' B1SIG V=10   LYMAN 41.0% DISSOC  ELOSS= 12.636   '
      SCRPT(35)=' B1SIG V=11   LYMAN 40.7% DISSOC  ELOSS= 12.759   '
      SCRPT(36)=' B1SIG V=12   LYMAN 52.3% DISSOC  ELOSS= 12.878   '
      SCRPT(37)=' B1SIG V=13   LYMAN 51.1% DISSOC  ELOSS= 12.994   '
      SCRPT(38)=' B1SIG V=14   LYMAN 54.2% DISSOC  ELOSS= 13.106   '
      SCRPT(39)=' B1SIG V=15   LYMAN 55.8% DISSOC  ELOSS= 13.216   '
      SCRPT(40)=' B1SIG V=16   LYMAN 55.4% DISSOC  ELOSS= 13.320   '
      SCRPT(41)=' B1SIG V=17   LYMAN 60.1% DISSOC  ELOSS= 13.422   '
      SCRPT(42)=' B1SIG V=18   LYMAN 60.8% DISSOC  ELOSS= 13.521   '
      SCRPT(43)=' B1SIG V=19   LYMAN 63.4% DISSOC  ELOSS= 13.617   '
      SCRPT(44)=' B1SIG V=20   LYMAN 63.7% DISSOC  ELOSS= 13.709   '
      SCRPT(45)=' B1SIG V=21   LYMAN 64.3% DISSOC  ELOSS= 13.798   '
      SCRPT(46)=' B1SIG V=22   LYMAN 65.1% DISSOC  ELOSS= 13.884   '
      SCRPT(47)=' B1SIG V=23   LYMAN 65.9% DISSOC  ELOSS= 13.967   '
      SCRPT(48)=' B1SIG V=24   LYMAN 67.7% DISSOC  ELOSS= 14.047   '
      SCRPT(49)=' B1SIG V=25   LYMAN 69.1% DISSOC  ELOSS= 14.124   '
      SCRPT(50)=' B1SIG V=26   LYMAN 71.2% DISSOC  ELOSS= 14.197   '
      SCRPT(51)=' B1SIG V=27   LYMAN 73.0% DISSOC  ELOSS= 14.268   '
      SCRPT(52)=' B1SIG V=28   LYMAN 75.3% DISSOC  ELOSS= 14.335   '
      SCRPT(53)=' B1SIG V=29   LYMAN 77.4% DISSOC  ELOSS= 14.399   '
      SCRPT(54)=' B1SIG V=30   LYMAN 79.5% DISSOC  ELOSS= 14.458   '
      SCRPT(55)=' B1SIG V=31   LYMAN 81.6% DISSOC  ELOSS= 14.514   '
      SCRPT(56)=' B1SIG V=32   LYMAN 84.2% DISSOC  ELOSS= 14.564   '
      SCRPT(57)=' B1SIG V=33   LYMAN 87.3% DISSOC  ELOSS= 14.608   '
      SCRPT(58)=' B1SIG V=34   LYMAN 91.1% DISSOC  ELOSS= 14.644   '
      SCRPT(59)=' B1SIG V=35   LYMAN 95.6% DISSOC  ELOSS= 14.668   '
      SCRPT(60)=' B1SIG V=36   LYMAN 99.5% DISSOC  ELOSS= 14.678   '
      SCRPT(61)=' C1 PI V=0    WERNER              ELOSS= 12.285   '
      SCRPT(62)=' C1 PI V=1    WERNER              ELOSS= 12.571   '
      SCRPT(63)=' C1 PI V=2    WERNER              ELOSS= 12.840   '
      SCRPT(64)=' C1 PI V=3    WERNER              ELOSS= 13.094   '
      SCRPT(65)=' C1 PI V=4    WERNER              ELOSS= 13.332   '
      SCRPT(66)=' C1 PI V=5    WERNER              ELOSS= 13.553   '
      SCRPT(67)=' C1 PI V=6    WERNER .067% DISSOC ELOSS= 13.758   '
      SCRPT(68)=' C1 PI V=7    WERNER .145% DISSOC ELOSS= 13.947   '
      SCRPT(69)=' C1 PI V=8    WERNER 3.72% DISSOC ELOSS= 14.119   '
      SCRPT(70)=' C1 PI V=9    WERNER 6.43% DISSOC ELOSS= 14.273   '
      SCRPT(71)=' C1 PI V=10   WERNER 37.7% DISSOC ELOSS= 14.408   '
      SCRPT(72)=' C1 PI V=11   WERNER 42.5% DISSOC ELOSS= 14.522   '
      SCRPT(73)=' C1 PI V=12   WERNER 64.2% DISSOC ELOSS= 14.611   '
      SCRPT(74)=' C1 PI V=13   WERNER 82.5% DISSOC ELOSS= 14.672   '
      SCRPT(75)=' C3 PI V=0-4  DISSOCIATIVE        ELOSS= 11.779   '
      SCRPT(76)=' C3 PI V=5-18 DISSOCIATIVE        ELOSS= 13.100   '
      SCRPT(77)=' A3SIG V=0-3  DISSOCIATIVE        ELOSS= 11.793   '
      SCRPT(78)=' A3SIG V=3-17 DISSOCIATIVE        ELOSS= 12.684   '
      SCRPT(79)=' E3SIG V=0-9  DISSOCIATIVE        ELOSS= 13.253   '
      SCRPT(80)=' EF1SIG V=0-5        50.0% DISSOC ELOSS= 12.301   '
      SCRPT(81)=' EF1SIG V=6-19       50.0% DISSOC ELOSS= 12.841   '
      SCRPT(82)=' B#1SIG V=0                       ELOSS= 13.698   '
      SCRPT(83)=' B#1SIG V=1                       ELOSS= 13.931   '
      SCRPT(84)=' B#1SIG V=2                       ELOSS= 14.144   '
      SCRPT(85)=' B#1SIG V=3                       ELOSS= 14.333   '
      SCRPT(86)=' B#1SIG V=4                       ELOSS= 14.494   '
      SCRPT(87)=' B#1SIG V=5                       ELOSS= 14.613   '
      SCRPT(88)=' B#1SIG V=6    6.5% DISSOC        ELOSS= 14.651   '
      SCRPT(89)=' B#1SIG V=7   15.2% DISSOC        ELOSS= 14.664   '
      SCRPT(90)=' B#1SIG V=8   45.1% DISSOC        ELOSS= 14.672   '
      SCRPT(91)=' D1 PI  V=0                       ELOSS= 13.994   '
      SCRPT(92)=' D1 PI  V=1                       ELOSS= 14.270   '
      SCRPT(93)=' D1 PI  V=2                       ELOSS= 14.530   '
      SCRPT(94)=' D1 PI  V=3                       ELOSS= 14.775   '
      SCRPT(95)=' D1 PI  V=4                       ELOSS= 15.003   '
      SCRPT(96)=' D1 PI  V=5   .002% DISSOC        ELOSS= 15.218   '
      SCRPT(97)=' D1 PI  V=6   .077% DISSOC        ELOSS= 15.418   '
      SCRPT(98)=' D1 PI  V=7   0.39% DISSOC        ELOSS= 15.602   '
      SCRPT(99)=' D1 PI  V=8   3.71% DISSOC        ELOSS= 15.772   '
      SCRPT(100)=' D1 PI  V=9   10.3% DISSOC        ELOSS= 15.928   '
      SCRPT(101)=' D1 PI  V=10  35.7% DISSOC        ELOSS= 16.068   '
      SCRPT(102)=' D1 PI  V=11  48.1% DISSOC        ELOSS= 16.191   '
      SCRPT(103)=' D1 PI  V=12  52.7% DISSOC        ELOSS= 16.299   '
      SCRPT(104)=' D1 PI  V=13  63.8% DISSOC        ELOSS= 16.390   '
      SCRPT(105)=' D1 PI  V=14  85.9% DISSOC        ELOSS= 16.462   '
      SCRPT(106)=' D1 PI  V=15  87.0% DISSOC        ELOSS= 16.516   '
      SCRPT(107)=' B##SIG V=0-6 DISSOCIATIVE        ELOSS= 14.491   '
      SCRPT(108)=' D#1 PI V=0-3 DISSOCIATIVE        ELOSS= 14.609   '
      SCRPT(109)=' 5P SIG 6P PI DISSOCIATIVE        ELOSS= 14.899   '
      SCRPT(110)=' 6P SIG 6P PI DISSOCIATIVE        ELOSS= 15.060   '
      SCRPT(111)=' 7P SIG 7P PI DISSOCIATIVE        ELOSS= 15.150   '
      SCRPT(112)=' CONTINUUM EX DISSOCIATIVE        EL0SS= 15.300   '
      SCRPT(113)=' PREDISS >IP  DISSOCIATIVE        ELOSS= 15.800   '
      SCRPT(114)=' Q1 +Q2  SINGLETS NEUTRAL DISS    ELOSS= 32.0     '
      SCRPT(115)=' BREMSSTRAHLUNG FROM HYDROGEN ATOMS               '
# 
c*****************************                    
#      EN=-ESTEP/2.0           
#**************************                           
      DO 900 I=1,NSTEP 
      EN=EG[I]                                                  
#     EN=EN+ESTEP   
      if(EN > EIN[1]:
) :
       GAMMA1=(EMASS2+2.00*EN)/EMASS2
       GAMMA2=GAMMA1*GAMMA1
       BETA=math.sqrt(1.00-1.00/GAMMA2)
       BETA2=BETA*BETA
      # endif 
#                                                                     
      DO 60 J=2,NELM                                                   
      if(EN <= XELM[J]:
) GO TO 70                                       
   60 CONTINUE                                                          
      J=NELM 
# ELASTIC MOMENTUM TRANSFER                                                          
   70 A=(YELM[J]-YELM(J-1))/(XELM[J]-XELM(J-1))                         
      B=(XELM(J-1)*YELM[J]-XELM[J]*YELM(J-1))/(XELM(J-1)-XELM[J])      
      QMOM=(A*EN+B)*1.0D-16   
# ELASTIC X-SECTION  
      A=(YELT[J]-YELT(J-1))/(XELM[J]-XELM(J-1))                         
      B=(XELM(J-1)*YELT[J]-XELM[J]*YELT(J-1))/(XELM(J-1)-XELM[J])      
      QELA=(A*EN+B)*1.0D-16
# ANGULAR DISTRIBUTION FACTOR ( OKRIMOVSKKY)
      A=(YEPS[J]-YEPS(J-1))/(XELM[J]-XELM(J-1))                         
      B=(XELM(J-1)*YEPS[J]-XELM[J]*YEPS(J-1))/(XELM(J-1)-XELM[J])      
      PQ2=A*EN+B      
# EPSILON =1.0-YEPS
      PQ2=1.00-PQ2       
      PQ1=0.5+(QELA-QMOM)/QELA
      if(NANISO == 0):
 PEQEL(2,I)=0.5
      if(NANISO == 1):
 PEQEL(2,I)=PQ1
      if(NANISO == 2):
 PEQEL(2,I)=PQ2
      Q(2,I)=QELA
      if(NANISO == 0):
 Q(2,I)=QMOM                                   
# GROSS IONISATION                                                      
      QION(1,I)=0.0  
      PEQION(1,I)=0.50
      if(NANISO == 2):
 PEQION(1,I)=0.00
      if(EN < EION[1]:
) GO TO 123    
      if(EN > XION(NIONG):
) GO TO 121                                  
      DO 110 J=2,NIONG                                                  
      if(EN <= XION[J]:
) GO TO 120                                       
  110 CONTINUE                                                          
      J=NIONG                                                  
  120 A=(YION[J]-YION(J-1))/(XION[J]-XION(J-1))                         
      B=(XION(J-1)*YION[J]-XION[J]*YION(J-1))/(XION(J-1)-XION[J])       
      QION(1,I)=(A*EN+B)*1.D-16                    
      GO TO 122
# USE BORN-BETHE X-SECTION ABOVE XION(NIONG) EV
  121 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(1,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)
  122 CONTINUE
      if(EN <= (2.0*EION[1]:
)) GO TO 123
      PEQION(1,I)=PEQEL(2,(I-IOFFION[1]))  
# DISSOCIATIVE IONISATION
  123 QION(2,I)=0.0
      PEQION(2,I)=0.50
      if(NANISO == 2):
 PEQION(2,I)=0.00
      if(EN < EION(2):
) GO TO 150
      if(EN > (XIOND[NIOND]):
) GO TO 141
      DO 130 J=2,NIOND
      if(EN <= XIOND[J]):
 GO TO 140
  130 CONTINUE
      J=NIOND
  140 A=(YIOND[J]-YIOND[J-1])/(XIOND[J]-XIOND[J-1])                  
      B=(XIOND[J-1]*YIOND[J]-XIOND[J]*YIOND[J-1])/(XIOND[J-1]-XIOND[J])
      QION(2,I)=(A*EN+B)*1.D-16
      GO TO 142
# USE BORN-BETHE X-SECTION ABOVE XIOND[NIOND] EV
  141 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(2,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.05481 
  142 CONTINUE
      if(EN <= (2.0*EION(2):
)) GO TO 150
      PEQION(2,I)=PEQEL(2,(I-IOFFION(2)))
# CALCULATE NON-DISSOCIATIVE IONISATION
  150  if(QION(1,I) == 0.0) GO TO 200
       QION(1,I)=QION(1,I)-QION(2,I)
# ATTACHMENT                                                            
  200 Q(4,I)=0.0
      PEQEL(4,I)=0.5
      if(NANISO == 2):
 PEQEL(4,I)=0.0
# ROTATIONAL DEP# endANCE OF ATTACHMENT TO 2 SIGMAu
      if(EN < (EATTTH-ERLVL(7):
)) GO TO 300
      Q(4,I)=AMPATT*5.00*FROT7*math.exp(-(EN-EATTTH+ERLVL(7))/EATTWD)
      if(EN < (EATTTH-ERLVL(6):
)) GO TO 300
      Q(4,I)=Q(4,I)+AMPATT*3.96*FROT6*math.exp(-(EN-EATTTH+ERLVL(6))/EATTWD)
      if(EN < (EATTTH-ERLVL(5):
)) GO TO 300
      Q(4,I)=Q(4,I)+AMPATT*3.15*FROT5*math.exp(-(EN-EATTTH+ERLVL(5))/EATTWD)
      if(EN < (EATTTH-ERLVL(4):
)) GO TO 300
      Q(4,I)=Q(4,I)+AMPATT*2.50*FROT4*math.exp(-(EN-EATTTH+ERLVL(4))/EATTWD)
      if(EN < (EATTTH-ERLVL(3):
)) GO TO 300
      Q(4,I)=Q(4,I)+AMPATT*1.99*FROT3*math.exp(-(EN-EATTTH+ERLVL(3))/EATTWD)
      if(EN < (EATTTH-ERLVL(2):
)) GO TO 300
      Q(4,I)=Q(4,I)+AMPATT*1.58*FROT2*math.exp(-(EN-EATTTH+ERLVL(2))/EATTWD)
      if(EN < (EATTTH-ERLVL[1]:
)) GO TO 300
      Q(4,I)=Q(4,I)+AMPATT*1.26*FROT1*math.exp(-(EN-EATTTH+ERLVL[1])/EATTWD)
      if(EN < EATTTH):
 GO TO 300
      Q(4,I)=Q(4,I)+AMPATT*FROT0*math.exp(-(EN-EATTTH)/EATTWD)
      if(EN < XATT[1]:
) GO TO 300
# ATTACHMENT TO 2 SIGMAg   
      if(EN > XATT(NATT1):
) GO TO 250                                  
      DO 210 J=2,NATT1                                                 
      if(EN <= XATT[J]:
) GO TO 220  
  210 CONTINUE                                                          
      J=NATT1                                                           
  220 A=(YATT[J]-YATT(J-1))/(XATT[J]-XATT(J-1))                         
      B=(XATT(J-1)*YATT[J]-XATT[J]*YATT(J-1))/(XATT(J-1)-XATT[J])       
      Q(4,I)=Q(4,I)+(A*EN+B)*1.D-16                 
# HIGH ENERGY ATTACHMENT TO 2 SIGMAg
# 250 CONTINUE  
  250 if(EN <= EATTTH1) GO TO 300
      Q(4,I)=Q(4,I)+AMPATT1*math.exp(-(EN-EATTTH1)/EATTWD1)
#                   
  300 Q(5,I)=0.0                                               
      Q(6,I)=0.0 
#
      DO 1005 NL=1,NIN+1
      QIN(NL,I)=0.00
      PEQIN(NL,I)=0.50
      if(NANISO == 2):
 :
       PEQIN(NL,I)=0.00  
      # endif
 1005 CONTINUE                                                     
#--------------------------------------------------------------------- 
#                    SUPERELASTIC 2-0
      if(EN <= 0.0):
 GO TO 1100
      if(EN > XROT0(NROT0):
) GO TO 1100
      DO 1010 J=2,NROT0
      if((EN+EIN(5):
) <= XROT0[J]) GO TO 1020
 1010 CONTINUE
      J=NROT0
 1020 A=(YROT0[J]-YROT0(J-1))/(XROT0[J]-XROT0(J-1))                     
      B=(XROT0(J-1)*YROT0[J]-XROT0[J]*YROT0(J-1))/(XROT0(J-1)-XROT0[J])
      QIN(1,I)=FROT2*0.2*(EN+EIN(5))*(A*(EN+EIN(5))+B)*1.D-16/EN 
#                    SUPERELASTIC 3-1
 1100 if(EN <= 0.0) GO TO 1200 
      if(EN > XROT1(NROT1):
) GO TO 1200
      DO 1110 J=2,NROT1
      if((EN+EIN(6):
) <= XROT1[J]) GO TO 1120
 1110 CONTINUE
      J=NROT1
 1120 A=(YROT1[J]-YROT1(J-1))/(XROT1[J]-XROT1(J-1))                     
      B=(XROT1(J-1)*YROT1[J]-XROT1[J]*YROT1(J-1))/(XROT1(J-1)-XROT1[J]) 
      QIN(2,I)=FROT3*(3.0/7.0)*(EN+EIN(6))*(A*(EN+EIN(6))+B)*1.D-16/EN 
#                    SUPERELASTIC 4-2
 1200 if(EN <= 0.0) GO TO 1250
      if(EN > XROT2(NROT2):
) GO TO 1250
      DO 1210 J=2,NROT2
      if((EN+EIN(7):
) <= XROT2[J]) GO TO 1220
 1210 CONTINUE
      J=NROT2
 1220 A=(YROT2[J]-YROT2(J-1))/(XROT2[J]-XROT2(J-1))                     
      B=(XROT2(J-1)*YROT2[J]-XROT2[J]*YROT2(J-1))/(XROT2(J-1)-XROT2[J])
      QIN(3,I)=FROT4*(5.0/9.0)*(EN+EIN(7))*(A*(EN+EIN(7))+B)*1.D-16/EN 
#                    SUPERELASTIC 5-3 
 1250 if(EN <= 0.0) GO TO 1290
      if(EN > XROT3(NROT3):
) GO TO 1290
      DO 1260 J=2,NROT3
      if((EN+EIN(8):
) <= XROT3[J]) GO TO 1270
 1260 CONTINUE
      J=NROT3
 1270 A=(YROT3[J]-YROT3(J-1))/(XROT3[J]-XROT3(J-1))                     
      B=(XROT3(J-1)*YROT3[J]-XROT3[J]*YROT3(J-1))/(XROT3(J-1)-XROT3[J])
      QIN(4,I)=FROT5*(7.0/11.)*(EN+EIN(8))*(A*(EN+EIN(8))+B)*1.D-16/EN 
#                      ROTATION 0-2 
 1290 if(EN <= EIN(5)) GO TO 1400
      if(EN > XROT0(NROT0):
) GO TO 1330                         
      DO 1310 J=2,NROT0                                                 
      if(EN <= XROT0[J]:
) GO TO 1320                                     
 1310 CONTINUE                                                          
      J=NROT0                                                           
 1320 A=(YROT0[J]-YROT0(J-1))/(XROT0[J]-XROT0(J-1))                     
      B=(XROT0(J-1)*YROT0[J]-XROT0[J]*YROT0(J-1))/(XROT0(J-1)-XROT0[J]) 
      QIN(5,I)=(A*EN+B)*1.D-16*FROT0        
      GO TO 2330 
 1330 QIN(5,I)=YROT0(NROT0)*1.D-16*FROT0*XROT0(NROT0)/EN  
 2330 if(EN <= (2.0*EIN(5))) GO TO 1400
      PEQIN(5,I)=PEQEL(2,(I-IOFFN(5)))
#                        ROTATION 1-3                                   
 1400 if(EN <= EIN(6)) GO TO 1401
      if(EN > XROT1(NROT1):
) GO TO 1331                     
      DO 1311 J=2,NROT1                                                 
      if(EN <= XROT1[J]:
) GO TO 1321                                     
 1311 CONTINUE                                                          
      J=NROT1                                                           
 1321 A=(YROT1[J]-YROT1(J-1))/(XROT1[J]-XROT1(J-1))                     
      B=(XROT1(J-1)*YROT1[J]-XROT1[J]*YROT1(J-1))/(XROT1(J-1)-XROT1[J]) 
      QIN(6,I)=(A*EN+B)*1.D-16*FROT1           
      GO TO 2331
 1331 QIN(6,I)=YROT1(NROT1)*1.D-16*FROT1*XROT1(NROT1)/EN         
 2331 if(EN <= (2.0*EIN(6))) GO TO 1401
      PEQIN(6,I)=PEQEL(2,(I-IOFFN(6)))
#                      ROTATION 2-4 + 4-6 + 6-8
# USED SCALED 2-4 XSECTION FOR 4-6 AND 6-8 
c ALSO SCALED FOR ENERGY LOSS BY 1.5 FOR 4-6 AND BY 2.0 FOR 6-8                              
 1401 if(EN <= EIN(7)) GO TO 1402
      if(EN > XROT2(NROT2):
) GO TO 1332                               
      DO 1312 J=2,NROT2                                                 
      if(EN <= XROT2[J]:
) GO TO 1322                                     
 1312 CONTINUE                                                          
      J=NROT2                                                           
 1322 A=(YROT2[J]-YROT2(J-1))/(XROT2[J]-XROT2(J-1))                     
      B=(XROT2(J-1)*YROT2[J]-XROT2[J]*YROT2(J-1))/(XROT2(J-1)-XROT2[J]) 
      QIN(7,I)=(A*EN+B)*1.D-16*(FROT2+FROT4*0.8*1.5+FROT6*0.5*2.0)    
      GO TO 2332
 1332 QIN(7,I)=YROT2(NROT2)*1.D-16*(FROT2+FROT4*0.8*1.5+FROT6*0.5*2.0)
      QIN(7,I)=QIN(7,I)*XROT2(NROT2)/EN   
 2332 if(EN <= (2.0*EIN(7))) GO TO 1402
      PEQIN(7,I)=PEQEL(2,(I-IOFFN(7)))
#                        ROTATION 3-5 + 5-7 + 7-9
# USED SCALED 3-5 XSECTION FOR 5-7 AND 7-9 
# ALSO SCALED FOR ENERGY LOSS BY 1.4 FOR 5-7 AND 1.8 FOR 7-9     
 1402 if(EN <= EIN(8)) GO TO 1403 
      if(EN > XROT3(NROT3):
) GO TO 1333                        
      DO 1313 J=2,NROT3                                                 
      if(EN <= XROT3[J]:
) GO TO 1323                                     
 1313 CONTINUE                                                          
      J=NROT3                                                           
 1323 A=(YROT3[J]-YROT3(J-1))/(XROT3[J]-XROT3(J-1))                     
      B=(XROT3(J-1)*YROT3[J]-XROT3[J]*YROT3(J-1))/(XROT3(J-1)-XROT3[J]) 
      QIN(8,I)=(A*EN+B)*1.D-16*(FROT3+FROT5*0.8*1.4+FROT7*0.5*1.8)   
      GO TO 2333
 1333 QIN(8,I)=YROT3(NROT3)*1.D-16*(FROT3+FROT5*0.8*1.4+FROT7*0.5*1.8)
      QIN(8,I)=QIN(8,I)*XROT3(NROT3)/EN
 2333 if(EN <= (2.0*EIN(8))) GO TO 1403
      PEQIN(8,I)=PEQEL(2,(I-IOFFN(8)))
#-----------------------------------------------------------------------
# VIBRATION  V1   WITH DJ=0
 1403 if(EN <= EIN(9)) GO TO 304  
      if(EN > XVIB1(NVIB1):
) GO TO 303                         
      DO 301 J=2,NVIB1                                                  
      if(EN <= XVIB1[J]:
) GO TO 302                                      
  301 CONTINUE                                                          
      J=NVIB1                                                           
  302 A=(YVIB1[J]-YVIB1(J-1))/(XVIB1[J]-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1[J]-XVIB1[J]*YVIB1(J-1))/(XVIB1(J-1)-XVIB1[J]) 
      QIN(9,I)=(A*EN+B)*1.D-16        
      GO TO 1303
  303 QIN(9,I)=YVIB1(NVIB1)*1.D-16*XVIB1(NVIB1)/EN
 1303 if(EN <= (2.0*EIN(9))) GO TO 304 
      PEQIN(9,I)=PEQEL(2,(I-IOFFN(9)))
#                      
#  VIBRATION  V1   WITH DJ=2                                               
  304 if(EN <= EIN(10)) GO TO 308    
      if(EN > XVIB2(NVIB2):
) GO TO 307                               
      DO 305 J=2,NVIB2                                                  
      if(EN <= XVIB2[J]:
) GO TO 306                                      
  305 CONTINUE                                                          
      J=NVIB2                                                           
  306 A=(YVIB2[J]-YVIB2(J-1))/(XVIB2[J]-XVIB2(J-1))                     
      B=(XVIB2(J-1)*YVIB2[J]-XVIB2[J]*YVIB2(J-1))/(XVIB2(J-1)-XVIB2[J]) 
      QIN(10,I)=(A*EN+B)*1.D-16               
      GO TO 1307
  307 QIN(10,I)=YVIB2(NVIB2)*1.D-16*XVIB2(NVIB2)/EN   
 1307 if(EN <= (2.0*EIN(10))) GO TO 308 
      PEQIN(10,I)=PEQEL(2,(I-IOFFN(10)))
#            
# VIBRATION V2                                                         
  308 if(EN <= EIN(11)) GO TO 312 
      if(EN > XVIB3(NVIB3):
) GO TO 311                       
      DO 309 J=2,NVIB3                                                  
      if(EN <= XVIB3[J]:
) GO TO 310                                      
  309 CONTINUE                                                          
      J=NVIB3                                                           
  310 A=(YVIB3[J]-YVIB3(J-1))/(XVIB3[J]-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3[J]-XVIB3[J]*YVIB3(J-1))/(XVIB3(J-1)-XVIB3[J]) 
      QIN(11,I)=(A*EN+B)*1.D-16
      GO TO 2311
  311 QIN(11,I)=YVIB3(NVIB3)*1.D-16*XVIB3(NVIB3)/EN  
 2311 if(EN <= (2.0*EIN(11))) GO TO 312 
      PEQIN(11,I)=PEQEL(2,(I-IOFFN(11)))
#
# VIBRATION V3                                       
  312 if(EN <= EIN(12)) GO TO 316 
      if(EN > XVIB4(NVIB4):
) GO TO 315                               
      DO 313 J=2,NVIB4                                                  
      if(EN <= XVIB4[J]:
) GO TO 314                                      
  313 CONTINUE                                                          
      J=NVIB4                                                           
  314 A=(YVIB4[J]-YVIB4(J-1))/(XVIB4[J]-XVIB4(J-1))                     
      B=(XVIB4(J-1)*YVIB4[J]-XVIB4[J]*YVIB4(J-1))/(XVIB4(J-1)-XVIB4[J]) 
      QIN(12,I)=(A*EN+B)*1.D-16       
      GO TO 1315
  315 QIN(12,I)=YVIB4(NVIB4)*1.D-16*XVIB4(NVIB4)/EN      
 1315 if(EN <= (2.0*EIN(12))) GO TO 316 
      PEQIN(12,2)=PEQEL(2,(I-IOFFN(12)))
#        
#  B3 SIGMA DISSOCIATION ELOSS=8.0EV                        
  316 if(EN <= EIN(13)) GO TO 320
      if(EN > XB3S1(NB3S1):
) GO TO 320 
      DO 317 J=2,NB3S1                                                  
      if(EN <= XB3S1[J]:
) GO TO 318                                      
  317 CONTINUE                                                          
      J=NB3S1                                                           
  318 A=(YB3S1[J]-YB3S1(J-1))/(XB3S1[J]-XB3S1(J-1))                     
      B=(XB3S1(J-1)*YB3S1[J]-XB3S1[J]*YB3S1(J-1))/(XB3S1(J-1)-XB3S1[J]) 
      QIN(13,I)=(A*EN+B)*1.D-16
      if(EN <= (2.0*EIN(13):
)) GO TO 320 
      PEQIN(13,2)=PEQEL(2,(I-IOFFN(13)))
#       
#  B3 SIGMA DISSOCIATION ELOSS=9.0EV                                               
  320 if(EN <= EIN(14)) GO TO 324  
      if(EN > XB3S2(NB3S2):
) GO TO 324                               
      DO 321 J=2,NB3S2                                                  
      if(EN <= XB3S2[J]:
) GO TO 322                                      
  321 CONTINUE                                                          
      J=NB3S2                                                           
  322 A=(YB3S2[J]-YB3S2(J-1))/(XB3S2[J]-XB3S2(J-1))                     
      B=(XB3S2(J-1)*YB3S2[J]-XB3S2[J]*YB3S2(J-1))/(XB3S2(J-1)-XB3S2[J]) 
      QIN(14,I)=(A*EN+B)*1.D-16
      if(EN <= (2.0*EIN(14):
)) GO TO 324 
      PEQIN(14,2)=PEQEL(2,(I-IOFFN(14)))
#                                 
# B3 SIGMA DISSOCIATION ELOSS=9.5EV
  324 if(EN <= EIN(15)) GO TO 328 
      if(EN > XB3S3(NB3S3):
) GO TO 328                               
      DO 325 J=2,NB3S3                                                  
      if(EN <= XB3S3[J]:
) GO TO 326                                      
  325 CONTINUE                                                          
      J=NB3S3                                                           
  326 A=(YB3S3[J]-YB3S3(J-1))/(XB3S3[J]-XB3S3(J-1))                     
      B=(XB3S3(J-1)*YB3S3[J]-XB3S3[J]*YB3S3(J-1))/(XB3S3(J-1)-XB3S3[J]) 
      QIN(15,I)=(A*EN+B)*1.D-16   
      if(EN <= (2.0*EIN(15):
)) GO TO 328 
      PEQIN(15,2)=PEQEL(2,(I-IOFFN(15)))
#                                                                       
# B3 SIGMA DISSOCIATION ELOSS=10.0EV 
# SCALED BY 1/E**3 ABOVE XB3S4(NB3S4) EV
  328 if(EN <= EIN(16)) GO TO 332 
      if(EN > XB3S4(NB3S4):
) GO TO 331                               
      DO 329 J=2,NB3S4                                                  
      if(EN <= XB3S4[J]:
) GO TO 330                                      
  329 CONTINUE                                                          
      J=NB3S4                                                           
  330 A=(YB3S4[J]-YB3S4(J-1))/(XB3S4[J]-XB3S4(J-1))                     
      B=(XB3S4(J-1)*YB3S4[J]-XB3S4[J]*YB3S4(J-1))/(XB3S4(J-1)-XB3S4[J]) 
      QIN(16,I)=(A*EN+B)*1.D-16   
      GO TO 3331
  331 QIN(16,I)=YB3S4(NB3S4)*1.D-16*(XB3S4(NB3S4)/EN)**3
 3331 if(EN <= (2.0*EIN(16))) GO TO 332 
      PEQIN(16,2)=PEQEL(2,(I-IOFFN(16)))
#   LYMAN BANDS FOR VIB=0 TO 36    B1 SIGMA--- GROUND STATE             
#   DIPOLE ALLOWED  
# V=0                                                           
  332 if(EN <= EIN(17)) GO TO 333
      QIN(17,I)=.0016884/(EIN(17)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(17)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(17)+BEF[1])
      if(QIN(17,I):
 < 0.0) QIN(17,I)=0.0
      if(EN <= (2.0*EIN(17):
)) GO TO 333
      PEQIN(17,I)=PEQEL(2,(I-IOFFN(17)))
# V=1 B1 SIGMA
  333 if(EN <= EIN(18)) GO TO 334
      QIN(18,I)=.005782/(EIN(18)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(18)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(18)+BEF[1])
      if(QIN(18,I):
 < 0.0) QIN(18,I)=0.0
      if(EN <= (2.0*EIN(18):
)) GO TO 334
      PEQIN(18,I)=PEQEL(2,(I-IOFFN(18)))
# V=2 B1 SIGMA
  334 if(EN <= EIN(19)) GO TO 335
      QIN(19,I)=.011536/(EIN(19)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(19)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(19)+BEF[1])
      if(QIN(19,I):
 < 0.0) QIN(19,I)=0.0
      if(EN <= (2.0*EIN(18):
)) GO TO 335
      PEQIN(19,I)=PEQEL(2,(I-IOFFN(19)))
# V=3 B1 SIGMA
  335 if(EN <= EIN(20)) GO TO 336
      QIN(20,I)=.017531/(EIN(20)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(20)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(20)+BEF[1])
      if(QIN(20,I):
 < 0.0) QIN(20,I)=0.0
      if(EN <= (2.0*EIN(20):
)) GO TO 336
      PEQIN(20,I)=PEQEL(2,(I-IOFFN(20)))
# V=4 B1 SIGMA
  336 if(EN <= EIN(21)) GO TO 337
      QIN(21,I)=.022477/(EIN(21)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(21)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(21)+BEF[1])
      if(QIN(21,I):
 < 0.0) QIN(21,I)=0.0
      if(EN <= (2.0*EIN(21):
)) GO TO 337
      PEQIN(21,I)=PEQEL(2,(I-IOFFN(21)))
# V=5 B1 SIGMA
  337 if(EN <= EIN(22)) GO TO 338
      QIN(22,I)=.025688/(EIN(22)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(22)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(22)+BEF[1])
      if(QIN(22,I):
 < 0.0) QIN(22,I)=0.0
      if(EN <= (2.0*EIN(22):
)) GO TO 338
      PEQIN(22,I)=PEQEL(2,(I-IOFFN(22)))
# V=6 B1 SIGMA
  338 if(EN <= EIN(23)) GO TO 339
      QIN(23,I)=.027021/(EIN(23)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(23)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(23)+BEF[1])
      if(QIN(23,I):
 < 0.0) QIN(23,I)=0.0
      if(EN <= (2.0*EIN(23):
)) GO TO 339
      PEQIN(23,I)=PEQEL(2,(I-IOFFN(23)))
# V=7 B1 SIGMA
  339 if(EN <= EIN(24)) GO TO 340
      QIN(24,I)=.026731/(EIN(24)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(24)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(24)+BEF[1])
      if(QIN(24,I):
 < 0.0) QIN(24,I)=0.0
      if(EN <= (2.0*EIN(24):
)) GO TO 340
      PEQIN(24,I)=PEQEL(2,(I-IOFFN(24)))
# V=8 B1 SIGMA
  340 if(EN <= EIN(25)) GO TO 341
      QIN(25,I)=.025233/(EIN(25)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(25)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(25)+BEF[1])
      if(QIN(25,I):
 < 0.0) QIN(25,I)=0.0
      if(EN <= (2.0*EIN(25):
)) GO TO 341
      PEQIN(25,I)=PEQEL(2,(I-IOFFN(25)))
# V=9 B1 SIGMA
  341 if(EN <= EIN(26)) GO TO 342
      QIN(26,I)=.022980/(EIN(26)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(26)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(26)+BEF[1])
      if(QIN(26,I):
 < 0.0) QIN(26,I)=0.0
      if(EN <= (2.0*EIN(26):
)) GO TO 342
      PEQIN(26,I)=PEQEL(2,(I-IOFFN(26)))
# V=10 B1 SIGMA
  342 if(EN <= EIN(27)) GO TO 343
      QIN(27,I)=.020362/(EIN(27)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(27)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(27)+BEF[1])
      if(QIN(27,I):
 < 0.0) QIN(27,I)=0.0
      if(EN <= (2.0*EIN(27):
)) GO TO 343
      PEQIN(27,I)=PEQEL(2,(I-IOFFN(27)))
# V=11 B1 SIGMA
  343 if(EN <= EIN(28)) GO TO 344
      QIN(28,I)=.017653/(EIN(28)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(28)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(28)+BEF[1])
      if(QIN(28,I):
 < 0.0) QIN(28,I)=0.0
      if(EN <= (2.0*EIN(28):
)) GO TO 344
      PEQIN(28,I)=PEQEL(2,(I-IOFFN(28)))
# V=12 B1 SIGMA
  344 if(EN <= EIN(29)) GO TO 345
      QIN(29,I)=.015054/(EIN(29)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(29)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(29)+BEF[1])
      if(QIN(29,I):
 < 0.0) QIN(29,I)=0.0
      if(EN <= (2.0*EIN(29):
)) GO TO 345
      PEQIN(29,I)=PEQEL(2,(I-IOFFN(29)))
# V=13 B1 SIGMA
  345 if(EN <= EIN(30)) GO TO 346
      QIN(30,I)=.012678/(EIN(30)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(30)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(30)+BEF[1])
      if(QIN(30,I):
 < 0.0) QIN(30,I)=0.0
      if(EN <= (2.0*EIN(30):
)) GO TO 346
      PEQIN(30,I)=PEQEL(2,(I-IOFFN(30)))
# V=14 B1 SIGMA
  346 if(EN <= EIN(31)) GO TO 347
      QIN(31,I)=.010567/(EIN(31)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(31)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(31)+BEF[1])
      if(QIN(31,I):
 < 0.0) QIN(31,I)=0.0
      if(EN <= (2.0*EIN(31):
)) GO TO 347
      PEQIN(31,I)=PEQEL(2,(I-IOFFN(31)))
# V=15 B1 SIGMA
  347 if(EN <= EIN(32)) GO TO 348
      QIN(32,I)=.008746/(EIN(32)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(32)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(32)+BEF[1])
      if(QIN(32,I):
 < 0.0) QIN(32,I)=0.0
      if(EN <= (2.0*EIN(32):
)) GO TO 348
      PEQIN(32,I)=PEQEL(2,(I-IOFFN(32)))
# V=16 B1 SIGMA
  348 if(EN <= EIN(33)) GO TO 349
      QIN(33,I)=.007201/(EIN(33)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(33)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(33)+BEF[1])
      if(QIN(33,I):
 < 0.0) QIN(33,I)=0.0
      if(EN <= (2.0*EIN(33):
)) GO TO 349
      PEQIN(33,I)=PEQEL(2,(I-IOFFN(33)))
# V=17 B1 SIGMA
  349 if(EN <= EIN(34)) GO TO 350
      QIN(34,I)=.005909/(EIN(34)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(34)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(34)+BEF[1])
      if(QIN(34,I):
 < 0.0) QIN(34,I)=0.0
      if(EN <= (2.0*EIN(34):
)) GO TO 350
      PEQIN(34,I)=PEQEL(2,(I-IOFFN(34)))
# V=18 B1 SIGMA
  350 if(EN <= EIN(35)) GO TO 351
      QIN(35,I)=.004838/(EIN(35)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(35)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(35)+BEF[1])
      if(QIN(35,I):
 < 0.0) QIN(35,I)=0.0
      if(EN <= (2.0*EIN(35):
)) GO TO 351
      PEQIN(35,I)=PEQEL(2,(I-IOFFN(35)))
# V=19 B1 SIGMA
  351 if(EN <= EIN(36)) GO TO 352
      QIN(36,I)=.003956/(EIN(36)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(36)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(36)+BEF[1])
      if(QIN(36,I):
 < 0.0) QIN(36,I)=0.0
      if(EN <= (2.0*EIN(36):
)) GO TO 352
      PEQIN(36,I)=PEQEL(2,(I-IOFFN(36)))
# V=20 B1 SIGMA
  352 if(EN <= EIN(37)) GO TO 353
      QIN(37,I)=.003233/(EIN(37)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(37)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(37)+BEF[1])
      if(QIN(37,I):
 < 0.0) QIN(37,I)=0.0
      if(EN <= (2.0*EIN(37):
)) GO TO 353
      PEQIN(37,I)=PEQEL(2,(I-IOFFN(37)))
# V=21 B1 SIGMA
  353 if(EN <= EIN(38)) GO TO 354
      QIN(38,I)=.002644/(EIN(38)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(38)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(38)+BEF[1])
      if(QIN(38,I):
 < 0.0) QIN(38,I)=0.0
      if(EN <= (2.0*EIN(38):
)) GO TO 354
      PEQIN(38,I)=PEQEL(2,(I-IOFFN(38)))
# V=22 B1 SIGMA
  354 if(EN <= EIN(39)) GO TO 355
      QIN(39,I)=.002165/(EIN(39)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(39)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(39)+BEF[1])
      if(QIN(39,I):
 < 0.0) QIN(39,I)=0.0
      if(EN <= (2.0*EIN(39):
)) GO TO 355
      PEQIN(39,I)=PEQEL(2,(I-IOFFN(39)))
# V=23 B1 SIGMA
  355 if(EN <= EIN(40)) GO TO 356
      QIN(40,I)=.001775/(EIN(40)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(40)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(40)+BEF[1])
      if(QIN(40,I):
 < 0.0) QIN(40,I)=0.0
      if(EN <= (2.0*EIN(40):
)) GO TO 356
      PEQIN(40,I)=PEQEL(2,(I-IOFFN(40)))
# V=24 B1 SIGMA
  356 if(EN <= EIN(41)) GO TO 357
      QIN(41,I)=.001457/(EIN(41)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(41)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(41)+BEF[1])
      if(QIN(41,I):
 < 0.0) QIN(41,I)=0.0
      if(EN <= (2.0*EIN(41):
)) GO TO 357
      PEQIN(41,I)=PEQEL(2,(I-IOFFN(41)))
# V=25 B1 SIGMA
  357 if(EN <= EIN(42)) GO TO 358
      QIN(42,I)=.001199/(EIN(42)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(42)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(42)+BEF[1])
      if(QIN(42,I):
 < 0.0) QIN(42,I)=0.0
      if(EN <= (2.0*EIN(42):
)) GO TO 358
      PEQIN(42,I)=PEQEL(2,(I-IOFFN(42)))
# V=26 B1 SIGMA
  358 if(EN <= EIN(43)) GO TO 359
      QIN(43,I)=.0009882/(EIN(43)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(43)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(43)+BEF[1])
      if(QIN(43,I):
 < 0.0) QIN(43,I)=0.0
      if(EN <= (2.0*EIN(43):
)) GO TO 359
      PEQIN(43,I)=PEQEL(2,(I-IOFFN(43)))
# V=27 B1 SIGMA
  359 if(EN <= EIN(44)) GO TO 360
      QIN(44,I)=.0008153/(EIN(44)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(44)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(44)+BEF[1])
      if(QIN(44,I):
 < 0.0) QIN(44,I)=0.0
      if(EN <= (2.0*EIN(44):
)) GO TO 360
      PEQIN(44,I)=PEQEL(2,(I-IOFFN(44)))
# V=28 B1 SIGMA
  360 if(EN <= EIN(45)) GO TO 361
      QIN(45,I)=.0006738/(EIN(45)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(45)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(45)+BEF[1])
      if(QIN(45,I):
 < 0.0) QIN(45,I)=0.0
      if(EN <= (2.0*EIN(45):
)) GO TO 361
      PEQIN(45,I)=PEQEL(2,(I-IOFFN(45)))
# V=29 B1 SIGMA
  361 if(EN <= EIN(46)) GO TO 362
      QIN(46,I)=.0005561/(EIN(46)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(46)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(46)+BEF[1])
      if(QIN(46,I):
 < 0.0) QIN(46,I)=0.0
      if(EN <= (2.0*EIN(46):
)) GO TO 362
      PEQIN(46,I)=PEQEL(2,(I-IOFFN(46)))
# V=30 B1 SIGMA
  362 if(EN <= EIN(47)) GO TO 363
      QIN(47,I)=.0004573/(EIN(47)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(47)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(47)+BEF[1])
      if(QIN(47,I):
 < 0.0) QIN(47,I)=0.0
      if(EN <= (2.0*EIN(47):
)) GO TO 363
      PEQIN(47,I)=PEQEL(2,(I-IOFFN(47)))
# V=31 B1 SIGMA 
  363 if(EN <= EIN(48)) GO TO 364
      QIN(48,I)=.0003731/(EIN(48)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(48)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(48)+BEF[1])
      if(QIN(48,I):
 < 0.0) QIN(48,I)=0.0
      if(EN <= (2.0*EIN(48):
)) GO TO 364
      PEQIN(48,I)=PEQEL(2,(I-IOFFN(48)))
# V=32 B1 SIGMA 
  364 if(EN <= EIN(49)) GO TO 365
      QIN(49,I)=.0002992/(EIN(49)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(49)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(49)+BEF[1])
      if(QIN(49,I):
 < 0.0) QIN(49,I)=0.0
      if(EN <= (2.0*EIN(49):
)) GO TO 365
      PEQIN(49,I)=PEQEL(2,(I-IOFFN(49)))
# V=33 B1 SIGMA 
  365 if(EN <= EIN(50)) GO TO 366
      QIN(50,I)=.0002309/(EIN(50)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(50)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(50)+BEF[1])
      if(QIN(50,I):
 < 0.0) QIN(50,I)=0.0
      if(EN <= (2.0*EIN(50):
)) GO TO 366
      PEQIN(50,I)=PEQEL(2,(I-IOFFN(50)))
# V=34 B1 SIGMA 
  366 if(EN <= EIN(51)) GO TO 367
      QIN(51,I)=.0001627/(EIN(51)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(51)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(51)+BEF[1])
      if(QIN(51,I):
 < 0.0) QIN(51,I)=0.0
      if(EN <= (2.0*EIN(51):
)) GO TO 367
      PEQIN(51,I)=PEQEL(2,(I-IOFFN(51)))
# V=35 B1 SIGMA 
  367 if(EN <= EIN(52)) GO TO 368
      QIN(52,I)=8.652D-5/(EIN(52)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(52)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(52)+BEF[1])
      if(QIN(52,I):
 < 0.0) QIN(52,I)=0.0
      if(EN <= (2.0*EIN(52):
)) GO TO 368
      PEQIN(52,I)=PEQEL(2,(I-IOFFN(52)))
# V=36 B1 SIGMA 
  368 if(EN <= EIN(53)) GO TO 369
      QIN(53,I)=2.256D-5/(EIN(53)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(53)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(53)+BEF[1])
      if(QIN(53,I):
 < 0.0) QIN(53,I)=0.0
      if(EN <= (2.0*EIN(53):
)) GO TO 369
      PEQIN(53,I)=PEQEL(2,(I-IOFFN(53)))
# V=0  C1 PI    
  369 if(EN <= EIN(54)) GO TO 370
      QIN(54,I)=.0476000/(EIN(54)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(54)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(54)+BEF(2))
      if(QIN(54,I):
 < 0.0) QIN(54,I)=0.0
      if(EN <= (2.0*EIN(54):
)) GO TO 370
      PEQIN(54,I)=PEQEL(2,(I-IOFFN(54)))
# V=1  C1 PI    
  370 if(EN <= EIN(55)) GO TO 371
      QIN(55,I)=.0728400/(EIN(55)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(55)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(55)+BEF(2))
      if(QIN(55,I):
 < 0.0) QIN(55,I)=0.0
      if(EN <= (2.0*EIN(55):
)) GO TO 371
      PEQIN(55,I)=PEQEL(2,(I-IOFFN(55)))
# V=2  C1 PI    
  371 if(EN <= EIN(56)) GO TO 372
      QIN(56,I)=.0698200/(EIN(56)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(56)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(56)+BEF(2))
      if(QIN(56,I):
 < 0.0) QIN(56,I)=0.0
      if(EN <= (2.0*EIN(56):
)) GO TO 372
      PEQIN(56,I)=PEQEL(2,(I-IOFFN(56)))
# V=3  C1 PI    
  372 if(EN <= EIN(57)) GO TO 373
      QIN(57,I)=.0547200/(EIN(57)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(57)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(57)+BEF(2))
      if(QIN(57,I):
 < 0.0) QIN(57,I)=0.0
      if(EN <= (2.0*EIN(57):
)) GO TO 373
      PEQIN(57,I)=PEQEL(2,(I-IOFFN(57)))
# V=4  C1 PI    
  373 if(EN <= EIN(58)) GO TO 374
      QIN(58,I)=.0387400/(EIN(58)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(58)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(58)+BEF(2))
      if(QIN(58,I):
 < 0.0) QIN(58,I)=0.0
      if(EN <= (2.0*EIN(58):
)) GO TO 374
      PEQIN(58,I)=PEQEL(2,(I-IOFFN(58)))
# V=5  C1 PI    
  374 if(EN <= EIN(59)) GO TO 375
      QIN(59,I)=.0259800/(EIN(59)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(59)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(59)+BEF(2))
      if(QIN(59,I):
 < 0.0) QIN(59,I)=0.0
      if(EN <= (2.0*EIN(59):
)) GO TO 375
      PEQIN(59,I)=PEQEL(2,(I-IOFFN(59)))
# V=6  C1 PI    
  375 if(EN <= EIN(60)) GO TO 376
      QIN(60,I)=.0170000/(EIN(60)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(60)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(60)+BEF(2))
      if(QIN(60,I):
 < 0.0) QIN(60,I)=0.0
      if(EN <= (2.0*EIN(60):
)) GO TO 376
      PEQIN(60,I)=PEQEL(2,(I-IOFFN(60)))
# V=7  C1 PI    
  376 if(EN <= EIN(61)) GO TO 377
      QIN(61,I)=.0109900/(EIN(61)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(61)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(61)+BEF(2))
      if(QIN(61,I):
 < 0.0) QIN(61,I)=0.0
      if(EN <= (2.0*EIN(61):
)) GO TO 377
      PEQIN(61,I)=PEQEL(2,(I-IOFFN(61)))
# V=8  C1 PI    
  377 if(EN <= EIN(62)) GO TO 378
      QIN(62,I)=.0070980/(EIN(62)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(62)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(62)+BEF(2))
      if(QIN(62,I):
 < 0.0) QIN(62,I)=0.0
      if(EN <= (2.0*EIN(62):
)) GO TO 378
      PEQIN(62,I)=PEQEL(2,(I-IOFFN(62)))
# V=9  C1 PI    
  378 if(EN <= EIN(63)) GO TO 379
      QIN(63,I)=.0045920/(EIN(63)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(63)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(63)+BEF(2))
      if(QIN(63,I):
 < 0.0) QIN(63,I)=0.0
      if(EN <= (2.0*EIN(63):
)) GO TO 379
      PEQIN(63,I)=PEQEL(2,(I-IOFFN(63)))
# V=10 C1 PI    
  379 if(EN <= EIN(64)) GO TO 380
      QIN(64,I)=.0029760/(EIN(64)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(64)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(64)+BEF(2))
      if(QIN(64,I):
 < 0.0) QIN(64,I)=0.0
      if(EN <= (2.0*EIN(64):
)) GO TO 380
      PEQIN(64,I)=PEQEL(2,(I-IOFFN(64)))
# V=11 C1 PI    
  380 if(EN <= EIN(65)) GO TO 381
      QIN(65,I)=.0019090/(EIN(65)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(65)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(65)+BEF(2))
      if(QIN(65,I):
 < 0.0) QIN(65,I)=0.0
      if(EN <= (2.0*EIN(65):
)) GO TO 381
      PEQIN(65,I)=PEQEL(2,(I-IOFFN(65)))
# V=12 C1 PI    
  381 if(EN <= EIN(66)) GO TO 382
      QIN(66,I)=.0011710/(EIN(66)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(66)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(66)+BEF(2))
      if(QIN(66,I):
 < 0.0) QIN(66,I)=0.0
      if(EN <= (2.0*EIN(66):
)) GO TO 382
      PEQIN(66,I)=PEQEL(2,(I-IOFFN(66)))
# V=13 C1 PI    
  382 if(EN <= EIN(67)) GO TO 383
      QIN(67,I)=.0005590/(EIN(67)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(67)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(67)+BEF(2))
      if(QIN(67,I):
 < 0.0) QIN(67,I)=0.0
      if(EN <= (2.0*EIN(67):
)) GO TO 383
      PEQIN(67,I)=PEQEL(2,(I-IOFFN(67)))
# C3PI V=0-4  METASTABLE LEVEL     FRANCK-CONDON FAC=0.6967
# SCALED BY 1/E**3 ABOVE XC3PI(NC3PI) EV
  383 if(EN <= EIN(68)) GO TO 387 
      if(EN > XC3PI(NC3PI):
) GO TO 386                               
      DO 384 J=2,NC3PI                                                  
      if(EN <= XC3PI[J]:
) GO TO 385                                      
  384 CONTINUE                                                          
      J=NC3PI                                                           
  385 A=(YC3PI[J]-YC3PI(J-1))/(XC3PI[J]-XC3PI(J-1))                     
      B=(XC3PI(J-1)*YC3PI[J]-XC3PI[J]*YC3PI(J-1))/(XC3PI(J-1)-XC3PI[J]) 
      QIN(68,I)=(A*EN+B)*1.D-16*0.6967
      GO TO 1386
  386 QIN(68,I)=YC3PI(NC3PI)*1.D-16*((XC3PI(NC3PI)/EN)**3)*0.6967
 1386 if(EN <= (2.0*EIN(68))) GO TO 387
      PEQIN(68,I)=PEQEL(2,(I-IOFFN(68)))
# C3PI V=5-18 METASTABLE LEVEL     FRANCK-CONDON FAC=0.3033
# SCALED BY 1/E**3 ABOVE XC3PI(NC3PI) EV
  387 if(EN <= EIN(69)) GO TO 391 
      if(EN > XC3PI(NC3PI):
) GO TO 390                               
      DO 388 J=2,NC3PI                                                  
      if(EN <= XC3PI[J]:
) GO TO 389                                      
  388 CONTINUE                                                          
      J=NC3PI                                                           
  389 A=(YC3PI[J]-YC3PI(J-1))/(XC3PI[J]-XC3PI(J-1))                     
      B=(XC3PI(J-1)*YC3PI[J]-XC3PI[J]*YC3PI(J-1))/(XC3PI(J-1)-XC3PI[J]) 
      QIN(69,I)=(A*EN+B)*1.D-16*0.3033   
      GO TO 1390
  390 QIN(69,I)=YC3PI(NC3PI)*1.D-16*((XC3PI(NC3PI)/EN)**3)*0.3033
 1390 if(EN <= (2.0*EIN(69))) GO TO 391
      PEQIN(69,I)=PEQEL(2,(I-IOFFN(69)))
# A3SG V=0-2                   FRANCK-CONDON FAC=0.6668
# SCALED BY 1/E**3 ABOVE XA3SG(NA3SG) EV
  391 if(EN <= EIN(70)) GO TO 395 
      if(EN > XA3SG(NA3SG):
) GO TO 394                               
      DO 392 J=2,NA3SG                                                  
      if(EN <= XA3SG[J]:
) GO TO 393                                      
  392 CONTINUE                                                          
      J=NA3SG                                                           
  393 A=(YA3SG[J]-YA3SG(J-1))/(XA3SG[J]-XA3SG(J-1))                     
      B=(XA3SG(J-1)*YA3SG[J]-XA3SG[J]*YA3SG(J-1))/(XA3SG(J-1)-XA3SG[J]) 
      QIN(70,I)=(A*EN+B)*1.D-16*0.6668   
      GO TO 1394
  394 QIN(70,I)=YA3SG(NA3SG)*1.D-16*((XA3SG(NA3SG)/EN)**3)*0.6668
 1394 if(EN <= (2.0*EIN(70))) GO TO 395
      PEQIN(70,I)=PEQEL(2,(I-IOFFN(70)))
# A3SG V=3-17                  FRANCK-CONDON FAC=0.3332
# SCALED BY 1/E**3 ABOVE XA3SG(NA3SG) EV
  395 if(EN <= EIN(71)) GO TO 399 
      if(EN > XA3SG(NA3SG):
) GO TO 398                               
      DO 396 J=2,NA3SG                                                  
      if(EN <= XA3SG[J]:
) GO TO 397                                      
  396 CONTINUE                                                          
      J=NA3SG                                                           
  397 A=(YA3SG[J]-YA3SG(J-1))/(XA3SG[J]-XA3SG(J-1))                     
      B=(XA3SG(J-1)*YA3SG[J]-XA3SG[J]*YA3SG(J-1))/(XA3SG(J-1)-XA3SG[J]) 
      QIN(71,I)=(A*EN+B)*1.D-16*0.3332
      GO TO 1398
  398 QIN(71,I)=YA3SG(NA3SG)*1.D-16*((XA3SG(NA3SG)/EN)**3)*0.3332
 1398 if(EN <= (2.0*EIN(71))) GO TO 399
      PEQIN(71,I)=PEQEL(2,(I-IOFFN(71)))
# E3SG V=0-9                                           
# SCALED BY 1/E**3 ABOVE XE3SG(NE3SG) EV
  399 if(EN <= EIN(72)) GO TO 403 
      if(EN > XE3SG(NE3SG):
) GO TO 402                               
      DO 400 J=2,NE3SG                                                  
      if(EN <= XE3SG[J]:
) GO TO 401                                      
  400 CONTINUE                                                          
      J=NE3SG                                                           
  401 A=(YE3SG[J]-YE3SG(J-1))/(XE3SG[J]-XE3SG(J-1))                     
      B=(XE3SG(J-1)*YE3SG[J]-XE3SG[J]*YE3SG(J-1))/(XE3SG(J-1)-XE3SG[J]) 
      QIN(72,I)=(A*EN+B)*1.D-16          
      GO TO 2402
  402 QIN(72,I)=YE3SG(NE3SG)*1.D-16*(XE3SG(NE3SG)/EN)**3        
 2402 if(EN <= (2.0*EIN(72))) GO TO 403
      PEQIN(72,I)=PEQEL(2,(I-IOFFN(72)))
# EF1 SIGMA V=0-5                   FRANCK-CONDON FACTOR=0.4
# USE BORN SCALING ABOVE XEFSG(NEFSG)  EV
  403 if(EN <= EIN(73)) GO TO 407 
      if(EN > XEFSG(NEFSG):
) GO TO 406                               
      DO 404 J=2,NEFSG                                                  
      if(EN <= XEFSG[J]:
) GO TO 405                                      
  404 CONTINUE                                                          
      J=NEFSG                                                           
  405 A=(YEFSG[J]-YEFSG(J-1))/(XEFSG[J]-XEFSG(J-1))                     
      B=(XEFSG(J-1)*YEFSG[J]-XEFSG[J]*YEFSG(J-1))/(XEFSG(J-1)-XEFSG[J]) 
      QIN(73,I)=(A*EN+B)*1.D-16*0.4          
      GO TO 1406
  406 QIN(73,I)=.0089000/(EIN(73)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(73)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(73)+BEF(3))
      if(QIN(73,I):
 < 0.0) QIN(73,I)=0.0
 1406 if(EN <= (2.0*EIN(73))) GO TO 407
      PEQIN(73,I)=PEQEL(2,(I-IOFFN(73)))
# EF1 SIGMA V=6-19                   FRANCK-CONDON FACTOR=0.6
# USE BORN SCALING ABOVE XEFSG(NEFSG) EV
  407 if(EN <= EIN(74)) GO TO 411 
      if(EN > XEFSG(NEFSG):
) GO TO 410                               
      DO 408 J=2,NEFSG                                                  
      if(EN <= XEFSG[J]:
) GO TO 409                                      
  408 CONTINUE                                                          
      J=NEFSG                                                           
  409 A=(YEFSG[J]-YEFSG(J-1))/(XEFSG[J]-XEFSG(J-1))                     
      B=(XEFSG(J-1)*YEFSG[J]-XEFSG[J]*YEFSG(J-1))/(XEFSG(J-1)-XEFSG[J]) 
      QIN(74,I)=(A*EN+B)*1.D-16*0.6          
      GO TO 1410
  410 QIN(74,I)=.0133000/(EIN(74)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(74)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(74)+BEF(3))
      if(QIN(74,I):
 < 0.0) QIN(74,I)=0.0
 1410 if(EN <= (2.0*EIN(74))) GO TO 411
      PEQIN(74,I)=PEQEL(2,(I-IOFFN(74)))
# B#1 SIGMA V=0       
  411 if(EN <= EIN(75)) GO TO 412
      QIN(75,I)=.003970/(EIN(75)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(75)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(75)+BEF(4))
      if(QIN(75,I):
 < 0.0) QIN(75,I)=0.0
      if(EN <= (2.0*EIN(75):
)) GO TO 412
      PEQIN(75,I)=PEQEL(2,(I-IOFFN(75)))
# B#1 SIGMA V=1         
  412 if(EN <= EIN(76)) GO TO 413
      QIN(76,I)=.008150/(EIN(76)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(76)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(76)+BEF(4))
      if(QIN(76,I):
 < 0.0) QIN(76,I)=0.0
      if(EN <= (2.0*EIN(76):
)) GO TO 413
      PEQIN(76,I)=PEQEL(2,(I-IOFFN(76)))
# B#1 SIGMA V=2         
  413 if(EN <= EIN(77)) GO TO 414
      QIN(77,I)=.009980/(EIN(77)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(77)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(77)+BEF(4))
      if(QIN(77,I):
 < 0.0) QIN(77,I)=0.0
      if(EN <= (2.0*EIN(77):
)) GO TO 414
      PEQIN(77,I)=PEQEL(2,(I-IOFFN(77)))
# B#1 SIGMA V=3         
  414 if(EN <= EIN(78)) GO TO 415
      QIN(78,I)=.009520/(EIN(78)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(78)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(78)+BEF(4))
      if(QIN(78,I):
 < 0.0) QIN(78,I)=0.0
      if(EN <= (2.0*EIN(78):
)) GO TO 415
      PEQIN(78,I)=PEQEL(2,(I-IOFFN(78)))
# B#1 SIGMA V=4         
  415 if(EN <= EIN(79)) GO TO 416
      QIN(79,I)=.007550/(EIN(79)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(79)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(79)+BEF(4))
      if(QIN(79,I):
 < 0.0) QIN(79,I)=0.0
      if(EN <= (2.0*EIN(79):
)) GO TO 416
      PEQIN(79,I)=PEQEL(2,(I-IOFFN(79)))
# B#1 SIGMA V=5         
  416 if(EN <= EIN(80)) GO TO 417
      QIN(80,I)=.004230/(EIN(80)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(80)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(80)+BEF(4))
      if(QIN(80,I):
 < 0.0) QIN(80,I)=0.0
      if(EN <= (2.0*EIN(80):
)) GO TO 417
      PEQIN(80,I)=PEQEL(2,(I-IOFFN(80)))
# B#1 SIGMA V=6         
  417 if(EN <= EIN(81)) GO TO 418
      QIN(81,I)=.000460/(EIN(81)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(81)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(81)+BEF(4))
      if(QIN(81,I):
 < 0.0) QIN(81,I)=0.0
      if(EN <= (2.0*EIN(81):
)) GO TO 418
      PEQIN(81,I)=PEQEL(2,(I-IOFFN(81)))
# B#1 SIGMA V=7         
  418 if(EN <= EIN(82)) GO TO 419
      QIN(82,I)=.000450/(EIN(82)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(82)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(82)+BEF(4))
      if(QIN(82,I):
 < 0.0) QIN(82,I)=0.0
      if(EN <= (2.0*EIN(82):
)) GO TO 419
      PEQIN(82,I)=PEQEL(2,(I-IOFFN(82)))
# B#1 SIGMA V=8         
  419 if(EN <= EIN(83)) GO TO 420
      QIN(83,I)=.000300/(EIN(83)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(83)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(83)+BEF(4))
      if(QIN(83,I):
 < 0.0) QIN(83,I)=0.0
      if(EN <= (2.0*EIN(83):
)) GO TO 420
      PEQIN(83,I)=PEQEL(2,(I-IOFFN(83)))
# D1 PI     V=0         
  420 if(EN <= EIN(84)) GO TO 421
      QIN(84,I)=.007750/(EIN(84)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(84)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(84)+BEF(5))
      if(QIN(84,I):
 < 0.0) QIN(84,I)=0.0
      if(EN <= (2.0*EIN(85):
)) GO TO 421
      PEQIN(84,I)=PEQEL(2,(I-IOFFN(84)))
# D1 PI     V=1         
  421 if(EN <= EIN(85)) GO TO 422
      QIN(85,I)=.013100/(EIN(85)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(85)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(85)+BEF(5))
      if(QIN(85,I):
 < 0.0) QIN(85,I)=0.0
      if(EN <= (2.0*EIN(85):
)) GO TO 422
      PEQIN(85,I)=PEQEL(2,(I-IOFFN(85)))
# D1 PI     V=2         
  422 if(EN <= EIN(86)) GO TO 423
      QIN(86,I)=.013670/(EIN(86)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(86)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(86)+BEF(5))
      if(QIN(86,I):
 < 0.0) QIN(86,I)=0.0
      if(EN <= (2.0*EIN(86):
)) GO TO 423
      PEQIN(86,I)=PEQEL(2,(I-IOFFN(86)))
# D1 PI     V=3         
  423 if(EN <= EIN(87)) GO TO 424
      QIN(87,I)=.011560/(EIN(87)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(87)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(87)+BEF(5))
      if(QIN(87,I):
 < 0.0) QIN(87,I)=0.0
      if(EN <= (2.0*EIN(87):
)) GO TO 424
      PEQIN(87,I)=PEQEL(2,(I-IOFFN(87)))
# D1 PI     V=4         
  424 if(EN <= EIN(88)) GO TO 425
      QIN(88,I)=.008730/(EIN(88)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(88)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(88)+BEF(5))
      if(QIN(88,I):
 < 0.0) QIN(88,I)=0.0
      if(EN <= (2.0*EIN(88):
)) GO TO 425
      PEQIN(88,I)=PEQEL(2,(I-IOFFN(88)))
# D1 PI     V=5         
  425 if(EN <= EIN(89)) GO TO 426
      QIN(89,I)=.006190/(EIN(89)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(89)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(89)+BEF(5))
      if(QIN(89,I):
 < 0.0) QIN(89,I)=0.0
      if(EN <= (2.0*EIN(89):
)) GO TO 426
      PEQIN(89,I)=PEQEL(2,(I-IOFFN(89)))
# D1 PI     V=6         
  426 if(EN <= EIN(90)) GO TO 427
      QIN(90,I)=.004280/(EIN(90)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(90)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(90)+BEF(5))
      if(QIN(90,I):
 < 0.0) QIN(90,I)=0.0
      if(EN <= (2.0*EIN(90):
)) GO TO 427
      PEQIN(90,I)=PEQEL(2,(I-IOFFN(90)))
# D1 PI     V=7         
  427 if(EN <= EIN(91)) GO TO 428
      QIN(91,I)=.002920/(EIN(91)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(91)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(91)+BEF(5))
      if(QIN(91,I):
 < 0.0) QIN(91,I)=0.0
      if(EN <= (2.0*EIN(91):
)) GO TO 428
      PEQIN(91,I)=PEQEL(2,(I-IOFFN(91)))
# D1 PI     V=8         
  428 if(EN <= EIN(92)) GO TO 429
      QIN(92,I)=.001960/(EIN(92)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(92)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(92)+BEF(5))
      if(QIN(92,I):
 < 0.0) QIN(92,I)=0.0
      if(EN <= (2.0*EIN(92):
)) GO TO 429
      PEQIN(92,I)=PEQEL(2,(I-IOFFN(92)))
# D1 PI     V=9         
  429 if(EN <= EIN(93)) GO TO 430
      QIN(93,I)=.001330/(EIN(93)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(93)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(93)+BEF(5))
      if(QIN(93,I):
 < 0.0) QIN(93,I)=0.0
      if(EN <= (2.0*EIN(93):
)) GO TO 430
      PEQIN(93,I)=PEQEL(2,(I-IOFFN(93)))
# D1 PI     V=10        
  430 if(EN <= EIN(94)) GO TO 431
      QIN(94,I)=.000910/(EIN(94)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(94)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(94)+BEF(5))
      if(QIN(94,I):
 < 0.0) QIN(94,I)=0.0
      if(EN <= (2.0*EIN(94):
)) GO TO 431
      PEQIN(94,I)=PEQEL(2,(I-IOFFN(94)))
# D1 PI     V=11        
  431 if(EN <= EIN(95)) GO TO 432
      QIN(95,I)=.000630/(EIN(95)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(95)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(95)+BEF(5))
      if(QIN(95,I):
 < 0.0) QIN(95,I)=0.0
      if(EN <= (2.0*EIN(95):
)) GO TO 432
      PEQIN(95,I)=PEQEL(2,(I-IOFFN(95)))
# D1 PI     V=12        
  432 if(EN <= EIN(96)) GO TO 433
      QIN(96,I)=.000430/(EIN(96)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(96)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(96)+BEF(5))
      if(QIN(96,I):
 < 0.0) QIN(96,I)=0.0
      if(EN <= (2.0*EIN(96):
)) GO TO 433
      PEQIN(96,I)=PEQEL(2,(I-IOFFN(96)))
# D1 PI     V=13        
  433 if(EN <= EIN(97)) GO TO 434
      QIN(97,I)=.000290/(EIN(97)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(97)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(97)+BEF(5))
      if(QIN(97,I):
 < 0.0) QIN(97,I)=0.0
      if(EN <= (2.0*EIN(97):
)) GO TO 434
      PEQIN(97,I)=PEQEL(2,(I-IOFFN(97)))
# D1 PI     V=14        
  434 if(EN <= EIN(98)) GO TO 435
      QIN(98,I)=.000200/(EIN(98)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(98)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(98)+BEF(5))
      if(QIN(98,I):
 < 0.0) QIN(98,I)=0.0
      if(EN <= (2.0*EIN(98):
)) GO TO 435
      PEQIN(98,I)=PEQEL(2,(I-IOFFN(98)))
# D1 PI     V=15        
  435 if(EN <= EIN(99)) GO TO 436
      QIN(99,I)=.000120/(EIN(99)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(99)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(99)+BEF(5))
      if(QIN(99,I):
 < 0.0) QIN(99,I)=0.0
      if(EN <= (2.0*EIN(99):
)) GO TO 436
      PEQIN(99,I)=PEQEL(2,(I-IOFFN(99)))
# B##1 SIGMA SUM V=0-6  DISSOCIATIVE 
# SCALED BY 1.08 FOR INCREASED ENERGY LOSSES FROM VIB SERIES
  436 if(EN <= EIN(100)) GO TO 437
      QIN(100,I)=.02230/(EIN(100)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(100)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(100)+BEF(5))*1.08 
      if(QIN(100,I):
 < 0.0) QIN(100,I)=0.0
      if(EN <= (2.0*EIN(100):
)) GO TO 437
      PEQIN(100,I)=PEQEL(2,(I-IOFFN(100)))
# D#1 PI     SUM V=0-3  DISSOCIATIVE
# SCALED BY 1.08 FOR INCREASED ENERGY LOSSES FROM VIB SERIES
  437 if(EN <= EIN(101)) GO TO 438
      QIN(101,I)=.01450/(EIN(101)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(101)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(101)+BEF(5))*1.08 
      if(QIN(101,I):
 < 0.0) QIN(101,I)=0.0
      if(EN <= (2.0*EIN(101):
)) GO TO 438
      PEQIN(101,I)=PEQEL(2,(I-IOFFN(101)))
# B###1 SIGMA + D##1 PI VIBRATION SUMMED   DISSOCIATIVE 
#  SCALED BY 1.08 FOR INCREASED ENERGY LOSSES FROM VIB SERIES
  438 if(EN <= EIN(102)) GO TO 439
      QIN(102,I)=.01450/(EIN(102)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(102)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(102)+BEF(5))*1.08 
      if(QIN(102,I):
 < 0.0) QIN(102,I)=0.0
      if(EN <= (2.0*EIN(102):
)) GO TO 439
      PEQIN(102,I)=PEQEL(2,(I-IOFFN(102)))
# B####1 SIGMA + D###1 PI VIBRATION SUMMED   DISSOCIATIVE
#  SCALED BY 1.08 FOR INCREASED ENERGY LOSSES FROM VIB SERIES
  439 if(EN <= EIN(103)) GO TO 440
      QIN(103,I)=.01010/(EIN(103)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(103)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(103)+BEF(5))*1.08 
      if(QIN(103,I):
 < 0.0) QIN(103,I)=0.0
      if(EN <= (2.0*EIN(103):
)) GO TO 440
      PEQIN(103,I)=PEQEL(2,(I-IOFFN(103)))
# B#####1 SIGMA + D####1 PI VIBRATION SUMMED   DISSOCIATIVE 
#  SCALED BY 1.08 FOR INCREASED ENERGY LOSSES FROM VIB SERIES
  440 if(EN <= EIN(104)) GO TO 441
      QIN(104,I)=.00500/(EIN(104)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(104)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(104)+BEF(5))*1.08
      if(QIN(104,I):
 < 0.0) QIN(104,I)=0.0
      if(EN <= (2.0*EIN(104):
)) GO TO 441
      PEQIN(104,I)=PEQEL(2,(I-IOFFN(104)))
# CONTINUUM EXCITATION AROUND IONISATION ENERGY   DISSOCIATIVE
# SCALED BY 1.20 FOR INCREASED ENERGY LOSSES ABOVE THRESHOLD
  441 if(EN <= EIN(105)) GO TO 442
      QIN(105,I)=.02680/(EIN(105)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(105)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(105)+BEF(5))*1.20
      if(QIN(105,I):
 < 0.0) QIN(105,I)=0.0
      if(EN <= (2.0*EIN(105):
)) GO TO 442
      PEQIN(105,I)=PEQEL(2,(I-IOFFN(105)))
# PREDISSOCIATION ABOVE IONISATION ENERGY         DISSOCIATIVE
# SCALED BY 1.2 FOR INCREASED ENERGY LOSSES ABOVE THRESHOLD 
  442 if(EN <= EIN(106)) GO TO 443
      QIN(106,I)=.01700/(EIN(106)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(106)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(106)+BEF(5))*1.20 
      if(QIN(106,I):
 < 0.0) QIN(106,I)=0.0
      if(EN <= (2.0*EIN(106):
)) GO TO 443
      PEQIN(106,I)=PEQEL(2,(I-IOFFN(106)))
# DOUBLE EXCITED STATES TO NEUTRALS FROM BACKX ET AL
  443 if(EN <= EIN(107)) GO TO 444
      QIN(107,I)=.00927/(EIN(107)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(107)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(107)+BEF(5))  
      if(QIN(107,I):
 < 0.0) QIN(107,I)=0.0
      if(EN <= (2.0*EIN(107):
)) GO TO 444
      PEQIN(107,I)=PEQEL(2,(I-IOFFN(107)))
  444 CONTINUE
# LOAD BREMSSTRAHLUNG X-SECTION
      if(EN <= 1000.):
 GO TO 450
      DO 445 J=2,NBREM
      if(EN <= EBRM[J]:
) GO TO 446 
  445 CONTINUE
      J=NBREM
  446 A=(math.log(Z1T[J])-math.log(Z1T(J-1)))/(EBRM[J]-EBRM(J-1))
      B=(math.log(Z1T[J])*EBRM(J-1)-math.log(Z1T(J-1))*EBRM[J])/ (EBRM(J-1)-EBRM[J])
      QIN(108,I)=math.exp(A*EN+B)*2.D-24
  450 CONTINUE
#---------------------------------------------------------------------
      Q(1,I)=0.0
      DO 555 NL=1,107
      Q(1,I)=Q(1,I)+QIN(NL,I)
  555 CONTINUE
      Q(1,I)=Q(1,I)+Q(2,I)+Q(4,I)+QION(1,I)+QION(2,I)
cc    XLYMAN=0.0
c     DISLYMAN=0.0
c     DO 700 JK=17,53
c     XLYMAN=XLYMAN+QIN(JK,I)
c     DISLYMAN=DISLYMAN+QIN(JK,I)*DISLY(JK-16)
c 700 CONTINUE
c     XWERNER=0.0
c     DISWERNER=0.0
c     DO 701 JK=54,67
c     XWERNER=XWERNER+QIN(JK,I)
c     DISWERNER=DISWERNER+QIN(JK,I)*DISWR(JK-53)
c 701 CONTINUE
c     DISB1SIG=0.0
c     QB1SIG=0.0
c     DO 702 JK=75,83
c     QB1SIG=QB1SIG+QIN(JK,I)
c     DISB1SIG=DISB1SIG+QIN(JK,I)*DISB1S(JK-74)
c 702 CONTINUE
c     DISD1PI=0.0
c     QD1PI=0.0
c     DO 703 JK=84,99
c     QD1PI=QD1PI+QIN(JK,I)
c     DISD1PI=DISD1PI+QIN(JK,I)*DISD1P(JK-83)
c 703 CONTINUE    
c SUM TRIPLETS
c     TRIPL=QIN(13,I)+QIN(14,I)+QIN(15,I)+QIN(16,I)+QIN(68,I)+QIN(69,I)+
c    /QIN(70,I)+QIN(71,I)+QIN(72,I)
c     DISEFL=(QIN(73,I)+QIN(74,I))*0.5 
# SUM HIGH LEVELS 
c     QHIGH=QIN(100,I)+QIN(101,I)+QIN(102,I)+QIN(103,I)+QIN(104,I)+
c    /QIN(105,I)+QIN(106,I)+QIN(107,I)
c     DISTOT=TRIPL+DISLYMAN+DISWERNER+QHIGH+DISEFL
# TOTAL IONISATION
c     QIONT=QION(1,I)+QION(2,I)
# OUTPUT XSECTIONS   
#     WRITE(6,991) EN,Q(2,I),Q(4,I),QIONT,Q(1,I),XLYMAN,XWERNER,
#    /DISLYMAN,DISWERNER,TRIPL,QB1SIG,QD1PI,DISB1SIG,DISD1PI,QHIGH,
#    /QIN(105,I),QIN(106,I),DISEFL,DISTOT,QIN(107,I)      
# 991 print(' EN=',D12.4,' ELAS=',D12.4,' ATT =',D12.4,'IONS=',D12.4,'
#    / TOT=',D12.4,/,' XLYMAN=',D12.4,' XWERNER =',D12.4,' DISLYMAN=',
#    /D12.4,' DISWERNER=',D12.4,' DISTRIP=',D12.4,/,'QB1SIG= ',D12.4,
#    /'QD1PI= ',D12.4,' DISB1SIG=',D12.4,' DISD1PI=',D12.4,/,
#    /' QHIGH=',D12.4,/,' QIN105=',D12.4,' QIN106=',D12.4,' DISEFL=',
#    /D12.4,' DISTOT=',D12.4,/,' DOUBLEEXC=',D12.4)
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      NIN=12
      if(EFINAL > 8.0 and EFINAL <= 10.0):
 NIN=16
      if(EFINAL > 10.0):
 NIN=107
      if(EFINAL > 1000.):
 NIN=108
#
      RETURN                                                            
      # end 
      def GAS22(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000)
      COMMON/DENS/DEN(20000)
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS23(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000)
      COMMON/DENS/DEN(20000)
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN
      # end                                                            
      def GAS24(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000)
      COMMON/DENS/DEN(20000)
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN
      # end                                                            
      def GAS25(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000)
      COMMON/DENS/DEN(20000)
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN
      # end                                                            
      def GAS26(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000)
      COMMON/DENS/DEN(20000)
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN
      # end                                                            
      def GAS27(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000)
      COMMON/DENS/DEN(20000)
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN 
      # end                                                            
      def GAS28(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000)
      COMMON/DENS/DEN(20000)
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN  
      # end                                                           
      def GAS29(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000)
      COMMON/DENS/DEN(20000)
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN
      # end                                                             
      def GAS30(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY  ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)  
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000)
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6)
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]  
      DIMENSION XEN(159),YELM(159),YELT(159),YEPS(159),XATT(113),YAT1(113),YAT2(113),YAT3(113),YAT4(113),YAT5(113),YAT6(113),YAT7(113), XION(55),YION(55),YIN1(55),YIN2(55),YIN3(55),YIN4(55),YIN5(55),YIN6(55),YIN7(55),XL3SH(100),YL3SH(100),XL2SH(100),YL2SH(100),XL1SH(100),YL1SH(100),XKSHS(80),YKSHS(80),XKSHF(79),YKSHF(79),XV1V1(13),YV1V1(13),XV2V1(12),YV2V1(12),XV3V1(7),YV3V1(7),
     ,XV4V1(7),YV4V1(7),XV5V1(5),YV5V1(5),XVBV3(17),YVBV3(17),XTR1(12),YTR1(12),  XTR2(11),YTR2(11),XTR3(11),YTR3(11),IOFFN(35),IOFFION(12)
      DIMENSION Z9T(25),Z16T(25),EBRM(25)
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      DATA XEN/0.00,.001,.005,.010,.025,.050,.075,0.10,0.20,0.30,0.35,0.40,0.45,0.50,0.60,0.70,0.80,0.90,1.00,1.20,1.50,2.00,2.50,3.00,3.50,4.00,4.50,5.00,6.00,7.00,8.00,9.00,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0,19.0,20.0,22.0,25.0,30.0,35.0,40.0,45.0,50.0,60.0,70.0,75.0,80.0,90.0,100.,125.,150.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,6000.,7000.,8000.,9000.,1.0D4,1.25D4,1.5D4,1.75D4,2.0D4,2.5'%.3f' %.0'%.3f' %.5D4,4.0D4,4.5D4,5.0D4,6.0D4,7.0D4,8.0D4,9.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5'%.3f' %.0'%.3f' %.5D5,4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,1.75D6,2.0D6,2.5'%.3f' %.0'%.3f' %.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5'%.3f' %.0'%.3f' %.5D7,4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,1.0D8,1.25D8,1.5D8,1.75D8,2.0D8,2.5'%.3f' %.0'%.3f' %.5D8,4.0D8,4.5D8,5.0D8,6.0D8,7.0D8,8.0D8,9.0D8,1.0D9/
# ELASTIC MOMENTUM TRANSFER X-SECTION     
      DATA YELM/1434.,1300.,890.,620.,386.,199.,122.,61.5,36.0,28.0,24.0,20.8,17.4,15.0,12.0,10.3,9.21,8.57,8.25,8.75,10.5,14.5,16.3,15.1,14.3,13.6,13.5,13.9,15.1,15.5,14.8,14.7,15.3,16.5,17.6,16.5,15.1,14.4,14.2,14.5,14.8,15.3,15.7,16.1,15.4,13.4,11.5,10.3,9.45,8.73,7.84,7.24,6.88,6.52,5.93,5.49,4.67,3.95,2.84,2.12,1.66,1.39,1.22,1.08,.960,.784,.642,.554,.447,0.35,.265,.225,.195,.135,.099,.0762,.0606,.0494,.0412,.0300,.0229,.0181,.0147,.0122,.00818,.00591,.00449,.00353,.00237,.00171,.00130,.00102,8.30D-4,6.88D-4,4.99D-4,3.80D-4,3.01D-4,2.45D-4,2.04D-4,1.40D-4,1.02D-4,7.92D-5,6.35D-5,4.41D-5,3.29D-5,2.58D-5,2.09D-5,1.74D-5,1.48D-5,1.12D-5,8.85D-6,7.22D-6,6.04D-6,5.15D-6,3.67D-6,2.77D-6,2.18D-6,1.77D-6,1.24D-6,9.22D-7,7.16D-7,5.74D-7,4.71D-7,3.94D-7,2.89D-7,2.21D-7,1.75D-7,1.42D-7,1.18D-7,7.94D-8,5.72D-8,4.32D-8,3.39D-8,2.25D-8,1.60D-8,1.20D-8,9.36D-9,7.50D-9,6.14D-9,4.33D-9,3.22D-9,2.49D-9,1.98D-9,1.61D-9,1.04D-9,7.21D-10,5.31D-10,4.07D-10,2.61D-10,1.81D-10,1.33D-10,1.02D-10,8.06D-11,6.53D-11,4.54D-11,3.33D-11,2.55D-11,2.02D-11,1.63D-11/
# ELASTIC TOTAL X-SECTION               
      DATA YELT/1434.,1300.,890.,620.,386.,209.,136.,77.0,45.0,35.0,30.0,26.2,21.8,18.7,14.8,12.5,11.1,10.2,9.72,9.73,10.9,14.8,17.6,18.4,19.6,19.5,20.0,21.0,23.6,24.2,24.6,25.0,25.2,25.8,26.6,25.5,24.9,24.7,24.6,24.5,24.5,24.6,24.7,25.3,25.3,24.7,24.0,23.5,23.0,22.4,21.2,20.1,19.7,19.3,18.6,18.0,16.2,14.8,12.5,11.1,10.0,9.15,8.45,7.84,7.14,6.45,5.74,5.30,4.52,3.94,3.43,3.04,2.73,2.28,1.96,1.72,1.53,1.39,1.26,1.08,.938,.832,.748,.680,.555,.470,.408,.362,.295,.251,.219,.194,.175,.160,.137,.121,.109,.0992,.0915,.0777,.0685,.0620,.0571,.0503,.0458,.0427,.0403,.0385,.0371,.0351,.0336,.0326,.0318,.0312,.0302,.0296,.0291,.0288,.0285,.0282,.0281,.0280,.0279,.0279,.0278,.0278,.0277,.0277,.0277,.0277,.0277,.0277,.0277,.0277,.0277,.0277,.0277,.0277,.0277,.0277,.0276,.0276,.0276,.0276,.0276,.0276,.0276,.0276,.0276,.0276,.0276,.0276,.0276,.0276,.0276,.0276,.0276,.0276,.0276/
# EPSILON FOR ELASTIC ANGULAR DISTRIBUTION  
#  EPSILON=1.0-YEPS
      DATA YEPS/.9999,.9999,.9999,.9999,.9999,.9283,.8463,.7035,.7053,.7053,.7053,.6967,.7027,.7084,.7208,.7396,.7479,.7630,.7755,.8496,.9450,.9696,.8907,.7327,.6061,.5630,.5345,.5179,.4898,.4906,.4427,.4260,.4515,.4898,.5175,.4967,.4472,.4192,.4114,.4291,.4466,.4663,.4845,.4845,.4495,.3719,.3052,.2643,.2383,.2190,.2015,.1934,.1842,.1752,.1600,.1492,.1365,.1215,.09574,.07381,.06047,.05348,.04969,.04650,.04482,.03893,.03466,.03168,.02936,.02538,.02106,.01989,.01897,.01481,.01209,.01019,.00880,.00774,.00691,.00567,.00481,.00417,.00368,.00329,.00260,.00215,.00183,.001588,.001257,.001037,8.82D-4,7.66D-4,6.76D-4,6.04D-4,4.97D-4,4.21D-4,3.64D-4,3.19D-4,2.84D-4,2.21D-4,1.798D-4,1.504D-4,1.285D-4,9.83D-5,7.86D-5,6.47D-5,5.45D-5,4.68D-5,4.07D-5,3.18D-5,2.56D-5,2.12D-5,1.786D-5,1.529D-5,1.093D-5,8.22D-6,6.42D-6,5.16D-6,3.55D-6,2.60D-6,1.99D-6,1.568D-6,1.270D-6,1.049D-6,7.52D-7,5.65D-7,4.41D-7,3.53D-7,2.89D-7,1.89D-7,1.331D-7,9.87D-8,7.62D-8,4.92D-8,3.44D-8,2.53D-8,1.94D-8,1.533D-8,1.241D-8,8.58D-9,6.27D-9,4.77D-9,3.74D-9,3.01D-9,1.89D-9,1.29D-9,9.38D-10,7.09D-10,4.44D-10,3.03D-10,2.20D-10,1.66D-10,1.30D-10,1.04D-10,7.1D-11,5.1D-11,3.9D-11,3.0D-11,2.4D-11/
# V1 RAMAN ISOTROPIC                   SCALED BY 1/E**2 ABOVE 1.0 EV
      DATA XV1V1/.096032,.100,.114,0.25,0.20,0.25,0.30,0.35,0.40,0.50,0.55,0.70,1.00/
      DATA YV1V1/0.00,19.0,21.0,15.7,9.68,8.80,8.80,7.54,6.28,6.00,5.60,4.20,2.45/
# 2V1 RAMAN ISOTROPIC                  SCALED BY 1/E**2 ABOVE 1.0EV
      DATA XV2V1/.192064,0.20,0.23,0.25,0.30,0.35,0.40,0.50,0.55,0.60,0.70,1.00/
      DATA YV2V1/0.00,3.14,4.14,3.52,3.02,2.76,2.64,2.14,1.98,1.85,1.70,0.99/
# 3V1 RAMAN ISOTROPIC                  SCALED BY 1/E**2 ABOVE 1.0EV
      DATA XV3V1/0.288096,0.325,0.40,0.50,0.60,0.70,1.00/
      DATA YV3V1/0.00,2.3,1.6,1.30,1.10,0.85,0.50/
# 4V1 RAMAN ISOTROPIC                  SCALED BY 1/E**2 ABOVE 1.0EV
      DATA XV4V1/.384128,0.45,0.50,0.55,0.60,0.70,1.00/
      DATA YV4V1/0.00,1.15,0.85,0.65,0.55,0.50,0.29/
# 5V1+HIGHER V1 RAMAN   ISOTROPIC      SCALED BY 1/E**2 ABOVE 1.0EV
      DATA XV5V1/.48016,0.55,0.60,0.70,1.00/
      DATA YV5V1/0.00,1.00,0.70,0.45,0.26/
# V3 DIPOLE ANISOTROPIC
# V3 DIPOLE PART AS ANALYTIC def IN def
# V3 DIRECT PART AT THRESHOLD AND ALSO RESONANT STRUCTURE ABOVE 6EV
# GIVEN AS TABLES.
#              
      DATA XVBV3/.11754,.125,0.13,0.14,0.15,0.16,0.17,0.18,0.19,5.00,6.00,7.00,8.00,9.00,10.0,12.0,15.0/
      DATA YVBV3/0.00,20.0,17.0,13.0,9.00,6.00,3.50,2.00,0.00,0.00,1.50,4.00,2.00,0.00,0.00,4.50,0.00/
# V4 DIPOLE ANISOTROPIC
# V4 DIPOLE GIVEN AS ANALYTIC def IN def
#
# NOTE : IONISATION  X-SECTIONS ABOVE 1KEV GIVEN BY BORN-BETHE.
#       IONISATION FROM RAP ET AL AND LINDSAY ET AL.
#         
      DATA XION/15.67,16.5,17.0,17.5,18.0,18.5,19.0,19.5,21.0,21.5,     22.0,22.5,23.0,23.5,24.0,26.0,28.0,30.0,32.0,34.0,36.0,38.0,40.0,45.0,50.0,55.0,60.0,65.0,70.0,75.0,80.0,85.0,90.0,95.0,100.,105.,110.,115.,120.,125.,130.,135.,140.,145.,150.,160.,180.,200.,250.,300.,400.,500.,600.,800.,1000./
# IONISATION TO SF5 +
      DATA YION/0.00,.020,.035,.055,.084,.118,.154,.197,.314,.370,    .434,.509,.584,.670,.760,1.13,1.36,1.61,1.83,2.08,2.26,2.37,2.46,2.63,2.81,2.99,3.02,3.08,3.16,3.19,3.25,3.28,3.27,3.29,3.30,3.31,3.32,3.33,3.33,3.32,3.30,3.30,3.29,3.29,3.30,3.30,3.24,3.20,3.03,2.92,2.62,2.42,2.21,1.86,1.65/
# IONISATION TO SF4 +
      DATA YIN1/0.00,0.00,0.00,0.00,0.00,0.00,.001,.003,.009,.011,      .012,.014,.017,.020,.022,.038,.052,.076,.110,.130,.148,.161,.173,.180,.202,.220,.228,.240,.256,.261,.269,.271,.271,.277,.282,.283,.284,.285,.285,.284,.284,.284,.285,.280,.277,.268,.266,.265,.243,.237,.208,.199,.172,.146,.127/
# IONISATION TO SF3 +
      DATA YIN2/0.00,0.00,0.00,0.00,0.00,0.00,0.00,.002,.008,.010,.011,.013,.020,.028,.038,.092,.148,.242,.340,.449,.546,.598,.648,.603,.694,.768,.812,.843,.881,.886,.898,.922,.938,.950,.958,.961,.964,.966,.964,.964,.963,.965,.965,.961,.960,.949,.936,.927,.869,.814,.717,.660,.598,.493,.449/
# IONISATION TO SF2 +
      DATA YIN3/16*0.0,.001,.002,.021,.043,.072,.097,.125,.186,.233,.261,.281,.292,.306,.300,.296,.305,.312,.311,.310,.307,.304,.301,.296,.295,.293,.292,.291,.286,.282,.272,.267,.264,.234,.217,.172,.154,.140,.113,.098/
# IONISATION TO SF +
      DATA YIN4/19*0.0,.001,.014,.031,.054,.163,.282,.348,.405,.447,.496,.512,.534,.570,.601,.615,.625,.634,.642,.648,.654,.650,.646,.643,.640,.644,.650,.657,.638,.622,.569,.515,.425,.383,.342,.267,.221/
# IONISATION TO S +
      DATA YIN5/21*0.0,.003,.011,.030,.072,.112,.152,.181,.214,.233,.256,.275,.291,.310,.328,.345,.362,.378,.394,.398,.401,.406,.411,.413,.417,.421,.424,.428,.390,.370,.300,.263,.233,.173,.151/
# IONISATION TO F +
      DATA YIN6/21*0.0,.002,.007,.025,.052,.092,.134,.186,.242,.267,.296,.349,.401,.448,.495,.530,.566,.602,.637,.658,.677,.699,.721,.735,.753,.780,.807,.838,.817,.759,.627,.538,.481,.372,.297/
# IONISATION TO SUM OF DOUBLE CHARGED STATES SF3,SF2,SF ALL ++
# MAJORITY IN STATE SF2 ++
      DATA YIN7/25*0.0,.011,.0217,.0330,.0445,.0585,.0730,.0850,.0980,.1084,.1188,.1257,.1326,.1395,.1463,.1505,.1548,.1590,.1633,.1631,.1629,.1624,.1652,.1681,.1546,.1419,.1189,.1023,.0894,.0684,.0611/
# SULFUR L3 SHELL
      DATA XL3SH/164.16,170.6,175.8,181.2,186.7,192.3,198.1,204.1,210.3,216.7,229.9,244.0,258.9,274.6,318.3,358.0,390.9,439.5,494.0,555.1,605.9,700.7,810.3,910.1,1022.,1216.,1447.,1671.,1932.,2232.,2578.,2978.,3440.,3974.,4460.,5005.,5950.,7072.,8168.,9165.,1.00D4,1.15D4,1.30D4,1.45D4,1.63D4,1.83D4,2.05D4,2.37D4,2.74'%.3f' %.16'%.3f' %.65D4,4.22D4,4.87D4,5.62D4,6.49D4,7.50D4,8.66D4,1.00D5,1.26D5,1.54D5,2.05D5,2.51'%.3f' %.07'%.3f' %.55D5,4.10D5,5.01D5,6.13D5,7.29D5,8.66D5,1.00D6,1.26D6,1.50D6,2.05'%.3f' %.07D6,4.10D6,5.01D6,6.13D6,7.08D6,8.18D6,1.00D7,1.26D7,1.50D7,2.05'%.3f' %.07D7,4.10D7,5.01D7,6.13D7,7.08D7,8.18D7,1.00D8,1.26D8,1.50D8,2.05'%.3f' %.07D8,4.10D8,5.01D8,6.13D8,7.08D8,8.18D8,1.00D9/
      DATA YL3SH/0.00,1.49D-3,2.62D-3,3.72D-3,4.79D-3,5.83D-3,6.84D-3,7.81D-3,8.75D-3,9.65D-3,1.13D-2,1.29D-2,1.43D-2,1.56D-2,1.83D-2,1.99D-2,2.09D-2,2.19D-2,2.25D-2,2.28D-2,2.29D-2,2.26D-2,2.21D-2,2.15D-2,2.07D-2,1.94D-2,1.80D-2,1.67D-2,1.55D-2,1.43D-2,1.31D-2,1.20D-2,1.10D-2,9.99D-3,9.24D-3,8.54D-3,7.56D-3,6.68D-3,6.01D-3,5.52D-3,5.17D-3,4.64D-3,4.26D-3,3.90D-3,3.57D-3,3.27D-3,3.00D-3,2.68D-3,2.41D-3,2.16D-3,1.94D-3,1.74D-3,1.56D-3,1.41D-3,1.27D-3,1.15D-3,1.05D-3,9.52D-4,8.26D-4,7.35D-4,6.33D-4,5.78D-4,5.34D-4,5.08D-4,4.87D-4,4.63D-4,4.47D-4,4.37D-4,4.30D-4,4.28D-4,4.27D-4,4.29D-4,4.39D-4,4.57D-4,4.74D-4,4.87D-4,5.00D-4,5.10D-4,5.21D-4,5.35D-4,5.53D-4,5.66D-4,5.90D-4,6.21D-4,6.44D-4,6.60D-4,6.76D-4,6.87D-4,6.99D-4,7.15D-4,7.33D-4,7.47D-4,7.72D-4,8.04D-4,8.27D-4,8.43D-4,8.59D-4,8.71D-4,8.82D-4,8.98D-4/
# SULFUR L2 SHELL
      DATA XL2SH/165.36,170.5,175.7,181.0,186.5,192.2,198.0,204.0,210.2,216.5,229.8,243.8,258.7,274.5,318.1,357.8,390.7,439.3,493.8,555.0,605.7,700.6,810.2,909.9,1022.,1216.,1447.,1671.,1932.,2232.,2578.,2978.,3440.,3974.,4460.,5005.,5950.,7072.,8168.,9165.,1.00D4,1.15D4,1.30D4,1.45D4,1.63D4,1.83D4,2.05D4,2.37D4,2.74'%.3f' %.16'%.3f' %.65D4,4.22D4,4.87D4,5.62D4,6.49D4,7.50D4,8.66D4,1.00D5,1.26D5,1.54D5,2.05D5,2.51'%.3f' %.07'%.3f' %.55D5,4.10D5,5.01D5,6.13D5,7.29D5,8.66D5,1.00D6,1.26D6,1.50D6,2.05'%.3f' %.07D6,4.10D6,5.01D6,6.13D6,7.08D6,8.18D6,1.00D7,1.26D7,1.50D7,2.05'%.3f' %.07D7,4.10D7,5.01D7,6.13D7,7.08D7,8.18D7,1.00D8,1.26D8,1.50D8,2.05'%.3f' %.07D8,4.10D8,5.01D8,6.13D8,7.08D8,8.18D8,1.00D9/
      DATA YL2SH/0.00,5.76D-4,1.13D-3,1.68D-3,2.21D-3,2.72D-3,3.22D-3,3.70D-3,4.16D-3,4.61D-3,5.45D-3,6.23D-3,6.93D-3,7.57D-3,8.91D-3,9.73D-3,1.02D-2,1.07D-2,1.10D-2,1.12D-2,1.12D-2,1.11D-2,1.09D-2,1.06D-2,1.02D-2,9.56D-3,8.85D-3,8.24D-3,7.64D-3,7.04D-3,6.47D-3,5.94D-3,5.42D-3,4.93D-3,4.57D-3,4.22D-3,3.74D-3,3.30D-3,2.97D-3,2.73D-3,2.56D-3,2.29D-3,2.10D-3,1.93D-3,1.77D-3,1.62D-3,1.48D-3,1.33D-3,1.19D-3,1.07D-3,9.57D-4,8.60D-4,7.74D-4,6.97D-4,6.30D-4,5.70D-4,5.17D-4,4.71D-4,4.08D-4,3.64D-4,3.13D-4,2.86D-4,2.64D-4,2.51D-4,2.41D-4,2.29D-4,2.21D-4,2.16D-4,2.13D-4,2.12D-4,2.11D-4,2.13D-4,2.17D-4,2.26D-4,2.35D-4,2.41D-4,2.48D-4,2.53D-4,2.58D-4,2.65D-4,2.73D-4,2.80D-4,2.92D-4,3.08D-4,3.19D-4,3.27D-4,3.35D-4,3.40D-4,3.46D-4,3.54D-4,3.63D-4,3.70D-4,3.82D-4,3.98D-4,4.09D-4,4.17D-4,4.25D-4,4.31D-4,4.37D-4,4.45D-4/
# SULFUR L1 SHELL
      DATA XL1SH/230.9,235.3,242.1,249.0,256.1,263.5,271.0,278.8,286.8,295.0,303.5,321.2,339.9,370.1,403.1,439.0,478.1,520.8,567.3,618.0,692.8,754.8,822.5,896.2,976.6,1095.,1193.,1301.,1418.,1545.,1733.,2000.,2517.,3078.,3553.,4102.,4602.,5163.,6136.,7291.,8419.,1.00D4,1.19D4,1.41D4,1.63D4,1.83D4,2.05D4,2.51'%.3f' %.07'%.3f' %.55D4,4.10D4,4.60D4,5.16D4,5.62D4,6.49D4,7.72D4,8.91D4,1.00D5,1.26D5,1.54D5,2.05D5,2.51'%.3f' %.07'%.3f' %.55D5,4.10D5,5.01D5,6.13D5,7.29D5,8.66D5,1.00D6,1.26D6,1.50D6,2.05'%.3f' %.07D6,4.10D6,5.01D6,6.13D6,7.08D6,8.18D6,1.00D7,1.26D7,1.50D7,2.05'%.3f' %.07D7,4.10D7,5.01D7,6.13D7,7.08D7,8.18D7,1.00D8,1.26D8,1.50D8,2.05'%.3f' %.07D8,4.10D8,5.01D8,6.13D8,7.08D8,8.18D8,1.00D9/
      DATA YL1SH/0.00,1.83D-4,4.44D-4,6.95D-4,9.35D-4,1.17D-3,1.39D-3,1.60D-3,1.81D-3,2.00D-3,2.19D-3,2.54D-3,2.87D-3,3.30D-3,3.68D-3,4.00D-3,4.26D-3,4.48D-3,4.65D-3,4.77D-3,4.87D-3,4.89D-3,4.89D-3,4.85D-3,4.78D-3,4.66D-3,4.54D-3,4.41D-3,4.26D-3,4.11D-3,3.89D-3,3.60D-3,3.15D-3,2.77D-3,2.52D-3,2.28D-3,2.11D-3,1.94D-3,1.71D-3,1.50D-3,1.34D-3,1.18D-3,1.03D-3,8.97D-4,8.00D-4,7.31D-4,6.67D-4,5.69D-4,4.86D-4,4.34D-4,3.89D-4,3.56D-4,3.26D-4,3.06D-4,2.75D-4,2.44D-4,2.20D-4,2.04D-4,1.76D-4,1.56D-4,1.34D-4,1.22D-4,1.12D-4,1.06D-4,1.02D-4,9.63D-5,9.24D-5,9.00D-5,8.84D-5,8.76D-5,8.71D-5,8.72D-5,8.85D-5,9.16D-5,9.44D-5,9.66D-5,9.89D-5,1.01D-4,1.03D-4,1.05D-4,1.08D-4,1.10D-4,1.14D-4,1.20D-4,1.24D-4,1.27D-4,1.29D-4,1.31D-4,1.33D-4,1.36D-4,1.39D-4,1.42D-4,1.46D-4,1.52D-4,1.56D-4,1.59D-4,1.61D-4,1.63D-4,1.65D-4,1.68D-4/
# SULFUR K SHELL
      DATA XKSHS/2472.,2528.,2601.,2677.,2755.,2834.,2917.,3001.,3089.,3178.,3271.,3366.,3464.,3564.,3668.,3774.,3884.,3997.,4113.,4233.,4356.,4483.,4748.,5028.,5325.,5804.,6510.,7515.,8430.,9457.,11240.,1.50D4,2.05D4,2.51'%.3f' %.07D4,4.10D4,5.01D4,6.13D4,7.08D4,8.18D4,1.00D5,1.50D5,2.05D5,2.99D5,4.10D5,5.01D5,6.13D5,7.08D5,8.18D5,1.00D6,1.26D6,1.50D6,2.05'%.3f' %.07D6,4.10D6,5.01D6,6.13D6,7.08D6,8.18D6,1.00D7,1.26D7,1.50D7,2.05'%.3f' %.07D7,4.10D7,5.01D7,6.13D7,7.08D7,8.18D7,1.00D8,1.26D8,1.50D8,2.05'%.3f' %.07D8,4.10D8,5.01D8,6.13D8,7.08D8,8.18D8,1.00D9/
      DATA YKSHS/0.0,2.47D-6,5.51D-6,8.42D-6,1.12D-5,1.39D-5,1.65D-5,1.89D-5,2.13D-5,2.35D-5,2.56D-5,2.77D-5,2.96D-5,3.15D-5,3.32D-5,3.49D-5,3.65D-5,3.80D-5,3.94D-5,4.08D-5,4.21D-5,4.33D-5,4.55D-5,4.74D-5,4.91D-5,5.11D-5,5.31D-5,5.44D-5,5.46D-5,5.42D-5,5.27D-5,4.84D-5,4.23D-5,3.82D-5,3.43D-5,2.91D-5,2.59D-5,2.30D-5,2.11D-5,1.94D-5,1.73D-5,1.39D-5,1.20D-5,1.04D-5,9.49D-6,9.11D-6,8.84D-6,8.71D-6,8.63D-6,8.60D-6,8.65D-6,8.74D-6,9.01D-6,9.50D-6,9.91D-6,1.02D-5,1.06D-5,1.08D-5,1.10D-5,1.14D-5,1.18D-5,1.21D-5,1.27D-5,1.34D-5,1.40D-5,1.44D-5,1.47D-5,1.50D-5,1.53D-5,1.57D-5,1.61D-5,1.64D-5,1.70D-5,1.78D-5,1.83D-5,1.88D-5,1.91D-5,1.94D-5,1.97D-5,2.00D-5/
# FLUORINE K-SHELL IONISATION X-SECTION
      DATA XKSHF/685.4,705.,726.,747.,770.,792.,816.,840.,865.,890.,916.,944.,1000.,1090.,1188.,1296.,1496.,1679.,1884.,2054.,2238.,2512.,2985.,3758.,4467.,5158.,5957.,7079.,1.0D4,1.26D4,1.50D4,2.05D4,2.51'%.3f' %.07D4,4.10D4,5.01D4,6.13D4,7.08D4,8.18D4,1.0D5,1.50D5,2.05D5,2.99D5,4.10D5,5.01D5,6.13D5,7.08D5,8.18D5,1.00D6,1.26D6,1.50D6,2.05'%.3f' %.07D6,4.10D6,5.01D6,6.13D6,7.08D6,8.18D6,1.00D7,1.26D7,1.50D7,2.05'%.3f' %.07D7,4.10D7,5.01D7,6.13D7,7.08D7,8.18D7,1.00D8,1.26D8,1.50D8,2.05'%.3f' %.07D8,4.10D8,5.01D8,6.13D8,7.08D8,8.18D8,1.00D9/
      DATA YKSHF/0.00,3.39D-5,6.77D-5,1.00D-4,1.32D-4,1.63D-4,1.92D-4,2.21D-4,2.48D-4,2.75D-4,3.00D-4,3.25D-4,3.71D-4,4.33D-4,4.87D-4,5.34D-4,5.96D-4,6.32D-4,6.57D-4,6.69D-4,6.77D-4,6.79D-4,6.68D-4,6.33D-4,5.97D-4,5.62D-4,5.25D-4,4.80D-4,3.93D-4,3.41D-4,3.04D-4,2.45D-4,2.13D-4,1.85D-4,1.51D-4,1.31D-4,1.14D-4,1.04D-4,9.46D-5,8.32D-5,6.58D-5,5.60D-5,4.80D-5,4.35D-5,4.15D-5,4.00D-5,3.93D-5,3.89D-5,3.85D-5,3.86D-5,3.89D-5,3.98D-5,4.17D-5,4.33D-5,4.45D-5,4.58D-5,4.68D-5,4.78D-5,4.92D-5,5.09D-5,5.21D-5,5.45D-5,5.75D-5,5.96D-5,6.12D-5,6.27D-5,6.38D-5,6.49D-5,6.64D-5,6.82D-5,6.95D-5,7.19D-5,7.50D-5,7.72D-5,7.88D-5,8.03D-5,8.14D-5,8.25D-5,8.40D-5/
# ATTACHMENT   (ALL DATA AT 300 KELVIN)
      DATA XATT/1.D-6,.00002,.00005,.00007,.0001,.0002,.0003,.0004,.0005,.0006,.0007,.0008,.0009,.001,.002,.003,.004,.005,.006,.007,.008,.009,.010,.015,.020,.025,.030,.035,.040,.045,.050,.055,.060,.065,.070,.075,.080,.085,.090,.095,.100,.105,.110,.115,.120,.125,.130,.140,.150,.160,.170,.180,.190,.200,.220,.240,.260,.280,.300,.350,.400,.450,.500,.550,.600,.650,.700,.750,.800,.850,.900,.950,1.00,1.10,1.20,1.30,1.40,1.50,1.60,1.70,1.80,1.90,2.00,2.25,2.50,2.75,3.00,3.50,4.00,4.50,5.00,5.50,6.00,6.50,7.00,7.50,8.00,8.50,9.00,9.50,10.0,10.25,10.5,11.0,11.5,12.0,12.5,13.0,13.5,14.0,14.5,15.0,15.5/
# ATTACHMENT   SF6-                                BRAUN ET AL 2009
      DATA YAT1/19845.,19845.,12346.,10350.,8571.,5906.,4728.,4028.,3551.,3200.,2927.,2708.,2527.,2374.,1540.,1196.,989.6,865.4,762.2,683.8,612.8,564.5,534.6,380.8,308.3,258.8,219.7,191.3,173.2,153.9,130.6,121.5,108.1,103.8,89.56,91.17,83.17,80.07,72.08,73.68,50.47,39.94,34.78,31.24,31.00,25.33,21.04,17.71,14.66,11.74,9.21,7.31,5.59,3.99,1.96,1.00,.526,.266,.126,.036,.029,.017,.013,50*0.0/
# ATTACHMENT DISSOCIATIVE     SF5-                 BRAUN ET AL 2009 
      DATA YAT2/14*0.0,.477,.453,.443,.413,.395,.377,.366,.349,.342,.292,.259,.232,.220,.203,.192,.179,.171,.161,.155,.148,.144,.142,.134,.132,.130,.123,.113,.109,.103,.101,.096,.093,.093,.096,.099,.100,.110,.115,.123,.123,.134,.164,.198,.232,.265,.389,.513,.676,.743,.810,.710,.632,.479,.394,.299,.247,.190,.157,.130,.0801,.0573,.0397,.0283,.0189,.0150,.0103,.0069,.0049,31*0.0/
# ATTACHMENT  DISSOCIATIVE   SF4-     J.PHYS.CHEM.REF.DATA 29(2000)267
# UNITS 10**-18
      DATA YAT3/87*0.0,.0084,.0350,.144,.457,.528,.394,.251,.130,.046,.0084,.0032,15*0.0/
# ATTACHMENT DISSOCIATIVE    SF3-     J.PHYS.CHEM.REF.DATA 29(2000)267
# UNITS 10**-18
      DATA YAT4/96*0.0,.0014,.0046,.015,.033,.051,.0577,.064,.075,.071,.049,.026,.011,.0031,.0008,3*0.0/
# ATTACHMENT DISSOCIATIVE   SF2-      J.PHYS.CHEM.REF.DATA 29(2000)267
# UNITS 10**-18
      DATA YAT5/100*0.0,0.00,.00019,.00037,.0014,.0042,.0076,.0106,.0087,.0044,.0017,.00068,.00028,0.00/
# ATTACHMENT DISSOCIATIVE    F2-      J.PHYS.CHEM.REF.DATA 29(2000)267
# UNITS 10**-18
      DATA YAT6/77*0.0,.003,.004,.005,.006,.007,.008,.0075,.006,.0042,.0026,.0026,.00265,.0707,.0489,.0155,.0038,.0019,.0015,.0015,.0018,.0031,.0065,.0104,.0200,.0308,.0503,.0910,.0954,.0615,.0274,.0111,.0050,.0032,.0018,.0012,0.00/
# ATTACHMENT DISSOCIATIVE    F-       J.PHYS.CHEM.REF.DATA 29(2000)267
# UNITS 10**-18
      DATA YAT7/80*0.0,0.00,.010,.022,.075,.149,.162,.098,.171,.856,2.69,4.63,4.39,2.78,1.37,.749,.615,.977,1.42,1.57,1.39,1.13,1.14,1.31,2.10,2.35,1.95,1.22,.629,.400,.340,.310,.300,0.0/
# DISSOCIATION TRIPLET + SINGLETS ( SINGLETS GIVEN ANALYTICALLY)
#
# TRIPLETS SCALED BY 1/E**2 AT HIGH ENERGY  
      DATA XTR1/9.60,10.6,12.0,13.0,14.0,15.0,17.0,19.0,22.0,25.0,29.0,32.0/
      DATA YTR1/0.00,.009,.030,.045,.050,.054,.059,.060,.054,.045,.033,.026/
      DATA XTR2/10.9,12.4,14.0,15.0,16.0,18.0,20.0,23.0,26.0,30.0,33.0/
      DATA YTR2/0.00,.053,.097,.111,.119,.130,.132,.119,.099,.073,.057/
      DATA XTR3/14.4,15.4,17.0,18.0,20.0,22.0,25.0,28.0,32.0,35.0,38.0/
      DATA YTR3/0.00,.110,.227,.265,.299,.315,.315,.299,.236,.183,.135/
# BREMSSTRAHLUNG X-SECTION WITH CUT UNITS 10**-24
      DATA Z16T/1299.,871.,480.,289.,167.,79.5,46.9,29.4,19.6,17.5,17.5,17.8,18.2,18.5,18.6,18.9,19.1,19.3,19.5,19.7,19.8,19.9,20.0,20.0,20.1/
      DATA Z9T/573.,358.,179.,101.6,57.3,26.5,15.4,9.63,6.52,5.92,6.01,6.18,6.35,6.43,6.52,6.65,6.75,6.87,6.95,7.02,7.07,7.10,7.12,7.13,7.14/
      DATA EBRM/1000.,2000.,5000.,1.E4,2.E4,5.E4,1.E5,2.E5,5.E5,1.E6,2.E6,3.E6,4.E6,5.E6,6.E6,8.E6,1.E7,1.5E7,2.E7,3.E7,4.E7,5.E7,6.E7,8.E7,1.E8/
#-----------------------------------------------------------------------
#
#-----------------------------------------------------------------------
#     NANISO=0
      if(NANISO == 0):
 :
       NAME=' SF6 2014    ISOTROPIC  '
      else:
       NAME=' SF6 2014  ANISOTROPIC  '
      # endif
#-----------------------------------------------------------------------
# BORN BETHE CONSTANTS
      A0=0.52917720859D-08
      RY=13.60569193
      CONST=1.873884D-20
      EMASS2=1021997.804
      API=numpy.arccos(-1.00)
      BBCONST=16.00*API*A0*A0*RY*RY/EMASS2
#
# BORN BETHE VALUES FOR IONISATION
      AM2=13.894
      C=140.7
# TRIPLET ANPLITUDE NORMALISATION
      AMPTR1=1.0
      AMPTR2=1.0
      AMPTR3=1.0
#  DIPOLE CONSTANT FOR VIBRATIONS V4 AND V3 
      V4DCONST=0.236
      V3DCONST=2.83
#  ARRAY SIZE
      NASIZE=20000
# 
      NION=12
      NATT=1
      NIN=35
      NNULL=0 
      IONMODEL=0
#
      NBREM=25
      DO 8 J=1,NIN
      IZBR[J]=0
    8 CONTINUE
      IZBR(36)=16
      IZBR(37)=9
#
      DO 1 J=1,6
    1 KEL[J]=NANISO
# SUPERELASTIC, V4,V1 AND V3 SET TO ISOTROPIC
# NB SET TO 2 IN DEGRAD
      KIN[1]=0
      KIN(3)=0
      KIN(5)=0
# INELASTIC V1,2V1,3V1,4V1 AND 5V1 SET TO STANDARD ANG DISTRIBUTION
      KIN(4)=2
      KIN(7)=2
      KIN(8)=2
      KIN(9)=2
      KIN(10)=2
# V4 AND V3 VIBRATIONS ANISOTROPIC ( CAPITELLI-LONGO)
# NB SET TO 2 IN DEGRAD
      KIN(2)=1
      KIN(6)=1
# 
# ANGULAR DISTRIBUTION FOR DISSOCIATIVE EXCITATION IS OKHRIMOVSKYY TYPE 
      DO 2 J=11,NIN
    2 KIN[J]=2
#
#  RAT IS MOMENTUM TRANSFER TO TOTAL RATIO FOR VIBRATIONS IN THE
#  RESONANCE AND THRESHOLD REGION  FOR THE VIBRATION V3.     
#  USED DIPOLE ANGULAR DISTRIBUTION FOR V3 AND V4 NEAR THRESHOLD.
      RAT=1.0  
#                                                         
      NDATA=159 
      N1V1=13
      N2V1=12
      N3V1=7
      N4V1=7
      N5V1=5
      N1V3=17                                                      
      NIOND=55
      NIONL3=100
      NIONL2=100
      NIONL1=100
      NKSHS=80
      NKSHF=79                                                        
      NATT1=113    
      NTRP1=12
      NTRP2=11
      NTRP3=11                                                    
# VIBRATIONAL DEGENERACY
      DEGV4=3.0
      DEGV1=1.0
      DEGV3=3.0
#
      E[1]=0.0                                                          
      E(2)=2.0*EMASS/(146.0554192*AMU)                                
      E(3)=15.67                             
      E(4)=0.0                                              
      E(5)=0.0                           
      E(6)=0.0 
# 
      EION[1]=E(3)  
      EION(2)=18.5
      EION(3)=18.8
      EION(4)=27.0
      EION(5)=31.0
      EION(6)=37.0
      EION(7)=46.5
      EION(8)=164.16
      EION(9)=165.36
      EION(10)=230.9
      EION(11)=2472.0
      EION(12)=685.4         
# OPAL BEATY
      EOBY[1]=EION[1]*0.8
      EOBY(2)=EION(2)*0.8
      EOBY(3)=EION(3)*0.8
      EOBY(4)=EION(4)*0.8
      EOBY(5)=EION(5)*0.8
      EOBY(6)=EION(6)*0.8
      EOBY(7)=EION(7)*0.8
      EOBY(8)=EION(8)*1.0
      EOBY(9)=EION(9)*1.0
      EOBY(10)=EION(10)*1.0
      EOBY(11)=EION(11)*1.0
      EOBY(12)=EION(12)*1.0
#
# FLUORESCENCE DATA
      DO 22 NK=1,6 
      NC0(NK)=0
      EC0(NK)=0.0
      WKLM(NK)=0.0
      EFL(NK)=0.0
      NG1(NK)=0
      EG1(NK)=0.0
      NG2(NK)=0
      EG2(NK)=0.0
      LEGAS(NK)=0
      ISHELL(NK)=0
   22 CONTINUE
# IONISATION TO 2+ CHARGE STATES
      NC0(7)=1
      EC0(7)=1.0
      WKLM(7)=0.0
      EFL(7)=0.0
      NG1(7)=0
      EG1(7)=0.0
      NG2(7)=0
      EG2(7)=0.0
      LEGAS(7)=0
      ISHELL(7)=0
# SULFUR L3 SHELL
      NC0(8)=2
      EC0(8)=138.
      WKLM(8)=0.00093
      EFL(8)=150.
      NG1(8)=1
      EG1(8)=138.
      NG2(8)=1
      EG2(8)=5.
      LEGAS(8)=1
      ISHELL(8)=4
# SULFUR L2 SHELL
      NC0(9)=2
      EC0(9)=133.
      WKLM(9)=0.00093
      EFL(9)=150.
      NG1(9)=1
      EG1(9)=133.
      NG2(9)=1
      EG2(9)=5.0
      LEGAS(9)=1
      ISHELL(9)=3
# SULFUR L1 SHELL
      NC0(10)=2
      EC0(10)=170.
      WKLM(10)=0.00093
      EFL(10)=215.
      NG1(10)=2
      EG1(10)=170.
      NG2(10)=1
      EG2(10)=5.0
      LEGAS(10)=1
      ISHELL(10)=2
# SULFUR K  SHELL
      NC0(11)=4
      EC0(11)=2353.
      WKLM(11)=0.0804
      EFL(11)=2308.
      NG1(11)=3
      EG1(11)=2220.
      NG2(11)=2
      EG2(11)=90.0
      LEGAS(11)=1
      ISHELL(11)=1
# FLUORINE K SHELL
      NC0(12)=3
      EC0(12)=625.2
      WKLM(12)=0.010
      EFL(12)=668.
      NG1(12)=2
      EG1(12)=625.2
      NG2(12)=1
      EG2(12)=5.0
      LEGAS(12)=2  
      ISHELL(12)=1
# OFFSET ENERGY FOR IONISATION ELECTRON ANGULAR DISTRIBUTION
      DO 776 J=1,NION
      DO 777 I=1,NASIZE
      if(EG[I]:
 > EION[J]) :
       IOFFION[J]=I-1
       GO TO 776
      # endif
  777 CONTINUE
  776 CONTINUE
#
      EIN[1]=-0.076253
      EIN(2)=0.076253
      EIN(3)=-0.096032  
      EIN(4)=0.096032 
      EIN(5)=-0.11754  
      EIN(6)=0.11754  
      EIN(7)=0.192064  
      EIN(8)=0.288096 
      EIN(9)=0.384128
      EIN(10)=0.48016
      EIN(11)=9.60 
      EIN(12)=10.0                                               
      EIN(13)=10.5
      EIN(14)=10.9                                                      
      EIN(15)=11.0
      EIN(16)=11.5
      EIN(17)=12.0
      EIN(18)=12.5
      EIN(19)=13.0
      EIN(20)=13.5
      EIN(21)=14.0
      EIN(22)=14.4
      EIN(23)=14.5
      EIN(24)=15.0
      EIN(25)=15.5
      EIN(26)=16.0 
      EIN(27)=16.5  
      EIN(28)=17.0
      EIN(29)=17.5
      EIN(30)=18.0
      EIN(31)=18.5
      EIN(32)=19.0
      EIN(33)=19.5
      EIN(34)=20.0
      EIN(35)=23.0
      EIN(36)=0.0
      EIN(37)=0.0
# OFFSET ENERGY FOR EXCITATION LEVELS ANGULAR DISTRIBUTION
      DO 3 NL=1,35
      DO 651 I=1,NASIZE
      if(EG[I]:
 > abs(EIN(NL))) :
       IOFFN(NL)=I-1
       GO TO 3
      # endif
  651 CONTINUE
    3 CONTINUE
#***********************************************************************
# ENTER PENNING TRANSFER FRACTION FOR EACH LEVEL 
# LEVELS ARE DISSOCIATIVE SO DO NOT  GIVE PENNING TRANSFERS
      DO 4 K=1,35
      DO 4 L=1,3
    4 PENFRA[L,K]=0.0
      if(IPEN == 0):
 GO TO 6
      DO 5 KDUM=10,14
      if(PENFRA[1,KDUM] == 0.0):
 GO TO 5
      WRITE(6,999) NAME,EIN(KDUM),PENFRA[1,KDUM],PENFRA[2,KDUM],PENFRA[3,KDUM]
  999 print(' GAS = ',A15,' ENERGY LEVEL = ','%.4f' %,' EV.',/,' PENNING PROBABILITY =','%.3f' % ,' ABS.LENGTH =',F7.2,' DECAY TIME =',F7.1,/)
    5 CONTINUE
#***********************************************************************
#
    6 SCRPT[1]='                                                  '
      SCRPT(2)=' ELASTIC   ANISOTROPIC      SF6                   '
      if(NANISO == 0):
 :
      SCRPT(2)=' ELASTIC     ISOTROPIC      SF6                   '
      # endif
      SCRPT(3)=' IONISATION  SF5 +                 ELOSS=   15.67 '
      SCRPT(4)=' IONISATION  SF4 +                 ELOSS=   18.5  '
      SCRPT(5)=' IONISATION  SF3 +                 ELOSS=   18.8  '
      SCRPT(6)=' IONISATION  SF2 +                 ELOSS=   27.0  '
      SCRPT(7)=' IONISATION  SF  +                 ELOSS=   31.0  '
      SCRPT(8)=' IONISATION  SUM OF: S + AND F +   ELOSS=   37.0  '
      SCRPT(9)=' IONISATION  SUM OF (SF3 SF2 SF)2+ ELOSS=   46.5  '
      SCRPT(10)=' IONISATION SULFUR L3 SHELL        ELOSS=  164.16 '
      SCRPT(11)=' IONISATION SULFUR L2 SHELL        ELOSS=  165.36 '
      SCRPT(12)=' IONISATION SULFUR L1 SHELL        ELOSS=  230.9  '
      SCRPT(13)=' IONISATION SULFUR  K SHELL        ELOSS= 2472.0  '
      SCRPT(14)=' IONISATION FLUORINE K SHELL       ELOSS=  685.4  '
      SCRPT(15)=' ATTACHMENT    (VALID FOR T=300KELVIN)            '
      SCRPT(16)='                                                  '
      SCRPT(17)='                                                  '
      SCRPT(18)=' VIBRATION V4 SUPERELASTIC         ELOSS=-0.076253' 
      SCRPT(19)=' VIBRATION V4 ANISOTROPIC          ELOSS= 0.076253'
      SCRPT(20)=' VIBRATION V1 SUPERELASTIC         ELOSS=-0.096032'
      SCRPT(21)=' VIBRATION V1 ISOTROPIC            ELOSS= 0.096032'
      SCRPT(22)=' VIBRATION V3 SUPERELASTIC         ELOSS=-0.11754 '
      SCRPT(23)=' VIBRATION V3 ANISOTROPIC          ELOSS= 0.11754 '
      SCRPT(24)=' VIBRATION 2V1                     ELOSS= 0.192064'
      SCRPT(25)=' VIBRATION 3V1                     ELOSS= 0.288096'
      SCRPT(26)=' VIBRATION 4V1                     ELOSS= 0.384128'
      SCRPT(27)=' VIBRATION 5V1 + HIGHER HARMONICS  ELOSS= 0.48016 '
      SCRPT(28)=' EXC. TRIPLET  DISSOCIATION        ELOSS=  9.6    '
      SCRPT(29)=' EXC. SINGLET  DISSOC.   F=0.0443  ELOSS= 10.0    '
      SCRPT(30)=' EXC. SINGLET  DISSOC.   F=0.0642  ELOSS= 10.5    '  
      SCRPT(31)=' EXC. TRIPLET  DISSOCIATION        ELOSS= 10.9    '
      SCRPT(32)=' EXC. SINGLET  DISSOC.   F=0.1839  ELOSS= 11.0    '
      SCRPT(33)=' EXC. SINGLET  DISSOC.   F=0.1073  ELOSS= 11.5    '
      SCRPT(34)=' EXC. SINGLET  DISSOC.   F=0.0880  ELOSS= 12.0    '
      SCRPT(35)=' EXC. SINGLET  DISSOC.   F=0.0304  ELOSS= 12.5    '
      SCRPT(36)=' EXC. ION PAIR F- + SF5+ F=0.0648  ELOSS= 13.0    '
      SCRPT(37)=' EXC. SINGLET  DISSOC.   F=0.1067  ELOSS= 13.5    '
      SCRPT(38)=' EXC. SINGLET  DISSOC.   F=0.1047  ELOSS= 14.0    '
      SCRPT(39)=' EXC. TRIPLET  DISSOCIATION        ELOSS= 14.4    '
      SCRPT(40)=' EXC. SINGLET  DISSOC.   F=0.1211  ELOSS= 14.5    '
      SCRPT(41)=' EXC. SINGLET  DISSOC.   F=0.2225  ELOSS= 15.0    '
      SCRPT(42)=' EXC. SINGLET  DISSOC.   F=0.2731  ELOSS= 15.5    '
      SCRPT(43)=' EXC. SINGLET  DISSOC.   F=0.1514  ELOSS= 16.0    '
      SCRPT(44)=' EXC. SINGLET  DISSOC.   F=0.1831  ELOSS= 16.5    '
      SCRPT(45)=' EXC. SINGLET  DISSOC.   F=0.1678  ELOSS= 17.0    '
      SCRPT(46)=' EXC. SINGLET  DISSOC.   F=0.1098  ELOSS= 17.5    '
      SCRPT(47)=' EXC. SINGLET  DISSOC.   F=0.0623  ELOSS= 18.0    '
      SCRPT(48)=' EXC. SINGLET  DISSOC.   F=0.0361  ELOSS= 18.5    '
      SCRPT(49)=' EXC. SINGLET  DISSOC.   F=0.0107  ELOSS= 19.0    '
      SCRPT(50)=' EXC. SINGLET  DISSOC.   F=0.0129  ELOSS= 19.5    '
      SCRPT(51)=' EXC. SINGLET  DISSOC.   F=0.0053  ELOSS= 20.0    '
      SCRPT(52)=' EXC. SINGLET  DISSOC.   F=0.0290  ELOSS= 23.0    '
      SCRPT(53)=' BREMSSTRAHLUNG FROM SULFUR ATOM                  '
      SCRPT(54)=' BREMSSTRAHLUNG FROM FLUORINE ATOM                '
# CALC LEVEL POPULATIONS
      APOPV4=DEGV4*math.exp(EIN[1]/AKT)
      APOPV1=DEGV1*math.exp(EIN(3)/AKT)
      APOPV3=DEGV3*math.exp(EIN(5)/AKT)
      APOPGS=1.0
      APOPSUM=APOPGS+APOPV4+APOPV1+APOPV3
      APOPGS=1.0/APOPSUM
      APOPV4=APOPV4/APOPSUM
      APOPV1=APOPV1/APOPSUM
      APOPV3=APOPV3/APOPSUM
#  RENORMALISE GROUND STATE TO ALLOW FOR EXCITATION X-SEC 
#  FROM EXCITED VIBRATIONAL STATE 
      APOPGS=1.0
#
#     EN=-ESTEP/2.0  
      DO 1000 I=1,NSTEP 
      EN=EG[I]                                             
#     EN=EN+ESTEP   
      GAMMA1=(EMASS2+2.00*EN)/EMASS2
      GAMMA2=GAMMA1*GAMMA1
      BETA=math.sqrt(1.00-1.00/GAMMA2)
      BETA2=BETA*BETA
# USE LOG INTERPOLATION FOR ELASTIC      
      if(EN <= XEN(2):
) : 
       QELA=1434.D-16
       QMOM=1434.D-16
       PQ2=0.0
       GO TO 30 
      # endif                                                    
      DO 10 J=2,NDATA 
      if(EN <= XEN[J]:
) GO TO 11                                        
   10 CONTINUE                                                          
      J=NDATA                                                           
   11 YXJ=math.log(YELT[J])
      YXJ1=math.log(YELT(J-1))
      XNJ=math.log(XEN[J])
      XNJ1=math.log(XEN(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QELA=math.exp(A*math.log(EN)+B)*1.D-16
      YXJ=math.log(YELM[J])
      YXJ1=math.log(YELM(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QMOM=math.exp(A*math.log(EN)+B)*1.D-16
# 
      YXJ=math.log(YEPS[J])
      YXJ1=math.log(YEPS(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      PQ2=math.exp(A*math.log(EN)+B)
#  EPSILON =1-YEPS
      PQ2=1.00-PQ2
   30 CONTINUE
      PQ1=0.5+(QELA-QMOM)/QELA
      if(NANISO == 0):
 PEQEL(2,I)=0.5
      if(NANISO == 1):
 PEQEL(2,I)=PQ1
      if(NANISO == 2):
 PEQEL(2,I)=PQ2
      Q(2,I)=QELA 
      if(NANISO == 0):
 Q(2,I)=QMOM
# IONISATION   SF5 +                    
      QION(1,I)=0.0             
      PEQION(1,I)=0.5   
      if(NANISO == 2):
 PEQION(1,I)=0.0                                   
      if(EN < EION[1]:
) GO TO 44   
      if(EN > XION(NIOND):
) GO TO 42                                   
      DO 40 J=2,NIOND                                                  
      if(EN <= XION[J]:
) GO TO 41                                       
   40 CONTINUE                                                          
      J=NIOND                                                   
   41 A=(YION[J]-YION(J-1))/(XION[J]-XION(J-1))                         
      B=(XION(J-1)*YION[J]-XION[J]*YION(J-1))/(XION(J-1)-XION[J])       
      QION(1,I)=(A*EN+B)*1.D-16
      GO TO 43
# USE BORN BETHE X-SECTION ABOVE XION(NIOND) EV
   42 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(1,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.5403
   43 CONTINUE  
#        
      if(EN <= (2.0*EION[1]:
)) GO TO 44
      PEQION(1,I)=PEQEL(2,(I-IOFFION[1]))
# IONISATION SF4 +
   44 QION(2,I)=0.0             
      PEQION(2,I)=0.5   
      if(NANISO == 2):
 PEQION(2,I)=0.0                                   
      if(EN < EION(2):
) GO TO 54   
      if(EN > XION(NIOND):
) GO TO 52                                   
      DO 50 J=2,NIOND                                                  
      if(EN <= XION[J]:
) GO TO 51                                       
   50 CONTINUE                                                          
      J=NIOND                                                   
   51 A=(YIN1[J]-YIN1(J-1))/(XION[J]-XION(J-1))                         
      B=(XION(J-1)*YIN1[J]-XION[J]*YIN1(J-1))/(XION(J-1)-XION[J])       
      QION(2,I)=(A*EN+B)*1.D-16
      GO TO 53
# USE BORN BETHE X-SECTION ABOVE XION(NIOND) EV
   52 QION(2,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.0416
   53 CONTINUE  
#        
      if(EN <= (2.0*EION(2):
)) GO TO 54
      PEQION(2,I)=PEQEL(2,(I-IOFFION(2)))
# IONISATION SF3 +
   54 QION(3,I)=0.0             
      PEQION(3,I)=0.5   
      if(NANISO == 2):
 PEQION(3,I)=0.0                                   
      if(EN < EION(3):
) GO TO 64   
      if(EN > XION(NIOND):
) GO TO 62                                   
      DO 60 J=2,NIOND                                                  
      if(EN <= XION[J]:
) GO TO 61                                       
   60 CONTINUE                                                          
      J=NIOND                                                   
   61 A=(YIN2[J]-YIN2(J-1))/(XION[J]-XION(J-1))                         
      B=(XION(J-1)*YIN2[J]-XION[J]*YIN2(J-1))/(XION(J-1)-XION[J])       
      QION(3,I)=(A*EN+B)*1.D-16
      GO TO 63
# USE BORN BETHE X-SECTION ABOVE XION(NIOND) EV
   62 QION(3,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.1470
   63 CONTINUE  
#        
      if(EN <= (2.0*EION(3):
)) GO TO 64
      PEQION(3,I)=PEQEL(2,(I-IOFFION(3)))
# IONISATION SF2 +
   64 QION(4,I)=0.0             
      PEQION(4,I)=0.5   
      if(NANISO == 2):
 PEQION(4,I)=0.0                                   
      if(EN < EION(4):
) GO TO 74   
      if(EN > XION(NIOND):
) GO TO 72                                   
      DO 70 J=2,NIOND                                                  
      if(EN <= XION[J]:
) GO TO 71                                       
   70 CONTINUE                                                          
      J=NIOND                                                   
   71 A=(YIN3[J]-YIN3(J-1))/(XION[J]-XION(J-1))                         
      B=(XION(J-1)*YIN3[J]-XION[J]*YIN3(J-1))/(XION(J-1)-XION[J])       
      QION(4,I)=(A*EN+B)*1.D-16
      GO TO 73
# USE BORN BETHE X-SECTION ABOVE XION(NIOND) EV
   72 QION(4,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.0321
   73 CONTINUE  
#        
      if(EN <= (2.0*EION(4):
)) GO TO 74
      PEQION(4,I)=PEQEL(2,(I-IOFFION(4)))
# IONISATION SF  +
   74 QION(5,I)=0.0             
      PEQION(5,I)=0.5   
      if(NANISO == 2):
 PEQION(5,I)=0.0                                   
      if(EN < EION(5):
) GO TO 84   
      if(EN > XION(NIOND):
) GO TO 82                                   
      DO 80 J=2,NIOND                                                  
      if(EN <= XION[J]:
) GO TO 81                                       
   80 CONTINUE                                                          
      J=NIOND                                                   
   81 A=(YIN4[J]-YIN4(J-1))/(XION[J]-XION(J-1))                         
      B=(XION(J-1)*YIN4[J]-XION[J]*YIN4(J-1))/(XION(J-1)-XION[J])       
      QION(5,I)=(A*EN+B)*1.D-16
      GO TO 83
# USE BORN BETHE X-SECTION ABOVE XION(NIOND) EV
   82 QION(5,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.0724
   83 CONTINUE  
#        
      if(EN <= (2.0*EION(5):
)) GO TO 84 
      PEQION(5,I)=PEQEL(2,(I-IOFFION(5)))
# IONISATION SUM OF S + AND F +
   84 QION(6,I)=0.0             
      PEQION(6,I)=0.5   
      if(NANISO == 2):
 PEQION(6,I)=0.0                                   
      if(EN < EION(6):
) GO TO 94   
      if(EN > XION(NIOND):
) GO TO 92                                   
      DO 90 J=2,NIOND                                                  
      if(EN <= XION[J]:
) GO TO 91                                       
   90 CONTINUE                                                          
      J=NIOND                                                   
   91 A=(YIN5[J]-YIN5(J-1))/(XION[J]-XION(J-1))                         
      B=(XION(J-1)*YIN5[J]-XION[J]*YIN5(J-1))/(XION(J-1)-XION[J])       
      QION(6,I)=(A*EN+B)*1.D-16
      A=(YIN6[J]-YIN6(J-1))/(XION[J]-XION(J-1))                         
      B=(XION(J-1)*YIN6[J]-XION[J]*YIN6(J-1))/(XION(J-1)-XION[J])
      QION(6,I)=QION(6,I)+(A*EN+B)*1.D-16
      GO TO 93
# USE BORN BETHE X-SECTION ABOVE XION(NIOND) EV
   92 QION(6,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.1466
   93 CONTINUE
      if(EN < (2.0*EION(6):
)) GO TO 94
      PEQION(6,I)=PEQEL(2,(I-IOFFION(6)))  
# IONISATION SUM OF SF3,SF2 AND SF  ALL DOUBLE CHARGED
   94 QION(7,I)=0.0             
      PEQION(7,I)=0.5   
      if(NANISO == 2):
 PEQION(7,I)=0.0                                   
      if(EN < EION(7):
) GO TO 104   
      if(EN > XION(NIOND):
) GO TO 102                                   
      DO 100 J=2,NIOND                                                  
      if(EN <= XION[J]:
) GO TO 101                                       
  100 CONTINUE                                                          
      J=NIOND                                                   
  101 A=(YIN7[J]-YIN7(J-1))/(XION[J]-XION(J-1))                         
      B=(XION(J-1)*YIN7[J]-XION[J]*YIN7(J-1))/(XION(J-1)-XION[J])       
      QION(7,I)=(A*EN+B)*1.D-16
      GO TO 103
# USE BORN BETHE X-SECTION ABOVE XION(NIOND) EV
  102 QION(7,I)=CONST*(AM2*(X1-DEN[I]/2.0)+C*X2)*0.0200
  103 CONTINUE  
      if(EN < (2.0*EION(7):
)) GO TO 104
      PEQION(7,I)=PEQEL(2,(I-IOFFION(7)))
# CALCULATE SULFUR L3 SHELL IONISATION
  104 QION(8,I)=0.0
      PEQION(8,I)=0.5
      if(NANISO == 2):
 PEQION(8,I)=0.0
      if(EN < EION(8):
) GO TO 114
      DO 110 J=2,NIONL3
      if(EN <= XL3SH[J]:
) GO TO 111
  110 CONTINUE
      J=NIONL3
  111 A=(YL3SH[J]-YL3SH(J-1))/(XL3SH[J]-XL3SH(J-1))
      B=(XL3SH(J-1)*YL3SH[J]-XL3SH[J]*YL3SH(J-1))/(XL3SH(J-1)-XL3SH[J])
      QION(8,I)=(A*EN+B)*1.D-16
      if(EN <= (2.0*EION(8):
)) GO TO 114
      PEQION(8,I)=PEQEL(2,(I-IOFFION(8)))
# CALCULATE SULFUR L2 SHELL IONISATION  
  114 QION(9,I)=0.0
      PEQION(9,I)=0.5
      if(NANISO == 2):
 PEQION(9,I)=0.0
      if(EN < EION(9):
) GO TO 124
      DO 120 J=2,NIONL2
      if(EN <= XL2SH[J]:
) GO TO 121
  120 CONTINUE
      J=NIONL2
  121 A=(YL2SH[J]-YL2SH(J-1))/(XL2SH[J]-XL2SH(J-1))
      B=(XL2SH(J-1)*YL2SH[J]-XL2SH[J]*YL2SH(J-1))/(XL2SH(J-1)-XL2SH[J])
      QION(9,I)=(A*EN+B)*1.D-16
      if(EN <= (2.0*EION(9):
)) GO TO 124
      PEQION(9,I)=PEQEL(2,(I-IOFFION(9)))
# CALCULATE SULFUR L1 SHELL IONISATION  
  124 QION(10,I)=0.0
      PEQION(10,I)=0.5
      if(NANISO == 2):
 PEQION(10,I)=0.0
      if(EN < EION(10):
) GO TO 134
      DO 130 J=2,NIONL1
      if(EN <= XL1SH[J]:
) GO TO 131
  130 CONTINUE
      J=NIONL1
  131 A=(YL1SH[J]-YL1SH(J-1))/(XL1SH[J]-XL1SH(J-1))
      B=(XL1SH(J-1)*YL1SH[J]-XL1SH[J]*YL1SH(J-1))/(XL1SH(J-1)-XL1SH[J])
      QION(10,I)=(A*EN+B)*1.D-16
      if(EN <= (2.0*EION(10):
)) GO TO 134
      PEQION(10,I)=PEQEL(2,(I-IOFFION(10)))
# CALCULATE SULFUR K SHELL IONISATION  
  134 QION(11,I)=0.0
      PEQION(11,I)=0.5
      if(NANISO == 2):
 PEQION(11,I)=0.0
      if(EN < EION(11):
) GO TO 144
      DO 140 J=2,NKSHS
      if(EN <= XKSHS[J]:
) GO TO 141
  140 CONTINUE
      J=NKSHS
  141 A=(YKSHS[J]-YKSHS(J-1))/(XKSHS[J]-XKSHS(J-1))
      B=(XKSHS(J-1)*YKSHS[J]-XKSHS[J]*YKSHS(J-1))/(XKSHS(J-1)-XKSHS[J])
      QION(11,I)=(A*EN+B)*1.D-16
      if(EN <= (2.0*EION(11):
)) GO TO 144
      PEQION(11,I)=PEQEL(2,(I-IOFFION(11)))
# CALCULATE FLUORINE K-SHELL IONISATION
  144 QION(12,I)=0.00
      PEQION(12,I)=0.5   
      if(NANISO == 2):
 PEQION(12,I)=0.0                                  
      if(EN <= EION(12):
) GO TO 154     
      DO 150 J=2,NKSHF                                                  
      if(EN <= XKSHF[J]:
) GO TO 151                                      
  150 CONTINUE                                                          
      J=NKSHF                                                   
  151 A=(YKSHF[J]-YKSHF(J-1))/(XKSHF[J]-XKSHF(J-1))                     
      B=(XKSHF(J-1)*YKSHF[J]-XKSHF[J]*YKSHF(J-1))/(XKSHF(J-1)-XKSHF[J])
      QION(12,I)=(A*EN+B)*1.D-16  
      if(EN <= (2.0*EION(12):
)) GO TO 154
      PEQION(12,I)=PEQEL(2,(I-IOFFION(12)))
# CORECTION TO IONISATION DUE TO SPLIT INTO K AND L SHELLS
  154 SSUM=QION(8,I)+QION(9,I)+QION(10,I)+QION(11,I)+QION(12,I)
      if(SSUM <= 0.0):
 GO TO 200
      TOT=QION(1,I)+QION(2,I)+QION(3,I)+QION(4,I)+QION(5,I)+QION(6,I)+QION(7,I)
      CRFAC=(TOT-SSUM)/TOT
      DO 155 J=1,7
      QION[J][I]=QION[J][I]*CRFAC
  155 CONTINUE
#                                      
# ATTACHMENT (USE LOG INTERPOLATION FOR SF6- AND LINEAR FOR OTHER IONS)      
  200 Q(4,I)=0.0                                                        
      if(EN <= 0.0):
 GO TO 250                                       
      if(EN >= XATT(NATT1):
) GO TO 250                                   
      DO 210 J=2,NATT1                                                 
      if(EN <= XATT[J]:
) GO TO 220                                       
  210 CONTINUE                                                          
      J=NATT1  
  220 XNJ=math.log(XATT[J])
      XNJ1=math.log(XATT(J-1))
      XNL=XATT[J]
      XNL1=XATT(J-1)
# LOG
      if(YAT1[J]:
 == 0.0 or YAT1(J-1) == 0.0) :
       QAT1=0.0
       GO TO 221
      # endif
      Y1J=math.log(YAT1[J])
      Y1J1=math.log(YAT1(J-1))
      A1=(Y1J-Y1J1)/(XNJ-XNJ1)
      B1=(XNJ1*Y1J-XNJ*Y1J1)/(XNJ1-XNJ)
      QAT1=math.exp(A1*math.log(EN)+B1)*1.D-16
# LINEAR
  221 Y2J=YAT2[J]
      Y2J1=YAT2(J-1)
      Y3J=YAT3[J]
      Y3J1=YAT3(J-1)
      Y4J=YAT4[J]
      Y4J1=YAT4(J-1)
      Y5J=YAT5[J]
      Y5J1=YAT5(J-1)
      Y6J=YAT6[J]
      Y6J1=YAT6(J-1)
      Y7J=YAT7[J]
      Y7J1=YAT7(J-1)
      A2=(Y2J-Y2J1)/(XNL-XNL1)
      B2=(XNL1*Y2J-XNL*Y2J1)/(XNL1-XNL)
      A3=(Y3J-Y3J1)/(XNL-XNL1)
      B3=(XNL1*Y3J-XNL*Y3J1)/(XNL1-XNL)
      A4=(Y4J-Y4J1)/(XNL-XNL1)
      B4=(XNL1*Y4J-XNL*Y4J1)/(XNL1-XNL)
      A5=(Y5J-Y5J1)/(XNL-XNL1)
      B5=(XNL1*Y5J-XNL*Y5J1)/(XNL1-XNL)
      A6=(Y6J-Y6J1)/(XNL-XNL1)
      B6=(XNL1*Y6J-XNL*Y6J1)/(XNL1-XNL)
      A7=(Y7J-Y7J1)/(XNL-XNL1)
      B7=(XNL1*Y7J-XNL*Y7J1)/(XNL1-XNL)
      QAT2=(A2*EN+B2)*1.D-16
      QAT3=(A3*EN+B3)*1.D-18
      QAT4=(A4*EN+B4)*1.D-18
      QAT5=(A5*EN+B5)*1.D-18
      QAT6=(A6*EN+B6)*1.D-18
      QAT7=(A7*EN+B7)*1.D-18
      Q(4,I)=QAT1+QAT2+QAT3+QAT4+QAT5+QAT6+QAT7
#                                                               
  250 Q(5,I)=0.0     
      Q(6,I)=0.0                                                        
# V4 SUPERELASTIC  
      QIN(1,I)=0.0
      PEQIN(1,I)=0.50
      if(KIN[1]:
 == 2) PEQIN(1,I)=0.0
      if(EN <= 0.0):
 GO TO 350
      EFAC=math.sqrt(1.0-(EIN[1]/EN))
#  DIPOLE 
      QIN(1,I)=V4DCONST*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      QIN(1,I)=QIN(1,I)*APOPV4/DEGV4*1.D-16
      if(KIN[1]:
 == 2) PEQIN(1,I)=PEQEL(2,(I-IOFFN[1]))
# V4 ANISOTROPIC
  350 QIN(2,I)=0.0
      PEQIN(2,I)=0.50
      if(KIN(2):
 == 2) PEQIN(2,I)=0.0
      if(EN <= EIN(2):
) GO TO 400
#  DIPOLE 
      EFAC=math.sqrt(1.0-(EIN(2)/EN))  
      ELF=EN-EIN(2)
      FWD=math.log((EN+ELF)/(EN+ELF-2.0*math.sqrt(EN*ELF)))
      BCK=math.log((EN+ELF+2.0*math.sqrt(EN*ELF))/(EN+ELF))
      QIN(2,I)=V4DCONST*math.log((1.0+EFAC)/(1.0-EFAC))/EN 
      QIN(2,I)=QIN(2,I)*APOPGS*1.D-16
      XMT=(1.5-FWD/(FWD+BCK))*Q(2,I)
      if(KIN(2):
 == 1) PEQIN(2,I)=0.5+(QIN(2,I)-XMT)/QIN(2,I)
      if(KIN(2):
 == 2) PEQIN(2,I)=PEQEL(2,(I-IOFFN(2)))    
# 1V1 SUPERELASTIC 
 400  QIN(3,I)=0.0
      PEQIN(3,I)=0.50
      if(KIN(3):
 == 2) PEQIN(3,I)=0.0
      if(EN <= 0.0):
 GO TO 450    
      if((EN+EIN(4):
) > XV1V1(N1V1)) GO TO 425                        
      DO 410 J=2,N1V1                                                 
      if((EN+EIN(4):
) <= XV1V1[J]) GO TO 420                             
  410 CONTINUE                                                          
      J=N1V1                                                          
  420 A=(YV1V1[J]-YV1V1(J-1))/(XV1V1[J]-XV1V1(J-1))                     
      B=(XV1V1(J-1)*YV1V1[J]-XV1V1[J]*YV1V1(J-1))/(XV1V1(J-1)-XV1V1[J])
      QIN(3,I)=(EN+EIN(4))*(A*(EN+EIN(4))+B)/EN
      GO TO 426
  425 QIN(3,I)=YV1V1(N1V1)*(XV1V1(N1V1)/(EN+EIN(4)))**2
  426 QIN(3,I)=QIN(3,I)*APOPV1/DEGV1*1.D-16 
      if(KIN(3):
 == 2) PEQIN(3,I)=PEQEL(2,(I-IOFFN(3)))                 
# 1V1   ISOTROPIC                                                    
  450 QIN(4,I)=0.0   
      PEQIN(4,I)=0.50              
      if(KIN(4):
 == 2) PEQIN(4,I)=0.0                                
      if(EN <= EIN(4):
) GO TO 500 
      if(EN > XV1V1(N1V1):
) GO TO 475                         
      DO 460 J=2,N1V1                                                
      if(EN <= XV1V1[J]:
) GO TO 470                                      
  460 CONTINUE                                                          
      J=N1V1                                                         
  470 A=(YV1V1[J]-YV1V1(J-1))/(XV1V1[J]-XV1V1(J-1))                     
      B=(XV1V1(J-1)*YV1V1[J]-XV1V1[J]*YV1V1(J-1))/(XV1V1(J-1)-XV1V1[J])
      QIN(4,I)=A*EN+B
      GO TO 476
  475 QIN(4,I)=YV1V1(N1V1)*(XV1V1(N1V1)/EN)**2 
  476 QIN(4,I)=QIN(4,I)*APOPGS*1.D-16 
      if(KIN(4):
 == 2) PEQIN(4,I)=PEQEL(2,(I-IOFFN(4)))
#
# V3 SUPERELASTIC  
  500 QIN(5,I)=0.0
      PEQIN(5,I)=0.50
      if(KIN(5):
 == 2) PEQIN(5,I)=0.0
      if(EN <= 0.0):
 GO TO 550
      if((EN+EIN(6):
) > XVBV3(N1V3)) GO TO 530
      DO 510 J=2,N1V3
      if((EN+EIN(6):
) <= XVBV3[J]) GO TO 520
  510 CONTINUE
      J=N1V3
  520 A=(YVBV3[J]-YVBV3(J-1))/(XVBV3[J]-XVBV3(J-1))                     
      B=(XVBV3(J-1)*YVBV3[J]-XVBV3[J]*YVBV3(J-1))/(XVBV3(J-1)-XVBV3[J])
      QIN(5,I)=(EN+EIN(6))*(A*(EN+EIN(6))+B)/EN
  530 EFAC=math.sqrt(1.0-(EIN(5)/EN))
# ADD DIPOLE 
      QIN(5,I)=QIN(5,I)+V3DCONST*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      QIN(5,I)=QIN(5,I)*APOPV3/DEGV3*1.D-16
      if(KIN(5):
 == 2) PEQIN(5,I)=PEQEL(2,(I-IOFFN(5)))
# V3 ANISOTROPIC
  550 QIN(6,I)=0.0
      PEQIN(6,I)=0.50
      if(KIN(6):
 == 2) PEQIN(6,I)=0.0
      if(EN <= EIN(6):
) GO TO 600
      if(EN > XVBV3(N1V3):
) GO TO 580
      DO 560 J=2,N1V3
      if(EN <= XVBV3[J]:
) GO TO 570
  560 CONTINUE
      J=N1V3
  570 A=(YVBV3[J]-YVBV3(J-1))/(XVBV3[J]-XVBV3(J-1))                     
      B=(XVBV3(J-1)*YVBV3[J]-XVBV3[J]*YVBV3(J-1))/(XVBV3(J-1)-XVBV3[J]) 
      QIN(6,I)=(A*EN+B)
# ADD DIPOLE PART
  580 EFAC=math.sqrt(1.0-(EIN(6)/EN))   
      ADIP=V3DCONST*math.log((1.0+EFAC)/(1.0-EFAC))/EN     
      ELF=EN-EIN(6)
      FWD=math.log((EN+ELF)/(EN+ELF-2.0*math.sqrt(EN*ELF)))
      BCK=math.log((EN+ELF+2.0*math.sqrt(EN*ELF))/(EN+ELF))
# RATIO OF MT TO TOTAL X-SECT FOR RESONANCE PART =RAT
      XMT=((1.5-FWD/(FWD+BCK))*ADIP+RAT*QIN(6,I))*APOPGS*1.D-16         
      QIN(6,I)=(QIN(6,I)+ADIP)*APOPGS*1.D-16 
      if(KIN(6):
 == 1) PEQIN(6,I)=0.5+(QIN(6,I)-XMT)/QIN(6,I)    
      if(KIN(6):
 == 2) PEQIN(6,I)=PEQEL(2,(I-IOFFN(6)))
c
# 2V1                                                         
  600 QIN(7,I)=0.0
      PEQIN(7,I)=0.50       
      if(KIN(7):
 == 2) PEQIN(7,I)=0.0                                 
      if(EN <= EIN(7):
) GO TO 650
      if(EN > XV2V1(N2V1):
) GO TO 621                               
      DO 610 J=2,N2V1                                                 
      if(EN <= XV2V1[J]:
) GO TO 620                                      
  610 CONTINUE                                                          
      J=N2V1                                                          
  620 A=(YV2V1[J]-YV2V1(J-1))/(XV2V1[J]-XV2V1(J-1))                     
      B=(XV2V1(J-1)*YV2V1[J]-XV2V1[J]*YV2V1(J-1))/(XV2V1(J-1)-XV2V1[J])
      QIN(7,I)=(A*EN+B)*1.D-16
      GO TO 630 
# SCALE BY 1/E**2 ABOVE XV2V1(N2V1) EV
  621 QIN(7,I)=YV2V1(N2V1)*(XV2V1(N2V1)/EN)**2*1.D-16 
  630 if(KIN(7) == 2) PEQIN(7,I)=PEQEL(2,(I-IOFFN(7))) 
# 3V1                                       
  650 QIN(8,I)=0.0    
      PEQIN(8,I)=0.50                
      if(KIN(8):
 == 2) PEQIN(8,I)=0.00                                  
      if(EN <= EIN(8):
) GO TO 680     
      if(EN > XV3V1(N3V1):
) GO TO 675                               
      DO 660 J=2,N3V1                                                
      if(EN <= XV3V1[J]:
) GO TO 670                                      
  660 CONTINUE                                                          
      J=N3V1                                                          
  670 A=(YV3V1[J]-YV3V1(J-1))/(XV3V1[J]-XV3V1(J-1))                     
      B=(XV3V1(J-1)*YV3V1[J]-XV3V1[J]*YV3V1(J-1))/(XV3V1(J-1)-XV3V1[J])
      QIN(8,I)=(A*EN+B)*1.D-16
      GO TO 676
# SCALE BY 1/E**2 ABOBE XV3V1(N3V1) EV
  675 QIN(8,I)=YV3V1(N3V1)*(XV3V1(N3V1)/EN)**2*1.D-16
  676 if(KIN(8) == 2) PEQIN(8,I)=PEQEL(2,(I-IOFFN(8)))
# 4V1                                   
  680 QIN(9,I)=0.0
      PEQIN(9,I)=0.50  
      if(KIN(9):
 == 2) PEQIN(9,I)=0.0             
      if(EN <= EIN(9):
) GO TO 685    
      if(EN > XV4V1(N4V1):
) GO TO 683
      DO 681 J=2,N4V1                                                 
      if(EN <= XV4V1[J]:
) GO TO 682                                      
  681 CONTINUE
      J=N4V1                                                          
  682 A=(YV4V1[J]-YV4V1(J-1))/(XV4V1[J]-XV4V1(J-1))                     
      B=(XV4V1(J-1)*YV4V1[J]-XV4V1[J]*YV4V1(J-1))/(XV4V1(J-1)-XV4V1[J]) 
      QIN(9,I)=(A*EN+B)*1.D-16   
      GO TO 684
# SCALE BY 1/E**2 ABOVE XV4V1(N4V1) EV
  683 QIN(9,I)=YV4V1(N4V1)*(XV4V1(N4V1)/EN)**2*1.D-16
  684 if(KIN(9) == 2) PEQIN(9,I)=PEQEL(2,(I-IOFFN(9)))
# 5V1                                   
  685 QIN(10,I)=0.0                   
      PEQIN(10,I)=0.50 
      if(KIN(10):
 == 2) PEQIN(10,I)=0.0                                 
      if(EN <= EIN(10):
) GO TO 700    
      if(EN > XV5V1(N5V1):
) GO TO 688                                
      DO 686 J=2,N5V1                                                 
      if(EN <= XV5V1[J]:
) GO TO 687                                      
  686 CONTINUE                                                          
      J=N5V1                                                          
  687 A=(YV5V1[J]-YV5V1(J-1))/(XV5V1[J]-XV5V1(J-1))                     
      B=(XV5V1(J-1)*YV5V1[J]-XV5V1[J]*YV5V1(J-1))/(XV5V1(J-1)-XV5V1[J]) 
      QIN(10,I)=(A*EN+B)*1.D-16 
      GO TO 689
# SCALE BY 1/E**2 ABOVE XV5V1(N5V1) EV
  688 QIN(10,I)=YV5V1(N5V1)*(XV5V1(N5V1)/EN)**2*1.D-16
  689 if(KIN(10) == 2) PEQIN(10,I)=PEQEL(2,(I-IOFFN(10)))
# TRIPLET AT 9.6EV
  700 QIN(11,I)=0.0
      PEQIN(11,I)=0.0
      if(EN <= EIN(11):
) GO TO 705
      if(EN > XTR1(NTRP1):
) GO TO 703
      DO 701 J=2,NTRP1
      if(EN <= XTR1[J]:
) GO TO 702
  701 CONTINUE
      J=NTRP1
  702 A=(YTR1[J]-YTR1(J-1))/(XTR1[J]-XTR1(J-1))
      B=(XTR1(J-1)*YTR1[J]-XTR1[J]*YTR1(J-1))/(XTR1(J-1)-XTR1[J])
      QIN(11,I)=(A*EN+B)*1.D-16*AMPTR1
      GO TO 704
# SCALE BY 1/E**2 ABOVE XTR1(NTRP1) EV
  703 QIN(11,I)=YTR1(NTRP1)*(XTR1(NTRP1)/EN)**2*1.D-16*AMPTR1
  704 if(EN <= (3.0*EIN(11))) GO TO 705
      PEQIN(11,I)=PEQEL(2,(I-IOFFN(11)))                                
# SINGLET DISSOCIATION AT 10.0 EV USE BEF SCALING WITH F=0.0443
  705 QIN(12,I)=0.0
      PEQIN(12,I)=0.0
      if(EN <= EIN(12):
) GO TO 706
      QIN(12,I)=0.0443/(EIN(12)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(12)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(12)+E(3))*1.025
      if(QIN(12,I):
 < 0.0) QIN(12,I)=0.0       
      if(EN <= (3.0*EIN(12):
)) GO TO 706
      PEQIN(12,I)=PEQEL(2,(I-IOFFN(12)))
# SINGLET DISSOCIATION AT 10.5 EV USE BEF SCALING WITH F=0.0642
  706 QIN(13,I)=0.0
      PEQIN(13,I)=0.0
      if(EN <= EIN(13):
) GO TO 707
      QIN(13,I)=0.0642/(EIN(13)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(13)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(13)+E(3))*1.024
      if(QIN(13,I):
 < 0.0) QIN(13,I)=0.0       
      if(EN <= (3.0*EIN(13):
)) GO TO 707
      PEQIN(13,I)=PEQEL(2,(I-IOFFN(13)))
# TRIPLET DISSOCIATION AT 10.9 EV  
  707 QIN(14,I)=0.0
      PEQIN(14,I)=0.0
      if(EN <= EIN(14):
) GO TO 712
      if(EN > XTR2(NTRP2):
) GO TO 710
      DO 708 J=2,NTRP2
      if(EN <= XTR2[J]:
) GO TO 709
  708 CONTINUE
      J=NTRP2
  709 A=(YTR2[J]-YTR2(J-1))/(XTR2[J]-XTR2(J-1))
      B=(XTR2(J-1)*YTR2[J]-XTR2[J]*YTR2(J-1))/(XTR2(J-1)-XTR2[J])
      QIN(14,I)=(A*EN+B)*1.D-16*AMPTR2
      GO TO 711
# SCALE BY 1/E**2 ABOVE XTR2(NTRP2) EV
  710 QIN(14,I)=YTR2(NTRP2)*(XTR2(NTRP2)/EN)**2*1.D-16*AMPTR2
  711 if(EN <= (3.0*EIN(14))) GO TO 712
      PEQIN(14,I)=PEQEL(2,(I-IOFFN(14)))                               
# SINGLET DISSOCIATION AT 11.0 EV USE BEF SCALING WITH F=0.1839
  712 QIN(15,I)=0.0
      PEQIN(15,I)=0.0
      if(EN <= EIN(15):
) GO TO 713
      QIN(15,I)=0.1839/(EIN(15)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(15)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(15)+E(3))*1.023
      if(QIN(15,I):
 < 0.0) QIN(15,I)=0.0       
      if(EN <= (3.0*EIN(15):
)) GO TO 713
      PEQIN(15,I)=PEQEL(2,(I-IOFFN(15)))
# SINGLET DISSOCIATION AT 11.5 EV USE BEF SCALING WITH F=0.1073
  713 QIN(16,I)=0.0
      PEQIN(16,I)=0.0
      if(EN <= EIN(16):
) GO TO 714
      QIN(16,I)=0.1073/(EIN(16)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(16)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(16)+E(3))*1.022
      if(QIN(16,I):
 < 0.0) QIN(16,I)=0.0       
      if(EN <= (3.0*EIN(16):
)) GO TO 714
      PEQIN(16,I)=PEQEL(2,(I-IOFFN(16)))
# SINGLET DISSOCIATION AT 12.0 EV USE BEF SCALING WITH F=0.0880
  714 QIN(17,I)=0.0
      PEQIN(17,I)=0.0
      if(EN <= EIN(17):
) GO TO 715
      QIN(17,I)=0.0880/(EIN(17)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(17)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(17)+E(3))*1.021
      if(QIN(17,I):
 < 0.0) QIN(17,I)=0.0       
      if(EN <= (3.0*EIN(17):
)) GO TO 715
      PEQIN(17,I)=PEQEL(2,(I-IOFFN(17)))
# SINGLET DISSOCIATION AT 12.5 EV USE BEF SCALING WITH F=0.0304
  715 QIN(18,I)=0.0
      PEQIN(18,I)=0.0
      if(EN <= EIN(18):
) GO TO 716
      QIN(18,I)=0.0304/(EIN(18)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(18)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(18)+E(3))*1.020
      if(QIN(18,I):
 < 0.0) QIN(18,I)=0.0       
      if(EN <= (3.0*EIN(18):
)) GO TO 716
      PEQIN(18,I)=PEQEL(2,(I-IOFFN(18)))
# SINGLET DISSOCIATION AT 13.0 EV USE BEF SCALING WITH F=0.0648
# ION PAIR printION  F- + SF5+
  716 QIN(19,I)=0.0
      PEQIN(19,I)=0.0
      if(EN <= EIN(19):
) GO TO 717
      QIN(19,I)=0.0648/(EIN(19)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(19)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(19)+E(3))*1.019
      if(QIN(19,I):
 < 0.0) QIN(19,I)=0.0       
      if(EN <= (3.0*EIN(19):
)) GO TO 717
      PEQIN(19,I)=PEQEL(2,(I-IOFFN(19)))
# SINGLET DISSOCIATION AT 13.5 EV USE BEF SCALING WITH F=0.1067
  717 QIN(20,I)=0.0
      PEQIN(20,I)=0.0
      if(EN <= EIN(20):
) GO TO 718
      QIN(20,I)=0.1067/(EIN(20)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(20)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(20)+E(3))*1.019
      if(QIN(20,I):
 < 0.0) QIN(20,I)=0.0       
      if(EN <= (3.0*EIN(20):
)) GO TO 718
      PEQIN(20,I)=PEQEL(2,(I-IOFFN(20)))
# SINGLET DISSOCIATION AT 14.0 EV USE BEF SCALING WITH F=0.1047
  718 QIN(21,I)=0.0
      PEQIN(21,I)=0.0
      if(EN <= EIN(21):
) GO TO 719
      QIN(21,I)=0.1047/(EIN(21)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(21)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(21)+E(3))*1.018
      if(QIN(21,I):
 < 0.0) QIN(21,I)=0.0       
      if(EN <= (3.0*EIN(21):
)) GO TO 719
      PEQIN(21,I)=PEQEL(2,(I-IOFFN(21)))
# TRIPLET DISSOCIATION  AT 14.4 EV
  719 QIN(22,I)=0.0
      PEQIN(2,I)=0.0
      if(EN <= EIN(22):
) GO TO 724
      if(EN > XTR3(NTRP3):
) GO TO 722
      DO 720 J=2,NTRP3
      if(EN <= XTR3[J]:
) GO TO 721
  720 CONTINUE
      J=NTRP3
  721 A=(YTR3[J]-YTR3(J-1))/(XTR3[J]-XTR3(J-1))
      B=(XTR3(J-1)*YTR3[J]-XTR3[J]*YTR3(J-1))/(XTR3(J-1)-XTR3[J])
      QIN(22,I)=(A*EN+B)*1.D-16*AMPTR3
      GO TO 723
# SCALE BY 1/E**2 ABOVE XTR3(NTRP3) EV
  722 QIN(22,I)=YTR3(NTRP3)*(XTR3(NTRP3)/EN)**2*1.D-16*AMPTR3
  723 if(EN <= (3.0*EIN(22))) GO TO 724
      PEQIN(22,I)=PEQEL(2,(I-IOFFN(22)))                               
# SINGLET DISSOCIATION AT 14.5 EV USE BEF SCALING WITH F=0.1211
  724 QIN(23,I)=0.00
      PEQIN(23,I)=0.0
      if(EN <= EIN(23):
) GO TO 725
      QIN(23,I)=0.01211/(EIN(23)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(23)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(23)+E(3))*1.017
      if(QIN(23,I):
 < 0.0) QIN(23,I)=0.0       
      if(EN <= (3.0*EIN(23):
)) GO TO 725
      PEQIN(23,I)=PEQEL(2,(I-IOFFN(23)))
# SINGLET DISSOCIATION AT 15.0 EV USE BEF SCALING WITH F=0.2225
  725 QIN(24,I)=0.0
      PEQIN(24,I)=0.0
      if(EN <= EIN(24):
) GO TO 726
      QIN(24,I)=0.2225/(EIN(24)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(24)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(24)+E(3))*1.017
      if(QIN(24,I):
 < 0.0) QIN(24,I)=0.0       
      if(EN <= (3.0*EIN(24):
)) GO TO 726
      PEQIN(24,I)=PEQEL(2,(I-IOFFN(24)))
# SINGLET DISSOCIATION AT 15.5 EV USE BEF SCALING WITH F=0.2731
  726 QIN(25,I)=0.0
      PEQIN(25,I)=0.0
      if(EN <= EIN(25):
) GO TO 727
      QIN(25,I)=0.2731/(EIN(25)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(25)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(25)+E(3))*1.016
      if(QIN(25,I):
 < 0.0) QIN(25,I)=0.0       
      if(EN <= (3.0*EIN(25):
)) GO TO 727
      PEQIN(25,I)=PEQEL(2,(I-IOFFN(25)))
# SINGLET DISSOCIATION AT 16.0 EV USE BEF SCALING WITH F=0.1514
  727 QIN(26,I)=0.0
      PEQIN(26,I)=0.0
      if(EN <= EIN(26):
) GO TO 728
      QIN(26,I)=0.1514/(EIN(26)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(26)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(26)+E(3))*1.016
      if(QIN(26,I):
 < 0.0) QIN(26,I)=0.0       
      if(EN <= (3.0*EIN(26):
)) GO TO 728
      PEQIN(26,I)=PEQEL(2,(I-IOFFN(26)))
# SINGLET DISSOCIATION AT 16.5 EV USE BEF SCALING WITH F=0.1831
  728 QIN(27,I)=0.0
       PEQIN(27,I)=0.0
      if(EN <= EIN(27):
) GO TO 729
      QIN(27,I)=0.1831/(EIN(27)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(27)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(27)+E(3))*1.015
      if(QIN(27,I):
 < 0.0) QIN(27,I)=0.0       
      if(EN <= (3.0*EIN(27):
)) GO TO 729
      PEQIN(27,I)=PEQEL(2,(I-IOFFN(27)))
# SINGLET DISSOCIATION AT 17.00 EV USE BEF SCALING WITH F=0.1678
  729 QIN(28,I)=0.0
      PEQIN(28,I)=0.0
      if(EN <= EIN(28):
) GO TO 730
      QIN(28,I)=0.1678/(EIN(28)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(28)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(28)+E(3))*1.015
      if(QIN(28,I):
 < 0.0) QIN(28,I)=0.0       
      if(EN <= (3.0*EIN(28):
)) GO TO 730
      PEQIN(28,I)=PEQEL(2,(I-IOFFN(28)))
# SINGLET DISSOCIATION AT 17.5 EV USE BEF SCALING WITH F=0.1098
  730 QIN(29,I)=0.0
      PEQIN(29,I)=0.0
      if(EN <= EIN(29):
) GO TO 731
      QIN(29,I)=0.1098/(EIN(29)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(29)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(29)+E(3))*1.014
      if(QIN(29,I):
 < 0.0) QIN(29,I)=0.0       
      if(EN <= (3.0*EIN(29):
)) GO TO 731
      PEQIN(29,I)=PEQEL(2,(I-IOFFN(29)))
# SINGLET DISSOCIATION AT 18.0 EV USE BEF SCALING WITH F=0.0623
  731 QIN(30,I)=0.0
      PEQIN(30,I)=0.0
      if(EN <= EIN(30):
) GO TO 732
      QIN(30,I)=0.0623/(EIN(30)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(30)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(30)+E(3))*1.014
      if(QIN(30,I):
 < 0.0) QIN(30,I)=0.0       
      if(EN <= (3.0*EIN(30):
)) GO TO 732
      PEQIN(30,I)=PEQEL(2,(I-IOFFN(30)))
# SINGLET DISSOCIATION AT 18.5 EV USE BEF SCALING WITH F=0.0361
  732 QIN(31,I)=0.0
      PEQIN(31,I)=0.0
      if(EN <= EIN(31):
) GO TO 733
      QIN(31,I)=0.0361/(EIN(31)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(31)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(31)+E(3))*1.014
      if(QIN(31,I):
 < 0.0) QIN(31,I)=0.0       
      if(EN <= (3.0*EIN(31):
)) GO TO 733
      PEQIN(31,I)=PEQEL(2,(I-IOFFN(31)))
# SINGLET DISSOCIATION AT 19.0 EV USE BEF SCALING WITH F=0.0107
  733 QIN(32,I)=0.0
      PEQIN(32,I)=0.0
      if(EN <= EIN(32):
) GO TO 734
      QIN(32,I)=0.0107/(EIN(32)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(32)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(32)+E(3))*1.013
      if(QIN(32,I):
 < 0.0) QIN(32,I)=0.0       
      if(EN <= (3.0*EIN(32):
)) GO TO 734
      PEQIN(32,I)=PEQEL(2,(I-IOFFN(32)))
# SINGLET DISSOCIATION AT 19.5 EV USE BEF SCALING WITH F=0.0129
  734 QIN(33,I)=0.0
      PEQIN(33,I)=0.0
      if(EN <= EIN(33):
) GO TO 735
      QIN(33,I)=0.0129/(EIN(33)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(33)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(33)+E(3))*1.013
      if(QIN(33,I):
 < 0.0) QIN(33,I)=0.0       
      if(EN <= (3.0*EIN(33):
)) GO TO 735
      PEQIN(33,I)=PEQEL(2,(I-IOFFN(33)))
# SINGLET DISSOCIATION AT 20.0 EV USE BEF SCALING WITH F=0.0053
  735 QIN(34,I)=0.0
      PEQIN(34,I)=0.0
      if(EN <= EIN(34):
) GO TO 736
      QIN(34,I)=0.0053/(EIN(34)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(34)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(34)+E(3))*1.013
      if(QIN(34,I):
 < 0.0) QIN(34,I)=0.0       
      if(EN <= (3.0*EIN(34):
)) GO TO 736
      PEQIN(34,I)=PEQEL(2,(I-IOFFN(34)))
# SINGLET DISSOCIATION AT 23.0 EV USE BEF SCALING WITH F=0.029
  736 QIN(35,I)=0.0
      PEQIN(35,I)=0.0
      if(EN <= EIN(35):
) GO TO 737
      QIN(35,I)=0.0290/(EIN(35)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(35)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(35)+E(3))*1.02
      if(QIN(35,I):
 < 0.0) QIN(35,I)=0.0       
      if(EN <= (3.0*EIN(35):
)) GO TO 737
      PEQIN(35,I)=PEQEL(2,(I-IOFFN(35)))
# LOAD BREMSSTRAHLUNG X-SECTIONS
  737 QIN(36,I)=0.0
      QIN(37,I)=0.0
      if(EN <= 1000.):
 GO TO 800
      DO 780 J=2,NBREM
      if(EN <= EBRM[J]:
) GO TO 790
  780 CONTINUE
      J=NBREM
  790 A=(math.log(Z16T[J])-math.log(Z16T(J-1)))/(EBRM[J]-EBRM(J-1))
      B=(math.log(Z16T[J])*EBRM(J-1)-math.log(Z16T(J-1))*EBRM[J])/(EBRM(J-1)-EBRM[J])
      A1=(math.log(Z9T[J])-math.log(Z9T(J-1)))/(EBRM[J]-EBRM(J-1))
      B1=(math.log(Z9T[J])*EBRM(J-1)-math.log(Z9T(J-1))*EBRM[J])/(EBRM(J-1)-EBRM[J])
      QIN(36,I)=math.exp(A*EN+B)*1.D-24
      QIN(37,I)=math.exp(A1*EN+B1)*6.D-24 
  800 CONTINUE
#     WRITE(6,881) EN
# 881 print('EN=',D14.6)
#     WRITE(6,882) QIN(1,I),QIN(2,I),QIN(3,I),QIN(4,I),QIN(5,I)
#     WRITE(6,882) QIN(6,I),QIN(7,I),QIN(8,I),QIN(9,I),QIN(10,I)
#     WRITE(6,882) QIN(11,I),QIN(12,I),QIN(13,I),QIN(14,I),QIN(15,I)
#     WRITE(6,882) QIN(16,I),QIN(17,I),QIN(18,I),QIN(19,I),QIN(20,I)
#     WRITE(6,882) QIN(21,I),QIN(22,I),QIN(23,I),QIN(24,I),QIN(25,I)
#     WRITE(6,882) QIN(26,I),QIN(27,I),QIN(28,I),QIN(29,I),QIN(30,I)
#     WRITE(6,882) QIN(31,I),QIN(32,I),QIN(33,I),QIN(34,I),QIN(35,I)
# 882 print(' QIN ',5D12.4)
#     WRITE(6,883) Q(2,I),Q(3,I),Q(4,I),Q(5,I)
# 883 print(' Q 2 3 4 5',4D12.4)
#     WRITE(6,884) QION(1,I),QION(2,I),QION(3,I)
# 884 print('QION 1 2 3 ',3D12.4)
#
      QSUP=QIN(1,I)+QIN(3,I)+QIN(5,I)
      QVIB=QIN(2,I)+QIN(4,I)+QIN(6,I)+QIN(7,I)+QIN(8,I)+QIN(9,I)+QIN(10,I)
      QSING=0.0
      DO 888 NPT=11,35
  888 QSING=QSING+QIN(NPT,I)
      QTRIP=QIN(11,I)+QIN(14,I)+QIN(22,I)
      QSING=QSING-QTRIP
      QATTA=Q(4,I)
      QIONS=0.0
      DO 889 NPT=1,NION
  889 QIONS=QIONS+QION(NPT,I)      
      QTOT=Q(2,I)+Q(4,I)+QSUP+QVIB+QSING+QTRIP                   
#     WRITE(6,767) EN,QTOT,QATT,QSUP,QVIB,QSING,QTRIP,QIONS,Q(2,I),QMOM
#767  print(' EN=','%.4f' %,' QTOT=','%.3f' %,' QATT=','%.3f' %,' QSUP=','%.3f' %,/
#    /,' QVIB=','%.3f' %,' QSING=','%.3f' %,' QTRIP=','%.3f' %,' QION=','%.3f' %,/,'
#    / QELAS=','%.3f' %,' QELMOM=','%.3f' %,/)
# 
 1000 CONTINUE
#  SAVE COMPUTE TIME
      DO 1010 K=1,NIN
      if(EFINAL <= EIN[K]:
) :
       NIN=K-1
       GO TO 1011
      # endif
 1010 CONTINUE
 1011 CONTINUE
      if(EFINAL > 1000.):
 NIN=37
#
      RETURN
      # end     
      def GAS31(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)     
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000)
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS32(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)     
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000)
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS33(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)     
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000)
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS34(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)     
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000)
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS35(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)     
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000)
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS36(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)     
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000)
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS37(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)     
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000)
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS38(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)     
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000)
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS39(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)     
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000)
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS40(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)     
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000)
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS41(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)     
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000)
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS42(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)     
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000)
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS43(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)     
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000)
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS44(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)   
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000)
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20) 
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6)  
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)       
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      DIMENSION XEN(130),YELM(130),YELT(130),YEPS(130),XION(42),YION(42),YINC(42),XATT(10),YATT(10),XKSHC(83),YKSHC(83),XKSHN(89),YKSHN(89),XTORS(32),YTORS(32),XVIB1(25),YVIB1(25),XVIB2(24),YVIB2(24),XVIB3(28),YVIB3(28),XVHAR(15),YVHAR(15),XTRP1(12),YTRP1(12),XTRP2(11),YTRP2(11),XTRP3(11),YTRP3(11),IOFFN(37),IOFFION(12)
      DIMENSION Z6T(25),Z7T(25),Z1T(25),EBRM(25)
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME  
#                                                
      DATA XEN/0.00,.001,0.01,0.02,0.10,0.20,0.30,0.40,0.50,0.70,1.00,1.50,2.00,3.00,4.00,5.00,7.00,8.00,10.0,12.0,15.0,20.0,30.0,60.0,100.,125.,150.,175.,200.,250.,300.,350.,400.,450.,500.,600.,700.,800.,900.,1000.,1250.,1500.,1750.,2000.,2500.,3000.,3500.,4000.,4500.,5000.,6000.,7000.,8000.,9000.,1.0D4,1.25D4,1.5D4,1.75D4,2.0D4,2.5'%.3f' %.0'%.3f' %.5D4,4.0D4,4.5D4,5.0D4,6.0D4,7.0D4,8.0D4,9.0D4,1.0D5,1.25D5,1.5D5,1.75D5,2.0D5,2.5'%.3f' %.0'%.3f' %.5D5,4.0D5,4.5D5,5.0D5,6.0D5,7.0D5,8.0D5,9.0D5,1.0D6,1.25D6,1.5D6,1.75'%.3f' %.0D6,2.5'%.3f' %.0'%.3f' %.5D6,4.0D6,4.5D6,5.0D6,6.0D6,7.0D6,8.0D6,9.0D6,1.0D7,1.25D7,1.5D7,1.75D7,2.0D7,2.5'%.3f' %.0'%.3f' %.5D7,4.0D7,4.5D7,5.0D7,6.0D7,7.0D7,8.0D7,9.0D7,1.0D8,1.25D8,1.5D8,1.75D8,2.0D8,2.5'%.3f' %.0'%.3f' %.5D8,4.0D8,4.5D8,5.0D8,6.0D8,7.0D8,8.0D8,9.0D8,1.0D9/
# ELASTIC MOMENTUM TRANSFER
      DATA YELM/400.,390.,280.,190.,38.0,19.5,15.0,13.0,12.5,13.0,14.0,15.5,17.0,21.0,26.0,31.0,38.0,38.0,37.0,33.0,29.0,24.0,18.0,11.0,6.09,4.50,3.50,2.81,2.32,1.67,1.26,.998,.810,.672,.568,.423,.328,.263,.216,.180,.123,.0899,.0687,.0544,.0367,.0265,.0202,.0159,.0128,.0106,.00765,.00579,.00455,.00367,.00304,.00203,.00146,.00110,8.63D-4,5.77D-4,4.14D-4,3.14D-4,2.47D-4,2.00D-4,1.66D-4,1.20D-4,9.10D-5,7.19D-5,5.85D-5,4.87D-5,3.32D-5,2.43D-5,1.88D-5,1.50D-5,1.04D-5,7.76D-6,6.07D-6,4.92D-6,4.09D-6,3.47D-6,2.62D-6,2.07D-6,1.69D-6,1.41D-6,1.20D-6,8.60D-7,6.48D-7,5.10D-7,4.13D-7,2.89D-7,2.15D-7,1.67D-7,1.33D-7,1.09D-7,9.15D-8,6.69D-8,5.13D-8,4.06D-8,3.30D-8,2.74D-8,1.84D-8,1.32D-8,9.99D-9,7.83D-9,5.19D-9,3.71D-9,2.78D-9,2.17D-9,1.74D-9,1.42D-9,1.01D-9,7.49D-10,5.79D-10,4.61D-10,3.75D-10,2.42D-10,1.69D-10,1.25D-10,9.57D-11,6.14D-11,4.27D-11,3.14D-11,2.40D-11,1.90D-11,1.54D-11,1.07D-11,7.86D-12,6.02D-12,4.76D-12,3.85D-12/
# ELASTIC 
      DATA YELT/400.,390.,280.,190.,38.0,19.5,15.0,14.5,15.0,15.7,17.0,19.0,21.4,26.5,34.5,41.3,51.3,54.0,56.0,52.2,46.2,39.7,33.0,22.3,16.2,13.2,11.8,10.2,8.76,7.44,6.49,5.78,5.21,4.75,4.37,3.77,3.32,2.97,2.68,2.45,2.01,1.71,1.48,1.31,1.06,.897,.775,.682,.610,.551,.463,.399,.351,.314,.284,.229,.193,.167,.147,.119,.101,.0877,.0779,.0702,.0640,.0548,.0482,.0442,.0394,.0363,.0308,.0271,.0245,.0226,.0199,.0181,.0169,.0159,.0152,.0147,.0139,.0133,.0129,.0126,.0123,.0119,.0117,.0115,.0114,.0113,.0112,.0111,.0111,.0110,.0110,.0110,.0110,.0110,.0110,.0110,.0109,29*0.0109/
#  1.0-EPS
      DATA YEPS/7*1.0,.84557,.75309,.74543,.73896,.72785,.69736,.69462,.64030,.63613,.62258,.57254,.51632,.48021,.47463,.44619,.37693,.31990,.20687,.17740,.14298,.12770,.12028,.09386,.076184,.063994,.055018,.048145,.042751,.034829,.029328,.025289,.022205,.019780,.015515,.012745,.01001,.009377,.007412,.006122,.005213,.004539,.004020,.003604,.002989,.002552,.002225,.001973,.001771,.001410,.001170,9.991D-4,8.715D-4,6.926D-4,5.734D-4,4.886D-4,4.250D-4,3.755D-4,3.361D-4,2.768D-4,2.346D-4,1.978D-4,1.785D-4,1.590D-4,1.239D-4,1.007D-4,8.425D-5,7.202D-5,5.511D-5,4.405D-5,3.628D-5,3.058D-5,2.622D-5,2.280D-5,1.781D-5,1.437D-5,1.188D-5,1.002D-5,8.574D-6,6.164D-6,4.635D-6,3.621D-6,2.910D-6,2.003D-6,1.466D-6,1.120D-6,8.840D-7,7.159D-7,5.917D-7,4.239D-7,3.186D-7,2.484D-7,1.991D-7,1.631D-7,1.066D-7,7.51D-8,5.58D-8,4.30D-8,2.78D-8,1.94D-8,1.43D-8,1.10D-8,8.70D-9,7.10D-9,4.89D-9,3.58D-9,2.73D-9,2.15D-9,1.73D-9,1.09D-9,7.48D-10,5.43D-10,4.11D-10,2.58D-10,1.76D-10,1.28D-10,9.7D-11,7.5D-11,6.0D-11,4.1D-11,3.0D-11,2.3D-11,1.8D-11,1.4D-11/
# TORSION SCALED BY 1/E ABOVE 10 EV
      DATA XTORS/.0334,.034,.035,.036,.038,.040,.045,.050,.055,.060,.070,.080,.100,.120,.140,.170,.200,0.25,0.30,0.40,0.50,0.70,1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.00,8.00,10.0/                                 
      DATA YTORS/0.00,.068,.072,.090,.114,.132,.150,.156,.162,.162,.156,.150,.138,.126,.114,.102,.0932,.0798,.0702,.0576, .0486,.0378,.0288,.0210,.0162,.0120,.0090,.0078,.0066,.00576,.00516,.0042/                                       
# VIB1 SCALED BY 1/E ABOVE 40 EV 
      DATA XVIB1/.103,0.12,0.13,0.15,0.20,0.23,0.25,0.30,0.40,0.50,0.70,1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.00,8.00,10.0,15.0,20.0,30.0,40.0/  
      DATA YVIB1/0.00,0.51,0.90,1.20,1.30,1.26,1.18,1.06,0.90,0.79,0.66,0.51,0.43,0.57,0.92,1.21,1.56,2.03,2.03,1.67,0.99,0.66,0.35,0.22,0.16/      
# YVIB2 SCALED BY 1/E ABOVE 40 EV
      DATA XVIB2/.179,.185,0.19,0.20,0.23,0.25,0.30,0.40,0.50,0.70,1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.00,8.00,10.0,15.0,20.0,30.0,40.0/
      DATA YVIB2/0.00,0.23,0.48,0.68,0.88,0.95,1.01,0.95,0.88,0.76,0.61,0.53,0.53,0.79,1.03,1.33,1.75,1.75,1.48,0.88,0.57,0.31,.193,.145/
# YVIB3 SCALED BY 1/E ABOVE 40 EV
      DATA XVIB3/.366,.373,0.38,0.39,0.40,0.42,0.45,0.50,0.55,0.60,0.70,0.80,0.90,1.00,1.20,1.50,2.00,3.00,4.00,5.00,6.00,7.00,8.00,10.0,15.0,20.0,30.0,40.0/
      DATA YVIB3/0.00,.224,.339,.415,.472,.553,0.63,0.70,0.73,0.74,0.74,0.71,0.65,0.66,0.65,0.65,0.73,1.04,1.39,1.70,1.87,1.87,1.46,0.80,0.53,0.29,0.19,0.14/
# YVHAR SCALED BY 1/E ABOVE 40 EV
      DATA XVHAR/.480,1.00,1.50,2.00,3.00,4.00,5.00,6.00,7.00,8.00,10.0,15.0,20.0,30.0,40.0/
      DATA YVHAR/0.00,.001,.033,.085,0.16,0.20,0.27,0.30,0.30,0.23,.125,.085,.047,.032,.024/
# NB.  RYDBERG 3S AND 3P AND HIGHER STATES
#   DIPOLE PART GIVEN BY BRION CAN.J.CHEM. 72(1994)529 
#   DIPOLE PART GIVE ANALYTICALLY BEF SCALING IN def
#
#   TRIPLET NON DIPOLE STATES 
      DATA XTRP1/4.60,5.50,7.00,8.00,9.00,10.0,12.0,14.0,17.0,20.0,24.0,27.0/         
      DATA YTRP1/0.00,.015,.050,.075,.084,.090,.098,.100,.090,.075,.055,.043/          
#                             
      DATA XTRP2/5.70,7.20,8.20,9.20,10.2,12.2,14.2,17.2,20.2,24.2,27.2/                                                          
      DATA YTRP2/0.00,.088,.161,.185,.198,.216,.220,.198,.165,.121,     .095/                                              
#
      DATA XTRP3/7.00,8.00,9.00,10.0,12.0,14.0,17.0,20.0,24.0,27.0,32.0/
      DATA YTRP3/0.00,.245,.504,.588,.665,.700,.700,.665,.525,.406,.301/                                             
#  
      DATA XION/8.40,9.00,10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,     18.0,19.0,20.0,22.5,25.0,27.5,30.0,35.0,40.0,45.0,    50.0,60.0,70.0,80.0,90.0,100.,110.,120.,140.,160.,180.,200.,300.,400.,500.,600.,700.,800.,900.,1000.,   2000.,3000./
# GROSS IONISATION                                                      
      DATA YION/0.00,.097,.267,.435,.595,.760,1.08,1.53,2.00,2.52,    3.06,3.58,4.07,5.18,6.15,7.00,7.75,8.93,9.79,10.4,10.8,11.3,11.5,11.5,11.4,11.2,11.0,10.7,10.2,9.76,9.30,8.86,7.16,6.00,5.18,4.57,4.09,3.71,3.40,3.13,1.81,1.30/ 
# COUNTING IONISATION
      DATA YINC/42*0.0/                           
      DATA XATT/10*0.0/    
      DATA YATT/10*0.0/ 
# K-SHELL IONISATION X-SECTION CARBON  
      DATA XKSHC/285.,298.,307.,316.,325.,335.,345.,365.,398.,422.,447.,473.,501.,531.,613.,668.,708.,750.,817.,917.,1000.,1122.,1296.,1496.,1679.,1884.,2054.,2238.,2512.,2985.,3981.,5012.,7079.,1.0D4,1.50D4,2.05D4,2.51'%.3f' %.07D4,4.10D4,5.01D4,6.13D4,7.08D4,8.18D4,1.0D5,1.54D5,2.05D5,2.99D5,4.10D5,5.01D5,6.13D5,7.08D5,8.18D5,1.0D6,1.26D6,1.5D6,2.05'%.3f' %.07D6,4.10D6,5.01D6,6.13D6,7.08D6,8.18D6,1.0D7,1.26D7,1.5D7,2.05'%.3f' %.07D7,4.10D7,5.01D7,6.13D7,7.08D7,8.18D7,1.0D8,1.26D8,1.5D8,2.05'%.3f' %.07D8,4.10D8,5.01D8,6.13D8,7.08D8,8.18D8,1.0D9/
      DATA YKSHC/0.00,1.66D-4,3.48D-4,5.25D-4,6.96D-4,8.63D-4,1.02D-3,1.33D-3,1.75D-3,2.01D-3,2.24D-3,2.46D-3,2.66D-3,2.84D-3,3.21D-3,3.38D-3,3.47D-3,3.55D-3,3.65D-3,3.72D-3,3.75D-3,3.74D-3,3.68D-3,3.57D-3,3.45D-3,3.31D-3,3.19D-3,3.07D-3,2.91D-3,2.66D-3,2.25D-3,1.95D-3,1.55D-3,1.21D-3,8.97D-4,7.07D-4,6.07D-4,5.21D-4,4.21D-4,3.63D-4,3.14D-4,2.84D-4,2.57D-4,2.25D-4,1.74D-4,1.50D-4,1.28D-4,1.15D-4,1.09D-4,1.05D-4,1.03D-4,1.02D-4,1.01D-4,1.005D-4,1.01D-4,1.03D-4,1.07D-4,1.11D-4,1.14D-4,1.17D-4,1.20D-4,1.22D-4,1.25D-4,1.29D-4,1.32D-4,1.38D-4,1.45D-4,1.50D-4,1.54D-4,1.58D-4,1.60D-4,1.63D-4,1.67D-4,1.71D-4,1.74D-4,1.80D-4,1.87D-4,1.92D-4,1.96D-4,2.00D-4,2.02D-4,2.05D-4,2.09D-4/
# NITROGEN K-SHELL IONISATION (MULTIPLY BY 2 FOR MOLECULE)
      DATA XKSHN/401.6,407.,419.,431.,444.,457.,471.,485.,499.,515.,530.,546.,562.,596.,631.,668.,708.,750.,794.,841.,891.,944.,1000.,1090.,1188.,1296.,1496.,1679.,1884.,2054.,2238.,2512.,2985.,3758.,4467.,5158.,5957.,7079.,1.0D4,1.26D4,1.50D4,2.05D4,2.51'%.3f' %.07D4,4.10D4,5.01D4,6.13D4,7.08D4,8.18D4,1.0D5,1.54D5,2.05D5,2.99D5,4.10D5,5.01D5,6.13D5,7.08D5,8.18D5,1.00D6,1.25D6,1.50D6,2.05'%.3f' %.07D6,4.10D6,5.01D6,6.13D6,7.08D6,8.18D6,1.00D7,1.22D7,1.50D7,1.88D7,2.24D7,2.82'%.3f' %.76D7,4.87D7,6.31D7,8.66D7,1.00D8,1.22D8,1.50D8,1.88D8,2.24D8,2.82'%.3f' %.76D8,4.87D8,6.31D8,8.66D8,1.00D9/
      DATA YKSHN/0.00,4.11D-5,1.38D-4,2.32D-4,3.23D-4,4.12D-4,4.98D-4,5.81D-4,6.61D-4,7.38D-4,8.13D-4,8.85D-4,9.54D-4,1.08D-3,1.20D-3,1.31D-3,1.41D-3,1.50D-3,1.58D-3,1.65D-3,1.72D-3,1.77D-3,1.82D-3,1.87D-3,1.91D-3,1.94D-3,1.95D-3,1.93D-3,1.89D-3,1.86D-3,1.81D-3,1.74D-3,1.63D-3,1.45D-3,1.32D-3,1.22D-3,1.12D-3,1.00D-3,7.95D-4,6.77D-4,5.98D-4,4.74D-4,4.09D-4,3.52D-4,2.85D-4,2.47D-4,2.14D-4,1.94D-4,1.76D-4,1.54D-4,1.19D-4,1.03D-4,8.77D-5,7.92D-5,7.54D-5,7.27D-5,7.14D-5,7.04D-5,6.97D-5,6.96D-5,7.00D-5,7.16D-5,7.47D-5,7.74D-5,7.95D-5,8.17D-5,8.34D-5,8.51D-5,8.75D-5,9.00D-5,9.25D-5,9.54D-5,9.76D-5,1.01D-4,1.04D-4,1.08D-4,1.11D-4,1.15D-4,1.17D-4,1.20D-4,1.22D-4,1.25D-4,1.27D-4,1.31D-4,1.34D-4,1.38D-4,1.41D-4,1.45D-4,1.47D-4/
# BREMSTRAHLUNG X-SECTION WITH CUT OFF
      DATA Z1T/11.3,6.18,2.80,1.54,.858,.407,.251,.176,.145,.150,.167,.178,.187,.193,.198,.205,.210,.218,.222,.228,.231,.233,.234,.235,.235/
      DATA Z6T/298.,178.,85.2,47.5,26.3,12.2,7.06,4.45,3.06,2.82,2.89,2.99,3.08,3.13,3.18,3.25,3.31,3.39,3.44,3.49,3.52,3.54,3.55,3.57,3.57/
      DATA Z7T/385.,234.,113.,63.5,35.5,16.4,9.48,5.96,4.07,3.73,3.81,3.93,4.04,4.11,4.18,4.26,4.33,4.42,4.48,4.55,4.59,4.61,4.63,4.64,4.65/
      DATA EBRM/1000.,2000.,5000.,1.D4,2.D4,5.D4,1.D5,2.D5,5.D5,1.D6,2.'%.3f' %.D6,4.D6,5.D6,6.D6,8.D6,1.D7,1.5D7,2.'%.3f' %.D7,4.D7,5.D7,6.D7,8.D7,1.D8/
#
# ********************************************************************
      if(NANISO == 2):
 NAME=' N(CH3)3 2015 ANISOTROPIC'         
      if(NANISO == 0):
 NAME=' N(CH3)3 2015  ISOTROPIC '                
# ********************************************************************  
#    X-SECTIONS FROM SCALING AND SYSTEMATICS                  
#    TMA USED AS DOPANT AND FOR LIGHT EMISSION 
#    LIGHT FROM TRANSITIONS IN S AND P RYDBERG STATES ( 4.6 EV LEVEL )
#    TOTAL ELECTRON SCATTERING FROM GDANSK.
# --------------------------------------------------------------------
# BEF CONSTANT
      EMASS2=1021997.804
      API=numpy.arccos(-1.00)      
      A0=0.52917720859D-8
      RY=13.60569193
      BBCONST=16.0*API*A0*A0*RY*RY/EMASS2
#
#   BORN BETHE VALUES FOR IONISATION
      CONST=1.873884D-20
      AM2=15.2
      C=142.1
      AUGKC=2.00
      AUGKN=1.99
#  
      NION=3
      NATT=1
      NIN=37
      NNULL=0 
      IONMODEL=0
#
      NDATA=130
      NIOND=42
      NKSHC=83
      NKSHN=89
      NATT1=10                                                         
      NTORS=32 
      NVIB1=25
      NVIB2=24
      NVIB3=28
      NTRP1=12
      NTRP2=11
      NTRP3=11
      NVHAR=15   
#                                                  
#  ARRAY SIZE
      NASIZE=20000
#
      NBREM=25
      DO 1 J=1,NIN
      IZBR[J]=0
    1 CONTINUE
      IZBR(38)=1
      IZBR(39)=6
      IZBR(40)=7
#
# SET ANISOTROPIC SCATTERING OKHRIMOVSKKY
      DO 2 J=1,6
    2 KEL[J]=NANISO
      DO 3 J=1,NIN
    3 KIN[J]=NANISO
#
      E[1]=0.0                                                          
      E(2)=2.0*EMASS/(59.11026*AMU)                                     
      E(3)=8.40                                                        
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0
#
      EION[1]=8.40
      EION(2)=285.0
      EION(3)=401.6
#
      EOBY[1]=EION[1]*0.85
      EOBY(2)=210.0
      EOBY(3)=260.0 
#  
      LEGAS[1]=0
      ISHELL[1]=0
      LEGAS(2)=1
      ISHELL(2)=1
      LEGAS(3)=2
      ISHELL(3)=1
      NC0[1]=0
      EC0[1]=0.0
      WKLM[1]=0.0
      EFL[1]=0.0
      NG1[1]=0
      EG1[1]=0.0
      NG2[1]=0
      EG2[1]=0.0
# K SHELL DATA INCLUDING FLUORESCENCE 
      NC0(2)=2
      EC0(2)=253.0
      WKLM(2)=0.0026
      EFL(2)=273.0
      NG1(2)=1
      EG1(2)=253.0
      NG2(2)=1
      EG2(2)=5.0
      NC0(3)=2
      EC0(3)=358.6
      WKLM(3)=0.0044
      EFL(3)=385. 
      NG1(3)=1
      EG1(3)=353.
      NG2(3)=1
      EG2(3)=6.0
#
      DO 141 J=1,NION
      DO 4 I=1,NASIZE
      if(EG[I]:
 > EION[J]) :
       IOFFION[J]=I-1
       GO TO 141
      # endif
    4 CONTINUE
  141 CONTINUE
#       
      EIN[1]=-0.025
      EIN(2)=0.025
      EIN(3)=-0.0334
      EIN(4)=0.0334
      EIN(5)=-0.103
      EIN(6)=0.103
      EIN(7)=0.179  
      EIN(8)=0.366                                                      
      EIN(9)=0.480
# NON DIPOLE
      EIN(10)=4.6  
# 3S RYDBERG DIPOLE
      EIN(11)=4.65
      EIN(12)=4.95
      EIN(13)=5.25
      EIN(14)=5.55
# NON DIPOLE
      EIN(15)=5.7
# 3P RYDBERG DIPOLE
      EIN(16)=5.85
      EIN(17)=6.15
      EIN(18)=6.45
      EIN(19)=6.75
# NON DIPOLE
      EIN(20)=7.0
# HIGHER RYDBERGS
      EIN(21)=7.05
      EIN(22)=7.35
      EIN(23)=7.65
      EIN(24)=7.95
      EIN(25)=8.25
      EIN(26)=8.55
      EIN(27)=8.85
      EIN(28)=9.15
      EIN(29)=9.45
      EIN(30)=9.75
      EIN(31)=10.05
      EIN(32)=10.35
      EIN(33)=10.65
      EIN(34)=10.95
      EIN(35)=11.25
      EIN(36)=11.55
      EIN(37)=11.85
      EIN(38)=0.0
      EIN(39)=0.0
      EIN(40)=0.0
# OFFSET ENERGY FOR EXCITATIONS
      DO 42 NL=1,NIN
      DO 651 I=1,NASIZE
      if(EG[I]:
 > abs(EIN(NL))) :
       IOFFN(NL)=I-1
       GO TO 42
      # endif
  651 CONTINUE
   42 CONTINUE
# *************************************************************
# PENNING TRANSFER FRACTION FOR EACH LEVEL
# SET TO 0 SINCE VERY LOW ENERGY EXCITATION LEVELS
      DO 5 K=1,NIN
      DO 5 L=1,3
    5 PENFRA[L,K]=0.0
# **************************************************************
      SCRPT[1]='                                                   '
      SCRPT(2)=' ELASTIC  N-(CH3)3 TRIMETHYL AMINE                 '
      SCRPT(3)=' IONISATION                         ELOSS=   8.40  '
      SCRPT(4)=' IONISATION   CARBON K-SHELL        ELOSS= 285.0   '
      SCRPT(5)=' IONISATION NITROGEN K-SHELL        ELOSS= 401.6   '
      SCRPT(6)=' ATTACHMENT                                        '
      SCRPT(7)='                                                   '
      SCRPT(8)='                                                   '
      SCRPT(9)=' ROTATION                           ELOSS= -0.025  '
      SCRPT(10)=' ROTATION                           ELOSS=  0.025  '
      SCRPT(11)=' TORSION + ROTATION                 ELOSS= -0.0334 '
      SCRPT(12)=' TORSION + ROTATION                 ELOSS=  0.0334 '
      SCRPT(13)=' VIBRATION V1                       ELOSS= -0.103  '
      SCRPT(14)=' VIBRATION V1                       ELOSS=  0.103  '
      SCRPT(15)=' VIBRATION V2                       ELOSS=  0.179  '
      SCRPT(16)=' VIBRATION V3                       ELOSS=  0.366  '
      SCRPT(17)=' VIBRATION HARMONICS                ELOSS=  0.480  '
      SCRPT(18)=' EXC TRIPLET                        ELOSS=  4.6    '
      SCRPT(19)=' EXC DIPOLE   3S RYDBERG  F=.00047  ELOSS=  4.65   '
      SCRPT(20)=' EXC DIPOLE   3S RYDBERG  F=.00384  ELOSS=  4.95   '
      SCRPT(21)=' EXC DIPOLE   3S RYDBERG  F=.00828  ELOSS=  5.25   '
      SCRPT(22)=' EXC DIPOLE   3S RYDBERG  F=.00974  ELOSS=  5.55   '
      SCRPT(23)=' EXC TRIPLET                        ELOSS=  5.70   '
      SCRPT(24)=' EXC DIPOLE   3P RYDBERG  F=.02635  ELOSS=  5.85   '
      SCRPT(25)=' EXC DIPOLE   3P RYDBERG  F=.03621  ELOSS=  6.15   '
      SCRPT(26)=' EXC DIPOLE   3P RYDBERG  F=.02819  ELOSS=  6.45   '
      SCRPT(27)=' EXC DIPOLE   3P RYDBERG  F=.02325  ELOSS=  6.75   '
      SCRPT(28)=' EXC TRIPLET                        ELOSS=  7.00   '
      SCRPT(29)=' EXC DIPOLE HIGH RYDBERG  F=.02271  ELOSS=  7.05   '
      SCRPT(30)=' EXC DIPOLE HIGH RYDBERG  F=.02561  ELOSS=  7.35   '
      SCRPT(31)=' EXC DIPOLE HIGH RYDBERG  F=.02641  ELOSS=  7.65   '
      SCRPT(32)=' EXC DIPOLE HIGH RYDBERG  F=.02625  ELOSS=  7.95   '
      SCRPT(33)=' EXC DIPOLE HIGH RYDBERG  F=.02671  ELOSS=  8.25   '
      SCRPT(34)=' EXC DIPOLE HIGH RYDBERG  F=.04342  ELOSS=  8.55   '
      SCRPT(35)=' EXC DIPOLE HIGH RYDBERG  F=.06804  ELOSS=  8.85   '
      SCRPT(36)=' EXC DIPOLE HIGH RYDBERG  F=.07186  ELOSS=  9.15   '
      SCRPT(37)=' EXC DIPOLE HIGH RYDBERG  F=.07346  ELOSS=  9.45   '
      SCRPT(38)=' EXC DIPOLE HIGH RYDBERG  F=.08795  ELOSS=  9.75   '
      SCRPT(39)=' EXC DIPOLE HIGH RYDBERG  F=.11445  ELOSS= 10.05   '
      SCRPT(40)=' EXC DIPOLE HIGH RYDBERG  F=.12904  ELOSS= 10.35   '
      SCRPT(41)=' EXC DIPOLE HIGH RYDBERG  F=.13512  ELOSS= 10.65   '
      SCRPT(42)=' EXC DIPOLE HIGH RYDBERG  F=.14497  ELOSS= 10.95   '
      SCRPT(43)=' EXC DIPOLE HIGH RYDBERG  F=.15169  ELOSS= 11.25   '
      SCRPT(44)=' EXC DIPOLE HIGH RYDBERG  F=.15328  ELOSS= 11.55   '
      SCRPT(45)=' EXC DIPOLE HIGH RYDBERG  F=.15788  ELOSS= 11.85   '
      SCRPT(46)=' BREMSSTRAHLUNG FROM HYDROGEN ATOMS                '
      SCRPT(47)=' BREMSSTRAHLUNG FROM CARBON ATOMS                  '
      SCRPT(48)=' BREMSSTRAHLUNG FROM NITROGEN ATOM                 '
#
      APOP1=math.exp(EIN[1]/AKT)
      APOP2=math.exp(EIN(3)/AKT)
      APOP3=math.exp(EIN(5)/AKT)
#                                            
#      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
#      EN=EN+ESTEP 
      EN=EG[I]
      GAMMA1=(EMASS2+2.00*EN)/EMASS2
      GAMMA2=GAMMA1*GAMMA1
      BETA=math.sqrt(1.00-1.00/GAMMA2)
      BETA2=BETA*BETA
#
      Q(2,I)=0.0
# USE LOG INTERPOLATION BECAUSE OF RAPID CHANGE IN X-SEC
      if(EN <= XEN(2):
) :
       Q(2,I)=YELM(2)*1.D-16
       GO TO 30
      # endif
      DO 10 J=2,NDATA                                                   
      if(EN <= XEN[J]:
) GO TO 20                                         
   10 CONTINUE                                                          
      J=NDATA
   20 YXJ=math.log(YELM[J])
      YXJ1=math.log(YELM(J-1))
      XNJ=math.log(XEN[J])
      XNJ1=math.log(XEN(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QMOM=math.exp(A*math.log(EN)+B)*1.D-16 
      YXJ=math.log(YELT[J])
      YXJ1=math.log(YELT(J-1))
      XNJ=math.log(XEN[J])
      XNJ1=math.log(XEN(J-1))
      A=(YXJ-YXJ1)/(XNJ-XNJ1)
      B=(XNJ1*YXJ-XNJ*YXJ1)/(XNJ1-XNJ)
      QELA=math.exp(A*math.log(EN)+B)*1.D-16 
      A=(YEPS[J]-YEPS(J-1))/(XEN[J]-XEN(J-1))
      B=(XEN(J-1)*YEPS[J]-XEN[J]*YEPS(J-1))/(XEN(J-1)-XEN[J])
      PQ2=(A*EN+B)
# EPS CORRECTED FOR 1-EPS
      PQ2=1.0-PQ2
      PQ1=0.5+(QELA-QMOM)/QELA
      Q(2,I)=QELA
      if(NANISO == 0):
 Q(2,I)=QMOM
   30 if(NANISO == 0) PEQEL(2,I)=0.5
      if(NANISO == 1):
 PEQEL(2,I)=PQ1
      if(NANISO == 2):
 PEQEL(2,I)=PQ2
#                                                                       
      Q(3,I)=0.0 
#               
      QION(1,I)=0.0
      PEQION(1,I)=0.5
      if(NANISO == 2):
 PEQION(1,I)=0.0                               
      if(EN < EION[1]:
) GO TO 35    
      if(EN > XION(NIOND):
) GO TO 33                                   
      DO 31 J=2,NIOND                                                   
      if(EN <= XION[J]:
) GO TO 32                                        
   31 CONTINUE                                                          
      J=NIOND                                                           
   32 A=(YION[J]-YION(J-1))/(XION[J]-XION(J-1))                         
      B=(XION(J-1)*YION[J]-XION[J]*YION(J-1))/(XION(J-1)-XION[J])       
      QION(1,I)=(A*EN+B)*1.D-16                                        
      GO TO 34
# USE BORN BETHE X-SECTION ABOVE XION(NIOND) EV
   33 X2=1.00/BETA2
      X1=X2*math.log(BETA2/(1.00-BETA2))-1.00
      QION(1,I)=CONST*(AM2*(X1-DEN[1]/2.0)+C*X2)
   34 if(EN <= (2.0*EION[1])) GO TO 35
      PEQION(1,I)=PEQEL(2,(I-IOFFION[1]))
# CARBON K SHELL IONISATION
   35 QION(2,I)=0.0
      PEQION(2,I)=0.5
      if(NANISO == 2):
 PEQION(2,I)=0.0
      if(EN <= EION(2):
) GO TO 38
      DO 36 J=2,NKSHC
      if(EN <= XKSHC[J]:
) GO TO 37
   36 CONTINUE
      J=NKSHC
   37 A=(YKSHC[J]-YKSHC(J-1))/(XKSHC[J]-XKSHC(J-1))
      B=(XKSHC(J-1)*YKSHC[J]-XKSHC[J]*YKSHC(J-1))/(XKSHC(J-1)-XKSHC[J])
# 3 CARBONS PER MOLECULE
      QION(2,I)=3.0*(A*EN+B)*1.D-16
      if(EN <= (2.0*EION(2):
)) GO TO 38
      PEQION(2,I)=PEQEL(2,(I-IOFFION(2)))
# NITROGEN K-SHELL IONISATION
   38 QION(3,I)=0.0
      PEQION(3,I)=0.5
      if(NANISO == 2):
 PEQION(3,I)=0.0
      if(EN <= EION(3):
) GO TO 41
      DO 39 J=2,NKSHN
      if(EN <= XKSHN[J]:
) GO TO 40
   39 CONTINUE
      J=NKSHN
   40 A=(YKSHN[J]-YKSHN(J-1))/(XKSHN[J]-XKSHN(J-1))
      B=(XKSHN(J-1)*YKSHN[J]-XKSHN[J]*YKSHN(J-1))/(XKSHN(J-1)-XKSHN[J])
      QION(3,I)=(A*EN+B)*1.D-16
      if(EN <= (2.0*EION(3):
)) GO TO 41
      PEQION(3,I)=PEQEL(2,(I-IOFFION(3)))
# CORRECT THE IONISATION FOR SPLIT INTO KSHELLS
      QION(1,I)=QION(1,I)-AUGKC*QION(2,I)-AUGKN*QION(3,I)
# ATTACHMENT
   41 Q(4,I)=0.0  
#                                                     
      Q(5,I)=0.0                                                     
      Q(6,I)=0.0                                                        
#                                                                      
#  SUPERELASTIC  ROT1
#
      QIN(1,I)=0.0
      PEQIN(1,I)=0.0
      if(EN <= 0.0):
 GO TO 100
      EFAC=math.sqrt(1.0-(EIN[1]/EN))
      QIN(1,I)=0.27*math.log((EFAC+1.0)/(EFAC-1.0))/EN
      QIN(1,I)=QIN(1,I)*APOP1/(1.0+APOP1)*1.D-16          
      if(EN <= abs(20.0*EIN[1]:
)) GO TO 100
      PEQIN(1,I)=PEQEL(2,(I-IOFFN[1]))    
#  ROT1     
  100 QIN(2,I)=0.0 
      PEQIN(2,I)=0.0                                                  
      if(EN <= EIN(2):
) GO TO 150 
      EFAC=math.sqrt(1.0-(EIN(2)/EN))                                       
      QIN(2,I)=0.27*math.log((1.0+EFAC)/(1.0-EFAC))/EN 
      QIN(2,I)=QIN(2,I)/(1.0+APOP1)*1.D-16       
      if(EN <= (20.0*EIN(2):
)) GO TO 150
      PEQIN(2,I)=PEQEL(2,(I-IOFFN(2)))                         
# 
#  SUPERELASTIC TORSION
#
  150 QIN(3,I)=0.0 
      PEQIN(3,I)=0.0                                                  
      if(EN <= 0.0):
 GO TO 200  
      if((EN+EIN(4):
) > XTORS(NTORS)) GO TO 175                         
      DO 160 J=2,NTORS
      if((EN+EIN(4):
) <= XTORS[J]) GO TO 170  
  160 CONTINUE
      J=NTORS
  170 A=(YTORS[J]-YTORS(J-1))/(XTORS[J]-XTORS(J-1))
      B=(XTORS(J-1)*YTORS[J]-XTORS[J]*YTORS(J-1))/(XTORS(J-1)-XTORS[J])
      QIN(3,I)=(EN+EIN(4))*(A*(EN+EIN(4))+B)/EN                
      QIN(3,I)=QIN(3,I)*APOP2/(1.0+APOP2)*1.D-16       
      GO TO 176
# SCALED BY 1/E ABOVE XTORS(NTORS) EV
  175 QIN(3,I)=YTORS(NTORS)*XTORS(NTORS)/EN 
      QIN(3,I)=QIN(3,I)*APOP2/(1.0+APOP2)*1.D-16          
  176 if(EN <= abs(10.0*EIN(3))) GO TO 200
      PEQIN(3,I)=PEQEL(2,(I-IOFFN(3)))            
# INELASTIC TORSION                                                          
  200 QIN(4,I)=0.0 
      PEQIN(4,I)=0.0                                                  
      if(EN <= EIN(4):
) GO TO 250
      if(EN > XTORS(NTORS):
) GO TO 225                          
      DO 210 J=2,NTORS
      if(EN <= XTORS[J]:
) GO TO 220
  210 CONTINUE
      J=NTORS
  220 A=(YTORS[J]-YTORS(J-1))/(XTORS[J]-XTORS(J-1)) 
      B=(XTORS(J-1)*YTORS[J]-XTORS[J]*YTORS(J-1))/(XTORS(J-1)-XTORS[J])
      QIN(4,I)=(A*EN+B)       
      QIN(4,I)=QIN(4,I)/(1.0+APOP2)*1.D-16        
      GO TO 226
# SCALED BY 1/E ABOVE XTORS(NTORS) EV
  225 QIN(4,I)=YTORS(NTORS)*XTORS(NTORS)/EN 
      QIN(4,I)=QIN(4,I)/(1.0+APOP2)*1.D-16 
  226 if(EN <= (10.0*EIN(4))) GO TO 250
      PEQIN(4,I)=PEQEL(2,(I-IOFFN(4)))                          
# SUPERELASTIC VIB1                                                   
  250 QIN(5,I)=0.0
      PEQIN(5,I)=0.0
      if(EN <= 0.0):
 GO TO 300    
      if((EN+EIN(6):
) > XVIB1(NVIB1)) GO TO 275                     
      DO 260 J=2,NVIB1                                                  
      if((EN+EIN(6):
) <= XVIB1[J]) GO TO 270                        
  260 CONTINUE                                                          
      J=NVIB1                                                           
  270 A=(YVIB1[J]-YVIB1(J-1))/(XVIB1[J]-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1[J]-XVIB1[J]*YVIB1(J-1))/(XVIB1(J-1)-XVIB1[J]) 
      QIN(5,I)=(EN+EIN(6))*(A*(EN+EIN(6))+B)/EN             
      QIN(5,I)=QIN(5,I)*APOP3/(1.0+APOP3)*1.D-16                 
      GO TO 276
# SCALED BY 1/E ABOVE XVIB1(NVIB1) EV
  275 QIN(5,I)=YVIB1(NVIB1)*XVIB1(NVIB1)/EN
      QIN(5,I)=QIN(5,I)*APOP3/(1.0+APOP3)*1.D-16        
  276 if(EN <= abs(10.0*EIN(5))) GO TO 300
      PEQIN(5,I)=PEQEL(2,(I-IOFFN(5)))
# INELASTIC VIB1                                                           
  300 QIN(6,I)=0.0 
      PEQIN(6,I)=0.0                                                  
      if(EN <= EIN(6):
) GO TO 350 
      if(EN > XVIB1(NVIB1):
) GO TO 325 
      DO 310 J=2,NVIB1                                                  
      if(EN <= XVIB1[J]:
) GO TO 320                                      
  310 CONTINUE                                                          
      J=NVIB1                                                           
  320 A=(YVIB1[J]-YVIB1(J-1))/(XVIB1[J]-XVIB1(J-1))                     
      B=(XVIB1(J-1)*YVIB1[J]-XVIB1[J]*YVIB1(J-1))/(XVIB1(J-1)-XVIB1[J]) 
      QIN(6,I)=(A*EN+B)
      QIN(6,I)=QIN(6,I)/(1.0+APOP3)*1.D-16                             
      GO TO 326
# SCALED BY 1/E ABOVE XVIB1(NVIB1) EV
  325 QIN(6,I)=YVIB1(NVIB1)*XVIB1(NVIB1)/EN               
      QIN(6,I)=QIN(6,I)/(1.0+APOP3)*1.D-16           
  326 if(EN <= (10.0*EIN(6))) GO TO 350
      PEQIN(6,I)=PEQEL(2,(I-IOFFN(6)))        
# INELASTIC VIB2                                                      
  350 QIN(7,I)=0.0 
      PEQIN(7,I)=0.0                                                  
      if(EN <= EIN(7):
) GO TO 400   
      if(EN > XVIB2(NVIB2):
) GO TO 375     
      DO 360 J=2,NVIB2                                                 
      if(EN <= XVIB2[J]:
) GO TO 370                                     
  360 CONTINUE                                                          
      J=NVIB2                                                           
  370 A=(YVIB2[J]-YVIB2(J-1))/(XVIB2[J]-XVIB2(J-1))                    
      B=(XVIB2(J-1)*YVIB2[J]-XVIB2[J]*YVIB2(J-1))/(XVIB2(J-1)-XVIB2[J])
      QIN(7,I)=(A*EN+B)*1.D-16                                        
      GO TO 376
# SCALED BY 1/E ABOVE XVIB2(NVIB2) EV
  375 QIN(7,I)=YVIB2(NVIB2)*XVIB2(NVIB2)/EN*1.D-16            
  376 if(EN <= (5.0*EIN(7))) GO TO 400
      PEQIN(7,I)=PEQEL(2,(I-IOFFN(7)))              
# INELASTIC VIB3                                                               
  400 QIN(8,I)=0.0  
      PEQIN(8,I)=0.0                                                    
      if(EN <= EIN(8):
) GO TO 450 
      if(EN > XVIB3(NVIB3):
) GO TO 425                                  
      DO 410 J=2,NVIB3                                                  
      if(EN <= XVIB3[J]:
) GO TO 420                                      
  410 CONTINUE                                                          
      J=NVIB3                                                           
  420 A=(YVIB3[J]-YVIB3(J-1))/(XVIB3[J]-XVIB3(J-1))                     
      B=(XVIB3(J-1)*YVIB3[J]-XVIB3[J]*YVIB3(J-1))/(XVIB3(J-1)-XVIB3[J]) 
      QIN(8,I)=(A*EN+B)*1.D-16                                          
      GO TO 426
# SCALED BY 1/E ABOVE XVIB3(NVIB3) EV
  425 QIN(8,I)=YVIB3(NVIB3)*XVIB3(NVIB3)/EN*1.D-16        
  426 if(EN <= (5.0*EIN(8))) GO TO 450
      PEQIN(8,I)=PEQEL(2,(I-IOFFN(8)))
# INELASTIC VIBRATION HARMONICS
  450 QIN(9,I)=0.0
      PEQIN(9,I)=0.0
      if(EN <= EIN(9):
) GO TO 500
      if(EN > XVHAR(NVHAR):
) GO TO 475  
      DO 460 J=2,NVHAR                                                  
      if(EN <= XVHAR[J]:
) GO TO 470                                      
  460 CONTINUE                                                          
      J=NVHAR                                                           
  470 A=(YVHAR[J]-YVHAR(J-1))/(XVHAR[J]-XVHAR(J-1))                     
      B=(XVHAR(J-1)*YVHAR[J]-XVHAR[J]*YVHAR(J-1))/(XVHAR(J-1)-XVHAR[J]) 
      QIN(9,I)=(A*EN+B)*1.D-16        
      GO TO 476
# SCALED BY 1/E ABOVE XVHAR(NVHAR) EV
  475 QIN(9,I)=YVHAR(NVHAR)*XVHAR(NVHAR)/EN*1.D-16
  476 if(EN <= (5.0*EIN(9))) GO TO 500
      PEQIN(9,I)=PEQEL(2,(I-IOFFN(9)))                     
# EXCITATION  NON DIPOLE                     
  500 QIN(10,I)=0.0
      PEQIN(10,I)=0.0
      if(EN <= EIN(10):
) GO TO 550
      if(EN > XTRP1(NTRP1):
) GO TO 525  
      DO 510 J=2,NTRP1                                                  
      if(EN <= XTRP1[J]:
) GO TO 520                                      
  510 CONTINUE                                                          
      J=NTRP1                                                          
  520 A=(YTRP1[J]-YTRP1(J-1))/(XTRP1[J]-XTRP1(J-1))                     
      B=(XTRP1(J-1)*YTRP1[J]-XTRP1[J]*YTRP1(J-1))/(XTRP1(J-1)-XTRP1[J]) 
      QIN(10,I)=(A*EN+B)*1.D-16    
      GO TO 526
# SCALED BY 1/E**2 ABOVE XTRP1(NTRP1) EV
  525 QIN(10,I)=YTRP1(NTRP1)*(XTRP1(NTRP1)/EN)**2*1.D-16
  526 if(EN <= (5.0*EIN(10))) GO TO 550
      PEQIN(10,I)=PEQEL(2,(I-IOFFN(10))) 
# PART OF 3S RYDBERG CONTINUUM
  550 QIN(11,I)=0.0
      PEQIN(11,I)=0.0
      if(EN <= EIN(11):
) GO TO 551
      QIN(11,I)=.0004779/(EIN(11)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(11)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(11)+E(3))*1.0323
      if(QIN(11,I):
 < 0.0) QIN(11,I)=0.0
      if(EN <= (5.0*EIN(11):
)) GO TO 551
      PEQIN(11,I)=PEQEL(2,(I-IOFFN(11)))
# PART OF 3S RYDBERG CONTINUUM
  551 QIN(12,I)=0.0
      PEQIN(12,I)=0.0
      if(EN <= EIN(12):
) GO TO 552
      QIN(12,I)=.0039141/(EIN(12)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(12)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(12)+E(3))*1.0303
      if(QIN(12,I):
 < 0.0) QIN(12,I)=0.0
      if(EN <= (5.0*EIN(12):
)) GO TO 552
      PEQIN(12,I)=PEQEL(2,(I-IOFFN(12)))
# PART OF 3S RYDBERG CONTINUUM
  552 QIN(13,I)=0.0
      PEQIN(13,I)=0.0
      if(EN <= EIN(13):
) GO TO 553
      QIN(13,I)=.0084476/(EIN(13)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(13)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(13)+E(3))*1.0286
      if(QIN(13,I):
 < 0.0) QIN(13,I)=0.0
      if(EN <= (5.0*EIN(13):
)) GO TO 553
      PEQIN(13,I)=PEQEL(2,(I-IOFFN(13)))
# PART OF 3S RYDBERG CONTINUUM
  553 QIN(14,I)=0.0
      PEQIN(14,I)=0.0
      if(EN <= EIN(14):
) GO TO 554
      QIN(14,I)=.0102610/(EIN(14)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(14)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(14)+E(3))*1.0270
      if(QIN(14,I):
 < 0.0) QIN(14,I)=0.0
      if(EN <= (5.0*EIN(14):
)) GO TO 554
      PEQIN(14,I)=PEQEL(2,(I-IOFFN(14)))
# EXCITATION  NON DIPOLE                     
  554 QIN(15,I)=0.0
      PEQIN(15,I)=0.0
      if(EN <= EIN(15):
) GO TO 559
      if(EN > XTRP2(NTRP2):
) GO TO 557  
      DO 555 J=2,NTRP2                                                  
      if(EN <= XTRP2[J]:
) GO TO 556                                      
  555 CONTINUE                                                          
      J=NTRP2                                                          
  556 A=(YTRP2[J]-YTRP2(J-1))/(XTRP2[J]-XTRP2(J-1))                     
      B=(XTRP2(J-1)*YTRP2[J]-XTRP2[J]*YTRP2(J-1))/(XTRP2(J-1)-XTRP2[J]) 
      QIN(15,I)=(A*EN+B)*1.D-16    
      GO TO 558
# SCALED BY 1/E**2 ABOVE XTRP2(NTRP2) EV
  557 QIN(15,I)=YTRP2(NTRP2)*(XTRP2(NTRP2)/EN)**2*1.D-16
  558 if(EN <= (5.0*EIN(15))) GO TO 559
      PEQIN(15,I)=PEQEL(2,(I-IOFFN(15))) 
# PART OF 3P RYDBERG CONTINUUM
  559 QIN(16,I)=0.0
      PEQIN(16,I)=0.0
      if(EN <= EIN(16):
) GO TO 560 
      QIN(16,I)=0.028163/(EIN(16)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(16)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(16)+E(3))*1.0256
      if(QIN(16,I):
 < 0.0) QIN(16,I)=0.0
      if(EN <= (4.0*EIN(16):
)) GO TO 560
      PEQIN(16,I)=PEQEL(2,(I-IOFFN(16)))                    
# PART OF 3P RYDBERG CONTINUUM
  560 QIN(17,I)=0.0
      PEQIN(17,I)=0.0
      if(EN <= EIN(17):
) GO TO 561 
      QIN(17,I)=0.038700/(EIN(17)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(17)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(17)+E(3))*1.0244
      if(QIN(17,I):
 < 0.0) QIN(17,I)=0.0
      if(EN <= (4.0*EIN(17):
)) GO TO 561
      PEQIN(17,I)=PEQEL(2,(I-IOFFN(17)))                    
# PART OF 3P RYDBERG CONTINUUM
  561 QIN(18,I)=0.0
      PEQIN(18,I)=0.0
      if(EN <= EIN(18):
) GO TO 562 
      QIN(18,I)=0.030128/(EIN(18)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(18)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(18)+E(3))*1.0233
      if(QIN(18,I):
 < 0.0) QIN(18,I)=0.0
      if(EN <= (4.0*EIN(18):
)) GO TO 562
      PEQIN(18,I)=PEQEL(2,(I-IOFFN(18)))                    
# PART OF 3P RYDBERG CONTINUUM
  562 QIN(19,I)=0.0
      PEQIN(19,I)=0.0
      if(EN <= EIN(19):
) GO TO 563 
      QIN(19,I)=0.024852/(EIN(19)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(19)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(19)+E(3))*1.0222
      if(QIN(19,I):
 < 0.0) QIN(19,I)=0.0
      if(EN <= (4.0*EIN(19):
)) GO TO 563
      PEQIN(19,I)=PEQEL(2,(I-IOFFN(19)))                    
# EXCITATION  NON DIPOLE                     
  563 QIN(20,I)=0.0
      PEQIN(20,I)=0.0
      if(EN <= EIN(20):
) GO TO 568
      if(EN > XTRP3(NTRP3):
) GO TO 566  
      DO 564 J=2,NTRP3                                                  
      if(EN <= XTRP3[J]:
) GO TO 565                                      
  564 CONTINUE                                                          
      J=NTRP3                                                          
  565 A=(YTRP3[J]-YTRP3(J-1))/(XTRP3[J]-XTRP3(J-1))                     
      B=(XTRP3(J-1)*YTRP3[J]-XTRP3[J]*YTRP3(J-1))/(XTRP3(J-1)-XTRP3[J]) 
      QIN(20,I)=(A*EN+B)*1.D-16    
      GO TO 567
# SCALED BY 1/E**2 ABOVE XTRP3(NTRP3) EV
  566 QIN(20,I)=YTRP3(NTRP3)*(XTRP3(NTRP3)/EN)**2*1.D-16
  567 if(EN <= (4.0*EIN(20))) GO TO 568
      PEQIN(20,I)=PEQEL(2,(I-IOFFN(20))) 
# HIGH RYDBERG STATES             
  568 QIN(21,I)=0.0
      PEQIN(21,I)=0.0
      if(EN <= EIN(21):
) GO TO 569 
      QIN(21,I)=0.023943/(EIN(21)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(21)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(21)+E(3))*1.0213
      if(QIN(21,I):
 < 0.0) QIN(21,I)=0.0
      if(EN <= (4.0*EIN(21):
)) GO TO 569
      PEQIN(21,I)=PEQEL(2,(I-IOFFN(21)))                    
# HIGH RYDBERG STATES             
  569 QIN(22,I)=0.0
      PEQIN(22,I)=0.0
      if(EN <= EIN(22):
) GO TO 570 
      QIN(22,I)=0.026992/(EIN(22)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(22)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(22)+E(3))*1.0204
      if(QIN(22,I):
 < 0.0) QIN(22,I)=0.0
      if(EN <= (4.0*EIN(22):
)) GO TO 570
      PEQIN(22,I)=PEQEL(2,(I-IOFFN(22)))                    
# HIGH RYDBERG STATES             
  570 QIN(23,I)=0.0
      PEQIN(23,I)=0.0
      if(EN <= EIN(23):
) GO TO 571 
      QIN(23,I)=0.027837/(EIN(23)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(23)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(23)+E(3))*1.0196
      if(QIN(23,I):
 < 0.0) QIN(23,I)=0.0
      if(EN <= (4.0*EIN(23):
)) GO TO 571
      PEQIN(23,I)=PEQEL(2,(I-IOFFN(23)))                    
# HIGH RYDBERG STATES             
  571 QIN(24,I)=0.0
      PEQIN(24,I)=0.0
      if(EN <= EIN(24):
) GO TO 572 
      QIN(24,I)=0.027667/(EIN(24)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(24)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(24)+E(3))*1.0189
      if(QIN(24,I):
 < 0.0) QIN(24,I)=0.0
      if(EN <= (4.0*EIN(24):
)) GO TO 572
      PEQIN(24,I)=PEQEL(2,(I-IOFFN(24)))                    
# HIGH RYDBERG STATES             
  572 QIN(25,I)=0.0
      PEQIN(25,I)=0.0
      if(EN <= EIN(25):
) GO TO 573 
      QIN(25,I)=0.028156/(EIN(25)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(25)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(25)+E(3))*1.0182
      if(QIN(25,I):
 < 0.0) QIN(25,I)=0.0
      if(EN <= (3.0*EIN(25):
)) GO TO 573
      PEQIN(25,I)=PEQEL(2,(I-IOFFN(25)))                    
# HIGH RYDBERG STATES             
  573 QIN(26,I)=0.0
      PEQIN(26,I)=0.0
      if(EN <= EIN(26):
) GO TO 574 
      QIN(26,I)=0.045773/(EIN(26)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(26)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(26)+E(3))*1.0175
# SCALE BY (1.0 - IONISATION QUANTUM EFFICIENCY)
      QIN(26,I)=QIN(26,I)*0.9324 
      if(QIN(26,I):
 < 0.0) QIN(26,I)=0.0
      if(EN <= (3.0*EIN(26):
)) GO TO 574
      PEQIN(26,I)=PEQEL(2,(I-IOFFN(26)))                    
# HIGH RYDBERG STATES             
  574 QIN(27,I)=0.0
      PEQIN(27,I)=0.0
      if(EN <= EIN(27):
) GO TO 575 
      QIN(27,I)=0.071724/(EIN(27)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(27)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(27)+E(3))*1.0169
# SCALE BY (1.0 - IONISATION QUANTUM EFFICIENCY)
      QIN(27,I)=QIN(27,I)*0.8514 
      if(QIN(27,I):
 < 0.0) QIN(27,I)=0.0
      if(EN <= (3.0*EIN(27):
)) GO TO 575
      PEQIN(27,I)=PEQEL(2,(I-IOFFN(27)))                    
# HIGH RYDBERG STATES             
  575 QIN(28,I)=0.0
      PEQIN(28,I)=0.0
      if(EN <= EIN(28):
) GO TO 576 
      QIN(28,I)=0.075742/(EIN(28)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(28)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(28)+E(3))*1.0164
# SCALE BY (1.0 - IONISATION QUANTUM EFFICIENCY)
      QIN(28,I)=QIN(28,I)*0.7703 
      if(QIN(28,I):
 < 0.0) QIN(28,I)=0.0
      if(EN <= (3.0*EIN(28):
)) GO TO 576
      PEQIN(28,I)=PEQEL(2,(I-IOFFN(28)))                    
# HIGH RYDBERG STATES             
  576 QIN(29,I)=0.0
      PEQIN(29,I)=0.0
      if(EN <= EIN(29):
) GO TO 577 
      QIN(29,I)=0.077213/(EIN(29)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(29)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(29)+E(3))*1.0159
# SCALE BY (1.0 - IONISATION QUANTUM EFFICIENCY)
      QIN(29,I)=QIN(29,I)*0.6892 
      if(QIN(29,I):
 < 0.0) QIN(29,I)=0.0
      if(EN <= (3.0*EIN(29):
)) GO TO 577
      PEQIN(29,I)=PEQEL(2,(I-IOFFN(29)))                    
# HIGH RYDBERG STATES             
  577 QIN(30,I)=0.0
      PEQIN(30,I)=0.0
      if(EN <= EIN(30):
) GO TO 578 
      QIN(30,I)=0.092447/(EIN(30)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(30)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(30)+E(3))*1.0154
# SCALE BY (1.0 - IONISATION QUANTUM EFFICIENCY)
      QIN(30,I)=QIN(30,I)*0.6081 
      if(QIN(30,I):
 < 0.0) QIN(30,I)=0.0
      if(EN <= (3.0*EIN(30):
)) GO TO 578
      PEQIN(30,I)=PEQEL(2,(I-IOFFN(30)))                    
# HIGH RYDBERG STATES             
  578 QIN(31,I)=0.0
      PEQIN(31,I)=0.0
      if(EN <= EIN(31):
) GO TO 579 
      QIN(31,I)=0.12030/(EIN(31)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(31)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(31)+E(3))*1.0149
# SCALE BY (1.0 - IONISATION QUANTUM EFFICIENCY)
      QIN(31,I)=QIN(31,I)*0.527  
      if(QIN(31,I):
 < 0.0) QIN(31,I)=0.0
      if(EN <= (3.0*EIN(31):
)) GO TO 579
      PEQIN(31,I)=PEQEL(2,(I-IOFFN(31)))                    
# HIGH RYDBERG STATES             
  579 QIN(32,I)=0.0
      PEQIN(32,I)=0.0
      if(EN <= EIN(32):
) GO TO 580 
      QIN(32,I)=0.13563/(EIN(32)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(32)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(32)+E(3))*1.0145
# SCALE BY (1.0 - IONISATION QUANTUM EFFICIENCY)
      QIN(32,I)=QIN(32,I)*0.4459 
      if(QIN(32,I):
 < 0.0) QIN(32,I)=0.0
      if(EN <= (3.0*EIN(32):
)) GO TO 580
      PEQIN(32,I)=PEQEL(2,(I-IOFFN(32)))                    
# HIGH RYDBERG STATES             
  580 QIN(33,I)=0.0
      PEQIN(33,I)=0.0
      if(EN <= EIN(33):
) GO TO 581 
      QIN(33,I)=0.14202/(EIN(33)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(33)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(33)+E(3))*1.0141
# SCALE BY (1.0 - IONISATION QUANTUM EFFICIENCY)
      QIN(33,I)=QIN(33,I)*0.3649 
      if(QIN(33,I):
 < 0.0) QIN(33,I)=0.0
      if(EN <= (3.0*EIN(33):
)) GO TO 581
      PEQIN(33,I)=PEQEL(2,(I-IOFFN(33)))                    
# HIGH RYDBERG STATES             
  581 QIN(34,I)=0.0
      PEQIN(34,I)=0.0
      if(EN <= EIN(34):
) GO TO 582 
      QIN(34,I)=0.15238/(EIN(34)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(34)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(34)+E(3))*1.0137
# SCALE BY (1.0 - IONISATION QUANTUM EFFICIENCY)
      QIN(34,I)=QIN(34,I)*0.2838 
      if(QIN(34,I):
 < 0.0) QIN(34,I)=0.0
      if(EN <= (3.0*EIN(34):
)) GO TO 582
      PEQIN(34,I)=PEQEL(2,(I-IOFFN(34)))                    
# HIGH RYDBERG STATES             
  582 QIN(35,I)=0.0
      PEQIN(35,I)=0.0
      if(EN <= EIN(35):
) GO TO 583 
      QIN(35,I)=0.15903/(EIN(35)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(35)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(35)+E(3))*1.0133
# SCALE BY (1.0 - IONISATION QUANTUM EFFICIENCY)
      QIN(35,I)=QIN(35,I)*0.2027 
      if(QIN(35,I):
 < 0.0) QIN(35,I)=0.0
      if(EN <= (3.0*EIN(35):
)) GO TO 583
      PEQIN(35,I)=PEQEL(2,(I-IOFFN(35)))                    
# HIGH RYDBERG STATES             
  583 QIN(36,I)=0.0
      PEQIN(36,I)=0.0
      if(EN <= EIN(36):
) GO TO 584 
      QIN(36,I)=0.16048/(EIN(36)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(36)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(36)+E(3))*1.0130
# SCALE BY (1.0 - IONISATION QUANTUM EFFICIENCY)
      QIN(36,I)=QIN(36,I)*0.1216 
      if(QIN(36,I):
 < 0.0) QIN(36,I)=0.0
      if(EN <= (3.0*EIN(36):
)) GO TO 584
      PEQIN(36,I)=PEQEL(2,(I-IOFFN(36)))                    
# HIGH RYDBERG STATES             
  584 QIN(37,I)=0.0
      PEQIN(37,I)=0.0
      if(EN <= EIN(37):
) GO TO 585 
      QIN(37,I)=0.16530/(EIN(37)*BETA2)*(math.log(BETA2*GAMMA2*EMASS2/(4.0*EIN(37)))-BETA2-DEN[I]/2.0)*BBCONST*EN/(EN+EIN(37)+E(3))*1.0127
# SCALE BY (1.0 - IONISATION QUANTUM EFFICIENCY)
      QIN(37,I)=QIN(37,I)*0.0405 
      if(QIN(37,I):
 < 0.0) QIN(37,I)=0.0
      if(EN <= (3.0*EIN(37):
)) GO TO 585
      PEQIN(37,I)=PEQEL(2,(I-IOFFN(37))) 
  585 CONTINUE     
# LOAD BREMSSTRAHLUNG X-SECTIONS
      QIN(38,I)=0.0
      QIN(39,I)=0.0
      QIN(40,I)=0.0
      if(EN <= 1000.):
 GO TO 720
      DO 700 J=2,NBREM
      if(EN <= EBRM[J]:
) GO TO 710
  700 CONTINUE
      J=NBREM
  710 A=(math.log(Z1T[J])-math.log(Z1T(J-1)))/(EBRM[J]-EBRM(J-1))
      B=(math.log(Z1T[J])*EBRM(J-1)-math.log(Z1T(J-1))*EBRM[J])/(EBRM(J-1)-EBRM[J])
      A1=(math.log(Z6T[J])-math.log(Z6T(J-1)))/(EBRM[J]-EBRM(J-1))
      B1=(math.log(Z6T[J])*EBRM(J-1)-math.log(Z6T(J-1))*EBRM[J])/(EBRM(J-1)-EBRM[J])
      A2=(math.log(Z7T[J])-math.log(Z7T(J-1)))/(EBRM[J]-EBRM(J-1))
      B2=(math.log(Z7T[J])*EBRM(J-1)-math.log(Z7T(J-1))*EBRM[J])/(EBRM(J-1)-EBRM[J])
      QIN(38,I)=math.exp(A*EN+B)*9.0*1.D-24
      QIN(39,I)=math.exp(A1*EN+B1)*3.0*1.D-24
      QIN(40,I)=math.exp(A2*EN+B2)*1.D-24
  720 CONTINUE
#---------------------------------------------------------------------
#---------------------------------------------------------------------
#    SUBTRACT ROTATIONAL XSEC TO GET CORRECT ELASTIC XSEC. 
      Q(2,I)=Q(2,I)-QIN(1,I)-QIN(2,I) 
#       IF(Q(2,I) <= 0.0) WRITE(6,966) Q(2,I),I
# 966 print(3X,' ERROR IN GAS 27 Q(2,I)=',E12.3,'  I=',I5)     
#  
      RSUM=QIN(1,I)+QIN(2,I)
      VSUM=0.0
      DO 800 J=3,9
  800 VSUM=VSUM+QIN[J][I]
      TRPSUM=QIN(10,I)+QIN(15,I)+QIN(20,I)
      SNGSUM=0.0
      DO 801 J=10,37
  801 SNGSUM=SNGSUM+QIN[J][I]
      SNGSUM=SNGSUM-TRPSUM
      SUMION=QION(1,I)+QION(2,I)+QION(3,I) 
      SUMBREM=QIN(38,I)+QIN(39,I)+QIN(40,I)
      Q(1,I)=Q(2,I)+SUMION+Q(4,I)+SNGSUM+TRPSUM+VSUM+RSUM
#     WRITE(6,911) EG[I],Q(1,I),Q(2,I),RSUM,VSUM,SUMION,SNGSUM,TRPSUM,
#    /SUMBREM
# 911 print(' EN =',D12.4,' QTOT=',D12.4,/,' QEL=',D12.4,
#    /' RSUM =',D12.4,' VSUM=',D12.4,/,' QION=',D12.4,' SNGLT=',D12.4,
#    /' TRPLT=',D12.4,/,' BREM =',D12.4,/)
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      DO 1010 K=1,NIN
      if(EFINAL <= EIN[K]:
) :
       NIN=K-1
       GO TO 1011
      # endif
 1010 CONTINUE
 1011 CONTINUE
      if(NIN <= 9):
 NIN=9
      if(EFINAL > 1000.):
 NIN=40                                       
#                                                                       
      RETURN
      # end
      def GAS45(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS46(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS47(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS48(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS49(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS50(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS51(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS52(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS53(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS54(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS55(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS56(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS57(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS58(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS59(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS60(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS61(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS62(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS63(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS64(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS65(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS66(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS67(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS68(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS69(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS70(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS71(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS72(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS73(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS74(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS75(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS76(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS77(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS78(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS79(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
      def GAS80(Q,QIN,NIN,E,EIN,NAME,VIRIAL,EOBY ,PEQEL,PEQIN,PENFRA,KEL,KIN,QION,PEQION,EION,NION,QATT,NATT,   QNULL,NNULL,SCLN,NC0,EC0,WKLM,EFL,NG1,EG1,NG2,EG2,IZBR,LEGAS,ISHELL,IONMODEL,ESPLIT,SCRPT,SCRPTN)    
      IMPLICIT #real*8 (A-H,O-Z)
      IMPLICIT #integer*8 (I-N)                                         
      COMMON/CNSTS/ECHARG,EMASS,AMU,PIR2                                
      COMMON/INPT/NGAS,NSTEP,NANISO,EFINAL,ESTEP,AKT,ARY,TEMPC,TORR,IPEN
      COMMON/MIX2/EG(20000),EROOT(20000),QT1(20000),QT2(20000),QT3(20000),QT4(20000) 
      COMMON/DENS/DEN(20000) 
      DIMENSION QATT(8,20000),QNULL(10,20000),SCLN(10),ESPLIT(5,20)
      DIMENSION PEQEL(6,20000),PEQIN(250,20000),KIN(250),KEL(6) 
      DIMENSION QION(30,20000),PEQION(30,20000),EION(30),EOBY(30)       
      DIMENSION NC0(30),EC0(30),WKLM(30),EFL(30),NG1(30),EG1(30),NG2(30),EG2(30),IZBR(250),LEGAS(30),ISHELL(30)
      DIMENSION Q(6,20000),QIN(250,20000),E(6),EIN(250),PENFRA[3,250]   
      CHARACTER*50 SCRPT(300),SCRPTN(10) 
      CHARACTER*25 NAME                                                 
      NAME=' DUMMY         '     
# --------------------------------------------------------------------- 
#   DUMMY ROUTINE                       
# --------------------------------------------------------------------- 
      NION=1
      NATT=1
      NIN=0
      NNULL=0 
      IONMODEL=0
      DO 1 J=1,6
    1 KEL[J]=0
      DO 2 J=1,NIN
    2 KIN[J]=0           
      E[1]=0.0                                                          
      E(2)=0.0                                                          
      E(3)=0.0                                                          
      E(4)=0.0                                                          
      E(5)=0.0                                                          
      E(6)=0.0 
      SCRPT[1]='                              '
      SCRPT(2)=' ELASTIC       DUMMY          '
      SCRPT(3)=' IONISATION    ELOSS=         '
      SCRPT(4)=' ATTACHMENT                   '
      SCRPT(5)='                              '
      SCRPT(6)='                              '
      EN=-ESTEP/2.0                                      
      DO 900 I=1,NSTEP                                               
      EN=EN+ESTEP                                                       
      Q(2,I)=0.0                                                        
      Q(3,I)=0.0                                                        
      Q(4,I)=0.0                                                        
      Q(1,I)=Q(2,I)+Q(3,I)+Q(4,I)  
  900 CONTINUE                                                          
#  SAVE COMPUTE TIME
      RETURN                                                            
      # end   
