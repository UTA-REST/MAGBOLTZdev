import conf
import numpy
import sys
def STATS2():
	# IMPLICIT #real*8 (A-H,O-Z)
	# IMPLICIT #integer*8 (I-N)   
	# COMMON/INPT2/
	KGAS=conf.KGAS
	LGAS=conf.LGAS
	DETEFF=conf.DETEFF
	EXCWGHT=conf.EXCWGHT                            
	# COMMON/SETP/=conf.# COMMON/SETP/
	TMAX=conf.TMAX
	SMALL=conf.SMALL
	API=conf.API
	ESTART=conf.ESTART
	THETA=conf.THETA
	PHI=conf.PHI
	TCFMAX=conf.TCFMAX
	TCFMAX1=conf.TCFMAX1
	RSTART=conf.RSTART
	EFIELD=conf.EFIELD
	ETHRM=conf.ETHRM
	ECUT=conf.ECUT
	NDELTA=conf.NDELTA
	IMIP=conf.IMIP
	IWRITE  =conf.IWRITE  
	# COMMON/CLUS/=conf.# COMMON/CLUS/
	XAV=conf.XAV
	YAV=conf.YAV
	ZAV=conf.ZAV
	TAV=conf.TAV
	XYAV=conf.XYAV
	XYZAV=conf.XYZAV
	DX=conf.DX
	DY=conf.DY
	DZ=conf.DZ
	DT=conf.DT
	DXY=conf.DXY
	DXYZ=conf.DXYZ
	NCL=conf.NCL
	FARX1=conf.FARX1
	FARY1=conf.FARY1
	FARZ1=conf.FARZ1
	FARXY1=conf.FARXY1
	RMAX1=conf.RMAX1
	TSUM=conf.TSUM
	XNEG=conf.XNEG
	YNEG=conf.YNEG
	ZNEG=conf.ZNEG
	EDELTA=conf.EDELTA
	EDELTA2=conf.EDELTA2
	NCLEXC=conf.NCLEXC
	# COMMON/PRIM3=conf.# COMMON/PRIM3
	MSUM=conf.MSUM
	MCOMP=conf.MCOMP
	MRAYL=conf.MRAYL
	MPAIR=conf.MPAIR
	MPHOT=conf.MPHOT
	MVAC=conf.MVAC
	# COMMON/FANO/=conf.# COMMON/FANO/
	AFAN1=conf.AFAN1
	AFAN2=conf.AFAN2
	AFAN3=conf.AFAN3
	AFAN4=conf.AFAN4
	ASKEW=conf.ASKEW
	AKURT=conf.AKURT
	AFAN1EXC=conf.AFAN1EXC
	AFAN2EXC=conf.AFAN2EXC
	AFAN3EXC=conf.AFAN3EXC
	AFAN4EXC=conf.AFAN4EXC
	ASKEWEXC=conf.ASKEWEXC
	AKURTEXC=conf.AKURTEXC
	AFAN1TOT=conf.AFAN1TOT
	AFAN2TOT=conf.AFAN2TOT
	AFAN3TOT=conf.AFAN3TOT
	AFAN4TOT=conf.AFAN4TOT
	ASKEWTOT=conf.ASKEWTOT
	AKURTTOT=conf.AKURTTOT
	AFAN1TOF=conf.AFAN1TOF
	AFAN2TOF=conf.AFAN2TOF
	AFAN3TOF=conf.AFAN3TOF
	AFAN4TOF=conf.AFAN4TOF
	ASKEWTOF=conf.ASKEWTOF
	AKURTTOF=conf.AKURTTOF
	# COMMON/FANOE/=conf.# COMMON/FANOE/
	AFAN1E=conf.AFAN1E
	AFAN2E=conf.AFAN2E
	AFAN3E=conf.AFAN3E
	AFAN4E=conf.AFAN4E
	ASKEWE=conf.ASKEWE
	AKURTE=conf.AKURTE
	AFAN1EXCE=conf.AFAN1EXCE
	AFAN2EXCE=conf.AFAN2EXCE
	AFAN3EXCE=conf.AFAN3EXCE
	AFAN4EXCE=conf.AFAN4EXCE
	ASKEWEXCE=conf.ASKEWEXCE
	AKURTEXCE=conf.AKURTEXCE
	AFAN1TOTE=conf.AFAN1TOTE
	AFAN2TOTE=conf.AFAN2TOTE
	AFAN3TOTE=conf.AFAN3TOTE
	AFAN4TOTE=conf.AFAN4TOTE
	ASKEWTOTE=conf.ASKEWTOTE
	AKURTTOTE=conf.AKURTTOTE
	AFAN1TOFE=conf.AFAN1TOFE
	AFAN2TOFE=conf.AFAN2TOFE
	AFAN3TOFE=conf.AFAN3TOFE
	AFAN4TOFE=conf.AFAN4TOFE
	ASKEWTOFE=conf.ASKEWTOFE
	AKURTTOFE=conf.AKURTTOFE
	NFE=conf.NFE
	# COMMON/RNGE/=conf.# COMMON/RNGE/
	XBAR=conf.XBAR
	YBAR=conf.YBAR
	ZBAR=conf.ZBAR
	TBAR=conf.TBAR
	XYBAR=conf.XYBAR
	XYZBAR=conf.XYZBAR
	DXBAR=conf.DXBAR
	DYBAR=conf.DYBAR
	DZBAR=conf.DZBAR
	DTBAR=conf.DTBAR
	DXYBAR=conf.DXYBAR
	DXYZBAR=conf.DXYZBAR
	XMAX=conf.XMAX
	YMAX=conf.YMAX
	ZMAX=conf.ZMAX
	XYMAX=conf.XYMAX
	RMAX=conf.RMAX
	SUMTT=conf.SUMTT
	XNEG1=conf.XNEG1
	YNEG1=conf.YNEG1
	ZNEG1=conf.ZNEG1
	FARXBAR=conf.FARXBAR
	FARYBAR=conf.FARYBAR
	FARZBAR=conf.FARZBAR
	FARXYBAR=conf.FARXYBAR
	RMAXBAR=conf.RMAXBAR
	EBAR=conf.EBAR
	EBAR2=conf.EBAR2    
	# COMMON/PRIM1/=conf.# COMMON/PRIM1/
	AVRAYL=conf.AVRAYL
	AVCOMP=conf.AVCOMP
	AVPAIR=conf.AVPAIR
	AVPHOTO=conf.AVPHOTO
	# COMMON/PRIM2/=conf.# COMMON/PRIM2/
	CMPDST=conf.CMPDST
	RYLDST=conf.RYLDST
	#      
	#-----------------------------------------------------------------------
	#   CALCULATES AVERAGES OVER TOTAL NUMBER OF DELTAS
	#   CALCULATES FANO FACTORS FO,F1,F2 AND F3
	#  CALCULATES FANO FACTORS FOR EXCITATION 
	#  INCLUDED MODIFICATION TO CALCULATE ESCAPE PEAK FANO FACTORS 
	#-----------------------------------------------------------------------
	# 
	ANCL1=0.00
	ANCL2=0.00
	ANCL3=0.00
	ANCL4=0.00
	ANCL1E=0.00
	ANCL2E=0.00
	ANCL3E=0.00
	ANCL4E=0.00
	ANCL1EXC=0.00
	ANCL2EXC=0.00
	ANCL3EXC=0.00
	ANCL4EXC=0.00
	ANCL1EXCE=0.00
	ANCL2EXCE=0.00
	ANCL3EXCE=0.00
	ANCL4EXCE=0.00
	ANCL1TOT=0.00
	ANCL2TOT=0.00
	ANCL3TOT=0.00
	ANCL4TOT=0.00
	ANCL1TOTE=0.00
	ANCL2TOTE=0.00
	ANCL3TOTE=0.00
	ANCL4TOTE=0.00
	ANCL1TOF=0.00
	ANCL2TOF=0.00
	ANCL3TOF=0.00
	ANCL4TOF=0.00
	ANCL1TOFE=0.00
	ANCL2TOFE=0.00
	ANCL3TOFE=0.00
	ANCL4TOFE=0.00
	ATOTR=0.00
	ATOTC=0.00
	ATOTP=0.00
	ATOTPE=0.00
	NF=0
	NFE=0
	DETFRAC=DETEFF*0.01
	if(DETEFF == 0.0):
		# WRITE(6,99) 
		# 99  
		print(2*'\n',' WARNING EXCITATION DETECTION EFFICIENCY WAS ZERO NOW  SET TO 1.0 % ',2*'\n')
		DETFRAC=0.01
	# endif
	for I in range(1,int(NDELTA)+1):
		flag5=0
		NCLUS=NCL[I]
		NEXC=NCLEXC[I]
		if(IMIP == 1):
			# GO TO 11 
			pass
		else:
			if(MPAIR[I]> 2) :
				# WRITE(6,991) MPAIR[I],I
				# 991 
				print(' ERROR IN STATS2 MPAIR GT 2 = %d EVENT NO= %d'%(MPAIR[I],I))
				sys.exit()
			# endif
			if(MPAIR[I]> 0):
				flag5=1
				break
			#  REMOVE EXTRA ELECTRON FOR CONSISTENCY IN CLUSTER DEF FOR DELTAS      
		# 11 
		flag8=0
		if(flag5):
			pass
		else:
			NCLUS1=NCLUS   
			if(IMIP == 2):
				NCLUS1=NCLUS-1
			ANC1=float(NCLUS1)
			ANCL1=ANCL1+ANC1
			ANCL2=ANCL2+ANC1*ANC1
			ANCL3=ANCL3+ANC1*ANC1*ANC1
			ANCL4=ANCL4+ANC1*ANC1*ANC1*ANC1
			NTEMP=0
			for K in range(1,NEXC+1):
				R1=DRAND48(RDUM)
				if(R1 < DETFRAC):
					NTEMP=NTEMP+1
				# 1 CONTINUE
			ANC1EXC=float(NEXC)
			ANCL1EXC=ANCL1EXC+ANC1EXC
			ANCL2EXC=ANCL2EXC+ANC1EXC*ANC1EXC
			ANCL3EXC=ANCL3EXC+ANC1EXC*ANC1EXC*ANC1EXC
			ANCL4EXC=ANCL4EXC+ANC1EXC*ANC1EXC*ANC1EXC*ANC1EXC
			ANCTOT=ANC1+float(NTEMP)*EXCWGHT
			ANCL1TOT=ANCL1TOT+ANCTOT
			ANCL2TOT=ANCL2TOT+ANCTOT*ANCTOT
			ANCL3TOT=ANCL3TOT+ANCTOT*ANCTOT*ANCTOT
			ANCL4TOT=ANCL4TOT+ANCTOT*ANCTOT*ANCTOT*ANCTOT
			ANCTOF=ANC1+float(NEXC)*EXCWGHT
			ANCL1TOF=ANCL1TOF+ANCTOF
			ANCL2TOF=ANCL2TOF+ANCTOF*ANCTOF
			ANCL3TOF=ANCL3TOF+ANCTOF*ANCTOF*ANCTOF
			ANCL4TOF=ANCL4TOF+ANCTOF*ANCTOF*ANCTOF*ANCTOF
			NF=NF+1
			flag8=1
			#  REMOVE EXTRA ELECTRON FOR CONSISTENCY IN CLUSTER DEF FOR DELTAS      
		# 5 
		if(flag8):
			pass
		else:
			NCLUS1=NCLUS   
			if(IMIP == 2):
				NCLUS1=NCLUS-1
			ANC1=float(NCLUS1)
			ANCL1E=ANCL1E+ANC1
			ANCL2E=ANCL2E+ANC1*ANC1
			ANCL3E=ANCL3E+ANC1*ANC1*ANC1
			ANCL4E=ANCL4E+ANC1*ANC1*ANC1*ANC1
			NTEMP=0
			for K in range(1,NEXC+1):
				R1=DRAND48(RDUM)
				if(R1 < DETFRAC):
					NTEMP=NTEMP+1
				# 6 CONTINUE
			ANC1EXC=float(NEXC)
			ANCL1EXCE=ANCL1EXCE+ANC1EXC
			ANCL2EXCE=ANCL2EXCE+ANC1EXC*ANC1EXC
			ANCL3EXCE=ANCL3EXCE+ANC1EXC*ANC1EXC*ANC1EXC
			ANCL4EXCE=ANCL4EXCE+ANC1EXC*ANC1EXC*ANC1EXC*ANC1EXC
			ANCTOT=ANC1+float(NTEMP)*EXCWGHT
			ANCL1TOTE=ANCL1TOTE+ANCTOT
			ANCL2TOTE=ANCL2TOTE+ANCTOT*ANCTOT
			ANCL3TOTE=ANCL3TOTE+ANCTOT*ANCTOT*ANCTOT
			ANCL4TOTE=ANCL4TOTE+ANCTOT*ANCTOT*ANCTOT*ANCTOT
			ANCTOF=ANC1+float(NEXC)*EXCWGHT
			ANCL1TOFE=ANCL1TOFE+ANCTOF
			ANCL2TOFE=ANCL2TOFE+ANCTOF*ANCTOF
			ANCL3TOFE=ANCL3TOFE+ANCTOF*ANCTOF*ANCTOF
			ANCL4TOFE=ANCL4TOFE+ANCTOF*ANCTOF*ANCTOF*ANCTOF
			NFE=NFE+1
		# 8 
		if(IMIP == 3) :
			ATOTR=ATOTR+MRAYL[I]
			ATOTC=ATOTC+MCOMP[I]
			ATOTP=ATOTP+MPAIR[I]
			ATOTPE=ATOTPE+MPHOT[I]
		# endif
	# 10 CONTINUE
	# CALCULATE FANO FACTORS
	ANF=float(NF)
	ANF1=ANF*ANF
	if(ANF1 == 0.0):
		ANF1=1.00
	AFAN1=ANCL1/ANF
	AFAN1EXC=ANCL1EXC/ANF
	AFAN1TOT=ANCL1TOT/ANF
	AFAN1TOF=ANCL1TOF/ANF
	AFAN2=math.sqrt((ANF*ANCL2-ANCL1*ANCL1)/ANF1)
	AFAN2EXC=math.sqrt((ANF*ANCL2EXC-ANCL1EXC*ANCL1EXC)/ANF1)
	AFAN2TOT=math.sqrt((ANF*ANCL2TOT-ANCL1TOT*ANCL1TOT)/ANF1)
	AFAN2TOF=math.sqrt((ANF*ANCL2TOF-ANCL1TOF*ANCL1TOF)/ANF1)
	AFAN3=(ANCL3-3.00*AFAN1*ANCL2+2.00*ANCL1*AFAN1*AFAN1)/ANF
	AFAN3EXC=(ANCL3EXC-3.00*AFAN1EXC*ANCL2EXC+2.00*ANCL1EXC*AFAN1EXC*AFAN1EXC)/ANF
	AFAN3TOT=(ANCL3TOT-3.00*AFAN1TOT*ANCL2TOT+2.00*ANCL1TOT*AFAN1TOT*AFAN1TOT)/ANF
	AFAN3TOF=(ANCL3TOF-3.00*AFAN1TOF*ANCL2TOF+2.00*ANCL1TOF*AFAN1TOF*AFAN1TOF)/ANF
	AFAN4=(ANCL4-4.00*AFAN1*ANCL3+6.00*AFAN1*AFAN1*ANCL2-3.00*AFAN1*AFAN1*AFAN1*ANCL1)/ANF
	AFAN4=AFAN4-3.00*AFAN2*AFAN2*AFAN2*AFAN2
	AFAN4EXC=(ANCL4EXC-4.00*AFAN1EXC*ANCL3EXC+6.00*AFAN1EXC*AFAN1EXC*ANCL2EXC-3.00*AFAN1EXC*AFAN1EXC*AFAN1EXC*ANCL1EXC)/ANF
	AFAN4EXC=AFAN4EXC-3.00*AFAN2EXC*AFAN2EXC*AFAN2EXC*AFAN2EXC
	AFAN4TOT=(ANCL4TOT-4.00*AFAN1TOT*ANCL3TOT+6.00*AFAN1TOT*AFAN1TOT*ANCL2TOT-3.00*AFAN1TOT*AFAN1TOT*AFAN1TOT*ANCL1TOT)/ANF
	AFAN4TOT=AFAN4TOT-3.00*AFAN2TOT*AFAN2TOT*AFAN2TOT*AFAN2TOT
	AFAN4TOF=(ANCL4TOF-4.00*AFAN1TOF*ANCL3TOF+6.00*AFAN1TOF*AFAN1TOF*ANCL2TOF-3.00*AFAN1TOF*AFAN1TOF*AFAN1TOF*ANCL1TOF)/ANF
	AFAN4TOF=AFAN4TOF-3.00*AFAN2TOF*AFAN2TOF*AFAN2TOF*AFAN2TOF
	ASKEW=AFAN3/(AFAN2**3)
	AKURT=AFAN4/(AFAN2**4)
	AFAN3=AFAN3/AFAN1
	AFAN4=AFAN4/AFAN1
	ASKEWEXC=AFAN3EXC/(AFAN2EXC**3)
	AKURTEXC=AFAN4EXC/(AFAN2EXC**4)
	AFAN3EXC=AFAN3EXC/AFAN1EXC
	AFAN4EXC=AFAN4EXC/AFAN1EXC
	ASKEWTOT=AFAN3TOT/(AFAN2TOT**3)
	AKURTTOT=AFAN4TOT/(AFAN2TOT**4)
	AFAN3TOT=AFAN3TOT/AFAN1TOT
	AFAN4TOT=AFAN4TOT/AFAN1TOT
	ASKEWTOF=AFAN3TOF/(AFAN2TOF**3)
	AKURTTOF=AFAN4TOF/(AFAN2TOF**4)
	AFAN3TOF=AFAN3TOF/AFAN1TOF
	AFAN4TOF=AFAN4TOF/AFAN1TOF
	# CALCULATE FANO FACTORS FOR ESCAPE PEAK
	ANFE=float(NFE)
	ANF1E=ANFE*ANFE
	if(ANF1E == 0.0):
		ANF1E=1.00
	AFAN1E=ANCL1E/ANFE
	AFAN1EXCE=ANCL1EXCE/ANFE
	AFAN1TOTE=ANCL1TOTE/ANFE
	AFAN1TOFE=ANCL1TOFE/ANFE
	AFAN2E=math.sqrt((ANFE*ANCL2E-ANCL1E*ANCL1E)/ANF1E)
	AFAN2EXCE=math.sqrt((ANFE*ANCL2EXCE-ANCL1EXCE*ANCL1EXCE)/ANF1E)
	AFAN2TOTE=math.sqrt((ANFE*ANCL2TOTE-ANCL1TOTE*ANCL1TOTE)/ANF1E)
	AFAN2TOFE=math.sqrt((ANFE*ANCL2TOFE-ANCL1TOFE*ANCL1TOFE)/ANF1E)
	AFAN3E=(ANCL3E-3.00*AFAN1E*ANCL2E+2.00*ANCL1E*AFAN1E*AFAN1E)/ANFE
	AFAN3EXCE=(ANCL3EXCE-3.00*AFAN1EXCE*ANCL2EXCE+2.00*ANCL1EXCE*AFAN1EXCE*AFAN1EXCE)/ANFE
	AFAN3TOTE=(ANCL3TOTE-3.00*AFAN1TOTE*ANCL2TOTE+2.00*ANCL1TOTE*AFAN1TOTE*AFAN1TOTE)/ANFE
	AFAN3TOFE=(ANCL3TOFE-3.00*AFAN1TOFE*ANCL2TOFE+2.00*ANCL1TOFE*AFAN1TOFE*AFAN1TOFE)/ANFE
	AFAN4E=(ANCL4E-4.00*AFAN1E*ANCL3E+6.00*AFAN1E*AFAN1E*ANCL2E-3.00*AFAN1E*AFAN1E*AFAN1E*ANCL1E)/ANFE
	AFAN4E=AFAN4E-3.00*AFAN2E*AFAN2E*AFAN2E*AFAN2E
	AFAN4EXCE=(ANCL4EXCE-4.00*AFAN1EXCE*ANCL3EXCE+6.00*AFAN1EXCE*AFAN1EXCE*ANCL2EXCE-3.00*AFAN1EXCE*AFAN1EXCE*AFAN1EXCE*ANCL1EXCE)/ANFE
	AFAN4EXCE=AFAN4EXCE-3.00*AFAN2EXCE*AFAN2EXCE*AFAN2EXCE*AFAN2EXCE
	AFAN4TOTE=(ANCL4TOTE-4.00*AFAN1TOTE*ANCL3TOTE+6.00*AFAN1TOTE*AFAN1TOTE*ANCL2TOTE-3.00*AFAN1TOTE*AFAN1TOTE*AFAN1TOTE*ANCL1TOTE)/ANFE
	AFAN4TOTE=AFAN4TOTE-3.00*AFAN2TOTE*AFAN2TOTE*AFAN2TOTE*AFAN2TOTE
	AFAN4TOFE=(ANCL4TOFE-4.00*AFAN1TOFE*ANCL3TOFE+6.00*AFAN1TOFE*AFAN1TOFE*ANCL2TOFE-3.00*AFAN1TOFE*AFAN1TOFE*AFAN1TOFE*ANCL1TOFE)/ANFE
	AFAN4TOFE=AFAN4TOFE-3.00*AFAN2TOFE*AFAN2TOFE*AFAN2TOFE*AFAN2TOFE
	ASKEWE=AFAN3E/(AFAN2E**3)
	AKURTE=AFAN4E/(AFAN2E**4)
	AFAN3E=AFAN3E/AFAN1E
	AFAN4E=AFAN4E/AFAN1E
	ASKEWEXCE=AFAN3EXCE/(AFAN2EXCE**3)
	AKURTEXCE=AFAN4EXCE/(AFAN2EXCE**4)
	AFAN3EXCE=AFAN3EXCE/AFAN1EXCE
	AFAN4EXCE=AFAN4EXCE/AFAN1EXCE
	ASKEWTOTE=AFAN3TOTE/(AFAN2TOTE**3)
	AKURTTOTE=AFAN4TOTE/(AFAN2TOTE**4)
	AFAN3TOTE=AFAN3TOTE/AFAN1TOTE
	AFAN4TOTE=AFAN4TOTE/AFAN1TOTE
	ASKEWTOFE=AFAN3TOFE/(AFAN2TOFE**3)
	AKURTTOFE=AFAN4TOFE/(AFAN2TOFE**4)
	AFAN3TOFE=AFAN3TOFE/AFAN1TOFE
	AFAN4TOFE=AFAN4TOFE/AFAN1TOFE
	# CALCULATE AVERAGES OVER TOTAL NUMBER OF DELTAS 
	XBAR=0.00
	YBAR=0.00
	ZBAR=0.00 
	TBAR=0.00
	XYBAR=0.00
	XYZBAR=0.00
	DXBAR=0.00
	DYBAR=0.00
	DZBAR=0.00
	DTBAR=0.00
	DXYBAR=0.00
	DXYZBAR=0.00
	FARXBAR=0.00
	FARYBAR=0.00
	FARZBAR=0.00
	FARXYBAR=0.00
	RMAXBAR=0.00
	XMAX=0.00
	YMAX=0.00
	ZMAX=0.00
	XYMAX=0.00
	RMAX=0.00
	SUMTT=0.00
	XNEGSUM=0.00
	YNEGSUM=0.00
	ZNEGSUM=0.00
	EBAR=0.00
	EBAR2=0.00
	for I in range(1,NDELTA+1):
		XBAR=XBAR+XAV[I]
		YBAR=YBAR+YAV[I]
		ZBAR=ZBAR+ZAV[I]
		TBAR=TBAR+TAV[I]
		XYBAR=XYBAR+XYAV[I]
		XYZBAR=XYZBAR+XYZAV[I]
		DXBAR=DXBAR+DX[I]
		DYBAR=DYBAR+DY[I]
		DZBAR=DZBAR+DZ[I]
		DTBAR=DTBAR+DT[I]
		DXYBAR=DXYBAR+DXY[I]
		DXYZBAR=DXYZBAR+DXYZ[I]
		SUMTT=SUMTT+TSUM[I]
		FARXBAR=FARXBAR+FARX1[I]
		if(FARX1[I]> XMAX):
			XMAX=FARX1[I]
		FARYBAR=FARYBAR+FARY1[I]
		if(FARY1[I]> YMAX):
			YMAX=FARY1[I]
		FARZBAR=FARZBAR+FARZ1[I]
		if(FARZ1[I]> ZMAX):
			ZMAX=FARZ1[I]
		FARXYBAR=FARXYBAR+FARXY1[I]
		if(FARXY1[I]> XYMAX):
			XYMAX=FARXY1[I]
		RMAXBAR=RMAXBAR+RMAX1[I]
		if(RMAX1[I]> RMAX):
			RMAX=RMAX1[I]
		XNEGSUM=XNEGSUM+XNEG[I]
		YNEGSUM=YNEGSUM+YNEG[I]
		ZNEGSUM=ZNEGSUM+ZNEG[I]
		EBAR=EBAR+EDELTA[I]
		EBAR2=EBAR2+EDELTA2[I]
	# 20 CONTINUE
	ANDELTA=float(NDELTA)
	XBAR=XBAR/ANDELTA
	YBAR=YBAR/ANDELTA
	ZBAR=ZBAR/ANDELTA
	TBAR=TBAR/ANDELTA
	XYBAR=XYBAR/ANDELTA
	XYZBAR=XYZBAR/ANDELTA
	DXBAR=DXBAR/ANDELTA
	DYBAR=DYBAR/ANDELTA
	DZBAR=DZBAR/ANDELTA
	DTBAR=DTBAR/ANDELTA
	DXYBAR=DXYBAR/ANDELTA
	DXYZBAR=DXYZBAR/ANDELTA
	FARXBAR=FARXBAR/ANDELTA
	FARYBAR=FARYBAR/ANDELTA
	FARZBAR=FARZBAR/ANDELTA
	FARXYBAR=FARXYBAR/ANDELTA
	RMAXBAR=RMAXBAR/ANDELTA
	XNEG1=XNEGSUM/ANDELTA
	YNEG1=YNEGSUM/ANDELTA
	ZNEG1=ZNEGSUM/ANDELTA
	EBAR=EBAR/ANDELTA
	EBAR2=EBAR2/ANDELTA
	if(IMIP == 3):
		AVRAYL=ATOTR/ANDELTA
		AVCOMP=ATOTC/ANDELTA
		AVPAIR=ATOTP/ANDELTA
		AVPHOTO=ATOTPE/ANDELTA
	# endif
	if(IMIP == 3):
		for I in range(1,10+1):
			RYLDST[I]=0.0
			CMPDST[I]=0.0
		# 29  CONTINUE
		for I in range(1,NDELTA+1):
			if(MRAYL[I]>= 10 or MRAYL[I] < 1):
				# GO TO 30
				pass
			else:
				RYLDST[MRAYL[I]]=RYLDST[MRAYL[I]]+1.0
			# 30  CONTINUE
			if(MCOMP[I]>= 10 or MCOMP[I] < 1):
				# GO TO 31
				pass
			else:
				CMPDST[MCOMP[I]]=CMPDST[MCOMP[I]]+1.0
			# 31  CONTINUE
		# 32  CONTINUE
		for I in range(1,10+1):
			RYLDST[I]=RYLDST[I]/ANDELTA
			CMPDST[I]=CMPDST[I]/ANDELTA
		# 33  CONTINUE
	# endif
	if(1):
		conf.KGAS=KGAS
		conf.LGAS=LGAS
		conf.DETEFF=DETEFF
		conf.EXCWGHT=EXCWGHT
		conf.TMAX=TMAX
		conf.SMALL=SMALL
		conf.API=API
		conf.ESTART=ESTART
		conf.THETA=THETA
		conf.PHI=PHI
		conf.TCFMAX=TCFMAX
		conf.TCFMAX1=TCFMAX1
		conf.RSTART=RSTART
		conf.EFIELD=EFIELD
		conf.ETHRM=ETHRM
		conf.ECUT=ECUT
		conf.NDELTA=NDELTA
		conf.IMIP=IMIP
		conf.IWRITE  =IWRITE  
		conf.XAV=XAV
		conf.YAV=YAV
		conf.ZAV=ZAV
		conf.TAV=TAV
		conf.XYAV=XYAV
		conf.XYZAV=XYZAV
		conf.DX=DX
		conf.DY=DY
		conf.DZ=DZ
		conf.DT=DT
		conf.DXY=DXY
		conf.DXYZ=DXYZ
		conf.NCL=NCL
		conf.FARX1=FARX1
		conf.FARY1=FARY1
		conf.FARZ1=FARZ1
		conf.FARXY1=FARXY1
		conf.RMAX1=RMAX1
		conf.TSUM=TSUM
		conf.XNEG=XNEG
		conf.YNEG=YNEG
		conf.ZNEG=ZNEG
		conf.EDELTA=EDELTA
		conf.EDELTA2=EDELTA2
		conf.NCLEXC=NCLEXC
		conf.MSUM=MSUM
		conf.MCOMP=MCOMP
		conf.MRAYL=MRAYL
		conf.MPAIR=MPAIR
		conf.MPHOT=MPHOT
		conf.MVAC=MVAC
		conf.AFAN1=AFAN1
		conf.AFAN2=AFAN2
		conf.AFAN3=AFAN3
		conf.AFAN4=AFAN4
		conf.ASKEW=ASKEW
		conf.AKURT=AKURT
		conf.AFAN1EXC=AFAN1EXC
		conf.AFAN2EXC=AFAN2EXC
		conf.AFAN3EXC=AFAN3EXC
		conf.AFAN4EXC=AFAN4EXC
		conf.ASKEWEXC=ASKEWEXC
		conf.AKURTEXC=AKURTEXC
		conf.AFAN1TOT=AFAN1TOT
		conf.AFAN2TOT=AFAN2TOT
		conf.AFAN3TOT=AFAN3TOT
		conf.AFAN4TOT=AFAN4TOT
		conf.ASKEWTOT=ASKEWTOT
		conf.AKURTTOT=AKURTTOT
		conf.AFAN1TOF=AFAN1TOF
		conf.AFAN2TOF=AFAN2TOF
		conf.AFAN3TOF=AFAN3TOF
		conf.AFAN4TOF=AFAN4TOF
		conf.ASKEWTOF=ASKEWTOF
		conf.AKURTTOF=AKURTTOF
		conf.AFAN1E=AFAN1E
		conf.AFAN2E=AFAN2E
		conf.AFAN3E=AFAN3E
		conf.AFAN4E=AFAN4E
		conf.ASKEWE=ASKEWE
		conf.AKURTE=AKURTE
		conf.AFAN1EXCE=AFAN1EXCE
		conf.AFAN2EXCE=AFAN2EXCE
		conf.AFAN3EXCE=AFAN3EXCE
		conf.AFAN4EXCE=AFAN4EXCE
		conf.ASKEWEXCE=ASKEWEXCE
		conf.AKURTEXCE=AKURTEXCE
		conf.AFAN1TOTE=AFAN1TOTE
		conf.AFAN2TOTE=AFAN2TOTE
		conf.AFAN3TOTE=AFAN3TOTE
		conf.AFAN4TOTE=AFAN4TOTE
		conf.ASKEWTOTE=ASKEWTOTE
		conf.AKURTTOTE=AKURTTOTE
		conf.AFAN1TOFE=AFAN1TOFE
		conf.AFAN2TOFE=AFAN2TOFE
		conf.AFAN3TOFE=AFAN3TOFE
		conf.AFAN4TOFE=AFAN4TOFE
		conf.ASKEWTOFE=ASKEWTOFE
		conf.AKURTTOFE=AKURTTOFE
		conf.NFE=NFE
		conf.XBAR=XBAR
		conf.YBAR=YBAR
		conf.ZBAR=ZBAR
		conf.TBAR=TBAR
		conf.XYBAR=XYBAR
		conf.XYZBAR=XYZBAR
		conf.DXBAR=DXBAR
		conf.DYBAR=DYBAR
		conf.DZBAR=DZBAR
		conf.DTBAR=DTBAR
		conf.DXYBAR=DXYBAR
		conf.DXYZBAR=DXYZBAR
		conf.XMAX=XMAX
		conf.YMAX=YMAX
		conf.ZMAX=ZMAX
		conf.XYMAX=XYMAX
		conf.RMAX=RMAX
		conf.SUMTT=SUMTT
		conf.XNEG1=XNEG1
		conf.YNEG1=YNEG1
		conf.ZNEG1=ZNEG1
		conf.FARXBAR=FARXBAR
		conf.FARYBAR=FARYBAR
		conf.FARZBAR=FARZBAR
		conf.FARXYBAR=FARXYBAR
		conf.RMAXBAR=RMAXBAR
		conf.EBAR=EBAR
		conf.EBAR2    =EBAR2
		conf.AVRAYL=AVRAYL
		conf.AVCOMP=AVCOMP
		conf.AVPAIR=AVPAIR
		conf.AVPHOTO=AVPHOTO
		conf.CMPDST=CMPDST
		conf.RYLDST=RYLDST
	return
	# end
	# DOUBLE PRECISION FUNCTION
	def DMAX0(IA,IB):
		#integer *8 IA,IB
		if(IA < IB):
			return IB
		else:
			return IA
		# endif
		return
	# end
	# DOUBLE PRECISION FUNCTION
	def DMIN0(IA,IB):
		#integer*8 IA,IB,IONE
		IONE=1
		if(IA > IB):
			return IB
		elif(IA < IONE):
			return IONE
		else: 
			return IA
	# end 
	# DOUBLE PRECISION FUNCTION
	def DRAND48(DUMMY):
		# *-----------------------------------------------------------------------
		# *   RNDM2  - returns double precision random numbers by calling RM48.
		# *   (Last changed on  5/ 2/00.)
		# *-----------------------------------------------------------------------
		# implicit none
		#integer NVEC
		# PARAMETER(NVEC=1000)
		NVEC=1000
		# DOUBLE PRECISION
		float(RVEC[NVEC])
		float(DUMMY)
		#integer IVEC
		IVEC=0
		RVEC,IVEC
		globals().update(locals())
		# *** Now generate random number between 0 and one.
		if(IVEC == 0 or IVEC >= NVEC):
			RM48(RVEC,NVEC)
			IVEC=1
		else:
			IVEC=IVEC+1
		# endif
		# *** Assign result.
		# DRAND48=RVEC[IVEC]
		return RVEC[IVEC]
	# end
	#CCCCCCC
	# *0
	# * $Id: rm48.F,v 1.2 1996/12/12 16:32:06 cernlib Exp $
	# *
	# * $Log: rm48.F,v $
	# * Revision 1.2  1996/12/12 16:32:06  cernlib
	# * Variables ONE and ZERO added to SAVE statement, courtesy R.Veenhof
	# *
	# * Revision 1.1.1.1  1996/04/01 15:02:55  mclareni
	# * Mathlib gen
	# *
	# *
	# *#include "gen/pilot.h"